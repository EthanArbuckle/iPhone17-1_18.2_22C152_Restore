uint64_t CA::Render::MatchAnimation::show_match_animation(CA::Render::MatchAnimation *this, int a2, int a3)
{
  CA::Render *v5;
  NSObject *v6;
  NSObject *v7;
  void *const *v8;
  NSObject *v9;
  CFStringRef v10;
  CFStringRef v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E4F143B8];
  v5 = (CA::Render *)(a2 + 1);
  CA::Render::show_newline(v5);
  CA::Render::show_object(*((CA::Render **)this + 5), v5);
  if (*((void *)this + 6))
  {
    CA::Render::show_newline(v5);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(timingFunction ", buf, 2u);
      }
    }
    CA::Render::show_object(*((CA::Render **)this + 6), v5);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  CA::Render::show_newline(v5);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v9 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "(keyPath ", buf, 2u);
    }
  }
  v10 = CA::Render::key_path_copy_string(*((void *)this + 15), v8);
  CA::Render::show_cfstring(v10, v11);
  CFRelease(v10);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v12 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
  CA::Render::show_newline(v5);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *((void *)this + 13);
      *(_DWORD *)buf = 134217984;
      v19 = v14;
      _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "(sourceLayer 0x%lx)", buf, 0xCu);
    }
  }
  CA::Render::show_newline(v5);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *((_DWORD *)this + 28);
      *(_DWORD *)buf = 67109120;
      LODWORD(v19) = v16;
      _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(sourceContext %x)", buf, 8u);
    }
  }
  return CA::Render::Context::show_source_layer(*((unsigned int *)this + 28), *((CA::Render::Object **)this + 13), v5, a3);
}

void CA::Render::MatchPropertyAnimation::~MatchPropertyAnimation(CA::Render **this, void **a2)
{
  --dword_1EB2ADE48;
  *this = (CA::Render *)&unk_1ED02DEA8;
  CA::Render::key_path_free(this[15], a2);
  CA::Render::Animation::~Animation((CA::Render::Animation *)this, v3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const CA::Render::Object *v3;
  uint64_t vars8;

  --dword_1EB2ADE48;
  *this = (CA::Render *)&unk_1ED02DEA8;
  CA::Render::key_path_free(this[15], a2);

  CA::Render::Animation::~Animation((CA::Render::Animation *)this, v3);
}

void CA::Render::MatchMoveAnimation::show(CA::Render **this, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        v11 = "match-move-animation;";
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(match-move-animation", v12, 2u);
      }
    }
    CA::Render::MatchAnimation::show_match_animation((CA::Render::MatchAnimation *)this, a2, a3);
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "(sourcePoints ", v12, 2u);
      }
    }
    CA::Render::show_object(this[17], 0);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, ")", v12, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    v10 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      v11 = ")";
LABEL_18:
      _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
    }
  }
}

CA::Render::MatchAnimation *CA::Render::MatchPropertyAnimation::MatchPropertyAnimation(CA::Render::MatchPropertyAnimation *this, CA::Render::Decoder *a2)
{
  result = CA::Render::MatchAnimation::MatchAnimation(this, a2);
  *((unsigned char *)result + 12) = 32;
  ++dword_1EB2ADE48;
  *(void *)result = &unk_1ED02EFB8;
  return result;
}

BOOL CATransform3DIsIdentity_(CATransform3D *t)
{
  if (t->m11 != 1.0) {
    return 0;
  }
  uint64_t v2 = 1;
  unint64_t v3 = 15;
  while (v2 != 16)
  {
    double v4 = *(&t->m11 + v2);
    double v5 = *(&CATransform3DIdentity.m11 + v2++);
    if (v4 != v5)
    {
      unint64_t v3 = v2 - 2;
      return v3 > 0xE;
    }
  }
  return v3 > 0xE;
}

BOOL CATransform3DEqualToTransform_(CATransform3D *a, CATransform3D *b)
{
  if (a->m11 != b->m11) {
    return 0;
  }
  uint64_t v3 = 1;
  unint64_t v4 = 15;
  while (v3 != 16)
  {
    double v5 = *(&a->m11 + v3);
    double v6 = *(&b->m11 + v3++);
    if (v5 != v6)
    {
      unint64_t v4 = v3 - 2;
      return v4 > 0xE;
    }
  }
  return v4 > 0xE;
}

CATransform3D *__cdecl CATransform3DMakeTranslation_(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  *(_OWORD *)&result->m11 = xmmword_184997D50;
  result->m13 = 0.0;
  result->m14 = 0.0;
  *(_OWORD *)&result->m21 = xmmword_184997D60;
  *(_OWORD *)&result->m23 = 0u;
  *(_OWORD *)&result->m31 = 0u;
  *(_OWORD *)&result->m33 = xmmword_184997D50;
  *(_OWORD *)&result->m43 = xmmword_184997D60;
  result->m41 = tx;
  result->m42 = ty;
  result->m43 = tz;
  return result;
}

CATransform3D *__cdecl CATransform3DMakeScale_(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  *(_OWORD *)&result->m11 = xmmword_184997D50;
  *(_OWORD *)&result->m13 = 0u;
  *(_OWORD *)&result->m21 = xmmword_184997D60;
  *(_OWORD *)&result->m23 = 0u;
  *(_OWORD *)&result->m31 = 0u;
  *(_OWORD *)&result->m33 = xmmword_184997D50;
  *(_OWORD *)&result->m41 = 0u;
  *(_OWORD *)&result->m43 = xmmword_184997D60;
  result->m11 = sx;
  result->m22 = sy;
  result->m33 = sz;
  return result;
}

CATransform3D *__cdecl CATransform3DConcat(CATransform3D *__return_ptr retstr, CATransform3D *a, CATransform3D *b)
{
  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m43 = 0u;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = 0u;
  *(_OWORD *)&retstr->m21 = 0u;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m11 = 0u;
  *(_OWORD *)&retstr->m13 = 0u;
  CA::Mat4Impl::mat4_concat((float64x2_t *)retstr, &a->m11, &b->m11, v3);
  return result;
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  long long v5 = *(_OWORD *)&t->m13;
  long long v6 = *(_OWORD *)&t->m33;
  long long v7 = *(_OWORD *)&t->m23;
  *(float64x2_t *)&t->m41 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&t->m41, *(float64x2_t *)&t->m11, tx), *(float64x2_t *)&t->m21, ty), *(float64x2_t *)&t->m31, tz);
  long long v8 = *(_OWORD *)&t->m11;
  long long v9 = *(_OWORD *)&t->m41;
  long long v10 = *(_OWORD *)&t->m21;
  float64x2_t v11 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&t->m43, *(float64x2_t *)&t->m13, tx), *(float64x2_t *)&t->m23, ty);
  long long v12 = *(_OWORD *)&t->m31;
  *(float64x2_t *)&t->m43 = vmlaq_n_f64(v11, *(float64x2_t *)&t->m33, tz);
  *(_OWORD *)&retstr->m31 = v12;
  *(_OWORD *)&retstr->m33 = v6;
  *(_OWORD *)&retstr->m11 = v8;
  *(_OWORD *)&retstr->m13 = v5;
  *(_OWORD *)&retstr->m21 = v10;
  *(_OWORD *)&retstr->m23 = v7;
  long long v13 = *(_OWORD *)&t->m43;
  *(_OWORD *)&retstr->m41 = v9;
  *(_OWORD *)&retstr->m43 = v13;
  return t;
}

float64x2_t CATransform3DTranslateRight_(float64x2_t *a1, float64x2_t result, float64_t a3, double a4)
{
  result.f64[1] = a3;
  float64x2_t v5 = a1[1];
  float64x2_t v6 = a1[3];
  float64x2_t v7 = a1[5];
  float64x2_t v8 = a1[7];
  float64x2_t v9 = vmlaq_laneq_f64(a1[2], result, v6, 1);
  float64x2_t v10 = vmlaq_laneq_f64(a1[4], result, v7, 1);
  float64x2_t v11 = vmlaq_laneq_f64(a1[6], result, v8, 1);
  *a1 = vmlaq_laneq_f64(*a1, result, v5, 1);
  a1[1] = vmlaq_laneq_f64(v5, (float64x2_t)*(unint64_t *)&a4, v5, 1);
  a1[2] = v9;
  a1[3] = vmlaq_laneq_f64(v6, (float64x2_t)*(unint64_t *)&a4, v6, 1);
  a1[4] = v10;
  a1[5] = vmlaq_laneq_f64(v7, (float64x2_t)*(unint64_t *)&a4, v7, 1);
  a1[6] = v11;
  a1[7] = vmlaq_laneq_f64(v8, (float64x2_t)*(unint64_t *)&a4, v8, 1);
  return result;
}

__n128 CATransform3DTranslateRight@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>, float64_t a4@<D1>, unint64_t a5@<D2>)
{
  a3.f64[1] = a4;
  float64x2_t v6 = a1[1];
  float64x2_t v7 = a1[3];
  float64x2_t v8 = a1[5];
  float64x2_t v9 = a1[7];
  float64x2_t v10 = vmlaq_laneq_f64(a1[2], a3, v7, 1);
  float64x2_t v11 = vmlaq_laneq_f64(a1[4], a3, v8, 1);
  float64x2_t v12 = vmlaq_laneq_f64(a1[6], a3, v9, 1);
  *a1 = vmlaq_laneq_f64(*a1, a3, v6, 1);
  a1[1] = vmlaq_laneq_f64(v6, (float64x2_t)a5, v6, 1);
  a1[2] = v10;
  a1[3] = vmlaq_laneq_f64(v7, (float64x2_t)a5, v7, 1);
  a1[4] = v11;
  a1[5] = vmlaq_laneq_f64(v8, (float64x2_t)a5, v8, 1);
  a1[6] = v12;
  a1[7] = vmlaq_laneq_f64(v9, (float64x2_t)a5, v9, 1);
  float64x2_t v13 = *a1;
  float64x2_t v14 = a1[1];
  float64x2_t v15 = a1[3];
  *(float64x2_t *)(a2 + 32) = a1[2];
  *(float64x2_t *)(a2 + 48) = v15;
  *(float64x2_t *)a2 = v13;
  *(float64x2_t *)(a2 + 16) = v14;
  __n128 result = (__n128)a1[4];
  float64x2_t v17 = a1[5];
  float64x2_t v18 = a1[7];
  *(float64x2_t *)(a2 + 96) = a1[6];
  *(float64x2_t *)(a2 + 112) = v18;
  *(__n128 *)(a2 + 64) = result;
  *(float64x2_t *)(a2 + 80) = v17;
  return result;
}

CATransform3D *__cdecl CATransform3DScale_(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  float64x2_t v5 = vmulq_n_f64(*(float64x2_t *)&t->m11, sx);
  float64x2_t v6 = vmulq_n_f64(*(float64x2_t *)&t->m13, sx);
  float64x2_t v7 = vmulq_n_f64(*(float64x2_t *)&t->m21, sy);
  float64x2_t v8 = vmulq_n_f64(*(float64x2_t *)&t->m23, sy);
  float64x2_t v9 = vmulq_n_f64(*(float64x2_t *)&t->m31, sz);
  float64x2_t v10 = vmulq_n_f64(*(float64x2_t *)&t->m33, sz);
  *(float64x2_t *)&t->m11 = v5;
  *(float64x2_t *)&t->m13 = v6;
  *(float64x2_t *)&t->m21 = v7;
  *(float64x2_t *)&t->m23 = v8;
  *(float64x2_t *)&t->m31 = v9;
  *(float64x2_t *)&t->m33 = v10;
  return t;
}

CATransform3D *__cdecl CATransform3DInvert(CATransform3D *__return_ptr retstr, CATransform3D *t)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  __n128 result = (CATransform3D *)CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)v11, (CA::Mat4Impl *)t, v2);
  if (result) {
    float64x2_t v6 = (CATransform3D *)v11;
  }
  else {
    float64x2_t v6 = t;
  }
  long long v7 = *(_OWORD *)&v6->m33;
  *(_OWORD *)&retstr->m31 = *(_OWORD *)&v6->m31;
  *(_OWORD *)&retstr->m33 = v7;
  long long v8 = *(_OWORD *)&v6->m43;
  *(_OWORD *)&retstr->m41 = *(_OWORD *)&v6->m41;
  *(_OWORD *)&retstr->m43 = v8;
  long long v9 = *(_OWORD *)&v6->m13;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&v6->m11;
  *(_OWORD *)&retstr->m13 = v9;
  long long v10 = *(_OWORD *)&v6->m23;
  *(_OWORD *)&retstr->m21 = *(_OWORD *)&v6->m21;
  *(_OWORD *)&retstr->m23 = v10;
  return result;
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform_(CATransform3D *__return_ptr retstr, CATransform3D *m)
{
  *(_OWORD *)&m->m11 = xmmword_184997D50;
  *(_OWORD *)&m->m13 = 0u;
  *(_OWORD *)&m->m21 = xmmword_184997D60;
  *(_OWORD *)&m->m23 = 0u;
  *(_OWORD *)&m->m31 = 0u;
  *(_OWORD *)&m->m33 = xmmword_184997D50;
  *(_OWORD *)&m->m41 = 0u;
  *(_OWORD *)&m->m43 = xmmword_184997D60;
  m->m11 = *v2;
  m->m12 = v2[1];
  m->m21 = v2[2];
  m->m22 = v2[3];
  m->m41 = v2[4];
  m->m42 = v2[5];
  return m;
}

double CATransform3DConcatAffineTransform@<D0>(double *a1@<X0>, CGAffineTransform *a2@<X1>, const double *a3@<X3>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)&double result = *(_OWORD *)&CA::Mat4Impl::mat4_concat((float64x2_t *)a4, a1, a2, a3);
  return result;
}

CGAffineTransform *__cdecl CATransform3DGetAffineTransform_(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  long long v3 = v2[2];
  *(_OWORD *)&t->a = *v2;
  *(_OWORD *)&t->c = v3;
  *(_OWORD *)&t->tx = v2[6];
  return t;
}

double CA_CGPointApplyTransform_(double *a1, float64x2_t *this, double *a3)
{
  *(void *)&double result = *(_OWORD *)&CA::Mat4Impl::mat4_apply_to_point2(this, a1, a3);
  return result;
}

double CA_CGPointApplyTransform(float64x2_t *a1, double a2, double a3)
{
  double v3 = a1[7].f64[1] + a1[1].f64[1] * a2 + a1[3].f64[1] * a3;
  if (fabs(v3 + -1.0) >= 0.000001)
  {
    if (v3 <= 0.0) {
      double v3 = INFINITY;
    }
    else {
      double v3 = 1.0 / v3;
    }
  }
  *(void *)&double result = *(_OWORD *)&vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a1[6], *a1, a2), a1[2], a3), v3);
  return result;
}

double CA_CGPointUnapplyInverseTransform_(double *a1, float64x2_t *this, double *a3)
{
  *(void *)&double result = *(_OWORD *)&CA::Mat4Impl::mat4_unapply_inverse_to_point2(this, a1, a3);
  return result;
}

double CA_CGPointUnapplyInverseTransform(float64x2_t *a1, double a2, double a3, uint64_t a4, double *a5)
{
  v6[2] = *(double *)MEMORY[0x1E4F143B8];
  v6[0] = a2;
  v6[1] = a3;
  CA::Mat4Impl::mat4_unapply_inverse_to_point2(a1, v6, a5);
  return v6[0];
}

void CA_CGRectApplyTransform_(int8x16_t *a1, float64x2_t *this, double *a3)
{
}

double CA_CGRectApplyTransform(float64x2_t *a1, double a2, double a3, double a4, double a5, uint64_t a6, double *a7)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(double *)v8.i64 = a2;
  *(double *)&v8.i64[1] = a3;
  double v9 = a4;
  double v10 = a5;
  CA::Mat4Impl::mat4_apply_to_rect(a1, &v8, a7);
  return *(double *)v8.i64;
}

void CA_CGRectUnapplyInverseTransform_(int8x16_t *a1, float64x2_t *this, double *a3)
{
}

double CA_CGRectUnapplyInverseTransform(float64x2_t *a1, double a2, double a3, double a4, double a5, uint64_t a6, double *a7)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(double *)v8.i64 = a2;
  *(double *)&v8.i64[1] = a3;
  double v9 = a4;
  double v10 = a5;
  CA::Mat4Impl::mat4_unapply_inverse_to_rect(a1, &v8, a7);
  return *(double *)v8.i64;
}

double CATransform3DMakeWithSIMDFloat3x3@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  *(float64x2_t *)a1 = vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]);
  *(double *)(a1 + 16) = a2.n128_f32[2];
  *(void *)(a1 + 24) = 0;
  *(float64x2_t *)(a1 + 32) = vcvtq_f64_f32((float32x2_t)a3.n128_u64[0]);
  *(double *)(a1 + 48) = a3.n128_f32[2];
  *(void *)(a1 + 56) = 0;
  *(float64x2_t *)(a1 + 64) = vcvtq_f64_f32((float32x2_t)a4.n128_u64[0]);
  *(double *)(a1 + 80) = a4.n128_f32[2];
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

float64x2_t CATransform3DMakeWithSIMDFloat4x4@<Q0>(float64x2_t *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>)
{
  *a1 = vcvtq_f64_f32(*(float32x2_t *)a2.f32);
  a1[1] = vcvt_hight_f64_f32(a2);
  a1[2] = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
  a1[3] = vcvt_hight_f64_f32(a3);
  a1[4] = vcvtq_f64_f32(*(float32x2_t *)a4.f32);
  a1[5] = vcvt_hight_f64_f32(a4);
  float64x2_t result = vcvtq_f64_f32(*(float32x2_t *)a5.f32);
  a1[6] = result;
  a1[7] = vcvt_hight_f64_f32(a5);
  return result;
}

double CATransform3DMakeWithSIMDDouble3x3@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  double result = 0.0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  return result;
}

__n128 CATransform3DMakeWithSIMDDouble4x4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(__n128 *)(a2 + 112) = result;
  return result;
}

float32x2_t CATransform3DGetSIMDFloat3x3(float64x2_t *a1)
{
  return vcvt_f32_f64(*a1);
}

double CATransform3DGetSIMDFloat4x4(float64x2_t *a1)
{
  *(void *)&double result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]).u64[0];
  return result;
}

__n128 CATransform3DGetSIMDDouble3x3@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 48) = v3;
  __n128 result = *(__n128 *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 80);
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = 0u;
  *(void *)(a2 + 80) = v5;
  return result;
}

__n128 CATransform3DGetSIMDDouble4x4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 96);
  long long v6 = *(_OWORD *)(a1 + 112);
  *(__n128 *)(a2 + 96) = result;
  *(_OWORD *)(a2 + 112) = v6;
  return result;
}

void CA::CG::DrawGaussianBlur::draw_shape_and_color(CA::CG::DrawGaussianBlur *this, CA::CG::Renderer *a2)
{
  __dst[61] = *MEMORY[0x1E4F143B8];
  long long v4 = (int32x2_t *)*((void *)a2 + 1);
  float v5 = *((double *)a2 + 10);
  double v6 = v5;
  double v7 = *(double *)(*((void *)this + 15) + 80) * v5;
  int32x4_t v68 = 0uLL;
  CA::Shape::get_bounds(*(void *)(*(void *)&v4[31] + 8), v68.i32);
  double v10 = (int32x2_t *)v4[33];
  if (v10) {
    uint64_t v11 = v10 + 4;
  }
  else {
    uint64_t v11 = v4 + 25;
  }
  int32x2_t v12 = (int32x2_t)v68.u64[1];
  v9.i32[1] = 1;
  uint32x2_t v13 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v68.u64[1]);
  *(uint32x2_t *)v8.i8 = vpmax_u32(v13, v13);
  if ((v8.i32[0] & 0x80000000) == 0)
  {
    *(int32x2_t *)v8.i8 = v11[1];
    uint32x2_t v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v8.i8);
    *(uint32x2_t *)v9.i8 = vpmax_u32(v14, v14);
    if (v9.i32[0] < 0
      || (int32x2_t v15 = vadd_s32(*v11, *(int32x2_t *)v8.i8),
          *(int32x2_t *)v8.i8 = vmax_s32(*(int32x2_t *)v68.i8, *v11),
          int32x2_t v12 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v68.i8, (int32x2_t)v68.u64[1]), v15), *(int32x2_t *)v8.i8),
          uint32x2_t v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v12),
          *(uint32x2_t *)v9.i8 = vpmax_u32(v16, v16),
          v9.i32[0] < 0))
    {
      int32x2_t v12 = 0;
    }
    else
    {
      v8.u64[1] = (unint64_t)v12;
      int32x4_t v68 = v8;
    }
  }
  int v17 = v12.i32[0];
  if (v12.i32[0] <= v12.i32[1]) {
    int v17 = v12.i32[1];
  }
  v8.i32[0] = v17;
  v9.i32[0] = 1073741822;
  v18.i64[0] = v68.i32[0];
  v18.i64[1] = v68.i32[1];
  int8x16_t v19 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v8, v9), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v18));
  v18.i64[0] = v12.i32[0];
  v18.i64[1] = v12.i32[1];
  int8x16_t v20 = (int8x16_t)vcvtq_f64_s64(v18);
  int32x2_t v21 = vdup_n_s32(v17 > 1073741822);
  v18.i64[0] = v21.u32[0];
  v18.i64[1] = v21.u32[1];
  float64x2_t v66 = (float64x2_t)v19;
  float64x2_t v67 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v20);
  CA::BoundsImpl::inset(v66.f64, v7 * -2.8, v7 * -2.8);
  int8x16_t v23 = *((int8x16_t *)this + 8);
  int8x16_t v24 = *((int8x16_t *)this + 9);
  if (v5 != 1.0)
  {
    v22.f64[0] = 1.79769313e308;
    int8x16_t v25 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v22, (float64x2_t)v24).i64[0], 0);
    v26.i64[1] = *((void *)this + 17);
    *(double *)v26.i64 = v6 * *(double *)v23.i64;
    int8x16_t v23 = vbslq_s8(v25, v26, v23);
    v26.i64[1] = *((void *)this + 19);
    *(double *)v26.i64 = v6 * *(double *)v24.i64;
    int8x16_t v24 = vbslq_s8(v25, v26, v24);
    if (*(double *)&v24.i64[1] < 1.79769313e308)
    {
      v23.i64[1] = vmuld_lane_f64(v6, (float64x2_t)v23, 1);
      *(double *)&v24.i64[1] = *(double *)&v24.i64[1] * v6;
    }
  }
  int8x16_t v27 = (int8x16_t)vclezq_f64(v67);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v27, 1), v27).u64[0] & 0x8000000000000000) == 0)
  {
    int8x16_t v28 = (int8x16_t)vclezq_f64((float64x2_t)v24);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v28, 1), v28).u64[0] & 0x8000000000000000) == 0)
    {
      float64x2_t v29 = vaddq_f64((float64x2_t)v23, (float64x2_t)v24);
      float64x2_t v30 = vmaxnmq_f64(v66, (float64x2_t)v23);
      float64x2_t v31 = vminnmq_f64(vaddq_f64(v66, v67), v29);
      float64x2_t v32 = vsubq_f64(v31, v30);
      int8x16_t v33 = (int8x16_t)vclezq_f64(v32);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v33, 1), v33).u64[0] & 0x8000000000000000) == 0)
      {
        if (v7 >= 0.1)
        {
          int8x16_t v35 = (int8x16_t)vceqzq_f64(v32);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v35, 1), v35).u64[0] & 0x8000000000000000) != 0
            || (int8x16_t v36 = vorrq_s8((int8x16_t)vcltzq_f64(v32), (int8x16_t)vcgezq_f64(v32)),
                (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v36), 1), v36).u64[0] & 0x8000000000000000) != 0))
          {
            int32x4_t v65 = 0uLL;
            int32x2_t v40 = 0;
            int32x2_t v39 = (int32x2_t)-1;
          }
          else
          {
            int32x4_t v37 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v30, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            int32x4_t v38 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(v31, (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v37);
            int32x4_t v65 = vuzp1q_s32(v37, v38);
            int32x2_t v39 = vadd_s32(vmovn_s64((int64x2_t)v37), (int32x2_t)-1);
            int32x2_t v40 = vmovn_s64((int64x2_t)v38);
          }
          int v41 = v40.i32[1];
          if (v40.i32[0] <= v40.i32[1]) {
            int v42 = v40.i32[1];
          }
          else {
            int v42 = v40.i32[0];
          }
          if (v40.i32[0] < v40.i32[1]) {
            int v41 = v40.i32[0];
          }
          if (v42 <= 1073741822 && v41 >= 1)
          {
            int8x8_t v43 = (int8x8_t)vadd_s32(v40, (int32x2_t)0x200000002);
            if (v43.i32[1] < 1 || v43.i32[0] < 1) {
              unsigned int v45 = -1;
            }
            else {
              unsigned int v45 = 0;
            }
            *(int32x2_t *)v65.i8 = v39;
            v65.u64[1] = (unint64_t)vbic_s8(v43, (int8x8_t)vdup_n_s32(v45));
          }
          uint64_t v46 = (*(uint64_t (**)(int32x2_t *, uint64_t, int32x4_t *, uint64_t))(*(void *)v4 + 656))(v4, 1, &v65, 8207);
          if (v46)
          {
            uint64_t v47 = v46;
            uint64_t v48 = *((void *)a2 + 1);
            float v49 = *((double *)a2 + 10);
            double v50 = *(double *)(*((void *)this + 15) + 80);
            double v51 = v49;
            long long v69 = *(_OWORD *)(v46 + 32);
            unsigned int v52 = *(unsigned __int16 *)(v48 + 832);
            __int16 v53 = v52 & 0x7000;
            if ((v52 & 0x7000) == 0x3000)
            {
              unsigned int v52 = v52 & 0xFFFF8FFF | 0x2000;
              *(_WORD *)(v48 + 832) = v52;
            }
            unsigned int v54 = v52 >> 12;
            double v55 = v50 * v51;
            if ((v54 & 4) != 0) {
              char v56 = 0;
            }
            else {
              char v56 = 0x1E1F1400u >> (8 * (v54 & 7));
            }
            *(unsigned char *)(v46 + 73) = *(unsigned char *)(v46 + 73) & 0xC0 | v56;
            v57 = *(const void **)(v48 + 16);
            memcpy(__dst, v57, 0x1E8uLL);
            __dst[0] = v57;
            *(void *)(v48 + 16) = __dst;
            uint64_t v76 = 0;
            memset(&v75[2], 0, 32);
            memset(v75, 0, 32);
            uint64_t v58 = *(void *)(v48 + 248);
            *(_OWORD *)((char *)v75 + 8) = *(_OWORD *)(v58 + 8);
            uint64_t v59 = *(void *)(v58 + 32);
            *((void *)&v75[1] + 1) = *(void *)(v58 + 24);
            *(void *)&v75[2] = v59;
            *(_OWORD *)((char *)&v75[2] + 8) = *(_OWORD *)(v58 + 40);
            *((void *)&v75[3] + 1) = *(void *)(v58 + 56);
            __int16 v60 = *(_WORD *)(v58 + 68);
            LODWORD(v76) = *(_DWORD *)(v58 + 64);
            HIDWORD(v76) = v60 & 0x5FF;
            memset(v74, 0, sizeof(v74));
            CA::Shape::operator=((uint64_t)v74, &v69);
            *((void *)&v75[0] + 1) = v74;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v48 + 184))(v48, 25)) {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v48 + 704))(v48, v47, 32, 32);
            }
            *(void *)&v75[0] = CA::OGL::Context::set_gstate(v48, (uint64_t)v75);
            CA::OGL::Context::push_surface(v48, v47, 1u, 64, 0);
            CA::CG::DrawOp::render(*((CA::CG::DrawOp **)this + 14), (float64x2_t *)a2);
            CA::OGL::Context::pop_surface((CA::OGL::Context *)v48);
            CA::OGL::Context::set_gstate(v48, **(void **)(v48 + 248));
            uint64_t v61 = __dst[0];
            *(void *)(v48 + 16) = __dst[0];
            __dst[0] = 0;
            *(_WORD *)(v48 + 832) = *(_WORD *)(v48 + 832) & 0x8FFF | v53;
            long long v73 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            DWORD1(v73) = 15;
            float v62 = v55;
            *(float *)v70 = v62;
            *(float *)&v70[1] = v62;
            unint64_t v63 = *(void *)(v61 + 16) & 0xFFFFFF00FF00FF00;
            if (*(void *)(v61 + 8) == 0x3C003C003C003C00) {
              int v64 = 1;
            }
            else {
              int v64 = 3;
            }
            *(_DWORD *)(v61 + 16) = v64 | v63;
            *(_DWORD *)(v61 + 20) = HIDWORD(v63);
            (*(void (**)(uint64_t, uint64_t, _DWORD *, void, float, float))(*(void *)v48 + 848))(v48, v47, v70, 0, 1.0, 1.0);
            *(unsigned char *)(*(void *)(v48 + 16) + 16) = 0;
            if (__dst[0]) {
              __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
            }
            CA::OGL::Context::release_surface((uint64_t)v4, v47);
          }
        }
        else
        {
          v34 = *(void (**)(void))(**((void **)this + 14) + 160);
          v34();
        }
      }
    }
  }
}

uint64_t CA::CG::DrawGaussianBlur::draw_shape(CA::CG::DrawGaussianBlur *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawGaussianBlur *, CA::CG::Renderer *))(*(void *)this + 176))(this, a2);
}

uint64_t CA::CG::DrawGaussianBlur::color_type(CA::CG::DrawGaussianBlur *this, CA::CG::Renderer *a2)
{
  return 0;
}

uint64_t CA::CG::DrawGaussianBlur::set_op(uint64_t this, CA::CG::DrawOp *a2)
{
  uint64_t v2 = *(void *)(this + 112);
  if (v2) {
    *(void *)(v2 + 104) = 0;
  }
  *(void *)(this + 112) = a2;
  return this;
}

double *CA::CG::DrawGaussianBlur::compute_dod(CA::CG::DrawGaussianBlur *this, CA::Rect *a2)
{
  (*(void (**)(void, char *))(**((void **)this + 14) + 24))(*((void *)this + 14), (char *)this + 128);
  *(_OWORD *)a2 = *((_OWORD *)this + 8);
  *((_OWORD *)a2 + 1) = *((_OWORD *)this + 9);
  double v4 = *(double *)(*((void *)this + 15) + 80) * -2.8;

  return CA::BoundsImpl::inset((double *)a2, v4, v4);
}

void CA::CG::DrawGaussianBlur::~DrawGaussianBlur(CA::CG::DrawGaussianBlur *this)
{
  *(void *)this = &unk_1ED028BC0;
  uint64_t v2 = (atomic_uint *)*((void *)this + 15);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED028BC0;
  uint64_t v2 = (atomic_uint *)*((void *)this + 15);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

uint64_t CA::CG::DrawGaussianBlurTransparencyLayer::draw_shape_and_color(uint64_t this, CA::CG::Renderer *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(this + 160) + 40);
  if (v2)
  {
    long long v3 = (void *)*((void *)a2 + 1);
    float v4 = *((double *)a2 + 10);
    double v5 = *(double *)(*(void *)(this + 120) + 80) * v4;
    long long v12 = 0u;
    long long v11 = 0u;
    long long v10 = 0u;
    DWORD1(v12) = 15;
    *(float *)&double v5 = v5;
    v9[0] = LODWORD(v5);
    v9[1] = LODWORD(v5);
    if ((*(unsigned int (**)(void *, uint64_t))(*v3 + 184))(v3, 25)) {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v3 + 704))(v3, v2, 32, 32);
    }
    uint64_t v6 = v3[2];
    unint64_t v7 = *(void *)(v6 + 16) & 0xFFFFFF00FF00FF00;
    if (*(void *)(v6 + 8) == 0x3C003C003C003C00) {
      int v8 = 1;
    }
    else {
      int v8 = 3;
    }
    *(_DWORD *)(v6 + 16) = v8 | v7;
    *(_DWORD *)(v6 + 20) = HIDWORD(v7);
    this = (*(uint64_t (**)(void *, uint64_t, _DWORD *, void, float, float))(*v3 + 848))(v3, v2, v9, 0, 1.0, 1.0);
    *(unsigned char *)(v3[2] + 16) = 0;
  }
  return this;
}

void CA::CG::DrawGaussianBlurTransparencyLayer::~DrawGaussianBlurTransparencyLayer(CA::CG::DrawGaussianBlurTransparencyLayer *this)
{
  *(void *)this = &unk_1ED029C28;
  uint64_t v2 = (atomic_uint *)*((void *)this + 20);
  if (v2) {
    CA::CG::TransparencyLayer::unref(v2);
  }
  *(void *)this = &unk_1ED028BC0;
  long long v3 = (atomic_uint *)*((void *)this + 15);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  atomic_uint *v3;
  uint64_t vars8;

  *(void *)this = &unk_1ED029C28;
  uint64_t v2 = (atomic_uint *)*((void *)this + 20);
  if (v2) {
    CA::CG::TransparencyLayer::unref(v2);
  }
  *(void *)this = &unk_1ED028BC0;
  long long v3 = (atomic_uint *)*((void *)this + 15);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

void CA::Render::ShadowCache::free_entry(uint64_t a1, void *a2)
{
  if (a2)
  {
    long long v3 = (void *)a2[14];
    if (v3)
    {
      a2[15] = v3;
      operator delete(v3);
    }
    float v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    double v5 = (atomic_uint *)a2[4];
    if (v5 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
    }
    uint64_t v6 = (atomic_uint *)a2[3];
    if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a2);
  }
}

void CA::Render::ShadowCache::free_bounds_entry(CA::Render::ShadowCache *this, void *a2, void *a3)
{
  float v4 = (atomic_uint *)*((void *)this + 13);
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *, void *, void *))(*(void *)v4 + 16))(v4, a2, a3);
    }
    *((void *)this + 13) = 0;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::Render::anonymous namespace'::Interval *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  double v9 = *a3;
  if (*(double *)a4 < *a3)
  {
    uint64_t v10 = *((void *)a3 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(double *)a4 = v9;
    *(void *)(a4 + 8) = v10;
    double v11 = *a2;
    if (*a3 < *a2)
    {
      uint64_t v12 = *((void *)a2 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *a3 = v11;
      *((void *)a3 + 1) = v12;
      double v13 = *a1;
      if (*a2 < *a1)
      {
        uint64_t v14 = *((void *)a1 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = v13;
        *((void *)a2 + 1) = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::Render::anonymous namespace'::Interval *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)a1;
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(double *)(a2 - 16) = v6;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      int v17 = (_OWORD *)(a1 + 16);
      int64x2_t v18 = (_OWORD *)(a1 + 32);
      int8x16_t v19 = (_OWORD *)(a1 + 48);
      double v20 = *(double *)(a1 + 48);
      if (*(double *)(a2 - 16) < v20)
      {
        uint64_t v21 = *(void *)(a1 + 56);
        *int8x16_t v19 = *(_OWORD *)(a2 - 16);
        *(double *)(a2 - 16) = v20;
        *(void *)(a2 - 8) = v21;
        double v22 = *(double *)(a1 + 32);
        if (*(double *)(a1 + 48) < v22)
        {
          uint64_t v23 = *(void *)(a1 + 40);
          *int64x2_t v18 = *v19;
          *(double *)(a1 + 48) = v22;
          *(void *)(a1 + 56) = v23;
          double v24 = *(double *)(a1 + 16);
          if (*(double *)(a1 + 32) < v24)
          {
            uint64_t v25 = *(void *)(a1 + 24);
            *int v17 = *v18;
            *(double *)(a1 + 32) = v24;
            *(void *)(a1 + 40) = v25;
            double v26 = *(double *)a1;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              uint64_t v27 = *(void *)(a1 + 8);
              *(_OWORD *)a1 = *v17;
              *(double *)(a1 + 16) = v26;
              *(void *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = (double *)(a1 + 32);
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        double v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(double *)uint64_t v16 = v12;
      *(void *)(v16 + 8) = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    int v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_1848EADE4(_Unwind_Exception *a1)
{
}

CGColorRef black(void)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = xmmword_1849A7FD8;
  v2[1] = unk_1849A7FE8;
  v0 = (CGColorSpace *)CAGetColorSpace(0x1Du);
  return CGColorCreate(v0, (const CGFloat *)v2);
}

__n128 CALinearMaskContextGetCTM@<Q0>(uint64_t a1@<X8>)
{
  v1 = (__n128 *)MEMORY[0x1E4F1DAB8];
  long long v2 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = v1[2];
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void CA::ColorProgram::Program::~Program(CA::ColorProgram::Program *this)
{
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 2));
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 3));
  long long v2 = (atomic_uint *)*((void *)this + 10);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  free(*((void **)this + 9));
}

void CA::ColorProgram::Program::show(CA::ColorProgram::Program *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    long long v2 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      double v16 = *(double *)&this;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "CA::ColorProgram %p:\n", buf, 0xCu);
    }
  }
  unsigned int v3 = *((_DWORD *)this + 9) & 0x7FFFFFFF;
  if (v3)
  {
    uint64_t v4 = (float *)*((void *)this + 6);
    do
    {
      uint64_t v5 = v3 & 0x1F;
      int v6 = CA::ColorProgram::kOpcodeParamCount[v5];
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v7 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = "UNKNOWN";
          if (v5 <= 0x14) {
            int v8 = CA::ColorProgram::opcode_name(CA::ColorProgram::Opcode)::names[v5];
          }
          *(_DWORD *)buf = 136315138;
          double v16 = *(double *)&v8;
          _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "    %s:\n", buf, 0xCu);
        }
      }
      if (((0x1801uLL >> v5) & 1) == 0)
      {
        do
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v9 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
            {
              double v10 = *v4;
              double v11 = v4[1];
              double v12 = v4[2];
              double v13 = v4[3];
              *(_DWORD *)buf = 134218752;
              double v16 = v10;
              __int16 v17 = 2048;
              double v18 = v11;
              __int16 v19 = 2048;
              double v20 = v12;
              __int16 v21 = 2048;
              double v22 = v13;
              _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "        %g %g %g %g\n", buf, 0x2Au);
            }
          }
          v4 += 4;
          --v6;
        }
        while (v6);
      }
      BOOL v14 = v3 >= 0x20;
      v3 >>= 5;
    }
    while (v14);
  }
}

void CA::ColorProgram::Cache::~Cache(CA::ColorProgram::Cache *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v2 = (CA::ColorProgram::Program *)*((void *)this + 3);
  if (v2)
  {
    int v3 = 0;
    do
    {
      *((void *)this + 3) = *(void *)v2;
      CA::ColorProgram::Program::~Program(v2);
      free(v4);
      ++v3;
      long long v2 = (CA::ColorProgram::Program *)*((void *)this + 3);
    }
    while (v2);
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v5 = (CA::ColorProgram::Program *)*((void *)this + 4);
  if (v5)
  {
    int v6 = 0;
    do
    {
      *((void *)this + 4) = *(void *)v5;
      CA::ColorProgram::Program::~Program(v5);
      free(v7);
      ++v6;
      uint64_t v5 = (CA::ColorProgram::Program *)*((void *)this + 4);
    }
    while (v5);
  }
  else
  {
    int v6 = 0;
  }
  if (BYTE8(xmmword_1EB2ACC30))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        int v10 = v3;
        __int16 v11 = 1024;
        int v12 = v6;
        _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "Flushed %d static and %d dynamic color programs", buf, 0xEu);
      }
    }
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)this);
  CGColorTransformRelease();
}

uint64_t CA::ColorProgram::Cache::set_colorspace(CGColorSpace **this, CGColorSpace *a2)
{
  uint64_t v4 = *this;
  if (v4 == a2)
  {
    uint64_t result = CGColorSpaceEqualToColorSpace();
    if (result) {
      return result;
    }
    uint64_t v4 = *this;
  }
  CGColorSpaceRelease(v4);
  CGColorSpaceRef v6 = CGColorSpaceRetain(a2);
  *this = v6;
  this[1] = (CGColorSpace *)CAGetReconciledColorSpace((uint64_t)v6);
  uint64_t result = (uint64_t)this[2];
  if (result)
  {
    uint64_t result = CGColorTransformRelease();
    this[2] = 0;
  }
  return result;
}

BOOL ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v66 = 0;
  uint64_t v4 = *(void (**)(const void *, void *))(*(void *)(a2 + 68) + 8 * a4);
  if (!v4) {
    return 0;
  }
  memset(v65, 0, sizeof(v65));
  CGColorNxMTransformGetTransform();
  if (BYTE8(xmmword_1EB2ACC30)) {
    CA::ColorProgram::print_nxm(a3, a4, (unsigned int *)v65);
  }
  int v8 = *(_DWORD *)v65;
  switch(*(_DWORD *)v65)
  {
    case 3:
    case 5:
    case 6:
      uint64_t v9 = *(void *)&v65[12];
      *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = *(_DWORD *)&v65[12];
      uint64_t v10 = *(void *)&v65[4];
      if (*(void *)&v65[4] <= 4uLL && ((1 << v65[4]) & 0x1A) != 0 && v9 == 3)
      {
        if (*(void *)&v65[4] == 4 && *(_DWORD *)(a1 + 108) == 2) {
          return 0;
        }
        unint64_t v11 = *(void *)&v65[20];
        float v12 = (float)(unint64_t)(*(void *)&v65[20] - 1);
        float v13 = (float)*(unint64_t *)&v65[20];
        **(float **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v12 / (float)*(unint64_t *)&v65[20];
        *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4) = 0.5 / v13;
        *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = v12;
        float v14 = 1.0 / (double)v11;
        *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 12) = v14;
        switch(v8)
        {
          case 3:
            uint64_t v15 = 12;
            goto LABEL_49;
          case 6:
            uint64_t v15 = 14;
            goto LABEL_49;
          case 5:
            uint64_t v15 = 13;
LABEL_49:
            uint64_t v66 = v11 * dword_184999468[v15];
            if (v10 != 1)
            {
              if (v10 == 3) {
                LODWORD(v10) = v11 * v11;
              }
              else {
                LODWORD(v10) = v11 * v11 * v11;
              }
            }
            double v51 = CA::Render::Image::new_image((CA::Render::Image *)v15, v11, v10, 1u, 0, *(CGColorSpace **)&v65[28], (unint64_t *)&v66, (const unint64_t *)CA::ColorProgram::release_nxmlut, v4, v64);
            *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) + 80) = v51;
            if (v51) {
              CFRetain(v4);
            }
            if (*(void *)&v65[4] == 3) {
              int v52 = 9;
            }
            else {
              int v52 = 10;
            }
            if (*(void *)&v65[4] == 1) {
              int v53 = 8;
            }
            else {
              int v53 = v52;
            }
            *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) |= v53 << *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8)
                                                                                            + 24);
            *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += 5;
            uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
            uint64_t v30 = *(void *)(v29 + 24) + 16;
            goto LABEL_64;
        }
        if (x_log_hook_p()) {
          goto LABEL_17;
        }
        uint64_t v50 = x_log_category_color;
        BOOL result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)buf = 0;
          uint64_t v47 = "unsupported NxM LUT data format\n";
          goto LABEL_44;
        }
      }
      else
      {
        if (x_log_hook_p()) {
          goto LABEL_17;
        }
        uint64_t v45 = x_log_category_color;
        BOOL result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 134218240;
          double v68 = *(double *)&v65[4];
          __int16 v69 = 2048;
          double v70 = *(double *)&v65[12];
          uint64_t v47 = "%zux%zu LUT not supported.\n";
          uint64_t v48 = v45;
          uint32_t v49 = 22;
          goto LABEL_45;
        }
      }
      break;
    case 7:
      float64x2_t v31 = *(float **)&v65[28];
      **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(*(void *)&v65[28] + 4);
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4) = *v31;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = 0;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 12) = 0;
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16) = v31[2];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 20) = v31[3];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24) = v31[4];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 28) = v31[5];
      if ((*(unsigned char *)(a1 + 96) & 0x40) != 0 && fabsf(v31[5] + -0.5) <= 0.00000011921)
      {
        uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        *(float *)(v32 + 16) = *(float *)(v32 + 16) + *(float *)(v32 + 16);
        uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        *(float *)(v33 + 20) = *(float *)(v33 + 20) + *(float *)(v33 + 20);
        uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        *(float *)(v34 + 24) = *(float *)(v34 + 24) + *(float *)(v34 + 24);
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 28) = 0;
        if (BYTE8(xmmword_1EB2ACC30))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v58 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v59 = *(float **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              double v60 = v59[4];
              double v61 = v59[5];
              double v62 = v59[6];
              double v63 = v59[7];
              *(_DWORD *)buf = 134218752;
              double v68 = v60;
              __int16 v69 = 2048;
              double v70 = v61;
              __int16 v71 = 2048;
              double v72 = v62;
              __int16 v73 = 2048;
              double v74 = v63;
              _os_log_impl(&dword_184668000, v58, OS_LOG_TYPE_DEFAULT, "    overriding HLG luma_coeffs to (%f, %f, %f, %f)", buf, 0x2Au);
            }
          }
        }
      }
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a3;
      int8x16_t v35 = *(float **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *int8x16_t v35 = *v35 * *(float *)(a1 + 100);
      if (BYTE8(xmmword_1EB2ACC30))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          unsigned int v54 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
          {
            double v55 = *(float *)(a1 + 100);
            *(_DWORD *)buf = 134217984;
            double v68 = v55;
            _os_log_impl(&dword_184668000, v54, OS_LOG_TYPE_DEFAULT, "    headroom: %g", buf, 0xCu);
          }
        }
      }
      uint64_t v36 = *(void *)(a1 + 64);
      int v37 = *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      int v38 = 17;
      goto LABEL_39;
    case 9:
      uint64_t v39 = *(void *)&v65[28];
      **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(*(void *)&v65[28] + 24);
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4) = *(float *)(v39 + 20)
                                                                                    - *(float *)(v39 + 24);
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = 1.0
                                                                                    / (float)(*(float *)(v39 + 20)
                                                                                            - *(float *)(v39 + 24));
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 12) = 0;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16) = *(_DWORD *)(v39 + 32);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 20) = *(_DWORD *)(v39 + 28);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24) = *(_DWORD *)(v39 + 36);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 28) = *(_DWORD *)(v39 + 40);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 32) = *(_DWORD *)(v39 + 44);
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 36) = 1.0 / *(float *)(v39 + 44);
      float v40 = *(float *)(a1 + 104) * 0.0001 * *(float *)(v39 + 44);
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 40) = v40;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 44) = 0;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 48) = *(_DWORD *)(v39 + 56);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 52) = *(_DWORD *)(v39 + 60);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 56) = *(_DWORD *)(v39 + 64);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 60) = *(_DWORD *)(v39 + 68);
      if (BYTE8(xmmword_1EB2ACC30))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          char v56 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
          {
            double v57 = *(float *)(a1 + 100);
            *(_DWORD *)buf = 134217984;
            double v68 = v57;
            _os_log_impl(&dword_184668000, v56, OS_LOG_TYPE_DEFAULT, "    headroom: %g", buf, 0xCu);
          }
        }
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) |= 18 << *(_DWORD *)(*(void *)(*(void *)(a1 + 72)
                                                                                                 + 8)
                                                                                     + 24);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += 5;
      uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v30 = *(void *)(v29 + 24) + 64;
      goto LABEL_64;
    case 0xA:
      double v16 = *(float **)&v65[28];
      **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = **(_DWORD **)&v65[28];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4) = v16[1];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = v16[2];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 12) = v16[3];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16) = v16[4];
      float v17 = v16[2];
      float v18 = v16[1];
      float v19 = v17 / v16[3];
      float v20 = v17 * 0.00033333;
      float v21 = (float)(v18 + 1.0) + (float)(v19 * -2.0);
      float v22 = fabsf(v21);
      float v23 = (float)(v20 - v21) + v18;
      BOOL v24 = v22 < v20;
      if (v22 >= v20) {
        float v25 = v16[1];
      }
      else {
        float v25 = (float)(v20 - v21) + v18;
      }
      if (v24) {
        float v26 = (float)((float)(v19 * -2.0) + 1.0) + v23;
      }
      else {
        float v26 = (float)(v18 + 1.0) + (float)(v19 * -2.0);
      }
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 20) = v26;
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24) = -(float)(v25 - (float)(v19 * v19));
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 28) = 1.0 - v19;
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 32) = v16[3] - v16[2];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 36) = 1.0 / v26;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 40) = 0;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 44) = 0;
      uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
      int8x16_t v28 = *(_DWORD **)(v27 + 24);
      if (v28)
      {
        if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) < a3)
        {
          *int8x16_t v28 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
        }
        *(void *)(v27 + 24) = 0;
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) |= 20 << *(_DWORD *)(*(void *)(*(void *)(a1 + 72)
                                                                                                 + 8)
                                                                                     + 24);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += 5;
      uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v30 = *(void *)(v29 + 24) + 48;
      goto LABEL_64;
    case 0xB:
      int v41 = *(_DWORD **)&v65[28];
      unint64_t v42 = *(void *)(*(void *)&v65[28] + 28);
      uint64_t v66 = 4 * v42;
      int8x8_t v43 = CA::Render::Image::new_image((CA::Render::Image *)0x18, v42, 1u, 1u, 0, (CGColorSpace *)(*(void *)&v65[28] + 36), (unint64_t *)&v66, (const unint64_t *)CA::ColorProgram::release_nxmlut, v4, v64);
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) + 80) = v43;
      if (v43) {
        CFRetain(v4);
      }
      **(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v41[2];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 4) = v41[3];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = v41[4];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 12) = v41[5];
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16) = v41[6];
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 20) = (float)(v42 - 1) / (float)v42;
      *(float *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24) = 0.5 / (float)v42;
      CGColorFunctionGetOutputRange();
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 28) = v44;
      uint64_t v36 = *(void *)(a1 + 64);
      int v37 = *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      int v38 = 19;
LABEL_39:
      *(_DWORD *)(*(void *)(v36 + 8) + 24) |= v38 << v37;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += 5;
      uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v30 = *(void *)(v29 + 24) + 32;
LABEL_64:
      *(void *)(v29 + 24) = v30;
      return 1;
    default:
      if (x_log_hook_p())
      {
LABEL_17:
        x_log_();
        return 0;
      }
      uint64_t v50 = x_log_category_color;
      BOOL result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_WORD *)buf = 0;
      uint64_t v47 = "unsupported NxM format\n";
LABEL_44:
      uint64_t v48 = v50;
      uint32_t v49 = 2;
LABEL_45:
      _os_log_impl(&dword_184668000, v48, OS_LOG_TYPE_ERROR, v47, buf, v49);
      return 0;
  }
  return result;
}

_DWORD *CA::ColorProgram::Program::null_program(CA::ColorProgram::Program *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (BYTE8(xmmword_1EB2ACC30))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v2 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v3 = 0;
        _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "Creating null_program", v3, 2u);
      }
    }
  }
  BOOL result = malloc_type_calloc(1uLL, 0x70uLL, 0x10F0040FA9269B9uLL);
  result[9] = 0;
  return result;
}

void CA::ColorProgram::print_nxm(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    CGColorSpaceRef v6 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = *(double *)(a3 + 1);
      double v8 = *(double *)(a3 + 3);
      *(_DWORD *)buf = 134218752;
      double v59 = *(double *)&a1;
      __int16 v60 = 2048;
      double v61 = v7;
      __int16 v62 = 2048;
      double v63 = v8;
      __int16 v64 = 2048;
      double v65 = *(double *)&a2;
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "Stage = %ld %zux%zu Transform %ld\n", buf, 0x2Au);
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v9 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *a3;
      if (v10 > 0xB) {
        *(double *)&unint64_t v11 = COERCE_DOUBLE("Unknown NxM Transform Format");
      }
      else {
        unint64_t v11 = off_1E527CAF0[v10];
      }
      *(_DWORD *)buf = 136315138;
      double v59 = *(double *)&v11;
      _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "    Format '%s'\n", buf, 0xCu);
    }
  }
  switch(*a3)
  {
    case 7u:
      float v12 = *(float **)(a3 + 7);
      if (x_log_hook_p()) {
        goto LABEL_20;
      }
      uint64_t v16 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v17 = v12[1];
        double v18 = *v12;
        double v19 = v12[2];
        double v20 = v12[3];
        double v21 = v12[4];
        double v22 = v12[5];
        *(_DWORD *)buf = 134219264;
        double v59 = v17;
        __int16 v60 = 2048;
        double v61 = v18;
        __int16 v62 = 2048;
        double v63 = v19;
        __int16 v64 = 2048;
        double v65 = v20;
        __int16 v66 = 2048;
        double v67 = v21;
        __int16 v68 = 2048;
        double v69 = v22;
        float v23 = "    gain: %g, gamma: %g, luma_coeff: (%g, %g, %g), max_coeff %g";
        BOOL v24 = v16;
        uint32_t v25 = 62;
        goto LABEL_29;
      }
      break;
    case 9u:
      float v13 = *(float **)(a3 + 7);
      if (x_log_hook_p()) {
        goto LABEL_20;
      }
      uint64_t v26 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v27 = v13[5];
        double v28 = v13[6];
        double v29 = v13[8];
        double v30 = v13[7];
        double v31 = v13[9];
        double v32 = v13[10];
        double v33 = v13[11];
        double v34 = v13[14];
        double v35 = v13[15];
        double v36 = v13[16];
        double v37 = v13[17];
        *(_DWORD *)buf = 134220544;
        double v59 = v27;
        __int16 v60 = 2048;
        double v61 = v28;
        __int16 v62 = 2048;
        double v63 = v29;
        __int16 v64 = 2048;
        double v65 = v30;
        __int16 v66 = 2048;
        double v67 = v31;
        __int16 v68 = 2048;
        double v69 = v32;
        __int16 v70 = 2048;
        double v71 = v33;
        __int16 v72 = 2048;
        double v73 = v34;
        __int16 v74 = 2048;
        double v75 = v35;
        __int16 v76 = 2048;
        double v77 = v36;
        __int16 v78 = 2048;
        double v79 = v37;
        float v23 = "    master [%g %g], lum [%g %g], KneeStart %g, KneeScale %g, OpticalScale: %g, lumaCoef (%g, %g, %g, %g)";
        BOOL v24 = v26;
        uint32_t v25 = 112;
        goto LABEL_29;
      }
      break;
    case 0xAu:
      float v14 = *(float **)(a3 + 7);
      if (x_log_hook_p()) {
        goto LABEL_20;
      }
      uint64_t v38 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v39 = v14[5];
        double v40 = v14[6];
        double v41 = v14[7];
        double v42 = v14[8];
        double v43 = v14[9];
        double v44 = v14[4];
        double v45 = *v14;
        double v46 = v14[1];
        double v47 = v14[2];
        double v48 = v14[3];
        *(_DWORD *)buf = 134220288;
        double v59 = v39;
        __int16 v60 = 2048;
        double v61 = v40;
        __int16 v62 = 2048;
        double v63 = v41;
        __int16 v64 = 2048;
        double v65 = v42;
        __int16 v66 = 2048;
        double v67 = v43;
        __int16 v68 = 2048;
        double v69 = v44;
        __int16 v70 = 2048;
        double v71 = v45;
        __int16 v72 = 2048;
        double v73 = v46;
        __int16 v74 = 2048;
        double v75 = v47;
        __int16 v76 = 2048;
        double v77 = v48;
        float v23 = "  a: %g, b: %g, c: %g, d: %g, e: %g, lum_sat_factor: %g, luminance_scale: %g, source headroom: %g, target "
              "   headroom: %g, target_reference_white: %g";
        BOOL v24 = v38;
        uint32_t v25 = 102;
        goto LABEL_29;
      }
      break;
    case 0xBu:
      uint64_t v15 = *(void *)(a3 + 7);
      if (x_log_hook_p())
      {
LABEL_20:
        x_log_();
      }
      else
      {
        uint64_t v49 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        {
          double v50 = *(float *)v15;
          double v51 = *(float *)(v15 + 4);
          double v52 = *(float *)(v15 + 8);
          double v53 = *(float *)(v15 + 12);
          double v54 = *(float *)(v15 + 16);
          double v55 = *(float *)(v15 + 20);
          double v56 = *(float *)(v15 + 24);
          double v57 = *(double *)(v15 + 28);
          *(_DWORD *)buf = 134220032;
          double v59 = v50;
          __int16 v60 = 2048;
          double v61 = v51;
          __int16 v62 = 2048;
          double v63 = v52;
          __int16 v64 = 2048;
          double v65 = v53;
          __int16 v66 = 2048;
          double v67 = v54;
          __int16 v68 = 2048;
          double v69 = v55;
          __int16 v70 = 2048;
          double v71 = v56;
          __int16 v72 = 2048;
          double v73 = v57;
          __int16 v74 = 2048;
          *(void *)&double v75 = v15 + 36;
          float v23 = "\tFlex Luminance Scaling params:\n"
                "\t\tsource headroom = % 3.10f\n"
                "\t\ttarget headroom = % 3.10f\n"
                "\t\tcoefficients[0] = % 3.10f\n"
                "\t\tcoefficients[1] = % 3.10f\n"
                "\t\tcoefficients[2] = % 3.10f\n"
                "\t\tcoefficients[3] = % 3.10f\n"
                "\t\tcoefficients[4] = % 3.10f\n"
                "\t\tFlexGTCTableCount = %zu\n"
                "\t\tFlexGTCTable = %p\n";
          BOOL v24 = v49;
          uint32_t v25 = 92;
LABEL_29:
          _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
        }
      }
      break;
    default:
      return;
  }
}

void CA::ColorProgram::release_nxmlut(CA::ColorProgram *this, CFTypeRef cf, void *a3)
{
  if (cf) {
    CFRelease(cf);
  }
}

double CA::ColorProgram::print_matrix(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    double v7 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      double v8 = *a3;
      double v9 = a3[1];
      double v10 = a3[2];
      double v11 = a3[3];
      double v12 = a3[4];
      double v13 = a3[5];
      double v14 = a3[6];
      double v15 = a3[7];
      double v16 = a3[8];
      double v17 = a3[9];
      double v18 = a3[10];
      double v19 = a3[11];
      *(_DWORD *)buf = 134221312;
      uint64_t v21 = a1;
      __int16 v22 = 2048;
      uint64_t v23 = a2;
      __int16 v24 = 2048;
      double v25 = v8;
      __int16 v26 = 2048;
      double v27 = v9;
      __int16 v28 = 2048;
      double v29 = v10;
      __int16 v30 = 2048;
      double v31 = v11;
      __int16 v32 = 2048;
      double v33 = v12;
      __int16 v34 = 2048;
      double v35 = v13;
      __int16 v36 = 2048;
      double v37 = v14;
      __int16 v38 = 2048;
      double v39 = v15;
      __int16 v40 = 2048;
      double v41 = v16;
      __int16 v42 = 2048;
      double v43 = v17;
      __int16 v44 = 2048;
      double v45 = v18;
      __int16 v46 = 2048;
      double v47 = v19;
      _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "Stage = %ld matrix %ld\n    %g %g %g %g\n    %g %g %g %g\n    %g %g %g %g", buf, 0x8Eu);
    }
  }
  return result;
}

void CA::ColorProgram::print_trc(CA::ColorProgram *this, uint64_t a2, uint64_t a3, CGColorTRC *a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v4 = (int)a4;
  int v7 = (int)this;
  switch(*(_DWORD *)a3)
  {
    case 0:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v9 = *(float *)(a3 + 4);
        *(_DWORD *)buf = 67109632;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v9;
        double v10 = "    TRC channel %d --> TRCs[%ld], Type0: Y = X^%f \n";
        goto LABEL_46;
      }
      break;
    case 1:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v11 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        float v13 = *(float *)(a3 + 4);
        float v12 = *(float *)(a3 + 8);
        float v14 = *(float *)(a3 + 12);
        *(_DWORD *)buf = 67110914;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v12;
        __int16 v60 = 2048;
        double v61 = v14;
        double v15 = (float)((float)-v14 / v12);
        double v16 = "NO";
        __int16 v62 = 2048;
        double v63 = v13;
        __int16 v64 = 2048;
        double v65 = v15;
        if (v4) {
          double v16 = "YES";
        }
        __int16 v66 = 2048;
        double v67 = v15;
        __int16 v68 = 2080;
        double v69 = *(double *)&v16;
        double v10 = "    TRC channel %d --> TRCs[%ld], Type1: Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g] pure power original: %s\n";
        double v17 = v11;
        uint32_t v18 = 78;
        goto LABEL_52;
      }
      break;
    case 2:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v19 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        float v21 = *(float *)(a3 + 4);
        float v20 = *(float *)(a3 + 8);
        float v22 = *(float *)(a3 + 12);
        float v23 = *(float *)(a3 + 16);
        *(_DWORD *)buf = 67111426;
        double v24 = v23;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v20;
        __int16 v60 = 2048;
        double v61 = v22;
        __int16 v62 = 2048;
        double v63 = v21;
        __int16 v64 = 2048;
        double v65 = v24;
        double v25 = "NO";
        double v26 = (float)((float)-v22 / v20);
        if (v4) {
          double v25 = "YES";
        }
        __int16 v66 = 2048;
        double v67 = v26;
        __int16 v68 = 2048;
        double v69 = v24;
        __int16 v70 = 2048;
        double v71 = v26;
        __int16 v72 = 2080;
        double v73 = *(double *)&v25;
        double v10 = "    TRC channel %d --> TRCs[%ld], Type2: Y = (%g*X+%g)^%g + %f [X >= %g],  Y = %g [X < %g] pure power original: %s\n";
        double v17 = v19;
        uint32_t v18 = 98;
        goto LABEL_52;
      }
      break;
    case 3:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v27 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v28 = *(float *)(a3 + 8);
        double v29 = *(float *)(a3 + 12);
        double v30 = *(float *)(a3 + 4);
        double v31 = *(float *)(a3 + 20);
        double v32 = *(float *)(a3 + 16);
        double v33 = "NO";
        if (v4) {
          double v33 = "YES";
        }
        *(_DWORD *)buf = 67111170;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v28;
        __int16 v60 = 2048;
        double v61 = v29;
        __int16 v62 = 2048;
        double v63 = v30;
        __int16 v64 = 2048;
        double v65 = v31;
        __int16 v66 = 2048;
        double v67 = v32;
        __int16 v68 = 2048;
        double v69 = v31;
        __int16 v70 = 2080;
        double v71 = *(double *)&v33;
        double v10 = "    TRC channel %d --> TRCs[%ld], Type3: Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g] pure power original: %s\n";
        double v17 = v27;
        uint32_t v18 = 88;
        goto LABEL_52;
      }
      break;
    case 4:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v34 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v35 = *(float *)(a3 + 8);
        double v36 = *(float *)(a3 + 12);
        double v37 = *(float *)(a3 + 4);
        double v38 = *(float *)(a3 + 24);
        double v39 = *(float *)(a3 + 20);
        double v40 = *(float *)(a3 + 16);
        double v41 = *(float *)(a3 + 28);
        __int16 v42 = "NO";
        if (v4) {
          __int16 v42 = "YES";
        }
        *(_DWORD *)buf = 67111682;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v35;
        __int16 v60 = 2048;
        double v61 = v36;
        __int16 v62 = 2048;
        double v63 = v37;
        __int16 v64 = 2048;
        double v65 = v38;
        __int16 v66 = 2048;
        double v67 = v39;
        __int16 v68 = 2048;
        double v69 = v40;
        __int16 v70 = 2048;
        double v71 = v41;
        __int16 v72 = 2048;
        double v73 = v39;
        __int16 v74 = 2080;
        double v75 = v42;
        double v10 = "    TRC channel %d --> TRCs[%ld], Type4: Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g] pure powe"
              "r original: %s\n";
        double v17 = v34;
        uint32_t v18 = 108;
        goto LABEL_52;
      }
      break;
    case 5:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v43 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v44 = *(double *)(a3 + 4);
        double v45 = *(float **)(a3 + 12);
        double v46 = *v45;
        double v47 = v45[1];
        uint64_t v48 = &v45[*(void *)&v44];
        double v49 = *(v48 - 2);
        double v50 = *(v48 - 1);
        *(_DWORD *)buf = 67110656;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v44;
        __int16 v60 = 2048;
        double v61 = v46;
        __int16 v62 = 2048;
        double v63 = v47;
        __int16 v64 = 2048;
        double v65 = v49;
        __int16 v66 = 2048;
        double v67 = v50;
        double v10 = "    TRC channel %d --> TRCs[%ld], Table: entries = %zu, [%g %g ... %g %g]\n";
        double v17 = v43;
        uint32_t v18 = 68;
        goto LABEL_52;
      }
      break;
    case 6:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v51 = *(float *)(a3 + 28);
        *(_DWORD *)buf = 67109632;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v51;
        double v10 = "    TRC channel %d --> TRCs[%ld], PQ EOTF (degamma), optical scale: %g";
        goto LABEL_46;
      }
      break;
    case 7:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v8 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        double v52 = *(float *)(a3 + 28);
        *(_DWORD *)buf = 67109632;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        __int16 v58 = 2048;
        double v59 = v52;
        double v10 = "    TRC channel %d --> TRCs[%ld], PQ InvEOTF (engamma), optical scale: %g";
LABEL_46:
        double v17 = v8;
        uint32_t v18 = 28;
        goto LABEL_52;
      }
      break;
    case 8:
      if (x_log_hook_p()) {
        goto LABEL_21;
      }
      uint64_t v53 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        int v55 = v7;
        __int16 v56 = 2048;
        uint64_t v57 = a2;
        double v10 = "    TRC channel %d --> TRCs[%ld], HLG InvOETF (degamma)";
        goto LABEL_51;
      }
      break;
    case 9:
      if (x_log_hook_p())
      {
LABEL_21:
        x_log_();
      }
      else
      {
        uint64_t v53 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          int v55 = v7;
          __int16 v56 = 2048;
          uint64_t v57 = a2;
          double v10 = "    TRC channel %d --> TRCs[%ld], HLG OETF (engamma)";
LABEL_51:
          double v17 = v53;
          uint32_t v18 = 18;
LABEL_52:
          _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, v10, buf, v18);
        }
      }
      break;
    default:
      return;
  }
}

void CA::ColorProgram::print_CGColorConverterInfo(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    long long v2 = x_log_category_color;
    if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 4);
      uint64_t v4 = *(void *)(a1 + 12);
      uint64_t v5 = *(void *)(a1 + 20);
      uint64_t v6 = *(void *)(a1 + 28);
      uint64_t v7 = *(void *)(a1 + 36);
      uint64_t v8 = *(void *)(a1 + 44);
      *(_DWORD *)buf = 67110400;
      int v10 = v3;
      __int16 v11 = 1024;
      int v12 = v4;
      __int16 v13 = 1024;
      int v14 = v5;
      __int16 v15 = 1024;
      int v16 = v6;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "CGColorConverter:\n    %d stages\n    %d input components\n    %d output components\n    %d TRCs\n    %d Matrices\n    %d NxM LUTs\n", buf, 0x26u);
    }
  }
}

void CA::ColorProgram::free_lut_data(CA::ColorProgram *this, void *a2, void *a3)
{
}

uint64_t ___ZN2CA12ColorProgram5Cache18force_single_cacheEv_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"CAForceSingleColorProgramCache", (CFStringRef)*MEMORY[0x1E4F1D3D8], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    CA::ColorProgram::Cache::force_single_cache(void)::force_single_cache = result != 0;
  }
  return result;
}

void ___ZN2CA12ColorProgram5Cache7lookup_EP12CGColorSpacej22CGColorRenderingIntent_block_invoke()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  LODWORD(valuePtr[0]) = 1024;
  CFNumberRef v0 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
  LODWORD(valuePtr[0]) = 1120403456;
  CFNumberRef v1 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1008981770;
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1094713344;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1034594987;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  LODWORD(valuePtr[0]) = 1120403456;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
  valuePtr[2] = xmmword_1E527CA58;
  valuePtr[3] = *(_OWORD *)&off_1E527CA68;
  valuePtr[4] = xmmword_1E527CA78;
  valuePtr[0] = xmmword_1E527CA38;
  valuePtr[1] = *(_OWORD *)&off_1E527CA48;
  values[0] = *(void **)MEMORY[0x1E4F1CFD0];
  values[1] = v0;
  values[2] = values[0];
  values[3] = v0;
  values[4] = v3;
  values[5] = v4;
  values[6] = v1;
  values[7] = v2;
  values[8] = values[0];
  values[9] = values[0];
  *(_OWORD *)keys = xmmword_1E527CA88;
  v18[0] = values[0];
  v18[1] = values[0];
  long long v15 = xmmword_1E527CAB8;
  long long v16 = *(_OWORD *)&off_1E527CAC8;
  __int16 v17 = @"kCGSkipToneMappingForBT2100";
  *(_OWORD *)__int16 v13 = xmmword_1E527CA98;
  long long v14 = *(_OWORD *)&off_1E527CAA8;
  v12[0] = values[0];
  v12[1] = v0;
  v12[2] = values[0];
  v12[3] = v0;
  v12[4] = v3;
  v12[5] = v4;
  v12[6] = v1;
  v12[7] = v2;
  uint8_t v12[8] = values[0];
  v12[9] = values[0];
  int v10 = values[0];
  __int16 v11 = @"kCGSkipToneMappingForBT2100";
  *(_OWORD *)double v9 = xmmword_1E527CAE0;
  v8[0] = v5;
  v8[1] = values[0];
  uint64_t v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CA::ColorProgram::Cache::lookup_(CGColorSpace *,unsigned int,CGColorRenderingIntent)::converter_options[0] = (uint64_t)CFDictionaryCreate(0, (const void **)valuePtr, (const void **)values, 10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  qword_1EB2AB898 = (uint64_t)CFDictionaryCreate(0, (const void **)keys, (const void **)v18, 2, v6, v7);
  qword_1EB2AB8A0 = (uint64_t)CFDictionaryCreate(0, (const void **)v13, (const void **)v12, 9, v6, v7);
  qword_1EB2AB8A8 = (uint64_t)CFDictionaryCreate(0, (const void **)&v11, (const void **)&v10, 1, v6, v7);
  qword_1EB2AB8B0 = (uint64_t)CFDictionaryCreate(0, (const void **)v9, v8, 2, v6, v7);
  CFRelease(v0);
  CFRelease(v1);
  CFRelease(v2);
  CFRelease(v3);
  CFRelease(v4);
}

__CFString *NSStringFromCADisplayPowerAssertionReason(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = @"unblank";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = @"audio";
      break;
    case 2:
      uint64_t result = @"secure-indicator";
      break;
    case 3:
      uint64_t result = @"bim";
      break;
    default:
      CFNumberRef v3 = @"unknown";
      if (@"unblank" == (__CFString *)0xFFFF) {
        CFNumberRef v3 = @"debug";
      }
      if (@"unblank" == (__CFString *)65534) {
        uint64_t result = @"bls-assertion";
      }
      else {
        uint64_t result = v3;
      }
      break;
  }
  return result;
}

void sub_1848EE2AC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848EE45C(_Unwind_Exception *a1)
{
}

void sub_1848EE9C8(_Unwind_Exception *a1)
{
}

__CFString *NSStringFromCADisplayState(unint64_t a1)
{
  if (a1 > 3) {
    return @"unknown";
  }
  else {
    return off_1E527CB50[a1];
  }
}

__CFString *NSStringFromCADisplayPowerState(uint64_t a1)
{
  uint64_t v1 = @"unknown";
  if (a1 == 1) {
    uint64_t v1 = @"on";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"off";
  }
}

__CFString *NSStringFromCADisplayStateTransitionStatus(unint64_t a1)
{
  if (a1 > 5) {
    return @"unknown";
  }
  else {
    return off_1E527CB70[a1];
  }
}

void __CADeviceUseFramebufferCompression_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (CADeviceUseCompression::once[0] != -1) {
    dispatch_once(CADeviceUseCompression::once, &__block_literal_global_21);
  }
  CADeviceUseFramebufferCompression::enable_compression = CADeviceUseCompression::enable_compression;
  if (CADeviceUseCIF10::once != -1) {
    dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_12019);
  }
  if (CADeviceUseCIF10::enable_cif10)
  {
    keyExistsAndHasValidFormat[0] = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"CAEnableFramebufferCompression", (CFStringRef)*MEMORY[0x1E4F1D3D8], keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      CADeviceUseFramebufferCompression::enable_compression = AppBooleanValue != 0;
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v1 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_INFO))
    {
      if (CADeviceUseFramebufferCompression::enable_compression) {
        CFNumberRef v2 = "YES";
      }
      else {
        CFNumberRef v2 = "NO";
      }
      *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136315138;
      CFNumberRef v4 = v2;
      _os_log_impl(&dword_184668000, v1, OS_LOG_TYPE_INFO, "System UI Framebuffer Compression Enabled: %s\n", keyExistsAndHasValidFormat, 0xCu);
    }
  }
}

void __CADeviceNeedsP3ShapeTracking_block_invoke()
{
  CFNumberRef v0 = getenv("CA_FORCE_P3_TRACKING");
  if (v0 && atoi(v0))
  {
    BOOL v1 = 1;
  }
  else
  {
    unint64_t v2 = MGGetSInt64Answer();
    uint64_t v3 = MGGetProductType();
    if (v2 >> 1 == 16392 || v3 == 1721691077 || v3 == 1429914406)
    {
      if (CADeviceUseCIF10::once != -1) {
        dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_12019);
      }
      BOOL v1 = CADeviceUseCIF10::enable_cif10 != 0;
    }
    else
    {
      BOOL v1 = 0;
    }
  }
  CADeviceNeedsP3ShapeTracking::p3_tracking = v1;
}

uint64_t __CADeviceDisplaySupportsEDRFactor_block_invoke()
{
  CFNumberRef v0 = getenv("CA_USE_IOMFB_EDRFACTOR");
  if (v0)
  {
    uint64_t result = atoi(v0);
    if (!result)
    {
      char v2 = 0;
      goto LABEL_11;
    }
  }
  uint64_t result = MGGetSInt64Answer();
  char v2 = 0;
  if (result > 32788)
  {
    if (result == 32789 || result == 33537) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (!result) {
    return result;
  }
  if (result != 28672) {
LABEL_9:
  }
    char v2 = 1;
LABEL_11:
  CADeviceDisplaySupportsEDRFactor::supports_edr = v2;
  return result;
}

uint64_t __CADeviceNeedsDisplayWorkarounds_block_invoke()
{
  uint64_t result = MGGetProductType();
  uint64_t v1 = 0;
  char v2 = CADeviceNeedsDisplayWorkarounds::needs_workarounds;
  do
    v2 |= result == _ZZZ31CADeviceNeedsDisplayWorkaroundsEUb_E18workaround_devices[v1++];
  while (v1 != 5);
  CADeviceNeedsDisplayWorkarounds::needs_workarounds = v2;
  return result;
}

void __CADeviceNeedsLumaBoost_block_invoke()
{
  v5[1] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v0 = MGGetProductType();
  uint64_t v1 = 0;
  char v2 = CADeviceNeedsLumaBoost::needs_luma_bost;
  do
    v2 |= _ZZZ22CADeviceNeedsLumaBoostEUb0_E13boost_devices[v1++] == v0;
  while (v1 != 22);
  CADeviceNeedsLumaBoost::needs_luma_bost = v2;
  if (CADeviceHasInternalBuild::once[0] != -1) {
    dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
  }
  if (CADeviceHasInternalBuild::internal)
  {
    CABootArgGetArray(v4);
    int Int = CABootArgGetInt(v4[0], v4[1], 0, "iomfb_RuntimeProperty_TLStrength");
    v5[0] = (void **)v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v5);
    if (Int) {
      CADeviceNeedsLumaBoost::needs_luma_bost = 0;
    }
  }
}

uint64_t CABootArgGetArray(void *a1)
{
  v14[1] = *(void ***)MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  mach_port_t v2 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v3 = IOServiceMatching("IODTNVRAM");
  uint64_t result = IOServiceGetMatchingService(v2, v3);
  if (result)
  {
    io_object_t v5 = result;
    CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(result, @"boot-args", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (CFProperty)
    {
      CFStringRef v7 = CFProperty;
      CFTypeID v8 = CFGetTypeID(CFProperty);
      if (v8 == CFStringGetTypeID())
      {
        CStringPtr = (char *)CFStringGetCStringPtr(v7, 0x600u);
        if (CStringPtr)
        {
          std::string::basic_string[abi:nn180100]<0>(&__p, CStringPtr);
          CABootArgSplit((std::string **)&v12, &__p, 0x20u);
          uint64_t v10 = v13;
          *(_OWORD *)a1 = v12;
          a1[2] = v10;
          uint64_t v13 = 0;
          long long v12 = 0uLL;
          v14[0] = (void **)&v12;
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v14);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      CFRelease(v7);
    }
    return IOObjectRelease(v5);
  }
  return result;
}

uint64_t CABootArgGetInt(const std::string *a1, const std::string *a2, uint64_t a3, const std::string::value_type *a4)
{
  v20[1] = *(void ***)MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    CFStringRef v7 = a1;
    do
    {
      __int16 v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      CABootArgSplit(&v17, v7, 0x3Du);
      if (v18 - (void)v17 == 48 && !std::string::compare(v17, a4))
      {
        CFTypeID v8 = v17 + 1;
        if (SHIBYTE(v17[1].__r_.__value_.__r.__words[2]) < 0)
        {
          data = (std::string *)v17[1].__r_.__value_.__l.__data_;
          int64_t size = v17[1].__r_.__value_.__l.__size_;
        }
        else
        {
          int64_t size = HIBYTE(v17[1].__r_.__value_.__r.__words[2]);
          data = v17 + 1;
        }
        if (size >= 2)
        {
          __int16 v11 = (std::string *)((char *)data + size);
          long long v12 = data;
          do
          {
            uint64_t v13 = (std::string *)memchr(v12, 48, size - 1);
            if (!v13) {
              break;
            }
            if (LOWORD(v13->__r_.__value_.__l.__data_) == 30768)
            {
              if (v13 == data) {
                int v15 = 16;
              }
              else {
                int v15 = 10;
              }
              if (v13 == v11) {
                int v14 = 10;
              }
              else {
                int v14 = v15;
              }
              goto LABEL_14;
            }
            long long v12 = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
            int64_t size = (char *)v11 - (char *)v12;
          }
          while ((char *)v11 - (char *)v12 >= 2);
        }
        int v14 = 10;
LABEL_14:
        a3 = std::stoi(v8, 0, v14);
      }
      v20[0] = (void **)&v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v20);
      ++v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  mach_port_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    CFDictionaryRef v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t CABootArgSplit(std::string **a1, const std::string *a2, unsigned __int8 a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  uint64_t v58 = 0;
  long long v57 = 0u;
  long long __p = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v50 = 0;
  long long v52 = 0u;
  uint64_t v45 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v43 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v59 = MEMORY[0x1E4FBA488] + 104;
  uint64_t v5 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v51 = MEMORY[0x1E4FBA488] + 64;
  uint64_t v6 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v49 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(uint64_t *)((char *)&v49 + *(void *)(v49 - 24)) = v7;
  uint64_t v50 = 0;
  CFTypeID v8 = (std::ios_base *)((char *)&v49 + *(void *)(v49 - 24));
  std::ios_base::init(v8, &v52);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v9 = v6[5];
  uint64_t v51 = v6[4];
  *(uint64_t *)((char *)&v51 + *(void *)(v51 - 24)) = v9;
  uint64_t v49 = v6[1];
  *(uint64_t *)((char *)&v49 + *(void *)(v49 - 24)) = v6[6];
  uint64_t v59 = v43;
  uint64_t v49 = v45;
  uint64_t v51 = v5;
  std::streambuf::basic_streambuf();
  uint64_t v44 = MEMORY[0x1E4FBA470] + 16;
  *(void *)&long long v52 = MEMORY[0x1E4FBA470] + 16;
  long long __p = 0u;
  long long v57 = 0u;
  LODWORD(v58) = 24;
  std::string::operator=((std::string *)&__p, a2);
  *((void *)&v57 + 1) = 0;
  if ((SBYTE7(v57) & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  if ((SBYTE7(v57) & 0x80u) == 0) {
    unint64_t v11 = BYTE7(v57);
  }
  else {
    unint64_t v11 = *((void *)&__p + 1);
  }
  if ((v58 & 8) != 0)
  {
    *(void *)&long long v53 = p_p;
    *((void *)&v53 + 1) = p_p;
    *((void *)&v57 + 1) = (char *)p_p + v11;
    *(void *)&long long v54 = (char *)p_p + v11;
  }
  if ((v58 & 0x10) != 0)
  {
    *((void *)&v57 + 1) = (char *)p_p + v11;
    if ((SBYTE7(v57) & 0x80u) == 0) {
      std::string::size_type v12 = 22;
    }
    else {
      std::string::size_type v12 = (v57 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    std::string::resize((std::string *)&__p, v12, 0);
    uint64_t v13 = BYTE7(v57);
    if (SBYTE7(v57) < 0) {
      uint64_t v13 = *((void *)&__p + 1);
    }
    *((void *)&v54 + 1) = p_p;
    *(void *)&long long v55 = p_p;
    *((void *)&v55 + 1) = (char *)p_p + v13;
    if ((v58 & 3) != 0)
    {
      if (v11 >> 31)
      {
        uint64_t v14 = ((v11 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v15 = 0x7FFFFFFF * ((v14 + ((v11 - 0x80000000 - v14) >> 1)) >> 30);
        p_p = (long long *)((char *)p_p + v15 + 0x7FFFFFFF);
        unint64_t v11 = v11 - v15 - 0x7FFFFFFF;
        *(void *)&long long v55 = p_p;
      }
      if (v11) {
        *(void *)&long long v55 = (char *)p_p + v11;
      }
    }
  }
  memset(&v47, 0, sizeof(v47));
  while (2)
  {
    LOBYTE(v48.__first_) = 0;
    MEMORY[0x185323BE0](&v48, &v49, 1);
    if (!LOBYTE(v48.__first_)) {
      goto LABEL_38;
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      *v47.__r_.__value_.__l.__data_ = 0;
      v47.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v47.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v47.__r_.__value_.__s + 23) = 0;
    }
    uint64_t v16 = 0;
    while (1)
    {
      __int16 v17 = *(void **)((char *)&v53 + *(void *)(v49 - 24));
      uint64_t v18 = (unsigned char *)v17[3];
      if (v18 != (unsigned char *)v17[4])
      {
        v17[3] = v18 + 1;
        LOBYTE(v17) = *v18;
        goto LABEL_29;
      }
      LODWORD(v17) = (*(uint64_t (**)(void *))(*v17 + 80))(v17);
      if (v17 == -1) {
        break;
      }
LABEL_29:
      if (v17 == a3)
      {
        int v19 = 0;
        goto LABEL_37;
      }
      ++v16;
      std::string::push_back(&v47, (std::string::value_type)v17);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0 && v47.__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7)
      {
        int v19 = 4;
        goto LABEL_37;
      }
    }
    if (v16) {
      int v19 = 2;
    }
    else {
      int v19 = 6;
    }
LABEL_37:
    std::ios_base::clear((std::ios_base *)((char *)&v49 + *(void *)(v49 - 24)), *(_DWORD *)((char *)&v52 + *(void *)(v49 - 24) + 8) | v19);
LABEL_38:
    std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    char v21 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((*((unsigned char *)&v52 + *(void *)(v49 - 24) + 8) & 5) == 0)
    {
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v47.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        unint64_t v23 = (unint64_t)a1[1];
        unint64_t v22 = (unint64_t)a1[2];
        if (v23 >= v22)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)*a1) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)*a1) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          v48.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
          if (v28)
          {
            double v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v28);
            uint64_t v31 = v30;
            char v21 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
          }
          else
          {
            double v29 = 0;
            uint64_t v31 = 0;
          }
          double v33 = (std::string *)&v29[24 * v25];
          if (v21 < 0)
          {
            std::string::__init_copy_ctor_external(v33, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v34 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
            v33->__r_.__value_.__r.__words[2] = v47.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          }
          double v36 = *a1;
          unint64_t v35 = (unint64_t)a1[1];
          if ((std::string *)v35 == *a1)
          {
            int64x2_t v39 = vdupq_n_s64(v35);
            double v37 = v33;
          }
          else
          {
            double v37 = v33;
            do
            {
              long long v38 = *(_OWORD *)(v35 - 24);
              v37[-1].__r_.__value_.__r.__words[2] = *(void *)(v35 - 8);
              *(_OWORD *)&v37[-1].__r_.__value_.__l.__data_ = v38;
              --v37;
              *(void *)(v35 - 16) = 0;
              *(void *)(v35 - 8) = 0;
              *(void *)(v35 - 24) = 0;
              v35 -= 24;
            }
            while ((std::string *)v35 != v36);
            int64x2_t v39 = *(int64x2_t *)a1;
          }
          double v32 = v33 + 1;
          *a1 = v37;
          a1[1] = v32;
          *(int64x2_t *)&v48.__begin_ = v39;
          double v40 = a1[2];
          a1[2] = (std::string *)&v29[24 * v31];
          v48.__end_cap_.__value_ = v40;
          v48.__first_ = (std::__split_buffer<std::string>::pointer)v39.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v48);
        }
        else
        {
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(a1[1], v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v24 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
            *(void *)(v23 + 16) = *((void *)&v47.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v23 = v24;
          }
          double v32 = (std::string *)(v23 + 24);
        }
        a1[1] = v32;
      }
      continue;
    }
    break;
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  uint64_t v49 = *MEMORY[0x1E4FBA408];
  uint64_t v41 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&v49 + *(void *)(v49 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v51 = v41;
  *(void *)&long long v52 = v44;
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x185323D70](&v59);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

uint64_t __CADeviceSupportsHWGainMap_block_invoke()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = MGGetProductType();
  for (uint64_t i = 0; i != 6; ++i)
  {
    if (_ZZZ25CADeviceSupportsHWGainMapEUb1_E7devices[i] == result)
    {
      CADeviceSupportsHWGainMap::supports_gain_map = 1;
      return result;
    }
  }
  uint64_t v2 = 0;
  char v3 = CADeviceSupportsHWGainMap::supports_gain_map;
  do
    v3 |= _ZZZ25CADeviceSupportsHWGainMapEUb1_E13crete_devices[v2++] == result;
  while (v2 != 4);
  CADeviceSupportsHWGainMap::supports_gain_map = v3;
  if (v3)
  {
    CADeviceSupportsHWGainMap::supports_gain_map = 0;
    mach_port_t v9 = 0;
    MEMORY[0x185322F60](0, &v9);
    mach_port_t v4 = v9;
    CFDictionaryRef v5 = IOServiceNameMatching("arm-io");
    uint64_t result = IOServiceGetMatchingService(v4, v5);
    if (result)
    {
      io_object_t v6 = result;
      CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(result, @"chip-revision", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      if (CFProperty)
      {
        CFDataRef v8 = CFProperty;
        CADeviceSupportsHWGainMap::supports_gain_map = *CFDataGetBytePtr(CFProperty) > 0xFu;
        CFRelease(v8);
      }
      return IOObjectRelease(v6);
    }
  }
  return result;
}

uint64_t __CADeviceNeedsSurfaceAlphaUnpremultiply_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  if (result == 32789)
  {
    BOOL v1 = 1;
  }
  else
  {
    uint64_t v2 = 1;
    unint64_t v3 = 10;
    while (v2 != 11)
    {
      uint64_t v4 = CADeviceNeedsSurfaceAlphaUnpremultiply::chip_ids[v2++];
      if (v4 == result)
      {
        unint64_t v3 = v2 - 2;
        break;
      }
    }
    BOOL v1 = v3 < 0xA;
  }
  CADeviceNeedsSurfaceAlphaUnpremultiply::needs = v1;
  return result;
}

uint64_t __CADeviceSupportsAndromeda_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  CADeviceSupportsAndromeda::supports_andromeda = MGGetBoolAnswer();
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"CAEnableAndromeda", (CFStringRef)*MEMORY[0x1E4F1D3D8], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    CADeviceSupportsAndromeda::supports_andromeda = result != 0;
  }
  return result;
}

uint64_t __CADeviceDisplayNeedsW40aWorkaround_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  if (result == 28672)
  {
    BOOL v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 4;
    while (v2 != 4)
    {
      uint64_t v4 = CADeviceDisplayNeedsW40aWorkaround::workaround_chip_ids[++v2];
      if (v4 == result)
      {
        unint64_t v3 = v2 - 1;
        break;
      }
    }
    BOOL v1 = v3 < 4;
  }
  CADeviceDisplayNeedsW40aWorkaround::workaround = v1;
  return result;
}

void __CADeviceHasLCDPanel_block_invoke()
{
  if (CADeviceHasBacklight::once != -1) {
    dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_120);
  }
  if (CADeviceHasBacklight::has_backlight == 1) {
    char v0 = MGGetBoolAnswer() ^ 1;
  }
  else {
    char v0 = 0;
  }
  CADeviceHasLCDPanel::has_lcd = v0;
}

uint64_t __CADeviceHasBacklight_block_invoke()
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  keys = @"backlight-control";
  char v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  BOOL v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  values[0] = CFDictionaryCreate(0, (const void **)&keys, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = @"IOPropertyMatch";
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)&v4, (const void **)values, 1, v0, v1);
  CFRelease(values[0]);
  uint64_t result = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v2);
  if (result)
  {
    CADeviceHasBacklight::has_backlight = 1;
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t __CADeviceNeedsISPWorkaround_block_invoke()
{
  uint64_t result = MGIsDeviceOneOfType();
  if (result) {
    CADeviceNeedsISPWorkaround::isp_workaround = 1;
  }
  return result;
}

void __CADeviceSupportsBrightnessTransactions_block_invoke()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (MGGetBoolAnswer()) {
    CADeviceSupportsBrightnessTransactions::supports_brightness_transaction = 1;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"SynchronousBrightnessTransactions", (CFStringRef)*MEMORY[0x1E4F1D3D8], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    CADeviceSupportsBrightnessTransactions::supports_brightness_transaction = AppBooleanValue != 0;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    BOOL v1 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      CFDictionaryRef v2 = "YES";
      if (CADeviceSupportsBrightnessTransactions::supports_brightness_transaction) {
        unint64_t v3 = "YES";
      }
      else {
        unint64_t v3 = "NO";
      }
      if (!keyExistsAndHasValidFormat) {
        CFDictionaryRef v2 = "NO";
      }
      *(_DWORD *)buf = 136315394;
      io_object_t v6 = v3;
      __int16 v7 = 2080;
      CFDataRef v8 = v2;
      _os_log_impl(&dword_184668000, v1, OS_LOG_TYPE_DEFAULT, "Brightness Transactions Enabled: %s, Overridden: %s\n", buf, 0x16u);
    }
  }
}

BOOL __CADeviceHasHardwareAcceleratedHDR_block_invoke(uint64_t a1, const __CFString *a2)
{
  BOOL result = CA::ScalerUtil::has_capability((CA::ScalerUtil *)@"IOSurfaceAcceleratorCapabilitiesHDR", a2);
  CADeviceHasHardwareAcceleratedHDR::has_capability = result;
  return result;
}

uint64_t __CADeviceHasHeadroomDependentGamma_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  if (result)
  {
    if (result == 28672)
    {
      BOOL v1 = 0;
    }
    else
    {
      uint64_t v2 = 0;
      unint64_t v3 = 4;
      while (v2 != 4)
      {
        uint64_t v4 = CADeviceHasHeadroomDependentGamma::unsupported_chip_ids[++v2];
        if (v4 == result)
        {
          unint64_t v3 = v2 - 1;
          break;
        }
      }
      BOOL v1 = v3 > 3;
    }
    CADeviceHasHeadroomDependentGamma::supports_hdr_gamma = v1;
  }
  return result;
}

void __CADeviceDisableMinimumFrameDuration_block_invoke()
{
  MainBundle = CFBundleGetMainBundle();
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(MainBundle);
  BOOL v3 = InfoDictionary
    && (Value = CFDictionaryGetValue(InfoDictionary, @"CADisableMinimumFrameDuration")) != 0
    && CA_CFBoolValue(Value);
  if (CADeviceIsAppleBundle::once != -1) {
    dispatch_once(&CADeviceIsAppleBundle::once, &__block_literal_global_345);
  }
  if (CADeviceIsAppleBundle::apple_bundle) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  CADeviceDisableMinimumFrameDuration::disabled = v4;
}

uint64_t __CADeviceHasInternalDiagnostics_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  CADeviceHasInternalDiagnostics::internal = result;
  return result;
}

void __CADeviceSupportsHDRProcessing_block_invoke()
{
  if (hdrprocessing_init_once != -1) {
    dispatch_once_f(&hdrprocessing_init_once, 0, (dispatch_function_t)load_hdrprocessing_symbols);
  }
  CADeviceSupportsHDRProcessing::supports_hdr = hdr_handle != 0;
}

void __CADeviceSupportsHDRTVModes_block_invoke()
{
  CADeviceSupportsHDRTVModes::supports_hdr_modes = 1;
}

uint64_t __CADeviceSupportsFilmGrainScaling_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CADeviceSupportsFilmGrain::once != -1) {
    dispatch_once(&CADeviceSupportsFilmGrain::once, &__block_literal_global_181);
  }
  CADeviceSupportsFilmGrainScaling::supports_film_grain_scaling = CADeviceSupportsFilmGrain::has_capability;
  uint64_t result = MGGetSInt64Answer();
  if (result == 33058)
  {
    *(_DWORD *)buffer = 0;
    mach_port_t v1 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v2 = IOServiceNameMatching("arm-io");
    uint64_t result = IOServiceGetMatchingService(v1, v2);
    if (!result) {
      goto LABEL_10;
    }
    io_object_t v3 = result;
    CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(result, @"chip-revision", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (CFProperty)
    {
      CFDataRef v5 = CFProperty;
      CFTypeID v6 = CFGetTypeID(CFProperty);
      if (v6 == CFDataGetTypeID())
      {
        v9.location = 0;
        v9.length = 4;
        CFDataGetBytes(v5, v9, buffer);
      }
      CFRelease(v5);
    }
    uint64_t result = IOObjectRelease(v3);
    if (!*(_DWORD *)buffer) {
LABEL_10:
    }
      CADeviceSupportsFilmGrainScaling::supports_film_grain_scaling = 0;
  }
  return result;
}

uint64_t __CADeviceDisplaySupportsICC_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)Boolean keyExistsAndHasValidFormat = xmmword_1849A8328;
  int v2 = 460218192;
  if (MGIsDeviceOneOfType()) {
    CADeviceDisplaySupportsICC::supports_icc = 1;
  }
  keyExistsAndHasValidFormat[0] = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"CAEnableDisplayICC", @"com.apple.coreanimation", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    CADeviceDisplaySupportsICC::supports_icc = result != 0;
  }
  return result;
}

uint64_t __CADeviceSupportsReferenceMode_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)Boolean keyExistsAndHasValidFormat = xmmword_1849A8328;
  int v2 = 460218192;
  if (MGIsDeviceOneOfType()) {
    CADeviceSupportsReferenceMode::supports_ref = 1;
  }
  keyExistsAndHasValidFormat[0] = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"CAEnableDisplayReferenceMode", @"com.apple.coreanimation", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    CADeviceSupportsReferenceMode::supports_ref = result != 0;
  }
  return result;
}

void __CADeviceSupportsDisplayToneMap_block_invoke()
{
  if (MGIsDeviceOneOfType()) {
    CADeviceSupportsDisplayToneMap::display_tonemap = 1;
  }
  if (CADeviceIsVirtualized::once != -1) {
    dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
  }
  if (CADeviceIsVirtualized::is_virtualized) {
    CADeviceSupportsDisplayToneMap::display_tonemap = 0;
  }
}

uint64_t __CADeviceSupportsToneMapAcceleratorSwitching_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)Boolean keyExistsAndHasValidFormat = xmmword_1849A83A0;
  int v2 = 802516499;
  if (MGIsDeviceOneOfType()) {
    CADeviceSupportsToneMapAcceleratorSwitching::accelerator_switching = 1;
  }
  keyExistsAndHasValidFormat[0] = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"CAEnableToneMapAcceleratorSwitching", @"com.apple.coreanimation", keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0]) {
    CADeviceSupportsToneMapAcceleratorSwitching::accelerator_switching = result != 0;
  }
  return result;
}

void __CADeviceUseHarmonyXYZD50_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (CADeviceDisplaySupportsICC::once[0] != -1) {
    dispatch_once(CADeviceDisplaySupportsICC::once, &__block_literal_global_206);
  }
  if (CADeviceDisplaySupportsICC::supports_icc)
  {
    keyExistsAndHasValidFormat[0] = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"CAEnableHarmonyXYZ", @"com.apple.coreanimation", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0]) {
      CADeviceUseHarmonyXYZD50::use_d50_xyz = AppBooleanValue != 0;
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    mach_port_t v1 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_INFO))
    {
      if (CADeviceUseHarmonyXYZD50::use_d50_xyz) {
        int v2 = "YES";
      }
      else {
        int v2 = "NO";
      }
      *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136315138;
      char v4 = v2;
      _os_log_impl(&dword_184668000, v1, OS_LOG_TYPE_INFO, "CADisplay Harmony Matrix is XYZ: %s\n", keyExistsAndHasValidFormat, 0xCu);
    }
  }
}

uint64_t __CADeviceInternalDisplayScale_block_invoke()
{
  uint64_t result = MGGetFloat32Answer();
  CADeviceInternalDisplayScale::scale = v1;
  return result;
}

void __CADeviceHasNotch_block_invoke()
{
  if (MGGetBoolAnswer())
  {
    if (CADeviceIsPhone::once[0] != -1) {
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_193);
    }
    BOOL v0 = CADeviceIsPhone::phone != 0;
  }
  else
  {
    BOOL v0 = 0;
  }
  CADeviceHasNotch::has_notch = v0;
}

uint64_t __CADeviceSupportsDCP_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  CADeviceSupportsDCP::has_dcp = result;
  return result;
}

uint64_t __CADeviceSupportsRTPLC_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  if (result == 33056)
  {
    BOOL v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 4;
    while (v2 != 4)
    {
      uint64_t v4 = CADeviceSupportsRTPLC::chip_ids[++v2];
      if (v4 == result)
      {
        unint64_t v3 = v2 - 1;
        break;
      }
    }
    BOOL v1 = v3 < 4;
  }
  CADeviceSupportsRTPLC::rtplc = v1;
  return result;
}

void __CADeviceSupportsTwilight_block_invoke()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = 0;
  BOOL v0 = CFPreferencesGetAppBooleanValue(@"CAEnableTwilight", @"com.apple.coreanimation", &keyExistsAndHasValidFormat) != 0;
  if (MGGetBoolAnswer()) {
    CADeviceSupportsTwilight::twilight = 1;
  }
  if (keyExistsAndHasValidFormat) {
    CADeviceSupportsTwilight::twilight = v0;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    BOOL v1 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v2 = "YES";
      if (CADeviceSupportsTwilight::twilight) {
        unint64_t v3 = "YES";
      }
      else {
        unint64_t v3 = "NO";
      }
      if (!keyExistsAndHasValidFormat) {
        uint64_t v2 = "NO";
      }
      *(_DWORD *)buf = 136315394;
      CFTypeID v6 = v3;
      __int16 v7 = 2080;
      uint64_t v8 = v2;
      _os_log_impl(&dword_184668000, v1, OS_LOG_TYPE_DEFAULT, "Twilight Enabled: %s, Overridden: %s\n", buf, 0x16u);
    }
  }
}

uint64_t __CADeviceSupportsMedina_block_invoke()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"CAEnableMedina", @"com.apple.coreanimation", &keyExistsAndHasValidFormat);
  long long v19 = xmmword_1849A83A0;
  int v20 = 802516499;
  long long v17 = xmmword_1849A83B4;
  int v18 = -1919324456;
  long long v15 = xmmword_1849A83C8;
  int v16 = 1127969586;
  long long v13 = xmmword_1849A83DC;
  int v14 = 1292009573;
  int v12 = 1214880059;
  long long v11 = xmmword_1849A65E8;
  int v10 = 426359977;
  long long v9 = xmmword_1849A65FC;
  int v8 = 1223847566;
  long long v7 = xmmword_1849A6610;
  int v6 = 185580364;
  long long v5 = xmmword_1849A6624;
  uint64_t result = MGIsDeviceOneOfType();
  if (result) {
    CADeviceSupportsMedina::medina = 1;
  }
  if (keyExistsAndHasValidFormat)
  {
    uint64_t result = MGGetSInt64Answer();
    if (AppBooleanValue) {
      BOOL v3 = result == 33074 || result == 33088;
    }
    else {
      BOOL v3 = 0;
    }
    CADeviceSupportsMedina::medina = v3;
  }
  return result;
}

uint64_t __CADeviceSupportsBandwidthStatistics_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  if (result == 33027)
  {
    BOOL v1 = 1;
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 4;
    while (v2 != 4)
    {
      uint64_t v4 = CADeviceSupportsBandwidthStatistics::chip_ids[++v2];
      if (v4 == result)
      {
        unint64_t v3 = v2 - 1;
        break;
      }
    }
    BOOL v1 = v3 < 4;
  }
  CADeviceSupportsBandwidthStatistics::bw_stats = v1;
  return result;
}

BOOL CADeviceUseSharedEvents()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = __CADeviceUseSharedEvents_block_invoke;
  v1[3] = &__block_descriptor_tmp_342;
  char v2 = 0;
  if (CADeviceUseSharedEvents::once[0] != -1) {
    dispatch_once(CADeviceUseSharedEvents::once, v1);
  }
  return CADeviceUseSharedEvents::ca_shared_event_enabled != 0;
}

void __CADeviceUseSharedEvents_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    char v2 = x_log_category_sharedevent;
    if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)(a1 + 32)) {
        uint64_t v3 = "Enabled";
      }
      else {
        uint64_t v3 = "Disabled";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEBUG, "CA SharedEvent (default): %s\n", (uint8_t *)&buf, 0xCu);
    }
  }
  CABootArgGetArray(&buf);
  CADeviceUseSharedEvents::ca_shared_event_enabled = CABootArgGetInt((const std::string *)buf, *((const std::string **)&buf + 1), *(unsigned char *)(a1 + 32) == 0, "disable_ca_shared_event") == 0;
  p_long long buf = (void **)&buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&p_buf);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_sharedevent;
    if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEBUG))
    {
      if (CADeviceUseSharedEvents::ca_shared_event_enabled) {
        long long v5 = "Enabled";
      }
      else {
        long long v5 = "Disabled";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEBUG, "CA SharedEvent (boot-arg): %s\n", (uint8_t *)&buf, 0xCu);
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v6 = x_log_category_sharedevent;
    if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_INFO))
    {
      if (CADeviceUseSharedEvents::ca_shared_event_enabled) {
        long long v7 = "Enabled";
      }
      else {
        long long v7 = "Disabled";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_INFO, "CA SharedEvent: %s\n", (uint8_t *)&buf, 0xCu);
    }
  }
}

void __CADeviceNeedsTripleBufferedTTL_block_invoke()
{
  if (MGIsDeviceOneOfType())
  {
    BOOL v0 = 1;
  }
  else if (CADeviceSupportsOddQuantaFrameRates())
  {
    if (CADeviceIsPhone::once[0] != -1) {
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_193);
    }
    BOOL v0 = CADeviceIsPhone::phone == 0;
  }
  else
  {
    BOOL v0 = 0;
  }
  CADeviceNeedsTripleBufferedTTL::wants_triple_buffered_ttl = v0;
}

uint64_t __CADeviceSupportsNextSwapAnnouncement_block_invoke()
{
  uint64_t result = MGIsDeviceOneOfType();
  CADeviceSupportsNextSwapAnnouncement::b = result;
  return result;
}

uint64_t __CADevicePrefersHDR444_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  CADevicePrefersHDR444::b = 1;
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"CAPrefersHDR444", @"com.apple.coreanimation", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    CADevicePrefersHDR444::b = result != 0;
  }
  return result;
}

uint64_t __CADeviceNeedsIRDCFlush_block_invoke()
{
  uint64_t result = MGIsDeviceOneOfType();
  CADeviceNeedsIRDCFlush::b = result;
  return result;
}

void CA::CG::FillUnevenRoundedRect::draw_shape(CA::CG::FillUnevenRoundedRect *this, CA::OGL::Context **a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 100) & 1) != 0
    && (*(unsigned int (**)(CA::OGL::Context *, uint64_t))(*(void *)a2[1] + 184))(a2[1], 31))
  {
    double v5 = *((double *)this + 14);
    double v4 = *((double *)this + 15);
    double v21 = v5;
    double v22 = v4;
    double v7 = *((double *)this + 16);
    double v6 = *((double *)this + 17);
    double v23 = v7;
    double v24 = v6;
    if (v7 < 0.0)
    {
      double v21 = v7 + v5;
      double v23 = -v7;
    }
    if (v6 < 0.0)
    {
      double v22 = v6 + v4;
      double v24 = -v6;
    }
    uint64_t v8 = 11;
    if ((*((_DWORD *)this + 25) & 4) == 0) {
      uint64_t v8 = 4;
    }
    long long v9 = *(_OWORD *)&a2[v8];
    uint64_t v10 = (char *)(a2 + 11);
    if ((*((_DWORD *)this + 25) & 4) == 0) {
      uint64_t v10 = (char *)(a2 + 4);
    }
    long long v11 = *((_OWORD *)v10 + 1);
    long long v12 = *((_OWORD *)v10 + 2);
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    memset(v25, 0, sizeof(v25));
    CA::Transform::set_affine((CA::Transform *)v25, *(double *)&v9, *((double *)&v9 + 1), *(double *)&v11, *((double *)&v11 + 1), *(double *)&v12, *((double *)&v12 + 1));
    *((void *)&v26 + 1) = &v21;
    *(void *)&long long v27 = v25;
    *((void *)&v27 + 1) = 0xFF0020003FLL;
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    long long v13 = *((_OWORD *)this + 10);
    v30[0] = *((_OWORD *)this + 9);
    v30[1] = v13;
    long long v14 = *((_OWORD *)this + 12);
    long long v31 = *((_OWORD *)this + 11);
    long long v32 = v14;
    CA::OGL::fill_uneven_round_rect(a2[1], (uint64_t)&v26 + 8, (double *)v30, 0, *(double *)&v31, *(double *)&v14, v15, v16, v17, v18);
  }
  else
  {
    uint64_t v19 = CGPathCreateWithUnevenCornersRoundedRect();
    if (v19)
    {
      int v20 = (const CGPath *)v19;
      CA::CG::fill_path((uint64_t)a2);
      CGPathRelease(v20);
    }
  }
}

uint64_t CA::CG::FillUnevenRoundedRect::debug_color(CA::CG::FillUnevenRoundedRect *this)
{
  return 1724330464;
}

void *CA::CG::FillUnevenRoundedRect::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (result)
  {
    uint64_t result = (void *)CA::CG::DrawPathShadow::DrawPathShadow(result, a2, a1, a4, a5, a3, *(_DWORD *)(a1 + 100) & 4 | 0x80u);
    void *result = &unk_1ED029998;
  }
  return result;
}

uint64_t CA::CG::FillUnevenRoundedRectShadow::retain_path()
{
  return CGPathCreateWithUnevenCornersRoundedRect();
}

void CA::CG::FillUnevenRoundedRectShadow::~FillUnevenRoundedRectShadow(CA::CG::FillUnevenRoundedRectShadow *this)
{
  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

void CA::CG::FillUnevenRoundedRect::compute_dod(CA::CG::FillUnevenRoundedRect *this, float64x2_t *a2)
{
  CA::Rect::operator=(a2->f64, (double *)this + 14);
  if ((*((unsigned char *)this + 100) & 4) == 0)
  {
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  }
}

void CA::CG::FillUnevenRoundedRect::~FillUnevenRoundedRect(CA::CG::FillUnevenRoundedRect *this)
{
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

BOOL CA::Render::CompressedImage::is_unpremultiplied(CA::Render::CompressedImage *this)
{
  return *((_DWORD *)this + 42) == 2;
}

void CA::Render::CompressedImage::show(CA::Render::CompressedImage *this, unsigned int a2, char a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  BOOL v5 = x_log_hook_p();
  if (a3)
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      long long v28 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = *((_DWORD *)this + 4);
        int v29 = *((_DWORD *)this + 5);
        unsigned int v31 = *((_DWORD *)this + 39) - 1;
        if (v31 > 0x1B) {
          long long v32 = "UNKNOWN";
        }
        else {
          long long v32 = off_1E527D2C8[v31];
        }
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v30;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v29;
        *(_WORD *)&buf[14] = 2080;
        *(void *)&buf[16] = v32;
        _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, "<compressed-image [%d %d] [%s]", buf, 0x18u);
      }
    }
    unint64_t v33 = (*(uint64_t (**)(CA::Render::CompressedImage *))(*(void *)this + 168))(this);
    if (x_log_hook_p())
    {
      if (v33 >= 0x400)
      {
        double v37 = 1.0;
        do
          double v37 = v37 * 0.0009765625;
        while (v37 * (double)v33 >= 1024.0);
      }
      goto LABEL_45;
    }
    uint64_t v34 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      double v35 = (double)v33;
      if (v33 >= 0x400)
      {
        double v38 = 1.0;
        do
        {
          double v38 = v38 * 0.0009765625;
          double v36 = v38 * v35;
        }
        while (v38 * v35 >= 1024.0);
      }
      else
      {
        double v36 = (double)v33;
      }
      uint64_t v39 = v33 > 0x3FF;
      if ((v33 & 0xFFFFFFFFFFF00000) != 0) {
        ++v39;
      }
      if ((v33 & 0xFFFFFFFFC0000000) != 0) {
        ++v39;
      }
      if (v33 >> 40) {
        ++v39;
      }
      if (v33 >> 50) {
        ++v39;
      }
      if (v33 >> 60) {
        ++v39;
      }
      double v40 = off_1E527FCB0[v39];
      *(_DWORD *)long long buf = 134218242;
      *(double *)&uint8_t buf[4] = v36;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v40;
      unint64_t v25 = " [%.2lf %s]>";
      long long v26 = v34;
      uint32_t v27 = 22;
      goto LABEL_48;
    }
  }
  else
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      double v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *((_DWORD *)this + 4);
        int v7 = *((_DWORD *)this + 5);
        int v9 = *((_DWORD *)this + 38);
        unsigned int v10 = *((_DWORD *)this + 39) - 1;
        if (v10 > 0x1B) {
          long long v11 = "UNKNOWN";
        }
        else {
          long long v11 = off_1E527D2C8[v10];
        }
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v8;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v7;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v9;
        *(_WORD *)&buf[20] = 2080;
        *(void *)&buf[22] = v11;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(compressed-image [%d %d] [%d] %s", buf, 0x1Eu);
      }
    }
    unint64_t v12 = (*(uint64_t (**)(CA::Render::CompressedImage *))(*(void *)this + 168))(this);
    if (x_log_hook_p())
    {
      if (v12 >= 0x400)
      {
        double v16 = 1.0;
        do
          double v16 = v16 * 0.0009765625;
        while (v16 * (double)v12 >= 1024.0);
      }
      x_log_();
    }
    else
    {
      long long v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        double v14 = (double)v12;
        if (v12 >= 0x400)
        {
          double v17 = 1.0;
          do
          {
            double v17 = v17 * 0.0009765625;
            double v15 = v17 * v14;
          }
          while (v17 * v14 >= 1024.0);
        }
        else
        {
          double v15 = (double)v12;
        }
        uint64_t v18 = v12 > 0x3FF;
        if ((v12 & 0xFFFFFFFFFFF00000) != 0) {
          ++v18;
        }
        if ((v12 & 0xFFFFFFFFC0000000) != 0) {
          ++v18;
        }
        if (v12 >> 40) {
          ++v18;
        }
        if (v12 >> 50) {
          ++v18;
        }
        if (v12 >> 60) {
          ++v18;
        }
        uint64_t v19 = off_1E527FCB0[v18];
        *(_DWORD *)long long buf = 134218242;
        *(double *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v19;
        _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, " (%.2lf %s)", buf, 0x16u);
      }
    }
    if (*((void *)this + 6))
    {
      if ((*((unsigned char *)this + 14) & 8) != 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int v20 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v20, OS_LOG_TYPE_DEFAULT, " colormatching-disabled", buf, 2u);
          }
        }
      }
      CFStringRef v21 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
      if (v21)
      {
        CFStringRef v22 = v21;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        memset(buf, 0, sizeof(buf));
        CFStringGetCString(v21, (char *)buf, 127, 0x8000100u);
        if (buf[0])
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            double v23 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v41 = 136315138;
              __int16 v42 = buf;
              _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, " (colorspace \"%s\")", v41, 0xCu);
            }
          }
        }
        CFRelease(v22);
      }
    }
    if (x_log_hook_p())
    {
LABEL_45:
      x_log_();
      return;
    }
    uint64_t v24 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      unint64_t v25 = ")";
      long long v26 = v24;
      uint32_t v27 = 2;
LABEL_48:
      _os_log_impl(&dword_184668000, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
    }
  }
}

uint64_t CA::Render::release_deallocate(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F14B00];
  mach_vm_address_t v3 = a2[12] & -*MEMORY[0x1E4F14B00];
  mach_vm_size_t v4 = ((*(uint64_t (**)(void *))(*a2 + 168))(a2) + *v2 - 1) & -*v2;
  vm_map_t v5 = *MEMORY[0x1E4F14960];

  return mach_vm_deallocate(v5, v3, v4);
}

void CA::CG::MetalDataProvider::~MetalDataProvider(CA::CG::MetalDataProvider *this, uint64_t a2, void *a3)
{
  CA::CG::AccelDataProvider::~AccelDataProvider(this, a2, a3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

CA::CG::Queue **CA::CG::MetalDataProvider::copy_data(CA::CG::MetalDataProvider *this)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = (CA::CG::Queue **)*((void *)this + 2);
  if (result && !*((void *)this + 3) && !*((unsigned char *)this + 48))
  {
    int v3 = BYTE9(xmmword_1EB2ACC10);
    if (BYTE9(xmmword_1EB2ACC10))
    {
      kdebug_trace();
      uint64_t result = (CA::CG::Queue **)*((void *)this + 2);
    }
    unsigned int v4 = *((_DWORD *)this + 11);
    if (v4 && result[9])
    {
      CA::CG::Queue::wait_queue(result[9], v4);
      uint64_t result = (CA::CG::Queue **)*((void *)this + 2);
    }
    vm_map_t v5 = (void *)(*((uint64_t (**)(CA::CG::Queue **))*result + 4))(result);
    unint64_t v7 = 0;
    v8[0] = 0;
    uint64_t result = (CA::CG::Queue **)CAMetalTextureGetBytes(v5, v8, &v7);
    unint64_t v6 = v7;
    *((void *)this + 3) = v8[0];
    *((void *)this + 4) = v6;
    if (v3)
    {
      return (CA::CG::Queue **)kdebug_trace();
    }
  }
  return result;
}

uint64_t CA::CG::DrawPathShadow::fill_rule(CA::CG::DrawPathShadow *this)
{
  return 0;
}

uint64_t CA::CG::DrawPathShadow::path_bounds(CA::CG::DrawPathShadow *this)
{
  return 0;
}

void CA::CG::DrawPathShadow::draw_shadow(CA::CG::DrawPathShadow *this, CA::CG::Renderer *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 1);
  if (((*(uint64_t (**)(void))(**((void **)this + 18) + 136))(*((void *)this + 18)) & 5) != 0)
  {
    unint64_t v6 = *(float16x4_t **)(v4 + 16);
    float16x4_t v7 = v6[1];
    _H0 = *(_WORD *)(*((void *)this + 18) + 94);
    __asm { FCVT            S0, H0 }
    float16x4_t v13 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v7), _S0));
    if (_ZF) {
      float16x4_t v14 = v6[1];
    }
    else {
      float16x4_t v14 = v13;
    }
    v6[1] = v14;
    float64x2_t v15 = 0uLL;
    float64x2_t v50 = 0u;
    memset(v49, 0, sizeof(v49));
    uint64_t v16 = 32;
    if ((*((_DWORD *)this + 25) & 4) != 0)
    {
      uint64_t v16 = 88;
      double v17 = (float64x2_t *)((char *)a2 + 88);
    }
    else
    {
      double v17 = (float64x2_t *)((char *)a2 + 32);
    }
    if (v17 == v49)
    {
      v20.f64[0] = 0.0;
      float64x2_t v19 = 0uLL;
      float64x2_t v18 = 0uLL;
      float64x2_t v21 = 0uLL;
      float64_t v22 = 0.0;
    }
    else
    {
      float64x2_t v18 = *(float64x2_t *)((char *)a2 + v16);
      float64x2_t v19 = v17[1];
      float64x2_t v15 = v17[2];
      v49[0] = v18;
      v49[1] = v19;
      v20.f64[0] = v19.f64[1];
      float64x2_t v21 = *(float64x2_t *)((char *)v49 + 8);
      float64_t v22 = v18.f64[0];
    }
    double v23 = (float32x2_t *)*((void *)this + 19);
    v24.f64[1] = v21.f64[1];
    v24.f64[0] = v20.f64[0];
    float64x2_t v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0);
    *(void *)&long long v5 = *((void *)a2 + 10);
    v25.f64[0] = v22;
    float64x2_t v26 = vmulq_f64(v24, v25);
    *(float *)&long long v5 = *(double *)&v5;
    long long v45 = v5;
    double v46 = v22;
    float64x2_t v27 = vcvtq_f64_f32(vmul_n_f32(v23[10], *(float *)&v5));
    v20.f64[1] = v22;
    float64x2_t v47 = v21;
    int8x16_t v28 = (int8x16_t)vmulq_f64(v21, v27);
    float64x2_t v29 = vmulq_n_f64(vmlaq_f64(vnegq_f64((float64x2_t)vextq_s8(v28, v28, 8uLL)), v27, v20), 1.0 / vsubq_f64(v26, (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1)).f64[0]);
    float v30 = v23[9].f32[1];
    float64x2_t v50 = vmlaq_laneq_f64(vmlaq_n_f64(v15, v18, v29.f64[0]), v19, v29, 1);
    long long v48 = 0uLL;
    unsigned int v31 = (const CGPath *)(*(uint64_t (**)(CA::CG::DrawPathShadow *, CA::CG::Renderer *, long long *))(*(void *)this + 192))(this, a2, &v48);
    if (v31)
    {
      unint64_t v33 = v31;
      float v34 = vmulq_f64(v47, v47).f64[0] + v46 * v46;
      v36.n128_u64[1] = *((void *)&v45 + 1);
      float v35 = (float)(v30 * *(float *)&v45) / sqrtf(v34);
      float64x2_t v50 = vmlaq_n_f64(vmlaq_n_f64(v50, v49[0], *(double *)&v48), v49[1], *((double *)&v48 + 1));
      v36.n128_f64[0] = vaddvq_f64(vmulq_f64(v49[0], v49[0]));
      __n128 v37 = (__n128)vmulq_f64(v49[1], v49[1]);
      v37.n128_f64[0] = vaddvq_f64((float64x2_t)v37);
      BOOL v38 = v36.n128_f64[0] != 1.0;
      if (v37.n128_f64[0] != 1.0) {
        BOOL v38 = 1;
      }
      double v39 = sqrt(v36.n128_f64[0]);
      double v40 = sqrt(v37.n128_f64[0]);
      if (v38)
      {
        v37.n128_f64[0] = v40;
        v36.n128_f64[0] = v39;
      }
      _ZF = v35 == 0.0 && (*(_DWORD *)(*((void *)this + 18) + 100) & 0x400) == 0;
      if (!_ZF && (*((unsigned char *)this + 100) & 0x80) != 0 && v36.n128_f64[0] < 3.0)
      {
        v37.n128_f64[0] = vabdd_f64(v36.n128_f64[0], v37.n128_f64[0]);
        v36.n128_u64[0] = 0x3F50624DD2F1A9FCLL;
        if (v37.n128_f64[0] < 0.001)
        {
          __int16 v42 = CA::Render::Path::new_path(v31, v32);
          if (v42)
          {
            uint64_t v43 = (atomic_uint *)v42;
            CA::Transform::set_affine((CA::Transform *)v51, v49[0].f64[0], v49[0].f64[1], v49[1].f64[0], v49[1].f64[1], v50.f64[0], v50.f64[1]);
            CA::OGL::emit_shadow_path(v4);
            if (atomic_fetch_add(v43 + 2, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v43 + 16))(v43);
            }
            CGPathRelease(v33);
            *(float16x4_t *)(*(void *)(v4 + 16) + 8) = v7;
            return;
          }
        }
      }
      (*(void (**)(CA::CG::DrawPathShadow *, __n128, __n128))(*(void *)this + 200))(this, v37, v36);
      (*(void (**)(CA::CG::DrawPathShadow *))(*(void *)this + 208))(this);
      char v44 = CA::CG::fill_path_blurred((uint64_t)a2);
      CGPathRelease(v33);
      *(float16x4_t *)(*(void *)(v4 + 16) + 8) = v7;
      if (v44) {
        return;
      }
    }
    else
    {
      *(float16x4_t *)(*(void *)(v4 + 16) + 8) = v7;
    }
    CA::CG::DrawShadow::draw_shadow(this, a2);
    return;
  }

  CA::CG::DrawShadow::draw_shadow(this, a2);
}

uint64_t CA::CG::FillPathShadow::fill_rule(CA::CG::FillPathShadow *this)
{
  return HIBYTE(*(_DWORD *)(*((void *)this + 18) + 100)) & 1;
}

uint64_t CA::CG::FillPathShadow::path_bounds(CA::CG::FillPathShadow *this)
{
  return *((void *)this + 18) + 120;
}

CGPathRef CA::CG::FillPathShadow::retain_path(uint64_t a1)
{
  return CGPathRetain(*(CGPathRef *)(*(void *)(a1 + 144) + 112));
}

void CA::CG::FillPathShadow::~FillPathShadow(CA::CG::FillPathShadow *this)
{
  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

uint64_t CA::CG::StrokePathShadow::retain_path(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 144);
  uint64_t v2 = *(const CGPath **)(v1 + 112);
  long long v9 = *(_OWORD *)(v1 + 152);
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v10 = v3;
  uint64_t v4 = v1;
  if (v3)
  {
    CGDashRetain();
    uint64_t v4 = *(void *)(a1 + 144);
  }
  uint64_t v6 = *(void *)(v1 + 184);
  uint64_t v11 = *(void *)(v1 + 176);
  uint64_t v12 = v6;
  uint64_t stroked_path = CA::CG::create_stroked_path(v2, (_OWORD *)(v1 + 8), (uint64_t)&v9, (*(_DWORD *)(v4 + 100) & 4) != 0);
  if (v3) {
    CGDashRelease();
  }
  return stroked_path;
}

void CA::CG::StrokePathShadow::~StrokePathShadow(CA::CG::StrokePathShadow *this)
{
  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

CGColorSpaceRef CACopyColorSpaceFromBulkAttachments(CGColorSpaceRef result)
{
  if (result) {
    return CA::Render::load_colorspace_from_bulk_attachments(*((unsigned char *)result + 59), *((unsigned char *)result + 60));
  }
  return result;
}

double CA::Render::TiledTexture::lod_scale(CA::Render::TiledTexture *this, int a2)
{
  double result = 1.0;
  int v3 = a2 - *((_DWORD *)this + 27);
  if (v3)
  {
    double result = 0.0;
    if ((a2 & 0x80000000) == 0 && *((_DWORD *)this + 26) > a2)
    {
      unsigned int v4 = *((_DWORD *)this + 4);
      if (v3 >= 0) {
        unsigned int v5 = v4 >> v3;
      }
      else {
        unsigned int v5 = v4 << (*((unsigned char *)this + 108) - a2);
      }
      return (double)v5 / (double)v4;
    }
  }
  return result;
}

uint64_t CA::Render::TiledTexture::set_fill_color(CA::Render::TiledTexture *this, int a2, Pattern *a3)
{
  int v3 = a3;
  *((_DWORD *)this + 28) = a2;
  unsigned int v5 = (atomic_uint *)*((void *)this + 15);
  if (v5 != (atomic_uint *)a3)
  {
    if (v5 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
    }
    if (v3)
    {
      uint64_t v6 = (atomic_uint *)&v3[1];
      if (!atomic_fetch_add((atomic_uint *volatile)&v3[1], 1u))
      {
        int v3 = 0;
        atomic_fetch_add(v6, 0xFFFFFFFF);
      }
    }
    *((void *)this + 15) = v3;
  }
  if (v3)
  {
    Pattern v7 = v3[16];
    BOOL v8 = *(void *)&v7
      && (*(unsigned char *)(*(void *)&v7 + 13) & 0x10) != 0
      && *(double *)&v3[12] <= *(double *)&v3[10]
      && *(double *)&v3[13] <= *(double *)&v3[11];
  }
  else
  {
    BOOL v8 = *((unsigned __int8 *)this + 112) == 0xFF;
  }
  uint64_t result = (*(uint64_t (**)(CA::Render::TiledTexture *))(*(void *)this + 120))(this);
  if ((result & v8) != 0) {
    int v10 = 4096;
  }
  else {
    int v10 = 0;
  }
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0xFFFFEFFF | v10;
  return result;
}

CFTypeID CA::Layer::ensure_mipmaps(CFTypeID this)
{
  if ((*(unsigned char *)(this + 54) & 0x20) == 0)
  {
    CFTypeID v1 = this;
    this = [*(id *)(this + 16) contents];
    if (this)
    {
      CFTypeID v2 = CFGetTypeID((CFTypeRef)this);
      if (CABackingStoreGetTypeID::once[0] != -1) {
        dispatch_once(CABackingStoreGetTypeID::once, &__block_literal_global_907);
      }
      if (v2 == CABackingStoreGetTypeID::type)
      {
        int v3 = *(void **)(v1 + 16);
        return [v3 setNeedsDisplay];
      }
      else
      {
        this = CGImageGetTypeID();
        if (v2 == this)
        {
          unsigned int v4 = *(void **)(v1 + 16);
          return [v4 setContentsChanged];
        }
      }
    }
  }
  return this;
}

uint64_t CA::Layer::fetch_defaults(CA::Layer *this)
{
  CFTypeID v2 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v2) {
    CFTypeID v2 = (CA::Transaction *)CA::Transaction::create(this);
  }
  int v3 = CA::Layer::writable_state(this, v2);

  return CA::Layer::State::fetch_defaults((uint64_t)v3, v2, (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef *))defaultValueForAtom, (uint64_t)this);
}

atomic_uint **X::Ref<CA::Layer>::~Ref(atomic_uint **a1)
{
  CFTypeID v2 = *a1;
  if (*a1)
  {
    while (1)
    {
      atomic_uint v3 = *v2;
      if (!*v2) {
        break;
      }
      atomic_uint v4 = *v2;
      atomic_compare_exchange_strong(v2, (unsigned int *)&v4, v3 - 1);
      if (v4 == v3)
      {
        if (v3 == 1)
        {
          CA::Layer::destroy((CA::Layer *)v2);
          CA::Layer::~Layer((CA::AttrList **)v2);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v2);
        }
        return a1;
      }
    }
  }
  return a1;
}

id CA::Layer::layer_at_time(CA::Layer *this, CA::Transaction *a2, double a3, char a4, char a5)
{
  v40[1] = *(double *)MEMORY[0x1E4F143B8];
  v40[0] = a3;
  id v5 = (id)*((void *)this + 2);
  if (!*((void *)this + 35)) {
    return v5;
  }
  int v10 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10 + 1;
  if (!v10) {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  }
  uint64_t v34 = 0;
  float v35 = &v34;
  uint64_t v36 = 0x3052000000;
  __n128 v37 = __Block_byref_object_copy__13057;
  BOOL v38 = __Block_byref_object_dispose__13058;
  uint64_t v39 = 0;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  float64x2_t v27 = ___ZN2CA5Layer13layer_at_timeEPNS_11TransactionEdbb_block_invoke;
  int8x16_t v28 = &unk_1E527DAE8;
  id v29 = v5;
  float v30 = &v34;
  char v33 = a5;
  unsigned int v31 = this;
  long long v32 = a2;
  if ([*((id *)this + 36) count])
  {
    if ((((uint64_t (*)(void *))v27)(v26) & 1) == 0) {
      goto LABEL_40;
    }
    CA::Layer::apply_modifiers_to_layer(*((CA::Layer **)this + 36), (CALayer *)v35[5]);
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 35);
  if (!v12)
  {
LABEL_38:
    uint64_t v23 = v35[5];
    if (v23)
    {
      atomic_fetch_or((atomic_uint *volatile)(*(void *)(v23 + 16) + 4), 0x8000u);
      id v5 = (id)v35[5];
      v35[5] = (uint64_t)v5;
    }
    goto LABEL_40;
  }
  while (1)
  {
    __int16 v13 = *((_WORD *)v12 + 28);
    if (v13 & 0x24) != 0 || (v13 & 0x82) == 2 && (a5) {
      goto LABEL_37;
    }
    uint64_t v14 = v12[4];
    if (v14)
    {
      float64x2_t v15 = (atomic_uint *)(v14 + 8);
      if (!atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 1u))
      {
        uint64_t v14 = 0;
        atomic_fetch_add(v15, 0xFFFFFFFF);
      }
      __int16 v13 = *((_WORD *)v12 + 28);
    }
    if ((v13 & 2) == 0)
    {
      [(id)v12[1] beginTime];
      uint64_t v16 = (_DWORD *)v12[1];
      if (v17 == 0.0)
      {
        if (objc_msgSend((id)objc_msgSend(v16, "beginTimeMode"), "isEqualToString:", @"non-zero"))
        {
          CA::Transaction::Shared::time(*((CA::Transaction::Shared **)a2 + 13));
          double v25 = v18;
          CA::Layer::convert_time(a2, (CA::Transaction *)&v25, 0, *((CALayer **)this + 2), v19);
          float64x2_t v20 = (_DWORD *)v12[1];
          v20[4] &= ~1u;
          [v20 setBeginTime:v25];
          [(id)v12[1] setBeginTimeMode:@"absolute"];
          uint64_t v16 = (_DWORD *)v12[1];
          v16[4] |= 5u;
        }
        else
        {
          uint64_t v16 = (_DWORD *)v12[1];
        }
      }
      if (objc_msgSend((id)objc_msgSend(v16, "beginTimeMode"), "isEqualToString:", @"absolute"))
      {
        uint64_t v21 = CAMediaTimingCopyRenderTiming(v12[1]);
        if (v14 && atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF) == 1) {
          (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        }
        uint64_t v14 = v21;
      }
    }
    if (!v14) {
      goto LABEL_37;
    }
    if ((a4 & 1) != 0
      && !CA::Layer::convert_time(a2, (CA::Transaction *)v40, 0, *((CALayer **)this + 2), v11))
    {
      break;
    }
    double v22 = v40[0];
    if ((v40[0] >= *(double *)(v14 + 40) || (*(unsigned char *)(v14 + 13) & 4) != 0)
      && (v22 <= CA::Render::Timing::end_time((CA::Render::Timing *)v14) || (*(unsigned char *)(v14 + 13) & 2) != 0))
    {
      if (!((unsigned int (*)(void *))v27)(v26)) {
        break;
      }
      [(id)v12[1] applyForTime:v35[5] presentationObject:v5 modelObject:v40[0]];
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    }
    a4 = 0;
LABEL_37:
    uint64_t v12 = (uint64_t *)*v12;
    if (!v12) {
      goto LABEL_38;
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF) == 1) {
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
LABEL_40:
  _Block_object_dispose(&v34, 8);
  CA::Transaction::unlock(a2);
  return v5;
}

void sub_1848F40CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  CA::Transaction::unlock(v12);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__13057(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__13058(uint64_t a1)
{
}

BOOL ___ZN2CA5Layer13layer_at_timeEPNS_11TransactionEdbb_block_invoke(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    return 1;
  }
  atomic_uint v3 = *(_DWORD **)(a1 + 48);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_alloc((Class)objc_opt_class());
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    return 0;
  }
  int v4 = v3[1];
  int v5 = *(unsigned __int8 *)(a1 + 64);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  Pattern v7 = malloc_type_zone_malloc(malloc_zone, 0x128uLL, 0x8BB15036uLL);
  if (v7)
  {
    BOOL v8 = v7;
    if (v5) {
      int v9 = 0x40000;
    }
    else {
      int v9 = 393216;
    }
    unsigned int v10 = v9 | v4 & 0xFFEBFFFF;
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v12 = *(CA::Transaction **)(a1 + 56);
    void *v7 = 0;
    v7[1] = 0;
    v7[3] = 0;
    v7[4] = 0;
    v7[2] = v11;
    CA::Layer::State::State((CA::Layer::State *)(v7 + 5), (const CA::Layer::State *)(v3 + 10), v12);
    v8[19] = 0;
    v8[20] = 0;
    *((_DWORD *)v8 + 44) = 0;
    v8[21] = 0;
    *(_OWORD *)(v8 + 23) = 0u;
    *(_OWORD *)(v8 + 25) = 0u;
    *(_OWORD *)(v8 + 27) = 0u;
    *(_OWORD *)(v8 + 29) = 0u;
    *((unsigned char *)v8 + 248) = 0;
    v8[32] = 0;
    v8[33] = 0;
    v8[35] = 0;
    v8[36] = 0;
    *(_DWORD *)BOOL v8 = 1;
    *((_DWORD *)v8 + 1) = v10;
    v8[34] = 0;
    *(void *)(v11 + 16) = v8;
    __int16 v13 = *(CA::Transaction **)(a1 + 56);
    Pattern v7 = v8;
  }
  else
  {
    __int16 v13 = *(CA::Transaction **)(a1 + 56);
  }
  CA::Layer::set_model_layer((CA::Layer *)v7, v13, (CA::Layer *)v3);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) initWithLayer:*(void *)(a1 + 32)];
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) != 0;
}

void sub_1848F462C(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848F47F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__370(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

void __Block_byref_object_copy__372(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__373(uint64_t a1)
{
}

void sub_1848F4B44(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848F4CA0(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL backing_blame_callback(char *a1, size_t a2, unsigned char *a3)
{
  int v5 = (id *)(a3 + 88);
  if (!a3[96])
  {
    id Weak = *v5;
    if (!*v5) {
      return Weak != 0;
    }
    goto LABEL_3;
  }
  id Weak = objc_loadWeak(v5);
  if (Weak)
  {
LABEL_3:
    Class = object_getClass(Weak);
    Name = class_getName(Class);
    snprintf(a1, a2, "%s (CALayer)", Name);
  }
  return Weak != 0;
}

CGImageRef create_tinted_contents(CGImage *a1, CGColor *a2, char a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  size_t Width = CGImageGetWidth(a1);
  size_t Height = CGImageGetHeight(a1);
  __int16 BitmapInfo = CGImageGetBitmapInfo(a1);
  if ((BitmapInfo & 0x100) != 0)
  {
    BOOL v9 = 0;
    BOOL v84 = 0;
    unsigned int v10 = 13;
    uint64_t v11 = 8;
  }
  else
  {
    size_t BitsPerComponent = CGImageGetBitsPerComponent(a1);
    BOOL v84 = BitsPerComponent == 16;
    BOOL v9 = BitsPerComponent != 16;
    if (BitsPerComponent == 16) {
      unsigned int v10 = 21;
    }
    else {
      unsigned int v10 = 1;
    }
    if (BitsPerComponent == 16) {
      uint64_t v11 = 8;
    }
    else {
      uint64_t v11 = 4;
    }
  }
  ColorSpace = CGImageGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelRGB)
  {
    if ((BitmapInfo & 0x100) != 0) {
      unsigned int v13 = 28;
    }
    else {
      unsigned int v13 = 29;
    }
    ColorSpace = (CGColorSpace *)CAGetColorSpace(v13);
  }
  size_t v14 = (v11 * Width + 31) & 0xFFFFFFFFFFFFFFE0;
  float64x2_t v15 = (float16x4_t *)malloc_type_calloc(v14 * Height, 1uLL, 0xA8D2298DuLL);
  uint64_t v16 = CAGetCachedCGBitmapContext_(v15, Width, Height, v10, v14, ColorSpace);
  if (v16) {
    double v17 = (CGContext *)*((void *)v16 + 2);
  }
  else {
    double v17 = 0;
  }
  if (CGImageIsMask(a1))
  {
    v88.origin.x = 0.0;
    v88.origin.y = 0.0;
    v88.size.width = (double)Width;
    v88.size.height = (double)Height;
    CGContextClipToMask(v17, v88, a1);
    CGContextSetFillColorWithColor(v17, a2);
    v89.origin.x = 0.0;
    v89.origin.y = 0.0;
    v89.size.width = (double)Width;
    v89.size.height = (double)Height;
    CGContextFillRect(v17, v89);
  }
  else
  {
    CGContextSetBlendMode(v17, kCGBlendModeCopy);
    v90.origin.x = 0.0;
    v90.origin.y = 0.0;
    v90.size.width = (double)Width;
    v90.size.height = (double)Height;
    CGContextDrawImage(v17, v90, a1);
    float32x4_t v86 = 0uLL;
    CA::Render::convert_cgcolor_to_float(a2, ColorSpace, (CGColorSpace *)&v86, 0, v20);
    float32x4_t v21 = v86;
    if (v9)
    {
      float32x2_t v22 = (float32x2_t)vdup_n_s32(0x437F0000u);
      float32x2_t v23 = vmla_f32((float32x2_t)0x3F0000003F000000, v22, *(float32x2_t *)v86.f32);
      float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v23, v22), (int8x8_t)v22, (int8x8_t)v23);
      float32x2_t v25 = vmla_f32((float32x2_t)0x3F0000003F000000, v22, (float32x2_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL)));
      float32x2_t v26 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, v22), (int8x8_t)v22, (int8x8_t)v25);
      int32x2_t v27 = (int32x2_t)vbic_s8((int8x8_t)vshl_u32((uint32x2_t)vcvt_s32_f32(v24), (uint32x2_t)0x800000010), (int8x8_t)vcltz_f32(v24));
      int32x2_t v28 = vcltz_f32(v26);
      if (v28.i8[4]) {
        int v29 = 0;
      }
      else {
        int v29 = (int)v26.f32[1];
      }
      if (v28.i8[0]) {
        unsigned int v30 = 0;
      }
      else {
        unsigned int v30 = (int)v26.f32[0] << 24;
      }
      if (a3)
      {
        if (Height)
        {
          uint64_t v31 = 0;
          unsigned __int32 v32 = vorr_s8((int8x8_t)vdup_lane_s32(v27, 1), (int8x8_t)v27).u32[0];
          unint64_t v33 = (v32 | v29 | v30 | ((unint64_t)(v32 | v29 | v30) << 24)) & 0xFF00FF00FF00FFLL;
          uint64_t v34 = v15;
          do
          {
            if (Width)
            {
              for (uint64_t i = 0; i != Width; ++i)
              {
                uint64_t v36 = (char *)v34 + 4 * i;
                unint64_t v37 = ((v33 + v33 * v36[3]) >> 8) & 0xFF00FF00FF00FFLL;
                *(_DWORD *)uint64_t v36 = (v37 >> 24) | v37;
              }
            }
            ++v31;
            uint64_t v34 = (float16x4_t *)((char *)v34 + v14);
          }
          while (v31 != Height);
        }
      }
      else if (Height)
      {
        uint64_t v53 = 0;
        int v54 = v29 + 1;
        int v55 = (v30 >> 8) + 0x10000;
        int32x2_t v56 = (int32x2_t)vsra_n_u32((uint32x2_t)0x100000100, (uint32x2_t)v27, 8uLL);
        long long v57 = v15;
        do
        {
          if (Width)
          {
            for (uint64_t j = 0; j != Width; ++j)
            {
              unsigned int v59 = v57->u32[j];
              int8x8_t v60 = vand_s8((int8x8_t)vmul_s32(v56, (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v59), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (int8x8_t)0x1FF0001FF0000);
              v57->i32[j] = (v55 * HIBYTE(v59)) & 0xFF000000 | ((v59 * v54) >> 8) | v60.i32[0] | v60.i32[1];
            }
          }
          ++v53;
          long long v57 = (float16x4_t *)((char *)v57 + v14);
        }
        while (v53 != Height);
      }
    }
    else if (v84)
    {
      int8x16_t v38 = (int8x16_t)vdupq_n_s32(0x477FFF00u);
      v39.i64[0] = 0x3F0000003F000000;
      v39.i64[1] = 0x3F0000003F000000;
      int8x16_t v40 = (int8x16_t)vmlaq_f32(v39, (float32x4_t)v38, v86);
      float32x4_t v41 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v40, (float32x4_t)v38), v38, v40);
      int16x4_t v42 = vmovn_s32(vclezq_f32(v41));
      if (v42.i8[0]) {
        unint64_t v43 = 0;
      }
      else {
        unint64_t v43 = (unint64_t)v41.f32[0];
      }
      if (v42.i8[2]) {
        unint64_t v44 = 0;
      }
      else {
        unint64_t v44 = (unint64_t)v41.f32[1];
      }
      if (v42.i8[4]) {
        unint64_t v45 = 0;
      }
      else {
        unint64_t v45 = (unint64_t)v41.f32[2];
      }
      unint64_t v46 = (unint64_t)v41.f32[3];
      if (v42.i8[6]) {
        unint64_t v46 = 0;
      }
      if (a3)
      {
        if (Height)
        {
          uint64_t v47 = 0;
          unint64_t v48 = v46 << 32;
          unint64_t v49 = v45 << 16;
          float64x2_t v50 = v15;
          do
          {
            if (Width)
            {
              for (uint64_t k = 0; k != Width; ++k)
              {
                uint64_t v52 = (char *)&v50[k];
                *(void *)uint64_t v52 = (v48 * (*((unsigned __int16 *)v52 + 3) + 1)) & 0xFFFF000000000000 | (v49 * (*((unsigned __int16 *)v52 + 3) + 1)) & 0xFFFFFFFF00000000 | ((*((unsigned __int16 *)v52 + 3) + 1) * v44) & 0xFFFFFFFFFFFF0000 | (((*((unsigned __int16 *)v52 + 3) + 1) * v43) >> 16);
              }
            }
            ++v47;
            float64x2_t v50 = (float16x4_t *)((char *)v50 + v14);
          }
          while (v47 != Height);
        }
      }
      else if (Height)
      {
        uint64_t v71 = 0;
        unint64_t v72 = (v44 << 16) | (v45 << 32) | (v46 << 48) | v43;
        unint64_t v73 = v72 >> 16;
        int v74 = (unsigned __int16)v43;
        unsigned int v75 = WORD1(v72) + 1;
        unsigned int v76 = v74 + 1;
        uint64_t v77 = (v73 & 0xFFFF00000000) + 0x100000000;
        uint64_t v78 = (v73 & 0xFFFF0000) + 0x10000;
        double v79 = v15;
        do
        {
          if (Width)
          {
            for (uint64_t m = 0; m != Width; ++m)
              v79[m] = (float16x4_t)((v77 * HIWORD(*(void *)&v79[m])) & 0xFFFF000000000000 | (((unsigned __int16)*(void *)&v79[m]
                                                                                                 * (unint64_t)v76) >> 16) | (v78 * (unsigned __int16)WORD2(*(void *)&v79[m])) & 0x1FFFF00000000 | (WORD1(*(void *)&v79[m]) * (unint64_t)v75) & 0x1FFFF0000);
          }
          ++v71;
          double v79 = (float16x4_t *)((char *)v79 + v14);
        }
        while (v71 != Height);
      }
    }
    else if ((BitmapInfo & 0x100) != 0)
    {
      if (a3)
      {
        if (Height)
        {
          uint64_t v61 = 0;
          long long v62 = v15;
          do
          {
            size_t v63 = Width;
            for (n = v62; v63; --v63)
            {
              _H1 = n->i16[3];
              __asm { FCVT            S1, H1 }
              *n++ = vcvt_f16_f32(vmulq_n_f32(v21, _S1));
            }
            ++v61;
            long long v62 = (float16x4_t *)((char *)v62 + v14);
          }
          while (v61 != Height);
        }
      }
      else if (Height)
      {
        uint64_t v81 = 0;
        v82 = v15;
        do
        {
          if (Width)
          {
            for (iuint64_t i = 0; ii != Width; ++ii)
              v82[ii] = vcvt_f16_f32(vmulq_f32(v21, vcvtq_f32_f16(v82[ii])));
          }
          ++v81;
          v82 = (float16x4_t *)((char *)v82 + v14);
        }
        while (v81 != Height);
      }
    }
  }
  CGImageRef Image = CGBitmapContextCreateImage(v17);
  CAReleaseCachedCGContext(v17);
  free(v15);
  return Image;
}

void sub_1848F5764(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void *hitTestSublayers(void *a1, double *a2, uint64_t *a3)
{
  if (a3)
  {
    int v5 = a3 + 1;
    uint64_t v6 = a3[2];
    if (v6 == 1)
    {
      if (!a3[3])
      {
LABEL_7:
        while (1)
        {
          uint64_t v7 = (void *)*v5;
          if ((*(_DWORD *)(*(void *)(*v5 + 16) + 4) & 0x10000) != 0) {
            break;
          }
          uint64_t v8 = objc_msgSend(v7, "hitTest:", *a2, a2[1]);
          if (v8)
          {
            uint64_t v9 = v8;
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            uint64_t v11 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
            void *v11 = v9;
            v11[1] = a1;
LABEL_11:
            a1 = v11;
          }
          ++v5;
          if (!--v6) {
            return a1;
          }
        }
        uint64_t v11 = (void *)hitTestSublayers(a1, a2, [v7 sublayers]);
        goto LABEL_11;
      }
LABEL_6:
      int v5 = (uint64_t *)*v5;
      goto LABEL_7;
    }
    if (v6) {
      goto LABEL_6;
    }
  }
  return a1;
}

float64_t computeZ(CALayer *a1, CALayer *a2, CA::Transaction *a3, long long *a4, double a5, double a6, double a7)
{
  uint64_t v8 = 0;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v9 = a1;
    if (a2 != a1)
    {
      do
      {
        MEMORY[0x1F4188790](a1);
        uint64_t v8 = &v29 - 1;
        *((void *)&v29 - 2) = v11;
        *((void *)&v29 - 1) = v12;
        a1 = CA::Layer::superlayer(*(CA::Layer **)(v11 + 16), a3);
        if (a1) {
          _ZF = a1 == v9;
        }
        else {
          _ZF = 1;
        }
      }
      while (!_ZF);
    }
  }
  long long v44 = 0u;
  float64x2_t v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  float64x2_t v41 = 0u;
  float64x2_t v38 = 0u;
  float64x2_t v39 = 0u;
  uint64_t v14 = *(void *)v8;
  CA::Layer::get_frame_transform(*(void *)(*(void *)v8 + 16), &v38, 0, 0, 0.0, a6, a7);
  for (uint64_t i = (uint64_t *)*((void *)v8 + 1); i; uint64_t i = (uint64_t *)i[1])
  {
    if ((*(_DWORD *)(*(void *)(v14 + 16) + 4) & 0x10000) == 0) {
      break;
    }
    uint64_t v14 = *i;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    float64x2_t v30 = 0u;
    long long v31 = 0u;
    CA::Layer::get_frame_transform(*(void *)(v14 + 16), &v30, 0, 0, 0.0, v16, v17);
    CA::Mat4Impl::mat4_concat(&v38, v30.f64, v38.f64, v19);
  }
  BOOL is_affine = CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)&v38, v15);
  float64_t result = 0.0;
  if (!is_affine)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    float64x2_t v30 = 0u;
    long long v31 = 0u;
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v30, (CA::Mat4Impl *)&v38, v21);
    long long v29 = *a4;
    CA::Mat4Impl::mat4_unapply_inverse_to_point2(&v30, (double *)&v29, v23);
    _Q4 = vmlaq_n_f64(vmlaq_n_f64(v45, v39, *(double *)&v29), v41, *((double *)&v29 + 1));
    _D1 = 0x7FF0000000000000;
    float64_t result = _Q4.f64[0] / _Q4.f64[1];
    __asm { FMLA            D4, D1, V4.D[1] }
    if (_Q4.f64[0] <= 0.0) {
      return -INFINITY;
    }
  }
  return result;
}

void sub_1848F5E28(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848F69CC(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t add_animation(const void *a1, const void *a2, void *a3)
{
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    return [a3 addAnimation:a2 forKey:a1];
  }
  return result;
}

uint64_t appendLayerDescription(CALayer *a1, NSMutableString *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  [(NSMutableString *)a2 appendFormat:@"%*s%@\n", (3 * a3), " ", [(CALayer *)a1 debugDescription]];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v6 = [(CALayer *)a1 sublayers];
  uint64_t result = [(NSArray *)v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)v14;
    int v10 = a3 + 1;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        appendLayerDescription(*(CALayer **)(*((void *)&v13 + 1) + 8 * v11++), a2, v10);
      }
      while (v8 != v11);
      uint64_t result = [(NSArray *)v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
      uint64_t v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_1848F6CC4(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848F6DFC(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848F6F04(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848F7288(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1848F7324(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

IMP cons_CALayer_kCAValueCornerRadii(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFTypeID v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e67__CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16__0_8l;
    int v4 = ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke;
  }
  else
  {
    CFTypeID v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e70_v80__0_8_CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16l;
    int v4 = ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

void ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x19, (id *)a3);
}

void ___ZL32cons_CALayer_kCAValueCornerRadiijb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  long long v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  long long v5 = a3[3];
  v6[2] = a3[2];
  double v6[3] = v5;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x19, (double *)v6);
}

IMP cons_CALayer_kCAValuePoint3D(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFTypeID v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e22__CAPoint3D_ddd_16__0_8l;
    long long v4 = ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke;
  }
  else
  {
    CFTypeID v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e25_v40__0_8_CAPoint3D_ddd_16l;
    long long v4 = ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[3] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  memset(v4, 0, 24);
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x18, v4);
  return *(double *)v4;
}

void ___ZL28cons_CALayer_kCAValuePoint3Djb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  double v6[3] = *(double *)MEMORY[0x1E4F143B8];
  long long v5 = (const void *)*(unsigned int *)(a1 + 32);
  v6[0] = a3;
  v6[1] = a4;
  v6[2] = a5;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v5, (const CGAffineTransform *)0x18, v6);
}

IMP cons_CALayer_kCAValueAffineTransform(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e33__CGAffineTransform_dddddd_16__0_8l;
    long long v4 = ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e36_v64__0_8_CGAffineTransform_dddddd_16l;
    long long v4 = ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

void ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x17, (id *)a3);
}

void ___ZL36cons_CALayer_kCAValueAffineTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  long long v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  v5[2] = a3[2];
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x17, (double *)v5);
}

IMP cons_CALayer_kCAValueTransform(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e39__CATransform3D_dddddddddddddddd_16__0_8l;
    long long v4 = ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e43_v144__0_8_CATransform3D_dddddddddddddddd_16l;
    long long v4 = ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

void ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x16, (id *)a3);
}

void ___ZL30cons_CALayer_kCAValueTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  long long v4 = a3[5];
  v8[4] = a3[4];
  v8[5] = v4;
  long long v5 = a3[7];
  v8[6] = a3[6];
  v8[7] = v5;
  long long v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  long long v7 = a3[3];
  void v8[2] = a3[2];
  v8[3] = v7;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x16, (double *)v8);
}

IMP cons_CALayer_kCAValueRect(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e39__CGRect__CGPoint_dd__CGSize_dd__16__0_8l;
    long long v4 = ___ZL25cons_CALayer_kCAValueRectjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e42_v48__0_8_CGRect__CGPoint_dd__CGSize_dd__16l;
    long long v4 = ___ZL25cons_CALayer_kCAValueRectjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL25cons_CALayer_kCAValueRectjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  memset(v4, 0, sizeof(v4));
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x15, (id *)v4);
  return *(double *)v4;
}

void ___ZL25cons_CALayer_kCAValueRectjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  v7[4] = *(double *)MEMORY[0x1E4F143B8];
  long long v6 = (const void *)*(unsigned int *)(a1 + 32);
  v7[0] = a3;
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v6, (const CGAffineTransform *)0x15, v7);
}

IMP cons_CALayer_kCAValueSize(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e18__CGSize_dd_16__0_8l;
    long long v4 = ___ZL25cons_CALayer_kCAValueSizejb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e21_v32__0_8_CGSize_dd_16l;
    long long v4 = ___ZL25cons_CALayer_kCAValueSizejb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL25cons_CALayer_kCAValueSizejb_block_invoke(uint64_t a1, uint64_t a2)
{
  _OWORD v4[2] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  v4[1] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x14, v4);
  return *(double *)v4;
}

void ___ZL25cons_CALayer_kCAValueSizejb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v5[2] = *(double *)MEMORY[0x1E4F143B8];
  long long v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  v5[1] = a4;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x14, v5);
}

IMP cons_CALayer_kCAValuePoint(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e19__CGPoint_dd_16__0_8l;
    long long v4 = ___ZL26cons_CALayer_kCAValuePointjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e22_v32__0_8_CGPoint_dd_16l;
    long long v4 = ___ZL26cons_CALayer_kCAValuePointjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL26cons_CALayer_kCAValuePointjb_block_invoke(uint64_t a1, uint64_t a2)
{
  _OWORD v4[2] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  v4[1] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x13, v4);
  return *(double *)v4;
}

void ___ZL26cons_CALayer_kCAValuePointjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v5[2] = *(double *)MEMORY[0x1E4F143B8];
  long long v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  v5[1] = a4;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v4, (const CGAffineTransform *)0x13, v5);
}

IMP cons_CALayer_kCAValueDouble(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_d16__0_8l;
    long long v4 = ___ZL27cons_CALayer_kCAValueDoublejb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v24__0_8d16l;
    long long v4 = ___ZL27cons_CALayer_kCAValueDoublejb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

IMP cons_CALayer_kCAValueFloat(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_f16__0_8l;
    long long v4 = ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v20__0_8f16l;
    long long v4 = ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

float ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  float v4 = 0.0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x11, (id *)&v4);
  return v4;
}

void ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke_2(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  float v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x11, (double *)&v4);
}

IMP cons_CALayer_kCAValueUnsignedLongLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_Q16__0_8l;
    float v4 = ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v24__0_8Q16l;
    float v4 = ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

id ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x10, v4);
  return v4[0];
}

void ___ZL37cons_CALayer_kCAValueUnsignedLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(double *)MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(void *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0x10, v4);
}

IMP cons_CALayer_kCAValueLongLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_q16__0_8l;
    float v4 = ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v24__0_8q16l;
    float v4 = ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

id ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xF, v4);
  return v4[0];
}

void ___ZL29cons_CALayer_kCAValueLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(double *)MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(void *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xF, v4);
}

IMP cons_CALayer_kCAValueUnsignedLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_Q16__0_8l;
    float v4 = ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v24__0_8Q16l;
    float v4 = ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

id ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xE, v4);
  return v4[0];
}

void ___ZL33cons_CALayer_kCAValueUnsignedLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(double *)MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(void *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xE, v4);
}

IMP cons_CALayer_kCAValueLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_q16__0_8l;
    float v4 = ___ZL25cons_CALayer_kCAValueLongjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v24__0_8q16l;
    float v4 = ___ZL25cons_CALayer_kCAValueLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

id ___ZL25cons_CALayer_kCAValueLongjb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xD, v4);
  return v4[0];
}

void ___ZL25cons_CALayer_kCAValueLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(double *)MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(void *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xD, v4);
}

IMP cons_CALayer_kCAValueUnsignedInt(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_I16__0_8l;
    float v4 = ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v20__0_8I16l;
    float v4 = ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned int v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xC, (id *)&v4);
  return v4;
}

void ___ZL32cons_CALayer_kCAValueUnsignedIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  int v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xC, (double *)&v4);
}

IMP cons_CALayer_kCAValueInt(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_i16__0_8l;
    int v4 = ___ZL24cons_CALayer_kCAValueIntjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v20__0_8i16l;
    int v4 = ___ZL24cons_CALayer_kCAValueIntjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL24cons_CALayer_kCAValueIntjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned int v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xB, (id *)&v4);
  return v4;
}

void ___ZL24cons_CALayer_kCAValueIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  int v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xB, (double *)&v4);
}

IMP cons_CALayer_kCAValueUnsignedShort(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_S16__0_8l;
    int v4 = ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v20__0_8S16l;
    int v4 = ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned __int16 v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0xA, (id *)&v4);
  return v4;
}

void ___ZL34cons_CALayer_kCAValueUnsignedShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  __int16 v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)0xA, (double *)&v4);
}

IMP cons_CALayer_kCAValueShort(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_s16__0_8l;
    __int16 v4 = ___ZL26cons_CALayer_kCAValueShortjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v20__0_8s16l;
    __int16 v4 = ___ZL26cons_CALayer_kCAValueShortjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL26cons_CALayer_kCAValueShortjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  __int16 v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)9, (id *)&v4);
  return v4;
}

void ___ZL26cons_CALayer_kCAValueShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  __int16 v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)9, (double *)&v4);
}

IMP cons_CALayer_kCAValueUnsignedChar(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_C16__0_8l;
    __int16 v4 = ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v20__0_8C16l;
    __int16 v4 = ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned __int8 v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)8, (id *)&v4);
  return v4;
}

void ___ZL33cons_CALayer_kCAValueUnsignedCharjb_block_invoke_2(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  char v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)8, (double *)&v4);
}

IMP cons_CALayer_kCAValueChar(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e8_c16__0_8l;
    char v4 = ___ZL25cons_CALayer_kCAValueCharjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e11_v20__0_8c16l;
    char v4 = ___ZL25cons_CALayer_kCAValueCharjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL25cons_CALayer_kCAValueCharjb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  char v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)7, (id *)&v4);
  return v4;
}

void ___ZL25cons_CALayer_kCAValueCharjb_block_invoke_2(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  char v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)7, (double *)&v4);
}

uint64_t ___ZL25cons_CALayer_kCAValueBooljb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned __int8 v4 = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)6, (id *)&v4);
  return v4;
}

void ___ZL25cons_CALayer_kCAValueBooljb_block_invoke_2(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  char v4 = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)6, (double *)&v4);
}

IMP cons_CALayer_kCAValueBlock(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    char v4 = ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    char v4 = ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

id ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)5, v4);
  return v4[0];
}

void ___ZL26cons_CALayer_kCAValueBlockjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(double *)MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(void *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)5, v4);
}

IMP cons_CALayer_kCAValueWeakPointer(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    char v4 = ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    char v4 = ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

id ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)4, v4);
  return v4[0];
}

void ___ZL32cons_CALayer_kCAValueWeakPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(double *)MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(void *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)4, v4);
}

IMP cons_CALayer_kCAValueRetainedPointer(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    char v4 = ___ZL36cons_CALayer_kCAValueRetainedPointerjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    char v4 = ___ZL36cons_CALayer_kCAValueRetainedPointerjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

IMP cons_CALayer_kCAValueAssignedPointer(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    char v4 = ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke;
  }
  else
  {
    unsigned int v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    atomic_uint v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    char v4 = ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

id ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke(uint64_t a1, uint64_t a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)1, v4);
  return v4[0];
}

void ___ZL36cons_CALayer_kCAValueAssignedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(double *)MEMORY[0x1E4F143B8];
  atomic_uint v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(void *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)1, v4);
}

void CALayerFrameAffineTransform(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  CA::Layer::get_frame_transform(*(CA::Layer **)(a1 + 16), (CGAffineTransform *)a2, 1);
}

double CALayerFrameTransform@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  float64x2_t v12 = 0u;
  long long v13 = 0u;
  CA::Layer::get_frame_transform(*(void *)(a1 + 16), &v12, 0, 0, 0.0, a3, a4);
  long long v5 = v13;
  long long v6 = v14;
  long long v7 = v15;
  *a2 = v12;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  double result = *(double *)&v16;
  long long v9 = v17;
  long long v10 = v18;
  long long v11 = v19;
  a2[4] = v16;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  return result;
}

void *CA::Layer::collect_all_layers(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a1[2];
  if (!v5 || !CALayerRetain(v5)) {
    return (void *)a2;
  }
  long long v7 = (void *)a1[3];
  if (v7)
  {
    uint64_t v8 = v7 + 1;
    uint64_t v9 = v7[2];
    if (v9 == 1)
    {
      if (!v7[3])
      {
        do
        {
LABEL_9:
          uint64_t v10 = *v8++;
          a2 = CA::Layer::collect_all_layers(*(void *)(v10 + 16), a2, a3);
          --v9;
        }
        while (v9);
        goto LABEL_10;
      }
LABEL_8:
      uint64_t v8 = (uint64_t *)*v8;
      goto LABEL_9;
    }
    if (v9) {
      goto LABEL_8;
    }
  }
LABEL_10:
  uint64_t v11 = a1[4];
  if (v11) {
    a2 = CA::Layer::collect_all_layers(*(void *)(v11 + 16), a2, a3);
  }
  unint64_t v12 = a3[2];
  BOOL v13 = v12 >= 0x10;
  unint64_t v14 = v12 - 16;
  if (v13)
  {
    long long v15 = (void *)a3[1];
    a3[1] = (uint64_t)(v15 + 2);
    a3[2] = v14;
  }
  else
  {
    long long v15 = (void *)x_heap_malloc_small_(a3, 0x10uLL);
  }
  *long long v15 = a1;
  v15[1] = a2;
  return v15;
}

void CA::Layer::perform_selector(CA::Layer *this, objc_selector *a2, objc_object *a3)
{
  MEMORY[0x1F4188790](this);
  uint64_t v4 = v3;
  long long v6 = v5;
  uint64_t v8 = v7;
  v16[508] = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  v14[1] = (void **)v16;
  long long v15 = xmmword_1849983E0;
  uint64_t v9 = CA::Transaction::ensure_compat(v7);
  int v10 = *((_DWORD *)v9 + 25);
  *((_DWORD *)v9 + 25) = v10 + 1;
  if (!v10) {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  }
  uint64_t v11 = CA::Layer::collect_all_layers(v8, 0, (uint64_t *)v14);
  CA::Transaction::unlock(v9);
  for (; v11; uint64_t v11 = (void *)v11[1])
  {
    uint64_t v12 = *v11;
    objc_msgSend(*(id *)(*v11 + 16), v6, v4);
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13) {
      CALayerRelease(v13);
    }
  }
  x_heap_free(v14);
}

uint64_t map_fun(uint64_t a1, _OWORD *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v2 = a2[1];
  long long v3 = a2[2];
  long long v4 = a2[3];
  v9[0] = *a2;
  v9[1] = v2;
  _DWORD v9[2] = v3;
  v9[3] = v4;
  long long v5 = a2[5];
  long long v6 = a2[6];
  long long v7 = a2[7];
  v9[4] = a2[4];
  v9[5] = v5;
  v9[6] = v6;
  v9[7] = v7;
  return (*(uint64_t (**)(void, _OWORD *))(a1 + 8))(*(void *)a1, v9);
}

void run_animation_callbacks_compat(double a1, void *a2)
{
  long long v3 = (void *)MEMORY[0x185324A30](a1);
  run_animation_callbacks(a2);
}

void ___Z10init_iomfbv_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  BOOL v0 = dlopen("/System/Library/PrivateFrameworks/IOMobileFramebuffer.framework/IOMobileFramebuffer", 2);
  init_iomfb(void)::iomfb_handle = (uint64_t)v0;
  if (v0)
  {
    iomfb_swap_set_aml_strength_f = (uint64_t (*)(void, float))dlsym(v0, "IOMobileFramebufferSetAmmoliteStrength");
    iomfb_swap_set_indicator_brightness_f = dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferSwapSetIndicatorBrightness");
    iomfb_swap_set_tonemap_config_f = dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferSwapSetToneMapConfig");
    iomfb_announce_next_swap_timestamp_f = dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferAnnounceNextSwapTimestamp");
    iomfb_enable_need_swap_notifications_f = (uint64_t)dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferEnableNeedSwapNotifications");
    iomfb_disable_need_swap_notifications_f = (uint64_t)dlsym((void *)init_iomfb(void)::iomfb_handle, "IOMobileFramebufferDisableNeedSwapNotifications");
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    CFTypeID v1 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v2 = 0;
      _os_log_impl(&dword_184668000, v1, OS_LOG_TYPE_ERROR, "Unable to load IOMobileFramebuffer", v2, 2u);
    }
  }
}

uint64_t iomfb_swap_set_indicator_brightness(uint64_t a1, uint64_t a2, __n128 a3)
{
  float v3 = a3.n128_f32[0];
  if (init_iomfb(void)::once != -1) {
    dispatch_once(&init_iomfb(void)::once, &__block_literal_global_13500);
  }
  long long v6 = (uint64_t (*)(uint64_t, uint64_t, __n128))iomfb_swap_set_indicator_brightness_f;
  if (!iomfb_swap_set_indicator_brightness_f) {
    return 3758097084;
  }

  a3.n128_f64[0] = v3;
  return v6(a1, a2, a3);
}

void iomfb_swap_set_tonemap_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (init_iomfb(void)::once != -1) {
    dispatch_once(&init_iomfb(void)::once, &__block_literal_global_13500);
  }
  long long v6 = (void (*)(uint64_t, uint64_t, uint64_t))iomfb_swap_set_tonemap_config_f;
  if (iomfb_swap_set_tonemap_config_f)
  {
    v6(a1, a2, a3);
  }
}

uint64_t CA::IOMobileFramebuffer::swap_set_icc_matrix(uint64_t a1, unsigned int a2, int a3, int a4, float *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (BYTE8(xmmword_1EB2ACC30))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v10 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 > 7) {
          uint64_t v11 = "UNKNOWN";
        }
        else {
          uint64_t v11 = off_1E527DC80[a2];
        }
        double v12 = a5[3];
        double v13 = a5[4];
        double v14 = a5[5];
        double v15 = a5[6];
        double v16 = a5[7];
        double v17 = a5[8];
        double v18 = a5[9];
        double v19 = a5[10];
        double v20 = a5[11];
        *(_DWORD *)long long buf = 67111938;
        int v22 = a3;
        __int16 v23 = 2080;
        float32x2_t v24 = v11;
        __int16 v25 = 1024;
        int v26 = a4;
        __int16 v27 = 2048;
        double v28 = v12;
        __int16 v29 = 2048;
        double v30 = v13;
        __int16 v31 = 2048;
        double v32 = v14;
        __int16 v33 = 2048;
        double v34 = v15;
        __int16 v35 = 2048;
        double v36 = v16;
        __int16 v37 = 2048;
        double v38 = v17;
        __int16 v39 = 2048;
        double v40 = v18;
        __int16 v41 = 2048;
        double v42 = v19;
        __int16 v43 = 2048;
        double v44 = v20;
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "Display %u swap_set_icc_matrix %s layer: %u\n    {{%g, %g, %g},\n     {%g, %g, %g},\n     {%g, %g, %g}}\n", buf, 0x72u);
      }
    }
  }
  return IOMobileFramebufferSwapSetICCMatrix();
}

uint64_t CA::IOMobileFramebuffer::swap_set_icc_curve(int a1, unsigned int a2, int a3, int a4, int a5, unsigned int *a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (BYTE8(xmmword_1EB2ACC30))
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    *(_OWORD *)__str = 0u;
    long long v29 = 0u;
    CA::iomfb_icc_curve_params_to_string((uint64_t)a6, __str, 0.0);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v12 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 > 0x11) {
          double v13 = "UNKNOWN";
        }
        else {
          double v13 = off_1E527DCC0[a2];
        }
        uint64_t v14 = *a6;
        if (v14 > 0x11) {
          double v15 = "UNKNOWN";
        }
        else {
          double v15 = off_1E527DD50[v14];
        }
        *(_DWORD *)long long buf = 67110402;
        int v17 = a3;
        __int16 v18 = 2080;
        double v19 = v13;
        __int16 v20 = 1024;
        int v21 = a4;
        __int16 v22 = 1024;
        int v23 = a5;
        __int16 v24 = 2080;
        __int16 v25 = v15;
        __int16 v26 = 2080;
        __int16 v27 = __str;
        _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "Display %u swap_set_icc_curve %s layer: %u mask: %x type: %s %s\n", buf, 0x32u);
      }
    }
  }
  return IOMobileFramebufferSwapSetICCCurve();
}

double CA::iomfb_icc_curve_params_to_string(uint64_t a1, char *__str, double result)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      strcpy(__str, "Y = X");
      return result;
    case 1:
      snprintf(__str, 0x80uLL, "Y = X^%f");
      return result;
    case 2:
      snprintf(__str, 0x80uLL, "Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g]");
      return result;
    case 3:
      snprintf(__str, 0x80uLL, "Y = (%g*X+%g)^%g + %f [X >= %g],  Y = %g [X < %g]");
      return result;
    case 4:
      double v3 = *(float *)(a1 + 12);
      double v4 = *(float *)(a1 + 16);
      double v5 = *(float *)(a1 + 8);
      double v6 = *(float *)(a1 + 24);
      double v11 = *(float *)(a1 + 28);
      double v12 = *(float *)(a1 + 32);
      double v9 = *(float *)(a1 + 20);
      double v10 = v6;
      long long v7 = "Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g], Unused Params - e: %g, f: %g";
      goto LABEL_9;
    case 5:
      double v3 = *(float *)(a1 + 12);
      double v4 = *(float *)(a1 + 16);
      double v5 = *(float *)(a1 + 8);
      double v6 = *(float *)(a1 + 28);
      double v11 = *(float *)(a1 + 32);
      double v12 = *(float *)(a1 + 24);
      double v9 = v12;
      double v10 = *(float *)(a1 + 20);
      long long v7 = "Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g]";
LABEL_9:
      snprintf(__str, 0x80uLL, v7, *(void *)&v3, *(void *)&v4, *(void *)&v5, *(void *)&v6, *(void *)&v9, *(void *)&v10, *(void *)&v11, *(void *)&v12);
      return result;
    case 6:
      *((_DWORD *)__str + 2) = 4609093;
      uint64_t v8 = "Y = PQ OETF";
      goto LABEL_12;
    case 7:
      *((_DWORD *)__str + 2) = 4609103;
      uint64_t v8 = "Y = PQ EOTF";
LABEL_12:
      *(void *)__str = *(void *)v8;
      break;
    case 8:
      snprintf(__str, 0x80uLL, "Table: entries: %u, xMax: %f");
      break;
    case 9:
      if (*(_DWORD *)(a1 + 8) >= 2u && *(void *)(a1 + 16) && *(void *)(a1 + 32))
      {
        snprintf(__str, 0x80uLL, "Table: entries: %u, xEntries [%f ... %f], xMax: %f, yEntries [%f ... %f] yMax: %f");
      }
      else
      {
        strcpy(__str, "Unexpected table count or missing samples");
        double result = *(double *)"missing samples";
      }
      break;
    case 0xA:
      strcpy(__str, "Y = HLG Inverse OETF (Fixed)");
      double result = *(double *)"se OETF (Fixed)";
      break;
    case 0xB:
      double result = *(double *)"Y = PQ EOTF (Fixed)";
      strcpy(__str, "Y = PQ EOTF (Fixed)");
      break;
    case 0xC:
      snprintf(__str, 0x80uLL, "%d segments");
      break;
    case 0xD:
      snprintf(__str, 0x80uLL, "Offset: %f, Slope: %f, MaxNits: %d");
      break;
    case 0xE:
      snprintf(__str, 0x80uLL, "c1: %f, c2: %f, c3: %f, m: %f, n: %f");
      break;
    case 0xF:
      snprintf(__str, 0x80uLL, "a: %f, b: %f, c0: %f, c1: %f, p: %f");
      break;
    case 0x10:
      snprintf(__str, 0x80uLL, "smaxnits: %d");
      break;
    case 0x11:
      snprintf(__str, 0x80uLL, "alpha: %f, alphaPrime: %f, rangeMax: %f, gain %f");
      break;
    default:
      snprintf(__str, 0x80uLL, "Curve Type %d unrecognized");
      break;
  }
  return result;
}

uint64_t CA::Render::Encoder::retime(CA::Render::Encoder *this, double a2)
{
  return 0;
}

const char *___ZN2CA6RenderL29should_abort_on_send_failuresEv_block_invoke()
{
  double result = getenv("CA_IGNORE_MACH_SEND_ERRORS");
  if (result)
  {
    double result = (const char *)atoi(result);
    if (result) {
      CA::Render::should_abort_on_send_failures(void)::ignore_mach_send_errors = 1;
    }
  }
  return result;
}

uint64_t CA::Render::Encoder::retain_object(uint64_t this, const CA::Render::Object *a2)
{
  if (a2)
  {
    long long v2 = a2;
    uint64_t v3 = this;
    this = x_heap_malloc_small_(*(uint64_t **)(this + 8), 0x10uLL);
    double v4 = (atomic_uint *)((char *)v2 + 8);
    if (!atomic_fetch_add((atomic_uint *volatile)v2 + 2, 1u))
    {
      long long v2 = 0;
      atomic_fetch_add(v4, 0xFFFFFFFF);
    }
    uint64_t v5 = *(void *)(v3 + 112);
    *(void *)this = v2;
    *(void *)(this + 8) = v5;
    *(void *)(v3 + 112) = this;
  }
  return this;
}

uint64_t CA::Render::encode_dictionary_item(CA::Render *this, const void *a2, CA::Render::Encoder *a3, void *a4)
{
  CA::Render::Encoder::encode_cfobject(a3, this);

  return CA::Render::Encoder::encode_cfobject(a3, a2);
}

void CA::Render::Decoder::set_fatal_error(CA::Render::Decoder *this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x10000) != 0) {
    return;
  }
  *((_DWORD *)this + 4) = v2 & 0xFF00FFFF | 0x10000;
  double v12 = 0;
  if (a2) {
    vasprintf(&v12, a2, va);
  }
  uint64_t v4 = *((void *)this + 9);
  if (v4 && (*(_WORD *)(v4 + 552) |= 0x800u, (uint64_t v5 = *((void *)this + 9)) != 0))
  {
    unsigned int v6 = atomic_load((unsigned int *)(v5 + 228));
    if (!v6)
    {
      if (*(_DWORD *)(v5 + 252)) {
        pid_t v7 = 0;
      }
      else {
        pid_t v7 = getpid();
      }
      unsigned int v9 = 0;
      atomic_compare_exchange_strong((atomic_uint *volatile)(v5 + 228), &v9, v7);
      if (v9) {
        unsigned int v6 = v9;
      }
      else {
        unsigned int v6 = v7;
      }
    }
    double v10 = (CA::Render::Context *)*((void *)this + 9);
    if (v10)
    {
      uint64_t v8 = (const char *)(CA::Render::Context::process_path(v10) + 7);
      goto LABEL_17;
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v8 = "";
LABEL_17:
  if (CADeviceHasInternalBuild::once[0] != -1) {
    dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
  }
  if (CADeviceHasInternalBuild::internal)
  {
    x_log_crash("%s (%u) : %s", v8, v6, v12);
    abort();
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    double v11 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v14 = v8;
      __int16 v15 = 1024;
      unsigned int v16 = v6;
      __int16 v17 = 2080;
      __int16 v18 = v12;
      _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_ERROR, "%s (%u) : %s", buf, 0x1Cu);
    }
  }
  if (v12) {
    free(v12);
  }
}

CA::Render::CloningTerminatorLayer *CA::Render::CloningTerminatorLayer::CloningTerminatorLayer(CA::Render::CloningTerminatorLayer *this, CA::Render::Decoder *a2)
{
  *(void *)this = &unk_1ED02F670;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 8;
  ++dword_1EB2ADDE8;
  *(void *)this = &unk_1ED02EEB0;
  return this;
}

CFTypeID ___ZN2CA6Render7Decoder17decode_colorspaceEv_block_invoke()
{
  CA::Render::Decoder::decode_colorspace(void)::types[0] = CFDataGetTypeID();
  qword_1E8F85E60 = CFDictionaryGetTypeID();
  CFTypeID result = CFStringGetTypeID();
  qword_1E8F85E68 = result;
  return result;
}

CA::Render::Encoder *CA::Render::encode_request_server_glitch(CA::Render::Encoder *this, CA::Render::Encoder *a2, double a3)
{
  uint64_t v4 = this;
  uint64_t v5 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)(v5 + 1) > *((void *)this + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(this, 1);
    uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  }
  *((void *)v4 + 4) = v5 + 1;
  *uint64_t v5 = 36;
  unsigned int v6 = (double *)*((void *)v4 + 4);
  if ((unint64_t)(v6 + 1) > *((void *)v4 + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(v4, 8);
    unsigned int v6 = (double *)*((void *)v4 + 4);
  }
  *unsigned int v6 = a3;
  *((void *)v4 + 4) += 8;
  return this;
}

uint64_t CA::Render::CloningTerminatorLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
}

void CA::Render::CloningTerminatorLayer::show(CA::Render::CloningTerminatorLayer *this, unsigned int a2, char a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  BOOL v4 = x_log_hook_p();
  if (a3)
  {
    if (v4) {
      goto LABEL_3;
    }
    uint64_t v5 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v9 = 0;
    unsigned int v6 = "cloning-terminator-layer";
    pid_t v7 = (uint8_t *)&v9;
LABEL_8:
    _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
    return;
  }
  if (!v4)
  {
    uint64_t v5 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v8 = 0;
    unsigned int v6 = "(cloning-terminator-layer)";
    pid_t v7 = (uint8_t *)&v8;
    goto LABEL_8;
  }
LABEL_3:

  x_log_();
}

void CA::Render::CloningTerminatorLayer::~CloningTerminatorLayer(CA::Render::CloningTerminatorLayer *this, const CA::Render::Object *a2)
{
  --dword_1EB2ADDE8;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  --dword_1EB2ADDE8;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
}

uint64_t draw_conic_gradient(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, CGGradient *a7)
{
  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  unsigned int CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  CACGContextEvaluator::update_with_gradient(Info, a7);
  *((unsigned char *)Info + 78) |= CGGStateGetStyle() != 0;
  uint64_t v16 = *(void *)(CGContextDelegateGetInfo() + 48);
  v17.n128_f64[0] = a1;
  v18.n128_f64[0] = a2;
  v19.n128_f64[0] = a3;

  return MEMORY[0x1F40D9DC0](v16, a5, a6, a7, v17, v18, v19);
}

CGImageRef create_image()
{
  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  uint64_t v1 = CACGContextEvaluator::suggested_format(Info, 0, 0, 0);
  unsigned int v2 = v1;
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)Info;
  if (v1 <= 0x25) {
    uint64_t v3 = dword_184999468[v1];
  }
  size_t v5 = (v4 * v3 + 31) & 0xFFFFFFFFFFFFFFE0;
  unsigned int v6 = *((_DWORD *)Info + 2);
  pid_t v7 = (CGColorSpace *)CA::Render::format_default_colorspace((CA::Render *)v1);
  __int16 v8 = CAGetCachedCGBitmapContext_(0, v4, v6, v2, v5, v7);
  if (v8) {
    __int16 v9 = (CGContext *)*((void *)v8 + 2);
  }
  else {
    __int16 v9 = 0;
  }
  CGDisplayListDrawInContext();
  CGImageRef Image = CGBitmapContextCreateImage(v9);
  CAReleaseCachedCGContext(v9);
  return Image;
}

const char *get_name()
{
  return "CACGContextEvaluator";
}

uint64_t draw_image_from_rect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, CGImage *a12)
{
  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  unsigned int CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  CACGContextEvaluator::update_with_image(Info, a12);
  *((unsigned char *)Info + 78) |= CGGStateGetStyle() != 0;
  uint64_t v26 = *(void *)(CGContextDelegateGetInfo() + 48);
  v27.n128_f64[0] = a1;
  v28.n128_f64[0] = a2;
  v29.n128_f64[0] = a3;
  v30.n128_f64[0] = a4;
  v31.n128_f64[0] = a5;
  v32.n128_f64[0] = a6;
  v33.n128_f64[0] = a7;
  v34.n128_f64[0] = a8;

  return MEMORY[0x1F40D9DE0](v26, a10, a11, a12, v27, v28, v29, v30, v31, v32, v33, v34);
}

uint64_t draw_radial_gradient(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, CGGradient *a10, uint64_t a11)
{
  Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  unsigned int CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  CACGContextEvaluator::update_with_gradient(Info, a10);
  *((unsigned char *)Info + 78) |= CGGStateGetStyle() != 0;
  uint64_t v24 = *(void *)(CGContextDelegateGetInfo() + 48);
  v25.n128_f64[0] = a1;
  v26.n128_f64[0] = a2;
  v27.n128_f64[0] = a3;
  v28.n128_f64[0] = a4;
  v29.n128_f64[0] = a5;
  v30.n128_f64[0] = a6;

  return MEMORY[0x1F40D9E18](v24, a8, a9, a10, a11, v25, v26, v27, v28, v29, v30);
}

uint64_t draw_layer(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Info = CGContextDelegateGetInfo();
  *(unsigned char *)(Info + 72) = 1;
  *(_WORD *)(Info + 79) = 257;
  *(unsigned char *)(Info + 81) = 1;
  *(_DWORD *)(Info + 74) = 16843009;
  *(unsigned char *)(Info + 78) |= CGGStateGetStyle() != 0;
  uint64_t v16 = *(void *)(CGContextDelegateGetInfo() + 48);
  v17.n128_f64[0] = a1;
  v18.n128_f64[0] = a2;
  v19.n128_f64[0] = a3;
  v20.n128_f64[0] = a4;

  return MEMORY[0x1F40D9DF0](v16, a6, a7, a8, v17, v18, v19, v20);
}

uint64_t get_layer(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(CGContextDelegateGetInfo() + 48);
  v16.n128_f64[0] = a1;
  v17.n128_f64[0] = a2;
  v18.n128_f64[0] = a3;
  v19.n128_f64[0] = a4;

  return MEMORY[0x1F40D9E50](v15, a6, a7, a8, v16, v17, v18, v19);
}

uint64_t operation(int a1, int a2, int a3, CFTypeRef cf1)
{
  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1DCC0]))
  {
    uint64_t Info = CGContextDelegateGetInfo();
    CGColorRelease(*(CGColorRef *)(Info + 64));
    *(void *)(Info + 64) = 0;
    *(_WORD *)(Info + 72) = 256;
    *(_WORD *)(Info + 79) = 0;
    *(unsigned char *)(Info + 81) = 0;
    *(_DWORD *)(Info + 74) = 0;
  }
  CGContextDelegateGetInfo();

  return CGContextDelegateOperation();
}

uint64_t draw_images(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CGImage **a5, uint64_t a6, uint64_t a7)
{
  uint64_t Info = (CACGContextEvaluator *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  unsigned int CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  if (a7)
  {
    __n128 v16 = a5;
    uint64_t v17 = a7;
    do
    {
      __n128 v18 = *v16++;
      CACGContextEvaluator::update_with_image(Info, v18);
      --v17;
    }
    while (v17);
  }
  *((unsigned char *)Info + 78) |= CGGStateGetStyle() != 0;
  uint64_t v19 = *(void *)(CGContextDelegateGetInfo() + 48);

  return MEMORY[0x1F40D9DE8](v19, a2, a3, a4, a5, a6, a7);
}

uint64_t draw_display_list(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Info = CGContextDelegateGetInfo();
  *(unsigned char *)(Info + 72) = 1;
  *(_WORD *)(Info + 79) = 257;
  *(unsigned char *)(Info + 81) = 1;
  *(_DWORD *)(Info + 74) = 16843009;
  uint64_t v8 = *(void *)(CGContextDelegateGetInfo() + 48);

  return MEMORY[0x1F40D9DC8](v8, a2, a3, a4);
}

uint64_t draw_shading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Info = (unsigned char *)CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  unsigned int CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color((uint64_t)Info, Color, CompositeOperation);
  Info[72] = 1;
  Info[77] = 1;
  ColorSpace = (CGColorSpace *)CGShadingGetColorSpace();
  CACGContextEvaluator::update_with_color_space((uint64_t)Info, ColorSpace, 1);
  Info[78] |= CGGStateGetStyle() != 0;
  uint64_t v11 = *(void *)(CGContextDelegateGetInfo() + 48);

  return MEMORY[0x1F40D9E28](v11, a2, a3, a4);
}

uint64_t draw_lines(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Info = CGContextDelegateGetInfo();
  CGGStateGetStyle();
  Color = (CGColor *)CGStyleGetColor();
  unsigned int CompositeOperation = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, Color, CompositeOperation);
  StrokeColor = (CGColor *)CGGStateGetStrokeColor();
  unsigned int v13 = CGGStateGetCompositeOperation();
  CACGContextEvaluator::update_with_color(Info, StrokeColor, v13);
  *(unsigned char *)(Info + 78) |= CGGStateGetStyle() != 0;
  uint64_t v14 = *(void *)(CGContextDelegateGetInfo() + 48);

  return MEMORY[0x1F40D9E00](v14, a2, a3, a4, a5);
}

uint64_t get_color_transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(CGContextDelegateGetInfo() + 48);

  return MEMORY[0x1F40D9E40](v5, a2, a3);
}

void CA::CG::FillRoundedRect::draw_shape(CA::CG::FillRoundedRect *this, CA::CG::Renderer *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 25);
  if (v3)
  {
    double v7 = *((double *)this + 14);
    double v6 = *((double *)this + 15);
    double v18 = v7;
    double v19 = v6;
    double v9 = *((double *)this + 16);
    double v8 = *((double *)this + 17);
    double v20 = v9;
    double v21 = v8;
    if (v9 < 0.0)
    {
      double v18 = v9 + v7;
      double v20 = -v9;
    }
    if (v8 < 0.0)
    {
      double v19 = v8 + v6;
      double v21 = -v8;
    }
    BOOL v10 = (v3 & 4) == 0;
    uint64_t v11 = 88;
    if (v10) {
      uint64_t v11 = 32;
    }
    long long v12 = *(_OWORD *)((char *)a2 + v11);
    unsigned int v13 = (char *)a2 + 32;
    if (!v10) {
      unsigned int v13 = (char *)a2 + 88;
    }
    long long v14 = *((_OWORD *)v13 + 1);
    long long v15 = *((_OWORD *)v13 + 2);
    float64_t v16 = *((double *)this + 18);
    float64_t v17 = *((double *)this + 19);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    memset(v22, 0, sizeof(v22));
    uint64_t v26 = 0;
    CA::Transform::set_affine((CA::Transform *)v22, *(double *)&v12, *((double *)&v12 + 1), *(double *)&v14, *((double *)&v14 + 1), *(double *)&v15, *((double *)&v15 + 1));
    *((void *)&v23 + 1) = &v18;
    *(void *)&long long v24 = v22;
    *((void *)&v24 + 1) = 0xFF0020003FLL;
    uint64_t v26 = 0;
    long long v25 = 0uLL;
    CA::OGL::fill_round_rect(*((void *)a2 + 1), (float64x2_t **)&v23 + 1, (double *)0xF, 0, v16, v17);
  }
  else
  {
    CGPathRef v4 = CA::CG::Renderer::retain_simple_path(a2, (const CGRect *)((char *)this + 112), (const CGSize *)this + 9);
    if (v4)
    {
      uint64_t v5 = v4;
      CA::CG::fill_path((uint64_t)a2);
      CGPathRelease(v5);
    }
  }
}

void *CA::CG::FillRoundedRect::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 80))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      Color = (CGColor *)CGStyleGetColor();
      CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
      void *v11 = &unk_1ED028BC0;
      v11[14] = a1;
      atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
      v11[15] = a3;
    }
  }
  else
  {
    BaseCTM = (double *)CGRenderingStateGetBaseCTM();
    double v14 = *BaseCTM;
    double v15 = BaseCTM[1];
    double v16 = BaseCTM[2];
    double v17 = BaseCTM[3];
    double v18 = (malloc_zone_t *)get_malloc_zone();
    double v19 = (char *)malloc_type_zone_malloc(v18, 0x60uLL, 0x8BB15036uLL);
    double v20 = (atomic_uint *)v19;
    if (v19)
    {
      float v21 = v16 * v15 + v17 * v14;
      if (v21 < 0.0) {
        float v21 = -v21;
      }
      double v22 = *(double *)(a3 + 80) * sqrtf(v21);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *(void *)double v19 = &unk_1ED029D48;
      long long v24 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      long long v23 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      *(_OWORD *)(v19 + 24) = *MEMORY[0x1E4F1DAB8];
      *(_OWORD *)(v19 + 40) = v24;
      *(_OWORD *)(v19 + 56) = v23;
      *((_DWORD *)v19 + 18) = 0;
      *((_DWORD *)v19 + 2) = 1;
      *(void *)double v19 = &unk_1ED027AA8;
      *(float *)&double v22 = v22;
      *((_DWORD *)v19 + 19) = LODWORD(v22);
      *((void *)v19 + 10) = 0;
      *((_WORD *)v19 + 44) = 0;
    }
    long long v25 = (malloc_zone_t *)get_malloc_zone();
    uint64_t v26 = malloc_type_zone_malloc(v25, 0xA0uLL, 0x8BB15036uLL);
    uint64_t v11 = v26;
    if (v26) {
      CA::CG::FillRoundedRectShadow::FillRoundedRectShadow(v26, a2, a1, a4, a5, (uint64_t)v20, 0);
    }
    v11[11] = *(void *)(a1 + 88);
    unsigned int add = atomic_fetch_add(v20 + 2, 0xFFFFFFFF);
    if (v20 && add == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
    }
  }
  return v11;
}

{
  malloc_zone_t *malloc_zone;
  void *result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  CFTypeID result = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (result) {
    return (void *)CA::CG::FillRoundedRectShadow::FillRoundedRectShadow(result, a2, a1, a4, a5, a3, *(_DWORD *)(a1 + 100) & 4);
  }
  return result;
}

uint64_t CA::CG::FillRoundedRectShadow::FillRoundedRectShadow(void *a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  Color = (CGColor *)CGStyleGetColor();
  uint64_t result = CA::CG::DrawOp::DrawOp((uint64_t)a1, a2, a3, a4, a5, Color, a7 | 0x8C0u);
  *a1 = &unk_1ED027588;
  a1[18] = a3;
  atomic_fetch_add((atomic_uint *volatile)(a6 + 8), 1u);
  a1[19] = a6;
  *a1 = &unk_1ED0296A8;
  return result;
}

void CA::CG::FillRoundedRectShadow::draw_shadow(CA::CG::FillRoundedRectShadow *this, CA::CG::Renderer *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(void))(**((void **)this + 18) + 136))(*((void *)this + 18)) & 5) != 0)
  {
    uint64_t v4 = *((void *)this + 18);
    double v6 = *(double *)(v4 + 112);
    double v5 = *(double *)(v4 + 120);
    v64.f64[0] = v6;
    v64.f64[1] = v5;
    double v7 = *(double *)(v4 + 128);
    double v8 = *(double *)(v4 + 136);
    double v65 = v7;
    double v66 = v8;
    if (v7 < 0.0)
    {
      double v9 = v7 + v6;
      double v7 = -v7;
      v64.f64[0] = v9;
      double v65 = v7;
    }
    if (v8 < 0.0)
    {
      double v10 = v8 + v5;
      double v8 = -v8;
      v64.f64[1] = v10;
      double v66 = v8;
    }
    double v11 = *(double *)(v4 + 144);
    double v12 = *(double *)(v4 + 152);
    float64x2_t v13 = 0uLL;
    float64x2_t v63 = 0u;
    memset(v62, 0, sizeof(v62));
    uint64_t v14 = 32;
    if ((*((_DWORD *)this + 25) & 4) != 0)
    {
      uint64_t v14 = 88;
      double v15 = (float64x2_t *)((char *)a2 + 88);
    }
    else
    {
      double v15 = (float64x2_t *)((char *)a2 + 32);
    }
    if (v15 == v62)
    {
      v18.f64[0] = 0.0;
      float64x2_t v17 = 0uLL;
      float64x2_t v16 = 0uLL;
      float64x2_t v19 = 0uLL;
      double v20 = 0.0;
    }
    else
    {
      float64x2_t v16 = *(float64x2_t *)((char *)a2 + v14);
      float64x2_t v17 = v15[1];
      float64x2_t v13 = v15[2];
      v62[0] = v16;
      v62[1] = v17;
      v18.f64[0] = v17.f64[1];
      float64x2_t v19 = *(float64x2_t *)((char *)v62 + 8);
      double v20 = v16.f64[0];
    }
    float v21 = (float32x2_t *)*((void *)this + 19);
    v22.f64[1] = v19.f64[1];
    v22.f64[0] = v18.f64[0];
    float64x2_t v23 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v19.f64[0], 0);
    float v24 = *((double *)a2 + 10);
    v23.f64[0] = v20;
    float64x2_t v25 = vmulq_f64(v22, v23);
    float64x2_t v26 = vcvtq_f64_f32(vmul_n_f32(v21[10], v24));
    v18.f64[1] = v20;
    int8x16_t v27 = (int8x16_t)vmulq_f64(v19, v26);
    float64x2_t v28 = vmulq_n_f64(vmlaq_f64(vnegq_f64((float64x2_t)vextq_s8(v27, v27, 8uLL)), v26, v18), 1.0 / vsubq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1)).f64[0]);
    float v29 = v21[9].f32[1];
    float64x2_t v63 = vmlaq_laneq_f64(vmlaq_n_f64(v13, v16, v28.f64[0]), v17, v28, 1);
    __n128 v30 = (CA::OGL::Context *)*((void *)a2 + 1);
    __n128 v31 = (float16x4_t *)*((void *)v30 + 2);
    float16x4_t v32 = v31[1];
    _H4 = *(short float *)(v4 + 94);
    float16x4_t v34 = v32;
    if (_H4 != COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
    {
      __asm { FCVT            S4, H4 }
      float16x4_t v34 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v32), _S4));
    }
    v31[1] = v34;
    uint64_t v40 = *((void *)this + 18);
    unsigned int v41 = *(_DWORD *)(v40 + 100);
    if (*(float *)(*((void *)this + 19) + 76) < 0.1 && (v41 & 0x400) == 0)
    {
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      memset(&v68, 0, sizeof(v68));
      CA::Transform::set_affine((CA::Transform *)&v68, v62[0].f64[0], v62[0].f64[1], v62[1].f64[0], v62[1].f64[1], v63.f64[0], v63.f64[1]);
      *((void *)&v76 + 1) = &v64;
      *(void *)&long long v77 = &v68;
      *((void *)&v77 + 1) = 0xFF0020003FLL;
      uint64_t v79 = 0;
      long long v78 = 0uLL;
      CA::OGL::fill_round_rect(*((void *)a2 + 1), (float64x2_t **)&v76 + 1, (double *)0xF, 0, v11, v12);
LABEL_44:
      *(float16x4_t *)(*((void *)v30 + 2) + 8) = v32;
      return;
    }
    float v42 = vmulq_f64(v19, v19).f64[0] + v20 * v20;
    float v43 = (float)(v29 * v24) / sqrtf(v42);
    if (v11 == v12)
    {
      double v44 = v11 + v43 * 2.8 + v11 + v43 * 2.8;
      if (v44 <= v7 && v44 <= v8)
      {
        v67.width = 0.0;
        float16x4_t v61 = v34;
        CA::Transform::set_affine((CA::Transform *)&v68, v62[0].f64[0], v62[0].f64[1], v62[1].f64[0], v62[1].f64[1], v63.f64[0], v63.f64[1]);
        CA::OGL::emit_shadow_round_rect(v30, &v64, (float32x2_t *)&v67, &v61, 255, (v41 >> 10) & 1, 0, 0, v11, v43, 15, (uint64_t)&v68);
        goto LABEL_44;
      }
    }
    CGSize v46 = *(CGSize *)(v40 + 128);
    v68.CGPoint origin = *(CGPoint *)(v40 + 112);
    v68.std::string::size_type size = v46;
    CGSize v67 = *(CGSize *)(v40 + 144);
    CGPoint origin = v68.origin;
    v68.origin.x = 0.0;
    v68.origin.y = 0.0;
    float64x2_t v47 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
    float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
    v68.std::string::size_type size = (CGSize)vmulq_f64(vrndaq_f64(vmulq_f64((float64x2_t)v46, v47)), v48);
    CGSize v67 = (CGSize)vmulq_f64(vrndaq_f64(vmulq_f64((float64x2_t)v67, v47)), v48);
    unint64_t v49 = CA::CG::Renderer::retain_simple_path(a2, &v68, &v67);
    if (!v49) {
      goto LABEL_42;
    }
    uint64_t v51 = v49;
    float64x2_t v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v62[0], origin.x), v62[1], (float64x2_t)origin, 1);
    double v52 = vaddvq_f64(vmulq_f64(v62[0], v62[0]));
    double v53 = vaddvq_f64(vmulq_f64(v62[1], v62[1]));
    BOOL v54 = v52 != 1.0;
    if (v53 != 1.0) {
      BOOL v54 = 1;
    }
    double v55 = sqrt(v52);
    if (!v54) {
      double v55 = v52;
    }
    if (v55 <= 2.0)
    {
      double v56 = sqrt(v53);
      if (v54) {
        double v53 = v56;
      }
      if (vabdd_f64(v55, v53) < 0.001 && *(float *)(*((void *)this + 19) + 76) >= 1.5)
      {
        long long v57 = CA::Render::Path::new_path(v49, v50);
        if (v57)
        {
          uint64_t v58 = (atomic_uint *)v57;
          v67.width = 0.0;
          CA::Transform::set_affine((CA::Transform *)&v68, v62[0].f64[0], v62[0].f64[1], v62[1].f64[0], v62[1].f64[1], v63.f64[0], v63.f64[1]);
          CA::OGL::emit_shadow_path((uint64_t)v30);
          if (atomic_fetch_add(v58 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v58 + 16))(v58);
          }
          CGPathRelease(v51);
          goto LABEL_44;
        }
      }
    }
    if ((v41 & 0x400) != 0)
    {
      CGPathRelease(v51);
LABEL_42:
      *(float16x4_t *)(*((void *)v30 + 2) + 8) = v32;
LABEL_43:
      CA::CG::DrawShadow::draw_shadow(this, a2);
      return;
    }
    char v59 = CA::CG::fill_path_blurred((uint64_t)a2);
    CGPathRelease(v51);
    *(float16x4_t *)(*((void *)v30 + 2) + 8) = v32;
    if ((v59 & 1) == 0) {
      goto LABEL_43;
    }
  }
  else
  {
    CA::CG::DrawShadow::draw_shadow(this, a2);
  }
}

void CA::CG::FillRoundedRectShadow::~FillRoundedRectShadow(CA::CG::FillRoundedRectShadow *this)
{
  *(void *)this = &unk_1ED027588;
  unsigned int v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  unsigned int v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

uint64_t CA::CG::FillRoundedRect::compute_dod_corners(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2 = *(float64x2_t *)(a1 + 128);
  float64x2_t v3 = vaddq_f64(*(float64x2_t *)(a1 + 112), vminnmq_f64(v2, (float64x2_t)vdupq_n_s64(0x8000000000000000)));
  float64x2_t v4 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v2), (int8x16_t)vnegq_f64(v2), (int8x16_t)v2), v3);
  v5.f64[0] = v4.f64[0];
  v5.f64[1] = v3.f64[1];
  *a2 = v3;
  a2[1] = v5;
  v3.f64[1] = v4.f64[1];
  a2[2] = v4;
  a2[3] = v3;
  if ((*(unsigned char *)(a1 + 100) & 4) == 0)
  {
    uint64_t v6 = 0;
    double v7 = (const double *)(a1 + 48);
    double v8 = (const double *)(a1 + 8);
    double v9 = (const double *)(a1 + 32);
    double v10 = (const double *)(a1 + 16);
    double v11 = (const double *)(a1 + 40);
    double v12 = (const double *)(a1 + 24);
    float64x2_t v13 = vld1q_dup_f64(v8);
    float64x2_t v14 = vld1q_dup_f64(v12);
    float64x2_t v15 = vld1q_dup_f64(v11);
    float64x2_t v16 = vld1q_dup_f64(v10);
    float64x2_t v17 = vld1q_dup_f64(v9);
    float64x2_t v18 = vld1q_dup_f64(v7);
    do
    {
      f64 = a2[v6].f64;
      float64x2x2_t v21 = vld2q_f64(f64);
      v22.val[0] = vmlaq_f64(vmlaq_f64(v15, v21.val[0], v13), v21.val[1], v14);
      v22.val[1] = vmlaq_f64(vmlaq_f64(v18, v21.val[0], v16), v21.val[1], v17);
      vst2q_f64(f64, v22);
      v6 += 2;
    }
    while (v6 != 4);
  }
  return 1;
}

void CA::CG::FillRoundedRect::compute_dod(CA::CG::FillRoundedRect *this, float64x2_t *a2)
{
  CA::Rect::operator=(a2->f64, (double *)this + 14);
  if ((*((unsigned char *)this + 100) & 4) == 0)
  {
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  }
}

void CA::CG::FillRoundedRect::~FillRoundedRect(CA::CG::FillRoundedRect *this)
{
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

void CA::CG::StrokeRoundedRect::draw_shape(CA::CG::StrokeRoundedRect *this, CA::CG::Renderer *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 22)) {
    goto LABEL_7;
  }
  double v5 = *((double *)this + 18);
  double v4 = *((double *)this + 19);
  double v6 = v5 - v4;
  double v7 = v4 - v5;
  if (v6 >= 0.0) {
    double v7 = v6;
  }
  if (v7 <= 0.001
    && (int v8 = *((_DWORD *)this + 25), (v8 & 1) != 0)
    && (CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 20)), v9 >= 0.0))
  {
    double v10 = v9;
    if (v9 >= 0.001)
    {
      double v11 = (double *)((char *)a2 + 32);
      uint64_t v12 = 88;
      if ((v8 & 4) != 0) {
        double v11 = (double *)((char *)a2 + 88);
      }
      else {
        uint64_t v12 = 32;
      }
      double v13 = *((double *)this + 14);
      double v14 = *((double *)this + 15);
      double v20 = v13;
      double v21 = v14;
      double v15 = *((double *)this + 16);
      double v16 = *((double *)this + 17);
      double v22 = v15;
      double v23 = v16;
      if (v15 < 0.0)
      {
        double v13 = v15 + v13;
        double v15 = -v15;
        double v20 = v13;
        double v22 = v15;
      }
      if (v16 < 0.0)
      {
        double v14 = v16 + v14;
        double v16 = -v16;
        double v21 = v14;
        double v23 = v16;
      }
      double v17 = v10 * 0.5;
      if (v15 <= v16) {
        double v18 = v16;
      }
      else {
        double v18 = v15;
      }
      if (v18 < 1.79769313e308)
      {
        double v20 = v13 - v17;
        double v21 = v14 - v17;
        double v22 = v15 + v10;
        double v23 = v16 + v10;
        if (v15 + v10 <= 0.0 || v16 + v10 <= 0.0)
        {
          double v22 = 0.0;
          double v23 = 0.0;
        }
      }
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      double v19 = *(double *)((char *)a2 + v12);
      memset(v24, 0, sizeof(v24));
      CA::Transform::set_affine((CA::Transform *)v24, v19, v11[1], v11[2], v11[3], v11[4], v11[5]);
      *((void *)&v25 + 1) = &v20;
      *(void *)&long long v26 = v24;
      *((void *)&v26 + 1) = 0xFF0020003FLL;
      uint64_t v28 = 0;
      long long v27 = 0uLL;
      CA::OGL::stroke_round_rect(*((void **)a2 + 1), (float64x2_t **)&v25 + 1, (double *)0xF, 0, v5 + v17, v10);
    }
  }
  else
  {
LABEL_7:
    CA::CG::StrokeRoundedRect::draw_shape_as_path(this, a2);
  }
}

void CA::CG::StrokeRoundedRect::draw_shape_as_path(CA::CG::StrokeRoundedRect *this, CA::CG::Renderer *a2)
{
  Mutable = CGPathCreateMutable();
  CGPathAddRoundedRect(Mutable, 0, *(CGRect *)((char *)this + 112), *((CGFloat *)this + 18), *((CGFloat *)this + 19));
  CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)this + 160);

  CFRelease(Mutable);
}

void *CA::CG::StrokeRoundedRect::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (result)
  {
    uint64_t result = (void *)CA::CG::DrawPathShadow::DrawPathShadow(result, a2, a1, a4, a5, a3, *(_DWORD *)(a1 + 100) & 4 | 0x80u);
    void *result = &unk_1ED029878;
  }
  return result;
}

uint64_t CA::CG::StrokeRoundedRectShadow::retain_path(uint64_t a1, CA::CG::Renderer *this, CGPoint *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 144);
  CGSize v4 = *(CGSize *)(v3 + 128);
  v13.CGPoint origin = *(CGPoint *)(v3 + 112);
  v13.std::string::size_type size = v4;
  float64x2_t v12 = *(float64x2_t *)(v3 + 144);
  float64x2_t v5 = (float64x2_t)v4;
  *a3 = v13.origin;
  v13.origin.x = 0.0;
  v13.origin.y = 0.0;
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
  float64x2_t v7 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
  v13.std::string::size_type size = (CGSize)vmulq_f64(vrndaq_f64(vmulq_f64(v5, v6)), v7);
  float64x2_t v12 = vmulq_f64(vrndaq_f64(vmulq_f64(v12, v6)), v7);
  int v8 = CA::CG::Renderer::retain_simple_path(this, &v13, (const CGSize *)&v12);
  if (!v8) {
    return 0;
  }
  double v9 = v8;
  uint64_t stroked_path = CA::CG::create_stroked_path(v8, (_OWORD *)(v3 + 8), v3 + 160, (*(_DWORD *)(v3 + 100) & 4) != 0);
  CGPathRelease(v9);
  return stroked_path;
}

void CA::CG::StrokeRoundedRectShadow::~StrokeRoundedRectShadow(CA::CG::StrokeRoundedRectShadow *this)
{
  *(void *)this = &unk_1ED027588;
  float64x2_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  float64x2_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

double *CA::CG::StrokeRoundedRect::compute_dod(CA::CG::StrokeRoundedRect *this, float64x2_t *a2)
{
  CA::Rect::operator=(a2->f64, (double *)this + 14);
  if ((*((unsigned char *)this + 100) & 4) == 0) {
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  }
  double v4 = -CA::CG::stroke_radius((uint64_t)this + 160, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  double v6 = -v5;

  return CA::BoundsImpl::inset_point(a2->f64, v4, v6);
}

void CA::CG::StrokeRoundedRect::~StrokeRoundedRect(CA::CG::StrokeRoundedRect *this)
{
  *(void *)this = &unk_1ED029170;
  if (*((void *)this + 22)) {
    CGDashRelease();
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED029170;
  if (*((void *)this + 22)) {
    CGDashRelease();
  }

  CA::CG::DrawOp::~DrawOp(this);
}

void *CA::OGL::Context::draw_elements(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a8)
  {
    double v9 = *(float64x2_t **)(a1 + 816);
    if (v9)
    {
      *(void *)(a1 + 816) = 0;
      ++*(_DWORD *)(a1 + 256);
      float64x2_t v12 = &unk_1ED030DB8;
      uint64_t v13 = a1;
      uint64_t v14 = &v12;
      CA::OGL::clip_primitives(a2, a3, a4, a5, 0, a8, v9, 0, 0, (uint64_t)&v12, 1u);
      uint64_t result = std::__function::__value_func<BOOL ()(CA::OGL::Vertex *,unsigned int)>::~__value_func[abi:nn180100](&v12);
      *(void *)(a1 + 816) = v9;
      ++*(_DWORD *)(a1 + 256);
    }
    else
    {
      float64x2_t v12 = &unk_1ED030DB8;
      uint64_t v13 = a1;
      uint64_t v14 = &v12;
      CA::OGL::clip_primitives(a2, a3, a4, a5, 0, a8, 0, 0, 0, (uint64_t)&v12, 1u);
      return std::__function::__value_func<BOOL ()(CA::OGL::Vertex *,unsigned int)>::~__value_func[abi:nn180100](&v12);
    }
  }
  else
  {
    double v11 = *(uint64_t (**)(void))(*(void *)a1 + 288);
    return (void *)v11();
  }
  return result;
}

uint64_t std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::operator()(uint64_t a1, void *a2, unsigned int *a3)
{
  return 1;
}

uint64_t std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED030DB8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ED030DB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0,std::allocator<CA::OGL::Context::draw_elements(CA::OGL::PrimitiveMode,unsigned int,unsigned short const*,CA::OGL::Vertex const*,unsigned int,unsigned int,CA::OGL::ClipPlane const*)::$_0>,BOOL ()(CA::OGL::Vertex*,unsigned int)>::~__func()
{
}

void *CA::OGL::Context::array_quad(void *result, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v5 = result[16];
  double v6 = (float32x2_t *)(result[15] + 48 * v5);
  result[16] = v5 + 4;
  *double v6 = vcvt_f32_f64(a2);
  v6[1] = (float32x2_t)0x3F80000000000000;
  v6[6] = vcvt_f32_f64(a3);
  v6[7] = (float32x2_t)0x3F80000000000000;
  v6[12] = vcvt_f32_f64(a4);
  v6[13] = (float32x2_t)0x3F80000000000000;
  v6[18] = vcvt_f32_f64(a5);
  v6[19] = (float32x2_t)0x3F80000000000000;
  if (result[12]) {
    return (void *)CA::OGL::Context::array_indices((uint64_t)result, v5);
  }
  return result;
}

void *CA::OGL::Context::array_quad(void *result, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5)
{
  uint64_t v6 = result[16];
  uint64_t v7 = result[15] + 48 * v6;
  result[16] = v6 + 4;
  float32x4_t v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a3), a3[1]);
  float32x4_t v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a4), a4[1]);
  float32x4_t v10 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a5), a5[1]);
  *(float32x4_t *)uint64_t v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  *(float32x4_t *)(v7 + 48) = v8;
  *(float32x4_t *)(v7 + 96) = v9;
  *(float32x4_t *)(v7 + 144) = v10;
  if (result[12]) {
    return (void *)CA::OGL::Context::array_indices((uint64_t)result, v6);
  }
  return result;
}

void CA::OGL::emit_combine_scaled(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, CA::Shape *a5, unsigned int *a6, float a7, int32x4_t a8, int32x4_t a9)
{
  float v106 = *(float *)a8.i32;
  v114[3] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = a2;
  if (a3)
  {
    CA::OGL::Context::bind_surface(a1, a3, 0, 1u, 1, 0.0);
    uint64_t v15 = *(void *)(a3 + 32);
    int v16 = *(_DWORD *)(a3 + 40);
    int v17 = *(_DWORD *)(a3 + 44);
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 0;
    int v17 = 0;
  }
  uint64_t v18 = v15;
  if (a4)
  {
    CA::OGL::Context::bind_surface(a1, a4, 1u, 1u, 1, 0.0);
    long long v19 = *(_OWORD *)(a4 + 32);
  }
  else
  {
    long long v19 = 0uLL;
  }
  if (v16 <= v17) {
    int v20 = v17;
  }
  else {
    int v20 = v16;
  }
  BOOL v21 = v20 <= 1073741822;
  a8.i32[0] = v20;
  *(double *)a9.i64 = (double)v16;
  int8x16_t v22 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  if (v20 <= 1073741822) {
    *(double *)v23.i64 = (double)v16;
  }
  else {
    *(double *)v23.i64 = 1.79769313e308;
  }
  int v24 = DWORD2(v19);
  if (v21) {
    double v25 = (double)v17;
  }
  else {
    double v25 = 1.79769313e308;
  }
  if (SDWORD2(v19) <= SHIDWORD(v19)) {
    int v24 = HIDWORD(v19);
  }
  a9.i32[0] = 1073741822;
  int32x4_t v26 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a8, a9), 0);
  v27.i64[0] = (int)v18;
  v27.i64[1] = SHIDWORD(v18);
  int8x16_t v28 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  int8x16_t v29 = vbslq_s8((int8x16_t)v26, v28, (int8x16_t)vcvtq_f64_s64(v27));
  v26.i32[0] = v24;
  v27.i64[0] = (int)v19;
  v27.i64[1] = SDWORD1(v19);
  int8x16_t v30 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v26, a9), 0), v28, (int8x16_t)vcvtq_f64_s64(v27));
  float v31 = 1.0 / a7;
  double v32 = (float)(1.0 / a7);
  *(double *)&v23.i64[1] = v25;
  v27.i64[0] = SDWORD2(v19);
  v27.i64[1] = SHIDWORD(v19);
  int8x16_t v33 = (int8x16_t)vcvtq_f64_s64(v27);
  int32x2_t v34 = vdup_n_s32(v24 > 1073741822);
  v27.i64[0] = v34.u32[0];
  v27.i64[1] = v34.u32[1];
  int8x16_t v35 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v27, 0x3FuLL)), v22, v33);
  _ZF = *(double *)v23.i64 >= 1.79769313e308 || v31 == 1.0;
  v37.i64[1] = v29.i64[1];
  *(double *)&v38.i64[1] = v25;
  if (_ZF) {
    unint64_t v39 = 0;
  }
  else {
    unint64_t v39 = -1;
  }
  int8x16_t v40 = (int8x16_t)vdupq_n_s64(v39);
  *(double *)v38.i64 = *(double *)v23.i64 * v32;
  float64x2_t v41 = (float64x2_t)vbslq_s8(v40, v38, v23);
  *(double *)v37.i64 = v32 * *(double *)v29.i64;
  float64x2_t v108 = (float64x2_t)vbslq_s8(v40, v37, v29);
  if (v31 != 1.0 && v41.f64[1] < 1.79769313e308)
  {
    v42.f64[0] = v108.f64[0];
    v42.f64[1] = vmuld_lane_f64(v32, v108, 1);
    float64x2_t v108 = v42;
    v41.f64[1] = v41.f64[1] * v32;
  }
  float v43 = 1.0 / v106;
  double v44 = (float)(1.0 / v106);
  BOOL v45 = *(double *)v35.i64 >= 1.79769313e308 || v43 == 1.0;
  v46.i64[1] = v30.i64[1];
  v47.i64[1] = v35.i64[1];
  if (v45) {
    unint64_t v48 = 0;
  }
  else {
    unint64_t v48 = -1;
  }
  int8x16_t v49 = (int8x16_t)vdupq_n_s64(v48);
  *(double *)v47.i64 = v44 * *(double *)v35.i64;
  float64x2_t v50 = (float64x2_t)vbslq_s8(v49, v47, v35);
  *(double *)v46.i64 = v44 * *(double *)v30.i64;
  float64x2_t v107 = (float64x2_t)vbslq_s8(v49, v46, v30);
  if (v43 != 1.0 && v50.f64[1] < 1.79769313e308)
  {
    v51.f64[0] = v107.f64[0];
    v51.f64[1] = vmuld_lane_f64(v44, v107, 1);
    float64x2_t v107 = v51;
    v50.f64[1] = v50.f64[1] * v44;
  }
  int64x2_t v52 = vceqzq_f64(v41);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v52, 1), (int8x16_t)v52).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v53 = vorrq_s8((int8x16_t)vcltzq_f64(v41), (int8x16_t)vcgezq_f64(v41)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v53), 1), v53).u64[0] & 0x8000000000000000) != 0))
  {
    long long v111 = 0uLL;
    *(_OWORD *)v103 = 0u;
  }
  else
  {
    int32x4_t v54 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v108, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    *(int32x4_t *)v103 = vuzp1q_s32(v54, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v108, v41), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v54));
    long long v111 = *(_OWORD *)v103;
  }
  int64x2_t v55 = vceqzq_f64(v50);
  int8x16_t v109 = 0u;
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v55, 1), (int8x16_t)v55).u64[0] & 0x8000000000000000) == 0)
  {
    int8x16_t v56 = vorrq_s8((int8x16_t)vcltzq_f64(v50), (int8x16_t)vcgezq_f64(v50));
    if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v56), 1), v56).u64[0] & 0x8000000000000000) == 0)
    {
      int32x4_t v57 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v107, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      int8x16_t v109 = (int8x16_t)vuzp1q_s32(v57, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v107, v50), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v57));
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 984))(a1))
  {
    long long v110 = 0uLL;
    uint64_t v58 = (const CA::Bounds *)&v111;
    v101 = a5;
    if (a2 <= 0x3F)
    {
      if (((1 << a2) & 0xC043800001FC1B5ELL) != 0)
      {
LABEL_46:
        uint64_t v104 = CA::Shape::intersect(a5, v58);
LABEL_47:
        int v102 = 1;
        goto LABEL_48;
      }
      if (((1 << a2) & 0x480) != 0)
      {
        long long v110 = *(_OWORD *)v103;
        int32x2_t v94 = (int32x2_t)vextq_s8(v109, v109, 8uLL).u64[0];
        uint32x2_t v95 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v103[1]);
        uint32x2_t v96 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v94);
        unsigned __int32 v97 = vpmax_u32(v96, v96).u32[0];
        if ((vpmax_u32(v95, v95).u32[0] & 0x80000000) != 0)
        {
          if ((v97 & 0x80000000) != 0)
          {
            uint64_t v104 = 1;
            goto LABEL_47;
          }
          *(void *)&long long v110 = v109.i64[0];
          DWORD2(v110) = v109.i32[2];
          __int32 v100 = v109.i32[3];
        }
        else
        {
          if ((v97 & 0x80000000) != 0)
          {
LABEL_114:
            uint64_t v58 = (const CA::Bounds *)&v110;
            goto LABEL_46;
          }
          int32x2_t v98 = vmin_s32((int32x2_t)v103[0], *(int32x2_t *)v109.i8);
          int32x2_t v99 = vsub_s32(vmax_s32(vadd_s32((int32x2_t)v103[0], (int32x2_t)v103[1]), vadd_s32(*(int32x2_t *)v109.i8, v94)), v98);
          *(int32x2_t *)&long long v110 = v98;
          DWORD2(v110) = v99.i32[0];
          __int32 v100 = v99.i32[1];
        }
        HIDWORD(v110) = v100;
        goto LABEL_114;
      }
      if (a2 == 5)
      {
        long long v110 = *(_OWORD *)v103;
        uint64_t v58 = (const CA::Bounds *)&v110;
        if ((CA::BoundsImpl::intersect((int32x2_t *)&v110, *(int32x2_t *)v109.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)) & 1) == 0)
        {
          unint64_t v60 = *(void *)(*(void *)(a1 + 16) + 8);
          unint64_t v61 = v60 >> 16;
          unint64_t v62 = HIDWORD(v60);
          unint64_t v63 = HIWORD(v60);
          int v102 = 1;
          uint64_t v104 = 1;
          goto LABEL_60;
        }
        goto LABEL_46;
      }
    }
    if (a2 - 68 >= 2)
    {
      int v102 = 0;
      uint64_t v104 = (uint64_t)a5;
LABEL_48:
      uint64_t v59 = *(void *)(a1 + 16);
      unint64_t v60 = *(void *)(v59 + 8);
      unint64_t v61 = v60 >> 16;
      unint64_t v62 = HIDWORD(v60);
      unint64_t v63 = HIWORD(v60);
      if (a2 - 8 >= 2)
      {
        if (a2 == 7)
        {
          _S0 = *a6;
          __asm { FCVT            H0, S0 }
          LOWORD(v60) = _S0;
          LOWORD(v61) = _S0;
          LOWORD(v62) = _S0;
          unint64_t v63 = _S0;
        }
      }
      else
      {
        *(_OWORD *)(v59 + 24) = *(_OWORD *)a6;
      }
LABEL_60:
      BOOL v69 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)a1);
      int v70 = *(unsigned __int8 *)(a1 + 64);
      if (*(unsigned char *)(a1 + 64)) {
        *(unsigned char *)(a1 + 64) = 0;
      }
      *(void *)(a1 + 128) = 0;
      uint64_t v71 = a1 + 834;
      *(void *)(a1 + 96) = a1 + 834;
      *(_OWORD *)(a1 + 104) = xmmword_184997E70;
      v114[1] = 0;
      v114[2] = 0;
      v114[0] = v104;
      unint64_t v72 = ((unint64_t)(unsigned __int16)v62 << 32) | (v63 << 48) | ((unint64_t)(unsigned __int16)v61 << 16) | (unsigned __int16)v60;
      while (CA::ShapeIterator::iterate(v114, (int *)&v110))
      {
        if (*(_DWORD *)(a1 + 92)) {
          uint64_t v73 = 6;
        }
        else {
          uint64_t v73 = 4;
        }
        if ((unint64_t)(*(void *)(a1 + 128) + 4) > *(void *)(a1 + 136)
          || (unint64_t v74 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v73 > v74)
        {
          *(_WORD *)(a1 + 832) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(void *)(a1 + 128) = 0;
          *(void *)(a1 + 96) = v71;
          *(_OWORD *)(a1 + 104) = xmmword_184997E70;
        }
        CA::OGL::Context::array_rect((void *)a1, (float)(int)v110, (float)SDWORD1(v110), (float)(DWORD2(v110) + v110), (float)(HIDWORD(v110) + DWORD1(v110)));
        uint64_t v75 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
        *(void *)(v75 - 160) = v72;
        *(void *)(v75 - 112) = v72;
        *(void *)(v75 - 64) = v72;
        *(void *)(v75 - 16) = v72;
        if (a3)
        {
          uint64_t v76 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
          v77.i64[0] = (int)v110;
          v77.i64[1] = SDWORD1(v110);
          float32x2_t v78 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_s64(v77), v108));
          float32x2_t v79 = vmul_n_f32(v78, a7);
          float32x2_t v80 = vmul_n_f32(vadd_f32(vcvt_f32_s32(*(int32x2_t *)((char *)&v110 + 8)), v78), a7);
          *(float32x2_t *)(v76 - 176) = v79;
          *(void *)(v76 - 128) = __PAIR64__(v79.u32[1], v80.u32[0]);
          *(float32x2_t *)(v76 - 80) = v80;
          v79.i32[1] = v80.i32[1];
          *(float32x2_t *)(v76 - 32) = v79;
        }
        if (a4)
        {
          uint64_t v81 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
          v82.i64[0] = (int)v110;
          v82.i64[1] = SDWORD1(v110);
          float32x2_t v83 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_s64(v82), v107));
          float32x2_t v84 = vmul_n_f32(v83, v106);
          float32x2_t v85 = vmul_n_f32(vadd_f32(vcvt_f32_s32(*(int32x2_t *)((char *)&v110 + 8)), v83), v106);
          *(float32x2_t *)(v81 - 168) = v84;
          *(void *)(v81 - 120) = __PAIR64__(v84.u32[1], v85.u32[0]);
          *(float32x2_t *)(v81 - 72) = v85;
          v84.i32[1] = v85.i32[1];
          *(float32x2_t *)(v81 - 24) = v84;
        }
      }
      CA::OGL::Context::array_flush(a1);
      if (!v69) {
        goto LABEL_92;
      }
      unint64_t v88 = CA::Shape::subtract(v101, (const CA::Shape *)v104, v86, v87);
      CGRect v89 = (CA::Shape *)v88;
      if (v88)
      {
        if (v88 == 1)
        {
LABEL_91:
          CA::Shape::unref(v89);
LABEL_92:
          if (v70) {
            *(unsigned char *)(a1 + 64) = 1;
          }
          if (v102) {
            CA::Shape::unref((CA::Shape *)v104);
          }
          if (a4) {
            CA::OGL::Context::unbind_surface((void *)a1, a4, 1);
          }
          if (a3) {
            CA::OGL::Context::unbind_surface((void *)a1, a3, 0);
          }
          *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
          return;
        }
      }
      else if (*(_DWORD *)(v88 + 4) == 6)
      {
        goto LABEL_91;
      }
      CGRect v90 = *(const void **)(a1 + 16);
      memcpy(buf, v90, sizeof(buf));
      v112[2] = 0;
      *(void *)long long buf = v90;
      *(void *)(a1 + 16) = buf;
      buf[16] = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 96) = v71;
      *(_OWORD *)(a1 + 104) = xmmword_184997E70;
      v112[0] = (uint64_t)v89;
      v112[1] = 0;
      while (CA::ShapeIterator::iterate(v112, (int *)&v110))
      {
        if (*(_DWORD *)(a1 + 92)) {
          uint64_t v91 = 6;
        }
        else {
          uint64_t v91 = 4;
        }
        if ((unint64_t)(*(void *)(a1 + 128) + 4) > *(void *)(a1 + 136)
          || (unint64_t v92 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v91 > v92)
        {
          *(_WORD *)(a1 + 832) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(void *)(a1 + 128) = 0;
          *(void *)(a1 + 96) = v71;
          *(_OWORD *)(a1 + 104) = xmmword_184997E70;
        }
        CA::OGL::Context::array_rect((void *)a1, (float)(int)v110, (float)SDWORD1(v110), (float)(DWORD2(v110) + v110), (float)(HIDWORD(v110) + DWORD1(v110)));
        uint64_t v93 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
        *(void *)(v93 - 160) = 0;
        *(void *)(v93 - 112) = 0;
        *(void *)(v93 - 64) = 0;
        *(void *)(v93 - 16) = 0;
      }
      CA::OGL::Context::array_flush(a1);
      *(void *)(a1 + 16) = *(void *)buf;
      goto LABEL_91;
    }
    goto LABEL_46;
  }
  if (a4) {
    CA::OGL::Context::unbind_surface((void *)a1, a4, 1);
  }
  if (a3) {
    CA::OGL::Context::unbind_surface((void *)a1, a3, 0);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    float64x2_t v64 = x_log_category_ogl;
    if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_184668000, v64, OS_LOG_TYPE_DEFAULT, "CoreAnimation: unhandled combiner function: %d\n", buf, 8u);
    }
  }
}

uint64_t CA::OGL::emit_bias(void *a1, int *a2, float a3, float a4)
{
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a2, a4);
  *(unsigned char *)(a1[2] + 16) = 25;
  v8.i32[0] = 1000593162;
  if (a3 >= 0.005)
  {
    *(float *)v8.i32 = a3;
    if (a3 > 0.995) {
      v8.i32[0] = 1065269330;
    }
  }
  *(float *)v8.i32 = (float)(1.0 / *(float *)v8.i32) + -2.0;
  *(int32x4_t *)(a1[2] + 24) = vdupq_lane_s32(v8, 0);
  uint64_t result = CA::OGL::emit_filter_quads((uint64_t)a1, a2, a4);
  if ((int *)a1[33] != a2) {
    uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a2, 0);
  }
  *(unsigned char *)(a1[2] + 16) = 0;
  *(unsigned char *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::emit_sdr_normalize_filter(void *a1, int *a2, float a3)
{
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a2, a3);
  *(unsigned char *)(a1[2] + 16) = 67;
  uint64_t result = CA::OGL::emit_filter_quads((uint64_t)a1, a2, a3);
  if ((int *)a1[33] != a2) {
    uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a2, 0);
  }
  *(unsigned char *)(a1[2] + 16) = 0;
  *(unsigned char *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::emit_limit_apl_dimming(void *a1, int *a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  CA::OGL::Context::bind_surface((uint64_t)a1, (uint64_t)a2, 0, a4 != 1.0, a4 != 1.0, 0.0);
  *(unsigned char *)(a1[2] + 16) = 100;
  *(unsigned char *)(a1[2] + 481) |= 2u;
  *(_DWORD *)(a1[2] + 352) = 1065353216;
  float v12 = a5 + (float)a2[8];
  float v13 = a6 + (float)a2[9];
  float v14 = (float)a2[10];
  float v15 = (float)a2[11];
  float v16 = v13 + v15;
  *(float *)&unsigned int v17 = v13 * a4;
  uint64_t v25 = 0x3F80000000000000;
  long long v26 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v27 = 0u;
  v24[0] = v12 * a4;
  v24[1] = v16 * a4;
  *((float *)&v26 + 1) = v15;
  float v28 = v12 * a4;
  uint64_t v29 = v17;
  int v30 = 1065353216;
  *(float *)&long long v33 = (float)(v12 + v14) * a4;
  *((float *)&v33 + 1) = v16 * a4;
  HIDWORD(v33) = 1065353216;
  *(void *)&long long v34 = __PAIR64__(LODWORD(v15), LODWORD(v14));
  *(float *)&long long v36 = *(float *)&v33;
  DWORD1(v36) = v17;
  HIDWORD(v36) = 1065353216;
  *(float *)&long long v37 = v14;
  long long v20 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v18 = *(void *)(a1[31] + 8);
  v21[0] = a1;
  v21[1] = v18;
  v21[2] = 0;
  WORD4(v22) = 0;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v21);
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v21, (int32x2_t *)&v20))(*(void (**)(void *, uint64_t, float *, uint64_t))(*a1 + 384))(a1, 4, v24, a3);
  *(unsigned char *)(a1[2] + 481) &= ~2u;
  uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a2, 0);
  *(unsigned char *)(a1[2] + 16) = 0;
  return result;
}

float CA::OGL::adjust_skipped_corner_vertices(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 9 * a3;
  int32x2_t v8 = (_OWORD *)(a1 + 288 * a3);
  float32x4_t v9 = (_OWORD *)(a1 + 32 * a5);
  long long v10 = v8[1];
  _OWORD *v9 = *v8;
  v9[1] = v10;
  uint64_t v11 = 7 - a3;
  uint64_t v12 = 7 - a3 + 8 * a3;
  float v13 = (_OWORD *)(a1 + 32 * v12);
  float v14 = (_OWORD *)(a1 + 32 * (a5 + 1));
  long long v15 = v13[1];
  *float v14 = *v13;
  v14[1] = v15;
  float v16 = (_OWORD *)(a1 + 288 * (7 - a3));
  unsigned int v17 = (_OWORD *)(a1 + 32 * (a5 + 2));
  long long v18 = v16[1];
  *unsigned int v17 = *v16;
  v17[1] = v18;
  uint64_t v19 = a3 + 8 * (7 - a3);
  long long v20 = (_OWORD *)(a1 + 32 * v19);
  BOOL v21 = (_OWORD *)(a1 + 32 * (a5 + 3));
  long long v22 = v20[1];
  *BOOL v21 = *v20;
  v21[1] = v22;
  uint64_t v23 = a2;
  uint64_t v24 = a6;
  do
  {
    uint64_t v25 = v23 + 48 * a5 + 112;
    *(_DWORD *)(v25 - 96) = *(_DWORD *)(v23 + 432 * a3 + 16);
    *(_DWORD *)(v25 - 48) = *(_DWORD *)(v23 + 336 * a3 + 352);
    *(_DWORD *)uint64_t v25 = *(_DWORD *)(v23 + 3040 - 432 * a3);
    float result = *(float *)(v23 + 2704 - 336 * a3);
    *(float *)(v25 + 48) = result;
    v23 += 4;
    --v24;
  }
  while (v24);
  if ((a7 & 0x400000) != 0)
  {
    uint64_t v27 = 0;
    uint64_t v28 = a3 + 8 * (a4 + a3);
    uint64_t v29 = a2 + 432 * a3;
    int v30 = (_DWORD *)(v29 + 64);
    long long v31 = (_DWORD *)(v29 + 400);
    do
    {
      if (a4 >= 2)
      {
        long long v32 = v31;
        long long v33 = v30;
        unint64_t v34 = a4 - 1;
        do
        {
          *long long v32 = *(_DWORD *)(a2 + 48 * v28 + 4 * v27 + 16);
          *long long v33 = *(_DWORD *)(a2 + 48 * (v7 + a4) + 4 * v27 + 16);
          v33 += 12;
          v32 += 96;
          --v34;
        }
        while (v34);
      }
      *(_DWORD *)(a2 + 432 * a3 + 4 * v27 + 16) = *(_DWORD *)(a2 + 48 * v28 + 4 * v27 + 16);
      float result = *(float *)(a2 + 48 * (v7 + a4) + 4 * v27 + 16);
      *(float *)(a2 + 48 * a5 + 4 * v27++ + 16) = result;
      ++v30;
      ++v31;
    }
    while (v27 != a6);
  }
  if ((a7 & 0x800000) != 0)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v11 - a4 + 8 * a3;
    uint64_t v37 = v11 + 8 * (a4 + a3);
    uint64_t v38 = a2 + 336 * a3;
    uint64_t v39 = (_DWORD *)(v38 + 736);
    int8x16_t v40 = (_DWORD *)(v38 + 304);
    do
    {
      if (a4 >= 2)
      {
        float64x2_t v41 = v40;
        float64x2_t v42 = v39;
        unint64_t v43 = a4 - 1;
        do
        {
          *float64x2_t v41 = *(_DWORD *)(a2 + 48 * v36 + 4 * v35 + 16);
          v41 -= 12;
          *float64x2_t v42 = *(_DWORD *)(a2 + 48 * v37 + 4 * v35 + 16);
          v42 += 96;
          --v43;
        }
        while (v43);
      }
      *(_DWORD *)(a2 + 48 * v12 + 4 * v35 + 16) = *(_DWORD *)(a2 + 48 * v36 + 4 * v35 + 16);
      float result = *(float *)(a2 + 48 * v37 + 4 * v35 + 16);
      *(float *)(a2 + 48 * (a5 + 1) + 4 * v35++ + 16) = result;
      ++v39;
      ++v40;
    }
    while (v35 != a6);
  }
  if ((a7 & 0x2000000) != 0)
  {
    uint64_t v44 = 0;
    uint64_t v45 = v11 + 8 * (v11 - a4);
    uint64_t v46 = 8 * (7 - a3) + v11 - a4;
    uint64_t v47 = a2 - 432 * a3;
    unint64_t v48 = (_DWORD *)(v47 + 2656);
    int8x16_t v49 = (_DWORD *)(v47 + 2992);
    do
    {
      if (a4 >= 2)
      {
        float64x2_t v50 = v49;
        float64x2_t v51 = v48;
        unint64_t v52 = a4 - 1;
        do
        {
          *float64x2_t v51 = *(_DWORD *)(a2 + 48 * v45 + 4 * v44 + 16);
          *float64x2_t v50 = *(_DWORD *)(a2 + 48 * v46 + 4 * v44 + 16);
          v50 -= 12;
          v51 -= 96;
          --v52;
        }
        while (v52);
      }
      *(_DWORD *)(a2 + 432 * (7 - a3) + 4 * v44 + 16) = *(_DWORD *)(a2 + 48 * v45 + 4 * v44 + 16);
      float result = *(float *)(a2 + 48 * v46 + 4 * v44 + 16);
      *(float *)(a2 + 48 * (a5 + 2) + 4 * v44++ + 16) = result;
      ++v48;
      ++v49;
    }
    while (v44 != a6);
  }
  if ((a7 & 0x1000000) != 0)
  {
    uint64_t v53 = 0;
    uint64_t v54 = a3 + 8 * (v11 - a4);
    uint64_t v55 = a2 - 336 * a3;
    int8x16_t v56 = (_DWORD *)(v55 + 2320);
    int32x4_t v57 = (_DWORD *)(v55 + 2752);
    do
    {
      if (a4 >= 2)
      {
        uint64_t v58 = v57;
        uint64_t v59 = v56;
        unint64_t v60 = a4 - 1;
        do
        {
          *uint64_t v58 = *(_DWORD *)(a2 + 48 * (v19 + a4) + 4 * v53 + 16);
          v58 += 12;
          *uint64_t v59 = *(_DWORD *)(a2 + 48 * v54 + 4 * v53 + 16);
          v59 -= 96;
          --v60;
        }
        while (v60);
      }
      *(_DWORD *)(a2 + 48 * v19 + 4 * v53 + 16) = *(_DWORD *)(a2 + 48 * (v19 + a4) + 4 * v53 + 16);
      float result = *(float *)(a2 + 48 * v54 + 4 * v53 + 16);
      *(float *)(a2 + 48 * (a5 + 3) + 4 * v53++ + 16) = result;
      ++v56;
      ++v57;
    }
    while (v53 != a6);
  }
  return result;
}

void CA::OGL::emit_bounds_surround(uint64_t a1, const CA::Bounds *a2)
{
  __dst[61] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = CA::Shape::subtract(*(CA::Shape **)(*(void *)(a1 + 248) + 8), a2);
  if (v3)
  {
    double v4 = (CA::Shape *)v3;
    if (v3)
    {
      if (v3 == 1) {
        return;
      }
    }
    else if (*(_DWORD *)(v3 + 4) == 6)
    {
      return;
    }
    uint64_t v5 = *(const void **)(a1 + 16);
    memcpy(__dst, v5, 0x1E8uLL);
    __dst[0] = v5;
    *(void *)(a1 + 16) = __dst;
    LOBYTE(__dst[2]) = 0;
    int v6 = *(unsigned __int8 *)(a1 + 64);
    if (*(unsigned char *)(a1 + 64)) {
      *(unsigned char *)(a1 + 64) = 0;
    }
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 96) = a1 + 834;
    *(_OWORD *)(a1 + 104) = xmmword_184997E70;
    v12[1] = 0;
    v12[2] = 0;
    uint64_t v11 = 0;
    v12[0] = (uint64_t)v4;
    uint64_t v10 = 0;
    while (CA::ShapeIterator::iterate(v12, (int *)&v10))
    {
      if (*(_DWORD *)(a1 + 92)) {
        uint64_t v7 = 6;
      }
      else {
        uint64_t v7 = 4;
      }
      if ((unint64_t)(*(void *)(a1 + 128) + 4) > *(void *)(a1 + 136)
        || (unint64_t v8 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v7 > v8)
      {
        *(_WORD *)(a1 + 832) |= 0x20u;
        CA::OGL::Context::array_flush(a1);
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 96) = a1 + 834;
        *(_OWORD *)(a1 + 104) = xmmword_184997E70;
      }
      CA::OGL::Context::array_rect((void *)a1, (float)(int)v10, (float)SHIDWORD(v10), (float)(v11 + v10), (float)(HIDWORD(v11) + HIDWORD(v10)));
      uint64_t v9 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
      *(void *)(v9 - 160) = 0;
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 16) = 0;
    }
    CA::OGL::Context::array_flush(a1);
    if (v6) {
      *(unsigned char *)(a1 + 64) = 1;
    }
    *(void *)(a1 + 16) = __dst[0];
    __dst[0] = 0;
    CA::Shape::unref(v4);
    if (__dst[0]) {
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
    }
  }
}

uint64_t CA::OGL::emit_twenty_part_rect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  v33[143] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(result + 136) < 0x24u) {
    return result;
  }
  uint64_t v10 = (CA::OGL::Context *)result;
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(result + 120);
  float v13 = (_DWORD *)(v12 + 28);
  float v14 = v33;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a4 + 8 * v11);
    unsigned int v17 = v14;
    long long v18 = v13;
    do
    {
      *((void *)v17 - 2) = *(void *)(a3 + 8 * v15);
      *((void *)v17 - 1) = v16;
      *unsigned int v17 = xmmword_184997D60;
      if (a5)
      {
        *(v18 - 3) = *(_DWORD *)(a5 + 4 * v15);
        *(v18 - 2) = *(_DWORD *)(a6 + 4 * v11);
      }
      if (a7)
      {
        *(v18 - 1) = *(_DWORD *)(a7 + 4 * v15);
        *long long v18 = *(_DWORD *)(a8 + 4 * v11);
      }
      ++v15;
      v18 += 12;
      v17 += 2;
    }
    while (v15 != 6);
    ++v11;
    v13 += 72;
    v14 += 24;
  }
  while (v11 != 6);
  uint64_t v19 = *(void *)(*(void *)(result + 16) + 8);
  for (uint64_t i = 32; i != 1760; i += 48)
    *(void *)(v12 + i) = v19;
  BOOL v21 = *(void (**)(uint64_t, float64x2_t *, uint64_t, uint64_t, __n128))(a2 + 24);
  if (v21) {
    v21(a2, &v32, v12, 36, (__n128)xmmword_184997D60);
  }
  CA::OGL::transform_vertices(&v32, (float32x4_t *)v12, (const double *)0x24, *(float64x2_t **)(a2 + 8));
  long long v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
  if (v22) {
    v22(a2, v12, 36);
  }
  if ((*(unsigned char *)(a2 + 16) & 9) != 0)
  {
    int v23 = *(_DWORD *)(a2 + 20);
    if ((v23 & 0xF) == 0) {
      goto LABEL_23;
    }
    if ((v23 & 4) != 0)
    {
      CA::OGL::aa_adjust_vertices(v12, v12 + 288, 48, 6);
      int v23 = *(_DWORD *)(a2 + 20);
      if ((v23 & 8) == 0)
      {
LABEL_20:
        if ((v23 & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_34;
      }
    }
    else if ((v23 & 8) == 0)
    {
      goto LABEL_20;
    }
    CA::OGL::aa_adjust_vertices(v12 + 1440, v12 + 1152, 48, 6);
    int v23 = *(_DWORD *)(a2 + 20);
    if ((v23 & 1) == 0)
    {
LABEL_21:
      if ((v23 & 2) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_34:
    CA::OGL::aa_adjust_vertices(v12, v12 + 48, 288, 6);
    int v23 = *(_DWORD *)(a2 + 20);
    if ((v23 & 2) == 0)
    {
LABEL_23:
      if ((v23 & 0xF0) != 0)
      {
        CA::OGL::aa_adjust_vertices(v12 + 384, v12 + 96, 48, 2);
        CA::OGL::aa_adjust_vertices(v12 + 1248, v12 + 1536, 48, 2);
        CA::OGL::aa_adjust_vertices(v12 + 624, v12 + 576, 288, 2);
        CA::OGL::aa_adjust_vertices(v12 + 768, v12 + 816, 288, 2);
      }
      goto LABEL_25;
    }
LABEL_22:
    CA::OGL::aa_adjust_vertices(v12 + 240, v12 + 192, 288, 6);
    int v23 = *(_DWORD *)(a2 + 20);
    goto LABEL_23;
  }
LABEL_25:
  BOOL v24 = CA::OGL::Context::need_transparent_source(v10);
  float result = CA::OGL::emit_quad_indices((uint64_t)v10, *(float64x2_t **)(a2 + 40), CA::OGL::emit_twenty_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int,float)::indices, 0x50uLL, 0x24u);
  if ((a9 & 0x40000) != 0 || v24)
  {
    float64x2_t v25 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 8));
    v31[0] = vcvtq_f64_f32(*(float32x2_t *)v12);
    v31[1] = v25;
    float64x2_t v26 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 248));
    v31[2] = vcvtq_f64_f32(*(float32x2_t *)(v12 + 240));
    v31[3] = v26;
    float64x2_t v27 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1688));
    v31[4] = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1680));
    v31[5] = v27;
    float64x2_t v28 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1448));
    v31[6] = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1440));
    v31[7] = v28;
    if ((a9 & 0x40000) != 0) {
      uint64_t v29 = *(void *)(*((void *)v10 + 2) + 8);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = v29;
    return CA::OGL::emit_quad_surround((uint64_t)v10, (const double *)v31, &v30);
  }
  return result;
}

void CA::OGL::emit_n_part_rect_large(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, int a11)
{
  v119 = a5;
  uint64_t v128 = a2;
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  uint64_t v123 = a3 + 1;
  unsigned int v17 = *(float32x4_t **)(a1 + 120);
  uint64_t v18 = *(void *)(a1 + 136);
  v122 = (CA::OGL::Context *)a1;
  v127 = (const double *)(2 * v123);
  if (2 * (int)v123 <= v18)
  {
    uint64_t v83 = v18;
    MEMORY[0x1F4188790](a1);
    int v23 = (char *)&v83 - v22;
    bzero((char *)&v83 - v22, v24);
    unint64_t v25 = (unint64_t)(v23 + 15);
    uint64_t v19 = v122;
    unint64_t v125 = v25 & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x1F4188790](v26);
    v126 = (unsigned __int16 *)((char *)&v83 - v27);
    bzero((char *)&v83 - v27, v28);
    float32x2_t v84 = v17;
  }
  else
  {
    uint64_t v19 = (CA::OGL::Context *)a1;
    uint64_t v20 = (2 * v123);
    BOOL v21 = (float32x4_t *)malloc_type_malloc(80 * v20 + 8 * a3, 0x21F97361uLL);
    if (!v21) {
      return;
    }
    uint64_t v83 = v18;
    float32x2_t v84 = v17;
    unint64_t v125 = (unint64_t)&v21[3 * v20];
    v126 = (unsigned __int16 *)(v125 + 32 * v20);
    *((void *)v19 + 15) = v21;
    *((void *)v19 + 17) = v20;
    unsigned int v17 = v21;
  }
  BOOL v29 = CA::OGL::Context::need_transparent_source(v19);
  int v120 = a11;
  long long v136 = 0u;
  long long v137 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  unsigned int v121 = v29 | ((a11 & 0x40000u) >> 18);
  long long v130 = 0u;
  long long v131 = 0u;
  unint64_t v124 = (a4 - 1);
  uint64_t v30 = (float64x2_t *)v125;
  if (a4 >= 1)
  {
    unint64_t v31 = 0;
    int v108 = a3 + 2;
    float64x2_t v107 = v126 + 4;
    int v103 = 2 * a3;
    int v102 = v126 + 8;
    int8x16_t v109 = &v17[3 * v123];
    uint64_t v32 = 48 * v123;
    v101 = v17 + 3;
    float v106 = &v17[3 * a3];
    int v105 = a3 - 1;
    __int32 v100 = &v17[3 * a3 - 3];
    int v104 = v123 + a3;
    f32 = v17[3 * (int)v123 + 3 * a3].f32;
    uint64_t v91 = (double *)&v134 + 1;
    CGRect v90 = (double *)&v135;
    CGRect v89 = (double *)&v135 + 1;
    unint64_t v88 = (double *)&v136;
    uint64_t v87 = (double *)&v136 + 1;
    uint64_t v86 = (double *)&v137;
    float32x2_t v85 = (char *)&v137 + 8;
    int32x2_t v99 = (double *)&v130 + 1;
    int32x2_t v98 = (double *)&v131;
    unsigned __int32 v97 = (double *)&v131 + 1;
    uint32x2_t v96 = (double *)&v132;
    uint32x2_t v95 = (double *)&v132 + 1;
    int32x2_t v94 = (double *)&v133;
    uint64_t v93 = (char *)&v133 + 8;
    uint64_t v117 = a4;
    long long v33 = xmmword_184997D60;
    unint64_t v34 = v125 + 8;
    uint64_t v35 = 32 * v123;
    uint64_t v36 = &v17[1].i8[12];
    int v37 = a3 - 2;
    long long v110 = v17 + 2;
    uint64_t v38 = v123;
    uint64_t v118 = 48 * v123;
    long long v116 = xmmword_184997D60;
    unint64_t v115 = v125 + 8;
    uint64_t v114 = 32 * v123;
    v113 = &v17[1].i8[12];
    int v112 = a3 - 2;
    uint64_t v111 = v123;
    do
    {
      uint64_t v39 = 0;
      char v40 = 1;
      float64x2_t v41 = v119;
      unint64_t v43 = v127;
      uint64_t v42 = v128;
      do
      {
        char v44 = v40;
        if ((a3 & 0x80000000) == 0)
        {
          unint64_t v45 = v39 + v31;
          unint64_t v46 = v34 + v35 * v39;
          uint64_t v47 = v41;
          unint64_t v48 = a7;
          int8x16_t v49 = a9;
          uint64_t v50 = v38;
          float64x2_t v51 = &v36[v32 * v39];
          do
          {
            *(void *)(v46 - 8) = *v47;
            *(void *)unint64_t v46 = *(void *)(a6 + 8 * v45);
            *(_OWORD *)(v46 + 8) = v33;
            if (a7)
            {
              *((_DWORD *)v51 - 3) = *v48;
              *((_DWORD *)v51 - 2) = *(_DWORD *)(a8 + 4 * v45);
            }
            if (a9)
            {
              *((_DWORD *)v51 - 1) = *v49;
              *(_DWORD *)float64x2_t v51 = *(_DWORD *)(a10 + 4 * v45);
            }
            ++v49;
            ++v48;
            ++v47;
            v46 += 32;
            v51 += 48;
            --v50;
          }
          while (v50);
        }
        char v40 = 0;
        uint64_t v39 = 1;
      }
      while ((v44 & 1) != 0);
      if (!v31 || v31 == v124)
      {
        uint64_t v53 = v126;
        uint64_t v54 = v126;
        if (a3 < 1) {
          goto LABEL_30;
        }
        int v56 = 0;
        int32x4_t v57 = v126;
        do
        {
          unsigned __int16 *v57 = v56;
          v57[1] = v56 + 1;
          v57[2] = a3 + v56 + 2;
          uint64_t v54 = v57 + 4;
          v57[3] = a3 + v56++ + 1;
          v57 += 4;
        }
        while (a3 != v56);
      }
      else
      {
        unint64_t v52 = v126;
        *(_DWORD *)v126 = 0x10000;
        v52[2] = v108;
        uint64_t v53 = (unsigned __int16 *)v107;
        uint64_t v54 = (unsigned __int16 *)v107;
        v52[3] = v123;
        if (a3 < 2) {
          goto LABEL_30;
        }
        uint64_t v55 = v126;
        v126[4] = v105;
        v55[5] = a3;
        v55[6] = v104;
        uint64_t v54 = (unsigned __int16 *)v102;
        v55[7] = v103;
      }
      if (v31 && v31 < v124 && a3 >= 3)
      {
        int v58 = 0;
        uint64_t v59 = v54;
        do
        {
          *uint64_t v59 = v58 + 1;
          v59[1] = v58 + 2;
          v59[2] = a3 + v58 + 3;
          uint64_t v53 = v59 + 4;
          v59[3] = a3 + v58++ + 2;
          v59 += 4;
        }
        while (v37 != v58);
      }
      else
      {
        uint64_t v53 = v54;
      }
LABEL_30:
      if (v123)
      {
        uint64_t v60 = *(void *)(*((void *)v122 + 2) + 8);
        unint64_t v61 = (uint64_t *)v110;
        unint64_t v62 = v43;
        do
        {
          *unint64_t v61 = v60;
          v61 += 6;
          unint64_t v62 = (const double *)((char *)v62 - 1);
        }
        while (v62);
      }
      unint64_t v63 = *(void (**)(void))(v42 + 24);
      if (v63)
      {
        v63();
        uint64_t v30 = (float64x2_t *)v125;
        unint64_t v43 = v127;
        uint64_t v42 = v128;
      }
      CA::OGL::transform_vertices(v30, v17, v43, *(float64x2_t **)(v42 + 8));
      uint64_t v64 = v128;
      double v65 = *(void (**)(uint64_t, float32x4_t *, const double *))(v128 + 32);
      if (v65)
      {
        v65(v128, v17, v127);
        uint64_t v64 = v128;
      }
      int v66 = *(_DWORD *)(v64 + 20);
      if ((v66 & 0xF) != 0 && (*(unsigned char *)(v64 + 16) & 9) != 0)
      {
        if (!v31 && (v66 & 4) != 0)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v17, (uint64_t)v109, 48, v123);
          uint64_t v64 = v128;
          int v66 = *(_DWORD *)(v128 + 20);
        }
        if (v31 == v124 && (v66 & 8) != 0)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v109, (uint64_t)v17, 48, v123);
          uint64_t v64 = v128;
          int v66 = *(_DWORD *)(v128 + 20);
        }
        if (v66)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v17, (uint64_t)v101, 0, 1);
          uint64_t v64 = v128;
          int v66 = *(_DWORD *)(v128 + 20);
        }
        if ((v66 & 2) != 0)
        {
          CA::OGL::aa_adjust_vertices((uint64_t)v106, (uint64_t)v100, 0, 1);
          uint64_t v64 = v128;
        }
      }
      if (!v121) {
        goto LABEL_55;
      }
      if (!v31)
      {
        CGSize v67 = (float *)v17;
        CGRect v68 = v99;
        BOOL v69 = v98;
        int v70 = v97;
        uint64_t v71 = (float *)v106;
        *(double *)&long long v130 = v17->f32[0];
        unint64_t v72 = v96;
        uint64_t v73 = v95;
        unint64_t v74 = v94;
        uint64_t v75 = &v126;
        goto LABEL_54;
      }
      if (v31 == v124)
      {
        CGSize v67 = f32;
        CGRect v68 = v91;
        BOOL v69 = v90;
        int v70 = v89;
        uint64_t v71 = (float *)v109;
        *(double *)&long long v134 = *f32;
        unint64_t v72 = v88;
        uint64_t v73 = v87;
        unint64_t v74 = v86;
        uint64_t v75 = (unsigned __int16 **)&v117;
LABEL_54:
        uint64_t v76 = (double *)*(v75 - 32);
        float v77 = v67[2];
        *CGRect v68 = v67[1];
        *BOOL v69 = v77;
        *int v70 = v67[3];
        float v78 = v71[1];
        *unint64_t v72 = *v71;
        *uint64_t v73 = v78;
        float v79 = v71[3];
        *unint64_t v74 = v71[2];
        *uint64_t v76 = v79;
      }
LABEL_55:
      unint64_t v80 = v53 - v54;
      uint64_t v19 = v122;
      CA::OGL::emit_mesh_with_center((uint64_t)v122, v64, v126, v53 - v126, v80, v127, v120);
      ++v31;
      uint64_t v30 = (float64x2_t *)v125;
      uint64_t v32 = v118;
      long long v33 = v116;
      unint64_t v34 = v115;
      uint64_t v35 = v114;
      uint64_t v36 = v113;
      int v37 = v112;
      uint64_t v38 = v111;
    }
    while (v31 != v117);
  }
  if (v17 != v84)
  {
    uint64_t v81 = v83;
    *((void *)v19 + 15) = v84;
    *((void *)v19 + 17) = v81;
    free(v17);
  }
  if (v121)
  {
    if ((v120 & 0x40000) != 0) {
      uint64_t v82 = *(void *)(*((void *)v19 + 2) + 8);
    }
    else {
      uint64_t v82 = 0;
    }
    uint64_t v129 = v82;
    CA::OGL::emit_quad_surround((uint64_t)v19, (const double *)&v130, &v129);
  }
}

void CA::OGL::emit_eight_part_rect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  v55[78] = *MEMORY[0x1E4F143B8];
  bzero(&v54, 0x280uLL);
  if ((a9 & 0x3C00000) != 0) {
    unint64_t v17 = 20;
  }
  else {
    unint64_t v17 = 16;
  }
  float64x2_t v51 = (CA::OGL::Context *)a1;
  if (v17 > *(unsigned int *)(a1 + 136)) {
    return;
  }
  uint64_t v18 = 0;
  uint64_t v19 = *(void *)(a1 + 120);
  uint64_t v20 = (_DWORD *)(v19 + 28);
  BOOL v21 = v55;
  __n128 v22 = (__n128)xmmword_184997D60;
  do
  {
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(a4 + 8 * v18);
    unint64_t v25 = v21;
    uint64_t v26 = v20;
    do
    {
      *((void *)v25 - 2) = *(void *)(a3 + 8 * v23);
      *((void *)v25 - 1) = v24;
      *unint64_t v25 = xmmword_184997D60;
      v25 += 2;
      *(v26 - 3) = *(_DWORD *)(a5 + 4 * v23);
      *(v26 - 2) = *(_DWORD *)(a6 + 4 * v18);
      *(v26 - 1) = *(_DWORD *)(a7 + 4 * v23);
      *uint64_t v26 = *(_DWORD *)(a8 + 4 * v18);
      v26 += 12;
      ++v23;
    }
    while (v23 != 4);
    ++v18;
    v20 += 48;
    v21 += 16;
  }
  while (v18 != 4);
  if ((a9 & 0x3C00000) != 0) {
    v22.n128_f32[0] = CA::OGL::adjust_skipped_corner_vertices_simple(&v54, v19, 4, 4uLL, a9);
  }
  uint64_t v27 = 0;
  uint64_t v28 = *(void *)(*((void *)v51 + 2) + 8);
  do
  {
    *(void *)(v19 + v27 + 32) = v28;
    v27 += 48;
  }
  while (48 * v17 != v27);
  BOOL v29 = *(void (**)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128))(a2 + 24);
  if (v29) {
    v29(a2, &v54, v19, v17, v22);
  }
  CA::OGL::transform_vertices(&v54, (float32x4_t *)v19, (const double *)v17, *(float64x2_t **)(a2 + 8));
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, unint64_t))(a2 + 32);
  if (v30) {
    v30(a2, v19, v17);
  }
  if ((*(unsigned char *)(a2 + 16) & 9) != 0)
  {
    int v31 = *(_DWORD *)(a2 + 20);
    if ((v31 & 0xF) == 0) {
      goto LABEL_24;
    }
    if ((v31 & 4) != 0)
    {
      CA::OGL::aa_adjust_vertices(v19, v19 + 192, 48, 4);
      int v31 = *(_DWORD *)(a2 + 20);
      if ((v31 & 8) == 0)
      {
LABEL_21:
        if ((v31 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_42;
      }
    }
    else if ((v31 & 8) == 0)
    {
      goto LABEL_21;
    }
    CA::OGL::aa_adjust_vertices(v19 + 576, v19 + 384, 48, 4);
    int v31 = *(_DWORD *)(a2 + 20);
    if ((v31 & 1) == 0)
    {
LABEL_22:
      if ((v31 & 2) != 0) {
LABEL_23:
      }
        CA::OGL::aa_adjust_vertices(v19 + 144, v19 + 96, 192, 4);
LABEL_24:
      CA::OGL::aa_adjust_vertices(v19 + 240, v19 + 48, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 432, v19 + 624, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 240, v19 + 192, 192, 2);
      CA::OGL::aa_adjust_vertices(v19 + 288, v19 + 336, 192, 2);
      goto LABEL_25;
    }
LABEL_42:
    CA::OGL::aa_adjust_vertices(v19, v19 + 48, 192, 4);
    if ((*(_DWORD *)(a2 + 20) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_25:
  BOOL v32 = CA::OGL::Context::need_transparent_source(v51);
  if ((a9 & 0x3C00000) != 0)
  {
    long long v33 = (const unsigned __int16 *)&CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::skipped_corner_indices;
    uint64_t v34 = (uint64_t)v51;
    unint64_t v35 = 32;
    unsigned int v36 = 20;
  }
  else
  {
    long long v33 = (const unsigned __int16 *)&CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::corner_indices;
    uint64_t v34 = (uint64_t)v51;
    unint64_t v35 = 16;
    unsigned int v36 = 16;
  }
  CA::OGL::emit_quad_indices(v34, *(float64x2_t **)(a2 + 40), v33, v35, v36);
  uint64_t v37 = 0;
  unsigned int v38 = v32 | ((a9 & 0x40000) >> 18);
  do
  {
    uint64_t v39 = v19 + v37;
    int v40 = *(_DWORD *)(v19 + v37 + 20);
    *(_DWORD *)(v39 + 20) = *(_DWORD *)(v19 + v37 + 28);
    *(_DWORD *)(v39 + 28) = v40;
    v37 += 48;
  }
  while (48 * v17 != v37);
  CA::OGL::emit_quad_indices((uint64_t)v51, *(float64x2_t **)(a2 + 40), CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::edge0_indices, 8uLL, v17);
  uint64_t v41 = 0;
  do
  {
    *(int8x16_t *)(v19 + v41 + 16) = vextq_s8(*(int8x16_t *)(v19 + v41 + 16), *(int8x16_t *)(v19 + v41 + 16), 8uLL);
    v41 += 48;
  }
  while (48 * v17 != v41);
  CA::OGL::emit_quad_indices((uint64_t)v51, *(float64x2_t **)(a2 + 40), CA::OGL::emit_eight_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::edge1_indices, 8uLL, v17);
  uint64_t v42 = 0;
  do
  {
    uint64_t v43 = v19 + v42;
    int v44 = *(_DWORD *)(v19 + v42 + 16);
    *(_DWORD *)(v43 + 16) = *(_DWORD *)(v19 + v42 + 24);
    *(_DWORD *)(v43 + 24) = v44;
    v42 += 48;
  }
  while (48 * v17 != v42);
  if (v38)
  {
    float64x2_t v45 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 8));
    v53[0] = vcvtq_f64_f32(*(float32x2_t *)v19);
    v53[1] = v45;
    float64x2_t v46 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 152));
    v53[2] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 144));
    v53[3] = v46;
    float64x2_t v47 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 728));
    v53[4] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 720));
    v53[5] = v47;
    float64x2_t v48 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 584));
    v53[6] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 576));
    v53[7] = v48;
    if ((a9 & 0x40000) != 0)
    {
      uint64_t v49 = (uint64_t)v51;
      uint64_t v50 = *(void *)(*((void *)v51 + 2) + 8);
    }
    else
    {
      uint64_t v50 = 0;
      uint64_t v49 = (uint64_t)v51;
    }
    uint64_t v52 = v50;
    CA::OGL::emit_quad_surround(v49, (const double *)v53, &v52);
  }
}

void CA::OGL::emit_twenty_four_part_rect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  v54[158] = *MEMORY[0x1E4F143B8];
  bzero(&v53, 0x500uLL);
  if ((a9 & 0x3C00000) != 0) {
    unint64_t v17 = 40;
  }
  else {
    unint64_t v17 = 36;
  }
  uint64_t v50 = (CA::OGL::Context *)a1;
  if (v17 <= *(unsigned int *)(a1 + 136))
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(a1 + 120);
    uint64_t v20 = (_DWORD *)(v19 + 28);
    BOOL v21 = v54;
    __n128 v22 = (__n128)xmmword_184997D60;
    do
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(a4 + 8 * v18);
      unint64_t v25 = v21;
      uint64_t v26 = v20;
      do
      {
        *((void *)v25 - 2) = *(void *)(a3 + 8 * v23);
        *((void *)v25 - 1) = v24;
        *unint64_t v25 = xmmword_184997D60;
        v25 += 2;
        *(v26 - 3) = *(_DWORD *)(a5 + 4 * v23);
        *(v26 - 2) = *(_DWORD *)(a6 + 4 * v18);
        *(v26 - 1) = *(_DWORD *)(a7 + 4 * v23);
        *uint64_t v26 = *(_DWORD *)(a8 + 4 * v18);
        v26 += 12;
        ++v23;
      }
      while (v23 != 6);
      ++v18;
      v20 += 72;
      v21 += 24;
    }
    while (v18 != 6);
    if ((a9 & 0x3C00000) != 0) {
      v22.n128_f32[0] = CA::OGL::adjust_skipped_corner_vertices_simple(&v53, v19, 6, 4uLL, a9);
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(*((void *)v50 + 2) + 8);
    do
    {
      *(void *)(v19 + v27 + 32) = v28;
      v27 += 48;
    }
    while (48 * v17 != v27);
    BOOL v29 = *(void (**)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128))(a2 + 24);
    if (v29) {
      v29(a2, &v53, v19, v17, v22);
    }
    CA::OGL::transform_vertices(&v53, (float32x4_t *)v19, (const double *)v17, *(float64x2_t **)(a2 + 8));
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, unint64_t))(a2 + 32);
    if (v30) {
      v30(a2, v19, v17);
    }
    if ((*(unsigned char *)(a2 + 16) & 9) != 0)
    {
      CA::OGL::aa_adjust_vertices(v19, v19 + 288, 48, 6);
      CA::OGL::aa_adjust_vertices(v19 + 1440, v19 + 1152, 48, 6);
      CA::OGL::aa_adjust_vertices(v19, v19 + 48, 288, 6);
      CA::OGL::aa_adjust_vertices(v19 + 240, v19 + 192, 288, 6);
      CA::OGL::aa_adjust_vertices(v19 + 672, v19 + 384, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 960, v19 + 1248, 48, 2);
      CA::OGL::aa_adjust_vertices(v19 + 672, v19 + 624, 288, 2);
      CA::OGL::aa_adjust_vertices(v19 + 720, v19 + 768, 288, 2);
    }
    BOOL v31 = CA::OGL::Context::need_transparent_source(v50);
    if ((a9 & 0x3C00000) != 0)
    {
      BOOL v32 = (const unsigned __int16 *)&CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::corner_skipped_outer_indices;
      uint64_t v33 = (uint64_t)v50;
      unint64_t v34 = 96;
      unsigned int v35 = 40;
    }
    else
    {
      BOOL v32 = (const unsigned __int16 *)&CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::outer_indices;
      uint64_t v33 = (uint64_t)v50;
      unint64_t v34 = 80;
      unsigned int v35 = 36;
    }
    CA::OGL::emit_quad_indices(v33, *(float64x2_t **)(a2 + 40), v32, v34, v35);
    uint64_t v36 = 0;
    unsigned int v37 = v31 | ((a9 & 0x40000) >> 18);
    do
    {
      uint64_t v38 = v19 + v36;
      int v39 = *(_DWORD *)(v19 + v36 + 20);
      *(_DWORD *)(v38 + 20) = *(_DWORD *)(v19 + v36 + 28);
      *(_DWORD *)(v38 + 28) = v39;
      v36 += 48;
    }
    while (48 * v17 != v36);
    CA::OGL::emit_quad_indices((uint64_t)v50, *(float64x2_t **)(a2 + 40), CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::inner0_indices, 8uLL, v17);
    uint64_t v40 = 0;
    do
    {
      *(int8x16_t *)(v19 + v40 + 16) = vextq_s8(*(int8x16_t *)(v19 + v40 + 16), *(int8x16_t *)(v19 + v40 + 16), 8uLL);
      v40 += 48;
    }
    while (48 * v17 != v40);
    CA::OGL::emit_quad_indices((uint64_t)v50, *(float64x2_t **)(a2 + 40), CA::OGL::emit_twenty_four_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::inner1_indices, 8uLL, v17);
    uint64_t v41 = 0;
    do
    {
      uint64_t v42 = v19 + v41;
      int v43 = *(_DWORD *)(v19 + v41 + 16);
      *(_DWORD *)(v42 + 16) = *(_DWORD *)(v19 + v41 + 24);
      *(_DWORD *)(v42 + 24) = v43;
      v41 += 48;
    }
    while (48 * v17 != v41);
    if (v37)
    {
      float64x2_t v44 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 8));
      v52[0] = vcvtq_f64_f32(*(float32x2_t *)v19);
      v52[1] = v44;
      float64x2_t v45 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 248));
      v52[2] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 240));
      v52[3] = v45;
      float64x2_t v46 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1688));
      v52[4] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1680));
      v52[5] = v46;
      float64x2_t v47 = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1448));
      v52[6] = vcvtq_f64_f32(*(float32x2_t *)(v19 + 1440));
      v52[7] = v47;
      if ((a9 & 0x40000) != 0)
      {
        uint64_t v48 = (uint64_t)v50;
        uint64_t v49 = *(void *)(*((void *)v50 + 2) + 8);
      }
      else
      {
        uint64_t v49 = 0;
        uint64_t v48 = (uint64_t)v50;
      }
      uint64_t v51 = v49;
      CA::OGL::emit_quad_surround(v48, (const double *)v52, &v51);
    }
  }
}

uint64_t CA::OGL::anonymous namespace'::prepare_9_slice_aa(CA::OGL::_anonymous_namespace_ *this, double a2, double a3, double a4, double a5, float64x2_t a6, const float *a7, const float *a8, const float *a9, double *a10, double *a11, float *a12, float *a13, double a14)
{
  *(float *)&a14 = *a8 + (float)((float)(a8[1] - *a8) * 0.5);
  *a10 = a2;
  if (a4 > a2 || a5 < a3)
  {
    if (a3 < a4) {
      a4 = a3;
    }
    if (a4 >= a2) {
      double v16 = a4;
    }
    else {
      double v16 = a2;
    }
    double v17 = a6.f64[0] + a2;
    a10[1] = a6.f64[0] + a2;
    a10[2] = v16;
    if (a3 >= a5) {
      double v18 = a5;
    }
    else {
      double v18 = a3;
    }
    if (v18 < a2) {
      double v18 = a2;
    }
    double v19 = a3 - a6.f64[0];
    a10[3] = v18;
    a10[4] = a3 - a6.f64[0];
    a10[5] = a3;
    float v20 = a6.f64[0] / (v16 - a2);
    float v21 = a6.f64[0] / (a3 - (v18 + a2));
    float v22 = *(float *)this;
    *(_DWORD *)a11 = *(_DWORD *)this;
    float v23 = *((float *)this + 2);
    *((float *)a11 + 5) = v23;
    float v24 = *a7 * (float)(v23 - v22);
    *((float *)a11 + 2) = v24 + v22;
    float v25 = v22 + (float)(a7[2] * (float)(v23 - v22));
    *((float *)a11 + 1) = v22 + (float)(v24 * v20);
    *((float *)a11 + 3) = v25;
    *((float *)a11 + 4) = v23 + (float)((float)(v25 - v23) * v21);
    int v26 = LODWORD(a14);
    if (a9) {
      int v26 = *(_DWORD *)a8;
    }
    *(_DWORD *)a12 = v26;
    *(int32x4_t *)(a12 + 1) = vdupq_lane_s32(*(int32x2_t *)&a14, 0);
    if ((a9 & 2) != 0) {
      *(float *)&a14 = a8[1];
    }
    a12[5] = *(float *)&a14;
    if (v16 > v18)
    {
      double v18 = (v18 + v16) * 0.5;
      a10[2] = v18;
      a10[3] = v18;
      double v16 = v18;
    }
    if (v17 > v16)
    {
      a10[1] = v16;
      *((_DWORD *)a11 + 1) = *((_DWORD *)a11 + 2);
      a12[1] = a12[2];
    }
    if (v19 < v18)
    {
      a10[4] = v18;
      *((_DWORD *)a11 + 4) = *((_DWORD *)a11 + 3);
      a12[4] = a12[3];
    }
    return 5;
  }
  else
  {
    double v28 = a6.f64[0] + a2;
    double v29 = a3 - a6.f64[0];
    a10[1] = a6.f64[0] + a2;
    a10[2] = a3 - a6.f64[0];
    a10[3] = a3;
    v14.i32[0] = *(_DWORD *)this;
    *(_DWORD *)a11 = *(_DWORD *)this;
    float v30 = *((float *)this + 2);
    *((float *)a11 + 3) = v30;
    a6.f64[1] = a3 - a6.f64[0] - a2;
    *(float32x2_t *)((char *)a11 + 4) = vmla_n_f32((float32x2_t)vdup_lane_s32(v14, 0), vcvt_f32_f64(vmulq_n_f64(a6, 1.0 / (a3 - a2))), v30 - *(float *)v14.i32);
    int v31 = LODWORD(a14);
    if (a9) {
      int v31 = *(_DWORD *)a8;
    }
    *(_DWORD *)a12 = v31;
    a12[1] = *(float *)&a14;
    a12[2] = *(float *)&a14;
    if ((a9 & 2) != 0) {
      *(float *)&a14 = a8[1];
    }
    a12[3] = *(float *)&a14;
    if (v28 > v29)
    {
      double v32 = (a3 + a2) * 0.5;
      a10[1] = v32;
      a10[2] = v32;
    }
    return 3;
  }
}

CA::OGL::Context *CA::OGL::fill_uneven_round_rect(CA::OGL::Context *result, uint64_t a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, int32x2_t a10)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(float64x2_t **)a2;
  double v11 = *(double *)(*(void *)a2 + 16);
  if (v11 >= *(double *)(*(void *)a2 + 24)) {
    double v11 = *(double *)(*(void *)a2 + 24);
  }
  if (v11 > 0.0)
  {
    uint64_t v15 = result;
    float64_t v16 = *a3;
    double v17 = a3[2];
    if (*a3 == v17)
    {
      double v18 = a3[1];
      double v19 = a3[3];
      if (v18 == v19)
      {
        double v20 = a3[4];
        if (v17 == v20)
        {
          double v21 = a3[5];
          if (v19 == v21 && v20 == a3[6] && v21 == a3[7])
          {
            return (CA::OGL::Context *)CA::OGL::fill_round_rect((uint64_t)result, (float64x2_t **)a2, (double *)0xF, a4, v16, v18);
          }
        }
      }
    }
    double v69 = 0.0;
    double v70 = 0.0;
    uint64_t v22 = *(void *)(a2 + 8);
    if ((*(unsigned char *)(v22 + 144) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v22, &v70, &v69, a4);
    }
    else
    {
      double v69 = *(double *)(v22 + 128);
      double v70 = v69;
    }
    uint64_t v23 = 0;
    double v24 = 0.0;
    do
    {
      double v25 = a3[v23];
      if (v25 <= a3[v23 + 1]) {
        double v25 = a3[v23 + 1];
      }
      if (v24 <= v25) {
        double v24 = v25;
      }
      v23 += 2;
    }
    while (v23 != 8);
    v26.f64[0] = v70;
    if (v70 <= v69) {
      double v27 = v69;
    }
    else {
      double v27 = v70;
    }
    double v28 = v27 * v24;
    if (a4) {
      double v28 = v28 * 1.528665;
    }
    int32x2_t v29 = COERCE_INT32X2_T(1.0);
    if (v28 < 1.0) {
      return (CA::OGL::Context *)CA::OGL::fill_rect((uint64_t)v15, a2, a3, a4);
    }
    uint64_t v30 = 0;
    double v31 = v10->f64[0];
    double v32 = v10->f64[1];
    v26.f64[1] = v69;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v38 = v10[1];
    long long v80 = 0u;
    long long v81 = 0u;
    int8x16_t v39 = (int8x16_t)vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(_Q0, v26)));
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v67 = v38;
    float64x2_t v41 = vdivq_f64((float64x2_t)_Q0, v38);
    v29.i32[0] = (int)a4;
    float32x2_t v42 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
    do
    {
      a10.i32[0] = 0;
      float32x2_t v43 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)&a3[2 * v30], (float64x2_t)v39), *(int8x16_t *)&a3[2 * v30], v39), v41));
      a10 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v29, a10), 0), (int8x8_t)v43, (int8x8_t)vmul_f32(v43, v42));
      *((double *)&v80 + v30++) = *(double *)&a10;
    }
    while (v30 != 4);
    uint64_t v44 = *((void *)v15 + 2);
    unint64_t v45 = *(void *)(v44 + 16) & 0xFFFFFF00FF00FF00;
    int v46 = *(void *)(v44 + 8) == 0x3C003C003C003C00 ? 1 : 3;
    *(_DWORD *)(v44 + 16) = v46 | v45;
    *(_DWORD *)(v44 + 20) = HIDWORD(v45);
    uint64_t v79 = 0;
    if (a4)
    {
      v47.i64[0] = __PAIR64__(HIDWORD(v80), v80);
      v48.i64[0] = __PAIR64__(DWORD1(v81), DWORD2(v80));
      v48.i64[1] = __PAIR64__(DWORD1(v80), DWORD2(v81));
      v47.i64[1] = __PAIR64__(HIDWORD(v81), v81);
      float32x4_t v49 = vaddq_f32(v48, v47);
      float64x2_t v50 = (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL);
      int8x16_t v51 = (int8x16_t)vsubq_f64(v50, vdivq_f64(v50, vcvt_hight_f64_f32(v49)));
      int8x16_t v52 = (int8x16_t)vsubq_f64(v50, vdivq_f64(v50, vcvtq_f64_f32(*(float32x2_t *)v49.f32)));
      int8x16_t v53 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v51, (float64x2_t)_Q0), _Q0, v51);
      int8x16_t v54 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v52, (float64x2_t)_Q0), _Q0, v52);
      v72[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v54, (int8x16_t)vcltzq_f64((float64x2_t)v54))), (float64x2_t)vbicq_s8(v53, (int8x16_t)vcltzq_f64((float64x2_t)v53)));
      float result = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, void, long long *, uint64_t *, double *, float64x2_t *))(*(void *)v15 + 488))(v15, 0, &v80, &v79, a4, v72);
    }
    else
    {
      float result = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, void, long long *, uint64_t *))(*(void *)v15 + 480))(v15, 0, &v80, &v79);
    }
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    v72[1] = 0u;
    if ((*((_DWORD *)v15 + 34) & 0xFFFFFFFC) != 0)
    {
      uint64_t v55 = *((void *)v15 + 15);
      for (uint64_t i = 1; i != 9; i += 2)
        v72[i] = (float64x2_t)xmmword_184997D60;
      v72[0].f64[0] = v31;
      v72[0].f64[1] = v32;
      *(double *)&long long v73 = v67.f64[0] + v31;
      *((double *)&v73 + 1) = v32;
      *(double *)&long long v75 = v31;
      *((double *)&v75 + 1) = v67.f64[1] + v32;
      *(double *)&long long v77 = v67.f64[0] + v31;
      *((double *)&v77 + 1) = v67.f64[1] + v32;
      uint64_t v57 = v79;
      *(_DWORD *)(v55 + 64) = HIDWORD(v79);
      *(_DWORD *)(v55 + 68) = v57;
      *(_DWORD *)(v55 + 16) = v57;
      *(_DWORD *)(v55 + 20) = v57;
      *(_DWORD *)(v55 + 160) = HIDWORD(v57);
      *(_DWORD *)(v55 + 164) = HIDWORD(v57);
      *(void *)(v55 + 112) = v57;
      uint64_t v58 = *(void *)(*((void *)v15 + 2) + 8);
      for (uint64_t j = 32; j != 224; j += 48)
        *(void *)(v55 + j) = v58;
      uint64_t v60 = *(void (**)(uint64_t, float64x2_t *, uint64_t, uint64_t))(a2 + 24);
      if (v60) {
        v60(a2, v72, v55, 4);
      }
      CA::OGL::transform_vertices(v72, (float32x4_t *)v55, (const double *)4, *(float64x2_t **)(a2 + 8));
      unint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
      if (v61) {
        v61(a2, v55, 4);
      }
      int v62 = *(_DWORD *)(a2 + 20);
      if ((v62 & 0xF) == 0 || (*(unsigned char *)(a2 + 16) & 9) == 0) {
        goto LABEL_54;
      }
      if ((v62 & 4) != 0)
      {
        CA::OGL::aa_adjust_vertices(v55, v55 + 96, 48, 2);
        int v62 = *(_DWORD *)(a2 + 20);
      }
      if ((v62 & 8) != 0)
      {
        CA::OGL::aa_adjust_vertices(v55 + 96, v55, 48, 2);
        int v62 = *(_DWORD *)(a2 + 20);
        if ((v62 & 1) == 0)
        {
LABEL_52:
          if ((v62 & 2) == 0) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
      }
      else if ((v62 & 1) == 0)
      {
        goto LABEL_52;
      }
      CA::OGL::aa_adjust_vertices(v55, v55 + 48, 96, 2);
      if ((*(_DWORD *)(a2 + 20) & 2) == 0)
      {
LABEL_54:
        BOOL v63 = CA::OGL::Context::need_transparent_source(v15);
        CA::OGL::emit_quad_indices((uint64_t)v15, *(float64x2_t **)(a2 + 40), CA::OGL::fill_uneven_round_rect(CA::OGL::Context &,CA::OGL::RectState const&,CA::Vec2<double> *,unsigned int)::indices, 4uLL, 4u);
        float result = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, void, void))(*(void *)v15 + 520))(v15, 0, 0);
        *(unsigned char *)(*((void *)v15 + 2) + 16) = 0;
        if (v63)
        {
          float64x2_t v64 = vcvtq_f64_f32(*(float32x2_t *)(v55 + 8));
          v71[0] = vcvtq_f64_f32(*(float32x2_t *)v55);
          v71[1] = v64;
          float64x2_t v65 = vcvtq_f64_f32(*(float32x2_t *)(v55 + 56));
          v71[2] = vcvtq_f64_f32(*(float32x2_t *)(v55 + 48));
          v71[3] = v65;
          float64x2_t v66 = vcvtq_f64_f32(*(float32x2_t *)(v55 + 152));
          v71[4] = vcvtq_f64_f32(*(float32x2_t *)(v55 + 144));
          v71[5] = v66;
          v66.f64[0] = *(float64_t *)(v55 + 104);
          v71[6] = vcvtq_f64_f32(*(float32x2_t *)(v55 + 96));
          v71[7] = vcvtq_f64_f32(*(float32x2_t *)&v66.f64[0]);
          uint64_t v68 = 0;
          return (CA::OGL::Context *)CA::OGL::emit_quad_surround((uint64_t)v15, (const double *)v71, &v68);
        }
        return result;
      }
LABEL_53:
      CA::OGL::aa_adjust_vertices(v55 + 48, v55, 96, 2);
      goto LABEL_54;
    }
  }
  return result;
}

uint64_t CA::OGL::fill_corner_rect(uint64_t result, double **a2, double *a3, double *a4, int a5, int a6, int a7, double a8, double a9)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  double v11 = (*a2)[2];
  if (v11 >= (*a2)[3]) {
    double v11 = (*a2)[3];
  }
  if (v11 > 0.0)
  {
    uint64_t v18 = result;
    double v36 = 0.0;
    double v37 = 0.0;
    double v19 = a2[1];
    if (((_BYTE)v19[18] & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v19, &v37, &v36, a4);
      double v20 = v37;
    }
    else
    {
      double v20 = v19[16];
      double v36 = v20;
      double v37 = v20;
    }
    if (v20 * a8 < 1.0 || !a7 || !a3 || v36 * a9 < 1.0) {
      return CA::OGL::fill_rect(v18, (uint64_t)a2, a3, a4);
    }
    float32x4_t v43 = 0uLL;
    unsigned int v21 = (*(_DWORD *)(v18 + 432) & 2) != 0 ? 2358 : 310;
    uint64_t v22 = a5 ? (double *)(v21 ^ 0x800) : (double *)v21;
    uint64_t v23 = *(void *)(v18 + 16);
    unint64_t v24 = *(void *)(v23 + 16) & 0xFFFFFF00FF00FF00;
    int v25 = *(void *)(v23 + 8) == 0x3C003C003C003C00 ? 1 : 3;
    *(_DWORD *)(v23 + 16) = v25 | v24;
    *(_DWORD *)(v23 + 20) = HIDWORD(v24);
    float64x2_t v26 = CA::OGL::Context::bind_image(v18, 0, (uint32x2_t *)a3, v22, 1u, 1, 0, 0, 0.0, &v43, 0);
    if (v26)
    {
      double v28 = v26;
      Rect v39 = 0;
      uint64_t v40 = 0;
      v38[0] = 0;
      v38[1] = 0;
      int32x2_t v29 = *a2;
      double v30 = (*a2)[1];
      v42[0] = **a2;
      v42[1] = v42[0] + a8;
      double v31 = v29[3];
      double v32 = v29[2] + v42[0];
      v42[2] = v32 - a8;
      v42[3] = v32;
      v41[0] = v30;
      v41[1] = v30 + a9;
      v41[2] = v31 + v30 - a9;
      v41[3] = v31 + v30;
      if (a6) {
        int v34 = 0x20000;
      }
      else {
        int v34 = 134348800;
      }
      unsigned int v35 = (v34 & 0xFC3FFFFF | ((a7 & 0xF) << 22)) ^ 0x3C00000;
      CA::OGL::emit_nine_part_rect(v18, (uint64_t)a2, (uint64_t)v42, (uint64_t)v41, (uint64_t)&v39, (uint64_t)v38, 0, 0, v35);
      float result = (*(uint64_t (**)(uint64_t, _OWORD *, void))(*(void *)v18 + 520))(v18, v28, 0);
      *(unsigned char *)(*(void *)(v18 + 16) + 16) = 0;
    }
    else
    {
      return CA::OGL::fill_rect(v18, (uint64_t)a2, a3, a4);
    }
  }
  return result;
}

void CA::OGL::stroke_rect(uint64_t a1, const CA::Transform **a2, double *a3, double *a4, double a5)
{
  uint64_t v263 = *MEMORY[0x1E4F143B8];
  if (a5 <= 0.001) {
    return;
  }
  unint64_t v8 = (double *)*a2;
  double v10 = *((double *)*a2 + 2);
  double v9 = *((double *)*a2 + 3);
  if (v10 >= v9) {
    double v11 = *((double *)*a2 + 3);
  }
  else {
    double v11 = *((double *)*a2 + 2);
  }
  if (v11 * 0.5 <= a5)
  {
    CA::OGL::fill_rect(a1, (uint64_t)a2, a3, a4);
  }
  else
  {
    if (v11 <= 0.0) {
      return;
    }
    uint64_t v12 = a2[1];
    if ((*((unsigned char *)v12 + 144) & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear(a2[1], (const double *)a2)
      || a2[3]
      || a2[4])
    {
      double v13 = v8[1];
      double v14 = *v8 + a5;
      v238.i64[0] = *(uint64_t *)v8;
      *(double *)&v238.i64[1] = v14;
      double v239 = v10 + *(double *)v238.i64 - a5;
      double v240 = v10 + *(double *)v238.i64;
      double v234 = v13;
      double v235 = v13 + a5;
      double v236 = v9 + v13 - a5;
      double v237 = v9 + v13;
      if (*((_DWORD *)a2 + 5) && (((_BYTE)a2[2] & 9) != 0 || vabdd_f64(a5, trunc(a5)) >= 0.001))
      {
        CA::OGL::stroke_round_rect((void *)a1, (float64x2_t **)a2, (double *)0xF, 0, 0.0, a5);
      }
      else
      {
        long long v261 = 0u;
        long long v262 = 0u;
        long long v259 = 0u;
        long long v260 = 0u;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        long long v251 = 0u;
        long long v252 = 0u;
        float64x2_t v249 = 0u;
        memset(v250, 0, sizeof(v250));
        if ((*(_DWORD *)(a1 + 136) & 0xFFFFFFF8) != 0)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *(void *)(a1 + 120);
          char v17 = 1;
          do
          {
            uint64_t v18 = 0;
            unint64_t v19 = 0;
            char v20 = v17;
            do
            {
              if (v18 == 96 || v18 == 0) {
                int v22 = v15;
              }
              else {
                int v22 = v15 ^ 3;
              }
              if (v19 >= 2) {
                unsigned int v23 = v15 ^ 3;
              }
              else {
                unsigned int v23 = v15;
              }
              uint64_t v24 = v238.i64[v22];
              int v25 = (char *)&v249 + 128 * v15 + v18;
              uint64_t v26 = *((void *)&v234 + v23);
              *(void *)int v25 = v24;
              *((void *)v25 + 1) = v26;
              *((_OWORD *)v25 + 1) = xmmword_184997D60;
              ++v19;
              v18 += 32;
            }
            while (v18 != 128);
            char v17 = 0;
            uint64_t v15 = 1;
          }
          while ((v20 & 1) != 0);
          uint64_t v27 = *(void *)(*(void *)(a1 + 16) + 8);
          for (uint64_t i = 32; i != 416; i += 48)
            *(void *)(v16 + i) = v27;
          int32x2_t v29 = a2[3];
          if (v29) {
            ((void (*)(const CA::Transform **, float64x2_t *, uint64_t, uint64_t, __n128))v29)(a2, &v249, v16, 8, (__n128)xmmword_184997D60);
          }
          CA::OGL::transform_vertices(&v249, (float32x4_t *)v16, (const double *)8, (float64x2_t *)a2[1]);
          double v30 = a2[4];
          if (v30) {
            ((void (*)(const CA::Transform **, uint64_t, uint64_t))v30)(a2, v16, 8);
          }
          BOOL v31 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)a1);
          CA::OGL::emit_quad_indices(a1, (float64x2_t *)a2[5], CA::OGL::emit_five_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int)::indices, 0x10uLL, 8u);
          if (v31)
          {
            float64x2_t v32 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 8));
            float64x2_t v241 = vcvtq_f64_f32(*(float32x2_t *)v16);
            float64x2_t v242 = v32;
            float64x2_t v33 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 56));
            float64x2_t v243 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 48));
            float64x2_t v244 = v33;
            float64x2_t v34 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 104));
            float64x2_t v245 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 96));
            float64x2_t v246 = v34;
            float64x2_t v35 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 152));
            float64x2_t v247 = vcvtq_f64_f32(*(float32x2_t *)(v16 + 144));
            float64x2_t v248 = v35;
            uint64_t v233 = 0;
            CA::OGL::emit_quad_surround(a1, v241.f64, &v233);
          }
        }
      }
      return;
    }
    uint64_t v36 = *((void *)v8 + 1);
    v241.f64[0] = *v8;
    *(void *)&v241.f64[1] = v36;
    v242.f64[0] = v10;
    v242.f64[1] = v9;
    v238.i64[0] = *(void *)&v241.f64[0];
    v238.i64[1] = v36;
    double v239 = v10;
    double v240 = v9;
    CA::BoundsImpl::inset((double *)v238.i64, a5, a5);
    CA::Rect::apply_transform((int8x16_t *)&v241, v12, v37);
    CA::Rect::apply_transform(&v238, v12, v38);
    double v39 = *(double *)&v238.i64[1];
    double v40 = v239 + *(double *)v238.i64;
    double v42 = v241.f64[1];
    double v41 = v241.f64[0];
    double v43 = v242.f64[0] + v241.f64[0];
    double v44 = v240 + *(double *)&v238.i64[1];
    double v45 = v242.f64[1] + v241.f64[1];
    float16x4_t v46 = *(float16x4_t *)(*(void *)(a1 + 16) + 8);
    int v47 = *((_DWORD *)a2 + 5);
    if (v47)
    {
      double v230 = *(double *)v238.i64;
      if (v241.f64[0] != trunc(v241.f64[0])
        || v241.f64[1] != trunc(v241.f64[1])
        || v242.f64[0] != trunc(v242.f64[0])
        || v242.f64[1] != trunc(v242.f64[1])
        || *(double *)v238.i64 != trunc(*(double *)v238.i64)
        || *(double *)&v238.i64[1] != trunc(*(double *)&v238.i64[1])
        || v239 != trunc(v239)
        || v240 != trunc(v240))
      {
        double v48 = floor(v241.f64[0]);
        double v49 = ceil(v241.f64[0]);
        double v50 = round(v241.f64[0]);
        if ((v47 & 1) == 0) {
          double v48 = v50;
        }
        double v228 = v48;
        if (v47) {
          double v51 = v49;
        }
        else {
          double v51 = v50;
        }
        double v210 = v51;
        double v52 = floor(*(double *)v238.i64);
        double v53 = ceil(*(double *)v238.i64);
        double v54 = round(*(double *)v238.i64);
        if ((v47 & 0x20) == 0) {
          double v52 = v54;
        }
        double v190 = v52;
        if ((v47 & 0x20) != 0) {
          double v55 = v53;
        }
        else {
          double v55 = v54;
        }
        double v224 = v55;
        double v226 = v239 + *(double *)v238.i64;
        double v56 = floor(v40);
        double v57 = ceil(v40);
        double v58 = round(v40);
        if ((v47 & 0x20) == 0) {
          double v56 = v58;
        }
        double v218 = v242.f64[0] + v241.f64[0];
        double v220 = v56;
        if ((v47 & 0x20) != 0) {
          double v59 = v57;
        }
        else {
          double v59 = v58;
        }
        double v215 = v59;
        double v60 = floor(v43);
        double v61 = ceil(v43);
        double v62 = round(v43);
        if ((v47 & 2) != 0) {
          double v63 = v60;
        }
        else {
          double v63 = v62;
        }
        if ((v47 & 2) != 0) {
          double v64 = v61;
        }
        else {
          double v64 = v62;
        }
        double v197 = v64;
        double v65 = floor(v241.f64[1]);
        double v66 = ceil(v241.f64[1]);
        double v67 = round(v241.f64[1]);
        if ((v47 & 4) != 0) {
          double v68 = v65;
        }
        else {
          double v68 = v67;
        }
        if ((v47 & 4) != 0) {
          double v69 = v66;
        }
        else {
          double v69 = v67;
        }
        double v194 = v69;
        double v70 = floor(*(double *)&v238.i64[1]);
        double v71 = ceil(*(double *)&v238.i64[1]);
        double v72 = round(*(double *)&v238.i64[1]);
        if ((v47 & 0x40) == 0) {
          double v70 = v72;
        }
        double v188 = v70;
        if ((v47 & 0x40) != 0) {
          double v73 = v71;
        }
        else {
          double v73 = v72;
        }
        double v222 = v73;
        double v74 = floor(v44);
        double v75 = ceil(v44);
        double v76 = round(v44);
        if ((v47 & 0x80) == 0) {
          double v74 = v76;
        }
        double v216 = v74;
        double v212 = v240 + *(double *)&v238.i64[1];
        if ((v47 & 0x80) != 0) {
          double v77 = v75;
        }
        else {
          double v77 = v76;
        }
        BOOL v78 = (*((_DWORD *)a2 + 5) & 8) == 0;
        float64_t v79 = *(double *)(*(void *)(a1 + 248) + 8);
        *(void *)&v249.f64[0] = a1;
        v249.f64[1] = v79;
        double v80 = floor(v45);
        double v81 = ceil(v45);
        double v82 = round(v45);
        memset(v250, 0, 40);
        double v199 = v242.f64[1] + v241.f64[1];
        if (v78) {
          double v83 = v82;
        }
        else {
          double v83 = v80;
        }
        LOWORD(v250[2]) = 256;
        if (v78) {
          double v84 = v82;
        }
        else {
          double v84 = v81;
        }
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v249);
        double v234 = 0.0;
        double v235 = 0.0;
        BOOL v85 = v210 > v228;
        if (v197 > v63) {
          BOOL v85 = 1;
        }
        if (v194 > v68) {
          BOOL v85 = 1;
        }
        double v86 = v84;
        int v87 = v84 > v83 || v85;
        uint64_t v88 = a1 + 834;
        float v89 = v228;
        float v229 = v89;
        float v90 = v68;
        float v214 = v90;
        float v91 = v210;
        float v92 = v194;
        double v93 = v210;
        float v94 = v210 - v41;
        double v95 = v194;
        float v96 = v194 - v42;
        float v97 = v230 - v190;
        float v98 = v39 - v188;
        float v208 = v98;
        float v209 = v97;
        float v99 = 1.0 - v97;
        float v100 = v98 - 1.0;
        float v207 = (float)(v100 * v99) + 1.0;
        float v101 = v215 - v226;
        float v206 = v101;
        float v102 = 1.0 - v101;
        float v205 = (float)(v100 * v102) + 1.0;
        float v103 = v77 - v212;
        float v204 = v103;
        float v104 = v103 - 1.0;
        float v202 = (float)(v104 * v102) + 1.0;
        float v203 = (float)(v104 * v99) + 1.0;
        float v201 = v96 * v94;
        float v105 = v63;
        float v106 = v197;
        float v227 = v106;
        float v107 = v218 - v63;
        float v211 = v96;
        float v213 = v94;
        float v198 = v96 * v107;
        BOOL v108 = v190 > v93;
        BOOL v109 = v63 <= v215;
        float v110 = v83;
        float v111 = v86;
        float v196 = v111;
        float v112 = v199 - v83;
        if (!v109) {
          BOOL v108 = 1;
        }
        float v193 = v112 * v94;
        float v195 = v199 - v83;
        if (v188 > v95) {
          BOOL v108 = 1;
        }
        float v200 = v107;
        float v192 = v112 * v107;
        int v113 = v83 > v77 || v108;
        BOOL v114 = v224 > v190;
        if (v215 > v220) {
          BOOL v114 = 1;
        }
        float v115 = v188;
        float v219 = v115;
        float v116 = v190;
        if (v222 > v188) {
          BOOL v114 = 1;
        }
        BOOL v109 = v77 <= v216;
        float v117 = v77;
        float v118 = v215;
        int v119 = !v109 || v114;
        float v120 = v224;
        float v225 = v120;
        float v121 = v222;
        float v223 = v121;
        float v122 = v220;
        float v221 = v122;
        float v123 = v216;
        float v217 = v123;
        float v191 = v190;
        float v187 = v92;
        float v185 = v117;
        float v186 = v110;
        while (1)
        {
          while (1)
          {
            if (!CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v249, (int32x2_t *)&v234))return; {
            if (!v87)
            }
              break;
            if (*(_DWORD *)(a1 + 92)) {
              uint64_t v124 = 24;
            }
            else {
              uint64_t v124 = 16;
            }
            if ((unint64_t)(*(void *)(a1 + 128) + 16) > *(void *)(a1 + 136)
              || (unint64_t v125 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v124 > v125)
            {
              *(_WORD *)(a1 + 832) |= 0x20u;
              CA::OGL::Context::array_flush(a1);
              *(void *)(a1 + 128) = 0;
              *(void *)(a1 + 96) = v88;
              *(_OWORD *)(a1 + 104) = xmmword_184997E70;
            }
            CA::OGL::Context::array_rect((void *)a1, v229, v214, v91, v92);
            float32x4_t v231 = vcvtq_f32_f16(v46);
            float16x4_t v126 = vcvt_f16_f32(vmulq_n_f32(v231, v201));
            uint64_t v127 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v127 - 160) = v126;
            *(float16x4_t *)(v127 - 112) = v126;
            *(float16x4_t *)(v127 - 64) = v126;
            *(float16x4_t *)(v127 - 16) = v126;
            CA::OGL::Context::array_rect((void *)a1, v91, v214, v105, v92);
            float16x4_t v128 = vcvt_f16_f32(vmulq_n_f32(v231, v211));
            uint64_t v129 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v129 - 160) = v128;
            *(float16x4_t *)(v129 - 112) = v128;
            *(float16x4_t *)(v129 - 64) = v128;
            *(float16x4_t *)(v129 - 16) = v128;
            CA::OGL::Context::array_rect((void *)a1, v105, v214, v227, v92);
            float16x4_t v130 = vcvt_f16_f32(vmulq_n_f32(v231, v198));
            uint64_t v131 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v131 - 160) = v130;
            *(float16x4_t *)(v131 - 112) = v130;
            *(float16x4_t *)(v131 - 64) = v130;
            *(float16x4_t *)(v131 - 16) = v130;
            CA::OGL::Context::array_rect((void *)a1, v229, v92, v91, v110);
            float16x4_t v132 = vcvt_f16_f32(vmulq_n_f32(v231, v213));
            uint64_t v133 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v133 - 160) = v132;
            *(float16x4_t *)(v133 - 112) = v132;
            *(float16x4_t *)(v133 - 64) = v132;
            *(float16x4_t *)(v133 - 16) = v132;
            if (*(_DWORD *)(a1 + 92)) {
              uint64_t v134 = 24;
            }
            else {
              uint64_t v134 = 16;
            }
            if ((unint64_t)(*(void *)(a1 + 128) + 16) > *(void *)(a1 + 136)
              || (unint64_t v135 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v134 > v135)
            {
              *(_WORD *)(a1 + 832) |= 0x20u;
              CA::OGL::Context::array_flush(a1);
              *(void *)(a1 + 128) = 0;
              *(void *)(a1 + 96) = v88;
              *(_OWORD *)(a1 + 104) = xmmword_184997E70;
            }
            CA::OGL::Context::array_rect((void *)a1, v105, v92, v227, v110);
            float16x4_t v136 = vcvt_f16_f32(vmulq_n_f32(v231, v200));
            uint64_t v137 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v137 - 160) = v136;
            *(float16x4_t *)(v137 - 112) = v136;
            *(float16x4_t *)(v137 - 64) = v136;
            *(float16x4_t *)(v137 - 16) = v136;
            CA::OGL::Context::array_rect((void *)a1, v229, v110, v91, v196);
            float16x4_t v138 = vcvt_f16_f32(vmulq_n_f32(v231, v193));
            uint64_t v139 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v139 - 160) = v138;
            *(float16x4_t *)(v139 - 112) = v138;
            *(float16x4_t *)(v139 - 64) = v138;
            *(float16x4_t *)(v139 - 16) = v138;
            CA::OGL::Context::array_rect((void *)a1, v91, v110, v105, v196);
            float16x4_t v140 = vcvt_f16_f32(vmulq_n_f32(v231, v195));
            uint64_t v141 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v141 - 160) = v140;
            *(float16x4_t *)(v141 - 112) = v140;
            *(float16x4_t *)(v141 - 64) = v140;
            *(float16x4_t *)(v141 - 16) = v140;
            CA::OGL::Context::array_rect((void *)a1, v105, v110, v227, v196);
            float16x4_t v142 = vcvt_f16_f32(vmulq_n_f32(v231, v192));
            uint64_t v143 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v143 - 160) = v142;
            *(float16x4_t *)(v143 - 112) = v142;
            *(float16x4_t *)(v143 - 64) = v142;
            *(float16x4_t *)(v143 - 16) = v142;
            float v116 = v191;
            float v189 = v215;
            float v118 = v189;
            if (!v113) {
              goto LABEL_120;
            }
LABEL_137:
            if (*(_DWORD *)(a1 + 92)) {
              uint64_t v144 = 24;
            }
            else {
              uint64_t v144 = 16;
            }
            if ((unint64_t)(*(void *)(a1 + 128) + 16) > *(void *)(a1 + 136)
              || (unint64_t v145 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v144 > v145)
            {
              *(_WORD *)(a1 + 832) |= 0x20u;
              CA::OGL::Context::array_flush(a1);
              *(void *)(a1 + 128) = 0;
              *(void *)(a1 + 96) = v88;
              *(_OWORD *)(a1 + 104) = xmmword_184997E70;
            }
            CA::OGL::Context::array_rect((void *)a1, v91, v92, v105, v219);
            uint64_t v146 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v146 - 160) = v46;
            *(float16x4_t *)(v146 - 112) = v46;
            *(float16x4_t *)(v146 - 64) = v46;
            *(float16x4_t *)(v146 - 16) = v46;
            CA::OGL::Context::array_rect((void *)a1, v91, v219, v116, v117);
            uint64_t v147 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v147 - 160) = v46;
            *(float16x4_t *)(v147 - 112) = v46;
            *(float16x4_t *)(v147 - 64) = v46;
            *(float16x4_t *)(v147 - 16) = v46;
            CA::OGL::Context::array_rect((void *)a1, v118, v219, v105, v117);
            uint64_t v148 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v148 - 160) = v46;
            *(float16x4_t *)(v148 - 112) = v46;
            *(float16x4_t *)(v148 - 64) = v46;
            *(float16x4_t *)(v148 - 16) = v46;
            CA::OGL::Context::array_rect((void *)a1, v91, v117, v105, v110);
            uint64_t v149 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
            *(float16x4_t *)(v149 - 160) = v46;
            *(float16x4_t *)(v149 - 112) = v46;
            *(float16x4_t *)(v149 - 64) = v46;
            *(float16x4_t *)(v149 - 16) = v46;
            if (v119)
            {
LABEL_145:
              if (*(_DWORD *)(a1 + 92)) {
                uint64_t v150 = 24;
              }
              else {
                uint64_t v150 = 16;
              }
              if ((unint64_t)(*(void *)(a1 + 128) + 16) > *(void *)(a1 + 136)
                || (unint64_t v151 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v150 > v151)
              {
                *(_WORD *)(a1 + 832) |= 0x20u;
                CA::OGL::Context::array_flush(a1);
                *(void *)(a1 + 128) = 0;
                *(void *)(a1 + 96) = v88;
                *(_OWORD *)(a1 + 104) = xmmword_184997E70;
              }
              CA::OGL::Context::array_rect((void *)a1, v116, v219, v225, v223);
              float32x4_t v232 = vcvtq_f32_f16(v46);
              float16x4_t v152 = vcvt_f16_f32(vmulq_n_f32(v232, v207));
              uint64_t v153 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v153 - 160) = v152;
              *(float16x4_t *)(v153 - 112) = v152;
              *(float16x4_t *)(v153 - 64) = v152;
              *(float16x4_t *)(v153 - 16) = v152;
              CA::OGL::Context::array_rect((void *)a1, v225, v219, v221, v223);
              float16x4_t v154 = vcvt_f16_f32(vmulq_n_f32(v232, v208));
              uint64_t v155 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v155 - 160) = v154;
              *(float16x4_t *)(v155 - 112) = v154;
              *(float16x4_t *)(v155 - 64) = v154;
              *(float16x4_t *)(v155 - 16) = v154;
              CA::OGL::Context::array_rect((void *)a1, v221, v219, v118, v223);
              float16x4_t v156 = vcvt_f16_f32(vmulq_n_f32(v232, v205));
              uint64_t v157 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v157 - 160) = v156;
              *(float16x4_t *)(v157 - 112) = v156;
              *(float16x4_t *)(v157 - 64) = v156;
              *(float16x4_t *)(v157 - 16) = v156;
              CA::OGL::Context::array_rect((void *)a1, v116, v223, v225, v217);
              float16x4_t v158 = vcvt_f16_f32(vmulq_n_f32(v232, v209));
              uint64_t v159 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v159 - 160) = v158;
              *(float16x4_t *)(v159 - 112) = v158;
              *(float16x4_t *)(v159 - 64) = v158;
              *(float16x4_t *)(v159 - 16) = v158;
              if (*(_DWORD *)(a1 + 92)) {
                uint64_t v160 = 24;
              }
              else {
                uint64_t v160 = 16;
              }
              if ((unint64_t)(*(void *)(a1 + 128) + 16) > *(void *)(a1 + 136)
                || (unint64_t v161 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v160 > v161)
              {
                *(_WORD *)(a1 + 832) |= 0x20u;
                CA::OGL::Context::array_flush(a1);
                *(void *)(a1 + 128) = 0;
                *(void *)(a1 + 96) = v88;
                *(_OWORD *)(a1 + 104) = xmmword_184997E70;
              }
              CA::OGL::Context::array_rect((void *)a1, v221, v223, v118, v217);
              float16x4_t v162 = vcvt_f16_f32(vmulq_n_f32(v232, v206));
              uint64_t v163 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v163 - 160) = v162;
              *(float16x4_t *)(v163 - 112) = v162;
              *(float16x4_t *)(v163 - 64) = v162;
              *(float16x4_t *)(v163 - 16) = v162;
              float v117 = v185;
              CA::OGL::Context::array_rect((void *)a1, v116, v217, v225, v185);
              float16x4_t v164 = vcvt_f16_f32(vmulq_n_f32(v232, v203));
              uint64_t v165 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v165 - 160) = v164;
              *(float16x4_t *)(v165 - 112) = v164;
              *(float16x4_t *)(v165 - 64) = v164;
              *(float16x4_t *)(v165 - 16) = v164;
              CA::OGL::Context::array_rect((void *)a1, v225, v217, v221, v185);
              float16x4_t v166 = vcvt_f16_f32(vmulq_n_f32(v232, v204));
              uint64_t v167 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v167 - 160) = v166;
              *(float16x4_t *)(v167 - 112) = v166;
              *(float16x4_t *)(v167 - 64) = v166;
              *(float16x4_t *)(v167 - 16) = v166;
              CA::OGL::Context::array_rect((void *)a1, v221, v217, v118, v185);
              float16x4_t v168 = vcvt_f16_f32(vmulq_n_f32(v232, v202));
              uint64_t v169 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
              *(float16x4_t *)(v169 - 160) = v168;
              *(float16x4_t *)(v169 - 112) = v168;
              *(float16x4_t *)(v169 - 64) = v168;
              *(float16x4_t *)(v169 - 16) = v168;
              float v110 = v186;
              float v92 = v187;
            }
          }
          if (v113) {
            goto LABEL_137;
          }
LABEL_120:
          if (v119) {
            goto LABEL_145;
          }
        }
      }
    }
    else if ((*((unsigned char *)a2 + 18) & 0x10) != 0)
    {
      double v41 = floor(v241.f64[0] + 0.001);
      double v230 = ceil(*(double *)v238.i64 + -0.001);
      double v40 = floor(v40 + 0.001);
      double v43 = ceil(v43 + -0.001);
      double v42 = floor(v241.f64[1] + 0.001);
      double v39 = ceil(*(double *)&v238.i64[1] + -0.001);
      double v44 = floor(v44 + 0.001);
      double v45 = ceil(v45 + -0.001);
    }
    else
    {
      double v41 = round(v241.f64[0]);
      double v230 = round(*(double *)v238.i64);
      double v40 = round(v40);
      double v43 = round(v43);
      double v42 = round(v241.f64[1]);
      double v39 = round(*(double *)&v238.i64[1]);
      double v44 = round(v44);
      double v45 = round(v45);
    }
    float64_t v170 = *(double *)(*(void *)(a1 + 248) + 8);
    *(void *)&v249.f64[0] = a1;
    v249.f64[1] = v170;
    memset(v250, 0, 40);
    LOWORD(v250[2]) = 256;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v249);
    double v234 = 0.0;
    double v235 = 0.0;
    float v171 = v41;
    float v172 = v42;
    float v173 = v43;
    float v174 = v39;
    float v176 = v44;
    float v177 = v40;
    float v178 = v45;
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v249, (int32x2_t *)&v234))
    {
      if (*(_DWORD *)(a1 + 92)) {
        uint64_t v179 = 24;
      }
      else {
        uint64_t v179 = 16;
      }
      if ((unint64_t)(*(void *)(a1 + 128) + 16) > *(void *)(a1 + 136)
        || (unint64_t v180 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v179 > v180)
      {
        *(_WORD *)(a1 + 832) |= 0x20u;
        CA::OGL::Context::array_flush(a1);
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 96) = a1 + 834;
        *(_OWORD *)(a1 + 104) = xmmword_184997E70;
      }
      CA::OGL::Context::array_rect((void *)a1, v171, v172, v173, v174);
      uint64_t v181 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
      *(float16x4_t *)(v181 - 160) = v46;
      *(float16x4_t *)(v181 - 112) = v46;
      *(float16x4_t *)(v181 - 64) = v46;
      *(float16x4_t *)(v181 - 16) = v46;
      float v175 = v230;
      CA::OGL::Context::array_rect((void *)a1, v171, v174, v175, v176);
      uint64_t v182 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
      *(float16x4_t *)(v182 - 160) = v46;
      *(float16x4_t *)(v182 - 112) = v46;
      *(float16x4_t *)(v182 - 64) = v46;
      *(float16x4_t *)(v182 - 16) = v46;
      CA::OGL::Context::array_rect((void *)a1, v177, v174, v173, v176);
      uint64_t v183 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
      *(float16x4_t *)(v183 - 160) = v46;
      *(float16x4_t *)(v183 - 112) = v46;
      *(float16x4_t *)(v183 - 64) = v46;
      *(float16x4_t *)(v183 - 16) = v46;
      CA::OGL::Context::array_rect((void *)a1, v171, v176, v173, v178);
      uint64_t v184 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
      *(float16x4_t *)(v184 - 160) = v46;
      *(float16x4_t *)(v184 - 112) = v46;
      *(float16x4_t *)(v184 - 64) = v46;
      *(float16x4_t *)(v184 - 16) = v46;
    }
  }
}

double *CA::OGL::anonymous namespace'::clamp_twenty_part_rect(double *this, double *a2, double *a3, float *a4, float *a5, float *a6, float *a7)
{
  char v7 = 0;
  uint64_t v8 = 1;
  do
  {
    char v9 = v7;
    double v10 = this[v8];
    uint64_t v11 = 5 - v8;
    double v12 = this[5 - v8];
    if (v10 > v12)
    {
      float v13 = (v12 + v10) * 0.5;
      double v14 = v13;
      float v15 = (v14 - *this) / (v10 - *this);
      this[v11] = v14;
      this[v8] = v14;
      if (a3)
      {
        *((float *)a3 + v8) = *(float *)a3 + (float)((float)(*((float *)a3 + v8) - *(float *)a3) * v15);
        *((float *)a3 + v11) = *((float *)a3 + 5) + (float)((float)(*((float *)a3 + v11) - *((float *)a3 + 5)) * v15);
      }
      if (a5)
      {
        a5[v8] = *a5 + (float)((float)(a5[v8] - *a5) * v15);
        a5[v11] = a5[5] + (float)((float)(a5[v11] - a5[5]) * v15);
      }
    }
    char v7 = 1;
    uint64_t v8 = 2;
  }
  while ((v9 & 1) == 0);
  char v16 = 0;
  uint64_t v17 = 1;
  do
  {
    char v18 = v16;
    double v19 = a2[v17];
    uint64_t v20 = 5 - v17;
    double v21 = a2[5 - v17];
    if (v19 > v21)
    {
      float v22 = (v21 + v19) * 0.5;
      double v23 = v22;
      float v24 = (v23 - *a2) / (v19 - *a2);
      a2[v20] = v23;
      a2[v17] = v23;
      if (a4)
      {
        a4[v17] = *a4 + (float)((float)(a4[v17] - *a4) * v24);
        a4[v20] = a4[5] + (float)((float)(a4[v20] - a4[5]) * v24);
      }
      if (a6)
      {
        a6[v17] = *a6 + (float)((float)(a6[v17] - *a6) * v24);
        a6[v20] = a6[5] + (float)((float)(a6[v20] - a6[5]) * v24);
      }
    }
    char v16 = 1;
    uint64_t v17 = 2;
  }
  while ((v18 & 1) == 0);
  return this;
}

void CA::OGL::stroke_uneven_round_rect(uint64_t a1, float64x2_t **a2, double *a3, double *a4, double a5)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  int v6 = *a2;
  double v7 = (*a2)[1].f64[0];
  if (v7 >= (*a2)[1].f64[1]) {
    double v7 = (*a2)[1].f64[1];
  }
  if (v7 > 0.0)
  {
    double v12 = *a3;
    double v13 = a3[2];
    if (*a3 == v13)
    {
      double v14 = a3[1];
      double v15 = a3[3];
      if (v14 == v15)
      {
        double v16 = a3[4];
        if (v13 == v16)
        {
          double v17 = a3[5];
          if (v15 == v17 && v16 == a3[6] && v17 == a3[7] && v12 == v14)
          {
            CA::OGL::stroke_round_rect((void *)a1, a2, (double *)0xF, a4, v12, a5);
            return;
          }
        }
      }
    }
    double v82 = 0.0;
    double v83 = 0.0;
    char v18 = a2[1];
    double v80 = a5;
    if ((LOBYTE(v18[9].f64[0]) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v18, &v83, &v82, a4);
      a5 = v80;
    }
    else
    {
      double v82 = v18[8].f64[0];
      double v83 = v82;
    }
    uint64_t v19 = 0;
    double v20 = 0.0;
    do
    {
      double v21 = a3[v19];
      if (v21 <= a3[v19 + 1]) {
        double v21 = a3[v19 + 1];
      }
      if (v20 <= v21) {
        double v20 = v21;
      }
      v19 += 2;
    }
    while (v19 != 8);
    v22.f64[0] = v83;
    if (v83 <= v82) {
      double v23 = v82;
    }
    else {
      double v23 = v83;
    }
    double v24 = v23 * v20;
    if (a4) {
      double v24 = v24 * 1.528665;
    }
    if (v24 < 1.0)
    {
      CA::OGL::stroke_rect(a1, (const CA::Transform **)a2, a3, a4, a5);
      return;
    }
    uint64_t v25 = 0;
    double v26 = v6->f64[0];
    double v27 = v6->f64[1];
    v22.f64[1] = v82;
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v33 = v6[1];
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v35 = vdivq_f64((float64x2_t)_Q0, vsubq_f64(v33, (float64x2_t)vdupq_lane_s64(COERCE__INT64(a5 + a5), 0)));
    int8x16_t v36 = (int8x16_t)vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(_Q2, v22)));
    float64x2_t v37 = vdivq_f64((float64x2_t)_Q0, v33);
    float64x2_t v38 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5, 0));
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
    do
    {
      float32x2_t v40 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)&a3[2 * v25], (float64x2_t)v36), *(int8x16_t *)&a3[2 * v25], v36), v37));
      *((float32x2_t *)&v96 + v25) = v40;
      int8x16_t v41 = (int8x16_t)vmlaq_f64(v38, vcvtq_f64_f32(v40), v33);
      float32x2_t v42 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v36, (float64x2_t)v41), v36, v41), v35));
      *((float32x2_t *)&v94 + v25) = v42;
      if (a4)
      {
        *((float32x2_t *)&v96 + v25) = vmul_f32(v40, v39);
        *((float32x2_t *)&v94 + v25) = vmul_f32(v42, v39);
      }
      ++v25;
    }
    while (v25 != 4);
    float64x2_t v78 = v33;
    float64x2_t v79 = v35;
    *(unsigned char *)(*(void *)(a1 + 16) + 16) = 6;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    if (a4)
    {
      v43.i64[0] = __PAIR64__(HIDWORD(v96), v96);
      v44.i64[0] = __PAIR64__(DWORD1(v97), DWORD2(v96));
      v44.i64[1] = __PAIR64__(DWORD1(v96), DWORD2(v97));
      v43.i64[1] = __PAIR64__(HIDWORD(v97), v97);
      float32x4_t v45 = vaddq_f32(v44, v43);
      float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL);
      int8x16_t v47 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvt_hight_f64_f32(v45)));
      int8x16_t v48 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v45.f32)));
      int8x16_t v49 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v47, (float64x2_t)_Q0), _Q0, v47);
      int8x16_t v50 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v48, (float64x2_t)_Q0), _Q0, v48);
      v85[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v50, (int8x16_t)vcltzq_f64((float64x2_t)v50))), (float64x2_t)vbicq_s8(v49, (int8x16_t)vcltzq_f64((float64x2_t)v49)));
      v50.i64[0] = __PAIR64__(HIDWORD(v94), v94);
      v51.i64[0] = __PAIR64__(DWORD1(v95), DWORD2(v94));
      v51.i64[1] = __PAIR64__(DWORD1(v94), DWORD2(v95));
      v50.i64[1] = __PAIR64__(HIDWORD(v95), v95);
      float32x4_t v52 = vaddq_f32(v51, (float32x4_t)v50);
      int8x16_t v53 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvt_hight_f64_f32(v52)));
      int8x16_t v54 = (int8x16_t)vsubq_f64(v46, vdivq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v52.f32)));
      int8x16_t v55 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v53, (float64x2_t)_Q0), _Q0, v53);
      int8x16_t v56 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v54, (float64x2_t)_Q0), _Q0, v54);
      v84[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v56, (int8x16_t)vcltzq_f64((float64x2_t)v56))), (float64x2_t)vbicq_s8(v55, (int8x16_t)vcltzq_f64((float64x2_t)v55)));
      (*(void (**)(uint64_t, void, long long *, uint64_t *, double *, float64x2_t *))(*(void *)a1 + 488))(a1, 0, &v96, &v93, a4, v85);
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t *, double *, _OWORD *))(*(void *)a1 + 488))(a1, 1, &v94, &v92, a4, v84);
    }
    else
    {
      (*(void (**)(uint64_t, void, long long *, uint64_t *))(*(void *)a1 + 480))(a1, 0, &v96, &v93);
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t *))(*(void *)a1 + 480))(a1, 1, &v94, &v92);
    }
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    v85[1] = 0u;
    if ((*(_DWORD *)(a1 + 136) & 0xFFFFFFFC) != 0)
    {
      uint64_t v57 = *(void *)(a1 + 120);
      for (uint64_t i = 1; i != 9; i += 2)
        v85[i] = (float64x2_t)xmmword_184997D60;
      v85[0].f64[0] = v26;
      v85[0].f64[1] = v27;
      *(double *)&long long v86 = v78.f64[0] + v26;
      *((double *)&v86 + 1) = v27;
      *(double *)&long long v88 = v26;
      *((double *)&v88 + 1) = v78.f64[1] + v27;
      *(double *)&long long v90 = v78.f64[0] + v26;
      *((double *)&v90 + 1) = v78.f64[1] + v27;
      uint64_t v59 = v93;
      *(_DWORD *)(v57 + 64) = HIDWORD(v93);
      *(_DWORD *)(v57 + 68) = v59;
      *(_DWORD *)(v57 + 16) = v59;
      *(_DWORD *)(v57 + 20) = v59;
      *(_DWORD *)(v57 + 160) = HIDWORD(v59);
      *(_DWORD *)(v57 + 164) = HIDWORD(v59);
      *(void *)(v57 + 112) = v59;
      float v60 = *(float *)&v92 - v80 * v79.f64[0];
      double v61 = *((float *)&v92 + 1);
      float v62 = v80 * v79.f64[0] + *((float *)&v92 + 1);
      double v63 = vmuld_lane_f64(v80, v79, 1);
      float v64 = *(float *)&v92 - v63;
      *(float *)(v57 + 72) = v62;
      *(float *)(v57 + 76) = v64;
      *(float *)(v57 + 24) = v60;
      *(float *)(v57 + 28) = v64;
      float v65 = v63 + v61;
      *(float *)(v57 + 168) = v62;
      *(float *)(v57 + 172) = v65;
      *(float *)(v57 + 120) = v60;
      *(float *)(v57 + 124) = v65;
      uint64_t v66 = *(void *)(*(void *)(a1 + 16) + 8);
      for (uint64_t j = 32; j != 224; j += 48)
        *(void *)(v57 + j) = v66;
      double v68 = a2[3];
      if (v68) {
        ((void (*)(float64x2_t **, float64x2_t *, uint64_t, uint64_t))v68)(a2, v85, v57, 4);
      }
      CA::OGL::transform_vertices(v85, (float32x4_t *)v57, (const double *)4, a2[1]);
      double v69 = a2[4];
      if (v69) {
        ((void (*)(float64x2_t **, uint64_t, uint64_t))v69)(a2, v57, 4);
      }
      int v70 = *((_DWORD *)a2 + 5);
      if ((v70 & 0xF) == 0 || ((_BYTE)a2[2] & 9) == 0) {
        goto LABEL_54;
      }
      if ((v70 & 4) != 0)
      {
        CA::OGL::aa_adjust_vertices(v57, v57 + 96, 48, 2);
        int v70 = *((_DWORD *)a2 + 5);
      }
      if ((v70 & 8) != 0)
      {
        CA::OGL::aa_adjust_vertices(v57 + 96, v57, 48, 2);
        int v70 = *((_DWORD *)a2 + 5);
        if ((v70 & 1) == 0)
        {
LABEL_52:
          if ((v70 & 2) == 0) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
      }
      else if ((v70 & 1) == 0)
      {
        goto LABEL_52;
      }
      CA::OGL::aa_adjust_vertices(v57, v57 + 48, 96, 2);
      if ((*((_DWORD *)a2 + 5) & 2) == 0)
      {
LABEL_54:
        BOOL v71 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)a1);
        CA::OGL::emit_quad_indices(a1, a2[5], CA::OGL::stroke_uneven_round_rect(CA::OGL::Context &,CA::OGL::RectState const&,CA::Vec2<double> *,double,unsigned int)::indices, 4uLL, 4u);
        (*(void (**)(uint64_t, void, void))(*(void *)a1 + 520))(a1, 0, 0);
        *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
        if (v71)
        {
          v84[0] = vcvtq_f64_f32(*(float32x2_t *)v57);
          float32x2_t v72 = *(float32x2_t *)(v57 + 56);
          float64x2_t v73 = vcvtq_f64_f32(*(float32x2_t *)(v57 + 48));
          v84[1] = vcvtq_f64_f32(*(float32x2_t *)(v57 + 8));
          v84[2] = v73;
          float64x2_t v74 = vcvtq_f64_f32(v72);
          float32x2_t v75 = *(float32x2_t *)(v57 + 152);
          float64x2_t v76 = vcvtq_f64_f32(*(float32x2_t *)(v57 + 144));
          v84[3] = v74;
          v84[4] = v76;
          float64x2_t v77 = vcvtq_f64_f32(*(float32x2_t *)(v57 + 96));
          v84[5] = vcvtq_f64_f32(v75);
          v84[6] = v77;
          v84[7] = vcvtq_f64_f32(*(float32x2_t *)(v57 + 104));
          uint64_t v81 = 0;
          CA::OGL::emit_quad_surround(a1, (const double *)v84, &v81);
        }
        return;
      }
LABEL_53:
      CA::OGL::aa_adjust_vertices(v57 + 48, v57, 96, 2);
      goto LABEL_54;
    }
  }
}

uint64_t CA::OGL::fill_pattern_rect(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, float64x2_t *a6, unsigned int a7, int a8, float a9, char a10, char a11)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  float32x4_t v179 = 0uLL;
  unint64_t v177 = 0;
  unint64_t v178 = 0;
  float64x2_t v175 = 0u;
  float64x2_t v176 = 0u;
  if (!*(void *)(a2 + 128))
  {
    *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
    v149.i64[0] = a3;
    v149.i64[1] = a5;
    long long v150 = 0uLL;
    long long v151 = 0uLL;
    uint64_t result = (uint64_t)CA::OGL::emit_one_part_rect((CA::OGL::Context *)a1, (uint64_t)&v149, 0, 0, 0);
LABEL_15:
    *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
    return result;
  }
  long long v134 = 0uLL;
  uint64_t result = CA::Shape::get_bounds(*(void *)(*(void *)(a1 + 248) + 8), (int *)&v134);
  double v21 = *(int32x2_t **)(a1 + 264);
  if (v21) {
    float64x2_t v22 = v21 + 4;
  }
  else {
    float64x2_t v22 = (int32x2_t *)(a1 + 200);
  }
  uint32x2_t v23 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v134 + 8));
  if ((vpmax_u32(v23, v23).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v24 = v22[1];
    uint32x2_t v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v24);
    if ((vpmax_u32(v25, v25).u32[0] & 0x80000000) == 0)
    {
      *(int32x2_t *)&long long v26 = vmax_s32(*(int32x2_t *)&v134, *v22);
      int32x2_t v27 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v134, *(int32x2_t *)((char *)&v134 + 8)), vadd_s32(*v22, v24)), *(int32x2_t *)&v26);
      uint32x2_t v28 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v27);
      if ((vpmax_u32(v28, v28).u32[0] & 0x80000000) == 0)
      {
        *((int32x2_t *)&v26 + 1) = v27;
        long long v134 = v26;
        float64x2_t v29 = *a6;
        float64x2_t v30 = a6[1];
        float64x2_t v137 = *a6;
        float64x2_t v138 = v30;
        int v31 = v27.i32[1];
        if (v27.i32[0] > v27.i32[1]) {
          int v31 = v27.i32[0];
        }
        int64x2_t v32 = vclezq_f64(v30);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v32, 1), (int8x16_t)v32).u64[0] & 0x8000000000000000) == 0)
        {
          v33.i64[0] = v27.i32[0];
          v33.i64[1] = v27.i32[1];
          int8x16_t v34 = (int8x16_t)vcvtq_f64_s64(v33);
          int32x2_t v35 = vdup_n_s32(v31 > 1073741822);
          v33.i64[0] = v35.u32[0];
          v33.i64[1] = v35.u32[1];
          float64x2_t v36 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v33, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v34);
          int64x2_t v37 = vclezq_f64(v36);
          int32x4_t v38 = (int32x4_t)vdupq_laneq_s64(v37, 1);
          int32x4_t v39 = (int32x4_t)vorrq_s8((int8x16_t)v38, (int8x16_t)v37);
          if (v39.i64[0] < 0) {
            goto LABEL_17;
          }
          v39.i32[0] = v31;
          v38.i32[0] = 1073741822;
          v40.i64[0] = (int)v26;
          v40.i64[1] = SDWORD1(v26);
          float64x2_t v41 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v39, v38), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v40));
          float64x2_t v42 = vaddq_f64(v41, v36);
          float64x2_t v43 = vmaxnmq_f64(v29, v41);
          float64x2_t v44 = vsubq_f64(vminnmq_f64(vaddq_f64(v29, v30), v42), v43);
          int64x2_t v45 = vclezq_f64(v44);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v45, 1), (int8x16_t)v45).u64[0] & 0x8000000000000000) != 0)
          {
LABEL_17:
            float64x2_t v138 = 0uLL;
          }
          else
          {
            float64x2_t v137 = v43;
            float64x2_t v138 = v44;
          }
        }
        uint64_t v158 = 0;
        uint64_t v148 = 0;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        int8x16_t v139 = 0u;
        CA::Transform::set_affine((CA::Transform *)&v139, *(double *)(a2 + 16), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 40), *(double *)(a2 + 48), *(double *)(a2 + 56));
        CA::Transform::translate((CA::Transform *)&v139, *(double *)(a2 + 64), *(double *)(a2 + 72), 0.0);
        long long v46 = *(_OWORD *)(a5 + 16);
        long long v47 = *(_OWORD *)(a5 + 32);
        long long v48 = *(_OWORD *)(a5 + 48);
        int8x16_t v149 = *(int8x16_t *)a5;
        long long v150 = v46;
        long long v151 = v47;
        long long v152 = v48;
        long long v49 = *(_OWORD *)(a5 + 80);
        long long v50 = *(_OWORD *)(a5 + 96);
        long long v51 = *(_OWORD *)(a5 + 112);
        long long v153 = *(_OWORD *)(a5 + 64);
        long long v154 = v49;
        long long v155 = v50;
        long long v156 = v51;
        long long v157 = *(_OWORD *)(a5 + 128);
        LOBYTE(v158) = *(unsigned char *)(a5 + 144) & 0x1F;
        CA::Transform::translate((CA::Transform *)&v149, a4->f64[0], a4->f64[1], 0.0);
        CA::Transform::concat_left((CA::Transform *)&v149, (float64x2_t *)&v139, v52, v53);
        CA::Rect::unapply_transform((CA::Rect *)&v137, (const CA::Transform *)&v149, v54);
        long long v55 = *(_OWORD *)(a3 + 16);
        float64x2_t v135 = vsubq_f64(*(float64x2_t *)a3, *a4);
        long long v136 = v55;
        CA::Rect::unapply_transform((CA::Rect *)&v135, (const CA::Transform *)&v139, v56);
        uint64_t result = CA::OGL::transform_filter_bits((float64x2_t *)&v149, v57, 1.0, 1.0);
        float64x2_t v58 = v138;
        double v59 = v138.f64[0] <= v138.f64[1] ? v138.f64[1] : v138.f64[0];
        if (v59 < 2147483650.0)
        {
          uint64_t v60 = *(void *)(a1 + 16);
          unsigned int v61 = result | ((*(unsigned char *)(v60 + 481) & 1) << 8);
          if ((*(unsigned char *)(a1 + 432) & 2) != 0) {
            v61 ^= 0x800u;
          }
          if (a10) {
            unint64_t v62 = v61 ^ 0x800;
          }
          else {
            unint64_t v62 = v61;
          }
          if ((*(unsigned char *)(a2 + 13) & 2) != 0)
          {
            char v63 = 11;
          }
          else if (*(void *)(v60 + 8) == 0x3C003C003C003C00)
          {
            char v63 = 1;
          }
          else
          {
            char v63 = 3;
          }
          *(unsigned char *)(v60 + 16) = v63;
          uint64_t result = (uint64_t)CA::OGL::Context::bind_image(a1, 0, *(uint32x2_t **)(a2 + 128), (double *)v62, a7, a8, 0, 0, a9, &v179, 0);
          if (!result) {
            goto LABEL_15;
          }
          double v66 = fabs(*(double *)(a2 + 96));
          double v67 = fabs(*(double *)(a2 + 104));
          double v68 = v66 >= v67 ? v67 : v66;
          if (v68 > 0.0)
          {
            uint64_t v69 = result;
            float64x2_t v70 = v135;
            double v129 = *((double *)&v136 + 1);
            double v71 = *(double *)&v136;
            double v72 = *(double *)&v136 + v135.f64[0];
            double v131 = v135.f64[0];
            double v133 = *(double *)&v136 + v135.f64[0];
            double v73 = *(double *)&v136;
            if (v66 != 1.0)
            {
              double v73 = *(double *)(a2 + 80);
              double v131 = floor(v137.f64[0] / v66) * v66;
              double v133 = ceil((v58.f64[0] + v137.f64[0]) / v66) * v66;
              double v71 = v66;
            }
            double v74 = *((double *)&v136 + 1) + v135.f64[1];
            double v128 = v135.f64[1];
            double v130 = *((double *)&v136 + 1) + v135.f64[1];
            double v132 = *((double *)&v136 + 1);
            if (v67 != 1.0)
            {
              double v132 = *(double *)(a2 + 88);
              double v128 = floor(v137.f64[1] / v67) * v67;
              double v129 = v67;
              double v130 = ceil((v58.f64[1] + v137.f64[1]) / v67) * v67;
            }
            if ((a11 & 1) == 0)
            {
              int v76 = 0;
              uint64_t v148 = 0;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v140 = 0u;
              long long v141 = 0u;
              int8x16_t v139 = 0u;
              unsigned int v75 = v158;
              goto LABEL_48;
            }
            unsigned int v75 = v158;
            if ((v158 & 0x10) != 0)
            {
              BOOL is_rectilinear = CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)&v149, v64);
              uint64_t v148 = 0;
              long long v146 = 0u;
              long long v147 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v142 = 0u;
              long long v143 = 0u;
              long long v140 = 0u;
              long long v141 = 0u;
              int8x16_t v139 = 0u;
              if (!is_rectilinear)
              {
                int v76 = 0;
LABEL_48:
                uint64_t v78 = *(void *)(*(void *)(a1 + 248) + 8);
                BOOL v79 = ((v75 >> 4) & 1) == 0;
                v172[0] = a1;
                v172[1] = v78;
                long long v173 = 0u;
                long long v174 = 0u;
                v172[2] = 0;
                BYTE8(v173) = v79;
                BYTE9(v173) = 1;
                CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v172);
                while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v172, (int32x2_t *)&v134))
                {
                  if (v128 < v130)
                  {
                    double v82 = v128;
                    do
                    {
                      if (v131 < v133)
                      {
                        double v83 = v131;
                        do
                        {
                          if (v76)
                          {
                            v159.f64[0] = v83;
                            v159.f64[1] = v82;
                            v160.f64[0] = v73;
                            v160.f64[1] = v132;
                            CA::Rect::apply_transform((int8x16_t *)&v159, (const CA::Transform *)&v149, v80);
                            double v85 = v160.f64[1];
                            if (v160.f64[0] <= v160.f64[1]) {
                              double v86 = v160.f64[1];
                            }
                            else {
                              double v86 = v160.f64[0];
                            }
                            if (v86 < 1.79769313e308)
                            {
                              if (v160.f64[0] < v160.f64[1]) {
                                double v85 = v160.f64[0];
                              }
                              if (v85 > 0.0)
                              {
                                float64x2_t v87 = vrndaq_f64(v159);
                                float64x2_t v88 = vsubq_f64(vrndaq_f64(vaddq_f64(v159, v160)), v87);
                                float64x2_t v159 = v87;
                                float64x2_t v160 = v88;
                              }
                            }
                            CA::Rect::unapply_inverse_transform((int8x16_t *)&v159, (float64x2_t *)&v139, v84);
                            double v89 = v159.f64[1];
                            double v90 = v159.f64[0];
                            double v91 = v160.f64[0] + v159.f64[0];
                            double v92 = v160.f64[1] + v159.f64[1];
                          }
                          else
                          {
                            double v91 = v83 + v73;
                            double v92 = v82 + v132;
                            double v89 = v82;
                            double v90 = v83;
                          }
                          if (v91 > v70.f64[0] && v90 < v72 && v92 > v70.f64[1] && v89 < v74)
                          {
                            double v96 = v179.f32[0];
                            double v97 = v179.f32[2];
                            if (v90 < v70.f64[0])
                            {
                              float v98 = (v70.f64[0] - v90) / (v91 - v90);
                              double v96 = v96 + (v97 - v96) * v98;
                              double v90 = v70.f64[0];
                            }
                            if (v91 > v72)
                            {
                              float v99 = (v91 - v72) / (v91 - v90);
                              double v97 = v97 + (v96 - v97) * v99;
                              double v91 = v72;
                            }
                            double v100 = v179.f32[1];
                            double v101 = v179.f32[3];
                            if (v89 < v70.f64[1])
                            {
                              float v102 = (v70.f64[1] - v89) / (v92 - v89);
                              double v100 = v100 + (v101 - v100) * v102;
                              double v89 = v70.f64[1];
                            }
                            if (v92 > v74)
                            {
                              float v103 = (v92 - v74) / (v92 - v89);
                              double v101 = v101 + (v100 - v101) * v103;
                              double v92 = v74;
                            }
                            v175.f64[0] = v90;
                            v175.f64[1] = v89;
                            v176.f64[0] = v91;
                            v176.f64[1] = v92;
                            *(float *)&unsigned int v104 = v96;
                            *(float *)&unsigned int v105 = v100;
                            unint64_t v177 = __PAIR64__(v105, v104);
                            *(float *)&unsigned int v106 = v97;
                            *(float *)&unsigned int v107 = v101;
                            unint64_t v178 = __PAIR64__(v107, v106);
                            CA::OGL::emit_quad((CA::OGL *)a1, (CA::OGL::Context *)&v175, (const double *)&v134, (const CA::Bounds *)&v149, (const CA::Transform *)&v177, 0, v81);
                          }
                          if (v71 <= 0.0) {
                            break;
                          }
                          double v83 = v83 + v71;
                        }
                        while (v83 < v133);
                      }
                      double v82 = v82 + v129;
                    }
                    while (v129 > 0.0 && v82 < v130);
                  }
                }
                if (v71 - v73 > 0.0 || v129 - v132 > 0.0)
                {
                  unint64_t v109 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 480);
                  if (v109 <= 0xF && ((0x3ACCu >> v109) & 1) == 0)
                  {
                    long long v171 = 0u;
                    uint64_t v111 = *(void *)(*(void *)(a1 + 248) + 8);
                    v169[0] = a1;
                    v169[1] = v111;
                    long long v170 = 0u;
                    v169[2] = 0;
                    BYTE8(v170) = v79;
                    BYTE9(v170) = 1;
                    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v169);
                    *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
                    uint64_t v112 = *(void *)(a1 + 16);
                    uint64_t v113 = *(void *)(v112 + 8);
                    *(void *)(v112 + 8) = 0;
                    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v169, (int32x2_t *)&v134))
                    {
                      if (v128 < v130)
                      {
                        double v116 = v128;
                        do
                        {
                          if (v131 < v133)
                          {
                            double v117 = v131;
                            do
                            {
                              uint64_t v118 = 0;
                              v159.f64[0] = v117 + v73;
                              v159.f64[1] = v116;
                              v160.f64[0] = v71 - v73;
                              v160.f64[1] = v132;
                              double v161 = v117;
                              double v162 = v116 + v132;
                              double v163 = v73;
                              double v164 = v129 - v132;
                              double v165 = v117 + v73;
                              double v166 = v116 + v132;
                              double v167 = v71 - v73;
                              double v168 = v129 - v132;
                              do
                              {
                                int v119 = (float64x2_t *)((char *)&v159 + v118);
                                if (v76)
                                {
                                  CA::Rect::apply_transform((int8x16_t *)((char *)&v159 + v118), (const CA::Transform *)&v149, v114);
                                  float64x2_t v121 = v119[1];
                                  double v122 = v119[1].f64[1];
                                  if (v121.f64[0] <= v122) {
                                    double v123 = v119[1].f64[1];
                                  }
                                  else {
                                    double v123 = v119[1].f64[0];
                                  }
                                  if (v123 < 1.79769313e308)
                                  {
                                    if (v121.f64[0] < v122) {
                                      double v122 = v119[1].f64[0];
                                    }
                                    if (v122 > 0.0)
                                    {
                                      float64x2_t v124 = vrndaq_f64(*v119);
                                      float64x2_t v125 = vsubq_f64(vrndaq_f64(vaddq_f64(*v119, v121)), v124);
                                      float64x2_t *v119 = v124;
                                      v119[1] = v125;
                                    }
                                  }
                                  CA::Rect::unapply_inverse_transform((int8x16_t *)((char *)&v159 + v118), (float64x2_t *)&v139, v120);
                                }
                                float64x2_t v126 = vaddq_f64(v119[1], *v119);
                                float64x2_t v175 = *v119;
                                float64x2_t v176 = v126;
                                CA::OGL::emit_quad((CA::OGL *)a1, (CA::OGL::Context *)&v175, (const double *)&v134, (const CA::Bounds *)&v149, 0, 0, v115);
                                v118 += 32;
                              }
                              while (v118 != 96);
                              if (v71 <= 0.0) {
                                break;
                              }
                              double v117 = v117 + v71;
                            }
                            while (v117 < v133);
                          }
                          double v116 = v116 + v129;
                        }
                        while (v129 > 0.0 && v116 < v130);
                      }
                    }
                    *(void *)(*(void *)(a1 + 16) + 8) = v113;
                  }
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 520))(a1, v69, 0);
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t v148 = 0;
            }
            int8x16_t v139 = v149;
            long long v140 = v150;
            long long v141 = v151;
            long long v142 = v152;
            long long v143 = v153;
            long long v144 = v154;
            long long v145 = v155;
            long long v146 = v156;
            long long v147 = v157;
            LOBYTE(v148) = v75 & 0x1F;
            CA::Transform::invert(&v139, (uint64_t)v64, v65);
            int v76 = 1;
            goto LABEL_48;
          }
        }
      }
    }
  }
  return result;
}

void CA::OGL::fill_surface_rect(CA::OGL::Context *a1, uint64_t a2, CA::Transform *a3, uint64_t a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t v49[2] = *(float32x2_t *)MEMORY[0x1E4F143B8];
  int v10 = *(_DWORD *)(a2 + 40);
  int v11 = *(_DWORD *)(a2 + 44);
  if (v10 <= v11) {
    int v12 = *(_DWORD *)(a2 + 44);
  }
  else {
    int v12 = *(_DWORD *)(a2 + 40);
  }
  double v13 = (double)v10;
  uint64_t v14 = *(void *)(a2 + 32);
  double v15 = (double)v11;
  if (v12 > 1073741822)
  {
    double v13 = 1.79769313e308;
    double v15 = 1.79769313e308;
  }
  v46.f64[0] = v13;
  v46.f64[1] = v15;
  float64x2_t v43 = a5;
  float64x2_t v44 = a6;
  CA::Rect::unapply_transform((CA::Rect *)&v43, a3, (const double *)a3);
  int64x2_t v18 = vclezq_f64(v46);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v18, 1), (int8x16_t)v18).u64[0] & 0x8000000000000000) == 0)
  {
    int64x2_t v19 = vclezq_f64(v44);
    int32x4_t v20 = (int32x4_t)vdupq_laneq_s64(v19, 1);
    int32x4_t v21 = (int32x4_t)vorrq_s8((int8x16_t)v20, (int8x16_t)v19);
    if ((v21.i64[0] & 0x8000000000000000) == 0)
    {
      v21.i32[0] = 1073741822;
      v20.i32[0] = v12;
      int8x16_t v22 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v20, v21), 0);
      v23.i64[0] = (int)v14;
      v23.i64[1] = SHIDWORD(v14);
      int8x16_t v24 = (int8x16_t)vcvtq_f64_s64(v23);
      float64x2_t v25 = (float64x2_t)vbslq_s8(v22, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v24);
      float64x2_t v26 = vmaxnmq_f64(v25, v43);
      float64x2_t v27 = vsubq_f64(vminnmq_f64(vaddq_f64(v25, v46), vaddq_f64(v43, v44)), v26);
      int64x2_t v28 = vclezq_f64(v27);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28).u64[0] & 0x8000000000000000) == 0)
      {
        float64x2_t v45 = v26;
        float64x2_t v46 = v27;
        v49[0] = vcvt_f32_f64(vsubq_f64(v26, (float64x2_t)v24));
        v49[1] = vcvt_f32_f64(vaddq_f64(v27, vcvtq_f64_f32(v49[0])));
        uint64_t v48 = 0;
        long long v29 = *(_OWORD *)(a4 + 16);
        long long v30 = *(_OWORD *)(a4 + 32);
        long long v31 = *(_OWORD *)(a4 + 48);
        v47[0] = *(_OWORD *)a4;
        v47[1] = v29;
        v47[2] = v30;
        v47[3] = v31;
        long long v32 = *(_OWORD *)(a4 + 80);
        long long v33 = *(_OWORD *)(a4 + 96);
        long long v34 = *(_OWORD *)(a4 + 112);
        v47[4] = *(_OWORD *)(a4 + 64);
        v47[5] = v32;
        v47[6] = v33;
        v47[7] = v34;
        v47[8] = *(_OWORD *)(a4 + 128);
        LOBYTE(v48) = *(unsigned char *)(a4 + 144) & 0x1F;
        CA::Transform::concat_left((CA::Transform *)v47, (float64x2_t *)a3, v16, v17);
        CA::OGL::Context::bind_surface((uint64_t)a1, a2, 0, 1u, 1, 0.0);
        if ((*((_DWORD *)a1 + 108) & 8) != 0) {
          int v36 = 0;
        }
        else {
          int v36 = 15;
        }
        v37[0] = &v45;
        v37[1] = v47;
        int v38 = 9;
        int v39 = v36;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v40 = 0;
        CA::OGL::fill_rect_tex(a1, (uint64_t)v37, (uint64_t)v49, v35);
        CA::OGL::Context::unbind_surface(a1, a2, 0);
      }
    }
  }
}

void CA::OGL::anonymous namespace'::MaskWithRect::draw(void (***a1)(void, int32x2_t *, long long *), int32x2_t *a2, float64x2_t **a3)
{
  __dst[61] = *MEMORY[0x1E4F143B8];
  int32x2_t v6 = a2[31];
  double v7 = (const CA::Transform *)a3[1];
  float64x2_t v8 = (*a3)[1];
  float64x2_t v41 = **a3;
  float64x2_t v42 = v8;
  CA::Rect::apply_transform((int8x16_t *)&v41, v7, (double *)a3);
  int64x2_t v9 = vceqzq_f64(v42);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v10 = vorrq_s8((int8x16_t)vcltzq_f64(v42), (int8x16_t)vcgezq_f64(v42)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v10), 1), v10).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v40 = 0uLL;
  }
  else
  {
    int32x4_t v11 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v41, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v40 = vuzp1q_s32(v11, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v41, v42), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v11));
  }
  int v12 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(*(void *)&v6 + 8), (const CA::Bounds *)&v40);
  CA::Shape::get_bounds((uint64_t)v12, v40.i32);
  double v13 = (int32x2_t *)a2[33];
  if (v13) {
    uint64_t v14 = v13 + 4;
  }
  else {
    uint64_t v14 = a2 + 25;
  }
  uint32x2_t v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v40.u64[1]);
  if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v16 = v14[1];
    uint32x2_t v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v16);
    if ((vpmax_u32(v17, v17).u32[0] & 0x80000000) == 0)
    {
      *(int32x2_t *)v18.i8 = vmax_s32(*(int32x2_t *)v40.i8, *v14);
      int32x2_t v19 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v40.i8, (int32x2_t)v40.u64[1]), vadd_s32(*v14, v16)), *(int32x2_t *)v18.i8);
      uint32x2_t v20 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v19);
      if ((vpmax_u32(v20, v20).u32[0] & 0x80000000) == 0)
      {
        v18.u64[1] = (unint64_t)v19;
        int32x4_t v40 = v18;
        int32x4_t v21 = (const void *)a2[2];
        memcpy(__dst, v21, 0x1E8uLL);
        __dst[0] = v21;
        a2[2] = (int32x2_t)__dst;
        uint64_t v22 = (*(uint64_t (**)(int32x2_t *, uint64_t, int32x4_t *, uint64_t))(*(void *)a2 + 656))(a2, 1, &v40, 15);
        int64x2_t v23 = (const void *)__dst[0];
        a2[2] = (int32x2_t)__dst[0];
        __dst[0] = 0;
        if (v22)
        {
          int8x16_t v24 = (_DWORD *)v22;
          uint64_t v45 = 0x3C003C003C003C00;
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          long long v44 = *(_OWORD *)(*(void *)&v6 + 16);
          LODWORD(v49) = *(_DWORD *)(*(void *)&v6 + 64);
          WORD2(v49) = *(_WORD *)(*(void *)&v6 + 68) & 0x500 | 0xF;
          v43[0] = 0;
          v43[1] = v12;
          memcpy(__dst, v23, 0x1E8uLL);
          __dst[0] = v23;
          a2[2] = (int32x2_t)__dst;
          v43[0] = CA::OGL::Context::set_gstate((uint64_t)a2, (uint64_t)v43);
          CA::OGL::Context::push_surface((uint64_t)a2, (uint64_t)v24, 1u, 4, 0);
          int v25 = *((_DWORD *)a3 + 5);
          int v26 = a3[2] & 0x3F;
          long long v34 = *(_OWORD *)a3;
          int v35 = v26;
          int v36 = v25;
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v37 = 0;
          *(void *)(*(void *)&a2[2] + 8) = 0x3C003C003C003C00;
          *(unsigned char *)(*(void *)&a2[2] + 481) &= ~1u;
          WORD2(v49) &= ~0x400u;
          (**a1)(a1, a2, &v34);
          WORD2(v49) |= 0x400u;
          *(unsigned char *)(*(void *)&a2[2] + 481) |= 1u;
          CA::OGL::fill_rect((uint64_t)a2, (uint64_t)&v34, v27, v28);
          CA::OGL::Context::pop_surface((CA::OGL::Context *)a2);
          CA::OGL::Context::set_gstate((uint64_t)a2, **(void **)&a2[31]);
          a2[2] = (int32x2_t)__dst[0];
          __dst[0] = 0;
          long long v29 = *(CA::Shape **)(*(void *)&v6 + 8);
          v33[0] = 0;
          v33[1] = 0;
          CA::OGL::emit_combine((uint64_t)a2, 3u, v24, 0, v29, (unsigned int *)v33);
          CA::OGL::Context::release_surface((uint64_t)a2, (uint64_t)v24);
          if (byte_1EB2ACBE1) {
            CA::OGL::fill_color_rect((uint64_t)a2, (uint64_t)&v34, (double *)0x80800080, v30, v31, v32);
          }
        }
        CA::Shape::unref(v12);
        if (__dst[0]) {
          __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
        }
      }
    }
  }
}

void CA::OGL::anonymous namespace'::tile_rect_tex_(uint64_t a1, float64_t **a2, _DWORD *a3, double *a4)
{
  v14[2] = *(float64_t *)MEMORY[0x1E4F143B8];
  double v5 = (*a2)[1];
  double v6 = (*a2)[3];
  float64_t v7 = (*a2)[2] + **a2;
  v14[0] = **a2;
  v14[1] = v7;
  *(double *)double v13 = v5;
  *(double *)&v13[1] = v6 + v5;
  LODWORD(v5) = a3[1];
  LODWORD(v7) = a3[2];
  LODWORD(v6) = a3[3];
  v12[0] = *a3;
  v12[1] = LODWORD(v7);
  v11[0] = LODWORD(v5);
  v11[1] = LODWORD(v6);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(v8 + 16) & 0xFFFFFF00FF00FF00;
  if (*(void *)(v8 + 8) == 0x3C003C003C003C00) {
    int v10 = 1;
  }
  else {
    int v10 = 3;
  }
  *(_DWORD *)(v8 + 16) = v10 | v9;
  *(_DWORD *)(v8 + 20) = HIDWORD(v9);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
}

void CA::OGL::tile_rect_tex(CA::OGL::Context &,CA::OGL::RectState const&,float const*,double const*)::MaskedTileRect::draw_content(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)a3 + 4);
  long long v4 = *a3;
  int v5 = v3;
  uint64_t v6 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  int v9 = 0;
}

void CA::OGL::tile_rect_tex(CA::OGL::Context &,CA::OGL::RectState const&,float const*,double const*,float const*,double const*)::MaskedTileRect9::draw_content(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)a3 + 4);
  long long v4 = *a3;
  int v5 = v3;
  uint64_t v6 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  int v9 = 0;
}

uint64_t CA::OGL::merge_compressed_geometry(CA::OGL *this, const double *a2, const double *a3, const float *a4, const float *a5, float a6, uint64_t a7, float a8, float a9, double *a10, float *a11, float *a12)
{
  double v13 = *(double *)this;
  double v14 = a6;
  if (*(double *)this >= *a2 - v14) {
    double v13 = *a2 - v14;
  }
  float v15 = v13 + -1.0;
  int v16 = (int)v15;
  if (a5 < 2)
  {
    float v17 = 100.0;
    float v18 = 100.0;
  }
  else
  {
    float v17 = *((float *)a3 + 1) - *(float *)a3;
    float v18 = a4[1] - *a4;
  }
  unsigned int v19 = 0;
  LODWORD(result) = 0;
  unsigned int v21 = 0;
  double v22 = -v14;
  float v23 = a8 - v17;
  float v24 = a9 - v18;
  int v25 = v16;
  do
  {
    double v26 = *((double *)this + v19);
    double v27 = a2[v21];
    double v28 = v27 - v14;
    if (v26 >= v27 - v14)
    {
      if (v28 >= v26)
      {
        *(double *)(a7 + 8 * result) = v26;
        float v23 = *((float *)a3 + v19);
        *((float *)a10 + result) = v23;
        float v24 = a4[v21];
        a11[result] = v24;
        int v25 = (int)v26;
        int v16 = (int)v28;
        ++v19;
      }
      else
      {
        *(double *)(a7 + 8 * result) = v28;
        float v30 = (v22 - (double)v25 + v27) * (float)(*((float *)a3 + v19) - v23) / (v26 - (double)v25) + v23;
        *((float *)a10 + result) = v30;
        float v24 = a4[v21];
        a11[result] = v24;
        int v16 = (int)v28;
      }
      ++v21;
    }
    else
    {
      *(double *)(a7 + 8 * result) = v26;
      float v23 = *((float *)a3 + v19);
      *((float *)a10 + result) = v23;
      float v29 = (v26 - (double)v16) * (float)(a4[v21] - v24) / (v22 - (double)v16 + v27) + v24;
      a11[result] = v29;
      int v25 = (int)v26;
      ++v19;
    }
    uint64_t result = (result + 1);
  }
  while (v19 <= a5 && v21 <= a5);
  if (a5 < 2)
  {
    float v31 = 100.0;
    float v32 = 100.0;
  }
  else
  {
    float v31 = *((float *)a3 + a5) - *((float *)a3 + (a5 - 1));
    float v32 = a4[a5] - a4[a5 - 1];
  }
  if (v19 <= a5)
  {
    int v33 = 0;
    float v34 = a4[v21 - 1] + v32;
    do
    {
      unsigned int v35 = result + v33;
      *(void *)(a7 + 8 * v35) = *((void *)this + v19 + v33);
      *((_DWORD *)a10 + v35) = *((_DWORD *)a3 + v19 + v33);
      a11[v35] = v34;
      ++v33;
    }
    while (v19 + v33 <= a5);
    uint64_t result = (result + v33);
    v19 += v33;
  }
  if (v21 <= a5)
  {
    float v36 = *((float *)a3 + v19 - 1) + v31;
    do
    {
      *(double *)(a7 + 8 * result) = a2[v21] - v14;
      a11[result] = a4[v21];
      *((float *)a10 + result) = v36;
      uint64_t result = (result + 1);
      ++v21;
    }
    while (v21 <= a5);
  }
  return result;
}

uint64_t CA::OGL::emit_rim_rounded_rect(void *a1, float64x2_t *a2, void *a3, double *a4, int a5, CA::Mat4Impl *this, double a7, float a8, int8x16_t a9, double a10)
{
  double v13 = a3;
  v58[1] = *MEMORY[0x1E4F143B8];
  if (byte_1EB2ACC6F) {
    *a3 = 0x3C00380000000000;
  }
  *(unsigned char *)(a1[2] + 481) |= 1u;
  *(unsigned char *)(a1[2] + 16) = 56;
  v45[0] = a2;
  v45[1] = this;
  int v46 = 63;
  uint64_t v47 = 0;
  uint64_t v49 = 0;
  uint64_t v48 = 0;
  int v50 = 0;
  *(double *)&a9.i64[1] = a10;
  int32x2_t v17 = vdup_n_s32(a4 == 0);
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  float64x2_t v42 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), a9, (int8x16_t)vmulq_f64((float64x2_t)a9, (float64x2_t)vdupq_n_s64(0x3FF875696E58A32FuLL)));
  int8x16_t v19 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(a2[1], (float64x2_t)vdupq_n_s64(0xBFF721E8A7A4B61BLL)), v42), (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL));
  __asm { FMOV            V1.2D, #1.0 }
  int8x16_t v25 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v19, (float64x2_t)_Q1), _Q1, v19);
  v58[0] = vcvt_f32_f64((float64x2_t)vbicq_s8(v25, (int8x16_t)vcltzq_f64((float64x2_t)v25)));
  double v43 = 0.0;
  double v44 = 0.0;
  if ((*((unsigned char *)this + 144) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale(this, &v44, &v43, a4);
    double v26 = v43;
    double v27 = v44;
  }
  else
  {
    double v26 = *((double *)this + 16);
    double v43 = v26;
    double v44 = v26;
    double v27 = v26;
  }
  double v28 = v27 * v42.f64[0];
  double v29 = vmuld_lane_f64(v26, v42, 1);
  if (v28 >= v29) {
    double v30 = v28;
  }
  else {
    double v30 = v29;
  }
  uint64_t v57 = 0;
  LODWORD(a3) = vcvtpd_s64_f64(v30);
  (*(void (**)(void *, void, void *, void, void, uint64_t *, double *, void *))(*a1 + 472))(a1, 0, a3, 0, 0, &v57, a4, v58);
  double v32 = v43;
  if (v43 >= v44) {
    double v32 = v44;
  }
  float v33 = v30;
  float v34 = v32 * a7 / v33;
  uint64_t v35 = a1[2];
  *(float *)(v35 + 24) = v34;
  *(float *)(v35 + 28) = a8;
  *(void *)(v35 + 32) = 0;
  *(void *)(v35 + 8) = *v13;
  double v36 = a2->f64[1];
  float64_t v37 = a2->f64[0] + v42.f64[0];
  float64_t v38 = a2[1].f64[0] + a2->f64[0];
  float64_t v39 = a2[1].f64[1] + v36;
  v56[0] = a2->f64[0] - a7;
  v56[1] = v37;
  v56[2] = v38 - v42.f64[0];
  v56[3] = v38 + a7;
  v55[0] = v36 - a7;
  v55[1] = v36 + v42.f64[1];
  v55[2] = v39 - v42.f64[1];
  v55[3] = v39 + a7;
  double v40 = a7 * *((float *)&v57 + 1);
  *(float *)&float64_t v39 = v40 / fmax(v42.f64[0], 0.00100000005) + *((float *)&v57 + 1);
  *(float *)&double v52 = -*(float *)&v39;
  *((float *)&v52 + 1) = *(float *)&v57 + (float)((float)(*((float *)&v57 + 1) - *(float *)&v57) * 0.5);
  *(float *)&double v36 = v40 / fmax(v42.f64[1], 0.00100000005) + *((float *)&v57 + 1);
  float v53 = *((float *)&v52 + 1);
  int v54 = LODWORD(v39);
  v51[0] = -*(float *)&v36;
  v51[1] = *((float *)&v52 + 1);
  v51[2] = *((float *)&v52 + 1);
  v51[3] = *(float *)&v36;
  CA::OGL::emit_nine_part_rect((uint64_t)a1, (uint64_t)v45, (uint64_t)v56, (uint64_t)v55, (uint64_t)&v52, (uint64_t)v51, 0, 0, ~(a5 << 22) & 0x3C00000);
  uint64_t result = (*(uint64_t (**)(void *, void, void))(*a1 + 520))(a1, 0, 0);
  *(unsigned char *)(a1[2] + 16) = 0;
  return result;
}

void CA::OGL::emit_large_brim(CA::OGL::Context *a1, uint64_t a2, float64x2_t *a3, double *a4, float16x4_t *a5, CA::Mat4Impl *this, int a7, double a8, float a9, double a10, float a11)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  float v71 = a11;
  if (byte_1EB2ACC6F)
  {
    *a4 = 1.09955464e-19;
    *a5 = (float16x4_t)0x3C0000003A003A00;
  }
  double v69 = 0.0;
  double v70 = 0.0;
  if ((*((unsigned char *)this + 144) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale(this, &v70, &v69, a4);
    double v20 = v69;
    double v21 = v70;
  }
  else
  {
    double v20 = *((double *)this + 16);
    double v69 = v20;
    double v70 = v20;
    double v21 = v20;
  }
  if (v21 >= v20) {
    double v22 = v20;
  }
  else {
    double v22 = v21;
  }
  float v23 = v22 * a8;
  float v24 = ceilf(v23);
  float v58 = v24 + 1.0;
  int64x2_t v57 = (int64x2_t)vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x4080000040000000, v24 + 1.0));
  float64x2_t v56 = (float64x2_t)vdupq_lane_s64(v57.i64[0], 0);
  int32x4_t v68 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(*a3, v56)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(a3[1], (float64x2_t)vdupq_laneq_s64(v57, 1))));
  uint64_t v25 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, int32x4_t *, uint64_t))(*(void *)a1 + 656))(a1, 1, &v68, 0x200000);
  uint64_t v26 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, int32x4_t *, uint64_t))(*(void *)a1 + 656))(a1, 1, &v68, 0x200000);
  uint64_t v27 = v26;
  if (v25 && v26)
  {
    float v28 = v22 * a10;
    float v29 = ceilf(v28);
    uint64_t v30 = *((void *)a1 + 2);
    char v31 = *(unsigned char *)(v30 + 481);
    int v54 = a5;
    if (v31)
    {
      *(unsigned char *)(v30 + 481) = v31 & 0xFE;
      uint64_t v30 = *((void *)a1 + 2);
    }
    float64x2_t v55 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v58), 0);
    float64x2_t v32 = vsubq_f64(*a3, v55);
    float64x2_t v33 = vaddq_f64(a3[1], v56);
    int32x4_t v34 = (int32x4_t)vcvtq_s64_f64(v33);
    *(int32x2_t *)v34.i8 = vmovn_s64((int64x2_t)v34);
    uint64_t v73 = 0;
    v72[0] = (int32x4_t)xmmword_184997D50;
    v72[1] = 0u;
    float64x2_t v72[2] = (int32x4_t)xmmword_184997D60;
    memset(&v72[3], 0, 32);
    v72[5] = (int32x4_t)xmmword_184997D50;
    v72[6] = 0u;
    v72[7] = (int32x4_t)xmmword_184997D60;
    __asm { FMOV            V3.2D, #1.0 }
    v72[8] = _Q3;
    int v40 = v34.i32[1];
    if (v34.i32[0] > v34.i32[1]) {
      int v40 = v34.i32[0];
    }
    v34.i32[0] = v40;
    _Q3.i32[0] = 1073741822;
    int8x16_t v41 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v34, _Q3), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vrndq_f64(v32));
    int32x2_t v42 = vdup_n_s32(v40 > 1073741822);
    v43.i64[0] = v42.u32[0];
    v43.i64[1] = v42.u32[1];
    v67[0] = v41;
    v67[1] = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v43, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), (int8x16_t)vrndq_f64(v33));
    v61[0] = v67;
    v61[1] = v72;
    int v62 = 63;
    uint64_t v63 = 0;
    uint64_t v65 = 0;
    uint64_t v64 = 0;
    int v66 = 0;
    *(unsigned char *)(v30 + 16) = 58;
    (*(void (**)(CA::OGL::Context *, void, uint64_t, uint64_t, float *))(*(void *)a1 + 1000))(a1, 0, 1, 1, &v71);
    v81[0] = -v58;
    v81[1] = -v58;
    float32x2_t v82 = vcvt_f32_f64(vaddq_f64(a3[1], v55));
    CA::OGL::Context::bind_surface((uint64_t)a1, a2, 0, 0, 0, 0.0);
    CA::OGL::Context::push_surface((uint64_t)a1, v25, 1u, 64, 0);
    CA::OGL::emit_one_part_rect(a1, (uint64_t)v61, (const CA::Transform *)v81, 0, 0);
    CA::OGL::Context::pop_surface(a1);
    CA::OGL::Context::unbind_surface(a1, a2, 0);
    *(unsigned char *)(*((void *)a1 + 2) + 16) = 59;
    v79[0] = v24 + 1.0;
    v79[1] = v24 + 1.0;
    float32x2_t v80 = vcvt_f32_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)v57.i64 + v58), 0), a3[1]));
    if (v24 <= v29) {
      float v44 = v29;
    }
    else {
      float v44 = v24;
    }
    float v60 = v58 - v81[0];
    unint64_t v45 = ((unint64_t)(float)(v44 + 1.0) - 1) | (((unint64_t)(float)(v44 + 1.0) - 1) >> 1);
    unint64_t v46 = v45 | (v45 >> 2) | ((v45 | (v45 >> 2)) >> 4);
    unint64_t v47 = v46 | (v46 >> 8) | ((v46 | (v46 >> 8)) >> 16);
    float v48 = (float)((v47 | HIDWORD(v47)) + 1);
    (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float *))(*(void *)a1 + 1000))(a1, 1, 1, 1, &v60);
    (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float *))(*(void *)a1 + 1000))(a1, 2, 1, 1, &v71);
    CA::OGL::Context::bind_surface((uint64_t)a1, a2, 1u, 0, 0, 0.0);
    uint64_t v49 = v25;
    uint64_t v50 = v27;
    do
    {
      uint64_t v51 = v50;
      uint64_t v50 = v49;
      float v59 = v48 * 0.5;
      (*(void (**)(CA::OGL::Context *, void, uint64_t, uint64_t, float *))(*(void *)a1 + 1000))(a1, 0, 1, 1, &v59);
      CA::OGL::Context::bind_surface((uint64_t)a1, v50, 0, 0, 0, 0.0);
      CA::OGL::Context::push_surface((uint64_t)a1, v51, 1u, 64, 0);
      CA::OGL::emit_one_part_rect(a1, (uint64_t)v61, (const CA::Transform *)v79, (uint64_t)v81, 0);
      CA::OGL::Context::pop_surface(a1);
      CA::OGL::Context::unbind_surface(a1, v50, 0);
      float v48 = v59;
      uint64_t v49 = v51;
    }
    while (v59 > 1.0);
    CA::OGL::Context::unbind_surface(a1, a2, 1);
    uint64_t v52 = *((void *)a1 + 2);
    if (a7)
    {
      *(unsigned char *)(v52 + 16) = 61;
      float32x4_t v78 = vcvtq_f32_f16(*(float16x4_t *)a4);
      v77.i64[0] = __PAIR64__(LODWORD(a9), LODWORD(v23));
      v77.i64[1] = __PAIR64__(LODWORD(v60), LODWORD(v71));
      (*(void (**)(CA::OGL::Context *, void, uint64_t, uint64_t, float32x4_t *))(*(void *)a1 + 1000))(a1, 0, 4, 1, &v78);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float32x4_t *))(*(void *)a1 + 1000))(a1, 1, 4, 1, &v77);
    }
    else
    {
      *(unsigned char *)(v52 + 16) = 60;
      float32x4_t v53 = vcvtq_f32_f16(*(float16x4_t *)a4);
      float32x4_t v77 = vcvtq_f32_f16(*v54);
      float32x4_t v78 = v53;
      *(float *)int v76 = v23;
      *(float *)&v76[1] = v28;
      *(float *)&v76[2] = a9;
      v76[3] = 0;
      *(float *)double v74 = v71;
      *(float *)&v74[1] = v60;
      uint64_t v75 = 0;
      (*(void (**)(CA::OGL::Context *, void, uint64_t, uint64_t, float32x4_t *))(*(void *)a1 + 1000))(a1, 0, 4, 1, &v78);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, float32x4_t *))(*(void *)a1 + 1000))(a1, 1, 4, 1, &v77);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)a1 + 1000))(a1, 2, 4, 1, v76);
      (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)a1 + 1000))(a1, 3, 2, 1, v74);
    }
    *(unsigned char *)(*((void *)a1 + 2) + 481) |= 1u;
    CA::OGL::Context::bind_surface((uint64_t)a1, v51, 0, 0, 0, 0.0);
    CA::OGL::Context::bind_surface((uint64_t)a1, a2, 1u, 0, 0, 0.0);
    CA::OGL::emit_one_part_rect(a1, (uint64_t)v61, (const CA::Transform *)v79, (uint64_t)v81, 0);
    CA::OGL::Context::unbind_surface(a1, v51, 0);
    CA::OGL::Context::unbind_surface(a1, a2, 1);
    if ((v31 & 1) == 0) {
      *(unsigned char *)(*((void *)a1 + 2) + 481) &= ~1u;
    }
    *(unsigned char *)(*((void *)a1 + 2) + 16) = 0;
    CA::OGL::Context::release_surface((uint64_t)a1, v25);
LABEL_30:
    CA::OGL::Context::release_surface((uint64_t)a1, v27);
    return;
  }
  if (v25) {
    CA::OGL::Context::release_surface((uint64_t)a1, v25);
  }
  if (v27) {
    goto LABEL_30;
  }
}

void sub_18490494C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_184904E4C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_184905520(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void CAImageQueueFlush(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    int v5 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v5;
    *(_DWORD *)(v4 + 16) = v5;
    os_unfair_lock_unlock(v2);
    CAImageQueueCollect_(a1, 0, 0);
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

void CAImageQueueFlushWithTransaction(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    int v5 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v5;
    uint64_t v6 = (CA::Context *)*(unsigned int *)(a1 + 208);
    if (v6 && (v7 = CA::Context::retain_context_with_id(v6), int v5 = *(_DWORD *)(a1 + 24), v7))
    {
      uint64_t v8 = v7;
      int valuePtr = *(_DWORD *)(a1 + 24);
      CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      uint64_t v10 = *((void *)v8 + 27);
      v8 += 54;
      int v11 = (*(uint64_t (**)(int *))(v10 + 16))(v8);
      CA::Transaction::add_command((CA::Transaction *)0xE, v11, *(unsigned int *)(a1 + 28), v9, v12);
      CFRelease(v9);
      (**(void (***)(int *))v8)(v8);
    }
    else
    {
      *(_DWORD *)(v4 + 16) = v5;
    }
  }
  os_unfair_lock_unlock(v2);
}

void CAShmemImageQueueShow(uint64_t a1, uint64_t a2, char a3, int a4, char a5)
{
  uint64_t v9 = a1;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = atomic_load((unint64_t *)(a1 + 8));
  BOOL v11 = x_log_hook_p();
  if (a5)
  {
    if (v11)
    {
      x_log_();
    }
    else
    {
      uint64_t v64 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v64, OS_LOG_TYPE_DEFAULT, "(image-queue: ", buf, 2u);
      }
    }
    if (a2)
    {
      uint64_t v65 = (int *)(v9 + 544);
      while (2)
      {
        *(double *)&int v66 = COERCE_DOUBLE("iosurface");
        switch(*(v65 - 3))
        {
          case 0:
            goto LABEL_122;
          case 2:
          case 4:
            goto LABEL_116;
          case 3:
            *(double *)&int v66 = COERCE_DOUBLE("buffer");
            goto LABEL_116;
          default:
            *(double *)&int v66 = COERCE_DOUBLE("unknown");
LABEL_116:
            IOSurfaceRef v67 = IOSurfaceLookup(*(v65 - 6));
            if (v67)
            {
              IOSurfaceRef v68 = v67;
              IOSurfaceGetDetachModeCode();
              CFRelease(v68);
            }
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              double v69 = x_log_category_utilities;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
              {
                int v70 = *(v65 - 1);
                int v71 = *v65;
                *(_DWORD *)long long buf = 136315650;
                double v73 = *(double *)&v66;
                __int16 v74 = 1024;
                *(_DWORD *)uint64_t v75 = v70;
                *(_WORD *)&_OWORD v75[4] = 1024;
                *(_DWORD *)&v75[6] = v71;
                _os_log_impl(&dword_184668000, v69, OS_LOG_TYPE_DEFAULT, "%s [%d %d];", buf, 0x18u);
              }
            }
LABEL_122:
            v65 += 40;
            if (!--a2) {
              break;
            }
            continue;
        }
        break;
      }
    }
    if (x_log_hook_p()) {
      goto LABEL_102;
    }
    int v62 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v63 = ")";
      goto LABEL_105;
    }
  }
  else
  {
    if (v11)
    {
      x_log_();
    }
    else
    {
      int v12 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "(image-queue", buf, 2u);
      }
    }
    if (*(void *)(v9 + 80))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        double v13 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          double v14 = *(double *)(v9 + 80);
          *(_DWORD *)long long buf = 134217984;
          double v73 = v14;
          _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, " 0x%016llx", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float v15 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_DWORD *)(v9 + 32)) {
          *(double *)&int v16 = COERCE_DOUBLE("");
        }
        else {
          *(double *)&int v16 = COERCE_DOUBLE(" not-visible");
        }
        int32x2_t v17 = " async";
        if ((v10 & 1) == 0) {
          int32x2_t v17 = "";
        }
        int64x2_t v18 = " enable-dpb";
        if ((v10 & 0x40) == 0) {
          int64x2_t v18 = "";
        }
        *(_DWORD *)long long buf = 136316418;
        double v73 = *(double *)&v16;
        int8x16_t v19 = " protected";
        if ((v10 & 4) == 0) {
          int8x16_t v19 = "";
        }
        __int16 v74 = 2080;
        *(void *)uint64_t v75 = v17;
        double v20 = " reduced-polling";
        if ((v10 & 0x10000) == 0) {
          double v20 = "";
        }
        *(_WORD *)&v75[8] = 2080;
        *(void *)int v76 = v18;
        *(_WORD *)&v76[8] = 2080;
        float32x4_t v77 = v19;
        *(_WORD *)float32x4_t v78 = 2080;
        *(void *)&v78[2] = v20;
        if ((a3 & 2) != 0) {
          double v21 = " changed";
        }
        else {
          double v21 = "";
        }
        *(_WORD *)&v78[10] = 2080;
        *(void *)&v78[12] = v21;
        _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "%s%s%s%s%s%s", buf, 0x3Eu);
      }
    }
    CA::Render::show_newline((CA::Render *)(a4 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v22 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *(_DWORD *)(v9 + 16);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v73) = v23;
        _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "(generation 0x%08x)", buf, 8u);
      }
    }
    if (*(unsigned char *)(v9 + 92))
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v24 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = *(unsigned __int8 *)(v9 + 92);
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v73) = v25;
          _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_DEFAULT, "(rotationFlags %d)", buf, 8u);
        }
      }
    }
    double v26 = *(double *)(v9 + 128);
    if (((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
      || *(void *)&v26 == 0xFFF0000000000000
      || (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v30 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          double v73 = v26;
          _os_log_impl(&dword_184668000, v30, OS_LOG_TYPE_DEFAULT, "(edr-deadline %f)", buf, 0xCu);
        }
      }
    }
    if (*(unsigned char *)(v9 + 94))
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        char v31 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          int v32 = *(unsigned __int8 *)(v9 + 94);
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v73) = v32;
          _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_DEFAULT, "(enhancementMode %d)", buf, 8u);
        }
      }
    }
    atomic_fetch_or((atomic_uint *volatile)(v9 + 256), 0x80000000);
    __dmb(0xBu);
    int v33 = *(_DWORD *)(v9 + 256) & 1;
    uint64_t v34 = v9 + 48 * (*(_DWORD *)(v9 + 256) & 1);
    double v36 = *(double *)(v34 + 160);
    double v35 = *(double *)(v34 + 168);
    double v37 = *(double *)(v34 + 176);
    float64_t v38 = *(const char **)(v34 + 184);
    uint64_t v39 = *(void *)(v34 + 192);
    uint64_t v40 = *(void *)(v34 + 200);
    __dmb(0xBu);
    *(_DWORD *)(v9 + 256) = v33;
    BOOL v41 = v36 == 0.0 && v35 == 1.0;
    if (!v41
      || v37 != 0.0
      || ((unint64_t)v38 & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000
      || (v39 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
      || (v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      CA::Render::show_newline((CA::Render *)(a4 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int32x2_t v42 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134219264;
          double v73 = v36;
          __int16 v74 = 2048;
          *(double *)uint64_t v75 = v35;
          *(_WORD *)&v75[8] = 2048;
          *(double *)int v76 = v37;
          *(_WORD *)&v76[8] = 2048;
          float32x4_t v77 = v38;
          *(_WORD *)float32x4_t v78 = 2048;
          *(void *)&v78[2] = v39;
          *(_WORD *)&v78[10] = 2048;
          *(void *)&v78[12] = v40;
          _os_log_impl(&dword_184668000, v42, OS_LOG_TYPE_DEFAULT, "(timing begin %g speed %g offset %g duration %g clamp-min %g clamp-max %g)", buf, 0x3Eu);
        }
      }
    }
    CA::Render::show_newline((CA::Render *)(a4 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int64x2_t v43 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v43, OS_LOG_TYPE_DEFAULT, "(samples", buf, 2u);
      }
    }
    if (a2)
    {
      float v44 = (CA::Render *)(a4 + 2);
      while (2)
      {
        unint64_t v45 = "iosurface";
        switch(*(_DWORD *)(v9 + 532))
        {
          case 0:
            goto LABEL_100;
          case 2:
          case 4:
            goto LABEL_79;
          case 3:
            unint64_t v45 = "buffer";
            goto LABEL_79;
          default:
            unint64_t v45 = "unknown";
LABEL_79:
            int v46 = *(_DWORD *)(v9 + 524);
            if (v46 > 572662305)
            {
              if (v46 == 572662306)
              {
                unint64_t v47 = "consumed";
                goto LABEL_89;
              }
              if (v46 == 858993459)
              {
                unint64_t v47 = "flushed";
                goto LABEL_89;
              }
            }
            else
            {
              if (!v46)
              {
                unint64_t v47 = "unconsumed";
                goto LABEL_89;
              }
              if (v46 == 286331153)
              {
                unint64_t v47 = "displayed";
                goto LABEL_89;
              }
            }
            unint64_t v47 = "<unknown>";
LABEL_89:
            int v48 = *(_DWORD *)(v9 + 536);
            IOSurfaceRef v49 = IOSurfaceLookup(*(_DWORD *)(v9 + 520));
            if (v49)
            {
              IOSurfaceRef v50 = v49;
              uint64_t DetachModeCode = IOSurfaceGetDetachModeCode();
              CFRelease(v50);
            }
            else
            {
              uint64_t DetachModeCode = -1;
            }
            CA::Render::show_newline(v44);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v52 = x_log_category_utilities;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
              {
                int v53 = *(_DWORD *)(v9 + 520);
                int v54 = *(_DWORD *)(v9 + 540);
                int v55 = *(_DWORD *)(v9 + 544);
                int v56 = *(unsigned __int8 *)(v9 + 584);
                uint64_t v58 = *(void *)(v9 + 464);
                double v57 = *(double *)(v9 + 472);
                int v59 = *(_DWORD *)(v9 + 528);
                float v60 = " opaque";
                if ((v48 & 1) == 0) {
                  float v60 = "";
                }
                unsigned int v61 = " flipped";
                if ((v48 & 8) == 0) {
                  unsigned int v61 = "";
                }
                *(_DWORD *)long long buf = 134220802;
                double v73 = v57;
                __int16 v74 = 2080;
                *(void *)uint64_t v75 = v45;
                *(_WORD *)&v75[8] = 1024;
                *(_DWORD *)int v76 = v53;
                *(_WORD *)&_DWORD v76[4] = 1024;
                *(_DWORD *)&v76[6] = v54;
                LOWORD(v77) = 1024;
                *(_DWORD *)((char *)&v77 + 2) = v55;
                HIWORD(v77) = 1024;
                *(_DWORD *)float32x4_t v78 = v56;
                *(_WORD *)&v78[4] = 2048;
                *(void *)&v78[6] = v58;
                *(_WORD *)&v78[14] = 1024;
                *(_DWORD *)&v78[16] = v59;
                __int16 v79 = 2048;
                uint64_t v80 = DetachModeCode;
                __int16 v81 = 2080;
                float32x2_t v82 = v47;
                __int16 v83 = 2080;
                double v84 = v60;
                __int16 v85 = 2080;
                double v86 = v61;
                _os_log_impl(&dword_184668000, v52, OS_LOG_TYPE_DEFAULT, "(0x%llx %s 0x%x, [%d %d; rot %d] %f (generation 0x%08x) (detach 0x%016llx) %s%s%s)",
                  buf,
                  0x66u);
              }
            }
LABEL_100:
            v9 += 160;
            if (!--a2) {
              break;
            }
            continue;
        }
        break;
      }
    }
    if (x_log_hook_p())
    {
LABEL_102:
      x_log_();
      return;
    }
    int v62 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v63 = "))";
LABEL_105:
      _os_log_impl(&dword_184668000, v62, OS_LOG_TYPE_DEFAULT, v63, buf, 2u);
    }
  }
}

BOOL CAImageQueueInsertImage(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v8 = xmmword_184998040;
  return CAImageQueueInsertImage_(a1, a2, a3, a4, 0, &v8, a5, a6, a7, 0.0, 0.0, 0.0, 0.0);
}

IOSurfaceRef CAImageQueueCopyLastIOSurface(uint64_t a1)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (!v3) {
    goto LABEL_15;
  }
  IOSurfaceID v4 = 0;
  IOSurfaceID v5 = 0;
  uint64_t v6 = (IOSurfaceID *)(*(void *)(*(void *)(a1 + 48) + 24) + 520);
  do
  {
    if (v6[3] && *v6)
    {
      IOSurfaceID v7 = v6[11];
      BOOL v8 = v7 >= v5;
      if (v7 > v5) {
        IOSurfaceID v5 = v6[11];
      }
      if (v8) {
        IOSurfaceID v4 = *v6;
      }
    }
    v6 += 40;
    --v3;
  }
  while (v3);
  if (v4) {
    IOSurfaceRef v9 = IOSurfaceLookup(v4);
  }
  else {
LABEL_15:
  }
    IOSurfaceRef v9 = 0;
  os_unfair_lock_unlock(v2);
  return v9;
}

IOSurfaceRef CAImageQueueCopyDisplayedIOSurface(uint64_t a1)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (!v3) {
    goto LABEL_16;
  }
  IOSurfaceID v4 = 0;
  IOSurfaceID v5 = 0;
  uint64_t v6 = (IOSurfaceID *)(*(void *)(*(void *)(a1 + 48) + 24) + 520);
  do
  {
    if (v6[3] && *v6 && v6[1] == 286331153)
    {
      IOSurfaceID v7 = v6[11];
      BOOL v8 = v7 >= v5;
      if (v7 > v5) {
        IOSurfaceID v5 = v6[11];
      }
      if (v8) {
        IOSurfaceID v4 = *v6;
      }
    }
    v6 += 40;
    --v3;
  }
  while (v3);
  if (v4) {
    IOSurfaceRef v9 = IOSurfaceLookup(v4);
  }
  else {
LABEL_16:
  }
    IOSurfaceRef v9 = 0;
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t CAImageQueueSetLatestCanonicalTime(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    *(double *)(v3 + 296) = a2;
    __dmb(0xBu);
    *(_DWORD *)(v3 + 292) = *(_DWORD *)(v3 + 16);
  }
  return result;
}

uint64_t CAImageQueueRegisterPixelBuffer(uint64_t a1, CA::Render::Shmem *this, char *a3, uint64_t a4, int a5, void *a6, int a7, const void *a8)
{
  v53[1] = *(double *)MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 20)) {
    return 0;
  }
  int v12 = (int)a6;
  float v15 = CA::Render::Shmem::new_shmem((unint64_t)this, a3, 1, 0, 0, a6);
  if (!v15) {
    return 0;
  }
  int v16 = v15;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  int64x2_t v18 = (CA::Render::Texture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x90uLL, 0x743898A5uLL);
  if (!v18)
  {
    if (atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
    }
    return 0;
  }
  int8x16_t v19 = v18;
  double v20 = CA::Render::Texture::Texture(v18, a5, v12);
  *((unsigned char *)v20 + 12) = 38;
  ++dword_1EB2ADE60;
  *(void *)double v20 = &unk_1ED02CFB8;
  double v21 = v16;
  if (!atomic_fetch_add(v16 + 2, 1u))
  {
    double v21 = 0;
    atomic_fetch_add(v16 + 2, 0xFFFFFFFF);
  }
  *((void *)v19 + 12) = v21;
  *((void *)v19 + 13) = a4;
  *((_DWORD *)v19 + 28) = a7;
  *((void *)v19 + 16) = 0;
  *((void *)v19 + 17) = 0;
  *((void *)v19 + 15) = 0;
  if (a8)
  {
    *((void *)v19 + 15) = CFRetain(a8);
    Value = (CGColorSpace *)CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E4F24A00]);
    CA::Render::Texture::set_colorspace(v19, Value);
    CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E4F24B98]);
    float v24 = 1.0;
    if (v23)
    {
      CFDictionaryRef v25 = v23;
      CFTypeID v26 = CFGetTypeID(v23);
      if (v26 == CFDictionaryGetTypeID())
      {
        uint64_t v27 = CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E4F24BA0]);
        float v28 = CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E4F24B90]);
        if (v27)
        {
          float v29 = v28;
          CFTypeID v30 = CFGetTypeID(v27);
          if (v30 == CFNumberGetTypeID())
          {
            if (v29)
            {
              CFTypeID v31 = CFGetTypeID(v29);
              if (v31 == CFNumberGetTypeID())
              {
                LODWORD(v53[0]) = 0;
                LODWORD(valuePtr) = 0;
                CFNumberGetValue((CFNumberRef)v27, kCFNumberFloatType, &valuePtr);
                CFNumberGetValue((CFNumberRef)v29, kCFNumberFloatType, v53);
                float v24 = *(float *)v53 / *(float *)&valuePtr;
              }
            }
          }
        }
      }
    }
    *((float *)v19 + 8) = v24;
    int v32 = CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E4F24BA8]);
    if (v32 || (int v32 = CFDictionaryGetValue((CFDictionaryRef)a8, (const void *)*MEMORY[0x1E4F24A78])) != 0)
    {
      CFTypeID v33 = CFGetTypeID(v32);
      if (v33 == CFDictionaryGetTypeID())
      {
        CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v32, (const void *)*MEMORY[0x1E4F24A70]);
        CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v32, (const void *)*MEMORY[0x1E4F24A80]);
        CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v32, (const void *)*MEMORY[0x1E4F24A88]);
        CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v32, (const void *)*MEMORY[0x1E4F24A68]);
        CFTypeID TypeID = CFNumberGetTypeID();
        if (v34)
        {
          CFTypeID v39 = TypeID;
          if (CFGetTypeID(v34) == TypeID
            && v35
            && CFGetTypeID(v35) == v39
            && v36
            && CFGetTypeID(v36) == v39
            && v37
            && CFGetTypeID(v37) == v39)
          {
            double valuePtr = 0.0;
            v53[0] = 0.0;
            double v50 = 0.0;
            double v51 = 0.0;
            CFNumberGetValue(v34, kCFNumberDoubleType, v53);
            CFNumberGetValue(v35, kCFNumberDoubleType, &valuePtr);
            CFNumberGetValue(v36, kCFNumberDoubleType, &v51);
            CFNumberGetValue(v37, kCFNumberDoubleType, &v50);
            v40.f64[0] = v51;
            v40.f64[1] = v50;
            int32x4_t v42 = (int32x4_t)vceqzq_f64(v40);
            unint64_t v41 = vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v42, 1), (int8x16_t)v42).u64[0];
            v42.i64[0] = 0;
            int32x4_t v43 = 0uLL;
            if ((v41 & 0x8000000000000000) == 0)
            {
              int8x16_t v44 = vorrq_s8((int8x16_t)vcltzq_f64(v40), (int8x16_t)vcgezq_f64(v40));
              unint64_t v45 = vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v44), 1), v44).u64[0];
              int32x4_t v43 = 0uLL;
              if ((v45 & 0x8000000000000000) == 0)
              {
                v46.f64[0] = v53[0] + ((double)a5 - v51) * 0.5;
                v46.f64[1] = (double)v12 - (v50 + valuePtr) + ((double)v12 - v50) * -0.5;
                int32x4_t v47 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v46, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
                int32x4_t v43 = vuzp1q_s32(v47, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v46, v40), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v47));
              }
            }
            v42.i64[1] = __PAIR64__(v12, a5);
            if (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v43, v42))), 0xFuLL))))
            {
              *((_WORD *)v19 + 12) = v43.i16[0];
              *((_WORD *)v19 + 13) = v43.i16[2];
              int32x2_t v48 = vsub_s32(*(int32x2_t *)((char *)v19 + 16), vadd_s32(*(int32x2_t *)v43.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL)));
              *((_WORD *)v19 + 15) = v48.i16[2];
              *((_WORD *)v19 + 14) = v48.i16[0];
            }
          }
        }
      }
    }
  }
  else
  {
    *((_DWORD *)v19 + 8) = 1065353216;
  }
  if ((*(unsigned int (**)(CA::Render::Texture *))(*(void *)v19 + 120))(v19)) {
    *((_DWORD *)v19 + 3) |= 0x1000u;
  }
  if (atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
  }
}

uint64_t CAImageQueueRegisterCVImageBuffer(uint64_t a1, void *cf, char a3)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CVPixelBufferGetTypeID() && (IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)cf)) != 0)
  {
    return CAImageQueueRegisterIOSurfaceBuffer((_anonymous_namespace_ *)a1, IOSurface, a3);
  }
  else if (*(void *)(a1 + 48) {
         && !*(_DWORD *)(a1 + 20)
  }
         && (CGSize EncodedSize = CVImageBufferGetEncodedSize((CVImageBufferRef)cf),
             malloc_zone = (malloc_zone_t *)get_malloc_zone(),
             (BOOL v11 = (CA::Render::Texture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x90uLL, 0x743898A5uLL)) != 0))
  {
    int v12 = v11;
    double v13 = CA::Render::Texture::Texture(v11, EncodedSize.width, EncodedSize.height);
    *((unsigned char *)v13 + 12) = 38;
    ++dword_1EB2ADE60;
    *(void *)double v13 = &unk_1ED02CFB8;
    *((void *)v13 + 12) = 0;
    double v14 = (atomic_uint **)((char *)v13 + 96);
    *((void *)v13 + 15) = 0;
    float v15 = (const __CFDictionary **)((char *)v13 + 120);
    *((void *)v13 + 13) = 0;
    *((_DWORD *)v13 + 28) = 0;
    *((void *)v13 + 16) = 0;
    *((void *)v12 + 17) = CFRetain(cf);
    CFTypeID v16 = CFGetTypeID(cf);
    if (v16 == CVPixelBufferGetTypeID())
    {
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
      BaseAddress = CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
      DataSize = (char *)CVPixelBufferGetDataSize((CVPixelBufferRef)cf);
      double v20 = CA::Render::Shmem::new_shmem((unint64_t)BaseAddress, DataSize, 1, (uint64_t (*)(CA::Render *, void *, void *))CA::Render::release_cvpixelbuffer, (void (*)(const void *, void *))cf, v19);
      double v21 = *v14;
      if (*v14 != v20)
      {
        if (v21 && atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
        }
        if (v20)
        {
          double v22 = v20 + 2;
          if (!atomic_fetch_add(v20 + 2, 1u))
          {
            double v20 = 0;
            atomic_fetch_add(v22, 0xFFFFFFFF);
          }
        }
        *double v14 = v20;
      }
      if (v20) {
        CVPixelBufferRetain((CVPixelBufferRef)cf);
      }
      else {
        CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
      }
      *((void *)v12 + 13) = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
      *((_DWORD *)v12 + 28) = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
    }
    CFDictionaryRef v23 = CVBufferCopyAttachments((CVBufferRef)cf, kCVAttachmentMode_ShouldPropagate);
    *float v15 = v23;
    if (v23)
    {
      Value = (CGColorSpace *)CFDictionaryGetValue(v23, (const void *)*MEMORY[0x1E4F24A00]);
      CA::Render::Texture::set_colorspace(v12, Value);
    }
  }
  else
  {
    return 0;
  }
}

uint64_t CAImageQueueRegisterBuffer(uint64_t a1, CA::Render::Shmem *a2, unint64_t a3, unint64_t a4, void *a5, unsigned int a6)
{
  if (a4
    && a5
    && is_mul_ok((unint64_t)a5 - 1, a3)
    && (a6 > 0x25 ? (unint64_t v9 = 0) : (unint64_t v9 = dword_184999468[a6]),
        is_mul_ok(a4, v9)
     && ((uint64_t v10 = ((unint64_t)a5 - 1) * a3, v11 = a4 * v9, v12 = (char *)(v10 + v11), !__CFADD__(v10, v11))
       ? (char v13 = 0)
       : (char v13 = 1),
         a6 <= 0x23 && (v13 & 1) == 0 && ((0x61CB910CuLL >> a6) & 1) == 0)))
  {
    return CAImageQueueRegisterPixelBuffer(a1, a2, v12, a3, a4, a5, dword_1849995EC[a6], 0);
  }
  else
  {
    return 0;
  }
}

uint64_t CAImageQueueCopyTexture(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 200)) {
    return 0;
  }
  IOSurfaceID v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v5 = x_hash_table_lookup(*(void *)(a1 + 200), a2, 0);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6)
    {
      IOSurfaceID v7 = (atomic_uint *)(v6 + 8);
      if (!atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u))
      {
        uint64_t v6 = 0;
        atomic_fetch_add(v7, 0xFFFFFFFF);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v6;
}

uint64_t CAImageQueueGetTimeStamp(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 48);
  if (v3)
  {
    IOSurfaceID v4 = *(int **)(v3 + 24);
    int v5 = -17;
    do
    {
      if (__CFADD__(v5++, 1)) {
        break;
      }
      int v7 = *v4;
      __dmb(0xBu);
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 64) = 2;
      *(void *)(a3 + 16) = *a2;
      int v8 = v4[72];
      uint64_t v9 = 2;
      if (v8)
      {
        *(_DWORD *)(a3 + 4) = v8;
        *(void *)(a3 + 8) = *((void *)v4 + 34);
        *(void *)(a3 + 64) = 3;
        uint64_t v9 = 3;
      }
      uint64_t v10 = *((void *)v4 + 35);
      if (v10)
      {
        *(void *)(a3 + 32) = v10;
        v9 |= 8uLL;
        *(void *)(a3 + 64) = v9;
      }
      double v11 = *((double *)v4 + 33);
      if (v11 != 0.0)
      {
        *(double *)(a3 + 24) = v11;
        *(void *)(a3 + 64) = v9 | 0x10;
      }
      __dmb(0xBu);
    }
    while (v7 != v4[1]);
  }
  return result;
}

double CAImageQueueGetLatestTime(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (!v2) {
    return -1.0;
  }
  uint64_t v3 = *(void *)(v1 + 24) + 464;
  double result = -1.0;
  do
  {
    if (*(_DWORD *)(v3 + 68))
    {
      if (*(double *)v3 > result) {
        double result = *(double *)v3;
      }
    }
    v3 += 160;
    --v2;
  }
  while (v2);
  return result;
}

double CAImageQueueGetDisplayTime(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (!v2) {
    return -1.0;
  }
  uint64_t v3 = (_DWORD *)(*(void *)(v1 + 24) + 532);
  double result = -1.0;
  do
  {
    if (*v3 && *(v3 - 2) && *(double *)(v3 - 17) > result) {
      double result = *(double *)(v3 - 17);
    }
    v3 += 40;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t CAImageQueueGetDisplayMask()
{
  return 0;
}

unint64_t CAImageQueueGetGPURegistryID(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    return atomic_load((unint64_t *)(*(void *)(v1 + 24) + 104));
  }
  else {
    return 0;
  }
}

int *CAImageQueueSetMediaTiming(int *a1, double a2, float a3, double a4, double a5)
{
  return CAImageQueueSetMediaTimingClamped(a1, a2, a3, a4, a5, -INFINITY, INFINITY);
}

uint64_t ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjjjEJjjjEEEijjbPKcT_DpT0__block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mach_error_t v2 = (*(uint64_t (**)(void, void, void, void, void))(a1 + 32))(*(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64));
  if (v2)
  {
    mach_error_t v4 = v2;
    if (v2 != 268435460 || *(unsigned char *)(a1 + 68) == 0)
    {
      if (x_log_hook_p())
      {
        mach_error_string(v4);
        x_log_();
      }
      else
      {
        uint64_t v6 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          uint64_t v7 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 136315650;
          uint64_t v9 = v7;
          __int16 v10 = 1024;
          mach_error_t v11 = v4;
          __int16 v12 = 2080;
          char v13 = mach_error_string(v4);
          _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
        }
      }
    }
  }
  return mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 48));
}

void invoke_display_change_callback(unsigned char *a1)
{
  pthread_mutex_lock(&display_change_mutex);
  while (a1[176])
    pthread_cond_wait(&presented_cond, &display_change_mutex);
  if (*((void *)a1 + 21))
  {
    a1[176] = 1;
    pthread_mutex_unlock(&display_change_mutex);
    (*(void (**)(void))(*((void *)a1 + 21) + 16))();
    pthread_mutex_lock(&display_change_mutex);
    a1[176] = 0;
    pthread_cond_broadcast(&display_change_cond);
  }
  pthread_mutex_unlock(&display_change_mutex);

  CFRelease(a1);
}

uint64_t ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjjjdddEJjjdddEEEijjbPKcT_DpT0__block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mach_error_t v2 = (*(uint64_t (**)(void, void, void, void, double, double, double))(a1 + 32))(*(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 84), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
  if (v2)
  {
    mach_error_t v4 = v2;
    if (v2 != 268435460 || *(unsigned char *)(a1 + 88) == 0)
    {
      if (x_log_hook_p())
      {
        mach_error_string(v4);
        x_log_();
      }
      else
      {
        uint64_t v6 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          uint64_t v7 = *(void *)(a1 + 64);
          *(_DWORD *)long long buf = 136315650;
          uint64_t v9 = v7;
          __int16 v10 = 1024;
          mach_error_t v11 = v4;
          __int16 v12 = 2080;
          char v13 = mach_error_string(v4);
          _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
        }
      }
    }
  }
  return mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 72));
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(double **a1, double **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      int64x2_t v18 = a1 + 1;
      int8x16_t v19 = a1 + 2;
      double v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a1 + 2, a1 + 3);
      double v21 = *(a2 - 1);
      double v22 = a1[3];
      if (*v21 < *v22)
      {
        *double v20 = v21;
        *(a2 - 1) = v22;
        CFDictionaryRef v23 = *v20;
        double v24 = **v20;
        CFDictionaryRef v25 = *v19;
        if (v24 < **v19)
        {
          *int8x16_t v19 = v23;
          *double v20 = v25;
          CFTypeID v26 = *v18;
          if (v24 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v24 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CAShmemImageQueueCopyImageInfo::$_0 &,_CAShmemImageQueueImage **>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    __int16 v12 = *v9;
    double v13 = **v9;
    uint64_t v14 = *v8;
    if (v13 < **v8)
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(double **)((char *)a1 + v15) = v14;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v14 = *(double **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v13 >= *v14)
        {
          int32x2_t v17 = (double **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      int32x2_t v17 = a1;
LABEL_13:
      *int32x2_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t __CAImageQueueGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CAImageQueueGetTypeID::type = result;
  return result;
}

CFStringRef imageQueueCopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CAImageQueue %p>", a1);
}

CFStringRef imageQueueCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<CAImageQueue %p>", a1);
}

void imageQueueFinalize(char *a1)
{
  if (*((_DWORD *)a1 + 5) == 1)
  {
    CFAllocatorRef v2 = a1 + 80;
    if (*((void *)a1 + 10))
    {
      xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v3, "command", 4uLL);
      (*((void (**)(char *, xpc_object_t, void))a1 + 10))(a1, v3, *((void *)a1 + 11));
      xpc_release(v3);
      *CFAllocatorRef v2 = 0;
      *((void *)a1 + 11) = 0;
    }
  }
  CAImageQueueInvalidate((uint64_t)a1);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 4);
  CFAllocatorRef v4 = (void *)*((void *)a1 + 28);
  if (v4)
  {
    int v5 = (uint64_t **)*((void *)a1 + 28);
    do
    {
      ((void (*)(uint64_t *, char *))v5[2])(v5[1], a1);
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    do
    {
      uint64_t v6 = (void *)*v4;
      free(v4);
      CFAllocatorRef v4 = v6;
    }
    while (v6);
    *((void *)a1 + 28) = 0;
  }
  uint64_t v7 = *((void *)a1 + 25);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1 << *(_DWORD *)v7;
    do
    {
      for (uint64_t i = *(uint64_t ***)(*(void *)(v7 + 16) + 8 * v8); i; uint64_t i = (uint64_t **)*i)
        delete_buffer((uint64_t)i[2], (CAImageQueueBuffer *)i[3], a1);
      ++v8;
    }
    while (v8 != v9);
    x_hash_table_free(*((void **)a1 + 25));
    *((void *)a1 + 25) = 0;
  }
  uint64_t v11 = (const void *)*((void *)a1 + 21);
  if (v11) {
    _Block_release(v11);
  }
  mach_port_name_t v12 = *((_DWORD *)a1 + 53);
  if (v12) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v12);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 4);
}

void CAImageQueueInvalidate(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)(a1 + 96);
  if (*(void *)(a1 + 96))
  {
    pthread_mutex_lock(&collectable_mutex);
    while (*(unsigned char *)(a1 + 112))
      pthread_cond_wait(&collectable_cond, &collectable_mutex);
    collectable_list = (uint64_t)x_list_remove((void *)collectable_list, a1);
    xpc_object_t v3 = *(NSObject **)(a1 + 72);
    if (v3) {
      dispatch_release(v3);
    }
    *(void *)(a1 + 72) = 0;
    *CFAllocatorRef v2 = 0;
    v2[1] = 0;
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      *(_DWORD *)(*(void *)(v4 + 24) + 28) = 0;
    }
    pthread_mutex_unlock(&collectable_mutex);
  }
  if (*(void *)(a1 + 144))
  {
    pthread_mutex_lock(&composited_mutex);
    while (*(unsigned char *)(a1 + 160))
      pthread_cond_wait(&composited_cond, &composited_mutex);
    composited_list = (uint64_t)x_list_remove((void *)composited_list, a1);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      *(_DWORD *)(*(void *)(v5 + 24) + 52) = 0;
    }
    pthread_mutex_unlock(&composited_mutex);
  }
  if (*(void *)(a1 + 120))
  {
    pthread_mutex_lock(&presented_mutex);
    while (*(unsigned char *)(a1 + 136))
      pthread_cond_wait(&presented_cond, &presented_mutex);
    presented_list = (uint64_t)x_list_remove((void *)presented_list, a1);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      *(_DWORD *)(v7 + 48) = 0;
      *(unsigned char *)(v7 + 94) = 0;
    }
    pthread_mutex_unlock(&presented_mutex);
  }
  if (*(void *)(a1 + 168))
  {
    pthread_mutex_lock(&display_change_mutex);
    while (*(unsigned char *)(a1 + 176))
      pthread_cond_wait(&display_change_cond, &display_change_mutex);
    display_change_list = (uint64_t)x_list_remove((void *)display_change_list, a1);
    _Block_release(*(const void **)(a1 + 168));
    *(void *)(a1 + 168) = 0;
    pthread_mutex_unlock(&display_change_mutex);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 24);
    unint64_t v10 = atomic_load((unint64_t *)(v9 + 8));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    unint64_t v11 = *(unsigned int *)(a1 + 40);
    if (v11)
    {
      unint64_t v12 = 0;
      double v13 = 0;
      uint64_t v14 = (int *)(v9 + 532);
      uint64_t v15 = (v10 >> 58) & 1;
      do
      {
        int v16 = *v14;
        v14 += 40;
        if (v16)
        {
          double v13 = release_image((void *)a1, v12, v13, v15);
          unint64_t v11 = *(unsigned int *)(a1 + 40);
        }
        ++v12;
      }
      while (v12 < v11);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      if (v13) {
        release_images(a1, v13);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
    int32x2_t v17 = *(atomic_uint **)(a1 + 48);
    if (atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v17 + 16))(v17);
    }
    *(void *)(a1 + 48) = 0;
  }
  int64x2_t v18 = *(void **)(a1 + 64);
  if (v18)
  {
    free(v18);
    *(void *)(a1 + 64) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (v19)
  {
    double v20 = (id *)(v19 + 208);
    if (*(void *)(v19 + 208))
    {
      if (*(unsigned char *)(v19 + 216)) {
        objc_storeWeakOrNil(v20, 0);
      }
      else {
        *double v20 = 0;
      }
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF) == 1)
    {
      double v21 = *(void (**)(uint64_t))(*(void *)v19 + 16);
      v21(v19);
    }
  }
}

void CAImageQueueSetOwner()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    BOOL v0 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_184668000, v0, OS_LOG_TYPE_DEFAULT, "CoreAnimation: Warning! CAImageQueueSetOwner() is deprecated and does nothing. Please stop calling this method.\n", v1, 2u);
    }
  }
}

uint64_t CAImageQueueGetCapacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CAImageQueueGetRotationFlags(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 24) + 92);
}

uint64_t CAImageQueueSetIdentifier(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (v2) {
    *(void *)(*(void *)(v2 + 24) + 80) = a2;
  }
  return result;
}

uint64_t CAImageQueueGetIdentifier(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    return *(void *)(*(void *)(v1 + 24) + 80);
  }
  else {
    return 0;
  }
}

void *CAXPCImageQueueCreate(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int Int = CA_CFDictionaryGetInt(a1, @"imageQueueCapacity");
  CFDictionaryRef Int64 = CA_CFDictionaryGetInt64(a1, @"imageQueueIdentifier");
  if (a2)
  {
    CFDictionaryRef v8 = Int64;
    uint64_t v9 = (void *)CAImageQueueCreate_(1, Int);
    unint64_t v10 = v9;
    if (v9)
    {
      v9[10] = a2;
      v9[11] = a3;
      uint64_t v11 = v9[6];
      if (v11) {
        *(void *)(*(void *)(v11 + 24) + 80) = v8;
      }
      xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v12, "command", 1uLL);
      xpc_dictionary_set_uint64(v12, "capacity", *((unsigned int *)v10 + 10));
      xpc_dictionary_set_uint64(v12, "shmemFlags", (unint64_t)*(unsigned int *)(v10[6] + 12) >> 8);
      xpc_dictionary_set_uint64(v12, "shmemSize", *(void *)(v10[6] + 16));
      xpc_dictionary_set_uint64(v12, "shmemOffset", (*MEMORY[0x1E4F14B00] - 1) & *(void *)(v10[6] + 24));
      CA::Render::Shmem::port((mach_port_t *)v10[6]);
      xpc_dictionary_set_mach_send();
      ((void (*)(void *, xpc_object_t, void))v10[10])(v10, v12, v10[11]);
      xpc_release(v12);
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v13 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v15 = 0;
        _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "Invalid callback for CAXPCImageQueueCreate!", (uint8_t *)&v15, 2u);
      }
    }
    return 0;
  }
  return v10;
}

uint64_t CAXPCImageQueueCommandForMessage(void *a1)
{
  return xpc_dictionary_get_uint64(a1, "command");
}

void _CAXPCImageQueueSampleInvalidate(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 64) & 1) == 0)
  {
    *(unsigned char *)(a1 + 64) |= 1u;
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      unsigned int add = atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(v2 + 40) + 24) + 160 * *(void *)(a1 + 16) + 616), 0xFFFFFFFF);
      uint64_t v4 = *(_DWORD **)(a1 + 56);
      if (add == 1)
      {
        unsigned int v5 = v4[6];
        if (v5 <= *(_DWORD *)(a1 + 24)) {
          unsigned int v5 = *(_DWORD *)(a1 + 24);
        }
        v4[6] = v5;
      }
      CFRelease(v4);
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v6 = *(const void **)(a1 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 32) = 0;
    }
  }
}

uint64_t ___Z30CAXPCImageQueueSampleGetTypeIDv_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CAXPCImageQueueSampleGetTypeID(void)::type = result;
  return result;
}

CFStringRef xpcImageQueueSampleCopyDebugDescription(__IOSurface **a1)
{
  return xpcImageQueueSampleCopyFormatDescription(a1, 0);
}

CFStringRef xpcImageQueueSampleCopyFormatDescription(__IOSurface **a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  unsigned int v5 = a1[4];
  uint64_t ID = IOSurfaceGetID(v5);
  return CFStringCreateWithFormat(v4, a2, @"<CAXPCImageQueueSample %p : IOSurfaceRef %p (id 0x%x), read %u, t %g>\n", a1, v5, ID, *((unsigned int *)a1 + 10), a1[6]);
}

void xpcImageQueueSampleFinalize(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if ((a1[8] & 3) == 2)
  {
    uint64_t v2 = a1[7];
    if (v2)
    {
      if (*(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 24) + 160 * a1[2] + 616) <= 1u)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          xpc_object_t v3 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134217984;
            unsigned int v5 = a1;
            _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_ERROR, "CAXPCImageQueueSampleRef %p released without calling finish!", buf, 0xCu);
          }
        }
      }
    }
  }
  _CAXPCImageQueueSampleInvalidate((uint64_t)a1);
}

uint64_t CAXPCImageQueueSampleGetIOSurface(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t CAXPCImageQueueSampleGetDisplayCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

double CAXPCImageQueueSampleGetTimestamp(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

uint64_t CAXPCImageQueueSampleIsLowLatency(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 64) >> 2) & 1;
}

void CAXPCImageQueueSampleFinish(uint64_t a1, CFDictionaryRef theDict)
{
  if (a1)
  {
    if (theDict)
    {
      uint64_t v4 = *(void *)(a1 + 56);
      if (v4)
      {
        unint64_t v5 = *(void *)(a1 + 16);
        if (v5 >= *(void *)(v4 + 32)) {
          __assert_rtn("CAXPCImageQueueSampleFinish", "CAImageQueue.cpp", 4965, "sample->index < sample->receiver->capacity");
        }
        uint64_t v6 = *(void *)(*(void *)(v4 + 40) + 24);
        if (CFDictionaryContainsKey(theDict, @"sampleDisplayCount"))
        {
          Value = CFDictionaryGetValue(theDict, @"sampleDisplayCount");
          if (Value) {
            LODWORD(Value) = CA_CFIntValue(Value);
          }
          *(_DWORD *)(v6 + 160 * v5 + 548) = Value;
        }
        if (CFDictionaryContainsKey(theDict, @"sampleDisplayInterval"))
        {
          CFDictionaryRef v8 = CFDictionaryGetValue(theDict, @"sampleDisplayInterval");
          if (v8) {
            double v9 = CA_CFDoubleValue(v8);
          }
          else {
            double v9 = 0.0;
          }
          *(double *)(v6 + 160 * v5 + 496) = v9;
        }
        if (CFDictionaryContainsKey(theDict, @"sampleLocalLayerTime"))
        {
          unint64_t v10 = CFDictionaryGetValue(theDict, @"sampleLocalLayerTime");
          if (v10) {
            double v11 = CA_CFDoubleValue(v10);
          }
          else {
            double v11 = 0.0;
          }
          *(double *)(v6 + 160 * v5 + 480) = v11;
        }
        if (CFDictionaryContainsKey(theDict, @"sampleHostMachTime")) {
          *(void *)(v6 + 160 * v5 + 488) = CA_CFDictionaryGetInt64(theDict, @"sampleHostMachTime");
        }
        if (CFDictionaryContainsKey(theDict, @"samplePresentaitonMachTime")) {
          *(void *)(v6 + 160 * v5 + 504) = CA_CFDictionaryGetInt64(theDict, @"samplePresentaitonMachTime");
        }
        if (CFDictionaryContainsKey(theDict, @"duration"))
        {
          xpc_object_t v12 = CFDictionaryGetValue(theDict, @"duration");
          if (v12) {
            double v13 = CA_CFDoubleValue(v12);
          }
          else {
            double v13 = 0.0;
          }
          *(double *)(v6 + 160 * v5 + 512) = v13;
        }
      }
    }
    _CAXPCImageQueueSampleInvalidate(a1);
  }
}

uint64_t ___Z32CAXPCImageQueueReceiverGetTypeIDv_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CAXPCImageQueueReceiverGetTypeID(void)::type = result;
  return result;
}

__CFString *xpcImageQueueReceiverCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  v13[3] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, @"<CAXPCImageQueueReceiver %p>\n", a1);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 4);
  for (uint64_t i = (void *)*((void *)a1 + 8); i; uint64_t i = (void *)*i)
  {
    uint64_t v7 = i[2];
    uint64_t v6 = (__IOSurface *)i[3];
    uint64_t ID = IOSurfaceGetID(v6);
    CFStringAppendFormat(Mutable, 0, @"{0x%llx : IOSurfaceRef %p (id 0x%x)}\n", v7, v6, ID);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 4);
  uint64_t v9 = *(void *)(*((void *)a1 + 5) + 24);
  memset(v13, 0, 24);
  x_stream_push((uint64_t)v13);
  CAShmemImageQueueShow(v9, *((void *)a1 + 4), 0, 0, 0);
  unint64_t v10 = x_stream_finish((uint64_t)v13);
  if (v10)
  {
    double v11 = (char *)v10;
    CFStringAppendCString(Mutable, v10, 0x8000100u);
    free(v11);
  }
  x_stream_pop_((uint64_t)v13);
  if (v13[0]) {
    free(v13[0]);
  }
  return Mutable;
}

void xpcImageQueueReceiverFinalize(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  CFAllocatorRef v3 = *(atomic_uint **)&a1[10]._os_unfair_lock_opaque;
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  *(void *)&a1[10]._os_unfair_lock_opaque = 0;
  uint64_t v4 = *(uint64_t ***)&a1[16]._os_unfair_lock_opaque;
  if (v4)
  {
    do
    {
      CFRelease(v4[3]);
      uint64_t v4 = (uint64_t **)*v4;
    }
    while (v4);
    unint64_t v5 = *(void **)&a1[16]._os_unfair_lock_opaque;
    uint64_t v6 = (void **)&a1[12];
    if (v5)
    {
      do
      {
        uint64_t v7 = (void *)*v5;
        operator delete(v5);
        unint64_t v5 = v7;
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v6 = (void **)&a1[12];
  }
  CFDictionaryRef v8 = *v6;
  *uint64_t v6 = 0;
  if (v8) {
    operator delete(v8);
  }

  os_unfair_lock_unlock(v2);
}

uint64_t CAXPCImageQueueReceiverCreate(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (xpc_dictionary_get_uint64(a1, "command") != 1)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      CFDictionaryRef v8 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_ERROR, "Invalid command in CAXPCImageQueueReceiverCreate message!", v9, 2u);
      }
    }
    return 0;
  }
  uint64_t result = (uint64_t)xpc_dictionary_get_value(a1, "capacity");
  if (!result) {
    return result;
  }
  uint64_t value = xpc_uint64_get_value((xpc_object_t)result);
  uint64_t result = (uint64_t)xpc_dictionary_get_value(a1, "shmemFlags");
  if (!result) {
    return result;
  }
  int v4 = xpc_uint64_get_value((xpc_object_t)result);
  uint64_t result = (uint64_t)xpc_dictionary_get_value(a1, "shmemSize");
  if (!result) {
    return result;
  }
  mach_vm_size_t v5 = xpc_uint64_get_value((xpc_object_t)result);
  uint64_t result = (uint64_t)xpc_dictionary_get_value(a1, "shmemOffset");
  if (!result) {
    return result;
  }
  xpc_uint64_get_value((xpc_object_t)result);
  mem_entry_name_port_t v6 = xpc_dictionary_copy_mach_send();
  uint64_t result = 0;
  if (!v6 || !v5 || v5 < value) {
    return result;
  }
  uint64_t v7 = CA::Render::Shmem::new_shmem(v6, v5, 0, v4);
  mach_port_deallocate(*MEMORY[0x1E4F14960], v6);
  if (!v7) {
    return 0;
  }
  if (CAXPCImageQueueReceiverGetTypeID(void)::once[0] != -1) {
    dispatch_once(CAXPCImageQueueReceiverGetTypeID(void)::once, &__block_literal_global_80_14625);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 16) = 0x100000000;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = value;
  *(void *)(result + 40) = v7;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 80) = 1065353216;
  return result;
}

void CAXPCImageQueueReceiverSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  mem_entry_name_port_t v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (CFEqual(a2, @"displayRefreshRate")) {
    *(float *)(a1 + 28) = CA_CFFloatValue(a3);
  }

  os_unfair_lock_unlock(v6);
}

uint64_t CAXPCImageQueueReceiverProcessMessage(uint64_t a1, xpc_object_t xdict)
{
  *(void *)&v62[13] = *MEMORY[0x1E4F143B8];
  int uint64 = xpc_dictionary_get_uint64(xdict, "command");
  if (uint64 == 3)
  {
    uint64_t v8 = xpc_dictionary_get_uint64(xdict, "iosurfaceRenderId");
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    uint64_t v9 = (void *)(a1 + 48);
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((void *)(a1 + 48), v8);
    if (v10)
    {
      double v11 = v10;
      CFRelease((CFTypeRef)v10[3]);
      int8x8_t v12 = *(int8x8_t *)(a1 + 56);
      unint64_t v13 = v11[1];
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v12) {
          v13 %= *(void *)&v12;
        }
      }
      else
      {
        v13 &= *(void *)&v12 - 1;
      }
      uint64_t v16 = *(void **)(*v9 + 8 * v13);
      do
      {
        int32x2_t v17 = v16;
        uint64_t v16 = (void *)*v16;
      }
      while (v16 != v11);
      if (v17 == (void *)(a1 + 64)) {
        goto LABEL_42;
      }
      unint64_t v18 = v17[1];
      if (v14.u32[0] > 1uLL)
      {
        if (v18 >= *(void *)&v12) {
          v18 %= *(void *)&v12;
        }
      }
      else
      {
        v18 &= *(void *)&v12 - 1;
      }
      if (v18 != v13)
      {
LABEL_42:
        if (!*v11) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*v11 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v26 >= *(void *)&v12) {
            v26 %= *(void *)&v12;
          }
        }
        else
        {
          v26 &= *(void *)&v12 - 1;
        }
        if (v26 != v13) {
LABEL_43:
        }
          *(void *)(*v9 + 8 * v13) = 0;
      }
      uint64_t v30 = *v11;
      if (*v11)
      {
        unint64_t v31 = *(void *)(v30 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v31 >= *(void *)&v12) {
            v31 %= *(void *)&v12;
          }
        }
        else
        {
          v31 &= *(void *)&v12 - 1;
        }
        if (v31 != v13)
        {
          *(void *)(*v9 + 8 * v31) = v17;
          uint64_t v30 = *v11;
        }
      }
      *int32x2_t v17 = v30;
      void *v11 = 0;
      --*(void *)(a1 + 72);
      operator delete(v11);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float v29 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v60 = a1;
        __int16 v61 = 2048;
        *(void *)int v62 = v8;
        _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_ERROR, "CAXPCIQR(%p) unregister: id 0x%llx not found", buf, 0x16u);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    return 1;
  }
  if (uint64 != 2) {
    return 0;
  }
  mach_port_t v5 = xpc_dictionary_copy_mach_send();
  uint64_t v6 = xpc_dictionary_get_uint64(xdict, "iosurfaceRenderId");
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (v5)
  {
    uint64_t v7 = (void *)(a1 + 48);
    if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((void *)(a1 + 48), v6))
    {
      if (x_log_hook_p()) {
        goto LABEL_12;
      }
      uint64_t v24 = x_log_category_utilities;
      if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
        goto LABEL_127;
      }
      *(_DWORD *)long long buf = 134218240;
      uint64_t v60 = a1;
      __int16 v61 = 2048;
      *(void *)int v62 = v6;
      CFDictionaryRef v25 = "CAXPCIQR(%p) register: id 0x%llx already registered";
      goto LABEL_36;
    }
    IOSurfaceRef v19 = IOSurfaceLookupFromMachPort(v5);
    if (!v19)
    {
      if (x_log_hook_p()) {
        goto LABEL_12;
      }
      uint64_t v42 = x_log_category_utilities;
      if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
        goto LABEL_127;
      }
      *(_DWORD *)long long buf = 134218496;
      uint64_t v60 = a1;
      __int16 v61 = 1024;
      *(_DWORD *)int v62 = v5;
      float64x2_t v62[2] = 2048;
      *(void *)&v62[3] = v6;
      CFDictionaryRef v25 = "CAXPCIQR(%p) register: iosurface lookup for port(%u) failed for id 0x%llx";
      uint64_t v27 = v42;
      uint32_t v28 = 28;
LABEL_37:
      _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_ERROR, v25, buf, v28);
      goto LABEL_127;
    }
    IOSurfaceRef v20 = v19;
    unint64_t v21 = *(void *)(a1 + 56);
    if (v21)
    {
      uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        uint64_t v23 = v6;
        if (v6 >= v21) {
          uint64_t v23 = v6 % v21;
        }
      }
      else
      {
        uint64_t v23 = (v21 - 1) & v6;
      }
      int v32 = *(void **)(*v7 + 8 * v23);
      if (v32)
      {
        for (uint64_t i = (void *)*v32; i; uint64_t i = (void *)*i)
        {
          unint64_t v34 = i[1];
          if (v34 == v6)
          {
            if (i[2] == v6) {
              goto LABEL_127;
            }
          }
          else
          {
            if (v22.u32[0] > 1uLL)
            {
              if (v34 >= v21) {
                v34 %= v21;
              }
            }
            else
            {
              v34 &= v21 - 1;
            }
            if (v34 != v23) {
              break;
            }
          }
        }
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    CFNumberRef v35 = operator new(0x20uLL);
    *CFNumberRef v35 = 0;
    v35[1] = v6;
    v35[2] = v6;
    v35[3] = v20;
    float v36 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
    float v37 = *(float *)(a1 + 80);
    if (v21 && (float)(v37 * (float)v21) >= v36)
    {
LABEL_117:
      int v54 = (void *)*v7;
      int v55 = *(void **)(*v7 + 8 * v23);
      if (v55)
      {
        *CFNumberRef v35 = *v55;
      }
      else
      {
        uint64_t v56 = *(void *)(a1 + 64);
        *CFNumberRef v35 = v56;
        *(void *)(a1 + 64) = v35;
        v54[v23] = a1 + 64;
        if (!v56)
        {
LABEL_126:
          ++*(void *)(a1 + 72);
          goto LABEL_127;
        }
        unint64_t v57 = *(void *)(v56 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v57 >= v21) {
            v57 %= v21;
          }
        }
        else
        {
          v57 &= v21 - 1;
        }
        int v55 = (void *)(*v7 + 8 * v57);
      }
      *int v55 = v35;
      goto LABEL_126;
    }
    BOOL v38 = 1;
    if (v21 >= 3) {
      BOOL v38 = (v21 & (v21 - 1)) != 0;
    }
    unint64_t v39 = v38 | (2 * v21);
    unint64_t v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40) {
      int8x8_t prime = (int8x8_t)v40;
    }
    else {
      int8x8_t prime = (int8x8_t)v39;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v21 = *(void *)(a1 + 56);
    }
    if (*(void *)&prime > v21) {
      goto LABEL_83;
    }
    if (*(void *)&prime < v21)
    {
      unint64_t v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v21 < 3 || (uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        unint64_t v49 = std::__next_prime(v49);
      }
      else
      {
        uint64_t v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2) {
          unint64_t v49 = v51;
        }
      }
      if (*(void *)&prime <= v49) {
        int8x8_t prime = (int8x8_t)v49;
      }
      if (*(void *)&prime >= v21)
      {
        unint64_t v21 = *(void *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_83:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int32x4_t v43 = operator new(8 * *(void *)&prime);
          int8x16_t v44 = (void *)*v7;
          void *v7 = v43;
          if (v44) {
            operator delete(v44);
          }
          uint64_t v45 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(void *)(*v7 + 8 * v45++) = 0;
          while (*(void *)&prime != v45);
          float64x2_t v46 = *(void **)(a1 + 64);
          if (v46)
          {
            unint64_t v47 = v46[1];
            uint8x8_t v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(void *)&prime) {
                v47 %= *(void *)&prime;
              }
            }
            else
            {
              v47 &= *(void *)&prime - 1;
            }
            *(void *)(*v7 + 8 * v47) = a1 + 64;
            uint64_t v52 = (void *)*v46;
            if (*v46)
            {
              do
              {
                unint64_t v53 = v52[1];
                if (v48.u32[0] > 1uLL)
                {
                  if (v53 >= *(void *)&prime) {
                    v53 %= *(void *)&prime;
                  }
                }
                else
                {
                  v53 &= *(void *)&prime - 1;
                }
                if (v53 != v47)
                {
                  if (!*(void *)(*v7 + 8 * v53))
                  {
                    *(void *)(*v7 + 8 * v53) = v46;
                    goto LABEL_108;
                  }
                  *float64x2_t v46 = *v52;
                  *uint64_t v52 = **(void **)(*v7 + 8 * v53);
                  **(void **)(*v7 + 8 * v53) = v52;
                  uint64_t v52 = v46;
                }
                unint64_t v53 = v47;
LABEL_108:
                float64x2_t v46 = v52;
                uint64_t v52 = (void *)*v52;
                unint64_t v47 = v53;
              }
              while (v52);
            }
          }
          unint64_t v21 = (unint64_t)prime;
          goto LABEL_112;
        }
        uint64_t v58 = (void *)*v7;
        void *v7 = 0;
        if (v58) {
          operator delete(v58);
        }
        unint64_t v21 = 0;
        *(void *)(a1 + 56) = 0;
      }
    }
LABEL_112:
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v6 >= v21) {
        uint64_t v23 = v6 % v21;
      }
      else {
        uint64_t v23 = v6;
      }
    }
    else
    {
      uint64_t v23 = (v21 - 1) & v6;
    }
    goto LABEL_117;
  }
  if (!x_log_hook_p())
  {
    uint64_t v24 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
      goto LABEL_127;
    }
    *(_DWORD *)long long buf = 134218240;
    uint64_t v60 = a1;
    __int16 v61 = 2048;
    *(void *)int v62 = v6;
    CFDictionaryRef v25 = "CAXPCIQR(%p) register: NULL port for id 0x%llx";
LABEL_36:
    uint64_t v27 = v24;
    uint32_t v28 = 22;
    goto LABEL_37;
  }
LABEL_12:
  x_log_();
LABEL_127:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  mach_port_deallocate(*MEMORY[0x1E4F14960], v5);
  return 1;
}

uint64_t CAXPCImageQueueReceiverCreateSampleForTime(uint64_t a1, char a2, double a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 24);
  atomic_fetch_or((atomic_uint *volatile)(v5 + 256), 0x80000000);
  __dmb(0xBu);
  int v6 = *(_DWORD *)(v5 + 256) & 1;
  uint64_t v7 = (double *)(v5 + 48 * (*(_DWORD *)(v5 + 256) & 1));
  double v8 = v7[21];
  double v9 = v7[22] + (a3 - v7[20]) * v8;
  if (v7[23] >= v9) {
    double v10 = v9;
  }
  else {
    double v10 = v7[23];
  }
  uint64_t v11 = *((void *)v7 + 23);
  double v12 = v7[24];
  double v13 = v7[25];
  __dmb(0xBu);
  *(_DWORD *)(v5 + 256) = v6;
  float v14 = v8;
  if (v10 < 0.0) {
    double v10 = 0.0;
  }
  if ((v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
    double v9 = v10;
  }
  if (v13 < v9) {
    double v9 = v13;
  }
  if (v12 <= v9) {
    double v15 = v9;
  }
  else {
    double v15 = v12;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v16;
  bzero(v38, 0x448uLL);
  int v17 = *(_DWORD *)(a1 + 24);
  long long v27 = 0uLL;
  CA::Render::Update::Update((CA::Render::Update *)v38, 0, 0, v15, 0, v16, v17, v17, (const CA::Bounds *)&v27, 0);
  double v40 = *(float *)(a1 + 28);
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  BOOL v18 = CAShmemImageQueueCopyImageInfo(0, *(void *)(a1 + 32), v5, (uint64_t)v38, (uint64_t)&v27, (a2 & 1) == 0, 0, 0, v15, v14);
  if ((a2 & 1) == 0) {
    CAShmemImageQueueUpdate(v5, 0, 0, 0, 0, v41, 0, 0, v14, v39);
  }
  IOSurfaceRef v19 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (!v18) {
    goto LABEL_25;
  }
  uint64_t v20 = v30;
  unint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((void *)(a1 + 48), v30);
  if (!v21)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      CFDictionaryRef v25 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v37 = v20;
        _os_log_impl(&dword_184668000, v25, OS_LOG_TYPE_ERROR, "CAXPCImageQueue: buffer id 0x%llx not found!", buf, 0xCu);
      }
    }
LABEL_25:
    os_unfair_lock_unlock(v19);
    goto LABEL_26;
  }
  CFTypeRef v22 = CFRetain((CFTypeRef)v21[3]);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (!v22)
  {
LABEL_26:
    uint64_t Instance = 0;
    goto LABEL_27;
  }
  if (CAXPCImageQueueSampleGetTypeID(void)::once != -1) {
    dispatch_once(&CAXPCImageQueueSampleGetTypeID(void)::once, &__block_literal_global_74);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = v34;
  *(_DWORD *)(Instance + 24) = *(_DWORD *)(a1 + 20);
  *(void *)(Instance + 32) = v22;
  *(unsigned char *)(Instance + 64) = (*(unsigned char *)(Instance + 64) & 0xF9 | a2 & 2 | (BYTE8(v27) >> 3) & 4) ^ 2;
  CFRetain((CFTypeRef)a1);
  *(void *)(Instance + 56) = a1;
  *(unsigned char *)(Instance + 64) &= ~1u;
  *(_DWORD *)(Instance + 40) = DWORD2(v28);
  *(void *)(Instance + 48) = *((void *)&v30 + 1);
LABEL_27:
  CA::Render::Update::~Update((CA::Render::Update *)v38, v23);
  return Instance;
}

uint64_t CAXPCImageQueueReceiverGetImageCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (int *)(*(void *)(*(void *)(a1 + 40) + 24) + 532);
  do
  {
    int v5 = *v4;
    v4 += 40;
    if (v5) {
      ++result;
    }
    --v1;
  }
  while (v1);
  return result;
}

uint64_t CAXPCImageQueueReceiverSetDisplayedPixelCount(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 24) + 68) = a2;
  return result;
}

uint64_t CAXPCImageQueueReceiverGetIdentifier(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 24);
  if (v1) {
    return *(void *)(v1 + 80);
  }
  else {
    return 0;
  }
}

void sub_184909AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void sub_18490A0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void std::vector<std::tuple<int,unsigned int,int,unsigned int,std::unordered_set<CA::Render::String *>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 56;
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)(v4 - 40));
        int v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18490BDB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18490CC74(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490CD5C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490CE00(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490CE90(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490D054(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490D0DC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490D16C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490D204(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490DCC4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490DD50(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490DDF4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490E6C0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490E81C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490EE60(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490EF08(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490F078(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490F1E0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490F29C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490F524(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490F63C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490F768(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490F9A8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490FB8C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490FC30(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18490FCD0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1849100A0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184910564(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184910674(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184910790(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1849108B0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184910DB0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t display_for_server(CA::WindowServer::Server *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = (void *)[(id)_shared_server displays];
  uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v7 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v9;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v9 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t result = *(void *)(*((void *)&v8 + 1) + 8 * v6);
      if (*(CA::WindowServer::Server **)(*(void *)(result + 8) + 64) == a1) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t result = [v2 countByEnumeratingWithState:&v8 objects:v7 count:16];
        uint64_t v4 = result;
        if (result) {
          goto LABEL_3;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_18491103C(_Unwind_Exception *a1)
{
  operator delete(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1849111A0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184911754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pthread_mutex_t *a13)
{
}

void sub_1849118EC(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18491219C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    }
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::ConvertTransform::~ConvertTransform(_anonymous_namespace_::ConvertTransform *this)
{
  v5[1] = *(void ***)MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1ED02F0A0;
  v5[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v5);
  CFAllocatorRef v3 = (atomic_uint *)*((void *)this + 4);
  if (v3 && atomic_fetch_add(v3 + 4, 0xFFFFFFFF) == 1) {
    CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v3, v2);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 3);
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    }
  }
}

{
  CA::Render::LayerNode *v2;
  atomic_uint *v3;
  atomic_uint *v4;
  void **v5[2];
  uint64_t vars8;

  v5[1] = *(void ***)MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1ED02F0A0;
  v5[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v5);
  CFAllocatorRef v3 = (atomic_uint *)*((void *)this + 4);
  if (v3 && atomic_fetch_add(v3 + 4, 0xFFFFFFFF) == 1) {
    CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v3, v2);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 3);
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
  }

  JUMPOUT(0x185323DC0);
}

void sub_184912BF4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void destroy_impl(CAWindowServerDisplayImpl *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  (**(void (***)(Server *))a1->var1)(a1->var1);
  pthread_mutex_destroy(&a1->var0._m);
  id var3 = a1->var3;
  if (var3) {
    _Block_release(var3);
  }

  CFAllocatorRef v3 = (void *)MEMORY[0x185324A30]();
  uint64_t v4 = (void *)[a1->var6 allValues];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v18 objects:v17 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v19;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        _Block_release(*(const void **)(*((void *)&v18 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v18 objects:v17 count:16];
    }
    while (v6);
  }

  a1->var6 = 0;
  long long v9 = (void *)MEMORY[0x185324A30]();
  long long v10 = (void *)[a1->var7 allValues];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v18 objects:v17 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v19;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v19 != v13) {
          objc_enumerationMutation(v10);
        }
        _Block_release(*(const void **)(*((void *)&v18 + 1) + 8 * v14++));
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v18 objects:v17 count:16];
    }
    while (v12);
  }

  a1->var7 = 0;
  var1 = a1->var1;
  if (var1) {
    (*(void (**)(Server *))(*(void *)var1 + 120))(var1);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
}

const void *find_display(CFArrayRef *a1, uint64_t a2)
{
  CFIndex Count = CFArrayGetCount(*a1);
  if (!Count) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*a1, v6);
    if ((*(unsigned int (**)(uint64_t, const void *))(a2 + 16))(a2, ValueAtIndex)) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return ValueAtIndex;
}

void shared_server_init(CA::Render::Server *a1)
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  CA::Render::Server::start(a1);
  CA::WindowServer::Display::_fetch_frozen_surface_on_creation = objc_msgSend((id)-[CA::Render::Server objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", @"fetchFrozenSurfaces"), "BOOLValue");
  _shared_server = [[CAWindowServer alloc] _init];
  int v2 = objc_msgSend((id)-[CA::Render::Server objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", @"local"), "BOOLValue");
  if ((v2 & 1) == 0) {
    [(id)_shared_server _detectDisplays];
  }
  if (objc_msgSend((id)-[CA::Render::Server objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", @"disableUpdatesOnMainDisplay"), "BOOLValue"))objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)_shared_server, "displays"), "firstObject"), "setDisablesUpdates:", 1); {
  CFAllocatorRef v3 = getenv("CA_CLONE_DISPLAY");
  }
  if (v3 && atoi(v3))
  {
    uint64_t v4 = (void *)[(id)_shared_server displays];
    unint64_t v5 = [v4 count];
    if (v5 >= 2)
    {
      unint64_t v6 = v5;
      for (uint64_t i = 1; i != v6; ++i)
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", 0), "addClone:", objc_msgSend(v4, "objectAtIndex:", i));
    }
    _force_cloning = 1;
  }
  uint64_t v8 = getenv("CA_MAIN_DISPLAY_SCALE");
  if (v8)
  {
    double v9 = atof(v8);
    if (v9 > 0.0)
    {
      double v10 = v9;
      uint64_t v11 = (void *)[(id)_shared_server displays];
      if ([v11 count]) {
        objc_msgSend((id)objc_msgSend(v11, "objectAtIndex:", 0), "setScale:", v10);
      }
    }
  }
  uint64_t v12 = getenv("CA_EXTERNAL_DISPLAY_SCALE");
  if (v12)
  {
    double v14 = atof(v12);
    if (v14 > 0.0)
    {
      double v15 = v14;
      unsigned int v16 = (void *)[(id)_shared_server displays];
      unint64_t v17 = [v16 count];
      if (v17 >= 2)
      {
        unint64_t v18 = v17;
        for (uint64_t j = 1; j != v18; ++j)
          objc_msgSend((id)objc_msgSend(v16, "objectAtIndex:", j), "setScale:", v15);
      }
    }
  }
  if (v2)
  {
    if (CADeviceIsPhone::once[0] != -1) {
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_193);
    }
  }
  else
  {
    CA::Render::Server::register_name(0, v13);
    if (CADeviceIsPhone::once[0] != -1) {
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_193);
    }
    if (CADeviceIsPhone::phone)
    {
      {
        shared_server_init(void *)::monitor = [MEMORY[0x1E4F96418] monitorWithConfiguration:&__block_literal_global_15472];
      }
      CFRetain((CFTypeRef)shared_server_init(void *)::monitor);
    }
  }

  CA::Render::add_observer(0x3Au, 0, (uint64_t)shared_server_init(void *)::$_0::__invoke, 0, 0);
}

void sub_184914054(_Unwind_Exception *a1)
{
}

uint64_t shared_server_init(void *)::$_0::__invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = *(void *)(*(void *)(_shared_server + 8) + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *a3);
  }
  return result;
}

uint64_t ___ZL18shared_server_initPv_block_invoke(uint64_t a1, void *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (void *)[MEMORY[0x1E4F96448] descriptor];
  [v3 setValues:1];
  [v3 setEndowmentNamespaces:&unk_1ED05B9D8];
  [a2 setStateDescriptor:v3];
  v5[0] = [MEMORY[0x1E4F96430] predicateMatchingProcessTypeApplication];
  objc_msgSend(a2, "setPredicates:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v5, 1));
  return [a2 setUpdateHandler:&__block_literal_global_1077_15475];
}

void sub_184914848(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CAML::Type::set_property(const char **this, CAML::Context *a2, const void *a3, unsigned int a4, const void *a5)
{
}

void CAML::Type::~Type(CAML::Type *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

double CAPointToCGPoint(double *a1, double a2, double a3, double a4, double a5)
{
  if (fabs(a5 + -1.0) >= 0.000001)
  {
    if (a5 <= 0.0)
    {
      a5 = INFINITY;
      if (!a1) {
        return a5 * a2;
      }
      goto LABEL_5;
    }
    a5 = 1.0 / a5;
  }
  if (a1) {
LABEL_5:
  }
    *a1 = a5 * a4;
  return a5 * a2;
}

BOOL CAPointEqualToPoint(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

__n128 CAPointApplyTransform_(float64x2_t *a1, float64x2_t *a2)
{
  __n128 result = *(__n128 *)a1;
  float64x2_t v3 = a1[1];
  float64x2_t v4 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a2[1], a1->f64[0]), a2[3], *a1, 1), a2[5], v3.f64[0]), a2[7], v3, 1);
  *a1 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, a1->f64[0]), a2[2], *a1, 1), a2[4], v3.f64[0]), a2[6], v3, 1);
  a1[1] = v4;
  return result;
}

double CAPointApplyTransform(float64x2_t *a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a1, a2), a1[2], a3), a1[4], a4), a1[6], a5);
  return result;
}

float64x2_t CAPointArrayApplyTransform(float64x2_t *a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  if (a3)
  {
    float64x2_t v4 = a1 + 1;
    do
    {
      float64x2_t result = v4[-1];
      float64x2_t v6 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(a4[1], result.f64[0]), a4[3], result, 1), a4[5], v4->f64[0]), a4[7], *v4, 1);
      v4[-1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a4, result.f64[0]), a4[2], result, 1), a4[4], v4->f64[0]), a4[6], *v4, 1);
      *float64x2_t v4 = v6;
      float64x2_t v4 = (float64x2_t *)((char *)v4 + a2);
      --a3;
    }
    while (a3);
  }
  return result;
}

void CA::CG::DrawShadow::draw_shadow(CA::CG::DrawShadow *this, CA::CG::Renderer *a2)
{
  __dst[61] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 1);
  float v5 = *((double *)a2 + 10);
  float64x2_t v6 = (float32x2_t *)*((void *)this + 19);
  float v94 = v5;
  float v7 = v6[9].f32[1] * v5;
  double v8 = v7;
  int32x4_t v101 = 0uLL;
  float32x2_t v9 = v6[10];
  CA::Shape::get_bounds(*(void *)(*(void *)(v4 + 248) + 8), v101.i32);
  uint64_t v12 = *(int32x2_t **)(v4 + 264);
  if (v12) {
    uint64_t v13 = v12 + 4;
  }
  else {
    uint64_t v13 = (int32x2_t *)(v4 + 200);
  }
  int32x2_t v14 = (int32x2_t)v101.u64[1];
  v11.i32[1] = 1;
  uint32x2_t v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v101.u64[1]);
  *(uint32x2_t *)v10.i8 = vpmax_u32(v15, v15);
  if ((v10.i32[0] & 0x80000000) == 0)
  {
    *(int32x2_t *)v10.i8 = v13[1];
    uint32x2_t v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v10.i8);
    *(uint32x2_t *)v11.i8 = vpmax_u32(v16, v16);
    if (v11.i32[0] < 0
      || (int32x2_t v17 = vadd_s32(*v13, *(int32x2_t *)v10.i8),
          *(int32x2_t *)v10.i8 = vmax_s32(*(int32x2_t *)v101.i8, *v13),
          int32x2_t v14 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v101.i8, (int32x2_t)v101.u64[1]), v17), *(int32x2_t *)v10.i8),
          uint32x2_t v18 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v14),
          *(uint32x2_t *)v11.i8 = vpmax_u32(v18, v18),
          v11.i32[0] < 0))
    {
      int32x2_t v14 = 0;
      v101.i64[1] = 0;
    }
    else
    {
      v10.u64[1] = (unint64_t)v14;
      int32x4_t v101 = v10;
    }
  }
  int v19 = v14.i32[0];
  if (v14.i32[0] <= v14.i32[1]) {
    int v19 = v14.i32[1];
  }
  v10.i32[0] = v19;
  v11.i32[0] = 1073741822;
  v20.i64[0] = v101.i32[0];
  v20.i64[1] = v101.i32[1];
  int8x16_t v21 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v10, v11), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v20));
  v20.i64[0] = v14.i32[0];
  v20.i64[1] = v14.i32[1];
  int8x16_t v22 = (int8x16_t)vcvtq_f64_s64(v20);
  int32x2_t v23 = vdup_n_s32(v19 > 1073741822);
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  float64x2_t v99 = (float64x2_t)v21;
  int8x16_t v100 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v20, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v22);
  CA::BoundsImpl::inset(v99.f64, v8 * -2.8, v8 * -2.8);
  int8x16_t v25 = *((int8x16_t *)this + 7);
  int8x16_t v26 = *((int8x16_t *)this + 8);
  double v27 = v94;
  if (v94 != 1.0)
  {
    v24.f64[0] = 1.79769313e308;
    int8x16_t v28 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v24, (float64x2_t)v26).i64[0], 0);
    v29.i64[1] = *((void *)this + 15);
    *(double *)v29.i64 = v27 * *(double *)v25.i64;
    int8x16_t v25 = vbslq_s8(v28, v29, v25);
    v29.i64[1] = *((void *)this + 17);
    *(double *)v29.i64 = v27 * *(double *)v26.i64;
    int8x16_t v26 = vbslq_s8(v28, v29, v26);
    if (*(double *)&v26.i64[1] < 1.79769313e308)
    {
      v25.i64[1] = vmuld_lane_f64(v27, (float64x2_t)v25, 1);
      *(double *)&v26.i64[1] = *(double *)&v26.i64[1] * v27;
    }
  }
  int8x16_t v30 = (int8x16_t)vclezq_f64((float64x2_t)v100);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v30, 1), v30).u64[0] & 0x8000000000000000) == 0)
  {
    int8x16_t v31 = (int8x16_t)vclezq_f64((float64x2_t)v26);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v31, 1), v31).u64[0] & 0x8000000000000000) == 0)
    {
      float32x2_t v32 = vmul_n_f32(v9, v94);
      float64x2_t v33 = vcvtq_f64_f32(v32);
      float64x2_t v34 = vsubq_f64(v99, v33);
      float64x2_t v35 = vmaxnmq_f64(v34, (float64x2_t)v25);
      float64x2_t v36 = vsubq_f64(vminnmq_f64(vaddq_f64(v34, (float64x2_t)v100), vaddq_f64((float64x2_t)v25, (float64x2_t)v26)), v35);
      int8x16_t v37 = (int8x16_t)vclezq_f64(v36);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v37, 1), v37).u64[0] & 0x8000000000000000) == 0)
      {
        float64x2_t v89 = v33;
        float64x2_t v99 = v35;
        int8x16_t v100 = (int8x16_t)v36;
        BOOL v38 = (_DWORD *)*((void *)this + 18);
        int v39 = v38[25];
        if (v7 != 0.0) {
          goto LABEL_22;
        }
        if ((v39 & 0x400) != 0) {
          goto LABEL_22;
        }
        float64x2_t v91 = v36;
        float64x2_t v95 = v35;
        char v40 = (*(uint64_t (**)(_DWORD *, CA::CG::Renderer *))(*(void *)v38 + 128))(v38, a2);
        float64x2_t v36 = v91;
        float64x2_t v35 = v95;
        if ((v40 & 1) != 0
          || (v41 = (*(uint64_t (**)(void, CA::CG::Renderer *))(**((void **)this + 18) + 136))(*((void *)this + 18), a2), v36 = v91, float64x2_t v35 = v95, (v41 & 5) == 0))
        {
LABEL_22:
          double v49 = 64.0;
          if (v7 <= 8.0) {
            double v49 = 16.0;
          }
          if (v7 <= 4.0) {
            double v50 = 4.0;
          }
          else {
            double v50 = v49;
          }
          double v51 = v8 * v8;
          if (v8 * v8 <= v50)
          {
            double v52 = 1.0;
            double v54 = sqrt(v51);
          }
          else
          {
            double v52 = 1.0;
            double v53 = 3.0625;
            do
            {
              double v52 = v52 * 0.5;
              double v51 = (v51 - v53) * 0.25;
              double v53 = 0.0;
            }
            while (v51 > v50);
            double v54 = sqrt(v51);
            if (v52 == 1.0)
            {
              double v52 = 1.0;
            }
            else
            {
              if (v36.f64[0] < 1.79769313e308)
              {
                v99.f64[0] = v35.f64[0] * v52;
                *(double *)v100.i64 = v36.f64[0] * v52;
              }
              if (v36.f64[1] < 1.79769313e308)
              {
                v99.f64[1] = v35.f64[1] * v52;
                *(double *)&v100.i64[1] = v36.f64[1] * v52;
              }
            }
          }
          int8x16_t v55 = (int8x16_t)vceqzq_f64((float64x2_t)v100);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v55, 1), v55).u64[0] & 0x8000000000000000) != 0
            || (int8x16_t v56 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v100), (int8x16_t)vcgezq_f64((float64x2_t)v100)),
                (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v56), 1), v56).u64[0] & 0x8000000000000000) != 0))
          {
            int32x4_t v98 = 0uLL;
            int32x2_t v60 = 0;
            int32x2_t v59 = (int32x2_t)-1;
          }
          else
          {
            int32x4_t v57 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v99, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            int32x4_t v58 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v99, (float64x2_t)v100), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v57);
            int32x4_t v98 = vuzp1q_s32(v57, v58);
            int32x2_t v59 = vadd_s32(vmovn_s64((int64x2_t)v57), (int32x2_t)-1);
            int32x2_t v60 = vmovn_s64((int64x2_t)v58);
          }
          double v97 = v52;
          int v61 = v60.i32[0];
          if (v60.i32[0] <= v60.i32[1]) {
            int v62 = v60.i32[1];
          }
          else {
            int v62 = v60.i32[0];
          }
          if (v60.i32[0] >= v60.i32[1]) {
            int v61 = v60.i32[1];
          }
          if (v62 <= 1073741822 && v61 >= 1)
          {
            int8x8_t v64 = (int8x8_t)vadd_s32(v60, (int32x2_t)0x200000002);
            if (v64.i32[1] < 1 || v64.i32[0] < 1) {
              unsigned int v66 = -1;
            }
            else {
              unsigned int v66 = 0;
            }
            *(int32x2_t *)v98.i8 = v59;
            v98.u64[1] = (unint64_t)vbic_s8(v64, (int8x8_t)vdup_n_s32(v66));
          }
          uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, uint64_t))(*(void *)v4 + 656))(v4, 1, &v98, 8200);
          if (v67)
          {
            uint64_t v68 = v67;
            double v69 = v97 * v27;
            if (*((double *)a2 + 10) != v97 * v27)
            {
              *((double *)a2 + 10) = v69;
              *((double *)a2 + 11) = v69;
              *((void *)a2 + 12) = 0;
              *((void *)a2 + 13) = 0;
              *((double *)a2 + 14) = v69;
              *((void *)a2 + 15) = 0;
              *((void *)a2 + 16) = 0;
            }
            float64x2_t v70 = *((float64x2_t *)a2 + 2);
            float64x2_t v71 = *((float64x2_t *)a2 + 3);
            float64x2_t v72 = *((float64x2_t *)a2 + 4);
            *((float64x2_t *)a2 + 2) = vmulq_n_f64(v70, v97);
            *((float64x2_t *)a2 + 3) = vmulq_n_f64(v71, v97);
            *((float64x2_t *)a2 + 4) = vmulq_n_f64(v72, v97);
            unsigned int v73 = *(unsigned __int16 *)(v4 + 832);
            __int16 v74 = v73 & 0x7000;
            float64x2_t v90 = v71;
            __n128 v93 = (__n128)v70;
            float64x2_t v88 = v72;
            if ((v73 & 0x7000) == 0x3000)
            {
              unsigned int v73 = v73 & 0xFFFF8FFF | 0x2000;
              *(_WORD *)(v4 + 832) = v73;
            }
            unsigned int v75 = v73 >> 12;
            if ((v75 & 4) != 0) {
              char v76 = 0;
            }
            else {
              char v76 = 0x1E1F1400u >> (8 * (v75 & 7));
            }
            *(unsigned char *)(v67 + 73) = *(unsigned char *)(v67 + 73) & 0xC0 | v76;
            float32x4_t v77 = *(const void **)(v4 + 16);
            memcpy(__dst, v77, 0x1E8uLL);
            __dst[0] = v77;
            *(void *)(v4 + 16) = __dst;
            uint64_t v109 = 0;
            memset(&v108[2], 0, 32);
            memset(v108, 0, 32);
            uint64_t v78 = *(void *)(v4 + 248);
            *(_OWORD *)((char *)v108 + 8) = *(_OWORD *)(v78 + 8);
            uint64_t v79 = *(void *)(v78 + 32);
            *((void *)&v108[1] + 1) = *(void *)(v78 + 24);
            *(void *)&v108[2] = v79;
            *(_OWORD *)((char *)&v108[2] + 8) = *(_OWORD *)(v78 + 40);
            *((void *)&v108[3] + 1) = *(void *)(v78 + 56);
            __int16 v80 = *(_WORD *)(v78 + 68);
            LODWORD(v109) = *(_DWORD *)(v78 + 64);
            HIDWORD(v109) = v80 & 0x5FF;
            memset(v107, 0, sizeof(v107));
            CA::Shape::operator=((uint64_t)v107, &v98);
            *((void *)&v108[0] + 1) = v107;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 184))(v4, 25)) {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 704))(v4, v68, 32, 32);
            }
            *(void *)&v108[0] = CA::OGL::Context::set_gstate(v4, (uint64_t)v108);
            CA::OGL::Context::push_surface(v4, v68, 1u, 1, 0);
            CA::CG::DrawOp::render_alpha(*((CA::CG::DrawOp **)this + 18), a2, 1);
            CA::OGL::Context::pop_surface((CA::OGL::Context *)v4);
            CA::OGL::Context::set_gstate(v4, **(void **)(v4 + 248));
            *(void *)(v4 + 16) = __dst[0];
            __dst[0] = 0;
            *(_WORD *)(v4 + 832) = *(_WORD *)(v4 + 832) & 0x8FFF | v74;
            __n128 v81 = v93;
            *((__n128 *)a2 + 2) = v93;
            *((float64x2_t *)a2 + 3) = v90;
            *((float64x2_t *)a2 + 4) = v88;
            if (*((double *)a2 + 10) != v27)
            {
              *((double *)a2 + 10) = v27;
              *((double *)a2 + 11) = v27;
              *((void *)a2 + 12) = 0;
              *((void *)a2 + 13) = 0;
              *((double *)a2 + 14) = v27;
              *((void *)a2 + 15) = 0;
              *((void *)a2 + 16) = 0;
            }
            uint64_t v106 = 0;
            long long v105 = 0u;
            long long v104 = 0u;
            HIDWORD(v105) = 15;
            float v82 = v54;
            *(float *)float v102 = v82;
            *(float *)&v102[1] = v82;
            float32x2_t v103 = v32;
            if ((v39 & 0x400) != 0) {
              char v83 = 12;
            }
            else {
              char v83 = 11;
            }
            *(unsigned char *)(*(void *)(v4 + 16) + 16) = v83;
            v81.n128_f32[0] = v97;
            (*(void (**)(uint64_t, uint64_t, _DWORD *, void, float, __n128))(*(void *)v4 + 848))(v4, v68, v102, 0, 1.0, v81);
            *(unsigned char *)(*(void *)(v4 + 16) + 16) = 0;
            CA::OGL::Context::release_surface(v4, v68);
            if (__dst[0]) {
              __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
            }
          }
        }
        else
        {
          long long v92 = *(_OWORD *)((char *)a2 + 104);
          long long v96 = *(_OWORD *)((char *)a2 + 88);
          long long v87 = *((_OWORD *)a2 + 2);
          float64x2_t v85 = *(float64x2_t *)((char *)a2 + 120);
          long long v86 = *((_OWORD *)a2 + 3);
          float64x2_t v84 = *((float64x2_t *)a2 + 4);
          uint64_t v42 = *(void *)(*(void *)(v4 + 16) + 8);
          *((float64x2_t *)a2 + 4) = vaddq_f64(v84, v89);
          *(float64x2_t *)((char *)a2 + 120) = vaddq_f64(v85, v89);
          _H1 = *(_WORD *)(*((void *)this + 18) + 94);
          __asm { FCVT            S1, H1 }
          *(float16x4_t *)(*(void *)(v4 + 16) + 8) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)this + 88)), _S1));
          (*(void (**)(void, CA::CG::Renderer *))(**((void **)this + 18) + 160))(*((void *)this + 18), a2);
          *(void *)(*(void *)(v4 + 16) + 8) = v42;
          *((_OWORD *)a2 + 2) = v87;
          *((_OWORD *)a2 + 3) = v86;
          *((float64x2_t *)a2 + 4) = v84;
          *(_OWORD *)((char *)a2 + 88) = v96;
          *(_OWORD *)((char *)a2 + 104) = v92;
          *(float64x2_t *)((char *)a2 + 120) = v85;
        }
      }
    }
  }
}

void *CA::CG::DrawShadow::draw_shape_and_color(void *this, CA::CG::Renderer *a2)
{
  if (!*(unsigned char *)(this[19] + 89)) {
    return (void *)(*(uint64_t (**)(void *, CA::CG::Renderer *))(*this + 184))(this, a2);
  }
  return this;
}

void *CA::CG::DrawShadow::draw_shape(void *this, CA::CG::Renderer *a2)
{
  if (!*(unsigned char *)(this[19] + 89)) {
    return (void *)(*(uint64_t (**)(void *, CA::CG::Renderer *))(*this + 184))(this, a2);
  }
  return this;
}

uint64_t CA::CG::DrawShadow::set_op(uint64_t this, CA::CG::DrawOp *a2)
{
  uint64_t v2 = *(void *)(this + 144);
  if (v2) {
    *(void *)(v2 + 104) = 0;
  }
  *(void *)(this + 144) = a2;
  return this;
}

float64x2_t CA::CG::DrawShadow::compute_dod(int64x2_t *this, int64x2_t *a2)
{
  uint64_t v4 = (unsigned char *)this[9].i64[0];
  if ((v4[101] & 4) != 0)
  {
    float64x2_t result = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    int64x2_t v10 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    this[7] = (int64x2_t)result;
    this[8] = v10;
    *a2 = (int64x2_t)result;
    a2[1] = v10;
  }
  else
  {
    (*(void (**)(unsigned char *, int64x2_t *))(*(void *)v4 + 24))(v4, this + 7);
    float64x2_t result = (float64x2_t)this[7];
    *a2 = (int64x2_t)result;
    a2[1] = this[8];
    float64x2_t v6 = (float32x2_t *)this[9].i64[1];
    if (!v6[11].i8[1])
    {
      float v7 = v6[9].f32[1] * -2.8;
      *(float64x2_t *)a2 = vaddq_f64(result, vcvtq_f64_f32(v6[10]));
      double v8 = v7;
      double v9 = v7;
      CA::BoundsImpl::inset((double *)a2->i64, v8, v9);
    }
  }
  return result;
}

void CA::CG::DrawShadow::~DrawShadow(CA::CG::DrawShadow *this)
{
  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  uint64_t v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

uint64_t CA::ShapeHandle::grow(CA::ShapeHandle *this, int a2)
{
  float64x2_t v3 = *(_DWORD **)this;
  unint64_t v4 = *((void *)this + 1) - *(void *)this;
  unint64_t v5 = v4 >> 2;
  LODWORD(v6) = *(_DWORD *)(*(void *)this + 8);
  if (v6 <= 0x10) {
    LODWORD(v6) = 16;
  }
  unint64_t v6 = (int)v6;
  do
  {
    unint64_t v7 = v6;
    v6 *= 2;
  }
  while (v7 < (v5 + a2));
  if (v7 < 0x1FFFFFFF)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 4 * v7, 0x8BB15036uLL);
    int64x2_t v10 = *(_DWORD **)this;
    if (result)
    {
      uint64_t v11 = result;
      if (v5)
      {
        unint64_t v12 = v4 >> 2;
        uint64_t v13 = *(int **)this;
        int32x2_t v14 = (_DWORD *)result;
        do
        {
          int v15 = *v13++;
          *v14++ = v15;
          LODWORD(v12) = v12 - 1;
        }
        while (v12);
      }
      *(_DWORD *)(result + 4) = v5;
      *(_DWORD *)(result + 8) = v7;
      uint64_t v16 = result + *((void *)this + 3) - (void)v10;
      *((void *)this + 2) = result + *((void *)this + 2) - (void)v10;
      *((void *)this + 3) = v16;
      *((void *)this + 1) = result + (v4 & 0x3FFFFFFFCLL);
      if (v10 != (_DWORD *)((char *)this + 32))
      {
        int32x2_t v17 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v17, v10);
      }
      *(void *)this = v11;
      return 1;
    }
    else
    {
      _DWORD *v10 = 0;
    }
  }
  else
  {
    uint64_t result = 0;
    _DWORD *v3 = 0;
  }
  return result;
}

BOOL CA::Shape::is_valid(CA::Shape *this)
{
  if (this) {
    return 1;
  }
  int v1 = *((_DWORD *)this + 1);
  if (v1 > 11 || v1 == 6)
  {
    int v5 = *((_DWORD *)this + 3);
    float64x2_t v3 = (int *)((char *)this + 12);
    for (int i = v5; i != 0x7FFFFFFF; int i = *v3)
    {
      uint64_t v6 = v3[1];
      BOOL v7 = (int)v6 > 1;
      if ((int)v6 < 2) {
        return v7;
      }
      v3 += v6;
    }
    return 1;
  }
  return 0;
}

char *CA::Shape::dump(CA::Shape *this)
{
  if (this) {
    size_t v2 = 144;
  }
  else {
    size_t v2 = 12 * *((int *)this + 1);
  }
  float64x2_t v3 = (char *)malloc_type_malloc(v2, 0xE23255B1uLL);
  uint64_t v4 = 0;
  int v5 = v3;
  if (this) {
    goto LABEL_6;
  }
LABEL_5:
  for (int i = *((_DWORD *)this + 1); v4 < i; int i = 12)
  {
    v5 += snprintf(v5, &v3[v2] - v5, "%d ", *((_DWORD *)this + v4++));
    if ((this & 1) == 0) {
      goto LABEL_5;
    }
LABEL_6:
    ;
  }
  return v3;
}

CA::Shape *CA::Shape::new_shape(unint64_t a1, double *a2, unsigned int a3)
{
  unint64_t v3 = a1;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return (CA::Shape *)v3;
  }
  uint64_t v21 = 0;
  if (!CGPathIsRegion())
  {
LABEL_13:
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)uint32x2_t v18 = 0u;
    *(void *)&long long v17 = a3;
    *((void *)&v17 + 1) = a2;
    uint64_t v22 = MEMORY[0x1E4F143A8];
    uint64_t v23 = 0x40000000;
    float64x2_t v24 = ___ZN2CA12_GLOBAL__N_113PathConverter7convertEPK6CGPath_block_invoke;
    int8x16_t v25 = &__block_descriptor_tmp_15714;
    int8x16_t v26 = &v17;
    CGPathApplyWithBlock2();
    if ((LODWORD(v18[1]) - 6) < 2)
    {
    }
    else if (LODWORD(v18[1]))
    {
      if (LODWORD(v18[1]) != 8)
      {
        LODWORD(v18[1]) = 8;
        if (v18[0])
        {
          CA::Shape::unref(v18[0]);
          v18[0] = 0;
        }
      }
    }
    return v18[0];
  }
  if (*a2 != 1.0)
  {
LABEL_4:
    if (a3)
    {
LABEL_10:
      *(_OWORD *)uint32x2_t v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      if (&v17 != (long long *)a2)
      {
        long long v10 = *((_OWORD *)a2 + 1);
        long long v17 = *(_OWORD *)a2;
        *(_OWORD *)uint32x2_t v18 = v10;
        long long v19 = *((_OWORD *)a2 + 2);
      }
      CGSTransformRegion();
      unint64_t v3 = CA::Shape::new_shape();
      CGSReleaseRegion();
      return (CA::Shape *)v3;
    }
    double v6 = trunc(*a2);
    if (vabdd_f64(v6, v6) < 0.000001)
    {
      uint64_t v7 = 1;
      while (v7 != 6)
      {
        uint64_t v8 = v7;
        double v9 = trunc(a2[v7++]);
        if (vabdd_f64(v9, v9) >= 0.000001)
        {
          if ((unint64_t)(v8 - 1) < 5) {
            goto LABEL_13;
          }
          goto LABEL_10;
        }
      }
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  while (v13 != 6)
  {
    uint64_t v14 = v13;
    double v15 = a2[v13];
    double v16 = CA::Mat2Impl::mat2_identity_double[v13++];
    if (v15 != v16)
    {
      if ((unint64_t)(v14 - 1) < 5) {
        goto LABEL_4;
      }
      return (CA::Shape *)CA::Shape::new_shape();
    }
  }
  return (CA::Shape *)CA::Shape::new_shape();
}

unint64_t CA::Shape::new_shape()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (CGSRegionIsEmpty()) {
    return 1;
  }
  long long v17 = 0;
  unsigned int v16 = 0;
  if (CGSGetRegionData()) {
    return 1;
  }
  if (v17[1] == 4) {
    return 1;
  }
  if (*v17 != 0x80000000) {
    return 1;
  }
  unint64_t v0 = (unint64_t)v16 >> 2;
  if (v17[v0 - 1] != 0x7FFFFFFF) {
    return 1;
  }
  if (v0 == 9)
  {
    unsigned int v1 = v17[2];
    int v2 = v17[5];
    v15[0] = v17[4];
    v15[1] = v1;
    unsigned int v3 = v17[6] - v1;
    v15[2] = v2 - v15[0];
    v15[3] = v3;
    return CA::Shape::new_shape(v15);
  }
  int v5 = v0 + 3;
  size_t v6 = 4 * (v0 + 3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  unint64_t result = (unint64_t)malloc_type_zone_malloc(malloc_zone, v6, 0x8BB15036uLL);
  if (!result) {
    return 1;
  }
  *(_DWORD *)(result + 4) = v5;
  *(_DWORD *)(result + 8) = v5;
  *(_DWORD *)unint64_t result = 1;
  uint64_t v8 = v17;
  double v9 = (_DWORD *)(result + 12);
  for (int i = *v17; i != 0x7FFFFFFF; int i = *v8)
  {
    _DWORD *v9 = i;
    v9[1] = v8[1];
    v9 += 2;
    uint64_t v11 = v8[1];
    if (v11 != 2)
    {
      unint64_t v12 = v8 + 2;
      uint64_t v13 = 4 * v11 - 8;
      do
      {
        int v14 = *v12++;
        *v9++ = v14;
        v13 -= 4;
      }
      while (v13);
    }
    v8 += v11;
  }
  _DWORD *v9 = 0x7FFFFFFF;
  return result;
}

void ___ZN2CA12_GLOBAL__N_113PathConverter7convertEPK6CGPath_block_invoke(uint64_t a1, int *a2, const CA::Bounds *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(v3 + 24);
  if (v4 == 8)
  {
    *(unsigned char *)a3 = 1;
    return;
  }
  int v5 = *a2;
  if (*a2 != 4)
  {
    if (v5 == 1)
    {
      if ((v4 - 1) <= 4)
      {
        float64x2_t v9 = *(float64x2_t *)*((void *)a2 + 1);
        if ((**((void **)a2 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(void *)(*((void *)a2 + 1) + 8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          float64x2_t v9 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(*(void *)(v3 + 8) + 32), *(float64x2_t *)*(void *)(v3 + 8), v9.f64[0]), *(float64x2_t *)(*(void *)(v3 + 8) + 16), v9, 1);
        }
        switch(v4)
        {
          case 1:
            double v11 = *(double *)(v3 + 40);
            if (v9.f64[1] == v11 || vabdd_f64(v9.f64[1], v11) < 0.001)
            {
              *(float64_t *)(v3 + 48) = v9.f64[0];
              int v8 = 2;
              goto LABEL_14;
            }
            double v12 = *(double *)(v3 + 32);
            if (v9.f64[0] == v12 || vabdd_f64(v9.f64[0], v12) < 0.001)
            {
              *(float64_t *)(v3 + 56) = v9.f64[1];
              int v8 = 4;
              goto LABEL_14;
            }
            break;
          case 2:
            double v14 = *(double *)(v3 + 48);
            if (v9.f64[0] != v14 && vabdd_f64(v9.f64[0], v14) >= 0.001) {
              break;
            }
            *(float64_t *)(v3 + 56) = v9.f64[1];
            int v8 = 3;
            goto LABEL_14;
          case 3:
            double v15 = *(double *)(v3 + 32);
            if (v9.f64[0] != v15 && vabdd_f64(v9.f64[0], v15) >= 0.001) {
              break;
            }
            double v16 = *(double *)(v3 + 56);
            if (v9.f64[1] != v16 && vabdd_f64(v9.f64[1], v16) >= 0.001) {
              break;
            }
            int v8 = 6;
            goto LABEL_14;
          case 4:
            double v17 = *(double *)(v3 + 56);
            if (v9.f64[1] != v17 && vabdd_f64(v9.f64[1], v17) >= 0.001) {
              break;
            }
            *(float64_t *)(v3 + 48) = v9.f64[0];
            int v8 = 5;
            goto LABEL_14;
          case 5:
            double v18 = *(double *)(v3 + 48);
            if (v9.f64[0] != v18 && vabdd_f64(v9.f64[0], v18) >= 0.001) {
              break;
            }
            double v19 = *(double *)(v3 + 40);
            if (v9.f64[1] != v19 && vabdd_f64(v9.f64[1], v19) >= 0.001) {
              break;
            }
            int v8 = 7;
            goto LABEL_14;
          default:
            break;
        }
      }
    }
    else if (!v5 && !v4)
    {
      float64x2_t v6 = *(float64x2_t *)*((void *)a2 + 1);
      if ((**((void **)a2 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)(*((void *)a2 + 1) + 8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        float64x2_t v6 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(*(void *)(v3 + 8) + 32), *(float64x2_t *)*(void *)(v3 + 8), v6.f64[0]), *(float64x2_t *)(*(void *)(v3 + 8) + 16), v6, 1);
      }
      *(float64x2_t *)(v3 + 32) = v6;
      int v8 = 1;
LABEL_14:
      *(_DWORD *)(v3 + 24) = v8;
      return;
    }
LABEL_47:
    *(_DWORD *)(v3 + 24) = 8;
    long long v20 = *(CA::Shape **)(v3 + 16);
    if (v20)
    {
      CA::Shape::unref(v20);
      *(void *)(v3 + 16) = 0;
    }
    return;
  }
  if ((v4 & 0xFFFFFFFE) != 6) {
    goto LABEL_47;
  }
  uint64_t v13 = *(CA::_anonymous_namespace_::PathConverter **)(a1 + 32);
}

void CA::anonymous namespace'::PathConverter::close_rect(CA::_anonymous_namespace_::PathConverter *this, int a2, const CA::Bounds *a3)
{
  int v3 = a2;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 6) = 0;
  double v5 = *((double *)this + 4);
  double v6 = *((double *)this + 6);
  if (v5 <= v6)
  {
    double v7 = *((double *)this + 6);
    double v6 = *((double *)this + 4);
  }
  else
  {
    *((double *)this + 4) = v6;
    *((double *)this + 6) = v5;
    int v3 = a2 ^ 1;
    double v7 = v5;
  }
  double v8 = *((double *)this + 5);
  v9.f64[0] = *((float64_t *)this + 7);
  if (v8 <= v9.f64[0])
  {
    double v10 = *((double *)this + 7);
    v9.f64[0] = *((float64_t *)this + 5);
  }
  else
  {
    *((void *)this + 5) = *(void *)&v9.f64[0];
    *((double *)this + 7) = v8;
    v3 ^= 1u;
    double v10 = v8;
  }
  v11.f64[0] = v7 - v6;
  double v12 = v10 - v9.f64[0];
  *(double *)v13.i64 = v6;
  v13.i64[1] = *(void *)&v9.f64[0];
  v14.f64[0] = v11.f64[0];
  v14.f64[1] = v12;
  int v15 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 4) != 0)
  {
    int8x16_t v22 = (int8x16_t)vceqzq_f64(v14);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v22, 1), v22).u64[0] & 0x8000000000000000) != 0
      || (int8x16_t v23 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v23), 1), v23).u64[0] & 0x8000000000000000) != 0))
    {
      int32x4_t v73 = 0uLL;
      int32x2_t v20 = 0;
    }
    else
    {
      int32x4_t v24 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64((float64x2_t)v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      int32x4_t v25 = (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64((float64x2_t)v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v24);
      int32x4_t v73 = vuzp1q_s32(v24, v25);
      int32x2_t v20 = vmovn_s64((int64x2_t)v25);
    }
    goto LABEL_27;
  }
  if ((v15 & 8) != 0)
  {
    if (v11.f64[0] <= v12) {
      double v26 = v12;
    }
    else {
      double v26 = v11.f64[0];
    }
    if (v26 < 1073741820.0)
    {
      v31.f64[0] = NAN;
      v31.f64[1] = NAN;
      int8x16_t v32 = (int8x16_t)vnegq_f64(v31);
      __asm { FMOV            V2.2D, #0.5 }
      int32x2_t v27 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v32, _Q2, v13), (float64x2_t)v13)));
      int8x16_t v38 = (int8x16_t)vaddq_f64((float64x2_t)v13, v14);
      int32x2_t v20 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v32, _Q2, v38), (float64x2_t)v38))), v27);
    }
    else
    {
      int32x2_t v27 = vdup_n_s32(0xE0000001);
      int32x2_t v20 = (int32x2_t)0xC0000000C0000000;
    }
    *(int32x2_t *)v73.i8 = v27;
    v73.u64[1] = (unint64_t)v20;
    goto LABEL_27;
  }
  int8x16_t v16 = (int8x16_t)vceqzq_f64(v14);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v17 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v17), 1), v17).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v73 = 0uLL;
    int32x2_t v20 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    int32x4_t v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64((float64x2_t)v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v19 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64((float64x2_t)v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18);
    int32x4_t v73 = vuzp1q_s32(v18, v19);
    int32x2_t v20 = vmovn_s64((int64x2_t)v19);
    LODWORD(v21) = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
    HIDWORD(v21) = v18.i32[0];
  }
  v28.i64[0] = (int)v21;
  v28.i64[1] = SHIDWORD(v21);
  float64x2_t v29 = vcvtq_f64_s64(v28);
  v28.i64[0] = v20.i32[0];
  v28.i64[1] = v20.i32[1];
  v9.f64[1] = v6;
  v11.f64[1] = v12;
  if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v9, v29), (int32x4_t)vceqq_f64(v11, vcvtq_f64_s64(v28)))), 0xFuLL))))
  {
LABEL_27:
    if (!vorr_s8((int8x8_t)vdup_lane_s32(v20, 1), (int8x8_t)v20).u32[0]) {
      return;
    }
    int v39 = (unint64_t *)((char *)this + 16);
    uint64_t v40 = *((void *)this + 2);
    if (!v40)
    {
      *((void *)this + 2) = CA::Shape::new_shape((unsigned int *)&v73);
      *((unsigned char *)this + 4) = v3;
      return;
    }
    if ((v15 & 0x10) == 0)
    {
      if (*((unsigned __int8 *)this + 4) == v3)
      {
        CA::shape_union((CA::Shape **)this + 2, (CA::Shape **)&v73, a3);
        return;
      }
      *((_DWORD *)this + 6) = 8;
      int8x16_t v30 = (CA::Shape *)v40;
      goto LABEL_39;
    }
    int32x2_t v41 = vceqz_s32(v20);
    if (vorr_s8((int8x8_t)v41, (int8x8_t)vdup_lane_s32(v41, 1)).u32[0]) {
      return;
    }
    if (v40)
    {
      if (v40 != 1)
      {
        long long v75 = 0u;
        long long v76 = 0u;
        long long v74 = 0u;
        CA::Shape::operator=((uint64_t)&v74, &v73);
LABEL_42:
        if (DWORD1(v74) == 6)
        {
          uint64_t v42 = (long long *)v40;
          goto LABEL_44;
        }
        long long v81 = xmmword_184998410;
        int v82 = 2;
        int8x16_t v44 = (unsigned int *)v83;
        float32x4_t v77 = &v81;
        uint64_t v78 = (unsigned int *)v83;
        uint64_t v79 = (unsigned int *)v83;
        __int16 v80 = (char *)&v81 + 12;
        *(void *)&v83[2028] = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v84 = 0u;
        if (v40)
        {
          unint64_t v45 = (unint64_t)&v84 | 0xC;
          long long v84 = xmmword_184998420;
          LODWORD(v85) = 2;
          DWORD1(v85) = (int)((unint64_t)v40 >> 16) >> 16;
          DWORD2(v85) = 4;
          HIDWORD(v85) = v40 >> 48;
          LODWORD(v86) = HIDWORD(v85) + (v40 >> 17);
          DWORD1(v86) = ((v40 >> 2) & 0x7FFF) + DWORD1(v85);
          *((void *)&v86 + 1) = 0x7FFFFFFF00000002;
          unint64_t v47 = (unint64_t)&v74 | 0xC;
          unsigned int v46 = 0x80000000;
        }
        else
        {
          unint64_t v45 = v40 + 12;
          unsigned int v46 = *(_DWORD *)(v40 + 12);
          unint64_t v47 = (unint64_t)&v74 | 0xC;
          if (v46 == 0x7FFFFFFF) {
            goto LABEL_91;
          }
        }
        uint8x8_t v48 = (unsigned int *)v47;
        double v49 = (unsigned int *)v47;
        unint64_t v50 = v45;
        while (1)
        {
          unsigned int v51 = *v49;
          if (*v49 == 0x7FFFFFFF) {
            goto LABEL_92;
          }
          if ((int)(v46 - v51) >= 1) {
            break;
          }
          uint64_t v52 = *(int *)(v50 + 4);
          if (((v46 - v51) & 0x80000000) == 0)
          {
            unint64_t v45 = v50;
            v50 += 4 * v52;
            goto LABEL_56;
          }
          LODWORD(v53) = v48[1];
          unint64_t v45 = v50;
          v50 += 4 * v52;
          unint64_t v47 = (unint64_t)v49;
LABEL_57:
          int v54 = v52 - 2;
          unsigned int v55 = v52 - 2 + v53;
          if (*((int *)v77 + 2) < ((char *)&v44[v55] - (char *)v77) >> 2)
          {
            if (!CA::ShapeHandle::grow((CA::ShapeHandle *)&v77, v55))
            {
              if (*(_DWORD *)v50 != 0x7FFFFFFF)
              {
LABEL_92:
                unint64_t v43 = CA::ShapeHandle::finish((CA::ShapeHandle *)&v77, (const int *)v50);
                goto LABEL_93;
              }
LABEL_91:
              unint64_t v50 = v47;
              goto LABEL_92;
            }
            int8x16_t v44 = v78;
          }
          int v56 = v53 - 2;
          *int8x16_t v44 = v46;
          int32x4_t v57 = v44 + 2;
          uint64_t v78 = v44 + 2;
          v44[1] = 0;
          int32x4_t v58 = (int *)(v45 + 8);
          int32x2_t v59 = v48 + 2;
          if (v54 && v53 != 2)
          {
            int v60 = 0;
            while (1)
            {
              unsigned int v61 = *v58;
              unsigned int v62 = *v59;
              int v63 = *v58 - *v59;
              if (*v58 <= (int)*v59)
              {
                int v64 = v60 ^ 1;
                ++v58;
                --v54;
                if (v63 < 0)
                {
                  unsigned int v62 = v61;
                  goto LABEL_67;
                }
              }
              else
              {
                int v64 = v60;
              }
              v64 ^= 2u;
              ++v59;
              --v56;
LABEL_67:
              if ((v60 - 1) < 2 != (v64 - 1) < 2)
              {
                *v57++ = v62;
                uint64_t v78 = v57;
              }
              if (v54)
              {
                int v60 = v64;
                if (v56) {
                  continue;
                }
              }
              break;
            }
          }
          if (v54) {
            int v56 = v54;
          }
          if (v56)
          {
            if (!v54) {
              int32x4_t v58 = (int *)v59;
            }
            do
            {
              unsigned int v65 = *v58++;
              *v57++ = v65;
              --v56;
            }
            while (v56);
            uint64_t v78 = v57;
          }
          unsigned int v66 = v79;
          uint64_t v67 = v80;
          unint64_t v68 = (unint64_t)((char *)v57 - (char *)v79) >> 2;
          v79[1] = v68;
          if (v67 && *((_DWORD *)v67 + 1) == v68)
          {
            uint64_t v69 = 2;
            while (v68 != v69)
            {
              unsigned int v70 = v66[v69];
              int v71 = *(_DWORD *)&v67[4 * v69++];
              if (v70 != v71) {
                goto LABEL_85;
              }
            }
            uint64_t v78 = v66;
            int32x4_t v57 = v66;
          }
          else
          {
LABEL_85:
            uint64_t v79 = v57;
            __int16 v80 = (char *)v66;
          }
          unsigned int v46 = *(_DWORD *)v50;
          int8x16_t v44 = v57;
          double v49 = (unsigned int *)v47;
          if (*(_DWORD *)v50 == 0x7FFFFFFF) {
            goto LABEL_91;
          }
        }
        LODWORD(v52) = *(_DWORD *)(v45 + 4);
LABEL_56:
        uint64_t v53 = (int)v49[1];
        unint64_t v47 = (unint64_t)&v49[v53];
        uint8x8_t v48 = v49;
        unsigned int v46 = *v49;
        goto LABEL_57;
      }
    }
    else if (*(_DWORD *)(v40 + 4) != 6)
    {
      long long v75 = 0u;
      long long v76 = 0u;
      long long v74 = 0u;
      CA::Shape::operator=((uint64_t)&v74, &v73);
      if (*(_DWORD *)(v40 + 4) == 6)
      {
        uint64_t v42 = &v74;
LABEL_44:
        unint64_t v43 = CA::Shape::ref((unint64_t)v42);
LABEL_93:
        unint64_t v72 = v43;
        CA::Shape::unref((CA::Shape *)v40);
        *int v39 = v72;
        return;
      }
      goto LABEL_42;
    }
    unint64_t v43 = CA::Shape::new_shape((unsigned int *)&v73);
    goto LABEL_93;
  }
  *((_DWORD *)this + 6) = 8;
  int8x16_t v30 = (CA::Shape *)*((void *)this + 2);
  if (v30)
  {
LABEL_39:
    CA::Shape::unref(v30);
    *((void *)this + 2) = 0;
  }
}

uint64_t layer_can_disable_allows_group_blending(CALayer *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ([(CALayer *)a1 allowsGroupBlending]
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    && (long long v14 = 0u,
        long long v15 = 0u,
        long long v12 = 0u,
        long long v13 = 0u,
        id v2 = flattened_sublayers(a1),
        (uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v11 count:16]) != 0))
  {
    uint64_t v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v2);
        }
        double v8 = flattened_compositing_filter(*(CALayer **)(*((void *)&v12 + 1) + 8 * v7));
        if (v8)
        {
          float64x2_t v9 = v8;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_17;
          }
          if (destructive_blend_modes(void)::once != -1) {
            dispatch_once(&destructive_blend_modes(void)::once, &__block_literal_global_15744);
          }
          if ([(id)destructive_blend_modes(void)::modes containsObject:v9]) {
            goto LABEL_17;
          }
          char v5 = 1;
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v11 count:16];
    }
    while (v4);
  }
  else
  {
LABEL_17:
    char v5 = 0;
  }
  return v5 & 1;
}

id flattened_sublayers(CALayer *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = objc_opt_new();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v3 = [(CALayer *)a1 sublayers];
  uint64_t v4 = [(NSArray *)v3 countByEnumeratingWithState:&v11 objects:v10 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = *(CALayer **)(*((void *)&v11 + 1) + 8 * v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v2 addObjectsFromArray:flattened_sublayers(v8)];
        }
        else {
          [v2 addObject:v8];
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [(NSArray *)v3 countByEnumeratingWithState:&v11 objects:v10 count:16];
    }
    while (v5);
  }
  return v2;
}

__CFString *flattened_compositing_filter(CALayer *a1)
{
  id v2 = [(CALayer *)a1 compositingFilter];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = (__CFString *)[(__CFString *)v2 type];
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_15;
  }
  if ([(__CFString *)v2 isEqualToString:@"normalBlendMode"])
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    if (([(__CFString *)v2 isEqualToString:@"sourceOver"] & 1) == 0)
    {
      if (v2)
      {
        uint64_t v3 = v2;
        if ([(NSArray *)[(CALayer *)a1 filters] count]) {
          goto LABEL_15;
        }
      }
    }
  }
  if ([(NSArray *)[(CALayer *)a1 filters] count] != 1) {
    return v3;
  }
  id v4 = [(NSArray *)[(CALayer *)a1 filters] firstObject];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = @"vibrantColorMatrix";
    if (objc_msgSend((id)objc_msgSend(v4, "type"), "isEqualToString:", @"vibrantColorMatrix")) {
      return v3;
    }
    uint64_t v3 = @"vibrantDark";
    if (objc_msgSend((id)objc_msgSend(v4, "type"), "isEqualToString:", @"vibrantDark")) {
      return v3;
    }
    uint64_t v3 = @"vibrantLight";
    if (objc_msgSend((id)objc_msgSend(v4, "type"), "isEqualToString:", @"vibrantLight")) {
      return v3;
    }
  }
LABEL_15:
  uint64_t v6 = (void *)MEMORY[0x1E4F1CA98];

  return (__CFString *)[v6 null];
}

uint64_t ___Z23destructive_blend_modesv_block_invoke()
{
  uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"clear", @"copy", @"sourceIn", @"sourceOut", @"sourceAtop", @"dest", @"destOver", @"destIn", @"destOut", @"destAtop", @"xor", @"subtractS", @"subtractD", @"multiply", 0);
  destructive_blend_modes(void)::modes = result;
  return result;
}

uint64_t layer_can_push_blending(CALayer *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t result = (uint64_t)flattened_compositing_filter(a1);
    if (!result) {
      return result;
    }
    uint64_t v3 = result;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (destructive_blend_modes(void)::once != -1) {
        dispatch_once(&destructive_blend_modes(void)::once, &__block_literal_global_15744);
      }
      if (([(id)destructive_blend_modes(void)::modes containsObject:v3] & 1) == 0)
      {
        while (a1)
        {
          id v4 = flattened_sublayers(a1);
          uint64_t result = [v4 count];
          if (!result) {
            return result;
          }
          if ((unint64_t)[v4 count] > 1) {
            return 1;
          }
          a1 = (CALayer *)[v4 firstObject];
          uint64_t v5 = flattened_compositing_filter(a1);
          uint64_t result = 0;
          if (v5) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

BOOL layer_can_disable_group_opacity(CALayer *a1)
{
  BOOL result = [(CALayer *)a1 allowsGroupOpacity];
  if (result)
  {
    [(CALayer *)a1 opacity];
    if (v3 == 1.0) {
      return 0;
    }
    [(CALayer *)a1 opacity];
    return v4 != 0.0
        && ![(CALayer *)a1 isHidden]
        && [(NSArray *)[(CALayer *)a1 sublayers] count] > 1;
  }
  return result;
}

BOOL layer_has_background_filters(CALayer *a1)
{
  return [(NSArray *)[(CALayer *)a1 backgroundFilters] count] != 0;
}

BOOL layer_is_simple_shape(CALayer *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  [(CALayer *)a1 strokeStart];
  if (v2 != 0.0) {
    return 0;
  }
  [(CALayer *)a1 strokeEnd];
  if (v3 != 1.0) {
    return 0;
  }
  uint64_t v5 = (const CGPath *)[(CALayer *)a1 path];
  return (CGPathIsRectWithTransform() & 1) != 0
      || (CGPathIsRoundedRectWithTransform() & 1) != 0
      || (CGPathIsEllipseWithTransform() & 1) != 0
      || cgpath_is_uibezierpath_rounded_rect(v5);
}

BOOL cgpath_is_uibezierpath_rounded_rect(const CGPath *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (CGPathGetNumberOfElements() != 22 || CGPathGetNumberOfPoints() != 46) {
    return 0;
  }
  v9[0] = 0;
  v9[1] = v9;
  _DWORD v9[2] = 0x2020000000;
  int v10 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZL35cgpath_is_uibezierpath_rounded_rectPK6CGPath_block_invoke;
  block[3] = &unk_1E527E688;
  block[4] = &v5;
  block[5] = v9;
  CGPathApplyWithBlock(a1, block);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(v9, 8);
  return v2;
}

void sub_184916F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL35cgpath_is_uibezierpath_rounded_rectPK6CGPath_block_invoke(uint64_t result, int *a2)
{
  if (*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    int v2 = *a2;
    uint64_t v3 = *(void *)(*(void *)(result + 40) + 8);
    uint64_t v4 = *(int *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 1;
    if (v2 != cgpath_is_uibezierpath_rounded_rect(CGPath const*)::types[v4]) {
      *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
  }
  return result;
}

CALayer *layer_has_simple_shape_masking(CALayer *a1)
{
  BOOL result = [(CALayer *)a1 mask];
  if (result)
  {
    int v2 = result;
    if (![(NSArray *)[(CALayer *)result sublayers] count]
      && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
      && (![(CALayer *)v2 strokeColor]
       || CGColorGetAlpha((CGColorRef)[(CALayer *)v2 strokeColor]) == 0.0))
    {
      uint64_t v3 = (const CGPath *)[(CALayer *)v2 path];
      if ((CGPathIsRectWithTransform() & 1) != 0
        || (CGPathIsRoundedRectWithTransform() & 1) != 0
        || (CGPathIsEllipseWithTransform() & 1) != 0)
      {
        return (CALayer *)1;
      }
      else
      {
        return (CALayer *)cgpath_is_uibezierpath_rounded_rect(v3);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t layer_has_simple_background_masking(CALayer *a1)
{
  uint64_t result = [(CALayer *)a1 mask];
  if (result)
  {
    int v2 = (void *)result;
    if (objc_msgSend((id)objc_msgSend((id)result, "sublayers"), "count")) {
      return 0;
    }
    uint64_t result = [v2 isMemberOfClass:objc_opt_class()];
    if (result)
    {
      uint64_t result = [v2 backgroundColor];
      if (result)
      {
        if (!CGColorGetPattern((CGColorRef)[v2 backgroundColor]))
        {
          uint64_t v3 = 0;
          while (1)
          {
            uint64_t v4 = off_1E527E658[v3];
            uint64_t v5 = [v2 valueForKey:v4];
            unint64_t v6 = +[CALayer defaultValueForKey:v4];
            if (![(__CFString *)v4 isEqualToString:@"shadowOpacity"]
              || ([(id)v5 floatValue], v7 != 0.0))
            {
              if (![(__CFString *)v4 isEqualToString:@"borderWidth"]
                || ([(id)v5 floatValue], v8 != 0.0))
              {
                if (([(id)v5 isEqual:v6] & 1) == 0 && v5 | v6) {
                  break;
                }
              }
            }
            ++v3;
            uint64_t result = 1;
            if (v3 == 5) {
              return result;
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL layer_has_dynamic_shadow(CALayer *a1)
{
  [(CALayer *)a1 shadowOpacity];
  return v2 != 0.0
      && ![(CALayer *)a1 shadowPathIsBounds]
      && ![(CALayer *)a1 shadowPath]
      && CGColorGetAlpha([(CALayer *)a1 shadowColor]) != 0.0;
}

_DWORD *CA::CG::FocusRingStyle::copy(CA::CG::FocusRingStyle *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v3 = malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1ED029D48;
    int v5 = *((_DWORD *)this + 3);
    v3[2] = 0;
    v3[3] = v5;
    *((void *)v3 + 2) = CGStyleRetain();
    long long v6 = *(_OWORD *)((char *)this + 56);
    long long v7 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(v4 + 10) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(v4 + 6) = v7;
    *(_OWORD *)(v4 + 14) = v6;
    v4[18] = *((_DWORD *)this + 18);
    double v4[2] = 1;
    *(void *)uint64_t v4 = &unk_1ED0286E0;
    *(void *)(v4 + 19) = *(void *)((char *)this + 76);
    v4[21] = *((_DWORD *)this + 21);
  }
  return v4;
}

uint64_t CA::CG::FocusRingStyle::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1);
}

double *CA::CG::FocusRingStyle::expand_layer_roi(CA::CG::FocusRingStyle *this, CA::Rect *a2)
{
  double v2 = (float)(-1.0 - floorf(*((float *)this + 19) + 0.5));
  return CA::BoundsImpl::inset((double *)a2, v2, v2);
}

float CA::CG::FocusRingStyle::matrix_changed(CA::CG::FocusRingStyle *this)
{
  uint64_t Data = CGStyleGetData();
  float v3 = *((double *)this + 6) * *((double *)this + 3) + *((double *)this + 5) * *((double *)this + 4);
  if (v3 < 0.0) {
    float v3 = -v3;
  }
  float v4 = sqrtf(v3);
  if (v3 != 1.0) {
    float v3 = v4;
  }
  float result = fmax(*(double *)(Data + 24) * v3, 0.0);
  *((float *)this + 19) = result;
  return result;
}

void CA::CG::FocusRingStyle::~FocusRingStyle(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED029D48;
  CA::CG::Renderer::release_object(this[2], a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  *this = (CA::CG::Renderer *)&unk_1ED029D48;
  CA::CG::Renderer::release_object(this[2], a2);
}

uint64_t paced_keyframe(double *a1, int a2, double a3, double *a4)
{
  uint64_t v4 = (a2 - 1);
  if (a2 < 1)
  {
    LODWORD(v4) = 0;
    double v12 = 0.0;
    double v9 = INFINITY;
  }
  else
  {
    uint64_t v5 = a2;
    double v6 = 0.0;
    long long v7 = a1;
    do
    {
      double v8 = *v7++;
      double v6 = v8 + v6;
      --v5;
    }
    while (v5);
    double v9 = 1.0 / v6;
    if (a2 < 2)
    {
      LODWORD(v4) = 0;
      double v12 = 0.0;
    }
    else
    {
      uint64_t v10 = 0;
      double v11 = v6 * a3;
      double v12 = 0.0;
      while (1)
      {
        double v13 = a1[v10] + v12;
        if (v13 > v11) {
          break;
        }
        ++v10;
        double v12 = v13;
        if (v4 == v10)
        {
          double v12 = v13;
          goto LABEL_12;
        }
      }
      LODWORD(v4) = v10;
    }
  }
LABEL_12:
  double v14 = v12 * v9;
  a4[1] = v12 * v9;
  double v15 = (a1[v4] + v12) * v9;
  a4[2] = v15;
  if (v4) {
    double v16 = (v12 - a1[(v4 - 1)]) * v9;
  }
  else {
    double v16 = -(v15 + v14 * -2.0);
  }
  *a4 = v16;
  if ((int)v4 + 1 >= a2) {
    double v17 = -(v14 + v15 * -2.0);
  }
  else {
    double v17 = (a1[v4] + v12 + a1[(v4 + 1)]) * v9;
  }
  a4[3] = v17;
  return v4;
}

void setupHermiteInterpolator(CAKeyframeAnimation *a1, CA::Render::ValueInterpolator *a2, int a3, const double *a4)
{
  double v8 = [(CAKeyframeAnimation *)a1 tensionValues];
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  if (v8)
  {
    double v12 = v8;
    unint64_t v13 = [(NSArray *)v8 count];
    if (v13 > a3)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v12, "objectAtIndex:", a3), "doubleValue");
      double v10 = v14;
    }
    if (a3 + 1 < v13)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v12, "objectAtIndex:", a3 + 1), "doubleValue");
      double v11 = v15;
    }
  }
  double v16 = [(CAKeyframeAnimation *)a1 continuityValues];
  double v17 = 0.0;
  if (v16)
  {
    int32x4_t v18 = v16;
    unint64_t v19 = [(NSArray *)v16 count];
    if (v19 > a3)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v18, "objectAtIndex:", a3), "doubleValue");
      double v9 = v20;
    }
    if (a3 + 1 < v19)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v18, "objectAtIndex:", a3 + 1), "doubleValue");
      double v17 = v21;
    }
  }
  int8x16_t v22 = [(CAKeyframeAnimation *)a1 biasValues];
  if (v22)
  {
    int8x16_t v23 = v22;
    unint64_t v24 = [(NSArray *)v22 count];
    double v25 = 0.0;
    double v26 = 0.0;
    if (v24 > a3)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v23, "objectAtIndex:", a3), "doubleValue");
      double v26 = v27;
    }
    if (a3 + 1 < v24)
    {
      objc_msgSend(-[NSArray objectAtIndex:](v23, "objectAtIndex:", a3 + 1), "doubleValue");
      double v25 = v28;
    }
  }
  else
  {
    double v26 = 0.0;
    double v25 = 0.0;
  }
  CA::Render::ValueInterpolator::set_hermite(a2, a4[1] - *a4, a4[2] - a4[1], a4[3] - a4[2], v10, v9, v26, v11, v17, v25);
}

uint64_t applyValueFunction(CAValueFunction *a1, objc_object *a2, CAPropertyAnimation *a3, objc_object *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = [(CAValueFunction *)a1 inputCount];
  if (v8 >= 0x10) {
    uint64_t v9 = 16;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = [(CAValueFunction *)a1 outputCount];
  unint64_t v11 = v10;
  memset(&v27[6], 0, 32);
  if (v10 >= 0x10) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = v10;
  }
  memset(v27, 0, 96);
  if (v9)
  {
    if (v9 == 1)
    {
      [(objc_object *)a2 doubleValue];
      *(void *)&v27[0] = v13;
    }
    else
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        objc_msgSend((id)-[objc_object objectAtIndex:](a2, "objectAtIndex:", i), "doubleValue");
        *((void *)v27 + i) = v15;
      }
    }
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  v18[0] = a3;
  v18[1] = a4;
  [(CAValueFunction *)a1 apply:v27 result:&v19 parameterFunction:functionParam context:v18];
  if (v12 == 2) {
    return [MEMORY[0x1E4F29238] valueWithPoint:v19];
  }
  if (v12 == 1) {
    return [NSNumber numberWithDouble:*(double *)&v19];
  }
  if (v11 < 0x10) {
    return 0;
  }
  v17[0] = v19;
  v17[1] = v20;
  v17[2] = v21;
  v17[3] = v22;
  v17[4] = v23;
  v17[5] = v24;
  v17[6] = v25;
  v17[7] = v26;
  return [MEMORY[0x1E4F29238] valueWithCATransform3D:v17];
}

double functionParam(int a1, NSString *a2, id *a3)
{
  if (a1)
  {
    if (a1 != 1) {
      return 0.0;
    }
    ++a3;
  }
  uint64_t v5 = objc_msgSend(*a3, "valueForKeyPath:", a2, v3);
  [v5 doubleValue];
  return result;
}

uint64_t set_layer_transform(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = (void *)[MEMORY[0x1E4F29238] valueWithBytes:a2 objCType:"{CATransform3D=dddddddddddddddd}"];
  if (a3) {
    uint64_t v5 = objc_msgSend(v5, "CA_addValue:multipliedBy:", objc_msgSend(a1, "valueForKey:", @"transform"), 1);
  }

  return [a1 setValue:v5 forKey:@"transform"];
}

double *CA::Render::ValueInterpolator::mix_n<double>(double *result, uint64_t a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  for (; a2; --a2)
  {
    double v7 = *a5++;
    double v8 = v7;
    double v9 = *a6++;
    double v10 = v9;
    if (a4)
    {
      double v11 = *a4++;
      double v12 = v11;
      if (!a7) {
        goto LABEL_6;
      }
    }
    else
    {
      double v12 = -(v10 + v8 * -2.0);
      if (!a7)
      {
LABEL_6:
        double v14 = -(v8 + v10 * -2.0);
        goto LABEL_7;
      }
    }
    double v13 = *a7++;
    double v14 = v13;
LABEL_7:
    *a3++ = result[2] * v8
          + result[3] * (result[10] * (v8 - v12) + result[11] * (v10 - v8))
          + result[4] * v10
          + result[5] * (result[12] * (v10 - v8) + result[13] * (v14 - v10));
  }
  return result;
}

void sub_18491A524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uint *a9)
{
  if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
  }
  if (a9 && atomic_fetch_add(a9 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a9 + 16))(a9);
  }
  if (v10 && atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
  }
  if (v9)
  {
    if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
    }
  }
  _Unwind_Resume(exception_object);
}

IMP cons_CAAnimation_kCAValueCornerRadii(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    uint64_t v3 = &__block_descriptor_36_e67__CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16__0_8l;
    uint64_t v4 = ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    uint64_t v3 = &__block_descriptor_36_e70_v80__0_8_CACornerRadii__CGSize_dd__CGSize_dd__CGSize_dd__CGSize_dd__16l;
    uint64_t v4 = ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

void ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke(uint64_t a1@<X0>, CA::Transaction *a2@<X1>, CA::Mat4Impl *a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  CAAnimation_getter(a2, v4, (const CGAffineTransform *)0x19, a3);
}

void ___ZL36cons_CAAnimation_kCAValueCornerRadiijb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  long long v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  long long v6 = a3[3];
  v7[2] = a3[2];
  v7[3] = v6;
  CAAnimation_setter(a2, v4, 25, (unsigned __int8 *)v7);
}

IMP cons_CAAnimation_kCAValuePoint3D(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    uint64_t v3 = &__block_descriptor_36_e22__CAPoint3D_ddd_16__0_8l;
    int v4 = ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    uint64_t v3 = &__block_descriptor_36_e25_v40__0_8_CAPoint3D_ddd_16l;
    int v4 = ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  double v5[3] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  memset(v5, 0, 24);
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x18, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL32cons_CAAnimation_kCAValuePoint3Djb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  v7[3] = *MEMORY[0x1E4F143B8];
  long long v6 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)double v7 = a3;
  *(double *)&v7[1] = a4;
  *(double *)&v7[2] = a5;
  CAAnimation_setter(a2, v6, 24, (unsigned __int8 *)v7);
}

IMP cons_CAAnimation_kCAValueAffineTransform(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e33__CGAffineTransform_dddddd_16__0_8l;
    int v4 = ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e36_v64__0_8_CGAffineTransform_dddddd_16l;
    int v4 = ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

void ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke(uint64_t a1@<X0>, CA::Transaction *a2@<X1>, CA::Mat4Impl *a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  CAAnimation_getter(a2, v4, (const CGAffineTransform *)0x17, a3);
}

void ___ZL40cons_CAAnimation_kCAValueAffineTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  long long v5 = a3[1];
  v6[0] = *a3;
  v6[1] = v5;
  v6[2] = a3[2];
  CAAnimation_setter(a2, v4, 23, (unsigned __int8 *)v6);
}

IMP cons_CAAnimation_kCAValueTransform(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e39__CATransform3D_dddddddddddddddd_16__0_8l;
    int v4 = ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e43_v144__0_8_CATransform3D_dddddddddddddddd_16l;
    int v4 = ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

void ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke(uint64_t a1@<X0>, CA::Transaction *a2@<X1>, CA::Mat4Impl *a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  CAAnimation_getter(a2, v4, (const CGAffineTransform *)0x16, a3);
}

void ___ZL34cons_CAAnimation_kCAValueTransformjb_block_invoke_2(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  long long v5 = a3[5];
  v9[4] = a3[4];
  v9[5] = v5;
  long long v6 = a3[7];
  v9[6] = a3[6];
  v9[7] = v6;
  long long v7 = a3[1];
  v9[0] = *a3;
  v9[1] = v7;
  long long v8 = a3[3];
  _DWORD v9[2] = a3[2];
  void v9[3] = v8;
  CAAnimation_setter(a2, v4, 22, (unsigned __int8 *)v9);
}

IMP cons_CAAnimation_kCAValueRect(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e39__CGRect__CGPoint_dd__CGSize_dd__16__0_8l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e42_v48__0_8_CGRect__CGPoint_dd__CGSize_dd__16l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  memset(v5, 0, sizeof(v5));
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x15, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL29cons_CAAnimation_kCAValueRectjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  long long v7 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)long long v8 = a3;
  *(double *)&v8[1] = a4;
  *(double *)&void v8[2] = a5;
  *(double *)&v8[3] = a6;
  CAAnimation_setter(a2, v7, 21, (unsigned __int8 *)v8);
}

IMP cons_CAAnimation_kCAValueSize(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e18__CGSize_dd_16__0_8l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e21_v32__0_8_CGSize_dd_16l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  _OWORD v5[2] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x14, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL29cons_CAAnimation_kCAValueSizejb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  long long v5 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)uint64_t v6 = a3;
  *(double *)&v6[1] = a4;
  CAAnimation_setter(a2, v5, 20, (unsigned __int8 *)v6);
}

IMP cons_CAAnimation_kCAValuePoint(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e19__CGPoint_dd_16__0_8l;
    int v4 = ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e22_v32__0_8_CGPoint_dd_16l;
    int v4 = ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  _OWORD v5[2] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x13, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL30cons_CAAnimation_kCAValuePointjb_block_invoke_2(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  long long v5 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)uint64_t v6 = a3;
  *(double *)&v6[1] = a4;
  CAAnimation_setter(a2, v5, 19, (unsigned __int8 *)v6);
}

IMP cons_CAAnimation_kCAValueDouble(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_d16__0_8l;
    int v4 = ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v24__0_8d16l;
    int v4 = ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

double ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)v5);
  return *(double *)v5;
}

void ___ZL31cons_CAAnimation_kCAValueDoublejb_block_invoke_2(uint64_t a1, uint64_t a2, double a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  *(double *)long long v5 = a3;
  CAAnimation_setter(a2, v4, 18, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueFloat(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_f16__0_8l;
    int v4 = ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8f16l;
    int v4 = ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

float ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  float v5 = 0.0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x11, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL30cons_CAAnimation_kCAValueFloatjb_block_invoke_2(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  float v5 = a3;
  CAAnimation_setter(a2, v4, 17, (unsigned __int8 *)&v5);
}

IMP cons_CAAnimation_kCAValueUnsignedLongLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_Q16__0_8l;
    int v4 = ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v24__0_8Q16l;
    int v4 = ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0x10, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL41cons_CAAnimation_kCAValueUnsignedLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 16, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueLongLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_q16__0_8l;
    int v4 = ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v24__0_8q16l;
    int v4 = ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xF, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL33cons_CAAnimation_kCAValueLongLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 15, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueUnsignedLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_Q16__0_8l;
    int v4 = ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v24__0_8Q16l;
    int v4 = ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xE, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL37cons_CAAnimation_kCAValueUnsignedLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 14, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueLong(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_q16__0_8l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v24__0_8q16l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xD, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL29cons_CAAnimation_kCAValueLongjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 13, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueUnsignedInt(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_I16__0_8l;
    int v4 = ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8I16l;
    int v4 = ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  unsigned int v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xC, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL36cons_CAAnimation_kCAValueUnsignedIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  int v5 = a3;
  CAAnimation_setter(a2, v4, 12, (unsigned __int8 *)&v5);
}

IMP cons_CAAnimation_kCAValueInt(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_i16__0_8l;
    int v4 = ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8i16l;
    int v4 = ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  unsigned int v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xB, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL28cons_CAAnimation_kCAValueIntjb_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  int v5 = a3;
  CAAnimation_setter(a2, v4, 11, (unsigned __int8 *)&v5);
}

IMP cons_CAAnimation_kCAValueUnsignedShort(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_S16__0_8l;
    int v4 = ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8S16l;
    int v4 = ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  unsigned __int16 v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)0xA, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL38cons_CAAnimation_kCAValueUnsignedShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  __int16 v5 = a3;
  CAAnimation_setter(a2, v4, 10, (unsigned __int8 *)&v5);
}

IMP cons_CAAnimation_kCAValueShort(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_s16__0_8l;
    int v4 = ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8s16l;
    int v4 = ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  __int16 v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)9, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL30cons_CAAnimation_kCAValueShortjb_block_invoke_2(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  __int16 v5 = a3;
  CAAnimation_setter(a2, v4, 9, (unsigned __int8 *)&v5);
}

IMP cons_CAAnimation_kCAValueUnsignedChar(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_C16__0_8l;
    int v4 = ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8C16l;
    int v4 = ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  unsigned __int8 v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)8, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL37cons_CAAnimation_kCAValueUnsignedCharjb_block_invoke_2(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  unsigned __int8 v5 = a3;
  CAAnimation_setter(a2, v4, 8, &v5);
}

IMP cons_CAAnimation_kCAValueChar(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_c16__0_8l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8c16l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  char v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)7, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL29cons_CAAnimation_kCAValueCharjb_block_invoke_2(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  unsigned __int8 v5 = a3;
  CAAnimation_setter(a2, v4, 7, &v5);
}

IMP cons_CAAnimation_kCAValueBool(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e8_B16__0_8l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e11_v20__0_8B16l;
    int v4 = ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  unsigned __int8 v5 = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)6, (CA::Mat4Impl *)&v5);
  return v5;
}

void ___ZL29cons_CAAnimation_kCAValueBooljb_block_invoke_2(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  unsigned __int8 v5 = a3;
  CAAnimation_setter(a2, v4, 6, &v5);
}

IMP cons_CAAnimation_kCAValueBlock(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    int v4 = ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    int v4 = ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)5, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL30cons_CAAnimation_kCAValueBlockjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 5, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueCopiedPointer(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    int v4 = ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    int v4 = ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)3, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL38cons_CAAnimation_kCAValueCopiedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 3, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueRetainedPointer(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    int v4 = ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    int v4 = ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)2, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL40cons_CAAnimation_kCAValueRetainedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 2, (unsigned __int8 *)v5);
}

IMP cons_CAAnimation_kCAValueAssignedPointer(int a1, int a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    double v2 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    int v3 = &__block_descriptor_36_e10_r_v16__0_8l;
    int v4 = ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke;
  }
  else
  {
    double v2 = v6;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    int v3 = &__block_descriptor_36_e13_v24__0_8r_v16l;
    int v4 = ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke_2;
  }
  _OWORD v2[2] = v4;
  v2[3] = v3;
  *((_DWORD *)v2 + 8) = a1;
  return imp_implementationWithBlock(v2);
}

uint64_t ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)1, (CA::Mat4Impl *)v5);
  return v5[0];
}

void ___ZL40cons_CAAnimation_kCAValueAssignedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  int v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 1, (unsigned __int8 *)v5);
}

CA::Shape **CA::WindowServer::Server::render_surface(CA::WindowServer::Display **this, CA::Render::Update *a2, CA::WindowServer::Surface *a3, const CA::Bounds *a4, unsigned int a5, int a6)
{
  double result = (CA::Shape **)CA::WindowServer::Server::sw_renderer((CA::WindowServer::Server *)this);
  if (result)
  {
    double v13 = (CA::OGL::Renderer *)result;
    *(_DWORD *)((char *)this[12] + 745) |= 0x80u;
    uint64_t v14 = CA::WindowServer::Display::render_surface(this[12], result, a3, a2, a4, a5, a6);
    CA::OGL::Renderer::collect(v13, a2, *((double *)a2 + 9));
    return (CA::Shape **)v14;
  }
  return result;
}

uint64_t CA::WindowServer::Server::sw_renderer(CA::WindowServer::Server *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 25))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    int v3 = (CA::OGL::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x5010uLL, 0x743898A5uLL);
    int v4 = v3;
    if (v3)
    {
      bzero(v3, 0x5010uLL);
      CA::OGL::Context::Context(v4);
      *(void *)int v4 = &unk_1ED02C7F0;
    }
    *((void *)this + 24) = v4;
    unsigned __int8 v5 = (malloc_zone_t *)get_malloc_zone();
    uint64_t v6 = malloc_type_zone_malloc(v5, 0x68uLL, 0x8BB15036uLL);
    long long v7 = v6;
    if (v6)
    {
      uint64_t v8 = *((void *)this + 24);
      v6[1] = 0;
      v6[2] = 0;
      *uint64_t v6 = v8;
      v6[6] = malloc_type_malloc(0x40000uLL, 0xA44586FDuLL);
      v7[7] = 0;
      *((_DWORD *)v7 + 24) = 1;
      *((_WORD *)v7 + 50) = 0;
    }
    *((void *)this + 25) = v7;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v9 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_ERROR, "CoreAnimation: Software renderer! Simulating crash!\n", buf, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v10 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_FAULT, "CoreAnimation: Failed to initialize Metal or OpenGLES contexts!", v15, 2u);
      }
    }
  }
  uint64_t v11 = *((void *)this + 24);
  int v12 = *((_DWORD *)this + 46);
  int v13 = *(_DWORD *)(v11 + 224);
  *(_DWORD *)(v11 + 224) = v12;
  *(_DWORD *)(v11 + 432) = global_feature_flags | v12;
  if (((v13 ^ v12) & 0x2000200) != 0) {
    CA::OGL::Context::update_color_program_cache(v11);
  }
  return *((void *)this + 25);
}

CA::Shape **CA::WindowServer::Server::render_update(CA::WindowServer::Display **this, CA::Render::Update *a2, unsigned int *a3)
{
  double result = (CA::Shape **)CA::WindowServer::Server::sw_renderer((CA::WindowServer::Server *)this);
  if (result)
  {
    uint64_t v6 = result;
    *(_DWORD *)((char *)this[12] + 745) |= 0x80u;
    long long v7 = this[12];
    return (CA::Shape **)CA::WindowServer::Display::render_display(v7, v6, a2);
  }
  return result;
}

uint64_t CA::WindowServer::Server::update_delay(CA::WindowServer::Server *this, float *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v4 = 990057071;
  uint64_t result = CA::WindowServer::Display::benchmark_mode((CA::WindowServer::Display *)&v4, a2);
  if ((result & 1) == 0) {
    return (*(uint64_t (**)(void))(**((void **)this + 12) + 744))(*((void *)this + 12));
  }
  return result;
}

uint64_t CA::WindowServer::Server::renderer(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::run_loop(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::set_enabled(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 224))();
}

void CA::WindowServer::Server::timer_callback(CA::WindowServer::Server *this, double a2, void *a3)
{
  void v8[5] = *MEMORY[0x1E4F143B8];
  int v4 = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::Server *, void *, double))(*(void *)this + 384))(this, a3, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (const void *)*MEMORY[0x1E4F1D418];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = ___ZN2CA12WindowServer6Server14timer_callbackEdPv_block_invoke;
    v8[3] = &__block_descriptor_tmp_19_16466;
    v8[4] = this;
    CFRunLoopPerformBlock(v4, v6, v8);
    CFRunLoopWakeUp(v5);
  }
  else
  {
    uint64_t v7 = mach_absolute_time();
    CATimeWithHostTime(v7);
    CA::WindowServer::Server::render_for_time((uint64_t)this);
  }
}

void ___ZN2CA12WindowServer6Server14timer_callbackEdPv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = mach_absolute_time();
  CATimeWithHostTime(v2);

  CA::WindowServer::Server::render_for_time(v1);
}

void CA::WindowServer::print_layer_trees(uint64_t a1, int a2, double a3)
{
  char v3 = a2;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2) {
    x_log_begin();
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 != a1)
  {
    int v7 = 0;
    do
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        double v9 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)long long v22 = v7;
          *(_WORD *)&v22[4] = 2048;
          *(double *)&v22[6] = a3;
          _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "\n** Render #%d tree at time %f **\n\n", buf, 0x12u);
        }
      }
      CA::Render::show_object(*(CA::Render **)(v6 + 32), v8);
      uint64_t v6 = *(void *)(v6 + 8);
      ++v7;
    }
    while (v6 != a1);
  }
  if ((v3 & 1) == 0) {
    return;
  }
  long long v20 = (void **)x_stream_pop_(0);
  uint64_t v10 = x_stream_get(v20);
  int v11 = 0;
  while (2)
  {
    uint64_t v12 = 0;
    int v13 = &v10[v11];
    int v14 = -1;
    while (1)
    {
      if (v13[v12] == 10)
      {
        int v14 = v12;
        goto LABEL_17;
      }
      if (!v13[v12]) {
        break;
      }
LABEL_17:
      ++v12;
      unsigned int v15 = 32512;
      if (v12 == 32512) {
        goto LABEL_18;
      }
    }
    unsigned int v15 = v12;
LABEL_18:
    if (v14 <= -1 || v13[v15] == 0) {
      int v17 = v15;
    }
    else {
      int v17 = v14 + 1;
    }
    if (v17 > 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int32x4_t v18 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          if (v11) {
            long long v19 = "continued...\n";
          }
          else {
            long long v19 = "";
          }
          *(void *)long long v22 = v19;
          *(_WORD *)&v22[8] = 1040;
          *(_DWORD *)&v22[10] = v17;
          __int16 v23 = 2080;
          long long v24 = &v10[v11];
          _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_INFO, "%s%.*s", buf, 0x1Cu);
        }
      }
      v11 += v17;
      continue;
    }
    break;
  }
  x_log_end_free_(v20);
}

os_log_t ___ZN2CA12WindowServer6Server19server_stall_handleEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "WindowServer.Stalls");
  CA::WindowServer::Server::server_stall_handle(void)::handle = (uint64_t)result;
  return result;
}

void X::small_vector_base<X::Ref<CA::Render::Context>>::grow(uint64_t a1, unint64_t a2)
{
  char v3 = *(atomic_uint ***)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(atomic_uint ***)(a1 + 16);
  unint64_t v6 = (*(void *)(a1 + 24) + 1) | ((unint64_t)(*(void *)(a1 + 24) + 1) >> 1);
  unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  unint64_t v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = a2;
  }
  int v11 = malloc_type_malloc(8 * v10, 0x2004093837F09uLL);
  uint64_t v12 = v11;
  int v13 = *(atomic_uint ***)a1;
  int v14 = *(atomic_uint ***)(a1 + 8);
  if (*(atomic_uint ***)a1 != v14)
  {
    unsigned int v15 = (atomic_uint **)v11;
    double v16 = *(atomic_uint ***)a1;
    do
    {
      *v15++ = *v16;
      *v16++ = 0;
    }
    while (v16 != v14);
    do
    {
      int v17 = *v13;
      if (*v13 && atomic_fetch_add(v17 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v17 + 16))(v17);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  if (v3 != v5) {
    free(*(void **)a1);
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = (char *)v12 + v4 - (void)v3;
  *(void *)(a1 + 24) = v10;
}

uint64_t CA::Render::UpdateDelegate::should_decontainer_layer(CA::Render::UpdateDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  return 0;
}

uint64_t CA::Render::UpdateDelegate::update_layer(CA::Render::UpdateDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  return 1;
}

void CA::WindowServer::anonymous namespace'::RenderDisplayDelegate::~RenderDisplayDelegate(CA::WindowServer::_anonymous_namespace_::RenderDisplayDelegate *this)
{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x185323DC0);
}

{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

BOOL CA::WindowServer::anonymous namespace'::ExcludeDelegate::can_include_context(CA::WindowServer::_anonymous_namespace_::ExcludeDelegate *this, CA::Render::Context *a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)this + 1, *((_DWORD *)a2 + 4)) == 0;
}

void CA::WindowServer::anonymous namespace'::ExcludeDelegate::~ExcludeDelegate(CA::WindowServer::_anonymous_namespace_::ExcludeDelegate *this)
{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x185323DC0);
}

{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

os_log_t ___ZN2CA12WindowServer15server_perf_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "WindowServer.Performance");
  CA::WindowServer::server_perf_log(void)::log = (uint64_t)result;
  return result;
}

void CA::WindowServer::Server::~Server(CA::WindowServer::Server *this)
{
  CA::WindowServer::Server::~Server(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  CA::Shape *v2;
  CA::Render::HitTestTree *v3;
  void *v4;
  malloc_zone_t *malloc_zone;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  malloc_zone_t *v10;
  void *v11;
  malloc_zone_t *v12;
  const void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  *(void *)this = &unk_1ED026670;
  if (!*((unsigned char *)this + 513)) {
    __assert_rtn("~Server", "windowserver-server.cpp", 578, "_shutdown_called");
  }
  uint64_t v2 = (CA::Shape *)*((void *)this + 22);
  if (v2) {
    CA::Shape::unref(v2);
  }
  char v3 = (CA::Render::HitTestTree *)*((void *)this + 41);
  if (v3) {
    CA::Render::HitTestTree::unref(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 25);
  if (v4)
  {
    CA::OGL::Renderer::~Renderer(*((CA::OGL::Renderer **)this + 25));
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v4);
  }
  unint64_t v6 = *((void *)this + 24);
  if (v6)
  {
    (*(void (**)(void, uint64_t))(*(void *)v6 + 224))(*((void *)this + 24), 1);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  unint64_t v7 = (const void *)*((void *)this + 13);
  if (v7) {
    CFRelease(v7);
  }
  unint64_t v8 = *((void *)this + 12);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 12) = 0;
  if (*((void *)this + 15))
  {
    unint64_t v9 = (void *)*((void *)this + 14);
    unint64_t v10 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v10, v9);
  }
  if (*((void *)this + 18))
  {
    int v11 = (void *)*((void *)this + 17);
    uint64_t v12 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v12, v11);
  }
  int v13 = (const void *)*((void *)this + 39);
  if (v13) {
    CFRelease(v13);
  }
  int v14 = (void *)*((void *)this + 59);
  if (v14)
  {
    [*((id *)this + 59) invalidate];
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  unsigned int v15 = (void *)*((void *)this + 60);
  if (v15)
  {
    double v16 = (void *)*((void *)this + 61);
    int v17 = (void *)*((void *)this + 60);
    if (v16 != v15)
    {
      do
      {
        v16 -= 25;
        std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(v16);
      }
      while (v16 != v15);
      int v17 = (void *)*((void *)this + 60);
    }
    *((void *)this + 61) = v15;
    operator delete(v17);
  }
}

void std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2 != (void *)a1[19]) {
    free(v2);
  }
  char v3 = (void *)a1[9];
  if (v3 != (void *)a1[11])
  {
    free(v3);
  }
}

uint64_t CA::WindowServer::Server::displayed_surface(CA::WindowServer::Server *this)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 12) + 480))(*((void *)this + 12), 1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 160);
    return v2();
  }
  return result;
}

uint64_t CA::WindowServer::Server::previous_vbl(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::vbl_delta(CA::WindowServer::Server *this)
{
  return 0;
}

double CA::WindowServer::Server::next_wakeup_time(CA::WindowServer::Server *this)
{
  return 0.0;
}

void *CA::WindowServer::Server::shutdown(CA::WindowServer::Server *this)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*((unsigned char *)this + 513))
  {
    return (void *)pthread_mutex_unlock(v2);
  }
  else
  {
    *((unsigned char *)this + 513) = 1;
    pthread_mutex_unlock(v2);
    v15[1] = 0;
    v15[2] = 0;
    v15[0] = 0x7FF0000000000000;
    (*(void (**)(CA::WindowServer::Server *, void *, double))(*(void *)this + 184))(this, v15, 0.0);
    CA::Render::remove_observer(1u, 0, (uint64_t)CA::WindowServer::Server::context_created, (uint64_t)this);
    CA::Render::remove_observer(0xCu, 0, (uint64_t)CA::WindowServer::Server::ping_server, (uint64_t)this);
    CA::Render::remove_observer(0x13u, 0, (uint64_t)CA::WindowServer::Server::render_display, (uint64_t)this);
    CA::Render::remove_observer(0x14u, 0, (uint64_t)CA::WindowServer::Server::render_display_layer, (uint64_t)this);
    CA::Render::remove_observer(0x15u, 0, (uint64_t)CA::WindowServer::Server::render_display_context_list, (uint64_t)this);
    CA::Render::remove_observer(0x1Au, 0, (uint64_t)CA::WindowServer::Server::get_displays, (uint64_t)this);
    CA::Render::remove_observer(0x1Bu, 0, (uint64_t)CA::WindowServer::Server::get_display_info, (uint64_t)this);
    CA::Render::remove_observer(0x1Cu, 0, (uint64_t)CA::WindowServer::Server::get_display_edr_state, (uint64_t)this);
    CA::Render::remove_observer(0x1Du, 0, (uint64_t)CA::WindowServer::Server::get_display_logical_bounds, (uint64_t)this);
    CA::Render::remove_observer(0x1Eu, 0, (uint64_t)CA::WindowServer::Server::get_display_auto_luminance_boost, (uint64_t)this);
    CA::Render::remove_observer(0x20u, 0, (uint64_t)CA::WindowServer::Server::set_display_properties, (uint64_t)this);
    CA::Render::remove_observer(0x22u, 0, (uint64_t)CA::WindowServer::Server::set_display_user_prefs, (uint64_t)this);
    CA::Render::remove_observer(0x23u, 0, (uint64_t)CA::WindowServer::Server::set_display_latency, (uint64_t)this);
    CA::Render::remove_observer(0x2Fu, 0, (uint64_t)CA::WindowServer::Server::display_changed, (uint64_t)this);
    CA::Render::remove_observer(0x26u, 0, (uint64_t)CA::WindowServer::Server::purge_server, (uint64_t)this);
    CA::Render::remove_observer(0x27u, 0, (uint64_t)CA::WindowServer::Server::set_ax_matrix, (uint64_t)this);
    CA::Render::remove_observer(0x30u, 0, (uint64_t)CA::WindowServer::Server::get_debug_log, (uint64_t)this);
    CA::Render::remove_observer(0x28u, 0, (uint64_t)CA::WindowServer::Server::get_update_histograms, (uint64_t)this);
    CA::Render::remove_observer(0x29u, 0, (uint64_t)CA::WindowServer::Server::get_od_statistics, (uint64_t)this);
    CA::Render::remove_observer(0x2Du, 0, (uint64_t)CA::WindowServer::Server::get_performance_info, (uint64_t)this);
    if ((*(_DWORD *)(*((void *)this + 12) + 624) & 0x40) != 0)
    {
      CA::Render::remove_observer(0xDu, 0, (uint64_t)CA::WindowServer::Server::flipbook_render, (uint64_t)this);
      CA::Render::remove_observer(0xEu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_frame, (uint64_t)this);
      CA::Render::remove_observer(0xFu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_memory_usage, (uint64_t)this);
      CA::Render::remove_observer(0x10u, 0, (uint64_t)CA::WindowServer::Server::flipbook_copy_current_frame, (uint64_t)this);
      CA::Render::remove_observer(0x11u, 0, (uint64_t)CA::WindowServer::Server::flipbook_cancel, (uint64_t)this);
      CA::Render::remove_observer(0x12u, 0, (uint64_t)CA::WindowServer::Server::flipbook_modify, (uint64_t)this);
    }
    CA::Render::remove_observer(0x34u, 0, (uint64_t)CA::WindowServer::Server::get_surface_replaceability, (uint64_t)this);
    CA::Render::remove_observer(0x3Fu, 0, (uint64_t)CA::WindowServer::Server::content_stream_state_changed, (uint64_t)this);
    CA::Render::remove_observer(0x40u, 0, (uint64_t)CA::WindowServer::Server::content_stream_modified, (uint64_t)this);
    CA::Render::remove_observer(0x41u, 0, (uint64_t)CA::WindowServer::Server::get_display_state_shmem, (uint64_t)this);
    CA::Render::remove_observer(0x42u, 0, (uint64_t)CA::WindowServer::Server::set_display_state, (uint64_t)this);
    if ((*(_WORD *)(*((void *)this + 12) + 656) & 0x1C00) != 0) {
      CA::Render::remove_observer(0x3Cu, 0, (uint64_t)CA::WindowServer::Server::get_active_display_count, (uint64_t)this);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
    uint64_t v4 = CA::Render::Server::_callback_list;
    if (CA::Render::Server::_callback_list)
    {
      char v5 = 0;
      unint64_t v6 = &CA::Render::Server::_callback_list;
      do
      {
LABEL_11:
        unint64_t v7 = (uint64_t *)v4;
        if (*(void (**)(CA::WindowServer::Server *, double, void *))(v4 + 24) == CA::WindowServer::Server::timer_callback)
        {
          while ((CA::WindowServer::Server *)v7[4] == this)
          {
            *unint64_t v6 = *v7;
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(malloc_zone, v7);
            unint64_t v7 = (uint64_t *)*v6;
            if (!*v6) {
              goto LABEL_18;
            }
            char v5 = 1;
            if ((void (*)(CA::WindowServer::Server *, double, void *))v7[3] != CA::WindowServer::Server::timer_callback)
            {
              uint64_t v4 = *v7;
              unint64_t v6 = (uint64_t *)*v6;
              if (*v7) {
                goto LABEL_11;
              }
LABEL_18:
              os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
              goto LABEL_19;
            }
          }
        }
        uint64_t v4 = *v7;
        unint64_t v6 = v7;
      }
      while (*v7);
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
      if (v5) {
LABEL_19:
      }
        CA::Render::Server::kick_server(v14);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
    }
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, this, @"kCADebugOptionsDidChange", 0);
    os_unfair_lock_lock((os_unfair_lock_t)this + 4);
    if (*((void *)this + 16))
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        CA::WindowServer::Server::remove_observers(this, *(CA::Render::Context **)(*((void *)this + 14) + v10));
        ++v11;
        v10 += 16;
      }
      while (v11 < *((void *)this + 16));
    }
    *((void *)this + 16) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 4);
    CA::WindowServer::Server::destroy_blank_context(this);
    os_unfair_lock_lock((os_unfair_lock_t)this + 80);
    uint64_t v12 = (const void *)*((void *)this + 1);
    if (v12)
    {
      _Block_release(v12);
      *((void *)this + 1) = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 80);
    int v13 = (const void *)*((void *)this + 31);
    if (v13)
    {
      _Block_release(v13);
      *((void *)this + 31) = 0;
    }
    CA::WindowServer::Server::set_pre_post_power_callback((uint64_t)this, 0);
    return CA::WindowServer::Server::set_pre_post_flipbook_callback((uint64_t)this, 0);
  }
}

atomic_uint *CA::WindowServer::Server::destroy_blank_context(CA::WindowServer::Server *this)
{
  uint64_t result = (atomic_uint *)*((void *)this + 21);
  if (result)
  {
    CA::Render::Context::destroy((CA::Render::Context *)result);
    uint64_t result = (atomic_uint *)*((void *)this + 21);
    if (result)
    {
      if (atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1) {
        uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 16))(result);
      }
    }
    *((void *)this + 21) = 0;
  }
  return result;
}

void CA::WindowServer::Server::remove_observers(CA::WindowServer::Server *this, CA::Render::Context *a2)
{
  CA::Render::remove_observer(2u, (uint64_t)a2, (uint64_t)CA::WindowServer::Server::context_deleted, (uint64_t)this);
  CA::Render::remove_observer(0, (uint64_t)a2, (uint64_t)CA::WindowServer::Server::context_changed, (uint64_t)this);

  CA::Render::remove_observer(8u, (uint64_t)a2, (uint64_t)CA::WindowServer::Server::context_ordered, (uint64_t)this);
}

void *CA::WindowServer::Server::set_pre_post_power_callback(uint64_t a1, const void *a2)
{
  uint64_t result = *(void **)(a1 + 264);
  if (result != a2)
  {
    _Block_release(result);
    uint64_t result = _Block_copy(a2);
    *(void *)(a1 + 264) = result;
  }
  return result;
}

void *CA::WindowServer::Server::set_pre_post_flipbook_callback(uint64_t a1, const void *a2)
{
  uint64_t result = *(void **)(a1 + 272);
  if (result != a2)
  {
    _Block_release(result);
    uint64_t result = _Block_copy(a2);
    *(void *)(a1 + 272) = result;
  }
  return result;
}

void CA::WindowServer::Server::context_ordered(CA::WindowServer::Server *this, CA::Render::Object *a2, CFDictionaryRef theDict, void *a4)
{
  uint64_t v7 = *((void *)a2 + 12);
  if ((*(_DWORD *)(v7 + 624) & 4) != 0)
  {
    for (uint64_t i = *(void **)(v7 + 40); i; uint64_t i = (void *)i[1])
    {
      if (*(void *)(*i + 144) >= 2uLL) {
        *(unsigned char *)(*i + 516) = 1;
      }
    }
  }
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, @"siblingId");
    if (!Value) {
      return;
    }
    unsigned int v10 = CA_CFIntValue(Value);
    unint64_t v11 = CFDictionaryGetValue(theDict, @"above");
    if (v11) {
      BOOL v12 = CA_CFBoolValue(v11);
    }
    else {
      BOOL v12 = 0;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    long long v19 = malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
    long long v20 = v19;
    if (v19)
    {
      *long long v19 = &unk_1ED026620;
      v19[2] = this;
      v19[3] = v10;
      *((unsigned char *)v19 + 32) = v12;
    }
    int v17 = (os_unfair_lock_s *)((char *)a2 + 152);
    os_unfair_lock_lock((os_unfair_lock_t)a2 + 38);
    v20[1] = *((void *)a2 + 20);
    *((void *)a2 + 20) = v20;
  }
  else
  {
    int v13 = (malloc_zone_t *)get_malloc_zone();
    int v14 = malloc_type_zone_malloc(v13, 0x20uLL, 0x8BB15036uLL);
    unsigned int v15 = v14;
    if (v14)
    {
      int v16 = *((_DWORD *)this + 48);
      v14[2] = this;
      *int v14 = &unk_1ED026648;
      *((_DWORD *)v14 + 6) = v16;
    }
    int v17 = (os_unfair_lock_s *)((char *)a2 + 152);
    os_unfair_lock_lock((os_unfair_lock_t)a2 + 38);
    v15[1] = *((void *)a2 + 20);
    *((void *)a2 + 20) = v15;
  }

  os_unfair_lock_unlock(v17);
}

void CA::WindowServer::Server::PendingOrderAbove::run(CA::WindowServer::Server::PendingOrderAbove *this, os_unfair_lock_s *a2)
{
  char v3 = (CA::Render::Context *)*((void *)this + 2);
  uint64_t v4 = *((void *)this + 3);
  int v5 = *((unsigned __int8 *)this + 32);
  if (!v4 || v4 != *((_DWORD *)v3 + 4))
  {
    os_unfair_lock_lock(a2 + 4);
    uint64_t v6 = *(void *)&a2[32]._os_unfair_lock_opaque;
    if (!v6) {
      goto LABEL_41;
    }
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)&a2[28]._os_unfair_lock_opaque;
    unint64_t v9 = (CA::Render::Context **)v8;
    while (*v9 != v3)
    {
      ++v7;
      v9 += 2;
      if (v6 == v7) {
        goto LABEL_41;
      }
    }
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_41;
    }
    float v10 = *(float *)(v8 + 16 * v7 + 8);
    uint64_t v11 = *(void *)&a2[32]._os_unfair_lock_opaque;
    if ((int)v6 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = (float *)(v8 + 8);
      while (v10 > *v13)
      {
        ++v12;
        v13 += 4;
        if (v11 == v12)
        {
          uint64_t v12 = *(void *)&a2[32]._os_unfair_lock_opaque;
          break;
        }
      }
    }
    int v14 = v6 & ((int)v6 >> 31);
    unsigned int v15 = (float *)(v8 + 16 * v11 - 8);
    uint64_t v16 = *(void *)&a2[32]._os_unfair_lock_opaque;
    while (1)
    {
      BOOL v17 = __OFSUB__(v16, 1);
      LODWORD(v16) = v16 - 1;
      if ((int)v16 < 0 != v17) {
        break;
      }
      float v18 = *v15;
      v15 -= 4;
      if (v10 >= v18)
      {
        int v14 = v16 + 1;
        break;
      }
    }
    if (v5) {
      int v19 = v14;
    }
    else {
      int v19 = v12;
    }
    if (v4)
    {
      if ((int)v6 >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)&a2[28]._os_unfair_lock_opaque;
        while (v4 != *(_DWORD *)(*(void *)v21 + 16))
        {
          ++v20;
          v21 += 16;
          if (v11 == v20) {
            goto LABEL_29;
          }
        }
        int v19 = v20 + v5;
      }
LABEL_29:
      if (v19 > (int)v12) {
        LODWORD(v12) = v19;
      }
      if ((int)v12 >= v14) {
        int v19 = v14;
      }
      else {
        int v19 = v12;
      }
    }
    if (v19 == v7 || v19 == v7 + 1)
    {
LABEL_41:
      os_unfair_lock_unlock(a2 + 4);
    }
    else
    {
      if ((int)v6 + ~v7 >= 1)
      {
        memmove((void *)(v8 + 16 * v7), (const void *)(v8 + 16 * v7 + 16), 16 * (v6 + ~v7));
        uint64_t v6 = *(void *)&a2[32]._os_unfair_lock_opaque;
      }
      *(void *)&a2[32]._os_unfair_lock_opaque = v6 - 1;
      CA::WindowServer::Server::context_insert((CA::WindowServer::Server *)a2, v19 - (v19 > (int)v7), v3, v10);
      os_unfair_lock_unlock(a2 + 4);
      CA::WindowServer::Server::invalidate_context(a2, v3);
    }
  }
}

void CA::WindowServer::Server::context_insert(CA::WindowServer::Server *this, unint64_t a2, CA::Render::Context *a3, float a4)
{
  unint64_t v8 = *((void *)this + 15);
  unint64_t v7 = *((void *)this + 16);
  if (v7 >= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = *((void *)this + 16);
  }
  if (v7 + 1 > v8)
  {
    unint64_t v10 = v8 + 2;
    if ((v8 + 2) >> 60)
    {
      uint64_t v12 = 0;
      if (!v9)
      {
LABEL_13:
        int v14 = (float *)&v12[16 * v9];
        *(void *)int v14 = a3;
        v14[2] = a4;
        unint64_t v15 = *((void *)this + 16);
        BOOL v16 = v15 > v9;
        unint64_t v17 = v15 - v9;
        if (v16) {
          memcpy(v14 + 4, (const void *)(*((void *)this + 14) + 16 * v9), 16 * v17);
        }
        float v18 = (void *)*((void *)this + 14);
        if (v18)
        {
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v18);
        }
        *((void *)this + 14) = v12;
        *((void *)this + 15) = v10;
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v11 = (malloc_zone_t *)get_malloc_zone();
      uint64_t v12 = (char *)malloc_type_zone_malloc(v11, 16 * v10, 0x8BB15036uLL);
      if (!v9) {
        goto LABEL_13;
      }
    }
    memcpy(v12, *((const void **)this + 14), 16 * v9);
    goto LABEL_13;
  }
  if (v7 > a2) {
    memmove((void *)(*((void *)this + 14) + 16 * v9 + 16), (const void *)(*((void *)this + 14) + 16 * v9), 16 * (v7 - v9));
  }
  uint64_t v13 = *((void *)this + 14) + 16 * v9;
  *(void *)uint64_t v13 = a3;
  *(float *)(v13 + 8) = a4;
LABEL_19:
  ++*((void *)this + 16);
}

void CA::WindowServer::Server::invalidate_context(os_unfair_lock_s *this, CA::Render::Context *a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)a2 + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 72));
  uint64_t v5 = CA::Render::Context::root_layer_handle(a2);
  if (v5)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (const CA::Shape *)CA::Shape::new_shape((unsigned int *)(v5 + 112));
    *(void *)(v6 + 96) |= 2uLL;
    pthread_mutex_unlock(v4);
    if (v7)
    {
      CA::WindowServer::Server::invalidate(this, v7);
      CA::Shape::unref(v7);
    }
  }
  else
  {
    pthread_mutex_unlock(v4);
  }
}

void CA::WindowServer::Server::PendingOrderAbove::~PendingOrderAbove(CA::WindowServer::Server::PendingOrderAbove *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

void CA::WindowServer::Server::PendingOrderLevel::run(CA::WindowServer::Server::PendingOrderLevel *this, os_unfair_lock_s *a2)
{
  char v3 = (CA::Render::Context *)*((void *)this + 2);
  float v4 = *((float *)this + 6);
  uint64_t v5 = a2 + 4;
  os_unfair_lock_lock(a2 + 4);
  size_t v6 = *(void *)&a2[32]._os_unfair_lock_opaque;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(float **)&a2[28]._os_unfair_lock_opaque;
    unint64_t v9 = v8;
    while (*(CA::Render::Context **)v9 != v3)
    {
      ++v7;
      v9 += 4;
      if (v6 == v7) {
        goto LABEL_8;
      }
    }
    if ((v7 & 0x80000000) == 0) {
      v8[4 * v7 + 2] = v4;
    }
LABEL_8:
    if (v6 >= 2)
    {
      float v10 = v8[6];
      if (v10 < v8[2])
      {
LABEL_15:
        mergesort(v8, v6, 0x10uLL, (int (__cdecl *)(const void *, const void *))CA::WindowServer::Server::compare_levels);
        os_unfair_lock_unlock(v5);
        CA::WindowServer::Server::invalidate_context(a2, v3);
        return;
      }
      uint64_t v11 = v8 + 10;
      uint64_t v12 = 2;
      while (v6 != v12)
      {
        size_t v13 = v12;
        float v14 = *v11;
        v11 += 4;
        ++v12;
        BOOL v15 = v14 < v10;
        float v10 = v14;
        if (v15)
        {
          if (v13 >= v6) {
            break;
          }
          goto LABEL_15;
        }
      }
    }
  }

  os_unfair_lock_unlock(v5);
}

unint64_t CA::WindowServer::Server::compare_levels(CA::WindowServer::Server *this, float *a2, const void *a3)
{
  return (__PAIR64__(*((float *)this + 2) > a2[2], *((_DWORD *)this + 2)) - *((unsigned int *)a2 + 2)) >> 32;
}

void CA::WindowServer::Server::PendingOrderLevel::~PendingOrderLevel(CA::WindowServer::Server::PendingOrderLevel *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

void CA::WindowServer::Server::context_deleted(CA::WindowServer::Server *this, os_unfair_lock_s *a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  size_t v6 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  unint64_t v7 = *((void *)this + 71);
  if (v7) {
    unint64_t v8 = (CA::Shape *)CA::Shape::ref(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  pthread_mutex_unlock(v6);
  os_unfair_lock_lock(a2 + 38);
  float v10 = a2 + 40;
  uint64_t v9 = *(void *)&a2[40]._os_unfair_lock_opaque;
  if (v9)
  {
    do
    {
      if (*(CA::WindowServer::Server **)(v9 + 16) == this)
      {
        *(void *)&v10->_os_unfair_lock_opaque = *(void *)(v9 + 8);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      else
      {
        float v10 = (os_unfair_lock_s *)(v9 + 8);
      }
      uint64_t v9 = *(void *)&v10->_os_unfair_lock_opaque;
    }
    while (*(void *)&v10->_os_unfair_lock_opaque);
  }
  os_unfair_lock_unlock(a2 + 38);
  os_unfair_lock_lock(a2 + 4);
  uint64_t v12 = *(void *)&a2[32]._os_unfair_lock_opaque;
  if (!v12) {
    goto LABEL_21;
  }
  uint64_t v13 = 0;
  float v14 = *(CA::WindowServer::Server ***)&a2[28]._os_unfair_lock_opaque;
  while (*v14 != this)
  {
    ++v13;
    v14 += 2;
    if (v12 == v13) {
      goto LABEL_21;
    }
  }
  if ((v13 & 0x80000000) != 0)
  {
LABEL_21:
    CA::WindowServer::Server::remove_observers((CA::WindowServer::Server *)a2, this);
    os_unfair_lock_unlock(a2 + 4);
    if (v8) {
      CA::Shape::unref(v8);
    }
    *((_DWORD *)this + 3) &= ~0x200u;
    CA::Render::Context::set_display_id(this, 0);
    if (*((void *)this + 75))
    {
      *((void *)this + 75) = 0;
      if (*((_DWORD *)this + 64)) {
        *((_DWORD *)this + 3) |= 0x400000u;
      }
    }
  }
  else
  {
    if ((int)v12 + ~v13 >= 1)
    {
      memmove((void *)(*(void *)&a2[28]._os_unfair_lock_opaque + 16 * v13), (const void *)(*(void *)&a2[28]._os_unfair_lock_opaque + 16 * v13 + 16), 16 * (v12 + ~v13));
      uint64_t v12 = *(void *)&a2[32]._os_unfair_lock_opaque;
    }
    *(void *)&a2[32]._os_unfair_lock_opaque = v12 - 1;
    if (v8)
    {
      BOOL v15 = (CA::Shape **)&a2[44];
      if (!*(void *)&a2[44]._os_unfair_lock_opaque) {
        *BOOL v15 = (CA::Shape *)1;
      }
      CA::shape_union(v15, (CA::Shape **)v8, v11);
      CA::WindowServer::Server::remove_observers((CA::WindowServer::Server *)a2, this);
      os_unfair_lock_unlock(a2 + 4);
      CA::Shape::unref(v8);
    }
    else
    {
      CA::WindowServer::Server::remove_observers((CA::WindowServer::Server *)a2, this);
      os_unfair_lock_unlock(a2 + 4);
    }
    *((_DWORD *)this + 3) &= ~0x200u;
    CA::Render::Context::set_display_id(this, 0);
    if (*((void *)this + 75))
    {
      *((void *)this + 75) = 0;
      if (*((_DWORD *)this + 64)) {
        *((_DWORD *)this + 3) |= 0x400000u;
      }
    }
    uint64_t v16 = 0;
    int64x2_t v17 = vdupq_n_s64(4uLL);
    (*(void (**)(os_unfair_lock_s *, uint64_t *, double))(*(void *)&a2->_os_unfair_lock_opaque + 184))(a2, &v16, 0.0);
  }
}

uint64_t CA::WindowServer::Server::set_display_state(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  if (*(_DWORD *)a3 == *(_DWORD *)(*((void *)a2 + 12) + 24)) {
    return CA::WindowServer::Server::set_display_state((uint64_t)a2, a3[8], a3[9], *((_DWORD *)a3 + 1));
  }
  return result;
}

uint64_t CA::WindowServer::Server::set_display_state(uint64_t a1, unsigned int a2, char a3, mach_port_t a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  CA::WindowServer::Display::flush_display_state_change_reply(*(void *)(a1 + 96));
  if (*(unsigned char *)(a1 + 512))
  {
    if (!a4) {
      return pthread_mutex_unlock(v8);
    }
    LOBYTE(v9) = 4;
    goto LABEL_101;
  }
  float v10 = (os_unfair_lock_s *)(*(void *)(a1 + 96) + 716);
  os_unfair_lock_lock(v10);
  uint64_t v11 = *(unsigned __int8 **)(*(void *)(a1 + 96) + 728);
  kdebug_trace();
  if (x_log_hook_p())
  {
    unint64_t v12 = *v11;
    if (v12 > 0xB) {
      uint64_t v13 = "unknown";
    }
    else {
      uint64_t v13 = off_1E5273AC0[v12];
    }
    uint64_t v58 = *(unsigned int *)(*(void *)(a1 + 96) + 24);
    int32x2_t v59 = v13;
    x_log_();
  }
  else
  {
    float v14 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v22 = *v11;
      if (v22 > 0xB) {
        __int16 v23 = "unknown";
      }
      else {
        __int16 v23 = off_1E5273AC0[v22];
      }
      unint64_t v24 = v11[1];
      if (v24 > 0xB) {
        uint64_t v25 = "unknown";
      }
      else {
        uint64_t v25 = off_1E5273AC0[v24];
      }
      int v26 = *(_DWORD *)(*(void *)(a1 + 96) + 24);
      if (a2 > 0xB) {
        double v27 = "unknown";
      }
      else {
        double v27 = off_1E5273AC0[a2];
      }
      LODWORD(buf[0]) = 67109890;
      HIDWORD(buf[0]) = v26;
      LOWORD(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 2) = v23;
      WORD1(buf[2]) = 2080;
      *(void *)((char *)&buf[2] + 4) = v25;
      WORD2(buf[3]) = 2080;
      *(void *)((char *)&buf[3] + 6) = v27;
      _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "Server::set_display_state display_id=%u current_state=%s target_state=%s new_target_state=%s", (uint8_t *)buf, 0x26u);
    }
  }
  if (a2 > 0xA) {
    goto LABEL_21;
  }
  uint64_t v28 = *(_DWORD **)(a1 + 96);
  float64x2_t v29 = (unsigned char *)*((void *)v28 + 91);
  unsigned int v30 = a2;
  if (a2 < 5) {
    goto LABEL_51;
  }
  if ((a2 - 5) <= 1u)
  {
    int v31 = (a2 == 5) ^ (v29[1] != 1);
    if (v31) {
      unsigned int v30 = 1;
    }
    else {
      unsigned int v30 = a2;
    }
    if (a2 == 5 && v31)
    {
      if ((*(uint64_t (**)(_DWORD *))(*(void *)v28 + 320))(v28))
      {
        unsigned int v30 = 3;
      }
      else if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 304))(*(void *)(a1 + 96)))
      {
        unsigned int v30 = 2;
      }
      else
      {
        unsigned int v30 = 0;
      }
    }
    if ((v31 & 1) == 0)
    {
      int v9 = 0;
      goto LABEL_86;
    }
    goto LABEL_51;
  }
  if ((a2 - 7) <= 1u)
  {
    if ((v28[156] & 0x40) == 0) {
      goto LABEL_21;
    }
    if ((a2 == 7) != (*(unsigned int (**)(_DWORD *))(*(void *)v28 + 304))(v28))
    {
      (*(void (**)(void, BOOL))(**(void **)(a1 + 96) + 312))(*(void *)(a1 + 96), a2 == 7);
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 328))(*(void *)(a1 + 96), 0, v32, v33);
      if (a2 != 7 || v29[1])
      {
        int v9 = 255;
        if (a2 == 7 || (v29[1] & 0xFE) != 2) {
          goto LABEL_86;
        }
        unsigned int v30 = 0;
        goto LABEL_51;
      }
LABEL_114:
      unsigned int v30 = 2;
      if (*v29 != 1)
      {
LABEL_80:
        int8x16_t v44 = *(uint64_t **)(a1 + 96);
        if ((v44[78] & 0x40) != 0)
        {
          v29[1] = v30;
          uint64_t v45 = *v44;
          if (*v29 != 1)
          {
            int v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *))(v45 + 2136))(v44, v15, v16, v17, v18, v19, v20, v21, v58, v59);
            goto LABEL_86;
          }
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *))(v45 + 1776))(v44, v15, v16, v17, v18, v19, v20, v21, v58, v59))
          {
            *(_DWORD *)(*(void *)(a1 + 96) + 745) |= 0x2000u;
            *(_DWORD *)(*(void *)(a1 + 96) + 745) |= 0x400u;
            CA::WindowServer::Server::invalidate((os_unfair_lock_s *)a1, *(const CA::Shape **)(*(void *)(a1 + 96) + 216));
            buf[0] = 0;
            *(int64x2_t *)&buf[1] = vdupq_n_s64(0x4000000uLL);
            (*(void (**)(uint64_t, void *, double))(*(void *)a1 + 184))(a1, buf, 0.0);
          }
LABEL_84:
          int v9 = 255;
          goto LABEL_86;
        }
LABEL_21:
        int v9 = 5;
        goto LABEL_86;
      }
      goto LABEL_55;
    }
LABEL_53:
    int v9 = 0;
    goto LABEL_86;
  }
  if ((v28[156] & 0x40) == 0) {
    goto LABEL_21;
  }
  if ((a2 == 9) == (*(unsigned int (**)(_DWORD *))(*(void *)v28 + 320))(v28)) {
    goto LABEL_53;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 96) + 304))(*(void *)(a1 + 96)) & 1) == 0 && a2 == 9) {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 96) + 312))(*(void *)(a1 + 96), 1);
  }
  (*(void (**)(void, BOOL))(**(void **)(a1 + 96) + 328))(*(void *)(a1 + 96), a2 == 9);
  int v34 = v29[1];
  if ((v34 | 2) != 2)
  {
    int v9 = 255;
    if (a2 == 9 || v34 != 3) {
      goto LABEL_86;
    }
    goto LABEL_114;
  }
  if (a2 != 9) {
    goto LABEL_84;
  }
  unsigned int v30 = 3;
LABEL_51:
  unsigned int v35 = v29[1];
  if (v35 >= 4) {
    __assert_rtn("set_display_state_locked", "windowserver-server.cpp", 6951, "target_state < kDisplayStateCount");
  }
  if (v35 == v30) {
    goto LABEL_53;
  }
  if (*v29 == 1)
  {
LABEL_55:
    uint64_t v36 = *(void *)(a1 + 96);
    if ((*(unsigned char *)(v36 + 745) & 0x20) != 0)
    {
      int v37 = 0;
      uint64_t v38 = 0;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      memset(buf, 0, sizeof(buf));
      int v39 = *(void **)(v36 + 25400);
      do
      {
        buf[v37] += v39[v38++];
        if (v38 == CA::WindowServer::Server::record_histograms(void)::bucket_upper_bounds[v37]) {
          ++v37;
        }
      }
      while (v38 != 241);
      if (MEMORY[0x1E4F5B210])
      {
        analytics_send_event_lazy();
        int v39 = *(void **)(*(void *)(a1 + 96) + 25400);
      }
      bzero(v39, 0x788uLL);
    }
    if (!*(void *)(a1 + 168)) {
      CA::WindowServer::Server::create_blank_context((CA::WindowServer::Server *)a1);
    }
    CA::WindowServer::Server::notify_content_streams(a1, 5);
    goto LABEL_71;
  }
  if (v30 == 1)
  {
    (*(void (**)(void))(**(void **)(a1 + 96) + 240))(*(void *)(a1 + 96));
    if (*(void *)(a1 + 168)
      && ((*(uint64_t (**)(void))(**(void **)(a1 + 96) + 520))(*(void *)(a1 + 96)) & 1) == 0)
    {
      CA::WindowServer::Server::destroy_blank_context((CA::WindowServer::Server *)a1);
    }
    CA::WindowServer::Server::notify_content_streams(a1, 6);
    BOOL v40 = 0;
    LOBYTE(v30) = 1;
    goto LABEL_72;
  }
LABEL_71:
  BOOL v40 = v30 == 0;
  if (v30 > 1)
  {
    if ((v30 & 0xFE) != 2) {
      goto LABEL_21;
    }
    goto LABEL_80;
  }
LABEL_72:
  int32x2_t v41 = *(CA::Render::Context **)(a1 + 168);
  if (v41)
  {
    CA::Render::Context::will_commit(v41);
    unint64_t v42 = *(void *)(a1 + 168);
    float v43 = -INFINITY;
    if (v40) {
      float v43 = INFINITY;
    }
    if (*(float *)(v42 + 192) != v43)
    {
      *(float *)(v42 + 192) = v43;
      CA::Render::post_notification(8u, v42, 0, 0);
      unint64_t v42 = *(void *)(a1 + 168);
    }
    CA::Render::Context::did_commit(v42, 1, 0, 1, 0, 0);
  }
  v29[1] = v30;
  int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 2136))(*(void *)(a1 + 96));
LABEL_86:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    unsigned int v46 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v47 = *v11;
      if (v47 > 0xB) {
        uint8x8_t v48 = "unknown";
      }
      else {
        uint8x8_t v48 = off_1E5273AC0[v47];
      }
      unint64_t v49 = v11[1];
      if (v49 > 0xB) {
        unint64_t v50 = "unknown";
      }
      else {
        unint64_t v50 = off_1E5273AC0[v49];
      }
      int v51 = *(_DWORD *)(*(void *)(a1 + 96) + 24);
      if ((v9 + 1) > 6u) {
        uint64_t v52 = "unknown";
      }
      else {
        uint64_t v52 = off_1E5273B20[(v9 + 1)];
      }
      LODWORD(buf[0]) = 67109890;
      HIDWORD(buf[0]) = v51;
      LOWORD(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 2) = v48;
      WORD1(buf[2]) = 2080;
      *(void *)((char *)&buf[2] + 4) = v50;
      WORD2(buf[3]) = 2080;
      *(void *)((char *)&buf[3] + 6) = v52;
      _os_log_impl(&dword_184668000, v46, OS_LOG_TYPE_DEFAULT, "Server::set_display_state display_id=%u current_state=%s target_state=%s result=%s", (uint8_t *)buf, 0x26u);
    }
  }
  kdebug_trace();
  os_unfair_lock_unlock(v10);
  if (a4)
  {
    if (v9 == 255)
    {
      uint64_t v56 = *(void *)(a1 + 96);
      CA::WindowServer::Display::flush_display_state_change_reply(v56);
      *(unsigned char *)(v56 + 736) = a2;
      *(unsigned char *)(v56 + 744) = a3;
      *(_DWORD *)(v56 + 740) = a4;
      return pthread_mutex_unlock(v8);
    }
LABEL_101:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v53 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        int v54 = *(_DWORD *)(*(void *)(a1 + 96) + 24);
        if (a2 > 0xB) {
          unsigned int v55 = "unknown";
        }
        else {
          unsigned int v55 = off_1E5273AC0[a2];
        }
        LODWORD(buf[0]) = 67109378;
        HIDWORD(buf[0]) = v54;
        LOWORD(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 2) = v55;
        _os_log_impl(&dword_184668000, v53, OS_LOG_TYPE_DEFAULT, "signal clients display %u state changed to %s", (uint8_t *)buf, 0x12u);
      }
    }
    _CACDisplayDidChangeToState(a4, *(_DWORD *)(*(void *)(a1 + 96) + 24), a2, a3, v9);
    mach_port_deallocate(*MEMORY[0x1E4F14960], a4);
  }
  return pthread_mutex_unlock(v8);
}

void CA::WindowServer::Server::create_blank_context(CA::WindowServer::Server *this)
{
  valuePtr[2] = *(const void **)MEMORY[0x1E4F143B8];
  if (!*((void *)this + 21))
  {
    LODWORD(valuePtr[0]) = *(_DWORD *)(*((void *)this + 12) + 24);
    CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
    valuePtr[0] = @"displayId";
    valuePtr[1] = @"name";
    values[0] = v2;
    values[1] = @"blanking context";
    CFDictionaryRef v3 = CFDictionaryCreate(0, valuePtr, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFRelease(v2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v5 = (CA::Render::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x2E8uLL, 0x743898A5uLL);
    if (v5) {
      uint64_t v5 = CA::Render::Context::Context(v5, v3, 0, 576, 0);
    }
    *((void *)this + 21) = v5;
    CFRelease(v3);
    *(_WORD *)(*((void *)this + 21) + 552) |= 4u;
    size_t v6 = (malloc_zone_t *)get_malloc_zone();
    unint64_t v7 = (CA::Render::Object *)malloc_type_zone_calloc(v6, 1uLL, 0x98uLL, 0x743898A5uLL);
    unint64_t v8 = v7;
    if (v7)
    {
      *((_DWORD *)v7 + 2) = 1;
      *((_DWORD *)v7 + 3) = 29;
      ++dword_1EB2ADE3C;
      *(void *)unint64_t v7 = &unk_1ED02F440;
      *((_DWORD *)v7 + 8) = 16843007;
      *((_DWORD *)v7 + 9) = *((_DWORD *)v7 + 9) & 0x80000000 | 0xF9F11;
      *((void *)v7 + 5) = *((void *)v7 + 5) & 0xFFFF800000000000 | 0x1030C0004C00;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      *((void *)v7 + 12) = 0;
      *((_OWORD *)v7 + 7) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((void *)v7 + 18) = 0;
    }
    *((int64x2_t *)v7 + 4) = vdupq_n_s64(0xC160000000000000);
    *((int64x2_t *)v7 + 5) = vdupq_n_s64(0x4170000000000000uLL);
    *((void *)v7 + 2) = 0;
    *((void *)v7 + 3) = 0x3F80000000000000;
    if (1.0 == 0.0) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 0x40000000000;
    }
    *((void *)v7 + 5) = v9 | *((void *)v7 + 5) & 0xFFFFFBFFFFFFFFFFLL;
    CA::Render::Context::will_commit(*((CA::Render::Context **)this + 21));
    CA::Render::Context::set_object(*((CA::Render::Context **)this + 21), 0x2AuLL, 1u, v8);
    CA::Render::Context::set_layer_id(*((void *)this + 21), 42);
    unint64_t v10 = *((void *)this + 21);
    if (*(float *)(v10 + 192) != -INFINITY)
    {
      *(_DWORD *)(v10 + 192) = -8388608;
      CA::Render::post_notification(8u, v10, 0, 0);
      unint64_t v10 = *((void *)this + 21);
    }
    CA::Render::Context::did_commit(v10, 1, 0, 1, 0, 0);
  }
}

uint64_t CA::WindowServer::Server::notify_content_streams(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v11 = 0u;
  uint64_t result = mach_absolute_time();
  uint64_t v8 = result;
  int v9 = a2;
  size_t v6 = *(unsigned int **)(a1 + 480);
  uint64_t v5 = *(unsigned int **)(a1 + 488);
  while (v6 != v5)
  {
    uint64_t result = (uint64_t)CA::Render::ContentStream::get_or_create_stream_and_lock((CA::Render::ContentStream *)*v6, 0, 0);
    if (result)
    {
      unint64_t v7 = (pthread_mutex_t *)result;
      int v10 = *(_DWORD *)(result + 396);
      CA::Render::ContentStream::produce_surface(result, 0, (uint64_t)&v8, 0);
      uint64_t result = pthread_mutex_unlock(v7);
    }
    v6 += 50;
  }
  return result;
}

xpc_object_t ___ZN2CA12WindowServer6Server17record_histogramsEv_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  for (uint64_t i = 0; i != 128; i += 8)
    xpc_dictionary_set_uint64(v2, *(const char **)(*(void *)(a1 + 32) + i), *(void *)(*(void *)(a1 + 40) + i));
  return v2;
}

void CA::WindowServer::Server::get_display_state_shmem(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v4 = *((void *)a2 + 12);
  if (*(_DWORD *)a3 == *(_DWORD *)(v4 + 24)) {
    a3[1] = *(void *)(v4 + 720);
  }
}

void CA::WindowServer::Server::content_stream_modified(CA::WindowServer::Server *this, CA::Render::Object *a2, int *a3, void *a4)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  size_t v6 = *(unsigned int **)a3;
  if (*(_DWORD *)(*((void *)a2 + 12) + 24) != *(_DWORD *)(*(void *)a3 + 4)) {
    return;
  }
  unint64_t v7 = a3;
  int v8 = *((unsigned __int8 *)v6 + 65);
  int v9 = (CA::Render::ContentStream *)a3[2];
  if (v8 == 2)
  {
    char v10 = CA::Render::ContentStream::destroy_stream(v9, a2, (uint64_t)a3, (int)a4);
    goto LABEL_184;
  }
  stream_and_locuint64_t k = (char *)CA::Render::ContentStream::get_or_create_stream_and_lock(v9, a3[3], *v6);
  if (!stream_and_lock)
  {
    char v10 = 0;
    goto LABEL_184;
  }
  uint64_t v12 = (uint64_t)stream_and_lock;
  long long v143 = v7;
  long long v144 = stream_and_lock;
  BOOL v142 = v8 == 1;
  if (v6[2] != *((_DWORD *)stream_and_lock + 18)
    || *((unsigned __int8 *)v6 + 58) != stream_and_lock[76]
    || v6[3] != *((_DWORD *)stream_and_lock + 20)
    || v6[4] != *((_DWORD *)stream_and_lock + 21)
    || *((unsigned __int8 *)v6 + 59) != stream_and_lock[77]
    || *((unsigned __int8 *)v6 + 60) != stream_and_lock[78])
  {
    LODWORD(v4) = *((_DWORD *)stream_and_lock + 70);
    uint64_t v5 = (__IOSurface *)&CA::callback_timer;
      goto LABEL_189;
    goto LABEL_15;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)stream_and_lock + 40) - *((void *)stream_and_lock + 39)) >> 3)
     - 0x5555555555555555 * ((uint64_t)(*((void *)stream_and_lock + 43) - *((void *)stream_and_lock + 42)) >> 3) != *((unsigned __int16 *)v6 + 28))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float64x2_t v135 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v155 = 0;
        _os_log_impl(&dword_184668000, v135, OS_LOG_TYPE_ERROR, "Inplace modification of queue depth is not supported yet", v155, 2u);
      }
    }
  }
  while (1)
  {
    *(_DWORD *)(v12 + 68) = v6[1];
    *(_DWORD *)(v12 + 124) = v6[13];
    *(unsigned char *)(v12 + 128) = *(unsigned char *)(v12 + 128) & 0xFE | ((*((unsigned char *)v6 + 66) & 2) != 0);
    *(unsigned char *)(v12 + 129) = *((unsigned char *)v6 + 66) & 1;
    *(_OWORD *)(v12 + 88) = *(_OWORD *)(v6 + 5);
    *(_OWORD *)(v12 + 104) = *(_OWORD *)(v6 + 9);
    *(unsigned char *)(v12 + 120) = *((unsigned char *)v6 + 61);
    *(unsigned char *)(v12 + 121) = *((unsigned char *)v6 + 62);
    *(unsigned char *)(v12 + 122) = *((unsigned char *)v6 + 63);
    *(unsigned char *)(v12 + 123) = *((unsigned char *)v6 + 64);
    CGColorSpaceRelease(*(CGColorSpaceRef *)(v12 + 264));
    uint64_t v71 = *(unsigned __int8 *)(v12 + 76);
    v155[0] = 0;
    get_colorspace_map(v155);
    if (v155[0] <= v71) {
      uint64_t v72 = 0;
    }
    else {
      uint64_t v72 = get_colorspace_map(unsigned char *)::space_names[v71];
    }
    if (v72) {
      CFStringRef v73 = (const __CFString *)v72;
    }
    else {
      CFStringRef v73 = (const __CFString *)*MEMORY[0x1E4F1DBE8];
    }
    *(void *)(v12 + 264) = CGColorSpaceCreateWithName(v73);
    long long v74 = *(void **)(v12 + 272);
    if (v74)
    {
      CA::VideoToolbox::~VideoToolbox(*(CFTypeRef **)(v12 + 272));
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v74);
    }
    long long v76 = (malloc_zone_t *)get_malloc_zone();
    float32x4_t v77 = (const void **)malloc_type_zone_calloc(v76, 1uLL, 0x10uLL, 0x743898A5uLL);
    uint64_t v78 = v77;
    if (!v77) {
      goto LABEL_182;
    }
    uint64_t v79 = *(CGColorSpace **)(v12 + 264);
    size_t v6 = (unsigned int *)*(unsigned __int8 *)(v12 + 77);
    *float32x4_t v77 = 0;
    *((unsigned char *)v77 + 8) = 1;
    *(void *)long long buf = 0;
    long long v151 = buf;
    uint64_t v152 = 0x2020000000;
    __int16 v80 = (uint64_t (*)(void, const void **))getVTPixelTransferSessionCreateSymbolLoc(void)::ptr;
    long long v153 = getVTPixelTransferSessionCreateSymbolLoc(void)::ptr;
    if (!getVTPixelTransferSessionCreateSymbolLoc(void)::ptr)
    {
      *(void *)long long v155 = MEMORY[0x1E4F143A8];
      *(void *)&v155[8] = 3221225472;
      *(void *)&long long v156 = ___ZL40getVTPixelTransferSessionCreateSymbolLocv_block_invoke;
      *((void *)&v156 + 1) = &unk_1E5274170;
      *(void *)&long long v157 = buf;
      long long v81 = (void *)VideoToolboxLibrary();
      int v82 = dlsym(v81, "VTPixelTransferSessionCreate");
      *(void *)(*(void *)(v157 + 8) + 24) = v82;
      getVTPixelTransferSessionCreateSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(v157 + 8) + 24);
      __int16 v80 = (uint64_t (*)(void, const void **))*((void *)v151 + 3);
    }
    _Block_object_dispose(buf, 8);
    if (v80)
    {
      int v83 = v80(0, v78);
      if (v83 || (long long v92 = *v78) == 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          float64x2_t v91 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v155 = 67109120;
            *(_DWORD *)&v155[4] = v83;
            _os_log_impl(&dword_184668000, v91, OS_LOG_TYPE_ERROR, "Failed to allocate VTPixelTransferSession: %d", v155, 8u);
          }
        }
LABEL_182:
        *(void *)(v12 + 272) = v78;
        char v10 = 1;
        unint64_t v7 = v143;
        goto LABEL_183;
      }
      *(void *)long long buf = 0;
      long long v151 = buf;
      uint64_t v152 = 0x2020000000;
      __n128 v93 = (const __CFString **)getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr;
      long long v153 = (void *)getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr;
      if (!getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr)
      {
        *(void *)long long v155 = MEMORY[0x1E4F143A8];
        *(void *)&v155[8] = 3221225472;
        *(void *)&long long v156 = ___ZL73getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLocv_block_invoke;
        *((void *)&v156 + 1) = &unk_1E5274170;
        *(void *)&long long v157 = buf;
        float v94 = (void *)VideoToolboxLibrary();
        float64x2_t v95 = dlsym(v94, "kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer");
        *(void *)(*(void *)(v157 + 8) + 24) = v95;
        getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
        __n128 v93 = (const __CFString **)*((void *)v151 + 3);
      }
      _Block_object_dispose(buf, 8);
      if (v93)
      {
        CFStringRef v96 = *v93;
        double v97 = (const void *)*MEMORY[0x1E4F1CFC8];
        VTSessionSetPropertyFunc(v92, v96, (const void *)*MEMORY[0x1E4F1CFC8]);
        uint64_t v4 = (const __CFString **)*v78;
        *(void *)long long buf = 0;
        long long v151 = buf;
        uint64_t v152 = 0x2020000000;
        int32x4_t v98 = (const __CFString **)getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr;
        long long v153 = (void *)getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr;
        if (!getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr)
        {
          *(void *)long long v155 = MEMORY[0x1E4F143A8];
          *(void *)&v155[8] = 3221225472;
          *(void *)&long long v156 = ___ZL68getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLocv_block_invoke;
          *((void *)&v156 + 1) = &unk_1E5274170;
          *(void *)&long long v157 = buf;
          float64x2_t v99 = (void *)VideoToolboxLibrary();
          int8x16_t v100 = dlsym(v99, "kVTPixelTransferPropertyKey_EnableGPUAcceleratedTransfer");
          *(void *)(*(void *)(v157 + 8) + 24) = v100;
          getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
          int32x4_t v98 = (const __CFString **)*((void *)v151 + 3);
        }
        _Block_object_dispose(buf, 8);
        if (v98)
        {
          CFStringRef v101 = *v98;
          float v102 = (const void *)*MEMORY[0x1E4F1CFD0];
          VTSessionSetPropertyFunc(v4, v101, (const void *)*MEMORY[0x1E4F1CFD0]);
          uint64_t v4 = (const __CFString **)*v78;
          *(void *)long long buf = 0;
          long long v151 = buf;
          uint64_t v152 = 0x2020000000;
          uint64_t v12 = getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr;
          long long v153 = (void *)getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr;
          if (!getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr)
          {
            *(void *)long long v155 = MEMORY[0x1E4F143A8];
            *(void *)&v155[8] = 3221225472;
            *(void *)&long long v156 = ___ZL62getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLocv_block_invoke;
            *((void *)&v156 + 1) = &unk_1E5274170;
            *(void *)&long long v157 = buf;
            float32x2_t v103 = (void *)VideoToolboxLibrary();
            long long v104 = dlsym(v103, "kVTPixelTransferPropertyKey_EnableSoftwareTransfer");
            *(void *)(*(void *)(v157 + 8) + 24) = v104;
            getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8)
                                                                                                  + 24);
            uint64_t v12 = *((void *)v151 + 3);
          }
          _Block_object_dispose(buf, 8);
          if (v12)
          {
            VTSessionSetPropertyFunc(v4, *(const __CFString **)v12, v97);
            uint64_t v4 = (const __CFString **)*v78;
            *(void *)long long buf = 0;
            long long v151 = buf;
            uint64_t v152 = 0x2020000000;
            uint64_t v12 = getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr;
            long long v153 = (void *)getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr;
            if (!getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr)
            {
              *(void *)long long v155 = MEMORY[0x1E4F143A8];
              *(void *)&v155[8] = 3221225472;
              *(void *)&long long v156 = ___ZL48getkVTPixelTransferPropertyKey_RealTimeSymbolLocv_block_invoke;
              *((void *)&v156 + 1) = &unk_1E5274170;
              *(void *)&long long v157 = buf;
              long long v105 = (void *)VideoToolboxLibrary();
              uint64_t v106 = dlsym(v105, "kVTPixelTransferPropertyKey_RealTime");
              *(void *)(*(void *)(v157 + 8) + 24) = v106;
              getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
              uint64_t v12 = *((void *)v151 + 3);
            }
            _Block_object_dispose(buf, 8);
            if (v12)
            {
              VTSessionSetPropertyFunc(v4, *(const __CFString **)v12, v102);
              uint64_t v4 = (const __CFString **)*v78;
              *(void *)long long buf = 0;
              long long v151 = buf;
              uint64_t v152 = 0x2020000000;
              uint64_t v12 = getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr;
              long long v153 = (void *)getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr;
              if (!getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr)
              {
                *(void *)long long v155 = MEMORY[0x1E4F143A8];
                *(void *)&v155[8] = 3221225472;
                *(void *)&long long v156 = ___ZL63getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLocv_block_invoke;
                *((void *)&v156 + 1) = &unk_1E5274170;
                *(void *)&long long v157 = buf;
                unsigned int v107 = (void *)VideoToolboxLibrary();
                BOOL v108 = dlsym(v107, "kVTPixelTransferPropertyKey_EnableHighSpeedTransfer");
                *(void *)(*(void *)(v157 + 8) + 24) = v108;
                getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
                uint64_t v12 = *((void *)v151 + 3);
              }
              _Block_object_dispose(buf, 8);
              if (v12)
              {
                VTSessionSetPropertyFunc(v4, *(const __CFString **)v12, v102);
                uint64_t v109 = *v78;
                *(void *)long long buf = 0;
                long long v151 = buf;
                uint64_t v152 = 0x2020000000;
                uint64_t v4 = (const __CFString **)getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr;
                long long v153 = (void *)getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr;
                uint64_t v12 = (uint64_t)v144;
                if (!getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr)
                {
                  *(void *)long long v155 = MEMORY[0x1E4F143A8];
                  *(void *)&v155[8] = 3221225472;
                  *(void *)&long long v156 = ___ZL71getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLocv_block_invoke;
                  *((void *)&v156 + 1) = &unk_1E5274170;
                  *(void *)&long long v157 = buf;
                  float v110 = (void *)VideoToolboxLibrary();
                  uint64_t v111 = dlsym(v110, "kVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRect");
                  *(void *)(*(void *)(v157 + 8) + 24) = v111;
                  getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
                  uint64_t v4 = (const __CFString **)*((void *)v151 + 3);
                }
                _Block_object_dispose(buf, 8);
                if (v4)
                {
                  VTSessionSetPropertyFunc(v109, *v4, v97);
                  uint64_t v112 = *v78;
                  *(void *)long long buf = 0;
                  long long v151 = buf;
                  uint64_t v152 = 0x2020000000;
                  uint64_t v113 = (const __CFString **)getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr;
                  long long v153 = (void *)getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr;
                  if (!getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr)
                  {
                    *(void *)long long v155 = MEMORY[0x1E4F143A8];
                    *(void *)&v155[8] = 3221225472;
                    *(void *)&long long v156 = ___ZL56getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLocv_block_invoke;
                    *((void *)&v156 + 1) = &unk_1E5274170;
                    *(void *)&long long v157 = buf;
                    BOOL v114 = (void *)VideoToolboxLibrary();
                    float v115 = dlsym(v114, "kVTPixelTransferPropertyKey_DownsamplingMode");
                    *(void *)(*(void *)(v157 + 8) + 24) = v115;
                    getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
                    uint64_t v113 = (const __CFString **)*((void *)v151 + 3);
                  }
                  _Block_object_dispose(buf, 8);
                  if (v113)
                  {
                    CFStringRef v116 = *v113;
                    *(void *)long long buf = 0;
                    long long v151 = buf;
                    uint64_t v152 = 0x2020000000;
                    uint64_t v4 = (const __CFString **)getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr;
                    long long v153 = (void *)getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr;
                    if (!getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr)
                    {
                      *(void *)long long v155 = MEMORY[0x1E4F143A8];
                      *(void *)&v155[8] = 3221225472;
                      *(void *)&long long v156 = ___ZL39getkVTDownsamplingMode_AverageSymbolLocv_block_invoke;
                      *((void *)&v156 + 1) = &unk_1E5274170;
                      *(void *)&long long v157 = buf;
                      double v117 = (void *)VideoToolboxLibrary();
                      uint64_t v118 = dlsym(v117, "kVTDownsamplingMode_Average");
                      *(void *)(*(void *)(v157 + 8) + 24) = v118;
                      getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
                      uint64_t v4 = (const __CFString **)*((void *)v151 + 3);
                    }
                    _Block_object_dispose(buf, 8);
                    if (v4)
                    {
                      VTSessionSetPropertyFunc(v112, v116, *v4);
                      CFDataRef v119 = CGColorSpaceCopyICCData(v79);
                      float v120 = *v78;
                      *(void *)long long buf = 0;
                      long long v151 = buf;
                      uint64_t v152 = 0x2020000000;
                      float64x2_t v121 = (const __CFString **)getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr;
                      long long v153 = (void *)getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr;
                      if (!getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr)
                      {
                        *(void *)long long v155 = MEMORY[0x1E4F143A8];
                        *(void *)&v155[8] = 3221225472;
                        *(void *)&long long v156 = ___ZL61getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLocv_block_invoke;
                        *((void *)&v156 + 1) = &unk_1E5274170;
                        *(void *)&long long v157 = buf;
                        double v122 = (void *)VideoToolboxLibrary();
                        double v123 = dlsym(v122, "kVTPixelTransferPropertyKey_DestinationICCProfile");
                        *(void *)(*(void *)(v157 + 8) + 24) = v123;
                        getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
                        float64x2_t v121 = (const __CFString **)*((void *)v151 + 3);
                      }
                      _Block_object_dispose(buf, 8);
                      if (v121)
                      {
                        VTSessionSetPropertyFunc(v120, *v121, v119);
                        CFRelease(v119);
                        float64x2_t v124 = *v78;
                        *(void *)long long buf = 0;
                        long long v151 = buf;
                        uint64_t v152 = 0x2020000000;
                        float64x2_t v125 = (const __CFString **)getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr;
                        long long v153 = (void *)getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr;
                        if (!getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr)
                        {
                          *(void *)long long v155 = MEMORY[0x1E4F143A8];
                          *(void *)&v155[8] = 3221225472;
                          *(void *)&long long v156 = ___ZL62getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLocv_block_invoke;
                          *((void *)&v156 + 1) = &unk_1E5274170;
                          *(void *)&long long v157 = buf;
                          float64x2_t v126 = (void *)VideoToolboxLibrary();
                          uint64_t v127 = dlsym(v126, "kVTPixelTransferPropertyKey_DestinationYCbCrMatrix");
                          *(void *)(*(void *)(v157 + 8) + 24) = v127;
                          getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr = *(void *)(*(void *)(v157 + 8) + 24);
                          float64x2_t v125 = (const __CFString **)*((void *)v151 + 3);
                        }
                        _Block_object_dispose(buf, 8);
                        if (v125)
                        {
                          switch((int)v6)
                          {
                            case 6:
                              double v128 = (const void **)MEMORY[0x1E4F24C40];
                              break;
                            case 7:
                              double v128 = (const void **)MEMORY[0x1E4F24C60];
                              break;
                            case 8:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                              goto LABEL_176;
                            case 9:
                              double v128 = (const void **)MEMORY[0x1E4F24C30];
                              break;
                            case 14:
                              double v128 = (const void **)MEMORY[0x1E4F24C38];
                              break;
                            default:
                              if (v6 == 1)
                              {
                                double v128 = (const void **)MEMORY[0x1E4F24C48];
                              }
                              else if (v6 == 248)
                              {
                                double v128 = (const void **)MEMORY[0x1E4F24C28];
                              }
                              else
                              {
LABEL_176:
                                double v128 = (const void **)MEMORY[0x1E4F24C50];
                              }
                              break;
                          }
                          VTSessionSetPropertyFunc(v124, *v125, *v128);
                          goto LABEL_182;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    long long v136 = dlerror();
    abort_report_np();
LABEL_189:
LABEL_15:
    uint64_t v15 = *MEMORY[0x1E4F14B00];
    CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"CAContentStreamIntermediateSurf", v136, v137);
    unsigned int v17 = v6[3];
    int v18 = v6[4];
    *(void *)long long v155 = v13;
    *(void *)&v155[8] = v14;
    *(void *)&long long v156 = 1;
    *((void *)&v156 + 1) = v15;
    *(void *)&long long v157 = 0;
    uint64_t v19 = CA::SurfaceUtil::CAIOSurfaceCreate(v17, v18, 1647534392, 0, 0, 0, 0, v155, v16);
    CFRelease(v16);
    CFStringRef v20 = (const __CFString *)*MEMORY[0x1E4F1DBE8];
    uint64_t v21 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBE8]);
    if (v19)
    {
      IOSurfaceID ID = IOSurfaceGetID(v19);
      CA::Render::iosurface_set_colorspace(v19, v21, v23);
      uint64_t v24 = IOSurfaceSetOwnershipIdentity();
      if (v24)
      {
        uint64_t v25 = v24;
        if (x_log_hook_p())
        {
          uint64_t v137 = v25;
          x_log_();
        }
        else
        {
          int v26 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v4;
            LOWORD(v151) = 1024;
            *(_DWORD *)((char *)&v151 + 2) = v25;
            _os_log_impl(&dword_184668000, v26, OS_LOG_TYPE_ERROR, "Failed to set ownership on task %u err : 0x%x", buf, 0xEu);
          }
        }
        CFRelease(v19);
        uint64_t v19 = 0;
        IOSurfaceID ID = 0;
        uint64_t v12 = (uint64_t)v144;
      }
LABEL_25:
      double v27 = (void **)MEMORY[0x1E4F14B00];
      if (!v21) {
        goto LABEL_27;
      }
LABEL_26:
      CFRelease(v21);
      goto LABEL_27;
    }
    if (x_log_hook_p())
    {
      x_log_();
      uint64_t v19 = 0;
      IOSurfaceID ID = 0;
      goto LABEL_25;
    }
    int v60 = x_log_category_render;
    BOOL v61 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR);
    double v27 = (void **)MEMORY[0x1E4F14B00];
    if (v61)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_184668000, v60, OS_LOG_TYPE_ERROR, "Failed to create intermediate iosurface", buf, 2u);
    }
    uint64_t v19 = 0;
    IOSurfaceID ID = 0;
    if (v21) {
      goto LABEL_26;
    }
LABEL_27:
    uint64_t v147 = *(unsigned int *)(v12 + 64);
    uint64_t v28 = *(unsigned int *)(v12 + 280);
    long long v141 = v19;
    if (*((void *)v5 + 220) != -1) {
    long long v145 = *v27;
    }
    unsigned int v30 = CGColorSpaceCreateWithName(v20);
    uint64_t v31 = *((unsigned __int8 *)v6 + 58);
    v155[0] = 0;
    get_colorspace_map(v155);
    if (v155[0] <= v31) {
      goto LABEL_32;
    }
    CFStringRef v32 = (const __CFString *)get_colorspace_map(unsigned char *)::space_names[v31];
    if (v32) {
      CGColorSpaceRef v33 = CGColorSpaceCreateWithName(v32);
    }
    else {
LABEL_32:
    }
      CGColorSpaceRef v33 = CGColorSpaceRetain(v30);
    uint64_t v4 = (const __CFString **)v33;
    space = v30;
    IOSurfaceID v138 = ID;
    __p[0] = 0;
    __p[1] = 0;
    int8x16_t v149 = 0;
    if (*((_WORD *)v6 + 28))
    {
      int v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(*((unsigned __int16 *)v6 + 28));
      unsigned int v35 = v34;
      __p[0] = v34;
      __p[1] = v34;
      int8x16_t v149 = &v34[24 * v36];
      unsigned int v37 = *((unsigned __int16 *)v6 + 28);
      if (*((_WORD *)v6 + 28))
      {
        unsigned int v38 = 0;
        int v39 = v34;
        int8x16_t v139 = v6;
        while (1)
        {
          uint64_t v137 = v37 + ~v38;
          CFStringRef v40 = CFStringCreateWithFormat(0, 0, @"CAContentStream(%u)Surf(%u)", v147);
          unsigned int v41 = v6[3];
          int v42 = v6[4];
          uint64_t v43 = v6[2];
          *(void *)long long buf = v29;
          long long v151 = v146;
          uint64_t v152 = 1;
          long long v153 = v145;
          uint64_t v154 = 0;
          uint64_t v5 = CA::SurfaceUtil::CAIOSurfaceCreate(v41, v42, v43, 0, 0, 4u, 0, buf, v40);
          CFRelease(v40);
          if (!v5) {
            goto LABEL_75;
          }
          CA::Render::iosurface_set_colorspace(v5, (CGColorSpaceRef)v4, v44);
          if (CA::Render::ycbcr_fourcc_depth((CA::Render *)v6[2]))
          {
            char v45 = *((unsigned char *)v6 + 59);
            int v162 = 0;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)long long v155 = 0u;
            BYTE10(v158) = v45;
            IOSurfaceSetBulkAttachments2();
            int v162 = 0;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            *(_OWORD *)long long v155 = 0u;
            *(_WORD *)((char *)&v158 + 13) = 257;
            IOSurfaceSetBulkAttachments2();
          }
          mach_port_t MachPort = IOSurfaceCreateMachPort(v5);
          IOSurfaceID v47 = IOSurfaceGetID(v5);
          if (MachPort - 1 >= 0xFFFFFFFE) {
            break;
          }
          uint64_t v48 = IOSurfaceSetOwnershipIdentity();
          if (v48)
          {
            uint64_t v62 = v48;
            mach_port_deallocate(*MEMORY[0x1E4F14960], MachPort);
            CFRelease(v5);
            if (x_log_hook_p())
            {
              uint64_t v137 = v62;
LABEL_69:
              x_log_();
              goto LABEL_75;
            }
            uint64_t v67 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long v155 = 67109376;
              *(_DWORD *)&v155[4] = v28;
              *(_WORD *)&v155[8] = 1024;
              *(_DWORD *)&v155[10] = v62;
              long long v64 = "Failed to set ownership on task %u err : 0x%x";
              long long v65 = v67;
              uint32_t v66 = 14;
              goto LABEL_74;
            }
            goto LABEL_75;
          }
          if (v39 >= v149)
          {
            uint64_t v49 = v29;
            uint64_t v50 = v28;
            int v51 = v4;
            uint64_t v52 = (char *)__p[0];
            unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (char *)__p[0]) >> 3);
            unint64_t v54 = v53 + 1;
            if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v149 - (char *)__p[0]) >> 3) > v54) {
              unint64_t v54 = 0x5555555555555556 * ((v149 - (char *)__p[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v149 - (char *)__p[0]) >> 3) >= 0x555555555555555) {
              unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v55 = v54;
            }
            if (v55) {
              unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v55);
            }
            else {
              uint64_t v56 = 0;
            }
            unint64_t v57 = v55 + 8 * ((v39 - (char *)__p[0]) >> 3);
            *(void *)unint64_t v57 = v5;
            *(_DWORD *)(v57 + 8) = v47;
            *(_DWORD *)(v57 + 12) = MachPort;
            *(void *)(v57 + 16) = 0;
            uint64_t v58 = (char *)(v55 + 24 * v53);
            uint64_t v4 = v51;
            if (v39 != v52)
            {
              do
              {
                long long v59 = *(_OWORD *)(v39 - 24);
                *((void *)v58 - 1) = *((void *)v39 - 1);
                *(_OWORD *)(v58 - 24) = v59;
                v58 -= 24;
                v39 -= 24;
              }
              while (v39 != v52);
              int v39 = (char *)__p[0];
            }
            uint64_t v28 = v50;
            unsigned int v35 = (char *)(v57 + 24);
            __p[0] = v58;
            __p[1] = (void *)(v57 + 24);
            int8x16_t v149 = (char *)(v55 + 24 * v56);
            uint64_t v29 = v49;
            if (v39) {
              operator delete(v39);
            }
            size_t v6 = v139;
          }
          else
          {
            *(void *)int v39 = v5;
            *((_DWORD *)v39 + 2) = v47;
            *((_DWORD *)v39 + 3) = MachPort;
            unsigned int v35 = v39 + 24;
            *((void *)v39 + 2) = 0;
          }
          __p[1] = v35;
          ++v38;
          unsigned int v37 = *((unsigned __int16 *)v6 + 28);
          int v39 = v35;
          if (v38 >= v37) {
            goto LABEL_76;
          }
        }
        CFRelease(v5);
        if (x_log_hook_p()) {
          goto LABEL_69;
        }
        uint64_t v63 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v155 = 67109120;
          *(_DWORD *)&v155[4] = v47;
          long long v64 = "Failed to create machport for IOSurface %u";
          long long v65 = v63;
          uint32_t v66 = 8;
LABEL_74:
          _os_log_impl(&dword_184668000, v65, OS_LOG_TYPE_ERROR, v64, v155, v66);
        }
LABEL_75:
        unsigned int v35 = v39;
      }
    }
    else
    {
      unsigned int v35 = 0;
    }
LABEL_76:
    CGColorSpaceRelease((CGColorSpaceRef)v4);
    CGColorSpaceRelease(space);
    if (0xAAAAAAAAAAAAAAABLL * ((v35 - (char *)__p[0]) >> 3) != *((unsigned __int16 *)v6 + 28) || v141 == 0) {
      break;
    }
    uint64_t v12 = (uint64_t)v144;
    CA::Render::release_surfaces((uint64_t *)v144 + 39, (uint64_t)(v144 + 360));
    CA::Render::release_surfaces((uint64_t *)v144 + 42, (uint64_t)(v144 + 360));
    CA::Render::release_single_iosurface((uint64_t)(v144 + 288), (uint64_t)(v144 + 360));
    unsigned int v70 = (void *)*((void *)v144 + 39);
    if (v70)
    {
      *((void *)v144 + 40) = v70;
      operator delete(v70);
    }
    *(_OWORD *)(v144 + 312) = *(_OWORD *)__p;
    *((void *)v144 + 41) = v149;
    *((void *)v144 + 36) = v141;
    *((_DWORD *)v144 + 74) = v138;
    *((_DWORD *)v144 + 75) = 0;
    *((void *)v144 + 38) = 0;
    *((_DWORD *)v144 + 18) = v6[2];
    v144[76] = *((unsigned char *)v6 + 58);
    *(_WORD *)(v144 + 77) = *(_WORD *)((char *)v6 + 59);
    *((_DWORD *)v144 + 20) = v6[3];
    *((_DWORD *)v144 + 21) = v6[4];
  }
  uint64_t v12 = (uint64_t)v144;
  if (x_log_hook_p())
  {
    unsigned int v69 = v6[2];
    if ((v69 & 0x80000000) != 0)
    {
      __maskrune(HIBYTE(v6[2]), 0x40000uLL);
      unsigned int v69 = v6[2];
    }
    if (BYTE2(v69) > 0x7Fu)
    {
      __maskrune(BYTE2(v69), 0x40000uLL);
      unsigned int v69 = v6[2];
    }
    if (BYTE1(v69) > 0x7Fu)
    {
      __maskrune(BYTE1(v69), 0x40000uLL);
      unsigned int v69 = v6[2];
    }
    if (v69 > 0x7Fu) {
      __maskrune(v69, 0x40000uLL);
    }
    x_log_();
  }
  else
  {
    long long v84 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
    {
      unsigned int v86 = v6[3];
      unsigned int v85 = v6[4];
      unint64_t v87 = v6[2];
      unint64_t v88 = v87 >> 24;
      uint64_t v89 = MEMORY[0x1E4F14390];
      if ((v87 & 0x80000000) != 0)
      {
        int v90 = __maskrune(v88, 0x40000uLL);
        LODWORD(v87) = v6[2];
      }
      else
      {
        int v90 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v88 + 60) & 0x40000;
      }
      if (v90) {
        int v129 = (int)v87 >> 24;
      }
      else {
        int v129 = 32;
      }
      if (BYTE2(v87) <= 0x7Fu)
      {
        int v130 = *(_DWORD *)(v89 + 4 * BYTE2(v87) + 60) & 0x40000;
      }
      else
      {
        int v130 = __maskrune(BYTE2(v87), 0x40000uLL);
        LODWORD(v87) = v6[2];
      }
      if (v130) {
        int v131 = (int)(v87 << 8) >> 24;
      }
      else {
        int v131 = 32;
      }
      if (BYTE1(v87) <= 0x7Fu)
      {
        int v132 = *(_DWORD *)(v89 + 4 * BYTE1(v87) + 60) & 0x40000;
      }
      else
      {
        int v132 = __maskrune(BYTE1(v87), 0x40000uLL);
        LODWORD(v87) = v6[2];
      }
      if (v132) {
        int v133 = (__int16)v87 >> 8;
      }
      else {
        int v133 = 32;
      }
      if (v87 <= 0x7Fu)
      {
        int v134 = *(_DWORD *)(v89 + 4 * v87 + 60) & 0x40000;
      }
      else
      {
        int v134 = __maskrune(v87, 0x40000uLL);
        LODWORD(v87) = v6[2];
      }
      LODWORD(v87) = (char)v87;
      *(_DWORD *)long long v155 = 67110400;
      if (!v134) {
        LODWORD(v87) = 32;
      }
      *(_DWORD *)&v155[4] = v86;
      *(_WORD *)&v155[8] = 1024;
      *(_DWORD *)&v155[10] = v85;
      *(_WORD *)&v155[14] = 1024;
      LODWORD(v156) = v129;
      WORD2(v156) = 1024;
      *(_DWORD *)((char *)&v156 + 6) = v131;
      WORD5(v156) = 1024;
      HIDWORD(v156) = v133;
      LOWORD(v157) = 1024;
      *(_DWORD *)((char *)&v157 + 2) = v87;
      _os_log_impl(&dword_184668000, v84, OS_LOG_TYPE_ERROR, "Failed to create surface pool %ux%u fmt %c%c%c%c", v155, 0x26u);
      uint64_t v12 = (uint64_t)v144;
    }
  }
  CA::Render::release_surfaces((uint64_t *)__p, v12 + 360);
  CA::Render::release_single_iosurface(v12 + 288, v12 + 360);
  unint64_t v7 = v143;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  char v10 = 0;
LABEL_183:
  pthread_mutex_unlock((pthread_mutex_t *)v12);
  *((unsigned char *)v7 + 16) = v142;
LABEL_184:
  *((unsigned char *)v7 + 17) = v10;
}

void sub_18492241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void CA::WindowServer::Server::content_stream_state_changed(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned char *a3, void *a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(*((void *)a2 + 12) + 24) == *(_DWORD *)(*(void *)a3 + 4))
  {
    if (a3[9])
    {
      if ((*(uint64_t (**)(CA::Render::Object *))(*(void *)a2 + 392))(a2))
      {
        uint64_t v6 = *(void *)(*(uint64_t (**)(CA::Render::Object *))(*(void *)a2 + 392))(a2);
        stream_and_locuint64_t k = (uint64_t *)CA::Render::ContentStream::get_or_create_stream_and_lock((CA::Render::ContentStream *)**(unsigned int **)a3, 0, 0);
        if (stream_and_lock)
        {
          int v8 = stream_and_lock;
          CA::Render::release_surfaces(stream_and_lock + 39, (uint64_t)(stream_and_lock + 45));
          CA::Render::release_surfaces(v8 + 42, (uint64_t)(v8 + 45));
          CA::Render::release_single_iosurface((uint64_t)(v8 + 36), (uint64_t)(v8 + 45));
          if (((unint64_t)(v8[46] - v8[45]) >> 3))
          {
            (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
            v8[46] = v8[45];
          }
          pthread_mutex_unlock((pthread_mutex_t *)v8);
        }
      }
    }
    int v9 = a3[8];
    uint64_t v10 = *(void *)a3;
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    uint64_t v12 = *((void *)a2 + 60);
    long long v11 = (_DWORD *)*((void *)a2 + 61);
    int v13 = *(_DWORD *)v10;
    if (v9)
    {
      uint64_t v14 = (_DWORD *)*((void *)a2 + 60);
      if ((_DWORD *)v12 != v11)
      {
        while (*v14 != v13)
        {
          v14 += 50;
          if (v14 == v11) {
            goto LABEL_14;
          }
        }
      }
      if (v14 == v11)
      {
LABEL_14:
        unint64_t v15 = *((void *)a2 + 62);
        if ((unint64_t)v11 >= v15)
        {
          unint64_t v29 = 0x8F5C28F5C28F5C29 * (((uint64_t)v11 - v12) >> 3);
          unint64_t v30 = v29 + 1;
          if (v29 + 1 > 0x147AE147AE147AELL) {
            abort();
          }
          unint64_t v31 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v15 - v12) >> 3);
          if (2 * v31 > v30) {
            unint64_t v30 = 2 * v31;
          }
          if (v31 >= 0xA3D70A3D70A3D7) {
            unint64_t v32 = 0x147AE147AE147AELL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            if (v32 > 0x147AE147AE147AELL) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            CGColorSpaceRef v33 = (char *)operator new(200 * v32);
          }
          else
          {
            CGColorSpaceRef v33 = 0;
          }
          uint64_t v34 = (uint64_t)&v33[200 * v29];
          unsigned int v35 = &v33[200 * v32];
          std::construct_at[abi:nn180100]<CA::Render::ContentStreamConfig,CA::Render::ContentStreamConfig const&,CA::Render::ContentStreamConfig*>(v34, v10);
          uint64_t v16 = v34 + 200;
          unsigned int v37 = (void *)*((void *)a2 + 60);
          uint64_t v36 = (void *)*((void *)a2 + 61);
          if (v36 == v37)
          {
            *((void *)a2 + 60) = v34;
            *((void *)a2 + 61) = v16;
            *((void *)a2 + 62) = v35;
          }
          else
          {
            uint64_t v38 = 0;
            do
            {
              uint64_t v39 = v34 + v38 * 8;
              *(_OWORD *)(v39 - 200) = *(_OWORD *)&v36[v38 - 25];
              long long v40 = *(_OWORD *)&v36[v38 - 23];
              long long v41 = *(_OWORD *)&v36[v38 - 21];
              long long v42 = *(_OWORD *)&v36[v38 - 19];
              *(_DWORD *)(v39 - 137) = *(_DWORD *)((char *)&v36[v38 - 17] - 1);
              *(_OWORD *)(v39 - 152) = v42;
              *(_OWORD *)(v39 - 168) = v41;
              *(_OWORD *)(v39 - 184) = v40;
              X::small_vector_base<unsigned int>::small_vector_base((int **)(v34 + v38 * 8 - 128), (int **)&v36[v38 - 16], (int *)(v34 + v38 * 8 - 96));
              X::small_vector_base<unsigned int>::small_vector_base((int **)(v39 - 64), (int **)&v36[v38 - 8], (int *)(v39 - 32));
              v38 -= 25;
            }
            while (&v36[v38] != v37);
            uint64_t v43 = v34 + v38 * 8;
            int8x16_t v44 = (void *)*((void *)a2 + 60);
            uint64_t v36 = (void *)*((void *)a2 + 61);
            *((void *)a2 + 60) = v43;
            *((void *)a2 + 61) = v16;
            *((void *)a2 + 62) = v35;
            if (v36 != v44)
            {
              do
              {
                v36 -= 25;
                std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(v36);
              }
              while (v36 != v44);
              uint64_t v36 = v44;
            }
          }
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          std::construct_at[abi:nn180100]<CA::Render::ContentStreamConfig,CA::Render::ContentStreamConfig const&,CA::Render::ContentStreamConfig*>(*((void *)a2 + 61), v10);
          uint64_t v16 = (uint64_t)(v11 + 50);
        }
        *((void *)a2 + 61) = v16;
        *(_DWORD *)(*((void *)a2 + 12) + 745) |= 0x400u;
        *(void *)char v45 = 0;
        *(int64x2_t *)&v45[8] = vdupq_n_s64(0x20000000000uLL);
        (*(void (**)(CA::Render::Object *, unsigned char *, double))(*(void *)a2 + 184))(a2, v45, 0.0);
      }
      pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
    else
    {
      if ((_DWORD *)v12 != v11)
      {
        while (*(_DWORD *)v12 != v13)
        {
          v12 += 200;
          if ((_DWORD *)v12 == v11) {
            goto LABEL_33;
          }
        }
      }
      if ((_DWORD *)v12 != v11)
      {
        unsigned int v17 = v11 - 50;
        memset(v53, 0, sizeof(v53));
        long long v52 = 0u;
        long long v51 = 0u;
        memset(v50, 0, sizeof(v50));
        long long v49 = 0u;
        *(_OWORD *)uint64_t v48 = 0u;
        *(_OWORD *)char v45 = *(_OWORD *)v12;
        long long v18 = *(_OWORD *)(v12 + 16);
        long long v19 = *(_OWORD *)(v12 + 32);
        long long v20 = *(_OWORD *)(v12 + 48);
        *(_DWORD *)&v47[15] = *(_DWORD *)(v12 + 63);
        long long v46 = v19;
        *(_OWORD *)IOSurfaceID v47 = v20;
        *(_OWORD *)&v45[16] = v18;
        X::small_vector_base<unsigned int>::small_vector_base((int **)((char *)v48 + 5), (int **)(v12 + 72), (int *)((char *)v50 + 5));
        X::small_vector_base<unsigned int>::small_vector_base((int **)((char *)&v51 + 5), (int **)(v12 + 136), (int *)&v53[5]);
        *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 - 50);
        long long v21 = *(_OWORD *)(v11 - 46);
        long long v22 = *(_OWORD *)(v11 - 42);
        long long v23 = *(_OWORD *)(v11 - 38);
        *(_DWORD *)(v12 + 63) = *(_DWORD *)((char *)v11 - 137);
        *(_OWORD *)(v12 + 32) = v22;
        *(_OWORD *)(v12 + 48) = v23;
        *(_OWORD *)(v12 + 16) = v21;
        if ((_DWORD *)v12 != v11 - 50)
        {
          X::small_vector_base<unsigned int>::move(v12 + 72, (uint64_t)(v11 - 32), (_DWORD *)(v12 + 104));
          X::small_vector_base<unsigned int>::move(v12 + 136, (uint64_t)(v11 - 16), (_DWORD *)(v12 + 168));
        }
        *(_OWORD *)unsigned int v17 = *(_OWORD *)v45;
        long long v24 = *(_OWORD *)&v45[16];
        long long v25 = v46;
        long long v26 = *(_OWORD *)v47;
        *(_DWORD *)((char *)v11 - 137) = *(_DWORD *)&v47[15];
        *(_OWORD *)(v11 - 42) = v25;
        *(_OWORD *)(v11 - 38) = v26;
        *(_OWORD *)(v11 - 46) = v24;
        if (v45 != v17)
        {
          X::small_vector_base<unsigned int>::move((uint64_t)(v11 - 32), (uint64_t)v48 + 5, v11 - 24);
          X::small_vector_base<unsigned int>::move((uint64_t)(v11 - 16), (uint64_t)&v51 + 5, v11 - 8);
        }
        if (*(void *)((char *)&v51 + 5) != *(void *)((char *)&v52 + 5)) {
          free(*(void **)((char *)&v51 + 5));
        }
        if (*(void **)((char *)v48 + 5) != *(void **)((char *)&v49 + 5)) {
          free(*(void **)((char *)v48 + 5));
        }
        double v27 = (void *)(*((void *)a2 + 61) - 200);
        std::__destroy_at[abi:nn180100]<CA::Render::ContentStreamConfig,0>(v27);
        *((void *)a2 + 61) = v27;
        if (*(unsigned char *)(v10 + 66)) {
          int v28 = 4;
        }
        else {
          int v28 = 3;
        }
        CA::WindowServer::Server::notify_content_streams((uint64_t)a2, v28);
      }
LABEL_33:
      pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
  }
}

int **X::small_vector_base<unsigned int>::small_vector_base(int **result, int **a2, int *a3)
{
  void *result = a3;
  result[1] = a3;
  result[2] = a3;
  CFDictionaryRef v3 = a2[2];
  result[3] = a2[3];
  uint64_t v4 = *a2;
  if (*a2 == v3)
  {
    result[1] = (int *)((char *)a3 + (char *)a2[1] - (char *)v4);
    uint64_t v6 = a2[1];
    while (v4 != v6)
    {
      int v7 = *v4++;
      *a3++ = v7;
    }
  }
  else
  {
    uint64_t v5 = a2[1];
    void *result = v4;
    result[1] = v5;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void X::small_vector_base<unsigned int>::move(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void **)a1;
    if (v6 != *(void **)(a1 + 16)) {
      free(v6);
    }
    *(void *)(a1 + 16) = a3;
    if (*(void *)a2 == *(void *)(a2 + 16))
    {
      *(void *)a1 = a3;
      int v8 = *(int **)a2;
      *(void *)(a1 + 8) = (char *)a3 + *(void *)(a2 + 8) - *(void *)a2;
      int v9 = *(int **)(a2 + 8);
      while (v8 != v9)
      {
        int v10 = *v8++;
        *a3++ = v10;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v7;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
}

uint64_t std::construct_at[abi:nn180100]<CA::Render::ContentStreamConfig,CA::Render::ContentStreamConfig const&,CA::Render::ContentStreamConfig*>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = a1 + 104;
  *(void *)(a1 + 80) = a1 + 104;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 8;
  X::small_vector_base<unsigned int>::append<unsigned int const*>(a1 + 72, *(int **)(a2 + 72), *(int **)(a2 + 80));
  *(void *)(a1 + 136) = a1 + 168;
  *(void *)(a1 + 144) = a1 + 168;
  *(void *)(a1 + 152) = a1 + 168;
  *(void *)(a1 + 160) = 8;
  X::small_vector_base<unsigned int>::append<unsigned int const*>(a1 + 136, *(int **)(a2 + 136), *(int **)(a2 + 144));
  return a1;
}

void CA::WindowServer::Server::flipbook_modify(CA::WindowServer::Server *this, CA::Render::Object *a2, _DWORD *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 12);
  uint64_t v5 = *(void *)(v4 + 320);
  if (*a3 == *(_DWORD *)(v4 + 24) && v5 != 0)
  {
    int v8 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v9 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "flipbook_modify ()", buf, 2u);
      }
    }
    int v10 = a3[1];
    uint64_t v11 = a3[2];
    switch(v10)
    {
      case 0:
        uint64_t v12 = (os_unfair_lock_s *)(v5 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
        *(void *)(v5 + 64) = v11;
        CA::WindowServer::FlipBook::collect((CA::WindowServer::FlipBook *)v5);
        if (x_log_hook_p()) {
          goto LABEL_47;
        }
        uint64_t v19 = x_log_category_flipbook;
        if (!os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_51;
        }
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v34 = v11;
        long long v20 = "changing max size to %zu";
        long long v21 = v19;
        uint32_t v22 = 12;
        goto LABEL_50;
      case 1:
        uint64_t v13 = mach_absolute_time();
        double v14 = CATimeWithHostTime(v13);
        uint64_t v12 = (os_unfair_lock_s *)(v5 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
        uint64_t v16 = *(void *)(v5 + 104);
        uint64_t v15 = *(void *)(v5 + 112);
        if (v16 == v15)
        {
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = 0;
          do
          {
            if ((*(unsigned char *)(v16 + 96) & 2) == 0)
            {
              IOSurfaceSetPurgeable(*(IOSurfaceRef *)v16, 1u, 0);
              long long v18 = *(__IOSurface **)(v16 + 16);
              if (v18) {
                IOSurfaceSetPurgeable(v18, 1u, 0);
              }
              *(unsigned char *)(v16 + 96) |= 2u;
              ++v17;
              uint64_t v15 = *(void *)(v5 + 112);
            }
            v16 += 104;
          }
          while (v16 != v15);
        }
        if (x_log_hook_p())
        {
          uint64_t v29 = mach_absolute_time();
          CATimeWithHostTime(v29);
LABEL_47:
          x_log_();
        }
        else
        {
          uint64_t v30 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = mach_absolute_time();
            double v32 = CATimeWithHostTime(v31);
            *(_DWORD *)long long buf = 134218240;
            *(void *)uint64_t v34 = v17;
            *(_WORD *)&v34[8] = 2048;
            double v35 = (v32 - v14) * 1000.0;
            long long v20 = "%zu surfaces marked purgeable in %g ms";
            long long v21 = v30;
            uint32_t v22 = 22;
LABEL_50:
            _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
          }
        }
        goto LABEL_51;
      case 2:
        CA::WindowServer::FlipBook::free_surfaces((os_unfair_lock_s *)v5);
        break;
      case 3:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          long long v24 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)uint64_t v34 = v11 != 0;
            _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_DEFAULT, "set power saving requested %u", buf, 8u);
          }
        }
        uint64_t v12 = (os_unfair_lock_s *)(v5 + 12);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 12));
        char v25 = *(unsigned char *)(v5 + 24);
        *(unsigned char *)(v5 + 24) = v25 & 0xF7 | (8 * (v11 != 0));
        if ((v25 & 3) == 1) {
          (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 72))(v5, v11 != 0);
        }
        goto LABEL_51;
      case 4:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          long long v26 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)uint64_t v34 = v11 != 0;
            _os_log_impl(&dword_184668000, v26, OS_LOG_TYPE_DEFAULT, "set one hz flipbook requested %u", buf, 8u);
          }
        }
        uint64_t v12 = (os_unfair_lock_s *)(v5 + 12);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 12));
        char v27 = *(unsigned char *)(v5 + 24);
        *(unsigned char *)(v5 + 24) = v27 & 0xEF | (16 * (v11 != 0));
        if ((v27 & 3) == 1) {
          (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 80))(v5, v11 != 0);
        }
        goto LABEL_51;
      case 5:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int v28 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)uint64_t v34 = v11 != 0;
            _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, "set cache frames on exit %u", buf, 8u);
          }
        }
        uint64_t v12 = (os_unfair_lock_s *)(v5 + 12);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 12));
        *(unsigned char *)(v5 + 24) = *(unsigned char *)(v5 + 24) & 0xDF | (32 * (v11 != 0));
LABEL_51:
        os_unfair_lock_unlock(v12);
        break;
      default:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          long long v23 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)uint64_t v34 = v10;
            *(_WORD *)&v34[4] = 1024;
            *(_DWORD *)&v34[6] = v11;
            _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, "Unknown command 0x%x, 0x%x", buf, 0xEu);
          }
        }
        break;
    }
    pthread_mutex_unlock(v8);
  }
}

void CA::WindowServer::Server::flipbook_cancel(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 12);
  uint64_t v5 = *(CA::WindowServer::FlipBook **)(v4 + 320);
  if (*(_DWORD *)a3 == *(_DWORD *)(v4 + 24) && v5 != 0)
  {
    int v8 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v9 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "flipbook_cancel ()", buf, 2u);
      }
    }
    CA::WindowServer::FlipBook::cancel(v5, (unint64_t *)a3 + 1, &v10, *((unsigned int **)a3 + 2), 0);
    pthread_mutex_unlock(v8);
  }
}

void CA::WindowServer::Server::flipbook_copy_current_frame(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 12);
  uint64_t v5 = *(void *)(v4 + 320);
  if (*(_DWORD *)a3 != *(_DWORD *)(v4 + 24) || v5 == 0) {
    return;
  }
  int v8 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v9 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "flipbook_copy_current_frame ()", v15, 2u);
    }
  }
  unsigned __int8 v10 = (mach_port_t *)a3[2];
  if (!v10) {
    goto LABEL_22;
  }
  if (CADeviceHasInternalDiagnostics::once != -1) {
    dispatch_once(&CADeviceHasInternalDiagnostics::once, &__block_literal_global_157);
  }
  if (!CADeviceHasInternalDiagnostics::internal) {
    goto LABEL_22;
  }
  uint64_t v11 = mach_continuous_time();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
  uint64_t v12 = *(void *)(v5 + 128);
  uint64_t v13 = *(void *)(v5 + 136);
  if (v13 == v12) {
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v14 = v13 - 104;
    if (*(void *)(v13 - 64) < v11) {
      break;
    }
LABEL_17:
    v13 -= 104;
    if (v14 == v12) {
      goto LABEL_21;
    }
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 120))(v5, v13 - 104) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v5 + 128);
    goto LABEL_17;
  }
  a3[1] = *(void *)(v13 - 72);
  if (v13 != *(void *)(v5 + 128)) {
    CA::WindowServer::FlipBook::copy_surface(v5, *(IOSurfaceRef *)(v13 - 104), *(unsigned char *)(v13 - 8), v10);
  }
LABEL_21:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 8));
LABEL_22:
  pthread_mutex_unlock(v8);
}

void CA::WindowServer::Server::flipbook_query_memory_usage(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v4 = *((void *)a2 + 12);
  uint64_t v5 = *(void *)(v4 + 320);
  if (*(_DWORD *)a3 == *(_DWORD *)(v4 + 24) && v5 != 0)
  {
    int v8 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    CA::WindowServer::FlipBook::recycle((os_unfair_lock_s *)v5);
    a3[1] = *(void *)(v5 + 72);
    pthread_mutex_unlock(v8);
  }
}

void CA::WindowServer::Server::flipbook_query_frame(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 12);
  uint64_t v5 = *(void *)(v4 + 320);
  if (*(_DWORD *)a3 != *(_DWORD *)(v4 + 24) || v5 == 0) {
    return;
  }
  int v8 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  unint64_t v9 = a3[1];
  unsigned __int8 v10 = (os_unfair_lock_s *)(v5 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
  uint64_t v11 = *(void *)(v5 + 80);
  uint64_t v12 = *(void *)(v5 + 88);
  if (v11 == v12)
  {
    uint64_t v14 = *(void *)(v5 + 128);
    uint64_t v15 = *(void *)(v5 + 136);
    if (v14 == v15)
    {
      a3[2] = 0;
      goto LABEL_27;
    }
    uint64_t v13 = 0;
  }
  else
  {
    if (*(void *)(v11 + 40) <= v9)
    {
      uint64_t v16 = v11 + 104;
      do
      {
        uint64_t v17 = v16;
        if (v16 == v12) {
          break;
        }
        unint64_t v18 = *(void *)(v16 + 40);
        v16 += 104;
      }
      while (v18 <= v9);
      uint64_t v13 = *(void *)(v17 - 72);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void *)(v5 + 128);
    uint64_t v15 = *(void *)(v5 + 136);
    if (v14 == v15)
    {
      a3[2] = v13;
LABEL_25:
      uint64_t v22 = *(void *)(v11 + 32);
      goto LABEL_26;
    }
  }
  if (*(void *)(v14 + 40) <= v9)
  {
    uint64_t v19 = v14 + 104;
    do
    {
      uint64_t v20 = v19;
      if (v19 == v15) {
        break;
      }
      unint64_t v21 = *(void *)(v19 + 40);
      v19 += 104;
    }
    while (v21 <= v9);
    uint64_t v13 = *(void *)(v20 - 72);
  }
  a3[2] = v13;
  if (v11 != v12) {
    goto LABEL_25;
  }
  uint64_t v22 = *(void *)(v14 + 32);
LABEL_26:
  a3[3] = v22;
LABEL_27:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    long long v23 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = a3[2];
      uint64_t v25 = a3[3];
      *(_DWORD *)long long buf = 134218496;
      unint64_t v27 = v9;
      __int16 v28 = 2048;
      uint64_t v29 = v24;
      __int16 v30 = 2048;
      uint64_t v31 = v25;
      _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, "FlipBook::query() at t=%llu, on_glass_frame=%llu, oldest_frame=%llu", buf, 0x20u);
    }
  }
  os_unfair_lock_unlock(v10);

  pthread_mutex_unlock(v8);
}

void CA::WindowServer::Server::flipbook_render(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  MEMORY[0x1F4188790](this);
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(v4 + 96);
  uint64_t v7 = *(void *)(v6 + 320);
  if (*v5 != *(_DWORD *)(v6 + 24) || v7 == 0) {
    return;
  }
  unint64_t v9 = v5;
  uint64_t v10 = v4;
  uint64_t v11 = (pthread_mutex_t *)(v4 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 24));
  uint64_t v12 = (CA::Render::Context *)v9[1];
  unint64_t v13 = *((void *)v9 + 1);
  int v14 = v9[4];
  uint64_t v15 = *(void *)(v10 + 96);
  int v16 = *(unsigned __int8 *)(*(void *)(v15 + 728) + 1);
  int v17 = *(_DWORD *)(v15 + 745);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    unint64_t v18 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v13;
      _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "FlipBook::render (context 0x%x, t %llu)", buf, 0x12u);
    }
  }
  kdebug_trace();
  *((void *)v9 + 4) = 0;
  if (*(void *)(v7 + 56) > v13)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v19 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(v7 + 56);
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v20;
        _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "bad timestamp - %llu is earlier than last timestamp %llu", buf, 0x16u);
      }
    }
    v9[5] = 1;
    goto LABEL_63;
  }
  if ((v17 & 0x2000) != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v21 = x_log_category_flipbook;
      if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_DEFAULT, "display not ready (entering flipbook). Dropping render!", buf, 2u);
      }
    }
    int v22 = 5;
    goto LABEL_62;
  }
  if (v16 != 1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 8));
    if (*(void *)(v7 + 112) == *(void *)(v7 + 104))
    {
      unint64_t v24 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v7 + 136) - *(void *)(v7 + 128)) >> 3)
          + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v7 + 88) - *(void *)(v7 + 80)) >> 3);
      unint64_t v25 = *(void *)(v7 + 64);
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 8));
      if (v24 >= v25)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v43 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v43, OS_LOG_TYPE_DEFAULT, "no surface!", buf, 2u);
          }
        }
        int v22 = 3;
        goto LABEL_62;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 8));
    }
    float v185 = (CA::WindowServer::FlipBook *)CA::Render::Context::context_by_id(v12);
    if (!v185)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v42 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v42, OS_LOG_TYPE_DEFAULT, "no context!", buf, 2u);
        }
      }
      int v22 = 4;
      goto LABEL_62;
    }
    if (!*(void *)(v7 + 40)) {
      CA::WindowServer::FlipBook::invalidate_context(v185, v26);
    }
    CARecordCurrentDisplay::CARecordCurrentDisplay((CARecordCurrentDisplay *)v196, *(_DWORD *)(*(void *)(v7 + 16) + 24));
    unint64_t v27 = pthread_getspecific(current_display_slot);
    if (v27 && *v27) {
      --*v27;
    }
    locuint64_t k = (os_unfair_lock_s *)(v7 + 8);
    *(_OWORD *)buffer = 0u;
    long long v198 = 0u;
    long long v199 = 0u;
    memset(v200, 0, sizeof(v200));
    uint64_t v201 = 0;
    uint64_t v28 = *(void *)(v7 + 16);
    *(void *)&long long v195 = 0;
    *((void *)&v195 + 1) = *(void *)(v28 + 176);
    uint64_t v29 = mach_absolute_time();
    double v30 = CATimeWithHostTime(v29);
    int add = atomic_fetch_add(&CA::Render::Update::_update_counter, 1u);
    unsigned int v32 = add + 1;
    if ((*(unsigned char *)(v7 + 24) & 3) == 0) {
      int add = (*(uint64_t (**)(void))(**(void **)(v7 + 16) + 360))(*(void *)(v7 + 16));
    }
    bzero(v229, 0x448uLL);
    CA::Render::Update::Update((CA::Render::Update *)v229, buf, 0x2000uLL, v30, 0, v32, add, add, (const CA::Bounds *)&v195, 0x10000u);
    if (!v229[0])
    {
      x_log_crash("Invalid update!");
      abort();
    }
    unint64_t v33 = v234 & 0xFFEFFFFF | ((unint64_t)v235 << 32);
    unsigned int v234 = v234 & 0x7FEF7FFF | 0x80008000;
    unsigned __int16 v235 = WORD2(v33);
    uint64_t v233 = (*(uint64_t (**)(void))(**(void **)(v7 + 16) + 1400))();
    if (*(_DWORD *)(v7 + 292) == 1) {
      v234 |= 0x4000u;
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)v185 + 72));
    int v34 = *(_DWORD *)(v7 + 292);
    *(void *)float v211 = 0;
    v210[0] = 0;
    v210[1] = 0;
    if (v34 == 1)
    {
      uint64_t v35 = CA::Render::Context::root_layer_handle(v185);
      if (v35)
      {
        if (*(void *)(v35 + 16))
        {
          uint64_t v36 = *(void *)(*(void *)(CA::Render::Context::root_layer_handle(v185) + 16) + 128);
          if (v36)
          {
            uint64_t v37 = *(void *)(v36 + 96);
            if (v37)
            {
              uint64_t v38 = *(unsigned int *)(v37 + 16);
              if (v38)
              {
                uint64_t v39 = (const CA::Render::Filter **)(v37 + 24);
                uint64_t v40 = 8 * v38;
                while (1)
                {
                  long long v41 = *v39;
                  if ((*((unsigned char *)*v39 + 14) & 2) != 0 && *((_DWORD *)v41 + 6) == 352) {
                    break;
                  }
                  ++v39;
                  v40 -= 8;
                  if (!v40) {
                    goto LABEL_89;
                  }
                }
                CA::OGL::get_filter_apl_params(v210, v41, 1, 0);
              }
            }
          }
        }
      }
    }
LABEL_89:
    long long v227 = *(_OWORD *)v210[0].f32;
    uint64_t v228 = *(void *)v211;
    if ((v14 & 2) != 0 && (uint64_t v58 = CA::Render::Context::root_layer_handle(v185)) != 0 && *(void *)(v58 + 16))
    {
      if (CADeviceInternalDisplayScale::once != -1) {
        dispatch_once(&CADeviceInternalDisplayScale::once, &__block_literal_global_283);
      }
      int v59 = (int)*(float *)&CADeviceInternalDisplayScale::scale;
      long long v193 = 0u;
      long long v194 = 0u;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      *(_OWORD *)float v187 = 0u;
      long long v188 = 0u;
      uint64_t v60 = CA::Render::Context::root_layer_handle(v185);
      if (v60) {
        uint64_t v60 = *(void *)(v60 + 16);
      }
      CA::Render::Layer::compute_frame_transform(v60, 0, (CA::Mat4Impl *)v187, 0);
      v210[1] = 0;
      memset(v211, 0, 24);
      memset(&v211[32], 0, 32);
      uint64_t v212 = 0;
      long long v213 = 0u;
      long long v214 = xmmword_184997D60;
      *(double *)double v210 = (double)v59;
      *(double *)&v211[24] = (double)v59;
      *(void *)&v211[64] = 0x3FF0000000000000;
      double v215 = (double)v59;
      double v216 = 1.0 / (double)v59;
      uint64_t v217 = (8 * (v59 != 1));
      int v61 = (*(uint64_t (**)(void))(**(void **)(v7 + 16) + 840))();
      uint64_t v209 = 0;
      if (v14) {
        int v64 = ((_BYTE)v61 + 2) & 3;
      }
      else {
        int v64 = v61;
      }
      long long v202 = xmmword_184997D50;
      long long v203 = 0u;
      long long v204 = xmmword_184997D60;
      long long v205 = 0u;
      *(_OWORD *)float v206 = 0u;
      *(_OWORD *)&v206[16] = xmmword_184997D50;
      *(_OWORD *)&v206[32] = 0u;
      long long v207 = xmmword_184997D60;
      __asm { FMOV            V0.2D, #1.0 }
      long long v208 = _Q0;
      switch(v64)
      {
        case 3:
          LOBYTE(v209) = 7;
          long long v203 = 0uLL;
          long long v205 = 0u;
          *(_OWORD *)float v206 = 0u;
          *(_OWORD *)&v206[16] = xmmword_184997D50;
          long long v207 = xmmword_184997D60;
          long long v202 = xmmword_184998450;
          long long v204 = xmmword_184997D50;
          *(void *)&v206[32] = 0;
          *(double *)&v206[40] = (double)SHIDWORD(v195);
          break;
        case 2:
          CA::Transform::set_affine_rectilinear((CA::Transform *)&v202, -1.0, -1.0, (double)SDWORD2(v195), (double)SHIDWORD(v195));
          break;
        case 1:
          LOBYTE(v209) = 4;
          long long v203 = 0uLL;
          long long v205 = 0u;
          *(_OWORD *)float v206 = 0u;
          *(_OWORD *)&v206[16] = xmmword_184997D50;
          long long v207 = xmmword_184997D60;
          long long v202 = xmmword_184997D60;
          long long v204 = xmmword_184997E00;
          *(double *)&v206[32] = (double)SDWORD2(v195);
          *(void *)&v206[40] = 0;
          break;
      }
      CA::Transform::concat((CA::Transform *)v210, (float64x2_t *)&v202, v62, v63);
      CA::Transform::set((uint64_t)&v219, (CA::Mat4Impl *)v187, 1);
      CA::Transform::concat_left((CA::Transform *)v210, &v219, v154, v155);
      uint64_t v156 = CA::Render::Context::root_layer_handle(v185);
      if (v156) {
        long long v157 = *(CA::Render::Layer **)(v156 + 16);
      }
      else {
        long long v157 = 0;
      }
      CA::Render::Update::add_context((CA::Render::Update *)v229, v185, v157, (const CA::Transform *)v210);
    }
    else
    {
      CA::Render::Update::add_context((CA::Render::Update *)v229, v185);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)v185 + 72));
    CA::Render::Update::added_all_contexts(v229, v69, v70);
    if (byte_1EB2ACC23)
    {
      uint64_t v158 = 8;
      if (!*(_DWORD *)(v7 + 292)) {
        uint64_t v158 = 24;
      }
      uint64_t v179 = v158;
      uint64_t v175 = 2 * (*(_DWORD *)(v7 + 292) == 0);
    }
    else
    {
      uint64_t v175 = 0;
      uint64_t v179 = 8;
    }
    context = (void *)MEMORY[0x185324A30]();
    uint64_t v180 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
    uint64_t v71 = *v180;
    uint64_t v72 = *(void *)(v7 + 16);
    int v177 = *(_DWORD *)(v72 + 176);
    int v172 = *(_DWORD *)(v72 + 180);
    float v186 = 0;
    v187[0] = 0;
    v187[1] = 0;
    CA::Shape::get_bounds((uint64_t)v230[0], (int *)v187);
    char v181 = BYTE4(v228);
    if (*(float *)(v7 + 288) != 1.0 && (v228 & 0x100000000) == 0)
    {
      *(_DWORD *)(v7 + 288) = 1065353216;
      *(_OWORD *)float v187 = v195;
    }
    int v73 = *(_DWORD *)(v7 + 292);
    if (v73 == 1)
    {
      if (v181)
      {
        os_unfair_lock_lock(lock);
        float32x4_t v77 = (_OWORD *)(v7 + 176);
        if (*(void *)(v7 + 176))
        {
          int v78 = *(_DWORD *)(v7 + 228);
          int v79 = *(_DWORD *)(v7 + 232);
          int v80 = *(_DWORD *)(v7 + 236);
          int v81 = *(_DWORD *)(v7 + 240);
          int v82 = *(_DWORD *)(v7 + 244);
          int v83 = *(_DWORD *)(v7 + 248);
          int v84 = *(_DWORD *)(v7 + 252);
          int v85 = *(_DWORD *)(v7 + 256);
        }
        else
        {
          CA::WindowServer::FlipBook::allocate_frame((CA::WindowServer::FlipBook *)v210, v7, *(int *)(*(void *)(v7 + 16) + 176), *(int *)(*(void *)(v7 + 16) + 180), v74, v75, v76);
          long long v86 = *(_OWORD *)v211;
          *float32x4_t v77 = *(_OWORD *)v210[0].f32;
          *(_OWORD *)(v7 + 192) = v86;
          *(_OWORD *)(v7 + 208) = *(_OWORD *)&v211[16];
          int v78 = *(_DWORD *)&v211[36];
          *(_DWORD *)(v7 + 224) = *(_DWORD *)&v211[32];
          int v79 = *(_DWORD *)&v211[40];
          int v80 = *(_DWORD *)&v211[44];
          *(_DWORD *)(v7 + 228) = v78;
          *(_DWORD *)(v7 + 232) = v79;
          int v81 = *(_DWORD *)&v211[48];
          int v82 = *(_DWORD *)&v211[52];
          *(_DWORD *)(v7 + 236) = v80;
          *(_DWORD *)(v7 + 240) = v81;
          int v83 = *(_DWORD *)&v211[56];
          int v84 = *(_DWORD *)&v211[60];
          *(_DWORD *)(v7 + 244) = v82;
          *(_DWORD *)(v7 + 248) = v83;
          int v85 = *(_DWORD *)&v211[64];
          *(_DWORD *)(v7 + 252) = v84;
          *(_DWORD *)(v7 + 256) = v85;
          *(unsigned char *)(v7 + 272) = v213;
          *(void *)(v7 + 264) = v212;
        }
        long long v87 = *(_OWORD *)(v7 + 192);
        *(_OWORD *)v210[0].f32 = *v77;
        *(_OWORD *)float v211 = v87;
        *(_OWORD *)&v211[16] = *(_OWORD *)(v7 + 208);
        *(_DWORD *)&v211[32] = *(_DWORD *)(v7 + 224);
        *(_DWORD *)&v211[36] = v78;
        *(_DWORD *)&v211[40] = v79;
        *(_DWORD *)&v211[44] = v80;
        *(_DWORD *)&v211[48] = v81;
        *(_DWORD *)&v211[52] = v82;
        *(_DWORD *)&v211[56] = v83;
        *(_DWORD *)&v211[60] = v84;
        *(_DWORD *)&v211[64] = v85;
        uint64_t v88 = *(void *)(v7 + 264);
        LOBYTE(v213) = *(unsigned char *)(v7 + 272);
        uint64_t v212 = v88;
        os_unfair_lock_unlock(lock);
      }
      else
      {
        CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v210, v7, SLODWORD(v187[1]), SHIDWORD(v187[1]));
      }
      *(_OWORD *)buffer = *(_OWORD *)v210[0].f32;
      long long v198 = *(_OWORD *)v211;
      long long v199 = *(_OWORD *)&v211[16];
      LODWORD(v200[0]) = *(_DWORD *)&v211[32];
      *(_OWORD *)((char *)v200 + 4) = *(_OWORD *)&v211[36];
      *(_OWORD *)((char *)&v200[1] + 4) = *(_OWORD *)&v211[52];
      *((void *)&v200[2] + 1) = v212;
      LOBYTE(v201) = v213;
    }
    else if (!v73)
    {
      CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v210, v7, 0, 0);
      *(_OWORD *)buffer = *(_OWORD *)v210[0].f32;
      long long v198 = *(_OWORD *)v211;
      long long v199 = *(_OWORD *)&v211[16];
      LODWORD(v200[0]) = *(_DWORD *)&v211[32];
      *(_OWORD *)((char *)v200 + 4) = *(_OWORD *)&v211[36];
      *(_OWORD *)((char *)&v200[1] + 4) = *(_OWORD *)&v211[52];
      *((void *)&v200[2] + 1) = v212;
      LOBYTE(v201) = v213;
    }
    if (*((void *)&v199 + 1)) {
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1196, "frame.t_continuous == 0");
    }
    if ((void)v199) {
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1197, "frame.seed == 0");
    }
    if (LODWORD(v200[0])) {
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1198, "frame.swap_id == 0");
    }
    if (!buffer[0]) {
      __assert_rtn("render_frame", "windowserver-flipbook.cpp", 1200, "frame.surface");
    }
    uint64_t v89 = *(void *)(v7 + 280);
    *(void *)(v7 + 280) = v89 + 1;
    int v90 = *(_DWORD *)(v7 + 292);
    uint64_t v168 = v89 + 1;
    if (v90 != 1)
    {
      if (v90)
      {
        uint64_t v169 = 0;
        uint64_t v166 = 0;
        long long v105 = (CA::OGL::Renderer *)v180;
        goto LABEL_159;
      }
      os_unfair_lock_lock(lock);
      uint64_t v91 = *(void *)(v7 + 80);
      uint64_t v92 = *(void *)(v7 + 88);
      if (v91 != v92)
      {
        __n128 v93 = v187[1];
        do
        {
          CA::BoundsImpl::Union((int32x2_t *)(v91 + 52), (int32x2_t)v187[0], (int32x2_t)v93);
          v91 += 104;
        }
        while (v91 != v92);
      }
      uint64_t v94 = *(void *)(v7 + 104);
      uint64_t v95 = *(void *)(v7 + 112);
      if (v94 != v95)
      {
        CFStringRef v96 = v187[1];
        do
        {
          CA::BoundsImpl::Union((int32x2_t *)(v94 + 52), (int32x2_t)v187[0], (int32x2_t)v96);
          v94 += 104;
        }
        while (v94 != v95);
      }
      uint64_t v97 = *(void *)(v7 + 128);
      uint64_t v98 = *(void *)(v7 + 136);
      if (v97 != v98)
      {
        float64x2_t v99 = v187[1];
        do
        {
          CA::BoundsImpl::Union((int32x2_t *)(v97 + 52), (int32x2_t)v187[0], (int32x2_t)v99);
          v97 += 104;
        }
        while (v97 != v98);
      }
      uint64_t v100 = CA::WindowServer::FlipBook::previous_frame_with_seed((CA::WindowServer::FlipBook *)v7, v89);
      if (!v100 || !*(void *)(v100 + v179))
      {
        memset(v211, 0, 32);
        *(_OWORD *)v210[0].f32 = 0u;
        CA::Shape::operator=((uint64_t)v210, (_DWORD *)v200 + 1);
        CA::shape_union((CA::Shape **)v230, (CA::Shape **)v210, v106);
        uint64_t v169 = 0;
        long long v105 = (CA::OGL::Renderer *)v180;
LABEL_150:
        *(void *)((char *)v200 + 4) = 0;
        *(void *)((char *)v200 + 12) = 0;
        uint64_t v166 = CA::Shape::area((CA::Shape *)v230[0]);
LABEL_158:
        os_unfair_lock_unlock(lock);
LABEL_159:
        uint64_t v178 = v172 * (uint64_t)v177;
        long long v173 = v195;
        *(_OWORD *)(v71 + 200) = v195;
        *(_WORD *)(v71 + 832) |= 2u;
        *(void *)(v71 + 192) = CA::WindowServer::Display::ogl_display(*(CA::WindowServer::Display **)(v7 + 16));
        CA::OGL::Renderer::prepare_clip_shape(v105, (const CA::Render::Update *)v230[0]);
        (*(void (**)(uint64_t, IOSurfaceRef, void, void))(*(void *)v71 + 32))(v71, buffer[v175], 0, 0);
        CA::OGL::Renderer::render(v105, (const CA::Render::Update *)v229, 0, v112);
        if (v181)
        {
          float v115 = (float **)(*(uint64_t (**)(uint64_t, void, long long *))(*(void *)v71 + 872))(v71, *(IOSurfaceRef *)((char *)buffer + v179), &v227);
          (*(void (**)(uint64_t))(*(void *)v71 + 416))(v71);
          uint64_t v183 = (uint64_t)v115;
          float v116 = **v115;
          float v176 = (*v115)[8];
          float v117 = vabds_f32(*(float *)(v7 + 288), v116);
          memset(&v206[20], 0, 20);
          long long v202 = *(_OWORD *)buffer;
          long long v203 = v198;
          long long v204 = v199;
          long long v205 = v200[0];
          unsigned int v165 = DWORD1(v200[0]);
          int v163 = HIDWORD(v200[0]);
          unsigned int v164 = DWORD2(v200[0]);
          unsigned int v118 = DWORD1(v200[1]);
          unsigned int v162 = v200[1];
          *(_DWORD *)float v206 = v200[1];
          int v119 = HIDWORD(v200[1]);
          int v120 = v200[2];
          v206[32] = v201;
          *(void *)&v206[24] = *((void *)&v200[2] + 1);
          float v161 = v116;
          if (v117 <= 0.01)
          {
            unsigned int v160 = DWORD2(v200[1]);
          }
          else
          {
            *(float *)(v7 + 288) = v116;
            *(_OWORD *)&v206[4] = v173;
            unsigned int v160 = DWORD1(v173);
            unsigned int v118 = v173;
            int v119 = DWORD2(v173);
            uint64_t v169 = (CA *)v178;
            int v120 = HIDWORD(v173);
          }
          unsigned int v159 = v119;
          int v174 = v120;
          CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v210, v7, v119, v120);
          *(_OWORD *)buffer = *(_OWORD *)v210[0].f32;
          long long v198 = *(_OWORD *)v211;
          long long v199 = *(_OWORD *)&v211[16];
          LODWORD(v200[0]) = *(_DWORD *)&v211[32];
          *((void *)&v200[2] + 1) = v212;
          LOBYTE(v201) = v213;
          v210[0] = 0;
          uint64_t v218 = 0;
          CA::OGL::Context::prepare_context(v71, (uint64_t)v210);
          uint64_t v222 = 0x3C003C003C003C00;
          uint64_t v224 = 0;
          uint64_t v223 = 0;
          uint64_t v226 = 0x4013F800000;
          uint64_t v220 = 0;
          float v221 = &CA::identity_transform;
          v219.f64[0] = 0.0;
          *(void *)&v219.f64[1] = &CA::Shape::_infinite_shape;
          uint64_t v225 = 0;
          CA::OGL::Context::push_surface(v71, *(uint64_t *)((char *)buffer + v179), 0, 0, 0);
          (*(void (**)(uint64_t, float64x2_t *))(*(void *)v71 + 1008))(v71, &v219);
          CA::OGL::emit_limit_apl_dimming((void *)v71, *(int **)((char *)&v202 + v179), v183, 1.0, (float)-v118, (float)-v160);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v71 + 832))(v71, v183);
          (*(void (**)(uint64_t, float64x2_t *))(*(void *)v71 + 1016))(v71, &v219);
          CA::OGL::Context::pop_surface((CA::OGL::Context *)v71);
          *((void *)&v200[1] + 1) = __PAIR64__(v159, v160);
          LODWORD(v200[2]) = v174;
          *(void *)((char *)v200 + 4) = __PAIR64__(v164, v165);
          HIDWORD(v200[0]) = v163;
          *(void *)&v200[1] = __PAIR64__(v118, v162);
          for (uint64_t i = 61; i != -61; i -= 61)
          {
            if (v210[i]) {
              __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
            }
          }
          unint64_t v182 = __PAIR64__(LODWORD(v161), LODWORD(v176));
          BOOL v113 = v117 > 0.01;
          double v114 = v176;
        }
        else
        {
          BOOL v113 = 0;
          unint64_t v182 = (unint64_t)vdup_n_s32(0x7FC00000u);
          double v114 = -1.0;
        }
        double v122 = (double)(int)v178;
        *(void *)&long long v199 = v168;
        if (x_log_hook_p())
        {
          IOSurfaceGetID(buffer[0]);
          x_log_();
        }
        else
        {
          double v123 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            __int32 v124 = v231;
            IOSurfaceID ID = IOSurfaceGetID(buffer[0]);
            v210[0].i32[0] = 67111168;
            v210[0].i32[1] = v124;
            v210[1].i16[0] = 1024;
            *(__int32 *)((char *)v210[1].i32 + 2) = ID;
            v210[1].i16[3] = 2048;
            *(void *)float v211 = v169;
            *(_WORD *)&v211[8] = 2048;
            *(double *)&v211[10] = (double)(uint64_t)v169 * 100.0 / v122;
            *(_WORD *)&v211[18] = 2048;
            *(void *)&v211[20] = v166;
            *(_WORD *)&v211[28] = 2048;
            *(double *)&v211[30] = (double)v166 * 100.0 / v122;
            *(_WORD *)&v211[38] = 1024;
            *(_DWORD *)&v211[40] = BYTE4(v228) & 1;
            *(_WORD *)&v211[44] = 2048;
            *(double *)&v211[46] = v114;
            *(_WORD *)&v211[54] = 1024;
            *(_DWORD *)&v211[56] = v113;
            _os_log_impl(&dword_184668000, v123, OS_LOG_TYPE_DEFAULT, "rendering update %u for flipbook to surface 0x%x, copy forward area %6lu[%3.0f%%], render area %6lu[%3.0f%%] root APL filter? %d (apl %.2g, dirty? %d)", (uint8_t *)v210, 0x4Cu);
          }
        }
        if (byte_1EB2ACC23)
        {
          int v126 = *(_DWORD *)(v7 + 292);
          uint64_t v127 = v180;
          if (v126) {
            goto LABEL_174;
          }
          (*(void (**)(uint64_t, IOSurfaceRef, void, void, void, void, void))(*(void *)v71 + 720))(v71, buffer[1], *((void *)&v198 + 1), 0, 0, 0, 0);
          *(_WORD *)(v71 + 832) |= 2u;
          (*(void (**)(uint64_t, IOSurfaceRef, void, void))(*(void *)v71 + 32))(v71, buffer[0], 0, 0);
          if (v186)
          {
            v210[0] = (float32x2_t)0x3804000038040000;
            CA::OGL::Context::paint_region(v71, (uint64_t)v186, (uint64_t *)v210, 1);
          }
          v210[0] = (float32x2_t)0x3804000000003804;
          CA::OGL::Context::paint_region(v71, (uint64_t)v230[0], (uint64_t *)v210, 1);
        }
        int v126 = *(_DWORD *)(v7 + 292);
        uint64_t v127 = v180;
LABEL_174:
        uint64_t v128 = *(void *)v71;
        if (v126 == 1) {
          (*(void (**)(uint64_t))(v128 + 416))(v71);
        }
        else {
          (*(void (**)(uint64_t, uint64_t))(v128 + 408))(v71, 1);
        }
        (*(void (**)(uint64_t, void, void, void))(*(void *)v71 + 32))(v71, 0, 0, 0);
        int v129 = (CA::Shape *)v127[2];
        if (v129)
        {
          CA::Shape::unref(v129);
          v127[2] = 0;
        }
        int v130 = v230[7];
        int v131 = (void *)*v127;
        int v132 = v232;
        *((_DWORD *)v131 + 57) = v231;
        *((_DWORD *)v131 + 58) = v132;
        CA::Render::Update::release_objects(v229);
        int v133 = (void *)*v127;
        v133[30] = v130;
        (*(void (**)(void *, void))(*v133 + 216))(v133, 0);
        *(_WORD *)(v71 + 832) &= ~2u;
        (*(void (**)(uint64_t, void, void))(*(void *)v71 + 80))(v71, 0, 0);
        *(void *)(v71 + 192) = 0;
        if (v186) {
          CA::Shape::unref(v186);
        }
        CA::Render::Update::~Update((CA::Render::Update *)v229, v134);
        if (!buffer[0]) {
          __assert_rtn("render", "windowserver-flipbook.cpp", 140, "frame.surface");
        }
        *((void *)&v199 + 1) = v13;
        if (atomic_fetch_add((atomic_uint *volatile)v185 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(CA::WindowServer::FlipBook *))(*(void *)v185 + 16))(v185);
        }
        float64x2_t v135 = (CA::Render::Context *)*(unsigned int *)(v7 + 48);
        if (v135 != v12)
        {
          CA::WindowServer::FlipBook::invalidate_context(v135);
          *(_DWORD *)(v7 + 48) = v12;
        }
        *(void *)(v7 + 56) = v13;
        os_unfair_lock_lock(lock);
        int v136 = *(unsigned char *)(v7 + 24) & 3;
        if (v136 == 2)
        {
          uint64_t v142 = v7 + 152;
        }
        else if (v136 == 1)
        {
          if (*(_DWORD *)(v7 + 292) == 1
            && (uint64_t v137 = CA::WindowServer::FlipBook::previous_frame_with_seed((CA::WindowServer::FlipBook *)v7, v199 - 1)) != 0)
          {
            long long v138 = *(_OWORD *)v137;
            long long v139 = *(_OWORD *)(v137 + 16);
            long long v140 = *(_OWORD *)(v137 + 32);
            v237[0] = *(_DWORD *)(v137 + 48);
            *(_OWORD *)&buf[16] = v139;
            *(_OWORD *)&uint8_t buf[32] = v140;
            *(_OWORD *)long long buf = v138;
            *(_OWORD *)&v237[1] = *(_OWORD *)(v137 + 52);
            long long v238 = *(_OWORD *)(v137 + 68);
            char v141 = *(unsigned char *)(v137 + 96);
            uint64_t v239 = *(void *)(v137 + 88);
            char v240 = v141;
          }
          else
          {
            uint64_t v239 = 0;
            char v240 = 0;
            memset(buf, 0, sizeof(buf));
            v237[0] = 0;
          }
          uint64_t v142 = v7 + 128;
          (*(void (**)(uint64_t, IOSurfaceRef *, uint8_t *))(*(void *)v7 + 96))(v7, buffer, buf);
        }
        else
        {
          uint64_t v142 = v7 + 80;
        }
        unint64_t v143 = *(void *)(v142 + 8);
        if (v143 >= *(void *)(v142 + 16))
        {
          uint64_t v148 = std::vector<CA::WindowServer::FlipBook::Frame>::__push_back_slow_path<CA::WindowServer::FlipBook::Frame const&>((void **)v142, (long long *)buffer);
        }
        else
        {
          long long v144 = *(_OWORD *)buffer;
          long long v145 = v198;
          long long v146 = v199;
          *(_DWORD *)(v143 + 48) = v200[0];
          *(_OWORD *)(v143 + 16) = v145;
          *(_OWORD *)(v143 + 32) = v146;
          *(_OWORD *)unint64_t v143 = v144;
          *(_OWORD *)(v143 + 52) = *(_OWORD *)((char *)v200 + 4);
          *(_OWORD *)(v143 + 68) = *(_OWORD *)((char *)&v200[1] + 4);
          uint64_t v147 = *((void *)&v200[2] + 1);
          *(unsigned char *)(v143 + 96) = v201;
          *(void *)(v143 + 88) = v147;
          uint64_t v148 = (void *)(v143 + 104);
        }
        *(void *)(v142 + 8) = v148;
        v9[5] = 0;
        uint64_t v149 = *((void *)&v200[2] + 1);
        *((void *)v9 + 3) = v199;
        *((void *)v9 + 5) = v182;
        *((void *)v9 + 6) = v149;
        if (CADeviceHasInternalDiagnostics::once != -1) {
          dispatch_once(&CADeviceHasInternalDiagnostics::once, &__block_literal_global_157);
        }
        long long v150 = (_OWORD *)((char *)&v200[1] + 4);
        if (CADeviceHasInternalDiagnostics::internal) {
          v9[14] = IOSurfaceCreateMachPort(buffer[0]);
        }
        if (*(_DWORD *)(v7 + 292) != 1) {
          long long v150 = (_OWORD *)(*(void *)(v7 + 16) + 168);
        }
        *(_OWORD *)(v9 + 15) = *v150;
        uint64_t v151 = *(void *)(v7 + 128);
        if (v151 != *(void *)(v7 + 136)) {
          *((void *)v9 + 4) = *(void *)(v151 + 32);
        }
        uint64_t v152 = *(void *)(v7 + 80);
        if (v152 != *(void *)(v7 + 88))
        {
          unint64_t v153 = *(void *)(v152 + 32);
          if (v153 >= *((void *)v9 + 4)) {
            unint64_t v153 = *((void *)v9 + 4);
          }
          *((void *)v9 + 4) = v153;
        }
        os_unfair_lock_unlock(lock);
        *(int64x2_t *)(v7 + 32) = vaddq_s64(*(int64x2_t *)(v7 + 32), vdupq_n_s64(1uLL));
        CA::WindowServer::FlipBook::recycle((os_unfair_lock_s *)v7);
        goto LABEL_63;
      }
      float v186 = (CA::Shape *)CA::Shape::new_shape((unsigned int *)v200 + 1);
      CA::shape_subtract(&v186, v230[0], v101, v102);
      float32x2_t v103 = v186;
      if (v186)
      {
        if (v186 == (CA::Shape *)1)
        {
LABEL_149:
          long long v105 = (CA::OGL::Renderer *)v180;
          uint64_t v169 = (CA *)CA::Shape::area(v103);
          goto LABEL_150;
        }
      }
      else if (*((_DWORD *)v186 + 1) == 6)
      {
        goto LABEL_149;
      }
      CA::OGL::Context::copy_surface_region(v71);
      goto LABEL_149;
    }
    os_unfair_lock_lock(lock);
    uint64_t v104 = CA::WindowServer::FlipBook::previous_frame_with_seed((CA::WindowServer::FlipBook *)v7, v89);
    if (v104)
    {
      *(_OWORD *)((char *)v200 + 4) = *(_OWORD *)(v104 + 68);
LABEL_155:
      memset(v211, 0, 32);
      *(_OWORD *)v210[0].f32 = 0u;
      CA::Shape::operator=((uint64_t)v210, v187);
      CA::shape_union((CA::Shape **)v230, (CA::Shape **)v210, v109);
      int32x4_t v167 = *(int32x4_t *)v187;
      *(_OWORD *)((char *)&v200[1] + 4) = *(_OWORD *)v187;
      long long v105 = (CA::OGL::Renderer *)v180;
      if ((v181 & 1) == 0) {
        (*(void (**)(uint64_t, void, void))(*(void *)v71 + 80))(v71, -LODWORD(v187[0]), -HIDWORD(v187[0]));
      }
      v210[0] = (float32x2_t)CA::Shape::new_shape((unsigned int *)v200 + 1);
      CA::shape_subtract((CA::Shape **)v210, v187, v110);
      uint64_t v111 = (CA::Shape *)v210[0];
      uint64_t v169 = (CA *)CA::Shape::area(*(CA::Shape **)v210);
      uint64_t v166 = vmulq_laneq_s32(v167, v167, 3).i32[2];
      CA::Shape::unref(v111);
      goto LABEL_158;
    }
    if (LODWORD(v187[0]) == v195)
    {
      unsigned int v107 = DWORD2(v195);
      int v108 = HIDWORD(v195);
      if (*(CA::Shape **)((char *)v187 + 4) == *(CA::Shape **)((char *)&v195 + 4) && HIDWORD(v187[1]) == HIDWORD(v195))
      {
LABEL_154:
        *(void *)((char *)v200 + 4) = 0;
        *(void *)((char *)v200 + 12) = 0;
        goto LABEL_155;
      }
    }
    else
    {
      unsigned int v107 = DWORD2(v195);
      int v108 = HIDWORD(v195);
    }
    v187[0] = (CA::Shape *)v195;
    v187[1] = (CA::Shape *)__PAIR64__(v108, v107);
    if ((v181 & 1) == 0)
    {
      unsigned int v170 = v107;
      CA::WindowServer::FlipBook::reuse_frame((void *)v7, buffer);
      os_unfair_lock_unlock(lock);
      CA::WindowServer::FlipBook::next_frame((CA::WindowServer::FlipBook *)v210, v7, (int)v170, v108);
      *(_OWORD *)buffer = *(_OWORD *)v210[0].f32;
      long long v198 = *(_OWORD *)v211;
      long long v199 = *(_OWORD *)&v211[16];
      LODWORD(v200[0]) = *(_DWORD *)&v211[32];
      *(_OWORD *)((char *)&v200[1] + 4) = *(_OWORD *)&v211[52];
      *((void *)&v200[2] + 1) = v212;
      LOBYTE(v201) = v213;
      os_unfair_lock_lock(lock);
    }
    goto LABEL_154;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    long long v23 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, "not blanked!", buf, 2u);
    }
  }
  int v22 = 2;
LABEL_62:
  v9[5] = v22;
LABEL_63:
  kdebug_trace();
  if (x_log_hook_p())
  {
    unint64_t v44 = *((void *)v9 + 6);
    if (v44 >= 0x400)
    {
      double v53 = 1.0;
      do
        double v53 = v53 * 0.0009765625;
      while (v53 * (double)v44 >= 1024.0);
    }
    x_log_();
  }
  else
  {
    char v45 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = *((void *)v9 + 3);
      uint64_t v46 = *((void *)v9 + 4);
      int v48 = v9[5];
      double v49 = *((float *)v9 + 11);
      unint64_t v50 = *((void *)v9 + 6);
      double v51 = (double)v50;
      if (v50 >= 0x400)
      {
        double v54 = 1.0;
        do
        {
          double v54 = v54 * 0.0009765625;
          double v52 = v54 * v51;
        }
        while (v54 * v51 >= 1024.0);
      }
      else
      {
        double v52 = (double)v50;
      }
      uint64_t v55 = v50 > 0x3FF;
      if ((v50 & 0xFFFFFFFFFFF00000) != 0) {
        ++v55;
      }
      if ((v50 & 0xFFFFFFFFC0000000) != 0) {
        ++v55;
      }
      if (v50 >> 40) {
        ++v55;
      }
      if (v50 >> 50) {
        ++v55;
      }
      if (v50 >> 60) {
        uint64_t v56 = v55 + 1;
      }
      else {
        uint64_t v56 = v55;
      }
      unint64_t v57 = off_1E527FCB0[v56];
      *(_DWORD *)long long buf = 134219266;
      *(void *)&uint8_t buf[4] = v47;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v46;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v48;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v49;
      *(_WORD *)&buf[38] = 2048;
      *(double *)&buf[40] = v52;
      LOWORD(v237[0]) = 2080;
      *(void *)((char *)v237 + 2) = v57;
      _os_log_impl(&dword_184668000, v45, OS_LOG_TYPE_DEFAULT, "frame_id = %llu, oldest = %llu, status = %u, apl_dimming %f, memory_usage %.2lf %s", buf, 0x3Au);
    }
  }
  pthread_mutex_unlock(v11);
}

uint64_t CA::WindowServer::Server::get_performance_info(CA::WindowServer::Server *this, CA::Render::Object *a2, CFMutableArrayRef *a3, void *a4)
{
  uint64_t v6 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  uint64_t v7 = (const void *)*((void *)a2 + 39);
  if (v7)
  {
    *((void *)a2 + 39) = 0;
    CFArrayAppendValue(*a3, v7);
    CFRelease(v7);
  }

  return pthread_mutex_unlock(v6);
}

void CA::WindowServer::Server::get_od_statistics(CA::WindowServer::Server *this, CA::Render::Object *a2, __CFArray *a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 40; i += 4)
  {
    int valuePtr = 0;
    int valuePtr = *(_DWORD *)(*((void *)a2 + 12) + i + 25408);
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
  }
  for (uint64_t j = 0; j != 40; j += 4)
  {
    int valuePtr = 0;
    int valuePtr = *(_DWORD *)(*((void *)a2 + 12) + j + 25448);
    CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(Mutable, v10);
    CFRelease(v10);
  }
  int valuePtr = *(_DWORD *)(*((void *)a2 + 12) + 25488);
  CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v11);
  CFArrayAppendValue(Mutable, *(const void **)(*((void *)a2 + 12) + 8));
  CFArrayAppendValue(a3, Mutable);
  CFRelease(Mutable);
}

void CA::WindowServer::Server::get_update_histograms(CA::WindowServer::Server *this, CA::Render::Object *a2, CFMutableArrayRef *a3, void *a4)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 1928; i += 8)
  {
    v9[0] = 0;
    v9[0] = *(void *)(*(void *)(*((void *)a2 + 12) + 25400) + i);
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberLongLongType, v9);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
  }
  CFArrayAppendValue(*a3, Mutable);
  CFRelease(Mutable);
  if (*((unsigned char *)a3 + 8)) {
    bzero(*(void **)(*((void *)a2 + 12) + 25400), 0x788uLL);
  }
}

void CA::WindowServer::Server::get_debug_log(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned int *a3, void *a4)
{
  uint64_t v4 = a3;
  uint64_t v248 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x185324A30](this, a2, a3, a4);
  uint64_t v7 = (void *)v6;
  CFStringRef v8 = (const __CFString *)*v4;
  uint64_t v9 = *((void *)v4 + 2);
  uint64_t v231 = v9;
  switch((int)v8)
  {
    case 0:
      char v45 = (void *)v6;
      os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
      unint64_t v46 = *((void *)a2 + 16);
      if (v46)
      {
        unint64_t v47 = 0;
        char v48 = 0;
        while (2)
        {
          uint64_t v49 = *((void *)a2 + 14);
          unint64_t v50 = (CA::Render::Context **)(v49 + 16 * v47);
          while (1)
          {
            double v51 = *v50;
            if ((*((unsigned char *)*v50 + 14) & 2) == 0) {
              break;
            }
            ++v47;
            v50 += 2;
            if (v47 >= v46)
            {
              if ((v48 & 1) == 0) {
                goto LABEL_103;
              }
              goto LABEL_102;
            }
          }
          double v52 = (CA::Render::Context **)(v49 + 16 * v47);
          if ((v48 & 1) == 0)
          {
            long long v244 = 0u;
            long long v245 = 0u;
            long long v242 = 0u;
            long long v243 = 0u;
            long long v240 = 0u;
            long long v241 = 0u;
            long long v238 = 0u;
            long long v239 = 0u;
            long long v236 = 0u;
            long long v237 = 0u;
            long long v234 = 0u;
            long long v235 = 0u;
            memset(v233, 0, sizeof(v233));
            CString = CA_CFStringGetCString(*((const __CFString **)a2 + 13), (char *)v233, 256);
            x_stream_printf(v231, "%s display%s:\n", v54, v55, v56, v57, v58, v59, (uint64_t)CString);
            double v51 = *v52;
          }
          uint64_t v60 = *((unsigned int *)v51 + 4);
          if (!atomic_load((unsigned int *)v51 + 57))
          {
            if (*((_DWORD *)v51 + 63)) {
              pid_t v62 = 0;
            }
            else {
              pid_t v62 = getpid();
            }
            int v63 = 0;
            atomic_compare_exchange_strong((atomic_uint *volatile)v51 + 57, (unsigned int *)&v63, v62);
          }
          CA::Render::Context::process_path(*v52);
          x_stream_printf(v231, "  %x: level %g; pid %d [%s]", v64, v65, v66, v67, v68, v69, v60);
          CFStringRef v76 = *v52;
          if ((*((_WORD *)*v52 + 276) & 4) != 0)
          {
            x_stream_write(v231, " (secure)", 9uLL);
            CFStringRef v76 = *v52;
          }
          if (*((_DWORD *)v76 + 88))
          {
            x_stream_write(v231, " (visible)", 0xAuLL);
            CFStringRef v76 = *v52;
          }
          if ((*((_WORD *)v76 + 276) & 0x800) != 0)
          {
            x_stream_write(v231, " (decode-error)", 0xFuLL);
            CFStringRef v76 = *v52;
          }
          uint64_t v77 = *((void *)v76 + 30);
          uint64_t v9 = v231;
          if (v77) {
            x_stream_printf(v231, " \"%s\"", v70, v71, v72, v73, v74, v75, v77 + 28);
          }
          char v48 = 1;
          x_stream_write(v231, "\n", 1uLL);
          unint64_t v46 = *((void *)a2 + 16);
          if (++v47 < v46) {
            continue;
          }
          break;
        }
LABEL_102:
        x_stream_write(v9, "\n", 1uLL);
      }
LABEL_103:
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
      uint64_t v7 = v45;
      break;
    case 1:
    case 9:
    case 10:
    case 14:
      if (v8 == 9) {
        int v10 = 6;
      }
      else {
        int v10 = 4;
      }
      if (v8 == 14) {
        int v10 = 5;
      }
      CFStringRef v229 = v8;
      if (v8 == 10) {
        int v10 = 0;
      }
      LODWORD(v228) = v10;
      os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
      uint64_t v12 = *((void *)a2 + 16);
      long long v227 = v7;
      if (v12)
      {
        if ((unint64_t)(8 * v12) > 0x1000)
        {
          uint64_t v13 = (char *)malloc_type_malloc(8 * v12, 0x7E90AEA2uLL);
        }
        else
        {
          MEMORY[0x1F4188790](v11);
          uint64_t v13 = (char *)&v223 - ((8 * v12 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v13, 8 * v12);
        }
        uint64_t v14 = 0;
        for (uint64_t i = 0; i != v12; ++i)
        {
          uint64_t v16 = *(void *)(*((void *)a2 + 14) + v14);
          if (v16)
          {
            int v17 = (atomic_uint *)(v16 + 8);
            if (!atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 1u))
            {
              uint64_t v16 = 0;
              atomic_fetch_add(v17, 0xFFFFFFFF);
            }
          }
          *(void *)&v13[8 * i] = v16;
          v14 += 16;
        }
        unint64_t v224 = 8 * v12;
        uint64_t v225 = (CA::Render::Context **)v13;
      }
      else
      {
        unint64_t v224 = 0;
        uint64_t v225 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
      x_stream_push(v9);
      if (v12)
      {
        *(void *)&long long v18 = 67109376;
        long long v223 = v18;
        *(void *)&long long v18 = 67110914;
        long long v226 = v18;
        uint64_t v19 = v225;
        uint64_t j = v4;
        do
        {
          uint64_t v20 = *v19;
          if ((*((unsigned char *)*v19 + 14) & 2) == 0)
          {
            uint64_t v21 = *((void *)v4 + 1);
            if (!v21 || v21 == *((_DWORD *)v20 + 4))
            {
              pthread_mutex_lock((pthread_mutex_t *)((char *)v20 + 72));
              if (x_log_hook_p())
              {
                int v22 = *v19;
                if (!atomic_load((unsigned int *)*v19 + 57))
                {
                  if (*((_DWORD *)v22 + 63)) {
                    pid_t v24 = 0;
                  }
                  else {
                    pid_t v24 = getpid();
                  }
                  int v31 = 0;
                  atomic_compare_exchange_strong((atomic_uint *volatile)v22 + 57, (unsigned int *)&v31, v24);
                }
                CA::Render::Context::process_path(*v19);
                uint64_t v32 = mach_absolute_time();
                CATimeWithHostTime(v32);
                uint64_t v4 = j;
                x_log_();
                uint64_t v9 = v231;
              }
              else
              {
                unint64_t v25 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                {
                  long long v26 = *v19;
                  unsigned int v27 = *((_DWORD *)*v19 + 4);
                  float v28 = *((float *)*v19 + 48);
                  unsigned int v29 = atomic_load((unsigned int *)*v19 + 57);
                  if (!v29)
                  {
                    if (*((_DWORD *)v26 + 63)) {
                      pid_t v30 = 0;
                    }
                    else {
                      pid_t v30 = getpid();
                    }
                    unsigned int v33 = 0;
                    atomic_compare_exchange_strong((atomic_uint *volatile)v26 + 57, &v33, v30);
                    if (v33) {
                      unsigned int v29 = v33;
                    }
                    else {
                      unsigned int v29 = v30;
                    }
                  }
                  double v34 = v28;
                  uint64_t v35 = CA::Render::Context::process_path(*v19) + 7;
                  __int16 v36 = *((_WORD *)*v19 + 276);
                  if ((v36 & 4) != 0) {
                    uint64_t v37 = "(secure) ";
                  }
                  else {
                    uint64_t v37 = "";
                  }
                  if ((v36 & 0x10) != 0) {
                    uint64_t v38 = "(start security analysis) ";
                  }
                  else {
                    uint64_t v38 = "";
                  }
                  if ((v36 & 0x20) != 0) {
                    uint64_t v39 = "(stop security analysis) ";
                  }
                  else {
                    uint64_t v39 = "";
                  }
                  uint64_t v40 = mach_absolute_time();
                  double v41 = CATimeWithHostTime(v40);
                  v233[0] = __PAIR64__(v27, v226);
                  LOWORD(v233[1]) = 2048;
                  *(double *)((char *)&v233[1] + 2) = v34;
                  WORD1(v233[2]) = 1024;
                  HIDWORD(v233[2]) = v29;
                  LOWORD(v233[3]) = 2080;
                  *(void *)((char *)&v233[3] + 2) = v35;
                  WORD1(v233[4]) = 2080;
                  *(void *)((char *)&v233[4] + 4) = v37;
                  WORD2(v233[5]) = 2080;
                  *(void *)((char *)&v233[5] + 6) = v38;
                  HIWORD(v233[6]) = 2080;
                  v233[7] = v39;
                  LOWORD(v234) = 2048;
                  *(double *)((char *)&v234 + 2) = v41;
                  _os_log_impl(&dword_184668000, v25, OS_LOG_TYPE_DEFAULT, "== context %x; level %g; pid %d [%s] %s%s%sat time %f ==\n\n",
                    (uint8_t *)v233,
                    0x4Au);
                  uint64_t v4 = j;
                  uint64_t v9 = v231;
                }
              }
              uint64_t v42 = CA::Render::Context::root_layer_handle(*v19);
              if (v42 && (uint64_t v43 = *(void *)(v42 + 16)) != 0)
              {
                if (v229 == 14)
                {
                  v246[0] = 0;
                  v232[0] = 0;
                  CA::Render::Layer::count_layers(v43, v246, v232, 0);
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    unint64_t v44 = x_log_category_windowserver;
                    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                    {
                      v233[0] = __PAIR64__(v246[0], v223);
                      LOWORD(v233[1]) = 1024;
                      *(_DWORD *)((char *)&v233[1] + 2) = v232[0];
                      _os_log_impl(&dword_184668000, v44, OS_LOG_TYPE_DEFAULT, "\n*** Total Layers: %d, Hidden/Culled Layers: %d ***\n\n", (uint8_t *)v233, 0xEu);
                    }
                  }
                }
                (*(void (**)(uint64_t, void, void))(*(void *)v43 + 40))(v43, 0, v228);
              }
              else
              {
                x_stream_write(v9, "  <null>\n", 9uLL);
              }
              x_stream_write(v9, "\n\n", 2uLL);
              pthread_mutex_unlock((pthread_mutex_t *)((char *)*v19 + 72));
              uint64_t v20 = *v19;
            }
          }
          if (atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(CA::Render::Context *))(*(void *)v20 + 16))(v20);
          }
          ++v19;
          --v12;
        }
        while (v12);
      }
      if (v224 > 0x1000) {
        free(v225);
      }
      x_stream_pop_(v9);
      uint64_t v7 = v227;
      break;
    case 5:
      (*(void (**)(CA::Render::Object *, uint64_t))(*(void *)a2 + 88))(a2, v9);
      break;
    case 11:
      long long v244 = 0u;
      long long v245 = 0u;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v234 = 0u;
      long long v235 = 0u;
      memset(v233, 0, sizeof(v233));
      memset(v232, 0, sizeof(v232));
      if ((*(_DWORD *)(*((void *)a2 + 12) + 624) & 0x40) != 0)
      {
        uint64_t v78 = mach_continuous_time();
        CFStringRef v79 = CACreateDateStringFromHostContinuousTime(v78, 0);
        CA_CFStringGetCString(v79, (char *)v232, 32);
        int v80 = CA_CFStringGetCString(*((const __CFString **)a2 + 13), (char *)v233, 256);
        CATimeWithHostTime(v78);
        x_stream_printf(v9, "== %s display @ t %f (%s) ==\n", v81, v82, v83, v84, v85, v86, (uint64_t)v80);
        uint64_t v87 = *(void *)(*((void *)a2 + 12) + 320);
        if (v87)
        {
          os_unfair_lock_t v228 = (os_unfair_lock_t)(v87 + 8);
          os_unfair_lock_lock((os_unfair_lock_t)(v87 + 8));
          x_stream_printf(v9, "Server-side flipbook %p\n", v88, v89, v90, v91, v92, v93, v87);
          x_stream_printf(v9, "  State: %s\n", v94, v95, v96, v97, v98, v99, (uint64_t)CA::WindowServer::FlipBook::transition_to_state(CA::WindowServer::FlipBookState,BOOL)::state_to_name[*(unsigned char *)(v87 + 24) & 3]);
          x_stream_printf(v9, "  Maximum size: %u\n", v100, v101, v102, v103, v104, v105, *(void *)(v87 + 64));
          uint64_t v112 = *(void *)(v87 + 80);
          uint64_t v113 = *(void *)(v87 + 88);
          if (v112 == v113)
          {
            unint64_t v114 = 0;
          }
          else
          {
            LODWORD(v114) = 0;
            uint64_t v115 = *(void *)(v87 + 80);
            do
            {
              LODWORD(v114) = v114 + *(_DWORD *)(v115 + 88);
              v115 += 104;
            }
            while (v115 != v113);
            unint64_t v114 = (int)v114;
          }
          uint64_t v134 = *(void *)(v87 + 128);
          uint64_t v135 = *(void *)(v87 + 136);
          if (v134 == v135)
          {
            unint64_t v137 = 0;
          }
          else
          {
            int v136 = 0;
            do
            {
              v136 += *(_DWORD *)(v134 + 88);
              v134 += 104;
            }
            while (v134 != v135);
            unint64_t v137 = v136;
          }
          uint64_t v138 = *(void *)(v87 + 152);
          uint64_t v139 = *(void *)(v87 + 160);
          if (v138 == v139)
          {
            unint64_t v141 = 0;
          }
          else
          {
            int v140 = 0;
            do
            {
              v140 += *(_DWORD *)(v138 + 88);
              v138 += 104;
            }
            while (v138 != v139);
            unint64_t v141 = v140;
          }
          uint64_t v142 = *(void *)(v87 + 104);
          uint64_t v143 = *(void *)(v87 + 112);
          long long v227 = v7;
          CFStringRef v229 = v79;
          if (v142 == v143)
          {
            unint64_t v145 = 0;
          }
          else
          {
            int v144 = 0;
            do
            {
              v144 += *(_DWORD *)(v142 + 88);
              v142 += 104;
            }
            while (v142 != v143);
            unint64_t v145 = v144;
          }
          uint64_t v146 = 0x4EC4EC4EC4EC4EC5 * ((v113 - v112) >> 3);
          if (v114 >= 0x400)
          {
            double v147 = 1.0;
            do
              double v147 = v147 * 0.0009765625;
            while (v147 * (double)v114 >= 1024.0);
          }
          x_stream_printf(v9, "  Enqueued size: %u (%.2lf %s)\n", v106, v107, v108, v109, v110, v111, v146);
          if (v141 >= 0x400)
          {
            double v154 = 1.0;
            do
              double v154 = v154 * 0.0009765625;
            while (v154 * (double)v141 >= 1024.0);
          }
          x_stream_printf(v9, "  Suppressed size: %u (%.2lf %s)\n", v148, v149, v150, v151, v152, v153, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v87 + 160) - *(void *)(v87 + 152)) >> 3));
          if (v137 >= 0x400)
          {
            double v161 = 1.0;
            do
              double v161 = v161 * 0.0009765625;
            while (v161 * (double)v137 >= 1024.0);
          }
          x_stream_printf(v9, "  Swapped size: %u (%.2lf %s)\n", v155, v156, v157, v158, v159, v160, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v87 + 136) - *(void *)(v87 + 128)) >> 3));
          if (v145 >= 0x400)
          {
            double v168 = 1.0;
            do
              double v168 = v168 * 0.0009765625;
            while (v168 * (double)v145 >= 1024.0);
          }
          x_stream_printf(v9, "  Free size: %u (%.2lf %s)\n", v162, v163, v164, v165, v166, v167, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v87 + 112) - *(void *)(v87 + 104)) >> 3));
          x_stream_printf(v9, "  Context ID: 0x%x\n", v169, v170, v171, v172, v173, v174, *(unsigned int *)(v87 + 48));
          x_stream_printf(v9, "  Total frames rendered this activation: %u\n", v175, v176, v177, v178, v179, v180, *(void *)(v87 + 40));
          x_stream_printf(v9, "  Total frames rendered: %u\n", v181, v182, v183, v184, v185, v186, *(void *)(v87 + 32));
          *(_OWORD *)float64x2_t v246 = 0u;
          long long v247 = 0u;
          uint64_t v187 = *(void *)(v87 + 80);
          uint64_t v188 = *(void *)(v87 + 88);
          for (uint64_t j = (unsigned int *)v87; v187 != v188; v187 += 104)
          {
            CFStringRef v189 = CACreateDateStringFromHostContinuousTime(*(void *)(v187 + 40), 0);
            CA_CFStringGetCString(v189, (char *)v246, 32);
            uint64_t ID = IOSurfaceGetID(*(IOSurfaceRef *)v187);
            unint64_t v191 = *(void *)(v187 + 88);
            if (v191 >= 0x400)
            {
              double v192 = 1.0;
              do
                double v192 = v192 * 0.0009765625;
              while (v192 * (double)v191 >= 1024.0);
            }
            CATimeWithHostTime(*(void *)(v187 + 40));
            uint64_t v9 = v231;
            x_stream_printf(v231, "    Surface 0x%x (%.2lf %s) @ %f (%s), seed %u enqueued", v193, v194, v195, v196, v197, v198, ID);
            if (v189) {
              CFRelease(v189);
            }
          }
          uint64_t v199 = *((void *)j + 19);
          for (uint64_t k = *((void *)j + 20); v199 != k; v199 += 104)
          {
            CFStringRef v201 = CACreateDateStringFromHostContinuousTime(*(void *)(v199 + 40), 0);
            CA_CFStringGetCString(v201, (char *)v246, 32);
            uint64_t v202 = IOSurfaceGetID(*(IOSurfaceRef *)v199);
            unint64_t v203 = *(void *)(v199 + 88);
            if (v203 >= 0x400)
            {
              double v204 = 1.0;
              do
                double v204 = v204 * 0.0009765625;
              while (v204 * (double)v203 >= 1024.0);
            }
            CATimeWithHostTime(*(void *)(v199 + 40));
            uint64_t v9 = v231;
            x_stream_printf(v231, "    Surface 0x%x (%.2lf %s) @ %f (%s), seed %u suppressed\n", v205, v206, v207, v208, v209, v210, v202);
            if (v201) {
              CFRelease(v201);
            }
          }
          uint64_t v211 = *((void *)j + 16);
          for (uint64_t m = *((void *)j + 17); v211 != m; v211 += 104)
          {
            CFStringRef v213 = CACreateDateStringFromHostContinuousTime(*(void *)(v211 + 40), 0);
            CA_CFStringGetCString(v213, (char *)v246, 32);
            uint64_t v214 = IOSurfaceGetID(*(IOSurfaceRef *)v211);
            unint64_t v215 = *(void *)(v211 + 88);
            if (v215 >= 0x400)
            {
              double v216 = 1.0;
              do
                double v216 = v216 * 0.0009765625;
              while (v216 * (double)v215 >= 1024.0);
            }
            CATimeWithHostTime(*(void *)(v211 + 40));
            uint64_t v9 = v231;
            x_stream_printf(v231, "    Surface 0x%x (%.2lf %s) @ %f (%s), seed %u, swap %u\n", v217, v218, v219, v220, v221, v222, v214);
            if (v213) {
              CFRelease(v213);
            }
          }
          x_stream_write(v9, "\n", 1uLL);
          os_unfair_lock_unlock(v228);
          uint64_t v7 = v227;
          CFStringRef v79 = v229;
        }
        x_stream_write(v9, "\n", 1uLL);
        if (v79) {
          CFRelease(v79);
        }
      }
      break;
    case 12:
      long long v227 = (void *)v6;
      os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
      uint64_t v117 = *((void *)a2 + 16);
      if (v117)
      {
        uint64_t j = (unsigned int *)(8 * v117);
        if ((unint64_t)(8 * v117) > 0x1000)
        {
          int v119 = (char *)malloc_type_malloc(8 * v117, 0xD39B5D6DuLL);
        }
        else
        {
          MEMORY[0x1F4188790](v116);
          int v119 = (char *)&v223 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v119, v118);
        }
        uint64_t v130 = 0;
        for (uint64_t n = 0; n != v117; ++n)
        {
          uint64_t v132 = *(void *)(*((void *)a2 + 14) + v130);
          if (v132)
          {
            int v133 = (atomic_uint *)(v132 + 8);
            if (!atomic_fetch_add((atomic_uint *volatile)(v132 + 8), 1u))
            {
              uint64_t v132 = 0;
              atomic_fetch_add(v133, 0xFFFFFFFF);
            }
          }
          *(void *)&v119[8 * n] = v132;
          v130 += 16;
        }
      }
      else
      {
        int v119 = 0;
        uint64_t j = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
      x_stream_push(v9);
      if (v117)
      {
        char v120 = 0;
        float64x2_t v121 = (atomic_uint **)v119;
        do
        {
          double v122 = *v121;
          if ((*((unsigned char *)*v121 + 14) & 2) == 0)
          {
            if ((v120 & 1) == 0)
            {
              long long v244 = 0u;
              long long v245 = 0u;
              long long v242 = 0u;
              long long v243 = 0u;
              long long v240 = 0u;
              long long v241 = 0u;
              long long v238 = 0u;
              long long v239 = 0u;
              long long v236 = 0u;
              long long v237 = 0u;
              long long v234 = 0u;
              long long v235 = 0u;
              memset(v233, 0, sizeof(v233));
              double v123 = CA_CFStringGetCString(*((const __CFString **)a2 + 13), (char *)v233, 256);
              x_stream_printf(v231, "%s display%s:\n", v124, v125, v126, v127, v128, v129, (uint64_t)v123);
              double v122 = *v121;
            }
            CA::Render::Context::show_hosts((CA::Render::Context *)v122);
            double v122 = *v121;
            char v120 = 1;
          }
          if (atomic_fetch_add(v122 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v122 + 16))(v122);
          }
          ++v121;
          --v117;
        }
        while (v117);
      }
      x_stream_pop_(v231);
      uint64_t v7 = v227;
      if (v119 && (unint64_t)j > 0x1000) {
        free(v119);
      }
      break;
    case 15:
      (*(void (**)(void, uint64_t))(**((void **)a2 + 12) + 2104))(*((void *)a2 + 12), v9);
      break;
    default:
      break;
  }
}

uint64_t CA::WindowServer::Server::set_ax_matrix(CA::WindowServer::Server *this, CA::Render::Object *a2, float *a3, void *a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  CA::WindowServer::Server::set_accessibility_color_matrix(a2, a3, a3[9]);
  CA::WindowServer::Server::invalidate((os_unfair_lock_s *)a2, *(const CA::Shape **)(*((void *)a2 + 12) + 216));
  uint64_t v6 = 0;
  int64x2_t v7 = vdupq_n_s64(0x10000uLL);
  return (*(uint64_t (**)(CA::Render::Object *, uint64_t *, double))(*(void *)a2 + 184))(a2, &v6, 0.0);
}

uint64_t CA::WindowServer::Server::set_accessibility_color_matrix(CA::WindowServer::Server *this, float *a2, float a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  (*(void (**)(void, float *, float))(**((void **)this + 12) + 1456))(*((void *)this + 12), a2, a3);
  uint64_t v13 = 0;
  __asm { FMOV            V0.2D, #2.0 }
  long long v14 = _Q0;
  (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(void *)this + 184))(this, &v13, 0.0);
  return pthread_mutex_unlock(v6);
}

uint64_t CA::WindowServer::Server::purge_server(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v5 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  uint64_t v6 = mach_absolute_time();
  double v7 = CATimeWithHostTime(v6);
  CA::Render::collect((CA::Render *)1, v7);
  (*(void (**)(CA::Render::Object *))(*(void *)a2 + 456))(a2);

  return pthread_mutex_unlock(v5);
}

uint64_t CA::WindowServer::Server::display_changed(CA::WindowServer::Server *this, os_unfair_lock_s *a2, const CA::Shape **a3, void *a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(const CA::Shape ***)&a2[24]._os_unfair_lock_opaque == a3)
  {
    CA::WindowServer::Server::invalidate(a2, a3[27]);
    uint64_t v6 = 0;
    int64x2_t v7 = vdupq_n_s64(0x800000uLL);
    return (*(uint64_t (**)(os_unfair_lock_s *, uint64_t *, double))(*(void *)&a2->_os_unfair_lock_opaque
                                                                            + 184))(a2, &v6, 0.0);
  }
  return result;
}

void CA::WindowServer::Server::set_display_latency(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a3 + 1) == *(_DWORD *)(*((void *)a2 + 12) + 24))
  {
    uint64_t v6 = *((void *)a3 + 9);
    uint64_t v7 = *((void *)a3 + 10);
    uint64_t v8 = (*(uint64_t (**)(CA::Render::Object *))(*(void *)a2 + 384))(a2);
    if (v8)
    {
      uint64_t v9 = (__CFRunLoop *)v8;
      int v10 = strndup((const char *)a3 + 8, 0x40uLL);
      uint64_t v11 = (const void *)*MEMORY[0x1E4F1D418];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      void v13[2] = ___ZN2CA12WindowServer6Server19set_display_latencyEPNS_6Render6ObjectEPvS5__block_invoke;
      v13[3] = &__block_descriptor_tmp_82;
      v13[4] = a2;
      v13[5] = v10;
      v13[6] = v6;
      v13[7] = v7;
      CFRunLoopPerformBlock(v9, v11, v13);
      CFRunLoopWakeUp(v9);
      *(unsigned char *)a3 = 1;
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v12 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_ERROR, "No display runloop! Ignoring latency update.", buf, 2u);
      }
    }
  }
}

void ___ZN2CA12WindowServer6Server19set_display_latencyEPNS_6Render6ObjectEPvS5__block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, double))(**(void **)(a1 + 32) + 176))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(double *)(a1 + 56));
  xpc_object_t v2 = *(void **)(a1 + 40);

  free(v2);
}

uint64_t CA::WindowServer::Server::set_display_user_prefs(CA::WindowServer::Server *this, CA::Render::Object *a2, _DWORD *a3, void *a4)
{
  uint64_t result = *((void *)a2 + 12);
  if (a3[1] == *(_DWORD *)(result + 24))
  {
    uint64_t result = CA::WindowServer::Display::set_user_preferences(result, a3[2] != 0, a3[3], 0);
    *(unsigned char *)a3 = 1;
  }
  return result;
}

void CA::WindowServer::Server::set_display_properties(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3[1];
  int v6 = *((_DWORD *)a3 + 4);
  char v7 = *((unsigned char *)a3 + 20);
  char v8 = *((unsigned char *)a3 + 40);
  int v9 = *((_DWORD *)a3 + 6);
  uint64_t v10 = *(void *)((char *)a3 + 28);
  int v11 = *((_DWORD *)a3 + 9);
  int v13 = *((_DWORD *)a3 + 11);
  mach_port_name_t v12 = *((_DWORD *)a3 + 12);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  int v17 = ___ZN2CA12WindowServer6Server22set_display_propertiesEPNS_6Render6ObjectEPvS5__block_invoke;
  long long v18 = &__block_descriptor_tmp_73_16670;
  int v21 = v13;
  int v22 = v9;
  uint64_t v19 = a2;
  uint64_t v20 = v5;
  uint64_t v23 = v10;
  int v24 = v11;
  int v25 = v6;
  char v27 = v7;
  char v28 = v8;
  mach_port_name_t v26 = v12;
  if (*(_DWORD *)a3 == *(_DWORD *)(*((void *)a2 + 12) + 24) && !mach_port_mod_refs(*MEMORY[0x1E4F14960], v12, 0, 1))
  {
    long long v14 = (__CFRunLoop *)(*(uint64_t (**)(CA::Render::Object *))(*(void *)a2 + 384))(a2);
    if (v14)
    {
      uint64_t v15 = v14;
      CFRunLoopPerformBlock(v14, (CFTypeRef)*MEMORY[0x1E4F1D418], block);
      CFRunLoopWakeUp(v15);
    }
    else
    {
      v17((uint64_t)block);
    }
  }
}

uint64_t ___ZN2CA12WindowServer6Server22set_display_propertiesEPNS_6Render6ObjectEPvS5__block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 48);
  if ((v2 & 8) != 0)
  {
    int v3 = *(_DWORD *)(a1 + 52);
    if (v3)
    {
      if (v3 != *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 96) + 32))
      {
        int v7 = 1;
        if ((v2 & 0x10) == 0) {
          goto LABEL_35;
        }
        goto LABEL_13;
      }
    }
  }
  if ((v2 & 1) == 0 || (uint64_t v4 = *(void *)(a1 + 40)) == 0)
  {
    int v7 = 0;
    if ((v2 & 0x10) == 0) {
      goto LABEL_35;
    }
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (!byte_1EB2ACC22)
  {
    int v6 = (pthread_mutex_t *)(*(void *)(v5 + 96) + 496);
    pthread_mutex_lock(v6);
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 24));
    (*(void (**)(void))(**(void **)(v5 + 96) + 728))();
    (*(void (**)(uint64_t))(*(void *)v5 + 400))(v5);
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 24));
    pthread_mutex_unlock(v6);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v2 = *(_DWORD *)(a1 + 48);
  }
  int v7 = CA::WindowServer::Display::Mode::operator==(*(void *)(*(void *)(v5 + 96) + 640), v4) ^ 1;
  if ((v2 & 0x10) != 0)
  {
LABEL_13:
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 96);
    double v9 = (*(double (**)(uint64_t))(*(void *)v8 + 32))(v8);
    float v10 = 1.0
        / (*(double (**)(void))(**(void **)(*(void *)(a1 + 32) + 96) + 24))(*(void *)(*(void *)(a1 + 32) + 96));
    if ((*(unsigned char *)(v8 + 746) & 0x10) != 0)
    {
      float v11 = (float)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
      if (((*(unsigned __int16 *)(v8 + 656) >> 10) & 3 | 4) == 4)
      {
        mach_port_name_t v12 = (int *)(v8 + 88);
      }
      else
      {
        mach_port_name_t v12 = (int *)(v8 + 80);
        if (!*(_DWORD *)(v8 + 80) || !*(_DWORD *)(v8 + 84)) {
          mach_port_name_t v12 = (int *)(v8 + 72);
        }
      }
      float v13 = v11 / (float)*v12;
      unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 72))(v8);
      unint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
      if (((*(unsigned __int16 *)(v8 + 656) >> 10) & 3 | 4) == 4)
      {
        uint64_t v16 = v8 + 88;
      }
      else
      {
        uint64_t v16 = v8 + 80;
        if (!*(_DWORD *)(v8 + 80) || !*(_DWORD *)(v8 + 84)) {
          uint64_t v16 = v8 + 72;
        }
      }
      float v17 = (float)(v14 / v15) / (float)*(int *)(v16 + 4);
      if (v17 >= v13) {
        float v17 = v13;
      }
      if (v17 < v10) {
        float v10 = v17;
      }
    }
    long long v18 = *(CA::WindowServer::Server **)(a1 + 32);
    if ((*(_WORD *)(*((void *)v18 + 12) + 656) & 0x1C00) == 0x400
      && (float v19 = 1.0 / v9, v20 = *(float *)(a1 + 56), v20 >= v19)
      && ((float v21 = *(float *)(a1 + 60), v21 > v10) ? (v22 = 1) : (v22 = v7), (v22 & 1) == 0))
    {
      CA::WindowServer::Server::set_scale(v18, v20, v21);
      int v7 = 0;
    }
    else
    {
      int v7 = 1;
    }
  }
LABEL_35:
  int v23 = *(_DWORD *)(a1 + 48);
  if ((v23 & 0x20) != 0)
  {
    int v24 = *(_DWORD *)(a1 + 64);
    if ((v24 - 5) < 0xFFFFFFFC) {
      char v25 = 1;
    }
    else {
      char v25 = v7;
    }
    if (v25)
    {
      int v7 = 1;
      goto LABEL_56;
    }
    int v7 = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 96) + 148) = v24;
    int v23 = *(_DWORD *)(a1 + 48);
  }
  if ((v7 & 1) == 0 && (v23 & 2) != 0)
  {
    int v26 = *(_DWORD *)(a1 + 68);
    if (v26)
    {
      CA::WindowServer::Server::set_overscan_adjustment(*(void *)(a1 + 32), v26);
      int v23 = *(_DWORD *)(a1 + 48);
    }
  }
  if ((v23 & 4) != 0) {
    char v27 = v7;
  }
  else {
    char v27 = 1;
  }
  if ((v27 & 1) == 0)
  {
    (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 96) + 280))(*(void *)(*(void *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 76));
    int v23 = *(_DWORD *)(a1 + 48);
  }
  if ((v23 & 0x80) != 0) {
    char v28 = v7;
  }
  else {
    char v28 = 1;
  }
  if ((v28 & 1) == 0)
  {
    (*(void (**)(void, void))(**(void **)(a1 + 32) + 496))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 77));
    int v7 = 0;
  }
LABEL_56:
  *(void *)&msg.msgh_voucher_port = 0;
  *(void *)&msg.msgh_bits = 0x1C00000013;
  msg.msgh_remote_port = *(_DWORD *)(a1 + 72);
  msg.msgh_local_port = 0;
  msg.msgh_id = v7 ^ 1;
  int v31 = 0;
  if ((mach_msg(&msg, 1, 0x1Cu, 0, 0, 0, 0) - 268435459) <= 1) {
    mach_msg_destroy(&msg);
  }
  return mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 72));
}

uint64_t CA::WindowServer::Server::set_scale(CA::WindowServer::Server *this, double a2, double a3)
{
  int v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  uint64_t v7 = *((void *)this + 12);
  CA::WindowServer::Display::sanitize_dimension_scale((CA::WindowServer::Display *)v7, a2, (double)*(int *)(v7 + 160), (double)*(int *)(v7 + 96));
  double v9 = v8;
  CA::WindowServer::Display::sanitize_dimension_scale((CA::WindowServer::Display *)v7, a3, (double)*(int *)(v7 + 164), (double)*(int *)(v7 + 100));
  double v17 = *(double *)(v7 + 128);
  if (v17 != v9 || (double v17 = *(double *)(v7 + 136), v17 != v10))
  {
    *(double *)(v7 + 128) = v9;
    *(double *)(v7 + 136) = v10;
    CA::WindowServer::Display::update_geometry(v7, v10, v17, v11, v12, v13, v14, v15, v16);
  }
  CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((void *)this + 12) + 216));

  return pthread_mutex_unlock(v6);
}

uint64_t CA::WindowServer::Server::set_overscan_adjustment(uint64_t a1, int a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  uint64_t v13 = *(void *)(a1 + 96);
  unsigned int v14 = *(unsigned __int16 *)(v13 + 656);
  if (((v14 >> 8) & 3) != a2)
  {
    *(_WORD *)(v13 + 656) = v14 & 0xFCFF | ((a2 & 3) << 8);
    CA::WindowServer::Display::update_geometry(v13, v5, v6, v7, v8, v9, v10, v11, v12);
    CA::WindowServer::Display::post_display_changed(v13);
  }

  return pthread_mutex_unlock(v4);
}

void CA::WindowServer::Server::get_display_auto_luminance_boost(CA::WindowServer::Server *this, CA::Render::Object *a2, float *a3, void *a4)
{
  uint64_t v4 = (_DWORD *)*((void *)a2 + 12);
  if (*((_DWORD *)a3 + 1) == v4[6])
  {
    *(unsigned char *)a3 = 1;
    a3[2] = (*(float (**)(_DWORD *))(*(void *)v4 + 1080))(v4);
  }
}

double CA::WindowServer::Server::get_display_logical_bounds(CA::WindowServer::Server *this, CA::Render::Object *a2, char *a3, void *a4)
{
  uint64_t v4 = *((void *)a2 + 12);
  if (*((_DWORD *)a3 + 1) == *(_DWORD *)(v4 + 24))
  {
    int v6 = *(_DWORD *)(v4 + 192);
    int v5 = *(_DWORD *)(v4 + 196);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      *a3 = 1;
      uint64_t v8 = *(void *)(v4 + 184);
      v9.i64[0] = (int)v8;
      v9.i64[1] = SHIDWORD(v8);
      *(float64x2_t *)(a3 + 8) = vcvtq_f64_s64(v9);
      double result = (double)v6;
      *((double *)a3 + 3) = (double)v6;
      *((double *)a3 + 4) = (double)v5;
    }
  }
  return result;
}

uint64_t CA::WindowServer::Server::render_display_context_list(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t result = CA::WindowServer::display_name_matches((CFTypeRef *)a2, *((CA::WindowServer::Server **)a3 + 1), (const __CFString *)((a3[88] >> 4) & 1));
  if (result)
  {
    uint64_t v7 = *((void *)a3 + 3);
    a3[88] |= 0x20u;
    if (v7)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
      *(void *)&long long v8 = *((void *)a3 + 5);
      *((void *)&v8 + 1) = *(void *)(*((void *)a3 + 4) + 8);
      long long v50 = v8;
      bzero(v54, 0x448uLL);
      CA::Render::Update::Update((CA::Render::Update *)v54, 0, 0, *((double *)a3 + 6), 0, 0, 0, 0, (const CA::Bounds *)&v50, *((_DWORD *)a3 + 14) | *((_DWORD *)a2 + 46));
      if (v54[0])
      {
        if (CADeviceNeedsP3ShapeTracking::once != -1) {
          dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_59);
        }
        if (*((unsigned char *)a2 + 514)) {
          unint64_t v10 = (unint64_t)(a3[4] == 0) << 7;
        }
        else {
          unint64_t v10 = 0;
        }
        unint64_t v11 = v10 | (v58 | ((unint64_t)v59 << 32)) & 0xFFFFEFFFDEFFFE7FLL | ((unint64_t)CADeviceNeedsP3ShapeTracking::p3_tracking << 24) | ((unint64_t)a3[5] << 8);
        unint64_t v12 = v11 | ((unint64_t)a3[7] << 44);
        unsigned int v58 = v11 | ((a3[88] & 2) << 28);
        unsigned __int16 v59 = WORD2(v12);
        v56[8] = (*(uint64_t (**)(void))(**((void **)a2 + 12) + 1400))();
        if (a3[7])
        {
          uint64_t v13 = *((void *)a2 + 12);
          if (v13)
          {
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            *(_OWORD *)uint64_t v60 = 0u;
            long long v61 = 0u;
            CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)v60, v13);
            CA::Render::Update::set_display_attributes((uint64_t)v54, (float *)v60);
          }
        }
        uint64_t v14 = *((void *)a3 + 3);
        unint64_t v15 = v58 & 0xBFFFFFFF | ((unint64_t)v59 << 32) | ((unint64_t)a3[6] << 30);
        unsigned int v58 = v58 & 0xBFFFFFFF | (a3[6] << 30) | 0x10008004;
        unsigned __int16 v59 = WORD2(v15);
        int v57 = *(_DWORD *)a3;
        BOOL v17 = *((void *)a3 + 8) != 1
           || (uint64_t v16 = *((void *)a3 + 9), (*(unsigned char *)(v16 + 144) & 0x1F) != 0)
           || *(double *)(v16 + 96) != 0.0
           || *(double *)(v16 + 104) != 0.0;
        v53[0] = 0;
        v53[1] = 0;
        CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v53);
        uint64_t v18 = *((void *)a3 + 2);
        if (v18)
        {
          uint64_t v19 = v18 - 1;
          do
          {
            uint64_t v20 = *(void *)(v14 + 8 * v19);
            pthread_mutex_lock((pthread_mutex_t *)(v20 + 72));
            uint64_t v21 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v20);
            if (v21 && *(void *)(v21 + 16))
            {
              memset(v51, 0, sizeof(v51));
              uint64_t v22 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v20);
              if (v22) {
                uint64_t v22 = *(void *)(v22 + 16);
              }
              CA::Render::Layer::compute_frame_transform(v22, 0, (CA::Mat4Impl *)v51, 0);
              uint64_t v69 = 0;
              long long v67 = 0u;
              long long v68 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              *(_OWORD *)uint64_t v60 = 0u;
              if (v17)
              {
                if (*((void *)a3 + 8) == 1) {
                  uint64_t v23 = 0;
                }
                else {
                  uint64_t v23 = v19;
                }
                uint64_t v24 = *((void *)a3 + 9) + 152 * v23;
                long long v25 = *(_OWORD *)(v24 + 16);
                long long v26 = *(_OWORD *)(v24 + 32);
                long long v27 = *(_OWORD *)(v24 + 48);
                *(_OWORD *)uint64_t v60 = *(_OWORD *)v24;
                long long v61 = v25;
                long long v62 = v26;
                long long v63 = v27;
                long long v28 = *(_OWORD *)(v24 + 80);
                long long v29 = *(_OWORD *)(v24 + 96);
                long long v30 = *(_OWORD *)(v24 + 112);
                long long v64 = *(_OWORD *)(v24 + 64);
                long long v65 = v28;
                long long v66 = v29;
                long long v67 = v30;
                long long v68 = *(_OWORD *)(v24 + 128);
                LOBYTE(v69) = *(unsigned char *)(v24 + 144) & 7;
                LOBYTE(v69) = *(unsigned char *)(v24 + 144) & 8 | v69;
                LOBYTE(v69) = v69 | *(unsigned char *)(v24 + 144) & 0x10;
                CA::Transform::set((uint64_t)v52, (CA::Mat4Impl *)v51, 1);
                v33.n128_f64[0] = CA::Transform::concat_left((CA::Transform *)v60, v52, v31, v32);
              }
              else
              {
                __n128 v33 = CA::Transform::set((uint64_t)v60, (CA::Mat4Impl *)v51, 1);
              }
              if ((a3[88] & 4) != 0)
              {
                v33.n128_u32[0] = *(_DWORD *)(*((void *)a3 + 4) + 12);
                float64x2_t v34 = CA::Transform::translate((CA::Transform *)v60, 0.0, (double)v33.n128_u64[0], 0.0);
                v34.f64[0] = 1.0;
                CA::Transform::scale((float64x2_t *)v60, v34, -1.0, 1.0);
              }
              uint64_t v35 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v20);
              if (v35) {
                __int16 v36 = *(CA::Render::Layer **)(v35 + 16);
              }
              else {
                __int16 v36 = 0;
              }
              CA::Render::Update::add_context((CA::Render::Update *)v54, (CA::Render::Context *)v20, v36, (const CA::Transform *)v60);
            }
            else
            {
              CA::Render::Update::add_context((CA::Render::Update *)v54, (CA::Render::Context *)v20);
            }
            pthread_mutex_unlock((pthread_mutex_t *)(v20 + 72));
            --v19;
          }
          while (v19 != -1);
        }
        CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v53);
        CA::Render::Update::added_all_contexts(v54, v37, v38);
        CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v53);
        long long v61 = 0u;
        long long v62 = 0u;
        *(_OWORD *)uint64_t v60 = 0u;
        CA::Shape::operator=((uint64_t)v60, &v50);
        CA::shape_union(v55, v60, v39);
        uint64_t v40 = v56[9];
        *((void *)a3 + 10) = v56[10];
        (*(void (**)(void, uint64_t, void, void, void))(**((void **)a3 + 4) + 24))(*((void *)a3 + 4), v40, *((unsigned int *)a3 + 15), 0, 0);
        uint64_t v42 = CA::WindowServer::wrap_buffer(*((CA::WindowServer **)a2 + 12), *((CA::WindowServer::Display **)a3 + 4), v41);
        if (v42)
        {
          uint64_t v43 = (CA::WindowServer::Surface *)v42;
          if ((*(unsigned int (**)(CA::Render::Object *, uint64_t **, float *, long long *, void, void))(*(void *)a2 + 432))(a2, v54, v42, &v50, a3[88] & 1, *((unsigned int *)a3 + 15)))
          {
            char v45 = ~(4 * *((unsigned char *)v43 + 228)) & 0x20;
          }
          else
          {
            char v45 = 0;
          }
          a3[88] = a3[88] & 0xDF | v45;
          uint64_t v46 = *((void *)a3 + 4);
          CA::Render::Update::render_edr_factor((CA::Render::Update *)v54, v44);
          (*(void (**)(uint64_t))(*(void *)v46 + 32))(v46);
          if (BYTE5(ca_debug_options)) {
            CA::WindowServer::print_layer_trees((uint64_t)v56, 1, *(double *)&v55[7]);
          }
          if (initialized != -1) {
            dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
          }
          if (*(float *)&dword_1EB2ACAC0)
          {
            unint64_t v47 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)v43 + 160))(v43);
            if (v47)
            {
              char v48 = CAIOSurfaceWriteToFileWithSuffix(v47, "snapshot-contexts");
              free(v48);
              if (*(float *)&dword_1EB2ACAC0 > 0.0) {
                *(float *)&dword_1EB2ACAC0 = *(float *)&dword_1EB2ACAC0 + -1.0;
              }
            }
          }
          if (*((void *)v43 + 9))
          {
            uint64_t v49 = (void (*)(CA::WindowServer::Surface *))*((void *)v43 + 10);
            if (v49) {
              v49(v43);
            }
          }
          *((void *)v43 + 9) = 0;
          *((void *)v43 + 10) = 0;
          CA::WindowServer::Surface::unref(v43);
        }
        else
        {
          a3[88] &= ~0x20u;
        }
      }
      CA::Render::Update::~Update((CA::Render::Update *)v54, v9);
      return pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
  }
  return result;
}

BOOL CA::WindowServer::display_name_matches(CFTypeRef *this, CA::WindowServer::Server *value, const __CFString *a3)
{
  if (a3 && (CFSetRef v5 = (const __CFSet *)*((void *)this[12] + 2)) != 0)
  {
    int v6 = CFSetContainsValue(v5, value);
  }
  else
  {
    if (CFEqual(this[13], value)) {
      return 1;
    }
    if ((*((unsigned char *)this[12] + 745) & 0x20) == 0) {
      return 0;
    }
    int v6 = CFEqual(value, @"defaultDisplay");
  }
  return v6 != 0;
}

float *CA::WindowServer::wrap_buffer(CA::WindowServer *this, CA::WindowServer::Display *a2, CA::Render::RenderTarget *a3)
{
  if ((*(unsigned int (**)(CA::WindowServer::Display *))(*(void *)a2 + 16))(a2))
  {
    CFSetRef v5 = (__IOSurface *)*((void *)a2 + 2);
    if (v5)
    {
      return CA::WindowServer::IOSurface::wrap_buffer(this, v5, (__IOSurface *)1, 1);
    }
    return 0;
  }
  if (!*((void *)a2 + 3)) {
    return 0;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (float *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x110uLL, 0x743898A5uLL);
  if (result)
  {
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v10 = *((void *)a2 + 2);
    uint64_t v9 = *((void *)a2 + 3);
    uint64_t v11 = *(void *)(v9 + 24);
    unint64_t v12 = (atomic_uint *)(v9 + 8);
    if (!atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u))
    {
      uint64_t v9 = 0;
      atomic_fetch_add(v12, 0xFFFFFFFF);
    }
    *((void *)result + 1) = this;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((void *)result + 6) = 0;
    *((void *)result + 7) = v8;
    *((void *)result + 8) = 0x3F80000042475241;
    *((void *)result + 11) = 0;
    *((void *)result + 12) = 0;
    *((void *)result + 10) = 0;
    result[26] = 0.0;
    *(_OWORD *)(result + 27) = xmmword_184997E20;
    result[31] = 1.0;
    *((_OWORD *)result + 8) = xmmword_184997E30;
    *((void *)result + 18) = 0;
    *((_WORD *)result + 76) = 0;
    *(void *)(result + 39) = 0x100000001;
    *((unsigned char *)result + 196) = 0;
    *(_OWORD *)(result + 45) = 0u;
    *(_OWORD *)(result + 41) = 0u;
    result[50] = 1.0;
    *(void *)(result + 53) = 0;
    *(void *)(result + 51) = 0;
    result[55] = NAN;
    unint64_t v13 = (*((unsigned int *)result + 56) | ((unint64_t)*((unsigned __int8 *)result + 228) << 32)) & 0xC038000000 | 0x140000001;
    *((_DWORD *)result + 56) = result[56] & 0x38000000 | 0x40000001;
    *((_WORD *)result + 114) = BYTE4(v13);
    *((void *)result + 29) = 0;
    *((void *)result + 30) = v11;
    *(void *)uint64_t result = &unk_1ED023EB8;
    *((void *)result + 31) = v10;
    *((void *)result + 33) = v9;
  }
  return result;
}

uint64_t CA::WindowServer::Server::render_display_layer(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned __int16 *a3, void *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t result = CA::WindowServer::display_name_matches((CFTypeRef *)a2, *((CA::WindowServer::Server **)a3 + 1), (const __CFString *)(HIBYTE(a3[40]) & 1));
  if (result)
  {
    a3[40] |= 0x200u;
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    *(void *)&long long v7 = *((void *)a3 + 5);
    *((void *)&v7 + 1) = *(void *)(*((void *)a3 + 4) + 8);
    long long v44 = v7;
    bzero(v45, 0x448uLL);
    CA::Render::Update::Update((CA::Render::Update *)v45, 0, 0, *((double *)a3 + 6), 0, 0, 0, 0, (const CA::Bounds *)&v44, *((_DWORD *)a3 + 14) | *((_DWORD *)a2 + 46));
    if (!v45[0])
    {
LABEL_40:
      CA::Render::Update::~Update((CA::Render::Update *)v45, v8);
      return pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
    if (CADeviceNeedsP3ShapeTracking::once != -1) {
      dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_59);
    }
    if (*((unsigned char *)a2 + 514)) {
      unint64_t v9 = (unint64_t)(*((unsigned char *)a3 + 4) == 0) << 7;
    }
    else {
      unint64_t v9 = 0;
    }
    unint64_t v10 = v9 | (v49 | ((unint64_t)v50 << 32)) & 0xFFFFEFFFDEFFFF7FLL | ((unint64_t)CADeviceNeedsP3ShapeTracking::p3_tracking << 24);
    unint64_t v11 = v10 | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 44);
    unsigned int v49 = v10 | ((a3[40] & 0x40) << 23);
    unsigned __int16 v50 = WORD2(v11);
    v47[8] = (*(uint64_t (**)(void))(**((void **)a2 + 12) + 1400))();
    if (*((unsigned char *)a3 + 7))
    {
      unint64_t v12 = (CA::Render::LayerNode *)*((void *)a2 + 12);
      if (v12)
      {
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        *(_OWORD *)double v51 = 0u;
        long long v52 = 0u;
        CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)v51, (uint64_t)v12);
        CA::Render::Update::set_display_attributes((uint64_t)v45, (float *)v51);
      }
    }
    unint64_t v14 = (v49 | ((unint64_t)v50 << 32)) & 0xFFFFAFFF1FFBLL | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 30);
    int v48 = *(_DWORD *)a3;
    unint64_t v15 = HIDWORD(v14);
    LODWORD(v14) = v14 & 0xFFFF9FFF | (((a3[40] >> 1) & 1) << 13) & 0xFFFFBFFF | (((a3[40] >> 3) & 1) << 14) | 0x10008004;
    unsigned __int16 v50 = v15;
    unsigned int v49 = v14;
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16)
    {
LABEL_18:
      CA::Render::Update::added_all_contexts(v45, v12, v13);
      long long v52 = 0u;
      long long v53 = 0u;
      *(_OWORD *)double v51 = 0u;
      CA::Shape::operator=((uint64_t)v51, &v44);
      CA::shape_union(v46, v51, v28);
      uint64_t v29 = v47[9];
      *((void *)a3 + 9) = v47[10];
      (*(void (**)(void, uint64_t, void, void, void))(**((void **)a3 + 4) + 24))(*((void *)a3 + 4), v29, *((unsigned int *)a3 + 15), 0, 0);
      uint64_t v31 = CA::WindowServer::wrap_buffer(*((CA::WindowServer **)a2 + 12), *((CA::WindowServer::Display **)a3 + 4), v30);
      unsigned __int16 v32 = a3[40];
      if (v31)
      {
        __n128 v33 = (CA::WindowServer::Surface *)v31;
        if ((*(unsigned int (**)(CA::Render::Object *, uint64_t **, float *, long long *, void, void))(*(void *)a2 + 432))(a2, v45, v31, &v44, v32 & 1, *((unsigned int *)a3 + 15)))
        {
          int v35 = ~(*((unsigned __int8 *)v33 + 228) << 6) & 0x200;
        }
        else
        {
          int v35 = 0;
        }
        unsigned __int16 v36 = a3[40];
        a3[40] = v36 & 0xFDFF | v35;
        if (v35)
        {
          if ((v36 & 2) != 0 && (v36 & 4) != 0)
          {
            uint64_t v37 = (*(uint64_t (**)(CA::Render::Object *))(*(void *)a2 + 392))(a2);
            if (v37) {
              a3[40] = a3[40] & 0xFDFF | ((*(unsigned char *)(v37 + 100) == 0) << 9);
            }
          }
        }
        uint64_t v38 = *((void *)a3 + 4);
        CA::Render::Update::render_edr_factor((CA::Render::Update *)v45, v34);
        (*(void (**)(uint64_t))(*(void *)v38 + 32))(v38);
        if (BYTE5(ca_debug_options)) {
          CA::WindowServer::print_layer_trees((uint64_t)v47, 1, *(double *)&v46[7]);
        }
        if (initialized != -1) {
          dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
        }
        if (*(float *)&dword_1EB2ACAC0)
        {
          uint64_t v39 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)v33 + 160))(v33);
          if (v39)
          {
            uint64_t v40 = CAIOSurfaceWriteToFileWithSuffix(v39, "snapshot-layer");
            free(v40);
            if (*(float *)&dword_1EB2ACAC0 > 0.0) {
              *(float *)&dword_1EB2ACAC0 = *(float *)&dword_1EB2ACAC0 + -1.0;
            }
          }
        }
        if (*((void *)v33 + 9))
        {
          double v41 = (void (*)(CA::WindowServer::Surface *))*((void *)v33 + 10);
          if (v41) {
            v41(v33);
          }
        }
        *((void *)v33 + 9) = 0;
        *((void *)v33 + 10) = 0;
        CA::WindowServer::Surface::unref(v33);
      }
      else
      {
        a3[40] = v32 & 0xFDFF;
      }
      goto LABEL_40;
    }
    pthread_mutex_lock((pthread_mutex_t *)(v16 + 72));
    BOOL v17 = (CA::Shape **)*((void *)a3 + 8);
    uint64_t v60 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    *(_OWORD *)double v51 = 0u;
    if ((a3[40] & 0x20) != 0)
    {
      long long v18 = *((_OWORD *)v17 + 1);
      long long v19 = *((_OWORD *)v17 + 2);
      long long v20 = *((_OWORD *)v17 + 3);
      *(_OWORD *)double v51 = *(_OWORD *)v17;
      long long v52 = v18;
      long long v53 = v19;
      long long v54 = v20;
      long long v21 = *((_OWORD *)v17 + 5);
      long long v22 = *((_OWORD *)v17 + 6);
      long long v23 = *((_OWORD *)v17 + 7);
      long long v55 = *((_OWORD *)v17 + 4);
      long long v56 = v21;
      long long v57 = v22;
      long long v58 = v23;
      long long v59 = *((_OWORD *)v17 + 8);
      HIDWORD(v24) = DWORD1(v59);
      LOBYTE(v60) = (_BYTE)v17[18] & 7;
      LOBYTE(v60) = (_BYTE)v17[18] & 8 | v60;
      LOBYTE(v60) = v60 | (_BYTE)v17[18] & 0x10;
      LODWORD(v24) = *(_DWORD *)(*((void *)a3 + 4) + 12);
      BOOL v17 = v51;
      float64x2_t v25 = CA::Transform::translate((CA::Transform *)v51, 0.0, (double)v24, 0.0);
      v25.f64[0] = 1.0;
      CA::Transform::scale((float64x2_t *)v51, v25, -1.0, 1.0);
    }
    uint64_t v26 = CA::Render::Context::lookup_object(*(void *)(v16 + 136), *(_DWORD *)(v16 + 148), *((void *)a3 + 3), 0, 29, 0);
    if (!v26)
    {
LABEL_17:
      pthread_mutex_unlock((pthread_mutex_t *)(v16 + 72));
      goto LABEL_18;
    }
    long long v27 = (CA::Render::Layer *)v26;
    if ((a3[40] & 0x10) == 0)
    {
LABEL_16:
      CA::Render::Update::add_context((CA::Render::Update *)v45, (CA::Render::Context *)v16, (CA::Render::Layer *)v26, (const CA::Transform *)v17);
      goto LABEL_17;
    }
    uint64_t v42 = *(atomic_uint **)(v26 + 104);
    if ((*(unsigned char *)(v26 + 13) & 0x20) != 0)
    {
      if (!v42) {
        goto LABEL_16;
      }
      uint64_t v43 = v42 + 2;
      if (!atomic_fetch_add(v42 + 2, 1u)) {
        atomic_fetch_add(v43, 0xFFFFFFFF);
      }
      CA::Render::Layer::set_single_sublayer(v26, 0);
      CA::Render::Update::add_context((CA::Render::Update *)v45, (CA::Render::Context *)v16, v27, (const CA::Transform *)v17);
      CA::Render::Layer::set_single_sublayer((uint64_t)v27, v42);
    }
    else
    {
      if (!v42) {
        goto LABEL_16;
      }
      uint64_t v43 = v42 + 2;
      if (!atomic_fetch_add(v42 + 2, 1u)) {
        atomic_fetch_add(v43, 0xFFFFFFFF);
      }
      CA::Render::Layer::set_sublayers(v26, 0);
      CA::Render::Update::add_context((CA::Render::Update *)v45, (CA::Render::Context *)v16, v27, (const CA::Transform *)v17);
      CA::Render::Layer::set_sublayers((uint64_t)v27, v42);
    }
    if (atomic_fetch_add(v43, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v42 + 16))(v42);
    }
    goto LABEL_17;
  }
  return result;
}

void CA::WindowServer::Server::render_display(CA::WindowServer::Server *this, CA::Render::Object *a2, char *a3, void *a4)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (CA::WindowServer::display_name_matches((CFTypeRef *)a2, *((CA::WindowServer::Server **)a3 + 1), (const __CFString *)((a3[96] >> 4) & 1))&& *((_DWORD *)a3 + 16) <= 3u)
  {
    a3[96] |= 0x20u;
    os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
    uint64_t v7 = *((void *)a2 + 16);
    if (v7)
    {
      unint64_t v8 = 8 * v7;
      if ((unint64_t)(8 * v7) > 0x1000)
      {
        unint64_t v9 = (char *)malloc_type_malloc(8 * v7, 0x90586702uLL);
      }
      else
      {
        MEMORY[0x1F4188790](v6);
        unint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v9, 8 * v7);
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *(void *)(*((void *)a2 + 14) + v10);
        if (v13)
        {
          unint64_t v14 = (atomic_uint *)(v13 + 8);
          if (!atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u))
          {
            uint64_t v13 = 0;
            atomic_fetch_add(v14, 0xFFFFFFFF);
          }
        }
        *(void *)&v9[8 * v11++] = v13;
        v10 += 16;
      }
      while (v7 != v11);
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
      long long v66 = (pthread_mutex_t *)((char *)a2 + 24);
      pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
      char v70 = 0;
      v69[0] = 0;
      v69[1] = 0;
      uint64_t v15 = v7 - 1;
      unsigned __int8 v68 = 0;
      do
      {
        uint64_t v16 = *(void *)&v9[8 * v15];
        pthread_mutex_lock((pthread_mutex_t *)(v16 + 72));
        CA::WindowServer::get_context_logical_bounds((CA::WindowServer *)v16, (CA::Render::Context *)&v70, v69, (CA::Bounds *)&v68, v17);
        pthread_mutex_unlock((pthread_mutex_t *)(v16 + 72));
        _CF = v15-- != 0;
      }
      while (_CF && !v70);
      uint64_t v19 = *((void *)a2 + 12);
      if (v70)
      {
        CA::WindowServer::Display::set_logical_bounds((CA::WindowServer::Display *)v19, (const CA::Bounds *)v69, v68);
      }
      else
      {
        int v20 = *(_DWORD *)(v19 + 745);
        if ((v20 & 2) != 0)
        {
          *(void *)(v19 + 184) = 0;
          *(void *)(v19 + 192) = 0;
          *(_DWORD *)(v19 + 745) = v20 & 0xFFFFFFED;
          CA::WindowServer::Display::update_actual_bounds((CA::WindowServer::Display *)v19);
        }
      }
      *(void *)&long long v21 = *(void *)(a3 + 44);
      *((void *)&v21 + 1) = *(void *)(*((void *)a3 + 2) + 8);
      long long v67 = v21;
      bzero(v90, 0x448uLL);
      CA::Render::Update::Update((CA::Render::Update *)v90, 0, 0, *((double *)a3 + 7), 0, 0, 0, 0, (const CA::Bounds *)&v67, *((_DWORD *)a3 + 17) | *((_DWORD *)a2 + 46));
      if (v90[0])
      {
        int v23 = *((_DWORD *)a3 + 16);
        switch(v23)
        {
          case 3:
            operator new();
          case 2:
            operator new();
          case 1:
            operator new();
        }
        if (CADeviceNeedsP3ShapeTracking::once != -1) {
          dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_59);
        }
        if (*((unsigned char *)a2 + 514)) {
          unint64_t v24 = (unint64_t)(a3[4] == 0) << 7;
        }
        else {
          unint64_t v24 = 0;
        }
        unint64_t v25 = v24 | (v96 | ((unint64_t)v97 << 32)) & 0xFFFFEFFF8EFFFE7BLL | ((unint64_t)CADeviceNeedsP3ShapeTracking::p3_tracking << 24) | ((unint64_t)a3[5] << 8) | ((unint64_t)a3[6] << 30);
        int v93 = *(_DWORD *)a3;
        int v95 = *((_DWORD *)a3 + 10);
        unint64_t v26 = v25 | ((unint64_t)a3[7] << 44);
        LODWORD(v25) = v25 | ((a3[96] & 2) << 28) | 0x10000004;
        unsigned __int16 v97 = WORD2(v26);
        unsigned int v96 = v25;
        v92[8] = (*(uint64_t (**)(void))(**((void **)a2 + 12) + 1400))();
        uint64_t v81 = 0;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v72 = 0u;
        uint64_t v27 = *((void *)a3 + 10);
        if (v27 && (*(unsigned char *)(v27 + 144) & 0x10) == 0)
        {
          long long v28 = (_DWORD *)*((void *)a2 + 12);
          int v29 = v28[44];
          int v30 = v28[45];
          int v31 = (*(uint64_t (**)(_DWORD *))(*(void *)v28 + 840))(v28);
          unsigned int v32 = *(unsigned __int8 *)(*((void *)a3 + 10) + 144);
          int v33 = v31 - (v32 & (2 * v32) & 2 | (v32 >> 2) & 1) + 4;
          int v34 = v33 & 3;
          int v36 = -v33;
          _NF = v36 < 0;
          int v37 = v36 & 3;
          if (_NF) {
            int v38 = v34;
          }
          else {
            int v38 = -v37;
          }
          switch(v38)
          {
            case 3:
              __asm { FMOV            V1.2D, #1.0 }
              LOBYTE(v81) = v81 & 0xE0 | 4;
              long long v73 = 0uLL;
              long long v76 = 0u;
              long long v77 = xmmword_184997D50;
              long long v79 = xmmword_184997D60;
              long long v80 = _Q1;
              long long v72 = xmmword_184997D60;
              long long v74 = xmmword_184997E00;
              long long v75 = 0u;
              *(double *)&long long v78 = (double)v30;
              *((void *)&v78 + 1) = 0;
              break;
            case 2:
              CA::Transform::set_affine_rectilinear((CA::Transform *)&v72, -1.0, -1.0, (double)v29, (double)v30);
              break;
            case 1:
              __asm { FMOV            V1.2D, #1.0 }
              LOBYTE(v81) = v81 & 0xE0 | 7;
              long long v73 = 0uLL;
              long long v79 = xmmword_184997D60;
              long long v80 = _Q1;
              long long v72 = xmmword_184998450;
              long long v76 = 0u;
              long long v77 = xmmword_184997D50;
              long long v74 = xmmword_184997D50;
              long long v75 = 0u;
              *(void *)&long long v78 = 0;
              *((double *)&v78 + 1) = (double)v29;
              break;
            default:
              long long v72 = xmmword_184997D50;
              long long v73 = 0u;
              long long v74 = xmmword_184997D60;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v77 = xmmword_184997D50;
              long long v78 = 0u;
              long long v79 = xmmword_184997D60;
              __asm { FMOV            V0.2D, #1.0 }
              long long v80 = _Q0;
              LOBYTE(v81) = v81 & 0xE0;
              break;
          }
          uint64_t v94 = &v72;
        }
        if (a3[7])
        {
          uint64_t v44 = *((void *)a2 + 12);
          if (v44)
          {
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)&v82, v44);
            CA::Render::Update::set_display_attributes((uint64_t)v90, (float *)&v82);
          }
        }
        uint64_t v65 = 8 * v7;
        v71[0] = 0;
        v71[1] = 0;
        CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v71);
        do
        {
          uint64_t v45 = *(void *)&v9[8 * v12 - 8];
          pthread_mutex_lock((pthread_mutex_t *)(v45 + 72));
          uint64_t v46 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v45);
          if (v46) {
            unint64_t v47 = *(CA::Render::Layer **)(v46 + 16);
          }
          else {
            unint64_t v47 = 0;
          }
          --v12;
          CA::Render::Update::add_context((CA::Render::Update *)v90, (CA::Render::Context *)v45, v47, *((const CA::Transform **)a3 + 10));
          pthread_mutex_unlock((pthread_mutex_t *)(v45 + 72));
        }
        while (v12);
        CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v71);
        CA::Render::Update::added_all_contexts(v90, v48, v49);
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        CA::Shape::operator=((uint64_t)&v82, &v67);
        CA::shape_union(v91, (CA::Shape **)&v82, v50);
        uint64_t v51 = v92[9];
        *((void *)a3 + 11) = v92[10];
        (*(void (**)(void, uint64_t, void, void, void))(**((void **)a3 + 2) + 24))(*((void *)a3 + 2), v51, *((unsigned int *)a3 + 18), 0, 0);
        long long v53 = CA::WindowServer::wrap_buffer(*((CA::WindowServer **)a2 + 12), *((CA::WindowServer::Display **)a3 + 2), v52);
        unsigned int v54 = a3[96];
        if (v53)
        {
          long long v55 = (CA::WindowServer::Surface *)v53;
          int v56 = (*(uint64_t (**)(CA::Render::Object *, uint64_t **, float *, long long *, void, void))(*(void *)a2 + 432))(a2, v90, v53, &v67, (v54 >> 2) & 1, *((unsigned int *)a3 + 18));
          unint64_t v8 = v65;
          if (v56) {
            char v58 = ~(4 * *((unsigned char *)v55 + 228)) & 0x20;
          }
          else {
            char v58 = 0;
          }
          a3[96] = a3[96] & 0xDF | v58;
          uint64_t v59 = *((void *)a3 + 2);
          CA::Render::Update::render_edr_factor((CA::Render::Update *)v90, v57);
          (*(void (**)(uint64_t))(*(void *)v59 + 32))(v59);
          if (BYTE5(ca_debug_options)) {
            CA::WindowServer::print_layer_trees((uint64_t)v92, 1, *(double *)&v91[7]);
          }
          if (initialized != -1) {
            dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
          }
          if (*(float *)&dword_1EB2ACAC0)
          {
            uint64_t v60 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)v55 + 160))(v55);
            if (v60)
            {
              uint64_t v61 = CAIOSurfaceWriteToFileWithSuffix(v60, "snapshot-display");
              free(v61);
              if (*(float *)&dword_1EB2ACAC0 > 0.0) {
                *(float *)&dword_1EB2ACAC0 = *(float *)&dword_1EB2ACAC0 + -1.0;
              }
            }
          }
          if (*((void *)v55 + 9))
          {
            long long v62 = (void (*)(CA::WindowServer::Surface *))*((void *)v55 + 10);
            if (v62) {
              v62(v55);
            }
          }
          *((void *)v55 + 9) = 0;
          *((void *)v55 + 10) = 0;
          CA::WindowServer::Surface::unref(v55);
        }
        else
        {
          a3[96] = v54 & 0xDF;
          unint64_t v8 = v65;
        }
        CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v71);
      }
      CA::Render::Update::~Update((CA::Render::Update *)v90, v22);
      pthread_mutex_unlock(v66);
      for (uint64_t i = 0; i != v7; ++i)
      {
        long long v64 = *(atomic_uint **)&v9[8 * i];
        if (v64 && atomic_fetch_add(v64 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v64 + 16))(v64);
        }
      }
      if (v8 > 0x1000) {
        free(v9);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
    }
  }
}

BOOL CA::WindowServer::anonymous namespace'::StopBeforeSlotDelegate::update_layer(CA::WindowServer::_anonymous_namespace_::StopBeforeSlotDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  int v4 = *((unsigned __int8 *)this + 52);
  if (!*((unsigned char *)this + 52))
  {
    uint64_t v6 = *((void *)a4 + 18);
    if (v6)
    {
      if (*(_DWORD *)(v6 + 84) == *((_DWORD *)this + 12))
      {
        *((void *)a3 + 3) |= 0x2000000uLL;
        *((unsigned char *)this + 52) = 1;
      }
    }
  }
  return v4 == 0;
}

void CA::WindowServer::anonymous namespace'::StopBeforeSlotDelegate::~StopBeforeSlotDelegate(CA::WindowServer::_anonymous_namespace_::StopBeforeSlotDelegate *this)
{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x185323DC0);
}

{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t *CA::WindowServer::anonymous namespace'::StopAfterDelegate::did_include_context(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this, CA::Render::Context *a2)
{
  int v3 = (void *)((char *)this + 8);
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)this + 1, *((_DWORD *)a2 + 4));
  if (result) {
    uint64_t result = (uint64_t *)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v3, result);
  }
  if (!*((void *)this + 4)) {
    *((unsigned char *)this + 48) = 1;
  }
  return result;
}

BOOL CA::WindowServer::anonymous namespace'::StopAfterDelegate::can_include_context(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this, CA::Render::Context *a2)
{
  return *((unsigned char *)this + 48) == 0;
}

BOOL CA::WindowServer::anonymous namespace'::StopAfterDelegate::update_layer(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  return *((unsigned char *)this + 48) == 0;
}

void CA::WindowServer::anonymous namespace'::StopAfterDelegate::~StopAfterDelegate(CA::WindowServer::_anonymous_namespace_::StopAfterDelegate *this)
{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x185323DC0);
}

{
  *(void *)this = &unk_1ED023D78;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t CA::WindowServer::Server::ping_server(CA::WindowServer::Server *this, CA::Render::Object *a2, void *a3, void *a4)
{
  CFSetRef v5 = (pthread_mutex_t *)(*((void *)a2 + 12) + 496);
  uint64_t result = pthread_mutex_trylock(v5);
  if (!result)
  {
    uint64_t v7 = (pthread_mutex_t *)((char *)a2 + 24);
    pthread_mutex_lock(v7);
    pthread_mutex_unlock(v7);
    return pthread_mutex_unlock(v5);
  }
  return result;
}

CA::WindowServer::Server *CA::WindowServer::Server::Server(CA::WindowServer::Server *this, CA::WindowServer::Display *a2, CFTypeRef cf)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1ED026670;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 12) = a2;
  *((void *)this + 13) = cf;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 72) = 1;
  *((void *)this + 40) = 0;
  *((_OWORD *)this + 21) = xmmword_184998350;
  *((_OWORD *)this + 22) = xmmword_184998280;
  *((_OWORD *)this + 23) = xmmword_184997E30;
  *((void *)this + 48) = 0;
  *((_WORD *)this + 196) = 0;
  *(void *)((char *)this + 396) = 0x100000001;
  *(_OWORD *)((char *)this + 404) = 0u;
  *(_OWORD *)((char *)this + 420) = 0u;
  *((unsigned char *)this + 436) = 0;
  *((_DWORD *)this + 110) = 1065353216;
  *(void *)((char *)this + 452) = 0;
  *(void *)((char *)this + 444) = 0;
  *((_DWORD *)this + 115) = -1;
  *((_WORD *)this + 232) = 0;
  *((unsigned char *)this + 466) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 60) = 0;
  *((unsigned char *)this + 515) = 1;
  CFRetain(cf);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  CA::Render::add_observer(1u, 0, (uint64_t)CA::WindowServer::Server::context_created, (uint64_t)this, 0);
  CA::Render::add_observer(0xCu, 0, (uint64_t)CA::WindowServer::Server::ping_server, (uint64_t)this, 0);
  CA::Render::add_observer(0x13u, 0, (uint64_t)CA::WindowServer::Server::render_display, (uint64_t)this, 0);
  CA::Render::add_observer(0x14u, 0, (uint64_t)CA::WindowServer::Server::render_display_layer, (uint64_t)this, 0);
  CA::Render::add_observer(0x15u, 0, (uint64_t)CA::WindowServer::Server::render_display_context_list, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Au, 0, (uint64_t)CA::WindowServer::Server::get_displays, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Bu, 0, (uint64_t)CA::WindowServer::Server::get_display_info, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Cu, 0, (uint64_t)CA::WindowServer::Server::get_display_edr_state, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Du, 0, (uint64_t)CA::WindowServer::Server::get_display_logical_bounds, (uint64_t)this, 0);
  CA::Render::add_observer(0x1Eu, 0, (uint64_t)CA::WindowServer::Server::get_display_auto_luminance_boost, (uint64_t)this, 0);
  CA::Render::add_observer(0x20u, 0, (uint64_t)CA::WindowServer::Server::set_display_properties, (uint64_t)this, 0);
  CA::Render::add_observer(0x21u, 0, (uint64_t)CA::WindowServer::Server::set_display_preset_properties, (uint64_t)this, 0);
  CA::Render::add_observer(0x23u, 0, (uint64_t)CA::WindowServer::Server::set_display_latency, (uint64_t)this, 0);
  CA::Render::add_observer(0x22u, 0, (uint64_t)CA::WindowServer::Server::set_display_user_prefs, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Fu, 0, (uint64_t)CA::WindowServer::Server::display_changed, (uint64_t)this, 0);
  CA::Render::add_observer(0x26u, 0, (uint64_t)CA::WindowServer::Server::purge_server, (uint64_t)this, 0);
  CA::Render::add_observer(0x27u, 0, (uint64_t)CA::WindowServer::Server::set_ax_matrix, (uint64_t)this, 0);
  CA::Render::add_observer(0x30u, 0, (uint64_t)CA::WindowServer::Server::get_debug_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x28u, 0, (uint64_t)CA::WindowServer::Server::get_update_histograms, (uint64_t)this, 0);
  CA::Render::add_observer(0x29u, 0, (uint64_t)CA::WindowServer::Server::get_od_statistics, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Du, 0, (uint64_t)CA::WindowServer::Server::get_performance_info, (uint64_t)this, 0);
  if ((*((_DWORD *)a2 + 156) & 0x40) != 0)
  {
    CA::Render::add_observer(0xDu, 0, (uint64_t)CA::WindowServer::Server::flipbook_render, (uint64_t)this, 0);
    CA::Render::add_observer(0xEu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_frame, (uint64_t)this, 0);
    CA::Render::add_observer(0xFu, 0, (uint64_t)CA::WindowServer::Server::flipbook_query_memory_usage, (uint64_t)this, 0);
    CA::Render::add_observer(0x10u, 0, (uint64_t)CA::WindowServer::Server::flipbook_copy_current_frame, (uint64_t)this, 0);
    CA::Render::add_observer(0x11u, 0, (uint64_t)CA::WindowServer::Server::flipbook_cancel, (uint64_t)this, 0);
    CA::Render::add_observer(0x12u, 0, (uint64_t)CA::WindowServer::Server::flipbook_modify, (uint64_t)this, 0);
  }
  CA::Render::add_observer(0x34u, 0, (uint64_t)CA::WindowServer::Server::get_surface_replaceability, (uint64_t)this, 0);
  CA::Render::add_observer(0x3Fu, 0, (uint64_t)CA::WindowServer::Server::content_stream_state_changed, (uint64_t)this, 0);
  CA::Render::add_observer(0x40u, 0, (uint64_t)CA::WindowServer::Server::content_stream_modified, (uint64_t)this, 0);
  CA::Render::add_observer(0x41u, 0, (uint64_t)CA::WindowServer::Server::get_display_state_shmem, (uint64_t)this, 0);
  CA::Render::add_observer(0x42u, 0, (uint64_t)CA::WindowServer::Server::set_display_state, (uint64_t)this, 0);
  __int16 v5 = *(_WORD *)(*((void *)this + 12) + 656);
  if ((v5 & 0x1C00) != 0)
  {
    CA::Render::add_observer(0x3Cu, 0, (uint64_t)CA::WindowServer::Server::get_active_display_count, (uint64_t)this, 0);
    __int16 v5 = *(_WORD *)(*((void *)this + 12) + 656);
  }
  if ((v5 & 0x1C00) == 0) {
    CA::Render::add_observer(0x46u, 0, (uint64_t)CA::WindowServer::Server::debug_display_state_old_interface, (uint64_t)this, 0);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, this, (CFNotificationCallback)CA::WindowServer::Server::debug_changed, @"kCADebugOptionsDidChange", 0, CFNotificationSuspensionBehaviorCoalesce);
  if (CADeviceNeedsISPWorkaround::once[0] != -1) {
    dispatch_once(CADeviceNeedsISPWorkaround::once, &__block_literal_global_104);
  }
  if (CADeviceNeedsISPWorkaround::isp_workaround == 1)
  {
    uint64_t v7 = &isp_notifications;
    do
    {
      CStringPtr = CFStringGetCStringPtr(*v7, 0);
      *((unsigned char *)v7 + 12) = notify_register_check(CStringPtr, (int *)v7 + 2) == 0;
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFStringRef v10 = *v7;
      v7 += 2;
      CFNotificationCenterAddObserver(DarwinNotifyCenter, this, (CFNotificationCallback)CA::WindowServer::Server::isp_state_changed, v10, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
    while (v7 != (__CFString **)&CA::WindowServer::Server::check_performance(CA::OGL::Renderer *,CA::Render::Update *)::time_threshold);
  }
  if (CADeviceSupportsAPT::once[0] != -1) {
    dispatch_once(CADeviceSupportsAPT::once, &__block_literal_global_52);
  }
  if (CADeviceSupportsAPT::supports_apt && (*(_DWORD *)(*((void *)this + 12) + 624) & 0x10) != 0)
  {
    out_tokeuint64_t n = 0;
    uint64_t v11 = (const char *)*MEMORY[0x1E4F14918];
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke;
    handler[3] = &__block_descriptor_tmp_16685;
    handler[4] = this;
    uint32_t v12 = notify_register_dispatch(v11, &out_token, MEMORY[0x1E4F14428], handler);
    if (v12)
    {
      uint32_t v13 = v12;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v14 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          uint32_t v24 = v13;
          _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_ERROR, "Failed to register for thermal pressure notification: 0x%x", buf, 8u);
        }
      }
    }
    else
    {
      CA::WindowServer::Server::thermal_pressure_level_changed(this, out_token);
    }
  }
  if (CADeviceSupportsAndromeda::once != -1) {
    dispatch_once(&CADeviceSupportsAndromeda::once, &__block_literal_global_86);
  }
  if (CADeviceSupportsAndromeda::supports_andromeda)
  {
    if ((*(_WORD *)(*((void *)this + 12) + 656) & 0x1C00) == 0)
    {
      out_tokeuint64_t n = 0;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      v20[2] = ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke_7;
      v20[3] = &__block_descriptor_tmp_8_16688;
      v20[4] = this;
      uint32_t v17 = notify_register_dispatch("com.apple.iokit.hid.displayStatus", &out_token, MEMORY[0x1E4F14428], v20);
      if (v17)
      {
        uint32_t v18 = v17;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v19 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109120;
            uint32_t v24 = v18;
            _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_ERROR, "Failed to register for display state notification: 0x%x", buf, 8u);
          }
        }
      }
    }
  }
  if (CADeviceSupportsMedina::once[0] != -1) {
    dispatch_once(CADeviceSupportsMedina::once, &__block_literal_global_314);
  }
  char v15 = CADeviceSupportsMedina::medina;
  if (CADeviceSupportsMedina::medina) {
    char v15 = (*(_WORD *)(*((void *)this + 12) + 656) & 0x1C00) == 0;
  }
  *((unsigned char *)this + 525) = v15;
  if ((*(unsigned int (**)(CA::WindowServer::Display *))(*(void *)a2 + 520))(a2)) {
    CA::WindowServer::Server::create_blank_context(this);
  }
  return this;
}

void ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke(uint64_t a1, int a2)
{
}

void CA::WindowServer::Server::thermal_pressure_level_changed(CA::WindowServer::Server *this, int token)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t state64 = 0;
  if (!notify_get_state(token, &state64))
  {
    *((unsigned char *)this + 517) = state64 > 0x1D;
    atomic_store(1u, (unsigned __int8 *)this + 464);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v3 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v6 = state64;
        _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "ThermalPressureLevel=%llu", buf, 0xCu);
      }
    }
  }
}

void ___ZN2CA12WindowServer6ServerC2EPNS0_7DisplayEPK10__CFString_block_invoke_7(uint64_t a1, int token)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  v12[0] = 0;
  if (!notify_get_state(token, v12) && !byte_1EB2ACC89)
  {
    uint64_t v3 = v12[0];
    BOOL v4 = v12[0] == 0;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 24));
    uint64_t v5 = *(void *)(v2 + 96);
    *(_DWORD *)(v5 + 745) = *(_DWORD *)(v5 + 745) & 0xFFFEFFFF | (v4 << 16);
    if (v3)
    {
      *(void *)(v5 + 696) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 24));
    }
    else
    {
      uint64_t v6 = x_list_copy(*(uint64_t **)(*(void *)(v2 + 96) + 40));
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 24));
      if (v6)
      {
        uint64_t v7 = v6;
        do
        {
          uint64_t v8 = *v7;
          unint64_t v9 = (pthread_mutex_t *)(*v7 + 24);
          pthread_mutex_lock(v9);
          uint64_t v10 = *(void *)(v8 + 96);
          if ((*(_DWORD *)(v10 + 624) & 0x80) != 0 && *(void *)(v10 + 48) == v2) {
            (*(void (**)(uint64_t))(*(void *)v10 + 704))(v10);
          }
          pthread_mutex_unlock(v9);
          uint64_t v7 = (void *)v7[1];
        }
        while (v7);
        do
        {
          uint64_t v11 = (void *)v6[1];
          free(v6);
          uint64_t v6 = v11;
        }
        while (v11);
      }
    }
    if (BYTE9(xmmword_1EB2ACC10)) {
      kdebug_trace();
    }
  }
}

void CA::WindowServer::Server::isp_state_changed(CA::WindowServer::Server *this, __CFNotificationCenter *a2, CFTypeRef cf1, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  uint64_t v8 = 0;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t state64 = 0;
  unint64_t v9 = (pthread_mutex_t *)((char *)a2 + 24);
  do
  {
    if (CFEqual(cf1, *(__CFString **)((char *)&isp_notifications + v8)))
    {
      if (notify_get_state(*(_DWORD *)((char *)&isp_notifications + v8 + 8), &state64))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v11 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_ERROR, "Failed to get camera state.", buf, 2u);
          }
        }
      }
      else
      {
        BOOL v10 = state64 == 1;
        pthread_mutex_lock(v9);
        *((unsigned char *)a2 + 522) = v10;
        pthread_mutex_unlock(v9);
      }
    }
    v8 += 16;
  }
  while (v8 != 32);
  if ((*(_WORD *)(*((void *)a2 + 12) + 656) & 0x1C00) == 0x400) {
    CA::WindowServer::Server::set_allows_display_compositing(a2, state64 == 0);
  }
}

uint64_t CA::WindowServer::Server::set_allows_display_compositing(CA::WindowServer::Server *this, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*((unsigned __int8 *)this + 515) != a2)
  {
    *((unsigned char *)this + 515) = a2;
    CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((void *)this + 12) + 216));
    uint64_t v6 = 0;
    int64x2_t v7 = vdupq_n_s64(0x400000uLL);
    (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(void *)this + 184))(this, &v6, 0.0);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::WindowServer::Server::debug_changed(CA::WindowServer::Server *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int64x2_t v7 = (pthread_mutex_t *)((char *)a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
  *((unsigned char *)a2 + 520) = 1;
  CA::WindowServer::Server::invalidate((os_unfair_lock_s *)a2, *(const CA::Shape **)(*((void *)a2 + 12) + 216));
  uint64_t v9 = 0;
  int64x2_t v10 = vdupq_n_s64(0x2000000000000000uLL);
  (*(void (**)(__CFNotificationCenter *, uint64_t *, double))(*(void *)a2 + 184))(a2, &v9, 0.0);
  return pthread_mutex_unlock(v7);
}

void CA::WindowServer::Server::debug_display_state_old_interface(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned char *a3, void *a4)
{
  switch(*a3)
  {
    case 5:
      CA::WindowServer::Server::set_blanked(a2, 1);
      break;
    case 6:
      CA::WindowServer::Server::set_blanked(a2, 0);
      break;
    case 7:
      CA::WindowServer::Server::set_flipbook_enabled(a2, 1);
      break;
    case 8:
      CA::WindowServer::Server::set_flipbook_enabled(a2, 0);
      break;
    case 9:
      CA::WindowServer::Server::set_flipbook_suppressed(a2, 1);
      break;
    case 0xA:
      CA::WindowServer::Server::set_flipbook_suppressed(a2, 0);
      break;
    default:
      return;
  }
}

uint64_t CA::WindowServer::Server::set_blanked(CA::WindowServer::Server *this, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    BOOL v4 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(*((void *)this + 12) + 24);
      *(_DWORD *)long long buf = 67109376;
      int v9 = a2;
      __int16 v10 = 1024;
      int v11 = v5;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "set_blanked (%i) display_id=%u", buf, 0xEu);
    }
  }
  if (a2) {
    unsigned int v6 = 5;
  }
  else {
    unsigned int v6 = 6;
  }
  return CA::WindowServer::Server::set_display_state((uint64_t)this, v6, 0, 0);
}

uint64_t CA::WindowServer::Server::set_flipbook_enabled(CA::WindowServer::Server *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    BOOL v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = a2;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "set_flipbook_enabled (%d)", buf, 8u);
    }
  }
  if (a2) {
    unsigned int v5 = 7;
  }
  else {
    unsigned int v5 = 8;
  }
  return CA::WindowServer::Server::set_display_state((uint64_t)this, v5, 0, 0);
}

uint64_t CA::WindowServer::Server::set_flipbook_suppressed(CA::WindowServer::Server *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    BOOL v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = a2;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "set_flipbook_suppressed (%d)", buf, 8u);
    }
  }
  if (a2) {
    unsigned int v5 = 9;
  }
  else {
    unsigned int v5 = 10;
  }
  return CA::WindowServer::Server::set_display_state((uint64_t)this, v5, 0, 0);
}

void CA::WindowServer::Server::set_display_preset_properties(CA::WindowServer::Server *this, CA::Render::Object *a2, char *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  char v5 = a3[4];
  mach_port_name_t v6 = *((_DWORD *)a3 + 10);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  int v11 = ___ZN2CA12WindowServer6Server29set_display_preset_propertiesEPNS_6Render6ObjectEPvS5__block_invoke;
  uint64_t v12 = &__block_descriptor_tmp_81_16711;
  char v17 = v5;
  long long v7 = *(_OWORD *)(a3 + 24);
  long long v13 = *(_OWORD *)(a3 + 8);
  long long v14 = v7;
  char v15 = a2;
  mach_port_name_t v16 = v6;
  if (*(_DWORD *)a3 == *(_DWORD *)(*((void *)a2 + 12) + 24) && !mach_port_mod_refs(*MEMORY[0x1E4F14960], v6, 0, 1))
  {
    int v8 = (__CFRunLoop *)(*(uint64_t (**)(CA::Render::Object *))(*(void *)a2 + 384))(a2);
    if (v8)
    {
      uint64_t v9 = v8;
      CFRunLoopPerformBlock(v8, (CFTypeRef)*MEMORY[0x1E4F1D418], block);
      CFRunLoopWakeUp(v9);
    }
    else
    {
      v11((uint64_t)block);
    }
  }
}

uint64_t ___ZN2CA12WindowServer6Server29set_display_preset_propertiesEPNS_6Render6ObjectEPvS5__block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  BOOL v2 = *(unsigned char *)(a1 + 76) != 0;
  uint64_t v3 = *(void **)(a1 + 64);
  long long v8 = *(_OWORD *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v3[12] + 745) |= 0x400u;
  *(void *)&msg.msgh_bits = 0;
  *(int64x2_t *)&msg.msgh_remote_port = vdupq_n_s64(0x8000000000uLL);
  (*(void (**)(void *, mach_msg_header_t *, double))(*v3 + 184))(v3, &msg, 0.0);
  uint64_t v4 = v3[12];
  LOBYTE(msg.msgh_bits) = v2;
  *(mach_msg_bits_t *)((char *)&msg.msgh_bits + 1) = 0;
  msg.msgh_std::string::size_type size = 0;
  *(_OWORD *)&msg.msgh_remote_port = v9;
  long long v11 = v8;
  mach_msg_id_t v5 = (*(uint64_t (**)(void))(*(void *)v4 + 1384))();
  if (v5
    && *(unsigned char *)(a1 + 76)
    && (*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 96) + 745) & 0x4000) == 0
    && MEMORY[0x1E4F5B210] != 0)
  {
    analytics_send_event_lazy();
  }
  *(void *)&msg.msgh_voucher_port = 0;
  *(void *)&msg.msgh_bits = 0x1C00000013;
  *(void *)&msg.msgh_remote_port = *(unsigned int *)(a1 + 72);
  msg.msgh_id = v5;
  LODWORD(v11) = 0;
  if ((mach_msg(&msg, 1, 0x1Cu, 0, 0, 0, 0) - 268435459) <= 1) {
    mach_msg_destroy(&msg);
  }
  return mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 72));
}

xpc_object_t ___ZN2CA12WindowServer6Server29set_display_preset_propertiesEPNS_6Render6ObjectEPvS5__block_invoke_2(double *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  __int16 v5 = 0;
  *(_DWORD *)__str = 0;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  snprintf(__str, 6uLL, "%4.2f", a1[4]);
  xpc_dictionary_set_string(v2, "x_delta", __str);
  snprintf(__str, 6uLL, "%4.2f", a1[5]);
  xpc_dictionary_set_string(v2, "y_delta", __str);
  snprintf(__str, 6uLL, "%4.2f", a1[6]);
  xpc_dictionary_set_string(v2, "luminance_scale", __str);
  return v2;
}

uint64_t CA::WindowServer::Server::set_clone_master(CA::WindowServer::Server *this, CA::WindowServer::Server *a2, int a3)
{
  uint64_t v6 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  uint64_t v7 = *((void *)this + 12);
  *(void *)(v7 + 48) = a2;
  *(_DWORD *)(v7 + 56) = a3;
  (*(void (**)(void))(*(void *)v7 + 680))();
  (*(void (**)(void))(**((void **)this + 12) + 264))();
  if (a2) {
    (*(void (**)(CA::WindowServer::Server *))(*(void *)this + 392))(this);
  }

  return pthread_mutex_unlock(v6);
}

uint64_t CA::WindowServer::Server::clones(CA::WindowServer::Server *this, uint64_t a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 24));
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  __int16 v5 = *(uint64_t **)(*(void *)(a2 + 96) + 40);
  if (v5)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v5;
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        __int16 v10 = *(void **)this;
        uint64_t v11 = ((uint64_t)v6 - *(void *)this) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          abort();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          char v15 = (char *)operator new(8 * v14);
        }
        else
        {
          char v15 = 0;
        }
        mach_port_name_t v16 = &v15[8 * v11];
        *(void *)mach_port_name_t v16 = v7;
        long long v9 = v16 + 8;
        if (v6 != v10)
        {
          do
          {
            uint64_t v17 = *--v6;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v6 != v10);
          uint64_t v6 = *(void **)this;
        }
        *(void *)this = v16;
        *((void *)this + 1) = v9;
        *((void *)this + 2) = &v15[8 * v14];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *uint64_t v6 = v7;
        long long v9 = v6 + 1;
      }
      *((void *)this + 1) = v9;
      __int16 v5 = (uint64_t *)v5[1];
      uint64_t v6 = v9;
    }
    while (v5);
  }

  return pthread_mutex_unlock(v4);
}

uint64_t CA::WindowServer::Server::remove_clone(CA::WindowServer::Server *this, CA::WindowServer::Server *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*(CA::WindowServer::Server **)(*((void *)a2 + 12) + 48) == this)
  {
    CA::WindowServer::Server::clear_replay_contexts(a2);
    uint64_t v6 = *((void *)this + 12);
    *(void *)(v6 + 40) = x_list_remove(*(void **)(v6 + 40), (uint64_t)a2);
    pthread_mutex_unlock(v4);
    CA::WindowServer::Server::set_clone_master(a2, 0, 0);
    int64x2_t v7 = vdupq_n_s64(0x80000uLL);
    uint64_t v8 = 0;
    int64x2_t v9 = v7;
    (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(void *)this + 184))(this, &v8, 0.0);
    uint64_t v8 = 0;
    int64x2_t v9 = v7;
    return (*(uint64_t (**)(CA::WindowServer::Server *, uint64_t *, double))(*(void *)a2 + 184))(a2, &v8, 0.0);
  }
  else
  {
    return pthread_mutex_unlock(v4);
  }
}

void CA::WindowServer::Server::clear_replay_contexts(CA::WindowServer::Server *this)
{
  xpc_object_t v2 = (char *)*((void *)this + 17);
  unint64_t v1 = *((void *)this + 18);
  uint64_t v3 = (void *)((char *)this + 136);
  if (v1)
  {
    uint64_t v5 = 0;
    for (unint64_t i = 0; i < v1; ++i)
    {
      int64x2_t v7 = *(atomic_uint **)&v2[v5];
      if (v7)
      {
        if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
        }
        xpc_object_t v2 = (char *)*((void *)this + 17);
        unint64_t v1 = *((void *)this + 18);
        *(void *)&v2[v5] = 0;
      }
      v5 += 16;
    }
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v2);
  void *v3 = 0;
  v3[1] = 0;
}

uint64_t CA::WindowServer::Server::replay_render(CA::WindowServer::Server *this, double a2, CA::WindowServer::Display *a3, BOOL *a4)
{
  double v4 = MEMORY[0x1F4188790](this);
  int v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  double v11 = v4;
  uint64_t v13 = v12;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = v12 + 4;
  os_unfair_lock_lock(v12 + 4);
  if (LOBYTE(v13[129]._os_unfair_lock_opaque))
  {
    uint64_t v15 = mergesort(*(void **)&v13[34]._os_unfair_lock_opaque, *(void *)&v13[36]._os_unfair_lock_opaque, 0x10uLL, (int (__cdecl *)(const void *, const void *))CA::WindowServer::Server::compare_levels);
    LOBYTE(v13[129]._os_unfair_lock_opaque) = 0;
  }
  uint64_t v16 = *(void *)&v13[24]._os_unfair_lock_opaque;
  BOOL v17 = *(unsigned char *)(*(void *)(v16 + 728) + 1) != 1 || *(void *)(v16 + 640) == 0;
  uint64_t v18 = *(void *)&v13[36]._os_unfair_lock_opaque;
  if (v18)
  {
    unint64_t v19 = 8 * v18;
    if ((unint64_t)(8 * v18) > 0x1000)
    {
      int v20 = (CA::Render::Context **)malloc_type_malloc(8 * v18, 0x2302DD04uLL);
    }
    else
    {
      MEMORY[0x1F4188790](v15);
      int v20 = (CA::Render::Context **)((char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v20, 8 * v18);
    }
    uint64_t v48 = 0;
    for (uint64_t i = 0; i != v18; ++i)
    {
      unsigned __int16 v50 = *(atomic_uint **)(*(void *)&v13[34]._os_unfair_lock_opaque + v48);
      if (v50)
      {
        uint64_t v51 = v50 + 2;
        if (!atomic_fetch_add(v50 + 2, 1u))
        {
          unsigned __int16 v50 = 0;
          atomic_fetch_add(v51, 0xFFFFFFFF);
        }
      }
      v20[i] = (CA::Render::Context *)v50;
      v48 += 16;
    }
  }
  else
  {
    int v20 = 0;
    unint64_t v19 = 0;
  }
  os_unfair_lock_unlock(v14);
  BOOL *v8 = v18 != 0;
  if (v18) {
    char v21 = v17;
  }
  else {
    char v21 = 1;
  }
  if ((v21 & 1) != 0 || !(*(unsigned int (**)(uint64_t))(*(void *)v10 + 216))(v10))
  {
    (*(void (**)(void, void))(**(void **)&v13[24]._os_unfair_lock_opaque + 224))(*(void *)&v13[24]._os_unfair_lock_opaque, 0);
    uint64_t v22 = 1;
    if (!v18) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  uint64_t v22 = 1;
  (*(void (**)(void, uint64_t))(**(void **)&v13[24]._os_unfair_lock_opaque + 224))(*(void *)&v13[24]._os_unfair_lock_opaque, 1);
  if ((*(unsigned int (**)(double, double))(**(void **)&v13[24]._os_unfair_lock_opaque + 352))(0.0, 0.0))
  {
LABEL_40:
    uint64_t v45 = v20;
    do
    {
      uint64_t v46 = *v45;
      if (atomic_fetch_add((atomic_uint *volatile)*v45 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(CA::Render::Context *))(*(void *)v46 + 16))(v46);
      }
      ++v45;
      --v18;
    }
    while (v18);
    goto LABEL_44;
  }
  uint64_t v75 = v10;
  unint64_t v76 = v19;
  uint64_t v23 = *(void *)&v13[24]._os_unfair_lock_opaque;
  uint64_t v84 = *(void *)(v23 + 200);
  int v25 = *(_DWORD *)(v23 + 208);
  int v24 = *(_DWORD *)(v23 + 212);
  int v85 = v25;
  int v86 = v24;
  long long v26 = 0uLL;
  long long v82 = 0u;
  if ((*(unsigned char *)(v23 + 56) & 0x40) != 0)
  {
    int v79 = 0;
    int v52 = 0;
LABEL_56:
    long long v77 = v26;
    long long v78 = v26;
    long long v80 = v26;
    long long v81 = v26;
    goto LABEL_57;
  }
  uint64_t v27 = CA::Render::Context::root_layer_handle(*v20);
  if (!v27 || (long long v28 = *(CA::Render::Layer **)(v27 + 16)) == 0)
  {
    int v79 = 0;
    int v52 = 0;
    long long v26 = 0uLL;
    goto LABEL_56;
  }
  CA::Render::Layer::frame((CA::Render::Layer *)&v105, v28);
  if (v106.f64[0] <= v106.f64[1]) {
    double v29 = v106.f64[1];
  }
  else {
    double v29 = v106.f64[0];
  }
  int32x2_t v30 = (int32x2_t)0xC0000000C0000000;
  if (v29 < 1073741820.0)
  {
    v31.f64[0] = NAN;
    v31.f64[1] = NAN;
    int8x16_t v32 = (int8x16_t)vnegq_f64(v31);
    __asm { FMOV            V3.2D, #0.5 }
    int8x16_t v37 = (int8x16_t)vaddq_f64(v105, v106);
    int32x2_t v30 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v32, _Q3, v37), (float64x2_t)v37))), vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v32, _Q3, (int8x16_t)v105), v105))));
  }
  int v38 = v30.i32[0];
  int v39 = v30.i32[1];
  if (v30.i32[0]) {
    _ZF = v30.i32[1] == 0;
  }
  else {
    _ZF = 1;
  }
  BOOL v42 = _ZF || v30.i32[0] == v25 || v30.i32[1] == v24;
  int v43 = v42;
  if (v42)
  {
    int v79 = 0;
    long long v82 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v44 = 0uLL;
    long long v80 = 0u;
  }
  else
  {
    *(double *)&long long v73 = (double)v25 / (double)v30.i32[0];
    *(void *)&long long v44 = 0;
    long long v80 = (unint64_t)v73;
    if (*(double *)&v73 == (double)v24 / (double)v39)
    {
      *((double *)&v44 + 1) = (double)v25 / (double)v38;
      *((double *)&v73 + 1) = 1.0 / *(double *)&v73;
      long long v82 = v73;
      int v79 = 8 * (*(double *)&v73 != 1.0);
      long long v77 = xmmword_184997D50;
      long long v78 = xmmword_184997D60;
    }
    else
    {
      *((double *)&v44 + 1) = (double)v24 / (double)v39;
      long long v77 = xmmword_184997D50;
      long long v78 = xmmword_184997D60;
      __asm { FMOV            V0.2D, #1.0 }
      long long v82 = _Q0;
      int v79 = 16;
    }
  }
  long long v81 = v44;
  int v52 = v43 ^ 1;
LABEL_57:
  bzero(v99, 0x448uLL);
  CA::Render::Update::Update((CA::Render::Update *)v99, &v105, 0x2000uLL, v11, 0, 0, 0, 0, (const CA::Bounds *)&v84, v13[46]._os_unfair_lock_opaque | 0x10000);
  if (v99[0])
  {
    int v54 = (*(uint64_t (**)(void))(**(void **)&v13[24]._os_unfair_lock_opaque + 1560))(*(void *)&v13[24]._os_unfair_lock_opaque);
    int v55 = 256;
    if (!v54) {
      int v55 = 0;
    }
    unint64_t v56 = v103 & 0xFFFFFEFF | ((unint64_t)v104 << 32);
    unsigned int v103 = v103 & 0xFFFFFEFF | v55;
    unsigned __int16 v104 = WORD2(v56);
    int v57 = (*(uint64_t (**)(void))(**(void **)&v13[24]._os_unfair_lock_opaque + 1584))();
    int v58 = 512;
    if (!v57) {
      int v58 = 0;
    }
    unsigned int v59 = v103 & 0xFFFF797B | v58;
    int v60 = 32772;
    if (v6) {
      int v60 = 33796;
    }
    unsigned int v103 = v60 | v59;
    unsigned __int16 v104 = (((unint64_t)(v101 & 0x80000) << 14) | ((unint64_t)v104 << 32)) >> 32;
    uint64_t v102 = (*(uint64_t (**)(void))(**(void **)&v13[24]._os_unfair_lock_opaque + 1400))();
    v88[0] = 0;
    v88[1] = 0;
    CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v88);
    uint64_t v61 = v18;
    do
    {
      long long v62 = v20[v61 - 1];
      pthread_mutex_lock((pthread_mutex_t *)((char *)v62 + 72));
      if (v52 && (uint64_t v63 = CA::Render::Context::root_layer_handle(v62)) != 0 && *(void *)(v63 + 16))
      {
        memset(v83, 0, 128);
        uint64_t v64 = CA::Render::Context::root_layer_handle(v62);
        if (v64) {
          uint64_t v64 = *(void *)(v64 + 16);
        }
        CA::Render::Layer::compute_frame_transform(v64, 0, (CA::Mat4Impl *)v83, 0);
        long long v89 = v80;
        long long v90 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v91 = v81;
        long long v94 = v77;
        long long v95 = 0u;
        long long v96 = v78;
        long long v97 = v82;
        uint64_t v98 = v79;
        CA::Transform::set((uint64_t)v87, (CA::Mat4Impl *)v83, 1);
        CA::Transform::concat_left((CA::Transform *)&v89, v87, v65, v66);
        uint64_t v67 = CA::Render::Context::root_layer_handle(v62);
        if (v67) {
          unsigned __int8 v68 = *(CA::Render::Layer **)(v67 + 16);
        }
        else {
          unsigned __int8 v68 = 0;
        }
        CA::Render::Update::add_context((CA::Render::Update *)v99, v62, v68, (const CA::Transform *)&v89);
      }
      else
      {
        CA::Render::Update::add_context((CA::Render::Update *)v99, v62);
      }
      --v61;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)v62 + 72));
    }
    while (v61);
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v88);
    CA::Render::Update::added_all_contexts(v99, v69, v70);
    long long v90 = 0u;
    long long v91 = 0u;
    long long v89 = 0u;
    CA::Shape::operator=((uint64_t)&v89, (_DWORD *)(v75 + 168));
    CA::shape_union(&v100, (CA::Shape **)&v89, v71);
    char v72 = (*(uint64_t (**)(void))(**(void **)&v13[24]._os_unfair_lock_opaque + 208))(*(void *)&v13[24]._os_unfair_lock_opaque);
    if (v72)
    {
      LODWORD(v89) = 3;
      (*(void (**)(void, uint64_t **))(**(void **)&v13[24]._os_unfair_lock_opaque + 408))(*(void *)&v13[24]._os_unfair_lock_opaque, v99);
      (*(void (**)(os_unfair_lock_s *, uint64_t **, long long *))(*(void *)&v13->_os_unfair_lock_opaque
                                                                         + 424))(v13, v99, &v89);
      (*(void (**)(void))(**(void **)&v13[24]._os_unfair_lock_opaque + 416))();
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void))(**(void **)&v13[24]._os_unfair_lock_opaque + 216))(*(void *)&v13[24]._os_unfair_lock_opaque);
    }
    unint64_t v19 = v76;
    CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v88);
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v19 = v76;
  }
  CA::Render::Update::~Update((CA::Render::Update *)v99, v53);
  if (v18) {
    goto LABEL_40;
  }
LABEL_44:
  if (v19 > 0x1000) {
    free(v20);
  }
  CA::Render::collect(0, v11);
  return v22;
}

uint64_t CA::WindowServer::Server::attach_contexts(CA::WindowServer::Server *this)
{
  uint64_t result = (uint64_t)CA::Render::Context::copy_all_contexts(this);
  if (result)
  {
    uint64_t v5 = result;
    if (*(_DWORD *)(result + 16))
    {
      unint64_t v6 = 0;
      do
        uint64_t result = CA::WindowServer::Server::context_created(*(void *)(v5 + 24 + 8 * v6++), this, v3, v4);
      while (v6 < *(unsigned int *)(v5 + 16));
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 0xFFFFFFFF) == 1)
    {
      int64x2_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 16);
      return v7(v5);
    }
  }
  return result;
}

uint64_t CA::WindowServer::Server::set_server_thread_policy(CA::WindowServer::Server *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  integer_t policy_info = 0;
  thread_act_t v1 = MEMORY[0x185324740](this);
  thread_policy_set(v1, 1u, &policy_info, 1u);
  if (proc_setthread_cpupercent())
  {
    integer_t policy_info = 1;
    thread_policy_set(v1, 1u, &policy_info, 1u);
  }
  return mach_port_deallocate(*MEMORY[0x1E4F14960], v1);
}

void CA::WindowServer::Server::inhibit_clone_render(CA::WindowServer::Server *this, CA::WindowServer::Surface *a2, CA::Render::Update *a3, CA::WindowServer::Display *a4, double a5)
{
  double v5 = MEMORY[0x1F4188790](this);
  uint64_t v7 = v6;
  uint64_t v51 = v8;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(uint64_t **)(v6 + 336);
  uint64_t v49 = v10;
  uint64_t v50 = v11;
  HIDWORD(v48) = v12;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  if (v9)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      if (!*((unsigned char *)v9 + 20))
      {
        int v17 = *(_DWORD *)(v9[1] + 16);
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = (v16 - v13) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            abort();
          }
          if ((uint64_t)(v15 - (void)v13) >> 1 > v19) {
            unint64_t v19 = (uint64_t)(v15 - (void)v13) >> 1;
          }
          if (v15 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v20);
            uint64_t v16 = v14;
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (char *)(v20 + 4 * v18);
          *(_DWORD *)uint64_t v22 = v17;
          unint64_t v14 = v22 + 4;
          while (v16 != v13)
          {
            int v23 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          unint64_t v15 = v20 + 4 * v21;
          if (v13) {
            operator delete(v13);
          }
          uint64_t v13 = v22;
          uint64_t v16 = v14;
        }
        else
        {
          *(_DWORD *)uint64_t v16 = v17;
          v16 += 4;
          unint64_t v14 = v16;
        }
      }
      uint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  int v24 = v51 + 4;
  os_unfair_lock_lock(v51 + 4);
  uint64_t v26 = v14 - v13;
  if (v14 == v13)
  {
    os_unfair_lock_unlock(v24);
  }
  else
  {
    unint64_t v27 = v26 >> 2;
    size_t v28 = 2 * v26;
    if ((unint64_t)(2 * v26) > 0x1000)
    {
      double v29 = (char *)malloc_type_malloc(2 * v26, 0x2FFA699EuLL);
    }
    else
    {
      MEMORY[0x1F4188790](v25);
      double v29 = (char *)&v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v29, v28);
    }
    uint64_t v30 = 0;
    if (v27 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v27;
    }
    do
    {
      *(void *)&v29[8 * v30] = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)&v13[4 * v30]);
      ++v30;
    }
    while (v31 != v30);
    os_unfair_lock_unlock(v24);
    long long v52 = *(_OWORD *)(v50 + 200);
    bzero(v54, 0x448uLL);
    int8x16_t v32 = v51;
    CA::Render::Update::Update((CA::Render::Update *)v54, v59, 0x2000uLL, v5, 0, 0, 0, 0, (const CA::Bounds *)(v7 + 192), v51[46]._os_unfair_lock_opaque);
    if (v54[0])
    {
      int v34 = (*(uint64_t (**)(void))(**(void **)&v32[24]._os_unfair_lock_opaque + 1560))(*(void *)&v32[24]._os_unfair_lock_opaque);
      int v35 = 256;
      if (!v34) {
        int v35 = 0;
      }
      unint64_t v36 = v57 & 0xFFFFFEFF | ((unint64_t)v58 << 32);
      unsigned int v57 = v57 & 0xFFFFFEFF | v35;
      unsigned __int16 v58 = WORD2(v36);
      int v37 = (*(uint64_t (**)(void))(**(void **)&v32[24]._os_unfair_lock_opaque + 1584))();
      uint64_t v38 = 512;
      if (!v37) {
        uint64_t v38 = 0;
      }
      uint64_t v39 = 0x200008004;
      if (HIDWORD(v48)) {
        uint64_t v39 = 0x200008404;
      }
      unint64_t v40 = v39 | (v57 | ((unint64_t)v58 << 32)) & 0xFFFDFFFF797BLL | v38;
      unsigned int v57 = v39 | v57 & 0xFFFF797B | v38;
      unsigned __int16 v58 = WORD2(v40);
      v55[33] = (CA::Shape *)(*(uint64_t (**)(void))(**(void **)&v32[24]._os_unfair_lock_opaque + 1400))();
      CA::Render::Update::set_display_attributes((uint64_t)v54, (float *)(v7 + 352));
      int v56 = *(_DWORD *)(v7 + 480);
      v53[0] = 0;
      v53[1] = 0;
      CA::Render::Fence::BatchWaitLock::BatchWaitLock((CA::Render::Fence::BatchWaitLock *)v53);
      do
      {
        uint64_t v41 = *(void *)&v29[8 * v27 - 8];
        if (v41)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v41 + 72));
          CA::Render::Update::add_context((CA::Render::Update *)v54, (CA::Render::Context *)v41);
          pthread_mutex_unlock((pthread_mutex_t *)(v41 + 72));
        }
        --v27;
      }
      while (v27);
      CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v53);
      CA::Render::Update::added_all_contexts(v54, v42, v43);
      long long v61 = 0u;
      long long v62 = 0u;
      *(_OWORD *)int v60 = 0u;
      CA::Shape::operator=((uint64_t)v60, &v52);
      CA::shape_union(v55, v60, v44);
      uint64_t v45 = v51;
      (*(void (**)(os_unfair_lock_s *, uint64_t **, uint64_t, long long *, uint64_t, void))(*(void *)&v51->_os_unfair_lock_opaque + 432))(v51, v54, v49, &v52, 1, 0);
      (*(void (**)(void))(**(void **)&v45[24]._os_unfair_lock_opaque + 1576))();
      CA::Render::Fence::BatchWaitLock::invalidate((uint64_t)v53);
    }
    CA::Render::Update::~Update((CA::Render::Update *)v54, v33);
    for (uint64_t i = 0; i != v31; ++i)
    {
      unint64_t v47 = *(atomic_uint **)&v29[8 * i];
      if (v47 && atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      }
    }
    if (v28 > 0x1000) {
      free(v29);
    }
  }
  CA::Render::collect(0, v5);
  if (v13) {
    operator delete(v13);
  }
}

xpc_object_t ___ZN2CA12WindowServer6Server20set_brightness_limitEf_block_invoke()
{
  return xpc_dictionary_create(0, 0, 0);
}

uint64_t CA::WindowServer::Server::set_irdc_hint(CA::WindowServer::Server *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  (*(void (**)(void))(**((void **)this + 12) + 1344))(*((void *)this + 12));
  uint64_t v4 = 0;
  int64x2_t v5 = vdupq_n_s64(8uLL);
  (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(void *)this + 184))(this, &v4, 0.0);
  return pthread_mutex_unlock(v2);
}

void CA::WindowServer::Server::update_display_modes_locked(CA::WindowServer::Server *this)
{
  v3[5] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(**((void **)this + 12) + 808))(*((void *)this + 12));
  uint64_t v2 = *(void *)(*((void *)this + 12) + 48);
  if (v2)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN2CA12WindowServer6Server27update_display_modes_lockedEb_block_invoke;
    v3[3] = &__block_descriptor_tmp_188_16822;
    v3[4] = v2;
    CA::WindowServer::Server::schedule_block(v2, v3);
  }
}

uint64_t ___ZN2CA12WindowServer6Server27update_display_modes_lockedEb_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  thread_act_t v1 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 96) + 745);
  *v1 |= 0x400u;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = 0;
  int64x2_t v5 = vdupq_n_s64(0x1000000000uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)v2 + 184))(v2, &v4, 0.0);
}

void CA::WindowServer::Server::schedule_block(uint64_t a1, void *a2)
{
  uint64_t v3 = (__CFRunLoop *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    CFRunLoopPerformBlock(v3, (CFTypeRef)*MEMORY[0x1E4F1D418], a2);
    CFRunLoopWakeUp(v4);
  }
}

void CA::WindowServer::Server::set_frame_info_callback(uint64_t a1, const void *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 320));
  int64x2_t v5 = *(const void **)(a1 + 8);
  if (v5)
  {
    _Block_release(v5);
    *(void *)(a1 + 8) = 0;
  }
  if (a2) {
    *(void *)(a1 + 8) = _Block_copy(a2);
  }

  os_unfair_lock_unlock(v4);
}

void CA::WindowServer::Server::set_brightness_callback(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 232);
  if (v4)
  {
    _Block_release(v4);
    *(void *)(a1 + 232) = 0;
  }
  if (aBlock) {
    *(void *)(a1 + 232) = _Block_copy(aBlock);
  }
}

void CA::WindowServer::Server::post_brightness_notification(CA::WindowServer::Server *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 29);
  BOOL v3 = x_log_hook_p();
  if (v2)
  {
    if (v3)
    {
      x_log_();
    }
    else
    {
      uint64_t v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(*((void *)this + 12) + 24);
        *(_DWORD *)long long buf = 67109120;
        int v9 = v5;
        _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "Display %u posting brightness notification", buf, 8u);
      }
    }
    (*(void (**)(void))(*((void *)this + 29) + 16))(*((void *)this + 29));
  }
  else if (v3)
  {
    x_log_();
  }
  else
  {
    uint64_t v6 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(*((void *)this + 12) + 24);
      *(_DWORD *)long long buf = 67109120;
      int v9 = v7;
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "Display %u, no brightness handler registered", buf, 8u);
    }
  }
}

uint64_t CA::WindowServer::Server::set_secure(CA::WindowServer::Server *this, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  if (*((unsigned __int8 *)this + 514) != a2)
  {
    *((unsigned char *)this + 514) = a2;
    *((unsigned char *)this + 521) = 1;
    CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((void *)this + 12) + 216));
    uint64_t v11 = 0;
    __asm { FMOV            V0.2D, #2.0 }
    long long v12 = _Q0;
    (*(void (**)(CA::WindowServer::Server *, uint64_t *, double))(*(void *)this + 184))(this, &v11, 0.0);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::WindowServer::Server::retain_context(os_unfair_lock_s *this, int a2)
{
  uint64_t v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  uint64_t v5 = *(void *)&this[32]._os_unfair_lock_opaque;
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)&this[28]._os_unfair_lock_opaque;
    while (1)
    {
      uint64_t v7 = *v6;
      if (*(_DWORD *)(*v6 + 16) == a2) {
        break;
      }
      v6 += 2;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = (atomic_uint *)(v7 + 8);
    if (!atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u))
    {
      uint64_t v7 = 0;
      atomic_fetch_add(v8, 0xFFFFFFFF);
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v7;
}

uint64_t *CA::CG::BasicState::SoftMask::SoftMask(uint64_t *a1)
{
  *a1 = CGSoftMaskRetain();
  a1[1] = CGRenderingStateRetain();
  a1[2] = CGGStateRetain();
  return a1;
}

uint64_t CA::CG::StrokeState::StrokeState(uint64_t a1)
{
  uint64_t v2 = (double *)(a1 + 8);
  CGGStateGetStrokeParameters();
  if (*(void *)(a1 + 16)) {
    CGDashRetain();
  }
  if (*v2 == 0.0)
  {
    double v3 = *(double *)a1;
  }
  else
  {
    CTM = (double *)CGGStateGetCTM();
    double v3 = fmax(*(double *)(a1 + 8) / sqrt(fmax(*CTM * *CTM + CTM[1] * CTM[1], CTM[2] * CTM[2] + CTM[3] * CTM[3])), *(double *)a1);
  }
  *(double *)(a1 + 8) = v3;
  return a1;
}

double CA::CG::stroke_radius(uint64_t a1, float64x2_t a2, float64x2_t a3)
{
  double v3 = 0.5;
  if (*(double *)a1 != *MEMORY[0x1E4F1DD98])
  {
    double v4 = *(double *)(a1 + 24);
    if (v4 < 1.0) {
      double v4 = 1.0;
    }
    if (*(_DWORD *)(a1 + 36)) {
      double v4 = 1.0;
    }
    double v5 = *(double *)(a1 + 8) * 0.5 * v4;
    if (*(_DWORD *)(a1 + 32) == 2) {
      double v5 = v5 * 1.41421356;
    }
    *(void *)&double v3 = *(_OWORD *)&vmulq_n_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(a3), (int8x16_t)a3, (int8x16_t)vnegq_f64(a3)), (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(a2), (int8x16_t)a2, (int8x16_t)vnegq_f64(a2))), v5);
  }
  return v3;
}

uint64_t CA::CG::create_stroked_path(const CGPath *a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1 || CGPathIsEmpty(a1)) {
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  DashedPath = a1;
  if (*(void *)(a3 + 16))
  {
    DashedPath = a1;
    if (CGDashGetPattern()) {
      DashedPath = (const CGPath *)CGPathCreateDashedPath();
    }
  }
  if (*(double *)a3 != *MEMORY[0x1E4F1DD98] && (a4 & 1) == 0)
  {
    long long v11 = a2[1];
    v13[0] = *a2;
    v13[1] = v11;
    void v13[2] = a2[2];
    CA::Mat2Impl::mat2_get_scale_2d((CA::Mat2Impl *)v13, v8);
  }
  uint64_t StrokedPath = CGPathCreateStrokedPath();
  if (DashedPath != a1) {
    CGPathRelease(DashedPath);
  }
  return StrokedPath;
}

double CA::Render::MeshTransform::distance_to(CA::Render::MeshTransform *this, const CA::Render::Object *a2)
{
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (*((void *)this + 4) - v2) >> 5;
  uint64_t v4 = *((void *)a2 + 3);
  if (v3 >= (*((void *)a2 + 4) - v4) >> 5) {
    unint64_t v3 = (*((void *)a2 + 4) - v4) >> 5;
  }
  if (!v3) {
    return 0.0;
  }
  double v5 = (float32x2_t *)(v2 + 20);
  uint64_t v6 = (float *)(v4 + 20);
  double result = 0.0;
  do
  {
    float v8 = *(v6 - 1) - v5[-1].f32[1];
    float32x2_t v9 = *(float32x2_t *)v6;
    v6 += 8;
    float32x2_t v10 = v9;
    float32x2_t v11 = *v5;
    v5 += 4;
    float32x2_t v12 = vsub_f32(v10, v11);
    float32x2_t v13 = vmul_f32(v12, v12);
    double v14 = sqrtf((float)(v13.f32[0] + (float)(v8 * v8)) + v13.f32[1]);
    if (result <= v14) {
      double result = v14;
    }
    --v3;
  }
  while (v3);
  return result;
}

_DWORD *CA::Render::MeshTransform::mix@<X0>(atomic_uint *this@<X0>, atomic_uint *a2@<X1>, atomic_uint *a3@<X2>, atomic_uint *a4@<X3>, const CA::Render::ValueInterpolator *a5@<X4>, void *a6@<X8>)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  double result = malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 26;
    ++dword_1EB2ADE30;
    *(void *)double result = &unk_1ED02D4F8;
    if (a2)
    {
      double v14 = a2 + 2;
      if (!atomic_fetch_add(a2 + 2, 1u))
      {
        a2 = 0;
        atomic_fetch_add(v14, 0xFFFFFFFF);
      }
    }
    *((void *)result + 2) = a2;
    if (this)
    {
      uint64_t v15 = this + 2;
      if (!atomic_fetch_add(this + 2, 1u))
      {
        this = 0;
        atomic_fetch_add(v15, 0xFFFFFFFF);
      }
    }
    *((void *)result + 3) = this;
    if (a3)
    {
      uint64_t v16 = a3 + 2;
      if (!atomic_fetch_add(a3 + 2, 1u))
      {
        a3 = 0;
        atomic_fetch_add(v16, 0xFFFFFFFF);
      }
    }
    *((void *)result + 4) = a3;
    if (a4)
    {
      int v17 = a4 + 2;
      if (!atomic_fetch_add(a4 + 2, 1u))
      {
        a4 = 0;
        atomic_fetch_add(v17, 0xFFFFFFFF);
      }
    }
    *((void *)result + 5) = a4;
    long long v18 = *(_OWORD *)a5;
    long long v19 = *((_OWORD *)a5 + 1);
    long long v20 = *((_OWORD *)a5 + 3);
    *((_OWORD *)result + 5) = *((_OWORD *)a5 + 2);
    *((_OWORD *)result + 6) = v20;
    *((_OWORD *)result + 3) = v18;
    *((_OWORD *)result + 4) = v19;
    long long v21 = *((_OWORD *)a5 + 4);
    long long v22 = *((_OWORD *)a5 + 5);
    long long v23 = *((_OWORD *)a5 + 6);
    *((void *)result + 20) = *((void *)a5 + 14);
    *((_OWORD *)result + 8) = v22;
    *((_OWORD *)result + 9) = v23;
    *((_OWORD *)result + 7) = v21;
  }
  *a6 = result;
  return result;
}

uint64_t CA::Render::MeshTransform::mix@<X0>(atomic_uint *this@<X0>, atomic_uint *a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, void *a4@<X8>)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result) {
    uint64_t result = CA::Render::Interpolator::Interpolator(result, this, a2, *(double *)a3);
  }
  *a4 = result;
  return result;
}

void CA::Render::MeshTransform::show(os_unfair_lock_s *this, int a2, char a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v6 = CA::Render::MeshTransform::validate(this);
  if (a3)
  {
    if (v6)
    {
      CA::Render::MeshTransform::update(this, 2);
      if (x_log_hook_p())
      {
LABEL_26:
        x_log_();
        return;
      }
      uint64_t v33 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint32_t os_unfair_lock_opaque = this[26]._os_unfair_lock_opaque;
        *(_DWORD *)long long buf = 67109120;
        int v36 = os_unfair_lock_opaque;
        uint64_t v30 = "(meshTransform-subdivide-level %d)";
        uint64_t v31 = v33;
        uint32_t v32 = 8;
        goto LABEL_32;
      }
    }
  }
  else if (v6)
  {
    os_unfair_lock_lock(this + 4);
    CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)this, 2);
    os_unfair_lock_unlock(this + 4);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(meshTransform", buf, 2u);
      }
    }
    if (*(void *)&this[8]._os_unfair_lock_opaque != *(void *)&this[6]._os_unfair_lock_opaque)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          float32x2_t v10 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            float32x2_t v11 = (float *)(*(void *)&this[6]._os_unfair_lock_opaque + v8);
            double v12 = *v11;
            double v13 = v11[1];
            double v14 = v11[4];
            double v15 = v11[5];
            double v16 = v11[6];
            *(_DWORD *)long long buf = 67110400;
            int v36 = v9;
            __int16 v37 = 2048;
            *(double *)uint64_t v38 = v12;
            *(_WORD *)&v38[8] = 2048;
            double v39 = v13;
            *(_WORD *)unint64_t v40 = 2048;
            *(double *)&v40[2] = v14;
            *(_WORD *)&v40[10] = 2048;
            *(double *)&v40[12] = v15;
            *(_WORD *)&v40[20] = 2048;
            *(double *)&v40[22] = v16;
            _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "(vertex %d (%g %g) (%g %g %g))", buf, 0x3Au);
          }
        }
        ++v9;
        v8 += 32;
      }
      while (v9 < (uint64_t)(*(void *)&this[8]._os_unfair_lock_opaque - *(void *)&this[6]._os_unfair_lock_opaque) >> 5);
    }
    if (*(void *)&this[14]._os_unfair_lock_opaque != *(void *)&this[12]._os_unfair_lock_opaque)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          long long v19 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            long long v20 = (int *)(*(void *)&this[12]._os_unfair_lock_opaque + v17);
            int v21 = *v20;
            int v22 = v20[1];
            int v23 = v20[2];
            LODWORD(v20) = v20[3];
            int v24 = (float *)(*(void *)&this[18]._os_unfair_lock_opaque + 4 * v17);
            double v25 = v24[1];
            double v26 = v24[5];
            double v27 = v24[9];
            double v28 = v24[13];
            *(_DWORD *)long long buf = 67111168;
            int v36 = v18;
            __int16 v37 = 1024;
            *(_DWORD *)uint64_t v38 = v21;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = v22;
            LOWORD(v39) = 1024;
            *(_DWORD *)((char *)&v39 + 2) = v23;
            HIWORD(v39) = 1024;
            *(_DWORD *)unint64_t v40 = v20;
            *(_WORD *)&v40[4] = 2048;
            *(double *)&v40[6] = v25;
            *(_WORD *)&v40[14] = 2048;
            *(double *)&v40[16] = v26;
            *(_WORD *)&v40[24] = 2048;
            *(double *)&v40[26] = v27;
            __int16 v41 = 2048;
            double v42 = v28;
            _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "(face %d (%d %d %d %d) (%g %g %g %g))", buf, 0x48u);
          }
        }
        ++v18;
        v17 += 16;
      }
      while (v18 < (uint64_t)(*(void *)&this[14]._os_unfair_lock_opaque - *(void *)&this[12]._os_unfair_lock_opaque) >> 4);
    }
    if (x_log_hook_p()) {
      goto LABEL_26;
    }
    uint64_t v29 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v30 = ")";
LABEL_31:
      uint64_t v31 = v29;
      uint32_t v32 = 2;
LABEL_32:
      _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
    }
  }
  else
  {
    if (!x_log_hook_p())
    {
      uint64_t v29 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v30 = "(meshTransform [invalid])";
      goto LABEL_31;
    }
    x_log_();
  }
}

void CA::Render::MeshTransform::update(os_unfair_lock_s *this, int a2)
{
  uint64_t v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)this, a2);

  os_unfair_lock_unlock(v4);
}

float64x2_t CA::Render::MeshTransform::apply_rect(CA::Render::MeshTransform *this, const CA::Rect *a2, const CA::Rect *a3, float64x2_t result, int8x16_t a5, float64x2_t a6, float64x2_t a7, double a8, double a9, int32x4_t a10)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int8x16_t v11 = (int8x16_t)vclezq_f64(a7);
  int32x4_t v12 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v11, 1), v11);
  if (v12.i64[0] < 0) {
    goto LABEL_13;
  }
  v12.i32[0] = 0;
  a10.i32[0] = *((_DWORD *)a2 + 24);
  int8x16_t v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a10, v12), 0);
  __asm { FMOV            V6.2D, #1.0 }
  float64x2_t v19 = vmulq_f64(*(float64x2_t *)((char *)a2 + 136), (float64x2_t)vbslq_s8(v13, _Q6, a5));
  int8x16_t v20 = (int8x16_t)vclezq_f64(v19);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v20, 1), v20).u64[0] & 0x8000000000000000) != 0
    || (float64x2_t v21 = (float64x2_t)vbslq_s8(v13, *(int8x16_t *)((char *)a2 + 120), (int8x16_t)vmlaq_f64(result, (float64x2_t)a5, *(float64x2_t *)((char *)a2 + 120))), v22 = (int8x16_t)vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(a6, a7), vaddq_f64(v21, v19)), vmaxnmq_f64(a6, v21))), (vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v22, 1), v22).u64[0] & 0x8000000000000000) != 0))
  {
LABEL_13:
    result.f64[0] = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    CA::Render::MeshTransform::frame((CA::Render::MeshTransform *)&v28, (const Rect *)a2, result, (float64x2_t)a5);
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    result.f64[0] = v28;
    double v23 = v29;
    double v24 = v30 - v28;
    double v25 = v31 - v29;
    if (v30 - v28 >= v31 - v29) {
      double v26 = v31 - v29;
    }
    else {
      double v26 = v30 - v28;
    }
    if (v26 > 0.0)
    {
      if (v24 <= v25) {
        double v27 = v31 - v29;
      }
      else {
        double v27 = v30 - v28;
      }
      if (v27 >= 1.79769313e308)
      {
        uint64_t result = (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
        *(float64x2_t *)this = result;
        *((int64x2_t *)this + 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      }
      else
      {
        *(double *)this = v28;
        *((double *)this + 1) = v23;
        *((double *)this + 2) = v24;
        *((double *)this + 3) = v25;
      }
    }
  }
  return result;
}

CA::Render::MeshTransform *CA::Render::MeshTransform::eval_interpolator(CA::Render::MeshTransform *this, float64x2_t *a2, const CA::Rect *a3)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  uint64_t v7 = *((void *)this + 4);
  uint64_t v8 = *((void *)this + 5);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 12) != 33) {
      return 0;
    }
    if (!CA::Render::MeshTransform::validate(*((os_unfair_lock_s **)this + 2)) || v5 == 0) {
      return 0;
    }
  }
  else if (!v5)
  {
    return 0;
  }
  if (*(unsigned char *)(v5 + 12) != 33) {
    return 0;
  }
  float32x2_t v10 = 0;
  if (!CA::Render::MeshTransform::validate((os_unfair_lock_s *)v5) || !v7) {
    return v10;
  }
  if (*(unsigned char *)(v7 + 12) != 33
    || !CA::Render::MeshTransform::validate((os_unfair_lock_s *)v7)
    || v8 && (*(unsigned char *)(v8 + 12) != 33 || !CA::Render::MeshTransform::validate((os_unfair_lock_s *)v8)))
  {
    return 0;
  }
  uint64_t v11 = (uint64_t)(*(void *)(v5 + 32) - *(void *)(v5 + 24)) >> 5;
  if (v11 == (uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 5)
  {
    uint64_t v12 = (uint64_t)(*(void *)(v5 + 56) - *(void *)(v5 + 48)) >> 4;
    if (v12 == (uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 4
      && (!v6
       || v11 == (uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 5
       && v12 == (uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 4)
      && (!v8
       || v11 == (uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 5
       && v12 == (uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 4))
    {
      CA::Render::MeshTransform::update((os_unfair_lock_s *)v7, 2);
      int8x16_t v13 = (CA::Render::MeshTransform *)x_mem_alloc0(0xD0uLL);
      if (v13)
      {
        float32x2_t v10 = v13;
        double v14 = CA::Render::MeshTransform::MeshTransform(v13, (uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 5, (uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 4, *(_DWORD *)(v7 + 100));
        *((unsigned char *)v14 + 108) = *(unsigned char *)(v7 + 108);
        *((_DWORD *)v14 + 24) = 0;
        double v15 = *(unsigned char **)(v7 + 48);
        double v16 = *(unsigned char **)(v7 + 56);
        if (v16 != v15) {
          memmove(*((void **)v10 + 6), v15, v16 - v15);
        }
        uint64_t v17 = *(unsigned char **)(v7 + 72);
        unint64_t v18 = *(unsigned char **)(v7 + 80);
        if (v18 != v17) {
          memmove(*((void **)v10 + 9), v17, v18 - v17);
        }
        float64x2_t v19 = (double *)((char *)this + 48);
        *((_DWORD *)v10 + 28) = *(_DWORD *)(v7 + 112);
        *((_DWORD *)v10 + 3) |= 0x200u;
        float v122 = 0.0;
        float32x2_t v121 = 0;
        float v120 = 0.0;
        float32x2_t v119 = 0;
        float v118 = 0.0;
        float32x2_t v117 = 0;
        float v116 = 0.0;
        float32x2_t v115 = 0;
        CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v5 + 96), a2, (uint64_t)&v121, &v119);
        int v20 = *(_DWORD *)(v7 + 96);
        CA::Render::MeshTransform::vertex_transform(v20, a2, (uint64_t)&v117, &v115);
        float v114 = 0.0;
        uint64_t v113 = 0;
        float v112 = 0.0;
        float32x2_t v111 = 0;
        float v110 = 0.0;
        uint64_t v109 = 0;
        float v108 = 0.0;
        float32x2_t v107 = 0;
        if (v6)
        {
          CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v6 + 96), a2, (uint64_t)&v113, &v111);
          if (v8)
          {
            CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v8 + 96), a2, (uint64_t)&v109, &v107);
            if (*((unsigned char *)this + 160))
            {
              uint64_t v21 = *((void *)v10 + 3);
              uint64_t v73 = *((void *)v10 + 4);
              if (v73 != v21)
              {
                uint64_t v22 = 0;
                float v97 = v121.f32[1];
                float v98 = v121.f32[0];
                float v95 = v119.f32[0];
                float v96 = v122;
                float v93 = v120;
                float v94 = v119.f32[1];
                float v91 = v117.f32[1];
                float v92 = v117.f32[0];
                float v89 = v115.f32[0];
                float v90 = v118;
                float v87 = v116;
                float v88 = v115.f32[1];
                float v85 = *((float *)&v113 + 1);
                float v86 = *(float *)&v113;
                float v83 = v111.f32[0];
                float v84 = v114;
                float v81 = v112;
                float v82 = v111.f32[1];
                float v79 = *((float *)&v109 + 1);
                float v80 = *(float *)&v109;
                float v77 = v107.f32[0];
                float v78 = v110;
                float v76 = v107.f32[1];
                uint64_t v23 = *(void *)(v5 + 24);
                if ((unint64_t)((v73 - v21) >> 5) <= 1) {
                  uint64_t v24 = 1;
                }
                else {
                  uint64_t v24 = (v73 - v21) >> 5;
                }
                uint64_t v75 = v23 + 24;
                uint64_t v25 = *(void *)(v8 + 24);
                uint64_t v26 = *(void *)(v7 + 24) + 24;
                uint64_t v27 = *(void *)(v6 + 24) + 24;
                uint64_t v28 = v25 + 24;
                float v74 = v108;
                do
                {
                  float v29 = v94 + (float)(v97 * *(float *)(v75 + v22 - 20));
                  float v102 = v95 + (float)(v98 * *(float *)(v75 + v22 - 8));
                  float v104 = v94 + (float)(v97 * *(float *)(v75 + v22 - 4));
                  float v106 = v93 + (float)(v96 * *(float *)(v75 + v22));
                  float v30 = v88 + (float)(v91 * *(float *)(v26 + v22 - 20));
                  float v101 = v89 + (float)(v92 * *(float *)(v26 + v22 - 8));
                  float v103 = v88 + (float)(v91 * *(float *)(v26 + v22 - 4));
                  float v105 = v87 + (float)(v90 * *(float *)(v26 + v22));
                  float v31 = v82 + (float)(v85 * *(float *)(v27 + v22 - 20));
                  float v32 = v83 + (float)(v86 * *(float *)(v27 + v22 - 8));
                  float v33 = v82 + (float)(v85 * *(float *)(v27 + v22 - 4));
                  float v100 = v81 + (float)(v84 * *(float *)(v27 + v22));
                  float v34 = v76 + (float)(v79 * *(float *)(v28 + v22 - 20));
                  float v35 = v77 + (float)(v80 * *(float *)(v28 + v22 - 8));
                  float v36 = v76 + (float)(v79 * *(float *)(v28 + v22 - 4));
                  float v99 = v74 + (float)(v78 * *(float *)(v28 + v22));
                  uint64_t v37 = v21 + v22;
                  *(float *)uint64_t v37 = CA::Render::ValueInterpolator::mix<float>(v19, v83 + (float)(v86 * *(float *)(v27 + v22 - 24)), v95 + (float)(v98 * *(float *)(v75 + v22 - 24)), v89 + (float)(v92 * *(float *)(v26 + v22 - 24)), v77 + (float)(v80 * *(float *)(v28 + v22 - 24)));
                  *(float *)(v37 + 4) = CA::Render::ValueInterpolator::mix<float>(v19, v31, v29, v30, v34);
                  *(float *)(v37 + 16) = CA::Render::ValueInterpolator::mix<float>(v19, v32, v102, v101, v35);
                  *(float *)(v37 + 20) = CA::Render::ValueInterpolator::mix<float>(v19, v33, v104, v103, v36);
                  *(float *)(v37 + 24) = CA::Render::ValueInterpolator::mix<float>(v19, v100, v106, v105, v99);
                  *(_DWORD *)(v37 + 28) = 1065353216;
                  v22 += 32;
                  --v24;
                }
                while (v24);
                int v20 = *(_DWORD *)(v7 + 96);
                uint64_t v38 = v73;
                goto LABEL_55;
              }
              uint64_t v38 = *((void *)v10 + 4);
LABEL_54:
              uint64_t v21 = v38;
LABEL_55:
              if (v20)
              {
                if (v38 != v21)
                {
                  __asm { FMOV            V1.2S, #1.0 }
                  float32x2_t v65 = vdiv_f32(_D1, v117);
                  unint64_t v66 = (v38 - v21) >> 5;
                  float32x2_t v67 = v115;
                  float v68 = v116;
                  if (v66 <= 1) {
                    unint64_t v66 = 1;
                  }
                  uint64_t v69 = (float *)(v21 + 24);
                  float v70 = 1.0 / v118;
                  do
                  {
                    float v71 = *v69 - v68;
                    *((float32x2_t *)v69 - 3) = vmul_f32(vsub_f32(*(float32x2_t *)(v69 - 6), v67), v65);
                    *((float32x2_t *)v69 - 1) = vmul_f32(vsub_f32(*(float32x2_t *)(v69 - 2), v67), v65);
                    *uint64_t v69 = v71 * v70;
                    v69 += 8;
                    --v66;
                  }
                  while (v66);
                }
                *((_DWORD *)v10 + 24) = v20;
              }
              unsigned int v72 = *((_DWORD *)v10 + 3) & 0xFFFFFEFF;
              *((_DWORD *)v10 + 3) = v72;
              if ((*(_DWORD *)(v7 + 12) & 0x2000) != 0) {
                *((_DWORD *)v10 + 3) = *(_DWORD *)(v7 + 12) & 0x3000 | v72;
              }
              return v10;
            }
          }
        }
        else if (v8)
        {
          CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(v8 + 96), a2, (uint64_t)&v109, &v107);
        }
        uint64_t v21 = *((void *)v10 + 3);
        uint64_t v38 = *((void *)v10 + 4);
        if (v38 != v21)
        {
          uint64_t v40 = 0;
          unint64_t v41 = (v38 - v21) >> 5;
          uint64_t v42 = *(void *)(v5 + 24);
          uint64_t v43 = *(void *)(v7 + 24);
          float v44 = v122;
          float v45 = v120;
          float v46 = v118;
          float32x2_t v47 = v121;
          float32x2_t v48 = v119;
          float32x2_t v49 = v117;
          float32x2_t v50 = v115;
          float v51 = v116;
          uint64_t v52 = *(uint64_t *)v19;
          if (v41 <= 1) {
            unint64_t v41 = 1;
          }
          float64x2_t v53 = (float64x2_t)vdupq_lane_s64(v52, 0);
          do
          {
            float v54 = *(float *)(v43 + v40 + 24);
            float v55 = v45 + (float)(v44 * *(float *)(v42 + v40 + 24));
            int v56 = (float32x2_t *)(v21 + v40);
            float32x2_t v57 = vmla_f32(v48, *(float32x2_t *)(v42 + v40), v47);
            float32x2_t v58 = vmla_f32(v48, *(float32x2_t *)(v42 + v40 + 16), v47);
            float64x2_t v59 = vmlaq_f64(vcvtq_f64_f32(v58), vcvtq_f64_f32(vadd_f32(vmla_f32(vneg_f32(v58), *(float32x2_t *)(v43 + v40 + 16), v49), v50)), v53);
            *int v56 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v57), vcvtq_f64_f32(vadd_f32(vmla_f32(vneg_f32(v57), *(float32x2_t *)(v43 + v40), v49), v50)), v53));
            v56[2] = vcvt_f32_f64(v59);
            float32_t v60 = v55 + *(double *)&v52 * (float)(v51 - (float)(v55 - (float)(v46 * v54)));
            v56[3].f32[0] = v60;
            v56[3].i32[1] = 1065353216;
            v40 += 32;
            --v41;
          }
          while (v41);
          goto LABEL_55;
        }
        goto LABEL_54;
      }
    }
  }
  float32x2_t v10 = (CA::Render::MeshTransform *)v7;
  if (!atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u))
  {
    float32x2_t v10 = 0;
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF);
  }
  return v10;
}

float CA::Render::ValueInterpolator::mix<float>(double *a1, float a2, float a3, float a4, float a5)
{
  double v5 = (float)(a4 - a3);
  float v6 = a1[10] * (float)(a3 - a2) + a1[11] * v5;
  float v7 = a1[12] * v5 + a1[13] * (float)(a5 - a4);
  return a1[2] * a3 + a1[3] * v6 + a1[4] * a4 + a1[5] * v7;
}

uint64_t CA::CG::PathInverseDetector::detect_rect(CA::CG::PathInverseDetector *this, CGRect *a2)
{
  if (*((void *)this + 1) != 4 || *((unsigned char *)this + 16)) {
    return 0;
  }
  uint64_t v2 = 0;
  while (v2 != 4)
  {
    uint64_t v3 = v2 + 1;
    int v4 = *((unsigned __int8 *)this + v2 + 17);
    int v5 = dword_1849A78C8[++v2];
    if (v5 != v4)
    {
      if ((unint64_t)(v3 - 1) < 4) {
        return 0;
      }
      break;
    }
  }
  double v6 = *((double *)this + 5);
  if (v6 != *((double *)this + 11)) {
    return 0;
  }
  double v7 = *((double *)this + 16);
  if (*((double *)this + 10) != v7) {
    return 0;
  }
  double v8 = *((double *)this + 17);
  if (v8 != *((double *)this + 23)) {
    return 0;
  }
  double v9 = *((double *)this + 4);
  if (*((double *)this + 22) != v9) {
    return 0;
  }
  a2->origin.x = v9;
  a2->origin.y = v8;
  a2->size.width = v7 - v9;
  a2->size.height = v6 - v8;
  return 1;
}

uint64_t ___ZN2CA2CG19PathInverseDetector6detectEPK6CGPathNS_4RectE_block_invoke(uint64_t result, int *a2, unsigned char *a3)
{
  int v4 = *(int **)(result + 32);
  int v5 = *v4;
  if (*v4 != 2)
  {
    if (v5 == 1)
    {
      unint64_t v8 = *((void *)v4 + 1);
      if (v8 < 0xA)
      {
        *((unsigned char *)v4 + v8 + 16) = *a2;
        uint64_t v9 = *a2;
        if (v9 != 4)
        {
          uint64_t v11 = 0;
          LODWORD(v9) = cgpath_counts[v9];
          if (v9 <= 1) {
            LOBYTE(v9) = 1;
          }
          uint64_t v9 = (char)v9;
          do
          {
            *(_OWORD *)&v4[12 * *((void *)v4 + 1) + 8 + v11] = *(_OWORD *)(*((void *)a2 + 1) + v11 * 4);
            v11 += 4;
            --v9;
          }
          while (v9);
          unint64_t v7 = *((void *)v4 + 1);
          goto LABEL_20;
        }
        int v10 = 2;
LABEL_25:
        *int v4 = v10;
        goto LABEL_26;
      }
    }
    else
    {
      if (v5) {
        goto LABEL_27;
      }
      *((unsigned char *)v4 + *((void *)v4 + 1) + 16) = *a2;
      int v6 = *a2;
      if (*a2 == 4)
      {
        if (*((void *)v4 + 1) == 4)
        {
          uint64_t result = CA::CG::PathInverseDetector::detect_rect((CA::CG::PathInverseDetector *)v4, (CGRect *)v4 + 16);
          if (result)
          {
            *int v4 = 1;
            *((void *)v4 + 1) = 0;
            goto LABEL_26;
          }
        }
      }
      else if (v6 == 1)
      {
        unint64_t v7 = *((void *)v4 + 1);
        if (v7 <= 3)
        {
LABEL_14:
          *(_OWORD *)&v4[12 * v7 + 8] = *(_OWORD *)*((void *)a2 + 1);
LABEL_20:
          *((void *)v4 + 1) = v7 + 1;
LABEL_26:
          int v5 = *v4;
LABEL_27:
          if (v5 != 3) {
            return result;
          }
          goto LABEL_28;
        }
      }
      else if (!v6)
      {
        unint64_t v7 = *((void *)v4 + 1);
        if (!v7) {
          goto LABEL_14;
        }
      }
    }
    int v10 = 3;
    goto LABEL_25;
  }
  *int v4 = 3;
LABEL_28:
  *a3 = 1;
  return result;
}

uint64_t ___ZN2CA2CG19PathInverseDetector6detectEPK6CGPathNS_4RectE_block_invoke_2(uint64_t result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 > 9 || (uint64_t v5 = *(unsigned __int8 *)(v3 + v4 + 16), *(_DWORD *)a2 != v5))
  {
LABEL_13:
    *(_DWORD *)uint64_t v3 = 3;
    goto LABEL_14;
  }
  if (v5 != 4)
  {
    LODWORD(v5) = cgpath_counts[v5];
    if (v5 <= 1) {
      LOBYTE(v5) = 1;
    }
    uint64_t v5 = (char)v5;
    int v6 = (double *)(v3 + 48 * v4 + 40);
    unint64_t v7 = (double *)(*(void *)(a2 + 8) + 8);
    while (vabdd_f64(*(v7 - 1), *(v6 - 1)) <= 0.000001
         && (vabdd_f64(*v7, *v6) <= 0.000001
          || vabdd_f64(*v6 + *v7, *(double *)(v3 + 544) + *(double *)(v3 + 544)) <= 0.000001))
    {
      v6 += 2;
      v7 += 2;
      if (!--v5) {
        goto LABEL_11;
      }
    }
    goto LABEL_13;
  }
LABEL_11:
  *(void *)(v3 + 8) = v4 + 1;
  if (*(_DWORD *)v3 == 3) {
LABEL_14:
  }
    *a3 = 1;
  return result;
}

uint64_t CA::CG::Style::Style(uint64_t a1)
{
  *(void *)a1 = &unk_1ED029D48;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = CGStyleGetIdentifier();
  *(void *)(a1 + 16) = CGStyleRetain();
  *(_DWORD *)(a1 + 72) = CGStyleGetDrawOrdering();
  *(void *)(a1 + 24) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 8) = 1;
  return a1;
}

uint64_t CA::WindowServer::IOMFBServer::enable_fixed_rate_display_links(CA::WindowServer::IOMFBServer *this, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (pthread_mutex_t *)((char *)this + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  if ((*(unsigned int (**)(void))(**((void **)this + 12) + 288))(*((void *)this + 12)) != a2)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v5 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(*((void *)this + 12) + 24);
        *(_DWORD *)long long buf = 67109376;
        int v9 = v6;
        __int16 v10 = 1024;
        int v11 = a2;
        _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "Display %u setting fixed rate links = %d", buf, 0xEu);
      }
    }
    CA::WindowServer::IOMFBServer::set_throttle_reason((uint64_t)this, 3u, a2);
    CA::WindowServer::IOMFBServer::update_throttle((uint64_t)this);
    (*(void (**)(void, uint64_t))(**((void **)this + 12) + 296))(*((void *)this + 12), a2);
  }
  return pthread_mutex_unlock(v4);
}

void CA::WindowServer::IOMFBServer::set_throttle_reason(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (CADeviceSupportsAPT::once[0] != -1) {
    dispatch_once(CADeviceSupportsAPT::once, &__block_literal_global_52);
  }
  if (CADeviceSupportsAPT::supports_apt && (*(_DWORD *)(*(void *)(a1 + 96) + 624) & 0x10) != 0)
  {
    int v6 = 1 << a2;
    int v7 = *(unsigned __int8 *)(a1 + 952);
    int v8 = (1 << a2) & v7;
    if (a3)
    {
      if (v8) {
        return;
      }
      char v9 = v7 | v6;
    }
    else
    {
      if (!v8) {
        return;
      }
      char v9 = v7 & ~(_BYTE)v6;
    }
    *(unsigned char *)(a1 + 952) = v9;
    if (x_log_hook_p())
    {
      uint64_t v10 = a2;
      x_log_();
    }
    else
    {
      int v11 = x_log_category_windowserver;
      uint64_t v10 = a2;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = CA::WindowServer::IOMFBServer::throttle_reason_string[a2];
        int v13 = *(unsigned __int8 *)(a1 + 952);
        int v14 = (*(unsigned __int8 *)(a1 + 1014) >> 4) & 1;
        *(_DWORD *)long long buf = 136315906;
        uint64_t v17 = v12;
        __int16 v18 = 1024;
        int v19 = a3;
        __int16 v20 = 1024;
        int v21 = v13;
        __int16 v22 = 1024;
        int v23 = v14;
        _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "Setting throttle reason %s=%i (throttle_reasons=%u, disable_throttle=%i)", buf, 0x1Eu);
      }
    }
    uint64_t v15 = mach_absolute_time();
    *(double *)(a1 + 8 * v10 + 960) = CATimeWithHostTime(v15);
  }
}

uint64_t CA::WindowServer::IOMFBServer::update_throttle(uint64_t this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(unsigned char *)(this + 1014) & 0x10;
  BOOL v2 = (*(unsigned char *)(this + 1014) & 0x10) == 0 && *(unsigned char *)(this + 952) != 0;
  if (v2 != (*(_DWORD *)(*(void *)(this + 96) + 27192) != 0))
  {
    uint64_t v3 = this;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(unsigned __int8 *)(v3 + 952);
        *(_DWORD *)long long buf = 67109632;
        BOOL v8 = v2;
        __int16 v9 = 1024;
        int v10 = v5;
        __int16 v11 = 1024;
        unsigned int v12 = v1 >> 4;
        _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "Updating frame rate throttle=%i (throttle_reasons=%u, disable_throttle=%i)", buf, 0x14u);
      }
    }
    int v6 = *(os_unfair_lock_s **)(v3 + 96);
    v6[6798]._uint32_t os_unfair_lock_opaque = v2;
    if (*(void *)(v3 + 800))
    {
      CA::WindowServer::IOMFBServer::refresh_timer_interval((CA::WindowServer::IOMFBServer *)v3);
      int v6 = *(os_unfair_lock_s **)(v3 + 96);
    }
    return CA::WindowServer::IOMFBDisplay::minimum_frame_duration_changed(v6);
  }
  return this;
}

void CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(CA::WindowServer::IOMFBServer *this)
{
  if (CA::WindowServer::IOMFBServer::edr_client(this))
  {
    if ((*((unsigned char *)this + 1014) & 4) != 0)
    {
      BOOL v2 = (pthread_mutex_t *)CA::WindowServer::IOMFBServer::edr_client(this);
      CA::EDRClient::unregister_callback(v2);
      *((unsigned char *)this + 1014) = *((unsigned char *)this + 1014) & 0xF3 | 8;
    }
  }
}

void ___ZN2CA12WindowServer11IOMFBServer25register_libedr_callbacksEv_block_invoke(uint64_t a1, char a2, float a3, float a4, float a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(__CFRunLoop **)(v5 + 768);
  if (v6)
  {
    int v7 = (const void *)*MEMORY[0x1E4F1D418];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = ___ZN2CA12WindowServer11IOMFBServer25register_libedr_callbacksEv_block_invoke_2;
    v8[3] = &__block_descriptor_tmp_93_17177;
    v8[4] = v5;
    char v12 = a2;
    float v9 = a3;
    float v10 = a4;
    float v11 = a5;
    CFRunLoopPerformBlock(v6, v7, v8);
    CFRunLoopWakeUp(*(CFRunLoopRef *)(v5 + 768));
  }
}

_DWORD *___ZN2CA12WindowServer11IOMFBServer25register_libedr_callbacksEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, void, float, float, float))(*(void *)v1 + 152))(v1, *(unsigned __int8 *)(a1 + 52), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48));
  if ((*(unsigned char *)(v1 + 1014) & 8) != 0)
  {
    uint64_t v3 = (pthread_mutex_t *)CA::WindowServer::IOMFBServer::edr_client((CA::WindowServer::IOMFBServer *)v1);
    pthread_mutex_lock(v3);
    CA::EDRClient::reload_potential_headroom_locked((CA::EDRClient *)v3);
    pthread_mutex_unlock(v3);
    uint64_t v4 = CA::WindowServer::IOMFBServer::edr_client((CA::WindowServer::IOMFBServer *)v1);
    pthread_mutex_lock((pthread_mutex_t *)v4);
    unsigned int v5 = *(_DWORD *)(v4 + 152);
    pthread_mutex_unlock((pthread_mutex_t *)v4);
    uint64_t v6 = *(void *)(v1 + 96);
    uint64_t result = CA::WindowServer::Display::initialize_edr_state((_DWORD *)v6);
    uint64_t v7 = *(void *)(v6 + 688);
    if (v7) {
      atomic_store(v5, (unsigned int *)(v7 + 4));
    }
    *(unsigned char *)(v1 + 1014) &= ~8u;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::immediate_render(CA::WindowServer::IOMFBServer *this, char a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mach_absolute_time();
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  double v5 = *((double *)this + 35);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 4);
  unint64_t v6 = CAHostTimeWithTime(v5);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  uint64_t v7 = *((void *)this + 12);
  *(double *)(v7 + 26136) = CATimeWithHostTime(v4) + 0.5;
  if (BYTE9(xmmword_1EB2ACC10))
  {
    kdebug_trace();
    uint64_t v7 = *((void *)this + 12);
  }
  if (v6 == *((void *)this + 113)
    && ((*(_DWORD *)(v7 + 624) & 0x100) == 0
     || (v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 136))(v7), uint64_t v7 = *((void *)this + 12), v8 == 2)))
  {
    BOOL v9 = 1;
  }
  else if ((*(_DWORD *)(v7 + 624) & 0x100) != 0)
  {
    double v10 = (*(double (**)(uint64_t))(*(void *)v7 + 760))(v7);
    unint64_t v11 = CAHostTimeWithTime(v10);
    unsigned int v12 = (*(uint64_t (**)(void))(**((void **)this + 12) + 768))();
    unsigned int v13 = (*(uint64_t (**)(void))(**((void **)this + 12) + 136))(*((void *)this + 12));
    if (!v13) {
      unsigned int v13 = (*(uint64_t (**)(void))(**((void **)this + 12) + 784))(*((void *)this + 12));
    }
    LODWORD(v14) = v13 - v12;
    if (v13 >= v12) {
      uint64_t v14 = v14;
    }
    else {
      uint64_t v14 = 0;
    }
    BOOL v9 = v4 >= v6 + v11 * v14;
    uint64_t v7 = *((void *)this + 12);
  }
  else
  {
    BOOL v9 = v4 >= v6;
  }
  double v15 = (*(double (**)(uint64_t))(*(void *)v7 + 760))(v7);
  unint64_t v16 = CAHostTimeWithTime(v15);
  unint64_t v17 = v16 * (*(unsigned int (**)(void))(**((void **)this + 12) + 768))();
  if (v4 <= v17 + *((void *)this + 115)) {
    unint64_t v18 = v17 + *((void *)this + 115);
  }
  else {
    unint64_t v18 = v4;
  }
  BOOL v19 = v9 && *((unsigned char *)this + 519) == 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 0x40000000;
  float v24[2] = ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke;
  v24[3] = &__block_descriptor_tmp_109;
  v24[4] = this;
  v24[5] = v18;
  char v25 = a2;
  if (v19)
  {
    double v20 = CATimeWithHostTime(v18);
    *((void *)this + 113) = v18;
    *((_DWORD *)this + 252) = 3
                            * (*(uint64_t (**)(void))(**((void **)this + 12) + 768))(*((void *)this + 12));
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    void block[2] = ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke_2;
    block[3] = &unk_1E527F148;
    block[5] = this;
    void block[6] = v18;
    *(double *)&block[7] = v20;
    block[4] = v24;
    block[8] = v6;
    block[9] = v17;
    block[10] = v4;
    int v21 = (__CFRunLoop *)*((void *)this + 96);
    if (v21)
    {
      CFRunLoopPerformBlock(v21, (CFTypeRef)*MEMORY[0x1E4F1D418], block);
      CFRunLoopWakeUp(*((CFRunLoopRef *)this + 96));
    }
  }
  else
  {
    ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke((uint64_t)v24);
    if (BYTE9(xmmword_1EB2ACC10)) {
      kdebug_trace();
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

unint64_t ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 519)) {
    return 0;
  }
  double v3 = (*(double (**)(void))(**(void **)(v1 + 96) + 760))(*(void *)(v1 + 96));
  double v4 = CATimeWithHostTime(*(void *)(a1 + 40)) + v3 * 0.125;
  double v5 = *(double *)(v1 + 944);
  BOOL v6 = *(unsigned char *)(a1 + 48) && *(double *)(v1 + 896) + v5 < v4;
  BOOL v7 = (~*(unsigned __int8 *)(v1 + 1012) & 0xF) == 0 && *(double *)(v1 + 896) + v5 * 0.5 < v4;
  int v8 = v6 || v7;
  CAHostTimeWithTime(v5);
  kdebug_trace();
  if (v8 != 1) {
    return 0;
  }
  unint64_t v9 = CAHostTimeWithTime(v4);
  (*(void (**)(uint64_t, unint64_t))(*(void *)v1 + 488))(v1, v9);
  *(double *)(v1 + 896) = v4;
  return (unint64_t)v4;
}

void ___ZN2CA12WindowServer11IOMFBServer16immediate_renderEb_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[5];
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  double v3 = *(double *)(v2 + 280);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
  unint64_t v4 = CAHostTimeWithTime(v3);
  mach_absolute_time();
  if (v4 == a1[8] && (*(unsigned char *)(v2 + 1014) & 1) != 0)
  {
    *(unsigned char *)(v2 + 1014) &= ~1u;
    CATimeWithHostTime(a1[9]);
    *(void *)(v2 + 864) = 0x7FF0000000000000;
    *(void *)(v2 + 880) = 0;
    *(void *)(v2 + 872) = 0;
    if (BYTE9(xmmword_1EB2ACC10)) {
      kdebug_trace();
    }
    CA::WindowServer::Server::render_for_time(v2);
  }
  else
  {
    (*(void (**)(void))(a1[4] + 16))();
    if (BYTE9(xmmword_1EB2ACC10))
    {
      kdebug_trace();
    }
  }
}

uint64_t CA::WindowServer::IOMFBServer::did_set_mode(os_unfair_lock_s **this)
{
  uint64_t v2 = (pthread_mutex_t *)(this + 68);
  pthread_mutex_lock((pthread_mutex_t *)(this + 68));
  if ((*((unsigned char *)this + 1014) & 2) == 0)
  {
    CA::WindowServer::IOMFBServer::remove_vsync_source((CA::WindowServer::IOMFBServer *)this);
    CA::WindowServer::IOMFBDisplay::reset_timings(this[12]);
    CA::WindowServer::IOMFBServer::add_vsync_source((CA::WindowServer::IOMFBServer *)this, v3);
  }

  return pthread_mutex_unlock(v2);
}

void CA::WindowServer::IOMFBServer::remove_vsync_source(CA::WindowServer::IOMFBServer *this)
{
  if ((*((unsigned char *)this + 1014) & 2) != 0)
  {
    double v3 = (__CFRunLoopSource *)*((void *)this + 98);
    if (!v3) {
      return;
    }
    uint64_t v2 = (char *)this + 784;
    if (*(void *)(*((void *)this + 12) + 25568))
    {
      CA::WindowServer::IOMFBServer::set_vsync_disabled(this);
      double v3 = (__CFRunLoopSource *)*((void *)this + 98);
    }
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 96), v3, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  }
  else
  {
    if (!*((void *)this + 100)) {
      return;
    }
    uint64_t v2 = (char *)this + 800;
    CA::WindowServer::IOMFBServer::set_vsync_disabled(this);
    CADisplayTimerInvalidate(*((void *)this + 100));
    CFRelease(*((CFTypeRef *)this + 100));
  }
  *(void *)uint64_t v2 = 0;
}

void CA::WindowServer::IOMFBServer::add_runloop_source(CA::WindowServer::IOMFBServer *this, CFRunLoopSourceRef source, int a3)
{
  if (a3) {
    uint64_t v5 = 536;
  }
  else {
    uint64_t v5 = 528;
  }
  if (a3) {
    uint64_t v6 = 776;
  }
  else {
    uint64_t v6 = 768;
  }
  if (a3) {
    BOOL v7 = (pthread_cond_t *)((char *)this + 720);
  }
  else {
    BOOL v7 = (pthread_cond_t *)((char *)this + 672);
  }
  if (!*(void *)((char *)this + v5))
  {
    if (a3) {
      int v8 = CA::WindowServer::IOMFBServer::frame_info_thread_body;
    }
    else {
      int v8 = CA::WindowServer::IOMFBServer::thread_body;
    }
    unint64_t v9 = x_thread_create((uint64_t)v8, (uint64_t)this, 1);
    *(void *)((char *)this + v5) = v9;
    CA::Render::Server::set_thread_priority(v9, (_opaque_pthread_t *)0xFFFFFFFFLL);
  }
  for (uint64_t i = *(__CFRunLoop **)((char *)this + v6); !i; uint64_t i = *(__CFRunLoop **)((char *)this + v6))
    pthread_cond_wait(v7, (pthread_mutex_t *)((char *)this + 544));
  if (source)
  {
    CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D418];
    CFRunLoopAddSource(i, source, v11);
  }
}

uint64_t CA::WindowServer::IOMFBServer::brightness_callback(uint64_t a1, int a2, CA::WindowServer::Server *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (pthread_mutex_t *)((char *)a3 + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a3 + 544));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    BOOL v7 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(*((void *)a3 + 12) + 24);
      *(_DWORD *)long long buf = 134218496;
      uint64_t v11 = a1;
      __int16 v12 = 1024;
      int v13 = v8;
      __int16 v14 = 1024;
      int v15 = a2;
      _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "Framebuffer %p, DisplayID: %u, brightness callback enabled: %d", buf, 0x18u);
    }
  }
  (*(void (**)(CA::WindowServer::Server *, void))(*(void *)a3 + 320))(a3, 0);
  CA::WindowServer::Server::post_brightness_notification(a3);
  return pthread_mutex_unlock(v6);
}

uint64_t CA::WindowServer::IOMFBServer::thread_body(CA::WindowServer::IOMFBServer *this, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, sizeof(v16));
  CString = CA_CFStringGetCString(*(const __CFString **)(*((void *)this + 12) + 8), (char *)v16, 256);
  if (CString)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    memset(__str, 0, sizeof(__str));
    snprintf(__str, 0x40uLL, "com.apple.coreanimation.display.%s", CString);
    unint64_t v4 = (CA::WindowServer::Server *)pthread_setname_np(__str);
    if (v4)
    {
      int v5 = (int)v4;
      uint64_t v6 = x_log_category_utilities;
      unint64_t v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        int v17 = 136315394;
        unint64_t v18 = __str;
        __int16 v19 = 1024;
        int v20 = v5;
        BOOL v7 = (char *)&v17;
LABEL_9:
        _os_log_error_impl(&dword_184668000, v6, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)v7, 0x12u);
      }
    }
  }
  else
  {
    unint64_t v4 = (CA::WindowServer::Server *)pthread_setname_np("com.apple.coreanimation.display");
    if (v4)
    {
      int v8 = (int)v4;
      uint64_t v6 = x_log_category_utilities;
      unint64_t v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        *(_DWORD *)__str = 136315394;
        *(void *)&char __str[4] = "com.apple.coreanimation.display";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v8;
        BOOL v7 = __str;
        goto LABEL_9;
      }
    }
  }
  CA::WindowServer::Server::set_server_thread_policy(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  *((void *)this + 96) = CFRunLoopGetCurrent();
  (*(void (**)(void))(**((void **)this + 12) + 400))();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v10 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::WindowServer::null_timer, 0);
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D418];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 96), v10, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  pthread_cond_signal((pthread_cond_t *)this + 14);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRun();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 96), v10, v11);
  CFRelease(v10);
  *((void *)this + 96) = 0;
  *((void *)this + 66) = 0;
  pthread_cond_signal((pthread_cond_t *)this + 14);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

uint64_t CA::WindowServer::IOMFBServer::frame_info_thread_body(CA::WindowServer::IOMFBServer *this, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, sizeof(v16));
  CString = CA_CFStringGetCString(*(const __CFString **)(*((void *)this + 12) + 8), (char *)v16, 256);
  if (CString)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    memset(__str, 0, sizeof(__str));
    snprintf(__str, 0x40uLL, "com.apple.coreanimation.frameinfo.%s", CString);
    unint64_t v4 = (CA::WindowServer::Server *)pthread_setname_np(__str);
    if (v4)
    {
      int v5 = (int)v4;
      uint64_t v6 = x_log_category_utilities;
      unint64_t v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        int v17 = 136315394;
        unint64_t v18 = __str;
        __int16 v19 = 1024;
        int v20 = v5;
        BOOL v7 = (char *)&v17;
LABEL_9:
        _os_log_error_impl(&dword_184668000, v6, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)v7, 0x12u);
      }
    }
  }
  else
  {
    unint64_t v4 = (CA::WindowServer::Server *)pthread_setname_np("com.apple.coreanimation.frameinfo");
    if (v4)
    {
      int v8 = (int)v4;
      uint64_t v6 = x_log_category_utilities;
      unint64_t v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        *(_DWORD *)__str = 136315394;
        *(void *)&char __str[4] = "com.apple.coreanimation.frameinfo";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v8;
        BOOL v7 = __str;
        goto LABEL_9;
      }
    }
  }
  CA::WindowServer::Server::set_server_thread_policy(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  *((void *)this + 97) = CFRunLoopGetCurrent();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v10 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::WindowServer::null_timer, 0);
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D418];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 97), v10, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  pthread_cond_signal((pthread_cond_t *)this + 15);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRun();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 97), v10, v11);
  CFRelease(v10);
  *((void *)this + 97) = 0;
  *((void *)this + 67) = 0;
  pthread_cond_signal((pthread_cond_t *)this + 15);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

uint64_t CA::WindowServer::IOMFBServer::set_privacy_indicator_enable_hint(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1752))();
}

uint64_t CA::WindowServer::IOMFBServer::remove_privacy_indicator(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1744))();
}

uint64_t CA::WindowServer::IOMFBServer::set_privacy_indicator_surface(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 1736))();
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_enabled(CA::WindowServer::IOMFBServer *this, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 12) + 1720))(*((void *)this + 12));
  if (a2)
  {
    return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(this);
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::async_set_vsync_enabled(CA::WindowServer::IOMFBServer *this)
{
  void v6[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  double v3 = (__CFRunLoop *)*((void *)this + 96);
  if (v3 && !*((unsigned char *)this + 1013))
  {
    unint64_t v4 = (const void *)*MEMORY[0x1E4F1D418];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = ___ZN2CA12WindowServer11IOMFBServer23async_set_vsync_enabledEv_block_invoke;
    void v6[3] = &__block_descriptor_tmp_116_17201;
    double v6[4] = this;
    CFRunLoopPerformBlock(v3, v4, v6);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 96));
  }
  return pthread_mutex_unlock(v2);
}

uint64_t ___ZN2CA12WindowServer11IOMFBServer23async_set_vsync_enabledEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 544));
  if ((*(unsigned int (**)(void))(**(void **)(v1 + 96) + 216))(*(void *)(v1 + 96))) {
    CA::WindowServer::IOMFBServer::set_vsync_enabled((CA::WindowServer::IOMFBServer *)v1);
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 544));
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_hidden(CA::WindowServer::IOMFBServer *this, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 12) + 1704))(*((void *)this + 12));
  if ((a2 & 1) == 0)
  {
    return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(this);
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_dictionary(CA::WindowServer::IOMFBServer *this, const __CFDictionary *a2)
{
  (*(void (**)(void, const __CFDictionary *))(**((void **)this + 12) + 1696))(*((void *)this + 12), a2);

  return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(this);
}

uint64_t CA::WindowServer::IOMFBServer::set_cursor_position(CA::WindowServer::IOMFBServer *a1)
{
  (*(void (**)(void *))(**((void **)a1 + 12) + 1680))(*((void **)a1 + 12));

  return CA::WindowServer::IOMFBServer::async_set_vsync_enabled(a1);
}

void CA::WindowServer::IOMFBServer::remove_power_log_timer(CA::WindowServer::IOMFBServer *this)
{
  uint64_t v1 = (__CFRunLoopTimer *)*((void *)this + 101);
  if (v1)
  {
    CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 96), v1, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
    CFRelease(*((CFTypeRef *)this + 101));
    *((void *)this + 101) = 0;
  }
}

uint64_t CA::WindowServer::IOMFBServer::add_power_log_timer(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  double v3 = (pthread_mutex_t *)(a2 + 544);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 544));
  CA::WindowServer::IOMFBDisplay::post_power_log(*(CA::WindowServer::IOMFBDisplay **)(a2 + 96));

  return pthread_mutex_unlock(v3);
}

void CA::WindowServer::IOMFBServer::set_latency(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((*(double (**)(void *))(*a1 + 168))(a1) != a4)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    int v8 = (uint64_t *)a1[12];
    if (CA::WindowServer::Display::Mode::operator==(a3, v8[80]))
    {
      if ((*(unsigned int (**)(uint64_t *, void, long long *, uint64_t, void))(*v8 + 800))(v8, 0, &v20, 64, 0))
      {
        uint64_t v9 = strncmp((const char *)&v20, a2, 0x40uLL);
        if (!v9)
        {
          uint64_t v17 = a1[12];
          if (*(double *)(v17 + 27136) != a4)
          {
            *(double *)(v17 + 27136) = a4;
            if (a2)
            {
              unint64_t v18 = (void *)MEMORY[0x185324A30](v9, v10, v11, v12, v13, v14, v15, v16);
              __int16 v19 = +[CADisplayPersistedData sharedInstance];
              -[CADisplayPersistedData setLatency:forUUID:andMode:](v19, "setLatency:forUUID:andMode:", [NSString stringWithUTF8String:a2], a3, a4);
            }
            CA::WindowServer::Display::post_display_changed(v17);
          }
        }
      }
    }
  }
}

void sub_18492FA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::IOMFBServer::set_allows_edr(CA::WindowServer::IOMFBServer *this, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = CA::WindowServer::IOMFBServer::edr_client(this);
  if (result)
  {
    uint64_t v6 = *((void *)this + 12);
    if (!*(unsigned char *)(v6 + 28138) && (*(_WORD *)(v6 + 656) & 0x1C00) != 0x1000)
    {
      if (*(unsigned char *)(v6 + 28209))
      {
        uint64_t v7 = *((void *)this + 31);
        if (a2)
        {
          if (v7)
          {
            v5.n128_u32[0] = *((_DWORD *)this + 210);
            (*(void (**)(__n128))(v7 + 16))(v5);
          }
        }
        else if (v7)
        {
          v5.n128_u32[0] = 1.0;
          (*(void (**)(__n128))(v7 + 16))(v5);
        }
      }
      else
      {
        int v8 = (pthread_mutex_t *)CA::WindowServer::IOMFBServer::edr_client(this);
        if (CADeviceHasBacklight::once != -1) {
          dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_120);
        }
        if (CADeviceHasBacklight::has_backlight == 1)
        {
          pthread_mutex_lock(v8 + 1);
          if (v8[2].__opaque[10] != (a2 ^ 1))
          {
            v8[2].__opaque[10] = a2 ^ 1;
            int v9 = CA::EDRClient::client(v8);
            if (v9)
            {
              sig = v8[2].__sig;
              *(void *)blocuint64_t k = MEMORY[0x1E4F143A8];
              *(void *)&block[8] = 0x40000000;
              *(void *)&block[16] = ___ZN2CA9EDRClient26set_accessibility_overrideEb_block_invoke;
              uint64_t v13 = &__block_descriptor_tmp_13;
              int v14 = v9;
              char v15 = a2 ^ 1;
              dispatch_async(sig, block);
            }
          }
          pthread_mutex_unlock(v8 + 1);
        }
      }
      (*(void (**)(void, uint64_t))(**((void **)this + 12) + 880))(*((void *)this + 12), a2);
      CA::WindowServer::Server::invalidate((os_unfair_lock_s *)this, *(const CA::Shape **)(*((void *)this + 12) + 216));
      if (byte_1EB2ACC84)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v11 = x_log_category_CADebug;
          if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)blocuint64_t k = 136315138;
            *(void *)&block[4] = "set_allows_edr";
            _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", block, 0xCu);
          }
        }
      }
      *(void *)blocuint64_t k = 0;
      *(int64x2_t *)&block[8] = vdupq_n_s64(8uLL);
      return (*(uint64_t (**)(CA::WindowServer::IOMFBServer *, unsigned char *, double))(*(void *)this + 184))(this, block, 0.0);
    }
  }
  return result;
}

__CFRunLoop *CA::WindowServer::IOMFBServer::set_calibration_phase(CA::WindowServer::IOMFBServer *this, int a2, int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::IOMFBServer *))(*(void *)this + 384))(this);
  if (result)
  {
    uint64_t v7 = result;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
    int v8 = (const void *)*MEMORY[0x1E4F1D418];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    void block[2] = ___ZN2CA12WindowServer11IOMFBServer21set_calibration_phaseEjj_block_invoke;
    block[3] = &__block_descriptor_tmp_14_17225;
    block[4] = this;
    int v10 = a2;
    int v11 = a3;
    CFRunLoopPerformBlock(v7, v8, block);
    CFRunLoopWakeUp(v7);
    return (__CFRunLoop *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  }
  return result;
}

void CA::WindowServer::IOMFBServer::~IOMFBServer(CA::WindowServer::IOMFBServer *this)
{
  CA::WindowServer::IOMFBServer::~IOMFBServer(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1ED0227F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 544));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 608));
  pthread_cond_destroy((pthread_cond_t *)this + 14);
  pthread_cond_destroy((pthread_cond_t *)this + 15);
  uint64_t v2 = (const void *)*((void *)this + 102);
  if (v2) {
    CFRelease(v2);
  }
  double v3 = (const void *)*((void *)this + 103);
  if (v3) {
    CFRelease(v3);
  }
  CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(this);
  unint64_t v4 = *((void *)this + 104);
  if (v4)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 104));
    if (*(_DWORD *)(v4 + 136)) {
      EDRReleaseClient();
    }
    dispatch_release(*(dispatch_object_t *)(v4 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)v4);
    MEMORY[0x185323DC0](v4, 0x1020C40FE7D54AALL);
    *((void *)this + 104) = 0;
  }

  CA::WindowServer::Server::~Server(this);
}

uint64_t CA::WindowServer::IOMFBServer::cancel_all_swaps(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 472))();
}

uint64_t CA::WindowServer::IOMFBServer::set_creates_cached_surfaces(uint64_t this, int a2)
{
  if (a2) {
    int v2 = 128;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(*(void *)(this + 96) + 745) = *(_DWORD *)(*(void *)(this + 96) + 745) & 0xFFFFFF7F | v2;
  return this;
}

uint64_t CA::WindowServer::IOMFBServer::displayed_surface(CA::WindowServer::IOMFBServer *this)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 12) + 480))(*((void *)this + 12), 1);
  if (result)
  {
    int v2 = *(uint64_t (**)(void))(*(void *)result + 160);
    return v2();
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::current_surface(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 448))();
}

os_unfair_lock_s *CA::WindowServer::IOMFBServer::previous_vbl(os_unfair_lock_s **this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = mach_absolute_time();
  int v3 = CA::WindowServer::IOMFBDisplay::timing_granularity(this[12], 0);
  unint64_t v4 = (*(unsigned int (**)(void))(*(void *)&this[12]->_os_unfair_lock_opaque + 768))() * v3;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  CA::WindowServer::IOMFBDisplay::timing_reference((CA::WindowServer::IOMFBDisplay *)&v10, (uint64_t)this[12], 0);
  uint64_t result = this[115];
  if (((unint64_t)result + v4 <= v2 || !this[12][6798]._os_unfair_lock_opaque) && v11)
  {
    uint64_t v6 = v11 - v2;
    if (v2 > v11) {
      uint64_t v6 = v2 - v11;
    }
    uint64_t v7 = v6 % v4;
    if (v7)
    {
      uint64_t v8 = v2 - v7;
      uint64_t v9 = v2 - v4 + v7;
      if (v2 <= v11) {
        return (os_unfair_lock_s *)v9;
      }
      else {
        return (os_unfair_lock_s *)v8;
      }
    }
    else
    {
      return (os_unfair_lock_s *)v2;
    }
  }
  return result;
}

double CA::WindowServer::IOMFBServer::next_wakeup_time(os_unfair_lock_s **this)
{
  int v2 = CA::WindowServer::IOMFBDisplay::timing_granularity(this[12], 0);
  int v3 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&this[12]->_os_unfair_lock_opaque + 768))(this[12]);
  uint64_t v4 = (*(uint64_t (**)(os_unfair_lock_s **))&(*this)[14]._os_unfair_lock_opaque)(this);
  if (!v4) {
    return *((double *)this + 124);
  }
  unint64_t v5 = v4 + (v3 * v2);

  return CATimeWithHostTime(v5);
}

uint64_t CA::WindowServer::IOMFBServer::activate_replay(CA::WindowServer::IOMFBServer *this)
{
  int v2 = (pthread_mutex_t *)((char *)this + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CA::WindowServer::IOMFBServer::set_vsync_disabled(this);
  pthread_mutex_unlock(v2);
  int v3 = *(uint64_t (**)(void))(**((void **)this + 12) + 440);

  return v3();
}

uint64_t CA::WindowServer::IOMFBServer::finish_skylight_update(CA::WindowServer::IOMFBServer *this, CA::Render::Update *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, CA::Render::Update *))(**((void **)this + 12) + 416))(*((void *)this + 12), a2);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
  return v3;
}

uint64_t CA::WindowServer::IOMFBServer::begin_skylight_update(CA::WindowServer::IOMFBServer *this, CA::Render::Update *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  if ((*(unsigned int (**)(void))(**((void **)this + 12) + 216))(*((void *)this + 12))) {
    CA::WindowServer::IOMFBServer::set_vsync_enabled(this);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 12) + 408);

  return v3();
}

uint64_t CA::WindowServer::IOMFBServer::shutdown(CA::WindowServer::IOMFBServer *this)
{
  CA::WindowServer::Server::shutdown(this);
  CA::Render::remove_observer(0x19u, 0, (uint64_t)CA::WindowServer::IOMFBServer::flush_irdc, (uint64_t)this);
  CA::Render::remove_observer(0x2Au, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_power_log, (uint64_t)this);
  CA::Render::remove_observer(0x2Bu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_max_rate_power_log, (uint64_t)this);
  CA::Render::remove_observer(0x2Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_render_statistics_power_log, (uint64_t)this);
  CA::Render::remove_observer(0x35u, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_brightness_hotplug, (uint64_t)this);
  CA::Render::remove_observer(0x3Du, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_flipbook_state_notification, (uint64_t)this);
  CA::Render::remove_observer(0x3Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::check_display_blanked, (uint64_t)this);
  if ((*(_DWORD *)(*((void *)this + 12) + 624) & 0x10) != 0)
  {
    CA::Render::remove_observer(0x37u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_range, (uint64_t)this);
    CA::Render::remove_observer(0x38u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_reasons, (uint64_t)this);
    CA::Render::remove_observer(0x39u, 0, (uint64_t)CA::WindowServer::IOMFBServer::request_frame_phase_shift, (uint64_t)this);
    CA::Render::remove_observer(0x2Cu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_frame_rate_power_log, (uint64_t)this);
    CA::Render::remove_observer(0x47u, 0, (uint64_t)CA::WindowServer::IOMFBServer::get_display_debug_properties, (uint64_t)this);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CA::WindowServer::IOMFBServer::remove_vsync_source(this);
  int v2 = (__CFRunLoopSource *)*((void *)this + 99);
  uint64_t v3 = (CFRunLoopMode *)MEMORY[0x1E4F1D418];
  if (v2)
  {
    if (*(void *)(*((void *)this + 12) + 25568))
    {
      IOMobileFramebufferDisableHotPlugDetectNotifications();
      int v2 = (__CFRunLoopSource *)*((void *)this + 99);
    }
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 96), v2, *v3);
    *((void *)this + 99) = 0;
  }
  if (*((void *)this + 106))
  {
    CA::WindowServer::IOMFBDisplay::set_frame_info_enabled(*((CA::WindowServer::IOMFBDisplay **)this + 12), 0);
    if (*(void *)(*((void *)this + 12) + 25568)) {
      IOMobileFramebufferFrameInfo();
    }
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 97), *((CFRunLoopSourceRef *)this + 106), *v3);
    *((void *)this + 106) = 0;
  }
  CA::WindowServer::IOMFBServer::remove_power_log_timer(this);
  CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(this);
  if (*(unsigned char *)(*((void *)this + 12) + 28209)) {
    IOMobileFramebufferSetBrightnessControlCallback();
  }
  if (*((void *)this + 102))
  {
    IOHIDEventSystemClientUnregisterDeviceMatchingBlock();
    IOHIDEventSystemClientUnscheduleWithRunLoop();
  }
  CA::WindowServer::IOMFBDisplay::post_power_log(*((CA::WindowServer::IOMFBDisplay **)this + 12));
  if (*((void *)this + 67))
  {
    CFRunLoopStop(*((CFRunLoopRef *)this + 97));
    while (*((void *)this + 97))
      pthread_cond_wait((pthread_cond_t *)this + 15, (pthread_mutex_t *)((char *)this + 544));
  }
  if (*((void *)this + 66))
  {
    CFRunLoopStop(*((CFRunLoopRef *)this + 96));
    while (*((void *)this + 96))
      pthread_cond_wait((pthread_cond_t *)this + 14, (pthread_mutex_t *)((char *)this + 544));
  }

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
}

void CA::WindowServer::IOMFBServer::get_display_debug_properties(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, CFMutableDictionaryRef *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a3 == *(_DWORD *)(*((void *)a2 + 12) + 24) && *((unsigned char *)a2 + 952))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    for (uint64_t i = 0; i != 4; ++i)
    {
      if ((*((unsigned __int8 *)a2 + 952) >> i))
      {
        *(_OWORD *)__str = 0u;
        long long v14 = 0u;
        *(_OWORD *)cStr = 0u;
        long long v12 = 0u;
        snprintf(__str, 0x20uLL, "%s", CA::WindowServer::IOMFBServer::throttle_reason_string[i]);
        uint64_t v8 = mach_absolute_time();
        double v9 = CATimeWithHostTime(v8);
        snprintf(cStr, 0x20uLL, "YES, since %.0f seconds ago", v9 - *((double *)a2 + i + 120));
        CFStringRef v10 = CFStringCreateWithCString(0, __str, 0x8000100u);
        CA_CFDictionarySetCString(Mutable, v10, cStr);
        CFRelease(v10);
      }
    }
    CFDictionarySetValue(a3[1], @"throttleReasons", Mutable);
    CFRelease(Mutable);
  }
}

void CA::WindowServer::IOMFBServer::request_frame_phase_shift(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, _DWORD *a3, void *a4)
{
  uint64_t v4 = *((void *)a2 + 12);
  if ((*(_DWORD *)(v4 + 624) & 0x100) != 0)
  {
    int v6 = a3[1];
    if (!v6 || *(_DWORD *)(v4 + 24) == v6)
    {
      int v7 = a3[2];
      uint64_t v8 = *((void *)a3 + 2);
      double v9 = (os_unfair_lock_s *)(v4 + 27396);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 27396));
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 26048));
      for (uint64_t i = *(void *)(v4 + 27400); i != *(void *)(v4 + 27408); i += 24)
      {
        if ((*(unsigned char *)(i + 20) & 1) == 0 && *(_DWORD *)i != v7) {
          goto LABEL_17;
        }
      }
      uint64_t v11 = atomic_load((unsigned int *)(*(void *)(v4 + 26064) + 4));
      uint64_t v12 = llround((double)v8 / (double)v11);
      if (v12 >= 0) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = -v12;
      }
      if (v12) {
        BOOL v14 = v13 >= 2;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
LABEL_17:
        kdebug_trace();
        char v15 = 0;
        goto LABEL_29;
      }
      unsigned int v16 = atomic_load((unsigned int *)(*(void *)(v4 + 26064) + 36));
      if (!v16) {
        unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 784))(v4);
      }
      uint64_t v17 = v16;
      if (v12 < 0) {
        uint64_t v17 = 0;
      }
      uint64_t v18 = v17 - v12;
      unint64_t v19 = atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 48));
      unint64_t v20 = v18 + v19;
      unint64_t v21 = atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 24));
      unint64_t v22 = atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 56));
      if (atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 24)))
      {
        unsigned int v24 = atomic_load((unsigned int *)(*(void *)(v4 + 26064) + 40));
        if (!v24)
        {
          unint64_t v28 = v20;
          unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 784))(v4);
          unint64_t v20 = v28;
        }
        uint64_t v25 = v24;
        if (v12 < 0) {
          uint64_t v25 = 0;
        }
        unint64_t v22 = v22 - v12 + v25;
        v21 += v12 * v11;
      }
      *(void *)(v4 + 26096) += v18;
      uint64_t v26 = *(void *)(v4 + 26064);
      char v15 = 1;
      unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v26 + 16), 1u);
      atomic_store(v21, (unint64_t *)(v26 + 24));
      atomic_store(v20, (unint64_t *)(v26 + 48));
      atomic_store(v22, (unint64_t *)(v26 + 56));
      atomic_store(add + 2, (unsigned int *)(v26 + 16));
      __dmb(0xBu);
      kdebug_trace();
      atomic_load((unsigned __int8 *)(*(void *)(v4 + 26064) + 32));
      atomic_load((unsigned __int8 *)(*(void *)(v4 + 26064) + 33));
      atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 24));
      atomic_load((unsigned int *)(*(void *)(v4 + 26064) + 36));
      atomic_load((unsigned int *)(*(void *)(v4 + 26064) + 40));
      kdebug_trace();
      atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 48));
      atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 64));
      atomic_load((unint64_t *)(*(void *)(v4 + 26064) + 56));
      kdebug_trace();
      double v9 = (os_unfair_lock_s *)(v4 + 27396);
LABEL_29:
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 26048));
      os_unfair_lock_unlock(v9);
      *(unsigned char *)a3 = v15;
    }
  }
}

void CA::WindowServer::IOMFBServer::post_flipbook_state_notification(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v5 = a3[4];
  uint64_t v6 = a3[6];
  if (*((void *)a2 + 34))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v7 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
      {
        int v8 = *(_DWORD *)(*((void *)a2 + 12) + 24);
        *(_DWORD *)long long buf = 67109632;
        int v11 = v8;
        __int16 v12 = 1024;
        int v13 = v6;
        __int16 v14 = 1024;
        int v15 = v5;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_INFO, "Display %u posting flipbook state %d notification (pre? %u) ", buf, 0x14u);
      }
    }
    (*(void (**)(void, BOOL, uint64_t))(*((void *)a2 + 34) + 16))(*((void *)a2 + 34), v5 != 0, v6);
  }
  if (!v5)
  {
    uint64_t v9 = *((void *)a2 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v9, v6);
    }
  }
}

void CA::WindowServer::IOMFBServer::post_brightness_hotplug(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  (*(void (**)(CA::Render::Object *))(*(void *)a2 + 304))(a2);

  CA::WindowServer::Server::post_brightness_notification(a2);
}

uint64_t CA::WindowServer::IOMFBServer::post_power_log(CA::WindowServer::IOMFBServer *this, CA::WindowServer::IOMFBDisplay **a2, void *a3, void *a4)
{
  int v5 = (pthread_mutex_t *)(a2 + 68);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 68));
  CA::WindowServer::IOMFBDisplay::post_power_log(a2[12]);

  return pthread_mutex_unlock(v5);
}

uint64_t CA::WindowServer::IOMFBServer::flush_irdc(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  return CA::WindowServer::Server::set_irdc_hint(a2);
}

os_log_t ___ZN2CA12WindowServer11IOMFBServer17server_log_handleEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "IOMFBServer");
  CA::WindowServer::IOMFBServer::server_log_handle(void)::in_memory_handle = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA12WindowServer11IOMFBServer23server_stall_log_handleEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "IOMFBServer.Stalls");
  CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::handle = (uint64_t)result;
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::hotplug_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(*(void *)(a3 + 96) + 24);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "Display %u hot plug %d\n", buf, 0xEu);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a3 + 24));
  pthread_mutex_lock((pthread_mutex_t *)(a3 + 544));
  int v7 = *(void **)(a3 + 96);
  int v8 = a2 != 0;
  if (*((unsigned __int8 *)v7 + 28168) != v8)
  {
    *((unsigned char *)v7 + 28168) = v8;
    if ((*(unsigned int (**)(void *))(*v7 + 2248))(v7))
    {
      v7[3341] = 0;
      *((unsigned char *)v7 + 26856) = 0;
      (*(void (**)(void *))(*v7 + 2256))(v7);
    }
    if ((v7[82] & 0x1C00) == 0x400)
    {
      uint64_t v9 = v7[91];
      int v10 = *(unsigned __int8 *)(v9 + 2);
      int v11 = *(unsigned __int8 *)(v9 + 3);
      BOOL v12 = !v10 && v11 == 0;
      if (v12 && a2 != 0) {
        (*(void (**)(void *, uint64_t, void, uint64_t))(*v7 + 2144))(v7, 1, 0, 1);
      }
    }
  }
  CA::WindowServer::Server::update_display_modes_locked((CA::WindowServer::Server *)a3);
  CA::WindowServer::IOMFBDisplay::enable_hotplug_info(*(CA::WindowServer::IOMFBDisplay **)(a3 + 96));
  if (*(void *)(*(void *)(a3 + 96) + 27080)) {
    CA::WindowServer::IOMFBServer::update_orientation_from_hid((__IOHIDServiceClient **)a3);
  }
  if (!a2)
  {
    CA::WindowServer::IOMFBServer::unregister_libedr_callbacks((CA::WindowServer::IOMFBServer *)a3);
    (*(void (**)(void))(**(void **)(a3 + 96) + 48))(*(void *)(a3 + 96));
    goto LABEL_37;
  }
  uint64_t v14 = *(void *)(a3 + 96);
  if ((*(_WORD *)(v14 + 656) & 0x1C00) != 0)
  {
    *(unsigned char *)(v14 + 28198) = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    memset(buf, 0, sizeof(buf));
    BOOL v15 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *, uint64_t, void))(*(void *)v14 + 800))(v14, 1, buf, 64, 0))
    {
      CFStringRef v16 = CFStringCreateWithCString(0, (const char *)buf, 0x8000100u);
      if (v16)
      {
        CFStringRef v17 = v16;
        CFDictionaryRef v18 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"CABrightnessPreferences", (CFStringRef)*MEMORY[0x1E4F1D3D8]);
        if (v18)
        {
          CFDictionaryRef v19 = v18;
          CFTypeID v20 = CFGetTypeID(v18);
          if (v20 == CFDictionaryGetTypeID())
          {
            Value = CFDictionaryGetValue(v19, v17);
            if (Value)
            {
              unint64_t v22 = Value;
              if (CA_CFBoolValue(Value))
              {
                (*(void (**)(uint64_t, float))(*(void *)v14 + 928))(v14, 0.01);
                uint64_t v23 = mach_absolute_time();
                *(double *)(v14 + 26528) = CATimeWithHostTime(v23) + 2.0;
              }
              CFRelease(v19);
              BOOL v15 = !CA_CFBoolValue(v22);
              CFRelease(v17);
LABEL_35:
              *(unsigned char *)(v14 + 28198) = v15;
              *(void *)(v14 + 27232) = 0;
              uint64_t v14 = *(void *)(a3 + 96);
              goto LABEL_36;
            }
          }
          CFRelease(v19);
        }
        CFRelease(v17);
        BOOL v15 = 1;
      }
      else
      {
        BOOL v15 = 0;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v14 + 952))(v14);
    (*(void (**)(uint64_t))(*(void *)v14 + 928))(v14);
    os_unfair_lock_lock((os_unfair_lock_t)(v14 + 27248));
    uint64_t v24 = *(void *)(v14 + 27256);
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 27248));
    if (!v24) {
      *(_DWORD *)(v14 + 745) &= ~0x200u;
    }
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v14 + 745) |= 0x400u;
  *(void *)long long buf = 0;
  *(int64x2_t *)&uint8_t buf[8] = vdupq_n_s64(0x20000000uLL);
  (*(void (**)(uint64_t, uint8_t *, double))(*(void *)a3 + 184))(a3, buf, 0.0);
  CA::WindowServer::IOMFBDisplay::post_hotplug_log(*(CA::WindowServer::IOMFBDisplay **)(a3 + 96));
  *(void *)(*(void *)(a3 + 96) + 27384) = 0;
LABEL_37:
  uint64_t v25 = *(void *)(a3 + 224);
  if (v25) {
    (*(void (**)(uint64_t, BOOL))(v25 + 16))(v25, a2 != 0);
  }
  if (a2) {
    int v26 = 8;
  }
  else {
    int v26 = 7;
  }
  CA::WindowServer::Server::notify_content_streams(a3, v26);
  uint64_t v27 = *(_WORD **)(a3 + 96);
  if ((v27[328] & 0x1C00) == 0x400 && !a2) {
    (*(void (**)(_WORD *, void, void, uint64_t))(*(void *)v27 + 2144))(v27, 0, 0, 1);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a3 + 544));
  return pthread_mutex_unlock((pthread_mutex_t *)(a3 + 24));
}

void CA::WindowServer::IOMFBServer::update_orientation_from_hid(__IOHIDServiceClient **this)
{
  if (this[103])
  {
    uint64_t v2 = IOHIDServiceClientCopyEvent();
    if (v2)
    {
      uint64_t v3 = (const void *)v2;
      CA::WindowServer::IOMFBServer::update_orientation_with_hid_event(this, this[103]);
      CFRelease(v3);
    }
  }
}

void CA::WindowServer::IOMFBServer::update_orientation_with_hid_event(void *a1, __IOHIDServiceClient *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const void **)(a1[12] + 27080);
  if (v2)
  {
    if (IOHIDEventGetIntegerValue() == 2)
    {
      CFStringRef v5 = (const __CFString *)IOHIDServiceClientCopyProperty(a2, @"kUSBContainerID");
      if (v5)
      {
        CFStringRef v6 = v5;
        CFUUIDRef v7 = CFUUIDCreateFromString(0, v5);
        if (v7)
        {
          CFUUIDRef v8 = v7;
          if (CFEqual(v7, v2))
          {
            IOHIDEventGetFloatValue();
            if (v9 <= 60.0 || v9 >= 120.0)
            {
              if (v9 <= 150.0 || v9 >= 210.0) {
                int v10 = v9 < 300.0 && v9 > 240.0;
              }
              else {
                int v10 = 2;
              }
            }
            else
            {
              int v10 = 3;
            }
            if (v10 != *(unsigned __int8 *)(a1[12] + 656))
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                int v11 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
                {
                  int v12 = *(_DWORD *)(a1[12] + 24);
                  *(_DWORD *)long long buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v12;
                  v18.i16[0] = 1024;
                  *(__int32 *)((char *)v18.i32 + 2) = v10;
                  _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_INFO, "display id %u changed orientation %d", buf, 0xEu);
                }
              }
              uint64_t v13 = a1[12];
              __int16 v14 = *(_WORD *)(v13 + 656);
              if (v10 != v14)
              {
                *(_WORD *)(v13 + 656) = v14 & 0xFF00 | v10;
                CA::WindowServer::Display::post_display_changed(v13);
                uint64_t v13 = a1[12];
              }
              *(_DWORD *)(v13 + 745) |= 0x400u;
              *(void *)long long buf = 0;
              int64x2_t v18 = vdupq_n_s64(0x800000uLL);
              (*(void (**)(void *, uint8_t *, double))(*a1 + 184))(a1, buf, 0.0);
              uint64_t v15 = *(void *)(a1[12] + 48);
              if (v15)
              {
                v16[0] = MEMORY[0x1E4F143A8];
                v16[1] = 0x40000000;
                v16[2] = ___ZN2CA12WindowServer11IOMFBServer33update_orientation_with_hid_eventEP20__IOHIDServiceClientP12__IOHIDEvent_block_invoke;
                v16[3] = &__block_descriptor_tmp_100;
                v16[4] = v15;
                CA::WindowServer::Server::schedule_block(v15, v16);
              }
            }
          }
          CFRelease(v8);
        }
        CFRelease(v6);
      }
    }
  }
}

uint64_t ___ZN2CA12WindowServer11IOMFBServer33update_orientation_with_hid_eventEP20__IOHIDServiceClientP12__IOHIDEvent_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = 0;
  int64x2_t v4 = vdupq_n_s64(0x800000uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)v1 + 184))(v1, &v3, 0.0);
}

void CA::WindowServer::IOMFBServer::signpost_context(CA::WindowServer::IOMFBServer *this, unsigned int a2, int a3, unsigned int a4, const char *a5, uint64_t a6, const __CFString *a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  if (a6)
  {
    if (CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token == -1)
    {
      if (!a3) {
        return;
      }
LABEL_4:
      if (!os_signpost_enabled((os_log_t)CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::handle)) {
        return;
      }
LABEL_9:
      _os_signpost_emit_unreliably_with_name_impl();
      return;
    }
    dispatch_once(&CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token, &__block_literal_global_5_17260);
    if (a3) {
      goto LABEL_4;
    }
  }
  else
  {
    if (CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token == -1)
    {
      if (!a3) {
        return;
      }
    }
    else
    {
      dispatch_once(&CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token, &__block_literal_global_5_17260);
      if (!a3) {
        return;
      }
    }
    if (os_signpost_enabled((os_log_t)CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::handle)) {
      goto LABEL_9;
    }
  }
}

void CA::WindowServer::IOMFBServer::enable_frame_info_tag_list(CA::WindowServer::IOMFBServer *this, const char **a2, uint64_t a3, const char **a4, uint64_t a5)
{
  uint64_t v9 = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  do
  {
    if (a5)
    {
      int v10 = a2[v9];
      uint64_t v11 = a5;
      int v12 = a4;
      while (strcmp(v10, *v12))
      {
        ++v12;
        if (!--v11) {
          goto LABEL_12;
        }
      }
      if (IOMobileFramebufferChangeFrameInfo())
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v13 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            __int16 v14 = a2[v9];
            *(_DWORD *)long long buf = 136315138;
            CFStringRef v16 = v14;
            _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_ERROR, "failed to enable frame info tag '%s'", buf, 0xCu);
          }
        }
      }
    }
LABEL_12:
    ++v9;
  }
  while (v9 != a3);
}

void ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(__IOHIDServiceClient ***)(a1 + 32);
  v2[102] = (__IOHIDServiceClient *)IOHIDEventSystemClientCreate();
  IOHIDEventSystemClientSetMatchingMultiple();
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  int v10 = ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke_3;
  uint64_t v11 = &__block_descriptor_tmp_106;
  int v12 = v2;
  IOHIDEventSystemClientRegisterDeviceMatchingBlock();
  CFArrayRef v3 = IOHIDEventSystemClientCopyServices(v2[102]);
  if (v3)
  {
    CFArrayRef v4 = v3;
    int Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v6 = 0;
      uint64_t v7 = Count;
      do
      {
        ValueAtIndex = (__IOHIDServiceClient *)CFArrayGetValueAtIndex(v4, v6);
        if (ValueAtIndex) {
          v10((uint64_t)v9, 0, v2, ValueAtIndex);
        }
        ++v6;
      }
      while (v7 != v6);
    }
    CFRelease(v4);
  }
  IOHIDEventSystemClientRegisterEventBlock();
  IOHIDEventSystemClientScheduleWithRunLoop();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void CA::WindowServer::IOMFBServer::post_power_notification(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, unsigned __int8 *a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a3 == *(_DWORD *)(*((void *)a2 + 12) + 24))
  {
    int v5 = a3[4];
    uint64_t v6 = a3[6];
    if (*((void *)a2 + 33))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v7 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(_DWORD *)(*((void *)a2 + 12) + 24);
          uint64_t v9 = "post";
          if (v5) {
            uint64_t v9 = "pre";
          }
          *(_DWORD *)long long buf = 67109634;
          int v12 = v8;
          __int16 v13 = 1024;
          int v14 = v6;
          __int16 v15 = 2080;
          CFStringRef v16 = v9;
          _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "Display %u posting power %d %s-notification ", buf, 0x18u);
        }
      }
      (*(void (**)(void, BOOL, uint64_t))(*((void *)a2 + 33) + 16))(*((void *)a2 + 33), v5 != 0, v6);
    }
    if (!v5)
    {
      uint64_t v10 = *((void *)a2 + 30);
      if (v10) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, v6);
      }
    }
  }
}

void ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke_3(uint64_t a1, int a2, __IOHIDServiceClient **a3, IOHIDServiceClientRef service)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (IOHIDServiceClientConformsTo(service, 0x20u, 0x8Au))
  {
    uint64_t v7 = *(const void **)(v6 + 824);
    if (v7) {
      CFRelease(v7);
    }
    *(void *)(v6 + 824) = CFRetain(service);
    CA::WindowServer::IOMFBServer::update_orientation_from_hid(a3);
  }
}

void ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDServiceClient *a4)
{
  int Type = IOHIDEventGetType();
  if (Type == 10)
  {
    CA::WindowServer::IOMFBServer::update_orientation_with_hid_event((void *)a3, a4);
  }
  else if (Type == 15)
  {
    IOHIDEventGetFloatValue();
    float v8 = v7;
    pthread_mutex_lock((pthread_mutex_t *)(a3 + 24));
    (*(void (**)(float))(**(void **)(a3 + 96) + 992))(v8);
    pthread_mutex_unlock((pthread_mutex_t *)(a3 + 24));
  }
}

BOOL CA::Render::Surface::is_fp16(CA::Render::Surface *this)
{
  int v1 = *((_DWORD *)this + 32);
  return v1 == 1380411457 || v1 == 642934849;
}

float CA::Render::Surface::opacity_at(IOSurfaceRef *this, int a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  float v3 = 1.0;
  if ((*((unsigned char *)this + 13) & 0x10) == 0
    && ((*((uint64_t (**)(IOSurfaceRef *))*this + 15))(this) & 1) == 0
    && this[14])
  {
    double v7 = (CA::Render *)(*((uint64_t (**)(IOSurfaceRef *))*this + 13))(this);
    BOOL v8 = v7 != 35 && ((v7 < 0x23) & (0x419A4EB03uLL >> (char)v7)) == 0;
    if (!v8 && !IOSurfaceLock(this[14], 1u, 0))
    {
      *(_DWORD *)uint64_t v24 = 1065353216;
      BaseAddress = (char *)IOSurfaceGetBaseAddress(this[14]);
      if (BaseAddress)
      {
        uint64_t v10 = BaseAddress;
        int v11 = *((_DWORD *)this + 4);
        int v12 = *((_DWORD *)this + 5);
        unsigned int v13 = v11 - 1;
        if (v11 <= 0) {
          unsigned int v13 = 0;
        }
        if (v11 > a2) {
          unsigned int v14 = a2 & ~(a2 >> 31);
        }
        else {
          unsigned int v14 = v13;
        }
        unsigned int v15 = v12 - 1;
        if (v12 <= 0) {
          unsigned int v15 = 0;
        }
        if (v12 > a3) {
          uint64_t v16 = a3 & ~(a3 >> 31);
        }
        else {
          uint64_t v16 = v15;
        }
        size_t BytesPerRow = IOSurfaceGetBytesPerRow(this[14]);
        int v20 = CA::Render::format_opacity_at_value(v7, (__int16 *)&v10[BytesPerRow * v16 + dword_184999468[v7] * v14], (float *)v24, v18, v19);
        if (v7 != 35 || v20)
        {
          float v3 = *(float *)v24;
        }
        else
        {
          BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(this[14], 1uLL);
          LOBYTE(v22) = BaseAddressOfPlane[IOSurfaceGetBytesPerRowOfPlane(this[14], 1uLL) * v16 + v14];
          float v3 = (float)v22 * 0.0039216;
        }
      }
      IOSurfaceUnlock(this[14], 1u, 0);
    }
  }
  return v3;
}

uint64_t CA::Render::Surface::set_data_volatile(CA::Render::Surface *this, __IOSurface *a2)
{
  uint64_t v2 = (CA::Render *)*((void *)this + 14);
  if (v2) {
    return CA::Render::set_iosurface_volatile(v2, a2);
  }
  else {
    return a2 ^ 1;
  }
}

uint64_t CA::Render::set_iosurface_volatile(CA::Render *this, __IOSurface *a2)
{
  unsigned int v2 = a2;
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint32_t oldState = 0;
  if (IOSurfaceSetPurgeable(this, (uint32_t)a2, &oldState)) {
    return v2 ^ 1;
  }
  if (oldState == 2) {
    return v2;
  }
  return 1;
}

__IOSurface *CA::Render::Surface::data_size(CA::Render::Surface *this)
{
  os_log_t result = (__IOSurface *)*((void *)this + 14);
  if (result) {
    return (__IOSurface *)IOSurfaceGetAllocSize(result);
  }
  return result;
}

uint64_t CA::Render::Surface::has_linear_edr(CA::Render::Surface *this)
{
  return (*((unsigned __int16 *)this + 168) >> 4) & 1;
}

CGColorSpace *CA::Render::Surface::set_default_colorspace(CA::Render::Surface *this)
{
  unsigned int v2 = (CA::Render *)(*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 104))(this);
  float v3 = (CGColorSpace *)CA::Render::format_default_colorspace(v2);

  return CA::Render::Texture::set_colorspace(this, v3);
}

void CA::Render::Surface::show(CA::Render::Surface *this, unsigned int a2, char a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v56 = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 168))(this);
    if (x_log_hook_p())
    {
      (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 104))(this);
      if (v56 >= 0x400)
      {
        double v62 = 1.0;
        do
          double v62 = v62 * 0.0009765625;
        while (v62 * (double)v56 >= 1024.0);
      }
      goto LABEL_118;
    }
    uint64_t v57 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = *((_DWORD *)this + 4);
      int v58 = *((_DWORD *)this + 5);
      unsigned int v60 = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 104))(this);
      if (v60 > 0x23) {
        long long v61 = "UNKNOWN";
      }
      else {
        long long v61 = off_1E5272E18[v60];
      }
      double v63 = (double)v56;
      if (v56 >= 0x400)
      {
        double v65 = 1.0;
        do
        {
          double v65 = v65 * 0.0009765625;
          double v64 = v65 * v63;
        }
        while (v65 * v63 >= 1024.0);
      }
      else
      {
        double v64 = (double)v56;
      }
      uint64_t v66 = v56 > 0x3FF;
      if ((v56 & 0xFFFFFFFFFFF00000) != 0) {
        ++v66;
      }
      if ((v56 & 0xFFFFFFFFC0000000) != 0) {
        ++v66;
      }
      if (v56 >> 40) {
        ++v66;
      }
      if (v56 >> 50) {
        ++v66;
      }
      if (v56 >> 60) {
        ++v66;
      }
      float32x2_t v67 = off_1E527FCB0[v66];
      *(_DWORD *)long long buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v59;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v58;
      *(_WORD *)&buf[14] = 2080;
      *(void *)&buf[16] = v61;
      *(_WORD *)&buf[24] = 2048;
      *(double *)&buf[26] = v64;
      *(_WORD *)&buf[34] = 2080;
      *(void *)&buf[36] = v67;
      BOOL v8 = "<surface [%d %d] [%s] [%.2lf %s]>";
      uint64_t v9 = buf;
      uint64_t v10 = v57;
      uint32_t v11 = 44;
      goto LABEL_121;
    }
    return;
  }
  uint64_t v4 = *((void *)this + 15);
  BOOL v5 = x_log_hook_p();
  if (v4)
  {
    if (v5)
    {
LABEL_118:
      x_log_();
      return;
    }
    uint64_t v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)this + 15);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 16);
      }
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      BOOL v8 = "(surface machport %u)";
      uint64_t v9 = buf;
      uint64_t v10 = v6;
      uint32_t v11 = 8;
      goto LABEL_121;
    }
    return;
  }
  if (v5)
  {
    x_log_();
  }
  else
  {
    int v12 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *((_DWORD *)this + 26);
      int v14 = *((_DWORD *)this + 4);
      int v15 = *((_DWORD *)this + 5);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v15;
      _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "(surface 0x%x [%d %d] ", buf, 0x14u);
    }
  }
  if (*((void *)this + 14))
  {
    if ((*(float (**)(CA::Render::Surface *))(*(void *)this + 152))(this) != 1.0)
    {
      if (x_log_hook_p())
      {
        (*(float (**)(CA::Render::Surface *))(*(void *)this + 152))(this);
        x_log_();
      }
      else
      {
        uint64_t v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          float v17 = (*(float (**)(CA::Render::Surface *))(*(void *)this + 152))(this);
          *(_DWORD *)long long buf = 134217984;
          *(double *)&uint8_t buf[4] = v17;
          _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "edr %g ", buf, 0xCu);
        }
      }
    }
    if ((*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 240))(this))
    {
      if (x_log_hook_p())
      {
        (*(void (**)(CA::Render::Surface *))(*(void *)this + 240))(this);
        x_log_();
      }
      else
      {
        int64x2_t v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 240))(this);
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v19;
          _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "protected 0x%llx ", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 104))(this);
      int v26 = *((_DWORD *)this + 32);
      if (v26 < 0)
      {
        __maskrune(HIBYTE(*((_DWORD *)this + 32)), 0x40000uLL);
        int v26 = *((_DWORD *)this + 32);
      }
      if (BYTE2(v26) > 0x7Fu)
      {
        __maskrune(BYTE2(v26), 0x40000uLL);
        int v26 = *((_DWORD *)this + 32);
      }
      if (BYTE1(v26) > 0x7Fu)
      {
        __maskrune(BYTE1(v26), 0x40000uLL);
        int v26 = *((_DWORD *)this + 32);
      }
      if (v26 > 0x7Fu) {
        __maskrune(v26, 0x40000uLL);
      }
      goto LABEL_42;
    }
    uint64_t v20 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_72;
    }
    unsigned int v21 = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 104))(this);
    if (v21 > 0x23) {
      unsigned int v22 = "UNKNOWN";
    }
    else {
      unsigned int v22 = off_1E5272E18[v21];
    }
    unint64_t v27 = *((unsigned int *)this + 32);
    unint64_t v28 = v27 >> 24;
    uint64_t v29 = MEMORY[0x1E4F14390];
    if ((v27 & 0x80000000) != 0)
    {
      int v30 = __maskrune(v28, 0x40000uLL);
      LODWORD(v27) = *((_DWORD *)this + 32);
    }
    else
    {
      int v30 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v28 + 60) & 0x40000;
    }
    if (v30) {
      int v31 = (int)v27 >> 24;
    }
    else {
      int v31 = 32;
    }
    if (BYTE2(v27) <= 0x7Fu)
    {
      int v32 = *(_DWORD *)(v29 + 4 * BYTE2(v27) + 60) & 0x40000;
    }
    else
    {
      int v32 = __maskrune(BYTE2(v27), 0x40000uLL);
      LODWORD(v27) = *((_DWORD *)this + 32);
    }
    if (v32) {
      int v33 = (int)(v27 << 8) >> 24;
    }
    else {
      int v33 = 32;
    }
    if (BYTE1(v27) <= 0x7Fu)
    {
      int v34 = *(_DWORD *)(v29 + 4 * BYTE1(v27) + 60) & 0x40000;
    }
    else
    {
      int v34 = __maskrune(BYTE1(v27), 0x40000uLL);
      LODWORD(v27) = *((_DWORD *)this + 32);
    }
    if (v34) {
      int v35 = (__int16)v27 >> 8;
    }
    else {
      int v35 = 32;
    }
    if (v27 <= 0x7Fu)
    {
      if ((*(_DWORD *)(v29 + 4 * v27 + 60) & 0x40000) != 0) {
        goto LABEL_65;
      }
    }
    else if (__maskrune(v27, 0x40000uLL))
    {
LABEL_65:
      char v36 = *((unsigned char *)this + 128);
LABEL_68:
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v31;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v33;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v35;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&uint8_t buf[32] = v36;
      uint64_t v37 = "%s %c%c%c%c";
      uint64_t v38 = v20;
      uint32_t v39 = 36;
LABEL_71:
      _os_log_impl(&dword_184668000, v38, OS_LOG_TYPE_DEFAULT, v37, buf, v39);
      goto LABEL_72;
    }
    char v36 = 32;
    goto LABEL_68;
  }
  if (x_log_hook_p())
  {
    (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 104))(this);
LABEL_42:
    x_log_();
    goto LABEL_72;
  }
  uint64_t v23 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v24 = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 104))(this);
    if (v24 > 0x23) {
      uint64_t v25 = "UNKNOWN";
    }
    else {
      uint64_t v25 = off_1E5272E18[v24];
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v25;
    uint64_t v37 = "%s";
    uint64_t v38 = v23;
    uint32_t v39 = 12;
    goto LABEL_71;
  }
LABEL_72:
  unint64_t v40 = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 168))(this);
  if (x_log_hook_p())
  {
    if (v40 >= 0x400)
    {
      double v44 = 1.0;
      do
        double v44 = v44 * 0.0009765625;
      while (v44 * (double)v40 >= 1024.0);
    }
    x_log_();
  }
  else
  {
    unint64_t v41 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      double v42 = (double)v40;
      if (v40 >= 0x400)
      {
        double v45 = 1.0;
        do
        {
          double v45 = v45 * 0.0009765625;
          double v43 = v45 * v42;
        }
        while (v45 * v42 >= 1024.0);
      }
      else
      {
        double v43 = (double)v40;
      }
      uint64_t v46 = v40 > 0x3FF;
      if ((v40 & 0xFFFFFFFFFFF00000) != 0) {
        ++v46;
      }
      if ((v40 & 0xFFFFFFFFC0000000) != 0) {
        ++v46;
      }
      if (v40 >> 40) {
        ++v46;
      }
      if (v40 >> 50) {
        ++v46;
      }
      if (v40 >> 60) {
        ++v46;
      }
      float32x2_t v47 = off_1E527FCB0[v46];
      *(_DWORD *)long long buf = 134218242;
      *(double *)&uint8_t buf[4] = v43;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v47;
      _os_log_impl(&dword_184668000, v41, OS_LOG_TYPE_DEFAULT, " (%.2lf %s)", buf, 0x16u);
    }
  }
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v71 = 0u;
  memset(buf, 0, sizeof(buf));
  if (*((void *)this + 6))
  {
    if ((*((unsigned char *)this + 14) & 8) != 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float32x2_t v48 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)float v68 = 0;
          _os_log_impl(&dword_184668000, v48, OS_LOG_TYPE_DEFAULT, " colormatching-disabled", v68, 2u);
        }
      }
    }
    CFStringRef v49 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
    if (v49)
    {
      CFStringRef v50 = v49;
      CFStringGetCString(v49, (char *)buf, 255, 0x8000100u);
      if (buf[0])
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          float v51 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)float v68 = 136315138;
            double v69 = COERCE_DOUBLE(buf);
            _os_log_impl(&dword_184668000, v51, OS_LOG_TYPE_DEFAULT, " (colorspace \"%s\")", v68, 0xCu);
          }
        }
      }
      CFRelease(v50);
    }
  }
  if ((*((unsigned char *)this + 14) & 0x40) != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v52 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)float v68 = 0;
        _os_log_impl(&dword_184668000, v52, OS_LOG_TYPE_DEFAULT, " placeholder", v68, 2u);
      }
    }
  }
  if (*((float *)this + 14) > 1.0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float64x2_t v53 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        double v54 = *((float *)this + 14);
        *(_DWORD *)float v68 = 134217984;
        double v69 = v54;
        _os_log_impl(&dword_184668000, v53, OS_LOG_TYPE_DEFAULT, " headroom %.3g", v68, 0xCu);
      }
    }
  }
  if (x_log_hook_p()) {
    goto LABEL_118;
  }
  uint64_t v55 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float v68 = 0;
    BOOL v8 = ")";
    uint64_t v9 = v68;
    uint64_t v10 = v55;
    uint32_t v11 = 2;
LABEL_121:
    _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, v8, v9, v11);
  }
}

uint64_t CA::Render::Surface::reload_iosurface_needs_film_grain(CA::Render::Surface *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (__IOSurface *)*((void *)this + 14);
  if (!v2)
  {
LABEL_7:
    __int16 v3 = 0;
    goto LABEL_8;
  }
  if (CADeviceSupportsFilmGrain::once != -1) {
    dispatch_once(&CADeviceSupportsFilmGrain::once, &__block_literal_global_181);
  }
  __int16 v3 = CADeviceSupportsFilmGrain::has_capability;
  if (CADeviceSupportsFilmGrain::has_capability)
  {
    int DataProperty = IOSurfaceGetDataProperty();
    if (DataProperty)
    {
      if (byte_1EB2ACC6D)
      {
        int v8 = DataProperty;
        if (x_log_hook_p())
        {
          IOSurfaceGetID(v2);
          x_log_();
        }
        else
        {
          uint64_t v9 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109376;
            IOSurfaceID ID = IOSurfaceGetID(v2);
            __int16 v12 = 1024;
            LODWORD(v13) = v8;
            _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "Film Grain Query Failed 0x%x error0x%x", buf, 0xEu);
          }
        }
      }
      goto LABEL_7;
    }
    __int16 v3 = 0;
  }
LABEL_8:
  *((_WORD *)this + 168) = *((_WORD *)this + 168) & 0xFF7F | v3;
  uint64_t result = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 264))(this);
  if (result)
  {
    __int16 v6 = *((_WORD *)this + 168);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)this + 256))(this);
    __int16 v6 = *((_WORD *)this + 168);
    if (!result)
    {
      __int16 v7 = 0;
      goto LABEL_13;
    }
  }
  __int16 v7 = 32;
LABEL_13:
  *((_WORD *)this + 168) = v6 & 0xFFDF | v7;
  return result;
}

CA::Render::Texture *CA::Render::Surface::Surface(CA::Render::Texture *a1, const void *a2)
{
  uint64_t v4 = CA::Render::Texture::Texture(a1, 0, 0);
  unsigned int v5 = *((_DWORD *)v4 + 3) & 0xFFFFFF03;
  ++dword_1EB2ADE94;
  *(void *)uint64_t v4 = &unk_1ED02F9D0;
  *((void *)v4 + 12) = 0;
  *((void *)v4 + 13) = 0xFFFFFFFF00000000;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 15) = a2;
  *((_DWORD *)v4 + 32) = 0;
  *((_DWORD *)v4 + 33) = 1065353216;
  *(_OWORD *)((char *)v4 + 136) = 0u;
  *(_OWORD *)((char *)v4 + 152) = 0u;
  *(_OWORD *)((char *)v4 + 168) = 0u;
  *((_DWORD *)v4 + 46) = 0;
  *(_OWORD *)((char *)v4 + 188) = xmmword_184997E20;
  *((_DWORD *)v4 + 51) = 1065353216;
  *((_OWORD *)v4 + 13) = xmmword_184997E30;
  *((void *)v4 + 28) = 0;
  *((_WORD *)v4 + 116) = 0;
  *(void *)((char *)v4 + 236) = 0x100000001;
  *((unsigned char *)v4 + 276) = 0;
  *(_OWORD *)((char *)v4 + 260) = 0u;
  *(_OWORD *)((char *)v4 + 244) = 0u;
  *((_DWORD *)v4 + 70) = 1065353216;
  *(void *)((char *)v4 + 292) = 0;
  *(void *)((char *)v4 + 284) = 0;
  *((_DWORD *)v4 + 75) = -1;
  *((void *)v4 + 39) = 0;
  *((void *)v4 + 40) = 0;
  *((unsigned char *)v4 + 328) = 0;
  *((unsigned char *)v4 + 329) &= 0x80u;
  *((_DWORD *)v4 + 83) = -1;
  *((_WORD *)v4 + 168) &= 0xF840u;
  *((_DWORD *)v4 + 3) = v5 | 0x840033;
  *((_DWORD *)v4 + 81) = 1;
  CFRetain(a2);
  return a1;
}

void CA::Render::Surface::ensure_scheduled_block(CA::Render::Surface *this)
{
  uint64_t v2 = *((void *)this + 39);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0);
    _Block_release(*((const void **)this + 39));
    *((void *)this + 39) = 0;
  }
}

CA::Render *CA::Render::Surface::reload_iosurface_color_attributes(CA::Render::Surface *this, __IOSurface *a2)
{
  uint64_t result = (CA::Render *)*((void *)this + 14);
  if (result)
  {
    *((float *)this + 33) = CA::Render::iosurface_get_edr_factor(result, a2);
    CA::Render::iosurface_get_edr_headroom(*((CA::Render **)this + 14), v4);
    *((_DWORD *)this + 14) = v5;
    *((void *)this + 17) = IOSurfaceGetProtectionOptions();
    uint64_t result = (CA::Render *)CA::Render::iosurface_load_attachments(this, (CA::Render::Surface *)0x3E);
    if (*((float *)this + 33) != 1.0) {
      *((_WORD *)this + 168) |= 4u;
    }
  }
  return result;
}

CFStringRef CA::Render::iosurface_set_bulk_from_colorspace(CA::Render *this, CGColorSpaceRef space, CGColorSpace *a3, unsigned __int8 *a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(_WORD *)int v5 = 0;
  CFStringRef result = CA::Render::iosurface_color_tags_for_colorspace(space, (CGColorSpace *)&v5[1], v5, a4);
  if (result) {
    return (CFStringRef)IOSurfaceSetBulkAttachments2();
  }
  return result;
}

__IOSurface *CA::Render::create_iosurface(CA::Render *this, CA::Render *a2, unsigned int a3, const void *a4, unsigned int a5, const __CFString *a6)
{
  if (!a2) {
    return 0;
  }
  if (!a3) {
    return 0;
  }
  unsigned int v8 = a2;
  int v9 = (int)this;
  BOOL v10 = CA::Render::iosurface_size_supported(a2, a3);
  if ((a3 | v8) >> 13 || !v10) {
    return 0;
  }
  LODWORD(v12) = v9 == 17 ? 13 : v9;
  uint64_t v12 = v9 == 3 ? 1 : v12;
  if v12 > 0x23 || ((0x61CB910CuLL >> v12)) {
    return 0;
  }
  uint64_t v13 = (CA::Render *)dword_1849995EC[v12];

  return CA::Render::create_iosurface_with_pixel_format(v13, v8, a3, 0, 0, a4, v11);
}

unint64_t CA::Render::iosurface_max_init(CA::Render *this)
{
  int v1 = getenv("CA_MAX_TEXTURE_SIZE");
  if (v1) {
    unint64_t v2 = atoi(v1);
  }
  else {
    unint64_t v2 = 0;
  }
  CA::Render::iosurface_max_width = MEMORY[0x185323680](*MEMORY[0x1E4F2F2C0]);
  unint64_t result = MEMORY[0x185323680](*MEMORY[0x1E4F2F0E8]);
  CA::Render::iosurface_max_height = result;
  if (v2)
  {
    uint64_t v4 = CA::Render::iosurface_max_width;
    if (CA::Render::iosurface_max_width >= v2) {
      uint64_t v4 = v2;
    }
    CA::Render::iosurface_max_width = v4;
    if (result >= v2) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = result;
    }
    CA::Render::iosurface_max_height = v5;
  }
  return result;
}

uint64_t CA::Render::Surface::set_edr_factor(uint64_t this, float a2)
{
  *(_WORD *)(this + 336) |= 4u;
  if (*(float *)(this + 132) != a2)
  {
    *(float *)(this + 132) = a2;
    this = *(void *)(this + 112);
    if (this) {
      return IOSurfaceSetBulkAttachments2();
    }
  }
  return this;
}

void CA::Render::Timing::show(CA::Render::Timing *this, CA::Render *a2, char a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return;
  }
  if (*((double *)this + 5) == 0.0)
  {
    uint64_t v5 = (double *)((char *)this + 32);
    if ((*((void *)this + 4) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      __int16 v7 = (char *)this + 12;
      int v6 = *((_DWORD *)this + 3);
      if ((v6 & 0x100) == 0)
      {
        if ((v6 & 0x600) == 0)
        {
          unsigned int v8 = (float *)((char *)this + 16);
          if (*((float *)this + 4) == 1.0)
          {
            int v9 = (double *)((char *)this + 48);
            if (*((double *)this + 6) == 0.0)
            {
              BOOL v10 = (uint64_t *)((char *)this + 24);
              if (*((double *)this + 3) == 0.0) {
                return;
              }
              goto LABEL_51;
            }
            goto LABEL_45;
          }
          goto LABEL_39;
        }
        goto LABEL_28;
      }
      goto LABEL_22;
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      CFStringRef v11 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        double v12 = *((double *)this + 5);
        *(_DWORD *)long long buf = 134217984;
        double v28 = v12;
        _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "(beginTime %f)", buf, 0xCu);
      }
    }
    uint64_t v5 = (double *)((char *)this + 32);
    if ((*((void *)this + 4) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      goto LABEL_20;
    }
    CA::Render::show_newline(a2);
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      double v14 = *v5;
      *(_DWORD *)long long buf = 134217984;
      double v28 = v14;
      _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "(duration %f)", buf, 0xCu);
    }
  }
LABEL_20:
  __int16 v7 = (char *)this + 12;
  if ((*((unsigned char *)this + 13) & 1) == 0) {
    goto LABEL_26;
  }
  CA::Render::show_newline(a2);
LABEL_22:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(autoreverses true)", buf, 2u);
    }
  }
LABEL_26:
  if ((v7[1] & 6) != 0)
  {
    CA::Render::show_newline(a2);
LABEL_28:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v16 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        float v17 = "both";
        if ((*(_DWORD *)v7 & 0x400) == 0) {
          float v17 = "forwards";
        }
        if ((*(_DWORD *)v7 & 0x200) != 0) {
          int64x2_t v18 = v17;
        }
        else {
          *(double *)&int64x2_t v18 = COERCE_DOUBLE("backwards");
        }
        *(_DWORD *)long long buf = 136315138;
        double v28 = *(double *)&v18;
        _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "(fillMode %s)", buf, 0xCu);
      }
    }
  }
  unsigned int v8 = (float *)((char *)this + 16);
  if (*((float *)this + 4) == 1.0) {
    goto LABEL_43;
  }
  CA::Render::show_newline(a2);
LABEL_39:
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v19 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      double v20 = *v8;
      *(_DWORD *)long long buf = 134217984;
      double v28 = v20;
      _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "(speed %f)", buf, 0xCu);
    }
  }
LABEL_43:
  int v9 = (double *)((char *)this + 48);
  if (*((double *)this + 6) != 0.0)
  {
    CA::Render::show_newline(a2);
LABEL_45:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v21 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        double v22 = *v9;
        *(_DWORD *)long long buf = 134217984;
        double v28 = v22;
        _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_DEFAULT, "(timeOffset %f)", buf, 0xCu);
      }
    }
  }
  double v23 = *((double *)this + 3);
  BOOL v10 = (uint64_t *)((char *)this + 24);
  if (v23 == 0.0) {
    return;
  }
  CA::Render::show_newline(a2);
  int v6 = *(_DWORD *)v7;
LABEL_51:
  if ((v6 & 0x800) != 0) {
    *(double *)&unsigned int v24 = COERCE_DOUBLE("repeatDuration");
  }
  else {
    *(double *)&unsigned int v24 = COERCE_DOUBLE("repeatCount");
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v25 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *v10;
      *(_DWORD *)long long buf = 136315394;
      double v28 = *(double *)&v24;
      __int16 v29 = 2048;
      uint64_t v30 = v26;
      _os_log_impl(&dword_184668000, v25, OS_LOG_TYPE_DEFAULT, "(%s %f)", buf, 0x16u);
    }
  }
}

uint64_t CADebugColorOptionAtIndex(unint64_t a1)
{
  if (a1 > 0x24) {
    return 0xFFFFFFFFLL;
  }
  else {
    return color_options[a1];
  }
}

uint64_t CADebugPrintOptionAtIndex(unint64_t a1)
{
  if (a1 > 0x23) {
    return 0xFFFFFFFFLL;
  }
  else {
    return print_options[a1];
  }
}

uint64_t CADebugFeatureOptionAtIndex(unint64_t a1)
{
  if (a1 > 0x78) {
    return 0xFFFFFFFFLL;
  }
  else {
    return feature_options[a1];
  }
}

uint64_t CADebugClientOptionAtIndex(unint64_t a1)
{
  if (a1 > 5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return client_options[a1];
  }
}

BOOL CADebugOptionIsColor(__int32 __c)
{
  int v1 = wmemchr(color_options, __c, 0x25uLL);
  unint64_t v2 = print_options;
  if (v1) {
    unint64_t v2 = (unsigned int *)v1;
  }
  return (char *)v2 - (char *)color_options != 148;
}

BOOL CADebugOptionIsPrint(__int32 __c)
{
  int v1 = wmemchr((__int32 *)print_options, __c, 0x24uLL);
  unint64_t v2 = feature_options;
  if (v1) {
    unint64_t v2 = (unsigned int *)v1;
  }
  return (char *)v2 - (char *)print_options != 144;
}

BOOL CADebugOptionIsFeature(__int32 __c)
{
  int v1 = wmemchr((__int32 *)feature_options, __c, 0x79uLL);
  unint64_t v2 = client_options;
  if (v1) {
    unint64_t v2 = (unsigned int *)v1;
  }
  return (char *)v2 - (char *)feature_options != 484;
}

BOOL CADebugOptionIsClient(__int32 __c)
{
  int v1 = wmemchr((__int32 *)client_options, __c, 6uLL);
  unint64_t v2 = (__int32 *)&CADebugOptionForceWalkTree::walking_options;
  if (v1) {
    unint64_t v2 = v1;
  }
  return (char *)v2 - (char *)client_options != 24;
}

BOOL CADebugOptionForceWalkTree(__int32 __c)
{
  int v1 = wmemchr(&CADebugOptionForceWalkTree::walking_options, __c, 1uLL);
  unint64_t v2 = dword_1849A7CB4;
  if (v1) {
    unint64_t v2 = v1;
  }
  return (char *)v2 - (char *)&CADebugOptionForceWalkTree::walking_options != 4;
}

char *CAGetDebugOptionEnvVariableName(unsigned int a1)
{
  if (a1 <= 0xC7) {
    return debug_option_env_vars[a1];
  }
  else {
    return 0;
  }
}

char *CAGetDebugValueEnvVariableName(unsigned int a1)
{
  if (a1 <= 0x41) {
    return debug_value_env_vars[a1];
  }
  else {
    return 0;
  }
}

BOOL CAGetDebugOption(unsigned int a1)
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  return a1 <= 0xC7 && *((unsigned char *)&ca_debug_options + a1) != 0;
}

void CASetDebugOption(unsigned __int32 a1, char a2)
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  if (a1 <= 0xC7)
  {
    uint64_t v4 = 0;
    *((unsigned char *)&ca_debug_options + a1) = a2;
    options_are_visual = 0;
    while (!*((unsigned char *)&ca_debug_options + dword_1849A7CB4[v4]))
    {
      if (++v4 == 40) {
        goto LABEL_9;
      }
    }
    options_are_visual = 1;
LABEL_9:
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, @"kCADebugOptionsDidChange", 0, 0, 1u);
    int v6 = wmemchr(&CADebugOptionForceWalkTree::walking_options, a1, 1uLL);
    __int16 v7 = dword_1849A7CB4;
    if (v6) {
      __int16 v7 = v6;
    }
    if ((char *)v7 - (char *)&CADebugOptionForceWalkTree::walking_options != 4)
    {
      if (initialized != -1) {
        dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
      }
      float v8 = (float)(*(float *)&dword_1EB2ACB8C + 1);
      CASetDebugValueFloat(0x3Du, v8);
    }
  }
}

void CASetDebugValueFloat(unsigned int a1, float a2)
{
  if (a1 <= 0x41)
  {
    if (initialized != -1) {
      dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
    }
    *(float *)&debug_values[a1] = a2;
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, @"kCADebugOptionsDidChange", 0, 0, 1u);
  }
}

uint64_t CAGetDebugValue(unsigned int a1)
{
  return CAGetDebugValueFloat(a1);
}

void CASetDebugValue(unsigned int a1, unsigned int a2)
{
}

void CAClearDebugOptions()
{
  uint64_t v0 = 0;
  qword_1EB2ACC90 = 0;
  xmmword_1EB2ACC70 = 0u;
  *(_OWORD *)&byte_1EB2ACC80 = 0u;
  xmmword_1EB2ACC50 = 0u;
  unk_1EB2ACC60 = 0u;
  xmmword_1EB2ACC30 = 0u;
  *(_OWORD *)&byte_1EB2ACC40 = 0u;
  xmmword_1EB2ACC10 = 0u;
  *(_OWORD *)&byte_1EB2ACC20 = 0u;
  xmmword_1EB2ACBF0 = 0u;
  *(_OWORD *)&byte_1EB2ACC00 = 0u;
  ca_debug_options = 0u;
  *(_OWORD *)&byte_1EB2ACBE0 = 0u;
  options_are_visual = 0;
  while (!*((unsigned char *)&ca_debug_options + dword_1849A7CB4[v0]))
  {
    if (++v0 == 40) {
      return;
    }
  }
  options_are_visual = 1;
}

void CAClearColorDebugOptions()
{
  for (uint64_t i = 0; i != 37; ++i)
    *((unsigned char *)&ca_debug_options + color_options[i]) = 0;
  uint64_t v1 = 0;
  options_are_visual = 0;
  while (!*((unsigned char *)&ca_debug_options + dword_1849A7CB4[v1]))
  {
    if (++v1 == 40) {
      return;
    }
  }
  options_are_visual = 1;
}

uint64_t CAGetDebugFlags(uint8x8_t a1)
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  a1.i32[0] = *(_DWORD *)((char *)&ca_debug_options + 1);
  int8x8_t v1 = vand_s8((int8x8_t)*(_OWORD *)&vsubw_u8((uint16x8_t)0, a1), (int8x8_t)0x10000800040002);
  int v2 = (v1.i8[0] | v1.i8[4] | ((v1.i32[0] | v1.i32[1]) >> 16) | -BYTE5(ca_debug_options) & 0x20 | -BYTE6(ca_debug_options) & 0x40 | -BYTE7(ca_debug_options) & 0x80 | ca_debug_options);
  v13.val[0] = *(int8x16_t *)((char *)&ca_debug_options + 8);
  v13.val[1] = *(int8x16_t *)&word_1EB2ACBE6;
  v13.val[0].i32[2] = *(_DWORD *)&byte_1EB2ACBE0;
  v13.val[0].i16[6] = word_1EB2ACBE6;
  int8x16_t v3 = vnegq_s8(vqtbl2q_s8(v13, (int8x16_t)xmmword_184998480));
  uint16x8_t v4 = (uint16x8_t)vmovl_s8(*(int8x8_t *)v3.i8);
  int16x8_t v5 = vmovl_high_s8(v3);
  v6.i32[0] = 4096;
  v6.i8[0] = BYTE8(xmmword_1EB2ACBF0);
  v6.i8[2] = BYTE6(xmmword_1EB2ACBF0);
  v6.i16[2] = BYTE5(xmmword_1EB2ACBF0);
  v6.i16[3] = BYTE4(xmmword_1EB2ACBF0);
  int8x16_t v7 = vandq_s8((int8x16_t)vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vneg_s16(v6)), 0x18uLL), 0x18uLL), (int8x16_t)xmmword_1849984D0);
  int8x16_t v8 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v4.i8), (int8x16_t)xmmword_1849984A0), vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v5.i8), (int8x16_t)xmmword_184998490)), vorrq_s8(vandq_s8((int8x16_t)vmovl_high_u16(v4), (int8x16_t)xmmword_1849984C0), vandq_s8((int8x16_t)vmovl_high_s16(v5), (int8x16_t)xmmword_1849984B0)));
  *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  __int32 v9 = v8.i32[0];
  unint64_t v10 = HIDWORD(v8.i64[0]);
  *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  __int32 v11 = v8.i32[0] | v8.i32[1];
  v8.i32[0] = xmmword_1EB2ACBF0;
  v8.i32[1] = byte_1EB2ACBEC;
  v13.val[1].i32[0] = v11;
  v13.val[1].i32[1] = (char)-byte_1EB2ACBEB & 0x2000000;
  *(int8x8_t *)v13.val[0].i8 = vorr_s8(*(int8x8_t *)v13.val[1].i8, vand_s8((int8x8_t)vshr_n_s32(vshl_n_s32(vneg_s32(*(int32x2_t *)v8.i8), 0x18uLL), 0x18uLL), (int8x8_t)0x400000008000000));
  return vorr_s8(*(int8x8_t *)v13.val[0].i8, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v13.val[0].i8, 1)).u32[0] | v9 | v2 | v10;
}

void CASetDebugFlags(unsigned int a1, int a2)
{
  if (!a1) {
    return;
  }
  if (initialized == -1)
  {
    if (a1)
    {
LABEL_8:
      char v4 = a2 & a1 & 1;
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
    if (a1) {
      goto LABEL_8;
    }
  }
  if (!(_BYTE)ca_debug_options) {
    goto LABEL_8;
  }
  char v4 = 1;
LABEL_9:
  LOBYTE(ca_debug_options) = v4;
  if ((a1 & 2) != 0 || !BYTE1(ca_debug_options)) {
    unsigned int v5 = ((a2 & a1) >> 1) & 1;
  }
  else {
    LOBYTE(v5) = 1;
  }
  BYTE1(ca_debug_options) = v5;
  if ((a1 & 4) != 0 || !BYTE2(ca_debug_options)) {
    unsigned int v6 = ((a2 & a1) >> 2) & 1;
  }
  else {
    LOBYTE(v6) = 1;
  }
  BYTE2(ca_debug_options) = v6;
  if ((a1 & 8) != 0 || !BYTE3(ca_debug_options)) {
    unsigned int v7 = ((a2 & a1) >> 3) & 1;
  }
  else {
    LOBYTE(v7) = 1;
  }
  BYTE3(ca_debug_options) = v7;
  if ((a1 & 0x10) != 0 || !BYTE4(ca_debug_options)) {
    unsigned int v8 = ((a2 & a1) >> 4) & 1;
  }
  else {
    LOBYTE(v8) = 1;
  }
  BYTE4(ca_debug_options) = v8;
  if ((a1 & 0x20) != 0 || !BYTE5(ca_debug_options)) {
    unsigned int v9 = ((a2 & a1) >> 5) & 1;
  }
  else {
    LOBYTE(v9) = 1;
  }
  BYTE5(ca_debug_options) = v9;
  if ((a1 & 0x40) != 0 || !BYTE6(ca_debug_options)) {
    unsigned int v10 = ((a2 & a1) >> 6) & 1;
  }
  else {
    LOBYTE(v10) = 1;
  }
  BYTE6(ca_debug_options) = v10;
  if ((a1 & 0x80) != 0 || !BYTE7(ca_debug_options)) {
    unsigned int v11 = ((a2 & a1) >> 7) & 1;
  }
  else {
    LOBYTE(v11) = 1;
  }
  BYTE7(ca_debug_options) = v11;
  if ((a1 & 0x100) != 0 || !BYTE8(ca_debug_options)) {
    unsigned int v12 = ((a2 & a1) >> 8) & 1;
  }
  else {
    LOBYTE(v12) = 1;
  }
  BYTE8(ca_debug_options) = v12;
  if ((a1 & 0x200) != 0 || !BYTE9(ca_debug_options)) {
    unsigned int v13 = ((a2 & a1) >> 9) & 1;
  }
  else {
    LOBYTE(v13) = 1;
  }
  BYTE9(ca_debug_options) = v13;
  if ((a1 & 0x400) != 0 || !BYTE10(ca_debug_options)) {
    unsigned int v14 = ((a2 & a1) >> 10) & 1;
  }
  else {
    LOBYTE(v14) = 1;
  }
  BYTE10(ca_debug_options) = v14;
  if ((a1 & 0x800) != 0 || !BYTE11(ca_debug_options)) {
    unsigned int v15 = ((a2 & a1) >> 11) & 1;
  }
  else {
    LOBYTE(v15) = 1;
  }
  BYTE11(ca_debug_options) = v15;
  if ((a1 & 0x1000) != 0 || !BYTE12(ca_debug_options)) {
    unsigned int v16 = ((a2 & a1) >> 12) & 1;
  }
  else {
    LOBYTE(v16) = 1;
  }
  BYTE12(ca_debug_options) = v16;
  if ((a1 & 0x2000) != 0 || !BYTE13(ca_debug_options)) {
    unsigned int v17 = ((a2 & a1) >> 13) & 1;
  }
  else {
    LOBYTE(v17) = 1;
  }
  BYTE13(ca_debug_options) = v17;
  if ((a1 & 0x4000) != 0 || !BYTE14(ca_debug_options)) {
    unsigned int v18 = ((a2 & a1) >> 14) & 1;
  }
  else {
    LOBYTE(v18) = 1;
  }
  BYTE14(ca_debug_options) = v18;
  if ((a1 & 0x8000) != 0 || !HIBYTE(ca_debug_options)) {
    unsigned int v19 = ((a2 & a1) >> 15) & 1;
  }
  else {
    LOBYTE(v19) = 1;
  }
  HIBYTE(ca_debug_options) = v19;
  if ((a1 & 0x10000) != 0 || !byte_1EB2ACBE0) {
    unsigned int v20 = ((a2 & a1) >> 16) & 1;
  }
  else {
    LOBYTE(v20) = 1;
  }
  byte_1EB2ACBE0 = v20;
  if ((a1 & 0x20000) != 0 || !byte_1EB2ACBE1) {
    unsigned int v21 = ((a2 & a1) >> 17) & 1;
  }
  else {
    LOBYTE(v21) = 1;
  }
  byte_1EB2ACBE1 = v21;
  if ((a1 & 0x40000) != 0 || !byte_1EB2ACBE2) {
    unsigned int v22 = ((a2 & a1) >> 18) & 1;
  }
  else {
    LOBYTE(v22) = 1;
  }
  byte_1EB2ACBE2 = v22;
  if ((a1 & 0x80000) != 0 || !byte_1EB2ACBE3) {
    unsigned int v23 = ((a2 & a1) >> 19) & 1;
  }
  else {
    LOBYTE(v23) = 1;
  }
  byte_1EB2ACBE3 = v23;
  if ((a1 & 0x100000) != 0 || !byte_1EB2ACBE6) {
    unsigned int v24 = ((a2 & a1) >> 20) & 1;
  }
  else {
    LOBYTE(v24) = 1;
  }
  byte_1EB2ACBE6 = v24;
  if ((a1 & 0x200000) != 0 || !byte_1EB2ACBE7) {
    unsigned int v25 = ((a2 & a1) >> 21) & 1;
  }
  else {
    LOBYTE(v25) = 1;
  }
  byte_1EB2ACBE7 = v25;
  if ((a1 & 0x400000) != 0 || !byte_1EB2ACBE8) {
    unsigned int v26 = ((a2 & a1) >> 22) & 1;
  }
  else {
    LOBYTE(v26) = 1;
  }
  byte_1EB2ACBE8 = v26;
  if ((a1 & 0x800000) != 0 || !byte_1EB2ACBEA) {
    unsigned int v27 = ((a2 & a1) >> 23) & 1;
  }
  else {
    LOBYTE(v27) = 1;
  }
  byte_1EB2ACBEA = v27;
  if ((a1 & 0x2000000) != 0 || !byte_1EB2ACBEB) {
    unsigned int v28 = ((a2 & a1) >> 25) & 1;
  }
  else {
    LOBYTE(v28) = 1;
  }
  byte_1EB2ACBEB = v28;
  if ((a1 & 0x4000000) != 0 || !byte_1EB2ACBEC) {
    unsigned int v29 = ((a2 & a1) >> 26) & 1;
  }
  else {
    LOBYTE(v29) = 1;
  }
  byte_1EB2ACBEC = v29;
  if ((a1 & 0x8000000) != 0 || !(_BYTE)xmmword_1EB2ACBF0) {
    unsigned int v30 = ((a2 & a1) >> 27) & 1;
  }
  else {
    LOBYTE(v30) = 1;
  }
  LOBYTE(xmmword_1EB2ACBF0) = v30;
  if ((a1 & 0x1000000) != 0 || !BYTE4(xmmword_1EB2ACBF0)) {
    unsigned int v31 = ((a2 & a1) >> 24) & 1;
  }
  else {
    LOBYTE(v31) = 1;
  }
  BYTE4(xmmword_1EB2ACBF0) = v31;
  if ((a1 & 0x10000000) != 0 || !BYTE5(xmmword_1EB2ACBF0)) {
    unsigned int v32 = ((a2 & a1) >> 28) & 1;
  }
  else {
    LOBYTE(v32) = 1;
  }
  BYTE5(xmmword_1EB2ACBF0) = v32;
  if ((a1 & 0x20000000) != 0 || !BYTE6(xmmword_1EB2ACBF0)) {
    unsigned int v33 = ((a2 & a1) >> 29) & 1;
  }
  else {
    LOBYTE(v33) = 1;
  }
  BYTE6(xmmword_1EB2ACBF0) = v33;
  if ((a1 & 0x40000000) != 0 || !BYTE8(xmmword_1EB2ACBF0)) {
    unsigned int v34 = ((a2 & a1) >> 30) & 1;
  }
  else {
    LOBYTE(v34) = 1;
  }
  uint64_t v35 = 0;
  BYTE8(xmmword_1EB2ACBF0) = v34;
  options_are_visual = 0;
  while (!*((unsigned char *)&ca_debug_options + dword_1849A7CB4[v35]))
  {
    if (++v35 == 40) {
      goto LABEL_134;
    }
  }
  options_are_visual = 1;
LABEL_134:
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"kCADebugOptionsDidChange", 0, 0, 1u);
}

float CAGetDebugValueOSType(unsigned int a1)
{
  return CAGetDebugValueFloat(a1);
}

void CASetDebugValueOSType(unsigned int a1, int a2)
{
}

float CADecrementDebugValue(unsigned int a1, float result)
{
  if (a1 <= 0x41)
  {
    unint64_t result = *(float *)&debug_values[a1];
    if (result > 0.0)
    {
      unint64_t result = result + -1.0;
      *(float *)&debug_values[a1] = result;
    }
  }
  return result;
}

void *CASetMessageFunction(void *result, uint64_t a2)
{
  x_log_functiouint64_t n = result;
  x_log_function_info = a2;
  return result;
}

void CASetLUTFile(const char *a1)
{
  free((void *)lut_file);
  lut_file = (uint64_t)strdup(a1);
  ca_debug_lut_changed = 1;
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"kCADebugOptionsDidChange", 0, 0, 1u);
}

uint64_t CAGetLUTFile()
{
  return lut_file;
}

void CASetDebugMessage(char *__source, int a2)
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  strlcpy(&debug_message, __source, 0x100uLL);
  debug_message_color = a2;
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, @"kCADebugOptionsDidChange", 0, 0, 1u);
}

uint64_t CAGetDebugMessageColor()
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  return debug_message_color;
}

uint64_t CAGetTransactionCounter()
{
  return CAGetStatsStruct(0)[4];
}

uint64_t CAGetFrameCounter()
{
  return CAGetStatsStruct(0)[5];
}

uint64_t ___ZL26CARecordCurrentDisplayPushj_block_invoke()
{
  v1[1] = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  uint64_t result = pthread_key_create(v1, (void (__cdecl *)(void *))_ZZZL26CARecordCurrentDisplayPushjEUb_EN3__08__invokeEPv);
  current_display_slot = v1[0];
  return result;
}

uint64_t _ZZZL26CARecordCurrentDisplayPushjEUb_EN3__08__invokeEPv(uint64_t result)
{
  if (result) {
    JUMPOUT(0x185323DC0);
  }
  return result;
}

void sub_184934FAC(_Unwind_Exception *a1)
{
}

void *___Z11init_libedrv_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/libEDR.framework/libEDR", 2);
  init_libedr(void)::handle = (uint64_t)result;
  if (result)
  {
    uint64_t result = dlsym(result, "EDRGetDefaultMinScalingFactor");
    libedr_min_scale_factor_f = (float (*)(void))result;
  }
  return result;
}

void CA::EDRClient::reload_potential_headroom_locked(CA::EDRClient *this)
{
  if (libedr_min_scale_factor_f)
  {
    float v2 = libedr_min_scale_factor_f(*((unsigned int *)this + 34));
    if (v2 > 0.0)
    {
      float v3 = 1.0;
      float v4 = 1.0 / v2;
      BOOL v5 = v4 > 16.0 || v4 < 1.0;
      if (v4 >= 1.0 || v4 > 16.0) {
        float v3 = 16.0;
      }
      if (v5) {
        float v4 = v3;
      }
      *((float *)this + 38) = v4;
    }
  }
}

uint64_t CA::EDRClient::client(pthread_mutex_t *this)
{
  if (CADeviceHasBacklight::once != -1) {
    dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_120);
  }
  if (CADeviceHasBacklight::has_backlight != 1) {
    return 0;
  }
  pthread_mutex_lock(this);
  uint64_t v2 = *(unsigned int *)this[2].__opaque;
  if (!v2 && !this[2].__opaque[8])
  {
    this[2].__opaque[8] = 1;
    pthread_mutex_unlock(this);
    EDRCreateClientForDisplayWithTimeoutAndCallback();
    pthread_mutex_lock(this);
  }
  pthread_mutex_unlock(this);
  return v2;
}

uint64_t ___ZN2CA9EDRClient6clientEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)v3);
  *(_DWORD *)(v3 + 136) = a2;
  *(unsigned char *)(v3 + 144) = 0;
  CA::EDRClient::reload_potential_headroom_locked((CA::EDRClient *)v3);

  return pthread_mutex_unlock((pthread_mutex_t *)v3);
}

uint64_t ___ZN2CA9EDRClient15set_edr_enabledEb_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 36);
  BOOL v3 = x_log_hook_p();
  if (v2)
  {
    if (v3) {
      goto LABEL_5;
    }
    float v4 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG)) {
      return EDREnable();
    }
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)long long buf = 67109120;
    int v10 = v5;
    unsigned int v6 = "EDR client %u Enabled\n";
LABEL_10:
    _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEBUG, v6, buf, 8u);
    return EDREnable();
  }
  if (!v3)
  {
    float v4 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG)) {
      return EDREnable();
    }
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)long long buf = 67109120;
    int v10 = v7;
    unsigned int v6 = "EDR client %u Disabled\n";
    goto LABEL_10;
  }
LABEL_5:
  x_log_();
  return EDREnable();
}

uint64_t ___ZN2CA9EDRClient20set_edr_max_headroomEf_block_invoke(uint64_t a1)
{
  return MEMORY[0x1F4178190](*(unsigned int *)(a1 + 32), *(float *)(a1 + 36));
}

uint64_t ___ZN2CA9EDRClient26set_accessibility_overrideEb_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v2 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(a1 + 32);
      float v4 = "ON";
      if (!*(unsigned char *)(a1 + 36)) {
        float v4 = "OFF";
      }
      *(_DWORD *)long long buf = 67109378;
      int v7 = v3;
      __int16 v8 = 2080;
      unsigned int v9 = v4;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEBUG, "EDR client %u accessibility override %s\n", buf, 0x12u);
    }
  }
  return EDRRequestAccessibilityLimit();
}

void CA::EDRClient::unregister_callback(pthread_mutex_t *this)
{
  if (CADeviceHasBacklight::once != -1) {
    dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_120);
  }
  if (CADeviceHasBacklight::has_backlight == 1 && CA::EDRClient::client(this))
  {
    pthread_mutex_lock(this + 1);
    if (this[2].__opaque[11])
    {
      this[2].__opaque[11] = 0;
      CA::EDRClient::client(this);
      EDRUnregisterCallbackBlock();
    }
    pthread_mutex_unlock(this + 1);
  }
}

uint64_t ___ZN2CA9EDRClient17register_callbackEU13block_pointerFvbfffE_block_invoke(uint64_t a1)
{
  int v2 = *(pthread_mutex_t **)(a1 + 40);
  CA::EDRClient::client(v2);
  EDRGetDisplayHeadroom();
  float v4 = v3;
  CA::EDRClient::client(v2);
  EDRGetAmbientIlluminance();
  float v6 = v5;
  CA::EDRClient::client(v2);
  EDRGetDisplayMaxLuminance();
  float v8 = v7;
  CA::EDRClient::client(v2);
  EDRGetDisplayBacklightBrightness();
  float v10 = v9;
  pthread_mutex_lock(v2 + 1);
  if (v2[2].__opaque[11])
  {
    v11.n128_u32[0] = 16.0;
    if (v4 <= 16.0) {
      v11.n128_f32[0] = v4;
    }
    if (v11.n128_f32[0] < 1.0) {
      v11.n128_f32[0] = 1.0;
    }
    float v12 = v6 * 0.318309886;
    (*(void (**)(__n128, float, float))(*(void *)(a1 + 32) + 16))(v11, (float)(v11.n128_f32[0] * (float)(v8 * v10)) / v4, v12);
  }

  return pthread_mutex_unlock(v2 + 1);
}

BOOL CASupportsFeature(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

float CAFrameRateRangeForVelocity(float a1, char a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((LODWORD(a1) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0.0;
  }
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (vfd_table(void)::once != -1) {
    dispatch_once(&vfd_table(void)::once, &__block_literal_global_13);
  }
  float v8 = (float *)v12;
  float v9 = (float *)v12;
  float v10 = (float *)v12;
  uint64_t v11 = 5;
  X::small_vector_base<VFDEntry>::append<VFDEntry const*>(&v8, vfd_table(void)::vfd_table[0], off_1E8F83C58[0]);
  if (v8 == v9)
  {
LABEL_10:
    float v6 = 0.0;
  }
  else
  {
    float v4 = fabsf(a1);
    float v5 = v8;
    while ((a2 & 1) == 0 && *((unsigned char *)v5 + 16) || v4 < *v5)
    {
      v5 += 5;
      if (v5 == v9) {
        goto LABEL_10;
      }
    }
    float v6 = v5[1];
  }
  if (v8 != v10) {
    free(v8);
  }
  return v6;
}

void X::small_vector_base<VFDEntry>::append<VFDEntry const*>(void *a1, long long *a2, long long *a3)
{
  float v4 = a2;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 2);
  uint64_t v7 = a1[1];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 2);
  if (v6 > a1[3] - v8)
  {
    X::small_vector_base<VFDEntry>::grow((uint64_t)a1, v8 - 0x3333333333333333 * (((char *)a3 - (char *)a2) >> 2));
    uint64_t v7 = a1[1];
  }
  if (v4 != a3)
  {
    do
    {
      long long v9 = *v4;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)v4 + 4);
      *(_OWORD *)uint64_t v7 = v9;
      v7 += 20;
      float v4 = (long long *)((char *)v4 + 20);
    }
    while (v4 != a3);
    uint64_t v7 = a1[1];
  }
  a1[1] = v7 + 20 * v6;
}

void X::small_vector_base<VFDEntry>::grow(uint64_t a1, unint64_t a2)
{
  float v3 = *(_DWORD **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  float v5 = *(_DWORD **)(a1 + 16);
  unint64_t v6 = (*(void *)(a1 + 24) + 1) | ((unint64_t)(*(void *)(a1 + 24) + 1) >> 1);
  unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  unint64_t v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = a2;
  }
  uint64_t v11 = (char *)malloc_type_malloc(20 * v10, 0x1000040C46099A0uLL);
  float v12 = v11;
  uint64_t v13 = *(_DWORD **)a1;
  uint64_t v14 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v14)
  {
    unsigned int v15 = v11;
    do
    {
      long long v16 = *(_OWORD *)v13;
      *((_DWORD *)v15 + 4) = v13[4];
      *(_OWORD *)unsigned int v15 = v16;
      v15 += 20;
      v13 += 5;
    }
    while (v13 != v14);
  }
  if (v3 != v5) {
    free(*(void **)a1);
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = &v12[v4 - (void)v3];
  *(void *)(a1 + 24) = v10;
}

void ___ZL9vfd_tablev_block_invoke()
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v52 = 0;
  memset(v51, 0, sizeof(v51));
  float32x2_t v47 = v51;
  float32x2_t v48 = (char *)v51;
  CFStringRef v49 = v51;
  unint64_t v50 = 5;
  if (CADeviceHasInternalBuild::once[0] != -1) {
    dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
  }
  if (CADeviceHasInternalBuild::internal)
  {
    uint64_t v0 = getenv("CA_VFD_TABLE");
    if (v0)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)uint64_t v38 = 0;
      std::string::basic_string[abi:nn180100]<0>(__p, v0);
      int8x8_t v1 = (char *)v38[7];
      int v2 = (void **)__p[0];
      if (v38[7] < 0) {
        int8x8_t v1 = (char *)__p[1];
      }
      else {
        int v2 = __p;
      }
      if (!v1) {
        goto LABEL_16;
      }
      uint64_t v3 = 0;
      do
      {
        int v4 = *(unsigned __int8 *)v2;
        int v2 = (void **)((char *)v2 + 1);
        if (v4 == 58) {
          ++v3;
        }
        --v1;
      }
      while (v1);
      if (v3)
      {
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        load_dynamic_vfd_table(void)::$_0::operator()(&v33, (std::string *)__p, 0x20u);
        unint64_t v5 = v33;
        unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v33) >> 3);
        BOOL v7 = v6 == v3;
        BOOL v8 = v6 != v3;
        if (v7)
        {
          if (v34 != v33)
          {
            uint64_t v12 = 0;
            unint64_t v13 = 0;
            while (1)
            {
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              uint64_t v32 = 0;
              load_dynamic_vfd_table(void)::$_0::operator()((unint64_t *)&v30, (std::string *)(v5 + v12), 0x3Au);
              if (v31 - (void)v30 != 48) {
                break;
              }
              unsigned int v27 = 0;
              uint64_t v28 = 0;
              uint64_t v29 = 0;
              load_dynamic_vfd_table(void)::$_0::operator()((unint64_t *)&v27, v30 + 1, 0x2Cu);
              if (v28 - (void)v27 != 72)
              {
                char v36 = (void ***)&v27;
                std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
                break;
              }
              if ((v30->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v14 = (const char *)v30;
              }
              else {
                uint64_t v14 = (const char *)v30->__r_.__value_.__r.__words[0];
              }
              float v15 = strtof(v14, 0);
              if (*((char *)v27 + 23) >= 0) {
                long long v16 = (const char *)v27;
              }
              else {
                long long v16 = *v27;
              }
              float v17 = strtof(v16, 0);
              if (*((char *)v27 + 47) >= 0) {
                unsigned int v18 = (const char *)(v27 + 3);
              }
              else {
                unsigned int v18 = v27[3];
              }
              float v19 = strtof(v18, 0);
              if (*((char *)v27 + 71) >= 0) {
                unsigned int v20 = (const char *)(v27 + 6);
              }
              else {
                unsigned int v20 = v27[6];
              }
              float v21 = strtof(v20, 0);
              p_data = (void **)&v30->__r_.__value_.__l.__data_;
              if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
              {
                p_data = (void **)v30->__r_.__value_.__r.__words[0];
                std::string::size_type size = (unsigned char *)v30->__r_.__value_.__l.__size_;
              }
              else
              {
                std::string::size_type size = (unsigned char *)HIBYTE(v30->__r_.__value_.__r.__words[2]);
              }
              BOOL v24 = size[(void)p_data - 1] == 42;
              unsigned int v25 = v48;
              unint64_t v26 = 1 - 0x3333333333333333 * ((v48 - (unsigned char *)v47) >> 2);
              if (v50 < v26)
              {
                X::small_vector_base<VFDEntry>::grow((uint64_t)&v47, v26);
                unsigned int v25 = v48;
              }
              *(float *)unsigned int v25 = v15;
              *((float *)v25 + 1) = v17;
              *((float *)v25 + 2) = v19;
              *((float *)v25 + 3) = v21;
              v25[16] = v24;
              float32x2_t v48 = v25 + 20;
              char v36 = (void ***)&v27;
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
              unsigned int v27 = (const char **)&v30;
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
              ++v13;
              unint64_t v5 = v33;
              v12 += 24;
              if (v13 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v33) >> 3)) {
                goto LABEL_60;
              }
            }
            unsigned int v27 = (const char **)&v30;
            std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
          }
LABEL_60:
          int v9 = 0;
        }
        else
        {
          int v9 = 1;
        }
        unsigned int v30 = (std::string *)&v33;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
        if ((v38[7] & 0x80) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
LABEL_16:
        int v9 = 1;
        BOOL v8 = 1;
        if ((v38[7] & 0x80) == 0) {
          goto LABEL_18;
        }
      }
      operator delete(__p[0]);
LABEL_18:
      if (v9) {
        char v10 = v8;
      }
      else {
        char v10 = 1;
      }
      if ((v10 & 1) == 0 && v47 != v49) {
        free(v47);
      }
    }
  }
  X::small_vector_base<VFDEntry>::move((uint64_t)&v47);
  if (v47 != v49) {
    free(v47);
  }
  if (vfd_table(void)::vfd_table[0] == off_1E8F83C58[0])
  {
    if (CADeviceIsPhone::once[0] != -1) {
      dispatch_once(CADeviceIsPhone::once, &__block_literal_global_193);
    }
    if (CADeviceIsPhone::phone)
    {
      *(_OWORD *)long long __p = xmmword_1849984E0;
      v38[0] = 1;
      long long v11 = xmmword_1849984F0;
    }
    else
    {
      *(_OWORD *)long long __p = xmmword_184998530;
      v38[0] = 1;
      long long v11 = xmmword_184998540;
    }
    *(_OWORD *)&v38[4] = v11;
    char v39 = 0;
    long long v40 = xmmword_184998500;
    char v41 = 0;
    long long v42 = xmmword_184998510;
    char v43 = 0;
    long long v44 = xmmword_184998520;
    char v45 = 0;
    float32x2_t v47 = v51;
    float32x2_t v48 = (char *)v51;
    CFStringRef v49 = v51;
    unint64_t v50 = 5;
    X::small_vector_base<VFDEntry>::append<VFDEntry const*>(&v47, (long long *)__p, (long long *)&v46);
    X::small_vector_base<VFDEntry>::move((uint64_t)&v47);
    if (v47 != v49) {
      free(v47);
    }
  }
}

void load_dynamic_vfd_table(void)::$_0::operator()(unint64_t *a1, std::string *__str, unsigned __int8 a3)
{
  std::string::size_type v6 = 0;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v7 = a3;
  a1[2] = 0;
  BOOL v8 = (std::allocator<std::string> *)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
LABEL_2:
  std::string::size_type v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((v9 & 0x80u) == 0) {
    char v10 = __str;
  }
  else {
    char v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v11 = v6;
  if ((v9 & 0x80) != 0)
  {
    while (1)
    {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
      if (v11 > size) {
        break;
      }
LABEL_9:
      if (v11 == size || v10->__r_.__value_.__s.__data_[v11] == v7)
      {
        if (v11 > v6)
        {
          std::string::basic_string(&v31, __str, v6, v11 - v6, (std::allocator<char> *)&v32);
          unint64_t v14 = a1[1];
          unint64_t v13 = a1[2];
          if (v14 >= v13)
          {
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a1) >> 3);
            unint64_t v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a1) >> 3);
            if (2 * v18 > v17) {
              unint64_t v17 = 2 * v18;
            }
            if (v18 >= 0x555555555555555) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v17;
            }
            v32.__end_cap_.__value_ = v8;
            if (v19) {
              unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            unint64_t v21 = v19 + 24 * v16;
            long long v22 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
            *(void *)(v21 + 16) = *((void *)&v31.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v21 = v22;
            memset(&v31, 0, sizeof(v31));
            unint64_t v24 = *a1;
            unint64_t v23 = a1[1];
            if (v23 == *a1)
            {
              int64x2_t v27 = vdupq_n_s64(v23);
              unint64_t v25 = v19 + 24 * v16;
            }
            else
            {
              unint64_t v25 = v19 + 24 * v16;
              do
              {
                long long v26 = *(_OWORD *)(v23 - 24);
                *(void *)(v25 - 8) = *(void *)(v23 - 8);
                *(_OWORD *)(v25 - 24) = v26;
                v25 -= 24;
                *(void *)(v23 - 16) = 0;
                *(void *)(v23 - 8) = 0;
                *(void *)(v23 - 24) = 0;
                v23 -= 24;
              }
              while (v23 != v24);
              int64x2_t v27 = *(int64x2_t *)a1;
            }
            unint64_t v28 = v21 + 24;
            *a1 = v25;
            a1[1] = v21 + 24;
            *(int64x2_t *)&v32.__begin_ = v27;
            uint64_t v29 = (std::string *)a1[2];
            a1[2] = v19 + 24 * v20;
            v32.__end_cap_.__value_ = v29;
            v32.__first_ = (std::__split_buffer<std::string>::pointer)v27.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v32);
            int v30 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
            a1[1] = v28;
            if (v30 < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v15 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
            *(void *)(v14 + 16) = *((void *)&v31.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v14 = v15;
            a1[1] = v14 + 24;
          }
        }
        std::string::size_type v6 = v11 + 1;
        goto LABEL_2;
      }
      ++v11;
      if ((v9 & 0x80) == 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v11 <= v9) {
      goto LABEL_9;
    }
  }
}

void X::small_vector_base<VFDEntry>::move(uint64_t a1)
{
  if ((long long **)a1 != vfd_table(void)::vfd_table)
  {
    if (vfd_table(void)::vfd_table[0] != off_1E8F83C60) {
      free(vfd_table(void)::vfd_table[0]);
    }
    off_1E8F83C60 = &xmmword_1E8F83C70;
    if (*(void *)a1 == *(void *)(a1 + 16))
    {
      vfd_table(void)::vfd_table[0] = &xmmword_1E8F83C70;
      uint64_t v3 = *(long long **)a1;
      off_1E8F83C58[0] = (long long *)((char *)&xmmword_1E8F83C70 + *(void *)(a1 + 8) - *(void *)a1);
      int v4 = *(long long **)(a1 + 8);
      if (v3 != v4)
      {
        unint64_t v5 = &xmmword_1E8F83C70;
        do
        {
          long long v6 = *v3;
          *((_DWORD *)v5 + 4) = *((_DWORD *)v3 + 4);
          *unint64_t v5 = v6;
          unint64_t v5 = (long long *)((char *)v5 + 20);
          uint64_t v3 = (long long *)((char *)v3 + 20);
        }
        while (v3 != v4);
      }
    }
    else
    {
      int v2 = *(long long **)(a1 + 8);
      vfd_table(void)::vfd_table[0] = *(long long **)a1;
      off_1E8F83C58[0] = v2;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
    qword_1E8F83C68 = *(void *)(a1 + 24);
  }
}

void ___ZL30initialize_velocity_thresholdsv_block_invoke()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (vfd_table(void)::once != -1) {
    dispatch_once(&vfd_table(void)::once, &__block_literal_global_13);
  }
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  int v7 = v11;
  BOOL v8 = v11;
  std::string::size_type v9 = v11;
  uint64_t v10 = 5;
  X::small_vector_base<VFDEntry>::append<VFDEntry const*>(&v7, vfd_table(void)::vfd_table[0], off_1E8F83C58[0]);
  uint64_t v0 = 0;
  int8x8_t v1 = v7;
  int v2 = v8;
  uint64_t v3 = v7;
  do
  {
    int v4 = v3;
    uint64_t v3 = v2;
    if (v4 != v2)
    {
      while (v4[16] || *((float *)v4 + 3) != flt_184998830[v0])
      {
        v4 += 20;
        if (v4 == v2)
        {
          uint64_t v3 = v2;
          goto LABEL_10;
        }
      }
      *((_DWORD *)&velocity_thresholds + v0) = *(_DWORD *)v4;
      unint64_t v5 = (char *)&velocity_threshold_frame_rate_ranges + 12 * v0;
      uint64_t v6 = *(void *)(v4 + 4);
      *((_DWORD *)v5 + 2) = *((_DWORD *)v4 + 3);
      *(void *)unint64_t v5 = v6;
      uint64_t v3 = v4;
    }
LABEL_10:
    ++v0;
  }
  while (v0 != 4);
  has_velocity_thresholds = v3 != v2;
  if (v1 != v9) {
    free(v1);
  }
}

_DWORD *CA::Render::GainMapLayer::copy@<X0>(CA::Render::GainMapLayer *this@<X0>, void *a2@<X8>)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x18uLL, 0x743898A5uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 19;
    ++dword_1EB2ADE14;
    *(void *)uint64_t result = &unk_1ED02D3E8;
    *((unsigned char *)result + 16) = *((unsigned char *)this + 16);
  }
  *a2 = result;
  return result;
}

void CA::Render::GainMapLayer::show(CA::Render::GainMapLayer *this, int a2, char a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      unint64_t v14 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "gain-map-layer", buf, 2u);
      }
    }
    if (*((unsigned __int8 *)this + 16) <= 3u)
    {
      if (x_log_hook_p())
      {
LABEL_12:
        x_log_();
        return;
      }
      uint64_t v15 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v16 = CA::Render::GainMapLayer::show(unsigned int,unsigned int)const::mode_names[*((unsigned __int8 *)this + 16)];
        *(_DWORD *)long long buf = 136315138;
        unint64_t v18 = v16;
        std::string::size_type v11 = " %s";
        uint64_t v12 = v15;
        uint32_t v13 = 12;
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      int v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(gain-map-layer", buf, 2u);
      }
    }
    if (*((unsigned __int8 *)this + 16) <= 3u)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        BOOL v8 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v9 = CA::Render::GainMapLayer::show(unsigned int,unsigned int)const::mode_names[*((unsigned __int8 *)this + 16)];
          *(_DWORD *)long long buf = 136315138;
          unint64_t v18 = v9;
          _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "(mode %s)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p()) {
      goto LABEL_12;
    }
    uint64_t v10 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      std::string::size_type v11 = ")";
      uint64_t v12 = v10;
      uint32_t v13 = 2;
LABEL_15:
      _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
    }
  }
}

_DWORD *CA::CG::ShadowStyle::copy(CA::CG::ShadowStyle *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v3 = malloc_type_zone_malloc(malloc_zone, 0x60uLL, 0x8BB15036uLL);
  int v4 = v3;
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1ED029D48;
    int v5 = *((_DWORD *)this + 3);
    v3[2] = 0;
    v3[3] = v5;
    *((void *)v3 + 2) = CGStyleRetain();
    long long v6 = *(_OWORD *)((char *)this + 56);
    long long v7 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(v4 + 10) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(v4 + 6) = v7;
    *(_OWORD *)(v4 + 14) = v6;
    v4[18] = *((_DWORD *)this + 18);
    double v4[2] = 1;
    *(void *)int v4 = &unk_1ED027AA8;
    v4[19] = *((_DWORD *)this + 19);
    *((void *)v4 + 10) = *((void *)this + 10);
    *((_WORD *)v4 + 44) = *((_WORD *)this + 44);
  }
  return v4;
}

uint64_t CA::CG::ShadowStyle::visit(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  return (**a2)(a2, a1);
}

double *CA::CG::ShadowStyle::expand_layer_roi(float32x2_t *this, float64x2_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  float64x2_t v12 = *a2;
  float64x2_t v13 = a2[1];
  float64x2_t v14 = *a2;
  float64x2_t v15 = v13;
  double v4 = this[9].f32[1] * -2.8 + -1.0;
  uint64_t result = CA::BoundsImpl::inset(v14.f64, v4, v4);
  float64x2_t v6 = v15;
  float64x2_t v7 = vsubq_f64(v14, vcvtq_f64_f32(this[10]));
  int64x2_t v8 = vclezq_f64(v13);
  int64x2_t v9 = vclezq_f64(v15);
  int32x2_t v10 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v9, v8), (int8x16_t)vzip2q_s64(v9, v8))));
  if ((v10.i8[4] & 1) == 0)
  {
    if (v10.i8[0]) {
      return result;
    }
    float64x2_t v11 = vaddq_f64(v7, v15);
    float64x2_t v7 = vminnmq_f64(v12, v7);
    float64x2_t v6 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v12, v13), v11), v7);
    goto LABEL_6;
  }
  if ((v10.i8[0] & 1) == 0)
  {
LABEL_6:
    *a2 = v7;
    a2[1] = v6;
  }
  return result;
}

void CA::CG::ShadowStyle::matrix_changed(CA::CG::ShadowStyle *this)
{
  uint64_t Data = (double *)CGStyleGetData();
  double v4 = *((double *)this + 3);
  double v3 = *((double *)this + 4);
  double v6 = *((double *)this + 5);
  double v5 = *((double *)this + 6);
  float v7 = v5 * v4 + v6 * v3;
  if (v7 < 0.0) {
    float v7 = -v7;
  }
  float v8 = sqrtf(v7);
  if (v7 != 1.0) {
    float v7 = v8;
  }
  float v9 = Data[5] * 0.5 * v7;
  float v10 = 0.0;
  float v11 = fmaxf(v9, 0.0);
  *((float *)this + 19) = v11;
  float v12 = Data[2] * 0.0174532925;
  float v13 = Data[1] * 0.0174532925;
  if (v13 <= 1.5691)
  {
    if (v13 >= 0.0017453)
    {
      double v14 = Data[4];
      float v10 = v14 / tanf(v13);
    }
    else
    {
      float v10 = INFINITY;
    }
  }
  __float2 v15 = __sincosf_stret(v12);
  double v16 = (float)-(float)(v10 * v15.__cosval);
  double v17 = (float)-(float)(v10 * v15.__sinval);
  float v18 = v6 * v17 + v4 * v16;
  float v19 = v5 * v17 + v3 * v16;
  *((float *)this + 20) = v18;
  *((float *)this + 21) = v19;
  if (*((unsigned char *)this + 88))
  {
    *((float *)this + 20) = truncf(v18);
    *((float *)this + 21) = truncf(v19);
    if (v11 < 0.25 && (int)v18 == 0 && (int)v19 == 0) {
      *((unsigned char *)this + 89) = 1;
    }
    *((float *)this + 19) = ceilf(v11 + v11) * 0.5;
  }
}

void CA::CG::ShadowStyle::~ShadowStyle(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED029D48;
  CA::CG::Renderer::release_object(this[2], a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  *this = (CA::CG::Renderer *)&unk_1ED029D48;
  CA::CG::Renderer::release_object(this[2], a2);
}

uint64_t CA::CG::AccelRenderer::start_command_buffer(uint64_t this)
{
  if (!*(_DWORD *)(this + 4232)) {
    return (*(uint64_t (**)(void, void, const char *))(**(void **)(this + 8) + 136))(*(void *)(this + 8), 0, "whippet");
  }
  return this;
}

BOOL CA::CG::AccelRenderer::attached_to_drawable(CA::CG::AccelRenderer *this, const CA::CG::AccelDrawable *a2)
{
  return *((void *)this + 533) == (void)a2;
}

void CA::CG::AccelRenderer::~AccelRenderer(CA::CG::AccelRenderer *this)
{
  CA::CG::AccelRenderer::~AccelRenderer(this);

  JUMPOUT(0x185323DC0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t j;
  char *v7;
  atomic_uint *v8;
  uint64_t v9;
  void *v10;
  uint64_t vars8;

  *(void *)this = &unk_1ED028100;
  int v2 = *((void *)this + 1);
  if (v2)
  {
    if (*((void *)this + 319))
    {
      (*(void (**)(void))(**((void **)this + 318) + 832))(*((void *)this + 318));
      *((void *)this + 319) = 0;
    }
    CA::CG::Renderer::end_rendering(this);
    double v3 = *((void *)this + 1);
    if (v3)
    {
      double v4 = mach_absolute_time();
      *(double *)(v3 + 240) = CATimeWithHostTime(v4);
    }
    CA::CG::Renderer::update_finished_seed((uint64_t)this);
    for (uint64_t i = 0; i != 1152; i += 192)
      CA::OGL::Mosaic::purge((CA::CG::AccelRenderer *)((char *)this + i + 1392));
    for (uint64_t j = 0; j != 1536; j += 64)
    {
      float v7 = (char *)this + j;
      float v8 = *(atomic_uint **)((char *)this + j + 2672);
      if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
      }
      *((void *)v7 + 334) = 0;
      *((_DWORD *)v7 + 671) = 0;
    }
    float v9 = *((void *)this + 1);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 224))(v9, 1);
    }
    *((void *)this + 1) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  float v10 = (void *)*((void *)this + 530);
  if (v10)
  {
    std::string *v10 = 0;
    *((void *)this + 530) = 0;
  }

  CA::CG::Renderer::~Renderer(this);
}

void CA::CG::AccelRenderer::will_suspend(CA::CG::AccelRenderer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  if (CA::CG::Queue::queue(void)::once[0] != -1) {
    dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
  }
  double v4 = CA::CG::Queue::_queue;

  dispatch_sync_f(v4, 0, (dispatch_function_t)CA::CG::AccelRenderer::will_suspend_callback);
}

void CA::CG::AccelRenderer::will_suspend_callback(CA::CG::AccelRenderer *this, void *a2)
{
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    uint64_t v2 = CA::CG::AccelRenderer::_list;
    if (!CA::CG::AccelRenderer::_list) {
      break;
    }
    CA::CG::AccelRenderer::_list = *(void *)(CA::CG::AccelRenderer::_list + 4272);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 4224));
    if (*(void *)(v2 + 4264)) {
      CA::CG::AccelRenderer::detach_surface((CFTypeRef *)v2, 1);
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
}

void CA::CG::AccelRenderer::detach_surface(CFTypeRef *this, int a2)
{
  if (this[533])
  {
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)this);
    if (!*((_DWORD *)this + 1058))
    {
      (*(void (**)(CFTypeRef, void, void, void))(*(void *)this[1] + 32))(this[1], 0, 0, 0);
      if (a2)
      {
        CFTypeRef v4 = this[1];
        uint64_t v5 = (*(uint64_t (**)(CFTypeRef))(*(void *)this[533] + 24))(this[533]);
        (*(void (**)(CFTypeRef, uint64_t))(*(void *)v4 + 40))(v4, v5);
      }
    }
    double v6 = (__IOSurface *)this[532];
    if (v6)
    {
      IOSurfaceUnlock(v6, 0, 0);
      CFRelease(this[532]);
      this[532] = 0;
    }
    this[533] = 0;
  }
}

void *CA::CG::MosaicDelegate_::synchronize(void *this, unsigned int a2)
{
  uint64_t v2 = this[1];
  if (*(_DWORD *)(v2 + 156) < a2)
  {
    this = *(void **)(v2 + 8);
    if (this)
    {
      this = (void *)(*(uint64_t (**)(void *))(*this + 416))(this);
      int v3 = *(_DWORD *)(v2 + 152);
      *(_DWORD *)(v2 + 152) = v3 + 1;
      *(_DWORD *)(v2 + 156) = v3;
      uint64_t v4 = *(void *)(v2 + 8);
      *(_DWORD *)(v4 + 228) = v3 + 1;
      *(_DWORD *)(v4 + 232) = v3;
    }
  }
  return this;
}

void CA::CG::MosaicBitmapDelegate::read(CA::CG::MosaicBitmapDelegate *this, CA::Render *a2, const CA::Bounds *a3, unsigned __int8 *a4, uint64_t a5)
{
  if (a2 > 0x12) {
    return;
  }
  unsigned int v5 = a2;
  if (((1 << (char)a2) & 0x42800) == 0) {
    return;
  }
  float v10 = (char *)*((void *)this + 6);
  if (v10) {
    goto LABEL_4;
  }
  unint64_t v18 = CA::Render::format_rowbytes(a2, *((_DWORD *)this + 6));
  unint64_t v19 = *((unsigned int *)this + 7);
  if (!is_mul_ok(v18, v19)) {
    return;
  }
  size_t v20 = v18;
  size_t v21 = v18 * v19;
  if (!(v18 * v19)) {
    return;
  }
  if (v21 <= *((void *)this + 5))
  {
    float v10 = (char *)*((void *)this + 4);
    bzero(v10, v21);
  }
  else
  {
    float v10 = (char *)malloc_type_calloc(v21, 1uLL, 0x907AB817uLL);
    if (!v10) {
      return;
    }
  }
  long long v22 = CAGetCachedCGBitmapContext_(v10, *((_DWORD *)this + 6), *((_DWORD *)this + 7), v5, v20, *(CGColorSpaceRef *)(*((void *)this + 2) + 144));
  if (v22)
  {
    unint64_t v23 = (CGContext *)*((void *)v22 + 2);
    if (v23)
    {
      (*(void (**)(CA::CG::MosaicBitmapDelegate *, CGContext *))(*(void *)this + 56))(this, v23);
      CAReleaseCachedCGContext(v23);
      *((void *)this + 6) = v10;
      *((void *)this + 7) = v20;
LABEL_4:
      switch(v5)
      {
        case 0xBu:
          int v11 = *((_DWORD *)a3 + 3);
          if (v11 >= 1)
          {
            uint64_t v12 = *((void *)this + 7);
            float v13 = &v10[4 * *(_DWORD *)a3 + v12 * *((int *)a3 + 1)];
            do
            {
              int v14 = *((_DWORD *)a3 + 2);
              if (v14 >= 1)
              {
                uint64_t v15 = 0;
                unsigned int v16 = v14 + 1;
                do
                {
                  *(_DWORD *)&a4[v15] = *(_DWORD *)&v13[v15];
                  --v16;
                  v15 += 4;
                }
                while (v16 > 1);
              }
              v13 += v12;
              a4 += a5;
              BOOL v17 = v11-- <= 1;
            }
            while (!v17);
          }
          break;
        case 0x12u:
          int v24 = *((_DWORD *)a3 + 3);
          if (v24 >= 1)
          {
            uint64_t v25 = *((void *)this + 7);
            long long v26 = &v10[2 * *(_DWORD *)a3 + v25 * *((int *)a3 + 1)];
            int v27 = *((_DWORD *)a3 + 2);
            do
            {
              if (v27 >= 1)
              {
                uint64_t v28 = 0;
                unsigned int v29 = v27 + 1;
                do
                {
                  *(_WORD *)&a4[v28] = *(_WORD *)&v26[v28];
                  --v29;
                  v28 += 2;
                }
                while (v29 > 1);
              }
              v26 += v25;
              a4 += a5;
              BOOL v17 = v24-- <= 1;
            }
            while (!v17);
          }
          break;
        case 0xDu:
          int v30 = *((_DWORD *)a3 + 3);
          if (v30 >= 1)
          {
            uint64_t v31 = *((void *)this + 7);
            std::__split_buffer<std::string> v32 = &v10[8 * *(_DWORD *)a3 + v31 * *((int *)a3 + 1)];
            int v33 = *((_DWORD *)a3 + 2);
            do
            {
              if (v33 >= 1)
              {
                uint64_t v34 = 0;
                unsigned int v35 = v33 + 1;
                do
                {
                  *(void *)&a4[v34] = *(void *)&v32[v34];
                  --v35;
                  v34 += 8;
                }
                while (v35 > 1);
              }
              v32 += v31;
              a4 += a5;
              BOOL v17 = v30-- <= 1;
            }
            while (!v17);
          }
          break;
      }
      return;
    }
  }
  if (v10 != *((char **)this + 4))
  {
    free(v10);
  }
}

uint64_t CA::CG::DrawOp::draw_shape_and_color(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(void *)this + 160))(this, a2);
}

void CA::CG::DrawOp::draw_color(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 10);
  if (!v3)
  {
    uint64_t v18 = *((void *)a2 + 1);
    unint64_t v19 = *(CA::Shape **)(*(void *)(v18 + 248) + 8);
    float64x2_t v147 = 0uLL;
    CA::OGL::emit_combine(v18, 0, 0, 0, v19, (unsigned int *)&v147);
    return;
  }
  uint64_t v4 = *(CA::Render::Pattern **)v3;
  int IsColored = CGPatternIsColored();
  char v6 = IsColored;
  uint64_t v7 = *((void *)a2 + 1);
  float16x4_t v8 = *(float16x4_t *)(v3 + 72);
  if (IsColored) {
    _ZF = *(void *)&v8 == 0x3C003C003C003C00;
  }
  else {
    _ZF = 0;
  }
  if (!_ZF)
  {
    float v10 = *(float16x4_t **)(v7 + 16);
    float16x4_t v11 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v10[1]), vcvtq_f32_f16(v8)));
    if (*(void *)&v10[1] != 0x3C003C003C003C00) {
      float16x4_t v8 = v11;
    }
    v10[1] = v8;
  }
  float64x2_t v12 = *(float64x2_t *)(v3 + 8);
  int8x16_t v13 = *(int8x16_t *)(v3 + 24);
  float64x2_t v144 = v12;
  int8x16_t v145 = v13;
  int8x16_t v14 = *(int8x16_t *)(v3 + 40);
  int8x16_t v146 = v14;
  double v15 = *((double *)a2 + 10);
  if (v15 != 1.0)
  {
    float64x2_t v12 = vmulq_n_f64(v12, v15);
    int8x16_t v13 = (int8x16_t)vmulq_n_f64((float64x2_t)v13, v15);
    float64x2_t v144 = v12;
    int8x16_t v145 = v13;
    int8x16_t v14 = (int8x16_t)vmulq_n_f64((float64x2_t)v14, v15);
    int8x16_t v146 = v14;
  }
  float64x2_t v135 = (float64x2_t)v14;
  __n128 v137 = (__n128)v12;
  double v16 = v12.f64[1];
  int8x16_t v133 = vextq_s8(v13, v13, 8uLL);
  float64x2_t v134 = (float64x2_t)v13;
  int8x16_t v132 = vextq_s8(v14, v14, 8uLL);
  int Type = CGPatternGetType();
  if (!Type)
  {
    CGPatternGetBounds();
    double v21 = v20;
    double v23 = v22;
    int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 184))(v7, 4);
    CGPatternGetStep();
    double v26 = v25;
    double v28 = v27;
    CGPatternGetMatrix();
    _D2 = v147.f64[1];
    _D4 = v148.f64[1];
    _V16.D[1] = v134.f64[1];
    __asm
    {
      FMLA            D1, D2, V16.D[1]; double
      FMLA            D3, D4, V16.D[1]; double
    }
    uint64_t v166 = 0;
    float64x2_t v37 = vmlaq_n_f64(vmlaq_n_f64(v135, (float64x2_t)v137, v149.f64[0]), v134, v149.f64[1]);
    long long v164 = 0u;
    long long v165 = 0u;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    int8x16_t v157 = 0u;
    CA::Transform::set_affine((CA::Transform *)&v157, vmlad_n_f64(v147.f64[0] * v137.n128_f64[0], v147.f64[1], v134.f64[0]), _D1, vmlad_n_f64(v148.f64[0] * v137.n128_f64[0], v148.f64[1], v134.f64[0]), _D3, v37.f64[0], v37.f64[1]);
    BOOL v41 = v24 < (int)v21 || v24 < (int)v23 || v21 > v26 || v23 > v28;
    if (v41 || (v166 & 0x10) != 0 && !CA::Mat4Impl::mat4_is_rectilinear((CA::Mat4Impl *)&v157, v38)) {
      goto LABEL_31;
    }
    double v42 = *(double *)(v7 + 240);
    if (CGPatternGetImage())
    {
      int CachingFlags = CGImageGetCachingFlags();
      double v44 = 0.1;
      if (CachingFlags != 1) {
        double v44 = 1.0;
      }
      double v45 = v44 + v42;
    }
    else
    {
      double v45 = v42 + 1.0;
    }
    v143[0] = v137;
    v143[1] = v134;
    v143[2] = v135;
    long long v73 = CA::Render::Pattern::new_pattern(v4, *(CGPattern **)(v7 + 144), (CGColorSpace *)v143, (CGAffineTransform *)0xC, v45);
    if (!v73) {
      return;
    }
    uint64_t v74 = (uint64_t)v73;
    int updated = CA::OGL::Context::update_color_program_cache_whippet((CA::OGL::Context *)v7, *(float *)(*((void *)v73 + 16) + 56), *(CGColorSpace **)(*((void *)v73 + 16) + 48), *(float *)(v3 + 80));
    float64x2_t v136 = *(float64x2_t *)(v3 + 56);
    *(float64x2_t *)uint64_t v142 = v136;
    long long v79 = *(int **)(*((void *)a2 + 1) + 264);
    if (v79)
    {
      long long v80 = v79 + 8;
      long long v81 = v79 + 9;
      long long v82 = v79 + 10;
      long long v83 = v79 + 11;
    }
    else
    {
      long long v80 = (int *)((char *)a2 + 16);
      long long v81 = (int *)((char *)a2 + 20);
      long long v82 = (int *)((char *)a2 + 24);
      long long v83 = (int *)((char *)a2 + 28);
    }
    int v101 = *v83;
    int v102 = *v82;
    int v103 = *v80;
    if (v102 <= v101) {
      int v104 = v101;
    }
    else {
      int v104 = v102;
    }
    v77.i32[0] = 1073741822;
    v78.i32[0] = v104;
    v105.i64[0] = v103;
    v105.i64[1] = *v81;
    int8x16_t v106 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v78, v77), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v105));
    double v107 = 1.79769313e308;
    if (v104 <= 1073741822) {
      double v108 = (double)v102;
    }
    else {
      double v108 = 1.79769313e308;
    }
    if (v104 <= 1073741822) {
      double v107 = (double)v101;
    }
    float64x2_t v140 = (float64x2_t)v106;
    v141.f64[0] = v108;
    v141.f64[1] = v107;
    memset(v169, 0, sizeof(v169));
    CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)v169, v144.f64, v75);
    CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v169, v140.f64, v109);
    uint64_t v110 = *(void *)(v7 + 16);
    if (*(short float *)(v110 + 14) != COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))) {
      goto LABEL_93;
    }
    uint64_t v111 = *(void *)(v74 + 128);
    if (!v111) {
      goto LABEL_94;
    }
    if ((*(unsigned char *)(v111 + 13) & 0x10) != 0
      && *(double *)(v74 + 96) <= *(double *)(v74 + 80)
      && *(double *)(v74 + 104) <= *(double *)(v74 + 88))
    {
      LODWORD(v111) = 1;
    }
    else
    {
LABEL_93:
      LODWORD(v111) = 0;
    }
LABEL_94:
    if ((*(unsigned char *)(v110 + 481) & 1) != 0
      && ((unsigned int v113 = *(unsigned __int8 *)(v110 + 480), v113 < 2) || v113 == 3 && v111))
    {
      *(unsigned char *)(v110 + 481) &= ~1u;
      int v112 = 1;
    }
    else
    {
      int v112 = 0;
    }
    int Tiling = CGPatternGetTiling();
    double v115 = v137.n128_f64[0];
    if (!Tiling) {
      goto LABEL_122;
    }
    if ((*(_DWORD *)(v74 + 12) & 0x100) == 0) {
      goto LABEL_121;
    }
    double v116 = *(double *)(v74 + 16);
    if (v116 < 0.0) {
      double v116 = -v116;
    }
    double v117 = -v137.n128_f64[0];
    if (v137.n128_f64[0] >= 0.0) {
      double v117 = v137.n128_f64[0];
    }
    if (v116 != v117) {
      goto LABEL_121;
    }
    double v118 = *(double *)(v74 + 24);
    if (v118 < 0.0) {
      double v118 = -v118;
    }
    double v119 = -v16;
    if (v16 >= 0.0) {
      double v119 = v16;
    }
    if (v118 != v119) {
      goto LABEL_121;
    }
    double v120 = *(double *)(v74 + 32);
    if (v120 >= 0.0) {
      double v121 = *(double *)(v74 + 32);
    }
    else {
      double v121 = -v120;
    }
    double v122 = *(double *)&v133.i64[1];
    if (*(double *)&v133.i64[1] < 0.0) {
      double v122 = -*(double *)&v133.i64[1];
    }
    if (v121 != v122) {
      goto LABEL_121;
    }
    double v123 = *(double *)(v74 + 40);
    if (v123 < 0.0) {
      double v123 = -v123;
    }
    double v124 = -*(double *)v133.i64;
    if (*(double *)v133.i64 >= 0.0) {
      double v124 = *(double *)v133.i64;
    }
    if (v123 == v124)
    {
LABEL_122:
      if ((*(_DWORD *)(v74 + 12) & 0x300) == 0x100)
      {
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, __n128))(*(void *)v7 + 608))(v7, *(void *)(v74 + 128), 1, v137))
        {
          int v126 = CA::CG::mat2_filter_bits((uint64_t)&v144) | 0x1000;
          if ((*(_DWORD *)(v7 + 432) & 2) != 0) {
            v126 ^= 0x800u;
          }
          uint64_t v127 = (double *)(v126 | ((*(unsigned char *)(*(void *)(v7 + 16) + 481) & 1) << 8));
          float32x4_t v168 = 0uLL;
          v167[0] = 0;
          v167[1] = 0;
          uint64_t v128 = CA::OGL::Context::bind_image(v7, 0, *(uint32x2_t **)(v74 + 128), v127, 1u, 1, 1, 0, 0.0, &v168, 0);
          if (v128)
          {
            uint64_t v129 = v128;
            CA::OGL::pattern_texcoords((float64x2_t *)v74, v168.f32, (uint64_t)v167, v140, v141, v136);
            long long v155 = 0u;
            memset(v156, 0, 56);
            long long v153 = 0u;
            long long v154 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            float64x2_t v149 = 0u;
            long long v150 = 0u;
            float64x2_t v147 = 0u;
            float64x2_t v148 = 0u;
            CA::Transform::set_affine((CA::Transform *)&v147, v137.n128_f64[0], v16, *(double *)&v133.i64[1], *(double *)v133.i64, *(double *)&v132.i64[1], *(double *)v132.i64);
            *((void *)&v156[0] + 1) = &v140;
            *(void *)&v156[1] = &v147;
            memset((char *)&v156[1] + 12, 0, 28);
            DWORD2(v156[1]) = v127;
            CA::OGL::fill_rect_tex((CA::OGL::Context *)v7, (uint64_t)v156 + 8, (uint64_t)v167, v130);
            (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v7 + 520))(v7, v129, 0);
          }
          goto LABEL_134;
        }
        char v125 = 0;
        double v115 = v137.n128_f64[0];
      }
      else
      {
        char v125 = 0;
      }
    }
    else
    {
LABEL_121:
      char v125 = 1;
    }
    CA::Transform::set_affine((CA::Transform *)&v147, v115, v16, *(double *)&v133.i64[1], *(double *)v133.i64, *(double *)&v132.i64[1], *(double *)v132.i64);
    CA::OGL::fill_pattern_rect(v7, v74, (uint64_t)&v140, (float64x2_t *)v142, (uint64_t)&v147, CA::RectTraits<double>::infinity, 1u, 1, 0.0, 0, v125);
LABEL_134:
    if (v112) {
      *(unsigned char *)(*(void *)(v7 + 16) + 481) |= 1u;
    }
    if (updated) {
      CA::OGL::Context::reset_color_program_cache_whippet((CA::OGL::Context *)v7);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v74 + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t))(*(void *)v74 + 16))(v74);
    }
    return;
  }
  if (Type == 1)
  {
    CGPatternGetMatrix();
    float64x2_t v147 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v137, *(double *)v157.i64), v134, *(double *)&v157.i64[1]);
    float64x2_t v148 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v137, *(double *)&v158), v134, *((double *)&v158 + 1));
    float64x2_t v149 = vmlaq_n_f64(vmlaq_n_f64(v135, (float64x2_t)v137, *(double *)&v159), v134, *((double *)&v159 + 1));
    CGPatternGetShading();
    CA::CG::fill_shading((uint64_t)a2);
    return;
  }
LABEL_31:
  v143[0] = 0uLL;
  CA::Shape::get_bounds(*(void *)(*(void *)(v7 + 248) + 8), (int *)v143);
  int v46 = *(int32x2_t **)(v7 + 264);
  if (v46) {
    float32x2_t v47 = v46 + 4;
  }
  else {
    float32x2_t v47 = (int32x2_t *)(v7 + 200);
  }
  int32x2_t v48 = *(int32x2_t *)((char *)v143 + 8);
  uint32x2_t v49 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)v143 + 8));
  if ((vpmax_u32(v49, v49).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v50 = v47[1];
    uint32x2_t v51 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v50);
    if ((vpmax_u32(v51, v51).u32[0] & 0x80000000) != 0
      || (int32x2_t v52 = vadd_s32(*v47, v50),
          *(int32x2_t *)&long long v53 = vmax_s32(*(int32x2_t *)&v143[0], *v47),
          int32x2_t v48 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v143[0], *(int32x2_t *)((char *)v143 + 8)), v52), *(int32x2_t *)&v53), v54 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v48), (vpmax_u32(v54, v54).u32[0] & 0x80000000) != 0))
    {
      int32x2_t v48 = 0;
      *((void *)&v143[0] + 1) = 0;
    }
    else
    {
      *((int32x2_t *)&v53 + 1) = v48;
      v143[0] = v53;
    }
  }
  signed int v55 = v48.i32[0];
  unint64_t v56 = v48.u32[1];
  if (v48.i32[0] >= v48.i32[1]) {
    int v57 = v48.i32[1];
  }
  else {
    int v57 = v48.i32[0];
  }
  if (v57 >= 1)
  {
    unint64_t v58 = CA::Render::format_rowbytes((CA::Render *)1, v48.u32[0]);
    size_t v59 = v58;
    *(void *)&v140.f64[0] = v58;
    unsigned int v60 = is_mul_ok(v58, v56) ? (CA::Render *)(v58 * v56) : 0;
    v142[0] = 0;
    long long v61 = CA::Render::aligned_malloc(v60, (unint64_t *)v142, 0);
    if (v61)
    {
      double v62 = v61;
      uint64_t v63 = *((void *)a2 + 1);
      if (v63) {
        double v64 = *(CGColorSpace **)(v63 + 144);
      }
      else {
        double v64 = 0;
      }
      if (CGColorSpaceGetModel(v64)) {
        double v65 = *(CGColorSpace **)(v7 + 144);
      }
      else {
        double v65 = (CGColorSpace *)CAGetColorSpace(0x1Du);
      }
      uint64_t v66 = (CGContextRef *)CAGetCachedCGBitmapContext_(v62, v55, v56, 1u, v59, v65);
      if (v66 && (float v68 = v66[2]) != 0)
      {
        CGContextTranslateCTM(v66[2], (double)-LODWORD(v143[0]), (double)-DWORD1(v143[0]));
        v69.i64[0] = SLODWORD(v143[0]);
        v69.i64[1] = SDWORD1(v143[0]);
        int8x16_t v138 = (int8x16_t)vcvtq_f64_s64(v69);
        CGContextSetBaseCTM();
        CGContextSetCompositeOperation();
        CGContextSetPatternPhase(v68, *(CGSize *)(v3 + 56));
        if (v6) {
          float v70 = 0;
        }
        else {
          float v70 = (CGColorSpace *)CAGetColorSpace(0x1Du);
        }
        Patteruint64_t n = CGColorSpaceCreatePattern(v70);
        float v85 = CGColorCreateWithPattern(Pattern, v4, CA::CG::fill_pattern(CA::CG::Renderer &,CA::CG::DeviceColor::Pattern *)::components);
        CGColorSpaceRelease(Pattern);
        CGContextSetFillColorWithColor(v68, v85);
        CGColorRelease(v85);
        if (v55 <= (int)v56) {
          int v88 = v56;
        }
        else {
          int v88 = v55;
        }
        v86.i32[0] = 1073741822;
        v87.i32[0] = v88;
        int8x16_t v89 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v87, v86), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v138);
        if (v88 <= 1073741822) {
          double v90 = (double)v55;
        }
        else {
          double v90 = 1.79769313e308;
        }
        if (v88 <= 1073741822) {
          double v91 = (double)(int)v56;
        }
        else {
          double v91 = 1.79769313e308;
        }
        uint64_t v92 = v89.i64[1];
        int8x16_t v139 = v89;
        double v93 = v90;
        double v94 = v91;
        CGContextFillRect(v68, *(CGRect *)v89.i8);
        CAReleaseCachedCGContext(v68);
        float v95 = v142[0];
        float v96 = CA::Render::Image::new_image((CA::Render::Image *)1, v55, v56, 1u, *(CGColorSpace **)(v7 + 144), (CGColorSpace *)v62, (unint64_t *)&v140, (const unint64_t *)CA::Render::aligned_free, v142[0], v131);
        if (v96)
        {
          float v97 = (atomic_uint *)v96;
          v169[0] = 0uLL;
          float v98 = CA::OGL::Context::bind_image(v7, 0, (uint32x2_t *)v96, (double *)0x100, 0, 0, 0, 0, 0.0, v169, 0);
          if (v98)
          {
            float v100 = v98;
            int8x16_t v157 = v139;
            *(double *)&long long v158 = v90;
            *((double *)&v158 + 1) = v91;
            *(void *)&v147.f64[0] = &v157;
            *(void *)&v147.f64[1] = &CA::identity_transform;
            float64x2_t v148 = 0u;
            float64x2_t v149 = 0u;
            CA::OGL::fill_rect_tex((CA::OGL::Context *)v7, (uint64_t)&v147, (uint64_t)v169, v99);
            (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v7 + 520))(v7, v100, 0);
          }
          if (atomic_fetch_add(v97 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v97 + 16))(v97);
          }
          return;
        }
        long long v72 = (CA::Render *)v62;
        long long v71 = v95;
      }
      else
      {
        long long v71 = v142[0];
        long long v72 = (CA::Render *)v62;
      }
      CA::Render::aligned_free(v72, (size_t)v71, v67);
    }
  }
}

void CA::CG::DrawOp::draw_shape(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  double v4[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 1);
  uint64_t v3 = *(CA::Shape **)(*(void *)(v2 + 248) + 8);
  v4[0] = 0;
  v4[1] = 0;
  CA::OGL::emit_combine(v2, 0, 0, 0, v3, (unsigned int *)v4);
}

uint64_t CA::CG::DrawOp::color_type(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  uint64_t v2 = *((void *)this + 10);
  unsigned int v3 = 9;
  if (v2)
  {
    if (*((_DWORD *)this + 14)) {
      unsigned int v3 = 10;
    }
    else {
      unsigned int v3 = 9;
    }
  }
  if (*((short float *)this + 47) == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) && v2 == 0) {
    return v3 | 4;
  }
  else {
    return v3;
  }
}

void *CA::CG::DrawOp::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(unsigned char *)(a1 + 101) & 0x20) != 0 || *(void *)(a1 + 80))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    float16x4_t v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      Color = (CGColor *)CGStyleGetColor();
      CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
      void *v11 = &unk_1ED028848;
      v11[14] = a1;
      atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
      v11[15] = a3;
    }
  }
  else
  {
    float16x4_t v11 = 0;
    _H0 = *(_WORD *)(a1 + 88);
    _H1 = *(_WORD *)(a1 + 90);
    _H2 = *(_WORD *)(a1 + 92);
    _H3 = *(_WORD *)(a1 + 94);
    __asm { FCVT            S4, H3 }
    float v22 = 1.0 / _S4;
    __asm { FCMP            H3, #0 }
    if (_NF ^ _VF | _ZF) {
      float v22 = 0.0;
    }
    __asm { FCVT            S0, H0 }
    float v25 = v22 * _S0;
    __asm { FCVT            S1, H1 }
    float v27 = v22 * _S1;
    __asm { FCVT            S2, H2 }
    float v29 = v22 * _S2;
    float v30 = (float)((float)((float)(*(float *)(a3 + 92) + (float)(*(float *)(a3 + 76) * v25))
                        + (float)(*(float *)(a3 + 80) * v27))
                + (float)(*(float *)(a3 + 84) * v29))
        + (float)(*(float *)(a3 + 88) * _S4);
    float v31 = (float)((float)((float)(*(float *)(a3 + 112) + (float)(*(float *)(a3 + 96) * v25))
                        + (float)(*(float *)(a3 + 100) * v27))
                + (float)(*(float *)(a3 + 104) * v29))
        + (float)(*(float *)(a3 + 108) * _S4);
    float v32 = (float)((float)((float)(*(float *)(a3 + 132) + (float)(*(float *)(a3 + 116) * v25))
                        + (float)(*(float *)(a3 + 120) * v27))
                + (float)(*(float *)(a3 + 124) * v29))
        + (float)(*(float *)(a3 + 128) * _S4);
    _S0 = (float)((float)((float)(*(float *)(a3 + 152) + (float)(*(float *)(a3 + 136) * v25))
                        + (float)(*(float *)(a3 + 140) * v27))
                + (float)(*(float *)(a3 + 144) * v29))
        + (float)(*(float *)(a3 + 148) * _S4);
    if (_S0 > 1.0) {
      _S0 = 1.0;
    }
    if (_S0 < 0.0) {
      _S0 = 0.0;
    }
    _S1 = _S0 * v30;
    _S2 = _S0 * v31;
    _S3 = _S0 * v32;
    __asm
    {
      FCVT            H1, S1
      FCVT            H2, S2
      FCVT            H3, S3
    }
    *(_WORD *)(a1 + 88) = LOWORD(_S1);
    *(_WORD *)(a1 + 90) = LOWORD(_S2);
    __asm { FCVT            H0, S0 }
    *(_WORD *)(a1 + 92) = LOWORD(_S3);
    *(_WORD *)(a1 + 94) = _H0;
  }
  return v11;
}

{
  malloc_zone_t *malloc_zone;
  void *v11;
  CGColor *Color;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  float16x4_t v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
    void *v11 = &unk_1ED028BC0;
    v11[14] = a1;
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
    v11[15] = a3;
  }
  return v11;
}

float16x4_t *CA::CG::DrawOp::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (float16x4_t *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (result) {
    return CA::CG::DrawFocusRing::DrawFocusRing(result, a2, a1, a4, a5, a3);
  }
  return result;
}

char *CA::CG::DrawOp::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[1] = *(double *)MEMORY[0x1E4F143B8];
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  float16x4_t v11 = (char *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    Color = (CGColor *)CGStyleGetColor();
    *(void *)float16x4_t v11 = &unk_1ED029D88;
    long long v13 = *(_OWORD *)(a1 + 8);
    long long v14 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v11 + 24) = v14;
    *(_OWORD *)(v11 + 8) = v13;
    *((_DWORD *)v11 + 14) = *(_DWORD *)(a1 + 56);
    if (*(void *)(a1 + 64))
    {
      double v15 = (malloc_zone_t *)get_malloc_zone();
      double v16 = (uint64_t *)malloc_type_zone_malloc(v15, 0x18uLL, 0x8BB15036uLL);
      if (v16) {
        double v16 = CA::CG::BasicState::SoftMask::SoftMask(v16);
      }
    }
    else
    {
      double v16 = 0;
    }
    *((void *)v11 + 8) = v16;
    BOOL v17 = *(atomic_uint **)(a1 + 72);
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    *((void *)v11 + 9) = v17;
    v21[0] = 1.10008428e-19;
    CA::CG::DeviceColor::DeviceColor((double *)v11 + 10, Color, a4, a5, a2, v21);
    int ShouldAntialias = CGGStateGetShouldAntialias();
    if (ShouldAntialias) {
      int ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
    }
    if (Color) {
      int v19 = 2114;
    }
    else {
      int v19 = 2112;
    }
    *((_DWORD *)v11 + 25) = v19 | ShouldAntialias | *(_DWORD *)(a1 + 100) & 0x1100;
    *((void *)v11 + 13) = 0;
    *(void *)float16x4_t v11 = &unk_1ED027588;
    *((void *)v11 + 18) = a1;
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
    *((void *)v11 + 19) = a3;
  }
  return v11;
}

double CA::CG::MosaicDelegate::draw_array(CA::CG::MosaicDelegate *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 16))
  {
    long long v4 = 0u;
    long long v7 = 0u;
    uint64_t v2 = *(void *)(*((void *)this + 31) + 8);
    v5[0] = this;
    v5[1] = v2;
    long long v6 = 0u;
    unsigned __int8 v5[2] = 0;
    WORD4(v6) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v5);
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v5, (int32x2_t *)&v4))CA::OGL::Context::array_flush((uint64_t)this);
    *((void *)this + 16) = 0;
    *((void *)this + 12) = (char *)this + 834;
    double result = 0.0;
    *(_OWORD *)((char *)this + 104) = xmmword_184997E70;
  }
  return result;
}

void CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(CA::CG::MosaicBitmapDelegate *this)
{
  *(void *)this = &unk_1ED029588;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2 && v2 != *((void **)this + 4)) {
    free(v2);
  }
  *(void *)this = &unk_1ED028780;
  CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
}

uint64_t CA::CG::DrawOp::render_alpha(CA::CG::DrawOp *this, CA::CG::Renderer *a2, int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a2 + 1);
  char v7 = (*(uint64_t (**)(CA::CG::DrawOp *))(*(void *)this + 128))(this);
  char v8 = (*(uint64_t (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(void *)this + 136))(this, a2);
  char v9 = v8;
  if (a3)
  {
    __int16 v10 = *((_WORD *)this + 44);
    __int16 v11 = *((_WORD *)this + 45);
    __int16 v12 = *((_WORD *)this + 46);
    __int16 v13 = *((_WORD *)this + 47);
  }
  else
  {
    __int16 v10 = 15360;
    __int16 v11 = 15360;
    __int16 v12 = 15360;
    __int16 v13 = 15360;
  }
  *(unsigned char *)(*(void *)(v6 + 16) + 481) &= ~1u;
  if (v8 & 2 | v7 & 1)
  {
    uint64_t v28 = 0;
    memset(&v27[2], 0, 32);
    memset(v27, 0, 32);
    uint64_t v17 = *(void *)(v6 + 248);
    *(_OWORD *)((char *)v27 + 8) = *(_OWORD *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 32);
    *((void *)&v27[1] + 1) = *(void *)(v17 + 24);
    *(void *)&v27[2] = v18;
    *(_OWORD *)((char *)&v27[2] + 8) = *(_OWORD *)(v17 + 40);
    *((void *)&v27[3] + 1) = *(void *)(v17 + 56);
    __int16 v19 = *(_WORD *)(v17 + 68);
    LODWORD(v28) = *(_DWORD *)(v17 + 64);
    HIDWORD(v28) = v19 & 0x100 | 0xF;
    *(void *)&v27[0] = CA::OGL::Context::set_gstate(v6, (uint64_t)v27);
    if ((v7 & 2) != 0)
    {
      if (v7) {
        char v20 = 18;
      }
      else {
        char v20 = 12;
      }
      uint64_t v21 = *(void *)(v6 + 16);
      *(unsigned char *)(v21 + 480) = v20;
      *(unsigned char *)(v21 + 481) |= 1u;
    }
    uint64_t v22 = *(void *)(v6 + 16);
    int v23 = v7 & 1 | v9 & 3;
    BOOL v24 = v23 == 0;
    if (v23)
    {
      *(void *)(v22 + 8) = 0x3C003C003C003C00;
      (*(void (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(void *)this + 160))(this, a2);
    }
    else
    {
      *(_WORD *)(v22 + 8) = v10;
      *(_WORD *)(v22 + 10) = v11;
      *(_WORD *)(v22 + 12) = v12;
      *(_WORD *)(v22 + 14) = v13;
      (*(void (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(void *)this + 176))(this, a2);
    }
    *(unsigned char *)(*(void *)(v6 + 16) + 481) |= 1u;
    __int16 v25 = WORD2(v28);
    if ((v7 & 2) != 0) {
      *(unsigned char *)(*(void *)(v6 + 16) + 480) = BYTE4(v28);
    }
    WORD2(v28) = v25 | 0x400;
    if (!v24)
    {
      double v26 = *(_WORD **)(v6 + 16);
      v26[4] = v10;
      v26[5] = v11;
      v26[6] = v12;
      v26[7] = v13;
      (*(void (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(void *)this + 168))(this, a2);
      *(unsigned char *)(*(void *)(v6 + 16) + 481) |= 1u;
    }
    return CA::OGL::Context::set_gstate(v6, **(void **)(v6 + 248));
  }
  else
  {
    long long v14 = *(_WORD **)(v6 + 16);
    v14[4] = v10;
    v14[5] = v11;
    v14[6] = v12;
    v14[7] = v13;
    if ((v7 & 2) != 0)
    {
      uint64_t v15 = *(void *)(v6 + 16);
      *(unsigned char *)(v15 + 480) = 12;
      *(unsigned char *)(v15 + 481) |= 1u;
    }
    uint64_t result = (*(uint64_t (**)(CA::CG::DrawOp *, CA::CG::Renderer *))(*(void *)this + 176))(this, a2);
    *(unsigned char *)(*(void *)(v6 + 16) + 481) |= 1u;
  }
  return result;
}

void CA::CG::DrawOp::shape_line_width(uint64_t a1, const double *a2, double a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1DD98] != a3 && a3 > 0.0 && (*(unsigned char *)(a1 + 100) & 4) != 0)
  {
    long long v3 = *(_OWORD *)(a1 + 24);
    v4[0] = *(_OWORD *)(a1 + 8);
    v4[1] = v3;
    double v4[2] = *(_OWORD *)(a1 + 40);
    CA::Mat2Impl::mat2_get_scale_2d((CA::Mat2Impl *)v4, a2);
  }
}

BOOL should_emit_tailspins(void)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (dyld_shared_cache_some_image_overridden() && arc4random_uniform(0x64u) < 0x4B) {
    return 0;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"CATailspinEnable", @"com.apple.coreanimation", &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat)
  {
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"PDSECATailspin.CATailspinEnable", @"com.apple.da", &keyExistsAndHasValidFormat);
    if (!keyExistsAndHasValidFormat)
    {
      if (CADeviceHasInternalBuild::once[0] != -1) {
        dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
      }
      int AppBooleanValue = CADeviceHasInternalBuild::internal;
    }
  }
  return AppBooleanValue != 0;
}

void *std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long>**,long,256l>::operator+[abi:nn180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 4);
    if (v3 < 1) {
      result -= (unint64_t)(255 - v3) >> 8;
    }
    else {
      result += (unint64_t)v3 >> 8;
    }
  }
  return result;
}

char **std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>(char **result, char *a2, char *a3, char *a4, char *a5)
{
  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    uint64_t v5 = *(void **)a4;
    while (1)
    {
      uint64_t v6 = (char *)(v5 + 512);
      if ((a3 - a2) >> 4 >= (v6 - a5) >> 4) {
        uint64_t v7 = (v6 - a5) >> 4;
      }
      else {
        uint64_t v7 = (a3 - a2) >> 4;
      }
      if (v7)
      {
        char v8 = &a2[16 * v7];
        do
        {
          *(void *)a5 = *(void *)a2;
          *((void *)a5 + 1) = *((void *)a2 + 1);
          a5 += 16;
          a2 += 16;
        }
        while (a2 != v8);
        a2 = v8;
      }
      if (a2 == a3) {
        break;
      }
      char v9 = (void *)*((void *)a4 + 1);
      a4 += 8;
      uint64_t v5 = v9;
      a5 = (char *)v9;
    }
    if (v6 == a5)
    {
      __int16 v10 = (char *)*((void *)a4 + 1);
      a4 += 8;
      a5 = v10;
    }
  }
  float16x4_t *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>(void *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a3;
    while (1)
    {
      if ((v6 - a2) >> 4 >= (a5 - v5) >> 4) {
        uint64_t v7 = (a5 - v5) >> 4;
      }
      else {
        uint64_t v7 = (v6 - a2) >> 4;
      }
      if (v7)
      {
        char v8 = (uint64_t *)(v6 - 8);
        uint64_t v9 = -16 * v7;
        do
        {
          *(void *)(a5 - 16) = *(v8 - 1);
          a5 -= 16;
          uint64_t v10 = *v8;
          v8 -= 2;
          *(void *)(a5 + 8) = v10;
          v9 += 16;
        }
        while (v9);
      }
      v6 -= 16 * v7;
      if (v6 == a2) {
        break;
      }
      uint64_t v11 = *--a4;
      uint64_t v5 = v11;
      a5 = v11 + 4096;
    }
    if (v5 + 4096 == a5)
    {
      uint64_t v12 = a4[1];
      ++a4;
      a5 = v12;
    }
  }
  float16x4_t *result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

void CATailspinEmit(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const char *a5)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  if (a4) {
    uint64_t v9 = objc_msgSend((id)objc_msgSend(NSString, "stringWithUTF8String:", a4), "lastPathComponent");
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = mach_absolute_time();
  double v11 = CATimeWithHostTime(v10);
  if (emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::onceToken != -1) {
    dispatch_once(&emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::onceToken, &__block_literal_global_18254);
  }
  if (emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::show_HUD) {
    mach_port_name_t ServerPort = CARenderServerGetServerPort(0);
  }
  else {
    mach_port_name_t ServerPort = 0;
  }
  __int16 v13 = (void *)[MEMORY[0x1E4F28E78] string];
  long long v14 = v13;
  if (a3) {
    [v13 appendFormat:@"Force Triggered: "];
  }
  if ((a3 & 2) != 0)
  {
    objc_msgSend(v14, "appendFormat:", @"Long Render Interval with update seed 0x%x", a2);
    uint64_t v15 = @"LongRenderInterval";
    if ((a3 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v15 = @"Unknown";
  if ((a3 & 4) != 0)
  {
LABEL_15:
    objc_msgSend(v14, "appendFormat:", @"Long Commit from %s [%d]", objc_msgSend(v9, "UTF8String"), 0xFFFFFFFFLL);
    uint64_t v15 = @"LongCommit";
  }
LABEL_16:
  if ((a3 & 8) != 0)
  {
    objc_msgSend(v14, "appendFormat:", @"Long frame latency at swap 0x%x", a1);
    uint64_t v15 = @"LongFrameLatency";
    if ((a3 & 0x10) == 0)
    {
LABEL_18:
      if ((a3 & 0x20) == 0) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }
  }
  else if ((a3 & 0x10) == 0)
  {
    goto LABEL_18;
  }
  [v14 appendFormat:@"Glitch at swap 0x%x, update_seed 0x%x with long pole process name %@", a1, a2, v9];
  uint64_t v15 = @"Glitch";
  if ((a3 & 0x20) == 0)
  {
LABEL_19:
    if ((a3 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_29:
  [v14 appendFormat:@"First frame glitch at swap 0x%x, update_seed 0x%x with long pole process name %@", a1, a2, v9];
  uint64_t v15 = @"FirstFrameGlitch";
  if ((a3 & 0x40) != 0)
  {
LABEL_20:
    [v14 appendFormat:@"Skip requested glitch at swap 0x%x, update_seed 0x%x with long pole process name %@", a1, a2, v9];
    uint64_t v15 = @"SkipRequestedGlitch";
  }
LABEL_21:
  v39[0] = @"type";
  v39[1] = @"longPoleProcessName";
  v40[0] = v15;
  v40[1] = v9;
  v39[2] = @"swapID";
  v40[2] = [NSNumber numberWithUnsignedInt:a1];
  v39[3] = @"updateSeed";
  double v40[3] = [NSNumber numberWithUnsignedInt:a2];
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:v39 count:4];
  if (!a5)
  {
    dispatch_time_t v26 = dispatch_time(0, 100000000);
    if (ca_tailspin_request_queue(void)::once != -1) {
      dispatch_once(&ca_tailspin_request_queue(void)::once, &__block_literal_global_92);
    }
    BOOL v24 = ca_tailspin_request_queue(void)::ws_hitches_tailspin_request_queue;
    *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 3221225472;
    int v33 = ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_87;
    uint64_t v34 = &unk_1E527FC48;
    uint64_t v35 = (uint64_t)v14;
    uint64_t v36 = v16;
    dispatch_time_t v25 = v26;
    goto LABEL_34;
  }
  uint64_t v17 = -[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", objc_msgSend(NSString, "stringWithFormat:", @"layer-dump-%f.txt", *(void *)&v11));
  uint64_t v18 = fopen([(NSString *)v17 UTF8String], "wb");
  if (v18)
  {
    __int16 v19 = v18;
    size_t v20 = strlen(a5);
    fwrite(a5, 1uLL, v20, v19);
    fclose(v19);
    id v31 = 0;
    uint64_t v21 = [objc_alloc(MEMORY[0x1E4F5F3D0]) initWithPath:v17 transferOwnership:1 errorOut:&v31];
    if (v21)
    {
      uint64_t v22 = v21;
      dispatch_time_t v23 = dispatch_time(0, 100000000);
      if (ca_tailspin_request_queue(void)::once != -1) {
        dispatch_once(&ca_tailspin_request_queue(void)::once, &__block_literal_global_92);
      }
      BOOL v24 = ca_tailspin_request_queue(void)::ws_hitches_tailspin_request_queue;
      *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 3221225472;
      int v33 = ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_2;
      uint64_t v34 = &unk_1E527FC20;
      uint64_t v35 = v22;
      uint64_t v36 = (uint64_t)v14;
      uint64_t v37 = v16;
      uint64_t v38 = a5;
      dispatch_time_t v25 = v23;
LABEL_34:
      dispatch_after(v25, v24, &block);
      goto LABEL_45;
    }
    if (x_log_hook_p())
    {
      objc_msgSend((id)objc_msgSend(v31, "localizedDescription"), "UTF8String");
      goto LABEL_39;
    }
    float v27 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = objc_msgSend((id)objc_msgSend(v31, "localizedDescription"), "UTF8String");
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v29;
      uint64_t v28 = "Diagnostics (tailspin) failed to create client log with error: %s";
      goto LABEL_44;
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      [(NSString *)v17 UTF8String];
LABEL_39:
      x_log_();
      goto LABEL_45;
    }
    float v27 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = [(NSString *)v17 UTF8String];
      uint64_t v28 = "Diagnostics (tailspin) failed to create layer tree file at %s";
LABEL_44:
      _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&block, 0xCu);
    }
  }
LABEL_45:
  if (ServerPort)
  {
    if (CADeviceHasInternalBuild::once[0] != -1) {
      dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
    }
    if (CADeviceHasInternalBuild::internal)
    {
      float v30 = (void *)[[NSString alloc] initWithFormat:@"Frametracer - %@", v15];
      if ((CA::Render::Server::add_callback(1, (uint64_t)emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_0::__invoke, (uint64_t)v30, 0.0) & 1) == 0)v30; {
    }
      }
    if (ServerPort != -1)
    {
      CA::Render::Server::add_callback(0, (uint64_t)emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_1::__invoke, 0, 0.0);
      mach_port_deallocate(*MEMORY[0x1E4F14960], ServerPort);
    }
  }
}

void ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_2(uint64_t a1)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = *(void *)(a1 + 32);
  [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];
  char v2 = DRTailspinRequestWithLogs();

  ca_tailspin_log_request_result(v2, *(void *)(a1 + 56) != 0, 0);
}

void ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke_87()
{
  char v0 = DRTailspinRequest();
  ca_tailspin_log_request_result(v0, 0, 0);
}

void emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_1::__invoke()
{
}

void emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::$_0::__invoke(void *a1)
{
  char v2 = (void *)MEMORY[0x185324A30]();
  CASetDebugMessage((char *)[a1 UTF8String], 16711935);
}

void ca_tailspin_log_request_result(char a1, int a2, NSError *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (!a3 || (a1 & 1) != 0)
  {
    if (v6) {
      goto LABEL_6;
    }
    uint64_t v11 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = ".";
      if (a2) {
        uint64_t v12 = " with layer-tree log";
      }
      *(_DWORD *)long long buf = 136315138;
      long long v14 = v12;
      char v8 = "Diagnostics (tailspin) request successful%s";
      uint64_t v9 = v11;
      os_log_type_t v10 = OS_LOG_TYPE_INFO;
      goto LABEL_13;
    }
  }
  else
  {
    if (v6)
    {
      [(NSString *)[(NSError *)a3 localizedDescription] UTF8String];
LABEL_6:
      x_log_();
      return;
    }
    uint64_t v7 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v14 = [(NSString *)[(NSError *)a3 localizedDescription] UTF8String];
      char v8 = "Diagnostics (tailspin) request failed with the error: %s.";
      uint64_t v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_13:
      _os_log_impl(&dword_184668000, v9, v10, v8, buf, 0xCu);
    }
  }
}

dispatch_queue_t ___ZL25ca_tailspin_request_queuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coreanimation.TailspinRequest", 0);
  ca_tailspin_request_queue(void)::ws_hitches_tailspin_request_queue = (uint64_t)result;
  return result;
}

uint64_t ___ZL13emit_tailspinP8NSStringjjijPKc_block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"FrameTracerHUD", @"com.apple.coreanimation", 0);
  emit_tailspin(NSString *,unsigned int,unsigned int,int,unsigned int,char const*)::show_HUD = result;
  return result;
}

void CAUpdateEarliestTailspinEmissionTime(int a1)
{
  uint64_t v2 = mach_absolute_time();
  double v3 = CATimeWithHostTime(v2);
  if (a1 == 1 || a1 == 2 && arc4random_uniform(0x64u) <= 0x54) {
    *(double *)&CATailspinMinimumTimestamp = v3 + 10.0;
  }
}

uint64_t CA::Render::DistanceFieldLayer::visit_subclass(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
}

uint64_t CA::Render::DistanceFieldLayer::preserves_contents_opacity(CA::Render::DistanceFieldLayer *this, const CA::Render::Layer *a2)
{
  return 0;
}

float CA::Render::DistanceFieldLayer::set_property(CA::Render::DistanceFieldLayer *this, uint64_t a2, const unsigned int *a3, BOOL a4, unint64_t a5, const double *a6, double a7)
{
  if (a2 == 1)
  {
    int v7 = *a3;
    if (a5 >= 4 && v7 == 234)
    {
      int v8 = (int)(*a6 * 255.0 + 0.5) & ~((int)(*a6 * 255.0 + 0.5) >> 31);
      int v9 = (int)(a6[3] * 255.0 + 0.5) & ~((int)(a6[3] * 255.0 + 0.5) >> 31);
      if (v8 >= 255) {
        int v8 = 255;
      }
      __asm { FMOV            V2.2D, #0.5 }
      a7 = COERCE_DOUBLE(vshl_u32((uint32x2_t)vmin_s32(vmax_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(_Q2, (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL), *(float64x2_t *)(a6 + 1)))), 0), (int32x2_t)0xFF000000FFLL), (uint32x2_t)0x800000010));
      if (_NF == _VF) {
        int v9 = 255;
      }
      *((_DWORD *)this + 5) = LODWORD(a7) | (v8 << 24) | v9 | HIDWORD(a7);
    }
    else if (a5 && v7 == 336)
    {
      a7 = *a6;
      int v15 = *((_DWORD *)this + 3);
      if (*a6 <= 0.5) {
        unsigned int v16 = v15 & 0xFFFFFEFF;
      }
      else {
        unsigned int v16 = v15 | 0x100;
      }
      *((_DWORD *)this + 3) = v16;
    }
    else if (a5)
    {
      switch(v7)
      {
        case 358:
          uint64_t v17 = 0;
          break;
        case 507:
          uint64_t v17 = 2;
          break;
        case 404:
          uint64_t v17 = 1;
          break;
        default:
          return *(float *)&a7;
      }
      *(float *)&a7 = *a6;
      *((_DWORD *)this + v17 + 6) = LODWORD(a7);
    }
  }
  return *(float *)&a7;
}

uint64_t CA::Render::DistanceFieldLayer::get_property(CA::Render::DistanceFieldLayer *this, uint64_t a2, const unsigned int *a3, unint64_t a4, float64x2_t *a5, double **a6)
{
  if (a2 != 1) {
    return 0;
  }
  uint64_t result = 0;
  int v8 = *a3;
  if (*(int *)a3 > 357)
  {
    if (v8 != 358)
    {
      if (v8 == 404)
      {
        uint64_t result = 1;
      }
      else
      {
        if (v8 != 507) {
          return result;
        }
        uint64_t result = 2;
      }
    }
    double v9 = *((float *)this + result + 6);
    goto LABEL_15;
  }
  if (v8 == 234)
  {
    unsigned int v10 = *((_DWORD *)this + 5);
    float v13 = (float)v10 * 0.0039216;
    float v11 = (float)HIBYTE(v10) * 0.0039216;
    float32x2_t v12 = vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x3B808081u));
    *a5 = vcvtq_f64_f32(*(float32x2_t *)&v11);
    a5[1] = vcvtq_f64_f32(*(float32x2_t *)(&v13 - 1));
    return 4;
  }
  if (v8 == 336)
  {
    double v9 = 0.0;
    if ((*((_DWORD *)this + 3) & 0x100) != 0) {
      double v9 = 1.0;
    }
LABEL_15:
    a5->f64[0] = v9;
    return 1;
  }
  return result;
}

_DWORD *CA::Render::DistanceFieldLayer::copy@<X0>(CA::Render::DistanceFieldLayer *this@<X0>, void *a2@<X8>)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x28uLL, 0x743898A5uLL);
  if (result)
  {
    result[2] = 1;
    result[3] = 12;
    ++dword_1EB2ADDF8;
    *(void *)uint64_t result = &unk_1ED02E9F8;
    *((void *)result + 2) = *((void *)this + 2);
    result[3] = *((_DWORD *)this + 3) & 0xFFFFFF00 | 0xC;
    uint64_t v6 = *((void *)this + 3);
    result[8] = *((_DWORD *)this + 8);
    *((void *)result + 3) = v6;
  }
  *a2 = result;
  return result;
}

void CA::Render::DistanceFieldLayer::show(CA::Render::DistanceFieldLayer *this, int a2, char a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      size_t v20 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v21 = "distance-field-layer";
        goto LABEL_40;
      }
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      int v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(distance-field-layer", buf, 2u);
      }
    }
    unsigned int v8 = *((_DWORD *)this + 4) - 1;
    if (v8 <= 3)
    {
      double v9 = off_1E527FC70[v8];
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v10 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          double v23 = *(double *)&v9;
          _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "(renderMode %s)", buf, 0xCu);
        }
      }
    }
    if (*((unsigned char *)this + 13))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "(invertsShape true)", buf, 2u);
        }
      }
    }
    if (*((_DWORD *)this + 5))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float32x2_t v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *((_DWORD *)this + 5);
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v23) = v13;
          _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "(foregroundColor #%08x)", buf, 8u);
        }
      }
    }
    if (*((float *)this + 7) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v15 = *((float *)this + 7);
          *(_DWORD *)long long buf = 134217984;
          double v23 = v15;
          _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "(offset %g)", buf, 0xCu);
        }
      }
    }
    if (*((float *)this + 8) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v17 = *((float *)this + 8);
          *(_DWORD *)long long buf = 134217984;
          double v23 = v17;
          _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "(sharpness %g)", buf, 0xCu);
        }
      }
    }
    if (*((float *)this + 6) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v19 = *((float *)this + 6);
          *(_DWORD *)long long buf = 134217984;
          double v23 = v19;
          _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "(lineWidth %g)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    size_t v20 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v21 = ")";
LABEL_40:
      _os_log_impl(&dword_184668000, v20, OS_LOG_TYPE_DEFAULT, v21, buf, 2u);
    }
  }
}

void *CA::Render::DistanceFieldLayer::encode(CA::Render::DistanceFieldLayer *this, CA::Render::Encoder *a2)
{
  uint64_t result = CA::Render::Object::encode(this, a2);
  int v5 = *((_DWORD *)this + 4);
  BOOL v6 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)(v6 + 1) > *((void *)a2 + 5))
  {
    uint64_t result = CA::Render::Encoder::grow(a2, 1);
    BOOL v6 = (unsigned char *)*((void *)a2 + 4);
  }
  *((void *)a2 + 4) = v6 + 1;
  *BOOL v6 = v5;
  int v7 = *((_DWORD *)this + 5);
  unsigned int v8 = (_DWORD *)*((void *)a2 + 4);
  if ((unint64_t)(v8 + 1) > *((void *)a2 + 5))
  {
    uint64_t result = CA::Render::Encoder::grow(a2, 4);
    unsigned int v8 = (_DWORD *)*((void *)a2 + 4);
  }
  _DWORD *v8 = v7;
  uint64_t v9 = *((void *)a2 + 4);
  unint64_t v10 = *((void *)a2 + 5);
  uint64_t v11 = v9 + 4;
  *((void *)a2 + 4) = v9 + 4;
  if (v9 + 16 > v10)
  {
    uint64_t result = CA::Render::Encoder::grow(a2, 12);
    uint64_t v11 = *((void *)a2 + 4);
  }
  uint64_t v12 = *((void *)this + 3);
  *(_DWORD *)(v11 + 8) = *((_DWORD *)this + 8);
  *(void *)uint64_t v11 = v12;
  *((void *)a2 + 4) += 12;
  return result;
}

void CA::Render::DistanceFieldLayer::~DistanceFieldLayer(CA::Render::DistanceFieldLayer *this, const CA::Render::Object *a2)
{
  --dword_1EB2ADDF8;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  --dword_1EB2ADDF8;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
}

CA::Render::DistanceFieldLayer *CA::Render::DistanceFieldLayer::DistanceFieldLayer(CA::Render::DistanceFieldLayer *this, CA::Render::Decoder *a2)
{
  *(void *)this = &unk_1ED02F670;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0xC;
  ++dword_1EB2ADDF8;
  *(void *)this = &unk_1ED02E9F8;
  unsigned int v4 = CA::Render::Decoder::decode_int8(a2);
  if (v4 >= 5)
  {
    CA::Render::Decoder::set_fatal_error(a2, "%s - enum %u out of range of %u", "decode_int8_enum", v4, 5);
    unsigned int v4 = 0;
  }
  *((_DWORD *)this + 4) = v4;
  *((_DWORD *)this + 5) = CA::Render::Decoder::decode_int32(a2);
  CA::Render::Decoder::decode_bytes(a2, (char *)this + 24, 0xCuLL);
  return this;
}

CFStringRef CACreateDateStringFromHostContinuousTime(unint64_t a1, const __CFString *a2)
{
  double v3 = CATimeWithHostTime(a1);
  uint64_t v4 = mach_continuous_time();
  double v5 = v3 - CATimeWithHostTime(v4);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v7 = CFDateCreate(0, v5 + Current);
  if (CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::once[0] != -1) {
    dispatch_once(CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::once, &__block_literal_global_18401);
  }
  unsigned int v8 = pthread_getspecific(CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::thread_slot);
  if (!v8)
  {
    CFLocaleRef v9 = CFLocaleCreate(0, @"en_US_POSIX");
    unsigned int v8 = CFDateFormatterCreate(0, v9, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
    CFRelease(v9);
    pthread_setspecific(CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::thread_slot, v8);
  }
  if (a2) {
    CFStringRef v10 = a2;
  }
  else {
    CFStringRef v10 = @"HH:mm:ss.SSS";
  }
  CFDateFormatterSetFormat((CFDateFormatterRef)v8, v10);
  CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)v8, v7);
  CFRelease(v7);
  return StringWithDate;
}

uint64_t ___ZL28CACreateDateStringFromCFDatePK8__CFDatePK10__CFString_block_invoke()
{
  v1[1] = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  uint64_t result = pthread_key_create(v1, (void (__cdecl *)(void *))_ZZZL28CACreateDateStringFromCFDatePK8__CFDatePK10__CFStringEUb_EN3__08__invokeEPv);
  CACreateDateStringFromCFDate(__CFDate const*,__CFString const*)::thread_slot = v1[0];
  return result;
}

void _ZZZL28CACreateDateStringFromCFDatePK8__CFDatePK10__CFStringEUb_EN3__08__invokeEPv(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void CA::CG::StrokeArc::draw_shape(CA::CG::StrokeArc *this, CA::CG::Renderer *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 112;
  CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 14));
  double v6 = v5;
  if (v5 >= 0.001)
  {
    double v7 = v5 * 0.5;
    if (v5 * 0.5 > *((double *)this + 21)
      || (unsigned int v8 = (void *)*((void *)a2 + 1), !(*(unsigned int (**)(void *, uint64_t))(*v8 + 184))(v8, 9))|| ((v10 = (float32x2_t *)v8[2], v11 = v10[60].u8[0], v11 != 12)? (v12 = (v11 - 1) >= 0x19): (v12 = 1), v12))
    {
      Mutable = CGPathCreateMutable();
      CGPathAddArc(Mutable, 0, *((CGFloat *)this + 19), *((CGFloat *)this + 20), *((CGFloat *)this + 21), *((CGFloat *)this + 22), *((double *)this + 23) + *((double *)this + 22), *((double *)this + 23) < 0.0);
      CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)v4);
      CGPathRelease(Mutable);
    }
    else
    {
      uint64_t v14 = 88;
      if ((*((_DWORD *)this + 25) & 4) == 0) {
        uint64_t v14 = 32;
      }
      float64x2_t v15 = *(float64x2_t *)((char *)a2 + v14);
      if ((*((_DWORD *)this + 25) & 4) != 0) {
        unsigned int v16 = (float64x2_t *)((char *)a2 + 88);
      }
      else {
        unsigned int v16 = (float64x2_t *)((char *)a2 + 32);
      }
      float64x2_t v17 = v16[1];
      float64x2_t v18 = v16[2];
      float64x2_t v59 = v15;
      float64x2_t v60 = v17;
      float64x2_t v61 = v18;
      double v19 = vaddvq_f64(vmulq_f64(v15, v15));
      double v20 = vaddvq_f64(vmulq_f64(v17, v17));
      BOOL v21 = v19 != 1.0;
      if (v20 != 1.0) {
        BOOL v21 = 1;
      }
      double v22 = sqrt(v19);
      double v23 = sqrt(v20);
      if (v21)
      {
        double v20 = v23;
        double v19 = v22;
      }
      if (v19 >= v20) {
        double v24 = v20;
      }
      else {
        double v24 = v19;
      }
      double v25 = *((double *)this + 23);
      if (v25 < 0.0)
      {
        float64x2_t v59 = vnegq_f64(v15);
        float64x2_t v60 = vnegq_f64(v17);
      }
      double v26 = *((double *)this + 22);
      if (v26 != 0.0) {
        CA::Mat2Impl::mat2_rotate(&v59, v9, v26);
      }
      double v27 = fabs(v25);
      if (v27 <= 6.28318531) {
        double v28 = v27;
      }
      else {
        double v28 = 6.28318531;
      }
      double v29 = -v28;
      if (v25 >= 0.0) {
        double v29 = v28;
      }
      double v30 = -0.5;
      int v31 = vcvtpd_s64_f64(v28 * 1.90985932 + 0.6);
      if (v29 > 0.0) {
        double v30 = 0.5;
      }
      if (v31 >= 12) {
        int v32 = 12;
      }
      else {
        int v32 = v31;
      }
      double v33 = *((double *)this + 21);
      double v34 = v33 + v7;
      if ((v32 & 0x80000000) == 0)
      {
        float32x2_t v35 = v10[1];
        double v36 = (v34 + 0.5 / v24) * 1.15470054;
        double v37 = v33 - (v7 + 0.5 / v24);
        float v38 = 0.5 / v24 * 1.15470054 / v34 + 1.15470054;
        double v39 = v38;
        double v40 = dbl_1849985A0[v29 > 0.0];
        float v41 = v37 * v39 / v36;
        double v42 = v41;
        uint64_t v43 = (v32 + 1);
        float64x2_t v44 = v59;
        float64x2_t v45 = v60;
        float64x2_t v46 = v61;
        float32x2_t v47 = (float32x2_t *)(v8[15] + 48);
        double v48 = 0.965925826;
        do
        {
          v47[-6] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(v46, v44, v48 * v37), v45, v40 * v37));
          v47[-5] = (float32x2_t)0x3F80000000000000;
          float32_t v49 = v48 * v42;
          float32_t v50 = v40 * v42;
          v47[-4].f32[0] = v49;
          v47[-4].f32[1] = v50;
          v47[-2] = v35;
          *float32x2_t v47 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(v46, v44, v48 * v36), v45, v40 * v36));
          v47[1] = (float32x2_t)0x3F80000000000000;
          float32_t v51 = v48 * v39;
          float32_t v52 = v40 * v39;
          v47[2].f32[0] = v51;
          v47[2].f32[1] = v52;
          v47[4] = v35;
          double v53 = v40 * v30;
          double v40 = v40 * 0.866025404 + v48 * v30;
          double v48 = -(v53 - v48 * 0.866025404);
          v47 += 12;
          --v43;
        }
        while (v43);
        CFStringRef v10 = (float32x2_t *)v8[2];
      }
      __double2 v54 = __sincos_stret(v29);
      float sinval = v54.__sinval;
      float cosval = v54.__cosval;
      *(float *)double v62 = sinval;
      *(float *)&v62[1] = -cosval;
      float v58 = 0.0;
      if (v28 >= 3.14159265) {
        float v58 = 1.0;
      }
      float v57 = 1.0 - v6 / v34;
      *(float *)&float64x2_t v62[2] = v57;
      *(float *)&v62[3] = v58;
      v10[2].i8[0] = 82;
      (*(void (**)(void *, void, uint64_t, uint64_t, _DWORD *))(*v8 + 1000))(v8, 0, 4, 1, v62);
      (*(void (**)(void *, uint64_t, void, void, void, void, void, void))(*v8 + 280))(v8, 2, (2 * v32 + 2), 0, v8[15], 0, (2 * v32 + 2), 0);
    }
  }
}

uint64_t CA::CG::StrokeArc::debug_color(CA::CG::StrokeArc *this)
{
  return 3695562720;
}

double *CA::CG::StrokeArc::compute_dod(CA::CG::StrokeArc *this, float64x2_t *a2)
{
  uint64_t v4 = *((uint64_t *)this + 21);
  *a2 = vsubq_f64(*(float64x2_t *)((char *)this + 152), (float64x2_t)vdupq_lane_s64(v4, 0));
  a2[1].f64[0] = *(double *)&v4 + *(double *)&v4;
  a2[1].f64[1] = *(double *)&v4 + *(double *)&v4;
  if ((*((unsigned char *)this + 100) & 4) == 0) {
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  }
  double v5 = -CA::CG::stroke_radius((uint64_t)this + 112, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  double v7 = -v6;

  return CA::BoundsImpl::inset_point(a2->f64, v5, v7);
}

void CA::CG::StrokeArc::~StrokeArc(CA::CG::StrokeArc *this)
{
  *(void *)this = &unk_1ED020970;
  if (*((void *)this + 16)) {
    CGDashRelease();
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED020970;
  if (*((void *)this + 16)) {
    CGDashRelease();
  }

  CA::CG::DrawOp::~DrawOp(this);
}

double CA_CFDoubleValue(const void *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
  {
    double result = 0.0;
    if ((const void *)*MEMORY[0x1E4F1CFC8] != a1) {
      return 1.0;
    }
  }
  else
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    double result = 0.0;
    if (v2 == TypeID)
    {
      v5[0] = 0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, v5);
      return *(double *)v5;
    }
  }
  return result;
}

BOOL CA_CFDictionaryGetBool(const __CFDictionary *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }

  return CA_CFBoolValue(Value);
}

BOOL CA_CFDictionaryGetBoolIfExists(const __CFDictionary *a1, BOOL *a2)
{
  Value = CFDictionaryGetValue(a1, @"DefaultColorSpaceIsSRGB");
  uint64_t v4 = Value;
  if (Value) {
    *a2 = CA_CFBoolValue(Value);
  }
  return v4 != 0;
}

double CA_CFDictionaryGetDouble(const __CFDictionary *a1, const void *a2)
{
  if (!a1) {
    return 0.0;
  }
  Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0.0;
  }

  return CA_CFDoubleValue(Value);
}

const void *CA_CFDictionaryGetArray(const __CFDictionary *a1, const void *a2)
{
  Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  double v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFArrayGetTypeID()) {
    return 0;
  }
  return v3;
}

const void *CA_CFDictionaryGetString(const __CFDictionary *a1, const void *a2)
{
  Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  double v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID()) {
    return 0;
  }
  return v3;
}

const void *CA_CFDictionaryGetDictionary(const __CFDictionary *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  double v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  return v3;
}

void CA_CFDictionarySetFloat(__CFDictionary *a1, const void *a2, float a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void CA_CFDictionarySetDouble(__CFDictionary *a1, const void *a2, double a3)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  *(double *)double v6 = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, v6);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void CA_CFDictionarySetCString(__CFDictionary *a1, const void *a2, char *cStr)
{
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFDictionarySetValue(a1, a2, v5);

  CFRelease(v5);
}

const void *CA_CFArrayGetDictionary(const __CFArray *a1, CFIndex a2)
{
  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  if (!ValueAtIndex) {
    return 0;
  }
  double v3 = ValueAtIndex;
  CFTypeID v4 = CFGetTypeID(ValueAtIndex);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  return v3;
}

void CA_CFArrayAppendDouble(__CFArray *a1, double a2)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  *(double *)CFTypeID v4 = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, v4);
  CFArrayAppendValue(a1, v3);
  CFRelease(v3);
}

char *CA_CFDataWriteTempFile(const __CFData *a1, const char *a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  BytePtr = CFDataGetBytePtr(a1);
  size_t Length = CFDataGetLength(a1);
  double result = 0;
  if (BytePtr && Length)
  {
    bzero(v15, 0x400uLL);
    if (getuid())
    {
      double result = (char *)confstr(65537, v15, 0x400uLL);
      if (!result) {
        return result;
      }
    }
    else
    {
      strcpy(v15, "/tmp/");
    }
    BOOL v12 = 0;
    asprintf(&v12, "%s%s", v15, a2);
    int v9 = mkstemps(v12, a3);
    if (v9 < 0)
    {
      free(v12);
      return 0;
    }
    else
    {
      int v10 = v9;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v11 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          uint64_t v14 = v12;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "Writing to '%s'", buf, 0xCu);
        }
      }
      fchmod(v10, 0x1A4u);
      write(v10, BytePtr, Length);
      close(v10);
      return v12;
    }
  }
  return result;
}

pthread_t x_thread_create(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(&v12, 0, sizeof(v12));
  pthread_t v11 = 0;
  double v6 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *double v6 = a1;
  v6[1] = a2;
  pthread_attr_init(&v12);
  pthread_attr_setscope(&v12, 1);
  pthread_attr_setdetachstate(&v12, 2);
  size_t v10 = 0;
  pthread_attr_getstacksize(&v12, &v10);
  if (a3 && !(v10 >> 20)) {
    pthread_attr_setstacksize(&v12, 0x100000uLL);
  }
  int v7 = pthread_create(&v11, &v12, (void *(__cdecl *)(void *))thread_fun, v6);
  pthread_attr_destroy(&v12);
  if (v7)
  {
    int v9 = strerror(v7);
    x_log_crash("Failed to create thread (%d) - %s", v7, v9);
    abort();
  }
  return v11;
}

uint64_t thread_fun(void (**a1)(uint64_t))
{
  CFTypeID v2 = *a1;
  int8x8_t v1 = a1[1];
  free(a1);
  v2((uint64_t)v1);
  return 0;
}

Class ___Z22CACarPlayMarshalCreatev_block_invoke()
{
  dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 1);
  Class result = NSClassFromString(&cfstr_Carlayerproper.isa);
  CACarPlayMarshalCreate(void)::cls = (uint64_t)result;
  return result;
}

__IOSurface *CA::CG::IOSurfaceDrawable::is_purged_(CA::CG::IOSurfaceDrawable *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  Class result = (__IOSurface *)*((void *)this + 12);
  if (result)
  {
    uint32_t oldState = 0;
    return (__IOSurface *)(!IOSurfaceSetPurgeable(result, 3u, &oldState) && oldState == 2);
  }
  return result;
}

uint64_t CA::CG::IOSurfaceDrawable::set_volatile_(CA::Render **this, __IOSurface *a2)
{
  return CA::Render::set_iosurface_volatile(this[12], a2);
}

void CA::CG::IOSurfaceDrawable::retain_shared_texture(os_unfair_lock_s *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = this + 3;
  os_unfair_lock_lock(this + 3);
  if (LOBYTE(this[17]._os_unfair_lock_opaque))
  {
    uint64_t v5 = 0;
  }
  else
  {
    CA::CG::IOSurfaceDrawable::ensure_shared_surface((uint64_t)this);
    uint64_t v5 = *(void *)&this[26]._os_unfair_lock_opaque;
    if (v5)
    {
      double v6 = (atomic_uint *)(v5 + 8);
      if (!atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u))
      {
        uint64_t v5 = 0;
        atomic_fetch_add(v6, 0xFFFFFFFF);
      }
    }
  }
  *a2 = v5;

  os_unfair_lock_unlock(v4);
}

uint64_t CA::CG::IOSurfaceDrawable::ensure_shared_surface(uint64_t this)
{
  if (!*(void *)(this + 104))
  {
    uint64_t v1 = this;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    CFNumberRef v3 = (CA::Render::Texture *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
    uint64_t v4 = v3;
    if (v3) {
      CFNumberRef v3 = (CA::Render::Texture *)CA::Render::Surface::Surface((uint64_t)v3, *(IOSurfaceRef *)(v1 + 96), *(_DWORD *)(v1 + 16), 1, 0, 0, 0);
    }
    CA::Render::Texture::set_colorspace(v3, *(CGColorSpace **)(v1 + 24));
    this = *(void *)(v1 + 104);
    *(void *)(v1 + 104) = v4;
    if (this && atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)this + 16);
      return v5();
    }
  }
  return this;
}

BOOL CA::CG::IOSurfaceDrawable::needs_gpu(CA::CG::IOSurfaceDrawable *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int IsTiled = IOSurfaceIsTiled();
  if (IsTiled && (CA::CG::IOSurfaceDrawable::needs_gpu(void)const::_before & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      CFTypeID v2 = x_log_category_cg;
      if (os_log_type_enabled((os_log_t)x_log_category_cg, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "CoreAnimation: sw renderer doesn't support tiling\n", v4, 2u);
      }
    }
    CA::CG::IOSurfaceDrawable::needs_gpu(void)const::_before = 1;
  }
  return IsTiled != 0;
}

uint64_t CA::CG::AccelDrawable::texture(CA::CG::AccelDrawable *this)
{
  return 0;
}

uint64_t CA::CG::IOSurfaceDrawable::surface(CA::CG::IOSurfaceDrawable *this)
{
  return *((void *)this + 12);
}

void CA::CG::IOSurfaceDrawable::~IOSurfaceDrawable(CA::CG::IOSurfaceDrawable *this)
{
  *(void *)this = &unk_1ED029078;
  CFTypeID v2 = (atomic_uint *)*((void *)this + 13);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)this = &unk_1ED028088;
  if (!*((unsigned char *)this + 70)) {
    __assert_rtn("~AccelDrawable", "cg-accel-drawable.cpp", 62, "_destroyed");
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;

  *(void *)this = &unk_1ED029078;
  CFTypeID v2 = (atomic_uint *)*((void *)this + 13);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)this = &unk_1ED028088;
  if (!*((unsigned char *)this + 70)) {
    __assert_rtn("~AccelDrawable", "cg-accel-drawable.cpp", 62, "_destroyed");
  }
}

void CA::CG::IOSurfaceDrawable::destroy(CGColorSpaceRef *this)
{
  CA::CG::AccelDrawable::destroy(this);
  CGColorSpaceRef v2 = this[12];

  CFRelease(v2);
}

CGImageRef CA::CG::IOSurfaceDrawable::copy_cgimage(CA::CG::IOSurfaceDrawable *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    CA::CG::Queue::flush(v2, 3, 1);
  }
  CFNumberRef v3 = (os_unfair_lock_s *)((char *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)this + 3);
  if (!*((unsigned char *)this + 68))
  {
    if (!*((void *)this + 10))
    {
      uint64_t v5 = *((unsigned int *)this + 4);
      os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      int v7 = malloc_type_zone_malloc(malloc_zone, 0x38uLL, 0x8BB15036uLL);
      if (v7)
      {
        uint64_t v8 = *((void *)this + 9);
        if (v8
          || (uint64_t v8 = (*(uint64_t (**)(CA::CG::IOSurfaceDrawable *))(*(void *)this + 72))(this),
              (*((void *)this + 9) = v8) != 0))
        {
          int v9 = *(_DWORD *)(v8 + 48);
        }
        else
        {
          int v9 = 0;
        }
        CA::CG::AccelDataProvider::AccelDataProvider((uint64_t)v7, (uint64_t)this, v9);
        void *v7 = &unk_1ED029850;
      }
      size_t AllocSize = IOSurfaceGetAllocSize(*((IOSurfaceRef *)this + 12));
      Direct = CGDataProviderCreateDirect(v7, AllocSize, &CA::CG::AccelDataProvider::callbacks(void)::vtable);
      size_t v12 = *((unsigned int *)this + 13);
      size_t v13 = *((unsigned int *)this + 14);
      if (v5 == 9)
      {
        size_t BytesPerRow = IOSurfaceGetBytesPerRow(*((IOSurfaceRef *)this + 12));
        *(_OWORD *)decode = xmmword_184997D50;
        CGImageRef v15 = CGImageMaskCreate(v12, v13, 8uLL, 8uLL, BytesPerRow, Direct, decode, 1);
      }
      else
      {
        if (v5 > 0x23)
        {
          size_t v16 = 0;
          size_t v17 = 0;
        }
        else
        {
          size_t v16 = dword_184999500[v5];
          size_t v17 = dword_1849993D8[v5];
        }
        size_t v18 = IOSurfaceGetBytesPerRow(*((IOSurfaceRef *)this + 12));
        CGImageRef v15 = CGImageCreate(v12, v13, v16, v17, v18, *((CGColorSpaceRef *)this + 3), *((_DWORD *)this + 8), Direct, 0, 1, kCGRenderingIntentDefault);
      }
      double v19 = v15;
      CGDataProviderRelease(Direct);
      if (v19)
      {
        CA::CG::AccelDataProvider::set_image((CA::CG::AccelDataProvider *)v7, v19);
        os_unfair_lock_lock((os_unfair_lock_t)this + 3);
        if (!*((void *)this + 10))
        {
          *((void *)this + 1CASetDebugMessage("", 0) = v19;
          goto LABEL_22;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
        CGImageRelease(v19);
      }
      os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    }
LABEL_22:
    CGImageRef v4 = CGImageRetain(*((CGImageRef *)this + 10));
    goto LABEL_23;
  }
  CGImageRef v4 = 0;
LABEL_23:
  os_unfair_lock_unlock(v3);
  return v4;
}

CGImageRef CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface(CA::CG::IOSurfaceDrawable *this)
{
  if (*((_DWORD *)this + 4) == 9)
  {
    return CA::CG::IOSurfaceDrawable::copy_cgimage(this);
  }
  else
  {
    uint64_t v3 = *((void *)this + 9);
    if (v3) {
      CA::CG::Queue::flush(v3, 3, 1);
    }
    CGImageRef v4 = (os_unfair_lock_s *)((char *)this + 12);
    os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    if (*((unsigned char *)this + 68))
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = CACreateIOSurfaceBackedCGImage(*((__IOSurface **)this + 12), *((unsigned int *)this + 8), *((void *)this + 3));
      CGImageSetProperty();
    }
    os_unfair_lock_unlock(v4);
    return v5;
  }
}

__CFBundle *init_gpu_access(void)
{
  gpu_access_override = 0;
  Class result = CFBundleGetMainBundle();
  if (result)
  {
    Class result = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(result, @"CAProcessCanAccessGPU");
    if (result)
    {
      gpu_access_override = 1;
      Class result = (__CFBundle *)CA_CFBoolValue(result);
      gpu_access_allowed = (char)result;
    }
  }
  return result;
}

uint64_t CA::OGL::anonymous namespace'::RotateTransition::source_requirement()
{
  return 3;
}

void CA::OGL::anonymous namespace'::RotateTransition::render(uint64_t a1, uint64_t a2, CA::OGL::Context *a3, float64x2_t *a4, CA::Transform *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(unsigned char *)(*((void *)a3 + 2) + 481) |= 1u;
  __asm { FMOV            V4.2D, #1.0 }
  if (a6)
  {
    _D0.i32[0] = v35;
    __asm { FCVT            H0, S0 }
    *(int16x4_t *)(*((void *)a3 + 2) + 8) = vdup_lane_s16(_D0, 0);
    uint64_t v45 = 16;
    long long v36 = v19;
    long long v37 = v20;
    long long v38 = v21;
    long long v39 = v22;
    long long v40 = v23;
    long long v41 = v24;
    long long v42 = v25;
    long long v43 = v26;
    long long v44 = _Q4;
    long long v18 = _Q4;
    CA::OGL::fill_surface_rect(a3, a6, a5, (uint64_t)&v36, *a4, a4[1]);
    _Q4 = v18;
  }
  if (a7)
  {
    _D0.i32[0] = HIDWORD(v35);
    __asm { FCVT            H0, S0 }
    *(int16x4_t *)(*((void *)a3 + 2) + 8) = vdup_lane_s16(_D0, 0);
    uint64_t v45 = 16;
    long long v36 = v27;
    long long v37 = v28;
    long long v38 = v29;
    long long v39 = v30;
    long long v40 = v31;
    long long v41 = v32;
    long long v42 = v33;
    long long v43 = v34;
    long long v44 = _Q4;
    CA::OGL::fill_surface_rect(a3, a7, a5, (uint64_t)&v36, *a4, a4[1]);
  }
  *(unsigned char *)(*((void *)a3 + 2) + 481) &= ~1u;
}

void CA::OGL::anonymous namespace'::RotateTransition::set_state(uint64_t a1, uint64_t a2, double *a3, float64x2_t *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a2 + 20);
  {
    double v7 = 3.14159265;
  }
  {
    double v7 = -3.14159265;
  }
  else
  {
  }
  float v8 = *(float *)(a2 + 48);
  double v9 = *a3 + a3[2] * 0.5;
  double v10 = a3[1] + a3[3] * 0.5;
  float64x2_t v11 = *a4;
  float64x2_t v12 = a4[1];
  float64x2_t v13 = a4[2];
  float64x2_t v14 = a4[3];
  *(float64x2_t *)a1 = *a4;
  *(float64x2_t *)(a1 + 16) = v12;
  *(float64x2_t *)(a1 + 32) = v13;
  *(float64x2_t *)(a1 + 48) = v14;
  float64x2_t v15 = a4[4];
  float64x2_t v16 = a4[5];
  float64x2_t v17 = a4[6];
  float64x2_t v18 = a4[7];
  *(float64x2_t *)(a1 + 64) = v15;
  *(float64x2_t *)(a1 + 8CASetDebugMessage("", 0) = v16;
  double v43 = v9;
  float64x2_t v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
  float64x2_t v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0);
  double v46 = v10;
  *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v17, v11, v9), v13, v10), (float64x2_t)0, v15);
  *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v18, v12, v9), v14, v10), (float64x2_t)0, v16);
  long long v51 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = xmmword_184997D50;
  long long v57 = 0u;
  long long v58 = xmmword_184997D60;
  __double2 v22 = __sincos_stret(v7 * v8);
  *(double *)v21.i64 = v22.__cosval;
  *(double *)v20.i64 = v22.__sinval;
  if (fabs(v22.__sinval) >= 0.0000001)
  {
    if (fabs(v22.__cosval) < 0.0000001)
    {
      v21.i64[0] = 1.0;
      v24.f64[0] = NAN;
      v24.f64[1] = NAN;
      v20.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v24), v21, v20).u64[0];
      v21.i64[0] = 0;
    }
  }
  else
  {
    v20.i64[0] = 1.0;
    v23.f64[0] = NAN;
    v23.f64[1] = NAN;
    v21.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v23), v20, v21).u64[0];
    v20.i64[0] = 0;
  }
  double v49 = *(double *)v21.i64;
  uint64_t v50 = v20.i64[0];
  double v52 = -*(double *)v20.i64;
  uint64_t v53 = v21.i64[0];
  CA::Mat4Impl::mat4_concat((float64x2_t *)a1, &v49, (const double *)a1, v19);
  float64x2_t v45 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v43), 0);
  float64x2_t v25 = vmlsq_lane_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)a1, v43, 0);
  float64x2_t v26 = vmlsq_lane_f64(*(float64x2_t *)(a1 + 112), *(float64x2_t *)(a1 + 16), v43, 0);
  float64x2_t v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v46), 0);
  float64x2_t v27 = vmlaq_f64(vmlsq_lane_f64(v26, *(float64x2_t *)(a1 + 48), v46, 0), (float64x2_t)0, *(float64x2_t *)(a1 + 80));
  *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlsq_lane_f64(v25, *(float64x2_t *)(a1 + 32), v46, 0), (float64x2_t)0, *(float64x2_t *)(a1 + 64));
  *(float64x2_t *)(a1 + 112) = v27;
  float64x2_t v28 = *a4;
  float64x2_t v29 = a4[1];
  float64x2_t v30 = a4[2];
  float64x2_t v31 = a4[3];
  *(float64x2_t *)(a1 + 128) = *a4;
  *(float64x2_t *)(a1 + 144) = v29;
  *(float64x2_t *)(a1 + 16CASetDebugMessage("", 0) = v30;
  *(float64x2_t *)(a1 + 176) = v31;
  float64x2_t v32 = a4[4];
  float64x2_t v33 = a4[5];
  float64x2_t v34 = a4[6];
  float64x2_t v35 = a4[7];
  *(float64x2_t *)(a1 + 192) = v32;
  *(float64x2_t *)(a1 + 208) = v33;
  *(float64x2_t *)(a1 + 224) = vmlaq_f64(vmlaq_f64(vmlaq_f64(v34, v48, v28), v47, v30), (float64x2_t)0, v32);
  *(float64x2_t *)(a1 + 24CASetDebugMessage("", 0) = vmlaq_f64(vmlaq_f64(vmlaq_f64(v35, v48, v29), v47, v31), (float64x2_t)0, v33);
  long long v51 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = xmmword_184997D50;
  long long v57 = 0u;
  long long v58 = xmmword_184997D60;
  __double2 v39 = __sincos_stret(v7 * v8 - v7);
  *(double *)v38.i64 = v39.__cosval;
  *(double *)v37.i64 = v39.__sinval;
  if (fabs(v39.__sinval) >= 0.0000001)
  {
    if (fabs(v39.__cosval) < 0.0000001)
    {
      v38.i64[0] = 1.0;
      v41.f64[0] = NAN;
      v41.f64[1] = NAN;
      v37.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v41), v38, v37).u64[0];
      v38.i64[0] = 0;
    }
  }
  else
  {
    v37.i64[0] = 1.0;
    v40.f64[0] = NAN;
    v40.f64[1] = NAN;
    v38.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v40), v37, v38).u64[0];
    v37.i64[0] = 0;
  }
  double v49 = *(double *)v38.i64;
  uint64_t v50 = v37.i64[0];
  double v52 = -*(double *)v37.i64;
  uint64_t v53 = v38.i64[0];
  CA::Mat4Impl::mat4_concat((float64x2_t *)(a1 + 128), &v49, (const double *)(a1 + 128), v36);
  float64x2_t v42 = vmlaq_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a1 + 240), v45, *(float64x2_t *)(a1 + 144)), v44, *(float64x2_t *)(a1 + 176)), (float64x2_t)0, *(float64x2_t *)(a1 + 208));
  *(float64x2_t *)(a1 + 224) = vmlaq_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a1 + 224), v45, *(float64x2_t *)(a1 + 128)), v44, *(float64x2_t *)(a1 + 160)), (float64x2_t)0, *(float64x2_t *)(a1 + 192));
  *(float64x2_t *)(a1 + 24CASetDebugMessage("", 0) = v42;
  *(float *)(a1 + 256) = 1.0 - v8;
  *(float *)(a1 + 26CASetDebugMessage("", 0) = v8;
}

__n128 CA::OGL::anonymous namespace'::RotateTransition::ROI(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, __n128 *a7)
{
  *a6 = *a3;
  a6[1] = a3[1];
  *a7 = *a3;
  __n128 result = a3[1];
  a7[1] = result;
  return result;
}

void CA::OGL::anonymous namespace'::RotateTransition::DOD(uint64_t a1@<X1>, double *a2@<X2>, float64x2_t *a3@<X3>, _OWORD *a4@<X4>, float64x2_t *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  long long v9 = a4[1];
  *(_OWORD *)a6 = *a4;
  *(_OWORD *)(a6 + 16) = v9;
  float64x2_t v10 = a5[1];
  float64x2_t v20 = *a5;
  float64x2_t v21 = v10;
  CA::Mat4Impl::mat4_apply_to_rect(v22, (int8x16_t *)a6, v11);
  CA::Mat4Impl::mat4_apply_to_rect(v23, (int8x16_t *)&v20, v12);
  float64x2_t v13 = *(float64x2_t *)(a6 + 16);
  float64x2_t v14 = v21;
  int64x2_t v15 = vclezq_f64(v13);
  int64x2_t v16 = vclezq_f64(v21);
  int32x2_t v17 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v16, v15), (int8x16_t)vzip2q_s64(v16, v15))));
  if (v17.i8[4])
  {
    if (v17.i8[0]) {
      return;
    }
    float64x2_t v18 = v20;
  }
  else
  {
    if (v17.i8[0]) {
      return;
    }
    float64x2_t v19 = vaddq_f64(*(float64x2_t *)a6, v13);
    float64x2_t v18 = vminnmq_f64(*(float64x2_t *)a6, v20);
    float64x2_t v14 = vsubq_f64(vmaxnmq_f64(v19, vaddq_f64(v20, v21)), v18);
  }
  *(float64x2_t *)a6 = v18;
  *(float64x2_t *)(a6 + 16) = v14;
}

uint64_t CA::CG::IOSurfaceContext::get_gpu_registry_id()
{
  uint64_t Info = CGContextDelegateGetInfo();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)Info + 16))(Info);
  if (result) {
    return *(void *)(result + 200);
  }
  return result;
}

uint64_t CA::CG::IOSurfaceContext::set_gpu_registry_id(uint64_t a1, uint64_t a2)
{
  uint64_t Info = CGContextDelegateGetInfo();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)Info + 16))(Info);
  if (result) {
    *(void *)(result + 20CASetDebugMessage("", 0) = a2;
  }
  return result;
}

uint64_t CA::CG::IOSurfaceContext::get_surface_limits(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = MEMORY[0x185323680](*MEMORY[0x1E4F2F2C0]);
  unint64_t v6 = MEMORY[0x185323680](*MEMORY[0x1E4F2F0E8]);
  uint64_t v7 = 0x2000;
  if (v6 < 0x2000) {
    uint64_t v7 = v6;
  }
  if (a2)
  {
    uint64_t v8 = 0x2000;
    if (v5 < 0x2000) {
      uint64_t v8 = v5;
    }
    *a2 = v8;
  }
  if (a3) {
    *a3 = v7;
  }
  return 1;
}

CGImageRef CA::CG::IOSurfaceContext::create_image_by_reference()
{
  char v0 = *(CA::CG::IOSurfaceDrawable **)(CGContextDelegateGetInfo() + 336);

  return CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface(v0);
}

CGImageRef CA::CG::IOSurfaceContext::create_image()
{
  char v0 = *(CA::CG::IOSurfaceDrawable **)(CGContextDelegateGetInfo() + 336);
  unsigned int v1 = *((_DWORD *)v0 + 4);
  if (v1 <= 0x23 && ((0x1FFFFFF2FuLL >> v1) & 1) == 0)
  {
    return CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface(v0);
  }
  else
  {
    return CA::CG::IOSurfaceDrawable::copy_cgimage(v0);
  }
}

uint64_t CA::CG::IOSurfaceContext::get_display_mask()
{
  return 0xFFFFFFFFLL;
}

void CA::AttrList::append_description(CA::AttrList *this, CFMutableStringRef theString)
{
  if (this)
  {
    uint64_t v3 = this;
    char v4 = 1;
    do
    {
      if ((v4 & 1) == 0) {
        CFStringAppend(theString, @"; ");
      }
      String = CAAtomGetString(*((_DWORD *)v3 + 2) & 0xFFFFFF);
      CFStringAppendFormat(theString, 0, @"%@ = ", String);
      switch(*((unsigned char *)v3 + 11) & 0x7F)
      {
        case 1:
          unint64_t v6 = (__CFString *)**((void **)v3 + 2);
          goto LABEL_17;
        case 2:
        case 3:
          unint64_t v6 = (__CFString *)*((void *)v3 + 2);
          goto LABEL_17;
        case 4:
          uint64_t v7 = *((void *)v3 + 2);
          if (*(unsigned char *)(v7 + 8)) {
            id Weak = (__CFString *)objc_loadWeak((id *)v7);
          }
          else {
            id Weak = *(__CFString **)v7;
          }
          float64x2_t v12 = Weak;
          goto LABEL_18;
        case 5:
          CFStringAppendFormat(theString, 0, @"^%p", *((void *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 6:
          unint64_t v6 = @"YES";
          if (!*((void *)v3 + 2)) {
            unint64_t v6 = @"NO";
          }
LABEL_17:
          float64x2_t v12 = v6;
LABEL_18:
          CFStringAppendFormat(theString, 0, @"%@", v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 7:
        case 9:
        case 0xB:
        case 0xD:
          CFStringAppendFormat(theString, 0, @"%ld", *((void *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 8:
        case 0xA:
        case 0xC:
        case 0xE:
          CFStringAppendFormat(theString, 0, @"%lu", *((void *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0xF:
          CFStringAppendFormat(theString, 0, @"%lld", *((void *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x10:
          CFStringAppendFormat(theString, 0, @"%llu", *((void *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x11:
        case 0x12:
          CFStringAppendFormat(theString, 0, @"%g", *((void *)v3 + 2), v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x13:
          CFStringAppendFormat(theString, 0, @"CGPoint (%g %g)", **((void **)v3 + 2), *(void *)(*((void *)v3 + 2) + 8), v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x14:
          CFStringAppendFormat(theString, 0, @"CGSize (%g %g)", **((void **)v3 + 2), *(void *)(*((void *)v3 + 2) + 8), v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x15:
          CFStringAppendFormat(theString, 0, @"CGRect (%g %g; %g %g)",
            **((void **)v3 + 2),
            *(void *)(*((void *)v3 + 2) + 8),
            *(void *)(*((void *)v3 + 2) + 16),
            *(void *)(*((void *)v3 + 2) + 24),
            v16,
            v17,
            v18,
            v19,
            v20,
            v21,
            v22,
            v23,
            v24,
            v25,
            v26,
            v27);
          break;
        case 0x16:
          long long v9 = (void *)*((void *)v3 + 2);
          CFStringAppendFormat(theString, 0, @"CATransform3D (%g %g %g %g; %g %g %g %g; %g %g %g %g; %g %g %g %g)",
            *v9,
            v9[1],
            v9[2],
            v9[3],
            v9[4],
            v9[5],
            v9[6],
            v9[7],
            v9[8],
            v9[9],
            v9[10],
            v9[11],
            v9[12],
            v9[13],
            v9[14],
            v9[15]);
          break;
        case 0x17:
          float64x2_t v10 = (void *)*((void *)v3 + 2);
          CFStringAppendFormat(theString, 0, @"CGAffineTransform (%g %g; %g %g; %g %g)",
            *v10,
            v10[1],
            v10[2],
            v10[3],
            v10[4],
            v10[5],
            v18,
            v19,
            v20,
            v21,
            v22,
            v23,
            v24,
            v25,
            v26,
            v27);
          break;
        case 0x18:
          CFStringAppendFormat(theString, 0, @"CAPoint3D (%g %g %g)", **((void **)v3 + 2), *(void *)(*((void *)v3 + 2) + 8), *(void *)(*((void *)v3 + 2) + 16), v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
          break;
        case 0x19:
          float64x2_t v11 = (void *)*((void *)v3 + 2);
          CFStringAppendFormat(theString, 0, @"CACornerRadii (%g %g; %g %g; %g %g; %g %g)",
            *v11,
            v11[1],
            v11[2],
            v11[3],
            v11[4],
            v11[5],
            v11[6],
            v11[7],
            v20,
            v21,
            v22,
            v23,
            v24,
            v25,
            v26,
            v27);
          break;
        default:
          CFStringAppend(theString, @"<undefined>");
          break;
      }
      char v4 = 0;
      uint64_t v3 = *(CA::AttrList **)v3;
    }
    while (v3);
  }
}

void CA::CG::DrawFocusRing::draw_focus_ring(CA::CG::DrawFocusRing *this, CA::CG::Renderer *a2)
{
  v126[61] = *(int32x2_t *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 1);
  float v5 = *((double *)a2 + 10);
  long long v122 = 0uLL;
  uint64_t bounds = CA::Shape::get_bounds(*(void *)(*(void *)(v4 + 248) + 8), (int *)&v122);
  uint64_t v8 = *(int32x2_t **)(v4 + 264);
  if (v8) {
    long long v9 = v8 + 4;
  }
  else {
    long long v9 = (int32x2_t *)(v4 + 200);
  }
  int32x2_t v10 = *(int32x2_t *)((char *)&v122 + 8);
  uint32x2_t v11 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v122 + 8));
  if ((vpmax_u32(v11, v11).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v12 = v9[1];
    uint32x2_t v13 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v12);
    if ((vpmax_u32(v13, v13).u32[0] & 0x80000000) != 0
      || (int32x2_t v14 = vadd_s32(*v9, v12),
          *(int32x2_t *)&long long v15 = vmax_s32(*(int32x2_t *)&v122, *v9),
          int32x2_t v10 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v122, *(int32x2_t *)((char *)&v122 + 8)), v14), *(int32x2_t *)&v15), v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v10), (vpmax_u32(v16, v16).u32[0] & 0x80000000) != 0))
    {
      int32x2_t v10 = 0;
    }
    else
    {
      *((int32x2_t *)&v15 + 1) = v10;
      long long v122 = v15;
    }
  }
  if (v10.i32[0] <= v10.i32[1]) {
    int v17 = v10.i32[1];
  }
  else {
    int v17 = v10.i32[0];
  }
  v18.i64[0] = v10.i32[0];
  v18.i64[1] = v10.i32[1];
  int8x16_t v19 = (int8x16_t)vcvtq_f64_s64(v18);
  int32x2_t v20 = vdup_n_s32(v17 > 1073741822);
  v18.i64[0] = v20.u32[0];
  v18.i64[1] = v20.u32[1];
  int8x16_t v21 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL));
  int8x16_t v22 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int8x16_t v23 = *((int8x16_t *)this + 8);
  int8x16_t v24 = *((int8x16_t *)this + 9);
  float64x2_t v25 = (float64x2_t)v24;
  float64x2_t v26 = (float64x2_t)v23;
  if (v5 != 1.0)
  {
    double v27 = v5;
    v7.f64[0] = 1.79769313e308;
    int8x16_t v28 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v7, (float64x2_t)v24).i64[0], 0);
    v29.i64[1] = v23.i64[1];
    *(double *)v29.i64 = v5 * *(double *)v23.i64;
    float64x2_t v26 = (float64x2_t)vbslq_s8(v28, v29, v23);
    v30.i64[1] = *((void *)this + 19);
    *(double *)v30.i64 = v5 * *(double *)v24.i64;
    float64x2_t v25 = (float64x2_t)vbslq_s8(v28, v30, v24);
    if (v25.f64[1] < 1.79769313e308)
    {
      v26.f64[1] = vmuld_lane_f64(v27, v26, 1);
      v25.f64[1] = v25.f64[1] * v27;
    }
  }
  uint64_t v31 = v122;
  float64x2_t v32 = (float64x2_t)vbslq_s8(v21, v22, v19);
  if ((*(_DWORD *)(*((void *)this + 15) + 84) & 0x80000000) == 0)
  {
    int8x16_t v33 = (int8x16_t)vceqzq_f64((float64x2_t)v24);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v33, 1), v33).u64[0] & 0x8000000000000000) != 0
      || (int8x16_t v34 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v24), (int8x16_t)vcgezq_f64((float64x2_t)v24)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v34), 1), v34).u64[0] & 0x8000000000000000) != 0))
    {
      v124[0] = 0uLL;
    }
    else
    {
      float64x2_t v35 = vmaxnmq_f64((float64x2_t)v23, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
      float64x2_t v36 = vminnmq_f64(vaddq_f64((float64x2_t)v23, (float64x2_t)v24), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      int32x4_t v37 = (int32x4_t)vcvtmq_s64_f64(v35);
      v124[0] = vuzp1q_s32(v37, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v36), (int64x2_t)v37));
    }
    float64x2_t v115 = v32;
    MEMORY[0x1F4188790](bounds);
    __double2 v39 = &v109.i8[-v38];
    bzero((char *)&v109 - v38, v40);
    memset(v126, 0, 56);
    CA::CG::ClipOp::ClipOp(v126, (uint64_t)a2, *((void *)this + 14), (int32x2_t *)v124, (uint64_t)v39, 0.0, v41, v42, v43, v44, v45);
    int32x2_t v49 = v126[0];
    *(int32x2_t *)v48.i8 = v126[1];
    __int32 v50 = v126[1].i32[1];
    if (v126[1].i32[0] > v126[1].i32[1]) {
      __int32 v50 = v126[1].i32[0];
    }
    v46.i32[0] = v50;
    v47.i32[0] = 1073741822;
    int32x2_t v51 = vdup_n_s32(v50 > 1073741822);
    v52.i64[0] = v51.u32[0];
    v52.i64[1] = v51.u32[1];
    int64x2_t v53 = v52;
    if (v126[3])
    {
      long long v54 = *(void (**)(void))(**(void **)&v126[3] + 8);
      int64x2_t v113 = v53;
      int64x2_t v114 = v48;
      int32x4_t v111 = v47;
      int32x4_t v112 = v46;
      v54(*(void *)&v126[3]);
      int32x4_t v47 = v111;
      int32x4_t v46 = v112;
      int64x2_t v53 = v113;
      v48.i64[0] = v114.i64[0];
    }
    v55.i64[0] = v49.i32[0];
    v55.i64[1] = v49.i32[1];
    int64x2_t v56 = v55;
    int32x4_t v57 = vcgtq_s32(v46, v47);
    v55.i64[0] = v48.i32[0];
    v55.i64[1] = v48.i32[1];
    int64x2_t v58 = v55;
    int64x2_t v59 = vshlq_n_s64(v53, 0x3FuLL);
    if (v126[4])
    {
      float64x2_t v60 = *(void (**)(void))(**(void **)&v126[4] + 8);
      int64x2_t v113 = (int64x2_t)v57;
      int64x2_t v114 = v56;
      int32x4_t v111 = (int32x4_t)v59;
      int32x4_t v112 = (int32x4_t)v58;
      v60(*(void *)&v126[4]);
      int64x2_t v59 = (int64x2_t)v111;
      int64x2_t v58 = (int64x2_t)v112;
      v57.i64[0] = v113.i64[0];
      int64x2_t v56 = v114;
    }
    int8x16_t v61 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v57.i8, 0);
    int8x16_t v62 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    int8x16_t v63 = (int8x16_t)vcvtq_f64_s64(v56);
    int8x16_t v64 = (int8x16_t)vcvtq_f64_s64(v58);
    int8x16_t v65 = (int8x16_t)vcltzq_s64(v59);
    int8x16_t v66 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    if (v126[2])
    {
      int64x2_t v113 = (int64x2_t)v62;
      int64x2_t v114 = (int64x2_t)v61;
      int32x4_t v111 = (int32x4_t)v63;
      int32x4_t v112 = (int32x4_t)v64;
      int8x16_t v109 = v66;
      int8x16_t v110 = v65;
      CA::Shape::unref(*(CA::Shape **)&v126[2]);
      int8x16_t v66 = v109;
      int8x16_t v65 = v110;
      int8x16_t v63 = (int8x16_t)v111;
      int8x16_t v64 = (int8x16_t)v112;
      int8x16_t v62 = (int8x16_t)v113;
      int8x16_t v61 = (int8x16_t)v114;
    }
    float64x2_t v26 = (float64x2_t)vbslq_s8(v61, v62, v63);
    float64x2_t v25 = (float64x2_t)vbslq_s8(v65, v66, v64);
    float64x2_t v32 = v115;
  }
  int8x16_t v67 = (int8x16_t)vclezq_f64(v32);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v67, 1), v67).u64[0] & 0x8000000000000000) == 0)
  {
    int8x16_t v68 = (int8x16_t)vclezq_f64(v25);
    int32x4_t v69 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v68, 1);
    int32x4_t v70 = (int32x4_t)vorrq_s8((int8x16_t)v69, v68);
    if ((v70.i64[0] & 0x8000000000000000) == 0)
    {
      v70.i32[0] = v17;
      v69.i32[0] = 1073741822;
      v71.i64[0] = (int)v31;
      v71.i64[1] = SHIDWORD(v31);
      float64x2_t v72 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v70, v69), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v71));
      float64x2_t v73 = vmaxnmq_f64(v72, v26);
      float64x2_t v74 = vminnmq_f64(vaddq_f64(v72, v32), vaddq_f64(v26, v25));
      float64x2_t v75 = vsubq_f64(v74, v73);
      int8x16_t v76 = (int8x16_t)vclezq_f64(v75);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v76, 1), v76).u64[0] & 0x8000000000000000) == 0)
      {
        int8x16_t v77 = (int8x16_t)vceqzq_f64(v75);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v77, 1), v77).u64[0] & 0x8000000000000000) != 0
          || (int8x16_t v78 = vorrq_s8((int8x16_t)vcltzq_f64(v75), (int8x16_t)vcgezq_f64(v75)),
              (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v78), 1), v78).u64[0] & 0x8000000000000000) != 0))
        {
          int32x4_t v121 = 0uLL;
          int32x2_t v82 = 0;
          int32x2_t v81 = (int32x2_t)-1;
        }
        else
        {
          int32x4_t v79 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v73, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          int32x4_t v80 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(v74, (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v79);
          int32x4_t v121 = vuzp1q_s32(v79, v80);
          int32x2_t v81 = vadd_s32(vmovn_s64((int64x2_t)v79), (int32x2_t)-1);
          int32x2_t v82 = vmovn_s64((int64x2_t)v80);
        }
        int v83 = v82.i32[1];
        if (v82.i32[0] <= v82.i32[1]) {
          int v84 = v82.i32[1];
        }
        else {
          int v84 = v82.i32[0];
        }
        if (v82.i32[0] < v82.i32[1]) {
          int v83 = v82.i32[0];
        }
        if (v84 <= 1073741822 && v83 >= 1)
        {
          int8x8_t v85 = (int8x8_t)vadd_s32(v82, (int32x2_t)0x200000002);
          if (v85.i32[1] < 1 || v85.i32[0] < 1) {
            unsigned int v87 = -1;
          }
          else {
            unsigned int v87 = 0;
          }
          *(int32x2_t *)v121.i8 = v81;
          v121.u64[1] = (unint64_t)vbic_s8(v85, (int8x8_t)vdup_n_s32(v87));
        }
        uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, uint64_t))(*(void *)v4 + 656))(v4, 1, &v121, 8200);
        if (v88)
        {
          uint64_t v89 = v88;
          unsigned int v90 = *(unsigned __int16 *)(v4 + 832);
          __int16 v91 = v90 & 0x7000;
          if ((v90 & 0x7000) == 0x3000)
          {
            unsigned int v90 = v90 & 0xFFFF8FFF | 0x2000;
            *(_WORD *)(v4 + 832) = v90;
          }
          unsigned int v92 = v90 >> 12;
          if ((v92 & 4) != 0) {
            char v93 = 0;
          }
          else {
            char v93 = 0x1E1F1400u >> (8 * (v92 & 7));
          }
          *(unsigned char *)(v88 + 73) = *(unsigned char *)(v88 + 73) & 0xC0 | v93;
          double v94 = *(const void **)(v4 + 16);
          memcpy(v126, v94, 0x1E8uLL);
          v126[0] = (int32x2_t)v94;
          *(void *)(v4 + 16) = v126;
          uint64_t v125 = 0;
          memset(&v124[2], 0, 32);
          memset(v124, 0, 32);
          uint64_t v95 = *(void *)(v4 + 248);
          *(_OWORD *)((char *)v124 + 8) = *(_OWORD *)(v95 + 8);
          uint64_t v96 = *(void *)(v95 + 32);
          *((void *)&v124[1] + 1) = *(void *)(v95 + 24);
          *(void *)&v124[2] = v96;
          *(_OWORD *)((char *)&v124[2] + 8) = *(_OWORD *)(v95 + 40);
          *((void *)&v124[3] + 1) = *(void *)(v95 + 56);
          __int16 v97 = *(_WORD *)(v95 + 68);
          LODWORD(v125) = *(_DWORD *)(v95 + 64);
          HIDWORD(v125) = v97 & 0x5FF;
          memset(v123, 0, sizeof(v123));
          CA::Shape::operator=((uint64_t)v123, &v121);
          *((void *)&v124[0] + 1) = v123;
          *(void *)&v124[0] = CA::OGL::Context::set_gstate(v4, (uint64_t)v124);
          CA::OGL::Context::push_surface(v4, v89, 1u, 64, 0);
          CA::CG::DrawOp::render_alpha(*((CA::CG::DrawOp **)this + 14), a2, 0);
          CA::OGL::Context::pop_surface((CA::OGL::Context *)v4);
          CA::OGL::Context::set_gstate(v4, **(void **)(v4 + 248));
          *(int32x2_t *)(v4 + 16) = v126[0];
          v126[0] = 0;
          *(_WORD *)(v4 + 832) = *(_WORD *)(v4 + 832) & 0x8FFF | v91;
          if (v121.i32[2] <= v121.i32[3]) {
            int v100 = v121.i32[3];
          }
          else {
            int v100 = v121.i32[2];
          }
          v98.i32[0] = 1073741822;
          v99.i32[0] = v100;
          v101.i64[0] = v121.i32[0];
          v101.i64[1] = v121.i32[1];
          double v102 = (double)v121.i32[2];
          int8x16_t v103 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v99, v98), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v101));
          double v104 = (double)v121.i32[3];
          if (v100 > 1073741822)
          {
            double v102 = 1.79769313e308;
            double v104 = 1.79769313e308;
          }
          float64x2_t v118 = (float64x2_t)v103;
          double v119 = v102;
          double v120 = v104;
          uint64_t v105 = *((void *)this + 15);
          float v106 = *(float *)(v105 + 80);
          double v107 = (float)(*(float *)(v105 + 76) * v5);
          double v108 = *((double *)this + 11);
          float16x4_t v116 = 0;
          double v117 = v108;
          CA::OGL::emit_large_brim((CA::OGL::Context *)v4, v89, &v118, &v117, &v116, (CA::Mat4Impl *)&CA::identity_transform, 1, v107, 0.0, 0.0, v106);
          CA::OGL::Context::release_surface(v4, v89);
          if (v126[0]) {
            __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
          }
        }
      }
    }
  }
}

void *CA::CG::DrawFocusRing::draw_shape_and_color(void *this, CA::CG::Renderer *a2)
{
  if (*(int *)(this[15] + 84) <= 0) {
    return (void *)(*(uint64_t (**)(void *, CA::CG::Renderer *))(*this + 184))(this, a2);
  }
  return this;
}

void *CA::CG::DrawFocusRing::draw_shape(void *this, CA::CG::Renderer *a2)
{
  if (*(int *)(this[15] + 84) <= 0) {
    return (void *)(*(uint64_t (**)(void *, CA::CG::Renderer *))(*this + 184))(this, a2);
  }
  return this;
}

uint64_t CA::CG::DrawFocusRing::debug_color(CA::CG::DrawFocusRing *this)
{
  return 4056100576;
}

uint64_t CA::CG::DrawFocusRing::set_op(uint64_t this, CA::CG::DrawOp *a2)
{
  uint64_t v2 = *(void *)(this + 112);
  if (v2) {
    *(void *)(v2 + 104) = 0;
  }
  *(void *)(this + 112) = a2;
  return this;
}

double *CA::CG::DrawFocusRing::compute_dod(CA::CG::DrawFocusRing *this, CA::Rect *a2)
{
  (*(void (**)(void, char *))(**((void **)this + 14) + 24))(*((void *)this + 14), (char *)this + 128);
  unsigned int v4 = vcvtms_s32_f32(*(float *)(*((void *)this + 15) + 76) + 0.5);
  *(_OWORD *)a2 = *((_OWORD *)this + 8);
  *((_OWORD *)a2 + 1) = *((_OWORD *)this + 9);

  return CA::BoundsImpl::inset((double *)a2, (double)(int)~v4, (double)(int)~v4);
}

void CA::CG::DrawFocusRing::~DrawFocusRing(CA::CG::DrawFocusRing *this)
{
  *(void *)this = &unk_1ED028148;
  uint64_t v2 = (atomic_uint *)*((void *)this + 15);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED028148;
  uint64_t v2 = (atomic_uint *)*((void *)this + 15);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

void CA::CG::DrawFocusRingTransparencyLayer::draw_shape_and_color(int8x16_t *this, CA::CG::Renderer *a2)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(this[10].i64[0] + 40);
  if (v2)
  {
    float v5 = (int32x2_t *)*((void *)a2 + 1);
    float v6 = *((double *)a2 + 10);
    long long v104 = 0uLL;
    uint64_t bounds = CA::Shape::get_bounds(*(void *)(*(void *)&v5[31] + 8), (int *)&v104);
    long long v9 = (int32x2_t *)v5[33];
    if (v9) {
      int32x2_t v10 = v9 + 4;
    }
    else {
      int32x2_t v10 = v5 + 25;
    }
    int32x2_t v11 = *(int32x2_t *)((char *)&v104 + 8);
    uint32x2_t v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v104 + 8));
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v13 = v10[1];
      uint32x2_t v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v13);
      if ((vpmax_u32(v14, v14).u32[0] & 0x80000000) != 0
        || (int32x2_t v15 = vadd_s32(*v10, v13),
            *(int32x2_t *)&long long v16 = vmax_s32(*(int32x2_t *)&v104, *v10),
            int32x2_t v11 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v104, *(int32x2_t *)((char *)&v104 + 8)), v15), *(int32x2_t *)&v16), v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11), (vpmax_u32(v17, v17).u32[0] & 0x80000000) != 0))
      {
        int32x2_t v11 = 0;
      }
      else
      {
        *((int32x2_t *)&v16 + 1) = v11;
        long long v104 = v16;
      }
    }
    if (v11.i32[0] <= v11.i32[1]) {
      int v18 = v11.i32[1];
    }
    else {
      int v18 = v11.i32[0];
    }
    v19.i64[0] = v11.i32[0];
    v19.i64[1] = v11.i32[1];
    int8x16_t v20 = (int8x16_t)vcvtq_f64_s64(v19);
    int32x2_t v21 = vdup_n_s32(v18 > 1073741822);
    v19.i64[0] = v21.u32[0];
    v19.i64[1] = v21.u32[1];
    int8x16_t v22 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v19, 0x3FuLL));
    int8x16_t v23 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int8x16_t v24 = this[8];
    int8x16_t v25 = this[9];
    float64x2_t v26 = (float64x2_t)v25;
    float64x2_t v27 = (float64x2_t)v24;
    if (v6 != 1.0)
    {
      double v28 = v6;
      v8.f64[0] = 1.79769313e308;
      int8x16_t v29 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v8, (float64x2_t)v25).i64[0], 0);
      v30.i64[1] = v24.i64[1];
      *(double *)v30.i64 = v6 * *(double *)v24.i64;
      float64x2_t v27 = (float64x2_t)vbslq_s8(v29, v30, v24);
      v31.i64[1] = this[9].i64[1];
      *(double *)v31.i64 = v6 * *(double *)v25.i64;
      float64x2_t v26 = (float64x2_t)vbslq_s8(v29, v31, v25);
      if (v26.f64[1] < 1.79769313e308)
      {
        v27.f64[1] = vmuld_lane_f64(v28, v27, 1);
        v26.f64[1] = v26.f64[1] * v28;
      }
    }
    uint64_t v32 = v104;
    float64x2_t v33 = (float64x2_t)vbslq_s8(v22, v23, v20);
    if ((*(_DWORD *)(this[7].i64[1] + 84) & 0x80000000) == 0)
    {
      int8x16_t v34 = (int8x16_t)vceqzq_f64((float64x2_t)v25);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v34, 1), v34).u64[0] & 0x8000000000000000) != 0
        || (int8x16_t v35 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v25), (int8x16_t)vcgezq_f64((float64x2_t)v25)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v35), 1), v35).u64[0] & 0x8000000000000000) != 0))
      {
        int32x4_t v103 = 0uLL;
      }
      else
      {
        float64x2_t v36 = vmaxnmq_f64((float64x2_t)v24, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
        float64x2_t v37 = vminnmq_f64(vaddq_f64((float64x2_t)v24, (float64x2_t)v25), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
        int32x4_t v38 = (int32x4_t)vcvtmq_s64_f64(v36);
        int32x4_t v103 = vuzp1q_s32(v38, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v37), (int64x2_t)v38));
      }
      float64x2_t v96 = v33;
      MEMORY[0x1F4188790](bounds);
      size_t v40 = &v90.i8[-v39];
      bzero((char *)&v90 - v39, v41);
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      float64x2_t v99 = 0u;
      CA::CG::ClipOp::ClipOp((int32x2_t *)&v99, (uint64_t)a2, this[7].i64[0], (int32x2_t *)&v103, (uint64_t)v40, 0.0, v42, v43, v44, v45, v46);
      v49.i64[0] = *(void *)&v99.f64[1];
      float64_t v50 = v99.f64[0];
      int v51 = HIDWORD(v99.f64[1]);
      if (SLODWORD(v99.f64[1]) > SHIDWORD(v99.f64[1])) {
        int v51 = LODWORD(v99.f64[1]);
      }
      v47.i32[0] = v51;
      v48.i32[0] = 1073741822;
      int32x2_t v52 = vdup_n_s32(v51 > 1073741822);
      v53.i64[0] = v52.u32[0];
      v53.i64[1] = v52.u32[1];
      int64x2_t v54 = v53;
      if (*((void *)&v100 + 1))
      {
        int64x2_t v55 = *(void (**)(void))(**((void **)&v100 + 1) + 8);
        int64x2_t v95 = v49;
        int64x2_t v94 = v54;
        int32x4_t v93 = v47;
        int32x4_t v92 = v48;
        v55(*((void *)&v100 + 1));
        int32x4_t v48 = v92;
        int32x4_t v47 = v93;
        int64x2_t v54 = v94;
        v49.i64[0] = v95.i64[0];
      }
      v56.i64[0] = SLODWORD(v50);
      v56.i64[1] = SHIDWORD(v50);
      int64x2_t v57 = v56;
      int32x4_t v58 = vcgtq_s32(v47, v48);
      v56.i64[0] = v49.i32[0];
      v56.i64[1] = v49.i32[1];
      int64x2_t v59 = v56;
      int64x2_t v60 = vshlq_n_s64(v54, 0x3FuLL);
      if ((void)v101)
      {
        int8x16_t v61 = *(void (**)(void))(*(void *)v101 + 8);
        int64x2_t v95 = v57;
        int64x2_t v94 = (int64x2_t)v58;
        int32x4_t v93 = (int32x4_t)v59;
        int32x4_t v92 = (int32x4_t)v60;
        v61(v101);
        int64x2_t v60 = (int64x2_t)v92;
        int64x2_t v59 = (int64x2_t)v93;
        v58.i64[0] = v94.i64[0];
        int64x2_t v57 = v95;
      }
      int8x16_t v62 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 0);
      int8x16_t v63 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
      int8x16_t v64 = (int8x16_t)vcvtq_f64_s64(v57);
      int8x16_t v65 = (int8x16_t)vcvtq_f64_s64(v59);
      int8x16_t v66 = (int8x16_t)vcltzq_s64(v60);
      int8x16_t v67 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      if ((void)v100)
      {
        int64x2_t v95 = (int64x2_t)v62;
        int64x2_t v94 = (int64x2_t)v63;
        int32x4_t v93 = (int32x4_t)v65;
        int32x4_t v92 = (int32x4_t)v64;
        int8x16_t v91 = v66;
        int8x16_t v90 = v67;
        CA::Shape::unref((CA::Shape *)v100);
        int8x16_t v67 = v90;
        int8x16_t v66 = v91;
        int8x16_t v64 = (int8x16_t)v92;
        int8x16_t v65 = (int8x16_t)v93;
        int8x16_t v63 = (int8x16_t)v94;
        int8x16_t v62 = (int8x16_t)v95;
      }
      float64x2_t v27 = (float64x2_t)vbslq_s8(v62, v63, v64);
      float64x2_t v26 = (float64x2_t)vbslq_s8(v66, v67, v65);
      float64x2_t v33 = v96;
    }
    int8x16_t v68 = (int8x16_t)vclezq_f64(v33);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v68, 1), v68).u64[0] & 0x8000000000000000) == 0)
    {
      int8x16_t v69 = (int8x16_t)vclezq_f64(v26);
      int32x4_t v70 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v69, 1);
      int32x4_t v71 = (int32x4_t)vorrq_s8((int8x16_t)v70, v69);
      if ((v71.i64[0] & 0x8000000000000000) == 0)
      {
        v71.i32[0] = v18;
        v70.i32[0] = 1073741822;
        v72.i64[0] = (int)v32;
        v72.i64[1] = SHIDWORD(v32);
        float64x2_t v73 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v71, v70), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v72));
        int8x16_t v74 = (int8x16_t)vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(v73, v33), vaddq_f64(v27, v26)), vmaxnmq_f64(v73, v27)));
        int32x4_t v75 = (int32x4_t)vdupq_laneq_s64((int64x2_t)v74, 1);
        int32x4_t v76 = (int32x4_t)vorrq_s8((int8x16_t)v75, v74);
        if ((v76.i64[0] & 0x8000000000000000) == 0)
        {
          int v77 = *(_DWORD *)(v2 + 40);
          int v78 = *(_DWORD *)(v2 + 44);
          if (v77 <= v78) {
            int v79 = *(_DWORD *)(v2 + 44);
          }
          else {
            int v79 = *(_DWORD *)(v2 + 40);
          }
          v76.i32[0] = 1073741822;
          v75.i32[0] = v79;
          int8x16_t v80 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v75, v76), 0);
          uint64_t v81 = *(void *)(v2 + 32);
          v82.i64[0] = (int)v81;
          v82.i64[1] = SHIDWORD(v81);
          double v83 = (double)v77;
          int8x16_t v84 = vbslq_s8(v80, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v82));
          double v85 = (double)v78;
          if (v79 > 1073741822)
          {
            double v83 = 1.79769313e308;
            double v85 = 1.79769313e308;
          }
          float64x2_t v99 = (float64x2_t)v84;
          *(double *)&long long v100 = v83;
          *((double *)&v100 + 1) = v85;
          uint64_t v86 = this[7].i64[1];
          float v87 = *(float *)(v86 + 80);
          double v88 = (float)(*(float *)(v86 + 76) * v6);
          uint64_t v89 = this[5].i64[1];
          float16x4_t v97 = 0;
          uint64_t v98 = v89;
          CA::OGL::emit_large_brim((CA::OGL::Context *)v5, v2, &v99, (double *)&v98, &v97, (CA::Mat4Impl *)&CA::identity_transform, 1, v88, 0.0, 0.0, v87);
        }
      }
    }
  }
}

void CA::CG::DrawFocusRingTransparencyLayer::~DrawFocusRingTransparencyLayer(CA::CG::DrawFocusRingTransparencyLayer *this)
{
  *(void *)this = &unk_1ED029A88;
  uint64_t v2 = (atomic_uint *)*((void *)this + 20);
  if (v2) {
    CA::CG::TransparencyLayer::unref(v2);
  }
  *(void *)this = &unk_1ED028148;
  uint64_t v3 = (atomic_uint *)*((void *)this + 15);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  atomic_uint *v3;
  uint64_t vars8;

  *(void *)this = &unk_1ED029A88;
  uint64_t v2 = (atomic_uint *)*((void *)this + 20);
  if (v2) {
    CA::CG::TransparencyLayer::unref(v2);
  }
  *(void *)this = &unk_1ED028148;
  uint64_t v3 = (atomic_uint *)*((void *)this + 15);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

float16x4_t *CA::CG::DrawFocusRing::DrawFocusRing(float16x4_t *a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Color = (CGColor *)CGStyleGetColor();
  CA::CG::DrawOp::DrawOp((uint64_t)a1, a2, a3, a4, a5, Color, 2048);
  *a1 = (float16x4_t)&unk_1ED028148;
  a1[14] = (float16x4_t)a3;
  atomic_fetch_add((atomic_uint *volatile)(a6 + 8), 1u);
  a1[15] = (float16x4_t)a6;
  uint64_t Data = CGStyleGetData();
  a1[7].i32[0] = 2;
  float v14 = *(double *)(Data + 16);
  if (v14 != 1.0) {
    a1[11] = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(a1[11]), v14));
  }
  if ((*(_DWORD *)(*(void *)&a1[15] + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = CGStyleGetData();
    int8x16_t v16 = *(int8x16_t *)(v15 + 56);
    v17.f64[0] = 0.0;
    int8x16_t v18 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v17, (float64x2_t)v16).i64[0], 0);
    v19.i64[1] = *(void *)(v15 + 64);
    *(double *)v19.i64 = -*(double *)v16.i64;
    int8x16_t v20 = vbslq_s8(v18, v19, v16);
    int8x16_t v21 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v17, (float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1)).i64[0], 0);
    float64x2_t v24 = vnegq_f64((float64x2_t)v16);
    v22.i64[0] = v20.i64[0];
    v22.i64[1] = *(void *)&v24.f64[1];
    int8x16_t v23 = vbslq_s8(v21, v22, v20);
    *(void *)&v24.f64[0] = v23.i64[1];
    if (*(double *)v23.i64 < *(double *)&v23.i64[1]) {
      v24.f64[0] = *(double *)v23.i64;
    }
    int8x16_t v25 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgtq_f64(v24, v17)).i64[0], 0);
    int8x16_t v26 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int8x16_t v27 = vbslq_s8(v25, v26, v23);
    double v28 = *(double *)&v27.i64[1];
    if (*(double *)v27.i64 > *(double *)&v27.i64[1]) {
      double v28 = *(double *)v27.i64;
    }
    if (v28 < 1.79769313e308)
    {
      float64x2_t v29 = *(float64x2_t *)(v15 + 40);
      v26.i64[0] = 0x8000000000000000;
      v30.i64[0] = *(_OWORD *)&vaddq_f64(v29, (float64x2_t)vbslq_s8(v18, v16, v26));
      v31.i64[0] = v30.i64[0];
      v31.i64[1] = *(void *)(v15 + 48);
      v30.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&v16, v29).f64[1];
      float64x2_t v39 = (float64x2_t)vbslq_s8(v25, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), vbslq_s8(v21, v30, v31));
      float64x2_t v40 = (float64x2_t)v27;
      uint64_t v32 = (char *)malloc_type_malloc(0x38uLL, 0x100004021716A34uLL);
      float64x2_t v33 = (void (***)(char *))v32;
      int8x16_t v34 = (int32x4_t *)(v32 + 40);
      *(_DWORD *)uint64_t v32 = 1;
      *(float64x2_t *)(v32 + 8) = v39;
      *(float64x2_t *)(v32 + 24) = v40;
      int8x16_t v35 = (int8x16_t)vceqzq_f64(v40);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v35, 1), v35).u64[0] & 0x8000000000000000) != 0
        || (int8x16_t v36 = vorrq_s8((int8x16_t)vcltzq_f64(v40), (int8x16_t)vcgezq_f64(v40)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v36), 1), v36).u64[0] & 0x8000000000000000) != 0))
      {
        v34->i64[0] = 0;
        *((void *)v32 + 6) = 0;
      }
      else
      {
        int32x4_t v37 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v39, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        *int8x16_t v34 = vuzp1q_s32(v37, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v39, v40), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v37));
      }
      *((_DWORD *)v32 + 1) = 0;
      CA::CG::DrawOp::set_clip_stack((CA::CG::DrawOp *)a1, (atomic_uint *)v32);
      if (atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1) {
        CA::CG::ClipStack::destroy_clip_stack(v33);
      }
    }
    else
    {
      CA::CG::DrawOp::set_clip_stack((CA::CG::DrawOp *)a1, 0);
    }
  }
  return a1;
}

BOOL CA::CG::rects_intersect(CA::CG *this, const CGRect *a2, double a3)
{
  double v5 = MEMORY[0x1F4188790](this);
  v25[508] = *MEMORY[0x1E4F143B8];
  if (v4 >= 2)
  {
    double v10 = v5;
    unint64_t v11 = v4;
    uint64_t v12 = 0;
    v23[0] = 0;
    v23[1] = v25;
    long long v24 = xmmword_184998060;
    v21[1] = v23;
    int8x16_t v22 = (void ***)v23;
    uint64_t v20 = 0;
    v21[0] = 0;
    int8x16_t v18 = v21;
    int8x16_t v19 = 0;
    double v13 = v5 * -2.0;
    uint64_t v14 = v3 + 16;
    BOOL v9 = 1;
    do
    {
      v7.n128_u64[0] = *(void *)v14;
      v8.n128_u64[0] = *(void *)(v14 + 8);
      double v15 = *(double *)(v14 - 16) + fmin(*(double *)v14, -0.0);
      if (*(double *)v14 < 0.0) {
        v7.n128_f64[0] = -*(double *)v14;
      }
      v6.n128_f64[0] = *(double *)(v14 - 8) + fmin(v8.n128_f64[0], -0.0);
      if (v8.n128_f64[0] < 0.0) {
        v8.n128_f64[0] = -v8.n128_f64[0];
      }
      if (v10 > 0.0)
      {
        double v16 = v7.n128_f64[0] <= v8.n128_f64[0] ? v8.n128_f64[0] : v7.n128_f64[0];
        if (v16 < 1.79769313e308)
        {
          double v15 = v15 - v10;
          v6.n128_f64[0] = v6.n128_f64[0] - v10;
          v7.n128_f64[0] = v7.n128_f64[0] - v13;
          v8.n128_f64[0] = v8.n128_f64[0] - v13;
          if (v7.n128_f64[0] <= 0.0 || v8.n128_f64[0] <= 0.0)
          {
            v7.n128_f64[0] = 0.0;
            v8.n128_f64[0] = 0.0;
          }
        }
      }
      v7.n128_f64[0] = v7.n128_f64[0] + v15;
      v8.n128_f64[0] = v8.n128_f64[0] + v6.n128_f64[0];
      CA::GenericRectTree<CA::Rect>::insert_node((uint64_t)&v18, (uint64_t *)&v19, v15, v6, v7, v8);
      if ((_BYTE)v20) {
        break;
      }
      BOOL v9 = ++v12 < v11;
      v14 += 32;
    }
    while (v11 != v12);
    if (v19) {
      CA::GenericRectTree<CA::Rect>::Pool::delete_node((uint64_t)v18, v19);
    }
    x_heap_free(v22);
  }
  else
  {
    return 0;
  }
  return v9;
}

uint64_t CA::CG::DrawRects::debug_color(CA::CG::DrawRects *this)
{
  return 2376676064;
}

void *CA::CG::FillRects::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 80))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    unint64_t v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
    if (v11)
    {
      Color = (CGColor *)CGStyleGetColor();
      CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
      void *v11 = &unk_1ED028BC0;
      v11[14] = a1;
      atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
      v11[15] = a3;
    }
  }
  else
  {
    BaseCTM = (double *)CGRenderingStateGetBaseCTM();
    double v14 = *BaseCTM;
    double v15 = BaseCTM[1];
    double v16 = BaseCTM[2];
    double v17 = BaseCTM[3];
    int8x16_t v18 = (malloc_zone_t *)get_malloc_zone();
    int8x16_t v19 = (char *)malloc_type_zone_malloc(v18, 0x60uLL, 0x8BB15036uLL);
    uint64_t v20 = (atomic_uint *)v19;
    if (v19)
    {
      float v21 = v16 * v15 + v17 * v14;
      if (v21 < 0.0) {
        float v21 = -v21;
      }
      double v22 = *(double *)(a3 + 80) * sqrtf(v21);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *(void *)int8x16_t v19 = &unk_1ED029D48;
      long long v24 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      long long v23 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      *(_OWORD *)(v19 + 24) = *MEMORY[0x1E4F1DAB8];
      *(_OWORD *)(v19 + 4CASetDebugMessage("", 0) = v24;
      *(_OWORD *)(v19 + 56) = v23;
      *((_DWORD *)v19 + 18) = 0;
      *((_DWORD *)v19 + 2) = 1;
      *(void *)int8x16_t v19 = &unk_1ED027AA8;
      *(float *)&double v22 = v22;
      *((_DWORD *)v19 + 19) = LODWORD(v22);
      *((void *)v19 + 1CASetDebugMessage("", 0) = 0;
      *((_WORD *)v19 + 44) = 0;
    }
    int8x16_t v25 = (malloc_zone_t *)get_malloc_zone();
    int8x16_t v26 = malloc_type_zone_malloc(v25, 0xA0uLL, 0x8BB15036uLL);
    unint64_t v11 = v26;
    if (v26) {
      CA::CG::FillRectsShadow::FillRectsShadow(v26, a2, a1, a4, a5, (uint64_t)v20, 0);
    }
    v11[11] = *(void *)(a1 + 88);
    unsigned int add = atomic_fetch_add(v20 + 2, 0xFFFFFFFF);
    if (v20 && add == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
    }
  }
  return v11;
}

uint64_t CA::CG::FillRectsShadow::FillRectsShadow(void *a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  Color = (CGColor *)CGStyleGetColor();
  uint64_t result = CA::CG::DrawOp::DrawOp((uint64_t)a1, a2, a3, a4, a5, Color, a7 | 0x840u);
  *a1 = &unk_1ED027588;
  a1[18] = a3;
  atomic_fetch_add((atomic_uint *volatile)(a6 + 8), 1u);
  a1[19] = a6;
  *a1 = &unk_1ED0289E8;
  return result;
}

char *CA::CG::FillRects::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (vabdd_f64(*(double *)(a1 + 8) * *(double *)(a1 + 8) + *(double *)(a1 + 16) * *(double *)(a1 + 16), *(double *)(a1 + 24) * *(double *)(a1 + 24) + *(double *)(a1 + 32) * *(double *)(a1 + 32)) < 0.001&& ((int v10 = *(_DWORD *)(a1 + 100), (v10 & 0x1000000) != 0)|| !CA::CG::rects_intersect((CA::CG *)(a1 + 120), *(const CGRect **)(a1 + 112), *(float *)(a3 + 76))))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t result = (char *)malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
    if (result) {
      return (char *)CA::CG::FillRectsShadow::FillRectsShadow(result, a2, a1, a4, a5, a3, v10 & 4);
    }
  }
  else
  {
    return CA::CG::DrawOp::styled_op(a1, a2, a3, a4, a5);
  }
  return result;
}

uint64_t CA::CG::FillRects::compute_dod_corners(uint64_t a1, float64x2_t *a2, float64x2_t a3, double a4, double a5, double a6, int8x16_t a7)
{
  float64x2_t v7 = *(float64x2_t *)(a1 + 136);
  a3.f64[0] = 0.0;
  int8x16_t v8 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, v7).i64[0], 0);
  float64x2_t v9 = *(float64x2_t *)(a1 + 120);
  v10.i64[1] = *(void *)(a1 + 144);
  *(double *)v10.i64 = -v7.f64[0];
  a7.i64[0] = 0x8000000000000000;
  v11.i64[0] = *(_OWORD *)&vaddq_f64(v9, (float64x2_t)vbslq_s8(v8, (int8x16_t)v7, a7));
  v12.i64[0] = v11.i64[0];
  v12.i64[1] = *(void *)(a1 + 128);
  int8x16_t v13 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, (float64x2_t)vdupq_laneq_s64((int64x2_t)v7, 1)).i64[0], 0);
  int8x16_t v14 = vbslq_s8(v8, v10, (int8x16_t)v7);
  v15.i64[0] = v14.i64[0];
  v15.i64[1] = *(void *)&vnegq_f64(v7).f64[1];
  float64x2_t v16 = (float64x2_t)vbslq_s8(v13, v15, v14);
  v11.i64[1] = *(void *)&vaddq_f64(v7, v9).f64[1];
  float64x2_t v17 = (float64x2_t)vbslq_s8(v13, v11, v12);
  unint64_t v18 = *(void *)(a1 + 112);
  if (v18 >= 2)
  {
    uint64_t v19 = a1 + 168;
    unint64_t v20 = v18 - 1;
    while (1)
    {
      float64x2_t v21 = *(float64x2_t *)(v19 - 16);
      int8x16_t v22 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, *(float64x2_t *)v19).i64[0], 0);
      v23.i64[1] = *(void *)(v19 + 8);
      *(double *)v23.i64 = -*(double *)v19;
      int8x16_t v24 = vbslq_s8(v22, v23, *(int8x16_t *)v19);
      v23.i64[0] = 0x8000000000000000;
      v22.i64[0] = *(_OWORD *)&vaddq_f64(v21, (float64x2_t)vbslq_s8(v22, *(int8x16_t *)v19, v23));
      v23.i64[0] = v22.i64[0];
      v23.i64[1] = *(void *)(v19 - 8);
      int8x16_t v25 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a3, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v19, 1)).i64[0], 0);
      v22.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)v19, v21).f64[1];
      *(void *)&v21.f64[0] = v24.i64[0];
      v21.f64[1] = vnegq_f64(*(float64x2_t *)v19).f64[1];
      float64x2_t v26 = (float64x2_t)vbslq_s8(v25, v22, v23);
      float64x2_t v27 = (float64x2_t)vbslq_s8(v25, (int8x16_t)v21, v24);
      int64x2_t v28 = vclezq_f64(v16);
      int64x2_t v29 = vclezq_f64(v27);
      int32x2_t v30 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v29, v28), (int8x16_t)vzip2q_s64(v29, v28))));
      if (v30.i8[4]) {
        break;
      }
      if ((v30.i8[0] & 1) == 0)
      {
        float64x2_t v31 = vaddq_f64(v26, v27);
        float64x2_t v26 = vminnmq_f64(v17, v26);
        float64x2_t v27 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v17, v16), v31), v26);
LABEL_8:
        float64x2_t v16 = v27;
        float64x2_t v17 = v26;
      }
LABEL_9:
      v19 += 32;
      if (!--v20) {
        goto LABEL_10;
      }
    }
    if (v30.i8[0]) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_10:
  float64x2_t v32 = vaddq_f64(v16, v17);
  v33.f64[0] = v32.f64[0];
  v33.f64[1] = v17.f64[1];
  *a2 = v17;
  a2[1] = v33;
  v17.f64[1] = v32.f64[1];
  a2[2] = v32;
  a2[3] = v17;
  if ((*(unsigned char *)(a1 + 100) & 4) == 0)
  {
    uint64_t v34 = 0;
    int8x16_t v35 = (const double *)(a1 + 48);
    int8x16_t v36 = (const double *)(a1 + 8);
    int32x4_t v37 = (const double *)(a1 + 32);
    int32x4_t v38 = (const double *)(a1 + 16);
    float64x2_t v39 = (const double *)(a1 + 40);
    float64x2_t v40 = (const double *)(a1 + 24);
    float64x2_t v41 = vld1q_dup_f64(v36);
    float64x2_t v42 = vld1q_dup_f64(v40);
    float64x2_t v43 = vld1q_dup_f64(v39);
    float64x2_t v44 = vld1q_dup_f64(v38);
    float64x2_t v45 = vld1q_dup_f64(v37);
    float64x2_t v46 = vld1q_dup_f64(v35);
    do
    {
      f64 = a2[v34].f64;
      float64x2x2_t v49 = vld2q_f64(f64);
      v50.val[0] = vmlaq_f64(vmlaq_f64(v43, v49.val[0], v41), v49.val[1], v42);
      v50.val[1] = vmlaq_f64(vmlaq_f64(v46, v49.val[0], v44), v49.val[1], v45);
      vst2q_f64(f64, v50);
      v34 += 2;
    }
    while (v34 != 4);
  }
  return 1;
}

void CA::CG::FillRects::~FillRects(CA::CG::FillRects *this)
{
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

void CA::CG::StrokeRects::draw_shape(CA::CG::StrokeRects *this, CA::CG::Renderer *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 17)) {
    goto LABEL_3;
  }
  uint64_t v4 = *((void *)a2 + 1);
  int v5 = *((_DWORD *)this + 25);
  CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 15));
  if (v6 < 0.0) {
    goto LABEL_3;
  }
  double v23 = v6;
  if (v6 < 0.001) {
    return;
  }
  if (!*((_DWORD *)this + 39))
  {
    if (v6 <= 1.5 || *((double *)this + 18) >= 1.41421356) {
      goto LABEL_24;
    }
LABEL_3:
    Mutable = CGPathCreateMutable();
    if (*((void *)this + 14))
    {
      unint64_t v10 = 0;
      int8x16_t v11 = (double *)((char *)this + 184);
      v8.i64[0] = 0x3F50624DD2F1A9FCLL;
      int8x16_t v48 = v8;
      v12.f64[0] = NAN;
      v12.f64[1] = NAN;
      int8x16_t v13 = (int8x16_t)vnegq_f64(v12);
      int8x16_t v47 = v13;
      do
      {
        double v14 = *(v11 - 3);
        double v15 = *(v11 - 2);
        v13.i64[0] = *(uint64_t *)(v11 - 1);
        v9.i64[0] = *(uint64_t *)v11;
        double v16 = -*(double *)v13.i64;
        if (*(double *)v13.i64 >= 0.0) {
          double v16 = *(v11 - 1);
        }
        *(void *)&double v17 = vbslq_s8(v47, v48, v13).u64[0];
        if (v16 < *(double *)v48.i64) {
          *(double *)v13.i64 = v17;
        }
        double v18 = -*(double *)v9.i64;
        if (*(double *)v9.i64 >= 0.0) {
          double v18 = *v11;
        }
        unint64_t v19 = vbslq_s8(v47, v48, v9).u64[0];
        if (v18 >= *(double *)v48.i64) {
          double v20 = *v11;
        }
        else {
          double v20 = *(double *)&v19;
        }
        CGFloat v21 = *(double *)v13.i64 + v14;
        CGPathMoveToPoint(Mutable, 0, *(double *)v13.i64 + v14, *(v11 - 2));
        CGPathAddLineToPoint(Mutable, 0, v14, v15);
        CGFloat v22 = v20 + v15;
        CGPathAddLineToPoint(Mutable, 0, v14, v22);
        CGPathAddLineToPoint(Mutable, 0, v21, v22);
        CGPathCloseSubpath(Mutable);
        ++v10;
        v11 += 4;
      }
      while (v10 < *((void *)this + 14));
    }
    CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)this + 120);
    CFRelease(Mutable);
    return;
  }
  if (v6 > 1.5) {
    goto LABEL_3;
  }
LABEL_24:
  uint64_t v24 = 88;
  if ((v5 & 4) == 0) {
    uint64_t v24 = 32;
  }
  uint64_t v49 = v24;
  if ((v5 & 4) != 0) {
    int8x16_t v25 = (double *)((char *)a2 + 88);
  }
  else {
    int8x16_t v25 = (double *)((char *)a2 + 32);
  }
  unint64_t v26 = *((void *)this + 14);
  if (v26)
  {
    unint64_t v27 = 0;
    int64x2_t v28 = (double *)((char *)this + 184);
    do
    {
      double v29 = *(v28 - 3);
      double v30 = *(v28 - 2);
      double v50 = v29;
      double v51 = v30;
      double v31 = *(v28 - 1);
      double v32 = *v28;
      double v52 = v31;
      double v53 = v32;
      if (v31 < 0.0)
      {
        double v29 = v31 + v29;
        double v31 = -v31;
        double v50 = v29;
        double v52 = v31;
      }
      if (v32 < 0.0)
      {
        double v30 = v32 + v30;
        double v32 = -v32;
        double v51 = v30;
        double v53 = v32;
      }
      if (v31 <= v32) {
        double v33 = v32;
      }
      else {
        double v33 = v31;
      }
      if (v33 < 1.79769313e308)
      {
        if (v31 == 0.0) {
          double v34 = v31;
        }
        else {
          double v34 = v23 * -0.5;
        }
        if (v32 == 0.0) {
          double v35 = v32;
        }
        else {
          double v35 = v23 * -0.5;
        }
        double v50 = v29 + v35;
        double v51 = v30 + v34;
        double v52 = v31 - v35 * 2.0;
        double v53 = v32 - v34 * 2.0;
        if (v52 <= 0.0 || v32 - v34 * 2.0 <= 0.0)
        {
          double v52 = 0.0;
          double v53 = 0.0;
        }
        uint64_t v36 = CA::CG::mat2_filter_bits((uint64_t)v25);
        int v42 = CA::CG::rect_filter_bits((uint64_t)&v50, v25, v36, v37, v38, v39, v40, v41);
        uint64_t v58 = 0;
        int v43 = v42 | 0x100000;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v55 = 0u;
        double v44 = *(double *)((char *)a2 + v49);
        memset(v54, 0, sizeof(v54));
        CA::Transform::set_affine((CA::Transform *)v54, v44, v25[1], v25[2], v25[3], v25[4], v25[5]);
        *((void *)&v55 + 1) = &v50;
        *(void *)&long long v56 = v54;
        DWORD2(v56) = v43;
        HIDWORD(v56) = (v5 << 31 >> 31);
        uint64_t v58 = 0;
        long long v57 = 0uLL;
        CA::OGL::stroke_rect(v4, (const CA::Transform **)&v55 + 1, v45, v46, v23);
        unint64_t v26 = *((void *)this + 14);
      }
      ++v27;
      v28 += 4;
    }
    while (v27 < v26);
  }
}

BOOL CA::CG::StrokeRects::shape_type(CA::CG::StrokeRects *this, CA::CG::Renderer *a2)
{
  uint64_t v2 = (const CGRect *)*((void *)this + 14);
  return (unint64_t)v2 >= 2
      && (*((unsigned char *)this + 103) & 1) == 0
      && CA::CG::rects_intersect((CA::CG::StrokeRects *)((char *)this + 160), v2, *((double *)this + 16) * 0.5);
}

double *CA::CG::StrokeRects::compute_dod(CA::CG::StrokeRects *this, CA::Rect *a2)
{
  if (!*((void *)this + 14))
  {
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
LABEL_17:
    *((void *)a2 + 2) = 0x3EB0C6F7A0B5ED8DLL;
    goto LABEL_18;
  }
  CA::Rect::operator=((double *)a2, (double *)this + 20);
  unint64_t v5 = *((void *)this + 14);
  BOOL v6 = v5 > 1;
  unint64_t v7 = v5 - 1;
  if (v6)
  {
    int8x16_t v8 = *(int8x16_t *)a2;
    float64x2_t v21 = *((float64x2_t *)a2 + 1);
    int8x16_t v9 = (float64x2_t *)((char *)this + 208);
    v4.f64[0] = 0.0;
    float64x2_t v10 = v21;
    while (1)
    {
      float64x2_t v11 = v9[-1];
      int8x16_t v12 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, *v9).i64[0], 0);
      v13.i64[1] = *(void *)&v9->f64[1];
      *(double *)v13.i64 = -v9->f64[0];
      int8x16_t v14 = vbslq_s8(v12, v13, *(int8x16_t *)v9);
      v13.i64[0] = 0x8000000000000000;
      v12.i64[0] = *(_OWORD *)&vaddq_f64(v11, (float64x2_t)vbslq_s8(v12, *(int8x16_t *)v9, v13));
      v13.i64[0] = v12.i64[0];
      v13.i64[1] = *(void *)&v9[-1].f64[1];
      int8x16_t v15 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v9, 1)).i64[0], 0);
      v12.i64[1] = *(void *)&vaddq_f64(*v9, v11).f64[1];
      int8x16_t v16 = vbslq_s8(v15, v12, v13);
      v12.i64[0] = v14.i64[0];
      v12.i64[1] = *(void *)&vnegq_f64(*v9).f64[1];
      float64x2_t v17 = (float64x2_t)vbslq_s8(v15, v12, v14);
      BOOL v18 = v17.f64[0] < 0.0;
      if (v17.f64[1] < 0.0) {
        BOOL v18 = 1;
      }
      if (v10.f64[0] < 0.0 || v10.f64[1] < 0.0)
      {
        if (!v18) {
          goto LABEL_12;
        }
      }
      else if (!v18)
      {
        int8x16_t v19 = (int8x16_t)vaddq_f64((float64x2_t)v8, v10);
        int8x16_t v20 = (int8x16_t)vaddq_f64((float64x2_t)v16, v17);
        int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v16, (float64x2_t)v8), v8, v16);
        float64x2_t v17 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v19, (float64x2_t)v20), v19, v20), (float64x2_t)v16);
LABEL_12:
        *(int8x16_t *)a2 = v16;
        *((float64x2_t *)a2 + 1) = v17;
        v21.f64[0] = v17.f64[0];
        int8x16_t v8 = v16;
        float64x2_t v10 = v17;
      }
      v9 += 2;
      if (!--v7) {
        goto LABEL_16;
      }
    }
  }
  v21.f64[0] = *((float64_t *)a2 + 2);
LABEL_16:
  if (v21.f64[0] == 0.0) {
    goto LABEL_17;
  }
LABEL_18:
  if (*((double *)a2 + 3) == 0.0) {
    *((void *)a2 + 3) = 0x3EB0C6F7A0B5ED8DLL;
  }
  if ((*((unsigned char *)this + 100) & 4) == 0) {
    CA::Rect::apply_transform((float64x2_t *)a2, (const CGAffineTransform *)((char *)this + 8));
  }
  double v22 = -CA::CG::stroke_radius((uint64_t)this + 120, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  double v24 = -v23;

  return CA::BoundsImpl::inset_point((double *)a2, v22, v24);
}

void CA::CG::StrokeRects::~StrokeRects(CA::CG::StrokeRects *this)
{
  *(void *)this = &unk_1ED027AF0;
  if (*((void *)this + 17)) {
    CGDashRelease();
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED027AF0;
  if (*((void *)this + 17)) {
    CGDashRelease();
  }

  CA::CG::DrawOp::~DrawOp(this);
}

uint64_t CA::CG::DrawTransparencyLayer::draw_shape_and_color(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawTransparencyLayer *, CA::CG::Renderer *))(*(void *)this + 168))(this, a2);
}

uint64_t CA::CG::DrawTransparencyLayer::draw_color(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  void v33[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (CA::OGL::Context *)*((void *)a2 + 1);
  uint64_t v4 = *((void *)v3 + 2);
  if ((*(unsigned char *)(v4 + 481) & 1) != 0 && *(unsigned __int8 *)(v4 + 480) <= 1u)
  {
    *(unsigned char *)(v4 + 481) &= ~1u;
    int v5 = 1;
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = *((void *)this + 14);
  uint64_t v7 = *(void *)(v6 + 40);
  if (v7)
  {
    double v8 = *(double *)(v6 + 48) * *((double *)a2 + 10);
    *(double *)double v31 = v8;
    v31[1] = 0;
    v31[2] = 0;
    *(double *)&v31[3] = v8;
    v31[4] = 0;
    v31[5] = 0;
    if (v8 == 1.0)
    {
      uint64_t v13 = 1;
      unint64_t v14 = 5;
      while (v13 != 6)
      {
        double v15 = *(double *)&v31[v13];
        double v16 = CA::Mat2Impl::mat2_identity_double[v13++];
        if (v15 != v16)
        {
          unint64_t v14 = v13 - 2;
          break;
        }
      }
      BOOL v9 = v14 < 5;
    }
    else
    {
      BOOL v9 = 1;
    }
    CA::OGL::Context::bind_surface((uint64_t)v3, v7, 0, v9, v9, 0.0);
    int v19 = *(_DWORD *)(v7 + 40);
    int v20 = *(_DWORD *)(v7 + 44);
    if (v19 <= v20) {
      int v21 = *(_DWORD *)(v7 + 44);
    }
    else {
      int v21 = *(_DWORD *)(v7 + 40);
    }
    v17.i32[0] = 1073741822;
    v18.i32[0] = v21;
    int8x16_t v22 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v18, v17), 0);
    uint64_t v23 = *(void *)(v7 + 32);
    v24.i64[0] = (int)v23;
    v24.i64[1] = SHIDWORD(v23);
    int8x16_t v25 = vbslq_s8(v22, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v24));
    double v26 = (double)v19;
    if (v21 > 1073741822) {
      double v26 = 1.79769313e308;
    }
    int8x16_t v29 = v25;
    if (v21 <= 1073741822) {
      double v27 = (double)v20;
    }
    else {
      double v27 = 1.79769313e308;
    }
    v30.f64[0] = v26;
    v30.f64[1] = v27;
    v33[0] = 0;
    v33[1] = vcvt_f32_f64(v30);
    memset(v32, 0, sizeof(v32));
    CA::Transform::set_affine((CA::Transform *)v32, v8, 0.0, 0.0, v8, 0.0, 0.0);
    *(void *)&v32[152] = &v29;
    *(void *)&v32[160] = v32;
    memset(&v32[168], 0, 32);
    CA::OGL::fill_rect_tex(v3, (uint64_t)&v32[152], (uint64_t)v33, v28);
    uint64_t result = CA::OGL::Context::unbind_surface(v3, v7, 0);
    if (v5) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v10 = *((void *)v3 + 2);
    uint64_t v11 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = 0;
    uint64_t result = CA::OGL::emit_shape(v3, *(CA::OGL::Context **)(*((void *)v3 + 31) + 8), a3);
    *(void *)(*((void *)v3 + 2) + 8) = v11;
    if (v5) {
LABEL_24:
    }
      *(unsigned char *)(*((void *)v3 + 2) + 481) |= 1u;
  }
  return result;
}

uint64_t CA::CG::DrawTransparencyLayer::color_type(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2)
{
  return 0;
}

uint64_t CA::CG::DrawTransparencyLayer::debug_color(CA::CG::DrawTransparencyLayer *this)
{
  return 0;
}

BOOL CA::CG::DrawTransparencyLayer::shape_extent_contains(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  uint64_t v3 = *(void *)(*((void *)this + 14) + 40);
  return v3 && CA::Bounds::contains((CA::Bounds *)(v3 + 32), (uint64_t)a3);
}

void *CA::CG::DrawTransparencyLayer::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v11 = malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (v11)
  {
    int8x16_t v12 = *(atomic_uint **)(a1 + 112);
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
    void *v11 = &unk_1ED028848;
    v11[14] = a1;
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
    v11[15] = a3;
    void *v11 = &unk_1ED029B60;
    atomic_fetch_add(v12, 1u);
    v11[20] = v12;
  }
  return v11;
}

{
  malloc_zone_t *malloc_zone;
  void *v11;
  atomic_uint *v12;
  CGColor *Color;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v11 = malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (v11)
  {
    int8x16_t v12 = *(atomic_uint **)(a1 + 112);
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2048);
    void *v11 = &unk_1ED028BC0;
    v11[14] = a1;
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
    v11[15] = a3;
    void *v11 = &unk_1ED029C28;
    atomic_fetch_add(v12, 1u);
    v11[20] = v12;
  }
  return v11;
}

float16x4_t *CA::CG::DrawTransparencyLayer::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (float16x4_t *)malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result)
  {
    int8x16_t v12 = *(atomic_uint **)(a1 + 112);
    uint64_t result = CA::CG::DrawFocusRing::DrawFocusRing(result, a2, a1, a4, a5, a3);
    float16x4_t *result = (float16x4_t)&unk_1ED029A88;
    atomic_fetch_add(v12, 1u);
    result[20] = (float16x4_t)v12;
  }
  return result;
}

__n128 CA::CG::DrawTransparencyLayer::compute_dod(CA::CG::DrawTransparencyLayer *this, __n128 *a2)
{
  uint64_t v2 = *((void *)this + 14);
  if (*(void *)(v2 + 40)
    || ((unsigned int v3 = *((_DWORD *)this + 14), v3 <= 9) ? (v4 = ((0x164u >> v3) & 1) == 0) : (v4 = 0), v4))
  {
    *a2 = *(__n128 *)(v2 + 8);
    __n128 result = *(__n128 *)(v2 + 24);
    a2[1] = result;
  }
  return result;
}

void CA::CG::DrawTransparencyLayer::invalidate(CA::CG::DrawTransparencyLayer *this, CA::CG::Renderer *a2)
{
  uint64_t v4 = *((void *)this + 13);
  if (v4) {
    (*(void (**)(uint64_t, CA::CG::Renderer *))(*(void *)v4 + 16))(v4, a2);
  }
  uint64_t v5 = *((void *)this + 14);
  uint64_t v6 = *(void *)(v5 + 40);
  if (v6)
  {
    CA::OGL::Context::release_surface(*((void *)a2 + 1), v6);
    *(void *)(v5 + 4CASetDebugMessage("", 0) = 0;
  }
}

void CA::CG::DrawTransparencyLayer::~DrawTransparencyLayer(CA::CG::DrawTransparencyLayer *this)
{
  *(void *)this = &unk_1ED0295D8;
  uint64_t v2 = (atomic_uint *)*((void *)this + 14);
  if (v2) {
    CA::CG::TransparencyLayer::unref(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED0295D8;
  uint64_t v2 = (atomic_uint *)*((void *)this + 14);
  if (v2) {
    CA::CG::TransparencyLayer::unref(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

BOOL CAPoint3DEqualToPoint(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

uint64_t foreachLayer(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, a1);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v4 = (void *)[a1 sublayers];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v22;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v4);
        }
        foreachLayer(*(void *)(*((void *)&v21 + 1) + 8 * v8++), a2);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v21 objects:v20 count:16];
    }
    while (v6);
  }
  uint64_t v9 = [a1 mask];
  if (v9) {
    foreachLayer(v9, a2);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v10 = (void *)[a1 states];
  uint64_t result = [v10 countByEnumeratingWithState:&v16 objects:v15 count:16];
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = *(void *)v17;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * v14++) foreachLayer:a2];
      }
      while (v12 != v14);
      uint64_t result = [v10 countByEnumeratingWithState:&v16 objects:v15 count:16];
      uint64_t v12 = result;
    }
    while (result);
  }
  return result;
}

void sub_184940560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CA::emit_package_parse_error(CA *this, NSError **a2, NSString *a3)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = [NSString stringWithFormat:@"Unable to parse CAPackage: %@", a2];
  if (this)
  {
    if (!*(void *)this)
    {
      uint64_t v5 = *MEMORY[0x1E4F28568];
      v6[0] = result;
      uint64_t result = objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"CoreAnimationErrorDomain", 3, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1));
      *(void *)this = result;
    }
  }
  return result;
}

CALayer *recursively_prepare_contents(CALayer *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [(CALayer *)a1 prepareContents];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = [(CALayer *)a1 sublayers];
  uint64_t v3 = [(NSArray *)v2 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        recursively_prepare_contents(*(CALayer **)(*((void *)&v9 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      uint64_t v4 = [(NSArray *)v2 countByEnumeratingWithState:&v9 objects:v8 count:16];
    }
    while (v4);
  }
  uint64_t result = [(CALayer *)a1 mask];
  if (result) {
    return (CALayer *)recursively_prepare_contents(result);
  }
  return result;
}

void CA::CG::MetalQueue::~MetalQueue(CA::CG::MetalQueue *this)
{
  CA::CG::AccelQueue::~AccelQueue(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

float CA::OGL::BackdropBuffer::get_size(CA::OGL::BackdropBuffer *this, unsigned int *a2, unsigned int *a3, float *a4)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    *a2 = *(_DWORD *)(v4 + 40);
    *a3 = *(_DWORD *)(v4 + 44);
  }
  else
  {
    *a3 = 0;
    *a2 = 0;
  }
  float result = *((float *)this + 6);
  *a4 = result;
  return result;
}

void *CA::OGL::BackdropBuffer::copy(CA::OGL::BackdropBuffer *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v3 = malloc_type_zone_malloc(malloc_zone, 0xE0uLL, 0x8BB15036uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *((void *)this + 2);
    v3[1] = *((void *)this + 1);
    void v3[2] = v5;
    void *v3 = &unk_1ED02B630;
    v3[3] = *((void *)this + 3);
    uint64_t v6 = (_DWORD *)*((void *)this + 4);
    if (v6) {
      ++*v6;
    }
    v3[4] = v6;
    uint64_t v7 = (_DWORD *)*((void *)this + 5);
    if (v7) {
      ++*v7;
    }
    v3[5] = v7;
    *((_OWORD *)v3 + 3) = *((_OWORD *)this + 3);
    CA::Transform::operator=((uint64_t)(v3 + 8), (uint64_t)this + 64);
    char v8 = v4[27] & 0xFE | *((unsigned char *)this + 216) & 1;
    *((unsigned char *)v4 + 216) = v8;
    *((unsigned char *)v4 + 216) = *((unsigned char *)this + 216) & 2 | v8 & 0xF9 | 4;
  }
  return v4;
}

uint64_t CA::OGL::anonymous namespace'::replicate_backdrop_edges(uint64_t a1, uint64_t a2, CA::Shape **a3, int32x2_t *a4, uint64_t *a5, float a6)
{
  v95[3] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 128) = 0;
  uint64_t v44 = a1 + 834;
  *(void *)(a1 + 96) = a1 + 834;
  *(_OWORD *)(a1 + 104) = xmmword_184997E70;
  int v39 = (int)(16.0 / a6 + 1.0);
  int32x2_t v48 = 0;
  uint64_t v49 = 0;
  v95[1] = 0;
  v95[2] = 0;
  v95[0] = a2;
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v38 = _Q0;
  while (CA::ShapeIterator::iterate(v95, (int *)&v48))
  {
    uint64_t v14 = 0;
    int32x2_t v15 = vsub_s32(v48, *a4);
    v16.i64[0] = v15.i32[0];
    v16.i64[1] = v15.i32[1];
    float64x2_t v17 = vaddq_f64(vcvtq_f64_s64(v16), v38);
    int32x2_t v18 = (int32x2_t)vcvt_f32_f64(v17);
    float v19 = *(float *)v18.i32 + (float)(int)v49;
    v51[1] = *(float *)&v18.i32[1];
    float v53 = *(float *)&v18.i32[1] + -0.5;
    __int32 v74 = v18.i32[1];
    int v76 = HIDWORD(*(void *)&v18);
    int v54 = (int)v18;
    v77[6] = v39;
    v77[7] = HIDWORD(v49);
    unint64_t v78 = __PAIR64__(HIDWORD(v49), v39);
    int v81 = v39;
    int v82 = v39;
    int v85 = v39;
    int v86 = v39;
    int v89 = v39;
    int v90 = v39;
    int v93 = v39;
    int v94 = v39;
    float v20 = *(float *)&v18.i32[1] + (float)SHIDWORD(v49);
    v77[5] = v48.i32[1];
    int32x2_t v21 = v48;
    v77[13] = HIDWORD(*(void *)&v21);
    v77[0] = v21;
    v77[8] = v48.i32[0];
    v77[2] = v49;
    v77[1] = v48.i32[1] - v39;
    v77[3] = v39;
    v77[4] = v48.i32[0] - v39;
    v77[10] = v49;
    v77[9] = HIDWORD(v49) + v48.i32[1];
    v77[11] = v39;
    v77[12] = v49 + v48.i32[0];
    __int32 v79 = v48.i32[0] - v39;
    __int32 v80 = v48.i32[1] - v39;
    __int32 v83 = v48.i32[0] - v39;
    __int32 v84 = HIDWORD(v49) + v48.i32[1];
    int v87 = v49 + v48.i32[0];
    __int32 v88 = HIDWORD(v49) + v48.i32[1];
    int v91 = v49 + v48.i32[0];
    __int32 v92 = v48.i32[1] - v39;
    v51[0] = *(float *)v18.i32 + -0.5;
    v51[2] = v19 + -0.5;
    int32x2_t v52 = vrev64_s32(v18);
    float v55 = v20 + -0.5;
    float v56 = *(float *)v18.i32 + -0.5;
    float v57 = v20 + -1.0;
    float v58 = v19 + -0.5;
    float v59 = v20 + -1.0;
    float v60 = v19 + -1.0;
    float v61 = *(float *)&v18.i32[1] + -0.5;
    float v62 = v19 + -1.0;
    float v63 = v20 + -0.5;
    float32x4_t v64 = vcvt_hight_f32_f64(v18, v17);
    __int32 v65 = v18.i32[0];
    float v66 = v20 + -1.0;
    __int32 v67 = v18.i32[0];
    float v68 = v20 + -1.0;
    float v69 = v19 + -1.0;
    float v70 = v20 + -1.0;
    float v71 = v19 + -1.0;
    float v72 = v20 + -1.0;
    float v73 = v19 + -1.0;
    float v75 = v19 + -1.0;
    do
    {
      int8x16_t v47 = (CA::Shape *)CA::Shape::new_shape(&v77[4 * v14]);
      CA::shape_subtract(&v47, a3, v22, v23);
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      int v42 = v47;
      uint64_t v43 = v14;
      v50[0] = (uint64_t)v47;
      v50[1] = 0;
      _OWORD v50[2] = 0;
      long long v24 = &v51[4 * v14];
      while (CA::ShapeIterator::iterate(v50, (int *)&v45))
      {
        int v25 = v45;
        int v26 = HIDWORD(v45);
        int v28 = v46;
        int v27 = HIDWORD(v46);
        uint64_t v29 = 6;
        if (!*(_DWORD *)(a1 + 92)) {
          uint64_t v29 = 4;
        }
        if ((unint64_t)(*(void *)(a1 + 128) + 4) > *(void *)(a1 + 136)
          || (unint64_t v30 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v29 > v30)
        {
          *(_WORD *)(a1 + 832) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          *(void *)(a1 + 128) = 0;
          *(void *)(a1 + 96) = v44;
          *(_OWORD *)(a1 + 104) = xmmword_184997E70;
        }
        CA::OGL::Context::array_rect((void *)a1, (float)v25 * a6, (float)v26 * a6, (float)(v28 + v25) * a6, (float)(v27 + v26) * a6);
        uint64_t v31 = *a5;
        uint64_t v32 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
        *(void *)(v32 - 16CASetDebugMessage("", 0) = *a5;
        *(void *)(v32 - 112) = v31;
        *(void *)(v32 - 64) = v31;
        *(void *)(v32 - 16) = v31;
        int v33 = *((_DWORD *)v24 + 2);
        int v34 = *((_DWORD *)v24 + 3);
        uint64_t v35 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
        uint64_t v36 = *(void *)v24;
        *(void *)(v35 - 176) = *(void *)v24;
        *(_DWORD *)(v35 - 128) = v33;
        *(_DWORD *)(v35 - 124) = HIDWORD(v36);
        *(_DWORD *)(v35 - 8CASetDebugMessage("", 0) = v33;
        *(_DWORD *)(v35 - 76) = v34;
        *(_DWORD *)(v35 - 32) = v36;
        *(_DWORD *)(v35 - 28) = v34;
      }
      CA::Shape::unref(v42);
      uint64_t v14 = v43 + 1;
    }
    while (v43 != 7);
  }

  return CA::OGL::Context::array_flush(a1);
}

void CA::OGL::render_in_place_backdrop_with_color_matrix(CA::OGL::Renderer &,CA::OGL::Layer const*,CA::Render::BackdropGroup *,CA::Rect)::$_0::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

double CA::Render::Vector::distance_to(CA::Render::Vector *this, const CA::Render::Object *a2)
{
  LODWORD(v2) = *((_DWORD *)this + 4);
  unsigned int v3 = *((_DWORD *)a2 + 4);
  if (v2 >= v3) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v2;
  }
  if (v2)
  {
    uint64_t v4 = (double *)((char *)this + 24);
    uint64_t v5 = (double *)((char *)a2 + 24);
    double v6 = 0.0;
    do
    {
      double v7 = *v5++;
      double v8 = v7;
      double v9 = *v4++;
      double v6 = v6 + (v8 - v9) * (v8 - v9);
      --v2;
    }
    while (v2);
  }
  else
  {
    double v6 = 0.0;
  }
  return sqrt(v6);
}

double *CA::Render::Vector::mix@<X0>(CA::Render::Vector *this@<X0>, CA::Render::Object *a2@<X1>, CA::Render::Object *a3@<X2>, CA::Render::Object *a4@<X3>, const CA::Render::ValueInterpolator *a5@<X4>, double **a6@<X8>)
{
  unsigned int v12 = *((_DWORD *)this + 4);
  unsigned int v13 = *((_DWORD *)a3 + 4);
  if (v12 >= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v12;
  }
  if (a2)
  {
    unsigned int v15 = *((_DWORD *)a2 + 4);
    if (v14 >= v15) {
      unint64_t v14 = v15;
    }
    else {
      unint64_t v14 = v14;
    }
  }
  if (a4)
  {
    unsigned int v16 = *((_DWORD *)a4 + 4);
    if (v14 >= v16) {
      unint64_t v14 = v16;
    }
    else {
      unint64_t v14 = v14;
    }
  }
  float result = (double *)CA::Render::Vector::new_vector((CA::Render::Vector *)v14, 0, (const double *)a3);
  int32x2_t v18 = result;
  if (result)
  {
    if (a2) {
      float v19 = (double *)((char *)a2 + 24);
    }
    else {
      float v19 = 0;
    }
    if (a4) {
      float v20 = (double *)((char *)a4 + 24);
    }
    else {
      float v20 = 0;
    }
    float result = CA::Render::ValueInterpolator::mix_n<double>((double *)a5, v14, result + 3, v19, (double *)this + 3, (double *)a3 + 3, v20);
  }
  *a6 = v18;
  return result;
}

_DWORD *CA::Render::Vector::mix@<X0>(CA::Render::Vector *this@<X0>, CA::Render::Object *a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, void *a4@<X8>)
{
  unsigned int v8 = *((_DWORD *)this + 4);
  unsigned int v9 = *((_DWORD *)a2 + 4);
  if (v8 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v8;
  }
  float result = CA::Render::Vector::new_vector((CA::Render::Vector *)v10, 0, (const double *)a3);
  if (result) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    unsigned int v13 = (double *)((char *)a2 + 24);
    unint64_t v14 = (double *)((char *)this + 24);
    unsigned int v15 = (double *)(result + 6);
    do
    {
      double v16 = *v14++;
      double v17 = v16;
      double v18 = *v13++;
      *v15++ = v17 + *(double *)a3 * (v18 - v17);
      --v10;
    }
    while (v10);
  }
  *a4 = result;
  return result;
}

void CA::Render::Vector::show(CA::Render::Vector *this, unsigned int a2, char a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v4 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "(vector", buf, 2u);
      }
    }
    if (*((_DWORD *)this + 4))
    {
      unint64_t v5 = 0;
      double v6 = (uint64_t *)((char *)this + 24);
      do
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          double v7 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v8 = *v6;
            *(_DWORD *)long long buf = 134217984;
            uint64_t v11 = v8;
            _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, " %.10g", buf, 0xCu);
          }
        }
        ++v5;
        ++v6;
      }
      while (v5 < *((unsigned int *)this + 4));
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
}

void CA::Render::SecureIndicatorLayer::show(CA::Render::SecureIndicatorLayer *this, int a2, char a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      unsigned int v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        unint64_t v14 = "secure-indicator-layer";
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      double v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(secure-indicator-layer", buf, 2u);
      }
    }
    uint64_t v8 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v8);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *((_DWORD *)this + 4);
        *(_DWORD *)long long buf = 67109120;
        int v16 = v10;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "(privacy-indicator %u)", buf, 8u);
      }
    }
    if (*((_DWORD *)this + 4) >= 3u)
    {
      CA::Render::show_newline(v8);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *((unsigned __int16 *)this + 10);
          *(_DWORD *)long long buf = 67109120;
          int v16 = v12;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "(frame-number %hu)", buf, 8u);
        }
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    unsigned int v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      unint64_t v14 = ")";
LABEL_19:
      _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
    }
  }
}

void sub_18494250C(_Unwind_Exception *a1)
{
}

uint64_t ___Z23CATransactionDidPresentjjdyyh_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, double))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 48), *(double *)(a1 + 40));
}

uint64_t CA::Render::Animation::validate(CA::Render::Animation *this, CA::Render::Layer *a2)
{
  return 1;
}

void CA::Render::Animation::show(CA::Render::Animation *this, int a2, char a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 3);
  if ((v3 & 0x20000) != 0) {
    return;
  }
  BOOL v7 = x_log_hook_p();
  if ((a3 & 1) == 0)
  {
    if (v7)
    {
      x_log_();
    }
    else
    {
      uint64_t v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *((unsigned __int8 *)this + 12);
        if (v9 > 0x38 || (int v10 = CA::Render::type_names[v9], !*v10)) {
          *(double *)&int v10 = COERCE_DOUBLE("<unknown>");
        }
        *(_DWORD *)long long buf = 136315138;
        double v71 = *(double *)&v10;
        _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "(%s", buf, 0xCu);
      }
    }
    if (*((void *)this + 5))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      CA::Render::show_object(*((CA::Render **)this + 5), (const CA::Render::Object *)(a2 + 1));
    }
    if (*((float *)this + 6) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v12 = 1.0 / *((float *)this + 8);
          *(_DWORD *)long long buf = 134217984;
          double v71 = v12;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "(frameInterval %f)", buf, 0xCu);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x80) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "(discretizesTime true)", buf, 2u);
        }
      }
    }
    if (*((void *)this + 6))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "(timingFunction ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 6), (const CA::Render::Object *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 1) == 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "(enabled false)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 2) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, "(additive true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 4) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        double v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "(cumulative true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 8) == 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v19 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "(removedOnCompletion false)", buf, 2u);
        }
      }
    }
    if (CA::Render::Animation::affects_velocity(this))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v20 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v20, OS_LOG_TYPE_DEFAULT, "(affectsVelocity true)", buf, 2u);
        }
      }
    }
    if (v3 <= 0x1Au)
    {
      if (v3 != 5)
      {
        if (v3 != 21) {
          goto LABEL_149;
        }
        int32x2_t v21 = (CA::Render *)(a2 + 1);
LABEL_85:
        CA::Render::show_newline(v21);
        uint64_t v29 = (CA::Render *)*((void *)this + 12);
LABEL_148:
        CA::Render::show_object(v29, v21);
        goto LABEL_149;
      }
    }
    else if (v3 != 27 && v3 != 48)
    {
      if (v3 != 55) {
        goto LABEL_149;
      }
      int32x2_t v21 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        [(__CFString *)CAAtomGetString(*((_DWORD *)this + 23)) cStringUsingEncoding:4];
        x_log_();
      }
      else
      {
        unint64_t v30 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(double *)&uint64_t v31 = COERCE_DOUBLE([(__CFString *)CAAtomGetString(*((_DWORD *)this + 23)) cStringUsingEncoding:4]);
          *(_DWORD *)long long buf = 136315138;
          double v71 = *(double *)&v31;
          _os_log_impl(&dword_184668000, v30, OS_LOG_TYPE_DEFAULT, "(type %s)", buf, 0xCu);
        }
      }
      if (*((_DWORD *)this + 24))
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          [(__CFString *)CAAtomGetString(*((_DWORD *)this + 24)) cStringUsingEncoding:4];
          x_log_();
        }
        else
        {
          float64x2_t v38 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(double *)&uint64_t v39 = COERCE_DOUBLE([(__CFString *)CAAtomGetString(*((_DWORD *)this + 24)) cStringUsingEncoding:4]);
            *(_DWORD *)long long buf = 136315138;
            double v71 = *(double *)&v39;
            _os_log_impl(&dword_184668000, v38, OS_LOG_TYPE_DEFAULT, "(subtype %s)", buf, 0xCu);
          }
        }
      }
      if (*((void *)this + 14))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int8x16_t v40 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v40, OS_LOG_TYPE_DEFAULT, "(filter ", buf, 2u);
          }
        }
        CA::Render::show_newline(v21);
        CA::Render::show_object(*((CA::Render **)this + 14), v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int8x16_t v41 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v41, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      if (*((void *)this + 15))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int v42 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v42, OS_LOG_TYPE_DEFAULT, "(options ", buf, 2u);
          }
        }
        CA::Render::show_newline(v21);
        CA::Render::show_object(*((CA::Render **)this + 15), v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v43 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v43, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      CA::Render::show_newline(v21);
      uint64_t v29 = (CA::Render *)*((void *)this + 16);
      goto LABEL_148;
    }
    int32x2_t v21 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v21);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v23 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, "(keyPath ", buf, 2u);
      }
    }
    CFStringRef v24 = CA::Render::key_path_copy_string(*((void *)this + 12), v22);
    CA::Render::show_cfstring(v24, v25);
    CFRelease(v24);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v26 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v26, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
    if (*((void *)this + 13))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v27 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_DEFAULT, "(function ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 13), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v28 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (v3 > 0x1Au)
    {
      if (v3 == 27)
      {
        if (*((unsigned __int8 *)this + 144) <= 4u)
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float v58 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              float v59 = CA::Render::Animation::show(unsigned int,unsigned int)const::calc_modes[*((unsigned __int8 *)this
                                                                                            + 144)];
              *(_DWORD *)long long buf = 136315138;
              double v71 = *(double *)&v59;
              _os_log_impl(&dword_184668000, v58, OS_LOG_TYPE_DEFAULT, "(calculationMode %s)", buf, 0xCu);
            }
          }
        }
        if (*((void *)this + 14))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float v60 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_184668000, v60, OS_LOG_TYPE_DEFAULT, "(values ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 14), v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float v61 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_184668000, v61, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        if (*((void *)this + 15))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float v62 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_184668000, v62, OS_LOG_TYPE_DEFAULT, "(keyTimes ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 15), v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float v63 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_184668000, v63, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        if (*((void *)this + 16))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float32x4_t v64 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_184668000, v64, OS_LOG_TYPE_DEFAULT, "(timingFunctions ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 16), v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            __int32 v65 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_184668000, v65, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        if (*((void *)this + 17))
        {
          CA::Render::show_newline(v21);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float v66 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_184668000, v66, OS_LOG_TYPE_DEFAULT, "(path ", buf, 2u);
            }
          }
          CA::Render::show_object(*((CA::Render **)this + 17), v21);
          if (!x_log_hook_p())
          {
            float v56 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_149;
            }
            *(_WORD *)long long buf = 0;
            float v57 = ")";
            goto LABEL_214;
          }
LABEL_211:
          x_log_();
        }
LABEL_149:
        if (x_log_hook_p())
        {
LABEL_150:
          x_log_();
          return;
        }
        uint64_t v44 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v45 = ")";
          uint64_t v46 = v44;
          uint32_t v47 = 2;
LABEL_153:
          _os_log_impl(&dword_184668000, v46, OS_LOG_TYPE_DEFAULT, v45, buf, v47);
          return;
        }
        return;
      }
      if (v3 != 48) {
        goto LABEL_149;
      }
    }
    else if (v3 != 5)
    {
      if (v3 != 21) {
        goto LABEL_149;
      }
      goto LABEL_85;
    }
    if (*((void *)this + 14))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v32 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v32, OS_LOG_TYPE_DEFAULT, "(from ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 14), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v33 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v33, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (*((void *)this + 15))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v34 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v34, OS_LOG_TYPE_DEFAULT, "(to ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 15), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v35 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v35, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (*((void *)this + 16))
    {
      CA::Render::show_newline(v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v36 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v36, OS_LOG_TYPE_DEFAULT, "(by ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 16), v21);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int8x16_t v37 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v37, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (v3 == 48)
    {
      if (*((double *)this + 19) != 1.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int32x2_t v48 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            double v49 = *((double *)this + 19);
            *(_DWORD *)long long buf = 134217984;
            double v71 = v49;
            _os_log_impl(&dword_184668000, v48, OS_LOG_TYPE_DEFAULT, "(mass %g)", buf, 0xCu);
          }
        }
      }
      if (*((double *)this + 20) != 100.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          double v50 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            double v51 = *((double *)this + 20);
            *(_DWORD *)long long buf = 134217984;
            double v71 = v51;
            _os_log_impl(&dword_184668000, v50, OS_LOG_TYPE_DEFAULT, "(stiffness %g)", buf, 0xCu);
          }
        }
      }
      if (*((double *)this + 21) != 10.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int32x2_t v52 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            double v53 = *((double *)this + 21);
            *(_DWORD *)long long buf = 134217984;
            double v71 = v53;
            _os_log_impl(&dword_184668000, v52, OS_LOG_TYPE_DEFAULT, "(damping %g)", buf, 0xCu);
          }
        }
      }
      if (*((double *)this + 22) != 0.0)
      {
        CA::Render::show_newline(v21);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int v54 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            double v55 = *((double *)this + 22);
            *(_DWORD *)long long buf = 134217984;
            double v71 = v55;
            _os_log_impl(&dword_184668000, v54, OS_LOG_TYPE_DEFAULT, "(velocity %g)", buf, 0xCu);
          }
        }
      }
      if (*((unsigned char *)this + 184))
      {
        CA::Render::show_newline(v21);
        if (!x_log_hook_p())
        {
          float v56 = x_log_category_render;
          if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_149;
          }
          *(_WORD *)long long buf = 0;
          float v57 = "(allowsOverdamping true)";
LABEL_214:
          _os_log_impl(&dword_184668000, v56, OS_LOG_TYPE_DEFAULT, v57, buf, 2u);
          goto LABEL_149;
        }
        goto LABEL_211;
      }
    }
    goto LABEL_149;
  }
  if (v7) {
    goto LABEL_150;
  }
  uint64_t v67 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v68 = *((unsigned __int8 *)this + 12);
    if (v68 > 0x38 || (float v69 = CA::Render::type_names[v68], !*v69)) {
      *(double *)&float v69 = COERCE_DOUBLE("<unknown>");
    }
    *(_DWORD *)long long buf = 136315138;
    double v71 = *(double *)&v69;
    uint64_t v45 = "%s;";
    uint64_t v46 = v67;
    uint32_t v47 = 12;
    goto LABEL_153;
  }
}

uint64_t CA::Render::anonymous namespace'::add_transforms(float64x2_t *this, double *a2, double *a3, const double *a4, int a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a4 == (const double *)6)
  {
    float64x2_t v20 = *(float64x2_t *)a2;
    float64x2_t v21 = *(float64x2_t *)(a2 + 2);
    float64x2_t v22 = *(float64x2_t *)(a2 + 4);
    float64x2_t v23 = *(float64x2_t *)a3;
    float64x2_t v24 = *(float64x2_t *)(a3 + 2);
    float64x2_t v31 = *(float64x2_t *)a3;
    float64x2_t v32 = v24;
    float64x2_t v25 = *(float64x2_t *)(a3 + 4);
    float64x2_t v33 = v25;
    if (a5)
    {
      float64x2_t v28 = v21;
      float64x2_t v29 = v22;
      float64x2_t v27 = v20;
      CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v31, v31.f64, a3);
      float64x2_t v20 = v27;
      float64x2_t v21 = v28;
      float64x2_t v22 = v29;
      float64x2_t v23 = v31;
      float64x2_t v24 = v32;
      float64x2_t v25 = v33;
    }
    *this = vmlaq_laneq_f64(vmulq_n_f64(v23, v20.f64[0]), v24, v20, 1);
    this[1] = vmlaq_laneq_f64(vmulq_n_f64(v23, v21.f64[0]), v24, v21, 1);
    this[2] = vmlaq_laneq_f64(vmlaq_n_f64(v25, v23, v22.f64[0]), v24, v22, 1);
    return 1;
  }
  if (a4 == (const double *)16)
  {
    float64x2_t v6 = *(float64x2_t *)(a2 + 10);
    float64x2_t v35 = *(float64x2_t *)(a2 + 8);
    float64x2_t v36 = v6;
    float64x2_t v7 = *(float64x2_t *)(a2 + 14);
    float64x2_t v37 = *(float64x2_t *)(a2 + 12);
    float64x2_t v38 = v7;
    float64x2_t v8 = *(float64x2_t *)(a2 + 2);
    float64x2_t v31 = *(float64x2_t *)a2;
    float64x2_t v32 = v8;
    float64x2_t v9 = *(float64x2_t *)(a2 + 6);
    float64x2_t v33 = *(float64x2_t *)(a2 + 4);
    float64x2_t v34 = v9;
    long long v10 = *(_OWORD *)a3;
    long long v11 = *((_OWORD *)a3 + 1);
    long long v12 = *((_OWORD *)a3 + 3);
    _OWORD v30[2] = *((_OWORD *)a3 + 2);
    v30[3] = v12;
    v30[0] = v10;
    v30[1] = v11;
    long long v13 = *((_OWORD *)a3 + 4);
    long long v14 = *((_OWORD *)a3 + 5);
    long long v15 = *((_OWORD *)a3 + 7);
    v30[6] = *((_OWORD *)a3 + 6);
    v30[7] = v15;
    v30[4] = v13;
    v30[5] = v14;
    if (a5) {
      CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)v30, (CA::Mat4Impl *)v30, a3);
    }
    CA::Mat4Impl::mat4_concat(&v31, v31.f64, (const double *)v30, a4);
    float64x2_t v16 = v36;
    this[4] = v35;
    this[5] = v16;
    float64x2_t v17 = v38;
    this[6] = v37;
    this[7] = v17;
    float64x2_t v18 = v32;
    *this = v31;
    this[1] = v18;
    float64x2_t v19 = v34;
    this[2] = v33;
    this[3] = v19;
    return 1;
  }
  return 0;
}

float64_t CA::Render::animation_get_function_param(CA::Render *this, const unsigned int *a2, const unsigned int *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  float64_t result = 0.0;
  if (this == 1)
  {
    memset(v7, 0, sizeof(v7));
    property_uint64_t value = CA::Render::Layer::get_property_value(*(CA::Render::Layer **)(a4 + 8), a2, (uint64_t)a3, 4uLL, v7, 0, 0.0);
    float64_t result = v7[0].f64[0];
    if (!property_value) {
      return 0.0;
    }
  }
  return result;
}

void CA::Render::BasicAnimation0::~BasicAnimation0(CA::Render::BasicAnimation0 *this, void **a2)
{
  *(void *)this = &unk_1ED02DF68;
  int v3 = (atomic_uint *)*((void *)this + 16);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 15);
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
  }
  unint64_t v5 = (atomic_uint *)*((void *)this + 14);
  if (v5 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
  }
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v3;
  atomic_uint *v4;
  atomic_uint *v5;
  uint64_t vars8;

  *(void *)this = &unk_1ED02DF68;
  int v3 = (atomic_uint *)*((void *)this + 16);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 15);
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
  }
  unint64_t v5 = (atomic_uint *)*((void *)this + 14);
  if (v5 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
  }

  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
}

void ___ZNK2CA6Render17KeyframeAnimation9next_timeEdfPKvNS0_26AnimationFrameRateOverrideEjbRdPKNS0_5LayerEPKNS_4Vec2IdEERj_block_invoke(uint64_t a1, const double *a2, double a3)
{
  double v3 = (a3 - *(double *)(a1 + 32)) / (*(double *)(a1 + 40) - *(double *)(a1 + 32));
  if (v3 > 1.0) {
    double v3 = 1.0;
  }
  if (v3 < 0.0) {
    double v3 = 0.0;
  }
  if (*(unsigned char *)(a1 + 64)) {
    CA::Render::TimingFunction::evaluate(*(CA::Render::TimingFunction **)(a1 + 48), a2, v3, 0.001 / *(double *)(a1 + 56));
  }
}

double ___ZNK2CA6Render17KeyframeAnimation9next_timeEdfPKvNS0_26AnimationFrameRateOverrideEjbRdPKNS0_5LayerEPKNS_4Vec2IdEERj_block_invoke_2(uint64_t a1, const double *a2, double a3)
{
  if (*(unsigned char *)(a1 + 64))
  {
    a3 = CA::Render::TimingFunction::evaluate_inverse(*(CA::Render::TimingFunction **)(a1 + 32), a2, a3, 0.001 / *(double *)(a1 + 40));
    if (a3 > 1.0) {
      a3 = 1.0;
    }
    if (a3 < 0.0) {
      a3 = 0.0;
    }
  }
  double result = *(double *)(a1 + 56) + (*(double *)(a1 + 48) - *(double *)(a1 + 56)) * a3;
  if (result > 1.0) {
    double result = 1.0;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

void CA::Render::PresentationModifier::show(CA::Render::PresentationModifier *this, int a2, char a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float64x2_t v29 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        unint64_t v30 = "presentation modifier;";
        goto LABEL_49;
      }
    }
  }
  else
  {
    uint64_t v4 = *((void *)this + 2);
    unint64_t v5 = *(void *)(v4 + 16);
    unint64_t v6 = v5 - 40;
    if (v5 >= 0x28)
    {
      unint64_t v7 = *((unsigned int *)this + 6);
      if (v7 < v6 >> 3)
      {
        uint64_t v8 = *(void *)(v4 + 24);
        uint64_t v9 = v8 + v5 - 8 * v7;
        uint64_t v10 = *(unsigned int *)(v9 - 8);
        if (v10)
        {
          uint64_t v11 = (16 * v10) | 8;
          unint64_t v12 = *(unsigned int *)(v9 - 4);
          if (v6 >= v12 && 3 * v11 + v12 <= v6)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              long long v15 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(modifier", buf, 2u);
              }
            }
            float64x2_t v16 = (CA::Render *)(a2 + 1);
            CA::Render::show_newline(v16);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              float64x2_t v18 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "(keyPath ", buf, 2u);
              }
            }
            CFStringRef v19 = CA::Render::key_path_copy_string(*((void *)this + 4), v17);
            CA::Render::show_cfstring(v19, v20);
            CFRelease(v19);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              float64x2_t v21 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
            if (*((unsigned char *)this + 13))
            {
              CA::Render::show_newline(v16);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                float64x2_t v22 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "(additive true)", buf, 2u);
                }
              }
            }
            if (!*(_WORD *)(v8 + v12 + 40 + 2 * v11))
            {
              CA::Render::show_newline(v16);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                float64x2_t v23 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, "(enabled false)", buf, 2u);
                }
              }
            }
            CA::Render::show_newline(v16);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              float64x2_t v24 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_DEFAULT, "(values", buf, 2u);
              }
            }
            float64x2_t v25 = (uint64_t *)(v12 + 32 * v10 + v8 + 64);
            do
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                int v26 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v27 = *v25;
                  *(_DWORD *)long long buf = 134217984;
                  uint64_t v32 = v27;
                  _os_log_impl(&dword_184668000, v26, OS_LOG_TYPE_DEFAULT, " %.10g", buf, 0xCu);
                }
              }
              ++v25;
              --v10;
            }
            while (v10);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              float64x2_t v28 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
            if (x_log_hook_p())
            {
              x_log_();
              return;
            }
            float64x2_t v29 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              unint64_t v30 = ")";
LABEL_49:
              _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, 2u);
            }
          }
        }
      }
    }
  }
}

void CA::Render::KeyframeAnimation::update_paced_key_times(CA::Render::KeyframeAnimation *this)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 16);
    unint64_t v4 = (v3 - 1);
    if (v4 >= 0x201)
    {
      unint64_t v6 = (char *)malloc_type_malloc(8 * (v3 - 1), 0x100004000313F17uLL);
      if (!v6) {
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](this);
      unint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFF0);
      bzero(v6, v5);
      if (!v4) {
        goto LABEL_22;
      }
    }
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v11 = v2 + 8 * i;
      unint64_t v7 = *(unsigned __int8 **)(v11 + 24);
      uint64_t v12 = *(void *)(v11 + 32);
      v8.n128_u64[0] = 0;
      if (v7) {
        BOOL v13 = v12 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13 && *(unsigned __int8 *)(v12 + 12) == v7[12]) {
        v8.n128_f64[0] = (*(double (**)(unsigned __int8 *, __n128))(*(void *)v7 + 72))(v7, v8);
      }
      *(void *)&v6[8 * i] = v8.n128_u64[0];
    }
  }
  else
  {
    uint64_t v9 = (unsigned int *)*((void *)this + 17);
    if (!v9) {
      return;
    }
    unint64_t v4 = v9[4];
    unint64_t v7 = (unsigned __int8 *)CA::Render::Path::keyframe_lengths((CA::Render::Path *)v9);
    if (!v7) {
      return;
    }
    unint64_t v6 = (char *)v7;
  }
  if (!v4)
  {
LABEL_22:
    MEMORY[0x1F4188790](v7);
    float64x2_t v18 = &v25[-2];
    unint64_t v4 = 0;
    v25[-2] = 0;
    uint64_t v16 = 1;
LABEL_27:
    float64x2_t v23 = CA::Render::Vector::new_vector((CA::Render::Vector *)v16, v18, v19);
    float64x2_t v24 = (atomic_uint *)*((void *)this + 15);
    *((void *)this + 15) = v23;
    if (v4 >= 0x200) {
      free(v18);
    }
    *((_DWORD *)this + 3) |= 0x4000000u;
    if (v24 && atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
    }
    goto LABEL_32;
  }
  uint64_t v14 = 0;
  double v15 = 0.0;
  do
    double v15 = *(double *)&v6[8 * v14++] + v15;
  while (v4 != v14);
  uint64_t v16 = v4 + 1;
  if (v4 < 0x200)
  {
    MEMORY[0x1F4188790](v7);
    float64x2_t v18 = (void *)((char *)v25 - ((v17 + 15) & 0x1FFFFFFFF0));
    bzero(v18, v17);
    goto LABEL_25;
  }
  CFStringRef v20 = malloc_type_malloc(8 * (v4 + 1), 0x89AD1D66uLL);
  if (v20)
  {
    float64x2_t v18 = v20;
LABEL_25:
    *float64x2_t v18 = 0;
    uint64_t v21 = 0;
    double v22 = 0.0;
    do
    {
      double v22 = *(double *)&v6[8 * v21] + v22;
      *(double *)&v18[++v21] = v22 * (1.0 / v15);
    }
    while (v4 != v21);
    goto LABEL_27;
  }
LABEL_32:
  if (v2)
  {
    if (v4 >= 0x201) {
      free(v6);
    }
  }
}

void ___ZN2CA6Render18AnimationEvaluator13velocity_passENS_4Vec2IdEES3_bRNS2_IfEERf_block_invoke()
{
  if (initialize_velocity_thresholds(void)::once[0] != -1) {
    dispatch_once(initialize_velocity_thresholds(void)::once, &__block_literal_global_19);
  }
  if (has_velocity_thresholds) {
    CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::thresholds = velocity_thresholds;
  }
  CA::Render::AnimationEvaluator::velocity_pass(CA::Vec2<double>,CA::Vec2<double>,BOOL,CA::Vec2<float> &,float &)::has_thresholds = has_velocity_thresholds;
}

void sub_184945B00(_Unwind_Exception *a1)
{
}

uint64_t CA::CG::AccelDrawable::needs_gpu(CA::CG::AccelDrawable *this)
{
  return 0;
}

void CA::CG::AccelDrawable::destroy(CGColorSpaceRef *this)
{
  CA::CG::AccelDrawable::detach((CA::CG::AccelDrawable *)this, 1);
  CGColorSpaceRef v2 = this[9];
  if (v2) {
    (*(void (**)(CGColorSpaceRef))(*(void *)v2 + 8))(v2);
  }
  CGColorSpaceRelease(this[3]);
  *((unsigned char *)this + 7CASetDebugMessage("", 0) = 1;
}

void CA::CG::AccelDrawable::detach(CA::CG::AccelDrawable *this, int a2)
{
  uint64_t v4 = *((void *)this + 9);
  if (v4) {
    CA::CG::Queue::flush(v4, 3, 1);
  }
  CA::CG::AccelDrawable::detach_providers(this, 1);
  if (!a2) {
    goto LABEL_7;
  }
  size_t v5 = (os_unfair_lock_s *)&CA::CG::AccelRenderer::_list_lock;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  for (uint64_t i = CA::CG::AccelRenderer::_list; i; uint64_t i = *(void *)(i + 4272))
  {
    uint64_t v7 = *(void *)(i + 8);
    uint64_t v8 = (*(uint64_t (**)(CA::CG::AccelDrawable *))(*(void *)this + 24))(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v8);
  }
  while (1)
  {
    os_unfair_lock_unlock(v5);
LABEL_7:
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    uint64_t v9 = CA::CG::AccelRenderer::_list;
    if (!CA::CG::AccelRenderer::_list) {
      break;
    }
    while (*(CA::CG::AccelDrawable **)(v9 + 4264) != this)
    {
      uint64_t v9 = *(void *)(v9 + 4272);
      if (!v9) {
        goto LABEL_10;
      }
    }
    size_t v5 = (os_unfair_lock_s *)(v9 + 4224);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 4224));
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    if (*(CA::CG::AccelDrawable **)(v9 + 4264) == this) {
      CA::CG::AccelRenderer::detach_surface((CFTypeRef *)v9, a2);
    }
  }
LABEL_10:

  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
}

void CA::CG::detach_provider_callback(os_unfair_lock_s *this, void *a2)
{
  CA::CG::AccelDataProvider::detach(this);
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)&this[3], 0xFFFFFFFF);
  if (this && add == 1)
  {
    uint64_t v4 = *(void (**)(os_unfair_lock_s *))(*(void *)&this->_os_unfair_lock_opaque + 16);
    v4(this);
  }
}

uint64_t CA::CG::AccelDrawable::unref(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = this;
    (**(void (***)(uint64_t))this)(this);
    CGColorSpaceRef v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 16);
    return v2(v1);
  }
  return this;
}

uint64_t CA::CG::AccelDrawable::set_volatile(os_unfair_lock_s *this, uint64_t a2)
{
  if (LOBYTE(this[17]._os_unfair_lock_opaque) == a2) {
    return 1;
  }
  if (a2) {
    CA::CG::AccelDrawable::detach((CA::CG::AccelDrawable *)this, 0);
  }
  os_unfair_lock_lock(this + 3);
  LOBYTE(this[17]._os_unfair_lock_opaque) = a2;
  uint64_t v5 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&this->_os_unfair_lock_opaque + 80))(this, a2);
  os_unfair_lock_unlock(this + 3);
  return v5;
}

void set_attr(CA::Transaction *a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  v10[0] = a2;
  uint64_t v5 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v5) {
    uint64_t v5 = (CA::Transaction *)CA::Transaction::create(a1);
  }
  unint64_t v6 = (const void *)CAInternAtom((const __CFString *)a1, 1);
  int v7 = *((_DWORD *)v5 + 25);
  *((_DWORD *)v5 + 25) = v7 + 1;
  if (!v7) {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  }
  uint64_t v8 = *(CA::AttrList **)(a3 + 24);
  if (!v8)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v8 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
  }
  *(void *)(a3 + 24) = CA::AttrList::set(v8, v6, 2, (unsigned __int8 *)v10);

  CA::Transaction::unlock(v5);
}

atomic_uint *copy_attr(atomic_uint *result, id *a2, int a3, uint64_t *a4)
{
  if ((a3 - 1) <= 3)
  {
    atomic_uint v5 = (int)result;
    double result = (atomic_uint *)objc_msgSend(*a2, "CA_copyRenderValue");
    if (result)
    {
      unint64_t v6 = result;
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      double result = (atomic_uint *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
      if (result)
      {
        result[2] = 1;
        result[3] = 28;
        ++dword_1EB2ADE38;
        *(void *)double result = &unk_1ED02FFB8;
        result[4] = v5;
        uint64_t v8 = v6;
        if (!atomic_fetch_add(v6 + 2, 1u))
        {
          uint64_t v8 = 0;
          atomic_fetch_add(v6 + 2, 0xFFFFFFFF);
        }
        *((void *)result + 3) = v8;
      }
      uint64_t v10 = *a4;
      uint64_t v9 = a4[1];
      ++*a4;
      *(void *)(v9 + 8 * v1CASetDebugMessage("", 0) = result;
      if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
      {
        uint64_t v11 = *(uint64_t (**)(atomic_uint *))(*(void *)v6 + 16);
        return (atomic_uint *)v11(v6);
      }
    }
  }
  return result;
}

void CA::OGL::Mosaic::delete_image(uint64_t a1, _DWORD *a2)
{
  unsigned int v3 = a2[7];
  if (v3)
  {
    uint64_t v4 = (void *)(*(void *)(a1 + 72) + 8 * ((*(_DWORD *)(a1 + 64) - 1) & v3));
    atomic_uint v5 = (void *)*v4;
    if (*v4)
    {
      if (v5 == (void *)a2)
      {
LABEL_7:
        *uint64_t v4 = *((void *)a2 + 2);
        --*(void *)(a1 + 80);
      }
      else
      {
        while (1)
        {
          unint64_t v6 = v5;
          atomic_uint v5 = (void *)v5[2];
          if (!v5) {
            break;
          }
          if (v5 == (void *)a2)
          {
            uint64_t v4 = v6 + 2;
            goto LABEL_7;
          }
        }
      }
    }
  }
  uint64_t v8 = *(void *)a2;
  int v7 = (void *)*((void *)a2 + 1);
  *(void *)(v8 + 8) = v7;
  void *v7 = v8;
  *(void *)a2 = a2;
  *((void *)a2 + 1) = a2;
  uint64_t v9 = (void *)*((void *)a2 + 5);
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)*v9;
      uint64_t v11 = (void *)v9[1];
      void *v9 = 0;
      uint64_t v12 = v11 + 4;
      uint64_t v13 = v11[6];
      if (v11[5]) {
        uint64_t v12 = (void *)v11[5];
      }
      *uint64_t v12 = v9;
      v11[5] = v9;
      v11[6] = v13 - 1;
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v14 = *((void *)a2 + 4);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, a2);
}

uint64_t CA::OGL::Mosaic::bind_buffer(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(void *)(result + 112) != a3)
  {
    unint64_t v6 = (float32x2_t *)result;
    if (*(void *)(result + 160))
    {
      (*(void (**)(uint64_t))(*(void *)a4 + 48))(a4);
      (*(void (**)(uint64_t *, void, void))(*a2 + 520))(a2, *(void *)&v6[20], v6[18].u32[0]);
      v6[20] = 0;
      v6[19].i32[0] = -1;
    }
    v6[14] = (float32x2_t)a3;
    float32x4_t v9 = 0uLL;
    int v7 = CA::OGL::Context::bind_image((uint64_t)a2, v6[18].u32[0], *(uint32x2_t **)(a3 + 16), (double *)0x103F, v6[18].u8[4], v6[18].u8[5], 0, 0, 0.0, &v9, 0);
    v6[20] = (float32x2_t)v7;
    if (v7)
    {
      float32x2_t v8 = vsub_f32(*(float32x2_t *)&v9.u32[2], *(float32x2_t *)v9.f32);
      v6[22] = *(float32x2_t *)v9.f32;
      v6[23] = v8;
      double result = CA::OGL::state_image_texture_unit(a2[2], v6[18].i32[0]);
    }
    else
    {
      v6[14] = 0;
      double result = 0xFFFFFFFFLL;
    }
    v6[19].i32[0] = result;
  }
  return result;
}

void CA::OGL::Mosaic::draw(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  int v138 = a6;
  if (!(a7 | a6) || (*(_DWORD *)(a1 + 144) & 0x80000000) != 0) {
    return;
  }
  int v14 = *(_DWORD *)(a1 + 4);
  int v15 = *(_DWORD *)(a1 + 8);
  int v109 = a4;
  int v16 = (v138 + v14 - 1) / v14;
  int v17 = a4;
  int v132 = a7;
  int v18 = (a7 + v15 - 1) / v15;
  int8x16_t v139 = a2;
  if (a4)
  {
    uint64_t v19 = *(void *)(a1 + 64);
    if (v19)
    {
      CFStringRef v20 = *(void **)(*(void *)(a1 + 72) + 8 * ((v19 - 1) & a4));
      if (v20)
      {
        while (1)
        {
          if (*((_DWORD *)v20 + 7) == v17
            && *((_DWORD *)v20 + 6) == a3
            && (__int16)v16 == *((__int16 *)v20 + 24)
            && (__int16)v18 == *((__int16 *)v20 + 25))
          {
            if (!a5) {
              break;
            }
            char v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)a5 + 16))(a5, v20[4]);
            int v17 = v109;
            a2 = v139;
            if (v21) {
              break;
            }
          }
          CFStringRef v20 = (void *)v20[2];
          if (!v20) {
            goto LABEL_13;
          }
        }
        uint64_t v107 = *v20;
        float v106 = (void *)v20[1];
        *(void *)(v107 + 8) = v106;
        *float v106 = v107;
        *CFStringRef v20 = v20;
        v20[1] = v20;
        ++*(void *)(a1 + 120);
        int v26 = v132;
        int v79 = v138;
        goto LABEL_105;
      }
    }
  }
LABEL_13:
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  float64x2_t v23 = malloc_type_zone_malloc(malloc_zone, 0x38uLL, 0x8BB15036uLL);
  int v24 = v109;
  CFStringRef v20 = v23;
  if (v23)
  {
    void v23[2] = 0;
    *((_DWORD *)v23 + 6) = a3;
    *((_DWORD *)v23 + 7) = v24;
    if (a5) {
      float64x2_t v23 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a5 + 24))(a5);
    }
    else {
      float64x2_t v23 = 0;
    }
    v20[4] = v23;
    void v20[5] = 0;
    *((_WORD *)v20 + 24) = v16;
    *((_WORD *)v20 + 25) = v18;
    *CFStringRef v20 = v20;
    v20[1] = v20;
  }
  uint64_t v25 = *(unsigned int *)(a1 + 20);
  if (v25 > 0x25) {
    unsigned int v115 = 0;
  }
  else {
    unsigned int v115 = dword_184999468[v25];
  }
  int v26 = v132;
  uint64_t v130 = v25;
  if (a8) {
    unsigned int v27 = *(_DWORD *)a1;
  }
  else {
    unsigned int v27 = 0;
  }
  uint64_t v131 = (*(_DWORD *)(a1 + 4) + v27) * v115;
  MEMORY[0x1F4188790](v23);
  float64x2_t v118 = &v108[-v28];
  bzero(&v108[-v28], v29);
  int v30 = *((__int16 *)v20 + 25);
  a2 = v139;
  if (v30 < 1)
  {
LABEL_91:
    int v79 = v138;
    if (v109)
    {
      uint64_t v80 = *(void *)(a1 + 64);
      if (*(void *)(a1 + 80) + 1 > (unint64_t)(2 * v80) && (unint64_t)(2 * v80) <= 0x400) {
        operator new[]();
      }
      if (v80)
      {
        unsigned int v85 = (v80 - 1) & v109;
        uint64_t v86 = *(void *)(a1 + 72);
        v20[2] = *(void *)(v86 + 8 * v85);
        *(void *)(v86 + 8 * v85) = v20;
        ++*(void *)(a1 + 80);
      }
    }
    ++*(void *)(a1 + 128);
LABEL_105:
    if (v26 >= 1)
    {
      int v87 = 0;
      __int32 v88 = (uint64_t *)v20[5];
      int v89 = *(_DWORD *)(a1 + 8);
      uint64_t v129 = v20;
      do
      {
        if (v89 >= v26 - v87) {
          int v90 = v26 - v87;
        }
        else {
          int v90 = v89;
        }
        if (v79 >= 1)
        {
          int v91 = 0;
          int v92 = (4 * (v87 == 0)) | (8 * (v90 + v87 == v26));
          int v93 = *(_DWORD *)(a1 + 4);
          do
          {
            if (v93 >= v79 - v91) {
              int v94 = v79 - v91;
            }
            else {
              int v94 = v93;
            }
            v95.i32[0] = *((__int16 *)v88 + 8);
            v95.i32[1] = *((__int16 *)v88 + 9);
            *(float32x2_t *)v96.f32 = vcvt_f32_s32(v95);
            v97.i64[0] = *(void *)(a1 + 40);
            int32x2_t v98 = (int32x2_t)vcvt_f32_s32(vadd_s32((int32x2_t)__PAIR64__(v90, v94), v95));
            *(float32x2_t *)v99.i8 = vmul_f32(vadd_f32(*(float32x2_t *)v96.f32, (float32x2_t)0x3F0000003F000000), *(float32x2_t *)v97.f32);
            *(int32x2_t *)&v96.u32[2] = v98;
            v99.i64[1] = v99.i64[0];
            v98.i16[0] = v94 == 1;
            v98.i16[1] = v90 == 1;
            v97.i64[1] = v97.i64[0];
            int8x16_t v100 = (int8x16_t)vmulq_f32(v97, v96);
            v97.i64[0] = *(void *)(a1 + 176);
            v101.i64[0] = *(void *)(a1 + 184);
            v97.i64[1] = v97.i64[0];
            v101.i64[1] = v101.i64[0];
            float32x4_t v141 = vmlaq_f32(v97, v101, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s32(v98, 0)), 0x1FuLL)), v99, v100));
            uint64_t v102 = v88[1];
            if (v102 != *(void *)(a1 + 112))
            {
              CA::OGL::Mosaic::bind_buffer(a1, v139, v88[1], a9);
              a2 = v139;
            }
            *(_DWORD *)(v102 + 56) = *((_DWORD *)a2 + 57);
            v140[0] = v91;
            v140[1] = v87;
            v140[2] = v94;
            v140[3] = v90;
            int v79 = v138;
            if (a10 && (int v103 = v92 | (v91 == 0) | (2 * (v94 + v91 == v138)), a4 = v103 & a10, (v103 & a10) != 0)) {
              (*(void (**)(uint64_t, _DWORD *, float32x4_t *, uint64_t))(*(void *)a9 + 32))(a9, v140, &v141, a4);
            }
            else {
              (*(void (**)(uint64_t, _DWORD *, float32x4_t *, uint64_t))(*(void *)a9 + 24))(a9, v140, &v141, a4);
            }
            a2 = v139;
            *((_DWORD *)v88 + 5) = *((_DWORD *)v139 + 57);
            __int32 v88 = (uint64_t *)*v88;
            int v93 = *(_DWORD *)(a1 + 4);
            v91 += v93;
          }
          while (v91 < v79);
          int v89 = *(_DWORD *)(a1 + 8);
          int v26 = v132;
          CFStringRef v20 = v129;
        }
        v87 += v89;
      }
      while (v87 < v26);
    }
    uint64_t v105 = *(void *)(a1 + 48);
    long long v104 = (void *)(a1 + 48);
    v20[1] = v104;
    *long long v104 = v20;
    *CFStringRef v20 = v105;
    *(void *)(v105 + 8) = v20;
    *((_DWORD *)v20 + 13) = *((_DWORD *)a2 + 57);
    return;
  }
  int v119 = 0;
  int v117 = 0;
  float64x2_t v31 = v20 + 5;
  uint64_t v32 = (uint64_t *)(a1 + 96);
  uint64_t v33 = v131 + v115;
  if (!v27) {
    uint64_t v33 = 0;
  }
  uint64_t v112 = -(int)v131;
  int32x4_t v111 = &v118[v33 + v112];
  float64x2_t v136 = &v118[v33];
  uint64_t v128 = &v118[v33 - v115];
  int8x16_t v110 = &v128[v112];
  unsigned int v116 = v27 >> 1;
  __int16 v34 = *((_WORD *)v20 + 24);
  uint64_t v114 = a1 + 48;
  uint64_t v129 = v20;
  unsigned int v135 = v27;
  uint64_t v113 = a1 + 96;
  while (v34 < 1)
  {
LABEL_90:
    if (++v119 >= (__int16)v30) {
      goto LABEL_91;
    }
  }
  int v35 = 0;
  while (2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 104); i != v32; uint64_t i = (uint64_t *)i[1])
    {
      if (i[4]) {
        goto LABEL_49;
      }
    }
    if (*(_DWORD *)(a1 + 88) <= 7u)
    {
      uint64_t v37 = *(void *)(a1 + 56);
      if (v37 == v114) {
        goto LABEL_44;
      }
      unsigned int v38 = *((_DWORD *)v139 + 57);
      if (v38)
      {
        if (*(_DWORD *)(v37 + 52) >= v38) {
          goto LABEL_44;
        }
      }
      goto LABEL_40;
    }
    uint64_t v37 = *(void *)(a1 + 56);
    if (v37 != v114)
    {
LABEL_40:
      *(void *)(a1 + 136) += *(__int16 *)(v37 + 50) * (uint64_t)*(__int16 *)(v37 + 48);
      uint64_t v39 = *(void *)(v37 + 40);
      if (v39)
      {
        uint64_t i = *(uint64_t **)(v39 + 8);
        CA::OGL::Mosaic::delete_image(a1, (_DWORD *)v37);
        if (i) {
          goto LABEL_49;
        }
      }
      else
      {
        CA::OGL::Mosaic::delete_image(a1, (_DWORD *)v37);
      }
LABEL_44:
      if (*(_DWORD *)(a1 + 88) <= 7u)
      {
        int8x16_t v40 = (malloc_zone_t *)get_malloc_zone();
        uint64_t i = (uint64_t *)malloc_type_zone_malloc(v40, 0x40uLL, 0x8BB15036uLL);
        if (i)
        {
          is_mul_ok(*(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12), 0x18uLL);
          operator new[]();
        }
        if (MEMORY[0x10])
        {
          ++*(_DWORD *)(a1 + 88);
          int8x16_t v41 = *(void **)(a1 + 104);
          *(void *)(a1 + 104) = 0;
          MEMORY[0] = v32;
          *int8x16_t v41 = 0;
          MEMORY[8] = v41;
LABEL_49:
          int v42 = (void *)i[4];
          uint64_t v43 = *v42;
          i[4] = *v42;
          if (!v43) {
            i[5] = 0;
          }
          ++i[6];
          uint64_t v44 = v130;
          if (*(uint64_t **)(a1 + 104) != i)
          {
            uint64_t v46 = *i;
            uint64_t v45 = (void *)i[1];
            *(void *)(v46 + 8) = v45;
            *uint64_t v45 = v46;
            i[1] = (uint64_t)i;
            uint32_t v47 = *(uint64_t ***)(a1 + 104);
            *(void *)(a1 + 104) = i;
            *uint64_t i = (uint64_t)v32;
            *uint32_t v47 = i;
            i[1] = (uint64_t)v47;
          }
          *float64x2_t v31 = v42;
          __n128 v137 = v42;
          *int v42 = 0;
          int v49 = *(_DWORD *)(a1 + 4);
          signed int v48 = *(_DWORD *)(a1 + 8);
          unsigned int v50 = v48 * v119;
          int v134 = v35;
          int v51 = v49 * v35;
          if (v49 >= v138 - v49 * v35) {
            unsigned int v52 = v138 - v49 * v35;
          }
          else {
            unsigned int v52 = v49;
          }
          if (v48 >= (int)(v26 - v50)) {
            unsigned int v53 = v26 - v50;
          }
          else {
            unsigned int v53 = v48;
          }
          v141.i32[0] = v51;
          v141.i32[1] = v48 * v119;
          v141.i64[1] = __PAIR64__(v53, v52);
          (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v44, &v141, v136, v131);
          if (v135)
          {
            if (v51) {
              int v54 = -1;
            }
            else {
              int v54 = 0;
            }
            int v123 = v54;
            unsigned int v55 = v52 + v51;
            if (v50) {
              int v56 = -1;
            }
            else {
              int v56 = 0;
            }
            unsigned int v57 = v53 + v50;
            if (v53 + v50 == v26) {
              int v58 = -1;
            }
            else {
              int v58 = 0;
            }
            int v120 = v58;
            unsigned int v59 = v52;
            unsigned int v133 = v52 + v51;
            if (v55 == v138) {
              int v60 = -1;
            }
            else {
              int v60 = 0;
            }
            int v124 = v60;
            unsigned int v61 = v53;
            if (v55 != v138) {
              unsigned int v59 = *(_DWORD *)(a1 + 4);
            }
            uint64_t v62 = v130;
            unsigned int v126 = v57;
            __int32 v127 = v61;
            if (v57 != v132) {
              unsigned int v61 = *(_DWORD *)(a1 + 8);
            }
            uint64_t v63 = v131;
            int v64 = v61 * v131;
            int v125 = v61 * v131;
            int v121 = v59 * v115;
            unsigned int v122 = v50 + v56;
            v141.i32[0] = v51;
            v141.i32[1] = v50 + v56;
            v141.i64[1] = v52 | 0x100000000;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v130, &v141, v111, v131);
            v126 += v120;
            v141.i64[0] = __PAIR64__(v126, v51);
            v141.i64[1] = v52 | 0x100000000;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v62, &v141, &v136[v64], v63);
            v141.i32[0] = v51 + v123;
            *(uint64_t *)((char *)v141.i64 + 4) = v50 | 0x100000000;
            int v65 = v51 + v123;
            __int32 v66 = v127;
            v141.i32[3] = v127;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v62, &v141, v128, v63);
            v133 += v124;
            v141.i64[0] = __PAIR64__(v50, v133);
            v141.i32[2] = 1;
            v141.i32[3] = v66;
            uint64_t v67 = &v136[v121];
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v62, &v141, v67, v63);
            unsigned int v68 = v65;
            v141.i64[0] = __PAIR64__(v122, v65);
            unsigned int v69 = v122;
            v141.i64[1] = 0x100000001;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v62, &v141, v110, v63);
            v141.i64[0] = __PAIR64__(v69, v133);
            v141.i64[1] = 0x100000001;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v62, &v141, &v67[v112], v63);
            v141.i64[0] = __PAIR64__(v126, v68);
            int v70 = v125;
            unsigned int v71 = v126;
            v141.i64[1] = 0x100000001;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v62, &v141, &v128[v125], v63);
            v141.i64[0] = __PAIR64__(v71, v133);
            v141.i64[1] = 0x100000001;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, unsigned char *, uint64_t))(*(void *)a9 + 16))(a9, v62, &v141, &v67[v70], v63);
            int v26 = v132;
            uint64_t v32 = (uint64_t *)v113;
          }
          unsigned int v72 = v52;
          float v73 = v139;
          if (i != *(uint64_t **)(a1 + 112))
          {
            CA::OGL::Mosaic::bind_buffer(a1, v139, (uint64_t)i, a9);
            float v73 = v139;
          }
          __int32 v74 = v137;
          unsigned int v75 = *((_DWORD *)v137 + 5);
          int v77 = v134;
          unsigned int v76 = v135;
          if (v75 && v75 > *((_DWORD *)v73 + 58))
          {
            if ((v117 & 1) == 0)
            {
              (*(void (**)(uint64_t))(*(void *)a9 + 48))(a9);
              __int32 v74 = v137;
            }
            if ((*(_WORD *)(*(void *)(a1 + 160) + 58) & 0x400) != 0)
            {
              (*(void (**)(uint64_t, void))(*(void *)a9 + 40))(a9, *((unsigned int *)v74 + 5));
              __int32 v74 = v137;
            }
            int v117 = 1;
          }
          if (*(_DWORD *)(a1 + 8) + v76 != 1) {
            unsigned int v72 = *(_DWORD *)(a1 + 4);
          }
          (*(void (**)(uint64_t *, void, uint64_t, void, void, void, void))(*v139 + 600))(v139, *(void *)(a1 + 160), i[2], *(unsigned int *)(a1 + 152), *((__int16 *)v74 + 8) - v116, *((__int16 *)v74 + 9) - v116, v72 + v76);
          unint64_t v78 = v137;
          *((_DWORD *)v137 + 5) = 0;
          int v35 = v77 + 1;
          CFStringRef v20 = v129;
          float64x2_t v31 = v78;
          if (v35 >= *((__int16 *)v129 + 24))
          {
            __int16 v34 = *((_WORD *)v129 + 24);
            LOWORD(v3CASetDebugMessage("", 0) = *((_WORD *)v129 + 25);
            float64x2_t v31 = v78;
            a2 = v139;
            goto LABEL_90;
          }
          continue;
        }
        if (MEMORY[0x18]) {
          MEMORY[0x185323DA0](MEMORY[0x18], 0x1020C8062D53EE8);
        }
        int v81 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v81, 0);
      }
    }
    break;
  }
  int v82 = v129;
  uint64_t v83 = v129[4];
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  __int32 v84 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v84, v82);
}

void CA::Render::Array::show(CA::Render::Array *this, int a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (*((_DWORD *)this + 4))
    {
      unint64_t v13 = 0;
      uint64_t v14 = (a2 + 1);
      int v15 = (char *)this + 24;
      do
      {
        if (*((unsigned char *)this + 13))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v16 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v17 = *(void *)&v15[8 * v13];
              *(_DWORD *)long long buf = 134217984;
              uint64_t v19 = v17;
              _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "%p", buf, 0xCu);
            }
          }
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)&v15[8 * v13] + 40))(*(void *)&v15[8 * v13], v14, a3);
        }
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 4));
    }
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(array", buf, 2u);
      }
    }
    if (*((_DWORD *)this + 4))
    {
      unint64_t v7 = 0;
      float32x2_t v8 = (CA::Render *)(a2 + 1);
      float32x4_t v9 = (char *)this + 24;
      do
      {
        CA::Render::show_newline(v8);
        if (*((unsigned char *)this + 13))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v10 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v11 = *(void *)&v9[8 * v7];
              *(_DWORD *)long long buf = 134217984;
              uint64_t v19 = v11;
              _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "%p", buf, 0xCu);
            }
          }
        }
        else
        {
          (*(void (**)(void, CA::Render *, uint64_t))(**(void **)&v9[8 * v7] + 40))(*(void *)&v9[8 * v7], v8, a3);
        }
        ++v7;
      }
      while (v7 < *((unsigned int *)this + 4));
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
}

void CA::CG::IOSurfaceQueue::~IOSurfaceQueue(CA::CG::IOSurfaceQueue *this)
{
  CA::CG::AccelQueue::~AccelQueue(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::anonymous namespace'::iosurface_max_init(CA::CG::_anonymous_namespace_ *this)
{
  uint64_t result = MEMORY[0x185323680](*MEMORY[0x1E4F2F0E8]);
  return result;
}

CA::Render::Texture *CA::OGL::TiledImageGeometry::lanczos_image(CA::OGL::Context **this, CA::Render::Texture *a2, double a3, double a4, double a5, unsigned int *a6, float32x4_t *a7)
{
  float32x2_t v8 = a2;
  if (a5 < 1.0 && *((unsigned char *)a2 + 12) == 23)
  {
    int v15 = (CA::Render::TileCache *)CA::OGL::Context::tile_cache(this[1]);
    if (v15)
    {
      LODWORD(v16) = *((_DWORD *)v8 + 4);
      LODWORD(v17) = *((_DWORD *)v8 + 5);
      double v18 = (double)v16 * a5;
      double v19 = (double)v17 * a5;
      double v28 = a4 - floor(a4);
      double v29 = a3 - floor(a3);
      image = CA::Render::TileCache::get_image(v15, v8, v29, v28, v18, v19, *((double *)this[1] + 30));
      if (image)
      {
        unsigned int v21 = *a6 & 0xFFFFFFC0;
        *a6 = v21;
        v22.f64[0] = v29;
        v23.f64[0] = v18 + v29;
        uint64_t v24 = *((void *)image + 2);
        v25.i64[0] = v24;
        v25.i64[1] = HIDWORD(v24);
        float64x2_t v26 = vcvtq_f64_u64(v25);
        v22.f64[1] = v28;
        v23.f64[1] = v19 + v28;
        *a7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v22, v26)), vdivq_f64(v23, v26));
        *a6 = v21 | 0x400;
        return image;
      }
    }
  }
  return v8;
}

uint64_t CA::OGL::TiledImageGeometry::TiledImageGeometry(uint64_t a1, CA::Render::TiledTexture *a2, uint64_t a3, double *a4, char a5, char a6, CA::OGL::ContentsGeometry *this, float a8)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(unsigned char *)(a1 + 2CASetDebugMessage("", 0) = a5;
  *(unsigned char *)(a1 + 21) = a6;
  *(void *)(a1 + 24) = this;
  *(unsigned char *)(a1 + 146) = 1;
  uint64_t v107 = *(void *)(a3 + 248);
  if (this)
  {
    CA::OGL::ContentsGeometry::scale(this, (uint64_t)a2, (double *)a3);
    double scale = v13;
    *(double *)(a1 + 32) = v13;
    double v15 = *((double *)this + 33);
    if (v15 == 1.0) {
      goto LABEL_8;
    }
    double scale = scale / v15;
  }
  else
  {
    uint64_t v16 = *(void *)(*(void *)(a3 + 248) + 24);
    if ((*(unsigned char *)(v16 + 144) & 0x10) != 0) {
      double scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v16, 0, 0, a4);
    }
    else {
      double scale = *(double *)(v16 + 128);
    }
  }
  *(double *)(a1 + 32) = scale;
LABEL_8:
  int v18 = *((_DWORD *)a2 + 26);
  int v17 = *((_DWORD *)a2 + 27);
  if (__PAIR64__(v17, v18) == 1)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(int32x4_t *)(a1 + 4CASetDebugMessage("", 0) = _Q0;
    int v24 = *(unsigned __int16 *)(a1 + 144) | (*(unsigned __int8 *)(a1 + 146) << 16);
    *(void *)(a1 + 72) = 1065353216;
    if (scale >= 1.0) {
      __int16 v25 = 0;
    }
    else {
      __int16 v25 = (*(unsigned char *)(a1 + 20) == 11) << 8;
    }
    *(_WORD *)(a1 + 144) = v25;
    *(unsigned char *)(a1 + 146) = BYTE2(v24);
    if (scale <= 0.999)
    {
      *(double *)(a1 + 56) = scale;
      *(double *)(a1 + 64) = scale;
    }
    else
    {
      *(int32x4_t *)(a1 + 56) = _Q0;
    }
  }
  else
  {
    if (v17)
    {
      if (v18 < 1)
      {
        double v28 = 0.0;
      }
      else
      {
        unsigned int v26 = *((_DWORD *)a2 + 4);
        if (v17 >= 1) {
          unsigned int v27 = v26 << v17;
        }
        else {
          unsigned int v27 = v26 >> -(char)v17;
        }
        double v28 = (double)v27 / (double)v26;
      }
    }
    else
    {
      double v28 = 1.0;
    }
    if (scale >= v28) {
      unsigned int v29 = *(unsigned __int8 *)(a1 + 146) << 16;
    }
    else {
      unsigned int v29 = (*(unsigned char *)(a1 + 20) == 2) | (*(unsigned __int8 *)(a1 + 146) << 16) | ((*(unsigned char *)(a1 + 20) == 11) << 8);
    }
    *(_WORD *)(a1 + 144) = v29;
    unsigned int v30 = HIWORD(v29);
    *(unsigned char *)(a1 + 146) = BYTE2(v29);
    double v31 = 0.0;
    if (scale != 1.0) {
      double v31 = -log2(scale);
    }
    double v32 = v31 + a8;
    int v33 = *((_DWORD *)a2 + 26);
    int v34 = *((_DWORD *)a2 + 27);
    double v35 = (double)-v34;
    double v36 = (double)(v33 - v34);
    if (v32 <= v36)
    {
      if (v32 >= v35) {
        double v35 = v32;
      }
    }
    else if (v36 >= v35)
    {
      double v35 = (double)(v33 - v34);
    }
    if (v29)
    {
      float v37 = 1.0 - v35 + floor(v35);
      *(float *)(a1 + 72) = v37;
      if (v37 > 0.999)
      {
        v29 &= 0xFFFF00u;
        *(unsigned char *)(a1 + 146) = v30;
        *(_WORD *)(a1 + 144) = v29;
        *(_DWORD *)(a1 + 72) = 1065353216;
        int v33 = *((_DWORD *)a2 + 26);
        int v34 = *((_DWORD *)a2 + 27);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 72) = 1065353216;
    }
    int v38 = vcvtmd_s64_f64(v35 + (double)v34);
    if (v33 <= v38)
    {
      if (v33 <= 0) {
        int v39 = 0;
      }
      else {
        int v39 = v33 - 1;
      }
    }
    else
    {
      int v39 = v38 & ~(v38 >> 31);
    }
    *(_DWORD *)(a1 + 76) = v39;
    *(double *)_Q0.i64 = CA::Render::TiledTexture::lod_scale(a2, v39);
    double v40 = 1.0 / *(double *)_Q0.i64;
    *(void *)(a1 + 4CASetDebugMessage("", 0) = _Q0.i64[0];
    *(double *)(a1 + 48) = 1.0 / *(double *)_Q0.i64;
    if (!v39 && scale > *(double *)_Q0.i64 * 0.999)
    {
      *(unsigned char *)(a1 + 146) = BYTE2(v29);
      *(_WORD *)(a1 + 144) = v29 & 0xFF00;
      double scale = *(double *)_Q0.i64;
    }
    *(double *)_Q0.i64 = scale * v40;
    *(double *)(a1 + 56) = scale;
    *(double *)(a1 + 64) = scale * v40;
  }
  int8x16_t v41 = (int32x4_t *)(a1 + 80);
  int v42 = (CA::OGL::ContentsGeometry *)((char *)this + 104);
  _Q0.i32[0] = 1073741822;
  int32x4_t v109 = _Q0;
  int8x16_t v108 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  float64x2_t v105 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
  float64x2_t v106 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
  while (1)
  {
    CA::Shape::get_bounds(*(void *)(*(void *)(a3 + 248) + 8), (int *)(a1 + 80));
    uint64_t v43 = *(int32x2_t **)(a3 + 264);
    if (v43) {
      uint64_t v44 = v43 + 4;
    }
    else {
      uint64_t v44 = (int32x2_t *)(a3 + 200);
    }
    CA::BoundsImpl::intersect((int32x2_t *)(a1 + 80), *v44, v44[1]);
    int v47 = *(_DWORD *)(a1 + 88);
    int v48 = *(_DWORD *)(a1 + 92);
    if (v47 <= v48) {
      int v49 = *(_DWORD *)(a1 + 92);
    }
    else {
      int v49 = *(_DWORD *)(a1 + 88);
    }
    v46.i32[0] = v49;
    uint64_t v50 = *(void *)(a1 + 80);
    v51.i64[0] = (int)v50;
    v51.i64[1] = SHIDWORD(v50);
    int8x16_t v52 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v46, v109), 0), v108, (int8x16_t)vcvtq_f64_s64(v51));
    double v53 = (double)v47;
    double v54 = (double)v48;
    if (v49 > 1073741822)
    {
      double v53 = 1.79769313e308;
      double v54 = 1.79769313e308;
    }
    float64x2_t v110 = (float64x2_t)v52;
    v111.f64[0] = v53;
    v111.f64[1] = v54;
    uint64_t v55 = *(void *)(a1 + 24);
    if (v55)
    {
      CA::Rect::unapply_transform((CA::Rect *)&v110, v42, v45);
      float64x2_t v57 = v111;
      int64x2_t v58 = vclezq_f64(v111);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v58, 1), (int8x16_t)v58).u64[0] & 0x8000000000000000) == 0)
      {
        float64x2_t v59 = *(float64x2_t *)(v55 + 24);
        int64x2_t v60 = vclezq_f64(v59);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v60, 1), (int8x16_t)v60).u64[0] & 0x8000000000000000) != 0
          || (float64x2_t v61 = *(float64x2_t *)(v55 + 8),
              float64x2_t v62 = vaddq_f64(v61, v59),
              float64x2_t v63 = vmaxnmq_f64(v110, v61),
              float64x2_t v57 = vsubq_f64(vminnmq_f64(vaddq_f64(v110, v111), v62), v63),
              int64x2_t v64 = vclezq_f64(v57),
              (vorrq_s8((int8x16_t)vdupq_laneq_s64(v64, 1), (int8x16_t)v64).u64[0] & 0x8000000000000000) != 0))
        {
          float64x2_t v111 = 0uLL;
          float64x2_t v57 = 0uLL;
        }
        else
        {
          float64x2_t v110 = v63;
          float64x2_t v111 = v57;
        }
      }
      float64x2_t v65 = vsubq_f64(v110, *(float64x2_t *)(v55 + 8));
      float64x2_t v110 = v65;
      double v66 = *(double *)(v55 + 264);
      if (v66 != 1.0)
      {
        float64x2_t v65 = vmulq_n_f64(v65, v66);
        float64x2_t v110 = v65;
        float64x2_t v111 = vmulq_n_f64(v57, v66);
      }
      if ((*(unsigned char *)(v55 + 309) & 4) != 0) {
        float64x2_t v110 = vaddq_f64(v65, vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(v55 + 276), vcvt_f32_s32(*(int32x2_t *)v55))));
      }
    }
    else
    {
      CA::Rect::unapply_transform((CA::Rect *)&v110, *(const CA::Transform **)(v107 + 24), v45);
    }
    double v67 = *(double *)(a1 + 40);
    if (v67 == 1.0)
    {
      float64x2_t v69 = v110;
    }
    else
    {
      if (v111.f64[0] <= v111.f64[1]) {
        double v68 = v111.f64[1];
      }
      else {
        double v68 = v111.f64[0];
      }
      float64x2_t v69 = v110;
      if (v68 < 1.79769313e308)
      {
        float64x2_t v69 = vmulq_n_f64(v110, v67);
        float64x2_t v110 = v69;
        v111.f64[0] = v111.f64[0] * v67;
        v111.f64[1] = v111.f64[1] * v67;
      }
    }
    int64x2_t v70 = vceqzq_f64(v111);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v70, 1), (int8x16_t)v70).u64[0] & 0x8000000000000000) != 0
      || (int8x16_t v71 = vorrq_s8((int8x16_t)vcltzq_f64(v111), (int8x16_t)vcgezq_f64(v111)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v71), 1), v71).u64[0] & 0x8000000000000000) != 0))
    {
      v41->i64[0] = 0;
      *(void *)(a1 + 88) = 0;
      int32x4_t v74 = 0uLL;
    }
    else
    {
      int32x4_t v72 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v69, v106));
      int32x4_t v73 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v69, v111), v105)), (int64x2_t)v72);
      *int8x16_t v41 = vuzp1q_s32(v72, v73);
      int32x4_t v74 = vrev64q_s32(vuzp1q_s32(v73, v72));
    }
    int v75 = *(_DWORD *)(a1 + 76);
    if (v75 < 0 || (unsigned int v76 = *(_DWORD **)a1, *(_DWORD *)(*(void *)a1 + 104) <= v75))
    {
      signed __int32 v82 = 0;
      signed __int32 v84 = 0;
      *(_DWORD *)(a1 + 96) = 0;
    }
    else
    {
      int v77 = v76[27];
      _VF = __OFSUB__(v75, v77);
      int v78 = v75 - v77;
      unsigned int v79 = v76[4];
      unsigned int v80 = v79 >> v78;
      signed __int32 v81 = v79 << -(char)v78;
      if (v78 < 0 != _VF) {
        signed __int32 v82 = v81;
      }
      else {
        signed __int32 v82 = v80;
      }
      *(_DWORD *)(a1 + 96) = v82;
      unsigned int v83 = v76[5];
      if (v78 < 0) {
        signed __int32 v84 = v83 << -(char)v78;
      }
      else {
        signed __int32 v84 = v83 >> v78;
      }
    }
    *(_DWORD *)(a1 + 10CASetDebugMessage("", 0) = v84;
    unsigned __int32 v85 = v74.u32[3];
    int v86 = v74.i32[1];
    if (v74.i32[3] < 0)
    {
      int v86 = v74.i32[1] + v74.i32[3];
      *(_DWORD *)(a1 + 88) = v74.i32[1] + v74.i32[3];
      *(_DWORD *)(a1 + 8CASetDebugMessage("", 0) = 0;
      unsigned __int32 v85 = 0;
    }
    unsigned __int32 v87 = v74.u32[2];
    int v88 = v74.i32[0];
    if (v74.i32[2] < 0)
    {
      int v88 = v74.i32[0] + v74.i32[2];
      *(_DWORD *)(a1 + 92) = v74.i32[0] + v74.i32[2];
      *(_DWORD *)(a1 + 84) = 0;
      unsigned __int32 v87 = 0;
    }
    if ((int)(v86 + v85) > v82)
    {
      int v86 = v82 - v85;
      *(_DWORD *)(a1 + 88) = v82 - v85;
    }
    if ((int)(v88 + v87) > v84)
    {
      int v88 = v84 - v87;
      *(_DWORD *)(a1 + 92) = v84 - v87;
    }
    if (v86 < 1 || v88 <= 0)
    {
      unsigned __int32 v87 = 0;
      unsigned __int32 v85 = 0;
      int v88 = 0;
      int v86 = 0;
      v41->i64[0] = 0;
      *(void *)(a1 + 88) = 0;
    }
    if (v75 >= *((_DWORD *)a2 + 26) - 1) {
      break;
    }
    double v89 = *(double *)(a1 + 64);
    if (v89 * (double)v86 <= 4096.0 || v89 * (double)v88 <= 4096.0) {
      break;
    }
    *(_DWORD *)(a1 + 76) = v75 + 1;
    double v91 = CA::Render::TiledTexture::lod_scale(a2, v75 + 1);
    double v92 = 1.0 / v91;
    *(double *)(a1 + 4CASetDebugMessage("", 0) = v91;
    *(double *)(a1 + 48) = 1.0 / v91;
    double v93 = *(double *)(a1 + 32);
    *(double *)(a1 + 56) = v93;
    *(double *)(a1 + 64) = v93 * v92;
  }
  unsigned int v94 = *((_DWORD *)a2 + 24);
  unsigned int v95 = *((_DWORD *)a2 + 25);
  int v96 = v85 / v94;
  *(_DWORD *)(a1 + 104) = v85 / v94;
  *(_DWORD *)(a1 + 108) = v87 / v95;
  unsigned int v97 = (v94 + v85 + v86 - 1) / v94;
  unsigned int v98 = (v95 + v87 + v88 - 1) / v95;
  *(_DWORD *)(a1 + 112) = v97;
  *(_DWORD *)(a1 + 116) = v98;
  *(_DWORD *)(a1 + 12CASetDebugMessage("", 0) = v96 + ((int)(v97 - v96) >> 1);
  *(_DWORD *)(a1 + 124) = v87 / v95 + ((int)(v98 - v87 / v95) >> 1);
  int v99 = *(unsigned __int8 *)(a1 + 20);
  if (v99 == 2 || v99 == 11)
  {
    int v100 = *(unsigned __int8 *)(a1 + 21);
    *(unsigned char *)(a1 + 2CASetDebugMessage("", 0) = 1;
    if (v100 != 3) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  if (*(unsigned char *)(a1 + 21) == 3)
  {
    *(unsigned char *)(a1 + 2CASetDebugMessage("", 0) = 1;
LABEL_109:
    *(unsigned char *)(a1 + 21) = 1;
  }
LABEL_110:
  if ((*(_WORD *)(a1 + 144) & 0x100) != 0
    && ((uint64_t v101 = *(void *)(v107 + 24), (*(unsigned char *)(v101 + 144) & 0x10) == 0)
     || CA::Mat4Impl::mat4_is_rectilinear(*(CA::Mat4Impl **)(v107 + 24), v56)))
  {
    double v102 = *(double *)(v101 + 96);
    *(double *)(a1 + 128) = v102;
    double v103 = *(double *)(v101 + 104) - floor(*(double *)(v101 + 104));
    *(double *)(a1 + 128) = v102 - floor(v102);
    *(double *)(a1 + 136) = v103;
  }
  else
  {
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  return a1;
}

uint64_t CA::OGL::TiledImageGeometry::draw_tiles(uint64_t this, int a2, int a3)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(this + 112) - *(_DWORD *)(this + 104);
  if (v3 > 1024) {
    return this;
  }
  uint64_t v4 = (int *)this;
  int v5 = *(_DWORD *)(this + 116) - *(_DWORD *)(this + 108);
  if (v5 > 1024 || v5 * v3 > 0x2000) {
    return this;
  }
  int v6 = a2;
  unint64_t v7 = *(int32x2_t **)this;
  float32x2_t v8 = *(CA::OGL **)(this + 8);
  if (a2) {
    int v9 = 10752;
  }
  else {
    int v9 = 10761;
  }
  uint64_t v10 = *((void *)v8 + 2);
  BOOL v151 = (*(unsigned char *)(v10 + 481) & 1) != 0 && *(unsigned __int8 *)(v10 + 480) == 3;
  unsigned int v11 = *(_DWORD *)(this + 16);
  int32x2_t v172 = v7[12];
  int32x2_t v12 = v7[15];
  if (*(void *)&v12
    && (*(_DWORD *)(*(void *)&v12 + 12) & 0x300) == 0x100
    && (this = (*(uint64_t (**)(CA::OGL *, void, uint64_t))(*(void *)v8 + 608))(v8, *(void *)(*(void *)&v12 + 128), 1), this))
  {
    uint64_t v154 = *(void *)(*(void *)v4 + 120);
  }
  else
  {
    uint64_t v154 = 0;
  }
  uint64_t v13 = v4[27];
  int v14 = v4[29];
  if ((int)v13 >= v14)
  {
    *(unsigned char *)(*((void *)v8 + 2) + 16) = 0;
    goto LABEL_152;
  }
  char v168 = 0;
  int v15 = v11 & v9;
  if (a3) {
    int v16 = 1;
  }
  else {
    int v16 = 2;
  }
  int v169 = v16;
  int v157 = v15 | 0x100;
  unsigned int v160 = v15 | 0x124;
  if (v154) {
    char v17 = a3;
  }
  else {
    char v17 = 1;
  }
  char v159 = v17;
  uint64_t v156 = (char *)v8 + 834;
  int v18 = v4[28];
  uint64_t v171 = (double *)((char *)v8 + 240);
  unsigned int v153 = (v11 >> 11) & 1;
  float32x4_t v150 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  int v161 = v6;
  uint64_t v170 = v8;
  do
  {
    uint64_t v19 = v4[26];
    if ((int)v19 >= v18) {
      goto LABEL_148;
    }
    __int32 v162 = v13 * v172.i32[1] + v172.i32[1];
    double v165 = (double)(v13 * v172.i32[1]);
    unsigned int v152 = v13 * v172.i32[1];
    float v158 = (float)(v13 * v172.i32[1]);
    unsigned int v166 = v13;
    do
    {
      uint32x2_t v20 = *(uint32x2_t *)(v4 + 24);
      long long v190 = 0u;
      long long v191 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      double v21 = 1.0;
      float64x2_t v22 = (double *)(v4 + 16);
      memset(v187, 0, sizeof(v187));
      if ((v6 & 1) == 0)
      {
        double v21 = *((double *)v4 + 5);
        float64x2_t v22 = (double *)(v4 + 8);
      }
      if (*v22 >= v21 * 0.999)
      {
        if (*v22 <= v21 * 1.001)
        {
          int v173 = 0;
          goto LABEL_33;
        }
        int v23 = 36;
      }
      else
      {
        int v23 = 18;
      }
      int v173 = v23;
LABEL_33:
      uint64_t v24 = 0;
      unsigned int v163 = v19 * v172.i32[0];
      v25.i32[0] = v19 * v172.i32[0] + v172.i32[0];
      v25.i32[1] = v162;
      int32x2_t v164 = (int32x2_t)vmin_u32(v25, v20);
      uint64_t v26 = v4[19];
      uint64_t v27 = 1;
      float v28 = 0.0;
      uint64_t v29 = v13;
      int v167 = v19;
      uint64_t v30 = v19;
      while ((int)v26 < *(_DWORD *)(*(void *)v4 + 104))
      {
        int v31 = v4[19];
        if v26 == v31 || (uint64_t v32 = 0xFFFFFFFFLL, (v4[36]) && v26 == v31 + 1) {
          uint64_t v32 = (v19 - v4[30]) * (v19 - v4[30]) + (v166 - v4[31]) * (v166 - v4[31]);
        }
        uint64_t v33 = *((void *)v8 + 27);
        int v34 = (double *)(v33 + 72);
        _ZF = v33 == 0;
        double v35 = v171;
        if (!_ZF) {
          double v35 = v34;
        }
        double v36 = (float *)&v187[4 * v24];
        uint64_t v37 = v24;
        int v38 = (atomic_uint *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, void, double, _OWORD *, float *))(**(void **)v4 + 256))(*(void *)v4, v26, v30, v29, v32, v27, v24 != 0, *((unsigned int *)v8 + 57), *v35, (_OWORD *)v36 + 1, v36 + 5);
        uint64_t v24 = v37;
        *(void *)double v36 = v38;
        if (v38)
        {
          if (!v37
            || ((int v39 = *((_DWORD *)v36 + 5), v39 != DWORD1(v187[1])) ? (_ZF = v39 == 0) : (_ZF = 1),
                !_ZF ? (BOOL v41 = DWORD1(v187[1]) == 0) : (BOOL v41 = 1),
                v41))
          {
            float v42 = v36[4];
            if (v26 == v4[19]) {
              float v42 = *((float *)v4 + 18) * v42;
            }
            float32x2_t v8 = v170;
            uint64_t v43 = &v187[4 * v37];
            *((_DWORD *)v43 + 6) = v26;
            *((_DWORD *)v43 + 7) = v27;
            float v28 = v42 + v28;
            *((unsigned char *)v43 + 32) = 1;
            *((_DWORD *)v43 + 9) = v30;
            *((_DWORD *)v43 + 1CASetDebugMessage("", 0) = v29;
            uint64_t v24 = v37 + 1;
            goto LABEL_57;
          }
          if (atomic_fetch_add(v38 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v38 + 16))(v38);
            uint64_t v24 = v37;
          }
        }
        *(void *)double v36 = 0;
        v168 |= (int)v32 >= 0;
        float32x2_t v8 = v170;
LABEL_57:
        if ((int)v24 < v169)
        {
          uint64_t v26 = (v26 + 1);
          uint64_t v27 = (2 * v27);
          uint64_t v30 = v30 >> 1;
          uint64_t v29 = v29 >> 1;
          if (v28 < 1.0) {
            continue;
          }
        }
        break;
      }
      if (v24)
      {
LABEL_64:
        uint64_t v50 = 0;
        uint64_t v51 = v173 | v157;
        v52.f32[0] = (float)v163;
        v52.f32[1] = v158;
        *(float32x2_t *)&v52.u32[2] = vcvt_f32_u32((uint32x2_t)v164);
        float32x4_t v174 = v52;
        double v53 = (char *)&v187[1] + 8;
        uint64_t v54 = v24;
        do
        {
          uint64_t v55 = (int32x2_t *)*((void *)v53 - 3);
          float32x4_t v178 = 0uLL;
          int v56 = *(_DWORD *)v53;
          if (*(_DWORD *)v53 == v4[19])
          {
            v184[0] = v51;
            if ((v4[36] & 0x100) != 0 && v53[8])
            {
              uint64_t v55 = (int32x2_t *)CA::OGL::TiledImageGeometry::lanczos_image((CA::OGL::Context **)v4, (CA::Render::Texture *)v55, *((double *)v4 + 16) + *((double *)v4 + 8) * (double)v163, *((double *)v4 + 17) + *((double *)v4 + 8) * v165, *((double *)v4 + 8), v184, &v178);
              uint64_t v57 = v184[0];
              int v56 = *(_DWORD *)v53;
            }
            else
            {
              uint64_t v57 = v51;
            }
          }
          else
          {
            uint64_t v57 = v160;
          }
          uint64_t v58 = *((unsigned __int8 *)v4 + 20);
          if (!v56) {
            uint64_t v58 = *((unsigned __int8 *)v4 + 21);
          }
          uint64_t v59 = CA::OGL::Context::bind_image(v8, v50, v55, v57, *((unsigned __int8 *)v4 + 20), v58, 0, 0, 0.0, &v178, 0);
          *((void *)v53 - 2) = v59;
          if (v59)
          {
            uint64_t v60 = *((void *)v4 + 3);
            if (v60 && *(void *)(*((void *)v8 + 2) + 8 * v50 + 40)) {
              *(unsigned char *)(v60 + 495) = 1;
            }
            v61.i32[0] = *((_DWORD *)v53 + 3);
            v61.i32[1] = *((_DWORD *)v53 + 1);
            v62.i32[0] = v61.i32[1];
            v62.i32[1] = *((_DWORD *)v53 + 4);
            *(float32x2_t *)v63.f32 = vcvt_f32_u32((uint32x2_t)vmul_s32(vmul_s32(v61, v172), v62));
            v63.i64[1] = v63.i64[0];
            *(float32x2_t *)_Q1.f32 = vcvt_f32_u32((uint32x2_t)vmul_s32(v55[2], vdup_n_s32(*((_DWORD *)v53 + 1))));
            _Q1.i64[1] = _Q1.i64[0];
            v64.i64[0] = v178.i64[0];
            *(float32x2_t *)v65.f32 = vsub_f32(*(float32x2_t *)&v178.u32[2], *(float32x2_t *)v178.f32);
            v65.i64[1] = v65.i64[0];
            v64.i64[1] = v178.i64[0];
            _Q0 = vaddq_f32(vdivq_f32(vmulq_f32(v65, vsubq_f32(v174, v63)), _Q1), v64);
            *(float32x4_t *)(v53 + 2CASetDebugMessage("", 0) = _Q0;
          }
          ++v50;
          v53 += 64;
        }
        while (v54 != v50);
        _Q1.i32[0] = v187[1];
        if (v54 == 2)
        {
          int v6 = v161;
          uint64_t v13 = v166;
          if (DWORD2(v187[1]) == v4[19])
          {
            _Q0.i32[0] = v4[18];
            _Q1.f32[0] = _Q0.f32[0] * *(float *)&v187[1];
          }
          uint64_t v66 = 2;
        }
        else
        {
          uint64_t v66 = 1;
          int v6 = v161;
          uint64_t v13 = v166;
        }
      }
      else
      {
        uint64_t v44 = *((void *)v8 + 27);
        uint64_t v45 = (double *)(v44 + 72);
        _ZF = v44 == 0;
        int32x4_t v46 = v171;
        if (!_ZF) {
          int32x4_t v46 = v45;
        }
        uint64_t v13 = v166;
        *(void *)&v187[0] = (*(uint64_t (**)(void, void, void, void, void, void, char *, double))(**(void **)v4 + 264))(*(void *)v4, v4[19], v19, v166, v153, *((unsigned int *)v8 + 57), (char *)&v187[1] + 4, *v46);
        if (*(void *)&v187[0])
        {
          unsigned int v49 = v4[19];
          LODWORD(v187[1]) = 1065353216;
          *((void *)&v187[1] + 1) = v49 | 0x100000000;
          LOBYTE(v187[2]) = 0;
          *(void *)((char *)&v187[2] + 4) = __PAIR64__(v166, v19);
          uint64_t v24 = 1;
          goto LABEL_64;
        }
        uint64_t v66 = 0;
        _Q1.i32[0] = 1.0;
        int v6 = v161;
      }
      if (v159)
      {
LABEL_97:
        if (v66 == 2)
        {
LABEL_104:
          *(unsigned char *)(*((void *)v8 + 2) + 16) = 7;
          __asm { FCVT            H0, S1 }
          *(int16x4_t *)(*((void *)v8 + 2) + 8) = vdup_lane_s16(*(int16x4_t *)_Q0.f32, 0);
          if ((*(unsigned char *)(*(void *)&v187[0] + 13) & 0x10) == 0)
          {
            LODWORD(v66) = 2;
            goto LABEL_116;
          }
          uint64_t v87 = v188;
          LODWORD(v66) = 2;
          goto LABEL_115;
        }
        if (v66 == 1) {
          goto LABEL_106;
        }
        if (v66) {
          goto LABEL_116;
        }
        *(unsigned char *)(*((void *)v8 + 2) + 16) = 0;
        if (a3) {
          goto LABEL_116;
        }
        LODWORD(v66) = 0;
        unsigned int v77 = bswap32(*(_DWORD *)(*(void *)v4 + 112));
        _Q1.i32[0] = v77;
        _Q1.i32[1] = v77 >> 8;
        _Q1.i32[2] = HIWORD(v77);
        v78.i64[0] = 0xFF000000FFLL;
        v78.i64[1] = 0xFF000000FFLL;
        int32x4_t v79 = (int32x4_t)vandq_s8((int8x16_t)_Q1, v78);
        v79.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v77), 0x18uLL).i32[3];
        *(float16x4_t *)(*((void *)v8 + 2) + 8) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v79), v150));
        int v80 = *(unsigned __int8 *)(*(void *)v4 + 112);
        goto LABEL_102;
      }
      if (!v66) {
        goto LABEL_89;
      }
      if (v66 != 1) {
        goto LABEL_104;
      }
      if (_Q1.f32[0] <= 0.999)
      {
LABEL_89:
        float32x4_t v175 = _Q1;
        uint64_t v67 = *(void *)(v154 + 128);
        double v68 = &v187[4 * (unint64_t)v66];
        *double v68 = v67;
        float32x4_t v178 = 0uLL;
        uint64_t v69 = CA::OGL::Context::bind_image(v8, v66, v67, 256, 0, 0, 1, 0, 0.0, &v178, 0);
        v68[1] = v69;
        if (v69)
        {
          uint64_t v70 = *((void *)v4 + 3);
          if (v70 && *(void *)(*((void *)v8 + 2) + 8 * v66 + 40)) {
            *(unsigned char *)(v70 + 495) = 1;
          }
          int8x16_t v71 = (atomic_uint *)(*v68 + 8);
          if (!atomic_fetch_add(v71, 1u)) {
            atomic_fetch_add(v71, 0xFFFFFFFF);
          }
          int32x4_t v72 = &v187[4 * (unint64_t)v66];
          *((_DWORD *)v72 + 4) = 1065353216;
          *((_DWORD *)v72 + 5) = 0;
          *((_DWORD *)v72 + 6) = 0;
          *((_DWORD *)v72 + 7) = 1;
          *((unsigned char *)v72 + 32) = 0;
          *((_DWORD *)v72 + 9) = v167;
          *((_DWORD *)v72 + 1CASetDebugMessage("", 0) = v13;
          v73.f64[0] = (double)v163;
          double v74 = *((double *)v4 + 6) * *((double *)v4 + 4);
          v73.f64[1] = v165;
          float64x2_t v75 = vmulq_n_f64(v73, v74);
          *(int32x2_t *)&v73.f64[0] = vsub_s32(v164, (int32x2_t)__PAIR64__(v152, v163));
          v76.i64[0] = LODWORD(v73.f64[0]);
          v76.i64[1] = HIDWORD(v73.f64[0]);
          _Q0.f32[0] = CA::OGL::pattern_texcoords((float64x2_t *)v154, v178.f32, (uint64_t)v72 + 44, v75, vmulq_n_f64(vcvtq_f64_u64(v76), v74), (float64x2_t)0);
          LODWORD(v66) = v66 + 1;
        }
        _Q1 = v175;
        goto LABEL_97;
      }
LABEL_106:
      if ((a3 & 1) == 0)
      {
        _D0 = _Q1.f32[0];
        if (_Q1.f32[0] > 0.999)
        {
          LODWORD(v66) = 1;
          *(unsigned char *)(*((void *)v8 + 2) + 16) = 1;
          uint64_t v87 = *(void *)&v187[0];
LABEL_115:
          if ((*(unsigned char *)(v87 + 13) & 0x10) == 0) {
            goto LABEL_116;
          }
LABEL_141:
          int v89 = 0;
          if (v151) {
            *(unsigned char *)(*((void *)v8 + 2) + 481) &= ~1u;
          }
          goto LABEL_117;
        }
        uint64_t v122 = *((void *)v8 + 2);
        if (!*(_DWORD *)(*(void *)v4 + 112))
        {
          *(unsigned char *)(v122 + 16) = 3;
          __asm { FCVT            H0, S1 }
          *(int16x4_t *)(*((void *)v8 + 2) + 8) = vdup_lane_s16(*(int16x4_t *)&_D0, 0);
          goto LABEL_111;
        }
        *(unsigned char *)(v122 + 16) = 8;
        uint64_t v123 = *((void *)v8 + 2);
        *(int32x4_t *)(v123 + 24) = vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
        unsigned int v124 = bswap32(*(_DWORD *)(*(void *)v4 + 112));
        _Q1.i32[0] = v124;
        _Q1.i32[1] = v124 >> 8;
        _Q1.i32[2] = HIWORD(v124);
        v125.i64[0] = 0xFF000000FFLL;
        v125.i64[1] = 0xFF000000FFLL;
        int32x4_t v126 = (int32x4_t)vandq_s8((int8x16_t)_Q1, v125);
        v126.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v124), 0x18uLL).i32[3];
        *(float16x4_t *)(v123 + 8) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v126), v150));
        if ((*(unsigned char *)(*(void *)&v187[0] + 13) & 0x10) == 0) {
          goto LABEL_111;
        }
        int v80 = *(unsigned __int8 *)(*(void *)v4 + 112);
        LODWORD(v66) = 1;
LABEL_102:
        if (v80 != 0xFF) {
          goto LABEL_116;
        }
        goto LABEL_141;
      }
      uint64_t v84 = *((void *)v8 + 2);
      unint64_t v85 = *(void *)(v84 + 16) & 0xFFFFFF00FF00FF00;
      if (*(void *)(v84 + 8) == 0x3C003C003C003C00) {
        int v86 = 1;
      }
      else {
        int v86 = 3;
      }
      *(_DWORD *)(v84 + 16) = v86 | v85;
      *(_DWORD *)(v84 + 2CASetDebugMessage("", 0) = HIDWORD(v85);
LABEL_111:
      LODWORD(v66) = 1;
LABEL_116:
      *((unsigned char *)v4 + 146) = 0;
      int v89 = 1;
LABEL_117:
      if (v6)
      {
        *((void *)v8 + 16) = 0;
        *((void *)v8 + 12) = v156;
        *(_OWORD *)((char *)v8 + 104) = xmmword_184997E70;
        double v90 = *((double *)v4 + 8);
        double v91 = *((double *)v4 + 16);
        double v92 = *((double *)v4 + 17);
        float v93 = v91 + v90 * (double)v163;
        float v94 = v92 + v90 * v165;
        *(float *)&double v91 = v91 + v90 * (double)v164.u32[0];
        *(float *)&double v90 = v92 + v90 * (double)v164.u32[1];
        CA::OGL::Context::array_rect(v8, v93, v94, *(float *)&v91, *(float *)&v90);
        uint64_t v95 = *(void *)(*((void *)v8 + 2) + 8);
        uint64_t v96 = *((void *)v8 + 15) + 48 * *((void *)v8 + 16);
        *(void *)(v96 - 16CASetDebugMessage("", 0) = v95;
        *(void *)(v96 - 112) = v95;
        *(void *)(v96 - 64) = v95;
        *(void *)(v96 - 16) = v95;
        if ((int)v66 >= 1)
        {
          int v97 = HIDWORD(v187[2]);
          uint64_t v98 = *(void *)&v187[3];
          int v99 = DWORD2(v187[3]);
          uint64_t v100 = *((void *)v8 + 15);
          uint64_t v101 = *((void *)v8 + 16) - 4;
          double v102 = (_DWORD *)(v100 + 48 * v101);
          v102[4] = HIDWORD(v187[2]);
          v102[5] = v98;
          v102[16] = HIDWORD(v98);
          v102[17] = v98;
          v102[28] = HIDWORD(v98);
          v102[29] = v99;
          v102[40] = v97;
          v102[41] = v99;
          if (v66 != 1)
          {
            int v103 = HIDWORD(v190);
            uint64_t v104 = v191;
            int v105 = DWORD2(v191);
            uint64_t v106 = v100 + 48 * v101;
            *(_DWORD *)(v106 + 24) = HIDWORD(v190);
            *(_DWORD *)(v106 + 28) = v104;
            v102[18] = HIDWORD(v104);
            v102[19] = v104;
            v102[30] = HIDWORD(v104);
            v102[31] = v105;
            v102[42] = v103;
            v102[43] = v105;
          }
        }
        this = CA::OGL::Context::array_flush((uint64_t)v8);
      }
      else
      {
        uint64_t v108 = *((void *)v8 + 31);
        v177[0] = 0;
        v177[1] = 0;
        double v109 = *((double *)v4 + 6);
        uint64_t v110 = *((void *)v4 + 3);
        if (v110)
        {
          double v111 = *(double *)(v110 + 264);
          if (v111 != 1.0) {
            double v109 = v109 / v111;
          }
        }
        double v112 = v109 * (double)v163;
        double v113 = v109 * v165;
        *(double *)uint64_t v184 = v112;
        double v185 = v109 * v165;
        v114.i64[0] = v164.u32[0];
        v114.i64[1] = v164.u32[1];
        float64x2_t v115 = vmulq_n_f64(vcvtq_f64_u64(v114), v109);
        float64x2_t v186 = v115;
        if (v110)
        {
          float64x2_t v116 = *(float64x2_t *)(v110 + 8);
          double v117 = *(double *)(v110 + 16) + v113;
          *(double *)uint64_t v184 = v116.f64[0] + v112;
          double v185 = v117;
          float64x2_t v186 = vaddq_f64(v116, v115);
          float64x2_t v118 = (unsigned __int8 *)(v110 + 104);
        }
        else
        {
          float64x2_t v118 = *(unsigned __int8 **)(v108 + 24);
        }
        uint64_t v181 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = 0;
        BOOL v119 = ((v118[144] >> 4) & 1) == 0;
        uint64_t v120 = *(void *)(v108 + 8);
        v178.i64[0] = (uint64_t)v8;
        v178.i64[1] = v120;
        uint64_t v179 = 0;
        uint64_t v180 = 0;
        LOBYTE(v181) = v119;
        BYTE1(v181) = 1;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v178);
        while (1)
        {
          this = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v178, v177);
          if (!this) {
            break;
          }
          CA::OGL::emit_quad(v8, (CA::OGL::Context *)v184, (const double *)v177, (const CA::Bounds *)v118, (const CA::Transform *)((char *)&v187[2] + 12), (float *)&v190 + 3, v121);
        }
      }
      if (((v89 | !v151) & 1) == 0) {
        *(unsigned char *)(*((void *)v8 + 2) + 481) |= 1u;
      }
      if ((int)v66 < 2)
      {
        if (v66 == 1) {
          goto LABEL_133;
        }
      }
      else
      {
        (*(void (**)(CA::OGL *, void, uint64_t))(*(void *)v8 + 520))(v8, *((void *)&v188 + 1), 1);
        uint64_t v107 = v188;
        if (atomic_fetch_add((atomic_uint *volatile)(v188 + 8), 0xFFFFFFFF) == 1) {
          (*(void (**)(uint64_t))(*(void *)v107 + 16))(v107);
        }
LABEL_133:
        (*(void (**)(CA::OGL *, void, void))(*(void *)v8 + 520))(v8, *((void *)&v187[0] + 1), 0);
        this = *(void *)&v187[0];
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v187[0] + 8), 0xFFFFFFFF) == 1) {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 16))(this);
        }
      }
      uint64_t v19 = (v167 + 1);
      int v18 = v4[28];
    }
    while ((int)v19 < v18);
    int v14 = v4[29];
LABEL_148:
    uint64_t v13 = (v13 + 1);
  }
  while ((int)v13 < v14);
  *(unsigned char *)(*((void *)v8 + 2) + 16) = 0;
  if (v168) {
    return this;
  }
LABEL_152:
  this = (*(uint64_t (**)(void))(**(void **)v4 + 280))(*(void *)v4);
  if ((int)this >= 1)
  {
    __int32 v127 = v8;
    int v128 = v4[26];
    LODWORD(v187[0]) = v128 - (*(uint64_t (**)(void))(**(void **)v4 + 280))(*(void *)v4);
    int v129 = v4[28];
    DWORD1(v187[0]) = (*(uint64_t (**)(void))(**(void **)v4 + 280))() + v129;
    int v130 = v4[27];
    unsigned int v131 = v130 - (*(uint64_t (**)(void))(**(void **)v4 + 280))();
    int v132 = v4[26];
    *((void *)&v187[0] + 1) = __PAIR64__(v4[27], v131);
    LODWORD(v187[1]) = v132 - (*(uint64_t (**)(void))(**(void **)v4 + 280))();
    int v133 = v4[28];
    unsigned int v134 = (*(uint64_t (**)(void))(**(void **)v4 + 280))() + v133;
    int v135 = v4[29];
    *(void *)((char *)&v187[1] + 4) = __PAIR64__(v135, v134);
    HIDWORD(v187[1]) = (*(uint64_t (**)(void))(**(void **)v4 + 280))() + v135;
    int v136 = v4[26];
    int v137 = v136 - (*(uint64_t (**)(void))(**(void **)v4 + 280))();
    int v138 = v127;
    LODWORD(v187[2]) = v137;
    int32x4_t v176 = *(int32x4_t *)(v4 + 26);
    int32x4_t v139 = vrev64q_s32(v176);
    v139.i64[0] = *((void *)v4 + 13);
    *(int32x4_t *)((char *)&v187[2] + 4) = v139;
    this = (*(uint64_t (**)(void))(**(void **)v4 + 280))();
    unint64_t v140 = 0;
    int v141 = v4[27];
    DWORD1(v187[3]) = this + v176.i32[2];
    DWORD2(v187[3]) = v141;
    HIDWORD(v187[3]) = v4[29];
    uint64_t v142 = (double *)((char *)v127 + 240);
    do
    {
      uint64_t v143 = *(unsigned int *)((char *)v187 + ((1 * v140) | 8));
      int v144 = *(_DWORD *)((char *)v187 + ((1 * v140) | 0xC));
      if ((int)v143 < v144)
      {
        uint64_t v145 = LODWORD(v187[v140]);
        int v146 = *(_DWORD *)((char *)v187 + ((1 * v140) | 4));
        do
        {
          uint64_t v147 = v145;
          if ((int)v145 < v146)
          {
            do
            {
              uint64_t v148 = *((void *)v138 + 27);
              if (v148) {
                float64x2_t v149 = (double *)(v148 + 72);
              }
              else {
                float64x2_t v149 = v142;
              }
              this = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, double))(**(void **)v4 + 272))(*(void *)v4, v4[19], v147, v143, ((v147 - v4[30]) * (v147 - v4[30]) + (v143 - v4[31]) * (v143 - v4[31])), *((unsigned int *)v138 + 57), *v149);
              uint64_t v147 = (v147 + 1);
            }
            while (v146 != v147);
          }
          uint64_t v143 = (v143 + 1);
        }
        while (v143 != v144);
      }
    }
    while (v140++ < 3);
  }
  return this;
}

_OWORD *CA::OGL::TiledImageGeometry::bind_image(int32x2_t **this, uint64_t a2, float32x4_t *a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 22);
  if (v3 < 1) {
    return 0;
  }
  int v5 = *((_DWORD *)this + 23);
  if (v5 < 1) {
    return 0;
  }
  uint64_t v8 = (uint64_t)this[1];
  uint64_t v9 = *(void *)(v8 + 248);
  if (((_WORD)this[18] & 1) != 0
    || *((_DWORD *)this + 26) != *((_DWORD *)this + 28) - 1
    || *((_DWORD *)this + 27) != *((_DWORD *)this + 29) - 1)
  {
    goto LABEL_30;
  }
  uint64_t v10 = *this;
  int32x2_t v11 = (*this)[12];
  LODWORD(__dst[0]) = 0;
  LODWORD(v65[0]) = 0;
  uint64_t v12 = *(void *)(v8 + 216);
  if (v12) {
    uint64_t v13 = (double *)(v12 + 72);
  }
  else {
    uint64_t v13 = (double *)(v8 + 240);
  }
  int v14 = (CA::Render::Texture *)(*(uint64_t (**)(int32x2_t *, void, double))(*(void *)v10 + 256))(v10, *((unsigned int *)this + 19), *v13);
  int v15 = (int32x2_t *)v14;
  if ((*(unsigned char *)(v8 + 432) & 0x40) != 0)
  {
    LODWORD(__dst[0]) = 1065353216;
    BOOL v16 = 1;
  }
  else
  {
    BOOL v16 = *(float *)__dst == 1.0;
  }
  if (v14) {
    BOOL v18 = !v16;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    uint64_t v19 = this[2] & 0x2B3F;
    v78[0] = this[2] & 0x2B3F;
    uint32x2_t v20 = v14;
    if (((_WORD)this[18] & 0x100) != 0)
    {
      uint32x2_t v20 = CA::OGL::TiledImageGeometry::lanczos_image((CA::OGL::Context **)this, v14, 0.0, 0.0, *((double *)this + 6) * *((double *)this + 4), v78, a3);
      uint64_t v19 = v78[0];
    }
    uint64_t v21 = 20;
    if (*((double *)this + 4) > 1.001) {
      uint64_t v21 = 21;
    }
    uint64_t v22 = CA::OGL::Context::bind_image(v8, a2, v20, v19, *((unsigned __int8 *)this + v21), *((unsigned __int8 *)this + v21), 0, 0, 0.0, a3, 0);
    if (v22)
    {
      char v17 = (_OWORD *)v22;
      int32x2_t v23 = v15[2];
      *(float32x2_t *)v24.f32 = vdiv_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 8uLL), *(float32x2_t *)a3->f32), vcvt_f32_u32((uint32x2_t)v23));
      *(int32x2_t *)v25.i8 = vmul_s32((int32x2_t)this[13], v11);
      v24.i64[1] = v24.i64[0];
      v25.u64[1] = (unint64_t)vsub_s32((int32x2_t)this[12], vadd_s32(*(int32x2_t *)v25.i8, v23));
      float32x4_t v26 = vmulq_f32(v24, vcvtq_f32_u32(v25));
      v27.i64[0] = vsubq_f32(*a3, v26).u64[0];
      v27.i64[1] = vaddq_f32(*a3, v26).i64[1];
      *a3 = v27;
      if (atomic_fetch_add((atomic_uint *volatile)&v15[1], 0xFFFFFFFF) == 1) {
        (*(void (**)(int32x2_t *))(*(void *)v15 + 16))(v15);
      }
      return v17;
    }
    goto LABEL_27;
  }
  if (v14)
  {
LABEL_27:
    if (atomic_fetch_add((atomic_uint *volatile)&v15[1], 0xFFFFFFFF) == 1) {
      (*(void (**)(int32x2_t *))(*(void *)v15 + 16))(v15);
    }
  }
  int v3 = *((_DWORD *)this + 22);
  int v5 = *((_DWORD *)this + 23);
LABEL_30:
  int v28 = *((_DWORD *)this + 20);
  int v29 = *((_DWORD *)this + 21);
  double v30 = *((double *)this + 8);
  int32x2_t v62 = (int32x2_t)__PAIR64__(vcvtmd_s64_f64(v30 * (double)v29), vcvtmd_s64_f64(v30 * (double)v28));
  signed __int32 v63 = vcvtpd_s64_f64(v30 * (double)(v3 + v28)) - v62.i32[0];
  signed __int32 v64 = vcvtpd_s64_f64(v30 * (double)(v5 + v29)) - v62.i32[1];
  int v80 = 0;
  long long v84 = 0u;
  long long v79 = 0u;
  uint64_t v81 = 0x3C003C003C003C00;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  *(void *)&long long v84 = 0;
  *(void *)int8x16_t v78 = 0;
  if (v9)
  {
    long long v79 = *(_OWORD *)(v9 + 8);
    int v80 = *(_OWORD **)(v9 + 24);
    float v31 = *(float *)(v9 + 64);
    __int16 v32 = *(_WORD *)(v9 + 68) & 0x500 | 1;
  }
  else
  {
    long long v79 = 0uLL;
    __int16 v32 = 1025;
    float v31 = 1.0;
    int v80 = 0;
  }
  *((float *)&v84 + 2) = v31;
  WORD6(v84) = v32;
  uint64_t v75 = 0;
  double v33 = *((double *)this + 7);
  v65[1] = 0u;
  long long v69 = 0u;
  uint64_t v66 = 0;
  long long v68 = 0u;
  long long v71 = 0u;
  long long v72 = xmmword_184997D60;
  v65[0] = *(unint64_t *)&v33;
  double v67 = v33;
  long long v70 = 0x3FF0000000000000uLL;
  double v73 = v33;
  double v74 = 1.0 / v33;
  uint64_t v75 = (8 * (v33 != 1.0));
  *((void *)&v79 + 1) = 0;
  int v80 = v65;
  memset(v77, 0, sizeof(v77));
  CA::Shape::operator=((uint64_t)v77, &v62);
  *(void *)&long long v79 = v77;
  *(void *)int8x16_t v78 = CA::OGL::Context::set_gstate(v8, (uint64_t)v78);
  int v34 = *(const void **)(v8 + 16);
  memcpy(__dst, v34, sizeof(__dst));
  __dst[0] = v34;
  *(void *)(v8 + 16) = __dst;
  LOBYTE(__dst[2]) = 0;
  BYTE1(__dst[60]) &= ~1u;
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, int32x2_t *, uint64_t))(*(void *)v8 + 656))(v8, 1, &v62, 15);
  if (v35)
  {
    uint64_t v36 = v35;
    CA::OGL::Context::push_surface(v8, v35, 1u, 4, 0);
    CA::OGL::TiledImageGeometry::draw_tiles((uint64_t)this, 1, 0);
    if (byte_1EB2ACBE1)
    {
      if (v63 <= v64) {
        int v50 = v64;
      }
      else {
        int v50 = v63;
      }
      v38.i32[0] = 1073741822;
      v39.i32[0] = v50;
      int8x16_t v51 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v39, v38), 0);
      v52.i64[0] = v62.i32[0];
      v52.i64[1] = v62.i32[1];
      int8x16_t v54 = (int8x16_t)vcvtq_f64_s64(v52);
      int8x16_t v53 = vbslq_s8(v51, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v54);
      *(double *)v54.i64 = (double)v63;
      double v55 = (double)v64;
      if (v50 > 1073741822)
      {
        *(double *)v54.i64 = 1.79769313e308;
        double v55 = 1.79769313e308;
      }
      int8x16_t v59 = v53;
      uint64_t v60 = v54.i64[0];
      double v61 = v55;
      v56[0] = &v59;
      v56[1] = v80;
      long long v57 = 0u;
      long long v58 = 0u;
      CA::OGL::fill_color_rect(v8, (uint64_t)v56, (double *)0x80800080, v37, 0.0, v54);
    }
    CA::OGL::Context::pop_surface((CA::OGL::Context *)v8);
    *(void *)(v8 + 16) = __dst[0];
    __dst[0] = 0;
    CA::OGL::Context::set_gstate(v8, **(void **)(v8 + 248));
    if (((_BYTE)this[2] & 0x3F) != 0)
    {
      unsigned int v40 = *((unsigned __int8 *)this + 20);
      uint64_t v41 = *((unsigned __int8 *)this + 21);
    }
    else
    {
      unsigned int v40 = 0;
      uint64_t v41 = 0;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v43 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
    char v17 = v43;
    if (v43)
    {
      void v43[2] = 0u;
      v43[3] = 0u;
      *uint64_t v43 = 0u;
      v43[1] = 0u;
    }
    *((void *)v43 + 3) = v36;
    CA::OGL::Context::bind_surface(v8, v36, a2, v40, v41, 0.0);
    int v44 = *(unsigned __int16 *)(*(void *)(v8 + 16) + 2 * a2 + 144) | (*((unsigned __int16 *)v17 + 27) << 16);
    *((_DWORD *)v17 + 13) = v44;
    *((_WORD *)v17 + 29) = *((_WORD *)v17 + 29) & 0xFEFF | (16 * *(_WORD *)(v36 + 75)) & 0x100;
    *((_DWORD *)v17 + 13) = v44 & 0xFF00FFFF | ((v40 & 0xF) << 16) & 0xFF0FFFFF | ((v41 & 0xF) << 20);
    int32x2_t v45 = vneg_s32(v62);
    v46.i64[0] = v45.i32[0];
    v46.i64[1] = v45.i32[1];
    float32x2_t v47 = vcvt_f32_f64(vaddq_f64(*((float64x2_t *)this + 8), vcvtq_f64_s64(v46)));
    *(float32x2_t *)a3->f32 = v47;
    int v48 = this[12];
    v46.i64[0] = v48;
    v46.i64[1] = HIDWORD(v48);
    *(float32x2_t *)&a3->u32[2] = vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(v47), vcvtq_f64_u64((uint64x2_t)v46), *((double *)this + 8)));
  }
  else
  {
    *(void *)(v8 + 16) = __dst[0];
    __dst[0] = 0;
    CA::OGL::Context::set_gstate(v8, **(void **)(v8 + 248));
    char v17 = 0;
  }
  if (__dst[0]) {
    __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  }
  return v17;
}

_OWORD *CA::OGL::bind_tiled_image(uint64_t a1, uint64_t a2, CA::Render::TiledTexture *a3, double *a4, char a5, char a6, CA::OGL::ContentsGeometry *a7, float32x4_t *a8, float a9)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  CA::OGL::TiledImageGeometry::TiledImageGeometry((uint64_t)v12, a3, a1, a4, a5, a6, a7, a9);
  return CA::OGL::TiledImageGeometry::bind_image((int32x2_t **)v12, a2, a8);
}

uint64_t CA::OGL::draw_tiled_image(uint64_t a1, CA::Render::TiledTexture *a2, char a3, char a4, CA::OGL::ContentsGeometry *this, int a6, float a7)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  CA::OGL::TiledImageGeometry::TiledImageGeometry((uint64_t)v9, a2, a1, (double *)*((unsigned int *)this + 77), a3, a4, this, a7);
  return CA::OGL::TiledImageGeometry::draw_tiles((uint64_t)v9, 0, a6);
}

uint64_t CA::OGL::PathFiller::mark_spans(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v5 = *(unsigned int *)(result + 56);
  if ((int)v5 < 2)
  {
    int v7 = 0;
    int v8 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = v5 - 1;
    do
    {
      float v10 = *(float *)(result + 68 + 4 * v6++);
      if (v10 < a2) {
        int v7 = v6;
      }
      if (v10 < a4) {
        int v8 = v6;
      }
    }
    while (v9 != v6);
  }
  uint64_t v11 = *(unsigned int *)(result + 60);
  if ((int)v11 < 2)
  {
    char v13 = 0;
    char v17 = 31;
  }
  else
  {
    uint64_t v12 = 0;
    char v13 = 0;
    char v14 = 0;
    uint64_t v15 = v11 - 1;
    do
    {
      float v16 = *(float *)(result + 200 + 4 * v12++);
      if (v16 < a3) {
        char v13 = v12;
      }
      if (v16 < a5) {
        char v14 = v12;
      }
    }
    while (v15 != v12);
    char v17 = 31 - v14;
  }
  if (v7 <= v8)
  {
    unsigned int v18 = (0xFFFFFFFF >> v17) & (-1 << v13);
    int v19 = v8 - v7 + 1;
    uint32x2_t v20 = (_DWORD *)(result + 4 * v7 + 328);
    do
    {
      *v20++ |= v18;
      --v19;
    }
    while (v19);
  }
  return result;
}

_DWORD *CA::OGL::PathFiller::add_cube(CA::OGL::PathFiller *this, _DWORD *a2, float a3)
{
  uint64_t v4 = *((void *)this + 73);
  int v5 = *((_DWORD *)this + 161);
  float v6 = *((float *)a2 + 1);
  int v7 = a2 + 6;
  float v8 = *((float *)a2 + 7);
  float v9 = 1.0;
  uint64_t v10 = 1;
  uint64_t v11 = 2;
  BOOL v12 = v8 < v6;
  if (v8 < v6)
  {
    uint64_t result = a2 + 6;
  }
  else
  {
    float v9 = -1.0;
    uint64_t result = a2;
  }
  if (v8 >= v6) {
    uint64_t v11 = 1;
  }
  else {
    float v6 = *((float *)a2 + 7);
  }
  if (v12) {
    int v7 = a2;
  }
  else {
    uint64_t v10 = 2;
  }
  *(float *)(v4 + 40 * v5) = v9;
  LODWORD(v14) = *result;
  *((float *)&v14 + 1) = v6;
  uint64_t v15 = v4 + 40 * v5;
  *(void *)(v15 + 8) = v14;
  *(void *)(v15 + 16) = *(void *)&a2[2 * v11];
  if (v12) {
    float v16 = a2 + 1;
  }
  else {
    float v16 = a2 + 7;
  }
  *(void *)(v15 + 24) = *(void *)&a2[2 * v10];
  LODWORD(v17) = *v7;
  HIDWORD(v17) = *v16;
  *(float *)(v15 + 4) = a3;
  *(void *)(v15 + 32) = v17;
  int v18 = *((_DWORD *)this + 161) + 1;
  *((_DWORD *)this + 161) = v18;
  if (v18 >= *((_DWORD *)this + 152))
  {
    *((unsigned char *)this + 664) = 1;
    CA::OGL::PathFiller::emit_span_rect_coverage((int *)this);
    return (_DWORD *)CA::OGL::PathFiller::flush_cube((uint64_t)this);
  }
  return result;
}

int *CA::OGL::PathFiller::emit_span_rect_coverage(int *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this[14] >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = v2;
      this = (int *)CA::OGL::PathFiller::emit_rects_from_points((CA::OGL::PathFiller *)v1, v2, v2);
      ++v2;
      uint64_t v4 = *(unsigned int *)(v1 + 56);
      int v5 = *(_DWORD *)(v1 + 644);
      if (v5 >= 1)
      {
        uint64_t v6 = 0;
        float v7 = *(float *)(v1 + 64 + 4 * v3);
        float v8 = *(float *)(v1 + 64 + 4 * v2);
        uint64_t v9 = 16;
        do
        {
          uint64_t v10 = 0;
          uint64_t v11 = *(void *)(v1 + 584);
          uint64_t v12 = *(void *)(v11 + 40 * v6 + 8);
          float v13 = *(float *)&v12;
          float v14 = *(float *)&v12;
          do
          {
            uint64_t v15 = *(void *)(v11 + v9 + v10);
            if (v14 <= *(float *)&v15) {
              LODWORD(v14) = *(void *)(v11 + v9 + v10);
            }
            if (v13 >= *(float *)&v15) {
              LODWORD(v13) = *(void *)(v11 + v9 + v10);
            }
            v10 += 8;
          }
          while (v10 != 24);
          if (v13 <= v8 && (v14 > v7 || v3 == 0) && v14 <= v8)
          {
            *(float *)(v11 + 40 * v6 + 4) = v8;
            if (v2 != v4)
            {
              this = (int *)CA::OGL::PathFiller::add_points((float *)v1, *((float *)&v12 + 1), *(float *)(v11 + 40 * v6 + 36), *(float *)(v11 + 40 * v6), v2);
              int v5 = *(_DWORD *)(v1 + 644);
            }
          }
          ++v6;
          v9 += 40;
        }
        while (v6 < v5);
        LODWORD(v4) = *(_DWORD *)(v1 + 56);
      }
    }
    while (v2 < (int)v4);
  }
  *(_DWORD *)(v1 + 652) = 0;
  return this;
}

uint64_t CA::OGL::PathFiller::flush_cube(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 644);
  if (v1)
  {
    uint64_t v2 = (_DWORD *)this;
    if (v1 >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      __asm { FMOV            V0.2S, #3.0 }
      do
      {
        uint64_t v10 = (float32x2_t *)(*(void *)(this + 584) + v3);
        float32x2_t v11 = v10[1];
        float32x2_t v12 = v10[2];
        float32x2_t v13 = v10[3];
        v10[1] = vmla_f32(vsub_f32(v10[4], v11), _D0, vsub_f32(v12, v13));
        void v10[2] = vmul_f32(vadd_f32(vsub_f32(v11, vadd_f32(v12, v12)), v13), _D0);
        v10[3] = vmul_f32(vsub_f32(v12, v11), _D0);
        v10[4] = v11;
        ++v4;
        v3 += 40;
      }
      while (v4 < *(int *)(this + 644));
    }
    if (*(unsigned char *)(this + 641)) {
      char v14 = 84;
    }
    else {
      char v14 = 83;
    }
    *(unsigned char *)(*(void *)(*(void *)this + 16) + 16) = v14;
    this = (*(uint64_t (**)(void))(**(void **)this + 320))();
    *(unsigned char *)(*(void *)(*(void *)v2 + 16) + 481) |= 4u;
    v2[161] = 0;
  }
  return this;
}

void *CA::OGL::PathFiller::emit_rects_from_points(CA::OGL::PathFiller *this, int a2, int a3)
{
  uint64_t v4 = (float *)*((void *)this + 75);
  unint64_t v5 = *((int *)this + 163);
  unint64_t v6 = 126 - 2 * __clz(v5);
  if (v5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = std::__introsort<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *,false>(v4, &v4[2 * v5], v7, 1);
  uint64_t v9 = (float *)*((void *)this + 75);
  uint64_t v10 = *((int *)this + 163);
  *(void *)&v9[2 * v10] = 2139095040;
  if ((int)v10 <= 0)
  {
    *((_DWORD *)this + 163) = 0;
  }
  else
  {
    int v11 = 0;
    *(float *)&uint64_t v12 = *v9;
    uint64_t v13 = 8 * v10 + 8;
    uint64_t v14 = 8;
    do
    {
      float v15 = *(float *)&v12;
      uint64_t v12 = *(void *)&v9[(unint64_t)v14 / 4];
      float v16 = &v9[2 * v11];
      float v18 = v16[1];
      uint64_t v17 = v16 + 1;
      float v19 = v18;
      if (*(float *)&v12 == v15)
      {
        *uint64_t v17 = v19 + *((float *)&v12 + 1);
      }
      else
      {
        if (v19 != 0.0) {
          ++v11;
        }
        *(void *)&v9[2 * v11] = v12;
      }
      v14 += 8;
    }
    while (v13 != v14);
    *((_DWORD *)this + 163) = v11;
    if (v11 >= 2)
    {
      float v20 = *v9;
      float v21 = v9[1];
      uint64_t v22 = 1;
      do
      {
        float v23 = v20;
        float32x4_t v24 = (float *)(*((void *)this + 75) + 8 * v22);
        float v20 = *v24;
        float v25 = v24[1];
        if (v21 != 0.0)
        {
          uint64_t v26 = *((unsigned int *)this + 15);
          if ((int)v26 < 2)
          {
            char v28 = 0;
            char v29 = 0;
          }
          else
          {
            uint64_t v27 = 0;
            char v28 = 0;
            char v29 = 0;
            uint64_t v30 = v26 - 1;
            do
            {
              float v31 = *((float *)this + v27++ + 50);
              if (v31 < v23) {
                char v29 = v27;
              }
              if (v31 < v20) {
                char v28 = v27;
              }
            }
            while (v30 != v27);
          }
          unsigned int v32 = (0xFFFFFFFF >> ~v28) & (-1 << v29);
          if (a2 != a3 || *((unsigned char *)this + 664))
          {
            int v50 = (_DWORD *)((char *)this + 4 * a2 + 328);
            int v51 = a3 + 1 - a2;
            if (a2 <= a3)
            {
              do
              {
                *v50++ |= v32;
                --v51;
              }
              while (v51);
            }
            uint64_t result = CA::OGL::PathFiller::add_rect(this, *((float *)this + a2 + 16), v23, *((float *)this + a3 + 17), v20, -v21);
          }
          else
          {
            int v33 = (1 << v29) | (1 << v28);
            uint64_t v34 = a2;
            do
            {
              uint64_t v35 = (char *)this + 4 * v34;
              int v36 = v33 | *((_DWORD *)v35 + 82);
              *((_DWORD *)v35 + 82) = v36;
              unsigned int v37 = v36 & v32;
              if (*((unsigned char *)this + 640)) {
                BOOL v38 = ((int)v21 & 1) == 0;
              }
              else {
                BOOL v38 = 0;
              }
              if (!v38) {
                *((_DWORD *)v35 + 114) |= v37 ^ v32;
              }
              uint64_t v39 = v34 + 1;
              int v40 = *((_DWORD *)this + 15);
              if ((v40 & 0x80000000) == 0)
              {
                float v41 = *((float *)this + v34 + 16);
                float v42 = *((float *)this + v39 + 16);
                float v43 = *((float *)this + 49);
                uint64_t v44 = 50;
                float v45 = v43;
                do
                {
                  float v46 = *((float *)this + v44);
                  if ((v37 & 1) == 0)
                  {
                    if (v43 != v45)
                    {
                      if (v23 <= v43) {
                        float v47 = v23;
                      }
                      else {
                        float v47 = v43;
                      }
                      if (v47 < v45) {
                        float v47 = v45;
                      }
                      if (v20 <= v43) {
                        float v43 = v20;
                      }
                      if (v43 >= v45) {
                        float v48 = v43;
                      }
                      else {
                        float v48 = v45;
                      }
                      uint64_t result = CA::OGL::PathFiller::add_rect(this, v41, v47, v42, v48, -v21);
                    }
                    if (v37 < 2) {
                      break;
                    }
                    int v40 = *((_DWORD *)this + 15);
                    float v45 = v46;
                  }
                  v37 >>= 1;
                  uint64_t v49 = v44 - 50;
                  ++v44;
                  float v43 = v46;
                }
                while (v49 < v40);
              }
              uint64_t v34 = v39;
            }
            while (a3 + 1 != v39);
          }
        }
        float v21 = v25 + v21;
        ++v22;
      }
      while (v22 < *((int *)this + 163));
    }
  }
  return result;
}

float *CA::OGL::PathFiller::add_points(float *this, float a2, float a3, float a4, int a5)
{
  if (this[7] >= a2) {
    a2 = this[7];
  }
  uint64_t v5 = *((void *)this + 75);
  uint64_t v6 = *((int *)this + 163);
  uint64_t v7 = (float *)(v5 + 8 * v6);
  float *v7 = a2;
  v7[1] = -a4;
  float v8 = this[9];
  if (v8 > a3) {
    float v8 = a3;
  }
  *((_DWORD *)this + 163) = v6 + 2;
  uint64_t v9 = (float *)(v5 + 8 * ((int)v6 + 1));
  float *v9 = v8;
  v9[1] = a4;
  if ((int)v6 + 5 >= *((_DWORD *)this + 154))
  {
    uint64_t v10 = this;
    *((unsigned char *)this + 664) = 1;
    this = (float *)CA::OGL::PathFiller::emit_rects_from_points((CA::OGL::PathFiller *)this, a5, *((_DWORD *)this + 14) - 1);
    v10[163] = 0.0;
  }
  return this;
}

float *std::__introsort<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    uint64_t v10 = a2 - 2;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          unint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 3;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*v10 < *(float *)v11)
                {
                  uint64_t v38 = *(void *)v11;
                  *(void *)unint64_t v11 = *(void *)v10;
                  *(void *)uint64_t v10 = v38;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v11, (float *)(v11 + 8), a2 - 2);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (void *)a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = (float *)(v11 + 16);
                int v40 = (uint64_t *)(v11 + 24);
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (void *)(v11 + 24));
                if (*v10 < *(float *)(v11 + 24))
                {
                  uint64_t v41 = *v40;
                  *int v40 = *(void *)v10;
                  *(void *)uint64_t v10 = v41;
                  if (*(float *)v40 < *v39)
                  {
                    uint64_t v42 = *(void *)v39;
                    uint64_t v43 = *v40;
                    *(void *)uint64_t v39 = *v40;
                    *int v40 = v42;
                    if (*(float *)(v11 + 8) > *(float *)&v43)
                    {
                      uint64_t v44 = *(void *)(v11 + 8);
                      *(void *)(v11 + 8) = v43;
                      *(void *)(v11 + 16) = v44;
                      if (*(float *)v11 > *(float *)&v43)
                      {
                        uint64_t v45 = *(void *)v11;
                        *(void *)unint64_t v11 = v43;
                        *(void *)(v11 + 8) = v45;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            float v46 = (float *)(v11 + 8);
            BOOL v48 = (float *)v11 == a2 || v46 == a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                unint64_t v50 = v11;
                do
                {
                  int v51 = v46;
                  float v52 = *(float *)(v50 + 8);
                  if (v52 < *(float *)v50)
                  {
                    int v53 = *(_DWORD *)(v50 + 12);
                    uint64_t v54 = v49;
                    while (1)
                    {
                      *(void *)(v11 + v54 + 8) = *(void *)(v11 + v54);
                      if (!v54) {
                        break;
                      }
                      float v55 = *(float *)(v11 + v54 - 8);
                      v54 -= 8;
                      if (v55 <= v52)
                      {
                        uint64_t v56 = v11 + v54 + 8;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v56 = v11;
LABEL_85:
                    *(float *)uint64_t v56 = v52;
                    *(_DWORD *)(v56 + 4) = v53;
                  }
                  float v46 = v51 + 2;
                  v49 += 8;
                  unint64_t v50 = (unint64_t)v51;
                }
                while (v51 + 2 != a2);
              }
            }
            else if (!v48)
            {
              do
              {
                unint64_t v82 = (unint64_t)v46;
                float v83 = *(float *)(v9 + 8);
                if (v83 < *(float *)v9)
                {
                  int v84 = *(_DWORD *)(v9 + 12);
                  do
                  {
                    uint64_t v85 = v46;
                    uint64_t v86 = *((void *)v46 - 1);
                    v46 -= 2;
                    *(void *)uint64_t v85 = v86;
                  }
                  while (*(v85 - 4) > v83);
                  *float v46 = v83;
                  *((_DWORD *)v46 + 1) = v84;
                }
                float v46 = (float *)(v82 + 8);
                unint64_t v9 = v82;
              }
              while ((float *)(v82 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((float *)v11 != a2)
            {
              int64_t v57 = (v13 - 2) >> 1;
              int64_t v58 = v57;
              do
              {
                int64_t v59 = v58;
                if (v57 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  double v61 = (float *)(v11 + 8 * v60);
                  if (2 * v59 + 2 < (uint64_t)v13 && *v61 < v61[2])
                  {
                    v61 += 2;
                    uint64_t v60 = 2 * v59 + 2;
                  }
                  unint64_t v62 = v11 + 8 * v59;
                  float v63 = *(float *)v62;
                  if (*v61 >= *(float *)v62)
                  {
                    int v64 = *(_DWORD *)(v62 + 4);
                    do
                    {
                      float32x4_t v65 = v61;
                      *(void *)unint64_t v62 = *(void *)v61;
                      if (v57 < v60) {
                        break;
                      }
                      uint64_t v66 = 2 * v60;
                      uint64_t v60 = (2 * v60) | 1;
                      double v61 = (float *)(v11 + 8 * v60);
                      uint64_t v67 = v66 + 2;
                      if (v67 < (uint64_t)v13 && *v61 < v61[2])
                      {
                        v61 += 2;
                        uint64_t v60 = v67;
                      }
                      unint64_t v62 = (unint64_t)v65;
                    }
                    while (*v61 >= v63);
                    *float32x4_t v65 = v63;
                    *((_DWORD *)v65 + 1) = v64;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              uint64_t v68 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v69 = 0;
                uint64_t v70 = *(void *)v11;
                unint64_t v71 = v11;
                do
                {
                  long long v72 = (void *)v71;
                  v71 += 8 * v69 + 8;
                  uint64_t v73 = 2 * v69;
                  uint64_t v69 = (2 * v69) | 1;
                  uint64_t v74 = v73 + 2;
                  if (v74 < v68 && *(float *)v71 < *(float *)(v71 + 8))
                  {
                    v71 += 8;
                    uint64_t v69 = v74;
                  }
                  *long long v72 = *(void *)v71;
                }
                while (v69 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                a2 -= 2;
                if ((float *)v71 == a2)
                {
                  *(void *)unint64_t v71 = v70;
                }
                else
                {
                  *(void *)unint64_t v71 = *(void *)a2;
                  *(void *)a2 = v70;
                  uint64_t v75 = v71 - v11 + 8;
                  if (v75 >= 9)
                  {
                    unint64_t v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                    unsigned int v77 = (void *)(v11 + 8 * v76);
                    float v78 = *(float *)v71;
                    if (*(float *)v77 < *(float *)v71)
                    {
                      int v79 = *(_DWORD *)(v71 + 4);
                      do
                      {
                        int v80 = v77;
                        *(void *)unint64_t v71 = *v77;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                        unsigned int v77 = (void *)(v11 + 8 * v76);
                        unint64_t v71 = (unint64_t)v80;
                      }
                      while (*(float *)v77 < v78);
                      *(float *)int v80 = v78;
                      *((_DWORD *)v80 + 1) = v79;
                    }
                  }
                }
              }
              while (v68-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          float v15 = (float *)(v11 + 8 * (v13 >> 1));
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)v9, (float *)(v9 + 8 * (v13 >> 1)), a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)(v9 + 8), v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v14), a2 - 6);
            uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(v15 - 2, v15, (float *)(v9 + 8 + 8 * v14));
            uint64_t v16 = *(void *)v9;
            *(void *)unint64_t v9 = *(void *)v15;
            *(void *)float v15 = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)(v9 + 8 * (v13 >> 1)), (float *)v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          float v17 = *(float *)v9;
          if (*(float *)(v9 - 8) < *(float *)v9) {
            goto LABEL_13;
          }
          if (*v10 <= v17)
          {
            unint64_t v31 = v9 + 8;
            do
            {
              unint64_t v11 = v31;
              if (v31 >= (unint64_t)a2) {
                break;
              }
              v31 += 8;
            }
            while (*(float *)v11 <= v17);
          }
          else
          {
            unint64_t v11 = v9;
            do
            {
              float v30 = *(float *)(v11 + 8);
              v11 += 8;
            }
            while (v30 <= v17);
          }
          unsigned int v32 = a2;
          if (v11 < (unint64_t)a2)
          {
            unsigned int v32 = a2;
            do
            {
              float v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v33 > v17);
          }
          int v34 = *(_DWORD *)(v9 + 4);
          while (v11 < (unint64_t)v32)
          {
            uint64_t v35 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v32;
            *(void *)unsigned int v32 = v35;
            do
            {
              float v36 = *(float *)(v11 + 8);
              v11 += 8;
            }
            while (v36 <= v17);
            do
            {
              float v37 = *(v32 - 2);
              v32 -= 2;
            }
            while (v37 > v17);
          }
          BOOL v4 = v11 - 8 >= v9;
          BOOL v5 = v11 - 8 == v9;
          if (v11 - 8 != v9) {
            *(void *)unint64_t v9 = *(void *)(v11 - 8);
          }
          a4 = 0;
          *(float *)(v11 - 8) = v17;
          *(_DWORD *)(v11 - 4) = v34;
        }
        float v17 = *(float *)v9;
LABEL_13:
        int v18 = *(_DWORD *)(v9 + 4);
        unint64_t v19 = v9;
        do
        {
          unint64_t v20 = v19;
          float v21 = *(float *)(v19 + 8);
          v19 += 8;
        }
        while (v21 < v17);
        uint64_t v22 = a2;
        if (v20 == v9)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= (unint64_t)v22) {
              break;
            }
            float v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v17);
        }
        else
        {
          do
          {
            float v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v17);
        }
        if (v19 >= (unint64_t)v22)
        {
          unint64_t v11 = v19;
        }
        else
        {
          float v25 = v22;
          unint64_t v11 = v19;
          do
          {
            uint64_t v26 = *(void *)v11;
            *(void *)unint64_t v11 = *(void *)v25;
            *(void *)float v25 = v26;
            do
            {
              float v27 = *(float *)(v11 + 8);
              v11 += 8;
            }
            while (v27 < v17);
            do
            {
              float v28 = *(v25 - 2);
              v25 -= 2;
            }
            while (v28 >= v17);
          }
          while (v11 < (unint64_t)v25);
        }
        if (v11 - 8 != v9) {
          *(void *)unint64_t v9 = *(void *)(v11 - 8);
        }
        *(float *)(v11 - 8) = v17;
        *(_DWORD *)(v11 - 4) = v18;
        if (v19 >= (unint64_t)v22) {
          break;
        }
LABEL_34:
        uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *,false>(v9, v11 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(v9, v11 - 8);
      uint64_t result = (float *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(v11, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = (float *)(v11 - 8);
    if (!v29) {
      continue;
    }
    return result;
  }
}

_DWORD *CA::OGL::PathFiller::add_rect(_DWORD *this, float a2, float a3, float a4, float a5, float a6)
{
  int v6 = this[162];
  uint64_t v7 = (float *)(*((void *)this + 74) + 20 * v6);
  float *v7 = a2;
  v7[1] = a3;
  float64x2_t v7[2] = a4;
  v7[3] = a5;
  void v7[4] = a6;
  this[162] = v6 + 1;
  if (v6 + 1 >= this[153])
  {
    *((unsigned char *)this + 664) = 1;
    return CA::OGL::PathFiller::flush_rect(this);
  }
  return this;
}

_DWORD *CA::OGL::PathFiller::flush_rect(_DWORD *this)
{
  if (this[162])
  {
    int v1 = this;
    *(unsigned char *)(*(void *)(*(void *)this + 16) + 16) = 85;
    this = (_DWORD *)(*(uint64_t (**)(void, void, void))(**(void **)this + 328))(*(void *)this, v1[162], *((void *)v1 + 74));
    *(unsigned char *)(*(void *)(*(void *)v1 + 16) + 481) |= 4u;
    v1[162] = 0;
  }
  return this;
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(float *result, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (*a2 < *result)
      {
        uint64_t v7 = *(void *)result;
        *(void *)uint64_t result = *(void *)a2;
        *(void *)a2 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)result;
    if (v4 >= v3)
    {
      *(void *)uint64_t result = *(void *)a2;
      *(void *)a2 = v5;
      if (*a3 >= *(float *)&v5) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
    }
    else
    {
      *(void *)uint64_t result = *(void *)a3;
    }
    *(void *)a3 = v5;
  }
  return result;
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(float *a1, float *a2, float *a3, void *a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *a1)
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a2 - 8));
      return 1;
    case 5:
      uint64_t v16 = (float *)(a1 + 16);
      float v17 = (uint64_t *)(a1 + 24);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a1 + 24));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        uint64_t v18 = *v17;
        *float v17 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v18;
        if (*(float *)v17 < *v16)
        {
          uint64_t v19 = *(void *)v16;
          uint64_t v20 = *v17;
          *(void *)uint64_t v16 = *v17;
          *float v17 = v19;
          if (*(float *)(a1 + 8) > *(float *)&v20)
          {
            uint64_t v21 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v20;
            *(void *)(a1 + 16) = v21;
            if (*(float *)a1 > *(float *)&v20)
            {
              uint64_t v22 = *(void *)a1;
              *(void *)a1 = v20;
              *(void *)(a1 + 8) = v22;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = (float *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CA::OGL::PathFiller::emit_rects_from_points(int,int)::$_0 &,CA::OGL::PathFiller::ScanlinePoint *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      int v12 = *(_DWORD *)(v8 + 4);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v15 = a1;
LABEL_13:
      *(float *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    uint64_t v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

float *CA::OGL::PathFiller::close(float *this)
{
  int v1 = this;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *((_DWORD *)this + 10);
  float v3 = this[11];
  int v4 = *((_DWORD *)this + 12);
  float v5 = this[13];
  *((_DWORD *)this + 1CASetDebugMessage("", 0) = v4;
  this[11] = v5;
  if (v3 != v5)
  {
    unint64_t v6 = __PAIR64__(LODWORD(v3), v2);
    int v7 = v4;
    float v8 = v5;
    this = CA::OGL::PathFiller::emit_line(this, (float32x2_t *)&v6);
  }
  if (v1[165] < v1[6] && !*((unsigned char *)v1 + 664)) {
    v1[163] = v1[164];
  }
  return this;
}

float *CA::OGL::PathFiller::emit_line(float *this, float32x2_t *a2)
{
  float v3 = this;
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  for (char i = 1; ; char i = 0)
  {
    char v6 = i;
    if ((a2[v4].i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF || (a2[v4].i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF) {
      break;
    }
    uint64_t v4 = 1;
    if ((v6 & 1) == 0)
    {
      float v7 = a2->f32[1];
      float v8 = a2[1].f32[1];
      if (v7 >= v8) {
        float v9 = a2[1].f32[1];
      }
      else {
        float v9 = a2->f32[1];
      }
      if (v7 <= v8) {
        float v10 = a2[1].f32[1];
      }
      else {
        float v10 = a2->f32[1];
      }
      if (v9 <= this[9] && v10 >= this[7])
      {
        float v11 = a2[1].f32[0];
        float v12 = a2->f32[0] >= v11 ? a2[1].f32[0] : a2->f32[0];
        if (v12 <= this[8])
        {
          if (a2->f32[0] <= v11) {
            float v13 = a2[1].f32[0];
          }
          else {
            float v13 = a2->f32[0];
          }
          if (v13 <= this[6])
          {
            BOOL v19 = v7 <= v8;
            float v20 = 1.0;
            if (v19) {
              float v20 = -1.0;
            }
            return CA::OGL::PathFiller::add_points(this, v9, v10, v20, 0);
          }
          else
          {
            CA::OGL::PathFiller::mark_spans((uint64_t)this, v12, v9, v13, v10);
            int v14 = 0;
            int v15 = vcvtps_s32_f32((float)((float)(v13 - v12) * (float)*((int *)v3 + 14)) / v3[4]);
            if (v15 >= 128) {
              int v15 = 128;
            }
            if (v15 <= 1) {
              int v16 = 1;
            }
            else {
              int v16 = v15;
            }
            *(float32x2_t *)v17.f32 = *a2;
            do
            {
              ++v14;
              uint64_t v22 = v17.i64[0];
              v17.i64[1] = v17.i64[0];
              float32x2_t v21 = vmla_n_f32(*a2, vsub_f32(a2[1], *a2), (float)v14 * (float)(1.0 / (float)v16));
              *(float32x2_t *)v18.f32 = v21;
              *(float32x2_t *)&v18.u32[2] = v21;
              float32x4_t v23 = vmlaq_f32(vmulq_f32(v17, (float32x4_t)xmmword_184998600), (float32x4_t)xmmword_184998610, v18);
              float32x2_t v24 = v21;
              this = (float *)CA::OGL::PathFiller::add_cube((CA::OGL::PathFiller *)v3, &v22, v13);
              *(float32x2_t *)v17.f32 = v21;
            }
            while (v16 != v14);
          }
        }
      }
      return this;
    }
  }
  return this;
}

float *CA::OGL::PathFiller::line_to(float *result, float a2, float a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *((_DWORD *)result + 10);
  float v4 = result[11];
  result[10] = a2;
  result[11] = a3;
  float v5 = result[165];
  if (v5 <= a2) {
    float v5 = a2;
  }
  result[165] = v5;
  if (a3 != v4)
  {
    unint64_t v6 = __PAIR64__(LODWORD(v4), v3);
    float v7 = a2;
    float v8 = a3;
    return CA::OGL::PathFiller::emit_line(result, (float32x2_t *)&v6);
  }
  return result;
}

void CA::OGL::PathFiller::quad_to(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v26 = v6;
  float v27 = a2;
  float v28 = a3;
  unint64_t v29 = __PAIR64__(LODWORD(a5), LODWORD(a4));
  float v7 = *(float *)(a1 + 660);
  if (v7 <= a2) {
    float v7 = a2;
  }
  if (v7 > a4) {
    a4 = v7;
  }
  *(float *)(a1 + 66CASetDebugMessage("", 0) = a4;
  unint64_t v8 = v29;
  *(void *)(a1 + 4CASetDebugMessage("", 0) = v29;
  float v9 = (float)(*((float *)&v6 + 1) + (float)(a3 * -2.0)) + *((float *)&v8 + 1);
  if (v9 != 0.0 && ((float v10 = (float)(*((float *)&v6 + 1) - a3) / v9, v10 > 0.0) ? (v11 = v10 < 1.0) : (v11 = 0), v11))
  {
    float v13 = (float)((float)(1.0 - v10) * *(float *)&v6) + (float)(a2 * v10);
    float v14 = (float)(v10 * a3) + (float)((float)(1.0 - v10) * *((float *)&v6 + 1));
    *(float *)&unsigned int v15 = (float)(a2 * (float)(1.0 - v10)) + (float)(v10 * *(float *)&v8);
    *(float *)&unsigned int v16 = (float)(v10 * *((float *)&v8 + 1)) + (float)((float)(1.0 - v10) * a3);
    float v27 = v13;
    float v28 = v14;
    *(float *)&unint64_t v29 = (float)(v13 * (float)(1.0 - v10)) + (float)(*(float *)&v15 * v10);
    *((float *)&v29 + 1) = (float)(*(float *)&v16 * v10) + (float)(v14 * (float)(1.0 - v10));
    unint64_t v30 = v29;
    unint64_t v31 = __PAIR64__(v16, v15);
    unint64_t v32 = v8;
    uint64_t v12 = 2;
  }
  else
  {
    uint64_t v12 = 1;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 24 * v12;
  do
  {
    BOOL v19 = (char *)&v26 + v17;
    if (*(float *)((char *)&v26 + v17 + 4) != *(float *)((char *)&v29 + v17 + 4))
    {
      v20.i64[0] = *((void *)v19 + 1);
      v20.i32[2] = *((_DWORD *)v19 + 4);
      v20.i32[3] = v20.i32[1];
      v21.i64[0] = *(void *)v19;
      v21.i32[2] = v20.i32[0];
      v21.i32[3] = *(_DWORD *)((char *)&v29 + v17 + 4);
      float32x4_t v24 = vmlaq_f32(vmulq_f32(v21, (float32x4_t)xmmword_184998630), (float32x4_t)xmmword_184998620, v20);
      uint64_t v22 = *((void *)v19 + 2);
      uint64_t v23 = v21.i64[0];
      uint64_t v25 = v22;
      CA::OGL::PathFiller::emit_cube(a1, (float *)&v23, 0);
    }
    v17 += 24;
  }
  while (v18 != v17);
}

void CA::OGL::PathFiller::emit_cube(uint64_t a1, float *a2, unint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  while ((LODWORD(a2[v5]) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(a2[v5 + 1]) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v5 += 2;
    if (v5 == 8)
    {
      float v6 = a2[1];
      float v7 = a2[7];
      if (v6 >= v7) {
        float v8 = a2[7];
      }
      else {
        float v8 = a2[1];
      }
      if (v6 <= v7) {
        float v9 = a2[7];
      }
      else {
        float v9 = a2[1];
      }
      if (v8 <= *(float *)(a1 + 36) && v9 >= *(float *)(a1 + 28))
      {
        uint64_t v10 = 2;
        float v11 = *a2;
        do
        {
          if (v11 >= a2[v10]) {
            float v11 = a2[v10];
          }
          v10 += 2;
        }
        while (v10 != 8);
        if (v11 <= *(float *)(a1 + 32))
        {
          uint64_t v12 = 2;
          float v13 = *a2;
          do
          {
            if (v13 <= a2[v12]) {
              float v13 = a2[v12];
            }
            v12 += 2;
          }
          while (v12 != 8);
          if (v13 <= *(float *)(a1 + 24))
          {
            BOOL v20 = v6 <= v7;
            float v21 = 1.0;
            if (v20) {
              float v21 = -1.0;
            }
            CA::OGL::PathFiller::add_points((float *)a1, v8, v9, v21, 0);
          }
          else
          {
            float v14 = 6.0;
            if (*(unsigned char *)(a1 + 641)) {
              float v14 = 100.0;
            }
            float v15 = a2[5];
            float v16 = a2[4];
            float v17 = sqrtf((float)((float)(a2[6] - v16) * (float)(a2[6] - v16))+ (float)((float)(v7 - v15) * (float)(v7 - v15)));
            float v18 = a2[3];
            if ((float)((float)(sqrtf((float)((float)(v16 - a2[2]) * (float)(v16 - a2[2]))+ (float)((float)(v15 - v18) * (float)(v15 - v18)))+ v17)+ sqrtf((float)((float)(a2[2] - *a2) * (float)(a2[2] - *a2))+ (float)((float)(v18 - v6) * (float)(v18 - v6)))) <= v14)
            {
              if (v9 >= v18) {
                float v22 = a2[3];
              }
              else {
                float v22 = v9;
              }
              if (v8 > v22) {
                float v22 = v8;
              }
              a2[3] = v22;
              if (v9 >= v15) {
                float v23 = v15;
              }
              else {
                float v23 = v9;
              }
              if (v8 > v23) {
                float v23 = v8;
              }
              a2[5] = v23;
              CA::OGL::PathFiller::mark_spans(a1, v11, v8, v13, v9);
              CA::OGL::PathFiller::add_cube((CA::OGL::PathFiller *)a1, a2, v13);
            }
            else
            {
              *(void *)&v59[16] = 0;
              long long v19 = *((_OWORD *)a2 + 1);
              long long v58 = *(_OWORD *)a2;
              *(_OWORD *)int64_t v59 = v19;
              if (a3 < 0x200)
              {
                uint64_t v24 = *(void *)&v59[8];
                float32x2_t v25 = vadd_f32(*(float32x2_t *)((char *)&v58 + 8), *(float32x2_t *)&v58);
                float32x2_t v26 = vmul_f32(v25, (float32x2_t)0x3F0000003F000000);
                float32x2_t v27 = vadd_f32(*(float32x2_t *)v59, *(float32x2_t *)((char *)&v58 + 8));
                float32x2_t v28 = vadd_f32(*(float32x2_t *)&v59[8], *(float32x2_t *)v59);
                float32x2_t v29 = vmul_f32(v28, (float32x2_t)0x3F0000003F000000);
                float32x2_t v30 = vadd_f32(v27, v25);
                __asm { FMOV            V6.2S, #0.25 }
                float32x2_t v36 = vmul_f32(v30, _D6);
                float32x2_t v37 = vadd_f32(v28, v27);
                *(float32x2_t *)&long long v38 = vmul_f32(v37, _D6);
                *(float32x2_t *)&long long v39 = vmul_f32(vadd_f32(v37, v30), (float32x2_t)0x3E0000003E000000);
                *((void *)&v39 + 1) = v39;
                *((float32x2_t *)&v58 + 1) = v26;
                *(float32x2_t *)int64_t v59 = v36;
                *((float32x2_t *)&v38 + 1) = v29;
                *(_OWORD *)&v59[8] = v39;
                long long v60 = v38;
                uint64_t v61 = v24;
                unint64_t v40 = a3 + 1;
                CA::OGL::PathFiller::emit_cube(a1, &v58, a3 + 1);
                CA::OGL::PathFiller::emit_cube(a1, &v59[16], v40);
              }
              else if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                uint64_t v41 = x_log_category_ogl;
                if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 134219776;
                  double v43 = *(float *)&v58;
                  __int16 v44 = 2048;
                  double v45 = *((float *)&v58 + 1);
                  __int16 v46 = 2048;
                  double v47 = *((float *)&v58 + 2);
                  __int16 v48 = 2048;
                  double v49 = *((float *)&v58 + 3);
                  __int16 v50 = 2048;
                  double v51 = *(float *)v59;
                  __int16 v52 = 2048;
                  double v53 = *(float *)&v59[4];
                  __int16 v54 = 2048;
                  double v55 = *(float *)&v59[8];
                  __int16 v56 = 2048;
                  double v57 = *(float *)&v59[12];
                  _os_log_impl(&dword_184668000, v41, OS_LOG_TYPE_DEFAULT, "CoreAnimation: too many subdivisions in cubic curve (%a, %a) (%a, %a) (%a, %a) (%a, %a). Stack will most likely overflow. bail out.", buf, 0x52u);
                }
              }
            }
          }
        }
      }
      return;
    }
  }
}

void CA::OGL::PathFiller::cube_to(uint64_t a1, double a2, float a3, double a4, float a5, float a6, float a7)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  float32x2_t v51 = *(float32x2_t *)(a1 + 40);
  float32x2_t v8 = v51;
  long long v54 = 0u;
  long long v53 = 0u;
  memset(&v52[24], 0, 32);
  *(_DWORD *)__int16 v52 = LODWORD(a2);
  *(float *)&v52[4] = a3;
  *(_DWORD *)&_OWORD v52[8] = LODWORD(a4);
  *(float *)&v52[12] = a5;
  *(float *)&v52[16] = a6;
  *(float *)&v52[20] = a7;
  float v9 = *(float *)(a1 + 660);
  if (v9 <= *(float *)&a2) {
    float v9 = *(float *)&a2;
  }
  if (v9 <= *(float *)&a4) {
    float v9 = *(float *)&a4;
  }
  if (v9 <= a6) {
    float v9 = a6;
  }
  *(float *)(a1 + 66CASetDebugMessage("", 0) = v9;
  *(float *)(a1 + 4CASetDebugMessage("", 0) = a6;
  *(float *)(a1 + 44) = a7;
  float v10 = a7 - (float)(v8.f32[1] + (float)((float)(a5 - a3) * 3.0));
  float v11 = (float)(v8.f32[1] + (float)(a3 * -2.0)) + a5;
  float v12 = a3 - v8.f32[1];
  float v13 = -(float)((float)(v10 * (float)(a3 - v8.f32[1])) - (float)(v11 * v11));
  if (v13 < 0.0) {
    goto LABEL_28;
  }
  if (v10 == 0.0)
  {
    if (v11 != 0.0)
    {
      float v14 = v12 * -0.5;
      float v15 = INFINITY;
      float v16 = v14 / v11;
      goto LABEL_20;
    }
  }
  else if (v11 != 0.0 || v13 != 0.0)
  {
    float v17 = sqrtf(v13);
    if (v11 < 0.0) {
      float v17 = -v17;
    }
    float v18 = -(float)(v17 + v11);
    float v19 = v18 / v10;
    float v15 = v12 / v18;
    if (v19 >= v15) {
      float v16 = v15;
    }
    else {
      float v16 = v19;
    }
    if (v19 > v15) {
      float v15 = v19;
    }
LABEL_20:
    if (v16 > 0.0 && v16 < 1.0)
    {
      float32x2_t v25 = (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2));
      v26.f32[0] = (float)(*(float *)&a2 * (float)(1.0 - v16)) + (float)(*(float *)&a4 * v16);
      float32_t v27 = (float)(v16 * a5) + (float)((float)(1.0 - v16) * a3);
      *((float *)&a4 + 1) = a5;
      float32x2_t v28 = vmla_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), v16), *(float32x2_t *)&a4, 1.0 - v16);
      v26.f32[1] = v27;
      float32x2_t v29 = vmla_n_f32(vmul_n_f32(v26, 1.0 - v16), v28, v16);
      float32x2_t v30 = vmla_n_f32(vmul_n_f32(v25, v16), v8, 1.0 - v16);
      *(float32x2_t *)&long long v31 = vmla_n_f32(vmul_n_f32(v26, v16), v30, 1.0 - v16);
      float32x2_t v32 = vmla_n_f32(vmul_n_f32(v29, v16), *(float32x2_t *)&v31, 1.0 - v16);
      *(float32x2_t *)__int16 v52 = v30;
      *((float32x2_t *)&v31 + 1) = v32;
      *(float32x2_t *)&long long v33 = v32;
      *((float32x2_t *)&v33 + 1) = v29;
      *(_OWORD *)&_OWORD v52[8] = v31;
      *(_OWORD *)&v52[24] = v33;
      *(float32x2_t *)&v52[40] = v28;
      *(float *)&v52[48] = a6;
      *(float *)&v52[52] = a7;
      uint64_t v22 = 2;
      if (v16 == v15) {
        goto LABEL_29;
      }
      if (v15 <= 0.0 || v15 >= 1.0) {
        goto LABEL_29;
      }
      float v35 = (float)(v15 - v16) / (float)(1.0 - v16);
      *(float32x2_t *)&long long v36 = vmla_n_f32(vmul_n_f32(v29, v35), v32, 1.0 - v35);
      float32x2_t v37 = vmla_n_f32(vmul_n_f32(v28, v35), v29, 1.0 - v35);
      float32x2_t v38 = vmla_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), v35), v28, 1.0 - v35);
      float32x2_t v39 = vmla_n_f32(vmul_n_f32(v37, v35), *(float32x2_t *)&v36, 1.0 - v35);
      *(float32x2_t *)v41.i8 = vmla_n_f32(vmul_n_f32(v38, v35), v37, 1.0 - v35);
      float32x2_t v40 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v41.i8, v35), v39, 1.0 - v35);
      *((float32x2_t *)&v36 + 1) = v39;
      *(_OWORD *)&v52[32] = v36;
      *(float32x2_t *)&v52[48] = v40;
      uint64_t v22 = 3;
      v41.u64[1] = (unint64_t)v38;
      uint64_t v42 = 11;
      uint64_t v43 = 10;
      uint64_t v44 = 9;
      uint64_t v45 = 8;
    }
    else
    {
      if (v15 <= 0.0 || v15 >= 1.0) {
        goto LABEL_28;
      }
      *((float *)&a2 + 1) = a3;
      *((float *)&a4 + 1) = a5;
      *(float32x2_t *)&long long v46 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)&a2, v15), v8, 1.0 - v15);
      float32x2_t v47 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)&a4, v15), *(float32x2_t *)&a2, 1.0 - v15);
      float32x2_t v48 = vmla_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), v15), *(float32x2_t *)&a4, 1.0 - v15);
      float32x2_t v49 = vmla_n_f32(vmul_n_f32(v47, v15), *(float32x2_t *)&v46, 1.0 - v15);
      *(float32x2_t *)v41.i8 = vmla_n_f32(vmul_n_f32(v47, 1.0 - v15), v48, v15);
      float32x2_t v40 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v41.i8, v15), v49, 1.0 - v15);
      *((float32x2_t *)&v46 + 1) = v49;
      *(_OWORD *)__int16 v52 = v46;
      *(float32x2_t *)&v52[16] = v40;
      uint64_t v22 = 2;
      v41.u64[1] = (unint64_t)v48;
      uint64_t v42 = 7;
      uint64_t v43 = 6;
      uint64_t v44 = 5;
      uint64_t v45 = 4;
    }
    *(&v51 + v45) = v40;
    *(&v51 + v44) = *(float32x2_t *)v41.i8;
    *((void *)&v51 + v43) = vextq_s8(v41, v41, 8uLL).u64[0];
    __int16 v50 = (float *)(&v51 + v42);
    *__int16 v50 = a6;
    v50[1] = a7;
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v22 = 1;
LABEL_29:
  unint64_t v23 = 0;
  uint64_t v24 = 32 * v22;
  do
  {
    if (*(float *)&v52[v23 + 20] != v51.f32[v23 / 4 + 1]) {
      CA::OGL::PathFiller::emit_cube(a1, (float *)((char *)&v51 + v23), 0);
    }
    v23 += 32;
  }
  while (v24 != v23);
}

uint64_t CA::OGL::PathFiller::finish(CA::OGL::PathFiller *this)
{
  MEMORY[0x1F4188790](this);
  unsigned int v2 = v1;
  v51[1536] = *MEMORY[0x1E4F143B8];
  CA::OGL::PathFiller::close(v1);
  CA::OGL::PathFiller::emit_span_rect_coverage((int *)v2);
  CA::OGL::PathFiller::flush_rect(v2);
  CA::OGL::PathFiller::flush_cube((uint64_t)v2);
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  unint64_t v5 = *(void *)(v4 + 8);
  int v6 = (*(unsigned __int16 *)(*(void *)v2 + 832) >> 12) & 7;
  unint64_t v7 = HIWORD(v5);
  if (v6 != 2)
  {
    if (v6 != 1) {
      goto LABEL_5;
    }
    unint64_t v5 = v5 & 0xFFFFFFFFFFFF0000 | v7;
  }
  unint64_t v5 = v5 & 0xFFFF00000000FFFFLL | (v7 << 16) | (v7 << 32);
LABEL_5:
  uint64_t v8 = *((unsigned int *)v2 + 14);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    __n128 v11 = (__n128)vcvtq_f32_f16((float16x4_t)v5);
    v11.n128_u64[0] = (unint64_t)vcvt_f16_f32((float32x4_t)v11);
    do
    {
      unsigned int v12 = LODWORD(v2[v9 + 82]);
      if (v12)
      {
        uint64_t v13 = *((unsigned int *)v2 + 15);
        if ((v13 & 0x80000000) == 0)
        {
          float v14 = &v2[v9];
          unsigned int v16 = *((_DWORD *)v14 + 16);
          unsigned int v15 = *((_DWORD *)v14 + 17);
          float v17 = v2[49];
          uint64_t v18 = v13 + 1;
          float v19 = v2 + 50;
          float v20 = v17;
          do
          {
            float v21 = *v19;
            if ((v12 & 1) == 0)
            {
              if (v17 != v20)
              {
                uint64_t v22 = &v51[3 * v10++];
                *uint64_t v22 = __PAIR64__(LODWORD(v20), v16);
                v22[1] = __PAIR64__(LODWORD(v17), v15);
                v22[2] = v11.n128_u64[0];
              }
              float v20 = v21;
              if (v12 < 2) {
                break;
              }
            }
            v12 >>= 1;
            ++v19;
            float v17 = v21;
            --v18;
          }
          while (v18);
        }
      }
      ++v9;
    }
    while (v9 != v8);
    if (v10)
    {
      if (*((unsigned char *)v2 + 640)) {
        char v23 = 92;
      }
      else {
        char v23 = 91;
      }
      *(unsigned char *)(v4 + 16) = v23;
      (*(void (**)(void, __n128))(**(void **)v2 + 360))(*(void *)v2, v11);
      uint64_t v3 = *(void *)v2;
    }
  }
  *(unsigned char *)(*(void *)(v3 + 16) + 481) &= ~4u;
  uint64_t v24 = *(void *)(*(void *)v2 + 16);
  short float v25 = *(short float *)(v24 + 14);
  char v26 = *(unsigned char *)(v24 + 481);
  unsigned int v27 = *(unsigned __int8 *)(v24 + 480);
  if (v27 < 2 || (v27 == 3 ? (BOOL v29 = v25 == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))) : (BOOL v29 = 0), v29))
  {
    *(unsigned char *)(v24 + 481) = v26 & 0xFE;
    uint64_t v28 = *(void *)(*(void *)v2 + 16);
  }
  else
  {
    uint64_t v28 = *(void *)(*(void *)v2 + 16);
  }
  uint64_t v30 = *(unsigned __int16 *)(v24 + 12);
  uint64_t v31 = *(unsigned int *)(v24 + 8);
  *(unsigned char *)(v28 + 16) = 0;
  uint64_t v32 = *(void *)v2;
  *(void *)(v32 + 128) = 0;
  *(void *)(v32 + 96) = v32 + 834;
  *(_OWORD *)(v32 + 104) = xmmword_184997E70;
  int v33 = *((_DWORD *)v2 + 14);
  if (v33 >= 1)
  {
    uint64_t v34 = 0;
    unint64_t v35 = (v31 | (v30 << 32)) & 0xFFFFFFFFFFFFLL | ((unint64_t)LOWORD(v25) << 48);
    do
    {
      unsigned int v36 = LODWORD(v2[v34 + 114]);
      if (v36)
      {
        uint64_t v37 = v34 + 1;
        int v38 = *((_DWORD *)v2 + 15);
        if (v38 < 0) {
          goto LABEL_48;
        }
        float v39 = v2[v34 + 16];
        float v40 = v2[v37 + 16];
        float v41 = v2[49];
        uint64_t v42 = 50;
        float v43 = v41;
        while (1)
        {
          float v44 = v2[v42];
          if ((v36 & 1) == 0)
          {
            if (v41 != v43)
            {
              uint64_t v45 = *(void *)v2;
              if (*(_DWORD *)(*(void *)v2 + 92)) {
                uint64_t v46 = 6;
              }
              else {
                uint64_t v46 = 4;
              }
              if ((unint64_t)(*(void *)(v45 + 128) + 4) > *(void *)(v45 + 136)
                || (unint64_t v47 = *(void *)(v45 + 112)) != 0 && *(void *)(v45 + 104) + v46 > v47)
              {
                *(_WORD *)(v45 + 832) |= 0x20u;
                CA::OGL::Context::array_flush(v45);
                *(void *)(v45 + 128) = 0;
                *(void *)(v45 + 96) = v45 + 834;
                *(_OWORD *)(v45 + 104) = xmmword_184997E70;
                uint64_t v45 = *(void *)v2;
              }
              CA::OGL::Context::array_rect((void *)v45, v39, v43, v40, v41);
              uint64_t v48 = *(void *)(*(void *)v2 + 120) + 48 * *(void *)(*(void *)v2 + 128);
              *(void *)(v48 - 16CASetDebugMessage("", 0) = v35;
              *(void *)(v48 - 112) = v35;
              *(void *)(v48 - 64) = v35;
              *(void *)(v48 - 16) = v35;
            }
            if (v36 < 2)
            {
LABEL_46:
              int v33 = *((_DWORD *)v2 + 14);
              goto LABEL_48;
            }
            int v38 = *((_DWORD *)v2 + 15);
            float v43 = v44;
          }
          v36 >>= 1;
          uint64_t v49 = v42 - 50;
          ++v42;
          float v41 = v44;
          if (v49 >= v38) {
            goto LABEL_46;
          }
        }
      }
      uint64_t v37 = v34 + 1;
LABEL_48:
      uint64_t v34 = v37;
    }
    while (v37 < v33);
    uint64_t v32 = *(void *)v2;
  }
  uint64_t result = CA::OGL::Context::array_flush(v32);
  if (v26) {
    *(unsigned char *)(*(void *)(*(void *)v2 + 16) + 481) |= 1u;
  }
  *(unsigned char *)(*(void *)(*(void *)v2 + 16) + 16) = 0;
  return result;
}

void CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathFiller>(CA::OGL::PathFiller *this, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      float32x2_t v43 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(*((void *)this + 1) + 32), *(float64x2_t *)*((void *)this + 1), **(double **)(a2 + 8)), *(float64x2_t *)(*((void *)this + 1) + 16), *(double *)(*(void *)(a2 + 8) + 8)));
      CA::OGL::PathFiller::close((float *)this);
      *((_DWORD *)this + 164) = *((_DWORD *)this + 163);
      *((float32x2_t *)this + 5) = v43;
      *((float32x2_t *)this + 6) = v43;
      *((_DWORD *)this + 165) = v43.i32[0];
      break;
    case 1:
      float32x2_t v3 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(*((void *)this + 1) + 32), *(float64x2_t *)*((void *)this + 1), **(double **)(a2 + 8)), *(float64x2_t *)(*((void *)this + 1) + 16), *(double *)(*(void *)(a2 + 8) + 8)));
      CA::OGL::PathFiller::line_to((float *)this, v3.f32[0], v3.f32[1]);
      break;
    case 2:
      uint64_t v4 = *(double **)(a2 + 8);
      double v5 = *v4;
      double v6 = v4[1];
      double v7 = v4[2];
      double v8 = v4[3];
      uint64_t v9 = (double *)*((void *)this + 1);
      double v10 = v9[1];
      double v11 = v9[4];
      double v12 = v9[5];
      double v13 = v9[2];
      double v14 = v9[3];
      double v15 = v11 + *v9 * v5 + v13 * v6;
      double v16 = v11 + *v9 * v7 + v13 * v8;
      float v18 = v12 + v10 * v5 + v14 * v6;
      float v20 = v12 + v10 * v7 + v14 * v8;
      float v17 = v15;
      float v19 = v16;
      CA::OGL::PathFiller::quad_to((uint64_t)this, v17, v18, v19, v20);
      break;
    case 3:
      float v21 = *(double **)(a2 + 8);
      double v22 = *v21;
      double v23 = v21[1];
      double v24 = v21[2];
      double v25 = v21[3];
      double v26 = v21[4];
      double v27 = v21[5];
      uint64_t v28 = (double *)*((void *)this + 1);
      double v29 = v28[1];
      double v30 = v28[4];
      double v31 = v28[5];
      double v32 = v28[2];
      double v33 = v28[3];
      double v34 = v30 + *v28 * v22 + v32 * v23;
      double v35 = v31 + v29 * v22 + v33 * v23;
      double v36 = v30 + *v28 * v24 + v32 * v25;
      double v37 = v30 + *v28 * v26 + v32 * v27;
      double v38 = v31 + v29 * v26;
      float v39 = v35;
      float v40 = v31 + v29 * v24 + v33 * v25;
      float v42 = v38 + v33 * v27;
      *(float *)&double v38 = v34;
      *(float *)&double v24 = v36;
      float v41 = v37;
      CA::OGL::PathFiller::cube_to((uint64_t)this, v38, v39, v24, v40, v41, v42);
      break;
    case 4:
      CA::OGL::PathFiller::close((float *)this);
      break;
    default:
      return;
  }
}

void CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathFiller>(float32x2_t *this, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      float32x2_t v18 = vcvt_f32_f64(*(float64x2_t *)*(void *)(a2 + 8));
      CA::OGL::PathFiller::close((float *)this);
      this[82].i32[0] = this[81].i32[1];
      this[5] = v18;
      this[6] = v18;
      this[82].i32[1] = v18.i32[0];
      break;
    case 1:
      float32x2_t v3 = *(double **)(a2 + 8);
      float v4 = *v3;
      float v5 = v3[1];
      CA::OGL::PathFiller::line_to((float *)this, v4, v5);
      break;
    case 2:
      double v6 = *(double **)(a2 + 8);
      float v7 = *v6;
      float v8 = v6[1];
      float v9 = v6[2];
      float v10 = v6[3];
      CA::OGL::PathFiller::quad_to((uint64_t)this, v7, v8, v9, v10);
      break;
    case 3:
      double v11 = *(double **)(a2 + 8);
      double v12 = *v11;
      *(float *)&double v12 = *v11;
      float v13 = v11[1];
      double v14 = v11[2];
      *(float *)&double v14 = v14;
      float v15 = v11[3];
      float v16 = v11[4];
      float v17 = v11[5];
      CA::OGL::PathFiller::cube_to((uint64_t)this, v12, v13, v14, v15, v16, v17);
      break;
    case 4:
      CA::OGL::PathFiller::close((float *)this);
      break;
    default:
      return;
  }
}

double CA::OGL::PathStroker::add_line_points(CA::OGL::PathStroker *this, uint64_t a2)
{
  int v4 = *((_DWORD *)this + 39);
  int v5 = *((_DWORD *)this + 18);
  if (2 * v4 + 4 * *((_DWORD *)this + 40) + 2 > v5)
  {
    CA::OGL::PathStroker::flush_points(this);
    int v4 = *((_DWORD *)this + 39);
    int v5 = *((_DWORD *)this + 18);
  }
  int v6 = v4 + 1;
  *((_DWORD *)this + 39) = v6;
  uint64_t v7 = *((void *)this + 7) + 8 * v5 - 16 * v6;
  *(void *)uint64_t v7 = *(void *)a2;
  double result = *(double *)(a2 + 8);
  *(double *)(v7 + 8) = result;
  return result;
}

uint64_t CA::OGL::PathStroker::flush_points(CA::OGL::PathStroker *this)
{
  *((float *)this + 32) = (float)*((int *)this + 40);
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *))(**(void **)this + 1000))(*(void *)this, 0, 4, 1, (char *)this + 116);
  uint64_t v3 = *((int *)this + 40);
  if (v3)
  {
    uint64_t v4 = 4 * v3;
    uint64_t v5 = *((int *)this + 39);
    int v6 = 2 * v5 + v4;
    uint64_t v7 = *((void *)this + 7);
    int v8 = *((_DWORD *)this + 18);
    if (v5) {
      BOOL v9 = v6 < v8;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (2 * (int)v5 <= (int)v4)
      {
        memcpy((void *)(v7 + 8 * v4), (const void *)(v7 + 8 * v8 - 16 * v5), 16 * v5);
      }
      else
      {
        memcpy((void *)(v7 + 8 * v8 - 8 * v6), *((const void **)this + 7), 8 * (int)v4);
        uint64_t v7 = *((void *)this + 7) + 8 * *((int *)this + 18) - 8 * v6;
      }
    }
  }
  else
  {
    uint64_t v10 = *((int *)this + 39);
    if (!v10) {
      return result;
    }
    uint64_t v7 = *((void *)this + 7) + 8 * *((int *)this + 18) - 16 * v10;
  }
  *(unsigned char *)(*(void *)(*(void *)this + 16) + 16) = 87;
  uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)this + 344))(*(void *)this, *((unsigned int *)this + 40), *((unsigned int *)this + 39), v7);
  *(unsigned char *)(*(void *)(*(void *)this + 16) + 481) |= 4u;
  *(void *)((char *)this + 156) = 0;
  return result;
}

_DWORD *CA::OGL::PathStroker::add_join(_DWORD *this)
{
  if (*((unsigned char *)this + 115))
  {
    if ((float)(fabsf(*((float *)this + 36) + *((float *)this + 34))
               + fabsf(*((float *)this + 35) + *((float *)this + 33))) >= 0.00002)
    {
      float v1 = *((float *)this + 22);
      uint64_t v2 = *((void *)this + 5);
      if ((float)(*(float *)&v2 + v1) >= *((float *)this + 6)
        && (float)(*((float *)&v2 + 1) + v1) >= *((float *)this + 7)
        && (float)(*(float *)&v2 - v1) <= *((float *)this + 8)
        && (float)(*((float *)&v2 + 1) - v1) <= *((float *)this + 9))
      {
        uint64_t v3 = *((void *)this + 8);
        if (*((unsigned char *)this + 112))
        {
          int v4 = this[42];
          uint64_t v5 = (void *)(v3 + 24 * v4);
          this[42] = v4 + 1;
        }
        else
        {
          uint64_t v6 = (int)this[41];
          uint64_t v5 = (void *)(v3 + 24 * (int)this[19] - 24 * v6 - 24);
          this[41] = v6 + 1;
        }
        *uint64_t v5 = v2;
        v5[1] = *(void *)(this + 33);
        void v5[2] = *(void *)(this + 35);
        if (this[42] + this[41] >= this[19]) {
          return CA::OGL::PathStroker::flush_joins(this);
        }
      }
    }
  }
  return this;
}

_DWORD *CA::OGL::PathStroker::flush_joins(_DWORD *this)
{
  float v1 = this;
  if (this[42])
  {
    *(unsigned char *)(*(void *)(*(void *)this + 16) + 16) = 89;
    this = (_DWORD *)(*(uint64_t (**)(void))(**(void **)this + 352))();
    *(unsigned char *)(*(void *)(*(void *)v1 + 16) + 481) |= 4u;
    v1[42] = 0;
  }
  if (v1[41])
  {
    *(unsigned char *)(*(void *)(*(void *)v1 + 16) + 16) = 88;
    this = (_DWORD *)(*(uint64_t (**)(void))(**(void **)v1 + 352))(*(void *)v1);
    *(unsigned char *)(*(void *)(*(void *)v1 + 16) + 481) |= 4u;
    v1[41] = 0;
  }
  return this;
}

void CA::OGL::PathStroker::move_to(CA::OGL::PathStroker *this, double a2, float a3)
{
  int v4 = LODWORD(a2);
  _OWORD v27[4] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 115))
  {
    if (*((unsigned char *)this + 114) == 1)
    {
      int v6 = *((_DWORD *)this + 42);
      if (*((_DWORD *)this + 41) + v6 + 2 >= *((_DWORD *)this + 19))
      {
        CA::OGL::PathStroker::flush_joins(this);
        int v6 = *((_DWORD *)this + 42);
      }
      uint64_t v7 = *((void *)this + 5);
      uint64_t v8 = *(void *)((char *)this + 132);
      uint64_t v9 = *((void *)this + 8);
      *((_DWORD *)this + 42) = v6 + 1;
      uint64_t v10 = (void *)(v9 + 24 * v6);
      void *v10 = v7;
      v10[1] = v8;
      void v10[2] = v8;
      uint64_t v11 = *((void *)this + 6);
      float32x2_t v12 = vneg_f32(*(float32x2_t *)((char *)this + 148));
      uint64_t v13 = *((void *)this + 8);
      LODWORD(v9) = *((_DWORD *)this + 42);
      *((_DWORD *)this + 42) = v9 + 1;
      double v14 = (void *)(v13 + 24 * (int)v9);
      *double v14 = v11;
      v14[1] = v12;
      v14[2] = v12;
    }
    else
    {
      LODWORD(a2) = *((_DWORD *)this + 20);
      if (*(float *)&a2 > 0.0)
      {
        uint64_t v15 = 0;
        float32x2_t v16 = *(float32x2_t *)((char *)this + 40);
        float32x2_t v17 = vmls_lane_f32(*(float32x2_t *)((char *)this + 48), *(float32x2_t *)((char *)this + 148), *(float32x2_t *)&a2, 0);
        v27[0] = *((void *)this + 6);
        v27[2] = v16;
        float32x2_t v18 = vmla_n_f32(v16, *(float32x2_t *)((char *)this + 132), *(float *)&a2);
        v27[1] = v17;
        v27[3] = v18;
        char v19 = 1;
        float32x2_t v20 = (float32x2_t)vdup_n_s32(0x7F800000u);
        do
        {
          char v21 = v19;
          double v22 = (float32x2_t *)&v27[2 * v15];
          float32x2_t v23 = v22[1];
          float32x2_t v24 = vminnm_f32(*v22, v23);
          float32x2_t v25 = vmaxnm_f32(*v22, v23);
          uint32x2_t v26 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v24), v20), vorr_s8((int8x8_t)vcgt_f32(v25, v24), (int8x8_t)vcge_f32(v24, v25))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v25), v20), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v25))), (int8x8_t)vcgt_f32(v24, *(float32x2_t *)((char *)this + 104)));
          if ((vpmax_u32(v26, v26).u32[0] & 0x80000000) == 0) {
            CA::OGL::PathStroker::add_line_points(this, (uint64_t)v22);
          }
          char v19 = 0;
          uint64_t v15 = 1;
        }
        while ((v21 & 1) != 0);
      }
    }
    *((unsigned char *)this + 115) = 0;
  }
  *((_DWORD *)this + 12) = v4;
  *((float *)this + 13) = a3;
  *((_DWORD *)this + 1CASetDebugMessage("", 0) = v4;
  *((float *)this + 11) = a3;
}

void CA::OGL::PathStroker::line_to(CA::OGL::PathStroker *this, float a2, float a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  float v6 = *((float *)this + 10) - a2;
  float v7 = *((float *)this + 11) - a3;
  float v8 = (float)(v6 * v6) + (float)(v7 * v7);
  if (v8 >= 0.000001)
  {
    float v9 = 1.0 / sqrtf(v8);
    *((float *)this + 35) = v9 * v6;
    *((float *)this + 36) = v9 * v7;
    CA::OGL::PathStroker::add_join(this);
    float32x2_t v10 = *(float32x2_t *)((char *)this + 40);
    float32x2_t v16 = v10;
    float32x2_t v17 = (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2));
    if (!*((unsigned char *)this + 115))
    {
      *((unsigned char *)this + 115) = 1;
      float v11 = 1.0
          / sqrtf((float)((float)(a2 - v10.f32[0]) * (float)(a2 - v10.f32[0]))+ (float)((float)(a3 - v10.f32[1]) * (float)(a3 - v10.f32[1])));
      *((float *)this + 37) = v11 * (float)(a2 - v10.f32[0]);
      *((float *)this + 38) = v11 * (float)(a3 - v10.f32[1]);
    }
    float32x2_t v12 = vminnm_f32(v10, v17);
    float32x2_t v13 = vmaxnm_f32(v10, v17);
    float32x2_t v14 = (float32x2_t)vdup_n_s32(0x7F800000u);
    uint32x2_t v15 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v12), v14), vorr_s8((int8x8_t)vcgt_f32(v13, v12), (int8x8_t)vcge_f32(v12, v13))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v13), v14), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v13))), (int8x8_t)vcgt_f32(v12, *(float32x2_t *)((char *)this + 104)));
    if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0) {
      CA::OGL::PathStroker::add_line_points(this, (uint64_t)&v16);
    }
    *(float32x2_t *)((char *)this + 132) = vneg_f32(*(float32x2_t *)((char *)this + 140));
    *((float *)this + 1CASetDebugMessage("", 0) = a2;
    *((float *)this + 11) = a3;
  }
  else if (*((unsigned char *)this + 113) && *((unsigned char *)this + 114))
  {
    CA::OGL::PathStroker::line_to_axis_aligned(this, a2, a3);
  }
}

void CA::OGL::PathStroker::line_to_axis_aligned(CA::OGL::PathStroker *this, float a2, float a3)
{
  _DWORD v11[2] = *(float32x2_t *)MEMORY[0x1E4F143B8];
  float32x2_t v6 = (float32x2_t)0x3F80000000000000;
  *(void *)((char *)this + 14CASetDebugMessage("", 0) = 0x3F80000000000000;
  if (!*((unsigned char *)this + 115))
  {
    *((unsigned char *)this + 115) = 1;
    *(void *)((char *)this + 148) = 0xBF80000000000000;
  }
  v11[0] = *(float32x2_t *)((char *)this + 40);
  v11[1] = (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2));
  float32x2_t v7 = vminnm_f32(v11[0], (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2)));
  float32x2_t v8 = vmaxnm_f32(v11[0], (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2)));
  float32x2_t v9 = (float32x2_t)vdup_n_s32(0x7F800000u);
  uint32x2_t v10 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v7), v9), vorr_s8((int8x8_t)vcgt_f32(v8, v7), (int8x8_t)vcge_f32(v7, v8))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v8), v9), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v8))), (int8x8_t)vcgt_f32(v7, *(float32x2_t *)((char *)this + 104)));
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    CA::OGL::PathStroker::add_line_points(this, (uint64_t)v11);
    float32x2_t v6 = *(float32x2_t *)((char *)this + 140);
  }
  *(float32x2_t *)((char *)this + 132) = vneg_f32(v6);
  *((float *)this + 1CASetDebugMessage("", 0) = a2;
  *((float *)this + 11) = a3;
}

void CA::OGL::PathStroker::quad_to(CA::OGL::PathStroker *this, float a2, float a3, float a4, float a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  float v10 = *((float *)this + 10);
  float v11 = *((float *)this + 11);
  float v12 = v10 - a2;
  float v13 = v11 - a3;
  float v14 = (float)(v12 * v12) + (float)(v13 * v13);
  if (v14 >= 0.000001)
  {
    float v16 = sqrtf(v14);
  }
  else
  {
    float v12 = v10 - a4;
    float v13 = v11 - a5;
    float v15 = (float)(v12 * v12) + (float)(v13 * v13);
    if (v15 < 0.000001)
    {
      if (*((unsigned char *)this + 113) && *((unsigned char *)this + 114))
      {
        CA::OGL::PathStroker::line_to_axis_aligned(this, a4, a5);
      }
      return;
    }
    float v16 = sqrtf(v15);
  }
  float v17 = 1.0 / v16;
  *((float *)this + 35) = v17 * v12;
  *((float *)this + 36) = v17 * v13;
  CA::OGL::PathStroker::add_join(this);
  float32x2_t v18 = *(float32x2_t *)((char *)this + 40);
  float32x2_t v35 = v18;
  v36.i64[0] = __PAIR64__(LODWORD(a3), LODWORD(a2));
  v36.i64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  if (!*((unsigned char *)this + 115))
  {
    char v19 = 0;
    float32x2_t v20 = *(float32x2_t *)((char *)this + 48);
    uint64_t v21 = 1;
    while (1)
    {
      unsigned int v22 = v21;
      if (v20.f32[0] != v35.f32[2 * v21]) {
        break;
      }
      float v23 = v35.f32[2 * v21 + 1];
      unsigned __int8 v24 = v19 ^ 1;
      char v19 = 1;
      uint64_t v21 = 2;
      if (((v20.f32[1] == v23) & v24) == 0)
      {
        if (v20.f32[1] == v23) {
          unsigned int v22 = 3;
        }
        break;
      }
    }
    *((unsigned char *)this + 115) = 1;
    float32x2_t v25 = vsub_f32(*(&v35 + v22), v20);
    *(float32x2_t *)((char *)this + 148) = vmul_n_f32(v25, 1.0 / sqrtf(vaddv_f32(vmul_f32(v25, v25))));
  }
  if ((float)((float)((float)(v18.f32[0] - a2) * (float)(v18.f32[0] - a2))
             + (float)((float)(v18.f32[1] - a3) * (float)(v18.f32[1] - a3))) >= 0.000001
    && (float)((float)((float)(a2 - a4) * (float)(a2 - a4)) + (float)((float)(a3 - a5) * (float)(a3 - a5))) >= 0.000001)
  {
    *(float32x2_t *)v30.f32 = v18;
    v30.i64[1] = v36.i64[0];
    float32x2_t v37 = v18;
    float32x4_t v38 = vmlaq_f32(vmulq_f32(v30, (float32x4_t)xmmword_184998640), (float32x4_t)xmmword_184998650, v36);
    uint64_t v39 = v36.i64[1];
    CA::OGL::PathStroker::emit_cube((float32x2_t *)this, &v37, 0, INFINITY);
  }
  else
  {
    float32x2_t v37 = v18;
    v38.i64[0] = v36.i64[1];
    float32x2_t v26 = vminnm_f32(v18, *(float32x2_t *)&v36.u32[2]);
    float32x2_t v27 = vmaxnm_f32(v18, *(float32x2_t *)&v36.u32[2]);
    float32x2_t v28 = (float32x2_t)vdup_n_s32(0x7F800000u);
    uint32x2_t v29 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v26), v28), vorr_s8((int8x8_t)vcgt_f32(v27, v26), (int8x8_t)vcge_f32(v26, v27))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v27), v28), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v27))), (int8x8_t)vcgt_f32(v26, *(float32x2_t *)((char *)this + 104)));
    if ((vpmax_u32(v29, v29).u32[0] & 0x80000000) == 0) {
      CA::OGL::PathStroker::add_line_points(this, (uint64_t)&v37);
    }
  }
  float v31 = a4 - a2;
  float v32 = a5 - a3;
  float v33 = (float)(v31 * v31) + (float)(v32 * v32);
  if (v33 < 0.000001)
  {
    float v31 = a4 - *((float *)this + 10);
    float v32 = a5 - *((float *)this + 11);
    float v33 = (float)(v31 * v31) + (float)(v32 * v32);
  }
  float v34 = 1.0 / sqrtf(v33);
  *((float *)this + 33) = v34 * v31;
  *((float *)this + 34) = v34 * v32;
  *((float *)this + 1CASetDebugMessage("", 0) = a4;
  *((float *)this + 11) = a5;
}

void CA::OGL::PathStroker::emit_cube(float32x2_t *a1, float32x2_t *a2, unint64_t a3, float a4)
{
  v69[7] = *MEMORY[0x1E4F143B8];
  float32x2_t v7 = *a2;
  uint64_t v8 = 1;
  float32x2_t v9 = *a2;
  float32x2_t v10 = *a2;
  do
  {
    float32x2_t v11 = a2[v8];
    float32x2_t v9 = vminnm_f32(v9, v11);
    float32x2_t v10 = vmaxnm_f32(v10, v11);
    ++v8;
  }
  while (v8 != 4);
  float32x2_t v12 = (float32x2_t)vdup_n_s32(0x7F800000u);
  uint32x2_t v13 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v9), v12), vorr_s8((int8x8_t)vcgt_f32(v10, v9), (int8x8_t)vcge_f32(v9, v10))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v10), v12), (int8x8_t)vcgt_f32(a1[12], v10))), (int8x8_t)vcgt_f32(v9, a1[13]));
  if ((vpmax_u32(v13, v13).u32[0] & 0x80000000) == 0)
  {
    float v14 = a2[2].f32[0];
    float v15 = a2[2].f32[1];
    float v16 = a2[3].f32[0];
    float v17 = a2[3].f32[1];
    float32x2_t v18 = a2[1];
    float v19 = (float)(vaddv_f32(vabd_f32(v18, v7)) + vabds_f32(v16, v14))
        + (float)((float)(vabds_f32(v14, v18.f32[0]) + vabds_f32(v15, v18.f32[1])) + vabds_f32(v17, v15));
    if (v19 >= 15000.0 && v19 < a4)
    {
      long long v32 = *(_OWORD *)a2[2].f32;
      long long v68 = *(_OWORD *)a2->f32;
      *(_OWORD *)uint64_t v69 = v32;
      if (a3 >= 0x80)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v48 = x_log_category_ogl;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134219776;
            double v53 = *(float *)&v68;
            __int16 v54 = 2048;
            double v55 = *((float *)&v68 + 1);
            __int16 v56 = 2048;
            double v57 = *((float *)&v68 + 2);
            __int16 v58 = 2048;
            double v59 = *((float *)&v68 + 3);
            __int16 v60 = 2048;
            double v61 = *(float *)v69;
            __int16 v62 = 2048;
            double v63 = *((float *)v69 + 1);
            __int16 v64 = 2048;
            double v65 = *(float *)&v69[1];
            __int16 v66 = 2048;
            double v67 = *((float *)&v69[1] + 1);
            _os_log_impl(&dword_184668000, v48, OS_LOG_TYPE_DEFAULT, "CoreAnimation: too many subdivisions in cubic curve (%a, %a) (%a, %a) (%a, %a) (%a, %a). Stack will most likely overflow. bail out.", buf, 0x52u);
          }
        }
      }
      else
      {
        uint64_t v33 = v69[1];
        float32x2_t v34 = vmul_f32(*(float32x2_t *)((char *)&v68 + 8), (float32x2_t)0x3F0000003F000000);
        float32x2_t v35 = vmul_f32((float32x2_t)v69[0], (float32x2_t)0x3F0000003F000000);
        float32x2_t v36 = vadd_f32(v35, v34);
        float32x2_t v37 = vmla_f32(v34, (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v68);
        float32x2_t v38 = vmla_f32(v35, (float32x2_t)0x3F0000003F000000, (float32x2_t)v69[1]);
        float32x2_t v39 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
        float32x2_t v40 = vmla_f32(v39, (float32x2_t)0x3F0000003F000000, v37);
        float32x2_t v41 = vmla_f32(v39, (float32x2_t)0x3F0000003F000000, v38);
        float32x2_t v42 = vmul_f32(vadd_f32(v41, v40), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)&long long v43 = v42;
        *((float32x2_t *)&v43 + 1) = v42;
        *((float32x2_t *)&v68 + 1) = v37;
        v69[0] = v40;
        *(_OWORD *)&v69[1] = v43;
        float32x2_t v49 = v38;
        float32x2_t v50 = v41;
        *(float32x2_t *)&long long v43 = v41;
        *((float32x2_t *)&v43 + 1) = v38;
        *(_OWORD *)&v69[3] = v43;
        v69[5] = v33;
        int8x8_t v44 = vmvn_s8((int8x8_t)vceq_f32(v37, v18));
        if (((v44.i32[0] | v44.i32[1]) & 1) != 0
          || (v40.f32[0] == v14 ? (_ZF = v40.f32[1] == v15) : (_ZF = 0),
              _ZF ? (BOOL v46 = v42.f32[0] == v16) : (BOOL v46 = 0),
              v46 ? (BOOL v47 = v42.f32[1] == v17) : (BOOL v47 = 0),
              !v47))
        {
          float32x2_t v51 = v42;
          CA::OGL::PathStroker::emit_cube(a1, &v68, a3 + 1, v19);
          float32x2_t v42 = v51;
          v7.i32[0] = a2->i32[0];
        }
        if (v42.f32[0] != v7.f32[0]
          || v42.f32[1] != a2->f32[1]
          || v50.f32[0] != a2[1].f32[0]
          || v50.f32[1] != a2[1].f32[1]
          || v49.f32[0] != a2[2].f32[0]
          || v49.f32[1] != a2[2].f32[1])
        {
          CA::OGL::PathStroker::emit_cube(a1, &v69[2], a3 + 1, v19);
        }
      }
    }
    else
    {
      __int32 v21 = a1[20].i32[0];
      int v22 = 4 * v21;
      if (4 * v21 + 2 * a1[19].i32[1] + 4 > a1[9].i32[0])
      {
        CA::OGL::PathStroker::flush_points((CA::OGL::PathStroker *)a1);
        __int32 v21 = a1[20].i32[0];
        int v22 = 4 * v21;
      }
      uint64_t v23 = *(void *)&a1[7] + 8 * v22;
      a1[20].i32[0] = v21 + 1;
      long long v24 = *(_OWORD *)a2[2].f32;
      *(_OWORD *)uint64_t v23 = *(_OWORD *)a2->f32;
      *(_OWORD *)(v23 + 16) = v24;
      *(void *)&long long v24 = *(void *)v23;
      float32x2_t v25 = *(float32x2_t *)(v23 + 8);
      float32x2_t v26 = *(float32x2_t *)(v23 + 16);
      __asm { FMOV            V5.2S, #3.0 }
      float32x2_t v30 = vmla_f32(vsub_f32(*(float32x2_t *)(v23 + 24), *(float32x2_t *)v23), _D5, vsub_f32(v25, v26));
      float32x2_t v31 = vmul_f32(vadd_f32(vsub_f32(*(float32x2_t *)v23, vadd_f32(v25, v25)), v26), _D5);
      *(float32x2_t *)uint64_t v23 = v30;
      *(float32x2_t *)(v23 + 8) = v31;
      *(float32x2_t *)(v23 + 16) = vmul_f32(vsub_f32(v25, *(float32x2_t *)&v24), _D5);
      *(void *)(v23 + 24) = v24;
    }
  }
}

void CA::OGL::PathStroker::cube_to(CA::OGL::PathStroker *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  float v14 = *((float *)this + 10);
  float v15 = *((float *)this + 11);
  float v16 = v14 - a2;
  float v17 = v15 - a3;
  float v18 = (float)(v16 * v16) + (float)(v17 * v17);
  if (v18 >= 0.000001
    || (v16 = v14 - a4, float v17 = v15 - a5, v18 = (float)(v16 * v16) + (float)(v17 * v17), v18 >= 0.000001))
  {
    float v22 = 1.0 / sqrtf(v18);
    float v23 = v22 * v16;
    float v24 = v22 * v17;
    goto LABEL_10;
  }
  float v19 = v14 - a6;
  float v20 = v15 - a7;
  float v21 = (float)(v19 * v19) + (float)(v20 * v20);
  if (v21 >= 0.000001)
  {
    float v41 = 1.0 / sqrtf(v21);
    float v23 = v41 * v19;
    float v24 = v41 * v20;
LABEL_10:
    *((float *)this + 35) = v23;
    *((float *)this + 36) = v24;
    CA::OGL::PathStroker::add_join(this);
    float32x2_t v25 = *(float32x2_t *)((char *)this + 40);
    float32x2_t v43 = v25;
    float v44 = a2;
    *(float *)uint64_t v45 = a3;
    *(float *)&v45[1] = a4;
    *(float *)&void v45[2] = a5;
    float32x2_t v46 = (float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6));
    if (!*((unsigned char *)this + 115))
    {
      float32x2_t v26 = *(float32x2_t *)((char *)this + 48);
      float32x2_t v27 = (float *)v45;
      for (uint64_t i = 1; i != 4; ++i)
      {
        if (v26.f32[0] != *(v27 - 1)) {
          break;
        }
        if (COERCE_FLOAT(HIDWORD(*((void *)this + 6))) != *v27) {
          break;
        }
        v27 += 2;
      }
      *((unsigned char *)this + 115) = 1;
      float32x2_t v29 = vsub_f32(*(&v43 + i), v26);
      *(float32x2_t *)((char *)this + 148) = vmul_n_f32(v29, 1.0 / sqrtf(vaddv_f32(vmul_f32(v29, v29))));
    }
    float v30 = (float)((float)(v25.f32[0] - a2) * (float)(v25.f32[0] - a2))
        + (float)((float)(v25.f32[1] - a3) * (float)(v25.f32[1] - a3));
    float v31 = (float)((float)(a4 - a6) * (float)(a4 - a6)) + (float)((float)(a5 - a7) * (float)(a5 - a7));
    if (v30 < 0.000001 && v31 < 0.000001) {
      goto LABEL_22;
    }
    BOOL v32 = v30 >= 0.000001;
    if (v31 < 0.000001) {
      BOOL v32 = 0;
    }
    if ((float)((float)((float)(a2 - a4) * (float)(a2 - a4)) + (float)((float)(a3 - a5) * (float)(a3 - a5))) >= 0.000001
      || v32)
    {
      CA::OGL::PathStroker::emit_cube((float32x2_t *)this, &v43, 0, INFINITY);
    }
    else
    {
LABEL_22:
      v42[0] = v25;
      v42[1] = v46;
      float32x2_t v33 = vminnm_f32(v25, v46);
      float32x2_t v34 = vmaxnm_f32(v25, v46);
      float32x2_t v35 = (float32x2_t)vdup_n_s32(0x7F800000u);
      uint32x2_t v36 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v33), v35), vorr_s8((int8x8_t)vcgt_f32(v34, v33), (int8x8_t)vcge_f32(v33, v34))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v34), v35), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v34))), (int8x8_t)vcgt_f32(v33, *(float32x2_t *)((char *)this + 104)));
      if ((vpmax_u32(v36, v36).u32[0] & 0x80000000) == 0) {
        CA::OGL::PathStroker::add_line_points(this, (uint64_t)v42);
      }
    }
    if (v31 < 0.000001)
    {
      float v37 = a6 - a2;
      float v38 = a7 - a3;
      float v39 = (float)(v37 * v37) + (float)(v38 * v38);
      if (v39 >= 0.000001)
      {
LABEL_30:
        float v40 = 1.0 / sqrtf(v39);
        *((float *)this + 33) = v40 * v37;
        *((float *)this + 34) = v40 * v38;
        *((float *)this + 1CASetDebugMessage("", 0) = a6;
        *((float *)this + 11) = a7;
        return;
      }
      float v37 = a6 - *((float *)this + 10);
      float v38 = a7 - *((float *)this + 11);
    }
    else
    {
      float v37 = a6 - a4;
      float v38 = a7 - a5;
    }
    float v39 = (float)(v37 * v37) + (float)(v38 * v38);
    goto LABEL_30;
  }
  if (*((unsigned char *)this + 113) && *((unsigned char *)this + 114))
  {
    CA::OGL::PathStroker::line_to_axis_aligned(this, a6, a7);
  }
}

_DWORD *CA::OGL::PathStroker::close(CA::OGL::PathStroker *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  float32x2_t v2 = vsub_f32(*(float32x2_t *)((char *)this + 40), *(float32x2_t *)((char *)this + 48));
  float v3 = vaddv_f32(vmul_f32(v2, v2));
  if (v3 >= 0.000001)
  {
    *(float32x2_t *)((char *)this + 14CASetDebugMessage("", 0) = vmul_n_f32(v2, 1.0 / sqrtf(v3));
    CA::OGL::PathStroker::add_join(this);
    float32x2_t v4 = *(float32x2_t *)((char *)this + 48);
    *(_OWORD *)v10[0].f32 = *(_OWORD *)((char *)this + 40);
    float32x2_t v5 = vminnm_f32(v10[0], v4);
    float32x2_t v6 = vmaxnm_f32(v10[0], v4);
    float32x2_t v7 = (float32x2_t)vdup_n_s32(0x7F800000u);
    uint32x2_t v8 = (uint32x2_t)vorr_s8(vorr_s8(vorn_s8((int8x8_t)vceq_f32(vabs_f32(v5), v7), vorr_s8((int8x8_t)vcgt_f32(v6, v5), (int8x8_t)vcge_f32(v5, v6))), vorr_s8((int8x8_t)vceq_f32(vabs_f32(v6), v7), (int8x8_t)vcgt_f32(*(float32x2_t *)((char *)this + 96), v6))), (int8x8_t)vcgt_f32(v5, *(float32x2_t *)((char *)this + 104)));
    if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) == 0)
    {
      CA::OGL::PathStroker::add_line_points(this, (uint64_t)v10);
      float32x2_t v4 = *(float32x2_t *)((char *)this + 48);
    }
    *(float32x2_t *)((char *)this + 132) = vneg_f32(*(float32x2_t *)((char *)this + 140));
  }
  else
  {
    float32x2_t v4 = *(float32x2_t *)((char *)this + 48);
  }
  *(float32x2_t *)((char *)this + 14CASetDebugMessage("", 0) = vneg_f32(*(float32x2_t *)((char *)this + 148));
  *((float32x2_t *)this + 5) = v4;
  uint64_t result = CA::OGL::PathStroker::add_join(this);
  *((unsigned char *)this + 115) = 0;
  return result;
}

uint64_t CA::OGL::PathStroker::finish(CA::OGL::PathStroker *this, double a2)
{
  float32x2_t v10[3] = *MEMORY[0x1E4F143B8];
  LODWORD(a2) = 2139095040;
  CA::OGL::PathStroker::move_to(this, a2, INFINITY);
  CA::OGL::PathStroker::flush_points(this);
  CA::OGL::PathStroker::flush_joins(this);
  uint64_t v4 = *(void *)(*(void *)this + 16);
  unint64_t v5 = *(void *)(v4 + 8);
  int v6 = (*(unsigned __int16 *)(*(void *)this + 832) >> 12) & 7;
  unint64_t v7 = HIWORD(v5);
  if (v6 == 2) {
    goto LABEL_4;
  }
  if (v6 == 1)
  {
    unint64_t v5 = v5 & 0xFFFFFFFFFFFF0000 | v7;
LABEL_4:
    unint64_t v5 = v5 & 0xFFFF00000000FFFFLL | (v7 << 16) | (v7 << 32);
  }
  uint64_t v8 = *((void *)this + 4);
  v10[0] = *((void *)this + 3);
  v10[1] = v8;
  void v10[2] = vcvt_f16_f32(vcvtq_f32_f16((float16x4_t)v5));
  *(unsigned char *)(v4 + 16) = 91;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)this + 360))(*(void *)this, 1, v10, v3);
  *(unsigned char *)(*(void *)(*(void *)this + 16) + 481) &= ~4u;
  *(unsigned char *)(*(void *)(*(void *)this + 16) + 16) = 0;
  return result;
}

void CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>(float64x2_t **a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      double v2 = COERCE_DOUBLE(vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(a1[1][2], *a1[1], **(double **)(a2 + 8)), a1[1][1], *(double *)(*(void *)(a2 + 8) + 8))));
      CA::OGL::PathStroker::move_to((CA::OGL::PathStroker *)a1, v2, *((float *)&v2 + 1));
      break;
    case 1:
      float32x2_t v3 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(a1[1][2], *a1[1], **(double **)(a2 + 8)), a1[1][1], *(double *)(*(void *)(a2 + 8) + 8)));
      CA::OGL::PathStroker::line_to((CA::OGL::PathStroker *)a1, v3.f32[0], v3.f32[1]);
      break;
    case 2:
      uint64_t v4 = *(double **)(a2 + 8);
      double v5 = *v4;
      double v6 = v4[1];
      double v7 = v4[2];
      double v8 = v4[3];
      float32x2_t v9 = (double *)a1[1];
      double v10 = v9[1];
      double v11 = v9[4];
      double v12 = v9[5];
      double v13 = v9[2];
      double v14 = v9[3];
      double v15 = v11 + *v9 * v5 + v13 * v6;
      double v16 = v12 + v10 * v5 + v14 * v6;
      double v17 = v11 + *v9 * v7 + v13 * v8;
      double v18 = v12 + v10 * v7 + v14 * v8;
      *(float *)&double v5 = v15;
      *(float *)&double v16 = v16;
      *(float *)&double v7 = v17;
      *(float *)&double v18 = v18;
      CA::OGL::PathStroker::quad_to((CA::OGL::PathStroker *)a1, *(float *)&v5, *(float *)&v16, *(float *)&v7, *(float *)&v18);
      break;
    case 3:
      float v19 = *(double **)(a2 + 8);
      double v20 = *v19;
      double v21 = v19[1];
      double v22 = v19[2];
      double v23 = v19[3];
      double v24 = v19[4];
      double v25 = v19[5];
      float32x2_t v26 = (double *)a1[1];
      double v27 = v26[1];
      double v28 = v26[4];
      double v29 = v26[5];
      double v30 = v26[2];
      double v31 = v26[3];
      double v32 = v28 + *v26 * v20 + v30 * v21;
      double v33 = v29 + v27 * v20 + v31 * v21;
      double v34 = v28 + *v26 * v22 + v30 * v23;
      double v35 = v29 + v27 * v22 + v31 * v23;
      double v36 = v28 + *v26 * v24 + v30 * v25;
      double v37 = v29 + v27 * v24 + v31 * v25;
      *(float *)&double v20 = v32;
      *(float *)&double v33 = v33;
      *(float *)&double v22 = v34;
      *(float *)&double v35 = v35;
      *(float *)&double v24 = v36;
      *(float *)&double v37 = v37;
      CA::OGL::PathStroker::cube_to((CA::OGL::PathStroker *)a1, *(float *)&v20, *(float *)&v33, *(float *)&v22, *(float *)&v35, *(float *)&v24, *(float *)&v37);
      break;
    case 4:
      CA::OGL::PathStroker::close((CA::OGL::PathStroker *)a1);
      break;
    default:
      return;
  }
}

void CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathStroker>(CA::OGL::PathStroker *a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      double v2 = *(double **)(a2 + 8);
      double v3 = *v2;
      *(float *)&double v3 = *v2;
      float v4 = v2[1];
      CA::OGL::PathStroker::move_to(a1, v3, v4);
      break;
    case 1:
      double v5 = *(double **)(a2 + 8);
      float v6 = *v5;
      float v7 = v5[1];
      CA::OGL::PathStroker::line_to(a1, v6, v7);
      break;
    case 2:
      double v8 = *(double **)(a2 + 8);
      float v9 = *v8;
      float v10 = v8[1];
      float v11 = v8[2];
      float v12 = v8[3];
      CA::OGL::PathStroker::quad_to(a1, v9, v10, v11, v12);
      break;
    case 3:
      double v13 = *(double **)(a2 + 8);
      float v14 = *v13;
      float v15 = v13[1];
      float v16 = v13[2];
      float v17 = v13[3];
      float v18 = v13[4];
      float v19 = v13[5];
      CA::OGL::PathStroker::cube_to(a1, v14, v15, v16, v17, v18, v19);
      break;
    case 4:
      CA::OGL::PathStroker::close(a1);
      break;
    default:
      return;
  }
}

void CA::OGL::PathStroker::render(CA::OGL::PathStroker *this, const CGPath *a2, const CGAffineTransform *a3, double a4, const double *a5, unint64_t a6)
{
  v56[1] = *MEMORY[0x1E4F143B8];
  if (a3 && a5)
  {
    uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *))(**(void **)this + 1000))(*(void *)this, 0, 4, 1, (char *)this + 116);
    int64x2_t v12 = *(int64x2_t *)&a3->a;
    int64x2_t v13 = *(int64x2_t *)&a3->c;
    float v14 = (double *)*((void *)this + 1);
    v15.f64[0] = *v14 * *v14 + v14[1] * v14[1];
    double v16 = v14[2] * v14[2] + v14[3] * v14[3];
    BOOL v17 = v15.f64[0] != 1.0;
    if (v16 != 1.0) {
      BOOL v17 = 1;
    }
    double v18 = sqrt(v15.f64[0]);
    double v19 = sqrt(v16);
    if (v17)
    {
      double v16 = v19;
      v15.f64[0] = v18;
    }
    v15.f64[1] = v16;
    float64x2_t v20 = (float64x2_t)vzip1q_s64(v12, v13);
    float64x2_t v21 = (float64x2_t)vzip2q_s64(v12, v13);
    int8x16_t v22 = (int8x16_t)vmlaq_f64(vmulq_f64(v20, v20), v21, v21);
    unsigned int v23 = *(double *)v22.i64 != 1.0;
    if (*(double *)&v22.i64[1] != 1.0) {
      unsigned int v23 = 1;
    }
    int32x2_t v24 = vdup_n_s32(v23);
    v25.i64[0] = v24.u32[0];
    v25.i64[1] = v24.u32[1];
    float64x2_t v26 = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), (int8x16_t)vsqrtq_f64((float64x2_t)v22), v22), v15);
    if (v26.f64[1] >= v26.f64[0]) {
      double v27 = v26.f64[0];
    }
    else {
      double v27 = v26.f64[1];
    }
    if (v26.f64[1] >= v26.f64[0]) {
      double v28 = v26.f64[1];
    }
    else {
      double v28 = v26.f64[0];
    }
    unint64_t v29 = a6 << (a6 & 1);
    unint64_t v30 = 8 * v29;
    if (8 * v29 > 0x1000)
    {
      double v31 = (char *)malloc_type_malloc(8 * v29, 0xBB62C910uLL);
      if (!v31) {
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](v11);
      double v31 = (char *)v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v31, 8 * v29);
    }
    if (v29)
    {
      unint64_t v32 = 0;
      float v33 = v27;
      double v34 = v33;
      float v35 = 0.0;
      float v36 = 0.0;
      double v37 = 0.00200000009 / v34;
      do
      {
        if (v32 >= a6) {
          unint64_t v38 = a6;
        }
        else {
          unint64_t v38 = 0;
        }
        unint64_t v39 = v32 + 1;
        if (v32 + 1 >= a6) {
          unint64_t v40 = a6;
        }
        else {
          unint64_t v40 = 0;
        }
        float v41 = &a5[-v38];
        double v42 = v41[v32];
        if (*((unsigned char *)this + 114) == 2
          && (float v43 = v42 * v34, v43 < 0.002)
          && (float v44 = &a5[v32 - v40], v44[1] * v34 > 0.00200000009 - v43))
        {
          *(double *)&v31[8 * v32] = v37;
          double v45 = v44[1] - v37 + v41[v32];
        }
        else
        {
          *(double *)&v31[8 * v32] = v42;
          double v45 = a5[v32 - v40 + 1];
        }
        *(double *)&v31[8 * v32 + 8] = v45;
        double v46 = a5[v32 - v40 + 1];
        float v35 = v46 + v35;
        float v36 = v46 + v36 + v41[v32];
        v32 += 2;
      }
      while (v39 + 1 < v29);
      BOOL v47 = v35 == 0.0;
    }
    else
    {
      BOOL v47 = 1;
      float v36 = 0.0;
    }
    float32x2_t v49 = (double *)*((void *)this + 1);
    float32x2_t v50 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>;
    if (*v49 == 1.0)
    {
      uint64_t v51 = 1;
      while (v51 != 6)
      {
        uint64_t v52 = v51;
        double v53 = v49[v51];
        double v54 = CA::Mat2Impl::mat2_identity_double[v51++];
        if (v53 != v54)
        {
          float32x2_t v50 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>;
          if ((unint64_t)(v52 - 1) < 5) {
            goto LABEL_40;
          }
          break;
        }
      }
      float32x2_t v50 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathStroker>;
    }
LABEL_40:
    if (v29 > a6) {
      float v36 = v36 * 0.5;
    }
    float v48 = v28;
    if ((float)(v36 * v48) < 0.0005) {
      BOOL v47 = 1;
    }
    if (v47) {
      CGPathApply(a2, this, v50);
    }
    else {
      CGPathApplyDashedPath();
    }
    CA::OGL::PathStroker::finish(this, v55);
    if (v30 > 0x1000) {
      free(v31);
    }
  }
}

uint64_t CA::Render::Texture::set_data_volatile(CA::Render::Texture *this, int a2)
{
  return a2 ^ 1u;
}

uint64_t CA::Render::Texture::data_size(CA::Render::Texture *this)
{
  return 0;
}

BOOL CA::Render::Texture::can_mix_with_object(CA::Render::Texture *this, CA::Render::Object *a2)
{
  return (*(uint64_t (**)(CA::Render::Object *))(*(void *)a2 + 80))(a2) != 0;
}

uint64_t CA::Render::Subtexture::texture_cast(CA::Render::Subtexture *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

uint64_t CA::Render::Subtexture::mix@<X0>(atomic_uint *this@<X0>, atomic_uint *a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, void *a4@<X8>)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result) {
    uint64_t result = CA::Render::Interpolator::Interpolator(result, this, a2, *(double *)a3);
  }
  *a4 = result;
  return result;
}

void CA::Render::Subtexture::show(CA::Render::Subtexture *this, int a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      double v16 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *((_DWORD *)this + 6);
        int v18 = *((_DWORD *)this + 7);
        int v19 = *((_DWORD *)this + 8);
        int v20 = *((_DWORD *)this + 9);
        *(_DWORD *)long long buf = 67109888;
        int v23 = v17;
        __int16 v24 = 1024;
        int v25 = v18;
        __int16 v26 = 1024;
        int v27 = v19;
        __int16 v28 = 1024;
        int v29 = v20;
        _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "(subtexture [%d %d %d %d] ", buf, 0x1Au);
      }
    }
    uint64_t v21 = *((void *)this + 2);
    if (v21) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v21 + 40))(v21, (a2 + 1), a3);
    }
    if (x_log_hook_p()) {
      goto LABEL_16;
    }
    float64x2_t v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      goto LABEL_19;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      float v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *((_DWORD *)this + 6);
        int v9 = *((_DWORD *)this + 7);
        int v10 = *((_DWORD *)this + 8);
        int v11 = *((_DWORD *)this + 9);
        *(_DWORD *)long long buf = 67109888;
        int v23 = v8;
        __int16 v24 = 1024;
        int v25 = v9;
        __int16 v26 = 1024;
        int v27 = v10;
        __int16 v28 = 1024;
        int v29 = v11;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(subtexture [%d %d %d %d] ", buf, 0x1Au);
      }
    }
    if (*((void *)this + 2))
    {
      int64x2_t v12 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v12);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int64x2_t v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "(texture ", buf, 2u);
        }
      }
      (*(void (**)(void, CA::Render *, uint64_t))(**((void **)this + 2) + 40))(*((void *)this + 2), v12, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (x_log_hook_p())
    {
LABEL_16:
      x_log_();
      return;
    }
    float64x2_t v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
LABEL_19:
      _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
}

void CA::Render::Subtexture::encode(const CA::Render::Object **this, CA::Render::Encoder *a2)
{
  CA::Render::Object::encode(this, a2);
  CA::Render::Encoder::encode_object(a2, this[2]);
  int v4 = *((_DWORD *)this + 6);
  double v5 = (_DWORD *)*((void *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((void *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    double v5 = (_DWORD *)*((void *)a2 + 4);
  }
  *double v5 = v4;
  uint64_t v6 = *((void *)a2 + 4);
  unint64_t v7 = *((void *)a2 + 5);
  int v8 = (_DWORD *)(v6 + 4);
  *((void *)a2 + 4) = v6 + 4;
  int v9 = *((_DWORD *)this + 7);
  if (v6 + 8 > v7)
  {
    CA::Render::Encoder::grow(a2, 4);
    int v8 = (_DWORD *)*((void *)a2 + 4);
  }
  _DWORD *v8 = v9;
  uint64_t v10 = *((void *)a2 + 4);
  unint64_t v11 = *((void *)a2 + 5);
  int64x2_t v12 = (_DWORD *)(v10 + 4);
  *((void *)a2 + 4) = v10 + 4;
  int v13 = *((_DWORD *)this + 8);
  if (v10 + 8 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    int64x2_t v12 = (_DWORD *)*((void *)a2 + 4);
  }
  *int64x2_t v12 = v13;
  uint64_t v14 = *((void *)a2 + 4);
  unint64_t v15 = *((void *)a2 + 5);
  double v16 = (_DWORD *)(v14 + 4);
  *((void *)a2 + 4) = v14 + 4;
  int v17 = *((_DWORD *)this + 9);
  if (v14 + 8 > v15)
  {
    CA::Render::Encoder::grow(a2, 4);
    double v16 = (_DWORD *)*((void *)a2 + 4);
  }
  *double v16 = v17;
  *((void *)a2 + 4) += 4;
}

void CA::Render::Subtexture::~Subtexture(CA::Render::Subtexture *this, const CA::Render::Object *a2)
{
  *(void *)this = &unk_1ED02CDE0;
  double v3 = (atomic_uint *)*((void *)this + 2);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  --dword_1EB2ADE90;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v3;

  *(void *)this = &unk_1ED02CDE0;
  double v3 = (atomic_uint *)*((void *)this + 2);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  --dword_1EB2ADE90;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
}

CA::Render::Subtexture *CA::Render::Subtexture::Subtexture(CA::Render::Subtexture *this, CA::Render::Decoder *a2)
{
  *(void *)this = &unk_1ED02F670;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 0x32;
  ++dword_1EB2ADE90;
  *(void *)this = &unk_1ED02CDE0;
  *((void *)this + 2) = CA::Render::Decoder::decode_object(a2, 6, (uint64_t)&CA::Render::texture_types);
  int v4 = CA::Render::Decoder::decode_int32(a2);
  int v5 = CA::Render::Decoder::decode_int32(a2);
  int v6 = CA::Render::Decoder::decode_int32(a2);
  int v7 = CA::Render::Decoder::decode_int32(a2);
  *((_DWORD *)this + 6) = v4;
  *((_DWORD *)this + 7) = v5;
  *((_DWORD *)this + 8) = v6;
  *((_DWORD *)this + 9) = v7;
  return this;
}

void *CA::Render::Fence::Transaction::Observer::free_batch_handlers(void *this)
{
  float v1 = this;
  uint64_t v2 = this[4];
  if (v2)
  {
    do
    {
      _Block_release(*(const void **)v2);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
    this = (void *)v1[4];
    if (this)
    {
      do
      {
        double v3 = (void *)this[1];
        free(this);
        this = v3;
      }
      while (v3);
    }
  }
  void v1[4] = 0;
  return this;
}

uint64_t __Block_byref_object_copy__20341(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__20342(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(a1 + 40);
}

uint64_t ___ZN2CA6Render5Fence11Transaction8Observer8activateENSt3__113unordered_setIyNS4_4hashIyEENS4_8equal_toIyEENS4_9allocatorIyEEEEPFvPS3_RKSC_djyEPFvSD_SF_jjEPFvSD_SF_E_block_invoke_7(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    double v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 80);
      uint64_t v5 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 67109376;
      int v9 = v4;
      __int16 v10 = 2048;
      uint64_t v11 = v5;
      _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "fence tx observer %x timed out after %f\n", buf, 0x12u);
    }
  }
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    uint64_t result = dispatch_mach_cancel();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(unsigned char *)(v7 + 24))
  {
    *(unsigned char *)(v7 + 24) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 72))(v2, *(void *)(*(void *)(a1 + 48) + 8) + 40);
  }
  return result;
}

void *CA::Render::Fence::Transaction::Observer::notify_batch_handlers(void *result)
{
  float v1 = (void *)result[4];
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*v1 + 16))();
      float v1 = (void *)v1[1];
    }
    while (v1);
    if (v2[4])
    {
      return CA::Render::Fence::Transaction::Observer::free_batch_handlers(v2);
    }
  }
  return result;
}

void CA::Render::Fence::fence_info_init(CA::Render::Fence *this)
{
}

void CA::Render::Fence::send_rmfc_msg(uint64_t a1, size_t size, uint64_t a3)
{
  mach_msg_return_t v12;
  mach_msg_return_t v13;
  NSObject *v14;
  unsigned char msg[28];
  unsigned char *v17;
  int v18;
  int v19;
  pid_t v20;
  int v21;
  uint8_t buf[4];
  mach_msg_return_t v23;
  uint64_t v24;

  __int16 v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    __assert_rtn("send_rmfc_msg", "render-fence.cpp", 167, "!f_names.empty ()");
  }
  int v5 = size;
  int v6 = a1;
  if ((unint64_t)(8 * v3) > 0x1000)
  {
    int v8 = malloc_type_malloc(8 * v3, 0x14686EEAuLL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    int v8 = &msg[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    bzero(v8, v7);
  }
  int v9 = *(void **)(a3 + 16);
  if (v9)
  {
    __int16 v10 = v8;
    do
    {
      *v10++ = v9[2];
      int v9 = (void *)*v9;
    }
    while (v9);
  }
  *(void *)mach_msg_header_t msg = 0x3480000013;
  *(_DWORD *)&msg[8] = v6;
  *(_OWORD *)&msg[12] = xmmword_184998670;
  int v17 = v8;
  int v11 = 8 * *(_DWORD *)(a3 + 24);
  int v18 = 16777472;
  int v19 = v11;
  int v20 = getpid();
  uint64_t v21 = v5;
  uint64_t v12 = mach_msg((mach_msg_header_t *)msg, 17, 0x34u, 0, 0, 0x64u, 0);
  if (v12)
  {
    int v13 = v12;
    if ((v12 - 268435459) <= 1) {
      mach_msg_destroy((mach_msg_header_t *)msg);
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v14 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v23 = v13;
        _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "failed to send rmfc reply: %x\n", buf, 8u);
      }
    }
  }
}

uint64_t CA::CG::DrawShading::draw_shape_and_color(CA::CG::DrawShading *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawShading *, CA::CG::Renderer *))(*(void *)this + 168))(this, a2);
}

void CA::CG::DrawShading::draw_color(CA::CG::DrawShading *this, CA::CG::Renderer *a2)
{
}

void CA::CG::fill_shading(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  int v4 = v3;
  float64_t v6 = v5;
  uint64_t v165 = *MEMORY[0x1E4F143B8];
  int Type = CGShadingGetType();
  switch(Type)
  {
    case 3:
      uint64_t Descriptor = CGShadingGetDescriptor();
      ColorSpace = (CGColorSpace *)CGShadingGetColorSpace();
      if (CGColorSpaceGetModel(ColorSpace) > kCGColorSpaceModelRGB) {
        goto LABEL_50;
      }
      int v9 = *(void **)(*(void *)&v6 + 8);
      *(unsigned char *)(v9[2] + 16) = 46;
      int v17 = (*(uint64_t (**)(void *))(*v9 + 984))(v9);
      uint64_t v18 = v9[2];
      if (!v17) {
        goto LABEL_49;
      }
      int v19 = *(unsigned __int8 *)(v18 + 480);
      if (v19 == 12 || (v19 - 1) > 0x18) {
        goto LABEL_50;
      }
      {
        *(unsigned char *)(v9[2] + 481) |= 2u;
        *(_DWORD *)(v9[2] + 352) = 1065353216;
      }
      uint64_t v21 = *(void *)(Descriptor + 40);
      v142.i64[0] = (uint64_t)&unk_1ED028050;
      v142.i64[1] = v21;
      uint64_t Background = CGShadingGetBackground();
      *(void *)int v157 = 2048;
      uint64_t v23 = *(void *)(Descriptor + 16);
      v153.f64[1] = v6;
      *(void *)&v154.f64[0] = v9;
      *(void *)&v154.f64[1] = v2;
      *(void *)&long long v155 = &v142;
      *((void *)&v155 + 1) = ColorSpace;
      uint64_t v156 = Background;
      *(void *)&v153.f64[0] = &unk_1ED027F70;
      *(_OWORD *)&v157[8] = *(_OWORD *)Descriptor;
      *(void *)&v157[24] = v23;
      break;
    case 2:
      uint64_t v24 = CGShadingGetDescriptor();
      int v25 = (CGColorSpace *)CGShadingGetColorSpace();
      if (CGColorSpaceGetModel(v25) > kCGColorSpaceModelRGB) {
        goto LABEL_50;
      }
      int v9 = *(void **)(*(void *)&v6 + 8);
      uint64_t v27 = v9[2];
      int v28 = *(unsigned __int8 *)(v27 + 480);
      if (v28 == 12 || (v28 - 1) > 0x18) {
        goto LABEL_50;
      }
      v26.n128_u64[0] = *(void *)v24;
      if (*(double *)v24 == *(double *)(v24 + 32)
        && (v26.n128_u64[0] = *(void *)(v24 + 8), v26.n128_f64[0] == *(double *)(v24 + 40)))
      {
        char v31 = 0;
        char v30 = 44;
      }
      else
      {
        char v30 = 45;
        char v31 = 1;
      }
      *(unsigned char *)(v27 + 16) = v30;
      if (((*(uint64_t (**)(void *, __n128))(*v9 + 984))(v9, v26) & 1) == 0)
      {
        uint64_t v18 = v9[2];
        goto LABEL_49;
      }
      {
        *(unsigned char *)(v9[2] + 481) |= 2u;
        *(_DWORD *)(v9[2] + 352) = 1065353216;
      }
      uint64_t v32 = *(void *)(v24 + 80);
      v142.i64[0] = (uint64_t)&unk_1ED028050;
      v142.i64[1] = v32;
      uint64_t v33 = CGShadingGetBackground();
      long long v158 = 0u;
      *(_OWORD *)&v157[32] = 0u;
      *(_OWORD *)&v157[16] = 0u;
      *(_OWORD *)int v157 = 0u;
      double v34 = *(double *)(v24 + 16);
      double v35 = *(double *)(v24 + 48);
      char v36 = *(unsigned char *)(v24 + 24);
      char v37 = *(unsigned char *)(v24 + 56);
      v153.f64[1] = v6;
      *(void *)&v154.f64[0] = v9;
      *(void *)&v154.f64[1] = v2;
      *(void *)&long long v155 = &v142;
      *((void *)&v155 + 1) = v25;
      uint64_t v156 = v33;
      *(_DWORD *)int v157 = 2048;
      *(void *)&v153.f64[0] = &unk_1ED027FB8;
      *(_OWORD *)&v157[8] = *(_OWORD *)v24;
      *(_OWORD *)&v157[24] = *(_OWORD *)(v24 + 32);
      *(void *)&v157[40] = fabs(v34);
      *(void *)&long long v158 = fabs(v35);
      BYTE8(v158) = v36;
      BYTE9(v158) = v37;
      BYTE10(v158) = v31;
      break;
    case 1:
      int v8 = (CGColorSpace *)CGShadingGetColorSpace();
      if (CGColorSpaceGetModel(v8) > kCGColorSpaceModelRGB) {
        goto LABEL_50;
      }
      int v9 = *(void **)(*(void *)&v6 + 8);
      uint64_t v10 = CGShadingGetDescriptor();
      uint64_t v11 = v10;
      if (*(unsigned char *)(v10 + 16) && *(unsigned char *)(v10 + 40))
      {
        uint64_t v12 = v9[2];
        unint64_t v13 = *(void *)(v12 + 16) & 0xFFFFFF00FF00FF00;
        if (*(void *)(v12 + 8) == 0x3C003C003C003C00) {
          int v14 = 1;
        }
        else {
          int v14 = 3;
        }
        *(_DWORD *)(v12 + 16) = v14 | v13;
        *(_DWORD *)(v12 + 2CASetDebugMessage("", 0) = HIDWORD(v13);
LABEL_41:
        {
          *(unsigned char *)(v9[2] + 481) |= 2u;
          *(_DWORD *)(v9[2] + 352) = 1065353216;
        }
        uint64_t v41 = *(void *)(v11 + 64);
        v142.i64[0] = (uint64_t)&unk_1ED028050;
        v142.i64[1] = v41;
        uint64_t v42 = CGShadingGetBackground();
        long long v159 = 0u;
        long long v158 = 0u;
        *(_OWORD *)&v157[32] = 0u;
        *(_OWORD *)&v157[16] = 0u;
        *(_OWORD *)int v157 = 0u;
        CGShadingGetBounds();
        char v45 = *(unsigned char *)(v11 + 16);
        char v46 = *(unsigned char *)(v11 + 40);
        v153.f64[1] = v6;
        *(void *)&v154.f64[0] = v9;
        *(void *)&v154.f64[1] = v2;
        *(void *)&long long v155 = &v142;
        *((void *)&v155 + 1) = v8;
        uint64_t v156 = v42;
        *(_DWORD *)int v157 = 2048;
        *(void *)&v153.f64[0] = &unk_1ED027F28;
        *(_OWORD *)&v157[8] = *(_OWORD *)v11;
        *(_OWORD *)&v157[24] = *(_OWORD *)(v11 + 24);
        *(void *)&v157[40] = v47;
        *(void *)&long long v158 = v48;
        *((void *)&v158 + 1) = v49;
        *(void *)&long long v159 = v50;
        BYTE8(v159) = has_background;
        BYTE9(v159) = v45;
        BYTE10(v159) = v46;
        break;
      }
      *(unsigned char *)(v9[2] + 16) = 43;
      int v38 = (*(uint64_t (**)(void *))(*v9 + 984))(v9);
      uint64_t v18 = v9[2];
      if (v38)
      {
        int v39 = *(unsigned __int8 *)(v18 + 480);
        if (v39 == 12 || (v39 - 1) > 0x18) {
          goto LABEL_50;
        }
        goto LABEL_41;
      }
LABEL_49:
      *(unsigned char *)(v18 + 16) = 0;
      goto LABEL_50;
    default:
      goto LABEL_50;
  }
  uint64_t Identifier = CGShadingGetIdentifier();
  *(unsigned char *)(v9[2] + 481) &= ~2u;
  *(unsigned char *)(v9[2] + 16) = 0;
  if (v52) {
    return;
  }
LABEL_50:
  uint64_t v53 = *(void *)(*(void *)&v6 + 8);
  int8x16_t v152 = 0uLL;
  CA::Shape::get_bounds(*(void *)(*(void *)(v53 + 248) + 8), v152.i32);
  double v55 = *(int32x2_t **)(v53 + 264);
  if (v55) {
    __int16 v56 = v55 + 4;
  }
  else {
    __int16 v56 = (int32x2_t *)(v53 + 200);
  }
  uint32x2_t v57 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v152.u64[1]);
  if ((vpmax_u32(v57, v57).u32[0] & 0x80000000) != 0)
  {
    int32x2_t v135 = (int32x2_t)v152.u64[1];
    int32x2_t v137 = (int32x2_t)v152.u64[1];
  }
  else
  {
    int32x2_t v58 = v56[1];
    uint32x2_t v59 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v58);
    if ((vpmax_u32(v59, v59).u32[0] & 0x80000000) != 0
      || (int32x2_t v60 = vadd_s32(*v56, v58),
          *(int32x2_t *)v61.i8 = vmax_s32(*(int32x2_t *)v152.i8, *v56),
          int32x2_t v62 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v152.i8, (int32x2_t)v152.u64[1]), v60), *(int32x2_t *)v61.i8),
          uint32x2_t v63 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v62),
          (vpmax_u32(v63, v63).u32[0] & 0x80000000) != 0))
    {
      int32x2_t v135 = 0;
      int32x2_t v137 = 0;
      v152.i64[1] = 0;
    }
    else
    {
      v61.u64[1] = (unint64_t)v62;
      int8x16_t v152 = v61;
      int32x2_t v135 = v62;
      int32x2_t v137 = v62;
    }
  }
  {
    int32x2_t v64 = v135;
    int32x2_t v65 = v137;
  }
  else
  {
    CGShadingGetBounds();
    v153.f64[0] = v67;
    v153.f64[1] = v68;
    v154.f64[0] = v69;
    v154.f64[1] = v70;
    if (v69 < 0.0)
    {
      v153.f64[0] = v69 + v67;
      v154.f64[0] = -v69;
    }
    if (v70 < 0.0)
    {
      v153.f64[1] = v70 + v68;
      v154.f64[1] = -v70;
    }
    CA::Mat2Impl::mat2_apply_to_rect(v2, v153.f64, v66);
    int8x16_t v71 = (int8x16_t)vceqzq_f64(v154);
    unint64_t v72 = vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v71, 1), v71).u64[0];
    int8x16_t v73 = 0uLL;
    if ((v72 & 0x8000000000000000) == 0)
    {
      int8x16_t v74 = vorrq_s8((int8x16_t)vcltzq_f64(v154), (int8x16_t)vcgezq_f64(v154));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v74), 1), v74).u64[0] & 0x8000000000000000) == 0)
      {
        int32x4_t v75 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v153, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        int8x16_t v73 = (int8x16_t)vuzp1q_s32(v75, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v153, v154), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v75));
      }
    }
    int32x2_t v65 = v137;
    uint32x2_t v76 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v137);
    if ((vpmax_u32(v76, v76).u32[0] & 0x80000000) != 0)
    {
      int32x2_t v64 = v135;
    }
    else
    {
      int32x2_t v77 = (int32x2_t)vextq_s8(v73, v73, 8uLL).u64[0];
      uint32x2_t v78 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v77);
      if ((vpmax_u32(v78, v78).u32[0] & 0x80000000) != 0
        || (int32x2_t v79 = vadd_s32(*(int32x2_t *)v73.i8, v77),
            *(int32x2_t *)v73.i8 = vmax_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v73.i8),
            int32x2_t v64 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v152.i8, v137), v79), *(int32x2_t *)v73.i8),
            uint32x2_t v80 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v64),
            (vpmax_u32(v80, v80).u32[0] & 0x80000000) != 0))
      {
        int32x2_t v65 = 0;
        v152.i64[1] = 0;
        int32x2_t v64 = 0;
      }
      else
      {
        v73.u64[1] = (unint64_t)v64;
        int8x16_t v152 = v73;
        int32x2_t v65 = v64;
      }
    }
  }
  int v81 = v64.i32[0];
  unint64_t v82 = v64.u32[1];
  if (!*(void *)&v64)
  {
    *(void *)(*(void *)(v53 + 16) + 8) = 0;
    uint64_t v85 = *(CA::Shape **)(*(void *)(v53 + 248) + 8);
    float64x2_t v153 = 0uLL;
    CA::OGL::emit_combine(v53, 0, 0, 0, v85, (unsigned int *)&v153);
    return;
  }
  uint64_t v83 = *(void *)(*(void *)&v6 + 8);
  int32x2_t v136 = v64;
  int32x2_t v138 = v65;
  if (v83) {
    int v84 = *(CGColorSpace **)(v83 + 144);
  }
  else {
    int v84 = 0;
  }
  if (CGColorSpaceGetModel(v84)) {
    uint64_t v86 = 2;
  }
  else {
    uint64_t v86 = 1;
  }
  if ((v82 + *(_DWORD *)(*(void *)&v6 + 192 * v86 + 1400) - 1)
     / *(_DWORD *)(*(void *)&v6 + 192 * v86 + 1400)
     * ((v81 + *(_DWORD *)(*(void *)&v6 + 192 * v86 + 1396) - 1)
      / *(_DWORD *)(*(void *)&v6 + 192 * v86 + 1396)) > *((_DWORD *)&CA::CG::Renderer::_max_mosaic_cells + v86))
  {
    unint64_t v87 = CA::Render::format_rowbytes((CA::Render *)0xB, v81);
    size_t v88 = v87;
    unint64_t v140 = 0;
    unint64_t v141 = v87;
    if (is_mul_ok(v87, v82)) {
      int v89 = (CA::Render *)(v87 * v82);
    }
    else {
      int v89 = 0;
    }
    double v90 = (CGColorSpace *)CA::Render::aligned_malloc(v89, (unint64_t *)&v140, 0);
    if (!v90) {
      return;
    }
    double v91 = v90;
    double v92 = (CGContextRef *)CAGetCachedCGBitmapContext_(v90, v81, v82, 0xBu, v88, *(CGColorSpaceRef *)(v53 + 144));
    if (v92 && (float v94 = v92[2]) != 0)
    {
      CGContextTranslateCTM(v92[2], (double)-v152.i32[0], (double)-v152.i32[1]);
      long long v95 = *(_OWORD *)(v2 + 16);
      long long v96 = *(_OWORD *)(v2 + 32);
      *(_OWORD *)&transform.a = *(_OWORD *)v2;
      *(_OWORD *)&transform.c = v95;
      *(_OWORD *)&transform.tx = v96;
      CGContextConcatCTM(v94, &transform);
      if (CGShadingGetType())
      {
        CGContextSetCompositeOperation();
      }
      else
      {
        CGContextSetCompositeOperation();
        CGContextClear();
      }
      CGContextDrawShading(v94, v4);
      CAReleaseCachedCGContext(v94);
      uint64_t v120 = v140;
      int v121 = CA::Render::Image::new_image((CA::Render::Image *)0xB, v81, v82, 1u, *(CGColorSpace **)(v53 + 144), v91, &v141, (const unint64_t *)CA::Render::aligned_free, v140, v133);
      if (v121)
      {
        uint64_t v122 = (atomic_uint *)v121;
        unsigned int v160 = 0;
        *(void *)&long long v161 = 0;
        uint64_t v123 = CA::OGL::Context::bind_image(v53, 0, (uint32x2_t *)v121, (double *)0x100, 0, 0, 0, 0, 0.0, (float32x4_t *)&v160, 0);
        if (v123)
        {
          __int32 v127 = v123;
          if (v81 <= (int)v82) {
            int v128 = v82;
          }
          else {
            int v128 = v81;
          }
          v125.i32[0] = 1073741822;
          v126.i32[0] = v128;
          v129.i64[0] = v152.i32[0];
          v129.i64[1] = v152.i32[1];
          int8x16_t v130 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v126, v125), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v129));
          v129.i64[0] = v136.i32[0];
          v129.i64[1] = v136.i32[1];
          int32x2_t v131 = vdup_n_s32(v128 > 1073741822);
          int8x16_t v132 = (int8x16_t)vcvtq_f64_s64(v129);
          v129.i64[0] = v131.u32[0];
          v129.i64[1] = v131.u32[1];
          int8x16_t v142 = v130;
          int8x16_t v143 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v129, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v132);
          *(void *)&v153.f64[0] = &v142;
          *(void *)&v153.f64[1] = &CA::identity_transform;
          float64x2_t v154 = 0u;
          long long v155 = 0u;
          CA::OGL::fill_rect_tex((CA::OGL::Context *)v53, (uint64_t)&v153, (uint64_t)&v160, v124);
          (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v53 + 520))(v53, v127, 0);
        }
        if (atomic_fetch_add(v122 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v122 + 16))(v122);
        }
        return;
      }
      uint64_t v110 = v91;
      double v109 = v120;
    }
    else
    {
      double v109 = v140;
      uint64_t v110 = v91;
    }
    CA::Render::aligned_free(v110, (size_t)v109, v93);
    return;
  }
  uint64_t v97 = *(void *)&v6 + 192 * v86;
  uint64_t v98 = *(void *)(v53 + 16);
  unint64_t v99 = *(void *)(v98 + 16) & 0xFFFFFF00FF00FF00;
  if (*(void *)(v98 + 8) == 0x3C003C003C003C00) {
    int v100 = 1;
  }
  else {
    int v100 = 3;
  }
  *(_DWORD *)(v98 + 16) = v100 | v99;
  *(_DWORD *)(v98 + 2CASetDebugMessage("", 0) = HIDWORD(v99);
  if ((*(_DWORD *)(v97 + 1536) & 0x80000000) != 0)
  {
    uint64_t v134 = v97 + 1392;
    uint64_t v101 = (_DWORD *)(v97 + 1536);
    *(_DWORD *)(v97 + 1536) = 0;
    *(_WORD *)(*(void *)&v6 + 192 * v86 + 154CASetDebugMessage("", 0) = 0;
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    unsigned int v160 = &unk_1ED027EC0;
    int v102 = CGShadingGetIdentifier();
    LODWORD(v161) = v102;
    *(int32x2_t *)((char *)&v161 + 4) = v138;
    if (&v162 == (long long *)v2)
    {
      double v105 = *((double *)&v164 + 1);
      double v106 = *(double *)&v164;
      double v103 = *(double *)v2;
      double v107 = *((double *)&v162 + 1);
      double v108 = *((double *)&v163 + 1);
      *(void *)&long long v104 = v163;
    }
    else
    {
      long long v104 = *(_OWORD *)(v2 + 16);
      long long v162 = *(_OWORD *)v2;
      double v103 = *(double *)&v162;
      long long v163 = v104;
      double v106 = *(double *)(v2 + 32);
      double v105 = *(double *)(v2 + 40);
      double v107 = *((double *)&v162 + 1);
      double v108 = *((double *)&v104 + 1);
    }
    __int32 v111 = v152.i32[0];
    __int32 v112 = v152.i32[1];
    double v113 = v106 - (double)v152.i32[0];
    double v114 = v105 - (double)v152.i32[1];
    *(double *)&long long v164 = v113;
    *((double *)&v164 + 1) = v114;
    *(float64_t *)&v142.i64[1] = v6;
    v143.i64[0] = v53;
    *(void *)(v53 + 128) = 0;
    *(void *)(v53 + 96) = v53 + 834;
    *(_OWORD *)(v53 + 104) = xmmword_184997E70;
    v143.u64[1] = (unint64_t)v136;
    int v144 = &v153;
    uint64_t v145 = 0x2000;
    uint64_t v146 = 0;
    uint64_t v147 = 0;
    v142.i64[0] = (uint64_t)&unk_1ED028000;
    uint64_t v148 = v4;
    __int32 v149 = v111;
    __int32 v150 = v112;
    uint64_t v151 = v2;
    double v115 = v114
         + (v113 + (v108 * 256.0 + (*(double *)&v104 * 256.0 + (v103 * 8448.0 + v107 * 256.0) * 33.0) * 33.0) * 33.0)
         * 33.0;
    double v116 = -v115;
    if (v115 >= 0.0) {
      double v116 = v115;
    }
    CA::OGL::Mosaic::draw(v134, (uint64_t *)v53, 6, 33 * (33 * (33 * v116 + v138.i32[0]) + v138.i32[1]) + v102, (uint64_t)&v160, v81, v82, 1, (uint64_t)&v142, 0);
    CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate((CA::CG::MosaicBitmapDelegate *)&v142);
    uint64_t v117 = *(void *)&v6 + 192 * v86;
    uint64_t v118 = *(void *)(v117 + 1552);
    if (v118)
    {
      BOOL v119 = (void *)(v117 + 1552);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v53 + 520))(v53, v118, 0);
      void *v119 = 0;
      *(_DWORD *)(*(void *)&v6 + 192 * v86 + 1544) = -1;
    }
    _DWORD *v101 = -1;
    *(void *)(*(void *)&v6 + 192 * v86 + 1504) = 0;
  }
  *(unsigned char *)(*(void *)(v53 + 16) + 16) = 0;
}

uint64_t CA::CG::anonymous namespace'::shading_has_background(CA::CG::_anonymous_namespace_ *this, CGShading *a2)
{
  uint64_t result = CGShadingGetBackground();
  if (result)
  {
    uint64_t v3 = result;
    ColorSpace = (CGColorSpace *)CGShadingGetColorSpace();
    return *(double *)(v3 + 8 * CGColorSpaceGetNumberOfComponents(ColorSpace)) > 0.0;
  }
  return result;
}

uint64_t CA::CG::anonymous namespace'::draw_shading_delegate(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = v3[33];
  if (v5) {
    LODWORD(v5) = (*(_WORD *)(v5 + 68) & 0x130) != 0;
  }
  if (a2 == 5) {
    LODWORD(v5) = 1;
  }
  if (v5) {
    unsigned int v6 = 5;
  }
  else {
    unsigned int v6 = 3;
  }
  uint64_t v7 = v4 + 192 * v6;
  unsigned int v8 = *(_DWORD *)(v7 + 1536);
  if ((v8 & 0x80000000) != 0)
  {
    int v9 = (_DWORD *)(v7 + 1536);
    uint64_t v10 = v4 + 192 * v6;
    *(_DWORD *)(v7 + 1536) = 0;
    *(unsigned char *)(v10 + 154CASetDebugMessage("", 0) = a2 == 7;
    *(unsigned char *)(v10 + 1541) = a2 == 7;
    CA::OGL::Mosaic::draw(v10 + 1392, v3, a2, a3, 0, *(_DWORD *)(a1 + 56), 1, 0, a1, 0);
    uint64_t v11 = *(void *)(v10 + 1552);
    if (v11)
    {
      (*(void (**)(uint64_t *, uint64_t, void))(*v3 + 520))(v3, v11, 0);
      *(void *)(v10 + 1552) = 0;
      *(_DWORD *)(v4 + 192 * v6 + 1544) = -1;
    }
    _DWORD *v9 = -1;
    *(void *)(v4 + 192 * v6 + 1504) = 0;
  }
  return v8 >> 31;
}

void CA::CG::anonymous namespace'::ShadingBitmapDelegate::draw(CA::CG::_anonymous_namespace_::ShadingBitmapDelegate *this, CGContextRef c, double a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  LODWORD(a3) = *((_DWORD *)this + 7);
  transform.c = 0.0;
  *(_OWORD *)&transform.a = 0x3FF0000000000000uLL;
  *(_OWORD *)&transform.d = xmmword_184997E00;
  transform.ty = (double)*(unint64_t *)&a3;
  CGContextConcatCTM(c, &transform);
  CGContextTranslateCTM(c, (double)-*((_DWORD *)this + 18), (double)-*((_DWORD *)this + 19));
  uint64_t v5 = (_OWORD *)*((void *)this + 10);
  long long v6 = v5[1];
  long long v7 = v5[2];
  *(_OWORD *)&v8.a = *v5;
  *(_OWORD *)&v8.c = v6;
  *(_OWORD *)&v8.tx = v7;
  CGContextConcatCTM(c, &v8);
  if (CGShadingGetType())
  {
    CGContextSetCompositeOperation();
  }
  else
  {
    CGContextSetCompositeOperation();
    CGContextClear();
  }
  CGContextDrawShading(c, *((CGShadingRef *)this + 8));
}

float CA::CG::anonymous namespace'::ShadingBitmapDelegate::quad(CA::CG::_anonymous_namespace_::ShadingBitmapDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = 6;
  if (!*(_DWORD *)(v6 + 92)) {
    uint64_t v7 = 4;
  }
  if ((unint64_t)(*(void *)(v6 + 128) + 4) > *(void *)(v6 + 136)
    || (unint64_t v8 = *(void *)(v6 + 112)) != 0 && *(void *)(v6 + 104) + v7 > v8)
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
  }
  int v9 = *(_DWORD *)a2 + *((_DWORD *)this + 18);
  int v10 = *((_DWORD *)a2 + 1) + *((_DWORD *)this + 19);
  float v11 = (double)*((int *)a2 + 2) + (double)v9;
  float v12 = (double)*((int *)a2 + 3) + (double)v10;
  CA::OGL::Context::array_rect((void *)v6, (float)v9, (float)v10, v11, v12);
  float result = *a3;
  int v14 = *((_DWORD *)a3 + 1);
  int v15 = *((_DWORD *)a3 + 2);
  int v16 = *((_DWORD *)a3 + 3);
  uint64_t v17 = *(void *)(v6 + 120) + 48 * *(void *)(v6 + 128);
  *(float *)(v17 - 176) = *a3;
  *(_DWORD *)(v17 - 172) = v14;
  *(_DWORD *)(v17 - 128) = v15;
  *(_DWORD *)(v17 - 124) = v14;
  *(_DWORD *)(v17 - 8CASetDebugMessage("", 0) = v15;
  *(_DWORD *)(v17 - 76) = v16;
  *(float *)(v17 - 32) = result;
  *(_DWORD *)(v17 - 28) = v16;
  uint64_t v18 = *(void *)(*(void *)(v6 + 16) + 8);
  *(void *)(v17 - 16CASetDebugMessage("", 0) = v18;
  *(void *)(v17 - 112) = v18;
  *(void *)(v17 - 64) = v18;
  *(void *)(v17 - 16) = v18;
  return result;
}

void CA::CG::anonymous namespace'::ShadingBitmapDelegate::~ShadingBitmapDelegate(CA::CG::_anonymous_namespace_::ShadingBitmapDelegate *this)
{
  CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(this);

  JUMPOUT(0x185323DC0);
}

__n128 CA::CG::anonymous namespace'::ShadingKey::copy(CA::CG::_anonymous_namespace_::ShadingKey *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v3 = (CA::CG::_anonymous_namespace_::ShadingKey *)malloc_type_zone_malloc(malloc_zone, 0x48uLL, 0x8BB15036uLL);
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1ED027EC0;
    result.n128_u64[0] = *((void *)this + 1);
    *((void *)v3 + 1) = result.n128_u64[0];
    *((_DWORD *)v3 + 4) = *((_DWORD *)this + 4);
    if (v3 != this)
    {
      *(_OWORD *)((char *)v3 + 24) = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)((char *)v3 + 4CASetDebugMessage("", 0) = *(_OWORD *)((char *)this + 40);
      __n128 result = *(__n128 *)((char *)this + 56);
      *(__n128 *)((char *)v3 + 56) = result;
    }
  }
  return result;
}

BOOL CA::CG::anonymous namespace'::ShadingKey::equal(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24))
  {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 5;
  while (v3 != 5)
  {
    double v5 = *(double *)(a1 + 32 + 8 * v3);
    double v6 = *(double *)(a2 + 32 + 8 * v3++);
    if (v5 != v6)
    {
      unint64_t v4 = v3 - 1;
      return v4 > 4;
    }
  }
  return v4 > 4;
}

void CA::CG::anonymous namespace'::ShadingKey::~ShadingKey(CA::CG::_anonymous_namespace_::ShadingKey *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::anonymous namespace'::ConicShadingDelegate::quad(CA::CG::_anonymous_namespace_::ConicShadingDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  double v5 = (int32x2_t *)*((void *)this + 2);
  int32x2_t v58 = 0;
  int32x2_t v59 = 0;
  uint64_t result = CA::Shape::get_bounds(*(void *)(*(void *)&v5[31] + 8), (int *)&v58);
  unint64_t v8 = (int32x2_t *)v5[33];
  if (v8) {
    int v9 = v8 + 4;
  }
  else {
    int v9 = v5 + 25;
  }
  uint32x2_t v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v59);
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v11 = v9[1];
    uint32x2_t v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v13 = vmax_s32(v58, *v9);
      int32x2_t v14 = vmin_s32(vadd_s32(v58, v59), vadd_s32(*v9, v11));
      uint32x2_t v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(v14, v13));
      if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
      {
        v16.i64[0] = v13.i32[0];
        v16.i64[1] = v13.i32[1];
        int v17 = v14.i32[0];
        double v49 = (double)v14.i32[0];
        int v18 = v13.i32[1];
        int v19 = v14.i32[1];
        *(double *)&uint64_t v50 = (double)v14.i32[1];
        int64x2_t v52 = (int64x2_t)vcvtq_f64_s64(v16);
        int v20 = v13.i32[0];
        long long v56 = 0u;
        long long v57 = 0u;
        long long v55 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v55, *((double **)this + 3), v7);
        uint64_t v44 = *((void *)&v57 + 1);
        uint64_t v43 = v57;
        double v48 = *((double *)&v56 + 1);
        double v46 = *(double *)&v56;
        double v47 = *((double *)&v55 + 1);
        double v45 = *(double *)&v55;
        float v23 = *((double *)this + 10);
        __float2 v24 = __sincosf_stret(v23);
        float64x2_t v25 = (float64x2_t)vdupq_lane_s64(v43, 0);
        float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v44, 0);
        int8x16_t v22 = (const double *)((char *)this + 64);
        float64x2_t v27 = vld1q_dup_f64(v22);
        uint64_t v21 = (const double *)((char *)this + 72);
        float64x2_t v28 = vld1q_dup_f64(v21);
        *(void *)&v29.f64[0] = v52.i64[0];
        v30.f64[0] = v49;
        v29.f64[1] = v49;
        *(void *)&v30.f64[1] = v52.i64[0];
        float64x2_t v31 = v30;
        float64x2_t v32 = (float64x2_t)vdupq_lane_s64(v50, 0);
        float64x2_t v33 = (float64x2_t)vdupq_laneq_s64(v52, 1);
        float32x4_t v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v27, vmlaq_n_f64(vmlaq_n_f64(v25, v29, v45), v33, v46))), vsubq_f64(v27, vmlaq_n_f64(vmlaq_n_f64(v25, v31, v45), v32, v46)));
        float32x4_t v35 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v26, v29, v47), v33, v48), v28)), vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v26, v31, v47), v32, v48), v28));
        int32x4_t v36 = (int32x4_t)vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v35, v24.__sinval)), v34, v24.__cosval);
        int32x4_t v37 = (int32x4_t)vmlaq_n_f32(vmulq_n_f32(v34, v24.__sinval), v35, v24.__cosval);
        int32x4_t v51 = vzip1q_s32(v36, v37);
        int32x4_t v53 = vzip2q_s32(v36, v37);
        float v38 = a3[1];
        v36.i32[0] = (__int32)a3[2];
        v35.f32[0] = a3[3];
        v34.f32[0] = (float)((float)(*(float *)v36.i32 - *a3) * 0.5) / (float)*((int *)this + 14);
        *(float *)v37.i32 = v34.f32[0] + *a3;
        *a3 = *(float *)v37.i32;
        *(float *)v36.i32 = *(float *)v36.i32 - v34.f32[0];
        a3[2] = *(float *)v36.i32;
        v63[0] = *(float *)v36.i32 - *(float *)v37.i32;
        v63[1] = *(float *)v37.i32;
        v63[2] = (float)(v35.f32[0] + v38) * 0.5;
        v63[3] = *(float *)v36.i32;
        (*(void (**)(int32x2_t *, void, uint64_t, uint64_t, float *))(*(void *)v5 + 1000))(v5, 0, 4, 1, v63);
        long long v54 = 0u;
        long long v62 = 0u;
        uint64_t v39 = *(void *)(*(void *)&v5[31] + 8);
        v60[0] = v5;
        v60[1] = v39;
        long long v61 = 0u;
        v60[2] = 0;
        WORD4(v61) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v60);
        while (1)
        {
          uint64_t result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v60, (int32x2_t *)&v54);
          if (!result) {
            break;
          }
          CA::OGL::Context::array_rect(v5, (float)v20, (float)v18, (float)v17, (float)v19);
          uint64_t v40 = *(void *)&v5[15] + 48 * *(void *)&v5[16];
          *(void *)(v40 - 176) = v51.i64[0];
          *(void *)(v40 - 128) = v51.i64[1];
          *(void *)(v40 - 8CASetDebugMessage("", 0) = v53.i64[0];
          *(void *)(v40 - 32) = v53.i64[1];
          uint64_t v41 = *(void *)(*(void *)&v5[2] + 8);
          uint64_t v42 = *(void *)&v5[15] + 48 * *(void *)&v5[16];
          *(void *)(v42 - 16CASetDebugMessage("", 0) = v41;
          *(void *)(v42 - 112) = v41;
          *(void *)(v42 - 64) = v41;
          *(void *)(v42 - 16) = v41;
        }
      }
    }
  }
  return result;
}

uint64_t CA::CG::anonymous namespace'::ShadingDelegate::read(uint64_t this, int a2, const CA::Bounds *a3, unsigned __int8 *a4)
{
  if (a2 == 13 || a2 == 11)
  {
    if (*(_DWORD *)a3) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = *((_DWORD *)a3 + 1) == 0;
    }
    BOOL v5 = v4 && *((_DWORD *)a3 + 3) == 1;
    if (v5 && *((_DWORD *)a3 + 2) == *(_DWORD *)(this + 56)) {
      return (***(uint64_t (****)(void, void, void, unsigned __int8 *))(this + 32))(*(void *)(this + 32), *(void *)(this + 8), *(void *)(this + 40), a4);
    }
  }
  return this;
}

void CA::CG::anonymous namespace'::ConicShadingDelegate::~ConicShadingDelegate(CA::CG::_anonymous_namespace_::ConicShadingDelegate *this)
{
}

uint64_t CA::CG::anonymous namespace'::RadialShadingDelegate::quad(CA::CG::_anonymous_namespace_::RadialShadingDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  BOOL v5 = (int32x2_t *)*((void *)this + 2);
  int32x2_t v83 = 0;
  int32x2_t v84 = 0;
  uint64_t result = CA::Shape::get_bounds(*(void *)(*(void *)&v5[31] + 8), (int *)&v83);
  unint64_t v8 = (int32x2_t *)v5[33];
  if (v8) {
    int v9 = v8 + 4;
  }
  else {
    int v9 = v5 + 25;
  }
  uint32x2_t v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v84);
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v11 = v9[1];
    uint32x2_t v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v13 = vmax_s32(v83, *v9);
      int32x2_t v14 = vmin_s32(vadd_s32(v83, v84), vadd_s32(*v9, v11));
      uint32x2_t v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(v14, v13));
      if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
      {
        double v16 = *((double *)this + 12);
        double v17 = *((double *)this + 13);
        if (v16 - v17 >= 0.0) {
          double v18 = v16 - v17;
        }
        else {
          double v18 = -(v16 - v17);
        }
        v19.i64[0] = v13.i32[0];
        v19.i64[1] = v13.i32[1];
        int v20 = v14.i32[0];
        int v21 = v14.i32[1];
        *(double *)&uint64_t v75 = (double)v14.i32[1];
        int32x2_t v78 = v13;
        int64x2_t v71 = (int64x2_t)vcvtq_f64_s64(v19);
        double v73 = (double)v14.i32[0];
        long long v81 = 0u;
        long long v82 = 0u;
        long long v80 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v80, *((double **)this + 3), v7);
        int8x16_t v22 = (const double *)((char *)this + 64);
        float v23 = (const double *)((char *)this + 72);
        float64x2_t v24 = (float64x2_t)vdupq_lane_s64(v82, 0);
        float64x2_t v25 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v82 + 1), 0);
        float64x2_t v26 = vld1q_dup_f64(v22);
        float64x2_t v27 = vld1q_dup_f64(v23);
        v28.f64[0] = v73;
        *(void *)&v29.f64[0] = v71.i64[0];
        v29.f64[1] = v73;
        *(void *)&v28.f64[1] = v71.i64[0];
        float64x2_t v30 = v28;
        float64x2_t v31 = (float64x2_t)vdupq_lane_s64(v75, 0);
        float64x2_t v32 = (float64x2_t)vdupq_laneq_s64(v71, 1);
        float64x2_t v33 = vmlaq_n_f64(vmlaq_n_f64(v24, v29, *(double *)&v80), v32, *(double *)&v81);
        float64x2_t v34 = vmlaq_n_f64(vmlaq_n_f64(v25, v29, *((double *)&v80 + 1)), v32, *((double *)&v81 + 1));
        float64x2_t v35 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v24, v30, *(double *)&v80), v31, *(double *)&v81), v26);
        float64x2_t v36 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(v25, v30, *((double *)&v80 + 1)), v31, *((double *)&v81 + 1)), v27);
        int32x2_t v37 = (int32x2_t)vcvt_f32_f64(vsubq_f64(v33, v26));
        int32x2_t v38 = (int32x2_t)vcvt_f32_f64(vsubq_f64(v34, v27));
        if (v18 < 0.000001) {
          double v17 = v17 + 0.000001;
        }
        float v39 = a3[2];
        float v40 = (float)((float)(v39 - *a3) * 0.5) / (float)*((int *)this + 14);
        float v41 = v40 + *a3;
        *a3 = v41;
        float v42 = v39 - v40;
        a3[2] = v42;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        uint64_t v43 = (float64x2_t *)*((void *)this + 6);
        if (v43)
        {
          int32x2_t v74 = v38;
          int32x2_t v76 = v37;
          float64x2_t v70 = v36;
          float64x2_t v72 = v35;
          CA::OGL::Context::device_float_color((CA::OGL::Context *)v5, (float *)&v95, *((CGColorSpaceRef *)this + 5), v43, v42);
          float64x2_t v36 = v70;
          float64x2_t v35 = v72;
          int32x2_t v38 = v74;
          int32x2_t v37 = v76;
          float v42 = a3[2];
          float v41 = *a3;
        }
        else
        {
          uint64_t v95 = 0;
          uint64_t v96 = 0;
        }
        int32x4_t v44 = (int32x4_t)vcvt_hight_f32_f64(v37, v35);
        int32x4_t v45 = (int32x4_t)vcvt_hight_f32_f64(v38, v36);
        int v46 = v78.i32[0];
        int v47 = v78.i32[1];
        float v48 = v42 - v41;
        float v91 = v42 - v41;
        float v92 = v41;
        float v93 = (float)(a3[3] + a3[1]) * 0.5;
        float v49 = 1.0 / (v17 - v16);
        if (*((unsigned char *)this + 114))
        {
          int32x4_t v50 = (int32x4_t)vmulq_n_f32((float32x4_t)v44, v49);
          int32x4_t v51 = (int32x4_t)vmulq_n_f32((float32x4_t)v45, v49);
          int32x4_t v77 = vzip1q_s32(v50, v51);
          int32x4_t v79 = vzip2q_s32(v50, v51);
          float64x2_t v52 = vmulq_n_f64(vsubq_f64(*((float64x2_t *)this + 5), *((float64x2_t *)this + 4)), v49);
          double v53 = vaddvq_f64(vmulq_f64(v52, v52));
          if (v53 < 0.00000001) {
            double v53 = 0.00000001;
          }
          double v54 = sqrt(v53);
          float32x2_t v86 = vcvt_f32_f64(vdivq_f64(v52, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0)));
          float v56 = 1.0;
          if (v49 < 0.0) {
            float v56 = -1.0;
          }
          *(float *)&unsigned int v55 = v16 * v49;
          *(void *)&long long v90 = __PAIR64__(LODWORD(v56), v55);
          *(float *)&unsigned int v57 = v54;
          *(float *)&unsigned int v58 = 1.0 / (v53 + -1.0);
          *((void *)&v90 + 1) = __PAIR64__(v58, v57);
          double v59 = 1.0 - v53;
          if (1.0 - v53 < 0.0) {
            double v59 = -(1.0 - v53);
          }
          BOOL v60 = v59 < 0.00001;
          double v61 = 0.0;
          if (v60) {
            double v61 = 1.0;
          }
          float v62 = v61;
          float v94 = v62;
          (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, long long *))(*(void *)v5 + 1000))(v5, 3, 4, 1, &v90);
          v63.i32[0] = *((unsigned __int8 *)this + 112);
          v63.i32[1] = *((unsigned __int8 *)this + 113);
          unint64_t v85 = (unint64_t)vbsl_s8((int8x8_t)vceqz_s32(v63), (int8x8_t)0x3F80000000000000, (int8x8_t)0x49742400C9742400);
          (*(void (**)(int32x2_t *, void, uint64_t, uint64_t, unint64_t *))(*(void *)v5 + 1000))(v5, 0, 4, 1, &v85);
        }
        else
        {
          int32x4_t v77 = vzip1q_s32(v44, v45);
          int32x4_t v79 = vzip2q_s32(v44, v45);
          float v64 = v48 * v49;
          float v65 = v41 - v16 * (float)(v48 * v49);
          float v91 = v64;
          float v92 = v65;
          float v94 = v42;
          if (*((unsigned char *)this + 112)) {
            float v41 = -1000000.0;
          }
          if (*((unsigned char *)this + 113)) {
            float v42 = 1000000.0;
          }
          unint64_t v85 = __PAIR64__(LODWORD(v42), LODWORD(v41));
          (*(void (**)(int32x2_t *, void, uint64_t, uint64_t, unint64_t *))(*(void *)v5 + 1000))(v5, 0, 2, 1, &v85);
        }
        (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v5 + 1000))(v5, 1, 4, 1, &v95);
        (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, float *))(*(void *)v5 + 1000))(v5, 2, 4, 1, &v91);
        long long v90 = 0u;
        long long v89 = 0u;
        float32x2_t v66 = *(float32x2_t *)(*(void *)&v5[31] + 8);
        unint64_t v85 = (unint64_t)v5;
        float32x2_t v86 = v66;
        long long v88 = 0u;
        uint64_t v87 = 0;
        WORD4(v88) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v85);
        while (1)
        {
          uint64_t result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v85, (int32x2_t *)&v90);
          if (!result) {
            break;
          }
          CA::OGL::Context::array_rect(v5, (float)v46, (float)v47, (float)v20, (float)v21);
          uint64_t v67 = *(void *)&v5[15] + 48 * *(void *)&v5[16];
          *(void *)(v67 - 176) = v77.i64[0];
          *(void *)(v67 - 128) = v77.i64[1];
          *(void *)(v67 - 8CASetDebugMessage("", 0) = v79.i64[0];
          *(void *)(v67 - 32) = v79.i64[1];
          uint64_t v68 = *(void *)(*(void *)&v5[2] + 8);
          uint64_t v69 = *(void *)&v5[15] + 48 * *(void *)&v5[16];
          *(void *)(v69 - 16CASetDebugMessage("", 0) = v68;
          *(void *)(v69 - 112) = v68;
          *(void *)(v69 - 64) = v68;
          *(void *)(v69 - 16) = v68;
        }
      }
    }
  }
  return result;
}

void CA::CG::anonymous namespace'::RadialShadingDelegate::~RadialShadingDelegate(CA::CG::_anonymous_namespace_::RadialShadingDelegate *this)
{
}

uint64_t CA::CG::anonymous namespace'::AxialShadingDelegate::quad(CA::CG::_anonymous_namespace_::AxialShadingDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  BOOL v5 = (int32x2_t *)*((void *)this + 2);
  int32x2_t v80 = 0;
  int32x2_t v81 = 0;
  uint64_t result = CA::Shape::get_bounds(*(void *)(*(void *)&v5[31] + 8), (int *)&v80);
  unint64_t v8 = (int32x2_t *)v5[33];
  if (v8) {
    int v9 = v8 + 4;
  }
  else {
    int v9 = v5 + 25;
  }
  uint32x2_t v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v81);
  if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v11 = v9[1];
    uint32x2_t v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v11);
    if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v13 = vmax_s32(v80, *v9);
      int32x2_t v14 = vsub_s32(vmin_s32(vadd_s32(v80, v81), vadd_s32(*v9, v11)), v13);
      uint32x2_t v15 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v14);
      if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) == 0)
      {
        int32x2_t v16 = v14;
        int v17 = v13.i32[0];
        int v18 = v13.i32[1];
        __int32 v19 = v14.i32[1];
        if (*((unsigned char *)this + 128))
        {
          int v20 = (double *)*((void *)this + 3);
        }
        else
        {
          double v60 = *((double *)this + 12);
          double v59 = *((double *)this + 13);
          *(double *)long long v82 = v60;
          *(double *)&v82[1] = v59;
          double v62 = *((double *)this + 14);
          double v61 = *((double *)this + 15);
          *(double *)&v82[2] = v62;
          *(double *)&v82[3] = v61;
          if (v62 < 0.0)
          {
            *(double *)long long v82 = v62 + v60;
            *(double *)&v82[2] = -v62;
          }
          int32x2_t v76 = v13;
          if (v61 < 0.0)
          {
            *(double *)&v82[1] = v61 + v59;
            *(double *)&v82[3] = -v61;
          }
          int v20 = (double *)*((void *)this + 3);
          CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v20, (double *)v82, v7);
          int8x16_t v63 = (int8x16_t)vceqzq_f64(*(float64x2_t *)&v82[2]);
          unint64_t v64 = vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v63, 1), v63).u64[0];
          int8x16_t v65 = 0uLL;
          if ((v64 & 0x8000000000000000) == 0)
          {
            int8x16_t v66 = vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)&v82[2]), (int8x16_t)vcgezq_f64(*(float64x2_t *)&v82[2]));
            if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v66), 1), v66).u64[0] & 0x8000000000000000) == 0)
            {
              int32x4_t v67 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)v82, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
              int8x16_t v65 = (int8x16_t)vuzp1q_s32(v67, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)v82, *(float64x2_t *)&v82[2]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v67));
            }
          }
          uint32x2_t v68 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v16);
          if ((vpmax_u32(v68, v68).u32[0] & 0x80000000) == 0)
          {
            int32x2_t v69 = (int32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
            uint32x2_t v70 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v69);
            if ((vpmax_u32(v70, v70).u32[0] & 0x80000000) != 0
              || (int32x2_t v71 = vadd_s32(*(int32x2_t *)v65.i8, v69),
                  int32x2_t v72 = vmax_s32(v76, *(int32x2_t *)v65.i8),
                  int32x2_t v73 = vsub_s32(vmin_s32(vadd_s32(v76, v16), v71), v72),
                  uint32x2_t v74 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v73),
                  (vpmax_u32(v74, v74).u32[0] & 0x80000000) != 0))
            {
              __int32 v19 = 0;
              v16.i32[0] = 0;
            }
            else
            {
              int v17 = v72.i32[0];
              int v18 = v72.i32[1];
              v16.i32[0] = v73.i32[0];
              __int32 v19 = v73.i32[1];
            }
          }
        }
        double v21 = (double)v18;
        double v22 = (double)(v16.i32[0] + v17);
        double v23 = (double)(v19 + v18);
        long long v78 = 0u;
        long long v79 = 0u;
        long long v77 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v77, v20, v7);
        double v24 = *(double *)&v78 * v23;
        double v25 = *((double *)&v78 + 1) * v23;
        double v26 = *((double *)this + 8);
        double v27 = *((double *)this + 9);
        double v28 = *((double *)this + 10) - v26;
        double v29 = *((double *)this + 11) - v27;
        float v30 = *a3;
        float v31 = a3[2];
        float v32 = (float)(v31 - *a3) / (v28 * v28 + v29 * v29);
        float v33 = a3[3] + a3[1];
        double v34 = *(double *)&v79 + *(double *)&v77 * (double)v17;
        double v35 = *((double *)&v79 + 1) + *((double *)&v77 + 1) * (double)v17;
        double v36 = v32;
        double v37 = *a3;
        double v38 = v37 + (v28 * (v34 + *(double *)&v78 * v21 - v26) + v29 * (v35 + *((double *)&v78 + 1) * v21 - v27)) * v36;
        double v39 = *(double *)&v79 + *(double *)&v77 * v22;
        double v40 = *((double *)&v79 + 1) + *((double *)&v77 + 1) * v22;
        double v41 = v37 + (v28 * (v39 + *(double *)&v78 * v21 - v26) + v29 * (v40 + *((double *)&v78 + 1) * v21 - v27)) * v36;
        double v42 = v37 + (v28 * (v39 + v24 - v26) + v29 * (v40 + v25 - v27)) * v36;
        double v43 = v37 + (v28 * (v34 + v24 - v26) + v29 * (v35 + v25 - v27)) * v36;
        int32x2_t v44 = v5[2];
        if (*(unsigned char *)(*(void *)&v44 + 16) == 43)
        {
          *(_OWORD *)long long v82 = 0uLL;
          float v45 = -1000000.0;
          if (!*((unsigned char *)this + 129)) {
            float v45 = v30;
          }
          float v46 = v30 + v31;
          if (*((unsigned char *)this + 130)) {
            float v46 = 1000000.0;
          }
          float v47 = *(float *)(*(void *)&v44 + 96);
          float v48 = *(float *)(*(void *)&v44 + 104);
          float v49 = v48 + (float)(v46 * v47);
          *(float *)&long long v83 = v48 + (float)(v47 * v45);
          *((float *)&v83 + 1) = v49;
          int32x4_t v50 = (float64x2_t *)*((void *)this + 6);
          if (v50) {
            CA::OGL::Context::device_float_color((CA::OGL::Context *)v5, (float *)v82, *((CGColorSpaceRef *)this + 5), v50, v49);
          }
          (*(void (**)(int32x2_t *, void, uint64_t, uint64_t, long long *))(*(void *)v5 + 1000))(v5, 0, 2, 1, &v83);
          (*(void (**)(int32x2_t *, uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 1000))(v5, 1, 4, 1, v82);
        }
        float v51 = v33 * 0.5;
        float v52 = v38;
        float v75 = v52;
        long long v83 = 0u;
        uint64_t v56 = *(void *)(*(void *)&v5[31] + 8);
        v82[0] = v5;
        v82[1] = v56;
        memset(&v82[2], 0, 40);
        LOWORD(v82[4]) = 256;
        CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v82);
        while (1)
        {
          uint64_t result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v82, (int32x2_t *)&v83);
          if (!result) {
            break;
          }
          CA::OGL::Context::array_rect(v5, (float)v17, (float)v18, (float)(v16.i32[0] + v17), (float)(v19 + v18));
          uint64_t v57 = *(void *)&v5[15] + 48 * *(void *)&v5[16];
          *(float *)(v57 - 176) = v75;
          *(float *)(v57 - 172) = v51;
          float v53 = v41;
          *(float *)(v57 - 128) = v53;
          *(float *)(v57 - 124) = v51;
          float v54 = v42;
          *(float *)(v57 - 8CASetDebugMessage("", 0) = v54;
          *(float *)(v57 - 76) = v51;
          float v55 = v43;
          *(float *)(v57 - 32) = v55;
          *(float *)(v57 - 28) = v51;
          uint64_t v58 = *(void *)(*(void *)&v5[2] + 8);
          *(void *)(v57 - 16CASetDebugMessage("", 0) = v58;
          *(void *)(v57 - 112) = v58;
          *(void *)(v57 - 64) = v58;
          *(void *)(v57 - 16) = v58;
        }
      }
    }
  }
  return result;
}

void CA::CG::anonymous namespace'::AxialShadingDelegate::~AxialShadingDelegate(CA::CG::_anonymous_namespace_::AxialShadingDelegate *this)
{
}

void CA::CG::anonymous namespace'::FunctionColormapGenerator::generate(CA::CG::_anonymous_namespace_::FunctionColormapGenerator *this, CA::CG::Renderer *a2, CGColorSpace *a3, unsigned __int8 *a4, int a5, char a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  *(_OWORD *)&v19[16] = 0u;
  *(_OWORD *)__int32 v19 = 0u;
  uint64_t v10 = *((void *)this + 1);
  uint64_t v17 = *((void *)a2 + 1);
  LOBYTE(v18) = (*((unsigned char *)a2 + 136) & 0x40) != 0;
  *((void *)&v18 + 1) = v10;
  *(void *)__int32 v19 = CGFunctionGetRangeDimension();
  *(_OWORD *)&v19[8] = xmmword_184998680;
  *(void *)&v19[24] = a3;
  LODWORD(v2CASetDebugMessage("", 0) = CGColorSpaceGetModel(a3);
  *((void *)&v20 + 1) = a4;
  LODWORD(v21) = a5;
  BYTE4(v21) = a6;
  DWORD2(v21) = 0;
  Domaiuint64_t n = CGFunctionGetDomain();
  if (Domain)
  {
    double v12 = *(double *)Domain;
    *(double *)&v19[8] = (*(double *)(Domain + 8) - *(double *)Domain) * 0.00048828125;
    *(double *)&v19[16] = v12;
  }
  if ((int)v21 >= 2)
  {
    int v13 = 0;
    int v14 = v21 - 1;
    do
    {
      if (v13 + 19 >= v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = (v13 + 19);
      }
      if (BYTE4(v21)) {
      else
      }
      int v14 = v21 - 1;
      int v13 = v15;
    }
    while ((int)v15 < (int)v21 - 1);
  }
}

uint64_t CA::CG::anonymous namespace'::FunctionSampler::sample(CA::CG::_anonymous_namespace_::FunctionSampler *this, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  double v4 = *((double *)this + 4);
  double v5 = *((double *)this + 5);
  double v28 = v5 + v4 * ((double)a2 + 0.5);
  if (!*((unsigned char *)this + 8))
  {
    if (a2)
    {
      int v6 = *((_DWORD *)this + 18);
      if (v6 - 1 != a2) {
        goto LABEL_7;
      }
      double v7 = (double)v6;
    }
    else
    {
      double v7 = 0.0;
    }
    double v28 = v5 + v7 * v4;
  }
LABEL_7:
  memset(&v29, 0, 32);
  CGFunctionEvaluate();
  unint64_t v9 = *((void *)this + 3);
  if (*((_DWORD *)this + 14) == 1)
  {
    if (v9 >= 4) {
      goto LABEL_13;
    }
    uint64_t v10 = 3;
  }
  else
  {
    if (v9 > 1) {
      goto LABEL_13;
    }
    uint64_t v10 = 1;
  }
  v29.f64[v10] = 1.0;
LABEL_13:
  int32x2_t v11 = *(CA::OGL::Context **)this;
  double v12 = (CGColorSpace *)*((void *)this + 6);
  if (*((unsigned char *)this + 76))
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t result = CA::OGL::Context::device_float_color(v11, (float *)&v30, v12, &v29, v8);
    _S2 = HIDWORD(v31);
    _S0 = *((float *)&v31 + 1) * *(float *)&v30;
    _S1 = *((float *)&v30 + 1) * *((float *)&v31 + 1);
    _S3 = *(float *)&v31 * *((float *)&v31 + 1);
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
      FCVT            H3, S3
      FCVT            H2, S2
    }
    uint64_t v22 = (_WORD *)(*((void *)this + 8) + 8 * a2);
    *uint64_t v22 = LOWORD(_S0);
    v22[1] = LOWORD(_S1);
    v22[2] = LOWORD(_S3);
    v22[3] = _S2;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    CA::OGL::Context::device_float_color(v11, (float *)&v30, v12, &v29, v8);
    _S2 = HIDWORD(v31);
    _S0 = *((float *)&v31 + 1) * *(float *)&v30;
    _S1 = *((float *)&v30 + 1) * *((float *)&v31 + 1);
    _S3 = *(float *)&v31 * *((float *)&v31 + 1);
    __asm { FCVT            H0, S0 }
    v27[0] = LOWORD(_S0);
    __asm { FCVT            H0, S1 }
    v27[1] = LOWORD(_S0);
    __asm { FCVT            H0, S3 }
    v27[2] = LOWORD(_S0);
    __asm { FCVT            H0, S2 }
    v27[3] = LOWORD(_S0);
    uint64_t result = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)v27);
    *(_DWORD *)(*((void *)this + 8) + 4 * a2) = result;
  }
  ++*((_DWORD *)this + 20);
  return result;
}

float32_t CA::CG::anonymous namespace'::FunctionSampler::bisect_fp16(CA::CG::_anonymous_namespace_::FunctionSampler *this, int a2, uint64_t a3, float32x4_t a4)
{
  while (1)
  {
    unsigned int v4 = a3 - a2;
    if ((int)a3 - a2 < 2) {
      break;
    }
    uint64_t v5 = a3;
    int v6 = a2;
    double v7 = this;
    uint64_t v8 = v4 >> 1;
    uint64_t v9 = v8 + a2;
    uint64_t v10 = *((void *)v7 + 8);
    float16x4_t v11 = *(float16x4_t *)(v10 + 8 * v6);
    unint64_t v12 = *(void *)(v10 + 8 * v9);
    float16x4_t v13 = *(float16x4_t *)(v10 + 8 * (int)v5);
    _H2 = v12;
    _S3 = v12 >> 16;
    int16x4_t v16 = (int16x4_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v12), (uint64x2_t)xmmword_184998690));
    float16x4_t v17 = (float16x4_t)vuzp1_s16(v16, v16);
    float v18 = 0.5;
    if (v8 != v5 - v9) {
      float v18 = (float)(int)v8 / (float)(int)v4;
    }
    float32x4_t v19 = vcvtq_f32_f16(v11);
    a4 = vcvtq_f32_f16(v13);
    _D5 = (int32x2_t)vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v19, 1.0 - v18), a4, v18));
    __asm
    {
      FCVT            S2, H2
      FCVT            S6, H5
      FCVT            S3, H3
    }
    _H7 = _D5.i16[1];
    __asm { FCVT            S7, H7 }
    float32x2_t v30 = vabd_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v17), (float32x2_t)*(_OWORD *)&vcvtq_f32_f16((float16x4_t)vdup_lane_s32(_D5, 1)));
    float32x2_t v31 = (float32x2_t)vdup_lane_s32((int32x2_t)v30, 0);
    v31.i32[0] = vabds_f32(_S2, _S6);
    v30.i32[0] = vabds_f32(_S3, _S7);
    int8x8_t v32 = vbsl_s8((int8x8_t)vcgt_f32(v31, v30), (int8x8_t)v31, (int8x8_t)v30);
    if (*(float *)v32.i32 <= *(float *)&v32.i32[1]) {
      v32.i32[0] = v32.i32[1];
    }
    if (*(float *)v32.i32 <= 0.031373)
    {
      if (*(void *)&v11 == v12)
      {
        if (v4 >= 4)
        {
          uint64_t v33 = v6 + 1;
          do
            *(float16x4_t *)(v10 + 8 * v33++) = v11;
          while (v33 < v9);
        }
      }
      else
      {
        float16x4_t v11 = *(float16x4_t *)(v10 + 8 * v9);
        if (v4 >= 4)
        {
          uint64_t v34 = 0;
          uint64_t v35 = v6 + 1;
          float32x4_t v36 = vcvtq_f32_f16((float16x4_t)v12);
          do
          {
            float v37 = (float)(v34 + 1) * (float)(1.0 / (float)(int)v8);
            *(float16x4_t *)(v10 + 8 * v35 + 8 * v34) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v19, 1.0 - v37), v36, v37));
            uint64_t v38 = v35 + ++v34;
          }
          while (v38 < v9);
          float16x4_t v11 = (float16x4_t)v12;
        }
      }
      int v39 = v9 + 1;
      if (*(void *)&v11 == *(void *)&v13)
      {
        if (v39 < (int)v5)
        {
          uint64_t v40 = (int)v5 - (uint64_t)v39;
          double v41 = (unint64_t *)(v10 + 8 * v39);
          do
          {
            *v41++ = v12;
            --v40;
          }
          while (v40);
        }
      }
      else if (v39 < (int)v5)
      {
        uint64_t v42 = 0;
        float32x4_t v43 = vcvtq_f32_f16((float16x4_t)v12);
        uint64_t v44 = v10 + 8 * v39;
        do
        {
          float v45 = (float)(v42 + 1) * (float)(1.0 / (float)(v5 - v9));
          *(float16x4_t *)(v44 + 8 * v42++) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v43, 1.0 - v45), a4, v45));
        }
        while ((int)v5 - (uint64_t)v39 != v42);
      }
      return a4.f32[0];
    }
    this = v7;
    a2 = v9;
    a3 = v5;
  }
  return a4.f32[0];
}

uint64_t CA::CG::anonymous namespace'::FunctionSampler::bisect(uint64_t this, signed int a2, signed int a3)
{
  unsigned int v3 = a3 - a2;
  if (a3 - a2 >= 2)
  {
    signed int v5 = a2;
    int v6 = (CA::CG::_anonymous_namespace_::FunctionSampler *)this;
    uint64_t v7 = a3;
    while (1)
    {
      uint64_t v8 = v3 >> 1;
      uint64_t v9 = v8 + v5;
      int v12 = a3 - v9;
      if (v8 == a3 - v9) {
        int v13 = 128;
      }
      else {
        int v13 = (int)(float)((float)((float)((float)(int)v8 * 256.0) / (float)(int)v3) + 0.5);
      }
      uint64_t v14 = *((void *)v6 + 8);
      unsigned int v15 = *(_DWORD *)(v14 + 4 * v5);
      unsigned int v16 = *(_DWORD *)(v14 + 4 * v9);
      unsigned int v17 = *(_DWORD *)(v14 + 4 * v7);
      int v18 = v15 & 0xFF00FF;
      this = (v15 >> 8) & 0xFF00FF;
      int v19 = v17 & 0xFF00FF;
      int v20 = (v17 >> 8) & 0xFF00FF;
      unsigned int v21 = v18 + ((v13 * ((v17 & 0xFF00FF) - v18)) >> 8);
      unsigned int v22 = v13 * (v20 - this) + (this << 8);
      int v23 = HIBYTE(v16) - HIBYTE(v22);
      int v24 = BYTE2(v16) - BYTE2(v21);
      unsigned int v25 = BYTE1(v16) - BYTE1(v22);
      int v26 = v16 - v21;
      if (v23 < 0) {
        int v23 = -v23;
      }
      if (v24 < 0) {
        int v24 = -v24;
      }
      if ((v25 & 0x80000000) != 0) {
        unsigned int v25 = -v25;
      }
      if (v26 < 0) {
        int v26 = -v26;
      }
      if (v23 <= v24) {
        int v23 = v24;
      }
      if (v25 <= v26) {
        unsigned int v25 = v26;
      }
      if (v23 > v25) {
        unsigned int v25 = v23;
      }
      if (v25 < 9) {
        break;
      }
      unsigned int v3 = a3 - v9;
      v5 += v8;
      if (v12 < 2) {
        return this;
      }
    }
    unsigned int v27 = v16 >> 8;
    if (v15 == v16)
    {
      if (v3 >= 4)
      {
        uint64_t v28 = v5 + 1;
        do
          *(_DWORD *)(v14 + 4 * v28++) = v15;
        while (v28 < v9);
      }
    }
    else if (v3 >= 4)
    {
      unint64_t v29 = 0;
      int v30 = this << 8;
      signed int v31 = v5 + 1;
      this = (v27 & 0xFF00FF) - this;
      int v32 = (v16 & 0xFF00FF) - v18;
      if (v9 <= v5 + 1 + 1) {
        uint64_t v33 = v31 + 1;
      }
      else {
        uint64_t v33 = v8 + v5;
      }
      uint64_t v34 = v33 - v31;
      uint64x2_t v35 = (uint64x2_t)vdupq_n_s64(v34 - 1);
      unint64_t v36 = (v34 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      int32x4_t v37 = vaddq_s32(vdupq_n_s32(v31), (int32x4_t)xmmword_184997FC0);
      int32x4_t v38 = vdupq_n_s32(v5);
      v10.f32[0] = 256.0 / (float)(int)v8;
      float32x4_t v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      int v39 = (_DWORD *)(v14 + 4 * v31 + 8);
      v40.i64[0] = 0x400000004;
      v40.i64[1] = 0x400000004;
      do
      {
        int8x16_t v41 = (int8x16_t)vdupq_n_s64(v29);
        *(int32x2_t *)v11.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v35, (uint64x2_t)vorrq_s8(v41, (int8x16_t)xmmword_184997FD0)));
        v42.i64[0] = 0x3F0000003F000000;
        v42.i64[1] = 0x3F0000003F000000;
        uint32x4_t v43 = vcvtq_u32_f32(vmlaq_f32(v42, vcvtq_f32_s32(vsubq_s32(v37, v38)), v10));
        if (vmovn_s32(v11).u8[0]) {
          *(v39 - 2) = (v18 + ((v32 * v43.i32[0]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[0]) & 0xFF00FF00;
        }
        int32x2_t v44 = (int32x2_t)vmovn_s32(v11);
        if (v44.i8[2]) {
          *(v39 - 1) = (v18 + ((v32 * v43.i32[1]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[1]) & 0xFF00FF00;
        }
        int64x2_t v45 = (int64x2_t)vcgeq_u64(v35, (uint64x2_t)vorrq_s8(v41, (int8x16_t)xmmword_184998240));
        int32x4_t v11 = vmovn_hight_s64(v44, v45);
        if (vmovn_s32(v11).i32[1]) {
          *int v39 = (v18 + ((v32 * v43.i32[2]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[2]) & 0xFF00FF00;
        }
        if (vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v45, v45)).i8[6]) {
          v39[1] = (v18 + ((v32 * v43.i32[3]) >> 8)) & 0xFF00FF | (v30 + this * v43.i32[3]) & 0xFF00FF00;
        }
        v29 += 4;
        int32x4_t v37 = vaddq_s32(v37, v40);
        v39 += 4;
      }
      while (v36 != v29);
    }
    signed int v46 = v9 + 1;
    if (v16 == v17)
    {
      if (v46 < a3)
      {
        uint64_t v47 = v7 - v46;
        float v48 = (unsigned int *)(v14 + 4 * v46);
        do
        {
          *v48++ = v16;
          --v47;
        }
        while (v47);
      }
    }
    else if (v46 < a3)
    {
      unint64_t v49 = 0;
      uint64_t v50 = v7 - v46;
      uint64x2_t v51 = (uint64x2_t)vdupq_n_s64(v50 - 1);
      int v52 = v16 & 0xFF00FF;
      int v53 = v27 & 0xFF00FF;
      int v54 = v19 - v52;
      int v55 = v20 - v53;
      int v56 = v53 << 8;
      unint64_t v57 = (v50 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      int32x4_t v58 = vaddq_s32(vdupq_n_s32(v46), (int32x4_t)xmmword_184997FC0);
      int32x4_t v59 = vdupq_n_s32(v9);
      v10.f32[0] = 256.0 / (float)v12;
      float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      double v61 = (unsigned __int32 *)(v14 + 4 * v46 + 8);
      v62.i64[0] = 0x400000004;
      v62.i64[1] = 0x400000004;
      do
      {
        int8x16_t v63 = (int8x16_t)vdupq_n_s64(v49);
        *(int32x2_t *)v11.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v51, (uint64x2_t)vorrq_s8(v63, (int8x16_t)xmmword_184997FD0)));
        v64.i64[0] = 0x3F0000003F000000;
        v64.i64[1] = 0x3F0000003F000000;
        uint32x4_t v65 = vcvtq_u32_f32(vmlaq_f32(v64, vcvtq_f32_s32(vsubq_s32(v58, v59)), v60));
        if (vmovn_s32(v11).u8[0]) {
          *(v61 - 2) = (v52 + ((v54 * v65.i32[0]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[0]) & 0xFF00FF00;
        }
        int32x2_t v66 = (int32x2_t)vmovn_s32(v11);
        if (v66.i8[2]) {
          *(v61 - 1) = (v52 + ((v54 * v65.i32[1]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[1]) & 0xFF00FF00;
        }
        int64x2_t v67 = (int64x2_t)vcgeq_u64(v51, (uint64x2_t)vorrq_s8(v63, (int8x16_t)xmmword_184998240));
        int32x4_t v11 = vmovn_hight_s64(v66, v67);
        if (vmovn_s32(v11).i32[1]) {
          *double v61 = (v52 + ((v54 * v65.i32[2]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[2]) & 0xFF00FF00;
        }
        if (vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v67, v67)).i8[6]) {
          v61[1] = (v52 + ((v54 * v65.i32[3]) >> 8)) & 0xFF00FF | (v56 + v55 * v65.i32[3]) & 0xFF00FF00;
        }
        v49 += 4;
        int32x4_t v58 = vaddq_s32(v58, v62);
        v61 += 4;
      }
      while (v57 != v49);
    }
  }
  return this;
}

uint64_t ___ZN2CA2CG12_GLOBAL__N_113allows_ditherEv_block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"CADisableShadingDither", (CFStringRef)*MEMORY[0x1E4F1D3D8], 0);
  return result;
}

char *CA::CG::DrawShading::clipping_planes(CA::CG::DrawShading *this, float64x2_t *a2)
{
  if (CGShadingGetType() != 1) {
    return 0;
  }
  uint64_t Descriptor = CGShadingGetDescriptor();
  unsigned int v4 = (const CGPoint *)*(unsigned __int8 *)(Descriptor + 16);
  int v5 = *(unsigned __int8 *)(Descriptor + 40);
}

char *CA::CG::anonymous namespace'::axial_clipping_planes(float64x2_t *this, CA::CG::Renderer *a2, const CGPoint *a3, const CGPoint *a4, int a5)
{
  int v6 = (int)a4;
  uint64_t v7 = 0;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v8 = (__int128)*a3;
  long long v50 = *(_OWORD *)a2;
  long long v51 = v8;
  float64x2_t v9 = this[2];
  float64x2_t v10 = this[3];
  float64x2_t v11 = this[4];
  char v12 = 1;
  do
  {
    char v13 = v12;
    *(&v50 + v7) = (__int128)vmlaq_n_f64(vmlaq_n_f64(v11, v9, *((double *)&v50 + 2 * v7)), v10, *((double *)&v50 + 2 * v7 + 1));
    uint64_t v7 = 1;
    char v12 = 0;
  }
  while ((v13 & 1) != 0);
  memset(v49, 0, sizeof(v49));
  double v14 = *(double *)&v50;
  double v15 = *(double *)&v51 - *(double *)&v50;
  if (*(double *)&v51 - *(double *)&v50 == 0.0)
  {
    uint64_t v25 = 0;
    double v18 = *((double *)&v50 + 1);
    double v24 = *((double *)&v51 + 1) - *((double *)&v50 + 1);
    char v26 = 1;
    double v27 = -v15 / (*((double *)&v51 + 1) - *((double *)&v50 + 1));
    do
    {
      char v28 = v26;
      unint64_t v29 = (char *)v49 + 24 * v25;
      *(double *)unint64_t v29 = v27;
      *((void *)v29 + 1) = 0xBFF0000000000000;
      *((double *)v29 + 2) = *((double *)&v50 + 2 * v25 + 1) - *((double *)&v50 + 2 * v25) * v27;
      uint64_t v25 = 1;
      char v26 = 0;
    }
    while ((v28 & 1) != 0);
  }
  else
  {
    uint64_t v16 = 0;
    double v17 = *((double *)&v51 + 1);
    double v18 = *((double *)&v50 + 1);
    char v19 = 1;
    double v20 = (*((double *)&v50 + 1) - *((double *)&v51 + 1)) / v15;
    do
    {
      char v21 = v19;
      unsigned int v22 = (double *)v49 + 3 * v16;
      *unsigned int v22 = -1.0;
      double v23 = *((double *)&v50 + 2 * v16) - *((double *)&v50 + 2 * v16 + 1) * v20;
      v22[1] = v20;
      v22[2] = v23;
      uint64_t v16 = 1;
      char v19 = 0;
    }
    while ((v21 & 1) != 0);
    double v24 = v17 - v18;
  }
  uint64_t v30 = 0;
  double v31 = v14 + v15 * 0.5;
  double v32 = v18 + v24 * 0.5;
  char v33 = 1;
  do
  {
    char v34 = v33;
    uint64x2_t v35 = (double *)v49 + 3 * v30;
    double v36 = v35[1];
    double v37 = v35[2];
    if (v37 + *v35 * v31 + v36 * v32 < 0.0)
    {
      *uint64x2_t v35 = -*v35;
      v35[1] = -v36;
      v35[2] = -v37;
    }
    char v33 = 0;
    uint64_t v30 = 1;
  }
  while ((v34 & 1) != 0);
  int v38 = 0;
  uint64_t v39 = 0;
  int32x4_t v40 = 0;
  int v41 = 1;
  do
  {
    char v42 = v41;
    if (((v38 | v6) & 1) == 0 || ((v41 | a5) & 1) == 0)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      int32x2_t v44 = (char *)malloc_type_zone_malloc(malloc_zone, 0x20uLL, 0x8BB15036uLL);
      *(void *)int32x2_t v44 = v40;
      if (v40) {
        int v45 = *((_DWORD *)v40 + 2);
      }
      else {
        int v45 = 0;
      }
      *((_DWORD *)v44 + 2) = v45 + 1;
      signed int v46 = (float64x2_t *)((char *)v49 + 24 * v39);
      *(float32x2_t *)(v44 + 12) = vcvt_f32_f64(*v46);
      *((_DWORD *)v44 + 5) = 0;
      float v47 = v46[1].f64[0];
      *((float *)v44 + 6) = v47;
      int32x4_t v40 = v44;
    }
    int v41 = 0;
    int v38 = 1;
    uint64_t v39 = 1;
  }
  while ((v42 & 1) != 0);
  return v40;
}

uint64_t CA::CG::DrawShading::supports_complex_blend_modes(CA::CG::DrawShading *this)
{
  return 0;
}

uint64_t CA::CG::DrawShading::color_type(CA::CG::_anonymous_namespace_ **this, CA::CG::Renderer *a2)
{
    return 8;
  else {
    return 0;
  }
}

uint64_t CA::CG::DrawShading::debug_color(CA::CG::DrawShading *this)
{
  return 1967734240;
}

uint64_t CA::CG::DrawShading::shape_extent_contains(CA::CG::DrawShading *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  return 1;
}

int64x2_t CA::CG::DrawShading::compute_dod(CA::CG::DrawShading *this, int64x2_t *a2)
{
  int64x2_t result = vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  return result;
}

void CA::CG::DrawShading::~DrawShading(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED027918;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CA::CG::Renderer *)&unk_1ED027918;
  CA::CG::Renderer::release_object(this[14], a2);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

uint64_t CA::CG::DrawGradient::draw_shape_and_color(CA::CG::DrawGradient *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawGradient *, CA::CG::Renderer *))(*(void *)this + 168))(this, a2);
}

uint64_t CA::CG::DrawGradient::supports_complex_blend_modes(CA::CG::DrawGradient *this)
{
  return 0;
}

uint64_t CA::CG::DrawGradient::color_type(CA::CG::DrawGradient *this, CA::CG::Renderer *a2)
{
  char v5 = 1;
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  if (CGColorSpaceGetModel(ColorSpace) > kCGColorSpaceModelRGB) {
    char v5 = 0;
  }
  else {
    CGGradientApply();
  }
  if ((~*((_DWORD *)this + 25) & 0x3000000) != 0) {
    return 0;
  }
  if (!v5) {
    return 8;
  }
  if (*((short float *)this + 47) == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))) {
    return 12;
  }
  return 8;
}

BOOL *CA::CG::DrawGradient::color_type(CA::CG::Renderer &)const::$_1::__invoke(BOOL *result, uint64_t a2)
{
  BOOL v3 = *(double *)(a2 + 24) == 1.0 && *result;
  _DWORD *result = v3;
  return result;
}

BOOL *CA::CG::DrawGradient::color_type(CA::CG::Renderer &)const::$_0::__invoke(BOOL *result, uint64_t a2)
{
  BOOL v3 = *(double *)(a2 + 8) == 1.0 && *result;
  _DWORD *result = v3;
  return result;
}

uint64_t CA::CG::DrawGradient::debug_color(CA::CG::DrawGradient *this)
{
  return 4002524128;
}

BOOL CA::CG::DrawGradient::shape_extent_contains(CA::CG::DrawGradient *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  return (~*((_DWORD *)this + 25) & 0x3000000) == 0;
}

uint64_t CA::CG::DrawGradient::may_flush()
{
  return 1;
}

int64x2_t CA::CG::DrawGradient::compute_dod(CA::CG::DrawGradient *this, int64x2_t *a2)
{
  int64x2_t result = vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  return result;
}

void CA::CG::DrawGradient::~DrawGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

void CA::CG::DrawLinearGradient::draw_color(CA::CG::DrawLinearGradient *this, CA::CG::Renderer *a2)
{
  MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(v4 + 103) & 4) != 0)
  {
    uint64_t v10 = *(void *)(v2 + 8);
    if (CGGradientUsesPremultipliedInterpolation()) {
      char v11 = 0;
    }
    else {
      char v11 = 13;
    }
    *(unsigned char *)(*(void *)(v10 + 16) + 16) = v11;
    {
      *(unsigned char *)(*(void *)(v10 + 16) + 481) |= 2u;
      *(_DWORD *)(*(void *)(v10 + 16) + 352) = 1065353216;
    }
    memset(v105, 0, sizeof(v105));
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    long long v99 = 0u;
    int32x2_t v12 = *(int32x2_t *)(v5 + 112);
    double v13 = *(double *)(v5 + 120);
    double v14 = *(double *)(v5 + 128);
    double v15 = *(double *)(v5 + 136);
    double v16 = *(double *)(v5 + 144);
    unsigned int v17 = *(_DWORD *)(v5 + 100);
    int v18 = HIBYTE(v17) & 1;
    int v19 = (v17 >> 25) & 1;
    v93[0] = *(int32x2_t *)(v3 + 8);
    v93[1] = v12;
    v93[2] = (int32x2_t)CGGradientGetColorSpace();
    v93[3] = (int32x2_t)&v109;
    int v94 = 0;
    char v95 = 1;
    char v96 = v18;
    char v97 = v19;
    char v98 = 1;
    *(void *)&long long v100 = 0xFFEFFFFFFFFFFFFFLL;
    CA::Shape::get_bounds(*(void *)(*(void *)(*(void *)v93 + 248) + 8), (int *)&v105[8]);
    char v21 = *(int32x2_t **)(*(void *)v93 + 264);
    if (v21) {
      unsigned int v22 = v21 + 4;
    }
    else {
      unsigned int v22 = (int32x2_t *)(*(void *)v93 + 200);
    }
    uint32x2_t v23 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v105[16]);
    if ((vpmax_u32(v23, v23).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v24 = v22[1];
      uint32x2_t v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v24);
      if ((vpmax_u32(v25, v25).u32[0] & 0x80000000) != 0
        || (int32x2_t v26 = vadd_s32(*v22, v24),
            int32x2_t v27 = vmax_s32(*(int32x2_t *)&v105[8], *v22),
            int32x2_t v28 = vmin_s32(vadd_s32(*(int32x2_t *)&v105[8], *(int32x2_t *)&v105[16]), v26),
            int32x2_t v29 = vsub_s32(v28, v27),
            uint32x2_t v30 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v29),
            (vpmax_u32(v30, v30).u32[0] & 0x80000000) != 0))
      {
        *(void *)&v105[16] = 0;
      }
      else
      {
        *(int32x2_t *)&long long v31 = v27;
        *((int32x2_t *)&v31 + 1) = v29;
        *(_OWORD *)&v105[8] = v31;
        double v32 = v15 - v13;
        double v33 = v16 - v14;
        double v35 = *(double *)(v3 + 32);
        char v34 = (double *)(v3 + 32);
        double v37 = v34[1];
        double v36 = v34[2];
        double v38 = v35 * v13 + v36 * v14;
        double v86 = v34[4];
        double v87 = sqrt(v32 * v32 + v33 * v33);
        double v39 = v34[3];
        double v40 = v38 + v86;
        *(double *)&long long v31 = v37 * v13 + v39 * v14;
        double v41 = *(double *)&v31 + v34[5];
        double v91 = v36;
        double v92 = v35;
        double v84 = v35 * v15 + v36 * v16;
        double v85 = v34[5];
        double v89 = v39;
        double v90 = v37;
        double v42 = v37 * v15 + v39 * v16;
        *(double *)&long long v101 = v38 + v86;
        *((double *)&v101 + 1) = v41;
        double v43 = v84 - v38;
        *(double *)&long long v102 = v84 - v38;
        *((double *)&v102 + 1) = v42 - *(double *)&v31;
        double v88 = v42 - *(double *)&v31;
        *(double *)uint64_t v110 = (double)v27.i32[0];
        *(double *)&v110[1] = (double)v27.i32[1];
        v44.i64[0] = v28.i32[0];
        v44.i64[1] = v28.i32[1];
        float64x2_t v45 = vcvtq_f64_s64(v44);
        v110[2] = *(float32x2_t *)&v45.f64[0];
        *(double *)&v110[3] = (double)v27.i32[1];
        float64x2_t v111 = v45;
        double v112 = (double)v27.i32[0];
        float64_t v113 = v45.f64[1];
        long long v107 = 0u;
        long long v108 = 0u;
        long long v106 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v106, v34, v20);
        uint64_t v46 = 0;
        double v47 = -INFINITY;
        double v48 = INFINITY;
        double v49 = 0.0;
        do
        {
          double v51 = *(double *)&v110[v46];
          double v52 = *(double *)&v110[v46 + 1];
          double v53 = vabdd_f64(v52, v41) + vabdd_f64(v51, v40);
          double v50 = 1.0 / (v87 * v87);
          double v54 = ((*(double *)&v108 - v13 + v51 * *(double *)&v106 + v52 * *(double *)&v107) * v32
               + (*((double *)&v108 + 1) - v14 + v51 * *((double *)&v106 + 1) + v52 * *((double *)&v107 + 1)) * v33)
              * v50;
          if (v48 >= v54) {
            double v48 = ((*(double *)&v108 - v13 + v51 * *(double *)&v106 + v52 * *(double *)&v107) * v32
          }
                 + (*((double *)&v108 + 1) - v14 + v51 * *((double *)&v106 + 1) + v52 * *((double *)&v107 + 1)) * v33)
                * v50;
          double v55 = vabdd_f64(v52, v85 + v42) + vabdd_f64(v51, v86 + v84);
          if (v47 <= v54) {
            double v47 = v54;
          }
          if (v53 > v55) {
            double v55 = v53;
          }
          if (v49 <= v55) {
            double v49 = v55;
          }
          v46 += 2;
        }
        while (v46 != 8);
        double v56 = -(v92 * v33 - v91 * v32);
        double v57 = 1.0 / sqrt(v43 * v43 + *((double *)&v102 + 1) * *((double *)&v102 + 1));
        double v58 = -(v90 * v33 - v89 * v32);
        *(double *)&long long v99 = v48;
        *((double *)&v99 + 1) = v47;
        double v59 = 1.0 / sqrt(v56 * v56 + v58 * v58);
        double v60 = v59 * v56;
        double v61 = v59 * v58;
        *(double *)&long long v103 = v49 * (v59 * v56);
        *((double *)&v103 + 1) = v49 * (v59 * v58);
        double v62 = -(v59 * v58);
        double v63 = -(v57 * v43 * (v59 * v58) - v57 * v88 * (v59 * v56));
        double v64 = -(v59 * v56);
        if (v63 >= 0.0) {
          double v64 = v60;
        }
        else {
          double v62 = v61;
        }
        double v65 = (double)(*(_DWORD *)&v105[20] + *(_DWORD *)&v105[16]);
        *(double *)&long long v104 = v62 * v65;
        *((double *)&v104 + 1) = v64 * v65;
        float16x4_t v66 = *(float16x4_t *)(*(void *)(*(void *)v93 + 16) + 8);
        *(float16x4_t *)double v105 = v66;
        if (*(short float *)&v66.i16[3] != COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
        {
          __asm { FCMP            H8, #0 }
          if (!_ZF && (CGGradientUsesPremultipliedInterpolation() & 1) == 0)
          {
            v72.i16[1] = 15360;
            v72.i32[1] = 1006648320;
            *(short float *)v72.i16 = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) / _H8;
            float16x4_t v73 = (float16x4_t)vzip1_s16(v72, v72);
            *(short float *)&v73.i16[2] = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) / _H8;
            *(float16x4_t *)double v105 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v73), vcvtq_f32_f16(v66)));
          }
        }
      }
    }
    CA::Shape::get_bounds(*(void *)(*(void *)(*(void *)v93 + 248) + 8), (int *)&v105[8]);
    uint32x2_t v74 = *(int32x2_t **)(*(void *)v93 + 264);
    if (v74) {
      float v75 = v74 + 4;
    }
    else {
      float v75 = (int32x2_t *)(*(void *)v93 + 200);
    }
    uint32x2_t v76 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v105[16]);
    if ((vpmax_u32(v76, v76).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v77 = v75[1];
      uint32x2_t v78 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v77);
      if ((vpmax_u32(v78, v78).u32[0] & 0x80000000) == 0)
      {
        *(int32x2_t *)&long long v79 = vmax_s32(*(int32x2_t *)&v105[8], *v75);
        int32x2_t v80 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v105[8], *(int32x2_t *)&v105[16]), vadd_s32(*v75, v77)), *(int32x2_t *)&v79);
        uint32x2_t v81 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v80);
        if ((vpmax_u32(v81, v81).u32[0] & 0x80000000) == 0)
        {
          *((int32x2_t *)&v79 + 1) = v80;
          *(_OWORD *)&v105[8] = v79;
          CGGradientApply();
          if (v97)
          {
            if (*(double *)&v99 <= 1.0)
            {
              if (*((double *)&v99 + 1) > 1.0)
              {
                v110[0] = *(float32x2_t *)((char *)&v100 + 8);
              }
            }
            else
            {
              v110[0] = *(float32x2_t *)((char *)&v100 + 8);
            }
          }
          uint64_t v82 = *(void *)(*(void *)v93 + 16);
          if ((*(unsigned char *)(v82 + 481) & 1) != 0 && ((unsigned int v83 = *(unsigned __int8 *)(v82 + 480), v83 < 2) || v83 == 3 && v98))
          {
            *(unsigned char *)(v82 + 481) &= ~1u;
            *(unsigned char *)(*(void *)(*(void *)v93 + 16) + 481) |= 1u;
          }
          else
          {
          }
        }
      }
    }
    *(unsigned char *)(*(void *)(v10 + 16) + 481) &= ~2u;
    *(unsigned char *)(*(void *)(v10 + 16) + 16) = 0;
  }
  else
  {
    ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
    Functiouint64_t n = (CGFunction *)CGGradientGetFunction();
    CGShadingRef Axial = CGShadingCreateAxial(ColorSpace, *(CGPoint *)(v5 + 120), *(CGPoint *)(v5 + 136), Function, *(_DWORD *)(v5 + 100) & 0x1000000, (*(_DWORD *)(v5 + 100) & 0x2000000) != 0);
    if (Axial)
    {
      float64x2_t v9 = Axial;
      CA::CG::fill_shading(v3);
      CGShadingRelease(v9);
    }
  }
}

float CA::CG::anonymous namespace'::GradientStripeRenderer::draw_quad(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unsigned int v3 = *(_DWORD *)(a1 + 32);
  uint64_t v4 = v2 + 48 * v3;
  uint64_t v5 = v2 + 48 * (v3 + 1);
  uint64_t v6 = v2 + 48 * (v3 + 2);
  *(_DWORD *)(a1 + 32) = v3 + 4;
  uint64_t v7 = v2 + 48 * (v3 + 3);
  uint64_t v8 = *a2;
  *(void *)(v7 + 32) = *a2;
  *(void *)(v6 + 32) = v8;
  *(void *)(v5 + 32) = v8;
  *(void *)(v4 + 32) = v8;
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  int v9 = *(_DWORD *)(a1 + 148);
  int v10 = *(_DWORD *)(a1 + 156);
  float result = (float)(*(_DWORD *)(a1 + 152) + v8);
  *(float *)uint64_t v4 = result;
  *(float *)(v4 + 4) = (float)v9;
  *(void *)(v4 + 8) = 0x3F80000000000000;
  *(float *)uint64_t v5 = (float)(int)v8;
  *(float *)(v5 + 4) = (float)v9;
  *(void *)(v5 + 8) = 0x3F80000000000000;
  float v12 = (float)(v10 + v9);
  *(float *)uint64_t v6 = result;
  *(float *)(v6 + 4) = v12;
  *(void *)(v6 + 8) = 0x3F80000000000000;
  *(float *)uint64_t v7 = (float)(int)v8;
  *(float *)(v7 + 4) = v12;
  *(void *)(v7 + 8) = 0x3F80000000000000;
  return result;
}

float32x2_t CA::CG::anonymous namespace'::GradientStripeRenderer::draw_stripe(uint64_t a1, float32x2_t *a2, double a3)
{
  double v3 = a3;
  unsigned int v6 = *(_DWORD *)(a1 + 32);
  if (v6 - 252 > 0xFFFFFEFF)
  {
    if (!v6)
    {
      double v13 = *(double *)(a1 + 56);
      if (v13 >= 0.0) {
        float64x2_t v14 = vmulq_n_f64(*(float64x2_t *)(a1 + 88), v13);
      }
      else {
        float64x2_t v14 = vnegq_f64(*(float64x2_t *)(a1 + 120));
      }
      double v15 = *(float32x2_t **)(a1 + 24);
      *(_DWORD *)(a1 + 32) = 2;
      float32x2_t v16 = *(float32x2_t *)(a1 + 64);
      float64x2_t v17 = vaddq_f64(*(float64x2_t *)(a1 + 72), v14);
      v15[10] = v16;
      void v15[4] = v16;
      float64x2_t v18 = *(float64x2_t *)(a1 + 104);
      *double v15 = vcvt_f32_f64(vaddq_f64(v18, v17));
      v15[1] = (float32x2_t)0x3F80000000000000;
      v15[6] = vcvt_f32_f64(vsubq_f64(v17, v18));
      v15[7] = (float32x2_t)0x3F80000000000000;
      unsigned int v6 = *(_DWORD *)(a1 + 32);
    }
  }
  else
  {
    double v3 = a3;
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = v7 + 48 * (*(_DWORD *)(a1 + 32) - 2);
    long long v9 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(void *)(v7 + 32) = *(void *)(v8 + 32);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = v10 + 48 * (*(_DWORD *)(a1 + 32) - 1);
    long long v12 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 64) = v12;
    *(void *)(v10 + 8CASetDebugMessage("", 0) = *(void *)(v11 + 32);
    unsigned int v6 = 2;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 32) = v6 + 2;
  if (v3 <= 1.0) {
    float64x2_t v20 = vmulq_n_f64(*(float64x2_t *)(a1 + 88), v3);
  }
  else {
    float64x2_t v20 = vaddq_f64(*(float64x2_t *)(a1 + 120), *(float64x2_t *)(a1 + 88));
  }
  char v21 = (float32x2_t *)(v19 + 48 * (v6 + 1));
  unsigned int v22 = (float32x2_t *)(v19 + 48 * v6);
  float32x2_t v23 = *a2;
  float64x2_t v24 = vaddq_f64(*(float64x2_t *)(a1 + 72), v20);
  v21[4] = *a2;
  v22[4] = v23;
  float64x2_t v25 = *(float64x2_t *)(a1 + 104);
  *unsigned int v22 = vcvt_f32_f64(vaddq_f64(v25, v24));
  v22[1] = (float32x2_t)0x3F80000000000000;
  float32x2_t result = vcvt_f32_f64(vsubq_f64(v24, v25));
  *char v21 = result;
  v21[1] = (float32x2_t)0x3F80000000000000;
  return result;
}

int32x2_t *CA::CG::anonymous namespace'::GradientStripeRenderer::flush(int32x2_t *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (this[4].i32[0])
  {
    uint64_t v1 = this;
    long long v6 = 0u;
    uint64_t v2 = this + 18;
    uint64_t v3 = *(void *)(*(void *)(*(void *)this + 248) + 8);
    v4[0] = *this;
    v4[1] = v3;
    long long v5 = 0u;
    void v4[2] = 0;
    WORD4(v5) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v4);
    while (1)
    {
      this = (int32x2_t *)CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v4, v2);
      if (!this) {
        break;
      }
      (*(void (**)(int32x2_t, uint64_t, void, void, void, void, void, void))(**(void **)v1
                                                                                                 + 280))(*v1, 2, v1[4].u32[0], 0, *(void *)&v1[3], 0, v1[4].u32[0], 0);
    }
  }
  return this;
}

void CA::CG::anonymous namespace'::GradientStripeRenderer::draw(void)::$_0::__invoke(uint64_t a1, float64x2_t *a2, double a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  float32x4_t v12 = 0uLL;
  CA::OGL::Context::device_float_color(*(CA::OGL::Context **)a1, v12.f32, *(CGColorSpaceRef *)(a1 + 16), a2, *(float *)&a3);
  int8x8_t v9 = (int8x8_t)vcvt_f16_f32(v12);
  if (CGGradientUsesPremultipliedInterpolation())
  {
    int8x8_t v5 = (int8x8_t)vmul_lane_f16((float16x4_t)v9, (float16x4_t)v9, 3);
    *(__int32 *)((char *)v5.i32 + 2) = vmul_lane_f16((float16x4_t)vext_s8(v9, v5, 2uLL), (float16x4_t)v9, 3).u32[0];
    v5.i16[3] = v9.i16[3];
    double v6 = *(double *)&v5;
  }
  else
  {
    double v6 = *(double *)&v9;
  }
  double v7 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(a1 + 136)), vcvtq_f32_f16(*(float16x4_t *)&v6))));
  if (*(void *)(a1 + 136) != 0x3C003C003C003C00) {
    double v6 = v7;
  }
  if (*((short float *)&v6 + 3) != COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))) {
    *(unsigned char *)(a1 + 39) = 0;
  }
  if (*(double *)(a1 + 88) * *(double *)(a1 + 88) + *(double *)(a1 + 96) * *(double *)(a1 + 96) == 0.0)
  {
    if (*(unsigned char *)(a1 + 36) && *(unsigned char *)(a1 + 37) && *(unsigned char *)(a1 + 38)) {
      goto LABEL_12;
    }
  }
  else
  {
    double v8 = *(double *)(a1 + 48);
    if (v8 >= 0.0)
    {
      if (*(double *)(a1 + 40) <= a3 && *(double *)(a1 + 56) <= v8)
      {
        if (*(unsigned char *)(a1 + 36))
        {
          if (!*(unsigned char *)(a1 + 37)) {
            goto LABEL_20;
          }
          *(double *)(a1 + 64) = v6;
        }
        double v11 = v6;
        double v10 = v6;
        goto LABEL_19;
      }
    }
    else if (*(unsigned char *)(a1 + 36) && *(unsigned char *)(a1 + 37))
    {
LABEL_12:
      double v11 = v6;
      double v10 = v6;
LABEL_19:
      double v6 = v10;
    }
  }
LABEL_20:
  *(double *)(a1 + 56) = a3;
  *(double *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 36) = 0;
}

char *CA::CG::DrawLinearGradient::clipping_planes(CA::CG::DrawLinearGradient *this, float64x2_t *a2)
{
  unsigned int v2 = *((_DWORD *)this + 25);
  if ((v2 & 0x4000000) != 0) {
    return 0;
  }
  else {
}
  }

uint64_t CA::CG::DrawLinearGradient::supports_complex_blend_modes(CA::CG::DrawLinearGradient *this)
{
  return (*((unsigned __int8 *)this + 103) >> 2) & 1;
}

BOOL CA::CG::DrawLinearGradient::may_flush(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 103) & 4) == 0;
}

void CA::CG::DrawLinearGradient::~DrawLinearGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

void CA::CG::DrawRadialGradient::draw_color(CA::CG::DrawRadialGradient *this, CA::CG::Renderer *a2)
{
  v19[15] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)*((void *)a2 + 1);
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  if (CGColorSpaceGetModel(ColorSpace) < kCGColorSpaceModelCMYK)
  {
    uint64_t v6 = v4[2];
    int v7 = *(unsigned __int8 *)(v6 + 480);
    if (v7 != 12 && (v7 - 1) < 0x19)
    {
      if (*((double *)this + 15) == *((double *)this + 17) && *((double *)this + 16) == *((double *)this + 18))
      {
        char v10 = 0;
        char v9 = 44;
      }
      else
      {
        char v9 = 45;
        char v10 = 1;
      }
      *(unsigned char *)(v6 + 16) = v9;
      if ((*(uint64_t (**)(void *))(*v4 + 984))(v4))
      {
        {
          *(unsigned char *)(v4[2] + 481) |= 2u;
          *(_DWORD *)(v4[2] + 352) = 1065353216;
        }
        float32x4_t v12 = (CA::CG *)*((void *)this + 14);
        v18[0] = &unk_1ED028070;
        v18[1] = v12;
        int v13 = CA::CG::gradient_pixel_size(v12, v11);
        memset(&v19[7], 0, 64);
        int v14 = *((_DWORD *)this + 25);
        v19[1] = a2;
        v19[2] = v4;
        v19[3] = (char *)a2 + 32;
        v19[4] = v18;
        v19[5] = ColorSpace;
        v19[6] = 0;
        LODWORD(v19[7]) = v13;
        v19[0] = &unk_1ED027FB8;
        long long v15 = *(_OWORD *)((char *)this + 136);
        *(_OWORD *)&v19[8] = *(_OWORD *)((char *)this + 120);
        *(_OWORD *)&v19[10] = v15;
        *(float64x2_t *)&v19[12] = vabsq_f64(*(float64x2_t *)((char *)this + 152));
        LOBYTE(v19[14]) = HIBYTE(v14) & 1;
        BYTE1(v19[14]) = (v14 & 0x2000000) != 0;
        BYTE2(v19[14]) = v10;
        uint64_t Identifier = CGGradientGetIdentifier();
        *(unsigned char *)(v4[2] + 481) &= ~2u;
        *(unsigned char *)(v4[2] + 16) = 0;
        if ((v17 & 1) == 0) {
          CA::CG::DrawRadialGradient::draw_as_shading(this, a2);
        }
        return;
      }
      *(unsigned char *)(v4[2] + 16) = 0;
    }
  }

  CA::CG::DrawRadialGradient::draw_as_shading(this, a2);
}

void CA::CG::DrawRadialGradient::draw_as_shading(CA::CG::DrawRadialGradient *this, CA::CG::Renderer *a2)
{
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  Functiouint64_t n = (CGFunction *)CGGradientGetFunction();
  CGShadingRef Radial = CGShadingCreateRadial(ColorSpace, *(CGPoint *)((char *)this + 120), *((CGFloat *)this + 19), *(CGPoint *)((char *)this + 136), *((CGFloat *)this + 20), Function, *((_DWORD *)this + 25) & 0x1000000, (*((_DWORD *)this + 25) & 0x2000000) != 0);
  if (Radial)
  {
    int v7 = Radial;
    CA::CG::fill_shading((uint64_t)a2);
    CGShadingRelease(v7);
  }
}

unint64_t CA::CG::gradient_pixel_size(CA::CG *this, CGGradient *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  Locationint Count = CGGradientGetLocationCount();
  if (LocationCount < 3) {
    return 2;
  }
  unint64_t v4 = LocationCount;
  if (LocationCount > 0x10) {
    return 2048;
  }
  memset(v14, 0, sizeof(v14));
  CGGradientApply();
  uint64_t v5 = 0;
  unint64_t v6 = v4 - 1;
  while (v6 != v5)
  {
    int v7 = (double *)v14 + v5;
    double v8 = round((v7[1] - *v7) * 4096.0);
    double *v7 = v8;
    unint64_t result = 2048;
    if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      ++v5;
      if (v8 != 0.0) {
        continue;
      }
    }
    return result;
  }
  unint64_t v9 = (unint64_t)*(double *)v14;
  uint64_t v10 = 1;
  do
  {
    unint64_t v11 = (unint64_t)*((double *)v14 + v10);
    if (v11)
    {
      unint64_t v12 = v9;
      do
      {
        unint64_t v9 = v11;
        unint64_t v11 = v12 % v11;
        unint64_t v12 = v9;
      }
      while (v11);
    }
    ++v10;
  }
  while (v10 != v6);
  double v13 = round(4096.0 / (double)v9) + 1.0;
  if ((unint64_t)v13 >= 0x800) {
    return 2048;
  }
  else {
    return (unint64_t)v13;
  }
}

double **CA::CG::gradient_pixel_size(CGGradient *)::$_0::__invoke(double **result, double a2)
{
  unsigned int v2 = *result;
  *unsigned int v2 = a2;
  _DWORD *result = v2 + 1;
  return result;
}

uint64_t CA::CG::anonymous namespace'::GradientColormapGenerator::generate(CA::CG::_anonymous_namespace_::GradientColormapGenerator *this, CA::CG::Renderer *a2, CGColorSpaceRef space, unsigned __int8 *a4)
{
  return CGGradientApply();
}

uint64_t CA::CG::anonymous namespace'::GradientSampler::callback(CA::CG::_anonymous_namespace_::GradientSampler *this, float64x2_t *a2, double a3, const double *a4)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t result = CGGradientUsesPremultipliedInterpolation();
  double v8 = *((double *)this + 6);
  if (result)
  {
    if (v8 >= 0.0)
    {
      unint64_t v9 = (float64x2_t *)((char *)this + 56);
      int v10 = *((_DWORD *)this + 10);
      if (*((unsigned char *)this + 44))
      {
        double v11 = (double)(v10 - 1);
        unsigned int v12 = vcvtpd_u64_f64(v8 * v11);
        if (v8 > 0.0) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        double v14 = ceil(v11 * a3);
        if (a3 >= 1.0) {
          double v14 = (double)v10;
        }
        uint64_t v15 = v14;
        float32x2_t v16 = *(CA::OGL::Context **)this;
        char v17 = (CGColorSpace *)*((void *)this + 2);
        float32x4_t v166 = 0uLL;
        CA::OGL::Context::device_float_color(v16, v166.f32, v17, v9, *(float *)&v14);
        float16x4_t v163 = vcvt_f16_f32(v166);
        float64x2_t v18 = *(CA::OGL::Context **)this;
        uint64_t v19 = (CGColorSpace *)*((void *)this + 2);
        float32x4_t v166 = 0uLL;
        uint64_t result = CA::OGL::Context::device_float_color(v18, v166.f32, v19, a2, *(float *)v163.i32);
        float16x4_t v20 = vcvt_f16_f32(v166);
        if (*(void *)&v163 == *(void *)&v20)
        {
          if (v13 < v15)
          {
            int8x8_t v21 = (int8x8_t)vmul_lane_f16(v163, v163, 3);
            *(__int32 *)((char *)v21.i32 + 2) = vmul_lane_f16((float16x4_t)vext_s8((int8x8_t)v163, v21, 2uLL), v163, 3).u32[0];
            v21.i16[3] = v163.i16[3];
            uint64_t v22 = v15 - v13;
            float32x2_t v23 = (int8x8_t *)(*((void *)this + 4) + 8 * v13);
            do
            {
              *v23++ = v21;
              --v22;
            }
            while (v22);
          }
        }
        else if (v13 < v15)
        {
          v43.i16[0] = vmul_lane_f16(v20, v20, 3).u16[0];
          *(__int32 *)((char *)v43.i32 + 2) = vmul_lane_f16((float16x4_t)vext_s8((int8x8_t)v20, (int8x8_t)v20, 2uLL), v20, 3).u32[0];
          v43.i16[3] = v20.i16[3];
          v44.i16[0] = vmul_lane_f16(v163, v163, 3).u16[0];
          *(__int32 *)((char *)v44.i32 + 2) = vmul_lane_f16((float16x4_t)vext_s8((int8x8_t)v163, (int8x8_t)v20, 2uLL), v163, 3).u32[0];
          v44.i16[3] = v163.i16[3];
          double v45 = (double)(*((_DWORD *)this + 10) - 1);
          double v46 = v8 * v45;
          float32x4_t v47 = vcvtq_f32_f16(v44);
          float32x4_t v48 = vcvtq_f32_f16(v43);
          uint64_t v49 = *((void *)this + 4);
          double v50 = 1.0 / ((a3 - v8) * v45);
          do
          {
            float v51 = ((double)v13 - v46) * v50;
            *(float16x4_t *)(v49 + 8 * v13++) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v47, 1.0 - v51), v48, v51));
          }
          while (v15 != v13);
        }
      }
      else
      {
        if (v8 <= 0.0) {
          unsigned int v41 = 0;
        }
        else {
          unsigned int v41 = vcvtpd_u64_f64(v8 * (double)(v10 - 1));
        }
        if (a3 >= 1.0) {
          double v60 = (double)v10;
        }
        else {
          double v60 = ceil((double)(v10 - 1) * a3);
        }
        uint64_t v62 = v60;
        double v63 = *(CA::OGL::Context **)this;
        double v64 = (CGColorSpace *)*((void *)this + 2);
        float32x4_t v166 = 0uLL;
        CA::OGL::Context::device_float_color(v63, v166.f32, v64, v9, *(float *)&v60);
        float16x4_t v165 = vcvt_f16_f32(v166);
        unsigned int v65 = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v165);
        float16x4_t v66 = *(CA::OGL::Context **)this;
        int64x2_t v67 = (CGColorSpace *)*((void *)this + 2);
        float32x4_t v166 = 0uLL;
        CA::OGL::Context::device_float_color(v66, v166.f32, v67, a2, v68);
        float16x4_t v165 = vcvt_f16_f32(v166);
        uint64_t result = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v165);
        unint64_t v69 = ((((v65 | ((unint64_t)v65 << 24)) & 0xFF00FF00FF00FFLL) * (HIBYTE(v65) + 1)) >> 8) & 0xFF00FF00FF00FFLL;
        int v70 = (v69 >> 24) | v69;
        unsigned int v71 = v65 & 0xFF000000;
        if (v65 == result)
        {
          if (v41 < v62)
          {
            int v72 = v70 & 0xFFFFFF | v71;
            uint64_t v73 = v62 - v41;
            uint32x2_t v74 = (int *)(*((void *)this + 4) + 4 * v41);
            do
            {
              *v74++ = v72;
              --v73;
            }
            while (v73);
          }
        }
        else if (v41 < v62)
        {
          unint64_t v86 = 0;
          unsigned int v87 = v70 & 0xFF00 | v71;
          double v88 = (double)(*((_DWORD *)this + 10) - 1);
          unint64_t v89 = ((((result | ((unint64_t)result << 24)) & 0xFF00FF00FF00FFLL)
                * (BYTE3(result) + 1)) >> 8) & 0xFF00FF00FF00FFLL;
          LODWORD(v89) = (v89 >> 24) | v89;
          unsigned int v90 = result & 0xFF000000 | (unsigned __int16)v89;
          int v91 = v70 & 0xFF00FF;
          int v92 = (v89 & 0xFF00FF) - v91;
          int v93 = (v90 >> 8) - (v87 >> 8);
          uint64_t v94 = v62 - v41;
          uint64x2_t v95 = (uint64x2_t)vdupq_n_s64(v94 - 1);
          double v96 = (a3 - v8) * v88;
          unint64_t v97 = (v94 + 1) & 0xFFFFFFFFFFFFFFFELL;
          float64x2_t v98 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v8 * v88), 0);
          float64x2_t v99 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(256.0 / v96), 0);
          int32x2_t v100 = vadd_s32(vdup_n_s32(v41), (int32x2_t)0x100000000);
          uint64_t v101 = *((void *)this + 4) + 4 * v41;
          __asm { FMOV            V5.2D, #0.5 }
          do
          {
            int32x2_t v107 = vmovn_s64((int64x2_t)vcgeq_u64(v95, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v86), (int8x16_t)xmmword_184997FD0)));
            v108.i64[0] = v100.u32[0];
            v108.i64[1] = v100.u32[1];
            int32x2_t v109 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmlaq_f64(_Q5, vsubq_f64(vcvtq_f64_u64(v108), v98), v99)));
            if (v107.i8[0])
            {
              uint64_t result = (v91 + ((v92 * v109.i32[0]) >> 8)) & 0xFF00FF;
              *(_DWORD *)(v101 + 4 * v86) = result | (v87 + v93 * v109.i32[0]) & 0xFF00FF00;
            }
            if (v107.i8[4])
            {
              uint64_t result = (v91 + ((v92 * v109.i32[1]) >> 8)) & 0xFF00FF;
              *(_DWORD *)(v101 + 4 * v86 + 4) = result | (v87 + v93 * v109.i32[1]) & 0xFF00FF00;
            }
            v86 += 2;
            int32x2_t v100 = vadd_s32(v100, (int32x2_t)0x200000002);
          }
          while (v97 != v86);
        }
      }
    }
  }
  else if (v8 >= 0.0)
  {
    float64x2_t v25 = (float64x2_t *)((char *)this + 56);
    int v26 = *((_DWORD *)this + 10);
    if (*((unsigned char *)this + 44))
    {
      double v27 = (double)(v26 - 1);
      unsigned int v28 = vcvtpd_u64_f64(v8 * v27);
      if (v8 > 0.0) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      double v30 = ceil(v27 * a3);
      if (a3 >= 1.0) {
        double v30 = (double)v26;
      }
      uint64_t v31 = v30;
      double v32 = *(CA::OGL::Context **)this;
      double v33 = (CGColorSpace *)*((void *)this + 2);
      float32x4_t v166 = 0uLL;
      CA::OGL::Context::device_float_color(v32, v166.f32, v33, v25, *(float *)&v30);
      float16x4_t v164 = vcvt_f16_f32(v166);
      char v34 = *(CA::OGL::Context **)this;
      double v35 = (CGColorSpace *)*((void *)this + 2);
      float32x4_t v166 = 0uLL;
      uint64_t result = CA::OGL::Context::device_float_color(v34, v166.f32, v35, a2, *(float *)v164.i32);
      v36.i16[3] = v164.i16[3];
      int8x8_t v37 = *(int8x8_t *)v166.f32;
      float16x4_t v38 = vcvt_f16_f32(v166);
      if (*(void *)&v164 == *(void *)&v38)
      {
        if (v29 < v31)
        {
          *(short float *)v37.i16 = *(short float *)&v164.i16[3] * *(short float *)v164.i16;
          *(short float *)v36.i16 = *(short float *)&v164.i16[3] * *(short float *)v164.i16;
          *(__int32 *)((char *)v36.i32 + 2) = vmul_lane_f16((float16x4_t)vext_s8((int8x8_t)v164, v37, 2uLL), v164, 3).u32[0];
          uint64_t v39 = v31 - v29;
          double v40 = (float16x4_t *)(*((void *)this + 4) + 8 * v29);
          do
          {
            *v40++ = v36;
            --v39;
          }
          while (v39);
        }
      }
      else
      {
        int v52 = *((_DWORD *)this + 10) - 1;
        double v53 = 1.0 / ((a3 - v8) * (double)v52);
        double v54 = -(v8 * (double)v52) * v53;
        if (*(short float *)&v38.i16[3] == *(short float *)&v164.i16[3])
        {
          if (v29 < v31)
          {
            unsigned __int32 v55 = vmul_lane_f16((float16x4_t)vext_s8((int8x8_t)v38, *(int8x8_t *)&v53, 2uLL), v38, 3).u32[0];
            *(short float *)v38.i16 = *(short float *)&v38.i16[3] * *(short float *)v38.i16;
            *(__int32 *)((char *)v38.i32 + 2) = v55;
            *(short float *)v36.i16 = *(short float *)&v164.i16[3] * *(short float *)v164.i16;
            *(__int32 *)((char *)v36.i32 + 2) = vmul_lane_f16((float16x4_t)vext_s8((int8x8_t)v164, *(int8x8_t *)&v53, 2uLL), v164, 3).u32[0];
            float32x4_t v56 = vcvtq_f32_f16(v36);
            float32x4_t v57 = vcvtq_f32_f16(v38);
            uint64_t v58 = *((void *)this + 4);
            do
            {
              float v59 = v54 + v53 * (double)v29;
              *(float16x4_t *)(v58 + 8 * v29++) = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v56, 1.0 - v59), v57, v59));
            }
            while (v31 != v29);
          }
        }
        else if (v29 < v31)
        {
          float32x4_t v134 = vcvtq_f32_f16(v164);
          float32x4_t v135 = vcvtq_f32_f16(v38);
          uint64_t v136 = *((void *)this + 4);
          do
          {
            float v137 = v54 + v53 * (double)v29;
            float16x4_t v138 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v134, 1.0 - v137), v135, v137));
            short float v139 = vmulh_lane_f16(*(short float *)&v138.i16[1], v138, 3);
            short float v140 = vmulh_lane_f16(*(short float *)&v138.i16[2], v138, 3);
            v138.i16[0] = vmulh_lane_f16(*(short float *)v138.i16, v138, 3);
            *(short float *)&v138.i16[1] = v139;
            *(short float *)&v138.i16[2] = v140;
            *(float16x4_t *)(v136 + 8 * v29++) = v138;
          }
          while (v31 != v29);
        }
      }
    }
    else
    {
      if (v8 <= 0.0) {
        unsigned int v42 = 0;
      }
      else {
        unsigned int v42 = vcvtpd_u64_f64(v8 * (double)(v26 - 1));
      }
      if (a3 >= 1.0) {
        double v61 = (double)v26;
      }
      else {
        double v61 = ceil((double)(v26 - 1) * a3);
      }
      uint64_t v75 = v61;
      uint32x2_t v76 = *(CA::OGL::Context **)this;
      int32x2_t v77 = (CGColorSpace *)*((void *)this + 2);
      float32x4_t v166 = 0uLL;
      CA::OGL::Context::device_float_color(v76, v166.f32, v77, v25, *(float *)&v61);
      float16x4_t v165 = vcvt_f16_f32(v166);
      unsigned int v78 = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v165);
      long long v79 = *(CA::OGL::Context **)this;
      int32x2_t v80 = (CGColorSpace *)*((void *)this + 2);
      float32x4_t v166 = 0uLL;
      CA::OGL::Context::device_float_color(v79, v166.f32, v80, a2, v81);
      float16x4_t v165 = vcvt_f16_f32(v166);
      uint64_t result = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v165);
      if (v78 == result)
      {
        if (v42 < v75)
        {
          unint64_t v82 = ((((v78 | ((unint64_t)v78 << 24)) & 0xFF00FF00FF00FFLL) * (HIBYTE(v78) + 1)) >> 8) & 0xFF00FF00FF00FFLL;
          int v83 = v78 & 0xFF000000 | ((v82 >> 24) | v82) & 0xFFFFFF;
          uint64_t v84 = v75 - v42;
          double v85 = (_DWORD *)(*((void *)this + 4) + 4 * v42);
          do
          {
            *v85++ = v83;
            --v84;
          }
          while (v84);
        }
      }
      else
      {
        double v110 = (double)(*((_DWORD *)this + 10) - 1);
        double v111 = 256.0 / ((a3 - v8) * v110);
        double v112 = -(v8 * v110 * v111 + -0.5);
        if (HIBYTE(v78) == BYTE3(result))
        {
          if (v42 < v75)
          {
            unint64_t v113 = 0;
            uint64_t v114 = HIBYTE(v78) + 1;
            unint64_t v115 = ((((v78 | ((unint64_t)v78 << 24)) & 0xFF00FF00FF00FFLL) * v114) >> 8) & 0xFF00FF00FF00FFLL;
            int v116 = (v115 >> 24) | v115;
            unsigned int v117 = v116 & 0xFF00 | v78 & 0xFF000000;
            unint64_t v118 = ((((result | ((unint64_t)result << 24)) & 0xFF00FF00FF00FFLL)
                   * v114) >> 8) & 0xFF00FF00FF00FFLL;
            int v119 = (v118 >> 24) | v118;
            unsigned int v120 = result & 0xFF000000 | (unsigned __int16)((v118 >> 24) | v118);
            int v121 = v116 & 0xFF00FF;
            int v122 = (v119 & 0xFF00FF) - (v116 & 0xFF00FF);
            int v123 = (v120 >> 8) - (v117 >> 8);
            uint64_t v124 = v75 - v42;
            uint64x2_t v125 = (uint64x2_t)vdupq_n_s64(v124 - 1);
            unint64_t v126 = (v124 + 1) & 0xFFFFFFFFFFFFFFFELL;
            int32x2_t v127 = vadd_s32(vdup_n_s32(v42), (int32x2_t)0x100000000);
            float64x2_t v128 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v111, 0);
            float64x2_t v129 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v112, 0);
            uint64_t v130 = *((void *)this + 4) + 4 * v42;
            do
            {
              int32x2_t v131 = vmovn_s64((int64x2_t)vcgeq_u64(v125, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v113), (int8x16_t)xmmword_184997FD0)));
              v132.i64[0] = v127.u32[0];
              v132.i64[1] = v127.u32[1];
              int32x2_t v133 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmlaq_f64(v129, vcvtq_f64_u64(v132), v128)));
              if (v131.i8[0])
              {
                uint64_t result = (v121 + ((v122 * v133.i32[0]) >> 8)) & 0xFF00FF;
                *(_DWORD *)(v130 + 4 * v113) = result | (v117 + v123 * v133.i32[0]) & 0xFF00FF00;
              }
              if (v131.i8[4])
              {
                uint64_t result = (v121 + ((v122 * v133.i32[1]) >> 8)) & 0xFF00FF;
                *(_DWORD *)(v130 + 4 * v113 + 4) = result | (v117 + v123 * v133.i32[1]) & 0xFF00FF00;
              }
              v113 += 2;
              int32x2_t v127 = vadd_s32(v127, (int32x2_t)0x200000002);
            }
            while (v126 != v113);
          }
        }
        else if (v42 < v75)
        {
          unint64_t v141 = 0;
          uint64_t v142 = v75 - v42;
          int v143 = (v78 >> 8) & 0xFF00FF;
          uint64x2_t v144 = (uint64x2_t)vdupq_n_s64(v142 - 1);
          unint64_t v145 = (v142 + 1) & 0xFFFFFFFFFFFFFFFELL;
          int32x2_t v146 = vadd_s32(vdup_n_s32(v42), (int32x2_t)0x100000000);
          float64x2_t v147 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v111, 0);
          float64x2_t v148 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v112, 0);
          int32x2_t v149 = vdup_n_s32((result & 0xFF00FF) - (v78 & 0xFF00FF));
          int32x2_t v150 = vdup_n_s32(((result >> 8) & 0xFF00FF) - v143);
          uint32x2_t v151 = (uint32x2_t)vdup_n_s32(v78 & 0xFF00FF);
          int32x2_t v152 = vdup_n_s32(v143 << 8);
          uint64_t v153 = *((void *)this + 4) + 4 * v42;
          v154.i64[0] = 0xFF00FF00FF00FFLL;
          v154.i64[1] = 0xFF00FF00FF00FFLL;
          do
          {
            int32x2_t v155 = vmovn_s64((int64x2_t)vcgeq_u64(v144, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v141), (int8x16_t)xmmword_184997FD0)));
            v156.i64[0] = v146.u32[0];
            v156.i64[1] = v146.u32[1];
            int32x2_t v157 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmlaq_f64(v148, vcvtq_f64_u64(v156), v147)));
            int8x8_t v158 = (int8x8_t)vmla_s32(v152, v150, v157);
            uint32x2_t v159 = (uint32x2_t)vbsl_s8((int8x8_t)0xFF00FF00FF00FFLL, (int8x8_t)vsra_n_u32(v151, (uint32x2_t)vmul_s32(v149, v157), 8uLL), v158);
            v156.i64[0] = v159.u32[0];
            v156.i64[1] = v159.u32[1];
            uint32x2_t v160 = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)v158, 0x18uLL);
            unsigned long long v161 = *(_OWORD *)&vorrq_s8((int8x16_t)vshll_n_u32(v159, 0x18uLL), (int8x16_t)v156) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            *(void *)&unsigned long long v161 = v161 * v160.u32[0];
            *((void *)&v161 + 1) *= v160.u32[1];
            int8x16_t v162 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v161, 8uLL), v154);
            if (v155.i8[0]) {
              *(_DWORD *)(v153 + 4 * v141) = v158.i32[0] & 0xFF000000 | (((unint64_t)v162.i64[0] >> 24) | v162.i32[0]) & 0xFFFFFF;
            }
            if (v155.i8[4]) {
              *(_DWORD *)(v153 + 4 * v141 + 4) = v158.i32[1] & 0xFF000000 | (((unint64_t)v162.i64[1] >> 24) | v162.i32[2]) & 0xFFFFFF;
            }
            v141 += 2;
            int32x2_t v146 = vadd_s32(v146, (int32x2_t)0x200000002);
          }
          while (v145 != v141);
        }
      }
    }
  }
  *((double *)this + 6) = a3;
  float64x2_t v24 = *a2;
  if (*((_DWORD *)this + 6) == 1) {
    *(float64x2_t *)((char *)this + 72) = a2[1];
  }
  *(float64x2_t *)((char *)this + 56) = v24;
  return result;
}

void CA::CG::DrawRadialGradient::~DrawRadialGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

void CA::CG::DrawConicGradient::draw_color(CA::CG::DrawConicGradient *this, CA::CG::Renderer *a2)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void *)*((void *)a2 + 1);
  ColorSpace = (CGColorSpace *)CGGradientGetColorSpace();
  if (CGColorSpaceGetModel(ColorSpace) < kCGColorSpaceModelCMYK)
  {
    *(unsigned char *)(v4[2] + 16) = 46;
    char v6 = (*(uint64_t (**)(void *))(*v4 + 984))(v4);
    uint64_t v8 = v4[2];
    if (v6)
    {
      int v9 = *(unsigned __int8 *)(v8 + 480);
      if (v9 != 12 && (v9 - 1) < 0x19)
      {
        {
          *(unsigned char *)(v4[2] + 481) |= 2u;
          *(_DWORD *)(v4[2] + 352) = 1065353216;
        }
        double v11 = (CA::CG *)*((void *)this + 14);
        v19[0] = &unk_1ED028070;
        v19[1] = v11;
        unsigned int v12 = CA::CG::gradient_pixel_size(v11, v7);
        uint64_t v13 = *((void *)this + 17);
        v16[1] = a2;
        v16[2] = v4;
        v16[3] = (char *)a2 + 32;
        v16[4] = v19;
        v16[6] = 0;
        void v16[5] = ColorSpace;
        v16[7] = v12;
        v16[0] = &unk_1ED027F70;
        long long v17 = *(_OWORD *)((char *)this + 120);
        uint64_t v18 = v13;
        uint64_t Identifier = CGGradientGetIdentifier();
        *(unsigned char *)(v4[2] + 481) &= ~2u;
        *(unsigned char *)(v4[2] + 16) = 0;
        if ((v15 & 1) == 0) {
          CA::CG::DrawConicGradient::draw_as_shading(this, a2);
        }
        return;
      }
    }
    else
    {
      *(unsigned char *)(v8 + 16) = 0;
    }
  }

  CA::CG::DrawConicGradient::draw_as_shading(this, a2);
}

void CA::CG::DrawConicGradient::draw_as_shading(CA::CG::DrawConicGradient *this, CA::CG::Renderer *a2)
{
  CGGradientGetColorSpace();
  CGGradientGetFunction();
  uint64_t Conic = CGShadingCreateConic();
  if (Conic)
  {
    unint64_t v4 = (CGShading *)Conic;
    CA::CG::fill_shading((uint64_t)a2);
    CGShadingRelease(v4);
  }
}

void CA::CG::DrawConicGradient::~DrawConicGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CA::CG::Renderer *)&unk_1ED027C00;
  CA::CG::Renderer::release_object(this[14], a2);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

uint64_t CA::CG::DrawGradient::DrawGradient(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, const void *a5, char a6)
{
  *(void *)CA::CG::DrawOp::DrawOp(a1, a2, a3, a4, 0, 0x200CASetDebugMessage("", 0) = &unk_1ED027C00;
  if (a5) {
    CFTypeRef v9 = CFRetain(a5);
  }
  else {
    CFTypeRef v9 = 0;
  }
  *(void *)(a1 + 112) = v9;
  if (a6) {
    *(_DWORD *)(a1 + 100) |= 0x1000000u;
  }
  if ((a6 & 2) != 0) {
    *(_DWORD *)(a1 + 100) |= 0x2000000u;
  }
  return a1;
}

void CA::CG::FillGlyphs::draw_shape_and_color(CA::CG::FillGlyphs *this, CA::CG::Renderer *a2, double a3, int64x2_t a4, double a5, double a6, double a7, int64x2_t a8, uint64_t a9, const CA::CG::ShadowStyle *a10)
{
  if ((CA::CG::draw_glyph_bitmaps(a2, this, 0, a10, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    CA::CG::draw_glyph_paths((uint64_t)a2, (uint64_t)this, 192, 0);
  }
}

uint64_t CA::CG::draw_glyph_bitmaps(CA::CG *this, CA::CG::Renderer *a2, float32x2_t *a3, const CA::CG::ShadowStyle *a4, double a5, int64x2_t a6, double a7, double a8, double a9, int64x2_t a10)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)a2 + 33) | 4) != 4) {
    return 0;
  }
  if (!*((void *)this + 172)) {
    *((void *)this + 172) = CGGlyphLockCreate();
  }
  double v13 = *((double *)a2 + 15);
  a6.i64[0] = (uint64_t)v133;
  a10.i64[0] = (uint64_t)this + 32;
  int8x16_t v14 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(a10, a6)).i64[0], 0);
  float64x2_t v15 = (float64x2_t)vandq_s8(*((int8x16_t *)this + 4), v14);
  float64x2_t v16 = (float64x2_t)vandq_s8(*((int8x16_t *)this + 3), v14);
  float64x2_t v17 = (float64x2_t)vandq_s8(*((int8x16_t *)this + 2), v14);
  long long v18 = *(_OWORD *)((char *)a2 + 168);
  long long v19 = *((_OWORD *)a2 + 11);
  float64x2_t v20 = vmlaq_n_f64(vmulq_n_f64(v17, *((double *)a2 + 17)), v16, *((double *)a2 + 18));
  float64x2_t v21 = vmlaq_n_f64(vmulq_n_f64(v17, *((double *)a2 + 19)), v16, *((double *)a2 + 20));
  v133[0] = v20;
  v133[1] = v21;
  float64x2_t v22 = vmlaq_n_f64(vmlaq_n_f64(v15, v17, *(double *)&v18), v16, *(double *)&v19);
  float64x2_t v134 = v22;
  if (a3)
  {
    float v23 = a3[9].f32[1];
    double v24 = v23;
    double v25 = fabs(v23);
    if ((unint64_t)(*(void *)&v25 - 0x10000000000000) >> 53 > 0x3FE && *(void *)&v25 != 0) {
      return 1;
    }
    BOOL v27 = v23 > 8.0;
    double v28 = 4.0;
    if (v27) {
      double v28 = 8.0;
    }
    for (i = 1.0; v24 > v28; double v24 = v24 * 0.5)
      double i = i * 0.5;
    int8x16_t v30 = (int8x16_t)vmulq_n_f64(vcvtq_f64_f32(a3[10]), *((double *)this + 10));
    int32x2_t v31 = vdup_n_s32((*((_DWORD *)a2 + 32) & 8) == 0);
    v32.i64[0] = v31.u32[0];
    v32.i64[1] = v31.u32[1];
    float64x2_t v22 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), v30, (int8x16_t)vrndaq_f64((float64x2_t)v30)), v22);
    float64x2_t v134 = v22;
  }
  else
  {
    double i = 1.0;
  }
  double v33 = i * v13;
  *(double *)&v128[4] = v33 * *(double *)v133;
  double v129 = vmuld_lane_f64(v33, v20, 1);
  double v130 = v33 * v21.f64[0];
  double v131 = vmuld_lane_f64(v33, v21, 1);
  float64x2_t v132 = v22;
  double v34 = -(v33 * v21.f64[0] * v129 - v131 * (v33 * *(double *)v133));
  double v35 = -(v131 * (v33 * *(double *)v133) - v33 * v21.f64[0] * v129);
  if (v34 >= 0.0) {
    double v35 = v34;
  }
  if (v35 > 32768.0) {
    return 0;
  }
  if (!CGGlyphLockAccess()) {
    return 0;
  }
  v128[3] = 0;
  uint64_t QuantizationLevel = CGGlyphLockGetQuantizationLevel();
  if (!QuantizationLevel) {
    return 0;
  }
  int8x8_t v37 = (void *)*((void *)this + 1);
  uint64_t v38 = *((void *)a2 + 23);
  size_t v39 = 4 * v38;
  size_t v40 = 8 * v38;
  if ((unint64_t)(4 * v38) > 0x1000)
  {
    unsigned int v42 = (char *)malloc_type_malloc(4 * v38, 0x1908288EuLL);
    unsigned int v41 = v42;
  }
  else
  {
    MEMORY[0x1F4188790](QuantizationLevel);
    unsigned int v41 = (char *)&v116 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v41, v39);
  }
  if (v40 > 0x1000)
  {
    uint64_t v124 = (char *)malloc_type_malloc(v40, 0xAAB13D6AuLL);
    unint64_t v126 = (uint64_t *)malloc_type_malloc(v40, 0x1E964644uLL);
  }
  else
  {
    MEMORY[0x1F4188790](v42);
    unint64_t v45 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v124 = (char *)&v116 - v45;
    bzero((char *)&v116 - v45, v40);
    MEMORY[0x1F4188790](v46);
    unint64_t v126 = (uint64_t *)((char *)&v116 - v45);
    bzero((char *)&v116 - v45, v40);
  }
  int v121 = v37;
  if (a3 || !(*(unsigned int (**)(void *, uint64_t))(*v37 + 184))(v37, 19))
  {
    BOOL v47 = 0;
  }
  else
  {
    int v48 = *(unsigned __int8 *)(v37[2] + 480);
    BOOL v47 = v48 != 12 && (v48 - 1) < 0x19;
  }
  uint64_t v43 = 0;
  if (v41 && v124 && v126)
  {
    v128[1] = 0;
    v128[2] = 0;
    CGFontGetGlyphIdentifiers();
    uint64_t v50 = CGGlyphLockLockGlyphBitmaps();
    if (!v50)
    {
      uint64_t v43 = 0;
      goto LABEL_158;
    }
    if (v47)
    {
      uint64_t v43 = CA::OGL::GlyphCache::emit_glyphs((CA::CG *)((char *)this + 2544), *((void *)a2 + 23), (uint64_t)v126, (uint64_t)v124);
      float v51 = v121;
LABEL_157:
      *(unsigned char *)(v51[2] + 16) = 0;
      CGGlyphLockUnlock();
      goto LABEL_158;
    }
    uint64_t v52 = *((void *)a2 + 23);
    unint64_t v117 = 24 * v52;
    if ((unint64_t)(24 * v52) > 0x1000)
    {
      int v123 = (char *)malloc_type_malloc(24 * v52, 0xE0CA2311uLL);
      uint64_t v52 = *((void *)a2 + 23);
    }
    else
    {
      MEMORY[0x1F4188790](v50);
      int v123 = (char *)&v116 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v123, v53);
    }
    int32x2_t v127 = (uint64_t *)((char *)this + 4184);
    size_t v119 = v40;
    unsigned int v120 = v41;
    if (!v52)
    {
      unint64_t v86 = 0;
LABEL_107:
      unint64_t v87 = *((void *)this + 526);
      float v51 = v121;
      if (v87 >= 0x801)
      {
        do
        {
          double v88 = (void *)*((void *)this + 525);
          int8x8_t v89 = *(int8x8_t *)((char *)this + 4192);
          unint64_t v90 = v88[1];
          uint8x8_t v91 = (uint8x8_t)vcnt_s8(v89);
          v91.i16[0] = vaddlv_u8(v91);
          if (v91.u32[0] > 1uLL)
          {
            if (v90 >= *(void *)&v89) {
              v90 %= *(void *)&v89;
            }
          }
          else
          {
            v90 &= *(void *)&v89 - 1;
          }
          int v92 = *(void **)(*v127 + 8 * v90);
          do
          {
            int v93 = v92;
            int v92 = (void *)*v92;
          }
          while (v92 != v88);
          if (v93 == (void *)((char *)this + 4200)) {
            goto LABEL_125;
          }
          unint64_t v94 = v93[1];
          if (v91.u32[0] > 1uLL)
          {
            if (v94 >= *(void *)&v89) {
              v94 %= *(void *)&v89;
            }
          }
          else
          {
            v94 &= *(void *)&v89 - 1;
          }
          if (v94 != v90)
          {
LABEL_125:
            if (!*v88) {
              goto LABEL_126;
            }
            unint64_t v95 = *(void *)(*v88 + 8);
            if (v91.u32[0] > 1uLL)
            {
              if (v95 >= *(void *)&v89) {
                v95 %= *(void *)&v89;
              }
            }
            else
            {
              v95 &= *(void *)&v89 - 1;
            }
            if (v95 != v90) {
LABEL_126:
            }
              *(void *)(*v127 + 8 * v9CASetDebugMessage("", 0) = 0;
          }
          uint64_t v96 = *v88;
          if (*v88)
          {
            unint64_t v97 = *(void *)(v96 + 8);
            if (v91.u32[0] > 1uLL)
            {
              if (v97 >= *(void *)&v89) {
                v97 %= *(void *)&v89;
              }
            }
            else
            {
              v97 &= *(void *)&v89 - 1;
            }
            if (v97 != v90)
            {
              *(void *)(*v127 + 8 * v97) = v93;
              uint64_t v96 = *v88;
            }
          }
          *int v93 = v96;
          *((void *)this + 526) = v87 - 1;
          operator delete(v88);
          unint64_t v87 = *((void *)this + 526);
        }
        while (v87 > 0x800);
        unint64_t v86 = *((void *)a2 + 23);
      }
      uint64_t v98 = v51[2];
      uint64_t v99 = *(void *)(v98 + 8);
      if (v86 && *(_DWORD *)(*v126 + 28) == 16)
      {
        _H0 = *((_WORD *)a2 + 44);
        __asm { FCVT            S0, H0 }
        v54.i32[0] = *(_DWORD *)((char *)a2 + 90);
        float32x2_t v104 = vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v54), (float32x2_t)0x3E0000003F000000);
        unsigned int v105 = (int)(float)((float)(v104.f32[0] + (float)(_S0 * 0.375)) + v104.f32[1]);
        if (v105 >= 0x55) {
          int v106 = 2 * (v105 > 0xAA);
        }
        else {
          int v106 = 1;
        }
      }
      else
      {
        int v106 = 0;
      }
      unint64_t v107 = *(void *)(v98 + 16) & 0xFFFFFF00FF00FF00;
      if (v99 == 0x3C003C003C003C00) {
        int v108 = 1;
      }
      else {
        int v108 = 3;
      }
      *(_DWORD *)(v98 + 16) = v108 | v107;
      *(_DWORD *)(v98 + 2CASetDebugMessage("", 0) = HIDWORD(v107);
      uint64_t v109 = v51[2];
      if ((*(unsigned char *)(v109 + 481) & 1) != 0 && *(unsigned __int8 *)(v109 + 480) <= 1u)
      {
        *(unsigned char *)(v109 + 481) &= ~1u;
        int v110 = 1;
      }
      else
      {
        int v110 = 0;
      }
      unsigned int v111 = *((_DWORD *)this + 384);
      if ((v111 & 0x80000000) != 0)
      {
        LODWORD(v127) = v110;
        size_t v112 = v39;
        *((_DWORD *)this + 384) = 0;
        *((_WORD *)this + 77CASetDebugMessage("", 0) = 0;
        uint64_t v113 = *((void *)this + 1);
        memset(v135, 0, sizeof(v135));
        float v114 = i;
        v128[0] = v99;
        CA::CG::GlyphDelegate::GlyphDelegate((uint64_t)v135, (uint64_t)this, v113, v128, v106, (uint64_t)a3, v114);
        CA::CG::emit_glyphs(v113, (uint64_t)v135, (uint64_t)this + 1392, *((void *)a2 + 23), v126, (uint64_t)v124, (uint64_t)v123);
        CA::CG::GlyphDelegate::~GlyphDelegate((CA::CG::GlyphDelegate *)v135);
        uint64_t v115 = *((void *)this + 194);
        if (v115)
        {
          (*(void (**)(void *, uint64_t, void))(*v51 + 520))(v51, v115, 0);
          *((void *)this + 194) = 0;
          *((_DWORD *)this + 386) = -1;
        }
        *((_DWORD *)this + 384) = -1;
        *((void *)this + 188) = 0;
        size_t v39 = v112;
        size_t v40 = v119;
        int v110 = (int)v127;
      }
      uint64_t v43 = v111 >> 31;
      if (v110) {
        *(unsigned char *)(v51[2] + 481) |= 1u;
      }
      unsigned int v41 = v120;
      if (v117 > 0x1000 && v123) {
        free(v123);
      }
      goto LABEL_157;
    }
    size_t v116 = v39;
    unint64_t v55 = 0;
    unint64_t v118 = (void *)((char *)this + 4200);
    while (1)
    {
      uint64_t v125 = v126[v55];
      unint64_t v56 = *(unsigned int *)(v125 + 36);
      float32x4_t v57 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v127, *(_DWORD *)(v125 + 36));
      if (!v57) {
        break;
      }
LABEL_102:
      if (v123)
      {
        int v83 = &v123[24 * v55];
        int v84 = v57[5];
        *(void *)int v83 = &unk_1ED02A018;
        uint64_t v85 = *(void *)(v125 + 20);
        *((_DWORD *)v83 + 2) = v84;
        *((_DWORD *)v83 + 3) = *(_DWORD *)&v41[4 * v55];
        *((void *)v83 + 2) = v85;
      }
      ++v55;
      unint64_t v86 = *((void *)a2 + 23);
      if (v55 >= v86)
      {
        size_t v39 = v116;
        goto LABEL_107;
      }
    }
    float v59 = (unsigned __int8 *)(v125 + 40);
    unsigned int v60 = *(_DWORD *)(v125 + 24) * *(_DWORD *)(v125 + 32);
    if (v60 < 4)
    {
      unsigned int v65 = 0;
      int v61 = 190295070;
    }
    else
    {
      int v61 = 190295070;
      unint64_t v62 = (*(_DWORD *)(v125 + 24) * *(_DWORD *)(v125 + 32));
      do
      {
        int v63 = *(_DWORD *)v59;
        v59 += 4;
        HIDWORD(v64) = (461845907 * ((380141568 * v63) | ((-862048943 * v63) >> 17))) ^ v61;
        LODWORD(v64) = HIDWORD(v64);
        int v61 = 5 * (v64 >> 19) - 430675100;
        v62 -= 4;
      }
      while (v62 > 3);
      unsigned int v65 = v60 & 0xFFFFFFFC;
      unsigned int v60 = v62;
    }
    int v66 = 0;
    if (v60 != 1)
    {
      if (v60 != 2)
      {
        if (v60 != 3) {
          goto LABEL_62;
        }
        int v66 = v59[2] << 16;
      }
      v66 |= v59[1] << 8;
    }
    HIDWORD(v67) = (461845907 * ((380141568 * (v66 ^ *v59)) | ((-862048943 * (v66 ^ *v59)) >> 17))) ^ v61;
    LODWORD(v67) = HIDWORD(v67);
    int v61 = 5 * (v67 >> 19) - 430675100;
    v65 += 4;
LABEL_62:
    unint64_t v68 = *((void *)this + 524);
    if (v68)
    {
      uint8x8_t v69 = (uint8x8_t)vcnt_s8((int8x8_t)v68);
      v69.i16[0] = vaddlv_u8(v69);
      if (v69.u32[0] > 1uLL)
      {
        unint64_t v70 = v56;
        if (v68 <= v56) {
          unint64_t v70 = v56 % v68;
        }
      }
      else
      {
        unint64_t v70 = (v68 - 1) & v56;
      }
      unsigned int v71 = *(void ***)(*v127 + 8 * v70);
      if (v71)
      {
        float32x4_t v57 = *v71;
        if (*v71)
        {
          do
          {
            unint64_t v72 = *((void *)v57 + 1);
            if (v72 == v56)
            {
              if (v57[4] == v56)
              {
                unsigned int v41 = v120;
                goto LABEL_101;
              }
            }
            else
            {
              if (v69.u32[0] > 1uLL)
              {
                if (v72 >= v68) {
                  v72 %= v68;
                }
              }
              else
              {
                v72 &= v68 - 1;
              }
              if (v72 != v70) {
                break;
              }
            }
            float32x4_t v57 = *(_DWORD **)v57;
          }
          while (v57);
        }
      }
    }
    else
    {
      unint64_t v70 = 0;
    }
    unsigned int v73 = -2048144789 * (v61 ^ v65 ^ ((v61 ^ v65) >> 16));
    LODWORD(v58) = v56;
    DWORD1(v58) = (-1028477387 * (v73 ^ (v73 >> 13))) ^ ((-1028477387 * (v73 ^ (v73 >> 13))) >> 16);
    long long v122 = v58;
    float32x4_t v57 = operator new(0x18uLL);
    *(void *)float32x4_t v57 = 0;
    *((void *)v57 + 1) = v56;
    *((void *)v57 + 2) = v122;
    float v74 = (float)(unint64_t)(*((void *)this + 526) + 1);
    v54.i32[0] = *((_DWORD *)this + 1054);
    if (!v68 || (float)(*(float *)v54.i32 * (float)v68) < v74)
    {
      BOOL v75 = (v68 & (v68 - 1)) != 0;
      if (v68 < 3) {
        BOOL v75 = 1;
      }
      unint64_t v76 = v75 | (2 * v68);
      unint64_t v77 = vcvtps_u32_f32(v74 / *(float *)v54.i32);
      if (v76 <= v77) {
        size_t v78 = v77;
      }
      else {
        size_t v78 = v76;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v127, v78);
      unint64_t v68 = *((void *)this + 524);
      if ((v68 & (v68 - 1)) != 0)
      {
        if (v68 <= v56) {
          unint64_t v70 = v56 % v68;
        }
        else {
          unint64_t v70 = v56;
        }
      }
      else
      {
        unint64_t v70 = (v68 - 1) & v56;
      }
    }
    uint64_t v79 = *v127;
    int32x2_t v80 = *(void **)(*v127 + 8 * v70);
    if (v80)
    {
      *(void *)float32x4_t v57 = *v80;
      unsigned int v41 = v120;
    }
    else
    {
      float v81 = v118;
      *(void *)float32x4_t v57 = *v118;
      *float v81 = v57;
      *(void *)(v79 + 8 * v7CASetDebugMessage("", 0) = v81;
      unsigned int v41 = v120;
      if (!*(void *)v57) {
        goto LABEL_100;
      }
      unint64_t v82 = *(void *)(*(void *)v57 + 8);
      if ((v68 & (v68 - 1)) != 0)
      {
        if (v82 >= v68) {
          v82 %= v68;
        }
      }
      else
      {
        v82 &= v68 - 1;
      }
      int32x2_t v80 = (void *)(*v127 + 8 * v82);
    }
    *int32x2_t v80 = v57;
LABEL_100:
    ++*((void *)this + 526);
LABEL_101:
    size_t v40 = v119;
    goto LABEL_102;
  }
LABEL_158:
  if (v40 > 0x1000 && v126) {
    free(v126);
  }
  if (v40 > 0x1000 && v124) {
    free(v124);
  }
  if (v39 > 0x1000 && v41) {
    free(v41);
  }
  return v43;
}

void CA::CG::draw_glyph_paths(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CGFontGetUnitsPerEm(*(CGFontRef *)(a2 + 112));
  if (*(void *)(a2 + 184))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t GlyphPath = CGFontCreateGlyphPath();
      if (GlyphPath)
      {
        int v10 = (const CGPath *)GlyphPath;
        if (a4) {
          CA::CG::stroke_path(a1, GlyphPath, 0, a2 + 8, a4);
        }
        else {
          CA::CG::fill_path(a1);
        }
        CGPathRelease(v10);
      }
      ++v8;
      v7 += 16;
    }
    while (v8 < *(void *)(a2 + 184));
  }
}

uint64_t CA::CG::GlyphDelegate::GlyphDelegate(uint64_t result, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t a6, float a7)
{
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 96) = a3 + 834;
  *(_OWORD *)(a3 + 104) = xmmword_184997E70;
  *(void *)uint64_t result = &unk_1ED028218;
  *(void *)(result + 24) = *a4;
  *(_DWORD *)(result + 32) = a5;
  *(void *)(result + 4CASetDebugMessage("", 0) = a6;
  *(float *)(result + 48) = a7;
  *(float *)(result + 52) = 1.0 / a7;
  *(void *)(result + 88) = 0;
  if (a6)
  {
    float v7 = *(float *)(a6 + 76) * (a7 * *(double *)(a2 + 80));
    unsigned int v8 = ((float)((float)(v7 * 256.0) + 0.5) << 10) | 1;
    unsigned int v9 = vcvtps_s32_f32((float)(v7 * 2.82) + 0.5);
    if (v7 <= 0.6) {
      unsigned int v9 = 0;
    }
    int v10 = 2 * v9;
  }
  else
  {
    unsigned int v8 = 0;
    int v10 = 0;
    unsigned int v9 = 0;
  }
  *(_DWORD *)(result + 6CASetDebugMessage("", 0) = v9;
  *(_DWORD *)(result + 64) = v10;
  *(_DWORD *)(result + 56) = v8 | (a5 << 8);
  return result;
}

void CA::CG::emit_glyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 768))(a1);
  if (v13)
  {
    if ((unint64_t)(8 * a4) > 0x1000)
    {
      int8x16_t v14 = (char *)malloc_type_malloc(8 * a4, 0x2004093837F09uLL);
      if (!v14) {
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](v13);
      int8x16_t v14 = (char *)&v45 - ((8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v14, 8 * a4);
    }
    uint64_t v17 = 0;
    memset(v51, 0, sizeof(v51));
    do
    {
      *(void *)((char *)v51 + v17) = 0;
      v17 += 24;
    }
    while (v17 != 96);
    unint64_t v46 = 8 * a4;
    if (a4)
    {
      uint64_t v18 = 0;
      uint64_t v47 = a4;
      do
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = a5[v18];
        *(int32x2_t *)&long long v15 = vadd_s32(*(int32x2_t *)(v21 + 12), *(int32x2_t *)(a6 + 8 * v18));
        int32x2_t v22 = *(int32x2_t *)(v21 + 20);
        int8x8_t v23 = (int8x8_t)vsub_s32(*(int32x2_t *)&v15, v22);
        int8x8_t v24 = (int8x8_t)vadd_s32(*(int32x2_t *)&v15, v22);
        int32x2_t v25 = (int32x2_t)vext_s8(v23, v24, 4uLL);
        __int32 v26 = v15;
        int v27 = DWORD1(v15);
        do
        {
          double v28 = (int32x2_t *)((char *)v51 + v19);
          uint64_t v29 = *(void *)((char *)v51 + v19);
          if (!v29)
          {
            size_t v39 = &v14[8 * v18];
            *(void *)size_t v39 = 0;
            size_t v40 = v28 + 1;
            goto LABEL_34;
          }
          int v30 = v28[2].i32[0];
          if (v24.i32[0] < v30) {
            int v30 = v24.i32[0];
          }
          int v31 = v28[1].i32[0];
          if ((int)v15 > v31) {
            int v31 = v15;
          }
          if (v30 <= v31) {
            goto LABEL_31;
          }
          int v32 = *(_DWORD *)((char *)&v51[1] + v19 + 4);
          if (SDWORD1(v15) < v32) {
            int v32 = DWORD1(v15);
          }
          int v33 = *(_DWORD *)((char *)v51 + v19 + 12);
          if (v23.i32[1] > v33) {
            int v33 = v23.i32[1];
          }
          if (v32 <= v33)
          {
LABEL_31:
            double v28 = (int32x2_t *)((char *)v51 + v19);
            size_t v39 = &v14[8 * v18];
            *(void *)size_t v39 = v29;
            size_t v40 = v28 + 1;
LABEL_32:
            *size_t v40 = vmin_s32(*v40, vzip1_s32(*(int32x2_t *)&v15, v25));
            *((int32x2_t *)&v51[1] + 3 * v2CASetDebugMessage("", 0) = vmax_s32(*(int32x2_t *)((char *)&v51[1] + 24 * v20), vzip2_s32(v25, *(int32x2_t *)&v15));
            goto LABEL_35;
          }
          ++v20;
          v19 += 24;
        }
        while (v20 != 4);
        uint64_t v48 = v15;
        long long v49 = v15;
        uint64_t v50 = v18;
        for (uint64_t i = 0; i != 4; ++i)
        {
          double v35 = (char **)v51 + 3 * i;
          for (uint64_t j = *v35; j; uint64_t j = *(char **)j)
          {
            uint64_t v37 = *(uint64_t *)((char *)a5 + j - v14);
            *(void *)(a2 + 72) = v37;
            *(void *)(a2 + 8CASetDebugMessage("", 0) = a6 + j - v14;
            CA::OGL::Mosaic::draw(a3, *(uint64_t **)(a2 + 16), *(_DWORD *)(a2 + 56), *(unsigned int *)(a7 + 24 * ((j - v14) >> 3) + 8), a7 + 24 * ((j - v14) >> 3), *(_DWORD *)(a2 + 64) + *(_DWORD *)(v37 + 20), *(_DWORD *)(v37 + 24) + *(_DWORD *)(a2 + 64), 0, a2, 0);
          }
          *double v35 = 0;
          CA::CG::MosaicDelegate::draw_array(*(CA::CG::MosaicDelegate **)(a2 + 16));
        }
        uint64_t v20 = 0;
        uint64_t v18 = v50;
        uint64_t v38 = *(void *)&v51[0];
        double v28 = (int32x2_t *)v51;
        size_t v39 = &v14[8 * v50];
        *(void *)size_t v39 = *(void *)&v51[0];
        size_t v40 = (int32x2_t *)v51 + 1;
        a4 = v47;
        long long v15 = v49;
        __int32 v26 = v48;
        int v27 = HIDWORD(v48);
        if (v38) {
          goto LABEL_32;
        }
LABEL_34:
        v40->i32[0] = v26;
        unsigned int v41 = (char *)v51 + 24 * v20;
        *(int32x2_t *)(v41 + 12) = v25;
        *((_DWORD *)v41 + 5) = v27;
LABEL_35:
        *double v28 = (int32x2_t)v39;
        ++v18;
      }
      while (v18 != a4);
    }
    for (uint64_t k = 0; k != 4; ++k)
    {
      uint64_t v43 = (char *)*((void *)v51 + 3 * k);
      if (v43)
      {
        do
        {
          uint64_t v44 = *(uint64_t *)((char *)a5 + v43 - v14);
          *(void *)(a2 + 72) = v44;
          *(void *)(a2 + 8CASetDebugMessage("", 0) = a6 + v43 - v14;
          CA::OGL::Mosaic::draw(a3, *(uint64_t **)(a2 + 16), *(_DWORD *)(a2 + 56), *(unsigned int *)(a7 + 24 * ((v43 - v14) >> 3) + 8), a7 + 24 * ((v43 - v14) >> 3), *(_DWORD *)(a2 + 64) + *(_DWORD *)(v44 + 20), *(_DWORD *)(v44 + 24) + *(_DWORD *)(a2 + 64), 0, a2, 0);
          uint64_t v43 = *(char **)v43;
        }
        while (v43);
        CA::CG::MosaicDelegate::draw_array(*(CA::CG::MosaicDelegate **)(a2 + 16));
      }
    }
    if (v46 > 0x1000) {
      free(v14);
    }
  }
  else
  {
    for (; a4; --a4)
    {
      uint64_t v16 = *a5++;
      *(void *)(a2 + 72) = v16;
      *(void *)(a2 + 8CASetDebugMessage("", 0) = a6;
      CA::OGL::Mosaic::draw(a3, *(uint64_t **)(a2 + 16), *(_DWORD *)(a2 + 56), *(unsigned int *)(a7 + 8), a7, *(_DWORD *)(a2 + 64) + *(_DWORD *)(v16 + 20), *(_DWORD *)(v16 + 24) + *(_DWORD *)(a2 + 64), 0, a2, 0);
      a7 += 24;
      a6 += 8;
    }
  }
}

void CA::CG::GlyphDelegate::~GlyphDelegate(CA::CG::GlyphDelegate *this)
{
  *(void *)this = &unk_1ED028218;
  unsigned int v2 = (void *)*((void *)this + 11);
  if (v2) {
    free(v2);
  }
  *(void *)this = &unk_1ED028780;
  CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED028218;
  unsigned int v2 = (void *)*((void *)this + 11);
  if (v2) {
    free(v2);
  }
  *(void *)this = &unk_1ED028780;
  CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));

  JUMPOUT(0x185323DC0);
}

float CA::CG::GlyphDelegate::quad(CA::CG::GlyphDelegate *this, int32x2_t *a2, float *a3)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = 4;
  if (*(_DWORD *)(v6 + 92)) {
    uint64_t v7 = 6;
  }
  uint64_t v8 = *(void *)(v6 + 128);
  uint64_t v9 = v8 + 4;
  if ((unint64_t)(v8 + 4) > *(void *)(v6 + 136)
    || (unint64_t v10 = *(void *)(v6 + 112)) != 0 && *(void *)(v6 + 104) + v7 > v10)
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
    uint64_t v8 = *(void *)(v6 + 128);
    uint64_t v9 = v8 + 4;
  }
  uint64_t v11 = *(void *)(v6 + 120) + 48 * v8;
  *(void *)(v6 + 128) = v9;
  CA::OGL::Context::array_indices(v6, v8);
  uint64_t v13 = *((void *)this + 9);
  unsigned int v12 = (int32x2_t *)*((void *)this + 10);
  unsigned int v14 = *((_DWORD *)this + 15);
  float v15 = *((float *)this + 13);
  float result = *a3;
  int v17 = *((_DWORD *)a3 + 1);
  int v18 = *((_DWORD *)a3 + 2);
  int v19 = *((_DWORD *)a3 + 3);
  *(float *)(v11 + 16) = *a3;
  *(_DWORD *)(v11 + 2CASetDebugMessage("", 0) = v17;
  int32x2_t v20 = *(int32x2_t *)(v13 + 12);
  v21.i32[0] = v14;
  v21.i32[0] = vadd_s32(vsub_s32(v20, v21), *a2).u32[0];
  v21.i32[1] = vsub_s32(vadd_s32(v20, vdup_n_s32(v14)), *a2).i32[1];
  float32x2_t v22 = vrnd_f32(vmla_n_f32(vcvt_f32_s32(*v12), vcvt_f32_s32(v21), v15));
  float32x2_t v23 = vmul_n_f32(vcvt_f32_s32(a2[1]), v15);
  v20.i32[0] = vadd_f32(v23, v22).u32[0];
  v21.i32[0] = v20.i32[0];
  v21.i32[1] = vsub_f32(v22, v23).i32[1];
  *(float32x2_t *)uint64_t v11 = v22;
  *(void *)(v11 + 8) = 0x3F80000000000000;
  *(void *)(v11 + 32) = *((void *)this + 3);
  v20.i32[1] = v22.i32[1];
  *(int32x2_t *)(v11 + 48) = v20;
  *(void *)(v11 + 56) = 0x3F80000000000000;
  *(_DWORD *)(v11 + 64) = v18;
  *(_DWORD *)(v11 + 68) = v17;
  *(void *)(v11 + 8CASetDebugMessage("", 0) = *((void *)this + 3);
  *(int32x2_t *)(v11 + 96) = v21;
  *(void *)(v11 + 104) = 0x3F80000000000000;
  *(_DWORD *)(v11 + 112) = v18;
  *(_DWORD *)(v11 + 116) = v19;
  *(void *)(v11 + 128) = *((void *)this + 3);
  v22.i32[1] = v21.i32[1];
  *(float32x2_t *)(v11 + 144) = v22;
  *(void *)(v11 + 152) = 0x3F80000000000000;
  *(float *)(v11 + 16CASetDebugMessage("", 0) = result;
  *(_DWORD *)(v11 + 164) = v19;
  *(void *)(v11 + 176) = *((void *)this + 3);
  return result;
}

char *CA::CG::GlyphDelegate::read(CA::CG::GlyphDelegate *this, int a2, const CA::Bounds *a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v10 = (_DWORD *)*((void *)this + 9);
  int v11 = *((_DWORD *)this + 16);
  if (!v11)
  {
    float result = (char *)(v10 + 10);
    int v16 = v10[7];
    LODWORD(v12) = v10[8];
    goto LABEL_15;
  }
  unsigned int v12 = (unsigned __int8 *)(v10[5] + v11);
  uint64_t v13 = (const unsigned __int8 *)(v10[6] + v11);
  float result = (char *)*((void *)this + 11);
  if (!result)
  {
    LODWORD(v15) = v13 * v12;
    goto LABEL_7;
  }
  unint64_t v15 = (v13 * v12);
  if (*((void *)this + 12) < v15)
  {
    free(result);
LABEL_7:
    if (v15 <= 0x1000) {
      size_t v17 = 4096;
    }
    else {
      size_t v17 = v15;
    }
    *((void *)this + 12) = v17;
    float result = (char *)malloc_type_malloc(v17, 0x2589D4D0uLL);
    *((void *)this + 11) = result;
    int v18 = ~v10[9];
    *((_DWORD *)this + 26) = v18;
    goto LABEL_12;
  }
  int v18 = *((_DWORD *)this + 26);
LABEL_12:
  if (v18 != v10[9])
  {
    bzero(result, (v13 * v12));
    CGBlt_copyBytes();
    float v19 = *(double *)(*((void *)this + 1) + 80) * *((float *)this + 12) * *(float *)(*((void *)this + 5) + 76);
    *((_DWORD *)this + 26) = v10[9];
    float result = (char *)*((void *)this + 11);
  }
  int v16 = 8;
LABEL_15:
  int32x2_t v20 = &result[*((int *)a3 + 1) * (unint64_t)v12];
  if (a2 == 20)
  {
    if (v16 == 16)
    {
      int v40 = *((_DWORD *)a3 + 3);
      if (v40 >= 1)
      {
        unsigned int v41 = &v20[2 * *(_DWORD *)a3];
        int v42 = *((_DWORD *)a3 + 2);
        do
        {
          if (v42 >= 1)
          {
            uint64_t v43 = 0;
            unsigned int v44 = v42 + 1;
            do
            {
              *(_WORD *)&a4[v43] = (2 * *(_WORD *)&v41[v43]) | 1;
              --v44;
              v43 += 2;
            }
            while (v44 > 1);
          }
          v41 += v12;
          a4 += a5;
          BOOL v26 = v40-- <= 1;
        }
        while (!v26);
      }
    }
    else if (v16 == 8)
    {
      int v27 = *((_DWORD *)a3 + 3);
      if (v27 >= 1)
      {
        double v28 = &v20[*(int *)a3];
        int v29 = *((_DWORD *)a3 + 2);
        do
        {
          if (v29 >= 1)
          {
            uint64_t v30 = 0;
            unsigned int v31 = v29 + 1;
            do
            {
              *(_WORD *)&a4[2 * v30] = (2114 * (v28[v30] >> 3)) | 1;
              --v31;
              ++v30;
            }
            while (v31 > 1);
          }
          v28 += v12;
          a4 += a5;
          BOOL v26 = v27-- <= 1;
        }
        while (!v26);
      }
    }
  }
  else if (a2 == 9)
  {
    if (v16 == 16)
    {
      int v32 = *((_DWORD *)this + 8);
      int v33 = &CA::CG::identity_map;
      if (v32 == 2) {
        int v33 = &CA::CG::white_on_black_map;
      }
      if (v32 == 1) {
        double v34 = &CA::CG::black_on_white_map;
      }
      else {
        double v34 = v33;
      }
      int v35 = *((_DWORD *)a3 + 3);
      if (v35 >= 1)
      {
        float16x4_t v36 = &v20[2 * *(_DWORD *)a3];
        do
        {
          int v37 = *((_DWORD *)a3 + 2);
          if (v37 >= 1)
          {
            uint64_t v38 = 0;
            unsigned int v39 = v37 + 1;
            do
            {
              a4[v38] = v34[*(_WORD *)&v36[2 * v38] & 0x1F];
              --v39;
              ++v38;
            }
            while (v39 > 1);
          }
          v36 += v12;
          a4 += a5;
          BOOL v26 = v35-- <= 1;
        }
        while (!v26);
      }
    }
    else if (v16 == 8)
    {
      int v21 = *((_DWORD *)a3 + 3);
      if (v21 >= 1)
      {
        float32x2_t v22 = &v20[*(int *)a3];
        do
        {
          int v23 = *((_DWORD *)a3 + 2);
          if (v23 >= 1)
          {
            uint64_t v24 = 0;
            unsigned int v25 = v23 + 1;
            do
            {
              a4[v24] = v22[v24];
              --v25;
              ++v24;
            }
            while (v25 > 1);
          }
          v22 += v12;
          a4 += a5;
          BOOL v26 = v21-- <= 1;
        }
        while (!v26);
      }
    }
  }
  return result;
}

double CA::CG::GlyphKey::copy(CA::CG::GlyphKey *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v3 = (double *)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1ED02A018;
    *((_DWORD *)v3 + 2) = *((_DWORD *)this + 2);
    *((_DWORD *)v3 + 3) = *((_DWORD *)this + 3);
    double result = *((double *)this + 2);
    void v3[2] = result;
  }
  return result;
}

BOOL CA::CG::GlyphKey::equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 12) == *(unsigned __int16 *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14)
      && *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15);
}

void CA::CG::GlyphKey::~GlyphKey(CA::CG::GlyphKey *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

void CA::CG::FillGlyphs::draw_shape(CA::CG::FillGlyphs *this, CA::CG::Renderer *a2, double a3, int64x2_t a4, double a5, double a6, double a7, int64x2_t a8, uint64_t a9, const CA::CG::ShadowStyle *a10)
{
  if ((CA::CG::draw_glyph_bitmaps(a2, this, 0, a10, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    CA::CG::draw_glyph_paths((uint64_t)a2, (uint64_t)this, 192, 0);
  }
}

uint64_t CA::CG::FillGlyphs::shape_type(CA::CG::FillGlyphs *this, CA::CG::Renderer *a2)
{
  if (!*((void *)this + 23)) {
    return 0;
  }
  if (*((unsigned char *)this + 103)) {
    return 3;
  }
  return 2;
}

BOOL CA::CG::FillGlyphs::can_coalesce(CA::CG::FillGlyphs *this, const CA::CG::FillGlyphs *a2)
{
  if (*((double *)this + 1) != *((double *)a2 + 1)
    || *((double *)this + 2) != *((double *)a2 + 2)
    || *((double *)this + 3) != *((double *)a2 + 3)
    || *((double *)this + 4) != *((double *)a2 + 4)
    || *((double *)this + 5) != *((double *)a2 + 5)
    || *((double *)this + 6) != *((double *)a2 + 6)
    || *((_DWORD *)this + 14) != *((_DWORD *)a2 + 14)
    || *((void *)this + 8) != *((void *)a2 + 8)
    || *((void *)this + 9) != *((void *)a2 + 9)
    || *((void *)this + 11) != *((void *)a2 + 11))
  {
    return 0;
  }
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = *((void *)a2 + 10);
  if (v4 && v5)
  {
    if (!CA::CG::DeviceColor::Pattern::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v4 | v5)
  {
    return 0;
  }
  if (*((_DWORD *)this + 25) != *((_DWORD *)a2 + 25)
    || *((void *)this + 14) != *((void *)a2 + 14)
    || *((double *)this + 15) != *((double *)a2 + 15)
    || *((_DWORD *)this + 32) != *((_DWORD *)a2 + 32)
    || *((_DWORD *)this + 33) != *((_DWORD *)a2 + 33)
    || *((double *)this + 17) != *((double *)a2 + 17)
    || *((double *)this + 18) != *((double *)a2 + 18)
    || *((double *)this + 19) != *((double *)a2 + 19))
  {
    return 0;
  }
  return *((double *)this + 20) == *((double *)a2 + 20);
}

void *CA::CG::FillGlyphs::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  int v11 = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (v11)
  {
    Color = (CGColor *)CGStyleGetColor();
    CA::CG::DrawOp::DrawOp((uint64_t)v11, a2, a1, a4, a5, Color, 2112);
    void *v11 = &unk_1ED027588;
    v11[18] = a1;
    atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
    v11[19] = a3;
    void *v11 = &unk_1ED028C88;
  }
  return v11;
}

void CA::CG::FillGlyphsShadow::draw_shadow(CA::CG::FillGlyphsShadow *this, CA::CG::Renderer *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (((*(uint64_t (**)(void))(**((void **)this + 18) + 136))(*((void *)this + 18)) & 5) == 0) {
    goto LABEL_5;
  }
  unsigned int v12 = *(float16x4_t **)(v4 + 16);
  float16x4_t v13 = v12[1];
  unsigned int v14 = (CA::CG::Renderer *)*((void *)this + 18);
  LOWORD(_DCASetDebugMessage("", 0) = *((_WORD *)v14 + 47);
  *(short float *)v7.i16 = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0));
  if (*(short float *)&_D0 != COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
  {
    __asm { FCVT            S0, H0 }
    float32x4_t v7 = vcvtq_f32_f16(v13);
    _D0 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_n_f32(v7, _S0)));
    *(double *)&v12[1] = _D0;
    unsigned int v14 = (CA::CG::Renderer *)*((void *)this + 18);
  }
  char v20 = CA::CG::draw_glyph_bitmaps(a2, v14, *((float32x2_t **)this + 19), v5, _D0, (int64x2_t)v7, v8, v9, v10, v11);
  *(float16x4_t *)(*(void *)(v4 + 16) + 8) = v13;
  if ((v20 & 1) == 0)
  {
LABEL_5:
    CA::CG::DrawShadow::draw_shadow(this, a2);
  }
}

uint64_t CA::CG::FillGlyphsShadow::shape_type(CA::CG::FillGlyphsShadow *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(void, CA::CG::Renderer *))(**((void **)this + 18) + 128))(*((void *)this + 18), a2);
}

void CA::CG::FillGlyphsShadow::~FillGlyphsShadow(CA::CG::FillGlyphsShadow *this)
{
  *(void *)this = &unk_1ED027588;
  unsigned int v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  unsigned int v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

BOOL CA::CG::FillGlyphs::may_flush(uint64_t a1, uint64_t a2, int a3)
{
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 8) + 184))(*(void *)(a2 + 8), 19)) {
    return 1;
  }
  BOOL result = 1;
  if (a3 != 12 && (a3 - 1) <= 0x18) {
    return (*(unsigned char *)(a1 + 103) & 1) == 0;
  }
  return result;
}

float64x2_t *CA::CG::FillGlyphs::compute_dod(CA::CG::FillGlyphs *this, float64x2_t *a2)
{
  return CA::CG::DrawGlyphs::compute_dod_(this, a2, 0.0, 192);
}

float64x2_t *CA::CG::DrawGlyphs::compute_dod_(CA::CG::DrawGlyphs *this, float64x2_t *a2, double a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  float32x4_t v7 = (CGFont *)*((void *)this + 14);
  bboxes.origin.double x = 0.0;
  if (CGFontGetVariationAxes()) {
    BOOL v8 = *(void *)&bboxes.origin.x == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    CGFontGetVariations();
  }
  UnitsPerEuint64_t m = CGFontGetUnitsPerEm(v7);
  CGFloat v10 = -(double)UnitsPerEm;
  CGFloat v11 = (double)UnitsPerEm * 2.4;
  FontBBodouble x = CGFontGetFontBBox(v7);
  v30.origin.double x = v10;
  v30.origin.double y = v10;
  v30.size.double width = v11;
  v30.size.double height = v11;
  CGRect v31 = CGRectUnion(v30, FontBBox);
  double x = v31.origin.x;
  double y = v31.origin.y;
  double width = v31.size.width;
  double height = v31.size.height;
  uint64_t v16 = *((void *)this + 23);
  if (v16)
  {
    size_t v17 = (double *)((char *)this + a4 + 8);
    double v18 = -1.79769313e308;
    double v19 = 1.79769313e308;
    double v20 = 1.79769313e308;
    double v21 = -1.79769313e308;
    do
    {
      double v22 = *(v17 - 1);
      double v23 = *v17;
      if (v22 < v19) {
        double v19 = *(v17 - 1);
      }
      if (v23 < v20) {
        double v20 = *v17;
      }
      if (v22 > v18) {
        double v18 = *(v17 - 1);
      }
      if (v23 > v21) {
        double v21 = *v17;
      }
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  else
  {
    double v20 = 1.79769313e308;
    double v21 = -1.79769313e308;
    double v18 = -1.79769313e308;
    double v19 = 1.79769313e308;
  }
  double v26 = *((double *)this + 15);
  double v24 = v26 / (double)CGFontGetUnitsPerEm(v7);
  a2[1].f64[0] = v18 - v19 + v24 * width;
  a2[1].f64[1] = v21 - v20 + v24 * height;
  a2->f64[0] = v19 + v24 * x;
  a2->f64[1] = v20 + v24 * y;
  CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 136));
  if (a3 > 0.0) {
    CA::BoundsImpl::inset(a2->f64, -a3, -a3);
  }
  return CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
}

void CA::CG::FillGlyphs::~FillGlyphs(CA::CG::FillGlyphs *this)
{
  *(void *)this = &unk_1ED0274B8;
  unsigned int v2 = (const void *)*((void *)this + 14);
  if (v2) {
    CFRelease(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED0274B8;
  unsigned int v2 = (const void *)*((void *)this + 14);
  if (v2) {
    CFRelease(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

void CA::CG::StrokeGlyphs::draw_shape(CA::CG::StrokeGlyphs *this, CA::CG::Renderer *a2)
{
}

uint64_t CA::CG::StrokeGlyphs::shape_type(CA::CG::StrokeGlyphs *this, CA::CG::Renderer *a2)
{
  return 2 * (*((void *)this + 23) != 0);
}

float64x2_t *CA::CG::StrokeGlyphs::compute_dod(CA::CG::StrokeGlyphs *this, float64x2_t *a2)
{
  return CA::CG::DrawGlyphs::compute_dod_(this, a2, *((double *)this + 25) * 0.5, 232);
}

void CA::CG::StrokeGlyphs::~StrokeGlyphs(CA::CG::StrokeGlyphs *this)
{
  *(void *)this = &unk_1ED027DF0;
  if (*((void *)this + 26)) {
    CGDashRelease();
  }
  *(void *)this = &unk_1ED0274B8;
  unsigned int v2 = (const void *)*((void *)this + 14);
  if (v2) {
    CFRelease(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027DF0;
  if (*((void *)this + 26)) {
    CGDashRelease();
  }
  *(void *)this = &unk_1ED0274B8;
  unsigned int v2 = (const void *)*((void *)this + 14);
  if (v2) {
    CFRelease(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

void CA::Render::PortalLayer::show(CA::Render::PortalLayer *this, int a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
LABEL_62:
      x_log_();
      return;
    }
    uint64_t v29 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = *((_DWORD *)this + 10);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v32) = v30;
      double v26 = "portal-layer %x";
      int v27 = v29;
      uint32_t v28 = 8;
      goto LABEL_65;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      float32x4_t v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)this + 3);
        *(_DWORD *)long long buf = 134217984;
        uint64_t v32 = v8;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(portal-layer 0x%lx", buf, 0xCu);
      }
    }
    double v9 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v9);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      CGFloat v10 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)this + 4);
        *(_DWORD *)long long buf = 134217984;
        uint64_t v32 = v11;
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "(sourceLayer 0x%lx)", buf, 0xCu);
      }
    }
    CA::Render::show_newline(v9);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *((_DWORD *)this + 10);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v32) = v13;
        _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "(sourceContext %x)", buf, 8u);
      }
    }
    if (*((unsigned char *)this + 13))
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "(hidesSourceLayer true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 2) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(matchesOpacity true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 4) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "(matchesPosition true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 8) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        size_t v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, "(matchesTransform true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x10) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        double v18 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "(allowsBackdropGroups true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x20) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        double v19 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "(crossDisplay true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x80) != 0)
    {
      CA::Render::show_newline(v9);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        double v20 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v20, OS_LOG_TYPE_DEFAULT, "(allowedInContextTransform true)", buf, 2u);
        }
      }
    }
    uint64_t v21 = *((void *)this + 7);
    if (v21)
    {
      if (!*(unsigned char *)(v21 + 213))
      {
        CA::Render::show_newline(v9);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          double v22 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "(source layer not found)", buf, 2u);
          }
        }
      }
      uint64_t v23 = *((void *)this + 7);
      if (v23 && (*(unsigned char *)(v23 + 13) & 0x10) != 0)
      {
        CA::Render::show_newline(v9);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          double v24 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_DEFAULT, "(stop-secure-superlayers-validation true)", buf, 2u);
          }
        }
      }
    }
    CA::Render::Context::show_source_layer(*((unsigned int *)this + 10), *((CA::Render::Object **)this + 4), v9, a3);
    if (x_log_hook_p()) {
      goto LABEL_62;
    }
    uint64_t v25 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      double v26 = ")";
      int v27 = v25;
      uint32_t v28 = 2;
LABEL_65:
      _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_DEFAULT, v26, buf, v28);
    }
  }
}

void *CA::Render::PortalState::match_cross_display_layer(uint64_t a1, _OWORD *a2, _DWORD *a3, void *a4)
{
  os_unfair_lock_lock(&CA::Render::_cross_display_sources_lock);
  uint64_t v8 = (char *)CA::Render::_cross_display_sources;
  if (CA::Render::_cross_display_sources != (_UNKNOWN *)qword_1E8F84BC8)
  {
    while (*(void *)v8 != a1)
    {
      v8 += 160;
      if (v8 == (char *)qword_1E8F84BC8) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == (char *)qword_1E8F84BC8)
  {
LABEL_8:
    size_t v17 = 0;
  }
  else
  {
    long long v9 = *((_OWORD *)v8 + 2);
    long long v10 = *((_OWORD *)v8 + 3);
    long long v11 = *((_OWORD *)v8 + 4);
    *a2 = *((_OWORD *)v8 + 1);
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
    long long v12 = *((_OWORD *)v8 + 6);
    long long v13 = *((_OWORD *)v8 + 7);
    long long v14 = *((_OWORD *)v8 + 8);
    a2[4] = *((_OWORD *)v8 + 5);
    a2[5] = v12;
    a2[6] = v13;
    a2[7] = v14;
    *a3 = *((_DWORD *)v8 + 36);
    *a4 = *((void *)v8 + 19);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v16 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x98uLL, 0x743898A5uLL);
    size_t v17 = v16;
    if (v16) {
      CA::Render::Layer::Layer((uint64_t)v16, *((void *)v8 + 1));
    }
  }
  os_unfair_lock_unlock(&CA::Render::_cross_display_sources_lock);
  return v17;
}

void CAMLWriterFreeElementList(_CAMLWriterElement *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    unsigned int v2 = a1;
    do
    {
      var1 = v2->var1;
      if (var1) {
        CAMLWriterFreeElementList(var1);
      }
      var4 = v2->var4;
      if (var4) {
        CFRelease(var4);
      }
      var5 = v2->var5;
      if (var5) {
        CFRelease(var5);
      }
      CAMLWriterFreeAttributeList(v2->var6);
      unsigned int v2 = v2->var2;
    }
    while (v2);
    do
    {
      var2 = v1->var2;
      free(v1);
      uint64_t v1 = var2;
    }
    while (var2);
  }
}

void CAMLWriterFreeAttributeList(_CAMLWriterAttribute *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    unsigned int v2 = a1;
    do
    {
      uint64_t v3 = (const void *)*((void *)v2 + 2);
      if (v3) {
        CFRelease(v3);
      }
      unsigned int v2 = *(_CAMLWriterAttribute **)v2;
    }
    while (v2);
    do
    {
      uint64_t v4 = *(_CAMLWriterAttribute **)v1;
      free(v1);
      uint64_t v1 = v4;
    }
    while (v4);
  }
}

void CAMLWriterNewline(_CAMLWriterPriv *a1, unsigned int a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  size_t v3 = (a2 >> 2) & 0x1FFFFFFF;
  size_t v4 = (2 * a2) & 6;
  size_t v5 = v4 + ((2 * a2) >> 3) + 1;
  MEMORY[0x1F4188790](a1);
  float32x4_t v7 = (UInt8 *)v8 - v6;
  bzero((char *)v8 - v6, v5);
  UInt8 *v7 = 10;
  memset(v7 + 1, 9, v3);
  memset(&v7[v3 + 1], 32, v4);
  CFDataAppendBytes((CFMutableDataRef)a1, v7, v5);
}

void CAMLWriterPrintf(_CAMLWriterPriv *a1, char *__s, ...)
{
  va_start(va, __s);
  va_copy(v22, va);
  while (1)
  {
    size_t v4 = strchr(__s, 37);
    if (!v4) {
      break;
    }
    size_t v5 = v4;
    CFIndex v6 = v4 - __s;
    if (v4 != __s) {
      CFDataAppendBytes(a1->var0, (const UInt8 *)__s, v6);
    }
    int v7 = v5[1];
    if (v7 == 115)
    {
      double v19 = va_arg(v22, const char *);
      size_t v20 = strlen(v19);
      if (!v20) {
        goto LABEL_38;
      }
      CFIndex v10 = v20;
      var0 = a1->var0;
      long long v9 = (const UInt8 *)v19;
      goto LABEL_37;
    }
    if (v7 != 83)
    {
      if (v7 != 37) {
        goto LABEL_38;
      }
      var0 = a1->var0;
      long long v9 = (const UInt8 *)"%";
      CFIndex v10 = 1;
      goto LABEL_37;
    }
    long long v11 = va_arg(v22, void *);
    long long v12 = (const char *)objc_msgSend(v11, "UTF8String", v6);
    int64_t v13 = strlen(v12);
    if (!v13) {
      goto LABEL_38;
    }
    if (v13 >= 1)
    {
      long long v14 = &v12[v13];
      long long v9 = (const UInt8 *)v12;
      while (*v12 > 0x3E || ((1 << *v12) & 0x500000C400000000) == 0)
      {
        ++v12;
LABEL_30:
        if (v12 >= v14) {
          goto LABEL_35;
        }
      }
      if (v12 - (const char *)v9 >= 1) {
        CFDataAppendBytes(a1->var0, v9, v12 - (const char *)v9);
      }
      unsigned int v16 = *(unsigned __int8 *)v12;
      if (v16 > 0x3B)
      {
        if (v16 == 62)
        {
          size_t v17 = "&gt;";
        }
        else
        {
          if (v16 != 60) {
            goto LABEL_28;
          }
          size_t v17 = "&lt;";
        }
      }
      else if (v16 == 34)
      {
        size_t v17 = "&quot;";
      }
      else
      {
        size_t v17 = "&amp;";
        if (v16 != 38) {
LABEL_28:
        }
          size_t v17 = "&apos;";
      }
      size_t v18 = strlen(v17);
      CFDataAppendBytes(a1->var0, (const UInt8 *)v17, v18);
      long long v9 = (const UInt8 *)++v12;
      goto LABEL_30;
    }
    long long v9 = (const UInt8 *)v12;
LABEL_35:
    CFIndex v10 = v12 - (const char *)v9;
    if (v12 - (const char *)v9 >= 1)
    {
      var0 = a1->var0;
LABEL_37:
      CFDataAppendBytes(var0, v9, v10);
    }
LABEL_38:
    __s = v5 + 2;
  }
  if (*__s)
  {
    size_t v21 = strlen(__s);
    if (v21) {
      CFDataAppendBytes(a1->var0, (const UInt8 *)__s, v21);
    }
  }
}

BOOL CAMLWriterTypesEqual(const __CFString *a1, const __CFString *a2)
{
  return CFEqual(a1, a2)
      || CFEqual(a1, @"integer") && (CFEqual(a2, @"real") || CFEqual(a2, @"BOOL"))
      || CFEqual(a1, @"string") && CFEqual(a2, @"NSString");
}

void CAMLWriterElementRemoveAttribute(_CAMLWriterElement *a1, int a2)
{
  p_var6 = (_CAMLWriterAttribute *)&a1->var6;
  while (1)
  {
    size_t v4 = p_var6;
    p_var6 = *(_CAMLWriterAttribute **)p_var6;
    if (!p_var6) {
      break;
    }
    if (*((_DWORD *)p_var6 + 2) == a2)
    {
      size_t v5 = *(_CAMLWriterAttribute **)p_var6;
      *(void *)size_t v4 = *(void *)p_var6;
      if (!v5) {
        a1->var7 = (_CAMLWriterAttribute **)p_var6;
      }
      *(void *)p_var6 = 0;
      CAMLWriterFreeAttributeList(p_var6);
      return;
    }
  }
}

BOOL CAMLWriterIdentifierNeedsQuoting(CFStringRef theString)
{
  if (!CAMLWriterIdentifierNeedsQuoting(__CFString const*)::quoted_set)
  {
    Mutable = CFCharacterSetCreateMutable(0);
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
    CFCharacterSetUnion(Mutable, Predefined);
    CFCharacterSetAddCharactersInString(Mutable, @"_");
    CFCharacterSetInvert(Mutable);
    CAMLWriterIdentifierNeedsQuoting(__CFString const*)::quoted_set = (uint64_t)CFCharacterSetCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  v5.length = CFStringGetLength(theString);
  v5.locatiouint64_t n = 0;
  return CFStringFindCharacterFromSet(theString, (CFCharacterSetRef)CAMLWriterIdentifierNeedsQuoting(__CFString const*)::quoted_set, v5, 0, 0) != 0;
}

void path_callback(void *a1, const CGPathElement *a2)
{
  int v4 = 1;
  uint64_t v5 = 109;
  unint64_t v6 = 2;
  switch(a2->type)
  {
    case kCGPathElementMoveToPoint:
      goto LABEL_6;
    case kCGPathElementAddLineToPoint:
      uint64_t v5 = 108;
      unint64_t v6 = 2;
      goto LABEL_6;
    case kCGPathElementAddQuadCurveToPoint:
      uint64_t v5 = 113;
      unint64_t v6 = 4;
      goto LABEL_6;
    case kCGPathElementAddCurveToPoint:
      uint64_t v5 = 99;
      unint64_t v6 = 6;
      goto LABEL_6;
    case kCGPathElementCloseSubpath:
      int v4 = 0;
      unint64_t v6 = 0;
      uint64_t v5 = 104;
LABEL_6:
      if ([a1 length]) {
        [a1 appendString:@" "];
      }
      if (v4)
      {
        CFStringRef v7 = CACreateStringWithDoubleArray((uint64_t)a2->points, v6, 1.0e-12);
        if (v7)
        {
          CFStringRef v8 = v7;
          [a1 appendFormat:@"%@ %c", v7, v5];
          CFRelease(v8);
        }
      }
      else
      {
        objc_msgSend(a1, "appendFormat:", @"%c", v5);
      }
      break;
    default:
      return;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::detachable_layer_impl()
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::compressed_pixel_format(CA::WindowServer::IOMFBDisplay *this, uint64_t a2)
{
  return a2;
}

BOOL CA::WindowServer::IOMFBDisplay::display_supports_rotation_p(CA::WindowServer::IOMFBDisplay *this, int a2, CA::WindowServer::Surface *a3)
{
  return !a2 || *((unsigned char *)this + 28151) != 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::max_src_bandwidth_per_pipe(CA::WindowServer::IOMFBDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::max_src_rect_height_by_pipes(CA::WindowServer::IOMFBDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::max_src_rect_width_by_pipes(CA::WindowServer::IOMFBDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::valid_bandwidth_p(CA::WindowServer::IOMFBDisplay *this, float a2, float a3)
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::valid_clocking_p(CA::WindowServer::IOMFBDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_physical_and_canvas_sizes(__n128 *this, float64x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  CFIndex v10 = &this[1604].n128_i8[8];
  if (!this[1632].n128_u8[9])
  {
    IOMobileFramebufferGetDisplaySize();
    int v11 = (int)0.0;
    long long v12 = getenv("CA_LCD_WIDTH");
    if (v12) {
      int v13 = atoi(v12);
    }
    else {
      int v13 = (int)0.0;
    }
    int v14 = (int)0.0;
    *(_DWORD *)CFIndex v10 = v13;
    unint64_t v15 = getenv("CA_LCD_HEIGHT");
    if (v15) {
      int v16 = atoi(v15);
    }
    else {
      int v16 = (int)0.0;
    }
    *((_DWORD *)v10 + 1) = v16;
    double v17 = 1.0;
    BOOL v18 = v11 < 1 || v13 == v11;
    double v19 = 1.0;
    if (!v18) {
      double v19 = (double)v13 / (double)v11;
    }
    this[1605].n128_f64[1] = v19;
    if (v14 >= 1 && v16 != v14) {
      double v17 = (double)v16 / (double)v14;
    }
    this[1606].n128_f64[0] = v17;
    IOMobileFramebufferGetCanvasSizes();
    this[1605].n128_u64[0] = (unint64_t)vmovn_s64(vcvtq_s64_f64(MEMORY[0xFFFFFFFF0]));
    size_t v21 = getenv("CA_CANVAS_WIDTH");
    if (v21) {
      *((_DWORD *)v10 + 2) = atoi(v21);
    }
    va_list v22 = getenv("CA_CANVAS_HEIGHT");
    if (v22) {
      *((_DWORD *)v10 + 3) = atoi(v22);
    }
    IOMobileFramebufferGetDisplayArea();
    a2 = vcvtq_f64_f32(0);
    this[1634] = (__n128)a2;
    v10[449] = 1;
  }
  return CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)&this[1604].n128_i64[1], (uint64_t)&this[1605], &this[1605].n128_f64[1], a2.f64[0], a3, a4, a5, a6, a7, a8, a9);
}

void *std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (int)a2;
  unint64_t v6 = *((void *)a1 + 1);
  if (v6)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = (int)a2;
      if ((int)a2 >= v6) {
        unint64_t v10 = (int)a2 % v6;
      }
    }
    else
    {
      unint64_t v10 = (v6 - 1) & (int)a2;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      long long v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v5)
          {
            if (CA::WindowServer::Display::Mode::operator==(v12[2], a2)) {
              return v12;
            }
          }
          else
          {
            if (v9 > 1)
            {
              if (v13 >= v6) {
                v13 %= v6;
              }
            }
            else
            {
              v13 &= v6 - 1;
            }
            if (v13 != v10) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  long long v12 = operator new(0x30uLL);
  *long long v12 = 0;
  v12[1] = v5;
  uint64_t v14 = *a3;
  uint64_t v12[3] = 0;
  v12[4] = 0;
  uint64_t v12[2] = v14;
  *((_DWORD *)v12 + 1CASetDebugMessage("", 0) = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v6 || (float)(v16 * (float)v6) < v15)
  {
    BOOL v17 = 1;
    if (v6 >= 3) {
      BOOL v17 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v6);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v6)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          size_t v21 = operator new(8 * *(void *)&prime);
          va_list v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          double v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *double v24 = *v30;
                  *int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                double v24 = v30;
                int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        float16x4_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v6 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v10 = v5 % v6;
      }
      else {
        unint64_t v10 = v5;
      }
    }
    else
    {
      unint64_t v10 = (v6 - 1) & v5;
    }
  }
  uint64_t v32 = *(void **)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v10);
  if (v33)
  {
    *long long v12 = *v33;
LABEL_72:
    *uint64_t v33 = v12;
    goto LABEL_73;
  }
  *long long v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v32[v10] = a1 + 4;
  if (*v12)
  {
    unint64_t v34 = *(void *)(*v12 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v34 >= v6) {
        v34 %= v6;
      }
    }
    else
    {
      v34 &= v6 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v12;
}

void CA::WindowServer::IOMFBDisplay::update_display_bandwidth_limits(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display::Mode *a2)
{
  v10[7] = *MEMORY[0x1E4F143B8];
  int v4 = (char *)this + 27024;
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  if (IOMobileFramebufferGetBandwidth())
  {
    if (!*((void *)this + 3374)) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v5 = __p[0];
    *((_OWORD *)this + 1687) = *(_OWORD *)__p;
    *((_OWORD *)this + 1688) = v8;
    if (!v5)
    {
LABEL_8:
      *int v4 = 0;
      goto LABEL_9;
    }
  }
  if (!*((void *)this + 3375) || !*((void *)this + 3376) || *((double *)this + 3377) == 0.0) {
    goto LABEL_8;
  }
LABEL_9:
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2304))(this))
  {
    *(_DWORD *)&v6.var2 = 0;
    *(void *)&v6.var0 = 0;
    os_unfair_lock_lock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)__p, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::get_per_mode_info((uint64_t)__p, *(void *)a2, &v6);
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v10);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v9);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_WORD *)(v4 + 25) = *(_WORD *)&v6.var2;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::update_timing_info(uint64_t this)
{
  unint64_t v1 = *(void *)(this + 26448);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 27104);
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
    v4.i16[0] = vaddlv_u8(v4);
    unint64_t v5 = v4.u32[0];
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v6 = (int)v3;
      if ((int)v3 >= v1) {
        unint64_t v6 = (int)v3 % v1;
      }
    }
    else
    {
      unint64_t v6 = (v1 - 1) & (int)v3;
    }
    CFStringRef v7 = *(void **)(*(void *)(this + 26440) + 8 * v6);
    if (v7)
    {
      long long v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v9 = v8[1];
          if (v9 == (int)v3)
          {
            this = CA::WindowServer::Display::Mode::operator==(v8[2], v3);
            if (this)
            {
              if (!*(void *)(v2 + 27120))
              {
                IOMobileFramebufferGetSupportedDigitalOutModes();
                return (uint64_t)X::CFRef<__CFDictionary const*>::operator=((const void **)(v2 + 27120), 0);
              }
              return this;
            }
          }
          else
          {
            if (v5 > 1)
            {
              if (v9 >= v1) {
                v9 %= v1;
              }
            }
            else
            {
              v9 &= v1 - 1;
            }
            if (v9 != v6) {
              return this;
            }
          }
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_all_layers_to_null(uint64_t this, int a2)
{
  buf[5] = *(Rect *)MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned int *)(this + 25712);
  if (!*(unsigned char *)(this + 28162))
  {
    uint64_t v4 = this;
    unsigned int v36 = 0;
    unint64_t v5 = (CA::IOMobileFramebuffer *)(this + 25568);
    CA::IOMobileFramebuffer::swap_begin((CA::IOMobileFramebuffer *)(this + 25568), &v36);
    IOMobileFramebufferSwapSetBackgroundColor();
    unint64_t v6 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 1656))(v4)) {
      uint64_t v7 = 4;
    }
    else {
      uint64_t v7 = 3;
    }
    do
    {
      memset(buf, 0, 32);
      memset(v35, 0, sizeof(v35));
      CA::WindowServer::IOMFBDisplay::swap_set_layer((CA::WindowServer::IOMFBDisplay *)v4, v6, 0, buf, (const Rect *)v35, 0, v36, 0, *(unsigned int *)v34, v34[4]);
      unint64_t v6 = (CA::Render::Update *)((char *)v6 + 1);
    }
    while ((CA::Render::Update *)v7 != v6);
    int v8 = IOMobileFramebufferSwapEnd();
    if (v8)
    {
      int v9 = v8;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v10 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          int v11 = *(_DWORD *)(v4 + 24);
          *(_DWORD *)&buf[0].top = 67109376;
          *(_DWORD *)&buf[0].bottouint64_t m = v11;
          buf[1].top = 1024;
          *(_DWORD *)&buf[1].left = v9;
          _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_ERROR, "display %u swap_end returned error %x\n", (uint8_t *)buf, 0xEu);
        }
      }
    }
    if (*((unsigned char *)v2 + 2455))
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      unint64_t v13 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xC8uLL, 0x743898A5uLL);
      uint64_t v14 = v13;
      if (v13)
      {
        *((void *)v13 + 13) = 0;
        *((void *)v13 + 1CASetDebugMessage("", 0) = 0;
        *((void *)v13 + 9) = v13 + 80;
        *((void *)v13 + 11) = 0;
        *((void *)v13 + 12) = v13 + 104;
        *((void *)v13 + 14) = 0;
        *((void *)v13 + 15) = v13 + 152;
        *((void *)v13 + 16) = v13 + 152;
        *((void *)v13 + 17) = v13 + 152;
        *((void *)v13 + 18) = 4;
      }
      *(_DWORD *)unint64_t v13 = v36;
      *(_WORD *)(v13 + 197) |= 0x100u;
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 25940));
      float v15 = *(void **)(v4 + 25952);
      unint64_t v16 = *(void *)(v4 + 25960);
      if ((unint64_t)v15 >= v16)
      {
        uint64_t v18 = *((void *)v2 + 29);
        uint64_t v19 = ((uint64_t)v15 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          abort();
        }
        uint64_t v20 = v16 - v18;
        uint64_t v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint8_t buf[4] = (Rect)(v4 + 25960);
        if (v22) {
          unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        double v24 = (void *)(v22 + 8 * v19);
        Rect v25 = (Rect)(v22 + 8 * v23);
        buf[3] = v25;
        *double v24 = v14;
        Rect v17 = (Rect)(v24 + 1);
        buf[2] = (Rect)(v24 + 1);
        uint8x8_t v26 = *(void **)(v4 + 25952);
        unint64_t v27 = *(void **)(v4 + 25944);
        if (v26 == v27)
        {
          int64x2_t v29 = vdupq_n_s64((unint64_t)v26);
        }
        else
        {
          do
          {
            uint64_t v28 = *--v26;
            *uint8x8_t v26 = 0;
            *--double v24 = v28;
          }
          while (v26 != v27);
          int64x2_t v29 = *(int64x2_t *)(v2 + 58);
          Rect v25 = buf[3];
          Rect v17 = buf[2];
        }
        *(void *)(v4 + 25944) = v24;
        *(Rect *)(v4 + 25952) = v17;
        *(int64x2_t *)&buf[1].top = v29;
        Rect v30 = *(Rect *)(v4 + 25960);
        *(Rect *)(v4 + 2596CASetDebugMessage("", 0) = v25;
        buf[3] = v30;
        buf[0] = *(Rect *)v29.i8;
        std::__split_buffer<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *float v15 = v14;
        Rect v17 = (Rect)(v15 + 1);
      }
      *(Rect *)(v4 + 25952) = v17;
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 25940));
    }
    if (a2) {
      CA::IOMobileFramebuffer::swap_wait(v5);
    }
    unint64_t v31 = (pthread_mutex_t *)(v4 + 25720);
    pthread_mutex_lock(v31);
    uint64_t v32 = *v2;
    if (v32)
    {
      uint64_t v33 = v2 + 24;
      do
      {
        *uint64_t v33 = 0;
        v33 += 12;
        --v32;
      }
      while (v32);
    }
    *((unsigned char *)v2 + 2437) = 1;
    return pthread_mutex_unlock(v31);
  }
  return this;
}

void CA::WindowServer::IOMFBDisplay::post_hotplug_log(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = (int *)((char *)this + 27096);
  if (*((unsigned char *)this + 28138))
  {
    if (!*((unsigned char *)this + 28154))
    {
      unint64_t v3 = *((void *)this + 3388);
      if (v3 + 1 >= 2 && (v3 & 0x10000000) == 0)
      {
        uint64_t v4 = (v3 >> 14) & 0x3FFF;
        double v5 = (double)((v3 >> 29) & 0x1FFFFFF) * 0.0000152587891;
        unsigned int v6 = ((v3 >> 55) & 0x1F) - 1;
        if (v6 > 0x1B) {
          uint64_t v7 = "";
        }
        else {
          uint64_t v7 = off_1E52739E0[v6];
        }
        if ((v3 & 0x4000000000000000) != 0) {
          int v8 = "high";
        }
        else {
          int v8 = "low";
        }
        CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%dx%d@%.3f %s, %s bandwidth", *((void *)this + 3388) & 0x3FFFLL, v4, *(void *)&v5, v7, v8);
        os_unfair_lock_lock((os_unfair_lock_t)this + 98);
        CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)__p, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
        os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
        unint64_t v10 = __p[0];
        int64_t v11 = (char *)__p[1] - (char *)__p[0];
        if (__p[1] == __p[0])
        {
          long long v12 = 0;
        }
        else
        {
          if ((char *)__p[1] - (char *)__p[0] < 0) {
            abort();
          }
          long long v12 = std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v11 >> 3);
          memmove(v12, v10, v11);
          v11 += (int64_t)v12;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v26);
        std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)&v25[1]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((void *)v11 != v12)
        {
          unint64_t v13 = (unint64_t *)((char *)v12 + 8);
          uint64_t v14 = (unint64_t *)v12;
          if ((char *)v12 + 8 != (void *)v11)
          {
            uint64_t v14 = (unint64_t *)v12;
            while (1)
            {
              unint64_t v15 = *v13;
              if (((*v14 >> 54) & 1) != ((*v13 >> 54) & 1)) {
                break;
              }
              if (((*v14 >> 14) & 0x3FFF) * (*v14 & 0x3FFF) < ((v15 >> 14) & 0x3FFF)
                                                                           * (v15 & 0x3FFF))
                goto LABEL_25;
LABEL_26:
              if (++v13 == (unint64_t *)v11) {
                goto LABEL_27;
              }
            }
            if ((v15 & 0x40000000000000) != 0) {
              goto LABEL_26;
            }
LABEL_25:
            uint64_t v14 = v13;
            goto LABEL_26;
          }
LABEL_27:
          unint64_t v16 = *v14;
          *(_OWORD *)long long __p = 0u;
          memset(v25, 0, 28);
          (*(void (**)(void **__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1368))(__p, this);
          unsigned int v17 = (*((unsigned __int16 *)this + 328) >> 13) - 1;
          if (v17 > 4) {
            uint64_t v18 = "Unspecified";
          }
          else {
            uint64_t v18 = off_1E5280498[v17];
          }
          CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"%dx%d@%.3f, %d, %d, %s", v16 & 0x3FFF, (v16 >> 14) & 0x3FFF, (double)((v16 >> 29) & 0x1FFFFFF) * 0.0000152587891, LODWORD(__p[0]), BYTE4(v25[0]), v18);
          int v21 = *v1;
          int v20 = v1[1];
          if (CA::WindowServer::Display::get_display_log(void)::once != -1) {
            dispatch_once(&CA::WindowServer::Display::get_display_log(void)::once, &__block_literal_global_4823);
          }
          os_signpost_id_t v22 = *((unsigned int *)this + 6);
          if (v22)
          {
            uint64_t v23 = CA::WindowServer::Display::get_display_log(void)::log;
            if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_log(void)::log))
            {
              *(_DWORD *)long long buf = 138544130;
              CFStringRef v28 = v9;
              __int16 v29 = 2114;
              CFStringRef v30 = v19;
              __int16 v31 = 1026;
              int v32 = v21;
              __int16 v33 = 1026;
              int v34 = v20;
              _os_signpost_emit_with_name_impl(&dword_184668000, v23, OS_SIGNPOST_EVENT, v22, "Connected", "mode=%{public, name=mode, signpost.telemetry:string1}@ displayAttributes=%{public, name=displayAttributes, signpost.telemetry:string2}@ vendorId=%{public, name=vendorId, signpost.telemetry:number1}u modelId=%{public, name=modelId, signpost.telemetry:number2}u enableTelemetry=YES ", buf, 0x22u);
            }
          }
          if (v19) {
            CFRelease(v19);
          }
        }
        if (v12) {
          operator delete(v12);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::update_brightness_capabilities(CA::WindowServer::IOMFBDisplay *this, const __CFDictionary *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (float *)((char *)this + 26256);
  if (!*((unsigned char *)this + 28209)) {
    return;
  }
  double v5 = (os_unfair_lock_s *)((char *)this + 27248);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6812);
  uint64_t v6 = *((void *)this + 3407);
  os_unfair_lock_unlock(v5);
  if (v6)
  {
    if (!a2 && (*((_WORD *)this + 328) & 0x1C00) == 0) {
      return;
    }
  }
  uint64_t BrightnessControlCapabilities = IOMobileFramebufferGetBrightnessControlCapabilities();
  if (a2)
  {
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFDictionaryGetTypeID()) {
      return;
    }
    CFDictionaryRef v9 = (const __CFDictionary *)CFRetain(a2);
    double Double = CA_CFDictionaryGetDouble(v9, @"EDRPotentialHeadroom");
    CA::WindowServer::Display::initialize_edr_state(this);
    uint64_t v11 = *((void *)this + 86);
    if (v11)
    {
      *(float *)&unsigned int v12 = Double;
      atomic_store(v12, (unsigned int *)(v11 + 4));
    }
    if (!x_log_hook_p() && !os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_105;
    }
    CFStringRef v13 = CFCopyDescription(v9);
    if (x_log_hook_p())
    {
      if (v13) {
        CFStringGetCStringPtr(v13, 0x8000100u);
      }
      x_log_();
    }
    else
    {
      CFStringRef v28 = x_log_category_brightness;
      if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *((_DWORD *)this + 6);
        if (v13) {
          CStringPtr = CFStringGetCStringPtr(v13, 0x8000100u);
        }
        else {
          CStringPtr = "(null)";
        }
        *(_DWORD *)keys = 67109378;
        *(_DWORD *)&keys[4] = v29;
        *(_WORD *)&keys[8] = 2080;
        *(void *)&keys[10] = CStringPtr;
        _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, "DisplayID: %u brightness capabilities set to %s", keys, 0x12u);
      }
    }
LABEL_103:
    if (v13) {
      CFRelease(v13);
    }
LABEL_105:
    BOOL v24 = 1;
    goto LABEL_106;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)BrightnessControlCapabilities;
  uint64_t v14 = (_DWORD *)((char *)this + 745);
  int v15 = (*((unsigned __int16 *)this + 328) >> 10) & 7;
  if (!BrightnessControlCapabilities)
  {
    BOOL v24 = v15 == 1;
    if (v15 != 1 || !CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640)))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v37 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEBUG))
        {
          int v38 = *((_DWORD *)this + 6);
          *(_DWORD *)keys = 67109120;
          *(_DWORD *)&keys[4] = v38;
          _os_log_impl(&dword_184668000, v37, OS_LOG_TYPE_DEBUG, "DisplayID: %u got NULL brightness capabilities", keys, 8u);
        }
      }
      *v14 &= ~0x200u;
      CA::WindowServer::Display::initialize_edr_state(this);
      uint64_t v39 = *((void *)this + 86);
      CFDictionaryRef v9 = 0;
      if (v39) {
        atomic_store(0x3F800000u, (unsigned int *)(v39 + 4));
      }
      goto LABEL_106;
    }
    *(_OWORD *)keys = xmmword_1E5280368;
    *(void *)&keys[16] = @"ReferenceSDRBrightness";
    float v25 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 952))(this);
    LODWORD(valuePtr[0]) = 1092616192;
    CFStringRef v13 = (const __CFString *)CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    *(float *)float valuePtr = v25;
    CFNumberRef v26 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
    valuePtr[0] = *(const void **)MEMORY[0x1E4F1CFC8];
    valuePtr[1] = v13;
    valuePtr[2] = v26;
    CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys, valuePtr, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (x_log_hook_p() || os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v27 = CFCopyDescription(v9);
      if (x_log_hook_p())
      {
        if (v27) {
          CFStringGetCStringPtr(v27, 0x8000100u);
        }
        x_log_();
      }
      else
      {
        long long v49 = x_log_category_brightness;
        if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
        {
          int v50 = *((_DWORD *)this + 6);
          if (v27) {
            float v51 = CFStringGetCStringPtr(v27, 0x8000100u);
          }
          else {
            float v51 = "(null)";
          }
          *(_DWORD *)long long buf = 67109378;
          int v55 = v50;
          __int16 v56 = 2080;
          float32x4_t v57 = v51;
          _os_log_impl(&dword_184668000, v49, OS_LOG_TYPE_DEFAULT, "DisplayID: %u simulating HDR10 brightness capabilities %s", buf, 0x12u);
        }
      }
      if (v27) {
        CFRelease(v27);
      }
    }
    CA::WindowServer::Display::initialize_edr_state(this);
    uint64_t v52 = *((void *)this + 86);
    if (v52) {
      atomic_store(0x41200000u, (unsigned int *)(v52 + 4));
    }
    *v14 &= ~0x200u;
    if (v26) {
      CFRelease(v26);
    }
    goto LABEL_103;
  }
  *v14 |= 0x200u;
  if (!v15)
  {
    if (CADeviceSupportsReferenceMode::once[0] != -1) {
      dispatch_once(CADeviceSupportsReferenceMode::once, &__block_literal_global_225);
    }
    if (CADeviceSupportsReferenceMode::supports_ref)
    {
      int v31 = *((unsigned __int8 *)v2 + 112);
      MutableCopdouble y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v9);
      CFDictionaryRef v9 = MutableCopy;
      double v33 = 16.0;
      if (v31)
      {
        double v33 = 10.0;
        double v34 = 10.0;
      }
      else
      {
        double v34 = 0.0;
      }
      CA_CFDictionarySetDouble(MutableCopy, @"EDRPotentialHeadroom", v33);
      CA_CFDictionarySetDouble(v9, @"EDRReferenceHeadroom", v34);
      if (v31)
      {
        CA_CFDictionarySetDouble(v9, @"MinNits", 100.0);
        CA_CFDictionarySetDouble(v9, @"MaxNits", 100.0);
        double v35 = 1000.0;
      }
      else
      {
        double v35 = 1600.0;
      }
      CA_CFDictionarySetDouble(v9, @"MaxNitsEDR", v35);
      int v36 = 1;
      goto LABEL_73;
    }
LABEL_60:
    CFRetain(v9);
    int v36 = 0;
LABEL_73:
    float v40 = CA_CFDictionaryGetDouble(v9, @"MinNits");
    *uint64_t v2 = v40;
    float v41 = CA_CFDictionaryGetDouble(v9, @"MaxNits");
    v2[1] = v41;
    goto LABEL_74;
  }
  if (v15 != 1) {
    goto LABEL_60;
  }
  (*(void (**)(unsigned char *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1368))(keys, this);
  if (v61 == 1552 && (v60 - 44577) <= 0xE && ((1 << (v60 - 33)) & 0x7007) != 0)
  {
    CFDictionaryRef v9 = CFDictionaryCreateMutableCopy(0, 0, v9);
    (*(void (**)(unsigned char *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1216))(keys, this);
    float v16 = *(float *)&keys[4];
    BOOL is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640));
    CA::WindowServer::Display::initialize_edr_state(this);
    uint64_t v18 = *((void *)this + 86);
    if (v18)
    {
      CFStringRef v19 = (unsigned int *)(v18 + 4);
      if (is_hdr) {
        unsigned int v20 = 1098907648;
      }
      else {
        unsigned int v20 = 1084227584;
      }
      atomic_store(v20, v19);
    }
    if (v16 == 0.0)
    {
      if (CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640))) {
        float v16 = 1600.0;
      }
      else {
        float v16 = 500.0;
      }
      v2[1] = v16;
    }
    BOOL v21 = (float)(v16 * 0.01) > 16.0 || (float)(v16 * 0.01) < 1.0;
    double v22 = 16.0;
    if ((float)(v16 * 0.01) < 1.0 && (float)(v16 * 0.01) <= 16.0) {
      double v22 = 1.0;
    }
    double v23 = (float)(v16 * 0.01);
    if (v21) {
      double v23 = v22;
    }
    CA_CFDictionarySetDouble(v9, @"EDRPotentialHeadroom", v23);
    if (v16 > 550.0) {
      CA_CFDictionarySetDouble(v9, @"EDRReferenceHeadroom", 10.0);
    }
    CA_CFDictionarySetDouble(v9, @"ReferenceSDRBrightness", 100.0);
  }
  else
  {
    CFRetain(v9);
  }
  int v36 = 0;
LABEL_74:
  double v42 = CA_CFDictionaryGetDouble(v9, @"EDRPotentialHeadroom");
  CA::WindowServer::Display::initialize_edr_state(this);
  uint64_t v43 = *((void *)this + 86);
  if (v43)
  {
    *(float *)&unsigned int v44 = v42;
    atomic_store(v44, (unsigned int *)(v43 + 4));
  }
  if (!x_log_hook_p())
  {
    BOOL v24 = v36 != 0;
    if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_106;
    }
  }
  CFStringRef v45 = CFCopyDescription(v9);
  if (x_log_hook_p())
  {
    if (v45) {
      CFStringGetCStringPtr(v45, 0x8000100u);
    }
    x_log_();
  }
  else
  {
    unint64_t v46 = x_log_category_brightness;
    if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
    {
      int v47 = *((_DWORD *)this + 6);
      if (v45) {
        uint64_t v48 = CFStringGetCStringPtr(v45, 0x8000100u);
      }
      else {
        uint64_t v48 = "(null)";
      }
      *(_DWORD *)keys = 67109378;
      *(_DWORD *)&keys[4] = v47;
      *(_WORD *)&keys[8] = 2080;
      *(void *)&keys[10] = v48;
      _os_log_impl(&dword_184668000, v46, OS_LOG_TYPE_DEFAULT, "DisplayID: %u got brightness capabilities %s", keys, 0x12u);
      if (!v45) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
  }
  if (v45) {
LABEL_86:
  }
    CFRelease(v45);
LABEL_87:
  BOOL v24 = v36 != 0;
LABEL_106:
  os_unfair_lock_lock(v5);
  size_t v53 = (const void *)*((void *)this + 3407);
  *((void *)this + 3407) = v9;
  os_unfair_lock_unlock(v5);
  if (v53) {
    CFRelease(v53);
  }
  if (v24)
  {
    if (*((unsigned char *)v2 + 1953)) {
      CA::Render::post_notification(0x35u, 0, 0, 0);
    }
  }
}

void CA::WindowServer::IOMFBDisplay::set_needs_icc_reload(CA::WindowServer::IOMFBDisplay *this)
{
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1840))(this))
  {
    uint64_t v2 = 0;
    *((_WORD *)this + 14101) = 257;
    *((unsigned char *)this + 28204) = 1;
    *((_DWORD *)this + 6835) = -1;
    unint64_t v3 = (char *)this + 27288;
    do
    {
      uint64_t v4 = *(const void **)&v3[v2];
      if (v4)
      {
        CFRelease(v4);
        *(void *)&v3[v2] = 0;
      }
      v2 += 8;
    }
    while (v2 != 32);
  }
}

void CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::WindowServer::IOMFBDisplay *this, CA::Render::Update *a2, const CA::WindowServer::Surface *a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_once != -1) {
    dispatch_once(&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_once, &__block_literal_global_21196);
  }
  int v9 = *((_DWORD *)this + 6);
  if (a2
    && ((*((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0x2000000000) != 0
    && *((void *)a2 + 11)
    && ((*(unsigned int (**)(CA::Render::Update *))(*(void *)a2 + 40))(a2) == 18
     || (*(unsigned int (**)(CA::Render::Update *))(*(void *)a2 + 40))(a2) == 16))
  {
    int v10 = *((_DWORD *)this + 6835);
    if ((v10 & (1 << (char)a3)) == 0) {
      *((_DWORD *)this + 6835) = v10 ^ (1 << (char)a3);
    }
    if ((*(uint64_t (**)(CA::Render::Update *))(*(void *)a2 + 88))(a2))
    {
      uint64_t v11 = (CA::Render *)(*(uint64_t (**)(CA::Render::Update *))(*(void *)a2 + 160))(a2);
      unsigned int v12 = (CGColorSpace *)(*(uint64_t (**)(CA::Render::Update *))(*(void *)a2 + 88))(a2);
      CA::Render::iosurface_set_bulk_from_colorspace(v11, v12, v13, v14);
    }
    uint64_t v15 = *((void *)a2 + 11);
    uint64_t v16 = (*(uint64_t (**)(CA::Render::Update *))(*(void *)a2 + 160))(a2);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 0x40000000;
    float v24[2] = ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_2;
    v24[3] = &__block_descriptor_tmp_58;
    unsigned __int8 v24[4] = this;
    int v25 = (int)a3;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 0x40000000;
    void v21[2] = ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_3;
    void v21[3] = &__block_descriptor_tmp_61_21197;
    v21[4] = this;
    int v22 = v9;
    int v23 = (int)a3;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    void v18[2] = ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_62;
    v18[3] = &__block_descriptor_tmp_65;
    v18[4] = this;
    int v19 = v9;
    int v20 = (int)a3;
    (*(void (**)(uint64_t, uint64_t, const CA::WindowServer::Surface *, char *, uint64_t, void *, void *, void *))(*(void *)v15 + 32))(v15, v16, a3, (char *)a2 + 96, a4, v24, v21, v18);
  }
  else
  {
    int v17 = *((_DWORD *)this + 6835);
    if ((v17 & (1 << (char)a3)) != 0)
    {
      *((_DWORD *)this + 6835) = v17 ^ (1 << (char)a3);
      uint64_t v27 = 0;
      memset(v26, 0, sizeof(v26));
      iomfb_swap_set_tonemap_config(*((void *)this + 3196), (uint64_t)v26, (uint64_t)a3);
      CA::IOMobileFramebuffer::swap_set_icc_curve(this + 25568, 3u, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_curve(this + 25568, 7u, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_curve(this + 25568, 6u, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_curve(this + 25568, 0xBu, v9, (int)a3, 7, CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve);
      CA::IOMobileFramebuffer::swap_set_icc_matrix((uint64_t)this + 25568, 2u, v9, (int)a3, (float *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matrix);
      CA::IOMobileFramebuffer::swap_set_icc_matrix((uint64_t)this + 25568, 3u, v9, (int)a3, (float *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matrix);
    }
  }
}

char *CA::WindowServer::IOMFBDisplay::color_program_cache(CA::WindowServer::IOMFBDisplay *this)
{
  unint64_t v1 = (char *)*((void *)this + 3419);
  if (!v1)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    unint64_t v1 = (char *)malloc_type_zone_malloc(malloc_zone, 0x50uLL, 0x8BB15036uLL);
    if (v1)
    {
      uint64_t v4 = (CGColorSpace *)CAGetColorSpace(0x1Du);
      CA::ColorProgram::Cache::Cache((CA::ColorProgram::Cache *)v1, v4);
      *((void *)this + 3419) = v1;
      *((void *)v1 + 9) = 0x180000000ELL;
      if (!v1[62]) {
        v1[62] = 1;
      }
      *(_WORD *)(v1 + 63) = 1;
      v1[65] = 0;
    }
    else
    {
      *((void *)this + 3419) = 0;
    }
  }
  return v1;
}

void CA::WindowServer::IOMFBDisplay::set_icc_matrix_and_trc(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  int v5 = a5;
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 48);
  if (a3 > 1)
  {
    BOOL v9 = a5 == -1;
    if (a4 < 2 && v9) {
      int v10 = 3;
    }
    else {
      int v10 = 1;
    }
    if (a4 > 1)
    {
      int v5 = 0;
      int v10 = 1;
    }
  }
  else
  {
    BOOL v9 = a5 == -1;
    if (a5 == -1) {
      int v10 = 3;
    }
    else {
      int v10 = 1;
    }
  }
  uint64_t v11 = a1 + 25568;
  BOOL v84 = a4 == 15 && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)(a1 + 640));
  uint64_t v83 = a2;
  unsigned int v12 = *(_DWORD *)(a2 + 36) & 0x7FFFFFFF;
  int v93 = v5;
  if (!v12)
  {
LABEL_113:
    int v73 = v10;
    if (v84) {
      int v74 = 6;
    }
    else {
      int v74 = 0;
    }
    bzero(v95, 0x218uLL);
    int v75 = 0;
    *(_DWORD *)unint64_t v95 = v74;
    do
    {
      if (v9) {
        int v76 = v75;
      }
      else {
        int v76 = v93;
      }
      int v77 = CA::IOMobileFramebuffer::swap_set_icc_curve(v11, a4, *(_DWORD *)(a1 + 24), v76, 7, (unsigned int *)v95);
      if (v77)
      {
        int v78 = v77;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v79 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109120;
            int v107 = v78;
            _os_log_impl(&dword_184668000, v79, OS_LOG_TYPE_ERROR, "Failed to set ICC curve, error = 0x%X", buf, 8u);
          }
        }
      }
      ++v75;
    }
    while (v73 != v75);
    return;
  }
  char v13 = 0;
  int v14 = *(_DWORD *)(a1 + 24);
  int v91 = v10;
  BOOL v92 = v9;
  while (2)
  {
    char v85 = v13;
    while (1)
    {
      unsigned int v15 = v12 & 0x1F;
      unsigned int v89 = v12 >> 5;
      uint64_t v90 = v12 & 0x1F;
      if (v15 > 0x10) {
        goto LABEL_30;
      }
      if (v15 != 1) {
        break;
      }
      unsigned int v87 = v12;
      int v16 = 0;
      float v96 = 0.0;
      *(void *)unint64_t v95 = 0;
      int v17 = *(_DWORD *)(v8 + 16);
      float v97 = *(float *)v8;
      LODWORD(v98) = v17;
      int v18 = *(_DWORD *)(v8 + 36);
      HIDWORD(v98) = *(_DWORD *)(v8 + 32);
      float v99 = *(float *)(v8 + 4);
      float v100 = *(float *)(v8 + 20);
      v101[0] = v18;
      v101[1] = *(_DWORD *)(v8 + 8);
      v101[2] = *(_DWORD *)(v8 + 24);
      v101[3] = *(_DWORD *)(v8 + 40);
      uint64_t v102 = *(void *)(v8 + 48);
      uint64_t v19 = v8;
      int v103 = *(_DWORD *)(v8 + 56);
      do
      {
        if (v9) {
          int v20 = v16;
        }
        else {
          int v20 = v5;
        }
        int v21 = CA::IOMobileFramebuffer::swap_set_icc_matrix(v11, a3, v14, v20, (float *)v95);
        if (v21)
        {
          int v22 = v21;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v23 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67109120;
              int v107 = v22;
              _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_ERROR, "Failed to set ICC matrix, error = 0x%X", buf, 8u);
            }
          }
        }
        ++v16;
      }
      while (v10 != v16);
      uint64_t v8 = v19;
      unsigned int v12 = v87;
LABEL_34:
      v8 += 16 * CA::ColorProgram::kOpcodeParamCount[v90];
      BOOL v25 = v12 >= 0x20;
      unsigned int v12 = v89;
      if (!v25)
      {
        if (v85) {
          return;
        }
        goto LABEL_113;
      }
    }
    if (((1 << v15) & 0x180FC) == 0)
    {
LABEL_30:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        BOOL v24 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v95 = 67109120;
          *(_DWORD *)&v95[4] = v12 & 0x1F;
          _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_ERROR, "Unexpected opcode %d for blending space", v95, 8u);
        }
      }
      goto LABEL_34;
    }
    bzero(v95, 0x648uLL);
    unint64_t v26 = 0;
    int v27 = CA::ColorProgram::kOpcodeParamCount[v12 & 0x1F];
    uint64_t v28 = (float *)v8;
    do
    {
      int v29 = 1;
      switch(v12 & 0x1F)
      {
        case 2u:
          goto LABEL_42;
        case 3u:
          int v29 = 2;
          goto LABEL_42;
        case 4u:
          int v29 = 3;
          goto LABEL_42;
        case 5u:
          int v29 = 4;
          goto LABEL_42;
        case 6u:
          int v29 = 5;
LABEL_42:
          *(_DWORD *)&v95[v26] = v29;
          switch(v27)
          {
            case 1:
              goto LABEL_49;
            case 2:
              goto LABEL_48;
            case 3:
              goto LABEL_47;
            case 4:
              goto LABEL_46;
            case 5:
              goto LABEL_45;
            case 6:
              goto LABEL_44;
            case 7:
              v101[v26 / 4] = *((_DWORD *)v28 + 24);
LABEL_44:
              *(float *)&v101[v26 / 4 - 1] = v28[20];
LABEL_45:
              *(float *)((char *)&v99 + v26) = v28[16];
LABEL_46:
              *(float *)((char *)&v98 + v26 + 4) = v28[12];
LABEL_47:
              *(float *)((char *)&v98 + v26) = v28[8];
LABEL_48:
              *(float *)((char *)&v97 + v26) = v28[4];
LABEL_49:
              *(float *)&v95[v26 + 8] = *v28;
              break;
            default:
              goto LABEL_50;
          }
          break;
        case 7u:
          uint64_t v30 = *(void *)(v83 + 64);
          int v31 = (int)(float)(*v28 * (float)*(unsigned int *)(v30 + 16));
          uint64_t v32 = *(void *)(v30 + 160);
          uint64_t v33 = (int)(float)(v28[4] * (float)*(int *)(v83 + 56));
          double v34 = &v95[v26];
          *(_DWORD *)double v34 = 8;
          *((_DWORD *)v34 + 2) = v31;
          *((_DWORD *)v34 + 3) = 1065353216;
          *((void *)v34 + 2) = *(void *)(v30 + 96) + v32 * v33;
          break;
        case 0xFu:
          *(_DWORD *)&v95[v26] = 7;
          break;
        case 0x10u:
          *(_DWORD *)&v95[v26] = 6;
          break;
        default:
          break;
      }
LABEL_50:
      v26 += 536;
      ++v28;
    }
    while (v26 != 1608);
    if (v84)
    {
      for (uint64_t i = 0; i != 1608; i += 536)
        *(_DWORD *)&v95[i] = 6;
    }
    uint64_t v86 = v8;
    unsigned int v88 = v12;
    int v36 = *(_DWORD *)v95;
    if (*(_DWORD *)v95 == v104)
    {
      int v37 = 0;
      float v38 = v96;
      float v39 = v97;
      float v40 = v98;
      float v41 = v99;
      float v42 = v100;
      float v43 = *(float *)v101;
      float v44 = v96;
      size_t v81 = 4 * LODWORD(v96);
      unint64_t v82 = v98;
      int v45 = v105;
      uint64_t v46 = 1;
      do
      {
        int v47 = v37;
        switch(v36)
        {
          case 1:
            if (v38 != *(float *)&v95[536 * v46 + 8]) {
              goto LABEL_91;
            }
            break;
          case 2:
            uint64_t v48 = &v95[536 * v46];
            float v50 = *((float *)v48 + 2);
            long long v49 = v48 + 8;
            if (v38 != v50 || v39 != *((float *)v49 + 1) || *(float *)&v40 != *((float *)v49 + 2)) {
              goto LABEL_91;
            }
            break;
          case 3:
            float v51 = &v95[536 * v46];
            float v53 = *((float *)v51 + 2);
            uint64_t v52 = (float *)(v51 + 8);
            if (v38 != v53 || v39 != v52[1] || *(float *)&v40 != v52[2] || *((float *)&v40 + 1) != v52[3]) {
              goto LABEL_91;
            }
            break;
          case 4:
            float16x4_t v54 = &v95[536 * v46];
            float v56 = *((float *)v54 + 2);
            int v55 = (float *)(v54 + 8);
            if (v38 != v56
              || v39 != v55[1]
              || *(float *)&v40 != v55[2]
              || *((float *)&v40 + 1) != v55[3]
              || v41 != v55[4])
            {
              goto LABEL_91;
            }
            break;
          case 5:
            float32x4_t v57 = &v95[536 * v46];
            float v59 = *((float *)v57 + 2);
            long long v58 = (float *)(v57 + 8);
            if (v38 != v59
              || v39 != v58[1]
              || *(float *)&v40 != v58[2]
              || *((float *)&v40 + 1) != v58[3]
              || v41 != v58[4]
              || v42 != v58[5]
              || v43 != v58[6])
            {
              goto LABEL_91;
            }
            break;
          case 8:
            int v60 = &v95[536 * v46];
            int v62 = *((_DWORD *)v60 + 2);
            int v61 = v60 + 8;
            if (v62 != LODWORD(v44) || v39 != *((float *)v61 + 1) || !memcmp(v82, *((const void **)v61 + 1), v81)) {
              goto LABEL_91;
            }
            break;
          default:
            break;
        }
        int v37 = 1;
        uint64_t v46 = 2;
      }
      while (!(v47 & 1 | (v36 != v45)));
    }
    else
    {
LABEL_91:
      int v47 = 0;
    }
    for (int j = 0; j != v91; ++j)
    {
      unint64_t v64 = 0;
      if (v9) {
        int v65 = j;
      }
      else {
        int v65 = v93;
      }
      int v66 = (unsigned int *)v95;
      do
      {
        if (v47) {
          int v67 = 7;
        }
        else {
          int v67 = 1 << v64;
        }
        int v68 = CA::IOMobileFramebuffer::swap_set_icc_curve(v11, a4, v14, v65, v67, v66);
        if (v68)
        {
          int v69 = v68;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            unint64_t v70 = x_log_category_color;
            if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67109120;
              int v107 = v69;
              _os_log_impl(&dword_184668000, v70, OS_LOG_TYPE_ERROR, "Failed to set ICC curve, error = 0x%X", buf, 8u);
            }
          }
        }
        BOOL v72 = v64++ > 1;
        v66 += 134;
      }
      while (((v72 | v47) & 1) == 0);
      int v10 = v91;
      BOOL v9 = v92;
    }
    uint64_t v8 = v86 + 16 * CA::ColorProgram::kOpcodeParamCount[v90];
    char v13 = 1;
    unsigned int v12 = v89;
    int v5 = v93;
    if (v88 >= 0x20) {
      continue;
    }
    break;
  }
}

void ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

void ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_3(uint64_t a1, signed int a2, unsigned int *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2 > 18)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      BOOL v9 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        signed int v11 = a2;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_ERROR, "unexpected ICC curve location %d", buf, 8u);
      }
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 40);
    int v6 = *(_DWORD *)(a1 + 44);
    if (a3) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = (unsigned int *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::bypass_curve;
    }
    uint64_t v8 = *(void *)(a1 + 32) + 25568;
    CA::IOMobileFramebuffer::swap_set_icc_curve(v8, a2, v5, v6, 7, v7);
  }
}

void ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke_62(uint64_t a1, signed int a2, float *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 > 8)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v8 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        signed int v10 = a2;
        _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_ERROR, "unexpected ICC matrix location %d", buf, 8u);
      }
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 40);
    int v4 = *(_DWORD *)(a1 + 44);
    if (a3) {
      int v6 = a3;
    }
    else {
      int v6 = (float *)&CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matrix;
    }
    uint64_t v7 = *(void *)(a1 + 32) + 25568;
    CA::IOMobileFramebuffer::swap_set_icc_matrix(v7, a2, v5, v4, v6);
  }
}

double ___ZN2CA12WindowServer12IOMFBDisplay21set_tonemapping_stateEPNS_6Render6UpdateEPKNS0_7SurfaceEjPP12CGColorSpace_block_invoke()
{
  dword_1E8F88818 = 0;
  qword_1E8F88810 = 0;
  double result = 0.0;
  CA::WindowServer::IOMFBDisplay::set_tonemapping_state(CA::Render::Update *,CA::WindowServer::Surface const*,unsigned int,CGColorSpace **)::identity_matridouble x = xmmword_184997DF0;
  *(_OWORD *)algn_1E8F887F0 = xmmword_184997DF0;
  xmmword_1E8F88800 = xmmword_184997DF0;
  return result;
}

void CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display::ModeSet *a2, CA::WindowServer::Display::Mode *a3, const __CFArray *a4, const __CFArray *a5)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  double v230 = (char *)this + 28138;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    signed int v10 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *((_DWORD *)this + 6);
      int v12 = v230[30];
      *(_DWORD *)long long buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v11;
      __int16 v239 = 1024;
      *(_DWORD *)long long v240 = v12;
      *(_WORD *)&v240[4] = 2048;
      *(void *)&v240[6] = a4;
      *(_WORD *)&v240[14] = 2048;
      *(void *)&v240[16] = a5;
      _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "Display %u hotplug-state %d updating digital modes: color %p; timing %p\n",
        buf,
        0x22u);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((void *)this + 3305);
  if (a4 && a5 && v230[30])
  {
    CFIndex Count = CFArrayGetCount(a5);
    CFIndex v14 = CFArrayGetCount(a4);
    CFArrayRef v215 = a5;
    CFIndex v214 = Count;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v15 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *((_DWORD *)this + 6);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v16;
        __int16 v239 = 2048;
        *(void *)long long v240 = Count;
        *(_WORD *)&v240[8] = 2048;
        *(void *)&v240[10] = v14;
        _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "Display %u %zu timing modes, %zu color modes\n", buf, 0x1Cu);
      }
    }
    *(void *)a3 = 0;
    if ((CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::initialized & 1) == 0)
    {
      int v17 = getenv("CA_DISPLAY_OVERSCANNED");
      if (v17)
      {
        CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::uint64_t value = atoi(v17) != 0;
        CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::override = 1;
      }
      buf[0] = 0;
      int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"FilterYUVDisplayModes", @"com.apple.coreanimation", buf);
      if (buf[0]) {
        BOOL v19 = AppBooleanValue == 0;
      }
      else {
        BOOL v19 = 1;
      }
      char v20 = !v19;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv = v20;
      int v21 = CFPreferencesGetAppBooleanValue(@"FilterDisplayModes", @"com.apple.coreanimation", buf);
      if (buf[0]) {
        BOOL v22 = v21 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      char v23 = !v22;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_timing = v23;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_resolutiouint64_t n = v23;
      int v24 = CFPreferencesGetAppBooleanValue(@"Filter420DisplayModes", @"com.apple.coreanimation", buf);
      if (buf[0]) {
        BOOL v25 = v24 == 0;
      }
      else {
        BOOL v25 = 1;
      }
      char v26 = !v25;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_420 = v26;
      int v27 = CFPreferencesGetAppBooleanValue(@"FilterHighBitDepthDisplayModes", @"com.apple.coreanimation", buf);
      if (buf[0]) {
        BOOL v28 = v27 == 0;
      }
      else {
        BOOL v28 = 0;
      }
      char v29 = !v28;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths = v29;
      int v30 = CFPreferencesGetAppBooleanValue(@"IgnoreUnsafeDisplayModes", @"com.apple.coreanimation", buf);
      if (buf[0]) {
        BOOL v31 = v30 == 0;
      }
      else {
        BOOL v31 = 1;
      }
      char v32 = !v31;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::ignore_unsafe = v32;
      CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::initialized = 1;
    }
    if (CADeviceSupportsAPT::once[0] != -1) {
      dispatch_once(CADeviceSupportsAPT::once, &__block_literal_global_52);
    }
    uint64_t v219 = a2;
    double v204 = (float *)((char *)this + 26440);
    if (CADeviceSupportsAPT::supports_apt) {
      BOOL v205 = (*((_WORD *)this + 328) & 0x1C00) == 0;
    }
    else {
      BOOL v205 = 0;
    }
    uint64_t v206 = a3;
    CFTypeRef cf = (CFTypeRef)IOMobileFramebufferCopyProperty();
    if (cf)
    {
      CFTypeID v33 = CFGetTypeID(cf);
      if (v33 == CFArrayGetTypeID())
      {
        CFIndex v34 = CFArrayGetCount((CFArrayRef)cf);
        CFArrayRef v35 = (const __CFArray *)cf;
        if (v34)
        {
          for (CFIndex i = 0; i != v34; ++i)
          {
            Dictionardouble y = (CA::WindowServer *)CA_CFArrayGetDictionary(v35, i);
            if (Dictionary)
            {
              float v39 = Dictionary;
              CFDictionaryRef v40 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(Dictionary, (const __CFDictionary *)@"HorizontalAttributes", v38);
              CFDictionaryRef v42 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(v39, (const __CFDictionary *)@"VerticalAttributes", v41);
              if (v40)
              {
                CFDictionaryRef v43 = v42;
                if (v42)
                {
                  Value = CFDictionaryGetValue(v40, @"Active");
                  if (Value) {
                    CA_CFIntValue(Value);
                  }
                  int v45 = CFDictionaryGetValue(v43, @"Active");
                  if (v45) {
                    CA_CFIntValue(v45);
                  }
                }
              }
            }
            CFArrayRef v35 = (const __CFArray *)cf;
          }
        }
      }
    }
    CFDictionaryRef v46 = (const __CFDictionary *)IOMobileFramebufferCopyProperty();
    CFDictionaryRef v47 = v46;
    if (v46)
    {
      CFTypeID v48 = CFGetTypeID(v46);
      if (v48 == CFDictionaryGetTypeID())
      {
        long long v49 = CFDictionaryGetValue(v47, @"NativeFormatHorizontalPixels");
        if (v49) {
          CA_CFIntValue(v49);
        }
        float v50 = CFDictionaryGetValue(v47, @"NativeFormatVerticalPixels");
        if (v50) {
          CA_CFIntValue(v50);
        }
      }
    }
    CFDictionaryRef v209 = v47;
    uint64_t v233 = 0;
    uint64_t v234 = 0;
    int v232 = &v233;
    if (v14)
    {
      for (CFIndex j = 0; j != v14; ++j)
      {
        CFDictionaryRef v52 = (const __CFDictionary *)CA_CFArrayGetDictionary(a4, j);
        unsigned int Int = CA_CFDictionaryGetInt(v52, @"ID");
        unsigned int v54 = Int;
        int v55 = v233;
        float v56 = &v233;
        float32x4_t v57 = &v233;
        if (v233)
        {
          while (1)
          {
            while (1)
            {
              float32x4_t v57 = (uint64_t **)v55;
              unsigned int v58 = *((_DWORD *)v55 + 7);
              if (Int >= v58) {
                break;
              }
              int v55 = *v57;
              float v56 = v57;
              if (!*v57) {
                goto LABEL_79;
              }
            }
            if (v58 >= Int) {
              break;
            }
            int v55 = v57[1];
            if (!v55)
            {
              float v56 = v57 + 1;
              goto LABEL_79;
            }
          }
        }
        else
        {
LABEL_79:
          float v59 = operator new(0x20uLL);
          v59[7] = v54;
          *(void *)float v59 = 0;
          *((void *)v59 + 1) = 0;
          *((void *)v59 + 2) = v57;
          *float v56 = (uint64_t *)v59;
          if (*v232)
          {
            int v232 = (uint64_t **)*v232;
            int v60 = *v56;
          }
          else
          {
            int v60 = (uint64_t *)v59;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v233, v60);
          ++v234;
        }
      }
    }
    uint64_t v217 = this;
    CFIndex v61 = v214;
    if (v214)
    {
      CFArrayRef v203 = a4;
      CFIndex v62 = 0;
      DWORD1(v212) = 0;
      *((void *)&v212 + 1) = 0;
      int v213 = 0;
      uint64_t v211 = 0;
      uint64_t v202 = 0;
      int v63 = v230;
      CFArrayRef v64 = v215;
      while (1)
      {
        int v65 = (CA::WindowServer *)CA_CFArrayGetDictionary(v64, v62);
        if (!v65) {
          goto LABEL_462;
        }
        int v67 = v65;
        CFDictionaryRef v68 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(v65, (const __CFDictionary *)@"HorizontalAttributes", v66);
        CFDictionaryRef v70 = (const __CFDictionary *)CA::WindowServer::dictionary_dict(v67, (const __CFDictionary *)@"VerticalAttributes", v69);
        if (!v68) {
          goto LABEL_462;
        }
        CFDictionaryRef v71 = v70;
        if (!v70) {
          goto LABEL_462;
        }
        BOOL v72 = CFDictionaryGetValue(v67, @"IsVirtual");
        if (v72) {
          BOOL v73 = CA_CFBoolValue(v72);
        }
        else {
          BOOL v73 = 0;
        }
        int v74 = CFDictionaryGetValue(v67, @"Score");
        if (v74) {
          LODWORD(v74) = CA_CFIntValue(v74);
        }
        unsigned int v218 = v74;
        BOOL v75 = *v63 && v74 == 0;
        if (v75 && !v73) {
          goto LABEL_462;
        }
        int v77 = CFDictionaryGetValue(v71, @"PreciseSyncRate");
        if (!v77 || (LODWORD(v78) = CA_CFIntValue(v77), !v78))
        {
          int v78 = CFDictionaryGetValue(v71, @"SyncRate");
          if (v78) {
            LODWORD(v78) = CA_CFIntValue(v78);
          }
        }
        BOOL v216 = v73;
        BOOL v79 = !*v63 && (*((_WORD *)v217 + 328) & 0x1C00) != 4096;
        int v80 = v79 && (int)v78 < 121 ? v78 << 16 : (int)v78;
        if ((v80 - 3211264) > 0xC0000
          && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_timing)
        {
          goto LABEL_462;
        }
        size_t v81 = CFDictionaryGetValue(v71, @"PixelRepetition");
        if (v81) {
          int v82 = CA_CFIntValue(v81);
        }
        else {
          int v82 = 0;
        }
        uint64_t v83 = CFDictionaryGetValue(v68, @"PixelRepetition");
        if (v83) {
          LODWORD(v83) = CA_CFIntValue(v83);
        }
        if (!*v63 || !(v82 | v83))
        {
          BOOL v84 = CFDictionaryGetValue(v68, @"Active");
          unsigned int v85 = v84 ? CA_CFIntValue(v84) : 0;
          uint64_t v86 = CFDictionaryGetValue(v71, @"Active");
          unsigned int v87 = v86 ? CA_CFIntValue(v86) : 0;
          if (!*v63
            || v85 < 0xF01
            || v87 < 0x870
            || !CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_resolution)
          {
            unsigned int v88 = CFDictionaryGetValue(v67, @"IsOverscanned");
            if (v88) {
              LOBYTE(v88) = CA_CFBoolValue(v88);
            }
            char v89 = CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::override
                ? CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::value != 0
                : (char)v88;
            Arradouble y = (const __CFArray *)CA_CFDictionaryGetArray(v67, @"ColorModes");
            if (Array)
            {
              CFArrayRef v91 = Array;
              if (CFArrayGetCount(Array)) {
                break;
              }
            }
            CFArrayRef v91 = v203;
            if ((*((_WORD *)v217 + 328) & 0x1C00) != 0x400) {
              break;
            }
          }
        }
        CFArrayRef v64 = v215;
LABEL_462:
        if (++v62 == v61) {
          goto LABEL_465;
        }
      }
      char v197 = v89;
      *((_DWORD *)v219 + 22) = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)v217 + 2304))(v217);
      CFArrayRef v92 = (const __CFArray *)CA_CFDictionaryGetArray(v67, @"UnsafeColorElementIDs");
      uint64_t v237 = 1065353216;
      memset(v236, 0, sizeof(v236));
      if (!CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::ignore_unsafe)
      {
        CFArrayRef v93 = v92;
        if (v92)
        {
          CFTypeID v94 = CFGetTypeID(v92);
          if (v94 == CFArrayGetTypeID())
          {
            CFIndex v95 = CFArrayGetCount(v93);
            if (v95)
            {
              CFIndex v96 = v95;
              for (CFIndex k = 0; k != v96; ++k)
              {
                ValueAtIndedouble x = CFArrayGetValueAtIndex(v93, k);
                unsigned int v99 = CA_CFIntValue(ValueAtIndex);
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v236, v99, v99);
              }
            }
          }
        }
      }
      CFIndex v227 = CFArrayGetCount(v91);
      if (!v227)
      {
LABEL_461:
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v236);
        CFArrayRef v64 = v215;
        CFIndex v61 = v214;
        goto LABEL_462;
      }
      CFIndex v100 = 0;
      uint64_t v223 = 0;
      char v228 = 0;
      char v222 = 0;
      CFArrayRef v229 = v91;
      do
      {
        CFDictionaryRef v101 = (const __CFDictionary *)CA_CFArrayGetDictionary(v91, v100);
        int v102 = CA_CFDictionaryGetInt(v101, @"PixelEncoding");
        int v103 = CA_CFDictionaryGetInt(v101, @"Colorimetry");
        if (v102 == 3)
        {
          uint64_t v104 = *((void *)v219 + 1);
          if (*(void *)v219 == v104)
          {
            BOOL v106 = 0;
          }
          else
          {
            uint64_t v105 = *(void *)v219 + 8;
            do
            {
              BOOL v106 = ((*(void *)(v105 - 8) >> 29) & 0x1FFFFFF) == v80;
              BOOL v107 = ((*(void *)(v105 - 8) >> 29) & 0x1FFFFFF) == v80 || v105 == v104;
              v105 += 8;
            }
            while (!v107);
          }
          v222 |= v106;
        }
        BOOL v108 = v103 == 1;
        if (v63[33] && v103 == 16 && !v102)
        {
          int v109 = CA_CFDictionaryGetInt(v101, @"EOTF");
          BOOL v111 = (int)CA_CFDictionaryGetInt(v101, @"Depth") > 9 && v109 == 2;
          BYTE4(v223) |= !v111;
          LOBYTE(v223) = v111 | v223;
        }
        v228 |= v108;
        ++v100;
        CFArrayRef v91 = v229;
      }
      while (v100 != v227);
      CFIndex v112 = 0;
      if ((v223 & 0x100000000) != 0) {
        int v113 = 0;
      }
      else {
        int v113 = 8;
      }
      int v193 = v113;
      if ((v223 & 0x100000000) != 0) {
        int v114 = 0;
      }
      else {
        int v114 = 4;
      }
      int v191 = v114;
      BOOL v117 = v85 == 3840 || v85 == 1920 || v87 == 2160 || v87 == 1080;
      uint64_t v199 = v85 & 0x3FFF | ((v87 & 0x3FFF) << 14);
      int v118 = !v117;
      int v210 = v118;
      double v119 = fabs((float)((float)v80 * -0.00000012716) + 1.0);
      unint64_t v198 = (unint64_t)(v80 & 0x1FFFFFF) << 29;
      while (1)
      {
        CFDictionaryRef v120 = (const __CFDictionary *)CA_CFArrayGetDictionary(v91, v112);
        unsigned int v121 = CA_CFDictionaryGetInt(v120, @"ID");
        CFDictionaryRef v122 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v120, @"DownstreamFormat");
        if (v122) {
          CFDictionaryRef v123 = v122;
        }
        else {
          CFDictionaryRef v123 = v120;
        }
        BOOL Bool = CA_CFDictionaryGetBool(v123, @"IsVirtual");
        int v124 = CA_CFDictionaryGetInt(v123, @"PixelEncoding");
        int v125 = CA_CFDictionaryGetInt(v123, @"Depth");
        int v225 = CA_CFDictionaryGetInt(v123, @"Colorimetry");
        int v126 = CA_CFDictionaryGetInt(v123, @"EOTF");
        int v127 = CA_CFDictionaryGetInt(v123, @"DynamicRange");
        int v128 = v127;
        int v129 = 128;
        unsigned int v130 = 27;
        switch(v124)
        {
          case 0:
            if (*((unsigned char *)v217 + 636) == 1)
            {
              CFArrayRef v91 = v229;
              int v131 = v225;
              if (CADeviceIsVirtualized::once != -1)
              {
                dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
                int v131 = v225;
              }
              int v129 = 0;
              unsigned int v130 = 1;
              if (CADeviceIsVirtualized::is_virtualized && v125 >= 10 && v126 == 2 && !v128)
              {
                unsigned int v130 = 22;
                goto LABEL_323;
              }
            }
            else
            {
              CFArrayRef v91 = v229;
              int v131 = v225;
              if (v125 >= 10
                && v126 == 2
                && !v127
                && v230[33]
                && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
              {
                if (v223)
                {
                  if (v225 != 16) {
                    goto LABEL_459;
                  }
                  unsigned int v130 = 24;
                }
                else
                {
                  unsigned int v130 = 22;
                }
LABEL_322:
                int v129 = 32;
LABEL_323:
                if (v210 && !v230[33])
                {
                  CFArrayRef v91 = v229;
                  if (CADeviceIsVirtualized::once != -1)
                  {
                    int v189 = v129;
                    unsigned int v190 = v130;
                    dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
                    unsigned int v130 = v190;
                    int v131 = v225;
                    int v129 = v189;
                  }
                  if (!CADeviceIsVirtualized::is_virtualized) {
                    goto LABEL_459;
                  }
                }
                else
                {
                  CFArrayRef v91 = v229;
                }
                goto LABEL_326;
              }
              BOOL v136 = v125 == 12 || v125 == 10;
              if (v136 && !v127)
              {
                if (!v230[33]
                  || CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
                {
                  goto LABEL_459;
                }
                if (((v126 == 2) & v223) != 0)
                {
                  if (v225 != 16) {
                    goto LABEL_459;
                  }
                  goto LABEL_390;
                }
                if (((v126 != 2) & BYTE4(v223)) == 1 && v225 != 16) {
                  goto LABEL_459;
                }
                if (((v126 != 2) & BYTE4(v223)) != 0)
                {
LABEL_390:
                  BOOL v175 = v126 == 2;
                  if (v125 == 10)
                  {
                    int v176 = 14;
                    int v177 = 24;
                  }
                  else
                  {
                    int v176 = 15;
                    int v177 = 25;
                  }
                }
                else
                {
                  BOOL v175 = v126 == 2;
                  if (v125 == 10)
                  {
                    int v176 = 2;
                    int v177 = 22;
                  }
                  else
                  {
                    int v176 = 3;
                    int v177 = 23;
                  }
                }
                if (v175) {
                  unsigned int v130 = v177;
                }
                else {
                  unsigned int v130 = v176;
                }
                if (v126 == 2) {
                  int v129 = 32;
                }
                else {
                  int v129 = 16;
                }
                goto LABEL_454;
              }
              if (v125 > 8) {
                goto LABEL_459;
              }
              if ((v223 & 0x100000000) != 0)
              {
                if (v225 != 16) {
                  goto LABEL_459;
                }
                int v129 = 8;
                unsigned int v130 = 13;
              }
              else
              {
                int v129 = 0;
                unsigned int v130 = 1;
              }
            }
            goto LABEL_457;
          case 1:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv | CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_420) {
              goto LABEL_239;
            }
            if (v225 == 7
              && v125 >= 10
              && v126 == 2
              && v127 == 1
              && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              int v132 = CA_CFDictionaryGetInt(v120, @"Depth");
              int v133 = CA_CFDictionaryGetInt(v120, @"Colorimetry");
              int v134 = CA_CFDictionaryGetInt(v120, @"EOTF");
              int v135 = CA_CFDictionaryGetInt(v120, @"DynamicRange");
              if (v132 < 10) {
                goto LABEL_239;
              }
              CFArrayRef v91 = v229;
              if (v133 == 7 && v134 == 2 && v135 == 1)
              {
                int v129 = 0;
                unsigned int v130 = 20;
                int v131 = 7;
                goto LABEL_323;
              }
LABEL_459:
              int v63 = v230;
              goto LABEL_460;
            }
            BOOL v141 = v125 == 12 || v125 == 10;
            if (!v141
              || v127 != 1
              || CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              CFArrayRef v91 = v229;
              if (v225 != 1 || v125 != 8 || v126 || v127 != 1) {
                goto LABEL_459;
              }
              int v129 = 0;
              unsigned int v130 = 4;
LABEL_327:
              v129 += 2;
              BOOL v145 = v216;
              goto LABEL_342;
            }
            int v207 = CA_CFDictionaryGetInt(v120, @"Depth");
            int v142 = CA_CFDictionaryGetInt(v120, @"Colorimetry");
            int v143 = CA_CFDictionaryGetInt(v120, @"EOTF");
            int v144 = CA_CFDictionaryGetInt(v120, @"DynamicRange");
            if (v207 != v125) {
              goto LABEL_239;
            }
            int v131 = v225;
            if (v142 != v225 || v143 != v126) {
              goto LABEL_239;
            }
            CFArrayRef v91 = v229;
            if (v144 != 1) {
              goto LABEL_459;
            }
            if (v225 == 7 && v126 == 2)
            {
              int v129 = 0;
              if (v125 == 10) {
                unsigned int v130 = 20;
              }
              else {
                unsigned int v130 = 21;
              }
              goto LABEL_323;
            }
            if (v125 == 10) {
              unsigned int v130 = 5;
            }
            else {
              unsigned int v130 = 6;
            }
            if (v126 || v225 != 1) {
              goto LABEL_459;
            }
            int v129 = 0;
LABEL_454:
            int v188 = 1 << v130;
            if (((1 << v130) & 0xFB6C) != 0) {
              goto LABEL_457;
            }
            if ((v188 & 0x3FF0000) != 0)
            {
LABEL_228:
              int v131 = v225;
              if (v126 == 2) {
                goto LABEL_323;
              }
LABEL_239:
              CFArrayRef v91 = v229;
              int v63 = v230;
              goto LABEL_460;
            }
            if ((v188 & 0x490) != 0)
            {
LABEL_457:
              if (*((unsigned char *)v217 + 636) != 1 && v126) {
                goto LABEL_459;
              }
            }
LABEL_326:
            switch(v131)
            {
              case 0:
                BOOL v145 = v216;
                if (v228) {
                  goto LABEL_459;
                }
                goto LABEL_342;
              case 1:
              case 10:
              case 16:
                goto LABEL_327;
              case 7:
                BOOL v145 = v216;
                if (v130 > 0x1C || ((1 << v130) & 0x101D0000) == 0) {
                  goto LABEL_459;
                }
                goto LABEL_342;
              case 8:
              case 14:
                unsigned int v146 = v130 - 28;
                break;
              case 9:
                unsigned int v146 = v130 - 24;
                break;
              default:
                BOOL v145 = v216;
                if (!*v230) {
                  goto LABEL_342;
                }
                goto LABEL_459;
            }
            BOOL v145 = v216;
            if (v146 < 0xFFFFFFFE) {
              goto LABEL_459;
            }
LABEL_342:
            unsigned int v208 = v130;
            int v226 = v129;
            int v147 = CA_CFDictionaryGetInt(v123, @"DynamicRange");
            if (!v147) {
              goto LABEL_346;
            }
            if (v147 != 1)
            {
              if (*v230) {
                goto LABEL_459;
              }
LABEL_346:
              int v149 = 0;
              uint64_t v148 = 0x1000000000000000;
              goto LABEL_347;
            }
            ++v226;
            uint64_t v148 = 0x2000000000000000;
            int v149 = 1;
LABEL_347:
            int32x2_t v150 = v233;
            if (!v233) {
              goto LABEL_459;
            }
            uint32x2_t v151 = &v233;
            do
            {
              int32x2_t v152 = v150;
              uint64_t v153 = v151;
              unsigned int v154 = *((_DWORD *)v150 + 7);
              int32x2_t v155 = (uint64_t **)(v150 + 1);
              if (v154 >= v121)
              {
                int32x2_t v155 = (uint64_t **)v152;
                uint32x2_t v151 = (uint64_t **)v152;
              }
              int32x2_t v150 = *v155;
            }
            while (v150);
            if (v151 == &v233) {
              goto LABEL_459;
            }
            if (v154 < v121) {
              int32x2_t v152 = (uint64_t *)v153;
            }
            if (v121 < *((_DWORD *)v152 + 7)) {
              goto LABEL_459;
            }
            int v195 = v149;
            if (*v230)
            {
              BOOL v156 = 0;
              int32x2_t v157 = v217;
            }
            else
            {
              int32x2_t v157 = v217;
              BOOL v156 = (*((_WORD *)v217 + 328) & 0x1C00) != 4096;
            }
            int8x8_t v158 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v236, v121);
            uint64_t v196 = v158;
            char v159 = v205 & ~(v145 || Bool);
            if (v119 >= 0.001) {
              char v159 = 0;
            }
            uint64_t v160 = 0x10000000;
            if (!v156) {
              uint64_t v160 = 0;
            }
            unint64_t v161 = v160 | v199 | v198;
            int v201 = v145 || Bool;
            uint64_t v162 = 0x40000000000000;
            if (!v145 && !Bool) {
              uint64_t v162 = 0;
            }
            BOOL v19 = (v159 & 1) == 0;
            unint64_t v163 = 0x8000000000000000;
            if (v19) {
              unint64_t v163 = 0;
            }
            unint64_t v200 = v161;
            unint64_t v164 = v162 & 0xF07FFFFFFFFFFFFFLL | ((unint64_t)(v208 & 0x1F) << 55) | v161;
            uint64_t v194 = v158 != 0;
            unint64_t v165 = v148 & 0xBFFFFFFFFFFFFFFFLL | (v194 << 62);
            unint64_t v221 = v165 | v164 | v163;
            unint64_t v231 = v221;
            if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)v157 + 2304))(v157))
            {
              float32x4_t v166 = CFDictionaryGetValue(v67, @"HorizontalPipeCount");
              if (v166) {
                unsigned __int8 v167 = CA_CFIntValue(v166);
              }
              else {
                unsigned __int8 v167 = 0;
              }
              char v168 = CFDictionaryGetValue(v67, @"VerticalPipeCount");
              unint64_t v192 = v164;
              if (v168) {
                unsigned __int8 v169 = CA_CFIntValue(v168);
              }
              else {
                unsigned __int8 v169 = 0;
              }
              int v170 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, void))(*(void *)v217 + 2288))(v217, v167);
              int v171 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, void))(*(void *)v217 + 2296))(v217, v169);
              *(void *)long long buf = v221;
              int32x2_t v172 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v219 + 48, v221, buf);
              *((_DWORD *)v172 + 6) = v170;
              *((_DWORD *)v172 + 7) = v171;
              *((unsigned char *)v172 + 32) = v167;
              *((unsigned char *)v172 + 33) = v169;
              *((_WORD *)v172 + 17) = 0;
              CFArrayRef v91 = v229;
              unint64_t v164 = v192;
            }
            unint64_t v173 = v165 | ((unint64_t)(v208 & 0x1F) << 55) | v200;
            if (v201)
            {
              if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v219, *((const CA::WindowServer::Display::Mode **)v219 + 1), v173))
              {
                goto LABEL_459;
              }
            }
            else
            {
              *(void *)long long buf = v173 | 0x40000000000000;
              CA::WindowServer::Display::ModeSet::remove_mode((uint64_t)v219, (const CA::WindowServer::Display::Mode *)buf);
            }
            if (v196)
            {
              *(void *)long long buf = v164 | v148;
              if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v219, *((const CA::WindowServer::Display::Mode **)v219 + 1), v164 | v148))
              {
                unint64_t v174 = v164;
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  float32x4_t v178 = x_log_category_windowserver;
                  if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)long long v235 = 0;
                    _os_log_impl(&dword_184668000, v178, OS_LOG_TYPE_ERROR, "Mode set already contains low-bandwidth version of same mode", v235, 2u);
                  }
                }
                CA::WindowServer::Display::ModeSet::remove_mode((uint64_t)v219, (const CA::WindowServer::Display::Mode *)buf);
                unint64_t v164 = v174;
              }
            }
            else if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v219, *((const CA::WindowServer::Display::Mode **)v219 + 1), v148 | v164 | 0x4000000000000000))
            {
              if (!x_log_hook_p())
              {
                uint64_t v187 = x_log_category_windowserver;
                int v63 = v230;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl(&dword_184668000, v187, OS_LOG_TYPE_ERROR, "Mode set already contains high-bandwidth version of same mode", buf, 2u);
                }
                goto LABEL_460;
              }
              x_log_();
              goto LABEL_459;
            }
            (*(void (**)(uint8_t *__return_ptr))(*(void *)v217 + 1368))(buf);
            if (*(_DWORD *)&v240[18] == 1552 && v208 <= 0x19 && ((1 << v208) & 0x3C0E00E) != 0)
            {
              unint64_t v179 = v164 | (v194 << 62);
              if (v195)
              {
                if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v219, *((const CA::WindowServer::Display::Mode **)v219 + 1), v179 | 0x1000000000000000))
                {
                  goto LABEL_459;
                }
              }
              else
              {
                *(void *)long long buf = v179 | 0x2000000000000000;
                if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v219, *((const CA::WindowServer::Display::Mode **)v219 + 1), v179 | 0x2000000000000000))
                {
                  CA::WindowServer::Display::ModeSet::remove_mode((uint64_t)v219, (const CA::WindowServer::Display::Mode *)buf);
                }
              }
            }
            if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)v219, *((const CA::WindowServer::Display::Mode **)v219 + 1), v221))
            {
              if (*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v204, v221, (uint64_t *)&v231)+ 8) >= v218)goto LABEL_459; {
            }
              }
            else
            {
              if (CADeviceSupportsHDRProcessing::once[0] != -1) {
                dispatch_once(CADeviceSupportsHDRProcessing::once, &__block_literal_global_175);
              }
              if (!CADeviceSupportsHDRProcessing::supports_hdr
                && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v231))
              {
                goto LABEL_459;
              }
              CA::WindowServer::Display::ModeSet::add_mode(v219, (const CA::WindowServer::Display::Mode *)&v231);
            }
            int v180 = CA_CFDictionaryGetInt(v67, @"ID");
            int v181 = CA_CFDictionaryGetInt(v67, @"preferredUIScale");
            uint64_t v182 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v204, v221, (uint64_t *)&v231);
            *((_DWORD *)v182 + 6) = v121;
            *((_DWORD *)v182 + 7) = v180;
            *((_DWORD *)v182 + 8) = v218;
            *((_DWORD *)v182 + 9) = v181;
            *((unsigned char *)v182 + 4CASetDebugMessage("", 0) = v197;
            *(_WORD *)((char *)v182 + 41) = 0;
            *((unsigned char *)v182 + 43) = 0;
            if (v226 + v218 <= HIDWORD(v202))
            {
              int v63 = v230;
              if ((v201 & 1) == 0) {
                goto LABEL_427;
              }
            }
            else
            {
              int v63 = v230;
              if ((v201 & 1) == 0)
              {
                *(void *)uint64_t v206 = v221;
                HIDWORD(v202) = v226 + v218;
LABEL_427:
                signed int v183 = (v200 >> 14) & 0x3FFF;
                if ((unsigned __int16)(v200 & 0x3FFF) > v213)
                {
                  int v184 = v213;
                  BOOL v185 = v183 <= (int)v211;
                  if (v183 <= (int)v211) {
                    uint64_t v186 = v211;
                  }
                  else {
                    uint64_t v186 = v183;
                  }
                  uint64_t v211 = v186;
                  if (!v185) {
                    int v184 = v200 & 0x3FFF;
                  }
                  int v213 = v184;
                }
                if (CA::WindowServer::IOMFBDisplay::compare_native_modes((float *)v217, v221, v212 >> 32, v202))
                {
                  LODWORD(v202) = ((double)((v221 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5);
                  *((void *)&v212 + 1) = (v200 >> 14) & 0x3FFF;
                  DWORD1(v212) = v200 & 0x3FFF;
                }
              }
            }
LABEL_460:
            if (++v112 == v227) {
              goto LABEL_461;
            }
            break;
          case 2:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv) {
              goto LABEL_239;
            }
            int v131 = v225;
            if (v225 == 7
              && v125 >= 10
              && v126 == 2
              && v127 == 1
              && v230[33]
              && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              unsigned int v130 = 19;
              goto LABEL_322;
            }
            BOOL v137 = v125 == 12 || v125 == 10;
            if (v137 && v127 == 1)
            {
              CFArrayRef v91 = v229;
              if (v230[33]
                && !CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths
                && (v126 & 0xFFFFFFFD) == 0)
              {
                if (v225 == 7 && v126 == 2)
                {
                  BOOL v138 = v125 == 10;
                  int v139 = 18;
                  goto LABEL_288;
                }
                if (!v126 && (v222 & 1) == 0)
                {
                  if (v125 == 10) {
                    unsigned int v130 = 8;
                  }
                  else {
                    unsigned int v130 = 9;
                  }
                  int v129 = v191;
                  goto LABEL_326;
                }
              }
            }
            else
            {
              CFArrayRef v91 = v229;
              if (v125 <= 8 && (v222 & 1) == 0)
              {
                unsigned int v130 = 7;
                int v129 = v191;
                goto LABEL_457;
              }
            }
            goto LABEL_459;
          case 3:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv) {
              goto LABEL_239;
            }
            int v131 = v225;
            if (v225 == 7
              && v125 >= 10
              && v126 == 2
              && v127 == 1
              && v230[33]
              && CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths)
            {
              unsigned int v130 = 16;
              goto LABEL_322;
            }
            BOOL v140 = v125 == 12 || v125 == 10;
            if (!v140 || v127 != 1)
            {
              CFArrayRef v91 = v229;
              if (v125 >= 9) {
                goto LABEL_459;
              }
              unsigned int v130 = 10;
              int v129 = v193;
              goto LABEL_457;
            }
            CFArrayRef v91 = v229;
            if (!v230[33]
              || CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_high_bit_depths
              || (v126 & 0xFFFFFFFD) != 0)
            {
              goto LABEL_459;
            }
            if (v225 == 7 && v126 == 2)
            {
              BOOL v138 = v125 == 10;
              int v139 = 16;
LABEL_288:
              if (v138) {
                unsigned int v130 = v139;
              }
              else {
                unsigned int v130 = v139 + 1;
              }
              goto LABEL_322;
            }
            if (v126) {
              goto LABEL_459;
            }
            if (v125 == 10) {
              unsigned int v130 = 11;
            }
            else {
              unsigned int v130 = 12;
            }
            int v129 = v193;
            goto LABEL_326;
          case 4:
            unsigned int v130 = 26;
            goto LABEL_228;
          case 5:
            goto LABEL_228;
          case 6:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv) {
              goto LABEL_239;
            }
            int v131 = v225;
            CFArrayRef v91 = v229;
            if (v225 != 7 || v125 < 10 || v126 != 2 || v127 != 1) {
              goto LABEL_459;
            }
            unsigned int v130 = 19;
            int v129 = 16;
            goto LABEL_323;
          case 9:
            if (CA::WindowServer::IOMFBDisplay::update_digital_modes(CA::WindowServer::Display::ModeSet &,CA::WindowServer::Display::Mode &,__CFArray const*,__CFArray const*)::filter_yuv) {
              goto LABEL_239;
            }
            int v131 = v225;
            CFArrayRef v91 = v229;
            if (v225 != 7 || v125 < 10 || v126 != 2 || v127 != 1) {
              goto LABEL_459;
            }
            unsigned int v130 = 28;
            int v129 = 64;
            goto LABEL_323;
          default:
            if (*v230) {
              goto LABEL_239;
            }
            unsigned int v130 = 0;
            int v129 = 0;
            CFArrayRef v91 = v229;
            int v131 = v225;
            goto LABEL_326;
        }
      }
    }
    uint64_t v211 = 0;
    int v213 = 0;
    *((void *)&v212 + 1) = 0;
    DWORD1(v212) = 0;
    int v63 = v230;
LABEL_465:
    *((void *)v217 + 9) = v213 | (unint64_t)(v211 << 32);
    *((void *)v217 + 1CASetDebugMessage("", 0) = v212 >> 32;
    if (v63[33]) {
      *(void *)uint64_t v206 = CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria((unint64_t **)v219, 0, *((unsigned __int16 *)v217 + 328) >> 13, 0, (unsigned int *)v217 + 6581, 0.0, 0.0, 0.0);
    }
    CA::WindowServer::Display::ModeSet::sort(v219);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v233);
    if (v209) {
      CFRelease(v209);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    CA::WindowServer::IOMFBDisplay::release_everything(this);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::fetch_current_iomfb_mode(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int DigitalOutMode = IOMobileFramebufferGetDigitalOutMode();
  if (DigitalOutMode)
  {
    int v3 = DigitalOutMode;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v6 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *((_DWORD *)this + 6);
        *(_DWORD *)long long buf = 67109376;
        int v10 = v7;
        __int16 v11 = 1024;
        int v12 = v3;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "Display %d error 0x%x fetching current digital mode", buf, 0xEu);
      }
    }
    return 0;
  }
  int v4 = (uint64_t *)((char *)this + 27104);
  if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, *((void *)this + 3388), (uint64_t *)this + 3388)+ 6)&& !*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, *v4, (uint64_t *)this + 3388)+ 7))
  {
    return *v4;
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 3307);
  if (!v8) {
    return 0;
  }
  while (*((_DWORD *)v8 + 6) || *((_DWORD *)v8 + 7))
  {
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      return 0;
    }
  }
  return v8[2];
}

uint64_t CA::WindowServer::IOMFBDisplay::release_everything(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2 = (unsigned int *)((char *)this + 25712);
  (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2184))(this);
  *((unsigned char *)v2 + 2452) = 0;
  uint64_t v3 = *((void *)this + 3304);
  if (v3)
  {
    --*(_DWORD *)(v3 + 8);
    *((void *)this + 3304) = 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25720));
  unint64_t v4 = *v2;
  if (v4)
  {
    unint64_t v5 = 0;
    int v6 = (CA::WindowServer::Surface **)((char *)this + 25800);
    do
    {
      *(v6 - 1) = 0;
      if (*v6)
      {
        CA::WindowServer::Surface::unref(*v6);
        *int v6 = 0;
        unint64_t v4 = *v2;
      }
      ++v5;
      v6 += 6;
    }
    while (v5 < v4);
  }
  int v7 = (uint64_t *)*((void *)this + 3254);
  if (v7)
  {
    do
    {
      *((_DWORD *)v7 + 2) = 0;
      CA::WindowServer::IOMFBDisplay::release_buffer(v7);
      int v7 = (uint64_t *)*v7;
    }
    while (v7);
    uint64_t v8 = (void *)*((void *)this + 3254);
    if (v8)
    {
      do
      {
        BOOL v9 = (void *)*v8;
        free(v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
  }
  *((void *)this + 3254) = 0;
  if (*((void *)this + 3255)) {
    CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
  }
  uint64_t v10 = *((void *)this + 3302);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    *((void *)this + 3302) = 0;
  }

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25720));
}

const void *CA::WindowServer::dictionary_dict(CA::WindowServer *this, const __CFDictionary *a2, const __CFString *a3)
{
  Value = CFDictionaryGetValue(this, a2);
  if (!Value) {
    return 0;
  }
  unint64_t v4 = Value;
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFDictionaryGetTypeID()) {
    return 0;
  }
  return v4;
}

BOOL CA::WindowServer::IOMFBDisplay::compare_native_modes(float *a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  v21[0] = a2;
  memset(v20, 0, 44);
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 1368))(v20);
  if (HIDWORD(v20[1]) == 1552)
  {
    unsigned int v8 = (0x7007u >> (BYTE8(v20[1]) - 33)) & 1;
    if ((DWORD2(v20[1]) - 44577) > 0xE) {
      LOBYTE(v8) = 0;
    }
    if (!a2) {
      return 0;
    }
  }
  else
  {
    LOBYTE(v8) = 0;
    if (!a2) {
      return 0;
    }
  }
  if (v8) {
    goto LABEL_11;
  }
  if (CADeviceSupportsHDRTVModes::once != -1) {
    dispatch_once(&CADeviceSupportsHDRTVModes::once, &__block_literal_global_178);
  }
  if (CADeviceSupportsHDRTVModes::supports_hdr_modes)
  {
LABEL_11:
    if ((a2 & 0xFFFFFFF) == 0x21C1000) {
      return 0;
    }
  }
  else
  {
    BOOL is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)v21);
    BOOL result = 0;
    if (is_hdr || (a2 & 0xFFFFFFF) == 0x21C1000) {
      return result;
    }
  }
  if (CA::WindowServer::Display::Mode::hdr_type(a2) == 1 && (a2 & 0x4000000000000000) != 0) {
    return 0;
  }
  float v11 = a1[6540];
  if (v11 == 0.0) {
    return 0;
  }
  BOOL result = 0;
  unsigned int v12 = a2 & 0x3FFF;
  unsigned int v13 = (a2 >> 14) & 0x3FFF;
  if (vabds_f32(v11, (float)v12 / (float)v13) <= (float)(v11 * 0.05) && v12 >= 0x780 && v13 >= 0x438)
  {
    unsigned int v14 = ((double)((a2 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5);
    if (v14 < 0x3C && a4 > 0x3B || (int)v12 < (int)a3 || (int)v13 < SHIDWORD(a3)) {
      return 0;
    }
    return v12 != a3 || v13 != HIDWORD(a3) || v14 >= a4;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::release_buffer(void *a1)
{
  uint64_t v2 = (CA::Shape *)a1[2];
  if (v2)
  {
    CA::Shape::unref(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (CA::Shape *)a1[3];
  if (v3)
  {
    CA::Shape::unref(v3);
    a1[3] = 0;
  }
  unint64_t v4 = (CA::WindowServer::Surface *)a1[4];
  if (v4)
  {
    CA::WindowServer::Surface::unref(v4);
    a1[4] = 0;
  }
  CFTypeID v5 = (CA::WindowServer::Surface *)a1[5];
  if (v5)
  {
    CA::WindowServer::Surface::unref(v5);
    a1[5] = 0;
  }
}

float *CA::WindowServer::IOMFBDisplay::create_surface(CA::WindowServer::IOSurface *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, const void *a9)
{
  int v10 = 1024;
  if ((*((unsigned char *)a1 + 745) & 0x80) == 0)
  {
    if ((MEMORY[0xFFFFFC021] & 8) != 0) {
      int v10 = 1792;
    }
    else {
      int v10 = 1024;
    }
  }
  return CA::WindowServer::IOSurface::allocate_iosurface(a1, a2, a3, a4, a5, a6, v10, a7, a8, a9);
}

uint64_t CA::WindowServer::IOMFBDisplay::idle(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 6427;
  uint64_t v3 = (pthread_mutex_t *)&this[6430];
  pthread_mutex_lock((pthread_mutex_t *)&this[6430]);
  if (this[12 * v2->_os_unfair_lock_opaque + 6452]._os_unfair_lock_opaque) {
    CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)&this[6392]);
  }
  uint64_t os_unfair_lock_opaque = v2[1]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque)
  {
    CFTypeID v5 = v2 + 25;
    do
    {
      v5->_uint64_t os_unfair_lock_opaque = 0;
      v5 += 12;
      --os_unfair_lock_opaque;
    }
    while (os_unfair_lock_opaque);
  }
  CA::WindowServer::Display::idle(this);

  return pthread_mutex_unlock(v3);
}

uint64_t CA::WindowServer::IOMFBDisplay::release_resources(CA::WindowServer::IOMFBDisplay *this)
{
  CA::WindowServer::IOMFBDisplay::release_everything(this);

  return CA::WindowServer::Display::release_resources((os_unfair_lock_s *)this);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_signal_type(uint64_t result, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 636) != a2)
  {
    uint64_t v2 = result;
    *(unsigned char *)(result + 636) = a2;
    long long v8 = 0u;
    *(_OWORD *)long long __p = 0u;
    uint64_t v4 = 0;
    long long v6 = 0u;
    memset(v7, 0, sizeof(v7));
    CFTypeID v5 = &v6;
    LODWORD(v8) = 1065353216;
    CA::WindowServer::Display::set_all_modes(result, (uint64_t)__p, 0, 0);
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v7);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy((void *)v6);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(void *)(v2 + 27104) = 0;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 560));
    CA::WindowServer::IOMFBDisplay::update_framebuffer_locked((CA::WindowServer::IOMFBDisplay *)v2, 582);
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 560));
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::announce_next_swap_timestamp(CA::WindowServer::IOMFBDisplay *this, CA::Render::Update *a2, double a3)
{
  if (!*((unsigned char *)this + 28185))
  {
    double v5 = *((double *)a2 + 9);
    double v6 = v5 + (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 760))(this) * -0.125;
    if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 136))(this) != 2
      || v6 - a3 >= (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 744))(this))
    {
      unint64_t v7 = CAHostTimeWithTime(v6);
      uint64_t v8 = *((void *)this + 3196);
      if (init_iomfb(void)::once != -1)
      {
        unint64_t v10 = v7;
        dispatch_once(&init_iomfb(void)::once, &__block_literal_global_13500);
        unint64_t v7 = v10;
      }
      uint64_t v9 = (void (*)(uint64_t, unint64_t))iomfb_announce_next_swap_timestamp_f;
      if (iomfb_announce_next_swap_timestamp_f)
      {
        v9(v8, v7);
      }
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_power_state_locked(CA::WindowServer::IOMFBDisplay *a1, char a2, int a3, char a4)
{
  *((unsigned char *)a1 + 27972) = a2;
  return CA::WindowServer::IOMFBDisplay::update_power_state_locked(a1, a3, a4);
}

uint64_t CA::WindowServer::IOMFBDisplay::update_power_state_locked(CA::WindowServer::IOMFBDisplay *this, int a2, char a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  double v6 = (char *)this + 25640;
  uint64_t v7 = *((void *)this + 91);
  uint64_t v8 = (unsigned char *)(v7 + 2);
  uint64_t v9 = (unsigned char *)(v7 + 3);
  if (*((_DWORD *)this + 6992)) {
    int v10 = 1;
  }
  else {
    int v10 = *((unsigned __int8 *)this + 27972);
  }
  kdebug_trace();
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 696))(this) & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float v11 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *((_DWORD *)this + 6);
        int v13 = *v8;
        int v14 = *v9;
        int v15 = v6[2332];
        BOOL v16 = *((_DWORD *)v6 + 582) != 0;
        *(_DWORD *)long long buf = 67110656;
        *(_DWORD *)&uint8_t buf[4] = v12;
        LOWORD(v34) = 1024;
        *(_DWORD *)((char *)&v34 + 2) = v13;
        HIWORD(v34) = 1024;
        *(_DWORD *)CFArrayRef v35 = v14;
        *(_WORD *)&v35[4] = 1024;
        *(_DWORD *)&v35[6] = v10;
        __int16 v36 = 1024;
        int v37 = a2;
        __int16 v38 = 1024;
        int v39 = v15;
        __int16 v40 = 1024;
        BOOL v41 = v16;
        _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::update_power_state display_id=%u current_power_state=%i target_power_state=%i new_target_power_state=%i sync=%i raw_power_state=%i power_assertions=%i", buf, 0x2Cu);
      }
    }
  }
  *(void *)long long buf = this;
  CFIndex v34 = v8;
  *(void *)CFArrayRef v35 = v9;
  if (*v9 == v10)
  {
    if (a2 && v10 == 1 && *v8 != 1) {
      CA::WindowServer::IOMFBDisplay::update_power_state_locked(BOOL,BOOL)::$_0::operator()((unsigned char **)buf);
    }
  }
  else
  {
    CA::WindowServer::IOMFBDisplay::update_fastest_display(this);
    unsigned char *v9 = v10;
    os_unfair_lock_lock((os_unfair_lock_t)this + 6512);
    CA::WindowServer::IOMFBDisplay::initialize_timings(this);
    uint64_t v17 = *((void *)this + 3258);
    if (v17) {
      atomic_store(v10 == 1, (unsigned __int8 *)(v17 + 1));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 6512);
    uint64_t v28 = 0x100000000;
    LODWORD(v28) = *((_DWORD *)this + 6);
    BYTE5(v28) = a3;
    HIWORD(v28) = v10 == 1;
    CA::Render::post_notification(0x36u, 0, (uint64_t)&v28, 0);
    BOOL v19 = (uint64_t *)*((void *)this + 3204);
    if (v19)
    {
      uint64_t v20 = *v19;
      if (!*v19)
      {
        sil_mgr_instance(0, 0xFFFFFFFFLL);
        *BOOL v19 = v20;
      }
      if (v10 != 1 && v20)
      {
        v18.n128_u64[0] = 0;
        iomfb_swap_set_indicator_brightness(*((void *)this + 3196), 0, v18);
        CA::WindowServer::SILMgr::set_power(*((CA::WindowServer::SILMgr **)this + 3204), 0, 1);
        *double v6 = 1;
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2112))(this);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v21 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *((_DWORD *)this + 6);
        *(_DWORD *)char v29 = 67109376;
        int v30 = v22;
        __int16 v31 = 1024;
        BOOL v32 = v10 == 1;
        _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_DEFAULT, "Display %u set power state %d", v29, 0xEu);
      }
    }
    CA::IOMobileFramebuffer::set_power_state((CA::WindowServer::IOMFBDisplay *)((char *)this + 25568));
    if (*v9)
    {
      *((void *)this + 3389) = 0;
      if ((*((_WORD *)this + 328) & 0x1C00) == 0 && *((void *)this + 3308) >= 2uLL)
      {
        uint64_t current_iomfb_mode = CA::WindowServer::IOMFBDisplay::fetch_current_iomfb_mode(this);
        if (CA::WindowServer::Display::Mode::operator==(current_iomfb_mode, 0)) {
          uint64_t current_iomfb_mode = *((void *)this + 81);
        }
        if (!CA::WindowServer::Display::Mode::operator==(*((void *)this + 3388), current_iomfb_mode)
          || v6[2577])
        {
          *((void *)this + 3388) = current_iomfb_mode;
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
          CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, 4);
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
          CA::WindowServer::IOMFBDisplay::reset_timings((os_unfair_lock_s *)this);
        }
      }
    }
    else
    {
      unsigned char *v8 = 0;
      v6[2526] = 0;
      CA::WindowServer::IOMFBDisplay::collect_frame_info(&v27, (uint64_t)this, 0);
      int v24 = v27;
      if (v27)
      {
        CA::WindowServer::IOMFBDisplay::FrameInfo::~FrameInfo(v27);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v24);
      }
    }
    CA::WindowServer::IOMFBDisplay::set_timings_enabled(this, v10 == 1);
    if (v10 == 1) {
      notify_post("com.apple.CoreAnimation.CAWindowServer.DisplayPower");
    }
    BYTE4(v28) = 0;
    CA::Render::post_notification(0x36u, 0, (uint64_t)&v28, 0);
    CA::WindowServer::IOMFBDisplay::set_needs_icc_reload(this);
    CA::WindowServer::IOMFBDisplay::update_fastest_display(this);
    if (a2 && *v9 == 1) {
      CA::WindowServer::IOMFBDisplay::update_power_state_locked(BOOL,BOOL)::$_0::operator()((unsigned char **)buf);
    }
  }
  return kdebug_trace();
}

uint64_t CA::WindowServer::IOMFBDisplay::update_power_state_locked(BOOL,BOOL)::$_0::operator()(unsigned char **a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (CA::IOMobileFramebuffer *)(*a1 + 25568);
  uint64_t result = CA::IOMobileFramebuffer::swap_wait(v2);
  if (result)
  {
    int v4 = result;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v5 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v9 = v4;
        _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_ERROR, "Wait Power On failed with error 0x%x. Retrying...", buf, 8u);
      }
    }
    uint64_t result = CA::IOMobileFramebuffer::swap_wait(v2);
    if (result)
    {
      int v6 = result;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v7 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v9 = v6;
          _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_FAULT, "Wait Power On failed with error 0x%x", buf, 8u);
        }
      }
      uint64_t result = sleep(0x1Eu);
    }
  }
  *a1[1] = *a1[2];
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_fastest_display(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  memset(&v9, 0, sizeof(v9));
  pthread_mutex_init(&v9, 0);
  uint64_t v10 = 0;
  CA::Render::post_notification(0x3Bu, 0, (uint64_t)&v9, 0);
  unsigned int v2 = atomic_exchange((atomic_uint *volatile)CA::WindowServer::IOMFBDisplay::_fastest_display_id, v10);
  if (v2 != v10)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v3 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109376;
        int v6 = v10;
        __int16 v7 = 1024;
        int v8 = HIDWORD(v10);
        _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEBUG, "AGX vsync hints will track display %u with %u Hz refresh rate\n", buf, 0xEu);
      }
    }
  }
  if (*(unsigned __int8 *)(*((void *)this + 91) + 2) | *(unsigned __int8 *)(*((void *)this + 91) + 3)
    && v10 == *((_DWORD *)this + 6))
  {
    atomic_store(6u, (unsigned __int8 *)CA::WindowServer::IOMFBDisplay::_latching_vsync);
  }
  return pthread_mutex_destroy(&v9);
}

void CA::IOMobileFramebuffer::set_power_state(CA::IOMobileFramebuffer *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 8))
  {
    v1[0] = 0;
    v1[1] = v1;
    pthread_key_t v1[2] = 0x2000000000;
    int v2 = 0;
    BMMonitorBlockExecutionWithSignature();
    _Block_object_dispose(v1, 8);
  }
  else
  {
    IOMobileFramebufferRequestPowerChange();
  }
}

void CA::WindowServer::IOMFBDisplay::reset_timings(os_unfair_lock_s *this)
{
  int v2 = this + 6512;
  os_unfair_lock_lock(this + 6512);
  LOBYTE(this[6513]._os_unfair_lock_opaque) = 0;
  CA::WindowServer::IOMFBDisplay::initialize_timings((CA::WindowServer::IOMFBDisplay *)this);

  os_unfair_lock_unlock(v2);
}

uint64_t ___ZN2CA19IOMobileFramebuffer15set_power_stateEb_block_invoke(uint64_t a1)
{
  uint64_t result = IOMobileFramebufferRequestPowerChange();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_display_state_locked(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = (unsigned __int8 *)*((void *)this + 91);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v3 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v4 = *v2;
      if (v4 > 0xB) {
        double v5 = "unknown";
      }
      else {
        double v5 = off_1E5273AC0[v4];
      }
      int v6 = *((_DWORD *)this + 6);
      unint64_t v7 = v2[1];
      if (v7 > 0xB) {
        int v8 = "unknown";
      }
      else {
        int v8 = off_1E5273AC0[v7];
      }
      *(_DWORD *)long long buf = 67109634;
      int v14 = v6;
      __int16 v15 = 2080;
      BOOL v16 = v5;
      __int16 v17 = 2080;
      __n128 v18 = v8;
      _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_display_state display_id=%u current_state=%s target_state=%s", buf, 0x1Cu);
    }
  }
  switch(v2[1])
  {
    case 0u:
      int v9 = *v2;
      if ((v9 - 2) < 2)
      {
        CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 0, 0);
        CA::WindowServer::FlipBook::free_surfaces(*((os_unfair_lock_s **)this + 40));
        CA::IOMobileFramebuffer::swap_wait((CA::WindowServer::IOMFBDisplay *)((char *)this + 25568));
        (*(void (**)(CA::WindowServer::IOMFBDisplay *, void, void, void))(*(void *)this + 2152))(this, 0, 0, 0);
        goto LABEL_27;
      }
      if (v9 == 1) {
        unsigned __int8 v10 = -1;
      }
      else {
        unsigned __int8 v10 = 0;
      }
      break;
    case 1u:
      if (*v2 == 1) {
        unsigned __int8 v10 = 0;
      }
      else {
        unsigned __int8 v10 = -1;
      }
      break;
    case 2u:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v11 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "powering on display and entering flipbook", buf, 2u);
        }
      }
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, uint64_t, void))(*(void *)this + 2152))(this, 1, 1, 0);
      CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 1u, 0);
      goto LABEL_27;
    case 3u:
      CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 2u, 0);
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, void, void, void))(*(void *)this + 2152))(this, 0, 0, 0);
LABEL_27:
      unsigned __int8 v10 = 0;
      *int v2 = v2[1];
      break;
    default:
      unsigned __int8 v10 = 5;
      break;
  }
  return v10;
}

void CA::WindowServer::IOMFBDisplay::set_secure_indicator_recording_positions(CA::WindowServer::IOMFBDisplay *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)this + 3204);
  if (v8)
  {
    if (!*(void *)v8)
    {
      sil_mgr_instance(0, 0xFFFFFFFFLL);
      *(void *)uint64_t v8 = v11;
      if (!v11) {
        return;
      }
      uint64_t v8 = *((void *)this + 3204);
    }
    if (*(unsigned __int8 *)(v8 + 133) != a2)
    {
      *(unsigned char *)(v8 + 133) = a2;
      if ((a2 & 1) == 0)
      {
        long long v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        x_stream_printf((uint64_t)&v49, "Recorded indicator positions for device of size [%ux%u]\n", a3, a4, a5, a6, a7, a8, *(unsigned int *)(v8 + 120));
        __n128 v18 = *(unsigned int **)(v8 + 136);
        uint64_t v19 = *(unsigned int **)(v8 + 144);
        if (v18 != v19)
        {
          double v20 = 1.0 / (double)*(int *)(v8 + 120);
          do
          {
            x_stream_printf((uint64_t)&v49, "indicator %u : [", v12, v13, v14, v15, v16, v17, *v18);
            uint64_t v27 = *((void *)v18 + 1);
            uint64_t v28 = *((void *)v18 + 2);
            if (v28 - v27 != 8)
            {
              uint64_t v29 = 0;
              unint64_t v30 = 0;
              do
              {
                x_stream_printf((uint64_t)&v49, "%g, %g, ", v21, v22, v23, v24, v25, v26, COERCE__INT64(*(float *)(v27 + v29)));
                ++v30;
                uint64_t v27 = *((void *)v18 + 1);
                uint64_t v28 = *((void *)v18 + 2);
                v29 += 8;
              }
              while (v30 < ((v28 - v27) >> 3) - 1);
            }
            x_stream_printf((uint64_t)&v49, "%g, %g]\n", v21, v22, v23, v24, v25, v26, COERCE__INT64(*(float *)(v28 - 8)));
            x_stream_printf((uint64_t)&v49, "indicator %u (normalized) : [", v31, v32, v33, v34, v35, v36, *v18);
            uint64_t v44 = *((void *)v18 + 1);
            uint64_t v43 = *((void *)v18 + 2);
            if (v43 - v44 != 8)
            {
              uint64_t v45 = 0;
              unint64_t v46 = 0;
              do
              {
                x_stream_printf((uint64_t)&v49, "%g, %g, ", v37, v38, v39, v40, v41, v42, COERCE__INT64(v20 * *(float *)(v44 + v45)));
                ++v46;
                uint64_t v44 = *((void *)v18 + 1);
                uint64_t v43 = *((void *)v18 + 2);
                v45 += 8;
              }
              while (v46 < ((v43 - v44) >> 3) - 1);
            }
            x_stream_printf((uint64_t)&v49, "%g, %g]\n", v37, v38, v39, v40, v41, v42, COERCE__INT64(v20 * *(float *)(v43 - 8)));
            v18 += 8;
          }
          while (v18 != v19);
        }
        if (x_log_hook_p())
        {
          x_stream_get(&v49);
          x_log_();
        }
        else
        {
          CFDictionaryRef v47 = x_log_category_secure_indicators;
          if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_DEFAULT))
          {
            CFTypeID v48 = x_stream_get(&v49);
            *(_DWORD *)long long buf = 136315138;
            float v53 = v48;
            _os_log_impl(&dword_184668000, v47, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
          }
        }
        if (v49)
        {
          free(v49);
          long long v49 = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
        }
        std::vector<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::__clear[abi:nn180100]((uint64_t *)(v8 + 136));
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::draw_debug_valid_positions_bounding_boxes(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 3204);
  if (v1)
  {
    if (!*(void *)v1)
    {
      sil_mgr_instance(0, 0xFFFFFFFFLL);
      *(void *)uint64_t v1 = v3;
      if (!v3) {
        return;
      }
      uint64_t v1 = *((void *)this + 3204);
    }
    if (!*(void *)(v1 + 8)) {
      operator new();
    }
    if (MEMORY[0x1E4F97AF8])
    {
      int v4 = *(_DWORD *)(v1 + 120);
      int v5 = *(_DWORD *)(v1 + 124);
      valid = (void *)SILManagerIndicatorValidPositions();
      unint64_t v7 = valid;
      if (valid)
      {
        unint64_t v8 = [valid count];
        if (v8)
        {
          if (v8 >> 59) {
            abort();
          }
          int64_t v9 = 32 * v8;
          unsigned __int8 v10 = (float64x2_t *)operator new(32 * v8);
          bzero(v10, v9);
          if (v9)
          {
            uint64_t v11 = 0;
            f64 = v10[(unint64_t)v9 / 0x10].f64;
            uint64_t v13 = (unint64_t)(v9 >> 5) <= 1 ? 1 : v9 >> 5;
            uint64_t v14 = (char *)v10;
            do
            {
              objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v11++), "getValue:", v14);
              v14 += 32;
            }
            while (v13 != v11);
            double v15 = (double)v4;
            double v16 = (double)v5;
            uint64_t v17 = (double *)v10;
            do
            {
              double v18 = v17[3];
              double v19 = v17[2] * v15;
              double v20 = v17[1] * v16;
              *uint64_t v17 = *v17 * v15;
              v17[1] = v20;
              v17[2] = v19;
              v17[3] = v18 * v16;
              v17 += 4;
            }
            while (v17 != f64);
            if (v10 != (float64x2_t *)f64)
            {
              uint64_t v21 = *(void **)(v1 + 8);
              v21[8] = v21[6];
              v21[10] = 0x3C003C0000003C00;
              uint64_t v22 = v10;
              do
              {
                uint64_t v23 = *(void *)(v1 + 8);
                float64x2_t v24 = *v22;
                float64x2_t v25 = v22[1];
                v22 += 2;
                *(float32x2_t *)&v24.f64[0] = vcvt_f32_f64(v24);
                *(float32x2_t *)&v37[0].f64[0] = vadd_f32(vcvt_f32_f64(v25), *(float32x2_t *)&v24.f64[0]);
                *(float64_t *)(v23 + 16) = v24.f64[0];
                CA::OGL::DebugRenderer::draw_rectangle_with_fill(v23, (float *)v37, v24.f64[0]);
              }
              while (v22 != (float64x2_t *)f64);
              uint64_t v27 = (CA::OGL::Context **)*((void *)this + 39);
              int v28 = *((_DWORD *)this + 52);
              LODWORD(v26.f64[0]) = *((_DWORD *)this + 53);
              int v30 = *((_DWORD *)this + 40);
              int v29 = *((_DWORD *)this + 41);
              uint64_t v38 = 0;
              float v31 = (float)SLODWORD(v26.f64[0]) / (float)v29;
              *(float *)v26.f64 = (float)v28 / (float)v30;
              v37[0] = (float64x2_t)xmmword_184997D50;
              v37[1] = 0u;
              void v37[2] = (float64x2_t)xmmword_184997D60;
              memset(&v37[3], 0, 32);
              v37[5] = (float64x2_t)xmmword_184997D50;
              v37[6] = 0u;
              v37[7] = (float64x2_t)xmmword_184997D60;
              __asm { FMOV            V1.2D, #1.0 }
              v37[8] = _Q1;
              v26.f64[0] = *(float *)v26.f64;
              CA::Transform::scale(v37, v26, v31, 1.0);
              CA::OGL::DebugRenderer::render(*(void *)(v1 + 8), *v27, (const CA::Transform *)v37, 1);
            }
          }
          operator delete(v10);
        }
      }
    }
  }
}

void sub_184960234(_Unwind_Exception *exception_object)
{
}

void CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(CA::WindowServer::IOMFBDisplay *this)
{
  int v2 = (os_unfair_lock_s *)((char *)this + 27680);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6920);
  uint64_t v3 = (int *)((char *)this + 27760);
  if (*((_DWORD *)this + 6940))
  {
    int v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    int v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unint64_t v7 = CFDictionaryCreateMutable(0, 0, v4, v5);
    CA_CFDictionarySetLongLong(Mutable, @"indicator_start_time", *((void *)this + 3469));
    uint64_t v8 = mach_absolute_time();
    CA_CFDictionarySetLongLong(Mutable, @"indicator_end_time", v8);
    CA_CFDictionarySetInt(Mutable, @"indicator_frame_count", *v3);
    int64_t v9 = (unsigned int *)*((void *)this + 3461);
    unsigned __int8 v10 = (unsigned int *)*((void *)this + 3462);
    if (v9 != v10)
    {
      uint64_t v11 = MEMORY[0x1E4F97AE8];
      do
      {
        uint64_t v12 = *v9;
        int v13 = v9[1];
        if (v11)
        {
          uint64_t v14 = (const char *)SILManagerIndicatorNameFromType();
        }
        else
        {
          uint64_t v14 = "Unknown Indicator";
          if (v12 <= 3) {
            uint64_t v14 = off_1E5273D18[v12];
          }
        }
        CFStringRef v15 = CFStringCreateWithCString(0, v14, 0x8000100u);
        if (v15)
        {
          CFStringRef v16 = v15;
          CA_CFDictionarySetInt(v7, v15, v13);
          CFRelease(v16);
        }
        v9 += 2;
      }
      while (v9 != v10);
      int64_t v9 = (unsigned int *)*((void *)this + 3461);
    }
    *((void *)this + 3462) = v9;
    int *v3 = 0;
    os_unfair_lock_unlock(v2);
    if (CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::once != -1) {
      dispatch_once(&CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::once, &__block_literal_global_478);
    }
    if (CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_interval_telemetry_id) {
      pps_send_telemetry();
    }
    if (CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_types_telemetry_id) {
      pps_send_telemetry();
    }
    if (v7) {
      CFRelease(v7);
    }
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay42post_secure_indicator_statistics_power_logEv_block_invoke()
{
  CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_interval_telemetry_id = pps_create_telemetry_identifier();
  uint64_t result = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_secure_indicator_statistics_power_log(void)::secure_indicator_types_telemetry_id = result;
  return result;
}

void CA::WindowServer::IOMFBDisplay::print_secure_indicator_state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void **)(a1 + 25632);
  if (v8)
  {
    if (*v8 || (sil_mgr_instance(0, 0xFFFFFFFFLL), (void *v8 = v11) != 0))
    {
      x_stream_printf(a2, "Secure Indicator State for Display %d\n", a3, a4, a5, a6, a7, a8, *(unsigned int *)(a1 + 24));
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a1 + 25632);
      do
      {
        if (*(float *)(v20 + v18 + 36) >= 0.0)
        {
          if (*(_DWORD *)(v20 + v18 + 24) > 2u)
          {
            if (MEMORY[0x1E4F97AE8]) {
              SILManagerIndicatorNameFromType();
            }
          }
          x_stream_printf(a2, "  Region[%u] : %s %s ([%f %f] opacity %f frame: %u rot %f)\n", v12, v13, v14, v15, v16, v17, v19);
        }
        else
        {
          x_stream_printf(a2, "  Region[%u] : inactive\n", v12, v13, v14, v15, v16, v17, v19);
        }
        uint64_t v19 = (v19 + 1);
        v18 += 24;
      }
      while (v18 != 96);
    }
  }
}

void CA::WindowServer::IOMFBDisplay::reset_secure_indicator_animating_deadline(CA::WindowServer::IOMFBDisplay *this)
{
  if (*((double *)this + 3317) != 0.0)
  {
    *((void *)this + 3317) = 0;
    IOMobileFramebufferSwapSetSecureAnimation();
    if ((*((_DWORD *)this + 156) & 0x100) != 0)
    {
      int v2 = *((unsigned __int8 *)this + 28214);
      CA::WindowServer::IOMFBDisplay::update_server_source_frame_interval_range((os_unfair_lock_s *)this, (const CAFrameIntervalRange *)((char *)this + 27424), v2, 0);
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v20 = *(void *)(a2 + 16);
        __n128 v21 = *(__n128 *)a2;
        uint64_t v22 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(void *)(a3 + 16) = v20;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          unint64_t v23 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v24 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        long long *v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      __n128 v12 = (long long *)(a1 + 48);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(CAFrameIntervalRequest const&,CAFrameIntervalRequest const&),CAFrameIntervalRequest*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    __n128 v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

void CA::WindowServer::IOMFBDisplay::update_secure_indicator_animating_deadline(CA::WindowServer::IOMFBDisplay *this, char a2, __n128 a3)
{
  double v4 = *((double *)this + 3317);
  if (a2)
  {
    *((double *)this + 3317) = a3.n128_f64[0] + 0.05;
    if (v4 == 0.0)
    {
      IOMobileFramebufferSwapSetSecureAnimation();
      if ((*((_DWORD *)this + 156) & 0x100) != 0)
      {
        int v5 = *((unsigned __int8 *)this + 28214);
        CA::WindowServer::IOMFBDisplay::update_server_source_frame_interval_range((os_unfair_lock_s *)this, (const CAFrameIntervalRange *)((char *)this + 27424), v5, 1);
      }
    }
  }
  else if (v4 != 0.0 && v4 < a3.n128_f64[0])
  {
    unint64_t v7 = *(void (**)(__n128))(*(void *)this + 2096);
    v7(a3);
  }
}

void CA::WindowServer::IOMFBDisplay::set_secure_indicator_callback(uint64_t a1, const void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 25632);
  if (v2)
  {
    double v4 = *(const void **)(v2 + 16);
    if (v4 != a2)
    {
      _Block_release(v4);
      *(void *)(v2 + 16) = _Block_copy(a2);
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_ERROR, "Failed to set indicator callback! SILMgr was not created", v6, 2u);
    }
  }
}

void CA::WindowServer::IOMFBDisplay::secure_indicator_swap_end(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1 = *((void *)this + 3204);
  if (v1)
  {
    if (!*(void *)v1)
    {
      sil_mgr_instance(0, 0xFFFFFFFFLL);
      *(void *)uint64_t v1 = v3;
      if (!v3) {
        return;
      }
      uint64_t v1 = *((void *)this + 3204);
    }
    if (*(unsigned char *)(v1 + 131))
    {
      *(unsigned char *)(v1 + 131) = 0;
      if (MEMORY[0x1E4F97B18]) {
        SILManagerSwapEnd();
      }
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::hide_secure_indicators(CA::WindowServer::IOMFBDisplay *this, char a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 3204);
  if (!v2)
  {
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  if (!*(void *)v2)
  {
    sil_mgr_instance(0, 0xFFFFFFFFLL);
    *(void *)uint64_t v2 = v5;
    if (!v5) {
      return v5 & 1;
    }
    uint64_t v2 = *((void *)this + 3204);
  }
  unsigned int v6 = a2 & 0xF;
  if ((a2 & 0xF) != 0)
  {
    LOBYTE(v5) = 1;
    do
    {
      unsigned int v7 = __clz(__rbit32(v6));
      uint64_t v8 = v2 + 24 + 24 * v7;
      if (*(float *)(v8 + 12) > 0.0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v9 = x_log_category_secure_indicators;
          if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 67109120;
            unsigned int v19 = v7;
            _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_INFO, "Hiding region %u", buf, 8u);
          }
        }
        uint64_t v10 = *(void *)(v8 + 16);
        unsigned int v13 = *(_DWORD *)v8;
        float v14 = (float)(int)(50 * v7) + 200.0;
        float v15 = v14;
        int v16 = 0;
        uint64_t v17 = v10;
        int v11 = CA::WindowServer::SILMgr::swap_region_private((uint64_t *)v2, v7, &v13, 0, 0);
        LOBYTE(v5) = 0;
        if (v11) {
          LOBYTE(v5) = *(void *)(v2 + 16) && !*(unsigned char *)(v2 + 128)
        }
                    || CA::WindowServer::SILMgr::turn_off_region((CA::WindowServer::SILMgr *)v2, v7);
      }
      v6 &= ~(1 << v7);
    }
    while (v6);
  }
  else
  {
    LOBYTE(v5) = 1;
  }
  return v5 & 1;
}

void CA::WindowServer::IOMFBDisplay::swap_secure_indicator(uint64_t a1, unsigned int a2, int a3, int a4, unsigned char *a5, BOOL *a6, float32x2_t a7, float32_t a8, float32x2_t a9, float32_t a10, float a11, float a12)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 25632);
  if (v12)
  {
    if (!*(void *)v12)
    {
      float v24 = a8;
      __int32 v27 = a7.i32[0];
      float v30 = a10;
      __int32 v33 = a9.i32[0];
      sil_mgr_instance(0, 0xFFFFFFFFLL);
      *(void *)uint64_t v12 = v21;
      if (!v21) {
        return;
      }
      uint64_t v12 = *(void *)(a1 + 25632);
      a10 = v30;
      a9.i32[0] = v33;
      a8 = v24;
      a7.i32[0] = v27;
    }
    if (initialized != -1)
    {
      float v32 = a10;
      __int32 v35 = a9.i32[0];
      float v26 = a8;
      __int32 v29 = a7.i32[0];
      dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
      a8 = v26;
      a7.i32[0] = v29;
      a10 = v32;
      a9.i32[0] = v35;
    }
    if (*(unsigned __int8 *)(v12 + 130) != *(float *)&dword_1EB2ACB94)
    {
      float v31 = a10;
      __int32 v34 = a9.i32[0];
      float v25 = a8;
      __int32 v28 = a7.i32[0];
      SILManagerSetLogLevel();
      a8 = v25;
      a7.i32[0] = v28;
      a10 = v31;
      a9.i32[0] = v34;
    }
    float32x2_t v22 = vdiv_f32(vcvt_f32_s32(*(int32x2_t *)(a1 + 160)), vcvt_f32_s32(*(int32x2_t *)(a1 + 208)));
    LODWORD(v36) = a3;
    a7.f32[1] = a8;
    *(float32x2_t *)((char *)&v36 + 4) = vmul_f32(v22, a7);
    *((float *)&v36 + 3) = a12;
    float v37 = a11;
    int v38 = (unsigned __int16)a4;
    if (a4 == 0xFFFF)
    {
      a9.f32[1] = a10;
      float32x2_t v39 = vmul_f32(v22, a9);
      if (MEMORY[0x1E4F97AD0]) {
        __int16 v23 = SILManagerFrameNumberFromBounds();
      }
      else {
        __int16 v23 = -1;
      }
      LOWORD(v38) = v23;
    }
    CA::WindowServer::SILMgr::swap_region(*(void *)(a1 + 25632), a2, &v36, a5, a6);
  }
}

void CA::WindowServer::IOMFBDisplay::set_secure_indicator_state(CA::WindowServer::IOMFBDisplay *this, int a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 3204);
  if (v3)
  {
    if (*v3 || (sil_mgr_instance(0, 0xFFFFFFFFLL), (void *v3 = v7) != 0))
    {
      int v8 = a2 ? 3 : 2;
      int v9 = a3 ? 4 : v8;
      uint64_t v10 = (char *)this + 25640;
      if (v9 != *((unsigned __int8 *)this + 25640))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int v11 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
          {
            int v12 = *v10;
            *(_DWORD *)long long buf = 67109376;
            int v14 = v12;
            __int16 v15 = 1024;
            int v16 = v9;
            _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_INFO, "Secure indicator state going from %u to %u", buf, 0xEu);
          }
        }
        if (*v10 > 1u
          || CA::WindowServer::SILMgr::set_power(*((CA::WindowServer::SILMgr **)this + 3204), 1, 0))
        {
          unsigned char *v10 = v9;
        }
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::emit_mode_set_signpost(CA::WindowServer::IOMFBDisplay *this, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((void *)this + 3388);
  if (v2 + 1 >= 2)
  {
    if (CA::WindowServer::Display::get_display_perf_log(void)::once_token[0] != -1) {
      dispatch_once(CA::WindowServer::Display::get_display_perf_log(void)::once_token, &__block_literal_global_71);
    }
    os_signpost_id_t v5 = *((unsigned int *)this + 6);
    if (v5)
    {
      unsigned int v6 = CA::WindowServer::Display::get_display_perf_log(void)::log;
      if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_perf_log(void)::log))
      {
        int v7 = *((unsigned __int8 *)this + 28168);
        unsigned int v8 = ((v2 >> 55) & 0x1F) - 1;
        if (v8 > 0x1B) {
          int v9 = "";
        }
        else {
          int v9 = off_1E52739E0[v8];
        }
        v10[0] = 67241986;
        v10[1] = v5;
        __int16 v11 = 1026;
        int v12 = v7;
        __int16 v13 = 1026;
        int v14 = v2 & 0x3FFF;
        __int16 v15 = 1026;
        unsigned int v16 = (v2 >> 14) & 0x3FFF;
        __int16 v17 = 2050;
        double v18 = (double)((v2 >> 29) & 0x1FFFFFF) * 0.0000152587891;
        __int16 v19 = 2082;
        uint64_t v20 = v9;
        __int16 v21 = 1026;
        BOOL v22 = (v2 & 0x4000000000000000) != 0;
        __int16 v23 = 2050;
        uint64_t v24 = a2;
        _os_signpost_emit_with_name_impl(&dword_184668000, v6, OS_SIGNPOST_EVENT, v5, "ModeSet", "displayId=%{public, name=displayId}u state=%{public, name=state}u width=%{public, name=width}d height=%{public, name=height}d refreshRate=%{public, name=refreshRate}.3f format=%{public, name=format}s highBandwidth=%{public, BOOL, name=highBandwidth}d begin=%{public,signpost.description:begin_time}llu", (uint8_t *)v10, 0x3Eu);
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::update_secure_indicators_statistics(os_unfair_lock_s *this, const CA::Render::Update *a2, char a3)
{
  if (*((void *)a2 + 128) == *((void *)a2 + 129)) {
    __assert_rtn("update_secure_indicators_statistics", "windowserver-iomfb-display.cpp", 16176, "!indicators.empty ()");
  }
  unsigned int v6 = this + 6920;
  os_unfair_lock_lock(this + 6920);
  if ((a3 & 1) == 0) {
    *(void *)&this[6938]._uint64_t os_unfair_lock_opaque = mach_absolute_time();
  }
  unsigned int v7 = -1431655765 * ((*((void *)a2 + 129) - *((void *)a2 + 128)) >> 4);
  if (v7 >= 4) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = this + 6922;
    __int16 v11 = *(void **)&this[6924]._os_unfair_lock_opaque;
    do
    {
      uint64_t v12 = *(unsigned int *)(*((void *)a2 + 128) + 48 * v9 + 36);
      if (*(void **)&v10->_os_unfair_lock_opaque == v11)
      {
LABEL_13:
        unint64_t v14 = (((uint64_t)v11 - *(void *)&v10->_os_unfair_lock_opaque) >> 3) + 1;
        if (*(void *)&this[6928]._os_unfair_lock_opaque < v14)
        {
          X::small_vector_base<CA::WindowServer::IOMFBDisplay::IndicatorStats>::grow((uint64_t)&this[6922], v14);
          __int16 v11 = *(void **)&this[6924]._os_unfair_lock_opaque;
        }
        void *v11 = v12;
        __int16 v13 = *(_DWORD **)&this[6924]._os_unfair_lock_opaque;
        __int16 v11 = v13 + 2;
        *(void *)&this[6924]._uint64_t os_unfair_lock_opaque = v13 + 2;
      }
      else
      {
        __int16 v13 = *(_DWORD **)&v10->_os_unfair_lock_opaque;
        while (v12 != *v13)
        {
          v13 += 2;
          if (v13 == (_DWORD *)v11) {
            goto LABEL_13;
          }
        }
      }
      ++v13[1];
      ++v9;
    }
    while (v9 != v8);
  }
  ++this[6940]._os_unfair_lock_opaque;

  os_unfair_lock_unlock(v6);
}

void X::small_vector_base<CA::WindowServer::IOMFBDisplay::IndicatorStats>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(uint64_t **)(a1 + 16);
  unint64_t v6 = (*(void *)(a1 + 24) + 1) | ((unint64_t)(*(void *)(a1 + 24) + 1) >> 1);
  unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  unint64_t v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = a2;
  }
  __int16 v11 = malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
  uint64_t v12 = v11;
  __int16 v13 = *(uint64_t **)a1;
  unint64_t v14 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v14)
  {
    __int16 v15 = v11;
    do
    {
      uint64_t v16 = *v13++;
      *v15++ = v16;
    }
    while (v13 != v14);
  }
  if (v3 != v5) {
    free(*(void **)a1);
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = (char *)v12 + v4 - (void)v3;
  *(void *)(a1 + 24) = v10;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_gamma_adjustment_curves(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s2)
{
  uint64_t v4 = (CGColorTRC *)*((void *)this + 3422);
  if (!v4) {
    operator new[]();
  }
  if (CA::WindowServer::IOMFBDisplay::set_cg_curve(this, v4, __s2)) {
    *((unsigned char *)this + 28206) = 1;
  }
  if (CA::WindowServer::IOMFBDisplay::set_cg_curve(this, (CGColorTRC *)(*((void *)this + 3422) + 36), (CGColorTRC *)&__s2->var1.var1.var3.var1))*((unsigned char *)this + 28206) = 1; {
  uint64_t result = CA::WindowServer::IOMFBDisplay::set_cg_curve(this, (CGColorTRC *)(*((void *)this + 3422) + 72), (CGColorTRC *)((char *)__s2 + 72));
  }
  if (result) {
    *((unsigned char *)this + 28206) = 1;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_cg_curve(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s1, CGColorTRC *__s2)
{
  uint64_t result = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (__s1 && __s2)
  {
    if (*((unsigned char *)this + 28207))
    {
      uint64_t result = memcmp(__s1, __s2, 0x24uLL);
      if (result)
      {
        if (__s2->var0 == 5 && *(void *)(&__s2->var0 + 1)) {
          operator new[]();
        }
        if (__s1->var0 == 5)
        {
          uint64_t v7 = *(unint64_t *)((char *)&__s1->var1.var1.var0 + 4);
          if (v7) {
            MEMORY[0x185323DC0](v7, 0x1000C4052888210);
          }
        }
        long long v8 = *(_OWORD *)&__s2->var0;
        long long v9 = *(_OWORD *)&__s2->var1.var1.var1;
        __s1->var1.var0.var6 = __s2->var1.var0.var6;
        *(_OWORD *)&__s1->var0 = v8;
        *(_OWORD *)&__s1->var1.var1.var1 = v9;
        return 1;
      }
    }
    else
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v10 = x_log_category_windowserver;
        BOOL v11 = os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v11) {
          return result;
        }
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "Setting system gamma failed, display does not support ICC", v12, 2u);
      }
      return 0;
    }
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_blackpoint_curve(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s2)
{
  uint64_t v4 = (CGColorTRC *)*((void *)this + 3421);
  if (!v4) {
    operator new();
  }
  uint64_t result = CA::WindowServer::IOMFBDisplay::set_cg_curve(this, v4, __s2);
  if (result) {
    *((unsigned char *)this + 28205) = 1;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_system_gamma_curve(CA::WindowServer::IOMFBDisplay *this, CGColorTRC *__s2)
{
  uint64_t v4 = (CGColorTRC *)*((void *)this + 3420);
  if (!v4) {
    operator new();
  }
  uint64_t result = CA::WindowServer::IOMFBDisplay::set_cg_curve(this, v4, __s2);
  if (result) {
    *((unsigned char *)this + 28204) = 1;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::set_display_color_space(const void **this, CGColorSpace *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (char *)this + 28203;
  if (*((unsigned char *)this + 28207))
  {
    if (!CFEqual(this[3410], a2))
    {
      X::CFRef<__CFDictionary const*>::operator=(this + 3410, a2);
      *unint64_t v2 = 1;
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    os_signpost_id_t v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "Setting display space failed, display does not support ICC", v6, 2u);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::display_color_space(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3410);
}

void CA::WindowServer::IOMFBDisplay::set_blend_color_space(const void **this, CGColorSpace *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (char *)this + 28202;
  if (*((unsigned char *)this + 28207))
  {
    if (!CFEqual(this[3409], a2))
    {
      X::CFRef<__CFDictionary const*>::operator=(this + 3409, a2);
      *unint64_t v2 = 1;
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    os_signpost_id_t v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "Setting blend space failed, display does not support ICC", v6, 2u);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::blend_color_space(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3409);
}

uint64_t CA::WindowServer::IOMFBDisplay::compositing_color_space(CA::WindowServer::IOMFBDisplay *this)
{
  return CAGetColorSpace(0x1Du);
}

void CA::WindowServer::IOMFBDisplay::set_update_request_callback(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 26544);
  if (v4)
  {
    _Block_release(v4);
    *(void *)(a1 + 26544) = 0;
  }
  if (aBlock) {
    *(void *)(a1 + 26544) = _Block_copy(aBlock);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::acquire_frozen_surface(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1 = *((void *)this + 3403);
  *((void *)this + 3403) = 0;
  return v1;
}

void CA::WindowServer::IOMFBDisplay::post_notification_of_disallowed_cloning_layers(CA::WindowServer::IOMFBDisplay *this, mach_port_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1568))(this))
  {
    if ((*((unsigned char *)this + 28142) != 0) != a2)
    {
      out_token.msgh_bits = 0;
      if (!notify_register_check("com.apple.CoreAnimation.CADisplay.DisallowedLayersChanged", (int *)&out_token))
      {
        notify_set_state(out_token.msgh_bits, a2);
        notify_post("com.apple.CoreAnimation.CADisplay.DisallowedLayersChanged");
        *((unsigned char *)this + 28142) = a2;
      }
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 6994);
  uint64_t v4 = (uint64_t *)*((void *)this + 3500);
  if (v4)
  {
    os_signpost_id_t v5 = (uint64_t *)MEMORY[0x1E4F14068];
    uint64_t v6 = MEMORY[0x1E4F14B18];
    do
    {
      mach_port_t v7 = *((_DWORD *)v4 + 4);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v8 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          mach_msg_size_t v9 = *((_DWORD *)this + 6);
          out_token.msgh_bits = 67109376;
          out_token.msgh_std::string::size_type size = v9;
          LOWORD(out_token.msgh_remote_port) = 1024;
          *(mach_port_t *)((char *)&out_token.msgh_remote_port + 2) = a2;
          _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "signal clients display %u disallowed layers state changed to %d", (uint8_t *)&out_token, 0xEu);
        }
      }
      int v10 = *((_DWORD *)this + 6);
      uint64_t v12 = *v5;
      int v13 = v10;
      char v14 = a2;
      __int16 v15 = 0;
      char v16 = 0;
      *(void *)&out_token.msgh_bits = 19;
      out_token.msgh_voucher_port = 0;
      out_token.msgh_id = 40413;
      out_token.msgh_remote_port = v7;
      out_token.msgh_local_port = 0;
      if (v6) {
        voucher_mach_msg_set(&out_token);
      }
      if ((mach_msg(&out_token, 17, 0x28u, 0, 0, 0, 0) - 268435459) <= 1)
      {
        if ((out_token.msgh_bits & 0x1F00) == 0x1100) {
          mach_port_deallocate(*MEMORY[0x1E4F14960], out_token.msgh_local_port);
        }
        mach_msg_destroy(&out_token);
      }
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6994);
}

uint64_t CA::WindowServer::IOMFBDisplay::ax_ns_color_matrix(CA::WindowServer::IOMFBDisplay *this, float *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 26652;
  if (*((unsigned char *)this + 26716))
  {
    long long v4 = *(_OWORD *)((char *)this + 26920);
    long long v5 = *(_OWORD *)((char *)this + 26936);
    long long v6 = *(_OWORD *)((char *)this + 26952);
    long long v11 = *(_OWORD *)((char *)this + 26904);
    long long v12 = v4;
    long long v13 = v5;
    long long v14 = v6;
    CA::Mat4Impl::mat4_scale((CA::Mat4Impl *)&v11, a2, *((float *)this + 6742), *((float *)this + 6742), *((float *)this + 6742));
    v3[64] = 0;
    long long v7 = v12;
    long long v8 = v13;
    long long v9 = v14;
    *(_OWORD *)uint64_t v3 = v11;
    *((_OWORD *)v3 + 1) = v7;
    *((_OWORD *)v3 + 2) = v8;
    *((_OWORD *)v3 + 3) = v9;
  }
  return (uint64_t)this + 26652;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_accessibility_color_matrix(uint64_t this, float *a2, float a3)
{
  *(_OWORD *)(this + 26904) = xmmword_184997DC0;
  *(_OWORD *)(this + 2692CASetDebugMessage("", 0) = xmmword_184997DD0;
  *(_OWORD *)(this + 26936) = xmmword_184997DE0;
  *(_OWORD *)(this + 26952) = xmmword_184997DF0;
  if (a2)
  {
    *(float *)(this + 26904) = *a2;
    *(float *)(this + 26908) = a2[1];
    *(float *)(this + 26912) = a2[2];
    *(float *)(this + 2692CASetDebugMessage("", 0) = a2[3];
    *(float *)(this + 26924) = a2[4];
    *(float *)(this + 26928) = a2[5];
    *(float *)(this + 26936) = a2[6];
    *(float *)(this + 2694CASetDebugMessage("", 0) = a2[7];
    *(float *)(this + 26944) = a2[8];
  }
  *(float *)(this + 26968) = a3;
  *(unsigned char *)(this + 26972) = 0;
  *(unsigned char *)(this + 26716) = 1;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_user_adjustment(uint64_t this, float *a2, float a3)
{
  uint64_t v3 = (_OWORD *)(this + 26860);
  if (a2)
  {
    long long v4 = *(_OWORD *)a2;
    long long v5 = *((_OWORD *)a2 + 1);
    *(float *)(this + 26892) = a2[8];
    _OWORD *v3 = v4;
    *(_OWORD *)(this + 26876) = v5;
  }
  else
  {
    _OWORD *v3 = xmmword_184997DC0;
    *(_OWORD *)(this + 26876) = xmmword_184997DC0;
    *(_DWORD *)(this + 26892) = 1065353216;
    a3 = 1.0;
  }
  *(float *)(this + 26896) = a3;
  *(unsigned char *)(this + 2690CASetDebugMessage("", 0) = 0;
  return this;
}

float CA::WindowServer::IOMFBDisplay::abort_color_matrix_ramp(CA::WindowServer::IOMFBDisplay *this, float *a2, float *a3)
{
  if (a2)
  {
    long long v3 = *(_OWORD *)((char *)this + 26808);
    long long v4 = *(_OWORD *)((char *)this + 26824);
    a2[8] = *((float *)this + 6710);
    *(_OWORD *)a2 = v3;
    *((_OWORD *)a2 + 1) = v4;
  }
  if (a3) {
    *a3 = *((float *)this + 6713);
  }
  *((unsigned char *)this + 26856) = 1;
  long long v5 = *(_OWORD *)((char *)this + 26808);
  long long v6 = *(_OWORD *)((char *)this + 26824);
  *((_OWORD *)this + 1671) = v5;
  *((_OWORD *)this + 1672) = v6;
  int v7 = *((_DWORD *)this + 6710);
  *((_DWORD *)this + 6692) = v7;
  *(_OWORD *)((char *)this + 26772) = v5;
  *(_OWORD *)((char *)this + 26788) = v6;
  *((_DWORD *)this + 6701) = v7;
  float result = *((float *)this + 6713);
  *((float *)this + 6712) = result;
  *((void *)this + 3341) = 0;
  return result;
}

#error "184962580: call analysis failed (funcsize=873)"

_OWORD *RGBXYZConversionMatrices<double>::RGBXYZConversionMatrices(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, double a4, float64x2_t a5, double a6, double a7, double a8, float64x2_t a9, double a10, float64x2_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,float64x2_t a33,float64x2_t a34,float64x2_t a35,float64x2_t a36,float64x2_t a37,float64x2_t a38)
{
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a5.f64[0] = a2[1].f64[0];
  double v39 = a2->f64[1];
  v40.f64[0] = a5.f64[0] * a2->f64[0] / v39;
  a9.f64[0] = (1.0 - vaddvq_f64(*a2)) * a5.f64[0] / v39;
  v40.f64[1] = a5.f64[0];
  float64x2_t v53 = v40;
  float64x2_t v41 = a2[2];
  a5.f64[0] = a2[3].f64[0];
  v40.f64[0] = a2[2].f64[1];
  v42.f64[0] = a5.f64[0] * v41.f64[0] / v40.f64[0];
  a11.f64[0] = (1.0 - vaddvq_f64(v41)) * a5.f64[0] / v40.f64[0];
  float64x2_t v55 = a11;
  float64x2_t v56 = a9;
  v42.f64[1] = a5.f64[0];
  float64x2_t v52 = v42;
  float64x2_t v43 = a2[4];
  a5.f64[0] = a2[5].f64[0];
  v40.f64[0] = a2[4].f64[1];
  v42.f64[0] = a5.f64[0] * v43.f64[0] / v40.f64[0];
  v40.f64[0] = (1.0 - vaddvq_f64(v43)) * a5.f64[0] / v40.f64[0];
  float64x2_t v57 = v40;
  v42.f64[1] = a5.f64[0];
  float64x2_t v54 = v42;
  float64x2_t v44 = *a3;
  float64x2_t v45 = a3[1];
  v42.f64[0] = a3->f64[1];
  a5.f64[0] = vmuld_n_f64(a3->f64[0], v45.f64[0]) / v42.f64[0];
  float64x2_t v50 = v45;
  float64x2_t v51 = a5;
  v44.f64[0] = (1.0 - vaddvq_f64(*a3)) * v45.f64[0] / v42.f64[0];
  float64x2_t vars0 = v44;
  __invert_d3();
  float64x2_t v46 = vmlaq_f64(vmlaq_f64(vmulq_f64(a34, v51), v50, a36), vars0, a38);
  float64x2_t v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a33, v51.f64[0]), a35, v50.f64[0]), a37, vars0.f64[0]);
  *a1 = vmulq_n_f64(v53, v47.f64[0]);
  a1[1] = vmulq_f64(v47, v56);
  a1[2] = vmulq_laneq_f64(v52, v47, 1);
  a1[3] = vmulq_laneq_f64(v55, v47, 1);
  a1[4] = vmulq_n_f64(v54, v46.f64[0]);
  a1[5] = vmulq_f64(v46, v57);
  __invert_d3();
  a1[8] = a35;
  a1[9] = a36;
  a1[10] = a37;
  a1[11] = a38;
  a1[6] = a33;
  a1[7] = a34;
  return a1;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay21set_preset_propertiesENS0_7Display16PresetPropertiesE_block_invoke()
{
  if (MGIsDeviceOneOfType()) {
    CA::WindowServer::IOMFBDisplay::set_preset_properties(CA::WindowServer::Display::PresetProperties)::is_d65a_ipad = 1;
  }
  uint64_t result = MGIsDeviceOneOfType();
  if (result)
  {
    CA::WindowServer::IOMFBDisplay::set_preset_properties(CA::WindowServer::Display::PresetProperties)::adaptatiouint64_t n = 1;
    CA::WindowServer::IOMFBDisplay::set_preset_properties(CA::WindowServer::Display::PresetProperties)::cone_response = 1;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::flush_irdc(uint64_t this)
{
  *(unsigned char *)(this + 25393) = 1;
  return this;
}

BOOL CA::WindowServer::IOMFBDisplay::set_preset(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (char *)this + 25640;
  memset(v15, 0, sizeof(v15));
  for (uint64_t i = 12; i != 108; i += 24)
    *(_DWORD *)((char *)v15 + i) = -1082130432;
  long long v4 = (void *)*((void *)this + 3204);
  if (v4)
  {
    if (*v4)
    {
LABEL_7:
      CA::WindowServer::SILMgr::turn_off_all_regions((CA::WindowServer::SILMgr *)v15, (uint64_t)v4, 1);
      *unint64_t v2 = 2;
      goto LABEL_8;
    }
    sil_mgr_instance(0, 0xFFFFFFFFLL);
    *long long v4 = v5;
    if (v5)
    {
      long long v4 = (void *)*((void *)this + 3204);
      goto LABEL_7;
    }
  }
LABEL_8:
  int v6 = IOMobileFramebufferSetPreset();
  int v7 = (void *)*((void *)this + 3204);
  if (v7)
  {
    if (*v7 || (sil_mgr_instance(0, 0xFFFFFFFFLL), (void *v7 = v8) != 0))
    {
      CA::IOMobileFramebuffer::swap_wait((CA::WindowServer::IOMFBDisplay *)((char *)this + 25568));
      CA::WindowServer::SILMgr::set_power(*((CA::WindowServer::SILMgr **)this + 3204), 1, 1);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = *((void *)this + 3204);
      do
      {
        long long v12 = (char *)v15 + v9;
        if (*(float *)((char *)v15 + v9 + 12) > 0.0
          && CA::WindowServer::SILMgr::swap_region(v11, v10, (_OWORD *)((char *)v15 + v9), 0, 0))
        {
          uint64_t v13 = v11 + v9;
          *(_OWORD *)(v13 + 24) = *(_OWORD *)v12;
          *(void *)(v13 + 38) = *(void *)(v12 + 14);
        }
        ++v10;
        v9 += 24;
      }
      while (v10 != 4);
      if (*(unsigned char *)(v11 + 131))
      {
        *(unsigned char *)(v11 + 131) = 0;
        if (MEMORY[0x1E4F97B18]) {
          SILManagerSwapEnd();
        }
      }
      *unint64_t v2 = 3;
    }
  }
  return v6 == 0;
}

float CA::WindowServer::IOMFBDisplay::auto_luminance_boost(CA::WindowServer::IOMFBDisplay *this)
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  float result = *(float *)&dword_1EB2ACB40;
  if (*(float *)&dword_1EB2ACB40 == 0.0) {
    return 1.0;
  }
  return result;
}

unsigned char *CA::WindowServer::IOMFBDisplay::set_force_brightness_control(unsigned char *this)
{
  if (!this[28212])
  {
    this[28212] = 1;
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)this + 968))(this, 1);
  }
  return this;
}

unsigned char *CA::WindowServer::IOMFBDisplay::set_brightness_control_disabled(unsigned char *this, int a2)
{
  if (this[28211] != a2)
  {
    this[28211] = a2;
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)this + 968))(this, 1);
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_maximum_brightness(uint64_t this, float a2)
{
  if (*(float *)(this + 26248) != a2)
  {
    *(float *)(this + 26248) = a2;
    if (!*(unsigned char *)(this + 28135))
    {
      unint64_t v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(float *)(this + 26252) = a2;
      long long v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 256);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

float CA::WindowServer::IOMFBDisplay::default_ui_nits(CA::WindowServer::IOMFBDisplay *this)
{
  float result = *((float *)this + 6568);
  if (result <= 0.0) {
    return 200.0;
  }
  float v2 = 5.0;
  BOOL v3 = result > 200.0 || result < 5.0;
  if (result >= 5.0 || result > 200.0) {
    float v2 = 200.0;
  }
  if (v3) {
    return v2;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::save_brightness_preferences(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v12, 0, sizeof(v12));
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, _OWORD *, uint64_t, void))(*(void *)this + 800))(this, 1, v12, 64, 0))
  {
    CFStringRef v3 = CFStringCreateWithCString(0, (const char *)v12, 0x8000100u);
    if (v3)
    {
      CFStringRef v4 = v3;
      CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
      CFDictionaryRef v6 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"CABrightnessPreferences", (CFStringRef)*MEMORY[0x1E4F1D3D8]);
      CFDictionaryRef v7 = v6;
      if (v6 && (CFTypeID v8 = CFGetTypeID(v6), v8 == CFDictionaryGetTypeID())) {
        MutableCopdouble y = CFDictionaryCreateMutableCopy(0, 0, v7);
      }
      else {
        MutableCopdouble y = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      uint64_t v10 = MutableCopy;
      if (MutableCopy)
      {
        uint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!a2) {
          uint64_t v11 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(MutableCopy, v4, *v11);
        CFPreferencesSetAppValue(@"CABrightnessPreferences", v10, v5);
        CFRelease(v10);
      }
      if (v7) {
        CFRelease(v7);
      }
      CFRelease(v4);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_contrast(uint64_t this, float a2)
{
  if (*(float *)(this + 26164) != a2)
  {
    *(float *)(this + 26164) = a2;
    if (!*(unsigned char *)(this + 28135))
    {
      float v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(float *)(this + 26168) = a2;
      CFStringRef v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 32);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_grayscale(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 28147) != a2)
  {
    *(unsigned char *)(this + 28147) = a2;
    if (!*(unsigned char *)(this + 28135) && !*(unsigned char *)(this + 28200))
    {
      float v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(unsigned char *)(this + 28148) = a2;
      CFStringRef v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 16);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_allows_edr(uint64_t this, char a2)
{
  *(unsigned char *)(this + 28146) = a2;
  if ((a2 & 1) == 0) {
    *(void *)(this + 696) = 0;
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_inverse_color(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 28139) != a2)
  {
    *(unsigned char *)(this + 28139) = a2;
    if (!*(unsigned char *)(this + 28135) && !*(unsigned char *)(this + 28200))
    {
      float v2 = (CA::WindowServer::IOMFBDisplay *)this;
      *(unsigned char *)(this + 28145) = a2;
      CFStringRef v3 = (pthread_mutex_t *)(this + 560);
      pthread_mutex_lock((pthread_mutex_t *)(this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 16);
      return pthread_mutex_unlock(v3);
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_display_modes(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  CFStringRef v4 = (BOOL *)this + 28151;
  if (*((unsigned char *)this + 28154))
  {
    CFStringRef v5 = (const void *)IOMobileFramebufferCopyProperty();
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      *CFStringRef v4 = CA_CFBoolValue(v5);
      CFRelease(v6);
    }
  }
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 80))(this)) {
    *CFStringRef v4 = 0;
  }
  if (a2) {
    int v7 = 70;
  }
  else {
    int v7 = 66;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, v7);

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
}

void CA::WindowServer::IOMFBDisplay::set_mode(CA::WindowServer::IOMFBDisplay *this, const CA::WindowServer::Display::Mode *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(*((void *)this + 91) + 2) | *(unsigned __int8 *)(*((void *)this + 91) + 3))
  {
    if ((CA::WindowServer::Display::Mode::operator==(*((void *)this + 80), *(void *)a2) & 1) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
      int v4 = *((unsigned __int8 *)this + 672);
      *((unsigned char *)this + 672) = v4 + 1;
      if (!v4) {
        *((void *)this + 83) = mach_continuous_time();
      }
      CA::WindowServer::Display::set_mode(this, a2);
      if (*((void *)this + 6) && (*((unsigned char *)this + 56) & 1) != 0
        || (uint64_t v5 = *(void *)a2, CA::WindowServer::Display::Mode::operator==(*((void *)this + 3388), v5))
        && !*((unsigned char *)this + 28217))
      {
        int v7 = 128;
      }
      else
      {
        *((void *)this + 3388) = v5;
        if (!*((unsigned char *)this + 28132))
        {
          *((unsigned char *)this + 28134) = 1;
          uint64_t v6 = mach_absolute_time();
          *((double *)this + 3314) = CATimeWithHostTime(v6) + 1.0;
        }
        int v7 = 132;
      }
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, v7);
      os_unfair_lock_lock((os_unfair_lock_t)this + 6512);
      double v9 = CA::WindowServer::IOMFBDisplay::initialize_timings(this);
      if (*((void *)this + 3258))
      {
        double v10 = (*(double (**)(CA::WindowServer::IOMFBDisplay *, double))(*(void *)this + 760))(this, v9);
        if (v10 != 0.0) {
          atomic_store(CAHostTimeWithTime(v10), (unsigned int *)(*((void *)this + 3258) + 4));
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)this + 6512);
      CA::WindowServer::Display::end_display_changes((uint64_t)this);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
    }
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    CFTypeID v8 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_ERROR, "Cannot switch display modes while powered off.", v11, 2u);
    }
  }
}

BOOL CA::WindowServer::IOMFBDisplay::clone_exceeds_display_bandwidth_limits_p(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display *a2, CA::WindowServer::Surface *a3, unsigned int a4, const CA::Rect *a5, const CA::Rect *a6)
{
  BOOL result = 0;
  v37[1] = *MEMORY[0x1E4F143B8];
  if (a5 && a6)
  {
    v37[0] = *((void *)this + 3388);
    int v12 = v37[0] & 0x3FFF;
    int v13 = (LODWORD(v37[0]) >> 14) & 0x3FFF;
    int v15 = *((unsigned __int8 *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v37[0], v37)+ 40);
    int v16 = *((_DWORD *)a2 + 52);
    int v17 = *((_DWORD *)a2 + 53);
    if ((double)v12 / (double)v16 >= (double)v13 / (double)v17) {
      double v18 = (double)v13 / (double)v17;
    }
    else {
      double v18 = (double)v12 / (double)v16;
    }
    if (!v15 || (*((unsigned char *)this + 56) & 8) != 0)
    {
      double v21 = v18;
    }
    else
    {
      float v19 = *(float *)&CA::WindowServer::clone_overscan_amounts_x;
      if (*(float *)&CA::WindowServer::clone_overscan_amounts_x == 0.0
        || (float v20 = *(float *)&CA::WindowServer::clone_overscan_amounts_y,
            *(float *)&CA::WindowServer::clone_overscan_amounts_y == 0.0))
      {
        float v19 = *((float *)this + 15);
        float v20 = *((float *)this + 16);
      }
      double v21 = v18 * v20;
      double v18 = v18 * v19;
    }
    if (!HIBYTE(xmmword_1EB2ACC70))
    {
      if (*((unsigned char *)this + 28153))
      {
        BOOL v22 = (CA::ScalerUtil::ScalerLimits *)(*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 80))(this);
        if ((v22 & 1) == 0)
        {
          CA::ScalerUtil::ScalerLimits::limits(v22);
          float v23 = *(float *)&xmmword_1E8F85270;
          CA::ScalerUtil::ScalerLimits::limits(v24);
          double v25 = v23;
          if (v18 >= v23) {
            double v25 = v18;
          }
          else {
            double v21 = v21 * v25 / v18;
          }
          double v26 = *((float *)&xmmword_1E8F85270 + 1);
          if (v21 < *((float *)&xmmword_1E8F85270 + 1))
          {
            double v18 = v25 * v26 / v21;
LABEL_23:
            float64x2_t v34 = *(float64x2_t *)a5;
            double v27 = *((double *)a5 + 2);
            double v28 = *((double *)a5 + 3);
            long long v31 = *(_OWORD *)a6;
            double v29 = *((double *)a6 + 2) * v18;
            double v30 = *((double *)a6 + 3) * v26;
            double v35 = (double)(((v29 * v27 / v27) + 1) & 0xFFFFFFFE);
            double v36 = (double)(((v30 * v28 / v28) + 1) & 0xFFFFFFFE);
            double v32 = (double)((vcvtmd_u64_f64(v29 + 0.5) + 1) & 0xFFFFFFFE);
            double v33 = (double)((vcvtmd_u64_f64(v30 + 0.5) + 1) & 0xFFFFFFFE);
            return CA::WindowServer::IOMFBDisplay::detach_exceeds_display_bandwidth_limits_p(this, a3, &v34, (const CA::Rect *)&v31, v14);
          }
          double v18 = v25;
        }
      }
    }
    double v26 = v21;
    goto LABEL_23;
  }
  return result;
}

BOOL CA::WindowServer::IOMFBDisplay::detach_exceeds_display_bandwidth_limits_p(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Surface *a2, float64x2_t *a3, const CA::Rect *a4, const CA::Rect *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unsigned int *)((char *)this + 25704);
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    if (a3 && a4) {
      *((void *)this + 338CASetDebugMessage("", 0) = CA::WindowServer::IOMFBDisplay::compute_layer_bw((CA::WindowServer::IOMFBDisplay *)*((unsigned int *)a2 + 16), a3, (const CA::Rect *)a3, a4, *((double *)this + 3377), *((double *)a4 + 3));
    }
  }
  else if (!*((unsigned char *)this + 27048))
  {
    return 0;
  }
  unint64_t v7 = *((void *)this + 3380);
  if (v7 > *((void *)this + 3374))
  {
    if (!byte_1EB2ACBEE) {
      return 1;
    }
    if (x_log_hook_p())
    {
LABEL_36:
      x_log_();
      return 1;
    }
    uint64_t v22 = x_log_category_CADebug;
    BOOL v8 = 1;
    if (!os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO)) {
      return v8;
    }
    int v23 = *((_DWORD *)this + 6);
    uint64_t v24 = *((void *)this + 3380);
    uint64_t v25 = *((void *)this + 3374);
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v23;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = v24;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v25;
    double v26 = "Display %d gpBandwidth Exceeded. Detach disabled. Req BW:%llu gpBW limit:%llu";
    double v27 = v22;
    uint32_t v28 = 28;
LABEL_39:
    _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_INFO, v26, buf, v28);
    return v8;
  }
  *((unsigned char *)v6 + 1344) = 0;
  if (*((unsigned char *)v6 + 2474))
  {
    uint64_t v9 = 0;
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25720));
    uint64_t v12 = *((void *)this + 6 * *v6 + 3224);
    if (v12 && (uint64_t v13 = *(void *)(v12 + 32)) != 0)
    {
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      uint64_t v14 = *(void *)(v13 + 56);
      v15.i64[0] = v14;
      v15.i64[1] = HIDWORD(v14);
      *(float64x2_t *)&buf[16] = vcvtq_f64_u64(v15);
      int v16 = *((_DWORD *)this + 40);
      int v17 = *((_DWORD *)this + 41);
      if (v16 <= v17) {
        int v16 = *((_DWORD *)this + 41);
      }
      double v18 = 1.79769313e308;
      if (v16 <= 1073741822) {
        double v18 = (double)v17;
      }
      uint64_t v9 = CA::WindowServer::IOMFBDisplay::compute_layer_bw((CA::WindowServer::IOMFBDisplay *)*(unsigned int *)(v13 + 64), (float64x2_t *)buf, v10, v11, *((double *)this + 3377), v18);
    }
    else
    {
      uint64_t v9 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25720));
    unint64_t v7 = *((void *)this + 3380);
  }
  BOOL v8 = v7 + v9 > *((void *)this + 3376);
  if (v7 + v9 > *((void *)this + 3376) && byte_1EB2ACBEE != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v29 = x_log_category_CADebug;
      if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
      {
        int v30 = *((_DWORD *)this + 6);
        uint64_t v31 = *((void *)this + 3374);
        uint64_t v32 = *((void *)this + 3375);
        uint64_t v33 = *((void *)this + 3376);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v30;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v31;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v32;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v33;
        _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_INFO, "Display %d BW limits gpBW:%llu gpliteBW:%llu gpSumBW:%llu", buf, 0x26u);
      }
    }
    if (x_log_hook_p()) {
      goto LABEL_36;
    }
    uint64_t v34 = x_log_category_CADebug;
    BOOL v8 = 1;
    if (!os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO)) {
      return v8;
    }
    uint64_t v35 = *((void *)this + 3380);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v35;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&buf[24] = 0;
    double v26 = "gpSumBandwidth Exceeded. Detach disabled UI-BW:%llu, Detach-BW:%llu gplite-BW:%llu";
    double v27 = v34;
    uint32_t v28 = 32;
    goto LABEL_39;
  }
  return v8;
}

unsigned int CA::WindowServer::IOMFBDisplay::compute_layer_bw(CA::WindowServer::IOMFBDisplay *this, float64x2_t *a2, const CA::Rect *a3, const CA::Rect *a4, double a5, double a6)
{
  float v10 = ceil((double)(unint64_t)CA::WindowServer::Surface::bits_per_pixel(this) * 0.125);
  if (CA::Render::fourcc_compressed_of_type(this, 0, 0) == this)
  {
    if ((int)this <= 1885746227)
    {
      if ((int)this <= 1882469427)
      {
        if (this != 1882468912)
        {
          int v21 = 1882468914;
LABEL_17:
          if (this != v21)
          {
            double v20 = (ceil(v10 * (0.0078125 * a2[1].f64[0])) * 128.0 + 128.0) * a2[1].f64[1];
            goto LABEL_20;
          }
        }
      }
      else if (this != 1882469428 && this != 1885745712)
      {
        unsigned __int16 v11 = 12850;
LABEL_12:
        int v21 = v11 | 0x70660000;
        goto LABEL_17;
      }
      double v22 = a2[1].f64[1];
      double v23 = ceil(a2[1].f64[0] * 0.333333333);
      double v24 = v10;
      double v25 = 0.0234375;
      goto LABEL_19;
    }
    if ((this - 1886676528) <= 4 && ((1 << ((_BYTE)this - 48)) & 0x15) != 0
      || (this - 1886680624) <= 4 && ((1 << ((_BYTE)this - 48)) & 0x15) != 0)
    {
      double v22 = a2[1].f64[1];
      double v23 = ceil(a2[1].f64[0] * 0.2);
      double v24 = v10;
      double v25 = 0.0390625;
LABEL_19:
      double v20 = (ceil(v24 * (v25 * v23)) * 128.0 + 1.0) * v22;
      goto LABEL_20;
    }
    unsigned __int16 v11 = 13364;
    goto LABEL_12;
  }
  __asm { FMOV            V1.2D, #0.125 }
  float64x2_t v17 = vrndpq_f64(vmulq_f64(a2[1], _Q1));
  __asm { FMOV            V1.2D, #1.0 }
  float64x2_t v19 = vaddq_f64(v17, _Q1);
  double v20 = vmuld_lane_f64((float)(v10 * 64.0) * v19.f64[0], v19, 1);
LABEL_20:
  float v26 = a5;
  return vcvtpd_u64_f64(v20 / (v26 * a6));
}

double CA::WindowServer::IOMFBDisplay::clone_scale(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Display *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 3388);
  v14[0] = v4;
  if ((v4 & 0x10000000) != 0) {
    int v5 = *((_DWORD *)this + 40);
  }
  else {
    int v5 = v4 & 0x3FFF;
  }
  uint64_t v6 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v4, v14);
  uint64_t v7 = *((void *)a2 + 80);
  if ((v7 & 0x10000000) != 0)
  {
    int v8 = *((_DWORD *)a2 + 40);
    unsigned int v9 = *((_DWORD *)a2 + 41);
  }
  else
  {
    int v8 = v7 & 0x3FFF;
    unsigned int v9 = (v7 >> 14) & 0x3FFF;
  }
  unsigned int v10 = *((_DWORD *)this + 14);
  double result = 1.0;
  if ((v10 & 2) == 0)
  {
    int v12 = (v10 >> 2) & 1;
    if ((*((_WORD *)a2 + 328) & 1) == 0) {
      int v12 = 1;
    }
    if (!v12) {
      int v8 = v9;
    }
    double result = (double)v5 / (double)v8;
    if (*((unsigned char *)v6 + 40) && (v10 & 8) == 0)
    {
      float v13 = *(float *)&CA::WindowServer::clone_overscan_amounts_x;
      if (*(float *)&CA::WindowServer::clone_overscan_amounts_x == 0.0
        || *(float *)&CA::WindowServer::clone_overscan_amounts_y == 0.0)
      {
        float v13 = *((float *)this + 15);
      }
      return result * v13;
    }
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_cloning_flag(atomic_uint *this)
{
  if (*((void *)this + 6) && *((void *)this + 81))
  {
    if ((this[156] & 2) == 0)
    {
      atomic_fetch_or(this + 156, 2u);
      goto LABEL_8;
    }
    return 0;
  }
  if ((this[156] & 2) == 0) {
    return 0;
  }
  atomic_fetch_and(this + 156, 0xFFFFFFFD);
LABEL_8:
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
    if (*(void *)(v2 + 128))
    {
      CFStringRef v3 = 0;
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      long long v6 = 0uLL;
      do
      {
        uint64_t v7 = *(void *)(*(void *)(v2 + 112) + 16 * v5);
        int v8 = (char *)*((void *)&v6 + 1);
        if (v7)
        {
          unsigned int v9 = (atomic_uint *)(v7 + 8);
          if (!atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u))
          {
            uint64_t v7 = 0;
            atomic_fetch_add(v9, 0xFFFFFFFF);
          }
          uint64_t v4 = (char *)*((void *)&v6 + 1);
        }
        if (v4 >= v3)
        {
          unsigned __int16 v11 = (char *)v6;
          uint64_t v12 = (uint64_t)&v4[-v6] >> 3;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            abort();
          }
          if ((uint64_t)&v3[-v6] >> 2 > v13) {
            unint64_t v13 = (uint64_t)&v3[-v6] >> 2;
          }
          if ((unint64_t)&v3[-v6] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14)
          {
            if (v14 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64x2_t v15 = (char *)operator new(8 * v14);
            uint64_t v4 = v8;
          }
          else
          {
            uint64x2_t v15 = 0;
          }
          int v16 = &v15[8 * v12];
          *(void *)int v16 = v7;
          unsigned int v10 = v16 + 8;
          while (v4 != v11)
          {
            uint64_t v17 = *((void *)v4 - 1);
            v4 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
            *(void *)uint64_t v4 = 0;
          }
          while (v8 != v11)
          {
            float64x2_t v19 = (atomic_uint *)*((void *)v8 - 1);
            v8 -= 8;
            double v18 = v19;
            if (v19 && atomic_fetch_add(v18 + 2, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v18 + 16))(v18);
            }
          }
          CFStringRef v3 = &v15[8 * v14];
          *(void *)&long long v6 = v16;
          if (v11)
          {
            operator delete(v11);
            *(void *)&long long v6 = v16;
          }
        }
        else
        {
          *(void *)uint64_t v4 = v7;
          unsigned int v10 = v4 + 8;
        }
        *((void *)&v6 + 1) = v10;
        ++v5;
        uint64_t v4 = v10;
      }
      while (v5 < *(void *)(v2 + 128));
    }
    else
    {
      long long v6 = 0uLL;
    }
    long long v26 = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
    uint64_t v20 = *((void *)&v26 + 1);
    if ((void)v26 != *((void *)&v26 + 1))
    {
      int v21 = (CA::Render::Context **)v26;
      do
      {
        pthread_mutex_lock((pthread_mutex_t *)((char *)*v21 + 72));
        uint64_t v22 = CA::Render::Context::root_layer_handle(*v21);
        if (v22) {
          *(void *)(v22 + 96) |= 8uLL;
        }
        double v23 = *v21++;
        pthread_mutex_unlock((pthread_mutex_t *)((char *)v23 + 72));
      }
      while (v21 != *((CA::Render::Context ***)&v26 + 1));
      if (!(void)v26) {
        return 1;
      }
      if ((void)v26 != *((void *)&v26 + 1))
      {
        do
        {
          double v25 = *(atomic_uint **)(v20 - 8);
          v20 -= 8;
          double v24 = v25;
          if (v25)
          {
            if (atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
            }
          }
        }
        while (v20 != (void)v26);
      }
      goto LABEL_52;
    }
    if ((void)v26) {
LABEL_52:
    }
      operator delete((void *)v26);
  }
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::clone_update(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Server *a2, CA::WindowServer::Display *a3, CA::Render::Update *a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v355 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v11 = (char *)this + 25376;
  uint64_t v12 = (char *)a3 + 745;
  if ((*(_DWORD *)((unsigned char *)a3 + 745) & 0x1000) != 0) {
    unint64_t v13 = a3;
  }
  else {
    unint64_t v13 = 0;
  }
  if (CA::WindowServer::IOMFBDisplay::set_framebuffer_ax_matrix(this))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v14 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_ERROR, "IOMFB was not able to clone accessibility matrix on external display.\n", buf, 2u);
      }
    }
  }
  if (v11[2758])
  {
    uint64_t v15 = mach_absolute_time();
    if (CATimeWithHostTime(v15) > *((double *)this + 3314))
    {
      v11[2758] = 0;
      *((void *)this + 3314) = 0;
    }
  }
  if (a4) {
    CA::WindowServer::IOMFBDisplay::update_brightness_deadline((double *)this, *((double *)a4 + 9));
  }
  if (!*((void *)this + 80)) {
    goto LABEL_58;
  }
  uint64_t v16 = *((void *)this + 6);
  if (!v16 || (*(unsigned char *)(*(void *)(v16 + 96) + 747) & 1) != 0)
  {
    LOBYTE(v17) = -21;
    return v17;
  }
  if (v11[2756] || v11[2758])
  {
    LOBYTE(v17) = -1;
    return v17;
  }
  if (!(*(unsigned int (**)(CA::WindowServer::Display *))(*(void *)a3 + 216))(a3)
    || *((unsigned char *)this + 636) != 2)
  {
    CA::WindowServer::IOMFBDisplay::set_enabled_(this, 0);
    LOBYTE(v17) = -20;
    return v17;
  }
  if (!a4)
  {
    LOBYTE(v17) = -19;
    return v17;
  }
  double v18 = *(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1400);
  if (BYTE3(qword_1EB2ACC90))
  {
    uint64_t v287 = *((void *)a4 + 37);
    uint64_t v288 = v18(this);
    BOOL v289 = (((*(uint64_t (**)(CA::WindowServer::Display *))(*(void *)a3 + 1400))(a3) ^ v288) & v287) != 0;
    if (v11[2778])
    {
      uint64_t v290 = *((void *)a4 + 36);
      uint64_t v291 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1400))(this);
      if ((v291 | v290) != v291) {
        BOOL v289 = 1;
      }
    }
    BOOL v21 = v289;
    goto LABEL_27;
  }
  uint64_t v19 = *((void *)a4 + 36);
  uint64_t v20 = v18(this);
  if ((v20 | v19) == v20)
  {
    BOOL v21 = 0;
LABEL_27:
    if (v11[2843])
    {
      if (x_log_hook_p())
      {
        uint64_t v297 = *((unsigned int *)this + 6);
        x_log_();
      }
      else
      {
        v293 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          int v294 = *((_DWORD *)this + 6);
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v294;
          _os_log_impl(&dword_184668000, v293, OS_LOG_TYPE_DEFAULT, "resuming display %d cloning", buf, 8u);
        }
      }
      int v22 = 0;
      v11[2843] = 0;
    }
    else
    {
      int v22 = 0;
    }
    goto LABEL_37;
  }
  if (x_log_hook_p())
  {
    uint64_t v297 = *((unsigned int *)this + 6);
    x_log_();
  }
  else
  {
    double v23 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *((_DWORD *)this + 6);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v24;
      _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, "display %d cloning failed due to protection mismatch", buf, 8u);
    }
  }
  if (v11[2843])
  {
    BOOL v21 = 0;
    int v22 = 1;
  }
  else
  {
    if (x_log_hook_p())
    {
      uint64_t v297 = *((unsigned int *)this + 6);
      x_log_();
    }
    else
    {
      v295 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        int v296 = *((_DWORD *)this + 6);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v296;
        _os_log_impl(&dword_184668000, v295, OS_LOG_TYPE_DEFAULT, "stopping display %d cloning due to protection mismatch", buf, 8u);
      }
    }
    BOOL v21 = 0;
    int v22 = 1;
    v11[2843] = 1;
  }
LABEL_37:
  if (!v11[2759]) {
    v11[2773] = 1;
  }
  v11[2759] = 1;
  uint64_t v25 = *((void *)this + 3388);
  uint64_t v342 = v25;
  uint64_t v26 = *((void *)this + 81);
  if (v26 && !v25)
  {
    *((void *)this + 3388) = v26;
    CA::WindowServer::IOMFBDisplay::update_framebuffer(this, 4);
LABEL_57:
    v11[2759] = 0;
    CA::WindowServer::IOMFBDisplay::set_enabled_(this, 0);
LABEL_58:
    LOBYTE(v17) = -2;
    return v17;
  }
  if (!v25) {
    goto LABEL_57;
  }
  BOOL v335 = v21;
  ++*(_DWORD *)v11;
  int v27 = v22;
  CA::WindowServer::IOMFBDisplay::set_enabled_(this, 1);
  int v333 = v27;
  if ((v27 & 1) == 0) {
    *a6 = 1;
  }
  double v28 = *((double *)a4 + 9) - *((double *)this + 3313);
  double v29 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 744))(this) * 0.95;
  if (CA::WindowServer::IOMFBDisplay::can_update_(this, (*((_DWORD *)a4 + 271) & 0x400) != 0, 0.0, 0.0, v30, v31, v32)
    && v28 >= v29)
  {
    CA::WindowServer::IOMFBDisplay::update_color_matrix(this, *((double *)a4 + 9));
    uint64_t v33 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v25, &v342);
    if (byte_1EB2ACC62) {
      int v322 = 0;
    }
    else {
      int v322 = v335 | ((*((unsigned char *)a4 + 270) & 8) >> 3);
    }
    int v34 = *((unsigned __int8 *)v33 + 40);
    v323 = (pthread_mutex_t *)((char *)this + 25720);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25720));
    unsigned int v35 = *((_DWORD *)v11 + 82);
    int v36 = *((_DWORD *)a3 + 52);
    int v37 = *((_DWORD *)this + 14);
    __int16 v38 = *((unsigned __int8 *)a3 + 656) + 4;
    int v39 = 4;
    if ((v37 & 4) != 0) {
      __int16 v38 = 4;
    }
    __int16 v40 = v38
        - *((unsigned __int8 *)this + 656)
        - ((v38
          - *((unsigned __int8 *)this + 656)
          + ((unsigned __int16)((v38 - *((unsigned __int8 *)this + 656)) & 0xC000) >> 14)) & 0xFFFC);
    int v41 = v40;
    switch(v40)
    {
      case 1:
        goto LABEL_55;
      case 2:
        unsigned int v317 = 3;
        break;
      case 3:
        int v39 = 7;
LABEL_55:
        BOOL v42 = (v40 & 1) == 0;
LABEL_56:
        unsigned int v317 = v39;
        int v43 = *((_DWORD *)a3 + 53);
LABEL_67:
        int v45 = v25 & 0x3FFF;
        signed int v46 = (v25 >> 14) & 0x3FFF;
        __asm { FMOV            V0.2D, #1.0 }
        long long v341 = _Q0;
        signed int v314 = v46;
        int v320 = v41;
        unsigned int v325 = v35;
        if ((v37 & 2) != 0)
        {
          double v51 = (double)v43;
          int32x2_t v328 = 0;
          double v52 = (double)v36;
          double v53 = 1.0;
          unint64_t v324 = 0;
          double v56 = 1.0;
        }
        else
        {
          double v51 = (double)v43;
          double v52 = (double)v36;
          double v53 = (double)v45 / (double)v43;
          if (v53 >= (double)v46 / (double)v36) {
            double v53 = (double)v46 / (double)v36;
          }
          *(double *)&long long v341 = v53;
          *((double *)&v341 + 1) = v53;
          if (!v34 || (v37 & 8) != 0)
          {
            double v56 = v53;
          }
          else
          {
            float v54 = *(float *)&CA::WindowServer::clone_overscan_amounts_x;
            if (*(float *)&CA::WindowServer::clone_overscan_amounts_x == 0.0
              || (float v55 = *(float *)&CA::WindowServer::clone_overscan_amounts_y,
                  *(float *)&CA::WindowServer::clone_overscan_amounts_y == 0.0))
            {
              float v54 = *((float *)this + 15);
              float v55 = *((float *)this + 16);
            }
            double v56 = v53 * v54;
            double v53 = v53 * v55;
            *(double *)&long long v341 = v56;
            *((double *)&v341 + 1) = v53;
          }
          int v57 = vcvtmd_s64_f64(v56 * v51 + 0.5);
          int v58 = vcvtmd_s64_f64(v53 * v52 + 0.5);
          unint64_t v324 = __PAIR64__(v58, v57);
          int v59 = (v46 - v58) >> 1;
          v60.i32[0] = (v45 - v57) >> 1;
          v60.i32[1] = v59;
          int32x2_t v328 = v60;
          int v61 = *((_DWORD *)this + 17);
          if (v61 >= 1)
          {
            _VF = __OFSUB__(v61, v59);
            int v62 = v61 - v59;
            if (!((v62 < 0) ^ _VF | (v62 == 0)))
            {
              int v63 = v61 + v58 - v46;
              if (v63 < 1)
              {
                float v66 = 1.0;
                v67.i32[0] = 0;
              }
              else
              {
                float v64 = (float)v63 / (float)v58;
                float v65 = v64 * (float)(0.5 * (float)v57);
                float v66 = 1.0 - v64;
                v67.f32[0] = truncf(v65);
              }
              v67.f32[1] = (float)v62;
              unint64_t v324 = (unint64_t)vcvt_s32_f32(vrnda_f32(vmul_n_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v58, v57)), v66)));
              int32x2_t v328 = vcvt_s32_f32(vadd_f32(v67, vcvt_f32_s32(v328)));
              double v68 = v66;
              double v56 = v56 * v68;
              double v53 = v53 * v68;
              *(double *)&long long v341 = v56;
              *((double *)&v341 + 1) = v53;
            }
          }
          if (!HIBYTE(xmmword_1EB2ACC70) && v11[2777])
          {
            BOOL v69 = v42;
            int v70 = v25 & 0x3FFF;
            CFDictionaryRef v71 = (CA::ScalerUtil::ScalerLimits *)(*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 80))(this);
            if (v71)
            {
              double v53 = *((double *)&v341 + 1);
              double v56 = *(double *)&v341;
            }
            else
            {
              CA::ScalerUtil::ScalerLimits::limits(v71);
              float v72 = *(float *)&xmmword_1E8F85270;
              CA::ScalerUtil::ScalerLimits::limits(v73);
              float v74 = *((float *)&xmmword_1E8F85270 + 1);
              if (v69) {
                float v75 = v72;
              }
              else {
                float v75 = *((float *)&xmmword_1E8F85270 + 1);
              }
              if (!v69) {
                float v74 = v72;
              }
              double v56 = v75;
              double v76 = *((double *)&v341 + 1);
              if (*(double *)&v341 >= v56)
              {
                double v56 = *(double *)&v341;
              }
              else
              {
                double v76 = *((double *)&v341 + 1) * v56 / *(double *)&v341;
                *(double *)&long long v341 = v56;
                *((double *)&v341 + 1) = v76;
              }
              double v53 = v74;
              if (v76 >= v53)
              {
                double v53 = v76;
              }
              else
              {
                double v56 = v56 * v53 / v76;
                *(double *)&long long v341 = v56;
                *((double *)&v341 + 1) = v53;
              }
            }
            int v45 = v70;
            signed int v46 = v314;
            int v41 = v320;
            unsigned int v35 = v325;
          }
        }
        signed int v77 = vcvtmd_s64_f64(v56 * v51 + 0.5);
        signed int v78 = vcvtmd_s64_f64(v53 * v52 + 0.5);
        int v308 = v45;
        int v79 = v45 - v77;
        if (v45 < v77) {
          ++v79;
        }
        int v80 = v46 - v78;
        if (v46 < v78) {
          ++v80;
        }
        if ((HIBYTE(xmmword_1EB2ACC70) || !v11[2777]) && !v11[2778])
        {
          int v81 = v80 >> 1;
          _ZF = v79 >> 1 == v328.i32[0] && v81 == v328.i32[1];
          BOOL v83 = _ZF && v324 == v77;
          if (!v83 || HIDWORD(v324) != v78)
          {
            *((_DWORD *)this + 12 * v35 + 6452) = 0;
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              long long v238 = x_log_category_windowserver;
              if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v324;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v324);
                _os_log_impl(&dword_184668000, v238, OS_LOG_TYPE_ERROR, "Requested size (%i x %i) requires scaling on display that can't scale!", buf, 0xEu);
              }
            }
            LOBYTE(v17) = -12;
            goto LABEL_409;
          }
        }
        int v312 = v78;
        int v313 = v77;
        unsigned int v85 = (unsigned int *)((char *)this + 48 * v35);
        v327 = (CA::IOMobileFramebuffer **)((char *)this + 25568);
        v337 = v85 + 6452;
        CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25568), v85 + 6452);
        if (v11[2816]) {
          double v86 = CACurrentMediaTimeDelta();
        }
        else {
          double v86 = 0.0;
        }
        uint64_t v87 = (uint64_t)(v85 + 6446);
        CA::IOMobileFramebuffer::swap_set_time(*((double *)a4 + 9) + v86);
        if ((v12[1] & 0x10) != 0)
        {
          char v89 = (char *)(v85 + 6446);
          uint64_t v90 = (char *)v13 + 48 * *((unsigned int *)v13 + 6427);
          CFArrayRef v91 = (char *)this + 48 * v325;
          char v92 = v91[25824] & 0xFE | v90[25824] & 1;
          v91[25824] = v92;
          v91[25824] = v92 & 0xFD | v90[25824] & 2;
          uint64_t v93 = *((void *)v90 + 3224);
          int v329 = (*(unsigned __int8 *)(v93 + 132) >> 2) & 1;
          if (*(_DWORD *)(v93 + 8) >= 2u && *((_DWORD *)v11 + 84) >= 2u && !v11[2778])
          {
            uint64_t v237 = *((void *)this + 6 * *((unsigned int *)v11 + 83) + 3224);
            if (v237)
            {
              if ((*(unsigned char *)(v237 + 132) & 0x40) != 0
                && *(double *)(v237 + 48) == *(double *)&v341
                && *(double *)(v237 + 56) == *((double *)&v341 + 1))
              {
                ++*(_DWORD *)(v237 + 8);
                *((void *)this + 6 * v325 + 3224) = v237;
              }
            }
          }
          uint64_t v88 = *((void *)v13 + 3255);
          int v309 = *((unsigned __int8 *)v13 + 26425);
          char v306 = *((unsigned char *)v13 + 26424);
          uint64_t v94 = *(void *)(v93 + 32);
          CFIndex v95 = *(CA::WindowServer::Surface **)(v93 + 40);
          unsigned int v307 = CA::WindowServer::IOMFBDisplay::color_remap_mode(v13);
          v315 = v95;
          if (v94) {
            uint64_t v96 = v94;
          }
          else {
            uint64_t v96 = (uint64_t)v95;
          }
          uint64_t v331 = v96;
          uint64_t v87 = (uint64_t)v89;
          int v41 = v320;
        }
        else
        {
          uint64_t v331 = (*(uint64_t (**)(CA::WindowServer::Display *, uint64_t))(*(void *)a3 + 480))(a3, 1);
          int v329 = 0;
          uint64_t v88 = 0;
          char v306 = 0;
          unsigned int v307 = 0;
          v315 = 0;
          int v309 = 2;
        }
        if (((*((unsigned int *)a4 + 271) | ((unint64_t)*((unsigned __int16 *)a4 + 544) << 32)) & 0x10000000000) != 0
          && (*(unsigned int (**)(CA::WindowServer::Display *))(*(void *)a3 + 616))(a3))
        {
          uint64_t v97 = (*(uint64_t (**)(CA::WindowServer::Display *))(*(void *)a3 + 632))(a3);
          uint64_t v98 = v331;
          if (v97) {
            uint64_t v98 = v97;
          }
          uint64_t v331 = v98;
          unsigned int v99 = v315;
          if (v97) {
            unsigned int v99 = 0;
          }
          v315 = v99;
        }
        buffer = CA::WindowServer::IOMFBDisplay::allocate_buffer((uint64_t)this, v87, 0, *((void *)a4 + 36));
        if (v329) {
          char v102 = 68;
        }
        else {
          char v102 = 64;
        }
        *((unsigned char *)buffer + 132) = v102 | buffer[33] & 0xAA;
        v103.i64[1] = *((void *)&v341 + 1);
        v332 = buffer;
        *((_OWORD *)buffer + 3) = v341;
        if (v11[2773])
        {
          IOMobileFramebufferSwapSetBackgroundColor();
          *(_OWORD *)long long buf = 0u;
          int8x16_t v346 = 0u;
          *(_OWORD *)v353 = 0u;
          int8x16_t v354 = 0u;
          CA::WindowServer::IOMFBDisplay::swap_set_layer(this, 0, 0, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
          *(_OWORD *)long long buf = 0u;
          int8x16_t v346 = 0u;
          *(_OWORD *)v353 = 0u;
          int8x16_t v354 = 0u;
          CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)1, 0, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v298, v302);
          *(_OWORD *)long long buf = 0u;
          int8x16_t v346 = 0u;
          *(_OWORD *)v353 = 0u;
          int8x16_t v354 = 0u;
          CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)2, 0, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v299, v303);
          if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1656))(this))
          {
            uint64_t v104 = (CA::Render::Update *)v11[1051];
            *(_OWORD *)long long buf = 0u;
            int8x16_t v346 = 0u;
            *(_OWORD *)v353 = 0u;
            int8x16_t v354 = 0u;
            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, v104, 0, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
          }
        }
        v316 = (_DWORD *)v87;
        if (*((unsigned char *)this + 745) & 0x40) == 0 || !v88 || ((v333 | *(unsigned __int8 *)(v88 + 292)))
        {
          CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
          BOOL v105 = 0;
          goto LABEL_149;
        }
        int v124 = (char *)*((void *)this + 3255);
        if (!v124)
        {
          int v124 = (char *)x_mem_alloc0(0x128uLL);
          *((void *)this + 3255) = v124;
        }
        int v125 = *(atomic_uint **)v124;
        uint64_t v126 = v317;
        if (*(void *)v124)
        {
          if (atomic_fetch_add(v125 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *, void))(*(void *)v125 + 16))(v125, v317);
          }
          *(void *)int v124 = 0;
          *((_DWORD *)v124 + 72) = 0;
          uint64_t v126 = v317;
        }
        int v127 = (atomic_uint *)*((void *)v124 + 1);
        if (v127)
        {
          if (atomic_fetch_add(v127 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *, uint64_t))(*(void *)v127 + 16))(v127, v126);
          }
          *((void *)v124 + 1) = 0;
          uint64_t v126 = v317;
        }
        v124[292] = v124[292] & 0xFB | *(unsigned char *)(v88 + 292) & 4;
        *((_DWORD *)v124 + 8) = *(_DWORD *)(v88 + 32);
        unsigned int v128 = *(_DWORD *)(v88 + 36) & 0xFFFFFF78 | 0x80;
        *((_DWORD *)v124 + 9) = v128;
        if (v126
          && (int v129 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, void))(*(void *)this
                                                                                                  + 2312))(this, v126, *(void *)(v88 + 16)), unsigned int v128 = *((_DWORD *)v124 + 9), v129))
        {
          unsigned int v130 = v317;
          *((_DWORD *)v124 + 1CASetDebugMessage("", 0) = 2 * v317;
          unsigned int v131 = v128 | *(_DWORD *)(v88 + 36) & 7;
          *((_DWORD *)v124 + 9) = v131;
        }
        else
        {
          unsigned int v131 = v128 | CA::WindowServer::IOMFBDisplay::clone_update(CA::WindowServer::Server *,CA::WindowServer::Display *,CA::Render::Update *,unsigned int &,BOOL &)::concat_rot[(8 * v41) | (unint64_t)(*(_DWORD *)(v88 + 36) & 7)];
          *(void *)(v124 + 36) = v131;
          unsigned int v130 = v317;
        }
        double v143 = *(double *)(v88 + 96);
        *((double *)v124 + 2CASetDebugMessage("", 0) = v143;
        double v144 = *(double *)(v88 + 104);
        *((double *)v124 + 21) = v144;
        double v145 = *(double *)(v88 + 112);
        *((double *)v124 + 22) = v145;
        double v146 = *(double *)(v88 + 120);
        *((double *)v124 + 23) = v146;
        *((_OWORD *)v124 + 4) = *(_OWORD *)(v88 + 64);
        *((_OWORD *)v124 + 5) = *(_OWORD *)(v88 + 80);
        *((_OWORD *)v124 + 6) = *(_OWORD *)(v88 + 96);
        *((_OWORD *)v124 + 7) = *(_OWORD *)(v88 + 112);
        if (v130)
        {
          if (v130 >= 4)
          {
            double v155 = v144 + v146;
            double v144 = v143;
            double v143 = v51 - v155;
            double v147 = v145;
          }
          else
          {
            double v147 = v146;
            double v146 = v145;
          }
          if ((v317 & 2) != 0) {
            double v143 = v51 - (v143 + v146);
          }
          if (v317) {
            double v144 = v52 - (v144 + v147);
          }
        }
        else
        {
          double v147 = v146;
          double v146 = v145;
        }
        long long v156 = v341;
        double v157 = (double)v328.i32[0] + *(double *)&v341 * v143;
        double v158 = (double)v328.i32[1] + *((double *)&v341 + 1) * v144;
        *((double *)v124 + 2CASetDebugMessage("", 0) = v157;
        *((double *)v124 + 21) = v158;
        double v159 = v146 * *(double *)&v156;
        double v160 = v147 * *((double *)&v156 + 1);
        *((double *)v124 + 22) = v146 * *(double *)&v156;
        *((double *)v124 + 23) = v147 * *((double *)&v156 + 1);
        double v161 = *(double *)(v88 + 112);
        int v162 = *(_DWORD *)(v88 + 36);
        if ((v162 & 4) != 0) {
          double v163 = *(double *)(v88 + 120);
        }
        else {
          double v163 = *(double *)(v88 + 112);
        }
        if ((v162 & 4) == 0) {
          double v161 = *(double *)(v88 + 120);
        }
        double v164 = v163 * *(double *)&v156;
        double v165 = *(double *)(v88 + 144);
        double v166 = *(double *)(v88 + 152);
        double v167 = v164 / v165;
        double v168 = v161 * *((double *)&v156 + 1) / v166;
        double v169 = v164 / v165 * *(double *)(v88 + 128);
        double v170 = *(double *)(v88 + 136) * v168;
        double v171 = v167 * v165;
        double v172 = v168 * v166;
        if ((v131 & 7) != 0)
        {
          double v173 = v169 + v171;
          double v174 = v170 + v172;
          if ((v131 & 4) != 0)
          {
            double v175 = v170 + v172;
          }
          else
          {
            double v175 = v169;
            double v169 = v170;
            double v170 = v173;
            double v173 = v174;
          }
          if ((v131 & 2) != 0) {
            double v176 = v170;
          }
          else {
            double v176 = v175;
          }
          if ((v131 & 2) == 0) {
            double v175 = v170;
          }
          if (v131) {
            double v177 = v173;
          }
          else {
            double v177 = v169;
          }
          if (v131) {
            double v178 = v169;
          }
          else {
            double v178 = v173;
          }
          if (v176 >= v175) {
            double v169 = v175;
          }
          else {
            double v169 = v176;
          }
          if (v177 >= v178) {
            double v170 = v178;
          }
          else {
            double v170 = v177;
          }
          double v171 = v175 - v176;
          double v179 = -(v175 - v176);
          if (v171 < 0.0) {
            double v171 = v179;
          }
          double v172 = v178 - v177;
          if (v178 - v177 < 0.0) {
            double v172 = -(v178 - v177);
          }
        }
        int v180 = v309;
        double v181 = floor(v157 + 0.5);
        double v182 = floor(v169 + 0.5);
        *((double *)v124 + 24) = v182;
        double v183 = floor(v158 + 0.5);
        *((double *)v124 + 2CASetDebugMessage("", 0) = v181;
        *((double *)v124 + 21) = v183;
        *(double *)v101.i64 = floor(v159 + 0.5);
        *(double *)v103.i64 = floor(v160 + 0.5);
        *((void *)v124 + 22) = v101.i64[0];
        *((void *)v124 + 23) = v103.i64[0];
        double v184 = floor(v170 + 0.5);
        *((double *)v124 + 16) = v182;
        *((double *)v124 + 17) = v184;
        double v185 = floor(v171 + 0.5);
        double v186 = floor(v172 + 0.5);
        *((double *)v124 + 18) = v185;
        *((double *)v124 + 19) = v186;
        *((double *)v124 + 25) = v184;
        *((double *)v124 + 26) = v185;
        *((double *)v124 + 28) = v181;
        *((double *)v124 + 27) = v186;
        *((double *)v124 + 29) = v183;
        *((void *)v124 + 3CASetDebugMessage("", 0) = v101.i64[0];
        *((void *)v124 + 31) = v103.i64[0];
        int v187 = HIDWORD(v324);
        if ((int)v324 > SHIDWORD(v324)) {
          int v187 = v324;
        }
        v103.i32[0] = v187;
        v101.i32[0] = 1073741822;
        v188.i64[0] = v328.i32[0];
        v188.i64[1] = v328.i32[1];
        int8x16_t v189 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v103, v101), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v188));
        v188.i64[0] = (int)v324;
        v188.i64[1] = SHIDWORD(v324);
        int8x16_t v190 = (int8x16_t)vcvtq_f64_s64(v188);
        int32x2_t v191 = vdup_n_s32(v187 > 1073741822);
        v188.i64[0] = v191.u32[0];
        v188.i64[1] = v191.u32[1];
        float64x2_t v318 = (float64x2_t)v189;
        *(int8x16_t *)long long buf = v189;
        int8x16_t v346 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v188, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v190);
        float64x2_t v310 = (float64x2_t)v346;
        if (!CA::BoundsImpl::contains((double *)buf, (double *)v124 + 28)) {
          CA::OGL::clip_detached_rects((float64x2_t *)v124 + 12, (Rect *)v124 + 28, 0, v192, v318, v310, v193, v194, v195, v196, v197, v198);
        }
        if (v180 == 2) {
          goto LABEL_278;
        }
        if (*((double *)v124 + 18) == *((double *)v124 + 22) && *((double *)v124 + 19) == *((double *)v124 + 23)) {
          *((_OWORD *)v124 + 15) = *((_OWORD *)v124 + 13);
        }
        if (!v11[2778])
        {
LABEL_278:
          unint64_t v200 = *(unsigned int **)(v88 + 16);
          uint64_t v199 = v200[16];
          unsigned int v319 = (*(uint64_t (**)(unsigned int *))(*(void *)v200 + 24))(v200);
        }
        else
        {
          unsigned int v319 = 0;
          uint64_t v199 = 875704422;
        }
        unsigned int v311 = (*(uint64_t (**)(void))(**(void **)(v88 + 16) + 56))(*(void *)(v88 + 16));
        int32x2_t v201 = vadd_s32(vmovn_s64((int64x2_t)vcvtq_u64_f64(*((float64x2_t *)v124 + 13))), (int32x2_t)0x100000001);
        v202.i64[0] = v201.i32[0] & 0xFFFFFFFE;
        v202.i64[1] = v201.i32[1] & 0xFFFFFFFE;
        float64x2_t v203 = vcvtq_f64_u64(v202);
        *((float64x2_t *)v124 + 13) = v203;
        int32x2_t v204 = vadd_s32(vmovn_s64((int64x2_t)vcvtq_u64_f64(*((float64x2_t *)v124 + 15))), (int32x2_t)0x100000001);
        v202.i64[0] = v204.i32[0] & 0xFFFFFFFE;
        v202.i64[1] = v204.i32[1] & 0xFFFFFFFE;
        float64x2_t v205 = vcvtq_f64_u64(v202);
        *((float64x2_t *)v124 + 15) = v205;
        int v206 = *((_DWORD *)v124 + 10);
        if (v206) {
          double v207 = v203.f64[0];
        }
        else {
          double v207 = v205.f64[0];
        }
        uint64_t v208 = v207;
        double v209 = v203.f64[1];
        if (!v206) {
          double v209 = v205.f64[1];
        }
        uint64_t v210 = v209;
        uint64_t v211 = (CA::WindowServer::Surface *)*((void *)v124 + 3);
        if (v211)
        {
          if (*((void *)v124 + 2) != *(void *)(v88 + 16)
            || *((_DWORD *)v211 + 14) != v208
            || *(void *)((char *)v211 + 60) != __PAIR64__(v199, v210))
          {
            goto LABEL_421;
          }
          int v212 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)v211 + 24))(v211);
          uint64_t v211 = (CA::WindowServer::Surface *)*((void *)v124 + 3);
          if (v212 == v319)
          {
            int v213 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)v211 + 56))(v211);
            uint64_t v211 = (CA::WindowServer::Surface *)*((void *)v124 + 3);
            if (v213 == v311)
            {
              int v214 = 0;
              goto LABEL_440;
            }
          }
          if (v211)
          {
LABEL_421:
            CA::WindowServer::Surface::unref(v211);
            *((void *)v124 + 3) = 0;
          }
        }
        v272 = (CA::WindowServer::Surface *)*((void *)v124 + 2);
        if (v272) {
          CA::WindowServer::Surface::unref(v272);
        }
        v273 = *(_DWORD **)(v88 + 16);
        v273[56] = v273[56] & 0xFFFF0000 | (unsigned __int16)(v273[56] + 1);
        *((void *)v124 + 2) = v273;
        if (v11[2778])
        {
          *(void *)v343 = 0;
          v357.double width = (double)v208;
          v357.double height = (double)v210;
          int wireless_surface_options = CA::IOMobileFramebuffer::get_wireless_surface_options(*v327, *((double *)a4 + 9), v357, (__IOSurface **)v343);
          if (wireless_surface_options)
          {
            int v275 = wireless_surface_options;
            if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2224))(this))
            {
              CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
              IOMobileFramebufferSwapCancel();
              unsigned int *v337 = 0;
              if (v275 != -536870184)
              {
                if (x_log_hook_p())
                {
LABEL_457:
                  x_log_();
                  goto LABEL_462;
                }
                v265 = x_log_category_windowserver;
                if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_462;
                }
                int v286 = *((_DWORD *)this + 6);
                *(_DWORD *)v353 = 67109376;
                *(_DWORD *)&v353[4] = v286;
                *(_WORD *)&v353[8] = 1024;
                *(_DWORD *)&v353[10] = v275;
                v267 = v353;
LABEL_461:
                _os_log_impl(&dword_184668000, v265, OS_LOG_TYPE_ERROR, "display %u get_wireless_surface_options returned error %x\n", v267, 0xEu);
                goto LABEL_462;
              }
              goto LABEL_448;
            }
            int v214 = 0;
            uint64_t surface = *((void *)v124 + 3);
          }
          else
          {
            uint64_t surface = (uint64_t)CA::WindowServer::IOSurface::wrap_buffer(this, *(IOSurfaceRef *)v343, 0, 0);
            *((void *)v124 + 3) = surface;
            int v214 = 1;
          }
        }
        else
        {
          uint64_t v277 = (*(uint64_t (**)(_DWORD *))(*(void *)v273 + 216))(v273);
          uint64_t surface = CA::WindowServer::Display::allocate_surface((uint64_t)this, v208, v210, (CA::Render *)v199, v319, v311, 0, v277, @"CA Clone Surface", 0);
          int v214 = 0;
          *((void *)v124 + 3) = surface;
        }
        if (!surface)
        {
          v11[2761] = 1;
          goto LABEL_443;
        }
        v11[1049] = 2;
        v11[1048] = v306;
        unsigned int v278 = *((_DWORD *)v124 + 9) & 7 | (((*((_DWORD *)v124 + 9) >> 3) & 1) << 9);
        if (HIBYTE(xmmword_1EB2ACC70))
        {
          uint64_t v279 = v278 | 0x400;
        }
        else if (v11[2777])
        {
          uint64_t v279 = v278;
        }
        else
        {
          uint64_t v279 = v278 | 0x400;
        }
        *(_OWORD *)v353 = 0u;
        int8x16_t v354 = 0u;
        if ((*(_DWORD *)(v88 + 36) & 0x8000080) != 0 || (*(unsigned char *)(v88 + 44) & 7) != 0)
        {
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)v353 = vrndq_f64(vaddq_f64(*(float64x2_t *)(v88 + 128), _Q1));
          double v281 = *(double *)(v88 + 152);
          v354.i64[0] = trunc(*(double *)(v88 + 144) + 0.5);
          double v282 = trunc(v281 + 0.5);
        }
        else
        {
          *(_OWORD *)v353 = *(_OWORD *)(v88 + 192);
          double v282 = *(double *)(v88 + 216);
          v354.i64[0] = *(void *)(v88 + 208);
        }
        *(double *)&v354.i64[1] = v282;
        if (!CA::WindowServer::IOMFBDisplay::copy_surface(this, *((CA::WindowServer::Surface **)v124 + 3), *((CA::WindowServer::Surface **)v124 + 2), v279, 0, 0, (CA::Rect *)v353, 0, *(float *)&v282))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v283 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v343 = 0;
              _os_log_impl(&dword_184668000, v283, OS_LOG_TYPE_DEFAULT, "CoreAnimation: failed to copy detached layer", v343, 2u);
            }
          }
          if (v214 && (*(uint64_t (**)(void))(**((void **)v124 + 3) + 160))(*((void *)v124 + 3)))
          {
            v284 = (CA::Render::Update *)v11[1049];
            v285 = (CA::Render::Update *)*((void *)v124 + 3);
            *(_OWORD *)v343 = 0u;
            long long v344 = 0u;
            long long v339 = 0u;
            long long v340 = 0u;
            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, v284, v285, (const Rect *)v343, (const Rect *)&v339, 0, *v337, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
          }
          CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
          IOMobileFramebufferSwapCancel();
          unsigned int *v337 = 0;
          goto LABEL_455;
        }
        uint64_t v211 = (CA::WindowServer::Surface *)*((void *)v124 + 3);
LABEL_440:
        v11[2761] = 1;
        if (v211)
        {
LABEL_444:
          v124[292] &= ~1u;
          BOOL v105 = v214 != 0;
          int v41 = v320;
LABEL_149:
          uint64_t v106 = v11[1048];
          uint64_t v107 = *((void *)this + 3255);
          if (!v107 && v106 != 2 && v11[2778])
          {
            if ((*((_DWORD *)this + 14) & 0x10) != 0) {
              uint64_t v106 = v11[1048];
            }
            else {
              uint64_t v106 = 2;
            }
          }
          if (v11[2761] || v11[2773])
          {
            if (v107)
            {
              BOOL v108 = *(CA::Render::Update **)(v107 + 24);
              memset(buf, 0, sizeof(buf));
              uint64_t v109 = *((void *)v108 + 7);
              v110.i64[0] = v109;
              v110.i64[1] = HIDWORD(v109);
              int8x16_t v346 = (int8x16_t)vcvtq_f64_u64(v110);
              int8x16_t v111 = *(int8x16_t *)(v107 + 240);
              *(_OWORD *)v353 = *(_OWORD *)(v107 + 224);
              int8x16_t v354 = v111;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v11[1049], v108, (const Rect *)buf, (const Rect *)v353, (const CA::Rect *)*(unsigned int *)(v107 + 40), *v337, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
              *(_OWORD *)v343 = 0u;
              long long v344 = 0u;
              long long v339 = 0u;
              long long v340 = 0u;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)(v106 == 0), 0, (const Rect *)v343, (const Rect *)&v339, 0, *v337, *((_DWORD *)a4 + 62), v300, v304);
              uint64_t v112 = *(void *)(v107 + 24);
              *(_DWORD *)(v112 + 224) = *(_DWORD *)(v112 + 224) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v112 + 224)
                                                                                                + 1);
              *((void *)this + 6 * v325 + 3225) = v112;
              if ((*(unsigned char *)(v107 + 292) & 4) != 0) {
                *((unsigned char *)this + 48 * v325 + 25824) |= 2u;
              }
            }
            else
            {
              *(_OWORD *)long long buf = 0u;
              int8x16_t v346 = 0u;
              *(_OWORD *)v353 = 0u;
              int8x16_t v354 = 0u;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)1, 0, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
              *(_OWORD *)long long buf = 0u;
              int8x16_t v346 = 0u;
              *(_OWORD *)v353 = 0u;
              int8x16_t v354 = 0u;
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)(2 * (v106 == 0)), 0, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v301, v305);
            }
          }
          if ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2224))(this))
          {
            uint64_t v114 = v331;
            if (!v331) {
              goto LABEL_174;
            }
          }
          else
          {
            uint64_t v114 = v331;
            if (*((void *)this + 3255) || !v331) {
              goto LABEL_174;
            }
          }
          if ((v333 | v329))
          {
LABEL_174:
            *(_OWORD *)long long buf = 0u;
            int8x16_t v346 = 0u;
            *(_OWORD *)v353 = 0u;
            int8x16_t v354 = 0u;
            unsigned int v121 = v337;
            CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v106, 0, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
            BOOL v122 = 0;
            CFDictionaryRef v123 = v332;
LABEL_373:
            v123[3] = *v121;
            CA::WindowServer::IOMFBDisplay::update_color_matrix(this, *((double *)a4 + 9));
            CA::WindowServer::IOMFBDisplay::update_blend_display_color_spaces(this);
            CA::WindowServer::IOMFBDisplay::update_system_gamma(this);
            CA::WindowServer::IOMFBDisplay::update_blackpoint_adaptation(this);
            CA::WindowServer::IOMFBDisplay::update_gamma_adjustment(this);
            CA::WindowServer::IOMFBDisplay::update_user_adjustment(this);
            CA::WindowServer::IOMFBDisplay::swap_brightness(this);
            CA::WindowServer::IOMFBDisplay::update_display_edr_factor(this);
            CA::WindowServer::IOMFBDisplay::swap_display_edr_factor((uint64_t)this);
            CA::WindowServer::IOMFBDisplay::swap_display_headroom_used(this, a4);
            CA::WindowServer::IOMFBDisplay::swap_hdr_metadata(this, a4);
            if (v11[2824])
            {
              int v251 = v11[2769];
              if (v251 != (*(unsigned int (**)(CA::WindowServer::Display *))(*(void *)a3 + 848))(a3))
              {
                v11[2769] = (*(uint64_t (**)(CA::WindowServer::Display *))(*(void *)a3 + 848))(a3);
                IOMobileFramebufferSwapSetColorRemapMode();
              }
            }
            if ((v322 & 1) == 0)
            {
              if (v313 <= v312) {
                int v252 = v312;
              }
              else {
                int v252 = v313;
              }
              if (v252 <= 1073741822) {
                double v253 = (double)v312 * (double)v313;
              }
              else {
                double v253 = INFINITY;
              }
              uint64_t v254 = mach_absolute_time();
              double v255 = CATimeWithHostTime(v254);
              CARecordFrame(0, 0, 0, 0, v255, v253, 0.0);
            }
            int v17 = IOMobileFramebufferSwapEnd();
            if (v105)
            {
              uint64_t v256 = *((void *)this + 3255);
              if (v256)
              {
                long long v257 = *(CA::WindowServer::Surface **)(v256 + 24);
                if (v257)
                {
                  CA::WindowServer::Surface::unref(v257);
                  *(void *)(*((void *)this + 3255) + 24) = 0;
                }
              }
            }
            if (v122)
            {
              long long v258 = (CA::WindowServer::Surface *)*((void *)v123 + 4);
              if (v258)
              {
                CA::WindowServer::Surface::unref(v258);
                *((void *)v123 + 4) = 0;
              }
            }
            if (v17)
            {
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                long long v259 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                {
                  int v260 = *((_DWORD *)this + 6);
                  *(_DWORD *)long long buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v260;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v17;
                  _os_log_impl(&dword_184668000, v259, OS_LOG_TYPE_ERROR, "display %u swap_end returned error %x\n", buf, 0xEu);
                }
              }
              if (BYTE9(xmmword_1EB2ACC10)) {
                kdebug_trace();
              }
              *unsigned int v121 = 0;
              LOBYTE(v17) = -16;
            }
            else
            {
              *((void *)this + 3313) = *((void *)a4 + 9);
            }
            CA::WindowServer::IOMFBDisplay::finish_update_((uint64_t)this, v316, (uint64_t)a4, 0);
            int v261 = 0;
            if (!v11[2824])
            {
              int v262 = v11[2769];
              if (v262 == (*(unsigned int (**)(CA::WindowServer::Display *))(*(void *)a3 + 848))(a3))
              {
                int v261 = 0;
              }
              else
              {
                v11[2769] = (*(uint64_t (**)(CA::WindowServer::Display *))(*(void *)a3 + 848))(a3);
                int v261 = 16;
              }
            }
            float v263 = *((float *)v11 + 198);
            if (v263 != (*(float (**)(CA::WindowServer::Display *))(*(void *)a3 + 904))(a3))
            {
              *((float *)v11 + 198) = (*(float (**)(CA::WindowServer::Display *))(*(void *)a3 + 904))(a3);
              v261 |= 0x20u;
            }
            float v264 = *((float *)v11 + 219);
            if (v264 != (*(float (**)(CA::WindowServer::Display *))(*(void *)a3 + 1000))(a3))
            {
              *((float *)v11 + 219) = (*(float (**)(CA::WindowServer::Display *))(*(void *)a3 + 1000))(a3);
              v261 |= 0x100u;
            }
            CA::WindowServer::IOMFBDisplay::update_framebuffer(this, v261);
            goto LABEL_409;
          }
          unsigned int v115 = v41 - 1;
          if ((v41 - 1) > 2)
          {
            unsigned int v334 = 0;
            int v120 = 0;
          }
          else
          {
            BOOL v116 = v105;
            unsigned int v117 = dword_1849A84D0[v115];
            int v118 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, void, uint64_t))(*(void *)this
                                                                                                + 2312))(this, v117, v114);
            int v119 = 2 * v117;
            if (!v118) {
              int v119 = 0;
            }
            unsigned int v334 = v119;
            if (v118) {
              int v120 = 0;
            }
            else {
              int v120 = v117;
            }
            BOOL v105 = v116;
          }
          unsigned int v121 = v337;
          if (HIBYTE(xmmword_1EB2ACC70))
          {
            int v132 = v120 | 0x400;
          }
          else if (v11[2777])
          {
            int v132 = v120;
          }
          else
          {
            int v132 = v120 | 0x400;
          }
          if (v332[2] != 1)
          {
            int v142 = 0;
LABEL_363:
            CFDictionaryRef v123 = v332;
            uint64_t v241 = *((void *)v332 + 4);
            if (v241)
            {
              memset(buf, 0, sizeof(buf));
              uint64_t v242 = *(void *)(v241 + 56);
              v243.i64[0] = v242;
              v243.i64[1] = HIDWORD(v242);
              int32x4_t v244 = (int32x4_t)vcvtq_f64_u64(v243);
              int32x4_t v338 = v244;
              int8x16_t v346 = (int8x16_t)v244;
              int v245 = v324;
              if ((int)v324 <= SHIDWORD(v324)) {
                int v245 = HIDWORD(v324);
              }
              v244.i32[0] = v245;
              v113.i32[0] = 1073741822;
              v246.i64[0] = v328.i32[0];
              v246.i64[1] = v328.i32[1];
              int8x16_t v247 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v244, v113), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v246));
              v246.i64[0] = (int)v324;
              v246.i64[1] = SHIDWORD(v324);
              int8x16_t v248 = (int8x16_t)vcvtq_f64_s64(v246);
              int32x2_t v249 = vdup_n_s32(v245 > 1073741822);
              v246.i64[0] = v249.u32[0];
              v246.i64[1] = v249.u32[1];
              *(int8x16_t *)v353 = v247;
              int8x16_t v354 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v246, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v248);
              if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 80))(this))
              {
                memset(v353, 0, sizeof(v353));
                int8x16_t v354 = (int8x16_t)v338;
              }
              CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)v106, *((CA::Render::Update **)v332 + 4), (const Rect *)buf, (const Rect *)v353, (const CA::Rect *)v334, *v121, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
              if (initialized != -1) {
                dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
              }
              if (*(float *)&dword_1EB2ACAB8)
              {
                v250 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)v332 + 4) + 160))(*((void *)v332 + 4));
                CA::WindowServer::IOMFBDisplay::dump_framebuffer(this, v250);
              }
            }
            BOOL v122 = v142 != 0;
            goto LABEL_373;
          }
          unsigned int v330 = v132;
          BOOL v321 = v105;
          if (!v322)
          {
            uint64_t v148 = (CA::WindowServer::Surface *)*((void *)v332 + 5);
            if (v148)
            {
              CA::WindowServer::Surface::unref(v148);
              *((void *)v332 + 5) = 0;
            }
            (*(void (**)(CA::WindowServer::IOMFBDisplay *, void))(*(void *)this + 1576))(this, 0);
LABEL_215:
            BOOL is_hdr = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v342);
            BOOL v150 = is_hdr;
            if (v106 == 2) {
              uint64_t v151 = 875704422;
            }
            else {
              uint64_t v151 = 1380411457;
            }
            if (v106 != 2 && !is_hdr) {
              uint64_t v151 = CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(this);
            }
            BOOL v326 = v150;
            if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 80))(this))
            {
              v330 |= 0x10000u;
              unsigned int v152 = v308;
              unsigned int v153 = v314;
            }
            else
            {
              if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, long long *))(*(void *)this + 2336))(this, v106, &v341) & 1) == 0&& !HIBYTE(xmmword_1EB2ACC70)&& v11[2777])
              {
                unsigned int v154 = (_DWORD *)v331;
                if ((v330 & 4) != 0) {
                  unsigned int v152 = *(_DWORD *)(v331 + 60);
                }
                else {
                  unsigned int v152 = *(_DWORD *)(v331 + 56);
                }
                if ((v330 & 4) != 0) {
                  unsigned int v153 = *(_DWORD *)(v331 + 56);
                }
                else {
                  unsigned int v153 = *(_DWORD *)(v331 + 60);
                }
                goto LABEL_298;
              }
              if ((v334 & 8) != 0) {
                unsigned int v152 = v312;
              }
              else {
                unsigned int v152 = v313;
              }
              if ((v334 & 8) != 0) {
                unsigned int v153 = v313;
              }
              else {
                unsigned int v153 = v312;
              }
            }
            unsigned int v154 = (_DWORD *)v331;
LABEL_298:
            if (v106 == 2) {
              uint64_t v215 = (v152 + 1) & 0xFFFFFFFE;
            }
            else {
              uint64_t v215 = v152;
            }
            if (v106 == 2) {
              uint64_t v216 = (v153 + 1) & 0xFFFFFFFE;
            }
            else {
              uint64_t v216 = v153;
            }
            uint64_t v217 = (*(uint64_t (**)(_DWORD *))(*(void *)v154 + 216))(v154);
            if (v335) {
              uint64_t v218 = 0;
            }
            else {
              uint64_t v218 = v217;
            }
            int v336 = v11[2778];
            if (v11[2778])
            {
              if (v11[2775])
              {
                LODWORD(v215) = v154[14];
                LODWORD(v216) = v154[15];
              }
              *(void *)v353 = 0;
              v356.double width = (double)v215;
              v356.double height = (double)v216;
              int v219 = CA::IOMobileFramebuffer::get_wireless_surface_options(*v327, *((double *)a4 + 9), v356, (__IOSurface **)v353);
              if (v219)
              {
                int v220 = v219;
                IOMobileFramebufferSwapCancel();
                unsigned int *v337 = 0;
                if (v220 != -536870184)
                {
                  if (x_log_hook_p()) {
                    goto LABEL_457;
                  }
                  v265 = x_log_category_windowserver;
                  if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                  {
LABEL_462:
                    LOBYTE(v17) = -14;
                    goto LABEL_409;
                  }
                  int v266 = *((_DWORD *)this + 6);
                  *(_DWORD *)long long buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v266;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v220;
                  v267 = buf;
                  goto LABEL_461;
                }
LABEL_448:
                LOBYTE(v17) = -13;
LABEL_409:
                pthread_mutex_unlock(v323);
                return v17;
              }
              unint64_t v224 = CA::WindowServer::IOSurface::wrap_buffer(this, *(IOSurfaceRef *)v353, 0, 0);
              *((void *)v332 + 4) = v224;
              int v142 = 1;
              if (v224) {
                goto LABEL_324;
              }
LABEL_362:
              unsigned int v121 = v337;
              BOOL v105 = v321;
              goto LABEL_363;
            }
            unint64_t v221 = (CA::WindowServer::Surface *)*((void *)v332 + 4);
            if (v221)
            {
              if (*((_DWORD *)v221 + 14) != v215
                || *((_DWORD *)v221 + 15) != v216
                || *((_DWORD *)v221 + 16) != v151)
              {
                goto LABEL_320;
              }
              int v222 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)v221 + 24))(v221);
              unint64_t v221 = (CA::WindowServer::Surface *)*((void *)v332 + 4);
              if (!v222)
              {
                if ((*(unsigned int (**)(CA::WindowServer::Surface *))(*(void *)v221 + 56))(v221) == 2
                  || ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1840))(this) & 1) != 0)
                {
                  uint64_t v292 = (*(uint64_t (**)(void))(**((void **)v332 + 4) + 216))(*((void *)v332 + 4));
                  unint64_t v221 = (CA::WindowServer::Surface *)*((void *)v332 + 4);
                  if (v292 == v218)
                  {
                    int v142 = 0;
                    if (!v221) {
                      goto LABEL_362;
                    }
                    goto LABEL_324;
                  }
                }
                else
                {
                  unint64_t v221 = (CA::WindowServer::Surface *)*((void *)v332 + 4);
                }
              }
              if (v221)
              {
LABEL_320:
                CA::WindowServer::Surface::unref(v221);
                *((void *)v332 + 4) = 0;
              }
            }
            uint64_t v223 = CA::WindowServer::Display::allocate_surface((uint64_t)this, v215, v216, (CA::Render *)v151, 0, 2u, 0, v218, @"CA Clone Surface", 0);
            int v142 = 0;
            *((void *)v332 + 4) = v223;
            if (!v223) {
              goto LABEL_362;
            }
LABEL_324:
            int v225 = v322;
            if (!v315) {
              int v225 = 1;
            }
            if (v225) {
              int v226 = (CA::WindowServer::Surface *)v331;
            }
            else {
              int v226 = v315;
            }
            BOOL v227 = v326;
            if (!v11[2778]) {
              BOOL v227 = 0;
            }
            if (v227 && (*(unsigned int (**)(CA::WindowServer::Surface *))(*(void *)v226 + 128))(v226))
            {
              long long v351 = 0u;
              long long v352 = 0u;
              long long v349 = 0u;
              long long v350 = 0u;
              long long v347 = 0u;
              long long v348 = 0u;
              *(_OWORD *)long long buf = 0u;
              int8x16_t v346 = 0u;
              CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)buf, (uint64_t *)this);
              uint64_t v228 = *((void *)v332 + 4);
              uint64_t v229 = (*(uint64_t (**)(uint64_t))(*(void *)v228 + 216))(v228);
              if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, CA::WindowServer::Surface *, uint8_t *, CA::Render::Update *, void, uint64_t, uint64_t))(*(void *)this + 640))(this, v228, v226, buf, a4, v330, v229, 1) & 1) == 0)
              {
LABEL_334:
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v268 = x_log_category_windowserver;
                  if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl(&dword_184668000, v268, OS_LOG_TYPE_DEFAULT, "CoreAnimation: failed to copy main layer", buf, 2u);
                  }
                }
                if (v336
                  && (*(uint64_t (**)(void))(**((void **)v332 + 4) + 160))(*((void *)v332 + 4)))
                {
                  v269 = (CA::Render::Update *)v11[1048];
                  v270 = (CA::Render::Update *)*((void *)v332 + 4);
                  *(_OWORD *)long long buf = 0u;
                  int8x16_t v346 = 0u;
                  *(_OWORD *)v353 = 0u;
                  int8x16_t v354 = 0u;
                  CA::WindowServer::IOMFBDisplay::swap_set_layer(this, v269, v270, (const Rect *)buf, (const Rect *)v353, 0, *v337, *((_DWORD *)a4 + 62), v297, SBYTE4(v297));
                }
                v271 = (CA::WindowServer::Surface *)*((void *)v332 + 4);
                if (v271) {
                  CA::WindowServer::Surface::unref(v271);
                }
                *((void *)v332 + 4) = 0;
                IOMobileFramebufferSwapCancel();
                unsigned int *v337 = 0;
LABEL_455:
                LOBYTE(v17) = -15;
                goto LABEL_409;
              }
            }
            else
            {
              *(_OWORD *)long long buf = 0u;
              int8x16_t v346 = 0u;
              if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 80))(this))
              {
                int v232 = v324;
                if ((int)v324 <= SHIDWORD(v324)) {
                  int v232 = HIDWORD(v324);
                }
                v230.i32[0] = v232;
                v231.i32[0] = 1073741822;
                v233.i64[0] = v328.i32[0];
                v233.i64[1] = v328.i32[1];
                int32x4_t v230 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v230, v231), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v233));
                v233.i64[0] = (int)v324;
                v233.i64[1] = SHIDWORD(v324);
                int32x2_t v234 = vdup_n_s32(v232 > 1073741822);
                int8x16_t v235 = (int8x16_t)vcvtq_f64_s64(v233);
                v233.i64[0] = v234.u32[0];
                v233.i64[1] = v234.u32[1];
                *(int32x4_t *)long long buf = v230;
                int8x16_t v346 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v233, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v235);
                v330 |= 0x400u;
                long long v236 = buf;
              }
              else
              {
                long long v236 = 0;
              }
              if (CA::ScalerUtil::get_io_service(void)::once != -1) {
                dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_77);
              }
              if (CA::ScalerUtil::get_io_service(void)::scaler_service) {
                uint64_t v239 = v330;
              }
              else {
                uint64_t v239 = v330 | 0x800;
              }
              if (!v326)
              {
                unsigned int v240 = v307;
                if (!v11[2778]) {
                  unsigned int v240 = 0;
                }
                unsigned int v307 = v240;
              }
              if (CADeviceIsVirtualized::once != -1) {
                dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
              }
              if ((CA::WindowServer::IOMFBDisplay::copy_surface(this, *((CA::WindowServer::Surface **)v332 + 4), v226, v239, v307, (CA::Rect *)v236, 0, 0, *(float *)v230.i32) & 1) == 0)goto LABEL_334; {
            }
              }
            *((unsigned char *)v332 + 132) = v332[33] & 0xF6 | 1;
            goto LABEL_362;
          }
          int v133 = (CA::Render *)CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(this);
          uint64_t v134 = (*(uint64_t (**)(uint64_t))(*(void *)v114 + 216))(v114);
          if (v335) {
            uint64_t v135 = 0;
          }
          else {
            uint64_t v135 = v134;
          }
          uint64_t v136 = *((void *)v332 + 5);
          if (v136)
          {
            BOOL v137 = (CA::WindowServer::Surface *)*((void *)v332 + 5);
            if (*(_DWORD *)(v136 + 56) != *((_DWORD *)a3 + 52)
              || *((_DWORD *)v137 + 15) != *((_DWORD *)a3 + 53)
              || *((_DWORD *)v137 + 16) != v133)
            {
              goto LABEL_204;
            }
            uint64_t v138 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)v137 + 216))(v137);
            int v139 = (CA::WindowServer::Surface *)*((void *)v332 + 5);
            if (v138 == v135)
            {
LABEL_206:
              uint64_t v140 = mach_absolute_time();
              double v141 = CATimeWithHostTime(v140);
              uint64_t v331 = (uint64_t)v139;
              CA::WindowServer::Server::inhibit_clone_render(a2, v139, a4, a3, v141);
              goto LABEL_215;
            }
            BOOL v137 = (CA::WindowServer::Surface *)*((void *)v332 + 5);
            if (v139) {
LABEL_204:
            }
              CA::WindowServer::Surface::unref(v137);
          }
          int v139 = (CA::WindowServer::Surface *)CA::WindowServer::Display::allocate_surface((uint64_t)this, *((unsigned int *)a3 + 52), *((unsigned int *)a3 + 53), v133, 0, 2u, 0, v135, @"CA Clone Surface", 0);
          *((void *)v332 + 5) = v139;
          goto LABEL_206;
        }
LABEL_443:
        CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
        goto LABEL_444;
      default:
        BOOL v42 = 0;
        if (v41)
        {
          int v39 = 0;
          goto LABEL_56;
        }
        unsigned int v317 = 0;
        break;
    }
    BOOL v42 = 1;
    int v43 = *((_DWORD *)a3 + 52);
    int v36 = *((_DWORD *)a3 + 53);
    goto LABEL_67;
  }
  ++*((_DWORD *)v11 + 1);
  if (v28 < v29) {
    LOBYTE(v17) = -22;
  }
  else {
    LOBYTE(v17) = -6;
  }
  return v17;
}

void CA::WindowServer::IOMFBDisplay::set_enabled_(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 28133;
  *((unsigned char *)this + 28133) = 0;
  unint64_t v5 = (os_unfair_lock_s *)((char *)this + 716);
  os_unfair_lock_lock((os_unfair_lock_t)this + 179);
  long long v6 = (unsigned char *)*((void *)this + 91);
  if (!a2)
  {
    int v7 = v6[1];
    if (v7 == 2)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v12 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "entering flipbook", buf, 2u);
        }
      }
      unint64_t v13 = (void *)*((void *)this + 3204);
      if (v13)
      {
        if (!*v13)
        {
          sil_mgr_instance(0, 0xFFFFFFFFLL);
          *unint64_t v13 = v14;
          if (!v14) {
            goto LABEL_30;
          }
          unint64_t v13 = (void *)*((void *)this + 3204);
        }
        CA::WindowServer::SILMgr::turn_off_all_regions((CA::WindowServer::SILMgr *)buf, (uint64_t)v13, 0);
        v15.n128_u64[0] = 0;
        iomfb_swap_set_indicator_brightness(*((void *)this + 3196), 0, v15);
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2112))(this);
      }
LABEL_30:
      CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 1u, 1);
      *long long v6 = 2;
      if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 696))(this) & 1) == 0)
      {
        if (!x_log_hook_p())
        {
          uint64_t v16 = x_log_category_display_state;
          if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = *((_DWORD *)this + 6);
            *(_DWORD *)long long buf = 67109378;
            int v24 = v17;
            __int16 v25 = 2080;
            uint64_t v26 = "flipbook";
            _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
          }
          goto LABEL_56;
        }
LABEL_50:
        x_log_();
LABEL_56:
        kdebug_trace();
        goto LABEL_57;
      }
      goto LABEL_57;
    }
    if (!v6[3])
    {
LABEL_40:
      if (v7 == 3)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          double v18 = x_log_category_flipbook;
          if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "entering suppression", buf, 2u);
          }
        }
        CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 2u, 0);
        *long long v6 = 3;
        if ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 696))(this)) {
          goto LABEL_57;
        }
        if (!x_log_hook_p())
        {
          BOOL v21 = x_log_category_display_state;
          if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
          {
            int v22 = *((_DWORD *)this + 6);
            *(_DWORD *)long long buf = 67109378;
            int v24 = v22;
            __int16 v25 = 2080;
            uint64_t v26 = "suppressed";
            _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
          }
          goto LABEL_56;
        }
        goto LABEL_50;
      }
      *long long v6 = 0;
      if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 696))(this) & 1) == 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v19 = x_log_category_display_state;
          if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *((_DWORD *)this + 6);
            *(_DWORD *)long long buf = 67109378;
            int v24 = v20;
            __int16 v25 = 2080;
            uint64_t v26 = "off";
            _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
          }
        }
        goto LABEL_56;
      }
LABEL_57:
      CA::WindowServer::Display::send_display_state_change_reply((uint64_t)this);
      *((void *)this + 87) = 0;
      goto LABEL_58;
    }
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2184))(this);
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2176))(this);
    CA::WindowServer::IOMFBDisplay::set_all_layers_to_null((uint64_t)this, 1);
    if (v4[1])
    {
      uint64_t v8 = mach_absolute_time();
      if (CATimeWithHostTime(v8) <= *((double *)this + 3314))
      {
        if (v4[1])
        {
LABEL_39:
          v4[16] = 1;
          int v7 = v6[1];
          goto LABEL_40;
        }
      }
      else
      {
        v4[1] = 0;
        *((void *)this + 3314) = 0;
      }
    }
    if (!v4[5] || (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 248))(this)) {
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, void, void, void))(*(void *)this + 2152))(this, 0, 0, 0);
    }
    goto LABEL_39;
  }
  if (v6[3] == 1) {
    CAUpdateEarliestTailspinEmissionTime(2);
  }
  (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, void, void))(*(void *)this + 2152))(this, 1, 0, 0);
  v4[1] = 0;
  *((void *)this + 3314) = 0;
  if ((*v6 & 0xFE) == 2)
  {
    CA::WindowServer::FlipBook::transition_to_state(*((unsigned __int8 **)this + 40), 0, 0);
    *(_DWORD *)((char *)this + 745) |= 0x400u;
  }
  *long long v6 = 1;
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 696))(this) & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v9 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *((_DWORD *)this + 6);
        *(_DWORD *)long long buf = 67109378;
        int v24 = v10;
        __int16 v25 = 2080;
        uint64_t v26 = "on";
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "IOMFBDisplay::set_enabled_ display_id=%u, current_state=%s", buf, 0x12u);
      }
    }
    kdebug_trace();
  }
  CA::WindowServer::Display::send_display_state_change_reply((uint64_t)this);
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 696))(this) & 1) == 0)
  {
    uint64_t v11 = *((void *)this + 80);
    if (!CA::WindowServer::Display::Mode::operator==(*((void *)this + 3388), v11) || v4[84])
    {
      *((void *)this + 3388) = v11;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
      CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, 4);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
    }
  }
LABEL_58:
  os_unfair_lock_unlock(v5);
}

uint64_t CA::WindowServer::IOMFBDisplay::update_framebuffer(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 560);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, a2);

  return pthread_mutex_unlock(v4);
}

uint64_t CA::IOMobileFramebuffer::swap_set_time(double a1)
{
  return IOMobileFramebufferSwapSetTimestamps();
}

uint64_t CA::WindowServer::IOMFBDisplay::color_remap_mode(CA::WindowServer::IOMFBDisplay *this)
{
  if (*((unsigned char *)this + 28138) || (*((_WORD *)this + 328) & 0x1C00) == 0x1000) {
    return 0;
  }
  IOMobileFramebufferGetColorRemapMode();
  return 0;
}

uint64_t CA::IOMobileFramebuffer::get_wireless_surface_options(CA::IOMobileFramebuffer *this, double a2, CGSize a3, __IOSurface **a4)
{
  CAHostTimeWithTime(a2);
  uint64_t WirelessSurfaceWithOptions = IOMobileFramebufferGetWirelessSurfaceWithOptions();
  if (!WirelessSurfaceWithOptions && !IOSurfaceGetBulkAttachments()) {
    IOSurfaceSetBulkAttachments2();
  }
  return WirelessSurfaceWithOptions;
}

uint64_t CA::WindowServer::IOMFBDisplay::copy_surface(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Surface *a2, CA::WindowServer::Surface *a3, uint64_t a4, uint64_t a5, CA::Rect *a6, CA::Rect *a7, CA::ScalerStatistics *a8, float a9)
{
  uint64_t v9 = 0;
  if (!a2 || !a3) {
    return v9;
  }
  float v18 = (*(float (**)(CA::WindowServer::Surface *, float))(*(void *)a3 + 192))(a3, a9);
  if (v18 != (*(float (**)(CA::WindowServer::Surface *))(*(void *)a2 + 192))(a2))
  {
    (*(void (**)(CA::WindowServer::Surface *))(*(void *)a3 + 192))(a3);
    (*(void (**)(CA::WindowServer::Surface *))(*(void *)a2 + 200))(a2);
  }
  float v19 = *((float *)a3 + 17);
  if (v19 != *((float *)a2 + 17)) {
    *((float *)a2 + 17) = v19;
  }
  uint64_t v20 = *((unsigned int *)a2 + 56);
  unint64_t v21 = (v20 | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0xFFFFFFEFFFFFFFFFLL | ((((unint64_t)*((unsigned __int8 *)a3 + 228) >> 4) & 1) << 36);
  *((_DWORD *)a2 + 56) = v20;
  *((unsigned char *)a2 + 228) = BYTE4(v21);
  unint64_t v22 = v21 & 0xDFFFFFFFFFLL | ((((unint64_t)*((unsigned __int8 *)a3 + 228) >> 5) & 1) << 37);
  *((_DWORD *)a2 + 56) = v20;
  *((unsigned char *)a2 + 228) = BYTE4(v22);
  CA::WindowServer::Surface::set_hdr_processor(a2, *((atomic_uint **)a3 + 11));
  long long v23 = *((_OWORD *)a3 + 6);
  long long v24 = *((_OWORD *)a3 + 7);
  long long v25 = *((_OWORD *)a3 + 9);
  *((_OWORD *)a2 + 8) = *((_OWORD *)a3 + 8);
  *((_OWORD *)a2 + 9) = v25;
  *((_OWORD *)a2 + 6) = v23;
  *((_OWORD *)a2 + 7) = v24;
  long long v26 = *((_OWORD *)a3 + 10);
  long long v27 = *((_OWORD *)a3 + 11);
  long long v28 = *((_OWORD *)a3 + 13);
  *((_OWORD *)a2 + 12) = *((_OWORD *)a3 + 12);
  *((_OWORD *)a2 + 13) = v28;
  *((_OWORD *)a2 + 1CASetDebugMessage("", 0) = v26;
  *((_OWORD *)a2 + 11) = v27;
  uint64_t v29 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 40))(a3);
  (*(void (**)(CA::WindowServer::Surface *, uint64_t))(*(void *)a2 + 48))(a2, v29);
  (*(void (**)(CA::WindowServer::Surface *, CA::WindowServer::Surface *))(*(void *)a2 + 104))(a2, a3);
  if ((a4 & 0x4000) != 0) {
    (*(void (**)(CA::WindowServer::Surface *, CA::WindowServer::Surface *))(*(void *)a2 + 112))(a2, a3);
  }
  unint64_t v30 = (*((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
  *((_DWORD *)a2 + 56) = *((_DWORD *)a2 + 56);
  *((unsigned char *)a2 + 228) = BYTE4(v30);
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1840))(this))
  {
    uint64_t v32 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 88))(a3);
    (*(void (**)(CA::WindowServer::Surface *, uint64_t, void))(*(void *)a2 + 96))(a2, v32, 0);
  }
  BOOL v33 = (a4 & 0xC00) != 0;
  double v53 = a7;
  if (a4 & 0xB000 | a5)
  {
    BOOL v33 = 0;
LABEL_13:
    BOOL v34 = 1;
    goto LABEL_18;
  }
  if (BYTE4(xmmword_1EB2ACC70)) {
    goto LABEL_13;
  }
  if ((a4 & 0xC00) != 0 && BYTE5(xmmword_1EB2ACC70))
  {
    BOOL v34 = 0;
    BOOL v33 = 1;
  }
  else
  {
    BOOL v34 = (a4 & 0x800) == 0;
  }
LABEL_18:
  if (CA::ScalerUtil::get_io_service(void)::once != -1) {
    dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_77);
  }
  if (CA::ScalerUtil::get_io_service(void)::scaler_service) {
    BOOL v35 = v34;
  }
  else {
    BOOL v35 = 0;
  }
  if (!a6) {
    goto LABEL_33;
  }
  if (*(double *)a6 == 0.0)
  {
    double v36 = *((double *)a6 + 1);
    if (v36 == 0.0)
    {
      LODWORD(v36) = *((_DWORD *)a2 + 14);
      double v37 = (double)*(unint64_t *)&v36;
      if (*((double *)a6 + 2) == v37)
      {
        LODWORD(v37) = *((_DWORD *)a2 + 15);
        if (*((double *)a6 + 3) == (double)*(unint64_t *)&v37) {
          goto LABEL_33;
        }
      }
    }
  }
  uint64_t v38 = a4;
  if (!byte_1EB2ACC83)
  {
    uint64_t v38 = a4;
    if (*(double *)a6 == *((double *)a2 + 3))
    {
      uint64_t v38 = a4;
      if (*((double *)a6 + 1) == *((double *)a2 + 4))
      {
        uint64_t v38 = a4;
        if (*((double *)a6 + 2) == *((double *)a2 + 5))
        {
          uint64_t v38 = a4;
          if (*((double *)a6 + 3) == *((double *)a2 + 6)) {
LABEL_33:
          }
            uint64_t v38 = a4 & 0xFFFEFFFF;
        }
      }
    }
  }
  if (v35)
  {
    uint64_t v39 = (*(uint64_t (**)(CA::WindowServer::Surface *, CA::WindowServer::Surface *, uint64_t, uint64_t, CA::Rect *, CA::Rect *, CA::ScalerStatistics *, float))(*(void *)a2 + 176))(a2, a3, v38, a5, a6, v53, a8, 1.0);
    uint64_t v9 = v39;
    if (!byte_1EB2ACC2D) {
      goto LABEL_38;
    }
    if (v39) {
      double v52 = "Succeeded";
    }
    else {
      double v52 = "Failed";
    }
    goto LABEL_60;
  }
  uint64_t v9 = 0;
  if (byte_1EB2ACC2D)
  {
    double v52 = "Skipped";
LABEL_60:
    CA::WindowServer::copy_surface_log((CA::WindowServer *)v52, (const char *)1, (uint64_t)a2, a3, a6, v53, v31);
  }
LABEL_38:
  if ((v9 & 1) == 0 && v33)
  {
    __int16 v40 = (void *)*((void *)this + 39);
    if (v40)
    {
      int v41 = (void *)*v40;
      (*(void (**)(void, void))(*(void *)*v40 + 936))(*v40, *((void *)a3 + 2));
      (*(void (**)(void *, void))(*v41 + 952))(v41, *((void *)a2 + 2));
      uint64_t v42 = v41[25];
      uint64_t v43 = v41[26];
      uint64_t v44 = *((void *)a2 + 7);
      v41[25] = 0;
      v41[26] = v44;
      uint64_t v45 = (*(uint64_t (**)(void *, CA::WindowServer::Surface *, uint64_t))(*v41 + 928))(v41, a2, 1);
      uint64_t v46 = *((void *)a3 + 7);
      v41[25] = 0;
      v41[26] = v46;
      uint64_t v47 = (*(uint64_t (**)(void *, CA::WindowServer::Surface *, void))(*v41 + 928))(v41, a3, 0);
      uint64_t v9 = 0;
      if (v45 && v47)
      {
        (*(void (**)(void *, uint64_t, uint64_t, void, uint64_t, CA::Rect *, CA::Rect *))(*v41 + 720))(v41, v45, v47, WORD1(v38) & 1, v38, a6, v53);
        (*(void (**)(void *, void))(*v41 + 944))(v41, *((void *)a3 + 2));
        (*(void (**)(void *, void))(*v41 + 960))(v41, *((void *)a2 + 2));
        (***((void (****)(void))this + 3312))();
        v41[25] = v42;
        v41[26] = v43;
        uint64_t v9 = 1;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (!byte_1EB2ACC2D) {
      goto LABEL_48;
    }
    if (v9) {
      CFTypeID v48 = "Succeeded";
    }
    else {
      CFTypeID v48 = "Failed";
    }
    goto LABEL_64;
  }
  if (byte_1EB2ACC2D)
  {
    CFTypeID v48 = "Skipped";
LABEL_64:
    CA::WindowServer::copy_surface_log((CA::WindowServer *)v48, 0, (uint64_t)a2, a3, a6, v53, v31);
  }
LABEL_48:
  uint64_t v49 = 0x800000000;
  if (v9) {
    uint64_t v49 = 0;
  }
  unint64_t v50 = (*((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32)) & 0xFFFFFFF7FFFFFFFFLL | v49;
  *((_DWORD *)a2 + 56) = *((_DWORD *)a2 + 56);
  *((unsigned char *)a2 + 228) = BYTE4(v50);
  if ((a4 & 0x10000) != 0 && a6 && v9)
  {
    *(_OWORD *)((char *)a2 + 24) = *(_OWORD *)a6;
    *(_OWORD *)((char *)a2 + 4CASetDebugMessage("", 0) = *((_OWORD *)a6 + 1);
    return 1;
  }
  else
  {
    *(_OWORD *)((char *)a2 + 24) = 0u;
    *(_OWORD *)((char *)a2 + 4CASetDebugMessage("", 0) = 0u;
  }
  return v9;
}

void CA::WindowServer::IOMFBDisplay::dump_framebuffer(CA::WindowServer::IOMFBDisplay *this, __IOSurface *a2)
{
  uint64_t v4 = (void (***)(void))*((void *)this + 3312);
  if (v4) {
    (**v4)(v4);
  }
  if (*((unsigned char *)this + 28154)) {
    unint64_t v5 = "wireless-framebuffer";
  }
  else {
    unint64_t v5 = "framebuffer";
  }
  long long v6 = CAIOSurfaceWriteToFileWithSuffix(a2, v5);
  if (v6)
  {
    if (*(float *)&dword_1EB2ACAB8 > 0.0) {
      *(float *)&dword_1EB2ACAB8 = *(float *)&dword_1EB2ACAB8 + -1.0;
    }
    free(v6);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_icc_curve_with_cg_trc(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  bzero(&v11, 0x218uLL);
  if (a2)
  {
    switch(*(_DWORD *)a2)
    {
      case 0:
        LODWORD(v12) = *(_DWORD *)(a2 + 4);
        unsigned int v11 = *(float *)&v12 != 1.0;
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25568, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
      case 1:
        unsigned int v11 = 2;
        goto LABEL_10;
      case 2:
        unsigned int v11 = 3;
        goto LABEL_9;
      case 3:
        unsigned int v11 = 4;
        goto LABEL_8;
      case 4:
        unsigned int v11 = 5;
        uint64_t v15 = *(void *)(a2 + 24);
LABEL_8:
        int v14 = *(_DWORD *)(a2 + 20);
LABEL_9:
        HIDWORD(v13) = *(_DWORD *)(a2 + 16);
LABEL_10:
        LODWORD(v13) = *(_DWORD *)(a2 + 12);
        uint64_t v12 = *(void *)(a2 + 4);
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25568, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
      case 5:
        uint64_t v8 = *(void *)(a2 + 4);
        unsigned int v11 = 8;
        uint64_t v13 = *(void *)(a2 + 12);
        uint64_t v12 = v8 | 0x3F80000000000000;
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25568, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
      case 6:
        unsigned int v9 = 7;
        goto LABEL_14;
      case 7:
        unsigned int v9 = 6;
LABEL_14:
        unsigned int v11 = v9;
        break;
      default:
        return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25568, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
    }
  }
  return CA::IOMobileFramebuffer::swap_set_icc_curve((int)a1 + 25568, a3, *(_DWORD *)(a1 + 24), 0, a4, &v11);
}

void CA::WindowServer::copy_surface_log(CA::WindowServer *this, const char *a2, uint64_t a3, CA::WindowServer::Surface *a4, CA::WindowServer::Surface *a5, CA::Rect *a6, CA::Rect *a7)
{
  int v10 = (int)a2;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    uint64_t v12 = *(void *)a5;
    uint64_t v13 = *((void *)a5 + 1);
    size_t Width = (unint64_t)*((double *)a5 + 2);
    size_t Height = (unint64_t)*((double *)a5 + 3);
    if (a6)
    {
LABEL_3:
      uint64_t v16 = *(void *)a6;
      uint64_t v17 = *((void *)a6 + 1);
      double v18 = *((double *)a6 + 3);
      size_t v19 = (unint64_t)*((double *)a6 + 2);
      size_t v20 = (unint64_t)v18;
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v21 = (__IOSurface *)(*(uint64_t (**)(uint64_t, const char *, uint64_t, CA::WindowServer::Surface *, void, CA::Rect *, CA::Rect *))(*(void *)a3 + 160))(a3, a2, a3, a4, 0, a6, a7);
    size_t Width = IOSurfaceGetWidth(v21);
    unint64_t v22 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3);
    size_t Height = IOSurfaceGetHeight(v22);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (a6) {
      goto LABEL_3;
    }
  }
  long long v23 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a4 + 160))(a4);
  size_t v19 = IOSurfaceGetWidth(v23);
  long long v24 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a4 + 160))(a4);
  size_t v20 = IOSurfaceGetHeight(v24);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
LABEL_6:
  if (x_log_hook_p())
  {
    long long v25 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3);
    IOSurfaceGetWidth(v25);
    long long v26 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3);
    IOSurfaceGetHeight(v26);
    long long v27 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a4 + 160))(a4);
    IOSurfaceGetWidth(v27);
    long long v28 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a4 + 160))(a4);
    IOSurfaceGetHeight(v28);
    x_log_();
  }
  else
  {
    uint64_t v29 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v30 = "GPU";
      if (v10) {
        unint64_t v30 = "MSR";
      }
      uint64_t v38 = v30;
      uint64_t v31 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3);
      size_t v32 = IOSurfaceGetWidth(v31);
      BOOL v33 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3);
      size_t v34 = IOSurfaceGetHeight(v33);
      BOOL v35 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a4 + 160))(a4);
      size_t v36 = IOSurfaceGetWidth(v35);
      double v37 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a4 + 160))(a4);
      *(_DWORD *)long long buf = 136318466;
      __int16 v40 = v38;
      __int16 v41 = 2080;
      uint64_t v42 = this;
      __int16 v43 = 2048;
      size_t v44 = v32;
      __int16 v45 = 2048;
      size_t v46 = v34;
      __int16 v47 = 2048;
      uint64_t v48 = v12;
      __int16 v49 = 2048;
      uint64_t v50 = v13;
      __int16 v51 = 2048;
      size_t v52 = Width;
      __int16 v53 = 2048;
      size_t v54 = Height;
      __int16 v55 = 2048;
      size_t v56 = v36;
      __int16 v57 = 2048;
      size_t v58 = IOSurfaceGetHeight(v37);
      __int16 v59 = 2048;
      uint64_t v60 = v16;
      __int16 v61 = 2048;
      uint64_t v62 = v17;
      __int16 v63 = 2048;
      size_t v64 = v19;
      __int16 v65 = 2048;
      size_t v66 = v20;
      _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_DEFAULT, "Copy with %s: %s  dst: %ldx%ld subcoords: %f,%f %ldx%ld  src: %ldx%ld subcoords: %f,%f %ldx%ld", buf, 0x8Eu);
    }
  }
}

BOOL CA::WindowServer::IOMFBDisplay::presents_metal_layer_on_finish(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1 = *((void *)this + 3255);
  if (!v1 || (*(unsigned char *)(v1 + 292) & 1) != 0) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 6 * *((unsigned int *)this + 6427) + 3224);
  return v2 && (*(unsigned char *)(v2 + 132) & 4) == 0;
}

double CA::WindowServer::IOMFBDisplay::detaching_rect@<D0>(CA::WindowServer::IOMFBDisplay *this@<X0>, int8x16_t *a2@<X8>)
{
  uint64_t v2 = (float64x2_t *)*((void *)this + 3255);
  if (v2)
  {
    float64x2_t v3 = v2[7];
    int64x2_t v4 = vceqzq_f64(v3);
    float64x2_t v5 = (float64x2_t)vdupq_laneq_s64(v4, 1);
    unint64_t v6 = vorrq_s8((int8x16_t)v5, (int8x16_t)v4).u64[0];
    int32x4_t v7 = 0uLL;
    if ((v6 & 0x8000000000000000) == 0)
    {
      int8x16_t v8 = vorrq_s8((int8x16_t)vcltzq_f64(v3), (int8x16_t)vcgezq_f64(v3));
      float64x2_t v5 = (float64x2_t)vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v8), 1), v8);
      if ((*(void *)&v5.f64[0] & 0x8000000000000000) == 0)
      {
        float64x2_t v9 = v2[6];
        float64x2_t v5 = vmaxnmq_f64(v9, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
        float64x2_t v10 = vminnmq_f64(vaddq_f64(v9, v3), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
        float64x2_t v3 = (float64x2_t)vcvtmq_s64_f64(v5);
        int32x4_t v7 = vuzp1q_s32((int32x4_t)v3, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v10), (int64x2_t)v3));
      }
    }
    int v11 = v7.i32[2];
    if (v7.i32[2] <= v7.i32[3]) {
      int v11 = v7.i32[3];
    }
    LODWORD(v3.f64[0]) = 1073741822;
    LODWORD(v5.f64[0]) = v11;
    v12.i64[0] = v7.i32[0];
    v12.i64[1] = v7.i32[1];
    int8x16_t v13 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)v5, (int32x4_t)v3), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v12));
    v12.i64[0] = v7.i32[2];
    v12.i64[1] = v7.i32[3];
    int8x16_t v14 = (int8x16_t)vcvtq_f64_s64(v12);
    int32x2_t v15 = vdup_n_s32(v11 > 1073741822);
    v12.i64[0] = v15.u32[0];
    v12.i64[1] = v15.u32[1];
    int8x16_t v16 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v12, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v14);
    *a2 = v13;
    a2[1] = v16;
  }
  else
  {
    v16.i64[0] = 0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return *(double *)v16.i64;
}

CA::CAHDRProcessor *CA::WindowServer::IOMFBDisplay::tonemap_surface(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  double result = 0;
  if (a2 && a3)
  {
    if (CADeviceHasHardwareAcceleratedHDR::once[0] != -1) {
      dispatch_once(CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_132);
    }
    if (CADeviceHasHardwareAcceleratedHDR::has_capability)
    {
      if (!*(void *)(a1 + 26416)) {
        CA::CAHDRProcessor::new_hdr_processor(result);
      }
      if (a4 && !*(_DWORD *)(a4 + 60)) {
        (*(void (**)(uint64_t, float))(*(void *)a2 + 200))(a2, 1.0 / *(float *)(a4 + 20));
      }
      unint64_t v16 = (*(unsigned int *)(a2 + 224) | ((unint64_t)*(unsigned __int8 *)(a2 + 228) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
      *(_DWORD *)(a2 + 224) = *(_DWORD *)(a2 + 224);
      *(unsigned char *)(a2 + 228) = BYTE4(v16);
      uint64_t v17 = *(void *)(a1 + 26416);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
      uint64_t v19 = (*(uint64_t (**)(void *))(*a3 + 160))(a3);
      double result = (CA::CAHDRProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, char, void))(*(void *)v17 + 16))(v17, v18, v19, *(void *)(a2 + 16), a3[2], a4, a5, 0, a7, a8, 0);
      uint64_t v20 = 0x800000000;
      if (result) {
        uint64_t v20 = 0;
      }
      unint64_t v21 = (*(unsigned int *)(a2 + 224) | ((unint64_t)*(unsigned __int8 *)(a2 + 228) << 32)) & 0xFFFFFFF7FFFFFFFFLL | v20;
      *(unsigned char *)(a2 + 228) = BYTE4(v21);
      if (result)
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(*(_DWORD *)(a5 + 480) == 2) << 36;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v22 = 0x2000000000;
      }
      uint64_t v24 = v22 | v23 | v21 & 0xCFFFFFFFFFLL;
      *(_DWORD *)(a2 + 224) = v24;
      *(unsigned char *)(a2 + 228) = BYTE4(v24);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::cloning_termination_surface(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3319);
}

uint64_t CA::WindowServer::IOMFBDisplay::allocate_cloning_termination_surface(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2 = (CA::WindowServer::Surface *)*((void *)this + 3319);
  if (v2) {
    CA::WindowServer::Surface::unref(v2);
  }
  *((void *)this + 3319) = 0;
  uint64_t v3 = *((void *)this + 6 * *((unsigned int *)this + 6426) + 3224);
  if (!v3) {
    return 0;
  }
  int64x2_t v4 = *(unsigned int **)(v3 + 40);
  if (!v4)
  {
    int64x2_t v4 = *(unsigned int **)(v3 + 32);
    if (!v4) {
      return 0;
    }
  }
  uint64_t v5 = v4[14];
  uint64_t v6 = v4[15];
  int32x4_t v7 = (CA::Render *)CA::WindowServer::IOMFBDisplay::framebuffer_pixel_format(this);
  uint64_t v8 = (*(uint64_t (**)(unsigned int *))(*(void *)v4 + 216))(v4);
  uint64_t result = CA::WindowServer::Display::allocate_surface((uint64_t)this, v5, v6, v7, 0, 2u, 0, v8, @"CA Cloning Terminator Surface", 0);
  *(_DWORD *)(result + 224) |= 0x2000000u;
  *((void *)this + 3319) = result;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_cloning_termination(CA::WindowServer::IOMFBDisplay *this)
{
  return (*((_DWORD *)this + 156) >> 2) & 1;
}

float CA::WindowServer::layer_bandwidth_v2(CA::WindowServer *this, CA::WindowServer::Surface *a2, const CA::Rect *a3, const CA::Rect *a4, double a5, float *a6, float *a7, double a8, double a9, float a10)
{
  int v13 = (int)a8;
  int v14 = (int)a9;
  float v15 = (float)(unint64_t)CA::WindowServer::Surface::bits_per_pixel(this) * (float)(int)a5;
  float v16 = (float)((float)(v15 * (float)v13) / (float)v14) / (a10 * 8.0) + *(float *)a2;
  *(float *)a2 = v16;
  float result = *(float *)a3 + (float)((float)(v15 * (float)((v13 + v14 - 1) / v14)) / (float)(a10 * 8.0));
  *(float *)a3 = result;
  return result;
}

void CA::WindowServer::rotate_surface_log(CA::WindowServer *this, CA::WindowServer::Surface *a2, const char *a3)
{
  int v3 = (int)a2;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    uint64_t v5 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
    IOSurfaceGetID(v5);
    uint64_t v6 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
    OSType PixelFormat = IOSurfaceGetPixelFormat(v6);
    unsigned int v8 = HIBYTE(PixelFormat);
    if ((PixelFormat & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL))
      {
LABEL_10:
        uint64_t v19 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
        unsigned int v20 = (IOSurfaceGetPixelFormat(v19) >> 16);
        if (v20 <= 0x7F)
        {
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v20 + 60) & 0x40000) == 0)
          {
LABEL_14:
            uint64_t v22 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
            unsigned int v23 = ((unsigned __int16)IOSurfaceGetPixelFormat(v22) >> 8);
            if (v23 <= 0x7F)
            {
              if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v23 + 60) & 0x40000) == 0)
              {
LABEL_18:
                long long v25 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
                unsigned int v26 = IOSurfaceGetPixelFormat(v25);
                if (v26 <= 0x7F)
                {
                  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v26 + 60) & 0x40000) == 0) {
                    goto LABEL_22;
                  }
                }
                else if (!__maskrune(v26, 0x40000uLL))
                {
LABEL_22:
                  long long v28 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
                  IOSurfaceGetWidth(v28);
                  uint64_t v29 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
                  IOSurfaceGetHeight(v29);
                  x_log_();
                  return;
                }
                long long v27 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
                IOSurfaceGetPixelFormat(v27);
                goto LABEL_22;
              }
            }
            else if (!__maskrune(v23, 0x40000uLL))
            {
              goto LABEL_18;
            }
            uint64_t v24 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
            IOSurfaceGetPixelFormat(v24);
            goto LABEL_18;
          }
        }
        else if (!__maskrune(v20, 0x40000uLL))
        {
          goto LABEL_14;
        }
        unint64_t v21 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
        IOSurfaceGetPixelFormat(v21);
        goto LABEL_14;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_10;
    }
    float64x2_t v9 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
    IOSurfaceGetPixelFormat(v9);
    goto LABEL_10;
  }
  float64x2_t v10 = x_log_category_windowserver;
  if (!os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
  int v11 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  IOSurfaceID ID = IOSurfaceGetID(v11);
  int v13 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  OSType v14 = IOSurfaceGetPixelFormat(v13);
  unsigned int v15 = HIBYTE(v14);
  uint64_t v16 = MEMORY[0x1E4F14390];
  if ((v14 & 0x80000000) != 0)
  {
    if (__maskrune(v15, 0x40000uLL)) {
      goto LABEL_8;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v15 + 60) & 0x40000) != 0)
  {
LABEL_8:
    uint64_t v17 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
    int v18 = (int)IOSurfaceGetPixelFormat(v17) >> 24;
    goto LABEL_25;
  }
  int v18 = 32;
LABEL_25:
  unint64_t v30 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  unsigned int v31 = (IOSurfaceGetPixelFormat(v30) >> 16);
  if (v31 <= 0x7F)
  {
    if ((*(_DWORD *)(v16 + 4 * v31 + 60) & 0x40000) != 0) {
      goto LABEL_27;
    }
  }
  else if (__maskrune(v31, 0x40000uLL))
  {
LABEL_27:
    size_t v32 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
    int v33 = (int)(IOSurfaceGetPixelFormat(v32) << 8) >> 24;
    goto LABEL_30;
  }
  int v33 = 32;
LABEL_30:
  size_t v34 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  unsigned int v35 = ((unsigned __int16)IOSurfaceGetPixelFormat(v34) >> 8);
  if (v35 <= 0x7F)
  {
    if ((*(_DWORD *)(v16 + 4 * v35 + 60) & 0x40000) != 0) {
      goto LABEL_32;
    }
  }
  else if (__maskrune(v35, 0x40000uLL))
  {
LABEL_32:
    size_t v36 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
    int v37 = (__int16)IOSurfaceGetPixelFormat(v36) >> 8;
    goto LABEL_35;
  }
  int v37 = 32;
LABEL_35:
  uint64_t v38 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  unsigned int v39 = IOSurfaceGetPixelFormat(v38);
  if (v39 <= 0x7F)
  {
    if ((*(_DWORD *)(v16 + 4 * v39 + 60) & 0x40000) != 0) {
      goto LABEL_37;
    }
LABEL_39:
    int v41 = 32;
    goto LABEL_40;
  }
  if (!__maskrune(v39, 0x40000uLL)) {
    goto LABEL_39;
  }
LABEL_37:
  __int16 v40 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  int v41 = (char)IOSurfaceGetPixelFormat(v40);
LABEL_40:
  uint64_t v42 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  size_t Width = IOSurfaceGetWidth(v42);
  size_t v44 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer *))(*(void *)this + 160))(this);
  *(_DWORD *)long long buf = 136317186;
  size_t v46 = "Display";
  __int16 v47 = 1024;
  IOSurfaceID v48 = ID;
  __int16 v49 = 1024;
  int v50 = v18;
  __int16 v51 = 1024;
  int v52 = v33;
  __int16 v53 = 1024;
  int v54 = v37;
  __int16 v55 = 1024;
  int v56 = v41;
  __int16 v57 = 2048;
  size_t v58 = Width;
  __int16 v59 = 2048;
  size_t Height = IOSurfaceGetHeight(v44);
  __int16 v61 = 1024;
  int v62 = v3;
  _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "Rotate with %s: Surface 0x%x %c%c%c%c [%zu x %zu] rotation_flags 0x%x", buf, 0x44u);
}

uint64_t CA::WindowServer::IOMFBDisplay::color_flush_color(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2 = 3768639712;
  int v3 = (pthread_mutex_t *)((char *)this + 25720);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25720));
  uint64_t v4 = *((void *)this + 6 * *((unsigned int *)this + 6426) + 3224);
  if (!v4 || (*(unsigned char *)(v4 + 132) & 0x20) == 0) {
    uint64_t v2 = 3772776672;
  }
  pthread_mutex_unlock(v3);
  return v2;
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_backstop_window(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28138);
}

BOOL CA::WindowServer::IOMFBDisplay::update_surface_has_alpha(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned char *)this + 26424) == 1;
}

void CA::WindowServer::IOMFBDisplay::cancel_all_swaps(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (unsigned int *)((char *)this + 25712);
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 25720);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25720));
  uint64_t v3 = *v1;
  if (v3)
  {
    uint64_t v4 = (int *)(v1 + 24);
    while (1)
    {
      int v5 = *v4;
      v4 += 12;
      if (v5) {
        break;
      }
      if (!--v3) {
        goto LABEL_5;
      }
    }
    pthread_mutex_unlock(v2);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float64x2_t v9 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_ERROR, "cancel_all_swaps() called with user-swaps in queue", buf, 2u);
      }
    }
  }
  else
  {
LABEL_5:
    pthread_mutex_unlock(v2);
  }
  int v6 = IOMobileFramebufferSwapCancelAll();
  if (v6)
  {
    int v7 = v6;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v8 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v11 = v7;
        _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_ERROR, "swap_cancel_all() returned 0x%x", buf, 8u);
      }
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::present_surface(CA::WindowServer::IOMFBDisplay *this, __IOSurface *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unsigned int v47 = 0;
  uint64_t v4 = (CA::WindowServer::IOMFBDisplay *)((char *)this + 25568);
  uint64_t result = CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25568), &v47);
  if (!result)
  {
    int v6 = (int64x2_t *)((char *)this + 25944);
    IOMobileFramebufferSwapSetBackgroundColor();
    if (a2)
    {
      *(double *)&Rect v7 = (double)IOSurfaceGetWidth(a2);
      size_t Height = IOSurfaceGetHeight(a2);
      buf[0] = 0;
      buf[1] = 0;
      buf[2] = v7;
      *(double *)&buf[3] = (double)Height;
      v48[0] = 0;
      v48[1] = 0;
      uint64_t v9 = *((void *)this + 20);
      v10.i64[0] = (int)v9;
      v10.i64[1] = SHIDWORD(v9);
      float64x2_t v49 = vcvtq_f64_s64(v10);
      CA::WindowServer::IOMFBDisplay::fb_swap_set_layer((CA::WindowServer::IOMFBDisplay *)*((unsigned int *)this + 6), v4, 0, a2, buf, v48, 512, v47, 0);
    }
    else
    {
      memset(buf, 0, sizeof(buf));
      *(_OWORD *)&v48[0].top = 0u;
      float64x2_t v49 = 0u;
      kdebug_trace();
      CA::IOMobileFramebuffer::swap_set_layer(v4, 0, 0, buf, v48, 0, v11, v12, v13, v14, v15, v16, v17, v18);
    }
    if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1656))(this)) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = 3;
    }
    for (uint64_t i = 1; i != v19; ++i)
    {
      memset(buf, 0, sizeof(buf));
      *(_OWORD *)&v48[0].top = 0u;
      float64x2_t v49 = 0u;
      CA::WindowServer::IOMFBDisplay::swap_set_layer(this, (CA::Render::Update *)i, 0, buf, v48, 0, v47, 0, *(unsigned int *)v46, v46[4]);
    }
    uint64_t v21 = mach_absolute_time();
    double v22 = CATimeWithHostTime(v21);
    double v23 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 760))(this);
    unsigned int v24 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 768))(this);
    CA::WindowServer::IOMFBDisplay::update_color_matrix(this, v22 + v23 * (double)v24);
    CA::WindowServer::IOMFBDisplay::update_user_adjustment(this);
    CA::WindowServer::IOMFBDisplay::swap_brightness(this);
    int v25 = IOMobileFramebufferSwapEnd();
    if (v25)
    {
      int v26 = v25;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v27 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)&buf[0].top = 67109120;
          *(_DWORD *)&buf[0].bottouint64_t m = v26;
          _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_ERROR, "present_surface: swap_end returned error 0x%x", (uint8_t *)buf, 8u);
        }
      }
    }
    if (*((unsigned char *)this + 28167))
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      uint64_t v29 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0xC8uLL, 0x743898A5uLL);
      unint64_t v30 = v29;
      if (v29)
      {
        v29[13] = 0;
        v29[10] = 0;
        v29[9] = v29 + 10;
        v29[11] = 0;
        v29[12] = v29 + 13;
        v29[14] = 0;
        v29[15] = v29 + 19;
        v29[16] = v29 + 19;
        v29[17] = v29 + 19;
        v29[18] = 4;
      }
      *(_DWORD *)uint64_t v29 = v47;
      *((_DWORD *)v29 + 48) = IOSurfaceGetID(a2);
      *(_WORD *)((char *)v30 + 197) |= 0x400u;
      os_unfair_lock_lock((os_unfair_lock_t)this + 6485);
      v48[0] = (Rect)v50;
      v48[1] = (Rect)v50;
      *(void *)&v49.f64[0] = v50;
      *(void *)&v49.f64[1] = 4;
      memset(buf, 0, sizeof(buf));
      memset(v52, 0, sizeof(v52));
      X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::small_vector_base((uint64_t **)buf, (uint64_t)this + 25968, (uint64_t *)v52);
      if ((Rect *)((char *)this + 25968) != v48) {
        X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::move((uint64_t)this + 25968, (uint64_t)v48, (void *)this + 3250);
      }
      if (v30 + 15 != (void *)buf) {
        X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::move((uint64_t)(v30 + 15), (uint64_t)buf, v30 + 19);
      }
      if (*(void *)buf != *(void *)&buf[2]) {
        free(*(void **)buf);
      }
      if (*(void *)v48 != *(void *)&v49.f64[0]) {
        free(*(void **)v48);
      }
      unsigned int v31 = (void *)*((void *)this + 3244);
      unint64_t v32 = *((void *)this + 3245);
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v34 = ((uint64_t)v31 - v6->i64[0]) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          abort();
        }
        uint64_t v35 = v32 - v6->i64[0];
        uint64_t v36 = v35 >> 2;
        if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
          uint64_t v36 = v34 + 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        *(void *)&v52[0] = (char *)this + 25960;
        if (v37) {
          unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v37);
        }
        else {
          uint64_t v38 = 0;
        }
        unsigned int v39 = (void *)(v37 + 8 * v34);
        Rect v40 = (Rect)(v37 + 8 * v38);
        buf[3] = v40;
        *unsigned int v39 = v30;
        Rect v33 = (Rect)(v39 + 1);
        buf[2] = (Rect)(v39 + 1);
        int v41 = (void *)*((void *)this + 3244);
        uint64_t v42 = (void *)*((void *)this + 3243);
        if (v41 == v42)
        {
          int64x2_t v44 = vdupq_n_s64((unint64_t)v41);
        }
        else
        {
          do
          {
            uint64_t v43 = *--v41;
            *int v41 = 0;
            *--unsigned int v39 = v43;
          }
          while (v41 != v42);
          int64x2_t v44 = *v6;
          Rect v40 = buf[3];
          Rect v33 = buf[2];
        }
        *((void *)this + 3243) = v39;
        *((Rect *)this + 3244) = v33;
        *(int64x2_t *)&buf[1].top = v44;
        Rect v45 = (Rect)*((void *)this + 3245);
        *((Rect *)this + 3245) = v40;
        buf[3] = v45;
        buf[0] = *(Rect *)v44.i8;
        std::__split_buffer<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *unsigned int v31 = v30;
        Rect v33 = (Rect)(v31 + 1);
      }
      *((Rect *)this + 3244) = v33;
      os_unfair_lock_unlock((os_unfair_lock_t)this + 6485);
    }
    CA::WindowServer::IOMFBDisplay::collect_buffers(this, 0);
    return CA::WindowServer::Display::purge_surfaces((os_unfair_lock_s *)this, 0);
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::current_surface_is_read_only(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 25720);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25720));
  uint64_t v3 = (*((unsigned __int8 *)this + 48 * *((unsigned int *)this + 6426) + 25824) >> 4) & 1;
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t CA::WindowServer::IOMFBDisplay::current_surface(CA::WindowServer::IOMFBDisplay *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 488))(this, 1, a2, a3, a4);
}

__n128 X::small_vector_base<std::pair<unsigned long,unsigned int>>::push_back(uint64_t a1, __n128 *a2)
{
  int v5 = *(long long **)a1;
  uint64_t v4 = *(__n128 **)(a1 + 8);
  uint64_t v6 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 < v6 + 1)
  {
    unsigned int v8 = *(long long **)(a1 + 16);
    unint64_t v9 = (v7 + 1) | ((v7 + 1) >> 1) | (((v7 + 1) | ((v7 + 1) >> 1)) >> 2);
    unint64_t v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    unint64_t v11 = v10 | (v10 >> 16) | ((v10 | (v10 >> 16)) >> 32);
    if (v11 + 1 > v6 + 1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    __n128 v13 = malloc_type_malloc(16 * v12, 0x1000040D9A13B51uLL);
    __n128 v14 = v13;
    __n128 v15 = *(long long **)a1;
    __n128 v16 = *(long long **)(a1 + 8);
    if (*(long long **)a1 != v16)
    {
      __n128 v17 = v13;
      do
      {
        long long v18 = *v15++;
        *v17++ = v18;
      }
      while (v15 != v16);
    }
    if (v5 != v8) {
      free(*(void **)a1);
    }
    uint64_t v4 = (__n128 *)&v14[v6];
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 24) = v12;
  }
  __n128 result = *a2;
  *uint64_t v4 = *a2;
  *(void *)(a1 + 8) += 16;
  return result;
}

double CA::WindowServer::IOMFBDisplay::fetch_default_framebuffer(CA::WindowServer::IOMFBDisplay *this)
{
  *((unsigned char *)this + 28152) = 1;
  IOMobileFramebufferGetLayerDefaultSurface();
  return result;
}

xpc_object_t ___ZN2CA12WindowServer12IOMFBDisplay32send_refmode_residency_telemetryEv_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v2, "is_in_reference_mode_BOOL", *(unsigned char *)(a1 + 32));
  return v2;
}

void *CA::WindowServer::IOMFBDisplay::work_interval(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1)
  {
    xpc_object_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 96) + 400);
    return (void *)v2();
  }
  else
  {
    int v5 = (void *)*((void *)this + 3192);
    if (!v5)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      int v5 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x30uLL, 0x743898A5uLL);
      if (v5 && work_interval_create() != -1) {
        v5[5] = work_interval_instance_alloc();
      }
      *((void *)this + 3192) = v5;
    }
    return v5;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_flipbook_suppressed(uint64_t this, char a2)
{
  *(unsigned char *)(this + 28183) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_flipbook_enabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 28182) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_force_fixed_display_links(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  *((_DWORD *)this + 6799) = a2;
  if (*((_DWORD *)this + 6799)) {
    CA::WindowServer::IOMFBDisplay::update_server_source_frame_interval_range((os_unfair_lock_s *)this, (const CAFrameIntervalRange *)((char *)this + 27424), *((unsigned __int8 *)this + 28214), 1);
  }

  return CA::WindowServer::Display::post_display_changed((uint64_t)this);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_dmrr_enabled(uint64_t this, int a2)
{
  if (a2) {
    __assert_rtn("set_dmrr_enabled", "windowserver-iomfb-display.cpp", 10438, "!enabled || CADeviceDMRRCapable ()");
  }
  *(unsigned char *)(this + 28217) = *(unsigned char *)(this + 28216);
  *(unsigned char *)(this + 28216) = 0;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::will_enable(uint64_t this)
{
  if (!*(unsigned char *)(this + 28138) && (*(_WORD *)(this + 656) & 0x1C00) != 0x1000) {
    *(unsigned char *)(this + 28133) = 1;
  }
  return this;
}

void CA::WindowServer::IOMFBDisplay::will_unblank(os_unfair_lock_s *this)
{
  xpc_object_t v2 = this + 179;
  os_unfair_lock_lock(this + 179);
  if (!*(unsigned char *)(*(void *)&this[182]._os_unfair_lock_opaque + 2))
  {
    (*(void (**)(os_unfair_lock_s *, uint64_t, void, void))(*(void *)&this->_os_unfair_lock_opaque
                                                                        + 2152))(this, 1, 0, 0);
    uint64_t v3 = mach_absolute_time();
    *(double *)&CATailspinMinimumTimestamp = CATimeWithHostTime(v3) + 10.0;
    if (BYTE2(this[7034]._os_unfair_lock_opaque) || (this[164]._os_unfair_lock_opaque & 0x1C00) == 0x1000)
    {
      BYTE2(this[7033]._os_unfair_lock_opaque) = 1;
      uint64_t v4 = mach_absolute_time();
      *(double *)&this[6628]._uint64_t os_unfair_lock_opaque = CATimeWithHostTime(v4) + 1.0;
    }
  }

  os_unfair_lock_unlock(v2);
}

uint64_t CA::WindowServer::IOMFBDisplay::max_layer_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1 = (unsigned int *)((char *)this + 25544);
  if (!*((_DWORD *)this + 6386))
  {
    CFNumberRef v2 = (const __CFNumber *)IOMobileFramebufferCopyProperty();
    if (v2)
    {
      CFNumberRef v3 = v2;
      CFNumberGetValue(v2, kCFNumberIntType, v1);
      CFRelease(v3);
    }
  }
  return *v1;
}

CA::WindowServer::Display *CA::WindowServer::IOMFBDisplay::IOMFBDisplay(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  int v2 = v1;
  __int8 v4 = v3;
  uint64_t v6 = v5;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (char *)v5 + 26904;
  unsigned int v8 = (int32x4_t *)((char *)v5 + 25544);
  unint64_t v9 = (_DWORD *)((char *)v5 + 745);
  unint64_t v11 = CA::WindowServer::Display::Display(v5, v10);
  *(void *)unint64_t v11 = &unk_1ED023340;
  *((void *)v11 + 3192) = 0;
  v8->i32[0] = 0;
  v8[1].i32[0] = 0;
  *((void *)v11 + 3196) = 0;
  v8[2].i8[0] = 0;
  v8[2].i8[8] = 0;
  *((void *)v11 + 3199) = 0;
  *(void *)&long long v12 = -1;
  *((void *)&v12 + 1) = -1;
  *((_OWORD *)v11 + 160CASetDebugMessage("", 0) = v12;
  *((_OWORD *)v11 + 1601) = v12;
  *((void *)v11 + 3206) = 0;
  v8[7].i32[0] = 0;
  *(_OWORD *)((char *)v11 + 25784) = 0u;
  *(_OWORD *)((char *)v11 + 2580CASetDebugMessage("", 0) = 0u;
  *(_OWORD *)((char *)v11 + 25816) = 0u;
  *(_OWORD *)((char *)v11 + 25832) = 0u;
  *(_OWORD *)((char *)v11 + 25848) = 0u;
  *(_OWORD *)((char *)v11 + 25864) = 0u;
  *(_OWORD *)((char *)v11 + 2588CASetDebugMessage("", 0) = 0u;
  *(_OWORD *)((char *)v11 + 25896) = 0u;
  *(_OWORD *)((char *)v11 + 25912) = 0u;
  *((_DWORD *)v11 + 6491) = 0;
  *(void *)((char *)v11 + 25956) = 0;
  *(_OWORD *)((char *)v11 + 2594CASetDebugMessage("", 0) = 0u;
  *((void *)v11 + 3246) = (char *)v11 + 26000;
  *((void *)v11 + 3247) = (char *)v11 + 26000;
  *((void *)v11 + 3248) = (char *)v11 + 26000;
  *((void *)v11 + 3249) = 4;
  v8[31].i32[2] = 0;
  v8[36].i16[0] = 10;
  v8[39].i32[1] = 1065353216;
  _Q1 = vdupq_n_s32(0x7FC00000u);
  *(void *)((char *)v11 + 2618CASetDebugMessage("", 0) = _Q1.i64[0];
  v8[41] = _Q1;
  v8[42] = _Q1;
  v8[43] = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)v11 + 3281) = _Q1.i64[0];
  *((void *)v11 + 3284) = 0;
  *((_OWORD *)v11 + 1641) = 0u;
  *((unsigned char *)v11 + 26316) = 0;
  *(_OWORD *)((char *)v11 + 26284) = 0u;
  *(_OWORD *)((char *)v11 + 2630CASetDebugMessage("", 0) = 0u;
  v8[48].i32[2] = 1074580685;
  *(void *)((char *)v11 + 26337) = 0;
  *(_OWORD *)((char *)v11 + 26324) = 0u;
  *(_OWORD *)((char *)v11 + 26376) = 0u;
  *(void *)((char *)v11 + 26362) = 0;
  *(_OWORD *)((char *)v11 + 26348) = 0u;
  *((void *)v11 + 3299) = 0x3FF0000000000000;
  *((void *)v11 + 330CASetDebugMessage("", 0) = 0;
  v8[54].i32[0] = 0;
  *((void *)v11 + 3302) = 0;
  v8[55].i8[0] = v4;
  v8[55].i8[2] = v4;
  *(_OWORD *)((char *)v11 + 2644CASetDebugMessage("", 0) = 0u;
  *(_OWORD *)((char *)v11 + 26456) = 0u;
  v8[58].i32[0] = 1065353216;
  v8[58].i32[2] = 0;
  *(_OWORD *)((char *)v11 + 26504) = 0u;
  *(_OWORD *)((char *)v11 + 2652CASetDebugMessage("", 0) = 0u;
  *((void *)v11 + 333CASetDebugMessage("", 0) = _Q1.i64[0];
  *((_OWORD *)v11 + 167CASetDebugMessage("", 0) = 0u;
  *((_DWORD *)v11 + 6692) = 1065353216;
  *((_OWORD *)v11 + 1672) = unk_1849A8268;
  *((_OWORD *)v11 + 1671) = xmmword_1849A8258;
  *((_DWORD *)v11 + 6701) = 1065353216;
  *(_OWORD *)((char *)v11 + 26772) = xmmword_1849A8258;
  *(_OWORD *)((char *)v11 + 26788) = unk_1849A8268;
  *((_DWORD *)v11 + 671CASetDebugMessage("", 0) = 1065353216;
  *(_OWORD *)((char *)v11 + 26808) = xmmword_1849A8258;
  *(_OWORD *)((char *)v11 + 26824) = unk_1849A8268;
  *(void *)((char *)v11 + 26844) = _Q1.i64[0];
  v8[81].i32[3] = 1065353216;
  v8[82].i8[0] = 0;
  *((_DWORD *)v11 + 6723) = 1065353216;
  *(_OWORD *)((char *)v11 + 2686CASetDebugMessage("", 0) = xmmword_1849A8258;
  *(_OWORD *)((char *)v11 + 26876) = unk_1849A8268;
  v8[84].i32[2] = 1065353216;
  v8[84].i8[12] = 1;
  *(_OWORD *)unint64_t v7 = xmmword_184997DC0;
  *((_OWORD *)v7 + 1) = xmmword_184997DD0;
  *((_OWORD *)v7 + 2) = xmmword_184997DE0;
  *((_OWORD *)v7 + 3) = xmmword_184997DF0;
  *((_DWORD *)v7 + 16) = 1065353216;
  v7[68] = 1;
  v7[120] = 0;
  *((unsigned char *)v11 + 27048) = 0;
  *(_OWORD *)((char *)v11 + 27032) = 0u;
  *(_WORD *)(v7 + 145) = 257;
  *((void *)v11 + 3387) = 0;
  *(_OWORD *)((char *)v11 + 27067) = 0u;
  *(_OWORD *)((char *)v11 + 27083) = 0u;
  *(_OWORD *)((char *)v11 + 27051) = 0u;
  *((void *)v11 + 3388) = -1;
  *((_OWORD *)v11 + 1698) = 0u;
  *((_OWORD *)v11 + 1697) = 0u;
  *(_OWORD *)((char *)v11 + 27112) = 0u;
  *(_OWORD *)((char *)v11 + 27128) = 0u;
  *((_DWORD *)v7 + 7CASetDebugMessage("", 0) = 1065353216;
  *(_OWORD *)((char *)v11 + 27192) = 0u;
  *((_DWORD *)v11 + 6812) = 0;
  *((_OWORD *)v11 + 1702) = 0u;
  *((_DWORD *)v11 + 6834) = 0;
  *(_OWORD *)((char *)v11 + 27304) = 0u;
  *(_OWORD *)((char *)v11 + 2732CASetDebugMessage("", 0) = 0u;
  *(_OWORD *)((char *)v11 + 27272) = 0u;
  *(_OWORD *)((char *)v11 + 27288) = 0u;
  *(_OWORD *)((char *)v11 + 27256) = 0u;
  *(void *)((char *)v11 + 2734CASetDebugMessage("", 0) = 0xFFFFFFFFLL;
  *((_DWORD *)v7 + 136) = 0;
  *((_OWORD *)v11 + 1719) = 0u;
  *((_OWORD *)v11 + 1718) = 0u;
  *(_OWORD *)((char *)v11 + 27352) = 0u;
  *(_OWORD *)((char *)v11 + 27368) = 0u;
  *((_DWORD *)v11 + 6855) = 0;
  *(void *)((char *)v11 + 27412) = 0;
  *(_OWORD *)((char *)v11 + 27396) = 0u;
  *((_DWORD *)v11 + 687CASetDebugMessage("", 0) = 0;
  *((void *)v11 + 3434) = 0;
  *((_OWORD *)v11 + 1716) = 0u;
  *((_DWORD *)v7 + 154) = 1065353216;
  *((void *)v11 + 3442) = 0;
  *((_DWORD *)v7 + 16CASetDebugMessage("", 0) = 0;
  *((_DWORD *)v7 + 194) = 0;
  *((void *)v11 + 3461) = (char *)v11 + 27720;
  *((void *)v11 + 3462) = (char *)v11 + 27720;
  *((void *)v11 + 3463) = (char *)v11 + 27720;
  *((void *)v11 + 3464) = 4;
  *((_DWORD *)v7 + 232) = 0;
  *(_OWORD *)((char *)v11 + 2781CASetDebugMessage("", 0) = 0u;
  *(_OWORD *)((char *)v11 + 27784) = 0u;
  *(_OWORD *)((char *)v11 + 2780CASetDebugMessage("", 0) = 0u;
  *((void *)v11 + 348CASetDebugMessage("", 0) = (char *)v11 + 27872;
  *((void *)v11 + 3481) = (char *)v11 + 27872;
  *((void *)v11 + 3482) = (char *)v11 + 27872;
  *((void *)v11 + 3483) = 4;
  *((_DWORD *)v7 + 266) = 0;
  *((_DWORD *)v7 + 268) = 0;
  *((_OWORD *)v11 + 175CASetDebugMessage("", 0) = 0u;
  *((_OWORD *)v11 + 1749) = 0u;
  *((_DWORD *)v7 + 278) = 1065353216;
  *((void *)v11 + 3503) = (char *)v11 + 28056;
  *((void *)v11 + 3504) = (char *)v11 + 28056;
  *((void *)v11 + 3505) = (char *)v11 + 28056;
  *((void *)v11 + 3506) = 4;
  v7[1228] = 0;
  v7[1230] = 0;
  v7[1234] = (v2 - 1) < 2;
  v7[1242] = 1;
  v7[1245] = 1;
  *(_WORD *)((char *)v11 + 28151) = 0;
  v7[1249] = 0;
  v7[1250] = v2 == 2;
  *((_WORD *)v7 + 631) = 0;
  *(_WORD *)((char *)v11 + 28163) = 0;
  *(void *)((char *)v11 + 28155) = 0;
  v7[1264] = 1;
  *(_WORD *)((char *)v11 + 28179) = 0;
  v7[1278] = 0;
  v7[1281] = 0;
  v7[1285] = 0;
  *(_WORD *)((char *)v11 + 28191) = 0;
  v7[1289] = 0;
  *((_WORD *)v7 + 647) = 0;
  *(_WORD *)((char *)v11 + 28221) = 0;
  *((unsigned char *)v11 + 28173) = 0;
  *(_DWORD *)((char *)v11 + 28169) = 0;
  x_thread_init_mutex((pthread_mutex_t *)((char *)v11 + 25720), 1);
  *v9 |= 0x1040u;
  if ((CA::WindowServer::IOMFBDisplay::IOMFBDisplay(__CFString const*,unsigned int,unsigned int,IOMFBDisplayType)::initialized & 1) == 0)
  {
    if (CA::WindowServer::Display::benchmark_mode(0, v18)) {
      CA::WindowServer::page_flipping_disabled = 1;
    }
    uint64_t v19 = getenv("CA_CLONE_OVERSCAN_AMOUNT");
    if (v19)
    {
      *(float *)&int v20 = atof(v19);
      CA::WindowServer::clone_overscan_amounts_double y = v20;
      CA::WindowServer::clone_overscan_amounts_double x = v20;
    }
    CA::WindowServer::IOMFBDisplay::IOMFBDisplay(__CFString const*,unsigned int,unsigned int,IOMFBDisplayType)::initialized = 1;
  }
  uint64_t v21 = (unsigned char *)*((void *)v6 + 3425);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v6 + 3427) - (void)v21) >> 3) <= 0x3F)
  {
    double v22 = (unsigned char *)*((void *)v6 + 3426);
    double v23 = (char *)operator new(0x600uLL);
    unsigned int v24 = &v23[24 * ((v22 - v21) / 24)];
    int v25 = v24;
    if (v22 != v21)
    {
      int v26 = &v23[24 * ((v22 - v21) / 24)];
      do
      {
        long long v27 = *(_OWORD *)(v22 - 24);
        int v25 = v26 - 24;
        *((void *)v26 - 1) = *((void *)v22 - 1);
        *(_OWORD *)(v26 - 24) = v27;
        v22 -= 24;
        v26 -= 24;
      }
      while (v22 != v21);
    }
    *((void *)v6 + 3425) = v25;
    *((void *)v6 + 3426) = v24;
    *((void *)v6 + 3427) = v23 + 1536;
    if (v21) {
      operator delete(v21);
    }
  }
  CFTypeRef cf = 0;
  if (v8[1].i32[0]) {
    IOMobileFramebufferOpen();
  }
  else {
    IOMobileFramebufferOpenByName();
  }
  return v6;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_aot_service_property(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  __int8 v3 = (unsigned int *)((char *)this + 25560);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    __int8 v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = a2;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "set aot service property: %d", buf, 8u);
    }
  }
  *((unsigned char *)v3 + 2629) = a2;
  uint64_t result = *v3;
  if (result)
  {
    uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    return IORegistryEntrySetCFProperty(result, @"AOTEnable", *v6);
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_aot_power_saving_mode_enabled(uint64_t this, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this + 28190;
  if (*(unsigned char *)(this + 28190))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      __int8 v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "set aot power saving mode enabled: %d", buf, 8u);
      }
    }
    *(unsigned char *)(v2 + 1) = a2;
    *(void *)long long buf = a2;
    return IOMobileFramebufferSetParameter();
  }
  return this;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplayC2EPK10__CFStringjj16IOMFBDisplayType_block_invoke(uint64_t a1, int token)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = 0;
  uint64_t result = notify_get_state(token, v4);
  if (!result) {
    *(unsigned char *)(v2 + 2822CASetDebugMessage("", 0) = v4[0] != 0;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::unregister_for_disallowed_layers_notification(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, unsigned char *a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a3 == 0xFFFF || *(_DWORD *)a3 == a2[6]._os_unfair_lock_opaque)
    && (*((_DWORD *)a3 + 1) + 1) >= 2)
  {
    os_unfair_lock_lock(a2 + 6994);
    uint64_t v6 = *(uint64_t **)&a2[7000]._os_unfair_lock_opaque;
    if (v6)
    {
      unint64_t v7 = (CA::Render::Server *)*((unsigned int *)a3 + 1);
      while (*((_DWORD *)v6 + 4) != v7)
      {
        uint64_t v6 = (uint64_t *)*v6;
        if (!v6) {
          goto LABEL_14;
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v8 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          uint32_t os_unfair_lock_opaque = a2[6]._os_unfair_lock_opaque;
          *(_DWORD *)long long buf = 67109376;
          uint32_t v11 = os_unfair_lock_opaque;
          __int16 v12 = 1024;
          int v13 = (int)v7;
          _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "Destroying disallowed layers notification port for display=%u port=%u", buf, 0xEu);
        }
      }
      CA::Render::Server::remove_dead_name_watch(v7);
      mach_port_deallocate(*MEMORY[0x1E4F14960], (mach_port_name_t)v7);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(&a2[6996]._os_unfair_lock_opaque, v7);
      a3[8] = 1;
    }
LABEL_14:
    os_unfair_lock_unlock(a2 + 6994);
  }
}

void CA::WindowServer::IOMFBDisplay::register_for_disallowed_layers_notification(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, unsigned int *a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a3 == a2[6]._os_unfair_lock_opaque && a3[1] + 1 >= 2)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v6 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        uint32_t os_unfair_lock_opaque = a2[6]._os_unfair_lock_opaque;
        unsigned int v8 = a3[1];
        *(_DWORD *)long long buf = 67109376;
        uint32_t v14 = os_unfair_lock_opaque;
        __int16 v15 = 1024;
        unsigned int v16 = v8;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "Register for disallowed layers notifications for display=%u client_port=%u", buf, 0xEu);
      }
    }
    uint64_t v9 = a2 + 6994;
    os_unfair_lock_lock(a2 + 6994);
    CFStringRef v10 = a2 + 6996;
    uint32_t v11 = (CA::Render::Server *)a3[1];
    if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v10, a3[1]))
    {
      *(_DWORD *)long long buf = 0;
      CA::Render::Server::add_dead_name_watch(v11, (mach_port_t *)buf, (unsigned int *)CA::WindowServer::handle_disallowed_layers_notification_dead_name, v12);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v10, a3[1], a3[1]);
    }
    *((unsigned char *)a3 + 8) = 1;
    os_unfair_lock_unlock(v9);
  }
}

uint64_t CA::WindowServer::handle_disallowed_layers_notification_dead_name(CA::WindowServer *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[1] = this;
  _OWORD v2[2] = 0;
  v2[0] = 0xFFFF;
  CA::Render::post_notification(0x25u, 0, (uint64_t)v2, 0);
  return 1;
}

void CA::WindowServer::IOMFBDisplay::copy_power_assertion_info(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, void *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a3 == a2[6]._os_unfair_lock_opaque)
  {
    locCFIndex k = a2 + 6958;
    os_unfair_lock_lock(a2 + 6958);
    uint64_t v6 = *(int **)&a2[6960]._os_unfair_lock_opaque;
    for (uint64_t i = *(int **)&a2[6962]._os_unfair_lock_opaque; v6 != i; v6 += 6)
    {
      memset(buffer, 0, sizeof(buffer));
      proc_name(*v6, buffer, 0x20u);
      uint64_t v8 = a3[1];
      int v9 = v6[2];
      CFStringRef v10 = "Unblank";
      switch(v9)
      {
        case 1:
          break;
        case 2:
          CFStringRef v10 = "Audio";
          break;
        case 3:
          CFStringRef v10 = "SecureIndicator";
          break;
        case 4:
          CFStringRef v10 = "BIM";
          break;
        default:
          uint32_t v11 = "Debug";
          if (v9 != 0xFFFF) {
            uint32_t v11 = "Unknown";
          }
          if (v9 == 65534) {
            CFStringRef v10 = "BLSAssertion";
          }
          else {
            CFStringRef v10 = v11;
          }
          break;
      }
      uint64_t v12 = mach_absolute_time();
      CATimeWithHostTime(v12);
      x_stream_printf(v8, "\t\t %sPowerAssertion from %s[%d] since %.0f seconds ago\n", v13, v14, v15, v16, v17, v18, (uint64_t)v10);
    }
    os_unfair_lock_unlock(lock);
  }
}

void CA::WindowServer::IOMFBDisplay::destroy_power_assertion(CA::WindowServer::IOMFBDisplay *this, os_unfair_lock_s *a2, unsigned int *a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((*a3 == 0xFFFF || *a3 == a2[6]._os_unfair_lock_opaque) && a3[1] + 1 >= 2)
  {
    os_unfair_lock_lock(a2 + 6958);
    uint64_t v6 = *(unsigned int **)&a2[6960]._os_unfair_lock_opaque;
    unint64_t v7 = *(unsigned int **)&a2[6962]._os_unfair_lock_opaque;
    if (v6 == v7)
    {
LABEL_7:
      if (*a3 != 0xFFFF)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v8 = x_log_category_display_state;
          if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_ERROR))
          {
            uint32_t os_unfair_lock_opaque = a2[6]._os_unfair_lock_opaque;
            unsigned int v10 = a3[1];
            *(_DWORD *)long long buf = 67109376;
            uint32_t v20 = os_unfair_lock_opaque;
            __int16 v21 = 1024;
            unsigned int v22 = v10;
            _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_ERROR, "No power assertion found on display %u for port %u", buf, 0xEu);
          }
        }
      }
    }
    else
    {
      while (v6[1] != a3[1])
      {
        v6 += 6;
        if (v6 == v7) {
          goto LABEL_7;
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint32_t v11 = x_log_category_display_state;
        if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
        {
          uint32_t v12 = a2[6]._os_unfair_lock_opaque;
          unsigned int v13 = *v6;
          unsigned int v14 = v6[1];
          unsigned int v15 = v6[2];
          *(_DWORD *)long long buf = 67109888;
          uint32_t v20 = v12;
          __int16 v21 = 1024;
          unsigned int v22 = v13;
          __int16 v23 = 1024;
          unsigned int v24 = v14;
          __int16 v25 = 1024;
          unsigned int v26 = v15;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "Destroying power assertion for display=%u pid=%i port=%u reason=%i", buf, 0x1Au);
        }
      }
      uint64_t v16 = *(void *)&a2[6962]._os_unfair_lock_opaque;
      long long v17 = *(_OWORD *)(v16 - 24);
      *((void *)v6 + 2) = *(void *)(v16 - 8);
      *(_OWORD *)uint64_t v6 = v17;
      unint64_t v18 = *(void *)&a2[6962]._os_unfair_lock_opaque;
      if (v18 <= *(void *)&a2[6960]._os_unfair_lock_opaque) {
        __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
      }
      *(void *)&a2[6962]._uint32_t os_unfair_lock_opaque = v18 - 24;
      CA::Render::Server::remove_dead_name_watch((CA::Render::Server *)a3[1]);
      mach_port_deallocate(*MEMORY[0x1E4F14960], a3[1]);
      if (*(void *)&a2[6960]._os_unfair_lock_opaque == *(void *)&a2[6962]._os_unfair_lock_opaque)
      {
        a2[6992]._uint32_t os_unfair_lock_opaque = 0;
        CA::WindowServer::IOMFBDisplay::power_assertion_changed(a2, 0);
      }
      *((unsigned char *)a3 + 8) = 1;
    }
    os_unfair_lock_unlock(a2 + 6958);
  }
}

void CA::WindowServer::IOMFBDisplay::power_assertion_changed(os_unfair_lock_s *this, int a2)
{
  __int8 v4 = this + 179;
  os_unfair_lock_lock(this + 179);
  CA::WindowServer::IOMFBDisplay::update_power_state_locked((CA::WindowServer::IOMFBDisplay *)this, a2, 0);

  os_unfair_lock_unlock(v4);
}

void CA::WindowServer::IOMFBDisplay::create_power_assertion(CA::WindowServer::IOMFBDisplay *this, CA::Render::Object *a2, char *a3, void *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a3 == *((_DWORD *)a2 + 6) && (*((_DWORD *)a3 + 2) + 1) >= 2)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v6 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *((_DWORD *)a2 + 6);
        int v8 = *((_DWORD *)a3 + 1);
        int v9 = *((_DWORD *)a3 + 2);
        int v10 = *((_DWORD *)a3 + 3);
        *(_DWORD *)long long buf = 67109888;
        int v35 = v7;
        __int16 v36 = 1024;
        int v37 = v8;
        __int16 v38 = 1024;
        int v39 = v9;
        __int16 v40 = 1024;
        int v41 = v10;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "Creating power assertion for display=%u pid=%i port=%u reason=%i", buf, 0x1Au);
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)a2 + 6958);
    uint64_t v11 = *(void *)(a3 + 4);
    uint64_t v12 = *((unsigned int *)a3 + 3);
    uint64_t v13 = mach_absolute_time();
    unint64_t v14 = (unint64_t)CATimeWithHostTime(v13);
    *(_DWORD *)long long buf = 0;
    CA::Render::Server::add_dead_name_watch((CA::Render::Server *)*((unsigned int *)a3 + 2), (mach_port_t *)buf, (unsigned int *)CA::WindowServer::handle_power_assertion_dead_name, v15);
    uint64_t v16 = (char *)*((void *)a2 + 3481);
    uint64_t v17 = *((void *)a2 + 3480);
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v16[-v17] >> 3);
    unint64_t v19 = *((void *)a2 + 3483);
    if (v19 < v18 + 1)
    {
      uint64_t v33 = *((void *)a2 + 3482);
      unint64_t v20 = (v19 + 1) | ((v19 + 1) >> 1) | (((v19 + 1) | ((v19 + 1) >> 1)) >> 2);
      unint64_t v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
      unint64_t v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
      if (v22 + 1 > v18 + 1) {
        unint64_t v23 = v22 + 1;
      }
      else {
        unint64_t v23 = v18 + 1;
      }
      unsigned int v24 = (char *)malloc_type_malloc(24 * v23, 0x10000401E56706BuLL);
      __int16 v25 = v24;
      unsigned int v26 = (long long *)*((void *)a2 + 3480);
      uint64_t v27 = (long long *)*((void *)a2 + 3481);
      if (v26 != v27)
      {
        long long v28 = v24;
        do
        {
          long long v29 = *v26;
          *((void *)v28 + 2) = *((void *)v26 + 2);
          *(_OWORD *)long long v28 = v29;
          v28 += 24;
          unsigned int v26 = (long long *)((char *)v26 + 24);
        }
        while (v26 != v27);
      }
      if (v17 != v33) {
        free(*((void **)a2 + 3480));
      }
      *((void *)a2 + 348CASetDebugMessage("", 0) = v25;
      uint64_t v16 = &v25[24 * v18];
      *((void *)a2 + 3481) = v16;
      *((void *)a2 + 3483) = v23;
    }
    *(void *)uint64_t v16 = v11;
    *((void *)v16 + 1) = v12;
    *((void *)v16 + 2) = v14;
    uint64_t v30 = *((void *)a2 + 3481) + 24;
    *((void *)a2 + 3481) = v30;
    if (v30 - *((void *)a2 + 3480) == 24 || a3[16])
    {
      *((_DWORD *)a2 + 6992) = 1;
      CA::WindowServer::IOMFBDisplay::power_assertion_changed((os_unfair_lock_s *)a2, a3[16]);
    }
    if (v12 == 1)
    {
      uint64_t v31 = mach_absolute_time();
      *(double *)&CATailspinMinimumTimestamp = CATimeWithHostTime(v31) + 10.0;
      if (*((unsigned char *)a2 + 28138) || (*((_WORD *)a2 + 328) & 0x1C00) == 0x1000)
      {
        *((unsigned char *)a2 + 28134) = 1;
        uint64_t v32 = mach_absolute_time();
        *((double *)a2 + 3314) = CATimeWithHostTime(v32) + 1.0;
      }
    }
    a3[17] = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)a2 + 6958);
  }
}

uint64_t CA::WindowServer::handle_power_assertion_dead_name(CA::WindowServer *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[1] = this;
  _OWORD v2[2] = 0;
  v2[0] = 0xFFFF;
  CA::Render::post_notification(0x44u, 0, (uint64_t)v2, 0);
  return 1;
}

void CA::WindowServer::IOMFBDisplay::find_fastest_display(CA::WindowServer::IOMFBDisplay *this, CA::Render::Object *a2, pthread_mutex_t *a3, void *a4)
{
  if (*(unsigned __int8 *)(*((void *)a2 + 91) + 2) | *(unsigned __int8 *)(*((void *)a2 + 91) + 3))
  {
    float v6 = 1.0 / (*(double (**)(CA::Render::Object *))(*(void *)a2 + 744))(a2);
    unsigned int v7 = vcvtas_u32_f32(v6);
    pthread_mutex_lock(a3);
    unsigned int sig_high = HIDWORD(a3[1].__sig);
    if (sig_high <= v7 && (sig_high != v7 || *((unsigned char *)a2 + 28138) || (*((_WORD *)a2 + 328) & 0x1C00) == 0x1000))
    {
      LODWORD(a3[1].__sig) = *((_DWORD *)a2 + 6);
      HIDWORD(a3[1].__sig) = v7;
    }
    pthread_mutex_unlock(a3);
  }
}

void CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(CA::WindowServer::IOMFBDisplay *this)
{
  v57[1] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 25560;
  *(void *)this = &unk_1ED023340;
  CA::WindowServer::IOMFBDisplay::release_everything(this);
  if (*((void *)this + 3196))
  {
    if (v2[2578])
    {
      IOMobileFramebufferSetDisplayDevice();
      CA::WindowServer::IOMFBDisplay::set_all_layers_to_null((uint64_t)this, 0);
    }
    IOMobileFramebufferDisableVSyncNotifications();
    IOMobileFramebufferDisableHotPlugDetectNotifications();
  }
  uint64_t v3 = *((void *)this + 3204);
  if (v3)
  {
    _Block_release(*(const void **)(v3 + 16));
    __int8 v4 = *(CA::OGL::DebugRenderer **)(v3 + 8);
    if (v4)
    {
      CA::OGL::DebugRenderer::~DebugRenderer(v4);
      MEMORY[0x185323DC0]();
    }
    v57[0] = (void **)(v3 + 136);
    std::vector<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::__destroy_vector::operator()[abi:nn180100](v57);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, (void *)v3);
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 6512);
  float v6 = (atomic_uint *)*((void *)this + 3257);
  if (v6)
  {
    *((void *)this + 3258) = 0;
    if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6512);
  unsigned int v7 = (void *)*((void *)this + 3192);
  if (v7)
  {
    if (v7[5]) {
      work_interval_instance_free();
    }
    if (v7[4]) {
      work_interval_destroy();
    }
    int v8 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v8, v7);
    *((void *)this + 3192) = 0;
  }
  CA::Render::remove_observer(0x3Bu, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::find_fastest_display, (uint64_t)this);
  CA::Render::remove_observer(0x43u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::create_power_assertion, (uint64_t)this);
  CA::Render::remove_observer(0x44u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::destroy_power_assertion, (uint64_t)this);
  CA::Render::remove_observer(0x45u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::copy_power_assertion_info, (uint64_t)this);
  CA::Render::remove_observer(0x24u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::register_for_disallowed_layers_notification, (uint64_t)this);
  CA::Render::remove_observer(0x25u, 0, (uint64_t)CA::WindowServer::IOMFBDisplay::unregister_for_disallowed_layers_notification, (uint64_t)this);
  int v9 = (uint64_t *)*((void *)this + 3500);
  if (v9)
  {
    int v10 = (ipc_space_t *)MEMORY[0x1E4F14960];
    do
    {
      mach_port_name_t v11 = *((_DWORD *)v9 + 4);
      CA::Render::Server::remove_dead_name_watch((CA::Render::Server *)v11);
      mach_port_deallocate(*v10, v11);
      int v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((void *)this + 3498);
  notify_cancel(*((_DWORD *)v2 + 567));
  if (*(_DWORD *)v2) {
    IOObjectRelease(*(_DWORD *)v2);
  }
  uint64_t v12 = (void *)*((void *)this + 3382);
  if (v12) {
    free(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 3383);
  if (v13) {
    free(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 3384);
  if (v14) {
    free(v14);
  }
  unsigned int v15 = (const void *)*((void *)this + 3385);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 3386);
  if (v16) {
    free(v16);
  }
  free(*((void **)this + 3206));
  uint64_t v17 = (const void *)*((void *)this + 3407);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *((void *)this + 3420);
  if (v18)
  {
    if (*(_DWORD *)v18 != 5
      || !*(void *)(v18 + 12)
      || (MEMORY[0x185323DC0](*(void *)(v18 + 12), 0x1000C4052888210), *((void *)this + 3420)))
    {
      MEMORY[0x185323DC0]();
    }
  }
  uint64_t v19 = *((void *)this + 3421);
  if (v19)
  {
    if (*(_DWORD *)v19 != 5
      || !*(void *)(v19 + 12)
      || (MEMORY[0x185323DC0](*(void *)(v19 + 12), 0x1000C4052888210), *((void *)this + 3421)))
    {
      MEMORY[0x185323DC0]();
    }
  }
  if (*((void *)this + 3422))
  {
    for (uint64_t i = 0; i != 108; i += 36)
    {
      uint64_t v21 = *((void *)this + 3422);
      if (*(_DWORD *)(v21 + i) == 5)
      {
        uint64_t v22 = *(void *)(v21 + i + 12);
        if (v22) {
          MEMORY[0x185323DC0](v22, 0x1000C4052888210);
        }
      }
    }
    uint64_t v23 = *((void *)this + 3422);
    if (v23) {
      MEMORY[0x185323DA0](v23, 0x10C2C80BCA6C08DLL);
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 25720));
  unsigned int v24 = (const void *)*((void *)this + 3318);
  if (v24) {
    _Block_release(v24);
  }
  free(*((void **)this + 3372));
  __int16 v25 = (void *)*((void *)this + 3430);
  if (v25) {

  }
  unsigned int v26 = (void **)*((void *)this + 3408);
  if (v26)
  {
    free(*v26);
    free(v26[1]);
    MEMORY[0x185323DC0](v26, 0x1080C40397D7476);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CA::WindowServer::IOMFBDisplay::_displays_lock);
  uint64_t v27 = (void **)CA::WindowServer::IOMFBDisplay::_displays;
  if (CA::WindowServer::IOMFBDisplay::_displays)
  {
    long long v29 = *(CA::WindowServer::IOMFBDisplay ***)CA::WindowServer::IOMFBDisplay::_displays;
    long long v28 = *(CA::WindowServer::IOMFBDisplay ***)(CA::WindowServer::IOMFBDisplay::_displays + 8);
    uint64_t v30 = *(CA::WindowServer::IOMFBDisplay ***)CA::WindowServer::IOMFBDisplay::_displays;
    if (*(CA::WindowServer::IOMFBDisplay ***)CA::WindowServer::IOMFBDisplay::_displays != v28)
    {
      while (*v30 != this)
      {
        if (++v30 == v28)
        {
          uint64_t v30 = *(CA::WindowServer::IOMFBDisplay ***)(CA::WindowServer::IOMFBDisplay::_displays + 8);
          break;
        }
      }
    }
    if (v30 != v28)
    {
      size_t v31 = (char *)v28 - (char *)(v30 + 1);
      if (v28 != v30 + 1)
      {
        memmove(v30, v30 + 1, v31);
        long long v29 = (CA::WindowServer::IOMFBDisplay **)*v27;
      }
      long long v28 = (CA::WindowServer::IOMFBDisplay **)((char *)v30 + v31);
      v27[1] = (char *)v30 + v31;
    }
    if (v29 == v28)
    {
      if (v28)
      {
        v27[1] = v28;
        operator delete(v28);
      }
      MEMORY[0x185323DC0](v27, 0x80C40D6874129);
      CA::WindowServer::IOMFBDisplay::_displays = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::WindowServer::IOMFBDisplay::_displays_lock);
  uint64_t v32 = (void *)*((void *)this + 3503);
  if (v32 != *((void **)this + 3505)) {
    free(v32);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 27984);
  uint64_t v33 = (void *)*((void *)this + 3480);
  if (v33 != *((void **)this + 3482)) {
    free(v33);
  }
  uint64_t v34 = (void *)*((void *)this + 3461);
  if (v34 != *((void **)this + 3463)) {
    free(v34);
  }
  int v35 = (void *)*((void *)this + 3438);
  if (v35)
  {
    do
    {
      __int16 v36 = (void *)*v35;
      operator delete(v35);
      int v35 = v36;
    }
    while (v36);
  }
  int v37 = (void *)*((void *)this + 3436);
  *((void *)this + 3436) = 0;
  if (v37) {
    operator delete(v37);
  }
  __int16 v38 = (void *)*((void *)this + 3432);
  if (v38)
  {
    *((void *)this + 3433) = v38;
    operator delete(v38);
  }
  int v39 = (void *)*((void *)this + 3425);
  if (v39)
  {
    *((void *)this + 3426) = v39;
    operator delete(v39);
  }
  for (uint64_t j = 0; j != -32; j -= 8)
  {
    int v41 = *(const void **)((char *)this + j + 27312);
    if (v41) {
      CFRelease(v41);
    }
  }
  uint64_t v42 = (const void *)*((void *)this + 3410);
  if (v42) {
    CFRelease(v42);
  }
  uint64_t v43 = (const void *)*((void *)this + 3409);
  if (v43) {
    CFRelease(v43);
  }
  int64x2_t v44 = (void *)*((void *)this + 3396);
  if (v44)
  {
    do
    {
      Rect v45 = (void *)*v44;
      operator delete(v44);
      int64x2_t v44 = v45;
    }
    while (v45);
  }
  size_t v46 = (void *)*((void *)this + 3394);
  *((void *)this + 3394) = 0;
  if (v46) {
    operator delete(v46);
  }
  unsigned int v47 = (const void *)*((void *)this + 3391);
  if (v47) {
    CFRelease(v47);
  }
  IOSurfaceID v48 = (const void *)*((void *)this + 3390);
  if (v48) {
    CFRelease(v48);
  }
  float64x2_t v49 = (void *)*((void *)this + 3307);
  if (v49)
  {
    do
    {
      int v50 = (void *)*v49;
      operator delete(v49);
      float64x2_t v49 = v50;
    }
    while (v50);
  }
  __int16 v51 = (void *)*((void *)this + 3305);
  *((void *)this + 3305) = 0;
  if (v51) {
    operator delete(v51);
  }
  int v52 = (void *)*((void *)this + 3246);
  if (v52 != *((void **)this + 3248)) {
    free(v52);
  }
  uint64_t v53 = (CA::WindowServer::IOMFBDisplay::FrameInfo **)*((void *)this + 3243);
  if (v53)
  {
    int v54 = (CA::WindowServer::IOMFBDisplay::FrameInfo **)*((void *)this + 3244);
    __int16 v55 = (void *)*((void *)this + 3243);
    if (v54 != v53)
    {
      do
        std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>::reset[abi:nn180100](--v54, 0);
      while (v54 != v53);
      __int16 v55 = (void *)*((void *)this + 3243);
    }
    *((void *)this + 3244) = v53;
    operator delete(v55);
  }
  int v56 = (const void *)*((void *)this + 3196);
  if (v56) {
    CFRelease(v56);
  }

  CA::WindowServer::Display::~Display(this);
}

void sub_18496CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 136);
  std::vector<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::__destroy_vector::operator()[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::IOMFBDisplay::emit_server_timing_update_locked(CA::WindowServer::IOMFBDisplay *this)
{
  atomic_load((unsigned __int8 *)(*((void *)this + 3258) + 32));
  atomic_load((unsigned __int8 *)(*((void *)this + 3258) + 33));
  atomic_load((unint64_t *)(*((void *)this + 3258) + 24));
  atomic_load((unsigned int *)(*((void *)this + 3258) + 36));
  atomic_load((unsigned int *)(*((void *)this + 3258) + 40));
  kdebug_trace();
  atomic_load((unint64_t *)(*((void *)this + 3258) + 48));
  atomic_load((unint64_t *)(*((void *)this + 3258) + 64));
  atomic_load((unint64_t *)(*((void *)this + 3258) + 56));

  return kdebug_trace();
}

uint64_t IOGPUDeviceSetDisplayParamsFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IOGPUDeviceSetDisplayParamsSymbolLoc = (uint64_t (*)(uint64_t, uint64_t, uint64_t))getIOGPUDeviceSetDisplayParamsSymbolLoc();
  if (IOGPUDeviceSetDisplayParamsSymbolLoc)
  {
    return IOGPUDeviceSetDisplayParamsSymbolLoc(a1, a2, a3);
  }
  else
  {
    dlerror();
    abort_report_np();
    return getIOGPUDeviceSetDisplayParamsSymbolLoc();
  }
}

uint64_t getIOGPUDeviceSetDisplayParamsSymbolLoc(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  __int8 v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr;
  uint64_t v6 = getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr;
  if (!getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr)
  {
    int v1 = (void *)IOGPULibrary();
    void v4[3] = (uint64_t)dlsym(v1, "IOGPUDeviceSetDisplayParams");
    getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void *___ZL39getIOGPUDeviceSetDisplayParamsSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)IOGPULibrary();
  uint64_t result = dlsym(v2, "IOGPUDeviceSetDisplayParams");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIOGPUDeviceSetDisplayParamsSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t IOGPULibrary(void)
{
  v3[1] = *(char **)MEMORY[0x1E4F143B8];
  v3[0] = 0;
  uint64_t v0 = IOGPULibraryCore(v3);
  int v1 = v3[0];
  if (!v0)
  {
    int v1 = (char *)abort_report_np();
    goto LABEL_5;
  }
  if (v3[0]) {
LABEL_5:
  }
    free(v1);
  return v0;
}

uint64_t IOGPULibraryCore(char **a1)
{
  if (!IOGPULibraryCore(char **)::frameworkLibrary) {
    IOGPULibraryCore(char **)::frameworkLibrardouble y = _sl_dlopen();
  }
  return IOGPULibraryCore(char **)::frameworkLibrary;
}

uint64_t ___ZL16IOGPULibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  IOGPULibraryCore(char **)::frameworkLibrardouble y = result;
  return result;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay15hint_agx_timingEyy_block_invoke()
{
  uint64_t result = IOGPULibraryCore(0);
  if (result)
  {
    uint64_t result = getIOGPUDeviceCreateSymbolLoc();
    if (result)
    {
      uint64_t result = IOGPULibraryCore(0);
      if (result)
      {
        uint64_t result = getIOGPUDeviceSetDisplayParamsSymbolLoc();
        if (result)
        {
          mach_port_t v1 = *MEMORY[0x1E4F2EEF0];
          CFDictionaryRef v2 = IOServiceMatching("AGXAccelerator");
          uint64_t result = IOServiceGetMatchingService(v1, v2);
          if (result)
          {
            uint64_t v3 = result;
            SymbolLoc = (uint64_t (*)(uint64_t))getIOGPUDeviceCreateSymbolLoc();
            if (SymbolLoc)
            {
              uint64_t result = SymbolLoc(v3);
              CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::agx_device = result;
            }
            else
            {
              dlerror();
              abort_report_np();
              return getIOGPUDeviceCreateSymbolLoc();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getIOGPUDeviceCreateSymbolLoc(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  __int8 v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getIOGPUDeviceCreateSymbolLoc(void)::ptr;
  uint64_t v6 = getIOGPUDeviceCreateSymbolLoc(void)::ptr;
  if (!getIOGPUDeviceCreateSymbolLoc(void)::ptr)
  {
    mach_port_t v1 = (void *)IOGPULibrary();
    void v4[3] = (uint64_t)dlsym(v1, "IOGPUDeviceCreate");
    getIOGPUDeviceCreateSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void *___ZL29getIOGPUDeviceCreateSymbolLocv_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = (void *)IOGPULibrary();
  uint64_t result = dlsym(v2, "IOGPUDeviceCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getIOGPUDeviceCreateSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void CA::WindowServer::IOMFBDisplay::enable_hotplug_info(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  mach_port_t v1 = (unsigned __int8 *)this + 28168;
  int v2 = *((unsigned __int8 *)this + 28169);
  *((unsigned char *)this + 28169) = 1;
  if (!v2)
  {
    if (CA::WindowServer::Display::get_display_perf_log(void)::once_token[0] != -1) {
      dispatch_once(CA::WindowServer::Display::get_display_perf_log(void)::once_token, &__block_literal_global_71);
    }
    os_signpost_id_t v4 = *((unsigned int *)this + 6);
    if (v4)
    {
      uint64_t v5 = CA::WindowServer::Display::get_display_perf_log(void)::log;
      if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_perf_log(void)::log))
      {
        int v6 = *v1;
        v7[0] = 67240448;
        v7[1] = v4;
        __int16 v8 = 1026;
        int v9 = v6;
        _os_signpost_emit_with_name_impl(&dword_184668000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HotPlug", "displayId=%{public, name=displayId}u state=%{public, BOOL, name=state}d", (uint8_t *)v7, 0xEu);
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::set_frame_info_enabled(CA::WindowServer::IOMFBDisplay *this, char a2)
{
  v4[1] = *(CA::WindowServer::IOMFBDisplay::FrameInfo **)MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 28167) = a2;
  CA::WindowServer::IOMFBDisplay::collect_frame_info(v4, (uint64_t)this, 0);
  int v2 = v4[0];
  if (v4[0])
  {
    CA::WindowServer::IOMFBDisplay::FrameInfo::~FrameInfo(v4[0]);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v2);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::minimum_frame_duration_changed(os_unfair_lock_s *this)
{
  if ((this[156]._os_unfair_lock_opaque & 0x100) != 0)
  {
    os_unfair_lock_lock(this + 6849);
    CA::WindowServer::IOMFBDisplay::recompute_server_frame_interval_locked((CA::WindowServer::IOMFBDisplay *)this, v2, v3, v4, v5, v6, v7, v8);
    os_unfair_lock_unlock(this + 6849);
  }

  return CA::WindowServer::Display::post_display_changed((uint64_t)this);
}

void CA::WindowServer::IOMFBDisplay::post_power_log(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = 0;
  while (!*(_DWORD *)((char *)this + v3 + 25448))
  {
    v3 += 4;
    if (v3 == 40) {
      goto LABEL_8;
    }
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CA_CFDictionarySetLongLong(Mutable, @"mach_absolute_time", v2);
  uint64_t v5 = 0;
  uint64_t v6 = (char *)this + 25448;
  do
  {
    CA_CFDictionarySetInt(Mutable, CA::WindowServer::power_log_dr_keys[v5], *(_DWORD *)&v6[4 * v5]);
    *(_DWORD *)&v6[4 * v5++] = 0;
  }
  while (v5 != 10);
  PLLogTimeSensitiveRegisteredEvent();
  CFRelease(Mutable);
LABEL_8:
  uint64_t v7 = (int *)((char *)this + 25488);
  if (*((_DWORD *)this + 6372))
  {
    uint64_t v8 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CA_CFDictionarySetLongLong(v8, @"mach_absolute_time", v2);
    CA_CFDictionarySetInt(v8, @"count", *v7);
    int *v7 = 0;
    PLLogTimeSensitiveRegisteredEvent();
    CFRelease(v8);
  }
  uint64_t v9 = 0;
  while (!*(_DWORD *)((char *)this + v9 + 25408))
  {
    v9 += 4;
    if (v9 == 40) {
      return;
    }
  }
  uint64_t v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CA_CFDictionarySetLongLong(v10, @"mach_absolute_time", v2);
  uint64_t v11 = 0;
  uint64_t v12 = (char *)this + 25408;
  do
  {
    CA_CFDictionarySetInt(v10, CA::WindowServer::power_log_dr_keys[v11], *(_DWORD *)&v12[4 * v11]);
    *(_DWORD *)&v12[4 * v11++] = 0;
  }
  while (v11 != 10);
  PLLogTimeSensitiveRegisteredEvent();

  CFRelease(v10);
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay25post_frame_rate_power_logEv_block_invoke()
{
  uint64_t result = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_frame_rate_power_log(void)::frame_count_id = result;
  return result;
}

uint64_t ___ZN2CA12WindowServer12IOMFBDisplay32post_render_statistics_power_logEv_block_invoke()
{
  CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::render_pass_id = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::layer_count_id = pps_create_telemetry_identifier();
  uint64_t result = pps_create_telemetry_identifier();
  CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::offscreen_reasons_id = result;
  return result;
}

uint64_t CAObject_propertyKeys(objc_class *a1)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = classDescription(a1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(result + 120);
    if (!result)
    {
      Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF98], 0, 0);
      uint64_t v4 = v2;
      do
      {
        if (*(_DWORD *)(v4 + 24))
        {
          uint64_t v5 = 0;
          unint64_t v6 = 0;
          do
          {
            String = CAAtomGetString(*(_DWORD *)(*(void *)(v4 + 16) + v5));
            CFSetAddValue(Mutable, String);
            ++v6;
            v5 += 40;
          }
          while (v6 < *(unsigned int *)(v4 + 24));
        }
        uint64_t v4 = *(void *)v4;
      }
      while (v4);
      CFIndex Count = CFSetGetCount(Mutable);
      CFIndex v9 = Count;
      size_t v10 = 8 * Count;
      if ((unint64_t)(8 * Count) > 0x1000)
      {
        uint64_t v11 = (char *)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
      }
      else
      {
        MEMORY[0x1F4188790](Count);
        uint64_t v11 = (char *)v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v11, v10);
      }
      CFSetGetValues(Mutable, (const void **)v11);
      *(void *)(v2 + 12CASetDebugMessage("", 0) = CFArrayCreate(0, (const void **)v11, v9, 0);
      if (v10 > 0x1000) {
        free(v11);
      }
      CFRelease(Mutable);
      return *(void *)(v2 + 120);
    }
  }
  return result;
}

void CAObject_encodeWithCoder(void *a1, void *a2)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = classDescription(v4);
  if (v5)
  {
    uint64_t v6 = v5;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v7 = [a2 delegate];
      if (objc_opt_respondsToSelector()) {
        uint64_t v8 = (void *)v7;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF98], 0, 0);
    do
    {
      if (*(_DWORD *)(v6 + 24))
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          uint64_t v12 = *(void *)(v6 + 16);
          if ((*(unsigned char *)(v12 + v10 + 6) & 1) == 0)
          {
            String = CAAtomGetString(*(_DWORD *)(v12 + v10));
            if ([a1 shouldArchiveValueForKey:String])
            {
              if (!v8 || objc_msgSend(v8, "CA_shouldArchiveValueForKey:ofObject:", String, a1))
              {
                uint64_t v14 = objc_msgSend(a1, "CA_archivingValueForKey:", String);
                if (v14)
                {
                  uint64_t v15 = v14;
                  if (!CFSetContainsValue(Mutable, String))
                  {
                    objc_msgSend(a2, "CA_encodeObject:forKey:conditional:", v15, String, (*(_DWORD *)(*(void *)(v6 + 16) + v10 + 4) >> 29) & 1);
                    CFSetAddValue(Mutable, String);
                  }
                }
              }
            }
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < *(unsigned int *)(v6 + 24));
      }
      uint64_t v6 = *(void *)v6;
    }
    while (v6);
    CFIndex Count = CFSetGetCount(Mutable);
    size_t v17 = Count;
    size_t v18 = 8 * Count;
    if ((unint64_t)(8 * Count) > 0x1000)
    {
      uint64_t v19 = (char *)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    }
    else
    {
      MEMORY[0x1F4188790](Count);
      uint64_t v19 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v19, v18);
    }
    CFSetGetValues(Mutable, (const void **)v19);
    CFRelease(Mutable);
    qsort(v19, v17, 8uLL, (int (__cdecl *)(const void *, const void *))compare_strings);
    unint64_t v20 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v19 count:v17];
    [a2 encodeObject:v20 forKey:@"__CACodingContents"];

    if (v18 > 0x1000) {
      free(v19);
    }
  }
}

CFComparisonResult compare_strings(CFStringRef *a1, CFStringRef *a2)
{
  return CFStringCompare(*a1, *a2, 0);
}

uint64_t CAObject_encodeWithCAMLWriter(void *a1, void *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t result = classDescription(v4);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = [a2 encodingForReverseSerializationTest];
    int v7 = result;
    do
    {
      if (*(_DWORD *)(v6 + 24))
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        do
        {
          String = CAAtomGetString(*(_DWORD *)(*(void *)(v6 + 16) + v8));
          uint64_t result = [a1 shouldArchiveValueForKey:String];
          if ((result | v7) == 1)
          {
            uint64_t result = objc_msgSend(a1, "CA_archivingValueForKey:", String);
            if (result)
            {
              uint64_t v11 = result;
              objc_msgSend(a2, "beginPropertyElement:", -[objc_class CA_CAMLPropertyForKey:](v4, "CA_CAMLPropertyForKey:", String));
              [a2 encodeObject:v11 conditionally:(*(_DWORD *)(*(void *)(v6 + 16) + v8 + 4) >> 29) & 1];
              uint64_t result = [a2 endElement];
            }
          }
          ++v9;
          v8 += 40;
        }
        while (v9 < *(unsigned int *)(v6 + 24));
      }
      uint64_t v6 = *(void *)v6;
    }
    while (v6);
  }
  return result;
}

void CAObject_setValueForKeyPath(void *a1, void *a2, void *a3)
{
  uint64_t v6 = [a3 rangeOfString:@"."];
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = [a3 substringToIndex:v6];
    uint64_t v10 = (void *)[a3 substringFromIndex:v8 + 1];
    CAObject_setValueForKeyPath_(a1, a2, v9, v10, 0);
  }
  else
  {
    [a1 setValue:a2 forKey:a3];
  }
}

void *CA::Render::ContentStream::get_or_create_stream_and_lock(CA::Render::ContentStream *this, int a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::s_streams_lock);
  if (CA::Render::ContentStream::get_or_create_stream_and_lock(unsigned int,unsigned int,int)::once_token[0] != -1) {
    dispatch_once(CA::Render::ContentStream::get_or_create_stream_and_lock(unsigned int,unsigned int,int)::once_token, &__block_literal_global_22251);
  }
  uint64_t i = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)CA::Render::s_streams, this);
  if (i) {
    goto LABEL_82;
  }
  if (a2 && (int)a3 >= 1)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v8 = (pthread_mutex_t *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x198uLL, 0x743898A5uLL);
    uint64_t v9 = v8;
    if (v8)
    {
      pthread_mutex_init(v8, 0);
      *(void *)v9[2].__opaque = (char *)v9 + 168;
      *(void *)&v9[2].__opaque[8] = (char *)v9 + 168;
      *(void *)&v9[2].__opaque[16] = (char *)v9 + 168;
      *(void *)&v9[2].__opaque[24] = 8;
      *(void *)v9[3].__opaque = (char *)v9 + 232;
      *(void *)&v9[3].__opaque[8] = (char *)v9 + 232;
      *(void *)&v9[3].__opaque[16] = (char *)v9 + 232;
      *(void *)&v9[3].__opaque[24] = 8;
      *(_OWORD *)&v9[4].__opaque[48] = 0u;
      *(_OWORD *)v9[5].__opaque = 0u;
      *(_OWORD *)&v9[5].__opaque[16] = 0u;
      *(_OWORD *)&v9[5].__opaque[32] = 0u;
      *(void *)&v9[5].__opaque[48] = 0;
      LODWORD(v9[1].__sig) = this;
      *(_DWORD *)&v9[4].__opaque[16] = a2;
      *(_DWORD *)&v9[4].__opaque[20] = a3;
      mach_port_t v41 = 0;
      CA::Render::Server::add_dead_name_watch(this, &v41, (unsigned int *)CA::Render::ContentStream::destroy_stream, v10);
    }
    uint64_t v11 = CA::Render::s_streams;
    unint64_t v12 = this;
    unint64_t v13 = *(void *)(CA::Render::s_streams + 8);
    if (v13)
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        unint64_t v15 = this;
        if (v13 <= this) {
          unint64_t v15 = this % v13;
        }
      }
      else
      {
        unint64_t v15 = (v13 - 1) & this;
      }
      uint64_t v16 = *(void ***)(*(void *)CA::Render::s_streams + 8 * v15);
      if (v16)
      {
        for (uint64_t i = *v16; i; uint64_t i = *(void **)i)
        {
          unint64_t v17 = *((void *)i + 1);
          if (v17 == this)
          {
            if (*((_DWORD *)i + 4) == this)
            {
              if (v9)
              {
                CA::Render::ContentStream::~ContentStream((CA::Render::ContentStream *)v9);
                int v39 = (malloc_zone_t *)get_malloc_zone();
                malloc_zone_free(v39, v9);
              }
LABEL_81:
              [(id)CA::Render::s_process_monitor addMonitoringProcess:a3];
LABEL_82:
              pthread_mutex_lock(*((pthread_mutex_t **)i + 3));
              uint64_t i = (void *)*((void *)i + 3);
              goto LABEL_83;
            }
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v17 >= v13) {
                v17 %= v13;
              }
            }
            else
            {
              v17 &= v13 - 1;
            }
            if (v17 != v15) {
              break;
            }
          }
        }
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t i = operator new(0x20uLL);
    *(void *)uint64_t i = 0;
    *((void *)i + 1) = this;
    *((_DWORD *)i + 4) = this;
    *((void *)i + 3) = v9;
    float v18 = (float)(unint64_t)(*(void *)(v11 + 24) + 1);
    float v19 = *(float *)(v11 + 32);
    if (v13 && (float)(v19 * (float)v13) >= v18)
    {
LABEL_71:
      int v35 = *(void **)v11;
      __int16 v36 = *(void **)(*(void *)v11 + 8 * v15);
      if (v36)
      {
        *(void *)uint64_t i = *v36;
      }
      else
      {
        *(void *)uint64_t i = *(void *)(v11 + 16);
        *(void *)(v11 + 16) = i;
        v35[v15] = v11 + 16;
        if (!*(void *)i)
        {
LABEL_80:
          ++*(void *)(v11 + 24);
          goto LABEL_81;
        }
        unint64_t v37 = *(void *)(*(void *)i + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v37 >= v13) {
            v37 %= v13;
          }
        }
        else
        {
          v37 &= v13 - 1;
        }
        __int16 v36 = (void *)(*(void *)v11 + 8 * v37);
      }
      *__int16 v36 = i;
      goto LABEL_80;
    }
    BOOL v20 = 1;
    if (v13 >= 3) {
      BOOL v20 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v13);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v13 = *(void *)(v11 + 8);
    if (*(void *)&prime > v13) {
      goto LABEL_37;
    }
    if (*(void *)&prime < v13)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(v11 + 24) / *(float *)(v11 + 32));
      if (v13 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v13)
      {
        unint64_t v13 = *(void *)(v11 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unsigned int v24 = operator new(8 * *(void *)&prime);
          __int16 v25 = *(void **)v11;
          *(void *)uint64_t v11 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(v11 + 8) = prime;
          do
            *(void *)(*(void *)v11 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = *(void **)(v11 + 16);
          if (v27)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v11 + 8 * v28) = v11 + 16;
            uint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)v11 + 8 * v34))
                  {
                    *(void *)(*(void *)v11 + 8 * v34) = v27;
                    goto LABEL_62;
                  }
                  *uint64_t v27 = *v33;
                  *uint64_t v33 = **(void **)(*(void *)v11 + 8 * v34);
                  **(void **)(*(void *)v11 + 8 * v34) = v33;
                  uint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_62:
                uint64_t v27 = v33;
                uint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_66;
        }
        __int16 v40 = *(void **)v11;
        *(void *)uint64_t v11 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v13 = 0;
        *(void *)(v11 + 8) = 0;
      }
    }
LABEL_66:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12) {
        unint64_t v15 = v12 % v13;
      }
      else {
        unint64_t v15 = v12;
      }
    }
    else
    {
      unint64_t v15 = (v13 - 1) & v12;
    }
    goto LABEL_71;
  }
LABEL_83:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::s_streams_lock);
  return i;
}

void CA::Render::ContentStream::~ContentStream(CA::Render::ContentStream *this)
{
  pthread_mutex_lock((pthread_mutex_t *)this);
  pthread_mutex_unlock((pthread_mutex_t *)this);
  if (*((void *)this + 39) != *((void *)this + 40)
    || *((void *)this + 42) != *((void *)this + 43)
    || *((void *)this + 45) != *((void *)this + 46)
    || *((void *)this + 36))
  {
    __assert_rtn("~ContentStream", "render-content-stream.cpp", 531, "_avail_surf.empty () && _used_surf.empty () && _pending_names_release.empty () && !_intermediate_surf.iosurface");
  }
  uint64_t v2 = (CA::Render::Server *)*((unsigned int *)this + 16);
  uint64_t v3 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (v2)
  {
    CA::Render::Server::remove_dead_name_watch(v2);
    mach_port_deallocate(*v3, *((_DWORD *)this + 16));
  }
  mach_port_name_t v4 = *((_DWORD *)this + 70);
  if (v4) {
    mach_port_deallocate(*v3, v4);
  }
  uint64_t v5 = (void *)*((void *)this + 34);
  if (v5)
  {
    CA::VideoToolbox::~VideoToolbox(*((CFTypeRef **)this + 34));
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v5);
  }
  uint64_t v7 = (void *)*((void *)this + 45);
  if (v7)
  {
    *((void *)this + 46) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 42);
  if (v8)
  {
    *((void *)this + 43) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 39);
  if (v9)
  {
    *((void *)this + 4CASetDebugMessage("", 0) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 25);
  if (v10 != *((void **)this + 27)) {
    free(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 17);
  if (v11 != *((void **)this + 19)) {
    free(v11);
  }
  pthread_mutex_destroy((pthread_mutex_t *)this);
}

uint64_t CA::Render::ContentStream::destroy_stream(CA::Render::ContentStream *this, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if ((this - 1) > 0xFFFFFFFD) {
    return 0;
  }
  unsigned int v4 = this;
  stream_and_locCFIndex k = CA::Render::ContentStream::get_or_create_stream_and_lock(this, 0, 0, a4);
  if (stream_and_lock)
  {
    uint64_t v6 = stream_and_lock;
    uint64_t v36 = 0;
    memset(v35, 0, sizeof(v35));
    *(_OWORD *)uint64_t v33 = 0u;
    long long v34 = 0u;
    memset(v32, 0, sizeof(v32));
    *(_OWORD *)&v30[16] = 0u;
    long long v31 = 0u;
    long long v7 = *(_OWORD *)(stream_and_lock + 112);
    v29[2] = *(_OWORD *)(stream_and_lock + 96);
    *(_OWORD *)unint64_t v30 = v7;
    *(_DWORD *)&v30[15] = *(_DWORD *)(stream_and_lock + 127);
    long long v8 = *(_OWORD *)(stream_and_lock + 80);
    v29[0] = *(_OWORD *)(stream_and_lock + 64);
    v29[1] = v8;
    *(void *)&v30[24] = (char *)v32 + 8;
    *(void *)&long long v31 = (char *)v32 + 8;
    *((void *)&v31 + 1) = (char *)v32 + 8;
    *(void *)&v32[0] = 8;
    X::small_vector_base<unsigned int>::append<unsigned int const*>((uint64_t)&v30[24], *(int **)(v6 + 136), *(int **)(v6 + 144));
    v33[1] = (char *)v35 + 8;
    *(void *)&long long v34 = (char *)v35 + 8;
    *((void *)&v34 + 1) = (char *)v35 + 8;
    *(void *)&v35[0] = 8;
    X::small_vector_base<unsigned int>::append<unsigned int const*>((uint64_t)&v33[1], *(int **)(v6 + 200), *(int **)(v6 + 208));
    pthread_mutex_unlock((pthread_mutex_t *)v6);
    v28[0] = v29;
    v28[1] = 256;
    CA::Render::post_notification(0x3Fu, 0, (uint64_t)v28, 0);
    if (v33[1] != *((void **)&v34 + 1)) {
      free(v33[1]);
    }
    if (*(void *)&v30[24] != *((void *)&v31 + 1)) {
      free(*(void **)&v30[24]);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::s_streams_lock);
  uint64_t v9 = (void *)CA::Render::s_streams;
  if (!CA::Render::s_streams
    || (uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)CA::Render::s_streams, v4)) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::s_streams_lock);
    return 0;
  }
  uint64_t v11 = v10;
  unint64_t v12 = (unsigned int *)v10[3];
  float32x2_t v10[3] = 0;
  int8x8_t v13 = (int8x8_t)v9[1];
  unint64_t v14 = v10[1];
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    if (v14 >= *(void *)&v13) {
      v14 %= *(void *)&v13;
    }
  }
  else
  {
    v14 &= *(void *)&v13 - 1;
  }
  unint64_t v17 = *(uint64_t **)(*v9 + 8 * v14);
  do
  {
    float v18 = v17;
    unint64_t v17 = (uint64_t *)*v17;
  }
  while (v17 != v10);
  if (v18 == v9 + 2) {
    goto LABEL_29;
  }
  unint64_t v19 = v18[1];
  if (v15.u32[0] > 1uLL)
  {
    if (v19 >= *(void *)&v13) {
      v19 %= *(void *)&v13;
    }
  }
  else
  {
    v19 &= *(void *)&v13 - 1;
  }
  if (v19 != v14)
  {
LABEL_29:
    if (!*v10) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(*v10 + 8);
    if (v15.u32[0] > 1uLL)
    {
      if (v20 >= *(void *)&v13) {
        v20 %= *(void *)&v13;
      }
    }
    else
    {
      v20 &= *(void *)&v13 - 1;
    }
    if (v20 != v14) {
LABEL_30:
    }
      *(void *)(*v9 + 8 * v14) = 0;
  }
  uint64_t v21 = *v10;
  if (*v10)
  {
    unint64_t v22 = *(void *)(v21 + 8);
    if (v15.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&v13) {
        v22 %= *(void *)&v13;
      }
    }
    else
    {
      v22 &= *(void *)&v13 - 1;
    }
    if (v22 != v14)
    {
      *(void *)(*v9 + 8 * v22) = v18;
      uint64_t v21 = *v10;
    }
  }
  *float v18 = v21;
  uint64_t *v10 = 0;
  --v9[3];
  uint64_t v23 = (CA::Render::ContentStream *)v10[3];
  float32x2_t v10[3] = 0;
  if (v23)
  {
    CA::Render::ContentStream::~ContentStream(v23);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v23);
  }
  operator delete(v11);
  uint64_t v25 = v12[71];
  uint64_t v26 = (void *)(CA::Render::s_streams + 16);
  while (1)
  {
    uint64_t v26 = (void *)*v26;
    if (!v26) {
      break;
    }
    if (*(_DWORD *)(v26[3] + 284) == v25)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::s_streams_lock);
      goto LABEL_46;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::s_streams_lock);
  if (v25) {
    [(id)CA::Render::s_process_monitor removeMonitoringProcess:v25];
  }
LABEL_46:
  if (v12)
  {
    CA::Render::ContentStream::~ContentStream((CA::Render::ContentStream *)v12);
    uint64_t v27 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v27, v12);
  }
  return 1;
}

void ___ZN2CA6Render13ContentStream29get_or_create_stream_and_lockEjji_block_invoke()
{
}

void ___ZN2CA6RenderL23init_process_monitoringEv_block_invoke(uint64_t a1, int a2, int a3, int a4)
{
  v46[100] = *MEMORY[0x1E4F143B8];
  bzero(v46, 0x320uLL);
  uint64_t v42 = v46;
  uint64_t v43 = (char *)v46;
  int64x2_t v44 = v46;
  unint64_t v45 = 4;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::s_streams_lock);
  uint64_t v5 = *(void **)(CA::Render::s_streams + 16);
  if (v5)
  {
    int v37 = a2;
    do
    {
      uint64_t v6 = v5[3];
      if (*(_DWORD *)(v6 + 284) == a2 && *(unsigned char *)(v6 + 400))
      {
        long long v7 = v42;
        long long v8 = v43;
        unint64_t v9 = 0x8F5C28F5C28F5C29 * ((v43 - (unsigned char *)v42) >> 3);
        unint64_t v10 = v9 + 1;
        if (v45 < v9 + 1)
        {
          unint64_t v11 = (v45 + 1) | ((v45 + 1) >> 1) | (((v45 + 1) | ((v45 + 1) >> 1)) >> 2);
          unint64_t v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
          unint64_t v13 = v12 | (v12 >> 16) | ((v12 | (v12 >> 16)) >> 32);
          if (v13 + 1 > v10) {
            unint64_t v10 = v13 + 1;
          }
          __int16 v38 = v44;
          unint64_t v39 = v10;
          unint64_t v14 = (char *)malloc_type_malloc(200 * v10, 0x1010040433433E5uLL);
          uint8x8_t v15 = v42;
          uint64_t v16 = v43;
          if (v42 == v43)
          {
            unint64_t v22 = v42;
          }
          else
          {
            uint64_t v17 = 0;
            do
            {
              float v18 = &v14[v17 * 8];
              *(_OWORD *)float v18 = *(_OWORD *)&v15[v17];
              long long v19 = *(_OWORD *)&v15[v17 + 2];
              long long v20 = *(_OWORD *)&v15[v17 + 4];
              long long v21 = *(_OWORD *)&v15[v17 + 6];
              *(_DWORD *)(v18 + 63) = *(_DWORD *)((char *)&v15[v17 + 7] + 7);
              *((_OWORD *)v18 + 2) = v20;
              *((_OWORD *)v18 + 3) = v21;
              *((_OWORD *)v18 + 1) = v19;
              X::small_vector_base<unsigned int>::small_vector_base((int **)&v14[v17 * 8 + 72], (int **)&v15[v17 + 9], (int *)&v14[v17 * 8 + 104]);
              X::small_vector_base<unsigned int>::small_vector_base((int **)v18 + 17, (int **)&v15[v17 + 17], (int *)v18 + 42);
              v17 += 25;
            }
            while (&v15[v17] != (void *)v16);
            unint64_t v22 = v42;
            uint8x8_t v15 = v43;
            a2 = v37;
          }
          X::small_vector_base<CA::Render::ContentStreamConfig>::runDestructors(v22, v15);
          if (v7 != v38) {
            free(v42);
          }
          long long v8 = &v14[200 * v9];
          uint64_t v42 = v14;
          uint64_t v43 = v8;
          unint64_t v45 = v39;
        }
        *(_OWORD *)long long v8 = *(_OWORD *)(v6 + 64);
        long long v23 = *(_OWORD *)(v6 + 80);
        long long v24 = *(_OWORD *)(v6 + 96);
        long long v25 = *(_OWORD *)(v6 + 112);
        *(_DWORD *)(v8 + 63) = *(_DWORD *)(v6 + 127);
        *((_OWORD *)v8 + 2) = v24;
        *((_OWORD *)v8 + 3) = v25;
        *((void *)v8 + 9) = v8 + 104;
        *((_OWORD *)v8 + 1) = v23;
        *((void *)v8 + 1CASetDebugMessage("", 0) = v8 + 104;
        *((void *)v8 + 11) = v8 + 104;
        *((void *)v8 + 12) = 8;
        X::small_vector_base<unsigned int>::append<unsigned int const*>((uint64_t)(v8 + 72), *(int **)(v6 + 136), *(int **)(v6 + 144));
        uint64_t v26 = v8 + 168;
        *((void *)v8 + 17) = v8 + 168;
        *((void *)v8 + 18) = v8 + 168;
        uint64_t v27 = (uint64_t)(v8 + 136);
        *(void *)(v27 + 16) = v26;
        *(void *)(v27 + 24) = 8;
        X::small_vector_base<unsigned int>::append<unsigned int const*>(v27, *(int **)(v6 + 200), *(int **)(v6 + 208));
        v43 += 200;
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::s_streams_lock);
  if (v42 != v43)
  {
    BOOL v28 = x_log_hook_p();
    if (!a3 || a4)
    {
      if (v28)
      {
        x_log_();
      }
      else
      {
        uint8x8_t v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = a2;
          LOWORD(v41[0]) = 2048;
          *(void *)((char *)v41 + 2) = 0x8F5C28F5C28F5C29 * ((v43 - (unsigned char *)v42) >> 3);
          _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_INFO, "pid %u suspended. Stopping %lu streams", buf, 0x12u);
        }
      }
      unint64_t v30 = (char *)v42;
      long long v31 = v43;
      if (v42 != v43)
      {
        do
        {
          v30[66] = v30[66] & 0xFE | a3 & a4;
          *(void *)long long buf = v30;
          v41[0] = 0;
          CA::Render::post_notification(0x3Fu, 0, (uint64_t)buf, 0);
          v30 += 200;
        }
        while (v30 != v31);
      }
    }
    else
    {
      if (v28)
      {
        x_log_();
      }
      else
      {
        uint64_t v32 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = a2;
          LOWORD(v41[0]) = 2048;
          *(void *)((char *)v41 + 2) = 0x8F5C28F5C28F5C29 * ((v43 - (unsigned char *)v42) >> 3);
          _os_log_impl(&dword_184668000, v32, OS_LOG_TYPE_INFO, "pid %u resumed. Resuming %lu streams", buf, 0x12u);
        }
      }
      uint64_t v33 = (char *)v42;
      long long v34 = v43;
      if (v42 != v43)
      {
        do
        {
          v33[66] &= ~1u;
          *(void *)long long buf = v33;
          v41[0] = 1;
          CA::Render::post_notification(0x3Fu, 0, (uint64_t)buf, 0);
          v33 += 200;
        }
        while (v33 != v34);
      }
    }
  }
  X::small_vector_base<CA::Render::ContentStreamConfig>::runDestructors(v42, v43);
  if (v42 != v44) {
    free(v42);
  }
}

void X::small_vector_base<CA::Render::ContentStreamConfig>::runDestructors(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    do
    {
      unsigned int v4 = (void *)v3[17];
      if (v4 != (void *)v3[19]) {
        free(v4);
      }
      uint64_t v5 = (void *)v3[9];
      if (v5 != (void *)v3[11]) {
        free(v5);
      }
      v3 += 25;
    }
    while (v3 != a2);
  }
}

void CA::Render::release_surfaces(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v6 = (ipc_space_t *)MEMORY[0x1E4F14960];
    do
    {
      long long v7 = *(const void **)v3;
      mach_port_name_t v8 = *(_DWORD *)(v3 + 12);
      uint64_t v9 = *(void *)(v3 + 16);
      if (v8) {
        mach_port_deallocate(*v6, v8);
      }
      if (v9)
      {
        unint64_t v11 = *(void **)(a2 + 8);
        unint64_t v10 = *(void *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          unint64_t v13 = *(void **)a2;
          uint64_t v14 = ((uint64_t)v11 - *(void *)a2) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            abort();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v17);
            unint64_t v13 = *(void **)a2;
            unint64_t v11 = *(void **)(a2 + 8);
          }
          else
          {
            uint64_t v18 = 0;
          }
          long long v19 = (void *)(v17 + 8 * v14);
          *long long v19 = v9;
          unint64_t v12 = v19 + 1;
          while (v11 != v13)
          {
            uint64_t v20 = *--v11;
            *--long long v19 = v20;
          }
          *(void *)a2 = v19;
          *(void *)(a2 + 8) = v12;
          *(void *)(a2 + 16) = v17 + 8 * v18;
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          void *v11 = v9;
          unint64_t v12 = v11 + 1;
        }
        *(void *)(a2 + 8) = v12;
      }
      CFRelease(v7);
      v3 += 24;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  a1[1] = v3;
}

void CA::Render::release_single_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v6 = *(void **)(a2 + 8);
    unint64_t v5 = *(void *)(a2 + 16);
    if ((unint64_t)v6 >= v5)
    {
      mach_port_name_t v8 = *(void **)a2;
      uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v12) {
        unint64_t v13 = v10;
      }
      if (v13)
      {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v13);
        mach_port_name_t v8 = *(void **)a2;
        uint64_t v6 = *(void **)(a2 + 8);
        uint64_t v3 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v14 = 0;
      }
      unint64_t v15 = (void *)(v13 + 8 * v9);
      unint64_t v16 = v13 + 8 * v14;
      *unint64_t v15 = v3;
      long long v7 = v15 + 1;
      while (v6 != v8)
      {
        uint64_t v17 = *--v6;
        *--unint64_t v15 = v17;
      }
      *(void *)a2 = v15;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + 16) = v16;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v6 = v3;
      long long v7 = v6 + 1;
    }
    *(void *)(a2 + 8) = v7;
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

void X::small_vector_base<unsigned int>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(int **)(a1 + 8);
  unint64_t v5 = *(int **)a1;
  unint64_t v6 = ((uint64_t)v4 - *(void *)a1) >> 2;
  if (v6 <= a2)
  {
    if (v6 >= a2) {
      return;
    }
    if (*(void *)(a1 + 24) < a2)
    {
      X::small_vector_base<unsigned int>::grow((int **)a1, a2);
      unint64_t v5 = *(int **)a1;
      uint64_t v4 = *(int **)(a1 + 8);
    }
    long long v7 = &v5[a2];
    if (v4 != v7) {
      bzero(v4, (((char *)&v5[a2] - (char *)v4 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    long long v7 = &v5[a2];
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t CA::Render::free_pending_names(uint64_t result, void *a2)
{
  if (((a2[1] - *a2) >> 3))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
    a2[1] = *a2;
  }
  return result;
}

void CA::Render::ContentStream::produce_surface(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v19 = *(_OWORD *)a3;
  long long v20 = *(_OWORD *)(a3 + 16);
  long long v21 = *(_OWORD *)(a3 + 32);
  v22[0] = *(_OWORD *)a3;
  mach_port_name_t v8 = *(_DWORD *)(a1 + 64);
  long long v9 = *(_OWORD *)(a3 + 32);
  v22[1] = v20;
  v22[2] = v9;
  mach_error_t v10 = _CACContentStreamSurfaceProduced(v8, 0, a2, v22);
  mach_error_t v11 = v10;
  if (!v10) {
    goto LABEL_2;
  }
  if (v10 == 268435460)
  {
    if (v8 - 1 > 0xFFFFFFFD || mach_port_mod_refs(*MEMORY[0x1E4F14960], v8, 0, 1))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v18 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          long long v24 = "StreamSurfProduced";
          _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_ERROR, "%s failed to retain right", buf, 0xCu);
        }
      }
    }
    else
    {
      if (CA::MachPortUtil::reply_queue(void)::once != -1) {
        dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_9866);
      }
      *(void *)blocCFIndex k = MEMORY[0x1E4F143A8];
      *(void *)&long long v30 = 0x40000000;
      *((void *)&v30 + 1) = ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjj28CA_content_stream_frame_infoEJjS2_EEEijjbPKcT_DpT0__block_invoke;
      long long v31 = &__block_descriptor_tmp_28_22301;
      long long v33 = v19;
      mach_port_name_t v37 = v8;
      int v38 = 5;
      int v39 = a2;
      long long v34 = v20;
      long long v35 = v21;
      char v40 = 0;
      uint64_t v32 = _CACContentStreamSurfaceProduced;
      uint64_t v36 = "StreamSurfProduced";
      dispatch_async((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, block);
    }
LABEL_2:
    if (*(_DWORD *)(a3 + 8)) {
      goto LABEL_3;
    }
LABEL_17:
    BOOL v12 = 1;
    goto LABEL_18;
  }
  if (x_log_hook_p())
  {
    mach_error_string(v11);
    x_log_();
  }
  else
  {
    unint64_t v13 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = mach_error_string(v11);
      *(_DWORD *)long long buf = 136315650;
      long long v24 = "StreamSurfProduced";
      __int16 v25 = 1024;
      mach_error_t v26 = v11;
      __int16 v27 = 2080;
      BOOL v28 = v14;
      _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
    }
  }
  int v15 = *(_DWORD *)(a3 + 8);
  BOOL v12 = v15 == 0;
  if (v11 != 268435460 && v11) {
    goto LABEL_4;
  }
  if (!v15) {
    goto LABEL_17;
  }
LABEL_3:
  BOOL v12 = 0;
LABEL_4:
  ++*(_DWORD *)(a1 + 396);
LABEL_18:
  if (v11 != 268435460 && v11)
  {
    if (x_log_hook_p())
    {
      mach_error_string(v11);
      x_log_();
    }
    else
    {
      unint64_t v16 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = mach_error_string(v11);
        *(_DWORD *)blocCFIndex k = 67109378;
        *(_DWORD *)&block[4] = v11;
        LOWORD(v3CASetDebugMessage("", 0) = 2080;
        *(void *)((char *)&v30 + 2) = v17;
        _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_ERROR, "Failed to produced surface 0x%x : %s", block, 0x12u);
      }
    }
  }
  else if (v12)
  {
    *(_DWORD *)(a1 + 396) = 0;
    *(double *)(a1 + 384) = CATimeWithHostTime(*(void *)a3);
    *(_DWORD *)(a1 + 392) = a4;
  }
}

uint64_t ___ZN2CA12MachPortUtil17call_with_timeoutIPFijjj28CA_content_stream_frame_infoEJjS2_EEEijjbPKcT_DpT0__block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 96);
  uint64_t v4 = *(unsigned int *)(a1 + 100);
  uint64_t v5 = *(unsigned int *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 56);
  v14[0] = *(_OWORD *)(a1 + 40);
  v14[1] = v6;
  uint64_t v14[2] = *(_OWORD *)(a1 + 72);
  mach_error_t v7 = v2(v3, v4, v5, v14);
  if (v7)
  {
    mach_error_t v9 = v7;
    if (v7 != 268435460 || *(unsigned char *)(a1 + 108) == 0)
    {
      if (x_log_hook_p())
      {
        mach_error_string(v9);
        x_log_();
      }
      else
      {
        mach_error_t v11 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = *(void *)(a1 + 88);
          unint64_t v13 = mach_error_string(v9);
          *(_DWORD *)long long buf = 136315650;
          uint64_t v16 = v12;
          __int16 v17 = 1024;
          mach_error_t v18 = v9;
          __int16 v19 = 2080;
          long long v20 = v13;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_ERROR, "%s client message err=0x%x : %s", buf, 0x1Cu);
        }
      }
    }
  }
  return mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 96));
}

BOOL CA::Render::ContentStream::reuse_surface(CA::Render::ContentStream *this, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (long long *)*((void *)this + 42);
  uint64_t v3 = (long long *)*((void *)this + 43);
  if (v4 != v3)
  {
    while (*((_DWORD *)v4 + 2) != a2)
    {
      uint64_t v4 = (long long *)((char *)v4 + 24);
      if (v4 == v3) {
        goto LABEL_9;
      }
    }
  }
  if (v4 == v3)
  {
LABEL_9:
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      mach_error_t v9 = x_log_category_render;
      BOOL result = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      __int16 v25 = 0;
      _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_ERROR, "Releasing invalid surfaces", (uint8_t *)&v25, 2u);
    }
    return 0;
  }
  unint64_t v6 = *((void *)this + 40);
  unint64_t v5 = *((void *)this + 41);
  if (v6 >= v5)
  {
    uint64_t v11 = *((void *)this + 39);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = v15 + 24 * v12;
    unint64_t v18 = v15 + 24 * v16;
    long long v19 = *v4;
    *(void *)(v17 + 16) = *((void *)v4 + 2);
    *(_OWORD *)unint64_t v17 = v19;
    unint64_t v8 = v17 + 24;
    uint64_t v21 = (char *)*((void *)this + 39);
    long long v20 = (char *)*((void *)this + 40);
    if (v20 != v21)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *(void *)(v17 - 8) = *((void *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      long long v20 = (char *)*((void *)this + 39);
    }
    *((void *)this + 39) = v17;
    *((void *)this + 4CASetDebugMessage("", 0) = v8;
    *((void *)this + 41) = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v7 = *v4;
    *(void *)(v6 + 16) = *((void *)v4 + 2);
    *(_OWORD *)unint64_t v6 = v7;
    unint64_t v8 = v6 + 24;
  }
  *((void *)this + 4CASetDebugMessage("", 0) = v8;
  long long v23 = (long long *)*((void *)this + 43);
  uint64_t v24 = (char *)v23 - ((char *)v4 + 24);
  if (v23 != (long long *)((char *)v4 + 24)) {
    memmove(v4, (char *)v4 + 24, (char *)v23 - ((char *)v4 + 24));
  }
  *((void *)this + 43) = (char *)v4 + v24;
  return 1;
}

void CA::Render::Proxy::show(CA::Render::Proxy *this, unsigned int a2, char a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  BOOL v5 = x_log_hook_p();
  if (a3)
  {
    if (v5) {
      goto LABEL_3;
    }
    uint64_t v12 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *((_DWORD *)this + 3) >> 8;
      *(_DWORD *)long long buf = 67109120;
      int v15 = v13;
      mach_error_t v9 = "(proxy %d)";
      mach_error_t v10 = v12;
      uint32_t v11 = 8;
      goto LABEL_6;
    }
  }
  else
  {
    if (v5)
    {
LABEL_3:
      x_log_();
      return;
    }
    uint64_t v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)this + 3) >> 8;
      uint64_t v8 = *((void *)this + 2);
      *(_DWORD *)long long buf = 67109376;
      int v15 = v7;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      mach_error_t v9 = "(proxy %d 0x%llx)";
      mach_error_t v10 = v6;
      uint32_t v11 = 18;
LABEL_6:
      _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
    }
  }
}

void sub_184970038(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1849713C4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1849714A4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_184971BFC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Render::Pattern::show(CA::Render::Pattern *this, const CGAffineTransform *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
LABEL_16:
      x_log_();
      return;
    }
    uint64_t v21 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *((void *)this + 10);
      uint64_t v23 = *((void *)this + 11);
      uint64_t v24 = *((void *)this + 12);
      uint64_t v25 = *((void *)this + 13);
      *(_DWORD *)long long buf = 134218752;
      uint64_t v27 = v22;
      __int16 v28 = 2048;
      uint64_t v29 = v23;
      __int16 v30 = 2048;
      uint64_t v31 = v24;
      __int16 v32 = 2048;
      uint64_t v33 = v25;
      uint64_t v18 = "[%g %g] [%g %g])";
      long long v19 = v21;
      uint32_t v20 = 42;
      goto LABEL_19;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      int v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)this + 8);
        uint64_t v9 = *((void *)this + 9);
        uint64_t v10 = *((void *)this + 10);
        uint64_t v11 = *((void *)this + 11);
        uint64_t v12 = *((void *)this + 12);
        uint64_t v13 = *((void *)this + 13);
        *(_DWORD *)long long buf = 134219264;
        uint64_t v27 = v8;
        __int16 v28 = 2048;
        uint64_t v29 = v9;
        __int16 v30 = 2048;
        uint64_t v31 = v10;
        __int16 v32 = 2048;
        uint64_t v33 = v11;
        __int16 v34 = 2048;
        uint64_t v35 = v12;
        __int16 v36 = 2048;
        uint64_t v37 = v13;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(pattern [%g %g %g %g] [%g %g]", buf, 0x3Eu);
      }
    }
    CA::Render::show_affine_transform((CA::Render *)"matrix", (const char *)this + 16, a2);
    unint64_t v14 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v14);
    if (*((void *)this + 16))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(cell ", buf, 2u);
        }
      }
      (*(void (**)(void, CA::Render *, uint64_t))(**((void **)this + 16) + 40))(*((void *)this + 16), v14, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        __int16 v16 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (x_log_hook_p()) {
      goto LABEL_16;
    }
    uint64_t v17 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v18 = ")";
      long long v19 = v17;
      uint32_t v20 = 2;
LABEL_19:
      _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    }
  }
}

void CA::Render::Pattern::~Pattern(CA::Render::Pattern *this, const CA::Render::Object *a2)
{
  *(void *)this = &unk_1ED02F960;
  uint64_t v3 = (atomic_uint *)*((void *)this + 16);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  --dword_1EB2ADE5C;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v3;

  *(void *)this = &unk_1ED02F960;
  uint64_t v3 = (atomic_uint *)*((void *)this + 16);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  --dword_1EB2ADE5C;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
}

CA::Render::Texture *CA::Render::create_pattern_image(uint64_t a1, CGColorSpace *a2, CGFloat *a3, double *a4)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (CGPatternIsOpaque()) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = 1;
    }
  }
  else
  {
    uint64_t v8 = 8;
  }
  signed int v9 = vcvtpd_s64_f64(a4[2]);
  LODWORD(v4) = vcvtpd_s64_f64(a4[3]);
  unint64_t v10 = CA::Render::format_rowbytes((CA::Render *)v8, v9);
  size_t v11 = v10;
  size_t v27 = 0;
  v28[0] = v10;
  if (is_mul_ok(v10, v4)) {
    uint64_t v12 = (CA::Render *)(v10 * v4);
  }
  else {
    uint64_t v12 = 0;
  }
  BOOL result = (CA::Render::Texture *)CA::Render::aligned_malloc(v12, &v27, 0);
  if (result)
  {
    unint64_t v14 = result;
    int v15 = CAGetCachedCGBitmapContext_(result, v9, v4, v8, v11, a2);
    if (v15 && (uint64_t v17 = (CGContext *)*((void *)v15 + 2)) != 0)
    {
      CGContextSetCompositeOperation();
      long long v18 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      *(_OWORD *)&v26.a = *MEMORY[0x1E4F1DAB8];
      *(_OWORD *)&v26.c = v18;
      *(_OWORD *)&v26.tdouble x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      *(_OWORD *)&v25.a = *(_OWORD *)&v26.a;
      *(_OWORD *)&v25.c = v18;
      *(_OWORD *)&v25.tdouble x = *(_OWORD *)&v26.tx;
      CGAffineTransformScale(&v26, &v25, (double)v9 / a4[2], (double)(int)v4 / a4[3]);
      CGAffineTransform v23 = v26;
      CGAffineTransformTranslate(&v24, &v23, -*a4, -a4[1]);
      CGAffineTransform v26 = v24;
      CGAffineTransform v22 = v24;
      CGAffineTransformScale(&v24, &v22, *a3, a3[1]);
      CGAffineTransform v26 = v24;
      transforuint64_t m = v24;
      CGContextConcatCTM(v17, &transform);
      CGContextSetBaseCTM();
      CGContextDrawPatternCell();
      CGContextFlush(v17);
      CAReleaseCachedCGContext(v17);
      long long v19 = (void (*)(const void *, void *))v27;
      MEMORY[0x185325430](*MEMORY[0x1E4F14960], v14, v27, 1, 1);
      return CA::Render::Image::new_image((CA::Render::Image *)v8, v9, v4, 1u, a2, v14, v28, (const unint64_t *)CA::Render::aligned_free, v19, v20);
    }
    else
    {
      CA::Render::aligned_free(v14, v27, v16);
      return 0;
    }
  }
  return result;
}

void CA::Render::pattern_deleted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::pattern_lock);
  uint64_t v5 = x_hash_table_remove(CA::Render::pattern_cache, a4);
  if (v5)
  {
    BOOL v6 = (void *)v5;
    if (*(double *)(v5 + 32) > 0.0)
    {
      uint64_t v8 = *(void *)v5;
      int v7 = *(void **)(v5 + 8);
      *(void *)(v8 + 8) = v7;
      void *v7 = v8;
      *(void *)uint64_t v5 = v5;
      *(void *)(v5 + 8) = v5;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
    signed int v9 = (atomic_uint *)v6[3];
    if (v9 && atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v6);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
  }
}

uint64_t CA::OGL::Shape::FlattenedLines::emit_line(CA::OGL::Shape::FlattenedLines *this, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const double *a12)
{
  v29[1] = *(double *)MEMORY[0x1E4F143B8];
  double v28 = a3;
  v29[0] = a2;
  double v26 = a6;
  double v27 = a5;
  if (fabs(a4 + -1.0) >= 0.001)
  {
    double v13 = 1.0 / a4;
    v29[0] = v13 * a2;
    double v28 = v13 * a3;
  }
  if (fabs(a7 + -1.0) >= 0.001)
  {
    double v26 = 1.0 / a7 * a6;
    double v27 = 1.0 / a7 * a5;
  }
  uint64_t result = CA::OGL::Shape::clip_line((CA::OGL::Shape *)v29, &v28, &v27, &v26, (double *)this + 1, a12);
  if (result)
  {
    uint64_t v15 = *((void *)this + 5);
    float v16 = v29[0];
    float v17 = v28;
    float v18 = v27;
    float v19 = v26;
    uint64_t v20 = *(unsigned __int8 *)(v15 + 65);
    uint64_t v21 = (void *)(v15 + 8 * v20);
    CGAffineTransform v23 = v21 + 4;
    uint64_t v22 = v21[4];
    if ((unint64_t)(v22 + 2) > v21[6])
    {
      uint64_t result = (uint64_t)CA::OGL::Shape::Lines::flush((void **)v15, v20);
      uint64_t v22 = *v23;
    }
    uint64_t v24 = v21[2] + 16 * v22;
    uint64_t v25 = *(void *)(v15 + 8);
    *(void *)(v24 + 24) = v25;
    *(void *)(v24 + 8) = v25;
    *(float *)uint64_t v24 = v16;
    *(float *)(v24 + 4) = v17;
    *(float *)(v24 + 16) = v18;
    *(float *)(v24 + 2CASetDebugMessage("", 0) = v19;
    *v23 += 2;
  }
  return result;
}

BOOL CA::OGL::Shape::clip_line(CA::OGL::Shape *this, double *a2, double *a3, double *a4, double *a5, const double *a6)
{
  double v6 = *a2;
  double v7 = a5[2];
  if (v7 >= *(double *)this)
  {
    if (*a5 > *(double *)this) {
      int v8 = 8;
    }
    else {
      int v8 = 0;
    }
  }
  else
  {
    int v8 = 4;
  }
  double v9 = a5[3];
  if (v9 >= v6)
  {
    int v10 = v8 | 2;
    if (a5[1] <= v6) {
      int v10 = v8;
    }
  }
  else
  {
    int v10 = v8 | 1;
  }
  double v11 = *a4;
  if (v7 >= *a3)
  {
    if (*a5 > *a3) {
      int v12 = 8;
    }
    else {
      int v12 = 0;
    }
  }
  else
  {
    int v12 = 4;
  }
  if (v9 >= v11)
  {
    int v13 = v12 | 2;
    if (a5[1] <= v11) {
      int v13 = v12;
    }
  }
  else
  {
    int v13 = v12 | 1;
  }
  BOOL v14 = (v13 | v10) == 0;
  while ((v13 & v10) == 0 && v13 | v10)
  {
    if (v10) {
      char v15 = v10;
    }
    else {
      char v15 = v13;
    }
    if (v15)
    {
      double v17 = a5[3];
    }
    else
    {
      if ((v15 & 2) == 0)
      {
        if ((v15 & 4) != 0) {
          double v16 = a5[2];
        }
        else {
          double v16 = *a5;
        }
        double v17 = (v16 - *(double *)this) * (*a4 - *a2) / (*a3 - *(double *)this) + *a2;
        goto LABEL_33;
      }
      double v17 = a5[1];
    }
    double v16 = (v17 - *a2) * (*a3 - *(double *)this) / (*a4 - *a2) + *(double *)this;
LABEL_33:
    if (a5[2] >= v16)
    {
      if (*a5 <= v16) {
        int v18 = 0;
      }
      else {
        int v18 = 8;
      }
    }
    else
    {
      int v18 = 4;
    }
    if (a5[3] >= v17)
    {
      if (a5[1] > v17) {
        v18 |= 2u;
      }
    }
    else
    {
      v18 |= 1u;
    }
    BOOL v19 = v10 == 0;
    if (v10) {
      uint64_t v20 = (double *)this;
    }
    else {
      uint64_t v20 = a3;
    }
    if (v10) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = a4;
    }
    if (v10) {
      int v10 = v18;
    }
    else {
      int v10 = 0;
    }
    if (v19) {
      int v13 = v18;
    }
    *uint64_t v20 = v16;
    *uint64_t v21 = v17;
    BOOL v14 = (v13 | v10) == 0;
  }
  return v14;
}

double CA::OGL::Shape::FlattenedMask::emit_line(CA::OGL::Shape::FlattenedMask *this, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const double *a12)
{
  v31[1] = *(double *)MEMORY[0x1E4F143B8];
  double v30 = a3;
  v31[0] = a2;
  double v28 = a6;
  double v29 = a5;
  if (fabs(a4 + -1.0) >= 0.001)
  {
    double v13 = 1.0 / a4;
    v31[0] = v13 * a2;
    double v30 = v13 * a3;
  }
  if (fabs(a7 + -1.0) >= 0.001)
  {
    double v28 = 1.0 / a7 * a6;
    double v29 = 1.0 / a7 * a5;
  }
  if (CA::OGL::Shape::clip_line((CA::OGL::Shape *)v31, &v30, &v29, &v28, (double *)this + 1, a12))
  {
    double result = v31[0];
    double v15 = v29 - v31[0];
    double v16 = v28 - v30;
    double v17 = vabdd_f64(v29, v31[0]);
    double v18 = vabdd_f64(v28, v30);
    if (v17 <= v18)
    {
      if (v18 > v17)
      {
        uint64_t v23 = *((void *)this + 6);
        uint64_t v24 = v16 > 0.0 ? *((void *)this + 6) : -v23;
        if (((int)v18 & 0x80000000) == 0)
        {
          double v25 = v15 / v18;
          uint64_t v26 = *((void *)this + 5) + v23 * (uint64_t)(v30 - *((double *)this + 2));
          double result = v31[0] - *((double *)this + 1);
          int v27 = (int)v18 + 1;
          do
          {
            *(unsigned char *)(v26 + (uint64_t)result) = -1;
            double result = result + v25;
            v26 += v24;
            --v27;
          }
          while (v27);
        }
      }
    }
    else
    {
      uint64_t v19 = -1;
      if (v15 > 0.0) {
        uint64_t v19 = 1;
      }
      if (((int)v17 & 0x80000000) == 0)
      {
        uint64_t v20 = *((void *)this + 6);
        uint64_t v21 = *((void *)this + 5) + (int)(v31[0] - *((double *)this + 1));
        double result = v30 - *((double *)this + 2);
        int v22 = (int)v17 + 1;
        do
        {
          *(unsigned char *)(v21 + v20 * (uint64_t)result) = -1;
          v21 += v19;
          double result = result + v16 / v17;
          --v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t CA::OGL::Shape::flatten_quad(uint64_t (***a1)(void, __n128, __n128, __n128, __n128, __n128, __n128), __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, double a8, double a9, double a10)
{
  double v20 = a5.n128_f64[0] - a2.n128_f64[0];
  double v21 = a6.n128_f64[0] - a3.n128_f64[0];
  double v22 = a8 - a5.n128_f64[0];
  double v23 = a9 - a6.n128_f64[0];
  if (vabdd_f64(a9 - a6.n128_f64[0], a6.n128_f64[0] - a3.n128_f64[0])
     + vabdd_f64(a8 - a5.n128_f64[0], a5.n128_f64[0] - a2.n128_f64[0]) >= 2.0)
  {
    do
    {
      double v22 = v22 * 0.5;
      double v23 = v23 * 0.5;
      double v24 = a2.n128_f64[0] + v20 * 0.5 + (a8 - v22 - (a2.n128_f64[0] + v20 * 0.5)) * 0.5;
      double v25 = a3.n128_f64[0] + v21 * 0.5 + (a9 - v23 - (a3.n128_f64[0] + v21 * 0.5)) * 0.5;
      double v26 = a4.n128_f64[0]
          + (a7.n128_f64[0] - a4.n128_f64[0]) * 0.5
          + (a10 + (a7.n128_f64[0] - a10) * 0.5 - (a4.n128_f64[0] + (a7.n128_f64[0] - a4.n128_f64[0]) * 0.5)) * 0.5;
      double v29 = a10 + (a7.n128_f64[0] - a10) * 0.5;
      CA::OGL::Shape::flatten_quad(a1);
      double v20 = a8 - v22 - v24;
      a7.n128_f64[0] = v29;
      double v21 = a9 - v23 - v25;
      a4.n128_f64[0] = v26;
      a3.n128_f64[0] = v25;
      a2.n128_f64[0] = v24;
    }
    while (vabdd_f64(v23, v21) + vabdd_f64(v22, v20) >= 2.0);
  }
  else
  {
    double v24 = a2.n128_f64[0];
    double v25 = a3.n128_f64[0];
    double v26 = a4.n128_f64[0];
  }
  int v27 = **a1;
  a2.n128_f64[0] = v24;
  a3.n128_f64[0] = v25;
  a4.n128_f64[0] = v26;
  a5.n128_f64[0] = a8;
  a6.n128_f64[0] = a9;
  a7.n128_f64[0] = a10;

  return v27(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t CA::OGL::Shape::flatten_cube(uint64_t (***a1)(void, __n128, __n128, __n128, __n128, __n128, __n128), int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  double v40 = a8.n128_f64[0];
  double v23 = a6.n128_f64[0];
  double v25 = 2.0;
  uint64_t v26 = (a2 + 1);
  while (v26 != 25)
  {
    double v27 = a12 - a9;
    double v28 = a13 - a10;
    if (vabdd_f64(a12 - a9, a9 - v23)
       + vabdd_f64(a9 - v23, v23 - a3.n128_f64[0])
       + vabdd_f64(a10 - a7.n128_f64[0], a7.n128_f64[0] - a4.n128_f64[0])
       + vabdd_f64(a13 - a10, a10 - a7.n128_f64[0]) < v25)
      break;
    double v29 = v27 + v27 + (a9 + a9 - (v23 + a12)) * 0.5;
    double v30 = a3.n128_f64[0]
        + ((v23 - a3.n128_f64[0]) * 3.0
         + ((a9 + a3.n128_f64[0] - v23 * v25) * 3.0 + (a12 - a3.n128_f64[0] + (a9 - v23) * -3.0) * 0.5) * 0.5)
        * 0.5;
    double v31 = a4.n128_f64[0]
        + ((a7.n128_f64[0] - a4.n128_f64[0]) * 3.0
         + ((a10 + a4.n128_f64[0] - a7.n128_f64[0] * v25) * 3.0
          + (a13 - a4.n128_f64[0] + (a10 - a7.n128_f64[0]) * -3.0) * 0.5)
         * 0.5)
        * 0.5;
    double v32 = a5.n128_f64[0]
        + ((v40 - a5.n128_f64[0]) * 3.0
         + ((a11 + a5.n128_f64[0] - v40 * v25) * 3.0 + (a14 - a5.n128_f64[0] + (a11 - v40) * -3.0) * 0.5) * 0.5)
        * 0.5;
    double v37 = a13 - (v28 + v28 + (a10 + a10 - (a7.n128_f64[0] + a13)) * 0.5) * 0.5;
    double v38 = a12 - v29 * 0.5;
    double v33 = a14 - (a14 - a11 + a14 - a11 + (a11 + a11 - (v40 + a14)) * 0.5) * 0.5;
    a9 = a12 - v27 * 0.5;
    a10 = a13 - v28 * 0.5;
    a11 = a14 - (a14 - a11) * 0.5;
    double v40 = v33;
    double v34 = a12;
    CA::OGL::Shape::flatten_cube(a1, v26);
    double v25 = 2.0;
    a12 = v34;
    uint64_t v26 = (v26 + 1);
    a3.n128_f64[0] = v30;
    a4.n128_f64[0] = v31;
    a7.n128_f64[0] = v37;
    double v23 = v38;
    a5.n128_f64[0] = v32;
  }
  uint64_t v35 = **a1;
  a6.n128_f64[0] = a12;
  a7.n128_f64[0] = a13;
  a8.n128_f64[0] = a14;

  return v35(a1, a3, a4, a5, a6, a7, a8);
}

void *CA::OGL::Shape::HairlineRenderer<CA::OGL::RenderPathIterator>::render_mask(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, double a5, double a6, double a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int32x2_t v10 = *a4;
  int32x2_t v11 = a4[1];
  v12.i64[0] = a4->i32[0];
  v12.i64[1] = (int)HIDWORD(*(unint64_t *)a4);
  __n128 v22 = (__n128)vcvtq_f64_s64(v12);
  double v13 = *(void **)(a1 + 8);
  int32x2_t v14 = vadd_s32(v11, v10);
  v12.i64[0] = v14.i32[0];
  v12.i64[1] = v14.i32[1];
  __n128 v15 = (__n128)vdupq_n_s64(0xBF50624DD2F1A9FCLL);
  float64x2_t v23 = vaddq_f64(vcvtq_f64_s64(v12), (float64x2_t)v15);
  double v21 = &unk_1ED02BA88;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  double v17 = (uint64_t (***)(double, double, double, double, double, double))&v21;
  return CA::OGL::RenderPathIterator::iterate<CA::OGL::Shape::FlatteningIterator>(v13, &v17, (__n128)0, v15, v22, a8, a9, a10);
}

void *CA::OGL::RenderPathIterator::iterate<CA::OGL::Shape::FlatteningIterator>(void *result, uint64_t (****a2)(double, double, double, double, double, double), __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  double v9 = *(double **)(*result + 32);
  int32x2_t v10 = *(unsigned char **)(*result + 40);
  uint64_t v11 = *(unsigned int *)(*result + 20);
  int64x2_t v12 = &v10[v11];
  if (result[1])
  {
    if (v11)
    {
      double v13 = result;
      __n128 v14 = (__n128)xmmword_184997D60;
      while (1)
      {
        v15.n128_u64[1] = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        __n128 v35 = 0u;
        float64x2_t v32 = 0u;
        __n128 v33 = 0u;
        int v16 = *v10;
        if ((v16 - 1) < 2) {
          break;
        }
        if (v16 == 3)
        {
          uint64_t v17 = 1;
LABEL_10:
          long long v34 = *((_OWORD *)v9 + 1);
          __n128 v35 = v14;
LABEL_11:
          float64x2_t v32 = *(float64x2_t *)v9;
          __n128 v33 = v14;
          uint64_t v18 = v17 + 1;
          double result = (void *)CA::Transform::apply_to_point4(v13[1], &v32, &v32, (const double *)(v17 + 1));
          __n128 v14 = (__n128)xmmword_184997D60;
          v9 += 2 * v18;
          int v16 = *v10;
          goto LABEL_12;
        }
        if (v16 == 4)
        {
          long long v36 = *((_OWORD *)v9 + 2);
          *((void *)&v37 + 1) = 0x3FF0000000000000;
          uint64_t v17 = 2;
          goto LABEL_10;
        }
LABEL_12:
        switch(v16)
        {
          case 0:
            double result = (void *)(***a2)(*((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 3));
            __n128 v14 = (__n128)xmmword_184997D60;
            *((_OWORD *)a2 + 2) = *(_OWORD *)(a2 + 1);
            a2[6] = a2[3];
            break;
          case 1:
            float64x2_t v19 = v32;
            long long v20 = (uint64_t (***)(double, double, double, double, double, double))v33.n128_u64[1];
            *(float64x2_t *)(a2 + 1) = v32;
            a2[5] = *(uint64_t (****)(double, double, double, double, double, double))&v19.f64[1];
            a2[6] = v20;
            a2[3] = v20;
            a2[4] = *(uint64_t (****)(double, double, double, double, double, double))&v19.f64[0];
            break;
          case 2:
            float64_t v22 = v32.f64[1];
            float64_t v21 = v32.f64[0];
            float64x2_t v23 = (uint64_t (***)(double, double, double, double, double, double))v33.n128_u64[1];
            double result = (void *)(***a2)(*((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), v32.f64[0], v32.f64[1], v33.n128_f64[1]);
            goto LABEL_18;
          case 3:
            a7.n128_u64[0] = *(void *)&v32.f64[1];
            v14.n128_u64[0] = *(void *)&v32.f64[0];
            a8.n128_u64[0] = v33.n128_u64[1];
            float64_t v22 = *((double *)&v34 + 1);
            float64_t v21 = *(double *)&v34;
            float64x2_t v23 = (uint64_t (***)(double, double, double, double, double, double))v35.n128_u64[1];
            v15.n128_u64[0] = (unint64_t)a2[4];
            a4.n128_u64[0] = (unint64_t)a2[5];
            a5.n128_u64[0] = (unint64_t)a2[6];
            double result = (void *)CA::OGL::Shape::flatten_quad((uint64_t (***)(void, __n128, __n128, __n128, __n128, __n128, __n128))*a2, v15, a4, a5, v14, a7, a8, *(double *)&v34, *((double *)&v34 + 1), v35.n128_f64[1]);
            goto LABEL_18;
          case 4:
            a7.n128_u64[0] = *(void *)&v32.f64[1];
            v14.n128_u64[0] = *(void *)&v32.f64[0];
            a8.n128_u64[0] = v33.n128_u64[1];
            float64_t v22 = *((double *)&v36 + 1);
            float64_t v21 = *(double *)&v36;
            float64x2_t v23 = (uint64_t (***)(double, double, double, double, double, double))*((void *)&v37 + 1);
            v15.n128_u64[0] = (unint64_t)a2[4];
            a4.n128_u64[0] = (unint64_t)a2[5];
            a5.n128_u64[0] = (unint64_t)a2[6];
            double result = (void *)CA::OGL::Shape::flatten_cube((uint64_t (***)(void, __n128, __n128, __n128, __n128, __n128, __n128))*a2, 0, v15, a4, a5, v14, a7, a8, *(double *)&v34, *((double *)&v34 + 1), v35.n128_f64[1], *(double *)&v36, *((double *)&v36 + 1), *((double *)&v37 + 1));
LABEL_18:
            __n128 v14 = (__n128)xmmword_184997D60;
            *((float64_t *)a2 + 4) = v21;
            *((float64_t *)a2 + 5) = v22;
            a2[6] = v23;
            break;
          default:
            break;
        }
        if (++v10 >= v12) {
          return result;
        }
      }
      uint64_t v17 = 0;
      goto LABEL_11;
    }
  }
  else if (v11)
  {
    do
    {
      switch(*v10)
      {
        case 0:
          double result = (void *)(***a2)(*((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 3));
          a3 = *(__n128 *)(a2 + 1);
          *((__n128 *)a2 + 2) = a3;
          a2[6] = a2[3];
          break;
        case 1:
          double v28 = *(uint64_t (****)(double, double, double, double, double, double))v9;
          double v29 = (uint64_t (***)(double, double, double, double, double, double))*((void *)v9 + 1);
          v9 += 2;
          a2[4] = v28;
          a2[5] = v29;
          a2[1] = v28;
          a2[2] = v29;
          a2[6] = (uint64_t (***)(double, double, double, double, double, double))0x3FF0000000000000;
          a2[3] = (uint64_t (***)(double, double, double, double, double, double))0x3FF0000000000000;
          break;
        case 2:
          double v24 = *v9;
          double v25 = v9[1];
          v9 += 2;
          double result = (void *)(***a2)(*((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), v24, v25, 1.0);
          *((double *)a2 + 4) = v24;
          *((double *)a2 + 5) = v25;
          goto LABEL_28;
        case 3:
          a6.n128_f64[0] = *v9;
          a7.n128_f64[0] = v9[1];
          double v30 = v9[2];
          double v31 = v9[3];
          a3.n128_u64[0] = (unint64_t)a2[4];
          a4.n128_u64[0] = (unint64_t)a2[5];
          a5.n128_u64[0] = (unint64_t)a2[6];
          a8.n128_u64[0] = 1.0;
          double result = (void *)CA::OGL::Shape::flatten_quad((uint64_t (***)(void, __n128, __n128, __n128, __n128, __n128, __n128))*a2, a3, a4, a5, a6, a7, a8, v30, v31, 1.0);
          *((double *)a2 + 4) = v30;
          *((double *)a2 + 5) = v31;
          v9 += 4;
          goto LABEL_28;
        case 4:
          a6.n128_f64[0] = *v9;
          a7.n128_f64[0] = v9[1];
          double v26 = v9[4];
          double v27 = v9[5];
          a3.n128_u64[0] = (unint64_t)a2[4];
          a4.n128_u64[0] = (unint64_t)a2[5];
          a5.n128_u64[0] = (unint64_t)a2[6];
          a8.n128_u64[0] = 1.0;
          double result = (void *)CA::OGL::Shape::flatten_cube((uint64_t (***)(void, __n128, __n128, __n128, __n128, __n128, __n128))*a2, 0, a3, a4, a5, a6, a7, a8, v9[2], v9[3], 1.0, v26, v27, 1.0);
          *((double *)a2 + 4) = v26;
          *((double *)a2 + 5) = v27;
          v9 += 6;
LABEL_28:
          a2[6] = (uint64_t (***)(double, double, double, double, double, double))0x3FF0000000000000;
          break;
        default:
          break;
      }
      ++v10;
    }
    while (v10 < v12);
  }
  return result;
}

void *CA::OGL::Shape::HairlineRenderer<CA::OGL::RenderPathIterator>::render_lines(uint64_t a1, uint64_t a2, int32x2_t *a3, double a4, double a5, double a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v9.i64[0] = a3->i32[0];
  v9.i64[1] = (int)HIDWORD(*(unint64_t *)a3);
  __n128 v10 = (__n128)vcvtq_f64_s64(v9);
  uint64_t v11 = *(void **)(a1 + 8);
  int32x2_t v12 = vadd_s32(a3[1], *a3);
  v9.i64[0] = v12.i32[0];
  v9.i64[1] = v12.i32[1];
  __n128 v13 = (__n128)vdupq_n_s64(0xBF50624DD2F1A9FCLL);
  __n128 v20 = v10;
  float64x2_t v21 = vaddq_f64(vcvtq_f64_s64(v9), (float64x2_t)v13);
  float64x2_t v19 = &unk_1ED02BAA0;
  uint64_t v22 = a2;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  __n128 v15 = (uint64_t (***)(double, double, double, double, double, double))&v19;
  return CA::OGL::RenderPathIterator::iterate<CA::OGL::Shape::FlatteningIterator>(v11, &v15, (__n128)0, v13, v10, a7, a8, a9);
}

_DWORD *CA::CG::GaussianBlurStyle::copy(CA::CG::GaussianBlurStyle *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v3 = malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
  unint64_t v4 = v3;
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1ED029D48;
    int v5 = *((_DWORD *)this + 3);
    void v3[2] = 0;
    v3[3] = v5;
    *((void *)v3 + 2) = CGStyleRetain();
    long long v6 = *(_OWORD *)((char *)this + 56);
    long long v7 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(v4 + 1CASetDebugMessage("", 0) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(v4 + 6) = v7;
    *(_OWORD *)(v4 + 14) = v6;
    v4[18] = *((_DWORD *)this + 18);
    uint64_t v4[2] = 1;
    *(void *)unint64_t v4 = &unk_1ED029030;
    *((void *)v4 + 1CASetDebugMessage("", 0) = *((void *)this + 10);
  }
  return v4;
}

uint64_t CA::CG::GaussianBlurStyle::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

double *CA::CG::GaussianBlurStyle::expand_layer_roi(CA::CG::GaussianBlurStyle *this, float64x2_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  float64x2_t v9 = *a2;
  float64x2_t v10 = a2[1];
  float64x2_t v11 = *a2;
  float64x2_t v12 = v10;
  double result = CA::BoundsImpl::inset(v11.f64, *((double *)this + 10) * -2.8 + -1.0, *((double *)this + 10) * -2.8 + -1.0);
  float64x2_t v4 = v12;
  int64x2_t v5 = vclezq_f64(v10);
  int64x2_t v6 = vclezq_f64(v12);
  int32x2_t v7 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v6, v5), (int8x16_t)vzip2q_s64(v6, v5))));
  if (v7.i8[4])
  {
    if (v7.i8[0]) {
      return result;
    }
    float64x2_t v8 = v11;
  }
  else
  {
    if (v7.i8[0]) {
      return result;
    }
    float64x2_t v8 = vminnmq_f64(v9, v11);
    float64x2_t v4 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v9, v10), vaddq_f64(v11, v12)), v8);
  }
  *a2 = v8;
  a2[1] = v4;
  return result;
}

void CA::CG::GaussianBlurStyle::~GaussianBlurStyle(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED029D48;
  CA::CG::Renderer::release_object(this[2], a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  *this = (CA::CG::Renderer *)&unk_1ED029D48;
  CA::CG::Renderer::release_object(this[2], a2);
}

double CA::Render::convert_color(uint64_t a1, uint64_t a2)
{
  CGColorTransformConvertColorComponents();
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 16) = 0;
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  return result;
}

void CA::Render::GradientLayer::show(CA::Render::GradientLayer *this, int a2, char a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)this + 26);
  int32x2_t v7 = "conic";
  float64x2_t v8 = "axial";
  BOOL v9 = v6 != 51;
  if (v6 != 51) {
    float64x2_t v8 = 0;
  }
  if (v6 == 117) {
    BOOL v9 = 0;
  }
  else {
    int32x2_t v7 = v8;
  }
  BOOL v10 = v6 != 453 && v9;
  if (v6 == 453) {
    *(double *)&float64x2_t v11 = COERCE_DOUBLE("radial");
  }
  else {
    float64x2_t v11 = v7;
  }
  BOOL v12 = x_log_hook_p();
  if (a3)
  {
    if (v12)
    {
      x_log_();
    }
    else
    {
      double v28 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, "gradient-layer", buf, 2u);
      }
    }
    if (!v10)
    {
      if (x_log_hook_p())
      {
LABEL_36:
        x_log_();
        return;
      }
      uint64_t v29 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        double v31 = *(double *)&v11;
        double v25 = " %s";
        double v26 = v29;
        uint32_t v27 = 12;
        goto LABEL_39;
      }
    }
  }
  else
  {
    if (v12)
    {
      x_log_();
    }
    else
    {
      uint64_t v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "(gradient-layer", buf, 2u);
      }
    }
    __n128 v14 = (CA::Render *)(a2 + 1);
    if (!v10)
    {
      CA::Render::show_newline(v14);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        __n128 v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          double v31 = *(double *)&v11;
          _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(gradientType %s)", buf, 0xCu);
        }
      }
    }
    double v17 = *((double *)this + 9);
    uint64_t v16 = *((void *)this + 10);
    double v19 = *((double *)this + 11);
    uint64_t v18 = *((void *)this + 12);
    CA::Render::show_newline(v14);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      __n128 v20 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        double v31 = v17;
        __int16 v32 = 2048;
        uint64_t v33 = v16;
        _os_log_impl(&dword_184668000, v20, OS_LOG_TYPE_DEFAULT, "(startPoint [%.10g %.10g])", buf, 0x16u);
      }
    }
    CA::Render::show_newline(v14);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float64x2_t v21 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        double v31 = v19;
        __int16 v32 = 2048;
        uint64_t v33 = v18;
        _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_DEFAULT, "(endPoint [%.10g %.10g])", buf, 0x16u);
      }
    }
    if (*((float *)this + 27) != 1.0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v22 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v23 = *((float *)this + 27);
          *(_DWORD *)long long buf = 134217984;
          double v31 = v23;
          _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "(noiseScale %g)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p()) {
      goto LABEL_36;
    }
    uint64_t v24 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      double v25 = ")";
      double v26 = v24;
      uint32_t v27 = 2;
LABEL_39:
      _os_log_impl(&dword_184668000, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
    }
  }
}

void CA::OGL::fill_surface_mesh_3d(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5, int a6, int a7, double a8, float a9)
{
  int v119 = a7;
  double v117 = a8;
  v128[7] = *MEMORY[0x1E4F143B8];
  uint64_t v120 = *(void *)(a1 + 248);
  uint64_t v16 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  CA::Render::MeshTransform::update_locked((CA::Render::MeshTransform *)a2, 1);
  os_unfair_lock_unlock(v16);
  uint64_t v17 = *(void *)(a2 + 32) - *(void *)(a2 + 24);
  size_t v18 = v17 >> 1;
  unint64_t v113 = v17;
  if ((unint64_t)v17 > 0x2001)
  {
    float64x2_t v21 = (float32x2_t *)malloc_type_malloc(v18, 0x56ED0300uLL);
    if (!v21) {
      return;
    }
  }
  else
  {
    MEMORY[0x1F4188790](v18);
    __n128 v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v20, v19);
    float64x2_t v21 = (float32x2_t *)((unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (!v21) {
      return;
    }
  }
  LODWORD(v116) = a6;
  uint64_t v22 = v120;
  uint64_t v118 = *(void *)(v120 + 32);
  float v125 = 0.0;
  uint64_t v124 = 0;
  float v123 = 0.0;
  float32x2_t v122 = 0;
  CA::Render::MeshTransform::vertex_transform(*(_DWORD *)(a2 + 96), (float64x2_t *)a3, (uint64_t)&v124, &v122);
  v126[0] = (float64x2_t)xmmword_184997D50;
  v126[1] = 0u;
  v126[2] = (float64x2_t)xmmword_184997D60;
  memset(&v126[3], 0, 32);
  v126[5] = (float64x2_t)xmmword_184997D50;
  v126[6] = 0u;
  v126[7] = (float64x2_t)xmmword_184997D60;
  __asm { FMOV            V0.2D, #1.0 }
  v126[8] = _Q0;
  uint64_t v127 = 0;
  float64x2_t v28 = CA::Transform::translate((CA::Transform *)v126, v122.f32[0], v122.f32[1], v123);
  v28.f64[0] = *(float *)&v124;
  CA::Transform::scale(v126, v28, *((float *)&v124 + 1), v125);
  CA::Transform::concat((CA::Transform *)v126, *(float64x2_t **)(v22 + 24), v29, v30);
  uint64_t v31 = CA::Transform::apply_to_point4((uint64_t)v126, v21, (float32x2_t *)(*(void *)(a2 + 24) + 16), (const float *)0x20, (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  uint64_t v32 = *(void *)(a2 + 48);
  uint64_t v33 = *(void *)(a2 + 56);
  uint64_t v34 = v33 - v32;
  unint64_t v111 = (unint64_t)(v33 - v32) >> 4;
  if (v111 > 0x400)
  {
    long long v36 = (char *)malloc_type_malloc(2 * (v33 - v32), 0x10800407411B482uLL);
    if (!v36) {
      goto LABEL_56;
    }
    uint64_t v112 = v36;
    uint64_t v32 = *(void *)(a2 + 48);
    uint64_t v33 = *(void *)(a2 + 56);
    uint64_t v34 = v33 - v32;
  }
  else
  {
    MEMORY[0x1F4188790](v31);
    uint64_t v112 = (char *)&v110 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v112, v35);
  }
  unint64_t v37 = v34 >> 4;
  _ZF = v33 == v32;
  uint64_t v38 = v112;
  if (!_ZF)
  {
    uint64_t v39 = 0;
    if (v37 <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = v34 >> 4;
    }
    uint64_t v41 = v112 + 8;
    uint64_t v42 = (unsigned int *)(v32 + 8);
    do
    {
      float v43 = v21[2 * *(v42 - 1) + 1].f32[0] + v21[2 * *(v42 - 2) + 1].f32[0];
      uint64_t v44 = *v42;
      uint64_t v45 = v42[1];
      v42 += 4;
      *(float *)&int v46 = (float)(v43 + (float)(v21[2 * v44 + 1].f32[0] + v21[2 * v45 + 1].f32[0])) * 0.25;
      *((_DWORD *)v41 - 2) = ((v46 >> 31) | 0x80000000) ^ v46;
      *uint64_t v41 = v39;
      v41 += 2;
      ++v39;
    }
    while (v40 != v39);
  }
  CA::radix_sort(v37);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 1;
  if (v118 == 0x3C003C003C003C00) {
    char v47 = 1;
  }
  else {
    char v47 = 3;
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = v47;
  CA::OGL::Context::bind_surface(a1, (uint64_t)a4, 0, a5, v116, a9);
  float64x2_t v49 = *(float32x4_t **)(a1 + 16);
  if (v49[30].u8[0] >= 2u)
  {
    v49[30].i8[1] |= 1u;
    float64x2_t v49 = *(float32x4_t **)(a1 + 16);
  }
  v50.i64[0] = v124;
  int32x2_t v51 = (int32x2_t)a4[4];
  *(float32x2_t *)v52.i8 = vsub_f32(v122, vcvt_f32_s32(v51));
  v52.i32[2] = LODWORD(v117);
  float32x4_t v53 = v49[6];
  v52.i32[3] = LODWORD(v117);
  v50.i64[1] = v49[6].i64[0];
  float32x4_t v54 = vmulq_f32(v50, (float32x4_t)vextq_s8(v52, v52, 8uLL));
  v52.i64[0] = vmulq_f32(v54, v53).u64[0];
  v52.i64[1] = vaddq_f32(v54, v53).i64[1];
  v49[6] = (float32x4_t)v52;
  if (v119)
  {
    __int16 v55 = *(const CA::Transform **)(v120 + 24);
    long long v56 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)unsigned int v128 = *(_OWORD *)a3;
    *(_OWORD *)&v128[2] = v56;
    CA::Rect::apply_transform((int8x16_t *)v128, v55, v48);
    if (*(float *)&v117 != 1.0)
    {
      double v57 = *(float *)&v117;
      if (*(double *)&v128[2] < 1.79769313e308)
      {
        *(double *)unsigned int v128 = *(double *)v128 * v57;
        *(double *)&v128[2] = *(double *)&v128[2] * v57;
      }
      if (*(double *)&v128[3] < 1.79769313e308)
      {
        *(double *)&v128[1] = *(double *)&v128[1] * v57;
        *(double *)&v128[3] = *(double *)&v128[3] * v57;
      }
    }
    v58.i64[0] = v51.i32[0];
    v58.i64[1] = v51.i32[1];
    float64x2_t v59 = vsubq_f64(*(float64x2_t *)v128, vcvtq_f64_s64(v58));
    uint64_t v60 = a4[3];
    v58.i64[0] = (int)v60;
    v58.i64[1] = SHIDWORD(v60);
    float64x2_t v61 = vcvtq_f64_s64(v58);
    v49[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v128[2], v61)), vdivq_f64(v59, v61));
  }
  if (*(unsigned char *)(a2 + 108))
  {
    uint64_t v62 = a4[5];
    v63.i64[0] = (int)v62;
    v63.i64[1] = SHIDWORD(v62);
    __asm { FMOV            V1.2D, #-0.5 }
    float64x2_t v65 = vaddq_f64(vcvtq_f64_s64(v63), _Q1);
    _Q1.f64[0] = (float64_t)a4[3];
    v63.i64[0] = SLODWORD(_Q1.f64[0]);
    v63.i64[1] = SHIDWORD(_Q1.f64[0]);
    float64x2_t v66 = vcvtq_f64_s64(v63);
    __asm { FMOV            V2.2D, #0.5 }
    v49[1].i8[3] = 5;
    *(float32x4_t *)(*(void *)(a1 + 16) + 368) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(_Q2, v66)), vdivq_f64(v65, v66));
  }
  uint64x2_t v110 = a4;
  uint64_t v68 = *(void *)(*(void *)(a1 + 248) + 8);
  v128[0] = a1;
  v128[1] = v68;
  memset(&v128[2], 0, 40);
  LOWORD(v128[4]) = 256;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v128);
  v121[0] = 0;
  v121[1] = 0;
  *(void *)&double v117 = a1 + 834;
  uint64_t v114 = v38 + 8;
  long long v116 = xmmword_184997E70;
  double v115 = 0.000001;
LABEL_30:
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v128, v121))
  {
    uint64_t v69 = *(void *)(a2 + 48);
    if (*(void *)(a2 + 56) != v69)
    {
      unint64_t v70 = 0;
      CFDictionaryRef v71 = v114;
      while (1)
      {
        float v72 = (unsigned int *)(v69 + 16 * *(void *)v71);
        uint64_t v74 = *v72;
        uint64_t v73 = v72[1];
        uint64_t v76 = v72[2];
        uint64_t v75 = v72[3];
        uint64_t v77 = *(void *)(a2 + 24);
        signed int v78 = (float *)(v77 + 32 * v74);
        float v79 = *v78;
        float v80 = v78[1];
        int v81 = (float *)(v77 + 32 * v73);
        float v83 = *v81;
        float v82 = v81[1];
        BOOL v84 = (float *)(v77 + 32 * v76);
        float v86 = *v84;
        float v85 = v84[1];
        uint64_t v87 = (float *)(v77 + 32 * v75);
        float v88 = *v87;
        float v89 = v87[1];
        uint64_t v90 = 6;
        if (!*(_DWORD *)(a1 + 92)) {
          uint64_t v90 = 4;
        }
        uint64_t v91 = *(void *)(a1 + 128);
        if ((unint64_t)(v91 + 4) > *(void *)(a1 + 136)
          || (unint64_t v92 = *(void *)(a1 + 112)) != 0 && *(void *)(a1 + 104) + v90 > v92)
        {
          *(_WORD *)(a1 + 832) |= 0x20u;
          CA::OGL::Context::array_flush(a1);
          uint64_t v91 = 0;
          *(double *)(a1 + 96) = v117;
          *(_OWORD *)(a1 + 104) = v116;
        }
        uint64_t v93 = *(void *)(a1 + 120);
        *(void *)(a1 + 128) = v91 + 4;
        long long v94 = *(_OWORD *)v21[2 * v73].f32;
        long long v95 = *(_OWORD *)v21[2 * v76].f32;
        long long v96 = *(_OWORD *)v21[2 * v75].f32;
        uint64_t v97 = (_OWORD *)(v93 + 48 * v91);
        *uint64_t v97 = *(_OWORD *)v21[2 * v74].f32;
        v97[3] = v94;
        v97[6] = v95;
        v97[9] = v96;
        if (*(void *)(a1 + 96)) {
          CA::OGL::Context::array_indices(a1, v91);
        }
        if (!v119) {
          goto LABEL_47;
        }
        uint64_t v98 = *(double **)(v120 + 24);
        double v99 = v98[1];
        double v100 = v98[4];
        if (fabs(v99) >= v115 || fabs(v100) >= v115)
        {
          BOOL v102 = v99 < 0.0;
          float v106 = 1.0 - v80;
          float v107 = 1.0 - v82;
          float v108 = 1.0 - v85;
          float v109 = 1.0 - v89;
          float v82 = v83;
          float v85 = v86;
          float v89 = v88;
          float v80 = v79;
          float v88 = v109;
          float v86 = v108;
          float v83 = v107;
          float v79 = v106;
          if (v100 > 0.0)
          {
LABEL_52:
            float v79 = 1.0 - v79;
            float v83 = 1.0 - v83;
            float v86 = 1.0 - v86;
            float v88 = 1.0 - v88;
            if (!v102) {
              goto LABEL_47;
            }
LABEL_46:
            float v80 = 1.0 - v80;
            float v82 = 1.0 - v82;
            float v85 = 1.0 - v85;
            float v89 = 1.0 - v89;
            goto LABEL_47;
          }
        }
        else
        {
          double v101 = *v98;
          BOOL v102 = v98[5] < 0.0;
          if (v101 < 0.0) {
            goto LABEL_52;
          }
        }
        if (v102) {
          goto LABEL_46;
        }
LABEL_47:
        uint64_t v103 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
        *(float *)(v103 - 176) = v79;
        *(float *)(v103 - 172) = v80;
        *(float *)(v103 - 128) = v83;
        *(float *)(v103 - 124) = v82;
        *(float *)(v103 - 8CASetDebugMessage("", 0) = v86;
        *(float *)(v103 - 76) = v85;
        *(float *)(v103 - 32) = v88;
        *(float *)(v103 - 28) = v89;
        if (v118 != 0x3C003C003C003C00)
        {
          uint64_t v104 = *(void *)(v120 + 32);
          uint64_t v105 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
          *(void *)(v105 - 16CASetDebugMessage("", 0) = v104;
          *(void *)(v105 - 112) = v104;
          *(void *)(v105 - 64) = v104;
          *(void *)(v105 - 16) = v104;
        }
        ++v70;
        uint64_t v69 = *(void *)(a2 + 48);
        v71 += 16;
        if (v70 >= (*(void *)(a2 + 56) - v69) >> 4) {
          goto LABEL_30;
        }
      }
    }
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 481) &= ~1u;
  CA::OGL::Context::unbind_surface((void *)a1, (uint64_t)v110, 0);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
  if (v111 >= 0x401) {
    free(v112);
  }
LABEL_56:
  if (v113 > 0x2000) {
    free(v21);
  }
}

void CA::Render::TileCache::image_deleted(CA::Render::TileCache *this, CA::Render::Object *a2, void *a3, void *a4)
{
  int v6 = (os_unfair_lock_s *)((char *)a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 10);
  uint64_t v7 = x_hash_table_remove(*((void *)a2 + 2), (uint64_t)this);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *((void *)a2 + 3);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    float64x2_t v11 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    void *v11 = v8;
    v11[1] = v9;
    *((void *)a2 + 3) = v11;
  }

  os_unfair_lock_unlock(v6);
}

void CA::Render::free_entry(uint64_t a1, void *a2, void *a3)
{
  CA::Render::tile_cache_entry_release_images(a3, (uint64_t)a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, a2);
}

void *CA::Render::tile_cache_entry_release_images(void *result, uint64_t a2)
{
  uint64_t v3 = *(atomic_uint **)(a2 + 16);
  if (v3)
  {
    float64x2_t v4 = (uint64_t (*)(void))result[1];
    if (v4)
    {
      double result = (void *)v4(*result);
      uint64_t v3 = *(atomic_uint **)(a2 + 16);
    }
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
      double result = (void *)(*(uint64_t (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    }
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t CA::Render::TileCache::collect_entry(uint64_t a1, uint64_t a2, double *a3)
{
  double v3 = *a3;
  double v4 = *(double *)(a2 + 24);
  if (v4 <= a3[1])
  {
    uint64_t v7 = *(void *)(*(void *)&v3 + 24);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v9 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    void *v9 = a2;
    v9[1] = v7;
    *(void *)(*(void *)&v3 + 24) = v9;
    return 1;
  }
  else
  {
    uint64_t result = 0;
    if (v4 < *(double *)(*(void *)&v3 + 32)) {
      *(double *)(*(void *)&v3 + 32) = v4;
    }
  }
  return result;
}

CA::Render::Texture *CA::Render::TileCache::get_image(CA::Render::TileCache *this, CA::Render::Image *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7)
{
  unsigned int v8 = vcvtpd_u64_f64(a5 + a3);
  v47[1] = *MEMORY[0x1E4F143B8];
  unsigned int v9 = vcvtpd_u64_f64(a6 + a4);
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return 0;
  }
  __n128 v14 = (CA::Render *)*((unsigned __int8 *)a2 + 152);
  if (v14 > 0xA || ((1 << (char)v14) & 0x70F) == 0) {
    return 0;
  }
  float64x2_t v11 = 0;
  if (v8 <= 0x800 && v9 <= 0x800)
  {
    unsigned int v17 = *((_DWORD *)a2 + 4);
    unsigned int v16 = *((_DWORD *)a2 + 5);
    if (v17 <= v8 || v16 <= v9) {
      return 0;
    }
    uint64_t v24 = (os_unfair_lock_s *)((char *)this + 40);
    os_unfair_lock_lock((os_unfair_lock_t)this + 10);
    uint64_t v25 = x_hash_table_lookup(*((void *)this + 2), (uint64_t)a2, 0);
    if (!v25)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      uint64_t v25 = (uint64_t)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
      hash_table_modify(*((int **)this + 2), (uint64_t)a2, v25, 0);
    }
    os_unfair_lock_unlock(v24);
    double v27 = *(double *)(v25 + 24);
    if (v27 < a7)
    {
      *(double *)(v25 + 24) = a7;
      double v27 = a7;
    }
    if (v27 < *((double *)this + 4)) {
      *((double *)this + 4) = v27;
    }
    float64x2_t v11 = *(CA::Render::Texture **)(v25 + 16);
    if (!v11
      || vabdd_f64(*(double *)(v25 + 48), a5) >= 0.001
      || vabdd_f64(*(double *)(v25 + 56), a6) >= 0.001
      || vabdd_f64(*(double *)(v25 + 32), a3) >= 0.001
      || vabdd_f64(*(double *)(v25 + 40), a4) >= 0.001)
    {
      float64x2_t v28 = (char *)*((void *)a2 + 12);
      int v29 = *((unsigned __int8 *)a2 + 153);
      size_t v30 = *((void *)a2 + 20);
      if (v29 != 1)
      {
        unsigned int v31 = v17 >> 1;
        if (v17 >> 1 >= v8)
        {
          unsigned int v32 = v16 >> 1;
          if (v16 >> 1 >= v9)
          {
            int v33 = v29 - 2;
            uint64_t v34 = (size_t *)((char *)a2 + 168);
            do
            {
              unsigned int v17 = v31;
              uint64_t v35 = v16;
              unsigned int v16 = v32;
              v28 += v30 * v35;
              unsigned int v31 = v17 >> 1;
              if (v17 <= 1) {
                unsigned int v31 = 1;
              }
              v32 >>= 1;
              if (v16 <= 1) {
                unsigned int v32 = 1;
              }
              size_t v36 = *v34++;
              size_t v30 = v36;
              if (!v33) {
                break;
              }
              if (v31 < v8) {
                break;
              }
              --v33;
            }
            while (v32 >= v9);
          }
        }
      }
      int v46 = 0;
      if (v11
        && ((unint64_t v37 = (void (*)(void))*((void *)this + 1)) == 0
         || (v37(*(void *)this), (float64x2_t v11 = *(CA::Render::Texture **)(v25 + 16)) != 0))
        && *((_DWORD *)v11 + 4) == v17
        && *((_DWORD *)v11 + 5) == v16)
      {
        vImagePixelCount v38 = v16;
      }
      else
      {
        CA::Render::tile_cache_entry_release_images(this, v25);
        unint64_t v39 = CA::Render::format_rowbytes(v14, v17);
        v47[0] = v39;
        vImagePixelCount v38 = v16;
        if (is_mul_ok(v39, v16)) {
          uint64_t v40 = (CA::Render *)(v39 * v16);
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = (CGColorSpace *)CA::Render::aligned_malloc(v40, (unint64_t *)&v46, 0);
        if (!v41) {
          return 0;
        }
        float64x2_t v11 = CA::Render::Image::new_image(v14, v17, v16, 1u, *((CGColorSpace **)a2 + 6), v41, v47, (const unint64_t *)CA::Render::aligned_free, v46, v46);
        *(void *)(v25 + 16) = v11;
      }
      uint64_t v42 = *((void *)v11 + 12);
      v47[0] = *((void *)v11 + 20);
      float v43 = (unsigned __int16 *)(v42 + v47[0] * (v16 - v9));
      CA::downsample_image(v14, v28, v30, v17, v38, v43, v47[0], 4, a3, a4, a5, a6, v45);
      *(CGFloat *)(v25 + 32) = a3;
      *(CGFloat *)(v25 + 4CASetDebugMessage("", 0) = a4;
      *(CGFloat *)(v25 + 48) = a5;
      *(CGFloat *)(v25 + 56) = a6;
      if (v14 > 0x25) {
        int v44 = 0;
      }
      else {
        int v44 = dword_184999468[(void)v14];
      }
      if (v16 > v9) {
        CGBlt_copyBytes();
      }
      if (v17 > v8)
      {
        CGBlt_copyBytes();
        if (v16 > v9) {
          *((unsigned char *)v43 + v44 * v8 - v47[0]) = *((unsigned char *)v43 + v44 * v8 - v44);
        }
      }
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(v25 + 16) + 36), 1u);
      return *(CA::Render::Texture **)(v25 + 16);
    }
  }
  return v11;
}

uint64_t ___ZL23mode_dictionary_classesv_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t result = objc_msgSend(v0, "initWithObjects:", v1, v2, objc_opt_class(), 0);
  mode_dictionary_classes(void)::set = result;
  return result;
}

void sub_184975BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFDictionary *reload_mode(CFDictionaryRef theDict)
{
  v2[1] = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  CA::WindowServer::Display::Mode::Mode((CA::WindowServer::Display::Mode *)v2, theDict);
  return CA::WindowServer::Display::Mode::create_dictionary_representation((CA::WindowServer::Display::Mode *)v2);
}

void ___ZL17framework_versionv_block_invoke()
{
  id v0 = (void *)MEMORY[0x185324A30]();
  framework_version(void)::versiouint64_t n = (uint64_t)(id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleForClass:", objc_opt_class()), "objectForInfoDictionaryKey:", @"CFBundleVersion");
}

void sub_184976078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void cancelTimer(const void *a1, const void *a2, void *a3)
{
  double v3 = (void *)*((void *)a2 + 5);
  if (v3)
  {
    objc_msgSend(v3, "invalidate", a3);
    *((void *)a2 + 5) = 0;

    *((void *)a2 + 6) = 0;
  }
}

void release_layer(const void *a1, void *cf, void *a3)
{
  double v4 = (void *)cf[3];
  if (v4)
  {
    do
    {
      int64x2_t v5 = (void *)v4[1];

      cf[3] = v5;
      double v4 = v5;
    }
    while (v5);
  }

  CFRelease(cf);
}

uint64_t __CASetRootQueue_block_invoke(uint64_t result)
{
  CA::_root_queue = *(void *)(result + 32);
  return result;
}

void CA::CG::ImageDelegate::draw(CA::CG::ImageDelegate *this, CGContext *a2)
{
  CGContextSetCompositeOperation();
  CGContextSetInterpolationQuality(a2, *((CGInterpolationQuality *)this + 18));
  LODWORD(v4) = *((_DWORD *)this + 6);
  LODWORD(v5) = *((_DWORD *)this + 7);
  double v6 = (double)v4;
  double v7 = (double)v5;
  if (*((unsigned char *)this + 76) || CGImageIsMask(*((CGImageRef *)this + 8)))
  {
    CGContextSetRGBFillColor(a2, 1.0, 1.0, 1.0, 1.0);
    v18.origin.double x = 0.0;
    v18.origin.double y = 0.0;
    v18.size.double width = v6;
    v18.size.double height = v7;
    CGContextClipToMask(a2, v18, *((CGImageRef *)this + 8));
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    double v10 = v6;
    double v11 = v7;
    CGContextFillRect(a2, *(CGRect *)&v8);
  }
  else
  {
    BOOL v12 = (CGImage *)*((void *)this + 8);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    double v15 = v6;
    double v16 = v7;
    CGContextDrawImage(a2, *(CGRect *)&v13, v12);
  }
}

uint64_t CA::CG::ImageRectDelegate::draw_image_rects(uint64_t this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(this + 1392))
  {
    uint64_t v1 = this;
    long long v3 = 0u;
    long long v6 = 0u;
    uint64_t v2 = *(void *)(*(void *)(*(void *)(this + 16) + 248) + 8);
    v4[0] = *(void *)(this + 16);
    v4[1] = v2;
    long long v5 = 0u;
    uint64_t v4[2] = 0;
    WORD4(v5) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v4);
    while (1)
    {
      this = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v4, (int32x2_t *)&v3);
      if (!this) {
        break;
      }
      (*(void (**)(void, void, uint64_t))(**(void **)(v1 + 16) + 376))(*(void *)(v1 + 16), *(unsigned int *)(v1 + 1392), v1 + 112);
    }
    *(_DWORD *)(v1 + 1392) = 0;
  }
  return this;
}

double CA::CG::ImageRectDelegate::aa_quad(CA::CG::ImageRectDelegate *this, int32x2_t *a2, double *a3, __int32 a4)
{
  unsigned int v8 = *((_DWORD *)this + 348);
  if (v8 == 32)
  {
    CA::CG::ImageRectDelegate::draw_image_rects((uint64_t)this);
    unsigned int v8 = *((_DWORD *)this + 348);
  }
  *((_DWORD *)this + 348) = v8 + 1;
  uint64_t v9 = (float32x2_t *)((char *)this + 40 * v8);
  v9[14] = vcvt_f32_s32(*a2);
  v9[15] = vcvt_f32_s32(vadd_s32(a2[1], *a2));
  v9[16] = *(float32x2_t *)a3;
  double result = a3[1];
  *(double *)&v9[17] = result;
  v9[18].i32[0] = a4;
  return result;
}

double CA::CG::ImageRectDelegate::quad(CA::CG::ImageRectDelegate *this, int32x2_t *a2, double *a3)
{
  return CA::CG::ImageRectDelegate::aa_quad(this, a2, a3, 0);
}

void CA::CG::ImageRectDelegate::~ImageRectDelegate(CA::CG::ImageRectDelegate *this)
{
  CA::CG::ImageRectDelegate::~ImageRectDelegate(this);

  JUMPOUT(0x185323DC0);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED0290F0;
  CA::CG::ImageRectDelegate::draw_image_rects((uint64_t)this);
  (*(void (**)(void, void, uint64_t))(**((void **)this + 2) + 520))(*((void *)this + 2), 0, 1);
  uint64_t v2 = *((void *)this + 2);
  *(void *)(v2 + 816) = 0;
  ++*(_DWORD *)(v2 + 256);
  *(unsigned char *)(*(void *)(v2 + 16) + 16) = *((unsigned char *)this + 89);

  CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(this);
}

void CA::CG::DrawImage::draw_image(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
}

void CA::CG::fill_image(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  float v4 = *(float *)&v1;
  int v196 = v5;
  int v197 = v6;
  int v8 = v7;
  double v10 = v9;
  BOOL v12 = v11;
  uint64_t v14 = v13;
  uint64_t v200 = v15;
  uint64_t v252 = *MEMORY[0x1E4F143B8];
  double v209 = v13;
  size_t Width = CGImageGetWidth(v13);
  size_t Height = CGImageGetHeight(v14);
  MasCFIndex k = (CGImage *)CGImageGetMask();
  if (Mask)
  {
    __n128 v20 = Mask;
    int v21 = CGImageGetWidth(Mask);
    int v22 = CGImageGetHeight(v20);
    if (v22 > (int)Height) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = Height;
    }
    if (v22 > (int)Height) {
      unsigned int v24 = v21;
    }
    else {
      unsigned int v24 = Width;
    }
    BOOL v25 = v21 > (int)Width && v22 > (int)Height;
    if (v21 > (int)Width) {
      size_t Height = v23;
    }
    else {
      size_t Height = Height;
    }
    if (v21 > (int)Width) {
      size_t Width = v24;
    }
    else {
      size_t Width = Width;
    }
  }
  else
  {
    BOOL v25 = 0;
  }
  int32x4_t v198 = (_DWORD *)Height;
  int v199 = v3 != 0;
  if (v3)
  {
    *(void *)&long long v19 = *(void *)v3;
    size_t v27 = *(unsigned int *)(v3 + 8);
    unsigned int v26 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    long long v19 = 0uLL;
    size_t v27 = Width;
    unsigned int v26 = v198;
  }
  *(void *)&long long v208 = v19;
  *((void *)&v208 + 1) = __PAIR64__(v26, v27);
  float64x2_t v207 = 0uLL;
  BOOL v193 = v25;
  if (!v25)
  {
    long long v195 = v19;
    if (CGImageIsSubimage())
    {
      *(int32x2_t *)&long long v208 = vadd_s32(*(int32x2_t *)&v195, vmovn_s64(vcvtq_s64_f64(v207)));
      LODWORD(Width) = CGImageGetWidth(v209);
      int v199 = 1;
      int32x4_t v198 = (_DWORD *)CGImageGetHeight(v209);
    }
  }
  long long v205 = 0u;
  long long v206 = 0u;
  CA::CG::ImageFilter::ImageFilter((uint64_t)&v205, v27, v26, v12, v10, v197);
  if (v8)
  {
    uint64_t v28 = v200;
    if ((*(unsigned char *)(v200 + 136) & 2) != 0)
    {
      BOOL v30 = fabs(v10->f64[1]) < 0.000001 && fabs(v10[1].f64[0]) < 0.000001
         || fabs(v10->f64[0]) < 0.000001 && fabs(v10[1].f64[1]) < 0.000001;
      char v29 = !v30;
    }
    else
    {
      char v29 = 1;
    }
  }
  else
  {
    char v29 = 0;
    uint64_t v28 = v200;
  }
  int v31 = v29 & ((v205 & 9) != 0);
  if ((v29 & ((v205 & 9) != 0)) != 0) {
    unsigned int v32 = 255;
  }
  else {
    unsigned int v32 = 0;
  }
  unsigned int v189 = v32;
  uint64_t v33 = *(void *)(v28 + 8);
  if (*(short float *)(*(void *)(v33 + 16) + 14) != COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))
    || (uint64_t v34 = v209, (CGImageHasAlpha() & 1) != 0)
    || CGImageIsMask(v34)
    || CGImageGetMask()
    || CGImageGetMatte()
    || CGImageGetMaskingColors())
  {
    int v35 = 0;
  }
  else
  {
    int v35 = ((v205 & 9) == 0) | v31 ^ 1;
  }
  uint64_t v36 = *(void *)(v33 + 16);
  char v37 = *(unsigned char *)(v36 + 481);
  double v194 = (float64x2_t *)v12;
  unint64_t v192 = v10;
  int v188 = v35;
  if (v37)
  {
    unsigned int v38 = *(unsigned __int8 *)(v36 + 480);
    if (v38 != 3) {
      int v35 = 0;
    }
    if (v38 >= 2) {
      int v39 = v35;
    }
    else {
      int v39 = 1;
    }
    int v191 = v39;
  }
  else
  {
    int v191 = 0;
  }
  CGImageGetContentHeadroom();
  float v41 = v40;
  ColorSpace = CGImageGetColorSpace(v14);
  int updated = CA::OGL::Context::update_color_program_cache_whippet((CA::OGL::Context *)v33, v41, ColorSpace, v4);
  if (CA::CG::AccelDataProvider::_table)
  {
    unsigned int Identifier = CGImageGetIdentifier();
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
    unsigned int v45 = (os_unfair_lock_s *)x_hash_table_lookup(CA::CG::AccelDataProvider::_table, Identifier, 0);
    if (v45)
    {
      int v46 = v45;
      char v47 = v45 + 2;
      os_unfair_lock_lock(v45 + 2);
      uint64_t v48 = *(void *)&v46[4]._os_unfair_lock_opaque;
      if (v48
        && !*(unsigned char *)(v48 + 68)
        && ((*(uint64_t (**)(uint64_t))(*(void *)v200 + 32))(v200) & 1) == 0)
      {
        double v144 = *(atomic_uint **)&v46[4]._os_unfair_lock_opaque;
        while (1)
        {
          atomic_uint v145 = v144[2];
          if (!v145) {
            break;
          }
          atomic_uint v146 = v144[2];
          atomic_compare_exchange_strong(v144 + 2, (unsigned int *)&v146, v145 + 1);
          if (v146 == v145)
          {
            os_unfair_lock_unlock(v47);
            unsigned int v147 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v200 + 8) + 184))(*(void *)(v200 + 8), 4);
            if (v144[11] <= v147 && v144[12] <= v147)
            {
              (*(void (**)(long long *__return_ptr, atomic_uint *))(*(void *)v144 + 56))(&v220, v144);
              double v100 = (uint32x2_t *)v220;
            }
            else
            {
              double v100 = 0;
            }
            global_queue = dispatch_get_global_queue(17, 0);
            dispatch_async_f(global_queue, v144, (dispatch_function_t)CA::CG::AccelDataProvider::retain_texture(CA::CG::Renderer &)::$_0::__invoke);
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
            if (!v100) {
              goto LABEL_59;
            }
            uint64_t v251 = 0;
            long long v250 = 0u;
            long long v249 = 0u;
            long long v248 = 0u;
            long long v247 = 0u;
            long long v246 = 0u;
            long long v245 = 0u;
            long long v244 = 0u;
            long long v243 = 0u;
            long long v242 = 0u;
            long long v241 = 0u;
            long long v240 = 0u;
            long long v239 = 0u;
            long long v238 = 0u;
            long long v237 = 0u;
            long long v236 = 0u;
            long long v235 = 0u;
            long long v234 = 0u;
            long long v233 = 0u;
            long long v232 = 0u;
            long long v231 = 0u;
            long long v230 = 0u;
            long long v229 = 0u;
            long long v228 = 0u;
            long long v227 = 0u;
            long long v226 = 0u;
            long long v225 = 0u;
            long long v224 = 0u;
            long long v223 = 0u;
            long long v222 = 0u;
            long long v221 = 0u;
            long long v220 = 0u;
            int v172 = v100[2].i32[0];
            int v173 = v100[2].i32[1];
            unsigned int v174 = (*(uint64_t (**)(uint32x2_t *))(*(void *)v100 + 104))(v100);
            CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)&v220, v172, v173, v174, v194, (int *)&v208, v192->f64, v205, v189);
            char v175 = v191;
            if (v191) {
              *(unsigned char *)(*(void *)(v33 + 16) + 481) &= ~1u;
            }
            double v176 = (uint32x2_t **)CA::OGL::Context::bind_image(v33, 0, v100, (double *)DWORD1(v239), BYTE4(v205), BYTE5(v205), 0, (CA::OGL::ContentsGeometry *)&v220, *((float *)&v205 + 2), (float32x4_t *)((char *)&v237 + 4), 0);
            if (v176) {
              CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)&v220, v33, v176, (double *)BYTE4(v205), *((float *)&v205 + 2));
            }
            if (v175) {
              *(unsigned char *)(*(void *)(v33 + 16) + 481) |= 1u;
            }
            CA::OGL::ContentsGeometry::fill_debug((uint64_t)&v220, v33, 0, (double *)v100, v188 & 1, v177, v178);
            if (!updated) {
              goto LABEL_208;
            }
            goto LABEL_242;
          }
        }
      }
      os_unfair_lock_unlock(v47);
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
LABEL_59:
      size_t v27 = DWORD2(v208);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
    }
  }
  unsigned int v49 = BYTE4(v205);
  if (BYTE4(v205) <= 1u)
  {
    size_t v51 = HIDWORD(v208);
    unsigned int v53 = v27;
    unsigned int v187 = HIDWORD(v208);
  }
  else
  {
    unsigned int v50 = llround(*(double *)&v206 * (double)(int)v27);
    size_t v51 = HIDWORD(v208);
    unsigned int v52 = llround(*((double *)&v206 + 1) * (double)SHIDWORD(v208));
    if (v50 <= 1) {
      unsigned int v53 = 1;
    }
    else {
      unsigned int v53 = v50;
    }
    if (v52 <= 1) {
      unsigned int v54 = 1;
    }
    else {
      unsigned int v54 = v52;
    }
    unsigned int v187 = v54;
  }
  if ((CGImageGetBitmapInfo(v209) & 0x100) != 0)
  {
    BOOL IsWideGamutRGB = 1;
  }
  else
  {
    __int16 v55 = CGImageGetColorSpace(v209);
    BOOL IsWideGamutRGB = CGColorSpaceIsWideGamutRGB(v55);
  }
  uint64_t v57 = *(void *)(v33 + 264);
  LODWORD(v195) = updated;
  if (v57 && ((*(_WORD *)(v57 + 68) & 0x130) != 0 ? (BOOL v58 = IsWideGamutRGB) : (BOOL v58 = 0), v58))
  {
    BOOL v186 = 1;
    uint64_t v59 = 4;
  }
  else
  {
    uint64_t v60 = *(void *)(v200 + 8);
    if (v60) {
      float64x2_t v61 = *(CGColorSpace **)(v60 + 144);
    }
    else {
      float64x2_t v61 = 0;
    }
    CGColorSpaceModel Model = CGColorSpaceGetModel(v61);
    BOOL v186 = Model != kCGColorSpaceModelMonochrome;
    uint64_t v59 = 1;
    if (Model) {
      uint64_t v59 = 2;
    }
  }
  uint64_t v190 = v59;
  if (CGImageGetProperty() != *MEMORY[0x1E4F1CFD0])
  {
    uint64_t v63 = *MEMORY[0x1E4F1CFD0];
    if (CGImageGetProperty() != v63
      && !*((unsigned char *)CA::OGL::Context::color_program_cache((CA::OGL::Context *)v33) + 64)
      && (v187 + *(_DWORD *)(v200 + 192 * v190 + 1400) - 1)
       / *(_DWORD *)(v200 + 192 * v190 + 1400)
       * ((v53 + *(_DWORD *)(v200 + 192 * v190 + 1396) - 1)
        / *(_DWORD *)(v200 + 192 * v190 + 1396)) <= *((_DWORD *)&CA::CG::Renderer::_max_mosaic_cells + v190))
    {
      uint64_t v64 = v200;
      uint64_t v65 = v190;
      uint64_t v66 = v200 + 192 * v190;
      uint64_t v67 = *(void *)(v33 + 16);
      unint64_t v68 = *(void *)(v67 + 16) & 0xFFFFFF00FF00FF00;
      if (*(void *)(v67 + 8) == 0x3C003C003C003C00) {
        int v69 = 1;
      }
      else {
        int v69 = 3;
      }
      *(_DWORD *)(v67 + 16) = v69 | v68;
      *(_DWORD *)(v67 + 2CASetDebugMessage("", 0) = HIDWORD(v68);
      if ((*(_DWORD *)(v66 + 1536) & 0x80000000) != 0)
      {
        char v70 = BYTE5(v205);
        char v71 = BYTE4(v205);
        if (v49 > 1) {
          char v71 = 1;
        }
        int32x4_t v198 = (_DWORD *)(v66 + 1536);
        *(_DWORD *)(v66 + 1536) = 0;
        uint64_t v72 = v64 + 192 * v65;
        *(unsigned char *)(v72 + 154CASetDebugMessage("", 0) = v71;
        *(unsigned char *)(v72 + 1541) = v70;
        if (v191) {
          *(unsigned char *)(*(void *)(v33 + 16) + 481) &= ~1u;
        }
        uint64_t v73 = CGImageGetIdentifier();
        if (((v49 < 2) & ~v199) != 0)
        {
          uint64_t v76 = 0;
          int v79 = 2;
          unsigned int v78 = v187;
        }
        else
        {
          MEMORY[0x1F4188790](v73);
          uint64_t v76 = &v179;
          double v179 = &unk_1ED02A048;
          int v180 = v77;
          uint64_t v181 = v208;
          int v182 = v27;
          int v183 = v51;
          unsigned int v184 = v53;
          unsigned int v78 = v187;
          uint64_t v185 = v187;
          uint64_t v73 = 33
              * (33 * (33 * (33 * (33 * (DWORD1(v208) + 33 * v208) + v27) + v51) + v53) + v187)
              + v77;
          int v79 = 3;
        }
        char v148 = 0;
        if (v196) {
          int v149 = v79 | 0x100;
        }
        else {
          int v149 = v79;
        }
        v74.i64[0] = (uint64_t)&v202;
        uint64_t v150 = v66 + 1392;
        v75.i64[0] = (uint64_t)v192;
        int8x16_t v151 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v74, v75)).i64[0], 0);
        float64x2_t v152 = (float64x2_t)vandq_s8((int8x16_t)v192[1], v151);
        float64x2_t v153 = (float64x2_t)vandq_s8(*(int8x16_t *)v192, v151);
        double v155 = v194[1].f64[0];
        double v154 = v194[1].f64[1];
        float64x2_t v204 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)vandq_s8((int8x16_t)v192[2], v151), v153, v194->f64[0]), v152, v154 + v194->f64[1]);
        float64x2_t v156 = vmulq_n_f64(v153, v155 / (double)v53);
        float64x2_t v157 = vmulq_n_f64(v152, -v154 / (double)v78);
        float64x2_t v202 = v156;
        float64x2_t v203 = v157;
        int v158 = v53;
        uint64_t v159 = v73;
        if (vabdd_f64(v156.f64[0], trunc(v157.f64[1])) < 0.000001 && fabs(v156.f64[1]) < 0.000001) {
          char v148 = fabs(v157.f64[0]) < 0.000001;
        }
        int v160 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 184))(v33, 9);
        char v161 = !v186;
        if (!v160) {
          char v161 = 1;
        }
        if ((v161 & 1) != 0
          || (int v162 = *(unsigned __int8 *)(*(void *)(v33 + 16) + 480), v162 == 12)
          || (v162 - 1) > 0x18)
        {
          long long v215 = 0u;
          long long v216 = 0u;
          long long v213 = 0u;
          long long v214 = 0u;
          long long v211 = 0u;
          long long v212 = 0u;
          long long v210 = 0u;
          int v164 = v187;
          CA::CG::ImageDelegate::ImageDelegate((uint64_t)&v210, v200, v33, (uint64_t)v14, v158, v187, v197, v196, v202.f64, v148, (uint64_t)&v220);
          CA::OGL::Mosaic::draw(v150, (uint64_t *)v33, v149, v159, (uint64_t)v76, v158, v164, 1, (uint64_t)&v210, v189);
          CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate((CA::CG::MosaicBitmapDelegate *)&v210);
        }
        else
        {
          int v163 = v187;
          CA::CG::ImageRectDelegate::ImageRectDelegate((uint64_t)&v210, v200, v33, (uint64_t)v14, v158, v187, v197, v196, &v202, v148, (uint64_t)&v220);
          CA::OGL::Mosaic::draw(v150, (uint64_t *)v33, v149, v159, (uint64_t)v76, v158, v163, 1, (uint64_t)&v210, v189);
          CA::CG::ImageRectDelegate::~ImageRectDelegate((CA::CG::ImageRectDelegate *)&v210);
        }
        char v165 = v191;
        if (v76) {
          (*(void (**)(void **))*v76)(v76);
        }
        if (v165) {
          *(unsigned char *)(*(void *)(v33 + 16) + 481) |= 1u;
        }
        uint64_t v166 = v200;
        uint64_t v167 = v190;
        uint64_t v168 = v200 + 192 * v190;
        uint64_t v169 = *(void *)(v168 + 1552);
        if (v169)
        {
          double v170 = (void *)(v168 + 1552);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v33 + 520))(v33, v169, 0);
          uint64_t v167 = v190;
          *double v170 = 0;
          *(_DWORD *)(v166 + 192 * v167 + 1544) = -1;
        }
        *int32x4_t v198 = -1;
        *(void *)(v166 + 192 * v167 + 1504) = 0;
      }
      double v100 = 0;
      *(unsigned char *)(*(void *)(v33 + 16) + 16) = 0;
      goto LABEL_241;
    }
  }
  if (v196) {
    unsigned int v80 = 158;
  }
  else {
    unsigned int v80 = 156;
  }
  if (v193) {
    int v81 = (CGColorSpace *)(v80 | 0x40);
  }
  else {
    int v81 = (CGColorSpace *)v80;
  }
  double v82 = *(double *)(v33 + 240);
  double v83 = 1.0;
  if (CGImageGetCachingFlags() == 1) {
    double v84 = 0.1;
  }
  else {
    double v84 = 1.0;
  }
  int v85 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 184))(v33, 4);
  char v86 = v199;
  if ((int)v51 * (int)v27 <= 0x100000) {
    char v86 = 1;
  }
  if ((v86 & 1) == 0)
  {
    uint64_t v87 = CGImageGetColorSpace(v209);
    if (CGColorSpaceGetModel(v87) >= kCGColorSpaceModelCMYK)
    {
      float v88 = (double *)v192;
      double v89 = *v88 * *v88 + v88[1] * v88[1];
      double v90 = v88[2] * v88[2] + v88[3] * v88[3];
      BOOL v91 = v89 != 1.0;
      if (v90 != 1.0) {
        BOOL v91 = 1;
      }
      double v92 = sqrt(v89);
      double v93 = sqrt(v90);
      if (v91)
      {
        double v90 = v93;
        double v89 = v92;
      }
      double v83 = fmin(fmax(v194[1].f64[0] * v89 / (double)(int)v27, v194[1].f64[1] * v90 / (double)(int)v51), 1.0);
    }
  }
  double v94 = v84 + v82;
  double v95 = (double)(int)v27;
  double v96 = (double)(int)v51;
  if (v83 * v83 * (double)(int)v27 * (double)(int)v51 > (double)(v85 * v85))
  {
    int v97 = (int)v27 <= (int)v51 ? v51 : v27;
    float v98 = (float)v85 / (float)v97;
    double v83 = v98;
    if (v98 * (double)v97 > (double)v85) {
      double v83 = floorf(v98 * 10000.0) * 0.0001;
    }
  }
  double v99 = (uint32x2_t *)CA::Render::copy_image(v209, *(CGImage **)(v33 + 144), v81, v94, v83);
  double v100 = v99;
  if (!v99)
  {
LABEL_241:
    if (v195) {
      goto LABEL_242;
    }
LABEL_208:
    if (!v100) {
      return;
    }
    goto LABEL_243;
  }
  __int32 v101 = v99[1].i32[1];
  int v102 = v99[2].i32[0];
  v99[1].i32[1] = v101 & 0xFFF7FFFF;
  int v103 = v99[2].i32[1];
  float64x2_t v202 = 0u;
  float64x2_t v203 = 0u;
  BOOL v104 = v102 == Width && v103 == v198;
  if (v104)
  {
LABEL_140:
    BOOL v104 = v101 == 23;
    int v110 = v199;
    if (!v104) {
      int v110 = 0;
    }
    if (v110 == 1)
    {
      if (BYTE4(v205) == 2
        || BYTE4(v205) == 11
        || (v102 <= v85 ? (BOOL v117 = v103 <= v85) : (BOOL v117 = 0),
            !v117 ? (BOOL v118 = (int)v27 <= v85) : (BOOL v118 = 0),
            v118 ? (BOOL v119 = (int)v51 <= v85) : (BOOL v119 = 0),
            !v119 ? (int v120 = 0) : (int v120 = 1),
            v120))
      {
        uint64_t v111 = (*(uint64_t (**)(uint64_t, void, size_t, size_t))(*(void *)v33 + 200))(v33, v99[19].u8[0], v27, v51);
        unint64_t v112 = v111;
        __int32 v113 = v100[1].i32[1];
        if ((v113 & 0x1000000) != 0)
        {
          *(void *)&long long v222 = 0;
          *(void *)&long long v220 = v100;
          *((void *)&v220 + 1) = v111;
          long long v221 = v208;
          *((void *)&v222 + 1) = 0x7FF0000000000000;
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
          if (CA::Render::Image::_subimage_table)
          {
            *(void *)&long long v210 = 0;
            uint64_t v114 = x_hash_table_lookup(CA::Render::Image::_subimage_table, (uint64_t)&v220, &v210);
            if (v114)
            {
              double v115 = (uint32x2_t *)v114;
              int v116 = v189;
              if (v94 > 0.0)
              {
                if (*(double *)(v210 + 40) < v94) {
                  *(double *)(v210 + 4CASetDebugMessage("", 0) = v94;
                }
                if (*(double *)&CA::Render::Image::_subimage_deadline > v94) {
                  CA::Render::Image::_subimage_deadline = *(void *)&v94;
                }
              }
LABEL_182:
              uint64_t v127 = (atomic_uint *)&v115[1];
              if (!atomic_fetch_add((atomic_uint *volatile)&v115[1], 1u))
              {
                double v115 = 0;
                atomic_fetch_add(v127, 0xFFFFFFFF);
              }
LABEL_184:
              os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
              if (v115)
              {
                *(void *)&long long v208 = 0;
                int v102 = v115[2].i32[0];
                int v103 = v115[2].i32[1];
                if (atomic_fetch_add((atomic_uint *volatile)&v100[1], 0xFFFFFFFF) == 1) {
                  (*(void (**)(uint32x2_t *))(*(void *)v100 + 16))(v100);
                }
              }
              else
              {
                double v115 = v100;
              }
LABEL_188:
              uint64_t v251 = 0;
              long long v250 = 0u;
              long long v249 = 0u;
              long long v248 = 0u;
              long long v247 = 0u;
              long long v246 = 0u;
              long long v245 = 0u;
              long long v244 = 0u;
              long long v243 = 0u;
              long long v242 = 0u;
              long long v241 = 0u;
              long long v240 = 0u;
              long long v239 = 0u;
              long long v238 = 0u;
              long long v237 = 0u;
              long long v236 = 0u;
              long long v235 = 0u;
              long long v234 = 0u;
              long long v233 = 0u;
              long long v232 = 0u;
              long long v231 = 0u;
              long long v230 = 0u;
              long long v229 = 0u;
              long long v228 = 0u;
              long long v227 = 0u;
              long long v226 = 0u;
              long long v225 = 0u;
              long long v224 = 0u;
              long long v223 = 0u;
              long long v222 = 0u;
              long long v221 = 0u;
              long long v220 = 0u;
              unsigned int v128 = (*(uint64_t (**)(uint32x2_t *))(*(void *)v115 + 104))(v115);
              CA::OGL::ContentsGeometry::ContentsGeometry((uint64_t)&v220, v102, v103, v128, v194, (int *)&v208, v192->f64, v205, v116);
              uint64_t v129 = *(void *)(v33 + 16);
              char v130 = *(unsigned char *)(v129 + 481);
              if (v130) {
                DWORD1(v239) |= 0x100u;
              }
              int v131 = v195;
              char v132 = v191;
              if (v191) {
                *(unsigned char *)(v129 + 481) = v130 & 0xFE;
              }
              uint64_t v135 = (*(uint64_t (**)(uint32x2_t *))(*(void *)v115 + 200))(v115);
              uint64_t v136 = (atomic_uint *)v135;
              if (v135 {
                || (v115[1].i8[4] == 23
              }
                 && BYTE4(v205) == 11
                 && (CA::OGL::ContentsGeometry::scale((CA::OGL::ContentsGeometry *)&v220, v133, v134), v139 < 0.75)
                 || (*(unsigned int (**)(uint64_t, uint32x2_t *))(*(void *)v33 + 568))(v33, v115))
                && (LODWORD(v21CASetDebugMessage("", 0) = 0,
                    unsigned int v201 = 0,
                    ((*(uint64_t (**)(uint32x2_t *, long long *, unsigned int *))(*(void *)v115 + 216))(v115, &v210, &v201) & 1) != 0)&& (v140 = (*(uint64_t (**)(uint32x2_t *))(*(void *)v115 + 104))(v115), v141 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v33 + 200))(v33, v140, v210, v201), (uint64_t v136 = (atomic_uint *)(*(uint64_t (**)(uint32x2_t *, uint64_t, void))(*(void *)v115 + 208))(v115, v141, (DWORD1(v239) >> 11) & 1)) != 0))
              {
                uint64_t v219 = 0;
                long long v217 = 0u;
                long long v218 = 0u;
                long long v215 = 0u;
                long long v216 = 0u;
                long long v213 = 0u;
                long long v214 = 0u;
                long long v211 = 0u;
                long long v212 = 0u;
                long long v210 = 0u;
                CA::OGL::TiledImageGeometry::TiledImageGeometry((uint64_t)&v210, (CA::Render::TiledTexture *)v136, v33, (double *)DWORD1(v239), SBYTE4(v205), SBYTE5(v205), (CA::OGL::ContentsGeometry *)&v220, *((float *)&v205 + 2));
                CA::OGL::TiledImageGeometry::draw_tiles((uint64_t)&v210, 0, 1);
                if (!v135 && atomic_fetch_add(v136 + 2, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v136 + 16))(v136);
                }
              }
              else
              {
                int v142 = (uint32x2_t **)CA::OGL::Context::bind_image(v33, 0, v115, (double *)DWORD1(v239), BYTE4(v205), BYTE5(v205), 0, (CA::OGL::ContentsGeometry *)&v220, *((float *)&v205 + 2), (float32x4_t *)((char *)&v237 + 4), 0);
                if (v142) {
                  CA::OGL::ContentsGeometry::fill_and_unbind((uint64_t)&v220, v33, v142, (double *)BYTE4(v205), *((float *)&v205 + 2));
                }
              }
              if (v132) {
                *(unsigned char *)(*(void *)(v33 + 16) + 481) |= 1u;
              }
              float v143 = CA::OGL::ContentsGeometry::fill_debug((uint64_t)&v220, v33, 0, (double *)v115, v188 & 1, v137, v138);
              double v100 = 0;
              if (atomic_fetch_add((atomic_uint *volatile)&v115[1], 0xFFFFFFFF) == 1)
              {
                (*(void (**)(uint32x2_t *, float))(*(void *)v115 + 16))(v115, v143);
                double v100 = 0;
                if (v131)
                {
LABEL_242:
                  CA::OGL::Context::reset_color_program_cache_whippet((CA::OGL::Context *)v33);
                  if (!v100) {
                    return;
                  }
                  goto LABEL_243;
                }
              }
              else if (v131)
              {
                goto LABEL_242;
              }
              goto LABEL_208;
            }
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
          __int32 v113 = v100[1].i32[1];
        }
        v100[1].i32[1] = v113 | 0x1000000;
        unsigned int v121 = CA::Render::Image::copy_subimage((CA::Render::Image *)v100, 0, (const CA::Bounds *)&v208, v112, 0);
        if (v121)
        {
          double v115 = (uint32x2_t *)v121;
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          float v123 = (double *)malloc_type_zone_malloc(malloc_zone, 0x30uLL, 0x8BB15036uLL);
          uint64_t v124 = v123;
          if (v123)
          {
            *(void *)float v123 = v100;
            *((void *)v123 + 1) = v112;
            *((_OWORD *)v123 + 1) = v208;
            *((_DWORD *)v123 + 8) = 0;
            v123[5] = INFINITY;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
          if (v94 > 0.0)
          {
            v124[5] = v94;
            if (*(double *)&CA::Render::Image::_subimage_deadline > v94) {
              CA::Render::Image::_subimage_deadline = *(void *)&v94;
            }
          }
          float v125 = (int *)CA::Render::Image::_subimage_table;
          int v116 = v189;
          if (!CA::Render::Image::_subimage_table)
          {
            float v125 = (int *)x_hash_table_new_((unint64_t (*)(uint64_t))CA::Render::Image::SubimageKey::hash, CA::Render::Image::SubimageKey::compare, 0, 0, 0, 0);
            CA::Render::Image::_subimage_table = (uint64_t)v125;
          }
          if ((hash_table_modify(v125, (uint64_t)v124, (uint64_t)v115, 0) & 1) == 0)
          {
            if (atomic_fetch_add((atomic_uint *volatile)&v115[1], 0xFFFFFFFF) == 1) {
              (*(void (**)(uint32x2_t *))(*(void *)v115 + 16))(v115);
            }
            double v115 = (uint32x2_t *)x_hash_table_lookup(CA::Render::Image::_subimage_table, (uint64_t)v124, 0);
            if (v124)
            {
              uint64_t v126 = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(v126, v124);
            }
            if (!v115) {
              goto LABEL_184;
            }
          }
          goto LABEL_182;
        }
      }
    }
    double v115 = v100;
    int v116 = v189;
    goto LABEL_188;
  }
  if (!v199 || ((int)v208 < v102 ? (BOOL v105 = SDWORD1(v208) < v103) : (BOOL v105 = 0), v105))
  {
    int v106 = v27 + v208;
    if ((int)v27 + (int)v208 >= v102) {
      int v106 = v102;
    }
    size_t v27 = (v106 - v208);
    int v107 = v51 + DWORD1(v208);
    if ((int)v51 + DWORD1(v208) >= v103) {
      int v107 = v103;
    }
    size_t v51 = (v107 - DWORD1(v208));
    if (v199)
    {
      double v108 = v194[1].f64[1];
      v203.f64[0] = v194[1].f64[0] * (double)(int)v27 / v95;
      v203.f64[1] = v108 * (double)(int)v51 / v96;
      double v109 = v108 - v203.f64[1] + v194->f64[1];
      v202.f64[0] = v194->f64[0];
      v202.f64[1] = v109;
      double v194 = &v202;
    }
    *((void *)&v208 + 1) = __PAIR64__(v51, v27);
    goto LABEL_140;
  }
LABEL_243:
  if (atomic_fetch_add((atomic_uint *volatile)&v100[1], 0xFFFFFFFF) == 1) {
    (*(void (**)(uint32x2_t *))(*(void *)v100 + 16))(v100);
  }
}

uint64_t CA::CG::ImageFilter::ImageFilter(uint64_t a1, unsigned int a2, unsigned int a3, double *a4, float64x2_t *a5, int a6)
{
  v35[4] = *MEMORY[0x1E4F143B8];
  double v8 = (double)a2;
  double v9 = (double)a3;
  v35[0] = 0;
  v35[1] = 0;
  *(double *)&_OWORD v35[2] = (double)a2;
  *(double *)&v35[3] = (double)a3;
  float64x2_t v10 = *a5;
  float64x2_t v11 = a5[1];
  float64x2_t v32 = *a5;
  float64x2_t v33 = v11;
  float64x2_t v12 = a5[2];
  float64x2_t v34 = v12;
  double v13 = a4[1];
  if (*a4 != 0.0 || v13 != 0.0) {
    float64x2_t v34 = vmlaq_n_f64(vmlaq_n_f64(v12, v10, *a4), v11, v13);
  }
  double v14 = a4[2];
  double v15 = a4[3];
  if (v14 == v8 && v15 == v9)
  {
    float64x2_t v30 = v11;
    float64x2_t v31 = v10;
  }
  else
  {
    float64x2_t v31 = vmulq_n_f64(v10, v14 / v8);
    float64x2_t v32 = v31;
    float64x2_t v30 = vmulq_n_f64(v11, v15 / v9);
    float64x2_t v33 = v30;
  }
  uint64_t v17 = CA::CG::mat2_filter_bits((uint64_t)&v32);
  int v23 = CA::CG::rect_filter_bits((uint64_t)v35, v32.f64, v17, v18, v19, v20, v21, v22);
  *(_DWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = 0;
  if ((v23 & 0x3F) != 0)
  {
    switch(a6)
    {
      case 0:
      case 3:
      case 4:
        *(_WORD *)(a1 + 4) = 257;
        if ((v23 & 0x12) != 0)
        {
          double v24 = vaddvq_f64(vmulq_f64(v31, v31));
          double v25 = vaddvq_f64(vmulq_f64(v30, v30));
          BOOL v26 = v24 != 1.0;
          if (v25 != 1.0) {
            BOOL v26 = 1;
          }
          double v27 = sqrt(v24);
          double v28 = sqrt(v25);
          if (v26)
          {
            double v25 = v28;
            double v24 = v27;
          }
          *(double *)(a1 + 16) = v24;
          *(double *)(a1 + 24) = v25;
          if (v24 >= v25) {
            double v24 = v25;
          }
          if (a6 == 3)
          {
            if (v24 < 0.75) {
              *(unsigned char *)(a1 + 4) = 11;
            }
          }
          else if (v24 < 0.75)
          {
            *(unsigned char *)(a1 + 4) = 2;
            *(_DWORD *)(a1 + 8) = -1102263091;
          }
        }
        break;
      case 1:
        goto LABEL_22;
      case 2:
        *(_WORD *)(a1 + 4) = 257;
        break;
      default:
        return a1;
    }
  }
  else
  {
LABEL_22:
    *(_WORD *)(a1 + 4) = 0;
  }
  return a1;
}

uint64_t CA::CG::ImageRectDelegate::ImageRectDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, float64x2_t *a9, char a10, uint64_t a11)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CA::CG::ImageDelegate::ImageDelegate(a1, a2, a3, a4, a5, a6, a7, a8, a9->f64, a10, a11);
  *(void *)uint64_t v13 = &unk_1ED0290F0;
  *(_DWORD *)(v13 + 1392) = 0;
  uint64_t v14 = v13 + 1400;
  *(unsigned char *)(*(void *)(a3 + 16) + 16) = 94;
  CA::Transform::operator=(v13 + 1400, (uint64_t)&CA::identity_transform);
  CA::Transform::translate(v15, a9[2].f64[0], a9[2].f64[1], 0.0);
  *(void *)(a3 + 816) = v14;
  ++*(_DWORD *)(a3 + 256);
  unint64_t v16 = *(void *)(*(void *)(a3 + 16) + 8);
  int v17 = (*(unsigned __int16 *)(a3 + 832) >> 12) & 7;
  unint64_t v18 = HIWORD(v16);
  if (v17 == 2) {
    goto LABEL_4;
  }
  if (v17 == 1)
  {
    unint64_t v16 = v16 & 0xFFFFFFFFFFFF0000 | v18;
LABEL_4:
    unint64_t v16 = v16 & 0xFFFF00000000FFFFLL | (v18 << 16) | (v18 << 32);
  }
  float32x4_t v21 = vcvtq_f32_f16((float16x4_t)v16);
  v24.val[1] = vcvt_f32_f64(a9[1]);
  v24.val[0] = vcvt_f32_f64(*a9);
  int8x16_t v19 = (float *)v22;
  vst2_f32(v19, v24);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t, unsigned char *))(*(void *)a3 + 1000))(a3, 0, 4, 1, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))(*(void *)a3 + 1000))(a3, 1, 4, 1, &v21);
  return a1;
}

float64x2_t CA::CG::ImageDelegate::ImageDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, double *a9, char a10, uint64_t a11)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 96) = a3 + 834;
  *(_OWORD *)(a3 + 104) = xmmword_184997E70;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = a6;
  *(void *)(a1 + 32) = a11;
  *(void *)(a1 + 4CASetDebugMessage("", 0) = 0x2000;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1ED028268;
  *(void *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 72) = a7;
  *(unsigned char *)(a1 + 76) = a8;
  *(void *)(a1 + 8CASetDebugMessage("", 0) = a9;
  *(unsigned char *)(a1 + 88) = a10;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(*(void *)(a3 + 16) + 16);
  double v12 = *a9 * *a9 + a9[1] * a9[1];
  double v13 = a9[2] * a9[2] + a9[3] * a9[3];
  double v14 = 1.0;
  BOOL v15 = v12 == 1.0 && v13 == 1.0;
  double v16 = 1.0;
  if (!v15)
  {
    double v14 = 1.0 / sqrt(v12);
    double v16 = 1.0 / sqrt(v13);
  }
  *(double *)(a1 + 96) = v14;
  *(double *)(a1 + 104) = v16;
  float64x2_t result = vaddq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a1 + 96));
  *(float64x2_t *)(a1 + 96) = result;
  return result;
}

uint64_t CA::CG::ImageDelegate::flush(CA::CG::MosaicDelegate **this)
{
  double v2 = CA::CG::MosaicDelegate::draw_array(this[2]);
  uint64_t result = (*(uint64_t (**)(CA::CG::MosaicDelegate *, void, uint64_t, double))(*(void *)this[2] + 520))(this[2], 0, 1, v2);
  *(unsigned char *)(*((void *)this[2] + 2) + 16) = *((unsigned char *)this + 89);
  return result;
}

void *CA::CG::ImageDelegate::aa_quad(CA::CG::ImageDelegate *this, const CA::Bounds *a2, float *a3, char a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  double v8 = (void *)*((void *)this + 2);
  uint64_t v9 = v8[16];
  uint64_t v10 = v9 + 16;
  if ((unint64_t)(v9 + 16) > v8[17]
    || (unint64_t v11 = v8[14]) != 0 && v8[13] + 54 > v11
    || *(unsigned __int8 *)(v8[2] + 16) == *((unsigned __int8 *)this + 89))
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
    uint64_t v9 = v8[16];
    uint64_t v10 = v9 + 16;
  }
  uint64_t v12 = v8[15];
  v8[16] = v10;
  unint64_t v13 = -4;
  double v14 = &CA::CG::ImageDelegate::aa_quad(CA::Bounds const&,float *,unsigned int)const::nine_part_indices;
  int16x4_t v15 = vdup_n_s16(v9);
  do
  {
    int16x4_t v16 = (int16x4_t)*v14++;
    *(int16x4_t *)unsigned int v54 = vadd_s16(v16, v15);
    CA::OGL::Context::array_indices_vec((uint64_t)v8, v54);
    v13 += 4;
  }
  while (v13 < 0x20);
  uint64_t v17 = v12 + 48 * v9;
  uint64_t v47 = 0;
  *(unsigned char *)(v8[2] + 16) = 5;
  (*(void (**)(void *, uint64_t, void, void, uint64_t *))(*v8 + 448))(v8, 1, 0, 0, &v47);
  uint64_t v18 = 0;
  int v19 = *((_DWORD *)a2 + 2);
  int v20 = *((_DWORD *)a2 + 3);
  double v21 = (double)v19 * 0.5;
  if (*((double *)this + 12) < v21) {
    double v21 = *((double *)this + 12);
  }
  float v22 = v21;
  double v23 = (double)v20 * 0.5;
  if (*((double *)this + 13) < v23) {
    double v23 = *((double *)this + 13);
  }
  int v24 = *((_DWORD *)a2 + 1);
  float v25 = (float)*(int *)a2;
  float v26 = (float)(*(_DWORD *)a2 + v19);
  float v27 = v23;
  v53[0] = v25;
  v53[1] = v22 + v25;
  void v53[2] = v26 - v22;
  v53[3] = v26;
  v52[0] = (float)v24;
  v52[1] = (float)v24 + v27;
  _OWORD v52[2] = (float)(v24 + v20) - v27;
  v52[3] = (float)(v24 + v20);
  float v28 = v22 / (float)v19;
  float v29 = a3[1];
  float v30 = a3[2];
  float v31 = a3[3];
  float v32 = v30 - *a3;
  float v33 = *a3 + (float)(v32 * v28);
  float v34 = *a3 + (float)(v32 * (float)(1.0 - v28));
  *(float *)size_t v51 = *a3;
  *(float *)&v51[1] = v33;
  *(float *)&v51[2] = v34;
  *(float *)&float v51[3] = v30;
  float v35 = v27 / (float)v20;
  *(float *)unsigned int v50 = v29;
  *(float *)&v50[1] = v29 + (float)((float)(v31 - v29) * v35);
  *(float *)&_OWORD v50[2] = v29 + (float)((float)(v31 - v29) * (float)(1.0 - v35));
  *(float *)&uint64_t v50[3] = v31;
  float v36 = *(float *)&v47;
  if (a4) {
    float v37 = *(float *)&v47;
  }
  else {
    float v37 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  }
  *(float *)unsigned int v49 = v37;
  *(float *)&v49[1] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  if ((a4 & 2) != 0) {
    float v38 = *((float *)&v47 + 1);
  }
  else {
    float v38 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  }
  *(float *)&float64x2_t v49[2] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)&_OWORD v49[3] = v38;
  if ((a4 & 4) == 0) {
    float v36 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  }
  *(float *)uint64_t v48 = v36;
  *(float *)&v48[1] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  if ((a4 & 8) != 0) {
    float v39 = *((float *)&v47 + 1);
  }
  else {
    float v39 = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  }
  *(float *)&Rect v48[2] = *(float *)&v47 + (float)((float)(*((float *)&v47 + 1) - *(float *)&v47) * 0.5);
  *(float *)&v48[3] = v39;
  uint64_t v40 = *(void *)(*(void *)(*((void *)this + 2) + 16) + 8);
  float v41 = (void *)(v17 + 32);
  do
  {
    uint64_t v42 = 0;
    int v43 = v50[v18];
    int v44 = v48[v18];
    float64x2_t v45 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v52[v18]), 0);
    uint64_t result = v41;
    do
    {
      *(result - 4) = vcvt_f32_f64(vmlaq_f64(vmlaq_n_f64(*(float64x2_t *)(*((void *)this + 10) + 32), *(float64x2_t *)*((void *)this + 10), v53[v42]), v45, *(float64x2_t *)(*((void *)this + 10) + 16)));
      *(result - 3) = 0x3F80000000000000;
      *((_DWORD *)result - 4) = v51[v42];
      *((_DWORD *)result - 3) = v43;
      *((_DWORD *)result - 2) = v49[v42];
      *((_DWORD *)result - 1) = v44;
      void *result = v40;
      result += 6;
      ++v42;
    }
    while (v42 != 4);
    ++v18;
    v41 += 24;
  }
  while (v18 != 4);
  if ((a4 & 4) != 0)
  {
    uint64_t result = (void *)CA::OGL::aa_adjust_vertices(v17, v17 + 192, 48, 4);
    if ((a4 & 8) == 0)
    {
LABEL_29:
      if ((a4 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }
  else if ((a4 & 8) == 0)
  {
    goto LABEL_29;
  }
  uint64_t result = (void *)CA::OGL::aa_adjust_vertices(v17 + 576, v17 + 384, 48, 4);
  if ((a4 & 1) == 0)
  {
LABEL_30:
    if ((a4 & 2) == 0) {
      return result;
    }
    return (void *)CA::OGL::aa_adjust_vertices(v17 + 144, v17 + 96, 192, 4);
  }
LABEL_35:
  uint64_t result = (void *)CA::OGL::aa_adjust_vertices(v17, v17 + 48, 192, 4);
  if ((a4 & 2) == 0) {
    return result;
  }
  return (void *)CA::OGL::aa_adjust_vertices(v17 + 144, v17 + 96, 192, 4);
}

float CA::CG::ImageDelegate::quad(CA::CG::ImageDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = 6;
  if (!*(_DWORD *)(v6 + 92)) {
    uint64_t v7 = 4;
  }
  if ((unint64_t)(*(void *)(v6 + 128) + 4) > *(void *)(v6 + 136)
    || (unint64_t v8 = *(void *)(v6 + 112)) != 0 && *(void *)(v6 + 104) + v7 > v8
    || (uint64_t v9 = *(void *)(v6 + 16), v10 = *(unsigned __int8 *)(v9 + 16), v10 != *((unsigned __int8 *)this + 89)))
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
    LOBYTE(v1CASetDebugMessage("", 0) = *((unsigned char *)this + 89);
    uint64_t v9 = *(void *)(v6 + 16);
  }
  *(unsigned char *)(v9 + 16) = v10;
  uint64_t v12 = *(void *)(v6 + 120);
  uint64_t v11 = *(void *)(v6 + 128);
  *(void *)(v6 + 128) = v11 + 4;
  CA::OGL::Context::array_indices(v6, v11);
  int v13 = *((_DWORD *)a2 + 1);
  double v14 = (double)*(int *)a2;
  double v15 = (double)(*((_DWORD *)a2 + 2) + *(_DWORD *)a2);
  double v16 = (double)(*((_DWORD *)a2 + 3) + v13);
  uint64_t v17 = (double *)*((void *)this + 10);
  double v18 = v17[1];
  float v19 = *v17 * v14;
  *(float *)&double v14 = v18 * v14;
  double v20 = v17[2];
  double v21 = v17[3];
  float v22 = v20 * (double)v13;
  float v23 = v21 * (double)v13;
  float v24 = *v17 * v15;
  *(float *)&double v15 = v18 * v15;
  *(float *)&double v18 = v20 * v16;
  *(float *)&double v16 = v21 * v16;
  uint64_t v25 = *(void *)(*(void *)(*((void *)this + 2) + 16) + 8);
  int v26 = *((unsigned __int8 *)this + 88);
  double v27 = v17[4];
  double v28 = v17[5];
  float v29 = v27 + (float)(v22 + v19);
  float v30 = v28 + (float)(v23 + *(float *)&v14);
  float v31 = v27 + (float)(v22 + v24);
  float v32 = v28 + (float)(v23 + *(float *)&v15);
  float v33 = v27 + (float)(*(float *)&v18 + v24);
  float v34 = v28 + (float)(*(float *)&v16 + *(float *)&v15);
  float v35 = v27 + (float)(*(float *)&v18 + v19);
  uint64_t v36 = v12 + 48 * v11;
  *(float *)uint64_t v36 = v29;
  *(float *)(v36 + 4) = v30;
  *(void *)(v36 + 8) = 0x3F80000000000000;
  double v37 = v28 + (float)(*(float *)&v16 + *(float *)&v14);
  if (v26) {
    float v38 = v33;
  }
  else {
    float v38 = v31;
  }
  if (v26) {
    float v32 = v30;
  }
  *(float *)(v36 + 48) = v38;
  *(float *)(v36 + 52) = v32;
  *(void *)(v36 + 56) = 0x3F80000000000000;
  *(float *)(v36 + 96) = v33;
  *(float *)(v36 + 10CASetDebugMessage("", 0) = v34;
  *(void *)(v36 + 104) = 0x3F80000000000000;
  float v39 = v37;
  if (v26) {
    float v40 = v29;
  }
  else {
    float v40 = v35;
  }
  if (v26) {
    float v39 = v34;
  }
  *(float *)(v36 + 144) = v40;
  *(float *)(v36 + 148) = v39;
  *(void *)(v36 + 152) = 0x3F80000000000000;
  float result = *a3;
  int v42 = *((_DWORD *)a3 + 1);
  int v43 = *((_DWORD *)a3 + 2);
  int v44 = *((_DWORD *)a3 + 3);
  *(float *)(v36 + 16) = *a3;
  *(_DWORD *)(v36 + 2CASetDebugMessage("", 0) = v42;
  *(void *)(v36 + 32) = v25;
  *(_DWORD *)(v36 + 64) = v43;
  *(_DWORD *)(v36 + 68) = v42;
  *(void *)(v36 + 8CASetDebugMessage("", 0) = v25;
  *(_DWORD *)(v36 + 112) = v43;
  *(_DWORD *)(v36 + 116) = v44;
  *(void *)(v36 + 128) = v25;
  *(float *)(v36 + 16CASetDebugMessage("", 0) = result;
  *(_DWORD *)(v36 + 164) = v44;
  *(void *)(v36 + 176) = v25;
  return result;
}

void CA::CG::ImageDelegate::~ImageDelegate(CA::CG::ImageDelegate *this)
{
  CA::CG::MosaicBitmapDelegate::~MosaicBitmapDelegate(this);

  JUMPOUT(0x185323DC0);
}

double CA::CG::ImageKey::copy(CA::CG::ImageKey *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v3 = (char *)malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1ED02A048;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)((char *)this + 8);
    double result = *((double *)this + 3);
    *((double *)v3 + 3) = result;
    *((_DWORD *)v3 + 8) = *((_DWORD *)this + 8);
  }
  return result;
}

BOOL CA::CG::ImageKey::equal(_DWORD *a1, _DWORD *a2)
{
  return a1[2] == a2[2]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6];
}

void CA::CG::ImageKey::~ImageKey(CA::CG::ImageKey *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::DrawImage::draw_shape_and_color(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  return (*(uint64_t (**)(CA::CG::DrawImage *, CA::CG::Renderer *, uint64_t))(*(void *)this + 184))(this, a2, 1);
}

void CA::CG::DrawImage::draw_color(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  if ((*((unsigned char *)this + 100) & 2) != 0) {
    CA::CG::DrawOp::draw_color(this, a2);
  }
  else {
    (*(void (**)(CA::CG::DrawImage *, CA::CG::Renderer *, void))(*(void *)this + 184))(this, a2, 0);
  }
}

uint64_t CA::CG::DrawImage::draw_shape(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 25);
  if ((v3 & 2) != 0)
  {
    double v20 = *(uint64_t (**)(void))(*(void *)this + 184);
    return v20();
  }
  else
  {
    uint64_t v4 = *((void *)a2 + 1);
    unsigned int v5 = (v3 << 31 >> 31);
    double v7 = *((double *)this + 16);
    double v6 = *((double *)this + 17);
    double v21 = v7;
    double v22 = v6;
    double v9 = *((double *)this + 18);
    double v8 = *((double *)this + 19);
    double v23 = v9;
    double v24 = v8;
    if (v9 < 0.0)
    {
      double v21 = v9 + v7;
      double v23 = -v9;
    }
    if (v8 < 0.0)
    {
      double v22 = v8 + v6;
      double v24 = -v8;
    }
    uint64_t v10 = CA::CG::mat2_filter_bits((uint64_t)a2 + 32);
    unsigned int v16 = CA::CG::rect_filter_bits((uint64_t)&v21, (double *)a2 + 4, v10, v11, v12, v13, v14, v15);
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    memset(v25, 0, sizeof(v25));
    CA::Transform::set_affine((CA::Transform *)v25, *((double *)a2 + 4), *((double *)a2 + 5), *((double *)a2 + 6), *((double *)a2 + 7), *((double *)a2 + 8), *((double *)a2 + 9));
    *((void *)&v26 + 1) = &v21;
    *(void *)&long long v27 = v25;
    *((void *)&v27 + 1) = __PAIR64__(v5, v16);
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    return CA::OGL::fill_rect(v4, (uint64_t)&v26 + 8, v17, v18);
  }
}

uint64_t CA::CG::DrawImage::color_type(CA::CG::DrawImage *this, CA::CG::Renderer *a2)
{
  if ((*((unsigned char *)this + 100) & 2) != 0)
  {
    uint64_t v4 = *((void *)this + 10);
    unsigned int v5 = 9;
    if (v4)
    {
      if (*((_DWORD *)this + 14)) {
        unsigned int v5 = 10;
      }
      else {
        unsigned int v5 = 9;
      }
    }
    if (*((short float *)this + 47) == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) && v4 == 0) {
      return v5 | 4;
    }
    else {
      return v5;
    }
  }
  else if ((CGImageHasAlpha() & 1) != 0 {
         || CGImageGetMask()
  }
         || *((short float *)this + 47) != COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
  {
    return 0;
  }
  else
  {
    return 4;
  }
}

uint64_t CA::CG::DrawImage::debug_color(CA::CG::DrawImage *this)
{
  return 1656352224;
}

BOOL CA::CG::DrawImage::shape_extent_contains(CA::CG::DrawImage *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  double v5 = *((double *)this + 16);
  double v4 = *((double *)this + 17);
  v13.f64[0] = v5;
  v13.f64[1] = v4;
  double v7 = *((double *)this + 18);
  double v6 = *((double *)this + 19);
  v14.f64[0] = v7;
  v14.f64[1] = v6;
  if (v7 < 0.0)
  {
    v13.f64[0] = v7 + v5;
    v14.f64[0] = -v7;
  }
  if (v6 < 0.0)
  {
    v13.f64[1] = v6 + v4;
    v14.f64[1] = -v6;
  }
  CA::Mat2Impl::mat2_apply_to_rect_interior((uint64_t)a2 + 32, v13.f64, a3);
  int8x16_t v8 = (int8x16_t)vceqzq_f64(v14);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v8, 1), v8).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v9 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v9), 1), v9).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v12 = 0uLL;
  }
  else
  {
    int32x4_t v10 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v12 = vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v10));
  }
  return CA::Bounds::contains((CA::Bounds *)&v12, (uint64_t)a3);
}

uint64_t CA::CG::DrawImage::may_flush()
{
  return 1;
}

uint64_t CA::CG::DrawImage::compute_dod_corners(float64x2_t *a1, float64x2_t *a2)
{
  uint64_t v2 = 0;
  float64x2_t v3 = a1[9];
  float64x2_t v4 = vaddq_f64(a1[8], vminnmq_f64(v3, (float64x2_t)vdupq_n_s64(0x8000000000000000)));
  float64x2_t v5 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v3), (int8x16_t)vnegq_f64(v3), (int8x16_t)v3), v4);
  v6.f64[0] = v5.f64[0];
  v6.f64[1] = v4.f64[1];
  *a2 = v4;
  a2[1] = v6;
  v4.f64[1] = v5.f64[1];
  a2[2] = v5;
  a2[3] = v4;
  f64 = a1[3].f64;
  int8x16_t v8 = &a1->f64[1];
  int8x16_t v9 = a1[2].f64;
  int32x4_t v10 = a1[1].f64;
  float64x2_t v11 = vld1q_dup_f64(v8);
  int32x4_t v12 = &a1[2].f64[1];
  float64x2_t v13 = &a1[1].f64[1];
  float64x2_t v14 = vld1q_dup_f64(v13);
  float64x2_t v15 = vld1q_dup_f64(v12);
  float64x2_t v16 = vld1q_dup_f64(v10);
  float64x2_t v17 = vld1q_dup_f64(v9);
  float64x2_t v18 = vld1q_dup_f64(f64);
  do
  {
    float v19 = a2[v2].f64;
    float64x2x2_t v21 = vld2q_f64(v19);
    v22.val[0] = vmlaq_f64(vmlaq_f64(v15, v21.val[0], v11), v21.val[1], v14);
    v22.val[1] = vmlaq_f64(vmlaq_f64(v18, v21.val[0], v16), v21.val[1], v17);
    vst2q_f64(v19, v22);
    v2 += 2;
  }
  while (v2 != 4);
  return 1;
}

float64x2_t *CA::CG::DrawImage::compute_dod(CA::CG::DrawImage *this, CA::Rect *a2)
{
  CA::Rect::operator=((double *)a2, (double *)this + 16);

  return CA::Rect::apply_transform(v3, (const CGAffineTransform *)((char *)this + 8));
}

void CA::CG::DrawImage::~DrawImage(CGImageRef *this)
{
  *this = (CGImageRef)&unk_1ED02A0F0;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CGImageRef)&unk_1ED02A0F0;
  CGImageRelease(this[15]);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

void CA::CG::DrawSubimage::draw_image(CA::CG::DrawSubimage *this, CA::CG::Renderer *a2)
{
}

void CA::CG::DrawSubimage::~DrawSubimage(CGImageRef *this)
{
  *this = (CGImageRef)&unk_1ED02A0F0;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CGImageRef)&unk_1ED02A0F0;
  CGImageRelease(this[15]);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

void CA::CG::DrawTiledImage::draw_shape_and_color(CA::CG::DrawTiledImage *this, float64x2_t *a2, double a3, float64x2_t a4, float64x2_t a5)
{
}

void CA::CG::DrawTiledImage::draw_image(CA::CG::DrawTiledImage *this, float64x2_t *a2, int a3, double a4, float64x2_t a5, float64x2_t a6)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int8x16_t v8 = *((int8x16_t *)this + 8);
  a5.f64[0] = *((float64_t *)this + 18);
  double v9 = *((double *)this + 19);
  a6.f64[0] = 0.0;
  v10.i64[1] = *((void *)this + 17);
  *(double *)v10.i64 = a5.f64[0] + *(double *)v8.i64;
  int8x16_t v11 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(a6, a5).i64[0], 0), v10, v8);
  if (a5.f64[0] >= 0.0) {
    double v12 = *((double *)this + 18);
  }
  else {
    double v12 = -a5.f64[0];
  }
  if (v9 >= 0.0)
  {
    int8x16_t v59 = v11;
  }
  else
  {
    *(double *)&v11.i64[1] = v9 + *(double *)&v8.i64[1];
    int8x16_t v59 = v11;
    double v9 = -v9;
  }
  float64x2_t v13 = (CGImage *)*((void *)this + 15);
  double v15 = *((double *)this + 20);
  double v14 = *((double *)this + 21);
  v60.f64[0] = v15;
  v60.f64[1] = v14;
  double v17 = *((double *)this + 22);
  double v16 = *((double *)this + 23);
  v61.f64[0] = v17;
  v61.f64[1] = v16;
  if (v17 < 0.0)
  {
    v60.f64[0] = v17 + v15;
    v61.f64[0] = -v17;
  }
  if (v16 < 0.0)
  {
    v60.f64[1] = v16 + v14;
    v61.f64[1] = -v16;
  }
  int v18 = *((_DWORD *)this + 25);
  f64 = a2[2].f64;
  int v20 = *((char *)this + 112);
  float v21 = *((float *)this + 29);
  unsigned int Width = CGImageGetWidth(v13);
  unsigned int Height = CGImageGetHeight(v13);
  memset(v62, 0, sizeof(v62));
  CA::CG::ImageFilter::ImageFilter((uint64_t)v62, Width, Height, v60.f64, a2 + 2, v20);
  int v24 = 0;
  if ((v18 & 1) != 0 && a3)
  {
    if ((LOBYTE(a2[8].f64[1]) & 2) != 0)
    {
      if (fabs(a2[2].f64[1]) >= 0.000001 || fabs(a2[3].f64[0]) >= 0.000001) {
        BOOL v25 = fabs(*f64) < 0.000001 && fabs(a2[3].f64[1]) < 0.000001;
      }
      else {
        BOOL v25 = 1;
      }
      int v24 = !v25;
    }
    else
    {
      int v24 = 1;
    }
  }
  uint64_t v26 = *(void *)&a2->f64[1];
  double v27 = *(double *)(v26 + 240);
  int CachingFlags = CGImageGetCachingFlags();
  double v29 = 0.1;
  if (CachingFlags != 1) {
    double v29 = 1.0;
  }
  uint64_t v30 = CA::Render::copy_image(v13, *(CGImage **)(v26 + 144), (CGColorSpace *)(v18 & 2 | 0x8Cu), v29 + v27, 1.0);
  if (v30)
  {
    float v31 = (atomic_uint *)v30;
    int updated = CA::OGL::Context::update_color_program_cache_whippet((CA::OGL::Context *)v26, *((float *)v30 + 14), *((CGColorSpace **)v30 + 6), v21);
    v31[3] &= ~0x80000u;
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    float v34 = (double *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x88uLL, 0x743898A5uLL);
    uint64_t v36 = (uint64_t)v34;
    if (v34)
    {
      double v37 = v12 / (double)Width;
      *((_DWORD *)v34 + 2) = 1;
      *((_DWORD *)v34 + 3) = 37;
      ++dword_1EB2ADE5C;
      *(void *)float v34 = &unk_1ED02F960;
      v34[2] = v37;
      v34[3] = 0.0;
      v34[4] = 0.0;
      unsigned char v34[5] = v9 / (double)Height;
      HIDWORD(v38) = v59.i32[1];
      *((int8x16_t *)v34 + 3) = v59;
      LODWORD(v38) = v31[4];
      LODWORD(v37) = v31[5];
      double v39 = (double)v38;
      double v40 = (double)*(unint64_t *)&v37;
      v34[8] = 0.0;
      v34[9] = 0.0;
      unsigned char v34[10] = v39;
      v34[11] = v40;
      v34[12] = v39;
      v34[13] = v40;
      __asm { FMOV            V0.2D, #1.0 }
      *((_OWORD *)v34 + 7) = _Q0;
      int v46 = v31;
      if (!atomic_fetch_add(v31 + 2, 1u))
      {
        int v46 = 0;
        atomic_fetch_add(v31 + 2, 0xFFFFFFFF);
      }
      *((void *)v34 + 16) = v46;
      if (v34[2] == 1.0 && v34[3] == 0.0 && v34[4] == 0.0 && v34[5] == 1.0) {
        *((_DWORD *)v34 + 3) |= 0x100u;
      }
    }
    uint64_t v47 = *(void *)(v26 + 16);
    BOOL v49 = 1;
    if (*(short float *)(v47 + 14) == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
    {
      uint64_t v48 = *((void *)v34 + 16);
      if (v48)
      {
        if ((*(unsigned char *)(v48 + 13) & 0x10) != 0 && v34[12] <= v34[10] && v34[13] <= v34[11]) {
          BOOL v49 = 0;
        }
      }
    }
    if ((*(unsigned char *)(v47 + 481) & 1) != 0
      && ((unsigned int v51 = *(unsigned __int8 *)(v47 + 480), v51 < 2)
       || v51 == 3 && ((v62[0] & 9) != 0 ? (int v58 = v24) : (int v58 = 0), ((v58 | v49) & 1) == 0)))
    {
      *(unsigned char *)(v47 + 481) &= ~1u;
      int v50 = 1;
    }
    else
    {
      int v50 = 0;
    }
    if ((*((_DWORD *)v34 + 3) & 0x300) == 0x100
      && (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v26 + 608))(v26, *((void *)v34 + 16), 1))
    {
      int v52 = LODWORD(v62[0]) | 0x1000;
      if ((*(_DWORD *)(v26 + 432) & 2) != 0) {
        int v52 = (LODWORD(v62[0]) | 0x1000) ^ 0x800;
      }
      unsigned int v53 = (double *)(v52 | ((*(unsigned char *)(*(void *)(v26 + 16) + 481) & 1) << 8));
      v64[0] = 0uLL;
      float64x2_t v65 = 0uLL;
      unsigned int v54 = CA::OGL::Context::bind_image(v26, 0, *(uint32x2_t **)(v36 + 128), v53, BYTE4(v62[0]), BYTE5(v62[0]), 1, 0, *((float *)v62 + 2), (float32x4_t *)v64, 0);
      if (v54)
      {
        long long v56 = v54;
        CA::OGL::pattern_texcoords((float64x2_t *)v36, (float *)v64, (uint64_t)&v65, v60, v61, (float64x2_t)0);
        memset(v63, 0, 200);
        CA::Transform::set_affine((CA::Transform *)v63, a2[2].f64[0], a2[2].f64[1], a2[3].f64[0], a2[3].f64[1], a2[4].f64[0], a2[4].f64[1]);
        *((void *)&v63[9] + 1) = &v60;
        *(void *)&v63[10] = v63;
        memset((char *)&v63[10] + 12, 0, 28);
        DWORD2(v63[10]) = v53;
        CA::OGL::fill_rect_tex((CA::OGL::Context *)v26, (uint64_t)&v63[9] + 8, (uint64_t)&v65, v57);
        (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v26 + 520))(v26, v56, 0);
      }
    }
    else
    {
      v64[0] = v60;
      v64[1] = v61;
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&a2[2], v64[0].f64, v35);
      float64x2_t v65 = 0uLL;
      CA::Transform::set_affine((CA::Transform *)v63, a2[2].f64[0], a2[2].f64[1], a2[3].f64[0], a2[3].f64[1], a2[4].f64[0], a2[4].f64[1]);
      CA::OGL::fill_pattern_rect(v26, v36, (uint64_t)&v60, &v65, (uint64_t)v63, v64, BYTE4(v62[0]), BYTE5(v62[0]), *((float *)v62 + 2), 0, 0);
    }
    if (v50) {
      *(unsigned char *)(*(void *)(v26 + 16) + 481) |= 1u;
    }
    if (updated) {
      v55.n128_u64[0] = (unint64_t)CA::OGL::Context::reset_color_program_cache_whippet((CA::OGL::Context *)v26);
    }
    if (atomic_fetch_add((atomic_uint *volatile)(v36 + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t, __n128))(*(void *)v36 + 16))(v36, v55);
    }
    if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
    }
  }
}

void CA::CG::DrawTiledImage::draw_color(CA::CG::DrawTiledImage *this, CA::CG::Renderer *a2, double a3, float64x2_t a4, float64x2_t a5)
{
  if ((*((unsigned char *)this + 100) & 2) != 0) {
    CA::CG::DrawOp::draw_color(this, a2);
  }
  else {
    CA::CG::DrawTiledImage::draw_image(this, (float64x2_t *)a2, 0, a3, a4, a5);
  }
}

void CA::CG::DrawTiledImage::draw_shape(CA::CG::DrawTiledImage *this, float64x2_t *a2, double a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)this + 25);
  if ((v6 & 2) != 0)
  {
    CA::CG::DrawTiledImage::draw_image(this, a2, 1, a3, a4, a5);
  }
  else
  {
    uint64_t v7 = *(void *)&a2->f64[1];
    unsigned int v8 = (v6 << 31 >> 31);
    double v10 = *((double *)this + 20);
    double v9 = *((double *)this + 21);
    double v22 = v10;
    double v23 = v9;
    double v12 = *((double *)this + 22);
    double v11 = *((double *)this + 23);
    double v24 = v12;
    double v25 = v11;
    if (v12 < 0.0)
    {
      double v22 = v12 + v10;
      double v24 = -v12;
    }
    if (v11 < 0.0)
    {
      double v23 = v11 + v9;
      double v25 = -v11;
    }
    uint64_t v13 = CA::CG::mat2_filter_bits((uint64_t)&a2[2]);
    unsigned int v19 = CA::CG::rect_filter_bits((uint64_t)&v22, a2[2].f64, v13, v14, v15, v16, v17, v18);
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    memset(v26, 0, sizeof(v26));
    CA::Transform::set_affine((CA::Transform *)v26, a2[2].f64[0], a2[2].f64[1], a2[3].f64[0], a2[3].f64[1], a2[4].f64[0], a2[4].f64[1]);
    *((void *)&v27 + 1) = &v22;
    *(void *)&long long v28 = v26;
    *((void *)&v28 + 1) = __PAIR64__(v8, v19);
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    CA::OGL::fill_rect(v7, (uint64_t)&v27 + 8, v20, v21);
  }
}

uint64_t CA::CG::DrawTiledImage::color_type(CA::CG::DrawTiledImage *this, CA::CG::Renderer *a2)
{
  if ((*((unsigned char *)this + 100) & 2) != 0)
  {
    uint64_t v4 = *((void *)this + 10);
    unsigned int v5 = 9;
    if (v4)
    {
      if (*((_DWORD *)this + 14)) {
        unsigned int v5 = 10;
      }
      else {
        unsigned int v5 = 9;
      }
    }
    if (*((short float *)this + 47) == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) && v4 == 0) {
      return v5 | 4;
    }
    else {
      return v5;
    }
  }
  else
  {
    int8x16_t v2 = vbslq_s8((int8x16_t)vcltzq_f64(*((float64x2_t *)this + 11)), (int8x16_t)vnegq_f64(*((float64x2_t *)this + 11)), *((int8x16_t *)this + 11));
    if (*(double *)v2.i64 <= *(double *)&v2.i64[1]) {
      v2.i64[0] = v2.i64[1];
    }
    uint64_t v3 = 8 * (*(double *)v2.i64 >= 1.79769313e308);
    if ((CGImageHasAlpha() & 1) == 0)
    {
      if (CGImageGetMask()) {
        return v3;
      }
      else {
        return v3 | 4;
      }
    }
  }
  return v3;
}

uint64_t CA::CG::DrawTiledImage::debug_color(CA::CG::DrawTiledImage *this)
{
  return 543067616;
}

BOOL CA::CG::DrawTiledImage::shape_extent_contains(CA::CG::DrawTiledImage *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  double v5 = *((double *)this + 20);
  double v4 = *((double *)this + 21);
  v13.f64[0] = v5;
  v13.f64[1] = v4;
  double v7 = *((double *)this + 22);
  double v6 = *((double *)this + 23);
  v14.f64[0] = v7;
  v14.f64[1] = v6;
  if (v7 < 0.0)
  {
    v13.f64[0] = v7 + v5;
    v14.f64[0] = -v7;
  }
  if (v6 < 0.0)
  {
    v13.f64[1] = v6 + v4;
    v14.f64[1] = -v6;
  }
  CA::Mat2Impl::mat2_apply_to_rect_interior((uint64_t)a2 + 32, v13.f64, a3);
  int8x16_t v8 = (int8x16_t)vceqzq_f64(v14);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v8, 1), v8).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v9 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v9), 1), v9).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v12 = 0uLL;
  }
  else
  {
    int32x4_t v10 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v13, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v12 = vuzp1q_s32(v10, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v13, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v10));
  }
  return CA::Bounds::contains((CA::Bounds *)&v12, (uint64_t)a3);
}

uint64_t CA::CG::DrawTiledImage::may_flush()
{
  return 1;
}

float64x2_t *CA::CG::DrawTiledImage::compute_dod(CA::CG::DrawTiledImage *this, CA::Rect *a2)
{
  CA::Rect::operator=((double *)a2, (double *)this + 20);

  return CA::Rect::apply_transform(v3, (const CGAffineTransform *)((char *)this + 8));
}

void CA::CG::DrawTiledImage::~DrawTiledImage(CGImageRef *this)
{
  *this = (CGImageRef)&unk_1ED028520;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CGImageRef)&unk_1ED028520;
  CGImageRelease(this[15]);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

uint64_t CAGetCachedCGIOSurfaceContext(uint64_t a1, int a2, uint64_t a3)
{
  kern_return_t v13;
  uint64_t result;
  __IOSurface *v15;
  void *BaseAddress;
  __IOSurface *v17;
  size_t BytesPerRow;
  unsigned char *v19;
  unsigned char *v20;
  int v21;
  int v22;
  uint64_t v23;
  void *v24;
  CA::CG::AccelQueue *v25;
  __IOSurface *v26;
  const void *v27;

  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&context_lock);
    uint64_t v5 = context_list;
    if (!context_list)
    {
LABEL_6:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      *((_DWORD *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x48uLL, 0x743898A5uLL) + 2) = 1;
      operator new();
    }
    while (*(unsigned char *)(v5 + 64) || *(_DWORD *)(v5 + 8) != 1)
    {
      uint64_t v5 = *(void *)v5;
      if (!v5) {
        goto LABEL_6;
      }
    }
    *(unsigned char *)(v5 + 64) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)&context_lock);
    while (1)
    {
      int v7 = *(_DWORD *)(a1 + 8);
      if (!v7) {
        break;
      }
      int v8 = *(_DWORD *)(a1 + 8);
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 8), (unsigned int *)&v8, v7 + 1);
      if (v8 == v7)
      {
        uint64_t v9 = a1;
        goto LABEL_21;
      }
    }
    uint64_t v9 = 0;
LABEL_21:
    *(void *)(v5 + 4CASetDebugMessage("", 0) = v9;
    CA::CG::AccelContextDelegate<CA::CG::MetalDrawable>::set_drawable(*(CGColorSpace **)(v5 + 56), a1);
    double v24 = *(void **)(v5 + 40);
    double v25 = (CA::CG::AccelQueue *)v24[9];
    if (v25
      || (double v25 = (CA::CG::AccelQueue *)(*(uint64_t (**)(void))(*v24 + 72))(*(void *)(v5 + 40)),
          (_OWORD v24[9] = v25) != 0))
    {
      *((void *)v25 + 25) = a3;
      CA::CG::AccelQueue::set_label(v25, @"com.apple.coreanimation.CGIOSurfaceContext");
    }
    return *(void *)(v5 + 16);
  }
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10 <= 0x23 && ((0x1FFFFFF2FuLL >> v10) & 1) == 0) {
    return 0;
  }
  int32x4_t v12 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  float64x2_t v13 = IOSurfaceLock(v12, 0, 0);
  double result = 0;
  if (v13) {
    return result;
  }
  uint64_t v15 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  BaseAddress = IOSurfaceGetBaseAddress(v15);
  int8x16_t v17 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  size_t BytesPerRow = IOSurfaceGetBytesPerRow(v17);
  unsigned int v19 = CAGetCachedCGBitmapContext_(BaseAddress, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 16), BytesPerRow, *(CGColorSpaceRef *)(a1 + 24));
  if (!v19)
  {
    uint64_t v26 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    IOSurfaceUnlock(v26, 0, 0);
    return 0;
  }
  int v20 = v19;
  while (1)
  {
    float v21 = *(_DWORD *)(a1 + 8);
    if (!v21) {
      break;
    }
    double v22 = *(_DWORD *)(a1 + 8);
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 8), (unsigned int *)&v22, v21 + 1);
    if (v22 == v21)
    {
      double v23 = a1;
      goto LABEL_30;
    }
  }
  double v23 = 0;
LABEL_30:
  *((void *)v19 + 5) = v23;
  long long v27 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  *((void *)v20 + 6) = v27;
  CFRetain(v27);
  return *((void *)v20 + 2);
}

BOOL CAIOSurfaceIsAcceleratable(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  BOOL result = 0;
  if (a2)
  {
    if (a3)
    {
      BOOL result = 0;
      if (a4 <= 0x23 && ((1 << a4) & 0xA0006660ALL) != 0)
      {
        if (gpu_access_once[0] != -1) {
          dispatch_once_f(gpu_access_once, 0, (dispatch_function_t)init_gpu_access);
        }
        if (gpu_access_override == 1)
        {
          if (!gpu_access_allowed) {
            return 0;
          }
        }
        else if (CAIsAppSuspended())
        {
          return 0;
        }
        if (a2 <= 0x800 && a3 < 0x801) {
          return 1;
        }
        if ((a3 | a2) >> 13) {
          return 0;
        }
        BOOL result = 0;
        {
          if (a1)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
            uint64_t v8 = CA::CG::AccelRenderer::_list;
            if (CA::CG::AccelRenderer::_list)
            {
              while (1)
              {
                if (!*(_DWORD *)(v8 + 4232) && *(void *)(v8 + 144) == a1)
                {
                  uint64_t v9 = *(void *)(v8 + 4248);
                  if (v9) {
                    break;
                  }
                }
                uint64_t v8 = *(void *)(v8 + 4272);
                if (!v8) {
                  goto LABEL_25;
                }
              }
            }
            else
            {
LABEL_25:
              LODWORD(v9) = 0;
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
          }
          else
          {
            LODWORD(v9) = 0;
          }
          if (a2 <= a3) {
            unsigned int v10 = a3;
          }
          else {
            unsigned int v10 = a2;
          }
          if (v9) {
            BOOL v11 = v10 > v9;
          }
          else {
            BOOL v11 = 0;
          }
          return !v11;
        }
      }
    }
  }
  return result;
}

void CA_CGContextAddUnevenRoundRect(CGContext *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  if (!CGRectIsNull(*(CGRect *)&a3))
  {
    uint64_t v8 = 0;
    while ((*(void *)(a2 + v8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(void *)(a2 + v8 + 8) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v8 += 16;
      if (v8 == 64)
      {
        uint64_t v9 = (const CGPath *)CGPathCreateWithUnevenCornersRoundedRect();
        CGContextAddPath(a1, v9);
        CGPathRelease(v9);
        return;
      }
    }
  }
}

CGColorRef CA_CGPatternColorCreate(CGPattern *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  if (CGPatternIsColored())
  {
    Patteruint64_t n = CGColorSpaceCreatePattern(0);
    *(void *)&long long v11 = 0x3FF0000000000000;
  }
  else
  {
    uint64_t v3 = (CGColorSpace *)CAGetColorSpace(0x1Du);
    Patteruint64_t n = CGColorSpaceCreatePattern(v3);
    __asm { FMOV            V0.2D, #1.0 }
    long long v11 = _Q0;
    long long v12 = _Q0;
  }
  CGColorRef v9 = CGColorCreateWithPattern(Pattern, a1, (const CGFloat *)&v11);
  CGColorSpaceRelease(Pattern);
  return v9;
}

uint64_t colorspace_has_srgb_gamma(CGColorSpace *a1)
{
  os_unfair_lock_lock(&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  if (!colorspace_has_srgb_gamma(CGColorSpace *)::src_curve)
  {
    CAGetColorSpace(3u);
    colorspace_has_srgb_gamma(CGColorSpace *)::src_curve = CGColorSpaceCreateConversionCurve();
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    if (*(CGColorSpace **)&colorspace_has_srgb_gamma(CGColorSpace *)::cache[i] == a1)
    {
      uint64_t v4 = BYTE8(colorspace_has_srgb_gamma(CGColorSpace *)::cache[i]) != 0;
      goto LABEL_10;
    }
  }
  os_unfair_lock_unlock(&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  uint64_t ConversionCurve = CGColorSpaceCreateConversionCurve();
  uint64_t v4 = CGColorCurveEqualToGammaCurve();
  if (ConversionCurve) {
    CGColorCurveRelease();
  }
  os_unfair_lock_lock(&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  CGColorSpaceRelease((CGColorSpaceRef)xmmword_1E8F867E8);
  long long v5 = xmmword_1E8F867C8;
  long long v6 = xmmword_1E8F867D8;
  xmmword_1E8F867C8 = colorspace_has_srgb_gamma(CGColorSpace *)::cache[0];
  xmmword_1E8F867D8 = v5;
  xmmword_1E8F867E8 = v6;
  *(void *)&colorspace_has_srgb_gamma(CGColorSpace *)::cache[0] = CGColorSpaceRetain(a1);
  BYTE8(colorspace_has_srgb_gamma(CGColorSpace *)::cache[0]) = v4;
LABEL_10:
  os_unfair_lock_unlock(&colorspace_has_srgb_gamma(CGColorSpace *)::lock);
  return v4;
}

unsigned char *get_colorspace_map(unsigned char *result)
{
  {
    uint64_t v15 = result;
    BOOL result = v15;
    if (v1)
    {
      uint64_t v2 = *MEMORY[0x1E4F1DB90];
      get_colorspace_map(unsigned char *)::space_names = 0;
      *(void *)algn_1E8F88C68 = v2;
      uint64_t v3 = *MEMORY[0x1E4F1DBC8];
      qword_1E8F88C70 = *MEMORY[0x1E4F1DB98];
      unk_1E8F88C78 = v3;
      uint64_t v4 = *MEMORY[0x1E4F1DBE8];
      qword_1E8F88C80 = *MEMORY[0x1E4F1DC98];
      unk_1E8F88C88 = v4;
      uint64_t v5 = *MEMORY[0x1E4F1DC00];
      qword_1E8F88C90 = *MEMORY[0x1E4F1DBE0];
      unk_1E8F88C98 = v5;
      uint64_t v6 = *MEMORY[0x1E4F1DBB8];
      qword_1E8F88CA0 = *MEMORY[0x1E4F1DC78];
      unk_1E8F88CA8 = v6;
      uint64_t v7 = *MEMORY[0x1E4F1DC18];
      qword_1E8F88CB0 = *MEMORY[0x1E4F1DBD0];
      unk_1E8F88CB8 = v7;
      uint64_t v8 = *MEMORY[0x1E4F1DC20];
      qword_1E8F88CC0 = *MEMORY[0x1E4F1DBF0];
      unk_1E8F88CC8 = v8;
      uint64_t v9 = *MEMORY[0x1E4F1DB70];
      qword_1E8F88CD0 = *MEMORY[0x1E4F1DC08];
      unk_1E8F88CD8 = v9;
      uint64_t v10 = *MEMORY[0x1E4F1DB88];
      qword_1E8F88CE0 = *MEMORY[0x1E4F1DB78];
      unk_1E8F88CE8 = v10;
      uint64_t v11 = *MEMORY[0x1E4F1DC90];
      qword_1E8F88CF0 = *MEMORY[0x1E4F1DC58];
      unk_1E8F88CF8 = v11;
      uint64_t v12 = *MEMORY[0x1E4F1DBD8];
      qword_1E8F88D00 = *MEMORY[0x1E4F1DC28];
      unk_1E8F88D08 = v12;
      uint64_t v13 = *MEMORY[0x1E4F1DBF8];
      qword_1E8F88D10 = *MEMORY[0x1E4F1DC10];
      unk_1E8F88D18 = v13;
      uint64_t v14 = *MEMORY[0x1E4F1DC50];
      qword_1E8F88D20 = *MEMORY[0x1E4F1DBA0];
      unk_1E8F88D28 = v14;
      qword_1E8F88D30 = *MEMORY[0x1E4F1DC68];
      BOOL result = v15;
    }
  }
  void *result = 27;
  return result;
}

CGImage *CA_CGImageIsA8(CGImage *result)
{
  if (result)
  {
    int v1 = result;
    return (CGImage *)(CGImageGetBitsPerPixel(result) == 8 && (CGImageIsMask(v1) || !CGImageGetColorSpace(v1)));
  }
  return result;
}

CGImageRef CA_copyA8CGImageAsL8(CGImage *a1)
{
  size_t Width = CGImageGetWidth(a1);
  size_t Height = CGImageGetHeight(a1);
  size_t BytesPerRow = CGImageGetBytesPerRow(a1);
  uint64_t v5 = (CGColorSpace *)CAGetColorSpace(3u);
  DataProvider = CGImageGetDataProvider(a1);
  return CGImageCreate(Width, Height, 8uLL, 8uLL, BytesPerRow, v5, 0, DataProvider, 0, 0, kCGRenderingIntentDefault);
}

CGImageRef CA_copyL8CGImageAsA8(CGImage *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v7 = xmmword_184997D50;
  size_t Width = CGImageGetWidth(a1);
  size_t Height = CGImageGetHeight(a1);
  size_t BytesPerRow = CGImageGetBytesPerRow(a1);
  DataProvider = CGImageGetDataProvider(a1);
  return CGImageMaskCreate(Width, Height, 8uLL, 8uLL, BytesPerRow, DataProvider, (const CGFloat *)&v7, 0);
}

CFStringRef CACreateStringWithFloatArray(uint64_t a1, unint64_t a2, double a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  size_t v6 = 32 * a2;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = &v16[-4 * v7];
  bzero(v8, v6);
  uint64_t v9 = 0;
  uint64_t v10 = (char *)v8;
  while (1)
  {
    if (v9)
    {
      *v10++ = 32;
      --v6;
    }
    float v11 = *(float *)(a1 + 4 * v9);
    float v12 = truncf(v11);
    if (fabsf(v11) <= 9.2234e18 && v11 == v12)
    {
      int v14 = snprintf_l(v10, v6, 0, "%ld", (uint64_t)v11);
      if (v6 < v14) {
        return 0;
      }
      v10 += v14;
    }
    else
    {
      uint64_t v10 = x_dtostr_(v10, v6, 1, v11, a3);
    }
    if (!v10) {
      break;
    }
    if (v6 >= 2 && ++v9 < a2) {
      continue;
    }
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v10 - (char *)v8, 0x8000100u, 0);
  }
  return 0;
}

CFStringRef CACreateStringWithDoubleArray(uint64_t a1, unint64_t a2, double a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  size_t v6 = 32 * a2;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = &v16[-4 * v7];
  bzero(v8, v6);
  uint64_t v9 = (char *)v8;
  if (!v6) {
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v9 - (char *)v8, 0x8000100u, 0);
  }
  uint64_t v9 = (char *)v8;
  if (!a2) {
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v9 - (char *)v8, 0x8000100u, 0);
  }
  uint64_t v10 = 0;
  uint64_t v9 = (char *)v8;
  while (1)
  {
    if (v10)
    {
      *v9++ = 32;
      --v6;
    }
    double v11 = *(double *)(a1 + 8 * v10);
    double v12 = trunc(v11);
    if (fabs(v11) <= 9.22337204e18 && v11 == v12)
    {
      int v14 = snprintf_l(v9, v6, 0, "%ld", (uint64_t)v11);
      if (v6 < v14) {
        return 0;
      }
      v9 += v14;
    }
    else
    {
      uint64_t v9 = x_dtostr_(v9, v6, 1, v11, a3);
    }
    if (!v9) {
      break;
    }
    if (v6 >= 2 && ++v10 < a2) {
      continue;
    }
    return CFStringCreateWithBytes(0, (const UInt8 *)v8, v9 - (char *)v8, 0x8000100u, 0);
  }
  return 0;
}

__IOSurface *CACreateIOSurfaceBackedCGImage(__IOSurface *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    CFRetain(result);
    CFDictionaryRef v5 = CFDictionaryCreate(0, MEMORY[0x1E4F1DD78], MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!a3)
    {
      OSType PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(v4);
      uint64_t v7 = (CA::Render *)CA::Render::fourcc_to_format(PixelFormat);
      CA::Render::format_default_colorspace(v7);
    }
    CGImageProviderCreate();
    CFRelease(v5);
    uint64_t v8 = CGImageCreateWithImageProvider();
    CGImageProviderRelease();
    return (__IOSurface *)v8;
  }
  return result;
}

uint64_t copy_image_block_set(__IOSurface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 0;
  }
  vImagePixelCount Width = IOSurfaceGetWidth(a1);
  vImagePixelCount Height = IOSurfaceGetHeight(a1);
  signed int PixelFormat = IOSurfaceGetPixelFormat(a1);
  Componentint Type = CGImageProviderGetComponentType();
  size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(a1, 0);
  if (PixelFormat > 1380401728)
  {
    if (PixelFormat == 1380401729)
    {
LABEL_9:
      IOSurfaceLock(a1, 1u, 0);
      CFRetain(a1);
LABEL_10:
      src.data = (void *)CGImageBlockCreate();
      return CGImageBlockSetCreate();
    }
    int v11 = 1380411457;
  }
  else
  {
    if (PixelFormat == 1111970369)
    {
      IOSurfaceLock(a1, 1u, 0);
      src.data = BaseAddressOfPlane;
      src.double height = Height;
      src.double width = Width;
      src.rowBytes = BytesPerRowOfPlane;
      dest.data = malloc_type_malloc(BytesPerRowOfPlane * Height, 0xD539917BuLL);
      dest.double height = Height;
      dest.double width = Width;
      dest.rowBytes = BytesPerRowOfPlane;
      *(_DWORD *)permuteMap = 50331906;
      vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
      CGImageBlockCreate();
      uint64_t v3 = CGImageBlockSetCreate();
      IOSurfaceUnlock(a1, 1u, 0);
      return v3;
    }
    int v11 = 1279340600;
  }
  if (PixelFormat == v11) {
    goto LABEL_9;
  }
  BOOL v13 = PixelFormat == 1999843442 || PixelFormat == 1647534392;
  int v14 = v13;
  if (v13 && ComponentType == 1)
  {
    unint64_t v15 = qword_1EB2A87C8 - 1 + 4 * Width;
    unint64_t v16 = v15 / qword_1EB2A87C8 * qword_1EB2A87C8;
    uint64_t v17 = v15 & -qword_1EB2A87C8;
    if ((qword_1EB2A87C8 & (qword_1EB2A87C8 - 1)) != 0) {
      size_t v18 = v16;
    }
    else {
      size_t v18 = v17;
    }
    unsigned int v19 = malloc_type_calloc(v18, Height, 0x5E5DA95uLL);
    if (!v19) {
      return 0;
    }
    int v20 = v19;
    float v21 = a1;
    double v22 = v20;
    size_t v23 = v18;
    BOOL v24 = 0;
  }
  else
  {
    if (ComponentType != 5) {
      int v14 = 0;
    }
    if (v14 != 1)
    {
      if (x_log_hook_p())
      {
        if (PixelFormat < 0) {
          __maskrune(HIBYTE(PixelFormat), 0x40000uLL);
        }
        if (BYTE2(PixelFormat) > 0x7Fu) {
          __maskrune(BYTE2(PixelFormat), 0x40000uLL);
        }
        if (BYTE1(PixelFormat) > 0x7Fu) {
          __maskrune(BYTE1(PixelFormat), 0x40000uLL);
        }
        if (PixelFormat > 0x7Fu) {
          __maskrune(PixelFormat, 0x40000uLL);
        }
        x_log_();
      }
      else
      {
        uint64_t v30 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          unsigned int v31 = HIBYTE(PixelFormat);
          uint64_t v32 = MEMORY[0x1E4F14390];
          if (PixelFormat < 0) {
            int v33 = __maskrune(v31, 0x40000uLL);
          }
          else {
            int v33 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v31 + 60) & 0x40000;
          }
          if (v33) {
            int v34 = PixelFormat >> 24;
          }
          else {
            int v34 = 32;
          }
          if (BYTE2(PixelFormat) <= 0x7Fu) {
            int v35 = *(_DWORD *)(v32 + 4 * BYTE2(PixelFormat) + 60) & 0x40000;
          }
          else {
            int v35 = __maskrune(BYTE2(PixelFormat), 0x40000uLL);
          }
          if (v35) {
            int v36 = SBYTE2(PixelFormat);
          }
          else {
            int v36 = 32;
          }
          if (BYTE1(PixelFormat) <= 0x7Fu) {
            int v37 = *(_DWORD *)(v32 + 4 * BYTE1(PixelFormat) + 60) & 0x40000;
          }
          else {
            int v37 = __maskrune(BYTE1(PixelFormat), 0x40000uLL);
          }
          if (v37) {
            int v38 = SBYTE1(PixelFormat);
          }
          else {
            int v38 = 32;
          }
          if (PixelFormat <= 0x7Fu) {
            int v39 = *(_DWORD *)(v32 + 4 * PixelFormat + 60) & 0x40000;
          }
          else {
            int v39 = __maskrune(PixelFormat, 0x40000uLL);
          }
          src.data = (void *)__PAIR64__(v34, 67109888);
          int v40 = (char)PixelFormat;
          LOWORD(src.height) = 1024;
          if (!v39) {
            int v40 = 32;
          }
          *(_DWORD *)((char *)&src.height + 2) = v36;
          HIWORD(src.height) = 1024;
          LODWORD(src.width) = v38;
          WORD2(src.width) = 1024;
          *(_DWORD *)((char *)&src.width + 6) = v40;
          _os_log_impl(&dword_184668000, v30, OS_LOG_TYPE_ERROR, "unsupported surface format: %c%c%c%c\n", (uint8_t *)&src, 0x1Au);
        }
      }
      return 0;
    }
    unint64_t v25 = qword_1EB2A87C8 - 1 + 8 * Width;
    unint64_t v26 = v25 / qword_1EB2A87C8 * qword_1EB2A87C8;
    uint64_t v27 = v25 & -qword_1EB2A87C8;
    if ((qword_1EB2A87C8 & (qword_1EB2A87C8 - 1)) != 0) {
      size_t v28 = v26;
    }
    else {
      size_t v28 = v27;
    }
    long long v29 = malloc_type_calloc(v28, Height, 0xFABA3932uLL);
    if (!v29) {
      return 0;
    }
    int v20 = v29;
    float v21 = a1;
    double v22 = v20;
    size_t v23 = v28;
    BOOL v24 = 1;
  }
  if (convert_CIF10(v21, v22, v23, v24)) {
    goto LABEL_10;
  }
  free(v20);
  return 0;
}

BOOL convert_CIF10(__IOSurface *a1, void *a2, size_t a3, BOOL a4)
{
  if (IOSurfaceLock(a1, 1u, 0)) {
    return 0;
  }
  OSType PixelFormat = IOSurfaceGetPixelFormat(a1);
  int v10 = PixelFormat;
  if (PixelFormat == 1999843442)
  {
    vImagePixelCount Width = IOSurfaceGetWidth(a1);
    vImagePixelCount Height = IOSurfaceGetHeight(a1);
    size_t BytesPerRow = IOSurfaceGetBytesPerRow(a1);
    BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddress(a1);
    size_t BytesPerRowOfPlane = 0;
LABEL_8:
    BaseAddressOfPlane = 0;
    goto LABEL_9;
  }
  if (PixelFormat != 1647534392)
  {
    vImagePixelCount Width = 0;
    vImagePixelCount Height = 0;
    size_t BytesPerRow = 0;
    size_t BytesPerRowOfPlane = 0;
    BaseAddress = 0;
    goto LABEL_8;
  }
  vImagePixelCount Width = IOSurfaceGetWidthOfPlane(a1, 0);
  vImagePixelCount Height = IOSurfaceGetHeightOfPlane(a1, 0);
  size_t BytesPerRow = IOSurfaceGetBytesPerRowOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a1, 1uLL);
  BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddressOfPlane(a1, 0);
  BaseAddressOfPlane = (unsigned __int8 *)IOSurfaceGetBaseAddressOfPlane(a1, 1uLL);
LABEL_9:
  BOOL v17 = convert_CIF10(Width, Height, BytesPerRow, BytesPerRowOfPlane, BaseAddress, BaseAddressOfPlane, v10, a2, a3, a4);
  IOSurfaceUnlock(a1, 1u, 0);
  return v17;
}

BOOL convert_CIF10(vImagePixelCount a1, vImagePixelCount a2, size_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, int a7, void *a8, size_t a9, BOOL a10)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  src.data = a5;
  src.double height = a2;
  src.double width = a1;
  src.rowBytes = a3;
  int v14 = a6;
  vImagePixelCount v15 = a2;
  vImagePixelCount v16 = a1;
  uint64_t v17 = a4;
  v13.data = a8;
  v13.double height = a2;
  v13.double width = a1;
  v13.rowBytes = a9;
  BOOL v10 = !a10;
  *(_DWORD *)permuteMap = 197121;
  if (a7 != 1999843442 || !a10)
  {
    if (a7 != 1647534392) {
      BOOL v10 = 1;
    }
    if (v10)
    {
      if (a7 != 1999843442 || a10)
      {
        uint64_t v11 = 0;
        if (a7 == 1647534392 && !a10) {
          uint64_t v11 = vImageConvert_XRGB2101010_A8ToARGB8888();
        }
      }
      else
      {
        uint64_t v11 = vImageConvert_XRGB2101010ToARGB8888(&src, 0xFFu, &v13, 384, 894, permuteMap, 0);
      }
    }
    else
    {
      uint64_t v11 = vImageConvert_XRGB2101010_A8ToARGB16F();
    }
  }
  else
  {
    uint64_t v11 = vImageConvert_XRGB2101010ToARGB16F(&src, 1.0, &v13, 384, 894, permuteMap, 0x800u);
  }
  return v11 == 0;
}

void release_surface_block(__IOSurface *a1)
{
  IOSurfaceUnlock(a1, 1u, 0);

  CFRelease(a1);
}

uint64_t $_1::__invoke()
{
  return 0;
}

uint64_t copy_image_block_set_metal(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = [a1 width];
  unsigned int v3 = [a1 height];
  size_t BytesPerRow = CAMetalTextureGetBytesPerRow(a1);
  int PixelFormat = CAMetalTextureGetPixelFormat(a1);
  Componentint Type = CGImageProviderGetComponentType();
  size_t v28 = 0;
  long long v29 = 0;
  CAMetalTextureGetBytes(a1, &v29, (unint64_t *)&v28);
  uint64_t v7 = 0;
  uint64_t v8 = v29;
  if (v29 && BytesPerRow)
  {
    if (PixelFormat == 1380411457 || PixelFormat == 1380401729)
    {
      BOOL v10 = malloc_type_malloc(0x18uLL, 0xC004023DE3DC6uLL);
      uint64_t v11 = v28;
      void *v10 = v8;
      v10[1] = v11;
      _DWORD v10[2] = CFRetain(a1);
      goto LABEL_8;
    }
    if (PixelFormat == 1111970369)
    {
      src.data = v29;
      src.double height = v3;
      src.double width = v2;
      src.rowBytes = BytesPerRow;
      dest.data = malloc_type_malloc(BytesPerRow * v3, 0xEB2A622CuLL);
      dest.double height = v3;
      dest.double width = v2;
      dest.rowBytes = BytesPerRow;
      *(_DWORD *)permuteMap = 50331906;
      vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
      CGImageBlockCreate();
      uint64_t v7 = CGImageBlockSetCreate();
      CA::Render::aligned_free(v8, (size_t)v28, v9);
      return v7;
    }
    if (PixelFormat == 1999843442 && ComponentType == 1)
    {
      unint64_t v13 = qword_1EB2A87C8 - 1 + 4 * v2;
      unint64_t v14 = v13 / qword_1EB2A87C8 * qword_1EB2A87C8;
      uint64_t v15 = v13 & -qword_1EB2A87C8;
      if ((qword_1EB2A87C8 & (qword_1EB2A87C8 - 1)) != 0) {
        size_t v16 = v14;
      }
      else {
        size_t v16 = v15;
      }
      uint64_t v17 = malloc_type_calloc(v16, v3, 0x5EDBA9B3uLL);
      if (!v17) {
        return 0;
      }
      size_t v18 = v17;
      unsigned int v19 = a1;
      uint64_t v20 = v18;
      size_t v21 = v16;
      BOOL v22 = 0;
LABEL_28:
      if (!convert_CIF10(v19, v20, v21, v22))
      {
        free(v18);
        return 0;
      }
LABEL_8:
      src.data = (void *)CGImageBlockCreate();
      return CGImageBlockSetCreate();
    }
    uint64_t v7 = 0;
    if (PixelFormat == 1999843442 && ComponentType == 5)
    {
      unint64_t v23 = qword_1EB2A87C8 - 1 + 8 * v2;
      if ((qword_1EB2A87C8 & (qword_1EB2A87C8 - 1)) != 0) {
        size_t v24 = v23 / qword_1EB2A87C8 * qword_1EB2A87C8;
      }
      else {
        size_t v24 = v23 & -qword_1EB2A87C8;
      }
      unint64_t v25 = malloc_type_calloc(v24, v3, 0x2886E8C1uLL);
      if (!v25) {
        return 0;
      }
      size_t v18 = v25;
      unsigned int v19 = a1;
      uint64_t v20 = v18;
      size_t v21 = v24;
      BOOL v22 = 1;
      goto LABEL_28;
    }
  }
  return v7;
}

BOOL convert_CIF10(void *a1, void *a2, size_t a3, BOOL a4)
{
  v18[1] = *(CA::Render **)MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  v18[0] = 0;
  CAMetalTextureGetBytes(a1, v18, (unint64_t *)&v17);
  int PixelFormat = CAMetalTextureGetPixelFormat(a1);
  BOOL v10 = (unsigned __int8 *)v18[0];
  if (v18[0]) {
    BOOL v11 = PixelFormat == 1999843442;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    vImagePixelCount v14 = [a1 width];
    vImagePixelCount v15 = [a1 height];
    size_t BytesPerRow = CAMetalTextureGetBytesPerRow(a1);
    BOOL v12 = convert_CIF10(v14, v15, BytesPerRow, 0, v10, 0, 1999843442, a2, a3, a4);
    goto LABEL_8;
  }
  BOOL v12 = 0;
  BOOL result = 0;
  if (v18[0])
  {
LABEL_8:
    CA::Render::aligned_free((CA::Render *)v10, (size_t)v17, v9);
    return v12;
  }
  return result;
}

void $_2::__invoke(uint64_t a1, uint64_t a2, void *a3)
{
  CA::Render::aligned_free(*(CA::Render **)a1, *(void *)(a1 + 8), a3);
  CFRelease(*(CFTypeRef *)(a1 + 16));

  free((void *)a1);
}

void CA::CG::DrawLines::draw_shape(CA::CG::DrawLines *this, CA::CG::Renderer *a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 16) && *((_DWORD *)this + 36))
  {
    *(void *)&long long v98 = 0;
    v88.i64[0] = 0;
    CGDashGetPattern();
  }
  uint64_t v4 = (int32x2_t *)*((void *)a2 + 1);
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) != 0) {
    uint64_t v6 = 88;
  }
  else {
    uint64_t v6 = 32;
  }
  if ((v5 & 4) != 0) {
    uint64_t v7 = (double *)((char *)a2 + 88);
  }
  else {
    uint64_t v7 = (double *)((char *)a2 + 32);
  }
  double v8 = *((double *)this + 14);
  double v9 = *MEMORY[0x1E4F1DD98];
  if (v8 == *MEMORY[0x1E4F1DD98])
  {
    int v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)v4 + 184))(*((void *)a2 + 1), 10);
    int v11 = *((_DWORD *)this + 25) & 1;
    if (v10) {
      _ZF = v11 == 0;
    }
    else {
      _ZF = 0;
    }
    if (!_ZF)
    {
      double v13 = 1.0;
      goto LABEL_27;
    }
    uint64_t v97 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    int8x16_t v89 = 0u;
    long long v90 = 0u;
    int8x16_t v88 = 0u;
    double v15 = *(double *)((char *)a2 + v6);
    if (v15 == 1.0)
    {
      uint64_t v28 = 1;
      while (v28 != 6)
      {
        uint64_t v29 = v28;
        double v30 = v7[v28];
        double v31 = CA::Mat2Impl::mat2_identity_double[v28++];
        if (v30 != v31)
        {
          if ((unint64_t)(v29 - 1) <= 4) {
            goto LABEL_19;
          }
          break;
        }
      }
      char v81 = 1;
    }
    else
    {
LABEL_19:
      CA::Transform::set_affine((CA::Transform *)&v88, v15, v7[1], v7[2], v7[3], v7[4], v7[5]);
      char v81 = 0;
      v4[102] = (int32x2_t)&v88;
      ++v4[32].i32[0];
    }
    long long v87 = 0u;
    long long v105 = 0u;
    uint64_t v32 = *(void *)(*(void *)&v4[31] + 8);
    v102.i64[0] = (uint64_t)v4;
    v102.i64[1] = v32;
    long long v104 = 0u;
    unint64_t v103 = 0;
    WORD4(v104) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v102);
    v33.i32[0] = 1073741822;
    int32x4_t v84 = v33;
    __asm { FMOV            V0.2D, #-1.0 }
    float64x2_t v82 = _Q0;
    int8x16_t v83 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v102, (int32x2_t *)&v87))
    {
      v39.i32[1] = 0;
      v39.i64[1] = 0;
      float64x2_t v85 = 0u;
      long long v86 = 0u;
      if (*((void *)this + 16))
      {
        if (SDWORD2(v87) <= SHIDWORD(v87)) {
          int v40 = HIDWORD(v87);
        }
        else {
          int v40 = DWORD2(v87);
        }
        v39.i32[0] = v40;
        v41.i64[0] = (int)v87;
        v41.i64[1] = SDWORD1(v87);
        double v42 = (double)SDWORD2(v87);
        int8x16_t v43 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v39, v84), 0), v83, (int8x16_t)vcvtq_f64_s64(v41));
        if (v40 > 1073741822) {
          double v42 = 1.79769313e308;
        }
        float64x2_t v85 = (float64x2_t)v43;
        if (v40 <= 1073741822) {
          double v44 = (double)SHIDWORD(v87);
        }
        else {
          double v44 = 1.79769313e308;
        }
        *(double *)&long long v86 = v42;
        *((double *)&v86 + 1) = v44;
        *(_OWORD *)double v99 = 0u;
        long long v100 = 0u;
        long long v98 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v98, v7, v38);
        CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&v98, v85.f64, v45);
        if (*(double *)&v86 <= *((double *)&v86 + 1)) {
          double v46 = *((double *)&v86 + 1);
        }
        else {
          double v46 = *(double *)&v86;
        }
        if (v46 < 1.79769313e308)
        {
          double v47 = *(double *)&v86 >= *((double *)&v86 + 1) ? *((double *)&v86 + 1) : *(double *)&v86;
          if (v47 > 0.0)
          {
            float64x2_t v85 = vaddq_f64(v85, v82);
            double v48 = *((double *)&v86 + 1) + 2.0;
            *(double *)&long long v86 = *(double *)&v86 + 2.0;
            *((double *)&v86 + 1) = *((double *)&v86 + 1) + 2.0;
            if (*(double *)&v86 <= 0.0 || v48 <= 0.0) {
              long long v86 = 0uLL;
            }
          }
        }
      }
      bzero(v99, 0xC00uLL);
      *(void *)&long long v98 = &unk_1ED027EF8;
      *((void *)&v98 + 1) = v4;
      uint64_t v101 = 0;
      if (*((void *)this + 19) >= 2uLL)
      {
        unint64_t v49 = 1;
        int v50 = (double *)((char *)this + 160);
        do
        {
          uint64_t v51 = *((void *)this + 16);
          if (v51) {
          else
          }
          v50 += 4;
          v49 += 2;
        }
        while (v49 < *((void *)this + 19));
        if (v101) {
          (*(void (**)(void, void, uint64_t, CA::Mat2Impl **, __n128))(**((void **)&v98 + 1) + 296))(*((void *)&v98 + 1), 0, v101, v99, v52);
        }
      }
    }
    if ((v81 & 1) == 0)
    {
      v4[102] = 0;
      ++v4[32].i32[0];
    }
  }
  else
  {
    CA::CG::DrawOp::shape_line_width((uint64_t)this, (const double *)a2, *((double *)this + 14));
    if (v14 < 0.0)
    {
      CA::CG::DrawLines::draw_shape_as_paths(this, a2);
      return;
    }
    if (v14 >= 0.001)
    {
      int v11 = v5 & 1;
      if (v5) {
        double v16 = v14;
      }
      else {
        double v16 = 1.0;
      }
      if (v14 < 1.0) {
        double v13 = v16;
      }
      else {
        double v13 = v14;
      }
LABEL_27:
      if (v11) {
        int v17 = 255;
      }
      else {
        int v17 = 0;
      }
      int8x16_t v88 = 0u;
      int8x16_t v89 = 0u;
      if (*((void *)this + 16))
      {
        float32x4_t v102 = 0uLL;
        CA::Shape::get_bounds(*(void *)(*(void *)&v4[31] + 8), (int *)&v102);
        size_t v21 = (int32x2_t *)v4[33];
        if (v21) {
          BOOL v22 = v21 + 4;
        }
        else {
          BOOL v22 = v4 + 25;
        }
        int32x2_t v23 = *(int32x2_t *)&v102.u32[2];
        v20.i32[1] = 1;
        uint32x2_t v24 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v102.u32[2]);
        *(uint32x2_t *)v19.i8 = vpmax_u32(v24, v24);
        if ((v19.i32[0] & 0x80000000) == 0)
        {
          *(int32x2_t *)v19.i8 = v22[1];
          uint32x2_t v25 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v19.i8);
          *(uint32x2_t *)v20.i8 = vpmax_u32(v25, v25);
          if (v20.i32[0] < 0
            || (int32x2_t v26 = vadd_s32(*v22, *(int32x2_t *)v19.i8),
                *(int32x2_t *)v19.i8 = vmax_s32(*(int32x2_t *)v102.f32, *v22),
                int32x2_t v23 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v102.f32, *(int32x2_t *)&v102.u32[2]), v26), *(int32x2_t *)v19.i8), v27 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v23), *(uint32x2_t *)v20.i8 = vpmax_u32(v27, v27), v20.i32[0] < 0))
          {
            int32x2_t v23 = 0;
          }
          else
          {
            v19.u64[1] = (unint64_t)v23;
            float32x4_t v102 = (float32x4_t)v19;
          }
        }
        int v53 = v23.i32[0];
        if (v23.i32[0] <= v23.i32[1]) {
          int v53 = v23.i32[1];
        }
        v19.i32[0] = v53;
        v20.i32[0] = 1073741822;
        v54.i64[0] = v102.i32[0];
        v54.i64[1] = v102.i32[1];
        int8x16_t v55 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v19, v20), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v54));
        v54.i64[0] = v23.i32[0];
        v54.i64[1] = v23.i32[1];
        int8x16_t v56 = (int8x16_t)vcvtq_f64_s64(v54);
        int32x2_t v57 = vdup_n_s32(v53 > 1073741822);
        v54.i64[0] = v57.u32[0];
        v54.i64[1] = v57.u32[1];
        int8x16_t v88 = v55;
        int8x16_t v89 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v54, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v56);
        *(_OWORD *)double v99 = 0u;
        long long v100 = 0u;
        long long v98 = 0u;
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v98, v7, v18);
        CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&v98, (double *)v88.i64, v58);
        CA::BoundsImpl::inset((double *)v88.i64, v13 * -0.5, v13 * -0.5);
      }
      *(void *)&long long v100 = 0;
      int v59 = *((_DWORD *)this + 36);
      *(void *)&long long v98 = &unk_1ED027F10;
      *((void *)&v98 + 1) = v4;
      v99[0] = (CA::Mat2Impl *)v7;
      v99[1] = *(CA::Mat2Impl **)&v13;
      LODWORD(v10CASetDebugMessage("", 0) = v17;
      BYTE4(v10CASetDebugMessage("", 0) = v59;
      BYTE5(v10CASetDebugMessage("", 0) = v8 == v9;
      if (v59 != 1 && (*(unsigned int (**)(int32x2_t *, uint64_t))(*(void *)v4 + 184))(v4, 9))
      {
        int v61 = *(unsigned __int8 *)(*(void *)&v4[2] + 480);
        if (v61 != 12 && (v61 - 1) <= 0x18)
        {
          double v63 = *(double *)v99[0] * *(double *)v99[0] + *((double *)v99[0] + 1) * *((double *)v99[0] + 1);
          double v64 = *((double *)v99[0] + 2) * *((double *)v99[0] + 2) + *((double *)v99[0] + 3) * *((double *)v99[0] + 3);
          double v65 = 1.0;
          BOOL v66 = v63 != 1.0;
          if (v64 != 1.0) {
            BOOL v66 = 1;
          }
          double v67 = sqrt(v63);
          double v68 = sqrt(v64);
          if (v66)
          {
            double v64 = v68;
            double v63 = v67;
          }
          double v69 = (v68 + v67) * 0.5;
          if (v66) {
            double v65 = v69;
          }
          if ((*(void *)&v65 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            if (v63 == v64)
            {
              BYTE6(v10CASetDebugMessage("", 0) = 1;
              goto LABEL_94;
            }
            if (v63 < 0.0 != v64 >= 0.0)
            {
              unint64_t v77 = *(void *)&v63 - *(void *)&v64;
              if ((uint64_t)(*(void *)&v63 - *(void *)&v64) < 0) {
                unint64_t v77 = *(void *)&v64 - *(void *)&v63;
              }
              BYTE6(v10CASetDebugMessage("", 0) = v77 < 4;
              if (v77 > 3) {
                goto LABEL_107;
              }
LABEL_94:
              uint64_t v70 = *((void *)&v98 + 1);
              unint64_t v71 = *(void *)(*(void *)(*((void *)&v98 + 1) + 16) + 8);
              int v72 = (*(unsigned __int16 *)(*((void *)&v98 + 1) + 832) >> 12) & 7;
              unint64_t v73 = HIWORD(v71);
              if (v72 != 2)
              {
                if (v72 != 1)
                {
LABEL_98:
                  float32x4_t v102 = vcvtq_f32_f16((float16x4_t)v71);
                  int64x2_t v74 = v99[1];
                  float v75 = *(double *)&v74 * 0.5 * CA::Mat2Impl::mat2_get_scale(v99[0], 0, 0, v60) + 0.5;
                  float v76 = 0.5;
                  if (BYTE4(v100) == 2) {
                    float v76 = v75;
                  }
                  unint64_t v103 = __PAIR64__(LODWORD(v76), LODWORD(v75));
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t, float32x4_t *))(*(void *)v70 + 1000))(v70, 0, 2, 3, &v102);
                  goto LABEL_107;
                }
                unint64_t v71 = v71 & 0xFFFFFFFFFFFF0000 | v73;
              }
              unint64_t v71 = v71 & 0xFFFF00000000FFFFLL | (v73 << 16) | (v73 << 32);
              goto LABEL_98;
            }
          }
        }
      }
      BYTE6(v10CASetDebugMessage("", 0) = 0;
LABEL_107:
      if (*((void *)this + 19) >= 2uLL)
      {
        unsigned int v78 = (double *)((char *)this + 160);
        unint64_t v79 = 1;
        do
        {
          uint64_t v80 = *((void *)this + 16);
          if (v80) {
          else
          }
          v78 += 4;
          v79 += 2;
        }
        while (v79 < *((void *)this + 19));
      }
    }
  }
}

void CA::CG::DrawLines::draw_shape_as_paths(CA::CG::DrawLines *this, CA::CG::Renderer *a2)
{
  Mutable = CGPathCreateMutable();
  if (*((void *)this + 19) >= 2uLL)
  {
    int v5 = (CGFloat *)((char *)this + 184);
    unint64_t v6 = 1;
    do
    {
      CGPathMoveToPoint(Mutable, 0, *(v5 - 3), *(v5 - 2));
      CGPathAddLineToPoint(Mutable, 0, *(v5 - 1), *v5);
      v5 += 4;
      v6 += 2;
    }
    while (v6 < *((void *)this + 19));
  }
  CA::CG::stroke_path((uint64_t)a2, (uint64_t)Mutable, 0, (uint64_t)this + 8, (uint64_t)this + 112);

  CGPathRelease(Mutable);
}

float CA::CG::anonymous namespace'::HairLineRenderer::operator()(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10 = *(void *)(a1 + 3088);
  if ((unint64_t)(v10 - 191) <= 0xFFFFFFFFFFFFFF3ELL)
  {
    (*(void (**)(void, void))(**(void **)(a1 + 8) + 296))(*(void *)(a1 + 8), 0);
    uint64_t v10 = 0;
    *(void *)(a1 + 3088) = 0;
  }
  float v11 = a2;
  uint64_t v12 = a1 + 16 * v10;
  float v13 = a3;
  *(float *)(v12 + 16) = v11;
  *(float *)(v12 + 2CASetDebugMessage("", 0) = v13;
  float result = a4;
  float v15 = a5;
  *(float *)(v12 + 32) = result;
  *(float *)(v12 + 36) = v15;
  *(void *)(v12 + 24) = *(void *)(*(void *)(*(void *)(a1 + 8) + 16) + 8);
  *(void *)(v12 + 4CASetDebugMessage("", 0) = *(void *)(*(void *)(*(void *)(a1 + 8) + 16) + 8);
  *(void *)(a1 + 3088) = v10 + 2;
  return result;
}

uint64_t CA::CG::anonymous namespace'::dash_line(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5)
{
  double v5 = a5[1];
  double v6 = a5[3] + v5;
  double v7 = a4[1];
  double v8 = a4[2];
  double v9 = a4[3];
  if (*a4 > v8) {
    double v10 = -*a5;
  }
  else {
    double v10 = a5[2] + *a5;
  }
  if (*a4 > v8) {
    double v11 = -(a5[2] + *a5);
  }
  else {
    double v11 = *a5;
  }
  if (*a4 > v8) {
    double v12 = -v8;
  }
  else {
    double v12 = a4[2];
  }
  if (*a4 > v8) {
    double v13 = -*a4;
  }
  else {
    double v13 = *a4;
  }
  double v14 = -v6;
  if (v7 <= v9)
  {
    double v15 = a5[1];
  }
  else
  {
    double v6 = -v5;
    double v15 = v14;
  }
  if (v7 > v9) {
    double v16 = -v9;
  }
  else {
    double v16 = a4[3];
  }
  if (v7 > v9) {
    double v17 = -v7;
  }
  else {
    double v17 = a4[1];
  }
  if (v12 >= v11
    && v13 <= v10
    && v16 >= v15
    && v17 <= v6
    && (v12 - v13) * (v12 - v13) + (v16 - v17) * (v16 - v17) > 0.0)
  {
    return CGDashGetPattern();
  }
  return result;
}

void *CA::CG::anonymous namespace'::WideLineRenderer::operator()(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int8 *)(a1 + 37);
  int v7 = *(unsigned __int8 *)(a1 + 38);
  if (!*(unsigned char *)(a1 + 37))
  {
    if (!*(unsigned char *)(a1 + 38)) {
      goto LABEL_10;
    }
    int v7 = 1;
  }
  double v8 = *(double **)(a1 + 16);
  double v9 = v8[1];
  double v10 = v8[4];
  double v11 = v8[5];
  double v12 = v8[2];
  double v13 = v8[3];
  double v14 = v10 + *v8 * a2 + v12 * a3;
  a3 = v11 + v9 * a2 + v13 * a3;
  double v15 = v10 + *v8 * a4 + v12 * a5;
  a5 = v11 + v9 * a4 + v13 * a5;
  if (v7)
  {
    *(float *)&float64_t v16 = v14;
    float v17 = a3;
    *((float *)&v16 + 1) = v17;
    *(float *)&float64_t v18 = v15;
    float v19 = a5;
    *((float *)&v18 + 1) = v19;
    v62.f64[0] = v16;
    v62.f64[1] = v18;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 16) + 16) = 81;
    uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 8) + 248) + 8);
    *(void *)&long long v56 = *(void *)(a1 + 8);
    *((void *)&v56 + 1) = v20;
    memset(v57, 0, 40);
    LOWORD(v57[1]) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v56);
    double v52 = 0.0;
    double v53 = 0.0;
    while (1)
    {
      int rect = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v56, (int32x2_t *)&v52);
      uint64_t result = *(void **)(a1 + 8);
      if (!rect) {
        break;
      }
      (*(void (**)(void *, uint64_t, float64x2_t *))(*result + 312))(result, 2, &v62);
    }
    *(unsigned char *)(result[2] + 16) = 0;
    return result;
  }
  a4 = v15;
  a2 = v14;
LABEL_10:
  double v23 = a4 - a2;
  double v24 = a5 - a3;
  double v25 = sqrt(v23 * v23 + v24 * v24);
  double v26 = v24 / v25;
  if (v25 <= 0.0) {
    double v27 = 0.0;
  }
  else {
    double v27 = v26;
  }
  double v28 = v23 / v25;
  if (v25 <= 0.0) {
    double v29 = 1.0;
  }
  else {
    double v29 = v28;
  }
  v62.f64[0] = v29;
  v62.f64[1] = v27;
  v63.f64[0] = -v27;
  v63.f64[1] = v29;
  v64.f64[0] = a2;
  v64.f64[1] = a3;
  if (v6)
  {
    double v47 = -v27;
    double v46 = v29;
  }
  else
  {
    double v30 = *(float64x2_t **)(a1 + 16);
    float64x2_t v31 = *v30;
    float64x2_t v32 = v30[1];
    float64x2_t v33 = v30[2];
    float64x2_t v34 = vmlaq_n_f64(vmulq_n_f64(*v30, v29), v32, v27);
    float64x2_t v35 = vmulq_n_f64(*v30, v27);
    float64x2_t v62 = v34;
    float64x2_t v63 = vmlaq_n_f64(vnegq_f64(v35), v32, v29);
    float64x2_t v64 = vmlaq_n_f64(vmlaq_n_f64(v33, v31, a2), v32, a3);
    a3 = v64.f64[1];
    double v46 = v34.f64[0];
    double v47 = v63.f64[0];
    double v27 = v34.f64[1];
    double v29 = v63.f64[1];
    a2 = v64.f64[0];
  }
  double v48 = v27;
  double v49 = v29;
  double v50 = a2;
  double v51 = a3;
  double v36 = *(double *)(a1 + 24);
  double v52 = 0.0;
  double v53 = -(v36 * 0.5);
  double v54 = v25;
  double v55 = v36;
  if (*(unsigned char *)(a1 + 36) == 1) {
    double v37 = v36 * 0.5;
  }
  else {
    double v37 = 0.0;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    double v52 = -(v36 * 0.5);
    double v54 = v36 + v25;
  }
  uint64_t v38 = CA::CG::mat2_filter_bits((uint64_t)&v62);
  unsigned int v44 = CA::CG::rect_filter_bits((uint64_t)&v52, v62.f64, v38, v39, v40, v41, v42, v43);
  uint64_t v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  memset(v57, 0, sizeof(v57));
  unsigned int v45 = *(_DWORD *)(a1 + 32);
  CA::Transform::set_affine((CA::Transform *)&v56, v46, v48, v47, v49, v50, v51);
  *((void *)&v58 + 1) = &v52;
  *(void *)&long long v59 = &v56;
  *((void *)&v59 + 1) = __PAIR64__(v45, v44);
  uint64_t v61 = 0;
  long long v60 = 0uLL;
  return (void *)CA::OGL::fill_round_rect(*(void *)(a1 + 8), (float64x2_t **)&v58 + 1, (double *)0xF, 0, v37, v37);
}

uint64_t CA::CG::DrawLines::shape_type(CA::CG::DrawLines *this, CA::CG::Renderer *a2)
{
  return 0;
}

uint64_t CA::CG::DrawLines::debug_color(CA::CG::DrawLines *this)
{
  return 566542048;
}

BOOL CA::CG::DrawLines::can_coalesce(CA::CG::DrawLines *this, const CA::CG::DrawLines *a2)
{
  if (*((double *)this + 1) != *((double *)a2 + 1)) {
    return 0;
  }
  if (*((double *)this + 2) != *((double *)a2 + 2)) {
    return 0;
  }
  if (*((double *)this + 3) != *((double *)a2 + 3)) {
    return 0;
  }
  if (*((double *)this + 4) != *((double *)a2 + 4)) {
    return 0;
  }
  if (*((double *)this + 5) != *((double *)a2 + 5)) {
    return 0;
  }
  if (*((double *)this + 6) != *((double *)a2 + 6)) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 14);
  if (v4 != *((_DWORD *)a2 + 14)
    || *((void *)this + 8) != *((void *)a2 + 8)
    || *((void *)this + 9) != *((void *)a2 + 9)
    || *((void *)this + 11) != *((void *)a2 + 11))
  {
    return 0;
  }
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *((void *)a2 + 10);
  if (v5 && v6)
  {
    if (!CA::CG::DeviceColor::Pattern::operator==(v5, v6)) {
      return 0;
    }
  }
  else if (v5 | v6)
  {
    return 0;
  }
  if (*((_DWORD *)this + 25) != *((_DWORD *)a2 + 25)
    || *((double *)this + 14) != *((double *)a2 + 14)
    || *((double *)this + 15) != *((double *)a2 + 15)
    || *((void *)this + 16) != *((void *)a2 + 16)
    || *((double *)this + 17) != *((double *)a2 + 17)
    || *((_DWORD *)this + 36) != *((_DWORD *)a2 + 36))
  {
    return 0;
  }
  return *((_DWORD *)this + 37) == *((_DWORD *)a2 + 37) && v4 != 0;
}

double *CA::CG::DrawLines::compute_dod(CA::CG::DrawLines *this, float64x2_t *a2)
{
  int8x16_t v4 = *((int8x16_t *)this + 10);
  unint64_t v5 = *((void *)this + 19);
  if (v5 < 2)
  {
    int8x16_t v8 = *((int8x16_t *)this + 10);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    int v7 = (int8x16_t *)((char *)this + 176);
    int8x16_t v8 = *((int8x16_t *)this + 10);
    do
    {
      int8x16_t v9 = *v7++;
      int8x16_t v8 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v9, (float64x2_t)v8), v8, v9);
      int8x16_t v4 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v4, (float64x2_t)v9), v4, v9);
      --v6;
    }
    while (v6);
  }
  *a2 = (float64x2_t)v8;
  a2[1] = vsubq_f64((float64x2_t)v4, (float64x2_t)v8);
  if ((*((unsigned char *)this + 100) & 4) == 0) {
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  }
  double v10 = -CA::CG::stroke_radius((uint64_t)this + 112, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  double v12 = -v11;

  return CA::BoundsImpl::inset_point(a2->f64, v10, v12);
}

void CA::CG::DrawLines::~DrawLines(CA::CG::DrawLines *this)
{
  *(void *)this = &unk_1ED02A1C0;
  if (*((void *)this + 16)) {
    CGDashRelease();
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED02A1C0;
  if (*((void *)this + 16)) {
    CGDashRelease();
  }

  CA::CG::DrawOp::~DrawOp(this);
}

void sub_18497E030(_Unwind_Exception *exception_object)
{
}

void *server_error(void *result, uint64_t a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    unsigned int v2 = result;
    uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"Server error %u", a2);
    uint64_t v4 = *MEMORY[0x1E4F28568];
    v5[0] = v3;
    uint64_t result = objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"CoreAnimationErrorDomain", 4, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1));
    *unsigned int v2 = result;
  }
  return result;
}

void sub_18497E638(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void X::small_vector_base<ContentStreamClientFrame>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(long long **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(long long **)(a1 + 16);
  unint64_t v6 = (*(void *)(a1 + 24) + 1) | ((unint64_t)(*(void *)(a1 + 24) + 1) >> 1);
  unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  unint64_t v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = a2;
  }
  double v11 = malloc_type_malloc(16 * v10, 0x1020040EDED9539uLL);
  double v12 = v11;
  double v13 = *(long long **)a1;
  double v14 = *(long long **)(a1 + 8);
  if (*(long long **)a1 != v14)
  {
    double v15 = v11;
    do
    {
      long long v16 = *v13++;
      *v15++ = v16;
    }
    while (v13 != v14);
  }
  if (v3 != v5) {
    free(*(void **)a1);
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = (char *)v12 + v4 - (void)v3;
  *(void *)(a1 + 24) = v10;
}

void sub_18497EACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  if (a10 != a12) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

void *stream_active_error(void *result)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    int v1 = result;
    uint64_t v2 = *MEMORY[0x1E4F28568];
    v3[0] = @"Stream is currently active";
    uint64_t result = objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"CoreAnimationErrorDomain", 1, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1));
    void *v1 = result;
  }
  return result;
}

BOOL validate_options(CAContentStreamOptions *a1, NSError **a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = [(CAContentStreamOptions *)a1 pixelFormat];
  [(CAContentStreamOptions *)a1 frameSize];
  BOOL v7 = v5 > 0.0 && v4 != 0;
  [(CAContentStreamOptions *)a1 frameSize];
  if (v8 <= 0.0) {
    BOOL v7 = 0;
  }
  if (![(CAContentStreamOptions *)a1 queueDepth]) {
    BOOL v7 = 0;
  }
  [(CAContentStreamOptions *)a1 minimumFrameTime];
  BOOL v10 = v9 >= 0.0 && v7;
  if (a2 && !v10)
  {
    uint64_t v12 = *MEMORY[0x1E4F28568];
    v13[0] = @"Invalid option";
    *a2 = (NSError *)objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"CoreAnimationErrorDomain", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1));
  }
  return v10;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int,unsigned int>(uint64_t a1, unsigned int a2, int a3, int a4)
{
  unint64_t v7 = a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = a2;
      if (v8 <= a2) {
        unint64_t v10 = a2 % v8;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & a2;
    }
    double v11 = *(uint64_t ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  double v14 = operator new(0x18uLL);
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = a3;
  *((_DWORD *)v14 + 5) = a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v10 = v7 % v8;
      }
      else {
        unint64_t v10 = v7;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v10);
  if (v22)
  {
    *double v14 = *v22;
LABEL_38:
    *BOOL v22 = v14;
    goto LABEL_39;
  }
  uint64_t v23 = *(void *)(a1 + 16);
  *double v14 = v23;
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v1CASetDebugMessage("", 0) = a1 + 16;
  if (v23)
  {
    unint64_t v24 = *(void *)(v23 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_18497F7B4(_Unwind_Exception *a1)
{
}

void remove_observer(CARenderer *a1)
{
  uint64_t v2 = [*(id *)a1->_priv renderContext];
  if (v2)
  {
    CA::Render::remove_observer(0, v2, (uint64_t)context_changed, (uint64_t)a1);
  }
}

void context_changed(CA::Render::Object *a1, void *a2, void *a3)
{
  unsigned int v4 = (void *)MEMORY[0x185324A30](a1, a2, a3);
  id v5 = *(id *)(a2[1] + 8);
  if (objc_opt_respondsToSelector()) {
    [v5 rendererDidChange:a2];
  }
}

void add_observer(CARenderer *a1)
{
  priv = (id *)a1->_priv;
  if (priv[1])
  {
    unint64_t v3 = [*priv renderContext];
    if (v3)
    {
      CA::Render::add_observer(0, v3, (uint64_t)context_changed, (uint64_t)a1, 0);
    }
  }
}

void _CASFlipBookModify(mach_port_t a1, int a2, int a3, int a4)
{
  mach_msg_return_t v6;
  mach_msg_header_t msg;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *MEMORY[0x1E4F14068];
  uint8x8_t v9 = a2;
  unint64_t v10 = a3;
  double v11 = a4;
  mach_port_t reply_port = mig_get_reply_port();
  *(void *)&msg.msgh_bits = 5395;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  *(void *)&msg.msgh_voucher_port = 0x9D3800000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  unint64_t v6 = mach_msg(&msg, 3, 0x2Cu, 0x2Cu, reply_port, 0, 0);
  if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else if (v6)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  else if (msg.msgh_id != 40348 {
         || (msg.msgh_bits & 0x80000000) != 0
  }
         || msg.msgh_size != 36
         || msg.msgh_remote_port
         || v9)
  {
    mach_msg_destroy(&msg);
  }
}

uint64_t _CASContentStreamModify(int a1, int a2, int a3, long long *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(&msg_4[16], 0, 28);
  *(_OWORD *)msg_4 = 0u;
  long long v5 = *a4;
  long long v16 = a4[1];
  long long v6 = a4[3];
  long long v17 = a4[2];
  long long v18 = v6;
  *(_DWORD *)&msg_4[20] = 2;
  *(_DWORD *)&msg_4[24] = a2;
  *(_DWORD *)&msg_4[32] = 1245184;
  *(_DWORD *)&msg_4[36] = a3;
  int v13 = 1245184;
  uint64_t v14 = *MEMORY[0x1E4F14068];
  int v19 = *((_DWORD *)a4 + 16);
  long long v15 = v5;
  mach_port_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg_4[4] = a1;
  *(_DWORD *)&msg_4[8] = reply_port;
  int msg = -2147478253;
  *(void *)&msg_4[12] = 0x9D3900000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    mach_port_t reply_port = *(_DWORD *)&msg_4[8];
  }
  uint64_t v8 = mach_msg((mach_msg_header_t *)&msg, 3, 0x80u, 0x2Cu, reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
    return v9;
  }
  if (v8)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
    return v9;
  }
  if (*(_DWORD *)&msg_4[16] == 71)
  {
    uint64_t v9 = 4294966988;
LABEL_17:
    mach_msg_destroy((mach_msg_header_t *)&msg);
    return v9;
  }
  if (*(_DWORD *)&msg_4[16] != 40349)
  {
    uint64_t v9 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v9 = 4294966996;
  if (msg < 0) {
    goto LABEL_17;
  }
  if (*(_DWORD *)msg_4 != 36) {
    goto LABEL_17;
  }
  if (*(_DWORD *)&msg_4[4]) {
    goto LABEL_17;
  }
  uint64_t v9 = *(unsigned int *)&msg_4[28];
  if (*(_DWORD *)&msg_4[28]) {
    goto LABEL_17;
  }
  return v9;
}

uint64_t _CASContentStreamStartStop(int a1, int a2, char a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[24] = 2;
  *(_DWORD *)&msg[28] = a2;
  int v13 = 1245184;
  uint64_t v14 = a4;
  int v15 = 16777472;
  int v16 = 4 * a5;
  uint64_t v17 = *MEMORY[0x1E4F14068];
  char v18 = a3;
  __int16 v19 = 0;
  char v20 = 0;
  int v21 = a5;
  int v22 = a6;
  int v23 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)int msg = -2147478253;
  *(void *)&msg[16] = 0x9D3A00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v9 = mach_msg((mach_msg_header_t *)msg, 3, 0x50u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
    return v10;
  }
  if (v9)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    return v10;
  }
  if (*(_DWORD *)&msg[20] == 71)
  {
    uint64_t v10 = 4294966988;
LABEL_17:
    mach_msg_destroy((mach_msg_header_t *)msg);
    return v10;
  }
  if (*(_DWORD *)&msg[20] != 40350)
  {
    uint64_t v10 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v10 = 4294966996;
  if ((*(_DWORD *)msg & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (*(_DWORD *)&msg[4] != 36) {
    goto LABEL_17;
  }
  if (*(_DWORD *)&msg[8]) {
    goto LABEL_17;
  }
  uint64_t v10 = *(unsigned int *)&msg[32];
  if (*(_DWORD *)&msg[32]) {
    goto LABEL_17;
  }
  return v10;
}

void _CASDebugBrightness(int a1, double a2)
{
  mach_msg_return_t v4;
  _DWORD msg[13];

  *(void *)&msg[11] = *MEMORY[0x1E4F143B8];
  memset(&msg[1], 0, 40);
  *(void *)&msg[6] = *MEMORY[0x1E4F14068];
  *(double *)&msg[8] = a2;
  mach_port_t reply_port = mig_get_reply_port();
  msg[2] = a1;
  msg[3] = reply_port;
  msg[0] = 5395;
  *(void *)&msg[4] = 0x9D4B00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_t reply_port = msg[3];
  }
  unsigned int v4 = mach_msg((mach_msg_header_t *)msg, 3, 0x28u, 0x2Cu, reply_port, 0, 0);
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg[3]);
  }
  else if (v4)
  {
    mig_dealloc_reply_port(msg[3]);
  }
  else if (msg[5] != 40367 || (msg[0] & 0x80000000) != 0 || msg[1] != 36 || msg[2] || msg[8])
  {
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

void _CASDebugPreset(int a1, int a2)
{
  mach_msg_return_t v4;
  unsigned char msg[36];
  uint64_t v6;
  uint64_t v7;

  unint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(&msg[4], 0, 32);
  long long v6 = 0;
  *(void *)&msg[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg[32] = a2;
  mach_port_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)int msg = 5395;
  *(void *)&msg[16] = 0x9D4C00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_t reply_port = *(_DWORD *)&msg[12];
  }
  unsigned int v4 = mach_msg((mach_msg_header_t *)msg, 3, 0x24u, 0x2Cu, reply_port, 0, 0);
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (v4)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (*(_DWORD *)&msg[20] != 40368 {
         || (*(_DWORD *)msg & 0x80000000) != 0
  }
         || *(_DWORD *)&msg[4] != 36
         || *(_DWORD *)&msg[8]
         || *(_DWORD *)&msg[32])
  {
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

void _CASDebugFrameInfo(int a1)
{
  mach_msg_return_t v3;
  unsigned char msg[36];
  uint64_t v5;
  uint64_t v6;

  long long v6 = *MEMORY[0x1E4F143B8];
  long long v5 = 0;
  *(_DWORD *)&msg[4] = 0;
  *(_OWORD *)&msg[20] = 0u;
  mach_port_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)int msg = 5395;
  *(void *)&msg[16] = 0x9D4D00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_t reply_port = *(_DWORD *)&msg[12];
  }
  unint64_t v3 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x2Cu, reply_port, 0, 0);
  if ((v3 - 268435458) <= 0xE && ((1 << (v3 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (v3)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  else if (*(_DWORD *)&msg[20] != 40369 {
         || (*(_DWORD *)msg & 0x80000000) != 0
  }
         || *(_DWORD *)&msg[4] != 36
         || *(_DWORD *)&msg[8]
         || *(_DWORD *)&msg[32])
  {
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

void _XGetArchivedLocalLayerTree(uint64_t a1, uint64_t a2)
{
  mach_msg_return_t v12;
  mach_msg_header_t msg;
  long long v14;
  int Length;
  uint64_t v16;

  int v16 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 56)
  {
    int v11 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v11;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  if (*(unsigned __int16 *)(a1 + 38) << 16 != 1179648)
  {
    int v11 = -300;
    goto LABEL_10;
  }
  mach_port_t v3 = *(_DWORD *)(a1 + 28);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 52);
    long long v5 = CA::Context::retain_context_with_client_id((CA::Context *)*(unsigned int *)(a1 + 48));
    if (v5)
    {
      long long v6 = (CA::Context *)v5;
      unint64_t v7 = (objc_class *)CA::Context::retain_layer((CA::Context *)v5);
      if (v7)
      {
        uint64_t v8 = v7;
        char v9 = CAEncodeIOSurfacesAsCGImages;
        CAEncodeIOSurfacesAsCGImages = v4 & 1;
        CFDataRef v10 = (const __CFData *)CAEncodeLayerTreeWithInfo(v7, 0);
        CAEncodeIOSurfacesAsCGImages = v9;
        CFRelease(v8);
      }
      else
      {
        CFDataRef v10 = 0;
      }
      CA::Context::unref(v6, 0);
    }
    else
    {
      CFDataRef v10 = 0;
    }
    uint64_t v14 = 0uLL;
    size_t Length = 0;
    *(void *)&msg.msgh_bits = 0x2C00000012;
    msg.msgh_remote_port = v3;
    msg.msgh_local_port = 0;
    msg.msgh_voucher_port = 0;
    msg.msgh_id = 1195461716;
    if (v10)
    {
      msg.msgh_bits = -2147483630;
      LODWORD(v14) = 1;
      *(void *)((char *)&v14 + 4) = CFDataGetBytePtr(v10);
      HIDWORD(v14) = 16777472;
      size_t Length = CFDataGetLength(v10);
    }
    uint64_t v12 = mach_msg(&msg, 1, 0x2Cu, 0, 0, 0, 0);
    if ((v12 - 268435459) <= 1) {
      mach_msg_destroy(&msg);
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(_DWORD *)(a2 + 32) = v12;
}

void _XGetDisplayDebugProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    *(_DWORD *)(a2 + 36) = 16777473;
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v18[0] = *(_OWORD *)(a1 + 56);
    v18[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, (const audit_token_t *)a2) & 0x80) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, v6) & 0x20000) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, v7) & 0x100) != 0)
    {
      uint64_t v16 = v4;
      CFDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CA::Render::post_notification(0x47u, 0, (uint64_t)&v16, 0);
      if (CFDictionaryGetCount(theDict))
      {
        vm_address_t address = 0;
        CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF98], theDict, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        if (Data)
        {
          CFDataRef v9 = Data;
          size_t Length = CFDataGetLength(Data);
          vm_allocate(*MEMORY[0x1E4F14960], &address, (Length + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00], 1);
          int v11 = (void *)address;
          if (address)
          {
            BytePtr = CFDataGetBytePtr(v9);
            memcpy(v11, BytePtr, Length);
          }
          CFRelease(v9);
        }
        else
        {
          LODWORD(Length) = 0;
        }
        CFRelease(theDict);
        vm_address_t v14 = address;
        *(void *)(a2 + 28) = address;
        if (v14) {
          int v13 = Length;
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(a2 + 52) = v13;
        if (!v14)
        {
          int v3 = 5;
          goto LABEL_7;
        }
      }
      else
      {
        CFRelease(theDict);
        int v13 = *(_DWORD *)(a2 + 52);
      }
      *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = v13;
      *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
      *(_DWORD *)a2 |= 0x80000000;
      *(_DWORD *)(a2 + 4) = 56;
      *(_DWORD *)(a2 + 24) = 1;
      return;
    }
    int v3 = -81182719;
  }
LABEL_7:
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XDebugDisplayStateOldInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    char v5 = *(unsigned char *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 72);
    v11[0] = *(_OWORD *)(a1 + 56);
    v11[1] = v6;
    char v10 = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, (const audit_token_t *)a2) & 0x80) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v7) & 0x20000) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v8) & 0x100) != 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v9) & 0x10000) != 0)
    {
      CA::Render::post_notification(0x46u, 0, (uint64_t)&v10, 0);
      int v3 = 0;
    }
    else
    {
      int v3 = -81182719;
    }
  }
  unsigned int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

void _XCopyDisplayPowerAssertionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    *(_DWORD *)(a2 + 36) = 16777473;
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v18[0] = *(_OWORD *)(a1 + 56);
    v18[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, (const audit_token_t *)a2) & 0x80) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, v6) & 0x20000) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, v7) & 0x100) != 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, v8) & 0x10000) != 0)
    {
      __vImage_Buffer src = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      v14[1] = &__src;
      v14[0] = v4;
      CA::Render::post_notification(0x45u, 0, (uint64_t)v14, 0);
      CFDataRef v9 = v16;
      __dst = 0;
      size_t v10 = (unsigned char *)v16 - (unsigned char *)__src;
      if (v16 != __src)
      {
        vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)&__dst, (v10 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00], 1);
        CFDataRef v9 = __src;
        if (__dst)
        {
          memcpy(__dst, __src, v10);
          CFDataRef v9 = __src;
        }
      }
      if (v9) {
        free(v9);
      }
      int v11 = __dst;
      *(void *)(a2 + 28) = __dst;
      if (v11) {
        int v12 = v10;
      }
      else {
        int v12 = 0;
      }
      *(_DWORD *)(a2 + 52) = v12;
      if (v11)
      {
        *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = v12;
        *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
        *(_DWORD *)a2 |= 0x80000000;
        *(_DWORD *)(a2 + 4) = 56;
        *(_DWORD *)(a2 + 24) = 1;
        return;
      }
      int v3 = 5;
    }
    else
    {
      int v3 = -81182719;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

uint64_t _XDestroyDisplayPowerAssertion(uint64_t result, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 52)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 52) && *(_DWORD *)(result + 56) > 0x1Fu)
      {
        int v4 = *(_DWORD *)(result + 48);
        long long v5 = (const audit_token_t *)*(unsigned int *)(result + 28);
        long long v6 = *(_OWORD *)(result + 88);
        v7[0] = *(_OWORD *)(result + 72);
        v7[1] = v6;
        uint64_t result = CASDestroyDisplayPowerAssertion(v4, v5, (CA::Render::Server *)v7);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XCreateDisplayPowerAssertionSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, audit_token_t *a7)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 60)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      if (*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        int v11 = *(_DWORD *)(a1 + 48);
        size_t v10 = (const audit_token_t *)*(unsigned int *)(a1 + 52);
        mach_port_name_t v12 = *(_DWORD *)(a1 + 28);
        int v13 = *(_DWORD *)(a1 + 56);
        long long v14 = *(_OWORD *)(a1 + 96);
        v15[0] = *(_OWORD *)(a1 + 80);
        v15[1] = v14;
        uint64_t result = _CreateDisplayPowerAssertion(v11, v10, v12, v13, 1u, (CA::Render::Server *)v15, a7);
      }
    }
    else
    {
      uint64_t result = 4294966996;
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  CFDataRef v9 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v9;
  return result;
}

uint64_t _XCreateDisplayPowerAssertion(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, audit_token_t *a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 60) && *(_DWORD *)(result + 64) > 0x1Fu)
      {
        int v10 = *(_DWORD *)(result + 48);
        CFDataRef v9 = (const audit_token_t *)*(unsigned int *)(result + 52);
        mach_port_name_t v11 = *(_DWORD *)(result + 28);
        int v12 = *(_DWORD *)(result + 56);
        long long v13 = *(_OWORD *)(result + 96);
        v14[0] = *(_OWORD *)(result + 80);
        v14[1] = v13;
        uint64_t result = _CreateDisplayPowerAssertion(v10, v9, v11, v12, 0, (CA::Render::Server *)v14, a7);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      int v8 = -309;
    }
    else
    {
      int v8 = -300;
    }
  }
  else
  {
    int v8 = -304;
  }
  *(_DWORD *)(a2 + 32) = v8;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XSetDisplayState(uint64_t result, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 60)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 60) && *(_DWORD *)(result + 64) > 0x1Fu)
      {
        int v4 = *(_DWORD *)(result + 28);
        long long v5 = (const audit_token_t *)*(unsigned int *)(result + 48);
        unsigned __int8 v6 = *(unsigned char *)(result + 52);
        char v7 = *(unsigned char *)(result + 56);
        long long v8 = *(_OWORD *)(result + 96);
        v9[0] = *(_OWORD *)(result + 80);
        v9[1] = v8;
        uint64_t result = CASSetDisplayState(v4, v5, v6, v7, (CA::Render::Server *)v9);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XGetDisplayStateShmem(uint64_t result, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  *(void *)(a2 + 32) = 0x13000000000000;
  unsigned int v4 = *(_DWORD *)(result + 32);
  long long v5 = *(_OWORD *)(result + 72);
  v11[0] = *(_OWORD *)(result + 56);
  v11[1] = v5;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v6), (result & 0x20000) != 0)
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v7), (result & 0x10000) == 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  object_handle = 0;
  uint64_t v9 = v4;
  CA::Render::post_notification(0x41u, 0, (uint64_t)&v9, 0);
  uint64_t result = (uint64_t)object_handle;
  if (object_handle)
  {
    uint64_t result = CA::Render::Shmem::port(object_handle);
    long long v8 = object_handle;
    *(_DWORD *)(a2 + 28) = result;
    if (v8) {
      long long v8 = (mach_port_t *)*((void *)v8 + 2);
    }
  }
  else
  {
    long long v8 = 0;
    *(_DWORD *)(a2 + 28) = 0;
  }
  *(void *)(a2 + 4CASetDebugMessage("", 0) = *MEMORY[0x1E4F14068];
  *(void *)(a2 + 48) = v8;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

void _XRequestFramePhaseShift(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 48)
  {
    int v3 = -304;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 48) && *(_DWORD *)(a1 + 52) > 0x1Fu)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      long long v5 = 0uLL;
      *(void *)((char *)&v5 + 4) = *(void *)(a1 + 32);
      uint64_t v6 = v4;
      CA::Render::post_notification(0x39u, 0, (uint64_t)&v5, 0);
      *(unsigned char *)(a2 + 36) = v5;
      *(_DWORD *)(a2 + 32) = 0;
      *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
      *(_DWORD *)(a2 + 4) = 40;
      return;
    }
    int v3 = -309;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

uint64_t _XGetLayerRendererInfo(uint64_t result, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 44)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 44) || *(_DWORD *)(result + 48) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_8;
  }
  long long v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  uint64_t v6 = *(CA::Render::Object **)(result + 32);
  int v7 = *(_DWORD *)(result + 40);
  long long v8 = *(_OWORD *)(result + 80);
  v18[0] = *(_OWORD *)(result + 64);
  v18[1] = v8;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v18, v9), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_server_port(v5);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  uint64_t v10 = (atomic_uint *)result;
  mach_port_name_t v11 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(void *)uint64_t v17 = 0;
  unsigned int v16 = 0;
  int layer_renderer_info = CA::Render::Context::get_layer_renderer_info((CA::Render::Context *)v10, v6, v7, (int *)&v17[1], v17, &v16);
  char v13 = layer_renderer_info;
  if (layer_renderer_info)
  {
    int v14 = 0;
    unsigned int v15 = v17[0];
    *(_DWORD *)(a2 + 36) = v17[1];
    *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = v15;
    *(_DWORD *)(a2 + 44) = v16;
  }
  else
  {
    int v14 = 5;
  }
  uint64_t result = pthread_mutex_unlock(v11);
  if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
  }
  *(_DWORD *)(a2 + 32) = v14;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (v13)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 48;
    return result;
  }
LABEL_8:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XImageProviderGetNeededSubImage(uint64_t result, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_8;
  }
  long long v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  uint64_t v6 = *(void *)(result + 32);
  long long v7 = *(_OWORD *)(result + 76);
  v13[0] = *(_OWORD *)(result + 60);
  v13[1] = v7;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v13, v8), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_server_port(v5);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  uint64_t v9 = result;
  uint64_t v10 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  int v11 = CA::Render::ImageProvider::needed_subimage(*(CA::Render::ImageProvider **)(v9 + 136), (CA::Render::Context *)*(unsigned int *)(v9 + 148), v6, (unsigned int *)(a2 + 36), (unsigned int *)(a2 + 40), (unsigned int *)(a2 + 44), (unsigned int *)(a2 + 48));
  uint64_t result = pthread_mutex_unlock(v10);
  if (v11) {
    int v12 = 0;
  }
  else {
    int v12 = 48;
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  *(_DWORD *)(a2 + 32) = v12;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (v11)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 52;
    return result;
  }
LABEL_8:
  *(void *)(a2 + 24) = v4;
  return result;
}

void _XGetServerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    *(_DWORD *)(a2 + 36) = 16777473;
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 36);
    long long v6 = *(_OWORD *)(a1 + 80);
    v19[0] = *(_OWORD *)(a1 + 64);
    v19[1] = v6;
    *(void *)(a2 + 28) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, (const audit_token_t *)a2) & 0x10) == 0) {
      goto LABEL_10;
    }
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v7) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v8) & 0x20000) != 0)
    {
      int v3 = -81182719;
      goto LABEL_7;
    }
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v9) & 0x100) != 0)
    {
      __vImage_Buffer src = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      v15[1] = v5;
      v15[0] = v4;
      _OWORD v15[2] = &__src;
      CA::Render::post_notification(0x30u, 0, (uint64_t)v15, 0);
      uint64_t v10 = v17;
      vm_address_t address = 0;
      size_t v11 = (unsigned char *)v17 - (unsigned char *)__src;
      if (v17 != __src)
      {
        vm_allocate(*MEMORY[0x1E4F14960], &address, (v11 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00], 1);
        uint64_t v10 = __src;
        if (address)
        {
          memcpy((void *)address, __src, v11);
          uint64_t v10 = __src;
        }
      }
      if (v10) {
        free(v10);
      }
      vm_address_t v12 = address;
      *(void *)(a2 + 28) = address;
      if (v12) {
        int v13 = v11;
      }
      else {
        int v13 = 0;
      }
      *(_DWORD *)(a2 + 52) = v13;
      if (v12)
      {
        *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = v13;
        *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
        *(_DWORD *)a2 |= 0x80000000;
        *(_DWORD *)(a2 + 4) = 56;
        *(_DWORD *)(a2 + 24) = 1;
        return;
      }
      int v3 = 5;
    }
    else
    {
LABEL_10:
      int v3 = 53;
    }
  }
LABEL_7:
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XSetAXMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 72)
  {
    int v4 = -304;
  }
  else if (*(_DWORD *)(a1 + 72) || *(_DWORD *)(a1 + 76) < 0x20u)
  {
    int v4 = -309;
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 108);
    v10[0] = *(_OWORD *)(a1 + 92);
    v10[1] = v6;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v7) & 0x20000) != 0)
    {
      int v4 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x100) != 0)
    {
      long long v9 = *(_OWORD *)(a1 + 48);
      v11[0] = *(_OWORD *)(a1 + 32);
      v11[1] = v9;
      uint64_t v12 = *(void *)(a1 + 64);
      CA::Render::post_notification(0x27u, 0, (uint64_t)v11, 0);
      int v4 = 0;
    }
    else
    {
      int v4 = 53;
    }
  }
  uint64_t v5 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 24) = *v5;
}

uint64_t _XSetLUTFile(const char *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = *((unsigned int *)a1 + 1);
    if (v6 >= 0x28 && v6 <= 0x128)
    {
      unsigned int v7 = *((_DWORD *)a1 + 9);
      BOOL v8 = v7 <= 0x100 && (int)v6 - 40 >= v7;
      if (v8 && v6 == ((v7 + 3) & 0xFFFFFFFC) + 40)
      {
        if (memchr((void *)(a1 + 40), 0, v6 - 40))
        {
          long long v9 = &a1[(v6 + 3) & 0x1FFFFFFFCLL];
          if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) < 0x20u)
          {
            uint64_t result = 4294966987;
          }
          else
          {
            long long v10 = *(_OWORD *)(v9 + 36);
            v12[0] = *(_OWORD *)(v9 + 20);
            v12[1] = v10;
            uint64_t result = CASSetLUTFile(a1 + 40, (CA::Render::Server *)v12);
          }
        }
        else
        {
          uint64_t result = 4294966992;
        }
      }
    }
  }
  size_t v11 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v11;
  return result;
}

uint64_t _XSetDebugMessage(const char *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = *((unsigned int *)a1 + 1);
    if (v6 >= 0x2C && v6 <= 0x12C)
    {
      unsigned int v7 = *((_DWORD *)a1 + 9);
      if (v7 <= 0x100)
      {
        unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 44 >= v7 && v6 == v8 + 44)
        {
          uint64_t v10 = 296;
          if (*((unsigned int *)a1 + 1) < 0x128uLL) {
            uint64_t v10 = *((unsigned int *)a1 + 1);
          }
          if (memchr((void *)(a1 + 40), 0, v10 - 40))
          {
            size_t v11 = &a1[(v6 + 3) & 0x1FFFFFFFCLL];
            if (*(_DWORD *)v11 || *((_DWORD *)v11 + 1) < 0x20u)
            {
              uint64_t result = 4294966987;
            }
            else
            {
              uint64_t v12 = (const audit_token_t *)*(unsigned int *)&a1[v8 + 40];
              long long v13 = *(_OWORD *)(v11 + 36);
              v15[0] = *(_OWORD *)(v11 + 20);
              v15[1] = v13;
              uint64_t result = CASSetDebugMessage(a1 + 40, v12, (CA::Render::Server *)v15);
            }
          }
          else
          {
            uint64_t result = 4294966992;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v14;
  return result;
}

uint64_t _XSetMessageFile(const char *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = *((unsigned int *)a1 + 1);
    if (v6 >= 0x28 && v6 <= 0x128)
    {
      unsigned int v7 = *((_DWORD *)a1 + 9);
      BOOL v8 = v7 <= 0x100 && (int)v6 - 40 >= v7;
      if (v8 && v6 == ((v7 + 3) & 0xFFFFFFFC) + 40)
      {
        if (memchr((void *)(a1 + 40), 0, v6 - 40))
        {
          long long v9 = &a1[(v6 + 3) & 0x1FFFFFFFCLL];
          if (*(_DWORD *)v9 || *((_DWORD *)v9 + 1) < 0x20u)
          {
            uint64_t result = 4294966987;
          }
          else
          {
            long long v10 = *(_OWORD *)(v9 + 36);
            v12[0] = *(_OWORD *)(v9 + 20);
            v12[1] = v10;
            uint64_t result = CASSetMessageFile(a1 + 40, (CA::Render::Server *)v12);
          }
        }
        else
        {
          uint64_t result = 4294966992;
        }
      }
    }
  }
  size_t v11 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v11;
  return result;
}

void _XDebugFrameInfo(_DWORD *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
  }
  else
  {
    int v4 = a1[6];
    int v3 = a1 + 6;
    if (v4 || v3[1] < 0x20u)
    {
      int v5 = -309;
    }
    else
    {
      long long v7 = *(_OWORD *)(v3 + 9);
      v11[0] = *(_OWORD *)(v3 + 5);
      v11[1] = v7;
      if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, (const audit_token_t *)a2) & 0x80) != 0
        || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v8) & 0x20000) != 0)
      {
        int v5 = -81182719;
      }
      else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v9) & 0x100) != 0)
      {
        global_queue = dispatch_get_global_queue(33, 0);
        dispatch_async(global_queue, &__block_literal_global_239);
        int v5 = 0;
      }
      else
      {
        int v5 = 53;
      }
    }
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 24) = *v6;
}

void _XDebugPreset(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 72);
    v12[0] = *(_OWORD *)(a1 + 56);
    v12[1] = v6;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v7) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v8) & 0x100) != 0)
    {
      if (CADeviceDisplaySupportsICC::once[0] != -1) {
        dispatch_once(CADeviceDisplaySupportsICC::once, &__block_literal_global_206);
      }
      if (CADeviceDisplaySupportsICC::supports_icc)
      {
        global_queue = dispatch_get_global_queue(33, 0);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        void block[2] = ___ZN2CA12WindowServer11DebugPresetEj_block_invoke;
        block[3] = &__block_descriptor_36_e5_v8__0l;
        int v11 = v5;
        dispatch_async(global_queue, block);
      }
      int v3 = 0;
    }
    else
    {
      int v3 = 53;
    }
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

void _XDebugBrightness(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 76);
    v11[0] = *(_OWORD *)(a1 + 60);
    v11[1] = v6;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v7) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v8) & 0x100) != 0)
    {
      global_queue = dispatch_get_global_queue(33, 0);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      void block[2] = ___ZN2CA12WindowServer15DebugBrightnessEd_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      void block[4] = v5;
      dispatch_async(global_queue, block);
      int v3 = 0;
    }
    else
    {
      int v3 = 53;
    }
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

void _XSetDebugValue(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 32);
    float v6 = *(float *)(a1 + 36);
    long long v7 = *(_OWORD *)(a1 + 76);
    v10[0] = *(_OWORD *)(a1 + 60);
    v10[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v9) & 0x100) != 0)
    {
      CASetDebugValueFloat(v5, v6);
      int v3 = 0;
    }
    else
    {
      int v3 = 53;
    }
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

void _XGetDebugValue(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v8[0] = *(_OWORD *)(a1 + 56);
    v8[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, v6) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else
    {
      if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, v7) & 0x100) != 0)
      {
        *(float *)(a2 + 36) = CAGetDebugValueFloat(v4);
        *(_DWORD *)(a2 + 32) = 0;
        *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
        *(_DWORD *)(a2 + 4) = 40;
        return;
      }
      int v3 = 53;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XSetDebugFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 36);
    long long v7 = *(_OWORD *)(a1 + 76);
    v10[0] = *(_OWORD *)(a1 + 60);
    v10[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v9) & 0x100) != 0)
    {
      CASetDebugFlags(v5, v6);
      int v3 = 0;
    }
    else
    {
      int v3 = 53;
    }
  }
  unsigned int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

uint64_t _XGetDebugFlags(uint64_t result, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v9[0] = *(_OWORD *)(result + 20);
      v9[1] = v5;
      uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v9, (const audit_token_t *)a2);
      if ((result & 0x80) != 0
        || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v9, v6), (result & 0x20000) != 0))
      {
        int v4 = -81182719;
      }
      else
      {
        uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v9, v7);
        if ((result & 0x100) != 0)
        {
          uint64_t result = CAGetDebugFlags(v8);
          *(_DWORD *)(a2 + 32) = 0;
          *(_DWORD *)(a2 + 36) = result;
          *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
          *(_DWORD *)(a2 + 4) = 40;
          return result;
        }
        int v4 = 53;
      }
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

void _XClearColorDebugOptions(_DWORD *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
  }
  else
  {
    int v4 = a1[6];
    int v3 = a1 + 6;
    if (v4 || v3[1] < 0x20u)
    {
      int v5 = -309;
    }
    else
    {
      long long v7 = *(_OWORD *)(v3 + 9);
      v10[0] = *(_OWORD *)(v3 + 5);
      v10[1] = v7;
      if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
        || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x20000) != 0)
      {
        int v5 = -81182719;
      }
      else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v9) & 0x100) != 0)
      {
        CAClearColorDebugOptions();
        int v5 = 0;
      }
      else
      {
        int v5 = 53;
      }
    }
  }
  int v6 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 24) = *v6;
}

uint64_t _XClearDebugOptions(uint64_t result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) < 0x20u)
    {
      int v4 = -309;
    }
    else
    {
      long long v6 = *(_OWORD *)(result + 36);
      v10[0] = *(_OWORD *)(result + 20);
      v10[1] = v6;
      uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2);
      if ((result & 0x80) != 0
        || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v7), (result & 0x20000) != 0))
      {
        int v4 = -81182719;
      }
      else
      {
        uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8);
        if ((result & 0x100) != 0)
        {
          uint64_t v9 = 0;
          qword_1EB2ACC90 = 0;
          xmmword_1EB2ACC70 = 0u;
          *(_OWORD *)&byte_1EB2ACC80 = 0u;
          xmmword_1EB2ACC50 = 0u;
          unk_1EB2ACC60 = 0u;
          xmmword_1EB2ACC30 = 0u;
          *(_OWORD *)&byte_1EB2ACC40 = 0u;
          xmmword_1EB2ACC10 = 0u;
          *(_OWORD *)&byte_1EB2ACC20 = 0u;
          xmmword_1EB2ACBF0 = 0u;
          *(_OWORD *)&byte_1EB2ACC00 = 0u;
          ca_debug_options = 0u;
          *(_OWORD *)&byte_1EB2ACBE0 = 0u;
          options_are_visual = 0;
          while (!*((unsigned char *)&ca_debug_options + dword_1849A7CB4[v9]))
          {
            if (++v9 == 40)
            {
              int v4 = 0;
              goto LABEL_7;
            }
          }
          int v4 = 0;
          options_are_visual = 1;
        }
        else
        {
          int v4 = 53;
        }
      }
    }
  }
LABEL_7:
  int v5 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 24) = *v5;
  return result;
}

void _XSetDebugOption(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    unsigned __int32 v5 = *(_DWORD *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 36);
    long long v7 = *(_OWORD *)(a1 + 76);
    v10[0] = *(_OWORD *)(a1 + 60);
    v10[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v9) & 0x100) != 0)
    {
      CASetDebugOption(v5, v6 != 0);
      int v3 = 0;
    }
    else
    {
      int v3 = 53;
    }
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

uint64_t _XGetDebugOption(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(result + 32);
    long long v5 = *(_OWORD *)(result + 72);
    v8[0] = *(_OWORD *)(result + 56);
    v8[1] = v5;
    uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, (const audit_token_t *)a2);
    if ((result & 0x80) != 0
      || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, v6), (result & 0x20000) != 0))
    {
      int v3 = -81182719;
    }
    else
    {
      uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, v7);
      if ((result & 0x100) != 0)
      {
        uint64_t result = CAGetDebugOption(v4);
        *(_DWORD *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 36) = result;
        *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v3 = 53;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XGetFrameCounter(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v4 = -304;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 24);
    result += 24;
    if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
    {
      int v4 = -309;
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 36);
      v8[0] = *(_OWORD *)(result + 20);
      v8[1] = v5;
      uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, (const audit_token_t *)a2);
      if ((result & 0x80) == 0)
      {
        uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, v6);
        if ((result & 0x20000) == 0)
        {
          uint64_t result = (uint64_t)CAGetStatsStruct(0);
          int v7 = *(_DWORD *)(result + 20);
          *(_DWORD *)(a2 + 32) = 0;
          *(_DWORD *)(a2 + 36) = v7;
          *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
          *(_DWORD *)(a2 + 4) = 40;
          return result;
        }
      }
      int v4 = -81182719;
    }
  }
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

void _XGetPerformanceInfo(_DWORD *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
  }
  else
  {
    int v4 = a1[6];
    int v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      int v5 = -309;
    }
    else
    {
      *(_DWORD *)(a2 + 36) = 16777473;
      long long v6 = *(_OWORD *)(v3 + 9);
      v17[0] = *(_OWORD *)(v3 + 5);
      v17[1] = v6;
      *(void *)(a2 + 28) = 0;
      *(_DWORD *)(a2 + 52) = 0;
      if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v17, (const audit_token_t *)a2) & 0x80) != 0
        || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v17, v7) & 0x20000) != 0)
      {
        int v5 = -81182719;
      }
      else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v17, v8) & 0x100) != 0)
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF98];
        CFPropertyListRef propertyList = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF98], 0, MEMORY[0x1E4F1D510]);
        CA::Render::post_notification(0x2Du, 0, (uint64_t)&propertyList, 0);
        vm_address_t v15 = 0;
        CFDataRef Data = CFPropertyListCreateData(v9, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        if (Data)
        {
          CFDataRef v11 = Data;
          size_t Length = CFDataGetLength(Data);
          vm_allocate(*MEMORY[0x1E4F14960], &v15, (Length + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00], 1);
          uint64_t v13 = (void *)v15;
          if (v15)
          {
            BytePtr = CFDataGetBytePtr(v11);
            memcpy(v13, BytePtr, Length);
          }
          CFRelease(v11);
        }
        else
        {
          LODWORD(Length) = 0;
        }
        CFRelease(propertyList);
        if (v15)
        {
          *(void *)(a2 + 28) = v15;
          *(_DWORD *)(a2 + 52) = Length;
          *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = Length;
          *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
          *(_DWORD *)a2 |= 0x80000000;
          *(_DWORD *)(a2 + 4) = 56;
          *(_DWORD *)(a2 + 24) = 1;
          return;
        }
        int v5 = 5;
      }
      else
      {
        int v5 = 53;
      }
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XPostPowerLog(_DWORD *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
  }
  else
  {
    int v4 = a1[6];
    int v3 = a1 + 6;
    if (v4 || v3[1] < 0x20u)
    {
      int v5 = -309;
    }
    else
    {
      long long v7 = *(_OWORD *)(v3 + 9);
      v10[0] = *(_OWORD *)(v3 + 5);
      v10[1] = v7;
      if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
        || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x20000) != 0)
      {
        int v5 = -81182719;
      }
      else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v9) & 0x100) != 0)
      {
        CA::Render::post_notification(0x2Au, 0, 0, 0);
        int v5 = 0;
      }
      else
      {
        int v5 = 53;
      }
    }
  }
  long long v6 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 24) = *v6;
}

void _XGetODStatistics(_DWORD *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
  }
  else
  {
    int v4 = a1[6];
    int v3 = a1 + 6;
    if (v4 || v3[1] <= 0x1Fu)
    {
      int v5 = -309;
    }
    else
    {
      *(_DWORD *)(a2 + 36) = 16777473;
      long long v6 = *(_OWORD *)(v3 + 9);
      v19[0] = *(_OWORD *)(v3 + 5);
      v19[1] = v6;
      *(void *)(a2 + 28) = 0;
      *(_DWORD *)(a2 + 52) = 0;
      if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, (const audit_token_t *)a2) & 0x80) != 0
        || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v7) & 0x20000) != 0)
      {
        int v5 = -81182719;
      }
      else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v8) & 0x100) != 0)
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF98];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF98], 0, MEMORY[0x1E4F1D510]);
        CA::Render::post_notification(0x29u, 0, (uint64_t)Mutable, 0);
        vm_address_t address = 0;
        CFDataRef Data = CFPropertyListCreateData(v9, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        if (Data)
        {
          CFDataRef v12 = Data;
          size_t Length = CFDataGetLength(Data);
          vm_allocate(*MEMORY[0x1E4F14960], &address, (Length + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00], 1);
          uint64_t v14 = (void *)address;
          if (address)
          {
            BytePtr = CFDataGetBytePtr(v12);
            memcpy(v14, BytePtr, Length);
          }
          CFRelease(v12);
        }
        else
        {
          LODWORD(Length) = 0;
        }
        CFRelease(Mutable);
        vm_address_t v16 = address;
        *(void *)(a2 + 28) = address;
        if (v16) {
          int v17 = Length;
        }
        else {
          int v17 = 0;
        }
        *(_DWORD *)(a2 + 52) = v17;
        if (v16)
        {
          *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = v17;
          *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
          *(_DWORD *)a2 |= 0x80000000;
          *(_DWORD *)(a2 + 4) = 56;
          *(_DWORD *)(a2 + 24) = 1;
          return;
        }
        int v5 = 5;
      }
      else
      {
        int v5 = 53;
      }
    }
  }
  *(_DWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XGetUpdateHistograms(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    *(_DWORD *)(a2 + 36) = 16777473;
    int v4 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v19[0] = *(_OWORD *)(a1 + 56);
    v19[1] = v5;
    *(void *)(a2 + 28) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v6) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v19, v7) & 0x100) != 0)
    {
      BOOL v18 = 0;
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF98];
      CFPropertyListRef propertyList = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF98], 0, MEMORY[0x1E4F1D510]);
      BOOL v18 = v4 != 0;
      CA::Render::post_notification(0x28u, 0, (uint64_t)&propertyList, 0);
      vm_address_t address = 0;
      CFDataRef Data = CFPropertyListCreateData(v8, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (Data)
      {
        CFDataRef v10 = Data;
        size_t Length = CFDataGetLength(Data);
        vm_allocate(*MEMORY[0x1E4F14960], &address, (Length + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00], 1);
        CFDataRef v12 = (void *)address;
        if (address)
        {
          BytePtr = CFDataGetBytePtr(v10);
          memcpy(v12, BytePtr, Length);
        }
        CFRelease(v10);
      }
      else
      {
        LODWORD(Length) = 0;
      }
      CFRelease(propertyList);
      vm_address_t v14 = address;
      *(void *)(a2 + 28) = address;
      if (v14) {
        int v15 = Length;
      }
      else {
        int v15 = 0;
      }
      *(_DWORD *)(a2 + 52) = v15;
      if (v14)
      {
        *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = v15;
        *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
        *(_DWORD *)a2 |= 0x80000000;
        *(_DWORD *)(a2 + 4) = 56;
        *(_DWORD *)(a2 + 24) = 1;
        return;
      }
      int v3 = 5;
    }
    else
    {
      int v3 = 53;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XPurgeServer(_DWORD *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
  }
  else
  {
    int v4 = a1[6];
    int v3 = a1 + 6;
    if (v4 || v3[1] < 0x20u)
    {
      int v5 = -309;
    }
    else
    {
      long long v7 = *(_OWORD *)(v3 + 9);
      v9[0] = *(_OWORD *)(v3 + 5);
      v9[1] = v7;
      if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v9, (const audit_token_t *)a2) & 0x80) != 0
        || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v9, v8) & 0x20000) != 0)
      {
        int v5 = -81182719;
      }
      else
      {
        CA::Render::post_notification(0x26u, 0, 0, 0);
        int v5 = 0;
      }
    }
  }
  long long v6 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 24) = *v6;
}

uint64_t _XContentStreamReleaseSurf(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 52)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
    {
      if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        int v5 = (CA::Render::ContentStream *)*(unsigned int *)(a1 + 28);
        long long v6 = (const audit_token_t *)*(unsigned int *)(a1 + 48);
        long long v7 = *(_OWORD *)(a1 + 88);
        v8[0] = *(_OWORD *)(a1 + 72);
        v8[1] = v7;
        uint64_t result = CASContentStreamReleaseSurf(v5, v6, (CA::Render::Server *)v8);
      }
    }
    else
    {
      uint64_t result = 4294966996;
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XContentStreamStartStop(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 80)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(unsigned char *)(a1 + 51) == 1
      && (unsigned int v3 = *(_DWORD *)(a1 + 52) >> 2, v3 == *(_DWORD *)(a1 + 68)))
    {
      if (*(_DWORD *)(a1 + 80) || *(_DWORD *)(a1 + 84) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        long long v6 = (CA::Render::ContentStream *)*(unsigned int *)(a1 + 28);
        long long v7 = *(const audit_token_t **)(a1 + 40);
        unsigned int v8 = *(_DWORD *)(a1 + 72);
        unsigned int v9 = *(_DWORD *)(a1 + 76);
        long long v10 = *(_OWORD *)(a1 + 116);
        v11[0] = *(_OWORD *)(a1 + 100);
        v11[1] = v10;
        uint64_t result = CASContentStreamStartStop(v6, v7, v3, v8, v9, (CA::Render::Server *)v11);
      }
    }
    else
    {
      uint64_t result = 4294966996;
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  int v5 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v5;
  return result;
}

uint64_t _XContentStreamModify(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 128)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112 && *(unsigned __int16 *)(a1 + 50) << 16 == 1114112)
    {
      if (*(_DWORD *)(a1 + 128) || *(_DWORD *)(a1 + 132) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        mach_port_name_t v5 = *(_DWORD *)(a1 + 28);
        long long v6 = (const audit_token_t *)*(unsigned int *)(a1 + 40);
        long long v7 = *(_OWORD *)(a1 + 76);
        long long v8 = *(_OWORD *)(a1 + 108);
        _OWORD v11[2] = *(_OWORD *)(a1 + 92);
        float32x2_t v11[3] = v8;
        int v12 = *(_DWORD *)(a1 + 124);
        v11[0] = *(_OWORD *)(a1 + 60);
        v11[1] = v7;
        long long v9 = *(_OWORD *)(a1 + 164);
        v10[0] = *(_OWORD *)(a1 + 148);
        v10[1] = v9;
        uint64_t result = CASContentStreamModify(v5, v6, (uint64_t)v11, (CA::Render::Server *)v10);
      }
    }
    else
    {
      uint64_t result = 4294966996;
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v4;
  return result;
}

void _XFlipBookModify(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 80);
    v10[0] = *(_OWORD *)(a1 + 64);
    v10[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x40) != 0)
    {
      uint64_t v8 = v5;
      int v9 = v6;
      CA::Render::post_notification(0x12u, 0, (uint64_t)&v8, 0);
      int v3 = 0;
    }
    else
    {
      int v3 = 53;
    }
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

void _XFlipBookCancel(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  *(void *)(a2 + 32) = 0x11000000000000;
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 36);
  long long v6 = *(_OWORD *)(a1 + 76);
  v12[0] = *(_OWORD *)(a1 + 60);
  v12[1] = v6;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x40) == 0)
  {
    int v3 = 53;
    goto LABEL_7;
  }
  uint64_t v7 = a2 + 28;
  uint64_t v10 = 0;
  uint64_t v9 = v4;
  if (!v5) {
    uint64_t v7 = 0;
  }
  uint64_t v11 = v7;
  CA::Render::post_notification(0x11u, 0, (uint64_t)&v9, 0);
  uint64_t v8 = v10;
  *(void *)(a2 + 4CASetDebugMessage("", 0) = *MEMORY[0x1E4F14068];
  *(void *)(a2 + 48) = v8;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
}

void _XFlipBookCopyCurrentFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    *(void *)(a2 + 32) = 0x11000000000000;
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 56);
    v10[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x40) != 0)
    {
      uint64_t v8 = 0;
      uint64_t v7 = v4;
      uint64_t v9 = a2 + 28;
      CA::Render::post_notification(0x10u, 0, (uint64_t)&v7, 0);
      uint64_t v6 = v8;
      *(void *)(a2 + 4CASetDebugMessage("", 0) = *MEMORY[0x1E4F14068];
      *(void *)(a2 + 48) = v6;
      *(_DWORD *)a2 |= 0x80000000;
      *(_DWORD *)(a2 + 4) = 56;
      *(_DWORD *)(a2 + 24) = 1;
      return;
    }
    int v3 = 53;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

void _XFlipBookQueryMemoryUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v8[0] = *(_OWORD *)(a1 + 56);
    v8[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v8, (const audit_token_t *)a2) & 0x40) != 0)
    {
      uint64_t v7 = 0;
      uint64_t v6 = v4;
      CA::Render::post_notification(0xFu, 0, (uint64_t)&v6, 0);
      *(void *)(a2 + 36) = v7;
      *(_DWORD *)(a2 + 32) = 0;
      *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
      *(_DWORD *)(a2 + 4) = 44;
      return;
    }
    int v3 = 53;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

double _XFlipBookQueryFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 36);
    long long v6 = *(_OWORD *)(a1 + 80);
    v10[0] = *(_OWORD *)(a1 + 64);
    v10[1] = v6;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x40) != 0)
    {
      long long v9 = 0u;
      v8[0] = v4;
      v8[1] = v5;
      CA::Render::post_notification(0xEu, 0, (uint64_t)v8, 0);
      double result = *(double *)&v9;
      *(_OWORD *)(a2 + 36) = v9;
      *(_DWORD *)(a2 + 32) = 0;
      *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
      *(_DWORD *)(a2 + 4) = 52;
      return result;
    }
    int v3 = 53;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

void _XFlipBookRender(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  *(void *)(a2 + 32) = 0x11000000000000;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 88);
  v10[0] = *(_OWORD *)(a1 + 72);
  v10[1] = v7;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x40) == 0)
  {
    int v3 = 53;
    goto LABEL_7;
  }
  memset(&v9[2], 0, 64);
  v9[0] = v4;
  v9[1] = v5;
  LODWORD(v9[2]) = v6;
  CA::Render::post_notification(0xDu, 0, (uint64_t)v9, 0);
  *(_DWORD *)(a2 + 48) = HIDWORD(v9[2]);
  *(_OWORD *)(a2 + 52) = *(_OWORD *)&v9[3];
  *(void *)(a2 + 68) = v9[5];
  *(void *)(a2 + 76) = v9[6];
  int v8 = v9[7];
  *(_OWORD *)(a2 + 84) = *(_OWORD *)((char *)&v9[7] + 4);
  *(void *)(a2 + 4CASetDebugMessage("", 0) = *MEMORY[0x1E4F14068];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 100;
  *(_DWORD *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 28) = v8;
}

uint64_t _XUnregisterForDisallowedLayersNotification(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 52)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 52) && *(_DWORD *)(result + 56) > 0x1Fu)
      {
        int v4 = *(_DWORD *)(result + 12);
        uint64_t v5 = (const audit_token_t *)*(unsigned int *)(result + 28);
        int v6 = *(_DWORD *)(result + 48);
        long long v7 = *(_OWORD *)(result + 88);
        v8[0] = *(_OWORD *)(result + 72);
        v8[1] = v7;
        double result = CASUnregisterForDisallowedLayersNotification(v4, v5, v6, (CA::Render::Server *)v8);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XRegisterForDisallowedLayersNotification(uint64_t result, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 52)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 52) && *(_DWORD *)(result + 56) > 0x1Fu)
      {
        mach_port_name_t v4 = *(_DWORD *)(result + 28);
        uint64_t v5 = (const audit_token_t *)*(unsigned int *)(result + 48);
        long long v6 = *(_OWORD *)(result + 88);
        v7[0] = *(_OWORD *)(result + 72);
        v7[1] = v6;
        double result = CASRegisterForDisallowedLayersNotification(v4, v5, (CA::Render::Server *)v7);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XSetDisplayLatency(int *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  uint64_t result = 4294966992;
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v6 = a1[1];
    if (v6 >= 0x3C && v6 <= 0x7C)
    {
      unsigned int v7 = a1[10];
      if (v7 <= 0x40)
      {
        unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
        if ((int)v6 - 60 >= v7 && v6 == v8 + 60)
        {
          uint64_t v10 = 108;
          if (a1[1] < 0x6CuLL) {
            uint64_t v10 = a1[1];
          }
          if (memchr(a1 + 11, 0, v10 - 44))
          {
            uint64_t v11 = (uint64_t)a1 + ((v6 + 3) & 0x1FFFFFFFCLL);
            if (*(_DWORD *)v11 || *(_DWORD *)(v11 + 4) < 0x20u)
            {
              uint64_t result = 4294966987;
            }
            else
            {
              int v12 = a1[8];
              uint64_t v13 = *(void *)((char *)a1 + v8 + 44);
              double v14 = *(double *)((char *)a1 + v8 + 52);
              long long v15 = *(_OWORD *)(v11 + 36);
              v17[0] = *(_OWORD *)(v11 + 20);
              v17[1] = v15;
              uint64_t result = CASSetDisplayLatency(v12, (const audit_token_t *)(a1 + 11), v13, (CA::Render::Server *)v17, v14);
            }
          }
          else
          {
            uint64_t result = 4294966992;
          }
        }
      }
    }
  }
  vm_address_t v16 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v16;
  return result;
}

void _XSetDisplayUserPreferences(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    int v3 = -81182719;
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 80);
    v12[0] = *(_OWORD *)(a1 + 64);
    v12[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x80) == 0
      && (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v8) & 0x20000) == 0)
    {
      int v9 = 0;
      uint64_t v10 = v5;
      int v11 = v6;
      CA::Render::post_notification(0x22u, 0, (uint64_t)&v9, 0);
      if ((_BYTE)v9) {
        int v3 = 0;
      }
      else {
        int v3 = 56;
      }
    }
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

uint64_t _XSetDisplayPresetProperties(uint64_t result, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 88)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 88) && *(_DWORD *)(result + 92) > 0x1Fu)
      {
        int v4 = *(_DWORD *)(result + 48);
        uint64_t v5 = (const audit_token_t *)*(unsigned __int8 *)(result + 52);
        double v6 = *(double *)(result + 56);
        double v7 = *(double *)(result + 64);
        double v8 = *(double *)(result + 72);
        double v9 = *(double *)(result + 80);
        mach_port_name_t v10 = *(_DWORD *)(result + 28);
        long long v11 = *(_OWORD *)(result + 124);
        v12[0] = *(_OWORD *)(result + 108);
        v12[1] = v11;
        uint64_t result = CASSetDisplayPresetProperties(v4, v5, v10, (CA::Render::Server *)v12, v6, v7, v8, v9);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XSetDisplayProperties(uint64_t result, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 100)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 1114112)
    {
      if (!*(_DWORD *)(result + 100) && *(_DWORD *)(result + 104) > 0x1Fu)
      {
        int v4 = *(_DWORD *)(result + 12);
        uint64_t v5 = (const audit_token_t *)*(unsigned int *)(result + 48);
        int v6 = *(_DWORD *)(result + 52);
        uint64_t v7 = *(void *)(result + 56);
        int v8 = *(_DWORD *)(result + 64);
        char v9 = *(unsigned char *)(result + 68);
        unsigned int v10 = *(_DWORD *)(result + 72);
        float v11 = *(float *)(result + 76);
        float v12 = *(float *)(result + 80);
        int v13 = *(_DWORD *)(result + 84);
        int v14 = *(_DWORD *)(result + 88);
        unsigned __int8 v15 = *(unsigned char *)(result + 92);
        unsigned int v16 = *(_DWORD *)(result + 96);
        mach_port_name_t v17 = *(_DWORD *)(result + 28);
        long long v18 = *(_OWORD *)(result + 136);
        v19[0] = *(_OWORD *)(result + 120);
        v19[1] = v18;
        uint64_t result = CASSetDisplayProperties(v4, v5, v6, v7, v8, v9, v10, v13, v11, v12, v14, v15, v16, v17, (CA::Render::Server *)v19);
        *(_DWORD *)(a2 + 32) = result;
        return result;
      }
      int v3 = -309;
    }
    else
    {
      int v3 = -300;
    }
  }
  else
  {
    int v3 = -304;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

void _XGetVsyncOffSupportsRGBCompression(_DWORD *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v3 = -304;
  }
  else
  {
    if (!a1[6] && a1[7] > 0x1Fu)
    {
      char v4 = 0;
      CA::Render::post_notification(0x1Fu, 0, (uint64_t)&v4, 0);
      *(unsigned char *)(a2 + 36) = v4;
      *(_DWORD *)(a2 + 32) = 0;
      *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
      *(_DWORD *)(a2 + 4) = 40;
      return;
    }
    int v3 = -309;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

float _XGetAutoLuminanceBoost(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 56);
    v10[1] = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v6) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else
    {
      v8[0] = 0;
      v8[1] = v4;
      float v9 = 0.0;
      CA::Render::post_notification(0x1Eu, 0, (uint64_t)v8, 0);
      if (LOBYTE(v8[0]))
      {
        float result = v9;
        *(float *)(a2 + 36) = v9;
        *(_DWORD *)(a2 + 32) = 0;
        *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
        *(_DWORD *)(a2 + 4) = 40;
        return result;
      }
      int v3 = 56;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

void _XGetLogicalBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  int v4 = *(_DWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 72);
  v12[0] = *(_OWORD *)(a1 + 56);
  v12[1] = v5;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v6) & 0x20000) != 0)
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  memset(v11, 0, 40);
  DWORD1(v11[0]) = v4;
  CA::Render::post_notification(0x1Du, 0, (uint64_t)v11, 0);
  if (!LOBYTE(v11[0]))
  {
    int v3 = 56;
    goto LABEL_7;
  }
  vm_address_t address = 0;
  vm_allocate(*MEMORY[0x1E4F14960], &address, (*MEMORY[0x1E4F14B00] + 31) & -*MEMORY[0x1E4F14B00], 1);
  vm_address_t v7 = address;
  if (address)
  {
    long long v8 = *(_OWORD *)((char *)&v11[1] + 8);
    *(_OWORD *)vm_address_t address = *(_OWORD *)((char *)v11 + 8);
    *(_OWORD *)(v7 + 16) = v8;
    int v9 = 32;
  }
  else
  {
    int v9 = 0;
  }
  *(void *)(a2 + 28) = v7;
  *(_DWORD *)(a2 + 52) = v9;
  *(_DWORD *)(a2 + 4CASetDebugMessage("", 0) = v9;
  *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
}

void _XFlushIRDC(_DWORD *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v5 = -304;
    goto LABEL_7;
  }
  int v4 = a1[6];
  int v3 = a1 + 6;
  if (v4 || v3[1] <= 0x1Fu)
  {
    int v5 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v5;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  long long v6 = *(_OWORD *)(v3 + 9);
  v10[0] = *(_OWORD *)(v3 + 5);
  v10[1] = v6;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v7) & 0x20000) != 0)
  {
    int v9 = -81182719;
  }
  else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x200) != 0)
  {
    CA::Render::post_notification(0x19u, 0, 0, 0);
    int v9 = 0;
  }
  else
  {
    int v9 = 5;
  }
  *(_DWORD *)(a2 + 32) = v9;
}

void _XSetCacheAsynchronousSurfaces(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 56);
    v10[1] = v6;
    int v9 = v5;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v7) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v8) & 0x200) != 0)
    {
      CA::Render::post_notification(0x18u, 0, (uint64_t)&v9, 0);
      int v3 = 0;
    }
    else
    {
      int v3 = 5;
    }
  }
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

uint64_t _XCaptureDisplayContextList(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    uint64_t result = 4294966992;
    goto LABEL_21;
  }
  int v5 = *(_DWORD *)(a1 + 24);
  uint64_t result = 4294966992;
  if (v5 == 3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 4);
    if (v6 >= 0x78 && v6 <= 0x178)
    {
      if (*(unsigned char *)(a1 + 39) != 1 || *(unsigned __int16 *)(a1 + 54) << 16 != 1114112 || *(unsigned char *)(a1 + 67) != 1) {
        goto LABEL_20;
      }
      unsigned int v7 = *(_DWORD *)(a1 + 84);
      if (v7 > 0x100) {
        goto LABEL_21;
      }
      if ((int)v6 - 120 < v7) {
        goto LABEL_21;
      }
      unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
      if (v6 != v8 + 120) {
        goto LABEL_21;
      }
      uint64_t v9 = a1 + v8;
      unsigned int v10 = *(_DWORD *)(a1 + 40) >> 2;
      if (v10 != *(_DWORD *)(v9 + 88)
        || (uint64_t v11 = v9 - 256, v12 = *(_DWORD *)(a1 + 68) >> 7, v12 != *(_DWORD *)(v9 + 112)))
      {
LABEL_20:
        uint64_t result = 4294966996;
        goto LABEL_21;
      }
      uint64_t v13 = 344;
      if (*(unsigned int *)(a1 + 4) < 0x158uLL) {
        uint64_t v13 = *(unsigned int *)(a1 + 4);
      }
      if (!memchr((void *)(a1 + 88), 0, v13 - 88)) {
        goto LABEL_2;
      }
      uint64_t v14 = ((v6 + 3) & 0x1FFFFFFFCLL) + a1;
      if (*(_DWORD *)v14 || *(_DWORD *)(v14 + 4) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        unsigned int v16 = *(const audit_token_t **)(a1 + 28);
        mach_port_name_t v17 = (_anonymous_namespace_ *)*(unsigned int *)(v11 + 348);
        int v18 = *(_DWORD *)(a1 + 44);
        int v19 = *(_DWORD *)(v11 + 352);
        int v20 = *(_DWORD *)(v11 + 356);
        double v21 = *(double *)(v11 + 360);
        int v22 = *(CA::Mat4Impl **)(a1 + 56);
        unsigned int v23 = *(_DWORD *)(v11 + 372);
        long long v24 = *(_OWORD *)(v14 + 36);
        v25[0] = *(_OWORD *)(v14 + 20);
        v25[1] = v24;
        uint64_t result = CASCaptureDisplayContextList((const char *)(a1 + 88), v16, v10, v17, v18, v19, v20, v22, v21, v12, v23, (CA::Render::Server *)v25);
      }
    }
  }
LABEL_21:
  unsigned __int8 v15 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v15;
  return result;
}

uint64_t _XCaptureDisplay(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    uint64_t result = 4294966992;
    goto LABEL_3;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  uint64_t result = 4294966992;
  if (v6 == 2)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 4);
    if (v7 >= 0xEC && v7 <= 0x1EC)
    {
      if (*(unsigned char *)(a1 + 39) != 1 || *(unsigned __int16 *)(a1 + 54) << 16 != 1114112) {
        goto LABEL_19;
      }
      unsigned int v8 = *(_DWORD *)(a1 + 68);
      if (v8 > 0x100) {
        goto LABEL_3;
      }
      if ((int)v7 - 236 < v8) {
        goto LABEL_3;
      }
      unsigned int v9 = (v8 + 3) & 0xFFFFFFFC;
      if (v7 != v9 + 236) {
        goto LABEL_3;
      }
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (unsigned int *)(*(_DWORD *)(a1 + 40) >> 2);
      if (v11 != *(_DWORD *)(v10 + 72))
      {
LABEL_19:
        uint64_t result = 4294966996;
        goto LABEL_3;
      }
      uint64_t v12 = 328;
      if (*(unsigned int *)(a1 + 4) < 0x148uLL) {
        uint64_t v12 = *(unsigned int *)(a1 + 4);
      }
      if (!memchr((void *)(a1 + 72), 0, v12 - 72)) {
        goto LABEL_2;
      }
      uint64_t v13 = ((v7 + 3) & 0x1FFFFFFFCLL) + a1;
      if (*(_DWORD *)v13 || *(_DWORD *)(v13 + 4) < 0x20u)
      {
        uint64_t result = 4294966987;
      }
      else
      {
        uint64_t v14 = *(_anonymous_namespace_ **)(a1 + 28);
        unsigned __int8 v15 = (_anonymous_namespace_ *)*(unsigned int *)(v10 + 76);
        int v16 = *(_DWORD *)(v10 + 80);
        int v17 = *(_DWORD *)(a1 + 44);
        int v18 = *(_DWORD *)(v10 + 84);
        int v19 = *(_DWORD *)(v10 + 88);
        double v20 = *(double *)(v10 + 92);
        int v21 = *(_DWORD *)(v10 + 228);
        unsigned int v22 = *(_DWORD *)(v10 + 232);
        long long v23 = *(_OWORD *)(v13 + 36);
        v24[0] = *(_OWORD *)(v13 + 20);
        v24[1] = v23;
        uint64_t result = CASCaptureDisplay((const char *)(a1 + 72), v14, v11, v15, v16, v17, v18, v19, v20, (CA::Mat4Impl *)(v10 + 100), v21, v22, (CA::Render::Server *)v24);
      }
    }
  }
LABEL_3:
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XCaptureDisplayLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    uint64_t result = 4294966992;
    goto LABEL_3;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  uint64_t result = 4294966992;
  if (v6 == 1)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 4);
    if (v7 >= 0xDC && v7 <= 0x1DC)
    {
      if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112)
      {
        uint64_t result = 4294966996;
        goto LABEL_3;
      }
      unsigned int v8 = *(_DWORD *)(a1 + 52);
      if (v8 <= 0x100 && (int)v7 - 220 >= v8)
      {
        unsigned int v9 = (v8 + 3) & 0xFFFFFFFC;
        if (v7 == v9 + 220)
        {
          uint64_t v10 = 312;
          if (*(unsigned int *)(a1 + 4) < 0x138uLL) {
            uint64_t v10 = *(unsigned int *)(a1 + 4);
          }
          if (!memchr((void *)(a1 + 56), 0, v10 - 56)) {
            goto LABEL_2;
          }
          uint64_t v11 = ((v7 + 3) & 0x1FFFFFFFCLL) + a1;
          if (*(_DWORD *)v11 || *(_DWORD *)(v11 + 4) < 0x20u)
          {
            uint64_t result = 4294966987;
          }
          else
          {
            uint64_t v12 = (CA::Render::Context *)*(unsigned int *)(a1 + v9 + 56);
            uint64_t v13 = *(void *)(a1 + v9 + 60);
            uint64_t v14 = (_anonymous_namespace_ *)*(unsigned int *)(a1 + v9 + 68);
            int v15 = *(_DWORD *)(a1 + 28);
            int v16 = *(_DWORD *)(a1 + v9 + 72);
            int v17 = *(_DWORD *)(a1 + v9 + 76);
            double v18 = *(double *)(a1 + v9 + 80);
            unsigned int v19 = *(_DWORD *)(a1 + v9 + 216);
            long long v20 = *(_OWORD *)(v11 + 36);
            v21[0] = *(_OWORD *)(v11 + 20);
            v21[1] = v20;
            uint64_t result = CASCaptureDisplayLayer((const char *)(a1 + 56), v12, v13, v14, v15, v16, v17, (CA::Mat4Impl *)(a1 + v9 + 88), v18, v19, (CA::Render::Server *)v21);
          }
        }
      }
    }
  }
LABEL_3:
  int v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XRenderDisplayContextListShmem(uint64_t result, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 3) {
    goto LABEL_21;
  }
  uint64_t v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x98 || v5 > 0x198) {
    goto LABEL_21;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned __int16 *)(result + 54) << 16 != 1114112
    || *(unsigned char *)(result + 67) != 1)
  {
    goto LABEL_20;
  }
  unsigned int v6 = *(_DWORD *)(result + 84);
  if (v6 > 0x100)
  {
LABEL_2:
    int v3 = -304;
LABEL_21:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v14 = *MEMORY[0x1E4F14068];
    goto LABEL_22;
  }
  int v3 = -304;
  if ((int)v5 - 152 < v6) {
    goto LABEL_21;
  }
  unsigned int v7 = (v6 + 3) & 0xFFFFFFFC;
  if (v5 != v7 + 152) {
    goto LABEL_21;
  }
  uint64_t v8 = result + v7;
  unsigned int v9 = *(_DWORD *)(result + 40) >> 2;
  if (v9 != *(_DWORD *)(v8 + 88) || (uint64_t v10 = v8 - 256, v11 = *(_DWORD *)(result + 68) >> 7, v11 != *(_DWORD *)(v8 + 144)))
  {
LABEL_20:
    int v3 = -300;
    goto LABEL_21;
  }
  uint64_t v12 = 344;
  if (*(unsigned int *)(result + 4) < 0x158uLL) {
    uint64_t v12 = *(unsigned int *)(result + 4);
  }
  uint64_t result = (uint64_t)memchr((void *)(result + 88), 0, v12 - 88);
  if (!result) {
    goto LABEL_2;
  }
  uint64_t v13 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v13 || *(_DWORD *)(v13 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_21;
  }
  int v15 = *(const audit_token_t **)(v4 + 28);
  int v16 = *(_DWORD *)(v10 + 348);
  int v17 = *(_DWORD *)(v10 + 352);
  uint64_t v18 = *(void *)(v10 + 356);
  mem_entry_name_port_t v19 = *(_DWORD *)(v4 + 44);
  mach_vm_size_t v20 = *(void *)(v10 + 364);
  uint64_t v21 = *(void *)(v10 + 380);
  int v22 = *(_DWORD *)(v10 + 388);
  double v23 = *(double *)(v10 + 392);
  long long v24 = *(CA::Mat4Impl **)(v4 + 56);
  unsigned int v25 = *(_DWORD *)(v10 + 404);
  long long v26 = *(_OWORD *)(v13 + 36);
  v27[0] = *(_OWORD *)(v13 + 20);
  v27[1] = v26;
  uint64_t result = CASRenderDisplayContextListShmem((const char *)(v4 + 88), v15, v9, v16, v17, v18, v19, v20, v23, v21, SHIDWORD(v21), v22, v24, v11, v25, (unint64_t *)(a2 + 36), (CA::Render::Server *)v27);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v14 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v14;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_22:
  *(void *)(a2 + 24) = v14;
  return result;
}

uint64_t _XRenderDisplayContextListSurface(uint64_t result, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 3) {
    goto LABEL_21;
  }
  uint64_t v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x74 || v5 > 0x174) {
    goto LABEL_21;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned __int16 *)(result + 54) << 16 != 1114112
    || *(unsigned char *)(result + 67) != 1)
  {
    goto LABEL_20;
  }
  unsigned int v6 = *(_DWORD *)(result + 84);
  if (v6 > 0x100)
  {
LABEL_2:
    int v3 = -304;
LABEL_21:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v14 = *MEMORY[0x1E4F14068];
    goto LABEL_22;
  }
  int v3 = -304;
  if ((int)v5 - 116 < v6) {
    goto LABEL_21;
  }
  unsigned int v7 = (v6 + 3) & 0xFFFFFFFC;
  if (v5 != v7 + 116) {
    goto LABEL_21;
  }
  uint64_t v8 = result + v7;
  unsigned int v9 = *(_DWORD *)(result + 40) >> 2;
  if (v9 != *(_DWORD *)(v8 + 88) || (uint64_t v10 = v8 - 256, v11 = *(_DWORD *)(result + 68) >> 7, v11 != *(_DWORD *)(v8 + 108)))
  {
LABEL_20:
    int v3 = -300;
    goto LABEL_21;
  }
  uint64_t v12 = 344;
  if (*(unsigned int *)(result + 4) < 0x158uLL) {
    uint64_t v12 = *(unsigned int *)(result + 4);
  }
  uint64_t result = (uint64_t)memchr((void *)(result + 88), 0, v12 - 88);
  if (!result) {
    goto LABEL_2;
  }
  uint64_t v13 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v13 || *(_DWORD *)(v13 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_21;
  }
  int v15 = *(const audit_token_t **)(v4 + 28);
  mach_port_t v16 = *(_DWORD *)(v4 + 44);
  int v17 = *(_DWORD *)(v10 + 348);
  int v18 = *(_DWORD *)(v10 + 352);
  double v19 = *(double *)(v10 + 356);
  mach_vm_size_t v20 = *(CA::Mat4Impl **)(v4 + 56);
  unsigned int v21 = *(_DWORD *)(v10 + 368);
  long long v22 = *(_OWORD *)(v13 + 36);
  v23[0] = *(_OWORD *)(v13 + 20);
  v23[1] = v22;
  uint64_t result = CASRenderDisplayContextListSurface((const char *)(v4 + 88), v15, v9, v16, v17, v18, v20, v11, v19, v21, (unint64_t *)(a2 + 36), (CA::Render::Server *)v23);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v14 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v14;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_22:
  *(void *)(a2 + 24) = v14;
  return result;
}

uint64_t _XRenderDisplayLayerShmem(uint64_t result, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v5 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v6 = *(unsigned int *)(result + 4);
  if (v6 < 0xFC || v6 > 0x1FC) {
    goto LABEL_3;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v3 = -300;
    goto LABEL_3;
  }
  unsigned int v7 = *(_DWORD *)(result + 52);
  if (v7 > 0x100) {
    goto LABEL_2;
  }
  int v3 = -304;
  if ((int)v6 - 252 < v7) {
    goto LABEL_3;
  }
  unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
  if (v6 != v8 + 252) {
    goto LABEL_3;
  }
  uint64_t v9 = 312;
  if (*(unsigned int *)(result + 4) < 0x138uLL) {
    uint64_t v9 = *(unsigned int *)(result + 4);
  }
  uint64_t result = (uint64_t)memchr((void *)(result + 56), 0, v9 - 56);
  if (!result)
  {
LABEL_2:
    int v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_4;
  }
  uint64_t v10 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v10 || *(_DWORD *)(v10 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_3;
  }
  unsigned int v11 = (CA::Render::Context *)*(unsigned int *)(v5 + v8 + 56);
  uint64_t v12 = *(void *)(v5 + v8 + 60);
  int v13 = *(_DWORD *)(v5 + v8 + 68);
  int v14 = *(_DWORD *)(v5 + v8 + 72);
  uint64_t v15 = *(void *)(v5 + v8 + 76);
  mem_entry_name_port_t v16 = *(_DWORD *)(v5 + 28);
  mach_vm_size_t v17 = *(void *)(v5 + v8 + 84);
  uint64_t v18 = *(void *)(v5 + v8 + 100);
  int v19 = *(_DWORD *)(v5 + v8 + 108);
  double v20 = *(double *)(v5 + v8 + 112);
  unsigned int v21 = *(_DWORD *)(v5 + v8 + 248);
  long long v22 = *(_OWORD *)(v10 + 36);
  v23[0] = *(_OWORD *)(v10 + 20);
  v23[1] = v22;
  uint64_t result = CASRenderDisplayLayerShmem((const char *)(v5 + 56), v11, v12, v13, v14, v15, v16, v17, v20, v18, SHIDWORD(v18), v19, (CA::Mat4Impl *)(v5 + v8 + 120), v21, (unint64_t *)(a2 + 36), (CA::Render::Server *)v23);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XRenderDisplayLayerSurface(uint64_t result, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v5 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v6 = *(unsigned int *)(result + 4);
  if (v6 < 0xD8 || v6 > 0x1D8) {
    goto LABEL_3;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v3 = -300;
    goto LABEL_3;
  }
  unsigned int v7 = *(_DWORD *)(result + 52);
  if (v7 > 0x100) {
    goto LABEL_2;
  }
  int v3 = -304;
  if ((int)v6 - 216 < v7) {
    goto LABEL_3;
  }
  unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
  if (v6 != v8 + 216) {
    goto LABEL_3;
  }
  uint64_t v9 = 312;
  if (*(unsigned int *)(result + 4) < 0x138uLL) {
    uint64_t v9 = *(unsigned int *)(result + 4);
  }
  uint64_t result = (uint64_t)memchr((void *)(result + 56), 0, v9 - 56);
  if (!result)
  {
LABEL_2:
    int v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_4;
  }
  uint64_t v10 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v10 || *(_DWORD *)(v10 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_3;
  }
  unsigned int v11 = (CA::Render::Context *)*(unsigned int *)(v5 + v8 + 56);
  uint64_t v12 = *(void *)(v5 + v8 + 60);
  mach_port_t v13 = *(_DWORD *)(v5 + 28);
  int v14 = *(_DWORD *)(v5 + v8 + 68);
  int v15 = *(_DWORD *)(v5 + v8 + 72);
  double v16 = *(double *)(v5 + v8 + 76);
  mach_vm_size_t v17 = (BOOL *)*(unsigned int *)(v5 + v8 + 212);
  long long v18 = *(_OWORD *)(v10 + 36);
  v19[0] = *(_OWORD *)(v10 + 20);
  v19[1] = v18;
  uint64_t result = CASRenderDisplayLayerSurface((const char *)(v5 + 56), v11, v12, v13, v14, v15, (CA::Mat4Impl *)(v5 + v8 + 84), v17, v16, (unint64_t *)(a2 + 36), (CA::Render::Server *)v19);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XRenderDisplayShmem(uint64_t result, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v5 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 2) {
    goto LABEL_3;
  }
  uint64_t v6 = *(unsigned int *)(result + 4);
  if (v6 < 0x108 || v6 > 0x208) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(unsigned __int16 *)(result + 54) << 16 != 1114112) {
    goto LABEL_21;
  }
  unsigned int v7 = *(_DWORD *)(result + 68);
  if (v7 > 0x100)
  {
LABEL_2:
    int v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_4;
  }
  int v3 = -304;
  if ((int)v6 - 264 < v7) {
    goto LABEL_3;
  }
  unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
  if (v6 != v8 + 264) {
    goto LABEL_3;
  }
  uint64_t v9 = result + v8;
  uint64_t v10 = (unsigned int *)(*(_DWORD *)(result + 40) >> 2);
  if (v10 != *(_DWORD *)(v9 + 72))
  {
LABEL_21:
    int v3 = -300;
    goto LABEL_3;
  }
  uint64_t v11 = 328;
  if (*(unsigned int *)(result + 4) < 0x148uLL) {
    uint64_t v11 = *(unsigned int *)(result + 4);
  }
  uint64_t result = (uint64_t)memchr((void *)(result + 72), 0, v11 - 72);
  if (!result) {
    goto LABEL_2;
  }
  uint64_t v12 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v12 || *(_DWORD *)(v12 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_3;
  }
  mach_port_t v13 = *(_anonymous_namespace_ **)(v5 + 28);
  int v14 = *(_DWORD *)(v9 + 76);
  int v15 = *(_DWORD *)(v9 + 80);
  uint64_t v16 = *(void *)(v9 + 84);
  mem_entry_name_port_t v17 = *(_DWORD *)(v5 + 44);
  mach_vm_size_t v18 = *(void *)(v9 + 92);
  uint64_t v19 = *(void *)(v9 + 108);
  int v20 = *(_DWORD *)(v9 + 116);
  double v21 = *(double *)(v9 + 120);
  int v22 = *(_DWORD *)(v9 + 256);
  unsigned int v23 = *(_DWORD *)(v9 + 260);
  long long v24 = *(_OWORD *)(v12 + 36);
  v25[0] = *(_OWORD *)(v12 + 20);
  v25[1] = v24;
  uint64_t result = CASRenderDisplayShmem((const char *)(v5 + 72), v13, v10, v14, v15, v16, v17, v18, v21, v19, SHIDWORD(v19), v20, (CA::Mat4Impl *)(v9 + 128), v22, v23, (unint64_t *)(a2 + 36), (CA::Render::Server *)v25);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XRenderDisplaySurface(uint64_t result, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v5 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 2) {
    goto LABEL_3;
  }
  uint64_t v6 = *(unsigned int *)(result + 4);
  if (v6 < 0xE8 || v6 > 0x1E8) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(unsigned __int16 *)(result + 54) << 16 != 1114112) {
    goto LABEL_21;
  }
  unsigned int v7 = *(_DWORD *)(result + 68);
  if (v7 > 0x100)
  {
LABEL_2:
    int v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_4;
  }
  int v3 = -304;
  if ((int)v6 - 232 < v7) {
    goto LABEL_3;
  }
  unsigned int v8 = (v7 + 3) & 0xFFFFFFFC;
  if (v6 != v8 + 232) {
    goto LABEL_3;
  }
  uint64_t v9 = result + v8;
  uint64_t v10 = (unsigned int *)(*(_DWORD *)(result + 40) >> 2);
  if (v10 != *(_DWORD *)(v9 + 72))
  {
LABEL_21:
    int v3 = -300;
    goto LABEL_3;
  }
  uint64_t v11 = 328;
  if (*(unsigned int *)(result + 4) < 0x148uLL) {
    uint64_t v11 = *(unsigned int *)(result + 4);
  }
  uint64_t result = (uint64_t)memchr((void *)(result + 72), 0, v11 - 72);
  if (!result) {
    goto LABEL_2;
  }
  uint64_t v12 = ((v6 + 3) & 0x1FFFFFFFCLL) + v5;
  if (*(_DWORD *)v12 || *(_DWORD *)(v12 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_3;
  }
  mach_port_t v13 = *(_anonymous_namespace_ **)(v5 + 28);
  mach_port_t v14 = *(_DWORD *)(v5 + 44);
  int v15 = *(_DWORD *)(v9 + 76);
  int v16 = *(_DWORD *)(v9 + 80);
  int v17 = *(_DWORD *)(v9 + 84);
  double v18 = *(double *)(v9 + 88);
  int v19 = *(_DWORD *)(v9 + 224);
  unsigned int v20 = *(_DWORD *)(v9 + 228);
  long long v21 = *(_OWORD *)(v12 + 36);
  v22[0] = *(_OWORD *)(v12 + 20);
  v22[1] = v21;
  uint64_t result = CASRenderDisplaySurface((const char *)(v5 + 72), v13, v10, v14, v15, v16, v17, (CA::Mat4Impl *)(v9 + 96), v18, v19, v20, (unint64_t *)(a2 + 36), (CA::Render::Server *)v22);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_4:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XHitTestContext(uint64_t result, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  uint64_t v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  long long v5 = *(_OWORD *)(result + 84);
  v9[0] = *(_OWORD *)(result + 68);
  v9[1] = v5;
  *(_DWORD *)(a2 + 36) = 0;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v9, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v9, v6), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  unsigned int v7 = (atomic_uint *)result;
  unsigned int v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(_DWORD *)(a2 + 36) = CA::Render::Context::hit_test_context((uint64_t)v7);
  uint64_t result = pthread_mutex_unlock(v8);
  if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
  }
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

void _XSetEDRHeadroom(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    long long v5 = (CA::Render::Context *)*(unsigned int *)(a1 + 12);
    float v6 = *(float *)(a1 + 32);
    long long v7 = *(_OWORD *)(a1 + 72);
    v12[0] = *(_OWORD *)(a1 + 56);
    v12[1] = v7;
    if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2) & 0x80) != 0
      || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v8) & 0x20000) != 0)
    {
      int v3 = -81182719;
    }
    else
    {
      uint64_t v9 = (CA::Render::Context *)CA::Render::Context::context_by_server_port(v5);
      if (v9)
      {
        unint64_t v10 = (unint64_t)v9;
        CA::Render::Context::will_commit(v9);
        float v11 = *(float *)(v10 + 308);
        *(float *)(v10 + 308) = v6;
        CA::Render::Context::did_commit(v10, v11 != v6, 0, 1, 0, 0);
        int v3 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) == 1)
        {
          (*(void (**)(unint64_t))(*(void *)v10 + 16))(v10);
          int v3 = 0;
        }
      }
      else
      {
        int v3 = 56;
      }
    }
  }
  uint64_t v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
}

uint64_t _XGetEDRHeadroom(uint64_t result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 24) || *(_DWORD *)(result + 28) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  uint64_t v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  long long v5 = *(_OWORD *)(result + 60);
  v10[0] = *(_OWORD *)(result + 44);
  v10[1] = v5;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v6), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  long long v7 = (atomic_uint *)result;
  unsigned int v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  atomic_uint v9 = v7[77];
  uint64_t result = pthread_mutex_unlock(v8);
  *(_DWORD *)(a2 + 36) = v9;
  if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
  }
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XSetSecure(uint64_t result, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    long long v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
    int v6 = *(_DWORD *)(result + 32);
    long long v7 = *(_OWORD *)(result + 72);
    v12[0] = *(_OWORD *)(result + 56);
    v12[1] = v7;
    uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, (const audit_token_t *)a2);
    if ((result & 4) != 0)
    {
      uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v8);
      if ((result & 0x80) != 0
        || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v12, v9), (result & 0x20000) != 0))
      {
        int v3 = -81182719;
      }
      else
      {
        uint64_t result = CA::Render::Context::context_by_server_port(v5);
        if (result)
        {
          uint64_t v10 = result;
          uint64_t v11 = (pthread_mutex_t *)(result + 72);
          pthread_mutex_lock((pthread_mutex_t *)(result + 72));
          *(_WORD *)(v10 + 552) = *(_WORD *)(v10 + 552) & 0xFFFB | (4 * (v6 != 0));
          uint64_t result = pthread_mutex_unlock(v11);
          if (atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) == 1) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          }
          int v3 = 0;
        }
        else
        {
          int v3 = 56;
        }
      }
    }
    else
    {
      int v3 = 53;
    }
  }
  uint64_t v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XGetSecure(uint64_t result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 24) || *(_DWORD *)(result + 28) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  uint64_t v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  long long v5 = *(_OWORD *)(result + 60);
  v10[0] = *(_OWORD *)(result + 44);
  v10[1] = v5;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v6), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  uint64_t v7 = result;
  unsigned int v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  unsigned int v9 = *(unsigned __int16 *)(v7 + 552);
  uint64_t result = pthread_mutex_unlock(v8);
  *(_DWORD *)(a2 + 36) = (v9 >> 2) & 1;
  if (atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XSetColormatchUntaggedContent(uint64_t result, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    long long v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
    int v6 = *(_DWORD *)(result + 32);
    long long v7 = *(_OWORD *)(result + 72);
    v11[0] = *(_OWORD *)(result + 56);
    v11[1] = v7;
    uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, (const audit_token_t *)a2);
    if ((result & 0x80) != 0
      || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v11, v8), (result & 0x20000) != 0))
    {
      int v3 = -81182719;
    }
    else
    {
      uint64_t result = CA::Render::Context::context_by_server_port(v5);
      if (result)
      {
        uint64_t v9 = result;
        uint64_t v10 = (pthread_mutex_t *)(result + 72);
        pthread_mutex_lock((pthread_mutex_t *)(result + 72));
        *(_WORD *)(v9 + 552) = *(_WORD *)(v9 + 552) & 0xFFFD | (2 * (v6 != 0));
        uint64_t result = pthread_mutex_unlock(v10);
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF) == 1) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        int v3 = 0;
      }
      else
      {
        int v3 = 56;
      }
    }
  }
  uint64_t v4 = (void *)MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *v4;
  return result;
}

uint64_t _XGetColormatchUntaggedContent(uint64_t result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 24) || *(_DWORD *)(result + 28) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  uint64_t v4 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  long long v5 = *(_OWORD *)(result + 60);
  v10[0] = *(_OWORD *)(result + 44);
  v10[1] = v5;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v6), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_server_port(v4);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  uint64_t v7 = result;
  unsigned int v8 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  unsigned int v9 = *(unsigned __int16 *)(v7 + 552);
  uint64_t result = pthread_mutex_unlock(v8);
  *(_DWORD *)(a2 + 36) = (v9 >> 1) & 1;
  if (atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XCreateImageSlot(uint64_t result, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_8;
  }
  long long v5 = (CA::Render::Context *)*(unsigned int *)(result + 12);
  int v6 = (CA::Render *)*(unsigned int *)(result + 32);
  unsigned int v7 = *(_DWORD *)(result + 36);
  int v9 = *(_DWORD *)(result + 40);
  int v8 = *(_DWORD *)(result + 44);
  long long v10 = *(_OWORD *)(result + 84);
  v16[0] = *(_OWORD *)(result + 68);
  v16[1] = v10;
  *(_DWORD *)(a2 + 36) = 0;
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v16, (const audit_token_t *)a2);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v16, v11), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_server_port(v5);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  uint64_t v12 = (atomic_uint *)result;
  uint64_t v13 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(_DWORD *)(a2 + 36) = CA::Render::Context::new_image_slot((CA::Render::Context *)v12, v6, v7, v9 != 0, v8 != 0);
  uint64_t result = pthread_mutex_unlock(v13);
  int v14 = *(_DWORD *)(a2 + 36);
  if (v14) {
    int v15 = 0;
  }
  else {
    int v15 = 5;
  }
  if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
  }
  *(_DWORD *)(a2 + 32) = v15;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (v14)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(void *)(a2 + 24) = v4;
  return result;
}

void _XRemoveContextFromFences(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 24)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 24) || *(_DWORD *)(a1 + 28) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  uint64_t v4 = (CA::Render::Context *)*(unsigned int *)(a1 + 12);
  long long v5 = *(_OWORD *)(a1 + 60);
  v10[0] = *(_OWORD *)(a1 + 44);
  v10[1] = v5;
  if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, (const audit_token_t *)a2) & 0x80) != 0
    || (CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)v10, v6) & 0x20000) != 0)
  {
    int v9 = -81182719;
  }
  else
  {
    unsigned int v7 = (CA::Render::Fence *)CA::Render::Context::context_by_server_port(v4);
    if (v7)
    {
      int v8 = (atomic_uint *)v7;
      CA::Render::Fence::remove_context(v7, 0);
      int v9 = 0;
      if (atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
        int v9 = 0;
      }
    }
    else
    {
      int v9 = 56;
    }
  }
  *(_DWORD *)(a2 + 32) = v9;
}

uint64_t _XGetClientProcessId(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 40)
  {
    int v4 = -304;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v4 = -300;
    goto LABEL_9;
  }
  uint64_t v3 = result + 40;
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    int v4 = -309;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v4;
    uint64_t v5 = *MEMORY[0x1E4F14068];
    goto LABEL_10;
  }
  int v6 = (CA::Render::Context *)*(unsigned int *)(result + 28);
  long long v7 = *(_OWORD *)(v3 + 36);
  v8[0] = *(_OWORD *)(v3 + 20);
  v8[1] = v7;
  uint64_t result = CASGetClientProcessId(v6, (audit_token_t *)(a2 + 36), (CA::Render::Server *)v8);
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v5 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t _XGetClientPort(uint64_t result, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    int v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  *(void *)(a2 + 32) = 0x13000000000000;
  int v4 = (CA::Render::Context *)*(unsigned int *)(result + 32);
  long long v5 = *(_OWORD *)(result + 72);
  long long v10 = *(_OWORD *)(result + 56);
  long long v11 = v5;
  *(_DWORD *)(a2 + 28) = 0;
  if (DWORD1(v11) != getpid())
  {
    uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v10, v6);
    if ((result & 0x20) == 0)
    {
      int v3 = 53;
      goto LABEL_7;
    }
  }
  uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v10, v6);
  if ((result & 0x80) != 0
    || (uint64_t result = CA::Render::Server::audit_token_cache_lookup((CA::Render::Server *)&v10, v7), (result & 0x20000) != 0))
  {
    int v3 = -81182719;
    goto LABEL_7;
  }
  uint64_t result = CA::Render::Context::context_by_id(v4);
  if (!result)
  {
    int v3 = 56;
    goto LABEL_7;
  }
  int v8 = (atomic_uint *)result;
  uint64_t v9 = (pthread_mutex_t *)(result + 72);
  pthread_mutex_lock((pthread_mutex_t *)(result + 72));
  *(_DWORD *)(a2 + 28) = v8[64];
  uint64_t result = pthread_mutex_unlock(v9);
  if (atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1) {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
  }
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 40;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XSetClientPorts(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 64)
  {
    int v2 = -304;
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(unsigned __int16 *)(result + 50) << 16 != 1114112
    || *(unsigned __int16 *)(result + 62) << 16 != 1114112)
  {
    int v2 = -300;
    goto LABEL_11;
  }
  if (*(_DWORD *)(result + 64) || *(_DWORD *)(result + 68) <= 0x1Fu)
  {
    int v2 = -309;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v2;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  *(_DWORD *)(a2 + 32) = 5;
  return result;
}

void _XPing(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    int v3 = -304;
  }
  else if (a1[6] || a1[7] < 0x20u)
  {
    int v3 = -309;
  }
  else
  {
    CA::Render::post_notification(0xCu, 0, 0, 0);
    int v3 = 0;
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

uint64_t (*CARenderServices_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 40291) >= 0xFFFFFFA5) {
    return CASCARenderServices_subsystem[5 * (v1 - 40200) + 5];
  }
  else {
    return 0;
  }
}

uint64_t _CACImageQueueDidChangeDisplay(mach_port_t a1, mach_msg_timeout_t timeout, int a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *MEMORY[0x1E4F14068];
  int v8 = a3;
  *(void *)&v6.msgh_bits = 19;
  v6.msgh_voucher_port = 0;
  v6.msgh_id = 40406;
  v6.msgh_remote_port = a1;
  v6.msgh_local_port = 0;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set(&v6);
  }
  uint64_t v4 = mach_msg(&v6, 17, 0x24u, 0, 0, timeout, 0);
  if ((v4 - 268435459) <= 1)
  {
    if ((v6.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], v6.msgh_local_port);
    }
    mach_msg_destroy(&v6);
  }
  return v4;
}

uint64_t _CACContentStreamSurfaceProduced(int a1, mach_msg_timeout_t timeout, int a3, long long *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[28] = a3;
  int v9 = 1245184;
  uint64_t v10 = *MEMORY[0x1E4F14068];
  long long v5 = a4[1];
  long long v11 = *a4;
  long long v12 = v5;
  long long v13 = a4[2];
  *(_DWORD *)int msg = -2147483629;
  *(_DWORD *)&msg[8] = a1;
  *(void *)&msg[20] = 0x100009DDBLL;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
  }
  uint64_t v6 = mach_msg((mach_msg_header_t *)msg, 17, 0x60u, 0, 0, timeout, 0);
  if ((v6 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v6;
}

void _CACDisplayDidChangeToState(mach_port_t a1, int a2, char a3, char a4, char a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *MEMORY[0x1E4F14068];
  int v7 = a2;
  char v8 = a3;
  __int16 v9 = 0;
  char v10 = 0;
  char v11 = a4;
  __int16 v12 = 0;
  char v13 = 0;
  char v14 = a5;
  __int16 v15 = 0;
  char v16 = 0;
  *(void *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 40412;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set(&msg);
  }
  if ((mach_msg(&msg, 17, 0x30u, 0, 0, 0, 0) - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }
}

uint64_t _XDisplayNotifyDisallowedLayersChange(uint64_t result, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(result + 32);
    uint64_t v4 = *(unsigned __int8 *)(result + 36);
    if (x_log_hook_p())
    {
      uint64_t v11 = v3;
      uint64_t v12 = v4;
      x_log_();
    }
    else
    {
      long long v5 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        int v14 = v3;
        __int16 v15 = 1024;
        int v16 = v4;
        _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "CADisplayNotifyDisallowedLayersChange display_id=%u, state=%d", buf, 0xEu);
      }
    }
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v6 = current_displays();
    uint64_t result = [v6 countByEnumeratingWithState:&v17 objects:buf count:16];
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = *(void *)v18;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v6);
          }
          char v10 = *(void **)(*((void *)&v17 + 1) + 8 * v9);
          if (objc_msgSend(v10, "displayId", v11, v12) == v3) {
            [v10 _notifyDisallowedLayersChange:v4 != 0];
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t result = [v6 countByEnumeratingWithState:&v17 objects:buf count:16];
        uint64_t v7 = result;
      }
      while (result);
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

void _XDisplayDidChangeToState(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 48)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 36);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 44);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v7 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        if (v4 > 0xB) {
          uint64_t v8 = "unknown";
        }
        else {
          uint64_t v8 = off_1E5273AC0[v4];
        }
        if ((v6 + 1) > 6u) {
          uint64_t v9 = "unknown";
        }
        else {
          uint64_t v9 = off_1E5273B20[(v6 + 1)];
        }
        *(_DWORD *)long long buf = 67109890;
        int v13 = v3;
        __int16 v14 = 2080;
        __int16 v15 = v8;
        __int16 v16 = 1024;
        int v17 = v5;
        __int16 v18 = 2080;
        long long v19 = v9;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "CADisplayDidChangeToState display_id=%u, state=%s, seed=%u, result=%s", buf, 0x22u);
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)&_controls_lock);
    char v10 = (id *)_controls;
    uint64_t v11 = qword_1E8F83BC8;
    while (v10 != (id *)v11)
    {
      if (*((_DWORD *)*v10 + 10) == v3) {
        [*v10 didChangeToState:v4 seed:v5 result:v6];
      }
      ++v10;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&_controls_lock);
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_184987C28(_Unwind_Exception *a1)
{
}

void _XContentStreamSurfaceProduced(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 96)
  {
    int v9 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v9;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112)
  {
    int v9 = -300;
    goto LABEL_10;
  }
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = *(unsigned int *)(a1 + 28);
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v11 = v5;
  long long v12 = *(_OWORD *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)&_all_streams_lock);
  uint64_t v6 = (id *)_all_streams;
  uint64_t v7 = qword_1E8F84E70;
  while (v6 != (id *)v7)
  {
    id v8 = *v6;
    if (objc_msgSend(*v6, "streamId", v10, v11, v12) == v3)
    {
      [v8 produceSurface:v4 withFrameInfo:&v10];
      break;
    }
    ++v6;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_all_streams_lock);
  if (v4) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v4);
  }
  *(_DWORD *)(a2 + 32) = 0;
}

void sub_184987D84(_Unwind_Exception *a1)
{
}

void _XGetArchivedLayerTree(uint64_t a1, uint64_t a2)
{
  mach_msg_return_t v12;
  mach_msg_header_t msg;
  long long v14;
  int Length;
  uint64_t v16;

  __int16 v16 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 52)
  {
    int v11 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v11;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return;
  }
  if (*(unsigned __int16 *)(a1 + 38) << 16 != 1179648)
  {
    int v11 = -300;
    goto LABEL_10;
  }
  mach_port_t v3 = *(_DWORD *)(a1 + 28);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 48);
    long long v5 = CA::Context::retain_context_with_client_port((CA::Context *)*(unsigned int *)(a1 + 12));
    if (v5)
    {
      uint64_t v6 = (CA::Context *)v5;
      uint64_t v7 = (objc_class *)CA::Context::retain_layer((CA::Context *)v5);
      if (v7)
      {
        id v8 = v7;
        char v9 = CAEncodeIOSurfacesAsCGImages;
        CAEncodeIOSurfacesAsCGImages = v4 & 1;
        CFDataRef v10 = (const __CFData *)CAEncodeLayerTreeWithInfo(v7, 0);
        CAEncodeIOSurfacesAsCGImages = v9;
        CFRelease(v8);
      }
      else
      {
        CFDataRef v10 = 0;
      }
      CA::Context::unref(v6, 0);
    }
    else
    {
      CFDataRef v10 = 0;
    }
    __int16 v14 = 0uLL;
    size_t Length = 0;
    *(void *)&msg.msgh_bits = 0x2C00000012;
    msg.msgh_remote_port = v3;
    msg.msgh_local_port = 0;
    msg.msgh_voucher_port = 0;
    msg.msgh_id = 1195461716;
    if (v10)
    {
      msg.msgh_bits = -2147483630;
      LODWORD(v14) = 1;
      *(void *)((char *)&v14 + 4) = CFDataGetBytePtr(v10);
      HIDWORD(v14) = 16777472;
      size_t Length = CFDataGetLength(v10);
    }
    long long v12 = mach_msg(&msg, 1, 0x2Cu, 0, 0, 0, 0);
    if ((v12 - 268435459) <= 1) {
      mach_msg_destroy(&msg);
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  else
  {
    long long v12 = 0;
  }
  *(_DWORD *)(a2 + 32) = v12;
}

void _XImageProviderSignal(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  }
  else
  {
    CAImageProviderSignal(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void _XTransactionDidPresent(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 68)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  }
  else
  {
    unsigned int v3 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    if (initialized != -1) {
      dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
    }
    if (BYTE9(xmmword_1EB2ACC10)) {
      kdebug_trace();
    }
    if (CACTransactionDidPresent::max_seed < v3)
    {
      CACTransactionDidPresent::max_seed = v3;
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::presentation_handler_lock);
      if (CA::Transaction::presentation_handler) {
        long long v5 = _Block_copy((const void *)CA::Transaction::presentation_handler);
      }
      else {
        long long v5 = 0;
      }
      if (CA::Transaction::presentation_handler_queue) {
        uint64_t v6 = CA::Transaction::presentation_handler_queue;
      }
      else {
        uint64_t v6 = MEMORY[0x1E4F14428];
      }
      dispatch_retain(v6);
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Transaction::presentation_handler_lock);
      if (v5)
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 3221225472;
        _OWORD v7[2] = ___Z23CATransactionDidPresentjjdyyh_block_invoke;
        v7[3] = &unk_1E527FF00;
        void v7[4] = v5;
        unsigned int v8 = v3;
        double v7[5] = v4;
        dispatch_async(v6, v7);
        _Block_release(v5);
      }
      dispatch_release(v6);
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
}

void sub_1849881B4(_Unwind_Exception *a1)
{
}

void _XImageQueueDidChangeDisplay(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  }
  else
  {
    int v3 = a1[8];
    pthread_mutex_lock(&display_change_mutex);
    uint64_t v4 = (CFTypeRef *)display_change_list;
    if (display_change_list)
    {
      while (1)
      {
        long long v5 = (void *)*v4;
        if (*((_DWORD *)*v4 + 7) == v3) {
          break;
        }
        uint64_t v4 = (CFTypeRef *)v4[1];
        if (!v4) {
          goto LABEL_6;
        }
      }
      CFRetain(*v4);
      pthread_mutex_unlock(&display_change_mutex);
      if (CA::MachPortUtil::reply_queue(void)::once != -1) {
        dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_9866);
      }
      dispatch_async_f((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, v5, (dispatch_function_t)invoke_display_change_callback);
    }
    else
    {
LABEL_6:
      pthread_mutex_unlock(&display_change_mutex);
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
}

_DWORD *_XSetContextGPURegistryID(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  }
  else
  {
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t (*CARenderClient_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 40414) >= 0xFFFFFFF2) {
    return CACCARenderClient_subsystem[5 * (v1 - 40400) + 5];
  }
  else {
    return 0;
  }
}

__CFString *atomDescription(unsigned int a1)
{
  uint64_t result = CAAtomGetString(a1);
  if (result)
  {
    return (__CFString *)CFRetain(result);
  }
  return result;
}

uint64_t BMEnrollIntoBlockMonitoring()
{
  return MEMORY[0x1F410CFA8]();
}

uint64_t BMMonitorBlockExecutionWithSignature()
{
  return MEMORY[0x1F410CFB0]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7240](alloc, str, attributes);
}

CFTypeID CFAttributedStringGetTypeID(void)
{
  return MEMORY[0x1F40D72A8]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7578](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7708](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7730](alloc, theRange.location, theRange.length);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1F40D78E0](allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7C60](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C68](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7EC0](keysToFetch, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x1F40D80A0](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1F40D80D8](allocator, activities, repeats, order, callout, context);
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
}