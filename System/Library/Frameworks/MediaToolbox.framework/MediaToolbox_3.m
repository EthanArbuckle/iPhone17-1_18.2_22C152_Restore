uint64_t playerfig_updatePlaybackStateAndBossRate(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t DerivedStorage;
  float v7;
  unsigned int PlaythroughPrediction;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  NSObject *v11;
  float v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E4F143B8];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v13 = 0;
  v12 = 0.0;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (!*(unsigned char *)(DerivedStorage + 57)) {
    a3 |= 2u;
  }
  v7 = 0.0;
  if (*(_DWORD *)(DerivedStorage + 52) == 4) {
    v7 = *(float *)(DerivedStorage + 48);
  }
  PlaythroughPrediction = itemfig_getPlaythroughPrediction(*(void *)(DerivedStorage + 512));
  if (playerfig_getNextPlaybackState((uint64_t)a1, *(float *)(DerivedStorage + 48), a2, *(_DWORD *)(DerivedStorage + 52), 0, *(void *)(DerivedStorage + 512) != 0, *(unsigned __int8 *)(DerivedStorage + 56), a3, PlaythroughPrediction, &v14, (unsigned char *)(DerivedStorage + 56), &v13, &v12))return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496)); {
  if (playerfig_enterPlaybackState((uint64_t)a1, v14))
  }
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  if (v13)
  {
    result = playerfig_setBossRateWithFade(a1, a2, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v12, v7);
    if (result)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void itemfig_postSeekWasCanceledNotification(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  values = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage()
    && (CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr)) != 0)
    && (CFDictionaryRef v6 = CFDictionaryCreate(v5, (const void **)&kFigPlaybackItemParameter_SeekID, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    CFDictionaryRef v7 = v6;
    CMNotificationCenterGetDefaultLocalCenter();
    if (a4) {
      FigDispatchAsyncPostNotification();
    }
    else {
      CMNotificationCenterPostNotification();
    }
    if (dword_1E9350BF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
  if (values) {
    CFRelease(values);
  }
}

uint64_t playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems(uint64_t a1, CFIndex a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 504);
  if (v4) {
    CFIndex Count = CFArrayGetCount(v4);
  }
  else {
    CFIndex Count = 0;
  }
  if (Count <= a2) {
    return 0;
  }
  CFDictionaryRef v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), a2);
    if (a2 >= 1) {
      CFDictionaryRef v6 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), a2 - 1);
    }
    uint64_t result = itemfig_updateStartHostTimeEstimate(ValueAtIndex, v6);
    if (result) {
      break;
    }
    if (Count == ++a2) {
      return 0;
    }
  }
  return result;
}

void itemfig_vendAccessLogWhenItemStopsBeingCurrent(uint64_t a1)
{
  cf[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = 7;
  }
  itemfig_reportingAgentReportRateChanged(a1, 0.0);
  if (*(unsigned char *)(DerivedStorage + 1697))
  {
    v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      CFArrayRef v4 = v3;
      itemfig_commitAccessLogEntry(v3, a1);
      if (*(unsigned char *)(DerivedStorage + 1241))
      {
        CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 1512);
        if (v5)
        {
          if (CFArrayGetCount(v5) >= 1)
          {
            cf[0] = 0;
            if (!FigPlaybackItemLogCreateW3CLogData(*(const __CFArray **)(DerivedStorage + 1512), (__CFString **)cf))
            {
              CFStringRef v6 = (const __CFString *)cf[0];
              double Current = CFAbsoluteTimeGetCurrent();
              if (v6)
              {
                double v8 = Current;
                v23 = v4;
                CFIndex Length = CFStringGetLength(v6);
                CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
                theArray = Mutable;
                if (Length > 799)
                {
                  CFIndex v12 = 0;
                  unint64_t v13 = (Length + 799) / 0x320uLL;
                  unint64_t v14 = 1;
                  do
                  {
                    if ((unint64_t)Length >= 0x320) {
                      CFIndex v15 = 800;
                    }
                    else {
                      CFIndex v15 = Length;
                    }
                    v26.location = v12;
                    v26.length = v15;
                    CFStringRef v16 = CFStringCreateWithSubstring(v10, v6, v26);
                    if (v16)
                    {
                      CFStringRef v17 = v16;
                      CFStringRef v18 = CFStringCreateWithFormat(v10, 0, @"[%.3f: %d/%d] %@", *(void *)&v8, v14, v13, v16);
                      CFRelease(v17);
                      if (v18)
                      {
                        CFArrayAppendValue(theArray, v18);
                        CFRelease(v18);
                      }
                    }
                    if (v14 >= v13) {
                      break;
                    }
                    v12 += v15;
                    ++v14;
                    BOOL v19 = Length <= v15;
                    Length -= v15;
                  }
                  while (!v19);
                }
                else
                {
                  CFArrayAppendValue(Mutable, v6);
                }
                CFArrayRef v4 = v23;
                if (theArray)
                {
                  CFArrayRef v20 = (const __CFArray *)CFRetain(theArray);
                  CFRelease(theArray);
                  if (v20)
                  {
                    if (CFArrayGetCount(v20) >= 1)
                    {
                      CFIndex v21 = 0;
                      do
                      {
                        CFArrayGetValueAtIndex(v20, v21);
                        if (dword_1E9350BF0)
                        {
                          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        ++v21;
                      }
                      while (v21 < CFArrayGetCount(v20));
                    }
                    CFRelease(v20);
                  }
                }
              }
              CFRelease(cf[0]);
            }
          }
        }
      }
      CFRelease(v4);
    }
  }
}

void itemfig_removeAllImageQueues(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    CFArrayRef v4 = (const void *)v3;
    uint64_t v5 = *(void *)(DerivedStorage + 1104);
    if (*(uint64_t *)(CMBaseObjectGetDerivedStorage() + 216) < 1)
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
      CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 1112);
      if (v6) {
        *(void *)(DerivedStorage + 1112) = 0;
      }
      CFDictionaryRef v7 = *(const void **)(DerivedStorage + 1104);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(DerivedStorage + 1104) = 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
      if (v6)
      {
        FPSupport_DeleteCASlotsInArray(v6);
        CFRelease(v6);
      }
    }
    else
    {
      itemfig_stashTransitionImageQueuesAndSlots();
    }
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 648);
    if (v8)
    {
      CFIndex Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        for (CFIndex i = 0; i != v10; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
          itemfig_clearTrackImageQueueTable(a1, (uint64_t)ValueAtIndex);
        }
      }
    }
    itemfig_handleReadyToDisplayVideoLatch(a1, 1, 0);
    if (v5)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    CFRelease(v4);
  }
}

void playerfig_freeTransitionImageQueueAndSlot()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](DerivedStorage[62]);
  CFArrayRef v1 = (const __CFArray *)DerivedStorage[104];
  if (v1)
  {
    FPSupport_DeleteCASlotsInArray(v1);
    v2 = (const void *)DerivedStorage[104];
    if (v2)
    {
      CFRelease(v2);
      DerivedStorage[104] = 0;
    }
  }
  uint64_t v3 = (const void *)DerivedStorage[103];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[103] = 0;
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t playerfig_clearVideoLayers(const __CFArray *a1, char a2, CFTypeRef a3)
{
  CFTypeRef cf = 0;
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (!a1 || CFArrayGetCount(a1) < 1) {
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_6:
    FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(a3, a1, a2, (uint64_t)"playerfig_clearVideoLayers");
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
  if (!v7)
  {
    a3 = cf;
    goto LABEL_6;
  }
  uint64_t v8 = v7;
LABEL_8:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

void playeritemfig_releaseVideoCompositionObjects(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 816);
  if (v3) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 352);
  if (v5) {
    FigPlaybackBossSetVideoCompositionProcessor(v5, 0);
  }
  itemfig_removeImageQueueListenersForObsoleteImageQueues(a1, *(const __CFArray **)(DerivedStorage + 816), 0);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 816), i);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      CFIndex v10 = *(void (**)(const void *, void, void))(v9 + 8);
      if (v10) {
        v10(ValueAtIndex, 0, 0);
      }
    }
  }
  if (*(void *)(DerivedStorage + 808))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigVideoCompositionProcessorInvalidate(*(void *)(DerivedStorage + 808));
    uint64_t v11 = *(const void **)(DerivedStorage + 808);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 808) = 0;
    }
  }
  CFIndex v12 = *(const void **)(DerivedStorage + 816);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 816) = 0;
  }
  FigImageQueueTableRemoveAllValues(*(void *)(DerivedStorage + 824));
  unint64_t v13 = *(const void **)(DerivedStorage + 824);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 824) = 0;
  }
}

void itemfig_ExternalProtectionStatusChangedGuts(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CFIndex v10 = v3;
  if (*DerivedStorage) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v3 == 0;
  }
  if (v11)
  {
    if (!v3) {
      return;
    }
  }
  else
  {
    NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v3, a1, v4, v5, v6, v7, v8, v9, @"ExternalProtectionStatus", 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
  }

  CFRelease(v10);
}

void itemfig_clearCoordinatedPlaybackSynchronizationTimebase()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 344))
  {
    uint64_t v1 = DerivedStorage;
    v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (dword_1E9350BF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v2) {
      CFRelease(v2);
    }
    int v4 = *(const void **)(v1 + 344);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v1 + 344) = 0;
    }
  }
}

void itemfig_releaseAIMEDataAndAllAIMEDataChannelResources()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFDictionaryGetCount())
  {
    CFArrayRef v1 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    if (v1)
    {
      CFArrayRef v2 = v1;
      if (CFArrayGetCount(v1) >= 1)
      {
        CFIndex v3 = 0;
        do
        {
          CFArrayGetValueAtIndex(v2, v3);
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
          ++v3;
        }
        while (v3 < CFArrayGetCount(v2));
      }
      CFRelease(v2);
    }
  }
  FigCFDictionaryRemoveAllValues();
  int v4 = *(const void **)(DerivedStorage + 1080);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 1080) = 0;
  }
}

__CFString *fp_copyPlayQueueDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v5);
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = v7;
      if (*(void *)(v7 + 488))
      {
        int v9 = (void *)CFStringCreateWithFormat(v1, 0, @", gapless transition %@", *(void *)(v7 + 488));
      }
      else
      {
        if (ValueAtIndex == *(const void **)(DerivedStorage + 512) || !*(unsigned char *)(v7 + 480)) {
          CFIndex v10 = &stru_1EE53F4B8;
        }
        else {
          CFIndex v10 = @", no gapless transition";
        }
        int v9 = (void *)CFRetain(v10);
      }
      BOOL v11 = v9;
      if (ValueAtIndex) {
        CFIndex v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      }
      else {
        CFIndex v12 = "";
      }
      ++v5;
      unint64_t v13 = " ";
      if (v5 >= v4) {
        unint64_t v13 = "";
      }
      CFStringAppendFormat(Mutable, 0, @"item %p %s (boss %p%@)%s", ValueAtIndex, v12, *(void *)(v8 + 352), v11, v13);
      if (v11) {
        CFRelease(v11);
      }
    }
    while (v4 != v5);
  }
  return Mutable;
}

void itemfig_unregisterPlayabilityMonitor()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemfig_unregisterPlayabilityMonitorNotification();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
  CFAllocatorRef v1 = *(void **)(DerivedStorage + 600);
  if (v1)
  {
    FigPlayabilityMonitorSetRenderPipelines(v1, 0, 0);
    FigPlayabilityMonitorSetPlaybackTimebase(*(void *)(DerivedStorage + 600), 0);
  }

  JUMPOUT(0x19970E2B0);
}

void itemfig_storeItemPerformanceDataIfGathering(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFArrayRef v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  BOOL IsPlayerPerformanceTraceEnabled = FPSupport_IsPlayerPerformanceTraceEnabled();
  if (v2)
  {
    if (!*(unsigned char *)DerivedStorage)
    {
      BOOL v5 = IsPlayerPerformanceTraceEnabled;
      if (!(*(unsigned __int8 *)(DerivedStorage + 812) | IsPlayerPerformanceTraceEnabled))
      {
LABEL_15:
        CFRelease(v2);
        return;
      }
      if (!*(unsigned char *)(DerivedStorage + 812)
        || *(void *)(DerivedStorage + 816)
        || (CFAllocatorRef v6 = CFGetAllocator(v2),
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]),
            (*(void *)(DerivedStorage + 816) = Mutable) != 0))
      {
        int v8 = itemfig_gatherItemPerformanceData(a1, 1, &value);
        int v9 = value;
        if (!v8 && value)
        {
          if (*(unsigned char *)(DerivedStorage + 812))
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 816), value);
            int v9 = value;
          }
          if (v5)
          {
            FPSupport_TracePlayerPerformanceDictionary((uint64_t)"File", v9);
            int v9 = value;
          }
        }
        if (v9) {
          CFRelease(v9);
        }
        goto LABEL_15;
      }
    }
    FigSignalErrorAt();
    goto LABEL_15;
  }

  FigSignalErrorAt();
}

void itemfig_ExternalProtectionStatusChanged(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFIndex v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    if (a2) {
      CFRetain(a2);
    }
    FigDeferNotificationToDispatchQueue();
    CFRelease(v3);
  }
}

uint64_t itemfig_updateStartHostTimeEstimate(const void *a1, const void *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (v5)
  {
    uint64_t v7 = v6;
    int v8 = (long long *)MEMORY[0x1E4F1F9F8];
    CMTimeValue v9 = *MEMORY[0x1E4F1F9F8];
    CMTimeValue v65 = *MEMORY[0x1E4F1F9F8];
    CMTimeScale v10 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
    CMTimeScale v66 = v10;
    CFArrayRef v11 = *(const __CFArray **)(v6 + 504);
    CFTypeRef v52 = v5;
    if (v11 && CFArrayGetCount(v11) >= 1 && CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 504), 0) == a1)
    {
      if (*(_DWORD *)(v7 + 52) || *(unsigned char *)(v7 + 59))
      {
        CMTimeValue v65 = v9;
        CMTimeScale v66 = v10;
        CMTimeFlags v15 = *((_DWORD *)v8 + 3);
        CMTimeEpoch v16 = *((void *)v8 + 2);
        goto LABEL_56;
      }
    }
    else if (*(unsigned char *)(DerivedStorage + 1))
    {
      if (!a2)
      {
        uint64_t v46 = FigSignalErrorAt();
LABEL_63:
        CFRelease(v5);
        return v46;
      }
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      CMTimeValue v63 = *MEMORY[0x1E4F1FA10];
      CMTimeFlags v15 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 12);
      CMTimeScale v64 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 8);
      CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
      long long v17 = *v8;
      *(_OWORD *)&v57.CMTimeValue value = *v8;
      CMTimeEpoch v18 = *((void *)v8 + 2);
      v57.CMTimeEpoch epoch = v18;
      if (!v13) {
        goto LABEL_55;
      }
      uint64_t v19 = v14;
      long long v48 = v17;
      CFTypeRef cf = (CFTypeRef)v13;
      uint64_t v20 = *(unsigned int *)(v14 + 776);
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v14 + 504));
      if (FigPlaybackGetEffectiveActionAtEnd(v20, Count) || (float v22 = *(float *)(v19 + 48), v22 == 0.0))
      {
LABEL_54:
        CFRelease(cf);
LABEL_55:
        CMTimeValue v65 = v63;
        CMTimeScale v66 = v64;
LABEL_56:
        time1.CMTimeValue value = v65;
        time1.CMTimeScale timescale = v66;
        time1.CMTimeFlags flags = v15;
        time1.CMTimeEpoch epoch = v16;
        CMTime time2 = *(CMTime *)(DerivedStorage + 212);
        if (CMTimeCompare(&time1, &time2))
        {
          v44 = (_OWORD *)(DerivedStorage + 212);
          if ((v15 & 0x1D) != 1) {
            goto LABEL_60;
          }
          if ((*(_DWORD *)(DerivedStorage + 224) & 0x1D) != 1) {
            goto LABEL_60;
          }
          time1.CMTimeValue value = v65;
          time1.CMTimeScale timescale = v66;
          time1.CMTimeFlags flags = v15;
          time1.CMTimeEpoch epoch = v16;
          *(_OWORD *)&time2.CMTimeValue value = *v44;
          time2.CMTimeEpoch epoch = *(void *)(DerivedStorage + 228);
          CMTimeSubtract(&time, &time1, &time2);
          CMTimeAbsoluteValue(&v55, &time);
          CMTimeMake(&v53, 1, 2);
          if ((CMTimeCompare(&v55, &v53) & 0x80000000) == 0)
          {
LABEL_60:
            *(void *)v44 = v65;
            *(_DWORD *)(DerivedStorage + 220) = v66;
            *(_DWORD *)(DerivedStorage + 224) = v15;
            *(void *)(DerivedStorage + 228) = v16;
            uint64_t v45 = *(void *)(DerivedStorage + 632);
            if (v45)
            {
              time1.CMTimeValue value = v65;
              time1.CMTimeScale timescale = v66;
              time1.CMTimeFlags flags = v15;
              time1.CMTimeEpoch epoch = v16;
              FigNetworkUrgencyMonitorSetEstimatedStartTime(v45, (uint64_t)&time1);
            }
          }
        }
        uint64_t v46 = 0;
        BOOL v5 = v52;
        goto LABEL_63;
      }
      CMTimeValue value = *(void *)(v12 + 188);
      CMTimeFlags v23 = *(_DWORD *)(v12 + 200);
      CMTimeScale timescale = *(_DWORD *)(v12 + 196);
      CMTimeEpoch epoch = *(void *)(v12 + 204);
      if (v22 <= 0.0)
      {
        if (v22 < 0.0)
        {
          CMTimeFlags v28 = *(_DWORD *)(v12 + 176);
          if ((v28 & 0x1D) == 1)
          {
            v29 = (_OWORD *)(v12 + 164);
            if ((v23 & 0x1D) != 1) {
              goto LABEL_25;
            }
            *(_OWORD *)&time1.CMTimeValue value = *v29;
            time1.CMTimeEpoch epoch = *(void *)(v12 + 180);
            time2.CMTimeValue value = *(void *)(v12 + 188);
            time2.CMTimeScale timescale = *(_DWORD *)(v12 + 196);
            time2.CMTimeFlags flags = v23;
            time2.CMTimeEpoch epoch = epoch;
            int32_t v30 = CMTimeCompare(&time1, &time2);
            CMTimeFlags v28 = *(_DWORD *)(v12 + 176);
            if (v30 >= 1)
            {
LABEL_25:
              CMTimeValue value = *(void *)v29;
              CMTimeScale timescale = *(_DWORD *)(v12 + 172);
              CMTimeEpoch epoch = *(void *)(v12 + 180);
              CMTimeFlags v23 = v28;
            }
          }
          if ((v28 & 0x1D) != 1)
          {
            uint64_t v31 = MEMORY[0x1E4F1FA48];
            if ((v23 & 0x1D) != 1
              || (CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
                  time2.CMTimeValue value = value,
                  time2.CMTimeScale timescale = timescale,
                  time2.CMTimeFlags flags = v23,
                  time2.CMTimeEpoch epoch = epoch,
                  CMTimeCompare(&time1, &time2) >= 1))
            {
              CMTimeValue value = *(void *)v31;
              CMTimeFlags v23 = *(_DWORD *)(v31 + 12);
              CMTimeScale timescale = *(_DWORD *)(v31 + 8);
              CMTimeEpoch epoch = *(void *)(v31 + 16);
            }
          }
        }
        goto LABEL_30;
      }
      itemfig_getDurationIfReady((uint64_t)a2, (uint64_t)&v57);
      CMTimeFlags v24 = *(_DWORD *)(v12 + 152);
      if ((v24 & 0x1D) == 1)
      {
        v25 = (_OWORD *)(v12 + 140);
        if ((v23 & 0x1D) != 1) {
          goto LABEL_14;
        }
        *(_OWORD *)&time1.CMTimeValue value = *v25;
        time1.CMTimeEpoch epoch = *(void *)(v12 + 156);
        time2.CMTimeValue value = value;
        time2.CMTimeScale timescale = timescale;
        time2.CMTimeFlags flags = v23;
        time2.CMTimeEpoch epoch = epoch;
        int32_t v26 = CMTimeCompare(&time1, &time2);
        CMTimeFlags v24 = *(_DWORD *)(v12 + 152);
        if (v26 < 0)
        {
LABEL_14:
          CMTimeValue value = *(void *)v25;
          CMTimeScale timescale = *(_DWORD *)(v12 + 148);
          CMTimeEpoch epoch = *(void *)(v12 + 156);
          CMTimeFlags v23 = v24;
        }
      }
      if ((v24 & 0x1D) != 1)
      {
        CMTimeFlags flags = v57.flags;
        if ((v57.flags & 0x1D) == 1)
        {
          if ((v23 & 0x1D) == 1)
          {
            CMTime time1 = v57;
            time2.CMTimeValue value = value;
            time2.CMTimeScale timescale = timescale;
            time2.CMTimeFlags flags = v23;
            time2.CMTimeEpoch epoch = epoch;
            if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
              goto LABEL_30;
            }
            CMTimeFlags flags = v57.flags;
          }
          CMTimeValue value = v57.value;
          CMTimeScale timescale = v57.timescale;
          CMTimeEpoch epoch = v57.epoch;
          CMTimeFlags v23 = flags;
        }
      }
LABEL_30:
      if ((v23 & 0x1D) == 1)
      {
        uint64_t v32 = CMBaseObjectGetDerivedStorage();
        v33 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        uint64_t v34 = CMBaseObjectGetDerivedStorage();
        *(_OWORD *)&v56.CMTimeValue value = *MEMORY[0x1E4F1FA10];
        v56.CMTimeEpoch epoch = v16;
        if (v33)
        {
          uint64_t v35 = v34;
          CMTime time1 = *(CMTime *)(v32 + 212);
          *(_OWORD *)&time2.CMTimeValue value = v48;
          time2.CMTimeEpoch epoch = v18;
          *(_OWORD *)&v60.CMTimeValue value = v48;
          v60.CMTimeEpoch epoch = v18;
          float v36 = *(float *)(v34 + 48);
          if (v36 != 0.0 && *(_DWORD *)(v34 + 52) == 4)
          {
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            v39 = *(void (**)(const void *, CMTime *))(v38 + 32);
            if (v39) {
              v39(a2, &time2);
            }
            lhs.CMTimeValue value = value;
            lhs.CMTimeScale timescale = timescale;
            lhs.CMTimeFlags flags = v23;
            lhs.CMTimeEpoch epoch = epoch;
            CMTime rhs = time2;
            CMTimeSubtract(&v60, &lhs, &rhs);
            uint64_t v40 = *(void *)(v32 + 352);
            if (v40)
            {
              float Rate = FigPlaybackBossGetRate(v40);
              if (Rate != 0.0) {
                float v36 = Rate;
              }
            }
            CMTime rhs = v60;
            CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / v36);
            CMTime v60 = lhs;
            long long v51 = *MEMORY[0x1E4F1FA48];
            *(_OWORD *)&rhs.CMTimeValue value = *MEMORY[0x1E4F1FA48];
            CMTimeEpoch v42 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
            rhs.CMTimeEpoch epoch = v42;
            if (CMTimeCompare(&lhs, &rhs) < 0)
            {
              *(_OWORD *)&v60.CMTimeValue value = v51;
              v60.CMTimeEpoch epoch = v42;
            }
            if (CFArrayGetCount(*(CFArrayRef *)(v35 + 504)) >= 1
              && CFArrayGetValueAtIndex(*(CFArrayRef *)(v35 + 504), 0) == a2)
            {
              HostTimeClock = CMClockGetHostTimeClock();
              CMClockGetTime(&time1, HostTimeClock);
            }
            CMTime lhs = time1;
            CMTime rhs = v60;
            CMTimeAdd(&v56, &lhs, &rhs);
          }
          CFRelease(v33);
        }
        CMTimeValue v63 = v56.value;
        CMTimeFlags v15 = v56.flags;
        CMTimeScale v64 = v56.timescale;
        CMTimeEpoch v16 = v56.epoch;
      }
      goto LABEL_54;
    }
    CMTimeValue v65 = *MEMORY[0x1E4F1FA10];
    CMTimeFlags v15 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 12);
    CMTimeScale v66 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 8);
    CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    goto LABEL_56;
  }

  return FigSignalErrorAt();
}

void itemfig_unregisterPlayabilityMonitorNotification()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
  if (*(void *)(DerivedStorage + 600) && *(unsigned char *)(DerivedStorage + 608))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 608) = 0;
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t itemfig_UnlikelyToKeepUp(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
  *(_DWORD *)(DerivedStorage + 1424) = 1;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
  CFRetain(a2);

  return FigDeferNotificationToDispatchQueue();
}

uint64_t itemfig_BufferFull(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
  *(_DWORD *)(DerivedStorage + 1408) = 1;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
  CFRetain(a2);

  return FigDeferNotificationToDispatchQueue();
}

uint64_t itemfig_StallWarning(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
  *(_DWORD *)(DerivedStorage + 1408) = 0;
  *(_DWORD *)(DerivedStorage + 1424) = 1;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
  CFRetain(a2);

  return FigDeferNotificationToDispatchQueue();
}

void itemfig_DeferredUnlikelyToKeepUp(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  int v8 = *(const void **)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
  uint64_t v10 = *(void *)(DerivedStorage + 1904);
  if (v10)
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v12 + 8);
    if (v13) {
      v13(v10, 0x1EE582B78, 304, 0, 0);
    }
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 1896));
  uint64_t updated = playerfig_updatePlaybackStateAndBossRate(v8, 6, 0);

  itemfig_DeferredPostNotificationOnDispatchQueue(updated, a2, a3, v15, a5);
}

void itemfig_DeferredBufferFull(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t updated = playerfig_updatePlaybackStateAndBossRate(*(const void **)(DerivedStorage + 8), 5, 2u);

  itemfig_DeferredPostNotificationOnDispatchQueue(updated, a2, a3, v10, a5);
}

void itemfig_DeferredStallWarning(uint64_t a1, const void *a2)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    CFRelease(a2);
  }
  else
  {
    uint64_t v4 = DerivedStorage;
    BOOL v5 = *(const void **)(DerivedStorage + 8);
    CMBaseObjectGetDerivedStorage();
    if (dword_1E9350BF0)
    {
      LODWORD(v32) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v7 + 1896));
    uint64_t v8 = *(void *)(v7 + 1904);
    if (v8)
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32);
      if (v11) {
        v11(v8, 0x1EE582B78, 0x1EE583738, 1);
      }
      uint64_t v12 = *(void *)(v7 + 1904);
      if (v12)
      {
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v14 = v13 ? v13 : 0;
        uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v14 + 8);
        if (v15) {
          v15(v12, 0x1EE582B78, 303, 0, 0);
        }
      }
    }
    MEMORY[0x19970E930](*(void *)(v7 + 1896));
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    CFTypeRef v32 = 0;
    CMTimeValue value = @"unknown";
    long long v17 = (void *)MEMORY[0x1E4F1CF80];
    if (*(void *)(v16 + 128))
    {
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      float v22 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v20 + 48);
      if (v22)
      {
        v22(CMBaseObject, *MEMORY[0x1E4F1FB60], *v17, cf);
        if (cf[0])
        {
          CFTypeID v23 = CFGetTypeID(cf[0]);
          if (v23 == CFDictionaryGetTypeID()) {
            CFDictionaryGetValueIfPresent((CFDictionaryRef)cf[0], @"cs-iftype", (const void **)&value);
          }
        }
      }
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      int IsMemberOfClass = CMBaseObjectIsMemberOfClass();
    }
    else
    {
      int IsMemberOfClass = 0;
    }
    uint64_t v24 = *(void *)(v16 + 1216);
    if (v24
      && ((v25 = FigAssetGetCMBaseObject(v24), (uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v27 = 0)
        : (uint64_t v27 = v26),
          (CMTimeFlags v28 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v27 + 48)) != 0))
    {
      v28(v25, @"assetProperty_CreationOptionsDictionary", *v17, &v32);
      CFDictionaryRef v29 = (const __CFDictionary *)v32;
    }
    else
    {
      CFDictionaryRef v29 = 0;
    }
    if (IsMemberOfClass) {
      int v30 = 2;
    }
    else {
      int v30 = 1;
    }
    FPSupport_ReportStallToSymptomLog(v30, value, v29);
    if (v32) {
      CFRelease(v32);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 57)) {
      playerfig_updatePlaybackStateAndBossRate(v5, 4, 1u);
    }
    else {
      playerfig_pauseForInternalReason(v5, 4u);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    ++*(void *)(v4 + 1608);
    CFRelease(a2);
  }
}

void itemfig_DeferredPlayableRangeChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(*(const void **)(DerivedStorage + 8), (uint64_t)a2, v8, v9, v10, v11, v12, v13, @"PlayableTimeIntervals", 0);
  uint64_t v15 = NotificationPayloadForProperties;
  if (a5 && NotificationPayloadForProperties)
  {
    uint64_t v16 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v16 == CFDictionaryGetValue(a5, @"FPM_IsFilling")) {
      long long v17 = @"Filling";
    }
    else {
      long long v17 = @"Full";
    }
    CFDictionarySetValue(v15, @"CurrentBufferState", v17);
    CMNotificationCenterPostNotification();
  }
  else
  {
    CMNotificationCenterPostNotification();
    if (!v15) {
      goto LABEL_9;
    }
  }
  CFRelease(v15);
LABEL_9:

  CFRelease(a2);
}

uint64_t itemfig_gatherItemPerformanceData(const void *a1, int a2, void *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v79 = 0;
  memset(v78, 0, sizeof(v78));
  uint64_t v77 = 0;
  if (a3)
  {
    uint64_t v7 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *a3 = 0;
      uint64_t v8 = *(void *)(DerivedStorage + 352);
      v70 = a3;
      if (!v8) {
        goto LABEL_11;
      }
      int v9 = (CFTypeRef *)(DerivedStorage + 1704);
      int v10 = *(const void **)(DerivedStorage + 1704);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v7 + 1704) = 0;
        uint64_t v8 = *(void *)(v7 + 352);
      }
      CFAllocatorRef v11 = CFGetAllocator(a1);
      FigPlaybackBossCopyPerformanceDictionary(v8, v11, (CFMutableDictionaryRef *)(v7 + 1704));
      if (*v9)
      {
        *(void *)&v78[0] = CFRetain(*v9);
        uint64_t v12 = 1;
      }
      else
      {
LABEL_11:
        uint64_t v12 = 0;
      }
      uint64_t v14 = *(void *)(v7 + 808);
      if (v14)
      {
        uint64_t v15 = (CFTypeRef *)(v7 + 1712);
        uint64_t v16 = *(const void **)(v7 + 1712);
        if (v16)
        {
          CFRelease(v16);
          *(void *)(v7 + 1712) = 0;
          uint64_t v14 = *(void *)(v7 + 808);
        }
        CFAllocatorRef v17 = CFGetAllocator(a1);
        FigVideoCompositionProcessorCopyProperty(v14, @"VideoCompositionProcessor_PerformanceDictionary", (uint64_t)v17, (CFTypeRef *)(v7 + 1712));
        if (*v15) {
          *(void *)((unint64_t)v78 | (8 * v12++)) = CFRetain(*v15);
        }
      }
      MEMORY[0x19970E910](*(void *)(v7 + 640));
      uint64_t v18 = *(void *)(v7 + 648);
      MEMORY[0x19970E930](*(void *)(v7 + 640));
      uint64_t v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      if (v18)
      {
        theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v7 + 648));
        if (Count >= 1)
        {
          CFIndex v21 = Count;
          CFIndex v22 = 0;
          if (a2) {
            BOOL v23 = 1;
          }
          else {
            BOOL v23 = theArray == 0;
          }
          char v24 = v23;
          char v71 = v24;
          do
          {
            ValueAtIndex = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 648), v22);
            uint64_t v26 = ValueAtIndex;
            uint64_t v27 = *(void *)(v7 + 352);
            if (v27)
            {
              if (!*((void *)ValueAtIndex + 35))
              {
                if (*((unsigned char *)ValueAtIndex + 8))
                {
                  int v34 = *ValueAtIndex;
                  CFAllocatorRef v35 = CFGetAllocator(a1);
                  FigPlaybackBossCopyTrackPerformanceDictionary(v27, v34, v35);
                  if ((v71 & 1) == 0) {
                    CFArrayAppendValue(theArray, v26);
                  }
                }
              }
            }
            uint64_t v28 = *((void *)v26 + 2);
            if (v28)
            {
              CFDictionaryRef v29 = (const void *)*((void *)v26 + 36);
              if (v29)
              {
                CFRelease(v29);
                *((void *)v26 + 36) = 0;
                uint64_t v28 = *((void *)v26 + 2);
              }
              CFAllocatorRef v30 = CFGetAllocator(a1);
              uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v28);
              uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v32) {
                uint64_t v33 = v32;
              }
              else {
                uint64_t v33 = 0;
              }
              float v36 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, int *))(v33 + 48);
              if (v36) {
                v36(FigBaseObject, @"PerformanceDictionary", v30, v26 + 72);
              }
            }
            uint64_t v37 = *((void *)v26 + 31);
            if (v37)
            {
              *(void *)&long long v75 = 0;
              CMTimeValue value = 0;
              uint64_t v38 = (const void *)*((void *)v26 + 34);
              if (v38)
              {
                CFRelease(v38);
                *((void *)v26 + 34) = 0;
                uint64_t v37 = *((void *)v26 + 31);
              }
              CFAllocatorRef v39 = CFGetAllocator(a1);
              uint64_t v40 = FigRenderPipelineGetFigBaseObject(v37);
              uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v41) {
                uint64_t v42 = v41;
              }
              else {
                uint64_t v42 = 0;
              }
              v43 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, int *))(v42 + 48);
              if (v43) {
                v43(v40, @"PerformanceDictionary", v39, v26 + 68);
              }
              if (*((void *)v26 + 36))
              {
                CFAllocatorRef v44 = CFGetAllocator(a1);
                MutableCopy = CFDictionaryCreateMutableCopy(v44, 0, *((CFDictionaryRef *)v26 + 36));
                if (FigCFDictionaryGetValueIfPresent()
                  && FigCFDictionaryGetValueIfPresent())
                {
                  ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
                  CFDictionarySetValue(MutableCopy, @"ImageQueuePerformanceArray", ConcatenationOfTwoArrays);
                  v47 = (const void *)*((void *)v26 + 36);
                  *((void *)v26 + 36) = MutableCopy;
                  if (MutableCopy) {
                    CFRetain(MutableCopy);
                  }
                  if (v47) {
                    CFRelease(v47);
                  }
                  if (ConcatenationOfTwoArrays) {
                    CFRelease(ConcatenationOfTwoArrays);
                  }
                }
                if (MutableCopy) {
                  CFRelease(MutableCopy);
                }
              }
            }
            ++v22;
          }
          while (v21 != v22);
        }
        uint64_t v48 = CMBaseObjectGetDerivedStorage();
        CMTimeValue value = 0;
        v49 = (double *)MEMORY[0x1E4F1DB30];
        long long v73 = *MEMORY[0x1E4F1DB30];
        long long v75 = *MEMORY[0x1E4F1DB30];
        CFAllocatorRef v50 = CFGetAllocator(a1);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v50, 20, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable)
        {
          uint64_t v61 = FigSignalErrorAt();
          CFArrayRef v57 = theArray;
          if (!theArray) {
            goto LABEL_93;
          }
          goto LABEL_87;
        }
        CFTypeRef v52 = Mutable;
        CFAllocatorRef v53 = CFGetAllocator(a1);
        if (!playerfig_copyTrackPerformanceArray((uint64_t)a1, v53, 1986618469, (CFArrayRef *)&value))
        {
          v54 = value;
          if (value)
          {
            CFDictionarySetValue(v52, @"VideoTracks", value);
            CFRelease(v54);
            CMTimeValue value = 0;
          }
        }
        CFAllocatorRef v55 = CFGetAllocator(a1);
        if (!playerfig_copyTrackPerformanceArray((uint64_t)a1, v55, 1936684398, (CFArrayRef *)&value))
        {
          CMTime v56 = value;
          if (value)
          {
            CFDictionarySetValue(v52, @"AudioTracks", value);
            CFRelease(v56);
          }
        }
        if (*(unsigned char *)(v48 + 123) || *(unsigned char *)(v48 + 122))
        {
          long long v75 = *(_OWORD *)(v48 + 128);
        }
        else
        {
          uint64_t v69 = *(void *)(v48 + 592);
          if (v69)
          {
            CFTypeRef cf = 0;
            FigImageQueueTableCopyFigImageQueueArray(v69, (uint64_t *)&cf);
            if (FPSupport_GetMaxDisplaySizeFromImageQueues((const __CFArray *)cf, (double *)&v75)) {
              long long v75 = v73;
            }
            if (cf) {
              CFRelease(cf);
            }
          }
        }
        if (*(double *)&v75 != *v49 || *((double *)&v75 + 1) != v49[1]) {
          FigCFDictionarySetCGSize();
        }
        *((void *)v78 + v12++) = v52;
        CFArrayRef v57 = theArray;
        uint64_t v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      }
      else
      {
        CFArrayRef v57 = 0;
      }
      if (v12 > 0 || *(int *)(v7 + 1720) > 0 || *(unsigned char *)(v7 + 1724))
      {
        CFMutableDictionaryRef v58 = CFDictionaryCreateMutable(*v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetInt32();
        FigCFDictionarySetBoolean();
        *((void *)v78 + v12++) = v58;
      }
      if (v12 <= 0) {
        goto LABEL_85;
      }
      uint64_t v59 = 0;
      for (uint64_t i = 0; i != v12; v59 += CFDictionaryGetCount(*((CFDictionaryRef *)v78 + i++)))
        ;
      if (v59 < 1)
      {
LABEL_85:
        uint64_t v61 = 0;
      }
      else
      {
        CFGetAllocator(a1);
        uint64_t v61 = FigCFCreateCombinedDictionary();
        if (!v61)
        {
          void *v70 = v77;
          uint64_t v77 = 0;
          if (!v57) {
            goto LABEL_93;
          }
          goto LABEL_87;
        }
      }
      if (!v57)
      {
LABEL_93:
        if (v12 >= 1)
        {
          v67 = (const void **)v78;
          do
          {
            v68 = *v67++;
            CFRelease(v68);
            --v12;
          }
          while (v12);
        }
        return v61;
      }
LABEL_87:
      CFIndex v62 = CFArrayGetCount(v57);
      if (v62 >= 1)
      {
        CFIndex v63 = v62;
        for (CFIndex j = 0; j != v63; ++j)
        {
          CMTimeValue v65 = CFArrayGetValueAtIndex(v57, j);
          CMTimeScale v66 = (const void *)v65[35];
          if (v66)
          {
            CFRelease(v66);
            v65[35] = 0;
          }
        }
      }
      CFArrayRemoveAllValues(v57);
      CFRelease(v57);
      goto LABEL_93;
    }
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_copyTrackPerformanceArray(uint64_t a1, const __CFAllocator *a2, int a3, CFArrayRef *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 648);
  if (!v8) {
    goto LABEL_33;
  }
  CFIndex Count = CFArrayGetCount(v8);
  if (Count < 1)
  {
    uint64_t v14 = (const void **)malloc_type_calloc(0, 8uLL, 0x6004044C4A2DFuLL);
    if (v14) {
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  LODWORD(v12) = 0;
  do
  {
    if (*((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v11) + 1) == a3) {
      size_t v12 = (v12 + 1);
    }
    else {
      size_t v12 = v12;
    }
    ++v11;
  }
  while (v10 != v11);
  int v13 = (const void **)malloc_type_calloc(v12, 8uLL, 0x6004044C4A2DFuLL);
  if (!v13)
  {
LABEL_33:
    return FigSignalErrorAt();
  }
  uint64_t v14 = v13;
  CFIndex v15 = 0;
  int v16 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v15);
    if (ValueAtIndex[1] != a3) {
      goto LABEL_23;
    }
    memset(v25, 0, sizeof(v25));
    if (*((void *)ValueAtIndex + 35))
    {
      *(void *)&v25[0] = *((void *)ValueAtIndex + 35);
      uint64_t v18 = 1;
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *((void *)ValueAtIndex + 36);
    if (v19) {
      *(void *)((unint64_t)v25 | (8 * v18++)) = v19;
    }
    uint64_t v20 = *((void *)ValueAtIndex + 34);
    if (v20)
    {
      *((void *)v25 + v18) = v20;
    }
    else if (!v18)
    {
      goto LABEL_23;
    }
    if (FigCFCreateCombinedDictionary())
    {
      FigSignalErrorAt();
    }
    else if (v16 < (int)v12)
    {
      v14[v16++] = 0;
    }
LABEL_23:
    ++v15;
  }
  while (v10 != v15);
  if (v16 >= 1)
  {
    CFArrayRef v21 = CFArrayCreate(a2, v14, v16, MEMORY[0x1E4F1D510]);
    uint64_t v22 = 0;
    *a4 = v21;
    do
    {
      BOOL v23 = v14[v22];
      if (v23) {
        CFRelease(v23);
      }
      ++v22;
    }
    while (v16 != v22);
  }
LABEL_32:
  free(v14);
  return 0;
}

uint64_t itemfig_removeBossListeners()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListeners();
}

void itemfig_cancelPreroll()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 504));
  int v1 = *(_DWORD *)(DerivedStorage + 540);
  *(_DWORD *)(DerivedStorage + 540) = 0;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 504));
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  CFIndex v3 = (const void *)v2;
  if (v2) {
    BOOL v4 = v1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (!v2) {
      return;
    }
  }
  else
  {
    playerfig_postDeferredPrerollWasCancelledNotification(v2, v1);
  }

  CFRelease(v3);
}

void itemfig_BossRateChangeFailed()
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v0)
    {
      int v1 = (void *)v0;
      uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)DerivedStorage)
      {
        CFRelease(v1);
      }
      else
      {
        CFIndex v3 = DerivedStorage;
        if (dword_1E9350BF0 >= 2)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        dispatch_async_f(v3[12], v1, (dispatch_function_t)playerfig_BossRateChangeFailed_setRateForInternalReason_0_f);
      }
    }
  }
}

void itemfig_BossSeekDidComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    if (a5)
    {
      if (DerivedStorage[544])
      {
        CFTypeID v7 = CFGetTypeID(a5);
        if (v7 == CFDictionaryGetTypeID() && (!FigCFDictionaryGetInt32IfPresent() || dword_1E9350BF0))
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
}

void itemfig_ReachedOverlappedStartTime(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      uint64_t v6 = (const void *)v5;
      CFTypeID v7 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)v7)
      {
        CFArrayRef v8 = v7;
        int v9 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
        if (v9)
        {
          CFIndex v10 = v9;
          *int v9 = CFRetain(v6);
          if (a2) {
            CFTypeRef v11 = CFRetain(a2);
          }
          else {
            CFTypeRef v11 = 0;
          }
          v10[1] = v11;
          dispatch_async_f(v8[12], v10, (dispatch_function_t)itemfig_DeferReachedOverlappedStartTime_f);
        }
      }
      CFRelease(v6);
    }
  }
}

void itemfig_BossDisturbPlayback()
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v0)
    {
      int v1 = (const void *)v0;
      if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
      {
        long long v4 = *MEMORY[0x1E4F1F9F8];
        uint64_t v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        long long v2 = v4;
        uint64_t v3 = v5;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v1, (uint64_t)&v4, (uint64_t)&v2, 0);
      }
      CFRelease(v1);
    }
  }
}

void itemfig_ReachedEnd_ReachedEndGuts_f(const void **a1)
{
  if (a1)
  {
    long long v2 = *a1;
    uint64_t v3 = a1[1];
    long long v4 = a1[2];
    itemfig_ReachedEndGuts(v3);
    if (v4) {
      CFRelease(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
    if (v2) {
      CFRelease(v2);
    }
  }

  free(a1);
}

uint64_t itemfig_UpdateLastPlayedOutOrLastPlayedDateIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 2096));
  if (FigFileDoesFileExist() == 1
    && !*(unsigned char *)(DerivedStorage + 2128)
    && (uint64_t v3 = *(const void **)(DerivedStorage + 2088)) != 0
    && (FigAssetDownloadStorageManagementCopyDownloadStartDateForAssetAtURL(*(const void **)(DerivedStorage + 112), v3, &v18), v18))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v6 = CFDateCreate(v4, Current);
    if (v6)
    {
      uint64_t v7 = 0;
      CFArrayRef v8 = *(const void **)(DerivedStorage + 112);
      int v9 = *(const void **)(DerivedStorage + 2088);
      CFTypeRef cf = 0;
      if (v8 && v9)
      {
        CMTime v23 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime v22 = v23;
        if (itemfig_GetDuration(a1, (uint64_t)&v23) || (v23.flags & 1) == 0) {
          goto LABEL_44;
        }
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        size_t v12 = *(void (**)(uint64_t, CMTime *))(v11 + 32);
        if (v12) {
          v12(a1, &v22);
        }
        CMTime time = v23;
        CMTimeMultiplyByFloat64(&time2, &time, 0.95);
        CMTime time = v22;
        if (CMTimeCompare(&time, &time2) < 0)
        {
LABEL_44:
          if (FigAssetDownloadStorageManagementCopyLastPlayedOutDateForAssetAtURL(v8, v9, &cf)) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = cf == 0;
          }
          uint64_t v7 = !v13;
          if (cf) {
            CFRelease(cf);
          }
        }
        else
        {
          uint64_t v7 = 1;
        }
      }
      int IsMediaplaybackd = FigServer_IsMediaplaybackd();
      CFIndex v15 = *(const void **)(DerivedStorage + 112);
      if (IsMediaplaybackd)
      {
        if (!FPSupport_CreatePayloadForLastPlayedDateNotification(v15, v6, v7, (__CFDictionary **)&v17))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v7) {
LABEL_32:
          }
            *(unsigned char *)(DerivedStorage + 2128) = 1;
        }
      }
      else
      {
        if (FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL((const __CFURL *)v15, *(const void **)(DerivedStorage + 2088), (uint64_t)v6, v7))LODWORD(v7) = 0; {
        if (v7)
        }
          goto LABEL_32;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    CFDateRef v6 = 0;
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v6) {
    CFRelease(v6);
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 2096));
}

void itemfig_advanceToNextItem(uint64_t a1, const void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    if (dword_1E9350BF0)
    {
      LODWORD(v40) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (playerfig_doingGapless())
    {
      if (a1) {
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = 7;
      }
      itemfig_reportingAgentReportRateChanged(a1, 0.0);
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 2)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 1);
        uint64_t v10 = CMBaseObjectGetDerivedStorage();
        double Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v10 + 328));
        if (Rate != 0.0)
        {
          double v12 = Rate;
          if (ValueAtIndex) {
            *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = 7;
          }
          float v13 = v12;
          itemfig_reportingAgentReportRateChanged((uint64_t)ValueAtIndex, v13);
        }
      }
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 224));
      CFArrayRef v14 = *(const __CFArray **)(DerivedStorage + 208);
      if (v14) {
        CFIndex Count = CFArrayGetCount(v14);
      }
      else {
        CFIndex Count = 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 224));
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
      CFArrayRef v17 = *(const __CFArray **)(DerivedStorage + 248);
      if (v17) {
        CFIndex v18 = CFArrayGetCount(v17);
      }
      else {
        CFIndex v18 = 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 240));
      CFAllocatorRef v39 = a2;
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 2)
      {
        CFStringRef v19 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        CFStringRef v19 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 1);
        uint64_t v20 = CMBaseObjectGetDerivedStorage();
      }
      BOOL v22 = Count > 0 || v18 > 0;
      if (v22
        && v19
        && *(void *)(DerivedStorage + 512) != a1
        && itemfig_hasEnqueuedFirstVideoFrame((uint64_t)v19))
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
        uint64_t v23 = CMBaseObjectGetDerivedStorage();
        if (Count < 1)
        {
          CFStringRef v26 = v19;
          int v16 = 0;
          a2 = v39;
        }
        else
        {
          uint64_t v24 = v23;
          MEMORY[0x19970E910](*(void *)(v23 + 848));
          uint64_t v25 = *(void *)(v24 + 856);
          a2 = v39;
          if (v25) {
            FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v25, 0, v39);
          }
          MEMORY[0x19970E930](*(void *)(v24 + 848));
          CFStringRef v26 = v19;
          itemfig_handleReadyToDisplayVideoLatch((uint64_t)v19, 3, v39);
          int v16 = 1;
        }
        uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        if (v18 >= 1 && !*(unsigned char *)(v20 + 876)) {
          playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v5, v26, MEMORY[0x1E4F1F9F8]);
        }
        if (*(unsigned char *)(v20 + 625))
        {
          *(unsigned char *)(v20 + 625) = 0;
          if (dword_1E9350BF0 >= 2)
          {
            LODWORD(v40) = 0;
            uint64_t v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
          }
          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v26, 0);
          v42[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime v41 = v42[0];
          itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v26, v42, &v41);
        }
      }
      else
      {
        if (dword_1E9350BF0)
        {
          LODWORD(v40) = 0;
          uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v16 = 0;
          uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        }
        else
        {
          int v16 = 0;
        }
        a2 = v39;
      }
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v28 = *(void *)(DerivedStorage + 512);
    if (v28 == a1)
    {
      BOOL v30 = 0;
      *(void *)(DerivedStorage + 520) = 0;
    }
    else
    {
      uint64_t v29 = CMBaseObjectGetDerivedStorage();
      if (v29) {
        BOOL v30 = *(unsigned char *)(v29 + 1289) != 0;
      }
      else {
        BOOL v30 = 0;
      }
    }
    playerfig_gracefullyRemoveItemFromPlayQueue(v5, a1, 0, 0, 0, 0);
    playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(v5, @"ReasonAdvanceAtEnd");
    itemfig_removeAllImageQueues(a1);
    if (!*(void *)(DerivedStorage + 512)) {
      playerfig_freeTransitionImageQueueAndSlot();
    }
    if (v28 == a1 || v30) {
      playerfig_prepareWorkingItem(v5, 0, a2);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
    {
      playeritemfig_releaseRenderPipelines(v5, 0, a2);
    }
    else
    {
      uint64_t v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      uint64_t v33 = CMBaseObjectGetDerivedStorage();
      uint64_t v34 = v33;
      if (*(unsigned char *)(v33 + 625))
      {
        *(unsigned char *)(v33 + 625) = 0;
        if (*((_DWORD *)v7 + 764) >= 2u)
        {
          LODWORD(v40) = 0;
          CFAllocatorRef v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        }
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v32, 0);
        v42[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime v41 = v42[0];
        itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v32, v42, &v41);
      }
      if (!v16) {
        itemfig_handleReadyToDisplayVideoLatch((uint64_t)v32, 3, a2);
      }
      playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(v5);
      if (*(void *)(DerivedStorage + 560) && *(unsigned char *)(v34 + 1826))
      {
        uint64_t v40 = 0;
        itemfig_getTrackStorage((uint64_t)v32, *(_DWORD *)(v34 + 996), &v40);
        uint64_t v36 = v40;
        if (v40 && *(void *)(v40 + 16))
        {
          if (*((_DWORD *)v7 + 764) >= 2u)
          {
            uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          itemfig_updateVolumeOffset((uint64_t)v32);
          itemfig_applyAudioProcessingUnitsToTrack(v34, v36);
          if (!itemfig_applyTrackAudioCurvesToTrack(v36)) {
            itemfig_applyItemAudioCurvesToTrack(v34, v36);
          }
          itemfig_applyAdjustTargetLevel((uint64_t)v32);
          itemfig_applyAdjustCompressionProfile((uint64_t)v32);
        }
        *(unsigned char *)(v34 + 1826) = 0;
      }
    }
    CFRelease(v5);
  }
}

uint64_t FigPlaybackItemGetCurrentTime_0(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 32);
  if (v9)
  {
    return v9(a1, a2);
  }
  return result;
}

void itemfig_reportingAgentReportRateChanged(uint64_t a1, float a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (v4)
    {
      if (*(float *)(DerivedStorage + 2000) != a2)
      {
        uint64_t v6 = v5;
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
        uint64_t v7 = *(void *)(DerivedStorage + 1904);
        if (v7)
        {
          uint64_t v8 = *(int *)(DerivedStorage + 1996);
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v10 + 56);
          if (v11) {
            v11(v7, 0x1EE582B78, 0x1EE583DB8, v8, 0);
          }
          uint64_t v12 = *(void *)(DerivedStorage + 1904);
          if (v12)
          {
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v13) {
              uint64_t v14 = v13;
            }
            else {
              uint64_t v14 = 0;
            }
            CFIndex v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v14 + 56);
            if (v15) {
              v15(v12, 0x1EE582B78, 0x1EE54F698, (uint64_t)(float)(a2 * 100.0), 0);
            }
            uint64_t v16 = *(void *)(DerivedStorage + 1904);
            if (v16)
            {
              uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v17) {
                uint64_t v18 = v17;
              }
              else {
                uint64_t v18 = 0;
              }
              CFStringRef v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v18 + 56);
              if (v19) {
                v19(v16, 0x1EE582B78, 0x1EE583A38, (uint64_t)(float)(a2 * 100.0), 0);
              }
              uint64_t v20 = *(void *)(DerivedStorage + 1904);
              if (v20)
              {
                uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v22 = v21 ? v21 : 0;
                uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(v22 + 16);
                if (v23) {
                  v23(v20, 0x1EE582B78, 306, 0, 0, 0);
                }
              }
            }
          }
          *(float *)(DerivedStorage + 2000) = a2;
          if (!*(unsigned char *)(DerivedStorage + 1992) && a2 != 0.0 && *(_DWORD *)(v6 + 52) == 4)
          {
            if (*(unsigned char *)(DerivedStorage + 1993)) {
              uint64_t v24 = (uint64_t)((CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 1944)) * 1000.0);
            }
            else {
              uint64_t v24 = 0;
            }
            uint64_t v25 = *(void *)(DerivedStorage + 1904);
            if (v25)
            {
              uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v27 = v26 ? v26 : 0;
              uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v27 + 56);
              if (v28) {
                v28(v25, 0x1EE582B78, 0x1EE584AF8, v24, 0);
              }
            }
            *(unsigned char *)(DerivedStorage + 1992) = 1;
          }
          if (a2 == 0.0)
          {
            uint64_t v29 = CMBaseObjectGetDerivedStorage();
            if (v29)
            {
              uint64_t v30 = v29;
              if (*(void *)(v29 + 1904))
              {
                CFArrayRef v31 = *(const __CFArray **)(v29 + 648);
                if (v31 && (CFIndex Count = CFArrayGetCount(v31), Count >= 1))
                {
                  CFIndex v33 = Count;
                  CFIndex v34 = 0;
                  int v35 = 0;
                  int v36 = 0;
                  do
                  {
                    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v30 + 648), v34);
                    if (*((unsigned char *)ValueAtIndex + 8))
                    {
                      int v38 = ValueAtIndex[1];
                      if (v38 == 1936684398) {
                        ++v36;
                      }
                      if (v38 == 1986618469) {
                        ++v35;
                      }
                    }
                    ++v34;
                  }
                  while (v33 != v34);
                }
                else
                {
                  int v36 = 0;
                  int v35 = 0;
                }
                if (v36 > 0 || v35 >= 1)
                {
                  uint64_t v39 = *(void *)(v30 + 1904);
                  if (v39)
                  {
                    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v41 = v40 ? v40 : 0;
                    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, BOOL, void))(v41 + 56);
                    if (v42) {
                      v42(v39, 0x1EE582B78, 0x1EE5838F8, v35 == 0, 0);
                    }
                  }
                }
              }
            }
            uint64_t v43 = *(void *)(DerivedStorage + 1904);
            if (v43)
            {
              uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v45 = v44 ? v44 : 0;
              uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(v45 + 16);
              if (v46) {
                v46(v43, 0x1EE582B78, 901, 0, 0, 0);
              }
            }
          }
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 1896));
      }
      CFRelease(v4);
    }
  }
}

CFArrayRef itemfig_hasEnqueuedFirstVideoFrame(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  if (*(void *)(DerivedStorage + 808))
  {
    uint64_t v4 = *(void *)(DerivedStorage + 824);
    if (!v4) {
      goto LABEL_11;
    }
LABEL_10:
    CFArrayRef result = (const __CFArray *)FigImageQueueTableWasFirstImageEnqueued(v4);
    if (result) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v15 = 0;
  int v5 = *(_DWORD *)(DerivedStorage + 1000);
  if (v5)
  {
    if (itemfig_getTrackStorage(a1, v5, &v15)) {
      return 0;
    }
    uint64_t v4 = *(void *)(v15 + 48);
    if (v4) {
      goto LABEL_10;
    }
  }
LABEL_11:
  CFArrayRef result = *(const __CFArray **)(v3 + 1048);
  if (!result) {
    return result;
  }
  CFIndex Count = CFArrayGetCount(result);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v15 = 0;
      FigCFArrayGetInt32AtIndex();
      itemfig_getTrackStorage(a1, 0, &v15);
      uint64_t v10 = v15;
      if (v15)
      {
        CFArrayRef v11 = *(const __CFArray **)(v15 + 224);
        if (v11)
        {
          if (CFArrayGetCount(v11) >= 1)
          {
            for (CFIndex j = 0; ; ++j)
            {
              CFArrayRef v13 = *(const __CFArray **)(v10 + 224);
              if (v13) {
                CFArrayRef v13 = (const __CFArray *)CFArrayGetCount(v13);
              }
              if (j >= (uint64_t)v13) {
                break;
              }
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 224), j);
              CFArrayRef result = (const __CFArray *)FigImageQueueTableWasFirstImageEnqueued((uint64_t)ValueAtIndex);
              if (result) {
                return result;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t itemfig_handleReadyToDisplayVideoLatch(uint64_t a1, int a2, const void *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (v7)
  {
    CFTypeRef cf = (CFTypeRef)v8;
    uint64_t v43 = a3;
    uint64_t v9 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    if (dword_1E9350BF0 >= 2)
    {
      LODWORD(v44) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v9 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    }
    int VideoFrame = itemfig_hasEnqueuedFirstVideoFrame(a1);
    uint64_t v12 = (unsigned char *)(DerivedStorage + 873);
    BOOL v13 = FPSupport_ItemReadyToDisplayVideoLatch(a2, VideoFrame, (unsigned char *)(DerivedStorage + 872), (unsigned char *)(DerivedStorage + 873));
    BOOL v14 = v13;
    if (*(unsigned char *)(DerivedStorage + 872)) {
      BOOL v15 = *(unsigned char *)(DerivedStorage + 2018) != 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (a2 == 1)
    {
      *(unsigned char *)(DerivedStorage + 874) = 0;
    }
    else if (a2 == 3)
    {
      if (dword_1E9350BF0 >= 3)
      {
        LODWORD(v44) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v9 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (!v14)
      {
LABEL_24:
        if (!v15)
        {
          playerfig_freeTransitionImageQueueAndSlot();
          MEMORY[0x19970E910](*((void *)cf + 28));
          uint64_t v20 = playerfig_clearVideoLayers(*((const __CFArray **)cf + 26), 0, v43);
          if (!v20)
          {
            if (*(void *)(DerivedStorage + 864)) {
              uint64_t v20 = playerfig_connectLayerSynchronizerToLayer((uint64_t)v7, a1, v43);
            }
            else {
              uint64_t v20 = 0;
            }
          }
          MEMORY[0x19970E930](*((void *)cf + 28));
          goto LABEL_64;
        }
LABEL_63:
        uint64_t v20 = 0;
LABEL_64:
        CFRelease(v7);
        return v20;
      }
LABEL_13:
      if (*(unsigned char *)(DerivedStorage + 872))
      {
        if (!*v12)
        {
          if (*((_DWORD *)v9 + 764) >= 2u)
          {
            LODWORD(v44) = 0;
            uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v21 = (void *)CMBaseObjectGetDerivedStorage();
          uint64_t v22 = CMBaseObjectGetDerivedStorage();
          *(void *)os_log_type_t type = 0;
          uint64_t v24 = (void *)MEMORY[0x199711A30](v22, v23);
          MEMORY[0x19970E910](*(void *)(v22 + 224));
          CFArrayRef v25 = *(const __CFArray **)(v22 + 208);
          if ((!v25 || CFArrayGetCount(v25) <= 0) && !v21[108])
          {
            uint64_t v20 = 0;
            goto LABEL_58;
          }
          uint64_t v40 = v24;
          long long v44 = *MEMORY[0x1E4F1FA48];
          uint64_t v45 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          uint64_t v26 = v43;
          if (!v43)
          {
            uint64_t v27 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)type);
            if (v27)
            {
LABEL_57:
              uint64_t v20 = v27;
              uint64_t v24 = v40;
LABEL_58:
              MEMORY[0x19970E930](*(void *)(v22 + 224));
              FigDeferredTransactionCommit(*(uint64_t *)type);
              if (*(void *)type) {
                CFRelease(*(CFTypeRef *)type);
              }
              if (v20) {
                goto LABEL_64;
              }
              *uint64_t v12 = 1;
              if (!VideoFrame) {
                goto LABEL_63;
              }
              goto LABEL_62;
            }
            uint64_t v26 = *(const void **)type;
          }
          itemfig_GetDuration(a1, (uint64_t)&v44);
          uint64_t v28 = (const void *)FigCFCopyCompactDescription();
          CFTypeRef cfa = (CFTypeRef)FigCFCopyCompactDescription();
          if (*((_DWORD *)v9 + 764))
          {
            uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v9 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
          }
          if (v28) {
            CFRelease(v28);
          }
          if (cfa) {
            CFRelease(cfa);
          }
          MEMORY[0x19970E910](v21[140]);
          CFArrayRef v31 = (const __CFArray *)v21[138];
          CFArrayRef v32 = *(const __CFArray **)(v22 + 208);
          long long v53 = *MEMORY[0x1E4F1FA10];
          uint64_t v54 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
          FPSupport_AppendDeferredTransactionChangeForSettingCAImageQueuesOnVideoLayers(v26, v31, v32, &v53, (uint64_t)"playerfig_connectImageQueueToVideoLayer");
          MEMORY[0x19970E930](v21[140]);
          playerfig_updateVideoLayerSize(v7, v26);
          CFArrayRef v33 = (const __CFArray *)v21[108];
          if (v33 && CFArrayGetCount(v33) >= 1)
          {
            CFArrayRef v34 = (const __CFArray *)v21[108];
            long long v53 = v44;
            uint64_t v54 = v45;
            FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v26, &v53, v34, (uint64_t)"playerfig_connectImageQueueToVideoLayer");
          }
          uint64_t v27 = playerfig_connectLayerSynchronizerToLayer((uint64_t)v7, a1, v26);
          goto LABEL_57;
        }
      }
      else if (!*v12)
      {
LABEL_19:
        if (*((_DWORD *)v9 + 764) >= 2u)
        {
          LODWORD(v44) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!VideoFrame) {
          goto LABEL_63;
        }
LABEL_62:
        if (!*(unsigned char *)(DerivedStorage + 874))
        {
          if (*((_DWORD *)v9 + 764))
          {
            LODWORD(v44) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v37 = v44;
            if (os_log_type_enabled(v36, type[0])) {
              unsigned int v38 = v37;
            }
            else {
              unsigned int v38 = v37 & 0xFFFFFFFE;
            }
            if (v38)
            {
              if (a1) {
                uint64_t v39 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
              }
              else {
                uint64_t v39 = "";
              }
              int v47 = 136315650;
              uint64_t v48 = "itemfig_handleReadyToDisplayVideoLatch";
              __int16 v49 = 2048;
              uint64_t v50 = a1;
              __int16 v51 = 2082;
              CFTypeRef v52 = v39;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          uint64_t v20 = 0;
          *(unsigned char *)(DerivedStorage + 874) = 1;
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      if (!*(void *)(DerivedStorage + 856))
      {
        if (*((_DWORD *)v9 + 764) >= 2u)
        {
          LODWORD(v44) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          CFStringRef v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19970E910](*((void *)cf + 28));
        CFArrayRef v30 = (const __CFArray *)*((void *)cf + 26);
        if (v30 && CFArrayGetCount(v30) > 0 || *(void *)(DerivedStorage + 864)) {
          uint64_t v20 = playerfig_connectLayerSynchronizerToLayer((uint64_t)v7, a1, v43);
        }
        else {
          uint64_t v20 = 0;
        }
        MEMORY[0x19970E930](*((void *)cf + 28));
        if (!VideoFrame || v20) {
          goto LABEL_64;
        }
        goto LABEL_62;
      }
      goto LABEL_19;
    }
    if (!v13) {
      goto LABEL_24;
    }
    goto LABEL_13;
  }

  return FigSignalErrorAt();
}

uint64_t itemfig_matchBossRateToPlayerRateAndPlaybackState(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    uint64_t v50 = FigSignalErrorAt();
    if (!v5) {
      return v50;
    }
    goto LABEL_50;
  }
  if (v5)
  {
    if (*(unsigned char *)DerivedStorage || !*(void *)(DerivedStorage + 352))
    {
      uint64_t v49 = FigSignalErrorAt();
      goto LABEL_49;
    }
    uint64_t v7 = v6;
    if (*(unsigned char *)(DerivedStorage + 480))
    {
      LODWORD(v59.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_DWORD *)(v7 + 52) != 4)
    {
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(v59.value) = 0;
        LOBYTE(type.value) = 0;
        uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v32 = *(void *)(DerivedStorage + 352);
      CFArrayRef v33 = *(const void **)(DerivedStorage + 512);
      CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime time = lhs;
      float v34 = 0.0;
LABEL_48:
      uint64_t v49 = FigPlaybackBossSetRateAndAnchorTime(v32, &lhs, &time, v33, v34);
LABEL_49:
      uint64_t v50 = v49;
LABEL_50:
      CFRelease(v5);
      return v50;
    }
    if (dword_1E9350BF0 >= 2)
    {
      LODWORD(v59.value) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFArrayRef v11 = *(OpaqueCMTimebase **)(DerivedStorage + 344);
    if (v11)
    {
      float Rate = CMTimebaseGetRate(v11);
      if (*(float *)(v7 + 48) != Rate)
      {
        LODWORD(v59.value) = 0;
        LOBYTE(type.value) = 0;
        CFArrayRef v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        int v43 = 1;
LABEL_36:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_43:
        uint64_t v47 = CMBaseObjectGetDerivedStorage();
        if (itemfig_useDroppableFramesMinimumInterval())
        {
          CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime time = lhs;
          FPSupport_GetDisplayRefreshInformation(0, &lhs, (uint64_t)&time);
          if ((lhs.flags & 0x1D) == 1)
          {
            uint64_t v48 = *(void *)(v47 + 352);
            CMTime v59 = lhs;
            CMTime type = time;
            FigPlaybackBossSetDroppableFrameMinimumIntervalAndRequestedFrameTimestampIntervalStep(v48, &v59, &type);
          }
        }
        if (!v43)
        {
          uint64_t v50 = 0;
          goto LABEL_50;
        }
        uint64_t v32 = *(void *)(DerivedStorage + 352);
        float v34 = *(float *)(v7 + 48);
        CFArrayRef v33 = *(const void **)(DerivedStorage + 512);
        CMTime lhs = *a2;
        CMTime time = *a3;
        goto LABEL_48;
      }
      FigPlaybackBossGetTime(*(void *)(DerivedStorage + 352), &lhs);
      *a2 = lhs;
      BOOL v13 = *(const void **)(DerivedStorage + 344);
      CMClockRef HostTimeClock = CMClockGetHostTimeClock();
      CMTime time = *a2;
      CMSyncConvertTime(&lhs, &time, v13, HostTimeClock);
      *a3 = lhs;
      memset(&v59, 0, sizeof(v59));
      BOOL v15 = CMClockGetHostTimeClock();
      CMClockGetTime(&rhs, v15);
      CMTime lhs = *a3;
      CMTimeSubtract(&v59, &lhs, &rhs);
      double v16 = *(float *)(v7 + 48);
      if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328)) == v16)
      {
        CMTime lhs = v59;
        CMTimeAbsoluteValue(&time1, &lhs);
        CMTimeMake(&time2, 1, 1000);
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          if (dword_1E9350BF0)
          {
            LODWORD(type.value) = 0;
            int v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = type.value;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v37 = value;
            }
            else {
              unsigned int v37 = value & 0xFFFFFFFE;
            }
            if (v37)
            {
              uint64_t v38 = v7;
              uint64_t v39 = CMBaseObjectGetDerivedStorage() + 944;
              uint64_t v40 = CMBaseObjectGetDerivedStorage() + 2048;
              CMTime lhs = *a2;
              Float64 Seconds = CMTimeGetSeconds(&lhs);
              CMTime lhs = v59;
              Float64 v42 = CMTimeGetSeconds(&lhs);
              LODWORD(time.value) = 136316674;
              *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemfig_matchBossRateToPlayerRateAndPlaybackState";
              LOWORD(time.flags) = 2048;
              *(void *)((char *)&time.flags + 2) = v5;
              HIWORD(time.epoch) = 2082;
              uint64_t v61 = v39;
              uint64_t v7 = v38;
              __int16 v62 = 2048;
              uint64_t v63 = a1;
              __int16 v64 = 2082;
              uint64_t v65 = v40;
              __int16 v66 = 2048;
              Float64 v67 = Seconds;
              __int16 v68 = 2048;
              Float64 v69 = v42;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          int v43 = 0;
          goto LABEL_43;
        }
      }
      if (dword_1E9350BF0)
      {
        LODWORD(type.value) = 0;
        uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v18 = type.value;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v19 = v18;
        }
        else {
          unsigned int v19 = v18 & 0xFFFFFFFE;
        }
        if (v19)
        {
          uint64_t v20 = v7;
          uint64_t v21 = CMBaseObjectGetDerivedStorage() + 944;
          uint64_t v22 = CMBaseObjectGetDerivedStorage() + 2048;
          CMTime lhs = *a2;
          Float64 v23 = CMTimeGetSeconds(&lhs);
          CMTime lhs = v59;
          Float64 v24 = CMTimeGetSeconds(&lhs);
          LODWORD(time.value) = 136316674;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemfig_matchBossRateToPlayerRateAndPlaybackState";
          LOWORD(time.flags) = 2048;
          *(void *)((char *)&time.flags + 2) = v5;
          HIWORD(time.epoch) = 2082;
          uint64_t v61 = v21;
          uint64_t v7 = v20;
          __int16 v62 = 2048;
          uint64_t v63 = a1;
          __int16 v64 = 2082;
          uint64_t v65 = v22;
          __int16 v66 = 2048;
          Float64 v67 = v23;
          __int16 v68 = 2048;
          Float64 v69 = v24;
          _os_log_send_and_compose_impl();
        }
        int v43 = 1;
        goto LABEL_36;
      }
    }
    else if ((*(_DWORD *)(DerivedStorage + 560) & 0x1D) == 1 && (*(_DWORD *)(DerivedStorage + 584) & 0x1D) == 1)
    {
      CFArrayRef v25 = (long long *)(DerivedStorage + 548);
      uint64_t v26 = (long long *)(DerivedStorage + 572);
      memset(&v59, 0, sizeof(v59));
      uint64_t v27 = CMClockGetHostTimeClock();
      CMClockGetTime(&v59, v27);
      memset(&type, 0, sizeof(type));
      CMTime lhs = *(CMTime *)(DerivedStorage + 572);
      CMTime time = v59;
      CMTimeSubtract(&type, &lhs, &time);
      CMTime lhs = type;
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (CMTimeCompare(&lhs, &time) < 1)
      {
        if (dword_1E9350BF0)
        {
          CFTypeRef v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v44 = MEMORY[0x1E4F1F9F8];
        long long v45 = *MEMORY[0x1E4F1F9F8];
        long long *v25 = *MEMORY[0x1E4F1F9F8];
        uint64_t v46 = *(void *)(v44 + 16);
        *(void *)(DerivedStorage + 564) = v46;
        *uint64_t v26 = v45;
        *(void *)(DerivedStorage + 588) = v46;
      }
      else
      {
        long long v28 = *v25;
        a2->CMTimeEpoch epoch = *(void *)(DerivedStorage + 564);
        *(_OWORD *)&a2->unsigned int value = v28;
        long long v29 = *v26;
        a3->CMTimeEpoch epoch = *(void *)(DerivedStorage + 588);
        *(_OWORD *)&a3->unsigned int value = v29;
        if (dword_1E9350BF0)
        {
          CFArrayRef v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    int v43 = 1;
    goto LABEL_43;
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(const void *a1)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  CMTimeValue v4 = *MEMORY[0x1E4F1F9F8];
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v5 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeScale timescale = v5;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (!playerfig_doingGapless())
  {
    if (dword_1E9350BF0) {
      goto LABEL_17;
    }
    return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  }
  CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 504);
  if (!v6 || CFArrayGetCount(v6) <= 1)
  {
    if (dword_1E9350BF0) {
      goto LABEL_17;
    }
    return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CFStringRef v9 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 1);
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (ValueAtIndex != *(const void **)(DerivedStorage + 512))
  {
    uint64_t v11 = v10;
    CMTimeFlags v12 = *(_DWORD *)(v3 + 12);
    CMTimeEpoch epoch = *(void *)(v3 + 16);
    uint64_t v14 = *(void *)(v8 + 352);
    CMTimeEpoch v84 = epoch;
    CMTimeFlags flags = v12;
    if (v14)
    {
      FigPlaybackBossGetScheduledEndTime(v14, (__n128 *)theArray);
      CMTimeValue value = theArray[0].value;
      CMTimeFlags flags = theArray[0].flags;
      CMTimeScale timescale = theArray[0].timescale;
      CMTimeEpoch epoch = theArray[0].epoch;
    }
    if ((flags & 0x1D) != 1)
    {
      if (dword_1E9350BF0)
      {
        LODWORD(v109.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        goto LABEL_20;
      }
      return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    }
    CMTimeFlags v79 = v12;
    CMTimeFlags v80 = flags;
    CMTimeEpoch v81 = epoch;
    uint64_t v82 = v8;
    uint64_t v83 = v11;
    type.CMTimeValue value = 0;
    v109.CMTimeValue value = v4;
    v109.CMTimeScale timescale = v5;
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    uint64_t v90 = 0;
    *(void *)v91 = 0;
    if (!*(void *)(v16 + 216))
    {
      if (dword_1E9350BF0) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    uint64_t v19 = v18;
    if (*(unsigned char *)(v18 + 875))
    {
      if (dword_1E9350BF0) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    CFArrayRef v23 = *(const __CFArray **)(v18 + 1112);
    if (!v23 || !CFArrayGetCount(v23))
    {
      if (dword_1E9350BF0) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    if (!itemfig_hasEnqueuedFirstVideoFrame((uint64_t)v9))
    {
      if (dword_1E9350BF0) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    uint64_t v24 = *(void *)(v17 + 352);
    CMTimeEpoch v25 = v84;
    CMTimeFlags v26 = v79;
    if (v24)
    {
      FigPlaybackBossGetScheduledEndTime(v24, (__n128 *)theArray);
      v109.CMTimeValue value = theArray[0].value;
      CMTimeFlags v26 = theArray[0].flags;
      v109.CMTimeScale timescale = theArray[0].timescale;
      CMTimeEpoch v25 = theArray[0].epoch;
    }
    if ((v26 & 0x1D) != 1)
    {
      if (dword_1E9350BF0)
      {
LABEL_38:
        int v89 = 0;
        os_log_type_t v88 = OS_LOG_TYPE_DEFAULT;
        long long v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        goto LABEL_39;
      }
LABEL_40:
      int v29 = 0;
      goto LABEL_41;
    }
    CMTimeEpoch v78 = v25;
    itemfig_GetDimensions(ValueAtIndex, (float *)&v91[4], (float *)v91);
    itemfig_GetDimensions(v9, (float *)&v90 + 1, (float *)&v90);
    if (*((float *)&v90 + 1) == 0.0
      || *(float *)&v90 == 0.0
      || *(float *)&v91[4] != *((float *)&v90 + 1)
      || *(float *)v91 != *(float *)&v90)
    {
      if (dword_1E9350BF0)
      {
        int v89 = 0;
        os_log_type_t v88 = OS_LOG_TYPE_DEFAULT;
        uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
LABEL_39:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_40;
      }
      goto LABEL_40;
    }
    CFAllocatorRef cf = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!theDict)
    {
      FigSignalErrorAt();
      goto LABEL_40;
    }
    int v46 = itemfig_copyVideoTrackMatrix(cf, (uint64_t)v9, (__CFArray **)&type);
    CFTypeRef cfa = (CFTypeRef)type.value;
    if (v46 || !type.value)
    {
      CMTimeValue v74 = type.value;
      FigSignalErrorAt();
      CFRelease(theDict);
      int v47 = 0;
      int v29 = 0;
      if (!v74)
      {
LABEL_41:
        uint64_t v30 = CMBaseObjectGetDerivedStorage();
        uint64_t v31 = CMBaseObjectGetDerivedStorage();
        v109.CMTimeValue value = v4;
        v109.CMTimeScale timescale = v5;
        *(_OWORD *)&v92.CMTimeValue value = *(_OWORD *)v3;
        CMTimeEpoch v32 = v84;
        v92.CMTimeEpoch epoch = v84;
        CMBaseObjectGetDerivedStorage();
        int v33 = *(_DWORD *)(v31 + 1000);
        CFArrayRef v34 = *(const __CFArray **)(v31 + 1048);
        if (v34) {
          CFIndex Count = CFArrayGetCount(v34);
        }
        else {
          CFIndex Count = 0;
        }
        if (!playerfig_hasVideoTargets())
        {
          if (!dword_1E9350BF0) {
            goto LABEL_105;
          }
          *(_DWORD *)&v91[4] = 0;
          v91[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v40 = *(_DWORD *)&v91[4];
          if (os_log_type_enabled(v39, v91[0])) {
            unsigned int v41 = v40;
          }
          else {
            unsigned int v41 = v40 & 0xFFFFFFFE;
          }
          if (!v41) {
            goto LABEL_104;
          }
          LODWORD(type.value) = 136315138;
          *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfigurationS"
                                                                   "witchForNextItem";
          goto LABEL_103;
        }
        if (*(unsigned char *)(v31 + 876))
        {
          if (!dword_1E9350BF0) {
            goto LABEL_105;
          }
          *(_DWORD *)&v91[4] = 0;
          v91[0] = OS_LOG_TYPE_DEFAULT;
          int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v37 = *(_DWORD *)&v91[4];
          if (os_log_type_enabled(v36, v91[0])) {
            unsigned int v38 = v37;
          }
          else {
            unsigned int v38 = v37 & 0xFFFFFFFE;
          }
          if (!v38) {
            goto LABEL_104;
          }
          LODWORD(type.value) = 136315138;
          *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfigurationS"
                                                                   "witchForNextItem";
          goto LABEL_103;
        }
        if (!v33 && Count < 1) {
          goto LABEL_86;
        }
        uint64_t v42 = CMBaseObjectGetDerivedStorage();
        theArray[0].CMTimeValue value = 0;
        CFArrayRef v43 = *(const __CFArray **)(v42 + 1048);
        if (v43)
        {
          if (CFArrayGetCount(v43) >= 1) {
            goto LABEL_86;
          }
        }
        if (*(void *)(v42 + 808))
        {
          uint64_t v44 = *(void *)(v42 + 824);
        }
        else
        {
          type.CMTimeValue value = 0;
          int v45 = *(_DWORD *)(v42 + 1000);
          if (v45)
          {
            if (itemfig_getTrackStorage((uint64_t)v9, v45, &type)) {
              goto LABEL_97;
            }
            uint64_t v44 = *(void *)(type.value + 48);
          }
          else
          {
            uint64_t v44 = 0;
          }
        }
        if (v44)
        {
          int v48 = FigImageQueueTableCopyVideoTargets(v44, (__CFArray **)theArray);
          uint64_t v49 = (const void *)theArray[0].value;
          if (v48 || !theArray[0].value)
          {
            BOOL v50 = 0;
          }
          else
          {
            BOOL v50 = CFArrayGetCount((CFArrayRef)theArray[0].value) > 0;
            uint64_t v49 = (const void *)theArray[0].value;
          }
          if (v49) {
            CFRelease(v49);
          }
          if (v50)
          {
LABEL_86:
            uint64_t v51 = *(void *)(v30 + 352);
            if (v51)
            {
              FigPlaybackBossGetScheduledEndTime(v51, (__n128 *)theArray);
              v109.CMTimeValue value = theArray[0].value;
              CMTimeFlags v79 = theArray[0].flags;
              v109.CMTimeScale timescale = theArray[0].timescale;
              CMTimeEpoch v32 = theArray[0].epoch;
            }
            if ((v79 & 0x1D) == 1)
            {
              CFTypeRef v52 = *(const void **)(v30 + 328);
              CMClockRef HostTimeClock = CMClockGetHostTimeClock();
              theArray[0].CMTimeValue value = v109.value;
              theArray[0].CMTimeScale timescale = v109.timescale;
              theArray[0].CMTimeFlags flags = v79;
              theArray[0].CMTimeEpoch epoch = v32;
              CMSyncConvertTime(&v92, theArray, v52, HostTimeClock);
              theArray[0] = v92;
              if (!playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, v9, (long long *)&theArray[0].value))
              {
                *(unsigned char *)(v31 + 876) = 1;
                uint64_t v54 = v83;
LABEL_106:
                if (*(unsigned char *)(v54 + 625))
                {
                  memset(&v109, 0, sizeof(v109));
                  FigPlaybackBossGetTime(*(void *)(v54 + 352), &v109);
                  memset(&type, 0, sizeof(type));
                  uint64_t v61 = *(const void **)(v82 + 328);
                  CMClockRef v62 = CMClockGetHostTimeClock();
                  theArray[0].CMTimeValue value = value;
                  theArray[0].CMTimeScale timescale = timescale;
                  theArray[0].CMTimeFlags flags = v80;
                  theArray[0].CMTimeEpoch epoch = v81;
                  CMSyncConvertTime(&type, theArray, v61, v62);
                  if (dword_1E9350BF0 >= 2)
                  {
                    *(_DWORD *)&v91[4] = 0;
                    v91[0] = OS_LOG_TYPE_DEFAULT;
                    uint64_t v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v64 = *(_DWORD *)&v91[4];
                    if (os_log_type_enabled(v63, v91[0])) {
                      unsigned int v65 = v64;
                    }
                    else {
                      unsigned int v65 = v64 & 0xFFFFFFFE;
                    }
                    if (v65)
                    {
                      if (a1) {
                        __int16 v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                      }
                      else {
                        __int16 v66 = "";
                      }
                      double v67 = *(float *)(DerivedStorage + 48);
                      theArray[0] = v109;
                      Float64 Seconds = CMTimeGetSeconds(theArray);
                      theArray[0] = type;
                      Float64 v69 = CMTimeGetSeconds(theArray);
                      CMClockRef v70 = CMClockGetHostTimeClock();
                      CMSyncGetTime(&time, v70);
                      Float64 v71 = CMTimeGetSeconds(&time);
                      FigPlaybackBossGetTime(*(void *)(v82 + 352), &rhs);
                      theArray[0].CMTimeValue value = value;
                      theArray[0].CMTimeScale timescale = timescale;
                      theArray[0].CMTimeFlags flags = v80;
                      theArray[0].CMTimeEpoch epoch = v81;
                      CMTimeSubtract(&v86, theArray, &rhs);
                      Float64 v72 = CMTimeGetSeconds(&v86);
                      Description = FigPlayerPlaybackStateGetDescription(*(_DWORD *)(DerivedStorage + 52));
                      LODWORD(v92.value) = 136317442;
                      *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"playerfig_scheduleVideoSlotAndVideoTargetC"
                                                                              "onfigurationSwitchAndPossiblyStartBossForNextItem";
                      LOWORD(v92.flags) = 2048;
                      *(void *)((char *)&v92.flags + 2) = a1;
                      HIWORD(v92.epoch) = 2082;
                      v93 = v66;
                      __int16 v94 = 2048;
                      double v95 = v67;
                      __int16 v96 = 2048;
                      Float64 v97 = Seconds;
                      __int16 v98 = 2048;
                      Float64 v99 = v69;
                      __int16 v100 = 2048;
                      Float64 v101 = v71;
                      __int16 v102 = 2048;
                      Float64 v103 = v72;
                      __int16 v104 = 2048;
                      CFStringRef v105 = v9;
                      __int16 v106 = 2082;
                      v107 = Description;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    uint64_t v54 = v83;
                  }
                  itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v9, 0);
                  theArray[0] = v109;
                  CMTime v92 = type;
                  itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v9, theArray, &v92);
                  *(unsigned char *)(v54 + 625) = 0;
                }
                return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
              }
LABEL_105:
              uint64_t v54 = v83;
              if (!v29) {
                return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
              }
              goto LABEL_106;
            }
            if (!dword_1E9350BF0) {
              goto LABEL_105;
            }
            *(_DWORD *)&v91[4] = 0;
            v91[0] = OS_LOG_TYPE_DEFAULT;
            uint64_t v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v56 = *(_DWORD *)&v91[4];
            if (os_log_type_enabled(v55, v91[0])) {
              unsigned int v57 = v56;
            }
            else {
              unsigned int v57 = v56 & 0xFFFFFFFE;
            }
            if (!v57)
            {
LABEL_104:
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_105;
            }
            LODWORD(type.value) = 136315138;
            *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfiguratio"
                                                                     "nSwitchForNextItem";
LABEL_103:
            _os_log_send_and_compose_impl();
            goto LABEL_104;
          }
        }
LABEL_97:
        if (!dword_1E9350BF0) {
          goto LABEL_105;
        }
        *(_DWORD *)&v91[4] = 0;
        v91[0] = OS_LOG_TYPE_DEFAULT;
        CFMutableDictionaryRef v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v59 = *(_DWORD *)&v91[4];
        if (os_log_type_enabled(v58, v91[0])) {
          unsigned int v60 = v59;
        }
        else {
          unsigned int v60 = v59 & 0xFFFFFFFE;
        }
        if (!v60) {
          goto LABEL_104;
        }
        LODWORD(type.value) = 136315138;
        *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"playerfig_scheduleVideoTargetImageQueueConfigurationSwitchForNextItem";
        goto LABEL_103;
      }
    }
    else
    {
      CFDictionarySetValue(theDict, @"CurrentVideoTrackMatrix", (const void *)type.value);
      CFDictionarySetValue(theDict, @"CurrentVideoSlotArray", *(const void **)(v19 + 1112));
      CFDictionarySetValue(theDict, @"CurrentHasEnqueuedFirstVideoFrame", (const void *)*MEMORY[0x1E4F1CFD0]);
      theArray[0].CMTimeValue value = v109.value;
      theArray[0].CMTimeScale timescale = v109.timescale;
      theArray[0].CMTimeFlags flags = v26;
      theArray[0].CMTimeEpoch epoch = v78;
      if (FigCFDictionarySetCMTime())
      {
        int v47 = 0;
      }
      else
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        int v47 = 1;
        *(unsigned char *)(v19 + 875) = 1;
      }
      CFRelease(theDict);
    }
    CFRelease(cfa);
    int v29 = v47;
    goto LABEL_41;
  }
  if (dword_1E9350BF0)
  {
LABEL_17:
    LODWORD(v109.value) = 0;
    LOBYTE(type.value) = 0;
    uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
LABEL_20:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
}

uint64_t playerfig_connectLayerSynchronizerToLayer(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v8 = Mutable;
    CFMutableArrayRef v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
    if (v9)
    {
      uint64_t v10 = v9;
      CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 208);
      if (v11)
      {
        v23.length = CFArrayGetCount(v11);
        v23.location = 0;
        CFArrayAppendArray(v8, *(CFArrayRef *)(DerivedStorage + 208), v23);
      }
      CFArrayRef v12 = *(const __CFArray **)(v5 + 864);
      if (v12)
      {
        v24.length = CFArrayGetCount(*(CFArrayRef *)(v5 + 864));
        v24.location = 0;
        CFArrayAppendArray(v10, v12, v24);
      }
      MEMORY[0x19970E910](*(void *)(v5 + 848));
      BOOL v13 = (uint64_t *)(v5 + 856);
      uint64_t v14 = *(void *)(v5 + 856);
      if (v14 || (FigLayerSynchronizerCreate((void *)(v5 + 856)), (uint64_t v14 = *v13) != 0))
      {
        if (dword_1E9350BF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v14 = *v13;
        }
        FigLayerSynchronizerSetLayerArraysWithDeferredTransaction(v14, v8, v10, a3);
        MEMORY[0x19970E930](*(void *)(v5 + 848));
        uint64_t v16 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        if (!v16)
        {
          uint64_t v19 = FigSignalErrorAt();
          goto LABEL_16;
        }
        if (FigSyncMomentSourceCreateWithDispatchQueueAndDestructor((uint64_t)playerfig_syncMomentSourceCallback, v16, (void (*)(uint64_t))playerfig_releaseItemWeakReference, *(const void **)(v5 + 328), *(NSObject **)(v5 + 104), (uint64_t *)(v5 + 840)))
        {
          uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        MEMORY[0x19970E930](*(void *)(v5 + 848));
      }
      uint64_t v19 = 0;
LABEL_16:
      CFRelease(v8);
      CFRelease(v10);
      return v19;
    }
    uint64_t v21 = FigSignalErrorAt();
    CFRelease(v8);
    return v21;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void playerfig_syncMomentSourceCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    CMTimeValue v4 = (const void *)v3;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)DerivedStorage)
    {
      uint64_t v6 = DerivedStorage;
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 848));
      if (*(void *)(v6 + 856))
      {
        int v7 = pthread_main_np();
        uint64_t v8 = *(const void **)(v6 + 856);
        if (v7) {
          FigLayerSynchronizerSynchronizeToMoment((uint64_t)v8, a2, 0);
        }
        else {
          FigLayerSynchronizerSynchronizeToMomentWithDeferredTransaction(v8, a2, 0, (uint64_t)"playerfig_syncMomentSourceCallback", 0);
        }
      }
      MEMORY[0x19970E930](*(void *)(v6 + 848));
    }
    CFRelease(v4);
  }
}

void playerfig_releaseItemWeakReference(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

BOOL itemfig_useDroppableFramesMinimumInterval()
{
  return !*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 286) && CelestialIsAppleTV() == 0;
}

void itemfig_assureContentProtectionReadyForInspection(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFBooleanRef BOOLean = 0;
  if (!itemfig_assureBasicsReadyForInspection(a1))
  {
    uint64_t v3 = DerivedStorage[152];
    CFAllocatorRef v4 = CFGetAllocator(a1);
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v3);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, CFBooleanRef *))(v7 + 48);
    if (v8 && !v8(CMBaseObject, @"assetProperty_ProtectedStatus", v4, &BOOLean))
    {
      if (!BOOLean
        || !CFBooleanGetValue(BOOLean)
        || DerivedStorage[145]
        || ((uint64_t v9 = DerivedStorage[152],
             CFAllocatorRef v10 = CFGetAllocator(a1),
             uint64_t v11 = FigAssetGetCMBaseObject(v9),
             (uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
          ? (uint64_t v13 = 0)
          : (uint64_t v13 = v12),
            (uint64_t v14 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, void *))(v13 + 48)) != 0
         && !v14(v11, @"assetProperty_CPEProtector", v10, DerivedStorage + 145)))
      {
        if (!DerivedStorage[145] && DerivedStorage[146]) {
          FigCPEProtectorCreateForScheme(*MEMORY[0x1E4F1CF80], @"com.apple.basicAES", 0, (uint64_t)(DerivedStorage + 145));
        }
      }
    }
    if (BOOLean) {
      CFRelease(BOOLean);
    }
  }
}

BOOL fp_audioPipelineIsRunning(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFAllocatorRef v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  v4(FigBaseObject, @"IsRunning", *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  BOOL v6 = TypeID == CFGetTypeID(cf) && CFBooleanGetValue((CFBooleanRef)cf) != 0;
  CFRelease(cf);
  return v6;
}

CFNumberRef fp_bumpTransitionNumber()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = *(const void **)(DerivedStorage + 536);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 536) = 0;
  }
  ++*(_DWORD *)(DerivedStorage + 528);
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(DerivedStorage + 528));
  *(void *)(DerivedStorage + 536) = result;
  return result;
}

uint64_t playerfig_setExitTransitionIDOnItemPrecedingWorkingItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (v4 = DerivedStorage, (uint64_t v5 = *(const void **)(DerivedStorage + 512)) != 0)
    && ((CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 504)) == 0
      ? (const void *)(v7.length = 0)
      : (v7.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)), uint64_t v5 = *(const void **)(v4 + 512)),
        v7.location = 0,
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v7, v5),
        FirstIndexOfValue > 0))
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 504), FirstIndexOfValue - 1);
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v10 = *(const void **)(v9 + 488);
    *(void *)(v9 + 488) = a2;
    CFRetain(a2);
    if (v10) {
      CFRelease(v10);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void itemfig_networkActivitySubmitMetricsForInitialStartupIfAvailable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 2008);
  if (v1)
  {
    double v2 = *(double *)(DerivedStorage + 1920);
    if (v2 != 0.0)
    {
      double v3 = *(double *)(DerivedStorage + 1944);
      if (v3 != 0.0)
      {
        double v4 = *(double *)(DerivedStorage + 1984);
        if (v4 != 0.0)
        {
          FigNWActivitySubmitMetricsForInitialStartup(v1, v2, v3, v4);
          uint64_t v5 = *(const void **)(DerivedStorage + 2008);
          if (v5)
          {
            CFRelease(v5);
            *(void *)(DerivedStorage + 2008) = 0;
          }
        }
      }
    }
  }
}

uint64_t itemfig_lookForEmptyEditAndMapTime(uint64_t a1, long long *a2, CMTime *a3, unsigned char *a4)
{
  CFTypeRef v25 = 0;
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)&v20.start.CMTimeValue value = *a2;
  v20.start.CMTimeEpoch epoch = *((void *)a2 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFAllocatorRef v10 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v9 + 8);
  if (!v10) {
    goto LABEL_16;
  }
  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&v20.start.value;
  range.start.CMTimeEpoch epoch = v20.start.epoch;
  uint64_t v11 = v10(a1, &range, &v25);
  if (v11)
  {
    uint64_t v15 = v11;
    if (v11 != -12521) {
      goto LABEL_17;
    }
    goto LABEL_9;
  }
  CFTypeRef v12 = v25;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  uint64_t v16 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v14 + 24);
  if (v16)
  {
    uint64_t v17 = v16(v12, v24);
    if (!v17)
    {
      CMTimeRange range = v24[1];
      *(_OWORD *)&v20.start.CMTimeValue value = *a2;
      v20.start.CMTimeEpoch epoch = *((void *)a2 + 2);
      if (CMTimeRangeContainsTime(&range, &v20.start) && (v24[0].start.flags & 1) != 0)
      {
        long long v18 = *a2;
        v21.CMTimeEpoch epoch = *((void *)a2 + 2);
        CMTimeRange range = v24[1];
        CMTimeRange v20 = v24[0];
        *(_OWORD *)&v21.CMTimeValue value = v18;
        CMTimeMapTimeFromRangeToRange(&v22, &v21, &range, &v20);
        uint64_t v15 = 0;
        *a3 = v22;
        goto LABEL_17;
      }
LABEL_9:
      uint64_t v15 = 0;
      *a4 = 1;
      goto LABEL_17;
    }
    uint64_t v15 = v17;
  }
  else
  {
LABEL_16:
    uint64_t v15 = 4294954514;
  }
LABEL_17:
  if (v25) {
    CFRelease(v25);
  }
  return v15;
}

uint64_t itemfig_copyVideoTrackMatrix(const __CFAllocator *a1, uint64_t a2, __CFArray **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v8 = *(unsigned int *)(DerivedStorage + 1000);
    if (v8)
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFTypeRef v12 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, const __CFAllocator *, __CFArray **))(v10 + 40);
      if (!v12)
      {
        uint64_t v11 = 0;
        uint64_t v13 = 4294954514;
        goto LABEL_19;
      }
      uint64_t v13 = v12(a2, v8, @"Matrix", a1, &v17);
      uint64_t v11 = v17;
      if (v13 != -12784 || v17 != 0) {
        goto LABEL_19;
      }
      long long v15 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      v16[0] = *MEMORY[0x1E4F1DAB8];
      v16[1] = v15;
      v16[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      uint64_t v11 = FigCreate3x3MatrixArrayFromCGAffineTransform(a1, v16);
      uint64_t v17 = v11;
      if (!v11)
      {
        uint64_t v13 = FigSignalErrorAt();
        if (v17) {
          CFRelease(v17);
        }
        return v13;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = 0;
LABEL_19:
    *a3 = v11;
    return v13;
  }

  return FigSignalErrorAt();
}

BOOL playerfig_hasVideoTargets()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
  uint64_t v1 = *(const void **)(DerivedStorage + 248);
  if (v1)
  {
    CFArrayRef v2 = (const __CFArray *)CFRetain(v1);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 240));
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      CFRelease(v2);
      return Count > 0;
    }
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 240));
  }
  return 0;
}

void itemfig_BossBecameIdle_prepareNextItemForTransition_f(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v2) {
    return;
  }
  double v3 = (const void *)v2;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    playerfig_prepareNextItemForTransition(v3, a1);
    if (!a1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (a1) {
LABEL_4:
  }
    CFRelease(a1);
LABEL_5:

  CFRelease(v3);
}

void playerfig_prepareNextItemForTransition(const void *a1, const void *a2)
{
  target[16] = *(CMAttachmentBearerRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (dword_1E9350BF0)
  {
    LODWORD(v47) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)v5)
  {
    *(void *)(v5 + 520) = 0;
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (!playerfig_doingGapless()) {
      goto LABEL_27;
    }
    if (*(unsigned char *)(v7 + 994))
    {
      if (dword_1E9350BF0) {
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    if (*(unsigned char *)(v7 + 992))
    {
      if (dword_1E9350BF0) {
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*(void *)(v8 + 496));
    if (*(void *)(v8 + 512))
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 504));
      v50.location = 0;
      v50.length = Count;
      CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v8 + 504), v50, *(const void **)(v8 + 512));
      if (FirstIndexOfValue != -1 && FirstIndexOfValue + 1 < Count)
      {
        MEMORY[0x19970E2B0](*(void *)(v8 + 496));
        if (dword_1E9350BF0)
        {
          LODWORD(v47) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19970E290](*(void *)(v5 + 496));
        if (!*(void *)(DerivedStorage + 352)) {
          goto LABEL_29;
        }
        uint64_t v13 = (uint64_t *)(v5 + 512);
        if (*(const void **)(v5 + 512) != a2)
        {
          LODWORD(v47) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_29:
          MEMORY[0x19970E2B0](*(void *)(v5 + 496));
          if (cf) {
            CFRelease(cf);
          }
          return;
        }
        if (*(unsigned char *)(DerivedStorage + 480))
        {
LABEL_35:
          CFIndex v17 = CFArrayGetCount(*(CFArrayRef *)(v5 + 504));
          v51.location = 0;
          v51.length = v17;
          CFIndex v18 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v5 + 504), v51, a2);
          if (v18 == -1)
          {
            LODWORD(v47) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CMTime v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else if (v18 + 1 < v17)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 504), v18 + 1);
            *(void *)(v5 + 512) = ValueAtIndex;
            *(void *)(v5 + 520) = ValueAtIndex;
            if (ValueAtIndex)
            {
              uint64_t v20 = CMBaseObjectGetDerivedStorage();
              if (*(double *)(v20 + 1552) == 0.0) {
                *(CFAbsoluteTime *)(v20 + 1552) = CFAbsoluteTimeGetCurrent();
              }
            }
            goto LABEL_42;
          }
          *uint64_t v13 = 0;
          *(void *)(v5 + 520) = 0;
LABEL_42:
          target[0] = 0;
          uint64_t v22 = CMBaseObjectGetDerivedStorage();
          CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFRange v24 = (const void *)itemfig_copyImageQueueGauge((uint64_t)a2, *MEMORY[0x1E4F1CF80]);
          CFTypeRef v25 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
          CMBufferQueueRef queue = 0;
          if (v25)
          {
            int v26 = *(_DWORD *)(v22 + 1000);
            if (v26)
            {
              uint64_t v47 = 0;
              if (!itemfig_getTrackStorage((uint64_t)a2, v26, &v47))
              {
                uint64_t v27 = v47;
                if (v47)
                {
                  if (*(void *)(v47 + 16)
                    && !CMSampleBufferCreate(v23, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)target))
                  {
                    CMSetAttachment(target[0], (CFStringRef)*MEMORY[0x1E4F21A30], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
                    if (v24) {
                      CMSetAttachment(target[0], (CFStringRef)*MEMORY[0x1E4F21A50], v24, 1u);
                    }
                    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v27 + 16));
                    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v29) {
                      uint64_t v30 = v29;
                    }
                    else {
                      uint64_t v30 = 0;
                    }
                    unsigned int v40 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMBufferQueueRef *))(v30 + 48);
                    if (v40 && !v40(FigBaseObject, @"SourceSampleBufferQueue", v23, &queue) && queue) {
                      CMBufferQueueEnqueue(queue, target[0]);
                    }
                  }
                }
              }
              if (target[0]) {
                CFRelease(target[0]);
              }
            }
          }
          if (v24) {
            CFRelease(v24);
          }
          if (queue) {
            CFRelease(queue);
          }
          if (v25) {
            CFRelease(v25);
          }
          playerfig_prepareWorkingItem(a1, 1, 0);
          if (*v13)
          {
            *(unsigned char *)(DerivedStorage + 496) = 0;
            if (a2)
            {
              uint64_t v41 = FigPlaybackItemGetFigBaseObject(a2);
              uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v42) {
                uint64_t v43 = v42;
              }
              else {
                uint64_t v43 = 0;
              }
              uint64_t v44 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v43 + 48);
              if (v44 && !v44(v41, @"ImageQueueGauge", v23, &cf) && cf) {
                FigPlaybackItemSetProperty_0(*v13, @"PriorImageQueueGauge", (uint64_t)cf);
              }
            }
          }
          goto LABEL_29;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (*(unsigned char *)(v5 + 812))
        {
          if (!a2)
          {
LABEL_34:
            FigPlaybackBossGoQuiescent(*(void *)(DerivedStorage + 352));
            *(unsigned char *)(DerivedStorage + 480) = 1;
            goto LABEL_35;
          }
        }
        else
        {
          BOOL IsPlayerPerformanceTraceEnabled = FPSupport_IsPlayerPerformanceTraceEnabled();
          if (!a2 || !IsPlayerPerformanceTraceEnabled) {
            goto LABEL_34;
          }
        }
        if (!*(unsigned char *)DerivedStorage)
        {
          if (*(void *)(DerivedStorage + 352))
          {
            CFArrayRef v31 = *(const __CFArray **)(DerivedStorage + 648);
            if (v31)
            {
              CFIndex v32 = CFArrayGetCount(v31);
              if (v32 >= 1)
              {
                CFIndex v33 = v32;
                for (CFIndex i = 0; i != v33; ++i)
                {
                  int v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
                  int v36 = (const void *)v35[35];
                  if (v36)
                  {
                    CFRelease(v36);
                    v35[35] = 0;
                  }
                  if (*((unsigned char *)v35 + 8))
                  {
                    uint64_t v37 = *(void *)(DerivedStorage + 352);
                    int v38 = *(_DWORD *)v35;
                    CFAllocatorRef v39 = CFGetAllocator(a1);
                    FigPlaybackBossCopyTrackPerformanceDictionary(v37, v38, v39);
                  }
                }
              }
            }
          }
        }
        goto LABEL_34;
      }
      if (dword_1E9350BF0)
      {
        LODWORD(v47) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFTypeRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    MEMORY[0x19970E2B0](*(void *)(v8 + 496));
    if (dword_1E9350BF0)
    {
LABEL_26:
      long long v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_27:
    *(unsigned char *)(DerivedStorage + 496) = 1;
  }
}

uint64_t FigPlaybackItemSetProperty_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    return v11(FigBaseObject, a2, a3);
  }
  return result;
}

uint64_t itemfig_copyImageQueueGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  CFTypeRef cf = 0;
  int v4 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1000);
  if (v4)
  {
    uint64_t v11 = 0;
    itemfig_getTrackStorage(a1, v4, &v11);
    if (v11)
    {
      FigImageQueueTableCopyFigImageQueueArray(*(void *)(v11 + 48), (uint64_t *)&cf);
      if (cf)
      {
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        if (ValueAtIndex)
        {
          uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v8 = v7 ? v7 : 0;
          uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v8 + 48);
          if (v9) {
            v9(FigBaseObject, @"ImageQueueGauge", a2, &v12);
          }
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  return v12;
}

void playerfig_BossRateChangeFailed_setRateForInternalReason_0_f(const void *a1)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    if (!a1) {
      return;
    }
  }
  else
  {
    playerfig_pauseForInternalReason(a1, 2u);
    if (!a1) {
      return;
    }
  }

  CFRelease(a1);
}

void itemfig_DeferReachedOverlappedStartTime_f(const void **a1)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    goto LABEL_10;
  }
  uint64_t v2 = *a1;
  double v3 = (__CFString *)a1[1];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      uint64_t v7 = (const void *)v6;
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)v8)
      {
LABEL_5:
        CFRelease(v7);
        goto LABEL_6;
      }
      uint64_t v9 = v8;
      if (*(_DWORD *)(v8 + 776))
      {
        if (dword_1E9350BF0)
        {
          v76.n128_u32[0] = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_5;
      }
      CFRetain(v3);
      MEMORY[0x19970E290](*(void *)(v9 + 496));
      if (CFArrayGetCount(*(CFArrayRef *)(v9 + 504)) > 1)
      {
        if (*(__CFString **)(v9 + 512) != v3 || !*((void *)v5 + 44))
        {
LABEL_46:
          MEMORY[0x19970E2B0](*(void *)(v9 + 496));
LABEL_47:
          if (v3) {
            CFRelease(v3);
          }
          goto LABEL_5;
        }
        uint64_t v11 = 0;
        int v12 = 0;
        uint64_t v13 = CMBaseObjectGetDerivedStorage() + 368;
        do
        {
          CFArrayRef v14 = *(const __CFArray **)(v13 + v11);
          if (v14)
          {
            CFIndex Count = CFArrayGetCount(v14);
            if (v11)
            {
              if (Count > 0) {
                goto LABEL_44;
              }
            }
            else
            {
              if (Count != 1) {
                break;
              }
              int v12 = 1;
            }
          }
          else if (!v11)
          {
            break;
          }
          v11 += 8;
        }
        while (v11 != 112);
        if (!v12)
        {
LABEL_44:
          if (!dword_1E9350BF0) {
            goto LABEL_46;
          }
          goto LABEL_45;
        }
        CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 504), 1);
        uint64_t v16 = CMBaseObjectGetDerivedStorage();
        if (!*(unsigned char *)(v16 + 1200) || *(_DWORD *)(v16 + 996))
        {
          *(void *)(v9 + 520) = 0;
          uint64_t v17 = CMBaseObjectGetDerivedStorage();
          uint64_t v18 = CMBaseObjectGetDerivedStorage();
          os_log_type_t v80 = OS_LOG_TYPE_DEFAULT;
          CFRetain(v3);
          CFArrayRef v19 = *(const __CFArray **)(v17 + 504);
          v94.length = CFArrayGetCount(v19);
          v94.location = 0;
          if (!CFArrayGetFirstIndexOfValue(v19, v94, v3) && CFArrayGetCount(*(CFArrayRef *)(v17 + 504)) >= 2)
          {
            if (*(unsigned char *)(v17 + 544))
            {
              *(unsigned char *)(v17 + 544) = 0;
              playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)v7, *(_DWORD *)(v17 + 552));
            }
            uint64_t v20 = MEMORY[0x1E4F1F9F8];
            long long v21 = *MEMORY[0x1E4F1F9F8];
            *(_OWORD *)(v18 + 548) = *MEMORY[0x1E4F1F9F8];
            uint64_t v22 = *(void *)(v20 + 16);
            *(void *)(v18 + 564) = v22;
            *(_OWORD *)(v18 + 572) = v21;
            *(void *)(v18 + 588) = v22;
            int v23 = *(_DWORD *)(v18 + 524);
            if (v23)
            {
              *(_DWORD *)(v18 + 524) = 0;
              *(_DWORD *)(v18 + 536) = 0;
              itemfig_postSeekWasCanceledNotification((uint64_t)v7, (uint64_t)v3, v23, 1);
            }
            CFRange v24 = *(const void **)(v18 + 1384);
            if (v24)
            {
              CFRelease(v24);
              *(void *)(v18 + 1384) = 0;
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v17 + 504), 0);
            *(unsigned char *)(v18 + 1) = 0;
            *(unsigned char *)(v18 + 1288) = 0;
            *(unsigned char *)(v18 + 993) = 0;
            itemfig_configureDownloadForItem((uint64_t)v3, *(unsigned __int8 *)(v18 + 1329));
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 504), 0);
            uint64_t v26 = CMBaseObjectGetDerivedStorage();
            if (*(double *)(v26 + 1552) == 0.0) {
              *(CFAbsoluteTime *)(v26 + 1552) = CFAbsoluteTimeGetCurrent();
            }
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)ValueAtIndex, &v80);
            uint64_t v73 = v17;
            if (v80)
            {
              *(unsigned char *)(v18 + 1288) = 1;
            }
            else if (dword_1E9350BF0)
            {
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
              long long v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            playerfig_configureDownloadInPlayQueue();
            *(void *)(v17 + 512) = ValueAtIndex;
            itemfig_unregisterPlayabilityMonitor();
            playerfig_cleanupOverlappedOutroComponents((uint64_t)v7, 0);
            uint64_t v29 = 0;
            *(void *)(v17 + 984) = *(void *)(v18 + 360);
            *(void *)(v18 + 360) = 0;
            uint64_t v30 = v18 + 368;
            do
            {
              *(void *)(v17 + 992 + v29) = *(void *)(v30 + v29);
              *(void *)(v30 + v29) = 0;
              v29 += 8;
            }
            while (v29 != 112);
            if (*(unsigned char *)(v18 + 1697)) {
              itemfig_accumulateFrameDropCountFromAllVideoPipelines((uint64_t)v3);
            }
            itemfig_storeItemPerformanceDataIfGathering(v3);
            CFArrayRef v31 = *(const __CFArray **)(v18 + 648);
            if (v31)
            {
              CFIndex v74 = CFArrayGetCount(v31);
              if (v74 >= 1)
              {
                CFIndex v32 = 0;
                uint64_t v75 = v18;
                do
                {
                  CFIndex v33 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v18 + 648), v32);
                  CFArrayRef v34 = v33;
                  int v35 = (const void *)v33[2];
                  if (v35)
                  {
                    int v36 = *((_DWORD *)v33 + 1);
                    BOOL v37 = v36 == 1986618469 || v36 == 1635088502;
                    if (!v37
                      || (FigStopForwardingMediaServicesProcessDeathNotification(), (int v35 = (const void *)v34[2]) != 0))
                    {
                      CFRelease(v35);
                      v34[2] = 0;
                    }
                  }
                  int v38 = (const void *)v34[31];
                  if (v38)
                  {
                    CFRelease(v38);
                    v34[31] = 0;
                  }
                  CFAllocatorRef v39 = (const void *)v34[32];
                  if (v39)
                  {
                    CFRelease(v39);
                    v34[32] = 0;
                  }
                  CFArrayRef v40 = (const __CFArray *)v34[21];
                  if (v40)
                  {
                    CFIndex v41 = CFArrayGetCount(v40);
                    if (v41 >= 1)
                    {
                      CFIndex v42 = v41;
                      for (CFIndex i = 0; i != v42; ++i)
                      {
                        uint64_t v44 = CFArrayGetValueAtIndex((CFArrayRef)v34[21], i);
                        int v45 = (const void *)v44[6];
                        if (v45)
                        {
                          CFRelease(v45);
                          v44[6] = 0;
                        }
                      }
                    }
                  }
                  ++v32;
                  uint64_t v18 = v75;
                }
                while (v32 != v74);
              }
            }
            if (*(void *)(v18 + 1160))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterRemoveWeakListener();
            }
            __n128 v76 = 0uLL;
            uint64_t v77 = 0;
            FigPlaybackBossGetScheduledEndTime(*(void *)(v18 + 352), &v76);
            int v46 = (__n128 *)(v18 + 24);
            if ((v76.n128_u8[12] & 0x1D) == 1)
            {
              *int v46 = v76;
              uint64_t v47 = v77;
            }
            else
            {
              FigPlaybackBossGetTime(*(void *)(v18 + 352), &v91);
              *int v46 = v91;
              uint64_t v47 = v92;
            }
            *(void *)(v18 + 40) = v47;
            CMNotificationCenterGetDefaultLocalCenter();
            FigPlaybackBossGetTimebase(*(void *)(v18 + 352));
            FigNotificationCenterRemoveWeakListener();
            itemfig_removeBossListeners();
            *(void *)(v73 + 968) = *(void *)(v18 + 352);
            *(void *)(v18 + 352) = 0;
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            int v48 = *(OpaqueCMTimebase **)(v18 + 328);
            CMClockRef HostTimeClock = CMClockGetHostTimeClock();
            CMTimebaseSetSourceClock(v48, HostTimeClock);
            itemfig_cancelPreroll();
            CFRange v50 = *(const void **)(v18 + 488);
            if (v50)
            {
              CFRelease(v50);
              *(void *)(v18 + 488) = 0;
            }
            if (v80)
            {
              if (*(_DWORD *)(v73 + 60) == 2)
              {
                playerfig_UpdateAudioSessionPreferredDeviceFormat();
                playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
                playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)v7);
              }
              else if (dword_1E9350BF0)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
                CFRange v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v52 = *(_DWORD *)type;
                if (os_log_type_enabled(v51, v78)) {
                  unsigned int v53 = v52;
                }
                else {
                  unsigned int v53 = v52 & 0xFFFFFFFE;
                }
                if (v53)
                {
                  uint64_t v54 = CMBaseObjectGetDerivedStorage();
                  int v81 = 136315650;
                  uint64_t v82 = "playerfig_transferItemToOverlappedOutroAndRemoveFromPlayQueue";
                  __int16 v83 = 2048;
                  CMTimeEpoch v84 = v7;
                  __int16 v85 = 2082;
                  uint64_t v86 = v54 + 944;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              itemfig_InformStakeholdersOfBestAvailableAudioContentType((uint64_t)v3);
            }
            playerfig_applyEQPreset((uint64_t)v7);
            itemfig_vendAccessLogWhenItemStopsBeingCurrent((uint64_t)v3);
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
          }
          CFRelease(v3);
          if (dword_1E9350BF0)
          {
            uint64_t v55 = fp_copyPlayQueueDescription();
            if (dword_1E9350BF0)
            {
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
              unsigned int v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v57 = *(_DWORD *)type;
              if (os_log_type_enabled(v56, v78)) {
                unsigned int v58 = v57;
              }
              else {
                unsigned int v58 = v57 & 0xFFFFFFFE;
              }
              if (v58)
              {
                uint64_t v59 = CMBaseObjectGetDerivedStorage();
                int v81 = 136315906;
                uint64_t v82 = "playerfig_transferItemToOverlappedOutroAndRemoveFromPlayQueue";
                __int16 v83 = 2048;
                CMTimeEpoch v84 = v7;
                __int16 v85 = 2082;
                uint64_t v86 = v59 + 944;
                __int16 v87 = 2114;
                os_log_type_t v88 = v55;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v55) {
              CFRelease(v55);
            }
            if (dword_1E9350BF0)
            {
              v76.n128_u32[0] = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              unsigned int v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned __int32 v61 = v76.n128_u32[0];
              if (os_log_type_enabled(v60, type[0])) {
                unsigned int v62 = v61;
              }
              else {
                unsigned int v62 = v61 & 0xFFFFFFFE;
              }
              if (v62)
              {
                uint64_t v63 = CMBaseObjectGetDerivedStorage() + 944;
                if (v3) {
                  unsigned int v64 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                }
                else {
                  unsigned int v64 = "";
                }
                int v81 = 136316162;
                uint64_t v82 = "itemfig_ReachedOverlappedStartTimeGuts";
                __int16 v83 = 2048;
                CMTimeEpoch v84 = v7;
                __int16 v85 = 2082;
                uint64_t v86 = v63;
                __int16 v87 = 2048;
                os_log_type_t v88 = v3;
                __int16 v89 = 2082;
                uint64_t v90 = v64;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          ++*(_DWORD *)(v9 + 960);
          FigCFDictionarySetInt32();
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(v7, @"ReasonAdvanceForOverlappedPlayback");
          playerfig_prepareWorkingItem(v7, 0, 0);
          __int16 v66 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 504), 0);
          uint64_t v67 = CMBaseObjectGetDerivedStorage();
          if (*(void *)(v9 + 560))
          {
            uint64_t v68 = v67;
            if (*(unsigned char *)(v67 + 1826))
            {
              v76.n128_u64[0] = 0;
              itemfig_getTrackStorage((uint64_t)v66, *(_DWORD *)(v67 + 996), &v76);
              uint64_t v69 = v76.n128_u64[0];
              if (v76.n128_u64[0] && *(void *)(v76.n128_u64[0] + 16))
              {
                if (dword_1E9350BF0 >= 2)
                {
                  *(_DWORD *)os_log_type_t type = 0;
                  os_log_type_t v80 = OS_LOG_TYPE_DEFAULT;
                  CMClockRef v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v71 = *(_DWORD *)type;
                  if (os_log_type_enabled(v70, v80)) {
                    unsigned int v72 = v71;
                  }
                  else {
                    unsigned int v72 = v71 & 0xFFFFFFFE;
                  }
                  if (v72)
                  {
                    int v81 = 136315138;
                    uint64_t v82 = "itemfig_ReachedOverlappedStartTimeGuts";
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                itemfig_updateVolumeOffset((uint64_t)v66);
                itemfig_applyAudioProcessingUnitsToTrack(v68, v69);
                if (!itemfig_applyTrackAudioCurvesToTrack(v69)) {
                  itemfig_applyItemAudioCurvesToTrack(v68, v69);
                }
                itemfig_applyAdjustTargetLevel((uint64_t)v66);
                itemfig_applyAdjustCompressionProfile((uint64_t)v66);
              }
              *(unsigned char *)(v68 + 1826) = 0;
            }
          }
          MEMORY[0x19970E2B0](*(void *)(v9 + 496));
          playerfig_updatePlaybackStateAndBossRate(v7, 7, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_47;
        }
        if (!dword_1E9350BF0) {
          goto LABEL_46;
        }
      }
      else if (!dword_1E9350BF0)
      {
        goto LABEL_46;
      }
LABEL_45:
      v76.n128_u32[0] = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_46;
    }
  }
LABEL_6:
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
LABEL_10:
  free(a1);
}

void playerfig_cleanupOverlappedOutroComponents(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __n128 v15 = *(__n128 *)MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v4 = *(void *)(DerivedStorage + 968);
  if (v4)
  {
    if (a2) {
      FigPlaybackBossGetScheduledEndTime(v4, &v15);
    }
    else {
      FigPlaybackBossGetTime(v4, &v15);
    }
    if (!*(unsigned char *)(DerivedStorage + 976)) {
      FigPlaybackBossSetRate(*(void *)(DerivedStorage + 968), 0, 0.0);
    }
    uint64_t v5 = *(__CFSet **)(DerivedStorage + 984);
    if (v5)
    {
      CFSetRemoveAllValues(v5);
      uint64_t v6 = *(const void **)(DerivedStorage + 984);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(DerivedStorage + 984) = 0;
      }
    }
    uint64_t v7 = 0;
    uint64_t v8 = DerivedStorage + 992;
    do
    {
      uint64_t v9 = *(const void **)(v8 + v7);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(v8 + v7) = 0;
      }
      v7 += 8;
    }
    while (v7 != 112);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigPlaybackBossInvalidate(*(void *)(DerivedStorage + 968));
    uint64_t v10 = *(const void **)(DerivedStorage + 968);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(DerivedStorage + 968) = 0;
    }
    *(_WORD *)(DerivedStorage + 976) = 0;
    *(_DWORD *)(DerivedStorage + 980) = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(__n128 *)&v14.CMTimeValue value = v15;
    v14.CMTimeEpoch epoch = v16;
    CFDictionaryRef v13 = CMTimeCopyAsDictionary(&v14, v11);
    FigCFDictionarySetValue();
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v13) {
      CFRelease(v13);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void playerfig_OverlappedOutroReachedEnd(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  uint64_t v4 = *(NSObject **)(DerivedStorage + 96);

  dispatch_async_f(v4, a2, (dispatch_function_t)playerfig_DeferOverlappedOutroReachedEnd_f);
}

void playerfig_OverlappedOutroBossBecameIdle(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"OSStatus");
    if (Value)
    {
      CFNumberRef v9 = Value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(v9))
      {
        int valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
        int v11 = valuePtr;
        if (valuePtr)
        {
          *(unsigned char *)(DerivedStorage + 977) = 1;
          *(_DWORD *)(DerivedStorage + 980) = v11;
        }
      }
    }
  }
  CFRetain(a2);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 96), a2, (dispatch_function_t)playerfig_DeferOverlappedOutroBossBecameIdle_f);
}

void playerfig_DeferOverlappedOutroReachedEnd_f(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (uint64_t v3 = DerivedStorage, !*(unsigned char *)DerivedStorage))
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    playerfig_cleanupOverlappedOutroComponents(a1, 1);
    MEMORY[0x19970E2B0](*(void *)(v3 + 496));
    if (!a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }

  CFRelease(a1);
}

void playerfig_DeferOverlappedOutroBossBecameIdle_f(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v3 = DerivedStorage, *(unsigned char *)DerivedStorage))
  {
    if (!a1) {
      return;
    }
    goto LABEL_4;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (!*(unsigned char *)(v3 + 976))
  {
    FigPlaybackBossGoQuiescent(*(void *)(v3 + 968));
    *(unsigned char *)(v3 + 976) = 1;
  }
  if (*(unsigned char *)(v3 + 977)) {
    playerfig_cleanupOverlappedOutroComponents(a1, 0);
  }
  MEMORY[0x19970E2B0](*(void *)(v3 + 496));
  if (a1)
  {
LABEL_4:
    CFRelease(a1);
  }
}

void itemfig_deferredExternalProtectionStatusChanged(uint64_t a1, const void *a2)
{
  itemfig_ExternalProtectionStatusChangedGuts((uint64_t)a2);
  if (a2)
  {
    CFRelease(a2);
  }
}

void itemfig_commitAccessLogEntry(const void *a1, uint64_t a2)
{
  CMTimeValue value = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 1512)
    || (CFAllocatorRef v5 = CFGetAllocator(a1),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(DerivedStorage + 1512) = Mutable) != 0))
  {
    if (!itemfig_createAccessLogEntry((uint64_t)a1, a2, (CFMutableDictionaryRef *)&value))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1512), value);
      *(void *)(DerivedStorage + 1672) = *(void *)(DerivedStorage + 1680);
      *(void *)(DerivedStorage + 1664) = 0;
      *(void *)(DerivedStorage + 1616) = *(void *)(DerivedStorage + 1624);
      *(void *)(DerivedStorage + 1632) = *(void *)(DerivedStorage + 1640);
      *(CFAbsoluteTime *)(DerivedStorage + 1520) = CFAbsoluteTimeGetCurrent();
      *(_WORD *)(DerivedStorage + 1688) = 0;
      *(_DWORD *)(DerivedStorage + 1600) = 0;
      *(void *)(DerivedStorage + 1608) = 0;
      *(unsigned char *)(DerivedStorage + 1690) = 0;
      *(void *)(DerivedStorage + 1544) = 0;
      *(void *)(DerivedStorage + 1536) = 0;
      *(void *)(DerivedStorage + 1656) = 0;
      *(void *)(DerivedStorage + 1648) = 0;
      *(CFAbsoluteTime *)(DerivedStorage + 1552) = CFAbsoluteTimeGetCurrent();
      CFRelease(value);
    }
  }
}

uint64_t itemfig_createAccessLogEntry(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CFNumberRef number = 0;
  CFMutableDictionaryRef theDict = 0;
  double v69 = 0.0;
  CMTimeValue value = 0;
  if (!a3)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_135:
    int v40 = 0;
    goto LABEL_108;
  }
  uint64_t v7 = v6;
  if (!*(void *)(v6 + 128))
  {
    int v40 = 0;
    uint64_t v13 = 4294954513;
    goto LABEL_108;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = *(uint64_t (**)(uint64_t, void, void, CFMutableDictionaryRef *))(v10 + 48);
  int v12 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v11)
  {
    uint64_t v13 = v11(CMBaseObject, *MEMORY[0x1E4F1FB18], 0, &theDict);
    if (!v13) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
  cf.CMTimeValue value = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef theDict = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_135;
  }
  CFDictionaryAddValue(Mutable, @"s-playback-type", @"FILE");
  uint64_t v15 = CMByteStreamGetCMBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(unsigned int (**)(uint64_t, void, void, CMTime *))(v17 + 48);
  if (v18 && !v18(v15, *MEMORY[0x1E4F1FB78], 0, &cf))
  {
    unsigned int v60 = CFDictionaryGetValue((CFDictionaryRef)cf.value, @"URL");
    if (v60) {
      CFDictionaryAddValue(theDict, @"uri", v60);
    }
    unsigned __int32 v61 = CFDictionaryGetValue((CFDictionaryRef)cf.value, @"TotalReadTime");
    if (v61) {
      CFDictionaryAddValue(theDict, @"c-transfer-duration", v61);
    }
    CFStringRef v62 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf.value, @"TotalBytesRead");
    if (!v62) {
      goto LABEL_19;
    }
    CFStringRef v21 = v62;
    uint64_t v22 = theDict;
    int v23 = @"bytes";
  }
  else
  {
    CFURLRef v19 = *(const __CFURL **)(v7 + 112);
    if (!v19) {
      goto LABEL_19;
    }
    CFMutableDictionaryRef v20 = theDict;
    CFStringRef v21 = CFURLGetString(v19);
    uint64_t v22 = v20;
    int v23 = @"uri";
  }
  CFDictionaryAddValue(v22, v23, v21);
LABEL_19:
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
LABEL_21:
  uint64_t v24 = CMByteStreamGetCMBaseObject();
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *(void (**)(uint64_t, void, void, CFNumberRef *))(v26 + 48);
  if (v27) {
    v27(v24, *MEMORY[0x1E4F1EC50], 0, &number);
  }
  uint64_t v28 = *(unsigned int *)(v7 + 1000);
  if (v28)
  {
    cf.CMTimeValue value = 0;
    uint64_t valuePtr = 0;
    uint64_t v29 = *(void *)(v7 + 968);
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    CFIndex v32 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *, void))(v31 + 56);
    if (v32 && !v32(v29, v28, &cf, 0))
    {
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf.value);
      uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v65 = v64 ? v64 : 0;
      __int16 v66 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t *))(v65 + 48);
      if (v66)
      {
        if (!v66(FigBaseObject, @"NominalFrameRate", *v12, &valuePtr) && valuePtr)
        {
          CFDictionarySetValue(theDict, @"c-nominal-framerate", (const void *)valuePtr);
          CFRelease((CFTypeRef)valuePtr);
        }
      }
    }
    if (cf.value) {
      CFRelease((CFTypeRef)cf.value);
    }
  }
  CFDateRef v33 = CFDateCreate(*v12, *(CFAbsoluteTime *)(v7 + 1520));
  if (!v33)
  {
    int v40 = 0;
    uint64_t v13 = 4294954434;
    goto LABEL_108;
  }
  CFDateRef v34 = v33;
  CFDictionarySetValue(theDict, @"date", v33);
  CFRelease(v34);
  CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"c-transfer-duration");
  if (v35) {
    CFNumberGetValue(v35, kCFNumberDoubleType, (void *)(v7 + 1640));
  }
  CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"bytes");
  if (v36) {
    CFNumberGetValue(v36, kCFNumberSInt64Type, (void *)(v7 + 1624));
  }
  CFDictionaryRemoveValue(theDict, @"c-transfer-duration");
  CFDictionaryRemoveValue(theDict, @"bytes");
  CMTimeValue v37 = *(void *)(v7 + 1624) - *(void *)(v7 + 1616);
  if (v37 < 0)
  {
    CMTimeValue v37 = 0;
    goto LABEL_44;
  }
  double v38 = *(double *)(v7 + 1640) - *(double *)(v7 + 1632);
  if (v38 < 0.0)
  {
LABEL_44:
    int v40 = 0;
    goto LABEL_45;
  }
  if (v38 <= 0.0)
  {
    int v40 = 0;
    double v39 = 0.0;
  }
  else
  {
    double v39 = (double)v37 * 8.0 / v38;
    int v40 = 1;
  }
  *(double *)&cf.CMTimeValue value = v39;
  uint64_t v13 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-observed-bitrate", kCFNumberDoubleType, &cf);
  if (v13) {
    goto LABEL_108;
  }
LABEL_45:
  cf.CMTimeValue value = v37;
  uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"bytes", kCFNumberSInt64Type, &cf);
  if (v41) {
    goto LABEL_104;
  }
  if (*(unsigned char *)(v7 + 1690))
  {
    cf.CMTimeValue value = *(void *)(v7 + 1560);
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-startup-time", kCFNumberDoubleType, &cf);
    int v40 = 1;
    if (v41) {
      goto LABEL_104;
    }
  }
  double v42 = *(double *)(v7 + 1568);
  if (FigCFDictionaryGetDoubleIfPresent())
  {
    if (v69 < v42 && v69 > 0.0) {
      double v42 = v69;
    }
    double v69 = v69 - v42;
    FigCFDictionarySetDouble();
  }
  if (FigCFDictionaryGetDoubleIfPresent())
  {
    double v69 = v69 - v42;
    FigCFDictionarySetDouble();
  }
  double v44 = *(double *)(v7 + 1568);
  if (v44 != 0.0)
  {
    double v69 = v44 - v42;
    *(double *)&cf.CMTimeValue value = v44 - v42;
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-playback-setup-ts", kCFNumberDoubleType, &cf);
    int v40 = 1;
    if (v41) {
      goto LABEL_104;
    }
  }
  double v45 = *(double *)(v7 + 1576);
  if (v45 != 0.0)
  {
    double v69 = v45 - v42;
    *(double *)&cf.CMTimeValue value = v45 - v42;
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-basics-ready-ts", kCFNumberDoubleType, &cf);
    int v40 = 1;
    if (v41) {
      goto LABEL_104;
    }
  }
  double v46 = *(double *)(v7 + 1584);
  if (v46 != 0.0)
  {
    double v69 = v46 - v42;
    *(double *)&cf.CMTimeValue value = v46 - v42;
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-rp-setup-ts", kCFNumberDoubleType, &cf);
    int v40 = 1;
    if (v41) {
      goto LABEL_104;
    }
  }
  double v47 = *(double *)(v7 + 1592);
  if (v47 != 0.0)
  {
    double v69 = v47 - v42;
    *(double *)&cf.CMTimeValue value = v47 - v42;
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-playback-ready-ts", kCFNumberDoubleType, &cf);
    int v40 = 1;
    if (v41) {
      goto LABEL_104;
    }
  }
  uint64_t v48 = CMByteStreamGetCMBaseObject();
  uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v49) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = 0;
  }
  CFRange v51 = *(unsigned int (**)(uint64_t, __CFString *, void, void **))(v50 + 48);
  if (v51 && !v51(v48, @"CRABS_CacheIsDiskBacked", 0, &value) && value)
  {
    CFDictionarySetValue(theDict, @"c-disk-backed", value);
    CFRelease(value);
    int v40 = 1;
  }
  if (*(double *)(v7 + 1648) > 0.0)
  {
    cf.CMTimeValue value = *(void *)(v7 + 1648);
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-duration-at-item-preparation", kCFNumberDoubleType, &cf);
    if (v41) {
      goto LABEL_104;
    }
    int v40 = 1;
  }
  if (*(double *)(v7 + 1656) > 0.0)
  {
    cf.CMTimeValue value = *(void *)(v7 + 1656);
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-duration-at-likely-to-keep-up", kCFNumberDoubleType, &cf);
    if (!v41)
    {
      int v40 = 1;
      goto LABEL_78;
    }
LABEL_104:
    uint64_t v13 = v41;
    goto LABEL_108;
  }
LABEL_78:
  unsigned int v52 = *(const void **)(v7 + 1280);
  if (v52)
  {
    CFDictionarySetValue(theDict, @"c-service-identifier", v52);
    int v40 = 1;
  }
  if (*(unsigned char *)(v7 + 1188))
  {
    if (number)
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr >= 1)
      {
        CMTime cf = *(CMTime *)(v7 + 1176);
        double Seconds = CMTimeGetSeconds(&cf);
        *(double *)&cf.CMTimeValue value = (double)valuePtr / Seconds * 8.0;
        uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"sc-indicated-bitrate", kCFNumberDoubleType, &cf);
        if (v41) {
          goto LABEL_104;
        }
        double v54 = (double)v37 / (double)valuePtr;
        double v55 = 1.0;
        if (v54 <= 1.0)
        {
          double v55 = (double)v37 / (double)valuePtr;
          if (v54 < 0.0) {
            double v55 = 0.0;
          }
        }
        double v56 = Seconds * v55;
        if (v56 > 0.0) {
          int v40 = 1;
        }
        *(double *)&cf.CMTimeValue value = v56;
        uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-duration-downloaded", kCFNumberDoubleType, &cf);
        if (v41) {
          goto LABEL_104;
        }
      }
    }
  }
  if (*(unsigned char *)(v7 + 1688))
  {
    double v57 = *(double *)(v7 + 1536);
    if (*(double *)(v7 + 1544) != 0.0) {
      double v57 = v57 + (CFAbsoluteTimeGetCurrent() - *(double *)(v7 + 1544)) * fabsf(*(float *)(DerivedStorage + 48));
    }
    if (v57 > 0.0) {
      int v40 = 1;
    }
    *(double *)&cf.CMTimeValue value = v57;
    uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-duration-watched", kCFNumberDoubleType, &cf);
    if (!v41)
    {
      if (!*(unsigned char *)(v7 + 1689)
        || (cf.CMTimeValue value = *(void *)(v7 + 1528),
            uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-start-time", kCFNumberDoubleType, &cf),
            int v40 = 1,
            !v41))
      {
        itemfig_getFrameDropCountFromAllVideoPipelines(a2, (void *)(v7 + 1680));
        if ((uint64_t)(*(void *)(v7 + 1680) + *(void *)(v7 + 1664) - *(void *)(v7 + 1672)) > 0) {
          int v40 = 1;
        }
        cf.CMTimeValue value = *(void *)(v7 + 1680) + *(void *)(v7 + 1664) - *(void *)(v7 + 1672);
        uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-frames-dropped", kCFNumberSInt64Type, &cf);
        if (!v41)
        {
          if (*(uint64_t *)(v7 + 1608) > 0) {
            int v40 = 1;
          }
          cf.CMTimeValue value = *(void *)(v7 + 1608);
          uint64_t v41 = itemfig_addCFNumberToAccessLogEntry(theDict, @"c-stalls", kCFNumberSInt64Type, &cf);
        }
      }
    }
    goto LABEL_104;
  }
  uint64_t v13 = 0;
LABEL_108:
  if (number) {
    CFRelease(number);
  }
  if (!v13)
  {
    CFMutableDictionaryRef v58 = theDict;
    if (v40)
    {
      uint64_t v13 = 0;
      goto LABEL_115;
    }
    uint64_t v13 = 4294954513;
    if (!theDict) {
      goto LABEL_115;
    }
    goto LABEL_112;
  }
  CFMutableDictionaryRef v58 = theDict;
  if (theDict)
  {
LABEL_112:
    CFRelease(v58);
    CFMutableDictionaryRef v58 = 0;
  }
LABEL_115:
  *a3 = v58;
  return v13;
}

uint64_t itemfig_addCFNumberToAccessLogEntry(__CFDictionary *a1, const void *a2, CFNumberType theType, void *valuePtr)
{
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theType, valuePtr);
  if (!v6) {
    return 4294954434;
  }
  CFNumberRef v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

void itemfig_stashTransitionImageQueuesAndSlots()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    uint64_t v3 = v2;
    CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 1112);
    if (v4 && CFArrayGetCount(v4) >= 1)
    {
      if (*(unsigned char *)(DerivedStorage + 1824) || *(void *)(v3 + 824))
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
        CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 1112);
        *(void *)(DerivedStorage + 1112) = 0;
        CFNumberRef v6 = *(const void **)(DerivedStorage + 1104);
        if (v6)
        {
          CFRelease(v6);
          *(void *)(DerivedStorage + 1104) = 0;
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
        FPSupport_DeleteCASlotsInArray(v5);
        if (v5) {
          CFRelease(v5);
        }
      }
      else
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
        *(_OWORD *)(v3 + 824) = *(_OWORD *)(DerivedStorage + 1104);
        *(_OWORD *)(DerivedStorage + 1104) = 0u;
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
      }
    }
    CFRelease(v1);
  }
}

void itemfig_clearTrackImageQueueTable(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4)
  {
    FigImageQueueTableCopyFigImageQueueArray(v4, (uint64_t *)&cf);
    if (cf)
    {
      itemfig_removeImageQueueListenersForObsoleteImageQueues(a1, (const __CFArray *)cf, 0);
      FigImageQueueTableRemoveAllValues(*(void *)(a2 + 48));
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
  }
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(a2 + 224);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 224), i);
    FigImageQueueTableCopyFigImageQueueArray((uint64_t)ValueAtIndex, (uint64_t *)&cf);
    if (cf)
    {
      itemfig_removeImageQueueListenersForObsoleteImageQueues(a1, (const __CFArray *)cf, 0);
      FigImageQueueTableRemoveAllValues((uint64_t)ValueAtIndex);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void itemfig_removeImageQueueListenersForObsoleteImageQueues(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (a3) {
    uint64_t Count = CFArrayGetCount(a3);
  }
  else {
    uint64_t Count = 0;
  }
  if (*DerivedStorage) {
    return;
  }
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = (const void *)v7;
  if (!a2 || !v7) {
    goto LABEL_13;
  }
  CFIndex v9 = CFArrayGetCount(a2);
  if (v9 >= 1)
  {
    CFIndex v10 = v9;
    for (CFIndex i = 0; i != v10; ++i)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (Count >= 1)
      {
        v14.location = 0;
        v14.length = Count;
        if (CFArrayContainsValue(a3, v14, ValueAtIndex)) {
          continue;
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
LABEL_13:
    if (!v8) {
      return;
    }
  }

  CFRelease(v8);
}

void itemfig_DeferredFirstVideoFrameEnqueued(uint64_t a1, const __CFString *a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5) {
    return;
  }
  CFNumberRef v6 = (const void *)v5;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*(void *)(v7 + 496));
  if (*((void *)v4 + 82))
  {
    uint64_t v9 = *((void *)v4 + 103);
  }
  else
  {
    int v12 = *((_DWORD *)v4 + 250);
    if (!v12) {
      goto LABEL_8;
    }
    v14[0] = 0;
    if (itemfig_getTrackStorage((uint64_t)a2, v12, v14) || !v14[0]) {
      goto LABEL_8;
    }
    uint64_t v9 = *(void *)(v14[0] + 48);
  }
  FigImageQueueTableCopyFigImageQueueArray(v9, (uint64_t *)&cf);
LABEL_8:
  int v10 = FigCFArrayContainsValue();
  if (v10 || !dword_1E9350BF0)
  {
    if (v10 && !v4[1824]) {
      itemfig_handleReadyToDisplayVideoLatch((uint64_t)a2, 0, 0);
    }
  }
  else
  {
    int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v4[876]) {
    playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v6, a2, MEMORY[0x1E4F1F9F8]);
  }
  playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(v6);
  MEMORY[0x19970E2B0](*(void *)(v7 + 496));
  CFRelease(v6);
  if (cf) {
    CFRelease(cf);
  }
}

void playerfig_DeferredSynchronousFrameEnqueued(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 224));
    CFArrayRef v4 = *(const __CFArray **)(v3 + 208);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      CFNumberRef v6 = (void *)MEMORY[0x199711A30]();
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
          objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 208), i), "setContentsChanged");
      }
      [MEMORY[0x1E4F39CF8] commit];
    }
    MEMORY[0x19970E930](*(void *)(v3 + 224));
  }

  CFRelease(a1);
}

void itemfig_VideoCompositionProcessorErrorOccurred(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CFDictionary *FailedNotificationPayloadWithContentStream)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FailedNotificationPayloadWithContentStream)
  {
    CFTypeID v8 = CFGetTypeID(FailedNotificationPayloadWithContentStream);
    if (v8 == CFDictionaryGetTypeID()
      && (v9 = (__CFDictionary *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, @"VideoCompositionProcessor_Result"), (v10 = v9) != 0)&& (CFTypeID v11 = CFGetTypeID(v9), v11 == CFNumberGetTypeID()))
    {
      FailedNotificationPayloadWithContentStream = itemfig_createFailedNotificationPayloadWithContentStream(*(CFTypeRef *)(DerivedStorage + 128), v10);
      CFNumberRef Value = (__CFError *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, @"CFError");
      valuePtr[0] = 0;
      CFNumberGetValue(v10, kCFNumberSInt32Type, valuePtr);
      itemfig_reportingAgentReportError((uint64_t)a2, Value, @"CoreMediaErrorDomain", @"Failed to play to end due to video composition error", valuePtr[0]);
    }
    else
    {
      FailedNotificationPayloadWithContentStream = 0;
    }
  }
  uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    CFRange v14 = (const void *)v13;
    CMBaseObjectGetDerivedStorage();
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFRetain(v14);
    if (a2) {
      CFRetain(a2);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    CFRelease(v14);
  }
  if (FailedNotificationPayloadWithContentStream) {
    CFRelease(FailedNotificationPayloadWithContentStream);
  }
}

void itemfig_handleAIMEDataChannelResourceProcessingStateChanged()
{
}

uint64_t itemfig_getPlaythroughPrediction(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
    uint64_t v2 = *(void *)(DerivedStorage + 600);
    if (v2)
    {
      unsigned int v6 = 0;
      if (FigPlayabilityMonitorGetPlaythroughInfo(v2, &v6, 0, 0)) {
        goto LABEL_10;
      }
      uint64_t v3 = v6;
      if (v6 - 2 < 2)
      {
        if (*(_DWORD *)(DerivedStorage + 1408) == 1) {
          uint64_t v3 = 3;
        }
        else {
          uint64_t v3 = 2;
        }
        goto LABEL_12;
      }
      if (!v6) {
        goto LABEL_11;
      }
      if (v6 != 1)
      {
LABEL_10:
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_11:
        uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v3 = *(unsigned char *)(DerivedStorage + 1266) != 0;
    }
LABEL_12:
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
    return v3;
  }
  return 0;
}

uint64_t playerfig_getNextPlaybackState(uint64_t a1, float a2, uint64_t a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned int a9, int *a10, unsigned char *a11, BOOL *a12, float *a13)
{
  uint64_t v13 = a12;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  BOOL v14 = a4 == 4;
  if (a10)
  {
    unsigned int v15 = a8;
    uint64_t v18 = a1;
    int v40 = ((a5 != 0) | a8) & v14;
    unsigned int v42 = (a8 >> 2) & 1;
    CFURLRef v19 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    if (dword_1E9350BF0 >= 2)
    {
      int v36 = a6;
      int v37 = a7;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v18 = a1;
      CFURLRef v19 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      a7 = v37;
      a6 = v36;
    }
    if (a2 == 0.0)
    {
      if (dword_1E9350BF0 >= 2)
      {
        int v22 = a6;
        int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LOBYTE(v15) = a8;
        CFURLRef v19 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        a6 = v22;
      }
      *a11 = 0;
      int v21 = 0;
      if (!a6)
      {
        BOOL v41 = 0;
LABEL_57:
        if (v15 & 1 | (v21 != 4)) {
          a2 = 0.0;
        }
        if (*((_DWORD *)v19 + 764))
        {
          CFIndex v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a10 = v21;
        if (v13) {
          *uint64_t v13 = v41;
        }
        if (a13) {
          *a13 = a2;
        }
        return 0;
      }
      goto LABEL_44;
    }
    if (!a6)
    {
      if (dword_1E9350BF0 >= 2)
      {
        uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LOBYTE(v15) = a8;
      }
      BOOL v41 = 0;
      *a11 = 0;
      int v21 = 3;
      goto LABEL_57;
    }
    if ((v15 & 2) != 0)
    {
      int v21 = 4;
    }
    else if (v15)
    {
      int v21 = 2;
    }
    else
    {
      int v21 = 4;
      if (a4 != 4 && (v15 & 4) == 0)
      {
        int v38 = a7;
        if (a9 >= 4)
        {
          CFDateRef v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v21 = 2;
          unsigned int v15 = a8;
          CFURLRef v19 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
          uint64_t v13 = a12;
          a7 = v38;
        }
        else
        {
          int v21 = dword_194993210[a9];
        }
        if (dword_1E9350BF0 < 2)
        {
          uint64_t v18 = a1;
        }
        else
        {
          CFNumberRef v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unsigned int v15 = a8;
          uint64_t v18 = a1;
          CFURLRef v19 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
          a7 = v38;
        }
      }
    }
    *a11 = 0;
    BOOL v26 = a4 == 3 || a4 == 0;
    if (v21 == 4 && (!a7 ? (BOOL v27 = a4 == 4) : (BOOL v27 = 1), !v27 || ((v15 >> 3) & 1) != 0))
    {
      long long v45 = *MEMORY[0x1E4F1F9F8];
      uint64_t v46 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      playerfig_performStartupTasksForEvents(v18, (v26 || (v15 & 8) != 0) | 4, v42, 0, &v45);
    }
    else
    {
      if ((v15 & 8) != 0 || a4 == 3 || !a4)
      {
        long long v45 = *MEMORY[0x1E4F1F9F8];
        uint64_t v46 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        playerfig_performStartupTasksForEvents(v18, 1, v42, 0, &v45);
      }
      else if (!a7)
      {
        goto LABEL_44;
      }
      if (v21 != 4)
      {
LABEL_44:
        int v28 = v40;
        goto LABEL_45;
      }
    }
    LODWORD(v45) = 0;
    if (playerfig_isWaitingForAnyStartupTask(v18, &v45))
    {
      int v21 = v45;
      *a11 = 1;
      int v28 = v14;
LABEL_45:
      BOOL v31 = a4 != 4 && v21 == 4 || v28 != 0;
      BOOL v41 = v31;
      goto LABEL_57;
    }
    int v21 = 4;
    goto LABEL_44;
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_enterPlaybackState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 52) == a2) {
    return 0;
  }
  *(_DWORD *)(DerivedStorage + 52) = a2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v5 = FigDispatchAsyncPostNotification();
  if (Mutable) {
    CFRelease(Mutable);
  }
  playerfig_updateStartHostTimeEstimatesOfAllItems(a1);
  return v5;
}

uint64_t playerfig_setBossRateWithFade(const void *a1, int a2, CMTime *a3, CMTime *a4, CMTime *a5, float a6, float a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v24, 0, sizeof(v24));
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v24, HostTimeClock);
  if (dword_1E9350BF0)
  {
    int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a6 == 0.0)
  {
    float Seconds = 0.0;
    if ((a3->flags & 0x1D) == 1)
    {
      CMTime time = *a3;
      float Seconds = CMTimeGetSeconds(&time);
    }
    playerfig_applySoftwareVolume((uint64_t)a1, @"SoftwareVolume1", 1, 0.0, Seconds);
    goto LABEL_7;
  }
  if (a7 != 0.0)
  {
LABEL_7:
    CMTime time = *a4;
    CMTime rhs = *a5;
    return playerfig_setBossRateAndAnchorTime(a1, a2, (long long *)&time.value, (long long *)&rhs.value, a6);
  }
  float v19 = 0.0;
  if ((a3->flags & 0x1D) == 1)
  {
    CMTime time = *a3;
    float v19 = CMTimeGetSeconds(&time);
  }
  playerfig_applySoftwareVolume((uint64_t)a1, @"SoftwareVolume1", 1, 0.0, 0.0);
  float v20 = 1.0;
  if (*(unsigned char *)(DerivedStorage + 773)) {
    float v20 = 0.0;
  }
  playerfig_applySoftwareVolume((uint64_t)a1, @"SoftwareVolume5", 1, v20, 0.0);
  CMTime time = *a4;
  CMTime rhs = *a5;
  uint64_t v18 = playerfig_setBossRateAndAnchorTime(a1, a2, (long long *)&time.value, (long long *)&rhs.value, a6);
  if (*(unsigned char *)(DerivedStorage + 772)) {
    playerfig_applySoftwareVolume((uint64_t)a1, @"SoftwareVolume2", 1, *(float *)(DerivedStorage + 768), 0.0);
  }
  playerfig_applySoftwareVolume((uint64_t)a1, @"SoftwareVolume1", 0, *(float *)(DerivedStorage + 764), v19);
  return v18;
}

uint64_t playerfig_performStartupTasksForEvents(uint64_t a1, int a2, uint64_t a3, int a4, long long *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 1112);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v7 >= (uint64_t)Count) {
      return v8;
    }
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1112), v7);
    char v22 = 0;
    CFTypeRef cf = 0;
    CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 504);
    if (v11 && CFArrayGetCount(v11) >= 1) {
      int v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    }
    else {
      int v12 = 0;
    }
    FigPlayerStartupTaskCopyRequiredParameters((uint64_t)ValueAtIndex, (__CFArray **)&cf);
    NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties(a1, (uint64_t)v12, (CFArrayRef)cf);
    int v14 = FigCFArrayContainsValue();
    if (a4 && v14) {
      FigCFDictionarySetInt32();
    }
    if FigCFArrayContainsValue() && (*((unsigned char *)a5 + 12))
    {
      long long v25 = *a5;
      uint64_t v26 = *((void *)a5 + 2);
      FigCFDictionarySetCMTime();
    }
    if (FigCFArrayContainsValue()) {
      FigCFDictionarySetFloat32();
    }
    if (FigCFArrayContainsValue()) {
      FigCFDictionarySetFloat32();
    }
    if (FigCFArrayContainsValue())
    {
      long long v25 = *MEMORY[0x1E4F1F9F8];
      uint64_t v26 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      itemfig_GetCurrentTime((uint64_t)v12, (uint64_t)&v25);
      long long v23 = v25;
      uint64_t v24 = v26;
      FigCFDictionarySetCMTime();
    }
    uint64_t v8 = FigPlayerStartupTaskNotifyOfEvents((uint64_t)ValueAtIndex, a2, (uint64_t)NotificationPayloadForProperties, (BOOL *)&v22);
    if (v8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      char v22 = 1;
    }
    if (cf) {
      CFRelease(cf);
    }
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
    if (v22)
    {
      if (!dword_1E9350BF0) {
        goto LABEL_32;
      }
    }
    else if (!dword_1E9350BF0)
    {
      goto LABEL_32;
    }
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_32:
    ++v7;
  }
}

uint64_t playerfig_isWaitingForAnyStartupTask(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v4 = 0;
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 1112);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v4 >= (uint64_t)Count) {
      break;
    }
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1112), v4++);
    if (!FigPlayerStartupTaskDoesAllowStartup((uint64_t)ValueAtIndex))
    {
      *a2 = FigPlayerStartupTaskGetWaitingState((uint64_t)ValueAtIndex);
      return 1;
    }
  }
  return 0;
}

void playerfig_updateStartHostTimeEstimatesOfAllItems(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 504);
  if (v3 && CFArrayGetCount(v3) >= 1) {
    playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems(a1, 0);
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t playerfig_setBossRateAndAnchorTime(const void *a1, int a2, long long *a3, long long *a4, float a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  uint64_t v12 = DerivedStorage;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (*(void *)(v12 + 512)) {
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v13 = 0;
  }
  if (*(float *)(v12 + 48) != a5 && *(_DWORD *)(v12 + 52) == 4 && dword_1E9350BF0 != 0)
  {
    unsigned int v36 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(v12 + 544))
  {
    *(unsigned char *)(v12 + 544) = 0;
    playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)a1, *(_DWORD *)(v12 + 552));
  }
  if ((*((unsigned char *)a3 + 12) & 1) == 0
    && (*((_DWORD *)a4 + 3) & 0x1D) == 1
    && CFArrayGetCount(*(CFArrayRef *)(v12 + 504)) >= 1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 504), 0);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    float v19 = *(void (**)(const void *, long long *))(v18 + 32);
    if (v19) {
      v19(ValueAtIndex, a3);
    }
    if ((*((unsigned char *)a3 + 12) & 1) == 0)
    {
      uint64_t v20 = MEMORY[0x1E4F1FA48];
      *a3 = *MEMORY[0x1E4F1FA48];
      *((void *)a3 + 2) = *(void *)(v20 + 16);
    }
  }
  if (CFArrayGetCount(*(CFArrayRef *)(v12 + 504)) >= 1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 504), 0);
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    uint64_t v22 = v21;
    if (*(float *)(v12 + 48) == 0.0)
    {
      itemfig_invalidateRampOutTimer();
    }
    else if (FigPlaybackBossGetRate(*(void *)(v21 + 352)) == 0.0)
    {
      *(unsigned char *)(v22 + 1312) = 0;
    }
    if ((*((_DWORD *)a4 + 3) & 0x1D) == 1)
    {
      if (!dword_1E9350BF0)
      {
LABEL_37:
        long long v25 = *a3;
        *(void *)(v22 + 564) = *((void *)a3 + 2);
        *(_OWORD *)(v22 + 548) = v25;
        long long v26 = *a4;
        *(void *)(v22 + 588) = *((void *)a4 + 2);
        *(_OWORD *)(v22 + 572) = v26;
        goto LABEL_38;
      }
      uint64_t v34 = v13;
      unsigned int v36 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      long long v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      if (!v13 || (*(_DWORD *)(v13 + 584) & 0x1D) != 1 || !dword_1E9350BF0) {
        goto LABEL_37;
      }
      uint64_t v34 = v13;
      unsigned int v36 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v13 = v34;
    goto LABEL_37;
  }
LABEL_38:
  playerfig_cleanupOverlappedOutroComponents((uint64_t)a1, 0);
  unsigned int v27 = playerfig_isCurrentItemQuiescent();
  if (v27)
  {
    if (dword_1E9350BF0)
    {
      unsigned int v36 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v29 = v36;
      if (os_log_type_enabled(v28, type)) {
        unsigned int v30 = v29;
      }
      else {
        unsigned int v30 = v29 & 0xFFFFFFFE;
      }
      if (v30)
      {
        LODWORD(v37.value) = 136315138;
        *(CMTimeValue *)((char *)&v37.value + 4) = (CMTimeValue)"playerfig_setBossRateAndAnchorTime";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E2B0](*(void *)(v12 + 496));
    CMTime time = *(CMTime *)a3;
    CMTime v37 = *(CMTime *)a4;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&time, (uint64_t)&v37, 0);
    uint64_t matched = 0;
  }
  else
  {
    if (!*(void *)(v12 + 512))
    {
      uint64_t matched = 0;
LABEL_59:
      MEMORY[0x19970E2B0](*(void *)(v12 + 496));
      return matched;
    }
    if (*(void *)(v13 + 352))
    {
      if (*(unsigned char *)(v13 + 1697))
      {
        float v31 = 0.0;
        if (*(_DWORD *)(v12 + 52) == 4) {
          float v31 = *(float *)(v12 + 48);
        }
        itemfig_updateAccessLogEntry(v31);
      }
      itemfig_reportingAgentReportPlayStartMovieTime();
      itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(void *)(v12 + 512), 0);
      uint64_t v32 = *(void *)(v12 + 512);
      CMTime time = *(CMTime *)a3;
      CMTime v37 = *(CMTime *)a4;
      uint64_t matched = itemfig_matchBossRateToPlayerRateAndPlaybackState(v32, &time, &v37);
      LOBYTE(time.value) = *(float *)(v12 + 48) != 0.0;
      FigCFArrayApplyFunction();
    }
    else
    {
      uint64_t matched = 0;
    }
    if (*(_DWORD *)(v12 + 52) == 4 && *(float *)(v12 + 48) != 0.0) {
      itemfig_ReportAudioPlaybackThroughFigLog(*(void *)(v12 + 512));
    }
  }
  if (*(void *)(v12 + 512)) {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 1996) = a2;
  }
  if (!v27) {
    goto LABEL_59;
  }
  return matched;
}

CFArrayRef playerfig_isCurrentItemQuiescent()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef result = *(const __CFArray **)(DerivedStorage + 504);
  if (result)
  {
    if (CFArrayGetCount(result) < 1)
    {
      return 0;
    }
    else if (*(void *)(DerivedStorage + 512))
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      return (const __CFArray *)(*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 480) != 0);
    }
    else
    {
      return (const __CFArray *)1;
    }
  }
  return result;
}

uint64_t playerfig_FigImageQueueSetAsyncApply(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a2;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 40);
  if (v9)
  {
    return v9(a1, v3);
  }
  return result;
}

uint64_t playerfig_setRateForReason(const void *a1, unsigned int a2, float a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  if (dword_1E9350BF0)
  {
    unsigned int v35 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  uint64_t v9 = (CMTime *)MEMORY[0x1E4F1F9F8];
  if (a3 <= 0.0 || *(float *)(DerivedStorage + 48) != 0.0 || CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
  {
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
LABEL_17:
    CMTime time = *v9;
    CMTime v36 = time;
    uint64_t v22 = a1;
    float v23 = a3;
    unsigned int v24 = a2;
    uint64_t v21 = v9;
    goto LABEL_18;
  }
  uint64_t ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  float v12 = *(float *)(v11 + 1292);
  v13.n128_u32[0] = *(_DWORD *)(v11 + 1296);
  if (v13.n128_f32[0] > 0.0)
  {
    uint64_t v14 = v11;
    CMTime v36 = *v9;
    int Duration = itemfig_GetDuration((uint64_t)ValueAtIndex, (uint64_t)&v36);
    CMTime time = v36;
    v13.n128_f64[0] = CMTimeGetSeconds(&time);
    if (Duration) {
      goto LABEL_11;
    }
    float v16 = *(float *)(v14 + 1296);
    if (v13.n128_f64[0] <= (float)(*(float *)(v14 + 1292) + v16)) {
      goto LABEL_11;
    }
    CMTimeMakeWithSeconds(&v33, v13.n128_f64[0] - v16 + 0.05, 1000);
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    uint64_t v18 = v17;
    float v19 = *(NSObject **)(v17 + 1304);
    if (!v19)
    {
      float v31 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v17 + 104));
      *(void *)(v18 + 1304) = v31;
      if (!v31)
      {
        FigSignalErrorAt();
        goto LABEL_11;
      }
      dispatch_set_context(v31, ValueAtIndex);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v18 + 1304), (dispatch_function_t)itemfig_rampOut);
      *(void *)(v18 + 2024) = voucher_copy();
      dispatch_resume(*(dispatch_object_t *)(v18 + 1304));
      if (CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v18 + 328), *(dispatch_source_t *)(v18 + 1304)))
      {
LABEL_11:
        uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        goto LABEL_12;
      }
      float v19 = *(NSObject **)(v18 + 1304);
    }
    uint64_t v20 = *(OpaqueCMTimebase **)(v18 + 328);
    CMTime time = v33;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v20, v19, &time, 0);
    goto LABEL_11;
  }
LABEL_12:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496), v13);
  if (v12 <= 0.0 || a3 == 0.0 || *(float *)(DerivedStorage + 48) != 0.0) {
    goto LABEL_17;
  }
  CMTimeMakeWithSeconds(&v32, v12, 1000);
  CMTime time = *v9;
  CMTime v36 = time;
  uint64_t v21 = &v32;
  uint64_t v22 = a1;
  float v23 = a3;
  unsigned int v24 = a2;
LABEL_18:
  uint64_t v25 = playerfig_setRateGuts(v22, v24, v21, (uint64_t)&time, (uint64_t)&v36, v23);
  if (v25 && *((_DWORD *)v7 + 764))
  {
    unsigned int v35 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    long long v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v27 = v35;
    if (os_log_type_enabled(v26, type)) {
      unsigned int v28 = v27;
    }
    else {
      unsigned int v28 = v27 & 0xFFFFFFFE;
    }
    if (v28)
    {
      if (a1) {
        unsigned int v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      }
      else {
        unsigned int v29 = "";
      }
      LODWORD(v36.value) = 136315906;
      *(CMTimeValue *)((char *)&v36.value + 4) = (CMTimeValue)"playerfig_setRateForReason";
      LOWORD(v36.flags) = 2048;
      *(void *)((char *)&v36.flags + 2) = a1;
      HIWORD(v36.epoch) = 2082;
      CMTime v37 = v29;
      __int16 v38 = 1024;
      LODWORD(v39) = v25;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v25;
}

void itemfig_rampOut(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    CFIndex v4 = (const void *)v3;
    id v5 = *(id *)(DerivedStorage + 2024);
    voucher_adopt();
    *(unsigned char *)(DerivedStorage + 1312) = 1;
    playerfig_applySoftwareVolume((uint64_t)v4, @"SoftwareVolume2", 1, 0.0, *(float *)(DerivedStorage + 1296));
    itemfig_ReachedEndGuts(a1);

    CFRelease(v4);
  }
}

void playerfig_updateEffectiveResourceConservationLevel(const void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf)) {
    goto LABEL_36;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (*(float *)(DerivedStorage + 48) == 0.0) {
    int v3 = *(_DWORD *)(DerivedStorage + 68);
  }
  else {
    int v3 = 0;
  }
  int v4 = *(_DWORD *)(DerivedStorage + 72);
  *(_DWORD *)(DerivedStorage + 72) = v3;
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v3 = *(_DWORD *)(DerivedStorage + 72);
  }
  if (v3 != v4)
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = *(void *)(v6 + 352);
      BOOL v9 = v8 != 0;
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v10 + 368;
        while (1)
        {
          CFArrayRef v13 = *(const __CFArray **)(v12 + v11);
          if (v13)
          {
            if (CFArrayGetCount(v13) > 0) {
              break;
            }
          }
          v11 += 8;
          if (v11 == 112) {
            goto LABEL_14;
          }
        }
        int v14 = 1;
      }
      else
      {
LABEL_14:
        int v14 = 0;
      }
      int v15 = *(_DWORD *)(DerivedStorage + 72);
      BOOL v16 = v15 < 3 || v8 == 0;
      if (!v16)
      {
        playerfig_cleanupOverlappedOutroComponents((uint64_t)a1, 0);
        playeritemfig_releaseRenderPipelines(a1, *(void *)(DerivedStorage + 512), cf);
        *(unsigned char *)(v7 + 993) = 0;
        playerfig_disturbPlayQueue();
LABEL_34:
        playerfig_configureDownloadInPlayQueue();
        playerfig_configureCacheVolatilityInPlayQueue();
        goto LABEL_35;
      }
      char v17 = v14 ^ 1;
      if (v15 != 2) {
        char v17 = 1;
      }
      if ((v17 & 1) == 0)
      {
        playeritemfig_releaseRenderPipelines(a1, *(void *)(DerivedStorage + 512), cf);
        *(unsigned char *)(v7 + 993) = 0;
        goto LABEL_34;
      }
    }
    else
    {
      BOOL v9 = 0;
      int v14 = 0;
      int v15 = *(_DWORD *)(DerivedStorage + 72);
    }
    if (v15 <= 1 && *(_DWORD *)(DerivedStorage + 60))
    {
      BOOL v16 = v14 == 0;
      char v18 = !v9;
      uint64_t v19 = *(void *)(DerivedStorage + 512);
      if (!v16) {
        char v18 = 1;
      }
      if (v18)
      {
        if (v19)
        {
          if (!v9)
          {
            playerfig_repreparePlayQueue(a1, cf);
            if (v7)
            {
              if (*(void *)(v7 + 352))
              {
                itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(void *)(DerivedStorage + 512), 0);
                uint64_t v20 = *(void *)(DerivedStorage + 512);
                v23[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
                CMTime v22 = v23[0];
                itemfig_matchBossRateToPlayerRateAndPlaybackState(v20, v23, &v22);
              }
            }
          }
        }
      }
      else if (itemfig_rebuildRenderPipelinesAndBossGuts(v19, 0, 0, 1, 0, 0, 1, 0) {
             || itemfig_rebuildRenderPipelinesAndBossGuts(*(void *)(DerivedStorage + 512), 1, 1, 1, 0, cf, 0, 0))
      }
      {
        MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
        v23[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime v22 = v23[0];
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)v23, (uint64_t)&v22, cf);
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
      }
      else
      {
        playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, *(const __CFString **)(DerivedStorage + 512), MEMORY[0x1E4F1F9F8]);
      }
    }
    goto LABEL_34;
  }
LABEL_35:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
LABEL_36:
  if (cf)
  {
    FigDeferredTransactionCommit((uint64_t)cf);
    CFRelease(cf);
  }
}

CFArrayRef playerfig_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v4 = 0;
  BOOL v5 = a2 == 0;
  while (1)
  {
    CFArrayRef result = *(const __CFArray **)(DerivedStorage + 504);
    if (result) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (v4 >= (uint64_t)result) {
      break;
    }
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
    if (v5)
    {
      itemfig_clearCoordinatedPlaybackSynchronizationTimebase();
      BOOL v5 = 1;
    }
    else
    {
      BOOL v5 = ValueAtIndex == a2;
    }
    ++v4;
  }
  return result;
}

uint64_t playerfig_stopResetDisturbReprepareAndResumeWithTransaction(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (dword_1E9350BF0)
  {
    LODWORD(v27.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a4)
  {
    uint64_t v10 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
    if (v10)
    {
      uint64_t v17 = v10;
      goto LABEL_27;
    }
    a4 = cf;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  playerfig_cleanupOverlappedOutroComponents((uint64_t)a1, 0);
  if ((*(unsigned char *)(a2 + 12) & 1) == 0 && (*(unsigned char *)(a3 + 12) & 1) == 0 && *(float *)(DerivedStorage + 48) > 0.0)
  {
    CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 504);
    if (v11)
    {
      if (CFArrayGetCount(v11) >= 1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        CMClockOrTimebaseRef v13 = CMTimebaseCopySource(*(CMTimebaseRef *)(v12 + 328));
        memset(&v27, 0, sizeof(v27));
        CMSyncGetTime(&v27, v13);
        outRelativefloat Rate = 0.0;
        CMTime type = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime outRelativeToClockOrTimebaseAnchorTime = type;
        if (!CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(v12 + 328), v13, &outRelativeRate, &type, &outRelativeToClockOrTimebaseAnchorTime)&& outRelativeRate > 0.0)
        {
          CMTime time1 = outRelativeToClockOrTimebaseAnchorTime;
          CMTime time2 = v27;
          if (CMTimeCompare(&time1, &time2) < 1)
          {
            if (!dword_1E9350BF0) {
              goto LABEL_19;
            }
            uint64_t v21 = a2;
            int v23 = 0;
            os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
            int v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          }
          else
          {
            *(CMTime *)a2 = type;
            CMClockRef HostTimeClock = CMClockGetHostTimeClock();
            CMTime time2 = outRelativeToClockOrTimebaseAnchorTime;
            CMSyncConvertTime(&time1, &time2, v13, HostTimeClock);
            *(CMTime *)a3 = time1;
            if (!dword_1E9350BF0) {
              goto LABEL_19;
            }
            uint64_t v21 = a2;
            int v23 = 0;
            os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
            uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a2 = v21;
        }
LABEL_19:
        if (v13) {
          CFRelease(v13);
        }
      }
    }
  }
  if (*(void *)(DerivedStorage + 512))
  {
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    playerfig_pauseRenderPipelines();
    *(unsigned char *)(v16 + 993) = 0;
  }
  playeritemfig_releaseRenderPipelines(a1, 0, a4);
  playerfig_disturbPlayQueue();
  uint64_t v17 = playerfig_repreparePlayQueue(a1, a4);
  if (*(void *)(DerivedStorage + 512) && *(void *)(CMBaseObjectGetDerivedStorage() + 352))
  {
    itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(void *)(DerivedStorage + 512), 0);
    uint64_t v18 = *(void *)(DerivedStorage + 512);
    CMTime time1 = *(CMTime *)a2;
    CMTime time2 = *(CMTime *)a3;
    itemfig_matchBossRateToPlayerRateAndPlaybackState(v18, &time1, &time2);
  }
  playerfig_updateStartHostTimeEstimatesOfAllItems((uint64_t)a1);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
LABEL_27:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t playerfig_repreparePlayQueue(const void *a1, const void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 512)) {
    return 0;
  }
  char v11 = 0;
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t PlaybackPrerequisitePropertiesReady = itemfig_makePlaybackPrerequisitePropertiesReady(*(void *)(DerivedStorage + 512), &v11);
  if (v11)
  {
    if (*(_DWORD *)(DerivedStorage + 60) == 2)
    {
      playerfig_UpdateAudioSessionPreferredDeviceFormat();
      playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
      playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)a1);
    }
    else if (dword_1E9350BF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    itemfig_InformStakeholdersOfBestAvailableAudioContentType(*(void *)(DerivedStorage + 512));
  }
  else if (dword_1E9350BF0)
  {
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(void *)(v5 + 352)) {
    return playerfig_prepareWorkingItem(a1, 0, a2);
  }
  if (dword_1E9350BF0)
  {
    BOOL v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return PlaybackPrerequisitePropertiesReady;
}

CFIndex playerfig_configureCacheVolatilityInPlayQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  CFIndex v2 = result;
  int v3 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  if (*(_DWORD *)(DerivedStorage + 60) && *(int *)(DerivedStorage + 72) <= 2) {
    int v3 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  if (result >= 1)
  {
    CFIndex v4 = 0;
    uint64_t v5 = *v3;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
      CFIndex result = *(void *)(CMBaseObjectGetDerivedStorage() + 128);
      if (result)
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        CFIndex result = CMBaseObjectIsMemberOfClass();
        if (result)
        {
          uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
          uint64_t VTable = CMBaseObjectGetVTable();
          uint64_t v9 = *(void *)(VTable + 8);
          CFIndex result = VTable + 8;
          uint64_t v8 = v9;
          if (v9) {
            uint64_t v10 = v8;
          }
          else {
            uint64_t v10 = 0;
          }
          char v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v10 + 56);
          if (v11) {
            CFIndex result = v11(CMBaseObject, @"CRABS_AllowCacheMemoryToBeVolatile", v5);
          }
        }
      }
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

void playerfig_pauseRenderPipelines()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    uint64_t v1 = CMBaseObjectGetDerivedStorage();
    uint64_t v2 = *(void *)(v1 + 352);
    if (v2)
    {
      if (*(unsigned char *)(v1 + 480))
      {
        char context = 0;
        CFSetApplyFunction(*(CFSetRef *)(v1 + 360), (CFSetApplierFunction)fp_setRateToZeroIfTimebaseStarter, &context);
        if (!context) {
          CMTimebaseSetRate(*(CMTimebaseRef *)(v1 + 328), 0.0);
        }
      }
      else
      {
        FigPlaybackBossSetRate(v2, 0, 0.0);
      }
    }
  }
}

void fp_setRateToZeroIfTimebaseStarter(uint64_t a1, unsigned char *a2)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    v7(FigBaseObject, @"IsTimebaseStarter", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v8 = cf;
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  if (v8 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    char v11 = *(void (**)(uint64_t, long long *, long long *, double, double))(v10 + 8);
    if (v11)
    {
      long long v15 = *MEMORY[0x1E4F1F9F8];
      uint64_t v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v13 = v15;
      uint64_t v14 = v16;
      v11(a1, &v15, &v13, 0.0, 0.0);
    }
    *a2 = 1;
    CFTypeRef v8 = cf;
  }
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t playerfig_deferredLatencyChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (playerfig_isCurrentItemQuiescent())
  {
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    CMTime BOOLean = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v17 = BOOLean;
    return playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&BOOLean, (uint64_t)&v17, 0);
  }
  uint64_t v5 = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](v5[62]);
  MEMORY[0x19970E910](v5[57]);
  uint64_t v6 = (const void *)v5[58];
  if (v6)
  {
    CFTypeRef v7 = CFRetain(v6);
    MEMORY[0x19970E930](v5[57]);
    if (v7)
    {
      BOOLean.CMTimeValue value = 0;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (!v8
        || (uint64_t v9 = *(void (**)(CFTypeRef, __CFString *, void, CMTime *))(v8 + 8)) == 0
        || (v9(v7, @"FAS_IsActive", *MEMORY[0x1E4F1CF80], &BOOLean), !BOOLean.value)
        || (int Value = CFBooleanGetValue((CFBooleanRef)BOOLean.value), CFRelease((CFTypeRef)BOOLean.value), !Value)
        || (CFArrayRef v11 = (const __CFArray *)v5[63]) == 0)
      {
LABEL_19:
        CFRelease(v7);
        goto LABEL_20;
      }
      char v12 = 0;
      long long v13 = (CFArrayRef *)(v5 + 63);
LABEL_14:
      if (CFArrayGetCount(v11) >= 1)
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*v13, 0);
        if (ValueAtIndex)
        {
          uint64_t v15 = (uint64_t)ValueAtIndex;
          uint64_t v16 = *(void *)(CMBaseObjectGetDerivedStorage() + 352);
          if (v16)
          {
            FigPlaybackBossSetRate(v16, 0, 0.0);
            CMTime BOOLean = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
            CMTime v17 = BOOLean;
            itemfig_matchBossRateToPlayerRateAndPlaybackState(v15, &BOOLean, &v17);
          }
        }
      }
      if (v12) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else
  {
    MEMORY[0x19970E930](v5[57]);
  }
  CFArrayRef v11 = (const __CFArray *)v5[63];
  if (v11)
  {
    CFTypeRef v7 = 0;
    long long v13 = (CFArrayRef *)(v5 + 63);
    char v12 = 1;
    goto LABEL_14;
  }
LABEL_20:
  MEMORY[0x19970E2B0](v5[62]);
  return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
}

unsigned char *playerfig_RenderPipelineFailedToStart_setRateForInternalReason_0_f(const void *a1)
{
  CFIndex result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    return (unsigned char *)playerfig_pauseForInternalReason(a1, 3u);
  }
  return result;
}

void playerfig_deferredRenderPipelineRequiresManualRestart(uint64_t a1, const void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 504);
    if (v5 && CFArrayGetCount(v5) >= 1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(v7 + 480))
      {
        MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
        v16[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime v15 = v16[0];
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)v16, (uint64_t)&v15, 0);
        if (*(unsigned char *)(DerivedStorage + 58))
        {
LABEL_15:
          if (!*(unsigned char *)(DerivedStorage + 58))
          {
            if (dword_1E9350BF0)
            {
              long long v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          CFRelease(a2);
          return;
        }
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
        CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 504);
        if (v8 && CFArrayGetCount(v8) >= 1)
        {
          uint64_t v9 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
          uint64_t v10 = CMBaseObjectGetDerivedStorage();
          if (*(unsigned char *)(v10 + 480))
          {
            CFArrayRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            uint64_t v14 = v10;
            itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v9, 0);
            FigPlaybackBossSetRate(*(void *)(v14 + 352), *(const void **)(v14 + 512), 0.0);
          }
        }
      }
      else
      {
        uint64_t v12 = v7;
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)ValueAtIndex, 0);
        FigPlaybackBossSetRate(*(void *)(v12 + 352), *(const void **)(v12 + 512), 0.0);
        if (*(unsigned char *)(DerivedStorage + 58))
        {
          v16[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime v15 = v16[0];
          itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)ValueAtIndex, v16, &v15);
        }
      }
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    goto LABEL_15;
  }
}

void playerfig_deferredRenderPipelineWantsRebuild(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  unsigned int v6 = playerfig_isCurrentItemQuiescent();
  if (*(void *)(DerivedStorage + 912) && CFEqual(a3, @"DeviceHasDisconnected"))
  {
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    goto LABEL_9;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  if (!v6)
  {
LABEL_9:
    long long v9 = *MEMORY[0x1E4F1F9F8];
    uint64_t v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    long long v7 = v9;
    uint64_t v8 = v10;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&v9, (uint64_t)&v7, 0);
    if (!a2) {
      return;
    }
    goto LABEL_6;
  }
  if (!a2) {
    return;
  }
LABEL_6:

  CFRelease(a2);
}

CFStringRef fp_createNextRenderPipelineIdentifierString()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (*(_DWORD *)(DerivedStorage + 956) + 1);
  *(_DWORD *)(DerivedStorage + 956) = v1;
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"R%s.%02d", DerivedStorage + 944, v1);
}

uint64_t itemfig_applyItemAudioCurvesToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 1472);
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v7 + 56);
    if (v8)
    {
      return v8(FigBaseObject, @"SecondaryAudioCurves", v4);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t fp_createCommonRenderPipelineOptionsForTrack(const void *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, __CFDictionary **a7)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  uint64_t v84 = 0;
  CFTypeRef v85 = 0;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v27 = FigSignalErrorAt();
    CMTime v32 = 0;
    goto LABEL_93;
  }
  itemfig_assureContentProtectionReadyForInspection(a1);
  if (!a6 || !DerivedStorage[145])
  {
    CFStringRef v70 = 0;
    CFMutableDictionaryRef theDict = 0;
    goto LABEL_7;
  }
  uint64_t v67 = a3;
  CFStringRef v70 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(v15, a4, 0);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  MEMORY[0x19970E910](*(void *)(v14 + 152));
  uint64_t v17 = DerivedStorage[145];
  uint64_t v18 = *(void *)(v14 + 160);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  long long v26 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v20 + 56);
  if (!v26)
  {
    MEMORY[0x19970E930](*(void *)(v14 + 152));
    goto LABEL_21;
  }
  uint64_t v27 = v26(v17, @"NeroTransport", v18);
  MEMORY[0x19970E930](*(void *)(v14 + 152));
  if (v27)
  {
LABEL_22:
    CFStringRef v33 = v70;
    CMTime v32 = theDict;
    goto LABEL_91;
  }
  if (a2) {
    CFDictionarySetValue(theDict, @"Destination", @"DestinationNero");
  }
  unsigned int v28 = *(const void **)(v14 + 840);
  if (v28) {
    CFDictionarySetValue(theDict, @"ClientSecTask", v28);
  }
  uint64_t v29 = DerivedStorage[145];
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  __int16 v38 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, __CFDictionary *, CFStringRef, CFTypeRef *))(v31 + 8);
  if (!v38)
  {
LABEL_32:
    uint64_t v40 = DerivedStorage[145];
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, __CFDictionary *, CFTypeRef *))(v42 + 104);
    if (v43)
    {
      uint64_t v27 = v43(v40, v15, 3, theDict, &v85);
LABEL_37:
      if (v27) {
        goto LABEL_22;
      }
      goto LABEL_38;
    }
LABEL_21:
    uint64_t v27 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v39 = v38(v29, v15, 3, theDict, v70, &v85);
  if (v39 != -12164)
  {
    uint64_t v27 = v39;
    if (v39 != -12782) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
LABEL_38:
  CFTypeRef v44 = v85;
  if (v85)
  {
    uint64_t v45 = DerivedStorage[146];
    a3 = v67;
    if (!v45)
    {
LABEL_104:
      CFDictionarySetValue(Mutable, @"BossTrack_SampleBufferCryptor", v44);
      goto LABEL_7;
    }
    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v46) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    __int16 v66 = *(uint64_t (**)(CFTypeRef, void, uint64_t))(v47 + 56);
    if (v66)
    {
      uint64_t TrackStorage = v66(v44, *MEMORY[0x1E4F1FDA0], v45);
      if (TrackStorage)
      {
LABEL_106:
        uint64_t v27 = TrackStorage;
        goto LABEL_22;
      }
      CFTypeRef v44 = v85;
      a3 = v67;
      goto LABEL_104;
    }
    goto LABEL_21;
  }
  a3 = v67;
LABEL_7:
  if (a5 == 1986618469 && itemfig_useDroppableFramesMinimumInterval())
  {
    long long v68 = *MEMORY[0x1E4F1F9F8];
    long long v78 = v68;
    CMTimeEpoch v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(void *)CMTimeFlags v79 = v21;
    long long v72 = v68;
    *(void *)&long long v73 = v21;
    FPSupport_GetDisplayRefreshInformation(0, (CMTime *)&v78, (uint64_t)&v72);
    uint64_t v22 = CMBaseObjectGetDerivedStorage();
    v82.CMTimeValue value = 0;
    v87[0] = 0;
    *(_OWORD *)&v83.CMTimeValue value = v68;
    v83.CMTimeEpoch epoch = v21;
    uint64_t v23 = *(void *)(v22 + 968);
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *, void))(v25 + 56);
    if (v34 && !v34(v23, a4, &v82, 0))
    {
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v82.value);
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v37 = v36 ? v36 : 0;
      uint64_t v48 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v37 + 48);
      if (v48)
      {
        if (!v48(FigBaseObject, @"MinSampleDuration", v15, v87)) {
          CMTimeMakeFromDictionary(&v83, (CFDictionaryRef)v87[0]);
        }
      }
    }
    if (v82.value) {
      CFRelease((CFTypeRef)v82.value);
    }
    if (v87[0]) {
      CFRelease(v87[0]);
    }
    uint64_t v49 = CMBaseObjectGetDerivedStorage();
    v82.CMTimeValue value = 0;
    v87[0] = 0;
    int valuePtr = 1065353216;
    uint64_t v50 = *(void *)(v49 + 968);
    uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v51) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = 0;
    }
    unsigned int v53 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *, void))(v52 + 56);
    if (v53 && !v53(v50, a4, &v82, 0))
    {
      uint64_t v54 = FigTrackReaderGetFigBaseObject(v82.value);
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v56 = v55 ? v55 : 0;
      double v57 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v56 + 48);
      if (v57)
      {
        if (!v57(v54, @"MaxEditRate", v15, v87)) {
          CFNumberGetValue((CFNumberRef)v87[0], kCFNumberFloat32Type, &valuePtr);
        }
      }
    }
    if (v82.value) {
      CFRelease((CFTypeRef)v82.value);
    }
    if (v87[0]) {
      CFRelease(v87[0]);
    }
    CMTime v82 = v83;
    FigCFDictionarySetCMTime();
    FigCFDictionarySetFloat32();
    if ((*(unsigned char *)(a3 + 12) & 1) == 0 && (BYTE12(v78) & 0x1D) == 1)
    {
      *(_OWORD *)a3 = v78;
      *(void *)(a3 + 16) = *(void *)v79;
    }
    CMTime v82 = *(CMTime *)a3;
    FigCFDictionarySetCMTime();
    if ((BYTE12(v72) & 0x1D) == 1)
    {
      *(_OWORD *)&v82.CMTimeValue value = v72;
      v82.CMTimeEpoch epoch = v73;
      FigCFDictionarySetCMTime();
    }
  }
  CFMutableDictionaryRef v58 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)(v14 + 781) && (a5 == 1935832172 || a5 == 1668310898)) {
    FigCFDictionarySetValue();
  }
  uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a4, &v84);
  if (TrackStorage) {
    goto LABEL_106;
  }
  if (*(unsigned char *)(v84 + 8)) {
    unsigned int v60 = v58;
  }
  else {
    unsigned int v60 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"BossTrack_EnableForStepping", *v60);
  unsigned __int32 v61 = (const void *)DerivedStorage[99];
  if (v61 && (a5 == 1986618469 || a5 == 1635088502))
  {
    long long v78 = *MEMORY[0x1E4F1FA48];
    *(void *)CMTimeFlags v79 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(_OWORD *)&v79[8] = v78;
    *(void *)&v79[24] = *(void *)v79;
    long long v80 = v78;
    *(_OWORD *)&v81[8] = v78;
    *(void *)int v81 = *(void *)v79;
    *(void *)&v81[24] = *(void *)v79;
    uint64_t v62 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v61, a4, &v78);
    CFStringRef v33 = v70;
    CMTime v32 = theDict;
    if (!v62) {
      goto LABEL_83;
    }
    goto LABEL_89;
  }
  BOOL v63 = a5 == 1835365473;
  CFStringRef v33 = v70;
  CMTime v32 = theDict;
  if (v63)
  {
    uint64_t v64 = (const void *)DerivedStorage[100];
    if (v64)
    {
      long long v78 = *MEMORY[0x1E4F1FA48];
      *(void *)CMTimeFlags v79 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      *(_OWORD *)&v79[8] = v78;
      *(void *)&v79[24] = *(void *)v79;
      long long v80 = v78;
      *(_OWORD *)&v81[8] = v78;
      *(void *)int v81 = *(void *)v79;
      *(void *)&v81[24] = *(void *)v79;
      uint64_t v62 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v64, a4, &v78);
      if (!v62)
      {
LABEL_83:
        long long v74 = *(_OWORD *)&v79[16];
        long long v75 = v80;
        long long v76 = *(_OWORD *)v81;
        long long v77 = *(_OWORD *)&v81[16];
        long long v72 = v78;
        long long v73 = *(_OWORD *)v79;
        if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)&v72))
        {
          long long v72 = v78;
          *(void *)&long long v73 = *(void *)v79;
          FigCFDictionarySetCMTime();
          long long v72 = *(_OWORD *)&v79[8];
          *(void *)&long long v73 = *(void *)&v79[24];
          FigCFDictionarySetCMTime();
          long long v72 = v80;
          *(void *)&long long v73 = *(void *)v81;
          FigCFDictionarySetCMTime();
          long long v72 = *(_OWORD *)&v81[8];
          *(void *)&long long v73 = *(void *)&v81[24];
          FigCFDictionarySetCMTime();
        }
        goto LABEL_90;
      }
LABEL_89:
      uint64_t v27 = v62;
      goto LABEL_91;
    }
  }
LABEL_90:
  uint64_t v27 = 0;
  *a7 = Mutable;
  CFMutableDictionaryRef Mutable = 0;
LABEL_91:
  if (v33) {
    CFRelease(v33);
  }
LABEL_93:
  if (v85) {
    CFRelease(v85);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v27;
}

uint64_t fp_setPropertyOnAllAudioRenderPipelines(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  uint64_t v6 = *(void *)(DerivedStorage + 560);
  if (v6)
  {
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
    if (!v10)
    {
LABEL_17:
      uint64_t v21 = 4294954514;
      goto LABEL_18;
    }
    uint64_t v11 = v10(FigBaseObject, a2, a3);
    if (v11)
    {
LABEL_19:
      uint64_t v21 = v11;
      goto LABEL_18;
    }
  }
  CFArrayRef v12 = *(const __CFArray **)(DerivedStorage + 632);
  if (v12)
  {
    CFIndex Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      CFIndex v14 = Count;
      CFIndex v15 = 0;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 632), v15);
        uint64_t v17 = FigRenderPipelineGetFigBaseObject(ValueAtIndex);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v19 = v18 ? v18 : 0;
        uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 56);
        if (!v20) {
          goto LABEL_17;
        }
        uint64_t v11 = v20(v17, a2, a3);
        if (v11) {
          goto LABEL_19;
        }
      }
      while (v14 != ++v15);
    }
  }
  uint64_t v21 = 0;
LABEL_18:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  return v21;
}

BOOL itemfig_shouldEnableMainVideo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (fp_doesCPEProtectorAllowsVideoOutput(*(void *)(DerivedStorage + 1160)))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1736));
    CFArrayRef v2 = *(const __CFArray **)(DerivedStorage + 1728);
    if (v2) {
      BOOL v3 = CFArrayGetCount(v2) > 0;
    }
    else {
      BOOL v3 = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 1736));
  }
  else
  {
    BOOL v3 = 0;
  }
  MEMORY[0x19970E910](*(void *)(v1 + 224));
  CFArrayRef v4 = *(const __CFArray **)(v1 + 208);
  if (v4) {
    CFIndex Count = CFArrayGetCount(v4);
  }
  else {
    CFIndex Count = 0;
  }
  MEMORY[0x19970E930](*(void *)(v1 + 224));
  MEMORY[0x19970E910](*(void *)(v1 + 240));
  CFArrayRef v6 = *(const __CFArray **)(v1 + 256);
  if (v6) {
    CFIndex v7 = CFArrayGetCount(v6);
  }
  else {
    CFIndex v7 = 0;
  }
  MEMORY[0x19970E930](*(void *)(v1 + 240));
  if (!v3 && (*(unsigned char *)(DerivedStorage + 1824) || Count <= 0) && *(uint64_t *)(v1 + 216) <= 0 && v7 < 1) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 858)) {
    return *(unsigned char *)(DerivedStorage + 2016) == 0;
  }
  return 1;
}

uint64_t fp_buildImageQueueArray(int a1, int a2, CFArrayRef theArray, CFIndex a4, CFArrayRef *a5, CFArrayRef *a6)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CMTimeValue value = 0;
    if (Count >= 1)
    {
      CFMutableDictionaryRef Mutable = 0;
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      int v14 = 1;
      a4 = Count;
      goto LABEL_7;
    }
  }
  else
  {
    CMTimeValue value = 0;
  }
  if (a4 < 1)
  {
    uint64_t v26 = 0;
    goto LABEL_49;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, MEMORY[0x1E4F1D510]);
  int v14 = 0;
LABEL_7:
  theArraya = CFArrayCreateMutable(v13, a4, MEMORY[0x1E4F1D510]);
  if (theArraya)
  {
    CFAllocatorRef allocator = v13;
    CFIndex v15 = 0;
    if (v14) {
      p_int valuePtr = 0;
    }
    else {
      p_int valuePtr = &valuePtr;
    }
    do
    {
      int valuePtr = 0;
      CFArrayRef v17 = *a6;
      if (*a6) {
        CFArrayRef v17 = (const __CFArray *)CFArrayGetCount(v17);
      }
      if (v15 < (uint64_t)v17)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*a6, v15);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      }
      CFArrayRef v19 = *a5;
      if (*a5) {
        CFArrayRef v19 = (const __CFArray *)CFArrayGetCount(v19);
      }
      if (v15 < (uint64_t)v19)
      {
        uint64_t v20 = (void *)CFArrayGetValueAtIndex(*a5, v15);
        CMTimeValue value = v20;
        if (v20) {
          CFRetain(v20);
        }
      }
      FPSupport_EnsureCAImageQueue((CFTypeRef *)&value, p_valuePtr, a1, a2);
      CFArrayAppendValue(theArraya, value);
      if (value)
      {
        CFRelease(value);
        CMTimeValue value = 0;
      }
      if ((v14 & 1) == 0)
      {
        CFNumberRef v21 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
        CFArrayAppendValue(Mutable, v21);
        if (v21) {
          CFRelease(v21);
        }
      }
      ++v15;
    }
    while (a4 != v15);
    if (*a6)
    {
      if (Mutable)
      {
        uint64_t v22 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        for (CFIndex i = 0; ; ++i)
        {
          CFArrayRef v24 = *a6;
          if (*a6) {
            CFArrayRef v24 = (const __CFArray *)CFArrayGetCount(v24);
          }
          if (i >= (uint64_t)v24) {
            break;
          }
          uint64_t v25 = CFArrayGetValueAtIndex(*a6, i);
          v34.length = CFArrayGetCount(Mutable);
          v34.location = 0;
          if (!CFArrayContainsValue(Mutable, v34, v25)) {
            CFArrayAppendValue(v22, v25);
          }
        }
      }
      else
      {
        uint64_t v22 = (__CFArray *)CFRetain(*a6);
      }
      FPSupport_DeleteCASlotsInArray(v22);
    }
    else
    {
      uint64_t v22 = 0;
    }
    CFArrayRef v27 = *a5;
    *a5 = theArraya;
    CFRetain(theArraya);
    if (v27) {
      CFRelease(v27);
    }
    CFArrayRef v28 = *a6;
    *a6 = Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    if (v28) {
      CFRelease(v28);
    }
    if (v22) {
      CFRelease(v22);
    }
    CFRelease(theArraya);
    uint64_t v26 = 0;
    if (Mutable) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v26 = FigSignalErrorAt();
    if (Mutable) {
LABEL_48:
    }
      CFRelease(Mutable);
  }
LABEL_49:
  if (value) {
    CFRelease(value);
  }
  return v26;
}

CFArrayRef fp_visualContextArrayIfVideoOutputAllowed(CFArrayRef theArray, uint64_t a2)
{
  CFArrayRef v2 = theArray;
  if (theArray && CFArrayGetCount(theArray) >= 1 && !fp_doesCPEProtectorAllowsVideoOutput(a2)) {
    return 0;
  }
  return v2;
}

uint64_t fp_imageQueueTableCreatedImageQueueCallback()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterAddWeakListener();
}

uint64_t fp_imageQueueTableWillReleaseImageQueueCallback()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListener();
}

uint64_t FigVideoCompositorSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    return v11(FigBaseObject, a2, a3);
  }
  return result;
}

__n128 itemfig_getHighAndLowWaterLevelDurationsForVideoCompositionProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v8 = xmmword_194993238;
  result.n128_u64[0] = 3;
  long long v7 = xmmword_194993250;
  if (*(unsigned char *)(DerivedStorage + 688))
  {
    result.n128_u64[0] = kFigPlayerFileLowWaterLevelDuration_Minimum;
    long long v8 = kFigPlayerFileLowWaterLevelDuration_Minimum;
    long long v7 = kFigPlayerFileLowWaterLevelDuration_Minimum;
  }
  if (a2)
  {
    __n128 result = (__n128)v8;
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = 0;
  }
  if (a3)
  {
    __n128 result = (__n128)v7;
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t itemfig_copyCompositionInstructionAtTime(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 672));
  CFArrayRef v6 = *(const void **)(DerivedStorage + 680);
  if (!v6)
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 672));
    goto LABEL_12;
  }
  CFArrayRef v7 = (const __CFArray *)CFRetain(v6);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 672));
  if (!v7)
  {
LABEL_12:
    *a3 = 0;
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v7);
  CFIndex v9 = Count - 1;
  if (Count < 1) {
    goto LABEL_15;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v11);
    *(_OWORD *)&v17.CMTimeValue value = *(_OWORD *)a2;
    v17.CMTimeEpoch epoch = *(void *)(a2 + 16);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"StartTime");
    memset(&v21, 0, sizeof(v21));
    CMTimeMakeFromDictionary(&v21, Value);
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"EndTime");
    memset(&v20, 0, sizeof(v20));
    CMTimeMakeFromDictionary(&v20, v14);
    if (v9 == v11)
    {
      CMTime time1 = v20;
      CMTime time2 = v17;
      if (!CMTimeCompare(&time1, &time2)) {
        break;
      }
    }
    CMTime time1 = v17;
    CMTime time2 = v21;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime time1 = v20;
      CMTime time2 = v17;
      if (CMTimeCompare(&time1, &time2) >= 1) {
        break;
      }
    }
    if (v10 == ++v11) {
      goto LABEL_15;
    }
  }
  if (ValueAtIndex) {
    CFTypeRef v15 = CFRetain(ValueAtIndex);
  }
  else {
LABEL_15:
  }
    CFTypeRef v15 = 0;
  *a3 = v15;
  CFRelease(v7);
  return 0;
}

uint64_t fp_createFigImageQueueArrayForVideoRenderPipeline(uint64_t a1, uint64_t a2, int a3, const __CFArray *a4, const __CFArray *a5, CFIndex a6, CFArrayRef *a7, CFArrayRef *a8, const __CFArray *a9, uint64_t a10, char a11, void *a12)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMVideoFormatDescriptionRef videoDesc = 0;
  CFTypeRef cf = 0;
  uint64_t v44 = 0;
  fp_visualContextArrayIfVideoOutputAllowed(a4, *(void *)(DerivedStorage + 1160));
  uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v22 = (__CFArray *)MutableCopy;
    if (a3)
    {
LABEL_3:
      if (a9 && CFArrayGetCount(a9) >= 1)
      {
        v47.length = CFArrayGetCount(a9);
        v47.location = 0;
        CFArrayAppendArray(v22, a9, v47);
      }
      if (a11) {
        uint64_t v23 = fp_imageQueueTableWillReleaseImageQueueCallback;
      }
      else {
        uint64_t v23 = 0;
      }
      if (a11) {
        CFArrayRef v24 = fp_imageQueueTableCreatedImageQueueCallback;
      }
      else {
        CFArrayRef v24 = 0;
      }
      uint64_t matched = FigImageQueueTableUpdateToMatchOutputsArray(a10, v22, *(void **)(DerivedStorage + 328), (void (*)(void *, uint64_t))v24, (void (*)(const void *, uint64_t))v23, a1);
      if (!matched)
      {
        FigImageQueueTableCopyFigImageQueueArray(a10, &v44);
        *a12 = v44;
        uint64_t v44 = 0;
      }
      goto LABEL_115;
    }
    uint64_t v26 = *(void *)(DerivedStorage + 968);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v28 + 56);
    if (v29)
    {
      uint64_t v30 = v29(v26, a2, &cf, 0);
      if (!v30)
      {
        uint64_t v30 = itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&videoDesc);
        if (!v30)
        {
          uint64_t v31 = videoDesc;
          CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(videoDesc);
          uint64_t v30 = fp_buildImageQueueArray(Dimensions.width, Dimensions.height, a5, a6, a7, a8);
          if (!v30)
          {
            if (!a7 || !*a7) {
              goto LABEL_3;
            }
            CFIndex Count = CFArrayGetCount(*a7);
            if (Count < 1)
            {
LABEL_111:
              if (*a7 && CFArrayGetCount(*a7) >= 1)
              {
                CFArrayRef v42 = *a7;
                v48.length = CFArrayGetCount(v42);
                v48.location = 0;
                CFArrayAppendArray(v22, v42, v48);
              }
              goto LABEL_3;
            }
            CFIndex v34 = Count;
            CFIndex v35 = 0;
            while (!CFArrayGetValueAtIndex(*a7, v35))
            {
LABEL_110:
              if (v34 == ++v35) {
                goto LABEL_111;
              }
            }
            CAImageQueueSetFlags();
            signed int MediaSubType = CMFormatDescriptionGetMediaSubType(v31);
            if (MediaSubType <= 1902207794)
            {
              if (MediaSubType <= 1685220712)
              {
                if (MediaSubType <= 1667524656)
                {
                  if (MediaSubType <= 1667326823)
                  {
                    if (MediaSubType == 1633771875 || MediaSubType == 1667312947) {
                      goto LABEL_107;
                    }
                    unsigned __int16 v38 = 24931;
                  }
                  else if (MediaSubType > 1667330146)
                  {
                    if (MediaSubType == 1667330147) {
                      goto LABEL_107;
                    }
                    unsigned __int16 v38 = 30307;
                  }
                  else
                  {
                    if (MediaSubType == 1667326824) {
                      goto LABEL_107;
                    }
                    unsigned __int16 v38 = 25456;
                  }
                  int v40 = v38 | 0x63610000;
                  goto LABEL_106;
                }
                if (MediaSubType <= 1667656802)
                {
                  if (MediaSubType != 1667524657 && MediaSubType != 1667574579)
                  {
                    int v40 = 1667575091;
                    goto LABEL_106;
                  }
                  goto LABEL_107;
                }
                if (MediaSubType > 1668047202)
                {
                  if (MediaSubType == 1668047203) {
                    goto LABEL_107;
                  }
                  int v40 = 1668641633;
                }
                else
                {
                  if (MediaSubType == 1667656803) {
                    goto LABEL_107;
                  }
                  int v40 = 1667790435;
                }
LABEL_106:
                if (MediaSubType == v40) {
                  goto LABEL_107;
                }
LABEL_109:
                CAImageQueueSetFlags();
                goto LABEL_110;
              }
              if (MediaSubType <= 1885430578)
              {
                if (MediaSubType <= 1701733237)
                {
                  if (MediaSubType != 1685220713 && MediaSubType != 1700886115)
                  {
                    int v40 = 1701733217;
                    goto LABEL_106;
                  }
                  goto LABEL_107;
                }
                if (MediaSubType > 1882599479)
                {
                  if (MediaSubType == 1882599480) {
                    goto LABEL_107;
                  }
                  int v40 = 1885430115;
                }
                else
                {
                  if (MediaSubType == 1701733238) {
                    goto LABEL_107;
                  }
                  int v40 = 1869117027;
                }
                goto LABEL_106;
              }
              if (MediaSubType <= 1885547314)
              {
                if ((MediaSubType - 1885430579) > 0x3D
                  || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
                {
                  goto LABEL_109;
                }
                goto LABEL_107;
              }
              if (MediaSubType <= 1886745440)
              {
                if (MediaSubType == 1885547315) {
                  goto LABEL_107;
                }
                int v40 = 1885692723;
                goto LABEL_106;
              }
              if (MediaSubType == 1886745441) {
                goto LABEL_107;
              }
              unsigned __int16 v39 = 24931;
            }
            else
            {
              if (MediaSubType > 1902667125)
              {
                if (MediaSubType <= 2053202738)
                {
                  if (MediaSubType <= 1902998903)
                  {
                    if (MediaSubType != 1902667126 && MediaSubType != 1902671459)
                    {
                      int v40 = 1902928227;
                      goto LABEL_106;
                    }
                    goto LABEL_107;
                  }
                  if (MediaSubType > 1903587384)
                  {
                    if (MediaSubType == 1903587385) {
                      goto LABEL_107;
                    }
                    unsigned __int16 v37 = 24931;
                    goto LABEL_96;
                  }
                  if (MediaSubType == 1902998904) {
                    goto LABEL_107;
                  }
                  int v40 = 1903522657;
                }
                else
                {
                  if (MediaSubType <= 2053319474)
                  {
                    if ((MediaSubType - 2053202739) > 0x3D
                      || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
                    {
                      unsigned __int16 v37 = 30307;
LABEL_96:
                      int v40 = v37 | 0x7A610000;
                      goto LABEL_106;
                    }
LABEL_107:
                    if (!FPSupport_IsRunningInAppleVirtualMachine()) {
                      CAImageQueueSetFlags();
                    }
                    goto LABEL_109;
                  }
                  if (MediaSubType > 2053923170)
                  {
                    if (MediaSubType == 2054517601) {
                      goto LABEL_107;
                    }
                    int v40 = 2053923171;
                  }
                  else
                  {
                    if (MediaSubType == 2053319475) {
                      goto LABEL_107;
                    }
                    int v40 = 2053464883;
                  }
                }
                goto LABEL_106;
              }
              if (MediaSubType > 1902324530)
              {
                if (MediaSubType <= 1902405732)
                {
                  if (MediaSubType == 1902324531 || MediaSubType == 1902403958) {
                    goto LABEL_107;
                  }
                  unsigned __int16 v41 = 26673;
                }
                else
                {
                  if (MediaSubType > 1902469938)
                  {
                    if (MediaSubType == 1902469939) {
                      goto LABEL_107;
                    }
                    int v40 = 1902537827;
                    goto LABEL_106;
                  }
                  if (MediaSubType == 1902405733) {
                    goto LABEL_107;
                  }
                  unsigned __int16 v41 = 28024;
                }
                int v40 = v41 | 0x71640000;
                goto LABEL_106;
              }
              if ((MediaSubType - 1902207795) <= 0x3D
                && ((1 << (MediaSubType - 51)) & 0x2020000000000001) != 0
                || (MediaSubType - 1902212657) <= 0x34
                && ((1 << (MediaSubType - 49)) & 0x14000000000001) != 0)
              {
                goto LABEL_107;
              }
              unsigned __int16 v39 = 28771;
            }
            int v40 = v39 | 0x71610000;
            goto LABEL_106;
          }
        }
      }
      uint64_t matched = v30;
    }
    else
    {
      uint64_t matched = 4294954514;
    }
LABEL_115:
    CFRelease(v22);
    goto LABEL_116;
  }
  uint64_t matched = FigSignalErrorAt();
LABEL_116:
  if (cf) {
    CFRelease(cf);
  }
  if (videoDesc) {
    CFRelease(videoDesc);
  }
  return matched;
}

uint64_t fp_buildVideoRenderPipelineForTrack(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, char a5, uint64_t a6, const void *a7, int a8, const __CFArray *a9, const __CFArray *a10, char a11, void *a12)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v98 = 0;
  CFTypeRef v99 = 0;
  Float64 v97 = 0;
  uint64_t v19 = *(void *)(v18 + 968);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v21 + 56);
  if (!v22)
  {
    uint64_t v29 = 0;
    CFStringRef NextRenderPipelineIdentifierString = 0;
    uint64_t v25 = 0;
    uint64_t v31 = 4294954514;
    goto LABEL_25;
  }
  uint64_t v88 = a6;
  uint64_t v23 = v22(v19, a3, &v98, 0);
  if (v23 || (uint64_t v23 = itemfig_copyFormatDescription((uint64_t)v98, (uint64_t *)&v97), v23))
  {
    uint64_t v31 = v23;
    uint64_t v29 = 0;
    CFStringRef NextRenderPipelineIdentifierString = 0;
    uint64_t v25 = 0;
    goto LABEL_25;
  }
  int v91 = a8;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v25 = Mutable;
  if (!Mutable)
  {
    uint64_t v31 = FigSignalErrorAt();
    uint64_t v29 = 0;
LABEL_24:
    CFStringRef NextRenderPipelineIdentifierString = 0;
    goto LABEL_25;
  }
  int v26 = *(_DWORD *)(DerivedStorage + 784);
  uint64_t v27 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v26 == 1)
  {
    uint64_t v28 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  else
  {
    if (v26 != 2) {
      goto LABEL_14;
    }
    uint64_t v28 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455D0], *v28);
LABEL_14:
  CMTime v32 = *(const void **)(DerivedStorage + 792);
  if (v32) {
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F455E0], v32);
  }
  uint64_t v90 = v18;
  if (*(unsigned char *)(DerivedStorage + 857)) {
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F455B0], *v27);
  }
  uint64_t v33 = CMBaseObjectGetDerivedStorage();
  uint64_t v34 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v92 = (__CFString *)CFStringCreateWithFormat(AllocatorForMedia, 0, @"%s:%s.t%d", v34 + 944, v33 + 2048, a3);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
  uint64_t v36 = *(const void **)(DerivedStorage + 160);
  if (v36) {
    CFTypeRef v37 = CFRetain(v36);
  }
  else {
    CFTypeRef v37 = 0;
  }
  uint64_t v29 = v25;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 152));
  unsigned __int16 v38 = v97;
  uint64_t v25 = (__CFDictionary *)v92;
  uint64_t v31 = FPSupport_createVideoRenderPipeline(v29, a4, 1, a9, a10, v91, v97, *(_DWORD *)(DerivedStorage + 116), a5, v37, a7, *(_DWORD *)(DerivedStorage + 472), a11, v92, &v99);
  if (v37) {
    CFRelease(v37);
  }
  if (v31) {
    goto LABEL_24;
  }
  CFStringRef NextRenderPipelineIdentifierString = fp_createNextRenderPipelineIdentifierString();
  if (!NextRenderPipelineIdentifierString)
  {
    uint64_t v31 = 4294954510;
LABEL_25:
    if (v99) {
      CFRelease(v99);
    }
    goto LABEL_100;
  }
  if (a11)
  {
    cf.CMTimeValue value = 0;
    uint64_t v39 = FigGetAllocatorForMedia();
    FigSampleAttachmentCollectionRulesCopyForFilePlayback(v39, v38, &cf);
    CMTimeValue value = cf.value;
    if (cf.value)
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v99);
      uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v42) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v44 = *(void (**)(uint64_t, __CFString *, CMTimeValue))(v43 + 56);
      if (v44) {
        v44(FigBaseObject, @"SampleAttachmentCollectionRules", value);
      }
      if (cf.value) {
        CFRelease((CFTypeRef)cf.value);
      }
    }
  }
  if (*(unsigned char *)(DerivedStorage + 1107))
  {
    cf.CMTimeValue value = 0;
    CFDictionaryRef v45 = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    CFAllocatorRef v46 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFTypeRef v47 = v99;
    FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines(&v96);
    uint64_t v31 = FigSpeedRampRenderPipelineCreate(v46, v47, &v96, v45, (void **)&cf);
    if (cf.value)
    {
      uint64_t v48 = *(void *)(v90 + 2072);
      uint64_t v49 = FigRenderPipelineGetFigBaseObject(cf.value);
      uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v50) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = 0;
      }
      uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 56);
      if (v52) {
        v52(v49, 0x1EE54A2F8, v48);
      }
      CFTypeRef v53 = v99;
      CFTypeRef v99 = (CFTypeRef)cf.value;
      if (cf.value) {
        CFRetain((CFTypeRef)cf.value);
      }
      if (v53) {
        CFRelease(v53);
      }
      if (cf.value) {
        CFRelease((CFTypeRef)cf.value);
      }
    }
    if (v45) {
      CFRelease(v45);
    }
    if (v31) {
      goto LABEL_25;
    }
  }
  if (v88)
  {
    uint64_t v54 = FigRenderPipelineGetFigBaseObject(v99);
    uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v56 = v55 ? v55 : 0;
    double v57 = *(void (**)(uint64_t, __CFString *, uint64_t))(v56 + 56);
    if (v57) {
      v57(v54, @"FieldMode", v88);
    }
  }
  uint64_t v58 = *(void *)(DerivedStorage + 144);
  uint64_t v59 = FigRenderPipelineGetFigBaseObject(v99);
  uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v60) {
    uint64_t v61 = v60;
  }
  else {
    uint64_t v61 = 0;
  }
  uint64_t v62 = *(void (**)(uint64_t, __CFString *, uint64_t))(v61 + 56);
  if (v62) {
    v62(v59, @"NeroVideoGravity", v58);
  }
  if (*(unsigned char *)(v90 + 285))
  {
    memset(&cf, 0, sizeof(cf));
    CMTimeMake(&cf, 1, 2);
    CMTime time = cf;
    CFDictionaryRef v63 = CMTimeCopyAsDictionary(&time, allocator);
    uint64_t v64 = FigRenderPipelineGetFigBaseObject(v99);
    uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v65) {
      uint64_t v66 = v65;
    }
    else {
      uint64_t v66 = 0;
    }
    uint64_t v67 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v66 + 56);
    if (v67) {
      v67(v64, @"DurationAllowedForCachedVideoFrames", v63);
    }
    if (v63) {
      CFRelease(v63);
    }
  }
  CFTypeRef v68 = v99;
  cf.CMTimeValue value = 0;
  uint64_t v69 = CMBaseObjectGetDerivedStorage();
  if (!v68) {
    goto LABEL_96;
  }
  uint64_t v70 = v69;
  if (!v69) {
    goto LABEL_96;
  }
  if (!*(void *)(v69 + 128)
    || (CMByteStreamGetCMBaseObject(), FigCRABSGetClassID(), !CMBaseObjectIsMemberOfClass()))
  {
    long long v74 = *(const void **)(CMBaseObjectGetDerivedStorage() + 936);
    cf.CMTimeValue value = (CMTimeValue)v74;
    if (v74) {
      CFRetain(v74);
    }
LABEL_91:
    uint64_t v83 = FigRenderPipelineGetFigBaseObject(v68);
    uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v84) {
      uint64_t v85 = v84;
    }
    else {
      uint64_t v85 = 0;
    }
    uint64_t v25 = (__CFDictionary *)v92;
    uint64_t v86 = *(void (**)(uint64_t, __CFString *, const void *))(v85 + 56);
    if (v86) {
      v86(v83, @"PlaybackSessionID", v74);
    }
    goto LABEL_96;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v72) {
    uint64_t v73 = v72;
  }
  else {
    uint64_t v73 = 0;
  }
  long long v75 = *(uint64_t (**)(uint64_t, __CFString *, void, CMTime *))(v73 + 48);
  if (v75)
  {
    int v76 = v75(CMBaseObject, @"CRABS_PlaybackSessionID", 0, &cf);
    long long v77 = (const void *)cf.value;
    if (!cf.value || v76) {
      goto LABEL_97;
    }
    MEMORY[0x19970E910](*(void *)(v70 + 1896));
    uint64_t v78 = *(void *)(v70 + 1904);
    if (v78)
    {
      CMTimeValue v79 = cf.value;
      uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v81 = v80 ? v80 : 0;
      CMTime v82 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTimeValue, void))(v81 + 48);
      if (v82) {
        v82(v78, 0x1EE582B78, 0x1EE584C58, v79, 0);
      }
    }
    MEMORY[0x19970E930](*(void *)(v70 + 1896));
    long long v74 = (const void *)cf.value;
    goto LABEL_91;
  }
LABEL_96:
  long long v77 = (const void *)cf.value;
LABEL_97:
  if (v77) {
    CFRelease(v77);
  }
  uint64_t v31 = 0;
  *a12 = v99;
  CFTypeRef v99 = 0;
LABEL_100:
  if (v97) {
    CFRelease(v97);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (NextRenderPipelineIdentifierString) {
    CFRelease(NextRenderPipelineIdentifierString);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v98) {
    CFRelease(v98);
  }
  return v31;
}

void itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray(uint64_t a1)
{
  FigImageQueueArraySetProperty();
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!itemfig_getDurationIfReady(a1, (uint64_t)&v5) && (v5.flags & 1) != 0)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime v4 = v5;
    CFDictionaryRef v3 = CMTimeCopyAsDictionary(&v4, v2);
    FigImageQueueArraySetProperty();
    if (v3) {
      CFRelease(v3);
    }
  }
}

void itemfig_updateRotationOnVideoRenderPipeline(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v19 = 0;
  __int16 v18 = 0;
  if ((a2 || (a2 = *(_DWORD *)(DerivedStorage + 1000)) != 0) && !itemfig_getTrackStorage(a1, a2, &v19))
  {
    int VideoMatrixRotationAngleAndFlips = itemfig_getVideoMatrixRotationAngleAndFlips(a1, (unsigned char *)&v18 + 1, &v18);
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &VideoMatrixRotationAngleAndFlips);
    uint64_t v6 = v19;
    uint64_t v7 = *(void *)(v19 + 16);
    if (v7)
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v10 = v9 ? v9 : 0;
      CFIndex v11 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v10 + 56);
      if (v11) {
        v11(FigBaseObject, @"Rotation", v5);
      }
    }
    uint64_t v12 = *(void *)(v6 + 248);
    if (v12)
    {
      uint64_t v13 = FigRenderPipelineGetFigBaseObject(v12);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v15 + 56);
      if (v16) {
        v16(v13, @"Rotation", v5);
      }
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

uint64_t itemfig_updatePriorImageQueueGaugeOnRenderPipelines(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 2144))
  {
    uint64_t v3 = result;
    if (!*(void *)(result + 656))
    {
      int v4 = *(_DWORD *)(result + 1000);
      if (v4)
      {
        uint64_t v13 = 0;
        uint64_t result = itemfig_getTrackStorage(a1, v4, &v13);
        if (!result && v13 != 0)
        {
          uint64_t result = *(void *)(v13 + 16);
          if (result)
          {
            uint64_t v6 = *(void *)(v3 + 2144);
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
            uint64_t VTable = CMBaseObjectGetVTable();
            uint64_t v10 = *(void *)(VTable + 8);
            uint64_t result = VTable + 8;
            uint64_t v9 = v10;
            if (v10) {
              uint64_t v11 = v9;
            }
            else {
              uint64_t v11 = 0;
            }
            uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v11 + 56);
            if (v12) {
              return v12(FigBaseObject, @"PriorImageQueueGauge", v6);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL fp_doesCPEProtectorAllowsVideoOutput(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFNumberRef v5 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v5) {
    return *MEMORY[0x1E4F1CFD0] == 0;
  }
  v5(a1, @"AllowsVideoOutput", *MEMORY[0x1E4F1CF80], &cf);
  BOOL v4 = *MEMORY[0x1E4F1CFD0] == (void)cf;
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

uint64_t fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(uint64_t a1, double a2, double a3, uint64_t a4, const void *a5)
{
  if (a2 >= 1.0 && a3 >= 1.0)
  {
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&a2);
    if (DictionaryRepresentation)
    {
      CFDictionaryRef v11 = DictionaryRepresentation;
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v14 + 56);
      if (v15) {
        v15(FigBaseObject, @"ScreenSize", v11);
      }
      if (!a5)
      {
        CFRelease(v11);
        return 0;
      }
      float v42 = 1.0;
      float v43 = 1.0;
      uint64_t Dimensions = itemfig_GetDimensions(a5, &v43, &v42);
      if (!Dimensions)
      {
        float v18 = v42;
        float v17 = v43;
        double v19 = v43;
        double v20 = v42;
        int v21 = FigCFEqual();
        v45.width = v19;
        v45.height = v20;
        CFDictionaryRef v22 = CGSizeCreateDictionaryRepresentation(v45);
        if (v22)
        {
          CFDictionaryRef v23 = v22;
          float v24 = a2 / v19;
          float v25 = a3 / v20;
          if (v24 >= v25) {
            float v26 = a3 / v20;
          }
          else {
            float v26 = a2 / v19;
          }
          if (v24 <= v25) {
            float v24 = a3 / v20;
          }
          if (!v21) {
            float v24 = v26;
          }
          double v27 = (float)(v17 * v24);
          double v28 = a2 - v27;
          double v29 = (float)(v18 * v24);
          uint64_t v30 = FigRenderPipelineGetFigBaseObject(a1);
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v31) {
            uint64_t v32 = v31;
          }
          else {
            uint64_t v32 = 0;
          }
          uint64_t v34 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v32 + 56);
          if (v34) {
            v34(v30, @"OriginalVideoSize", v23);
          }
          v46.origin.x = v28 * 0.5;
          v46.origin.y = (a3 - v29) * 0.5;
          v46.size.width = v27;
          v46.size.height = v29;
          CFDictionaryRef v35 = CGRectCreateDictionaryRepresentation(v46);
          if (v35)
          {
            uint64_t v36 = FigRenderPipelineGetFigBaseObject(a1);
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            uint64_t v39 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v38 + 56);
            if (v39) {
              v39(v36, @"VideoDisplayRect", v35);
            }
            uint64_t v33 = 0;
          }
          else
          {
            uint64_t v33 = FigSignalErrorAt();
          }
          CFRelease(v11);
          CFRelease(v23);
          if (!v35) {
            return v33;
          }
          CFDictionaryRef v40 = v35;
          goto LABEL_36;
        }
        uint64_t Dimensions = FigSignalErrorAt();
      }
      uint64_t v33 = Dimensions;
      CFDictionaryRef v40 = v11;
LABEL_36:
      CFRelease(v40);
      return v33;
    }
  }

  return FigSignalErrorAt();
}

void fp_postClosedCaptionNotificationIfEnabled(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFNumberRef v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v5)
  {
    uint64_t v7 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 296))
    {
      CFTypeRef cf = 0;
      FigCaptionCommandCreatePropertyList(a2, a3, (CFDictionaryRef *)&cf);
      if (cf)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(cf);
      }
    }
    else if (*(unsigned char *)(DerivedStorage + 298))
    {
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 312));
      CFArrayRef v8 = *(const __CFArray **)(v7 + 304);
      if (v8)
      {
        CFIndex Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          CFIndex v10 = Count;
          for (CFIndex i = 0; i != v10; ++i)
          {
            CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 304), i);
            uint64_t v13 = (void *)MEMORY[0x199711A30]();
            [ValueAtIndex processCaptionCommand:a2 data:a3];
          }
        }
      }
      MEMORY[0x19970E2B0](*(void *)(v7 + 312));
    }
    CFRelease(v5);
  }
}

uint64_t itemfig_prepareClosedCaptionRenderPipeline(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  CFTypeRef cf = 0;
  uint64_t ClosedCaptionChannelStringFromFormatDescription = FigClosedCaptionCreateClosedCaptionChannelStringFromFormatDescription((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2, (CFStringRef *)&cf);
  CFTypeRef v4 = cf;
  if (ClosedCaptionChannelStringFromFormatDescription) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = cf == 0;
  }
  if (!v5)
  {
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v8 + 56);
    if (v9) {
      v9(FigBaseObject, @"CCRPP_ClosedCaptionType", v4);
    }
    CFTypeRef v4 = cf;
  }
  if (v4) {
    CFRelease(v4);
  }
  return ClosedCaptionChannelStringFromFormatDescription;
}

void playerfig_postSubtitleNotificationIfEnabled(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a8)
  {
    CFTypeRef cf = 0;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v20 = v19 ? v19 : 0;
    int v21 = *(void (**)(uint64_t, void, CFTypeRef *))(v20 + 32);
    if (v21)
    {
      v21(a10, 0, &cf);
      if (cf)
      {
        uint64_t v22 = CMBaseObjectGetDerivedStorage();
        if (!*(unsigned char *)(v22 + 1021))
        {
          *(unsigned char *)(v22 + 1021) = 1;
          playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(a10, cf);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  if (!a6 || *(unsigned char *)(DerivedStorage + 688) | a8)
  {
    CFTypeRef cf = 0;
    FigSubtitleSampleCreatePropertyList(a6, a8, a9, (CFDictionaryRef *)&cf, a1, a2, a3, a4);
    CFTypeRef v23 = cf;
    if (cf)
    {
      float v24 = *(const void **)(DerivedStorage + 696);
      *(void *)(DerivedStorage + 696) = cf;
      CFRetain(v23);
      if (v24) {
        CFRelease(v24);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(cf);
    }
  }
}

void playerfig_postCaptionNotificationIfEnabled(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a8)
  {
    CFTypeRef cf = 0;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v20 = v19 ? v19 : 0;
    int v21 = *(void (**)(uint64_t, void, CFTypeRef *))(v20 + 32);
    if (v21)
    {
      v21(a10, 0, &cf);
      if (cf)
      {
        uint64_t v22 = CMBaseObjectGetDerivedStorage();
        if (!*(unsigned char *)(v22 + 1021))
        {
          *(unsigned char *)(v22 + 1021) = 1;
          playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(a10, cf);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  if (!a6 || *(unsigned char *)(DerivedStorage + 688) | a8)
  {
    CFTypeRef cf = 0;
    FigSubtitleSampleCreatePropertyList(a6, a8, a9, (CFDictionaryRef *)&cf, a1, a2, a3, a4);
    CFTypeRef v23 = cf;
    if (cf)
    {
      float v24 = *(const void **)(DerivedStorage + 696);
      *(void *)(DerivedStorage + 696) = cf;
      CFRetain(v23);
      if (v24) {
        CFRelease(v24);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(cf);
    }
  }
}

void fp_interrogateRenderPipeline(uint64_t a1, _DWORD *a2)
{
  uint64_t v16 = 0;
  float v17 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, uint64_t, const void **))(v7 + 48);
  if (v8)
  {
    v8(FigBaseObject, @"PrefersConsumptionDrivenReads", v4, &v17);
    uint64_t v9 = v17;
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFIndex v10 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v9 != (const void *)*MEMORY[0x1E4F1CFD0])
  {
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *a2 |= 1u;
  if (v9) {
LABEL_9:
  }
    CFRelease(v9);
LABEL_10:
  uint64_t v11 = FigRenderPipelineGetFigBaseObject(a1);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t, const void **))(v13 + 48);
  if (v14)
  {
    v14(v11, @"VetoFigReadCacheUsage", v4, &v16);
    uint64_t v15 = v16;
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (v15 == v10)
  {
    *a2 |= 2u;
    if (!v15) {
      return;
    }
  }
  else if (!v15)
  {
    return;
  }
  CFRelease(v15);
}

uint64_t playerfig_setReadCacheEnabled()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 128);
  if (!result)
  {
    if (dword_1E9350BF0 < 3) {
      return result;
    }
    goto LABEL_9;
  }
  CMByteStreamGetCMBaseObject();
  FigCRABSGetClassID();
  uint64_t result = CMBaseObjectIsMemberOfClass();
  if (result)
  {
    if (dword_1E9350BF0 < 3) {
      return result;
    }
LABEL_9:
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(DerivedStorage + 136) == 1)
  {
    if (dword_1E9350BF0 < 3) {
      return result;
    }
    goto LABEL_9;
  }
  if (dword_1E9350BF0 >= 3)
  {
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void))(v8 + 56);
  if (v9) {
    uint64_t result = v9(CMBaseObject, 0x1EE5525F8, *MEMORY[0x1E4F1CFD0]);
  }
  *(unsigned char *)(DerivedStorage + 136) = 1;
  return result;
}

void itemfig_deferredTimeJumped_f(const void *a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    if (!a1) {
      return;
    }
  }
  else
  {
    playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems(v2, a1);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (!a1) {
      return;
    }
  }

  CFRelease(a1);
}

void playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 504);
  v8.length = CFArrayGetCount(v5);
  v8.location = 0;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v8, a2);
  if (FirstIndexOfValue != -1) {
    playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems(a1, FirstIndexOfValue);
  }

  JUMPOUT(0x19970E2B0);
}

void itemfig_DeferredLikelyToKeepUp(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRange v8 = *(const void **)(DerivedStorage + 8);
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  double valuePtr = 0.0;
  if (!*(unsigned char *)DerivedStorage)
  {
    if (*(unsigned char *)(DerivedStorage + 1690) && *(float *)(v9 + 48) != 0.0)
    {
      LOBYTE(a5) = 1;
    }
    else if (a5)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"FPM_Duration");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
      }
      LOBYTE(a5) = 0;
    }
    if (*(unsigned char *)(DerivedStorage + 1690))
    {
      if (a5)
      {
LABEL_58:
        playerfig_updatePlaybackStateAndBossRate(v8, 6, 0);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(a2);
        return;
      }
    }
    else
    {
      *(unsigned char *)(DerivedStorage + 1690) = 1;
      if (*(double *)(DerivedStorage + 1552) > 0.0) {
        *(CFAbsoluteTime *)(DerivedStorage + 1560) = CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 1552);
      }
      *(double *)(DerivedStorage + 1656) = valuePtr;
      if (a5) {
        goto LABEL_58;
      }
    }
    if (*(void *)(DerivedStorage + 128))
    {
      double v11 = valuePtr;
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v12 + 1896));
      if (!*(unsigned char *)(v12 + 1993))
      {
        *(unsigned char *)(v12 + 1993) = 1;
        double Current = CFAbsoluteTimeGetCurrent();
        *(double *)(v12 + 1944) = Current;
        double v14 = *(double *)(v12 + 1936);
        if (v14 == 0.0) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = (uint64_t)((Current - v14) * 1000.0);
        }
        double v16 = *(double *)(v12 + 1920);
        double v17 = *(double *)(v12 + 1928);
        if (v17 == 0.0) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = (uint64_t)((Current - v17) * 1000.0);
        }
        uint64_t v19 = *(void *)(v12 + 1904);
        if (v19)
        {
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v21 = v20 ? v20 : 0;
          uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v21 + 56);
          if (v22) {
            v22(v19, 0x1EE582B78, 0x1EE55E2B8, (uint64_t)(v11 * 1000.0), 0);
          }
        }
        uint64_t v23 = *(void *)(v12 + 1904);
        if (v23)
        {
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          float v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v25 + 56);
          if (v26) {
            v26(v23, 0x1EE582B78, 0x1EE55E6F8, v15, 0);
          }
          uint64_t v27 = *(void *)(v12 + 1904);
          if (v27)
          {
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v28) {
              uint64_t v29 = v28;
            }
            else {
              uint64_t v29 = 0;
            }
            uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v29 + 56);
            if (v30) {
              v30(v27, 0x1EE582B78, 0x1EE584B78, (uint64_t)((Current - v16) * 1000.0), 0);
            }
            uint64_t v31 = *(void *)(v12 + 1904);
            if (v31)
            {
              uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v33 = v32 ? v32 : 0;
              uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v33 + 56);
              if (v34) {
                v34(v31, 0x1EE582B78, 0x1EE55E718, v18, 0);
              }
            }
          }
        }
        itemfig_networkActivitySubmitMetricsForInitialStartupIfAvailable();
      }
      uint64_t v35 = *(void *)(v12 + 1904);
      if (v35)
      {
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v37 = v36 ? v36 : 0;
        uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v37 + 8);
        if (v38) {
          v38(v35, 0x1EE582B78, 305, 0, 0);
        }
      }
      MEMORY[0x19970E930](*(void *)(v12 + 1896));
    }
    goto LABEL_58;
  }

  CFRelease(a2);
}

const void *playerfig_preWirePixelBuffersIfNeeded(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 872));
  uint64_t v4 = *(const void **)(DerivedStorage + 888);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 888) = 0;
  }
  if (a2)
  {
    *(unsigned char *)(DerivedStorage + 896) = 0;
  }
  else if (*(unsigned char *)(DerivedStorage + 896))
  {
    goto LABEL_14;
  }
  if (!FigCFDictionaryGetCGSizeIfPresent())
  {
LABEL_14:
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 872));
    return 0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v9 = CFDictionaryCreateMutable(v5, 0, v6, v7);
  FigCFDictionarySetInt32();
  CFIndex v10 = CFDictionaryCreate(v5, 0, 0, 0, v6, v7);
  if (!v10)
  {
    FigSignalErrorAt();
    goto LABEL_24;
  }
  CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F24D20], v10);
  CFRelease(v10);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  double v11 = (const void *)CVPixelBufferPoolCreate(v5, Mutable, v9, (CVPixelBufferPoolRef *)(DerivedStorage + 888));
  if (v11)
  {
    CFIndex v10 = v11;
LABEL_24:
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 872));
    if (!v9) {
      goto LABEL_19;
    }
LABEL_18:
    CFRelease(v9);
    goto LABEL_19;
  }
  CFTypeRef v12 = CFRetain(*(CFTypeRef *)(DerivedStorage + 888));
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 872));
  if (v12)
  {
    uint64_t v13 = CVPixelBufferPoolPreAllocate();
    if (v13)
    {
      CFIndex v10 = (const void *)v13;
    }
    else
    {
      CFIndex v10 = (const void *)CVPixelBufferPoolPrefetchPages();
      if (!v10 && dword_1E9350BF0)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFIndex v10 = 0;
      }
    }
    CFRelease(v12);
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  CFIndex v10 = 0;
  if (v9) {
    goto LABEL_18;
  }
LABEL_19:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

uint64_t playerfig_createDataChannelConfigurationAndSetIdentifiers(int a1, CFStringRef a2, CFAllocatorRef allocator, uint64_t *a4)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v9 = CFStringCreateWithCString(allocator, (const char *)(DerivedStorage + 944), 0x600u);
  FigCFDictionarySetValue();
  if (a2)
  {
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    a2 = CFStringCreateWithCString(allocator, (const char *)(v10 + 2048), 0x600u);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v11 + 272));
  CFStringRef v12 = CFStringCreateWithFormat(allocator, 0, @"C/%d", *(unsigned int *)(v11 + 280));
  if (v12) {
    ++*(_DWORD *)(v11 + 280);
  }
  else {
    FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(v11 + 272));
  FigCFDictionarySetValue();
  uint64_t v13 = FigDataChannelConfigurationCreate(allocator, Mutable, a4);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (a2) {
    CFRelease(a2);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v13;
}

void itemfig_transferItemTrackPropertyToVideoTargetConfigurationDataChannelSettings(uint64_t a1, uint64_t a2, uint64_t a3, __CFDictionary *a4, const void *a5)
{
  CMTimeValue value = 0;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFStringRef v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void **))(v11 + 40);
  if (v12)
  {
    if (v12(a1, a2, a3, *MEMORY[0x1E4F1CF80], &value)) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = value == 0;
    }
    if (!v13)
    {
      CFDictionarySetValue(a4, a5, value);
      CFRelease(value);
    }
  }
}

uint64_t playerfig_deferredValeriaEnabled(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = RaEiDSv6c();
  if (result)
  {
    *(unsigned char *)(DerivedStorage + 858) = 1;
    uint64_t result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    if (result >= 1)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      uint64_t result = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)result)
      {
        if (*(unsigned char *)(result + 2016))
        {
          long long v7 = *MEMORY[0x1E4F1F9F8];
          uint64_t v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          long long v5 = v7;
          uint64_t v6 = v8;
          return playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&v7, (uint64_t)&v5, 0);
        }
      }
    }
  }
  return result;
}

uint64_t playerfig_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CVPixelBufferRef *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a4) {
    goto LABEL_2;
  }
  CFStringRef v9 = DerivedStorage;
  if (CFEqual(a2, @"PerformanceDictionary"))
  {
    CFTypeRef v47 = 0;
    MEMORY[0x19970E290](*((void *)v9 + 62));
    uint64_t v10 = (const void *)*((void *)v9 + 64);
    if (v10) {
      uint64_t v11 = itemfig_gatherItemPerformanceData(v10, 0, &v47);
    }
    else {
      uint64_t v11 = 0;
    }
    MEMORY[0x19970E2B0](*((void *)v9 + 62));
    *a4 = v47;
    return v11;
  }
  if (CFEqual(a2, @"GatherPerformanceHistoryArray"))
  {
    CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
    int v13 = v9[812];
LABEL_12:
    double v14 = (const void **)MEMORY[0x1E4F1CFC8];
    goto LABEL_13;
  }
  if (CFEqual(a2, @"PerformanceHistoryArray"))
  {
    if (v9[812])
    {
      CFArrayRef v16 = (const __CFArray *)*((void *)v9 + 102);
      if (v16)
      {
        Copy = CFArrayCreateCopy(a3, v16);
        goto LABEL_17;
      }
LABEL_118:
      uint64_t v11 = 0;
      *a4 = 0;
      return v11;
    }
    goto LABEL_2;
  }
  if (CFEqual(a2, @"FigAudioSession"))
  {
    MEMORY[0x19970E910](*((void *)v9 + 57));
    double v17 = (void *)*((void *)v9 + 58);
    if (v17) {
      double v17 = (void *)CFRetain(v17);
    }
    *a4 = (CVPixelBufferRef)v17;
    uint64_t v18 = *((void *)v9 + 57);
    goto LABEL_29;
  }
  if (CFEqual(a2, @"IsValid")) {
    goto LABEL_32;
  }
  if (CFEqual(a2, @"LastSentSubtitleSample"))
  {
    Copy = (void *)*((void *)v9 + 87);
    if (!Copy) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, @"PlayerVolume"))
  {
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v20 = (int *)(v9 + 764);
    CFNumberType v21 = kCFNumberFloatType;
    goto LABEL_38;
  }
  if (CFEqual(a2, @"PlayerMuted"))
  {
    CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
    int v13 = v9[774];
    goto LABEL_12;
  }
  if (CFEqual(a2, @"EQPreset"))
  {
    int v46 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80);
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v20 = &v46;
    CFNumberType v21 = kCFNumberIntType;
    goto LABEL_38;
  }
  if (CFEqual(a2, @"NetworkCacheURL"))
  {
    Copy = (void *)*((void *)v9 + 24);
    if (Copy) {
      goto LABEL_16;
    }
    return 4294954513;
  }
  if (CFEqual(a2, @"DisplayingClosedCaptions"))
  {
    uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
    int v23 = v9[298];
    goto LABEL_48;
  }
  if (CFEqual(a2, @"DisplayClosedCaptions"))
  {
    CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
    int v13 = v9[297];
    goto LABEL_12;
  }
  if (CFEqual(a2, @"RequiredNumberOfCAContextsForClosedCaptionLayers"))
  {
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v20 = (int *)(v9 + 320);
    CFNumberType v21 = kCFNumberSInt32Type;
    goto LABEL_38;
  }
  if (CFEqual(a2, @"ClosedCaptionCAContextIDArray"))
  {
    CFArrayRef v24 = (const __CFArray *)*((void *)v9 + 41);
    if (v24)
    {
      CFIndex Count = CFArrayGetCount(v24);
      if (Count >= 1)
      {
        CFIndex v26 = Count;
        CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        uint64_t v28 = (void *)MEMORY[0x199711A30]();
        for (CFIndex i = 0; i != v26; ++i)
        {
          objc_msgSend((id)CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 41), i), "contextId");
          FigCFArrayAppendInt32();
        }
LABEL_62:
        uint64_t v11 = 0;
        *a4 = Mutable;
        return v11;
      }
    }
    goto LABEL_2;
  }
  if (CFEqual(a2, @"ActionAtEnd"))
  {
    switch(*((_DWORD *)v9 + 194))
    {
      case 0:
        CFStringRef v12 = (const void **)&kFigPlayerAction_Advance;
        goto LABEL_15;
      case 1:
        CFStringRef v12 = (const void **)&kFigPlayerAction_Stop;
        goto LABEL_15;
      case 2:
        CFStringRef v12 = (const void **)&kFigPlayerAction_None;
        goto LABEL_15;
      case 3:
        CFStringRef v12 = (const void **)&kFigPlayerAction_StopAtEndOfQueue;
        goto LABEL_15;
      default:
        return 0;
    }
  }
  if (CFEqual(a2, @"ApplyVideoTrackMatrix"))
  {
    CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
    int v13 = v9[783];
    goto LABEL_12;
  }
  if (CFEqual(a2, @"VideoLayerDestinationIsTVOut"))
  {
    CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFC8];
    int v13 = v9[232];
    double v14 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_13:
    if (!v13) {
      CFStringRef v12 = v14;
    }
    goto LABEL_15;
  }
  if (CFEqual(a2, @"PreventDisplaySleepDuringVideoPlayback"))
  {
    CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
    int v13 = v9[232];
    goto LABEL_12;
  }
  if (CFEqual(a2, @"CurrentlyDisplayedCVPixelBuffer"))
  {
    MEMORY[0x19970E290](*((void *)v9 + 62));
    CFArrayRef v30 = (const __CFArray *)*((void *)v9 + 63);
    if (v30 && CFArrayGetCount(v30) >= 1)
    {
      CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 63), 0);
      uint64_t v31 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v31 + 1120));
      uint64_t v11 = FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(*(CFArrayRef *)(v31 + 1104), a3, a4);
      MEMORY[0x19970E930](*(void *)(v31 + 1120));
    }
    else
    {
      uint64_t v11 = 0;
      *a4 = 0;
    }
    MEMORY[0x19970E2B0](*((void *)v9 + 62));
    return v11;
  }
  if (!CFEqual(a2, @"CurrentVideoFrameRate"))
  {
    if (CFEqual(a2, @"AudioDeviceUID"))
    {
      *a4 = (CVPixelBufferRef)*((void *)v9 + 85);
      uint64_t v34 = (const void *)*((void *)v9 + 85);
      if (v34) {
        CFRetain(v34);
      }
      return 0;
    }
    if (CFEqual(a2, @"EnableHardwareAcceleratedVideoDecoder"))
    {
      CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
      uint64_t v35 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v36 = *((_DWORD *)v9 + 196) == 1;
      goto LABEL_92;
    }
    if (CFEqual(a2, @"PreferredVideoDecoderGPURegistryID"))
    {
      Copy = (void *)*((void *)v9 + 99);
      if (!Copy) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    if (CFEqual(a2, @"DisplayList"))
    {
      Copy = (void *)*((void *)v9 + 106);
      if (!Copy) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    if (CFEqual(a2, @"ExternalProtectionStatus"))
    {
      MEMORY[0x19970E290](*((void *)v9 + 62));
      uint64_t v37 = itemfig_copyExternalProtectionStatus(*((void *)v9 + 64), a3, a4);
      MEMORY[0x19970E2B0](*((void *)v9 + 62));
      return v37;
    }
    if (CFEqual(a2, @"DecodeMultipleAudioTracks"))
    {
      CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
      int v13 = v9[120];
      goto LABEL_12;
    }
    if (CFEqual(a2, @"DecodeMultipleVideoTracks"))
    {
      CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
      int v13 = v9[121];
      goto LABEL_12;
    }
    if (CFEqual(a2, @"STSLabel"))
    {
      MEMORY[0x19970E910](*((void *)v9 + 3));
      uint64_t v38 = (void *)*((void *)v9 + 2);
      if (v38) {
        uint64_t v38 = (void *)CFRetain(v38);
      }
      *a4 = (CVPixelBufferRef)v38;
      uint64_t v18 = *((void *)v9 + 3);
      goto LABEL_29;
    }
    if (CFEqual(a2, @"MinRateForAudioPlayback"))
    {
      if (!v9[801]) {
        goto LABEL_118;
      }
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v20 = (int *)(v9 + 804);
      goto LABEL_117;
    }
    if (CFEqual(a2, @"MaxRateForAudioPlayback"))
    {
      if (!v9[802]) {
        goto LABEL_118;
      }
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v20 = (int *)(v9 + 808);
LABEL_117:
      CFNumberType v21 = kCFNumberFloat32Type;
      goto LABEL_38;
    }
    if (CFEqual(a2, @"MasterClock"))
    {
      Copy = (void *)*((void *)v9 + 11);
      if (!Copy) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    if (CFEqual(a2, @"SendToNero"))
    {
      uint64_t v39 = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v39)
      {
        CFDictionaryRef Mutable = v39;
        if (v9[122]) {
          CFDictionaryRef v40 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          CFDictionaryRef v40 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v39, @"Visuals", *v40);
        MEMORY[0x19970E910](*((void *)v9 + 19));
        unsigned __int16 v41 = (const void *)*((void *)v9 + 20);
        if (v41)
        {
          CFTypeRef v42 = CFRetain(v41);
          MEMORY[0x19970E930](*((void *)v9 + 19));
          if (v42)
          {
            CFDictionarySetValue(Mutable, @"NeroTransport", v42);
            CFRelease(v42);
          }
        }
        else
        {
          MEMORY[0x19970E930](*((void *)v9 + 19));
        }
        goto LABEL_62;
      }
LABEL_2:
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, @"IsNeroPlaybackActive"))
    {
      CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
      int v13 = v9[123];
      goto LABEL_12;
    }
    if (CFEqual(a2, @"ProhibitAMR"))
    {
      CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
      int v13 = v9[856];
      goto LABEL_12;
    }
    if (CFEqual(a2, @"PlayQueueIsHungry"))
    {
      CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
      int v13 = v9[813];
      goto LABEL_12;
    }
    if (CFEqual(a2, @"MediaSelectionCriteria"))
    {
      MEMORY[0x19970E910](*((void *)v9 + 94));
      float v43 = (void *)*((void *)v9 + 91);
      if (v43) {
LABEL_140:
      }
        float v43 = (void *)CFRetain(v43);
    }
    else
    {
      if (CFEqual(a2, @"AppliesMediaSelectionCriteriaAutomatically"))
      {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
        int v23 = v9[760];
LABEL_48:
        if (!v23) {
          uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        Copy = (void *)*v22;
        if (!*v22) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (CFEqual(a2, @"DefaultMediaSelectionCriteria"))
      {
        Copy = FigAutomaticMediaSelectionCopyDefaultCriteria();
        goto LABEL_17;
      }
      if (!CFEqual(a2, @"LegibleFallbackMediaSelectionCriteria"))
      {
        if (CFEqual(a2, @"AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections"))
        {
          CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
          int v13 = v9[744];
          goto LABEL_12;
        }
        if (CFEqual(a2, @"DestinationPixelBufferAttributes"))
        {
          MEMORY[0x19970E910](*((void *)v9 + 61));
          uint64_t v44 = (void *)*((void *)v9 + 60);
          if (v44) {
            uint64_t v44 = (void *)CFRetain(v44);
          }
          *a4 = (CVPixelBufferRef)v44;
          uint64_t v18 = *((void *)v9 + 61);
          goto LABEL_29;
        }
        if (CFEqual(a2, @"AllowPixelBufferPoolSharing"))
        {
          Copy = (void *)*((void *)v9 + 108);
          if (Copy) {
            goto LABEL_16;
          }
          CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFC8];
          goto LABEL_15;
        }
        if (CFEqual(a2, @"OptionsForPreWiringPixelBuffers"))
        {
          MEMORY[0x19970E910](*((void *)v9 + 109));
          CGSize v45 = (void *)*((void *)v9 + 110);
          if (v45) {
            CGSize v45 = (void *)CFRetain(v45);
          }
          *a4 = (CVPixelBufferRef)v45;
          uint64_t v18 = *((void *)v9 + 109);
          goto LABEL_29;
        }
        if (CFEqual(a2, @"PrepareItemOnDispatchQueue"))
        {
LABEL_32:
          CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_15:
          Copy = (void *)*v12;
LABEL_16:
          Copy = (void *)CFRetain(Copy);
LABEL_17:
          uint64_t v11 = 0;
          *a4 = (CVPixelBufferRef)Copy;
          return v11;
        }
        if (CFEqual(a2, @"MultichannelAudioStrategy"))
        {
          Copy = (void *)*((void *)v9 + 113);
          goto LABEL_16;
        }
        if (CFEqual(a2, @"PlaybackState"))
        {
          Copy = (void *)FigCFNumberCreateSInt32();
          goto LABEL_17;
        }
        if (!CFEqual(a2, @"AutomaticallyWaitsToMinimizeStalling"))
        {
          if (CFEqual(a2, @"CaptionPlaybackStrategy"))
          {
            if (v9[782]) {
              CFStringRef v12 = (const void **)&kFigPlayerCaptionRenderingStrategy_CoreTextSubtitleRenderer;
            }
            else {
              CFStringRef v12 = (const void **)&kFigPlayerCaptionRenderingStrategy_CaptionDisplayService;
            }
            goto LABEL_15;
          }
          if (CFEqual(a2, @"CaptionPipelineStrategy"))
          {
            if (v9[781]) {
              CFStringRef v12 = (const void **)&kFigPlayerCaptionPipelineStrategy_AttributedStrings;
            }
            else {
              CFStringRef v12 = (const void **)&kFigPlayerCaptionPipelineStrategy_FigCaptions;
            }
            goto LABEL_15;
          }
          if (!CFEqual(a2, @"RequiresNumVideoSlots")) {
            return 4294954512;
          }
          CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          uint64_t v20 = (int *)(v9 + 216);
          CFNumberType v21 = kCFNumberCFIndexType;
LABEL_38:
          Copy = CFNumberCreate(v19, v21, v20);
          goto LABEL_17;
        }
        CFStringRef v12 = (const void **)MEMORY[0x1E4F1CFC8];
        uint64_t v35 = (const void **)MEMORY[0x1E4F1CFD0];
        BOOL v36 = v9[57] == 0;
LABEL_92:
        if (!v36) {
          CFStringRef v12 = v35;
        }
        goto LABEL_15;
      }
      MEMORY[0x19970E910](*((void *)v9 + 94));
      float v43 = (void *)*((void *)v9 + 92);
      if (v43) {
        goto LABEL_140;
      }
    }
    *a4 = (CVPixelBufferRef)v43;
    uint64_t v18 = *((void *)v9 + 94);
LABEL_29:
    MEMORY[0x19970E930](v18);
    return 0;
  }
  uint64_t v32 = *((void *)v9 + 71);
  if (!v32) {
    return 4294954513;
  }
  uint64_t v33 = *MEMORY[0x1E4F1CF80];

  return FigRenderPipelineCopyProperty(v32, @"CurrentVideoFrameRate", v33, (uint64_t)a4);
}

uint64_t playerfig_InvalidateItem(uint64_t a1)
{
  uint64_t result = FigPlaybackItemGetFigBaseObject(a1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? v4 : 0;
    long long v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
    if (v7)
    {
      return v7(v2);
    }
  }
  return result;
}

void playerfig_handleVideoTargetNotification(int a1, const void *a2, CFTypeRef cf1)
{
  if (dword_1E9350BF0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2
    && (CFEqual(cf1, @"PreferredDataChannelGroupsChanged") || CFEqual(cf1, @"DataChannelSettingsChanged")))
  {
    playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(a2, 0, 0);
  }
}

void playerfig_sendEmptyConfigurationToEachVideoTarget(int a1, CFArrayRef theArray)
{
  CFTypeRef cf = 0;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      uint64_t v5 = Count;
      if (playerfig_createDataChannelConfigurationAndSetIdentifiers(a1, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], (uint64_t *)&cf))BOOL v6 = 1; {
      else
      }
        BOOL v6 = v5 < 1;
      if (!v6)
      {
        CFIndex v7 = 0;
        uint64_t v8 = v5 - 1;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
          CFTypeRef v10 = cf;
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          int v13 = *(unsigned int (**)(const void *, CFTypeRef))(v12 + 72);
          if (!v13) {
            break;
          }
          if (v13(ValueAtIndex, v10)) {
            break;
          }
        }
        while (v8 != v7++);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

uint64_t playerfig_externalStartupTaskCompleted(uint64_t a1, const void *a2)
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 504);
  if (result)
  {
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      return playerfig_updatePlaybackStateAndBossRate(a2, 34, 0);
    }
  }
  return result;
}

uint64_t playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(const void *a1, const void *a2, unsigned char *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = playerfig_doesAnyWorkingOrLameDuckItemHaveVideo();
  if (result)
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 504);
    if (!v8
      || CFArrayGetCount(v8) < 1
      || playerfig_isCurrentItemQuiescent()
      || ((CFArrayRef v9 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 392)) == 0
        ? (BOOL v10 = 0)
        : (BOOL v10 = CFArrayGetCount(v9) > 0),
          (BOOL shouldEnableMainVideo = itemfig_shouldEnableMainVideo(), v10) && shouldEnableMainVideo
       || itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 0, 0, 1, 0, 0, 1, 0)|| itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 1, 1, 1, 0, a2, 0, 0)))
    {
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
      long long v15 = *MEMORY[0x1E4F1F9F8];
      uint64_t v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v13 = v15;
      uint64_t v14 = v16;
      uint64_t result = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v15, (uint64_t)&v13, a2);
      if (a3)
      {
        if (!result) {
          *a3 = 1;
        }
      }
    }
    else
    {
      if (dword_1E9350BF0 >= 2)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a3) {
        *a3 = 1;
      }
      playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, *(const __CFString **)(DerivedStorage + 512), MEMORY[0x1E4F1F9F8]);
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
      return 0;
    }
  }
  return result;
}

uint64_t itemfig_copyExternalProtectionStatus(uint64_t a1, CFAllocatorRef allocator, CFDictionaryRef *a3)
{
  values[20] = *(void **)MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    values[0] = 0;
    uint64_t v6 = *(void *)(DerivedStorage + 1160);
    if (v6)
    {
      uint64_t v7 = DerivedStorage;
      CFBooleanRef BOOLean = 0;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      long long v13 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v9 + 48);
      if (v13)
      {
        uint64_t result = v13(v6, @"ExternalProtectionRequiredForPlayback", *MEMORY[0x1E4F1CF80], &BOOLean);
        if (result) {
          goto LABEL_28;
        }
        if (!CFBooleanGetValue(BOOLean))
        {
          CFDictionaryRef v10 = 0;
LABEL_36:
          if (BOOLean) {
            CFRelease(BOOLean);
          }
          goto LABEL_6;
        }
        int v21 = 0;
        uint64_t v14 = *(void *)(v7 + 1160);
        long long v15 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = 0;
        }
        if (*v16)
        {
          uint64_t v17 = (uint64_t (*)(uint64_t, int *))v16[9];
          if (v17)
          {
            uint64_t result = v17(v14, &v21);
            if (!result)
            {
              if (dword_1E9350BF0 >= 2)
              {
                os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              BOOL v19 = v21 == 1 || v21 == 4;
              uint64_t v20 = (void **)&kFigPlayerExternalProtectionStatus_NotProtected;
              if (v19) {
                uint64_t v20 = (void **)&kFigPlayerExternalProtectionStatus_Protected;
              }
              values[0] = *v20;
              CFDictionaryRef v10 = CFDictionaryCreate(allocator, (const void **)&kFigPlayerExternalProtectionStatusKey_Video, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!v10)
              {
                uint64_t result = 4294954510;
                goto LABEL_29;
              }
              goto LABEL_36;
            }
LABEL_28:
            CFDictionaryRef v10 = 0;
            goto LABEL_29;
          }
        }
      }
      uint64_t result = 4294954514;
      goto LABEL_28;
    }
  }
  CFDictionaryRef v10 = 0;
LABEL_6:
  if (v10)
  {
    uint64_t result = 0;
  }
  else
  {
    CFDictionaryRef v12 = CFDictionaryCreate(allocator, (const void **)&kFigPlayerExternalProtectionStatusKey_Video, (const void **)&kFigPlayerExternalProtectionStatus_Protected, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v12) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 4294954510;
    }
    if (v12) {
      CFDictionaryRef v10 = v12;
    }
    else {
      CFDictionaryRef v10 = 0;
    }
  }
LABEL_29:
  *a3 = v10;
  return result;
}

uint64_t playerfig_handleSetProperty(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, unsigned char *a5)
{
  uint64_t v6 = a4;
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef theDict = a4;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  if (*DerivedStorage)
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  uint64_t v11 = DerivedStorage;
  if (CFEqual(a3, @"DestinationPixelBufferAttributes"))
  {
    if (v6)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
    }
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v13 + 488));
    int v14 = FigCFEqual();
    long long v15 = *(const void **)(v13 + 480);
    *(void *)(v13 + 480) = v6;
    if (v6) {
      CFRetain(v6);
    }
    if (v15) {
      CFRelease(v15);
    }
    MEMORY[0x19970E930](*(void *)(v13 + 488));
    if (v14) {
      return 0;
    }
    goto LABEL_13;
  }
  if (CFEqual(a3, @"ClosedCaptionLayerArray"))
  {
    if (v6)
    {
      CFTypeID v16 = CFArrayGetTypeID();
      if (v16 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
    }
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    if (!FigCFEqual())
    {
      uint64_t v18 = *(const void **)(v17 + 288);
      if (v6) {
        CFArrayRef v19 = (const __CFArray *)CFRetain(v6);
      }
      else {
        CFArrayRef v19 = 0;
      }
      *(void *)(v17 + 288) = v19;
      FPSupport_updateClosedCaptionLayer(v17 + 296, v19);
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
      if (v18) {
        CFRelease(v18);
      }
      [MEMORY[0x1E4F39CF8] commit];
    }
    return 0;
  }
  if (CFEqual(a3, @"ClosedCaptionLayerBoundsUpdate"))
  {
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    int v229 = 0;
    CGSize v21 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
    rect.origin = (CGPoint)*MEMORY[0x1E4F1DB28];
    rect.CGSize size = v21;
    v228.origin = rect.origin;
    v228.CGSize size = v21;
    long long v22 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 16);
    valuePtr[0] = *MEMORY[0x1E4F216C0];
    valuePtr[1] = v22;
    long long v23 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 48);
    valuePtr[2] = *(_OWORD *)(MEMORY[0x1E4F216C0] + 32);
    valuePtr[3] = v23;
    if (v6 && (CFTypeID v24 = CFDictionaryGetTypeID(), v24 == CFGetTypeID(v6)))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v6, @"ClosedCaptionLayerBoundsUpdate_LayerBounds");
      if (Value)
      {
        CGRectMakeWithDictionaryRepresentation(Value, &rect);
        uint64_t v6 = theDict;
      }
      CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v6, @"ClosedCaptionLayerBoundsUpdate_LayerVideoRelativeToViewport");
      if (v26)
      {
        CGRectMakeWithDictionaryRepresentation(v26, &v228);
        int v27 = 1;
      }
      else
      {
        int v27 = 0;
      }
      if (CFDictionaryGetValue(theDict, @"ClosedCaptionLayerBoundsUpdate_LayerCaptionsAvoidanceMargins"))
      {
        FigGeometryMarginsMakeFromDictionary();
        int v28 = 1;
      }
      else
      {
        int v28 = 0;
      }
      CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ClosedCaptionLayerBoundsUpdate_LayerIndex");
      if (v50)
      {
        CFNumberGetValue(v50, kCFNumberIntType, &v229);
        uint64_t v6 = 0;
        int v29 = v229;
        if (v229 < 0) {
          return (uint64_t)v6;
        }
LABEL_29:
        if (dword_1E9350BF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v29 = v229;
        }
        if (v27) {
          uint64_t v48 = &v228;
        }
        else {
          uint64_t v48 = 0;
        }
        if (v28) {
          uint64_t v49 = valuePtr;
        }
        else {
          uint64_t v49 = 0;
        }
        FPSupport_updateClosedCaptionLayerBounds(v20 + 296, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, *(void *)(v20 + 288), v29, v48, v49);
        return (uint64_t)v6;
      }
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (const void *)FigSignalErrorAt();
      int v27 = 0;
      int v28 = 0;
    }
    int v29 = 0;
    goto LABEL_29;
  }
  if (CFEqual(a3, @"ClosedCaptionLayerSetOptions"))
  {
    uint64_t v31 = CMBaseObjectGetDerivedStorage();
    LODWORD(valuePtr[0]) = 0;
    if (!v6 || (CFTypeID v32 = CFDictionaryGetTypeID(), v32 != CFGetTypeID(v6)))
    {
      uint64_t v6 = (const void *)FigSignalErrorAt();
      uint64_t v35 = 0;
      uint64_t v38 = 0;
      int v37 = 0;
      goto LABEL_49;
    }
    CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v6, @"ClosedCaptionLayerSetOption_LayerIndex");
    if (v33) {
      CFNumberGetValue(v33, kCFNumberIntType, valuePtr);
    }
    uint64_t v34 = FigCFDictionaryGetValue();
    if (v34)
    {
      uint64_t v35 = (const void *)v34;
      uint64_t v36 = FigCFDictionaryGetValue();
      if (v36)
      {
        uint64_t v6 = 0;
        int v37 = valuePtr[0];
        if ((valuePtr[0] & 0x80000000) == 0)
        {
          uint64_t v38 = (const void *)v36;
LABEL_49:
          if (dword_1E9350BF0)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v228.origin.x) = 0;
            uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int x_low = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v41 = x_low;
            }
            else {
              unsigned int v41 = x_low & 0xFFFFFFFE;
            }
            if (v41)
            {
              if (a1) {
                CFTypeRef v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
              }
              else {
                *(double *)&CFTypeRef v42 = COERCE_DOUBLE("");
              }
              *(_DWORD *)v231 = 136316418;
              *(void *)&v231[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v231[12] = 2048;
              *(void *)&v231[14] = a1;
              *(_WORD *)&v231[22] = 2082;
              double v232 = *(double *)&v42;
              __int16 v233 = 1024;
              *(_DWORD *)v234 = valuePtr[0];
              *(_WORD *)&v234[4] = 2112;
              *(void *)&v234[6] = v35;
              __int16 v235 = 2112;
              v236 = v38;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v37 = valuePtr[0];
          }
          FPSupport_setClosedCaptionLayerOptions(v31 + 296, *(void *)(v31 + 288), v37, v35, v38);
        }
        return (uint64_t)v6;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a3, @"ClosedCaptionLayerSetSeparated"))
  {
    uint64_t v43 = CMBaseObjectGetDerivedStorage();
    LODWORD(valuePtr[0]) = 0;
    if (v6 && (CFTypeID v44 = CFDictionaryGetTypeID(), v44 == CFGetTypeID(v6)))
    {
      CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v6, @"ClosedCaptionLayerSetSeparated_LayerIndex");
      if (v45) {
        CFNumberGetValue(v45, kCFNumberIntType, valuePtr);
      }
      CFBooleanRef v46 = (const __CFBoolean *)FigCFDictionaryGetValue();
      if (v46) {
        int v47 = CFBooleanGetValue(v46);
      }
      else {
        int v47 = 0;
      }
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (const void *)FigSignalErrorAt();
      int v47 = 0;
    }
    int v55 = valuePtr[0];
    if ((valuePtr[0] & 0x80000000) == 0)
    {
      if (dword_1E9350BF0)
      {
        LODWORD(rect.origin.x) = 0;
        LOBYTE(v228.origin.x) = 0;
        uint64_t v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v57 = LODWORD(rect.origin.x);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v58 = v57;
        }
        else {
          unsigned int v58 = v57 & 0xFFFFFFFE;
        }
        if (v58)
        {
          if (a1) {
            uint64_t v59 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          }
          else {
            *(double *)&uint64_t v59 = COERCE_DOUBLE("");
          }
          *(_DWORD *)v231 = 136316162;
          *(void *)&v231[4] = "playerfig_handleSetProperty";
          *(_WORD *)&v231[12] = 2048;
          *(void *)&v231[14] = a1;
          *(_WORD *)&v231[22] = 2082;
          double v232 = *(double *)&v59;
          __int16 v233 = 1024;
          *(_DWORD *)v234 = valuePtr[0];
          *(_WORD *)&v234[4] = 2112;
          *(void *)&v234[6] = theDict;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v55 = valuePtr[0];
      }
      FPSupport_setClosedCaptionLayerSeparated(v43 + 296, *(void *)(v43 + 288), v55, v47);
    }
    return (uint64_t)v6;
  }
  if (CFEqual(a3, @"VideoLayer"))
  {
    if (v6)
    {
      CFArrayRef v51 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&theDict, 1, MEMORY[0x1E4F1D510]);
      uint64_t v6 = (const void *)playerfig_setClientVideoLayerArray(a1, v51);
      if (!v51) {
        return (uint64_t)v6;
      }
      goto LABEL_82;
    }
    CFTypeRef v53 = a1;
    CFArrayRef v54 = 0;
    goto LABEL_93;
  }
  if (CFEqual(a3, @"VideoLayerArray"))
  {
    if (v6)
    {
      CFTypeID v52 = CFArrayGetTypeID();
      if (v52 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
    }
    CFTypeRef v53 = a1;
    CFArrayRef v54 = (const __CFArray *)v6;
LABEL_93:
    return playerfig_setClientVideoLayerArray(v53, v54);
  }
  if (CFEqual(a3, @"VideoTargetArray"))
  {
    if (v6)
    {
      CFTypeID v60 = CFGetTypeID(v6);
      if (v60 != CFArrayGetTypeID()) {
        goto LABEL_2;
      }
    }
    return playerfig_setVideoTargetArray(a1, (const __CFArray *)v6);
  }
  if (CFEqual(a3, @"RequiresNumVideoSlots"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v61 = CFGetTypeID(v6);
    if (v61 != CFNumberGetTypeID()) {
      goto LABEL_2;
    }
    size.CGFloat width = 0.0;
    CFNumberGetValue((CFNumberRef)v6, kCFNumberCFIndexType, &size);
    CGFloat width = size.width;
    uint64_t v63 = *((void *)v11 + 27);
    if (*(void *)&size.width == v63) {
      return 0;
    }
    *((void *)v11 + 27) = *(void *)&size.width;
    if (!playerfig_doesAnyWorkingOrLameDuckItemHaveVideo()) {
      return 0;
    }
    if (!(*(uint64_t *)&width >= v63
         ? playerfig_gracefullyAddImageQueues((uint64_t)a1, 0)
         : playerfig_removeExcessImageQueuesAndSlotsFromAllWorkingOrLameDuckItems((uint64_t)a1, 0)))
      return 0;
    if (*((uint64_t *)v11 + 27) <= 0) {
      playerfig_removeAllImageQueuesFromAllWorkingOrLameDuckItems();
    }
    else {
      playerfig_resetAlreadyPostedFirstVideoFrameEnqueuedNotificationFlagFromAllWorkingOrLameDuckItems();
    }
LABEL_13:
    playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(a1, 0, 0);
    return 0;
  }
  if (CFEqual(a3, @"VideoLayerDestinationIsTVOut")
    || CFEqual(a3, @"PreventDisplaySleepDuringVideoPlayback"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v65 = CFBooleanGetTypeID();
    if (v65 != CFGetTypeID(v6)) {
      goto LABEL_2;
    }
    int v66 = CFEqual(a3, @"PreventDisplaySleepDuringVideoPlayback");
    int v67 = CFBooleanGetValue((CFBooleanRef)v6);
    int v68 = v67 == 0;
    if (v66) {
      int v68 = v67;
    }
    if (v11[232] != v68)
    {
      v11[232] = v68;
      uint64_t v69 = *((void *)v11 + 71);
      if (v69)
      {
        if (v68) {
          uint64_t v70 = (uint64_t *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v70 = (uint64_t *)MEMORY[0x1E4F1CFC8];
        }
        FigRenderPipelineSetProperty_0(v69, @"PreventDisplaySleepDuringVideoPlayback", *v70);
      }
    }
    return 0;
  }
  if (CFEqual(a3, @"ImageQueueSlotTransitionFinished"))
  {
    playerfig_freeTransitionImageQueueAndSlot();
    return 0;
  }
  if (CFEqual(a3, @"AudioPipelineEarlyDump"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v71 = CFGetTypeID(v6);
    if (v71 != CFNumberGetTypeID()) {
      goto LABEL_2;
    }
    uint64_t v72 = v11 + 112;
LABEL_151:
    CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, v72);
    return 0;
  }
  if (CFEqual(a3, @"VideoPipelineEarlyDump"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v73 = CFGetTypeID(v6);
    if (v73 != CFNumberGetTypeID()) {
      goto LABEL_2;
    }
    uint64_t v72 = v11 + 116;
    goto LABEL_151;
  }
  if (CFEqual(a3, @"NetworkCacheURL") && v6)
  {
    CFTypeID v74 = CFGetTypeID(v6);
    if (v74 != CFURLGetTypeID()) {
      goto LABEL_2;
    }
    long long v75 = (const void *)*((void *)v11 + 24);
    if (v75) {
      CFRelease(v75);
    }
    CFTypeRef v76 = CFRetain(v6);
    uint64_t v6 = 0;
    *((void *)v11 + 24) = v76;
    return (uint64_t)v6;
  }
  if (CFEqual(a3, @"DisallowVideoLayerDisplayCompositing"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v77 = CFGetTypeID(v6);
    if (v77 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    Boolean v78 = CFBooleanGetValue((CFBooleanRef)v6);
    uint64_t v6 = 0;
    v11[233] = v78;
    return (uint64_t)v6;
  }
  if (CFEqual(a3, @"AllowGaplessTransitions"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v79 = CFGetTypeID(v6);
    if (v79 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    Boolean v80 = CFBooleanGetValue((CFBooleanRef)v6);
    uint64_t v6 = 0;
    v11[77] = v80;
    return (uint64_t)v6;
  }
  if (CFEqual(a3, @"PlayerVolume"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v81 = CFGetTypeID(v6);
    if (v81 != CFNumberGetTypeID()) {
      goto LABEL_2;
    }
    LODWORD(v228.origin.x) = 0;
    CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, &v228);
    if (*(float *)&v228.origin.x == *((float *)v11 + 191)) {
      return 0;
    }
    CFAllocatorRef v82 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v83 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &v228);
    *(void *)&valuePtr[0] = @"AVController_Volume";
    *(void *)&rect.origin.x = v83;
    CFDictionaryRef v84 = CFDictionaryCreate(v82, (const void **)valuePtr, (const void **)&rect, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    MEMORY[0x19970E290](*((void *)v11 + 62));
    *((_DWORD *)v11 + 191) = LODWORD(v228.origin.x);
    if (*((void *)v11 + 64))
    {
      if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 0))
      {
        MEMORY[0x19970E2B0](*((void *)v11 + 62));
        CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
        uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        *(CGSize *)v231 = size;
        *(void *)&v231[16] = v238;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v231, 0);
        uint64_t v85 = 0;
LABEL_192:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (v84) {
          CFRelease(v84);
        }
        if (v83) {
          CFRelease(v83);
        }
        return v85;
      }
      uint64_t v85 = playerfig_applySoftwareVolume((uint64_t)a1, @"SoftwareVolume1", 0, *((float *)v11 + 191), 0.0);
    }
    else
    {
      uint64_t v85 = 0;
    }
    MEMORY[0x19970E2B0](*((void *)v11 + 62));
    goto LABEL_192;
  }
  if (CFEqual(a3, @"PlayerMuted"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v86 = CFGetTypeID(v6);
    if (v86 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    int v87 = CFBooleanGetValue((CFBooleanRef)v6);
    if (v11[774] == v87) {
      return 0;
    }
    int v88 = v87;
    MEMORY[0x19970E290](*((void *)v11 + 62));
    if (*((void *)v11 + 64))
    {
      if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 1))
      {
        v11[774] = v88;
        MEMORY[0x19970E2B0](*((void *)v11 + 62));
        CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
        uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        *(CGSize *)v231 = size;
        *(void *)&v231[16] = v238;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v231, 0);
        uint64_t v6 = 0;
        goto LABEL_204;
      }
      uint64_t v6 = (const void *)itemfig_setMuted(*((void *)v11 + 64), v88);
    }
    else
    {
      uint64_t v6 = 0;
    }
    v11[774] = v88;
    MEMORY[0x19970E2B0](*((void *)v11 + 62));
LABEL_204:
    CFArrayRef v51 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlayerParameter_CurrentMuted, (const void **)&theDict, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (!v51) {
      return (uint64_t)v6;
    }
    goto LABEL_82;
  }
  if (CFEqual(a3, @"EQPreset"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v89 = CFGetTypeID(v6);
    if (v89 != CFNumberGetTypeID()) {
      goto LABEL_2;
    }
    LODWORD(size.width) = 0;
    CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &size);
    int width_low = LODWORD(size.width);
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80) = width_low;
    playerfig_applyEQPreset((uint64_t)a1);
    return 0;
  }
  if (CFEqual(a3, @"SetVideoLayerBoundsAutomatically"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v91 = CFGetTypeID(v6);
    if (v91 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    Boolean v92 = CFBooleanGetValue((CFBooleanRef)v6);
    uint64_t v6 = 0;
    v11[76] = v92;
    return (uint64_t)v6;
  }
  if (CFEqual(a3, @"PostClosedCaptionCommands"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v93 = CFGetTypeID(v6);
    if (v93 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    Boolean v94 = CFBooleanGetValue((CFBooleanRef)v6);
    uint64_t v6 = 0;
    v11[296] = v94;
    return (uint64_t)v6;
  }
  if (CFEqual(a3, @"DisplayClosedCaptions"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v95 = CFGetTypeID(v6);
    if (v95 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    int v96 = CFBooleanGetValue((CFBooleanRef)v6);
    playerfig_setClosedCaptionsDisplayRequested(a1, v96);
    return 0;
  }
  if (CFEqual(a3, @"RequiredNumberOfCAContextsForClosedCaptionLayers"))
  {
    if (!v6) {
      return (uint64_t)v6;
    }
    CFTypeID v97 = CFGetTypeID(v6);
    if (v97 == CFNumberGetTypeID())
    {
      LODWORD(size.width) = 0;
      CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &size);
      if (LODWORD(size.width) != *((_DWORD *)v11 + 80))
      {
        *((_DWORD *)v11 + 80) = LODWORD(size.width);
        FPSupport_updateClosedCaptionLayer((uint64_t)(v11 + 296), *((const __CFArray **)v11 + 36));
      }
    }
    return 0;
  }
  if (CFEqual(a3, @"DisplayNonForcedSubtitles"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v98 = CFGetTypeID(v6);
    if (v98 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    v11[688] = CFBooleanGetValue((CFBooleanRef)v6);
    playerfig_updateSubtitleDisplayForItem((uint64_t)a1, 0);
    playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)a1, 0);
    return 0;
  }
  if (CFEqual(a3, @"PreferredLanguageList"))
  {
    if (v6)
    {
      CFTypeID v99 = CFDictionaryGetTypeID();
      if (v99 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
    }
    playerfig_setPreferredLanguageLists((uint64_t)a1, v6);
    return 0;
  }
  if (CFEqual(a3, @"MediaSelectionCriteria"))
  {
    if (v6)
    {
      CFTypeID v100 = CFGetTypeID(v6);
      if (v100 != CFDictionaryGetTypeID()) {
        goto LABEL_2;
      }
    }
    MEMORY[0x19970E910](*((void *)v11 + 94));
    if (!FigCFEqual())
    {
      Float64 v101 = (const void *)*((void *)v11 + 91);
      if (v101)
      {
        CFTypeRef v102 = CFRetain(v101);
        Float64 v103 = (const void *)*((void *)v11 + 91);
      }
      else
      {
        Float64 v103 = 0;
        CFTypeRef v102 = 0;
      }
      *((void *)v11 + 91) = v6;
      if (!v6) {
        goto LABEL_242;
      }
      goto LABEL_241;
    }
    goto LABEL_233;
  }
  if (CFEqual(a3, @"LegibleFallbackMediaSelectionCriteria"))
  {
    if (v6)
    {
      CFTypeID v104 = CFGetTypeID(v6);
      if (v104 != CFDictionaryGetTypeID()) {
        goto LABEL_2;
      }
    }
    MEMORY[0x19970E910](*((void *)v11 + 94));
    if (!FigCFEqual())
    {
      CMTime v109 = (const void *)*((void *)v11 + 92);
      if (v109)
      {
        CFTypeRef v102 = CFRetain(v109);
        Float64 v103 = (const void *)*((void *)v11 + 92);
      }
      else
      {
        Float64 v103 = 0;
        CFTypeRef v102 = 0;
      }
      *((void *)v11 + 92) = v6;
      if (!v6) {
        goto LABEL_242;
      }
LABEL_241:
      CFRetain(v6);
LABEL_242:
      if (v103) {
        CFRelease(v103);
      }
      MEMORY[0x19970E930](*((void *)v11 + 94));
      if (v102) {
        CFRelease(v102);
      }
      goto LABEL_246;
    }
LABEL_233:
    MEMORY[0x19970E930](*((void *)v11 + 94));
    return 0;
  }
  if (CFEqual(a3, @"AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v105 = CFBooleanGetTypeID();
    if (v105 != CFGetTypeID(v6)) {
      goto LABEL_2;
    }
    int v106 = v11[744] != 0;
    v11[744] = CFBooleanGetValue((CFBooleanRef)v6);
    if (v11[760] == v106) {
      return 0;
    }
    goto LABEL_246;
  }
  if (CFEqual(a3, @"AppliesMediaSelectionCriteriaAutomatically"))
  {
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v110 = CFBooleanGetTypeID();
    if (v110 != CFGetTypeID(v6)) {
      goto LABEL_2;
    }
    int v111 = v11[760];
    int v112 = CFBooleanGetValue((CFBooleanRef)v6);
    uint64_t v6 = 0;
    v11[760] = v112;
    if (!v112 || v111) {
      return (uint64_t)v6;
    }
    goto LABEL_246;
  }
  if (CFEqual(a3, @"ActionAtEnd"))
  {
    int ActionAtEndForString = FigPlaybackGetActionAtEndForString(v6);
    playerfig_setActionAtEnd(a1, ActionAtEndForString);
    return 0;
  }
  if (CFEqual(a3, @"ApplyVideoTrackMatrix"))
  {
    if (!v6) {
      return (uint64_t)v6;
    }
    CFTypeID v114 = CFGetTypeID(v6);
    if (v114 == CFBooleanGetTypeID())
    {
      int v115 = CFBooleanGetValue((CFBooleanRef)v6);
      if (v115 == v11[783]) {
        goto LABEL_2;
      }
      v11[783] = v115;
      MEMORY[0x19970E910](*((void *)v11 + 28));
      playerfig_updateVideoLayerSize(a1, 0);
      MEMORY[0x19970E930](*((void *)v11 + 28));
      uint64_t v116 = *((void *)v11 + 64);
      if (v116) {
        itemfig_updateRotationOnVideoRenderPipeline(v116, 0);
      }
    }
    return 0;
  }
  if (CFEqual(a3, @"TimeAccuracy"))
  {
    MEMORY[0x19970E910](*((void *)v11 + 5));
    if (CFSetGetCount(*((CFSetRef *)v11 + 4)) < 1)
    {
      if (CFEqual(v6, @"Exact"))
      {
        uint64_t v6 = 0;
        v11[78] = 1;
        goto LABEL_294;
      }
      if (CFEqual(v6, @"Approximate"))
      {
        uint64_t v6 = 0;
        v11[78] = 0;
        goto LABEL_294;
      }
    }
    uint64_t v6 = (const void *)FigSignalErrorAt();
LABEL_294:
    MEMORY[0x19970E930](*((void *)v11 + 5));
    return (uint64_t)v6;
  }
  if (CFEqual(a3, @"FigAudioSession"))
  {
    if (v6)
    {
      CFTypeID v117 = CFGetTypeID(v6);
      if (v117 != FigAudioSessionGetTypeID()) {
        goto LABEL_2;
      }
    }
    MEMORY[0x19970E910](*((void *)v11 + 57));
    v118 = (const void *)*((void *)v11 + 58);
    *((void *)v11 + 58) = v6;
    if (v6) {
      CFRetain(v6);
    }
    if (v118) {
      CFRelease(v118);
    }
    MEMORY[0x19970E930](*((void *)v11 + 57));
    if (!*((void *)v11 + 70))
    {
      CFArrayRef v119 = (const __CFArray *)*((void *)v11 + 79);
      if (v119) {
        CFArrayGetCount(v119);
      }
    }
    CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
    uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(CGSize *)v231 = size;
    *(void *)&v231[16] = v238;
    goto LABEL_281;
  }
  if (CFEqual(a3, @"FigAudioSession2")) {
    return 0;
  }
  if (CFEqual(a3, @"ClientName"))
  {
    if (!v6 || (CFTypeID v120 = CFStringGetTypeID(), v120 == CFGetTypeID(v6)))
    {
      v121 = (const void *)*((void *)v11 + 1);
      if (v121)
      {
        CFRelease(v121);
        *((void *)v11 + 1) = 0;
      }
      if (v6)
      {
        CFTypeRef v122 = CFRetain(v6);
        uint64_t v6 = 0;
        *((void *)v11 + 1) = v122;
      }
      return (uint64_t)v6;
    }
    return 0;
  }
  if (!CFEqual(a3, @"STSLabel"))
  {
    if (CFEqual(a3, @"AudioDeviceUID"))
    {
      if (v6)
      {
        CFTypeID v126 = CFStringGetTypeID();
        if (v126 != CFGetTypeID(v6)) {
          return 0;
        }
      }
      if (FigCFEqual()) {
        return 0;
      }
      v127 = (const void *)*((void *)v11 + 85);
      *((void *)v11 + 85) = v6;
      if (v6) {
        CFRetain(v6);
      }
      if (v127) {
        CFRelease(v127);
      }
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
LABEL_314:
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v231, 0);
LABEL_246:
      uint64_t v107 = (uint64_t)a1;
      int v108 = 0;
LABEL_247:
      playerfig_applyAutoSelectionCriteriaInternal(v107, v108, 0);
      return 0;
    }
    if (CFEqual(a3, @"EnableHardwareAcceleratedVideoDecoder"))
    {
      if (!v6)
      {
        *((_DWORD *)v11 + 196) = 0;
        return (uint64_t)v6;
      }
      CFTypeID v128 = CFGetTypeID(v6);
      if (v128 == CFBooleanGetTypeID())
      {
        BOOL v129 = *MEMORY[0x1E4F1CFD0] == (void)v6;
        uint64_t v6 = 0;
        if (v129) {
          int v130 = 1;
        }
        else {
          int v130 = 2;
        }
        *((_DWORD *)v11 + 196) = v130;
        return (uint64_t)v6;
      }
      return 4294954516;
    }
    if (CFEqual(a3, @"PreferredVideoDecoderGPURegistryID"))
    {
      if (!v6 || (CFTypeID v131 = CFNumberGetTypeID(), v131 == CFGetTypeID(v6)))
      {
        if (FigCFEqual()) {
          return 0;
        }
        v132 = (const void *)*((void *)v11 + 99);
        *((void *)v11 + 99) = v6;
        if (v6) {
          CFRetain(v6);
        }
        if (v132) {
          CFRelease(v132);
        }
        CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
        uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        *(CGSize *)v231 = size;
        *(void *)&v231[16] = v238;
        goto LABEL_281;
      }
      return 4294954516;
    }
    if (CFEqual(a3, @"GatherPerformanceHistoryArray"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v133 = CFBooleanGetTypeID();
      if (v133 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
      int v134 = CFBooleanGetValue((CFBooleanRef)v6);
      if (v134 != v11[812])
      {
        v11[812] = v134;
        if (!v134)
        {
          v135 = (const void *)*((void *)v11 + 102);
          if (v135)
          {
            CFRelease(v135);
            uint64_t v6 = 0;
            *((void *)v11 + 102) = 0;
            return (uint64_t)v6;
          }
        }
      }
      return 0;
    }
    if (CFEqual(a3, @"DisplayList"))
    {
      if (v6)
      {
        CFTypeID v136 = CFArrayGetTypeID();
        if (v136 != CFGetTypeID(v6))
        {
          uint64_t v6 = (const void *)FigSignalErrorAt();
          if (v6) {
            return (uint64_t)v6;
          }
LABEL_354:
          MEMORY[0x19970E290](*((void *)v11 + 62));
          if (*((void *)v11 + 64) && (uint64_t v142 = *(void *)(CMBaseObjectGetDerivedStorage() + 1160)) != 0) {
            uint64_t v6 = (const void *)FigCPECryptorSetProperty(v142, @"DisplayList", *((void *)v11 + 106));
          }
          else {
            uint64_t v6 = 0;
          }
          MEMORY[0x19970E2B0](*((void *)v11 + 62));
          return (uint64_t)v6;
        }
        CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)v6);
        CFArrayRef v138 = Copy;
        if (!Copy) {
          return 4294954510;
        }
        v140 = (const void *)*((void *)v11 + 106);
        *((void *)v11 + 106) = Copy;
        CFRetain(Copy);
        char v141 = 0;
        if (!v140)
        {
LABEL_351:
          if ((v141 & 1) == 0) {
            CFRelease(v138);
          }
          goto LABEL_354;
        }
      }
      else
      {
        CFArrayRef v138 = 0;
        v140 = (const void *)*((void *)v11 + 106);
        *((void *)v11 + 106) = 0;
        char v141 = 1;
        if (!v140) {
          goto LABEL_351;
        }
      }
      CFRelease(v140);
      goto LABEL_351;
    }
    if (CFEqual(a3, @"DecodeMultipleAudioTracks"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v139 = CFBooleanGetTypeID();
      if (v139 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
      v11[120] = CFBooleanGetValue((CFBooleanRef)v6);
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
      goto LABEL_281;
    }
    if (CFEqual(a3, @"DecodeMultipleVideoTracks"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v143 = CFBooleanGetTypeID();
      if (v143 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
      v11[121] = CFBooleanGetValue((CFBooleanRef)v6);
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
      goto LABEL_281;
    }
    if (CFEqual(a3, @"ClientSuspended"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v144 = CFBooleanGetTypeID();
      if (v144 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
      int v145 = CFBooleanGetValue((CFBooleanRef)v6);
      MEMORY[0x19970E290](*((void *)v11 + 62));
      uint64_t v147 = CMBaseObjectGetDerivedStorage();
      if (v145 != v11[65])
      {
        v11[65] = v145;
        if (dword_1E9350BF0)
        {
          LODWORD(valuePtr[0]) = 0;
          LOBYTE(rect.origin.x) = 0;
          v148 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        int v184 = *((_DWORD *)v11 + 15);
        if (v145)
        {
          uint64_t v146 = 0;
          uint64_t updated = 0;
          if (v184 != 1)
          {
LABEL_555:
            if (v147)
            {
              if (*(void *)(v147 + 128))
              {
                CMByteStreamGetCMBaseObject();
                FigCRABSGetClassID();
                if (CMBaseObjectIsMemberOfClass()) {
                  playerfig_configureDownloadInPlayQueue();
                }
              }
            }
            MEMORY[0x19970E2B0](*((void *)v11 + 62), v146);
            return updated;
          }
LABEL_521:
          uint64_t updated = playerfig_updatePlayerActiveState(a1, v146);
          goto LABEL_555;
        }
        if (!v184 && v11[64])
        {
          LODWORD(v146) = 1;
          goto LABEL_521;
        }
      }
      uint64_t updated = 0;
      goto LABEL_555;
    }
    if (CFEqual(a3, @"MinRateForAudioPlayback"))
    {
      if (v6)
      {
        CFTypeID v149 = CFNumberGetTypeID();
        if (v149 != CFGetTypeID(v6)) {
          goto LABEL_2;
        }
        LODWORD(valuePtr[0]) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, valuePtr);
        if (v11[801])
        {
          int v150 = valuePtr[0];
          if (*(float *)valuePtr == *((float *)v11 + 201)) {
            return 0;
          }
          if (*((float *)v11 + 12) != 0.0 && dword_1E9350BF0 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v228.origin.x) = 0;
            v151 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v152 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v153 = v152;
            }
            else {
              unsigned int v153 = v152 & 0xFFFFFFFE;
            }
            if (v153)
            {
              double v154 = *((float *)v11 + 201);
              *(_DWORD *)v231 = 136315650;
              *(void *)&v231[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v231[12] = 2048;
              *(double *)&v231[14] = v154;
              *(_WORD *)&v231[22] = 2048;
              double v232 = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v150 = valuePtr[0];
          }
          v11[801] = 1;
        }
        else
        {
          if (*((float *)v11 + 12) != 0.0 && dword_1E9350BF0 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v228.origin.x) = 0;
            v187 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v188 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v189 = v188;
            }
            else {
              unsigned int v189 = v188 & 0xFFFFFFFE;
            }
            if (v189)
            {
              *(_DWORD *)v231 = 136315394;
              *(void *)&v231[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v231[12] = 2048;
              *(double *)&v231[14] = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v11[801] = 1;
          int v150 = valuePtr[0];
        }
        *((_DWORD *)v11 + 201) = v150;
      }
      else
      {
        if (v11[801] != 1) {
          return 0;
        }
        if (*((float *)v11 + 12) != 0.0 && dword_1E9350BF0 >= 2)
        {
          LODWORD(valuePtr[0]) = 0;
          LOBYTE(rect.origin.x) = 0;
          v186 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11[801] = 0;
      }
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
      goto LABEL_281;
    }
    if (CFEqual(a3, @"MaxRateForAudioPlayback"))
    {
      if (v6)
      {
        CFTypeID v155 = CFNumberGetTypeID();
        if (v155 != CFGetTypeID(v6)) {
          goto LABEL_2;
        }
        LODWORD(valuePtr[0]) = 0;
        CFNumberGetValue((CFNumberRef)v6, kCFNumberFloat32Type, valuePtr);
        if (v11[802])
        {
          int v156 = valuePtr[0];
          if (*((float *)v11 + 202) == *(float *)valuePtr) {
            return 0;
          }
          if (*((float *)v11 + 12) != 0.0 && dword_1E9350BF0 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v228.origin.x) = 0;
            v157 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v158 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v159 = v158;
            }
            else {
              unsigned int v159 = v158 & 0xFFFFFFFE;
            }
            if (v159)
            {
              double v160 = *((float *)v11 + 202);
              *(_DWORD *)v231 = 136315650;
              *(void *)&v231[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v231[12] = 2048;
              *(double *)&v231[14] = v160;
              *(_WORD *)&v231[22] = 2048;
              double v232 = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v156 = valuePtr[0];
          }
          v11[802] = 1;
        }
        else
        {
          if (*((float *)v11 + 12) != 0.0 && dword_1E9350BF0 >= 2)
          {
            LODWORD(rect.origin.x) = 0;
            LOBYTE(v228.origin.x) = 0;
            v191 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v192 = LODWORD(rect.origin.x);
            if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v193 = v192;
            }
            else {
              unsigned int v193 = v192 & 0xFFFFFFFE;
            }
            if (v193)
            {
              *(_DWORD *)v231 = 136315394;
              *(void *)&v231[4] = "playerfig_handleSetProperty";
              *(_WORD *)&v231[12] = 2048;
              *(double *)&v231[14] = *(float *)valuePtr;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v11[802] = 1;
          int v156 = valuePtr[0];
        }
        *((_DWORD *)v11 + 202) = v156;
      }
      else
      {
        if (v11[802] != 1) {
          return 0;
        }
        if (*((float *)v11 + 12) != 0.0 && dword_1E9350BF0 >= 2)
        {
          LODWORD(valuePtr[0]) = 0;
          LOBYTE(rect.origin.x) = 0;
          v190 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v11[802] = 0;
      }
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
      goto LABEL_281;
    }
    if (CFEqual(a3, @"MasterClock"))
    {
      if (v6)
      {
        CFTypeID v161 = CFGetTypeID(v6);
        if (v161 != CMClockGetTypeID()) {
          goto LABEL_2;
        }
        v162 = (const void *)*((void *)v11 + 11);
        if (v162 == v6) {
          return 0;
        }
        *((void *)v11 + 11) = v6;
        CFRetain(v6);
        if (!v162) {
          goto LABEL_489;
        }
      }
      else
      {
        v162 = (const void *)*((void *)v11 + 11);
        if (!v162) {
          return 0;
        }
        *((void *)v11 + 11) = 0;
      }
      CFRelease(v162);
LABEL_489:
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
LABEL_281:
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v231, 0);
      return 0;
    }
    if (CFEqual(a3, @"SendToNero"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v163 = CFDictionaryGetTypeID();
      if (v163 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
      CFBooleanRef v164 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v6, @"Visuals");
      if (v164 && (CFBooleanRef v165 = v164, v166 = v11[122], v166 != CFBooleanGetValue(v164)))
      {
        Boolean v194 = CFBooleanGetValue(v165);
        v11[122] = v194;
        BOOL v167 = (v11[123] | v194) == 0;
      }
      else
      {
        BOOL v167 = 1;
      }
      MEMORY[0x19970E910](*((void *)v11 + 19));
      if (v11[122])
      {
        v195 = CFDictionaryGetValue((CFDictionaryRef)v6, @"NeroTransport");
        if (v195)
        {
          v196 = (const void *)*((void *)v11 + 20);
          *((void *)v11 + 20) = v195;
          CFRetain(v195);
          if (v196) {
            CFRelease(v196);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      else
      {
        v207 = (const void *)*((void *)v11 + 20);
        if (v207)
        {
          CFRelease(v207);
          *((void *)v11 + 20) = 0;
        }
      }
      MEMORY[0x19970E930](*((void *)v11 + 19));
      if (v167) {
        return 0;
      }
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
      goto LABEL_281;
    }
    if (CFEqual(a3, @"NeroDisplaySize"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v168 = CFDictionaryGetTypeID();
      if (v168 != CFGetTypeID(v6)) {
        goto LABEL_2;
      }
      CGSize size = (CGSize)*MEMORY[0x1E4F1DB30];
      if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v6, &size)) {
        return FigSignalErrorAt();
      }
      if (size.width == *((double *)v11 + 16) && size.height == *((double *)v11 + 17)) {
        return 0;
      }
      *((CGSize *)v11 + 8) = size;
      v169 = (const void *)*((void *)v11 + 64);
      if (!v169 || (!v11[122] || !v11[123]) && !v11[185]) {
        return 0;
      }
      uint64_t v170 = *((void *)v11 + 73);
      if (!v170
        || (uint64_t v6 = (const void *)fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v170, *((double *)v11 + 16), *((double *)v11 + 17), *((void *)v11 + 18), v169), !v6))
      {
        uint64_t v171 = *((void *)v11 + 72);
        if (v171) {
          uint64_t v6 = (const void *)fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v171, *((double *)v11 + 16), *((double *)v11 + 17), *((void *)v11 + 18), *((const void **)v11 + 64));
        }
        else {
          uint64_t v6 = 0;
        }
      }
      uint64_t v197 = CMBaseObjectGetDerivedStorage();
      if (!*(void *)(v197 + 1856)) {
        return (uint64_t)v6;
      }
      uint64_t v198 = v197;
      CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*((CGSize *)v11 + 8));
      if (!DictionaryRepresentation) {
        return (uint64_t)v6;
      }
      CFArrayRef v51 = DictionaryRepresentation;
      FigOutOfBandTrackControllerSetProperty(*(void *)(v198 + 1856), @"NeroDisplaySize", DictionaryRepresentation);
LABEL_82:
      CFRelease(v51);
      return (uint64_t)v6;
    }
    if (CFEqual(a3, @"NeroVideoGravity"))
    {
      if (v6)
      {
        CFTypeID v172 = CFStringGetTypeID();
        if (v172 != CFGetTypeID(v6)) {
          goto LABEL_2;
        }
      }
      if (!FigCFEqual())
      {
        v173 = (const void *)*((void *)v11 + 18);
        *((void *)v11 + 18) = v6;
        if (v6) {
          CFRetain(v6);
        }
        if (v173) {
          CFRelease(v173);
        }
        if (*((void *)v11 + 64) && (v11[122] && v11[123] || v11[185]))
        {
          uint64_t v174 = *((void *)v11 + 71);
          if (v174) {
            uint64_t v6 = (const void *)FigRenderPipelineSetProperty_0(v174, @"NeroVideoGravity", *((void *)v11 + 18));
          }
          else {
            uint64_t v6 = 0;
          }
          uint64_t v200 = *((void *)v11 + 73);
          if (v200) {
            uint64_t v6 = (const void *)fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v200, *((double *)v11 + 16), *((double *)v11 + 17), *((void *)v11 + 18), *((const void **)v11 + 64));
          }
          if (!v6)
          {
            uint64_t v201 = *((void *)v11 + 72);
            if (v201) {
              uint64_t v6 = (const void *)fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v201, *((double *)v11 + 16), *((double *)v11 + 17), *((void *)v11 + 18), *((const void **)v11 + 64));
            }
            else {
              uint64_t v6 = 0;
            }
          }
          uint64_t v208 = *(void *)(CMBaseObjectGetDerivedStorage() + 1856);
          if (v208) {
            FigOutOfBandTrackControllerSetProperty(v208, @"NeroVideoGravity", *((const void **)v11 + 18));
          }
          return (uint64_t)v6;
        }
      }
      return 0;
    }
    if (CFEqual(a3, @"ProhibitAMR"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v175 = CFGetTypeID(v6);
      if (v175 != CFBooleanGetTypeID()) {
        goto LABEL_2;
      }
      Boolean v176 = CFBooleanGetValue((CFBooleanRef)v6);
      uint64_t v6 = 0;
      v11[856] = v176;
      return (uint64_t)v6;
    }
    if (CFEqual(a3, @"AllowPixelBufferPoolSharing"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v177 = CFGetTypeID(v6);
      if (v177 != CFBooleanGetTypeID())
      {
        CFTypeID v178 = CFGetTypeID(v6);
        if (v178 != CFNumberGetTypeID()) {
          goto LABEL_2;
        }
      }
      v179 = (const void *)*((void *)v11 + 108);
      *((void *)v11 + 108) = v6;
      CFRetain(v6);
      if (v179) {
        CFRelease(v179);
      }
      return 0;
    }
    if (CFEqual(a3, @"OptionsForPreWiringPixelBuffers"))
    {
      CGSize size = (CGSize)*MEMORY[0x1E4F1DB30];
      if (v6 && !FigCFDictionaryGetCGSizeIfPresent()) {
        return FigSignalErrorAt();
      }
      CFTypeRef v180 = SecTaskCopyValueForEntitlement(*((SecTaskRef *)v11 + 105), @"com.apple.coremedia.allow-pre-wiring-pixel-buffers", 0);
      if (v180 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
      {
        MEMORY[0x19970E910](*((void *)v11 + 109));
        v203 = (const void *)*((void *)v11 + 110);
        CFDictionaryRef v204 = theDict;
        *((void *)v11 + 110) = theDict;
        if (v204) {
          CFRetain(v204);
        }
        if (v203) {
          CFRelease(v203);
        }
        MEMORY[0x19970E930](*((void *)v11 + 109));
        uint64_t v181 = (uint64_t)playerfig_preWirePixelBuffersIfNeeded((uint64_t)a1, 0);
      }
      else
      {
        uint64_t v181 = FigSignalErrorAt();
      }
      uint64_t v202 = v181;
      if (v180) {
        CFRelease(v180);
      }
      return v202;
    }
    if (CFEqual(a3, @"PrepareItemOnDispatchQueue")) {
      return 0;
    }
    if (CFEqual(a3, @"AllowOutOfBandTextTrackRendering"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v182 = CFGetTypeID(v6);
      if (v182 != CFBooleanGetTypeID()) {
        goto LABEL_2;
      }
      int v183 = CFBooleanGetValue((CFBooleanRef)v6);
      if (v183 == v11[184]) {
        return 0;
      }
      v11[184] = v183;
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
      goto LABEL_281;
    }
    if (CFEqual(a3, @"OutOfBandTextRenderingForNeroVideo"))
    {
      if (!v6) {
        goto LABEL_2;
      }
      CFTypeID v205 = CFGetTypeID(v6);
      if (v205 != CFBooleanGetTypeID()) {
        goto LABEL_2;
      }
      Boolean v206 = CFBooleanGetValue((CFBooleanRef)v6);
      uint64_t v6 = 0;
      v11[185] = v206;
      return (uint64_t)v6;
    }
    if (!CFEqual(a3, @"MultichannelAudioStrategy"))
    {
      if (!CFEqual(a3, @"BufferedAirPlayOutput"))
      {
        if (CFEqual(a3, @"AutomaticallyWaitsToMinimizeStalling"))
        {
          if (!v6) {
            goto LABEL_2;
          }
          CFTypeID v214 = CFGetTypeID(v6);
          if (v214 != CFBooleanGetTypeID()) {
            goto LABEL_2;
          }
          int v215 = CFBooleanGetValue((CFBooleanRef)v6);
          if (v215 != v11[57])
          {
            v11[57] = v215;
            if (*((void *)v11 + 64))
            {
              uint64_t v216 = CMBaseObjectGetDerivedStorage();
              MEMORY[0x19970E910](*(void *)(v216 + 1896));
              FigReportingAgentStatsSetIntValue(*(void *)(v216 + 1904), 0x1EE582B78, 0x1EE583EF8, v11[57]);
              MEMORY[0x19970E930](*(void *)(v216 + 1896));
            }
            playerfig_updatePlaybackStateAndBossRate(a1, 9, 0);
          }
          return 0;
        }
        if (CFEqual(a3, @"CaptionPlaybackStrategy"))
        {
          if (!v6) {
            goto LABEL_2;
          }
          CFTypeID v217 = CFStringGetTypeID();
          if (v217 != CFGetTypeID(v6)) {
            goto LABEL_2;
          }
          if (CFEqual(v6, @"CoreTextSubtitleRenderer"))
          {
            uint64_t v6 = 0;
            v11[782] = 1;
          }
          else
          {
            if (!CFEqual(v6, @"CaptionDisplayService")) {
              goto LABEL_2;
            }
            uint64_t v6 = 0;
            v11[782] = 0;
          }
        }
        else if (CFEqual(a3, @"CaptionPipelineStrategy"))
        {
          if (!v6) {
            goto LABEL_2;
          }
          CFTypeID v218 = CFStringGetTypeID();
          if (v218 != CFGetTypeID(v6)) {
            goto LABEL_2;
          }
          if (CFEqual(v6, @"CFAttributedStrings"))
          {
            uint64_t v6 = 0;
            v11[781] = 1;
          }
          else
          {
            if (!CFEqual(v6, @"FigCaptions")) {
              goto LABEL_2;
            }
            uint64_t v6 = 0;
            v11[781] = 0;
          }
        }
        else
        {
          if (CFEqual(a3, @"ResourceConservationLevelWhenPaused"))
          {
            if (v6)
            {
              CFTypeID v219 = CFGetTypeID(v6);
              if (v219 != CFNumberGetTypeID()) {
                goto LABEL_2;
              }
              LODWORD(size.width) = 0;
              CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &size);
              int v220 = LODWORD(size.width);
            }
            else
            {
              int v220 = 0;
              LODWORD(size.width) = 0;
            }
            playerfig_setResourceConservationLevelAndUpdateWhenPaused(a1, v220);
            return 0;
          }
          if (CFEqual(a3, @"AutomaticallyResumesRenderingAfterConfigurationChange"))
          {
            if (!v6) {
              goto LABEL_2;
            }
            CFTypeID v221 = CFGetTypeID(v6);
            if (v221 != CFBooleanGetTypeID()) {
              goto LABEL_2;
            }
            BOOL v129 = *MEMORY[0x1E4F1CFD0] == (void)v6;
            uint64_t v6 = 0;
            char v222 = v129;
            v11[58] = v222;
          }
          else
          {
            if (!CFEqual(a3, @"AssumeItemsWaitingToPlayWhilePlayerPaused"))
            {
              if (!CFEqual(a3, @"SuppressAudioRendering")) {
                return 4294954512;
              }
              if (!v6) {
                goto LABEL_2;
              }
              CFTypeID v225 = CFGetTypeID(v6);
              if (v225 != CFBooleanGetTypeID()) {
                goto LABEL_2;
              }
              int v226 = *MEMORY[0x1E4F1CFD0] == (void)v6;
              if (v11[1105] != v226)
              {
                if (dword_1E9350BF0)
                {
                  LODWORD(valuePtr[0]) = 0;
                  LOBYTE(rect.origin.x) = 0;
                  v227 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                v11[1105] = v226;
                playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(a1);
              }
              return 0;
            }
            if (!v6) {
              goto LABEL_2;
            }
            CFTypeID v223 = CFGetTypeID(v6);
            if (v223 != CFBooleanGetTypeID()) {
              goto LABEL_2;
            }
            BOOL v129 = *MEMORY[0x1E4F1CFD0] == (void)v6;
            uint64_t v6 = 0;
            char v224 = v129;
            v11[59] = v224;
          }
        }
        return (uint64_t)v6;
      }
      if (v6)
      {
        CFTypeID v212 = CFGetTypeID(v6);
        if (v212 != FigBufferedAirPlayOutputGetTypeID()) {
          goto LABEL_2;
        }
      }
      if (FigCFEqual()) {
        return 0;
      }
      MEMORY[0x19970E910](*((void *)v11 + 22));
      v213 = (const void *)*((void *)v11 + 21);
      *((void *)v11 + 21) = v6;
      if (v6) {
        CFRetain(v6);
      }
      if (v213) {
        CFRelease(v213);
      }
      MEMORY[0x19970E930](*((void *)v11 + 22));
      itemfig_reportingAgentReportBufferedAirPlayMode(*((void *)v11 + 64));
      CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
      uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(CGSize *)v231 = size;
      *(void *)&v231[16] = v238;
      goto LABEL_314;
    }
    if (!v6) {
      goto LABEL_2;
    }
    CFTypeID v209 = CFStringGetTypeID();
    if (v209 != CFGetTypeID(v6)
      || !CFEqual(v6, @"MatchMultichannelTrackPreferenceToAudioDevice")
      && !CFEqual(v6, @"PreferStereo")
      && !CFEqual(v6, @"PreferExclusivePassthrough")
      && !CFEqual(v6, @"PreferAC3ViaExclusivePassthrough"))
    {
      goto LABEL_2;
    }
    if (CFEqual(v6, *((CFTypeRef *)v11 + 113))) {
      return 0;
    }
    v210 = (const void *)*((void *)v11 + 113);
    *((void *)v11 + 113) = v6;
    CFRetain(v6);
    if (v210) {
      CFRelease(v210);
    }
    int v211 = CFEqual(v6, @"PreferExclusivePassthrough");
    if (v211) {
      FPSupport_ReleasePassthroughHelper();
    }
    if (CFEqual(v6, @"PreferAC3ViaExclusivePassthrough"))
    {
      FPSupport_ReleasePassthroughHelper();
    }
    else if (!(v11[920] | v211))
    {
LABEL_571:
      uint64_t v107 = (uint64_t)a1;
      int v108 = 1;
      goto LABEL_247;
    }
    CGSize size = (CGSize)*MEMORY[0x1E4F1F9F8];
    uint64_t v238 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(CGSize *)v231 = size;
    *(void *)&v231[16] = v238;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&size, (uint64_t)v231, 0);
    goto LABEL_571;
  }
  if (v6)
  {
    CFTypeID v123 = CFStringGetTypeID();
    if (v123 != CFGetTypeID(v6)) {
      return 0;
    }
  }
  MEMORY[0x19970E910](*((void *)v11 + 3));
  v124 = (const void *)*((void *)v11 + 2);
  *((void *)v11 + 2) = v6;
  if (v6) {
    CFRetain(v6);
  }
  if (v124) {
    CFRelease(v124);
  }
  MEMORY[0x19970E930](*((void *)v11 + 3));
  uint64_t v125 = *((void *)v11 + 2);

  return fp_setPropertyOnAllAudioRenderPipelines((uint64_t)a1, @"STSLabel", v125);
}

uint64_t playerfig_setClientVideoLayerArray(const void *a1, const __CFArray *a2)
{
  cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!a2 || !CFArrayGetCount(a2)) {
    a2 = 0;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    CFDictionaryRef Mutable = 0;
    CFArrayRef v10 = 0;
    CFArrayRef v11 = 0;
    CFArrayRef v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_53;
  }
  CFTypeRef v42 = v4;
  CFTypeRef v41 = CFRetain(a1);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 224));
  CFArrayRef theArray = *(const __CFArray **)(DerivedStorage + 208);
  *(void *)(DerivedStorage + 208) = 0;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 224));
  CFArrayRef v12 = *(const __CFArray **)(DerivedStorage + 200);
  if (v12)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 200));
    if (a2)
    {
LABEL_8:
      CFIndex v15 = CFArrayGetCount(a2);
      goto LABEL_11;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  CFIndex v15 = 0;
LABEL_11:
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v6 = FigSignalErrorAt();
    CFArrayRef v10 = 0;
LABEL_69:
    CFArrayRef v11 = 0;
    uint64_t v13 = 0;
    uint64_t v7 = v41;
    uint64_t v4 = v42;
    goto LABEL_52;
  }
  CFArrayRef v10 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
  if (!v10)
  {
    uint64_t v21 = FigSignalErrorAt();
LABEL_68:
    uint64_t v6 = v21;
    goto LABEL_69;
  }
  CFDictionaryRef v40 = a1;
  if (v15 >= 1)
  {
    for (CFIndex i = 0; i != v15; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (!v12
        || (v45.location = 0,
            v45.length = Count,
            int v19 = CFArrayContainsValue(v12, v45, ValueAtIndex),
            uint64_t v20 = Mutable,
            !v19))
      {
        uint64_t v20 = v10;
      }
      CFArrayAppendValue(v20, ValueAtIndex);
    }
  }
  v46.length = CFArrayGetCount(v10);
  v46.location = 0;
  CFArrayAppendArray(Mutable, v10, v46);
  uint64_t v21 = FigDeferredTransactionCreate((uint64_t)v16, (uint64_t *)cf);
  if (v21) {
    goto LABEL_68;
  }
  uint64_t v8 = (uint64_t)theArray;
  if (theArray)
  {
    CFIndex v22 = CFArrayGetCount(theArray);
    uint64_t v8 = (uint64_t)theArray;
    if (v22 >= 1)
    {
      playerfig_clearVideoLayers(theArray, 1, cf[0]);
      uint64_t v8 = (uint64_t)theArray;
    }
  }
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v6 = 0;
    CFArrayRef v11 = 0;
    uint64_t v13 = 0;
    uint64_t v7 = v41;
    uint64_t v4 = v42;
    goto LABEL_53;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  CFArrayRef v23 = *(const __CFArray **)(DerivedStorage + 504);
  if (v23 && CFArrayGetCount(v23) >= 1)
  {
    CFTypeID v24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    itemfig_handleReadyToDisplayVideoLatch((uint64_t)v24, 4, cf[0]);
  }
  *(void *)(DerivedStorage + 200) = Mutable;
  CFRetain(Mutable);
  uint64_t v25 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 200));
  CFArrayRef v11 = CFArrayCreateMutable(v16, v25, MEMORY[0x1E4F1D510]);
  if (v25 < 1)
  {
LABEL_33:
    int v29 = (const void *)FigCFCopyCompactDescription();
    CFArrayRef v30 = (const void *)FigCFCopyCompactDescription();
    if (dword_1E9350BF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v29) {
      CFRelease(v29);
    }
    if (v30) {
      CFRelease(v30);
    }
    FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(cf[0], Mutable, v11, (uint64_t)"playerfig_setClientVideoLayerArray");
    FPSupport_AppendDeferredTransactionChangeForSettingEdgeAntialiasingMaskOnLayers(cf[0], 0, v11, (uint64_t)"playerfig_setClientVideoLayerArray");
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 224));
    uint64_t v13 = *(void *)(DerivedStorage + 208);
    *(void *)(DerivedStorage + 208) = v11;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 224));
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      uint64_t v32 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)v32)
      {
        uint64_t v33 = v32;
        MEMORY[0x19970E910](*(void *)(v32 + 848));
        uint64_t v34 = *(const void **)(v33 + 856);
        if (v34)
        {
          CFRelease(v34);
          *(void *)(v33 + 856) = 0;
        }
        MEMORY[0x19970E930](*(void *)(v33 + 848));
      }
    }
    if (Count >= v15) {
      int v35 = playerfig_removeExcessImageQueuesAndSlotsFromAllWorkingOrLameDuckItems((uint64_t)v40, cf[0]);
    }
    else {
      int v35 = playerfig_gracefullyAddImageQueues((uint64_t)v40, cf[0]);
    }
    uint64_t v7 = v41;
    uint64_t v4 = v42;
    if (v35
      || (CFArrayRef v37 = *(const __CFArray **)(DerivedStorage + 504)) != 0
      && CFArrayGetCount(v37) >= 1
      && (uint64_t v38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0),
          itemfig_handleReadyToDisplayVideoLatch((uint64_t)v38, 3, cf[0])))
    {
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
      playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v40, cf[0], 0);
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    }
    CFArrayRef v11 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    while (1)
    {
      CFDictionaryRef v26 = [FigVideoLayer alloc];
      int v27 = [(FigVideoLayer *)v26 initWithDeferredTransaction:cf[0]];
      if (!v27) {
        break;
      }
      int v28 = v27;
      CFArrayAppendValue(v11, v27);
      if (*(unsigned char *)(DerivedStorage + 233)) {
        FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(cf[0], v28, 0, (uint64_t)"playerfig_setClientVideoLayerArray");
      }
      if (!--v25) {
        goto LABEL_33;
      }
    }
    uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    uint64_t v7 = v41;
    uint64_t v4 = v42;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v13 = 0;
    uint64_t v6 = 4294954434;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
LABEL_52:
  uint64_t v8 = (uint64_t)theArray;
LABEL_53:
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], v8, (uint64_t)"playerfig_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], v13, (uint64_t)"playerfig_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], (uint64_t)v11, (uint64_t)"playerfig_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], (uint64_t)v12, (uint64_t)"playerfig_setClientVideoLayerArray");
  FigDeferredTransactionCommit((uint64_t)cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v6;
}

uint64_t playerfig_setVideoTargetArray(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v70 = (uint64_t)a1;
  CFTypeRef v5 = CFRetain(a1);
  if (a2) {
    uint64_t Count = CFArrayGetCount(a2);
  }
  else {
    uint64_t Count = 0;
  }
  char v81 = 0;
  CFMutableArrayRef v79 = 0;
  Boolean v80 = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
  uint64_t v68 = DerivedStorage;
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 248);
  if (v7) {
    uint64_t v8 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 248));
  }
  else {
    uint64_t v8 = 0;
  }
  if (FigCFEqual())
  {
    uint64_t MutableCopy = 0;
    uint64_t matched = 0;
LABEL_9:
    MEMORY[0x19970E930](*(void *)(v68 + 240));
    goto LABEL_10;
  }
  CFTypeRef v66 = v5;
  if (Count) {
    CFArrayRef v12 = a2;
  }
  else {
    CFArrayRef v12 = 0;
  }
  uint64_t v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v8 < 1)
  {
    uint64_t MutableCopy = 0;
    goto LABEL_36;
  }
  if (v12)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      uint64_t MutableCopy = Mutable;
      for (CFIndex i = 0; i != v8; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        v83.locatioCFIndex n = 0;
        v83.length = Count;
        if (!CFArrayContainsValue(v12, v83, ValueAtIndex)) {
          CFArrayAppendValue(MutableCopy, ValueAtIndex);
        }
      }
      goto LABEL_32;
    }
LABEL_143:
    uint64_t matched = FigSignalErrorAt();
    uint64_t MutableCopy = 0;
LABEL_145:
    CFTypeRef v5 = v66;
    goto LABEL_9;
  }
  uint64_t MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
  if (!MutableCopy) {
    goto LABEL_143;
  }
LABEL_32:
  CFIndex v17 = CFArrayGetCount(MutableCopy);
  if (v17 >= 1)
  {
    CFIndex v18 = v17;
    for (CFIndex j = 0; j != v18; ++j)
    {
      uint64_t v20 = CFArrayGetValueAtIndex(MutableCopy, j);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      playerfig_traceVideoTargetEvent(v70, (uint64_t)v20);
    }
    uint64_t v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  }
LABEL_36:
  if (Count < 1)
  {
    uint64_t v25 = (void *)v68;
    CFDictionaryRef v26 = *(const void **)(v68 + 256);
    *(void *)(v68 + 256) = 0;
    goto LABEL_47;
  }
  for (CFIndex k = 0; k != Count; ++k)
  {
    CFIndex v22 = CFArrayGetValueAtIndex(v12, k);
    if (v7)
    {
      if (CFArrayGetCount(v7))
      {
        v84.locatioCFIndex n = 0;
        v84.length = v8;
        if (CFArrayContainsValue(v7, v84, v22)) {
          continue;
        }
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    playerfig_traceVideoTargetEvent(v70, (uint64_t)v22);
  }
  uint64_t v23 = FPSupport_CopySingleVideoChannelAndMultichannelVideoTargetsFromArray(v12, *v13, &v80, &v79);
  if (v23)
  {
    uint64_t matched = v23;
    goto LABEL_145;
  }
  CFTypeID v24 = v80;
  uint64_t v25 = (void *)v68;
  CFDictionaryRef v26 = *(const void **)(v68 + 256);
  *(void *)(v68 + 256) = v80;
  if (v24) {
    CFRetain(v24);
  }
LABEL_47:
  int v27 = (const void *)v70;
  if (v26) {
    CFRelease(v26);
  }
  if (v79)
  {
    CFIndex v28 = CFArrayGetCount(v79);
    if (v28 < 1)
    {
      int v63 = 0;
    }
    else
    {
      CFIndex v29 = v28;
      CFArrayRef v30 = (const __CFArray *)v25[33];
      if (v30 && v29 == CFArrayGetCount(v30))
      {
        CFIndex v31 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v79, v31);
          if (!FigCFArrayContainsValue()) {
            break;
          }
          if (v29 == ++v31)
          {
            int v63 = 0;
            goto LABEL_61;
          }
        }
        int v63 = 1;
LABEL_61:
        int v27 = (const void *)v70;
      }
      else
      {
        int v63 = 1;
      }
    }
    CFMutableArrayRef v33 = v79;
    uint64_t v32 = (const void *)v25[33];
    v25[33] = v79;
    if (v33) {
      CFRetain(v33);
    }
  }
  else
  {
    int v63 = 0;
    uint64_t v32 = (const void *)v25[33];
    v25[33] = 0;
  }
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v34 = (const void *)v25[31];
  v25[31] = v12;
  if (v12) {
    CFRetain(v12);
  }
  if (v34) {
    CFRelease(v34);
  }
  MEMORY[0x19970E930](v25[30]);
  CFTypeRef v5 = v66;
  if (v8 >= 1
    && (playerfig_sendEmptyConfigurationToEachVideoTarget((int)v27, MutableCopy),
        uint64_t v35 = CMBaseObjectGetDerivedStorage(),
        theArray[0] = 0,
        CFArrayGetCount(MutableCopy)))
  {
    MEMORY[0x19970E290](*(void *)(v35 + 496));
    uint64_t v65 = v35;
    if (!*(void *)(v35 + 512)
      || (v85.length = CFArrayGetCount(*(CFArrayRef *)(v35 + 504)),
          v85.locatioCFIndex n = 0,
          CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v35 + 504), v85, *(const void **)(v35 + 512)),
          FirstIndexOfValue < 0))
    {
      int v74 = 0;
      uint64_t matched = 0;
    }
    else
    {
      uint64_t matched = 0;
      CFIndex v36 = 0;
      int v74 = 0;
      CFAllocatorRef allocator = *v13;
      do
      {
        CFIndex v67 = v36;
        uint64_t v72 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v65 + 504), v36);
        uint64_t v37 = CMBaseObjectGetDerivedStorage();
        CFArrayRef v38 = *(const __CFArray **)(v37 + 1088);
        if ((v38 && CFArrayGetCount(v38) > 0 || FigCFDictionaryGetCount() >= 1) && CFArrayGetCount(MutableCopy) >= 1)
        {
          CFIndex v39 = 0;
          do
          {
            CFDictionaryRef v40 = CFArrayGetValueAtIndex(MutableCopy, v39);
            FigCFArrayRemoveLastElementOfValue();
            if (CFDictionaryGetValue(*(CFDictionaryRef *)(v37 + 1096), v40))
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterRemoveWeakListener();
              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v37 + 1096), v40);
            }
            ++v39;
          }
          while (v39 < CFArrayGetCount(MutableCopy));
        }
        CFArrayRef v41 = *(const __CFArray **)(v37 + 1048);
        if (v41)
        {
          CFIndex v69 = CFArrayGetCount(v41);
          if (v69 >= 1)
          {
            uint64_t v42 = 0;
            do
            {
              int v82 = 0;
              *(void *)&long long v75 = 0;
              uint64_t v71 = v42;
              FigCFArrayGetInt32AtIndex();
              itemfig_getTrackStorage((uint64_t)v72, v82, &v75);
              uint64_t v43 = v75;
              if ((void)v75 && *(void *)(v75 + 216))
              {
                for (CFIndex m = 0; ; ++m)
                {
                  CFArrayRef v45 = *(const __CFArray **)(v43 + 224);
                  if (v45) {
                    CFArrayRef v45 = (const __CFArray *)CFArrayGetCount(v45);
                  }
                  if (m >= (uint64_t)v45) {
                    break;
                  }
                  CFRange v46 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v43 + 224), m);
                  uint64_t v47 = FigImageQueueTableCopyVideoTargets((uint64_t)v46, theArray);
                  if (v47) {
                    goto LABEL_129;
                  }
                  if (theArray[0])
                  {
                    CFIndex v48 = CFArrayGetCount(theArray[0]);
                    if (v48 < 1)
                    {
                      CFNumberRef v50 = 0;
                      CFIndex v55 = 0;
                    }
                    else
                    {
                      CFMutableArrayRef v49 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                      if (!v49)
                      {
                        uint64_t v47 = FigSignalErrorAt();
LABEL_129:
                        uint64_t matched = v47;
                        int v74 = 0;
                        goto LABEL_130;
                      }
                      CFNumberRef v50 = v49;
                      if (theArray[0])
                      {
                        CFIndex v51 = CFArrayGetCount(theArray[0]);
                        if (v51 >= 1)
                        {
                          CFIndex v52 = v51;
                          for (CFIndex n = 0; n != v52; ++n)
                          {
                            CFArrayRef v54 = CFArrayGetValueAtIndex(theArray[0], n);
                            if (!FigCFArrayContainsValue()) {
                              CFArrayAppendValue(v50, v54);
                            }
                          }
                        }
                      }
                      CFIndex v55 = CFArrayGetCount(v50);
                    }
                    CFArrayRef v56 = theArray[0];
                    if (theArray[0]) {
                      CFArrayRef v56 = (CFArrayRef)CFArrayGetCount(theArray[0]);
                    }
                    if (v55 >= (uint64_t)v56)
                    {
                      uint64_t matched = 0;
                    }
                    else
                    {
                      uint64_t matched = FigImageQueueTableUpdateToMatchOutputsArray((uint64_t)v46, v50, *(void **)(v37 + 328), 0, 0, 0);
                      if (!matched) {
                        FigImageQueueTableSetTimebase((uint64_t)v46, *(void **)(v37 + 328));
                      }
                      int v74 = 1;
                    }
                    if (theArray[0])
                    {
                      CFRelease(theArray[0]);
                      theArray[0] = 0;
                    }
                    if (v48 >= 1) {
                      CFRelease(v50);
                    }
                  }
                  else
                  {
                    uint64_t matched = 0;
                  }
                }
                if (*(void *)(v43 + 240))
                {
                  CFIndex v57 = CFArrayGetCount(MutableCopy);
                  if (v57 >= 1)
                  {
                    CFIndex v58 = v57;
                    for (iCFIndex i = 0; ii != v58; ++ii)
                    {
                      CFTypeID v60 = CFArrayGetValueAtIndex(MutableCopy, ii);
                      if (CFDictionaryContainsValue(*(CFDictionaryRef *)(v43 + 240), v60))
                      {
                        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v43 + 240), v60);
                        int v74 = 1;
                      }
                    }
                  }
                }
              }
              uint64_t v42 = v71 + 1;
            }
            while (v71 + 1 != v69);
          }
        }
        CFIndex v36 = v67 + 1;
      }
      while (v67 != FirstIndexOfValue);
    }
LABEL_130:
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
    MEMORY[0x19970E2B0](*(void *)(v65 + 496), v36);
    CFTypeRef v5 = v66;
    int v27 = (const void *)v70;
    if (matched) {
      goto LABEL_10;
    }
  }
  else
  {
    int v74 = 0;
  }
  if (playerfig_doesAnyWorkingOrLameDuckItemHaveVideo())
  {
    if (playerfig_gracefullyAddImageQueues((uint64_t)v27, 0))
    {
      uint64_t v61 = playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v27, 0, &v81);
    }
    else
    {
      CFStringRef v62 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v68 + 504), 0);
      uint64_t v61 = playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v27, v62, MEMORY[0x1E4F1F9F8]);
    }
    uint64_t matched = v61;
    if (v61) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t matched = 0;
  }
  if (!v81)
  {
    if (v63 | v74)
    {
      *(_OWORD *)CFArrayRef theArray = *MEMORY[0x1E4F1F9F8];
      uint64_t v78 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v75 = *(_OWORD *)theArray;
      uint64_t v76 = v78;
      uint64_t matched = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v27, (uint64_t)theArray, (uint64_t)&v75, 0);
    }
    else
    {
      uint64_t matched = 0;
    }
  }
LABEL_10:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v80) {
    CFRelease(v80);
  }
  if (v79) {
    CFRelease(v79);
  }
  return matched;
}

uint64_t playerfig_removeExcessImageQueuesAndSlotsFromAllWorkingOrLameDuckItems(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (*(void *)(DerivedStorage + 512))
  {
    v52.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    v52.locatioCFIndex n = 0;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v52, *(const void **)(DerivedStorage + 512));
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    {
      CFIndex v3 = 0;
      CFAllocatorRef v42 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v43 = DerivedStorage;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v3);
        uint64_t v5 = CMBaseObjectGetDerivedStorage();
        uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
        CFTypeRef v50 = 0;
        CFTypeRef v51 = 0;
        if (*(unsigned char *)v5) {
          BOOL v7 = 1;
        }
        else {
          BOOL v7 = v6 == 0;
        }
        CFIndex v47 = v3;
        CFIndex v48 = (const void *)v6;
        if (v7)
        {
          uint64_t v25 = 0;
          ConcatenationOfTwoArrays = 0;
          uint64_t v23 = 0;
          CFTypeID v24 = 0;
          CFIndex v18 = 0;
          CFMutableArrayRef Mutable = 0;
          CFArrayRef v17 = 0;
          CFArrayRef MutableCopy = 0;
          goto LABEL_70;
        }
        uint64_t v8 = (void *)CMBaseObjectGetDerivedStorage();
        CFArrayRef v9 = *(const __CFArray **)(v5 + 1104);
        if (v9) {
          CFIndex Count = CFArrayGetCount(v9);
        }
        else {
          CFIndex Count = 0;
        }
        uint64_t v11 = v8[27];
        CFArrayRef v12 = (const __CFArray *)v8[25];
        if (v12) {
          CFArrayRef v12 = (const __CFArray *)CFArrayGetCount(v12);
        }
        uint64_t v13 = (char *)v12 + v11;
        if ((uint64_t)v13 > Count)
        {
          uint64_t v25 = FigSignalErrorAt();
          ConcatenationOfTwoArrays = 0;
          uint64_t v23 = 0;
          CFTypeID v24 = 0;
          CFIndex v18 = 0;
          CFMutableArrayRef Mutable = 0;
          CFArrayRef v17 = 0;
          CFArrayRef MutableCopy = 0;
          goto LABEL_26;
        }
        if (!itemfig_shouldEnableMainVideo())
        {
          ConcatenationOfTwoArrays = 0;
          uint64_t v23 = 0;
          CFTypeID v24 = 0;
          CFIndex v18 = 0;
          CFMutableArrayRef Mutable = 0;
          CFArrayRef v17 = 0;
          CFArrayRef MutableCopy = 0;
          uint64_t v25 = 4294954433;
LABEL_26:
          uint64_t DerivedStorage = v43;
          goto LABEL_70;
        }
        CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v42, 0, MEMORY[0x1E4F1D510]);
        CFArrayRef v16 = *(const __CFArray **)(v5 + 1112);
        if (v16 && CFArrayGetCount(v16) >= 1)
        {
          CFArrayRef v17 = (const __CFArray *)FigCFArrayCreateMutableCopy();
          CFIndex v18 = CFArrayCreateMutable(v42, 0, MEMORY[0x1E4F1D510]);
          if (!MutableCopy) {
            goto LABEL_18;
          }
        }
        else
        {
          CFArrayRef v17 = 0;
          CFIndex v18 = 0;
          if (!MutableCopy)
          {
LABEL_18:
            CFIndex v19 = 0;
            goto LABEL_22;
          }
        }
        CFIndex v19 = CFArrayGetCount(MutableCopy);
LABEL_22:
        while (v19 > (uint64_t)v13)
        {
          uint64_t v20 = CFArrayGetValueAtIndex(MutableCopy, --v19);
          CFArrayAppendValue(Mutable, v20);
          CFArrayRemoveValueAtIndex(MutableCopy, v19);
        }
        if (v17) {
          CFIndex v21 = CFArrayGetCount(v17);
        }
        else {
          CFIndex v21 = 0;
        }
        while (v21 > (uint64_t)v13)
        {
          CFDictionaryRef v26 = CFArrayGetValueAtIndex(v17, --v21);
          CFArrayAppendValue(v18, v26);
          CFArrayRemoveValueAtIndex(v17, v21);
        }
        fp_visualContextArrayIfVideoOutputAllowed(*(CFArrayRef *)(v5 + 1728), *(void *)(v5 + 1160));
        ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
        MEMORY[0x19970E910](v8[30]);
        int v27 = (const void *)v8[32];
        if (!v27)
        {
          MEMORY[0x19970E930](v8[30]);
LABEL_37:
          CFArrayRef cf = 0;
          goto LABEL_38;
        }
        CFArrayRef v28 = (const __CFArray *)CFRetain(v27);
        MEMORY[0x19970E930](v8[30]);
        if (!v28) {
          goto LABEL_37;
        }
        CFArrayRef cf = v28;
        if (CFArrayGetCount(v28) >= 1)
        {
          uint64_t v29 = FigCFArrayCreateConcatenationOfTwoArrays();
          if (ConcatenationOfTwoArrays) {
            CFRelease(ConcatenationOfTwoArrays);
          }
          ConcatenationOfTwoArrays = (const void *)v29;
        }
LABEL_38:
        if (*(void *)(v5 + 656))
        {
          CFTypeRef v30 = *(CFTypeRef *)(v5 + 816);
          CFTypeRef v51 = v30;
          *(void *)(v5 + 816) = 0;
          uint64_t matched = FigImageQueueTableUpdateToMatchOutputsArray(*(void *)(v5 + 824), (const __CFArray *)ConcatenationOfTwoArrays, *(void **)(v5 + 328), 0, 0, 0);
          if (matched)
          {
            uint64_t v25 = matched;
            CFArrayRef v32 = 0;
          }
          else
          {
            FigImageQueueTableSetTimebase(*(void *)(v5 + 824), *(void **)(v5 + 328));
            FigImageQueueTableCopyFigImageQueueArray(*(void *)(v5 + 824), (uint64_t *)&v50);
            uint64_t v25 = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnComposition(a2, v50, *(const void **)(v5 + 808), (uint64_t)"itemfig_removeExcessImageQueuesAndSlots");
            CFArrayRef v32 = (const __CFArray *)v50;
            CFTypeRef v30 = v51;
          }
          itemfig_removeImageQueueListenersForObsoleteImageQueues((uint64_t)ValueAtIndex, (const __CFArray *)v30, v32);
          *(void *)(v5 + 816) = v50;
          CFTypeRef v50 = 0;
          if (!v18) {
            goto LABEL_58;
          }
        }
        else
        {
          int v33 = *(_DWORD *)(v5 + 1000);
          if (v33)
          {
            uint64_t v49 = 0;
            itemfig_getTrackStorage((uint64_t)ValueAtIndex, v33, &v49);
            uint64_t v34 = v49;
            uint64_t v25 = FigImageQueueTableCopyFigImageQueueArray(*(void *)(v49 + 48), (uint64_t *)&v51);
            if (!v25)
            {
              uint64_t v25 = FigImageQueueTableUpdateToMatchOutputsArray(*(void *)(v34 + 48), (const __CFArray *)ConcatenationOfTwoArrays, *(void **)(v5 + 328), 0, 0, 0);
              if (!v25)
              {
                FigImageQueueTableSetTimebase(*(void *)(v34 + 48), *(void **)(v5 + 328));
                FigImageQueueTableCopyFigImageQueueArray(*(void *)(v34 + 48), (uint64_t *)&v50);
                uint64_t v25 = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(a2, v50, *(const void **)(v34 + 16), (uint64_t)"itemfig_removeExcessImageQueuesAndSlots");
              }
            }
            itemfig_removeImageQueueListenersForObsoleteImageQueues((uint64_t)ValueAtIndex, (const __CFArray *)v51, (const __CFArray *)v50);
            if (!v18)
            {
LABEL_58:
              CFTypeID v24 = 0;
              uint64_t v23 = 0;
LABEL_59:
              MEMORY[0x19970E910](*(void *)(v5 + 1120));
              CFArrayRef v38 = *(const void **)(v5 + 1104);
              *(void *)(v5 + 1104) = MutableCopy;
              if (MutableCopy) {
                CFRetain(MutableCopy);
              }
              if (v38) {
                CFRelease(v38);
              }
              CFIndex v39 = *(const void **)(v5 + 1112);
              *(void *)(v5 + 1112) = v17;
              if (v17) {
                CFRetain(v17);
              }
              if (v39) {
                CFRelease(v39);
              }
              MEMORY[0x19970E930](*(void *)(v5 + 1120));
              goto LABEL_68;
            }
          }
          else
          {
            uint64_t v25 = 0;
            if (!v18) {
              goto LABEL_58;
            }
          }
        }
        if (CFArrayGetCount(v18) < 1) {
          goto LABEL_58;
        }
        uint64_t v23 = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
        if (v23)
        {
          CFTypeID v24 = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
          if (v24)
          {
            unsigned int v41 = v25;
            uint64_t v35 = ConcatenationOfTwoArrays;
            CFIndex v36 = (const void *)v8[104];
            v8[104] = v23;
            CFRetain(v23);
            if (v36) {
              CFRelease(v36);
            }
            uint64_t v37 = (const void *)v8[103];
            v8[103] = v24;
            CFRetain(v24);
            if (v37) {
              CFRelease(v37);
            }
            ConcatenationOfTwoArrays = v35;
            uint64_t v25 = v41;
            goto LABEL_59;
          }
          uint64_t v25 = FigSignalErrorAt();
        }
        else
        {
          uint64_t v25 = FigSignalErrorAt();
          CFTypeID v24 = 0;
        }
LABEL_68:
        uint64_t DerivedStorage = v43;
        if (cf) {
          CFRelease(cf);
        }
LABEL_70:
        if (v50) {
          CFRelease(v50);
        }
        if (v51) {
          CFRelease(v51);
        }
        if (ConcatenationOfTwoArrays) {
          CFRelease(ConcatenationOfTwoArrays);
        }
        if (v17) {
          CFRelease(v17);
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (v18) {
          CFRelease(v18);
        }
        if (v23) {
          CFRelease(v23);
        }
        if (v24) {
          CFRelease(v24);
        }
        FPSupport_AppendDeferredTransactionChangeToRelease(a2, (uint64_t)Mutable, (uint64_t)"itemfig_removeExcessImageQueuesAndSlots");
        if (v48) {
          CFRelease(v48);
        }
        if (v25) {
          goto LABEL_96;
        }
        CFIndex v3 = v47 + 1;
      }
      while (v47 != FirstIndexOfValue);
    }
  }
  uint64_t v25 = 0;
LABEL_96:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  return v25;
}

uint64_t playerfig_gracefullyAddImageQueues(uint64_t a1, const void *a2)
{
  v53[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (*(_DWORD *)(DerivedStorage + 52) != 4)
  {
    if (!dword_1E9350BF0)
    {
LABEL_90:
      uint64_t matched = 4294954433;
      goto LABEL_38;
    }
LABEL_86:
    LODWORD(v51) = 0;
    LOBYTE(value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_90;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 512);
  if (v4 != CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0))
  {
    if (!dword_1E9350BF0) {
      goto LABEL_90;
    }
    goto LABEL_86;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 512);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = (const void *)v7;
  v53[0] = 0;
  CFTypeRef v51 = 0;
  v52[0] = 0;
  if (*(unsigned char *)v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v7 == 0;
  }
  if (!v9)
  {
    CFArrayRef v10 = (void *)CMBaseObjectGetDerivedStorage();
    CFArrayRef v11 = *(const __CFArray **)(v6 + 1104);
    if (v11) {
      CFIndex Count = CFArrayGetCount(v11);
    }
    else {
      CFIndex Count = 0;
    }
    uint64_t v13 = v10[27];
    CFArrayRef v14 = (const __CFArray *)v10[25];
    if (v14) {
      CFIndex v15 = CFArrayGetCount(v14);
    }
    else {
      CFIndex v15 = 0;
    }
    MEMORY[0x19970E910](v10[30]);
    CFArrayRef v16 = (const void *)v10[32];
    if (v16) {
      CFTypeRef cf = CFRetain(v16);
    }
    else {
      CFTypeRef cf = 0;
    }
    MEMORY[0x19970E930](v10[30]);
    if (*(_DWORD *)(v6 + 1000))
    {
      CFArrayRef v17 = *(const __CFArray **)(v6 + 392);
      if (v17 && CFArrayGetCount(v17) >= 1)
      {
        CFIndex v47 = v8;
        uint64_t v45 = v5;
        CFIndex v46 = Count;
        if (v13 < 1) {
          CFArrayRef MutableCopy = 0;
        }
        else {
          CFArrayRef MutableCopy = (const void *)FigCFArrayCreateMutableCopy();
        }
        CFIndex v19 = (__CFArray *)FigCFArrayCreateMutableCopy();
        uint64_t v24 = *(void *)(v6 + 968);
        uint64_t v25 = *(unsigned int *)(v6 + 1000);
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v26) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        CFArrayRef v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v27 + 56);
        if (v28)
        {
          uint64_t v29 = v28(v24, v25, v52, 0);
          if (!v29)
          {
            CFTypeID v44 = a2;
            uint64_t v29 = itemfig_copyFormatDescription((uint64_t)v52[0], (uint64_t *)v53);
            if (!v29)
            {
              unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)v53[0]);
              if (v46 < v15 + v13)
              {
                int32_t v31 = Dimensions;
                unint64_t v32 = HIDWORD(Dimensions);
                if (v13 >= 1) {
                  int v33 = &v49;
                }
                else {
                  int v33 = 0;
                }
                CFIndex v34 = v15 + v13 - v46;
                do
                {
                  CMTimeValue value = 0;
                  int v49 = 0;
                  FPSupport_EnsureCAImageQueue((CFTypeRef *)&value, v33, v31, v32);
                  if (v13 >= 1) {
                    FigCFArrayAppendInt32();
                  }
                  CFArrayAppendValue(v19, value);
                  if (value) {
                    CFRelease(value);
                  }
                  --v34;
                }
                while (v34);
              }
              fp_visualContextArrayIfVideoOutputAllowed(*(CFArrayRef *)(v6 + 1728), *(void *)(v6 + 1160));
              ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
              CFIndex v22 = cf;
              CFArrayRef v20 = (const __CFArray *)FigCFArrayCreateConcatenationOfTwoArrays();
              if (ConcatenationOfTwoArrays) {
                CFRelease(ConcatenationOfTwoArrays);
              }
              if (*(void *)(v6 + 656))
              {
                uint64_t matched = FigImageQueueTableUpdateToMatchOutputsArray(*(void *)(v6 + 824), v20, *(void **)(v6 + 328), 0, 0, 0);
                if (!matched)
                {
                  FigImageQueueTableSetTimebase(*(void *)(v6 + 824), *(void **)(v6 + 328));
                  FigImageQueueTableCopyFigImageQueueArray(*(void *)(v6 + 824), (uint64_t *)&v51);
                  FigImageQueueArraySetProperty();
                  uint64_t v36 = *(void *)(v6 + 1144);
                  if (v36) {
                    itemfig_setVideoEnhancementModeOnImageQueues(v45, v36);
                  }
                  itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray(v45);
                  uint64_t matched = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnComposition(v44, v51, *(const void **)(v6 + 808), (uint64_t)"itemfig_gracefullyAddImageQueuesAndSlots");
                }
                uint64_t v37 = *(const void **)(v6 + 816);
                CFTypeRef v38 = v51;
                *(void *)(v6 + 816) = v51;
                if (v38) {
                  CFRetain(v38);
                }
                if (v37) {
                  CFRelease(v37);
                }
              }
              else
              {
                int v39 = *(_DWORD *)(v6 + 1000);
                if (v39)
                {
                  CMTimeValue value = 0;
                  itemfig_getTrackStorage(v45, v39, &value);
                  CFDictionaryRef v40 = value;
                  uint64_t matched = FigImageQueueTableUpdateToMatchOutputsArray(*((void *)value + 6), v20, *(void **)(v6 + 328), 0, 0, 0);
                  if (!matched)
                  {
                    FigImageQueueTableSetTimebase(*((void *)v40 + 6), *(void **)(v6 + 328));
                    FigImageQueueTableCopyFigImageQueueArray(*((void *)v40 + 6), (uint64_t *)&v51);
                    itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray(v45);
                    uint64_t matched = FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(v44, v51, *((const void **)v40 + 2), (uint64_t)"itemfig_gracefullyAddImageQueuesAndSlots");
                  }
                }
                else
                {
                  uint64_t matched = 0;
                }
              }
              MEMORY[0x19970E910](*(void *)(v6 + 1120));
              unsigned int v41 = *(const void **)(v6 + 1104);
              *(void *)(v6 + 1104) = v19;
              if (v19) {
                CFRetain(v19);
              }
              if (v41) {
                CFRelease(v41);
              }
              CFAllocatorRef v42 = *(const void **)(v6 + 1112);
              *(void *)(v6 + 1112) = MutableCopy;
              if (MutableCopy) {
                CFRetain(MutableCopy);
              }
              if (v42) {
                CFRelease(v42);
              }
              MEMORY[0x19970E930](*(void *)(v6 + 1120));
              uint64_t v8 = v47;
              if (!cf) {
                goto LABEL_24;
              }
              goto LABEL_23;
            }
          }
          uint64_t matched = v29;
          CFArrayRef v20 = 0;
        }
        else
        {
          CFArrayRef v20 = 0;
          uint64_t matched = 4294954514;
        }
        uint64_t v8 = v47;
        CFIndex v22 = cf;
        if (!cf) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      CFIndex v19 = 0;
      CFArrayRef MutableCopy = 0;
      CFArrayRef v20 = 0;
      uint64_t matched = 4294954433;
    }
    else
    {
      uint64_t matched = FigSignalErrorAt();
      CFIndex v19 = 0;
      CFArrayRef MutableCopy = 0;
      CFArrayRef v20 = 0;
    }
    CFIndex v22 = cf;
    if (!cf)
    {
LABEL_24:
      if (v20) {
        CFRelease(v20);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (v51) {
        CFRelease(v51);
      }
      goto LABEL_32;
    }
LABEL_23:
    CFRelease(v22);
    goto LABEL_24;
  }
  uint64_t matched = 0;
LABEL_32:
  if (v52[0]) {
    CFRelease(v52[0]);
  }
  if (v53[0]) {
    CFRelease(v53[0]);
  }
  if (v8) {
    CFRelease(v8);
  }
LABEL_38:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  return matched;
}

void playerfig_removeAllImageQueuesFromAllWorkingOrLameDuckItems()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (*(void *)(DerivedStorage + 512))
  {
    v6.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    v6.locatioCFIndex n = 0;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v6, *(const void **)(DerivedStorage + 512));
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    {
      CFIndex v2 = 0;
      CFIndex v3 = FirstIndexOfValue + 1;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v2);
        itemfig_removeAllImageQueues((uint64_t)ValueAtIndex);
        ++v2;
      }
      while (v3 != v2);
    }
  }

  JUMPOUT(0x19970E2B0);
}

void playerfig_resetAlreadyPostedFirstVideoFrameEnqueuedNotificationFlagFromAllWorkingOrLameDuckItems()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (*(void *)(DerivedStorage + 512))
  {
    v5.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
    v5.locatioCFIndex n = 0;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v5, *(const void **)(DerivedStorage + 512));
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
    {
      CFIndex v2 = 0;
      CFIndex v3 = FirstIndexOfValue + 1;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v2);
        *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 874) = 0;
        ++v2;
      }
      while (v3 != v2);
    }
  }

  JUMPOUT(0x19970E2B0);
}

CFIndex playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 512)) {
    return 1;
  }
  uint64_t v4 = DerivedStorage;
  CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 504);
  if (!v5) {
    return 1;
  }
  if (CFArrayGetCount(v5) < 1) {
    return 1;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 504), 0);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (!*(void *)(v8 + 352) || *(unsigned char *)(v8 + 480)) {
      return 1;
    }
  }
  if (*(const void **)(v4 + 512) == ValueAtIndex) {
    return 0;
  }
  CFIndex result = *(void *)(v7 + 368);
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      if (result <= 1)
      {
        uint64_t v10 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 368), 0) + 3);
        if (v10) {
          return v10 != *(void *)(v4 + 560);
        }
      }
      return 1;
    }
  }
  return result;
}

void playerfig_setClosedCaptionsDisplayRequested(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 297) != a2)
  {
    *(unsigned char *)(DerivedStorage + 297) = a2;
    playerfig_updateClosedCaptionsDisplayForItem(a1, 0);
    playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)a1, 0);
  }
}

void playerfig_setPreferredLanguageLists(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 712));
  uint64_t v4 = *(const void **)(DerivedStorage + 720);
  *(void *)(DerivedStorage + 720) = a2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 712));
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t playerfig_setActionAtEnd(const void *a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(result + 776);
  if (v5 != a2)
  {
    uint64_t v6 = result;
    MEMORY[0x19970E290](*(void *)(result + 496));
    BOOL v7 = 0;
    *(_DWORD *)(v6 + 776) = a2;
    if (a2 != 2 && v5 == 2) {
      BOOL v7 = *(float *)(v6 + 48) != 0.0;
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v6 + 504)) >= 1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 0);
      CFRetain(ValueAtIndex);
      if (ValueAtIndex)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v10 = *(void *)(DerivedStorage + 352);
        if (v10)
        {
          if (!a2 && v5 && FigPlaybackBossDidReachEnd(v10)) {
            BOOL v7 = 1;
          }
          if (*(unsigned char *)(DerivedStorage + 480))
          {
            uint64_t v11 = *(unsigned int *)(v6 + 776);
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v6 + 504));
            if (!FigPlaybackGetEffectiveActionAtEnd(v11, Count))
            {
              CFArrayRef v14 = *(const __CFArray **)(v6 + 504);
              if (v14)
              {
                if (CFArrayGetCount(v14) >= 2)
                {
                  CFIndex v15 = (__CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 1);
                  if (playerfig_maybeUndoQueueingForItem((uint64_t)a1, v15))
                  {
                    MEMORY[0x19970E2B0](*(void *)(v6 + 496));
                    *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1F9F8];
                    uint64_t v26 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                    long long v23 = *(_OWORD *)cf;
                    uint64_t v24 = v26;
                    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)cf, (uint64_t)&v23, 0);
                    MEMORY[0x19970E290](*(void *)(v6 + 496));
                  }
                }
              }
            }
          }
          FigPlaybackBossSetStopAtEnd(*(unsigned char **)(DerivedStorage + 352), a2 == 1);
          if (v7)
          {
            if (*(unsigned char *)(DerivedStorage + 496)
              && !FigPlaybackBossDidReachEnd(*(void *)(DerivedStorage + 352)))
            {
              if (dword_1E9350BF0)
              {
                os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(unsigned char *)(DerivedStorage + 496) = 0;
              playerfig_prepareNextItemForTransition(a1, ValueAtIndex);
            }
            if (FigPlaybackBossDidReachEnd(*(void *)(DerivedStorage + 352)))
            {
              if (dword_1E9350BF0)
              {
                CFArrayRef v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(unsigned char *)(v6 + 800) = 1;
              CFArrayRef v17 = (unsigned char *)CMBaseObjectGetDerivedStorage();
              cf[0] = 0;
              if (!*v17)
              {
                CFIndex v18 = v17;
                uint64_t v19 = FigCFWeakReferenceHolderCopyReferencedObject();
                if (v19)
                {
                  CFArrayRef v20 = (const void *)v19;
                  CFIndex v21 = (unsigned char *)CMBaseObjectGetDerivedStorage();
                  if (!*v21)
                  {
                    CFIndex v22 = v21;
                    CFRetain(ValueAtIndex);
                    if (!FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)cf))
                    {
                      MEMORY[0x19970E290](*((void *)v22 + 62));
                      if (*((void *)v18 + 44)) {
                        itemfig_advanceToNextItem((uint64_t)ValueAtIndex, cf[0]);
                      }
                      MEMORY[0x19970E2B0](*((void *)v22 + 62));
                    }
                    FigDeferredTransactionCommit((uint64_t)cf[0]);
                    if (cf[0]) {
                      CFRelease(cf[0]);
                    }
                    playerfig_updatePlaybackStateAndBossRate(v20, 7, 0);
                    CFRelease(ValueAtIndex);
                    CFRelease(v20);
                  }
                }
              }
              *(unsigned char *)(v6 + 800) = 0;
            }
          }
        }
        CFRelease(ValueAtIndex);
        playerfig_updateStartHostTimeEstimatesOfAllItems((uint64_t)a1);
      }
    }
    return MEMORY[0x19970E2B0](*(void *)(v6 + 496));
  }
  return result;
}

uint64_t playerfig_updatePlayerActiveState(const void *a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v23 = 0;
  CFTypeRef cf = 0;
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 60) == a2)
  {
    if (dword_1E9350BF0)
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  uint64_t v7 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
  if (!v7)
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    int v8 = *(_DWORD *)(DerivedStorage + 60);
    if (a2)
    {
      *(_DWORD *)(DerivedStorage + 60) = a2;
      playerfig_configureCacheVolatilityInPlayQueue();
      if (v8 == 1)
      {
        if (dword_1E9350BF0)
        {
          uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(void *)(DerivedStorage + 512) && *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 1288)) {
          itemfig_becameBothCurrentAndReadyForInspection(*(void *)(DerivedStorage + 512), &v23);
        }
        goto LABEL_36;
      }
      if (!v8)
      {
        if (dword_1E9350BF0)
        {
          BOOL v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        playerfig_prepareWorkingItem(a1, 0, cf);
        goto LABEL_36;
      }
      if (dword_1E9350BF0)
      {
        CFArrayRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1E9350BF0)
      {
        uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerfig_disturbPlayQueue();
      playeritemfig_releaseRenderPipelines(a1, 0, cf);
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
      uint64_t v13 = *(const void **)(DerivedStorage + 248);
      if (v13) {
        CFArrayRef v14 = (const __CFArray *)CFRetain(v13);
      }
      else {
        CFArrayRef v14 = 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 240));
      playerfig_sendEmptyConfigurationToEachVideoTarget((int)a1, v14);
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E290](*(void *)(v15 + 496));
      if (*(void *)(v15 + 512))
      {
        v29.length = CFArrayGetCount(*(CFArrayRef *)(v15 + 504));
        v29.locatioCFIndex n = 0;
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v15 + 504), v29, *(const void **)(v15 + 512));
        if ((FirstIndexOfValue & 0x8000000000000000) == 0)
        {
          CFIndex v17 = 0;
          CFIndex v18 = FirstIndexOfValue + 1;
          do
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 504), v17);
            itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
            ++v17;
          }
          while (v18 != v17);
        }
      }
      MEMORY[0x19970E2B0](*(void *)(v15 + 496));
      playerfig_removeAllImageQueuesFromAllWorkingOrLameDuckItems();
      playerfig_freeTransitionImageQueueAndSlot();
      *(_DWORD *)(DerivedStorage + 60) = 0;
      playerfig_configureCacheVolatilityInPlayQueue();
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) || v8 != 2) {
        goto LABEL_36;
      }
    }
    playerfig_UpdateAudioSessionPreferredDeviceFormat();
LABEL_36:
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    if (v23)
    {
      if (dword_1E9350BF0)
      {
        uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      long long v26 = *MEMORY[0x1E4F1F9F8];
      uint64_t v27 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v24 = v26;
      uint64_t v25 = v27;
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v26, (uint64_t)&v24, cf);
    }
    playerfig_configureDownloadInPlayQueue();
  }
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (dword_1E9350BF0)
  {
    CFArrayRef v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v7;
}

void itemfig_reportingAgentReportBufferedAirPlayMode(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFIndex v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    if (v2) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (!v2) {
        return;
      }
    }
    else
    {
      uint64_t v5 = v3;
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
      uint64_t v6 = *(void *)(DerivedStorage + 1904);
      BOOL v7 = *(void *)(v5 + 168) != 0;
      if (v6)
      {
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v9 = v8 ? v8 : 0;
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, BOOL, void))(v9 + 56);
        if (v10) {
          v10(v6, 0x1EE582B78, 0x1EE584C98, v7, 0);
        }
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1896));
    }
    CFRelease(v2);
  }
}

void playerfig_setResourceConservationLevelAndUpdateWhenPaused(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(DerivedStorage + 68) = a2;
  float v6 = *(float *)(DerivedStorage + 48);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  if (v6 == 0.0) {
    playerfig_updateEffectiveResourceConservationLevel(a1);
  }
}

uint64_t playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 504);
  if (v3
    && CFArrayGetCount(v3) >= 1
    && !playerfig_isCurrentItemQuiescent()
    && !itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 0, 0, 1, 0, 0, 1, 0)&& !itemfig_rebuildRenderPipelinesAndBossGuts(*(const void **)(DerivedStorage + 512), 1, 1, 1, 0, 0, 0, 0))
  {
    playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, *(const __CFString **)(DerivedStorage + 512), MEMORY[0x1E4F1F9F8]);
    JUMPOUT(0x19970E2B0);
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  long long v7 = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v5 = v7;
  uint64_t v6 = v8;
  return playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v7, (uint64_t)&v5, 0);
}

void playerfig_traceVideoTargetEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef theString = 0;
  uint64_t CMBaseObject = FigVideoTargetGetCMBaseObject(a2);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  long long v5 = *(void (**)(uint64_t, uint64_t, void, CFStringRef *))(v4 + 48);
  if (v5)
  {
    v5(CMBaseObject, 0x1EE552058, *MEMORY[0x1E4F1CF80], &theString);
    CFStringRef v6 = theString;
  }
  else
  {
    CFStringRef v6 = 0;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    *(void *)buffer = 0;
    if (v6)
    {
      if (CFStringGetLength(v6) <= 8) {
        v7.length = CFStringGetLength(v6);
      }
      else {
        v7.length = 8;
      }
      v7.locatioCFIndex n = 0;
      CFStringGetBytes(v6, v7, 0, 0x3Fu, 0, buffer, 8, 0);
    }
    strncpy(__dst, (const char *)buffer, 8uLL);
    kdebug_trace();
    CFStringRef v6 = theString;
  }
  if (v6) {
    CFRelease(v6);
  }
}

void itemfig_setVideoEnhancementModeOnImageQueues(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (*(void *)(DerivedStorage + 656))
  {
    uint64_t v6 = *(void *)(DerivedStorage + 824);
    if (v6)
    {
      if (FigImageQueueTableCopyMappedImageQueueArray(v6, *(void *)(v5 + 1104), (uint64_t *)&cf)) {
        goto LABEL_27;
      }
      FigImageQueueArraySetProperty();
    }
  }
  else
  {
    int v7 = *(_DWORD *)(DerivedStorage + 1000);
    if (v7)
    {
      uint64_t v24 = 0;
      if (itemfig_getTrackStorage(a1, v7, &v24)) {
        goto LABEL_27;
      }
      uint64_t v8 = *(void *)(v24 + 16);
      if (!v8) {
        goto LABEL_27;
      }
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CFArrayRef v12 = *(void (**)(uint64_t, __CFString *, uint64_t))(v11 + 56);
      if (v12) {
        v12(FigBaseObject, @"VideoEnhancementMode", a2);
      }
    }
  }
  CFArrayRef v13 = *(const __CFArray **)(v5 + 1048);
  if (v13)
  {
    CFIndex Count = CFArrayGetCount(v13);
    if (Count >= 1)
    {
      CFIndex v15 = Count;
      for (uint64_t i = 0; i != v15; ++i)
      {
        uint64_t v24 = 0;
        FigCFArrayGetInt32AtIndex();
        itemfig_getTrackStorage(a1, 0, &v24);
        uint64_t v17 = v24;
        if (v24)
        {
          if (*(_DWORD *)(v24 + 4) == 1986618469)
          {
            CFArrayRef v18 = *(const __CFArray **)(v24 + 216);
            if (v18)
            {
              if (CFArrayGetCount(v18) >= 1)
              {
                uint64_t v19 = *(void *)(v17 + 248);
                if (v19)
                {
                  uint64_t v20 = FigRenderPipelineGetFigBaseObject(v19);
                  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v22 = v21 ? v21 : 0;
                  BOOL v23 = *(void (**)(uint64_t, __CFString *, uint64_t))(v22 + 56);
                  if (v23) {
                    v23(v20, @"VideoEnhancementMode", a2);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t playerfig_maybeUndoQueueingForItem(uint64_t a1, __CFString *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v78 = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  v95.locatioCFIndex n = 0;
  v95.length = Count;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v95, a2);
  char context = 0;
  int v7 = fp_copyPlayQueueDescription();
  if (dword_1E9350BF0)
  {
    unsigned int v82 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7) {
    CFRelease(v7);
  }
  if (!FirstIndexOfValue)
  {
    if (!dword_1E9350BF0) {
      return 0;
    }
LABEL_19:
    unsigned int v82 = 0;
    CFIndex v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    goto LABEL_25;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 512);
  if (!v9)
  {
    if (!dword_1E9350BF0) {
      return 0;
    }
    goto LABEL_19;
  }
  v96.locatioCFIndex n = 0;
  v96.length = Count;
  CFIndex v10 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v96, v9);
  if (FirstIndexOfValue > v10)
  {
    if (dword_1E9350BF0)
    {
      unsigned int v82 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
LABEL_25:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    return 0;
  }
  CFIndex v12 = v10;
  CFSetRef v13 = *(const __CFSet **)(v78 + 360);
  if (!v13)
  {
    if (!dword_1E9350BF0) {
      return 0;
    }
    goto LABEL_19;
  }
  CFSetApplyFunction(v13, (CFSetApplierFunction)fp_writeTrueIfARenderPipelineDoesntImplementCancelAndFlushTransition, &context);
  if (context)
  {
    if (dword_1E9350BF0)
    {
      unsigned int v82 = 0;
      CFArrayRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      goto LABEL_25;
    }
    return 0;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), FirstIndexOfValue - 1);
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v17 + 488))
  {
    if (dword_1E9350BF0)
    {
      unsigned int v82 = 0;
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      goto LABEL_25;
    }
    return 0;
  }
  uint64_t v18 = v17;
  if (dword_1E9350BF0)
  {
    unsigned int v82 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeID v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(DerivedStorage + 512))
  {
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(v21 + 480))
    {
      uint64_t v22 = v21;
      FigPlaybackBossInterruptQueueing(*(void *)(v21 + 352));
      FigPlaybackBossGoQuiescent(*(void *)(v22 + 352));
      *(unsigned char *)(v22 + 480) = 1;
    }
  }
  uint64_t v23 = *(void *)(v18 + 488);
  v79[0] = *(void *)(v18 + 328);
  v79[1] = v23;
  uint64_t v80 = 0;
  CFSetApplyFunction(*(CFSetRef *)(v78 + 360), (CFSetApplierFunction)fp_callCancelAndFlushTransition, v79);
  uint64_t result = v80;
  if (!v80)
  {
    do
    {
      uint64_t v24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), FirstIndexOfValue);
      itemfig_antiprepare(v24);
      ++FirstIndexOfValue;
    }
    while (v12 + 1 != FirstIndexOfValue);
    uint64_t v25 = *(const void **)(v18 + 488);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(v18 + 488) = 0;
    }
    char v26 = 1;
    *(unsigned char *)(v18 + 496) = 1;
    *(void *)(DerivedStorage + 512) = ValueAtIndex;
    *(void *)(DerivedStorage + 520) = 0;
    uint64_t v27 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v27 + 512))
    {
      uint64_t v28 = CMBaseObjectGetDerivedStorage();
      CFSetRef v29 = *(const __CFSet **)(v28 + 360);
      if (v29)
      {
        CFTypeRef v30 = *(const void **)(v27 + 560);
        if (v30)
        {
          char v26 = 0;
          if (CFSetContainsValue(v29, v30)) {
            goto LABEL_53;
          }
        }
        else
        {
          char v26 = 0;
        }
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v31 = *(void *)(v27 + 560);
    if (v31)
    {
      playerfig_removeAudioRenderPipelineListeners(a1, v31);
      unint64_t v32 = *(const void **)(v27 + 560);
      if (v32)
      {
        CFRelease(v32);
        *(void *)(v27 + 560) = 0;
      }
    }
    int v33 = *(const void **)(v27 + 656);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(v27 + 656) = 0;
    }
    CFIndex v34 = *(const void **)(v27 + 600);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(v27 + 600) = 0;
    }
    uint64_t v35 = *(const void **)(v27 + 608);
    if (v35)
    {
      CFRelease(v35);
      *(void *)(v27 + 608) = 0;
    }
    uint64_t v36 = *(const void **)(v27 + 616);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(v27 + 616) = 0;
    }
LABEL_53:
    CFArrayRef v37 = *(const __CFArray **)(v27 + 632);
    if (v37)
    {
      CFIndex v38 = CFArrayGetCount(v37);
      if (v38 >= 1)
      {
        CFIndex v39 = v38;
        CFIndex v40 = 0;
        while (1)
        {
          unsigned int v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v27 + 632), v40);
          if (v26) {
            break;
          }
          if (v28)
          {
            CFAllocatorRef v42 = v41;
            CFSetRef v43 = *(const __CFSet **)(v28 + 360);
            if (v43)
            {
              if (!CFSetContainsValue(v43, v42)) {
                break;
              }
            }
          }
          if (v39 == ++v40) {
            goto LABEL_67;
          }
        }
        if (CFArrayGetCount(*(CFArrayRef *)(v27 + 632)) >= 1)
        {
          do
          {
            CFTypeID v44 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v27 + 632), 0);
            playerfig_removeAudioRenderPipelineListeners(a1, (uint64_t)v44);
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v27 + 632), 0);
          }
          while (CFArrayGetCount(*(CFArrayRef *)(v27 + 632)) > 0);
        }
        uint64_t v45 = *(const void **)(v27 + 632);
        if (v45)
        {
          CFRelease(v45);
          *(void *)(v27 + 632) = 0;
        }
      }
    }
    if ((v26 & 1) == 0)
    {
LABEL_67:
      CFIndex v46 = *(const void **)(v27 + 568);
      if (v46)
      {
        if (!v28 || (CFSetRef v47 = *(const __CFSet **)(v28 + 360)) == 0 || CFSetContainsValue(v47, v46))
        {
LABEL_75:
          CFTypeRef v50 = *(const void **)(v27 + 640);
          if (v50)
          {
            CFRelease(v50);
            *(void *)(v27 + 640) = 0;
          }
          if (v26) {
            goto LABEL_82;
          }
          CFTypeRef v51 = *(const void **)(v27 + 584);
          if (!v51) {
            goto LABEL_82;
          }
          if (!v28)
          {
            if (!*(void *)(v27 + 576))
            {
LABEL_93:
              CFIndex v57 = *(const void **)(v27 + 576);
              if (v57)
              {
                CFRelease(v57);
                *(void *)(v27 + 576) = 0;
              }
              CFIndex v58 = *(const void **)(v27 + 664);
              if (v58)
              {
                CFRelease(v58);
                *(void *)(v27 + 664) = 0;
              }
            }
LABEL_97:
            CFArrayRef v59 = *(const __CFArray **)(v27 + 648);
            if (v59)
            {
              CFIndex v60 = CFArrayGetCount(v59);
              if (v60 >= 1)
              {
                CFIndex v61 = v60;
                CFIndex v62 = 0;
                while (1)
                {
                  int v63 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v27 + 648), v62);
                  if (v26) {
                    break;
                  }
                  if (v28)
                  {
                    uint64_t v64 = v63;
                    CFSetRef v65 = *(const __CFSet **)(v28 + 360);
                    if (v65)
                    {
                      if (!CFSetContainsValue(v65, v64)) {
                        break;
                      }
                    }
                  }
                  if (v61 == ++v62) {
                    goto LABEL_108;
                  }
                }
                CFTypeRef v66 = *(const void **)(v27 + 648);
                if (v66)
                {
                  CFRelease(v66);
                  *(void *)(v27 + 648) = 0;
                }
              }
            }
LABEL_108:
            CFIndex v67 = fp_copyPlayQueueDescription();
            if (dword_1E9350BF0)
            {
              unsigned int v82 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              uint64_t v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v69 = v82;
              if (os_log_type_enabled(v68, type)) {
                unsigned int v70 = v69;
              }
              else {
                unsigned int v70 = v69 & 0xFFFFFFFE;
              }
              if (v70)
              {
                if (a1) {
                  uint64_t v71 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                }
                else {
                  uint64_t v71 = "";
                }
                int v84 = 136315906;
                CFRange v85 = "playerfig_maybeUndoQueueingForItem";
                __int16 v86 = 2048;
                uint64_t v87 = a1;
                __int16 v88 = 2082;
                CFTypeID v89 = v71;
                __int16 v90 = 2114;
                CFTypeID v91 = v67;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v67) {
              CFRelease(v67);
            }
            return 0;
          }
          CFSetRef v52 = *(const __CFSet **)(v28 + 360);
          if (v52)
          {
            if (!CFSetContainsValue(v52, v51))
            {
LABEL_82:
              CFTypeRef v53 = *(const void **)(v27 + 584);
              if (v53)
              {
                CFRelease(v53);
                *(void *)(v27 + 584) = 0;
              }
              CFArrayRef v54 = *(const void **)(v27 + 672);
              if (v54)
              {
                CFRelease(v54);
                *(void *)(v27 + 672) = 0;
              }
              if (v26) {
                goto LABEL_93;
              }
            }
          }
          CFIndex v55 = *(const void **)(v27 + 576);
          if (!v55) {
            goto LABEL_93;
          }
          if (v28)
          {
            CFSetRef v56 = *(const __CFSet **)(v28 + 360);
            if (v56)
            {
              if (!CFSetContainsValue(v56, v55)) {
                goto LABEL_93;
              }
            }
          }
          goto LABEL_97;
        }
      }
    }
    CFIndex v48 = *(const void **)(v27 + 568);
    if (v48)
    {
      CFRelease(v48);
      *(void *)(v27 + 568) = 0;
    }
    int v49 = *(const void **)(v27 + 592);
    if (v49)
    {
      CFRelease(v49);
      *(void *)(v27 + 592) = 0;
    }
    goto LABEL_75;
  }
  if (v80 == -12857)
  {
    if (dword_1E9350BF0)
    {
      unsigned int v82 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v73 = v82;
      if (os_log_type_enabled(v72, type)) {
        unsigned int v74 = v73;
      }
      else {
        unsigned int v74 = v73 & 0xFFFFFFFE;
      }
      if (v74)
      {
        if (a1) {
          long long v75 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
        }
        else {
          long long v75 = "";
        }
        if (a2) {
          uint64_t v76 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        }
        else {
          uint64_t v76 = "";
        }
        int v84 = 136316162;
        CFRange v85 = "playerfig_maybeUndoQueueingForItem";
        __int16 v86 = 2048;
        uint64_t v87 = a1;
        __int16 v88 = 2082;
        CFTypeID v89 = v75;
        __int16 v90 = 2048;
        CFTypeID v91 = a2;
        __int16 v92 = 2082;
        CFTypeID v93 = v76;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294954439;
  }
  return result;
}

uint64_t fp_writeTrueIfARenderPipelineDoesntImplementCancelAndFlushTransition(uint64_t a1, unsigned char *a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!*(void *)(v7 + 80)) {
    *a2 = 1;
  }
  return result;
}

uint64_t fp_callCancelAndFlushTransition(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 16))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 80);
    if (v7) {
      uint64_t result = v7(v3, v4);
    }
    else {
      uint64_t result = 4294954514;
    }
    *(_DWORD *)(a2 + 16) = result;
  }
  return result;
}

void itemfig_becameBothCurrentAndReadyForInspection(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    uint64_t v6 = (const void *)v5;
    if (*(double *)(DerivedStorage + 1960) == 0.0) {
      *(CFAbsoluteTime *)(DerivedStorage + 1960) = CFAbsoluteTimeGetCurrent();
    }
    BOOL updated = playerfig_UpdateAudioSessionPreferredDeviceFormat();
    playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
    BOOL v9 = (updated | playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)v6)) != 0;
    if (dword_1E9350BF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2) {
      *a2 = v9;
    }
    itemfig_InformStakeholdersOfBestAvailableAudioContentType(a1);
    CFRelease(v6);
  }
}

uint64_t playerfig_StartPreroll(float a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage || a1 == 0.0) {
    return FigSignalErrorAt();
  }
  if (*(float *)(DerivedStorage + 48) == 0.0)
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    if (*(void *)(DerivedStorage + 512))
    {
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      if (*(void *)(v8 + 352))
      {
        uint64_t v9 = v8;
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(void *)(DerivedStorage + 512), a3);
        uint64_t started = FigPlaybackBossStartPreroll(*(void *)(v9 + 352), *(const __CFDictionary **)(v9 + 512), *(const void **)(v9 + 512), a1);
        goto LABEL_19;
      }
      if (dword_1E9350BF0) {
        goto LABEL_15;
      }
    }
    else if (dword_1E9350BF0)
    {
LABEL_15:
      CFSetRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1)
    {
      uint64_t v11 = 0;
      *(unsigned char *)(DerivedStorage + 544) = 1;
      *(float *)(DerivedStorage + 548) = a1;
      *(_DWORD *)(DerivedStorage + 552) = a3;
LABEL_20:
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
      return v11;
    }
    uint64_t started = FigSignalErrorAt();
LABEL_19:
    uint64_t v11 = started;
    goto LABEL_20;
  }
  uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return FigSignalErrorAt();
}

uint64_t playerfig_StepByCount(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage || !*(void *)(DerivedStorage + 512)) {
    return FigSignalErrorAt();
  }
  if (*(float *)(DerivedStorage + 48) != 0.0)
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return FigSignalErrorAt();
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v7 + 352)) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 524);
  if (v9)
  {
    *(_DWORD *)(v7 + 524) = 0;
    *(_DWORD *)(v7 + 536) = 0;
    itemfig_postSeekWasCanceledNotification(a1, *(void *)(DerivedStorage + 512), v9, 0);
  }
  itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(void *)(DerivedStorage + 512), 0);
  return FigPlaybackBossStepByCount(*(void *)(v8 + 352), a2, *(const void **)(v8 + 512));
}

uint64_t playerfig_SetRateAndAnchorTime(const void *a1, CMTime *a2, uint64_t a3, char a4, float a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((a2->flags & 0x1D) != 1 && (*(_DWORD *)(a3 + 12) & 0x1D) != 1) {
    return playerfig_setRateForReason(a1, 0, a5);
  }
  if (a4)
  {
    time.CMTimeValue value = (CMTimeValue)@"EstablishCoordinatedPlaybackTiming";
    values[0] = *(void **)MEMORY[0x1E4F1CFD0];
    CFDictionaryRef v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&time, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    CFDictionaryRef v11 = 0;
  }
  CMTime time = *a2;
  *(_OWORD *)values = *(_OWORD *)a3;
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v12 = playerfig_setRateGuts(a1, 0, MEMORY[0x1E4F1F9F8], (uint64_t)&time, (uint64_t)values, a5);
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

uint64_t playerfig_CreatePlaybackItemFromAsset(const void *a1, const void *a2, int a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  CFTypeRef v90 = 0;
  CFTypeRef v91 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!a1 || *DerivedStorage || !a2 || !a5)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_127;
  }
  CFAllocatorRef v11 = CFGetAllocator(a1);
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v14 + 48);
  if (!v15) {
    goto LABEL_27;
  }
  uint64_t v16 = v15(CMBaseObject, @"assetProperty_CreationURL", v11, &v90);
  if (v16)
  {
LABEL_127:
    uint64_t v23 = v16;
    goto LABEL_28;
  }
  CFAllocatorRef v17 = CFGetAllocator(a1);
  uint64_t v18 = FigAssetGetCMBaseObject(a2);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v20 = v19 ? v19 : 0;
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v20 + 48);
  if (!v21)
  {
LABEL_27:
    uint64_t v23 = 4294954514;
    goto LABEL_28;
  }
  uint64_t v16 = v21(v18, @"assetProperty_ByteStreamProvider", v17, &v91);
  if (v16) {
    goto LABEL_127;
  }
  CFTypeRef v87 = v91;
  __int16 v88 = (__CFString *)v90;
  uint64_t v22 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v99 = 0;
  CFTypeRef v100 = 0;
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  uint64_t v95 = 0;
  CFTypeRef v96 = 0;
  CFTypeRef v94 = 0;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  *(_OWORD *)__str = 0u;
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  uint64_t v23 = CMDerivedObjectCreate();
  uint64_t v24 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  if (!v100)
  {
    FigSignalErrorAt();
    CFTypeRef v32 = 0;
    goto LABEL_34;
  }
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  char v26 = (char *)(v25 + 2048);
  *(unsigned char *)(v25 + 2048) = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
    CFStringGetCString((CFStringRef)value, v26, 10, 0x600u);
  }
  if (FigCFDictionaryGetValueIfPresent())
  {
    CFTypeRef v27 = cf;
    if (cf) {
      CFTypeRef v27 = CFRetain(cf);
    }
    *(void *)(v25 + 2136) = v27;
  }
  uint64_t v89 = v22;
  uint64_t v28 = @"<redacted>";
  if (FigIsItOKToLogURLs())
  {
    int AssetDoNotLogURLs = FPSupport_GetAssetDoNotLogURLs((uint64_t)a2);
    BOOL v30 = AssetDoNotLogURLs == 0;
    if (!AssetDoNotLogURLs) {
      uint64_t v28 = v88;
    }
  }
  else
  {
    BOOL v30 = 0;
  }
  *(unsigned char *)(v25 + 1241) = v30;
  if (FigCFDictionaryGetValueIfPresent())
  {
    CFTypeRef v34 = v96;
    if (v96) {
      CFTypeRef v34 = CFRetain(v96);
    }
    *(void *)(v25 + 2032) = v34;
  }
  if (FigCFDictionaryGetValueIfPresent()) {
    *(unsigned char *)(v25 + 2040) = *MEMORY[0x1E4F1CFD0] == v95;
  }
  int v86 = a3;
  if (dword_1E9350BF0)
  {
    unsigned int v93 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v36 = v93;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
      unsigned int v37 = v36;
    }
    else {
      unsigned int v37 = v36 & 0xFFFFFFFE;
    }
    if (v37)
    {
      uint64_t v38 = CMBaseObjectGetDerivedStorage() + 944;
      CFTypeRef v39 = v100;
      if (v100) {
        CFIndex v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      }
      else {
        CFIndex v40 = "";
      }
      *(_DWORD *)CFDictionaryRef theDict = 136316675;
      *(void *)&theDict[4] = "fp_CreatePlaybackItem";
      __int16 v102 = 2048;
      Float64 v103 = a1;
      __int16 v104 = 2082;
      uint64_t v105 = v38;
      __int16 v106 = 2113;
      uint64_t v107 = v28;
      __int16 v108 = 2048;
      CMTime v109 = a2;
      __int16 v110 = 2048;
      CFTypeRef v111 = v39;
      __int16 v112 = 2082;
      uint64_t v113 = v40;
      _os_log_send_and_compose_impl();
      a3 = v86;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v24 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  }
  *(void *)(v25 + 8) = a1;
  uint64_t v41 = MEMORY[0x1E4F1F9F8];
  long long v42 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v25 + 140) = *MEMORY[0x1E4F1F9F8];
  uint64_t v43 = *(void *)(v41 + 16);
  *(void *)(v25 + 156) = v43;
  *(_OWORD *)(v25 + 164) = v42;
  *(void *)(v25 + 180) = v43;
  *(_OWORD *)(v25 + 188) = v42;
  *(void *)(v25 + 204) = v43;
  *(void *)(v25 + 40) = v43;
  long long v85 = v42;
  *(_OWORD *)(v25 + 24) = v42;
  *(_DWORD *)(v25 + 284) = 0x1000000;
  *(_WORD *)(v25 + 288) = 1;
  *(_DWORD *)(v25 + 292) = 0x40000000;
  *(unsigned char *)(v25 + 290) = 0;
  CMTimeMake(&v114, 1, 10);
  *(CMTime *)(v25 + 296) = v114;
  *(unsigned char *)(v25 + 320) = 0;
  uint64_t v44 = MEMORY[0x1E4F1FA08];
  *(_OWORD *)(v25 + 48) = *MEMORY[0x1E4F1FA08];
  *(void *)(v25 + 64) = *(void *)(v44 + 16);
  uint64_t v45 = MEMORY[0x1E4F1FA10];
  *(_OWORD *)(v25 + 72) = *MEMORY[0x1E4F1FA10];
  *(void *)(v25 + 88) = *(void *)(v45 + 16);
  *(_DWORD *)(v25 + 96) = 0;
  *(_DWORD *)(v25 + 936) = 0;
  CFTypeRef v46 = v88;
  if (v88) {
    CFTypeRef v46 = CFRetain(v88);
  }
  *(void *)(v25 + 112) = v46;
  *(void *)(v25 + 1216) = CFRetain(a2);
  CFTypeRef v47 = v87;
  if (v87) {
    CFTypeRef v47 = CFRetain(v87);
  }
  *(void *)(v25 + 976) = v47;
  *(_DWORD *)(v25 + 120) = a3;
  *(unsigned char *)(v25 + 137) = (a3 & 0x40) != 0;
  *(_DWORD *)(v25 + 1408) = 0;
  *(_DWORD *)(v25 + 1424) = 1;
  *(void *)(v25 + 1416) = @"Connected";
  *(void *)(v25 + 504) = FigSimpleMutexCreate();
  *(_DWORD *)(v25 + 524) = 0;
  *(_DWORD *)(v25 + 536) = 0;
  *(_WORD *)(v25 + 544) = 0;
  *(_DWORD *)(v25 + 1428) = 1065353216;
  *(_DWORD *)(v25 + 1440) = 0;
  *(void *)(v25 + 640) = FigSimpleMutexCreate();
  *(unsigned char *)(v25 + 1242) = 1;
  *(void *)(v25 + 1120) = FigSimpleMutexCreate();
  *(unsigned char *)(v25 + 1392) = 1;
  *(_DWORD *)(v25 + 2044) = FPSupport_InitialSeekIDForSource(1);
  MEMORY[0x19970E910](*(void *)(v89 + 456));
  CFIndex v48 = *(const void **)(v89 + 464);
  if (v48)
  {
    CFTypeRef v32 = CFRetain(v48);
    MEMORY[0x19970E930](*(void *)(v89 + 456));
    if (v32) {
      *(unsigned char *)(v25 + 1393) = FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey((uint64_t)v32, 1, 0x1EE54F7F8, &v94);
    }
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(v89 + 456));
    CFTypeRef v32 = 0;
  }
  uint64_t v49 = FigReentrantMutexCreate();
  *(void *)(v25 + 1400) = v49;
  if (!v49
    || (uint64_t v50 = FigSimpleMutexCreate(), (*(void *)(v25 + 1208) = v50) == 0)
    || (uint64_t v51 = FigSimpleMutexCreate(), (*(void *)(v25 + 672) = v51) == 0))
  {
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_34;
  }
  *(_DWORD *)(v25 + 664) = 0;
  CMTimeMake(&v114, 1, 3);
  *(CMTime *)(v25 + 692) = v114;
  *(_DWORD *)(v25 + 716) = 0;
  *(_OWORD *)(v25 + 720) = xmmword_194993200;
  *(_DWORD *)(v25 + 736) = 1065353216;
  uint64_t v52 = FigSimpleMutexCreate();
  *(void *)(v25 + 776) = v52;
  if (v52)
  {
    *(_WORD *)(v25 + 1328) = 1;
    *(unsigned char *)(v25 + 1330) = 0;
    *(void *)(v25 + 1336) = 0;
    *(_OWORD *)(v25 + 1356) = v85;
    *(void *)(v25 + 1372) = v43;
    uint64_t v53 = FigReentrantMutexCreate();
    *(void *)(v25 + 616) = v53;
    if (v53)
    {
      *(void *)(v25 + 1128) = 0;
      *(_WORD *)(v25 + 1136) = 256;
      uint64_t v54 = FigSimpleMutexCreate();
      *(void *)(v25 + 848) = v54;
      if (v54)
      {
        *(_WORD *)(v25 + 1152) = 257;
        snprintf(__str, 0x50uLL, "com.apple.coremedia.fileplaybackitem.timer.%s", v26);
        dispatch_queue_t v55 = dispatch_queue_create(__str, 0);
        *(void *)(v25 + 104) = v55;
        if (v55)
        {
          CFAllocatorRef v56 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CMClockRef HostTimeClock = CMClockGetHostTimeClock();
          uint64_t OnlyTimebase = CMTimebaseCreateWithSourceClock(v56, HostTimeClock, (CMTimebaseRef *)(v25 + 328));
          if (OnlyTimebase) {
            goto LABEL_133;
          }
          uint64_t OnlyTimebase = CMTimebaseCreateReadOnlyTimebase();
          if (OnlyTimebase) {
            goto LABEL_133;
          }
          uint64_t v59 = FigSimpleMutexCreate();
          *(void *)(v25 + 2096) = v59;
          if (v59)
          {
            *(void *)CFDictionaryRef theDict = 0;
            uint64_t v60 = *(void *)(v25 + 1216);
            CFAllocatorRef v61 = CFGetAllocator(a1);
            uint64_t v62 = FigAssetGetCMBaseObject(v60);
            uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v63) {
              uint64_t v64 = v63;
            }
            else {
              uint64_t v64 = 0;
            }
            CFSetRef v65 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, unsigned char *))(v64 + 48);
            if (v65) {
              v65(v62, @"assetProperty_CreationOptionsDictionary", v61, theDict);
            }
            uint64_t v24 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
            if (!*(void *)theDict)
            {
LABEL_91:
              if (v94) {
                CFRelease(v94);
              }
              uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification();
              if (started) {
                goto LABEL_131;
              }
              uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification();
              if (started) {
                goto LABEL_131;
              }
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListeners();
              MEMORY[0x19970E910](*(void *)(v89 + 40));
              CFSetAddValue(*(CFMutableSetRef *)(v89 + 32), v100);
              MEMORY[0x19970E930](*(void *)(v89 + 40));
              *(CFAbsoluteTime *)(v25 + 1520) = CFAbsoluteTimeGetCurrent();
              *(CFAbsoluteTime *)(v25 + 1920) = CFAbsoluteTimeGetCurrent();
              *(void *)(v25 + 1896) = FigSimpleMutexCreate();
              *(_OWORD *)(v25 + 1704) = 0u;
              uint64_t v74 = FigSimpleMutexCreate();
              *(void *)(v25 + 1736) = v74;
              if (v74)
              {
                long long v75 = @"TimeDomain";
                if (@"TimeDomain") {
                  long long v75 = (__CFString *)CFRetain(@"TimeDomain");
                }
                *(void *)(v25 + 1464) = v75;
                *(void *)(v25 + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
                if (FigRenderedLegibleOutputManagerIsSupported())
                {
                  uint64_t v76 = (dispatch_queue_t **)(v25 + 1744);
                  uint64_t started = FigLegibleOutputManagerCreate((uint64_t)v56, (uint64_t)itemfig_postLegibleOutputNotification, (uint64_t)itemfig_postLegibleFlushNotification, (uint64_t)v100, (CFTypeRef *)(v25 + 1744));
                  if (started)
                  {
LABEL_131:
                    uint64_t v23 = started;
                    LOBYTE(a3) = v86;
                    goto LABEL_34;
                  }
                  FigLegibleOutputManagerSetCaptionPipelineStrategy(*v76, *(unsigned char *)(v89 + 781) == 0);
                  FigLegibleOutputManagerSetCaptionRenderingStrategy(*v76, *(unsigned char *)(v89 + 782) == 0);
                }
                if (FigRenderedLegibleOutputManagerIsSupported())
                {
                  uint64_t started = FigRenderedLegibleOutputManagerCreate((uint64_t)v56, itemfig_postRenderedLegibleOutputNotification, itemfig_postRenderedLegibleFlushNotification, (uint64_t)v100, (CFTypeRef *)(v25 + 1776));
                  if (started) {
                    goto LABEL_131;
                  }
                }
                uint64_t started = FigMetadataStorageCreate(&v99);
                if (started) {
                  goto LABEL_131;
                }
                CFTypeRef v77 = v99;
                *(void *)(v25 + 1760) = v99;
                CFTypeRef v99 = 0;
                FPSupport_SetMetadataOutputCallbacks((uint64_t)v77, (uint64_t)itemfig_postMetadataOutputChanged, (uint64_t)itemfig_postMetadataOutputFlushed);
                CFArrayRef v78 = CFArrayCreate(v56, 0, 0, MEMORY[0x1E4F1D510]);
                *(void *)(v25 + 1768) = v78;
                if (v78)
                {
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v56, 0, 0, MEMORY[0x1E4F1D540]);
                  *(void *)(v25 + 1096) = Mutable;
                  if (Mutable)
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    uint64_t v23 = 0;
                    int v33 = (void *)v100;
                    CFTypeRef v100 = 0;
                    LOBYTE(a3) = v86;
                    if (!v32) {
                      goto LABEL_108;
                    }
                    goto LABEL_107;
                  }
                }
              }
              uint64_t started = FigSignalErrorAt();
              goto LABEL_131;
            }
            CFDictionaryRef v66 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)theDict, @"assetOption_PreloadDurationWhenNextItem");
            CMTimeMakeFromDictionary(&v114, v66);
            *(CMTime *)(v25 + 1356) = v114;
            CFIndex v67 = (const void *)*MEMORY[0x1E4F1CFD0];
            *(unsigned char *)(v25 + 2016) = v67 == CFDictionaryGetValue(*(CFDictionaryRef *)theDict, @"assetOption_VideoNotEligibleForAppRecording");
            uint64_t v68 = CFDictionaryGetValue(*(CFDictionaryRef *)theDict, @"assetOption_DownloadDestinationURL");
            if (v68) {
              uint64_t v68 = CFRetain(v68);
            }
            *(void *)(v25 + 2104) = v68;
            unsigned int v69 = CFDictionaryGetValue(*(CFDictionaryRef *)theDict, @"assetOption_ClientBundleIdentifier");
            if (v69)
            {
              CFTypeRef v70 = CFRetain(v69);
              *(void *)(v25 + 2088) = v70;
              if (v70)
              {
LABEL_89:
                *(_WORD *)(v25 + 2128) = 256;
                if (*(void *)theDict) {
                  CFRelease(*(CFTypeRef *)theDict);
                }
                goto LABEL_91;
              }
              uint64_t v71 = (void *)(v25 + 2088);
            }
            else
            {
              uint64_t v71 = (void *)(v25 + 2088);
              *(void *)(v25 + 2088) = 0;
            }
            CFTypeRef v72 = v94;
            if (v94) {
              CFTypeRef v72 = CFRetain(v94);
            }
            *uint64_t v71 = v72;
            goto LABEL_89;
          }
        }
        uint64_t OnlyTimebase = FigSignalErrorAt();
LABEL_133:
        uint64_t v23 = OnlyTimebase;
        LOBYTE(a3) = v86;
        goto LABEL_134;
      }
    }
  }
  uint64_t v23 = FigSignalErrorAt();
LABEL_134:
  uint64_t v24 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
LABEL_34:
  if (v100) {
    CFRelease(v100);
  }
  int v33 = 0;
  if (v32) {
LABEL_107:
  }
    CFRelease(v32);
LABEL_108:
  if (v99) {
    CFRelease(v99);
  }
  if (v23 && *((_DWORD *)v24 + 764))
  {
    unsigned int v93 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v81 = v93;
    if (os_log_type_enabled(v80, type)) {
      unsigned int v82 = v81;
    }
    else {
      unsigned int v82 = v81 & 0xFFFFFFFE;
    }
    if (v82)
    {
      *(_DWORD *)CFDictionaryRef theDict = 136315394;
      *(void *)&theDict[4] = "fp_CreatePlaybackItem";
      __int16 v102 = 1024;
      LODWORD(v103) = v23;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_124;
  }
  if (!v23)
  {
    uint64_t v83 = CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
    if ((a3 & 0x80) != 0)
    {
      *(unsigned char *)(v83 + 1242) = 0;
    }
    else
    {
      uint64_t AssetBasicsIfReady = itemfig_retrieveAssetBasicsIfReady(v33);
      if (AssetBasicsIfReady)
      {
        uint64_t v23 = AssetBasicsIfReady;
        goto LABEL_124;
      }
    }
    uint64_t v23 = 0;
    *a5 = v33;
    goto LABEL_28;
  }
LABEL_124:
  if (v33) {
    CFRelease(v33);
  }
LABEL_28:
  if (v91) {
    CFRelease(v91);
  }
  if (v90) {
    CFRelease(v90);
  }
  return v23;
}

uint64_t playerfig_SetRateWithOptions(const void *a1, float a2)
{
  long long v6 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v13.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v13.CMTimeEpoch epoch = v4;
  int v12 = 0;
  FigCFDictionaryGetInt32IfPresent();
  if (!FigCFDictionaryGetCMTimeIfPresent()) {
    return playerfig_setRateForReason(a1, 0, a2);
  }
  CMTime v11 = v13;
  long long v9 = v6;
  CMTimeEpoch v10 = v4;
  long long v7 = v6;
  CMTimeEpoch v8 = v4;
  return playerfig_setRateGuts(a1, 0, &v11, (uint64_t)&v9, (uint64_t)&v7, a2);
}

uint64_t playerfig_SetProperties(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  return FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playerfig_handleSetProperty, 0, 0, a3);
}

uint64_t playerfig_ReevaluateRouteConfiguration(const void *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  char v37 = 0;
  CFTypeRef cf = 0;
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage)
  {
    CFTypeRef v6 = 0;
    uint64_t matched = 4294954511;
    goto LABEL_63;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 176));
  uint64_t v5 = *(const void **)(DerivedStorage + 168);
  if (!v5)
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 176));
    CFTypeRef v6 = 0;
    goto LABEL_13;
  }
  CFTypeRef v6 = CFRetain(v5);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 176));
  if (!v6)
  {
LABEL_13:
    int v12 = 0;
    goto LABEL_14;
  }
  uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v6);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CMTimeEpoch v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
  if (!v10) {
    goto LABEL_62;
  }
  uint64_t v11 = v10(CMBaseObject, @"IsActiveConfigurationInvalid", *MEMORY[0x1E4F1CF80], &cf);
  if (v11) {
    goto LABEL_71;
  }
  if (cf != (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
    goto LABEL_13;
  }
  if (dword_1E9350BF0)
  {
    char v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v33 = v32 ? v32 : 0;
  CFTypeRef v34 = *(uint64_t (**)(CFTypeRef))(v33 + 48);
  if (!v34)
  {
LABEL_62:
    uint64_t matched = 4294954514;
    goto LABEL_63;
  }
  uint64_t v11 = v34(v6);
  if (!v11)
  {
    int v12 = 1;
LABEL_14:
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*(void *)(v13 + 496));
    if (!*(void *)(v13 + 512)
      || (v41.length = CFArrayGetCount(*(CFArrayRef *)(v13 + 504)),
          v41.locatioCFIndex n = 0,
          CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v13 + 504), v41, *(const void **)(v13 + 512)),
          FirstIndexOfValue < 0))
    {
LABEL_19:
      MEMORY[0x19970E2B0](*(void *)(v13 + 496));
    }
    else
    {
      CFIndex v15 = 0;
      CFIndex v16 = FirstIndexOfValue + 1;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v13 + 504), v15);
        if (itemfig_wantsDifferentSpatializationConfiguration((uint64_t)ValueAtIndex)) {
          break;
        }
        if (v16 == ++v15) {
          goto LABEL_19;
        }
      }
      MEMORY[0x19970E2B0](*(void *)(v13 + 496));
      if (dword_1E9350BF0)
      {
        uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        int v12 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        int v12 = 1;
      }
    }
    playerfig_applyAutoSelectionCriteriaInternal((uint64_t)a1, 0, &v37);
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    CFArrayRef v18 = *(const __CFArray **)(DerivedStorage + 504);
    if (v18)
    {
      if (CFArrayGetCount(v18) >= 1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
        if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 996))
        {
          uint64_t v19 = CMBaseObjectGetDerivedStorage();
          int v20 = *(unsigned __int8 *)(v19 + 1106);
          MEMORY[0x19970E910](*(void *)(v19 + 456));
          uint64_t v21 = *(const void **)(v19 + 464);
          if (v21) {
            CFTypeRef v22 = CFRetain(v21);
          }
          else {
            CFTypeRef v22 = 0;
          }
          MEMORY[0x19970E930](*(void *)(v19 + 456));
          int IsAnAudioDeviceAvailable = FPSupport_IsAnAudioDeviceAvailable((uint64_t)v22);
          if (v22) {
            CFRelease(v22);
          }
          if (v20 != IsAnAudioDeviceAvailable)
          {
            *(unsigned char *)(v19 + 1106) = IsAnAudioDeviceAvailable;
            if (dword_1E9350BF0)
            {
              uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              int v12 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            else
            {
              int v12 = 1;
            }
          }
        }
      }
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    if (!v12 || v37)
    {
LABEL_41:
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
      CFArrayRef v27 = *(const __CFArray **)(DerivedStorage + 504);
      if (!v27 || CFArrayGetCount(v27) < 1 || *(_DWORD *)(DerivedStorage + 60) != 2) {
        goto LABEL_54;
      }
      uint64_t v28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      uint64_t v29 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(v29 + 1288))
      {
        playerfig_UpdateAudioSessionPreferredDeviceFormat();
        playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
        playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)a1);
        itemfig_InformStakeholdersOfBestAvailableAudioContentType((uint64_t)v28);
      }
      if (!*(void *)(v29 + 352)) {
        goto LABEL_54;
      }
      if (*(unsigned char *)(v29 + 480))
      {
        if (dword_1E9350BF0)
        {
LABEL_53:
          uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (FigCFDictionaryGetValue() != *MEMORY[0x1E4F1CFD0])
        {
          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v28, 0);
          v39[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime v38 = v39[0];
          uint64_t matched = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v28, v39, &v38);
LABEL_55:
          MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
          goto LABEL_63;
        }
        if (dword_1E9350BF0) {
          goto LABEL_53;
        }
      }
LABEL_54:
      uint64_t matched = 0;
      goto LABEL_55;
    }
    v39[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v38 = v39[0];
    uint64_t v11 = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)v39, (uint64_t)&v38, 0);
    if (!v11)
    {
      char v37 = 1;
      goto LABEL_41;
    }
  }
LABEL_71:
  uint64_t matched = v11;
LABEL_63:
  if (v3) {
    CFRelease(v3);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  return matched;
}

uint64_t playerfig_AddExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || (uint64_t v4 = DerivedStorage, *(unsigned char *)DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    if (dword_1E9350BF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 1112), a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    MEMORY[0x19970E2B0](*(void *)(v4 + 496));
    return 0;
  }
}

uint64_t playerfig_RemoveExternalStartupTask(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || (uint64_t v4 = DerivedStorage, *(unsigned char *)DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    CFArrayRef v5 = *(const __CFArray **)(v4 + 1112);
    v12.length = CFArrayGetCount(v5);
    v12.locatioCFIndex n = 0;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v12, a2);
    if (FirstIndexOfValue == -1)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      CFIndex v7 = FirstIndexOfValue;
      if (dword_1E9350BF0)
      {
        uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 1112), v7);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    MEMORY[0x19970E2B0](*(void *)(v4 + 496));
    return 0;
  }
}

uint64_t playerfig_TransferOwnershipOfPlaybackItemFromPlayer(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      if (*(void *)(DerivedStorage + 8) == a3)
      {
        if (a3 == a1) {
          return 0;
        }
        uint64_t v8 = v7;
        MEMORY[0x19970E290](*(void *)(v7 + 496));
        int v9 = *(unsigned __int8 *)(DerivedStorage + 1);
        MEMORY[0x19970E2B0](*(void *)(v8 + 496));
        if (!v9)
        {
          itemfig_reportingAgentTeardown();
          MEMORY[0x19970E910](*(void *)(v8 + 40));
          CFSetRemoveValue(*(CFMutableSetRef *)(v8 + 32), a2);
          MEMORY[0x19970E930](*(void *)(v8 + 40));
          *(void *)(DerivedStorage + 8) = a1;
          if (*(void *)(DerivedStorage + 16))
          {
            CFRelease(*(CFTypeRef *)(DerivedStorage + 16));
            *(void *)(DerivedStorage + 16) = 0;
          }
          *(void *)(DerivedStorage + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          uint64_t v10 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19970E910](*(void *)(v10 + 40));
          CFSetAddValue(*(CFMutableSetRef *)(v10 + 32), a2);
          MEMORY[0x19970E930](*(void *)(v10 + 40));
          itemfig_reportingAgentSetup((uint64_t)a2);
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_CopyDisplayedCVPixelBuffer(uint64_t a1, uint64_t a2, CVPixelBufferRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(values, 0, sizeof(values));
  if (a1 && a3)
  {
    uint64_t v6 = DerivedStorage;
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    CFDictionaryRef ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    if (ValueAtIndex)
    {
      CFTypeRef v8 = CFRetain(ValueAtIndex);
      MEMORY[0x19970E2B0](*(void *)(v6 + 496));
      if (v8)
      {
        uint64_t v9 = CMBaseObjectGetDerivedStorage();
        if (!v9)
        {
          uint64_t v17 = FigSignalErrorAt();
LABEL_22:
          CFRelease(v8);
          return v17;
        }
        uint64_t v10 = v9;
        MEMORY[0x19970E910](*(void *)(v9 + 1120));
        int ValueIfPresent = FigCFDictionaryGetValueIfPresent();
        CFRange v12 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
        if ((ValueIfPresent || FigCFDictionaryGetValueIfPresent())
          && FigCFArrayGetFirstIndexOfValue() != -1
          && (values[0] = (void *)FigCFArrayGetValueAtIndex()) != 0)
        {
          CFArrayRef v14 = CFArrayCreate(*v12, (const void **)values, 1, MEMORY[0x1E4F1D510]);
        }
        else
        {
          CFIndex v15 = *(const void **)(v10 + 1104);
          if (!v15)
          {
            CFArrayRef v16 = 0;
LABEL_20:
            MEMORY[0x19970E930](*(void *)(v10 + 1120));
            uint64_t v17 = FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(v16, *v12, a3);
            if (v16) {
              CFRelease(v16);
            }
            goto LABEL_22;
          }
          CFArrayRef v14 = (const __CFArray *)CFRetain(v15);
        }
        CFArrayRef v16 = v14;
        goto LABEL_20;
      }
    }
    else
    {
      MEMORY[0x19970E2B0](*(void *)(v6 + 496));
    }
  }

  return FigSignalErrorAt();
}

uint64_t itemfig_retrieveAssetBasicsIfReady(void *a1)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  v20[0] = @"assetProperty_ContentByteStream";
  v20[1] = @"assetProperty_FormatReader";
  v20[2] = @"assetProperty_Tracks";
  v20[3] = @"MediaSelectionArray";
  if (!v3) {
    return 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 1240))
  {
    uint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(DerivedStorage + 1216);
      uint64_t v7 = v20[v4];
      uint64_t v19 = 0;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, char *, void))(v9 + 8);
      if (!v10)
      {
        uint64_t v12 = 4294954514;
        goto LABEL_29;
      }
      uint64_t v11 = v10(v6, v7, &v19, (char *)&v19 + 4, 0);
      if (v11) {
        goto LABEL_32;
      }
      if (v19 == 2)
      {
        uint64_t v12 = 0;
        int v5 = 1;
      }
      else
      {
        if (v19 != 3)
        {
          if (v19 < 2) {
            goto LABEL_27;
          }
          uint64_t v12 = 4294954436;
          goto LABEL_29;
        }
        uint64_t v12 = HIDWORD(v19);
      }
      if (v12 || !v5) {
        goto LABEL_29;
      }
      ++v4;
    }
    while (v4 != 4);
    uint64_t v11 = itemfig_setBasicInspectables(a1);
    if (v11)
    {
LABEL_32:
      uint64_t v12 = v11;
      goto LABEL_29;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1208));
    if (*(unsigned char *)(DerivedStorage + 1240))
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      *(unsigned char *)(DerivedStorage + 1202) = 1;
      if (*(double *)(DerivedStorage + 1960) == 0.0) {
        *(CFAbsoluteTime *)(DerivedStorage + 1960) = CFAbsoluteTimeGetCurrent();
      }
      *(unsigned char *)(DerivedStorage + 1240) = 1;
      CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 1248);
      *(void *)(DerivedStorage + 1248) = 0;
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
      if (v13)
      {
        CFIndex Count = CFArrayGetCount(v13);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          for (CFIndex i = 0; i != v15; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
            itemfig_postReadyForInspectionPayloadBecauseAssetPropertyLoadedAndBasicsReady((uint64_t)a1, ValueAtIndex);
          }
        }
        CFRelease(v13);
      }
    }
  }
LABEL_27:
  uint64_t v12 = 0;
LABEL_29:
  CFRelease(v3);
  return v12;
}

void itemfig_reportingAgentReportEnqueueTime()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double Current = CFAbsoluteTimeGetCurrent();
  double v2 = *(double *)(DerivedStorage + 1920);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
  uint64_t v3 = *(void *)(DerivedStorage + 1904);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v5 = v4 ? v4 : 0;
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v5 + 56);
    if (v6) {
      v6(v3, 0x1EE582B78, 0x1EE584B98, (uint64_t)((Current - v2) * 1000.0), 0);
    }
  }

  JUMPOUT(0x19970E930);
}

uint64_t itemfig_postReadyForInspectionPayloadBecauseAssetPropertyLoadedAndBasicsReady(uint64_t a1, const void *a2)
{
  values[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (!v5) {
    return 0;
  }
  if (*(unsigned char *)(DerivedStorage + 1240))
  {
    if (*(double *)(DerivedStorage + 1960) == 0.0) {
      *(CFAbsoluteTime *)(DerivedStorage + 1960) = CFAbsoluteTimeGetCurrent();
    }
    if (!CFEqual(a2, @"Lyrics")
      && !CFEqual(a2, @"Duration")
      && !CFEqual(a2, @"assetProperty_InitialSamples")
      && !CFEqual(a2, @"iTunesGaplessInfo")
      && !CFEqual(a2, @"assetProperty_CPEProtector"))
    {
      CFDictionaryRef v8 = 0;
LABEL_36:
      if (CFEqual(a2, @"assetProperty_InitialSamples"))
      {
        uint64_t v31 = 0;
        CFNumberRef number = 0;
        uint64_t v10 = *(void *)(DerivedStorage + 968);
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v12 = v11 ? v11 : 0;
        CFArrayRef v13 = *(void (**)(uint64_t, uint64_t *))(v12 + 8);
        if (v13)
        {
          v13(v10, &v31);
          if (v31 >= 1)
          {
            uint64_t v14 = 0;
            uint64_t v15 = *MEMORY[0x1E4F1CF80];
            do
            {
              CFTypeRef v30 = 0;
              int v28 = 0;
              int v29 = 1061109567;
              uint64_t v16 = *(void *)(DerivedStorage + 968);
              uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v17) {
                uint64_t v18 = v17;
              }
              else {
                uint64_t v18 = 0;
              }
              uint64_t v19 = *(void (**)(uint64_t, uint64_t, CFTypeRef *, int *, int *))(v18 + 48);
              if (v19) {
                v19(v16, v14, &v30, &v29, &v28);
              }
              uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v30);
              uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v21) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = 0;
              }
              uint64_t v23 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v22 + 48);
              if (v23 && !v23(FigBaseObject, @"NominalFrameRate", v15, &number) && number)
              {
                int valuePtr = 0;
                CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
                if (dword_1E9350BF0)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                CFRelease(number);
              }
              if (v30) {
                CFRelease(v30);
              }
              ++v14;
            }
            while (v14 < v31);
          }
        }
      }
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v25 = 0;
      goto LABEL_63;
    }
    if (CFEqual(a2, @"Lyrics"))
    {
      uint64_t v6 = (void **)&kFigPlaybackItemProperty_Lyrics;
    }
    else if (CFEqual(a2, @"Duration"))
    {
      uint64_t v6 = (void **)&kFigPlaybackItemProperty_AccurateDuration;
    }
    else if (CFEqual(a2, @"assetProperty_InitialSamples"))
    {
      uint64_t v6 = (void **)&kFigPlaybackItemProperty_InitialSamples;
    }
    else if (CFEqual(a2, @"iTunesGaplessInfo"))
    {
      uint64_t v6 = (void **)&kFigPlaybackItemProperty_iTunesGaplessInfo;
    }
    else
    {
      if (!CFEqual(a2, @"assetProperty_CPEProtector"))
      {
        if (!CFEqual(a2, @"assetProperty_ContentByteStream")
          && !CFEqual(a2, @"assetProperty_FormatReader")
          && !CFEqual(a2, @"assetProperty_Tracks"))
        {
          CFEqual(a2, @"MediaSelectionArray");
        }
        goto LABEL_30;
      }
      uint64_t v6 = (void **)&kFigPlaybackItemProperty_CPEProtector;
    }
    values[0] = *v6;
    if (values[0])
    {
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFTypeRef cf = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
      CFDictionaryRef v8 = CFDictionaryCreate(v7, (const void **)&kFigPlaybackItemParameter_Properties, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (cf) {
        CFRelease(cf);
      }
      if (v8)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 1208));
        int v9 = *(unsigned __int8 *)(DerivedStorage + 1201);
        *(_WORD *)(DerivedStorage + 1201) = 256;
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
LABEL_32:
        if (CFEqual(a2, @"Lyrics"))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
        }
        if (v9) {
          itemfig_postSelectedMediaOptionsDidChangeNotification(a1);
        }
        goto LABEL_36;
      }
LABEL_31:
      int v9 = 0;
      goto LABEL_32;
    }
LABEL_30:
    CFDictionaryRef v8 = 0;
    goto LABEL_31;
  }
  uint64_t v25 = FigSignalErrorAt();
LABEL_63:
  CFRelease(v5);
  return v25;
}

uint64_t itemfig_reportAttemptToWriteToReadOnlyTimebase()
{
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void itemfig_postLegibleOutputNotification(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      uint64_t v3 = (const void *)v2;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
  }
}

void itemfig_postLegibleFlushNotification(void *a1, uint64_t a2)
{
  values = a1;
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      uint64_t v3 = (const void *)v2;
      CFDictionaryRef v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemParameter_LegibleOutputKey, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v4) {
        CFRelease(v4);
      }
      CFRelease(v3);
    }
  }
}

void itemfig_postRenderedLegibleOutputNotification(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      uint64_t v3 = (const void *)v2;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
  }
}

void itemfig_postRenderedLegibleFlushNotification(void *a1, uint64_t a2)
{
  values = a1;
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      uint64_t v3 = (const void *)v2;
      CFDictionaryRef v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemParameter_RenderedLegibleOutputKey, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v4) {
        CFRelease(v4);
      }
      CFRelease(v3);
    }
  }
}

void itemfig_postMetadataOutputChanged(const void *a1, uint64_t a2, const void *a3)
{
  MetadataOutputDataCallbackPayload = FPSupport_CreateMetadataOutputDataCallbackPayload(a3, a1);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (MetadataOutputDataCallbackPayload)
  {
    CFRelease(MetadataOutputDataCallbackPayload);
  }
}

void itemfig_postMetadataOutputFlushed(void *a1)
{
  CFDictionaryRef MedadataOutputFlushCallbackPayload = FPSupport_CreateMedadataOutputFlushCallbackPayload(a1);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (MedadataOutputFlushCallbackPayload)
  {
    CFRelease(MedadataOutputFlushCallbackPayload);
  }
}

void itemfig_timebaseEffectiveRateChanged(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    CFRetain(a2);
    FigDeferNotificationToDispatchQueue();
    CFRelease(v3);
  }
}

uint64_t itemfig_CachePrimingCompleted()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

void itemfig_formatReaderTracksChanged()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    uint64_t v2 = (const void *)v1;
    if (*(void *)(DerivedStorage + 352))
    {
      if (dword_1E9350BF0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      long long v4 = *MEMORY[0x1E4F1F9F8];
      uint64_t v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v6 = v4;
      uint64_t v7 = v5;
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v2, (uint64_t)&v4, (uint64_t)&v6, 0);
    }
    CFRelease(v2);
  }
}

void itemfig_reportingAgentTeardown()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[237]);
  uint64_t v1 = DerivedStorage[238];
  if (v1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v3 = v2 ? v2 : 0;
    long long v4 = *(void (**)(uint64_t))(v3 + 112);
    if (v4) {
      v4(v1);
    }
  }
  uint64_t v5 = (const void *)DerivedStorage[239];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[239] = 0;
  }
  long long v6 = (const void *)DerivedStorage[238];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[238] = 0;
  }

  JUMPOUT(0x19970E930);
}

void itemfig_copyChosenAlternateTrackIDsDictionary(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(_DWORD *)(DerivedStorage + 996))
  {
    int valuePtr = *(_DWORD *)(DerivedStorage + 996);
    CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, @"Audio", v8);
    CFRelease(v8);
  }
  if (*(_DWORD *)(DerivedStorage + 1016))
  {
    int valuePtr = *(_DWORD *)(DerivedStorage + 1016);
    CFNumberRef v9 = CFNumberCreate(*v7, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, @"Subtitle", v9);
    CFRelease(v9);
  }
  *a3 = Mutable;
}

uint64_t itemfig_assureFormatReader(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 1208));
  uint64_t v3 = itemfig_setFormatReader(a1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
  return v3;
}

uint64_t itemfig_createTrackIDArray(void *a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = itemfig_assureBasicsReadyForInspection(a1);
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 968);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFNumberRef v9 = *(uint64_t (**)(uint64_t, size_t *))(v8 + 8);
  if (!v9) {
    return 4294954514;
  }
  size_t count = 0;
  uint64_t v5 = v9(v6, &count);
  if (v5) {
    return v5;
  }
  uint64_t v10 = (const void **)malloc_type_calloc(count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v10) {
    return FigSignalErrorAt();
  }
  uint64_t v11 = v10;
  size_t v12 = count;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if ((uint64_t)count < 1)
  {
LABEL_17:
    uint64_t v21 = 0;
    *a2 = CFArrayCreate(v13, v11, v12, MEMORY[0x1E4F1D510]);
  }
  else
  {
    int64_t v14 = 0;
    while (1)
    {
      int valuePtr = 0;
      uint64_t v15 = *(void *)(DerivedStorage + 968);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(uint64_t (**)(uint64_t, int64_t, void, void, int *))(v17 + 48);
      if (!v18)
      {
        uint64_t v21 = 4294954514;
        goto LABEL_20;
      }
      uint64_t v19 = v18(v15, v14, 0, 0, &valuePtr);
      if (v19) {
        break;
      }
      CFNumberRef v20 = CFNumberCreate(v13, kCFNumberSInt32Type, &valuePtr);
      v11[v14] = v20;
      if (!v20)
      {
        uint64_t v19 = FigSignalErrorAt();
        break;
      }
      ++v14;
      size_t v12 = count;
      if (v14 >= (uint64_t)count) {
        goto LABEL_17;
      }
    }
    uint64_t v21 = v19;
  }
LABEL_20:
  int64_t v22 = count;
  if ((uint64_t)count >= 1)
  {
    int64_t v23 = 0;
    do
    {
      uint64_t v24 = v11[v23];
      if (v24)
      {
        CFRelease(v24);
        int64_t v22 = count;
      }
      ++v23;
    }
    while (v23 < v22);
  }
  free(v11);
  return v21;
}

uint64_t itemfig_createChosenTrackIDArray(void *a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v5) {
    return 0;
  }
  uint64_t v7 = v6;
  size_t count = 0;
  if (*v6)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_61;
  }
  uint64_t v8 = itemfig_assureBasicsReadyForInspection(a1);
  if (v8) {
    goto LABEL_61;
  }
  uint64_t v9 = *((void *)DerivedStorage + 121);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  size_t v12 = *(uint64_t (**)(uint64_t, size_t *))(v11 + 8);
  if (!v12)
  {
    CFAllocatorRef v13 = 0;
    uint64_t v24 = 4294954514;
    goto LABEL_54;
  }
  uint64_t v8 = v12(v9, &count);
  if (v8)
  {
LABEL_61:
    uint64_t v24 = v8;
    CFAllocatorRef v13 = 0;
    goto LABEL_54;
  }
  CFAllocatorRef v13 = (const void **)malloc_type_calloc(count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v13)
  {
    uint64_t v15 = FigSignalErrorAt();
LABEL_63:
    uint64_t v24 = v15;
    goto LABEL_54;
  }
  int64_t v14 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  uint64_t v40 = a2;
  CFRange v41 = v5;
  if (v7[121])
  {
    uint64_t v15 = itemfig_ensureTrackStorageArray();
    if (!v15)
    {
      CFIndex v16 = CFArrayGetCount(*((CFArrayRef *)DerivedStorage + 81));
      if (v16 >= 1)
      {
        CFIndex v17 = v16;
        CFIndex v18 = 0;
        CFIndex v19 = 0;
        CFNumberRef v20 = v14;
        CFAllocatorRef v21 = *v14;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)DerivedStorage + 81), v18);
          if (*((_DWORD *)ValueAtIndex + 1) == 1986618469 && *((unsigned char *)ValueAtIndex + 8))
          {
            CFNumberRef v23 = CFNumberCreate(v21, kCFNumberSInt32Type, ValueAtIndex);
            v13[v19] = v23;
            if (!v23) {
              goto LABEL_57;
            }
            ++v19;
          }
          ++v18;
        }
        while (v17 != v18);
LABEL_25:
        if (v7[120])
        {
          uint64_t v26 = itemfig_ensureTrackStorageArray();
          if (!v26)
          {
            CFIndex v27 = CFArrayGetCount(*((CFArrayRef *)DerivedStorage + 81));
            CFAllocatorRef v28 = *v20;
            uint64_t v5 = v41;
            if (v27 >= 1)
            {
              CFIndex v29 = v27;
              for (CFIndex i = 0; i != v29; ++i)
              {
                uint64_t v31 = CFArrayGetValueAtIndex(*((CFArrayRef *)DerivedStorage + 81), i);
                if (*((_DWORD *)v31 + 1) == 1936684398 && *((unsigned char *)v31 + 8))
                {
                  CFNumberRef v32 = CFNumberCreate(v28, kCFNumberSInt32Type, v31);
                  v13[v19] = v32;
                  if (!v32) {
                    goto LABEL_56;
                  }
                  ++v19;
                }
              }
            }
LABEL_39:
            if (DerivedStorage[254])
            {
              CFNumberRef v34 = CFNumberCreate(v28, kCFNumberSInt32Type, DerivedStorage + 254);
              v13[v19] = v34;
              if (!v34) {
                goto LABEL_56;
              }
              ++v19;
            }
            if (!DerivedStorage[252])
            {
LABEL_45:
              if (!DerivedStorage[260])
              {
LABEL_48:
                uint64_t v24 = 0;
                *uint64_t v40 = CFArrayCreate(v28, v13, v19, MEMORY[0x1E4F1D510]);
                goto LABEL_49;
              }
              CFNumberRef v36 = CFNumberCreate(v28, kCFNumberSInt32Type, DerivedStorage + 260);
              v13[v19] = v36;
              if (v36)
              {
                ++v19;
                goto LABEL_48;
              }
              goto LABEL_56;
            }
            CFNumberRef v35 = CFNumberCreate(v28, kCFNumberSInt32Type, DerivedStorage + 252);
            v13[v19] = v35;
            if (v35)
            {
              ++v19;
              goto LABEL_45;
            }
LABEL_56:
            uint64_t v24 = FigSignalErrorAt();
            goto LABEL_49;
          }
LABEL_58:
          uint64_t v24 = v26;
          uint64_t v5 = v41;
LABEL_49:
          if (v19 >= 1)
          {
            for (uint64_t j = 0; j != v19; ++j)
            {
              CMTime v38 = v13[j];
              if (v38) {
                CFRelease(v38);
              }
            }
          }
          goto LABEL_54;
        }
        CFAllocatorRef v28 = *v20;
        if (DerivedStorage[249])
        {
          CFNumberRef v33 = CFNumberCreate(*v20, kCFNumberSInt32Type, DerivedStorage + 249);
          v13[v19] = v33;
          if (!v33)
          {
LABEL_57:
            uint64_t v26 = FigSignalErrorAt();
            goto LABEL_58;
          }
          ++v19;
        }
        uint64_t v5 = v41;
        goto LABEL_39;
      }
LABEL_24:
      CFNumberRef v20 = v14;
      CFIndex v19 = 0;
      goto LABEL_25;
    }
    goto LABEL_63;
  }
  if (!DerivedStorage[250]) {
    goto LABEL_24;
  }
  CFNumberRef v20 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  CFNumberRef v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, DerivedStorage + 250);
  *CFAllocatorRef v13 = v25;
  if (v25)
  {
    CFIndex v19 = 1;
    goto LABEL_25;
  }
  uint64_t v24 = FigSignalErrorAt();
  uint64_t v5 = v41;
LABEL_54:
  free(v13);
  CFRelease(v5);
  return v24;
}

uint64_t FigCPEProtectorIsApplicationAuthorized(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!*v5) {
    return 4294954514;
  }
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v5[4];
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, 1, a2);
}

uint64_t FigCPEProtectorIsContentAuthorized(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!*v5) {
    return 4294954514;
  }
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v5[6];
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, 1, a2);
}

uint64_t itemfig_copyMetadata(void *a1, const __CFAllocator *a2, __CFArray **a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = DerivedStorage;
    uint64_t result = itemfig_assureBasicsReadyForInspection(a1);
    if (!result)
    {
      uint64_t v9 = *((void *)v8 + 121);
      return FigMetadataCopyMovieMetadata(v9, a2, a3);
    }
  }
  return result;
}

uint64_t itemfig_createPlayabilityMetricsDictionary(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  keys[7] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = 0;
  uint64_t valuePtr = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  keys[0] = @"BytesStillNeededToEnd";
  keys[1] = @"DurationFromNowToEnd";
  keys[2] = @"CurrentMeasuredBytesPerSecond";
  keys[3] = @"RawMeasuredBytesPerSecond";
  keys[4] = @"BandwidthSlopFactor";
  keys[5] = @"EstimatedTimeToLikelyToKeepUp";
  uint64_t v13 = 0;
  keys[6] = @"RemoteIPAddress";
  uint64_t v21 = 0;
  *a3 = 0;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
  uint64_t PlayabilityMetrics = FigPlayabilityMonitorGetPlayabilityMetrics(*(void **)(DerivedStorage + 600), &valuePtr, &v18, &v17, &v16, &v15, &v14);
  if (PlayabilityMetrics
    || (uint64_t PlayabilityMetrics = FigPlayabilityMonitorCopyRemoteIPAddress(*(void *)(DerivedStorage + 600), &v13),
        PlayabilityMetrics))
  {
    uint64_t v10 = PlayabilityMetrics;
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
  }
  else
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v8 = 6;
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, &valuePtr);
    values[1] = CFNumberCreate(v7, kCFNumberFloat64Type, &v18);
    values[2] = CFNumberCreate(v7, kCFNumberFloat64Type, &v17);
    values[3] = CFNumberCreate(v7, kCFNumberFloat64Type, &v16);
    values[4] = CFNumberCreate(v7, kCFNumberFloat64Type, &v15);
    values[5] = CFNumberCreate(v7, kCFNumberFloat64Type, &v14);
    if (v13)
    {
      uint64_t v21 = v13;
      CFIndex v8 = 7;
    }
    uint64_t v9 = 0;
    while (values[v9])
    {
      if (v8 == ++v9)
      {
        uint64_t v10 = 0;
        *a3 = CFDictionaryCreate(a2, (const void **)keys, (const void **)values, v8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        goto LABEL_9;
      }
    }
    uint64_t v10 = 4294954434;
LABEL_9:
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
    uint64_t v11 = values;
    do
    {
      if (*v11) {
        CFRelease(*v11);
      }
      ++v11;
      --v8;
    }
    while (v8);
  }
  return v10;
}

uint64_t itemfig_handleSetProperty(void *a1, uint64_t a2, const void *a3, const __CFBoolean *a4, unsigned char *a5)
{
  uint64_t v293 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  if (*DerivedStorage) {
    goto LABEL_60;
  }
  uint64_t v10 = (uint64_t)DerivedStorage;
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a3, @"PlaybackItemProperties"))
  {
    if (CFEqual(a3, @"EnableDownloadWhenInPlayQueue"))
    {
      if (a4)
      {
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(a4))
        {
          *(unsigned char *)(v10 + 1328) = CFBooleanGetValue(a4);
          playerfig_configureDownloadInPlayQueue();
        }
      }
      return 0;
    }
    if (CFEqual(a3, @"EnableDownloadWhenNotInPlayQueue"))
    {
      if (!a4) {
        return 0;
      }
      CFTypeID v32 = CFBooleanGetTypeID();
      if (v32 != CFGetTypeID(a4)) {
        return 0;
      }
      *(unsigned char *)(v10 + 1329) = CFBooleanGetValue(a4);
      MEMORY[0x19970E290](*(void *)(v11 + 496));
      if (!*(unsigned char *)(v10 + 1)) {
        itemfig_configureDownloadForItem((uint64_t)a1, *(unsigned __int8 *)(v10 + 1329));
      }
      goto LABEL_33;
    }
    if (CFEqual(a3, @"CachePrimingDownloadToken"))
    {
      if (a4)
      {
        CFTypeID v48 = CFNumberGetTypeID();
        if (v48 == CFGetTypeID(a4))
        {
          return itemfig_startCachePrimingWithDownloadToken((uint64_t)a1, a4);
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"LikelyToKeepUpTrigger"))
    {
      if (!*(unsigned char *)(v10 + 1))
      {
        if (a4)
        {
          CFTypeID v55 = CFStringGetTypeID();
          if (v55 == CFGetTypeID(a4))
          {
            if (CFEqual(a4, @"LikelyToKeepUpTriggerDefault"))
            {
              uint64_t result = 0;
              *(_DWORD *)(v10 + 1352) = 0;
              return result;
            }
            if (CFEqual(a4, @"LikelyToKeepUpTriggerLive"))
            {
              uint64_t result = 0;
              *(_DWORD *)(v10 + 1352) = 1;
              return result;
            }
          }
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"ChosenAlternateTrackIDDictionary"))
    {
      return itemfig_setChosenAlternateTrackIDsFromDictionary((uint64_t)a1, a4);
    }
    if (CFEqual(a3, @"EndTime"))
    {
      MEMORY[0x19970E290](*(void *)(v11 + 496));
      CFAllocatorRef v56 = (_OWORD *)(v10 + 140);
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
        *CFAllocatorRef v56 = *(_OWORD *)&valuePtr[0].start.value;
        CMTimeEpoch epoch = valuePtr[0].start.epoch;
      }
      else
      {
        uint64_t v60 = MEMORY[0x1E4F1F9F8];
        *CFAllocatorRef v56 = *MEMORY[0x1E4F1F9F8];
        CMTimeEpoch epoch = *(void *)(v60 + 16);
      }
      *(void *)(v10 + 156) = epoch;
      itemfig_checkForShortAudioTrack();
      uint64_t v61 = *(void *)(v10 + 352);
      if (!v61
        || *(void **)(v11 + 512) == a1
        && (*(_OWORD *)&valuePtr[0].start.CMTimeValue value = *v56,
            valuePtr[0].start.CMTimeEpoch epoch = *(void *)(v10 + 156),
            FigPlaybackBossCanChangeEndTimeTo(v61, (uint64_t)valuePtr)))
      {
        itemfig_setEndTimeOnBoss();
        MEMORY[0x19970E2B0](*(void *)(v11 + 496));
LABEL_116:
        playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems(*(void *)(v10 + 8), a1);
        return 0;
      }
      MEMORY[0x19970E2B0](*(void *)(v11 + 496));
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"ReverseEndTime"))
    {
      CFIndex v58 = (_OWORD *)(v10 + 164);
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
        *CFIndex v58 = *(_OWORD *)&valuePtr[0].start.value;
        CMTimeEpoch v59 = valuePtr[0].start.epoch;
      }
      else
      {
        uint64_t v65 = MEMORY[0x1E4F1F9F8];
        *CFIndex v58 = *MEMORY[0x1E4F1F9F8];
        CMTimeEpoch v59 = *(void *)(v65 + 16);
      }
      *(void *)(v10 + 180) = v59;
      if (!*(void *)(v10 + 352)) {
        goto LABEL_116;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        CFDictionaryRef v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"AdvanceTimeForOverlappedPlayback"))
    {
      uint64_t v63 = (_OWORD *)(v10 + 188);
      if (a4)
      {
        CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
        *uint64_t v63 = *(_OWORD *)&valuePtr[0].start.value;
        CMTimeEpoch v64 = valuePtr[0].start.epoch;
      }
      else
      {
        uint64_t v71 = MEMORY[0x1E4F1F9F8];
        *uint64_t v63 = *MEMORY[0x1E4F1F9F8];
        CMTimeEpoch v64 = *(void *)(v71 + 16);
      }
      *(void *)(v10 + 204) = v64;
      if (!*(void *)(v10 + 352)) {
        goto LABEL_116;
      }
      MEMORY[0x19970E290](*(void *)(v11 + 496));
      CFTypeRef v72 = *(void **)(v11 + 512);
      MEMORY[0x19970E2B0](*(void *)(v11 + 496));
      if (v72 == a1)
      {
        uint64_t v74 = *(void *)(v10 + 352);
        *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *v63;
        valuePtr[0].start.CMTimeEpoch epoch = *(void *)(v10 + 204);
        FigPlaybackBossSetAdvanceTimeForOverlappedPlayback(v74, (long long *)&valuePtr[0].start.value);
        goto LABEL_116;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        unsigned int v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
LABEL_114:
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v67, (uint64_t)valuePtr, (uint64_t)&time2, 0);
      return 0;
    }
    if (CFEqual(a3, @"LoopTimeRange"))
    {
      uint64_t v68 = (_OWORD *)(v10 + 236);
      if (a4)
      {
        CMTimeRangeMakeFromDictionary(valuePtr, a4);
        long long v69 = *(_OWORD *)&valuePtr[0].start.epoch;
        _OWORD *v68 = *(_OWORD *)&valuePtr[0].start.value;
        *(_OWORD *)(v10 + 252) = v69;
        long long v70 = *(_OWORD *)&valuePtr[0].duration.timescale;
      }
      else
      {
        uint64_t v78 = MEMORY[0x1E4F1FA20];
        long long v79 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        _OWORD *v68 = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)(v10 + 252) = v79;
        long long v70 = *(_OWORD *)(v78 + 32);
      }
      *(_OWORD *)(v10 + 268) = v70;
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        uint64_t v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"ReversesMoreVideoFramesInMemory"))
    {
      uint64_t result = 0;
      int v75 = *(unsigned __int8 *)(v10 + 284);
      int v76 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      *(unsigned char *)(v10 + 284) = v76;
      if (!*(void *)(v10 + 352) || v75 == v76) {
        return result;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        CFTypeRef v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"AggressivelyCachesVideoFrames"))
    {
      uint64_t result = 0;
      int v81 = *(unsigned __int8 *)(v10 + 285);
      int v82 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      *(unsigned char *)(v10 + 285) = v82;
      if (!*(void *)(v10 + 352) || v81 == v82) {
        return result;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        uint64_t v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"DecodeAllFramesDuringOrdinaryPlayback"))
    {
      uint64_t result = 0;
      int v84 = *(unsigned __int8 *)(v10 + 286);
      int v85 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      *(unsigned char *)(v10 + 286) = v85;
      if (!*(void *)(v10 + 352) || v84 == v85) {
        return result;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        int v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"EQPreset"))
    {
      uint64_t v87 = *(void *)(v10 + 8);
      LODWORD(valuePtr[0].start.value) = 0;
      if (a4)
      {
        CFTypeID v88 = CFGetTypeID(a4);
        if (v88 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue(a4, kCFNumberIntType, valuePtr))
          {
            *(_DWORD *)(v10 + 936) = valuePtr[0].start.value;
            playerfig_applyEQPreset(v87);
          }
        }
      }
      return 0;
    }
    if (CFEqual(a3, @"AudioDeviceChannelMap"))
    {
      uint64_t v89 = *(void *)(v10 + 8);
      if (a4)
      {
        CFTypeID v90 = CFDataGetTypeID();
        if (v90 != CFGetTypeID(a4)) {
          return 0;
        }
      }
      CFTypeRef v91 = *(const void **)(v10 + 944);
      if (v91) {
        CFRelease(v91);
      }
      *(void *)(v10 + 944) = a4;
      if (a4)
      {
        CFRetain(a4);
        uint64_t v92 = *(void *)(v10 + 944);
      }
      else
      {
        uint64_t v92 = 0;
      }
      CFTypeRef v96 = @"AudioDeviceChannelMap";
      uint64_t v97 = v89;
      goto LABEL_161;
    }
    if (CFEqual(a3, @"ReadAheadAllowBackfill"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v93 = CFGetTypeID(a4);
      if (v93 != CFBooleanGetTypeID()) {
        goto LABEL_60;
      }
      *(unsigned char *)(v10 + 1382) = 1;
      *(unsigned char *)(v10 + 1381) = CFBooleanGetValue(a4);
      uint64_t result = *(void *)(v10 + 128);
      if (!result) {
        return result;
      }
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      uint64_t result = CMBaseObjectIsMemberOfClass();
      if (!result) {
        return result;
      }
      uint64_t v94 = *(void *)(v10 + 128);
      uint64_t v95 = kFigCachedReadAheadByteStreamProperty_ReadAheadAllowBackfill;
LABEL_170:
      uint64_t v99 = (uint64_t)*v95;
      return CMByteStreamSetProperty(v94, v99, (uint64_t)a4);
    }
    if (CFEqual(a3, @"SaveDownloadedDataToDiskWhenDone"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v98 = CFGetTypeID(a4);
      if (v98 != CFBooleanGetTypeID()) {
        goto LABEL_60;
      }
      uint64_t result = *(void *)(v10 + 128);
      if (!result) {
        return result;
      }
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      uint64_t result = CMBaseObjectIsMemberOfClass();
      if (!result) {
        return result;
      }
      uint64_t v94 = *(void *)(v10 + 128);
      uint64_t v95 = kFigCachedReadAheadByteStreamProperty_SaveMemoryCacheToDiskWhenDone;
      goto LABEL_170;
    }
    if (CFEqual(a3, @"VideoCompositionInstructionArray"))
    {
      memset(&time2, 0, sizeof(time2));
      uint64_t result = itemfig_GetDuration((uint64_t)a1, (uint64_t)&time2);
      if (result) {
        return result;
      }
      CMTime start = time2;
      uint64_t v100 = MEMORY[0x1E4F1FA48];
      if ((*(_DWORD *)(v10 + 248) & 0x1D) == 1)
      {
        *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *(_OWORD *)(v10 + 236);
        valuePtr[0].start.CMTimeEpoch epoch = *(void *)(v10 + 252);
        long long v283 = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)&type.CMTimeValue value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v101 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        type.CMTimeEpoch epoch = v101;
        if ((CMTimeCompare(&valuePtr[0].start, &type) & 0x80000000) == 0 && (*(_DWORD *)(v10 + 272) & 0x1D) == 1)
        {
          *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *(_OWORD *)(v10 + 260);
          valuePtr[0].start.CMTimeEpoch epoch = *(void *)(v10 + 276);
          *(_OWORD *)&type.CMTimeValue value = v283;
          type.CMTimeEpoch epoch = v101;
          if (CMTimeCompare(&valuePtr[0].start, &type) >= 1)
          {
            CMTime type = start;
            long long v102 = *(_OWORD *)(v10 + 252);
            *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *(_OWORD *)(v10 + 236);
            *(_OWORD *)&valuePtr[0].start.CMTimeEpoch epoch = v102;
            *(_OWORD *)&valuePtr[0].duration.CMTimeScale timescale = *(_OWORD *)(v10 + 268);
            CMTimeFoldIntoRange(&start, &type, valuePtr);
          }
        }
      }
      if (!a4
        || (*(_OWORD *)&valuePtr[0].start.CMTimeValue value = *(_OWORD *)v100,
            valuePtr[0].start.CMTimeEpoch epoch = *(void *)(v100 + 16),
            CMTime type = start,
            FigVideoCompositionInstructionArrayIsValid((uint64_t)a4, (uint64_t)valuePtr, (uint64_t)&type)))
      {
        MEMORY[0x19970E910](*(void *)(v10 + 672));
        Float64 v103 = *(const void **)(v10 + 680);
        *(void *)(v10 + 680) = a4;
        if (a4) {
          CFRetain(a4);
        }
        if (v103) {
          CFRelease(v103);
        }
        MEMORY[0x19970E930](*(void *)(v10 + 672));
        uint64_t v104 = *(void *)(v10 + 808);
        if (!v104) {
          return 0;
        }
        uint64_t result = *(void *)(v10 + 352);
        if (result)
        {
          if (*(float *)(v11 + 48) == 0.0 || !*(unsigned char *)(v10 + 688))
          {
            FigPlaybackBossResetCompositionInstructions(result, v104, 1, 1);
            if (dword_1E9350BF0 >= 2)
            {
              __int16 v108 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigPlaybackBossRefreshVideoComposition(*(void *)(v10 + 352));
          }
          else
          {
            FigPlaybackBossResetCompositionInstructions(result, v104, 0, 0);
          }
          return 0;
        }
        return result;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, @"VideoCompositorSourceSampleDataTrackIDs"))
    {
      if (a4)
      {
        CFTypeID v105 = CFGetTypeID(a4);
        if (v105 != CFArrayGetTypeID()) {
          goto LABEL_60;
        }
      }
      MEMORY[0x19970E910](*(void *)(v10 + 776));
      __int16 v106 = *(const void **)(v10 + 784);
      *(void *)(v10 + 784) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v106) {
        CFRelease(v106);
      }
      uint64_t v107 = *(void *)(v10 + 776);
LABEL_199:
      MEMORY[0x19970E930](v107);
      return 0;
    }
    if (CFEqual(a3, @"VideoCompositorSourceVideoTrackWindows")
      || CFEqual(a3, @"VideoCompositorSourceSampleDataTrackWindows"))
    {
      goto LABEL_60;
    }
    if (CFEqual(a3, @"UsesMinimalLatencyForVideoCompositionRendering"))
    {
      if (a4)
      {
        CFTypeID v109 = CFGetTypeID(a4);
        if (v109 == CFBooleanGetTypeID())
        {
          int Value = CFBooleanGetValue(a4);
          if (Value != *(unsigned __int8 *)(v10 + 688))
          {
            *(unsigned char *)(v10 + 688) = Value;
            if (*(void *)(v10 + 808))
            {
              memset(valuePtr, 0, 24);
              memset(&time2, 0, sizeof(time2));
              itemfig_getHighAndLowWaterLevelDurationsForVideoCompositionProcessing((uint64_t)a1, (uint64_t)valuePtr, (uint64_t)&time2);
              uint64_t v111 = *(void *)(v10 + 808);
              CMTime start = valuePtr[0].start;
              CMTime type = time2;
              FigVideoCompositionProcessorSetOutputDurationHighAndLowWaterLevels(v111, &start, &type);
            }
          }
          return 0;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"VideoCompositorFrameDuration"))
    {
      memset(&start, 0, sizeof(start));
      CMTimeMakeFromDictionary(&start, a4);
      if ((start.flags & 0x1D) == 1)
      {
        valuePtr[0].CMTime start = start;
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        if (CMTimeCompare(&valuePtr[0].start, &time2) >= 1 && !start.epoch)
        {
          *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *(_OWORD *)(v10 + 692);
          valuePtr[0].start.CMTimeEpoch epoch = *(void *)(v10 + 708);
          *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&start.value;
          time2.CMTimeEpoch epoch = 0;
          uint64_t result = CMTimeCompare(&valuePtr[0].start, &time2);
          if (!result) {
            return result;
          }
          *(CMTime *)(v10 + 692) = start;
          if (!*(void *)(v10 + 352)) {
            return 0;
          }
          if (dword_1E9350BF0 >= 2)
          {
            LODWORD(type.value) = 0;
            __int16 v112 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v113 = type.value;
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v114 = v113;
            }
            else {
              unsigned int v114 = v113 & 0xFFFFFFFE;
            }
            if (v114)
            {
              LODWORD(time2.value) = 136315138;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFIndex v67 = *(const void **)(v10 + 8);
          *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
          valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          CMTime time2 = valuePtr[0].start;
          goto LABEL_114;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, @"VideoCompositorSourceTrackIDForFrameTiming"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v115 = CFGetTypeID(a4);
      if (v115 != CFNumberGetTypeID()) {
        goto LABEL_60;
      }
      start.CMTimeValue value = 0;
      CFNumberGetValue(a4, kCFNumberCFIndexType, &start);
      if (*(_DWORD *)(v10 + 716) == LODWORD(start.value)) {
        return 0;
      }
      *(_DWORD *)(v10 + 716) = start.value;
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(type.value) = 0;
        long long v116 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v117 = type.value;
        if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v118 = v117;
        }
        else {
          unsigned int v118 = v117 & 0xFFFFFFFE;
        }
        if (v118)
        {
          LODWORD(time2.value) = 136315138;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"VideoCompositorRenderDimensions"))
    {
      start.CMTimeValue value = 0;
      *(void *)&start.CMTimeScale timescale = 0;
      if (!a4) {
        return FigSignalErrorAt();
      }
      CFTypeID v119 = CFDictionaryGetTypeID();
      if (v119 != CFGetTypeID(a4) || !CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&start)) {
        return FigSignalErrorAt();
      }
      MEMORY[0x19970E290](*(void *)(v11 + 496));
      if (*(double *)(v10 + 720) != *(double *)&start.value || *(double *)(v10 + 728) != *(double *)&start.timescale)
      {
        *(_OWORD *)(v10 + 720) = *(_OWORD *)&start.value;
        uint64_t v120 = *(void *)(v10 + 352);
        MEMORY[0x19970E2B0](*(void *)(v11 + 496));
        if (!v120) {
          return 0;
        }
        if (dword_1E9350BF0 >= 2)
        {
          LODWORD(type.value) = 0;
          v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v122 = type.value;
          if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v123 = v122;
          }
          else {
            unsigned int v123 = v122 & 0xFFFFFFFE;
          }
          if (v123)
          {
            uint64_t v124 = *(void *)(v10 + 8);
            if (v124) {
              uint64_t v125 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            }
            else {
              uint64_t v125 = "";
            }
            if (a1) {
              char v141 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            }
            else {
              char v141 = "";
            }
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v124;
            HIWORD(time2.epoch) = 2082;
            v286 = v125;
            __int16 v287 = 2048;
            v288 = a1;
            __int16 v289 = 2082;
            v290 = v141;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFIndex v67 = *(const void **)(v10 + 8);
        *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
        valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        CMTime time2 = valuePtr[0].start;
        goto LABEL_114;
      }
LABEL_33:
      MEMORY[0x19970E2B0](*(void *)(v11 + 496));
      return 0;
    }
    if (CFEqual(a3, @"VideoCompositorRenderScale"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v126 = CFNumberGetTypeID();
      if (v126 != CFGetTypeID(a4)) {
        goto LABEL_60;
      }
      LODWORD(start.value) = 0;
      CFNumberGetValue(a4, kCFNumberFloatType, &start);
      if (*(float *)(v10 + 736) == *(float *)&start.value) {
        return 0;
      }
      *(_DWORD *)(v10 + 736) = start.value;
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(type.value) = 0;
        v127 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v128 = type.value;
        if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v129 = v128;
        }
        else {
          unsigned int v129 = v128 & 0xFFFFFFFE;
        }
        if (v129)
        {
          LODWORD(time2.value) = 136315138;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"VideoCompositorColorPrimaries"))
    {
      if (FigCFEqual()) {
        return 0;
      }
      if (a4)
      {
        CFTypeID v130 = CFStringGetTypeID();
        if (v130 != CFGetTypeID(a4)) {
          goto LABEL_60;
        }
        CFTypeID v131 = *(const void **)(v10 + 744);
        *(void *)(v10 + 744) = a4;
        CFRetain(a4);
      }
      else
      {
        CFTypeID v131 = *(const void **)(v10 + 744);
        *(void *)(v10 + 744) = 0;
      }
      if (v131) {
        CFRelease(v131);
      }
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        CFTypeID v136 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"VideoCompositorColorYCbCrMatrix"))
    {
      if (FigCFEqual()) {
        return 0;
      }
      if (a4)
      {
        CFTypeID v132 = CFStringGetTypeID();
        if (v132 != CFGetTypeID(a4)) {
          goto LABEL_60;
        }
        CFTypeID v133 = *(const void **)(v10 + 752);
        *(void *)(v10 + 752) = a4;
        CFRetain(a4);
      }
      else
      {
        CFTypeID v133 = *(const void **)(v10 + 752);
        *(void *)(v10 + 752) = 0;
      }
      if (v133) {
        CFRelease(v133);
      }
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v140 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"VideoCompositorColorTransferFunction"))
    {
      if (FigCFEqual()) {
        return 0;
      }
      if (a4)
      {
        CFTypeID v134 = CFStringGetTypeID();
        if (v134 != CFGetTypeID(a4)) {
          goto LABEL_60;
        }
        v135 = *(const void **)(v10 + 760);
        *(void *)(v10 + 760) = a4;
        CFRetain(a4);
      }
      else
      {
        v135 = *(const void **)(v10 + 760);
        *(void *)(v10 + 760) = 0;
      }
      if (v135) {
        CFRelease(v135);
      }
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        CFTypeID v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"VideoCompositorHDRDisplayMetadataPolicy"))
    {
      if (FigCFEqual()) {
        return 0;
      }
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v137 = CFGetTypeID(a4);
      if (v137 != CFStringGetTypeID()) {
        goto LABEL_60;
      }
      CFArrayRef v138 = *(const void **)(v10 + 768);
      *(void *)(v10 + 768) = a4;
      CFRetain(a4);
      if (v138) {
        CFRelease(v138);
      }
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        CFTypeID v139 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"VideoCompositor"))
    {
      start.CMTimeValue value = 0;
      if (a4)
      {
        if (CFEqual(a4, @"VideoCompositor_Basic"))
        {
          uint64_t OpenGL = 0;
LABEL_315:
          if (*(_DWORD *)(v10 + 664) == 1 && (CFTypeID v143 = *(const void **)(v10 + 656)) != 0) {
            start.CMTimeValue value = (CMTimeValue)CFRetain(v143);
          }
          else {
            uint64_t OpenGL = FigVideoCompositorCreateBasic(*MEMORY[0x1E4F1CF80], 0, &start);
          }
          int v147 = 1;
          goto LABEL_396;
        }
        if (CFEqual(a4, @"VideoCompositor_vImage"))
        {
          uint64_t OpenGL = 0;
LABEL_338:
          if (*(_DWORD *)(v10 + 664) == 3 && (v148 = *(const void **)(v10 + 656)) != 0) {
            start.CMTimeValue value = (CMTimeValue)CFRetain(v148);
          }
          else {
            uint64_t OpenGL = FigVideoCompositorCreatevImage(*MEMORY[0x1E4F1CF80], 0, &start);
          }
          int v147 = 3;
          goto LABEL_396;
        }
        if (CFEqual(a4, @"VideoCompositor_Metal"))
        {
          uint64_t OpenGL = 0;
LABEL_366:
          if (*(_DWORD *)(v10 + 664) == 4 && (v162 = *(const void **)(v10 + 656)) != 0) {
            start.CMTimeValue value = (CMTimeValue)CFRetain(v162);
          }
          else {
            uint64_t OpenGL = FigVideoCompositorCreateMetal(*MEMORY[0x1E4F1CF80], &start);
          }
          int v147 = 4;
          goto LABEL_396;
        }
        if (CFEqual(a4, @"VideoCompositor_OpenGL"))
        {
          uint64_t OpenGL = 0;
LABEL_381:
          if (*(_DWORD *)(v10 + 664) == 2 && (int v166 = *(const void **)(v10 + 656)) != 0) {
            start.CMTimeValue value = (CMTimeValue)CFRetain(v166);
          }
          else {
            uint64_t OpenGL = FigVideoCompositorCreateOpenGL((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (CFTypeRef *)&start);
          }
          int v147 = 2;
          goto LABEL_396;
        }
        if (CFEqual(a4, @"VideoCompositor_DeviceSpecific"))
        {
          valuePtr[0].start.CMTimeValue value = 0;
          int v147 = 0;
          uint64_t OpenGL = FigVideoCompositorCopyDeviceSpecificCompositorName(0, valuePtr);
          if (!OpenGL)
          {
            if (FigCFEqual())
            {
              int v147 = 1;
            }
            else if (FigCFEqual())
            {
              int v147 = 3;
            }
            else if (FigCFEqual())
            {
              int v147 = 4;
            }
            else
            {
              int v147 = 2 * (FigCFEqual() != 0);
            }
          }
          if (valuePtr[0].start.value) {
            CFRelease((CFTypeRef)valuePtr[0].start.value);
          }
          switch(v147)
          {
            case 0:
              goto LABEL_502;
            case 1:
              goto LABEL_315;
            case 2:
              goto LABEL_381;
            case 3:
              goto LABEL_338;
            case 4:
              goto LABEL_366;
            default:
              uint64_t OpenGL = FigSignalErrorAt();
              break;
          }
LABEL_396:
          CFTypeID v172 = (const void *)start.value;
          if (OpenGL || !start.value)
          {
            if (OpenGL)
            {
LABEL_418:
              if (v172) {
                CFRelease(v172);
              }
              return OpenGL;
            }
          }
          else
          {
            LODWORD(valuePtr[0].start.value) = 23;
            CFNumberRef v173 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
            FigVideoCompositorSetProperty(start.value, @"WorkerThreadPriority", (uint64_t)v173);
            if (v173) {
              CFRelease(v173);
            }
            CFTypeID v172 = (const void *)start.value;
          }
          if (*(const void **)(v10 + 656) != v172)
          {
            uint64_t v174 = *(const void **)(v10 + 8);
            if (v174)
            {
              MEMORY[0x19970E290](*(void *)(v11 + 496));
              CFTypeID v175 = *(const void **)(v10 + 656);
              Boolean v176 = (const void *)start.value;
              *(void *)(v10 + 656) = start.value;
              if (v176) {
                CFRetain(v176);
              }
              if (v175) {
                CFRelease(v175);
              }
              *(_DWORD *)(v10 + 664) = v147;
              itemfig_updateHasEnabledVideo();
              MEMORY[0x19970E2B0](*(void *)(v11 + 496));
              if (*(void *)(v10 + 352))
              {
                if (dword_1E9350BF0 >= 2)
                {
                  LODWORD(type.value) = 0;
                  CFTypeID v177 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v178 = type.value;
                  if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v179 = v178;
                  }
                  else {
                    unsigned int v179 = v178 & 0xFFFFFFFE;
                  }
                  if (v179)
                  {
                    LODWORD(time2.value) = 136315138;
                    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
                valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                CMTime time2 = valuePtr[0].start;
                playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v174, (uint64_t)valuePtr, (uint64_t)&time2, 0);
              }
              CFTypeID v172 = (const void *)start.value;
            }
          }
          goto LABEL_418;
        }
        FigVideoCompositorGetTypeID();
        CFGetTypeID(a4);
        uint64_t OpenGL = 0;
LABEL_502:
        CFTypeRef v146 = CFRetain(a4);
      }
      else
      {
        uint64_t OpenGL = 0;
        CFTypeRef v146 = 0;
      }
      int v147 = 0;
      start.CMTimeValue value = (CMTimeValue)v146;
      goto LABEL_396;
    }
    if (CFEqual(a3, @"VideoCompositionProperties"))
    {
      if (a4)
      {
        CFTypeID v145 = CFGetTypeID(a4);
        if (v145 == CFDictionaryGetTypeID())
        {
          return itemfig_setVideoCompositionProperties((uint64_t)a1, a4);
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"SynchronizedLayers"))
    {
      start.CMTimeValue value = 0;
      if (a4 && (CFTypeID v149 = CFGetTypeID(a4), v149 == CFArrayGetTypeID()))
      {
        CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
        CFArrayRef v151 = Copy;
        unsigned int v152 = (CFArrayRef *)(v10 + 864);
        unsigned int v153 = *(const void **)(v10 + 864);
        *(void *)(v10 + 864) = Copy;
        if (Copy)
        {
          CFRetain(Copy);
          char v154 = 0;
          goto LABEL_351;
        }
      }
      else
      {
        CFArrayRef v151 = 0;
        unsigned int v152 = (CFArrayRef *)(v10 + 864);
        unsigned int v153 = *(const void **)(v10 + 864);
        *(void *)(v10 + 864) = 0;
      }
      char v154 = 1;
LABEL_351:
      if (v153) {
        CFRelease(v153);
      }
      if ((v154 & 1) == 0) {
        CFRelease(v151);
      }
      CFAllocatorRef v155 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], &start.value);
      if (*(void *)(v10 + 856) && *(void *)(v10 + 8))
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v155, 0, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          v157 = Mutable;
          MEMORY[0x19970E910](*(void *)(v11 + 224));
          CFArrayRef v158 = *(const __CFArray **)(v11 + 208);
          if (v158)
          {
            v295.length = CFArrayGetCount(v158);
            v295.locatioCFIndex n = 0;
            CFArrayAppendArray(v157, *(CFArrayRef *)(v11 + 208), v295);
          }
          MEMORY[0x19970E930](*(void *)(v11 + 224));
          CFArrayRef v159 = *v152;
          if (*v152)
          {
            v296.length = CFArrayGetCount(*v152);
            v296.locatioCFIndex n = 0;
            CFArrayAppendArray(v157, v159, v296);
          }
          MEMORY[0x19970E910](*(void *)(v10 + 848));
          uint64_t v160 = *(void *)(v10 + 856);
          if (v160)
          {
            uint64_t v161 = FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v160, v157, (const void *)start.value);
          }
          else
          {
            LODWORD(type.value) = 0;
            CFTypeRef v180 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v181 = type.value;
            if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v182 = v181;
            }
            else {
              unsigned int v182 = v181 & 0xFFFFFFFE;
            }
            if (v182)
            {
              LODWORD(time2.value) = 136315138;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v161 = 0;
          }
          MEMORY[0x19970E930](*(void *)(v10 + 848));
          CFRelease(v157);
          goto LABEL_441;
        }
        LODWORD(type.value) = 0;
        v169 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v170 = type.value;
        if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v171 = v170;
        }
        else {
          unsigned int v171 = v170 & 0xFFFFFFFE;
        }
        if (v171)
        {
          LODWORD(time2.value) = 136315138;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_handleSetProperty";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v161 = 0;
LABEL_441:
      if (*v152)
      {
        *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
        valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        itemfig_GetDuration((uint64_t)a1, (uint64_t)valuePtr);
        CFArrayRef v186 = *(const __CFArray **)(v10 + 864);
        CMTime time2 = valuePtr[0].start;
        FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers((const void *)start.value, (long long *)&time2.value, v186, (uint64_t)"itemfig_handleSetProperty");
        if (*(void *)(v10 + 352)) {
          playerfig_synchronizeLayerToTimebaseWithTransaction((uint64_t)a1, (const void *)start.value);
        }
      }
      FigDeferredTransactionCommit(start.value);
      if (start.value) {
        CFRelease((CFTypeRef)start.value);
      }
      return v161;
    }
    if (CFEqual(a3, @"BlendsVideoFrames"))
    {
      if (a4)
      {
        CFTypeID v163 = CFBooleanGetTypeID();
        if (v163 != CFGetTypeID(a4)) {
          goto LABEL_60;
        }
      }
      int v164 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      if (*(unsigned __int8 *)(v10 + 1136) == v164) {
        return 0;
      }
      *(unsigned char *)(v10 + 1136) = v164;
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        CFBooleanRef v165 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"PropagatePerFrameHDRDisplayMetadata"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v167 = CFGetTypeID(a4);
      if (v167 != CFBooleanGetTypeID()) {
        goto LABEL_60;
      }
      *(unsigned char *)(v10 + 1137) = CFBooleanGetValue(a4);
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        CFTypeID v168 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"ApertureMode"))
    {
      LODWORD(valuePtr[0].start.value) = 0;
      LODWORD(time2.value) = 0;
      LODWORD(start.value) = 0;
      LODWORD(type.value) = 0;
      if (a4)
      {
        CFTypeID v183 = CFGetTypeID(a4);
        if (v183 == CFStringGetTypeID())
        {
          if (*(unsigned char *)(v10 + 1200)) {
            itemfig_GetDimensions(a1, (float *)valuePtr, (float *)&time2);
          }
          if (CFEqual(a4, @"CleanAperture"))
          {
            char v184 = 1;
            char v185 = 1;
LABEL_483:
            *(unsigned char *)(v10 + 1152) = v184;
            *(unsigned char *)(v10 + 1153) = v185;
LABEL_485:
            Boolean v194 = *(const void **)(v10 + 8);
            itemfig_setCAImageQueueFlagsForApertureMode();
            if (!v194) {
              return 0;
            }
            MEMORY[0x19970E910](*(void *)(v11 + 224));
            playerfig_updateVideoLayerSize(v194, 0);
            MEMORY[0x19970E930](*(void *)(v11 + 224));
            uint64_t v193 = *(unsigned __int8 *)(v10 + 1200);
            if (*(unsigned char *)(v10 + 1200))
            {
              itemfig_GetDimensions(a1, (float *)&start, (float *)&type);
              if (*(float *)&valuePtr[0].start.value != *(float *)&start.value
                || *(float *)&time2.value != *(float *)&type.value)
              {
                NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v194, (uint64_t)a1, v195, v196, v197, v198, v199, v200, @"CurrentDimensions", 0);
                CMNotificationCenterGetDefaultLocalCenter();
                FigDispatchAsyncPostNotification();
                if (NotificationPayloadForProperties) {
                  CFRelease(NotificationPayloadForProperties);
                }
              }
              return 0;
            }
            return v193;
          }
          if (CFEqual(a4, @"ProductionAperture"))
          {
            char v185 = 0;
            char v184 = 1;
            goto LABEL_483;
          }
          if (CFEqual(a4, @"EncodedPixels"))
          {
            char v184 = 0;
            char v185 = 0;
            goto LABEL_483;
          }
        }
      }
      uint64_t v193 = FigSignalErrorAt();
      if (v193) {
        return v193;
      }
      goto LABEL_485;
    }
    if (CFEqual(a3, @"ImageQueueInterpolationCurve"))
    {
      if (a4)
      {
        CFTypeID v187 = CFArrayGetTypeID();
        if (v187 != CFGetTypeID(a4)) {
          goto LABEL_60;
        }
        CFBooleanRef v188 = *(const __CFBoolean **)(v10 + 1128);
        if (v188 == a4) {
          return 0;
        }
        *(void *)(v10 + 1128) = a4;
        CFRetain(a4);
        if (!v188) {
          goto LABEL_468;
        }
      }
      else
      {
        CFBooleanRef v188 = *(const __CFBoolean **)(v10 + 1128);
        if (!v188) {
          return 0;
        }
        *(void *)(v10 + 1128) = 0;
      }
      CFRelease(v188);
LABEL_468:
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v191 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"VideoEnhancementMode"))
    {
      if (a4)
      {
        CFTypeID v189 = CFGetTypeID(a4);
        if (v189 == CFStringGetTypeID())
        {
          if (!FigCFEqual())
          {
            v190 = *(const void **)(v10 + 1144);
            *(void *)(v10 + 1144) = a4;
            CFRetain(a4);
            if (v190) {
              CFRelease(v190);
            }
            itemfig_setVideoEnhancementModeOnImageQueues((uint64_t)a1, (uint64_t)a4);
          }
          return 0;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"AlwaysMonitorPlayability"))
    {
      if (a4)
      {
        CFTypeID v192 = CFGetTypeID(a4);
        if (v192 == CFBooleanGetTypeID())
        {
          uint64_t result = CFBooleanGetValue(a4);
          if (result)
          {
            LOBYTE(valuePtr[0].start.value) = 0;
            MEMORY[0x19970E290](*(void *)(v10 + 616));
            *(unsigned char *)(v10 + 624) = 1;
            MEMORY[0x19970E2B0](*(void *)(v10 + 616));
            uint64_t result = itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)a1, valuePtr);
            if (LOBYTE(valuePtr[0].start.value))
            {
              MEMORY[0x19970E290](*(void *)(v10 + 616));
              *(unsigned char *)(v10 + 624) = 0;
              MEMORY[0x19970E2B0](*(void *)(v10 + 616));
              return itemfig_monitorPlayability(a1);
            }
          }
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"ContinuePlayingDuringPrerollForSeek"))
    {
      if (a4)
      {
        CFTypeID v202 = CFGetTypeID(a4);
        if (v202 == CFBooleanGetTypeID())
        {
          Boolean v203 = CFBooleanGetValue(a4);
          *(unsigned char *)(v10 + 287) = v203;
          uint64_t result = *(void *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetContinuePlayingDuringPrerollForSeek(result, v203);
            return 0;
          }
          return result;
        }
      }
LABEL_60:
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, @"ContinuePlayingDuringPrerollForRateChange"))
    {
      if (a4)
      {
        CFTypeID v204 = CFGetTypeID(a4);
        if (v204 == CFBooleanGetTypeID())
        {
          Boolean v205 = CFBooleanGetValue(a4);
          *(unsigned char *)(v10 + 288) = v205;
          uint64_t result = *(void *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetContinuePlayingDuringPrerollForRateChange(result, v205);
            return 0;
          }
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"IFrameOnlySpeedThreshold"))
    {
      if (a4)
      {
        CFTypeID v206 = CFGetTypeID(a4);
        if (v206 == CFNumberGetTypeID())
        {
          *(unsigned char *)(v10 + 290) = 1;
          CFNumberGetValue(a4, kCFNumberFloat32Type, (void *)(v10 + 292));
          uint64_t result = *(void *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetIFrameOnlySpeedThreshold(result, *(float *)(v10 + 292));
            return 0;
          }
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"UseIFrameOnlyPlaybackForHighRateScaledEdits"))
    {
      if (a4)
      {
        CFTypeID v207 = CFGetTypeID(a4);
        if (v207 == CFBooleanGetTypeID())
        {
          Boolean v208 = CFBooleanGetValue(a4);
          *(unsigned char *)(v10 + 289) = v208;
          uint64_t result = *(void *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetUseIFrameOnlyPlaybackForHighRateScaledEdits(result, v208);
            return 0;
          }
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"MinimumIntervalForIFrameOnlyPlayback"))
    {
      if (a4)
      {
        CFTypeID v209 = CFGetTypeID(a4);
        if (v209 == CFDictionaryGetTypeID())
        {
          CMTimeMakeFromDictionary(&valuePtr[0].start, a4);
          *(_OWORD *)(v10 + 296) = *(_OWORD *)&valuePtr[0].start.value;
          *(void *)(v10 + 312) = valuePtr[0].start.epoch;
          uint64_t result = *(void *)(v10 + 352);
          if (result)
          {
            *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *(_OWORD *)(v10 + 296);
            valuePtr[0].start.CMTimeEpoch epoch = *(void *)(v10 + 312);
            FigPlaybackBossSetMinimumIntervalForIFrameOnlyPlayback(result, (long long *)&valuePtr[0].start.value);
            return 0;
          }
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"ThoroughlyRefreshClosedCaptionsWhenSeeking"))
    {
      if (a4)
      {
        CFTypeID v210 = CFGetTypeID(a4);
        if (v210 == CFBooleanGetTypeID())
        {
          Boolean v211 = CFBooleanGetValue(a4);
          *(unsigned char *)(v10 + 320) = v211;
          uint64_t result = *(void *)(v10 + 352);
          if (result)
          {
            FigPlaybackBossSetThoroughlyRefreshClosedCaptionsWhenSeeking(result, v211);
            return 0;
          }
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"RequiresExternalProtection"))
    {
      if (a4)
      {
        CFTypeID v212 = CFGetTypeID(a4);
        if (v212 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(a4))
          {
            valuePtr[0].start.CMTimeValue value = 1;
            CFNumberRef v213 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, valuePtr);
            uint64_t result = 0;
            *(void *)(v10 + 1168) = v213;
            return result;
          }
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"LoudnessInfo"))
    {
      if (a4)
      {
        CFTypeID v214 = CFGetTypeID(a4);
        if (v214 != CFDictionaryGetTypeID()) {
          goto LABEL_60;
        }
        int v215 = *(const void **)(v10 + 1456);
        *(void *)(v10 + 1456) = a4;
        goto LABEL_563;
      }
      int v215 = *(const void **)(v10 + 1456);
      *(void *)(v10 + 1456) = 0;
      goto LABEL_760;
    }
    if (CFEqual(a3, @"SoundCheckVolumeNormalization"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v216 = CFGetTypeID(a4);
      if (v216 != CFNumberGetTypeID()) {
        goto LABEL_60;
      }
      LODWORD(valuePtr[0].start.value) = 0;
      CFNumberGetValue(a4, kCFNumberFloat32Type, valuePtr);
      *(_DWORD *)(v10 + 1440) = valuePtr[0].start.value;
LABEL_762:
      itemfig_applyLoudnessInfo(a1, 0, 1, 0);
      return 0;
    }
    if (CFEqual(a3, @"Volume"))
    {
      if (a4)
      {
        CFTypeID v217 = CFGetTypeID(a4);
        if (v217 == CFNumberGetTypeID())
        {
          LODWORD(valuePtr[0].start.value) = 1065353216;
          CFNumberGetValue(a4, kCFNumberFloat32Type, valuePtr);
          *(_DWORD *)(v10 + 1428) = valuePtr[0].start.value;
          itemfig_updateVolumeOffset((uint64_t)a1);
          return 0;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"AdjustTargetLevel"))
    {
      if (a4)
      {
        CFTypeID v218 = CFGetTypeID(a4);
        if (v218 == CFNumberGetTypeID())
        {
          CFTypeID v219 = *(const void **)(v10 + 1496);
          *(void *)(v10 + 1496) = a4;
          CFRetain(a4);
          if (v219) {
            CFRelease(v219);
          }
          itemfig_applyAdjustTargetLevel((uint64_t)a1);
          return 0;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"AdjustCompressionProfile"))
    {
      if (a4)
      {
        CFTypeID v220 = CFGetTypeID(a4);
        if (v220 == CFNumberGetTypeID())
        {
          CFTypeID v221 = *(const void **)(v10 + 1504);
          *(void *)(v10 + 1504) = a4;
          CFRetain(a4);
          if (v221) {
            CFRelease(v221);
          }
          itemfig_applyAdjustCompressionProfile((uint64_t)a1);
          return 0;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"MediaKind"))
    {
      if (a4)
      {
        CFTypeID v222 = CFGetTypeID(a4);
        if (v222 != CFStringGetTypeID()) {
          goto LABEL_60;
        }
        int v215 = *(const void **)(v10 + 1448);
        *(void *)(v10 + 1448) = a4;
LABEL_563:
        CFRetain(a4);
        goto LABEL_760;
      }
      int v215 = *(const void **)(v10 + 1448);
      *(void *)(v10 + 1448) = 0;
LABEL_760:
      if (v215) {
        CFRelease(v215);
      }
      goto LABEL_762;
    }
    if (CFEqual(a3, @"VisualContextArray"))
    {
      itemfig_setVisualContextArray((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a3, @"TextMarkupArray"))
    {
      itemfig_setTextMarkupArray((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a3, @"TextHighlightArray"))
    {
      itemfig_setTextHighlightArray((uint64_t)a1, a4);
      return 0;
    }
    if (CFEqual(a3, @"LegibleOutputs"))
    {
      if (!a4 || (CFTypeID v223 = CFGetTypeID(a4), v223 == CFDictionaryGetTypeID()))
      {
        itemfig_setLegibleOutputsDict((uint64_t)a1, a4);
        return 0;
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"MetadataOutputs"))
    {
      if (!a4 || (CFTypeID v224 = CFGetTypeID(a4), v224 == CFDictionaryGetTypeID()))
      {
        return itemfig_setMetadataOutputsDict((uint64_t)a1, a4);
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"RenderedLegibleOutputs"))
    {
      if (!a4 || (CFTypeID v225 = CFGetTypeID(a4), v225 == CFDictionaryGetTypeID()))
      {
        itemfig_setRenderedLegibleOutputsDict((uint64_t)a1, a4);
        return 0;
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"SelectedMediaArray"))
    {
      if (a4)
      {
        CFTypeID v226 = CFGetTypeID(a4);
        if (v226 == CFArrayGetTypeID())
        {
          return itemfig_updateSelectedMediaArrayInternal(a1, a4, 0, 0);
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"SuppressVideoLayers"))
    {
      BOOL v227 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      return itemfig_setSuppressVideoLayers((uint64_t)a1, v227);
    }
    if (CFEqual(a3, @"SuppressLegibleRendering"))
    {
      BOOL v228 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      return itemfig_setSuppressLegibleRendering((uint64_t)a1, v228);
    }
    if (CFEqual(a3, @"SeekingWaitsForVideoCompositionRendering"))
    {
      if (a4)
      {
        CFTypeID v229 = CFBooleanGetTypeID();
        if (v229 != CFGetTypeID(a4)) {
          goto LABEL_60;
        }
        Boolean v230 = CFBooleanGetValue(a4);
      }
      else
      {
        Boolean v230 = 0;
      }
      *(unsigned char *)(v10 + 545) = v230;
      if (!*(void *)(v10 + 352) || !*(void *)(v10 + 656)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v277 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v277, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"AudioProcessingTap"))
    {
      if (a4)
      {
        CFTypeID v231 = MTAudioProcessingTapGetTypeID();
        if (v231 != CFGetTypeID(a4) || !MTAudioProcessingTapIsMultitrackTap((uint64_t)a4)) {
          goto LABEL_60;
        }
        CFBooleanRef v232 = *(const __CFBoolean **)(v10 + 1432);
        if (v232 == a4) {
          return 0;
        }
        *(void *)(v10 + 1432) = a4;
        CFRetain(a4);
        if (!v232) {
          goto LABEL_771;
        }
      }
      else
      {
        CFBooleanRef v232 = *(const __CFBoolean **)(v10 + 1432);
        if (!v232) {
          return 0;
        }
        *(void *)(v10 + 1432) = 0;
      }
      CFRelease(v232);
LABEL_771:
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v278 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v278, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"ResetAudioBufferedAhead"))
    {
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      uint64_t result = fp_bufferedAirPlayActiveAndSupportsAtmos(*(void *)(v10 + 8), 0);
      if (!result) {
        return result;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        __int16 v233 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"TimePitchAlgorithm"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v234 = CFStringGetTypeID();
      if (v234 != CFGetTypeID(a4)) {
        goto LABEL_60;
      }
      if (CFEqual(a4, *(CFTypeRef *)(v10 + 1464))) {
        return 0;
      }
      __int16 v235 = @"TimeDomain";
      if (FigCFEqual()
        || (__int16 v235 = @"Spectral", FigCFEqual())
        || (__int16 v235 = @"Varispeed", FigCFEqual())
        || (__int16 v235 = @"LowQualityZeroLatency", FigCFEqual()))
      {
        v236 = *(const void **)(v10 + 1464);
        *(void *)(v10 + 1464) = v235;
        if (v235) {
          CFRetain(v235);
        }
      }
      else
      {
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
        v236 = *(const void **)(v10 + 1464);
        *(void *)(v10 + 1464) = 0;
      }
      if (v236) {
        CFRelease(v236);
      }
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v279 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"AudioProcessingUnits"))
    {
      if (a4)
      {
        CFTypeID v237 = CFGetTypeID(a4);
        if (v237 != CFArrayGetTypeID()) {
          goto LABEL_60;
        }
      }
      uint64_t result = FPSupport_AudioProcessingUnitsConfigurationsAreDifferent();
      if (!result) {
        return result;
      }
      uint64_t v238 = *(const void **)(v10 + 1480);
      *(void *)(v10 + 1480) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v238) {
        CFRelease(v238);
      }
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v239 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"AudioCurves"))
    {
      LOBYTE(valuePtr[0].start.value) = 0;
      LOBYTE(time2.value) = 0;
      fp_checkForCinematicAudioParametersInAudioCurves(*(void *)(v10 + 1472), (BOOL *)valuePtr, 0, 0);
      if (fp_isValidAudioCurves(a4))
      {
        v240 = *(const void **)(v10 + 1472);
        *(void *)(v10 + 1472) = a4;
        if (a4) {
          CFRetain(a4);
        }
        if (v240) {
          CFRelease(v240);
        }
        itemfig_applyItemAudioCurvesToAllAudioTracks(v10);
        fp_checkForCinematicAudioParametersInAudioCurves((uint64_t)a4, (BOOL *)&time2, 0, 0);
        if (LOBYTE(valuePtr[0].start.value) != LOBYTE(time2.value)) {
          playerfig_dispatchAsyncAutoSelectionCriteriaChangedForItem(*(void *)(v10 + 8), a1);
        }
        return 0;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a3, @"AudioClockDevice"))
    {
      if (a4)
      {
        CFTypeID v241 = CFStringGetTypeID();
        if (v241 != CFGetTypeID(a4)) {
          goto LABEL_60;
        }
        v242 = *(const void **)(v10 + 1488);
        *(void *)(v10 + 1488) = a4;
        CFRetain(a4);
      }
      else
      {
        v242 = *(const void **)(v10 + 1488);
        *(void *)(v10 + 1488) = 0;
      }
      if (v242) {
        CFRelease(v242);
      }
      uint64_t v97 = *(void *)(v10 + 8);
      CFTypeRef v96 = @"AudioQueueClockDevice";
      uint64_t v92 = (uint64_t)a4;
LABEL_161:
      return fp_setPropertyOnAllAudioRenderPipelines(v97, (uint64_t)v96, v92);
    }
    if (CFEqual(a3, @"DisplayNonForcedSubtitles"))
    {
      itemfig_setDisplayNonForcedSubtitlesEnabled((uint64_t)a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
      playerfig_updateClosedCaptionsDisplayForItem(*(const void **)(v10 + 8), (uint64_t)a1);
      playerfig_updateSubtitleDisplayForItem(*(void *)(v10 + 8), a1);
      playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(*(void *)(v10 + 8), a1);
      return 0;
    }
    if (CFEqual(a3, @"AutomaticallyLoadedAssetProperties"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v243 = CFGetTypeID(a4);
      if (v243 != CFArrayGetTypeID()) {
        goto LABEL_60;
      }
      if (!*(void *)(v10 + 8)) {
        return 0;
      }
      MEMORY[0x19970E290](*(void *)(v11 + 496));
      v244 = *(const void **)(v10 + 1224);
      *(void *)(v10 + 1224) = a4;
      goto LABEL_659;
    }
    if (CFEqual(a3, @"AutomaticallyLoadedAssetTrackProperties"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v245 = CFGetTypeID(a4);
      if (v245 != CFArrayGetTypeID()) {
        goto LABEL_60;
      }
      if (!*(void *)(v10 + 8)) {
        return 0;
      }
      MEMORY[0x19970E290](*(void *)(v11 + 496));
      v244 = *(const void **)(v10 + 1232);
      *(void *)(v10 + 1232) = a4;
LABEL_659:
      CFRetain(a4);
      if (v244) {
        CFRelease(v244);
      }
      goto LABEL_33;
    }
    if (CFEqual(a3, @"ServiceIdentifier"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v246 = CFStringGetTypeID();
      if (v246 != CFGetTypeID(a4)) {
        goto LABEL_60;
      }
      v247 = *(const void **)(v10 + 1280);
      *(void *)(v10 + 1280) = a4;
      goto LABEL_701;
    }
    if (CFEqual(a3, @"ForceEnableAccessLog"))
    {
      if (a4)
      {
        CFTypeID v248 = CFGetTypeID(a4);
        if (v248 == CFBooleanGetTypeID())
        {
          uint64_t result = 0;
          *(unsigned char *)(v10 + 1697) = *MEMORY[0x1E4F1CFD0] == (void)a4;
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"OutOfBandTextRenderingVideoDimensions"))
    {
      if (a4)
      {
        CFTypeID v249 = CFGetTypeID(a4);
        if (v249 == CFDictionaryGetTypeID() && CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)(v10 + 1880)))
        {
          uint64_t result = 0;
          *(unsigned char *)(v10 + 1872) = 1;
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"PlayHapticTracks"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v250 = CFGetTypeID(a4);
      if (v250 != CFBooleanGetTypeID()) {
        goto LABEL_60;
      }
      *(unsigned char *)(v10 + 1023) = *MEMORY[0x1E4F1CFD0] == (void)a4;
      if (!*(void *)(v10 + 352)) {
        return 0;
      }
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v251 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"HapticPlaybackLocality"))
    {
      if (a4)
      {
        CFTypeID v252 = CFGetTypeID(a4);
        if (v252 != CFStringGetTypeID()) {
          goto LABEL_60;
        }
        v247 = *(const void **)(v10 + 1032);
        *(void *)(v10 + 1032) = a4;
        goto LABEL_701;
      }
      v247 = *(const void **)(v10 + 1032);
      *(void *)(v10 + 1032) = 0;
      goto LABEL_790;
    }
    if (CFEqual(a3, @"AudioSpatializationAllowed"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v253 = CFGetTypeID(a4);
      if (v253 != CFBooleanGetTypeID()) {
        goto LABEL_60;
      }
      *(unsigned char *)(v10 + 1392) = *MEMORY[0x1E4F1CFD0] == (void)a4;
      uint64_t result = itemfig_wantsDifferentSpatializationConfiguration((uint64_t)a1);
      if (!result) {
        return result;
      }
      if (dword_1E9350BF0)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v254 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"StereoAudioSpatializationAllowed"))
    {
      if (!a4) {
        goto LABEL_60;
      }
      CFTypeID v255 = CFGetTypeID(a4);
      if (v255 != CFBooleanGetTypeID()) {
        goto LABEL_60;
      }
      *(unsigned char *)(v10 + 1394) = 1;
      *(unsigned char *)(v10 + 1393) = *MEMORY[0x1E4F1CFD0] == (void)a4;
      uint64_t result = itemfig_wantsDifferentSpatializationConfiguration((uint64_t)a1);
      if (!result) {
        return result;
      }
      if (dword_1E9350BF0)
      {
        LODWORD(start.value) = 0;
        LOBYTE(type.value) = 0;
        v256 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v67 = *(const void **)(v10 + 8);
      *(_OWORD *)&valuePtr[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      valuePtr[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      CMTime time2 = valuePtr[0].start;
      goto LABEL_114;
    }
    if (CFEqual(a3, @"CoordinationIdentifier"))
    {
      if (a4)
      {
        CFTypeID v257 = CFGetTypeID(a4);
        if (v257 != CFStringGetTypeID()) {
          goto LABEL_60;
        }
      }
      if (FigCFEqual()) {
        return 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      v247 = *(const void **)(v10 + 2032);
      *(void *)(v10 + 2032) = a4;
      if (a4) {
LABEL_701:
      }
        CFRetain(a4);
LABEL_790:
      if (v247) {
        CFRelease(v247);
      }
      return 0;
    }
    if (CFEqual(a3, @"ParticipatesInCoordinatedPlayback"))
    {
      if (a4)
      {
        CFTypeID v258 = CFGetTypeID(a4);
        if (v258 == CFBooleanGetTypeID())
        {
          uint64_t result = 0;
          *(unsigned char *)(v10 + 2040) = *MEMORY[0x1E4F1CFD0] == (void)a4;
          return result;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"VideoSlotUsage"))
    {
      if (a4)
      {
        CFTypeID v259 = CFGetTypeID(a4);
        if (v259 == CFArrayGetTypeID())
        {
          itemfig_updateVideoSlotUsage((uint64_t)a1, a4);
          return 0;
        }
      }
      goto LABEL_60;
    }
    if (CFEqual(a3, @"TransientTimebaseForCoordinatedPlaybackSynchronization"))
    {
      if (a4)
      {
        CFTypeID v260 = CFGetTypeID(a4);
        if (v260 != CMTimebaseGetTypeID()) {
          goto LABEL_60;
        }
        v261 = *(const void **)(v10 + 344);
        *(void *)(v10 + 344) = a4;
        CFRetain(a4);
      }
      else
      {
        v261 = *(const void **)(v10 + 344);
        *(void *)(v10 + 344) = 0;
      }
      if (v261) {
        CFRelease(v261);
      }
      if (a4)
      {
        if (!dword_1E9350BF0) {
          return 0;
        }
      }
      else if (!dword_1E9350BF0)
      {
        return 0;
      }
      LODWORD(start.value) = 0;
      LOBYTE(type.value) = 0;
      v280 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT);
      goto LABEL_71;
    }
    if (CFEqual(a3, @"RTCReportingCategory"))
    {
      if (!a4) {
        return 0;
      }
      CFTypeID v262 = CFGetTypeID(a4);
      if (v262 != CFStringGetTypeID()) {
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(v10 + 1896));
      v263 = *(const void **)(v10 + 1912);
      *(void *)(v10 + 1912) = a4;
      CFRetain(a4);
      if (v263) {
        CFRelease(v263);
      }
      uint64_t v264 = *(void *)(v10 + 1904);
      if (v264) {
        FigReportingAgentStatsSetCFTypeValue(v264, 0x1EE582B78, 0x1EE578EF8, *(void *)(v10 + 1912));
      }
      goto LABEL_726;
    }
    if (CFEqual(a3, @"ClientReportingValues"))
    {
      if (!a4) {
        return 0;
      }
      CFTypeID v265 = CFGetTypeID(a4);
      if (v265 != CFDictionaryGetTypeID()) {
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(v10 + 1896));
      FigReportingAgentSetStatsForAllKeys(*(void *)(v10 + 1904), 0x1EE582B78);
LABEL_726:
      uint64_t v107 = *(void *)(v10 + 1896);
      goto LABEL_199;
    }
    if (CFEqual(a3, @"ArtificiallyDelayPreparingItemForTestingOnly"))
    {
      FigCFNumberGetFloat64();
      uint64_t result = 0;
      *(void *)(v10 + 2064) = v266;
      return result;
    }
    if (CFEqual(a3, @"SpeedRampData"))
    {
      if (!*(unsigned char *)(v11 + 1107)) {
        return 0;
      }
      if (a4)
      {
        CFTypeID v267 = CFGetTypeID(a4);
        if (v267 != CFDataGetTypeID() || !FigSpeedRampDataIsValid(a4)) {
          goto LABEL_60;
        }
        v268 = *(const void **)(v10 + 2072);
        if (v268)
        {
          CFRelease(v268);
          *(void *)(v10 + 2072) = 0;
        }
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        *(void *)(v10 + 2072) = CFDataCreateCopy(AllocatorForMedia, a4);
      }
      else
      {
        v281 = *(const void **)(v10 + 2072);
        if (v281)
        {
          CFRelease(v281);
          *(void *)(v10 + 2072) = 0;
        }
      }
      itemfig_updateSpeedRampDataOnAllRenderPipelines();
      return 0;
    }
    if (CFEqual(a3, @"OverlapRange"))
    {
      if (a4)
      {
        CFTypeID v270 = CFGetTypeID(a4);
        if (v270 != CFDictionaryGetTypeID()) {
          goto LABEL_60;
        }
        v271 = *(const void **)(v10 + 2080);
        *(void *)(v10 + 2080) = a4;
        CFRetain(a4);
        if (v271) {
          CFRelease(v271);
        }
      }
      else
      {
        v282 = *(const void **)(v10 + 2080);
        if (v282)
        {
          CFRelease(v282);
          *(void *)(v10 + 2080) = 0;
        }
      }
      itemfig_updateOverlapRangeOnAllRenderPipelines();
      return 0;
    }
    if (CFEqual(a3, @"AssetDownloadedName"))
    {
      MEMORY[0x19970E910](*(void *)(v10 + 2096));
      if (!a4 || (CFTypeID v272 = CFGetTypeID(a4), v272 != CFStringGetTypeID()))
      {
LABEL_752:
        uint64_t v107 = *(void *)(v10 + 2096);
        goto LABEL_199;
      }
      v273 = *(const void **)(v10 + 2112);
      *(void *)(v10 + 2112) = a4;
    }
    else
    {
      if (!CFEqual(a3, @"AssetDownloadedImageData"))
      {
        if (!CFEqual(a3, @"PriorImageQueueGauge")) {
          return 4294954512;
        }
        if (a4)
        {
          CFTypeID v275 = CFGetTypeID(a4);
          if (v275 != FigImageQueueGaugeGetTypeID()) {
            return 0;
          }
          v276 = *(const void **)(v10 + 2144);
          *(void *)(v10 + 2144) = a4;
          CFRetain(a4);
        }
        else
        {
          v276 = *(const void **)(v10 + 2144);
          *(void *)(v10 + 2144) = 0;
        }
        if (v276) {
          CFRelease(v276);
        }
        itemfig_updatePriorImageQueueGaugeOnRenderPipelines((uint64_t)a1);
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(v10 + 2096));
      if (!a4) {
        goto LABEL_752;
      }
      CFTypeID v274 = CFGetTypeID(a4);
      if (v274 != CFDataGetTypeID()) {
        goto LABEL_752;
      }
      v273 = *(const void **)(v10 + 2120);
      *(void *)(v10 + 2120) = a4;
    }
    CFRetain(a4);
    if (v273) {
      CFRelease(v273);
    }
    goto LABEL_752;
  }
  if (!a1) {
    goto LABEL_60;
  }
  if (!a4) {
    goto LABEL_60;
  }
  CFTypeID v12 = CFDictionaryGetTypeID();
  if (v12 != CFGetTypeID(a4)) {
    goto LABEL_60;
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_RampInDuration");
  if (v14)
  {
    CFNumberRef v15 = v14;
    CFTypeID v16 = CFNumberGetTypeID();
    if (v16 == CFGetTypeID(v15))
    {
      *(_DWORD *)(v13 + 1292) = 0;
      CFNumberGetValue(v15, kCFNumberFloatType, (void *)(v13 + 1292));
      float v17 = *(float *)(v13 + 1292);
      int v18 = 0;
      if (v17 < 0.0)
      {
LABEL_11:
        *(_DWORD *)(v13 + 1292) = v18;
        goto LABEL_12;
      }
      if (v17 > 0.8)
      {
        int v18 = 1061997773;
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_RampOutDuration");
  if (v19)
  {
    CFNumberRef v20 = v19;
    CFTypeID v21 = CFNumberGetTypeID();
    if (v21 == CFGetTypeID(v20))
    {
      *(_DWORD *)(v13 + 1296) = 0;
      CFNumberGetValue(v20, kCFNumberFloatType, (void *)(v13 + 1296));
      float v22 = *(float *)(v13 + 1296);
      int v23 = 0;
      if (v22 < 0.0)
      {
LABEL_17:
        *(_DWORD *)(v13 + 1296) = v23;
        goto LABEL_18;
      }
      if (v22 > 0.8)
      {
        int v23 = 1061997773;
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_GaplessHeuristicInfo");
  if (v24)
  {
    CFNumberRef v25 = v24;
    CFTypeID v26 = CFNumberGetTypeID();
    if (v26 == CFGetTypeID(v25))
    {
      valuePtr[0].start.CMTimeValue value = 0;
      CFNumberGetValue(v25, kCFNumberSInt64Type, valuePtr);
      *(_DWORD *)(v13 + 880) = valuePtr[0].start.value;
    }
  }
  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_GaplessEncodingDelayInFrames");
  if (v27 && (CFNumberRef v28 = v27, v29 = CFNumberGetTypeID(), v29 == CFGetTypeID(v28)))
  {
    CFNumberGetValue(v28, kCFNumberSInt32Type, (void *)(v13 + 884));
    int v30 = 1;
  }
  else
  {
    int v30 = 0;
  }
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_GaplessEncodingDrainInFrames");
  if (v33)
  {
    CFNumberRef v34 = v33;
    CFTypeID v35 = CFNumberGetTypeID();
    if (v35 == CFGetTypeID(v34))
    {
      CFNumberGetValue(v34, kCFNumberSInt32Type, (void *)(v13 + 888));
      int v30 = 1;
    }
  }
  CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_GaplessDurationInFrames");
  if (v36)
  {
    CFNumberRef v37 = v36;
    CFTypeID v38 = CFNumberGetTypeID();
    if (v38 == CFGetTypeID(v37))
    {
      CFNumberGetValue(v37, kCFNumberSInt64Type, (void *)(v13 + 896));
      int v30 = 1;
    }
  }
  CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_GaplessLastPacketsResync");
  if (v39)
  {
    CFNumberRef v40 = v39;
    CFTypeID v41 = CFNumberGetTypeID();
    if (v41 == CFGetTypeID(v40))
    {
      CFNumberGetValue(v40, kCFNumberSInt64Type, (void *)(v13 + 904));
      int v30 = 1;
    }
  }
  CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_AudibleDRMGroupID");
  if (v42)
  {
    CFNumberRef v43 = v42;
    CFTypeID v44 = CFNumberGetTypeID();
    if (v44 == CFGetTypeID(v43))
    {
      valuePtr[0].start.CMTimeValue value = 0;
      CFNumberGetValue(v43, kCFNumberSInt64Type, valuePtr);
      *(_DWORD *)(v13 + 912) = valuePtr[0].start.value;
    }
  }
  CFBooleanRef v45 = (const __CFBoolean *)CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_LookForLyrics");
  if (v45)
  {
    CFBooleanRef v46 = v45;
    CFTypeID v47 = CFBooleanGetTypeID();
    if (v47 == CFGetTypeID(v46))
    {
      if (CFBooleanGetValue(v46))
      {
        if (*(void *)(v13 + 968)) {
          itemfig_lookForLyrics((uint64_t)a1);
        }
        else {
          *(unsigned char *)(v13 + 952) = 1;
        }
      }
    }
  }
  if (!v30) {
    return 0;
  }
  uint64_t v50 = *(const void **)(v13 + 920);
  if (v50)
  {
    CFRelease(v50);
    *(void *)(v13 + 920) = 0;
  }
  int v51 = *(_DWORD *)(v13 + 888);
  uint64_t v52 = *(void *)(v13 + 896);
  if (*(void *)(v13 + 884) || (v51 = 0, uint64_t result = 0, v52))
  {
    CFMutableDictionaryRef v53 = FigGaplessInfoCreateForLaterEnhancement(*(_DWORD *)(v13 + 884), v51, v52);
    *(void *)(v13 + 920) = v53;
    if (!v53)
    {
      LODWORD(start.value) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
LABEL_71:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

uint64_t itemfig_startCachePrimingWithDownloadToken(uint64_t a1, const __CFNumber *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v20 = 0;
  uint64_t valuePtr = 0;
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  if (*(void *)(DerivedStorage + 1344)) {
    goto LABEL_30;
  }
  uint64_t v4 = DerivedStorage;
  CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
  uint64_t v5 = FigAssetCopyAssetWithDownloadToken(valuePtr, (uint64_t *)&v20);
  if (v5) {
    goto LABEL_20;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v20);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
  if (!v9) {
    goto LABEL_21;
  }
  uint64_t v10 = *MEMORY[0x1E4F1CF80];
  uint64_t v5 = v9(CMBaseObject, @"assetProperty_ContentByteStream", *MEMORY[0x1E4F1CF80], &v19);
  if (v5)
  {
LABEL_20:
    uint64_t v16 = v5;
    goto LABEL_22;
  }
  uint64_t v11 = FigAssetGetCMBaseObject(*(void *)(v4 + 1216));
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFNumberRef v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
  if (!v14)
  {
LABEL_21:
    uint64_t v16 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v5 = v14(v11, @"assetProperty_ContentByteStream", v10, &cf);
  if (v5) {
    goto LABEL_20;
  }
  if (!v19
    || (CMByteStreamGetCMBaseObject(), FigCRABSGetClassID(), !CMBaseObjectIsMemberOfClass())
    || !cf
    || (CMByteStreamGetCMBaseObject(), FigCRABSGetClassID(), !CMBaseObjectIsMemberOfClass()))
  {
LABEL_30:
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_20;
  }
  CFNumberRef v15 = (uint64_t *)(v4 + 1344);
  uint64_t v5 = FigCRABSCachePrimerCreate(v10, v19, cf, v15);
  if (v5) {
    goto LABEL_20;
  }
  if (*v15)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    uint64_t v5 = FigCRABSCachePrimerStart((dispatch_queue_t *)*v15);
    goto LABEL_20;
  }
  uint64_t v16 = 0;
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

uint64_t itemfig_setChosenAlternateTrackIDsFromDictionary(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(const void **)(DerivedStorage + 8);
  unsigned int valuePtr = 0;
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue(a2, @"Audio");
      if (Value)
      {
        CFTypeID v9 = CFNumberGetTypeID();
        if (v9 == CFGetTypeID((CFTypeRef)Value))
        {
          CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
          uint64_t Value = valuePtr;
        }
        else
        {
          uint64_t Value = 0;
        }
      }
      uint64_t v17 = (uint64_t)CFDictionaryGetValue(a2, @"Subtitle");
      if (v17)
      {
        CFTypeID v18 = CFNumberGetTypeID();
        if (v18 == CFGetTypeID((CFTypeRef)v17))
        {
          CFNumberGetValue((CFNumberRef)v17, kCFNumberSInt32Type, &valuePtr);
          uint64_t v17 = valuePtr;
        }
        else
        {
          uint64_t v17 = 0;
        }
      }
      if (!(Value | v17)) {
        return 0;
      }
      if (*(void *)(v6 + 352))
      {
        if (*(_DWORD *)(v6 + 996) != Value)
        {
          if (fp_getTrackIDMediaType(*(void *)(v6 + 968), Value) == 1936684398)
          {
            *(_DWORD *)(v6 + 996) = Value;
            if (dword_1E9350BF0 < 2)
            {
              int v30 = 1;
            }
            else
            {
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              int v30 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
LABEL_29:
            if (*(_DWORD *)(v6 + 1016) != v17)
            {
              int TrackIDMediaType = fp_getTrackIDMediaType(*(void *)(v6 + 968), v17);
              if (TrackIDMediaType != 1935832172 && TrackIDMediaType != 1952807028)
              {
                CFTypeID v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
                goto LABEL_38;
              }
              *(_DWORD *)(v6 + 1016) = v17;
              if (TrackIDMediaType == 1952807028)
              {
                if (dword_1E9350BF0 >= 2)
                {
LABEL_34:
                  CFNumberRef v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
                  int v30 = 1;
LABEL_38:
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  goto LABEL_39;
                }
              }
              else if (dword_1E9350BF0 >= 2)
              {
                goto LABEL_34;
              }
              int v30 = 1;
            }
LABEL_39:
            if (*(_DWORD *)(v6 + 1040))
            {
              if (fp_getTrackIDMediaType(*(void *)(v6 + 968), 0) == 1751216244)
              {
                *(_DWORD *)(v6 + 1040) = 0;
                if (dword_1E9350BF0 >= 2)
                {
                  CFNumberRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                goto LABEL_45;
              }
              CFNumberRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v30)
            {
LABEL_45:
              long long v34 = *MEMORY[0x1E4F1F9F8];
              uint64_t v35 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
              long long v36 = v34;
              uint64_t v37 = v35;
              playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v5, (uint64_t)&v34, (uint64_t)&v36, 0);
              goto LABEL_46;
            }
            return 0;
          }
          float v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        int v30 = 0;
        goto LABEL_29;
      }
      uint64_t v20 = *(void *)(v6 + 968);
      if (!v20)
      {
        *(_DWORD *)(v6 + 996) = Value;
        *(_DWORD *)(v6 + 1016) = v17;
        *(_DWORD *)(v6 + 1040) = 0;
        return 0;
      }
      if (*(_DWORD *)(v6 + 996) != Value)
      {
        if (fp_getTrackIDMediaType(v20, Value) == 1936684398)
        {
          *(_DWORD *)(v6 + 996) = Value;
          int v21 = 1;
          goto LABEL_50;
        }
        int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v21 = 0;
LABEL_50:
      if (*(_DWORD *)(v6 + 1016) != v17)
      {
        if (fp_getTrackIDMediaType(*(void *)(v6 + 968), v17) == 1935832172)
        {
          *(_DWORD *)(v6 + 1016) = v17;
          int v21 = 1;
        }
        else
        {
          uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      if (*(_DWORD *)(v6 + 1040))
      {
        if (fp_getTrackIDMediaType(*(void *)(v6 + 968), 0) == 1751216244)
        {
          *(_DWORD *)(v6 + 1040) = 0;
          goto LABEL_46;
        }
        CFTypeID v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!v21) {
        return 0;
      }
LABEL_46:
      NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v5, a1, v11, v12, v13, v14, v15, v16, @"SelectedMediaArray", 0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (NotificationPayloadForProperties) {
        CFRelease(NotificationPayloadForProperties);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t itemfig_setVideoCompositionProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  CFTypeRef v103 = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v50 = FigSignalErrorAt();
    goto LABEL_240;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  int v6 = CFDictionaryContainsKey(a2, @"VideoCompositorFrameDuration");
  uint64_t v7 = (CMTime *)MEMORY[0x1E4F1FA48];
  uint64_t v101 = v5;
  if (!v6) {
    goto LABEL_10;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"VideoCompositorFrameDuration");
  CMTimeMakeFromDictionary(&time1[0].start, Value);
  valuePtr.CMTimeValue value = time1[0].start.value;
  CMTimeFlags flags = time1[0].start.flags;
  valuePtr.CMTimeScale timescale = time1[0].start.timescale;
  if ((time1[0].start.flags & 0x1D) != 1) {
    goto LABEL_250;
  }
  CMTimeEpoch epoch = time1[0].start.epoch;
  time1[0].start.CMTimeValue value = valuePtr.value;
  time1[0].start.CMTimeScale timescale = valuePtr.timescale;
  CMTime time2 = *v7;
  if (CMTimeCompare(&time1[0].start, &time2) < 1 || epoch) {
    goto LABEL_250;
  }
  *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 692);
  time1[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 708);
  time2.CMTimeValue value = valuePtr.value;
  time2.CMTimeScale timescale = valuePtr.timescale;
  time2.CMTimeFlags flags = flags;
  time2.CMTimeEpoch epoch = 0;
  if (!CMTimeCompare(&time1[0].start, &time2)) {
    goto LABEL_10;
  }
  *(void *)(DerivedStorage + 692) = valuePtr.value;
  *(_DWORD *)(DerivedStorage + 700) = valuePtr.timescale;
  *(_DWORD *)(DerivedStorage + 704) = flags;
  *(void *)(DerivedStorage + 708) = 0;
  if (*(void *)(DerivedStorage + 352))
  {
    if (dword_1E9350BF0 < 2)
    {
      int v16 = 1;
    }
    else
    {
      LODWORD(v105.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      int v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
LABEL_10:
    int v16 = 0;
  }
  if (CFDictionaryContainsKey(a2, @"VideoCompositorSourceTrackIDForFrameTiming"))
  {
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"VideoCompositorSourceTrackIDForFrameTiming");
    if (!v12) {
      goto LABEL_250;
    }
    CFNumberRef v13 = v12;
    CFTypeID v14 = CFGetTypeID(v12);
    if (v14 != CFNumberGetTypeID()) {
      goto LABEL_250;
    }
    valuePtr.CMTimeValue value = 0;
    CFNumberGetValue(v13, kCFNumberCFIndexType, &valuePtr);
    if (*(_DWORD *)(DerivedStorage + 716) != LODWORD(valuePtr.value))
    {
      *(_DWORD *)(DerivedStorage + 716) = valuePtr.value;
      if (*(void *)(DerivedStorage + 352))
      {
        if (dword_1E9350BF0 < 2)
        {
          int v16 = 1;
        }
        else
        {
          LODWORD(v105.value) = 0;
          int v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          int v16 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  if (CFDictionaryContainsKey(a2, @"VideoCompositorRenderDimensions"))
  {
    *(_OWORD *)&valuePtr.CMTimeValue value = 0uLL;
    CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"VideoCompositorRenderDimensions");
    if (!v17) {
      goto LABEL_250;
    }
    CFDictionaryRef v18 = v17;
    CFTypeID v19 = CFGetTypeID(v17);
    if (v19 != CFDictionaryGetTypeID() || !CGSizeMakeWithDictionaryRepresentation(v18, (CGSize *)&valuePtr)) {
      goto LABEL_250;
    }
    MEMORY[0x19970E290](*(void *)(v5 + 496));
    if (*(double *)(DerivedStorage + 720) == *(double *)&valuePtr.value
      && *(double *)(DerivedStorage + 728) == *(double *)&valuePtr.timescale)
    {
      MEMORY[0x19970E2B0](*(void *)(v5 + 496));
    }
    else
    {
      *(_OWORD *)(DerivedStorage + 720) = *(_OWORD *)&valuePtr.value;
      uint64_t v20 = *(void *)(DerivedStorage + 352);
      MEMORY[0x19970E2B0](*(void *)(v5 + 496));
      if (v20)
      {
        if (dword_1E9350BF0 < 2)
        {
          int v16 = 1;
        }
        else
        {
          LODWORD(v105.value) = 0;
          int v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          int v16 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  if (CFDictionaryContainsKey(a2, @"VideoCompositorRenderScale"))
  {
    LODWORD(valuePtr.value) = 1065353216;
    CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a2, @"VideoCompositorRenderScale");
    if (!v22) {
      goto LABEL_250;
    }
    CFNumberRef v23 = v22;
    CFTypeID v24 = CFGetTypeID(v22);
    if (v24 != CFNumberGetTypeID()) {
      goto LABEL_250;
    }
    CFNumberGetValue(v23, kCFNumberFloatType, &valuePtr);
    if (*(float *)(DerivedStorage + 736) != *(float *)&valuePtr.value)
    {
      *(_DWORD *)(DerivedStorage + 736) = valuePtr.value;
      if (*(void *)(DerivedStorage + 352))
      {
        if (dword_1E9350BF0 < 2)
        {
          int v16 = 1;
        }
        else
        {
          LODWORD(v105.value) = 0;
          CFNumberRef v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          int v16 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  int v26 = CFDictionaryContainsKey(a2, @"VideoCompositorColorPrimaries");
  CFNumberRef v27 = (const void **)MEMORY[0x1E4F1D260];
  if (v26)
  {
    CFNumberRef v28 = CFDictionaryGetValue(a2, @"VideoCompositorColorPrimaries");
    CFTypeID v29 = v28 == *v27 ? 0 : v28;
    if (!FigCFEqual())
    {
      if (v29)
      {
        CFTypeID v54 = CFGetTypeID(v29);
        if (v54 != CFStringGetTypeID()) {
          goto LABEL_250;
        }
        CFTypeID v55 = *(const void **)(DerivedStorage + 744);
        *(void *)(DerivedStorage + 744) = v29;
        CFRetain(v29);
        if (!v55) {
          goto LABEL_107;
        }
      }
      else
      {
        CFTypeID v55 = *(const void **)(DerivedStorage + 744);
        *(void *)(DerivedStorage + 744) = 0;
        if (!v55)
        {
LABEL_107:
          if (*(void *)(DerivedStorage + 352))
          {
            if (dword_1E9350BF0 < 2)
            {
              int v16 = 1;
            }
            else
            {
              LODWORD(valuePtr.value) = 0;
              LOBYTE(v105.value) = 0;
              CFAllocatorRef v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v57 = valuePtr.value;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v58 = v57;
              }
              else {
                unsigned int v58 = v57 & 0xFFFFFFFE;
              }
              if (v58)
              {
                LODWORD(time2.value) = 136315138;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
                _os_log_send_and_compose_impl();
              }
              int v16 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          goto LABEL_44;
        }
      }
      CFRelease(v55);
      goto LABEL_107;
    }
  }
LABEL_44:
  if (!CFDictionaryContainsKey(a2, @"VideoCompositorColorYCbCrMatrix")) {
    goto LABEL_49;
  }
  int v30 = CFDictionaryGetValue(a2, @"VideoCompositorColorYCbCrMatrix");
  uint64_t v31 = v30 == *v27 ? 0 : v30;
  if (FigCFEqual()) {
    goto LABEL_49;
  }
  if (v31)
  {
    CFTypeID v59 = CFGetTypeID(v31);
    if (v59 != CFStringGetTypeID()) {
      goto LABEL_250;
    }
    uint64_t v60 = *(const void **)(DerivedStorage + 752);
    *(void *)(DerivedStorage + 752) = v31;
    CFRetain(v31);
    if (!v60) {
      goto LABEL_118;
    }
    goto LABEL_117;
  }
  uint64_t v60 = *(const void **)(DerivedStorage + 752);
  *(void *)(DerivedStorage + 752) = 0;
  if (v60) {
LABEL_117:
  }
    CFRelease(v60);
LABEL_118:
  if (*(void *)(DerivedStorage + 352))
  {
    if (dword_1E9350BF0 < 2)
    {
      int v16 = 1;
    }
    else
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(v105.value) = 0;
      uint64_t v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v62 = valuePtr.value;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v63 = v62;
      }
      else {
        unsigned int v63 = v62 & 0xFFFFFFFE;
      }
      if (v63)
      {
        LODWORD(time2.value) = 136315138;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
        _os_log_send_and_compose_impl();
      }
      int v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_49:
  if (!CFDictionaryContainsKey(a2, @"VideoCompositorColorTransferFunction")) {
    goto LABEL_54;
  }
  CFTypeID v32 = CFDictionaryGetValue(a2, @"VideoCompositorColorTransferFunction");
  CFNumberRef v33 = v32 == *v27 ? 0 : v32;
  if (FigCFEqual()) {
    goto LABEL_54;
  }
  if (v33)
  {
    CFTypeID v64 = CFGetTypeID(v33);
    if (v64 != CFStringGetTypeID()) {
      goto LABEL_250;
    }
    uint64_t v65 = *(const void **)(DerivedStorage + 760);
    *(void *)(DerivedStorage + 760) = v33;
    CFRetain(v33);
    if (!v65) {
      goto LABEL_129;
    }
    goto LABEL_128;
  }
  uint64_t v65 = *(const void **)(DerivedStorage + 760);
  *(void *)(DerivedStorage + 760) = 0;
  if (v65) {
LABEL_128:
  }
    CFRelease(v65);
LABEL_129:
  if (*(void *)(DerivedStorage + 352))
  {
    if (dword_1E9350BF0 < 2)
    {
      int v16 = 1;
    }
    else
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(v105.value) = 0;
      CFDictionaryRef v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v67 = valuePtr.value;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v68 = v67;
      }
      else {
        unsigned int v68 = v67 & 0xFFFFFFFE;
      }
      if (v68)
      {
        LODWORD(time2.value) = 136315138;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
        _os_log_send_and_compose_impl();
      }
      int v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_54:
  if (!CFDictionaryContainsKey(a2, @"VideoCompositorHDRDisplayMetadataPolicy")) {
    goto LABEL_59;
  }
  long long v34 = CFDictionaryGetValue(a2, @"VideoCompositorHDRDisplayMetadataPolicy");
  uint64_t v35 = v34 == *v27 ? 0 : v34;
  if (FigCFEqual()) {
    goto LABEL_59;
  }
  if (v35)
  {
    CFTypeID v69 = CFGetTypeID(v35);
    if (v69 != CFStringGetTypeID()) {
      goto LABEL_250;
    }
    long long v70 = *(const void **)(DerivedStorage + 768);
    *(void *)(DerivedStorage + 768) = v35;
    CFRetain(v35);
    if (!v70) {
      goto LABEL_140;
    }
    goto LABEL_139;
  }
  long long v70 = *(const void **)(DerivedStorage + 768);
  *(void *)(DerivedStorage + 768) = 0;
  if (v70) {
LABEL_139:
  }
    CFRelease(v70);
LABEL_140:
  if (*(void *)(DerivedStorage + 352))
  {
    if (dword_1E9350BF0 < 2)
    {
      int v16 = 1;
    }
    else
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(v105.value) = 0;
      uint64_t v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v72 = valuePtr.value;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v73 = v72;
      }
      else {
        unsigned int v73 = v72 & 0xFFFFFFFE;
      }
      if (v73)
      {
        LODWORD(time2.value) = 136315138;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
        _os_log_send_and_compose_impl();
      }
      int v16 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_59:
  if (CFDictionaryContainsKey(a2, @"VideoCompositorSourceSampleDataTrackIDs"))
  {
    long long v36 = CFDictionaryGetValue(a2, @"VideoCompositorSourceSampleDataTrackIDs");
    if (v36 == *v27) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = v36;
    }
    if (v37)
    {
      CFTypeID v38 = CFGetTypeID(v37);
      if (v38 != CFArrayGetTypeID()) {
        goto LABEL_255;
      }
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 776));
    CFNumberRef v39 = *(const void **)(DerivedStorage + 784);
    *(void *)(DerivedStorage + 784) = v37;
    if (v37) {
      CFRetain(v37);
    }
    if (v39) {
      CFRelease(v39);
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 776));
  }
  if (CFDictionaryContainsKey(a2, @"VideoCompositorSourceVideoTrackWindows"))
  {
    CFNumberRef v40 = CFDictionaryGetValue(a2, @"VideoCompositorSourceVideoTrackWindows");
    if (v40 == *v27) {
      CFTypeID v41 = 0;
    }
    else {
      CFTypeID v41 = v40;
    }
    if (v41)
    {
      CFTypeID v42 = CFGetTypeID(v41);
      if (v42 != CFArrayGetTypeID()) {
        goto LABEL_255;
      }
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 776));
    if (!FigVideoCompositionWindowSerializedConfigurationForTracksEqual(*(CFTypeRef *)(DerivedStorage + 792), v41))
    {
      CFNumberRef v43 = *(const void **)(DerivedStorage + 792);
      *(void *)(DerivedStorage + 792) = v41;
      if (v41) {
        CFRetain(v41);
      }
      if (v43) {
        CFRelease(v43);
      }
      int v16 = 1;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 776));
  }
  if (!CFDictionaryContainsKey(a2, @"VideoCompositorSourceSampleDataTrackWindows")) {
    goto LABEL_96;
  }
  CFTypeID v44 = CFDictionaryGetValue(a2, @"VideoCompositorSourceSampleDataTrackWindows");
  if (v44 == *v27) {
    CFBooleanRef v45 = 0;
  }
  else {
    CFBooleanRef v45 = v44;
  }
  if (!v45 || (CFTypeID v46 = CFGetTypeID(v45), v46 == CFArrayGetTypeID()))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 776));
    if (!FigVideoCompositionWindowSerializedConfigurationForTracksEqual(*(CFTypeRef *)(DerivedStorage + 800), v45))
    {
      CFTypeID v47 = *(const void **)(DerivedStorage + 800);
      *(void *)(DerivedStorage + 800) = v45;
      if (v45) {
        CFRetain(v45);
      }
      if (v47) {
        CFRelease(v47);
      }
      int v16 = 1;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 776));
LABEL_96:
    if (!CFDictionaryContainsKey(a2, @"VideoCompositor")) {
      goto LABEL_213;
    }
    CFTypeID v48 = CFDictionaryGetValue(a2, @"VideoCompositor");
    CFTypeRef v49 = 0;
    uint64_t v50 = 0;
    if (v48)
    {
      BOOL v51 = v48 == *v27;
      uint64_t v52 = v101;
      if (!v51)
      {
        if (CFEqual(v48, @"VideoCompositor_Basic")) {
          goto LABEL_100;
        }
        if (CFEqual(v48, @"VideoCompositor_vImage")) {
          goto LABEL_152;
        }
        if (CFEqual(v48, @"VideoCompositor_Metal")) {
          goto LABEL_170;
        }
        if (CFEqual(v48, @"VideoCompositor_OpenGL")) {
          goto LABEL_180;
        }
        if (CFEqual(v48, @"VideoCompositor_DeviceSpecific"))
        {
          uint64_t v50 = FigVideoCompositorCopyDeviceSpecificCompositorName(0, &v103);
          if (v50)
          {
LABEL_254:
            CFTypeRef v49 = CFRetain(v48);
            goto LABEL_148;
          }
          if (FigCFEqual())
          {
LABEL_100:
            if (*(_DWORD *)(DerivedStorage + 664) == 1 && (CFMutableDictionaryRef v53 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              uint64_t v50 = 0;
              CFTypeRef cf = CFRetain(v53);
            }
            else
            {
              uint64_t v50 = FigVideoCompositorCreateBasic(*MEMORY[0x1E4F1CF80], 0, &cf);
            }
            int v74 = 1;
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
LABEL_152:
            if (*(_DWORD *)(DerivedStorage + 664) == 3 && (int v75 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              uint64_t v50 = 0;
              CFTypeRef cf = CFRetain(v75);
            }
            else
            {
              uint64_t v50 = FigVideoCompositorCreatevImage(*MEMORY[0x1E4F1CF80], 0, &cf);
            }
            int v74 = 3;
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
LABEL_170:
            if (*(_DWORD *)(DerivedStorage + 664) == 4 && (int v76 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              uint64_t v50 = 0;
              CFTypeRef cf = CFRetain(v76);
            }
            else
            {
              uint64_t v50 = FigVideoCompositorCreateMetal(*MEMORY[0x1E4F1CF80], &cf);
            }
            int v74 = 4;
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
LABEL_180:
            if (*(_DWORD *)(DerivedStorage + 664) == 2 && (CFTypeRef v77 = *(const void **)(DerivedStorage + 656)) != 0)
            {
              uint64_t v50 = 0;
              CFTypeRef cf = CFRetain(v77);
            }
            else
            {
              uint64_t v50 = FigVideoCompositorCreateOpenGL((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, &cf);
            }
            int v74 = 2;
            goto LABEL_185;
          }
        }
        else
        {
          FigVideoCompositorGetTypeID();
          CFGetTypeID(v48);
        }
        uint64_t v50 = 0;
        goto LABEL_254;
      }
    }
    else
    {
      uint64_t v52 = v101;
    }
LABEL_148:
    int v74 = 0;
    CFTypeRef cf = v49;
LABEL_185:
    CFTypeRef v78 = cf;
    if (v50 || !cf)
    {
      if (v50) {
        goto LABEL_214;
      }
    }
    else
    {
      LODWORD(time1[0].start.value) = 23;
      CFNumberRef v79 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, time1);
      uint64_t FigBaseObject = FigVideoCompositorGetFigBaseObject(cf);
      uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v81) {
        uint64_t v82 = v81;
      }
      else {
        uint64_t v82 = 0;
      }
      uint64_t v83 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v82 + 56);
      if (v83) {
        v83(FigBaseObject, @"WorkerThreadPriority", v79);
      }
      if (v79) {
        CFRelease(v79);
      }
      CFTypeRef v78 = cf;
    }
    if (*(CFTypeRef *)(DerivedStorage + 656) == v78 || !*(void *)(DerivedStorage + 8)) {
      goto LABEL_210;
    }
    MEMORY[0x19970E290](*(void *)(v52 + 496));
    int v84 = *(const void **)(DerivedStorage + 656);
    CFTypeRef v85 = cf;
    *(void *)(DerivedStorage + 656) = cf;
    if (v85) {
      CFRetain(v85);
    }
    if (v84) {
      CFRelease(v84);
    }
    *(_DWORD *)(DerivedStorage + 664) = v74;
    itemfig_updateHasEnabledVideo();
    MEMORY[0x19970E2B0](*(void *)(v52 + 496));
    if (!*(void *)(DerivedStorage + 352))
    {
LABEL_210:
      uint64_t v50 = 0;
      goto LABEL_214;
    }
    if (dword_1E9350BF0 < 2)
    {
      uint64_t v50 = 0;
      int v16 = 1;
      goto LABEL_214;
    }
    LODWORD(valuePtr.value) = 0;
    LOBYTE(v105.value) = 0;
    int v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v87 = valuePtr.value;
    if (os_log_type_enabled(v86, v105.value)) {
      unsigned int v88 = v87;
    }
    else {
      unsigned int v88 = v87 & 0xFFFFFFFE;
    }
    if (v88)
    {
      LODWORD(time2.value) = 136315138;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"itemfig_setVideoCompositionProperties";
      _os_log_send_and_compose_impl();
    }
    int v16 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_213:
    uint64_t v50 = 0;
    uint64_t v52 = v101;
LABEL_214:
    if (!CFDictionaryContainsKey(a2, @"VideoCompositionInstructionArray"))
    {
LABEL_236:
      if (v16)
      {
        uint64_t v99 = *(const void **)(DerivedStorage + 8);
        *(_OWORD *)&time1[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
        time1[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        CMTime time2 = time1[0].start;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v99, (uint64_t)time1, (uint64_t)&time2, 0);
      }
      goto LABEL_238;
    }
    memset(&time2, 0, sizeof(time2));
    uint64_t v89 = CFDictionaryGetValue(a2, @"VideoCompositionInstructionArray");
    if (v89)
    {
      CFTypeID v90 = v89;
      CFTypeID v91 = CFGetTypeID(v89);
      if (v91 == CFArrayGetTypeID())
      {
        uint64_t Duration = itemfig_GetDuration(a1, (uint64_t)&time2);
        if (Duration)
        {
LABEL_251:
          uint64_t v50 = Duration;
          goto LABEL_238;
        }
        CMTime valuePtr = time2;
        if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) == 1)
        {
          *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 236);
          time1[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 252);
          long long v102 = *MEMORY[0x1E4F1FA48];
          *(_OWORD *)&v105.CMTimeValue value = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v93 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          v105.CMTimeEpoch epoch = v93;
          if ((CMTimeCompare(&time1[0].start, &v105) & 0x80000000) == 0
            && (*(_DWORD *)(DerivedStorage + 272) & 0x1D) == 1)
          {
            *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 260);
            time1[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 276);
            *(_OWORD *)&v105.CMTimeValue value = v102;
            v105.CMTimeEpoch epoch = v93;
            if (CMTimeCompare(&time1[0].start, &v105) >= 1)
            {
              CMTime v105 = valuePtr;
              long long v94 = *(_OWORD *)(DerivedStorage + 252);
              *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 236);
              *(_OWORD *)&time1[0].start.CMTimeEpoch epoch = v94;
              *(_OWORD *)&time1[0].duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 268);
              CMTimeFoldIntoRange(&valuePtr, &v105, time1);
            }
          }
        }
        *(_OWORD *)&time1[0].start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
        time1[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        CMTime v105 = valuePtr;
        if (FigVideoCompositionInstructionArrayIsValid((uint64_t)v90, (uint64_t)time1, (uint64_t)&v105))
        {
          MEMORY[0x19970E910](*(void *)(DerivedStorage + 672));
          uint64_t v95 = *(const void **)(DerivedStorage + 680);
          *(void *)(DerivedStorage + 680) = v90;
          CFRetain(v90);
          if (v95) {
            CFRelease(v95);
          }
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 672));
          uint64_t v96 = *(void *)(DerivedStorage + 808);
          if (v96)
          {
            uint64_t v97 = *(void *)(DerivedStorage + 352);
            if (v97)
            {
              if (!v16)
              {
                if (*(float *)(v52 + 48) == 0.0 || !*(unsigned char *)(DerivedStorage + 688))
                {
                  FigPlaybackBossResetCompositionInstructions(v97, v96, 1, 1);
                  if (dword_1E9350BF0 >= 2)
                  {
                    CFTypeID v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  FigPlaybackBossRefreshVideoComposition(*(void *)(DerivedStorage + 352));
                }
                else
                {
                  FigPlaybackBossResetCompositionInstructions(v97, v96, 0, 0);
                }
              }
            }
          }
          uint64_t v50 = 0;
          goto LABEL_236;
        }
      }
    }
LABEL_250:
    uint64_t Duration = FigSignalErrorAt();
    goto LABEL_251;
  }
LABEL_255:
  FigSignalErrorAt();
  uint64_t v50 = 0;
LABEL_238:
  if (v103) {
    CFRelease(v103);
  }
LABEL_240:
  if (cf) {
    CFRelease(cf);
  }
  return v50;
}

void playerfig_synchronizeLayerToTimebaseWithTransaction(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[106]);
  uint64_t v4 = (const void *)DerivedStorage[107];
  if (v4)
  {
    Timebase = (const void *)FigPlaybackBossGetTimebase(DerivedStorage[44]);
    FigLayerSynchronizerSynchronizeToTimebaseWithDeferredTransaction(v4, Timebase, 0, (uint64_t)"playerfig_synchronizeLayerToTimebaseWithTransaction", a2);
  }

  JUMPOUT(0x19970E930);
}

void itemfig_setCAImageQueueFlagsForApertureMode()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 1104);
  if (v1)
  {
    CFIndex Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      for (CFIndex i = 0; i != v3; ++i)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1104), i);
        CAImageQueueSetFlags();
      }
    }
  }

  JUMPOUT(0x19970E930);
}

uint64_t itemfig_setVisualContextArray(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
  {
    uint64_t v5 = (void *)DerivedStorage;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (a2)
    {
      if (CFArrayGetCount(a2)) {
        CFArrayRef v7 = a2;
      }
      else {
        CFArrayRef v7 = 0;
      }
    }
    else
    {
      CFArrayRef v7 = 0;
    }
    MEMORY[0x19970E910](v5[217]);
    int v8 = FigCFEqual();
    if (!v8)
    {
      CFTypeID v9 = (const void *)v5[216];
      v5[216] = v7;
      if (v7) {
        CFRetain(v7);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    MEMORY[0x19970E930](v5[217]);
    MEMORY[0x19970E290](*(void *)(v6 + 496));
    uint64_t v10 = v5[44];
    uint64_t result = MEMORY[0x19970E2B0](*(void *)(v6 + 496));
    if (!v8 && v10)
    {
      return playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v4, 0, 0);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void itemfig_setTextMarkupArray(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[229] && !CFArrayGetCount(a2)) {
    a2 = 0;
  }
  if (!FigCFEqual())
  {
    uint64_t v4 = (const void *)DerivedStorage[229];
    DerivedStorage[229] = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (DerivedStorage[44])
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      uint64_t v6 = *(void *)(v5 + 584);
      if (!v6) {
        goto LABEL_24;
      }
      uint64_t v7 = DerivedStorage[229];
      if (*(unsigned char *)(v5 + 781))
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        CFNumberRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
        if (v13)
        {
          uint64_t v14 = 0x1EE54F778;
LABEL_23:
          v13(FigBaseObject, v14, v7);
        }
      }
      else
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        CFNumberRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
        if (v13)
        {
          uint64_t v14 = 0x1EE5743D8;
          goto LABEL_23;
        }
      }
LABEL_24:
      uint64_t v15 = DerivedStorage[232];
      if (v15)
      {
        int v16 = (const void *)DerivedStorage[229];
        FigOutOfBandTrackControllerSetProperty(v15, @"TextMarkupArray", v16);
      }
    }
  }
}

void itemfig_setTextHighlightArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    uint64_t v4 = (const void *)DerivedStorage[230];
    DerivedStorage[230] = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (DerivedStorage[44])
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      uint64_t v6 = *(void *)(v5 + 576);
      if (v6)
      {
        uint64_t v7 = DerivedStorage[230];
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v10 = v9 ? v9 : 0;
        uint64_t v11 = *(void (**)(uint64_t, __CFString *, uint64_t))(v10 + 56);
        if (v11) {
          v11(FigBaseObject, @"CCRPP_TextHighlightArray", v7);
        }
      }
      uint64_t v12 = *(void *)(v5 + 584);
      if (!v12) {
        goto LABEL_27;
      }
      int v13 = *(unsigned __int8 *)(v5 + 781);
      uint64_t v14 = DerivedStorage[230];
      if (v13)
      {
        uint64_t v15 = FigRenderPipelineGetFigBaseObject(v12);
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 56);
        if (v20)
        {
          uint64_t v21 = 0x1EE54F798;
LABEL_26:
          v20(v15, v21, v14);
        }
      }
      else
      {
        uint64_t v15 = FigRenderPipelineGetFigBaseObject(v12);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 56);
        if (v20)
        {
          uint64_t v21 = 0x1EE5743F8;
          goto LABEL_26;
        }
      }
LABEL_27:
      uint64_t v22 = DerivedStorage[232];
      if (v22)
      {
        CFNumberRef v23 = (const void *)DerivedStorage[230];
        FigOutOfBandTrackControllerSetProperty(v22, @"TextHighlightArray", v23);
      }
    }
  }
}

void itemfig_setLegibleOutputsDict(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    if (a2 && !CFDictionaryGetCount(a2)) {
      a2 = 0;
    }
    if (!FigCFEqual())
    {
      uint64_t v6 = *(const void **)(DerivedStorage + 1752);
      *(void *)(DerivedStorage + 1752) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v6) {
        CFRelease(v6);
      }
      uint64_t v7 = *(dispatch_queue_t **)(DerivedStorage + 1744);
      if (v7) {
        FigLegibleOutputManagerSetLegibleOutputsDict(v7, *(CFTypeRef *)(DerivedStorage + 1752));
      }
      if (*(void *)(DerivedStorage + 352)) {
        playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(v5);
      }
    }
    CFRelease(v5);
  }
}

uint64_t itemfig_setMetadataOutputsDict(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (const void *)v4;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(v6 + 496));
  Tag = (const void *)FigXMLNodeGetTag(*(void *)(DerivedStorage + 1760));
  if (CFEqual(a2, Tag))
  {
    MEMORY[0x19970E2B0](*(void *)(v6 + 496));
  }
  else
  {
    uint64_t updated = FPSupport_UpdateMetadataOutputs(*(void **)(DerivedStorage + 1760), a2);
    if (updated)
    {
      uint64_t v10 = updated;
      goto LABEL_8;
    }
    uint64_t v9 = *(void *)(DerivedStorage + 352);
    MEMORY[0x19970E2B0](*(void *)(v6 + 496));
    if (v9) {
      playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(v5);
    }
  }
  uint64_t v10 = 0;
LABEL_8:
  CFRelease(v5);
  return v10;
}

void itemfig_setRenderedLegibleOutputsDict(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    if (a2 && !CFDictionaryGetCount(a2)) {
      a2 = 0;
    }
    if (!FigCFEqual())
    {
      uint64_t v6 = *(const void **)(DerivedStorage + 1784);
      *(void *)(DerivedStorage + 1784) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v6) {
        CFRelease(v6);
      }
      uint64_t v7 = *(dispatch_queue_t **)(DerivedStorage + 1776);
      if (v7) {
        FigRenderedLegibleOutputManagerSetRenderedLegibleOutputsDict(v7, *(CFTypeRef *)(DerivedStorage + 1784));
      }
      if (*(void *)(DerivedStorage + 352)) {
        playerfig_rebuildRenderPipelines_disturbIfInLameDuckGap(v5);
      }
    }
    CFRelease(v5);
  }
}

uint64_t itemfig_setSuppressVideoLayers(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(unsigned __int8 *)(DerivedStorage + 1824);
  CFTypeRef cf = 0;
  uint64_t v6 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
  if (v6)
  {
    uint64_t v9 = v6;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v7 || (uint64_t v8 = CMBaseObjectGetDerivedStorage(), *(unsigned char *)v8))
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      *(unsigned char *)(DerivedStorage + 1824) = a2;
      if (*(void *)(DerivedStorage + 352) && v5 != a2)
      {
        if (a2)
        {
          uint64_t v10 = v8;
          MEMORY[0x19970E290](*(void *)(v8 + 496));
          playeritemfig_releaseRenderPipelines(v7, a1, cf);
          MEMORY[0x19970E2B0](*(void *)(v10 + 496));
        }
        uint64_t v9 = playerfig_rebuildRenderPipelines_disturbIfInLameDuckGapOrMainVideoStillEnabled(v7, cf, 0);
      }
    }
  }
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v9;
}

uint64_t itemfig_setSuppressLegibleRendering(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(unsigned __int8 *)(DerivedStorage + 1825);
  int v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  *(unsigned char *)(DerivedStorage + 1825) = a2;
  if (*(void *)(DerivedStorage + 352)) {
    BOOL v7 = v4 == a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    long long v12 = *MEMORY[0x1E4F1F9F8];
    uint64_t v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    long long v10 = v12;
    uint64_t v11 = v13;
    uint64_t v8 = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v5, (uint64_t)&v12, (uint64_t)&v10, 0);
  }
  CFRelease(v6);
  return v8;
}

void itemfig_applyItemAudioCurvesToAllAudioTracks(uint64_t a1)
{
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    CFIndex v3 = (const void *)v2;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    CFArrayRef v5 = *(const __CFArray **)(a1 + 648);
    if (v5)
    {
      CFIndex Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0;
        do
        {
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 648), v8);
            if (ValueAtIndex[1] == 1936684398) {
              break;
            }
            if (++v8 == v7) {
              goto LABEL_12;
            }
          }
          ++v8;
          if (itemfig_applyItemAudioCurvesToTrack(a1, (uint64_t)ValueAtIndex)) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = v8 == v7;
          }
        }
        while (!v10);
      }
    }
LABEL_12:
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t itemfig_wantsDifferentSpatializationConfiguration(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  MEMORY[0x19970E290](*(void *)(v3 + 496));
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 368);
  if (v4 && (CFIndex Count = CFArrayGetCount(v4), Count >= 1))
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
    CFTypeRef v9 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 368), v7);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t v11 = *((void *)ValueAtIndex + 3);
      if (v11)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v14 + 48);
        if (v15) {
          v15(FigBaseObject, @"SpatializationEnabled", v8, &cf);
        }
        if (cf)
        {
          BOOL v16 = cf == v9;
          if (itemfig_shouldEnableSpatializationForTrack(a1, *ValueAtIndex) != v16) {
            break;
          }
        }
      }
      if (v6 == ++v7) {
        goto LABEL_15;
      }
    }
    uint64_t v17 = 1;
  }
  else
  {
LABEL_15:
    uint64_t v17 = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(v3 + 496));
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t itemfig_updateVideoSlotUsage(uint64_t a1, const __CFArray *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(result + 1000);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v27 = 0;
    uint64_t result = itemfig_getTrackStorage(a1, v5, &v27);
    uint64_t v7 = v27;
    if (!result && v27 != 0)
    {
      MEMORY[0x19970E910](*(void *)(v6 + 1120));
      if (*(void *)(v6 + 1112))
      {
        if (a2)
        {
          CFIndex Count = CFArrayGetCount(a2);
          if (Count >= 1)
          {
            CFIndex v10 = Count;
            for (CFIndex i = 0; i != v10; ++i)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
              if (ValueAtIndex)
              {
                CFDictionaryRef v13 = ValueAtIndex;
                CFTypeID v14 = CFGetTypeID(ValueAtIndex);
                if (v14 == CFDictionaryGetTypeID())
                {
                  CFDictionaryRef Value = CFDictionaryGetValue(v13, @"SlotNumber");
                  BOOL v16 = CFDictionaryGetValue(v13, @"UsedForScrubbingOnly");
                  if (Value)
                  {
                    uint64_t v17 = v16;
                    if (v16)
                    {
                      CFArrayRef v18 = *(const __CFArray **)(v6 + 1112);
                      v28.length = CFArrayGetCount(v18);
                      v28.locatioCFIndex n = 0;
                      CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v18, v28, Value);
                      if (FirstIndexOfValue != -1)
                      {
                        uint64_t v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 1104), FirstIndexOfValue);
                        uint64_t v21 = FigImageQueueTableCopyFigImageQueueForVisualContext(*(void *)(v7 + 48), v20);
                        if (v21)
                        {
                          uint64_t v22 = v21;
                          uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(v21);
                          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
                          if (v24) {
                            uint64_t v25 = v24;
                          }
                          else {
                            uint64_t v25 = 0;
                          }
                          int v26 = *(void (**)(uint64_t, __CFString *, const void *))(v25 + 56);
                          if (v26) {
                            v26(FigBaseObject, @"ForScrubbingOnly", v17);
                          }
                          CFRelease(v22);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return MEMORY[0x19970E930](*(void *)(v6 + 1120));
    }
  }
  return result;
}

void itemfig_updateSpeedRampDataOnAllRenderPipelines()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(v1 + 496));
  CFSetRef v2 = *(const __CFSet **)(DerivedStorage + 360);
  if (v2) {
    CFSetApplyFunction(v2, (CFSetApplierFunction)fp_updateRenderPipelineSpeedRamp, *(void **)(DerivedStorage + 2072));
  }

  JUMPOUT(0x19970E2B0);
}

void itemfig_updateOverlapRangeOnAllRenderPipelines()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(v1 + 496));
  CFSetRef v2 = *(const __CFSet **)(DerivedStorage + 360);
  if (v2) {
    CFSetApplyFunction(v2, (CFSetApplierFunction)fp_updateRenderPipelineOverlapRange, *(void **)(DerivedStorage + 2080));
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t fp_updateRenderPipelineSpeedRamp(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v9)
  {
    return v9(FigBaseObject, 0x1EE54A2F8, a2);
  }
  return result;
}

uint64_t fp_updateRenderPipelineOverlapRange(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
  if (v9)
  {
    return v9(FigBaseObject, @"OverlapRange", a2);
  }
  return result;
}

uint64_t itemfig_CopyCommonMetadata(void *a1, const __CFArray *AllCommonKeys, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v70 = 0;
  v71[0] = 0;
  CFTypeRef v69 = 0;
  CFTypeRef v67 = 0;
  CFTypeRef v68 = 0;
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  if (*DerivedStorage || !a4)
  {
    return FigSignalErrorAt();
  }
  CFIndex v10 = DerivedStorage;
  uint64_t v11 = itemfig_assureBasicsReadyForInspection(a1);
  if (!v11)
  {
    if (!AllCommonKeys)
    {
      AllCommonKeys = (const __CFArray *)FigMetadataGetAllCommonKeys();
      if (!AllCommonKeys)
      {
        uint64_t v61 = 0;
        goto LABEL_99;
      }
    }
    unsigned int v62 = a4;
    CFIndex Count = CFArrayGetCount(AllCommonKeys);
    if (Count >= 1)
    {
      CFIndex v12 = 0;
      BOOL v63 = 0;
      BOOL v13 = 0;
      BOOL v14 = 0;
      BOOL v15 = 0;
      CFMutableArrayRef Mutable = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(AllCommonKeys, v12);
        CFTypeRef v18 = v71[0];
        if (!v15 && !v71[0])
        {
          uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*((void *)v10 + 121));
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v21 + 48);
          if (v22) {
            BOOL v15 = v22(FigBaseObject, @"QuickTimeMetadataReader", a3, v71) != 0;
          }
          else {
            BOOL v15 = 1;
          }
          CFTypeRef v18 = v71[0];
        }
        if (!v18
          || ((uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v24 = 0) : (v24 = v23),
              (uint64_t v25 = *(unsigned int (**)(CFTypeRef, __CFString *, const void *, void, const __CFAllocator *, void **, CFTypeRef *))(v24 + 8)) == 0
           || v25(v18, @"comn", ValueAtIndex, 0, a3, &value, &cf)))
        {
          CFTypeRef v26 = v70;
          if (!v13 && !v70)
          {
            uint64_t v27 = FigFormatReaderGetFigBaseObject(*((void *)v10 + 121));
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v28) {
              uint64_t v29 = v28;
            }
            else {
              uint64_t v29 = 0;
            }
            int v30 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v29 + 48);
            if (v30) {
              BOOL v13 = v30(v27, @"iTunesMetadataReader", a3, &v70) != 0;
            }
            else {
              BOOL v13 = 1;
            }
            CFTypeRef v26 = v70;
          }
          if (!v26
            || ((uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v32 = 0) : (v32 = v31),
                (CFNumberRef v33 = *(unsigned int (**)(CFTypeRef, __CFString *, const void *, void, const __CFAllocator *, void **, CFTypeRef *))(v32 + 8)) == 0
             || v33(v26, @"comn", ValueAtIndex, 0, a3, &value, &cf)))
          {
            CFTypeRef v34 = v69;
            if (!v14 && !v69)
            {
              uint64_t v35 = FigFormatReaderGetFigBaseObject(*((void *)v10 + 121));
              uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v36) {
                uint64_t v37 = v36;
              }
              else {
                uint64_t v37 = 0;
              }
              CFTypeID v38 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v37 + 48);
              if (v38) {
                BOOL v14 = v38(v35, @"QuickTimeUserDataReader", a3, &v69) != 0;
              }
              else {
                BOOL v14 = 1;
              }
              CFTypeRef v34 = v69;
            }
            if (!v34
              || ((v39 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (uint64_t v40 = 0) : (uint64_t v40 = v39),
                  (CFTypeID v41 = *(unsigned int (**)(CFTypeRef, __CFString *, const void *, void, const __CFAllocator *, void **, CFTypeRef *))(v40 + 8)) == 0
               || v41(v34, @"comn", ValueAtIndex, 0, a3, &value, &cf)))
            {
              CFTypeRef v42 = v68;
              if (!v68)
              {
                uint64_t v43 = FigFormatReaderGetFigBaseObject(*((void *)v10 + 121));
                uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v45 = v44 ? v44 : 0;
                CFTypeID v46 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v45 + 48);
                if (v46)
                {
                  if (v46(v43, @"ISOUserDataReader", a3, &v68)) {
                    BOOL v14 = 1;
                  }
                }
                else
                {
                  BOOL v14 = 1;
                }
                CFTypeRef v42 = v68;
                if (!v68) {
                  goto LABEL_70;
                }
              }
              uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v48 = v47 ? v47 : 0;
              CFTypeRef v49 = *(unsigned int (**)(CFTypeRef, __CFString *, const void *, void, const __CFAllocator *, void **, CFTypeRef *))(v48 + 8);
              if (!v49 || v49(v42, @"comn", ValueAtIndex, 0, a3, &value, &cf))
              {
LABEL_70:
                CFTypeRef v50 = v67;
                if (!v63 && !v67)
                {
                  uint64_t v51 = FigFormatReaderGetFigBaseObject(*((void *)v10 + 121));
                  uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v52) {
                    uint64_t v53 = v52;
                  }
                  else {
                    uint64_t v53 = 0;
                  }
                  CFTypeID v54 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v53 + 48);
                  if (v54) {
                    BOOL v55 = v54(v51, @"MetadataReader", a3, &v67) != 0;
                  }
                  else {
                    BOOL v55 = 1;
                  }
                  BOOL v63 = v55;
                  CFTypeRef v50 = v67;
                }
                if (v50)
                {
                  uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v57 = v56 ? v56 : 0;
                  unsigned int v58 = *(void (**)(CFTypeRef, __CFString *, const void *, void, const __CFAllocator *, void **, CFTypeRef *))(v57 + 8);
                  if (v58) {
                    v58(v50, @"comn", ValueAtIndex, 0, a3, &value, &cf);
                  }
                }
              }
            }
          }
        }
        if (value)
        {
          if (!Mutable
            && (CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0
            || (CFTypeID v59 = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
          {
            uint64_t v61 = FigSignalErrorAt();
            goto LABEL_100;
          }
          uint64_t v60 = v59;
          CFDictionaryAddValue(v59, @"MetadataCommonKey", ValueAtIndex);
          CFDictionaryAddValue(v60, @"MetadataValue", value);
          if (cf) {
            CFDictionaryAddValue(v60, @"MetadataProperties", cf);
          }
          CFDictionaryAddValue(Mutable, ValueAtIndex, v60);
          CFRelease(v60);
          CFRelease(value);
          CMTimeValue value = 0;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        ++v12;
      }
      while (Count != v12);
      uint64_t v61 = 0;
      if (!Mutable) {
        goto LABEL_100;
      }
      *unsigned int v62 = Mutable;
      goto LABEL_99;
    }
    uint64_t v11 = FigSignalErrorAt();
  }
  uint64_t v61 = v11;
LABEL_99:
  CFMutableArrayRef Mutable = 0;
LABEL_100:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v71[0]) {
    CFRelease(v71[0]);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v69) {
    CFRelease(v69);
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v61;
}

uint64_t itemfig_GetNextThumbnailTime(void *a1, CMTime *a2, unsigned int a3, uint64_t a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  long long v9 = *MEMORY[0x1E4F1F9F8];
  long long v22 = *MEMORY[0x1E4F1F9F8];
  uint64_t v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v23 = v10;
  CFTypeRef cf = 0;
  if (!*DerivedStorage)
  {
    if (a4)
    {
      *(_OWORD *)a4 = v9;
      *(void *)(a4 + 16) = v10;
      if (a3 < 4)
      {
        uint64_t v11 = DerivedStorage;
        unsigned int v12 = dword_194993220[a3];
        uint64_t v13 = itemfig_assureBasicsReadyForInspection(a1);
        if (!v13)
        {
          uint64_t v14 = *((unsigned int *)v11 + 250);
          if (v14)
          {
            uint64_t v15 = *((void *)v11 + 121);
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v17 + 56);
            if (!v20)
            {
              uint64_t v19 = 4294954514;
              goto LABEL_19;
            }
            uint64_t v13 = v20(v15, v14, &cf, 0);
            if (!v13)
            {
              CMTime v21 = *a2;
              uint64_t v19 = FigPlaybackBossSnapTimeToIFrame((uint64_t)cf, 0, &v21, v12, (uint64_t)&v22);
              if (!v19)
              {
                *(_OWORD *)a4 = v22;
                *(void *)(a4 + 16) = v23;
              }
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v13 = FigSignalErrorAt();
          }
        }
        uint64_t v19 = v13;
LABEL_19:
        if (cf) {
          CFRelease(cf);
        }
        return v19;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t itemfig_SetTrackProperty(void *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    uint64_t v10 = (const void *)v9;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1208));
    if (*(unsigned char *)(DerivedStorage + 1200))
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
      uint64_t v11 = itemfig_setTrackPropertyInternal(a1, a2, a3, a4, 1);
LABEL_14:
      CFRelease(v10);
      return v11;
    }
    CFDictionaryRef v12 = *(const __CFDictionary **)(DerivedStorage + 1272);
    if (v12
      || (CFDictionaryRef v12 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]),
          (*(void *)(DerivedStorage + 1272) = v12) != 0))
    {
      uint64_t v13 = (const void *)(int)a2;
      CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(v12, (const void *)(int)a2);
      if (Value)
      {
        uint64_t v15 = Value;
        CFRetain(Value);
LABEL_10:
        if (a4) {
          CFDictionarySetValue(v15, a3, a4);
        }
        else {
          CFDictionaryRemoveValue(v15, a3);
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
        CFRelease(v15);
        uint64_t v11 = 0;
        goto LABEL_14;
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v15 = Mutable;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 1272), v13, Mutable);
        goto LABEL_10;
      }
    }
    uint64_t v11 = FigSignalErrorAt();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
    goto LABEL_14;
  }

  return FigSignalErrorAt();
}

uint64_t itemfig_CopyFormatReader(void *a1, void *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    uint64_t result = itemfig_assureBasicsReadyForInspection(a1);
    if (!result)
    {
      uint64_t v7 = (const void *)*((void *)v6 + 121);
      if (v7) {
        CFTypeRef v8 = CFRetain(v7);
      }
      else {
        CFTypeRef v8 = 0;
      }
      uint64_t result = 0;
      *a2 = v8;
    }
  }
  return result;
}

uint64_t itemfig_SeekToDateWithID(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage() || (uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = (const void *)v6;
    itemfig_postSeekWasCanceledNotification(v6, a1, a3, 0);
    CFRelease(v7);
    return 4294954514;
  }
}

uint64_t itemfig_SetCurrentTimeWithRangeAndID(const void *a1, CMTime *a2, char a3, CMTime *a4, uint64_t a5, int a6)
{
  CMTime v10 = *a2;
  CMTime v9 = *a4;
  long long v7 = *(_OWORD *)a5;
  uint64_t v8 = *(void *)(a5 + 16);
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v10, a3, &v9, &v7, a6, 0, 0);
}

uint64_t itemfig_CopyAsset(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || !a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFTypeRef v5 = *(CFTypeRef *)(DerivedStorage + 1216);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
    return 0;
  }
}

uint64_t itemfig_SetProperties(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  return FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemfig_handleSetProperty, 0, 0, a3);
}

uint64_t itemfig_ExtractAndRetainNextSampleBuffer(uint64_t a1, int a2, int a3, CMBufferRef *a4)
{
  uint64_t v20 = 0;
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a4 && (uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    CMTime v10 = (const void *)v9;
    uint64_t TrackStorage = itemfig_getTrackStorage(a1, a2, &v20);
    if (TrackStorage)
    {
      uint64_t v19 = TrackStorage;
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
      uint64_t v13 = v20;
      CFArrayRef v14 = *(const __CFArray **)(v20 + 168);
      if (v14 && (CFIndex Count = CFArrayGetCount(v14), Count >= 1))
      {
        CFIndex v16 = Count;
        CFIndex v17 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v13 + 168), v17);
          if (*((_DWORD *)ValueAtIndex + 7) == a3) {
            break;
          }
          if (v16 == ++v17) {
            goto LABEL_13;
          }
        }
        uint64_t v19 = 0;
        *a4 = CMBufferQueueDequeueIfDataReadyAndRetain(*((CMBufferQueueRef *)ValueAtIndex + 4));
      }
      else
      {
LABEL_13:
        uint64_t v19 = FigSignalErrorAt();
      }
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    }
    CFRelease(v10);
    return v19;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemfig_SetCurrentTimeWithOptions(const void *a1, CMTime *a2)
{
  int v12 = 0;
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v10 = v11;
  uint64_t v9 = 0;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
  FigCFDictionaryGetInt32IfPresent();
  CMTime v8 = *a2;
  CMTime v7 = v11;
  CMTime v6 = v11;
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v8, 0, &v7, (long long *)&v6.value, 0, Value, 0);
}

uint64_t itemfig_createTrackFormatDetailsDictionary(_DWORD *a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  *(_OWORD *)values = 0u;
  *(_OWORD *)keys = 0u;
  long long v35 = 0u;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v33 = 0;
  FourCharCode valuePtr = 0;
  CMTime v10 = *(uint64_t (**)(uint64_t, char *, uint64_t *))(v9 + 8);
  if (!v10) {
    goto LABEL_30;
  }
  uint64_t v11 = v10(a2, (char *)&v33 + 4, &v33);
  if (v11) {
    goto LABEL_45;
  }
  uint64_t v11 = MTCopyStringsForMediaTypeAndSubType(v33, 0, (CFStringRef *)&cf, 0);
  if (v11) {
    goto LABEL_45;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v14 = v13 ? v13 : 0;
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v14 + 48);
  if (!v15)
  {
LABEL_30:
    CFArrayRef Mutable = 0;
    uint64_t v19 = 0;
    uint64_t v25 = 4294954514;
    goto LABEL_31;
  }
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v11 = v15(FigBaseObject, @"TrackFormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
  if (v11)
  {
LABEL_45:
    uint64_t v25 = v11;
    CFArrayRef Mutable = 0;
    uint64_t v19 = 0;
    goto LABEL_31;
  }
  uint64_t Count = CFArrayGetCount(theArray);
  CFArrayRef Mutable = CFArrayCreateMutable(a3, Count, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v19 = CFArrayCreateMutable(a3, Count, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, i);
        FourCharCode valuePtr = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
        CFNumberRef v22 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
        v41.length = CFArrayGetCount(Mutable);
        v41.locatioCFIndex n = 0;
        if (!CFArrayContainsValue(Mutable, v41, v22))
        {
          CMTimeValue value = 0;
          MTCopyStringsForMediaTypeAndSubType(v33, valuePtr, 0, (CFStringRef *)&value);
          if (value)
          {
            CFArrayAppendValue(Mutable, v22);
            CFArrayAppendValue(v19, value);
            CFRelease(value);
          }
        }
        if (v22) {
          CFRelease(v22);
        }
      }
    }
    BOOL v23 = HIDWORD(v33) != a1[250]
       && HIDWORD(v33) != a1[249]
       && HIDWORD(v33) != a1[254]
       && HIDWORD(v33) != a1[252]
       && HIDWORD(v33) != a1[260];
    keys[0] = @"TrackID";
    values[0] = CFNumberCreate(v16, kCFNumberSInt32Type, (char *)&v33 + 4);
    keys[1] = @"MediaTypeString";
    values[1] = (void *)CFRetain(cf);
    *(void *)&long long v35 = @"MediaType";
    *(void *)&long long v38 = CFNumberCreate(v16, kCFNumberSInt32Type, &v33);
    *((void *)&v35 + 1) = @"MediaSubTypeString";
    *((void *)&v38 + 1) = CFRetain(v19);
    *(void *)&long long v36 = @"MediaSubType";
    *(void *)&long long v39 = CFRetain(Mutable);
    *((void *)&v36 + 1) = @"ChosenForPlayback";
    uint64_t v24 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    if (!v23) {
      uint64_t v24 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    *((void *)&v39 + 1) = CFRetain(*v24);
    uint64_t v25 = 0;
    *a4 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v25 = 4294967188;
  }
LABEL_31:
  for (uint64_t j = 0; j != 6; ++j)
  {
    uint64_t v27 = values[j];
    if (v27) {
      CFRelease(v27);
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v25;
}

BOOL FigTrackReaderImplementsGetTrackEditCount()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v0) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(v1 + 16) != 0;
}

uint64_t FigTrackReaderGetTrackEditCount(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFArrayRef v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t itemfig_setCurrentTimeWithRangeAndIDGuts(const void *a1, CMTime *a2, char a3, CMTime *a4, long long *a5, int a6, const void *a7, int a8)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = DerivedStorage;
  if (!a6)
  {
    a6 = *(_DWORD *)(DerivedStorage + 2044);
    *(_DWORD *)(DerivedStorage + 2044) = FPSupport_IncrementSeekID(a6);
  }
  if (dword_1E9350BF0)
  {
    LODWORD(cf.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)v12) {
    return FigSignalErrorAt();
  }
  if ((a2->flags & 0x1D) != 1) {
    return FigSignalErrorAt();
  }
  uint64_t v14 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v14) {
    return FigSignalErrorAt();
  }
  uint64_t v15 = (const void *)v14;
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)v16)
  {
    CFRelease(v15);
    return FigSignalErrorAt();
  }
  uint64_t v19 = v16;
  uint64_t v20 = a3 & 0xF;
  if ((v20 - 2) > 3) {
    int v21 = 1;
  }
  else {
    int v21 = dword_194993294[v20 - 2];
  }
  MEMORY[0x19970E290](*(void *)(v16 + 496));
  CFNumberRef v22 = *(const void **)(v12 + 528);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(v12 + 528) = 0;
  }
  *(_DWORD *)(v12 + 536) = 0;
  *(_DWORD *)(v12 + 96) = v20;
  long long v23 = *(_OWORD *)&a4->value;
  *(void *)(v12 + 64) = a4->epoch;
  *(_OWORD *)(v12 + 48) = v23;
  long long v24 = *a5;
  *(void *)(v12 + 88) = *((void *)a5 + 2);
  *(_OWORD *)(v12 + 72) = v24;
  if (!*(void *)(v12 + 352))
  {
    if (dword_1E9350BF0)
    {
      LODWORD(cf.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CFTypeRef v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v37 = *(_OWORD *)&a2->value;
    *(void *)(v12 + 40) = a2->epoch;
    *(_OWORD *)(v12 + 24) = v37;
    long long v38 = *(OpaqueCMTimebase **)(v12 + 328);
    CMTime time = *a2;
    CMTimebaseSetTime(v38, &time);
    BOOL v39 = a6 != 0;
    CMTime time = *a2;
    duratioCFIndex n = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTimeRangeMake(&v76, &time, &duration);
    itemfig_HintStreamForTimeRange((uint64_t)a1, (long long *)&v76.start.value);
    if (CFArrayGetCount(*(CFArrayRef *)(v19 + 504)) >= 1
      && CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 504), 0) == a1)
    {
      if (*(unsigned char *)(v19 + 544))
      {
        *(unsigned char *)(v19 + 544) = 0;
        playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)v15, *(_DWORD *)(v19 + 552));
      }
      int v64 = 0;
      uint64_t v17 = 0;
      uint64_t v40 = MEMORY[0x1E4F1F9F8];
      long long v41 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v12 + 548) = *MEMORY[0x1E4F1F9F8];
      uint64_t v42 = *(void *)(v40 + 16);
      *(void *)(v12 + 564) = v42;
      *(_OWORD *)(v12 + 572) = v41;
      *(void *)(v12 + 588) = v42;
    }
    else
    {
      int v64 = 0;
      uint64_t v17 = 0;
    }
    int v43 = 1;
    goto LABEL_83;
  }
  unsigned int v63 = v21;
  if (*(void *)(v19 + 512)) {
    BOOL v25 = !*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 480)
  }
       && CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 504), 0) == *(const void **)(v19 + 512);
  else {
    BOOL v25 = CFArrayGetCount(*(CFArrayRef *)(v19 + 504)) < 1;
  }
  if (*(unsigned char *)(v12 + 1697))
  {
    float v27 = 0.0;
    if (*(_DWORD *)(v19 + 52) == 4) {
      float v27 = *(float *)(v19 + 48);
    }
    itemfig_updateAccessLogEntry(v27);
    itemfig_commitAccessLogEntry(v15, (uint64_t)a1);
  }
  int v28 = *(_DWORD *)(v12 + 524);
  if (v28 == a6 || v28 == 0) {
    int v28 = 0;
  }
  int v64 = v28;
  if (a6)
  {
    *(_DWORD *)(v12 + 524) = a6;
    *(_DWORD *)(v12 + 536) = a8;
    int v30 = *(const void **)(v12 + 528);
    *(void *)(v12 + 528) = a7;
    if (a7) {
      CFRetain(a7);
    }
    if (v30) {
      CFRelease(v30);
    }
    *(unsigned char *)(v12 + 544) = 1;
  }
  playerfig_cleanupOverlappedOutroComponents((uint64_t)v15, 0);
  if ((a3 & 0x20) == 0)
  {
    itemfig_clearCoordinatedPlaybackSynchronizationTimebase();
    playerfig_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem((uint64_t)v15, a1);
    CMTime time = *a2;
    playerfig_triggerStartupTasksForSeekIfNecessary((uint64_t)v15, (uint64_t)a1, a6, &time);
  }
  if (v25)
  {
    if (*(void *)(v12 + 128))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        if (*(_DWORD *)(v19 + 52) == 4
          || (FigPlaybackBossGetTime(*(void *)(v12 + 352), &time2), CMTime time = *a2, CMTimeCompare(&time, &time2)))
        {
          FigPlaybackBossInterruptQueueing(*(void *)(v12 + 352));
          FigCRABSUnhintActiveRanges(*(void *)(v12 + 128));
        }
      }
    }
    if (dword_1E9350BF0 >= 2)
    {
      LODWORD(cf.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v31, type[0]);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v44 = a1;
    itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)a1, 0);
    uint64_t v45 = *(void *)(v12 + 352);
    CFTypeID v46 = *(const void **)(v12 + 512);
    CMTime time = *a2;
    duratioCFIndex n = *a4;
    CMTime cf = *(CMTime *)a5;
    uint64_t v17 = FigPlaybackBossSetTimeWithRange(v45, &time, v63, &duration, &cf, v46, a6);
    FigPlaybackBossGetTime(*(void *)(v12 + 352), &start);
    CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTimeRangeMake(&v71, &start, &time);
    itemfig_HintStreamForTimeRange((uint64_t)a1, (long long *)&v71.start.value);
    int v43 = 0;
LABEL_77:
    playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems((uint64_t)v15, v44);
    if (*(void *)(v19 + 512) && *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 1697))
    {
      float v51 = 0.0;
      if (*(_DWORD *)(v19 + 52) == 4) {
        float v51 = *(float *)(v19 + 48);
      }
      itemfig_updateAccessLogEntry(v51);
    }
    BOOL v39 = 0;
LABEL_83:
    itemfig_reportingAgentReportPlayStartMovieTime();
    MEMORY[0x19970E2B0](*(void *)(v19 + 496));
    if (v43)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    goto LABEL_85;
  }
  cf.unsigned int value = 0;
  uint64_t v32 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], &cf.value);
  if (!v32)
  {
    if (dword_1E9350BF0 >= 2)
    {
      *(_DWORD *)CMTime type = 0;
      os_log_type_t v74 = OS_LOG_TYPE_DEFAULT;
      uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v34 = *(_DWORD *)type;
      if (os_log_type_enabled(v33, v74)) {
        unsigned int v35 = v34;
      }
      else {
        unsigned int v35 = v34 & 0xFFFFFFFE;
      }
      if (v35)
      {
        if (a1) {
          long long v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        }
        else {
          long long v36 = "";
        }
        CMTime time = *a2;
        Float64 Seconds = CMTimeGetSeconds(&time);
        LODWORD(duration.value) = 136315906;
        *(CMTimeValue *)((char *)&duration.value + 4) = (CMTimeValue)"itemfig_setCurrentTimeWithRangeAndIDGuts";
        LOWORD(duration.flags) = 2048;
        *(void *)((char *)&duration.flags + 2) = a1;
        HIWORD(duration.epoch) = 2082;
        CFTypeRef v78 = v36;
        __int16 v79 = 2048;
        Float64 v80 = Seconds;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    playerfig_pauseRenderPipelines();
    playeritemfig_releaseRenderPipelines(v15, 0, (CFTypeRef)cf.value);
    playerfig_disturbPlayQueue();
    long long v48 = *(_OWORD *)&a2->value;
    *(void *)(v12 + 40) = a2->epoch;
    *(_OWORD *)(v12 + 24) = v48;
    CFTypeRef v49 = *(OpaqueCMTimebase **)(v12 + 328);
    CMTime time = *a2;
    CMTimebaseSetTime(v49, &time);
    playerfig_prepareWorkingItem(v15, 0, (CFTypeRef)cf.value);
    if (*(void *)(v19 + 512) && *(void *)(CMBaseObjectGetDerivedStorage() + 352))
    {
      itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(*(void *)(v19 + 512), 0);
      uint64_t v50 = *(void *)(v19 + 512);
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      duratioCFIndex n = time;
      itemfig_matchBossRateToPlayerRateAndPlaybackState(v50, &time, &duration);
    }
    FigDeferredTransactionCommit(cf.value);
    if (cf.value) {
      CFRelease((CFTypeRef)cf.value);
    }
    uint64_t v17 = 0;
    int v43 = 1;
    uint64_t v44 = a1;
    goto LABEL_77;
  }
  uint64_t v17 = v32;
  MEMORY[0x19970E2B0](*(void *)(v19 + 496));
  BOOL v39 = 0;
LABEL_85:
  if (v64) {
    itemfig_postSeekWasCanceledNotification((uint64_t)v15, (uint64_t)a1, v64, 0);
  }
  if (v39)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetValue();
    FigCFDictionarySetInt32();
    if (Mutable)
    {
      if (dword_1E9350BF0)
      {
        LODWORD(cf.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = cf.value;
        if (os_log_type_enabled(v53, type[0])) {
          unsigned int v55 = value;
        }
        else {
          unsigned int v55 = value & 0xFFFFFFFE;
        }
        if (v55)
        {
          uint64_t v56 = a1;
          if (a1)
          {
            uint64_t v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            uint64_t v56 = a1;
          }
          else
          {
            uint64_t v57 = "";
          }
          LODWORD(duration.value) = 136315906;
          *(CMTimeValue *)((char *)&duration.value + 4) = (CMTimeValue)"itemfig_setCurrentTimeWithRangeAndIDGuts";
          LOWORD(duration.flags) = 2048;
          *(void *)((char *)&duration.flags + 2) = v56;
          HIWORD(duration.epoch) = 2082;
          CFTypeRef v78 = v57;
          __int16 v79 = 1024;
          LODWORD(v80) = a6;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(Mutable);
    }
    else
    {
      LODWORD(cf.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v59 = cf.value;
      if (os_log_type_enabled(v58, type[0])) {
        unsigned int v60 = v59;
      }
      else {
        unsigned int v60 = v59 & 0xFFFFFFFE;
      }
      if (v60)
      {
        uint64_t v61 = a1;
        if (a1)
        {
          unsigned int v62 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          uint64_t v61 = a1;
        }
        else
        {
          unsigned int v62 = "";
        }
        LODWORD(duration.value) = 136315650;
        *(CMTimeValue *)((char *)&duration.value + 4) = (CMTimeValue)"itemfig_setCurrentTimeWithRangeAndIDGuts";
        LOWORD(duration.flags) = 2048;
        *(void *)((char *)&duration.flags + 2) = v61;
        HIWORD(duration.epoch) = 2082;
        CFTypeRef v78 = v62;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  CFRelease(v15);
  return v17;
}

uint64_t playerfig_triggerStartupTasksForSeekIfNecessary(uint64_t a1, uint64_t a2, int a3, CMTime *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  int v10 = *(_DWORD *)(DerivedStorage + 52);
  int v16 = v10;
  uint64_t result = *(void *)(DerivedStorage + 504);
  if (result)
  {
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      if (result == a2)
      {
        CMTime v15 = *a4;
        uint64_t result = playerfig_performStartupTasksForEvents(a1, 2, 0, a3, (long long *)&v15.value);
        if (!result && (v10 == 4 || *(unsigned char *)(DerivedStorage + 56)))
        {
          uint64_t result = playerfig_isWaitingForAnyStartupTask(a1, &v16);
          if (result)
          {
            uint64_t result = playerfig_enterPlaybackState(a1, v16);
            if (!result && v10 == 4 && !*(unsigned char *)(v9 + 480))
            {
              itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(a2, 0);
              uint64_t v12 = *(void *)(v9 + 352);
              uint64_t v13 = *(const void **)(v9 + 512);
              CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
              CMTime v14 = v15;
              return FigPlaybackBossSetRateAndAnchorTime(v12, &v15, &v14, v13, 0.0);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigCRABSUnhintActiveRanges(uint64_t a1)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v5 = *(void *)(VTable + 24);
  uint64_t result = VTable + 24;
  uint64_t v4 = v5;
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  CMTime v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 16);
  if (v7)
  {
    return v7(a1, 0, 0);
  }
  return result;
}

void itemfig_assetDownloadComplete(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0 >= 3)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v4) {
    BOOL v7 = *DerivedStorage == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (!*(unsigned char *)v5)
    {
      MEMORY[0x19970E290](*(void *)(v5 + 496));
      DerivedStorage[1330] = 1;
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v8 + 2096));
      if (!*(unsigned char *)(v8 + 2129) && *(void *)(v8 + 2104) && *(void *)(v8 + 2088))
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v11 = CFDateCreate(v9, Current);
        if (v11)
        {
          CFDateRef v12 = v11;
          if (!FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(*(const __CFURL **)(v8 + 2104), *(const void **)(v8 + 2088), (uint64_t)v11))FigAssetDownloadStorageManagementExcludeURLFromBackup(*(const __CFURL **)(v8 + 2104)); {
          CFRelease(v12);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      MEMORY[0x19970E930](*(void *)(v8 + 2096));
      if (DerivedStorage[1]) {
        playerfig_configureDownloadInPlayQueue();
      }
      else {
        itemfig_configureDownloadForItem(a2, 0);
      }
      MEMORY[0x19970E2B0](*(void *)(v5 + 496));
    }
    goto LABEL_20;
  }
  if (v4) {
LABEL_20:
  }
    CFRelease(v4);
}

void itemfig_DeferredTimebaseEffectiveRateChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    uint64_t v6 = v5;
    MEMORY[0x19970E290](*(void *)(v5 + 496));
    uint64_t v7 = *(void *)(DerivedStorage + 824);
    if (v7
      || (int v19 = *(_DWORD *)(DerivedStorage + 1000)) != 0
      && (uint64_t v20 = 0, !itemfig_getTrackStorage((uint64_t)a2, v19, &v20))
      && v20
      && (uint64_t v7 = *(void *)(v20 + 48)) != 0)
    {
      FigImageQueueTableRespondToTimebaseRateChange(v7, *(OpaqueCMTimebase **)(DerivedStorage + 328));
    }
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 1048);
    if (v8)
    {
      CFIndex Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        for (uint64_t i = 0; i != v10; ++i)
        {
          uint64_t v20 = 0;
          FigCFArrayGetInt32AtIndex();
          itemfig_getTrackStorage((uint64_t)a2, 0, &v20);
          uint64_t v12 = v20;
          if (v20)
          {
            CFArrayRef v13 = *(const __CFArray **)(v20 + 224);
            if (v13)
            {
              if (CFArrayGetCount(v13) >= 1)
              {
                for (CFIndex j = 0; ; ++j)
                {
                  CFArrayRef v15 = *(const __CFArray **)(v12 + 224);
                  if (v15) {
                    CFArrayRef v15 = (const __CFArray *)CFArrayGetCount(v15);
                  }
                  if (j >= (uint64_t)v15) {
                    break;
                  }
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 224), j);
                  FigImageQueueTableRespondToTimebaseRateChange((uint64_t)ValueAtIndex, *(OpaqueCMTimebase **)(DerivedStorage + 328));
                }
              }
            }
          }
        }
      }
    }
    if (!*(unsigned char *)(DerivedStorage + 2160))
    {
      float Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
      if (Rate != 0.0)
      {
        itemfig_UpdateLastPlayedOutOrLastPlayedDateIfNecessary((uint64_t)a2);
        *(unsigned char *)(DerivedStorage + 2160) = 1;
      }
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v6 + 504)) >= 1 && CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 0) == a2)
    {
      float v18 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
      itemfig_reportingAgentReportRateChanged((uint64_t)a2, v18);
    }
    MEMORY[0x19970E2B0](*(void *)(v6 + 496));
  }
  if (a2) {
    CFRelease(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void itemfig_assetPropertyLoaded(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Value = CFDictionaryGetValue(a5, @"assetPayload_Property");
  if (!v8) {
    return;
  }
  if (!*(unsigned char *)v9)
  {
    CFDateRef v11 = Value;
    if (CFEqual(Value, @"Lyrics")
      || CFEqual(v11, @"Duration")
      || CFEqual(v11, @"assetProperty_InitialSamples")
      || CFEqual(v11, @"iTunesGaplessInfo")
      || CFEqual(v11, @"assetProperty_CPEProtector")
      || CFEqual(v11, @"assetProperty_ContentByteStream")
      || CFEqual(v11, @"assetProperty_FormatReader")
      || CFEqual(v11, @"assetProperty_Tracks")
      || CFEqual(v11, @"MediaSelectionArray"))
    {
      if (!*(unsigned char *)(DerivedStorage + 1240))
      {
        if (*(unsigned char *)(DerivedStorage + 1242))
        {
          int AssetBasicsIfReady = itemfig_retrieveAssetBasicsIfReady(a2);
          if (AssetBasicsIfReady)
          {
            itemfig_assetPropertyFailedToLoad(AssetBasicsIfReady, a2, v20, v21, a5);
LABEL_24:
            FigSignalErrorAt();
            goto LABEL_29;
          }
        }
      }
      if (CFEqual(v11, @"Duration"))
      {
        MEMORY[0x19970E290](*(void *)(v9 + 496));
        playerfig_updateStartHostTimeEstimatesOfItemAndFollowingItems((uint64_t)v8, a2);
        if (*(unsigned char *)(DerivedStorage + 1266))
        {
          NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v8, (uint64_t)a2, v12, v13, v14, v15, v16, v17, @"SeekableTimeIntervals", 0);
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          if (NotificationPayloadForProperties) {
            CFRelease(NotificationPayloadForProperties);
          }
        }
        MEMORY[0x19970E2B0](*(void *)(v9 + 496));
      }
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 1208));
      if (!*(unsigned char *)(DerivedStorage + 1240))
      {
        CFMutableDictionaryRef Mutable = *(__CFArray **)(DerivedStorage + 1248);
        if (Mutable
          || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
              (*(void *)(DerivedStorage + 1248) = Mutable) != 0))
        {
          CFArrayAppendValue(Mutable, v11);
        }
        else
        {
          FigSignalErrorAt();
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
        goto LABEL_29;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
      if (itemfig_postReadyForInspectionPayloadBecauseAssetPropertyLoadedAndBasicsReady((uint64_t)a2, v11)) {
        goto LABEL_24;
      }
    }
  }
LABEL_29:

  CFRelease(v8);
}

void itemfig_assetPropertyRevised(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  CFDictionaryGetValue(a5, @"assetPayload_Property");
  if (v7)
  {
    if (!FigCFEqual())
    {
LABEL_36:
      CFRelease(v7);
      return;
    }
    CMTime v34 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    itemfig_GetDuration(a2, (uint64_t)&v34);
    CMTime v32 = v34;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    CFTypeRef v37 = 0;
    MEMORY[0x19970E910](*(void *)(v9 + 224));
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v11 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&v37);
    int v12 = (CMTime *)MEMORY[0x1E4F1FA48];
    if (!v11)
    {
      CFTypeRef v13 = v37;
      CFArrayRef v14 = *(const __CFArray **)(v9 + 208);
      CFIndex v15 = v14 ? CFArrayGetCount(v14) : 0;
      CFArrayRef v16 = *(const __CFArray **)(DerivedStorage + 864);
      BOOL v17 = v16 && CFArrayGetCount(v16) > 0;
      if (v15 > 0 || v17)
      {
        CMTime time1 = v32;
        CMTime time2 = *v12;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          CFArrayRef v18 = *(const __CFArray **)(DerivedStorage + 864);
          CMTime time1 = v32;
          FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v13, (long long *)&time1.value, v18, (uint64_t)"playerfig_updateDurationOnVideoLayerArray");
          CFArrayRef v19 = *(const __CFArray **)(v9 + 208);
          CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
          FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v13, (long long *)&time1.value, v19, (uint64_t)"playerfig_updateDurationOnVideoLayerArray");
        }
      }
    }
    MEMORY[0x19970E930](*(void *)(v9 + 224));
    FigDeferredTransactionCommit((uint64_t)v37);
    if (v37) {
      CFRelease(v37);
    }
    CMTime v33 = v34;
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    CFTypeRef v37 = 0;
    CMTime time1 = v33;
    CFDictionaryRef v21 = CMTimeCopyAsDictionary(&time1, v10);
    CMTime time1 = v33;
    CMTime time2 = *v12;
    if (CMTimeCompare(&time1, &time2) < 1)
    {
LABEL_26:
      if (v21) {
        CFRelease(v21);
      }
      if ((v34.flags & 1) != 0 && (CMTime time1 = v34, (time1.value = (CMTimeValue)CMTimeCopyAsDictionary(&time1, v10)) != 0))
      {
        CFDictionaryRef v24 = CFDictionaryCreate(v10, (const void **)&kFigPlaybackItemParameter_CurrentDuration, (const void **)&time1, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFRelease((CFTypeRef)time1.value);
      }
      else
      {
        CFDictionaryRef v24 = 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v24) {
        CFRelease(v24);
      }
      NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v7, a2, v25, v26, v27, v28, v29, v30, @"SeekableTimeIntervals", 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (NotificationPayloadForProperties) {
        CFRelease(NotificationPayloadForProperties);
      }
      goto LABEL_36;
    }
    if (*(void *)(v20 + 656))
    {
      uint64_t v22 = *(void *)(v20 + 824);
    }
    else
    {
      int v23 = *(_DWORD *)(v20 + 1000);
      if (!v23 || (time1.unsigned int value = 0, itemfig_getTrackStorage(a2, v23, &time1), !time1.value))
      {
LABEL_23:
        if (v37)
        {
          FigImageQueueArraySetProperty();
          if (v37) {
            CFRelease(v37);
          }
        }
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(time1.value + 48);
    }
    FigImageQueueTableCopyFigImageQueueArray(v22, (uint64_t *)&v37);
    goto LABEL_23;
  }
}

void itemfig_assetPropertyFailedToLoad(int a1, void *a2, int a3, int a4, CFDictionaryRef theDict)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"assetPayload_Property");
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    CFAllocatorRef v10 = (const void *)v9;
    if (!CFEqual(Value, @"Lyrics")
      && !CFEqual(Value, @"Duration")
      && !CFEqual(Value, @"assetProperty_InitialSamples")
      && !CFEqual(Value, @"iTunesGaplessInfo")
      && !CFEqual(Value, @"assetProperty_CPEProtector")
      && !CFEqual(Value, @"assetProperty_ContentByteStream")
      && !CFEqual(Value, @"assetProperty_FormatReader")
      && !CFEqual(Value, @"assetProperty_Tracks"))
    {
      goto LABEL_32;
    }
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"assetPayload_Result");
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFTypeRef v13 = (__CFError *)CFDictionaryGetValue(theDict, @"assetPayload_CFError");
      valuePtr[0] = 0;
      CFNumberGetValue(v12, kCFNumberSInt32Type, valuePtr);
      itemfig_reportingAgentReportError((uint64_t)a2, v13, @"CoreMediaErrorDomain", @"Asset property failed to load", valuePtr[0]);
      FailedNotificationPayload = itemfig_createFailedNotificationPayload(v13, v12);
    }
    else
    {
      FailedNotificationPayload = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (FailedNotificationPayload) {
      CFRelease(FailedNotificationPayload);
    }
    if (!*(unsigned char *)(DerivedStorage + 1)) {
      goto LABEL_32;
    }
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v15 + 776))
    {
      if (!dword_1E9350BF0)
      {
LABEL_32:
        CFRelease(v10);
        return;
      }
LABEL_30:
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_32;
    }
    uint64_t v16 = v15;
    if (*(unsigned char *)(v15 + 780))
    {
      if (!dword_1E9350BF0)
      {
LABEL_31:
        CFRetain(a2);
        dispatch_async_f(*(dispatch_queue_t *)(v16 + 104), a2, (dispatch_function_t)itemfig_removeFromPlayQueueIfAdvanceAtEnd_f);
        goto LABEL_32;
      }
LABEL_21:
      BOOL v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_31;
    }
    MEMORY[0x19970E290](*(void *)(v15 + 496));
    CFArrayRef v18 = *(const __CFArray **)(v16 + 504);
    if (v18 && CFArrayGetCount(v18) > 0)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v16 + 504), 0);
      uint64_t v20 = *(void **)(v16 + 512);
      MEMORY[0x19970E2B0](*(void *)(v16 + 496));
      if (ValueAtIndex == a2)
      {
        if (!dword_1E9350BF0) {
          goto LABEL_31;
        }
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v20 = *(void **)(v16 + 512);
      MEMORY[0x19970E2B0](*(void *)(v16 + 496));
    }
    if (v20 != a2) {
      goto LABEL_32;
    }
    *(unsigned char *)(DerivedStorage + 1289) = 1;
    if (!dword_1E9350BF0) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
}

void itemfig_assetPropertyBatchLoaded(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v9 = (const void *)v8;
  int valuePtr = 0;
  if (a5 && v8)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"assetPayload_BatchID");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr)
      {
        if (valuePtr == *(_DWORD *)(DerivedStorage + 1256))
        {
          *(unsigned char *)(DerivedStorage + 1264) = 1;
        }
        else if (valuePtr == *(_DWORD *)(DerivedStorage + 1260))
        {
          *(unsigned char *)(DerivedStorage + 1265) = 1;
        }
      }
      if (*(unsigned char *)(DerivedStorage + 1264) && *(unsigned char *)(DerivedStorage + 1265))
      {
        uint64_t v11 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19970E290](*(void *)(v11 + 496));
        if (*(unsigned char *)(DerivedStorage + 1288)
          || CFArrayGetCount(*(CFArrayRef *)(v11 + 504)) < 1
          || CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 504), 0) != a2)
        {
          char v12 = 1;
        }
        else
        {
          if (dword_1E9350BF0)
          {
            os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          char v12 = 0;
          *(unsigned char *)(DerivedStorage + 1288) = 1;
        }
        if (*(const void **)(v11 + 512) == a2 && !*(void *)(DerivedStorage + 352))
        {
          if (v12)
          {
            CFArrayRef v14 = 0;
          }
          else
          {
            CFArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            CFArrayRef v14 = MutableCopy;
            if (MutableCopy) {
              CFDictionarySetValue(MutableCopy, @"ItemBecameCurrentAndReadyForFirstTime", (const void *)*MEMORY[0x1E4F1CFD0]);
            }
          }
          if (!*(unsigned char *)v11)
          {
            uint64_t v16 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
            if (v16)
            {
              BOOL v17 = v16;
              if (a2) {
                CFTypeRef v18 = CFRetain(a2);
              }
              else {
                CFTypeRef v18 = 0;
              }
              *BOOL v17 = v18;
              if (v14) {
                CFDictionaryRef v19 = v14;
              }
              else {
                CFDictionaryRef v19 = a5;
              }
              v17[1] = CFRetain(v19);
              if (dword_1E9350BF0)
              {
                uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              dispatch_async_f(*(dispatch_queue_t *)(v11 + 104), v17, (dispatch_function_t)itemfig_assetPropertyBatchLoaded_prepareWorkingItem_f);
            }
          }
          if (v14) {
            CFRelease(v14);
          }
        }
        else if ((v12 & 1) == 0 && *(_DWORD *)(v11 + 60) == 2)
        {
          itemfig_becameBothCurrentAndReadyForInspection((uint64_t)a2, 0);
        }
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
        int v21 = *(unsigned __int8 *)(DerivedStorage + 624);
        *(unsigned char *)(DerivedStorage + 624) = 0;
        MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
        if (v21) {
          itemfig_monitorPlayability(a2);
        }
        MEMORY[0x19970E2B0](*(void *)(v11 + 496));
      }
    }
    goto LABEL_43;
  }
  if (v8) {
LABEL_43:
  }
    CFRelease(v9);
}

void itemfig_removeFromPlayQueueIfAdvanceAtEnd_f(const __CFString *a1)
{
  itemfig_removeFromPlayQueueIfAdvanceAtEnd(a1);

  CFRelease(a1);
}

void itemfig_assetPropertyBatchLoaded_prepareWorkingItem_f(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (v5) {
    BOOL v7 = *(unsigned char *)DerivedStorage == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    uint64_t v8 = v6;
    if (!*(unsigned char *)v6)
    {
      MEMORY[0x19970E290](*(void *)(v6 + 496));
      if (*(CFTypeRef *)(v8 + 512) == v2 && !*(void *)(DerivedStorage + 352))
      {
        if (dword_1E9350BF0 >= 2)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(unsigned char *)(DerivedStorage + 1288)
          && CFDictionaryGetValue(v3, @"ItemBecameCurrentAndReadyForFirstTime")
          && *(_DWORD *)(v8 + 60) == 2)
        {
          itemfig_becameBothCurrentAndReadyForInspection((uint64_t)v2, 0);
        }
        playerfig_prepareWorkingItem(v5, *(unsigned __int8 *)(DerivedStorage + 993), 0);
        *(unsigned char *)(DerivedStorage + 993) = 0;
      }
      MEMORY[0x19970E2B0](*(void *)(v8 + 496));
      playerfig_updatePlaybackStateAndBossRate(v5, 8, 0);
    }
    goto LABEL_17;
  }
  if (v5) {
LABEL_17:
  }
    CFRelease(v5);
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFAllocatorRef v10 = *(const void **)(a1 + 8);
  if (v10) {
    CFRelease(v10);
  }
  free((void *)a1);
}

uint64_t playerfig_DuckVolume(const void *a1, int a2, float a3, float a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v10 = DerivedStorage;
    if (a3 < 0.0) {
      a3 = 0.0;
    }
    if (a2)
    {
      if (a3 >= 1.0 || *(unsigned char *)(DerivedStorage + 772) != 0) {
        return 0;
      }
      *(float *)(DerivedStorage + 768) = a3;
      *(unsigned char *)(DerivedStorage + 772) = 1;
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
      if (!*(void *)(v10 + 512)) {
        goto LABEL_23;
      }
      if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 0)) {
        goto LABEL_19;
      }
      uint64_t v12 = (uint64_t)a1;
      float v13 = a3;
      float v14 = a4;
      int v15 = 1;
    }
    else
    {
      if (!*(unsigned char *)(DerivedStorage + 772)) {
        return 0;
      }
      *(unsigned char *)(DerivedStorage + 772) = 0;
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
      if (!*(void *)(v10 + 512))
      {
LABEL_23:
        MEMORY[0x19970E2B0](*(void *)(v10 + 496));
        return 0;
      }
      if (playerfig_mustDisturbPlaybackWhenSettingAudioPropertyOnCurrentItem((uint64_t)a1, 0))
      {
LABEL_19:
        MEMORY[0x19970E2B0](*(void *)(v10 + 496));
        long long v18 = *MEMORY[0x1E4F1F9F8];
        uint64_t v19 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        long long v16 = v18;
        uint64_t v17 = v19;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)&v18, (uint64_t)&v16, 0);
        return 0;
      }
      uint64_t v12 = (uint64_t)a1;
      float v13 = a3;
      float v14 = a4;
      int v15 = 0;
    }
    playerfig_applySoftwareVolume(v12, @"SoftwareVolume2", v15, v13, v14);
    goto LABEL_23;
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_SilentMute(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    if (a2)
    {
      if (!DerivedStorage[773])
      {
        playerfig_applySoftwareVolume(a1, @"SoftwareVolume5", 1, 0.0, 0.0);
        v6[773] = 1;
      }
    }
    else if (DerivedStorage[773])
    {
      playerfig_applySoftwareVolume(a1, @"SoftwareVolume5", 1, 1.0, 0.0);
      v6[773] = 0;
    }
    return 0;
  }
}

uint64_t FigSampleBufferConsumerSbufInspectorCreate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const char *a5, void *a6)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v10 = 4294954535;
  if (a3)
  {
    if (a2)
    {
      if (a6)
      {
        FigSampleBufferConsumerGetClassID();
        uint64_t v10 = CMDerivedObjectCreate();
        if (!v10)
        {
          uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
          CFTypeRef v12 = CFRetain(a2);
          float v13 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
          *uint64_t DerivedStorage = v12;
          CFAllocatorRef v14 = *v13;
          if (a5) {
            int v15 = a5;
          }
          else {
            int v15 = "-";
          }
          CFStringRef v16 = CFStringCreateWithCString(v14, v15, 0x8000100u);
          DerivedStorage[4] = v16;
          if (v16)
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
            DerivedStorage[3] = Mutable;
            if (Mutable)
            {
              uint64_t v10 = 0;
              DerivedStorage[1] = a3;
              DerivedStorage[2] = a4;
              *a6 = 0;
            }
            else
            {
              return 4294954536;
            }
          }
          else
          {
            return 4294954536;
          }
        }
      }
    }
  }
  return v10;
}

void sbcins_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 32) = 0;
  }
  CFTypeRef v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

__CFString *sbcins_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerSbufInspector %p>", a1);
  return Mutable;
}

uint64_t sbcins_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t sbcins_SendSampleBuffer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v6 = Mutable;
    if (CFArrayGetCount(*(CFArrayRef *)(v4 + 24)) >= 1)
    {
      FigCFArrayApplyBlock();
      FigCFArrayRemoveAllValues();
      FigCFArrayAppendArray();
    }
    CFRelease(v6);
  }
  int v7 = (*(uint64_t (**)(const void *, void))(DerivedStorage + 8))(a2, *(void *)(DerivedStorage + 16));
  if (v7 == 3) {
    return 0;
  }
  if (v7 == 2)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 24), a2);
    return 0;
  }
  if (v7 == 1
    && ((uint64_t v8 = *(void *)DerivedStorage, (v9 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
      ? (uint64_t v10 = 0)
      : (uint64_t v10 = v9),
        (CFTypeRef v12 = *(uint64_t (**)(uint64_t, const void *))(v10 + 8)) != 0))
  {
    return v12(v8, a2);
  }
  else
  {
    return 4294954514;
  }
}

uint64_t sbcins_IsQueueAtOrAboveHighWater()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFDictionaryRef v3 = *(uint64_t (**)(uint64_t))(v2 + 16);
  if (!v3) {
    return 0;
  }

  return v3(v0);
}

uint64_t sbcins_IsQueueBelowLowWater()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFDictionaryRef v3 = *(uint64_t (**)(uint64_t))(v2 + 24);
  if (!v3) {
    return 0;
  }

  return v3(v0);
}

uint64_t sbcins_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t sbcins_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFMutableArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t sbcins_GetPendingSampleBufferCount()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 48);
  if (!v3) {
    return 0;
  }

  return v3(v0);
}

uint64_t sbcins_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t sbcins_Flush()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 72);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigContentKeyBossCreateRemoteWithObjectID(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v6 = ckbremote_ensureClientEstablished();
    if (v6) {
      return v6;
    }
    FigGetAllocatorForMedia();
    FigContentKeyBossGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[2] = FigSimpleMutexCreate();
      *uint64_t DerivedStorage = a2;
      uint64_t v7 = FigXPCRemoteClientAssociateObject();
      if (!v7) {
        *a3 = 0;
      }
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckbremote_ensureClientEstablished()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __ckbremote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57911A0;
  block[4] = &v3;
  if (ckbremote_ensureClientEstablished_sFigContentKeyBossRemoteClientSetupOnce != -1) {
    dispatch_once(&ckbremote_ensureClientEstablished_sFigContentKeyBossRemoteClientSetupOnce, block);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigContentKeyBossCreateRemote(uint64_t a1, void *a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  uint64_t RemoteWithObjectID = ckbremote_ensureClientEstablished();
  if (!RemoteWithObjectID)
  {
    uint64_t RemoteWithObjectID = FigXPCCreateBasicMessage();
    if (!RemoteWithObjectID)
    {
      uint64_t RemoteWithObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!RemoteWithObjectID)
      {
        uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
        if (uint64)
        {
          uint64_t RemoteWithObjectID = FigContentKeyBossCreateRemoteWithObjectID(uint64, uint64, a2);
          goto LABEL_7;
        }
LABEL_8:
        uint64_t RemoteWithObjectID = FigSignalErrorAt();
      }
    }
  }
LABEL_7:
  uint64_t v5 = RemoteWithObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t __ckbremote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  FigRemote_ShouldConnectToMediaplaybackd();
  uint64_t result = FigXPCRemoteClientCreate();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ckbremote_deadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t ckbremote_handleServerMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

void __ckbremote_requestStatusCallback_keyRequestDidSucceed_block_invoke(void *a1)
{
  (*(void (**)(void, void, void, void, void, void))(a1[4] + 112))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
  }
}

void __ckbremote_requestStatusCallback_keyRequestDidFail_block_invoke(void *a1)
{
  (*(void (**)(void, void, void, void, void, void))(a1[4] + 120))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
  }
}

void __ckbremote_requestHandlingCallback_keyRequestDidSucceed_block_invoke(void *a1)
{
  (*(void (**)(void, void, void, void, void, void))(a1[4] + 56))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
  }
}

void __ckbremote_requestHandlingCallback_keyRequestDidFail_block_invoke(void *a1)
{
  (*(void (**)(void, void, void, void, void, void))(a1[4] + 64))(a1[5], a1[6], a1[7], a1[8], a1[9], 0);
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
  }
}

void __ckbremote_requestHandlingCallback_didProvideRequest_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 32))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
  }
}

void __ckbremote_requestHandlingCallback_didProvideRenewingRequest_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 40))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
  }
}

void __ckbremote_requestHandlingCallback_didUpdatePersistableKey_block_invoke(void *a1)
{
  (*(void (**)(void, void, void, void))(a1[4] + 48))(a1[5], a1[6], a1[7], a1[8]);
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
  }
}

void __ckbremote_requestHandlingCallback_didExternalProtectionStatusChange_block_invoke(void *a1)
{
  (*(void (**)(void, void, void))(a1[4] + 72))(a1[5], a1[6], a1[7]);
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t ckbremote_invalidate()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = FigXPCCreateBasicMessage();
  if (!v0) {
    uint64_t v0 = FigXPCRemoteClientSendSyncMessage();
  }
  uint64_t v1 = v0;
  FigXPCRelease();
  return v1;
}

uint64_t ckbremote_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  FigSimpleMutexDestroy();
  FigXPCRelease();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 88);
  if (v1) {
    dispatch_release(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 80);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 136);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 128);
  if (v4) {
    CFRelease(v4);
  }
  return FigXPCRemoteClientKillServerOnTimeout();
}

CFStringRef ckbremote_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigContentKeyBossRemote %p %lld]", a1, *DerivedStorage);
}

uint64_t ckbremote_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    return FigXPCSendStdCopyPropertyMessage();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckbremote_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    return FigXPCSendStdSetPropertyMessage();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckbremote_processRequestEntry(uint64_t a1, uint64_t a2, int64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, int64_t *a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = FigXPCCreateBasicMessage();
  if (v15 || (uint64_t v15 = FigContentKeyBossClientServerXPC_SerializeKeyRequestParams(0, a2), v15))
  {
    uint64_t v16 = v15;
  }
  else
  {
    xpc_dictionary_set_int64(0, ".groupID", a3);
    xpc_dictionary_set_BOOL(0, ".reuseExistingKeyFromAnyGroup", a4 != 0);
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
    if (*(unsigned char *)(DerivedStorage + 96))
    {
      FigSignalErrorAt();
    }
    else
    {
      if (a7)
      {
        *(unsigned char *)(DerivedStorage + 96) = 1;
        *(void *)(DerivedStorage + 104) = *a7;
        *(void *)(DerivedStorage + 112) = a7[1];
        *(void *)(DerivedStorage + 120) = a7[2];
      }
      if (!*(void *)(DerivedStorage + 128)) {
        *(void *)(DerivedStorage + 128) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      }
      if (!*(void *)(DerivedStorage + 136)) {
        *(void *)(DerivedStorage + 136) = FigXPCRetain();
      }
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    if (a7)
    {
      if (a7[1]) {
        xpc_dictionary_set_BOOL(0, ".installDidSucceed", 1);
      }
      if (a7[2]) {
        xpc_dictionary_set_BOOL(0, ".installDidFail", 1);
      }
    }
    uint64_t v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v16) {
      *a10 = xpc_dictionary_get_int64(0, ".requestID");
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v16;
}

uint64_t ckb_createRequestDataEntry(uint64_t a1, int64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5
    || (xpc_dictionary_set_int64(0, ".requestID", a2),
        uint64_t v5 = FigContentKeyBossClientServerXPC_SerializeKeyRequestDataParams(0, a3),
        v5))
  {
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v6) {
      FigXPCMessageCopyCFData();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t ckb_createPersistableKeyDataEntry(uint64_t a1, int64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3 || (xpc_dictionary_set_int64(0, ".requestID", a2), uint64_t v3 = FigXPCMessageSetCFData(), v3))
  {
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4) {
      FigXPCMessageCopyCFData();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t ckb_processResponseEntry(uint64_t a1, int64_t a2, uint64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (!v5)
  {
    xpc_dictionary_set_int64(0, ".requestID", a2);
    uint64_t v5 = FigContentKeyBossClientServerXPC_SerializeKeyResponseSpecifier(0, a3);
    if (!v5) {
      uint64_t v5 = FigXPCRemoteClientSendAsyncMessage();
    }
  }
  uint64_t v6 = v5;
  FigXPCRelease();
  return v6;
}

uint64_t ckb_processResponseErrorEntry(uint64_t a1, int64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (!v3)
  {
    xpc_dictionary_set_int64(0, ".requestID", a2);
    uint64_t v3 = FigXPCMessageSetCFError();
    if (!v3) {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  uint64_t v4 = v3;
  FigXPCRelease();
  return v4;
}

uint64_t ckb_renewEntry(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = FigXPCCreateBasicMessage();
  if (v10 || (uint64_t v10 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a2), v10))
  {
    uint64_t v12 = v10;
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
    if (*(unsigned char *)(DerivedStorage + 96))
    {
      FigSignalErrorAt();
    }
    else
    {
      if (a3)
      {
        *(unsigned char *)(DerivedStorage + 96) = 1;
        *(void *)(DerivedStorage + 104) = *a3;
        *(void *)(DerivedStorage + 112) = a3[1];
        *(void *)(DerivedStorage + 120) = a3[2];
      }
      if (!*(void *)(DerivedStorage + 128)) {
        *(void *)(DerivedStorage + 128) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      }
      if (!*(void *)(DerivedStorage + 136)) {
        *(void *)(DerivedStorage + 136) = FigXPCRetain();
      }
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    if (a3)
    {
      if (a3[1]) {
        xpc_dictionary_set_BOOL(0, ".installDidSucceed", 1);
      }
      if (a3[2]) {
        xpc_dictionary_set_BOOL(0, ".installDidFail", 1);
      }
    }
    uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    uint64_t v12 = v11;
    if (a6)
    {
      if (!v11)
      {
        uint64_t v12 = FigXPCMessageCopyCFArray();
        if (!v12) {
          *a6 = 0;
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v12;
}

uint64_t ckb_setRequestHandlingCallbacksEntry(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4) {
    goto LABEL_25;
  }
  MEMORY[0x19970E910](DerivedStorage[2]);
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v5)
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_25:
    uint64_t v9 = v4;
    goto LABEL_23;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (const void *)DerivedStorage[10];
  DerivedStorage[10] = v5;
  CFRetain(v5);
  if (v7) {
    CFRelease(v7);
  }
  if (a2) {
    __copy_assignment_8_8_t0w8_pa0_18803_8_pa0_11926_16_pa0_32929_24_pa0_16857_32_pa0_23185_40_pa0_3293_48(DerivedStorage + 3, a2);
  }
  uint64_t v8 = (void *)DerivedStorage[11];
  if (v8)
  {
    DerivedStorage[11] = 0;
    xpc_release(v8);
  }
  DerivedStorage[11] = FigXPCRetain();
  MEMORY[0x19970E930](DerivedStorage[2]);
  if (a2)
  {
    if (a2[1]) {
      xpc_dictionary_set_BOOL(0, ".installDidProvideKR", 1);
    }
    if (a2[2]) {
      xpc_dictionary_set_BOOL(0, ".installDidProvideRKR", 1);
    }
    if (a2[3]) {
      xpc_dictionary_set_BOOL(0, ".installDidUPK", 1);
    }
    if (a2[4]) {
      xpc_dictionary_set_BOOL(0, ".installDidSucceed", 1);
    }
    if (a2[5]) {
      xpc_dictionary_set_BOOL(0, ".installDidFail", 1);
    }
    if (a2[6]) {
      xpc_dictionary_set_BOOL(0, ".installDidExternalProtectionStatusChange", 1);
    }
  }
  uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
  CFRelease(v6);
LABEL_23:
  FigXPCRelease();
  return v9;
}

uint64_t ckb_createGroupEntry(uint64_t a1, int64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3)
  {
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4) {
      *a2 = xpc_dictionary_get_int64(0, ".groupID");
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t ckb_destroyGroupEntry(uint64_t a1, int64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (!v3)
  {
    xpc_dictionary_set_int64(0, ".groupID", a2);
    uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
  }
  uint64_t v4 = v3;
  FigXPCRelease();
  return v4;
}

uint64_t ckb_associateRequestWithGroupEntry(uint64_t a1, int64_t a2, int64_t a3)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (!v5)
  {
    xpc_dictionary_set_int64(0, ".requestID", a2);
    xpc_dictionary_set_int64(0, ".groupID", a3);
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
  }
  uint64_t v6 = v5;
  FigXPCRelease();
  return v6;
}

uint64_t ckb_setClientManagedBossEntry()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = FigXPCCreateBasicMessage();
  if (!v1)
  {
    xpc_dictionary_set_uint64(0, ".clientManagedBossObjectID", *DerivedStorage);
    uint64_t v1 = FigXPCRemoteClientSendSyncMessage();
  }
  uint64_t v2 = v1;
  FigXPCRelease();
  return v2;
}

uint64_t ckb_createSecureTokenDataEntry(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3 || (uint64_t v3 = FigContentKeyBossClientServerXPC_SerializeSecureTokenRequestSpecifier(0, a2), v3))
  {
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4) {
      FigXPCMessageCopyCFData();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t ckb_getExternalProtectionStatusEntry(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    uint64_t v5 = FigSignalErrorAt();
LABEL_9:
    uint64_t v6 = v5;
    goto LABEL_7;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5) {
    goto LABEL_9;
  }
  uint64_t v5 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a2);
  if (v5) {
    goto LABEL_9;
  }
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v6) {
    *a3 = xpc_dictionary_get_uint64(0, ".externalProtectionStatus");
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t ckb_revokeEntry(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v3 = FigXPCCreateBasicMessage();
    if (v3 || (uint64_t v3 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(0, a2), v3)) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  FigXPCRelease();
  return v4;
}

void *__copy_assignment_8_8_t0w8_pa0_18803_8_pa0_11926_16_pa0_32929_24_pa0_16857_32_pa0_23185_40_pa0_3293_48(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  return result;
}

uint64_t FigGaplessAudioEditCursorCreate(const void *a1, uint64_t a2, uint64_t a3, const __CFAllocator *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
  *(_OWORD *)&v29.source.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
  *(_OWORD *)&v29.target.start.unsigned int value = v5;
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
  *(_OWORD *)&v29.target.start.CMTimeEpoch epoch = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
  *(_OWORD *)&v29.target.duration.CMTimeScale timescale = v6;
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
  *(_OWORD *)&v29.source.start.unsigned int value = *MEMORY[0x1E4F1FA00];
  *(_OWORD *)&v29.source.start.CMTimeEpoch epoch = v7;
  if (!a1
    || (*(unsigned char *)(a2 + 12) & 1) == 0
    || (*(unsigned char *)(a2 + 36) & 1) == 0
    || *(void *)(a2 + 40)
    || (*(void *)(a2 + 24) & 0x8000000000000000) != 0
    || (*(unsigned char *)(a3 + 12) & 1) == 0
    || !a5)
  {
    goto LABEL_5;
  }
  FigEditCursorGetClassID();
  uint64_t v16 = CMDerivedObjectCreate();
  if (v16)
  {
    uint64_t v10 = v16;
    FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = CFRetain(a1);
  long long v19 = *(_OWORD *)(a2 + 16);
  long long v18 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)a2;
  *(_OWORD *)(DerivedStorage + 24) = v19;
  *(_OWORD *)(DerivedStorage + 40) = v18;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a4, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 56) = Mutable;
  if (!Mutable)
  {
LABEL_5:
    uint64_t v9 = FigSignalErrorAt();
LABEL_6:
    uint64_t v10 = v9;
    goto LABEL_7;
  }
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(uint64_t (**)(const void *, CMTimeMapping *))(v22 + 24);
  if (v23)
  {
    uint64_t v9 = v23(a1, &v29);
    if (!v9)
    {
      CMTimeMapping v33 = v29;
      gaecSetGaplessEditSegmentArrayFromOriginalEditSegment(DerivedStorage, (uint64_t)&v33);
      *(_OWORD *)&v28.unsigned int value = *(_OWORD *)a3;
      v28.CMTimeEpoch epoch = *(void *)(a3 + 16);
      CFArrayRef v24 = *(const __CFArray **)(DerivedStorage + 56);
      if (v24)
      {
        CFIndex Count = CFArrayGetCount(v24);
        if (Count >= 1)
        {
          CFIndex v26 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), v26);
            memset(&v33, 0, sizeof(v33));
            CMTimeMappingMakeFromDictionary(&v33, ValueAtIndex);
            if (!v26)
            {
              *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)&v28.value;
              time1.start.CMTimeEpoch epoch = v28.epoch;
              CMTime time2 = v33.target.start;
              if (CMTimeCompare(&time1.start, &time2) < 0) {
                break;
              }
            }
            CMTimeRange time1 = v33.target;
            CMTime time2 = v28;
            if (CMTimeRangeContainsTime(&time1, &time2)) {
              goto LABEL_31;
            }
            if (Count == ++v26) {
              goto LABEL_30;
            }
          }
          CFIndex v26 = 0;
          goto LABEL_31;
        }
      }
      else
      {
        CFIndex Count = 0;
      }
LABEL_30:
      CFIndex v26 = Count - 1;
LABEL_31:
      uint64_t v10 = 0;
      *(void *)(DerivedStorage + 64) = v26;
      *a5 = cf;
      return v10;
    }
    goto LABEL_6;
  }
  uint64_t v10 = 4294954514;
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void gaecSetGaplessEditSegmentArrayFromOriginalEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  CMTimeValue v55 = *MEMORY[0x1E4F1FA00];
  CMTimeScale v56 = *(_DWORD *)(MEMORY[0x1E4F1FA00] + 8);
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 40);
  long long v52 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 24);
  long long v53 = v3;
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA00] + 60);
  CMTimeScale v54 = *(_DWORD *)(MEMORY[0x1E4F1FA00] + 56);
  long long v34 = *MEMORY[0x1E4F1FA00];
  long long v49 = v52;
  long long v50 = v3;
  CMTimeScale v51 = v54;
  CMTimeValue v47 = *(void *)a2;
  CMTimeFlags v5 = *(_DWORD *)(a2 + 12);
  CMTimeScale v48 = *(_DWORD *)(a2 + 8);
  CMTimeEpoch v6 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 40);
  long long v44 = *(_OWORD *)(a2 + 24);
  long long v45 = v7;
  CMTimeFlags v8 = *(_DWORD *)(a2 + 60);
  CMTimeScale v46 = *(_DWORD *)(a2 + 56);
  CMTimeEpoch v9 = *(void *)(a2 + 64);
  CMTimeValue v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  CMTimeEpoch v12 = *(void *)(a2 + 88);
  long long v43 = v34;
  CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1FA00] + 16);
  long long v59 = v52;
  long long v60 = v3;
  CMTimeScale timescale = v54;
  CMTimeEpoch v30 = v13;
  uint64_t value = *(void *)(MEMORY[0x1E4F1FA00] + 72);
  CMTimeFlags v32 = *(_DWORD *)(MEMORY[0x1E4F1FA00] + 84);
  CMTimeEpoch v28 = *(void *)(MEMORY[0x1E4F1FA00] + 88);
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA00] + 64);
  CMTimeScale v27 = *(_DWORD *)(MEMORY[0x1E4F1FA00] + 80);
  uint64_t v33 = v11;
  if ((v5 & 0x1D) == 1 || (v8 & 1) == 0 || (v11 & 0x100000000) == 0 || v12 || v10 < 0)
  {
    memset(&v42, 0, sizeof(v42));
    long long v17 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&range.source.start.uint64_t value = *(_OWORD *)(a1 + 8);
    *(_OWORD *)&range.source.start.CMTimeEpoch epoch = v17;
    *(_OWORD *)&range.source.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 40);
    CMTimeRangeGetEnd(&v42, &range.source);
    CMTime v41 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    range.source.start.uint64_t value = v47;
    range.source.start.CMTimeScale timescale = v48;
    range.source.start.CMTimeFlags flags = v5;
    range.source.start.CMTimeEpoch epoch = 0;
    *(_OWORD *)&rhs.start.uint64_t value = *(_OWORD *)(a1 + 8);
    rhs.start.CMTimeEpoch epoch = *(void *)(a1 + 24);
    CMTimeAdd(&v41, &range.source.start, &rhs.start);
    range.source.CMTime start = v42;
    rhs.CMTime start = v41;
    if (CMTimeCompare(&range.source.start, &rhs.start) <= 0)
    {
      rhs.start.uint64_t value = *((void *)&v45 + 1);
      rhs.start.CMTimeScale timescale = v46;
      rhs.start.CMTimeFlags flags = v8;
      rhs.start.CMTimeEpoch epoch = 0;
      rhs.duration.uint64_t value = v10;
      *(void *)&rhs.duration.CMTimeScale timescale = v33;
      rhs.duration.CMTimeEpoch epoch = v12;
      CMTimeMappingMakeEmpty(&range, &rhs);
    }
    else
    {
      rhs.start.uint64_t value = *((void *)&v45 + 1);
      range.source.CMTime start = v41;
      rhs.start.CMTimeScale timescale = v46;
      rhs.start.CMTimeFlags flags = v8;
      rhs.start.CMTimeEpoch epoch = 0;
      rhs.duration.uint64_t value = v10;
      *(void *)&rhs.duration.CMTimeScale timescale = v33;
      rhs.duration.CMTimeEpoch epoch = v12;
      memset(&v38, 0, sizeof(v38));
      *(_OWORD *)&duration.start.uint64_t value = v44;
      duration.start.CMTimeEpoch epoch = v45;
      CMTimeRangeMake(&v38, &range.source.start, &duration.start);
      memset(&v37, 0, sizeof(v37));
      range.source = v38;
      CMTimeRangeGetEnd(&v37, &range.source);
      range.source.CMTime start = v42;
      duration.CMTime start = v37;
      if (CMTimeCompare(&range.source.start, &duration.start) < 0)
      {
        *(_OWORD *)&range.source.start.uint64_t value = v44;
        range.source.start.CMTimeEpoch epoch = v45;
        duration.start.uint64_t value = v10;
        *(void *)&duration.start.CMTimeScale timescale = v33;
        duration.start.CMTimeEpoch epoch = v12;
        int32_t v18 = CMTimeCompare(&range.source.start, &duration.start);
        long long v19 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        *(_OWORD *)&duration.start.uint64_t value = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)&duration.start.CMTimeEpoch epoch = v19;
        *(_OWORD *)&duration.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
        lhs.CMTime start = v42;
        CMTime v36 = v41;
        CMTimeSubtract(&range.source.start, &lhs.start, &v36);
        v38.duratioCFIndex n = range.source.start;
        if (v18)
        {
          range.source.CMTime start = v38.duration;
          lhs.start.uint64_t value = v10;
          *(void *)&lhs.start.CMTimeScale timescale = v33;
          lhs.start.CMTimeEpoch epoch = v12;
          *(_OWORD *)&v36.uint64_t value = v44;
          v36.CMTimeEpoch epoch = v45;
          CMTimeMultiplyTimeByTimeRatio();
        }
        else
        {
          rhs.duratioCFIndex n = v38.duration;
        }
        range.source.start.uint64_t value = *((void *)&v45 + 1);
        range.source.start.CMTimeScale timescale = v46;
        range.source.start.CMTimeFlags flags = v8;
        range.source.start.CMTimeEpoch epoch = 0;
        lhs.CMTime start = rhs.duration;
        CMTimeAdd(&duration.start, &range.source.start, &lhs.start);
        lhs.start.uint64_t value = v10;
        *(void *)&lhs.start.CMTimeScale timescale = v33;
        lhs.start.CMTimeEpoch epoch = v12;
        CMTime v36 = rhs.duration;
        CMTimeSubtract(&range.source.start, &lhs.start, &v36);
        duration.duratioCFIndex n = range.source.start;
        CMTimeRange lhs = duration;
        CMTimeMappingMakeEmpty(&range, &lhs);
        long long v43 = *(_OWORD *)&range.source.start.value;
        long long v59 = *(_OWORD *)&range.source.duration.value;
        long long v60 = *(_OWORD *)&range.source.duration.epoch;
        CMTimeFlags flags = range.target.start.flags;
        CMTimeScale timescale = range.target.start.timescale;
        CMTimeEpoch epoch = range.target.start.epoch;
        CMTimeEpoch v30 = range.source.start.epoch;
        uint64_t value = range.target.duration.value;
        CMTimeFlags v32 = range.target.duration.flags;
        CMTimeScale v27 = range.target.duration.timescale;
        CMTimeEpoch v28 = range.target.duration.epoch;
      }
      duratioCFIndex n = v38;
      CMTimeRange lhs = rhs;
      CMTimeMappingMake(&range, &duration, &lhs);
    }
    lhs.start.uint64_t value = range.source.start.value;
    CMTimeFlags v5 = range.source.start.flags;
    lhs.start.CMTimeScale timescale = range.source.start.timescale;
    *(_OWORD *)&duration.start.uint64_t value = *(_OWORD *)&range.source.duration.value;
    *(_OWORD *)&duration.start.CMTimeEpoch epoch = *(_OWORD *)&range.source.duration.epoch;
    CMTimeFlags v8 = range.target.start.flags;
    duration.duration.CMTimeScale timescale = range.target.start.timescale;
    CMTimeValue v10 = range.target.duration.value;
    CMTimeEpoch v14 = range.target.duration.epoch;
    int v16 = flags & 1;
    if (flags)
    {
      char v20 = v32 & (v28 == 0);
      if (value < 0) {
        char v20 = 0;
      }
      BOOL v21 = (v20 & 1) == 0;
      if (v20) {
        CMTimeEpoch v22 = v6;
      }
      else {
        CMTimeEpoch v22 = v30;
      }
      CMTimeEpoch v23 = epoch;
      if (!v21) {
        CMTimeEpoch v23 = v6;
      }
      CMTimeEpoch epoch = v23;
      CMTimeEpoch v30 = v22;
    }
    uint64_t v33 = *(void *)&range.target.duration.timescale;
    CMTimeEpoch v9 = v6;
  }
  else
  {
    CMTimeEpoch v14 = 0;
    lhs.start.uint64_t value = *(void *)a2;
    lhs.start.CMTimeScale timescale = *(_DWORD *)(a2 + 8);
    long long v15 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)&duration.start.uint64_t value = *(_OWORD *)(a2 + 24);
    *(_OWORD *)&duration.start.CMTimeEpoch epoch = v15;
    duration.duration.CMTimeScale timescale = *(_DWORD *)(a2 + 56);
    int v16 = flags & 1;
  }
  CMTimeValue v55 = lhs.start.value;
  CMTimeScale v56 = lhs.start.timescale;
  long long v52 = *(_OWORD *)&duration.start.value;
  long long v53 = *(_OWORD *)&duration.start.epoch;
  CMTimeScale v54 = duration.duration.timescale;
  long long v35 = v43;
  CMTimeScale v51 = timescale;
  long long v49 = v59;
  long long v50 = v60;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
  *(_OWORD *)&range.source.duration.uint64_t value = v52;
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  range.source.start.uint64_t value = v55;
  range.source.start.CMTimeScale timescale = v56;
  range.source.start.CMTimeFlags flags = v5;
  range.source.start.CMTimeEpoch epoch = v6;
  *(_OWORD *)&range.source.duration.CMTimeEpoch epoch = v53;
  range.target.start.CMTimeScale timescale = v54;
  range.target.start.CMTimeFlags flags = v8;
  range.target.start.CMTimeEpoch epoch = v9;
  range.target.duration.uint64_t value = v10;
  *(void *)&range.target.duration.CMTimeScale timescale = v33;
  range.target.duration.CMTimeEpoch epoch = v14;
  CFDictionaryRef v25 = CMTimeMappingCopyAsDictionary(&range, v24);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v25);
  if (v16)
  {
    if ((v32 & 1) != 0 && !v28 && (value & 0x8000000000000000) == 0)
    {
      *(_OWORD *)&range.source.start.uint64_t value = v35;
      *(_OWORD *)&range.source.duration.uint64_t value = v49;
      range.source.start.CMTimeEpoch epoch = v30;
      *(_OWORD *)&range.source.duration.CMTimeEpoch epoch = v50;
      range.target.start.CMTimeScale timescale = v51;
      range.target.start.CMTimeFlags flags = flags;
      range.target.start.CMTimeEpoch epoch = epoch;
      range.target.duration.uint64_t value = value;
      range.target.duration.CMTimeScale timescale = v27;
      range.target.duration.CMTimeFlags flags = v32;
      range.target.duration.CMTimeEpoch epoch = 0;
      CFDictionaryRef v26 = CMTimeMappingCopyAsDictionary(&range, v24);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v26);
      if (v26) {
        CFRelease(v26);
      }
    }
  }
  if (v25) {
    CFRelease(v25);
  }
}

void gaec_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 56);
  if (v1)
  {
    CFRelease(v1);
  }
}

__CFString *gaec_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v4 = *(_OWORD *)(DerivedStorage + 8);
  long long v5 = *(_OWORD *)(DerivedStorage + 40);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = *(_OWORD *)(DerivedStorage + 24);
  *(_OWORD *)&range.duration.CMTimeScale timescale = v5;
  *(_OWORD *)&range.start.uint64_t value = v4;
  CFStringRef v6 = CMTimeRangeCopyDescription(v3, &range);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigGaplessAudioEditCursor %p GaplessTimeRange %@>", a1, v6);
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

uint64_t gaec_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigEditCursorGetFigBaseObject(*DerivedStorage);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11) {
    return 4294954514;
  }

  return v11(FigBaseObject, a2, a3, a4);
}

uint64_t gaec_Copy(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  uint64_t v5 = *(void *)DerivedStorage;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CMTimeFlags v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v7 + 8);
  if (!v8)
  {
    uint64_t v15 = 4294954514;
    goto LABEL_10;
  }
  uint64_t v9 = v8(v5, &v17);
  if (!v9)
  {
    CFGetAllocator(a1);
    FigEditCursorGetClassID();
    uint64_t v10 = CMDerivedObjectCreate();
    if (v10)
    {
      uint64_t v15 = v10;
      FigSignalErrorAt();
      goto LABEL_10;
    }
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t v11 = v17;
    CFTypeRef v17 = 0;
    long long v12 = *(_OWORD *)(DerivedStorage + 40);
    long long v13 = *(_OWORD *)(DerivedStorage + 24);
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(DerivedStorage + 8);
    *(_OWORD *)(v11 + 24) = v13;
    *(_OWORD *)(v11 + 40) = v12;
    CFGetAllocator(a1);
    uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
    *(void *)(v11 + 56) = MutableCopy;
    if (MutableCopy)
    {
      uint64_t v15 = 0;
      *(void *)(v11 + 64) = *(void *)(DerivedStorage + 64);
      *a2 = 0;
      goto LABEL_10;
    }
    uint64_t v9 = FigSignalErrorAt();
  }
  uint64_t v15 = v9;
LABEL_10:
  if (v17) {
    CFRelease(v17);
  }
  return v15;
}

uint64_t gaec_Step(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = (uint64_t *)DerivedStorage;
  if (a2 >= 1)
  {
    int v5 = a2 + 1;
    uint64_t v6 = (long long *)MEMORY[0x1E4F1FA00];
    while (1)
    {
      CFArrayRef Count = (const __CFArray *)v4[7];
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      uint64_t v8 = v4[8] + 1;
      if ((uint64_t)Count <= v8)
      {
        long long v9 = v6[3];
        long long v44 = v6[2];
        long long v45 = v9;
        long long v10 = v6[5];
        long long v46 = v6[4];
        long long v47 = v10;
        long long v11 = v6[1];
        long long v42 = *v6;
        long long v43 = v11;
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
        if (!v15) {
          return 4294954514;
        }
        uint64_t result = v15(v12, 1);
        if (result) {
          return result;
        }
        uint64_t v17 = *v4;
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v19 = v18 ? v18 : 0;
        char v20 = *(uint64_t (**)(uint64_t, long long *))(v19 + 24);
        if (!v20) {
          return 4294954514;
        }
        uint64_t result = v20(v17, &v42);
        if (result) {
          return result;
        }
        long long v38 = v44;
        long long v39 = v45;
        long long v40 = v46;
        long long v41 = v47;
        long long v36 = v42;
        long long v37 = v43;
        gaecSetGaplessEditSegmentArrayFromOriginalEditSegment((uint64_t)v4, (uint64_t)&v36);
        v4[8] = 0;
      }
      else
      {
        v4[8] = v8;
      }
      if (--v5 <= 1) {
        return 0;
      }
    }
  }
  if ((a2 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v21 = *(void *)(DerivedStorage + 64);
  CMTimeEpoch v22 = (long long *)MEMORY[0x1E4F1FA00];
  while (v21 > 0)
  {
    --v21;
LABEL_37:
    v4[8] = v21;
    if (__CFADD__(a2++, 1)) {
      return 0;
    }
  }
  long long v23 = v22[3];
  long long v44 = v22[2];
  long long v45 = v23;
  long long v24 = v22[5];
  long long v46 = v22[4];
  long long v47 = v24;
  long long v25 = v22[1];
  long long v42 = *v22;
  long long v43 = v25;
  uint64_t v26 = *v4;
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  CMTimeMapping v29 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 16);
  if (v29)
  {
    uint64_t result = v29(v26, 0xFFFFFFFFLL);
    if (result) {
      return result;
    }
    uint64_t v30 = *v4;
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v32 = v31 ? v31 : 0;
    uint64_t v33 = *(uint64_t (**)(uint64_t, long long *))(v32 + 24);
    if (v33)
    {
      uint64_t result = v33(v30, &v42);
      if (result) {
        return result;
      }
      long long v38 = v44;
      long long v39 = v45;
      long long v40 = v46;
      long long v41 = v47;
      long long v36 = v42;
      long long v37 = v43;
      gaecSetGaplessEditSegmentArrayFromOriginalEditSegment((uint64_t)v4, (uint64_t)&v36);
      CFArrayRef v34 = (const __CFArray *)v4[7];
      if (v34) {
        CFArrayRef v34 = (const __CFArray *)CFArrayGetCount(v34);
      }
      uint64_t v21 = (uint64_t)v34 - 1;
      goto LABEL_37;
    }
  }
  return 4294954514;
}

uint64_t gaec_GetEditSegment(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), *(void *)(DerivedStorage + 64));
  memset(&v9, 0, sizeof(v9));
  CMTimeMappingMakeFromDictionary(&v9, ValueAtIndex);
  long long v5 = *(_OWORD *)&v9.target.start.value;
  a2[2] = *(_OWORD *)&v9.source.duration.timescale;
  a2[3] = v5;
  long long v6 = *(_OWORD *)&v9.target.duration.timescale;
  a2[4] = *(_OWORD *)&v9.target.start.epoch;
  a2[5] = v6;
  long long v7 = *(_OWORD *)&v9.source.start.epoch;
  *a2 = *(_OWORD *)&v9.source.start.value;
  a2[1] = v7;
  return 0;
}

uint64_t FigVirtualDisplaySessionGetClassID()
{
  if (FigVirtualDisplaySessionGetClassID_once != -1) {
    dispatch_once(&FigVirtualDisplaySessionGetClassID_once, &__block_literal_global_11);
  }
  return sVirtualDisplaySessionClassID;
}

uint64_t __FigVirtualDisplaySessionGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualDisplaySessionGetTypeID()
{
  if (FigVirtualDisplaySessionGetClassID_once != -1) {
    dispatch_once(&FigVirtualDisplaySessionGetClassID_once, &__block_literal_global_11);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigVirtualDisplaySessionIsIdle(uint64_t a1, BOOL *a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  long long v6 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = v6(a1, @"IsIdle", *MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v8 = cf;
  if (!v7) {
    *a2 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  }
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

CFStringRef virtualDisplaySessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVirtualDisplaySession %p]", a1);
}

void feServer_LoadCelestial()
{
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.MediaToolbox");
  if (BundleWithIdentifier)
  {
    CFURLRef v1 = CFBundleCopyBundleURL(BundleWithIdentifier);
    if (v1)
    {
      CFURLRef v2 = v1;
      CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFURLRef v4 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"../../PrivateFrameworks/Celestial.framework", v1);
      if (v4)
      {
        CFURLRef v5 = v4;
        feServer_LoadCelestial_resultBundle = (uint64_t)CFBundleCreate(v3, v4);
        CFRelease(v5);
      }
      CFRelease(v2);
    }
  }
}

uint64_t FigMediaServerStop()
{
  return 0;
}

uint64_t FigInitializePlayerProcess()
{
  GSInitialize();
  FigPlaybackMemoryReporterStart();
  FigSandboxRegistrationServerStart();
  feServer_LoadCelestial();
  FigShared_OneTimeInitialization();
  out_tokeCFIndex n = 0;
  notify_register_dispatch("com.apple.language.changed", &out_token, MEMORY[0x1E4F14428], &__block_literal_global_12);
  uint64_t v0 = (void *)FigOSTransactionCreate();
  FigControlCommandsStartServer();
  CFDictionaryRef ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartCPECryptorServer")) {
    FigCPECryptorStartServer();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartCPEServer")) {
    FigCPEServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartContentKeySessionServer")) {
    FigContentKeyBossStartServer();
  }
  FigContentKeySessionStartServer();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartCustomURLLoaderServer")) {
    FigCustomURLLoaderServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartByteStreamServer")) {
    FigByteStreamServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartFormatReaderServer")) {
    FigFormatReaderServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSampleGeneratorServer")) {
    FigSampleGeneratorServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetServer")) {
    FigAssetServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartMutableCompositionServer")) {
    FigMutableCompositionServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetImageGeneratorServer")) {
    FigAssetImageGeneratorServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartMTAudioProcessingTapServer")) {
    MTAudioProcessingTapServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"VideoCompositorServer")) {
    FigVideoCompositorServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartPlayerServer")) {
    FigPlayerServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVideoQueueServer")) {
    FigVideoQueueServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartRemakerServer")) {
    FigRemakerServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetDownloaderServer")) {
    FigAssetDownloaderStartServer();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetCacheInspectorServer")) {
    FigAssetCacheInspectorStartServer();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSampleBufferAudioRendererServer")) {
    FigSampleBufferAudioRendererServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSampleBufferRenderSynchronizerServer")) {
    FigSampleBufferRenderSynchronizerServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVideoTargetServer")) {
    FigVideoTargetStartServer();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVisualContextServer")) {
    FigVisualContextServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartNeroidServer")) {
    FigNeroidStartServer();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartMetricEventTimelineStartServer")) {
    FigMetricEventTimelineStartServer();
  }
  if (ModelSpecificPropertyList) {
    CFRelease(ModelSpecificPropertyList);
  }
  if (v0) {
    os_release(v0);
  }
  FigStartMonitoringNetworkActivity();
  CelestialIsAudioAccessory();
  if (FigGetCFPreferenceNumberWithDefault())
  {
    uint64_t v3 = 0;
    PKDGetSystemCPC(&v3);
  }
  return FigGetCFPreferenceNumberWithDefault();
}

uint64_t FigInitializeParserProcess()
{
  FigMediaparserdUtilities_StartMediaparserdUtilitiesServer();
  FigFormatReaderServerStart();
  FigMutableMovieServerStart();
  FigManifoldStartServer();
  PlaylistFileParserServer();
  FigStreamPlaylistParserStartServer();
  FigSessionDataParserStartServer();
  FigFairplayPSSHAtomParserStartServer();
  FigSteeringParserStartServer();
  FigXMLServiceStartServer();

  return FigCaptionGroupConverterFromSampleBufferStartServer();
}

void __feServer_initializeLanguageChangedNotification_block_invoke()
{
}

BOOL feServer_ShouldStartSubServer(const __CFDictionary *a1, const void *a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t value = 0;
  if (CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value)
    && (CFTypeID v2 = CFGetTypeID(value), v2 == CFBooleanGetTypeID()))
  {
    return value == (void *)*MEMORY[0x1E4F1CFD0];
  }
  else
  {
    return 1;
  }
}

uint64_t ckbutil_registerClass(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

uint64_t FigContentKeyBossGetClassID()
{
  if (sRegisterFigContentKeyBossClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigContentKeyBossClassIDOnce, 0, (dispatch_function_t)RegisterFigContentKeyBossType);
  }
  return sFigContentKeyBossClassID;
}

uint64_t RegisterFigContentKeyBossType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigContentKeyBossGetTypeID()
{
  if (sRegisterFigContentKeyBossClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigContentKeyBossClassIDOnce, 0, (dispatch_function_t)RegisterFigContentKeyBossType);
  }

  return CMBaseClassGetCFTypeID();
}

CFStringRef ckb_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigContentKeyBoss %p]", a1);
}

uint64_t ckbutil_getNextRequestID()
{
  return FigAtomicIncrement64() << 8;
}

uint64_t ckrp_getTypeID()
{
  long long v1 = xmmword_1E5791348;
  if (ckrp_getTypeID_once != -1) {
    dispatch_once_f(&ckrp_getTypeID_once, &v1, (dispatch_function_t)ckbutil_registerClass);
  }
  return ckrp_getTypeID_typeID;
}

uint64_t FigContentKeyRequestParamsGetKeySpecifier(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t FigContentKeyRequestParamsGetSupportsOfflineKey(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t FigContentKeyRequestParamsCreate(uint64_t a1, const void *a2, char a3, int a4, int a5, uint64_t a6, const void *a7, const void *a8, uint64_t a9, char a10, char a11, uint64_t a12, uint64_t *a13)
{
  if (a13 && (ckrp_getTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v20 = Instance;
    if (a2) {
      CFTypeRef v21 = CFRetain(a2);
    }
    else {
      CFTypeRef v21 = 0;
    }
    *(void *)(v20 + 16) = v21;
    *(unsigned char *)(v20 + 24) = a3;
    *(_DWORD *)(v20 + 28) = a4;
    *(_DWORD *)(v20 + 32) = a5;
    if (a7) {
      CFTypeRef v22 = CFRetain(a7);
    }
    else {
      CFTypeRef v22 = 0;
    }
    *(void *)(v20 + 40) = v22;
    if (a8) {
      CFTypeRef v23 = CFRetain(a8);
    }
    else {
      CFTypeRef v23 = 0;
    }
    *(void *)(v20 + 48) = v23;
    *(void *)(v20 + 56) = a9;
    *(unsigned char *)(v20 + 64) = a10;
    *(unsigned char *)(v20 + 65) = a11;
    *(unsigned char *)(v20 + 66) = FigCFDictionaryGetBooleanValue() == *MEMORY[0x1E4F1CFD0];
    *a13 = v20;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigContentKeyRequestDataParamsCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, char a8, char a9, uint64_t *a10)
{
  if (a10)
  {
    long long v25 = xmmword_1E5791358;
    if (ckrdp_getTypeID_once != -1) {
      dispatch_once_f(&ckrdp_getTypeID_once, &v25, (dispatch_function_t)ckbutil_registerClass);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v18 = Instance;
      if (a2) {
        CFTypeRef v19 = CFRetain(a2);
      }
      else {
        CFTypeRef v19 = 0;
      }
      *(void *)(v18 + 16) = v19;
      if (a3) {
        CFTypeRef v20 = CFRetain(a3);
      }
      else {
        CFTypeRef v20 = 0;
      }
      *(void *)(v18 + 24) = v20;
      if (a4) {
        CFTypeRef v21 = CFRetain(a4);
      }
      else {
        CFTypeRef v21 = 0;
      }
      *(void *)(v18 + 32) = v21;
      if (a5) {
        CFTypeRef v22 = CFRetain(a5);
      }
      else {
        CFTypeRef v22 = 0;
      }
      *(void *)(v18 + 40) = v22;
      if (a6) {
        CFTypeRef v23 = CFRetain(a6);
      }
      else {
        CFTypeRef v23 = 0;
      }
      uint64_t result = 0;
      *(void *)(v18 + 48) = v23;
      *(_DWORD *)(v18 + 56) = a7;
      *(unsigned char *)(v18 + 60) = a8;
      *(unsigned char *)(v18 + 61) = a9;
      *a10 = v18;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeyResponseParamsCreate(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, void *a6)
{
  if (a6)
  {
    long long v18 = xmmword_1E5791368;
    if (ckrsp_getTypeID_once != -1) {
      dispatch_once_f(&ckrsp_getTypeID_once, &v18, (dispatch_function_t)ckbutil_registerClass);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v13 = (void *)Instance;
      *(_DWORD *)(Instance + 16) = a2;
      if (a3) {
        CFTypeRef v14 = CFRetain(a3);
      }
      else {
        CFTypeRef v14 = 0;
      }
      v13[3] = v14;
      if (a4) {
        CFTypeRef v15 = CFRetain(a4);
      }
      else {
        CFTypeRef v15 = 0;
      }
      v13[4] = v15;
      if (a5) {
        CFTypeRef v16 = CFRetain(a5);
      }
      else {
        CFTypeRef v16 = 0;
      }
      uint64_t result = 0;
      v13[5] = v16;
      *a6 = v13;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeySecureTokenRequestParamsCreate(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, uint64_t *a8)
{
  if (a8)
  {
    long long v23 = xmmword_1E5791378;
    if (ckstrp_getTypeID_once != -1) {
      dispatch_once_f(&ckstrp_getTypeID_once, &v23, (dispatch_function_t)ckbutil_registerClass);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v17 = Instance;
      *(_DWORD *)(Instance + 16) = a2;
      if (a3) {
        CFTypeRef v18 = CFRetain(a3);
      }
      else {
        CFTypeRef v18 = 0;
      }
      *(void *)(v17 + 24) = v18;
      if (a4) {
        CFTypeRef v19 = CFRetain(a4);
      }
      else {
        CFTypeRef v19 = 0;
      }
      *(void *)(v17 + 32) = v19;
      if (a5) {
        CFTypeRef v20 = CFRetain(a5);
      }
      else {
        CFTypeRef v20 = 0;
      }
      *(void *)(v17 + 40) = v20;
      if (a6) {
        CFTypeRef v21 = CFRetain(a6);
      }
      else {
        CFTypeRef v21 = 0;
      }
      uint64_t result = 0;
      *(void *)(v17 + 48) = v21;
      *(_DWORD *)(v17 + 56) = a7;
      *a8 = v17;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigContentKeyBossCreate(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3) {
    return FigSignalErrorAt();
  }
  FigContentKeyBossGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    return v5;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 152) = FigIsItOKToLogURLs();
  if (a2)
  {
    CFNumberRef Value = CFDictionaryGetValue(a2, @"kCKBCO_ClientAuditToken");
    if (Value) {
      CFNumberRef Value = CFRetain(Value);
    }
    *(void *)(DerivedStorage + 144) = Value;
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v8 == CFDictionaryGetValue(a2, @"kCKBCO_DoNotLogURLs")) {
      *(unsigned char *)(DerivedStorage + 152) = 0;
    }
  }
  *(unsigned char *)(DerivedStorage + 8) = 1;
  uint64_t v9 = FigDispatchQueueCreateWithPriority();
  *(void *)uint64_t DerivedStorage = v9;
  if (!v9) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, 0, MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 104) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v12, 0, 0, MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 112) = v13;
  if (!v13) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v14, 0, 0, 0);
  *(void *)(DerivedStorage + 120) = v15;
  if (!v15) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v16, 0, 0, 0);
  *(void *)(DerivedStorage + 128) = v17;
  if (!v17) {
    return FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 96) = 6;
  *(unsigned char *)(DerivedStorage + 9) = 1;
  *(void *)(DerivedStorage + 16) = -1;
  uint64_t v5 = FigRetainProxyCreate();
  if (v5) {
    return v5;
  }
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v19 = 0;
  *a3 = 0;
  return v19;
}

void ckrp_finalize(void *a1)
{
  CFTypeID v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  CFURLRef v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t ckrp_equal(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigCFEqual();
  if (result) {
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
  }
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return result;
}

CFHashCode ckrp_hash(uint64_t a1)
{
  Identifier = (const void *)FigContentKeySpecifierGetIdentifier(*(void *)(a1 + 16));

  return CFHash(Identifier);
}

CFStringRef ckrp_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t Identifier = FigContentKeySpecifierGetIdentifier(*(void *)(a1 + 16));
  KeySysteCFIndex m = FigContentKeySpecifierGetKeySystem(*(void *)(a1 + 16));
  uint64_t EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod(*(void *)(a1 + 16));
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"%@_%d_%d_%d_%d", Identifier, KeySystem, EncryptionMethod, *(unsigned __int8 *)(a1 + 24), *(unsigned int *)(a1 + 28));
}

void ckrdp_finalize(void *a1)
{
  CFTypeID v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CFURLRef v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
  }
}

void ckrsp_finalize(void *a1)
{
  CFTypeID v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  CFURLRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
  }
}

void ckstrp_finalize(void *a1)
{
  CFTypeID v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CFURLRef v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t ckb_invalidate(void *a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, a1, (dispatch_function_t)ckb_invalidateOnQueue);
  return 0;
}

void ckb_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ckb_invalidateOnQueue();
  long long v1 = *(const void **)(DerivedStorage + 168);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeID v2 = *(NSObject **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    dispatch_release(v2);
  }
}

CFStringRef ckb_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigContentKeyBoss %p]", a1);
}

uint64_t ckb_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  uint64_t v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_setPropertyDispatch);
  return v9;
}

void ckb_invalidateOnQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    FigRetainProxyInvalidate();
    *(unsigned char *)(DerivedStorage + 176) = 1;
    long long v1 = *(const void **)(DerivedStorage + 104);
    if (v1) {
      CFRelease(v1);
    }
    CFTypeID v2 = *(const void **)(DerivedStorage + 112);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = *(const void **)(DerivedStorage + 120);
    if (v3) {
      CFRelease(v3);
    }
    CFURLRef v4 = *(const void **)(DerivedStorage + 128);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)(DerivedStorage + 144);
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)(DerivedStorage + 160);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = *(const void **)(DerivedStorage + 24);
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = *(NSObject **)(DerivedStorage + 88);
    if (v8)
    {
      dispatch_release(v8);
    }
  }
}

uint64_t ckb_setPropertyDispatch(uint64_t a1)
{
  CFTypeID v2 = *(const void **)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    uint64_t result = FigSignalErrorAt();
  }
  else if (FigCFEqual())
  {
    uint64_t result = 0;
    *(unsigned char *)(DerivedStorage + 8) = v2 == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else if (FigCFEqual())
  {
    uint64_t result = 0;
    *(unsigned char *)(DerivedStorage + 9) = v2 == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else if (FigCFEqual())
  {
    if (v2) {
      CFTypeRef v5 = CFRetain(v2);
    }
    else {
      CFTypeRef v5 = 0;
    }
    uint64_t result = 0;
    *(void *)(DerivedStorage + 136) = v5;
  }
  else
  {
    uint64_t result = 4294954512;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t ckb_processRequestEntry(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  if (a2 && a10)
  {
    context[0] = a1;
    context[1] = a2;
    context[2] = a3;
    LOBYTE(v21) = a4;
    *((void *)&v21 + 1) = a5;
    *(void *)&long long v22 = a6;
    *((void *)&v22 + 1) = a7;
    *(void *)&long long v23 = a8;
    *((void *)&v23 + 1) = a9;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_processRequestDispatch);
    *a10 = v24;
    return DWORD2(v24);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_createRequestDataEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (a3 && a4)
  {
    context[0] = a1;
    context[1] = a2;
    context[2] = a3;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_createRequestDataDispatch);
    *a4 = v12;
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_createPersistableKeyDataEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (a3 && a4)
  {
    context[0] = a1;
    context[1] = a2;
    context[2] = a3;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_createPersistableKeyDataDispatch);
    *a4 = v12;
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_processResponseEntry_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  if (a3)
  {
    v8[0] = a1;
    v8[1] = a2;
    v8[2] = a3;
    dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_processResponseDispatch);
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_processResponseErrorEntry_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  if (a3)
  {
    v8[0] = a1;
    v8[1] = a2;
    v8[2] = a3;
    dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_processResponseErrorDispatch);
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_renewEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[5] = a6;
  uint64_t v15 = 0;
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  void context[3] = a4;
  context[4] = a5;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_renewDispatch);
  return v15;
}

uint64_t ckb_setRequestHandlingCallbacksEntry_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  if (a2 && a3 && a4)
  {
    context[0] = a1;
    context[1] = a2;
    context[2] = a3;
    void context[3] = a4;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_setRequestHandlingCallbacksDispatch);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_createGroupEntry_0(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (a2)
  {
    uint64_t context = a1;
    dispatch_sync_f(*DerivedStorage, &context, (dispatch_function_t)ckb_createGroupDispatch);
    *a2 = v7;
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_destroyGroupEntry_0(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  uint64_t v7 = 0;
  context[0] = a1;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_destroyGroupDispatch);
  return v7;
}

uint64_t ckb_associateRequestWithGroupEntry_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  uint64_t v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_associateRequestWithGroupDispatch);
  return v9;
}

uint64_t ckb_createSecureTokenDataEntry_0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a2 && a3)
  {
    v8[0] = a1;
    v8[1] = a2;
    dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_createSecureTokenDataRecDispatch);
    *a3 = v9;
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_copyAuthorizationTokenEntry(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a2 && a3)
  {
    v8[0] = a1;
    v8[1] = a2;
    dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckb_copyAuthorizationTokenDispatch);
    *a3 = v9;
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_getExternalProtectionStatusEntry_0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  if (a2 && a3)
  {
    context[0] = a1;
    context[1] = a2;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_getExternalProtectionStatusDispatch);
    uint64_t result = HIDWORD(v9);
    *a3 = v9;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

uint64_t ckb_setAllowedRequestHandlersEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  uint64_t v9 = 0;
  context[0] = a1;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_setAllowedRequestHandlersDispatch);
  uint64_t v5 = v9;
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5;
}

uint64_t ckb_revokeEntry_0(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  if (a2)
  {
    context[0] = a1;
    context[1] = a2;
    dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckb_revokeDispatch);
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void ckb_processRequestDispatch(uint64_t a1)
{
  uint64_t v1 = a1;
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeID v2 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  CFURLRef v4 = *(char **)(a1 + 16);
  int v54 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v5 = *(const void **)(a1 + 40);
  long long v50 = *(const void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(NSObject **)(a1 + 64);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  CMTimeValue v55 = 0;
  uint64_t v9 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  key = v4;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    int Group = FigSignalErrorAt();
    goto LABEL_60;
  }
  CMTimeScale v48 = v5;
  long long v53 = v6;
  if ((unint64_t)(v4 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    int Group = ckb_ensureAndGetGroup(v2, v4);
    if (Group) {
      goto LABEL_60;
    }
  }
  uint64_t v11 = *(const void **)(v3 + 16);
  cf[0] = 0;
  CFDictionaryRef v12 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 104);
  if (v54)
  {
    CMTimeScale v51 = v8;
    uint64_t v47 = v1;
    CFMutableDictionaryRef v13 = v4;
    uint64_t v14 = v3;
    uint64_t v15 = v2;
    uint64_t v16 = v7;
    CFArrayRef v17 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
    CFIndex Count = CFArrayGetCount(v17);
    if (Count < 1)
    {
      int v24 = 0;
      CFTypeID v2 = v15;
      uint64_t v3 = v14;
LABEL_16:
      CFURLRef v4 = v13;
      uint64_t v1 = v47;
      if (!v17)
      {
LABEL_18:
        uint64_t v8 = v51;
        if (v24) {
          goto LABEL_53;
        }
        goto LABEL_19;
      }
LABEL_17:
      CFRelease(v17);
      goto LABEL_18;
    }
    CFIndex v19 = Count;
    CFIndex v20 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v17, v20);
      int RequestByKeySpecifier = ckg_getRequestByKeySpecifier((uint64_t)ValueAtIndex, v11, cf);
      if (RequestByKeySpecifier)
      {
        int v24 = RequestByKeySpecifier;
        goto LABEL_11;
      }
      long long v23 = (uint64_t *)cf[0];
      if (cf[0]) {
        break;
      }
      if (v19 == ++v20)
      {
        int v24 = 0;
LABEL_11:
        uint64_t v7 = v16;
        CFTypeID v2 = v15;
        uint64_t v3 = v14;
        uint64_t v9 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        goto LABEL_16;
      }
    }
    uint64_t v25 = v16;
    CFTypeID v2 = v15;
    uint64_t v3 = v14;
    uint64_t v9 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    CFURLRef v4 = v13;
    uint64_t v1 = v47;
LABEL_31:
    int v24 = 0;
    CMTimeValue v55 = v23;
    uint64_t v57 = ValueAtIndex;
    uint64_t v7 = v25;
    if (!v17) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v25 = v7;
  CFNumberRef Value = CFDictionaryGetValue(v12, v4);
  if (Value)
  {
    CFDictionaryRef ValueAtIndex = Value;
    long long v23 = (uint64_t *)CFDictionaryGetValue(*((CFDictionaryRef *)Value + 7), v11);
    cf[0] = v23;
    if (!v23)
    {
      uint64_t v7 = v25;
      goto LABEL_25;
    }
    CMTimeScale v51 = v8;
    CFArrayRef v17 = 0;
    goto LABEL_31;
  }
  int v24 = FigSignalErrorAt();
  if (v24) {
    goto LABEL_53;
  }
LABEL_19:
  uint64_t v27 = v55;
  if (!v55)
  {
LABEL_25:
    int Group = ckb_getExistingKeyIfAny((uint64_t)v2, *(void *)(v3 + 16), v4, v54, &v56, &v57);
    if (!Group)
    {
      if (v56)
      {
        cf[0] = 0;
        uint64_t v30 = *(void *)(v56 + 80);
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v33 = v32 ? v32 : 0;
        CFArrayRef v34 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v33 + 48);
        if (v34)
        {
          v34(v30, *MEMORY[0x1E4F1FDB0], AllocatorForMedia, cf);
          CFTypeRef v35 = cf[0];
          CFTypeRef v36 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
        else
        {
          CFTypeRef v35 = 0;
          CFTypeRef v36 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        }
        if (v35 == v36) {
          goto LABEL_42;
        }
        int v37 = *(_DWORD *)(v56 + 40);
        if (v37 == 2)
        {
          long long v38 = v57;
          long long v39 = *(const void **)(DerivedStorage + 136);
          uint64_t v40 = FigAtomicIncrement64();
          int RequestWithRequestID = ckb_createRequestWithRequestID(v2, (void *)v3, v38, v50, v48, v39, 0, v40 << 8, (uint64_t *)&v55);
          if (RequestWithRequestID)
          {
            int v24 = RequestWithRequestID;
          }
          else
          {
            FigCFDictionarySetBoolean();
            int v24 = ckg_ensureContentKeyForRequest((uint64_t)v57, v55);
            if (!v24)
            {
              ckr_addStatusCallbacks((uint64_t)v55, v53, v7, v8);
              ckb_transitionRequestToTerminalStateWithOSStatus(v2, v57, (uint64_t)v55, 0);
            }
          }
          goto LABEL_53;
        }
        if (v37 == 3) {
LABEL_42:
        }
          ck_resetState(v56);
      }
      long long v42 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), key);
      uint64_t v57 = v42;
      long long v43 = *(const void **)(DerivedStorage + 136);
      uint64_t v44 = FigAtomicIncrement64();
      int started = ckb_createRequestWithRequestID(v2, (void *)v3, v42, v50, v48, v43, 0, v44 << 8, (uint64_t *)&v55);
      if (!started)
      {
        ckr_addStatusCallbacks((uint64_t)v55, v53, v7, v8);
        int started = ckb_startRequest(v2, v57, v55);
      }
      int v24 = started;
      goto LABEL_53;
    }
LABEL_60:
    int v24 = Group;
    goto LABEL_53;
  }
  if (*((_DWORD *)v55 + 14) >= 4u)
  {
    int v24 = FigSignalErrorAt();
  }
  else
  {
    ckr_addStatusCallbacks((uint64_t)v55, v53, v7, v8);
    uint64_t v28 = v55[3];
    if (!*(unsigned char *)(v28 + 65))
    {
      if (!*(unsigned char *)(v3 + 65))
      {
        int v24 = 0;
        goto LABEL_53;
      }
      *(unsigned char *)(v28 + 65) = 1;
      if (*((_DWORD *)v9 + 780))
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ckb_startRequestTimer((uint64_t)v2, (uint64_t)v57, (uint64_t)v27);
    }
    int v24 = 0;
  }
LABEL_53:
  if (v55) {
    *(void *)(v1 + 72) = v55[4];
  }
  if (*((_DWORD *)v9 + 780))
  {
    long long v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(v1 + 80) = v24;
}

uint64_t ckb_ensureAndGetGroup(const void *a1, const void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), a2))
  {
    CFAllocatorRef v5 = CFGetAllocator(a1);
    char v6 = *(unsigned char *)(DerivedStorage + 8);
    uint64_t v7 = *(const void **)(DerivedStorage + 144);
    context[0] = xmmword_1E5791388;
    if (ckg_getTypeID_once != -1) {
      dispatch_once_f(&ckg_getTypeID_once, context, (dispatch_function_t)ckbutil_registerClass);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v9 = (void *)Instance;
      *(unsigned char *)(Instance + 64) = v6;
      *(void *)(Instance + 16) = a2;
      *(void *)(Instance + 24) = a1;
      if (v7) {
        CFTypeRef v10 = CFRetain(v7);
      }
      else {
        CFTypeRef v10 = 0;
      }
      v9[9] = v10;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, 0, MEMORY[0x1E4F1D540]);
      v9[6] = Mutable;
      if (Mutable)
      {
        CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        v9[5] = v12;
        if (v12)
        {
          CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          v9[7] = v13;
          if (v13)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a2, v9);
            CFRelease(v9);
LABEL_12:
            if (dword_1E9350C30)
            {
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            return 0;
          }
        }
      }
      uint64_t v15 = FigSignalErrorAt();
      CFRelease(v9);
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
    }
    if (v15) {
      return v15;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a2, 0);
    goto LABEL_12;
  }
  return 0;
}

uint64_t ckr_addStatusCallbacks(uint64_t result, void *a2, uint64_t a3, NSObject *a4)
{
  if (result)
  {
    if (!a2 || !a3 || !a4) {
      return result;
    }
    uint64_t v6 = result;
    uint64_t v7 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040E394BF8BuLL);
    if (v7)
    {
      uint64_t v8 = v7;
      dispatch_retain(a4);
      v8[6] = a4;
      void v8[3] = *a2;
      v8[4] = a2[1];
      v8[5] = a2[2];
      uint64_t result = FigCFWeakReferenceHolderCreateWithReferencedObject();
      void v8[2] = result;
      uint64_t v9 = *(void **)(v6 + 224);
      *uint64_t v8 = 0;
      v8[1] = v9;
      *uint64_t v9 = v8;
      *(void *)(v6 + 224) = v8;
      return result;
    }
  }

  return FigSignalErrorAt();
}

void ckb_startRequestTimer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(*(void *)(a3 + 24) + 65))
  {
    if (a2 && (uint64_t v6 = (NSObject **)DerivedStorage, (v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL)) != 0))
    {
      uint64_t v8 = v7;
      *uint64_t v7 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v8[1] = FigCFWeakReferenceHolderCreateWithReferencedObject();
      void v8[2] = FigCFWeakReferenceHolderCreateWithReferencedObject();
      uint64_t v9 = *v6;
      if (v9)
      {
        ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a3 + 208));
        if (!ckbutil_createAndStartTimer(20, v8, (void (__cdecl *)(void *))ckb_requestTimerEventHandler, (void (__cdecl *)(void *))ckb_requestTimerFinalizer, v9, (NSObject **)(a3 + 208)))
        {
          if (dword_1E9350C30)
          {
            os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return;
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      ckb_requestTimerFinalizer((const void **)v8);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t ckb_getExistingKeyIfAny(uint64_t a1, uint64_t a2, const void *a3, int a4, void *a5, void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v25 = 0;
  if (a5 && a6)
  {
    CFDictionaryRef v12 = *(const __CFDictionary **)(DerivedStorage + 104);
    if (a4)
    {
      CFArrayRef v13 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
      CFIndex Count = CFArrayGetCount(v13);
      if (Count < 1)
      {
LABEL_9:
        uint64_t v20 = 0;
        if (!v13) {
          return v20;
        }
      }
      else
      {
        CFIndex v15 = Count;
        CFIndex v16 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v13, v16);
          uint64_t ContentKey = ckg_getContentKey((uint64_t)ValueAtIndex, a2, &v25);
          if (ContentKey) {
            break;
          }
          CFIndex v19 = v25;
          if (v25) {
            goto LABEL_15;
          }
          if (v15 == ++v16) {
            goto LABEL_9;
          }
        }
        uint64_t v20 = ContentKey;
        if (!v13) {
          return v20;
        }
      }
      goto LABEL_16;
    }
    CFNumberRef Value = (const __CFDictionary **)CFDictionaryGetValue(v12, a3);
    if (Value)
    {
      CFDictionaryRef ValueAtIndex = Value;
      CFDictionaryRef v22 = Value[5];
      uint64_t Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2);
      CFIndex v19 = CFDictionaryGetValue(v22, Identifier);
      uint64_t v25 = v19;
      if (!v19) {
        return 0;
      }
      CFArrayRef v13 = 0;
LABEL_15:
      uint64_t v20 = 0;
      *a5 = v19;
      *a6 = ValueAtIndex;
      if (!v13) {
        return v20;
      }
LABEL_16:
      CFRelease(v13);
      return v20;
    }
  }

  return FigSignalErrorAt();
}

void ck_resetState(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (a1)
  {
    if (FigContentKeySpecifierGetKeySystem(*(void *)(a1 + 16)) == 1)
    {
      FigCreateErrorForOSStatus(4294948136, (CFErrorRef *)&cf);
      CFTypeRef v2 = cf;
      if (!cf)
      {
        FigSignalErrorAt();
LABEL_10:
        if (cf) {
          CFRelease(cf);
        }
        return;
      }
      uint64_t v3 = *(void *)(a1 + 80);
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void (**)(uint64_t, void, CFTypeRef))(v5 + 56);
      if (v6) {
        v6(v3, *MEMORY[0x1E4F1FDC0], v2);
      }
    }
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_10;
  }

  FigSignalErrorAt();
}

uint64_t ckg_ensureContentKeyForRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2[8]) {
      return 0;
    }
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);
    uint64_t Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2[2]);
    CFNumberRef Value = (uint64_t *)CFDictionaryGetValue(v4, Identifier);
    uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    if (Value)
    {
      uint64_t v8 = Value;
      CFRetain(Value);
      goto LABEL_99;
    }
    uint64_t v9 = (uint64_t *)(a1 + 32);
    if (*(void *)(a1 + 32)) {
      goto LABEL_24;
    }
    uint64_t v10 = a2[3];
    int v11 = *(unsigned __int8 *)(a1 + 64);
    int v12 = *(_DWORD *)(v10 + 28);
    if (FigContentKeySpecifierGetKeySystem(*(void *)(v10 + 16)) != 1
      && FigContentKeySpecifierGetKeySystem(*(void *)(v10 + 16)) != 2)
    {
      goto LABEL_24;
    }
    if (*v9)
    {
      CFArrayRef v13 = 0;
      goto LABEL_10;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      uint64_t v22 = FigSignalErrorAt();
      if (!v22) {
        goto LABEL_24;
      }
      return v22;
    }
    CFArrayRef v13 = Mutable;
    CFArrayRef v17 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v18 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v12 == 1) {
      CFIndex v19 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    else {
      CFIndex v19 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"ExternalProtectionMonitorPerCryptor", v19);
    if (v11) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = v17;
    }
    CFDictionarySetValue(v13, @"RequiresReencryptionContext", v20);
    if (FigContentKeySpecifierGetKeySystem(*(void *)(v10 + 16)) == 1)
    {
      long long v21 = kFigCPEProtectionScheme_PKD;
      uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    }
    else
    {
      uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      if (FigContentKeySpecifierGetKeySystem(*(void *)(v10 + 16)) != 2)
      {
        uint64_t v53 = FigSignalErrorAt();
        goto LABEL_86;
      }
      long long v21 = kFigCPEProtectionScheme_BasicAES;
    }
    CMTimeScale v51 = *v21;
    CFAllocatorRef v52 = CFGetAllocator((CFTypeRef)a1);
    uint64_t v53 = FigCPEProtectorCreateForScheme((uint64_t)v52, v51, (uint64_t)v13, a1 + 32);
    if (!v53)
    {
      if (*(_DWORD *)(v10 + 28) != 1 || (uint64_t v54 = *(void *)(v10 + 40)) == 0)
      {
LABEL_10:
        if (!*((_DWORD *)v7 + 780)) {
          goto LABEL_21;
        }
        goto LABEL_11;
      }
      uint64_t v55 = *v9;
      uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v56) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = 0;
      }
      unsigned int v72 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v57 + 56);
      if (v72)
      {
        uint64_t v22 = v72(v55, @"NeroTransport", v54);
        if (!v22 && *((_DWORD *)v7 + 780))
        {
LABEL_11:
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_21:
          if (v13)
          {
            uint64_t v22 = 0;
            goto LABEL_23;
          }
LABEL_24:
          CFGetAllocator((CFTypeRef)a1);
          long long v23 = (const void *)a2[3];
          if (!v23) {
            goto LABEL_120;
          }
          int v24 = (const void *)a2[2];
          uint64_t v26 = *(void *)(a1 + 24);
          uint64_t v25 = *(const void **)(a1 + 32);
          uint64_t v27 = *(const void **)(a1 + 72);
          context[0] = xmmword_1E57913A8;
          if (ck_getTypeID_once != -1) {
            dispatch_once_f(&ck_getTypeID_once, context, (dispatch_function_t)ckbutil_registerClass);
          }
          uint64_t Instance = _CFRuntimeCreateInstance();
          if (!Instance)
          {
LABEL_120:
            uint64_t v22 = FigSignalErrorAt();
LABEL_123:
            if (v22) {
              return v22;
            }
            uint64_t v22 = FigSignalErrorAt();
            if (v22) {
              return v22;
            }
            uint64_t v8 = 0;
            CFTypeRef v69 = 0;
            if (!a2[8]) {
              goto LABEL_101;
            }
            goto LABEL_126;
          }
          uint64_t v8 = (uint64_t *)Instance;
          if (v24) {
            CFTypeRef v29 = CFRetain(v24);
          }
          else {
            CFTypeRef v29 = 0;
          }
          void v8[2] = (uint64_t)v29;
          void v8[3] = (uint64_t)CFRetain(v23);
          if (v25) {
            CFTypeRef v30 = CFRetain(v25);
          }
          else {
            CFTypeRef v30 = 0;
          }
          v8[9] = (uint64_t)v30;
          v8[4] = v26;
          if (v27) {
            CFTypeRef v31 = CFRetain(v27);
          }
          else {
            CFTypeRef v31 = 0;
          }
          v8[7] = (uint64_t)v31;
          uint64_t v32 = FigCFWeakReferenceHolderCreateWithReferencedObject();
          v8[12] = v32;
          if (!v32)
          {
            uint64_t v22 = FigSignalErrorAt();
LABEL_122:
            CFRelease(v8);
            goto LABEL_123;
          }
          uint64_t v33 = v8 + 10;
          if (v8[10])
          {
LABEL_98:
            CFTypeRef v67 = *(__CFDictionary **)(a1 + 40);
            CFTypeRef v68 = (const void *)FigContentKeySpecifierGetIdentifier(a2[2]);
            CFDictionarySetValue(v67, v68, v8);
LABEL_99:
            if (!a2[8])
            {
              CFTypeRef v69 = CFRetain(v8);
LABEL_101:
              uint64_t v22 = 0;
              a2[8] = (uint64_t)v69;
              goto LABEL_102;
            }
LABEL_126:
            uint64_t v22 = FigSignalErrorAt();
            if (v22)
            {
LABEL_104:
              if (v8) {
                CFRelease(v8);
              }
              return v22;
            }
LABEL_102:
            if (*((_DWORD *)v7 + 780))
            {
              CFTypeRef v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            goto LABEL_104;
          }
          uint64_t v34 = v8[3];
          unsigned int v35 = *(_DWORD *)(v34 + 28);
          if (v35 < 2)
          {
            if (FigContentKeySpecifierGetKeySystem(v8[2]) != 1
              && FigContentKeySpecifierGetKeySystem(v8[2]) != 2)
            {
              goto LABEL_98;
            }
            CFAllocatorRef v36 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(v36, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v37)
            {
              long long v38 = v37;
              if (FigContentKeySpecifierGetKeySystem(v8[2]) != 1) {
                goto LABEL_51;
              }
              if (FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 1
                && FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 2
                && FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 3)
              {
                goto LABEL_130;
              }
              if (FigContentKeySpecifierGetEncryptionMethod(v8[2]) == 1
                || FigContentKeySpecifierGetEncryptionMethod(v8[2]) == 3)
              {
                long long v39 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
              }
              else
              {
                if (FigContentKeySpecifierGetEncryptionMethod(v8[2]) != 2)
                {
LABEL_51:
                  uint64_t v40 = (const void *)v8[7];
                  if (v40) {
                    CFDictionarySetValue(v38, @"AuditToken", v40);
                  }
                  uint64_t v41 = v8[3];
                  if (*(unsigned char *)(v41 + 24))
                  {
                    CFDictionarySetValue(v38, @"UsedForLowValueDecryptionKey", (const void *)*MEMORY[0x1E4F1CFD0]);
                    uint64_t v41 = v8[3];
                  }
                  if (*(_DWORD *)(v41 + 32) == 1) {
                    long long v42 = kFigCPEProtectorCryptorCreationOptionDecryptDestination_Nero;
                  }
                  else {
                    long long v42 = kFigCPEProtectorCryptorCreationOptionDecryptDestination_Local;
                  }
                  CFDictionarySetValue(v38, @"Destination", *v42);
                  CFAllocatorRef v43 = CFGetAllocator(v8);
                  CFDictionaryRef Copy = CFDictionaryCreateCopy(v43, v38);
                  if (Copy)
                  {
                    CFDictionaryRef v45 = Copy;
                    FigCFDictionarySetValue();
                    uint64_t v46 = v8[9];
                    CFAllocatorRef v47 = CFGetAllocator(v8);
                    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v48) {
                      uint64_t v49 = v48;
                    }
                    else {
                      uint64_t v49 = 0;
                    }
                    unsigned int v58 = *(uint64_t (**)(uint64_t, CFAllocatorRef, uint64_t, __CFDictionary *, uint64_t *))(v49 + 104);
                    if (v58)
                    {
                      uint64_t v59 = v58(v46, v47, 1, v38, v8 + 10);
                      if (!v59) {
                        goto LABEL_75;
                      }
                      uint64_t v22 = v59;
                    }
                    else
                    {
                      uint64_t v22 = 4294954514;
                    }
LABEL_94:
                    CFRelease(v38);
LABEL_95:
                    if (v45) {
                      CFRelease(v45);
                    }
                    if (!v22) {
                      goto LABEL_98;
                    }
                    goto LABEL_122;
                  }
LABEL_130:
                  uint64_t v22 = FigSignalErrorAt();
                  CFDictionaryRef v45 = 0;
                  goto LABEL_94;
                }
                long long v39 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
              }
              CFDictionarySetValue(v38, @"FormatType", *v39);
              goto LABEL_51;
            }
            goto LABEL_133;
          }
          if (v35 == 2)
          {
            long long v50 = *(const void **)(v34 + 48);
            if (!v50)
            {
LABEL_133:
              uint64_t v22 = FigSignalErrorAt();
              if (v22) {
                goto LABEL_122;
              }
              goto LABEL_98;
            }
            void *v33 = v50;
            CFRetain(v50);
          }
          CFDictionaryRef v45 = 0;
          long long v38 = 0;
LABEL_75:
          if (*v33
            && ((CMNotificationCenterGetDefaultLocalCenter(), uint64_t v60 = FigNotificationCenterAddWeakListener(), v60)
             || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v60 = FigNotificationCenterAddWeakListener(), v60)))
          {
            uint64_t v22 = v60;
          }
          else
          {
            if (FigContentKeySpecifierGetKeySystem(v8[2]) != 1
              || !FigContentKeySpecifierGetSupportedProtocolVersions(v8[2]))
            {
              if (!*((_DWORD *)v7 + 780)) {
                goto LABEL_92;
              }
              goto LABEL_91;
            }
            uint64_t v61 = v8[10];
            uint64_t SupportedProtocolVersions = FigContentKeySpecifierGetSupportedProtocolVersions(v8[2]);
            uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v63) {
              uint64_t v64 = v63;
            }
            else {
              uint64_t v64 = 0;
            }
            uint64_t v65 = *(uint64_t (**)(uint64_t, void, uint64_t))(v64 + 56);
            if (v65)
            {
              uint64_t v22 = v65(v61, *MEMORY[0x1E4F1FDE8], SupportedProtocolVersions);
              if (!v22 && *((_DWORD *)v7 + 780))
              {
LABEL_91:
                CFDictionaryRef v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_92:
                uint64_t v22 = 0;
              }
            }
            else
            {
              uint64_t v22 = 4294954514;
            }
          }
          if (!v38) {
            goto LABEL_95;
          }
          goto LABEL_94;
        }
      }
      else
      {
        uint64_t v22 = 4294954514;
      }
LABEL_23:
      CFRelease(v13);
      if (!v22) {
        goto LABEL_24;
      }
      return v22;
    }
LABEL_86:
    uint64_t v22 = v53;
    goto LABEL_23;
  }

  return FigSignalErrorAt();
}

void ckb_transitionRequestToTerminalStateWithOSStatus(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (a4)
  {
    FigCreateErrorForOSStatus(a4, (CFErrorRef *)&cf);
    uint64_t v7 = (__CFError *)cf;
  }
  else
  {
    uint64_t v7 = 0;
  }
  ckb_transitionRequestToTerminalState(a1, a2, a3, v7);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t ckb_startRequest(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    if (a1) {
      CFTypeRef v9 = CFRetain(a1);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *uint64_t v8 = v9;
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v8[1] = v10;
    if (a3) {
      CFTypeRef v11 = CFRetain(a3);
    }
    else {
      CFTypeRef v11 = 0;
    }
    void v8[2] = v11;
    dispatch_async_f(*DerivedStorage, v8, (dispatch_function_t)ckb_startRequestDispatch);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void ckg_finalize(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(v2);
    }
    uint64_t v6 = (const void *)a1[4];
    if (v6) {
      CFRelease(v6);
    }
  }
  uint64_t v7 = (const void *)a1[5];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)a1[6];
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v9 = (const void *)a1[7];
  if (v9) {
    CFRelease(v9);
  }
  CFTypeRef v10 = (const void *)a1[9];
  if (v10)
  {
    CFRelease(v10);
  }
}

uint64_t ckg_getRequestByKeySpecifier(uint64_t a1, const void *a2, const void **a3)
{
  if (a1 && a3)
  {
    *a3 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void ckb_requestTimerEventHandler()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v0) {
    return;
  }
  uint64_t v1 = (const void *)v0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    FigSignalErrorAt();
    goto LABEL_12;
  }
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v2)
  {
LABEL_12:
    uint64_t v7 = v1;
    goto LABEL_14;
  }
  uint64_t v3 = (void *)v2;
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    if (dword_1E9350C30)
    {
      int v10 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef cf = 0;
    FigCreateErrorForOSStatus(4294948144, (CFErrorRef *)&cf);
    ckb_processErrorForRequest(v1, v3, (uint64_t)v5, cf);
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v1);
    CFRelease(v3);
    CFRelease(v5);
    return;
  }
  CFRelease(v1);
  uint64_t v7 = v3;
LABEL_14:

  CFRelease(v7);
}

void ckb_requestTimerFinalizer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[2];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

uint64_t ckbutil_createAndStartTimer(int a1, void *a2, void (__cdecl *a3)(void *), void (__cdecl *a4)(void *), dispatch_queue_t queue, NSObject **a6)
{
  dispatch_object_t v16 = 0;
  if (a3 && a4 && queue && (uint64_t v11 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, queue), (v16 = v11) != 0))
  {
    int v12 = v11;
    if (a2) {
      dispatch_set_context(v11, a2);
    }
    dispatch_source_set_event_handler_f(v12, a3);
    dispatch_set_finalizer_f(v12, a4);
    dispatch_time_t v13 = dispatch_time(0x8000000000000000, 1000000000 * a1);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
    dispatch_resume(v12);
    uint64_t v14 = 0;
    *a6 = v12;
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
    if (v14) {
      ckbutil_cancelAndReleaseTimer(&v16);
    }
  }
  return v14;
}

void ckbutil_cancelAndReleaseTimer(dispatch_object_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      dispatch_source_cancel(v2);
      if (*a1)
      {
        dispatch_release(*a1);
        *a1 = 0;
      }
    }
  }
}

void ckb_processErrorForRequest(const void *a1, void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    uint64_t v9 = DerivedStorage;
    if (dword_1E9350C30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4)
    {
      uint64_t v11 = *(void *)(a3 + 80);
      switch(v11)
      {
        case 8:
          *(void *)(a3 + 200) = CFRetain(a4);
          break;
        case 4:
          *(void *)(a3 + 184) = CFRetain(a4);
          uint64_t v12 = *(void *)(a3 + 128);
          if (v12)
          {
            uint64_t v13 = *(void *)(a3 + 88);
            if (v13)
            {
              uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v14) {
                uint64_t v15 = v14;
              }
              else {
                uint64_t v15 = 0;
              }
              dispatch_object_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 32);
              if (v16) {
                v16(v12, v13);
              }
            }
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 120), *(const void **)(a3 + 88));
          break;
        case 2:
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 128), (const void *)*(int *)(a3 + 104));
          *(void *)(a3 + 192) = CFRetain(a4);
          break;
      }
    }
    ckb_processRequestViaNextHandler(a1, a2, a3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void ckb_processRequestViaNextHandler(const void *a1, void *a2, uint64_t a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    unint64_t v6 = *(void *)(a3 + 80);
    uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    if (v6 != 1) {
      goto LABEL_57;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef Identifier = (const __CFString *)FigContentKeySpecifierGetIdentifier(*(void *)(a3 + 16));
    CFURLRef v11 = CFURLCreateWithString(AllocatorForMedia, Identifier, 0);
    if (!v11)
    {
      FigSignalErrorAt();
LABEL_56:
      unint64_t v6 = *(void *)(a3 + 80);
LABEL_57:
      if (v6 <= 3)
      {
        if ((*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 16) & 4) != 0 && ckr_canRecoverError(a3))
        {
          CFDictionaryRef v46 = *(const __CFDictionary **)(a3 + 136);
          if (v46)
          {
            if (!*(void *)(a3 + 128))
            {
              CFNumberRef Value = CFDictionaryGetValue(v46, @"FHRP_CustomURLLoader");
              if (Value) {
                CFNumberRef Value = CFRetain(Value);
              }
              *(void *)(a3 + 128) = Value;
            }
          }
        }
        if (*(void *)(a3 + 128))
        {
          *(void *)(a3 + 80) = 4;
          uint64_t v48 = CMBaseObjectGetDerivedStorage();
          *(void *)os_log_type_t type = 0;
          CFTypeRef v86 = 0;
          uint64_t v49 = ckg_ensureContentKeyForRequest((uint64_t)a2, (uint64_t *)a3);
          if (!v49)
          {
            long long v50 = *(__CFArray **)(a3 + 64);
            if (!v50)
            {
              uint64_t v77 = FigSignalErrorAt();
              CFURLRef v84 = 0;
LABEL_142:
              CFTypeRef v67 = 0;
              goto LABEL_110;
            }
            CFAllocatorRef v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFStringRef v52 = (const __CFString *)FigContentKeySpecifierGetIdentifier(*(void *)(a3 + 16));
            CFURLRef v53 = CFURLCreateWithString(v51, v52, 0);
            if (v53)
            {
              CFURLRef v54 = v53;
              FigGetAllocatorForMedia();
              CFURLRef v84 = v54;
              uint64_t Mutable = FigCustomURLRequestInfoCreateMutable();
              if (!Mutable)
              {
                uint64_t Mutable = FigCustomURLRequestInfoSetCryptor();
                if (!Mutable)
                {
                  uint64_t Mutable = FigCustomURLRequestInfoSetIsRenewalRequest();
                  if (!Mutable)
                  {
                    if (FigContentKeySpecifierGetKeySystem(*(void *)(a3 + 16)) == 1)
                    {
                      CFAllocatorRef v56 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      uint64_t v57 = CFArrayCreateMutable(v56, 0, MEMORY[0x1E4F1D510]);
                      long long v50 = v57;
                      if (!v57)
                      {
                        uint64_t v58 = FigSignalErrorAt();
LABEL_144:
                        uint64_t v77 = v58;
                        goto LABEL_142;
                      }
                      CFArrayAppendValue(v57, @"com.apple.streamingkeydelivery.contentkey");
                      if (*(unsigned char *)(*(void *)(a3 + 24) + 64)) {
                        CFArrayAppendValue(v50, @"com.apple.streamingkeydelivery.persistentcontentkey");
                      }
                      uint64_t v58 = FigCustomURLRequestInfoSetAllowedUniversalTypeIdentifiers();
                      if (v58) {
                        goto LABEL_144;
                      }
                    }
                    else
                    {
                      long long v50 = 0;
                    }
                    CFTypeRef v67 = FigCFHTTPCreateUserAgent();
                    uint64_t v68 = FigCustomURLRequestInfoSetUserAgent();
                    if (v68
                      || *(_DWORD *)(*(void *)(a3 + 24) + 28) == 2
                      && (uint64_t v68 = FigCustomURLRequestInfoSetCryptorKeyRequestID(), v68))
                    {
                      uint64_t v77 = v68;
                    }
                    else
                    {
                      uint64_t v69 = *(void *)(a3 + 128);
                      uint64_t v70 = *(void *)(v48 + 168);
                      uint64_t v71 = *(void *)v48;
                      uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v72) {
                        uint64_t v73 = v72;
                      }
                      else {
                        uint64_t v73 = 0;
                      }
                      uint64_t v74 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, void, os_log_type_t *))(v73 + 24);
                      if (v74)
                      {
                        uint64_t v75 = v74(v69, v86, v70, v71, ckb_customURLReadCallback, type);
                        if (!v75)
                        {
                          CMTimeRange v76 = *(const void **)type;
                          uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
                          if (*(void *)type)
                          {
                            *(void *)(a3 + 88) = *(void *)type;
                            CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v48 + 120), v76, *(const void **)(a3 + 32));
                          }
                          ckb_startRequestTimer(a1, a2, a3);
                          uint64_t v77 = 0;
                          goto LABEL_110;
                        }
                        uint64_t v77 = v75;
                      }
                      else
                      {
                        uint64_t v77 = 4294954514;
                      }
                      uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
                    }
LABEL_110:
                    if (*((_DWORD *)v7 + 780))
                    {
                      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    if (v77)
                    {
                      cf[0] = 0;
                      FigCreateErrorForOSStatus(v77, (CFErrorRef *)cf);
                      ckb_processErrorForRequest(a1, a2, a3, cf[0]);
                      if (cf[0]) {
                        CFRelease(cf[0]);
                      }
                    }
                    if (v84) {
                      CFRelease(v84);
                    }
                    if (v67) {
                      CFRelease(v67);
                    }
                    if (v86) {
                      CFRelease(v86);
                    }
                    if (!v50) {
                      goto LABEL_124;
                    }
                    CFDictionaryRef v45 = v50;
                    goto LABEL_123;
                  }
                }
              }
              uint64_t v77 = Mutable;
              goto LABEL_141;
            }
            uint64_t v49 = FigSignalErrorAt();
          }
          uint64_t v77 = v49;
          CFURLRef v84 = 0;
LABEL_141:
          long long v50 = 0;
          goto LABEL_142;
        }
        unint64_t v6 = *(void *)(a3 + 80);
      }
      if (v6 > 7
        || (uint64_t v59 = CMBaseObjectGetDerivedStorage(), (*(unsigned char *)(v59 + 16) & 8) == 0)
        || !*(void *)(v59 + 24)
        || (!*(unsigned char *)(a3 + 72) || !*(void *)(v59 + 48)) && !*(void *)(v59 + 40))
      {
        cf[0] = 0;
        uint64_t v65 = *(const void **)(a3 + 200);
        if (v65 || (uint64_t v65 = *(const void **)(a3 + 184)) != 0 || (uint64_t v65 = *(const void **)(a3 + 192)) != 0)
        {
          CFDictionaryRef v66 = (void *)CFRetain(v65);
          cf[0] = v66;
        }
        else
        {
          FigCreateErrorForOSStatus(4294948138, (CFErrorRef *)cf);
          CFDictionaryRef v66 = (void *)cf[0];
        }
        ckb_transitionRequestToTerminalState(a1, a2, a3, (__CFError *)v66);
        CFDictionaryRef v45 = (__CFArray *)cf[0];
        if (!cf[0]) {
          goto LABEL_124;
        }
        goto LABEL_123;
      }
      *(void *)(a3 + 80) = 8;
      uint64_t v60 = CMBaseObjectGetDerivedStorage();
      uint64_t v33 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (v33)
      {
        __copy_assignment_8_8_t0w8_pa0_18803_8_pa0_11926_16_pa0_32929_24_pa0_16857_32_pa0_23185_40_pa0_3293_48(cf, (void *)(v60 + 32));
        uint64_t v61 = *(NSObject **)(v60 + 88);
        if (v61)
        {
          uint64_t v62 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E004096C37AFBuLL);
          if (v62)
          {
            uint64_t v63 = v62;
            if (a1) {
              CFTypeRef v64 = CFRetain(a1);
            }
            else {
              CFTypeRef v64 = 0;
            }
            *uint64_t v63 = v64;
            v63[13] = CFRetain(v33);
            __copy_assignment_8_8_t0w8_pa0_18803_8_pa0_11926_16_pa0_32929_24_pa0_16857_32_pa0_23185_40_pa0_3293_48(v63 + 4, cf);
            v63[12] = CFRetain((CFTypeRef)a3);
            v63[11] = CFRetain(a2);
            dispatch_async_f(v61, v63, (dispatch_function_t)ckb_sendKeyRequestCallbackOnQueue);
            goto LABEL_135;
          }
        }
        uint64_t v83 = FigSignalErrorAt();
        if (!v83)
        {
LABEL_135:
          ckb_startRequestTimer(a1, a2, a3);
LABEL_48:
          CFDictionaryRef v45 = (__CFArray *)v33;
LABEL_123:
          CFRelease(v45);
          goto LABEL_124;
        }
      }
      else
      {
        uint64_t v83 = FigSignalErrorAt();
        if (!v83)
        {
LABEL_124:
          if (*((_DWORD *)v7 + 780))
          {
            LODWORD(v86) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            __int16 v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v80 = v86;
            if (os_log_type_enabled(v79, type[0])) {
              unsigned int v81 = v80;
            }
            else {
              unsigned int v81 = v80 & 0xFFFFFFFE;
            }
            if (v81)
            {
              uint64_t v82 = *(void *)(a3 + 80);
              *(_DWORD *)unsigned int v87 = 136315906;
              *(void *)&v87[4] = "ckb_processRequestViaNextHandler";
              __int16 v88 = 2048;
              uint64_t v89 = a1;
              __int16 v90 = 2112;
              uint64_t v91 = a3;
              __int16 v92 = 2048;
              uint64_t v93 = v82;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return;
        }
      }
      *(void *)unsigned int v87 = 0;
      FigCreateErrorForOSStatus(v83, (CFErrorRef *)v87);
      ckb_processErrorForRequest(a1, a2, a3, *(void *)v87);
      CFTypeRef v44 = *(CFTypeRef *)v87;
      if (*(void *)v87) {
LABEL_46:
      }
        CFRelease(v44);
LABEL_47:
      if (!v33) {
        goto LABEL_124;
      }
      goto LABEL_48;
    }
    CFURLRef v12 = v11;
    if (FigCFHTTPIsHTTPBasedURL(v11) && (*(unsigned char *)(DerivedStorage + 16) & 2) != 0)
    {
      uint64_t v13 = *(void *)DerivedStorage;
      if (*(void *)DerivedStorage)
      {
        uint64_t v14 = *(void *)(a3 + 152);
        if (v14 && *(void *)(a3 + 128) || !*(void *)(a3 + 136)) {
          goto LABEL_32;
        }
        uint64_t v15 = *(const void **)(a3 + 144);
        if (!v15)
        {
          uint64_t v15 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 136), @"FHRP_StorageSession");
          if (v15) {
            uint64_t v15 = CFRetain(v15);
          }
          *(void *)(a3 + 144) = v15;
          uint64_t v14 = *(void *)(a3 + 152);
        }
        if (v14 || !v15) {
          goto LABEL_32;
        }
        CFAllocatorRef v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v16, 0, *(CFDictionaryRef *)(a3 + 136));
        if (MutableCopy)
        {
          CFMutableDictionaryRef v18 = MutableCopy;
          FigCFDictionarySetInt16();
          uint64_t v19 = *(void *)(a3 + 144);
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t))(v21 + 40);
          if (v22)
          {
            int v23 = v22(v19, v13, v18, a3 + 152);
            if (v23)
            {
LABEL_29:
              LODWORD(v24) = v23;
              goto LABEL_31;
            }
            uint64_t v24 = *(void *)(a3 + 168);
            if (!v24) {
              goto LABEL_31;
            }
            uint64_t v25 = *(void *)(a3 + 152);
            uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v26) {
              uint64_t v27 = v26;
            }
            else {
              uint64_t v27 = 0;
            }
            uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 56);
            if (v28)
            {
              int v23 = v28(v25, 0x1EE57E3D8, v24);
              goto LABEL_29;
            }
          }
          LODWORD(v24) = -12782;
LABEL_31:
          CFRelease(v18);
          if (!v24) {
            goto LABEL_32;
          }
          goto LABEL_55;
        }
      }
      if (FigSignalErrorAt())
      {
LABEL_55:
        CFRelease(v12);
        goto LABEL_56;
      }
    }
LABEL_32:
    uint64_t v29 = *(void *)(a3 + 152);
    CFRelease(v12);
    if (v29)
    {
      *(void *)(a3 + 80) = 2;
      uint64_t v30 = CMBaseObjectGetDerivedStorage();
      CFAllocatorRef v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFStringRef v32 = (const __CFString *)FigContentKeySpecifierGetIdentifier(*(void *)(a3 + 16));
      uint64_t v33 = CFURLCreateWithString(v31, v32, 0);
      if (v33)
      {
        uint64_t v34 = *(void *)(a3 + 152);
        CFAllocatorRef v35 = CFGetAllocator((CFTypeRef)a3);
        uint64_t v36 = *(void *)(a3 + 160);
        uint64_t v37 = *(void *)(a3 + 136);
        uint64_t v38 = *(void *)(v30 + 168);
        uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v39) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = *(uint64_t (**)(uint64_t, CFAllocatorRef, void, void *, void, uint64_t, uint64_t, uint64_t, CFTypeRef *, void, void, void, void (*)(const void *, int, uint64_t, const void *, uint64_t, uint64_t, int, int), uint64_t, uint64_t, uint64_t))(v40 + 8);
        if (v41)
        {
          long long v96 = 0u;
          long long v97 = 0u;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v95 = 0u;
          uint64_t v98 = 0x800000000;
          long long v99 = 0u;
          long long v100 = 0u;
          uint64_t v101 = 0;
          uint64_t v42 = v41(v34, v35, 0, v33, 0, v36, v37, 1, cf, 0, 0, 0, ckb_httpReadCallback, v38, a3 + 96, a3 + 104);
          if (!v42)
          {
            CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v30 + 128), (const void *)*(int *)(a3 + 104), *(const void **)(a3 + 32));
            ckb_startRequestTimer(a1, a2, a3);
          }
        }
        else
        {
          uint64_t v42 = 4294954514;
        }
        uint64_t v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      }
      else
      {
        uint64_t v42 = FigSignalErrorAt();
      }
      if (*((_DWORD *)v7 + 780))
      {
        LODWORD(v86) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        CFAllocatorRef v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v42)
      {
        cf[0] = 0;
        FigCreateErrorForOSStatus(v42, (CFErrorRef *)cf);
        ckb_processErrorForRequest(a1, a2, a3, cf[0]);
        CFTypeRef v44 = cf[0];
        if (cf[0]) {
          goto LABEL_46;
        }
      }
      goto LABEL_47;
    }
    goto LABEL_56;
  }

  FigSignalErrorAt();
}

void ckb_transitionRequestToTerminalState(const void *a1, void *a2, uint64_t a3, __CFError *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    FigSignalErrorAt();
    return;
  }
  uint64_t v37 = DerivedStorage;
  if (*(_DWORD *)(a3 + 56) > 2u || ckg_ensureContentKeyForRequest((uint64_t)a2, (uint64_t *)a3)) {
    return;
  }
  uint64_t v9 = *(void *)(a3 + 64);
  if (*(_DWORD *)(*(void *)(v9 + 24) + 28) == 2)
  {
    int v10 = (__CFDictionary *)a2[5];
    CFStringRef Identifier = (const void *)FigContentKeySpecifierGetIdentifier(*(void *)(v9 + 16));
    CFDictionaryRemoveValue(v10, Identifier);
  }
  if (a4)
  {
    CFErrorGetDomain(a4);
    if (FigCFEqual()) {
      CFErrorGetCode(a4);
    }
  }
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    *(void *)(a3 + 176) = CFRetain(a4);
    int v13 = 3;
    int v14 = 3;
  }
  else
  {
    int v14 = 4;
    int v13 = 2;
  }
  *(_DWORD *)(v9 + 40) = v13;
  *(_DWORD *)(a3 + 56) = v14;
  ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a3 + 208));
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v16 = v15;
    if (*(void *)(v15 + 24))
    {
      CFArrayRef v17 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      CFTypeRef cf = (CFTypeRef)1;
      long long v41 = *(_OWORD *)(v16 + 64);
      FigGetAllocatorForMedia();
      CFMutableDictionaryRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      uint64_t v38 = 1;
      long long v39 = v41;
      int v19 = ckb_sendStatusCallbackDispatch(a1, v17, &v38, *(NSObject **)(v16 + 88), (const void *)a3, MutableCopy);
      if (!v19 && v17)
      {
        CFRelease(v17);
        CFArrayRef v17 = 0;
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (v19) {
        return;
      }
    }
  }
  else if (FigSignalErrorAt())
  {
    return;
  }
  if (*(unsigned char *)(v37 + 9) && *(void *)(a3 + 176) && ckr_canRecoverError(a3) && !*(unsigned char *)(a3 + 32))
  {
    if (dword_1E9350C30)
    {
      uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    ck_resetState(v9);
    ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a3 + 208));
    CFRetain((CFTypeRef)a3);
    if (!ckb_removeRequestReferences((uint64_t)a1, (uint64_t)a2, a3))
    {
      uint64_t v30 = CMBaseObjectGetDerivedStorage();
      CFTypeRef cf = 0;
      if (ckb_createRequestWithRequestID(a1, *(void **)(a3 + 24), a2, *(const void **)(a3 + 136), *(const void **)(a3 + 160), *(const void **)(v30 + 136), *(unsigned char *)(a3 + 72), (*(void *)(a3 + 32) + 1) | *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFF00, (uint64_t *)&cf))
      {
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        CFAllocatorRef v31 = *(uint64_t ***)(a3 + 216);
        if (v31)
        {
          do
          {
            CFStringRef v32 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040E394BF8BuLL);
            dispatch_retain((dispatch_object_t)v31[6]);
            v32[6] = v31[6];
            v32[3] = v31[3];
            v32[4] = v31[4];
            v32[5] = v31[5];
            uint64_t v33 = v31[2];
            if (v33) {
              uint64_t v33 = (uint64_t *)CFRetain(v33);
            }
            v32[2] = v33;
            *CFStringRef v32 = 0;
            uint64_t v34 = (void *)*((void *)cf + 28);
            v32[1] = v34;
            *uint64_t v34 = v32;
            CFTypeRef v35 = cf;
            *((void *)cf + 28) = v32;
            CFAllocatorRef v31 = (uint64_t **)*v31;
          }
          while (v31);
        }
        else
        {
          CFTypeRef v35 = cf;
        }
        if (!ckb_startRequest(a1, a2, v35) && dword_1E9350C30)
        {
          uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    CFRelease((CFTypeRef)a3);
    return;
  }
  if (!a1)
  {
    if (!FigSignalErrorAt()) {
      goto LABEL_44;
    }
    return;
  }
  FigGetAllocatorForMedia();
  uint64_t v20 = FigCFDictionaryCreateMutableCopy();
  uint64_t v21 = (const void *)v20;
  uint64_t v22 = *(uint64_t ***)(a3 + 216);
  if (!v22)
  {
    int v28 = 0;
    uint64_t v25 = 0;
    if (v20) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  int v23 = 1;
  while (1)
  {
    uint64_t v24 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v24) {
      break;
    }
LABEL_37:
    uint64_t v22 = (uint64_t **)*v22;
    if (!v22)
    {
      int v28 = 0;
      uint64_t v25 = 0;
      goto LABEL_39;
    }
  }
  uint64_t v25 = (const void *)v24;
  if (!v23) {
    FigCFDictionarySetBoolean();
  }
  uint64_t v26 = v22[4];
  CFTypeRef cf = v22[3];
  *(void *)&long long v41 = v26;
  *((void *)&v41 + 1) = v22[5];
  int v27 = ckb_sendStatusCallbackDispatch(a1, v25, &cf, v22[6], (const void *)a3, v21);
  if (!v27)
  {
    CFRelease(v25);
    int v23 = 0;
    goto LABEL_37;
  }
  int v28 = v27;
LABEL_39:
  if (v21) {
LABEL_40:
  }
    CFRelease(v21);
LABEL_41:
  if (v25) {
    CFRelease(v25);
  }
  if (!v28) {
LABEL_44:
  }
    ckb_removeRequestReferences((uint64_t)a1, (uint64_t)a2, a3);
}

void ckb_httpReadCallback(const void *a1, int a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  CFTypeRef cf = 0;
  if (!ckb_copyBossFromRetainProxy(a3, &cf))
  {
    uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    uint64_t v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x1020040719A67F2uLL);
    if (v16)
    {
      CFArrayRef v17 = v16;
      CFTypeRef v18 = cf;
      if (cf) {
        CFTypeRef v18 = CFRetain(cf);
      }
      *CFArrayRef v17 = v18;
      if (a1) {
        CFTypeRef v19 = CFRetain(a1);
      }
      else {
        CFTypeRef v19 = 0;
      }
      v17[1] = v19;
      *((_DWORD *)v17 + 4) = a2;
      if (a4) {
        CFTypeRef v20 = CFRetain(a4);
      }
      else {
        CFTypeRef v20 = 0;
      }
      v17[3] = v20;
      v17[4] = a5;
      v17[5] = a6;
      *((_DWORD *)v17 + 12) = a7;
      *((_DWORD *)v17 + 13) = a8;
      dispatch_async_f(*DerivedStorage, v17, (dispatch_function_t)ckb_httpReadCallbackDispatch);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t ckb_copyBossFromRetainProxy(uint64_t a1, void *a2)
{
  if (a1 && a2 && (FigRetainProxyLockMutex(), !FigRetainProxyIsInvalidated()))
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner) {
      Owner = CFRetain(Owner);
    }
    uint64_t v4 = 0;
    *a2 = Owner;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  FigRetainProxyUnlockMutex();
  return v4;
}

void ckb_httpReadCallbackDispatch(uint64_t a1)
{
  v55[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v2 = *(CFTypeRef *)a1;
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(OpaqueCMBlockBuffer **)(a1 + 24);
  size_t v5 = *(void *)(a1 + 32);
  size_t v6 = *(void *)(a1 + 40);
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  int v10 = (v7 >> 1) & 1;
  int v34 = v3;
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 128), (const void *)v3);
  if (!Value) {
    goto LABEL_58;
  }
  uint64_t Empty = ckb_copyGroupAndRequestFromID((uint64_t)v2, Value, &v36, &v35);
  if (Empty) {
    goto LABEL_59;
  }
  uint64_t Empty = ckg_ensureContentKeyForRequest((uint64_t)v36, (uint64_t *)v35);
  if (Empty) {
    goto LABEL_59;
  }
  int v13 = v35;
  if (!v35)
  {
    uint64_t v17 = FigSignalErrorAt();
    if (v17) {
      goto LABEL_30;
    }
    goto LABEL_58;
  }
  if (!*((void *)v35 + 8) || v8)
  {
LABEL_58:
    uint64_t Empty = FigSignalErrorAt();
    goto LABEL_59;
  }
  if (!v4)
  {
    if (!v10)
    {
LABEL_29:
      uint64_t v17 = 0;
      goto LABEL_30;
    }
    goto LABEL_15;
  }
  int v14 = (OpaqueCMBlockBuffer *)*((void *)v35 + 14);
  if (!v14)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)v35 + 14);
    if (Empty)
    {
LABEL_59:
      uint64_t v17 = Empty;
      goto LABEL_30;
    }
    int v14 = (OpaqueCMBlockBuffer *)*((void *)v35 + 14);
  }
  uint64_t appended = CMBlockBufferAppendBufferReference(v14, v4, v5, v6, 0);
  uint64_t v17 = appended;
  if (v10 && !appended)
  {
    int v13 = v35;
LABEL_15:
    if (v13[14])
    {
      FigCFDictionarySetValue();
      CFTypeRef v18 = v35;
      CFTypeRef v19 = (const void *)*((void *)v35 + 12);
      size_t v20 = v6;
      if (v19)
      {
        CFRelease(v19);
        CFTypeRef v18 = v35;
        *((void *)v35 + 12) = 0;
      }
      v18[26] = 0;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 128), 0);
      CFTypeRef v21 = v35;
      v55[0] = 0;
      CFTypeRef cf = 0;
      *(void *)blockBufferOut = 0;
      if (v35)
      {
        CFAllocatorRef v22 = CFGetAllocator(v2);
        int v23 = (OpaqueCMBlockBuffer *)*((void *)v21 + 14);
        CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
        DataCFIndex Length = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)v21 + 14));
        if (!CMBlockBufferCreateContiguous(v22, v23, v24, 0, 0, DataLength, 0, (CMBlockBufferRef *)blockBufferOut))
        {
          CFGetAllocator(v2);
          CMBlockBufferGetDataLength(*(CMBlockBufferRef *)blockBufferOut);
          if (!FigCreateCFDataWithBlockBufferNoCopy())
          {
            CFAllocatorRef v26 = CFGetAllocator(v2);
            if (!FigContentKeyResponseParamsCreate((uint64_t)v26, 1, 0, 0, cf, v55)) {
              ckb_processResponse(v2, *((const void **)v21 + 4), (uint64_t)v55[0]);
            }
          }
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      size_t v6 = v20;
      if (v55[0]) {
        CFRelease(v55[0]);
      }
      if (*(void *)blockBufferOut) {
        CFRelease(*(CFTypeRef *)blockBufferOut);
      }
      goto LABEL_29;
    }
    goto LABEL_58;
  }
LABEL_30:
  if (dword_1E9350C30)
  {
    LODWORD(cf) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v28 = cf;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      *(_DWORD *)blockBufferOut = 136317186;
      *(void *)&blockBufferOut[4] = "ckb_httpReadCallbackGuts";
      __int16 v39 = 2048;
      CFTypeRef v40 = v2;
      __int16 v41 = 2114;
      CFTypeRef v42 = v35;
      __int16 v43 = 1024;
      int v44 = v34;
      __int16 v45 = 1024;
      int v46 = v10;
      __int16 v47 = 2048;
      uint64_t v48 = v4;
      __int16 v49 = 2048;
      size_t v50 = v5;
      __int16 v51 = 2048;
      size_t v52 = v6;
      __int16 v53 = 1024;
      int v54 = v17;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v30 = v35;
  if (v2)
  {
    if (v17 && v35 != 0)
    {
      v55[0] = 0;
      FigCreateErrorForOSStatus(v17, (CFErrorRef *)v55);
      ckb_processErrorForRequest(v2, v36, v35, v55[0]);
      if (v55[0]) {
        CFRelease(v55[0]);
      }
      CFTypeRef v30 = v35;
    }
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFStringRef v32 = *(const void **)(a1 + 8);
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v33 = *(const void **)(a1 + 24);
  if (v33) {
    CFRelease(v33);
  }
  free((void *)a1);
}

uint64_t ckb_copyGroupAndRequestFromID(uint64_t a1, const void *a2, CFTypeRef *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef Value = (CFDictionaryRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), a2);
  if (Value)
  {
    uint64_t v9 = Value;
    int v10 = CFDictionaryGetValue(Value[6], a2);
    if (v10 || (uint64_t result = FigSignalErrorAt(), !result))
    {
      if (a3) {
        *a3 = CFRetain(v9);
      }
      if (a4)
      {
        if (v10) {
          CFTypeRef v11 = CFRetain(v10);
        }
        else {
          CFTypeRef v11 = 0;
        }
        uint64_t result = 0;
        *a4 = v11;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ckb_processResponse(const void *a1, const void *a2, uint64_t a3)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v14 = 0;
  cf[0] = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_26;
  }
  uint64_t v6 = ckb_copyGroupAndRequestFromID((uint64_t)a1, a2, &v14, cf);
  if (!v6)
  {
    if (*((_DWORD *)cf[0] + 14) >= 3u)
    {
LABEL_26:
      uint64_t v6 = FigSignalErrorAt();
      goto LABEL_27;
    }
    if (FigContentKeySpecifierGetKeySystem(*((void *)cf[0] + 2)) == 1)
    {
      unsigned int v7 = (uint64_t *)cf[0];
      if (*(_DWORD *)(a3 + 16) == 1 && *((_DWORD *)cf[0] + 14) != 1) {
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v7 = (uint64_t *)cf[0];
    }
    uint64_t v6 = ckg_ensureContentKeyForRequest((uint64_t)v14, v7);
    if (!v6)
    {
      if (cf[0])
      {
        uint64_t v8 = *((void *)cf[0] + 8);
        if (v8)
        {
          uint64_t v6 = ck_processResponse(*((uint64_t **)cf[0] + 8), a3);
          if (!v6)
          {
            if (*(_DWORD *)(*(void *)(v8 + 24) + 28) != 2) {
              ckb_startRenewalTimer((uint64_t)a1, v8, (uint64_t)cf[0]);
            }
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            uint64_t v10 = 0;
            CFTypeRef v11 = cf[0];
            *((CFAbsoluteTime *)cf[0] + 30) = Current;
            goto LABEL_16;
          }
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v10 = FigSignalErrorAt();
        if (v10) {
          goto LABEL_28;
        }
      }
      goto LABEL_26;
    }
  }
LABEL_27:
  uint64_t v10 = v6;
LABEL_28:
  CFTypeRef v11 = cf[0];
  if (cf[0]) {
LABEL_16:
  }
    ckb_transitionRequestToTerminalStateWithOSStatus(a1, v14, (uint64_t)v11, v10);
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v10;
}

uint64_t ck_processResponse(uint64_t *a1, uint64_t a2)
{
  if (!a1 || !a2 || !*(void *)(a2 + 40)) {
    goto LABEL_25;
  }
  if (FigContentKeySpecifierGetKeySystem(a1[2]) != 1)
  {
    if (FigContentKeySpecifierGetKeySystem(a1[2]) == 2)
    {
      uint64_t v8 = a1[10];
      uint64_t v9 = *(void *)(a2 + 40);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CFAllocatorRef v24 = *(uint64_t (**)(uint64_t, void, uint64_t))(v11 + 56);
      if (!v24) {
        return 4294954514;
      }
      uint64_t v25 = v24(v8, *MEMORY[0x1E4F1FDB8], v9);
      if (v25) {
        return v25;
      }
      uint64_t v26 = *(void *)(a2 + 32);
      if (v26)
      {
        uint64_t v27 = a1[10];
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 56);
        if (v37)
        {
          uint64_t v38 = *MEMORY[0x1E4F1FDA8];
          uint64_t v39 = v27;
          uint64_t v40 = v26;
          goto LABEL_56;
        }
        return 4294954514;
      }
    }
    else
    {
      if (FigContentKeySpecifierGetKeySystem(a1[2]) != 3) {
        goto LABEL_25;
      }
      CFURLRef v12 = (const void *)a1[8];
      int v13 = *(const void **)(a2 + 40);
      a1[8] = (uint64_t)v13;
      if (v13) {
        CFRetain(v13);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4 == 1)
  {
    CFTypeRef v14 = (const void *)a1[6];
    uint64_t v15 = *(const void **)(a2 + 24);
    a1[6] = (uint64_t)v15;
    if (v15) {
      CFRetain(v15);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (*(_DWORD *)(a1[3] + 28) == 2 && *(void *)(a2 + 24))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        goto LABEL_25;
      }
      CFTypeRef v18 = Mutable;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21950], *(const void **)(a2 + 24));
    }
    else
    {
      CFTypeRef v18 = 0;
    }
    uint64_t v20 = a1[10];
    uint64_t v21 = *(void *)(a2 + 40);
    CFAllocatorRef v22 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      int v23 = v22;
    }
    else {
      int v23 = 0;
    }
    if (*v23 >= 4uLL && (CFTypeRef v36 = (uint64_t (*)(uint64_t, uint64_t, __CFDictionary *))v23[12]) != 0) {
      uint64_t v30 = v36(v20, v21, v18);
    }
    else {
      uint64_t v30 = 4294954514;
    }
    if (v18) {
      CFRelease(v18);
    }
    return v30;
  }
  if (v4 == 2)
  {
    uint64_t v5 = a1[10];
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFAllocatorRef v31 = *(uint64_t (**)(uint64_t, void, void))(v7 + 56);
    if (v31)
    {
      uint64_t v25 = v31(v5, *MEMORY[0x1E4F1FE18], *MEMORY[0x1E4F1CFD0]);
      if (!v25)
      {
        uint64_t v32 = a1[10];
        uint64_t v33 = *(void *)(a2 + 40);
        uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v34) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 56);
        if (v37)
        {
          uint64_t v38 = *MEMORY[0x1E4F1FDD0];
          uint64_t v39 = v32;
          uint64_t v40 = v33;
LABEL_56:
          return v37(v39, v38, v40);
        }
        return 4294954514;
      }
      return v25;
    }
    return 4294954514;
  }
LABEL_25:

  return FigSignalErrorAt();
}

void ckb_startRenewalTimer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)
    && a2
    && (uint64_t v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x60040FFD3A10EuLL)) != 0)
  {
    uint64_t v7 = v6;
    *uint64_t v6 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v7[1] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFTypeRef v8 = *(CFTypeRef *)(a3 + 136);
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    v7[2] = v8;
    CFTypeRef v9 = *(CFTypeRef *)(a3 + 160);
    if (v9) {
      CFTypeRef v9 = CFRetain(v9);
    }
    v7[3] = v9;
    uint64_t v10 = *DerivedStorage;
    if (v10)
    {
      if (*(void *)(a2 + 48))
      {
        ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a2 + 88));
        double v11 = MEMORY[0x199707BD0](*(void *)(a2 + 48));
        double v12 = v11 - CFAbsoluteTimeGetCurrent();
        if (v12 > 0.0
          && !ckbutil_createAndStartTimer((int)v12, v7, (void (__cdecl *)(void *))ckb_renewalTimerEventHandler, (void (__cdecl *)(void *))ckb_renewalTimerFinalizer, v10, (NSObject **)(a2 + 88)))
        {
          if (dword_1E9350C30)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return;
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    ckb_renewalTimerFinalizer((const void **)v7);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void ckb_renewalTimerEventHandler(uint64_t a1)
{
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    int v3 = (const void *)v2;
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
    {
      FigSignalErrorAt();
      CFRelease(v3);
    }
    else
    {
      int v4 = (uint64_t *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (dword_1E9350C30)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ckb_renew(v3, v4[2], 0, 0, 0, *(const void **)(a1 + 16), *(const void **)(a1 + 24), 0);
      CFRelease(v3);
      CFRelease(v4);
    }
  }
}

void ckb_renewalTimerFinalizer(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  int v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }
  int v4 = a1[2];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[3];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

uint64_t ckb_renew(const void *a1, uint64_t a2, void *a3, uint64_t a4, NSObject *a5, const void *a6, const void *a7, __CFArray **a8)
{
  v43[16] = *(const void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    uint64_t v18 = FigSignalErrorAt();
    CFDictionaryRef v41 = 0;
    goto LABEL_48;
  }
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v18 = FigSignalErrorAt();
    CFDictionaryRef v19 = 0;
    goto LABEL_13;
  }
  CFDictionaryRef v13 = Mutable;
  CFArrayRef v14 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (CFArrayGetCount(v14) < 1)
  {
LABEL_9:
    uint64_t v18 = 0;
    CFDictionaryRef v19 = v13;
    CFDictionaryRef v13 = 0;
    if (!v14) {
      goto LABEL_11;
    }
  }
  else
  {
    CFIndex v15 = 0;
    while (1)
    {
      v43[0] = 0;
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
      uint64_t ContentKey = ckg_getContentKey((uint64_t)ValueAtIndex, a2, v43);
      if (ContentKey) {
        break;
      }
      if (v43[0]) {
        FigCFDictionarySetValue();
      }
      if (++v15 >= CFArrayGetCount(v14)) {
        goto LABEL_9;
      }
    }
    uint64_t v18 = ContentKey;
    CFDictionaryRef v19 = 0;
    if (!v14) {
      goto LABEL_11;
    }
  }
  CFRelease(v14);
LABEL_11:
  if (v13) {
    CFRelease(v13);
  }
LABEL_13:
  CFDictionaryRef v41 = v19;
  if (v18)
  {
LABEL_48:
    CFArrayRef v23 = 0;
    uint64_t v21 = 0;
LABEL_51:
    UInt64 = 0;
    goto LABEL_27;
  }
  if (CFDictionaryGetCount(v19) <= 0)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_48;
  }
  CFAllocatorRef v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v21 = CFArrayCreateMutable(v20, 0, MEMORY[0x1E4F1D510]);
  if (!v21)
  {
    uint64_t v18 = FigSignalErrorAt();
    CFArrayRef v23 = 0;
    goto LABEL_51;
  }
  CFArrayRef v22 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  CFArrayRef v23 = v22;
  if (!v22)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_51;
  }
  if (CFArrayGetCount(v22) < 1)
  {
LABEL_25:
    UInt64 = 0;
    uint64_t v18 = 0;
    if (a8)
    {
      *a8 = v21;
      uint64_t v21 = 0;
    }
    goto LABEL_27;
  }
  CFIndex v24 = 0;
  while (1)
  {
    uint64_t v25 = CFArrayGetValueAtIndex(v23, v24);
    CFNumberRef Value = CFDictionaryGetValue(v19, v25);
    if (Value[10] != 2) {
      goto LABEL_24;
    }
    Value[10] = 1;
    uint64_t v27 = (void *)*((void *)Value + 3);
    uint64_t v28 = *(const void **)(DerivedStorage + 136);
    uint64_t v29 = FigAtomicIncrement64();
    uint64_t RequestWithRequestID = ckb_createRequestWithRequestID(a1, v27, v25, a6, a7, v28, 1, v29 << 8, (uint64_t *)&cf);
    if (RequestWithRequestID)
    {
      uint64_t v18 = RequestWithRequestID;
      UInt64 = 0;
      goto LABEL_27;
    }
    FigGetAllocatorForMedia();
    UInt64 = (const void *)FigCFNumberCreateUInt64();
    if (!UInt64) {
      break;
    }
    ckr_addStatusCallbacks((uint64_t)cf, a3, a4, a5);
    uint64_t started = ckb_startRequest(a1, v25, cf);
    if (started) {
      goto LABEL_44;
    }
    CFArrayAppendValue(v21, UInt64);
    CFTypeRef cf = 0;
    CFRelease(UInt64);
    CFDictionaryRef v19 = v41;
LABEL_24:
    if (++v24 >= CFArrayGetCount(v23)) {
      goto LABEL_25;
    }
  }
  uint64_t started = FigSignalErrorAt();
LABEL_44:
  uint64_t v18 = started;
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (UInt64) {
    CFRelease(UInt64);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v18;
}

uint64_t ckg_getContentKey(uint64_t a1, uint64_t a2, const void **a3)
{
  if (a1 && a3)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);
    CFStringRef Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2);
    *a3 = CFDictionaryGetValue(v4, Identifier);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL ckr_canRecoverError(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v1 = *(__CFError **)(a1 + 176);
  return !v1 || FigStreamingNetworkErrorGetRecommendedAction(v1, &v4, &v3) == 0;
}

void ckb_customURLReadCallback(uint64_t a1, const void *a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, unint64_t a6)
{
  v83[16] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v63 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v61 = 0;
  CFTypeRef v62 = 0;
  uint64_t v59 = 0;
  CFTypeRef v60 = 0;
  CFTypeRef v58 = 0;
  uint64_t Empty = ckb_copyBossFromRetainProxy(a1, &cf);
  if (Empty) {
    goto LABEL_51;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 120), a2);
  if (!Value) {
    goto LABEL_50;
  }
  uint64_t Empty = ckb_copyGroupAndRequestFromID((uint64_t)cf, Value, &v61, &v62);
  if (Empty) {
    goto LABEL_51;
  }
  if (!v62)
  {
    uint64_t Empty = FigSignalErrorAt();
    if (Empty) {
      goto LABEL_51;
    }
LABEL_50:
    uint64_t Empty = FigSignalErrorAt();
    goto LABEL_51;
  }
  if (!*((void *)v62 + 8)) {
    goto LABEL_50;
  }
  uint64_t HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
  if (HTTPStatusCode)
  {
    uint64_t v14 = HTTPStatusCode;
    if (HTTPStatusCode != -17360) {
      goto LABEL_52;
    }
  }
  uint64_t Empty = FigCFHTTPCreateCFErrorFromHTTPStatusCode(v63, (CFErrorRef *)&v58);
  if (Empty) {
    goto LABEL_51;
  }
  if (a6 | (unint64_t)v58)
  {
    CFTypeRef v15 = a6 ? (CFTypeRef)a6 : v58;
    uint64_t v16 = (__CFError *)CFRetain(v15);
    if (v16)
    {
      CFArrayRef v22 = v16;
      CFErrorGetDomain(v16);
      if (FigCFEqual())
      {
        CFIndex Code = CFErrorGetCode(v22);
        uint64_t v14 = 0;
        BOOL v23 = Code != -17297;
        BOOL v24 = Code == -17297;
        int v21 = 1;
        goto LABEL_55;
      }
      uint64_t v14 = 0;
      BOOL v24 = 0;
      int v21 = 1;
LABEL_54:
      BOOL v23 = 1;
      goto LABEL_55;
    }
  }
  if (!a4)
  {
    if ((a5 & 1) == 0)
    {
LABEL_46:
      int v21 = 0;
      uint64_t v14 = 0;
LABEL_53:
      CFArrayRef v22 = 0;
      BOOL v24 = 0;
      goto LABEL_54;
    }
LABEL_22:
    if (*((void *)v62 + 14))
    {
      uint64_t v25 = FigCustomURLResponseInfoCopyContentRenewalDate();
      if (!v25 || (uint64_t v14 = v25, v25 == -17360))
      {
        uint64_t v26 = FigCustomURLResponseInfoCopyUniversalTypeIdentifier();
        if (!v26 || (uint64_t v14 = v26, v26 == -17360))
        {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 120), a2);
          CFTypeRef v27 = cf;
          uint64_t v28 = v61;
          CFTypeRef v29 = v62;
          uint64_t v30 = v59;
          v83[0] = 0;
          CFTypeRef v65 = 0;
          *(void *)blockBufferOut = 0;
          if (!v62)
          {
            FigSignalErrorAt();
LABEL_42:
            if (*(void *)blockBufferOut) {
              CFRelease(*(CFTypeRef *)blockBufferOut);
            }
            if (v83[0]) {
              CFRelease(v83[0]);
            }
            goto LABEL_46;
          }
          char v31 = a5;
          uint64_t v32 = a2;
          CFAllocatorRef v33 = CFGetAllocator(cf);
          uint64_t v34 = (OpaqueCMBlockBuffer *)*((void *)v29 + 14);
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          DataCFIndex Length = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)v29 + 14));
          uint64_t Contiguous = CMBlockBufferCreateContiguous(v33, v34, AllocatorForMedia, 0, 0, DataLength, 0, (CMBlockBufferRef *)blockBufferOut);
          if (Contiguous
            || (CFGetAllocator(v27),
                CMBlockBufferGetDataLength(*(CMBlockBufferRef *)blockBufferOut),
                uint64_t Contiguous = FigCreateCFDataWithBlockBufferNoCopy(),
                Contiguous))
          {
            uint64_t v43 = Contiguous;
          }
          else
          {
            uint64_t v38 = (uint64_t *)*((void *)v29 + 8);
            if (v38)
            {
              CFAllocatorRef v39 = CFGetAllocator(v27);
              if (FigCFEqual()) {
                int v40 = 2;
              }
              else {
                int v40 = 1;
              }
              uint64_t v41 = FigContentKeyResponseParamsCreate((uint64_t)v39, v40, v30, 0, v65, v83);
              if (!v41)
              {
                uint64_t v42 = ck_processResponse(v38, (uint64_t)v83[0]);
                a5 = v31;
                if (v42)
                {
                  uint64_t v43 = v42;
                }
                else
                {
                  if (*(_DWORD *)(v38[3] + 28) != 2) {
                    ckb_startRenewalTimer((uint64_t)v27, (uint64_t)v38, (uint64_t)v29);
                  }
                  uint64_t v43 = 0;
                }
                a2 = v32;
                goto LABEL_40;
              }
            }
            else
            {
              uint64_t v41 = FigSignalErrorAt();
            }
            uint64_t v43 = v41;
          }
          a2 = v32;
          a5 = v31;
LABEL_40:
          ckb_transitionRequestToTerminalStateWithOSStatus(v27, v28, (uint64_t)v29, v43);
          if (v65) {
            CFRelease(v65);
          }
          goto LABEL_42;
        }
      }
LABEL_52:
      int v21 = 0;
      goto LABEL_53;
    }
    goto LABEL_50;
  }
  uint64_t v17 = (OpaqueCMBlockBuffer *)*((void *)v62 + 14);
  if (!v17)
  {
    CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t Empty = CMBlockBufferCreateEmpty(v18, 0, 0, (CMBlockBufferRef *)v62 + 14);
    if (!Empty)
    {
      uint64_t v17 = (OpaqueCMBlockBuffer *)*((void *)v62 + 14);
      goto LABEL_18;
    }
LABEL_51:
    uint64_t v14 = Empty;
    goto LABEL_52;
  }
LABEL_18:
  size_t v19 = CMBlockBufferGetDataLength(a4);
  uint64_t appended = CMBlockBufferAppendBufferReference(v17, a4, 0, v19, 0);
  uint64_t v14 = appended;
  int v21 = 0;
  CFArrayRef v22 = 0;
  BOOL v23 = 1;
  if ((a5 & 1) == 0)
  {
    BOOL v24 = 0;
    goto LABEL_55;
  }
  BOOL v24 = 0;
  if (!appended) {
    goto LABEL_22;
  }
LABEL_55:
  if (dword_1E9350C30)
  {
    int v56 = v21;
    err = v22;
    int v44 = a2;
    LODWORD(v65) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v46 = v65;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v47 = v46;
    }
    else {
      unsigned int v47 = v46 & 0xFFFFFFFE;
    }
    if (v47)
    {
      BOOL v55 = v24;
      CFTypeRef v48 = cf;
      CFTypeRef v49 = v62;
      if (v23) {
        size_t v50 = err;
      }
      else {
        size_t v50 = 0;
      }
      if (v56) {
        int v51 = CFErrorGetCode(err);
      }
      else {
        int v51 = 0;
      }
      *(_DWORD *)blockBufferOut = 136317187;
      *(void *)&blockBufferOut[4] = "ckb_customURLReadCallback";
      __int16 v67 = 2048;
      CFTypeRef v68 = v48;
      __int16 v69 = 2114;
      CFTypeRef v70 = v49;
      __int16 v71 = 2048;
      uint64_t v72 = v44;
      __int16 v73 = 1024;
      int v74 = a5 & 1;
      __int16 v75 = 1024;
      int v76 = v14;
      __int16 v77 = 2113;
      CFTypeRef v78 = v50;
      __int16 v79 = 1024;
      int v80 = v51;
      __int16 v81 = 1024;
      BOOL v82 = v55;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFArrayRef v22 = err;
    int v21 = v56;
  }
  if (cf)
  {
    int v52 = v14 ? 1 : v21;
    if (v52 == 1 && v62)
    {
      v83[0] = 0;
      if (v21)
      {
        __int16 v53 = (__CFError *)CFRetain(v22);
        v83[0] = v53;
      }
      else
      {
        FigCreateErrorForOSStatus(v14, v83);
        __int16 v53 = v83[0];
      }
      ckb_processErrorForRequest(cf, v61, v62, v53);
      if (v83[0]) {
        CFRelease(v83[0]);
      }
    }
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v62) {
    CFRelease(v62);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v58) {
    CFRelease(v58);
  }
}

void ckb_sendKeyRequestCallbackOnQueue(void *a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350C30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v3 = a1[12];
    if (*(unsigned char *)(v3 + 72) && (uint64_t v4 = (void (*)(void, void, void, void, void))a1[6]) != 0
      || (uint64_t v4 = (void (*)(void, void, void, void, void))a1[5]) != 0)
    {
      v4(a1[13], *a1, *(void *)(v3 + 16), *(void *)(v3 + 32), *(unsigned __int8 *)(*(void *)(v3 + 24) + 64));
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v5 = (const void *)a1[11];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[12];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[13];
  if (v7) {
    CFRelease(v7);
  }
  free(a1);
}

uint64_t ckg_removeContentKey(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(__CFDictionary **)(a1 + 40);
    CFStringRef Identifier = (const void *)FigContentKeySpecifierGetIdentifier(a2);
    CFDictionaryRemoveValue(v3, Identifier);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ckb_removeRequestReferences(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = ckg_removeRequest(a2, a3);
  if (!v6) {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), *(const void **)(a3 + 32));
  }
  return v6;
}

uint64_t ckb_sendStatusCallbackDispatch(const void *a1, const void *a2, void *a3, NSObject *a4, const void *a5, const void *a6)
{
  if (a2 && a4 && a5 && (double v12 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E004096C37AFBuLL)) != 0)
  {
    CFDictionaryRef v13 = v12;
    if (a1) {
      CFTypeRef v14 = CFRetain(a1);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *CFDictionaryRef v13 = v14;
    v13[13] = CFRetain(a2);
    v13[1] = *a3;
    v13[2] = a3[1];
    v13[3] = a3[2];
    v13[12] = CFRetain(a5);
    if (a6) {
      CFTypeRef v15 = CFRetain(a6);
    }
    else {
      CFTypeRef v15 = 0;
    }
    v13[16] = v15;
    dispatch_async_f(a4, v13, (dispatch_function_t)ckb_sendStatusCallbackOnQueue);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void ckb_sendStatusCallbackOnQueue(void *a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_21;
  }
  uint64_t v2 = (void *)a1[12];
  if (v2[22])
  {
    uint64_t v3 = (void (*)(void, void, void, void))a1[3];
    if (v3) {
      v3(a1[13], *a1, v2[2], v2[4]);
    }
    goto LABEL_10;
  }
  uint64_t v4 = v2[8];
  if (!v4 || !*(void *)(v4 + 80) && FigContentKeySpecifierGetKeySystem(*(void *)(v4 + 16)) != 3)
  {
LABEL_21:
    FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v5 = (void (*)(void, void, void, void, void, void))a1[2];
  if (v5) {
    v5(a1[13], *a1, *(void *)(a1[12] + 16), *(void *)(a1[12] + 32), *(void *)(v4 + 80), a1[16]);
  }
LABEL_10:
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v6 = (const void *)a1[12];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[13];
  if (v7) {
    CFRelease(v7);
  }
  CFTypeRef v8 = (const void *)a1[16];
  if (v8) {
    CFRelease(v8);
  }

  free(a1);
}

uint64_t ckb_createRequestWithRequestID(CFTypeRef cf, void *a2, void *a3, const void *a4, const void *a5, const void *a6, char a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a3 || !a9)
  {
    uint64_t v28 = FigSignalErrorAt();
LABEL_21:
    uint64_t v20 = 0;
    goto LABEL_22;
  }
  CFAllocatorRef v17 = CFGetAllocator(cf);
  char v31 = a3;
  uint64_t v18 = a3[2];
  context[0] = xmmword_1E5791398;
  if (ckr_getTypeID_once != -1) {
    dispatch_once_f(&ckr_getTypeID_once, context, (dispatch_function_t)ckbutil_registerClass);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v20 = Instance;
    CFTypeRef v21 = (CFTypeRef)a2[2];
    if (v21) {
      CFTypeRef v21 = CFRetain(v21);
    }
    *(void *)(v20 + 16) = v21;
    *(void *)(v20 + 24) = CFRetain(a2);
    *(void *)(v20 + 32) = a8;
    *(unsigned char *)(v20 + 72) = a7;
    *(void *)(v20 + 40) = cf;
    *(void *)(v20 + 48) = v18;
    if (a4) {
      CFTypeRef v22 = CFRetain(a4);
    }
    else {
      CFTypeRef v22 = 0;
    }
    BOOL v23 = v31;
    *(void *)(v20 + 136) = v22;
    if (a5) {
      CFTypeRef v24 = CFRetain(a5);
    }
    else {
      CFTypeRef v24 = 0;
    }
    *(void *)(v20 + 160) = v24;
    if (a6) {
      CFTypeRef v25 = CFRetain(a6);
    }
    else {
      CFTypeRef v25 = 0;
    }
    *(void *)(v20 + 168) = v25;
    *(void *)(v20 + 80) = 1;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(v20 + 120) = Mutable;
    if (Mutable)
    {
      FigCFDictionarySetBoolean();
      *(void *)(v20 + 216) = 0;
      *(void *)(v20 + 224) = v20 + 216;
LABEL_19:
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v28 = ckg_setRequest((uint64_t)v23, (const void **)v20);
      if (v28) {
        goto LABEL_22;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), *(const void **)(v20 + 32), v23);
      CFRelease((CFTypeRef)v20);
      *a9 = v20;
      goto LABEL_21;
    }
    uint64_t v28 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v20);
  }
  else
  {
    uint64_t v28 = FigSignalErrorAt();
    BOOL v23 = a3;
  }
  uint64_t v20 = 0;
  if (!v28) {
    goto LABEL_19;
  }
LABEL_22:
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v20) {
    CFRelease((CFTypeRef)v20);
  }
  return v28;
}

void ckr_finalize(uint64_t a1)
{
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (v4)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
      if (v7) {
        v7(v3, v4);
      }
    }
  }
  CFTypeRef v8 = *(const void **)(a1 + 16);
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v9 = *(const void **)(a1 + 24);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(a1 + 64);
  if (v10) {
    CFRelease(v10);
  }
  double v11 = *(const void **)(a1 + 128);
  if (v11) {
    CFRelease(v11);
  }
  double v12 = *(const void **)(a1 + 136);
  if (v12) {
    CFRelease(v12);
  }
  CFDictionaryRef v13 = *(const void **)(a1 + 144);
  if (v13) {
    CFRelease(v13);
  }
  CFTypeRef v14 = *(const void **)(a1 + 152);
  if (v14) {
    CFRelease(v14);
  }
  CFTypeRef v15 = *(const void **)(a1 + 160);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(const void **)(a1 + 96);
  if (v16) {
    CFRelease(v16);
  }
  CFAllocatorRef v17 = *(const void **)(a1 + 168);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 176);
  if (v18) {
    CFRelease(v18);
  }
  size_t v19 = *(const void **)(a1 + 184);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 192);
  if (v20) {
    CFRelease(v20);
  }
  CFTypeRef v21 = *(const void **)(a1 + 200);
  if (v21) {
    CFRelease(v21);
  }
  CFTypeRef v22 = *(const void **)(a1 + 112);
  if (v22) {
    CFRelease(v22);
  }
  BOOL v23 = *(const void **)(a1 + 120);
  if (v23) {
    CFRelease(v23);
  }
  ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a1 + 208));
  CFTypeRef v24 = *(void **)(a1 + 216);
  if (v24)
  {
    do
    {
      uint64_t v26 = (void *)*v24;
      CFTypeRef v25 = (void *)v24[1];
      if (*v24)
      {
        v26[1] = v25;
        CFTypeRef v25 = (void *)v24[1];
      }
      else
      {
        *(void *)(a1 + 224) = v25;
      }
      void *v25 = v26;
      CFTypeRef v27 = v24[6];
      if (v27) {
        dispatch_release(v27);
      }
      uint64_t v28 = (const void *)v24[2];
      if (v28) {
        CFRelease(v28);
      }
      free(v24);
      CFTypeRef v24 = v26;
    }
    while (v26);
  }
}

CFStringRef ckr_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"%lld/%lld", *(void *)(a1 + 32) >> 8, *(void *)(a1 + 32));
}

uint64_t ckg_setRequest(uint64_t a1, const void **a2)
{
  if (!a1
    || !a2
    || CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 48), a2[4])
    || CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 56), a2[2]))
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2[4], a2);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), a2[2], a2);
    return 0;
  }
}

uint64_t ckg_removeRequest(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), *(const void **)(a2 + 32));
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), *(const void **)(a2 + 16));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void ck_finalize(uint64_t a1)
{
  if (a1) {
    ckbutil_cancelAndReleaseTimer((dispatch_object_t *)(a1 + 88));
  }
  if (*(void *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    if (!FigNotificationCenterRemoveWeakListener())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 72);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 80);
  if (v7) {
    CFRelease(v7);
  }
  CFTypeRef v8 = *(const void **)(a1 + 96);
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
  }
}

void ck_persistentKeyUpdatedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    CFTypeRef v8 = (const void *)v7;
    CFNumberRef Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1FD68]);
    if (Value)
    {
      uint64_t v10 = Value;
      double v11 = *(const void **)(a2 + 16);
      uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      CFDictionaryRef v13 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040149E097CuLL);
      if (v13)
      {
        CFTypeRef v14 = v13;
        *CFDictionaryRef v13 = CFRetain(v8);
        if (v11) {
          CFTypeRef v15 = CFRetain(v11);
        }
        else {
          CFTypeRef v15 = 0;
        }
        v14[1] = v15;
        v14[2] = CFRetain(v10);
        dispatch_async_f(*DerivedStorage, v14, (dispatch_function_t)ckb_sendDidUpdatePersistableKeyAsyncDispatch);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CFRelease(v8);
  }
}

void ck_externalProtectionStateChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    uint64_t v5 = *(const void **)(a2 + 16);
    uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    uint64_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v7)
    {
      CFTypeRef v8 = v7;
      *uint64_t v7 = CFRetain(v4);
      if (v5) {
        CFTypeRef v9 = CFRetain(v5);
      }
      else {
        CFTypeRef v9 = 0;
      }
      v8[1] = v9;
      dispatch_async_f(*DerivedStorage, v8, (dispatch_function_t)ckb_sendDidExternalProtectionStatusChangeAsyncDispatch);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v4);
  }
}

void ckb_sendDidUpdatePersistableKeyAsyncDispatch(uint64_t a1)
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)
    && (CFTypeRef v3 = *(CFTypeRef *)a1,
        uint64_t v2 = *(const void **)(a1 + 8),
        uint64_t v4 = *(const void **)(a1 + 16),
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage(),
        v2)
    && v4
    && (uint64_t v6 = DerivedStorage, DerivedStorage[3])
    && DerivedStorage[11]
    && DerivedStorage[7]
    && (uint64_t v7 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E004096C37AFBuLL)) != 0)
  {
    CFTypeRef v8 = v7;
    if (v3) {
      CFTypeRef v9 = CFRetain(v3);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *CFTypeRef v8 = v9;
    v8[15] = CFRetain(v2);
    v8[14] = CFRetain(v4);
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    v8[13] = (CFTypeRef)v10;
    if (v10)
    {
      dispatch_async_f((dispatch_queue_t)v6[11], v8, (dispatch_function_t)ckb_sendDidUpdatePersistableKeyOnQueue);
    }
    else if (FigSignalErrorAt())
    {
      if (*v8) {
        CFRelease(*v8);
      }
      CFTypeRef v13 = v8[15];
      if (v13) {
        CFRelease(v13);
      }
      CFTypeRef v14 = v8[14];
      if (v14) {
        CFRelease(v14);
      }
      CFTypeRef v15 = v8[13];
      if (v15) {
        CFRelease(v15);
      }
      free(v8);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  double v11 = *(const void **)(a1 + 8);
  if (v11) {
    CFRelease(v11);
  }
  double v12 = *(const void **)(a1 + 16);
  if (v12) {
    CFRelease(v12);
  }

  free((void *)a1);
}

void ckb_sendDidUpdatePersistableKeyOnQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    FigSignalErrorAt();
  }
  else {
    (*(void (**)(void, void, void, void))(DerivedStorage + 56))(a1[13], *a1, a1[15], a1[14]);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFTypeRef v3 = (const void *)a1[15];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[14];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[13];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

void ckb_sendDidExternalProtectionStatusChangeAsyncDispatch(uint64_t a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_19;
  }
  CFTypeRef v3 = *(CFTypeRef *)a1;
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!v2) {
    goto LABEL_19;
  }
  uint64_t v5 = DerivedStorage;
  if (!DerivedStorage[3] || !DerivedStorage[11] || !DerivedStorage[10]) {
    goto LABEL_12;
  }
  uint64_t v6 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E004096C37AFBuLL);
  if (!v6)
  {
LABEL_19:
    FigSignalErrorAt();
    goto LABEL_12;
  }
  uint64_t v7 = v6;
  if (v3) {
    CFTypeRef v8 = CFRetain(v3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *uint64_t v7 = v8;
  v7[15] = CFRetain(v2);
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  v7[13] = (CFTypeRef)v9;
  if (v9)
  {
    dispatch_async_f((dispatch_queue_t)v5[11], v7, (dispatch_function_t)ckb_sendDidExternalProtectionStatusChangeOnQueue);
  }
  else if (FigSignalErrorAt())
  {
    if (*v7) {
      CFRelease(*v7);
    }
    CFTypeRef v11 = v7[15];
    if (v11) {
      CFRelease(v11);
    }
    CFTypeRef v12 = v7[13];
    if (v12) {
      CFRelease(v12);
    }
    free(v7);
  }
LABEL_12:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v10 = *(const void **)(a1 + 8);
  if (v10) {
    CFRelease(v10);
  }

  free((void *)a1);
}

void ckb_sendDidExternalProtectionStatusChangeOnQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    FigSignalErrorAt();
  }
  else {
    (*(void (**)(void, void, void))(DerivedStorage + 80))(a1[13], *a1, a1[15]);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFTypeRef v3 = (const void *)a1[15];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[13];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

void ckb_startRequestDispatch(uint64_t a1)
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)
    && (uint64_t v2 = *(void *)(a1 + 8)) != 0
    && (uint64_t v3 = *(void *)(a1 + 16)) != 0)
  {
    CFTypeRef v4 = *(CFTypeRef *)a1;
    *(CFAbsoluteTime *)(v3 + 232) = CFAbsoluteTimeGetCurrent();
    ckb_processRequestViaNextHandler(v4, v2, v3);
  }
  else
  {
    FigSignalErrorAt();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v5 = *(const void **)(a1 + 8);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 16);
  if (v6) {
    CFRelease(v6);
  }

  free((void *)a1);
}

void ckb_createRequestDataDispatch(uint64_t a1)
{
  v92[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  CFTypeRef v76 = 0;
  CFTypeRef v77 = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_121;
  }
  int v5 = ckb_copyGroupAndRequestFromID(v2, v3, &v76, &v77);
  if (v5) {
    goto LABEL_122;
  }
  if (FigContentKeySpecifierGetKeySystem(*((void *)v77 + 2)) != 1 || *((_DWORD *)v77 + 14)) {
    goto LABEL_121;
  }
  int v6 = ckg_removeRequest((uint64_t)v76, (uint64_t)v77);
  if (v6)
  {
LABEL_102:
    CFTypeRef v58 = 0;
    goto LABEL_103;
  }
  CFMutableDictionaryRef Mutable = 0;
  CFTypeRef v8 = (uint64_t *)v77;
  int v9 = *(_DWORD *)(v4 + 56);
  CFTypeRef v80 = 0;
  CFTypeRef cf = 0;
  if (!v9 || *((void *)v77 + 8)) {
    goto LABEL_27;
  }
  KeySysteCFIndex m = FigContentKeySpecifierGetKeySystem(*((void *)v77 + 2));
  CFStringRef Identifier = (const void *)FigContentKeySpecifierGetIdentifier(v8[2]);
  uint64_t SupportedProtocolVersions = (const void *)FigContentKeySpecifierGetSupportedProtocolVersions(v8[2]);
  int v13 = FigContentKeySpecifierCreate(KeySystem, Identifier, v9, SupportedProtocolVersions, (uint64_t *)&cf);
  if (v13)
  {
    int v6 = v13;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_27;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    int v18 = FigSignalErrorAt();
    goto LABEL_127;
  }
  FigCFDictionaryGetBooleanValue();
  FigCFDictionarySetValue();
  uint64_t v15 = FigGetAllocatorForMedia();
  uint64_t v16 = v8[3];
  int v18 = FigContentKeyRequestParamsCreate(v15, cf, *(unsigned char *)(v16 + 24), *(_DWORD *)(v16 + 28), *(_DWORD *)(v16 + 32), v17, *(const void **)(v16 + 40), *(const void **)(v16 + 48), *(void *)(v16 + 56), *(_WORD *)(v16 + 64), HIBYTE(*(_WORD *)(v16 + 64)), (uint64_t)Mutable, (uint64_t *)&v80);
  if (v18)
  {
LABEL_127:
    int v6 = v18;
    goto LABEL_27;
  }
  size_t v19 = (const void *)v8[2];
  CFTypeRef v20 = cf;
  void v8[2] = (uint64_t)cf;
  if (v20) {
    CFRetain(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  CFTypeRef v21 = (const void *)v8[3];
  CFTypeRef v22 = v80;
  void v8[3] = (uint64_t)v80;
  if (v22) {
    CFRetain(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (dword_1E9350C30)
  {
    unsigned int v79 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v24 = v79;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = v24 & 0xFFFFFFFE;
    }
    if (v25)
    {
      uint64_t v26 = v8[5];
      int v82 = 136315906;
      uint64_t v83 = "ckr_overrideKeyRequestParamsAttributesIfPossible";
      __int16 v84 = 2048;
      uint64_t v85 = v26;
      __int16 v86 = 2114;
      CFTypeRef v87 = v8;
      __int16 v88 = 1024;
      LODWORD(v89) = v9;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
  }
LABEL_27:
  if (v80) {
    CFRelease(v80);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v6) {
    goto LABEL_102;
  }
  int v5 = ckg_setRequest((uint64_t)v76, (const void **)v77);
  if (v5) {
    goto LABEL_122;
  }
  int v5 = ckg_ensureContentKeyForRequest((uint64_t)v76, (uint64_t *)v77);
  if (v5) {
    goto LABEL_122;
  }
  if (!v77)
  {
    int v5 = FigSignalErrorAt();
    if (!v5) {
      goto LABEL_121;
    }
LABEL_122:
    int v6 = v5;
    goto LABEL_102;
  }
  CFTypeRef v27 = (uint64_t *)*((void *)v77 + 8);
  if (!v27)
  {
LABEL_121:
    int v5 = FigSignalErrorAt();
    goto LABEL_122;
  }
  v92[0] = 0;
  CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFTypeRef v29 = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v29)
  {
    uint64_t v30 = v29;
    char v31 = *(const void **)(v4 + 16);
    if (v31) {
      CFDictionarySetValue(v29, (const void *)*MEMORY[0x1E4F218F0], v31);
    }
    uint64_t v32 = *(const void **)(v4 + 24);
    if (v32) {
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E4F218F8], v32);
    }
    uint64_t v33 = *(const void **)(v4 + 48);
    if (v33) {
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E4F21938], v33);
    }
    uint64_t v34 = *(const void **)(v4 + 32);
    if (v34) {
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E4F21918], v34);
    }
    FigCFDictionarySetInt();
    FigCFDictionarySetInt64();
    uint64_t v35 = (void *)MEMORY[0x1E4F1CFD0];
    if (*(_DWORD *)(v27[3] + 28) == 2) {
      CFDictionarySetValue(v30, (const void *)*MEMORY[0x1E4F21908], (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (*(unsigned char *)(v4 + 60)) {
      FigCFDictionarySetInt();
    }
    if (!*(unsigned char *)(v4 + 61)) {
      goto LABEL_57;
    }
    uint64_t v36 = v27[10];
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    CFAllocatorRef v39 = *(uint64_t (**)(uint64_t, void, void))(v38 + 56);
    if (!v39) {
      goto LABEL_97;
    }
    int v40 = v39(v36, *MEMORY[0x1E4F1FE18], *v35);
    if (!v40)
    {
LABEL_57:
      if (*(_DWORD *)(v27[3] + 28) > 1u)
      {
        unsigned int v46 = 0;
        unsigned int v47 = 0;
        goto LABEL_63;
      }
      CFArrayRef v41 = *(const __CFArray **)(v4 + 40);
      if (v41 && CFArrayGetCount(v41) >= 1)
      {
        uint64_t v42 = v27[10];
        uint64_t v43 = *(void *)(v4 + 40);
        uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v44) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = 0;
        }
        CFTypeRef v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 56);
        if (v65)
        {
          uint64_t v66 = *MEMORY[0x1E4F1FDE8];
          uint64_t v67 = v42;
          uint64_t v68 = v43;
LABEL_95:
          int v71 = v65(v67, v66, v68);
          CFTypeRef v58 = 0;
          if (v71)
          {
            int v6 = v71;
            goto LABEL_98;
          }
          unsigned int v46 = 0;
          unsigned int v47 = 0;
LABEL_63:
          uint64_t v48 = v27[10];
          CFAllocatorRef v49 = CFGetAllocator(v27);
          size_t v50 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v50) {
            int v51 = v50;
          }
          else {
            int v51 = 0;
          }
          if (*v51 >= 4uLL
            && (uint64_t v57 = (uint64_t (*)(uint64_t, __CFDictionary *, CFAllocatorRef, CFTypeRef *))v51[11]) != 0)
          {
            int v6 = v57(v48, v30, v49, v92);
            if (v6)
            {
              CFTypeRef v58 = 0;
              if (!v47)
              {
LABEL_76:
                if (!v46)
                {
LABEL_98:
                  CFRelease(v30);
                  if (v92[0]) {
                    CFRelease(v92[0]);
                  }
                  if (!v6) {
                    goto LABEL_101;
                  }
                  goto LABEL_103;
                }
LABEL_91:
                CFRelease(v46);
                goto LABEL_98;
              }
            }
            else
            {
              CFTypeRef v58 = v92[0];
              v92[0] = 0;
              if (!v47) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            CFTypeRef v58 = 0;
            int v6 = -12782;
            if (!v47) {
              goto LABEL_76;
            }
          }
LABEL_90:
          CFRelease(v47);
          if (!v46) {
            goto LABEL_98;
          }
          goto LABEL_91;
        }
        goto LABEL_97;
      }
      CFArrayRef v52 = (const __CFArray *)FigContentKeySpecifierGetSupportedProtocolVersions(v27[2]);
      if (v52 && CFArrayGetCount(v52) >= 1)
      {
        uint64_t v53 = v27[10];
        uint64_t v54 = FigContentKeySpecifierGetSupportedProtocolVersions(v27[2]);
        uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v55) {
          uint64_t v56 = v55;
        }
        else {
          uint64_t v56 = 0;
        }
        CFTypeRef v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 56);
        if (v65)
        {
          uint64_t v66 = *MEMORY[0x1E4F1FDE8];
          uint64_t v67 = v53;
          uint64_t v68 = v54;
          goto LABEL_95;
        }
LABEL_97:
        CFTypeRef v58 = 0;
        int v6 = -12782;
        goto LABEL_98;
      }
      uint64_t UInt64 = FigCFNumberCreateUInt64();
      if (UInt64)
      {
        unsigned int v47 = (const void *)UInt64;
        CFAllocatorRef v60 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFTypeRef v61 = CFArrayCreateMutable(v60, 1, MEMORY[0x1E4F1D510]);
        unsigned int v46 = v61;
        if (v61)
        {
          CFArrayAppendValue(v61, v47);
          uint64_t v62 = v27[10];
          uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v63) {
            uint64_t v64 = v63;
          }
          else {
            uint64_t v64 = 0;
          }
          __int16 v69 = *(uint64_t (**)(uint64_t, void, __CFArray *))(v64 + 56);
          if (!v69)
          {
            CFTypeRef v58 = 0;
            int v6 = -12782;
            goto LABEL_90;
          }
          int v70 = v69(v62, *MEMORY[0x1E4F1FDE8], v46);
          if (!v70) {
            goto LABEL_63;
          }
        }
        else
        {
          int v70 = FigSignalErrorAt();
        }
        int v6 = v70;
        CFTypeRef v58 = 0;
        goto LABEL_90;
      }
      int v40 = FigSignalErrorAt();
    }
    int v6 = v40;
    CFTypeRef v58 = 0;
    goto LABEL_98;
  }
  int v6 = FigSignalErrorAt();
  CFTypeRef v58 = 0;
  if (!v6)
  {
LABEL_101:
    *((_DWORD *)v77 + 14) = 1;
    *(void *)(a1 + 32) = v58;
    goto LABEL_102;
  }
LABEL_103:
  if (dword_1E9350C30)
  {
    LODWORD(cf) = 0;
    LOBYTE(v80) = 0;
    uint64_t v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v73 = cf;
    if (os_log_type_enabled(v72, (os_log_type_t)v80)) {
      unsigned int v74 = v73;
    }
    else {
      unsigned int v74 = v73 & 0xFFFFFFFE;
    }
    if (v74)
    {
      uint64_t v75 = *(void *)(a1 + 32);
      int v82 = 136316162;
      uint64_t v83 = "ckb_createRequestData";
      __int16 v84 = 2048;
      uint64_t v85 = v2;
      __int16 v86 = 2114;
      CFTypeRef v87 = v77;
      __int16 v88 = 2048;
      uint64_t v89 = v75;
      __int16 v90 = 1024;
      int v91 = v6;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v77) {
    CFRelease(v77);
  }
  if (v76) {
    CFRelease(v76);
  }
  *(_DWORD *)(a1 + 24) = v6;
}

void ckb_createPersistableKeyDataDispatch(uint64_t a1)
{
  v25[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_37;
  }
  int v5 = ckb_copyGroupAndRequestFromID(v2, v3, &v23, &cf);
  if (v5) {
    goto LABEL_38;
  }
  if (FigContentKeySpecifierGetKeySystem(*((void *)cf + 2)) != 1 || *((_DWORD *)cf + 14) != 1) {
    goto LABEL_37;
  }
  int v5 = ckg_ensureContentKeyForRequest((uint64_t)v23, (uint64_t *)cf);
  if (v5) {
    goto LABEL_38;
  }
  if (!cf)
  {
    int v20 = FigSignalErrorAt();
    if (v20) {
      goto LABEL_27;
    }
    goto LABEL_37;
  }
  int v6 = (void *)*((void *)cf + 8);
  if (!v6)
  {
LABEL_37:
    int v5 = FigSignalErrorAt();
    goto LABEL_38;
  }
  v25[0] = 0;
  if (!v4)
  {
    int v20 = FigSignalErrorAt();
    CFTypeRef v21 = 0;
    if (!v20) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  uint64_t v7 = v6[10];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, void))(v9 + 56);
  if (!v10)
  {
LABEL_26:
    int v20 = -12782;
    goto LABEL_27;
  }
  int v5 = v10(v7, *MEMORY[0x1E4F1FE18], *MEMORY[0x1E4F1CFD0]);
  if (v5) {
    goto LABEL_38;
  }
  uint64_t v11 = v6[10];
  CFTypeRef v12 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  if (*v13 < 4uLL) {
    goto LABEL_26;
  }
  CFTypeRef v14 = (uint64_t (*)(uint64_t, uint64_t, void))v13[12];
  if (!v14) {
    goto LABEL_26;
  }
  int v5 = v14(v11, v4, 0);
  if (v5)
  {
LABEL_38:
    int v20 = v5;
    goto LABEL_27;
  }
  uint64_t v15 = v6[10];
  CFAllocatorRef v16 = CFGetAllocator(v6);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  size_t v19 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v18 + 48);
  if (!v19) {
    goto LABEL_26;
  }
  int v20 = v19(v15, *MEMORY[0x1E4F1FDD0], v16, v25);
  CFTypeRef v21 = v25[0];
  if (!v20)
  {
LABEL_25:
    int v20 = 0;
    *((_DWORD *)cf + 14) = 2;
    *(void *)(a1 + 32) = v21;
    goto LABEL_27;
  }
  if (v25[0]) {
    CFRelease(v25[0]);
  }
LABEL_27:
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  *(_DWORD *)(a1 + 24) = v20;
}

uint64_t ckb_processResponseDispatch(uint64_t a1)
{
  uint64_t result = ckb_processResponse(*(const void **)a1, *(const void **)(a1 + 8), *(void *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void ckb_processResponseErrorDispatch(uint64_t a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)a1;
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t v4 = *(__CFError **)(a1 + 16);
  CFTypeRef v9 = 0;
  cf[0] = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_13;
  }
  int v5 = ckb_copyGroupAndRequestFromID((uint64_t)v3, v2, &v9, cf);
  if (v5)
  {
LABEL_14:
    int v6 = v5;
    goto LABEL_5;
  }
  if (*((_DWORD *)cf[0] + 14) >= 3u)
  {
LABEL_13:
    int v5 = FigSignalErrorAt();
    goto LABEL_14;
  }
  ckb_transitionRequestToTerminalState(v3, v9, (uint64_t)cf[0], v4);
  int v6 = 0;
LABEL_5:
  CFTypeRef v7 = cf[0];
  if (cf[0] && dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFTypeRef v7 = cf[0];
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  *(_DWORD *)(a1 + 24) = v6;
}

uint64_t ckb_renewDispatch(uint64_t a1)
{
  uint64_t result = ckb_renew(*(const void **)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24), *(NSObject **)(a1 + 32), 0, 0, *(__CFArray ***)(a1 + 40));
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

void ckb_setRequestHandlingCallbacksDispatch(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(NSObject **)(a1 + 24);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    int v8 = FigSignalErrorAt();
    int v5 = 0;
  }
  else
  {
    int v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (v5)
    {
      __copy_assignment_8_8_t0w8_pa0_18803_8_pa0_11926_16_pa0_32929_24_pa0_16857_32_pa0_23185_40_pa0_3293_48(DerivedStorage + 4, v2);
      int v6 = (const void *)DerivedStorage[3];
      DerivedStorage[3] = v5;
      CFRetain(v5);
      if (v6) {
        CFRelease(v6);
      }
      CFTypeRef v7 = DerivedStorage[11];
      if (v7) {
        dispatch_release(v7);
      }
      dispatch_retain(v3);
      int v8 = 0;
      DerivedStorage[11] = v3;
    }
    else
    {
      int v8 = FigSignalErrorAt();
    }
  }
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v5) {
    CFRelease(v5);
  }
  *(_DWORD *)(a1 + 32) = v8;
}

uint64_t ckb_createGroupDispatch(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = *(char **)(DerivedStorage + 96);
    *(void *)(DerivedStorage + 96) = v4 + 1;
    uint64_t result = ckb_ensureAndGetGroup(v2, v4);
    if (!result)
    {
      *(void *)(a1 + 8) = v4;
      if (dword_1E9350C30)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t result = 0;
    }
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t ckb_destroyGroupDispatch(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)
    || !CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), v2))
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), v2);
    if (dword_1E9350C30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void ckb_associateRequestWithGroupDispatch(uint64_t a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  uint64_t v4 = *(const void **)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v14 = 0;
  cf[0] = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_17;
  }
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), v4);
  if (!Value) {
    goto LABEL_17;
  }
  CFTypeRef v7 = Value;
  int v8 = ckb_copyGroupAndRequestFromID(v2, v3, &v14, cf);
  if (v8) {
    goto LABEL_9;
  }
  CFTypeRef v9 = (const void **)cf[0];
  if (*((_DWORD *)cf[0] + 14) || *((void *)cf[0] + 8))
  {
LABEL_17:
    int v8 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v10 = (CFMutableDictionaryRef *)v14;
  if (*((const void **)v14 + 2) == v4)
  {
    int v11 = 0;
    goto LABEL_10;
  }
  CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)v14 + 6), *((const void **)cf[0] + 4));
  CFDictionaryRemoveValue(v10[7], v9[2]);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), *((const void **)cf[0] + 4));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), v3, v7);
  CFTypeRef v12 = (const void **)cf[0];
  *((void *)cf[0] + 6) = v4;
  int v8 = ckg_setRequest((uint64_t)v7, v12);
LABEL_9:
  int v11 = v8;
LABEL_10:
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v14) {
    CFRelease(v14);
  }
  *(_DWORD *)(a1 + 24) = v11;
}

void ckb_createSecureTokenDataRecDispatch(uint64_t a1)
{
  uint64_t v1 = a1;
  v41[23] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  CMBaseObjectGetDerivedStorage();
  v41[0] = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176) || (*(_DWORD *)(v2 + 56) - 1) >= 2) {
    goto LABEL_13;
  }
  int v3 = *(_DWORD *)(v2 + 16);
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      CFDataRef theData = *(const __CFData **)(v2 + 24);
      if (theData)
      {
        uint64_t v40 = v1;
        CFArrayRef v17 = *(const __CFArray **)(v2 + 40);
        if (!v17)
        {
          int v11 = FigSignalErrorAt();
          CFTypeRef v12 = 0;
          uint64_t UInt64 = 0;
          CFDictionaryRef v6 = 0;
          goto LABEL_59;
        }
        CFDictionaryRef v6 = 0;
        goto LABEL_34;
      }
      goto LABEL_13;
    }
    if (v3 != 1) {
      goto LABEL_13;
    }
  }
  if (!*(void *)(v2 + 32))
  {
LABEL_13:
    int v11 = FigSignalErrorAt();
    CFTypeRef v12 = 0;
    uint64_t UInt64 = 0;
    CFDictionaryRef v6 = 0;
    goto LABEL_14;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFDictionaryRef v5 = (const __CFDictionary *)CFPropertyListCreateWithData(AllocatorForMedia, *(CFDataRef *)(v2 + 32), 0, 0, 0);
  CFDictionaryRef v6 = v5;
  if (!v5
    || (CFTypeID v7 = CFGetTypeID(v5), v7 != CFDictionaryGetTypeID())
    || (CFNumberRef Value = CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E4F21920])) == 0
    || (CFTypeID v9 = CFGetTypeID(Value), v9 != CFDataGetTypeID())
    || (CFDataRef v10 = (const __CFData *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E4F218F0])) == 0
    || (CFDataRef v35 = v10, v36 = CFGetTypeID(v10), v36 != CFDataGetTypeID()))
  {
    int v11 = FigSignalErrorAt();
    CFTypeRef v12 = 0;
    uint64_t UInt64 = 0;
LABEL_14:
    CFMutableDictionaryRef Mutable = 0;
    CFDictionaryRef v15 = 0;
    goto LABEL_15;
  }
  CFDataRef theData = v35;
  uint64_t v40 = v1;
  CFArrayRef v37 = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E4F21928]);
  if (!v37) {
    goto LABEL_57;
  }
  CFArrayRef v17 = v37;
  CFTypeID v38 = CFGetTypeID(v37);
  if (v38 != CFArrayGetTypeID()) {
    goto LABEL_57;
  }
LABEL_34:
  unsigned int Count = CFArrayGetCount(v17);
  int v19 = Count;
  if (!Count)
  {
LABEL_57:
    int v11 = FigSignalErrorAt();
    CFTypeRef v12 = 0;
LABEL_58:
    uint64_t UInt64 = 0;
LABEL_59:
    CFMutableDictionaryRef Mutable = 0;
LABEL_60:
    CFDictionaryRef v15 = 0;
LABEL_61:
    uint64_t v1 = v40;
    goto LABEL_15;
  }
  uint64_t v20 = Count;
  CFTypeRef v12 = (char *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  CFIndex v21 = 0;
  CFTypeRef v22 = v12;
  do
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v17, v21);
    if (!ValueAtIndex
      || (CFNumberRef v24 = ValueAtIndex, v25 = CFGetTypeID(ValueAtIndex), v25 != CFNumberGetTypeID())
      || !CFNumberGetValue(v24, kCFNumberSInt32Type, v22))
    {
      int v11 = FigSignalErrorAt();
      uint64_t UInt64 = 0;
      CFMutableDictionaryRef Mutable = 0;
      CFDictionaryRef v15 = 0;
      uint64_t v1 = v40;
      goto LABEL_15;
    }
    ++v21;
    v22 += 4;
  }
  while (v20 != v21);
  int v26 = *(_DWORD *)(v2 + 56);
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  if (v26 == 1) {
    int v29 = Qhl17oSYJtCJIxM((uint64_t)BytePtr, Length, (uint64_t)v12, v19, (uint64_t)v41);
  }
  else {
    int v29 = V2qUlL4PZ5VKVXDsUHg5z((uint64_t)BytePtr, Length, (uint64_t)v12, v19, (uint64_t)v41);
  }
  if (v29)
  {
    int v11 = v29;
    goto LABEL_58;
  }
  CFAllocatorRef v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v30, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    int v11 = FigSignalErrorAt();
    uint64_t UInt64 = 0;
    goto LABEL_60;
  }
  CFAllocatorRef v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFDictionaryRef v15 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v15)
  {
    int v11 = FigSignalErrorAt();
    uint64_t UInt64 = 0;
    goto LABEL_61;
  }
  int v32 = *(_DWORD *)(v2 + 16);
  if (v32 == 3 || v32 == 1) {
    FigCFDictionarySetValue();
  }
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  if (!UInt64)
  {
    int v33 = FigSignalErrorAt();
    goto LABEL_71;
  }
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt32();
  int v33 = pC3lVfLuVJLMz((uint64_t)Mutable, (uint64_t)v15);
  if (v33)
  {
LABEL_71:
    int v11 = v33;
    goto LABEL_61;
  }
  uint64_t v34 = CFDictionaryGetValue(v15, @"yN1lNULD2GD");
  uint64_t v1 = v40;
  if (v34) {
    uint64_t v34 = CFRetain(v34);
  }
  int v11 = 0;
  *(void *)(v40 + 16) = v34;
LABEL_15:
  if (!v41[0]) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(v2 + 56) == 1)
  {
    MzdSdcDIXg8COV(v41[0]);
LABEL_18:
    if (!UInt64) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  WuLaQ4nIoKwZC7KxU(v41[0]);
  if (UInt64) {
LABEL_19:
  }
    CFRelease(UInt64);
LABEL_20:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v6) {
    CFRelease(v6);
  }
  free(v12);
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(v1 + 24) = v11;
}

const void *ckb_copyAuthorizationTokenDispatch(uint64_t a1)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v8 = 0;
  v9[0] = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_15;
  }
  uint64_t result = (const void *)ckb_getExistingKeyIfAny(v2, v3, (const void *)3, 1, &v8, v9);
  if (result)
  {
LABEL_16:
    int v6 = (int)result;
    goto LABEL_12;
  }
  if (!v8)
  {
    int v6 = 0;
    *(void *)(a1 + 16) = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)(v8 + 40) != 2
    || !*(void *)(v8 + 24)
    || (uint64_t v5 = *(void *)(v8 + 16)) == 0
    || FigContentKeySpecifierGetKeySystem(v5) != 3)
  {
LABEL_15:
    uint64_t result = (const void *)FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t result = *(const void **)(v8 + 64);
  if (result) {
    uint64_t result = CFRetain(result);
  }
  int v6 = 0;
  *(void *)(a1 + 16) = result;
LABEL_12:
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = (const void *)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 24) = v6;
  return result;
}

void ckb_getExternalProtectionStatusDispatch(uint64_t a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  cf[0] = 0;
  int v29 = 0;
  char v28 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_40;
  }
  int ExistingKeyIfAny = ckb_getExistingKeyIfAny(v2, v3, 0, 1, &v26, &v27);
  if (ExistingKeyIfAny) {
    goto LABEL_41;
  }
  if (!v26 || *(_DWORD *)(v26 + 40) != 2)
  {
LABEL_40:
    int ExistingKeyIfAny = FigSignalErrorAt();
    goto LABEL_41;
  }
  uint64_t v5 = *(void *)(v26 + 80);
  if (!v5)
  {
    int v24 = -19159;
    goto LABEL_33;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeID v9 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v8 + 48);
  if (!v9)
  {
LABEL_32:
    int v24 = -12782;
    goto LABEL_33;
  }
  int ExistingKeyIfAny = v9(v5, *MEMORY[0x1E4F1FE00], AllocatorForMedia, cf);
  if (ExistingKeyIfAny) {
    goto LABEL_41;
  }
  uint64_t v10 = *(void *)(v26 + 80);
  CFTypeRef v11 = cf[0];
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(uint64_t, void, CFTypeRef))(v13 + 56);
  if (!v14) {
    goto LABEL_32;
  }
  int ExistingKeyIfAny = v14(v10, *MEMORY[0x1E4F1FDA0], v11);
  if (ExistingKeyIfAny) {
    goto LABEL_41;
  }
  uint64_t v15 = *(void *)(v26 + 80);
  CFAllocatorRef v16 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    CFArrayRef v17 = v16;
  }
  else {
    CFArrayRef v17 = 0;
  }
  if (*v17 < 8uLL) {
    goto LABEL_32;
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, void, int *))v17[31];
  if (!v18) {
    goto LABEL_32;
  }
  int ExistingKeyIfAny = v18(v15, 0, &v29);
  if (ExistingKeyIfAny)
  {
LABEL_41:
    int v24 = ExistingKeyIfAny;
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(v26 + 80);
  uint64_t v20 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (*v20 < 8uLL) {
    goto LABEL_32;
  }
  CFIndex v21 = (uint64_t (*)(uint64_t, char *))v20[32];
  if (!v21) {
    goto LABEL_32;
  }
  int ExistingKeyIfAny = v21(v19, &v28);
  if (ExistingKeyIfAny) {
    goto LABEL_41;
  }
  if (v28)
  {
    if (v29 == 1 || v29 == 4) {
      int v23 = 2;
    }
    else {
      int v23 = 3;
    }
  }
  else
  {
    int v23 = 1;
  }
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v24 = 0;
  *(_DWORD *)(a1 + 16) = v23;
LABEL_33:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  *(_DWORD *)(a1 + 20) = v24;
}

uint64_t ckb_setAllowedRequestHandlersDispatch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t result = 0;
    *(void *)(DerivedStorage + 16) = v2;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t ckb_revokeDispatch(uint64_t a1)
{
  v15[22] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  uint64_t v14 = 0;
  v15[0] = 0;
  uint64_t v13 = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176)) {
    goto LABEL_20;
  }
  uint64_t result = ckb_getExistingKeyIfAny(v2, (uint64_t)v3, 0, 1, v15, &v14);
  if (result) {
    goto LABEL_15;
  }
  uint64_t result = ckg_getRequestByKeySpecifier(v14, v3, (const void **)&v13);
  if (result) {
    goto LABEL_15;
  }
  if (!v15[0])
  {
LABEL_20:
    uint64_t result = FigSignalErrorAt();
LABEL_15:
    int v10 = result;
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(v15[0] + 80);
  if (!v5)
  {
    int v10 = -12780;
    goto LABEL_17;
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v8 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v11 = *(uint64_t (**)(uint64_t))(v9 + 24);
  if (v11)
  {
    uint64_t result = v11(v5);
    if (!result)
    {
      if (!v13 || (uint64_t result = ckb_removeRequestReferences(v2, v14, v13), !result)) {
        uint64_t result = ckg_removeContentKey(v14, (uint64_t)v3);
      }
    }
    goto LABEL_15;
  }
  int v10 = -12782;
LABEL_17:
  if (dword_1E9350C30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t FigVirtualDisplaySourceMovieCreate(const __CFAllocator *a1, const __CFString *a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = 0;
  CFTypeRef cf = 0;
  unsigned int v42 = 0;
  if (!a4) {
    goto LABEL_30;
  }
  CFStringRef v5 = a2;
  if (a2 || !theDict)
  {
    if (!a2)
    {
LABEL_30:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v30 = 4294954516;
      goto LABEL_31;
    }
  }
  else
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"moviePath");
    if (!Value) {
      goto LABEL_30;
    }
    CFStringRef v5 = Value;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(v5)) {
      goto LABEL_30;
    }
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  if (CStringPtrAndBufferToFree && access(CStringPtrAndBufferToFree, 4) < 0)
  {
    uint64_t v30 = *__error();
LABEL_31:
    free(v43);
    goto LABEL_43;
  }
  FigVirtualDisplaySourceGetClassID();
  uint64_t v10 = CMDerivedObjectCreate();
  if (v10)
  {
    uint64_t v30 = v10;
    CFArrayRef v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_31;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 8) = 0;
  *(void *)(DerivedStorage + 16) = dispatch_queue_create("FigVirtualDisplaySourceMovieQueue", 0);
  *(void *)(DerivedStorage + 24) = dispatch_semaphore_create(0);
  *(void *)(DerivedStorage + 32) = CFRetain(v5);
  CFURLRef v12 = CFURLCreateWithFileSystemPath(a1, v5, kCFURLPOSIXPathStyle, 0);
  if (!v12)
  {
    CFTypeID v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v30 = 4294954510;
    goto LABEL_31;
  }
  CFURLRef v13 = v12;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"AssetReader_RequiresInProcessOperation", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t v16 = FigAssetReaderCreateWithURLAndFormatReader(a1, (uint64_t)v13, 0, (uint64_t)Current, (uint64_t)Mutable, (CFTypeRef *)(DerivedStorage + 96));
  if (v16)
  {
    uint64_t v30 = v16;
    CFAllocatorRef v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    goto LABEL_35;
  }
  uint64_t v17 = *(void *)(DerivedStorage + 96);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, unsigned int *))(v19 + 16);
  if (!v20)
  {
    uint64_t v30 = 4294954514;
LABEL_22:
    CFAllocatorRef v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
LABEL_35:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_36:
    CFMutableDictionaryRef v25 = 0;
    int v24 = 0;
    goto LABEL_37;
  }
  uint64_t v21 = v20(v17, &v42);
  if (v21)
  {
    uint64_t v30 = v21;
    goto LABEL_22;
  }
  if (!v42)
  {
    CFArrayRef v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_36;
  }
  CFTypeRef v22 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v23 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  int v24 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(v24, @"AssetReader_MatrixHandling", @"AssetReader_PreserveMatrix");
  CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(a1, 0, v22, v23);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  uint64_t v26 = *(void *)(DerivedStorage + 96);
  uint64_t v27 = v42;
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  int v32 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, void, long long *, __CFDictionary *, uint64_t))(v29 + 48);
  if (!v32)
  {
    uint64_t v30 = 4294954514;
    goto LABEL_29;
  }
  long long v45 = *MEMORY[0x1E4F1F9F8];
  uint64_t v46 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v30 = v32(v26, v27, v25, 0, &v45, v24, DerivedStorage + 104);
  if (v30)
  {
LABEL_29:
    CFDataRef v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_37;
  }
  uint64_t v33 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(DerivedStorage + 40) = *MEMORY[0x1E4F1FA48];
  *(void *)(DerivedStorage + 56) = *(void *)(v33 + 16);
  uint64_t v34 = MEMORY[0x1E4F1FA10];
  *(_OWORD *)(DerivedStorage + 64) = *MEMORY[0x1E4F1FA10];
  *(void *)(DerivedStorage + 80) = *(void *)(v34 + 16);
  *a4 = cf;
  CFTypeRef cf = 0;
LABEL_37:
  free(v43);
  CFRelease(v13);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
LABEL_43:
  if (cf) {
    CFRelease(cf);
  }
  return v30;
}

void mov_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 8))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)DerivedStorage)
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 32);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 96);
  if (v2) {
    CFRelease(v2);
  }
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 24));
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 16));
}

uint64_t mov_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!CFEqual(@"sourceType", a2)) {
    return 4294954512;
  }
  CFTypeRef v5 = CFRetain(@"Movie");
  uint64_t result = 0;
  *a4 = v5;
  return result;
}

uint64_t mov_setProperty()
{
  return 4294954512;
}

uint64_t mov_plugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  CFURLRef v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __mov_plugProcessor_block_invoke;
    block[3] = &unk_1E57913D0;
    void block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v11;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v12 + 6);
  }
  else
  {
    int v10 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v5 = 4294955226;
    *((_DWORD *)v12 + 6) = -12070;
  }
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t mov_unplugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  CFURLRef v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __mov_unplugProcessor_block_invoke;
    block[3] = &unk_1E57913F8;
    void block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v11;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v12 + 6);
  }
  else
  {
    int v10 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v5 = 4294955226;
    *((_DWORD *)v12 + 6) = -12070;
  }
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t mov_start(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __mov_start_block_invoke;
  block[3] = &unk_1E5791420;
  block[4] = &v8;
  void block[5] = DerivedStorage;
  block[6] = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t mov_stop()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __mov_stop_block_invoke;
  block[3] = &__block_descriptor_tmp_9_0;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 24), 0xFFFFFFFFFFFFFFFFLL);
  return 0;
}

uint64_t mov_suspend()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __mov_suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_10_1;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  return 0;
}

uint64_t mov_resume()
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __mov_resume_block_invoke;
  v4[3] = &unk_1E57914B0;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __mov_plugProcessor_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v2 + 8) || *(void *)v2)
  {
    uint64_t result = FigSignalErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  else
  {
    uint64_t result = (uint64_t)CFRetain(*(CFTypeRef *)(a1 + 48));
    **(void **)(a1 + 40) = *(void *)(a1 + 48);
  }
  return result;
}

void __mov_unplugProcessor_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  if (!*(_DWORD *)(v2 + 8) && (uint64_t v3 = *(const void **)v2, *(void *)v2 == a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(void *)a1[5] = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12070;
  }
}

void __mov_start_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  if (*((_DWORD *)v2 + 2) || (uint64_t v3 = *v2) == 0)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12070;
    return;
  }
  CFTypeRef v28 = 0;
  CFTypeRef cf = 0;
  long long v26 = xmmword_194993030;
  BOOL v25 = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unsigned int v27 = 0;
  int v6 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v5 + 56);
  if (!v6)
  {
    int v13 = -12782;
LABEL_14:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_24:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_25;
  }
  int v7 = v6(v3, &cf, &v28);
  if (v7)
  {
    int v13 = v7;
    goto LABEL_14;
  }
  int v8 = FigDisplayModes_LookupTimingModeIDByIndex((const __CFArray *)v28, 0, (int *)&v27);
  if (v8)
  {
    int v13 = v8;
    uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    goto LABEL_24;
  }
  uint64_t v9 = v27;
  uint64_t v10 = *v2;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 64);
  if (!v15)
  {
    int v13 = -12782;
LABEL_22:
    uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    goto LABEL_24;
  }
  int v16 = v15(v10, v9, v9);
  if (v16)
  {
    int v13 = v16;
    goto LABEL_22;
  }
  if (FigDisplayModes_ExtractDimensionsFromTimingMode((const __CFArray *)v28, v27, (double *)&v26))
  {
    int v24 = v2;
    CFTypeRef v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
LABEL_36:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = v24;
    goto LABEL_20;
  }
  if (FigDisplayModes_ExtractOverscanInfoFromTimingMode((const __CFArray *)v28, v27, &v25))
  {
    int v24 = v2;
    int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    goto LABEL_36;
  }
LABEL_20:
  int v13 = 0;
  *((unsigned char *)v2 + 192) = 0;
  *((_OWORD *)v2 + 7) = v26;
  *((unsigned char *)v2 + 193) = v25;
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (v28) {
    CFRelease(v28);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v13;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    char v30 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if (v30) {
      int v19 = 1;
    }
    else {
      int v19 = 2;
    }
    uint64_t v20 = *(_DWORD **)(a1 + 40);
    v20[2] = v19;
    global_CMBufferQueueRef queue = dispatch_get_global_queue(2, 0);
    dispatch_async_f(global_queue, v20, (dispatch_function_t)mov_submitFrames);
  }
}

void mov_submitFrames(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  int v46 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2000000000;
  char v42 = 0;
  CMSampleBufferRef sbuf = 0;
  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  uint64_t v2 = *(void *)(a1 + 96);
  CMTime v47 = *(CMTime *)(a1 + 40);
  CMTime v35 = *(CMTime *)(a1 + 64);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *))(v4 + 96);
  if (!v5)
  {
    int v19 = -12782;
    *((_DWORD *)v44 + 6) = -12782;
LABEL_22:
    LODWORD(v47.value) = 0;
    LOBYTE(v35.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = v47.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v22 = value;
    }
    else {
      unsigned int v22 = value & 0xFFFFFFFE;
    }
    if (v22)
    {
      LODWORD(v49.value) = 136315650;
      *(CMTimeValue *)((char *)&v49.value + 4) = (CMTimeValue)"mov_submitFrames";
      LOWORD(v49.flags) = 1024;
      *(CMTimeFlags *)((char *)&v49.flags + 2) = 239;
      WORD1(v49.epoch) = 1024;
      HIDWORD(v49.epoch) = v19;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_28;
  }
  CMTime lhs = v47;
  CMTime v49 = v35;
  int v6 = v5(v2, &lhs, &v49);
  *((_DWORD *)v44 + 6) = v6;
  if (v6)
  {
    int v19 = v6;
    goto LABEL_22;
  }
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v37, HostTimeClock);
  CMTimeMake(&v36, 1, 2);
  int v8 = v40 + 3;
  if (!*((unsigned char *)v40 + 24))
  {
    while (1)
    {
      memset(&v35, 0, sizeof(v35));
      uint64_t v9 = *(void *)(a1 + 96);
      uint64_t v10 = *(unsigned int *)(a1 + 104);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, CMSampleBufferRef *))(v12 + 104);
      if (!v13)
      {
        int v23 = -12782;
        *((_DWORD *)v44 + 6) = -12782;
        goto LABEL_30;
      }
      int v14 = v13(v9, v10, 1, v8, &sbuf);
      *((_DWORD *)v44 + 6) = v14;
      if (v14) {
        break;
      }
      if (*((unsigned char *)v40 + 24)) {
        goto LABEL_36;
      }
      CMSampleBufferGetPresentationTimeStamp(&rhs, sbuf);
      CMTime lhs = v37;
      CMTimeAdd(&v35, &lhs, &rhs);
      CMTime type = v35;
      while (1)
      {
        uint64_t v15 = CMClockGetHostTimeClock();
        CMClockGetTime(&v49, v15);
        CMTime v47 = type;
        CMTimeSubtract(&lhs, &v47, &v49);
        signed int v16 = (int)(CMTimeGetSeconds(&lhs) * 1000000.0);
        if (v16 < 1) {
          break;
        }
        usleep(v16);
      }
      uint64_t v17 = *(NSObject **)(a1 + 16);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __mov_submitFrames_block_invoke;
      block[3] = &unk_1E5791448;
      block[6] = a1;
      void block[7] = sbuf;
      CMTime v31 = v35;
      CMTime v32 = v36;
      block[4] = &v43;
      void block[5] = &v39;
      dispatch_sync(v17, block);
      int v18 = *((_DWORD *)v44 + 6);
      if (v18)
      {
        LODWORD(v47.value) = 0;
        LOBYTE(type.value) = 0;
        unsigned int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v28 = v47.value;
        if (os_log_type_enabled(v27, type.value)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          LODWORD(v49.value) = 136315650;
          *(CMTimeValue *)((char *)&v49.value + 4) = (CMTimeValue)"mov_submitFrames";
          LOWORD(v49.flags) = 1024;
          *(CMTimeFlags *)((char *)&v49.flags + 2) = 269;
          WORD1(v49.epoch) = 1024;
          HIDWORD(v49.epoch) = v18;
          _os_log_send_and_compose_impl();
        }
        goto LABEL_35;
      }
      if (sbuf)
      {
        CFRelease(sbuf);
        CMSampleBufferRef sbuf = 0;
      }
      int v8 = v40 + 3;
      if (*((unsigned char *)v40 + 24)) {
        goto LABEL_28;
      }
    }
    int v23 = v14;
LABEL_30:
    LODWORD(v47.value) = 0;
    LOBYTE(type.value) = 0;
    int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v25 = v47.value;
    if (os_log_type_enabled(v24, type.value)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      LODWORD(v49.value) = 136315650;
      *(CMTimeValue *)((char *)&v49.value + 4) = (CMTimeValue)"mov_submitFrames";
      LOWORD(v49.flags) = 1024;
      *(CMTimeFlags *)((char *)&v49.flags + 2) = 251;
      WORD1(v49.epoch) = 1024;
      HIDWORD(v49.epoch) = v23;
      _os_log_send_and_compose_impl();
    }
LABEL_35:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_36:
    if (sbuf) {
      CFRelease(sbuf);
    }
  }
LABEL_28:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 24));
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
}

uint64_t __mov_submitFrames_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(result + 48);
  if (!*((_DWORD *)v2 + 2) || !*v2)
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
    return result;
  }
  uint64_t v3 = *(opaqueCMSampleBuffer **)(result + 56);
  CMTime lhs = *(CMTime *)(result + 64);
  CMTime rhs = *(CMTime *)(result + 88);
  CMTimeAdd(&v35, &lhs, &rhs);
  if (!*((unsigned char *)v2 + 192))
  {
    FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(v3);
    v2[16] = 0;
    v2[17] = 0;
    *((double *)v2 + 18) = (double)CMVideoFormatDescriptionGetDimensions(FormatDescription).width;
    double height = (double)CMVideoFormatDescriptionGetDimensions(FormatDescription).height;
    *((double *)v2 + 19) = height;
    if (*((unsigned char *)v2 + 193)) {
      double v6 = *((double *)v2 + 11);
    }
    else {
      double v6 = 0.0;
    }
    double v7 = *((double *)v2 + 18);
    double v8 = *((double *)v2 + 14);
    double v9 = *((double *)v2 + 15);
    double v10 = v8 / v7;
    if (v8 / v7 >= v9 / height) {
      double v10 = v9 / height;
    }
    double v11 = (1.0 - v6) * v10;
    double v12 = v7 * v11;
    double v13 = v11 * height;
    *((double *)v2 + 20) = (v8 - v12) * 0.5;
    *((double *)v2 + 21) = (v9 - v13) * 0.5;
    *((double *)v2 + 22) = v12;
    *((double *)v2 + 23) = v13;
    *((unsigned char *)v2 + 192) = 1;
  }
  uint64_t result = (uint64_t)CMSampleBufferGetImageBuffer(v3);
  if (!result)
  {
    unsigned int v37 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v33 = v37;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = v33 & 0xFFFFFFFE;
    }
    if (v34)
    {
      LODWORD(rhs.value) = 136315394;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"mov_submitSampleBuffer";
      LOWORD(rhs.flags) = 1024;
      *(CMTimeFlags *)((char *)&rhs.flags + 2) = 218;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t result = FigSignalErrorAt();
    int v28 = result;
    goto LABEL_26;
  }
  if (*((_DWORD *)v2 + 2) == 2)
  {
    uint64_t v14 = result;
    uint64_t v15 = *v2;
    CMTime lhs = v35;
    uint64_t v16 = CMClockConvertHostTimeToSystemUnits(&lhs);
    double v17 = *((double *)v2 + 16);
    double v18 = *((double *)v2 + 17);
    double v19 = *((double *)v2 + 18);
    double v20 = *((double *)v2 + 19);
    double v21 = *((double *)v2 + 20);
    double v22 = *((double *)v2 + 21);
    double v23 = *((double *)v2 + 22);
    double v24 = *((double *)v2 + 23);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    unsigned int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, double, double, double, double, double, double, double, double))(v26 + 80);
    if (!v27)
    {
      int v28 = -12782;
      goto LABEL_20;
    }
    uint64_t result = v27(v15, v14, v16, 0, 0, v17, v18, v19, v20, v21, v22, v23, v24);
    int v28 = 0;
    if (result)
    {
      int v28 = result;
LABEL_20:
      unsigned int v37 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      unsigned int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v30 = v37;
      if (os_log_type_enabled(v29, type)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31)
      {
        LODWORD(rhs.value) = 136315650;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"mov_submitSampleBuffer";
        LOWORD(rhs.flags) = 1024;
        *(CMTimeFlags *)((char *)&rhs.flags + 2) = 224;
        WORD1(rhs.epoch) = 1024;
        HIDWORD(rhs.epoch) = v28;
        _os_log_send_and_compose_impl();
      }
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    int v28 = 0;
  }
LABEL_26:
  *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v28;
  if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24)) {
    ++*(_DWORD *)(*(void *)(v1 + 48) + 108);
  }
  return result;
}

uint64_t __mov_stop_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 8) = 0;
  return result;
}

uint64_t __mov_suspend_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 8) = 1;
  return result;
}

uint64_t __mov_resume_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(_DWORD *)(v1 + 8) == 1) {
    *(_DWORD *)(v1 + 8) = 2;
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -12070;
  }
  return result;
}

uint64_t FigPlayerGetTypeID()
{
  MEMORY[0x19970EE10](&FigPlayerGetClassID_sRegisterFigPlayerTypeOnce, RegisterFigPlayerType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigPlaybackItemGetTypeID()
{
  MEMORY[0x19970EE10](&FigPlaybackItemGetClassID_sRegisterFigPlaybackItemTypeOnce, RegisterFigPlaybackItemType);

  return CMBaseClassGetCFTypeID();
}

uint64_t ExtraPrivatePlayerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t ExtraPrivatePlayerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  double v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t ExtraPrivatePlayerBeginInterruption(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v2) {
    return 4294954514;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8);
  if (!v3) {
    return 4294954514;
  }

  return v3(a1);
}

uint64_t ExtraPrivatePlayerEndInterruption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v4) {
    return 4294954514;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1, a2);
}

const char *FigPlayerPlaythroughPredictionGetDescription(unsigned int a1)
{
  if (a1 > 3) {
    return "INVALID";
  }
  else {
    return off_1E5792E10[a1];
  }
}

const char *FigPlayerPlaybackStateGetDescription(unsigned int a1)
{
  if (a1 > 6) {
    return "INVALID";
  }
  else {
    return off_1E5792E30[a1];
  }
}

const char *FigPlaybackRateChangeReasonGetDescription(int a1)
{
  if ((a1 - 1) > 0x2A) {
    return "Unknown";
  }
  else {
    return off_1E5792E68[a1 - 1];
  }
}

const char *FigPlaybackItemSeekReasonGetDescription(int a1)
{
  if ((a1 - 1) > 6) {
    return "Unknown";
  }
  else {
    return off_1E5792FC0[a1 - 1];
  }
}

uint64_t FigPlaybackGetActionAtEndForString(const void *a1)
{
  if (CFEqual(a1, @"Stop")) {
    return 1;
  }
  if (CFEqual(a1, @"Advance")) {
    return 0;
  }
  if (CFEqual(a1, @"None")) {
    return 2;
  }
  if (CFEqual(a1, @"StopAtEndOfQueue")) {
    return 3;
  }
  return 0;
}

uint64_t FigPlaybackGetEffectiveActionAtEnd(uint64_t result, uint64_t a2)
{
  BOOL v2 = a2 < 2;
  if (result != 3) {
    BOOL v2 = 0;
  }
  if (result >= 3) {
    return v2;
  }
  else {
    return result;
  }
}

CFStringRef FigPlayerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPlayer %p]", a1);
}

CFStringRef FigPlaybackItemCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPlaybackItem %p]", a1);
}

uint64_t FigPlaybackCoordinatorRemoteRetainCopiedPlaybackCoordinator(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (!a2) {
      return FigSignalErrorAt();
    }
    uint64_t v4 = FigXPCRemoteClientRetainCopiedObject();
    if (!v4)
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      FigPlaybackCoordinatorGetClassID();
      uint64_t v6 = CMDerivedObjectCreate();
      if (!v6)
      {
        FigPlaybackCoordinatorGetCMBaseObject(0);
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        *(void *)(DerivedStorage + 56) = CFDictionaryCreateMutable(v5, 0, 0, 0);
        FigPlaybackCoordinatorGetCMBaseObject(0);
        *(void *) CMBaseObjectGetDerivedStorage() = a1;
        uint64_t v6 = FigXPCRemoteClientAssociateObject();
        FigXPCRemoteClientKillServerOnTimeout();
        if (!v6)
        {
          uint64_t v6 = 0;
          *a2 = 0;
        }
      }
      return v6;
    }
    return v4;
  }

  return FigSignalErrorAt();
}

uint64_t FigXPCPlaybackCoordinatorClientHandleMessage(const void *a1, uint64_t a2)
{
  if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1) && a2)
  {
    if (!a1) {
      return 0;
    }
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 != FigPlaybackCoordinatorGetTypeID()) {
      return 0;
    }
    uint64_t OpCode = FigXPCMessageGetOpCode();
    if (OpCode) {
      return OpCode;
    }
    else {
      return 4294951138;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL FigXPCPlaybackCoordinatorClientHandleNotificationFilter()
{
  return FigCFEqual() != 0;
}

uint64_t FigXPCPlaybackCoordinatorClientStartAsSubclient(uint64_t a1, uint64_t a2)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (gCoordinatorRemoteClient || !a1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __FigXPCPlaybackCoordinatorClientStartAsSubclient_block_invoke;
    v5[3] = &__block_descriptor_tmp_19;
    v5[4] = a1;
    v5[5] = a2;
    if (FigXPCPlaybackCoordinatorClientStartAsSubclient_onceToken != -1) {
      dispatch_once(&FigXPCPlaybackCoordinatorClientStartAsSubclient_onceToken, v5);
    }
    return 0;
  }
}

uint64_t __FigXPCPlaybackCoordinatorClientStartAsSubclient_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  gCoordinatorRemoteClient = *(void *)(result + 32);
  gHostingServerDeathNoticeName = v1;
  return result;
}

uint64_t remoteXPCPlaybackCoordinator_Finalize(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  BOOL v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 56) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteXPCPlaybackCoordinator_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPlaybackCoordinator_RemoteXPC %p>", a1);
  return Mutable;
}

uint64_t remoteXPCPlaybackCoordinator_CopyProperty(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1) {
    uint64_t v2 = FigXPCSendStdCopyPropertyMessage();
  }
  else {
    uint64_t v2 = FigSignalErrorAt();
  }
  uint64_t v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlaybackCoordinator_SetProperty(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1) {
    uint64_t v2 = FigXPCSendStdSetPropertyMessage();
  }
  else {
    uint64_t v2 = FigSignalErrorAt();
  }
  uint64_t v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlaybackCoordinator_BeginSuspension(uint64_t a1, const void *a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || !a2) {
    goto LABEL_9;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = FigXPCCreateBasicMessage();
  if (v6) {
    goto LABEL_10;
  }
  uint64_t v6 = FigXPCMessageSetTimelineCoordinatorSuspension();
  if (v6) {
    goto LABEL_10;
  }
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v6) {
    goto LABEL_10;
  }
  int64 = (const void *)xpc_dictionary_get_int64(0, "SuspensionID");
  if (!int64)
  {
LABEL_9:
    uint64_t v6 = FigSignalErrorAt();
LABEL_10:
    uint64_t v8 = v6;
    goto LABEL_8;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 56), a2, int64);
  uint64_t v8 = 0;
LABEL_8:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t remoteXPCPlaybackCoordinator_EndSuspension(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, long long *))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }
  long long v8 = *MEMORY[0x1E4F1F9F8];
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  return v6(a1, a2, &v8);
}

uint64_t remoteXPCPlaybackCoordinator_EndSuspensionProposingNewTime(uint64_t a1, const void *a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1
    && a2
    && (uint64_t v5 = DerivedStorage, (Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 56), a2)) != 0))
  {
    int64_t v7 = (int64_t)Value;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 56), a2);
    uint64_t v8 = FigXPCCreateBasicMessage();
    if (!v8)
    {
      FigXPCMessageSetCMTime();
      xpc_dictionary_set_int64(0, "SuspensionID", v7);
      uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  uint64_t v9 = v8;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v9;
}

uint64_t remoteXPCPlaybackCoordinator_SetWeakMediumAndCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || !a2 || !a3)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_11:
    uint64_t v10 = v8;
    goto LABEL_9;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8) {
    goto LABEL_11;
  }
  uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
  if (v8) {
    goto LABEL_11;
  }
  __copy_assignment_8_8_t0w16_pa0_12868_16_pa0_63777_24_pa0_904_32(v7 + 16, a3);
  uint64_t v9 = *(const void **)(v7 + 8);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 8) = FigCFWeakReferenceHolderCreateWithReferencedObject();
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v10;
}

uint64_t remoteXPCPlaybackCoordinator_HandleAssignmentOfUUIDToLocalParticipantByMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      uint64_t v2 = FigXPCMessageSetCFObject();
      if (!v2) {
        uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  uint64_t v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v3;
}

uint64_t remoteXPCPlaybackCoordinator_CopyParticipantSnapshotForUUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2 && a3)
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (!v6)
    {
      uint64_t v6 = FigXPCMessageSetCFObject();
      if (!v6)
      {
        uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v6) {
          uint64_t v6 = FigXPCMessageCopyTimelineCoordinatorParticipantSnapshot();
        }
      }
    }
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  uint64_t v7 = v6;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t remoteXPCPlaybackCoordinator_CopyParticipantSnapshots(uint64_t a1, uint64_t a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4) {
        uint64_t v4 = FigXPCMessageCopyTimelineCoordinatorParticipantSnapshots();
      }
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_HandleRemovalOfParticipantStateFromMedium(uint64_t a1, uint64_t a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageSetCFObject();
      if (!v4) {
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_GetExpectedTimeAtHostTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && a3 && (*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    uint64_t CMTime = FigXPCCreateBasicMessage();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageSetCMTime();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!CMTime) {
          uint64_t CMTime = FigXPCMessageGetCMTime();
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v7 = CMTime;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t remoteXPCPlaybackCoordinator_HandleUpdatedTimelineStateFromMedium(uint64_t a1, uint64_t a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageSetCFDictionary();
      if (!v4) {
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_HandleReplacementOfAllParticipantStatesFromMedium(uint64_t a1, uint64_t a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageSetCFArray();
      if (!v4) {
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_HandleUpdatedParticipantStateFromMedium(uint64_t a1, uint64_t a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && a2)
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      uint64_t v4 = FigXPCMessageSetCFDictionary();
      if (!v4) {
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v5;
}

uint64_t remoteXPCPlaybackCoordinator_DisconnectFromMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  uint64_t v1 = FigXPCCreateBasicMessage();
  if (!v1) {
    uint64_t v1 = FigXPCRemoteClientSendSyncMessage();
  }
  uint64_t v2 = v1;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v2;
}

uint64_t remoteXPCPlaybackCoordinator_ResetGroupTimelineExpectations(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2) {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  uint64_t v3 = v2;
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v3;
}

uint64_t __copy_assignment_8_8_t0w16_pa0_12868_16_pa0_63777_24_pa0_904_32(uint64_t result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void remoteXPCPlaybackCoordinator_asyncReloadCompletion(void *a1)
{
  uint64_t v2 = (const void *)*a1;
  FigPlaybackCoordinatorGetCMBaseObject(*a1);
  CMBaseObjectGetDerivedStorage();
  if (!FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_int64(0, "FetchID", a1[1]);
    FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  if (v2) {
    CFRelease(v2);
  }
  FigXPCRelease();
  free(a1);
}

uint64_t FigPhotoCompressionSupportedForContainerAndCodec()
{
  return MEMORY[0x1F410D628]();
}

uint64_t FigPhotoDecompressionSupportedForContainerAndCodec()
{
  return MEMORY[0x1F410D9B8]();
}

uint64_t FigPhotoSupportsHEVCHWEncode()
{
  return MEMORY[0x1F410DB80]();
}

uint64_t FigPhotoSupportsHEVCHWDecode()
{
  return MEMORY[0x1F410DB78]();
}

uint64_t FigAudioFileStreamFormatReaderCreateFromStream(const void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  FigAudioFileShouldNotUseAllowList();
  FigFormatReaderGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    return v6;
  }
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  CFNumberRef number = 0;
  qmemcpy(inPropertyData, "CRYLe3dicdcsduolfmrppsfrofnp", 28);
  if (sRegisterFigAudioFileStreamInfoTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigAudioFileStreamInfoTypeOnce, 0, (dispatch_function_t)RegisterFigAudioFileStreamInfoType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v9 = (void *)MEMORY[0x1E4F1CF80];
  if (!Instance)
  {
    uint64_t v17 = FigSignalErrorAt();
    if (v17) {
      return v17;
    }
    goto LABEL_24;
  }
  uint64_t v10 = Instance;
  *(void *)(Instance + 16) = CFRetain(a1);
  *(void *)(v10 + 328) = -1;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void, void, CFNumberRef *))(v13 + 48);
  if (!v14)
  {
    uint64_t v17 = 4294954514;
    goto LABEL_13;
  }
  uint64_t v15 = v14(CMBaseObject, *MEMORY[0x1E4F1EC50], *v9, &number);
  if (v15) {
    goto LABEL_35;
  }
  if (!number)
  {
    uint64_t v15 = FigSignalErrorAt();
LABEL_35:
    uint64_t v17 = v15;
    goto LABEL_13;
  }
  CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(v10 + 24));
  CFRelease(number);
  AudioFileTypeID AudioFileInfos = FigDetermineAudioFileTypeHintAndCreateAudioFileInfos((uint64_t)a1, 0, 0, 0);
  uint64_t v18 = AudioFileStreamOpen((void *)v10, (AudioFileStream_PropertyListenerProc)AudioFileStream_FigPropertyListenerProc, (AudioFileStream_PacketsProc)AudioFileStream_FigPacketsProc, AudioFileInfos, (AudioFileStreamID *)(v10 + 48));
  if (!v18)
  {
    AudioFileStreamSetProperty(*(AudioFileStreamID *)(v10 + 48), 0x6F707470u, 0x1Cu, inPropertyData);
    *(void *)(v10 + 32) = FigReentrantMutexCreate();
    *(void *)(v10 + 40) = FigSimpleMutexCreate();
    *(void *)(v10 + 72) = 0x10000;
    while (1)
    {
      uint64_t v15 = PushBytesThroughParser(v10);
      if (v15) {
        goto LABEL_35;
      }
      if (*(unsigned char *)(v10 + 56))
      {
        uint64_t v19 = *(void *)(v10 + 256);
        if (v19 >= 1 && (uint64_t v20 = *(unsigned int *)(v10 + 224), v20)) {
          uint64_t v21 = v19 * v20;
        }
        else {
          uint64_t v21 = 0x10000;
        }
        *(void *)(v10 + 72) = v21;
        *uint64_t DerivedStorage = (const void *)v10;
        goto LABEL_24;
      }
    }
  }
  uint64_t v17 = v18;
  FigSignalErrorAt();
LABEL_13:
  CFRelease((CFTypeRef)v10);
  if (v17) {
    return v17;
  }
LABEL_24:
  double v22 = *DerivedStorage;
  inPropertyData[0] = 0;
  FigTrackReaderGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    return v6;
  }
  double v23 = (void *)CMBaseObjectGetDerivedStorage();
  if (v22) {
    CFTypeRef v24 = CFRetain(v22);
  }
  else {
    CFTypeRef v24 = 0;
  }
  uint64_t v17 = 0;
  void *v23 = v24;
  DerivedStorage[1] = (const void *)inPropertyData[0];
  *a4 = 0;
  return v17;
}

void FigAudioFileStreamFormatReaderFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamFormatReaderCopyDebugDescription()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v2 = *(const void **)(v0 + 16);
  if (v2)
  {
    CFStringRef v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileStreamFormatReader: stream<%@>", v3);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileStreamFormatReader: stream<%@>", 0);
  }
  return Mutable;
}

uint64_t FigAudioFileStreamFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v8 = *DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, @"Duration"))
    {
      uint64_t v9 = v8;
      int v10 = 0;
      int v11 = 1;
      goto LABEL_9;
    }
    if (CFEqual(a2, @"NominalDuration"))
    {
      uint64_t v9 = v8;
      int v10 = 0;
LABEL_8:
      int v11 = 0;
LABEL_9:
      if (CopyAudioFileStreamDuration(v9, v10, v11, a3, a4)) {
        return 0;
      }
      else {
        return 4294954513;
      }
    }
    if (CFEqual(a2, @"EstimatedDuration"))
    {
      uint64_t v9 = v8;
      int v10 = 1;
      goto LABEL_8;
    }
    if (CFEqual(a2, @"Identifier"))
    {
      uint64_t v13 = (const void **)kFigFormatReaderIdentifier_AudioFileStream;
LABEL_20:
      uint64_t v15 = *v13;
LABEL_21:
      CFDictionaryRef GaplessInfoDictionary = (const __CFDictionary *)CFRetain(v15);
LABEL_22:
      CFDictionaryRef v17 = GaplessInfoDictionary;
LABEL_23:
      uint64_t result = 0;
LABEL_24:
      *a4 = v17;
      return result;
    }
    if (CFEqual(a2, @"SampleCursorTimeAccuracyIsExact"))
    {
      uint64_t v13 = (const void **)MEMORY[0x1E4F1CFC8];
      goto LABEL_20;
    }
    if (CFEqual(a2, @"AccurateDurationIsKnown"))
    {
      uint64_t v13 = (const void **)MEMORY[0x1E4F1CFD0];
      int v14 = *(_DWORD *)(v8 + 276);
      goto LABEL_18;
    }
    if (CFEqual(a2, @"iTunesGaplessInfo"))
    {
      CFDictionaryRef GaplessInfoDictionary = CreateGaplessInfoDictionary(v8);
      goto LABEL_22;
    }
    if (CFEqual(a2, @"iTunesSoundCheckVolumeNormalization"))
    {
      if (*(void *)(v8 + 408))
      {
        LODWORD(v20) = 0;
        UInt32 ioPropertyDataSize = 4;
        if (!AudioFormatGetProperty(0x73636462u, 8u, (const void *)(v8 + 408), &ioPropertyDataSize, &v20))
        {
          CFDictionaryRef GaplessInfoDictionary = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &v20);
          if (GaplessInfoDictionary) {
            goto LABEL_22;
          }
        }
      }
      return 4294954512;
    }
    if (CFEqual(a2, @"SoundCheckInfo"))
    {
      uint64_t v15 = *(const void **)(v8 + 408);
      if (v15) {
        goto LABEL_21;
      }
      goto LABEL_36;
    }
    if (CFEqual(a2, @"LyricsScanCompleted"))
    {
      uint64_t v13 = (const void **)MEMORY[0x1E4F1CFD0];
      int v14 = *(unsigned __int8 *)(v8 + 320);
LABEL_18:
      if (!v14) {
        uint64_t v13 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_20;
    }
    if (CFEqual(a2, @"Lyrics"))
    {
      uint64_t v15 = *(const void **)(v8 + 312);
      if (v15) {
        goto LABEL_21;
      }
      goto LABEL_36;
    }
    if (!CFEqual(a2, @"MetadataReaders"))
    {
      if (CFEqual(a2, @"ID3MetadataReader") || CFEqual(a2, @"MetadataReader"))
      {
        EnsureMetadataReaderCreated(v8, a3);
        uint64_t v15 = *(const void **)(v8 + 336);
        if (v15) {
          goto LABEL_21;
        }
      }
      else
      {
        if (!CFEqual(a2, @"ID3MetadataReaderBC"))
        {
          if (CFEqual(a2, @"Chapters"))
          {
            EnsureMetadataReaderCreated(v8, a3);
            CFDictionaryRef GaplessInfoDictionary = FigID3MetadataCreateChapterArrayFromTopLevelTableOfContents(a3, *(void *)(v8 + 336));
            goto LABEL_22;
          }
          return 4294954512;
        }
        CFDictionaryRef v20 = 0;
        uint64_t v19 = *(void *)(v8 + 328);
        if ((v19 & 0x8000000000000000) == 0)
        {
          uint64_t result = FigMetadataReaderCreateForID3WithBackwardCompatibility(a3, *(const void **)(v8 + 16), v19, &v20);
          CFDictionaryRef v17 = v20;
          goto LABEL_24;
        }
      }
LABEL_36:
      CFDictionaryRef v17 = 0;
      goto LABEL_23;
    }
    EnsureMetadataReaderCreated(v8, a3);
    if (*(void *)(v8 + 336))
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(Mutable, *(const void **)(v8 + 336));
      uint64_t result = 0;
      *a4 = Mutable;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigAudioFileStreamFormatReaderSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"MarkPacketOffsetFromEOF")) {
    return 4294954512;
  }
  CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(*(void *)DerivedStorage + 324));
  return 0;
}

uint64_t CopyAudioFileStreamDuration(uint64_t a1, int a2, int a3, const __CFAllocator *a4, CFDictionaryRef *a5)
{
  CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  GetAudioFileStreamPacketTableInfo(a1);
  if (!*(unsigned char *)(a1 + 345))
  {
    if (!a2 && !*(_DWORD *)(a1 + 276)) {
      return 0;
    }
    do
      AudioFileStreamPacketAndFrameunsigned int Count = GetAudioFileStreamPacketAndFrameCount(a1);
    while (AudioFileStreamPacketAndFrameCount == 1836020325);
    if (AudioFileStreamPacketAndFrameCount) {
      return 0;
    }
    int64_t v10 = *(void *)(a1 + 296);
    if (a3)
    {
      CFMutableDictionaryRef DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(*(const opaqueCMFormatDescription **)(a1 + 264));
      LODWORD(v17.value) = 0;
      if (FigCFDictionaryGetInt32IfPresent()) {
        int64_t v10 = (v10 - SLODWORD(v17.value)) & ~((v10 - SLODWORD(v17.value)) >> 63);
      }
      if (DefaultEnhanced) {
        CFRelease(DefaultEnhanced);
      }
    }
    goto LABEL_5;
  }
  int64_t v10 = *(void *)(a1 + 352);
  if (a3)
  {
LABEL_5:
    CMTimeMake(&v18, v10, *(_DWORD *)(a1 + 252));
    CMTime v17 = v18;
    CFDictionaryRef v13 = CMTimeCopyAsDictionary(&v17, a4);
    *a5 = v13;
    if (v13) {
      return 1;
    }
    goto LABEL_16;
  }
  uint64_t v11 = *(int *)(a1 + 360);
  uint64_t v12 = *(int *)(a1 + 364);
  if (((v11 + v12) ^ 0x7FFFFFFFFFFFFFFFLL) >= v10)
  {
    v10 += v12 + v11;
    goto LABEL_5;
  }
LABEL_16:
  FigSignalErrorAt();
  return 0;
}

CFMutableDictionaryRef CreateGaplessInfoDictionary(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 40));
  if (*(unsigned char *)(a1 + 345)) {
    Enhanced_NoCorrectioCFIndex n = FigGaplessInfoCreateEnhanced_NoCorrection(*(const AudioFormatListItem **)(a1 + 264), *(_DWORD *)(a1 + 360), *(_DWORD *)(a1 + 364), *(void *)(a1 + 352));
  }
  else {
    Enhanced_NoCorrectioCFIndex n = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 40));
  return Enhanced_NoCorrection;
}

uint64_t EnsureMetadataReaderCreated(uint64_t a1, const __CFAllocator *a2)
{
  CFNumberRef number = 0;
  CFBooleanRef BOOLean = 0;
  MEMORY[0x19970E290](*(void *)(a1 + 32));
  if (*(void *)(a1 + 336)) {
    return MEMORY[0x19970E2B0](*(void *)(a1 + 32));
  }
  uint64_t v4 = *(void *)(a1 + 328);
  if (v4 != -1) {
    goto LABEL_3;
  }
  if (!*(unsigned char *)(a1 + 344))
  {
    uint64_t valuePtr = 0;
    int v22 = 0;
    uint64_t v21 = 0;
    *(unsigned char *)(a1 + 344) = 1;
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int (**)(uint64_t, void, void, CFBooleanRef *))(v7 + 48);
    if (!v8) {
      goto LABEL_28;
    }
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    if (v8(CMBaseObject, *MEMORY[0x1E4F1EC58], *MEMORY[0x1E4F1CF80], &BOOLean)) {
      goto LABEL_28;
    }
    if (!CFBooleanGetValue(BOOLean)) {
      goto LABEL_29;
    }
    uint64_t v10 = CMByteStreamGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v12 = v11 ? v11 : 0;
    CFDictionaryRef v13 = *(unsigned int (**)(uint64_t, void, uint64_t, CFNumberRef *))(v12 + 48);
    if (!v13 || v13(v10, *MEMORY[0x1E4F1EC50], v9, &number))
    {
LABEL_28:
      FigSignalErrorAt();
      goto LABEL_29;
    }
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
    uint64_t v14 = valuePtr - 128;
    if (valuePtr >= 128)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      CMTime v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(v17 + 8);
      if (v18 && !v18(v15, 3, v14, &v22, &v21))
      {
        if ((unsigned __int16)v22 == 16724 && BYTE2(v22) == 71)
        {
          uint64_t v4 = valuePtr - 128;
          *(void *)(a1 + 328) = valuePtr - 128;
        }
        else
        {
          uint64_t v4 = *(void *)(a1 + 328);
        }
LABEL_3:
        if ((v4 & 0x8000000000000000) == 0) {
          FigMetadataReaderCreateForID3(a2, *(const void **)(a1 + 16), v4, (void *)(a1 + 336));
        }
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
LABEL_29:
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  if (number) {
    CFRelease(number);
  }
  return MEMORY[0x19970E2B0](*(void *)(a1 + 32));
}

uint64_t GetAudioFileStreamPacketTableInfo(uint64_t result)
{
  if (!*(unsigned char *)(result + 345))
  {
    uint64_t v1 = result;
    MEMORY[0x19970E910](*(void *)(result + 40));
    UInt32 ioPropertyDataSize = 16;
    if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(v1 + 48), 0x706E666Fu, &ioPropertyDataSize, (void *)(v1 + 352))&& *(uint64_t *)(v1 + 352) >= 1)
    {
      *(unsigned char *)(v1 + 345) = 1;
      if ((*(_DWORD *)(v1 + 360) & 0x80000000) != 0) {
        *(_DWORD *)(v1 + 360) = 0;
      }
      if ((*(_DWORD *)(v1 + 364) & 0x80000000) != 0) {
        *(_DWORD *)(v1 + 364) = 0;
      }
    }
    return MEMORY[0x19970E930](*(void *)(v1 + 40));
  }
  return result;
}

uint64_t GetAudioFileStreamPacketAndFrameCount(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 272))
  {
    UInt32 ioPropertyDataSize = 0;
    if (*(_DWORD *)(a1 + 276))
    {
      LODWORD(v10) = 8;
      uint64_t Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x70636E74u, (UInt32 *)&v10, (void *)(a1 + 288));
      if (Property) {
        return Property;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      UInt32 ioPropertyDataSize = 24;
      int64_t v10 = *(void *)(a1 + 24) - *(void *)(a1 + 304);
      uint64_t v3 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x6279706Bu, &ioPropertyDataSize, &v10);
      if (v3 == 1836020325)
      {
        MEMORY[0x19970E290](*(void *)(a1 + 32));
        uint64_t Property = PushBytesThroughParser(a1);
        MEMORY[0x19970E2B0](*(void *)(a1 + 32));
        if (Property) {
          return Property;
        }
        uint64_t v4 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x6279706Bu, &ioPropertyDataSize, &v10);
        if (v4) {
          return v4;
        }
      }
      else
      {
        uint64_t Property = v3;
        if (v3) {
          return Property;
        }
      }
      *(void *)(a1 + 288) = v11;
    }
    uint64_t v5 = *(unsigned int *)(a1 + 228);
    uint64_t v6 = *(void *)(a1 + 288);
    if (v5)
    {
      uint64_t v7 = v6 * v5;
LABEL_21:
      *(void *)(a1 + 296) = v7;
      goto LABEL_22;
    }
    if (!v6)
    {
      *(void *)(a1 + 296) = 0;
LABEL_22:
      uint64_t Property = 0;
      *(_DWORD *)(a1 + 272) = 1;
      return Property;
    }
    int64_t v10 = 0;
    uint64_t v4 = MapPacketNumberToFrameNumber(a1, v6 - 1, &v10);
    if (!v4)
    {
      if (v6 < 2) {
        int64_t v8 = 0;
      }
      else {
        int64_t v8 = v10 / (v6 - 1);
      }
      uint64_t v7 = v8 + v10;
      goto LABEL_21;
    }
    return v4;
  }
  return 0;
}

uint64_t PushBytesThroughParser(uint64_t a1)
{
  size_t v23 = 0;
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1 >= *(void *)(a1 + 24)) {
    return 4294954423;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v22 = 0;
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t *))(v5 + 24);
  if (!v6 || v6(v3, v1, &v22) || !v22)
  {
    if ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 88)) >= 1024) {
      uint64_t v7 = 1024;
    }
    else {
      uint64_t v7 = *(void *)(a1 + 24) - *(void *)(a1 + 88);
    }
    if (v7) {
      goto LABEL_19;
    }
    return 4294954423;
  }
  if (v22 >= *(void *)(a1 + 72)) {
    uint64_t v7 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v7 = v22;
  }
  int v8 = *(_DWORD *)(a1 + 324);
  if (v8 && *(void *)(a1 + 88) + v7 > *(void *)(a1 + 24) - *(int *)(a1 + 248) * (uint64_t)v8) {
    uint64_t v7 = v22;
  }
LABEL_19:
  if (v7 < 0) {
    return FigSignalErrorAt();
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, size_t *))(v12 + 32);
  if (!v14) {
    return 4294954514;
  }
  uint64_t v15 = (CFTypeRef *)(a1 + 96);
  uint64_t v16 = v14(v9, v7, v10, a1 + 96, &v23);
  if (v16) {
    return v16;
  }
  size_t v17 = 0;
  *(void *)(a1 + 104) = 0;
  do
  {
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 96), v17, (size_t *)(a1 + 112), 0, (char **)(a1 + 120));
    uint64_t v18 = AudioFileStreamParseBytes(*(AudioFileStreamID *)(a1 + 48), *(_DWORD *)(a1 + 112), *(const void **)(a1 + 120), 0);
    if (v18)
    {
      uint64_t v13 = v18;
      FigSignalErrorAt();
      return v13;
    }
    size_t v17 = *(void *)(a1 + 104) + *(void *)(a1 + 112);
    *(void *)(a1 + 104) = v17;
  }
  while (v17 < v23);
  size_t v19 = *(void *)(a1 + 88) + v23;
  *(void *)(a1 + 88) = v19;
  if (v19 == *(void *)(a1 + 24)) {
    AudioFileStreamParseBytes(*(AudioFileStreamID *)(a1 + 48), 0, 0, 0);
  }
  uint64_t v20 = *(int *)(a1 + 324);
  if (v20 && *(void *)(a1 + 88) == *(void *)(a1 + 24))
  {
    *(void *)(a1 + 200) = *(void *)(a1 + 152) - v20;
    *(unsigned char *)(a1 + 192) = 1;
  }
  if (*v15) {
    CFRelease(*v15);
  }
  uint64_t v13 = 0;
  *uint64_t v15 = 0;
  return v13;
}

uint64_t MapPacketNumberToFrameNumber(uint64_t a1, int64_t a2, int64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 228);
  if (v4) {
    unint64_t v5 = *(unsigned int *)(a1 + 228);
  }
  else {
    unint64_t v5 = 1;
  }
  if ((uint64_t)(0x7FFFFFFFFFFEA06FLL / v5) <= a2)
  {
    uint64_t Property = 0;
    *a3 = 0x7FFFFFFFFFFEA06FLL;
  }
  else
  {
    if (v4)
    {
      uint64_t Property = 0;
      int64_t v7 = v4 * a2;
    }
    else
    {
      outPropertyData[0] = 0;
      outPropertyData[1] = a2;
      outPropertyData[2] = 0;
      UInt32 ioPropertyDataSize = 24;
      uint64_t Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x706B6672u, &ioPropertyDataSize, outPropertyData);
      if (Property)
      {
        FigSignalErrorAt();
        return Property;
      }
      int64_t v7 = outPropertyData[0];
    }
    *a3 = v7;
  }
  return Property;
}

uint64_t FigAudioFileStreamFormatReaderGetTrackCount(uint64_t a1, void *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t FigAudioFileStreamFormatReaderCopyTrackByIndex(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2) {
    return 4294954453;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFTypeRef v10 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v10) {
      CFTypeRef v10 = CFRetain(v10);
    }
    *a3 = v10;
  }
  if (a4) {
    *a4 = 1936684398;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = 1;
  }
  return result;
}

uint64_t FigAudioFileStreamFormatReaderCopyTrackByID(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  if (a2 == 1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
    {
      CFTypeRef v8 = *(CFTypeRef *)(DerivedStorage + 8);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      *a3 = v8;
    }
    if (a4) {
      *a4 = 1936684398;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAudioFileStreamFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  uint64_t result = 4294954453;
  if (!a2 && a3 == 1936684398)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a4)
    {
      CFTypeRef v9 = *(CFTypeRef *)(DerivedStorage + 8);
      if (v9) {
        CFTypeRef v9 = CFRetain(v9);
      }
      *a4 = v9;
    }
    uint64_t result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

void FigAudioFileStreamTrackReaderFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamTrackReaderCopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (*(void *)DerivedStorage)
  {
    uint64_t v2 = *(const void **)(*(void *)DerivedStorage + 16);
    if (v2)
    {
      CFStringRef v3 = CFCopyDescription(v2);
      CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileStreamTrackReader: stream<%@> trackID %d", v3, 1);
      if (v3) {
        CFRelease(v3);
      }
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileStreamTrackReader: stream<%@> trackID %d", 0, 1);
    }
  }
  return Mutable;
}

uint64_t FigAudioFileStreamTrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v8 = *DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, @"TrackFormatDescriptionArray"))
    {
      if (!*(void *)(v8 + 264)) {
        return 0;
      }
      CFTypeRef v9 = CFArrayCreate(a3, (const void **)(v8 + 264), 1, MEMORY[0x1E4F1D510]);
      goto LABEL_12;
    }
    if (CFEqual(a2, @"TrackTimescale"))
    {
      int valuePtr = *(_DWORD *)(v8 + 252);
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_int valuePtr = (float *)&valuePtr;
      CFNumberType v12 = kCFNumberSInt32Type;
LABEL_7:
      CFTypeRef v9 = CFNumberCreate(v10, v12, p_valuePtr);
LABEL_12:
      uint64_t v15 = v9;
LABEL_13:
      uint64_t result = 0;
      *a4 = v15;
      return result;
    }
    if (CFEqual(a2, @"TrackEnabled"))
    {
      uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else
    {
      if (!CFEqual(a2, @"LoudnessInfo"))
      {
        if (!CFEqual(a2, @"EstimatedDataRate")) {
          return 4294954512;
        }
        LODWORD(v16) = *(_DWORD *)(v8 + 424);
        float v17 = (double)v16 * 0.125;
        float v18 = v17;
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_int valuePtr = &v18;
        CFNumberType v12 = kCFNumberFloat32Type;
        goto LABEL_7;
      }
      uint64_t v14 = *(const void **)(v8 + 416);
      if (!v14)
      {
        uint64_t v15 = 0;
        goto LABEL_13;
      }
    }
    CFTypeRef v9 = (void *)CFRetain(v14);
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t FigAudioFileStreamTrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a3) {
    *a3 = 1936684398;
  }
  if (a2) {
    *a2 = 1;
  }
  return 0;
}

uint64_t FigAudioFileStreamTrackReaderCopySampleCursorService(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  FigSampleCursorServiceGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (v3) {
      CFTypeRef v6 = CFRetain(v3);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *uint64_t DerivedStorage = v6;
    *a2 = 0;
  }
  return v4;
}

void FigAudioFileStreamCursorService_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamCursorService_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReader_AudioFileStream_CursorService %p>{ samplerate %d }", a1, *(unsigned int *)(*(void *)DerivedStorage + 252));
  return Mutable;
}

uint64_t FigAudioFileStreamCursorService_createCursorAtPresentationTimeStamp(uint64_t a1, CMTime *a2, void *a3, BOOL *a4, BOOL *a5)
{
  CFTypeRef v9 = *(const void **)CMBaseObjectGetDerivedStorage();
  unint64_t v16 = 0;
  uint64_t v10 = createFigAudioPacketAccessor(v9, &v16);
  if (v10) {
    return v10;
  }
  uint64_t v11 = v16;
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CMTime v15 = *a2;
  uint64_t v13 = moveToSampleAtPTS(DerivedStorage, &v15, a4, a5);
  if (v13) {
    CFRelease(v11);
  }
  else {
    *a3 = v11;
  }
  return v13;
}

uint64_t FigAudioFileStreamCursorService_createCursorNearPresentationTimeStamp(uint64_t a1, CMTime *a2, uint64_t a3, void *a4, BOOL *a5, BOOL *a6)
{
  CMTime v7 = *a2;
  return FigAudioFileStreamCursorService_createCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t FigAudioFileStreamCursorService_createCursorAtFirstSampleInDecodeOrder(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t v4 = createFigAudioPacketAccessor(v3, &v7);
  if (!v4)
  {
    uint64_t v5 = v7;
    *(void *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = v5;
  }
  return v4;
}

uint64_t FigAudioFileStreamCursorService_createCursorAtLastSampleInDecodeOrder(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  CFTypeRef v9 = 0;
  uint64_t v4 = createFigAudioPacketAccessor(v3, &v9);
  if (v4) {
    return v4;
  }
  uint64_t v5 = v9;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  AudioFileStreamPacketAndFrameunsigned int Count = GetAudioFileStreamPacketAndFrameCount((uint64_t)v3);
  if (AudioFileStreamPacketAndFrameCount)
  {
    CFRelease(v5);
  }
  else
  {
    *(void *)(DerivedStorage + 8) = v3[36] - 1;
    *a2 = v5;
  }
  return AudioFileStreamPacketAndFrameCount;
}

uint64_t createFigAudioPacketAccessor(const void *a1, void *a2)
{
  FigSampleCursorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *uint64_t DerivedStorage = v6;
    DerivedStorage[1] = 0;
    *a2 = 0;
  }
  return v4;
}

uint64_t moveToSampleAtPTS(uint64_t *a1, CMTime *a2, BOOL *a3, BOOL *a4)
{
  CMTime time1 = *a2;
  CMTime v26 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  int32_t v8 = CMTimeCompare(&time1, &v26);
  if (v8 < 0)
  {
    uint64_t value = 0;
    uint64_t v11 = *a1;
    uint64_t v12 = *(unsigned int *)(*a1 + 228);
    if (v12)
    {
LABEL_13:
      unint64_t v14 = value / v12;
      goto LABEL_14;
    }
  }
  else
  {
    if ((a2->flags & 0x1D) == 1)
    {
      memset(&time1, 0, sizeof(time1));
      int32_t v9 = *(_DWORD *)(*a1 + 252);
      CMTime v26 = *a2;
      CMTimeConvertScale(&time1, &v26, v9, kCMTimeRoundingMethod_RoundTowardZero);
      uint64_t value = time1.value;
      uint64_t v11 = *a1;
    }
    else
    {
      AudioFileStreamPacketAndFrameunsigned int Count = GetAudioFileStreamPacketAndFrameCount(*a1);
      if (AudioFileStreamPacketAndFrameCount) {
        return AudioFileStreamPacketAndFrameCount;
      }
      uint64_t v11 = *a1;
      uint64_t v16 = *(void *)(*a1 + 288);
      if (v16 >= 2)
      {
        unint64_t v14 = v16 - 1;
        goto LABEL_15;
      }
      uint64_t value = *(void *)(v11 + 296);
    }
    uint64_t v12 = *(unsigned int *)(v11 + 228);
    if (value > 0x7FFFFFFFFFFEA06ELL)
    {
      if (v12) {
        unint64_t v25 = *(unsigned int *)(v11 + 228);
      }
      else {
        unint64_t v25 = 1;
      }
      unint64_t v14 = 0x7FFFFFFFFFFEA06FLL / v25;
      goto LABEL_15;
    }
    if (v12) {
      goto LABEL_13;
    }
  }
  *(void *)&time1.CMTimeScale timescale = 0;
  time1.CMTimeEpoch epoch = 0;
  time1.uint64_t value = value;
  LODWORD(v26.value) = 24;
  uint64_t Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v11 + 48), 0x6672706Bu, (UInt32 *)&v26, &time1);
  if (Property)
  {
    uint64_t v23 = Property;
    FigSignalErrorAt();
    return v23;
  }
  unint64_t v14 = *(void *)&time1.timescale;
LABEL_14:
  if ((v14 & 0x8000000000000000) != 0) {
    return 4294954456;
  }
LABEL_15:
  a1[1] = v14;
  if (a3)
  {
    BOOL v18 = v8 < 0 || a2->value < 0;
    *a3 = v18;
  }
  if (!a4) {
    return 0;
  }
  uint64_t v19 = *a1;
  int64_t v20 = a1[1];
  LODWORD(v21) = *(_DWORD *)(*a1 + 228);
  if (v21 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = v21;
  }
  if ((uint64_t)(0x7FFFFFFFFFFEA06FLL / v21) <= v20)
  {
    BOOL v22 = 0;
  }
  else if (*(_DWORD *)(v19 + 272))
  {
    BOOL v22 = *(void *)(v19 + 288) > v20;
  }
  else
  {
    time1.uint64_t value = 0;
    LODWORD(v26.value) = 24;
    *(void *)&time1.CMTimeScale timescale = v20;
    time1.CMTimeEpoch epoch = 0;
    BOOL v22 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v19 + 48), 0x706B6672u, (UInt32 *)&v26, &time1) == 0;
  }
  uint64_t v23 = 0;
  *a4 = !v22;
  return v23;
}

void FigAudioFileStreamCursor_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

__CFString *FigAudioFileStreamCursor_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReader_AudioFile_SampleCursor %p>{ curPacketNum %lld }", a1, *(void *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t FigAudioFileStreamCursor_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    int32_t v9 = (uint64_t *)DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, @"CursorPlayableThroughEndOfTrack"))
    {
      uint64_t v10 = (void *)CMBaseObjectGetDerivedStorage();
      uint64_t v11 = *v10;
      uint64_t v12 = *(void *)(*v10 + 16);
      uint64_t v13 = *(void *)(*v10 + 304);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(v15 + 24);
      if (!v25) {
        return 4294954514;
      }
      *(void *)uint64_t v63 = 0;
      uint64_t SampleDependencyInfo = v25(v12, v13, v63);
      if (SampleDependencyInfo) {
        return SampleDependencyInfo;
      }
      if (*(void *)v63 + *(void *)(v11 + 304) < *(void *)(v11 + 24))
      {
        uint64_t v27 = v10[1];
        uint64_t v28 = *(void *)(v11 + 136);
        if (v27 < v28 || v27 >= *(void *)(v11 + 152) + v28)
        {
LABEL_63:
          outPropertyData.CMTimeValue value = 0;
          v60[0] = 24;
          *(void *)&outPropertyData.CMTimeScale timescale = v27;
          outPropertyData.CMTimeEpoch epoch = 0;
          uint64_t Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v11 + 48), 0x706B6279u, v60, &outPropertyData);
          if (Property == 1836020325)
          {
            CMTime v49 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_66:
            CMTimeValue v39 = (CMTimeValue)CFRetain(*v49);
            goto LABEL_67;
          }
          uint64_t v19 = Property;
          if (Property) {
            return v19;
          }
          uint64_t v50 = *(void *)(v11 + 16);
          CMTimeValue value = outPropertyData.value;
          uint64_t v52 = *(void *)(v11 + 304);
          uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v53) {
            uint64_t v54 = v53;
          }
          else {
            uint64_t v54 = 0;
          }
          uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(v54 + 24);
          if (v55)
          {
            uint64_t SampleDependencyInfo = v55(v50, v52 + value, v63);
            if (!SampleDependencyInfo)
            {
              if (*(void *)(v11 + 304) + outPropertyData.value + *(void *)v63 >= *(void *)(v11 + 24)) {
                CMTime v49 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
              }
              else {
                CMTime v49 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
              }
              goto LABEL_66;
            }
            return SampleDependencyInfo;
          }
          return 4294954514;
        }
        uint64_t v29 = *(void *)(v11 + 16);
        uint64_t v30 = *(void *)(v11 + 88);
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        CMTime v47 = *(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(v32 + 24);
        if (!v47) {
          return 4294954514;
        }
        uint64_t SampleDependencyInfo = v47(v29, v30, v63);
        if (SampleDependencyInfo) {
          return SampleDependencyInfo;
        }
        if (*(void *)v63 + *(void *)(v11 + 88) < *(void *)(v11 + 24))
        {
          uint64_t v27 = v10[1];
          goto LABEL_63;
        }
      }
      CMTime v49 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      goto LABEL_66;
    }
    if (!CFEqual(a2, @"CursorPlayableHorizon"))
    {
      if (CFEqual(a2, @"ApproximateSampleLocation"))
      {
        unsigned int v33 = (void *)CMBaseObjectGetDerivedStorage();
        uint64_t v34 = *v33;
        LODWORD(v35) = *(_DWORD *)(*v33 + 228);
        if (v35 <= 1) {
          unint64_t v35 = 1;
        }
        else {
          unint64_t v35 = v35;
        }
        if (v33[1] >= (int64_t)(0x7FFFFFFFFFFEA06FLL / v35)) {
          return 4294954454;
        }
        CMTime v36 = v33;
        if (!*(_DWORD *)(v34 + 280))
        {
          outPropertyData.CMTimeValue value = 0;
          v63[0] = 8;
          AudioFileStreamGetProperty(*(AudioFileStreamID *)(v34 + 48), 0x646F6666u, v63, &outPropertyData);
          *(_DWORD *)(v34 + 280) = 1;
          *(void *)(v34 + 304) = *(void *)(v34 + 128) + outPropertyData.value;
        }
        uint64_t v37 = *(unsigned int *)(v34 + 224);
        if (v37)
        {
          CMTimeValue v38 = *(void *)(v34 + 304) + v36[1] * v37;
        }
        else
        {
          memset(&outPropertyData, 0, sizeof(outPropertyData));
          v63[0] = 24;
          *(void *)&outPropertyData.CMTimeScale timescale = v36[1];
          p_CMTime outPropertyData = &outPropertyData;
          uint64_t v41 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v34 + 48), 0x706B6279u, v63, &outPropertyData);
          if (v41 == 1836020325)
          {
            p_CMTime outPropertyData = (CMTime *)(v34 + 88);
          }
          else
          {
            uint64_t v19 = v41;
            if (v41) {
              return v19;
            }
          }
          CMTimeValue v38 = *(void *)(v34 + 304) + p_outPropertyData->value;
        }
        outPropertyData.CMTimeValue value = v38;
        CMTimeValue v39 = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &outPropertyData);
      }
      else
      {
        if (!CFEqual(a2, @"SampleDependencyAttributes")) {
          return 4294954512;
        }
        outPropertyData.CMTimeValue value = 0;
        *(void *)uint64_t v63 = 0;
        if (*(unsigned char *)(*(void *)CMBaseObjectGetDerivedStorage() + 400))
        {
          uint64_t SampleDependencyInfo = figAudioFileStreamCursor_getSampleDependencyInfo(a1, (BOOL *)v63, &v63[1]);
          if (!SampleDependencyInfo)
          {
            uint64_t v19 = FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary();
            CMTimeValue v39 = outPropertyData.value;
            if (v19)
            {
              if (outPropertyData.value) {
                CFRelease((CFTypeRef)outPropertyData.value);
              }
              return v19;
            }
            goto LABEL_67;
          }
          return SampleDependencyInfo;
        }
        CMTimeValue v39 = 0;
      }
LABEL_67:
      uint64_t v19 = 0;
      *a4 = v39;
      return v19;
    }
    memset(&v57, 0, sizeof(v57));
    memset(&outPropertyData, 0, sizeof(outPropertyData));
    UInt32 ioPropertyDataSize = 24;
    uint64_t v17 = *v9;
    int64_t v16 = v9[1];
    LODWORD(v18) = *(_DWORD *)(*v9 + 228);
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    else {
      unint64_t v18 = v18;
    }
    if (v16 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v18))
    {
      CMTime v57 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
LABEL_82:
      CMTime outPropertyData = v57;
      CMTimeValue v39 = (CMTimeValue)CMTimeCopyAsDictionary(&outPropertyData, a3);
      goto LABEL_67;
    }
    CMTimeValue v66 = 0;
    *(void *)&outPropertyData.CMTimeScale timescale = v16;
    uint64_t v19 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v17 + 48), 0x706B6279u, &ioPropertyDataSize, &outPropertyData);
    if (v19 == 1836020325)
    {
      MEMORY[0x19970E290](*(void *)(v17 + 32));
      uint64_t v19 = PushBytesThroughParser(v17);
      MEMORY[0x19970E2B0](*(void *)(v17 + 32));
      if (v19) {
        return v19;
      }
      uint64_t v19 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v17 + 48), 0x706B6279u, &ioPropertyDataSize, &outPropertyData);
    }
    if (!v19)
    {
      uint64_t v20 = *(void *)(v17 + 16);
      CMTimeValue v21 = outPropertyData.value;
      uint64_t v22 = *(void *)(v17 + 304);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      char v42 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue *))(v24 + 24);
      if (v42 && (uint64_t v43 = v42(v20, v22 + v21, &v66), v43 != -12782))
      {
        uint64_t v19 = v43;
        if (v43) {
          goto LABEL_81;
        }
        CMTimeValue v44 = v66 + outPropertyData.value;
      }
      else
      {
        CMTimeValue v66 = *(void *)(v17 + 24) - (outPropertyData.value + *(void *)(v17 + 304));
        CMTimeValue v44 = v66 + outPropertyData.value;
      }
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      *(void *)CFAllocatorRef v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      *(void *)uint64_t v63 = v44;
      UInt32 v59 = 24;
      uint64_t v19 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v17 + 48), 0x6279706Bu, &v59, v63);
      if (v19 == 1836020325)
      {
        MEMORY[0x19970E290](*(void *)(v17 + 32));
        uint64_t v19 = PushBytesThroughParser(v17);
        MEMORY[0x19970E2B0](*(void *)(v17 + 32));
        if (v19) {
          goto LABEL_81;
        }
        uint64_t v19 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v17 + 48), 0x6279706Bu, &v59, v63);
      }
      if (!v19)
      {
        uint64_t v45 = *(unsigned int *)(v17 + 228);
        if (v45)
        {
          uint64_t v19 = 0;
          int64_t v46 = (v64 - v9[1]) * v45;
        }
        else
        {
          UInt32 v58 = 24;
          uint64_t v61 = v64;
          uint64_t v19 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(v17 + 48), 0x706B6672u, &v58, v60);
          int64_t v46 = *(void *)v60;
        }
        CMTimeMake(&v57, v46, *(_DWORD *)(v17 + 252));
      }
LABEL_81:
      if (v19) {
        return v19;
      }
      goto LABEL_82;
    }
    return v19;
  }

  return FigSignalErrorAt();
}

uint64_t figAudioFileStreamCursor_getSampleDependencyInfo(uint64_t a1, BOOL *a2, _DWORD *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *DerivedStorage;
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  SetupPacketRequest(DerivedStorage[1], 1, (uint64_t)v11, *(_DWORD *)(v6 + 224) == 0, *(unsigned __int8 *)(v6 + 400));
  MEMORY[0x19970E290](*(void *)(v6 + 32));
  unsigned int v7 = ObtainRequestedPackets(v6, v11);
  MEMORY[0x19970E2B0](*(void *)(v6 + 32));
  if (v7 == -12873) {
    uint64_t v8 = 4294954456;
  }
  else {
    uint64_t v8 = v7;
  }
  if (!v8)
  {
    uint64_t v9 = v12;
    if ((void)v12)
    {
      *a2 = *(unsigned char *)v12 != 0;
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
    }
    else
    {
      *a2 = 1;
    }
    *a3 = v9;
  }
  TearDownPacketRequest((uint64_t)v11);
  return v8;
}

void *SetupPacketRequest(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  uint64_t result = (void *)CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3u, 0, (CMBlockBufferRef *)(a3 + 48));
  if (!result)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 40) = a2;
    if (a4)
    {
      uint64_t result = malloc_type_malloc(16 * a2, 0x1000040451B5BE8uLL);
      *(void *)(a3 + 24) = result;
    }
    if (a5)
    {
      uint64_t result = malloc_type_malloc(8 * a2, 0x10000404A09149AuLL);
      *(void *)(a3 + 32) = result;
    }
    *(unsigned char *)(a3 + 56) = 0;
  }
  return result;
}

uint64_t ObtainRequestedPackets(uint64_t a1, void *a2)
{
  SInt64 outDataByteOffset = 0;
  AudioFileStreamSeekFlags ioFlags = 0;
  __int16 v11 = 0;
  uint64_t v4 = a1 + 136;
  uint64_t result = FillPacketRequestFromCache(a1 + 136, (uint64_t)a2, *(unsigned int *)(a1 + 224), (unsigned char *)&v11 + 1, &v11);
  if (result) {
    return result;
  }
  if ((_BYTE)v11) {
    return 0;
  }
LABEL_5:
  uint64_t v6 = a2[2];
  if (v6 >= a2[1]) {
    return 0;
  }
  SInt64 v7 = *a2 + v6;
  if (!v7)
  {
    *(unsigned char *)(a1 + 376) = 0;
    AudioFileStreamSeek(*(AudioFileStreamID *)(a1 + 48), 0, &outDataByteOffset, &ioFlags);
    SInt64 v10 = 0;
    SInt64 v8 = *(void *)(a1 + 304);
    uint64_t v9 = *(const void **)(a1 + 160);
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 != *(void *)(a1 + 80))
  {
    *(unsigned char *)(a1 + 376) = 0;
    uint64_t result = AudioFileStreamSeek(*(AudioFileStreamID *)(a1 + 48), v7, &outDataByteOffset, &ioFlags);
    if (result) {
      return result;
    }
    SInt64 v8 = outDataByteOffset + *(void *)(a1 + 304);
    SInt64 v7 = v7;
    uint64_t v9 = *(const void **)(a1 + 160);
    SInt64 v10 = v7;
    if (!v9)
    {
LABEL_13:
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(_OWORD *)(a1 + 136) = xmmword_1949932C0;
      *(unsigned char *)(a1 + 192) = 0;
      *(void *)(a1 + 80) = v10;
      *(void *)(a1 + 88) = v8;
      goto LABEL_14;
    }
LABEL_12:
    CFRelease(v9);
    SInt64 v10 = v7;
    goto LABEL_13;
  }
LABEL_14:
  while (1)
  {
    uint64_t result = PushBytesThroughParser(a1);
    if (result) {
      break;
    }
    uint64_t result = FillPacketRequestFromCache(v4, (uint64_t)a2, *(unsigned int *)(a1 + 224), (unsigned char *)&v11 + 1, &v11);
    if (result) {
      break;
    }
    if (HIBYTE(v11))
    {
      if ((_BYTE)v11) {
        return 0;
      }
      goto LABEL_5;
    }
  }
  if (result == -12873)
  {
    if (a2[2]) {
      return 0;
    }
    else {
      return 4294954423;
    }
  }
  return result;
}

void TearDownPacketRequest(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 48) = 0;
  free(*(void **)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  free(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

uint64_t FillPacketRequestFromCache(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  *a4 = 0;
  *a5 = 0;
  uint64_t v6 = (void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = v9 + *(void *)a2;
  uint64_t v11 = v10 - *(void *)a1;
  if (v10 < *(void *)a1 || v10 >= *(void *)a1 + v5)
  {
    uint64_t appended = 0;
LABEL_42:
    if (v9 < *(void *)(a2 + 8))
    {
      uint64_t v45 = *(const void **)(a1 + 24);
      if (v45) {
        CFRelease(v45);
      }
      *uint64_t v6 = 0;
      v6[1] = 0;
      *(_OWORD *)a1 = xmmword_1949932C0;
      *(unsigned char *)(a1 + 56) = 0;
    }
    return appended;
  }
  uint64_t v15 = *(void *)(a2 + 8) - v9;
  uint64_t v16 = v5 - v11;
  if (v15 >= v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v15;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v18 = *(void *)(a1 + 64);
    BOOL v19 = v17 + v11 <= v18 || v18 < v11;
    BOOL v20 = v19 || v16 <= v15;
    if (!v20 && v18 != v11)
    {
      uint64_t v17 = v18 - v11;
      *a5 = 1;
    }
  }
  uint64_t v22 = *(void *)(a1 + 32);
  if (!v22)
  {
    uint64_t v37 = *(OpaqueCMBlockBuffer **)(a2 + 48);
    CMTimeValue v38 = *(OpaqueCMBlockBuffer **)(a1 + 24);
    size_t v34 = v17 * a3;
    size_t v27 = v11 * a3;
LABEL_36:
    uint64_t appended = CMBlockBufferAppendBufferReference(v37, v38, v27, v34, 0);
    uint64_t v39 = *(void *)(a1 + 40);
    uint64_t v40 = *(void *)(a2 + 16);
    if (v39 && v17)
    {
      uint64_t v41 = (uint64_t *)(v39 + 8 * v11);
      char v42 = (void *)(*(void *)(a2 + 32) + 8 * v40);
      uint64_t v43 = v17;
      do
      {
        uint64_t v44 = *v41++;
        *v42++ = v44;
        --v43;
      }
      while (v43);
      uint64_t v40 = *(void *)(a2 + 16);
    }
    *(void *)(a2 + 16) = v40 + v17;
    *a4 = 1;
    uint64_t v9 = *(void *)(a2 + 16);
    goto LABEL_42;
  }
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v23 = *(void *)(a2 + 24);
  unint64_t v25 = (size_t *)(v22 + 16 * v11);
  Dataint Length = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a2 + 48));
  size_t v27 = *v25;
  uint64_t v28 = &v25[2 * v17];
  uint64_t v29 = *(v28 - 2);
  uint64_t v30 = *((unsigned int *)v28 - 1);
  if (v17)
  {
    uint64_t v31 = (_OWORD *)(v23 + 16 * v24);
    uint64_t v32 = v17;
    do
    {
      long long v33 = *(_OWORD *)v25;
      v25 += 2;
      *uint64_t v31 = v33;
      *(void *)v31++ += DataLength - v27;
      --v32;
    }
    while (v32);
  }
  if ((v27 & 0x8000000000000000) == 0)
  {
    size_t v34 = v29 - v27 + v30;
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v35 = *(void *)(a1 + 64);
      if (v17 + v11 > v35 && v35 >= v11)
      {
        *(unsigned char *)(a2 + 56) = 1;
        *(void *)(a2 + 64) = v35 - v11 + *(void *)(a2 + 16);
      }
    }
    uint64_t v37 = *(OpaqueCMBlockBuffer **)(a2 + 48);
    CMTimeValue v38 = *(OpaqueCMBlockBuffer **)(a1 + 24);
    goto LABEL_36;
  }

  return FigSignalErrorAt();
}

uint64_t FigAudioFileStreamCursor_copy(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    *uint64_t v5 = *DerivedStorage;
    uint64_t v6 = *(const void **)v5;
    if (v6) {
      CFRetain(v6);
    }
    *a2 = 0;
  }
  return v4;
}

uint64_t FigAudioFileStreamCursor_compareInDecodeOrder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 8);
  uint64_t v3 = *(void *)(v1 + 8);
  BOOL v4 = v2 < v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return -1;
  }
  else {
    return v5;
  }
}

uint64_t FigAudioFileStreamCursor_getPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  int64_t value = 0;
  uint64_t v4 = MapPacketNumberToFrameNumber(*DerivedStorage, DerivedStorage[1], &value);
  if (!v4)
  {
    CMTimeMake(&v6, value, *(_DWORD *)(*DerivedStorage + 252));
    *a2 = v6;
  }
  return v4;
}

uint64_t FigAudioFileStreamCursor_getDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *DerivedStorage;
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  if (*(_DWORD *)(v4 + 228))
  {
    int32_t v5 = *(_DWORD *)(v4 + 252);
    int64_t v6 = *(unsigned int *)(v4 + 228);
LABEL_3:
    CMTimeMake(&v18, v6, v5);
    uint64_t v7 = 0;
    *a2 = v18;
    return v7;
  }
  uint64_t v8 = *(void *)(v4 + 152);
  if (v8)
  {
    uint64_t v9 = DerivedStorage[1];
    uint64_t v10 = *(void *)(v4 + 136);
    if (v9 < v10 || v9 >= v10 + v8)
    {
      if (v8 < 1)
      {
        int32_t v5 = *(_DWORD *)(v4 + 252);
        int64_t v6 = 1;
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v14 = (unsigned int *)(*(void *)(v4 + 168) + 8);
        while (1)
        {
          unsigned int v16 = *v14;
          v14 += 4;
          uint64_t v15 = v16;
          if ((v13 ^ 0x7FFFFFFFFFFFFFFFLL) < v16) {
            break;
          }
          v13 += v15;
          if (v8 == ++v12)
          {
            unint64_t v12 = *(void *)(v4 + 152);
            break;
          }
        }
        int32_t v5 = *(_DWORD *)(v4 + 252);
        int64_t v6 = v13 / v12;
      }
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = DerivedStorage[1];
  }
  SetupPacketRequest(v9, 1, (uint64_t)&v19, *(_DWORD *)(v4 + 224) == 0, *(unsigned __int8 *)(v4 + 400));
  MEMORY[0x19970E290](*(void *)(v4 + 32));
  LODWORD(v7) = ObtainRequestedPackets(v4, &v19);
  MEMORY[0x19970E2B0](*(void *)(v4 + 32));
  if (v7 == -12873) {
    uint64_t v7 = 4294954456;
  }
  else {
    uint64_t v7 = v7;
  }
  if (!v7)
  {
    if (*((void *)&v20 + 1))
    {
      CMTimeMake(&v18, *(unsigned int *)(*((void *)&v20 + 1) + 8), *(_DWORD *)(v4 + 252));
      uint64_t v7 = 0;
      *a2 = v18;
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
  }
  TearDownPacketRequest((uint64_t)&v19);
  return v7;
}

uint64_t FigAudioFileStreamCursor_getDependencyInfo(uint64_t a1, BOOL *a2, unsigned char *a3, _DWORD *a4, unsigned char *a5)
{
  uint64_t v10 = *(void *)CMBaseObjectGetDerivedStorage();
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (!a2) {
    return 0;
  }
  *a2 = 1;
  if (!*(unsigned char *)(v10 + 400)) {
    return 0;
  }
  BOOL v15 = 0;
  int v14 = 0;
  uint64_t result = figAudioFileStreamCursor_getSampleDependencyInfo(a1, &v15, &v14);
  if (!result)
  {
    BOOL v13 = v15 && v14 == 0;
    *a2 = v13;
  }
  return result;
}

uint64_t FigAudioFileStreamCursor_createSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *DerivedStorage;
  CMSampleBufferRef sbuf = 0;
  memset(&v52, 0, sizeof(v52));
  uint64_t v51 = 0;
  long long v49 = 0u;
  *(_OWORD *)dataBuffer = 0u;
  long long v47 = 0u;
  long long packetDescriptions = 0u;
  uint64_t v9 = FigAudioFileStreamCursor_getPresentationTimeStamp(a1, &v52);
  if (v9) {
    return v9;
  }
  if (!v7)
  {
    uint64_t v11 = DerivedStorage[1];
    uint64_t v14 = 1;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v7 + 8);
  uint64_t v11 = DerivedStorage[1];
  BOOL v12 = v10 < v11;
  uint64_t v13 = v10 - v11;
  if (!v12)
  {
    uint64_t v14 = v13 + 1;
LABEL_9:
    SetupPacketRequest(v11, v14, (uint64_t)&v47, *(_DWORD *)(v8 + 224) == 0, *(unsigned __int8 *)(v8 + 400));
    MEMORY[0x19970E290](*(void *)(v8 + 32));
    unsigned int v15 = ObtainRequestedPackets(v8, &v47);
    MEMORY[0x19970E2B0](*(void *)(v8 + 32));
    if (v15 == -12873) {
      uint64_t v16 = 4294954456;
    }
    else {
      uint64_t v16 = v15;
    }
    if (!v16)
    {
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime v18 = *(const opaqueCMFormatDescription **)(v8 + 264);
      CMTime presentationTimeStamp = v52;
      uint64_t v19 = CMAudioSampleBufferCreateWithPacketDescriptions(v17, dataBuffer[0], 1u, 0, 0, v18, packetDescriptions, &presentationTimeStamp, *((const AudioStreamPacketDescription **)&packetDescriptions + 1), &sbuf);
      if (v19)
      {
        uint64_t v16 = v19;
        if (sbuf) {
          CFRelease(sbuf);
        }
      }
      else
      {
        if (LOBYTE(dataBuffer[1]))
        {
          CMSampleBufferRef v20 = sbuf;
          int v21 = *(_DWORD *)(v8 + 228) * *(_DWORD *)(v8 + 324);
          memset(&presentationTimeStamp, 0, sizeof(presentationTimeStamp));
          CMTimeMake(&presentationTimeStamp, v21, (int)*(double *)(v8 + 208));
          keys.int64_t value = *MEMORY[0x1E4F21AA0];
          values.int64_t value = (CMTimeValue)CFNumberCreate(v17, kCFNumberCFIndexType, &v51);
          *(void *)&keys.CMTimeScale timescale = *MEMORY[0x1E4F21A98];
          CMTime time = presentationTimeStamp;
          *(void *)&values.CMTimeScale timescale = CMTimeCopyAsDictionary(&time, v17);
          CFDictionaryRef v22 = CFDictionaryCreate(v17, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CMSetAttachment(v20, (CFStringRef)*MEMORY[0x1E4F21A18], v22, 0);
          if (values.value) {
            CFRelease((CFTypeRef)values.value);
          }
          if (*(void *)&values.timescale) {
            CFRelease(*(CFTypeRef *)&values.timescale);
          }
          if (v22) {
            CFRelease(v22);
          }
        }
        if (*(unsigned char *)(v8 + 368) && !*(unsigned char *)(v8 + 345))
        {
          memset(&presentationTimeStamp, 0, sizeof(presentationTimeStamp));
          CMTimeMake(&presentationTimeStamp, *(unsigned int *)(v8 + 372), (int)*(double *)(v8 + 208));
          memset(&time, 0, sizeof(time));
          CMSampleBufferGetPresentationTimeStamp(&time, sbuf);
          CMTime keys = presentationTimeStamp;
          CMTime values = time;
          if (CMTimeCompare(&keys, &values) >= 1)
          {
            memset(&keys, 0, sizeof(keys));
            CMTime values = presentationTimeStamp;
            CMTime rhs = time;
            CMTimeSubtract(&keys, &values, &rhs);
            CMTime values = keys;
            CFDictionaryRef v23 = CMTimeCopyAsDictionary(&values, v17);
            CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F308], v23, 1u);
            if (v23) {
              CFRelease(v23);
            }
          }
          CMTime keys = time;
          CMTime values = presentationTimeStamp;
          int32_t v24 = CMTimeCompare(&keys, &values);
          unint64_t v25 = sbuf;
          if (v24 < 1)
          {
            CMTime keys = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
            p_CMTime keys = &keys;
          }
          else
          {
            CMTime keys = time;
            CMTime values = presentationTimeStamp;
            CMTimeSubtract(&v45, &keys, &values);
            p_CMTime keys = &v45;
          }
          CMSampleBufferSetOutputPresentationTimeStamp(v25, p_keys);
        }
        if (*(unsigned char *)(v8 + 376))
        {
          if (!*(unsigned char *)(v8 + 345))
          {
            uint64_t v27 = DerivedStorage[1];
            uint64_t v28 = packetDescriptions;
            uint64_t v29 = *(void *)(v8 + 384);
            if ((uint64_t)packetDescriptions + v27 > v29)
            {
              long long v44 = *MEMORY[0x1E4F1FA48];
              *(_OWORD *)&presentationTimeStamp.int64_t value = *MEMORY[0x1E4F1FA48];
              CMTimeEpoch v30 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
              presentationTimeStamp.CMTimeEpoch epoch = v30;
              uint64_t v31 = v29 - v27;
              if (v29 >= v27)
              {
                if (v31 < (uint64_t)packetDescriptions)
                {
                  unsigned int v32 = *(_DWORD *)(v8 + 228);
                  if (!v32 && *((void *)&packetDescriptions + 1)) {
                    unsigned int v32 = *(_DWORD *)(*((void *)&packetDescriptions + 1) + 16 * v31 + 8);
                  }
                  unsigned int v33 = *(_DWORD *)(v8 + 392);
                  if (v32 > v33)
                  {
                    CMTimeMake(&presentationTimeStamp, v32 - v33, (int)*(double *)(v8 + 208));
                    uint64_t v28 = packetDescriptions;
                  }
                  uint64_t v34 = v31 + 1;
                  if (v34 < v28)
                  {
                    uint64_t v35 = 16 * v29 - 16 * v27 + 24;
                    do
                    {
                      int64_t v36 = *(unsigned int *)(v8 + 228);
                      if (v36) {
                        BOOL v37 = 1;
                      }
                      else {
                        BOOL v37 = *((void *)&packetDescriptions + 1) == 0;
                      }
                      if (!v37) {
                        int64_t v36 = *(unsigned int *)(*((void *)&packetDescriptions + 1) + v35);
                      }
                      memset(&time, 0, sizeof(time));
                      CMTimeMake(&time, v36, (int)*(double *)(v8 + 208));
                      CMTime values = presentationTimeStamp;
                      CMTime rhs = time;
                      CMTimeAdd(&keys, &values, &rhs);
                      CMTime presentationTimeStamp = keys;
                      ++v34;
                      v35 += 16;
                    }
                    while (v34 < (uint64_t)packetDescriptions);
                  }
                }
              }
              else
              {
                CMSampleBufferGetDuration(&presentationTimeStamp, sbuf);
              }
              CMTime time = presentationTimeStamp;
              *(_OWORD *)&keys.int64_t value = v44;
              keys.CMTimeEpoch epoch = v30;
              if (CMTimeCompare(&time, &keys) >= 1)
              {
                CMTime time = presentationTimeStamp;
                CFDictionaryRef v38 = CMTimeCopyAsDictionary(&time, v17);
                CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F300], v38, 1u);
                if (v38) {
                  CFRelease(v38);
                }
              }
            }
          }
        }
        if (*(unsigned char *)(v8 + 400) && (uint64_t)packetDescriptions >= 1)
        {
          CFIndex v39 = 0;
          do
          {
            CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
            if (SampleAttachmentsArray)
            {
              CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, v39);
              if (ValueAtIndex)
              {
                char v42 = ValueAtIndex;
                presentationTimeStamp.int64_t value = 0;
                FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary();
                if (presentationTimeStamp.value)
                {
                  CFDictionaryApplyFunction((CFDictionaryRef)presentationTimeStamp.value, (CFDictionaryApplierFunction)appendAttributesToDictionary, v42);
                  CFRelease((CFTypeRef)presentationTimeStamp.value);
                }
              }
            }
            ++v39;
          }
          while (v39 < (uint64_t)packetDescriptions);
        }
        uint64_t v16 = 0;
        *a3 = sbuf;
        CMSampleBufferRef sbuf = 0;
      }
    }
    TearDownPacketRequest((uint64_t)&v47);
    return v16;
  }

  return FigSignalErrorAt();
}

uint64_t FigAudioFileStreamCursor_stepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  memset(&v12, 0, sizeof(v12));
  uint64_t v5 = *DerivedStorage;
  int64_t v4 = DerivedStorage[1];
  LODWORD(v6) = *(_DWORD *)(*DerivedStorage + 228);
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = v6;
  }
  if (v4 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v6)) {
    return 4294954456;
  }
  uint64_t v7 = DerivedStorage;
  __int16 v11 = 0;
  value.CMTime value = 0;
  uint64_t result = MapPacketNumberToFrameNumber(v5, v4, &value.value);
  if (!result)
  {
    CMTimeMake(&v13, value.value, *(_DWORD *)(v5 + 252));
    CMTime value = v13;
    CMTime v9 = *a2;
    CMTimeAdd(&v12, &value, &v9);
    CMTime value = v12;
    uint64_t result = moveToSampleAtPTS(v7, &value, (BOOL *)&v11 + 1, (BOOL *)&v11);
    if (!result)
    {
      if (HIBYTE(v11) | v11) {
        return 4294954456;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigAudioFileStreamCursor_stepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3 = *a2;
  return FigAudioFileStreamCursor_stepByDecodeTime(a1, &v3);
}

uint64_t FigAudioFileStreamCursor_copyFormatDescription(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v4 = *(CFTypeRef *)(*(void *)DerivedStorage + 264);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *a2 = v4;
  }
  return 0;
}

uint64_t FigAudioFileStreamCursor_stepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  int64_t v6 = DerivedStorage[1];
  LODWORD(v7) = *(_DWORD *)(*DerivedStorage + 228);
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = v7;
  }
  if (v6 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v7))
  {
    uint64_t v8 = 4294954456;
    uint64_t v9 = DerivedStorage[1];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = v6 + a2;
    if (a2 <= 0) {
      uint64_t v9 = (v6 + a2) & ~((v6 + a2) >> 63);
    }
  }
  DerivedStorage[1] = v9;
  if (a3) {
    *a3 = v9 - v6;
  }
  return v8;
}

void appendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void AudioFileStream_FigPropertyListenerProc(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 > 1886283374)
  {
    if (a3 <= 1919247480)
    {
      if (a3 == 1886283375)
      {
        GetAudioFileStreamPacketTableInfo(a1);
      }
      else if (a3 == 1886547302)
      {
        v27[0] = 4;
        *(unsigned char *)(a1 + 368) = 0;
        if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x70726D66u, v27, (void *)(a1 + 372))
          && !*(unsigned char *)(a1 + 345))
        {
          *(unsigned char *)(a1 + 368) = 1;
        }
      }
      return;
    }
    if (a3 == 1935893603)
    {
      v27[0] = 8;
      unint64_t v7 = *(OpaqueAudioFileStreamID **)(a1 + 48);
      uint64_t v8 = (void *)(a1 + 408);
      AudioFileStreamPropertyID v9 = 1935893603;
      goto LABEL_31;
    }
    if (a3 == 1919316848)
    {
      v27[0] = 16;
      *(unsigned char *)(a1 + 376) = 0;
      if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x72667370u, v27, (void *)(a1 + 384))
        && !*(unsigned char *)(a1 + 345))
      {
        *(unsigned char *)(a1 + 376) = 1;
      }
      return;
    }
    if (a3 != 1919247481 || *(unsigned char *)(a1 + 56)) {
      return;
    }
    *(unsigned char *)(a1 + 56) = 1;
    *(void *)outPropertyDataSize = 0;
    Boolean outWritable = 0;
    UInt32 ioPropertyDataSize = 40;
    *(void *)uint64_t v27 = 0;
    unsigned int v25 = 0;
    UInt32 v26 = 8;
    UInt32 v24 = 4;
    CFTypeRef v4 = (double *)(a1 + 208);
    OSStatus Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x64666D74u, &ioPropertyDataSize, (void *)(a1 + 208));
    if (Property
      || (UInt32 v22 = 4,
          int outPropertyData = 0,
          AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x72726170u, &v22, &outPropertyData),
          *(unsigned char *)(a1 + 400) = outPropertyData != 0,
          (OSStatus Property = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x646F6666u, &v26, v27)) != 0))
    {
      int v21 = Property;
      FigSignalErrorAt();
    }
    else
    {
      if (AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x706B7562u, &v24, &v25))
      {
        double v6 = *(double *)(a1 + 208);
        if (*(_DWORD *)(a1 + 216) == 778924083) {
          unsigned int v25 = (64512000.0 / v6);
        }
      }
      else
      {
        double v6 = *v4;
      }
      *(_DWORD *)(a1 + 248) = v25;
      *(_DWORD *)(a1 + 280) = 1;
      *(void *)(a1 + 304) = *(void *)(a1 + 128) + *(void *)v27;
      if (v6 > 0.0)
      {
        *(_DWORD *)(a1 + 252) = (int)v6;
        unsigned int v11 = *(_DWORD *)(a1 + 228);
        if (v11)
        {
          unsigned int v12 = v11 - (v11 & ((int)v6 / 2));
          if ((v11 & ((int)v6 / 2)) == 0) {
            unsigned int v12 = 0;
          }
          unsigned int v13 = v12 + (int)v6 / 2;
          if (v11 > v13) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v13 / v11;
          }
          *(void *)(a1 + 256) = v14;
        }
        unsigned int v15 = 0;
        if (AudioFileStreamGetPropertyInfo(*(AudioFileStreamID *)(a1 + 48), 0x6D676963u, &outPropertyDataSize[1], &outWritable)|| !outPropertyDataSize[1])
        {
          goto LABEL_56;
        }
        unsigned int v15 = malloc_type_malloc(outPropertyDataSize[1], 0x7646B7D9uLL);
        if (v15)
        {
          int v16 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x6D676963u, &outPropertyDataSize[1], v15);
          if (!v16)
          {
LABEL_56:
            OSStatus PropertyInfo = AudioFileStreamGetPropertyInfo(*(AudioFileStreamID *)(a1 + 48), 0x636D6170u, outPropertyDataSize, &outWritable);
            CMTime v18 = 0;
            UInt32 v19 = outPropertyDataSize[0];
            if (!PropertyInfo && outPropertyDataSize[0])
            {
              CMTime v18 = (AudioChannelLayout *)malloc_type_malloc(outPropertyDataSize[0], 0x1EA31406uLL);
              OSStatus v20 = AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x636D6170u, outPropertyDataSize, v18);
              if (v20)
              {
                int v21 = v20;
                goto LABEL_68;
              }
              UInt32 v19 = outPropertyDataSize[0];
            }
            int v21 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const AudioStreamBasicDescription *)(a1 + 208), v19, v18, outPropertyDataSize[1], v15, 0, (CMAudioFormatDescriptionRef *)(a1 + 264));
            if (!v21)
            {
LABEL_61:
              free(v15);
              free(v18);
              *(_DWORD *)(a1 + 64) = v21;
              return;
            }
LABEL_68:
            FigFormatDescriptionRelease();
            *(void *)(a1 + 264) = 0;
            goto LABEL_61;
          }
        }
        else
        {
          int v16 = FigSignalErrorAt();
        }
        int v21 = v16;
LABEL_67:
        CMTime v18 = 0;
        goto LABEL_68;
      }
      int v21 = FigSignalErrorAt();
    }
    unsigned int v15 = 0;
    goto LABEL_67;
  }
  if (a3 <= 1768174436)
  {
    if (a3 != 1280922179)
    {
      if (a3 != 1651663220) {
        return;
      }
      v27[0] = 4;
      unint64_t v7 = *(OpaqueAudioFileStreamID **)(a1 + 48);
      uint64_t v8 = (void *)(a1 + 424);
      AudioFileStreamPropertyID v9 = 1651663220;
      goto LABEL_31;
    }
    v27[0] = 8;
    if (!*(void *)(a1 + 312))
    {
      uint64_t v10 = (void *)(a1 + 312);
      if (!AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x4C595243u, v27, (void *)(a1 + 312)))
      {
        if (*v10) {
          *(unsigned char *)(a1 + 320) = 1;
        }
      }
    }
  }
  else
  {
    if (a3 != 1768174437)
    {
      if (a3 != 1819243876)
      {
        if (a3 == 1885564532 && !*(_DWORD *)(a1 + 272)) {
          *(_DWORD *)(a1 + 276) = 1;
        }
        return;
      }
      v27[0] = 8;
      unint64_t v7 = *(OpaqueAudioFileStreamID **)(a1 + 48);
      uint64_t v8 = (void *)(a1 + 416);
      AudioFileStreamPropertyID v9 = 1819243876;
LABEL_31:
      AudioFileStreamGetProperty(v7, v9, v27, v8);
      return;
    }
    v27[0] = 0;
    outPropertyDataSize[1] = 4;
    if (*(void *)(a1 + 328) == -1
      && !AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x69643365u, &outPropertyDataSize[1], v27))
    {
      *(void *)(a1 + 328) = *(void *)(a1 + 104) + *(void *)(a1 + 88) + (int)v27[0];
    }
  }
}

void AudioFileStream_FigPacketsProc(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, void *a5)
{
  AudioFileStreamPropertyID v9 = 0;
  uint64_t v10 = a3;
  if (!a5 || !*(unsigned char *)(a1 + 400)) {
    goto LABEL_12;
  }
  unsigned int v12 = malloc_type_malloc(8 * a3, 0x10000404A09149AuLL);
  AudioFileStreamPropertyID v9 = v12;
  if (!v12)
  {
LABEL_10:
    uint64_t v15 = a2;
    CMBlockBufferRef outPropertyData = 0;
    goto LABEL_13;
  }
  if (!a3)
  {
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v12 + 1;
  while (1)
  {
    UInt32 ioPropertyDataSize = 16;
    CMBlockBufferRef outPropertyData = (CMBlockBufferRef)(v13 + *(void *)(a1 + 80));
    uint64_t v41 = 0;
    if (AudioFileStreamGetProperty(*(AudioFileStreamID *)(a1 + 48), 0x706B6470u, &ioPropertyDataSize, &outPropertyData)) {
      break;
    }
    *((unsigned char *)v14 - 4) = v41 != 0;
    *uint64_t v14 = HIDWORD(v41);
    v14 += 2;
    if (v10 == ++v13) {
      goto LABEL_12;
    }
  }
  free(v9);
  AudioFileStreamPropertyID v9 = 0;
LABEL_12:
  uint64_t v15 = a2;
  CMBlockBufferRef outPropertyData = 0;
  if (a5)
  {
LABEL_13:
    Dataint Length = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 160));
    uint64_t v17 = *a5;
    CMTime v18 = *(char **)(a1 + 168);
    if (v18)
    {
      UInt32 v19 = (uint64_t *)(a1 + 152);
      uint64_t v20 = *(void *)(a1 + 152);
      uint64_t v21 = *(void *)(a1 + 184);
      if (v21 - v20 >= v10)
      {
        uint64_t v27 = &v18[16 * v20];
        if (!v9)
        {
          CMTimeEpoch v30 = 0;
          if (!v10)
          {
LABEL_37:
            char v29 = 0;
            *UInt32 v19 = v20 + v10;
            size_t v28 = a5[2 * v10 - 2] - v17 + HIDWORD(a5[2 * v10 - 1]);
            goto LABEL_38;
          }
LABEL_32:
          uint64_t v31 = a5;
          unsigned int v32 = v9;
          uint64_t v33 = v10;
          do
          {
            *(_OWORD *)uint64_t v27 = *v31;
            *(void *)v27 += DataLength - v17;
            if (v9) {
              *(void *)CMTimeEpoch v30 = *v32;
            }
            ++v32;
            v30 += 8;
            ++v31;
            v27 += 16;
            --v33;
          }
          while (v33);
          uint64_t v20 = *v19;
          goto LABEL_37;
        }
        unsigned int v25 = *(char **)(a1 + 176);
LABEL_27:
        CMTimeEpoch v30 = &v25[8 * v20];
        if (!v10) {
          goto LABEL_37;
        }
        goto LABEL_32;
      }
      uint64_t v22 = 64;
      if (v10 > 64) {
        uint64_t v22 = v10;
      }
      uint64_t v23 = v21 + v22;
      UInt32 v24 = (char *)malloc_type_realloc(v18, 16 * (v21 + v22), 0x1000040451B5BE8uLL);
      *(void *)(a1 + 184) = v23;
      *(void *)(a1 + 168) = v24;
      if (v9)
      {
        unsigned int v25 = (char *)malloc_type_realloc(*(void **)(a1 + 176), 8 * v23, 0x10000404A09149AuLL);
LABEL_23:
        *(void *)(a1 + 176) = v25;
        UInt32 v19 = (uint64_t *)(a1 + 152);
        uint64_t v20 = *(void *)(a1 + 152);
        uint64_t v27 = (char *)(*(void *)(a1 + 168) + 16 * v20);
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v26 = 128;
      if (v10 > 128) {
        uint64_t v26 = v10;
      }
      *(void *)(a1 + 184) = v26;
      *(void *)(a1 + 152) = 0;
      UInt32 v24 = (char *)malloc_type_malloc(16 * v26, 0x1000040451B5BE8uLL);
      *(void *)(a1 + 168) = v24;
      if (v9)
      {
        unsigned int v25 = (char *)malloc_type_malloc(8 * *(void *)(a1 + 184), 0x10000404A09149AuLL);
        goto LABEL_23;
      }
    }
    CMTimeEpoch v30 = 0;
    UInt32 v19 = (uint64_t *)(a1 + 152);
    uint64_t v20 = *(void *)(a1 + 152);
    uint64_t v27 = &v24[16 * v20];
    if (!v10) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  uint64_t v17 = 0;
  size_t v28 = v10 * (unint64_t)*(unsigned int *)(a1 + 224);
  *(void *)(a1 + 152) += v10;
  char v29 = 1;
LABEL_38:
  unint64_t v34 = *(void *)(a1 + 120);
  if (v34 > a4 || v34 + *(void *)(a1 + 112) <= a4)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v15 - v17, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v15 - v17, 1u, &outPropertyData))
      {
        goto LABEL_60;
      }
      CMBlockBufferReplaceDataBytes((const void *)(a4 + v17), outPropertyData, 0, v15 - v17);
      int64_t v35 = 0;
      goto LABEL_47;
    }
LABEL_61:
    if (!FigSignalErrorAt()) {
      goto LABEL_60;
    }
    goto LABEL_62;
  }
  int64_t v35 = v17 + a4 - v34 + *(void *)(a1 + 104);
  if (v35 < 0 || (v28 & 0x8000000000000000) != 0) {
    goto LABEL_61;
  }
  CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CMBlockBufferRef *)(a1 + 96), v35, v28, 0, &outPropertyData))
  {
    goto LABEL_60;
  }
LABEL_47:
  if (*(void *)(a1 + 160)) {
    goto LABEL_50;
  }
  if (!CMBlockBufferCreateEmpty(v36, 8u, 0, (CMBlockBufferRef *)(a1 + 160)))
  {
    *(void *)(a1 + 136) = *(void *)(a1 + 80);
LABEL_50:
    if (*(void *)(a1 + 144) == -1)
    {
      if (v29)
      {
        int64_t v37 = *(void *)(a1 + 304) + *(void *)(a1 + 136) * *(unsigned int *)(a1 + 224);
      }
      else
      {
        unint64_t v38 = *(void *)(a1 + 120);
        if (v38 > a4 || v38 + *(void *)(a1 + 112) <= a4) {
          goto LABEL_57;
        }
        int64_t v37 = *(void *)(a1 + 88)
            + v35
            - *(void *)(*(void *)(a1 + 168) + 16 * (*(void *)(a1 + 80) - *(void *)(a1 + 136)));
      }
      *(void *)(a1 + 144) = v37;
    }
LABEL_57:
    CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 160), outPropertyData, 0, 0, 0);
    if (outPropertyData) {
      CFRelease(outPropertyData);
    }
    *(void *)(a1 + 80) += v10;
    goto LABEL_60;
  }
LABEL_62:
  if (outPropertyData) {
    CFRelease(outPropertyData);
  }
LABEL_60:
  free(v9);
}

uint64_t RegisterFigAudioFileStreamInfoType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAudioFileStreamInfoID = result;
  return result;
}

double InitFigAudioFileStreamInfo(_OWORD *a1)
{
  double result = 0.0;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FinalizeFigAudioFileStreamInfo(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 96);
  if (v2) {
    CFRelease(v2);
  }
  CMTime v3 = *(const void **)(a1 + 160);
  if (v3) {
    CFRelease(v3);
  }
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));
  FigFormatDescriptionRelease();
  CFTypeRef v4 = *(OpaqueAudioFileStreamID **)(a1 + 48);
  if (v4) {
    AudioFileStreamClose(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5) {
    CFRelease(v5);
  }
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  double v6 = *(const void **)(a1 + 312);
  if (v6) {
    CFRelease(v6);
  }
  unint64_t v7 = *(const void **)(a1 + 408);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 416);
  if (v8) {
    CFRelease(v8);
  }
  AudioFileStreamPropertyID v9 = *(const void **)(a1 + 336);
  if (v9)
  {
    CFRelease(v9);
  }
}

uint64_t FigDataChannelResourceServer_CreateServedState(const void *a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004023CB03E4uLL);
    if (!v5 || (uint64_t v6 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (v5[2] = v6) == 0))
    {
      uint64_t v8 = FigSignalErrorAt();
      goto LABEL_8;
    }
    CFTypeRef v7 = CFRetain(a1);
    uint64_t v8 = 0;
    v5[1] = v7;
    *a3 = v5;
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  uint64_t v5 = 0;
LABEL_8:
  FigDataChannelResourceServer_DisposeServedState(v5);
  return v8;
}

void FigDataChannelResourceServer_DisposeServedState(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(uint64_t))(v4 + 48);
      if (v5) {
        v5(v2);
      }
      uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v6)
      {
        CFTypeRef v7 = (const void *)v6;
        uint64_t v8 = a1[1];
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        unsigned int v11 = *(void (**)(const void *, uint64_t))(v10 + 128);
        if (v11) {
          v11(v7, v8);
        }
        CFRelease(v7);
      }
      unsigned int v12 = (const void *)a1[1];
      if (v12)
      {
        CFRelease(v12);
        a1[1] = 0;
      }
    }
    uint64_t v13 = (const void *)a1[2];
    if (v13) {
      CFRelease(v13);
    }
    free(a1);
  }
}

uint64_t AssureDefaultAttributes(uint64_t a1, const __CFAllocator *a2, CMFormatDescriptionRef desc)
{
  colorComponentsOut[4] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40)) {
    return 0;
  }
  CMTextDisplayFlags displayFlagsOut = 0;
  *(_WORD *)verticalJustificationOut = 0;
  uint16_t localFontIDOut = 0;
  *(_WORD *)italicOut = 0;
  Boolean underlineOut = 0;
  CFStringRef fontNameOut = 0;
  CGFloat fontSizeOut = 0.0;
  uint64_t v49 = 0;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  uint64_t v40 = 0;
  long long v39 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  if (!desc) {
    return 4294966852;
  }
  if (CMFormatDescriptionGetMediaType(desc) == 1935832172 && CMFormatDescriptionGetMediaSubType(desc) == 1937010800
    || CMFormatDescriptionGetMediaType(desc) == 1668310898
    || CMFormatDescriptionGetMediaType(desc) == 1952807028 && CMFormatDescriptionGetMediaSubType(desc) == 1634301044)
  {
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    *(_OWORD *)(a1 + 8) = *MEMORY[0x1E4F1DB28];
    *(_OWORD *)(a1 + 24) = v7;
    uint64_t v8 = *(const void **)(a1 + 40);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 40) = 0;
    }
    uint64_t result = 0;
    *(_WORD *)(a1 + 64) = 1;
  }
  else if (WebVTTIsFormatDescriptionForWebVTT(desc))
  {
    colorComponentsOut[0] = 0.0;
    long long v9 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    *(_OWORD *)(a1 + 8) = *MEMORY[0x1E4F1DB28];
    *(_OWORD *)(a1 + 24) = v9;
    uint64_t v10 = *(const void **)(a1 + 40);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 40) = 0;
    }
    *(_WORD *)(a1 + 64) = 1;
    unsigned int v11 = *(const void **)(a1 + 48);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t result = WebVTTCreateMetadataDictionaryFromFormatDescripton(desc, 1, (CFDictionaryRef *)colorComponentsOut);
    if (!result && *(void *)&colorComponentsOut[0]) {
      *(CGFloat *)(a1 + 48) = colorComponentsOut[0];
    }
  }
  else
  {
    uint64_t result = CMTextFormatDescriptionGetDisplayFlags(desc, &displayFlagsOut);
    if (!result)
    {
      CMTime keys = (void *)*MEMORY[0x1E4F21E78];
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &displayFlagsOut);
      CMTextDisplayFlags v13 = displayFlagsOut;
      *(unsigned char *)(a1 + 65) = (displayFlagsOut & 0x80000000) != 0;
      *(unsigned char *)(a1 + 64) = (v13 & 0x20000000) != 0;
      uint64_t result = CMTextFormatDescriptionGetDefaultTextBox(desc, 1u, 0.0, (CGRect *)(a1 + 8));
      if (!result)
      {
        uint64_t result = CMTextFormatDescriptionGetJustification(desc, &verticalJustificationOut[1], verticalJustificationOut);
        if (!result)
        {
          *(void *)&long long v42 = *MEMORY[0x1E4F21E80];
          *(void *)&long long v33 = CFNumberCreate(v12, kCFNumberSInt8Type, &verticalJustificationOut[1]);
          *((void *)&v42 + 1) = *MEMORY[0x1E4F21E88];
          *((void *)&v33 + 1) = CFNumberCreate(v12, kCFNumberSInt8Type, verticalJustificationOut);
          uint64_t result = CMTextFormatDescriptionGetDefaultStyle(desc, &localFontIDOut, &italicOut[1], italicOut, &underlineOut, &fontSizeOut, colorComponentsOut);
          if (!result)
          {
            uint64_t v14 = *MEMORY[0x1E4F1CFD0];
            uint64_t v15 = *MEMORY[0x1E4F1CFC8];
            uint64_t v16 = italicOut[1] ? *MEMORY[0x1E4F1CFD0] : *MEMORY[0x1E4F1CFC8];
            uint64_t v17 = *MEMORY[0x1E4F1F630];
            *(void *)&long long v43 = *MEMORY[0x1E4F1F558];
            *((void *)&v43 + 1) = v17;
            uint64_t v18 = italicOut[0] ? v14 : v15;
            *(void *)&long long v34 = v16;
            *((void *)&v34 + 1) = v18;
            uint64_t v19 = *MEMORY[0x1E4F1F718];
            uint64_t v20 = underlineOut ? v14 : v15;
            *(void *)&long long v35 = v20;
            uint64_t v21 = *MEMORY[0x1E4F1F600];
            *(void *)&long long v44 = v19;
            *((void *)&v44 + 1) = v21;
            *((void *)&v35 + 1) = FigCreateCFArrayFromColorValues();
            *(void *)&long long v45 = *MEMORY[0x1E4F21E90];
            *(void *)&long long v36 = CFNumberCreate(v12, kCFNumberCGFloatType, &fontSizeOut);
            uint64_t result = CMTextFormatDescriptionGetFontName(desc, localFontIDOut, &fontNameOut);
            if (!result)
            {
              *((void *)&v45 + 1) = *MEMORY[0x1E4F1F5E0];
              *((void *)&v36 + 1) = CFRetain(fontNameOut);
              CFDictionaryRef v22 = CFDictionaryCreate(a2, (const void **)&keys, (const void **)&values, 9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v22)
              {
                *(void *)(a1 + 40) = v22;
                *(void *)a1 = FigFormatDescriptionRetain();
              }
              for (uint64_t i = 0; i != 72; i += 8)
              {
                UInt32 v24 = *(void **)((char *)&values + i);
                if (v24) {
                  CFRelease(v24);
                }
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigTextSampleBufferDecryptSample(uint64_t a1, opaqueCMSampleBuffer *a2, void *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  Decryptor = (const void *)FigSampleBufferGetDecryptor();
  if (Decryptor)
  {
    long long v7 = Decryptor;
    if (Decryptor != *(const void **)(a1 + 56))
    {
      CFTypeID v8 = CFGetTypeID(Decryptor);
      uint64_t TypeID = FigCPECryptorGetTypeID();
      uint64_t v10 = *(const void **)(a1 + 56);
      if (v8 == TypeID)
      {
        *(void *)(a1 + 56) = v7;
        CFRetain(v7);
        if (v10) {
          CFRelease(v10);
        }
      }
      else if (v10)
      {
        CFRelease(*(CFTypeRef *)(a1 + 56));
        *(void *)(a1 + 56) = 0;
      }
    }
  }
  FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(a2);
  if (FigCPEIsSupportedFormatDescription((uint64_t)FormatDescription) && !*(void *)(a1 + 56))
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_39;
  }
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)CFRetain(DataBuffer);
  }
  else
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Dataint Length = CMBlockBufferGetDataLength(DataBuffer);
    uint64_t v15 = CMBlockBufferCreateContiguous(v13, DataBuffer, v13, 0, 0, DataLength, 0, &blockBufferOut);
    if (v15) {
      goto LABEL_39;
    }
  }
  CMBlockBufferRef v16 = *(CMBlockBufferRef *)(a1 + 56);
  if (v16)
  {
    CMBlockBufferRef v17 = blockBufferOut;
    size_t v18 = CMBlockBufferGetDataLength(blockBufferOut);
    CMBlockBufferRef v29 = 0;
    uint64_t v15 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v18, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v18, 1u, &v29);
    if (!v15)
    {
      CMBlockBufferRef v19 = v29;
      uint64_t v20 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      if (*v21 >= 4uLL
        && (CFDictionaryRef v22 = (uint64_t (*)(CMBlockBufferRef, CMBlockBufferRef, CMBlockBufferRef))v21[4]) != 0)
      {
        uint64_t v23 = v22(v16, v17, v19);
        if (!v23)
        {
          CMBlockBufferRef v24 = blockBufferOut;
          CMBlockBufferRef v16 = v29;
          CMBlockBufferRef blockBufferOut = v29;
          if (v29) {
            CFRetain(v29);
          }
          if (v24) {
            CFRelease(v24);
          }
          goto LABEL_25;
        }
        uint64_t v25 = v23;
      }
      else
      {
        uint64_t v25 = 4294954514;
      }
      CFRelease(v29);
LABEL_29:
      CMBlockBufferRef v16 = 0;
      goto LABEL_33;
    }
LABEL_39:
    uint64_t v25 = v15;
    goto LABEL_29;
  }
LABEL_25:
  if (FigCFEqual())
  {
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t CopyWithNoData = FigSampleBufferCreateCopyWithNoData();
    if (CopyWithNoData)
    {
      uint64_t v25 = CopyWithNoData;
    }
    else
    {
      uint64_t v25 = CMSampleBufferSetDataBuffer(0, blockBufferOut);
      if (!v25) {
        *a3 = 0;
      }
    }
  }
LABEL_33:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v25;
}

uint64_t FigTextSampleBufferCopyAttributedString(uint64_t a1, const __CFAllocator *a2, CMSampleBufferRef sbuf, __CFAttributedString **a4, char *a5, unsigned char *a6, double *a7)
{
  keys[6] = *(void **)MEMORY[0x1E4F143B8];
  dataPointerOut = 0;
  double v12 = *(double *)(a1 + 8);
  double v13 = *(double *)(a1 + 16);
  double v14 = *(double *)(a1 + 24);
  double v15 = *(double *)(a1 + 32);
  FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(sbuf);
  uint64_t v17 = AssureDefaultAttributes(a1, a2, FormatDescription);
  if (v17) {
    return v17;
  }
  __int16 v90 = a7;
  size_t totalLengthOut = 0;
  size_t lengthAtOffsetOut = 0;
  char v93 = *(unsigned char *)(a1 + 65);
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  CMBlockBufferRef v19 = dataPointerOut;
  size_t v20 = totalLengthOut;
  uint64_t v21 = (const UInt8 *)(dataPointerOut + 2);
  unsigned int v22 = *(unsigned __int16 *)dataPointerOut;
  dataPointerOut += 2;
  unsigned int v23 = bswap32(v22);
  if ((v23 & 0x80000000) != 0) {
    return FigSignalErrorAt();
  }
  CFIndex v24 = SHIWORD(v23);
  if (SHIWORD(v23) + 2 > totalLengthOut) {
    return FigSignalErrorAt();
  }
  dataPointerOut = (char *)&v21[SHIWORD(v23)];
  if (SHIWORD(v23) < 2) {
    goto LABEL_8;
  }
  int v25 = *v21;
  if (v25 == 255)
  {
    if (v19[3] != 254)
    {
LABEL_8:
      CFAllocatorRef v26 = a2;
      CFIndex v27 = v24;
      CFStringEncoding v28 = 134217984;
      Boolean v29 = 0;
      goto LABEL_9;
    }
  }
  else if (v25 != 254 || v19[3] != 255)
  {
    goto LABEL_8;
  }
  CFAllocatorRef v26 = a2;
  CFIndex v27 = v24;
  CFStringEncoding v28 = 256;
  Boolean v29 = 1;
LABEL_9:
  CFStringRef v30 = CFStringCreateWithBytes(v26, v21, v27, v28, v29);
  CFStringRef v31 = v30;
  if (!v30) {
    return FigSignalErrorAt();
  }
  uint64_t v89 = a4;
  uint64_t v99 = a1;
  CFStringRef v32 = (const __CFString *)CFRetain(v30);
  CFIndex Length = CFStringGetLength(v32);
  CFStringRef v34 = @"\r\n";
  if (CFStringFind(v32, @"\r\n", 0).length
    || (CFStringRef v34 = @"\n\r", (unint64_t)CFStringFind(v32, @"\n\r", 0).length))
  {
    v119.locatioCFIndex n = 0;
    v119.length = Length;
    CFArrayRef Results = CFStringCreateArrayWithFindResults(a2, v32, v34, v119, 0);
    CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(a2, Length, v32);
    if (MutableCopy)
    {
      long long v37 = MutableCopy;
      v120.locatioCFIndex n = 0;
      v120.length = Length;
      if (CFStringFindAndReplace(MutableCopy, @"\r\n", @"\n", v120, 0)
        || (v121.locatioCFIndex n = 0, v121.length = Length,
                                 CFStringFindAndReplace(v37, @"\n\r", @"\n", v121, 0)))
      {
        CFIndex v24 = CFStringGetLength(v37);
        CFRetain(v37);
        CFRelease(v31);
        CFArrayRef v38 = Results;
        CFStringRef v31 = v37;
      }
      else
      {
        CFArrayRef v38 = Results;
      }
      goto LABEL_16;
    }
    FigSignalErrorAt();
    CFArrayRef v38 = 0;
    long long v37 = (__CFString *)Results;
    if (Results) {
LABEL_16:
    }
      CFRelease(v37);
  }
  else
  {
    CFArrayRef v38 = 0;
  }
  if (v32) {
    CFRelease(v32);
  }
  if (totalLengthOut > v24 + 2)
  {
    unint64_t v39 = (unint64_t)&v19[v20];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFAttributedStringBeginEditing(Mutable);
    v115.locatioCFIndex n = 0;
    v115.length = 0;
    CFAttributedStringReplaceString(Mutable, v115, v31);
    v116.length = CFAttributedStringGetLength(Mutable);
    uint64_t v41 = v99;
    v116.locatioCFIndex n = 0;
    CFAttributedStringSetAttributes(Mutable, v116, *(CFDictionaryRef *)(v99 + 40), 1u);
    long long v42 = dataPointerOut;
    if (dataPointerOut + 8 > &v19[v20])
    {
LABEL_21:
      CFAttributedStringEndEditing(Mutable);
      goto LABEL_23;
    }
    CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F21E98];
    __int16 v86 = (void *)*MEMORY[0x1E4F1F558];
    uint64_t v85 = (void *)*MEMORY[0x1E4F1F630];
    __int16 v84 = (void *)*MEMORY[0x1E4F1F718];
    uint64_t v83 = (void *)*MEMORY[0x1E4F21E90];
    int v82 = (void *)*MEMORY[0x1E4F1F600];
    __int16 v81 = (void *)*MEMORY[0x1E4F1F5E0];
    uint64_t v101 = (void *)*MEMORY[0x1E4F1CFD0];
    long long v100 = (void *)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v87 = &v19[v20];
    while (1)
    {
      unsigned int v44 = bswap32(*(_DWORD *)v42);
      dataPointerOut = v42 + 4;
      unsigned int v45 = *((_DWORD *)v42 + 1);
      long long v46 = (unsigned __int8 *)(v42 + 8);
      dataPointerOut = v42 + 8;
      unint64_t v47 = v44 - 8;
      if ((int)(v44 - 8) < 0 || (unint64_t)&v46[v47] > v39)
      {
        uint64_t v43 = FigSignalErrorAt();
        CFRelease(Mutable);
        goto LABEL_92;
      }
      int v48 = bswap32(v45);
      if (v48 > 1952608119)
      {
        if (v48 == 1952608120)
        {
          int v53 = bswap32(*((unsigned __int16 *)v42 + 4));
          int v54 = bswap32(*((unsigned __int16 *)v42 + 5));
          double v12 = (double)(v54 >> 16);
          double v13 = (double)(v53 >> 16);
          double v14 = (double)(((int)bswap32(*((unsigned __int16 *)v42 + 7)) >> 16) - (v54 >> 16));
          double v15 = (double)(((int)bswap32(*((unsigned __int16 *)v42 + 6)) >> 16) - (v53 >> 16));
        }
        else if (v48 == 1953985136)
        {
          int v51 = *v46;
          if (!v51)
          {
            CMTime v52 = @"None";
            goto LABEL_56;
          }
          if (v51 == 1)
          {
            CMTime v52 = @"AutomaticSoftWrap";
LABEL_56:
            v117.length = CFAttributedStringGetLength(Mutable);
            v117.locatioCFIndex n = 0;
            CFAttributedStringSetAttribute(Mutable, v117, attrName, v52);
          }
        }
      }
      else if (v48 == 1718772580)
      {
        char v93 = 1;
      }
      else if (v48 == 1937013100)
      {
        desc = *(const opaqueCMFormatDescription **)v41;
        keys[0] = v86;
        keys[1] = v85;
        keys[2] = v84;
        keys[3] = v83;
        keys[4] = v82;
        keys[5] = v81;
        long long v112 = 0u;
        long long v113 = 0u;
        *(_OWORD *)CMTime values = 0u;
        double valuePtr = 0.0;
        CFStringRef fontNameOut = 0;
        unsigned int v49 = *(unsigned __int16 *)v46;
        if (v38) {
          CFIndex Count = CFArrayGetCount(v38);
        }
        else {
          CFIndex Count = 0;
        }
        unint64_t v88 = v47;
        if (v47 < 0xE) {
          goto LABEL_53;
        }
        int v55 = (int)bswap32(v49) >> 16;
        if (((12 * v55) | 2uLL) > v47 || Mutable == 0) {
          goto LABEL_53;
        }
        CFIndex v57 = CFAttributedStringGetLength(Mutable);
        if (v55 >= 1)
        {
          uint64_t v58 = 0;
          CFStringRef v97 = v31;
          uint64_t v98 = v42 + 10;
          uint64_t v94 = (unsigned __int16)v55;
          CFIndex v95 = v57;
          long long v96 = Mutable;
          while (1)
          {
            UInt32 v59 = &v98[12 * v58];
            unsigned int v60 = bswap32(*(unsigned __int16 *)v59);
            if ((v60 & 0x80000000) != 0) {
              break;
            }
            unsigned int v61 = HIWORD(v60);
            uint64_t v62 = (__int16)v61;
            if (v57 < (__int16)v61) {
              break;
            }
            unsigned int v63 = bswap32(*((unsigned __int16 *)v59 + 1)) >> 16;
            uint64_t v64 = (__int16)v63;
            CFIndex v65 = (__int16)v63 - (uint64_t)(__int16)v61;
            if (v65 < 0 || v57 < (__int16)v63) {
              break;
            }
            char v66 = v59[6];
            unsigned int v103 = v59[7];
            unsigned int v104 = *((unsigned __int16 *)v59 + 2);
            if (Count < 1)
            {
              CFIndex v69 = (__int16)v61;
            }
            else
            {
              CFIndex v67 = 0;
              int v68 = 0;
              CFIndex v69 = (__int16)v61;
              do
              {
                uint64_t v70 = *(void *)CFArrayGetValueAtIndex(v38, v67);
                v69 -= v70 < v62;
                uint64_t v71 = v70 < v64 && v70 >= v62;
                v65 -= v71;
                CFIndex v67 = (__int16)++v68;
              }
              while (Count > (__int16)v68);
            }
            if (v66) {
              uint64_t v72 = v101;
            }
            else {
              uint64_t v72 = v100;
            }
            if ((v66 & 2) != 0) {
              unsigned int v73 = v101;
            }
            else {
              unsigned int v73 = v100;
            }
            values[0] = v72;
            values[1] = v73;
            if ((v66 & 4) != 0) {
              unsigned int v74 = v101;
            }
            else {
              unsigned int v74 = v100;
            }
            *(void *)&long long v112 = v74;
            double valuePtr = (double)v103;
            *((void *)&v112 + 1) = CFNumberCreate(allocator, kCFNumberCGFloatType, &valuePtr);
            *(void *)&long long v113 = FigCreateCFArrayFromColorValues();
            CMTextFormatDescriptionGetFontName(desc, __rev16(v104), &fontNameOut);
            CFMutableDictionaryRef Mutable = v96;
            if (fontNameOut)
            {
              *((void *)&v113 + 1) = CFRetain(fontNameOut);
              CFIndex v75 = 6;
            }
            else
            {
              CFIndex v75 = 5;
            }
            CFStringRef v31 = v97;
            CFDictionaryRef v76 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, v75, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            v118.locatioCFIndex n = v69;
            v118.length = v65;
            CFAttributedStringSetAttributes(v96, v118, v76, 0);
            CFRelease(v76);
            for (uint64_t i = 0; i != 6; ++i)
            {
              CFTypeRef v78 = values[i];
              if (v78)
              {
                CFRelease(v78);
                values[i] = 0;
              }
            }
            ++v58;
            CFIndex v57 = v95;
            if (v58 == v94) {
              goto LABEL_54;
            }
          }
LABEL_53:
          FigSignalErrorAt();
        }
LABEL_54:
        uint64_t v41 = v99;
        unint64_t v39 = (unint64_t)v87;
        unint64_t v47 = v88;
      }
      long long v42 = &dataPointerOut[v47];
      dataPointerOut = v42;
      if ((unint64_t)(v42 + 8) > v39) {
        goto LABEL_21;
      }
    }
  }
  uint64_t v41 = v99;
  CFMutableDictionaryRef Mutable = CFAttributedStringCreate(a2, v31, *(CFDictionaryRef *)(v99 + 40));
LABEL_23:
  *uint64_t v89 = Mutable;
  if (!Mutable)
  {
    uint64_t v43 = FigSignalErrorAt();
    if (!v38) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (a5) {
    *a5 = v93;
  }
  if (a6) {
    *a6 = *(unsigned char *)(v41 + 64);
  }
  uint64_t v43 = 0;
  if (v90)
  {
    *__int16 v90 = v12;
    v90[1] = v13;
    v90[2] = v14;
    v90[3] = v15;
    if (!v38) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
LABEL_92:
  if (v38) {
LABEL_93:
  }
    CFRelease(v38);
LABEL_94:
  CFRelease(v31);
  return v43;
}

void FigTextSampleBufferTearDownState(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 56) = 0;
  }
  if (*(void *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 48) = 0;
  }
}

uint64_t FigByteFlumePostHostUnavailableNotification(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 1) {
    return 0;
  }
  *(unsigned char *)(a1 + 16) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return 1;
}

uint64_t FigByteFlumePostHostAvailableNotification(uint64_t a1)
{
  FigRetainProxyGetOwner();
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = 1;
  *(unsigned char *)(a1 + 16) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return v2;
}

uint64_t FigByteFlumePostHostAvailableOnBetterInterfaceNotification(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 1) {
    return 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  return 1;
}

uint64_t FigByteFlumePostConnectionToHostLostNotification(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  *(unsigned char *)(a1 + 18) = 1;
  if (v1)
  {
    CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigByteFlumeNotificationPayload_LastError, (const void **)(a1 + 24), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v2)
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  else
  {
    CFDictionaryRef v2 = 0;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v5 = CFRetain(Owner);
  }
  else {
    CFTypeRef v5 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v5) {
    CFRelease(v5);
  }
  if (v2) {
    CFRelease(v2);
  }
  return 1;
}

void FigByteFlumeBaseInvalidate(uint64_t a1)
{
  CFDictionaryRef v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    if (v2 == dispatch_get_current_queue()
      || (dispatch_sync_f(v2, 0, (dispatch_function_t)fbf_notificationBarrierDQFunc),
          (CFDictionaryRef v2 = *(NSObject **)(a1 + 8)) != 0))
    {
      dispatch_release(v2);
      *(void *)(a1 + 8) = 0;
    }
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 32) = 0;
  }
}

void FigByteFlumeBaseDispose(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(void *)a1 = 0;
  }
}

uint64_t FigByteFlumeBaseInitialize(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16) = 1;
  uint64_t result = FigRetainProxyCreate();
  if (!result)
  {
    dispatch_queue_t v4 = dispatch_queue_create("com.apple.coremedia.byteflume", 0);
    *(void *)(a2 + 8) = v4;
    if (v4)
    {
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CFMutableDictionaryRef FigByteFlumeCreateNetworkPathEvaluatorCreateOptionsFromHTTPRequestOptions(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigByteFlumeCreateReportingAgent(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const void *a4, const void *a5, int a6, const __CFDictionary *a7)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    double v14 = Mutable;
    if (a7)
    {
      a7 = FigRCLCopyConfigurationGroupName(a7);
      if (a7) {
        CFDictionarySetValue(v14, @"configurationGroup", a7);
      }
    }
    CFDictionaryRef v48 = a7;
    uint64_t v50 = a1;
    if (a2)
    {
      unint64_t v47 = a5;
      CFStringRef Value = (const void *)FigCFDictionaryGetValue();
      if (!Value || (CMBlockBufferRef v16 = Value, v17 = CFGetTypeID(Value), v17 != CFStringGetTypeID())) {
        CMBlockBufferRef v16 = 0;
      }
      int v46 = a6;
      uint64_t v18 = FigCFDictionaryGetValue();
      CMBlockBufferRef v19 = (const void *)FigCFDictionaryGetValue();
      if (!v19 || (size_t v20 = v19, v21 = CFGetTypeID(v19), v21 != CFStringGetTypeID())) {
        size_t v20 = 0;
      }
      unsigned int v45 = (const void *)v18;
      unsigned int v22 = (const void *)FigCFDictionaryGetValue();
      if (!v22 || (unsigned int v23 = v22, v24 = CFGetTypeID(v22), v24 != CFStringGetTypeID())) {
        unsigned int v23 = 0;
      }
      int v25 = v14;
      CFAllocatorRef v26 = (const void *)FigCFDictionaryGetValue();
      if (!v26 || (v27 = v26, CFTypeID v28 = CFGetTypeID(v26), v28 != CFStringGetTypeID())) {
        CFIndex v27 = 0;
      }
      Boolean v29 = (const void *)FigCFDictionaryGetValue();
      if (!v29
        || (CFStringRef v30 = v29,
            CFStringRef v31 = v16,
            CFDictionaryRef v32 = a3,
            CFTypeID v33 = CFGetTypeID(v29),
            BOOL v34 = v33 == CFDictionaryGetTypeID(),
            a3 = v32,
            CMBlockBufferRef v16 = v31,
            !v34))
      {
        CFStringRef v30 = 0;
      }
      double v14 = v25;
      if (v20) {
        CFDictionarySetValue(v25, @"MediaIdentifier", v20);
      }
      if (v23) {
        CFDictionarySetValue(v25, @"ContentProvider", v23);
      }
      a5 = v47;
      if (v27) {
        CFDictionarySetValue(v25, @"StorefrontID", v27);
      }
      a6 = v46;
      if (v30) {
        CFDictionarySetValue(v14, @"ServiceInformationKey", v30);
      }
      a1 = v50;
      long long v35 = v45;
    }
    else
    {
      long long v35 = 0;
      CMBlockBufferRef v16 = 0;
    }
    if (a3) {
      a3 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"X-Playback-Session-Id");
    }
    if (a6) {
      char v36 = 0;
    }
    else {
      char v36 = FigIsItOKToLogURLs() != 0;
    }
    long long v37 = (uint64_t *)(a1 + 32);
    FigReportingAgentCreate(a3, a4, v16, v35, a5, 2, v14, v36, (void *)(a1 + 32));
    if (dword_1E9350C50 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a1 = v50;
    }
    uint64_t v39 = *v37;
    if (*v37)
    {
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v41 = v40 ? v40 : 0;
      long long v42 = *(void (**)(uint64_t, void))(v41 + 104);
      if (v42) {
        v42(v39, 0);
      }
    }
    CFRelease(v14);
    if (v48) {
      CFRelease(v48);
    }
  }
  uint64_t v43 = (const void *)MGCopyAnswer();
  *(unsigned char *)(a1 + 40) = *MEMORY[0x1E4F1CFD0] == (void)v43;
  if (v43) {
    CFRelease(v43);
  }
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t CreatePlaylistFileParserFromData(OpaqueCMBlockBuffer *a1, uint64_t a2, CFArrayRef **a3)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v10 = 0;
    unsigned int v11 = &v10;
    uint64_t v12 = 0x2000000000;
    int v13 = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __pfp_ensureClientEstablished_block_invoke;
    block[3] = &unk_1E57930A8;
    block[4] = &v10;
    if (pfp_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce != -1) {
      dispatch_once(&pfp_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce, block);
    }
    uint64_t v5 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
    if (!v5)
    {
      if (xpc_dictionary_create(0, 0, 0))
      {
        uint64_t v6 = FigXPCMessageSetBlockBuffer();
        if (!v6)
        {
          uint64_t v6 = FigXPCMessageSetCFString();
          if (!v6)
          {
            uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!v6) {
              uint64_t v6 = FigXPCMessageCopyCFArray();
            }
          }
        }
      }
      else
      {
        uint64_t v6 = FigSignalErrorAt();
      }
      uint64_t v5 = v6;
    }
    FigXPCRelease();
    FigXPCRelease();
    if (!v5)
    {
      long long v7 = (CFArrayRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
      if (v7)
      {
        uint64_t v5 = 0;
        *long long v7 = 0;
        *a3 = v7;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v5;
  }
  else
  {
    return CreatePlaylistFileParserFromDataInProcess(a1, a3);
  }
}

uint64_t CreatePlaylistFileParserFromDataInProcess(OpaqueCMBlockBuffer *a1, CFArrayRef **a2)
{
  dispatch_queue_t v4 = (CFArrayRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v4)
  {
    return FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  if (!*v4)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *uint64_t v5 = Mutable;
    if (!Mutable)
    {
LABEL_24:
      uint64_t v15 = FigSignalErrorAt();
      if (v15) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
  }
  size_t v23 = 0;
  size_t v24 = 0;
  do
  {
    long long v7 = pfp_CopyLine(a1, v24, &v23, &v24);
    if (!v7)
    {
      unsigned int v11 = 0;
      uint64_t v15 = 4294951106;
      goto LABEL_43;
    }
    CFTypeID v8 = v7;
    int v9 = strcasecmp(v7, "[Playlist]");
    free(v8);
  }
  while (v9);
  uint64_t v10 = pfp_CopyLine(a1, v24, &v23, &v24);
  if (!v10)
  {
    int v12 = 0;
    int v13 = 0;
LABEL_20:
    if (v12 | v13 && *v5 && CFArrayGetCount(*v5) > 0) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  unsigned int v11 = v10;
  int v12 = 0;
  int v13 = 0;
  __endptr = 0;
  while (1)
  {
    if (!strncasecmp(v11, "NumberOfEntries=", 0x10uLL))
    {
      int v12 = 1;
      goto LABEL_17;
    }
    if (!strncasecmp(v11, "Version=", 8uLL))
    {
      int v13 = 1;
      goto LABEL_17;
    }
    if (!strncasecmp(v11, "File", 4uLL)) {
      break;
    }
LABEL_17:
    free(v11);
    unsigned int v11 = pfp_CopyLine(a1, v24, &v23, &v24);
    if (!v11) {
      goto LABEL_20;
    }
  }
  strtol(v11 + 4, &__endptr, 0);
  if (*__endptr == 61)
  {
    CFTypeRef URL = pfp_MakeURL((UInt8 *)__endptr + 1, v11 - (__endptr + 1) + v23);
    if (URL)
    {
      CFArrayAppendValue(*v5, URL);
      goto LABEL_17;
    }
  }
  uint64_t v15 = 4294951104;
LABEL_43:
  free(v11);
LABEL_25:
  if (*v5)
  {
    CFRelease(*v5);
    *uint64_t v5 = 0;
  }
  if (v15 == -16190)
  {
    size_t v24 = 0;
    __endptr = 0;
    CMBlockBufferRef v16 = pfp_CopyLine(a1, 0, &v24, &__endptr);
    if (v16)
    {
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v18 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (*v16 == 35 || (CFTypeRef v19 = pfp_MakeURL((UInt8 *)v16, v24)) == 0)
        {
          free(v16);
        }
        else
        {
          size_t v20 = v19;
          CFTypeID v21 = *v5;
          if (!*v5)
          {
            CFTypeID v21 = CFArrayCreateMutable(v17, 0, v18);
            *uint64_t v5 = v21;
            if (!v21)
            {
              FigSignalErrorAt();
              CFRelease(v20);
              break;
            }
          }
          CFArrayAppendValue(v21, v20);
          free(v16);
          CFRelease(v20);
        }
        CMBlockBufferRef v16 = pfp_CopyLine(a1, (size_t)__endptr, &v24, &__endptr);
      }
      while (v16);
    }
    free(v16);
    if (!*v5 || !CFArrayGetCount(*v5))
    {
      uint64_t v15 = 4294951106;
      goto LABEL_40;
    }
LABEL_23:
    uint64_t v15 = 0;
    *a2 = v5;
  }
  else
  {
LABEL_40:
    PlaylistFileParserDestroy((const void **)v5);
  }
  return v15;
}

CFArrayRef PlaylistFileParserItemCount(const __CFArray **a1)
{
  CFArrayRef result = *a1;
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t PlaylistFileParserCopyItem(CFArrayRef *a1, CFIndex idx, void *a3)
{
  CFArrayRef Count = *a1;
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*a1, idx);
    if (ValueAtIndex) {
      CFNumberRef ValueAtIndex = CFRetain(ValueAtIndex);
    }
    *a3 = ValueAtIndex;
    return 0;
  }
}

void PlaylistFileParserDestroy(const void **a1)
{
  if (a1)
  {
    CFDictionaryRef v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

uint64_t PlaylistFileParserServer()
{
  uint64_t v3 = 0;
  dispatch_queue_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __PlaylistFileParserServer_block_invoke;
  block[3] = &unk_1E5793080;
  block[4] = &v3;
  if (PlaylistFileParserServer_sFigPlaylistFileParserServerSetupOnce != -1) {
    dispatch_once(&PlaylistFileParserServer_sFigPlaylistFileParserServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __PlaylistFileParserServer_block_invoke(uint64_t a1)
{
  uint64_t result = FigXPCServerStart();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t pfp_replyingMessageHandler()
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  uint64_t v5 = 0;
  uint64_t BlockBufferDataWithSize = FigXPCMessageCreateBlockBufferDataWithSize();
  if (BlockBufferDataWithSize
    || (uint64_t BlockBufferDataWithSize = FigXPCMessageCopyCFString(), BlockBufferDataWithSize))
  {
    uint64_t v3 = BlockBufferDataWithSize;
    CFDictionaryRef v2 = 0;
  }
  else
  {
    uint64_t PlaylistFileParserFromDataInProcess = CreatePlaylistFileParserFromDataInProcess((OpaqueCMBlockBuffer *)cf, (CFArrayRef **)&v5);
    CFDictionaryRef v2 = (const void **)v5;
    if (!PlaylistFileParserFromDataInProcess) {
      uint64_t PlaylistFileParserFromDataInProcess = FigXPCMessageSetCFArray();
    }
    uint64_t v3 = PlaylistFileParserFromDataInProcess;
  }
  PlaylistFileParserDestroy(v2);
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v3;
}

char *pfp_CopyLine(OpaqueCMBlockBuffer *a1, size_t a2, size_t *a3, void *a4)
{
  size_t v6 = a2;
  CMBlockBufferRef v16 = 0;
  size_t lengthAtOffsetOut = 0;
  OSStatus DataPointer = CMBlockBufferGetDataPointer(a1, a2, &lengthAtOffsetOut, 0, &v16);
  uint64_t result = 0;
  if (!DataPointer)
  {
    size_t v10 = 0;
    do
    {
      size_t v11 = lengthAtOffsetOut;
      if (lengthAtOffsetOut)
      {
        int v12 = v16;
        do
        {
          int v14 = *v12++;
          int v13 = v14;
          if (v14 == 13 || v13 == 10)
          {
            if (v10) {
              goto LABEL_15;
            }
            ++v6;
          }
          else
          {
            ++v10;
          }
          --v11;
        }
        while (v11);
      }
    }
    while (!CMBlockBufferGetDataPointer(a1, v10 + v6, &lengthAtOffsetOut, 0, &v16));
    if (v10)
    {
LABEL_15:
      CMBlockBufferRef v16 = (char *)malloc_type_malloc(v10 + 1, 0xD93EFC75uLL);
      CMBlockBufferCopyDataBytes(a1, v6, v10, v16);
      v16[v10] = 0;
      *a3 = v10;
      *a4 = v6 + v10;
      return v16;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef pfp_MakeURL(UInt8 *URLBytes, uint64_t a2)
{
  uint64_t v3 = a2 - 1;
  uint64_t v4 = MEMORY[0x1E4F14390];
  do
  {
    if (v3 == -1) {
      return 0;
    }
    unsigned int v5 = (char)URLBytes[v3];
    if ((v5 & 0x80000000) != 0) {
      int v6 = __maskrune(v5, 0x4000uLL);
    }
    else {
      int v6 = *(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000;
    }
    --v3;
  }
  while (v6);
  CFURLRef v7 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLBytes, v3 + 2, 0x201u, 0);
  if (!v7) {
    return 0;
  }
  CFURLRef v8 = v7;
  if (CFURLCanBeDecomposed(v7))
  {
    CFStringRef v9 = CFURLGetString(v8);
    CFTypeRef v10 = CFRetain(v9);
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  CFRelease(v8);
  return v10;
}

void __pfp_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = Mutable;
    FigCFDictionarySetValue();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12786;
  }
}

uint64_t FigCascadingDownscaleCreate()
{
  return MEMORY[0x1F410D4E0]();
}

uint64_t FigCascadingDownscaleDestroy()
{
  return MEMORY[0x1F410D4E8]();
}

uint64_t FigCascadingDownscale()
{
  return MEMORY[0x1F410D4D8]();
}

CFTypeRef FigCopyUTITypesForFormatReaderIdentifier(CFTypeRef cf1)
{
  CFTypeRef v1 = cf1;
  CFDictionaryRef theDict = 0;
  if (!cf1) {
    return v1;
  }
  if (CFEqual(cf1, @"com.apple.coremedia.formatreader.quicktime-iso"))
  {
    CFDictionaryRef v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MooV</string>\t\t</array>\t\t<key>public.mime-type</"
         "key>\t\t<array>\t\t\t<string>video/quicktime</string>\t\t\t<string>video/mp4</string>\t\t</array>\t\t<key>publi"
         "c.filename-extension</key>\t\t<array>\t\t\t<string>mov</string>\t\t\t<string>qt</string>\t\t\t<string>qta</stri"
         "ng>\t\t\t<string>mqv</string>\t\t\t<string>mp4</string>\t\t\t<string>m4a</string>\t\t\t<string>m4v</string>\t\t"
         "\t<string>m4b</string>\t\t\t<string>m4p</string>\t\t\t<string>m4r</string>\t\t\t<string>aax</string>\t\t\t<stri"
         "ng>3gp</string>\t\t\t<string>3gpp</string>\t\t\t<string>3g2</string>\t\t\t<string>3gp2</string>\t\t\t<string>ai"
         "vu</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>com.apple.quicktime-movie</string>\t"
         "\t\t<string>com.apple.quicktime-audio</string>\t\t\t<string>public.mpeg-4</string>\t\t\t<string>public.mpeg-4-a"
         "udio</string>\t\t\t<string>com.apple.m4a-audio</string>\t\t\t<string>com.apple.protected-mpeg-4-audio</string>\t"
         "\t\t<string>com.apple.protected-mpeg-4-audio-b</string>\t\t\t<string>com.apple.m4v-video</string>\t\t\t<string>"
         "com.apple.mpeg-4-ringtone</string>\t\t\t<string>com.audible.aax-audiobook</string>\t\t\t<string>public.3gpp</st"
         "ring>\t\t\t<string>public.3gpp2</string>\t\t\t<string>com.apple.immersive-video</string>\t\t</array>\t</dict></dict></plist>";
  }
  else if (CFEqual(v1, @"com.apple.coremedia.formatreader.webvtt"))
  {
    CFDictionaryRef v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/vtt</string>\t\t</array>\t\t<key>public.filenam"
         "e-extension</key>\t\t<array>\t\t\t<string>vtt</string>\t\t\t<string>webvtt</string>\t\t</array>\t\t\t<key>com.a"
         "pple.uti</key>\t\t\t<array>\t\t\t\t<string>org.w3.webvtt</string>\t\t\t</array>\t</dict></dict></plist>";
  }
  else if (CFEqual(v1, @"com.apple.coremedia.formatreader.mpeg"))
  {
    CFDictionaryRef v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MPG2</string>\t\t\t<string>mMPG</string>           <"
         "string>m2ts</string>\t\t\t<string>MPEG</string>\t\t\t<string>MPG </string>\t\t</array>\t\t<key>public.mime-type"
         "</key>\t\t<array>\t\t\t<string>video/mpeg</string>\t\t\t<string>video/x-mpeg</string>\t\t\t<string>video/mpeg2<"
         "/string>\t\t\t<string>video/x-mpeg2</string>\t\t\t<string>video/mpg</string>\t\t\t<string>video/x-mpg</string>\t"
         "\t\t<string>video/mp2t</string>\t\t\t<string>video/mp2p</string>\t\t\t<string>video/x-mp2p</string>\t\t\t<strin"
         "g>video/mp1s</string>\t\t\t<string>video/x-mp1s</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t"
         "<array>\t\t\t<string>mpeg</string>\t\t\t<string>m2v</string>\t\t\t<string>mpe</string>\t\t\t<string>mpg</string"
         ">\t\t\t<string>mp2</string>\t\t\t<string>mod</string>\t\t\t<string>vob</string>\t\t\t<string>m2ts</string>\t\t\t"
         "<string>m2t</string>\t\t\t<string>ts</string>\t\t\t<string>mts</string>\t\t</array>\t\t<key>com.apple.uti</key>"
         "\t\t<array>\t\t\t<string>public.mpeg</string>\t\t\t<string>public.mp2</string>\t\t\t<string>public.mpeg-2-video"
         "</string>\t\t\t<string>public.mpeg-2-transport-stream</string>\t\t</array>\t</dict></dict></plist>";
  }
  else
  {
    if (!CFEqual(v1, @"com.apple.coremedia.formatreader.audiofilestream")) {
      goto LABEL_18;
    }
    CFDictionaryRef v2 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<string>MP3!</string>\t\t\t<strin"
         "g>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>a"
         "mr </string>\t\t\t<string>amrw</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audi"
         "o/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<string>audio/AMR-WB</string>\t\t\t<string>audio/aac</stri"
         "ng>\t\t\t<string>audio/flac</string>\t\t\t<string>audio/usac</string>\t\t</array>\t\t<key>public.filename-exten"
         "sion</key>\t\t<array>\t\t\t<string>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</string>\t\t\t<strin"
         "g>mpa</string>\t\t\t<string>mp2</string>\t\t\t<string>mp1</string>\t\t\t<string>aac</string>\t\t\t<string>adts<"
         "/string>\t\t\t<string>amr</string>\t\t\t<string>awb</string>\t\t\t<string>ac3</string>\t\t\t<string>ec3</string"
         ">\t\t\t<string>eac3</string>\t\t\t<string>flac</string>\t\t\t<string>latm</string>\t\t\t<string>loas</string>\t"
         "\t\t<string>xhe</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.mp3</string>\t\t"
         "\t<string>public.mp2</string>\t\t\t<string>public.aac-audio</string>\t\t\t<string>org.3gpp.adaptive-multi-rate-"
         "audio</string>\t\t\t<string>public.ac3-audio</string>\t\t\t<string>public.enhanced-ac3-audio</string>\t\t\t<str"
         "ing>org.xiph.flac</string>\t\t\t<string>public.mp4a-loas</string>\t\t</array>\t</dict></dict></plist>";
  }
  if (!FigFormatReaderCreatePropertyListDictionaryFromCString(v2, 0, &theDict))
  {
    if (!theDict) {
      return 0;
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ContainerLabelling");
    if (Value)
    {
      uint64_t v4 = CFDictionaryGetValue(Value, @"com.apple.uti");
      CFTypeRef v1 = v4;
      if (v4) {
        CFRetain(v4);
      }
      goto LABEL_15;
    }
  }
LABEL_18:
  CFTypeRef v1 = 0;
LABEL_15:
  if (theDict) {
    CFRelease(theDict);
  }
  return v1;
}

uint64_t FigFormatReaderCreatePropertyListDictionaryFromCString(char *__s, int a2, const __CFDictionary **a3)
{
  if (!a3) {
    return 0;
  }
  *a3 = 0;
  if (__s)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    size_t v7 = strlen(__s);
    CFDataRef v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__s, v7, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v8)
    {
      CFDataRef v9 = v8;
      CFDictionaryRef v10 = (const __CFDictionary *)CFPropertyListCreateWithData(v6, v8, 0, 0, 0);
      if (v10)
      {
        CFDictionaryRef v11 = v10;
        if (a2)
        {
          if (gFFREquivalentMIMETypes)
          {
            CFDictionaryGetValue(v10, @"ContainerLabelling");
            FigCFDictionaryGetValueIfPresent();
          }
        }
        uint64_t v12 = 0;
        *a3 = v11;
      }
      else
      {
        uint64_t v12 = FigSignalErrorAt();
      }
      CFRelease(v9);
      return v12;
    }
  }

  return FigSignalErrorAt();
}

void printRegisteredFormatReaders()
{
  if (gFFRRegistry)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)gFFRRegistry);
    if (Count >= 1)
    {
      CFIndex v1 = Count;
      for (CFIndex i = 0; i != v1; ++i)
      {
        CFArrayGetValueAtIndex((CFArrayRef)gFFRRegistry, i);
        CFMutableDictionaryRef v3 = (const void *)FigCFCopyCompactDescription();
        if (v3) {
          CFRelease(v3);
        }
      }
    }
  }
}

uint64_t FigCopySetOfFormatReaderSupportedFileExtensions(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4 = ensureRegistryInitialized();
  if (!v4) {
    *a2 = copySetOfRegistryEntryLabels(a1, @"public.filename-extension");
  }
  return v4;
}

__CFSet *copySetOfRegistryEntryLabels(const __CFAllocator *a1, const void *a2)
{
  CFMutableDictionaryRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F1D548]);
  if (CFArrayGetCount((CFArrayRef)gFFRRegistry) >= 1)
  {
    CFIndex v4 = 0;
    do
    {
      CFDictionaryRef v5 = (const __CFDictionary *)*((void *)CFArrayGetValueAtIndex((CFArrayRef)gFFRRegistry, v4) + 1);
      if (v5)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v5, a2);
        if (Value)
        {
          CFArrayRef v7 = Value;
          CFIndex Count = CFArrayGetCount(Value);
          if (Count >= 1)
          {
            unint64_t v9 = Count + 1;
            do
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v9 - 2);
              CFSetAddValue(Mutable, ValueAtIndex);
              --v9;
            }
            while (v9 > 1);
          }
        }
      }
      ++v4;
    }
    while (v4 < CFArrayGetCount((CFArrayRef)gFFRRegistry));
  }
  return Mutable;
}

const void *FigCopyQTMovieMIMETypes()
{
  CFDictionaryRef theDict = 0;
  ensureRegistryInitialized();
  FigFormatReaderCreatePropertyListDictionaryFromCString("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MooV</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>video/quicktime</string>\t\t\t<string>video/mp4</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>mov</string>\t\t\t<string>qt</string>\t\t\t<string>qta</string>\t\t\t<string>mqv</string>\t\t\t<string>mp4</string>\t\t\t<string>m4a</string>\t\t\t<string>m4v</string>\t\t\t<string>m4b</string>\t\t\t<string>m4p</string>\t\t\t<string>m4r</string>\t\t\t<string>aax</string>\t\t\t<string>3gp</string>\t\t\t<string>3gpp</string>\t\t\t<string>3g2</string>\t\t\t<string>3gp2</string>\t\t\t<string>aivu</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>com.apple.quicktime-movie</string>\t\t\t<string>com.apple.quicktime-audio</string>\t\t\t<string>public.mpeg-4</string>\t\t\t<string>public.mpeg-4-audio</string>\t\t\t<string>com.apple.m4a-audio</string>\t\t\t<string>com.apple.protected-mpeg-4-audio</string>\t\t\t<string>com.apple.protected-mpeg-4-audio-b</string>\t\t\t<string>com.apple.m4v-video</string>\t\t\t<string>com.apple.mpeg-4-ringtone</string>\t\t\t<string>com.audible.aax-audiobook</string>\t\t\t<string>public.3gpp</string>\t\t\t<string>public.3gpp2</string>\t\t\t<string>com.apple.immersive-video</string>\t\t</array>\t</dict></dict></plist>", 1, &theDict);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ContainerLabelling");
  CFIndex v1 = CFDictionaryGetValue(Value, @"public.mime-type");
  CFRetain(v1);
  if (theDict) {
    CFRelease(theDict);
  }
  return v1;
}

const void *FigCopyWebVTTMIMETypes()
{
  CFDictionaryRef theDict = 0;
  ensureRegistryInitialized();
  FigFormatReaderCreatePropertyListDictionaryFromCString("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/vtt</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>vtt</string>\t\t\t<string>webvtt</string>\t\t</array>\t\t\t<key>com.apple.uti</key>\t\t\t<array>\t\t\t\t<string>org.w3.webvtt</string>\t\t\t</array>\t</dict></dict></plist>", 1, &theDict);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ContainerLabelling");
  CFIndex v1 = CFDictionaryGetValue(Value, @"public.mime-type");
  CFRetain(v1);
  if (theDict) {
    CFRelease(theDict);
  }
  return v1;
}

void *FigCopyMPEGTransportStreamMIMETypes()
{
  CFArrayRef v0 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigRepresentativeMIMEType_MPEG2TS, 1, MEMORY[0x1E4F1D510]);
  ensureRegistryInitialized();
  CFGetAllocator(v0);
  CFMutableDictionaryRef MutableCopy = (void *)FigCFArrayCreateMutableCopy();
  v3.length = CFArrayGetCount(v0);
  v3.locatioCFIndex n = 0;
  CFArrayApplyFunction(v0, v3, (CFArrayApplierFunction)FFRExpandRepresentativeMIMETypes, MutableCopy);
  if (v0) {
    CFRelease(v0);
  }
  return MutableCopy;
}

void FFRExpandRepresentativeMIMETypes(const void *a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      if (gFFREquivalentMIMETypes)
      {
        CFTypeID v4 = CFGetTypeID(a1);
        if (v4 == CFStringGetTypeID())
        {
          CMTime value = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gFFREquivalentMIMETypes, a1, (const void **)&value))
          {
            if (value)
            {
              CFTypeID v5 = CFGetTypeID(value);
              if (v5 == CFArrayGetTypeID())
              {
                CFArrayRef v6 = (const __CFArray *)value;
                v8.length = CFArrayGetCount((CFArrayRef)value);
                v8.locatioCFIndex n = 0;
                CFArrayApplyFunction(v6, v8, (CFArrayApplierFunction)FFRAddMIMETypeIfAbsent, a2);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t FigCopySetOfFormatReaderSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4 = ensureRegistryInitialized();
  if (!v4) {
    *a2 = copySetOfRegistryEntryLabels(a1, @"public.mime-type");
  }
  return v4;
}

uint64_t FigCopySetOfFormatReaderSupportedFileTypes(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4 = ensureRegistryInitialized();
  if (!v4) {
    *a2 = copySetOfRegistryEntryLabels(a1, @"com.apple.ostype");
  }
  return v4;
}

uint64_t FigCopySetOfFormatReaderSupportedUTIs(const __CFAllocator *a1, __CFSet **a2)
{
  uint64_t v4 = ensureRegistryInitialized();
  if (!v4) {
    *a2 = copySetOfRegistryEntryLabels(a1, @"com.apple.uti");
  }
  return v4;
}

uint64_t FigFormatReaderCreateForStreamReturningResults(uint64_t a1, const __CFDictionary *a2, const __CFAllocator *a3, uint64_t a4, CFTypeRef *a5, CFTypeRef *a6, _DWORD *a7, CFTypeRef *a8)
{
  *(_OWORD *)unsigned int v45 = 0u;
  *(_OWORD *)int v46 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  uint64_t v16 = ensureRegistryInitialized();
  if (v16) {
    goto LABEL_56;
  }
  if (a2)
  {
    uint64_t v17 = a4;
    CFDictionaryRef Value = CFDictionaryGetValue(a2, @"Selection_OutOfBandMIMEType");
    CFTypeRef v19 = CFDictionaryGetValue(a2, @"Selection_OutOfBandFileType");
    CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(a2, @"Selection_AllowableTypes");
    CFArrayRef v21 = v20;
    if (Value)
    {
      AttemptMIMETypeInstantiation((uint64_t)a3, a1, v17, Value, v20, (uint64_t)cf);
      goto LABEL_37;
    }
    if (v19)
    {
      uint64_t v25 = (uint64_t)a3;
      uint64_t v26 = a1;
      uint64_t v27 = v17;
      CFTypeID v28 = v19;
LABEL_10:
      AttemptUTIInstantiation(v25, v26, v27, v28, v21, (uint64_t)cf);
      goto LABEL_37;
    }
    CFArrayRef v43 = v20;
    a4 = v17;
  }
  else
  {
    CFArrayRef v43 = 0;
  }
  anCFTypeRef URL = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  Boolean v29 = *(void (**)(uint64_t, void, const __CFAllocator *, CFURLRef *))(v24 + 48);
  if (v29)
  {
    v29(CMBaseObject, *MEMORY[0x1E4F1EC78], a3, &anURL);
    if (anURL)
    {
      CFStringRef v30 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
      if (v30)
      {
        CFStringRef v31 = v30;
        CFRange v32 = CFStringFind(v30, @".", 4uLL);
        if (v32.length >= 1)
        {
          v49.length = CFStringGetLength(v31) + ~v32.location;
          v49.locatioCFIndex n = v32.location + 1;
          CFStringRef v33 = CFStringCreateWithSubstring(a3, v31, v49);
          if (v33)
          {
            CFStringRef v34 = v33;
            AttemptInstantiationForMatchingLabel(a1, a4, @"public.filename-extension", 0, v33, 1, v43, (uint64_t)cf);
            CFRelease(v34);
          }
        }
        CFRelease(v31);
      }
      if (anURL) {
        CFRelease(anURL);
      }
    }
  }
  if (!v45[1])
  {
    anCFTypeRef URL = 0;
    uint64_t v35 = CMByteStreamGetCMBaseObject();
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    CFArrayRef v38 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFURLRef *))(v37 + 48);
    if (v38 && !v38(v35, *MEMORY[0x1E4F1FB40], a3, &anURL))
    {
      int valuePtr = 0;
      CFNumberGetValue(anURL, kCFNumberSInt32Type, &valuePtr);
      CFStringRef v39 = CFStringCreateWithBytes(a3, (const UInt8 *)&valuePtr, 4, 0, 0);
      if (v39)
      {
        AttemptInstantiationForMatchingLabel(a1, a4, @"com.apple.ostype", 1, v39, 0, v43, (uint64_t)cf);
        char v40 = 0;
LABEL_30:
        if (anURL) {
          CFRelease(anURL);
        }
        if ((v40 & 1) == 0) {
          CFRelease(v39);
        }
        if (!v45[1])
        {
          AttemptMIMETypeInstantiation((uint64_t)a3, a1, a4, 0, v43, (uint64_t)cf);
          if (!v45[1])
          {
            AttemptSuggestedFileNameInstantiation(a3, a1, a4, v43, (uint64_t)cf);
            if (!v45[1])
            {
              uint64_t v25 = (uint64_t)a3;
              uint64_t v26 = a1;
              uint64_t v27 = a4;
              CFTypeID v28 = 0;
              CFArrayRef v21 = v43;
              goto LABEL_10;
            }
          }
        }
        goto LABEL_37;
      }
    }
    else
    {
      CFStringRef v39 = 0;
    }
    char v40 = 1;
    goto LABEL_30;
  }
LABEL_37:
  if (LODWORD(v45[0]) || !v45[1])
  {
    uint64_t v16 = FigSignalErrorAt();
LABEL_56:
    uint64_t v41 = v16;
    goto LABEL_43;
  }
  *a5 = v45[1];
  v45[1] = 0;
  if (a7) {
    *a7 = v46[1];
  }
  uint64_t v41 = 0;
  if (a6)
  {
    *a6 = v46[0];
    v46[0] = 0;
  }
LABEL_43:
  if (a8)
  {
    *a8 = cf[0];
  }
  else if (cf[0])
  {
    CFRelease(cf[0]);
  }
  if (v45[1]) {
    CFRelease(v45[1]);
  }
  if (v46[0]) {
    CFRelease(v46[0]);
  }
  return v41;
}

void AttemptMIMETypeInstantiation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf, const __CFArray *a5, uint64_t a6)
{
  if (cf)
  {
    CFStringRef v11 = (const __CFString *)CFRetain(cf);
    CFTypeRef cfa = v11;
    if (v11)
    {
LABEL_10:
      AttemptInstantiationForMatchingLabel(a2, a3, @"public.mime-type", 2, v11, 1, a5, a6);
      if (cfa) {
        CFRelease(cfa);
      }
      return;
    }
  }
  else
  {
    CFTypeRef cfa = 0;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
  if (v15)
  {
    v15(CMBaseObject, *MEMORY[0x1E4F1FB58], a1, &cfa);
    CFStringRef v11 = (const __CFString *)cfa;
    if (cfa) {
      goto LABEL_10;
    }
  }
}

void AttemptUTIInstantiation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf, const __CFArray *a5, uint64_t a6)
{
  if (cf)
  {
    CFStringRef v11 = (const __CFString *)CFRetain(cf);
    CFTypeRef cfa = v11;
    if (v11)
    {
LABEL_10:
      AttemptInstantiationForMatchingLabel(a2, a3, @"com.apple.uti", 4, v11, 1, a5, a6);
      if (cfa) {
        CFRelease(cfa);
      }
      return;
    }
  }
  else
  {
    CFTypeRef cfa = 0;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
  if (v15)
  {
    v15(CMBaseObject, *MEMORY[0x1E4F1FBA8], a1, &cfa);
    CFStringRef v11 = (const __CFString *)cfa;
    if (cfa) {
      goto LABEL_10;
    }
  }
}

void AttemptSuggestedFileNameInstantiation(const __CFAllocator *a1, uint64_t a2, uint64_t a3, const __CFArray *a4, uint64_t a5)
{
  CFStringRef theString = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, void, const __CFAllocator *, CFStringRef *))(v12 + 48);
  if (v13)
  {
    v13(CMBaseObject, *MEMORY[0x1E4F1FBA0], a1, &theString);
    if (theString)
    {
      CFRange v14 = CFStringFind(theString, @".", 4uLL);
      if (v14.length >= 1)
      {
        v18.length = CFStringGetLength(theString) + ~v14.location;
        v18.locatioCFIndex n = v14.location + 1;
        CFStringRef v15 = CFStringCreateWithSubstring(a1, theString, v18);
        if (v15)
        {
          CFStringRef v16 = v15;
          AttemptInstantiationForMatchingLabel(a2, a3, @"public.filename-extension", 3, v15, 1, a4, a5);
          CFRelease(v16);
        }
      }
      if (theString) {
        CFRelease(theString);
      }
    }
  }
}

uint64_t FigFormatReaderCreateForStreamReturningMatchingContainerLabel(uint64_t a1, const __CFDictionary *a2, const __CFAllocator *a3, uint64_t a4, CFTypeRef *a5, CFTypeRef *a6, _DWORD *a7)
{
  return FigFormatReaderCreateForStreamReturningResults(a1, a2, a3, a4, a5, a6, a7, 0);
}

__CFString *FigGetNotifyingObjectForSupportedFormatsChanged()
{
  if (FigGetNotifyingObjectForSupportedFormatsChanged_onceToken != -1) {
    dispatch_once_f(&FigGetNotifyingObjectForSupportedFormatsChanged_onceToken, 0, (dispatch_function_t)registerSupportedFormatsChangedNotificationBarrierOnce);
  }
  return @"SupportedFormatChanged";
}

uint64_t registerSupportedFormatsChangedNotificationBarrierOnce()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterRegisterForBarrierSupport();
}

uint64_t FigFormatReaderGetTypeID()
{
  MEMORY[0x19970EE10](&FigFormatReaderGetClassID_sRegisterFigFormatReaderOnce, RegisterFigFormatReader);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigFormatReaderUtilityCopyRepresentativeMIMETypeForMIMEType(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    if (ensureRegistryInitialized()) {
      return 0;
    }
    CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v1);
    CFStringLowercase(MutableCopy, 0);
    uint64_t v4 = MutableCopy;
    CFTypeRef cf = 0;
    CFDictionaryApplyFunction((CFDictionaryRef)gFFREquivalentMIMETypes, (CFDictionaryApplierFunction)FFRFindRepresentativeMIMEType, &v4);
    CFTypeRef v3 = cf;
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (!v3) {
      return 0;
    }
    else {
      return (const __CFString *)CFRetain(v3);
    }
  }
  return result;
}

uint64_t FFRFindRepresentativeMIMEType(uint64_t result, CFTypeRef cf, uint64_t a3)
{
  if (cf)
  {
    if (!*(void *)(a3 + 8))
    {
      uint64_t v5 = result;
      CFTypeID v6 = CFGetTypeID(cf);
      uint64_t result = CFArrayGetTypeID();
      if (v6 == result)
      {
        v7.length = CFArrayGetCount((CFArrayRef)cf);
        v7.locatioCFIndex n = 0;
        uint64_t result = CFArrayContainsValue((CFArrayRef)cf, v7, *(const void **)a3);
        if (result) {
          *(void *)(a3 + 8) = v5;
        }
      }
    }
  }
  return result;
}

uint64_t FigFormatReaderUtilityConvertCodecElementsToMediaSubType(uint64_t a1, int a2, char *a3, uint64_t a4, _DWORD *a5, int *a6, int *a7)
{
  if (FigCFEqual())
  {
    return AVIFormatReaderConvertCodecElementsToMediaSubType(a2, a3, a4, a5, a6, a7);
  }
  if (FigCFEqual())
  {
    int v14 = 1463899717;
LABEL_13:
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(v14, a2, a3, a4, a5, a6, a7);
  }
  if (FigCFEqual())
  {
    int v14 = 1095321155;
    goto LABEL_13;
  }
  if (FigCFEqual())
  {
    int v14 = 1667327590;
    goto LABEL_13;
  }
  if (FigCFEqual())
  {
    int v14 = 1297106739;
    goto LABEL_13;
  }
  if (a7) {
    *a7 = 1;
  }
  return 0;
}

uint64_t FigFormatReaderUtilityEstablishCombinedDataRateProfileForTracks(uint64_t a1, const __CFArray *a2, void *a3, uint64_t a4, CMTime *a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (*(void *)(v11 + 72))
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFStringRef v15 = *(uint64_t (**)(uint64_t, const __CFArray *, void *, uint64_t, CMTime *))(v13 + 72);
    if (v15)
    {
      return v15(a1, a2, a3, a4, a5);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigFormatReaderUtilityEstablishCombinedDataRateProfileForTracksCommon(a1, a2, a3, a4, a5);
  }
}

uint64_t FigFormatReaderUtilityEstablishCombinedDataRateProfileForTracksCommon(uint64_t a1, const __CFArray *a2, void *a3, unsigned int a4, CMTime *a5)
{
  CFTypeRef v89 = 0;
  v90[0] = 0;
  CFTypeRef v88 = 0;
  *(_OWORD *)&v87.CMTime value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v87.CMTimeEpoch epoch = v5;
  long long v72 = *(_OWORD *)&v87.value;
  *(_OWORD *)&v86.CMTime value = *(_OWORD *)&v87.value;
  v86.CMTimeEpoch epoch = v5;
  if (!a1) {
    goto LABEL_101;
  }
  CFArrayRef v6 = a2;
  if (!a2 || !a3) {
    goto LABEL_101;
  }
  uint64_t Duration = FigFormatReaderUtilityGetDuration(a1, 1, &v87);
  if (Duration) {
    goto LABEL_102;
  }
  uint64_t v12 = (CMTime *)MEMORY[0x1E4F1FA48];
  if ((v87.flags & 0x1D) != 1
    || (CMTime time1 = v87,
        long long v73 = *MEMORY[0x1E4F1FA48],
        *(_OWORD *)&time2.CMTime value = *MEMORY[0x1E4F1FA48],
        CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1FA48] + 16),
        time2.CMTimeEpoch epoch = v13,
        CMTimeCompare(&time1, &time2) < 1))
  {
    CMTime v86 = *v12;
    goto LABEL_101;
  }
  CMTime time1 = v87;
  CMTimeMultiplyByFloat64(&v86, &time1, 1.0 / (double)a4);
  bzero(a3, 8 * a4);
  CFIndex Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v15 = Count;
    uint64_t v16 = 0;
LABEL_9:
    unsigned int v83 = 0;
    *(_OWORD *)&time1.CMTime value = v73;
    time1.CMTimeEpoch epoch = v13;
    uint64_t v71 = v16;
    if (FigCFArrayGetInt32AtIndex())
    {
      uint64_t v17 = v83;
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      CFArrayRef v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v19 + 56);
      if (!v20) {
        goto LABEL_103;
      }
      uint64_t Duration = v20(a1, v17, v90, 0);
      if (Duration) {
        goto LABEL_102;
      }
      CFTypeRef v21 = v90[0];
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v23 = v22 ? v22 : 0;
      uint64_t v24 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v23 + 32);
      if (!v24) {
        goto LABEL_103;
      }
      uint64_t Duration = v24(v21, &v89);
      if (Duration) {
        goto LABEL_102;
      }
      CFTypeRef v25 = v89;
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v27 = v26 ? v26 : 0;
      CFTypeID v28 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v27 + 24);
      if (!v28)
      {
LABEL_103:
        uint64_t v66 = 4294954514;
        goto LABEL_104;
      }
      CFIndex v68 = v15;
      CFArrayRef v69 = v6;
      uint64_t v70 = a5;
      uint64_t Duration = v28(v25, &v88);
      if (!Duration)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        while (1)
        {
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          *(void *)multiplier = 0;
          __int16 v79 = 0;
          *(_OWORD *)&time2.CMTime value = v72;
          time2.CMTimeEpoch epoch = v5;
          CFTypeRef v31 = v88;
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v33 = v32 ? v32 : 0;
          CFStringRef v34 = *(uint64_t (**)(CFTypeRef, void, void, void, uint64_t *, int32_t *, void, char *, __int16 *, void))(v33 + 152);
          if (!v34) {
            goto LABEL_103;
          }
          uint64_t Duration = v34(v31, 0, 0, 0, &v82, multiplier, 0, (char *)&v79 + 1, &v79, 0);
          if (Duration) {
            break;
          }
          if ((_BYTE)v79)
          {
            CFTypeRef v35 = v88;
            uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v36) {
              uint64_t v37 = v36;
            }
            else {
              uint64_t v37 = 0;
            }
            CFIndex v57 = *(uint64_t (**)(CFTypeRef, CMTime *))(v37 + 56);
            if (!v57) {
              goto LABEL_103;
            }
            uint64_t Duration = v57(v35, &time2);
            if (Duration) {
              break;
            }
            CMTime time = time2;
            CMTimeMultiply(&v78, &time, multiplier[0]);
            CMTime time = time1;
            CMTimeAdd(&time1, &time, &v78);
            v30 += v82;
            CMTime time = v86;
            double Seconds = CMTimeGetSeconds(&time);
            CMTime time = time1;
            double v59 = CMTimeGetSeconds(&time);
            CMTime time = time1;
            CMTime lhs = v86;
            if ((CMTimeCompare(&time, &lhs) & 0x80000000) == 0)
            {
              unint64_t v60 = (unint64_t)(Seconds * (double)v30 / v59);
              do
              {
                *((void *)a3 + v29) += v60;
                CMTime lhs = time1;
                CMTime rhs = v86;
                CMTimeSubtract(&time, &lhs, &rhs);
                CMTime time1 = time;
                v30 -= v60;
                if (v29 + 1 >= a4)
                {
                  *((void *)a3 + v29) += v30;
                  *(_OWORD *)&time1.CMTime value = v73;
                  time1.CMTimeEpoch epoch = v13;
                  unint64_t v30 = 0;
                }
                else
                {
                  ++v29;
                }
                CMTime time = time1;
                CMTime lhs = v86;
              }
              while ((CMTimeCompare(&time, &lhs) & 0x80000000) == 0);
            }
            int v56 = 0;
          }
          else
          {
            uint64_t v74 = 0;
            if (*(uint64_t *)multiplier >= 1)
            {
              uint64_t v38 = 0;
              while (1)
              {
                CFTypeRef v39 = v88;
                uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v41 = v40 ? v40 : 0;
                long long v42 = *(uint64_t (**)(CFTypeRef, CMTime *))(v41 + 56);
                if (!v42) {
                  goto LABEL_103;
                }
                uint64_t Duration = v42(v39, &time2);
                if (Duration) {
                  goto LABEL_102;
                }
                if (!v38 || !HIBYTE(v79))
                {
                  CFTypeRef v43 = v88;
                  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v44) {
                    uint64_t v45 = v44;
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  int v46 = *(uint64_t (**)(CFTypeRef, void, uint64_t *, void, void))(v45 + 144);
                  if (!v46) {
                    goto LABEL_103;
                  }
                  uint64_t Duration = v46(v43, 0, &v74, 0, 0);
                  if (Duration) {
                    goto LABEL_102;
                  }
                }
                CMTime lhs = time1;
                CMTime rhs = time2;
                CMTimeAdd(&time, &lhs, &rhs);
                CMTime time1 = time;
                v30 += v74;
                CMTime time = v86;
                double v47 = CMTimeGetSeconds(&time);
                CMTime time = time1;
                double v48 = CMTimeGetSeconds(&time);
                CMTime time = time1;
                CMTime lhs = v86;
                if (CMTimeCompare(&time, &lhs) >= 1)
                {
                  unint64_t v49 = (unint64_t)(v47 * (double)v30 / v48);
                  do
                  {
                    *((void *)a3 + v29) += v49;
                    CMTime lhs = time1;
                    CMTime rhs = v86;
                    CMTimeSubtract(&time, &lhs, &rhs);
                    CMTime time1 = time;
                    v30 -= v49;
                    if (v29 + 1 >= a4)
                    {
                      *((void *)a3 + v29) += v30;
                      *(_OWORD *)&time1.CMTime value = v73;
                      time1.CMTimeEpoch epoch = v13;
                      unint64_t v30 = 0;
                    }
                    else
                    {
                      ++v29;
                    }
                    CMTime time = time1;
                    CMTime lhs = v86;
                  }
                  while (CMTimeCompare(&time, &lhs) > 0);
                }
                CFTypeRef v50 = v88;
                uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v51) {
                  uint64_t v52 = v51;
                }
                else {
                  uint64_t v52 = 0;
                }
                int v53 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v52 + 168);
                if (v53) {
                  int v54 = v53(v50, 1, &v81);
                }
                else {
                  int v54 = -12782;
                }
                if (v81 != 1 && v54 == 0) {
                  int v56 = -12840;
                }
                else {
                  int v56 = v54;
                }
                if (++v38 >= *(uint64_t *)multiplier || v56) {
                  goto LABEL_80;
                }
              }
            }
            int v56 = 0;
LABEL_80:
            *(void *)multiplier = 0;
          }
          int32_t v61 = multiplier[0];
          if (*(uint64_t *)multiplier < 1 || v56)
          {
            if (v56) {
              goto LABEL_91;
            }
          }
          else
          {
            CFTypeRef v62 = v88;
            uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v63) {
              uint64_t v64 = v63;
            }
            else {
              uint64_t v64 = 0;
            }
            CFIndex v65 = *(unsigned int (**)(CFTypeRef, void, uint64_t *))(v64 + 168);
            if (!v65 || v65(v62, v61, &v81) || v81 != *(void *)multiplier)
            {
LABEL_91:
              if (v88)
              {
                CFRelease(v88);
                CFTypeRef v88 = 0;
              }
              CFArrayRef v6 = v69;
              a5 = v70;
              CFIndex v15 = v68;
              if (v89)
              {
                CFRelease(v89);
                CFTypeRef v89 = 0;
              }
              if (v90[0])
              {
                CFRelease(v90[0]);
                v90[0] = 0;
              }
              uint64_t v16 = v71 + 1;
              if (v71 + 1 != v68) {
                goto LABEL_9;
              }
              goto LABEL_98;
            }
          }
        }
      }
LABEL_102:
      uint64_t v66 = Duration;
      goto LABEL_104;
    }
LABEL_101:
    uint64_t Duration = FigSignalErrorAt();
    goto LABEL_102;
  }
LABEL_98:
  uint64_t v66 = 0;
  if (a5) {
    *a5 = v86;
  }
LABEL_104:
  if (v88) {
    CFRelease(v88);
  }
  if (v89) {
    CFRelease(v89);
  }
  if (v90[0]) {
    CFRelease(v90[0]);
  }
  return v66;
}

uint64_t FigFormatReaderUtilityGetDuration(uint64_t a1, int a2, CMTime *a3)
{
  CMTime v21 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  dictionaryRepresentatioCFIndex n = 0;
  CFBooleanRef BOOLean = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFRange v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v7 + 48);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  uint64_t v10 = v8(a1, @"AccurateDurationIsKnown", *MEMORY[0x1E4F1CF80], &BOOLean);
  if (v10) {
    goto LABEL_30;
  }
  if (CFBooleanGetValue(BOOLean))
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFIndex v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v12 + 48);
    if (v15)
    {
      uint64_t v16 = kFigFormatReaderProperty_NominalDuration;
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v17 = 4294954514;
    if (!a3) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!a2)
  {
    uint64_t v17 = 4294949523;
    if (!a3) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFIndex v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v14 + 48);
  if (!v15) {
    goto LABEL_23;
  }
  uint64_t v16 = kFigFormatReaderProperty_EstimatedDuration;
LABEL_20:
  uint64_t v10 = v15(a1, *v16, v9, &dictionaryRepresentation);
  if (!v10)
  {
    CMTimeMakeFromDictionary(&v21, dictionaryRepresentation);
    uint64_t v17 = 0;
    if (!a3) {
      goto LABEL_25;
    }
LABEL_24:
    *a3 = v21;
    goto LABEL_25;
  }
LABEL_30:
  uint64_t v17 = v10;
  if (a3) {
    goto LABEL_24;
  }
LABEL_25:
  if (dictionaryRepresentation) {
    CFRelease(dictionaryRepresentation);
  }
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  return v17;
}

uint64_t RegisterStaticFormatReader(char *a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t v3 = FigFormatReaderCreatePropertyListDictionaryFromCString(a1, 1, &theDict);
  if (v3) {
    goto LABEL_10;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"ContainerLabelling");
  CMTimeEpoch v5 = malloc_type_calloc(1uLL, 0x18uLL, 0xF00404EBE86FAuLL);
  if (!v5)
  {
    uint64_t v3 = FigSignalErrorAt();
LABEL_10:
    uint64_t v7 = v3;
    goto LABEL_6;
  }
  uint64_t v6 = v5;
  *CMTimeEpoch v5 = a2;
  v5[1] = Value;
  if (Value) {
    CFRetain(Value);
  }
  v6[2] = 0;
  CFArrayAppendValue((CFMutableArrayRef)gFFRRegistry, v6);
  uint64_t v7 = 0;
LABEL_6:
  if (theDict) {
    CFRelease(theDict);
  }
  return v7;
}

uint64_t InstantiateMovieFormatReader(const void *a1, uint64_t a2, const __CFAllocator *a3, const __CFDictionary *a4, void *a5)
{
  return QTMovieFormatReaderCreateFromStream(a1, a3, a4, a5);
}

uint64_t InstantiateAVIFormatReader(const void *a1, uint64_t a2, const __CFAllocator *a3, uint64_t a4, void *a5, void *a6)
{
  if (a6) {
    *a6 = 0;
  }
  return AVIFormatReaderCreateFromStream(a1, a3, a5);
}

uint64_t InstantiateAudioFileFormatReader(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  if (a6) {
    *a6 = 0;
  }
  return FigAudioFileFormatReaderCreateFromStream(a1, a3, a4, a5);
}

uint64_t InstantiateAudioFileStreamFormatReader(const void *a1, int a2, uint64_t a3, CFDictionaryRef theDict, void *a5, void *a6)
{
  if (!theDict)
  {
    uint64_t v12 = FigAudioFileStreamFormatReaderCreateFromStream;
    if (!a6) {
      return v12(a1, a3, (uint64_t)theDict, a5);
    }
    goto LABEL_8;
  }
  CMTime value = 0;
  int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"Instantiation_PreferPreciseDurationAndTiming", (const void **)&value);
  uint64_t v12 = FigAudioFileStreamFormatReaderCreateFromStream;
  if (value == (void *)*MEMORY[0x1E4F1CFD0]) {
    uint64_t v13 = FigAudioFileFormatReaderCreateFromStream;
  }
  else {
    uint64_t v13 = FigAudioFileStreamFormatReaderCreateFromStream;
  }
  if (ValueIfPresent) {
    uint64_t v12 = v13;
  }
  if (a6) {
LABEL_8:
  }
    *a6 = 0;
  return v12(a1, a3, (uint64_t)theDict, a5);
}

uint64_t InstantiateWebVTTFormatReader(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  if (a6) {
    *a6 = 0;
  }
  return FigWebVTTFormatReaderCreateFromStream(a1, a3, a5);
}

uint64_t InstantiateSCCFormatReader(const void *a1, uint64_t a2, const void *a3, uint64_t a4, void *a5, void *a6)
{
  return FigSCCFormatReaderCreateFromStream(a1, a3, a4, a5, a6);
}

uint64_t InstantiateTTMLFormatReader(uint64_t a1, int a2, const __CFAllocator *a3, int a4, CFTypeRef *a5, void *a6)
{
  if (a6) {
    *a6 = 0;
  }
  return FigTTMLFormatReaderCreateFromStream(a1, a4, a3, a5);
}

void FFRAddMIMETypeIfAbsent(const void *a1, const __CFArray *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      v6.length = CFArrayGetCount(a2);
      v6.locatioCFIndex n = 0;
      if (!CFArrayContainsValue(a2, v6, a1))
      {
        CFArrayAppendValue(a2, a1);
      }
    }
  }
}

void AttemptInstantiationForMatchingLabel(uint64_t a1, uint64_t a2, const void *a3, int a4, const __CFString *a5, int a6, const __CFArray *a7, uint64_t a8)
{
  CFTypeRef cf = 0;
  p_cache = FigDisplayMirroringChangeObserver.cache;
  if (CFArrayGetCount((CFArrayRef)gFFRRegistry) < 1) {
    goto LABEL_37;
  }
  uint64_t v10 = 0;
  uint64_t v34 = *MEMORY[0x1E4F1CF80];
  do
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)p_cache[203], v10);
    CFDictionaryRef v11 = (const __CFDictionary *)*((void *)ValueAtIndex + 1);
    if (!v11
      || (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v11, a3)) == 0
      || (v13 = Value, CFIndex Count = CFArrayGetCount(Value), Count < 1))
    {
LABEL_22:
      ++v10;
      p_cache = (void **)(FigDisplayMirroringChangeObserver + 16);
      continue;
    }
    uint64_t v15 = Count;
    while (1)
    {
      CFStringRef v16 = (const __CFString *)CFArrayGetValueAtIndex(v13, v15 - 1);
      if (a6)
      {
        if (CFStringCompare(v16, a5, 1uLL)) {
          goto LABEL_20;
        }
      }
      else if (!CFEqual(v16, a5))
      {
        goto LABEL_20;
      }
      if (!a7) {
        goto LABEL_23;
      }
      CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(*((CFDictionaryRef *)ValueAtIndex + 1), @"com.apple.uti");
      if (v17)
      {
        CFArrayRef v18 = v17;
        CFIndex v19 = CFArrayGetCount(v17);
        CFIndex v20 = CFArrayGetCount(a7);
        CFIndex v39 = v19;
        if (v19 >= 1) {
          break;
        }
      }
LABEL_20:
      if (v15-- <= 1) {
        goto LABEL_22;
      }
    }
    uint64_t v21 = v20;
    CFIndex v22 = 0;
    while (1)
    {
      uint64_t v23 = CFArrayGetValueAtIndex(v18, v22);
      if (v21 >= 1) {
        break;
      }
LABEL_19:
      if (++v22 == v39) {
        goto LABEL_20;
      }
    }
    uint64_t v24 = v23;
    CFIndex v25 = 0;
    while (1)
    {
      uint64_t v26 = CFArrayGetValueAtIndex(a7, v25);
      if (CFEqual(v24, v26)) {
        break;
      }
      if (v21 == ++v25) {
        goto LABEL_19;
      }
    }
LABEL_23:
    p_cache = FigDisplayMirroringChangeObserver.cache;
    if (!ValueAtIndex) {
      break;
    }
    if (*(const void **)(a8 + 8) == ValueAtIndex) {
      goto LABEL_33;
    }
    uint64_t v43 = 0;
    int v28 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t *, CFTypeRef *))ValueAtIndex)(a1, *((void *)ValueAtIndex + 2), v34, a2, &v43, &cf);
    if (!v28)
    {
      *(void *)(a8 + 24) = v43;
      *(void *)(a8 + 32) = CFRetain(a5);
      *(_DWORD *)(a8 + 40) = a4;
      CFTypeRef v31 = *(const void **)a8;
      CFTypeRef v32 = cf;
      *(void *)a8 = cf;
      if (v32) {
        CFRetain(v32);
      }
      if (v31) {
        CFRelease(v31);
      }
      *(void *)(a8 + 8) = 0;
      *(_DWORD *)(a8 + 16) = 0;
      break;
    }
    if (!*(void *)(a8 + 8))
    {
      *(_DWORD *)(a8 + 16) = v28;
      uint64_t v29 = *(const void **)a8;
      CFTypeRef v30 = cf;
      *(void *)a8 = cf;
      *(void *)(a8 + 8) = ValueAtIndex;
      if (v30) {
        CFRetain(v30);
      }
      if (v29) {
        CFRelease(v29);
      }
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
LABEL_33:
    if (v10 >= 0) {
      ++v10;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  while (v10 < CFArrayGetCount((CFArrayRef)p_cache[203]));
LABEL_37:
  if (cf) {
    CFRelease(cf);
  }
}

CFStringRef FigFormatReaderBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigFormatReader %p]", a1);
}

void audioMentorPrerollSampleNotImmediatelyAvailable(uint64_t a1, uint64_t a2)
{
}

uint64_t AudioMentorSetModeToReversePlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, const void *a7, const void *a8)
{
  long long v11 = *(_OWORD *)a3;
  uint64_t v12 = *(void *)(a3 + 16);
  long long v9 = *(_OWORD *)a5;
  uint64_t v10 = *(void *)(a5 + 16);
  return audioMentorSetModeToForwardOrReversePlayback(a1, a2, &v11, a4, &v9, a6, a7, a8, 2);
}

uint64_t AudioMentorSetModeToEmptyEdit(uint64_t a1, const void *a2, const __CFDictionary *a3, const void *a4, const void *a5)
{
  int PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a3);
  unsigned int v11 = audioMentorGetModeChangePolicy(a3);
  if (v11) {
    BOOL ShouldSynchronouslyResetOutput = audioMentorShouldSynchronouslyResetOutput(a3);
  }
  else {
    BOOL ShouldSynchronouslyResetOutput = 0;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 96));
  if (!*(unsigned char *)a1)
  {
    *(_DWORD *)(a1 + 192) = PolicyFromPrerollPolicy;
    *(_DWORD *)(a1 + 196) = v11;
    *(unsigned char *)(a1 + 238) = ShouldSynchronouslyResetOutput;
    CFArrayRef v13 = *(const void **)(a1 + 240);
    if (v13) {
      CFRelease(v13);
    }
    *(void *)(a1 + 240) = a2;
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v14 = *(const void **)(a1 + 248);
    if (v14) {
      CFRelease(v14);
    }
    *(void *)(a1 + 248) = a4;
    if (a4) {
      CFRetain(a4);
    }
    uint64_t v15 = *(const void **)(a1 + 256);
    if (v15) {
      CFRelease(v15);
    }
    *(void *)(a1 + 256) = a5;
    if (a5) {
      CFRetain(a5);
    }
    *(_DWORD *)(a1 + 112) = 3;
    *(unsigned char *)(a1 + 116) = 1;
    FigMemoryBarrier();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 96));
  FigSemaphoreSignal();
  if (ShouldSynchronouslyResetOutput) {
    FigSemaphoreWaitRelative();
  }
  return 0;
}

uint64_t audioMentorGetInitialReadPolicyFromPrerollPolicy(uint64_t result)
{
  if (result)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, @"PrerollPolicy");
    if (result)
    {
      CFStringRef v1 = (const void *)result;
      if (CFEqual((CFTypeRef)result, @"PrerollUntilOutputReachesLowWater"))
      {
        return 1;
      }
      else if (CFEqual(v1, @"PrerollUntilOutputReachesLowWaterOrSampleNotImmediatelyAvailable"))
      {
        return 3;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL audioMentorShouldSynchronouslyResetOutput(const __CFDictionary *a1)
{
  BOOL result = 0;
  if (a1)
  {
    CFArrayRef Value = CFDictionaryGetValue(a1, @"SynchronouslyResetOutput");
    if (Value)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E4F1CFD0], Value)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t AudioMentorSetClientPID(unsigned char *a1)
{
  if (a1 && !*a1) {
    return FigThreadSetProperty();
  }
  else {
    return 4294954511;
  }
}

uint64_t AudioMentorSetThrottleForBackground(uint64_t a1, int a2)
{
  if (!a1 || *(unsigned char *)a1) {
    return 4294954511;
  }
  int valuePtr = 16 * (a2 != 0);
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t v3 = FigThreadSetProperty();
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t FigBaseObject = FigSampleCursorServiceGetFigBaseObject(*(void *)(a1 + 8));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v8 = v7 ? v7 : 0;
    long long v9 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v8 + 56);
    if (v9) {
      v9(FigBaseObject, @"PriorityOfConsistentThreadHandlingSampleCursors", v5);
    }
  }
  if (v5) {
    CFRelease(v5);
  }
  return v3;
}

uint64_t audioMentorEnqueueBufferConsumedMarker(uint64_t a1, const void *a2)
{
  CMAttachmentBearerRef target = 0;
  uint64_t v4 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
  if (!v4)
  {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2A8], a2, 1u);
    uint64_t v5 = *(void *)(a1 + 24);
    CMAttachmentBearerRef v6 = target;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    long long v9 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef))(v8 + 8);
    if (v9) {
      uint64_t v4 = v9(v5, v6);
    }
    else {
      uint64_t v4 = 4294954514;
    }
    CFRelease(target);
  }
  return v4;
}

uint64_t audioMentorGetDecodeWalkCatchupStatusForSteps(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CMAttachmentBearerRef v6 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v5 + 48);
  if (!v6) {
    goto LABEL_20;
  }
  int v7 = v6(FigBaseObject, @"SampleDependencyAttributes", *MEMORY[0x1E4F1CF80], &theDict);
  CFDictionaryRef v8 = theDict;
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = theDict == 0;
  }
  if (v9)
  {
    uint64_t v10 = 2;
    if (!theDict) {
      return v10;
    }
    goto LABEL_22;
  }
  unsigned int v11 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v11 == CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1F200])
    || CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F1F188]))
  {
    int Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
    if (a2 < 0) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (Int64IfPresent) {
      uint64_t v10 = v13;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
LABEL_20:
    uint64_t v10 = 2;
  }
  CFDictionaryRef v8 = theDict;
  if (theDict) {
LABEL_22:
  }
    CFRelease(v8);
  return v10;
}

uint64_t FigTTMLDocumentWriterCreateRegionAttributeInserter(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRegionAttributeInserter_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  CFStringRef v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef figTTMLDocumentWriterRegionAttributeInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterRegionAttributeInserter[%p]", a1);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterStartElement(v3, a2);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterEndElement(v1);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
  uint64_t v9 = v7(CMBaseObject, *MEMORY[0x1E4F1FF20], *MEMORY[0x1E4F1CF80], &v20);
  if (v9) {
    goto LABEL_24;
  }
  if (!v20)
  {
LABEL_23:
    uint64_t v9 = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, a2);
    goto LABEL_24;
  }
  uint64_t v10 = FigCaptionRegionGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v12 = v11 ? v11 : 0;
  unsigned int v13 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
  if (!v13)
  {
LABEL_14:
    uint64_t v16 = 4294954514;
    goto LABEL_25;
  }
  uint64_t v9 = v13(v10, *MEMORY[0x1E4F20018], v8, &cf);
  if (v9) {
    goto LABEL_24;
  }
  if (FigCFEqual())
  {
    uint64_t v14 = *DerivedStorage;
    uint64_t v15 = kFigTTML_AttributeValue_region_top;
LABEL_21:
    CFTypeRef v17 = *v15;
    goto LABEL_22;
  }
  if (FigCFEqual())
  {
    uint64_t v14 = *DerivedStorage;
    uint64_t v15 = kFigTTML_AttributeValue_region_bottom;
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    uint64_t v14 = *DerivedStorage;
    uint64_t v15 = kFigTTML_AttributeValue_region_left;
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    uint64_t v14 = *DerivedStorage;
    uint64_t v15 = kFigTTML_AttributeValue_region_right;
    goto LABEL_21;
  }
  if (!cf || !CFStringGetLength((CFStringRef)cf)) {
    goto LABEL_23;
  }
  uint64_t v14 = *DerivedStorage;
  CFTypeRef v17 = cf;
LABEL_22:
  uint64_t v9 = FigTTMLDocumentWriterSetAttribute(v14, @"region", (uint64_t)v17);
  if (!v9) {
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v16 = v9;
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterSetAttribute(v5, a2, a3);
}

uint64_t figTTMLDocumentWriterRegionAttributeInserter_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

const char *FigMentorPrerollCompletionReasonGetDescription(unsigned int a1)
{
  if (a1 > 2) {
    return "Invalid";
  }
  else {
    return off_1E5793270[a1];
  }
}

__CFDictionary *FigMentorNotificationPayloadCreate(uint64_t a1, const void *a2, int a3, int a4, const void *a5, int a6)
{
  if (!a2 && !a3 && !a5) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v12 = Mutable;
  if (Mutable)
  {
    if (a2) {
      CFDictionarySetValue(Mutable, @"Mentor_Order", a2);
    }
    if (a3) {
      FigCFDictionarySetInt32();
    }
    if (FigCFEqual() || FigCFEqual())
    {
      unsigned int v13 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFC8];
      uint64_t v15 = (const void *)(a4 ? *MEMORY[0x1E4F1CFD0] : *MEMORY[0x1E4F1CFC8]);
      CFDictionarySetValue(v12, @"Mentor_SamplesWereGenerated", v15);
      if (FigCFEqual())
      {
        if (a6) {
          uint64_t v16 = v13;
        }
        else {
          uint64_t v16 = v14;
        }
        CFDictionarySetValue(v12, @"Mentor_LastsForever", v16);
      }
    }
    if (a5) {
      CFDictionarySetValue(v12, @"Mentor_NotificationThatWasRequestedButDropped", a5);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return v12;
}

uint64_t FigSampleBufferAudioRendererAirPlayCreateWithOptions(uint64_t a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CMTime value = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v7 = 4294950916;
  if (!a3 || !a4) {
    return v7;
  }
  CFTypeRef cf = 0;
  FigSampleBufferAudioRendererGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    uint64_t v7 = v8;
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    snprintf(__str, 0x80uLL, "com.apple.coremedia.samplebufferaudiorendererairplay.state[%p]", cf);
    dispatch_queue_t v10 = dispatch_queue_create(__str, 0);
    *(void *)(DerivedStorage + 16) = v10;
    if (v10)
    {
      snprintf(__str, 0x80uLL, "com.apple.coremedia.samplebufferaudiorendererairplay.notification[%p]", cf);
      dispatch_queue_t v11 = dispatch_queue_create(__str, 0);
      *(void *)(DerivedStorage + 8) = v11;
      if (v11)
      {
        *(void *)uint64_t DerivedStorage = a3;
        CFRetain(a3);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        *(unsigned char *)(DerivedStorage + 77) = 1;
        CFTypeRef v12 = cf;
        uint64_t v13 = CMBaseObjectGetDerivedStorage();
        *(unsigned char *)(v13 + 80) = 0;
        uint64_t v14 = (char *)(v13 + 80);
        if (a2 && CFDictionaryGetValueIfPresent(a2, @"LoggingIdentifier", (const void **)&value)) {
          CFStringGetCString((CFStringRef)value, v14, 10, 0x600u);
        }
        *a4 = v12;
        if (dword_1E9350C90)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
    uint64_t v7 = 4294950914;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t FigSampleBufferAudioRendererAirPlayCreate(uint64_t a1, const void *a2, void *a3)
{
  return FigSampleBufferAudioRendererAirPlayCreateWithOptions(a1, 0, a2, a3);
}

uint64_t audioRendererAirPlay_subRendererNotificationHandler()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

void audioRendererAirPlay_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 64))
  {
    Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    uint64_t v4 = *(void *)(DerivedStorage + 64);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    if (v7) {
      v7(SharedInstance, a1, v4);
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 64);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 64) = 0;
    }
  }
  if (*(void *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(void *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(void *)uint64_t DerivedStorage = 0;
    }
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 32);
  if (v9) {
    CFRelease(v9);
  }
  audioRendererAirPlay_removeRoutingContextListeners(a1, *(void *)(DerivedStorage + 24));
  dispatch_queue_t v10 = *(const void **)(DerivedStorage + 24);
  if (v10) {
    CFRelease(v10);
  }
  audioRendererAirPlay_removeEndpointListeners(a1, *(void *)(DerivedStorage + 40));
  dispatch_queue_t v11 = *(const void **)(DerivedStorage + 40);
  if (v11)
  {
    if (!*(void *)(DerivedStorage + 48)
      || (FigEndpointRelinquishStreamResource(), (dispatch_queue_t v11 = *(const void **)(DerivedStorage + 40)) != 0))
    {
      CFRelease(v11);
    }
  }
  CFTypeRef v12 = *(const void **)(DerivedStorage + 48);
  if (v12) {
    CFRelease(v12);
  }
  audioRendererAirPlay_removeBufferedAirPlayOutputListeners(a1, *(void *)(DerivedStorage + 56));
  uint64_t v13 = *(const void **)(DerivedStorage + 56);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(NSObject **)(DerivedStorage + 16);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v15 = *(NSObject **)(DerivedStorage + 8);
  if (v15)
  {
    dispatch_release(v15);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *audioRendererAirPlay_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferAudioRendererAirPlay=%p retainCount=%d allocator=%p", a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, @" subRenderer=%p", *DerivedStorage);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t audioRendererAirPlay_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v22 = 0;
  if (!a4) {
    return 4294950916;
  }
  uint64_t v9 = (uint64_t *)DerivedStorage;
  if (FigCFEqual())
  {
    audioRendererAirPlay_copyRoutingContext(a1, (uint64_t)a4);
LABEL_4:
    uint64_t v10 = 0;
    goto LABEL_5;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      uint64_t v15 = v9[2];
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 0x40000000;
      v21[2] = __audioRendererAirPlay_CopyProperty_block_invoke;
      v21[3] = &__block_descriptor_tmp_21;
      v21[4] = a4;
      v21[5] = v9;
      uint64_t v16 = v21;
    }
    else if (FigCFEqual())
    {
      uint64_t v15 = v9[2];
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      v20[2] = __audioRendererAirPlay_CopyProperty_block_invoke_2;
      v20[3] = &__block_descriptor_tmp_18;
      v20[4] = a4;
      void v20[5] = v9;
      uint64_t v16 = v20;
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v18 = FigCPECryptorCopyProperty(*v9, a2, a3, (uint64_t)a4);
        goto LABEL_18;
      }
      uint64_t v15 = v9[2];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __audioRendererAirPlay_CopyProperty_block_invoke_3;
      block[3] = &__block_descriptor_tmp_19;
      block[4] = a4;
      void block[5] = v9;
      uint64_t v16 = block;
    }
    dispatch_sync(v15, v16);
    goto LABEL_4;
  }
  audioRendererAirPlay_copyRoutingContext(a1, (uint64_t)&v22);
  CFTypeRef v12 = v22;
  if (!v22)
  {
    uint64_t v10 = 0;
    *a4 = 0;
    return v10;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFTypeRef v17 = *(uint64_t (**)(CFTypeRef, void, uint64_t, void *))(v14 + 48);
  if (v17)
  {
    uint64_t v18 = v17(v12, *MEMORY[0x1E4F75728], a3, a4);
LABEL_18:
    uint64_t v10 = v18;
    goto LABEL_5;
  }
  uint64_t v10 = 4294954514;
LABEL_5:
  if (v22) {
    CFRelease(v22);
  }
  return v10;
}

uint64_t audioRendererAirPlay_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t v31 = 0;
  CFTypeRef v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = 0;
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    if (!a3 || (CFTypeID v7 = CFGetTypeID(a3), v7 == FigRoutingContextGetTypeID()))
    {
      uint64_t v8 = DerivedStorage[2];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __audioRendererAirPlay_SetProperty_block_invoke;
      block[3] = &unk_1E5793310;
      block[4] = &v31;
      void block[5] = a1;
      void block[6] = a3;
      void block[7] = DerivedStorage;
      uint64_t v9 = block;
LABEL_5:
      dispatch_sync(v8, v9);
      goto LABEL_6;
    }
    goto LABEL_33;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!a3 || (CFTypeID v18 = CFGetTypeID(a3), v18 == CFStringGetTypeID()))
      {
        uint64_t v8 = DerivedStorage[2];
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 0x40000000;
        v28[2] = __audioRendererAirPlay_SetProperty_block_invoke_3;
        v28[3] = &unk_1E5793360;
        v28[4] = &v31;
        v28[5] = a1;
        v28[6] = DerivedStorage;
        v28[7] = a3;
        uint64_t v9 = v28;
        goto LABEL_5;
      }
      goto LABEL_33;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        CFTypeID v19 = CFGetTypeID(a3);
        if (v19 == CFBooleanGetTypeID())
        {
          Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
          uint64_t v37 = 0;
          uint64_t v38 = &v37;
          uint64_t v39 = 0x2000000000;
          int v40 = 0;
          uint64_t v21 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
          v35[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
          v35[1] = (CFTypeRef)0x40000000;
          v35[2] = __audioRendererAirPlay_setIsActiveAudioSessionApp_block_invoke;
          v35[3] = &unk_1E5793388;
          v35[4] = &v37;
          v35[5] = a1;
          Boolean v36 = Value;
          dispatch_sync(v21, v35);
          int v22 = *((_DWORD *)v38 + 6);
          _Block_object_dispose(&v37, 8);
          *((_DWORD *)v32 + 6) = v22;
          goto LABEL_6;
        }
      }
      goto LABEL_33;
    }
    if (FigCFEqual())
    {
      if (!a3) {
        goto LABEL_33;
      }
      CFTypeID v23 = CFGetTypeID(a3);
      if (v23 != CFBooleanGetTypeID()) {
        goto LABEL_33;
      }
      Boolean v24 = CFBooleanGetValue((CFBooleanRef)a3);
      int v25 = audioRendererAirPlay_setBufferedAirPlayAllowed((uint64_t)a1, v24);
    }
    else
    {
      int v25 = FigCPECryptorSetProperty(*DerivedStorage, a2, (uint64_t)a3);
    }
    *((_DWORD *)v32 + 6) = v25;
    goto LABEL_6;
  }
  if (!a3 || (CFTypeID v12 = CFGetTypeID(a3), v12 != CFStringGetTypeID()))
  {
LABEL_33:
    uint64_t v26 = v32;
    int v27 = -16380;
LABEL_35:
    *((_DWORD *)v26 + 6) = v27;
    goto LABEL_6;
  }
  v35[0] = 0;
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    uint64_t v26 = v32;
    int v27 = -16382;
    goto LABEL_35;
  }
  uint64_t v14 = MutableCopy;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F755B0], a3);
  int v15 = FigRoutingContextRemoteCopyContextForUUID();
  if (v15)
  {
    CFTypeRef v16 = 0;
  }
  else
  {
    CFTypeRef v16 = v35[0];
    v35[0] = 0;
  }
  CFRelease(v14);
  if (v35[0]) {
    CFRelease(v35[0]);
  }
  *((_DWORD *)v32 + 6) = v15;
  if (!v15)
  {
    CFTypeRef v17 = DerivedStorage[2];
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 0x40000000;
    v29[2] = __audioRendererAirPlay_SetProperty_block_invoke_2;
    v29[3] = &unk_1E5793338;
    v29[4] = &v31;
    v29[5] = a1;
    v29[6] = v16;
    v29[7] = DerivedStorage;
    dispatch_sync(v17, v29);
  }
  if (v16) {
    CFRelease(v16);
  }
LABEL_6:
  uint64_t v10 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v31, 8);
  return v10;
}

uint64_t audioRendererAirPlay_removeRoutingContextListeners(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t audioRendererAirPlay_removeEndpointListeners(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t audioRendererAirPlay_removeBufferedAirPlayOutputListeners(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void audioRendererAirPlay_routingContextRouteChangedListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(void *)(DerivedStorage + 24) == a4)
  {
    uint64_t v7 = *(void *)(DerivedStorage + 32);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v9 = v8 ? v8 : 0;
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v9 + 144);
    if (v10)
    {
      int v11 = v10(a4, v7, &cf);
      CFTypeRef v12 = cf;
      if (!v11)
      {
        int IsDisallowedInternal = audioRendererAirPlay_setNonBAOPlaybackIsDisallowedInternal(a2, (uint64_t)cf);
        CFTypeRef v12 = cf;
        if (!IsDisallowedInternal)
        {
          audioRendererAirPlay_routeToEndpointInternal(a2, cf);
          CFTypeRef v12 = cf;
        }
      }
      if (v12) {
        CFRelease(v12);
      }
    }
  }
}

uint64_t audioRendererAirPlay_setNonBAOPlaybackIsDisallowedInternal(uint64_t a1, uint64_t a2)
{
  BOOLean[24] = *(CFBooleanRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLean[0] = 0;
  uint64_t v4 = *(void *)(DerivedStorage + 24);
  if (!v4) {
    return v4;
  }
  CFIndex v5 = (uint64_t *)DerivedStorage;
  if (a2)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, void, void, CFBooleanRef *))(v7 + 48);
    if (v10)
    {
      int v11 = (void *)MEMORY[0x1E4F75708];
      goto LABEL_13;
    }
LABEL_27:
    uint64_t v4 = 4294954514;
    goto LABEL_28;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, void, CFBooleanRef *))(v9 + 48);
  if (!v10) {
    goto LABEL_27;
  }
  int v11 = (void *)MEMORY[0x1E4F75710];
LABEL_13:
  uint64_t v4 = v10(v4, *v11, 0, BOOLean);
  CFBooleanRef v12 = BOOLean[0];
  if (v4) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = BOOLean[0] == 0;
  }
  if (v13) {
    goto LABEL_29;
  }
  int Value = CFBooleanGetValue(BOOLean[0]);
  if (dword_1E9350C90)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v16 = *v5;
  if (Value) {
    CFTypeRef v17 = (void *)MEMORY[0x1E4F1CFC8];
  }
  else {
    CFTypeRef v17 = (void *)MEMORY[0x1E4F1CFD0];
  }
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, __CFString *, void))(v19 + 56);
  if (!v20) {
    goto LABEL_27;
  }
  uint64_t v4 = v20(v16, @"NonBAOPlaybackIsDisallowed", *v17);
LABEL_28:
  CFBooleanRef v12 = BOOLean[0];
LABEL_29:
  if (v12) {
    CFRelease(v12);
  }
  return v4;
}

uint64_t audioRendererAirPlay_routeToEndpointInternal(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v5 = *(const void **)(DerivedStorage + 40);
  if (v5) {
    CFTypeRef v6 = CFRetain(v5);
  }
  else {
    CFTypeRef v6 = 0;
  }
  uint64_t v8 = (CFTypeRef *)(DerivedStorage + 48);
  uint64_t v7 = *(const void **)(DerivedStorage + 48);
  if (v7) {
    CFTypeRef v9 = CFRetain(v7);
  }
  else {
    CFTypeRef v9 = 0;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 40);
  if ((const void *)v10 != a2)
  {
    audioRendererAirPlay_removeEndpointListeners(a1, v10);
    int v11 = *(const void **)(DerivedStorage + 40);
    *(void *)(DerivedStorage + 40) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v11) {
      CFRelease(v11);
    }
    audioRendererAirPlay_addEndpointListeners(a1, *(void *)(DerivedStorage + 40));
  }
  if (*v8)
  {
    CFRelease(*v8);
    *uint64_t v8 = 0;
  }
  if (!a2) {
    goto LABEL_24;
  }
  if (v9 && FigEndpointContainsStream())
  {
    *uint64_t v8 = CFRetain(v9);
LABEL_24:
    if (*v8 != v9)
    {
      audioRendererAirPlay_updateBufferedAirPlayOutput(a1);
      if (v9) {
        FigEndpointRelinquishStreamResource();
      }
    }
    uint64_t v15 = 0;
    goto LABEL_28;
  }
  uint64_t v12 = FigEndpointAcquireAndCopyStreamResource();
  if (v12) {
    BOOL v13 = v12 == -16725;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    goto LABEL_24;
  }
  uint64_t v15 = v12;
  audioRendererAirPlay_removeEndpointListeners(a1, *(void *)(DerivedStorage + 40));
  uint64_t v16 = *(const void **)(DerivedStorage + 40);
  *(void *)(DerivedStorage + 40) = v6;
  if (v6) {
    CFRetain(v6);
  }
  if (v16) {
    CFRelease(v16);
  }
  audioRendererAirPlay_addEndpointListeners(a1, *(void *)(DerivedStorage + 40));
  CFTypeRef v17 = v9;
  if (*(CFTypeRef *)(DerivedStorage + 48) != v9)
  {
    FigEndpointRelinquishStreamResource();
    CFTypeRef v17 = *v8;
  }
  *uint64_t v8 = v9;
  if (v9) {
    CFRetain(v9);
  }
  if (v17) {
    CFRelease(v17);
  }
LABEL_28:
  if (v6) {
    CFRelease(v6);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v15;
}

uint64_t audioRendererAirPlay_addEndpointListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

void audioRendererAirPlay_updateBufferedAirPlayOutput(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (*(void *)(DerivedStorage + 48) && *(unsigned char *)(DerivedStorage + 77))
  {
    char v4 = 0;
    CFTypeRef v6 = (CFTypeRef *)(DerivedStorage + 56);
    CFIndex v5 = *(const void **)(DerivedStorage + 56);
    if (!v5)
    {
      CFTypeRef v7 = 0;
      CFTypeRef v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    CFTypeRef v6 = (CFTypeRef *)(DerivedStorage + 56);
    CFIndex v5 = *(const void **)(DerivedStorage + 56);
    if (!v5) {
      return;
    }
    char v4 = 1;
  }
  CFTypeRef v8 = CFRetain(v5);
  CFTypeRef v7 = *v6;
LABEL_8:
  audioRendererAirPlay_removeBufferedAirPlayOutputListeners(a1, (uint64_t)v7);
  if (*v6)
  {
    CFRelease(*v6);
    *CFTypeRef v6 = 0;
  }
  if ((v4 & 1) == 0)
  {
    if (FigBufferedAirPlayOutputCreate(0, *(const void **)(v3 + 40), *(const void **)(v3 + 48), v6)) {
      goto LABEL_22;
    }
    audioRendererAirPlay_addBufferedAirPlayOutputListeners(a1, (uint64_t)*v6);
  }
  if (dword_1E9350C90)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v10 = *(void *)v3;
  uint64_t v11 = *(void *)(v3 + 56);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t))(v13 + 56);
  if (v14 && !v14(v10, @"BufferedAirPlayOutput", v11))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (!v8) {
      return;
    }
LABEL_27:
    CFRelease(v8);
    return;
  }
LABEL_22:
  audioRendererAirPlay_removeBufferedAirPlayOutputListeners(a1, (uint64_t)*v6);
  CFTypeRef v15 = *v6;
  *CFTypeRef v6 = v8;
  if (v8) {
    CFRetain(v8);
  }
  if (v15) {
    CFRelease(v15);
  }
  audioRendererAirPlay_addBufferedAirPlayOutputListeners(a1, (uint64_t)*v6);
  if (v8) {
    goto LABEL_27;
  }
}

uint64_t audioRendererAirPlay_endpointStreamsChangedListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 40) == a4)
  {
    return audioRendererAirPlay_routeToEndpointInternal(a2, a4);
  }
  return result;
}

uint64_t audioRendererAirPlay_addBufferedAirPlayOutputListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

void *audioRendererAirPlay_bufferedAirPlayOutputEndpointPreemptedNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)CMBaseObjectGetDerivedStorage();
  if (result[7] == a4 && *result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (void *)FigDispatchAsyncPostNotification();
  }
  return result;
}

void audioRendererAirPlay_copyRoutingContext(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v4 = *(NSObject **)(DerivedStorage + 16);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __audioRendererAirPlay_copyRoutingContext_block_invoke;
  v5[3] = &__block_descriptor_tmp_20;
  v5[4] = a2;
  v5[5] = DerivedStorage;
  dispatch_sync(v4, v5);
}

CFTypeRef __audioRendererAirPlay_copyRoutingContext_block_invoke(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 24);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t audioRendererAirPlay_setRoutingContextAndRemoteDeviceIDInternal(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (FigCFEqual() && FigCFEqual())
  {
    CFTypeRef v8 = 0;
    uint64_t v24 = 0;
    goto LABEL_47;
  }
  CFTypeRef v7 = (const void *)DerivedStorage[3];
  if (v7) {
    CFTypeRef v8 = CFRetain(v7);
  }
  else {
    CFTypeRef v8 = 0;
  }
  if (DerivedStorage[8])
  {
    Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    uint64_t v10 = DerivedStorage[8];
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    if (v13) {
      v13(SharedInstance, a1, v10);
    }
    uint64_t v14 = (const void *)DerivedStorage[8];
    if (v14)
    {
      CFRelease(v14);
      DerivedStorage[8] = 0;
    }
  }
  audioRendererAirPlay_removeRoutingContextListeners(a1, DerivedStorage[3]);
  CFTypeRef v15 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = (uint64_t)a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v15) {
    CFRelease(v15);
  }
  audioRendererAirPlay_updateRoutingRegistryInternal(a1);
  audioRendererAirPlay_addRoutingContextListeners(a1, DerivedStorage[3]);
  uint64_t v16 = (const void *)DerivedStorage[4];
  DerivedStorage[4] = (uint64_t)a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = DerivedStorage[3];
  if (!v17)
  {
    CFTypeRef v21 = 0;
    goto LABEL_31;
  }
  uint64_t v18 = DerivedStorage[4];
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  int v22 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v20 + 144);
  if (v22)
  {
    uint64_t IsDisallowedInternal = v22(v17, v18, &cf);
    if (!IsDisallowedInternal)
    {
      uint64_t IsDisallowedInternal = audioRendererAirPlay_setNonBAOPlaybackIsDisallowedInternal(a1, (uint64_t)cf);
      if (!IsDisallowedInternal)
      {
        CFTypeRef v21 = cf;
LABEL_31:
        uint64_t v24 = audioRendererAirPlay_routeToEndpointInternal(a1, v21);
        if (!v24) {
          goto LABEL_47;
        }
        goto LABEL_34;
      }
    }
    uint64_t v24 = IsDisallowedInternal;
  }
  else
  {
    uint64_t v24 = 4294954514;
  }
LABEL_34:
  if (DerivedStorage[8])
  {
    uint64_t v25 = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    uint64_t v26 = DerivedStorage[8];
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    if (v29) {
      v29(v25, a1, v26);
    }
    CFTypeRef v30 = (const void *)DerivedStorage[8];
    if (v30)
    {
      CFRelease(v30);
      DerivedStorage[8] = 0;
    }
  }
  audioRendererAirPlay_removeRoutingContextListeners(a1, DerivedStorage[3]);
  uint64_t v31 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = (uint64_t)v8;
  if (v8) {
    CFRetain(v8);
  }
  if (v31) {
    CFRelease(v31);
  }
  audioRendererAirPlay_updateRoutingRegistryInternal(a1);
  audioRendererAirPlay_addRoutingContextListeners(a1, DerivedStorage[3]);
LABEL_47:
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v24;
}

uint64_t audioRendererAirPlay_setBufferedAirPlayAllowed(uint64_t a1, char a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  char v4 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __audioRendererAirPlay_setBufferedAirPlayAllowed_block_invoke;
  block[3] = &unk_1E57933B0;
  block[4] = &v9;
  void block[5] = a1;
  char v8 = a2;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void audioRendererAirPlay_updateRoutingRegistryInternal(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  uint64_t v19 = 0;
  if (*(float *)(DerivedStorage + 72) && *(unsigned char *)(DerivedStorage + 77))
  {
    if (!*(void *)(DerivedStorage + 64))
    {
      uint64_t v4 = *(void *)(DerivedStorage + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v6 = v5 ? v5 : 0;
        uint64_t v13 = *(void (**)(uint64_t, void, void, uint64_t *))(v6 + 48);
        if (v13)
        {
          v13(v4, *MEMORY[0x1E4F75728], 0, &v19);
          if (v19)
          {
            *(void *)(v3 + 64) = v19;
            uint64_t v19 = 0;
            Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
            uint64_t v15 = *(void *)(v3 + 64);
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 8);
            if (v18) {
              v18(SharedInstance, a1, v15);
            }
          }
        }
      }
    }
  }
  else if (*(void *)(DerivedStorage + 64))
  {
    uint64_t v7 = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    uint64_t v8 = *(void *)(v3 + 64);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    if (v11) {
      v11(v7, a1, v8);
    }
    int v12 = *(const void **)(v3 + 64);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(v3 + 64) = 0;
    }
  }
}

uint64_t audioRendererAirPlay_addRoutingContextListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

uint64_t __audioRendererAirPlay_setIsActiveAudioSessionApp_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 76) == v2
    || (*(unsigned char *)(DerivedStorage + 76) = v2, (uint64_t v4 = *(void *)(DerivedStorage + 56)) == 0))
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(v6 + 40);
    if (v8) {
      uint64_t result = v8(v4, v2, 0, 0);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __audioRendererAirPlay_setBufferedAirPlayAllowed_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 77) != v3)
  {
    *(unsigned char *)(DerivedStorage + 77) = v3;
    audioRendererAirPlay_updateRoutingRegistryInternal(v2);
    audioRendererAirPlay_updateBufferedAirPlayOutput(v2);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
}

__CFString *audioRendererAirPlay_deviceRendererProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"FigSampleBufferAudioRenderer <FigSampleBufferAudioDeviceRendererProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t audioRendererAirPlay_DuckVolume(float a1, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigSampleBufferAudioDeviceRendererProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 8);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f32[0] = a1;
  v10.n128_f32[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t audioRendererAirPlay_SilentMute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigSampleBufferAudioDeviceRendererProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t audioRendererAirPlay_QueueIsAboveHighWaterLevel()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8);
  if (!v3) {
    return 1;
  }

  return v3(v0);
}

uint64_t audioRendererAirPlay_EnqueueSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t audioRendererAirPlay_Flush()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 24);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t audioRendererAirPlay_AttachToSynchronizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t audioRendererAirPlay_CopyClock(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t audioRendererAirPlay_SetRateAndTime(uint64_t a1, long long *a2, float a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, a3);
  uint64_t v7 = *DerivedStorage;
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, long long *, float))(v9 + 48);
  if (v10)
  {
    long long v15 = v13;
    uint64_t v16 = v14;
    uint64_t v11 = v10(v7, &v15, a3);
    if (!v11) {
      return v11;
    }
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, 0.0);
  return v11;
}

uint64_t audioRendererAirPlay_FlushFromMediaTime(uint64_t a1, long long *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, long long *, void (*)(uint64_t, uint64_t), uint64_t))(v9 + 56);
  if (v10)
  {
    long long v15 = v13;
    uint64_t v16 = v14;
    return v10(v7, &v15, a3, a4);
  }
  else
  {
    uint64_t v11 = 4294954514;
    if (a3) {
      a3(4294954514, a4);
    }
  }
  return v11;
}

uint64_t audioRendererAirPlay_SetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, float a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, a4);
  uint64_t v9 = *DerivedStorage;
  long long v17 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, long long *, long long *, float))(v11 + 64);
  if (v12)
  {
    long long v21 = v17;
    uint64_t v22 = v18;
    long long v19 = v15;
    uint64_t v20 = v16;
    uint64_t v13 = v12(v9, &v21, &v19, a4);
    if (!v13) {
      return v13;
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
  audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(a1, 0.0);
  return v13;
}

void audioRendererAirPlay_saveRateAndUpdateRoutingRegistry(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __audioRendererAirPlay_saveRateAndUpdateRoutingRegistry_block_invoke;
  block[3] = &__block_descriptor_tmp_29_0;
  float v7 = a2;
  block[4] = DerivedStorage;
  void block[5] = a1;
  dispatch_sync(v5, block);
}

void __audioRendererAirPlay_saveRateAndUpdateRoutingRegistry_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  *(_DWORD *)(v3 + 72) = v1;
  audioRendererAirPlay_updateRoutingRegistryInternal(v2);
}

uint64_t FigSampleGeneratorBatchGetClassID()
{
  return sFigSampleGeneratorBatchClassID;
}

uint64_t RegisterFigSampleGeneratorBatchType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigSampleGeneratorBatchGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleGeneratorBatchGetClassID_sRegisterFigSampleGeneratorBatchTypeOnce, RegisterFigSampleGeneratorBatchType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleGeneratorGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleGeneratorGetClassID_sRegisterFigSampleGeneratorTypeOnce, RegisterFigSampleGeneratorType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleGeneratorBatchCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleGeneratorBatch %p]", a1);
}

CFStringRef FigSampleGeneratorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleGenerator %p]", a1);
}

uint64_t FigImageQueueConfigurationGetTypeID()
{
  if (FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce != -1) {
    dispatch_once(&FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce, &__block_literal_global_13);
  }
  return FigImageQueueConfigurationGetTypeID_sImageQueueConfigurationTypeID;
}

uint64_t __FigImageQueueConfigurationGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigImageQueueConfigurationGetTypeID_sImageQueueConfigurationuint64_t TypeID = result;
  return result;
}

uint64_t imageQueueConfiguration_init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void imageQueueConfiguration_finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t imageQueueConfiguration_equal()
{
  return FigCFEqual();
}

CFHashCode imageQueueConfiguration_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef imageQueueConfiguration_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a1) {
    return CFStringCreateWithFormat(v2, 0, @"[ImageQueueConfiguration %p] array: %@", a1, *(void *)(a1 + 16));
  }
  else {
    return CFStringCreateWithFormat(v2, 0, @"[ImageQueueConfiguration %p]", 0);
  }
}

uint64_t FigImageQueueConfigurationCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  if (FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce != -1) {
    dispatch_once(&FigImageQueueConfigurationGetTypeID_sRegisterImageQueueConfigurationTypeOnce, &__block_literal_global_13);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v6 = (void *)Instance;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    v6[2] = Mutable;
    if (Mutable)
    {
      *a3 = v6;
      return 0;
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
      CFRelease(v6);
      return v9;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigImageQueueConfigurationAddFigImageQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && a3
    && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    CFMutableDictionaryRef v5 = Mutable;
    FigCFDictionarySetValue();
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v5);
    CFRelease(v5);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigByteStreamCreateForByteFlume(const void *a1, const __CFAllocator *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  *(void *)&v41[1021] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v37 = 0;
  bzero(v41, 0x3FDuLL);
  qmemcpy(__src, "n/a", sizeof(__src));
  int IsItOKToLogURLs = FigIsItOKToLogURLs();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_55;
  }
  if (a4)
  {
    CMByteStreamGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (!v9)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      CFTypeRef v11 = CFRetain(a1);
      *uint64_t DerivedStorage = v11;
      number[0] = 0;
      uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(v11);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      long long v15 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *))(v14 + 48);
      if (v15)
      {
        uint64_t v16 = v15(FigBaseObject, @"FBF_EntireLength", a2, number);
        CFNumberRef v17 = number[0];
        if (!v16 && number[0])
        {
          uint64_t valuePtr = 0;
          CFNumberGetValue(number[0], kCFNumberSInt64Type, &valuePtr);
          if (valuePtr < 0)
          {
            uint64_t v16 = 4294954513;
          }
          else
          {
            uint64_t v16 = 0;
            DerivedStorage[1] = valuePtr;
          }
          CFNumberRef v17 = number[0];
        }
        if (v17) {
          CFRelease(v17);
        }
        if (v16) {
          goto LABEL_27;
        }
        FigByteStreamStatsSetupWorker();
        if (sFlumeStreamDestMutexOnce != -1) {
          dispatch_once_f(&sFlumeStreamDestMutexOnce, 0, (dispatch_function_t)flumeStream_setUpDestMutexOnce);
        }
        uint64_t v18 = FigByteFlumeGetFigBaseObject(*DerivedStorage);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        long long v21 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v20 + 48);
        if (v21)
        {
          uint64_t v22 = v21(v18, @"FBF_URL", a2, &cf);
          if (!v22)
          {
            uint64_t v24 = *DerivedStorage;
            CFTypeID v23 = DerivedStorage + 3;
            uint64_t v25 = FigByteFlumeGetFigBaseObject(v24);
            uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v26) {
              uint64_t v27 = v26;
            }
            else {
              uint64_t v27 = 0;
            }
            CFTypeRef v30 = *(void (**)(uint64_t, __CFString *, void, void *))(v27 + 48);
            if (v30) {
              v30(v25, @"FBF_ClientBundleIdentifier", *MEMORY[0x1E4F1CF80], v23);
            }
            if (a3
              && (uint64_t v31 = (const void *)*MEMORY[0x1E4F1CFD0], v31 == CFDictionaryGetValue(a3, @"DoNotLogURLs"))
              || !IsItOKToLogURLs)
            {
              CFStringRef v33 = CFURLCopyScheme((CFURLRef)cf);
              if (v33)
              {
                CFStringRef v34 = v33;
                CFStringRef v28 = CFStringCreateWithFormat(a2, 0, @"%@://<redacted>", v33);
                CFRelease(v34);
                if (!v28)
                {
LABEL_51:
                  if (dword_1E9350CB0)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  uint64_t v16 = 0;
                  *a4 = v37;
                  CFTypeRef v37 = 0;
LABEL_29:
                  if (*MEMORY[0x1E4F1EBA8] != 1) {
                    goto LABEL_31;
                  }
                  goto LABEL_30;
                }
LABEL_49:
                CFStringGetCString(v28, __src, 1024, 0x8000100u);
                goto LABEL_51;
              }
            }
            else
            {
              CFStringRef v32 = CFURLGetString((CFURLRef)cf);
              if (v32)
              {
                CFStringRef v28 = (const __CFString *)CFRetain(v32);
                if (!v28) {
                  goto LABEL_51;
                }
                goto LABEL_49;
              }
            }
            CFStringRef v28 = 0;
            goto LABEL_51;
          }
          uint64_t v16 = v22;
          goto LABEL_27;
        }
      }
      uint64_t v16 = 4294954514;
LABEL_27:
      FigSignalErrorAt();
LABEL_28:
      CFStringRef v28 = 0;
      goto LABEL_29;
    }
LABEL_55:
    uint64_t v16 = v9;
    goto LABEL_28;
  }
  uint64_t v16 = FigSignalErrorAt();
  if (*MEMORY[0x1E4F1EBA8] != 1) {
    goto LABEL_33;
  }
  CFStringRef v28 = 0;
LABEL_30:
  strncpy((char *)number, __src, 8uLL);
  kdebug_trace();
LABEL_31:
  if (v28) {
    CFRelease(v28);
  }
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v16;
}

uint64_t flumeStream_setUpDestMutexOnce()
{
  uint64_t result = FigSimpleMutexCreate();
  sFlumeStreamDestMutex = result;
  return result;
}

__n128 FigFlumeStreamFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (dword_1E9350CB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 24);
  if (v2) {
    CFRelease(v2);
  }
  FigByteStreamStatsTeardownWorker();
  result.n128_u64[0] = 0xF5F5F5F5F5F5F5F5;
  result.n128_u64[1] = 0xF5F5F5F5F5F5F5F5;
  *(__n128 *)(DerivedStorage + 64) = result;
  *(__n128 *)(DerivedStorage + 80) = result;
  *(__n128 *)(DerivedStorage + 32) = result;
  *(__n128 *)(DerivedStorage + 48) = result;
  *(__n128 *)uint64_t DerivedStorage = result;
  *(__n128 *)(DerivedStorage + 16) = result;
  return result;
}

__CFString *FigFlumeStreamCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, @"FigFlumeStream %p sourceFlume %@ entireLength %lld lastReadIssued %d", a1, *(void *)DerivedStorage, *(void *)(DerivedStorage + 8), *(unsigned int *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t FigFlumeStreamCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC50]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC48]))
  {
    uint64_t SInt64 = FigCFNumberCreateSInt64();
LABEL_8:
    uint64_t v11 = 0;
    *a4 = SInt64;
    goto LABEL_9;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC78]))
  {
    uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v15 + 48);
    if (!v16)
    {
      uint64_t v11 = 4294954514;
      goto LABEL_9;
    }
    uint64_t StatsDictionary = v16(FigBaseObject, @"FBF_URL", a3, a4);
    goto LABEL_26;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB40]))
  {
LABEL_18:
    uint64_t v11 = 4294954512;
    goto LABEL_9;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB58]))
  {
    uint64_t v18 = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    uint64_t v19 = kFigByteFlumeProperty_MIMEType;
LABEL_25:
    uint64_t StatsDictionary = FigCPECryptorCopyProperty(v18, (uint64_t)*v19, a3, (uint64_t)a4);
LABEL_26:
    uint64_t v11 = StatsDictionary;
    goto LABEL_9;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC58]))
  {
LABEL_28:
    uint64_t SInt64 = (uint64_t)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB78]))
  {
    uint64_t StatsDictionary = flumeStreamCreateReadStatsDictionary(a1, a3, a4);
    goto LABEL_26;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB18]))
  {
    uint64_t v18 = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    uint64_t v19 = kFigByteFlumeProperty_AccessLog;
    goto LABEL_25;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB50]))
  {
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB20])) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (*DerivedStorage)
  {
    uint64_t v18 = FigByteFlumeGetFigBaseObject(*DerivedStorage);
    uint64_t v19 = kFigByteFlumeProperty_LastError;
    goto LABEL_25;
  }
  uint64_t v11 = 4294954513;
LABEL_9:
  if (*v9 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v11;
}

uint64_t FigFlumeStreamSetProperty(int a1, CFTypeRef cf)
{
  CFAllocatorRef v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (cf)
    {
      CFHash(cf);
      kdebug_trace();
      if (*v2 == 1)
      {
        CFHash(cf);
LABEL_6:
        kdebug_trace();
      }
    }
    else
    {
      kdebug_trace();
      if (*v2 == 1) {
        goto LABEL_6;
      }
    }
  }
  return 4294954512;
}

uint64_t flumeStreamCreateReadStatsDictionary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a3) {
    return 4294954516;
  }
  uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(*DerivedStorage);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
  if (v9) {
    v9(FigBaseObject, @"FBF_URL", a2, &cf);
  }
  *a3 = FigByteStreamStatsCreateStatsDictionary();
  uint64_t result = (uint64_t)cf;
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t FigFlumeStreamRead(const void *a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v13 = 0;
  CMBaseObjectGetDerivedStorage();
  FigGetUpTimeNanoseconds();
  uint64_t v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v11 = flumeStream_issueReadAndWaitForCompletion(a1, a2, a3, a4, 0, &v13);
  if (a5) {
    *a5 = v13;
  }
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  if (*v10 == 1) {
    kdebug_trace();
  }
  return v11;
}

uint64_t FigFlumeStreamGetAvailableLengthAtOffset(uint64_t a1, uint64_t a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef v5 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    uint64_t v10 = FigSignalErrorAt();
    if (*v5 != 1) {
      return v10;
    }
    goto LABEL_8;
  }
  if (a2 < 0 || (uint64_t v7 = *(void *)(DerivedStorage + 8), v8 = v7 < a2, v9 = v7 - a2, v8))
  {
    uint64_t v10 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v10 = 0;
    *a3 = v9;
  }
  if (*v5 == 1) {
LABEL_8:
  }
    kdebug_trace();
  return v10;
}

uint64_t FigFlumeStreamReadAndCreateBlockBuffer(const void *a1, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v13 = 0;
  CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  FigGetUpTimeNanoseconds();
  uint64_t v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v11 = flumeStream_issueReadAndWaitForCompletion(a1, a2, a3, 0, a4, &v13);
  if (a5) {
    *a5 = v13;
  }
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  if (*v10 == 1) {
    kdebug_trace();
  }
  return v11;
}

uint64_t flumeStream_issueReadAndWaitForCompletion(const void *a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  v39[23] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v39[0] = 0;
  CFAllocatorRef v12 = CFGetAllocator(a1);
  if (a5) {
    *a5 = 0;
  }
  if (a3 < 0) {
    goto LABEL_52;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  BOOL v14 = v13 < a3;
  uint64_t v15 = v13 - a3;
  if (v14)
  {
    uint64_t v37 = FigSignalErrorAt();
    if (v37)
    {
LABEL_53:
      uint64_t v29 = v37;
      uint64_t v17 = 0;
LABEL_54:
      uint64_t v28 = 0;
      goto LABEL_44;
    }
    if (a2)
    {
LABEL_52:
      uint64_t v37 = FigSignalErrorAt();
      goto LABEL_53;
    }
LABEL_55:
    uint64_t v17 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    goto LABEL_44;
  }
  if (!a2) {
    goto LABEL_55;
  }
  if (v15 <= 0) {
    goto LABEL_52;
  }
  if (v15 < a2) {
    a2 = v15;
  }
  if (figFlumeStreamReadRecord_GetTypeID_sRegisterFigFlumeStreamReadRecordTypeOnce != -1) {
    dispatch_once_f(&figFlumeStreamReadRecord_GetTypeID_sRegisterFigFlumeStreamReadRecordTypeOnce, &figFlumeStreamReadRecord_GetTypeID_sFigFlumeStreamReadRecordTypeID, (dispatch_function_t)figFlumeStreamReadRecord_RegisterType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v17 = Instance;
    dispatch_semaphore_t v18 = dispatch_semaphore_create(0);
    *(void *)(v17 + 72) = v18;
    if (v18) {
      goto LABEL_13;
    }
    uint64_t v29 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v17);
  }
  else
  {
    uint64_t v29 = FigSignalErrorAt();
  }
  uint64_t v17 = 0;
  uint64_t v28 = 0;
  if (v29) {
    goto LABEL_44;
  }
LABEL_13:
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a2;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 56) = a4;
  if (a5)
  {
    uint64_t Empty = CMBlockBufferCreateEmpty(v12, 0, 0, (CMBlockBufferRef *)(v17 + 64));
    if (Empty)
    {
      uint64_t v29 = Empty;
      goto LABEL_54;
    }
  }
  *(_DWORD *)(v17 + 40) = FigAtomicIncrement32();
  *(_DWORD *)(v17 + 80) = 1;
  uint64_t v20 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  CFRetain((CFTypeRef)v17);
  uint64_t v21 = *DerivedStorage;
  uint64_t v22 = *(int *)(v17 + 40);
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, void, void (*)(uint64_t, int, int, uint64_t, CMBlockBufferRef, char, int), uint64_t, uint64_t, void *))(v24 + 8);
  if (v25)
  {
    uint64_t v26 = v25(v21, a3, a2, 0, flumeStream_incrementalReadCallback, v17, v22, v39);
    if (v26 || (*(void *)(v17 + 48) = v39[0], uint64_t v26 = FigThreadRegisterAbortAction(), v26))
    {
      uint64_t v29 = v26;
      uint64_t v28 = 0;
    }
    else
    {
      if (FigCFEqual()) {
        dispatch_time_t v27 = dispatch_time(0, 10000000000);
      }
      else {
        dispatch_time_t v27 = -1;
      }
      if (dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v17 + 72), v27))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (*v20 == 1) {
          kdebug_trace();
        }
        uint64_t v31 = *DerivedStorage;
        uint64_t v32 = v39[0];
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v33) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        CFTypeRef v35 = *(void (**)(uint64_t, uint64_t))(v34 + 16);
        if (v35) {
          v35(v31, v32);
        }
        if (*v20 == 1) {
          kdebug_trace();
        }
        uint64_t v28 = 0;
        uint64_t v29 = 4294954364;
      }
      else
      {
        uint64_t v28 = *(void *)(v17 + 32);
        if (a5) {
          *a5 = *(void *)(v17 + 64);
        }
        *(void *)(v17 + 64) = 0;
        uint64_t v29 = *(unsigned int *)(v17 + 80);
      }
    }
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 4294954514;
  }
  if (*v20 == 1) {
    kdebug_trace();
  }
LABEL_44:
  if (a6) {
    *a6 = v28;
  }
  FigThreadUnregisterAbortAction();
  if (v17) {
    CFRelease((CFTypeRef)v17);
  }
  return v29;
}

void flumeStream_incrementalReadCallback(uint64_t a1, int a2, int a3, uint64_t a4, CMBlockBufferRef theBuffer, char a6, int a7)
{
  CFAllocatorRef v12 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a6) {
      uint64_t v13 = "true";
    }
    else {
      uint64_t v13 = "false";
    }
    strncpy(__dst, v13, 8uLL);
    kdebug_trace();
  }
  if (!a7)
  {
    DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
    if (DataLength)
    {
      MEMORY[0x19970E910](sFlumeStreamDestMutex);
      uint64_t v15 = *(void *)(a1 + 56);
      if (v15) {
        CMBlockBufferCopyDataBytes(theBuffer, 0, DataLength, (void *)(v15 + a4));
      }
      uint64_t v16 = *(OpaqueCMBlockBuffer **)(a1 + 64);
      if (v16) {
        CMBlockBufferAppendBufferReference(v16, theBuffer, 0, 0, 0);
      }
      MEMORY[0x19970E930](sFlumeStreamDestMutex);
      *(void *)(a1 + 32) += DataLength;
    }
  }
  *(_DWORD *)(a1 + 80) = a7;
  if (*v12 == 1) {
    kdebug_trace();
  }
  if (a6)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 72));
    CFRelease((CFTypeRef)a1);
  }
}

intptr_t flumeStream_abortWaitingForReadCompletion(uint64_t a1)
{
  if (dword_1E9350CB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFAllocatorRef v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  *(_DWORD *)(a1 + 12) = -12871;
  intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)a1);
  if (*v3 == 1) {
    return kdebug_trace();
  }
  return result;
}

uint64_t figFlumeStreamReadRecord_RegisterType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double figFlumeStreamReadRecord_Init(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figFlumeStreamReadRecord_Finalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0;
  }
  CFAllocatorRef v3 = *(NSObject **)(a1 + 72);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 72) = 0;
  }
}

__CFString *figFlumeStreamReadRecord_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, @"FigFlumeStreamReadRecordRef %p RC %d readIssue %d flumeReadID %lld start %lld length %lld bytesRead %lld reqResult %d", a1, v4, *(unsigned int *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 80));
  return Mutable;
}

uint64_t FigCaptionRendererCaptionArrayInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCaptionRendererInputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCaptionArrayInputSetCaptionsArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    CFRelease(*DerivedStorage);
  }
  if (a2) {
    *uint64_t DerivedStorage = CFRetain(a2);
  }
  return 0;
}

void figFCRCaptionArrayInput_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = *(NSObject **)(DerivedStorage + 32);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 32) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

__CFString *figFCRCaptionArrayInput_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererCaptionArrayInput %p>", a1);
  return Mutable;
}

uint64_t ffcrcainput_start(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 32))
  {
    uint64_t v3 = DerivedStorage;
    CFIndex v4 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v4)
    {
      CFMutableDictionaryRef v5 = v4;
      *CFIndex v4 = CFRetain(a1);
      dispatch_sync_f(*(dispatch_queue_t *)(v3 + 32), v5, (dispatch_function_t)startInputDoAsync);
    }
  }
  return 0;
}

uint64_t ffcrcainput_stop()
{
  return 0;
}

void startInputDoAsync(const void **a1)
{
  CFAllocatorRef v2 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = v2;
  context[1] = DerivedStorage;
  CFArrayRef v4 = *(const __CFArray **)DerivedStorage;
  cf.CMTime value = 0;
  *(double *)&CFTypeRef v52 = 0.0;
  if (CFArrayGetCount(v4))
  {
    CFIndex v5 = 0;
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    uint64_t v7 = *MEMORY[0x1E4F1FF48];
    while (1)
    {
      if (cf.value)
      {
        CFRelease((CFTypeRef)cf.value);
        cf.CMTime value = 0;
      }
      if (*(double *)&v52 != 0.0)
      {
        CFRelease(v52);
        *(double *)&CFTypeRef v52 = 0.0;
      }
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      uint64_t CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CFAllocatorRef v12 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v11 + 48);
      if (!v12
        || v12(CMBaseObject, @"CaptionData", v6, &cf)
        || ((uint64_t v13 = FigCaptionDataGetCMBaseObject(), (v14 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
          ? (uint64_t v15 = 0)
          : (uint64_t v15 = v14),
            (uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48)) == 0
         || v16(v13, v7, v6, &v52)))
      {
LABEL_19:
        char v17 = 0;
        goto LABEL_20;
      }
      if (FigCFArrayContainsValue()) {
        break;
      }
      if (++v5 == CFArrayGetCount(v4)) {
        goto LABEL_19;
      }
    }
    char v17 = 1;
LABEL_20:
    if (*(double *)&v52 != 0.0) {
      CFRelease(v52);
    }
    if (cf.value) {
      CFRelease((CFTypeRef)cf.value);
    }
  }
  else
  {
    char v17 = 0;
  }
  *(unsigned char *)(DerivedStorage + 16) = v17;
  CFArrayRef v18 = *(const __CFArray **)DerivedStorage;
  v56.length = CFArrayGetCount(*(CFArrayRef *)DerivedStorage);
  v56.locatioCFIndex n = 0;
  CFArrayApplyFunction(v18, v56, (CFArrayApplierFunction)enumCaptions_applierFunc, context);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
  if (Count < 1)
  {
LABEL_48:
    CFIndex v38 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
    if (v38 < 1)
    {
LABEL_59:
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 8));
      if (!v2) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    CFIndex v39 = v38;
    CFIndex v40 = 0;
    while (1)
    {
      uint64_t v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), v40);
      *(double *)&CFTypeRef v52 = 0.0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (!ProtocolVTable) {
        break;
      }
      uint64_t v43 = *(void *)(ProtocolVTable + 16);
      if (!v43) {
        break;
      }
      uint64_t v44 = *(unsigned int (**)(const void *, CFTypeRef *))(v43 + 8);
      if (!v44 || v44(v41, &v52)) {
        break;
      }
      uint64_t v45 = (const char *)v52;
      if (*(double *)&v52 == 0.0
        || (int v46 = strcmp((const char *)v52, "FigCaptionRendererPaintOnCaption"),
            double v47 = (void (**)(const void *, void))(DerivedStorage + 40),
            v46)
        && (int v48 = strcmp(v45, "FigCaptionRendererCaption"),
            double v47 = (void (**)(const void *, void))(DerivedStorage + 40),
            v48))
      {
        double v47 = (void (**)(const void *, void))(DerivedStorage + 48);
      }
      (*v47)(v41, *(void *)(DerivedStorage + 56));
      if (v39 == ++v40) {
        goto LABEL_59;
      }
    }
  }
  else
  {
    CFIndex v20 = Count;
    CFIndex v21 = 0;
    uint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), v21);
      __s1 = 0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      uint64_t v24 = CMBaseObjectGetProtocolVTable();
      if (!v24) {
        break;
      }
      uint64_t v25 = *(void *)(v24 + 16);
      if (!v25) {
        break;
      }
      uint64_t v26 = *(unsigned int (**)(uint64_t, char **))(v25 + 8);
      if (!v26 || v26(v23, &__s1)) {
        break;
      }
      if (__s1 && (uint64_t v27 = strcmp(__s1, "FigCaptionRendererPaintOnCaption"), !v27))
      {
        if (v22)
        {
          *(double *)&CFTypeRef v52 = 0.0;
          double v53 = 0.0;
          *(double *)&CFTypeRef v52 = FigBytePumpGetFigBaseObject(v27);
          double v53 = v28;
          FigCaptionRendererIntervalProtocolGetProtocolID();
          uint64_t v29 = CMBaseObjectGetProtocolVTable();
          if (v29)
          {
            uint64_t v31 = *(void *)(v29 + 16);
            v29 += 16;
            uint64_t v30 = v31;
            if (v31)
            {
              uint64_t v32 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v30 + 8);
              if (v32) {
                uint64_t v29 = v32(v22, &v52);
              }
            }
          }
          double FigBaseObject = 0.0;
          uint64_t v51 = 0;
          double FigBaseObject = FigBytePumpGetFigBaseObject(v29);
          uint64_t v51 = v33;
          FigCaptionRendererIntervalProtocolGetProtocolID();
          uint64_t v34 = CMBaseObjectGetProtocolVTable();
          if (v34)
          {
            uint64_t v35 = *(void *)(v34 + 16);
            if (v35)
            {
              Boolean v36 = *(void (**)(uint64_t, double *))(v35 + 8);
              if (v36) {
                v36(v23, &FigBaseObject);
              }
            }
          }
          double v37 = FigBaseObject;
          if (FigBaseObject >= *(double *)&v52 + v53) {
            double v37 = *(double *)&v52 + v53;
          }
          CMTimeMake(&cf, (uint64_t)((v37 - *(double *)&v52) * 1000.0), 1000);
          FigCaptionRendererPaintOnCaptionSetAnimationDuration(v22, (uint64_t)&cf);
        }
      }
      else
      {
        uint64_t v23 = v22;
      }
      ++v21;
      uint64_t v22 = v23;
      if (v20 == v21) {
        goto LABEL_48;
      }
    }
  }
  FigSignalErrorAt();
  if (v2) {
LABEL_62:
  }
    CFRelease(v2);
LABEL_63:
  free(a1);
}

void enumCaptions_applierFunc(uint64_t a1)
{
  void (*v5)(CMTimeRange *__return_ptr, uint64_t);
  long long v6;
  uint64_t CMBaseObject;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, __CFString *, void, CFTypeRef *);
  CFAllocatorRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  const void *v16;
  uint64_t v17;
  double FigBaseObject;
  double v19;
  double v20;
  uint64_t ProtocolVTable;
  uint64_t v22;
  void (*v23)(const void *, double, double);
  CFMutableStringRef Mutable;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, void, const __CFAllocator *, CFStringRef *);
  CFAttributedStringRef v29;
  CFAttributedStringRef MutableCopy;
  CFMutableDictionaryRef v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(const void *, CFMutableDictionaryRef);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, void, const __CFAllocator *, CMTimeRange *);
  const void *InitialValue;
  const void *v41;
  __CFArray *v42;
  __CFArray *v43;
  __CFArray *v44;
  __CFArray *v45;
  __CFArray *v46;
  __CFArray *v47;
  __CFArray *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(const void *, __CFString *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, void, const __CFAllocator *, CFStringRef *);
  CFComparisonResult v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(const void *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(const void *, __CFString *);
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(const void *, __CFString *);
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(const void *, uint64_t);
  void *v88;
  CFStringRef v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(void *, CFStringRef);
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(void *, uint64_t);
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(void *, void);
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(void *, double, double);
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(void *, double, double);
  CFStringRef v109;
  void (*v110)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  CFAttributedStringRef Copy;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(const void *, CFAttributedStringRef);
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(const void *, uint64_t);
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (*v125)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  double v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  double v141;
  double v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  const void *v150;
  unsigned int (*v151)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  CFStringRef v152;
  CFStringRef v153;
  unsigned int (*v154)(uint64_t, void, const __CFAllocator *, CFStringRef *);
  const void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(void *, void);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, int *);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  CFTypeRef *v167;
  const void *v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(const void *, __CFString *);
  void (*v172)(uint64_t, void, const __CFAllocator *, CFTypeRef *);
  uint64_t v173;
  void *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(void *, void);
  CFStringRef v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(void *, CFStringRef);
  void *v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(void *, void);
  void *v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(void *, double, double);
  const void *v192;
  void *v193;
  CFStringRef v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(void *, CFStringRef *);
  CFComparisonResult v199;
  int v200;
  int v201;
  unsigned int v202;
  long long v203;
  long long v204;
  _OWORD v205[2];
  int v206;
  CFStringRef theString1;
  double v208;
  CFTypeRef cf;
  CFTypeRef v210;
  void *value;
  CFTypeRef v212;
  CMTimeRange time;
  CMTime v214;
  CFTypeRef v215;
  CFStringRef v216;
  CFStringRef v217;
  CFTypeRef v218;
  CFTypeRef v219;
  CMTimeRange v220;
  const void *v221[2];
  CFRange v222;
  CFRange v223;
  CFRange v224;
  CFRange v225;
  CFRange v226;
  CFRange v227;
  CFRange v228;
  CFRange v229;
  CFRange v230;
  CFRange v231;

  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v221[0] = 0;
  memset(&v220, 0, sizeof(v220));
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFIndex v5 = *(void (**)(CMTimeRange *__return_ptr, uint64_t))(v4 + 8);
  if (v5)
  {
    v5(&v220, a1);
  }
  else
  {
    uint64_t v6 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
    *(_OWORD *)&v220.start.CMTime value = *MEMORY[0x1E4F1FA20];
    *(_OWORD *)&v220.start.CMTimeEpoch epoch = v6;
    *(_OWORD *)&v220.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  }
  CFTypeID v218 = 0;
  CFTypeID v219 = 0;
  CFTypeID v216 = 0;
  CFTypeID v217 = 0;
  int v215 = 0;
  uint64_t CMBaseObject = FigCaptionGetCMBaseObject(a1);
  BOOL v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
  if (!v10
    || (uint64_t v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        v10(CMBaseObject, @"CaptionData", *MEMORY[0x1E4F1CF80], &v219)))
  {
    FigSignalErrorAt();
    goto LABEL_215;
  }
  CFAllocatorRef v12 = FigCaptionDataGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v14 + 48);
  if (v15 && !v15(v12, *MEMORY[0x1E4F1FEE0], v11, &v215) && FigCFEqual())
  {
    FigCaptionRendererPaintOnCaptionCreate(v221);
    FigCaptionRendererPaintOnCaptionSetAnimationEnabled((uint64_t)v221[0], 1);
  }
  else
  {
    FigCaptionRendererCaptionCreate(v221);
  }
  *(_OWORD *)&time.start.CMTime value = *(_OWORD *)&v220.start.value;
  time.start.CMTimeEpoch epoch = v220.start.epoch;
  CMTimeGetSeconds(&time.start);
  CMTime time = v220;
  CMTimeRangeGetEnd(&v214, &time);
  CMTimeGetSeconds(&v214);
  uint64_t v16 = v221[0];
  double FigBaseObject = FigBytePumpGetFigBaseObject(v17);
  CFIndex v20 = v19;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v22 = *(void *)(ProtocolVTable + 16);
    if (v22)
    {
      uint64_t v23 = *(void (**)(const void *, double, double))(v22 + 16);
      if (v23) {
        v23(v16, FigBaseObject, v20);
      }
    }
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v11, 0);
  uint64_t v25 = FigCaptionDataGetCMBaseObject();
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  double v28 = *(void (**)(uint64_t, void, const __CFAllocator *, CFStringRef *))(v27 + 48);
  if (v28) {
    v28(v25, *MEMORY[0x1E4F1FF50], v11, &v217);
  }
  if (v217 && CFStringGetLength(v217) >= 1)
  {
    CFStringAppend(Mutable, v217);
    uint64_t v29 = CFAttributedStringCreate(v11, Mutable, 0);
    CFMutableDictionaryRef MutableCopy = CFAttributedStringCreateMutableCopy(v11, 0, v29);
    if (v29) {
      CFRelease(v29);
    }
    uint64_t v31 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v32 = v221[0];
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v33 = CMBaseObjectGetProtocolVTable();
    if (v33)
    {
      uint64_t v34 = *(void *)(v33 + 16);
      if (v34)
      {
        uint64_t v35 = *(void (**)(const void *, CFMutableDictionaryRef))(v34 + 8);
        if (v35) {
          v35(v32, v31);
        }
      }
    }
    time.start.CMTime value = 0;
    Boolean v36 = FigCaptionDataGetCMBaseObject();
    double v37 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v37) {
      CFIndex v38 = v37;
    }
    else {
      CFIndex v38 = 0;
    }
    CFIndex v39 = *(void (**)(uint64_t, void, const __CFAllocator *, CMTimeRange *))(v38 + 48);
    if (v39) {
      v39(v36, *MEMORY[0x1E4F1FF58], v11, &time);
    }
    Initialint Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
    if (InitialValue)
    {
      uint64_t v41 = InitialValue;
      if (!CFEqual(InitialValue, (CFTypeRef)*MEMORY[0x1E4F20250])
        && !CFEqual(v41, (CFTypeRef)*MEMORY[0x1E4F20238])
        && !CFEqual(v41, (CFTypeRef)*MEMORY[0x1E4F20230])
        && !CFEqual(v41, (CFTypeRef)*MEMORY[0x1E4F20240]))
      {
        CFEqual(v41, (CFTypeRef)*MEMORY[0x1E4F20248]);
      }
    }
    FigCFDictionarySetValue();
    if (time.start.value) {
      CFRelease((CFTypeRef)time.start.value);
    }
    long long v42 = copyRangedValuesOfStyleProperty((uint64_t)v219, *MEMORY[0x1E4F201C8]);
    FigCFDictionarySetValue();
    time.start.CMTime value = *MEMORY[0x1E4F1F600];
    *(void *)&time.start.CMTimeScale timescale = MutableCopy;
    v222.length = CFArrayGetCount(v42);
    v222.locatioCFIndex n = 0;
    CFArrayApplyFunction(v42, v222, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v42) {
      CFRelease(v42);
    }
    uint64_t v43 = copyRangedValuesOfStyleProperty((uint64_t)v219, *MEMORY[0x1E4F20180]);
    FigCFDictionarySetValue();
    time.start.CMTime value = *MEMORY[0x1E4F1F558];
    *(void *)&time.start.CMTimeScale timescale = MutableCopy;
    v223.length = CFArrayGetCount(v43);
    v223.locatioCFIndex n = 0;
    CFArrayApplyFunction(v43, v223, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v43) {
      CFRelease(v43);
    }
    uint64_t v44 = copyRangedValuesOfStyleProperty((uint64_t)v219, *MEMORY[0x1E4F20160]);
    FigCFDictionarySetValue();
    time.start.CMTime value = *MEMORY[0x1E4F1F630];
    *(void *)&time.start.CMTimeScale timescale = MutableCopy;
    v224.length = CFArrayGetCount(v44);
    v224.locatioCFIndex n = 0;
    CFArrayApplyFunction(v44, v224, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v44) {
      CFRelease(v44);
    }
    uint64_t v45 = copyRangedValuesOfStyleProperty((uint64_t)v219, *MEMORY[0x1E4F20140]);
    FigCFDictionarySetValue();
    time.start.CMTime value = *MEMORY[0x1E4F1F718];
    *(void *)&time.start.CMTimeScale timescale = MutableCopy;
    v225.length = CFArrayGetCount(v45);
    v225.locatioCFIndex n = 0;
    CFArrayApplyFunction(v45, v225, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v45) {
      CFRelease(v45);
    }
    int v46 = copyRangedValuesOfStyleProperty((uint64_t)v219, *MEMORY[0x1E4F20138]);
    FigCFDictionarySetValue();
    time.start.CMTime value = *MEMORY[0x1E4F1F598];
    *(void *)&time.start.CMTimeScale timescale = MutableCopy;
    v226.length = CFArrayGetCount(v46);
    v226.locatioCFIndex n = 0;
    CFArrayApplyFunction(v46, v226, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v46) {
      CFRelease(v46);
    }
    double v47 = copyRangedValuesOfStyleProperty((uint64_t)v219, *MEMORY[0x1E4F201C0]);
    FigCFDictionarySetValue();
    time.start.CMTime value = *MEMORY[0x1E4F1F6B8];
    *(void *)&time.start.CMTimeScale timescale = MutableCopy;
    v227.length = CFArrayGetCount(v47);
    v227.locatioCFIndex n = 0;
    CFArrayApplyFunction(v47, v227, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v47) {
      CFRelease(v47);
    }
    int v48 = copyRangedValuesOfStyleProperty((uint64_t)v219, *MEMORY[0x1E4F201D0]);
    FigCFDictionarySetValue();
    time.start.CMTime value = *MEMORY[0x1E4F1F618];
    *(void *)&time.start.CMTimeScale timescale = MutableCopy;
    v228.length = CFArrayGetCount(v48);
    v228.locatioCFIndex n = 0;
    CFArrayApplyFunction(v48, v228, (CFArrayApplierFunction)stylePropertyRangeValueApplier, &time);
    if (v48) {
      CFRelease(v48);
    }
    FigCFDictionarySetValue();
    if (*(unsigned char *)(DerivedStorage + 16))
    {
      FigCFDictionarySetValue();
      unint64_t v49 = v221[0];
      FigCaptionRendererCaptionProtocolGetProtocolID();
      CFTypeRef v50 = CMBaseObjectGetProtocolVTable();
      if (!v50) {
        goto LABEL_206;
      }
      uint64_t v51 = *(void *)(v50 + 16);
      if (!v51) {
        goto LABEL_206;
      }
      CFTypeRef v52 = *(unsigned int (**)(const void *, __CFString *))(v51 + 56);
      if (!v52 || v52(v49, @"ja-JP")) {
        goto LABEL_206;
      }
    }
    CFTypeID v212 = 0;
    double v53 = FigCaptionDataGetCMBaseObject();
    int v54 = *(void *)(CMBaseObjectGetVTable() + 8);
    int v55 = v54 ? v54 : 0;
    CFRange v56 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v55 + 48);
    if (!v56 || v56(v53, *MEMORY[0x1E4F1FF20], v11, &v212)) {
      goto LABEL_206;
    }
    if (!v212)
    {
LABEL_145:
      CFDictionaryRef Copy = CFAttributedStringCreateCopy(v11, MutableCopy);
      long long v112 = v221[0];
      FigCaptionRendererCaptionProtocolGetProtocolID();
      long long v113 = CMBaseObjectGetProtocolVTable();
      if (v113)
      {
        unsigned int v114 = *(void *)(v113 + 16);
        if (v114)
        {
          CFRange v115 = *(void (**)(const void *, CFAttributedStringRef))(v114 + 24);
          if (v115) {
            v115(v112, Copy);
          }
        }
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), v221[0]);
      goto LABEL_207;
    }
    CMTime value = 0;
    CFIndex v57 = FigCaptionRegionGetCMBaseObject();
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
    double v59 = v58 ? v58 : 0;
    unint64_t v60 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFStringRef *))(v59 + 48);
    if (!v60 || v60(v57, *MEMORY[0x1E4F20018], v11, &v216)) {
      goto LABEL_206;
    }
    if (v216)
    {
      int32_t v61 = CFStringCompare(v216, (CFStringRef)*MEMORY[0x1E4F20048], 0);
      if (CFStringCompare(v216, (CFStringRef)*MEMORY[0x1E4F20028], 0))
      {
        if (CFStringCompare(v216, (CFStringRef)*MEMORY[0x1E4F20030], 0))
        {
          if (CFEqual(v216, (CFStringRef)*MEMORY[0x1E4F20040]))
          {
            CFRange v116 = v221[0];
            FigCaptionRendererCaptionProtocolGetProtocolID();
            CFRange v117 = CMBaseObjectGetProtocolVTable();
            if (v117)
            {
              CFRange v118 = *(void *)(v117 + 16);
              if (v118)
              {
                CFRange v119 = *(void (**)(const void *, uint64_t))(v118 + 40);
                if (v119) {
                  v119(v116, 3);
                }
              }
            }
            FigCaptionRendererSRTRegionCreate(&value);
            FigCaptionRendererSRTRegionSetWritingMode((uint64_t)value, 0);
            FigCaptionRendererSRTRegionSetAlignment((uint64_t)value, 2, 3);
            CFTypeID v202 = 18;
            CMTime v78 = 100;
            int v200 = 50;
            uint64_t v201 = 50;
LABEL_112:
            CFTypeRef v88 = value;
            CFTypeRef v89 = v216;
            FigCaptionRendererRegionProtocolGetProtocolID();
            __int16 v90 = CMBaseObjectGetProtocolVTable();
            if (v90)
            {
              int v91 = *(void *)(v90 + 16);
              if (v91)
              {
                __int16 v92 = *(void (**)(void *, CFStringRef))(v91 + 8);
                if (v92) {
                  v92(v88, v89);
                }
              }
            }
            char v93 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v94 = CMBaseObjectGetProtocolVTable();
            if (v94)
            {
              CFIndex v95 = *(void *)(v94 + 16);
              if (v95)
              {
                long long v96 = *(void (**)(void *, uint64_t))(v95 + 24);
                if (v96) {
                  v96(v93, v78);
                }
              }
            }
            CFStringRef v97 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v98 = CMBaseObjectGetProtocolVTable();
            if (v98)
            {
              uint64_t v99 = *(void *)(v98 + 16);
              if (v99)
              {
                long long v100 = *(void (**)(void *, void))(v99 + 40);
                if (v100) {
                  v100(v97, v202);
                }
              }
            }
            uint64_t v101 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v102 = CMBaseObjectGetProtocolVTable();
            if (v102)
            {
              unsigned int v103 = *(void *)(v102 + 16);
              if (v103)
              {
                unsigned int v104 = *(void (**)(void *, double, double))(v103 + 56);
                if (v104) {
                  v104(v101, 50.0, 50.0);
                }
              }
            }
            CMTime v105 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            __int16 v106 = CMBaseObjectGetProtocolVTable();
            if (v106)
            {
              uint64_t v107 = *(void *)(v106 + 16);
              if (v107)
              {
                __int16 v108 = *(void (**)(void *, double, double))(v107 + 72);
                if (v108) {
                  v108(v105, (double)v200, (double)(100 - v201));
                }
              }
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), value);
            if (value)
            {
              CFRelease(value);
              CMTime value = 0;
            }
            FigCFDictionarySetValue();
            uint64_t v109 = v216;
            if (!v216) {
              goto LABEL_143;
            }
LABEL_142:
            CFRelease(v109);
LABEL_143:
            if (v212) {
              CFRelease(v212);
            }
            goto LABEL_145;
          }
          if (v218)
          {
            CFRelease(v218);
            CFTypeID v218 = 0;
          }
          CFTypeRef v62 = FigCaptionRegionGetCMBaseObject();
          uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v63) {
            uint64_t v64 = v63;
          }
          else {
            uint64_t v64 = 0;
          }
          uint64_t v125 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v64 + 48);
          if (v125 && !v125(v62, *MEMORY[0x1E4F20090], v11, &v218))
          {
            if (v218)
            {
              FigCaptionDynamicStyleGetInitialValue();
              FigGeometryDimensionMakeFromDictionary();
              FigGeometryDimensionGetCGFloat();
              v127 = (int)v126;
              if (v218)
              {
                CFRelease(v218);
                CFTypeID v218 = 0;
              }
            }
            else
            {
              v127 = 50;
            }
            CFTypeID v131 = FigCaptionRegionGetCMBaseObject();
            CFTypeID v132 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v132) {
              CFTypeID v133 = v132;
            }
            else {
              CFTypeID v133 = 0;
            }
            CFTypeID v134 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v133 + 48);
            if (v134) {
              v134(v131, *MEMORY[0x1E4F20008], v11, &v218);
            }
            if (v218)
            {
              FigCaptionDynamicStyleGetInitialValue();
              FigGeometryDimensionMakeFromDictionary();
              FigGeometryDimensionGetCGFloat();
              CFTypeID v136 = (int)v135;
              if (v218)
              {
                CFRelease(v218);
                CFTypeID v218 = 0;
              }
            }
            else
            {
              CFTypeID v136 = 50;
            }
            CFTypeID v137 = FigCaptionRegionGetCMBaseObject();
            CFArrayRef v138 = *(void *)(CMBaseObjectGetVTable() + 8);
            CFTypeID v139 = v138 ? v138 : 0;
            v140 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v139 + 48);
            if (v140)
            {
              if (!v140(v137, *MEMORY[0x1E4F20070], v11, &v218))
              {
                int v199 = v61;
                memset(&time, 0, 32);
                FigCaptionDynamicStyleGetInitialValue();
                FigGeometryPointMakeFromDictionary();
                char v141 = *(double *)&time.start.value;
                uint64_t v142 = *(double *)&time.start.epoch;
                CMTime v78 = v127;
                CFTypeID v143 = v127 + ((int)v127 < 0);
                if (v136 >= 0) {
                  CFTypeID v144 = v136;
                }
                else {
                  CFTypeID v144 = v136 + 1;
                }
                CFTypeID v145 = ((float)v136 / 5.33 + 0.5);
                if (v145 >= 18) {
                  CFTypeID v145 = 18;
                }
                CFTypeID v202 = v145;
                if (v218)
                {
                  CFRelease(v218);
                  CFTypeID v218 = 0;
                }
                CFTypeRef v146 = FigCaptionRegionGetCMBaseObject();
                int v147 = *(void *)(CMBaseObjectGetVTable() + 8);
                v148 = v147 ? v147 : 0;
                CFArrayRef v151 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v148 + 48);
                if (v151)
                {
                  if (!v151(v146, *MEMORY[0x1E4F20098], v11, &v218))
                  {
                    int v200 = (int)v141 + (v143 >> 1);
                    uint64_t v201 = (int)v142 + (v144 >> 1);
                    unsigned int v152 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
                    if (v152 && (unsigned int v153 = v152, CFStringCompare((CFStringRef)*MEMORY[0x1E4F200B8], v152, 1uLL)))
                    {
                      CFDictionaryRef v76 = 1;
                      if (CFStringCompare((CFStringRef)*MEMORY[0x1E4F200C0], v153, 1uLL))
                      {
                        if (CFStringCompare((CFStringRef)*MEMORY[0x1E4F200D0], v153, 1uLL))
                        {
                          if (CFStringCompare((CFStringRef)*MEMORY[0x1E4F200C8], v153, 1uLL))
                          {
                            CFDictionaryRef v76 = 0;
                            __int16 v79 = 0;
                            CFTypeRef v77 = 0;
                            goto LABEL_233;
                          }
                          CFDictionaryRef v76 = 3;
                          CFTypeID v167 = (CFTypeRef *)MEMORY[0x1E4F1F9B8];
                        }
                        else
                        {
                          CFDictionaryRef v76 = 2;
                          CFTypeID v167 = (CFTypeRef *)MEMORY[0x1E4F1F9C0];
                        }
                        v231.length = CFAttributedStringGetLength(MutableCopy);
                        v231.locatioCFIndex n = 0;
                        CFAttributedStringSetAttribute(MutableCopy, v231, (CFStringRef)*MEMORY[0x1E4F1F720], *v167);
                        FigCFDictionarySetValue();
                        CFTypeID v168 = v221[0];
                        FigCaptionRendererCaptionProtocolGetProtocolID();
                        v169 = CMBaseObjectGetProtocolVTable();
                        if (v169)
                        {
                          unsigned int v170 = *(void *)(v169 + 16);
                          if (v170)
                          {
                            unsigned int v171 = *(void (**)(const void *, __CFString *))(v170 + 56);
                            if (v171) {
                              v171(v168, @"ja-JP");
                            }
                          }
                        }
                        CFTypeRef v77 = 1;
                        __int16 v79 = 3;
LABEL_233:
                        if (v199 == kCFCompareEqualTo)
                        {
                          FigCaptionRendererStackLayoutRegionCreate(&value);
                          int v156 = value;
                          FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
                          v157 = CMBaseObjectGetProtocolVTable();
                          if (v157)
                          {
                            CFArrayRef v158 = *(void *)(v157 + 16);
                            if (v158)
                            {
                              CFArrayRef v159 = *(void (**)(void *, void))(v158 + 8);
                              if (v159) {
                                v159(v156, 0);
                              }
                            }
                          }
                          goto LABEL_112;
                        }
                        goto LABEL_107;
                      }
                    }
                    else
                    {
                      CFDictionaryRef v76 = 0;
                    }
                    __int16 v79 = 2;
                    CFTypeRef v77 = 2;
                    goto LABEL_233;
                  }
                }
              }
            }
          }
LABEL_206:
          CFDictionaryRef Copy = 0;
LABEL_207:
          if (v31) {
            CFRelease(v31);
          }
          if (Copy) {
            CFRelease(Copy);
          }
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          goto LABEL_213;
        }
        v230.length = CFAttributedStringGetLength(MutableCopy);
        v230.locatioCFIndex n = 0;
        CFAttributedStringSetAttribute(MutableCopy, v230, (CFStringRef)*MEMORY[0x1E4F1F720], (CFTypeRef)*MEMORY[0x1E4F1F9C0]);
        FigCFDictionarySetValue();
        CFTypeRef v80 = v221[0];
        FigCaptionRendererCaptionProtocolGetProtocolID();
        uint64_t v81 = CMBaseObjectGetProtocolVTable();
        if (v81)
        {
          uint64_t v82 = *(void *)(v81 + 16);
          if (v82)
          {
            unsigned int v83 = *(void (**)(const void *, __CFString *))(v82 + 56);
            if (v83) {
              v83(v80, @"ja-JP");
            }
          }
        }
        CFDictionaryRef v76 = 2;
        __int16 v79 = 3;
        CFTypeRef v77 = 1;
        int v200 = 92;
        uint64_t v201 = 50;
        CFTypeID v202 = 18;
        CMTime v78 = 15;
      }
      else
      {
        v229.length = CFAttributedStringGetLength(MutableCopy);
        v229.locatioCFIndex n = 0;
        CFAttributedStringSetAttribute(MutableCopy, v229, (CFStringRef)*MEMORY[0x1E4F1F720], (CFTypeRef)*MEMORY[0x1E4F1F9C0]);
        FigCFDictionarySetValue();
        long long v72 = v221[0];
        FigCaptionRendererCaptionProtocolGetProtocolID();
        long long v73 = CMBaseObjectGetProtocolVTable();
        if (v73)
        {
          uint64_t v74 = *(void *)(v73 + 16);
          if (v74)
          {
            CFIndex v75 = *(void (**)(const void *, __CFString *))(v74 + 56);
            if (v75) {
              v75(v72, @"ja-JP");
            }
          }
        }
        CFDictionaryRef v76 = 2;
        CFTypeRef v77 = 1;
        int v200 = 8;
        uint64_t v201 = 50;
        CFTypeID v202 = 18;
        CMTime v78 = 15;
        __int16 v79 = 1;
      }
LABEL_107:
      __int16 v84 = v221[0];
      FigCaptionRendererCaptionProtocolGetProtocolID();
      uint64_t v85 = CMBaseObjectGetProtocolVTable();
      if (v85)
      {
        CMTime v86 = *(void *)(v85 + 16);
        if (v86)
        {
          CMTime v87 = *(void (**)(const void *, uint64_t))(v86 + 40);
          if (v87) {
            v87(v84, 3);
          }
        }
      }
      FigCaptionRendereriTTRegionCreate(&value);
      FigCaptionRendererSRTRegionSetWritingMode((uint64_t)value, v76);
      FigCaptionRendererSRTRegionSetAlignment((uint64_t)value, v77, v79);
      goto LABEL_112;
    }
    CMTime cf = 0;
    CFTypeID v210 = 0;
    Boolean v208 = 0.0;
    CFIndex v65 = v221[0];
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v66 = CMBaseObjectGetProtocolVTable();
    if (v66)
    {
      CFIndex v67 = *(void *)(v66 + 16);
      if (v67)
      {
        CFIndex v68 = *(void (**)(const void *, uint64_t))(v67 + 40);
        if (v68) {
          v68(v65, 1);
        }
      }
    }
    CFArrayRef v69 = FigCaptionRegionGetCMBaseObject();
    uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v70) {
      uint64_t v71 = v70;
    }
    else {
      uint64_t v71 = 0;
    }
    __int16 v110 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v71 + 48);
    if (v110) {
      v110(v69, *MEMORY[0x1E4F20008], v11, &cf);
    }
    if (!cf) {
      goto LABEL_143;
    }
    FigCaptionDynamicStyleGetInitialValue();
    if (FigCaptionGeometryGetCellBasedDimensionFromDictionary())
    {
LABEL_141:
      uint64_t v109 = (CFStringRef)cf;
      if (!cf) {
        goto LABEL_143;
      }
      goto LABEL_142;
    }
    CFRange v120 = v208;
    if (v208 == 1.0)
    {
      CFRange v121 = *MEMORY[0x1E4F20070];
      unsigned int v122 = FigCaptionRegionGetCMBaseObject();
      unsigned int v123 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v123) {
        uint64_t v124 = v123;
      }
      else {
        uint64_t v124 = 0;
      }
      CFTypeID v149 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v124 + 48);
      if (v149) {
        v149(v122, v121, v11, &v210);
      }
      if (!v210) {
        goto LABEL_141;
      }
      FigCaptionDynamicStyleGetInitialValue();
      FigCFDictionarySetValue();
      int v150 = v210;
      if (!v210) {
        goto LABEL_141;
      }
    }
    else
    {
      if (v208 <= 1.0) {
        goto LABEL_141;
      }
      theString1 = 0;
      unsigned int v128 = FigCaptionRegionGetCMBaseObject();
      unsigned int v129 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v129) {
        CFTypeID v130 = v129;
      }
      else {
        CFTypeID v130 = 0;
      }
      char v154 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CFStringRef *))(v130 + 48);
      if (v154 && !v154(v128, *MEMORY[0x1E4F1FFC0], v11, &theString1) && theString1)
      {
        if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x1E4F1FF68], 0))
        {
          CFAllocatorRef v155 = *(const void **)(DerivedStorage + 24);
          if (v155)
          {
            CFRelease(v155);
            *(void *)(DerivedStorage + 24) = 0;
          }
        }
        else
        {
          memset(&time, 0, 32);
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          FigGeometryPointMake();
          CFTypeID v206 = 0;
          memset(v205, 0, sizeof(v205));
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          FigGeometryPointMake();
          uint64_t v160 = *(void *)(DerivedStorage + 24);
          if (v160)
          {
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v161 = CMBaseObjectGetProtocolVTable();
            if (v161)
            {
              v162 = *(void *)(v161 + 16);
              if (v162)
              {
                CFTypeID v163 = *(void (**)(uint64_t, int *))(v162 + 48);
                if (v163) {
                  v163(v160, &v206);
                }
              }
            }
            FigCaptionRendererCellStackLayoutRegionGetPosition(*(void *)(DerivedStorage + 24), v205);
          }
          int v164 = FigCaptionRegionGetCMBaseObject();
          CFBooleanRef v165 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v165) {
            int v166 = v165;
          }
          else {
            int v166 = 0;
          }
          CFTypeID v172 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v166 + 48);
          if (v172) {
            v172(v164, *MEMORY[0x1E4F20070], v11, &v210);
          }
          if (v210)
          {
            CFNumberRef v173 = FigCaptionDynamicStyleGetInitialValue();
            if (v210) {
              CFRelease(v210);
            }
            if (v173 && !FigCaptionGeometryGetCellBasedPointFromDictionary())
            {
              FigGeometryDimensionMake();
              FigGeometryDimensionMake();
              FigGeometryPointMake();
              *(_OWORD *)&time.start.CMTime value = v203;
              *(_OWORD *)&time.start.CMTimeEpoch epoch = v204;
            }
          }
          if (v206 >= 1
            && v206 == (int)v120
            && (Boolean v203 = *(_OWORD *)&time.start.value,
                CFTypeID v204 = *(_OWORD *)&time.start.epoch,
                FigGeometryPointEqualToPoint()))
          {
            uint64_t v174 = *(void **)(DerivedStorage + 24);
            if (v174) {
              uint64_t v174 = (void *)CFRetain(v174);
            }
            CMTime value = v174;
          }
          else
          {
            FigCaptionRendererCellStackLayoutRegionCreate(&value);
            CFTypeID v175 = value;
            FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
            Boolean v176 = CMBaseObjectGetProtocolVTable();
            if (v176)
            {
              CFTypeID v177 = *(void *)(v176 + 16);
              if (v177)
              {
                unsigned int v178 = *(void (**)(void *, void))(v177 + 8);
                if (v178) {
                  v178(v175, 0);
                }
              }
            }
            unsigned int v179 = CFStringCreateWithFormat(v11, 0, @"%p", value);
            CFTypeRef v180 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            unsigned int v181 = CMBaseObjectGetProtocolVTable();
            if (v181)
            {
              unsigned int v182 = *(void *)(v181 + 16);
              if (v182)
              {
                CFTypeID v183 = *(void (**)(void *, CFStringRef))(v182 + 8);
                if (v183) {
                  v183(v180, v179);
                }
              }
            }
            if (v179) {
              CFRelease(v179);
            }
            char v184 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            char v185 = CMBaseObjectGetProtocolVTable();
            if (v185)
            {
              CFArrayRef v186 = *(void *)(v185 + 16);
              if (v186)
              {
                CFTypeID v187 = *(void (**)(void *, void))(v186 + 40);
                if (v187) {
                  v187(v184, (int)v120);
                }
              }
            }
            CFBooleanRef v188 = value;
            FigCaptionRendererRegionProtocolGetProtocolID();
            CFTypeID v189 = CMBaseObjectGetProtocolVTable();
            if (v189)
            {
              v190 = *(void *)(v189 + 16);
              if (v190)
              {
                v191 = *(void (**)(void *, double, double))(v190 + 56);
                if (v191) {
                  v191(v188, 50.0, 50.0);
                }
              }
            }
            Boolean v203 = *(_OWORD *)&time.start.value;
            CFTypeID v204 = *(_OWORD *)&time.start.epoch;
            FigCaptionRendererCellStackLayoutRegionSetPosition((uint64_t)value, &v203);
            CFTypeID v192 = *(const void **)(DerivedStorage + 24);
            uint64_t v193 = value;
            *(void *)(DerivedStorage + 24) = value;
            if (v193) {
              CFRetain(v193);
            }
            if (v192) {
              CFRelease(v192);
            }
          }
        }
      }
      if (value)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), value);
        Boolean v194 = v216;
        if (!v216)
        {
          int v195 = value;
          FigCaptionRendererRegionProtocolGetProtocolID();
          int v196 = CMBaseObjectGetProtocolVTable();
          if (v196)
          {
            int v197 = *(void *)(v196 + 16);
            if (v197)
            {
              int v198 = *(void (**)(void *, CFStringRef *))(v197 + 16);
              if (v198) {
                v198(v195, &v216);
              }
            }
          }
          if (v216)
          {
            CFRetain(v216);
            Boolean v194 = v216;
          }
          else
          {
            Boolean v194 = 0;
          }
        }
        CFDictionarySetValue(v31, @"region", v194);
        if (value) {
          CFRelease(value);
        }
      }
      if (v216) {
        CFRelease(v216);
      }
      int v150 = theString1;
      if (!theString1) {
        goto LABEL_141;
      }
    }
    CFRelease(v150);
    goto LABEL_141;
  }
LABEL_213:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_215:
  if (v221[0])
  {
    CFRelease(v221[0]);
    v221[0] = 0;
  }
  if (v217)
  {
    CFRelease(v217);
    CFTypeID v217 = 0;
  }
  if (v215)
  {
    CFRelease(v215);
    int v215 = 0;
  }
  if (v219) {
    CFRelease(v219);
  }
}

__CFArray *copyRangedValuesOfStyleProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v8 = *(uint64_t (**)(uint64_t))(v7 + 8);
    if (v8) {
      CFStringRef v9 = (const __CFString *)v8(a1);
    }
    else {
      CFStringRef v9 = &stru_1EE53F4B8;
    }
    CFIndex Length = CFStringGetLength(v9);
    if (Length >= 1)
    {
      CFIndex v11 = Length;
      CFIndex v12 = 0;
      while (1)
      {
        CFTypeRef cf = 0;
        CMTime value = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v14 = v13 ? v13 : 0;
        uint64_t v15 = *(unsigned int (**)(uint64_t, CFIndex, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(v14 + 24);
        if (v15)
        {
          if (!v15(a1, v12, a2, v4, &cf, &v30)) {
            break;
          }
        }
LABEL_27:
        if (cf) {
          CFRelease(cf);
        }
        if (v12 >= v11) {
          return Mutable;
        }
      }
      uint64_t v16 = FigCaptionRendererIntervalCreate(&value);
      double FigBaseObject = FigBytePumpGetFigBaseObject(v16);
      double v19 = v18;
      CFIndex v20 = value;
      FigCaptionRendererIntervalProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v22 = *(void *)(ProtocolVTable + 16);
        if (v22)
        {
          uint64_t v23 = *(void (**)(void *, double, double))(v22 + 16);
          if (v23) {
            v23(v20, FigBaseObject, v19);
          }
        }
      }
      if (cf)
      {
        CFTypeID v24 = CFGetTypeID(cf);
        uint64_t TypeID = FigCaptionDynamicStyleGetTypeID();
        Initialint Value = cf;
        if (v24 == TypeID)
        {
          uint64_t v27 = value;
          Initialint Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
          double v28 = v27;
LABEL_24:
          FigCaptionRendererIntervalSetValue((uint64_t)v28, InitialValue);
          CFArrayAppendValue(Mutable, value);
          if (value) {
            CFRelease(value);
          }
          v12 += v31;
          goto LABEL_27;
        }
      }
      else
      {
        Initialint Value = 0;
      }
      double v28 = value;
      goto LABEL_24;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

void stylePropertyRangeValueApplier(uint64_t a1, uint64_t a2)
{
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v42 = v4;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, double *))(v6 + 8);
      if (v7) {
        v7(a1, &FigBaseObject);
      }
    }
  }
  uint64_t Value = FigCaptionRendererIntervalGetValue();
  CFTypeRef cf = 0;
  if (!Value) {
    return;
  }
  CFNumberRef v9 = (const __CFNumber *)Value;
  if (CFEqual(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E4F1F718]))
  {
    int valuePtr = 0;
    CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr != 1) {
      return;
    }
LABEL_17:
    CFNumberRef v13 = (const __CFNumber *)*MEMORY[0x1E4F1CFD0];
    v10.locatioCFIndex n = (uint64_t)FigBaseObject;
    v10.length = (uint64_t)v42;
    CFStringRef v12 = *(const __CFString **)a2;
    CFIndex v11 = *(__CFAttributedString **)(a2 + 8);
    goto LABEL_18;
  }
  if (CFEqual(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E4F1F630]))
  {
    uint64_t v14 = (CFStringRef *)MEMORY[0x1E4F20168];
    goto LABEL_16;
  }
  if (CFEqual(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E4F1F558]))
  {
    uint64_t v14 = (CFStringRef *)MEMORY[0x1E4F20188];
LABEL_16:
    if (CFStringCompare((CFStringRef)v9, *v14, 0)) {
      return;
    }
    goto LABEL_17;
  }
  if (CFEqual(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E4F1F6B8]))
  {
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    double v18 = *(uint64_t (**)(const __CFNumber *))(v16 + 8);
    if (v18) {
      CFStringRef v19 = (const __CFString *)v18(v9);
    }
    else {
      CFStringRef v19 = &stru_1EE53F4B8;
    }
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return;
    }
    uint64_t v22 = Mutable;
    uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v25 + 48);
    if (!v26 || (v26(CMBaseObject, *MEMORY[0x1E4F1FF28], v20, &cf), !cf))
    {
LABEL_49:
      uint64_t v29 = FigCaptionDataGetCMBaseObject();
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v31 + 48);
      if (v32) {
        v32(v29, *MEMORY[0x1E4F1FF30], v20, &cf);
      }
      if (cf)
      {
        FigCaptionDynamicStyleGetInitialValue();
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v33 = (const void **)MEMORY[0x1E4F1F900];
        int v34 = FigCFEqual();
        uint64_t v35 = (const void **)MEMORY[0x1E4F1F8F8];
        if (!v34) {
          uint64_t v35 = v33;
        }
        CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F1F6D0], *v35);
      }
      UInt32 = (const void *)FigCFNumberCreateUInt32();
      if (UInt32)
      {
        CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F1F6E0], UInt32);
        CFAttributedStringRef v37 = CFAttributedStringCreate(v20, v19, v22);
        if (v37)
        {
          CFAttributedStringRef v38 = v37;
          v43.locatioCFIndex n = (uint64_t)FigBaseObject;
          v43.length = (uint64_t)v42;
          CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(a2 + 8), v43, *(CFStringRef *)a2, v37);
          CFRelease(v38);
        }
      }
      CFRelease(v22);
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_67;
    }
    FigCaptionDynamicStyleGetInitialValue();
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (FigCFEqual())
    {
      uint64_t v27 = (const void **)MEMORY[0x1E4F1F8F0];
    }
    else
    {
      double v28 = (const void *)*MEMORY[0x1E4F1F8C0];
      if (FigCFEqual()) {
        goto LABEL_48;
      }
      if (!FigCFEqual())
      {
        if (FigCFEqual()) {
          double v28 = (const void *)*MEMORY[0x1E4F1F8D0];
        }
        goto LABEL_48;
      }
      uint64_t v27 = (const void **)MEMORY[0x1E4F1F8C8];
    }
    double v28 = *v27;
LABEL_48:
    CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E4F1F6C0], v28);
    goto LABEL_49;
  }
  if (CFStringCompare(*(CFStringRef *)a2, (CFStringRef)*MEMORY[0x1E4F1F618], 0))
  {
    v10.locatioCFIndex n = (uint64_t)FigBaseObject;
    v10.length = (uint64_t)v42;
    CFStringRef v12 = *(const __CFString **)a2;
    CFIndex v11 = *(__CFAttributedString **)(a2 + 8);
    CFNumberRef v13 = v9;
LABEL_18:
    CFAttributedStringSetAttribute(v11, v10, v12, v13);
    return;
  }
  if (CFEqual((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E4F201F0]))
  {
    int v17 = 1;
LABEL_66:
    int valuePtr = v17;
    UInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    v44.locatioCFIndex n = (uint64_t)FigBaseObject;
    v44.length = (uint64_t)v42;
    CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(a2 + 8), v44, *(CFStringRef *)a2, UInt32);
LABEL_67:
    if (UInt32) {
      CFRelease(UInt32);
    }
    return;
  }
  if (CFEqual((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E4F20200]))
  {
    int v17 = 2;
    goto LABEL_66;
  }
  if (CFEqual((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E4F201F8]))
  {
    int v17 = 3;
    goto LABEL_66;
  }
  if (CFEqual((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E4F201E0]))
  {
    int v17 = 4;
    goto LABEL_66;
  }
  if (CFEqual((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E4F201D8]))
  {
    int v17 = (int)v42;
    if (((int)v42 - 1) <= 3) {
      goto LABEL_66;
    }
  }
}

uint64_t FigSampleBufferConsumerStartServer()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  uint64_t v1 = FigXPCServerStart();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t HandleSampleBufferConsumerRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  *(void *)&long long v7 = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294951138;
  }
  return v6;
}

uint64_t FigXPCSampleBufferConsumerServerAssociateNeighborFigSampleBufferConsumer(int a1, CFTypeRef cf)
{
  uint64_t v5 = 0;
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == FigSampleBufferConsumerGetTypeID()))
  {
    uint64_t result = CreateSampleBufferConsumerServerState(cf, &v5);
    if (!result)
    {
      return FigXPCServerAssociateObjectWithNeighborProcess();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t CreateSampleBufferConsumerServerState(const void *a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040AE0EF783uLL);
  if (v4)
  {
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    uint64_t result = 0;
    *uint64_t v4 = v5;
    v4[4] = 0;
    *((unsigned char *)v4 + 48) = 0;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *a2 = v4;
  return result;
}

void DisposeSampleBufferConsumerServerState(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 48))
    {
      CFTypeRef v2 = *(CFTypeRef *)a1;
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void (**)(CFTypeRef, uint64_t))(v5 + 40);
      if (v6) {
        v6(v2, v3);
      }
      *(unsigned char *)(a1 + 48) = 0;
    }
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0;
    }
    long long v7 = *(const void **)(a1 + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 24) = 0;
    }
    BOOL v8 = *(const void **)(a1 + 32);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 32) = 0;
    }
    FigXPCRelease();
    free((void *)a1);
  }
}

uint64_t FigXPCSampleBufferConsumerServerAssociateCopiedNeighborFigSampleBufferConsumer(int a1, CFTypeRef cf)
{
  uint64_t v5 = 0;
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == FigSampleBufferConsumerGetTypeID()))
  {
    uint64_t result = CreateSampleBufferConsumerServerState(cf, &v5);
    if (!result)
    {
      return FigXPCServerAssociateCopiedObjectWithNeighborProcess();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigXPCSampleBufferConsumerServerAssociateCopiedSampleBufferConsumerWithNeighborProcessByPID(int a1, CFTypeRef cf)
{
  uint64_t v5 = 0;
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == FigSampleBufferConsumerGetTypeID()))
  {
    uint64_t result = CreateSampleBufferConsumerServerState(cf, &v5);
    if (!result)
    {
      return FigXPCServerAssociateCopiedObjectWithNeighborProcessByPID();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigXPCSampleBufferConsumerServerLowWaterTriggerCallback(uint64_t a1)
{
  if (!FigXPCCreateBasicMessage()) {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t FigVTTCueCreate(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigVTTNodeGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v3 = FigVTTInitializeNodeBaseStorage((CFMutableDictionaryRef *)DerivedStorage);
      if (!v3)
      {
        *(void *)(DerivedStorage + 16) = 0;
        *a2 = 0;
      }
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figVTTCue_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }

  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTCue_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"cue: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figVTTCue_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 1;
  return 0;
}

uint64_t figVTTCue_setNodeValue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (CFTypeID v4 = CFGetTypeID(a2), v4 != CFStringGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(const void **)(DerivedStorage + 16);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 16) = 0;
    }
    uint64_t v6 = *(const void **)(DerivedStorage + 8);
    *(void *)(DerivedStorage + 8) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v6) {
      CFRelease(v6);
    }
    return 0;
  }
}

uint64_t figVTTCue_copyNodeValue(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(void *)(DerivedStorage + 16))
    {
      CFAllocatorRef v5 = CFGetAllocator(a1);
      CFStringCreateMutable(v5, 0);
      FigCFArrayApplyFunction();
      CFDictionaryRef Copy = 0;
    }
    else
    {
      long long v7 = *(const void **)(DerivedStorage + 8);
      if (!v7 || (CFDictionaryRef Copy = (void *)CFRetain(v7)) == 0)
      {
        CFAllocatorRef v8 = CFGetAllocator(a1);
        CFDictionaryRef Copy = (void *)CFStringCreateCopy(v8, @" ");
      }
    }
    *a2 = Copy;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTCue_copyChildNodeArray(uint64_t a1, void *a2)
{
  CFTypeRef v3 = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 16);
  if (v3) {
    CFTypeRef v3 = CFRetain(v3);
  }
  *a2 = v3;
  return 0;
}

uint64_t figVTTCue_copyNodeDocumentSerialization(const void *a1, __CFString **a2)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  CFStringRef theString = 0;
  CFDictionaryRef theDict = 0;
  if (!a2)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_128;
  }
  *a2 = 0;
  uint64_t v3 = FigVTTNodeCopyAttributes((uint64_t)a1, &theDict);
  if (v3)
  {
    uint64_t v16 = v3;
    CFStringRef v54 = 0;
    CFMutableStringRef Mutable = 0;
    goto LABEL_122;
  }
  uint64_t Value = CFDictionaryGetValue(theDict, @"id");
  CFDictionaryRef v68 = 0;
  uint64_t v4 = FigVTTNodeCopyAttributes((uint64_t)a1, &v68);
  if (v4) {
    goto LABEL_144;
  }
  if (!v68)
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_144:
    uint64_t v16 = v4;
    CFStringRef v60 = 0;
    goto LABEL_25;
  }
  CFAllocatorRef v5 = CFDictionaryGetValue(v68, @"raw_starttime");
  uint64_t v6 = CFDictionaryGetValue(v68, @"raw_endtime");
  if (v5) {
    CFAllocatorRef v5 = CFRetain(v5);
  }
  if (v6) {
    uint64_t v6 = CFRetain(v6);
  }
  if (v5)
  {
    if (v6) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(v68, @"starttime");
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == CFDictionaryGetTypeID())
    {
      CMTimeMakeFromDictionary(&v71, v8);
      CFDictionaryRef theArray = (CFDictionaryRef)v71.value;
      CMTimeScale timescale = v71.timescale;
      if ((v71.flags & 0x1D) == 1)
      {
        v71.CMTime value = (CMTimeValue)theArray;
        v71.CMTimeScale timescale = timescale;
        CFStringRef v10 = FigVTTCopyCMTimeAsTimeStamp(&v71);
        if (v10)
        {
          CFAllocatorRef v5 = v10;
          if (v6) {
            goto LABEL_22;
          }
LABEL_17:
          CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(v68, @"endtime");
          if (!v11) {
            goto LABEL_153;
          }
          CFDictionaryRef v12 = v11;
          CFTypeID v13 = CFGetTypeID(v11);
          if (v13 != CFDictionaryGetTypeID()
            || (CMTimeMakeFromDictionary(&v71, v12),
                CFDictionaryRef theArray = (CFDictionaryRef)v71.value,
                CMTimeScale timescale = v71.timescale,
                (v71.flags & 0x1D) != 1)
            || (v71.CMTime value = (CMTimeValue)theArray,
                v71.CMTimeScale timescale = timescale,
                (CFStringRef v14 = FigVTTCopyCMTimeAsTimeStamp(&v71)) == 0))
          {
LABEL_153:
            uint64_t v16 = FigSignalErrorAt();
            CFStringRef v60 = 0;
            uint64_t v6 = 0;
LABEL_23:
            CFRelease(v5);
            if (!v6) {
              goto LABEL_25;
            }
            goto LABEL_24;
          }
          uint64_t v6 = v14;
LABEL_22:
          CFAllocatorRef v15 = CFGetAllocator(a1);
          CFStringRef v60 = CFStringCreateWithFormat(v15, 0, @"%@ --> %@", v5, v6);
          uint64_t v16 = 0;
          goto LABEL_23;
        }
      }
    }
  }
  uint64_t v16 = FigSignalErrorAt();
  CFStringRef v60 = 0;
  if (v6) {
LABEL_24:
  }
    CFRelease(v6);
LABEL_25:
  if (v68) {
    CFRelease(v68);
  }
  if (v16)
  {
    CFMutableStringRef Mutable = 0;
LABEL_142:
    CFStringRef v54 = v60;
    goto LABEL_122;
  }
  CFDictionaryRef theArray = 0;
  v71.CMTime value = (CMTimeValue)@"regionID";
  *(void *)&v71.CMTimeScale timescale = @"region";
  v71.CMTimeEpoch epoch = (CMTimeEpoch)figVTTCue_MapCueAttributeToCueSettings_regionID;
  long long v72 = @"align";
  long long v73 = @"align";
  uint64_t v74 = figVTTCue_MapCueAttributeToCueSettings_passThroughString;
  CFIndex v75 = @"position";
  CFDictionaryRef v76 = @"position";
  CFTypeRef v77 = figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension;
  CMTime v78 = @"line";
  __int16 v79 = @"line";
  CFTypeRef v80 = figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension;
  uint64_t v81 = @"size";
  uint64_t v82 = @"size";
  unsigned int v83 = figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension;
  __int16 v84 = @"writingMode";
  uint64_t v85 = @"vertical";
  CMTime v86 = figVTTCue_MapCueAttributeToCueSettings_writingMode;
  uint64_t v17 = FigVTTNodeCopyAttributes((uint64_t)a1, &theArray);
  if (v17) {
    goto LABEL_146;
  }
  if (!theArray)
  {
    uint64_t v17 = FigSignalErrorAt();
LABEL_146:
    uint64_t v16 = v17;
    CFMutableStringRef Mutable = 0;
LABEL_149:
    CFDictionaryRef v21 = 0;
    goto LABEL_43;
  }
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v18, 0);
  if (!Mutable)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_149;
  }
  CFAllocatorRef v20 = CFGetAllocator(a1);
  CFDictionaryRef v21 = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 144; i += 24)
  {
    if (CFDictionaryGetValue(theArray, *(const void **)((char *)&v71.value + i)))
    {
      uint64_t v23 = *(uint64_t (**)(void))((char *)&v71.epoch + i);
      if (v23)
      {
        uint64_t v24 = v23();
        if (v24)
        {
          uint64_t v16 = v24;
          CFRelease(Mutable);
          CFMutableStringRef Mutable = 0;
          goto LABEL_43;
        }
      }
    }
  }
  for (uint64_t j = 8; j != 152; j += 24)
  {
    uint64_t v26 = *(const void **)((char *)&v71.value + j);
    CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(v21, v26);
    if (v27)
    {
      CFStringRef v28 = v27;
      CFTypeID v29 = CFGetTypeID(v27);
      if (v29 == CFStringGetTypeID() && CFStringGetLength(v28) >= 1) {
        CFStringAppendFormat(Mutable, 0, @" %@:%@", v26, v28);
      }
    }
  }
  uint64_t v16 = 0;
LABEL_43:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v16) {
    goto LABEL_142;
  }
  CFDictionaryRef v68 = 0;
  CFDictionaryRef theArray = 0;
  CFTypeRef v66 = 0;
  CFTypeRef cf = 0;
  CFTypeRef cf1 = 0;
  CFAllocatorRef v30 = CFGetAllocator(a1);
  CFMutableStringRef v31 = CFStringCreateMutable(v30, 0);
  uint64_t v32 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!v31)
  {
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_100;
  }
  uint64_t v33 = FigVTTNodeCopyChildNodeArray((uint64_t)a1, (uint64_t)&theArray);
  if (v33)
  {
LABEL_100:
    uint64_t v16 = v33;
    CMTimeEpoch epoch = 0;
    goto LABEL_101;
  }
  CFArrayRef Count = theArray;
  if (!theArray)
  {
    uint64_t v33 = FigVTTNodeCopyValue((uint64_t)a1, &theString);
    goto LABEL_100;
  }
  CMTimeEpoch epoch = 0;
  CFIndex v36 = 0;
  CFAllocatorRef allocator = *v32;
LABEL_95:
  CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  while (1)
  {
    if (v36 >= (uint64_t)Count)
    {
      uint64_t v16 = 0;
      CFStringRef theString = v31;
      CFMutableStringRef v31 = 0;
      goto LABEL_98;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v36);
    int v64 = 0;
    if (!ValueAtIndex || (CFAttributedStringRef v38 = ValueAtIndex, v39 = CFGetTypeID(ValueAtIndex), v39 != FigVTTNodeGetTypeID()))
    {
      uint64_t v40 = FigSignalErrorAt();
LABEL_132:
      uint64_t v16 = v40;
      goto LABEL_98;
    }
    FigVTTNodeGetNodeType((uint64_t)v38, (uint64_t)&v64);
    if (v64 == 5) {
      break;
    }
LABEL_94:
    ++v36;
    CFArrayRef Count = theArray;
    if (theArray) {
      goto LABEL_95;
    }
  }
  if (v68)
  {
    CFRelease(v68);
    CFDictionaryRef v68 = 0;
  }
  uint64_t v40 = FigVTTNodeCopyValue((uint64_t)v38, &v68);
  if (v40) {
    goto LABEL_132;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  uint64_t v40 = FigVTTNodeCopyAttributes((uint64_t)v38, &cf);
  if (v40) {
    goto LABEL_132;
  }
  if (cf1)
  {
    CFRelease(cf1);
    CFTypeRef cf1 = 0;
  }
  CFAllocatorRef v41 = CFGetAllocator(v38);
  uint64_t v40 = FigVTTNodeCopyProperty((uint64_t)v38, @"WebVTTSpanNode_MarkupElement", (uint64_t)v41, (uint64_t)&cf1);
  if (v40) {
    goto LABEL_132;
  }
  if (cf1)
  {
    if (CFEqual(cf1, @"RubyStart"))
    {
      double v42 = @"ruby";
LABEL_67:
      CFStringAppendFormat(v31, 0, @"<%@>", v42);
      goto LABEL_94;
    }
    if (CFEqual(cf1, @"RubyEnd"))
    {
      CFRange v43 = @"ruby";
    }
    else
    {
      if (CFEqual(cf1, @"RubyTextStart"))
      {
        double v42 = @"rt";
        goto LABEL_67;
      }
      if (!CFEqual(cf1, @"RubyTextEnd")) {
        goto LABEL_75;
      }
      CFRange v43 = @"rt";
    }
    CFStringAppendFormat(v31, 0, @"</%@>", v43);
    goto LABEL_94;
  }
LABEL_75:
  if (v66)
  {
    CFRelease(v66);
    CFTypeRef v66 = 0;
  }
  CFAllocatorRef v44 = CFGetAllocator(v38);
  uint64_t v40 = FigVTTNodeCopyProperty((uint64_t)v38, @"WebVTTSpanNode_StyleReferences", (uint64_t)v44, (uint64_t)&v66);
  if (v40) {
    goto LABEL_132;
  }
  uint64_t v45 = Mutable;
  if (epoch) {
    CFRelease(epoch);
  }
  CFTypeRef v46 = cf;
  MEMORY[0x19970EE10](&getCSSAttributeToMarkupMapping_once, initCSSAttributeToMarkupMapping);
  uint64_t v47 = sCSSAttributeToMarkupMapping;
  MEMORY[0x19970EE10](&getCSSAttributesToProcessArray_once, initAttributesToProcessArray);
  CFMutableArrayRef v48 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  CMTimeEpoch epoch = v48;
  if (!v48)
  {
    uint64_t v53 = FigSignalErrorAt();
    if (v53)
    {
      uint64_t v16 = v53;
      CFMutableStringRef Mutable = v45;
      goto LABEL_98;
    }
    CFMutableStringRef Mutable = v45;
LABEL_93:
    CFStringAppendFormat(v31, 0, @"%@", v68);
    goto LABEL_94;
  }
  v71.CMTime value = (CMTimeValue)v46;
  *(void *)&v71.CMTimeScale timescale = v47;
  v71.CMTimeEpoch epoch = (CMTimeEpoch)v48;
  long long v72 = 0;
  FigCFArrayApplyFunction();
  uint64_t v16 = v72;
  if (!v72)
  {
    FigCFArrayApplyFunction();
    uint64_t v16 = v72;
    CFMutableStringRef Mutable = v45;
    if (v72) {
      goto LABEL_135;
    }
    CMTimeEpoch epoch = (const void *)v71.epoch;
    if (v71.epoch && CFArrayGetCount((CFArrayRef)v71.epoch) >= 1)
    {
      FigCFArrayApplyFunction();
      CFStringAppendFormat(v31, 0, @"%@", v68);
      CFIndex v49 = CFArrayGetCount((CFArrayRef)epoch);
      if (v49 >= 1)
      {
        unint64_t v50 = v49 + 1;
        do
        {
          CFDictionaryRef v51 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)epoch, v50 - 2);
          CFStringRef v52 = (const __CFString *)CFDictionaryGetValue(v51, @"closeTag");
          if (v52) {
            CFStringAppend(v31, v52);
          }
          --v50;
        }
        while (v50 > 1);
      }
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  CFMutableStringRef Mutable = v45;
LABEL_135:
  CFRelease(epoch);
  CMTimeEpoch epoch = 0;
LABEL_98:
  uint64_t v32 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_101:
  if (cf1) {
    CFRelease(cf1);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (epoch) {
    CFRelease(epoch);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFStringRef v54 = v60;
  if (v68) {
    CFRelease(v68);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (!v16)
  {
    if (theString && CFStringGetLength(theString) > 0 && (int v55 = CFStringCreateMutable(*v32, 0)) != 0)
    {
      CFRange v56 = v55;
      if (Value) {
        CFStringAppendFormat(v55, 0, @"%@\n", Value);
      }
      CFStringAppendFormat(v56, 0, @"%@%@\n%@\n", v60, Mutable, theString);
      uint64_t v16 = 0;
      *a2 = v56;
    }
    else
    {
      uint64_t v16 = FigSignalErrorAt();
    }
  }
LABEL_122:
  if (theString) {
    CFRelease(theString);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v54) {
    CFRelease(v54);
  }
LABEL_128:
  if (theDict) {
    CFRelease(theDict);
  }
  return v16;
}

uint64_t figVTTCue_setChildNodeArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

void figVTTCue_concatenateSpanText(uint64_t a1, __CFString *a2)
{
  CFStringRef appendedString = 0;
  int v3 = FigVTTNodeCopyValue(a1, &appendedString);
  CFStringRef v4 = appendedString;
  if (!v3 && appendedString)
  {
    CFStringAppend(a2, appendedString);
    CFStringRef v4 = appendedString;
  }
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_regionID(void *value, int a2, CFMutableDictionaryRef theDict)
{
  return 0;
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_passThroughString(void *value, const void *a2, CFMutableDictionaryRef theDict)
{
  return 0;
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_fromFigGeometryDimension(uint64_t a1, const void *a2, __CFDictionary *a3)
{
  uint64_t v5 = FigGeometryDimensionMakeFromDictionary();
  if ((v6 & 0x1D00000000) == 0x100000000
    && (uint64_t v7 = v5, v8 = v6, (Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0)) != 0))
  {
    CFStringRef v10 = Mutable;
    FigVTTStringifyFigGeometryDimensionAndAppend(Mutable, v7, v8);
    CFDictionarySetValue(a3, a2, v10);
    CFRelease(v10);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTCue_MapCueAttributeToCueSettings_writingMode(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  if (a1)
  {
    if (CFEqual(a1, @"tb"))
    {
      uint64_t v5 = kFigVTT_AttributeValue_cue_horizontal;
    }
    else if (CFEqual(a1, @"lr"))
    {
      uint64_t v5 = kFigVTT_AttributeValue_cue_leftToRight;
    }
    else
    {
      if (!CFEqual(a1, @"rl")) {
        return 0;
      }
      uint64_t v5 = kFigVTT_AttributeValue_cue_rightToLeft;
    }
    CFStringRef v6 = *v5;
    if (*v5 && CFStringGetLength(*v5) >= 1) {
      CFDictionarySetValue(a3, @"vertical", v6);
    }
  }
  return 0;
}

void figVTTCue_emitOpenTag(const __CFDictionary *a1, __CFString *a2)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"openTag");
  if (Value)
  {
    CFStringAppend(a2, Value);
  }
}

void figVTTCue_processCSSAttribute(void *key, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 24))
  {
    CFStringRef Value = (uint64_t (*)(const void *, CFMutableDictionaryRef))CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 8), key);
    if (Value)
    {
      uint64_t v5 = Value;
      CFStringRef v6 = CFDictionaryGetValue(*(CFDictionaryRef *)a2, key);
      if (v6)
      {
        uint64_t v7 = v6;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v9 = Mutable;
          *(_DWORD *)(a2 + 24) = v5(v7, Mutable);
          if (FigCFDictionaryGetCount() >= 1) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v9);
          }
          CFRelease(v9);
        }
        else
        {
          *(_DWORD *)(a2 + 24) = -17882;
        }
      }
    }
  }
}

void figVTTCue_processClassStyleReference(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 24))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFStringRef v6 = Mutable;
      CFStringRef v7 = CFStringCreateWithFormat(v4, 0, @"<c.%@>", a1);
      CFStringRef v8 = CFStringCreateWithFormat(v4, 0, @"</c>");
      CFDictionarySetValue(v6, @"openTag", v7);
      CFDictionarySetValue(v6, @"closeTag", v8);
      if (v7) {
        CFRelease(v7);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (FigCFDictionaryGetCount() >= 1) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v6);
      }
      CFRelease(v6);
    }
    else
    {
      *(_DWORD *)(a2 + 24) = -17882;
    }
  }
}

void initCSSAttributeToMarkupMapping()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ font-weight", figVTTCue_MapAttributeToMarkup_fontWeight);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ font-style", figVTTCue_MapAttributeToMarkup_fontStyle);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ text-decoration", figVTTCue_MapAttributeToMarkup_textDecoration);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ color", figVTTCue_MapAttributeToMarkup_color);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ background-color", figVTTCue_MapAttributeToMarkup_backgroundColor);
  sCSSAttributeToMarkupMapping = (uint64_t)Mutable;
}

uint64_t figVTTCue_MapAttributeToMarkup_fontWeight(const void *a1, __CFDictionary *a2)
{
  if (CFEqual(a1, @"bold"))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<%@>", @"b");
    CFStringRef v6 = CFStringCreateWithFormat(v4, 0, @"</%@>", @"b");
    CFStringRef v7 = v6;
    if (v5)
    {
      CFDictionarySetValue(a2, @"openTag", v5);
      if (!v7)
      {
        CFStringRef v8 = v5;
        goto LABEL_10;
      }
      CFDictionarySetValue(a2, @"closeTag", v7);
      CFRelease(v5);
LABEL_8:
      CFStringRef v8 = v7;
LABEL_10:
      CFRelease(v8);
      return 0;
    }
    if (v6)
    {
      CFDictionarySetValue(a2, @"closeTag", v6);
      goto LABEL_8;
    }
  }
  else
  {
    CFEqual(a1, @"normal");
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_fontStyle(const void *a1, __CFDictionary *a2)
{
  if (CFEqual(a1, @"italic"))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<%@>", @"i");
    CFStringRef v6 = CFStringCreateWithFormat(v4, 0, @"</%@>", @"i");
    CFStringRef v7 = v6;
    if (v5)
    {
      CFDictionarySetValue(a2, @"openTag", v5);
      if (!v7)
      {
        CFStringRef v8 = v5;
        goto LABEL_12;
      }
      CFDictionarySetValue(a2, @"closeTag", v7);
      CFRelease(v5);
LABEL_10:
      CFStringRef v8 = v7;
LABEL_12:
      CFRelease(v8);
      return 0;
    }
    if (v6)
    {
      CFDictionarySetValue(a2, @"closeTag", v6);
      goto LABEL_10;
    }
  }
  else if (!CFEqual(a1, @"normal") && CFEqual(a1, @"oblique"))
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_textDecoration(const __CFString *a1, __CFDictionary *a2)
{
  locatioCFIndex n = CFStringFind(a1, @"none", 1uLL).location;
  CFIndex v5 = CFStringFind(a1, @"underline", 1uLL).location;
  if (location == -1 && v5 != -1)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<%@>", @"u");
    CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"</%@>", @"u");
    CFStringRef v10 = v9;
    if (v8)
    {
      CFDictionarySetValue(a2, @"openTag", v8);
      if (v10)
      {
        CFDictionarySetValue(a2, @"closeTag", v10);
        CFRelease(v8);
      }
      else
      {
        CFStringRef v10 = v8;
      }
      goto LABEL_11;
    }
    if (v9)
    {
      CFDictionarySetValue(a2, @"closeTag", v9);
LABEL_11:
      CFRelease(v10);
    }
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_color(uint64_t a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<%@.%@>", @"c", a1);
    CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"</%@>", @"c");
    CFStringRef v6 = v5;
    if (v4)
    {
      CFDictionarySetValue(a2, @"openTag", v4);
      if (v6)
      {
        CFDictionarySetValue(a2, @"closeTag", v6);
        CFRelease(v4);
      }
      else
      {
        CFStringRef v6 = v4;
      }
      goto LABEL_8;
    }
    if (v5)
    {
      CFDictionarySetValue(a2, @"closeTag", v5);
LABEL_8:
      CFRelease(v6);
    }
  }
  return 0;
}

uint64_t figVTTCue_MapAttributeToMarkup_backgroundColor(uint64_t a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<%@.bg_%@>", @"c", a1);
    CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"</%@>", @"c");
    CFStringRef v6 = v5;
    if (v4)
    {
      CFDictionarySetValue(a2, @"openTag", v4);
      if (v6)
      {
        CFDictionarySetValue(a2, @"closeTag", v6);
        CFRelease(v4);
      }
      else
      {
        CFStringRef v6 = v4;
      }
      goto LABEL_8;
    }
    if (v5)
    {
      CFDictionarySetValue(a2, @"closeTag", v5);
LABEL_8:
      CFRelease(v6);
    }
  }
  return 0;
}

void initAttributesToProcessArray()
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, @"https://www.w3.org/Style/CSS/ font-weight");
  CFArrayAppendValue(Mutable, @"https://www.w3.org/Style/CSS/ font-style");
  CFArrayAppendValue(Mutable, @"https://www.w3.org/Style/CSS/ text-decoration");
  CFArrayAppendValue(Mutable, @"https://www.w3.org/Style/CSS/ color");
  CFArrayAppendValue(Mutable, @"https://www.w3.org/Style/CSS/ background-color");
  sCSSAttributesToProcessArray = (uint64_t)Mutable;
}

uint64_t FigCPEServerStart()
{
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  uint64_t result = FigXPCServerStart();
  if (!result) {
    return FigCPEProtectorServerStart();
  }
  return result;
}

uint64_t HandleCPEMessage()
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result) {
    return FigSecureStopManagerServerHandleMessage();
  }
  return result;
}

uint64_t FigAssetDownloaderStartServer()
{
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t assetDownloaderServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  cf[0] = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  *(void *)&blocCFIndex k = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294950644;
  }
  return v6;
}

void FigCFRelease_1(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t assetDownloaderServer_downloadSuccessCallback(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 40) && *(void *)(a1 + 32) && !FigXPCCreateBasicMessage()) {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_downloadFailureCallback(uint64_t a1)
{
  if (a1
    && *(void *)(a1 + 40)
    && *(void *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFError())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_loadedTimeRangeChangedCallback(uint64_t a1)
{
  if (a1
    && *(void *)(a1 + 40)
    && *(void *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFDictionary()
    && !FigXPCMessageSetCFArray()
    && !FigXPCMessageSetCFDictionary()
    && !FigXPCMessageSetCFArray())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_didResolveMediaSelection(uint64_t a1)
{
  if (a1
    && *(void *)(a1 + 40)
    && *(void *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFArray())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_didFinishDownloadForMediaSelection(uint64_t a1)
{
  if (a1
    && *(void *)(a1 + 40)
    && *(void *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFArray())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_didFinishLoadingMetadata(uint64_t result)
{
  if (result)
  {
    if (!*(unsigned char *)(result + 56))
    {
      *(unsigned char *)(result + 56) = 1;
      if (!*(unsigned char *)(result + 72))
      {
        if (*(void *)(result + 64))
        {
          *(unsigned char *)(result + 72) = 1;
          return MX_RunningBoardServices_InvalidateBackgroundDownloadProcessAssertion();
        }
      }
    }
  }
  return result;
}

uint64_t assetDownloaderServer_progressUpdateCallback(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4)
{
  if (a1 && *(void *)(a1 + 40) && *(void *)(a1 + 32) && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_int64(0, "ExpectedBytesToDownload", a3);
    xpc_dictionary_set_int64(0, "BytesDownloaded", a4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_willDownloadAlternatesCallback(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  xpc_object_t value = 0;
  xpc_object_t xdict = 0;
  if (a1
    && *(void *)(a1 + 40)
    && *(void *)(a1 + 32)
    && !FigXPCCreateBasicMessage()
    && !FigAlternateCopyArrayOfAlternatesAsXPCObject(a3, &value))
  {
    xpc_dictionary_set_value(xdict, "Alternates", value);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), xdict);
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t assetDownloaderServer_init(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

void assetDownloaderServer_finalize(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72) && *(void *)(a1 + 64))
  {
    *(unsigned char *)(a1 + 72) = 1;
    MX_RunningBoardServices_InvalidateBackgroundDownloadProcessAssertion();
  }
  FigXPCRelease();
  CFTypeRef v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v5 = *(NSObject **)(a1 + 48);
  if (v5)
  {
    dispatch_release(v5);
  }
}

uint64_t assetDownloaderServer_registerServerClassOnce(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

void __assetDownloadServer_handleLoadMetataMessage_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 56)) {
    goto LABEL_8;
  }
  if (!*(void *)(v1 + 64) && !*(unsigned char *)(v1 + 72))
  {
    if (*(void *)(v1 + 24))
    {
      CFAllocatorRef v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 32));
      CFStringRef v4 = CFStringCreateWithFormat(v3, 0, @"FigAssetDownloadMetadata.%@", *(void *)(v1 + 24));
      *(void *)(v1 + 64) = MX_RunningBoardServices_CreateBackgroundDownloadProcessAssertionForBundleIdentifier();
      if (v4) {
        CFRelease(v4);
      }
    }
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
LABEL_8:
    CFRelease((CFTypeRef)v1);
  }
}

void cdsReleaseAndClearMediaAccessibilityParams(uint64_t a1)
{
  int64x2_t v2 = vdupq_n_s64(1uLL);
  *(void *)(a1 + 128) = 1;
  *(int64x2_t *)(a1 + 32) = v2;
  *(int64x2_t *)(a1 + 48) = v2;
  *(int64x2_t *)a1 = v2;
  *(int64x2_t *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 64), &xmmword_194995D30, 0x40uLL);
  CFAllocatorRef v3 = *(const void **)(a1 + 136);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 136) = 0;
  }
  *(void *)(a1 + 160) = 0xBFF0000000000000;
  CFStringRef v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  CFStringRef v5 = *(const void **)(a1 + 152);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v6 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 176) = _Q0;
  *(void *)(a1 + 192) = 0xBFF0000000000000;
  *(void *)(a1 + 264) = 0;
  uint64_t v12 = a1 + 200;
  do
  {
    CFTypeID v13 = *(const void **)(v12 + v6);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v12 + v6) = 0;
    }
    v6 += 8;
  }
  while (v6 != 64);
}

void cdsCopyMediaAccessibilityParams(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 112);
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  CFStringRef v10 = *(const void **)(a2 + 136);
  CFDictionaryRef v11 = *(const void **)(a1 + 136);
  *(void *)(a2 + 136) = v11;
  if (v11) {
    CFRetain(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(a2 + 160) = *(void *)(a1 + 160);
  uint64_t v12 = *(const void **)(a2 + 144);
  CFTypeID v13 = *(const void **)(a1 + 144);
  *(void *)(a2 + 144) = v13;
  if (v13) {
    CFRetain(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a2 + 168) = *(void *)(a1 + 168);
  CFStringRef v14 = *(const void **)(a2 + 152);
  CFAllocatorRef v15 = *(const void **)(a1 + 152);
  *(void *)(a2 + 152) = v15;
  if (v15) {
    CFRetain(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v16 = 0;
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 176);
  *(void *)(a2 + 192) = *(void *)(a1 + 192);
  *(void *)(a2 + 264) = *(void *)(a1 + 264);
  uint64_t v17 = a2 + 200;
  uint64_t v18 = a1 + 200;
  do
  {
    CFStringRef v19 = *(const void **)(v17 + v16);
    CFAllocatorRef v20 = *(const void **)(v18 + v16);
    *(void *)(v17 + v16) = v20;
    if (v20) {
      CFRetain(v20);
    }
    if (v19) {
      CFRelease(v19);
    }
    v16 += 8;
  }
  while (v16 != 64);
}

uint64_t FigCDSMACacheLoad(void *a1, int a2)
{
  if (!a1[39]) {
    return 0;
  }
  long long v4 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v4)
  {
    long long v5 = v4;
    *long long v4 = CFRetain(a1);
    long long v6 = a1[39];
    if (a2) {
      dispatch_sync_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync);
    }
    else {
      dispatch_async_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync);
    }
    return 0;
  }
  return 4294950095;
}

void mediaAccessibilityDidChangeDoAsync(void *a1)
{
  int64x2_t v2 = (void *)*a1;
  memset(behavior, 0, sizeof(behavior));
  CFAllocatorRef v3 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, behavior);
  behavior[17] = (MACaptionAppearanceBehavior)v3;
  if (v3) {
    CGColorGetComponents(v3);
  }
  long long v4 = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, &behavior[1]);
  behavior[18] = (MACaptionAppearanceBehavior)v4;
  if (v4) {
    CGColorGetComponents(v4);
  }
  long long v5 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, &behavior[2]);
  behavior[19] = (MACaptionAppearanceBehavior)v5;
  if (v5) {
    CGColorGetComponents(v5);
  }
  behavior[20] = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, &behavior[3]);
  behavior[21] = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, &behavior[4]);
  behavior[22] = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, &behavior[5]);
  behavior[23] = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, &behavior[6]);
  MACaptionAppearanceFontStyle v6 = kMACaptionAppearanceFontStyleDefault;
  behavior[24] = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, &behavior[7]);
  long long v7 = &behavior[8];
  do
  {
    behavior[v6 + 25] = (MACaptionAppearanceBehavior)MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, v7, v6);
    ++v6;
    ++v7;
  }
  while (v6 != 8);
  behavior[33] = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &behavior[16]);
  cdsCopyMediaAccessibilityParams((uint64_t)behavior, (uint64_t)(v2 + 4));
  if (v2[3])
  {
    uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v8)
    {
      long long v9 = (const void *)v8;
      CFStringRef v10 = (void (*)(const void *, unsigned char *))v2[3];
      memcpy(v11, behavior, sizeof(v11));
      v10(v9, v11);
      CFRelease(v9);
    }
  }
  cdsReleaseAndClearMediaAccessibilityParams((uint64_t)behavior);
  CFRelease(v2);
  free(a1);
}

uint64_t FigCDSMACacheCreate(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  MEMORY[0x19970EE10](&FigCDSMACacheLocalGetTypeID_sRegisterFigCDSMACacheOnce, RegisterFigCDSMACacheClass);
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  cdsReleaseAndClearMediaAccessibilityParams((uint64_t)(Instance + 4));
  snprintf(__str, 0x100uLL, "com.apple.coremedia.FigCDSMACache.msgQueue<%p>", Instance);
  dispatch_queue_t v7 = dispatch_queue_create(__str, 0);
  Instance[39] = v7;
  if (!v7)
  {
    uint64_t v9 = 4294950095;
LABEL_7:
    CFRelease(Instance);
    return v9;
  }
  if (a1)
  {
    if (a2)
    {
      Instance[3] = a1;
      uint64_t v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      Instance[2] = v8;
      if (!v8)
      {
        uint64_t v9 = FigSignalErrorAt();
        goto LABEL_7;
      }
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterAddWeakListener();
  uint64_t v9 = 0;
  *a3 = Instance;
  return v9;
}

void mediaAccessibilityDidChange(uint64_t a1, void *a2)
{
  if (a2[39])
  {
    CFAllocatorRef v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v3)
    {
      long long v4 = v3;
      void *v3 = CFRetain(a2);
      long long v5 = a2[39];
      dispatch_async_f(v5, v4, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync);
    }
  }
}

uint64_t RegisterFigCDSMACacheClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCDSMACacheID = result;
  return result;
}

double FigCDSMACacheInit(_OWORD *a1)
{
  double result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigCDSMACache_Finalize(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterRemoveWeakListener();
  int64x2_t v2 = *(NSObject **)(a1 + 312);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 312) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }

  cdsReleaseAndClearMediaAccessibilityParams(a1 + 32);
}

__CFString *FigCDSMACacheCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSMACache %p>", a1);
  return Mutable;
}

uint64_t FigStreamingAssetDownloadOrchestratorCreate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, uint64_t a8, dispatch_object_t object, void *a10, void *a11)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2
    || (CFTypeID v16 = CFGetTypeID(a2), v16 != FigAssetGetTypeID())
    || !a4
    || (CFTypeID v17 = CFGetTypeID(a4), v17 != CFArrayGetTypeID())
    || a6 && (CFTypeID v18 = CFGetTypeID(a6), v18 != CFDictionaryGetTypeID())
    || !a11)
  {
LABEL_181:
    uint64_t v120 = FigSignalErrorAt();
    if (!v120) {
      return v120;
    }
    goto LABEL_184;
  }
  cf[0] = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(unsigned int (**)(uint64_t, __CFString *, const void *, CFTypeRef *))(v21 + 48);
  BOOL v23 = v22 && !v22(CMBaseObject, @"assetProperty_AssetType", a1, cf) && !FigCFEqual();
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v23) {
    return 0;
  }
  cf[0] = 0;
  uint64_t v24 = FigAssetGetCMBaseObject(a2);
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  CFStringRef v27 = *(uint64_t (**)(uint64_t, __CFString *, const void *, CFTypeRef *))(v26 + 48);
  if (!v27)
  {
    int v33 = -12782;
    goto LABEL_37;
  }
  int v28 = v27(v24, @"assetProperty_CreationOptionsDictionary", a1, cf);
  if (v28) {
    goto LABEL_188;
  }
  if (!cf[0])
  {
    BOOL v31 = 0;
    CFAllocatorRef v30 = 0;
LABEL_30:
    if (a3) {
      uint64_t v32 = a3;
    }
    else {
      uint64_t v32 = v30;
    }
    if (!a3 && !v31) {
      goto LABEL_187;
    }
LABEL_35:
    CFTypeID v34 = CFURLGetTypeID();
    if (v34 == CFGetTypeID(v32))
    {
      int v33 = 0;
      goto LABEL_37;
    }
    goto LABEL_187;
  }
  URLCFStringRef Value = (const void *)FigCFDictionaryGetURLValue();
  CFAllocatorRef v30 = URLValue;
  BOOL v31 = URLValue != 0;
  if (!a3 || !URLValue) {
    goto LABEL_30;
  }
  uint64_t v32 = a3;
  if (CFEqual(a3, URLValue)) {
    goto LABEL_35;
  }
LABEL_187:
  int v28 = FigSignalErrorAt();
LABEL_188:
  int v33 = v28;
LABEL_37:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v33) {
    return 0;
  }
  FigAssetDownloaderGetClassID();
  uint64_t v35 = CMDerivedObjectCreate();
  if (v35) {
    goto LABEL_183;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFTypeRef v37 = CFRetain(a1);
  }
  else {
    CFTypeRef v37 = 0;
  }
  *(void *)(DerivedStorage + 8) = v37;
  *(void *)(DerivedStorage + 16) = CFRetain(a2);
  *(void *)(DerivedStorage + 40) = CFRetain(a4);
  if (a5) {
    CFAttributedStringRef v38 = a5;
  }
  else {
    CFAttributedStringRef v38 = a4;
  }
  *(void *)(DerivedStorage + 48) = CFRetain(v38);
  if (a7)
  {
    CFTypeRef v39 = CFRetain(a7);
    *(void *)(DerivedStorage + 56) = v39;
    uint64_t v124 = (const void **)(DerivedStorage + 56);
    if (v39)
    {
      FigStreamingAssetDownloadConfigCopyAssetNameAndImage((uint64_t)v39, (void *)(DerivedStorage + 80), (void *)(DerivedStorage + 88));
      char DownloadsInterstitialAssets = FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets(*(void *)(DerivedStorage + 56));
LABEL_53:
      *(unsigned char *)(DerivedStorage + 417) = DownloadsInterstitialAssets;
      goto LABEL_54;
    }
  }
  else
  {
    *(void *)(DerivedStorage + 56) = 0;
    uint64_t v124 = (const void **)(DerivedStorage + 56);
  }
  if (a6)
  {
    char DownloadsInterstitialAssets = FigCFDictionaryGetBooleanIfPresent();
    goto LABEL_53;
  }
LABEL_54:
  uint64_t v35 = FigRetainProxyCreate();
  if (v35) {
    goto LABEL_183;
  }
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E4F1D548]);
  *(void *)(DerivedStorage + 432) = Mutable;
  if (!Mutable) {
    goto LABEL_181;
  }
  CFMutableArrayRef v42 = CFArrayCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 440) = v42;
  if (!v42) {
    goto LABEL_181;
  }
  uint64_t v35 = FigCFURLCreateWithSuffixedExtension();
  if (v35) {
    goto LABEL_183;
  }
  uint64_t v43 = (uint64_t)a2;
  *(void *)(DerivedStorage + 24) = 0;
  if (a8)
  {
    if (object)
    {
      if (a10)
      {
        dispatch_retain(object);
        *(void *)(DerivedStorage + 280) = object;
        __copy_assignment_8_8_t0w8_pa0_62591_8_pa0_48202_16_pa0_13082_24_pa0_11046_32_pa0_49729_40_pa0_62126_48_pa0_6100_56_pa0_11999_64_pa0_10804_72((void *)(DerivedStorage + 200), a10);
        uint64_t v44 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(void *)(DerivedStorage + 192) = v44;
        if (!v44) {
          goto LABEL_181;
        }
      }
    }
  }
  *(unsigned char *)(DerivedStorage + 162) = 0;
  *(_WORD *)(DerivedStorage + 160) = 257;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(void *)(DerivedStorage + 64) = CFDictionaryCreateCopy(AllocatorForMedia, (CFDictionaryRef)a6);
  if (a6)
  {
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a6, @"AssetDownloaderCreateOption_ClientBundleIdentifier");
    if (Value) {
      CFStringRef Value = CFRetain(Value);
    }
    *(void *)(DerivedStorage + 72) = Value;
    if (!*(void *)(DerivedStorage + 80))
    {
      uint64_t v47 = CFDictionaryGetValue((CFDictionaryRef)a6, @"AssetDownloaderCreateOption_AssetName");
      if (v47) {
        uint64_t v47 = CFRetain(v47);
      }
      *(void *)(DerivedStorage + 80) = v47;
    }
    if (!*(void *)(DerivedStorage + 88))
    {
      CFMutableArrayRef v48 = CFDictionaryGetValue((CFDictionaryRef)a6, @"AssetDownloaderCreateOption_AssetImage");
      if (v48) {
        CFMutableArrayRef v48 = CFRetain(v48);
      }
      *(void *)(DerivedStorage + 88) = v48;
    }
    CFIndex v49 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a6, @"AssetDownloaderCreateOption_DebugIdentifier");
    if (v49) {
      CFIndex v49 = (__CFString *)CFRetain(v49);
    }
    unint64_t v50 = &stru_1EE53F4B8;
    if (v49) {
      unint64_t v50 = v49;
    }
    *(void *)(DerivedStorage + 32) = v50;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    if (FigCFDictionaryGetInt64IfPresent()) {
      *(unsigned char *)(DerivedStorage + 120) = 1;
    }
    if (FigCFDictionaryGetInt64IfPresent()) {
      *(unsigned char *)(DerivedStorage + 121) = 1;
    }
    if (FigCFDictionaryGetCGSizeIfPresent()) {
      *(unsigned char *)(DerivedStorage + 96) = 1;
    }
    if (FigCFDictionaryGetInt64IfPresent()) {
      *(unsigned char *)(DerivedStorage + 144) = 1;
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      *(unsigned char *)(DerivedStorage + 161) = *(unsigned char *)(DerivedStorage + 163);
    }
  }
  uint64_t v35 = FigNetworkHistoryCreate();
  if (v35)
  {
LABEL_183:
    uint64_t v120 = v35;
LABEL_184:
    long long v113 = 0;
    goto LABEL_178;
  }
  if (FigIsItOKToLogURLs()) {
    BOOL v51 = FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  }
  else {
    BOOL v51 = 0;
  }
  *(unsigned char *)(DerivedStorage + 552) = v51;
  *(_DWORD *)(DerivedStorage + 532) = 0;
  dispatch_queue_t v52 = dispatch_queue_create("com.apple.coremedia.streamingssetdownloadorchestrator.state", 0);
  *(void *)uint64_t DerivedStorage = v52;
  if (!v52) {
    goto LABEL_181;
  }
  *(void *)(DerivedStorage + 336) = 0;
  *(void *)(DerivedStorage + 344) = DerivedStorage + 336;
  *(void *)(DerivedStorage + 504) = 0;
  *(void *)(DerivedStorage + 512) = DerivedStorage + 504;
  CFMutableArrayRef v53 = CFArrayCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 464) = v53;
  if (!v53) {
    goto LABEL_181;
  }
  *(void *)(DerivedStorage + 472) = 1;
  *(void *)(DerivedStorage + 480) = 6;
  uint64_t v54 = CMBaseObjectGetDerivedStorage();
  int v55 = (uint64_t *)(v54 + 576);
  CFTypeID v126 = (const void *)v43;
  if (!FigReportingAgentCreateFromAsset(v43, 3, 0, (void *)(v54 + 576)))
  {
    *(_DWORD *)(v54 + 584) = FigGetCFPreferenceNumberWithDefault();
    *(unsigned char *)(v54 + 569) = FigDebugIsInternalBuild();
    uint64_t v56 = *(void *)(v54 + 576);
    if (v56)
    {
      uint64_t v57 = *(void *)(v54 + 32);
      uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v59 = v58 ? v58 : 0;
      CFStringRef v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v59 + 48);
      if (v60) {
        v60(v56, 0x1EE582C78, 0x1EE558F98, v57, 0);
      }
    }
    uint64_t v61 = *(void *)(v54 + 576);
    if (v61)
    {
      uint64_t v62 = *(unsigned __int8 *)(v54 + 160);
      uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v64 = v63 ? v63 : 0;
      CFIndex v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v64 + 56);
      if (v65) {
        v65(v61, 0x1EE582C78, 0x1EE558B98, v62, 0);
      }
    }
    uint64_t v66 = *(void *)(v54 + 576);
    if (v66)
    {
      uint64_t v67 = *(unsigned __int8 *)(v54 + 161);
      uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v69 = v68 ? v68 : 0;
      uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v69 + 56);
      if (v70) {
        v70(v66, 0x1EE582C78, 0x1EE558BB8, v67, 0);
      }
    }
    uint64_t v71 = *(void *)(v54 + 576);
    if (v71)
    {
      uint64_t v72 = *(unsigned __int8 *)(v54 + 178);
      uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v74 = v73 ? v73 : 0;
      CFIndex v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v74 + 56);
      if (v75) {
        v75(v71, 0x1EE582C78, 0x1EE558BD8, v72, 0);
      }
    }
    uint64_t v76 = *(void *)(v54 + 576);
    if (v76)
    {
      uint64_t v77 = *(unsigned __int8 *)(v54 + 179);
      uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v79 = v78 ? v78 : 0;
      CFTypeRef v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v79 + 56);
      if (v80) {
        v80(v76, 0x1EE582C78, 0x1EE558BF8, v77, 0);
      }
    }
    if (*(unsigned char *)(v54 + 96))
    {
      uint64_t v81 = *(void *)(v54 + 576);
      if (v81)
      {
        double v82 = *(double *)(v54 + 112);
        uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v84 = v83 ? v83 : 0;
        uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v84 + 56);
        if (v85) {
          v85(v81, 0x1EE582C78, 0x1EE558D18, (uint64_t)v82, 0);
        }
      }
      uint64_t v86 = *(void *)(v54 + 576);
      if (v86)
      {
        double v87 = *(double *)(v54 + 104);
        uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v89 = v88 ? v88 : 0;
        __int16 v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v89 + 56);
        if (v90) {
          v90(v86, 0x1EE582C78, 0x1EE558D38, (uint64_t)v87, 0);
        }
      }
    }
    if (*(unsigned char *)(v54 + 120))
    {
      uint64_t v91 = *(void *)(v54 + 576);
      if (v91)
      {
        uint64_t v92 = *(void *)(v54 + 128);
        uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v94 = v93 ? v93 : 0;
        CFIndex v95 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v94 + 56);
        if (v95) {
          v95(v91, 0x1EE582C78, 0x1EE558B78, v92, 0);
        }
      }
    }
    long long v96 = (__CFError *)CFDictionaryGetValue((CFDictionaryRef)a6, @"AssetDownloaderCreateOption_RetryError");
    if (v96)
    {
      CFStringRef v97 = v96;
      uint64_t v98 = *v55;
      CFIndex Code = CFErrorGetCode(v96);
      if (v98)
      {
        CFIndex v100 = Code;
        uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v102 = v101 ? v101 : 0;
        unsigned int v103 = *(void (**)(uint64_t, uint64_t, uint64_t, CFIndex, void))(v102 + 56);
        if (v103) {
          v103(v98, 0x1EE582C78, 0x1EE558FD8, v100, 0);
        }
      }
      uint64_t v104 = *v55;
      DomaiCFIndex n = CFErrorGetDomain(v97);
      if (v104)
      {
        CFErrorDomain v106 = Domain;
        uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v108 = v107 ? v107 : 0;
        uint64_t v109 = *(void (**)(uint64_t, uint64_t, uint64_t, CFErrorDomain, void))(v108 + 48);
        if (v109) {
          v109(v104, 0x1EE582C78, 0x1EE558FB8, v106, 0);
        }
      }
    }
  }
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((*(unsigned char *)(DerivedStorage + 176) || *(unsigned char *)(DerivedStorage + 177)) && dword_1E9350CD8)
  {
    uint64_t v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v112 = *v124;
  long long v113 = (const void *)FigCFCopyCompactDescription();
  if (v112)
  {
    if (dword_1E9350CD8)
    {
      unsigned int v114 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dworch_logDownloadConfig(0, @"input config: ", *v124);
  }
  else
  {
    if (dword_1E9350CD8)
    {
      CFRange v115 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v116 = CMBaseObjectGetDerivedStorage();
    dworch_logMediaSelectionArray(0, @"primary", *(const __CFArray **)(v116 + 40));
    CFArrayRef v117 = *(const __CFArray **)(v116 + 48);
    if (*(const __CFArray **)(v116 + 40) == v117)
    {
      if (dword_1E9350CD8)
      {
        CFRange v118 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      dworch_logMediaSelectionArray(0, @"aux", v117);
    }
  }
  if (!*(unsigned char *)(DerivedStorage + 417)) {
    goto LABEL_176;
  }
  if (*(void *)(DerivedStorage + 24))
  {
    CFAllocatorRef v119 = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(void *)(DerivedStorage + 424) = CFURLCreateCopyAppendingPathComponent(v119, *(CFURLRef *)(DerivedStorage + 24), @"InterstitialAssets", 1u);
LABEL_176:
    uint64_t v120 = FigStreamingAssetDownloadProgressMonitorCreate((const void *)*MEMORY[0x1E4F1CF80], v126, (const __CFDictionary *)a6, 0, *(NSObject **)DerivedStorage, &FigStreamingAssetDownloadOrchestratorCreate_progressMonitorCallbacks, (void *)(DerivedStorage + 360));
    if (!v120) {
      *a11 = 0;
    }
    goto LABEL_178;
  }
  uint64_t v120 = 0;
LABEL_178:
  if (v113) {
    CFRelease(v113);
  }
  return v120;
}

void dworch_progressUpdateCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    dworch_sendProgressUpdateCallback(a1, a3, a4);
  }
}

void *__copy_assignment_8_8_t0w8_pa0_62591_8_pa0_48202_16_pa0_13082_24_pa0_11046_32_pa0_49729_40_pa0_62126_48_pa0_6100_56_pa0_11999_64_pa0_10804_72(void *result, void *a2)
{
  *double result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  result[8] = a2[8];
  result[9] = a2[9];
  return result;
}

void dworch_logDownloadConfig(uint64_t a1, const __CFString *a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  unsigned int OptimizesAuxiliaryContentConfigurations = FigStreamingAssetDownloadConfigGetOptimizesAuxiliaryContentConfigurations((uint64_t)a3);
  unsigned int DownloadsInterstitialAssets = FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets((uint64_t)a3);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    uint64_t v9 = Mutable;
    CFMutableArrayRef v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    if (!v10) {
      goto LABEL_15;
    }
    CFDictionaryRef v11 = v10;
    CFStringRef v12 = CFCopyDescription(a3);
    if (v12)
    {
      if (a2) {
        CFStringAppend(v9, a2);
      }
      CFStringAppendFormat(v9, 0, @"\noptimizesAuxContentConfigs: %d", OptimizesAuxiliaryContentConfigurations);
      CFStringAppendFormat(v9, 0, @"\ndownloadsInterstitialAssets: %d", DownloadsInterstitialAssets);
      CFStringAppend(v9, v12);
      CFStringRef TrimmedLogFromString = dworch_copyNextTrimmedLogFromString(v9, 0);
      if (TrimmedLogFromString)
      {
        CFStringRef v14 = TrimmedLogFromString;
        CFIndex v15 = 0;
        do
        {
          CFArrayAppendValue(v11, v14);
          v15 += CFStringGetLength(v14);
          CFRelease(v14);
          CFStringRef v14 = dworch_copyNextTrimmedLogFromString(v9, v15);
        }
        while (v14);
      }
      CFIndex Count = CFArrayGetCount(v11);
      if (Count >= 1)
      {
        CFIndex v17 = Count;
        for (CFIndex i = 0; i != v17; ++i)
        {
          CFArrayGetValueAtIndex(v11, i);
          if (dword_1E9350CD8)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
    }
    CFRelease(v9);
    CFRelease(v11);
    uint64_t v9 = (__CFString *)v12;
    if (v12) {
LABEL_15:
    }
      CFRelease(v9);
  }
}

uint64_t FigStreamingAssetDownloadOrchestratorTestAlternateChoice(const void *a1, uint64_t a2, void *a3, void *a4)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  void v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return dworch_selectAlternates_chooseAlternatesFromCreationOptions(0, v4, a1, (unsigned __int8 *)v8, a3, a4);
}

uint64_t dworch_selectAlternates_chooseAlternatesFromCreationOptions(uint64_t a1, const __CFAllocator *a2, const void *a3, unsigned __int8 *a4, void *a5, void *a6)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v64 = 0;
  CFIndex v65 = 0;
  CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_141;
  }
  CFMutableArrayRef v12 = Mutable;
  uint64_t v62 = a5;
  uint64_t v13 = dworch_selectAlternates_installDeviceCapabilityFilters(a2, (uint64_t)a3);
  if (v13) {
    goto LABEL_144;
  }
  uint64_t v61 = a6;
  uint64_t v63 = v12;
  int v14 = *a4;
  double v15 = *((double *)a4 + 1);
  double v16 = *((double *)a4 + 2);
  int v17 = a4[24];
  int v18 = a4[25];
  uint64_t v20 = *((void *)a4 + 4);
  uint64_t v19 = *((void *)a4 + 5);
  int v21 = a4[48];
  uint64_t v22 = *((void *)a4 + 7);
  int v23 = a4[64];
  int v24 = a4[66];
  int v25 = a4[68];
  CFNumberRef v26 = (const __CFNumber *)*((void *)a4 + 9);
  cf[0] = 0;
  if (v25) {
    int v27 = 1;
  }
  else {
    int v27 = 4;
  }
  if (v23) {
    int v28 = v27;
  }
  else {
    int v28 = 1;
  }
  unsigned int v58 = v19;
  unsigned int v59 = v20;
  int v60 = v18;
  if (v25)
  {
    unsigned int v29 = 2;
  }
  else if (v23)
  {
    if (v18) {
      unsigned int v29 = 7;
    }
    else {
      unsigned int v29 = 0;
    }
  }
  else
  {
    unsigned int v29 = 4 * (v18 != 0);
  }
  uint64_t v30 = FigAlternatePreferredVideoFormatFilterCreate(a2, v28, v29, cf);
  CFTypeRef v31 = cf[0];
  if (v30) {
    goto LABEL_51;
  }
  uint64_t v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  CFTypeRef v31 = cf[0];
  if (v30) {
    goto LABEL_51;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  uint64_t v30 = FigAlternateSuppressAudioOnlyFilterCreate(a2, cf);
  CFTypeRef v31 = cf[0];
  if (v30) {
    goto LABEL_51;
  }
  uint64_t v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  CFTypeRef v31 = cf[0];
  if (v30) {
    goto LABEL_51;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  uint64_t v30 = v24
      ? FigAlternateLosslessAudioPreferenceFilterCreate((uint64_t)a2, 0, cf)
      : FigAlternateLossyAudioPreferenceFilterCreate((uint64_t)a2, cf);
  CFTypeRef v31 = cf[0];
  if (v30) {
    goto LABEL_51;
  }
  uint64_t v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  CFTypeRef v31 = cf[0];
  if (v30) {
    goto LABEL_51;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v21)
  {
    uint64_t v30 = FigAlternateMaximumSampleRatePreferenceFilter(a2, v26, cf, (double)v22);
    CFTypeRef v31 = cf[0];
    if (v30) {
      goto LABEL_51;
    }
    uint64_t v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
    CFTypeRef v31 = cf[0];
    if (v30) {
      goto LABEL_51;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
  }
  if (!v14) {
    goto LABEL_39;
  }
  uint64_t v30 = FigAlternateMinimumRequiredPresentationSizeFilterCreate(a2, cf, v15, v16);
  CFTypeRef v31 = cf[0];
  if (v30 || (uint64_t v30 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]), v31 = cf[0], v30))
  {
LABEL_51:
    uint64_t v33 = v30;
    CFMutableArrayRef v12 = v63;
    goto LABEL_52;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
LABEL_39:
  CFMutableArrayRef v12 = v63;
  if (v17)
  {
    uint64_t v32 = FigAlternateMinimumRequiredBitrateFilterCreate(a2, v59, cf);
    CFTypeRef v31 = cf[0];
    if (v32 || (v32 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]), CFTypeRef v31 = cf[0], v32))
    {
LABEL_96:
      uint64_t v33 = v32;
      goto LABEL_52;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
  }
  if (!v60) {
    goto LABEL_55;
  }
  uint64_t v32 = FigAlternateMinimumRequiredBitrateForHEVCFilterCreate(a2, v58, cf);
  CFTypeRef v31 = cf[0];
  if (v32) {
    goto LABEL_96;
  }
  uint64_t v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  CFTypeRef v31 = cf[0];
  if (v33 || !cf[0])
  {
LABEL_52:
    if (!v31) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  uint64_t v33 = 0;
LABEL_53:
  CFRelease(v31);
LABEL_54:
  if (v33) {
    goto LABEL_139;
  }
LABEL_55:
  int v34 = a4[25];
  int v35 = a4[64];
  int v36 = a4[68];
  cf[0] = 0;
  uint64_t v37 = FigAlternateContinuousFramesOnlyFilterCreate((uint64_t)a2, cf);
  if (v37) {
    goto LABEL_88;
  }
  uint64_t v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if (v37) {
    goto LABEL_88;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  int v38 = v36 ? 1 : 4;
  int v39 = v35 ? v38 : 1;
  if (v36)
  {
    unsigned int v40 = 2;
  }
  else if (v35)
  {
    unsigned int v40 = v34 ? 7 : 0;
  }
  else
  {
    unsigned int v40 = 4 * (v34 != 0);
  }
  uint64_t v37 = FigAlternatePreferredVideoFormatFilterCreate(a2, v39, v40, cf);
  if (v37) {
    goto LABEL_88;
  }
  uint64_t v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if (v37) {
    goto LABEL_88;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  uint64_t v37 = FigAlternateHighestRankingScoreFilterCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], cf);
  if (v37) {
    goto LABEL_88;
  }
  uint64_t v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if (v37) {
    goto LABEL_88;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  uint64_t v37 = FigAlternatePlaybackScoreAndBitRateFilterCreate(a2, cf);
  if (v37) {
    goto LABEL_88;
  }
  uint64_t v37 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if (v37) {
    goto LABEL_88;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  uint64_t v37 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)a2, cf);
  if (v37)
  {
LABEL_88:
    uint64_t v33 = v37;
    CFTypeRef v41 = cf[0];
    goto LABEL_89;
  }
  uint64_t v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  CFTypeRef v41 = cf[0];
  if (v33 || !cf[0])
  {
LABEL_89:
    if (!v41) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  uint64_t v33 = 0;
LABEL_90:
  CFRelease(v41);
LABEL_91:
  if (v33) {
    goto LABEL_139;
  }
  CFMutableArrayRef v42 = (const void *)*((void *)a4 + 9);
  cf[0] = 0;
  uint64_t v43 = FigAlternateDefaultAudioLayoutPreferenceFilterCreate((uint64_t)a2, v42, cf);
  CFTypeRef v44 = cf[0];
  if (v43)
  {
    uint64_t v33 = v43;
    goto LABEL_99;
  }
  uint64_t v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  CFTypeRef v44 = cf[0];
  if (v33 || !cf[0])
  {
LABEL_99:
    if (!v44) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  uint64_t v33 = 0;
LABEL_100:
  CFRelease(v44);
LABEL_101:
  if (v33) {
    goto LABEL_139;
  }
  uint64_t v13 = dworch_selectAlternates_chooseAppropriateAlternate(a3, &v65);
  if (v13) {
    goto LABEL_144;
  }
  uint64_t v13 = FigAlternateSelectionBossRemoveFilter((uint64_t)a3, @"DefaultAudioLayoutPreference");
  if (v13) {
    goto LABEL_144;
  }
  uint64_t v45 = (uint64_t)v65;
  if (!v65)
  {
    CFRelease(v12);
    uint64_t v33 = 0;
    goto LABEL_141;
  }
  if (!a4[67] && !a4[65] || (int)FigAlternateGetAudioChannelCount(v65, *((const void **)a4 + 9), 0) > 2) {
    goto LABEL_126;
  }
  PlaylistAlternateCFTypeRef URL = (const void *)FigAlternateGetPlaylistAlternateURL(v45);
  CFNumberRef v47 = (const __CFNumber *)*((void *)a4 + 9);
  cf[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v49 = FigAlternatePreferredAudioFormatFilterCreate(a2, 7u, 0, 0, 0, v47, 0, cf);
  if (v49) {
    goto LABEL_119;
  }
  uint64_t v49 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
  if (v49) {
    goto LABEL_119;
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  char v50 = DerivedStorage ? *(unsigned char *)(DerivedStorage + 552) : 1;
  uint64_t v49 = FigAlternateAllowListWithURLFilterCreate((uint64_t)a2, PlaylistAlternateURL, 700, v50, cf);
  if (v49)
  {
LABEL_119:
    uint64_t v33 = v49;
    CFTypeRef v51 = cf[0];
  }
  else
  {
    uint64_t v33 = FigAlternateSelectionBossAddFilter((uint64_t)a3, cf[0]);
    CFTypeRef v51 = cf[0];
    if (!v33 && cf[0])
    {
      uint64_t v33 = 0;
LABEL_121:
      CFRelease(v51);
      goto LABEL_122;
    }
  }
  if (v51) {
    goto LABEL_121;
  }
LABEL_122:
  if (v33) {
    goto LABEL_139;
  }
  uint64_t v13 = dworch_selectAlternates_chooseAppropriateAlternate(a3, &v64);
  if (!v13)
  {
    uint64_t v13 = FigAlternateSelectionBossRemoveFilter((uint64_t)a3, @"PreferredAudioFormat");
    if (!v13)
    {
      uint64_t v13 = FigAlternateSelectionBossRemoveFilter((uint64_t)a3, @"AllowListURLFilter");
      if (!v13)
      {
LABEL_126:
        CFTypeRef v53 = v64;
        dispatch_queue_t v52 = v65;
        if (a4[67] && v64)
        {
          uint64_t v54 = v62;
          if (v65)
          {
            CFRelease(v65);
            dispatch_queue_t v52 = 0;
            CFIndex v65 = 0;
          }
        }
        else
        {
          uint64_t v54 = v62;
          if (FigCFEqual() && v53)
          {
            CFRelease(v53);
            CFTypeRef v53 = 0;
            CFTypeRef v64 = 0;
          }
        }
        if (dword_1E9350CD8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v54)
        {
          void *v54 = v52;
          CFIndex v65 = 0;
        }
        uint64_t v33 = 0;
        if (v61)
        {
          *uint64_t v61 = v53;
          CFTypeRef v64 = 0;
        }
        goto LABEL_139;
      }
    }
  }
LABEL_144:
  uint64_t v33 = v13;
LABEL_139:
  uint64_t v56 = v65;
  CFRelease(v12);
  if (v56) {
    CFRelease(v56);
  }
LABEL_141:
  if (v64) {
    CFRelease(v64);
  }
  return v33;
}

void dworch_sendProgressUpdateCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    uint64_t v8 = (const void *)v7;
    uint64_t v9 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
    if (v9)
    {
      CFMutableArrayRef v10 = v9;
      if (a1) {
        CFTypeRef v11 = CFRetain(a1);
      }
      else {
        CFTypeRef v11 = 0;
      }
      *CFMutableArrayRef v10 = v11;
      v10[1] = v8;
      v10[7] = a2;
      v10[8] = a3;
      CFMutableArrayRef v12 = *(NSObject **)(DerivedStorage + 280);
      dispatch_async_f(v12, v10, (dispatch_function_t)dworch_sendProgressUpdateCallbackOnCallbackQueue);
    }
    else if (FigSignalErrorAt())
    {
      CFRelease(v8);
    }
  }
}

void dworch_sendProgressUpdateCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    CFAllocatorRef v3 = *(void (**)(void, void, void, void))(DerivedStorage + 256);
    if (v3) {
      v3(a1[1], *a1, a1[7], a1[8]);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFAllocatorRef v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

uint64_t dworch_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_invalidateDispatch);
  return v5;
}

void dworch_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dworch_invalidateGuts();
  dworch_relinquishAccessToDestinationURL();
  FigSymptomsReportStreamingAssetDownloadEnd((const unsigned __int8 *)(DerivedStorage + 600));
  uint64_t v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 32) = 0;
  }
  int64x2_t v2 = *(const void **)(DerivedStorage + 560);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 560) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

CFStringRef dworch_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v5 = (__CFString *)DerivedStorage[3];
  uint64_t v4 = DerivedStorage[4];
  uint64_t v6 = DerivedStorage[2];
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (v5) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || !*(unsigned char *)(v7 + 552)) {
    uint64_t v5 = @"[]";
  }
  return CFStringCreateWithFormat(v3, 0, @"[FigStreamingAssetDownloadOrchestrator %p debugIdentifier:%@ asset %p asset %@ destinationURL %@]", a1, v4, v6, v6, v5);
}

uint64_t dworch_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  context[0] = a1;
  context[1] = a2;
  uint64_t v13 = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)dworch_copyPropertyDispatch);
  uint64_t result = v12;
  if (!v12) {
    *a4 = v11;
  }
  return result;
}

uint64_t dworch_invalidateDispatch(uint64_t a1)
{
  uint64_t result = dworch_invalidateGuts();
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t dworch_invalidateGuts()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 568))
  {
    uint64_t v1 = (void *)result;
    *(unsigned char *)(result + 568) = 1;
    if (*(void *)(result + 560)) {
      FigRetainProxyInvalidate();
    }
    if (dword_1E9350CD8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dworch_removeAssetListeners();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 464);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
      dworch_downloadMedia_removeMediaDownloaderListeners();
    }
    dworch_selectAlternates_removePumpListeners();
    uint64_t v6 = (const void *)v1[1];
    if (v6)
    {
      CFRelease(v6);
      v1[1] = 0;
    }
    uint64_t v7 = (const void *)v1[2];
    if (v7)
    {
      CFRelease(v7);
      v1[2] = 0;
    }
    BOOL v8 = (const void *)v1[3];
    if (v8)
    {
      CFRelease(v8);
      v1[3] = 0;
    }
    uint64_t v9 = (const void *)v1[5];
    if (v9)
    {
      CFRelease(v9);
      v1[5] = 0;
    }
    CFMutableArrayRef v10 = (const void *)v1[6];
    if (v10)
    {
      CFRelease(v10);
      v1[6] = 0;
    }
    uint64_t v11 = (const void *)v1[8];
    if (v11)
    {
      CFRelease(v11);
      v1[8] = 0;
    }
    uint64_t v12 = (const void *)v1[9];
    if (v12)
    {
      CFRelease(v12);
      v1[9] = 0;
    }
    uint64_t v13 = (const void *)v1[10];
    if (v13)
    {
      CFRelease(v13);
      v1[10] = 0;
    }
    int v14 = (const void *)v1[11];
    if (v14)
    {
      CFRelease(v14);
      v1[11] = 0;
    }
    double v15 = (const void *)v1[23];
    if (v15)
    {
      CFRelease(v15);
      v1[23] = 0;
    }
    double v16 = (const void *)v1[24];
    if (v16)
    {
      CFRelease(v16);
      v1[24] = 0;
    }
    int v17 = v1[35];
    if (v17)
    {
      dispatch_release(v17);
      v1[35] = 0;
    }
    int v18 = (const void *)v1[36];
    if (v18)
    {
      CFRelease(v18);
      v1[36] = 0;
    }
    uint64_t v19 = (const void *)v1[37];
    if (v19)
    {
      CFRelease(v19);
      v1[37] = 0;
    }
    uint64_t v20 = (const void *)v1[38];
    if (v20)
    {
      CFRelease(v20);
      v1[38] = 0;
    }
    int v21 = (const void *)v1[40];
    if (v21)
    {
      CFRelease(v21);
      v1[40] = 0;
    }
    uint64_t v22 = (const void *)v1[41];
    if (v22)
    {
      CFRelease(v22);
      v1[41] = 0;
    }
    int v23 = (const void *)v1[44];
    if (v23)
    {
      CFRelease(v23);
      v1[44] = 0;
    }
    int v24 = (const void *)v1[45];
    if (v24)
    {
      CFRelease(v24);
      v1[45] = 0;
    }
    int v25 = (const void *)v1[7];
    if (v25)
    {
      CFRelease(v25);
      v1[7] = 0;
    }
    CFNumberRef v26 = (const void *)v1[48];
    if (v26)
    {
      CFRelease(v26);
      v1[48] = 0;
    }
    int v27 = (const void *)v1[46];
    if (v27)
    {
      CFRelease(v27);
      v1[46] = 0;
    }
    int v28 = (const void *)v1[47];
    if (v28)
    {
      CFRelease(v28);
      v1[47] = 0;
    }
    unsigned int v29 = (const void *)v1[50];
    if (v29)
    {
      CFRelease(v29);
      v1[50] = 0;
    }
    uint64_t v30 = (void *)v1[42];
    if (v30)
    {
      CFTypeRef v31 = (void *)*v30;
      if (*v30)
      {
        do
        {
          uint64_t v32 = v31;
          v31[1] = v30[1];
          *(void *)v30[1] = v31;
          dworch_freeAlternateAndRenditionItem(v30);
          CFTypeRef v31 = (void *)*v32;
          uint64_t v30 = v32;
        }
        while (*v32);
      }
      else
      {
        uint64_t v32 = (void *)v1[42];
      }
      uint64_t v33 = (void *)v32[1];
      v1[43] = v33;
      void *v33 = 0;
      dworch_freeAlternateAndRenditionItem(v32);
    }
    int v34 = (const void *)v1[51];
    if (v34)
    {
      CFRelease(v34);
      v1[51] = 0;
    }
    int v35 = (const void *)v1[54];
    if (v35)
    {
      CFRelease(v35);
      v1[54] = 0;
    }
    int v36 = (const void *)v1[55];
    if (v36)
    {
      CFRelease(v36);
      v1[55] = 0;
    }
    uint64_t v37 = (const void *)v1[57];
    if (v37)
    {
      CFRelease(v37);
      v1[57] = 0;
    }
    int v38 = (const void *)v1[58];
    if (v38)
    {
      CFRelease(v38);
      v1[58] = 0;
    }
    int v39 = (const void *)v1[62];
    if (v39)
    {
      CFRelease(v39);
      v1[62] = 0;
    }
    unsigned int v40 = (void *)v1[63];
    if (v40)
    {
      CFTypeRef v41 = (void *)*v40;
      if (*v40)
      {
        do
        {
          CFMutableArrayRef v42 = v41;
          v41[1] = v40[1];
          *(void *)v40[1] = v41;
          dworch_freeDownloadMediaProgressItem(v40);
          CFTypeRef v41 = (void *)*v42;
          unsigned int v40 = v42;
        }
        while (*v42);
      }
      else
      {
        CFMutableArrayRef v42 = (void *)v1[63];
      }
      uint64_t v43 = (void *)v42[1];
      v1[64] = v43;
      *uint64_t v43 = 0;
      dworch_freeDownloadMediaProgressItem(v42);
    }
    CFTypeRef v44 = (const void *)v1[67];
    if (v44)
    {
      CFRelease(v44);
      v1[67] = 0;
    }
    uint64_t v45 = (const void *)v1[72];
    if (v45)
    {
      CFRelease(v45);
      v1[72] = 0;
    }
    return dworch_relinquishAccessToDestinationURL();
  }
  return result;
}

uint64_t dworch_removeAssetListeners()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListener();
}

uint64_t dworch_selectAlternates_removePumpListeners()
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 296)) {
    return 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t result = FigNotificationCenterRemoveWeakListener();
  if (!result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void dworch_freeAlternateAndRenditionItem(void *a1)
{
  if (a1)
  {
    int64x2_t v2 = (const void *)a1[2];
    if (v2) {
      CFRelease(v2);
    }
    CFAllocatorRef v3 = (const void *)a1[3];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

void dworch_freeDownloadMediaProgressItem(void *a1)
{
  int64x2_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

uint64_t dworch_relinquishAccessToDestinationURL()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 544)) {
    return 0;
  }
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = FigAssetDownloadCoordinatorRelinquishAccessToURL(*(void **)(DerivedStorage + 544));
  if (!result) {
    *(void *)(DerivedStorage + 544) = 0;
  }
  return result;
}

uint64_t dworch_assetNotificationCallback(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (CFMutableArrayRef v10 = (void *)DerivedStorage, CMBaseObjectGetDerivedStorage(), !FigRetainProxyIsInvalidated())
    && CFEqual(a3, @"assetNotice_PropertyLoaded")
    && v10[2] == a4)
  {
    FigCFDictionaryGetInt32IfPresent();
    CFDictionaryGetValue(a5, @"assetPayload_Property");
    uint64_t result = FigCFEqual();
    if (result && !v10[44])
    {
      uint64_t v12 = v10[1];
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(v10[2]);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v16 = *(void *)(VTable + 8);
      uint64_t result = VTable + 8;
      uint64_t v15 = v16;
      if (v16) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v17 + 48);
      if (v18)
      {
        uint64_t result = v18(CMBaseObject, @"Duration", v12, v10 + 44);
        if (!result)
        {
          dworch_downloadMedia_symptomsReportStreamingAssetDownloadStart();
          return dworch_removeAssetListeners(a2);
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t dworch_downloadMedia_symptomsReportStreamingAssetDownloadStart()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  BOOL v1 = *(unsigned char *)(result + 178) == 0;
  BOOL v2 = *(unsigned char *)(result + 179) == 0;
  if (*(_DWORD *)(result + 532) == 3)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(result + 524) == 1)
    {
      uint64_t result = dworch_loadDuration();
      if (*(void *)(v3 + 352))
      {
        CFTypeRef cf = 0;
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v3 + 16));
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v7 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
        if (v7 && !v7(CMBaseObject, @"assetProperty_CreationOptionsDictionary", *MEMORY[0x1E4F1CF80], &cf))
        {
          v11.xpc_object_t value = 0;
          if (FigCFDictionaryGetInt64IfPresent()) {
            BOOL v10 = v11.value == 0;
          }
          else {
            BOOL v10 = 0;
          }
          int v8 = !v10;
          if (cf) {
            CFRelease(cf);
          }
        }
        else
        {
          int v8 = 1;
        }
        CMTimeMakeFromDictionary(&v13, *(CFDictionaryRef *)(v3 + 352));
        uint64_t v9 = *(void *)(v3 + 72);
        CMTime v11 = v13;
        return FigSymptomsReportStreamingAssetDownloadStart(v9, &v11, v8, v1, v2, (unsigned __int8 *)(v3 + 600));
      }
    }
  }
  return result;
}

uint64_t dworch_loadDuration()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  char v17 = 0;
  if (!*(void *)(result + 352))
  {
    uint64_t v1 = result;
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterAddWeakListener();
    if (!result || result == -12724)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v5 = v6;
      uint64_t v7 = v6 ? v5 : 0;
      int v8 = *(uint64_t (**)(uint64_t, __CFString *, char *))(v7 + 24);
      if (v8)
      {
        uint64_t result = v8(v3, @"Duration", &v17);
        if (!result && v17 != 0)
        {
          uint64_t v10 = *(void *)(v1 + 8);
          uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v1 + 16));
          uint64_t v12 = CMBaseObjectGetVTable();
          uint64_t v14 = *(void *)(v12 + 8);
          uint64_t result = v12 + 8;
          uint64_t v13 = v14;
          if (v14) {
            uint64_t v15 = v13;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v15 + 48);
          if (v16) {
            return v16(CMBaseObject, @"Duration", v10, v1 + 352);
          }
        }
      }
    }
  }
  return result;
}

uint64_t dworch_downloadMedia_removeMediaDownloaderListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t result = FigNotificationCenterRemoveWeakListener();
  if (!result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListener();
    if (!result)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return FigNotificationCenterRemoveWeakListener();
    }
  }
  return result;
}

void dworch_downloadMedia_downloadSucceededCallback(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated() && FigCFArrayContainsValue() && a5)
  {
    if (dword_1E9350CD8)
    {
      LODWORD(duration.CFDictionarySetValue(theDict, @"region", value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFStringRef Value = CFDictionaryGetValue(a5, @"AssetDownloaderPayloadKey_SelectedMediaArray");
    uint64_t v11 = CMBaseObjectGetDerivedStorage() + 504;
    while (1)
    {
      uint64_t v11 = *(void *)v11;
      if (!v11) {
        break;
      }
      if (*(const void **)(v11 + 16) == a4)
      {
        *(unsigned char *)(v11 + 48) = 1;
        uint64_t v12 = *(const void **)(v11 + 40);
        *(void *)(v11 + 40) = Value;
        if (Value) {
          CFRetain(Value);
        }
        if (v12) {
          CFRelease(v12);
        }
        if (v11 == *(void *)(DerivedStorage + 504))
        {
          uint64_t v13 = *(const void **)(v11 + 24);
          if (v13)
          {
            CFRelease(v13);
            *(void *)(v11 + 24) = 0;
          }
        }
        uint64_t v14 = CMBaseObjectGetDerivedStorage();
        uint64_t v15 = *(uint64_t **)(v14 + 504);
        if (v15)
        {
          uint64_t v16 = v14;
          long long v52 = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v17 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          do
          {
            int v18 = (uint64_t *)*v15;
            uint64_t v19 = CMBaseObjectGetDerivedStorage();
            memset(&v55, 0, sizeof(v55));
            CMTimeMakeFromDictionary(&duration, *(CFDictionaryRef *)(v19 + 352));
            *(_OWORD *)&start.start.xpc_object_t value = v52;
            start.start.CMTimeEpoch epoch = v17;
            CMTimeRangeMake(&v55, &start.start, &duration);
            CFAllocatorRef v20 = *(const __CFAllocator **)(v19 + 8);
            CMTimeRange start = v55;
            CFDictionaryRef v21 = CMTimeRangeCopyAsDictionary(&start, v20);
            if (v21)
            {
              CFDictionaryRef v22 = v21;
              CFIndex v23 = 0;
              while (1)
              {
                CFArrayRef Count = (const __CFArray *)v15[3];
                if (Count) {
                  CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
                }
                if (v23 >= (uint64_t)Count) {
                  break;
                }
                CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v15[3], v23);
                uint64_t v26 = dworch_sendDidChangeLoadedTimeRangeCallback(a2, ValueAtIndex, (const void *)v15[3], v22, (const void *)v15[5]);
                ++v23;
                if (v26)
                {
                  uint64_t v27 = v26;
                  goto LABEL_26;
                }
              }
              uint64_t v27 = 0;
LABEL_26:
              CFRelease(v22);
              if (v27) {
                goto LABEL_61;
              }
            }
            else
            {
              uint64_t v27 = FigSignalErrorAt();
              if (v27) {
                goto LABEL_61;
              }
            }
            if (!*((unsigned char *)v15 + 48)) {
              break;
            }
            int v28 = (const void *)v15[5];
            uint64_t v29 = CMBaseObjectGetDerivedStorage();
            uint64_t v30 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v30)
            {
              CFTypeRef v31 = (const void *)v30;
              uint64_t v32 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
              if (v32)
              {
                uint64_t v33 = v32;
                if (a2) {
                  CFTypeRef v34 = CFRetain(a2);
                }
                else {
                  CFTypeRef v34 = 0;
                }
                void *v33 = v34;
                v33[1] = v31;
                if (v28) {
                  CFTypeRef v35 = CFRetain(v28);
                }
                else {
                  CFTypeRef v35 = 0;
                }
                v33[6] = v35;
                dispatch_async_f(*(dispatch_queue_t *)(v29 + 280), v33, (dispatch_function_t)dworch_sendDidFinishDownloadForMediaSelectionCallbackOnCallbackQueue);
              }
              else
              {
                uint64_t v38 = FigSignalErrorAt();
                if (v38)
                {
                  uint64_t v27 = v38;
                  CFRelease(v31);
                  goto LABEL_61;
                }
              }
            }
            uint64_t v36 = *v15;
            uint64_t v37 = (void *)v15[1];
            if (*v15)
            {
              *(void *)(v36 + 8) = v37;
              uint64_t v37 = (void *)v15[1];
            }
            else
            {
              *(void *)(v16 + 512) = v37;
            }
            *uint64_t v37 = v36;
            dworch_freeDownloadMediaProgressItem(v15);
            uint64_t v15 = v18;
          }
          while (v18);
        }
        uint64_t v39 = CMBaseObjectGetDerivedStorage();
        uint64_t v40 = CMBaseObjectGetDerivedStorage();
        CFArrayRef v41 = *(const __CFArray **)(v40 + 464);
        if (v41) {
          v42.length = CFArrayGetCount(*(CFArrayRef *)(v40 + 464));
        }
        else {
          v42.length = 0;
        }
        v42.locatioCFIndex n = 0;
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v41, v42, a4);
        uint64_t v44 = dworch_downloadMedia_removeMediaDownloaderListeners(a2, a4);
        if (v44)
        {
          uint64_t v27 = v44;
          goto LABEL_61;
        }
        uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(a4);
        if (CMBaseObject)
        {
          uint64_t v46 = CMBaseObject;
          uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v48 = v47 ? v47 : 0;
          uint64_t v49 = *(void (**)(uint64_t))(v48 + 24);
          if (v49) {
            v49(v46);
          }
        }
        if (FirstIndexOfValue != -1) {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v39 + 464), FirstIndexOfValue);
        }
        if (*(unsigned char *)(v39 + 312)
          || !*(void *)(v39 + 488) && ((CFArrayRef v51 = *(const __CFArray **)(v39 + 464)) == 0 || !CFArrayGetCount(v51)))
        {
          *(unsigned char *)(v39 + 521) = 1;
          uint64_t started = dworch_downloadMedia_checkIfStageComplete(a2);
          goto LABEL_60;
        }
        if (*(_DWORD *)(v39 + 524) == 1)
        {
          uint64_t started = dworch_downloadMedia_startNextMediaSelectionDownload((uint64_t)a2);
          goto LABEL_60;
        }
        return;
      }
    }
  }
  else
  {
    uint64_t started = FigSignalErrorAt();
LABEL_60:
    uint64_t v27 = started;
    if (started) {
LABEL_61:
    }
      dworch_transitionToTerminalStateWithOSStatus(a2, v27);
  }
}

void dworch_downloadMedia_downloadFailedCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated() && FigCFArrayContainsValue() && a5)
  {
    CFStringRef Value = (void *)CFDictionaryGetValue(a5, @"AssetDownloaderPayloadKey_CFError");
    uint64_t v9 = CFDictionaryGetValue(a5, @"AssetDownloaderPayloadKey_SelectedAlternate");
    if (v9) {
      uint64_t v9 = CFRetain(v9);
    }
    *(void *)(DerivedStorage + 496) = v9;
    if (dword_1E9350CD8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dworch_transitionToTerminalState(a2, Value);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void dworch_downloadMedia_loadedTimeRangesChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  *(_OWORD *)&v23.start.xpc_object_t value = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)&v23.start.CMTimeEpoch epoch = v9;
  *(_OWORD *)&v23.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated() && FigCFArrayContainsValue() && a5)
  {
    CFStringRef Value = CFDictionaryGetValue(a5, @"AssetDownloaderPayloadKey_NewlyLoadedTimeRanges");
    uint64_t v11 = CFDictionaryGetValue(a5, @"AssetDownloaderPayloadKey_CurrentLoadedTimeRanges");
    uint64_t v12 = CFDictionaryGetValue(a5, @"AssetDownloaderPayloadKey_SelectedMediaArray");
    CMTimeMakeFromDictionary(&duration, *(CFDictionaryRef *)(DerivedStorage + 352));
    *(_OWORD *)&v21.start.xpc_object_t value = *MEMORY[0x1E4F1FA48];
    v21.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    CMTimeRangeMake(&v23, &v21.start, &duration);
    CFAllocatorRef v13 = *(const __CFAllocator **)(DerivedStorage + 8);
    CMTimeRange v21 = v23;
    CFDictionaryRef v14 = CMTimeRangeCopyAsDictionary(&v21, v13);
    if (v14)
    {
      CFDictionaryRef v15 = v14;
      uint64_t v16 = (void *)(CMBaseObjectGetDerivedStorage() + 504);
      while (1)
      {
        uint64_t v16 = (void *)*v16;
        if (!v16) {
          break;
        }
        if (v16[2] == a4)
        {
          CMTimeEpoch v17 = (const void *)v16[3];
          _OWORD v16[3] = v11;
          if (v11) {
            CFRetain(v11);
          }
          if (v17) {
            CFRelease(v17);
          }
          int v18 = (const void *)v16[4];
          v16[4] = v15;
          CFRetain(v15);
          if (v18) {
            CFRelease(v18);
          }
          uint64_t v19 = (const void *)v16[5];
          CMTime v16[5] = v12;
          if (v12) {
            CFRetain(v12);
          }
          if (v19) {
            CFRelease(v19);
          }
          if (v16 == *(void **)(DerivedStorage + 504)) {
            dworch_sendDidChangeLoadedTimeRangeCallback(a2, Value, v11, v15, v12);
          }
          uint64_t v20 = *(void *)(DerivedStorage + 480);
          if (*(void *)(DerivedStorage + 472) != v20 && *(_DWORD *)(DerivedStorage + 524) == 1)
          {
            *(void *)(DerivedStorage + 472) = v20;
            dworch_downloadMedia_startNextMediaSelectionDownload(a2);
          }
          break;
        }
      }
      CFRelease(v15);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void dworch_transitionToTerminalStateWithOSStatus(const void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  FigCreateErrorForOSStatus(a2, (CFErrorRef *)&cf);
  dworch_transitionToTerminalState(a1, (void *)cf);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t dworch_sendDidChangeLoadedTimeRangeCallback(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (const void *)v11;
  CFAllocatorRef v13 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
  if (v13)
  {
    CFDictionaryRef v14 = v13;
    if (a1) {
      CFTypeRef v15 = CFRetain(a1);
    }
    else {
      CFTypeRef v15 = 0;
    }
    *CFDictionaryRef v14 = v15;
    v14[1] = v12;
    if (a2) {
      CFTypeRef v16 = CFRetain(a2);
    }
    else {
      CFTypeRef v16 = 0;
    }
    v14[3] = v16;
    if (a3) {
      CFTypeRef v17 = CFRetain(a3);
    }
    else {
      CFTypeRef v17 = 0;
    }
    v14[4] = v17;
    if (a4) {
      CFTypeRef v18 = CFRetain(a4);
    }
    else {
      CFTypeRef v18 = 0;
    }
    v14[5] = v18;
    if (a5) {
      CFTypeRef v19 = CFRetain(a5);
    }
    else {
      CFTypeRef v19 = 0;
    }
    v14[6] = v19;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 280), v14, (dispatch_function_t)dworch_sendDidChangeLoadedTimeRangeOnCallbackQueue);
    return 0;
  }
  uint64_t v20 = FigSignalErrorAt();
  if (v20) {
    CFRelease(v12);
  }
  return v20;
}

void dworch_sendDidChangeLoadedTimeRangeOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(void (**)(void, void, void, void, void, void))(DerivedStorage + 224);
    if (v3) {
      v3(a1[1], *a1, a1[3], a1[4], a1[5], a1[6]);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[3];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[4];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[5];
  if (v7) {
    CFRelease(v7);
  }
  int v8 = (const void *)a1[6];
  if (v8) {
    CFRelease(v8);
  }

  free(a1);
}

void dworch_sendDidFinishDownloadForMediaSelectionCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(void (**)(void, void, void))(DerivedStorage + 240);
    if (v3) {
      v3(a1[1], *a1, a1[6]);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

uint64_t dworch_downloadMedia_checkIfStageComplete(const void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 521)) {
    return 0;
  }
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 440);
  if (!v3 || CFArrayGetCount(v3) < 1)
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    CFTypeRef v40 = 0;
    uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(*(void *)(v6 + 360));
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
    if (v11)
    {
      uint64_t v12 = v11(CMBaseObject, @"AssetDownloaderProperty_DownloadedBytes", *MEMORY[0x1E4F1CF80], &v40);
      if (!v12)
      {
        uint64_t SInt64 = FigCFNumberGetSInt64();
        dworch_sendProgressUpdateCallback(a1, SInt64, SInt64);
        FigStreamingAssetProgressMarkDownloadComplete(*(const void **)(v6 + 360));
        uint64_t v14 = *(void *)(v6 + 56);
        if (v14)
        {
          FigStreamingAssetDownloadConfigGetTimeRange(v14, (uint64_t)v39);
          if (v39[12])
          {
            FigStreamingAssetDownloadConfigGetTimeRange(*(void *)(v6 + 56), (uint64_t)v38);
            if (v38[36])
            {
              FigStreamingAssetDownloadConfigGetTimeRange(*(void *)(v6 + 56), (uint64_t)v36);
              if (!v37)
              {
                FigStreamingAssetDownloadConfigGetTimeRange(*(void *)(v6 + 56), (uint64_t)v34);
                if ((v35 & 0x8000000000000000) == 0)
                {
LABEL_56:
                  if (dword_1E9350CD8)
                  {
                    LODWORD(cf) = 0;
                    LOBYTE(theArray) = 0;
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v31 = cf;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)theArray)) {
                      unsigned int v32 = v31;
                    }
                    else {
                      unsigned int v32 = v31 & 0xFFFFFFFE;
                    }
                    if (v32)
                    {
                      uint64_t v33 = *(void *)(v6 + 32);
                      int v45 = 136315650;
                      uint64_t v46 = "dworch_downloadMedia_stageComplete";
                      __int16 v47 = 2048;
                      uint64_t v48 = a1;
                      __int16 v49 = 2114;
                      uint64_t v50 = v33;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  dworch_transitionToTerminalState(a1, 0);
                  uint64_t v10 = 0;
                  goto LABEL_64;
                }
              }
            }
          }
        }
        uint64_t v15 = CMBaseObjectGetDerivedStorage();
        CFArrayRef theArray = 0;
        CFTypeRef cf = 0;
        uint64_t v12 = dworch_ensurePersistentStreamingCache((uint64_t)a1);
        if (!v12)
        {
          CFTypeRef v16 = *(const void ***)(v15 + 336);
          if (v16)
          {
            CFTypeRef v17 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
            while (1)
            {
              CFArrayRef v18 = CFArrayCreate(*(CFAllocatorRef *)(v15 + 8), v16 + 2, 1, v17);
              if (!v18)
              {
                uint64_t v19 = FigSignalErrorAt();
LABEL_68:
                uint64_t v10 = v19;
                int v24 = 0;
                goto LABEL_47;
              }
              uint64_t v19 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate(*(void **)(v15 + 8), *(void *)(v15 + 456), (const __CFArray *)v16[3], 1, &cf);
              if (v19) {
                goto LABEL_68;
              }
              CFTypeRef v20 = cf;
              uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v21) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = 0;
              }
              CMTimeRange v23 = *(uint64_t (**)(CFTypeRef, CFArrayRef, CFArrayRef *))(v22 + 24);
              if (!v23)
              {
                int v24 = 0;
                uint64_t v10 = 4294954514;
                goto LABEL_47;
              }
              uint64_t v19 = v23(v20, v18, &theArray);
              if (v19) {
                goto LABEL_68;
              }
              if (!theArray || CFArrayGetCount(theArray) != 1) {
                break;
              }
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
              CFRelease(v18);
              if (theArray)
              {
                CFRelease(theArray);
                CFArrayRef theArray = 0;
              }
              CFTypeRef v16 = (const void **)*v16;
              if (!v16) {
                goto LABEL_34;
              }
            }
            int v24 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v15 + 8), (const __CFArray *)v16[3]);
            if (dword_1E9350CD8)
            {
              unsigned int v42 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              int v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v26 = v42;
              if (os_log_type_enabled(v25, type)) {
                unsigned int v27 = v26;
              }
              else {
                unsigned int v27 = v26 & 0xFFFFFFFE;
              }
              if (v27)
              {
                uint64_t v28 = *(void *)(v15 + 32);
                uint64_t v29 = v16[2];
                int v45 = 136316162;
                uint64_t v46 = "dworch_downloadMedia_validateDownloadIsPlayableOffline";
                __int16 v47 = 2048;
                uint64_t v48 = a1;
                __int16 v49 = 2114;
                uint64_t v50 = v28;
                __int16 v51 = 2112;
                long long v52 = v29;
                __int16 v53 = 2112;
                uint64_t v54 = v24;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v10 = 4294950639;
            }
            else
            {
              uint64_t v10 = 4294950639;
            }
          }
          else
          {
LABEL_34:
            CFArrayRef v18 = 0;
            int v24 = 0;
            uint64_t v10 = 0;
          }
LABEL_47:
          if (cf) {
            CFRelease(cf);
          }
          if (v18) {
            CFRelease(v18);
          }
          if (theArray) {
            CFRelease(theArray);
          }
          if (v24) {
            CFRelease(v24);
          }
          if (v10) {
            goto LABEL_64;
          }
          goto LABEL_56;
        }
      }
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v10 = 4294954514;
    }
LABEL_64:
    if (v40) {
      CFRelease(v40);
    }
    return v10;
  }
  CFNumberRef ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();

  return dworch_start(ValueAtIndex);
}

uint64_t dworch_downloadMedia_startNextMediaSelectionDownload(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 524) != 1)
  {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  xpc_object_t value = 0;
  uint64_t v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v43 = (const void *)*MEMORY[0x1E4F1CFC8];
  while (1)
  {
    if (*(void *)(DerivedStorage + 488))
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 464);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if ((uint64_t)Count < *(void *)(DerivedStorage + 472)) {
        goto LABEL_10;
      }
    }
    if (!*(unsigned char *)(DerivedStorage + 312)) {
      goto LABEL_75;
    }
    CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 464);
    if (v7)
    {
      if (CFArrayGetCount(v7))
      {
LABEL_75:
        uint64_t v11 = 0;
        uint64_t v42 = 0;
        goto LABEL_70;
      }
LABEL_10:
      if (!*(unsigned char *)(DerivedStorage + 312))
      {
        uint64_t v8 = *(void *)(DerivedStorage + 488);
        uint64_t v4 = *(const void **)(v8 + 16);
        uint64_t v3 = *(void *)(v8 + 24);
      }
    }
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v9 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v11 = Mutable;
    if (Mutable) {
      break;
    }
    uint64_t v40 = FigSignalErrorAt();
    if (v40)
    {
      uint64_t v42 = v40;
      goto LABEL_77;
    }
LABEL_31:
    uint64_t matched = FigStreamingAssetDownloaderCreateWithAsset(*(const void **)(DerivedStorage + 8), *(const void **)(DerivedStorage + 16), *(const void **)(DerivedStorage + 24), v11, (CFTypeRef *)&value);
    if (matched) {
      goto LABEL_68;
    }
    if (dword_1E9350CD8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t matched = FigNotificationCenterAddWeakListener();
    if (matched) {
      goto LABEL_68;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t matched = FigNotificationCenterAddWeakListener();
    if (matched) {
      goto LABEL_68;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t matched = FigNotificationCenterAddWeakListener();
    if (matched) {
      goto LABEL_68;
    }
    if (v3)
    {
      uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(value);
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      int v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v23 + 56);
      if (!v24) {
        goto LABEL_69;
      }
      uint64_t matched = v24(CMBaseObject, @"AssetDownloaderProperty_SelectedMediaArray", v3);
      if (matched) {
        goto LABEL_68;
      }
    }
    uint64_t v25 = *(void *)(DerivedStorage + 360);
    uint64_t v26 = FigAssetDownloaderGetCMBaseObject(value);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v28 + 56);
    if (!v29) {
      goto LABEL_69;
    }
    uint64_t matched = v29(v26, @"AssetDownloaderProperty_ProgressMonitor", v25);
    if (matched) {
      goto LABEL_68;
    }
    uint64_t v30 = *(void *)(DerivedStorage + 576);
    uint64_t v31 = FigAssetDownloaderGetCMBaseObject(value);
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v33 = v32 ? v32 : 0;
    CFTypeRef v34 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v33 + 56);
    if (!v34)
    {
LABEL_69:
      uint64_t v42 = 4294954514;
      goto LABEL_70;
    }
    uint64_t matched = v34(v31, @"AssetDownloaderProperty_ReportingAgent", v30);
    if (matched) {
      goto LABEL_68;
    }
    uint64_t v35 = value;
    uint64_t v36 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E00404C80A7E4uLL);
    if (v36)
    {
      if (v35) {
        CFTypeRef v37 = CFRetain(v35);
      }
      else {
        CFTypeRef v37 = 0;
      }
      v36[2] = v37;
    }
    else
    {
      uint64_t matched = FigSignalErrorAt();
      if (matched) {
        goto LABEL_68;
      }
    }
    *uint64_t v36 = 0;
    uint64_t v38 = *(void **)(DerivedStorage + 512);
    v36[1] = v38;
    *uint64_t v38 = v36;
    *(void *)(DerivedStorage + 512) = v36;
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 464), value);
    uint64_t v39 = *(void **)(DerivedStorage + 488);
    if (v39) {
      *(void *)(DerivedStorage + 488) = *v39;
    }
    uint64_t matched = dworch_downloadMedia_matchMediaDownloaderToOrchestratorStatus(a1, (uint64_t)value);
    if (matched)
    {
LABEL_68:
      uint64_t v42 = matched;
      goto LABEL_70;
    }
    if (value)
    {
      CFRelease(value);
      xpc_object_t value = 0;
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  if (v4) {
    CFDictionarySetValue(Mutable, @"AssetDownloaderCreateOption_SelectedAlternate", v4);
  }
  CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_DisableCoordinatorInteraction", v5);
  CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_enableDownloadStorageManagementInteraction", v43);
  CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_ReleaseResourcesImmediatelyOnPause", v5);
  uint64_t v12 = *(const void **)(v9 + 288);
  if (v12) {
    CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_PlaylistCache", v12);
  }
  if (*(unsigned char *)(v9 + 178)) {
    CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_DisallowsExpensiveNetworkAccess", v5);
  }
  if (*(unsigned char *)(v9 + 179)) {
    CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_DisallowsConstrainedNetworkAccess", v5);
  }
  CFAllocatorRef v13 = *(const void **)(v9 + 32);
  if (v13) {
    CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_DebugIdentifier", v13);
  }
  uint64_t v14 = *(const void **)(v9 + 72);
  if (v14) {
    CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_ClientBundleIdentifier", v14);
  }
  uint64_t v15 = *(const void **)(v9 + 184);
  if (v15) {
    CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_NetworkHistory", v15);
  }
  CFTypeRef v16 = *(const void **)(v9 + 400);
  if (v16) {
    CFDictionarySetValue(v11, @"AssetDownloaderCreateOption_ContentSteeringMonitor", v16);
  }
  uint64_t v17 = *(void *)(v9 + 56);
  if (!v17) {
    goto LABEL_31;
  }
  FigStreamingAssetDownloadConfigGetTimeRange(v17, (uint64_t)v45);
  uint64_t v18 = FigCFDictionarySetCMTimeRange();
  if (!v18) {
    goto LABEL_31;
  }
  uint64_t v42 = v18;
  CFRelease(v11);
LABEL_77:
  uint64_t v11 = 0;
LABEL_70:
  if (value) {
    CFRelease(value);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v42;
}

uint64_t dworch_start(const void *a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
  if (v3)
  {
    uint64_t v4 = v3;
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *uint64_t v4 = v5;
    dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)dworch_startDispatch);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void dworch_startDispatch(const void **a1)
{
  BOOL v2 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t TimestampClientDidPauseOnContentSteeringMonitor = FigSignalErrorAt();
    goto LABEL_12;
  }
  unsigned int v5 = *(_DWORD *)(DerivedStorage + 524);
  if (v5 > 2 || v5 == 1) {
    goto LABEL_14;
  }
  *(_DWORD *)(DerivedStorage + 524) = 1;
  *(unsigned char *)(DerivedStorage + 528) = 1;
  CFArrayRef v7 = kDownloadOrchestratorStage_JumpTable[6 * *(unsigned int *)(DerivedStorage + 532)];
  if (!v7 || (uint64_t v8 = ((uint64_t (*)(const void *))v7)(v2), !v8))
  {
    if (*(unsigned char *)(DerivedStorage + 529)) {
      goto LABEL_14;
    }
    uint64_t TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x7FFFFFFFFFFFFFFFLL);
LABEL_12:
    uint64_t v10 = TimestampClientDidPauseOnContentSteeringMonitor;
    if (!TimestampClientDidPauseOnContentSteeringMonitor) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v10 = v8;
LABEL_13:
  dworch_transitionToTerminalStateWithOSStatus(*a1, v10);
LABEL_14:
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

uint64_t dworch_selectAlternates_start()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(CFAbsoluteTime *)(DerivedStorage + 592) = CFAbsoluteTimeGetCurrent();
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(const void **)(v2 + 560);
  if (v3)
  {
    CFRetain(v3);
    uint64_t v4 = *(void *)(v2 + 560);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 72);
  if (!v8) {
    return 4294954514;
  }
  uint64_t result = v8(v5, dworch_selectAlternates_pumpTransferCallback, v4);
  if (!result)
  {
    dworch_loadDuration();
    return 0;
  }
  return result;
}

uint64_t dworch_selectAlternates_pause()
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_releaseDiskResources();
  dworch_relinquishAccessToDestinationURL();
  return 0;
}

uint64_t dworch_selectAlternates_stop()
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_releaseDiskResources();
  dworch_relinquishAccessToDestinationURL();
  return 0;
}

uint64_t dworch_selectAlternates_pauseForInteractivePlayback()
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_releaseDiskResources();
  return 0;
}

uint64_t dworch_downloadMetadata_start(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 544))
  {
    dworch_downloadMetadata_gotAccessToDestinationURLCallback(a1, 1, *(void *)(DerivedStorage + 544));
    return 0;
  }
  else
  {
    uint64_t v4 = *(const void **)(DerivedStorage + 24);
    uint64_t v5 = *(NSObject **)DerivedStorage;
    return FigAssetDownloadCoordinatorScheduleAccessToURL(a1, v4, v5, 1, (uint64_t)dworch_downloadMetadata_gotAccessToDestinationURLCallback);
  }
}

uint64_t dworch_downloadMetadata_pause(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 408);
  if (!v3)
  {
LABEL_13:
    dworch_releaseDiskResources();
    dworch_relinquishAccessToDestinationURL();
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 16);
  if (!v7) {
    return 4294954514;
  }
  uint64_t result = v7(v3);
  if (!result)
  {
    uint64_t result = dworch_ensureTemporaryMetadataOnlyStreamingCache(a1);
    if (!result)
    {
      uint64_t v9 = *(void *)(v4 + 408);
      uint64_t v10 = *(void *)(v4 + 288);
      uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(v9);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v13 + 56);
      if (v14)
      {
        uint64_t result = v14(CMBaseObject, @"AssetDownloaderProperty_StreamingCache", v10);
        if (result) {
          return result;
        }
        goto LABEL_13;
      }
      return 4294954514;
    }
  }
  return result;
}

uint64_t dworch_downloadMetadata_stop()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 408);
  if (!v0)
  {
LABEL_7:
    dworch_releaseDiskResources();
    dworch_relinquishAccessToDestinationURL();
    return 0;
  }
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 24);
  if (v3)
  {
    uint64_t result = v3(v0);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  return 4294954514;
}

uint64_t dworch_downloadMetadata_pauseForInteractivePlayback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 408))
  {
LABEL_8:
    dworch_releaseDiskResources();
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t result = dworch_ensureTemporaryMetadataOnlyStreamingCache(a1);
  if (result) {
    return result;
  }
  uint64_t v5 = *(void *)(v3 + 408);
  uint64_t v6 = *(void *)(v3 + 288);
  uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(v5);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v9 + 56);
  if (v10)
  {
    uint64_t result = v10(CMBaseObject, @"AssetDownloaderProperty_StreamingCache", v6);
    if (result) {
      return result;
    }
    goto LABEL_8;
  }
  return 4294954514;
}

uint64_t dworch_persistMetadata_start(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 544)) {
    return FigAssetDownloadCoordinatorScheduleAccessToURL(a1, *(const void **)(DerivedStorage + 24), *(NSObject **)DerivedStorage, 0, (uint64_t)dworch_persistMetadata_gotAccessToDestinationURLCallback);
  }
  dworch_persistMetadata_gotAccessToDestinationURLCallback(a1, 1, *(void *)(DerivedStorage + 544));
  return 0;
}

uint64_t dworch_downloadMedia_start(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v4 + 536)
    || (uint64_t v5 = v4,
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent(),
        CFDateRef v8 = CFDateCreate(v6, Current),
        (*(void *)(v5 + 536) = v8) != 0)
    || (uint64_t result = FigSignalErrorAt(), !result))
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 544))
    {
      dworch_downloadMedia_gotAccessToDestinationURLCallback(a1, 0, *(void *)(DerivedStorage + 544));
    }
    else
    {
      uint64_t result = FigAssetDownloadCoordinatorScheduleAccessToURL(a1, *(const void **)(DerivedStorage + 24), *(NSObject **)DerivedStorage, 0, (uint64_t)dworch_downloadMedia_gotAccessToDestinationURLCallback);
      if (result) {
        return result;
      }
    }
    dworch_downloadMedia_symptomsReportStreamingAssetDownloadStart();
    dworch_issueReportingEvent((uint64_t)a1, 705);
    return 0;
  }
  return result;
}

uint64_t dworch_downloadMedia_pause(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 464);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFDateRef v8 = *(uint64_t (**)(const void *))(v7 + 16);
    if (!v8) {
      return 4294954514;
    }
    uint64_t result = v8(ValueAtIndex);
    if (result) {
      return result;
    }
  }
  uint64_t result = dworch_relinquishAccessToDestinationURL();
  if (!result)
  {
    FigSymptomsReportStreamingAssetDownloadPause((const unsigned __int8 *)(DerivedStorage + 600));
    dworch_issueReportingEvent(a1, 704);
    return 0;
  }
  return result;
}

uint64_t dworch_downloadMedia_stop()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 464);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(const void *))(v5 + 24);
    if (!v6) {
      return 4294954514;
    }
    uint64_t result = v6(ValueAtIndex);
    if (result) {
      return result;
    }
  }
  uint64_t result = dworch_relinquishAccessToDestinationURL();
  if (!result)
  {
    uint64_t v8 = *(void *)(DerivedStorage + 576);
    if (v8)
    {
      uint64_t v9 = *(unsigned int *)(DerivedStorage + 524);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v11 = v10 ? v10 : 0;
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v11 + 56);
      if (v12) {
        v12(v8, 0x1EE582C78, 0x1EE558D58, v9, 0);
      }
    }
    return 0;
  }
  return result;
}

uint64_t dworch_downloadMedia_pauseForInteractivePlayback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 464);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), i);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(const void *))(v7 + 32);
    if (!v8) {
      return 4294954514;
    }
    uint64_t result = v8(ValueAtIndex);
    if (result) {
      return result;
    }
  }
  uint64_t v10 = *(void *)(DerivedStorage + 576);
  if (v10)
  {
    uint64_t v11 = *(unsigned __int8 *)(DerivedStorage + 529);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v13 + 56);
    if (v14) {
      v14(v10, 0x1EE582C78, 0x1EE558F38, v11, 0);
    }
  }
  FigSymptomsReportStreamingAssetDownloadPause((const unsigned __int8 *)(DerivedStorage + 600));
  dworch_issueReportingEvent(a1, 704);
  return 0;
}

uint64_t dworch_downloadMedia_resumeFromInteractivePlayback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(v3 + 464);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 464), i);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(const void *))(v8 + 40);
    if (!v9) {
      return 4294954514;
    }
    uint64_t result = v9(ValueAtIndex);
    if (result) {
      return result;
    }
  }
  FigSymptomsReportStreamingAssetDownloadResume((const unsigned __int8 *)(DerivedStorage + 600));
  dworch_issueReportingEvent(a1, 705);
  return 0;
}

void dworch_selectAlternates_pumpTransferCallback(const void *a1, const void *a2, const void *a3)
{
  CFTypeRef cf = 0;
  if (dworch_copyAssetDownloaderFromRetainProxy((uint64_t)a1, &cf)) {
    goto LABEL_13;
  }
  CFTypeRef v6 = cf;
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (v6) {
      CFTypeRef v10 = CFRetain(v6);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *uint64_t v9 = v10;
    if (a2) {
      CFTypeRef v11 = CFRetain(a2);
    }
    else {
      CFTypeRef v11 = 0;
    }
    v9[1] = v11;
    if (a3) {
      CFTypeRef v12 = CFRetain(a3);
    }
    else {
      CFTypeRef v12 = 0;
    }
    v9[2] = v12;
    dispatch_async_f(*DerivedStorage, v9, (dispatch_function_t)dworch_selectAlternates_pumpTransferCallbackOnQueue);
LABEL_13:
    if (!a1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  FigSignalErrorAt();
  if (a1) {
LABEL_14:
  }
    CFRelease(a1);
LABEL_15:
  CFTypeRef v13 = cf;
  if (cf)
  {
    CFRelease(v13);
  }
}

uint64_t dworch_copyAssetDownloaderFromRetainProxy(uint64_t a1, void *a2)
{
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  else
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner) {
      Owner = CFRetain(Owner);
    }
    uint64_t v4 = 0;
    *a2 = Owner;
  }
  FigRetainProxyUnlockMutex();
  return v4;
}

void dworch_selectAlternates_pumpTransferCallbackOnQueue(const void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)a1[2];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_27;
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(v6 + 524) == 1 || *(unsigned char *)(v6 + 529) || *(unsigned char *)(v6 + 528))
    && !*(void *)(DerivedStorage + 296))
  {
    if (v3) {
      CFTypeRef v7 = CFRetain(v3);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *(void *)(DerivedStorage + 296) = v7;
    if (dword_1E9350CD8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFTypeRef v7 = *(CFTypeRef *)(DerivedStorage + 296);
    }
    if (v7)
    {
      if (*(void *)(CMBaseObjectGetDerivedStorage() + 544))
      {
        dworch_selectAlternates_gotAccessToDestinationURLCallback(v2, 1, *(void *)(DerivedStorage + 544));
        goto LABEL_14;
      }
      uint64_t v10 = FigAssetDownloadCoordinatorScheduleAccessToURL(v2, *(const void **)(DerivedStorage + 24), *(NSObject **)DerivedStorage, 1, (uint64_t)dworch_selectAlternates_gotAccessToDestinationURLCallback);
LABEL_17:
      uint64_t v9 = v10;
      if (v4) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
LABEL_27:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v9 = 0;
  if (v4)
  {
LABEL_15:
    dworch_transitionToTerminalState(v2, v4);
    goto LABEL_20;
  }
LABEL_18:
  if (v9) {
    dworch_transitionToTerminalStateWithOSStatus(v2, v9);
  }
LABEL_20:
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void dworch_selectAlternates_gotAccessToDestinationURLCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != FigAssetDownloaderGetTypeID()
    || (*(void *)(DerivedStorage + 544) = a3,
        CMBaseObjectGetDerivedStorage(),
        FigRetainProxyIsInvalidated())
    || a2 && !a3)
  {
    uint64_t IsRegisteredForDownload = FigSignalErrorAt();
    goto LABEL_73;
  }
  if (*(_DWORD *)(DerivedStorage + 524) != 1 && !*(unsigned char *)(DerivedStorage + 528))
  {
    uint64_t v16 = 0;
    goto LABEL_74;
  }
  uint64_t IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
  if (IsRegisteredForDownload)
  {
LABEL_73:
    uint64_t v16 = IsRegisteredForDownload;
LABEL_74:
    dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
    goto LABEL_140;
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v115 = 0;
  CFTypeRef v112 = 0;
  long long v113 = 0;
  CFDictionaryRef theDict = 0;
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v10 = FigNotificationCenterAddWeakListener();
  if (v10) {
    goto LABEL_118;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v10 = FigNotificationCenterAddWeakListener();
  if (v10) {
    goto LABEL_118;
  }
  uint64_t v11 = *(void *)(v9 + 296);
  uint64_t v12 = *(void *)(v9 + 560);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *), void, uint64_t))(v14 + 88);
  if (!v15)
  {
    uint64_t v16 = 4294954514;
LABEL_19:
    uint64_t v22 = *(void *)(v9 + 296);
    uint64_t v23 = *(void *)(v9 + 8);
    FigBytePumpGetFigBaseObject(v22);
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v27 + 48);
    if (v28)
    {
      v28(v25, 0x1EE53E3F8, v23, &v113);
      uint64_t v29 = v113;
      goto LABEL_130;
    }
    goto LABEL_119;
  }
  uint64_t v16 = v15(v11, dworch_selectAlternates_bytePumpFn, 0, v12);
  if (v16) {
    goto LABEL_19;
  }
  uint64_t v17 = (void *)MEMORY[0x1E4F1CFD0];
  if (*(unsigned char *)(v9 + 178))
  {
    FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, void))(v21 + 56);
    if (!v30) {
      goto LABEL_129;
    }
    uint64_t v10 = v30(v19, 0x1EE53EA98, *v17);
    if (v10) {
      goto LABEL_118;
    }
  }
  if (*(unsigned char *)(v9 + 179))
  {
    FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
    uint64_t v32 = v31;
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, void))(v34 + 56);
    if (!v35) {
      goto LABEL_129;
    }
    uint64_t v10 = v35(v32, 0x1EE53EAB8, *v17);
    if (v10) {
      goto LABEL_118;
    }
  }
  uint64_t v36 = *(void *)(v9 + 8);
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v38 = v37;
  uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v39) {
    uint64_t v40 = v39;
  }
  else {
    uint64_t v40 = 0;
  }
  CFArrayRef v41 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v40 + 48);
  if (v41) {
    v41(v38, 0x1EE53E498, v36, &cf);
  }
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v43 = v42;
  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v44) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, void))(v45 + 56);
  if (!v46) {
    goto LABEL_129;
  }
  uint64_t v10 = v46(v43, 0x1EE53E498, 0);
  if (v10) {
    goto LABEL_118;
  }
  if (cf)
  {
    uint64_t v10 = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
    if (v10) {
      goto LABEL_118;
    }
    uint64_t v10 = FigStreamingCacheTransferData((uint64_t)cf, *(void *)(v9 + 288));
    if (v10) {
      goto LABEL_118;
    }
  }
  if (*(unsigned char *)(v9 + 529) || !*(void *)(CMBaseObjectGetDerivedStorage() + 544))
  {
    uint64_t v10 = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
    if (v10) {
      goto LABEL_118;
    }
    uint64_t v48 = *(void *)(v9 + 288);
    uint64_t v47 = *(void *)(v9 + 296);
  }
  else
  {
    FigStreamingCacheInvalidate((uint64_t)cf);
    uint64_t v10 = dworch_ensurePersistentStreamingCache((uint64_t)a1);
    if (v10) {
      goto LABEL_118;
    }
    uint64_t v49 = *(void *)(v9 + 288);
    if (v49)
    {
      uint64_t v50 = *(void *)(v9 + 456);
      if (v50)
      {
        uint64_t v10 = FigStreamingCacheTransferData(v49, v50);
        if (v10) {
          goto LABEL_118;
        }
      }
    }
    uint64_t v47 = *(void *)(v9 + 296);
    uint64_t v48 = *(void *)(v9 + 456);
  }
  FigBytePumpGetFigBaseObject(v47);
  uint64_t v52 = v51;
  uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v53) {
    uint64_t v54 = v53;
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 56);
  if (!v55) {
    goto LABEL_129;
  }
  uint64_t v10 = v55(v52, 0x1EE53E498, v48);
  if (v10) {
    goto LABEL_118;
  }
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v57 = v56;
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  int v60 = *(uint64_t (**)(uint64_t, uint64_t, void))(v59 + 56);
  if (!v60) {
    goto LABEL_129;
  }
  uint64_t v61 = *MEMORY[0x1E4F1CFC8];
  uint64_t v10 = v60(v57, 0x1EE53E818, *MEMORY[0x1E4F1CFC8]);
  if (v10) {
    goto LABEL_118;
  }
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v63 = v62;
  uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v64) {
    uint64_t v65 = v64;
  }
  else {
    uint64_t v65 = 0;
  }
  uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 56);
  if (!v66) {
    goto LABEL_129;
  }
  uint64_t v10 = v66(v63, 0x1EE53E838, v61);
  if (v10) {
    goto LABEL_118;
  }
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v68 = v67;
  uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v69) {
    uint64_t v70 = v69;
  }
  else {
    uint64_t v70 = 0;
  }
  uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 56);
  if (!v71) {
    goto LABEL_129;
  }
  uint64_t v10 = v71(v68, 0x1EE53E9B8, v61);
  if (v10) {
    goto LABEL_118;
  }
  uint64_t v72 = *(void *)(v9 + 72);
  if (v72)
  {
    FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
    uint64_t v74 = v73;
    uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v75) {
      uint64_t v76 = v75;
    }
    else {
      uint64_t v76 = 0;
    }
    uint64_t v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 56);
    if (!v77) {
      goto LABEL_129;
    }
    uint64_t v10 = v77(v74, 0x1EE53E638, v72);
    if (v10) {
      goto LABEL_118;
    }
  }
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v79 = v78;
  uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v80) {
    uint64_t v81 = v80;
  }
  else {
    uint64_t v81 = 0;
  }
  double v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 56);
  if (!v82) {
    goto LABEL_129;
  }
  uint64_t v10 = v82(v79, 0x1EE53EA38, 0x1EE56C4F8);
  if (v10)
  {
LABEL_118:
    uint64_t v16 = v10;
LABEL_119:
    uint64_t v29 = 0;
    goto LABEL_130;
  }
  uint64_t v83 = *(void *)(v9 + 8);
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v85 = v84;
  uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v86) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 0;
  }
  uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v87 + 48);
  if (v88) {
    v88(v85, 0x1EE53E6D8, v83, &v112);
  }
  int v89 = FigRCLGetNumberWithDefault((const __CFDictionary *)v112, @"mediaDownloadersMaxWidth");
  if (v89 <= 1) {
    LODWORD(v90) = 1;
  }
  else {
    LODWORD(v90) = v89;
  }
  if (v90 >= 6) {
    uint64_t v90 = 6;
  }
  else {
    uint64_t v90 = v90;
  }
  *(void *)(v9 + 480) = v90;
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v92 = v91;
  uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v93) {
    uint64_t v94 = v93;
  }
  else {
    uint64_t v94 = 0;
  }
  CFIndex v95 = *(unsigned int (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v94 + 48);
  if (!v95 || v95(v92, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], &theDict) != -12783)
  {
    uint64_t v101 = *(const void **)(v9 + 368);
    if (v101)
    {
      CFRelease(v101);
      *(void *)(v9 + 368) = 0;
    }
    uint64_t v102 = *(const void **)(v9 + 376);
    if (v102)
    {
      CFRelease(v102);
      *(void *)(v9 + 376) = 0;
    }
    CFStringRef Value = CFDictionaryGetValue(theDict, @"FBPAIK_FigAlternateArray");
    if (Value) {
      CFStringRef Value = CFRetain(Value);
    }
    *(void *)(v9 + 368) = Value;
    uint64_t v104 = CFDictionaryGetValue(theDict, @"FBPAIK_MediaSelectionArray");
    if (v104) {
      uint64_t v104 = CFRetain(v104);
    }
    *(void *)(v9 + 376) = v104;
LABEL_117:
    uint64_t v10 = dworch_selectAlternates_gotAlternates(a1);
    goto LABEL_118;
  }
  uint64_t v96 = *(void *)(v9 + 8);
  FigBytePumpGetFigBaseObject(*(void *)(v9 + 296));
  uint64_t v98 = v97;
  uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v99) {
    uint64_t v100 = v99;
  }
  else {
    uint64_t v100 = 0;
  }
  CMTime v105 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v100 + 48);
  if (!v105) {
    goto LABEL_129;
  }
  uint64_t v106 = v105(v98, @"FBP_Duration", v96, &v115);
  if (!v106) {
    goto LABEL_117;
  }
  uint64_t v16 = v106;
  if (v106 != -12783) {
    goto LABEL_119;
  }
  uint64_t v107 = *(void *)(v9 + 296);
  uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v108) {
    uint64_t v109 = v108;
  }
  else {
    uint64_t v109 = 0;
  }
  __int16 v110 = *(uint64_t (**)(uint64_t))(v109 + 64);
  if (v110)
  {
    uint64_t v10 = v110(v107);
    goto LABEL_118;
  }
LABEL_129:
  uint64_t v29 = 0;
  uint64_t v16 = 4294954514;
LABEL_130:
  long long v113 = 0;
  if (cf) {
    CFRelease(cf);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v115) {
    CFRelease(v115);
  }
  if (v112) {
    CFRelease(v112);
  }
  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
  if (v29)
  {
    dworch_transitionToTerminalState(a1, v29);
    CFRelease(v29);
    return;
  }
LABEL_140:
  if (v16) {
    dworch_transitionToTerminalStateWithOSStatus(a1, v16);
  }
}

void dworch_transitionToTerminalState(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
    return;
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u) {
    return;
  }
  dworch_releaseDiskResources();
  dworch_relinquishAccessToDestinationURL();
  if (a2)
  {
    if (dword_1E9350CD8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(DerivedStorage + 524) = 4;
    unsigned int v18 = *(_DWORD *)(DerivedStorage + 532);
    if (v18 != 2)
    {
      uint64_t v19 = kDownloadOrchestratorStage_JumpTable[6 * v18 + 2];
      if (v19) {
        ((void (*)(const void *))v19)(a1);
      }
    }
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    uint64_t v21 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v21)
    {
      uint64_t v14 = (const void *)v21;
      uint64_t v22 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
      if (v22)
      {
        uint64_t v16 = v22;
        if (a1) {
          CFTypeRef v23 = CFRetain(a1);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *uint64_t v16 = v23;
        v16[1] = v14;
        v16[2] = CFRetain(a2);
        uint64_t v24 = *(NSObject **)(v20 + 280);
        uint64_t v25 = (void (__cdecl *)(void *))dworch_sendDownloadFailedCallbackOnCallbackQueue;
LABEL_24:
        dispatch_async_f(v24, v16, v25);
        goto LABEL_25;
      }
LABEL_116:
      if (FigSignalErrorAt()) {
        CFRelease(v14);
      }
    }
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 524) = 3;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v6 + 72))
    {
      uint64_t v7 = v6;
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v10 = CFDateCreate(v8, Current);
      if (v10)
      {
        CFDateRef v11 = v10;
        FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(*(const __CFURL **)(v7 + 24), *(const void **)(v7 + 72), (uint64_t)v10);
        CFRelease(v11);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v13)
    {
      uint64_t v14 = (const void *)v13;
      uint64_t v15 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
      if (v15)
      {
        uint64_t v16 = v15;
        if (a1) {
          CFTypeRef v17 = CFRetain(a1);
        }
        else {
          CFTypeRef v17 = 0;
        }
        *uint64_t v16 = v17;
        v16[1] = v14;
        uint64_t v24 = *(NSObject **)(v12 + 280);
        uint64_t v25 = (void (__cdecl *)(void *))dworch_sendDownloadSucceededCallbackOnCallbackQueue;
        goto LABEL_24;
      }
      goto LABEL_116;
    }
  }
LABEL_25:
  FigSymptomsReportStreamingAssetDownloadEnd((const unsigned __int8 *)(DerivedStorage + 600));
  uuid_clear((unsigned __int8 *)(DerivedStorage + 600));
  if (dword_1E9350CD8)
  {
    uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v27 = *(void *)(DerivedStorage + 576);
  if (v27)
  {
    uint64_t v28 = *(unsigned int *)(DerivedStorage + 524);
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v30 = v29 ? v29 : 0;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v30 + 56);
    if (v31) {
      v31(v27, 0x1EE582C78, 0x1EE558D58, v28, 0);
    }
  }
  uint64_t v32 = *(void *)(DerivedStorage + 576);
  if (v32)
  {
    uint64_t v33 = *(unsigned int *)(DerivedStorage + 532);
    uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v35 = v34 ? v34 : 0;
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v35 + 56);
    if (v36) {
      v36(v32, 0x1EE582C78, 0x1EE558C38, v33, 0);
    }
  }
  uint64_t v37 = *(void *)(DerivedStorage + 576);
  double v38 = CFAbsoluteTimeGetCurrent();
  if (v37)
  {
    double v39 = v38;
    double v40 = *(double *)(DerivedStorage + 592);
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v42 = v41 ? v41 : 0;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v42 + 56);
    if (v43) {
      v43(v37, 0x1EE582C78, 0x1EE584058, 1000 * (uint64_t)(v39 - v40), 0);
    }
  }
  if (a2)
  {
    uint64_t v44 = CMBaseObjectGetDerivedStorage();
    DomaiCFIndex n = CFErrorGetDomain((CFErrorRef)a2);
    CFStringRef v46 = CFErrorCopyDescription((CFErrorRef)a2);
    CFIndex Code = CFErrorGetCode((CFErrorRef)a2);
    uint64_t v48 = *(void *)(v44 + 576);
    if (v48)
    {
      CFIndex v49 = Code;
      uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v50) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = 0;
      }
      uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, CFIndex, void))(v51 + 56);
      if (v52) {
        v52(v48, 0x1EE582C78, 0x1EE558C58, v49, 0);
      }
      uint64_t v53 = *(void *)(v44 + 576);
      if (v53)
      {
        uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v54) {
          uint64_t v55 = v54;
        }
        else {
          uint64_t v55 = 0;
        }
        uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, CFErrorDomain, void))(v55 + 48);
        if (v56) {
          v56(v53, 0x1EE582C78, 0x1EE558F58, Domain, 0);
        }
        uint64_t v57 = *(void *)(v44 + 576);
        if (v57)
        {
          uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v59 = v58 ? v58 : 0;
          int v60 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v59 + 48);
          if (v60) {
            v60(v57, 0x1EE582C78, 0x1EE558F78, v46, 0);
          }
        }
      }
    }
    uint64_t v61 = *(void *)(v44 + 496);
    if (!v61) {
      goto LABEL_110;
    }
    ResolutioCFIndex n = FigAlternateGetResolution(v61);
    if (Resolution > 0.0)
    {
      double v64 = v63;
      if (v63 > 0.0)
      {
        uint64_t v65 = *(void *)(v44 + 576);
        if (!v65) {
          goto LABEL_80;
        }
        double v66 = Resolution;
        uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v67) {
          uint64_t v68 = v67;
        }
        else {
          uint64_t v68 = 0;
        }
        uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v68 + 56);
        if (v69) {
          v69(v65, 0x1EE582C78, 0x1EE558ED8, (uint64_t)v66, 0);
        }
        uint64_t v65 = *(void *)(v44 + 576);
        if (!v65) {
          goto LABEL_80;
        }
        uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v70) {
          uint64_t v71 = v70;
        }
        else {
          uint64_t v71 = 0;
        }
        uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v71 + 56);
        if (v72) {
          v72(v65, 0x1EE582C78, 0x1EE558EF8, (uint64_t)v64, 0);
        }
      }
    }
    uint64_t v65 = *(void *)(v44 + 576);
LABEL_80:
    VideoRangeString = FigAlternateGetVideoRangeString(*(__CFString **)(v44 + 496));
    if (v65)
    {
      uint64_t v74 = VideoRangeString;
      uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v76 = v75 ? v75 : 0;
      uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v76 + 48);
      if (v77) {
        v77(v65, 0x1EE582C78, 0x1EE558E98, v74, 0);
      }
    }
    uint64_t v78 = *(void *)(v44 + 576);
    PeakBitfloat Rate = FigAlternateGetPeakBitRate(*(void *)(v44 + 496));
    if (v78)
    {
      int v80 = PeakBitRate;
      uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v82 = v81 ? v81 : 0;
      uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v82 + 56);
      if (v83) {
        v83(v78, 0x1EE582C78, 0x1EE558E58, v80, 0);
      }
    }
    uint64_t v84 = *(void *)(v44 + 576);
    AverageBitfloat Rate = FigAlternateGetAverageBitRate(*(void *)(v44 + 496));
    if (v84)
    {
      int v86 = AverageBitRate;
      uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v88 = v87 ? v87 : 0;
      int v89 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v88 + 56);
      if (v89) {
        v89(v84, 0x1EE582C78, 0x1EE558E78, v86, 0);
      }
    }
    uint64_t v90 = *(void *)(v44 + 576);
    uint64_t CodecString = FigAlternateGetCodecString(*(void *)(v44 + 496));
    if (v90)
    {
      uint64_t v92 = CodecString;
      uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v94 = v93 ? v93 : 0;
      CFIndex v95 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v94 + 48);
      if (v95) {
        v95(v90, 0x1EE582C78, 0x1EE558F18, v92, 0);
      }
    }
    uint64_t v96 = *(void *)(v44 + 576);
    int VideoQualityIndex = FigAlternateGetVideoQualityIndex(*(void *)(v44 + 496));
    if (v96)
    {
      int v98 = VideoQualityIndex;
      uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v99) {
        uint64_t v100 = v99;
      }
      else {
        uint64_t v100 = 0;
      }
      uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v100 + 56);
      if (v101) {
        v101(v96, 0x1EE582C78, 0x1EE558EB8, v98, 0);
      }
    }
LABEL_110:
    dworch_issueReportingEvent((uint64_t)a1, 707);
    if (v46) {
      CFRelease(v46);
    }
  }
}

uint64_t dworch_ensureAssetIsRegisteredForDownload(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v4 = 0;
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 544) || *(unsigned char *)(DerivedStorage + 530)) {
    return 0;
  }
  uint64_t result = FigAssetDownloadCoordinatorRegisterAssetForDownloader(*(void *)(DerivedStorage + 16), a1, *(void *)(DerivedStorage + 24), *(void *)(DerivedStorage + 72), 0, &v4);
  if (!result)
  {
    *(unsigned char *)(DerivedStorage + 529) = v4;
    *(unsigned char *)(DerivedStorage + 530) = 1;
  }
  return result;
}

uint64_t dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 524) != 1 && !*(unsigned char *)(result + 529) && !*(unsigned char *)(result + 528))
  {
    dworch_releaseDiskResources();
    return dworch_relinquishAccessToDestinationURL();
  }
  return result;
}

void dworch_selectAlternates_bytePumpFn(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  CFTypeRef cf = 0;
  int v13 = dworch_copyAssetDownloaderFromRetainProxy(a2, &cf);
  CFTypeRef v14 = cf;
  if (!v13)
  {
    uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    uint64_t v16 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
    if (!v16)
    {
      FigSignalErrorAt();
      if (!v14) {
        return;
      }
      goto LABEL_11;
    }
    CFTypeRef v17 = v16;
    if (v14) {
      CFTypeRef v18 = CFRetain(v14);
    }
    else {
      CFTypeRef v18 = 0;
    }
    *(void *)CFTypeRef v17 = v18;
    v17[2] = a4;
    if (a12) {
      CFTypeRef v19 = CFRetain(a12);
    }
    else {
      CFTypeRef v19 = 0;
    }
    *((void *)v17 + 2) = v19;
    dispatch_async_f(*DerivedStorage, v17, (dispatch_function_t)dworch_selectAlternates_bytePumpFnOnQueue);
  }
  if (!v14) {
    return;
  }
LABEL_11:

  CFRelease(v14);
}

uint64_t dworch_ensureTemporaryMetadataOnlyStreamingCache(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 288)) {
    return 0;
  }

  return dworch_createStreamingCache(a1, @"FSC_MemoryBacking", (void *)(DerivedStorage + 288));
}

uint64_t dworch_ensurePersistentStreamingCache(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 456)) {
    return 0;
  }

  return dworch_createStreamingCache(a1, @"FSC_DiskBacking", (void *)(DerivedStorage + 456));
}

uint64_t dworch_selectAlternates_gotAlternates(const void *a1)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 392)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 392) = 1;
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 368);
  if (!v4 || !CFArrayGetCount(v4))
  {
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    if (dword_1E9350CD8)
    {
      LODWORD(values) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(v12 + 312) = 1;
    return dworch_selectAlternates_stageComplete((uint64_t)a1);
  }
  uint64_t v5 = *(const void **)(v3 + 304);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(v3 + 304) = 0;
  }
  uint64_t v6 = FigAlternateSelectionBossCreate(*(const __CFAllocator **)(v3 + 8), (void *)(v3 + 304));
  if (v6) {
    return v6;
  }
  uint64_t v6 = FigAlternateSelectionBossInitializeAlternateList(*(void **)(v3 + 304), *(const __CFArray **)(v3 + 368), *(const __CFArray **)(v3 + 376), 0, 0);
  if (v6) {
    return v6;
  }
  uint64_t v7 = *(void *)(v3 + 304);
  FigBytePumpGetFigBaseObject(*(void *)(v3 + 296));
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v14) {
    return 4294954514;
  }
  uint64_t v6 = v14(v9, 0x1EE53EC78, v7);
  if (v6) {
    return v6;
  }
  uint64_t v15 = *(void *)(v3 + 56);
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = v16;
  if (v15)
  {
    CFDictionaryRef theDict = (uint64_t *)(v16 + 384);
    uint64_t v6 = FigStreamingAssetDownloadConfigCreate(*(void *)(v16 + 8), (uint64_t *)(v16 + 384));
    if (v6) {
      return v6;
    }
    uint64_t v6 = dworch_selectAlternates_installDeviceCapabilityFilters(*(const __CFAllocator **)(v17 + 8), *(void *)(v17 + 304));
    if (v6) {
      return v6;
    }
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    uint64_t v19 = FigAlternateContinuousFramesOnlyFilterCreate(*(void *)(v18 + 8), cf);
    if (v19) {
      goto LABEL_171;
    }
    uint64_t v19 = FigAlternateSelectionBossAddFilter(*(void *)(v18 + 304), cf[0]);
    if (v19) {
      goto LABEL_171;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    uint64_t v19 = FigAlternatePreferredVideoFormatFilterCreate(*(CFAllocatorRef *)(v18 + 8), 4, 8u, cf);
    if (v19) {
      goto LABEL_171;
    }
    uint64_t v19 = FigAlternateSelectionBossAddFilter(*(void *)(v18 + 304), cf[0]);
    if (v19) {
      goto LABEL_171;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    uint64_t v19 = FigAlternateHighestRankingScoreFilterCreate(*(const __CFAllocator **)(v18 + 8), cf);
    if (v19) {
      goto LABEL_171;
    }
    uint64_t v19 = FigAlternateSelectionBossAddFilter(*(void *)(v18 + 304), cf[0]);
    if (v19) {
      goto LABEL_171;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    uint64_t v19 = FigAlternatePlaybackScoreAndBitRateFilterCreate(*(const __CFAllocator **)(v18 + 8), cf);
    if (v19) {
      goto LABEL_171;
    }
    uint64_t v19 = FigAlternateSelectionBossAddFilter(*(void *)(v18 + 304), cf[0]);
    if (v19) {
      goto LABEL_171;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    uint64_t v19 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate(*(void *)(v18 + 8), cf);
    if (v19)
    {
LABEL_171:
      uint64_t v20 = v19;
      CFTypeRef v21 = cf[0];
    }
    else
    {
      uint64_t v20 = FigAlternateSelectionBossAddFilter(*(void *)(v18 + 304), cf[0]);
      CFTypeRef v21 = cf[0];
      if (!v20 && cf[0])
      {
        uint64_t v20 = 0;
LABEL_173:
        CFRelease(v21);
LABEL_174:
        if (v20) {
          return v20;
        }
        uint64_t v86 = *(void *)(v17 + 56);
        cf[0] = 0;
        *(void *)CFRange v121 = 0;
        uint64_t v87 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForPrimary(v86, (__CFArray **)cf);
        if (!v87)
        {
          if (!cf[0])
          {
            uint64_t v20 = 0;
            goto LABEL_186;
          }
          CFIndex Count = CFArrayGetCount((CFArrayRef)cf[0]);
          if (Count < 1)
          {
LABEL_182:
            uint64_t v20 = 0;
            goto LABEL_183;
          }
          CFIndex v89 = Count;
          CFIndex v90 = 0;
          while (1)
          {
            CFNumberRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v90);
            uint64_t PrimaryContentConfig = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(v86, ValueAtIndex);
            uint64_t v87 = dworch_selectAlternates_evaluateAndCopyContentConfig((uint64_t)a1, PrimaryContentConfig, 0, 0, (CFTypeRef *)v121);
            if (v87) {
              break;
            }
            uint64_t v87 = FigStreamingAssetDownloadConfigSetPrimaryContentConfig(*theDict, *(CFTypeRef *)v121, ValueAtIndex);
            if (v87) {
              break;
            }
            if (v89 == ++v90) {
              goto LABEL_182;
            }
          }
        }
        uint64_t v20 = v87;
LABEL_183:
        if (cf[0]) {
          CFRelease(cf[0]);
        }
LABEL_186:
        if (*(void *)v121) {
          CFRelease(*(CFTypeRef *)v121);
        }
        if (v20) {
          return v20;
        }
        uint64_t v93 = *(void *)(v17 + 56);
        cf[0] = 0;
        *(void *)CFRange v121 = 0;
        int OptimizesAuxiliaryContentConfigurations = FigStreamingAssetDownloadConfigGetOptimizesAuxiliaryContentConfigurations(v93);
        CFTypeRef v117 = (CFTypeRef)v93;
        uint64_t v94 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForAux(v93, (__CFArray **)cf);
        if (v94)
        {
LABEL_217:
          uint64_t v20 = v94;
        }
        else
        {
          if (!cf[0])
          {
            uint64_t v20 = 0;
LABEL_213:
            if (*(void *)v121) {
              CFRelease(*(CFTypeRef *)v121);
            }
            if (v20) {
              return v20;
            }
            dworch_logDownloadConfig((uint64_t)a1, @"evaluated config: ", (const void *)*theDict);
            return dworch_selectAlternates_stageComplete((uint64_t)a1);
          }
          CFIndex v113 = CFArrayGetCount((CFArrayRef)cf[0]);
          if (v113 >= 1)
          {
            uint64_t Alternate = 0;
            CFIndex v96 = 0;
            while (1)
            {
              uint64_t v97 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v96);
              CFArrayRef AuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetAuxConfigs((uint64_t)v117, v97);
              if (!OptimizesAuxiliaryContentConfigurations) {
                goto LABEL_196;
              }
              uint64_t v99 = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(*theDict, v97);
              if (v99) {
                break;
              }
              uint64_t Alternate = 0;
              if (AuxConfigs)
              {
LABEL_197:
                CFIndex v100 = CFArrayGetCount(AuxConfigs);
                if (v100 >= 1)
                {
                  CFIndex v101 = v100;
                  CFIndex v102 = 0;
                  do
                  {
                    unsigned int v103 = CFArrayGetValueAtIndex(AuxConfigs, v102);
                    uint64_t v104 = dworch_selectAlternates_evaluateAndCopyContentConfig((uint64_t)a1, (uint64_t)v103, Alternate, 1, (CFTypeRef *)v121);
                    if (v104 != -16659)
                    {
                      uint64_t v20 = v104;
                      if (v104) {
                        goto LABEL_210;
                      }
                      CMTime v105 = *(const void **)v121;
                      uint64_t v94 = FigStreamingAssetDownloadConfigAddAuxConfig(*theDict, *(void **)v121, v97);
                      if (v94) {
                        goto LABEL_217;
                      }
                      if (v105)
                      {
                        CFRelease(v105);
                        *(void *)CFRange v121 = 0;
                      }
                    }
                  }
                  while (v101 != ++v102);
                }
              }
LABEL_205:
              if (++v96 == v113) {
                goto LABEL_209;
              }
            }
            uint64_t Alternate = FigStreamingAssetDownloadContentConfigGetAlternate(v99);
LABEL_196:
            if (AuxConfigs) {
              goto LABEL_197;
            }
            goto LABEL_205;
          }
LABEL_209:
          uint64_t v20 = 0;
        }
LABEL_210:
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        goto LABEL_213;
      }
    }
    if (!v21) {
      goto LABEL_174;
    }
    goto LABEL_173;
  }
  CMTime values = 0;
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_228;
  }
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v23 + 524) != 1 && !*(unsigned char *)(v23 + 529) && !*(unsigned char *)(v23 + 528) || !*(void *)(v17 + 304))
  {
    uint64_t v20 = 0;
    goto LABEL_123;
  }
  CFArrayRef v24 = *(const __CFArray **)(v17 + 40);
  if (v24) {
    CFIndex v25 = CFArrayGetCount(v24);
  }
  else {
    CFIndex v25 = 0;
  }
  CFArrayRef v26 = *(const __CFArray **)(v17 + 48);
  if (v26)
  {
    CFIndex v27 = CFArrayGetCount(v26);
    if (v25) {
      goto LABEL_75;
    }
  }
  else
  {
    CFIndex v27 = 0;
    if (v25) {
      goto LABEL_75;
    }
  }
  uint64_t v28 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(*(void *)(v17 + 376), 0, 0, 0, &values);
  if (v28)
  {
LABEL_229:
    uint64_t v20 = v28;
    goto LABEL_123;
  }
  uint64_t v29 = *(const void **)(v17 + 40);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(v17 + 40) = 0;
  }
  CFArrayRef v30 = CFArrayCreate(*(CFAllocatorRef *)(v17 + 8), (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  *(void *)(v17 + 40) = v30;
  if (!v30)
  {
LABEL_228:
    uint64_t v28 = FigSignalErrorAt();
    goto LABEL_229;
  }
  uint64_t v31 = values;
  uint64_t v32 = CMBaseObjectGetDerivedStorage();
  uint64_t v33 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v33)
  {
    uint64_t v34 = (const void *)v33;
    uint64_t v35 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
    if (v35)
    {
      uint64_t v36 = v35;
      if (a1) {
        CFTypeRef v37 = CFRetain(a1);
      }
      else {
        CFTypeRef v37 = 0;
      }
      *uint64_t v36 = v37;
      v36[1] = v34;
      if (v31) {
        CFTypeRef v38 = CFRetain(v31);
      }
      else {
        CFTypeRef v38 = 0;
      }
      v36[6] = v38;
      dispatch_async_f(*(dispatch_queue_t *)(v32 + 280), v36, (dispatch_function_t)dworch_sendDidResolveMediaSelectionCallbackOnCallbackQueue);
    }
    else if (FigSignalErrorAt())
    {
      CFRelease(v34);
    }
  }
  if (dword_1E9350CD8)
  {
    double v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v27)
  {
    double v40 = *(const void **)(v17 + 40);
    uint64_t v41 = *(const void **)(v17 + 48);
    *(void *)(v17 + 48) = v40;
    if (v40) {
      CFRetain(v40);
    }
    if (v41) {
      CFRelease(v41);
    }
  }
LABEL_75:
  CFArrayRef v42 = *(const __CFArray **)(v17 + 40);
  uint64_t v43 = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = v42;
  if (!v42)
  {
    CFTypeRef v57 = 0;
    uint64_t v58 = *(const void **)(v17 + 40);
    *(void *)(v17 + 40) = 0;
    if (v58) {
      goto LABEL_114;
    }
    goto LABEL_115;
  }
  uint64_t v44 = v43;
  CFDictionaryRef theDicta = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v43 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!theDicta)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_226;
  }
  LODWORD(cf[0]) = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v44 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v20 = FigSignalErrorAt();
    CFRelease(theDicta);
LABEL_226:
    CFTypeRef v57 = 0;
    if (!v20) {
      goto LABEL_111;
    }
    goto LABEL_121;
  }
  uint64_t v106 = v17;
  uint64_t v107 = v3;
  CFMutableDictionaryRef v114 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v44 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v114 || (CFMutableArrayRef v45 = CFArrayCreateMutable(*(CFAllocatorRef *)(v44 + 8), 0, MEMORY[0x1E4F1D510])) == 0)
  {
    uint64_t v20 = FigSignalErrorAt();
    CFTypeRef v57 = 0;
    CFMutableArrayRef v51 = 0;
    CFMutableArrayRef v46 = 0;
    goto LABEL_103;
  }
  CFMutableArrayRef v46 = v45;
  CFIndex v110 = CFArrayGetCount(theArray);
  if (v110 < 1)
  {
LABEL_102:
    CFTypeRef v57 = CFRetain(v46);
    uint64_t v20 = 0;
    CFMutableArrayRef v51 = 0;
LABEL_103:
    uint64_t v3 = v107;
    goto LABEL_104;
  }
  CFIndex v47 = 0;
  uint64_t v108 = v44;
  uint64_t v109 = v46;
  while (1)
  {
    CFArrayRef v48 = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v47);
    CFArrayRef v49 = v48;
    CFIndex v112 = v47;
    if (v48) {
      CFIndex v50 = CFArrayGetCount(v48);
    }
    else {
      CFIndex v50 = 0;
    }
    CFMutableArrayRef v51 = CFArrayCreateMutable(*(CFAllocatorRef *)(v44 + 8), 0, MEMORY[0x1E4F1D510]);
    if (!v51)
    {
      uint64_t v20 = FigSignalErrorAt();
      CFTypeRef v57 = 0;
      goto LABEL_103;
    }
    if (v50 >= 1) {
      break;
    }
LABEL_101:
    CFMutableArrayRef v46 = v109;
    CFArrayAppendValue(v109, v51);
    CFRelease(v51);
    CFIndex v47 = v112 + 1;
    uint64_t v44 = v108;
    if (v112 + 1 == v110) {
      goto LABEL_102;
    }
  }
  CFIndex v52 = 0;
  while (1)
  {
    CFDictionaryRef v53 = (const __CFDictionary *)CFArrayGetValueAtIndex(v49, v52);
    CFDictionaryGetValue(v53, @"MediaSelectionGroupMediaType");
    if (!FigCFStringGetOSTypeValue()) {
      break;
    }
    CFStringRef Value = CFDictionaryGetValue(v53, @"MediaSelectionOptionsPersistentID");
    uint64_t v55 = Value;
    if (LODWORD(cf[0]) == 1935832172)
    {
      if (Value)
      {
        uint64_t v56 = v114;
        goto LABEL_98;
      }
    }
    else if (LODWORD(cf[0]) == 1936684398)
    {
      if (Value)
      {
        uint64_t v56 = Mutable;
LABEL_98:
        if (!CFDictionaryContainsKey(v56, Value))
        {
          CFDictionarySetValue(v56, v55, v53);
          CFArrayAppendValue(v51, v53);
        }
      }
    }
    else if (LODWORD(cf[0]) == 1986618469 && Value)
    {
      uint64_t v56 = theDicta;
      goto LABEL_98;
    }
    if (v50 == ++v52) {
      goto LABEL_101;
    }
  }
  uint64_t v20 = FigSignalErrorAt();
  CFTypeRef v57 = 0;
  uint64_t v3 = v107;
  CFMutableArrayRef v46 = v109;
LABEL_104:
  CFRelease(theDicta);
  CFRelease(Mutable);
  uint64_t v17 = v106;
  if (v114) {
    CFRelease(v114);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (!v20)
  {
LABEL_111:
    uint64_t v58 = *(const void **)(v17 + 40);
    *(void *)(v17 + 40) = v57;
    if (v57) {
      CFRetain(v57);
    }
    if (v58) {
LABEL_114:
    }
      CFRelease(v58);
LABEL_115:
    CFArrayRef v59 = *(const __CFArray **)(v17 + 40);
    if (v59) {
      BOOL v60 = CFArrayGetCount(v59) == 0;
    }
    else {
      BOOL v60 = 1;
    }
    uint64_t v20 = 0;
    if (v60 && dword_1E9350CD8)
    {
      uint64_t v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v20 = 0;
    }
  }
LABEL_121:
  if (v57) {
    CFRelease(v57);
  }
LABEL_123:
  if (values) {
    CFRelease(values);
  }
  if (!v20)
  {
    CFArrayRef v62 = *(const __CFArray **)(v3 + 40);
    if (!v62 || CFArrayGetCount(v62) <= 0) {
      return FigSignalErrorAt();
    }
    CFArrayRef v63 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 40), 0);
    CFIndex v64 = 0;
    if (!v63) {
      goto LABEL_130;
    }
LABEL_129:
    for (CFIndex i = CFArrayGetCount(v63); ; CFIndex i = 0)
    {
      if (v64 >= i)
      {
        uint64_t v67 = 0;
        goto LABEL_140;
      }
      CFDictionaryRef v66 = (const __CFDictionary *)CFArrayGetValueAtIndex(v63, v64);
      if (CFDictionaryGetValue(v66, @"MediaSelectionGroupMediaType"))
      {
        LODWORD(cf[0]) = 0;
        if (FigCFStringGetOSTypeValue())
        {
          if (LODWORD(cf[0]) == 1936684398) {
            break;
          }
        }
      }
      ++v64;
      if (v63) {
        goto LABEL_129;
      }
LABEL_130:
      ;
    }
    uint64_t v67 = CFDictionaryGetValue(v66, @"MediaSelectionOptionsPersistentID");
LABEL_140:
    *(void *)(v3 + 168) = v67;
    CFAllocatorRef v68 = *(const __CFAllocator **)(v3 + 8);
    uint64_t v69 = *(const void **)(v3 + 304);
    uint64_t v70 = (const void **)(v3 + 320);
    uint64_t v71 = (const void **)(v3 + 328);
    long long v72 = *(_OWORD *)(v3 + 144);
    long long v128 = *(_OWORD *)(v3 + 128);
    long long v129 = v72;
    long long v130 = *(_OWORD *)(v3 + 160);
    uint64_t v131 = *(void *)(v3 + 176);
    long long v73 = *(_OWORD *)(v3 + 112);
    *(_OWORD *)CFTypeRef cf = *(_OWORD *)(v3 + 96);
    long long v127 = v73;
    uint64_t v6 = dworch_selectAlternates_chooseAlternatesFromCreationOptions((uint64_t)a1, v68, v69, (unsigned __int8 *)cf, (void *)(v3 + 320), (void *)(v3 + 328));
    if (v6) {
      return v6;
    }
    if (*v70 || *v71)
    {
      uint64_t v74 = CMBaseObjectGetDerivedStorage();
      uint64_t v6 = dworch_setupDownloadItemsAndProgressMonitorForAlternate((uint64_t)a1, *(const void **)(v74 + 320), *(const __CFArray **)(v74 + 40));
      if (!v6)
      {
        uint64_t v6 = dworch_setupDownloadItemsAndProgressMonitorForAlternate((uint64_t)a1, *(const void **)(v74 + 328), *(const __CFArray **)(v74 + 48));
        if (!v6)
        {
          if (*(void *)(v74 + 328)) {
            uint64_t v75 = 2;
          }
          else {
            uint64_t v75 = 1;
          }
          uint64_t v76 = *(void *)(v74 + 576);
          if (v76)
          {
            uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v78 = v77 ? v77 : 0;
            uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v78 + 56);
            if (v79) {
              v79(v76, 0x1EE582C78, 0x1EE558C98, v75, 0);
            }
          }
          dworch_updateMediaSelectionsReportingKeys();
          dworch_updateAlternateInfoForReporting();
          *(void *)(v74 + 488) = *(void *)(v74 + 336);
          int v80 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          uint64_t v81 = v80;
          if (*v70) {
            CFArrayAppendValue(v80, *v70);
          }
          if (*v71) {
            CFArrayAppendValue(v81, *v71);
          }
          dworch_sendWillDownloadAlternatesCallback(a1, v81);
          uint64_t v20 = dworch_selectAlternates_stageComplete((uint64_t)a1);
          if (v81) {
            CFRelease(v81);
          }
          return v20;
        }
      }
      return v6;
    }
    if (dword_1E9350CD8)
    {
      LODWORD(values) = 0;
      uint64_t v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v83 = values;
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v84 = v83;
      }
      else {
        unsigned int v84 = v83 & 0xFFFFFFFE;
      }
      if (v84)
      {
        uint64_t v85 = *(void *)(v3 + 32);
        *(_DWORD *)CFRange v121 = 136315650;
        *(void *)&v121[4] = "dworch_selectAlternates_gotAlternates";
        __int16 v122 = 2048;
        unsigned int v123 = a1;
        __int16 v124 = 2114;
        uint64_t v125 = v85;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294950637;
  }
  return v20;
}

void dworch_selectAlternates_alternateListOrDurationChangedNote(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v15 = FigSignalErrorAt();
    if (!v15) {
      return;
    }
    goto LABEL_25;
  }
  if (!*(_DWORD *)(DerivedStorage + 532))
  {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v4 + 524) == 1 || *(unsigned char *)(v4 + 529) || *(unsigned char *)(v4 + 528))
    {
      uint64_t v5 = *(void *)(DerivedStorage + 296);
      if (v5)
      {
        FigBytePumpGetFigBaseObject(v5);
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v9 + 48);
        if (v10 && v10(v7, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], &theDict) != -12783 && theDict)
        {
          uint64_t v11 = *(const void **)(DerivedStorage + 368);
          if (v11)
          {
            CFRelease(v11);
            *(void *)(DerivedStorage + 368) = 0;
          }
          uint64_t v12 = *(const void **)(DerivedStorage + 376);
          if (v12)
          {
            CFRelease(v12);
            *(void *)(DerivedStorage + 376) = 0;
          }
          CFStringRef Value = CFDictionaryGetValue(theDict, @"FBPAIK_FigAlternateArray");
          if (Value) {
            CFStringRef Value = CFRetain(Value);
          }
          *(void *)(DerivedStorage + 368) = Value;
          CFTypeRef v14 = CFDictionaryGetValue(theDict, @"FBPAIK_MediaSelectionArray");
          if (v14) {
            CFTypeRef v14 = CFRetain(v14);
          }
          *(void *)(DerivedStorage + 376) = v14;
        }
        uint64_t v15 = dworch_selectAlternates_gotAlternates(a2);
        if (theDict) {
          CFRelease(theDict);
        }
        if (v15) {
LABEL_25:
        }
          dworch_transitionToTerminalStateWithOSStatus(a2, v15);
      }
    }
  }
}

void dworch_selectAlternates_bytePumpFnOnQueue(const void **a1)
{
  uint64_t v2 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v8 = FigSignalErrorAt();
    if (v8) {
      dworch_transitionToTerminalStateWithOSStatus(v2, v8);
    }
  }
  else if (!*(_DWORD *)(DerivedStorage + 532))
  {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(v4 + 524) == 1 || *(unsigned char *)(v4 + 529) || *(unsigned char *)(v4 + 528))
    {
      if (*(void *)(DerivedStorage + 296))
      {
        if (((_BYTE)a1[1] & 2) != 0)
        {
          uint64_t v5 = (void *)a1[2];
          if (v5)
          {
            if (dword_1E9350CD8)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v5 = (void *)a1[2];
            }
            dworch_transitionToTerminalState(v2, v5);
          }
        }
      }
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v7 = a1[2];
  if (v7) {
    CFRelease(v7);
  }
  free(a1);
}

uint64_t dworch_createStreamingCache(uint64_t a1, __CFString *a2, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  if (!a3)
  {
    uint64_t v15 = FigSignalErrorAt();
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = DerivedStorage;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(DerivedStorage + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v8 = Mutable;
  if (!Mutable)
  {
    uint64_t v14 = FigSignalErrorAt();
LABEL_20:
    uint64_t v15 = v14;
    goto LABEL_13;
  }
  if (@"FSC_DiskBacking" == a2) {
    CFDictionarySetValue(Mutable, @"FSC_DownloadDestinationURL", *(const void **)(v6 + 24));
  }
  CFDictionarySetValue(v8, @"FSC_Backing", a2);
  uint64_t v9 = *(void *)(v6 + 8);
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v6 + 16));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v12 + 48);
  if (!v13)
  {
    uint64_t v15 = 4294954514;
    goto LABEL_13;
  }
  uint64_t v14 = v13(CMBaseObject, @"assetProperty_OriginalNetworkContentURL", v9, &cf);
  if (v14) {
    goto LABEL_20;
  }
  uint64_t v15 = FigStreamingCacheCreate(*(const __CFAllocator **)(v6 + 8), (const __CFURL *)cf, v8, &v17);
  if (!v15) {
    *a3 = v17;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v15;
}

void dworch_sendWillDownloadAlternatesCallback(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    uint64_t v6 = (const void *)v5;
    uint64_t v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1) {
        CFTypeRef v9 = CFRetain(a1);
      }
      else {
        CFTypeRef v9 = 0;
      }
      *uint64_t v8 = v9;
      v8[1] = v6;
      if (a2) {
        CFTypeRef v10 = CFRetain(a2);
      }
      else {
        CFTypeRef v10 = 0;
      }
      v8[9] = v10;
      uint64_t v11 = *(NSObject **)(DerivedStorage + 280);
      dispatch_async_f(v11, v8, (dispatch_function_t)dworch_sendWillDownloadAlternatesOnCallbackQueue);
    }
    else if (FigSignalErrorAt())
    {
      CFRelease(v6);
    }
  }
}

uint64_t dworch_selectAlternates_stageComplete(uint64_t a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!*(void *)(DerivedStorage + 296)) {
    return dworch_changeStageOnQueue(a1, 1u);
  }
  uint64_t v4 = DerivedStorage;
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor = dworch_selectAlternates_removePumpListeners(a1);
  if (TimestampClientDidPauseOnContentSteeringMonitor) {
    return TimestampClientDidPauseOnContentSteeringMonitor;
  }
  FigBytePumpGetFigBaseObject(*(void *)(v4 + 296));
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 56);
  if (!v10) {
    return 4294954514;
  }
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor = v10(v7, 0x1EE53E498, 0);
  if (TimestampClientDidPauseOnContentSteeringMonitor) {
    return TimestampClientDidPauseOnContentSteeringMonitor;
  }
  FigBytePumpGetFigBaseObject(*(void *)(v4 + 296));
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v14 + 48);
  if (!v15) {
    return 4294954514;
  }
  uint64_t v16 = *MEMORY[0x1E4F1CF80];
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor = v15(v12, 0x1EE53EBF8, *MEMORY[0x1E4F1CF80], v4 + 400);
  if (TimestampClientDidPauseOnContentSteeringMonitor) {
    return TimestampClientDidPauseOnContentSteeringMonitor;
  }
  if (*(void *)(v4 + 400))
  {
    if (dword_1E9350CD8)
    {
      uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_DWORD *)(v4 + 524) == 1 && !*(unsigned char *)(v4 + 529))
    {
      uint64_t TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor(a1, 0x7FFFFFFFFFFFFFFFLL);
      if (TimestampClientDidPauseOnContentSteeringMonitor) {
        return TimestampClientDidPauseOnContentSteeringMonitor;
      }
    }
  }
  FigBytePumpGetFigBaseObject(*(void *)(v4 + 296));
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v21 = v20 ? v20 : 0;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v21 + 48);
  if (!v22) {
    return 4294954514;
  }
  uint64_t v23 = v22(v19, 0x1EE53E4B8, v16, cf);
  CFTypeRef v24 = cf[0];
  if (!v23)
  {
    if (cf[0])
    {
      uint64_t v23 = dworch_ensureTemporaryMetadataOnlyStreamingCache(a1);
      CFTypeRef v24 = cf[0];
      if (!v23)
      {
        uint64_t v23 = FigStreamingCacheTransferData((uint64_t)cf[0], *(void *)(v4 + 288));
        CFTypeRef v24 = cf[0];
      }
    }
  }
  if (v24) {
    CFRelease(v24);
  }
  if (!v23) {
    return dworch_changeStageOnQueue(a1, 1u);
  }
  return v23;
}

uint64_t dworch_selectAlternates_installDeviceCapabilityFilters(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = FigAlternateMediaValidationFilterCreate((uint64_t)a1, 0, &cf);
  if (v4) {
    goto LABEL_18;
  }
  uint64_t v4 = FigAlternateSelectionBossAddFilter(a2, cf);
  if (v4) {
    goto LABEL_18;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  int v10 = 0;
  FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(&v10, 0, 0);
  uint64_t v4 = FigAlternateSupportedVideoRangeFilterCreate(a1, v10, &cf);
  if (v4) {
    goto LABEL_18;
  }
  uint64_t v4 = FigAlternateSelectionBossAddFilter(a2, cf);
  if (v4) {
    goto LABEL_18;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (!PKDGetSystemCPC(&v8))
  {
    uint64_t v4 = FigAlternateAllowedCPCFilterCreate(a1, v8, &cf);
    if (v4) {
      goto LABEL_18;
    }
    uint64_t v4 = FigAlternateSelectionBossAddFilter(a2, cf);
    if (v4) {
      goto LABEL_18;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  uint64_t v4 = FigAlternatePreferVideoCodecsWithHardwareDecodeFilterCreate(a1, &cf);
  if (v4)
  {
LABEL_18:
    uint64_t v5 = v4;
    CFTypeRef v6 = cf;
    goto LABEL_19;
  }
  uint64_t v5 = FigAlternateSelectionBossAddFilter(a2, cf);
  CFTypeRef v6 = cf;
  if (!v5 && cf)
  {
    uint64_t v5 = 0;
LABEL_20:
    CFRelease(v6);
    return v5;
  }
LABEL_19:
  if (v6) {
    goto LABEL_20;
  }
  return v5;
}

uint64_t dworch_selectAlternates_evaluateAndCopyContentConfig(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFTypeRef *a5)
{
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t Alternate = (const void *)FigStreamingAssetDownloadContentConfigGetAlternate(a2);
  if (Alternate)
  {
    uint64_t v12 = (void *)CFRetain(Alternate);
    CFTypeRef v31 = v12;
    AlternateQualifiers = (void *)FigStreamingAssetDownloadContentConfigGetAlternateQualifiers(a2);
    if (v12) {
      goto LABEL_10;
    }
  }
  else
  {
    CFTypeRef v31 = 0;
    AlternateQualifiers = (void *)FigStreamingAssetDownloadContentConfigGetAlternateQualifiers(a2);
  }
  uint64_t v14 = AlternateQualifiers;
  if (a3)
  {
    uint64_t v15 = dworch_selectAlternates_evaluateAndCopyAlternateWithQualifiers(a1, AlternateQualifiers, a3, a4, &v31);
    uint64_t v12 = (void *)v31;
    if (v15) {
      goto LABEL_42;
    }
    if (v31) {
      goto LABEL_10;
    }
  }
  uint64_t v15 = dworch_selectAlternates_evaluateAndCopyAlternateWithQualifiers(a1, v14, 0, a4, &v31);
  uint64_t v12 = (void *)v31;
  if (v15)
  {
LABEL_42:
    uint64_t SelectedMediaArrayForCriteria = v15;
    if (v12)
    {
      CFIndex v25 = (__CFArray *)v12;
LABEL_32:
      CFRelease(v25);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  if (v31)
  {
LABEL_10:
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    value[0] = 0;
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFArrayRef MediaSelections = (const __CFArray *)FigStreamingAssetDownloadContentConfigGetMediaSelections(a2);
      if (!MediaSelections) {
        goto LABEL_19;
      }
      CFArrayRef v19 = MediaSelections;
      CFIndex Count = CFArrayGetCount(MediaSelections);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v19, i);
          FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(*(void *)(v16 + 376), ValueAtIndex, 0, 0, value);
          CFArrayAppendValue(Mutable, value[0]);
          if (value[0])
          {
            CFRelease(value[0]);
            value[0] = 0;
          }
        }
      }
      if (Count)
      {
        uint64_t SelectedMediaArrayForCriteria = 0;
      }
      else
      {
LABEL_19:
        uint64_t SelectedMediaArrayForCriteria = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(*(void *)(v16 + 376), 0, 0, 0, value);
        if (SelectedMediaArrayForCriteria)
        {
          CFRelease(Mutable);
          CFMutableDictionaryRef Mutable = 0;
        }
        else
        {
          CFArrayAppendValue(Mutable, value[0]);
        }
      }
    }
    else
    {
      uint64_t SelectedMediaArrayForCriteria = FigSignalErrorAt();
    }
    if (value[0]) {
      CFRelease(value[0]);
    }
    if (!SelectedMediaArrayForCriteria)
    {
      uint64_t v24 = FigStreamingAssetDownloadContentConfigCreate(*(void *)(DerivedStorage + 8), (uint64_t *)&cf);
      if (v24 || (uint64_t v24 = FigStreamingAssetDownloadContentConfigSetAlternate((uint64_t)cf, v12), v24))
      {
        uint64_t SelectedMediaArrayForCriteria = v24;
        if (!v12) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      uint64_t SelectedMediaArrayForCriteria = FigStreamingAssetDownloadContentConfigSetMediaSelections((uint64_t)cf, Mutable);
      if (!SelectedMediaArrayForCriteria)
      {
        *a5 = cf;
        CFTypeRef cf = 0;
      }
    }
    if (!v12)
    {
LABEL_30:
      if (!Mutable) {
        goto LABEL_36;
      }
      CFIndex v25 = Mutable;
      goto LABEL_32;
    }
LABEL_29:
    CFRelease(v12);
    goto LABEL_30;
  }
  if (dword_1E9350CD8)
  {
    int v30 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t SelectedMediaArrayForCriteria = 4294950637;
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
  return SelectedMediaArrayForCriteria;
}

uint64_t dworch_selectAlternates_evaluateAndCopyAlternateWithQualifiers(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a2 && a4) {
    return 0;
  }
  if (a3)
  {
    PlaylistAlternateCFTypeRef URL = (const void *)FigAlternateGetPlaylistAlternateURL(a3);
    if (PlaylistAlternateURL)
    {
      uint64_t v11 = FigAlternateAllowListWithURLFilterCreate(*(void *)(DerivedStorage + 8), PlaylistAlternateURL, 874, *(unsigned char *)(DerivedStorage + 552), &cf);
      if (v11) {
        goto LABEL_36;
      }
      uint64_t v11 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 304), cf);
      if (v11) {
        goto LABEL_36;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
  }
  if (a2)
  {
    uint64_t v11 = FigAlternateMultipleAlternateQualifierFilterCreate(*(void *)(DerivedStorage + 8), a2, &cf);
    if (v11) {
      goto LABEL_36;
    }
    uint64_t v11 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 304), cf);
    if (v11) {
      goto LABEL_36;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  if (a4)
  {
    uint64_t v11 = FigAlternateMatchesAnyClientPredicateFilterCreate(*(void *)(DerivedStorage + 8), a2, &cf);
    if (v11) {
      goto LABEL_36;
    }
    uint64_t v11 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 304), cf);
    if (v11) {
      goto LABEL_36;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  uint64_t v11 = dworch_selectAlternates_chooseAppropriateAlternate(*(const void **)(DerivedStorage + 304), a5);
  if (v11) {
    goto LABEL_36;
  }
  uint64_t v11 = FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 304), @"ClientPredicatesFilter");
  if (v11) {
    goto LABEL_36;
  }
  uint64_t v11 = FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 304), @"AllowListURLFilter");
  if (v11) {
    goto LABEL_36;
  }
  uint64_t v11 = FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 304), @"MatchesAnyClientPredicateFilter");
  if (v11) {
    goto LABEL_36;
  }
  char CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  uint64_t v11 = FigAlternateSuppressDoVi5StereoFilterCreate(*(void *)(DerivedStorage + 8), &cf);
  if (v11) {
    goto LABEL_36;
  }
  uint64_t v11 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 304), cf);
  if (v11) {
    goto LABEL_36;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (CFPreferenceNumberWithDefault)
  {
    uint64_t v11 = FigAlternateMediaValidationForStereoVideoFilterCreate(*(void *)(DerivedStorage + 8), &cf);
    if (v11) {
      goto LABEL_36;
    }
    uint64_t v11 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 304), cf);
    if (v11) {
      goto LABEL_36;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  uint64_t v11 = FigAlternateSuppressDoVi20MonoFilterCreate(*(void *)(DerivedStorage + 8), &cf);
  if (v11)
  {
LABEL_36:
    uint64_t v13 = v11;
    CFTypeRef v14 = cf;
    goto LABEL_37;
  }
  uint64_t v13 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 304), cf);
  CFTypeRef v14 = cf;
  if (!v13 && cf)
  {
    uint64_t v13 = 0;
LABEL_38:
    CFRelease(v14);
    return v13;
  }
LABEL_37:
  if (v14) {
    goto LABEL_38;
  }
  return v13;
}

uint64_t dworch_selectAlternates_chooseAppropriateAlternate(const void *a1, void *a2)
{
  CFArrayRef theArray = 0;
  FigAlternateSelectionLogNextFilterOperation();
  uint64_t v4 = FigAlternateSelectionBossApplyFilters(a1);
  if (v4) {
    return v4;
  }
  uint64_t v5 = FigAlternateSelectionBossCopyProperty((uint64_t)a1, @"FilteredAlternateList", *MEMORY[0x1E4F1CF80], &theArray);
  CFArrayRef ValueAtIndex = theArray;
  if (!v5)
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        CFArrayRef ValueAtIndex = 0;
      }
      else
      {
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (ValueAtIndex) {
          CFArrayRef ValueAtIndex = CFRetain(ValueAtIndex);
        }
      }
    }
    *a2 = ValueAtIndex;
    CFArrayRef ValueAtIndex = theArray;
  }
  if (ValueAtIndex) {
    CFRelease(ValueAtIndex);
  }
  return v5;
}

void dworch_sendDidResolveMediaSelectionCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(void (**)(void, void, void))(DerivedStorage + 232);
    if (v3) {
      v3(a1[1], *a1, a1[6]);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

uint64_t dworch_setupDownloadItemsAndProgressMonitorForAlternate(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (a2 && a3)
  {
    uint64_t v8 = DerivedStorage;
    CFIndex Count = CFArrayGetCount(a3);
    if (Count < 1)
    {
LABEL_15:
      uint64_t v7 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0;
      while (1)
      {
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v11);
        uint64_t v7 = malloc_type_calloc(1uLL, 0x20uLL, 0xE00401043B4FBuLL);
        if (v7)
        {
          v7[2] = CFRetain(a2);
          CFTypeRef v13 = ValueAtIndex ? CFRetain(ValueAtIndex) : 0;
          v7[3] = v13;
        }
        else
        {
          uint64_t v16 = FigSignalErrorAt();
          if (v16)
          {
            uint64_t v6 = v16;
            uint64_t v7 = 0;
            goto LABEL_16;
          }
        }
        uint64_t v14 = FigStreamingAssetProgressMonitorRegisterAlternateAndMediaSelections(*(void *)(v8 + 360), (uint64_t)a2, (uint64_t)ValueAtIndex);
        if (v14) {
          break;
        }
        uint64_t v15 = *(void **)(v8 + 344);
        *uint64_t v7 = 0;
        v7[1] = v15;
        *uint64_t v15 = v7;
        *(void *)(v8 + 344) = v7;
        if (v10 == ++v11) {
          goto LABEL_15;
        }
      }
      uint64_t v6 = v14;
    }
  }
LABEL_16:
  dworch_freeAlternateAndRenditionItem(v7);
  return v6;
}

void dworch_updateMediaSelectionsReportingKeys()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = *(_DWORD *)(DerivedStorage + 584);
  if (*(unsigned char *)(DerivedStorage + 569))
  {
    if (!v1) {
      return;
    }
  }
  else if (v1 != 2)
  {
    return;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    double v40 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
    if (!v40)
    {
      FigSignalErrorAt();
      uint64_t v35 = Mutable;
      goto LABEL_55;
    }
    uint64_t v3 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
    if (v3 && (CFMutableArrayRef v4 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510])) != 0)
    {
      uint64_t v36 = DerivedStorage;
      CFArrayRef theArray = *(const __CFArray **)(DerivedStorage + 40);
      double v39 = v4;
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, i);
            if (ValueAtIndex)
            {
              CFArrayRef v7 = ValueAtIndex;
              CFIndex v8 = CFArrayGetCount(ValueAtIndex);
              if (v8 >= 1)
              {
                CFIndex v9 = v8;
                for (CFIndex j = 0; j != v9; ++j)
                {
                  CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, j);
                  if (v11)
                  {
                    CFDictionaryRef v12 = v11;
                    CFStringRef Value = CFDictionaryGetValue(v11, @"MediaSelectionGroupMediaType");
                    if (Value) {
                      CFArrayAppendValue(Mutable, Value);
                    }
                    uint64_t v14 = CFDictionaryGetValue(v12, @"MediaSelectionOptionsAudioChannelLayouts");
                    if (v14) {
                      CFArrayAppendValue(v40, v14);
                    }
                    uint64_t v15 = CFDictionaryGetValue(v12, @"MediaSelectionOptionsLanguageCode");
                    if (v15) {
                      CFArrayAppendValue(v3, v15);
                    }
                    uint64_t v16 = CFDictionaryGetValue(v12, @"MediaSelectionOptionsName");
                    if (v16) {
                      CFArrayAppendValue(v39, v16);
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v17 = *(void *)(v36 + 576);
      if (!v17) {
        goto LABEL_50;
      }
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v19 + 48);
      if (v20) {
        v20(v17, 0x1EE582C78, 0x1EE558DD8, Mutable, 0);
      }
      uint64_t v21 = *(void *)(v36 + 576);
      if (!v21) {
        goto LABEL_50;
      }
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v23 + 48);
      if (v24) {
        v24(v21, 0x1EE582C78, 0x1EE558DF8, v40, 0);
      }
      uint64_t v25 = *(void *)(v36 + 576);
      if (!v25) {
        goto LABEL_50;
      }
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v27 + 48);
      if (v28) {
        v28(v25, 0x1EE582C78, 0x1EE558E18, v3, 0);
      }
      uint64_t v29 = *(void *)(v36 + 576);
      if (v29
        && ((uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v31 = 0) : (v31 = v30),
            (uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v31 + 48)) != 0))
      {
        uint64_t v33 = v29;
        uint64_t v34 = v39;
        v32(v33, 0x1EE582C78, 0x1EE558E38, v39, 0);
      }
      else
      {
LABEL_50:
        uint64_t v34 = v39;
      }
    }
    else
    {
      FigSignalErrorAt();
      uint64_t v34 = 0;
    }
    CFRelease(Mutable);
    CFRelease(v40);
    if (v3) {
      CFRelease(v3);
    }
    if (v34)
    {
      uint64_t v35 = v34;
LABEL_55:
      CFRelease(v35);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void dworch_updateAlternateInfoForReporting()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return;
  }
  CFMutableArrayRef cf = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
  if (!cf)
  {
    FigSignalErrorAt();
    uint64_t v86 = Mutable;
LABEL_153:
    CFRelease(v86);
    return;
  }
  CFMutableArrayRef v1 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
  if (v1)
  {
    CFMutableArrayRef v2 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
    if (v2)
    {
      CFMutableArrayRef v3 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
      if (v3)
      {
        CFMutableArrayRef v4 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
        if (v4)
        {
          CFMutableArrayRef v5 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
          if (v5)
          {
            CFMutableArrayRef v6 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
            if (v6 && (CFMutableArrayRef v7 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510])) != 0)
            {
              CFMutableArrayRef v100 = v7;
              CFMutableArrayRef v98 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
              if (v98)
              {
                CFMutableArrayRef v8 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
                if (v8)
                {
                  CFMutableArrayRef v9 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
                  if (v9)
                  {
                    CFMutableArrayRef v10 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
                    if (v10)
                    {
                      CFMutableArrayRef v99 = v10;
                      CFMutableArrayRef v11 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
                      if (v11)
                      {
                        CFMutableArrayRef v12 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
                        if (v12)
                        {
                          CFIndex v89 = v11;
                          CFIndex v90 = v12;
                          CFIndex v95 = v6;
                          CFIndex v96 = v9;
                          uint64_t v97 = v5;
                          uint64_t v87 = v8;
                          CFArrayRef theArray = v3;
                          CFTypeRef v13 = *(void **)(DerivedStorage + 336);
                          if (v13)
                          {
                            uint64_t v14 = 0;
                            uint64_t v93 = v4;
                            uint64_t v94 = v2;
                            do
                            {
                              FigAlternateGetPeakBitRate(v13[2]);
                              FigAlternateGetAverageBitRate(v13[2]);
                              VideoRangeString = FigAlternateGetVideoRangeString((__CFString *)v13[2]);
                              FigAlternateGetVideoQualityIndex(v13[2]);
                              FigAlternateIsAudioOnly(v13[2]);
                              FigAlternateGetResolution(v13[2]);
                              uint64_t CodecString = (const void *)FigAlternateGetCodecString(v13[2]);
                              FigAlternateHasBinauralAudio((const void *)v13[2]);
                              FigAlternateGetMaxPlayableAudioChannelCount((const void *)v13[2]);
                              FigAlternateHasLosslessAudio(v13[2]);
                              BOOL BestAudioFormat = FigAlternateGetBestAudioFormat(v13[2]);
                              StringFromAudioFormat = FigAlternateGetStringFromAudioFormat(BestAudioFormat);
                              FigAlternateGetMaxAudioSampleRate(v13[2]);
                              VideoLayoutString = FigAlternateGetVideoLayoutString(v13[2]);
                              VideoContentTypeString = FigAlternateGetVideoContentTypeString(v13[2]);
                              FigCFArrayAppendInt();
                              FigCFArrayAppendInt();
                              if (VideoRangeString) {
                                CFArrayAppendValue(theArray, VideoRangeString);
                              }
                              CFMutableArrayRef v2 = v94;
                              FigCFArrayAppendInt();
                              CFMutableArrayRef v4 = v93;
                              FigCFArrayAppendInt();
                              FigCFArrayAppendInt();
                              if (CodecString) {
                                CFArrayAppendValue(Mutable, CodecString);
                              }
                              FigCFArrayAppendInt();
                              FigCFArrayAppendInt();
                              FigCFArrayAppendInt();
                              if (StringFromAudioFormat) {
                                CFArrayAppendValue(v87, StringFromAudioFormat);
                              }
                              FigCFArrayAppendInt();
                              FigCFArrayAppendDouble();
                              if (VideoLayoutString) {
                                CFArrayAppendValue(v89, VideoLayoutString);
                              }
                              if (VideoContentTypeString) {
                                CFArrayAppendValue(v90, VideoContentTypeString);
                              }
                              CFTypeRef v13 = (void *)*v13;
                              ++v14;
                            }
                            while (v13);
                          }
                          else
                          {
                            uint64_t v14 = 0;
                          }
                          uint64_t v21 = *(void *)(DerivedStorage + 576);
                          if (v21)
                          {
                            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
                            CFMutableArrayRef v8 = v87;
                            CFMutableArrayRef v3 = theArray;
                            CFMutableArrayRef v9 = v96;
                            CFMutableArrayRef v5 = v97;
                            CFMutableArrayRef v6 = v95;
                            if (v22) {
                              uint64_t v23 = v22;
                            }
                            else {
                              uint64_t v23 = 0;
                            }
                            uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v23 + 56);
                            if (v24) {
                              v24(v21, 0x1EE582C78, 0x1EE558C98, v14, 0);
                            }
                            uint64_t v25 = *(void *)(DerivedStorage + 576);
                            if (v25)
                            {
                              uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
                              CFMutableArrayRef v27 = v98;
                              if (v26) {
                                uint64_t v28 = v26;
                              }
                              else {
                                uint64_t v28 = 0;
                              }
                              uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef, void))(v28 + 48);
                              if (v29) {
                                v29(v25, 0x1EE582C78, 0x1EE5836F8, cf, 0);
                              }
                              uint64_t v30 = *(void *)(DerivedStorage + 576);
                              if (v30)
                              {
                                uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
                                if (v31) {
                                  uint64_t v32 = v31;
                                }
                                else {
                                  uint64_t v32 = 0;
                                }
                                uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef, void))(v32 + 48);
                                if (v33) {
                                  v33(v30, 0x1EE582C78, 0x1EE583718, v1, 0);
                                }
                                uint64_t v34 = *(void *)(DerivedStorage + 576);
                                if (v34)
                                {
                                  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
                                  if (v35) {
                                    uint64_t v36 = v35;
                                  }
                                  else {
                                    uint64_t v36 = 0;
                                  }
                                  CFTypeRef v37 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v36 + 48);
                                  if (v37) {
                                    v37(v34, 0x1EE582C78, 0x1EE584C18, theArray, 0);
                                  }
                                  uint64_t v38 = *(void *)(DerivedStorage + 576);
                                  if (v38)
                                  {
                                    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    if (v39) {
                                      uint64_t v40 = v39;
                                    }
                                    else {
                                      uint64_t v40 = 0;
                                    }
                                    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef, void))(v40 + 48);
                                    if (v41) {
                                      v41(v38, 0x1EE582C78, 0x1EE584E18, v2, 0);
                                    }
                                    uint64_t v42 = *(void *)(DerivedStorage + 576);
                                    if (v42)
                                    {
                                      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
                                      if (v43) {
                                        uint64_t v44 = v43;
                                      }
                                      else {
                                        uint64_t v44 = 0;
                                      }
                                      CFMutableArrayRef v45 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v44 + 48);
                                      if (v45) {
                                        v45(v42, 0x1EE582C78, 0x1EE5617B8, v97, 0);
                                      }
                                      uint64_t v46 = *(void *)(DerivedStorage + 576);
                                      if (v46)
                                      {
                                        uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
                                        if (v47) {
                                          uint64_t v48 = v47;
                                        }
                                        else {
                                          uint64_t v48 = 0;
                                        }
                                        CFArrayRef v49 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef, void))(v48 + 48);
                                        if (v49) {
                                          v49(v46, 0x1EE582C78, 0x1EE5617D8, v4, 0);
                                        }
                                        uint64_t v50 = *(void *)(DerivedStorage + 576);
                                        if (v50)
                                        {
                                          uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
                                          if (v51) {
                                            uint64_t v52 = v51;
                                          }
                                          else {
                                            uint64_t v52 = 0;
                                          }
                                          CFDictionaryRef v53 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v52 + 48);
                                          if (v53) {
                                            v53(v50, 0x1EE582C78, 0x1EE583D98, Mutable, 0);
                                          }
                                          uint64_t v54 = *(void *)(DerivedStorage + 576);
                                          if (v54)
                                          {
                                            uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
                                            if (v55) {
                                              uint64_t v56 = v55;
                                            }
                                            else {
                                              uint64_t v56 = 0;
                                            }
                                            CFTypeRef v57 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v56 + 48);
                                            if (v57) {
                                              v57(v54, 0x1EE582C78, 0x1EE5838F8, v95, 0);
                                            }
                                            uint64_t v58 = *(void *)(DerivedStorage + 576);
                                            if (v58)
                                            {
                                              uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
                                              if (v59) {
                                                uint64_t v60 = v59;
                                              }
                                              else {
                                                uint64_t v60 = 0;
                                              }
                                              uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef, void))(v60 + 48);
                                              if (v61) {
                                                v61(v58, 0x1EE582C78, 0x1EE584EB8, v100, 0);
                                              }
                                              uint64_t v62 = *(void *)(DerivedStorage + 576);
                                              if (v62)
                                              {
                                                uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                if (v63) {
                                                  uint64_t v64 = v63;
                                                }
                                                else {
                                                  uint64_t v64 = 0;
                                                }
                                                uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef, void))(v64 + 48);
                                                if (v65) {
                                                  v65(v62, 0x1EE582C78, 0x1EE5850D8, v99, 0);
                                                }
                                                uint64_t v66 = *(void *)(DerivedStorage + 576);
                                                if (v66)
                                                {
                                                  uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                  if (v67) {
                                                    uint64_t v68 = v67;
                                                  }
                                                  else {
                                                    uint64_t v68 = 0;
                                                  }
                                                  uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef, void))(v68 + 48);
                                                  if (v69) {
                                                    v69(v66, 0x1EE582C78, 0x1EE584E98, v98, 0);
                                                  }
                                                  uint64_t v70 = *(void *)(DerivedStorage + 576);
                                                  if (v70)
                                                  {
                                                    uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                    if (v71) {
                                                      uint64_t v72 = v71;
                                                    }
                                                    else {
                                                      uint64_t v72 = 0;
                                                    }
                                                    long long v73 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v72 + 48);
                                                    if (v73) {
                                                      v73(v70, 0x1EE582C78, 0x1EE585398, v87, 0);
                                                    }
                                                    uint64_t v74 = *(void *)(DerivedStorage + 576);
                                                    if (v74)
                                                    {
                                                      uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                      if (v75) {
                                                        uint64_t v76 = v75;
                                                      }
                                                      else {
                                                        uint64_t v76 = 0;
                                                      }
                                                      uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v76 + 48);
                                                      if (v77) {
                                                        v77(v74, 0x1EE582C78, 0x1EE5853B8, v96, 0);
                                                      }
                                                      uint64_t v78 = *(void *)(DerivedStorage + 576);
                                                      if (v78)
                                                      {
                                                        uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                        if (v79) {
                                                          uint64_t v80 = v79;
                                                        }
                                                        else {
                                                          uint64_t v80 = 0;
                                                        }
                                                        uint64_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v80 + 48);
                                                        if (v81) {
                                                          v81(v78, 0x1EE582C78, 0x1EE583778, v89, 0);
                                                        }
                                                        uint64_t v82 = *(void *)(DerivedStorage + 576);
                                                        if (v82)
                                                        {
                                                          uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                          uint64_t v84 = v83 ? v83 : 0;
                                                          uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, void))(v84 + 48);
                                                          if (v85) {
                                                            v85(v82, 0x1EE582C78, 0x1EE583798, v90, 0);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              goto LABEL_127;
                            }
                          }
                          else
                          {
                            CFMutableArrayRef v8 = v87;
                            CFMutableArrayRef v3 = theArray;
                            CFMutableArrayRef v9 = v96;
                            CFMutableArrayRef v5 = v97;
                            CFMutableArrayRef v6 = v95;
                          }
                          CFMutableArrayRef v27 = v98;
LABEL_127:
                          CFMutableArrayRef v11 = v89;
                          goto LABEL_128;
                        }
                      }
                      goto LABEL_171;
                    }
                  }
                  CFMutableArrayRef v11 = 0;
                }
                else
                {
                  CFMutableArrayRef v11 = 0;
                  CFMutableArrayRef v9 = 0;
                }
                CFMutableArrayRef v99 = 0;
LABEL_171:
                CFMutableArrayRef v27 = v98;
                goto LABEL_172;
              }
              CFMutableArrayRef v11 = 0;
              CFMutableArrayRef v9 = 0;
              CFMutableArrayRef v8 = 0;
              CFMutableArrayRef v27 = 0;
              CFMutableArrayRef v99 = 0;
            }
            else
            {
              CFMutableArrayRef v11 = 0;
              CFMutableArrayRef v9 = 0;
              CFMutableArrayRef v8 = 0;
              CFMutableArrayRef v27 = 0;
              CFMutableArrayRef v99 = 0;
              CFMutableArrayRef v100 = 0;
            }
          }
          else
          {
            CFMutableArrayRef v11 = 0;
            CFMutableArrayRef v9 = 0;
            CFMutableArrayRef v8 = 0;
            CFMutableArrayRef v27 = 0;
            CFMutableArrayRef v99 = 0;
            CFMutableArrayRef v100 = 0;
            CFMutableArrayRef v6 = 0;
          }
        }
        else
        {
          CFMutableArrayRef v11 = 0;
          CFMutableArrayRef v9 = 0;
          CFMutableArrayRef v8 = 0;
          CFMutableArrayRef v27 = 0;
          CFMutableArrayRef v99 = 0;
          CFMutableArrayRef v100 = 0;
          CFMutableArrayRef v6 = 0;
          CFMutableArrayRef v5 = 0;
        }
      }
      else
      {
        CFMutableArrayRef v11 = 0;
        CFMutableArrayRef v9 = 0;
        CFMutableArrayRef v8 = 0;
        CFMutableArrayRef v27 = 0;
        CFMutableArrayRef v99 = 0;
        CFMutableArrayRef v100 = 0;
        CFMutableArrayRef v6 = 0;
        CFMutableArrayRef v5 = 0;
        CFMutableArrayRef v4 = 0;
      }
    }
    else
    {
      CFMutableArrayRef v11 = 0;
      CFMutableArrayRef v9 = 0;
      CFMutableArrayRef v8 = 0;
      CFMutableArrayRef v27 = 0;
      CFMutableArrayRef v99 = 0;
      CFMutableArrayRef v100 = 0;
      CFMutableArrayRef v6 = 0;
      CFMutableArrayRef v5 = 0;
      CFMutableArrayRef v4 = 0;
      CFMutableArrayRef v3 = 0;
    }
  }
  else
  {
    CFMutableArrayRef v11 = 0;
    CFMutableArrayRef v9 = 0;
    CFMutableArrayRef v8 = 0;
    CFMutableArrayRef v27 = 0;
    CFMutableArrayRef v99 = 0;
    CFMutableArrayRef v100 = 0;
    CFMutableArrayRef v6 = 0;
    CFMutableArrayRef v5 = 0;
    CFMutableArrayRef v4 = 0;
    CFMutableArrayRef v3 = 0;
    CFMutableArrayRef v2 = 0;
  }
LABEL_172:
  FigSignalErrorAt();
  CFIndex v90 = 0;
LABEL_128:
  CFRelease(Mutable);
  CFRelease(cf);
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v100) {
    CFRelease(v100);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v99) {
    CFRelease(v99);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v86 = v90;
  if (v90) {
    goto LABEL_153;
  }
}

void dworch_sendWillDownloadAlternatesOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else if (*(void *)(DerivedStorage + 200) == 2)
  {
    CFMutableArrayRef v3 = *(void (**)(void, void, void))(DerivedStorage + 264);
    if (v3) {
      v3(a1[1], *a1, a1[9]);
    }
  }
  CFMutableArrayRef v4 = (const void *)a1[9];
  if (v4) {
    CFRelease(v4);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFMutableArrayRef v5 = (const void *)a1[1];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

uint64_t dworch_changeStageOnQueue(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 532) >= a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = DerivedStorage;
    if (dword_1E9350CD8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(v5 + 532) = a2;
    if (a2 == 3)
    {
      dworch_releaseDiskResources();
      if (*(_DWORD *)(v5 + 524) != 1) {
        dworch_relinquishAccessToDestinationURL();
      }
    }
    if ((*(_DWORD *)(v5 + 524) == 1 || a2 <= 2 && *(unsigned char *)(v5 + 528))
      && (CFMutableArrayRef v7 = kDownloadOrchestratorStage_JumpTable[6 * *(unsigned int *)(v5 + 532)]) != 0)
    {
      return ((uint64_t (*)(uint64_t))v7)(a1);
    }
    else
    {
      return 0;
    }
  }
}

void dworch_releaseDiskResources()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigStreamingCacheInvalidate(*(void *)(DerivedStorage + 456));
  CFMutableArrayRef v1 = *(const void **)(DerivedStorage + 456);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 456) = 0;
  }
}

void dworch_sendDownloadSucceededCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    CFMutableArrayRef v3 = *(void (**)(void, void))(DerivedStorage + 208);
    if (v3) {
      v3(a1[1], *a1);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFMutableArrayRef v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

void dworch_sendDownloadFailedCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    CFMutableArrayRef v3 = *(void (**)(void, void, void))(DerivedStorage + 216);
    if (v3) {
      v3(a1[1], *a1, a1[2]);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFMutableArrayRef v4 = (const void *)a1[2];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[1];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

uint64_t dworch_issueReportingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(result + 576);
  if (v4)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v7 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v6 = v7;
    uint64_t v8 = v7 ? v6 : 0;
    CFMutableArrayRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v8 + 8);
    if (v9)
    {
      return v9(v4, 0x1EE582C78, a2, 1, 0);
    }
  }
  return result;
}

void dworch_downloadMetadata_gotAccessToDestinationURLCallback(const void *a1, int a2, uint64_t a3)
{
  v70[16] = *(__CFArray **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != FigAssetDownloaderGetTypeID()
    || (*(void *)(DerivedStorage + 544) = a3,
        CMBaseObjectGetDerivedStorage(),
        FigRetainProxyIsInvalidated())
    || a2 && !a3)
  {
    uint64_t v66 = FigSignalErrorAt();
LABEL_89:
    uint64_t v33 = v66;
    dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
    if (!v33) {
      return;
    }
LABEL_93:
    dworch_transitionToTerminalStateWithOSStatus(a1, v33);
    return;
  }
  if (*(_DWORD *)(DerivedStorage + 524) == 1 || *(unsigned char *)(DerivedStorage + 528))
  {
    uint64_t IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
    if (IsRegisteredForDownload) {
      goto LABEL_97;
    }
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    v69[0] = 1;
    v69[1] = dworch_downloadMetadata_downloadSuccededCallback;
    v69[2] = dworch_downloadMetadata_downloadFailedCallback;
    memset(&v69[3], 0, 24);
    v69[6] = dworch_downloadMetadata_didFinishLoadingMetadata;
    v69[7] = 0;
    v69[8] = 0;
    v69[9] = dworch_downloadMetadata_didFinishLoadingPlaylistsCallback;
    if (*(void *)(v9 + 408))
    {
LABEL_68:
      if (*(unsigned char *)(DerivedStorage + 529) || !*(void *)(CMBaseObjectGetDerivedStorage() + 544))
      {
        uint64_t IsRegisteredForDownload = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
        if (IsRegisteredForDownload) {
          goto LABEL_97;
        }
        uint64_t v54 = (uint64_t *)(DerivedStorage + 288);
      }
      else
      {
        uint64_t IsRegisteredForDownload = dworch_ensurePersistentStreamingCache((uint64_t)a1);
        if (IsRegisteredForDownload) {
          goto LABEL_97;
        }
        uint64_t v55 = *(void *)(DerivedStorage + 288);
        if (v55)
        {
          uint64_t v56 = *(void *)(DerivedStorage + 456);
          if (v56)
          {
            uint64_t IsRegisteredForDownload = FigStreamingCacheTransferData(v55, v56);
            if (IsRegisteredForDownload) {
              goto LABEL_97;
            }
          }
        }
        uint64_t v54 = (uint64_t *)(DerivedStorage + 456);
      }
      uint64_t v57 = *v54;
      uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(*(void *)(DerivedStorage + 408));
      uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t v61 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v60 + 56);
      if (!v61)
      {
LABEL_91:
        uint64_t v33 = 4294954514;
        goto LABEL_92;
      }
      uint64_t IsRegisteredForDownload = v61(CMBaseObject, @"AssetDownloaderProperty_StreamingCache", v57);
      if (!IsRegisteredForDownload)
      {
        uint64_t v62 = *(void *)(DerivedStorage + 408);
        uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v63) {
          uint64_t v64 = v63;
        }
        else {
          uint64_t v64 = 0;
        }
        uint64_t v65 = *(uint64_t (**)(uint64_t))(v64 + 8);
        if (v65)
        {
          uint64_t v66 = v65(v62);
          goto LABEL_89;
        }
        goto LABEL_91;
      }
LABEL_97:
      uint64_t v33 = IsRegisteredForDownload;
      goto LABEL_92;
    }
    uint64_t v10 = v9;
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v11 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeRef v13 = Mutable;
    if (Mutable)
    {
      uint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      if (*(unsigned char *)(v11 + 178)) {
        CFDictionarySetValue(Mutable, @"AssetDownloaderCreateOption_DisallowsExpensiveNetworkAccess", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      if (*(unsigned char *)(v11 + 179)) {
        CFDictionarySetValue(v13, @"AssetDownloaderCreateOption_DisallowsConstrainedNetworkAccess", *v14);
      }
      uint64_t v15 = *(const void **)(v11 + 32);
      if (v15) {
        CFDictionarySetValue(v13, @"AssetDownloaderCreateOption_DebugIdentifier", v15);
      }
      if (*(unsigned char *)(v11 + 417)) {
        CFDictionarySetValue(v13, @"AssetDownloaderCreateOption_DownloadsInterstitialAssets", *v14);
      }
    }
    else
    {
      uint64_t IsRegisteredForDownload = FigSignalErrorAt();
      if (IsRegisteredForDownload) {
        goto LABEL_97;
      }
    }
    uint64_t v16 = FigStreamingAssetMetadataDownloaderCreate((const void *)*MEMORY[0x1E4F1CF80], *(const void **)(v10 + 16), v13, *(void *)(v10 + 56), (uint64_t)a1, *(NSObject **)v10, v69, (void *)(v10 + 408));
    if (v16) {
      goto LABEL_64;
    }
    if (dword_1E9350CD8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v18 = *(void *)(v10 + 360);
    uint64_t v19 = FigAssetDownloaderGetCMBaseObject(*(void *)(v10 + 408));
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v21 + 56);
    if (!v22) {
      goto LABEL_71;
    }
    uint64_t v16 = v22(v19, @"AssetDownloaderProperty_ProgressMonitor", v18);
    if (v16)
    {
LABEL_64:
      uint64_t v33 = v16;
      goto LABEL_65;
    }
    if (!*(void *)(v10 + 384)) {
      goto LABEL_55;
    }
    uint64_t v23 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v23 + 416)) {
      goto LABEL_55;
    }
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)(v23 + 384);
    v70[0] = 0;
    uint64_t v26 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForPrimary(v25, v70);
    if (v26)
    {
      uint64_t v33 = v26;
    }
    else
    {
      if (!v70[0])
      {
LABEL_39:
        uint64_t v34 = *(void *)(v24 + 384);
        v70[0] = 0;
        uint64_t v35 = FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForAux(v34, v70);
        if (v35)
        {
          uint64_t v33 = v35;
          goto LABEL_52;
        }
        if (v70[0])
        {
          CFIndex Count = CFArrayGetCount(v70[0]);
          if (Count < 1)
          {
            uint64_t v33 = 0;
          }
          else
          {
            CFIndex v37 = Count;
            uint64_t v67 = v13;
            uint64_t v68 = DerivedStorage;
            CFIndex v38 = 0;
            while (1)
            {
              CFArrayRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v70[0], v38);
              CFArrayRef AuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetAuxConfigs(v34, ValueAtIndex);
              if (AuxConfigs)
              {
                CFArrayRef v41 = AuxConfigs;
                CFIndex v42 = CFArrayGetCount(AuxConfigs);
                if (v42 >= 1) {
                  break;
                }
              }
LABEL_48:
              if (++v38 == v37)
              {
                uint64_t v33 = 0;
                CFTypeRef v13 = v67;
                uint64_t DerivedStorage = v68;
                goto LABEL_52;
              }
            }
            CFIndex v43 = v42;
            CFIndex v44 = 0;
            while (1)
            {
              CFMutableArrayRef v45 = CFArrayGetValueAtIndex(v41, v44);
              uint64_t v46 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, (uint64_t)v45);
              if (v46) {
                break;
              }
              if (v43 == ++v44) {
                goto LABEL_48;
              }
            }
            uint64_t v33 = v46;
            CFTypeRef v13 = v67;
            uint64_t DerivedStorage = v68;
          }
LABEL_52:
          if (v70[0]) {
            CFRelease(v70[0]);
          }
          if (!v33) {
            goto LABEL_55;
          }
LABEL_65:
          if (!v13) {
            goto LABEL_67;
          }
          goto LABEL_66;
        }
LABEL_55:
        uint64_t v47 = (void *)(v10 + 336);
        while (1)
        {
          uint64_t v47 = (void *)*v47;
          uint64_t v48 = *(void *)(v10 + 408);
          if (!v47) {
            break;
          }
          uint64_t v16 = FigStreamingAssetMetadataDownloaderConfigureMediaSelectionsForAlternate(v48, v47[2], v47[3]);
          if (v16) {
            goto LABEL_64;
          }
        }
        uint64_t v49 = *(void *)(v10 + 576);
        uint64_t v50 = FigAssetDownloaderGetCMBaseObject(v48);
        uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v51) {
          uint64_t v52 = v51;
        }
        else {
          uint64_t v52 = 0;
        }
        CFDictionaryRef v53 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v52 + 56);
        if (v53)
        {
          uint64_t v16 = v53(v50, @"AssetDownloaderProperty_ReportingAgent", v49);
          goto LABEL_64;
        }
LABEL_71:
        uint64_t v33 = 4294954514;
        if (!v13)
        {
LABEL_67:
          if (v33)
          {
LABEL_92:
            dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
            goto LABEL_93;
          }
          goto LABEL_68;
        }
LABEL_66:
        CFRelease(v13);
        goto LABEL_67;
      }
      CFIndex v27 = CFArrayGetCount(v70[0]);
      if (v27 < 1)
      {
        uint64_t v33 = 0;
      }
      else
      {
        CFIndex v28 = v27;
        CFIndex v29 = 0;
        while (1)
        {
          uint64_t v30 = (__CFString *)CFArrayGetValueAtIndex(v70[0], v29);
          uint64_t PrimaryContentConfig = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(v25, v30);
          uint64_t v32 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, PrimaryContentConfig);
          if (v32) {
            break;
          }
          if (v28 == ++v29)
          {
            uint64_t v33 = 0;
            goto LABEL_36;
          }
        }
        uint64_t v33 = v32;
      }
    }
LABEL_36:
    if (v70[0]) {
      CFRelease(v70[0]);
    }
    if (v33) {
      goto LABEL_65;
    }
    goto LABEL_39;
  }

  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrNotLoadingMetadataOrPausedForInteractivePlayback();
}

uint64_t dworch_downloadMetadata_downloadSuccededCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void dworch_downloadMetadata_downloadFailedCallback(const void *a1, uint64_t a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_transitionToTerminalState(a1, a3);
}

void dworch_downloadMetadata_didFinishLoadingMetadata(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    uint64_t v6 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E004051F7C51CuLL);
    if (v6)
    {
      CFTypeID v7 = v6;
      if (a1) {
        CFTypeRef v8 = CFRetain(a1);
      }
      else {
        CFTypeRef v8 = 0;
      }
      *CFTypeID v7 = v8;
      v7[1] = v5;
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 280), v7, (dispatch_function_t)dworch_sendDidFinishLoadingMetadataOnCallbackQueue);
    }
    else if (FigSignalErrorAt())
    {
      CFRelease(v5);
    }
  }
}

void dworch_downloadMetadata_didFinishLoadingPlaylistsCallback(const void *a1, uint64_t a2)
{
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  uint64_t v5 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  if (dword_1E9350CD8)
  {
    LODWORD(v86) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 529) && *(void *)(CMBaseObjectGetDerivedStorage() + 544))
  {
    if (!*(void *)(DerivedStorage + 456))
    {
LABEL_137:
      uint64_t v7 = FigSignalErrorAt();
      goto LABEL_29;
    }
    uint64_t v7 = dworch_ensureTemporaryMetadataOnlyStreamingCache((uint64_t)a1);
    if (v7) {
      goto LABEL_29;
    }
    uint64_t v7 = FigStreamingCacheTransferData(*(void *)(DerivedStorage + 456), *(void *)(DerivedStorage + 288));
    if (v7) {
      goto LABEL_29;
    }
  }
  if (!*(void *)(DerivedStorage + 288)) {
    goto LABEL_137;
  }
  if (!*(unsigned char *)(DerivedStorage + 417)) {
    goto LABEL_28;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(a2);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFMutableArrayRef v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v11 + 48);
  if (v12) {
    int v13 = v12(CMBaseObject, @"AssetDownloaderProperty_InterstitialEvents", AllocatorForMedia, &theArray);
  }
  else {
    int v13 = -12782;
  }
  if (dword_1E9350CD8)
  {
    LODWORD(v86) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v15 = v86;
    if (os_log_type_enabled(v14, type[0])) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (v16)
    {
      uint64_t v17 = *(void *)(DerivedStorage + 32);
      CFArrayRef v18 = theArray;
      if (theArray) {
        int Count = CFArrayGetCount(theArray);
      }
      else {
        int Count = 0;
      }
      *(_DWORD *)CFMutableArrayRef cf = 136316418;
      *(void *)&cf[4] = "dworch_downloadMetadata_didFinishLoadingPlaylistsCallback";
      __int16 v88 = 2048;
      CFIndex v89 = a1;
      __int16 v90 = 2114;
      uint64_t v91 = v17;
      __int16 v92 = 2048;
      *(void *)uint64_t v93 = v18;
      *(_WORD *)&v93[8] = 1024;
      *(_DWORD *)&v93[10] = Count;
      __int16 v94 = 1024;
      int v95 = v13;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v13 || !theArray || CFArrayGetCount(theArray) < 1)
  {
LABEL_28:
    uint64_t v7 = dworch_downloadMetadata_stageComplete((uint64_t)a1);
LABEL_29:
    uint64_t v20 = v7;
    goto LABEL_30;
  }
  CFArrayRef v21 = theArray;
  uint64_t v22 = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  value[0] = 0;
  *(void *)CFMutableArrayRef cf = 0;
  CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFMutableDictionaryRef v77 = 0;
    CFIndex v38 = 0;
    goto LABEL_122;
  }
  CFMutableDictionaryRef v26 = Mutable;
  CFAllocatorRef v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v27, 0, *(CFDictionaryRef *)(v23 + 64));
  if (!MutableCopy)
  {
    CFIndex v37 = 0;
    CFMutableDictionaryRef v77 = 0;
    CFIndex v38 = 0;
LABEL_56:
    CFRelease(v26);
    if (!*(void *)cf) {
      goto LABEL_120;
    }
    CFRelease(*(CFTypeRef *)cf);
    if (v37) {
      goto LABEL_121;
    }
    goto LABEL_122;
  }
  CFIndex v29 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, @"AssetDownloaderCreateOption_DownloadsInterstitialAssets");
  if (*(void *)(v23 + 56))
  {
    CFAllocatorRef v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
    if (FigStreamingAssetDownloadConfigCreateCopy(v30, *(void *)(v23 + 56), (uint64_t *)cf))
    {
LABEL_54:
      CFIndex v37 = 0;
      CFMutableDictionaryRef v77 = 0;
      CFIndex v38 = 0;
      goto LABEL_55;
    }
    if (*(void *)cf) {
      FigStreamingAssetDownloadConfigSetDownloadsInterstitialAssets(*(uint64_t *)cf, 0);
    }
  }
  uint64_t v31 = FigAssetGetCMBaseObject(*(void *)(v23 + 16));
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = *(uint64_t (**)(uint64_t, __CFString *))(v33 + 48);
  if (!v34) {
    goto LABEL_54;
  }
  uint64_t v78 = (const void *)*MEMORY[0x1E4F1CF80];
  int v35 = v34(v31, @"assetProperty_CustomURLLoader");
  uint64_t v36 = value[0];
  if (v35)
  {
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    CFMutableDictionaryRef v77 = 0;
    if (!value[0]) {
      goto LABEL_52;
    }
  }
  else
  {
    if (value[0])
    {
      CFDictionarySetValue(v26, @"assetOption_CustomURLLoader", value[0]);
      uint64_t v36 = value[0];
    }
    uint64_t v79 = v29;
    uint64_t v80 = *(const void **)cf;
    CFMutableDictionaryRef v77 = v26;
    if (!v36) {
      goto LABEL_52;
    }
  }
  CFRelease(v36);
LABEL_52:
  if (v35)
  {
    CFIndex v38 = v79;
    CFIndex v37 = v80;
LABEL_55:
    CFRelease(v29);
    goto LABEL_56;
  }
  CFArrayRef v74 = v21;
  if (dword_1E9350CD8)
  {
    LODWORD(v86) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v40 = v86;
    if (os_log_type_enabled(v39, type[0])) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (v41)
    {
      int v42 = (int)v21;
      uint64_t v43 = *(void *)(v22 + 32);
      if (v21) {
        int v42 = CFArrayGetCount(v21);
      }
      *(_DWORD *)CFMutableArrayRef cf = 136315906;
      *(void *)&cf[4] = "dworch_createDownloadOrchestratorsForInterstitialEvents";
      __int16 v88 = 2048;
      CFIndex v89 = a1;
      __int16 v90 = 2114;
      uint64_t v91 = v43;
      __int16 v92 = 1024;
      *(_DWORD *)uint64_t v93 = v42;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFIndex v44 = 0;
  uint64_t v75 = DerivedStorage;
  do
  {
    if (v21) {
      CFIndex v45 = CFArrayGetCount(v21);
    }
    else {
      CFIndex v45 = 0;
    }
    CFMutableDictionaryRef v46 = v77;
    if (v44 >= v45)
    {
      uint64_t DerivedStorage = v75;
      break;
    }
    uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
    uint64_t v48 = CMBaseObjectGetDerivedStorage();
    *(void *)os_log_type_t type = 0;
    CFTypeRef v86 = 0;
    CFTypeRef v84 = 0;
    uint64_t v49 = FigPlayerInterstitialEventCopyInterstitialAssetURLs(ValueAtIndex);
    CFArrayRef v50 = (const __CFArray *)v49;
    CFIndex v76 = v44;
    if (v49) {
      CFIndex v51 = CFArrayGetCount((CFArrayRef)v49);
    }
    else {
      CFIndex v51 = 0;
    }
    if (dword_1E9350CD8)
    {
      unsigned int v83 = 0;
      os_log_type_t v82 = OS_LOG_TYPE_DEFAULT;
      uint64_t v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v53 = v83;
      if (os_log_type_enabled(v52, v82)) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = v53 & 0xFFFFFFFE;
      }
      if (v54)
      {
        uint64_t v55 = *(void *)(v48 + 32);
        *(_DWORD *)CFMutableArrayRef cf = 136316162;
        *(void *)&cf[4] = "dworch_createDownloadOrchestratorForInterstitialEvent";
        __int16 v88 = 2048;
        CFIndex v89 = a1;
        __int16 v90 = 2114;
        uint64_t v91 = v55;
        __int16 v92 = 1024;
        *(_DWORD *)uint64_t v93 = v51;
        *(_WORD *)&v93[4] = 2048;
        *(void *)&v93[6] = ValueAtIndex;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v51 < 1)
    {
      int v56 = 0;
      goto LABEL_108;
    }
    int v56 = 0;
    CFIndex v57 = 0;
    while (1)
    {
      CFURLRef v58 = (const __CFURL *)CFArrayGetValueAtIndex(v50, v57);
      CFTypeRef v59 = FigCFHTTPCreateURLString(v58);
      if (!CFSetContainsValue(*(CFSetRef *)(v48 + 432), v59)) {
        break;
      }
LABEL_103:
      if (v59) {
        CFRelease(v59);
      }
      if (v51 == ++v57) {
        goto LABEL_108;
      }
    }
    int v60 = FigStreamingCacheAddInterstitialAsset(*(void *)(v48 + 456), (uint64_t)v59, &v84);
    if (!v60)
    {
      uint64_t v61 = FigGetAllocatorForMedia();
      int v60 = FigAssetCreateWithURL(v61, (uint64_t)v58, 0, v46, &v86);
      if (!v60)
      {
        int v56 = FigStreamingAssetDownloadOrchestratorCreate(v78, v86, v84, *(const void **)(v48 + 40), *(const void **)(v48 + 48), v79, v80, (uint64_t)a1, *(dispatch_object_t *)v48, dworch_createDownloadOrchestratorForInterstitialEvent_kStreamingAssetDownloadOrchestratorInterstititialCallbacks, type);
        if (!v56)
        {
          if (dword_1E9350CD8)
          {
            unsigned int v83 = 0;
            os_log_type_t v82 = OS_LOG_TYPE_DEFAULT;
            uint64_t v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v63 = v83;
            if (os_log_type_enabled(v62, v82)) {
              unsigned int v64 = v63;
            }
            else {
              unsigned int v64 = v63 & 0xFFFFFFFE;
            }
            if (v64)
            {
              uint64_t v65 = *(void *)(v48 + 32);
              *(_DWORD *)CFMutableArrayRef cf = 136315906;
              *(void *)&cf[4] = "dworch_createDownloadOrchestratorForInterstitialEvent";
              __int16 v88 = 2048;
              CFIndex v89 = a1;
              __int16 v90 = 2114;
              uint64_t v91 = v65;
              __int16 v92 = 2048;
              *(void *)uint64_t v93 = *(void *)type;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFMutableDictionaryRef v46 = v77;
          }
          CFSetAddValue(*(CFMutableSetRef *)(v48 + 432), v59);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v48 + 440), *(const void **)type);
        }
        if (*(void *)type)
        {
          CFRelease(*(CFTypeRef *)type);
          *(void *)os_log_type_t type = 0;
        }
        if (v84)
        {
          CFRelease(v84);
          CFTypeRef v84 = 0;
        }
        if (v86)
        {
          CFRelease(v86);
          CFTypeRef v86 = 0;
        }
        goto LABEL_103;
      }
    }
    int v56 = v60;
    if (v59) {
      CFRelease(v59);
    }
LABEL_108:
    if (v50) {
      CFRelease(v50);
    }
    CFArrayRef v21 = v74;
    uint64_t DerivedStorage = v75;
    if (v84) {
      CFRelease(v84);
    }
    uint64_t v5 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    if (v86) {
      CFRelease(v86);
    }
    CFIndex v44 = v76 + 1;
  }
  while (!v56);
  CFIndex v38 = v79;
  CFIndex v37 = v80;
LABEL_120:
  if (v37) {
LABEL_121:
  }
    CFRelease(v37);
LABEL_122:
  if (v38) {
    CFRelease(v38);
  }
  if (v77) {
    CFRelease(v77);
  }
  CFIndex v66 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 440));
  if (*((_DWORD *)v5 + 822))
  {
    LODWORD(v86) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v68 = v86;
    if (os_log_type_enabled(v67, type[0])) {
      unsigned int v69 = v68;
    }
    else {
      unsigned int v69 = v68 & 0xFFFFFFFE;
    }
    if (v69)
    {
      uint64_t v70 = *(void *)(DerivedStorage + 32);
      *(_DWORD *)CFMutableArrayRef cf = 136315906;
      *(void *)&cf[4] = "dworch_downloadMetadata_didFinishLoadingPlaylistsCallback";
      __int16 v88 = 2048;
      CFIndex v89 = a1;
      __int16 v90 = 2114;
      uint64_t v91 = v70;
      __int16 v92 = 1024;
      *(_DWORD *)uint64_t v93 = v66;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v66 >= 1)
  {
    for (CFIndex i = 0; i != v66; ++i)
    {
      uint64_t v72 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 440), i);
      long long v73 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      value[0] = v72;
      value[1] = 0;
      dispatch_sync_f(*v73, value, (dispatch_function_t)dworch_loadMetadataDispatch);
    }
  }
  uint64_t v20 = 0;
LABEL_30:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v20) {
    dworch_transitionToTerminalStateWithOSStatus(a1, v20);
  }
}

void dworch_sendDidFinishLoadingMetadataOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
  }
  else
  {
    CFMutableArrayRef v3 = *(void (**)(void, void))(DerivedStorage + 248);
    if (v3) {
      v3(a1[1], *a1);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

uint64_t dworch_loadMetadata(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_loadMetadataDispatch);
  return v5;
}

uint64_t dworch_downloadMetadata_stageComplete(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(DerivedStorage + 456)) {
    unsigned int v4 = 3;
  }
  else {
    unsigned int v4 = 2;
  }
  return dworch_changeStageOnQueue(a1, v4);
}

void dworch_interstitialDownloadSuccessCallback(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigCFArrayGetValueAtIndex() == a2)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 440), 0);
    uint64_t v6 = dworch_downloadMedia_checkIfStageComplete(a1);
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  if (v6) {
    dworch_transitionToTerminalStateWithOSStatus(a1, v6);
  }
}

void dworch_interstitialDownloadFailureCallback(const void *a1, uint64_t a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dworch_transitionToTerminalState(a1, a3);
}

void dworch_interstitialDidFinishLoadingMetadata(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 440);
  uint64_t v5 = *(void *)(DerivedStorage + 448) + 1;
  *(void *)(DerivedStorage + 448) = v5;
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if (v5 >= (uint64_t)Count)
  {
    uint64_t v6 = dworch_downloadMetadata_stageComplete((uint64_t)a1);
    if (v6) {
      dworch_transitionToTerminalStateWithOSStatus(a1, v6);
    }
  }
}

void dworch_loadMetadataDispatch(uint64_t a1)
{
  CFMutableArrayRef v2 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated() || *(_DWORD *)(DerivedStorage + 524) >= 3u)
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  else
  {
    if (*(unsigned char *)(DerivedStorage + 528)
      || (*(unsigned char *)(DerivedStorage + 528) = 1,
          (uint64_t v5 = kDownloadOrchestratorStage_JumpTable[6 * *(unsigned int *)(DerivedStorage + 532)]) == 0))
    {
      int v7 = 0;
      goto LABEL_11;
    }
    uint64_t v6 = ((uint64_t (*)(const void *))v5)(v2);
  }
  int v7 = v6;
  if (v6) {
    dworch_transitionToTerminalStateWithOSStatus(*(const void **)a1, v6);
  }
LABEL_11:
  *(_DWORD *)(a1 + 8) = v7;
}

uint64_t dworch_setupDownloadItemsForContentConfig(uint64_t a1, uint64_t a2)
{
  uint64_t Alternate = FigStreamingAssetDownloadContentConfigGetAlternate(a2);
  if (Alternate
    && (uint64_t v5 = (const void *)Alternate,
        (CFArrayRef MediaSelections = (const __CFArray *)FigStreamingAssetDownloadContentConfigGetMediaSelections(a2)) != 0))
  {
    return dworch_setupDownloadItemsAndProgressMonitorForAlternate(a1, v5, MediaSelections);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void dworch_persistMetadata_gotAccessToDestinationURLCallback(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeID v7 = CFGetTypeID(a1);
  if (v7 != FigAssetDownloaderGetTypeID()
    || (*(void *)(DerivedStorage + 544) = a3,
        CMBaseObjectGetDerivedStorage(),
        FigRetainProxyIsInvalidated())
    || !a2)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (*(_DWORD *)(DerivedStorage + 524) == 1 || *(unsigned char *)(DerivedStorage + 528))
  {
    uint64_t IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
    if (IsRegisteredForDownload) {
      goto LABEL_19;
    }
    if (!*(unsigned char *)(DerivedStorage + 529))
    {
      uint64_t IsRegisteredForDownload = dworch_ensurePersistentStreamingCache((uint64_t)a1);
      if (!IsRegisteredForDownload)
      {
        uint64_t IsRegisteredForDownload = (uint64_t)dworch_ensureExtendedAttributesSetOnDestinationURL();
        if (!IsRegisteredForDownload)
        {
          uint64_t v9 = *(void *)(DerivedStorage + 288);
          if (!v9
            || (uint64_t v10 = *(void *)(DerivedStorage + 456)) == 0
            || (uint64_t IsRegisteredForDownload = FigStreamingCacheTransferData(v9, v10), !IsRegisteredForDownload))
          {
            CMBaseObjectGetDerivedStorage();
            if (dword_1E9350CD8)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v12 = dworch_changeStageOnQueue((uint64_t)a1, 3u);
LABEL_16:
            uint64_t v13 = v12;
            dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
            if (!v13) {
              return;
            }
            goto LABEL_17;
          }
        }
      }
LABEL_19:
      uint64_t v13 = IsRegisteredForDownload;
      dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
LABEL_17:
      dworch_transitionToTerminalStateWithOSStatus(a1, v13);
      return;
    }
  }

  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
}

const void *dworch_ensureExtendedAttributesSetOnDestinationURL()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = *(void *)(DerivedStorage + 80);
  if (v2)
  {
    uint64_t result = (const void *)FigSetNameForAssetAtURL(*(const __CFURL **)(DerivedStorage + 24), v2);
    if (result) {
      return result;
    }
    unsigned int v4 = *(const void **)(v1 + 80);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v1 + 80) = 0;
    }
  }
  CFDataRef v5 = *(const __CFData **)(v1 + 88);
  if (v5)
  {
    uint64_t result = (const void *)FigSetImageDataForAssetAtURL(*(const __CFURL **)(v1 + 24), v5);
    if (result) {
      return result;
    }
    uint64_t v6 = *(const void **)(v1 + 88);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v1 + 88) = 0;
    }
  }
  CFTypeID v7 = *(const void **)(v1 + 72);
  if (!v7 || !*(void *)(v1 + 536)) {
    return 0;
  }
  FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(*(const __CFURL **)(v1 + 24), v7, @"CacheManagementContentType_DownloadedAsset");
  FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(*(const __CFURL **)(v1 + 24), *(const void **)(v1 + 72), *(void *)(v1 + 536));
  uint64_t result = *(const void **)(v1 + 536);
  if (result)
  {
    CFRelease(result);
    uint64_t result = 0;
    *(void *)(v1 + 536) = 0;
  }
  return result;
}

uint64_t dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 524) != 1 && !*(unsigned char *)(result + 529))
  {
    dworch_releaseDiskResources();
    return dworch_relinquishAccessToDestinationURL();
  }
  return result;
}

void dworch_downloadMedia_gotAccessToDestinationURLCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == FigAssetDownloaderGetTypeID())
  {
    *(void *)(DerivedStorage + 544) = a3;
    CMBaseObjectGetDerivedStorage();
    if (!FigRetainProxyIsInvalidated())
    {
      if (*(_DWORD *)(DerivedStorage + 524) != 1)
      {
LABEL_44:
        dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
        return;
      }
      uint64_t IsRegisteredForDownload = (uint64_t)dworch_ensureExtendedAttributesSetOnDestinationURL();
      if (IsRegisteredForDownload) {
        goto LABEL_40;
      }
      uint64_t IsRegisteredForDownload = dworch_ensureAssetIsRegisteredForDownload((uint64_t)a1);
      if (IsRegisteredForDownload) {
        goto LABEL_40;
      }
      if (!*(unsigned char *)(DerivedStorage + 312))
      {
        if (*(void *)(DerivedStorage + 384))
        {
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          if (!*(unsigned char *)(v8 + 520))
          {
            uint64_t v9 = (void *)v8;
            CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            if (Mutable)
            {
              uint64_t v11 = Mutable;
              if (dword_1E9350CD8)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v13 = (void *)v9[42];
              if (v13)
              {
                uint64_t v14 = (void *)*v13;
                if (*v13)
                {
                  do
                  {
                    unsigned int v15 = v14;
                    v14[1] = v13[1];
                    *(void *)v13[1] = v14;
                    dworch_freeAlternateAndRenditionItem(v13);
                    uint64_t v14 = (void *)*v15;
                    uint64_t v13 = v15;
                  }
                  while (*v15);
                }
                else
                {
                  unsigned int v15 = (void *)v9[42];
                }
                unsigned int v16 = (void *)v15[1];
                v9[43] = v16;
                *unsigned int v16 = 0;
                dworch_freeAlternateAndRenditionItem(v15);
              }
              uint64_t v17 = v9[48];
              uint64_t PrimaryContentConfig = FigStreamingAssetDownloadConfigGetPrimaryContentConfig(v17, @"kFigEnvironmentalCondition_DefaultKey");
              if (PrimaryContentConfig
                || (uint64_t PrimaryContentConfig = FigStreamingAssetDownloadConfigGetDefaultPrimaryContentConfig(v17)) != 0)
              {
                uint64_t v19 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, PrimaryContentConfig);
                if (v19) {
                  goto LABEL_50;
                }
                uint64_t Alternate = (const void *)FigStreamingAssetDownloadContentConfigGetAlternate(PrimaryContentConfig);
                if (Alternate) {
                  CFArrayAppendValue(v11, Alternate);
                }
              }
              else
              {
                uint64_t v19 = FigSignalErrorAt();
                if (v19) {
                  goto LABEL_50;
                }
              }
              uint64_t v21 = v9[48];
              CFArrayRef AuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetAuxConfigs(v21, @"kFigEnvironmentalCondition_DefaultKey");
              if ((!AuxConfigs || (DefaultCFArrayRef AuxConfigs = AuxConfigs, !CFArrayGetCount(AuxConfigs)))
                && (DefaultCFArrayRef AuxConfigs = (const __CFArray *)FigStreamingAssetDownloadConfigGetDefaultAuxConfigs(v21)) == 0
                || (CFIndex Count = CFArrayGetCount(DefaultAuxConfigs), Count < 1))
              {
LABEL_32:
                v9[61] = v9[42];
                dworch_sendWillDownloadAlternatesCallback(a1, v11);
                uint64_t v29 = 0;
                goto LABEL_33;
              }
              CFIndex v25 = Count;
              CFIndex v26 = 0;
              while (1)
              {
                uint64_t ValueAtIndex = CFArrayGetValueAtIndex(DefaultAuxConfigs, v26);
                uint64_t v19 = dworch_setupDownloadItemsForContentConfig((uint64_t)a1, (uint64_t)ValueAtIndex);
                if (v19) {
                  break;
                }
                CFIndex v28 = (const void *)FigStreamingAssetDownloadContentConfigGetAlternate((uint64_t)ValueAtIndex);
                if (v28) {
                  CFArrayAppendValue(v11, v28);
                }
                if (v25 == ++v26) {
                  goto LABEL_32;
                }
              }
LABEL_50:
              uint64_t v29 = v19;
LABEL_33:
              CFRelease(v11);
              if (v29)
              {
LABEL_41:
                dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
LABEL_42:
                dworch_transitionToTerminalStateWithOSStatus(a1, v29);
                return;
              }
              goto LABEL_34;
            }
            uint64_t v29 = FigSignalErrorAt();
            if (v29) {
              goto LABEL_41;
            }
          }
        }
      }
LABEL_34:
      uint64_t IsRegisteredForDownload = dworch_downloadMedia_startNextMediaSelectionDownload((uint64_t)a1);
      if (!IsRegisteredForDownload)
      {
        CFIndex v30 = 0;
        while (1)
        {
          CFArrayRef v31 = *(const __CFArray **)(DerivedStorage + 464);
          if (v31) {
            CFArrayRef v31 = (const __CFArray *)CFArrayGetCount(v31);
          }
          if (v30 >= (uint64_t)v31) {
            break;
          }
          uint64_t v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), v30);
          uint64_t IsRegisteredForDownload = dworch_downloadMedia_matchMediaDownloaderToOrchestratorStatus((uint64_t)a1, (uint64_t)v32);
          ++v30;
          if (IsRegisteredForDownload) {
            goto LABEL_40;
          }
        }
        dworch_updateAlternateInfoForReporting();
        dworch_updateMediaSelectionsReportingKeys();
        goto LABEL_44;
      }
LABEL_40:
      uint64_t v29 = IsRegisteredForDownload;
      goto LABEL_41;
    }
  }
  uint64_t v29 = FigSignalErrorAt();
  dworch_relinquishAccessToDestinationURLIfNotDownloadingOrPausedForInteractivePlayback();
  if (v29) {
    goto LABEL_42;
  }
}

uint64_t dworch_downloadMedia_matchMediaDownloaderToOrchestratorStatus(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 529))
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFTypeID v6 = *(uint64_t (**)(uint64_t))(v5 + 32);
    if (!v6) {
      return 4294954514;
    }
    uint64_t result = v6(a2);
    if (result) {
      return result;
    }
  }
  int v8 = *(_DWORD *)(DerivedStorage + 524);
  if (v8 != 5)
  {
    if (v8 == 2)
    {
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t))(v14 + 16);
      if (v17)
      {
        uint64_t result = v17(a2);
        if (result) {
          return result;
        }
        goto LABEL_27;
      }
    }
    else
    {
      if (v8 != 1) {
        goto LABEL_27;
      }
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      unsigned int v15 = *(uint64_t (**)(uint64_t))(v10 + 8);
      if (v15)
      {
        uint64_t result = v15(a2);
        if (result) {
          return result;
        }
        goto LABEL_27;
      }
    }
    return 4294954514;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v16 = *(uint64_t (**)(uint64_t))(v12 + 24);
  if (!v16) {
    return 4294954514;
  }
  uint64_t result = v16(a2);
  if (result) {
    return result;
  }
LABEL_27:
  if (*(unsigned char *)(DerivedStorage + 529)) {
    return 0;
  }
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v19 + 40);
  if (!v20) {
    return 4294954514;
  }

  return v20(a2);
}

uint64_t dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 400)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFNumberRef v5 = v4;
  uint64_t v6 = *(void *)(v3 + 400);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v8 + 56);
  if (v9) {
    uint64_t v10 = v9(v6, @"AlternateFilterMonitorProperty_LastTimestampClientDidPause", v5);
  }
  else {
    uint64_t v10 = 4294954514;
  }
  CFRelease(v5);
  return v10;
}

const void *dworch_copyPropertyDispatch(uint64_t a1)
{
  uint64_t v12 = 0;
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_19;
  }
  if (CFEqual(@"AssetDownloaderProperty_Status", v2))
  {
    uint64_t result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(DerivedStorage + 524));
    if (result)
    {
LABEL_4:
      int v5 = 0;
      goto LABEL_5;
    }
LABEL_19:
    int v5 = FigSignalErrorAt();
    uint64_t result = 0;
    goto LABEL_5;
  }
  if (!CFEqual(@"AssetDownloaderProperty_DownloadedBytes", v2))
  {
    if (!CFEqual(@"AssetDownloaderProperty_HasAccessToDestinationURL", v2))
    {
      uint64_t result = 0;
      int v5 = -12784;
      goto LABEL_5;
    }
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    uint64_t v10 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(void *)(v9 + 544)) {
      uint64_t v10 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    uint64_t result = *v10;
    if (*v10) {
      uint64_t result = CFRetain(result);
    }
    goto LABEL_4;
  }
  uint64_t CMBaseObject = FigAssetDownloaderGetCMBaseObject(*(void *)(DerivedStorage + 360));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v8 + 48);
  if (v11)
  {
    int v5 = v11(CMBaseObject, @"AssetDownloaderProperty_DownloadedBytes", *MEMORY[0x1E4F1CF80], &v12);
    uint64_t result = v12;
  }
  else
  {
    uint64_t result = 0;
    int v5 = -12782;
  }
LABEL_5:
  *(_DWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t dworch_pause(const void *a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
  if (v3)
  {
    CFNumberRef v4 = v3;
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *CFNumberRef v4 = v5;
    dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)dworch_pauseDispatch);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dworch_stop(const void *a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
  if (v3)
  {
    CFNumberRef v4 = v3;
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *CFNumberRef v4 = v5;
    dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)dworch_stopDispatch);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dworch_pauseForPlayback(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_pauseForPlaybackDispatch);
  return v5;
}

uint64_t dworch_resumeAfterPlayback(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  dispatch_sync_f(*DerivedStorage, &v4, (dispatch_function_t)dworch_resumeAfterPlaybackDispatch);
  return v5;
}

void dworch_pauseDispatch(const void **a1)
{
  uint64_t v2 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t TimestampClientDidPauseOnContentSteeringMonitor = FigSignalErrorAt();
LABEL_9:
    uint64_t v9 = TimestampClientDidPauseOnContentSteeringMonitor;
    if (!TimestampClientDidPauseOnContentSteeringMonitor) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u) {
    goto LABEL_11;
  }
  *(_DWORD *)(DerivedStorage + 524) = 2;
  *(unsigned char *)(DerivedStorage + 529) = 0;
  unsigned int v5 = *(_DWORD *)(DerivedStorage + 532);
  if (v5 == 2
    || (uint64_t v6 = kDownloadOrchestratorStage_JumpTable[6 * v5 + 1]) == 0
    || (uint64_t v7 = ((uint64_t (*)(const void *))v6)(v2), !v7))
  {
    uint64_t TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x8000000000000000);
    goto LABEL_9;
  }
  uint64_t v9 = v7;
LABEL_10:
  dworch_transitionToTerminalStateWithOSStatus(*a1, v9);
LABEL_11:
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

void dworch_stopDispatch(const void **a1)
{
  uint64_t v2 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t TimestampClientDidPauseOnContentSteeringMonitor = FigSignalErrorAt();
LABEL_9:
    uint64_t v9 = TimestampClientDidPauseOnContentSteeringMonitor;
    if (!TimestampClientDidPauseOnContentSteeringMonitor) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u) {
    goto LABEL_11;
  }
  *(_DWORD *)(DerivedStorage + 524) = 5;
  *(unsigned char *)(DerivedStorage + 529) = 0;
  unsigned int v5 = *(_DWORD *)(DerivedStorage + 532);
  if (v5 == 2
    || (uint64_t v6 = kDownloadOrchestratorStage_JumpTable[6 * v5 + 2]) == 0
    || (uint64_t v7 = ((uint64_t (*)(const void *))v6)(v2), !v7))
  {
    uint64_t TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x8000000000000000);
    goto LABEL_9;
  }
  uint64_t v9 = v7;
LABEL_10:
  dworch_transitionToTerminalStateWithOSStatus(*a1, v9);
LABEL_11:
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

void dworch_pauseForPlaybackDispatch(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
LABEL_12:
    LODWORD(TimestampClientDidPauseOnContentSteeringMonitor) = 0;
    goto LABEL_10;
  }
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 524) > 2u) {
    goto LABEL_12;
  }
  *(unsigned char *)(DerivedStorage + 529) = 1;
  unsigned int v5 = *(_DWORD *)(DerivedStorage + 532);
  if (v5 != 2)
  {
    uint64_t v6 = kDownloadOrchestratorStage_JumpTable[6 * v5 + 3];
    if (v6)
    {
      uint64_t v7 = ((uint64_t (*)(const void *))v6)(v2);
      if (v7)
      {
        uint64_t TimestampClientDidPauseOnContentSteeringMonitor = v7;
        goto LABEL_9;
      }
    }
  }
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x8000000000000000);
  if (TimestampClientDidPauseOnContentSteeringMonitor) {
LABEL_9:
  }
    dworch_transitionToTerminalStateWithOSStatus(*(const void **)a1, TimestampClientDidPauseOnContentSteeringMonitor);
LABEL_10:
  *(_DWORD *)(a1 + 8) = TimestampClientDidPauseOnContentSteeringMonitor;
}

void dworch_resumeAfterPlaybackDispatch(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
  {
    FigSignalErrorAt();
    goto LABEL_14;
  }
  unsigned int v5 = *(_DWORD *)(DerivedStorage + 524);
  if (v5 > 2 || *(unsigned char *)(DerivedStorage + 529) != 1) {
    goto LABEL_14;
  }
  *(unsigned char *)(DerivedStorage + 529) = 0;
  unsigned int v6 = *(_DWORD *)(DerivedStorage + 532);
  if (v6)
  {
    uint64_t v7 = kDownloadOrchestratorStage_JumpTable[6 * v6 + 4];
    if (v7)
    {
      uint64_t v8 = ((uint64_t (*)(const void *))v7)(v2);
      if (v8)
      {
        uint64_t TimestampClientDidPauseOnContentSteeringMonitor = v8;
        goto LABEL_12;
      }
      unsigned int v5 = *(_DWORD *)(DerivedStorage + 524);
    }
  }
  if (v5 != 1)
  {
LABEL_14:
    LODWORD(TimestampClientDidPauseOnContentSteeringMonitor) = 0;
    goto LABEL_15;
  }
  uint64_t TimestampClientDidPauseOnContentSteeringMonitor = dworch_setLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)v2, 0x7FFFFFFFFFFFFFFFLL);
  if (TimestampClientDidPauseOnContentSteeringMonitor) {
LABEL_12:
  }
    dworch_transitionToTerminalStateWithOSStatus(*(const void **)a1, TimestampClientDidPauseOnContentSteeringMonitor);
LABEL_15:
  *(_DWORD *)(a1 + 8) = TimestampClientDidPauseOnContentSteeringMonitor;
}

CFStringRef dworch_copyNextTrimmedLogFromString(const __CFString *a1, CFIndex a2)
{
  CFIndex Length = CFStringGetLength(a1);
  unint64_t v5 = Length - a2;
  if (Length - a2 < 1) {
    return 0;
  }
  v12.locatioCFIndex n = 0;
  v12.length = 0;
  CFIndex v6 = Length - a2;
  if (v5 >= 0x385)
  {
    CFIndex v6 = 900;
    v13.locatioCFIndex n = a2;
    v13.length = 900;
    if (CFStringFindWithOptions(a1, @"\n", v13, 0, &v12))
    {
      CFIndex v7 = a2 + 900;
      do
      {
        locatioCFIndex n = v12.location;
        if (v7 <= v12.length + v12.location) {
          break;
        }
        v14.locatioCFIndex n = v12.length + v12.location;
        v14.length = v7 - (v12.length + v12.location);
      }
      while (CFStringFindWithOptions(a1, @"\n", v14, 0, &v12));
      if (location - a2 >= (uint64_t)v5) {
        CFIndex v9 = v5;
      }
      else {
        CFIndex v9 = location - a2;
      }
      if (location - a2 <= 0) {
        CFIndex v6 = v5;
      }
      else {
        CFIndex v6 = v9;
      }
    }
    if (v6 < 1) {
      return 0;
    }
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  v15.locatioCFIndex n = a2;
  v15.length = v6;
  return CFStringCreateWithSubstring(v10, a1, v15);
}

void dworch_logMediaSelectionArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v5 = DerivedStorage;
    CFIndex Count = CFArrayGetCount(a3);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a3, i);
        CFAllocatorRef v10 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v5 + 8), ValueAtIndex);
        if (dword_1E9350CD8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v10) {
          CFRelease(v10);
        }
      }
    }
  }
}

uint64_t FigSampleGeneratorDataSourceCacheCreate(uint64_t a1, void *a2)
{
  if (!a2) {
    goto LABEL_11;
  }
  if (FigSampleGeneratorDataSourceCacheGetTypeID_sRegisterFigSampleGeneratorDataSourceCacheTypeOnce != -1) {
    dispatch_once_f(&FigSampleGeneratorDataSourceCacheGetTypeID_sRegisterFigSampleGeneratorDataSourceCacheTypeOnce, &FigSampleGeneratorDataSourceCacheGetTypeID_sFigSampleGeneratorDataSourceCacheID, (dispatch_function_t)RegisterFigSampleGeneratorDataSourceCacheType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v4 = (void *)Instance;
    uint64_t v5 = FigReadWriteLockCreate();
    v4[2] = v5;
    if (v5
      && (CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v4[3] = Mutable) != 0)&& (CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v4[4] = v8) != 0)&& (v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v4[5] = v9) != 0))
    {
      *a2 = v4;
      return 0;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      CFRelease(v4);
      return v11;
    }
  }
  else
  {
LABEL_11:
    return FigSignalErrorAt();
  }
}

uint64_t FigSampleGeneratorCreateForTrackReaderUsingScheduledIO(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, CMTime *a6, char a7, void *a8)
{
  uint64_t v14 = 0;
  CMTime v13 = *a6;
  uint64_t v10 = figSampleGeneratorCreateForFormatReaderCommon(a1, 0, a2, 0, 1, a3, a5, &v13, a7, a4, &v14);
  uint64_t v11 = v10;
  if (a5 && !v10)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  *a8 = v14;
  return v11;
}

uint64_t FigSampleGeneratorCreateForFormatReaderUsingScheduledIO(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, CMTime *a6, char a7, void *a8)
{
  uint64_t v14 = 0;
  CMTime v13 = *a6;
  uint64_t v10 = figSampleGeneratorCreateForFormatReaderCommon(a1, a2, a3, 0, 1, a4, a5, &v13, a7, 0, &v14);
  uint64_t v11 = v10;
  if (a5 && !v10)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  *a8 = v14;
  return v11;
}

uint64_t FigSampleGeneratorCreateForFormatReaderUsingByteStreams(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, char a6, void *a7)
{
  return figSampleGeneratorCreateForFormatReaderCommon(a1, a2, a3, 0, 0, a4, a5, MEMORY[0x1E4F1FA48], a6, 0, a7);
}

uint64_t FigSampleGeneratorCreateForFormatReaderProducingByteReferenceSampleBuffers(const void *a1, const void *a2, const void *a3, uint64_t a4, char a5, void *a6)
{
  return figSampleGeneratorCreateForFormatReaderCommon(a1, a2, a3, 1, 0, 0, a4, MEMORY[0x1E4F1FA48], a5, 0, a6);
}

uint64_t RegisterFigSampleGeneratorDataSourceCacheType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double sampleGeneratorDataSourceCache_Init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void sampleGeneratorDataSourceCache_Finalize(void *a1)
{
  FigReadWriteLockDestroy();
  uint64_t v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
}

__CFString *sampleGeneratorDataSourceCache_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"FigSampleGeneratorDataSourceCache:  urlToByteStream: {%@}", *(void *)(a1 + 24));
  return Mutable;
}

__CFString *sgffr_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleGenerator %p>", a1);
  return Mutable;
}

uint64_t sgffr_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(@"SampleGeneratorPerformanceDictionary", a2)) {
    return 4294954512;
  }
  memset(&keys[1], 0, 24);
  memset(&values[1], 0, 24);
  FigReadWriteLockLockForRead();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v9 = *(void *)(DerivedStorage + 48);
    if (*(unsigned char *)(DerivedStorage + 32))
    {
      CFDictionaryRef v10 = *(const __CFDictionary **)(v9 + 40);
      if (!v10) {
        goto LABEL_10;
      }
      uint64_t v11 = (void (__cdecl *)(const void *, const void *, void *))sgffr_collectSchedIOReadStatistics;
    }
    else
    {
      CFDictionaryRef v10 = *(const __CFDictionary **)(v9 + 32);
      if (!v10) {
        goto LABEL_10;
      }
      uint64_t v11 = (void (__cdecl *)(const void *, const void *, void *))sgffr_collectByteStreamReadStatistics;
    }
    CFDictionaryApplyFunction(v10, v11, Mutable);
LABEL_10:
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      CFMutableArrayRef Mutable = 0;
    }
    goto LABEL_12;
  }
  FigSignalErrorAt();
LABEL_12:
  FigReadWriteLockUnlockForRead();
  if (Mutable)
  {
    keys[0] = @"ReadStatistics";
    values[0] = (void *)CFRetain(Mutable);
    CFDictionaryRef v13 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (values[0]) {
      CFRelease(values[0]);
    }
    CFRelease(Mutable);
  }
  else
  {
    CFDictionaryRef v13 = 0;
  }
  *a4 = v13;
  if (v13) {
    return 0;
  }
  else {
    return 4294954513;
  }
}

uint64_t sgffr_finishPrerollBatch(uint64_t a1, int a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v3 = 4;
  }
  else {
    uint64_t v3 = 5;
  }
  FigReadWriteLockLockForRead();
  CFArrayRef v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  FigReadWriteLockUnlockForRead();
  if (!v4) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    CFIndex v6 = Count;
    LODWORD(v7) = 0;
    for (CFIndex i = 0; i != v6; ++i)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CFRange v12 = *(uint64_t (**)(const void *, void, uint64_t))(v11 + 24);
      if (v12) {
        unsigned int v13 = v12(ValueAtIndex, 0, v3);
      }
      else {
        unsigned int v13 = -12782;
      }
      if (v7) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v13;
      }
    }
  }
  CFRelease(v4);
  return v7;
}

void sgffr_collectSchedIOReadStatistics(int a1, int a2, void *cf)
{
  xpc_object_t value = 0;
  CFAllocatorRef v4 = CFGetAllocator(cf);
  uint64_t v5 = FigScheduledIOGetFigBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFMutableDictionaryRef v8 = *(unsigned int (**)(uint64_t, void, CFAllocatorRef, void **))(v7 + 48);
  if (v8)
  {
    if (!v8(v5, *MEMORY[0x1E4F21AB0], v4, &value))
    {
      CFArrayAppendValue((CFMutableArrayRef)cf, value);
      CFRelease(value);
    }
  }
}

void sgffr_collectByteStreamReadStatistics(int a1, int a2, void *cf)
{
  xpc_object_t value = 0;
  CFAllocatorRef v4 = CFGetAllocator(cf);
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFMutableDictionaryRef v8 = *(unsigned int (**)(uint64_t, void, CFAllocatorRef, void **))(v7 + 48);
  if (v8)
  {
    if (!v8(CMBaseObject, *MEMORY[0x1E4F1FB78], v4, &value))
    {
      CFArrayAppendValue((CFMutableArrayRef)cf, value);
      CFRelease(value);
    }
  }
}

uint64_t sgffr_CreateSampleBufferAtCursor(uint64_t a1, const void *a2, uint64_t a3, CMItemCount a4, int a5, uint64_t a6, int a7, char a8, uint64_t (*a9)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a10, uint64_t a11, CFTypeRef *a12)
{
  return sgffr_createSampleBufferAtCursorUsingBatch(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t sgffr_FinishPrerollBatch(uint64_t a1)
{
  return sgffr_finishPrerollBatch(a1, 1);
}

uint64_t sgffr_GenerateSampleBuffersForRequests(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, CFTypeRef))
{
  unsigned int context = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  xpc_object_t value = 0;
  if (a2 < 1) {
    return 0;
  }
  uint64_t v11 = DerivedStorage;
  CFDictionaryRef Mutable = 0;
  LODWORD(v13) = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    key = 0;
    CFTypeRef cf = 0;
    if (*(unsigned char *)(v11 + 32))
    {
      sgffr_copyCursorSampleLocationAndDataSource(a1, *(void *)a3, 0, 0, 0, 0, 0, 0, 0, 0, (CFTypeRef *)&key);
      if (!Mutable) {
        CFDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      xpc_object_t value = (void *)CFDictionaryGetValue(Mutable, key);
      if (!value)
      {
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v17 = v16 ? v16 : 0;
        if (*(void *)(v17 + 48))
        {
          uint64_t v18 = key;
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = *(uint64_t (**)(void *, const __CFAllocator *, void **))(v20 + 48);
          if (v21)
          {
            unsigned int context = v21(v18, allocator, &value);
            if (!context)
            {
              CFDictionarySetValue(Mutable, key, value);
              if (value) {
                CFRelease(value);
              }
            }
          }
          else
          {
            unsigned int context = -12782;
          }
        }
      }
    }
    uint64_t v14 = sgffr_createSampleBufferAtCursorUsingBatch(a1, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(_DWORD *)(a3 + 24), *(void *)a3, *(_DWORD *)(a3 + 36), *(_DWORD *)(a3 + 40), *(uint64_t (**)(uint64_t, uint64_t, CMSampleBufferRef))(a3 + 44), *(void *)(a3 + 52), *(void *)(a3 + 60), (uint64_t)value, &cf);
    unsigned int context = v14;
    if (v14) {
      CFTypeRef v15 = 0;
    }
    else {
      CFTypeRef v15 = cf;
    }
    a5(a4, a3, v14, v15);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (key) {
      CFRelease(key);
    }
    if (v13) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = v14;
    }
    a3 += 68;
    --a2;
  }
  while (a2);
  if (Mutable)
  {
    CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)sgffr_commitBatchApply, &context);
    if (v13) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = context;
    }
    CFRelease(Mutable);
  }
  return v13;
}

uint64_t sgffr_CreateSampleGeneratorBatch(uint64_t a1, const __CFAllocator *a2, void *a3)
{
  if (a3 && a1)
  {
    FigSampleGeneratorBatchGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
      *(void *)uint64_t DerivedStorage = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(_DWORD *)(DerivedStorage + 32) = 0;
      *(unsigned char *)(DerivedStorage + 36) = 0;
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      *(void *)(DerivedStorage + 24) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
      *(void *)(DerivedStorage + 40) = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
      FigCFWeakReferenceStore();
      if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 32)) {
        *(unsigned char *)(DerivedStorage + 36) = 1;
      }
      uint64_t v5 = 0;
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sgffr_createSampleBufferAtCursorUsingBatch(uint64_t a1, const void *a2, uint64_t a3, CMItemCount value, int a5, uint64_t a6, int a7, char a8, uint64_t (*a9)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef *a13)
{
  uint64_t v280 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v231 = 0;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  BOOL v20 = *(void *)(v19 + 144) != 0;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  if (*(void *)(v22 + 112))
  {
    char v23 = 0;
    int v24 = 1;
    if (!a6) {
      goto LABEL_23;
    }
  }
  else
  {
    int v24 = 0;
    char v23 = 1;
    if (!a6) {
      goto LABEL_23;
    }
  }
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (a5 == 1)
  {
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    if (v26 == *(void *)(CMBaseObjectGetVTable() + 16))
    {
      CFIndex v28 = *(uint64_t (**)(const void *, uint64_t))(v26 + 32);
      if (v28)
      {
        if (v28(a2, a6) == 1) {
          return 4294954454;
        }
      }
    }
  }
  else
  {
    if (v25) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v27 == *(void *)(CMBaseObjectGetVTable() + 16))
    {
      unsigned int v40 = *(uint64_t (**)(const void *, uint64_t))(v27 + 32);
      if (v40)
      {
        if (v40(a2, a6) == -1) {
          return 4294954454;
        }
      }
    }
  }
LABEL_23:
  char v224 = a8;
  char v226 = v23;
  uint64_t v29 = a13;
  if ((v20 & v24) == 1)
  {
    CFIndex v30 = (const void *)*MEMORY[0x1E4F1CFC8];
    *(void *)CMTime time = *MEMORY[0x1E4F1CFC8];
    uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a2);
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(void (**)(uint64_t, __CFString *, void, unsigned char *))(v33 + 48);
    if (v34)
    {
      v34(FigBaseObject, @"PreferCreateSampleBuffer", *MEMORY[0x1E4F1CF80], time);
      CFIndex v30 = *(const void **)time;
    }
    if ((const void *)*MEMORY[0x1E4F1CFD0] == v30)
    {
      if (!*(unsigned char *)(DerivedStorage + 33)) {
        BOOL v20 = 0;
      }
    }
    else
    {
      BOOL v20 = 1;
    }
    uint64_t v29 = a13;
    if (v30) {
      CFRelease(v30);
    }
  }
  if (!v20)
  {
    uint64_t v39 = 0;
    goto LABEL_393;
  }
  uint64_t v35 = a12;
  if (value != 1 && a5)
  {
    int v255 = a7;
    uint64_t v36 = CMBaseObjectGetDerivedStorage();
    CFTypeRef v253 = 0;
    CFTypeRef cf = 0;
    uint64_t v251 = 0;
    CFTypeRef v252 = 0;
    uint64_t v249 = 0;
    uint64_t v250 = 0;
    uint64_t v248 = 0;
    __int16 v247 = 0;
    uint64_t v246 = 0;
    long long v245 = 0u;
    long long v244 = 0u;
    memset(time, 0, sizeof(time));
    CMSampleBufferRef sbuf = 0;
    CMBlockBufferRef dataBuffer = 0;
    uint64_t v239 = 0;
    int v237 = 0;
    char v236 = 1;
    CFTypeRef v234 = 0;
    CFTypeRef v235 = 0;
    uint64_t v232 = 0;
    CFTypeRef v233 = 0;
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v242 = 0;
    invalidateRefCoCFIndex n = 0;
    CFTypeID v221 = v29;
    if (!*(void *)(v38 + 152))
    {
      formatDescriptiona = 0;
      int v46 = 0;
      goto LABEL_50;
    }
    CMItemCount numSampleTimingEntries = v36;
    uint64_t v272 = 0;
    CFTypeRef v273 = 0;
    uint64_t v41 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)formatDescriptioCFIndex n = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v277.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v42 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    CMTimeValue v43 = *MEMORY[0x1E4F1F9F8];
    v277.CMTimeEpoch epoch = v42;
    CMTimeValue v278 = v43;
    CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
    CFTypeRef v271 = 0;
    CFTypeRef v270 = 0;
    CFTypeRef cf2 = 0;
    CFTypeRef v268 = 0;
    CFTypeRef v267 = 0;
    CFTypeRef cf1 = 0;
    uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v44) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 0;
    }
    unsigned int v54 = *(uint64_t (**)(const void *, CFTypeRef *, CFTypeRef *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, char *, __int16 *, char *))(v45 + 152);
    if (v54)
    {
      uint64_t v55 = v54(a2, &v270, &v271, &v251, &v250, &v249, &v248, (char *)&v247 + 1, &v247, &v236);
      uint64_t v39 = v55;
      if (v55 == -12841)
      {
LABEL_337:
        unint64_t v117 = 0;
        formatDescriptiona = 0;
        goto LABEL_338;
      }
      if (v55) {
        goto LABEL_336;
      }
      uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v56) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = 0;
      }
      unsigned int v69 = *(uint64_t (**)(const void *, CFTypeRef *))(v57 + 160);
      if (v69)
      {
        uint64_t v39 = v69(a2, &cf2);
        if (!v39)
        {
          if (!v236)
          {
            unint64_t v117 = 0;
            formatDescriptiona = 0;
            uint64_t v39 = 0;
LABEL_338:
            char v136 = 1;
            uint64_t v35 = a12;
LABEL_339:
            if (v273) {
              CFRelease(v273);
            }
            if (cf2) {
              CFRelease(cf2);
            }
            if (v271) {
              CFRelease(v271);
            }
            if (v270) {
              CFRelease(v270);
            }
            if (v268) {
              CFRelease(v268);
            }
            if (v267) {
              CFRelease(v267);
            }
            if (cf1) {
              CFRelease(cf1);
            }
            if (v39 == -12841) {
              goto LABEL_366;
            }
            if (v39)
            {
              FigSignalErrorAt();
              goto LABEL_366;
            }
            if (v117 | (unint64_t)v233)
            {
              if (v136) {
                BOOL v147 = v247 == 0;
              }
              else {
                BOOL v147 = 1;
              }
              int v46 = !v147;
              if (*(unsigned char *)(numSampleTimingEntries + 33))
              {
                if (v233)
                {
                  uint64_t v36 = numSampleTimingEntries;
                  goto LABEL_50;
                }
                int v169 = v46;
                uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
                uint64_t v171 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v171) {
                  uint64_t v172 = v171;
                }
                else {
                  uint64_t v172 = 0;
                }
                CFNumberRef v173 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v172 + 48);
                uint64_t v36 = numSampleTimingEntries;
                if (!v173)
                {
                  int v61 = 0;
                  int v228 = 0;
                  CFTypeID v219 = (size_t *)&v242;
                  sampleTimingArray = (CMSampleTimingInfo *)time;
                  uint64_t v39 = 4294954514;
                  goto LABEL_367;
                }
                uint64_t v51 = v173(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &v233);
                if (v51) {
                  goto LABEL_64;
                }
LABEL_437:
                int v46 = v169;
LABEL_50:
                if (v250 && v249 && v236)
                {
                  uint64_t v47 = v249 - v248;
                  if (a5 != 1) {
                    uint64_t v47 = v248 + 1;
                  }
                  BOOL v48 = v47 <= value || value <= 0;
                  CMItemCount v212 = value;
                  if (v48) {
                    xpc_object_t value = v47;
                  }
                  if (v46)
                  {
                    uint64_t v49 = 0;
                    int v205 = 0;
                    sampleTimingArray = (CMSampleTimingInfo *)time;
                    CMTimeValue v50 = 1;
                    goto LABEL_67;
                  }
                  uint64_t v52 = (CMSampleTimingInfo *)malloc_type_malloc(72 * value, 0x1000040FF89C88EuLL);
                  if (v52)
                  {
                    uint64_t v49 = (uint64_t)v52;
                    int v205 = 1;
                    sampleTimingArray = v52;
                    CMTimeValue v50 = value;
LABEL_67:
                    if (HIBYTE(v247))
                    {
                      CFTypeID v219 = (size_t *)&v242;
                      uint64_t ContiguousSampleOffsetAndSize = sgffr_getContiguousSampleOffsetAndSize((uint64_t)a2, 0, (uint64_t)&v242);
                      int v228 = 0;
                      if (ContiguousSampleOffsetAndSize)
                      {
LABEL_69:
                        uint64_t v39 = ContiguousSampleOffsetAndSize;
LABEL_118:
                        uint64_t v29 = v221;
LABEL_119:
                        xpc_object_t value = v212;
                        CFArrayRef v74 = formatDescriptiona;
LABEL_120:
                        int v61 = v205;
                        goto LABEL_369;
                      }
                      CMItemCount numSampleSizeEntries = 1;
                    }
                    else
                    {
                      CFTypeID v219 = (size_t *)malloc_type_malloc(8 * value, 0x100004000313F17uLL);
                      if (!v219)
                      {
                        uint64_t v39 = FigSignalErrorAt();
                        CFTypeID v219 = 0;
                        int v228 = 0;
                        goto LABEL_118;
                      }
                      int v228 = 1;
                      CMItemCount numSampleSizeEntries = value;
                    }
                    if (a5 == 1)
                    {
                      if (a2) {
                        CFTypeRef v58 = CFRetain(a2);
                      }
                      else {
                        CFTypeRef v58 = 0;
                      }
                      CFTypeRef v253 = v58;
                      if (!a6)
                      {
                        int v203 = v46;
                        BOOL v68 = 0;
LABEL_124:
                        char v75 = v203;
                        if (!HIBYTE(v247)) {
                          char v75 = 0;
                        }
                        if (v75)
                        {
                          if (!v68)
                          {
                            unint64_t v91 = 0;
                            if (!v203) {
                              goto LABEL_224;
                            }
                            goto LABEL_220;
                          }
                          goto LABEL_128;
                        }
                        time2.xpc_object_t value = 0;
                        if (a5 == 1) {
                          uint64_t v78 = a6;
                        }
                        else {
                          uint64_t v78 = (uint64_t)a2;
                        }
                        if (v68) {
                          uint64_t v79 = v78;
                        }
                        else {
                          uint64_t v79 = 0;
                        }
                        goto LABEL_141;
                      }
                      uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v62) {
                        uint64_t v63 = v62;
                      }
                      else {
                        uint64_t v63 = 0;
                      }
                      uint64_t v72 = *(uint64_t (**)(const void *, CFTypeRef *))(v63 + 8);
                      if (v72)
                      {
                        int v203 = v46;
                        uint64_t v39 = v72(a2, &cf);
                        if (!v39)
                        {
                          uint64_t v214 = v35;
                          uint64_t ContiguousSampleOffsetAndSize = FigSampleCursorStepInDecodeOrderAndReportStepsTaken((uint64_t)cf, value - 1, (uint64_t)&v232);
                          if (ContiguousSampleOffsetAndSize) {
                            goto LABEL_69;
                          }
                          BOOL v68 = value - 1 != v232 || FigSampleCursorCompareInDecodeOrder((uint64_t)cf, a6) == 1;
                          CFRelease(cf);
                          CFTypeRef cf = 0;
                          goto LABEL_123;
                        }
LABEL_117:
                        FigSignalErrorAt();
                        goto LABEL_118;
                      }
                    }
                    else
                    {
                      uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v59) {
                        uint64_t v60 = v59;
                      }
                      else {
                        uint64_t v60 = 0;
                      }
                      unsigned int v64 = *(uint64_t (**)(const void *, CFTypeRef *))(v60 + 8);
                      if (v64)
                      {
                        int v203 = v46;
                        uint64_t v39 = v64(a2, &v253);
                        if (v39) {
                          goto LABEL_117;
                        }
                        CFTypeRef v65 = v253;
                        uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
                        uint64_t v67 = v66 ? v66 : 0;
                        long long v73 = *(uint64_t (**)(CFTypeRef, CMItemCount, uint64_t *))(v67 + 168);
                        if (v73)
                        {
                          uint64_t v214 = v35;
                          uint64_t v39 = v73(v65, 1 - value, &v232);
                          if (v39 || 1 - value != v232) {
                            goto LABEL_117;
                          }
                          if (a6)
                          {
                            if (FigSampleCursorCompareInDecodeOrder((uint64_t)v253, a6) == -1)
                            {
                              if (v253)
                              {
                                CFRelease(v253);
                                CFTypeRef v253 = 0;
                              }
                              uint64_t v196 = FigSampleCursorCopy(a6, (uint64_t)&v253);
                              if (!v196)
                              {
                                char v199 = v203;
                                if (!HIBYTE(v247)) {
                                  char v199 = 0;
                                }
                                if (v199)
                                {
LABEL_128:
                                  v277.xpc_object_t value = 0;
                                  lhs.xpc_object_t value = 0;
                                  rhs.xpc_object_t value = 0;
                                  time2.xpc_object_t value = 0;
                                  if (a5 == -1) {
                                    uint64_t v76 = (uint64_t)a2;
                                  }
                                  else {
                                    uint64_t v76 = a6;
                                  }
                                  uint64_t ContiguousSampleOffsetAndSize = FigSampleCursorCopyChunkDetails(v76, 0, 0, (uint64_t)&rhs, 0, 0, (uint64_t)&time2, 0, 0, 0);
                                  if (ContiguousSampleOffsetAndSize) {
                                    goto LABEL_69;
                                  }
                                  uint64_t ContiguousSampleOffsetAndSize = FigSampleCursorCopyChunkDetails((uint64_t)v253, 0, 0, (uint64_t)&v277, 0, 0, (uint64_t)&lhs, 0, 0, 0);
                                  if (ContiguousSampleOffsetAndSize) {
                                    goto LABEL_69;
                                  }
                                  if (rhs.value != v277.value)
                                  {
                                    CMItemCount numSampleTimingEntriesb = v36;
                                    uint64_t ContiguousSampleOffsetAndSize = FigSampleCursorCopy((uint64_t)v253, (uint64_t)&cf);
                                    if (!ContiguousSampleOffsetAndSize)
                                    {
                                      CMTimeValue v77 = 0;
                                      CMItemCount v93 = 0;
                                      CMItemCount v200 = value;
                                      uint64_t v215 = v35;
                                      while (1)
                                      {
                                        CFTypeRef v94 = cf;
                                        uint64_t v95 = *(void *)(CMBaseObjectGetVTable() + 16);
                                        if (v95) {
                                          uint64_t v96 = v95;
                                        }
                                        else {
                                          uint64_t v96 = 0;
                                        }
                                        if (v76) {
                                          uint64_t v97 = *(void *)(CMBaseObjectGetVTable() + 16);
                                        }
                                        else {
                                          uint64_t v97 = 0;
                                        }
                                        if (v96 != v97
                                          || (CFMutableArrayRef v98 = *(uint64_t (**)(CFTypeRef, uint64_t))(v96 + 32)) == 0
                                          || !v98(v94, v76))
                                        {
                                          uint64_t v36 = numSampleTimingEntriesb;
                                          uint64_t v35 = v215;
                                          goto LABEL_217;
                                        }
                                        uint64_t v99 = value >= 0 ? value : value + 1;
                                        uint64_t v100 = v99 >> 1;
                                        xpc_object_t value = v100 <= 1 ? 1 : v100;
                                        CFTypeRef v101 = cf;
                                        uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 16);
                                        uint64_t v103 = v102 ? v102 : 0;
                                        uint64_t v104 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v103 + 8);
                                        if (!v104) {
                                          break;
                                        }
                                        uint64_t ContiguousSampleOffsetAndSize = v104(v101, &v252);
                                        if (ContiguousSampleOffsetAndSize) {
                                          goto LABEL_69;
                                        }
                                        CFTypeRef v105 = v252;
                                        uint64_t v106 = *(void *)(CMBaseObjectGetVTable() + 16);
                                        uint64_t v107 = v106 ? v106 : 0;
                                        uint64_t v108 = *(uint64_t (**)(CFTypeRef, CMItemCount, uint64_t *))(v107 + 168);
                                        if (!v108) {
                                          break;
                                        }
                                        uint64_t v109 = v108(v105, value, &v232);
                                        if (v109)
                                        {
                                          uint64_t v39 = v109;
                                          if (v109 != -12840) {
                                            goto LABEL_118;
                                          }
                                        }
                                        if (v232 == value)
                                        {
                                          CFTypeRef v110 = v252;
                                          uint64_t v111 = *(void *)(CMBaseObjectGetVTable() + 16);
                                          uint64_t v112 = v111 ? v111 : 0;
                                          uint64_t v113 = v76 ? *(void *)(CMBaseObjectGetVTable() + 16) : 0;
                                          if (v112 != v113
                                            || (uint64_t v116 = *(uint64_t (**)(CFTypeRef, uint64_t))(v112 + 32)) == 0
                                            || v116(v110, v76) != 1)
                                          {
                                            uint64_t v114 = v232;
                                            CFTypeRef v115 = cf;
                                            CFTypeRef cf = v252;
                                            if (v252) {
                                              CFRetain(v252);
                                            }
                                            v77 += v114;
                                            if (v115) {
                                              CFRelease(v115);
                                            }
                                          }
                                        }
                                        v93 += value;
                                        if (v93 >= v200) {
                                          goto LABEL_272;
                                        }
                                        if (v252)
                                        {
                                          CFRelease(v252);
                                          CFTypeRef v252 = 0;
                                        }
                                      }
                                      uint64_t v39 = 4294954514;
                                      goto LABEL_118;
                                    }
                                    goto LABEL_69;
                                  }
                                  CMTimeValue v77 = time2.value - lhs.value;
LABEL_217:
                                  xpc_object_t value = v77 + 1;
                                  int v84 = v203;
                                  if (cf)
                                  {
                                    CFRelease(cf);
                                    CFTypeRef cf = 0;
                                  }
LABEL_219:
                                  unint64_t v91 = 0;
                                  if (!v84) {
                                    goto LABEL_224;
                                  }
LABEL_220:
                                  uint64_t ContiguousSampleOffsetAndSize = sgffr_getPTSAndDTSAndDuration(v36, (uint64_t)v253, (uint64_t)sampleTimingArray);
                                  if (ContiguousSampleOffsetAndSize) {
                                    goto LABEL_69;
                                  }
LABEL_224:
                                  CMItemCount numSampleTimingEntriesc = v50;
                                  if (HIBYTE(v247))
                                  {
                                    size_t v118 = *v219;
                                    if (a5 == 1) {
                                      uint64_t v119 = v251 + v248 * v118;
                                    }
                                    else {
                                      uint64_t v119 = v118 + v118 * (v248 - value) + v251;
                                    }
                                    uint64_t v239 = v119;
                                    CMItemCount v121 = value;
                                    uint64_t v29 = v221;
                                  }
                                  else
                                  {
                                    uint64_t v239 = v251;
                                    if (v248 < 1)
                                    {
                                      uint64_t v29 = v221;
                                      goto LABEL_234;
                                    }
                                    uint64_t v120 = sgffr_getContiguousSampleOffsetAndSize((uint64_t)v253, (uint64_t)&v239, 0);
                                    uint64_t v29 = v221;
                                    if (v120) {
                                      goto LABEL_244;
                                    }
                                    if (!HIBYTE(v247))
                                    {
LABEL_234:
                                      if (!*(unsigned char *)(v36 + 33))
                                      {
                                        uint64_t v120 = sgffr_checkByteRangeForByteStream(v36, (uint64_t)v234, v239, v91);
                                        if (v120) {
                                          goto LABEL_244;
                                        }
                                      }
                                      if (v255 == 3) {
                                        sgffr_checkDataAvailability(a1, (uint64_t)v235, (uint64_t)v234, v239, v91, &v255);
                                      }
                                      if (!*(unsigned char *)(v36 + 33))
                                      {
                                        if (*(unsigned char *)(v36 + 32))
                                        {
                                          uint64_t v120 = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)v36, 0, 0, &dataBuffer);
                                          if (v120) {
                                            goto LABEL_244;
                                          }
                                          Boolean v122 = 0;
                                          goto LABEL_240;
                                        }
                                        uint64_t v124 = sgffr_readFromByteStreamCreatingBlockBuffer(v36, (uint64_t)v234, v91, v239, &dataBuffer);
                                        if (v124) {
                                          goto LABEL_268;
                                        }
                                      }
                                      Boolean v122 = 1;
LABEL_240:
                                      CFArrayRef v74 = formatDescriptiona;
                                      uint64_t v123 = CMSampleBufferCreate(*(CFAllocatorRef *)v36, dataBuffer, v122, 0, 0, formatDescriptiona, value, numSampleTimingEntriesc, sampleTimingArray, numSampleSizeEntries, v219, &sbuf);
                                      if (v123)
                                      {
                                        uint64_t v39 = v123;
                                        xpc_object_t value = v212;
                                        goto LABEL_120;
                                      }
                                      if (CMFormatDescriptionGetMediaType(formatDescriptiona) != 1936684398
                                        || *(unsigned char *)(v36 + 35)
                                        || *(unsigned char *)(v36 + 36))
                                      {
                                        if (cf)
                                        {
                                          CFRelease(cf);
                                          CFTypeRef cf = 0;
                                        }
                                        uint64_t v124 = FigSampleCursorCopy((uint64_t)a2, (uint64_t)&cf);
                                        if (v124) {
                                          goto LABEL_268;
                                        }
                                        uint64_t v216 = v35;
                                        uint64_t v125 = v36;
                                        FigSampleCursorSetProperty((uint64_t)cf, @"EagerlyFetchSampleDependencyAttributes", *MEMORY[0x1E4F1CFD0]);
                                        if (value >= 1)
                                        {
                                          CFIndex v126 = 0;
                                          while (1)
                                          {
                                            sgffr_attachMediaSampleAttachmentsToSampleBuffer(v125, (uint64_t)cf, sbuf, v126);
                                            CFTypeRef v127 = cf;
                                            uint64_t v128 = *(void *)(CMBaseObjectGetVTable() + 16);
                                            uint64_t v129 = v128 ? v128 : 0;
                                            long long v130 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v129 + 168);
                                            if (!v130) {
                                              break;
                                            }
                                            uint64_t v120 = v130(v127, 1, &v232);
                                            if (v120) {
                                              goto LABEL_244;
                                            }
                                            if (value == ++v126) {
                                              goto LABEL_259;
                                            }
                                          }
                                          uint64_t v39 = 4294954514;
                                          goto LABEL_119;
                                        }
LABEL_259:
                                        CFRelease(cf);
                                        CFTypeRef cf = 0;
                                        uint64_t v36 = v125;
                                        uint64_t v35 = v216;
                                      }
                                      if (!a9 || (uint64_t v124 = a9(a10, a11, sbuf), !v124))
                                      {
                                        if (!*(unsigned char *)(v36 + 32)) {
                                          goto LABEL_521;
                                        }
                                        CMItemCount numSampleTimingEntriesd = v36;
                                        uint64_t TimeNeededInNanosecondsAndReadSchedulerFlags = sgffr_getTimeNeededInNanosecondsAndReadSchedulerFlags(v36, sbuf, v255, v224, (uint64_t)a2, &v237);
                                        uint64_t v132 = malloc_type_calloc(1uLL, 0x40uLL, 0x1020040A1797456uLL);
                                        if (v132)
                                        {
                                          uint64_t v133 = (uint64_t)v132;
                                          CMSampleBufferRef v134 = sbuf;
                                          *(void *)uint64_t v133 = sbuf;
                                          *(void *)(v133 + 8) = 0;
                                          if (v134)
                                          {
                                            CFRetain(v134);
                                            CMSampleBufferRef v135 = sbuf;
                                          }
                                          else
                                          {
                                            CMSampleBufferRef v135 = 0;
                                          }
                                          CFTypeRef v197 = v235;
                                          sgffr_rememberScheduledIOForSampleBuffer(v235, v135);
                                          if (v35) {
                                            uint64_t v198 = FigScheduledIOBatchAddRead(v35, v239, v91, (uint64_t)dataBuffer, a1, v133, TimeNeededInNanosecondsAndReadSchedulerFlags, v237, (uint64_t)&invalidateRefCon);
                                          }
                                          else {
                                            uint64_t v198 = FigScheduledIORequestRead((uint64_t)v197, v239, v91, (uint64_t)dataBuffer, a1, v133, TimeNeededInNanosecondsAndReadSchedulerFlags, v237, (uint64_t)&invalidateRefCon);
                                          }
                                          uint64_t v39 = v198;
                                          if (v198)
                                          {
                                            FigSignalErrorAt();
                                            sgffr_forgetScheduledIOForSampleBuffer(sbuf);
                                            if (*(void *)v133) {
                                              CFRelease(*(CFTypeRef *)v133);
                                            }
                                            free((void *)v133);
                                            goto LABEL_119;
                                          }
                                          CMSampleBufferSetInvalidateCallback(sbuf, (CMSampleBufferInvalidateCallback)sgffr_invalidateSampleBuffer, invalidateRefCon);
                                          uint64_t v36 = numSampleTimingEntriesd;
LABEL_521:
                                          sgffr_setSampleBufferAttachments(v36, sbuf, v233, v239);
                                          uint64_t v39 = 0;
                                          CFTypeRef v231 = sbuf;
                                          CMSampleBufferRef sbuf = 0;
                                          xpc_object_t value = v212;
                                          CFArrayRef v74 = formatDescriptiona;
                                          int v61 = v205;
LABEL_371:
                                          if (dataBuffer) {
                                            CFRelease(dataBuffer);
                                          }
                                          if (v61) {
                                            free(sampleTimingArray);
                                          }
                                          if (v228) {
                                            free(v219);
                                          }
                                          if (cf) {
                                            CFRelease(cf);
                                          }
                                          if (v252) {
                                            CFRelease(v252);
                                          }
                                          if (v253) {
                                            CFRelease(v253);
                                          }
                                          if (v233) {
                                            CFRelease(v233);
                                          }
                                          if (v74) {
                                            CFRelease(v74);
                                          }
                                          if (v234) {
                                            CFRelease(v234);
                                          }
                                          if (v235) {
                                            CFRelease(v235);
                                          }
                                          goto LABEL_391;
                                        }
                                        uint64_t v120 = FigSignalErrorAt();
LABEL_244:
                                        uint64_t v39 = v120;
                                        goto LABEL_119;
                                      }
LABEL_268:
                                      uint64_t v39 = v124;
                                      FigSignalErrorAt();
                                      goto LABEL_119;
                                    }
                                    size_t v118 = *v219;
                                    CMItemCount v121 = value;
                                  }
                                  xpc_object_t value = v121;
                                  unint64_t v91 = v118 * v121;
                                  goto LABEL_234;
                                }
                                time2.xpc_object_t value = 0;
                                uint64_t v79 = (uint64_t)a2;
LABEL_141:
                                uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
                                if (v80) {
                                  uint64_t v81 = v80;
                                }
                                else {
                                  uint64_t v81 = 0;
                                }
                                if (*(void *)(v81 + 224))
                                {
                                  if (HIBYTE(v247)) {
                                    uint64_t v82 = 0;
                                  }
                                  else {
                                    uint64_t v82 = (uint64_t)v219;
                                  }
                                  uint64_t ContiguousSampleOffsetAndSize = FigSampleCursorGetBatchSampleTimingAndSizes((uint64_t)v253, value, v79, (uint64_t)&time2, v49, v82);
                                  if (ContiguousSampleOffsetAndSize) {
                                    goto LABEL_69;
                                  }
                                }
                                else
                                {
                                  if (HIBYTE(v247)) {
                                    uint64_t v83 = 0;
                                  }
                                  else {
                                    uint64_t v83 = (uint64_t)v219;
                                  }
                                  uint64_t ContiguousSampleOffsetAndSize = FigSampleCursorUtilityGetBatchSampleTimingAndSizes((uint64_t)v253, value, v79, &time2.value, 0, v49, 0, v83);
                                  if (ContiguousSampleOffsetAndSize) {
                                    goto LABEL_69;
                                  }
                                }
                                xpc_object_t value = time2.value;
                                int v84 = v203;
                                if ((v203 & 1) == 0)
                                {
                                  CMTimeValue v50 = time2.value;
                                  if (time2.value >= 1)
                                  {
                                    CMItemCount numSampleTimingEntriesa = v36;
                                    uint64_t v85 = (CMTime *)(v36 + 88);
                                    p_decodeTimeStamp = &sampleTimingArray->decodeTimeStamp;
                                    CMTimeValue v87 = time2.value;
                                    uint64_t v201 = a6;
                                    do
                                    {
                                      if (p_decodeTimeStamp->flags)
                                      {
                                        long long v88 = *(_OWORD *)&p_decodeTimeStamp->value;
                                        lhs.CMTimeEpoch epoch = p_decodeTimeStamp->epoch;
                                        *(_OWORD *)&lhs.xpc_object_t value = v88;
                                        CMTime rhs = *v85;
                                        CMTimeSubtract(&v277, &lhs, &rhs);
                                        long long v89 = *(_OWORD *)&v277.value;
                                        a6 = v201;
                                        p_decodeTimeStamp->CMTimeEpoch epoch = v277.epoch;
                                        *(_OWORD *)&p_decodeTimeStamp->xpc_object_t value = v89;
                                      }
                                      p_decodeTimeStamp += 3;
                                      --value;
                                    }
                                    while (value);
                                    xpc_object_t value = v87;
                                    CMTimeValue v50 = v87;
                                    uint64_t v36 = numSampleTimingEntriesa;
                                  }
                                }
                                if (!HIBYTE(v247))
                                {
                                  if (value >= 1)
                                  {
                                    uint64_t v90 = 0;
                                    unint64_t v91 = 0;
                                    while (1)
                                    {
                                      unint64_t v92 = v91;
                                      v91 += v219[v90];
                                      if (v91 <= v92) {
                                        break;
                                      }
                                      if (value == ++v90) {
                                        goto LABEL_223;
                                      }
                                    }
LABEL_272:
                                    uint64_t ContiguousSampleOffsetAndSize = FigSignalErrorAt();
                                    goto LABEL_69;
                                  }
                                  unint64_t v91 = 0;
LABEL_223:
                                  CMItemCount numSampleSizeEntries = value;
                                  if (!v203) {
                                    goto LABEL_224;
                                  }
                                  goto LABEL_220;
                                }
                                goto LABEL_219;
                              }
                              uint64_t v39 = v196;
                              goto LABEL_117;
                            }
                            BOOL v68 = 0;
                          }
                          else
                          {
                            BOOL v68 = 0;
                          }
LABEL_123:
                          uint64_t v35 = v214;
                          goto LABEL_124;
                        }
                      }
                    }
                    uint64_t v39 = 4294954514;
                    goto LABEL_117;
                  }
                  uint64_t v39 = FigSignalErrorAt();
                  int v61 = 0;
                  int v228 = 0;
                  sampleTimingArray = 0;
                  CFTypeID v219 = (size_t *)&v242;
                  uint64_t v29 = v221;
                  xpc_object_t value = v212;
LABEL_368:
                  CFArrayRef v74 = formatDescriptiona;
LABEL_369:
                  if (sbuf) {
                    CFRelease(sbuf);
                  }
                  goto LABEL_371;
                }
                uint64_t v51 = sgffr_generateSingleSampleBuffer(a1, (uint64_t)a2, a7, v224, a9, a10, a11, v35, &v231);
                goto LABEL_64;
              }
              int v169 = v46;
              if (v117
                || (uint64_t v51 = sgffr_copyByteStreamForDataSourceURL(numSampleTimingEntries, v233, (void **)&v234),
                    !v51))
              {
                uint64_t v36 = numSampleTimingEntries;
                if (!*(unsigned char *)(numSampleTimingEntries + 32)) {
                  goto LABEL_437;
                }
                uint64_t v51 = sgffr_copyScheduledIOForByteStream(numSampleTimingEntries, v234, &v235);
                if (!v51) {
                  goto LABEL_437;
                }
              }
            }
            else
            {
              uint64_t v51 = FigSignalErrorAt();
            }
LABEL_64:
            uint64_t v39 = v51;
LABEL_366:
            int v61 = 0;
            int v228 = 0;
            CFTypeID v219 = (size_t *)&v242;
            sampleTimingArray = (CMSampleTimingInfo *)time;
LABEL_367:
            uint64_t v29 = v221;
            goto LABEL_368;
          }
          if (v249 >= a3)
          {
            uint64_t v39 = 0;
            char v136 = 1;
            uint64_t v35 = a12;
LABEL_270:
            formatDescriptiona = (const opaqueCMFormatDescription *)cf2;
            CFTypeRef cf2 = 0;
            CFTypeRef v137 = v271;
            CFTypeRef v271 = 0;
            unint64_t v117 = (unint64_t)v270;
            CFTypeRef v233 = v137;
            CFTypeRef v234 = v270;
            CFTypeRef v270 = 0;
            goto LABEL_339;
          }
          uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v70) {
            uint64_t v71 = v70;
          }
          else {
            uint64_t v71 = 0;
          }
          CFArrayRef v138 = *(uint64_t (**)(const void *, CFTypeRef *))(v71 + 8);
          if (v138)
          {
            uint64_t v39 = v138(a2, &v273);
            if (!v39)
            {
              CFTypeID v220 = (void *)a2;
              CMItemCount v213 = value;
              uint64_t v202 = a6;
              if (v249 - v248 >= 1)
              {
                uint64_t v139 = v249 - v248;
                if (v250)
                {
                  uint64_t v140 = v251 + v250;
                  char v136 = 1;
                  CMTimeFlags flags = *(_DWORD *)(v41 + 12);
                  CMTimeEpoch epoch = v42;
                  while (1)
                  {
                    uint64_t v265 = 0;
                    uint64_t v264 = 0;
                    uint64_t v263 = 0;
                    uint64_t v262 = 0;
                    __int16 v261 = 0;
                    char v260 = 0;
                    uint64_t v259 = 0;
                    CFTypeRef v141 = v273;
                    uint64_t v142 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v142) {
                      uint64_t v143 = v142;
                    }
                    else {
                      uint64_t v143 = 0;
                    }
                    CFTypeID v144 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v143 + 168);
                    if (v144) {
                      uint64_t v39 = v144(v141, v139, &v259);
                    }
                    else {
                      uint64_t v39 = 4294954514;
                    }
                    if (v259 != v139) {
                      goto LABEL_527;
                    }
                    if (v39) {
                      goto LABEL_529;
                    }
                    uint64_t Duration = FigSampleCursorCopyChunkDetails((uint64_t)v273, (uint64_t)&v267, (uint64_t)&v268, (uint64_t)&v265, (uint64_t)&v264, (uint64_t)&v263, (uint64_t)&v262, (uint64_t)&v261 + 1, (uint64_t)&v261, (uint64_t)&v260);
                    if (Duration) {
                      break;
                    }
                    if (!FigCFEqual() || !FigCFEqual()) {
                      goto LABEL_526;
                    }
                    if (v268)
                    {
                      CFRelease(v268);
                      CFTypeRef v268 = 0;
                    }
                    if (v267)
                    {
                      CFRelease(v267);
                      CFTypeRef v267 = 0;
                    }
                    if (!v260) {
                      goto LABEL_526;
                    }
                    uint64_t Duration = FigSampleCursorCopyFormatDescription((uint64_t)v273, (uint64_t)&cf1);
                    if (Duration) {
                      break;
                    }
                    if (!CFEqual(cf1, cf2)) {
                      goto LABEL_526;
                    }
                    if (cf1)
                    {
                      CFRelease(cf1);
                      CFTypeRef cf1 = 0;
                    }
                    if (v140 != v265 || v263 < 1 || (uint64_t v146 = v264) == 0)
                    {
LABEL_526:
                      uint64_t v39 = 0;
                      goto LABEL_527;
                    }
                    uint64_t v139 = v263;
                    if (__CFADD__(v250, v264))
                    {
                      uint64_t v39 = FigSignalErrorAt();
LABEL_530:
                      unint64_t v117 = 0;
                      formatDescriptiona = 0;
                      a6 = v202;
                      xpc_object_t value = v213;
                      uint64_t v35 = a12;
                      a2 = v220;
                      goto LABEL_339;
                    }
                    v250 += v264;
                    v249 += v263;
                    if (HIBYTE(v261))
                    {
                      if (HIBYTE(v247))
                      {
                        lhs.xpc_object_t value = 0;
                        if (!v272)
                        {
                          uint64_t Duration = FigSampleCursorCopySampleLocation_0((uint64_t)a2, 0, (uint64_t)&v272, 0, 0);
                          if (Duration) {
                            break;
                          }
                        }
                        uint64_t Duration = FigSampleCursorCopySampleLocation_0((uint64_t)v273, 0, (uint64_t)&lhs, 0, 0);
                        if (Duration) {
                          break;
                        }
                        if (v272 != lhs.value) {
                          HIBYTE(v247) = 0;
                        }
                        a6 = v202;
                        xpc_object_t value = v213;
                        a2 = v220;
                      }
                    }
                    else
                    {
                      HIBYTE(v247) = 0;
                    }
                    if ((_BYTE)v261)
                    {
                      if ((_BYTE)v247)
                      {
                        *(_OWORD *)&lhs.xpc_object_t value = *(_OWORD *)formatDescription;
                        lhs.CMTimeEpoch epoch = v42;
                        if ((v277.flags & 0x1D) != 1)
                        {
                          uint64_t Duration = FigSampleCursorGetDuration((uint64_t)a2, (uint64_t)&v277);
                          if (Duration) {
                            break;
                          }
                        }
                        uint64_t Duration = FigSampleCursorGetDuration((uint64_t)v273, (uint64_t)&lhs);
                        if (Duration) {
                          break;
                        }
                        CMTime rhs = v277;
                        CMTime time2 = lhs;
                        if (CMTimeCompare(&rhs, &time2)) {
                          LOBYTE(v247) = 0;
                        }
                        a6 = v202;
                        xpc_object_t value = v213;
                        a2 = v220;
                      }
                    }
                    else
                    {
                      LOBYTE(v247) = 0;
                    }
                    if (v136)
                    {
                      *(_OWORD *)&lhs.xpc_object_t value = *(_OWORD *)formatDescription;
                      lhs.CMTimeEpoch epoch = v42;
                      *(_OWORD *)&rhs.xpc_object_t value = *(_OWORD *)formatDescription;
                      rhs.CMTimeEpoch epoch = v42;
                      *(_OWORD *)&time2.xpc_object_t value = *(_OWORD *)formatDescription;
                      time2.CMTimeEpoch epoch = v42;
                      if ((flags & 0x1D) != 1)
                      {
                        uint64_t Duration = FigSampleCursorGetPresentationTimeStamp((uint64_t)a2, (uint64_t)&rhs);
                        if (Duration) {
                          break;
                        }
                        uint64_t Duration = FigSampleCursorGetDecodeTimeStamp((uint64_t)a2, (uint64_t)&time2);
                        if (Duration) {
                          break;
                        }
                        CMTime v257 = time2;
                        CMTime v256 = rhs;
                        CMTimeSubtract(&time1, &v257, &v256);
                        CMTimeValue v278 = time1.value;
                        CMTimeFlags flags = time1.flags;
                        CMTimeScale timescale = time1.timescale;
                        CMTimeEpoch epoch = time1.epoch;
                      }
                      uint64_t Duration = FigSampleCursorGetPresentationTimeStamp((uint64_t)v273, (uint64_t)&rhs);
                      if (Duration) {
                        break;
                      }
                      uint64_t Duration = FigSampleCursorGetDecodeTimeStamp((uint64_t)v273, (uint64_t)&time2);
                      if (Duration) {
                        break;
                      }
                      CMTime time1 = time2;
                      CMTime v257 = rhs;
                      CMTimeSubtract(&lhs, &time1, &v257);
                      time1.xpc_object_t value = v278;
                      time1.CMTimeScale timescale = timescale;
                      time1.CMTimeFlags flags = flags;
                      time1.CMTimeEpoch epoch = epoch;
                      CMTime v257 = lhs;
                      if (CMTimeCompare(&time1, &v257)) {
                        char v136 = 0;
                      }
                      a6 = v202;
                      xpc_object_t value = v213;
                      a2 = v220;
                    }
                    else
                    {
                      char v136 = 0;
                    }
                    uint64_t v39 = 0;
                    v140 += v146;
                    uint64_t v35 = a12;
                    if (v249 >= a3) {
                      goto LABEL_270;
                    }
                  }
                  uint64_t v39 = Duration;
LABEL_529:
                  FigSignalErrorAt();
                  goto LABEL_530;
                }
              }
              uint64_t v39 = 0;
              char v136 = 1;
LABEL_527:
              a6 = v202;
              xpc_object_t value = v213;
              uint64_t v35 = a12;
              a2 = v220;
              goto LABEL_270;
            }
            goto LABEL_336;
          }
          goto LABEL_335;
        }
LABEL_336:
        FigSignalErrorAt();
        goto LABEL_337;
      }
    }
LABEL_335:
    uint64_t v39 = 4294954514;
    goto LABEL_336;
  }
  uint64_t v39 = sgffr_generateSingleSampleBuffer(a1, (uint64_t)a2, a7, a8, a9, a10, a11, a12, &v231);
LABEL_391:
  if (!v39) {
    goto LABEL_394;
  }
  if (v39 != -12841) {
    goto LABEL_497;
  }
LABEL_393:
  if ((v226 & 1) == 0)
  {
    CMTimeValue v148 = 0;
    time1.xpc_object_t value = 0;
    v257.xpc_object_t value = 0;
    v256.xpc_object_t value = 0;
    CFTypeRef v231 = 0;
    if (a3 >= 0x7FFFFFFF) {
      int32_t v149 = 0x7FFFFFFF;
    }
    else {
      int32_t v149 = a3;
    }
    uint64_t v150 = value;
    uint64_t v151 = value - 1;
    if (!v151 || !a5) {
      goto LABEL_477;
    }
    CMTime v277 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    memset(&lhs, 0, sizeof(lhs));
    uint64_t v152 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v152) {
      uint64_t v153 = v152;
    }
    else {
      uint64_t v153 = 0;
    }
    char v154 = *(void (**)(const void *, CMTime *))(v153 + 56);
    if (v154) {
      v154(a2, &v277);
    }
    if (a3 >= 1 && (v277.flags & 0x1D) == 1)
    {
      *(CMTime *)CMTime time = v277;
      CMTimeMultiply(&lhs, (CMTime *)time, v149);
    }
    else
    {
      CMTimeMake((CMTime *)time, 1, 2);
      CMTime lhs = *(CMTime *)time;
    }
    CFAllocatorRef v155 = v29;
    if (a5 == 1)
    {
      uint64_t v156 = -1;
    }
    else
    {
      CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTime time2 = lhs;
      CMTimeSubtract((CMTime *)time, &rhs, &time2);
      CMTime lhs = *(CMTime *)time;
      uint64_t v156 = 1;
      uint64_t v151 = 1 - v150;
    }
    uint64_t v157 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v157) {
      uint64_t v158 = v157;
    }
    else {
      uint64_t v158 = 0;
    }
    CFArrayRef v159 = *(uint64_t (**)(const void *, CMTime *))(v158 + 8);
    if (v159)
    {
      uint64_t v160 = v159(a2, &v257);
      if (v160) {
        goto LABEL_535;
      }
      CMTimeValue v161 = v257.value;
      CMTime rhs = lhs;
      uint64_t v162 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v162) {
        uint64_t v163 = v162;
      }
      else {
        uint64_t v163 = 0;
      }
      int v164 = *(uint64_t (**)(CMTimeValue, unsigned char *))(v163 + 120);
      if (!v164) {
        goto LABEL_450;
      }
      *(CMTime *)CMTime time = rhs;
      uint64_t v165 = v164(v161, time);
      if (v165)
      {
        uint64_t v39 = v165;
        if (v165 != -12840) {
          goto LABEL_451;
        }
      }
      CMTimeValue v166 = v257.value;
      if (v150 < 1)
      {
LABEL_460:
        if (a6)
        {
          uint64_t v184 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v185 = v184 ? v184 : 0;
          uint64_t v186 = v166 ? *(void *)(CMBaseObjectGetVTable() + 16) : 0;
          if (v185 == v186 && (Boolean v194 = *(uint64_t (**)(uint64_t, CMTimeValue))(v185 + 32)) != 0) {
            uint64_t v187 = v194(a6, v166);
          }
          else {
            uint64_t v187 = 0;
          }
          if (v156 == v187) {
            CMTimeValue v166 = a6;
          }
        }
        if (a5 == -1) {
          CMTimeValue v148 = (CMTimeValue)a2;
        }
        else {
          CMTimeValue v148 = v166;
        }
        if (a5 == -1) {
          a2 = (const void *)v166;
        }
        uint64_t v29 = v155;
LABEL_477:
        uint64_t v188 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v188) {
          uint64_t v189 = v188;
        }
        else {
          uint64_t v189 = 0;
        }
        v190 = *(uint64_t (**)(const void *, CMTimeValue, CMTime *))(v189 + 112);
        if (v190)
        {
          uint64_t v191 = v190(a2, v148, &time1);
          uint64_t v39 = v191;
          if (v191 == -12840) {
            goto LABEL_488;
          }
          if (!v191)
          {
            if (!a9 || (uint64_t v192 = a9(a10, a11, (CMSampleBufferRef)time1.value), !v192))
            {
              uint64_t v39 = 0;
              CFTypeRef v231 = (CFTypeRef)time1.value;
              time1.xpc_object_t value = 0;
              goto LABEL_490;
            }
            uint64_t v39 = v192;
          }
        }
        else
        {
          uint64_t v39 = 4294954514;
        }
        FigSignalErrorAt();
LABEL_488:
        if (time1.value) {
          CFRelease((CFTypeRef)time1.value);
        }
LABEL_490:
        if (v256.value) {
          CFRelease((CFTypeRef)v256.value);
        }
        if (v257.value) {
          CFRelease((CFTypeRef)v257.value);
        }
        if (!v29 || v39) {
          goto LABEL_497;
        }
LABEL_496:
        CFTypeRef *v29 = v231;
        return v39;
      }
      *(void *)CMTime time = 0;
      uint64_t v167 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v168 = v167 ? v167 : 0;
      uint64_t v174 = *(uint64_t (**)(const void *, CMTime *))(v168 + 8);
      if (!v174) {
        goto LABEL_450;
      }
      uint64_t v160 = v174(a2, &v256);
      if (v160)
      {
LABEL_535:
        uint64_t v39 = v160;
        goto LABEL_451;
      }
      CMTimeValue v175 = v256.value;
      uint64_t v176 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v176) {
        uint64_t v177 = v176;
      }
      else {
        uint64_t v177 = 0;
      }
      unsigned int v178 = *(uint64_t (**)(CMTimeValue, uint64_t, unsigned char *))(v177 + 168);
      if (v178)
      {
        uint64_t v160 = v178(v175, v151, time);
        if (!v160)
        {
          if (v151 == *(void *)time)
          {
            CMTimeValue v179 = v256.value;
            uint64_t v180 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v181 = v180 ? v180 : 0;
            uint64_t v182 = v166 ? *(void *)(CMBaseObjectGetVTable() + 16) : 0;
            if (v181 == v182 && (int v195 = *(uint64_t (**)(CMTimeValue, CMTimeValue))(v181 + 32)) != 0) {
              uint64_t v183 = v195(v179, v166);
            }
            else {
              uint64_t v183 = 0;
            }
            if (v156 == v183) {
              CMTimeValue v166 = v256.value;
            }
          }
          goto LABEL_460;
        }
        goto LABEL_535;
      }
    }
LABEL_450:
    uint64_t v39 = 4294954514;
LABEL_451:
    uint64_t v29 = v155;
    goto LABEL_488;
  }
LABEL_394:
  if (v29) {
    goto LABEL_496;
  }
LABEL_497:
  if (v231) {
    CFRelease(v231);
  }
  return v39;
}

uint64_t FigSampleCursorCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(FigBaseObject, a2, a3, a4);
  }
  return result;
}

uint64_t FigSampleCursorCopyFormatDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t sgffr_copyCursorSampleLocationAndDataSource(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, char *a6, void *a7, void *a8, CFTypeRef *a9, CFTypeRef *a10, CFTypeRef *a11)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  CFTypeRef v39 = 0;
  CFTypeRef v40 = 0;
  CFTypeRef cf = 0;
  if (a3
    && ((uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v20 = 0) : (v20 = v19),
        *(void *)(v20 + 184)
     && ((uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v22 = 0) : (v22 = v21), *(void *)(v22 + 192))))
  {
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *))(v24 + 184);
    if (!v35) {
      goto LABEL_60;
    }
    uint64_t v29 = v35(a2, &v44, &v42, &v43, &v41, &cf, &v40);
    if (v29 || !v41) {
      goto LABEL_18;
    }
    if (v43 >= v44 && v43 + v41 <= (unint64_t)(v42 + v44))
    {
      char v30 = 1;
      goto LABEL_20;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v40)
    {
      CFRelease(v40);
      CFTypeRef v40 = 0;
    }
    uint64_t v28 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, CFTypeRef *, CFTypeRef *))(v26 + 144);
    if (!v27) {
      goto LABEL_60;
    }
    uint64_t v28 = v27(a2, &v44, &v42, &cf, &v40);
  }
  uint64_t v29 = v28;
LABEL_18:
  if (v29) {
    goto LABEL_61;
  }
  char v30 = 0;
LABEL_20:
  if (!((unint64_t)cf | (unint64_t)v40))
  {
    uint64_t v34 = FigSignalErrorAt();
    goto LABEL_70;
  }
  if (!*(unsigned char *)(DerivedStorage + 33))
  {
    if (cf || (uint64_t v34 = sgffr_copyByteStreamForDataSourceURL(DerivedStorage, v40, (void **)&cf), !v34))
    {
      if (!*(unsigned char *)(DerivedStorage + 32)) {
        goto LABEL_44;
      }
      uint64_t v34 = sgffr_copyScheduledIOForByteStream(DerivedStorage, cf, &v39);
      if (!v34) {
        goto LABEL_44;
      }
    }
    goto LABEL_70;
  }
  if (!v40)
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v36 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v33 + 48);
    if (v36)
    {
      uint64_t v34 = v36(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &v40);
      if (!v34) {
        goto LABEL_44;
      }
LABEL_70:
      uint64_t v29 = v34;
      goto LABEL_61;
    }
LABEL_60:
    uint64_t v29 = 4294954514;
    goto LABEL_61;
  }
LABEL_44:
  if (a4) {
    *a4 = v44;
  }
  if (a5) {
    *a5 = v42;
  }
  if (a6) {
    *a6 = v30;
  }
  if (a7) {
    *a7 = v43;
  }
  if (a8) {
    *a8 = v41;
  }
  if (a9)
  {
    *a9 = v40;
    CFTypeRef v40 = 0;
  }
  if (a10)
  {
    *a10 = cf;
    CFTypeRef cf = 0;
  }
  uint64_t v29 = 0;
  if (a11)
  {
    *a11 = v39;
    CFTypeRef v39 = 0;
  }
LABEL_61:
  if (v40) {
    CFRelease(v40);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v39) {
    CFRelease(v39);
  }
  return v29;
}

uint64_t sgffr_checkByteRangeForByteStream(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v13 = 0;
  FigReadWriteLockLockForRead();
  int Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  FigReadWriteLockUnlockForRead();
  if (Int64IfPresent && (a3 & 0x8000000000000000) == 0 && v13 >= a3 && v13 - a3 >= a4) {
    return 0;
  }
  CFNumberRef number = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, void, CFNumberRef *))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  uint64_t v11 = v10(CMBaseObject, *MEMORY[0x1E4F1EC50], 0, &number);
  if (number)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, &v13);
    CFRelease(number);
  }
  if (!v11)
  {
    FigReadWriteLockLockForWrite();
    FigCFDictionarySetInt64();
    FigReadWriteLockUnlockForWrite();
    if (a3 < 0 || v13 < a3 || v13 - a3 < a4) {
      return FigSignalErrorAt();
    }
    return 0;
  }
  return v11;
}

uint64_t sgffr_checkDataAvailability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, _DWORD *a6)
{
  unint64_t v22 = 0;
  if (a2)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v13 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v12 = v13;
    if (v13) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(v14 + 40);
    if (!v20) {
      return result;
    }
    uint64_t result = v20(a2, a4, &v22);
    if (result) {
      return result;
    }
LABEL_13:
    if (v22 < a5)
    {
      *a6 = 2;
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
    return result;
  }
  uint64_t v16 = CMBaseObjectGetVTable();
  uint64_t v18 = *(void *)(v16 + 16);
  uint64_t result = v16 + 16;
  uint64_t v17 = v18;
  if (v18) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(v19 + 24);
  if (v21)
  {
    uint64_t result = v21(a3, a4, &v22);
    if (!result) {
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t CMByteStreamReadAndCreateBlockBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v9 + 32);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4, 0);
}

uint64_t createSampleBufferForUncompressed(uint64_t a1, size_t a2, const opaqueCMFormatDescription *a3, Boolean a4, const CMSampleTimingInfo *a5, CMSampleBufferRef *a6, CMBlockBufferRef *a7)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMSampleBufferRef sampleBufferOut = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a3);
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(a3);
  uint64_t v13 = Dimensions;
  unint64_t v14 = HIDWORD(Dimensions);
  CFTypeRef v15 = (CFTypeRef *)(DerivedStorage + 136);
  if (*(void *)(DerivedStorage + 144) == __PAIR64__(HIDWORD(Dimensions), MediaSubType)
    && *(_DWORD *)(DerivedStorage + 152) == Dimensions)
  {
    goto LABEL_17;
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*v15)
  {
    CFRelease(*v15);
    *CFTypeRef v15 = 0;
  }
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v17);
  CFRelease(v17);
  ExtensioCFIndex n = CMFormatDescriptionGetExtension(a3, (CFStringRef)*MEMORY[0x1E4F1ED48]);
  if (!Extension) {
    goto LABEL_9;
  }
  uint64_t v19 = Extension;
  CMTimeValue v50 = (CFTypeRef *)(DerivedStorage + 136);
  FourCharCode v20 = MediaSubType;
  uint64_t v21 = DerivedStorage;
  int v22 = v14;
  unint64_t v14 = v13;
  uint64_t v23 = a3;
  uint64_t v24 = a7;
  uint64_t v25 = a6;
  CFTypeID v26 = CFGetTypeID(Extension);
  BOOL v27 = v26 == CFNumberGetTypeID();
  a6 = v25;
  a7 = v24;
  a3 = v23;
  uint64_t v13 = v14;
  LODWORD(v14) = v22;
  uint64_t DerivedStorage = v21;
  FourCharCode MediaSubType = v20;
  CFTypeRef v15 = v50;
  if (v27)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24CC8], v19);
  }
  else
  {
LABEL_9:
    CFDictionaryRef DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && !CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]))
    {
      if (((a2 / (v13 >> 32)) & 0x8000000000000000) != 0) {
        goto LABEL_43;
      }
      FigCFDictionarySetInt64();
    }
  }
  uint64_t v29 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Mutable, (CVPixelBufferPoolRef *)v15);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!v29)
  {
    *(_DWORD *)(DerivedStorage + 144) = MediaSubType;
    *(_DWORD *)(DerivedStorage + 148) = v14;
    *(_DWORD *)(DerivedStorage + 152) = v13;
LABEL_17:
    if (!*v15)
    {
LABEL_32:
      if (a6)
      {
        *a6 = sampleBufferOut;
        CMSampleBufferRef sampleBufferOut = 0;
      }
      uint64_t v29 = 0;
      if (a7)
      {
        *a7 = blockBufferOut;
        CMBlockBufferRef blockBufferOut = 0;
      }
      goto LABEL_36;
    }
    uint64_t v30 = v13;
    uint64_t v31 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CVPixelBufferPoolRef)*v15, &pixelBufferOut);
    if (v31)
    {
LABEL_44:
      uint64_t v29 = v31;
      goto LABEL_36;
    }
    uint64_t v32 = pixelBufferOut;
    if (!pixelBufferOut) {
      goto LABEL_32;
    }
    uint64_t v33 = a6;
    uint64_t v34 = *MEMORY[0x1E4F24AF8];
    *(void *)customBlockSource = *MEMORY[0x1E4F24A78];
    *(void *)&customBlockSource[8] = v34;
    uint64_t v35 = *MEMORY[0x1E4F24B98];
    *(void *)&customBlockSource[16] = *MEMORY[0x1E4F24B00];
    *(void *)&customBlockSource[24] = v35;
    uint64_t v36 = *MEMORY[0x1E4F24BC8];
    uint64_t v58 = *MEMORY[0x1E4F24A90];
    uint64_t v59 = v36;
    uint64_t v37 = *MEMORY[0x1E4F24C18];
    uint64_t v60 = *MEMORY[0x1E4F24B28];
    uint64_t v61 = v37;
    uint64_t v38 = *MEMORY[0x1E4F24A10];
    uint64_t v62 = *MEMORY[0x1E4F1EDF0];
    uint64_t v63 = v38;
    uint64_t v39 = *MEMORY[0x1E4F1EE00];
    uint64_t v64 = *MEMORY[0x1E4F24A08];
    uint64_t v65 = v39;
    uint64_t v40 = *MEMORY[0x1E4F1ED30];
    uint64_t v66 = *MEMORY[0x1E4F1ED88];
    uint64_t v67 = v40;
    uint64_t v41 = *MEMORY[0x1E4F1EDF8];
    uint64_t v68 = *MEMORY[0x1E4F1ED78];
    uint64_t v69 = v41;
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a3);
    if (Extensions)
    {
      CFDictionaryRef v43 = Extensions;
      for (uint64_t i = 0; i != 128; i += 8)
      {
        CFStringRef v45 = *(const __CFString **)&customBlockSource[i];
        CFStringRef Value = CFDictionaryGetValue(v43, v45);
        if (Value) {
          CVBufferSetAttachment(v32, v45, Value, kCVAttachmentMode_ShouldPropagate);
        }
      }
    }
    a6 = v33;
    if (!pixelBufferOut) {
      goto LABEL_32;
    }
    size_t v47 = CVPixelBufferGetBytesPerRow(pixelBufferOut) * (v30 >> 32);
    if (v47 >= a2)
    {
      uint64_t v31 = CMSampleBufferCreateForImageBuffer(*(CFAllocatorRef *)DerivedStorage, pixelBufferOut, a4, 0, 0, a3, a5, &sampleBufferOut);
      if (!v31)
      {
        if (!a7) {
          goto LABEL_32;
        }
        *(_DWORD *)customBlockSource = 0;
        BOOL v48 = pixelBufferOut;
        if (pixelBufferOut) {
          BOOL v48 = (void *)CFRetain(pixelBufferOut);
        }
        *(void *)&customBlockSource[20] = v48;
        *(void *)&customBlockSource[4] = cvbufferBBufSourceLock;
        *(void *)&customBlockSource[12] = cvbufferBBufSourceRelease;
        uint64_t v31 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)DerivedStorage, 0, v47, 0, (const CMBlockBufferCustomBlockSource *)customBlockSource, 0, v47, 0, &blockBufferOut);
        if (!v31) {
          goto LABEL_32;
        }
      }
      goto LABEL_44;
    }
LABEL_43:
    uint64_t v31 = FigSignalErrorAt();
    goto LABEL_44;
  }
LABEL_36:
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v29;
}

uint64_t CMByteStreamRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v9 + 8);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4, 0);
}

uint64_t sgffr_refineAndVerifySampleLocation(uint64_t a1, CMBlockBufferRef theBuffer, CMBlockBufferRef a3, uint64_t a4, size_t a5, uint64_t a6, size_t size, void *a8, void *a9)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((theBuffer != 0) == (a3 != 0)
    || (size_t v10 = a6 - a4, a6 - a4 < 0)
    || v10 + size > a5
    || theBuffer && CMBlockBufferGetDataLength(theBuffer) != a5
    || a3 && CMBlockBufferGetDataLength(a3) != size)
  {
    uint64_t v21 = FigSignalErrorAt();
    CFMutableDictionaryRef v17 = 0;
    goto LABEL_12;
  }
  if (size >= 9)
  {
    CFMutableDictionaryRef v17 = (char *)malloc_type_malloc(size, 0x7DC3141EuLL);
    p_destinatioCFIndex n = v17;
    if (!a3) {
      goto LABEL_10;
    }
  }
  else
  {
    CFMutableDictionaryRef v17 = 0;
    p_destinatioCFIndex n = &destination;
    if (!a3)
    {
LABEL_10:
      uint64_t v19 = theBuffer;
      size_t v20 = v10;
      goto LABEL_15;
    }
  }
  uint64_t v19 = a3;
  size_t v20 = 0;
LABEL_15:
  uint64_t v23 = CMBlockBufferCopyDataBytes(v19, v20, size, p_destination);
  if (v23) {
    goto LABEL_24;
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  CFTypeID v26 = *(uint64_t (**)(uint64_t, uint64_t, size_t, char *, size_t, uint64_t *, uint64_t *))(v25 + 192);
  if (!v26)
  {
    uint64_t v21 = 4294954514;
    goto LABEL_12;
  }
  uint64_t v23 = v26(a1, a4, a5, p_destination, size, &v29, &v28);
  if (v23) {
    goto LABEL_24;
  }
  if (v29 < a4 || (uint64_t v27 = v28, v28 + v29 > a5 + a4))
  {
    uint64_t v23 = FigSignalErrorAt();
LABEL_24:
    uint64_t v21 = v23;
    goto LABEL_12;
  }
  if (a8) {
    *a8 = v29;
  }
  uint64_t v21 = 0;
  if (a9) {
    *a9 = v27;
  }
LABEL_12:
  free(v17);
  return v21;
}

uint64_t sgffr_readFromByteStreamCreatingBlockBuffer(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, CMBlockBufferRef *a5)
{
  CMBlockBufferRef theBuffer = 0;
  if (a3 <= 0x2000
    || !*(void *)(a1 + 8)
    || (CMByteStreamGetCMBaseObject(), FigCachedFileByteStreamGetClassID(), CMBaseObjectIsMemberOfClass()))
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, CMBlockBufferRef *, void))(v10 + 32);
    if (v11)
    {
      uint64_t BlockBuffer = v11(a2, a3, a4, &theBuffer, 0);
      if (!BlockBuffer)
      {
LABEL_9:
        uint64_t v13 = 0;
        *a5 = theBuffer;
        return v13;
      }
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v19 = 0;
  uint64_t BlockBuffer = FigMemoryPoolCreateBlockBuffer();
  if (BlockBuffer
    || (uint64_t BlockBuffer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v19), BlockBuffer))
  {
LABEL_22:
    uint64_t v13 = BlockBuffer;
    goto LABEL_19;
  }
  unint64_t v14 = v19;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  CFMutableDictionaryRef v17 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, char *, void))(v16 + 8);
  if (!v17)
  {
LABEL_18:
    uint64_t v13 = 4294954514;
    goto LABEL_19;
  }
  uint64_t v13 = v17(a2, a3, a4, v14, 0);
  if (!v13) {
    goto LABEL_9;
  }
LABEL_19:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v13;
}

uint64_t sgffr_createBlockBufferWithBufferReference(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, size_t a3, size_t a4, CMBlockBufferRef *blockBufferOut)
{
  if ((a3 & 0x8000000000000000) != 0) {
    return FigSignalErrorAt();
  }
  else {
    return CMBlockBufferCreateWithBufferReference(a1, a2, a3, a4, 0, blockBufferOut);
  }
}

uint64_t sgffr_getTimeNeededInNanosecondsAndReadSchedulerFlags(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, char a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (a4)
  {
    *a6 |= 0x80u;
  }
  else
  {
    switch(a3)
    {
      case 0:
        if (!*(void *)(a1 + 56)) {
          return UpTimeNanoseconds;
        }
        CMSampleBufferGetOutputDecodeTimeStamp(&v23, a2);
        CMTimeValue value = v23.value;
        CMTimeFlags flags = v23.flags;
        CMTimeScale timescale = v23.timescale;
        CMTimeEpoch epoch = v23.epoch;
        if (*(void *)(a1 + 24))
        {
          lhs.CMTimeValue value = value;
          lhs.CMTimeScale timescale = timescale;
          lhs.CMTimeFlags flags = v23.flags;
          lhs.CMTimeEpoch epoch = v23.epoch;
          CMTime rhs = *(CMTime *)(a1 + 112);
          CMTimeSubtract(&v23, &lhs, &rhs);
          CMTimeValue value = v23.value;
          CMTimeFlags flags = v23.flags;
          CMTimeScale timescale = v23.timescale;
          CMTimeEpoch epoch = v23.epoch;
        }
        else if (a5)
        {
          dictionaryRepresentatioCFIndex n = 0;
          FigSampleCursorCopyProperty(a5, @"AdvanceDecodeDelta", *MEMORY[0x1E4F1CF80], (uint64_t)&dictionaryRepresentation);
          if (dictionaryRepresentation)
          {
            memset(&v23, 0, sizeof(v23));
            CMTimeMakeFromDictionary(&v23, dictionaryRepresentation);
            CFRelease(dictionaryRepresentation);
            CMTime lhs = v23;
            CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
            if (CMTimeCompare(&lhs, &rhs) >= 1)
            {
              rhs.CMTimeValue value = value;
              rhs.CMTimeScale timescale = timescale;
              rhs.CMTimeFlags flags = flags;
              rhs.CMTimeEpoch epoch = epoch;
              CMTime v19 = v23;
              CMTimeSubtract(&lhs, &rhs, &v19);
              CMTimeValue value = lhs.value;
              CMTimeFlags flags = lhs.flags;
              CMTimeScale timescale = lhs.timescale;
              CMTimeEpoch epoch = lhs.epoch;
            }
          }
        }
        if ((flags & 0x1D) != 1) {
          return UpTimeNanoseconds;
        }
        memset(&v23, 0, sizeof(v23));
        CMTimebaseGetTime(&v18, *(CMTimebaseRef *)(a1 + 56));
        lhs.CMTimeValue value = value;
        lhs.CMTimeScale timescale = timescale;
        lhs.CMTimeFlags flags = flags;
        lhs.CMTimeEpoch epoch = epoch;
        CMTimeSubtract(&v23, &lhs, &v18);
        Effectivefloat Rate = CMTimebaseGetEffectiveRate(*(CMTimebaseRef *)(a1 + 56));
        if (EffectiveRate == 0.0)
        {
          *(_OWORD *)&v23.CMTimeValue value = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v17 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        }
        else
        {
          if (EffectiveRate == 1.0) {
            goto LABEL_22;
          }
          CMTime rhs = v23;
          CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / EffectiveRate);
          *(_OWORD *)&v23.CMTimeValue value = *(_OWORD *)&lhs.value;
          CMTimeEpoch v17 = lhs.epoch;
        }
        v23.CMTimeEpoch epoch = v17;
LABEL_22:
        CMTime rhs = v23;
        CMTime v19 = *(CMTime *)(a1 + 64);
        CMTimeSubtract(&lhs, &rhs, &v19);
        CMTime v23 = lhs;
        CMTime rhs = lhs;
        CMTimeConvertScale(&lhs, &rhs, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTime v23 = lhs;
        uint64_t UpTimeNanoseconds = v23.value + FigGetUpTimeNanoseconds();
        break;
      case 1:
      case 3:
        *a6 |= 4u;
        return 0x7FFFFFFFFFFFFFFFLL;
      case 2:
        return FigGetUpTimeNanoseconds();
      default:
        return UpTimeNanoseconds;
    }
  }
  return UpTimeNanoseconds;
}

uint64_t FigSampleCursorCopy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

void sgffr_rememberScheduledIOForSampleBuffer(const void *a1, const void *a2)
{
  MEMORY[0x19970EE10](&gFigSampleGeneratorSetUpTableOnce, sgffr_setUpTableOnce);
  MEMORY[0x19970E910](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  CFDictionarySetValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a2, a1);

  JUMPOUT(0x19970E930);
}

uint64_t FigScheduledIOBatchAddRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CMTime v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void (*)(int, void *, OpaqueCMBlockBuffer *, int, OSStatus), uint64_t, uint64_t, uint64_t, int, uint64_t))(v18 + 8);
  if (v19) {
    return v19(a1, a2, a3, a4, sgffr_markSampleBufferReady, a5, a6, a7, a8, a9);
  }
  else {
    return 4294954514;
  }
}

void sgffr_forgetScheduledIOForSampleBuffer(const void *a1)
{
  MEMORY[0x19970EE10](&gFigSampleGeneratorSetUpTableOnce, sgffr_setUpTableOnce);
  MEMORY[0x19970E910](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);

  JUMPOUT(0x19970E930);
}

void sgffr_invalidateSampleBuffer(const void *a1, uint64_t a2)
{
  MEMORY[0x19970EE10](&gFigSampleGeneratorSetUpTableOnce, sgffr_setUpTableOnce);
  MEMORY[0x19970E910](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);
  if (!Value)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);
    JUMPOUT(0x19970E930);
  }
  uint64_t v5 = Value;
  CFRetain(Value);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigSampleGeneratorSampleBufferToScheduledIOTable, a1);
  MEMORY[0x19970E930](gFigSampleGeneratorSampleBufferToScheduledIOMutex);
  uint64_t v6 = FigScheduledIOGetTypeID();
  if (v6 == CFGetTypeID(v5))
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v8 = v7 ? v7 : 0;
    uint64_t v9 = *(void (**)(const void *, uint64_t, uint64_t))(v8 + 24);
    if (v9) {
      v9(v5, a2, 2);
    }
  }

  CFRelease(v5);
}

void sgffr_attachMediaSampleAttachmentsToSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf, CFIndex a4)
{
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
  if (!SampleAttachmentsArray) {
    return;
  }
  CFArrayRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, a4);
  if (!ValueAtIndex) {
    return;
  }
  uint64_t v9 = ValueAtIndex;
  CMTimeValue value = 0;
  CFDictionaryRef theDict = 0;
  uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a2);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(unsigned int (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v12 + 48);
  if (!v13
    || (!v13(FigBaseObject, @"SampleDependencyAttributes", 0, &theDict) ? (BOOL v14 = theDict == 0) : (BOOL v14 = 1), v14))
  {
    __int16 v25 = 0;
    char v24 = 0;
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    if (!*(void *)(v16 + 64)) {
      return;
    }
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    int v22 = *(unsigned int (**)(uint64_t, char *, __int16 *, void, char *))(v18 + 64);
    if (!v22 || v22(a2, (char *)&v25 + 1, &v25, 0, &v24))
    {
      FigSignalErrorAt();
      return;
    }
    if (!HIBYTE(v25)) {
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F1F200], (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if ((_BYTE)v25) {
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F1F208], (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (v24) {
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F1F1F8], (const void *)*MEMORY[0x1E4F1CFC8]);
    }
  }
  else
  {
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sgffr_appendAttributesToDictionary, v9);
    CFRelease(theDict);
  }
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v19 = FigSampleCursorGetFigBaseObject(a2);
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CMTime v23 = *(unsigned int (**)(uint64_t, __CFString *, void, void **))(v21 + 48);
    if (v23 && !v23(v19, @"SeamIdentifier", 0, &value))
    {
      if (value)
      {
        CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F21A08], value);
        CFRelease(value);
      }
    }
  }
}

void sgffr_setSampleBufferAttachments(uint64_t a1, CMAttachmentBearerRef target, const void *a3, uint64_t a4)
{
  uint64_t valuePtr = a4;
  if (*(unsigned char *)(a1 + 33))
  {
    if (a3)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2D8], a3, 1u);
      CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2D0], v5, 1u);
      if (v5) {
        CFRelease(v5);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t FigSampleCursorCopySampleLocation_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 144);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

uint64_t sgffr_copyByteStreamForDataSourceURL(uint64_t a1, const void *a2, void **a3)
{
  FigReadWriteLockLockForWrite();
  uint64_t v6 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 48) + 24), a2);
  CMTimeValue value = v6;
  if (v6)
  {
    CFRetain(v6);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, const void *, void, void, void, void **))(v10 + 8);
      if (v11)
      {
        uint64_t v7 = v11(v8, a2, 0, 0, *MEMORY[0x1E4F1CF80], &value);
        if (!v7) {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 48) + 24), a2, value);
        }
      }
      else
      {
        uint64_t v7 = 4294954514;
      }
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
  }
  FigReadWriteLockUnlockForWrite();
  *a3 = value;
  return v7;
}

uint64_t sgffr_copyScheduledIOForByteStream(uint64_t a1, const void *a2, void *a3)
{
  FigReadWriteLockLockForRead();
  uint64_t v6 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 48) + 40), a2);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(v6);
    FigReadWriteLockUnlockForRead();
    uint64_t v8 = 0;
  }
  else
  {
    FigReadWriteLockUnlockForRead();
    FigReadWriteLockLockForWrite();
    uint64_t v9 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 48) + 40), a2);
    CMTimeValue value = v9;
    if (v9)
    {
      CFRetain(v9);
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = FigScheduledIOCreateForReadingByteStream();
      if (!v8) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 48) + 40), a2, 0);
      }
    }
    FigReadWriteLockUnlockForWrite();
    uint64_t v7 = value;
  }
  *a3 = v7;
  return v8;
}

uint64_t FigSampleCursorGetPresentationTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigSampleCursorGetDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigSampleCursorGetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 56);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

void *cvbufferBBufSourceLock(__CVBuffer *a1, size_t a2)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  if (CVPixelBufferGetHeight(a1) * BytesPerRow < a2) {
    cvbufferBBufSourceLock_cold_1();
  }

  return CVPixelBufferGetBaseAddress(a1);
}

uint64_t sgffr_setUpTableOnce()
{
  gFigSampleGeneratorSampleBufferToScheduledIOTable = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t result = FigSimpleMutexCreate();
  gFigSampleGeneratorSampleBufferToScheduledIOMutex = result;
  return result;
}

uint64_t FigSampleCursorStepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 168);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigSampleCursorGetBatchSampleTimingAndSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  BOOL v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t))(v13 + 224);
  if (!v14) {
    return 4294954514;
  }

  return v14(a1, a2, a3, a4, 0, a5, 0, a6);
}

uint64_t FigSampleCursorCopyChunkDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 152);
  if (!v20) {
    return 4294954514;
  }

  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t FigSampleCursorSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    return v11(FigBaseObject, a2, a3);
  }
  return result;
}

uint64_t sgffr_commitBatchApply(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 16);
  if (v7) {
    uint64_t result = v7(a2);
  }
  else {
    uint64_t result = 4294954514;
  }
  if (!*a3) {
    *a3 = result;
  }
  return result;
}

uint64_t figSampleGeneratorBatch_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)DerivedStorage, (CFDictionaryApplierFunction)figSampleGeneratorBatch_removeListeners, a1);
  }
  if (!*(_DWORD *)(DerivedStorage + 32))
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(void (**)(void *))(v7 + 24);
    if (v8) {
      v8(a1);
    }
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 24);
  if (v4) {
    CFRelease(v4);
  }
  FigCFWeakReferenceStore();

  return FigSimpleMutexDestroy();
}

__CFString *figSampleGeneratorBatch_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  uint64_t Count = FigCFDictionaryGetCount();
  uint64_t v6 = "open";
  uint64_t v7 = *(unsigned int *)(DerivedStorage + 32);
  if ((int)v7 > 1) {
    uint64_t v6 = "completed";
  }
  if (v7 == 1) {
    uint64_t v6 = "committed";
  }
  CFStringAppendFormat(Mutable, 0, @"FigSampleGenBatch %p(%d): batchCount=%ld state:%s(%d)", a1, v4, Count, v6, v7);
  return Mutable;
}

uint64_t figSampleGeneratorBatch_removeListeners()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListener();
}

uint64_t figSampleGeneratrBatch_completionCallback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 24), a4);
  if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 24)))
  {
    *(_DWORD *)(DerivedStorage + 32) = 2;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40));
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (1)
      {
        CFArrayRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), v8);
        OSStatus statusOut = 0;
        if (CMSampleBufferHasDataFailed(ValueAtIndex, &statusOut) || !CMSampleBufferDataIsReady(ValueAtIndex)) {
          break;
        }
        if (v7 == ++v8) {
          goto LABEL_12;
        }
      }
      if (statusOut == -16751) {
        int v10 = 4;
      }
      else {
        int v10 = 3;
      }
      *(_DWORD *)(DerivedStorage + 32) = v10;
    }
LABEL_12:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
}

uint64_t figSampleGeneratorBatch_CreateAndAddSampleBufferAtCursor(uint64_t a1, const void *a2, uint64_t a3, CMItemCount a4, int a5, uint64_t a6, int a7, char a8, uint64_t (*a9)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a10, uint64_t a11, void **a12)
{
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  if (!a1 || !a12)
  {
    uint64_t v21 = FigSignalErrorAt();
    uint64_t v19 = 0;
    goto LABEL_12;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  uint64_t v19 = (const void *)MEMORY[0x19970C720](DerivedStorage + 8);
  if (!v19 || *(_DWORD *)(DerivedStorage + 32))
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_42;
  }
  CMItemCount v33 = a4;
  if (!*(unsigned char *)(DerivedStorage + 36))
  {
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v24 = v23 ? v23 : 0;
    if (*(void *)(v24 + 144))
    {
      CFTypeRef v20 = 0;
      if (sgffr_copyCursorSampleLocationAndDataSource((uint64_t)v19, (uint64_t)a2, 0, 0, 0, 0, 0, 0, 0, 0, &cf))goto LABEL_7; {
      CFTypeRef v25 = cf;
      }
      CFTypeRef v37 = 0;
      uint64_t v32 = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
      if (*v32 && v25)
      {
        if (!CFDictionaryContainsKey(*v32, v25))
        {
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v28 = v27 ? v27 : 0;
          if (*(void *)(v28 + 48))
          {
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v30 = v29 ? v29 : 0;
            uint64_t v31 = *(unsigned int (**)(CFTypeRef, void, CFTypeRef *))(v30 + 48);
            if (v31)
            {
              if (!v31(v25, *MEMORY[0x1E4F1CF80], &v37))
              {
                CFDictionarySetValue(*v32, v25, v37);
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                if (v37)
                {
                  CFRelease(v37);
                  CFTypeRef v37 = 0;
                }
              }
            }
          }
        }
        uint64_t v26 = CFDictionaryGetValue(*v32, v25);
        CFTypeRef v37 = v26;
        if (v26)
        {
          CFRetain(v26);
          CFTypeRef v20 = v37;
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      uint64_t v21 = FigSignalErrorAt();
      CFTypeRef v20 = 0;
      if (!v21) {
        goto LABEL_7;
      }
LABEL_42:
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
      goto LABEL_12;
    }
  }
LABEL_6:
  CFTypeRef v20 = 0;
LABEL_7:
  if (sgffr_createSampleBufferAtCursorUsingBatch((uint64_t)v19, a2, a3, v33, a5, a6, a7, a8, a9, a10, a11, (uint64_t)v20, (CFTypeRef *)&value)|| !value)
  {
    uint64_t v21 = FigSignalErrorAt();
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 40), value);
    uint64_t v21 = 0;
    *a12 = value;
    CMTimeValue value = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  if (v20) {
    CFRelease(v20);
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (value) {
    CFRelease(value);
  }
  return v21;
}

uint64_t figSampleGeneratorBatch_Commit(uint64_t a1)
{
  if (!a1) {
    figSampleGeneratorBatch_Commit_cold_1();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 32) || (CFDictionaryRef v3 = *(const __CFDictionary **)DerivedStorage) == 0)
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  else if (*(unsigned char *)(DerivedStorage + 36))
  {
    *(_DWORD *)(DerivedStorage + 32) = 2;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    uint64_t v4 = 0;
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 32) = 1;
    uint64_t v6 = a1;
    uint64_t v7 = 0;
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)figSampleGeneratorBatch_commitBatchApply, &v6);
    uint64_t v4 = v7;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v4;
}

uint64_t figSampleGeneratorBatch_Cancel(uint64_t a1)
{
  if (!a1) {
    figSampleGeneratorBatch_Commit_cold_1();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 32) == 2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 32) = 4;
    uint64_t v5 = a1;
    uint64_t v6 = 0;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)DerivedStorage, (CFDictionaryApplierFunction)figSampleGeneratorBatch_cancelBatchApply, &v5);
    uint64_t v3 = v6;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v3;
}

uint64_t figSampleGeneratorBatch_GetState(uint64_t a1, _DWORD *a2)
{
  if (a1 && a2)
  {
    *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figSampleGeneratorBatch_commitBatchApply(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 24), a2);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFIndex v8 = *(uint64_t (**)(const void *))(v7 + 16);
  if (v8) {
    uint64_t result = v8(a2);
  }
  else {
    uint64_t result = 4294954514;
  }
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t figSampleGeneratorBatch_cancelBatchApply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*v6 >= 2uLL && (uint64_t v7 = (uint64_t (*)(uint64_t))v6[3]) != 0) {
    uint64_t result = v7(a2);
  }
  else {
    uint64_t result = 4294954514;
  }
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t sgffr_initializeSharedMemoryPoolManagement()
{
  uint64_t result = FigSimpleMutexCreate();
  qword_1E934D880 = result;
  byte_1E934D890 = 1;
  return result;
}

uint64_t sgffr_expediteAllClientRequestsForScheduledIO(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  CFIndex v8 = *(uint64_t (**)(uint64_t))(v7 + 32);
  if (v8)
  {
    return v8(a2);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCaptionProtocolGetProtocolID()
{
  return sFigCaptionRendererCaptionProtocolID;
}

uint64_t RegisterFigCaptionRendererCaptionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererCaptionProtocolDesc, 0, &sFigCaptionRendererCaptionProtocolID);
}

uint64_t FigStreamingAssetDownloadContentConfigGetAlternateQualifiers(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t FigStreamingAssetDownloadContentConfigSetAlternateQualifiers(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
  return 0;
}

uint64_t FigStreamingAssetDownloadContentConfigGetAlternate(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigStreamingAssetDownloadContentConfigSetAlternate(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
  return 0;
}

uint64_t FigStreamingAssetDownloadContentConfigGetMediaSelections(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t FigStreamingAssetDownloadContentConfigSetMediaSelections(uint64_t a1, const __CFArray *a2)
{
  *(void *)(a1 + 32) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  return 0;
}

uint64_t FigStreamingAssetDownloadContentConfigCreate(uint64_t a1, uint64_t *a2)
{
  dwContentConf_getTypeID();
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dwContentConf_getTypeID()
{
  long long v1 = xmmword_1E57935C8;
  if (dwContentConf_getTypeID_once != -1) {
    dispatch_once_f(&dwContentConf_getTypeID_once, &v1, (dispatch_function_t)dwConf_registerClass);
  }
  return dwContentConf_getTypeID_typeID;
}

uint64_t FigStreamingAssetDownloadContentConfigCreateCopy(const __CFAllocator *a1, void *a2, void *a3)
{
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_10:
    *a3 = v7;
    return 0;
  }
  dwContentConf_getTypeID();
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = (void *)Instance;
    CFTypeRef v8 = (CFTypeRef)a2[3];
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    v7[3] = v8;
    CFArrayRef v9 = (const __CFArray *)a2[2];
    if (v9) {
      v7[2] = CFArrayCreateCopy(a1, v9);
    }
    CFArrayRef v10 = (const __CFArray *)a2[4];
    if (v10) {
      v7[4] = CFArrayCreateCopy(a1, v10);
    }
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingAssetDownloadConfigGetPrimaryContentConfig(uint64_t a1, __CFString *a2)
{
  if (a2 == @"kFigEnvironmentalCondition_DefaultKey")
  {
    uint64_t v3 = a1 + 24;
  }
  else
  {
    if (a2 != @"kFigEnvironmentalCondition_OnExpensiveNetworkKey") {
      return 0;
    }
    uint64_t v3 = a1 + 32;
  }
  return *(void *)v3;
}

uint64_t FigStreamingAssetDownloadConfigGetDefaultPrimaryContentConfig(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigStreamingAssetDownloadConfigSetPrimaryContentConfig(uint64_t a1, CFTypeRef cf, __CFString *a3)
{
  if (a3 == @"kFigEnvironmentalCondition_DefaultKey")
  {
    if (cf) {
      CFTypeRef v5 = CFRetain(cf);
    }
    else {
      CFTypeRef v5 = 0;
    }
    uint64_t result = 0;
    *(void *)(a1 + 24) = v5;
  }
  else if (a3 == @"kFigEnvironmentalCondition_OnExpensiveNetworkKey")
  {
    if (cf) {
      CFTypeRef v6 = CFRetain(cf);
    }
    else {
      CFTypeRef v6 = 0;
    }
    uint64_t result = 0;
    *(void *)(a1 + 32) = v6;
  }
  else
  {
    return 4294950643;
  }
  return result;
}

uint64_t FigStreamingAssetDownloadConfigGetAuxConfigs(uint64_t a1, __CFString *a2)
{
  if (a2 == @"kFigEnvironmentalCondition_DefaultKey")
  {
    uint64_t v3 = a1 + 40;
  }
  else
  {
    if (a2 != @"kFigEnvironmentalCondition_OnExpensiveNetworkKey") {
      return 0;
    }
    uint64_t v3 = a1 + 48;
  }
  return *(void *)v3;
}

uint64_t FigStreamingAssetDownloadConfigGetDefaultAuxConfigs(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigStreamingAssetDownloadConfigAddAuxConfig(uint64_t a1, void *value, __CFString *a3)
{
  if (a3 == @"kFigEnvironmentalCondition_DefaultKey")
  {
    CFDictionaryRef Mutable = *(__CFArray **)(a1 + 40);
    if (Mutable
      || (CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
          (*(void *)(a1 + 40) = Mutable) != 0))
    {
LABEL_9:
      CFArrayAppendValue(Mutable, value);
      return 0;
    }
  }
  else
  {
    if (a3 != @"kFigEnvironmentalCondition_OnExpensiveNetworkKey") {
      return 4294950643;
    }
    CFDictionaryRef Mutable = *(__CFArray **)(a1 + 48);
    if (Mutable) {
      goto LABEL_9;
    }
    CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 48) = Mutable;
    if (Mutable) {
      goto LABEL_9;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForPrimary(uint64_t a1, __CFArray **a2)
{
  CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFTypeRef v5 = Mutable;
    if (*(void *)(a1 + 24)) {
      CFArrayAppendValue(Mutable, @"kFigEnvironmentalCondition_DefaultKey");
    }
    if (*(void *)(a1 + 32)) {
      CFArrayAppendValue(v5, @"kFigEnvironmentalCondition_OnExpensiveNetworkKey");
    }
    *a2 = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingAssetDownloadConfigCopyEnvironmentalConditionsForAux(uint64_t a1, __CFArray **a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFTypeRef v5 = Mutable;
    CFArrayRef v6 = *(const __CFArray **)(a1 + 40);
    if (v6 && CFArrayGetCount(v6) >= 1) {
      CFArrayAppendValue(v5, @"kFigEnvironmentalCondition_DefaultKey");
    }
    CFArrayRef v7 = *(const __CFArray **)(a1 + 48);
    if (v7)
    {
      if (CFArrayGetCount(v7) >= 1) {
        CFArrayAppendValue(v5, @"kFigEnvironmentalCondition_OnExpensiveNetworkKey");
      }
    }
    *a2 = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

xpc_object_t FigStreamingAssetDownloadConfigCopySerializedRepresentation(uint64_t a1)
{
  CFMutableDictionaryRef v18 = 0;
  xpc_object_t empty = xpc_dictionary_create_empty();
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    xpc_object_t v4 = downloadContentConfig_copySerializedRepresentation(v3, &v18);
    if (v4)
    {
      CFTypeRef v5 = v4;
      xpc_dictionary_set_value(empty, "DefaultPrimaryConfig", v4);
      xpc_release(v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    xpc_object_t v7 = downloadContentConfig_copySerializedRepresentation(v6, &v18);
    if (v7)
    {
      CFTypeRef v8 = v7;
      xpc_dictionary_set_value(empty, "OnExpensiveNetworkPrimaryConfig", v7);
      xpc_release(v8);
    }
  }
  FigXPCRelease();
  value[0] = 0;
  int v9 = downloadConfig_serializeAuxContentConfigsGuts(*(const __CFArray **)(a1 + 40), &v18, value);
  xpc_object_t v10 = value[0];
  if (v9)
  {
    FigXPCRelease();
  }
  else
  {
    if (value[0])
    {
      xpc_dictionary_set_value(empty, "DefaultAuxConfigs", value[0]);
      value[0] = 0;
      xpc_release(v10);
    }
    int v11 = downloadConfig_serializeAuxContentConfigsGuts(*(const __CFArray **)(a1 + 48), &v18, value);
    xpc_object_t v12 = value[0];
    if (v11 || !value[0])
    {
      FigXPCRelease();
      if (v11) {
        goto LABEL_15;
      }
    }
    else
    {
      xpc_dictionary_set_value(empty, "OnExpensiveNetworkAuxConfigs", value[0]);
      xpc_release(v12);
      FigXPCRelease();
    }
    xpc_dictionary_set_BOOL(empty, "OptimizesAuxiliaryContentConfigurations", *(unsigned char *)(a1 + 16) != 0);
    xpc_dictionary_set_BOOL(empty, "DownloadsInterstitialAssets", *(unsigned char *)(a1 + 17) != 0);
    FigXPCMessageSetCFString();
    FigXPCMessageSetCFData();
    long long v13 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)CMTimeValue value = *(_OWORD *)(a1 + 72);
    long long v16 = v13;
    long long v17 = *(_OWORD *)(a1 + 104);
    FigXPCMessageSetCMTimeRange();
  }
LABEL_15:
  if (v18) {
    CFRelease(v18);
  }
  return empty;
}

uint64_t FigStreamingAssetDownloadConfigCreateWithSerializedConfig(uint64_t a1, void *a2, void *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v14 = 0;
  uint64_t v5 = FigStreamingAssetDownloadConfigCreate(a1, (uint64_t *)&v14);
  if (v5) {
    goto LABEL_16;
  }
  CFTypeRef v6 = v14;
  xpc_object_t value = xpc_dictionary_get_value(a2, "DefaultPrimaryConfig");
  if (value) {
    *((void *)v6 + 3) = downloadContentConfig_deserializeAndCopyContentConfig(value, (CFMutableDictionaryRef *)&cf);
  }
  xpc_object_t v8 = xpc_dictionary_get_value(a2, "OnExpensiveNetworkPrimaryConfig");
  if (v8) {
    *((void *)v6 + 4) = downloadContentConfig_deserializeAndCopyContentConfig(v8, (CFMutableDictionaryRef *)&cf);
  }
  if ((xpc_object_t v9 = xpc_dictionary_get_value(a2, "DefaultAuxConfigs")) != 0
    && (uint64_t v5 = downloadConfig_deserializeAuxContentConfigsGuts(v9, (CFMutableDictionaryRef *)&cf, (__CFArray **)v6 + 5),
        v5)
    || (xpc_object_t v10 = xpc_dictionary_get_value(a2, "OnExpensiveNetworkAuxConfigs")) != 0
    && (uint64_t v5 = downloadConfig_deserializeAuxContentConfigsGuts(v10, (CFMutableDictionaryRef *)&cf, (__CFArray **)v6 + 6),
        v5))
  {
LABEL_16:
    uint64_t v11 = v5;
  }
  else
  {
    *((unsigned char *)v6 + 16) = xpc_dictionary_get_BOOL(a2, "OptimizesAuxiliaryContentConfigurations");
    *((unsigned char *)v6 + 17) = xpc_dictionary_get_BOOL(a2, "DownloadsInterstitialAssets");
    FigXPCMessageCopyCFString();
    FigXPCMessageCopyCFData();
    FigXPCMessageGetCMTimeRange();
    uint64_t v11 = 0;
    *a3 = v6;
    CFTypeRef v14 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v11;
}

uint64_t FigStreamingAssetDownloadConfigCreate(uint64_t a1, uint64_t *a2)
{
  dwconf_getTypeID();
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingAssetDownloadConfigGetOptimizesAuxiliaryContentConfigurations(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t FigStreamingAssetDownloadConfigSetOptimizesAuxiliaryContentConfigurations(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 16) = a2;
  return 0;
}

uint64_t FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t FigStreamingAssetDownloadConfigSetDownloadsInterstitialAssets(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 17) = a2;
  return 0;
}

CFTypeRef FigStreamingAssetDownloadConfigCopyAssetNameAndImage(uint64_t a1, void *a2, void *a3)
{
  CFTypeRef v6 = *(CFTypeRef *)(a1 + 56);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  *a2 = v6;
  CFTypeRef result = *(CFTypeRef *)(a1 + 64);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *a3 = result;
  return result;
}

CFTypeRef FigStreamingAssetDownloadConfigSetAssetNameAndImage(uint64_t a1, CFTypeRef cf, const void *a3)
{
  if (cf) {
    CFTypeRef v5 = CFRetain(cf);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(a1 + 56) = v5;
  if (a3) {
    CFTypeRef result = CFRetain(a3);
  }
  else {
    CFTypeRef result = 0;
  }
  *(void *)(a1 + 64) = result;
  return result;
}

__n128 FigStreamingAssetDownloadConfigGetTimeRange@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 104);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 FigStreamingAssetDownloadConfigSetTimeRange(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 88) = v3;
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t dwconf_getTypeID()
{
  long long v1 = xmmword_1E57935D8;
  if (dwconf_getTypeID_once != -1) {
    dispatch_once_f(&dwconf_getTypeID_once, &v1, (dispatch_function_t)dwConf_registerClass);
  }
  return dwconf_getTypeID_typeID;
}

uint64_t FigStreamingAssetDownloadConfigCreateCopy(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_13:
    *a3 = v7;
    return 0;
  }
  dwconf_getTypeID();
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    CFDataRef v8 = *(const __CFData **)(a2 + 64);
    if (v8) {
      *(void *)(Instance + 64) = CFDataCreateCopy(a1, v8);
    }
    CFStringRef v9 = *(const __CFString **)(a2 + 56);
    if (v9) {
      *(void *)(v7 + 56) = CFStringCreateCopy(a1, v9);
    }
    CFArrayRef v10 = *(const __CFArray **)(a2 + 40);
    if (v10) {
      *(void *)(v7 + 40) = CFArrayCreateMutableCopy(a1, 0, v10);
    }
    CFArrayRef v11 = *(const __CFArray **)(a2 + 48);
    if (v11) {
      *(void *)(v7 + 48) = CFArrayCreateMutableCopy(a1, 0, v11);
    }
    *(_WORD *)(v7 + 16) = *(_WORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a2 + 72);
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v7 + 88) = v13;
    *(_OWORD *)(v7 + 72) = v12;
    FigStreamingAssetDownloadContentConfigCreateCopy(a1, *(void **)(a2 + 24), (void *)(v7 + 24));
    FigStreamingAssetDownloadContentConfigCreateCopy(a1, *(void **)(a2 + 32), (void *)(v7 + 32));
    goto LABEL_13;
  }

  return FigSignalErrorAt();
}

void dwContentConf_finalize(void *a1)
{
  long long v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }
  xpc_object_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
  }
}

__CFString *dwContentConf_copyDesc(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  xpc_object_t v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"<");
    CFStringRef v5 = CFCopyDescription(*(CFTypeRef *)(a1 + 24));
    if (v5)
    {
      CFStringRef v6 = v5;
      uint64_t v7 = FigCFStringCopyWithIndent();
      if (v7)
      {
        CFDataRef v8 = (const void *)v7;
        CFStringAppendFormat(v4, 0, @"\n%@", v7);
        CFRelease(v8);
      }
      CFRelease(v6);
    }
    CFArrayRef v9 = *(const __CFArray **)(a1 + 16);
    if (v9)
    {
      CFIndex Count = CFArrayGetCount(v9);
      CFArrayRef v11 = (void *)MEMORY[0x199711A30]();
      if (Count >= 1)
      {
        uint64_t v28 = v11;
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            CFStringRef v14 = CFCopyDescription((CFTypeRef)[ValueAtIndex _predicate]);
          }
          else {
            CFStringRef v14 = CFStringCreateWithCString(v2, (const char *)objc_msgSend((id)objc_msgSend(ValueAtIndex, "description"), "UTF8String"), 0x8000100u);
          }
          CFStringRef v15 = v14;
          if (v14)
          {
            uint64_t v16 = FigCFStringCopyWithIndent();
            if (v16)
            {
              long long v17 = (const void *)v16;
              CFStringAppendFormat(v4, 0, @"\n%@", v16);
              CFRelease(v17);
            }
            CFRelease(v15);
          }
        }
        CFArrayRef v11 = v28;
      }
    }
    else
    {
      CFArrayRef v11 = (void *)MEMORY[0x199711A30]();
    }
    CFArrayRef v18 = *(const __CFArray **)(a1 + 32);
    if (v18)
    {
      CFIndex v19 = CFArrayGetCount(v18);
      if (v19 >= 1)
      {
        CFIndex v20 = v19;
        for (CFIndex j = 0; j != v20; ++j)
        {
          CFArrayRef v22 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), j);
          uint64_t v23 = FigMediaSelectionArrayCopyDescription(v2, v22);
          if (v23)
          {
            uint64_t v24 = v23;
            uint64_t v25 = FigCFStringCopyWithIndent();
            if (v25)
            {
              uint64_t v26 = (const void *)v25;
              CFStringAppendFormat(v4, 0, @"\n%@", v25);
              CFRelease(v26);
            }
            CFRelease(v24);
          }
        }
      }
    }
    CFStringAppendFormat(v4, 0, @"\n>");
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

uint64_t dwConf_registerClass(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

xpc_object_t downloadContentConfig_copySerializedRepresentation(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (void *)MEMORY[0x199711A30]();
  xpc_object_t value = 0;
  xpc_object_t empty = xpc_dictionary_create_empty();
  if (!empty)
  {
    FigSignalErrorAt();
    goto LABEL_19;
  }
  uint64_t v16 = a2;
  xpc_object_t v6 = xpc_array_create_empty();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v7 = *(void **)(a1 + 16);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v22 = 0;
        if (([(id)objc_opt_class() conformsToProtocol:&unk_1EE58F860] & 1) != 0
          && [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v12 requiringSecureCoding:1 error:&v22])
        {
          long long v13 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          xpc_array_append_value(v6, v13);
          xpc_release(v13);
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v23 count:16];
    }
    while (v9);
  }
  if (xpc_array_get_count(v6)) {
    xpc_dictionary_set_value(empty, "SerializedQualifiersKey", v6);
  }
  uint64_t v14 = *(void *)(a1 + 24);
  if (!v14) {
    goto LABEL_18;
  }
  if (!FigAlternateCopyAsXPCObjectWithContext(v14, v16, &value))
  {
    if (value)
    {
      xpc_dictionary_set_value(empty, "SerializedAlternateKey", value);
      xpc_release(value);
    }
LABEL_18:
    FigXPCMessageSetCFArray();
  }
LABEL_19:
  FigXPCRelease();
  return empty;
}

uint64_t downloadConfig_serializeAuxContentConfigsGuts(const __CFArray *a1, CFMutableDictionaryRef *a2, void *a3)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      xpc_object_t empty = 0;
      CFIndex v9 = 0;
      while (1)
      {
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
        xpc_object_t v11 = downloadContentConfig_copySerializedRepresentation((uint64_t)ValueAtIndex, a2);
        if (v11)
        {
          uint64_t v12 = v11;
          if (!empty)
          {
            xpc_object_t empty = xpc_array_create_empty();
            if (!empty)
            {
              uint64_t v13 = FigSignalErrorAt();
              goto LABEL_12;
            }
          }
          xpc_array_append_value(empty, v12);
          xpc_release(v12);
        }
        if (v7 == ++v9) {
          goto LABEL_11;
        }
      }
    }
  }
  xpc_object_t empty = 0;
LABEL_11:
  uint64_t v13 = 0;
  *a3 = empty;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  return v13;
}

uint64_t downloadContentConfig_deserializeAndCopyContentConfig(void *a1, CFMutableDictionaryRef *a2)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  xpc_object_t v4 = (void *)MEMORY[0x199711A30]();
  CFAllocatorRef v5 = CFGetAllocator(0);
  if (!FigStreamingAssetDownloadContentConfigCreate((uint64_t)v5, &v28))
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA48] array];
    if (v6)
    {
      CFIndex v7 = (void *)v6;
      uint64_t v25 = a2;
      uint64_t v26 = a1;
      uint64_t v27 = v4;
      xpc_object_t value = xpc_dictionary_get_value(a1, "SerializedQualifiersKey");
      int64_t count = xpc_array_get_count(value);
      if (count >= 1)
      {
        int64_t v10 = count;
        for (size_t i = 0; v10 != i; ++i)
        {
          xpc_array_get_value(value, i);
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          v32[0] = 0;
          uint64_t v12 = _CFXPCCreateCFObjectFromXPCObject();
          if (!v12)
          {
            FigSignalErrorAt();
            continue;
          }
          uint64_t v13 = (void *)v12;
          uint64_t v14 = (void *)[MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v12 error:&v30];
          if (v14)
          {
            uint64_t v15 = (uint64_t)v14;
            uint64_t v29 = 0;
            uint64_t v16 = [v14 _predicate];
            if (v16
              && (long long v17 = (void *)v16,
                  (long long v18 = [[FigAlternatePredicateValidator alloc] initWithPredicate:v16]) != 0))
            {
              long long v19 = v18;
              BOOL v20 = [(FigAlternatePredicateValidator *)v18 validateWithError:&v29];

              if (v20) {
                [v17 allowEvaluation];
              }
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
            uint64_t v15 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v13 error:&v31];
            if (!v15)
            {
              uint64_t v15 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v13 error:v32];

              if (!v15) {
                continue;
              }
              goto LABEL_13;
            }
          }

LABEL_13:
          [v7 addObject:v15];
        }
      }
      if ([v7 count])
      {
        CFTypeRef v21 = CFRetain(v7);
        uint64_t v22 = v28;
        *(void *)(v28 + 16) = v21;
      }
      else
      {
        uint64_t v22 = v28;
      }
      xpc_object_t v4 = v27;
      xpc_object_t v23 = xpc_dictionary_get_value(v26, "SerializedAlternateKey");
      if (v23) {
        FigAlternateCreateWithXPCObject(v23, v25, (CFTypeRef *)(v22 + 24));
      }
      FigXPCMessageCopyCFArray();
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return v28;
}

uint64_t downloadConfig_deserializeAuxContentConfigsGuts(void *a1, CFMutableDictionaryRef *a2, __CFArray **a3)
{
  int64_t count = xpc_array_get_count(a1);
  if (count >= 1)
  {
    int64_t v7 = count;
    CFMutableArrayRef Mutable = 0;
    size_t v9 = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    xpc_object_t v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      xpc_object_t value = xpc_array_get_value(a1, v9);
      uint64_t v13 = downloadContentConfig_deserializeAndCopyContentConfig(value, a2);
      if (v13)
      {
        uint64_t v14 = (const void *)v13;
        if (!Mutable)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v10, 0, v11);
          if (!Mutable)
          {
            uint64_t v16 = FigSignalErrorAt();
            CFRelease(v14);
            return v16;
          }
        }
        CFArrayAppendValue(Mutable, v14);
        CFRelease(v14);
      }
      if (v7 == ++v9) {
        goto LABEL_10;
      }
    }
  }
  CFMutableArrayRef Mutable = 0;
LABEL_10:
  *a3 = Mutable;
  return 0;
}

void dwConf_finalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  xpc_object_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  CFAllocatorRef v5 = (const void *)a1[6];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[7];
  if (v6) {
    CFRelease(v6);
  }
  int64_t v7 = (const void *)a1[8];
  if (v7)
  {
    CFRelease(v7);
  }
}

__CFString *dwConf_copyDesc(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    CFStringRef v4 = CFCopyDescription(*(CFTypeRef *)(a1 + 24));
    if (v4)
    {
      CFStringRef v5 = v4;
      CFStringAppendFormat(Mutable, 0, @"\nPrimary:\n%@", v4);
      CFRelease(v5);
    }
    CFArrayRef v6 = *(const __CFArray **)(a1 + 40);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0;
        CFIndex v10 = Count;
        do
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v9);
          CFStringRef v12 = CFCopyDescription(ValueAtIndex);
          if (v12)
          {
            CFStringRef v13 = v12;
            CFStringAppendFormat(Mutable, 0, @"\nAux %d/%d:\n%@", v9, v10, v12);
            CFRelease(v13);
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
    if ((*(unsigned char *)(a1 + 84) & 1) != 0
      && (*(unsigned char *)(a1 + 108) & 1) != 0
      && !*(void *)(a1 + 112)
      && (*(void *)(a1 + 96) & 0x8000000000000000) == 0)
    {
      long long v15 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)&range.start.xpc_object_t value = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v15;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 104);
      CFStringRef v16 = CMTimeRangeCopyDescription(v2, &range);
      CFStringAppendFormat(Mutable, 0, @"\nTimeRange: %@", v16);
      if (v16) {
        CFRelease(v16);
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigVideoCompositorCreatevImage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  FigVideoCompositorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4) {
    return v4;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFArrayRef v6 = Mutable;
  xpc_object_t value = 0;
  long long v11 = *(_OWORD *)"v024f024ARGB ";
  qmemcpy(v12, "024x02fx024p02fpr46l", sizeof(v12));
  uint64_t DesiredSourcePixelBufferAttributes = FigVideoCompositorCreateDesiredSourcePixelBufferAttributes((uint64_t)&v11, 9, (CFMutableDictionaryRef *)&value);
  if (!DesiredSourcePixelBufferAttributes) {
    CFDictionarySetValue(v6, @"SourcePixelBufferAttributes", value);
  }
  if (value) {
    CFRelease(value);
  }
  if (DesiredSourcePixelBufferAttributes)
  {
    CFRelease(v6);
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t DerivedStorage = v6;
    *(_OWORD *)(DerivedStorage + 56) = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
    *(_OWORD *)(DerivedStorage + 88) = 0u;
    *(_OWORD *)(DerivedStorage + 104) = 0u;
    *(_OWORD *)(DerivedStorage + 120) = 0u;
    *(_OWORD *)(DerivedStorage + 136) = 0u;
    *(_OWORD *)(DerivedStorage + 152) = 0u;
    *(_OWORD *)(DerivedStorage + 168) = 0u;
    *a3 = 0;
  }
  return DesiredSourcePixelBufferAttributes;
}

void vivc_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 16);
  if (v2) {
    CFRelease(v2);
  }
  via_cleanupVImageAdaptor(DerivedStorage + 56);
  via_cleanupVImageAdaptor(DerivedStorage + 120);
  long long v3 = *(void **)(DerivedStorage + 48);

  free(v3);
}

__CFString *vivc_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @"<FigVideoCompositor_vImage %p>\n", a1);
  CFDictionaryApplyFunction(*DerivedStorage, (CFDictionaryApplierFunction)vivc_appendDebugDescriptionOfProperty, Mutable);
  return Mutable;
}

uint64_t vivc_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    int64_t v7 = (CFDictionaryRef *)DerivedStorage;
    if (FigCFEqual())
    {
      *a4 = *MEMORY[0x1E4F1CFD0];
    }
    else
    {
      if (FigCFEqual())
      {
        UInt32 = (const void *)FigCFNumberCreateUInt32();
      }
      else
      {
        UInt32 = CFDictionaryGetValue(*v7, a2);
        if (UInt32) {
          UInt32 = CFRetain(UInt32);
        }
      }
      *a4 = UInt32;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vivc_SetProperty(const void *a1, const void *a2, const void *a3)
{
  cf[6] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (a2 && a3)
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v8 = 0;
    cf[1] = @"RenderDimensions";
    CFTypeRef cf[2] = @"RenderPixelAspectRatio";
    cf[3] = @"RenderEdgeProcessingPixels";
    cf[4] = @"DestinationPixelBufferDesiredAttributes";
    cf[5] = @"RenderScale";
    while (!FigCFEqual())
    {
      v8 += 8;
      if (v8 == 40) {
        goto LABEL_12;
      }
    }
    CFGetAllocator(a1);
    vivc_CopyProperty((uint64_t)a1, a2, v9, cf);
    if (!FigCFEqual())
    {
      CFIndex v10 = *(const void **)(v7 + 8);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v7 + 8) = 0;
      }
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
LABEL_12:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)v7, a2, a3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

double via_cleanupVImageAdaptor(uint64_t a1)
{
  if (a1)
  {
    via_releaseVImageBuffer(a1);
    CFAllocatorRef v2 = *(const void **)(a1 + 48);
    if (v2) {
      CFRelease(v2);
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t via_releaseVImageBuffer(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  CFAllocatorRef v2 = *(__CVBuffer **)(result + 32);
  if (!v2)
  {
    double result = *(void *)v1;
    if (!*(void *)v1) {
      return result;
    }
    free((void *)result);
    goto LABEL_15;
  }
  if (!*(unsigned char *)(v1 + 40))
  {
    double result = CVPixelBufferLockBaseAddress(v2, 0);
    if (result) {
      return result;
    }
    *(unsigned char *)(v1 + 40) = 1;
    CFAllocatorRef v2 = *(__CVBuffer **)(v1 + 32);
  }
  BaseAddress = CVPixelBufferGetBaseAddress(v2);
  double result = CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v1 + 32), 0);
  if (!result)
  {
    *(unsigned char *)(v1 + 40) = 0;
    uint64_t v4 = *(const void **)(v1 + 32);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v1 + 32) = 0;
    }
    if (BaseAddress != *(void **)v1)
    {
      return FigSignalErrorAt();
    }
LABEL_15:
    double result = 0;
    *(void *)uint64_t v1 = 0;
  }
  return result;
}

void vivc_appendDebugDescriptionOfProperty(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
}

uint64_t vivc_RenderFrame(const void *a1, int a2, _DWORD *a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v183.CGFloat width = 0.0;
  v183.double height = 0.0;
  CFTypeRef v182 = 0;
  long long v15 = (CGFloat *)MEMORY[0x1E4F1DAB8];
  long long v169 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  long long v170 = *MEMORY[0x1E4F1DAB8];
  long long v179 = *MEMORY[0x1E4F1DAB8];
  long long v180 = v169;
  long long v168 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  long long v181 = v168;
  CFTypeRef v178 = 0;
  if (!DerivedStorage)
  {
    uint64_t PixelBuffer = FigSignalErrorAt();
    goto LABEL_93;
  }
  uint64_t v16 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 24))
  {
    Renderunint64_t Dimensions = FigSignalErrorAt();
    goto LABEL_100;
  }
  Renderunint64_t Dimensions = FigVideoCompositorPropertiesGetRenderDimensions(*(const __CFDictionary **)DerivedStorage, &v183);
  if (RenderDimensions) {
    goto LABEL_100;
  }
  *(_OWORD *)&v199.CGFloat a = *(_OWORD *)a9;
  v199.c = *(CGFloat *)(a9 + 16);
  Renderunint64_t Dimensions = FigVCLayerDefinitionCreateLayerDefinitionArray(a2, a3, a4, a8, v183.width, v183.height, (uint64_t)&v199, (__CFArray **)&v182);
  if (RenderDimensions) {
    goto LABEL_100;
  }
  Renderunint64_t Dimensions = FigVideoCompositorCopyDestinationPixelBufferWithoutComposingIfPossible(*(const __CFDictionary **)v16, (const __CFArray *)v182, &v178);
  if (RenderDimensions) {
    goto LABEL_100;
  }
  if (v178) {
    goto LABEL_7;
  }
  CFArrayRef v19 = (const __CFArray *)v182;
  uint64_t v20 = CMBaseObjectGetDerivedStorage();
  pixelBufferOut.CGFloat a = 0.0;
  *(_OWORD *)&v199.CGFloat a = *(_OWORD *)"024x02fx024p02fpv024f024ARGB ";
  *(_OWORD *)&t1.CGFloat a = *(_OWORD *)"v024f024ARGB ";
  CFTypeRef v21 = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if ((int)FigVideoCompositorGetBestBitDepthForCompositorPropertiesAndLayerDefinitions(*v21, v19) <= 8) {
    p_CGAffineTransform t1 = &t1;
  }
  else {
    p_CGAffineTransform t1 = &v199;
  }
  if (!v19) {
    goto LABEL_101;
  }
  if (CFArrayGetCount(v19) >= 1)
  {
    CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v19, 0);
    if (ValueAtIndex)
    {
      Sourceuint64_t PixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
      if (SourcePixelBuffer)
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(SourcePixelBuffer);
        uint64_t v26 = 0;
        while (*(_DWORD *)((char *)&p_t1->a + v26) != PixelFormatType)
        {
          v26 += 4;
          if (v26 == 16) {
            goto LABEL_20;
          }
        }
        *(_DWORD *)((char *)&p_t1->a + v26) = LODWORD(p_t1->a);
        LODWORD(p_t1->a) = PixelFormatType;
        goto LABEL_20;
      }
    }
LABEL_101:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_23;
  }
LABEL_20:
  CFAllocatorRef v27 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v27, 4, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    for (uint64_t i = 0; i != 16; i += 4)
      FigCFArrayAppendInt32();
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_23:
  uint64_t v30 = (CVPixelBufferPoolRef *)(v20 + 8);
  uint64_t v31 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(void *)(v20 + 8))
  {
    int v32 = FigCFEqual();
    CMItemCount v33 = *(const void **)(v20 + 8);
    if (v32)
    {
      if (v33) {
        goto LABEL_34;
      }
    }
    else if (v33)
    {
      CFRelease(v33);
      *uint64_t v30 = 0;
    }
  }
  uint64_t DestinationPixelBufferPool = FigVideoCompositorCreateDestinationPixelBufferPool(*(const __CFDictionary **)v20, @"vimage-vc-output", Mutable, (void *)(v20 + 8), 0);
  if (DestinationPixelBufferPool)
  {
    uint64_t PixelBuffer = DestinationPixelBufferPool;
    goto LABEL_38;
  }
  uint64_t v35 = *(const void **)(v20 + 16);
  *(void *)(v20 + 16) = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  if (v35) {
    CFRelease(v35);
  }
LABEL_34:
  uint64_t PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(*v31, *v30, (CVPixelBufferRef *)&pixelBufferOut);
  CGFloat a = pixelBufferOut.a;
  if (PixelBuffer
    || (uint64_t PixelBuffer = FigVideoCompositorSetDestinationPixelBufferColorProperties(*(__CVBuffer **)&pixelBufferOut.a, *(CFDictionaryRef *)v20, v19), a = pixelBufferOut.a, PixelBuffer)|| (uint64_t PixelBuffer = FigVideoCompositorSetDestinationPixelBufferGeometricProperties(*(__CVBuffer **)&pixelBufferOut.a, *(const __CFDictionary **)v20), a = pixelBufferOut.a, PixelBuffer))
  {
    if (a != 0.0) {
      CFRelease(*(CFTypeRef *)&a);
    }
  }
  else
  {
    CFTypeRef v178 = *(CFTypeRef *)&pixelBufferOut.a;
    pixelBufferOut.CGFloat a = 0.0;
  }
LABEL_38:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (PixelBuffer) {
    goto LABEL_91;
  }
  long long v196 = xmmword_194995D60;
  Renderunint64_t Dimensions = FigVideoCompositionInstructionGetBackgroundColorARGB(a8, (uint64_t)&v196);
  if (RenderDimensions
    || (Renderunint64_t Dimensions = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(*(const __CFDictionary **)v16, 0, &v179, 0), RenderDimensions))
  {
LABEL_100:
    uint64_t PixelBuffer = RenderDimensions;
    goto LABEL_91;
  }
  CFArrayRef theArray = (const __CFArray *)v182;
  CFTypeRef v37 = (__CVBuffer *)v178;
  *(_OWORD *)&v177.CGFloat a = v179;
  *(_OWORD *)&v177.c = v180;
  *(_OWORD *)&v177.tx = v181;
  memset(&dest, 0, sizeof(dest));
  pixelTransferSessionOut = (VTPixelTransferSessionRef *)CMBaseObjectGetDerivedStorage();
  OSType v38 = CVPixelBufferGetPixelFormatType(v37);
  CFAllocatorRef allocator = *v31;
  CFDictionaryRef v39 = CVPixelFormatDescriptionCreateWithPixelFormatType(*v31, v38);
  if (v39)
  {
    CFDictionaryRef v42 = v39;
    if (CFDictionaryGetValue(v39, (const void *)*MEMORY[0x1E4F24E20])) {
      int UInt64 = FigCFNumberGetUInt64();
    }
    else {
      int UInt64 = 0;
    }
    CFRelease(v42);
  }
  else
  {
    int UInt64 = 0;
  }
  if (UInt64 >= 9) {
    int v44 = 16;
  }
  else {
    int v44 = 8;
  }
  CFStringRef v45 = pixelTransferSessionOut;
  if (*((_DWORD *)pixelTransferSessionOut + 28) != v44)
  {
    via_releaseVImageBuffer((uint64_t)(pixelTransferSessionOut + 7));
    CFStringRef v45 = pixelTransferSessionOut;
    *((_DWORD *)pixelTransferSessionOut + 28) = v44;
  }
  uint64_t v46 = (uint64_t)(v45 + 15);
  uint64_t v165 = (vImage_Buffer *)(v45 + 15);
  if (*((_DWORD *)v45 + 44) != v44)
  {
    via_releaseVImageBuffer(v46);
    uint64_t v46 = (uint64_t)v165;
    *((_DWORD *)pixelTransferSessionOut + 44) = v44;
  }
  v40.i32[0] = UInt64;
  v41.i32[0] = 9;
  int v185 = v44;
  int8x16_t v186 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v41, v40), 0), (int8x16_t)xmmword_194995D50, (int8x16_t)xmmword_194995D40);
  size_t v47 = (CFStringRef *)MEMORY[0x1E4F24C18];
  buffer = v37;
  if (v37)
  {
    via_releaseVImageBuffer(v46);
    signed int v48 = CVPixelBufferGetPixelFormatType(v37);
    CFStringRef v49 = *v47;
    CFTypeRef v50 = CVBufferCopyAttachment(v37, *v47, 0);
    int Width = CVPixelBufferGetWidth(v37);
    uint64_t v52 = v37;
    int v53 = Width;
    int Height = CVPixelBufferGetHeight(v52);
    uint64_t v55 = pixelTransferSessionOut;
    size_t v56 = Height;
    uint64_t v57 = (OpaqueVTPixelTransferSession *)v53;
    if (*((_DWORD *)pixelTransferSessionOut + 44) != 8) {
      goto LABEL_74;
    }
    if (FigCFEqual() || FigCFEqual())
    {
      uint64_t v55 = pixelTransferSessionOut;
      if (v48 > 875704437)
      {
        if (v48 > 1714696751)
        {
          if (v48 == 1714696752) {
            goto LABEL_69;
          }
          int v58 = 2033463856;
        }
        else
        {
          if (v48 == 875704438) {
            goto LABEL_69;
          }
          int v58 = 1111970369;
        }
LABEL_68:
        if (v48 == v58) {
          goto LABEL_69;
        }
LABEL_74:
        CGFloat v61 = *MEMORY[0x1E4F24BC8];
        v199.CGFloat a = *(CGFloat *)MEMORY[0x1E4F24A90];
        v199.b = v61;
        *(void *)&v199.c = v49;
        if (*((_DWORD *)v55 + 44) == 16) {
          OSType v62 = 1815491698;
        }
        else {
          OSType v62 = 32;
        }
        uint64_t v63 = v55 + 19;
        uint64_t v64 = CVPixelBufferCreate(allocator, v53, v56, v62, 0, v55 + 19);
        if (v64)
        {
          uint64_t PixelBuffer = v64;
          uint64_t v59 = v165;
        }
        else
        {
          uint64_t v65 = v16;
          for (uint64_t j = 0; j != 24; j += 8)
          {
            CFStringRef v67 = *(const __CFString **)((char *)&v199.a + j);
            CFTypeRef v68 = CVBufferCopyAttachment(buffer, v67, 0);
            if (v68)
            {
              uint64_t v69 = v68;
              CVBufferSetAttachment(*v63, v67, v68, kCVAttachmentMode_ShouldPropagate);
              CFRelease(v69);
            }
          }
          uint64_t v70 = CVPixelBufferLockBaseAddress(*v63, 0);
          if (v70)
          {
            uint64_t PixelBuffer = v70;
            uint64_t v16 = v65;
          }
          else
          {
            *((unsigned char *)pixelTransferSessionOut + 160) = 1;
            BaseAddress = (OpaqueVTPixelTransferSession *)CVPixelBufferGetBaseAddress(pixelTransferSessionOut[19]);
            pixelTransferSessionOut[16] = (VTPixelTransferSessionRef)v56;
            pixelTransferSessionOut[17] = v57;
            pixelTransferSessionOut[15] = BaseAddress;
            pixelTransferSessionOut[18] = (VTPixelTransferSessionRef)CVPixelBufferGetBytesPerRow(pixelTransferSessionOut[19]);
            uint64_t v72 = vifa_vImageFill(&v185, v165, (uint64_t)&v196);
            uint64_t v16 = v65;
            if (!v72)
            {
              uint64_t v59 = v165;
              size_t v47 = (CFStringRef *)MEMORY[0x1E4F24C18];
LABEL_85:
              uint64_t PixelBuffer = 0;
              long long v73 = *(_OWORD *)&v59->width;
              *(_OWORD *)&dest.datCGFloat a = *(_OWORD *)&v59->data;
              *(_OWORD *)&dest.CGFloat width = v73;
              goto LABEL_86;
            }
            uint64_t PixelBuffer = v72;
          }
          uint64_t v59 = v165;
          size_t v47 = (CFStringRef *)MEMORY[0x1E4F24C18];
        }
LABEL_86:
        if (v50)
        {
          CFRelease(v50);
          uint64_t v59 = v165;
        }
        if (PixelBuffer)
        {
LABEL_89:
          via_releaseVImageBuffer((uint64_t)v59);
LABEL_90:
          via_releaseVImageBuffer((uint64_t)v165);
          goto LABEL_91;
        }
        goto LABEL_105;
      }
      if (v48 != 32 && v48 != 846624121)
      {
        int v58 = 875704422;
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v55 = pixelTransferSessionOut;
      if (v48 != 1111970369 && v48 != 32) {
        goto LABEL_74;
      }
    }
LABEL_69:
    uint64_t v59 = v165;
    uint64_t PixelBuffer = MEMORY[0x1997121D0](v165, v56, v53, (4 * *((_DWORD *)v55 + 44)), 0);
    if (PixelBuffer) {
      goto LABEL_86;
    }
    uint64_t v60 = vifa_vImageFill(&v185, v165, (uint64_t)&v196);
    uint64_t v59 = v165;
    if (v60)
    {
      uint64_t PixelBuffer = v60;
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  uint64_t v59 = v165;
  uint64_t PixelBuffer = FigSignalErrorAt();
  if (PixelBuffer) {
    goto LABEL_89;
  }
LABEL_105:
  CFIndex Count = CFArrayGetCount(theArray);
  CFStringRef key = *v47;
  CFStringRef v163 = (const __CFString *)*MEMORY[0x1E4F24A10];
  CFTypeRef v160 = (CFTypeRef)*MEMORY[0x1E4F24A38];
  CFStringRef v162 = (const __CFString *)*MEMORY[0x1E4F45118];
  CMTimeValue v161 = (const void *)*MEMORY[0x1E4F1CFC8];
  CGFloat v76 = *v15;
  CGFloat v77 = v15[1];
  CGFloat v78 = v15[2];
  CGFloat v79 = v15[3];
  CGFloat v80 = v15[4];
  CGFloat v81 = v15[5];
  while (Count-- >= 1)
  {
    uint64_t v83 = CFArrayGetValueAtIndex(theArray, Count);
    CGAffineTransform v184 = v177;
    memset(&src, 0, sizeof(src));
    memset(&srcTop, 0, sizeof(srcTop));
    uint64_t v84 = CMBaseObjectGetDerivedStorage();
    uint64_t v85 = v84 + 56;
    CFTypeRef v86 = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)v83);
    if (!v86)
    {
      uint64_t PixelBuffer = 4294954792;
      goto LABEL_206;
    }
    CMTimeValue v87 = v86;
    memset(&v199, 0, 40);
    signed int v88 = CVPixelBufferGetPixelFormatType(v86);
    CFTypeRef v174 = CVBufferCopyAttachment(v87, key, 0);
    uint64_t v89 = via_releaseVImageBuffer(v85);
    CFIndex v173 = Count;
    uint64_t v175 = (uint64_t)v83;
    if (v89) {
      goto LABEL_203;
    }
    if (*(_DWORD *)(v84 + 112) != 8) {
      goto LABEL_149;
    }
    if (FigCFEqual() || FigCFEqual())
    {
      if (v88 <= 875704437)
      {
        if (v88 == 32 || v88 == 846624121) {
          goto LABEL_122;
        }
        int v90 = 875704422;
      }
      else if (v88 > 1714696751)
      {
        if (v88 == 1714696752) {
          goto LABEL_122;
        }
        int v90 = 2033463856;
      }
      else
      {
        if (v88 == 875704438) {
          goto LABEL_122;
        }
        int v90 = 1111970369;
      }
      if (v88 != v90) {
        goto LABEL_149;
      }
    }
    else if (v88 != 1111970369 && v88 != 32)
    {
LABEL_149:
      int v110 = CVPixelBufferGetWidth(v87);
      int v111 = CVPixelBufferGetHeight(v87);
      if (*(_DWORD *)(v84 + 112) == 16) {
        OSType v112 = 1815491698;
      }
      else {
        OSType v112 = 32;
      }
      size_t v113 = v110;
      uint64_t v114 = v111;
      CFTypeRef v115 = (CVPixelBufferRef *)(v84 + 88);
      uint64_t v89 = CVPixelBufferCreate(allocator, v113, v111, v112, 0, (CVPixelBufferRef *)(v84 + 88));
      if (!v89)
      {
        uint64_t v89 = CVPixelBufferLockBaseAddress(*v115, 0);
        if (!v89)
        {
          *(unsigned char *)(v84 + 96) = 1;
          *(void *)(v84 + 64) = v114;
          *(void *)(v84 + 72) = v113;
          *(void *)(v84 + 56) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v84 + 88));
          size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(v84 + 88));
          uint64_t v117 = *(void *)(v84 + 104);
          *(void *)(v84 + 80) = BytesPerRow;
          if (v117) {
            goto LABEL_157;
          }
          uint64_t v89 = VTPixelTransferSessionCreate(allocator, (VTPixelTransferSessionRef *)(v84 + 104));
          if (!v89)
          {
            VTSessionSetProperty(*(VTSessionRef *)(v84 + 104), v162, v161);
LABEL_157:
            uint64_t v89 = CVPixelBufferUnlockBaseAddress(*v115, 0);
            if (!v89)
            {
              *(unsigned char *)(v84 + 96) = 0;
              uint64_t v89 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v84 + 104), v87, *(CVPixelBufferRef *)(v84 + 88));
              if (!v89)
              {
                uint64_t v89 = CVPixelBufferLockBaseAddress(*v115, 0);
                if (!v89)
                {
                  uint64_t v101 = 0;
                  CGColorSpaceRef ColorSpaceFromAttachments = 0;
                  *(unsigned char *)(v84 + 96) = 1;
                  long long v105 = 0uLL;
LABEL_161:
                  uint64_t PixelBuffer = 0;
                  uint64_t v106 = *(char **)(v84 + 56);
                  vImagePixelCount v107 = *(void *)(v84 + 64);
                  CGFloat v108 = *(double *)(v84 + 72);
                  CGFloat v109 = *(double *)(v84 + 80);
                  if (!v101) {
                    goto LABEL_163;
                  }
LABEL_162:
                  MEMORY[0x199712200](v101, (__n128)0);
                  long long v105 = 0uLL;
                  goto LABEL_163;
                }
              }
            }
          }
        }
      }
LABEL_203:
      uint64_t PixelBuffer = v89;
      CGColorSpaceRef ColorSpaceFromAttachments = 0;
      uint64_t v101 = 0;
      goto LABEL_145;
    }
LABEL_122:
    BOOL IsPixelBufferOpaque = FigVideoCompositorIsPixelBufferOpaque(v87);
    CFDictionaryRef v92 = CVBufferCopyAttachments(v87, kCVAttachmentMode_ShouldPropagate);
    if (v92)
    {
      CFDictionaryRef v93 = v92;
      CGColorSpaceRef ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v92);
      CFRelease(v93);
    }
    else
    {
      CGColorSpaceRef ColorSpaceFromAttachments = 0;
    }
    uint64_t v95 = CVPixelBufferGetPixelFormatType(v87);
    CFTypeRef v96 = CVBufferCopyAttachment(v87, key, 0);
    CFTypeRef v97 = CVBufferCopyAttachment(v87, v163, 0);
    BOOL v98 = IsPixelBufferOpaque;
    if (FigCFEqual())
    {
      uint64_t v99 = (uint64_t *)MEMORY[0x1E4F167C0];
LABEL_129:
      uint64_t v100 = *v99;
      goto LABEL_130;
    }
    if (FigCFEqual())
    {
      uint64_t v99 = (uint64_t *)MEMORY[0x1E4F167C8];
      goto LABEL_129;
    }
    uint64_t v100 = 0;
    if (v95 != 32 && v95 != 1111970369)
    {
      FigSignalErrorAt();
      uint64_t v101 = 0;
      if (v96) {
        goto LABEL_133;
      }
      goto LABEL_134;
    }
LABEL_130:
    if (!v97) {
      CFTypeRef v97 = CFRetain(v160);
    }
    uint64_t v101 = MEMORY[0x1997121F0](v95, v100, v97, ColorSpaceFromAttachments, 0);
    if (v96) {
LABEL_133:
    }
      CFRelease(v96);
LABEL_134:
    if (v97) {
      CFRelease(v97);
    }
    int v102 = *(_DWORD *)(v84 + 112);
    if (v98) {
      int v103 = 6;
    }
    else {
      int v103 = 4;
    }
    if (v98) {
      int v104 = 5;
    }
    else {
      int v104 = 3;
    }
    *(CGFloat *)((char *)&v199.c + 4) = 0.0;
    if (v102 != 8) {
      int v103 = v104;
    }
    HIDWORD(v199.d) = 0;
    LODWORD(v199.a) = v102;
    HIDWORD(v199.a) = 4 * v102;
    *(void *)&v199.b = ColorSpaceFromAttachments;
    LODWORD(v199.c) = v103;
    v199.tx = 0.0;
    uint64_t v85 = v84 + 56;
    uint64_t PixelBuffer = MEMORY[0x1997121E0](v84 + 56, &v199, v87, v101, 0, 0);
    long long v105 = 0uLL;
    if (!PixelBuffer) {
      goto LABEL_161;
    }
LABEL_145:
    via_releaseVImageBuffer(v85);
    long long v105 = 0uLL;
    uint64_t v106 = 0;
    vImagePixelCount v107 = 0;
    CGFloat v108 = 0.0;
    CGFloat v109 = 0.0;
    if (v101) {
      goto LABEL_162;
    }
LABEL_163:
    if (ColorSpaceFromAttachments)
    {
      CFRelease(ColorSpaceFromAttachments);
      long long v105 = 0uLL;
    }
    if (v174)
    {
      CFRelease(v174);
      long long v105 = 0uLL;
    }
    CFIndex Count = v173;
    if (PixelBuffer) {
      goto LABEL_206;
    }
    int v118 = *(_DWORD *)(v84 + 112);
    *(_OWORD *)&t1.CGFloat a = v105;
    *(_OWORD *)&t1.c = v105;
    uint64_t CroppedSourceCleanApertureRect = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(v175, (CGRect *)&t1);
    if (CroppedSourceCleanApertureRect) {
      goto LABEL_204;
    }
    *(void *)&pixelBufferOut.CGFloat a = v106;
    *(void *)&pixelBufferOut.b = (unint64_t)t1.b;
    pixelBufferOut.c = v108;
    pixelBufferOut.d = v109;
    *(void *)&v194.CGFloat a = &v106[*(void *)&v109 * (int)t1.b];
    *(void *)&v194.b = (unint64_t)t1.d;
    *(void *)&v194.c = (unint64_t)t1.a;
    v194.d = v109;
    *(void *)&v193.CGFloat a = *(void *)&v194.a + 4 * v118 / 8 * (int)(t1.a + t1.c);
    *(void *)&v193.b = (unint64_t)t1.d;
    *(void *)&v193.c = (unint64_t)((double)*(unint64_t *)&v108 - (t1.a + t1.c));
    v193.d = v109;
    *(void *)&v192.CGFloat a = &v106[*(void *)&v109 * (int)(t1.b + t1.d)];
    *(void *)&v192.b = (unint64_t)((double)v107 - (t1.b + t1.d));
    v192.c = v108;
    v192.d = v109;
    v197.b = 0.0;
    v197.CGFloat a = 0.0;
    uint64_t CroppedSourceCleanApertureRect = vifa_vImageFill(&v185, (vImage_Buffer *)&pixelBufferOut, (uint64_t)&v197);
    if (CroppedSourceCleanApertureRect
      || (vifa_vImageFill(&v185, (vImage_Buffer *)&v194, (uint64_t)&v197),
          vifa_vImageFill(&v185, (vImage_Buffer *)&v193, (uint64_t)&v197),
          uint64_t CroppedSourceCleanApertureRect = vifa_vImageFill(&v185, (vImage_Buffer *)&v192, (uint64_t)&v197),
          src.datCGFloat a = v106,
          src.double height = v107,
          *(CGFloat *)&src.CGFloat width = v108,
          *(CGFloat *)&src.size_t rowBytes = v109,
          CroppedSourceCleanApertureRect))
    {
LABEL_204:
      uint64_t PixelBuffer = CroppedSourceCleanApertureRect;
LABEL_206:
      uint64_t v121 = v84 + 56;
      goto LABEL_195;
    }
    *(_OWORD *)&v188.CGFloat a = v170;
    *(_OWORD *)&v188.c = v169;
    *(_OWORD *)&v188.tx = v168;
    AffineTransforCFIndex m = FigVCLayerDefinitionGetAffineTransform(v175, &v188);
    uint64_t v121 = v84 + 56;
    if (AffineTransform) {
      goto LABEL_194;
    }
    CGAffineTransform t1 = v188;
    CGAffineTransform pixelBufferOut = v184;
    CGAffineTransformConcat(&v199, &t1, &pixelBufferOut);
    CGAffineTransform v188 = v199;
    Boolean v122 = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer(v175);
    CGFloat v123 = (double)CVPixelBufferGetHeight(v122);
    vImagePixelCount v124 = dest.height;
    double v125 = (double)dest.height;
    memset(&v199, 0, sizeof(v199));
    CGAffineTransformMakeScale(&t1, 1.0, -1.0);
    CGAffineTransformMakeTranslation(&pixelBufferOut, 0.0, v123);
    CGAffineTransformConcat(&v199, &t1, &pixelBufferOut);
    CGAffineTransform v193 = v199;
    memset(&v194, 0, sizeof(v194));
    CGAffineTransformInvert(&v194, &v193);
    memset(&v193, 0, sizeof(v193));
    CGAffineTransformMakeTranslation(&v193, 0.0, v125 - v123);
    v197.CGFloat a = v76;
    v197.b = v77;
    v197.c = v78;
    v197.d = v79;
    v197.tx = v80;
    v197.ty = v81;
    CGAffineTransform t2 = v199;
    CGAffineTransformConcat(&v192, &v197, &t2);
    CGAffineTransform v197 = v192;
    CGAffineTransform t2 = v188;
    CGAffineTransformConcat(&v192, &v197, &t2);
    CGAffineTransform v197 = v192;
    CGAffineTransform t2 = v194;
    CGAffineTransformConcat(&v192, &v197, &t2);
    CGAffineTransform v197 = v192;
    CGAffineTransform t2 = v193;
    CGAffineTransformConcat(&v192, &v197, &t2);
    uint64_t PixelBuffer = MEMORY[0x1997121D0](&srcTop, v124, dest.width, (4 * v185), 0);
    if (!PixelBuffer)
    {
      v199.CGFloat a = 0.0;
      v199.b = 0.0;
      int v126 = vifa_vImageAffineWarpCG(&v185, &src, &srcTop, 0, (float64x2_t *)&v192, (uint64_t)&v199, 0x80u);
      if (v126)
      {
        size_t v127 = v126;
        if (*(void *)(v84 + 40) < (unint64_t)v126)
        {
          free(*(void **)(v84 + 48));
          uint64_t v128 = malloc_type_malloc(v127, 0x1F4CB958uLL);
          if (v128) {
            size_t v129 = v127;
          }
          else {
            size_t v129 = 0;
          }
          *(void *)(v84 + 40) = v129;
          *(void *)(v84 + 48) = v128;
        }
      }
      vifa_vImageAffineWarpCG(&v185, &src, &srcTop, *(void **)(v84 + 48), (float64x2_t *)&v192, (uint64_t)&v199, 0);
      LODWORD(t1.a) = 1065353216;
      FigVCLayerDefinitionGetOpacity(v175, &t1);
      if (v185 == 16)
      {
        vImagePixelCount v130 = srcTop.width;
        if (srcTop.width == dest.width)
        {
          vImagePixelCount v131 = srcTop.height;
          if (srcTop.height == dest.height)
          {
            if (srcTop.height)
            {
              uint64_t v132 = 0;
              int v133 = (int)(float)(*(float *)&t1.a * 65535.0);
              datCGFloat a = (char *)srcTop.data;
              size_t rowBytes = srcTop.rowBytes;
              char v136 = (char *)dest.data;
              size_t v137 = dest.rowBytes;
              do
              {
                if (v130)
                {
                  uint64_t v138 = 0;
                  uint64_t v139 = v136;
                  uint64_t v140 = data;
                  do
                  {
                    uint64_t v141 = 0;
                    unsigned int v142 = (-131071 - *((unsigned __int16 *)v140 + 3) * v133) >> 16;
                    do
                    {
                      *(_WORD *)&v139[v141] = v142 * *(unsigned __int16 *)&v139[v141] / 0xFFFF
                                            + *(unsigned __int16 *)&v140[v141] * v133 / 0xFFFF;
                      v141 += 2;
                    }
                    while (v141 != 8);
                    v140 += 8;
                    v139 += 8;
                    ++v138;
                  }
                  while (v138 != v130);
                }
                data += rowBytes;
                v136 += v137;
                ++v132;
              }
              while (v132 != v131);
            }
            uint64_t PixelBuffer = 0;
            goto LABEL_195;
          }
        }
LABEL_193:
        AffineTransforCFIndex m = FigSignalErrorAt();
LABEL_194:
        uint64_t PixelBuffer = AffineTransform;
        goto LABEL_195;
      }
      if (v185 != 8) {
        goto LABEL_193;
      }
      uint64_t PixelBuffer = vImagePremultipliedConstAlphaBlend_ARGB8888(&srcTop, (int)(float)(*(float *)&t1.a * 255.0), &dest, &dest, 0);
    }
LABEL_195:
    via_releaseVImageBuffer(v121);
    if (srcTop.data) {
      free(srcTop.data);
    }
    if (PixelBuffer) {
      goto LABEL_90;
    }
  }
  CFDictionaryRef v143 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
  if (v143)
  {
    CFDictionaryRef v144 = v143;
    CFDictionaryRef Copy = CFDictionaryCreateCopy(allocator, v143);
    CFRelease(v144);
  }
  else
  {
    CFDictionaryRef Copy = 0;
  }
  if (!buffer)
  {
    FigSignalErrorAt();
    goto LABEL_238;
  }
  uint64_t v146 = CVPixelBufferGetPixelFormatType(buffer);
  CFTypeRef v147 = CVBufferCopyAttachment(buffer, key, 0);
  CMTimeValue v148 = pixelTransferSessionOut;
  int32_t v149 = pixelTransferSessionOut[19];
  if (!v149)
  {
    if (FigCFEqual())
    {
      uint64_t v152 = (uint64_t *)MEMORY[0x1E4F167C0];
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v153 = 0;
        if (v146 != 32 && v146 != 1111970369)
        {
          FigSignalErrorAt();
          if (v147) {
            goto LABEL_237;
          }
          goto LABEL_238;
        }
LABEL_226:
        CFDictionaryRef v154 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
        if (v154)
        {
          CFDictionaryRef v155 = v154;
          CGColorSpaceRef v156 = CVImageBufferCreateColorSpaceFromAttachments(v154);
          CFRelease(v155);
        }
        else
        {
          CGColorSpaceRef v156 = 0;
        }
        uint64_t v157 = MEMORY[0x1997121F0](v146, v153, v160, v156, 0);
        memset(&t1, 0, 24);
        int v158 = *((_DWORD *)pixelTransferSessionOut + 44);
        if (v158 == 8) {
          int v159 = 4;
        }
        else {
          int v159 = 3;
        }
        LODWORD(v199.a) = *((_DWORD *)pixelTransferSessionOut + 44);
        HIDWORD(v199.a) = 4 * v158;
        *(void *)&v199.b = v156;
        LODWORD(v199.c) = v159;
        memset((char *)&v199.c + 4, 0, 20);
        MEMORY[0x1997121C0](v165, &v199, buffer, v157, &t1, 0);
        if (v157) {
          MEMORY[0x199712200](v157);
        }
        if (v156) {
          CFRelease(v156);
        }
        goto LABEL_236;
      }
      uint64_t v152 = (uint64_t *)MEMORY[0x1E4F167C8];
    }
    uint64_t v153 = *v152;
    goto LABEL_226;
  }
  if (!*((unsigned char *)pixelTransferSessionOut + 160)) {
    goto LABEL_216;
  }
  if (CVPixelBufferUnlockBaseAddress(v149, 0)) {
    goto LABEL_236;
  }
  CMTimeValue v148 = pixelTransferSessionOut;
  *((unsigned char *)pixelTransferSessionOut + 160) = 0;
LABEL_216:
  uint64_t v151 = (VTSessionRef *)(v148 + 21);
  uint64_t v150 = v148[21];
  if (v150)
  {
LABEL_219:
    VTPixelTransferSessionTransferImage(v150, v148[19], buffer);
    if (v147) {
      goto LABEL_237;
    }
  }
  else
  {
    if (!VTPixelTransferSessionCreate(allocator, v148 + 21))
    {
      VTSessionSetProperty(*v151, v162, v161);
      uint64_t v150 = (OpaqueVTPixelTransferSession *)*v151;
      CMTimeValue v148 = pixelTransferSessionOut;
      goto LABEL_219;
    }
LABEL_236:
    if (v147) {
LABEL_237:
    }
      CFRelease(v147);
  }
LABEL_238:
  if (Copy)
  {
    CVBufferSetAttachments(buffer, Copy, kCVAttachmentMode_ShouldPropagate);
    via_releaseVImageBuffer((uint64_t)v165);
    CFRelease(Copy);
  }
  else
  {
    via_releaseVImageBuffer((uint64_t)v165);
  }
LABEL_7:
  (*(void (**)(void, uint64_t, void, CFTypeRef))(v16 + 24))(*(void *)(v16 + 32), a10, 0, v178);
  uint64_t PixelBuffer = 0;
LABEL_91:
  if (v178) {
    CFRelease(v178);
  }
LABEL_93:
  if (v182) {
    CFRelease(v182);
  }
  return PixelBuffer;
}

uint64_t vivc_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 24) = a2;
  *(void *)(DerivedStorage + 32) = a3;
  return 0;
}

uint64_t vifa_vImageFill(_DWORD *a1, vImage_Buffer *dest, uint64_t a3)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  if (a1 && a3)
  {
    if (*a1 == 16)
    {
      uint64_t v5 = 0;
      v6[0] = 0;
      do
      {
        *((_WORD *)v6 + (int)a1[v5 + 1]) = (int)(float)(*(float *)(a3 + v5 * 4) * 65535.0);
        ++v5;
      }
      while (v5 != 4);
      return vImageBufferFill_ARGB16U(dest, (const uint16_t *)v6, 0);
    }
    if (*a1 == 8)
    {
      uint64_t v3 = 0;
      LODWORD(v6[0]) = 0;
      do
      {
        *((unsigned char *)v6 + (int)a1[v3 + 1]) = (int)(float)(*(float *)(a3 + v3 * 4) * 255.0);
        ++v3;
      }
      while (v3 != 4);
      return vImageBufferFill_ARGB8888(dest, (const uint8_t *)v6, 0);
    }
  }

  return FigSignalErrorAt();
}

uint64_t vifa_vImageAffineWarpCG(_DWORD *a1, vImage_Buffer *src, vImage_Buffer *dest, void *tempBuffer, float64x2_t *a5, uint64_t a6, vImage_Flags flags)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1 && a6)
  {
    *(float32x4_t *)&v10.CGFloat a = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a5), a5[1]);
    *(float32x2_t *)&v10.tx = vcvt_f32_f64(a5[2]);
    if (*a1 == 16)
    {
      uint64_t v9 = 0;
      *(void *)backColor = 0;
      do
      {
        *(_WORD *)&backColor[2 * a1[v9 + 1]] = (int)(float)(*(float *)(a6 + v9 * 4) * 65535.0);
        ++v9;
      }
      while (v9 != 4);
      return vImageAffineWarp_ARGB16U(src, dest, tempBuffer, &v10, (const uint16_t *)backColor, flags);
    }
    if (*a1 == 8)
    {
      uint64_t v7 = 0;
      *(_DWORD *)backColor = 0;
      do
      {
        backColor[a1[v7 + 1]] = (int)(float)(*(float *)(a6 + v7 * 4) * 255.0);
        ++v7;
      }
      while (v7 != 4);
      return vImageAffineWarp_ARGB8888(src, dest, tempBuffer, &v10, backColor, flags);
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingAssetMetadataDownloaderConfigureMediaSelectionsForAlternate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  void v8[2] = a3;
  uint64_t v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)metadw_configureMediaSelectionsForAlternateDispatch);
  return v9;
}

void metadw_configureMediaSelectionsForAlternateDispatch(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 8);
  CFArrayRef v3 = *(const __CFArray **)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216) || *(_DWORD *)(DerivedStorage + 232) || !v2 || !v3)
  {
    uint64_t v7 = FigSignalErrorAt();
    if (!v7) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v5 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(DerivedStorage + 8), v3);
  CFArrayRef v6 = malloc_type_calloc(1uLL, 0x20uLL, 0xE00401043B4FBuLL);
  if (v6)
  {
    void v6[2] = CFRetain(v2);
    v6[3] = CFRetain(v3);
LABEL_7:
    uint64_t v7 = 0;
    uint64_t v8 = *(void **)(DerivedStorage + 272);
    *CFArrayRef v6 = 0;
    v6[1] = v8;
    *uint64_t v8 = v6;
    *(void *)(DerivedStorage + 272) = v6;
    goto LABEL_8;
  }
  uint64_t v7 = FigSignalErrorAt();
  if (!v7) {
    goto LABEL_7;
  }
LABEL_8:
  if (v5) {
    CFRelease(v5);
  }
  if (v7) {
LABEL_11:
  }
    metadw_transitionToTerminalStateWithOSStatus(*(const void **)a1, v7);
LABEL_12:
  *(_DWORD *)(a1 + 24) = v7;
}

uint64_t FigStreamingAssetMetadataDownloaderCreate(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, NSObject *a6, void *a7, void *a8)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2) {
    return FigSignalErrorAt();
  }
  CFTypeID v13 = CFGetTypeID(a2);
  if (v13 != FigAssetGetTypeID()) {
    return FigSignalErrorAt();
  }
  if (a3)
  {
    CFTypeID v14 = CFGetTypeID(a3);
    if (v14 != CFDictionaryGetTypeID()) {
      return FigSignalErrorAt();
    }
  }
  if (!a8) {
    return FigSignalErrorAt();
  }
  FigAssetDownloaderGetClassID();
  uint64_t v15 = CMDerivedObjectCreate();
  if (v15) {
    return v15;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = a1 ? CFRetain(a1) : 0;
  *(void *)(DerivedStorage + 8) = v17;
  *(void *)(DerivedStorage + 16) = CFRetain(a2);
  BOOL v18 = FigIsItOKToLogURLs() && FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  *(unsigned char *)(DerivedStorage + 202) = v18;
  if (a5)
  {
    if (a6)
    {
      if (a7)
      {
        dispatch_retain(a6);
        *(void *)(DerivedStorage + 120) = a6;
        __copy_assignment_8_8_t0w8_pa0_62591_8_pa0_48202_16_pa0_13082_24_pa0_11046_32_pa0_49729_40_pa0_62126_48_pa0_6100_56_pa0_11999_64_pa0_10804_72((void *)(DerivedStorage + 40), a7);
        uint64_t v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(void *)(DerivedStorage + 32) = v19;
        if (!v19) {
          return FigSignalErrorAt();
        }
      }
    }
  }
  if (!a3)
  {
    uint64_t v21 = a4;
    if (!a4) {
      goto LABEL_24;
    }
LABEL_23:
    *(unsigned char *)(DerivedStorage + 144) = FigStreamingAssetDownloadConfigGetDownloadsInterstitialAssets(v21);
    goto LABEL_24;
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a3, @"AssetDownloaderCreateOption_DebugIdentifier");
  if (Value) {
    CFStringRef Value = CFRetain(Value);
  }
  *(void *)(DerivedStorage + 136) = Value;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t v21 = a4;
  if (a4) {
    goto LABEL_23;
  }
  FigCFDictionaryGetBooleanIfPresent();
LABEL_24:
  dispatch_queue_t v22 = dispatch_queue_create("com.apple.coremedia.streamingassetmetadatadownloader.state", 0);
  *(void *)uint64_t DerivedStorage = v22;
  if (!v22) {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)a1, 0, 0, 0);
  *(void *)(DerivedStorage + 312) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef v24 = CFDictionaryCreateMutable((CFAllocatorRef)a1, 0, 0, 0);
  *(void *)(DerivedStorage + 320) = v24;
  if (!v24) {
    return FigSignalErrorAt();
  }
  CFMutableSetRef v25 = CFSetCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E4F1D548]);
  *(void *)(DerivedStorage + 304) = v25;
  if (!v25) {
    return FigSignalErrorAt();
  }
  CFMutableSetRef v26 = CFSetCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E4F1D548]);
  *(void *)(DerivedStorage + 296) = v26;
  if (!v26) {
    return FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 264) = 0;
  *(void *)(DerivedStorage + 272) = DerivedStorage + 264;
  *(void *)(DerivedStorage + 280) = 0;
  *(void *)(DerivedStorage + 288) = DerivedStorage + 280;
  uint64_t v15 = FigRetainProxyCreate();
  if (v15) {
    return v15;
  }
  CFAllocatorRef v27 = (const void *)FigCFCopyCompactDescription();
  if (dword_1E9350CF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v29 = 0;
  *a8 = 0;
  if (v27) {
    CFRelease(v27);
  }
  return v29;
}

void metadw_transitionToTerminalStateWithOSStatus(const void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  FigCreateErrorForOSStatus(a2, (CFErrorRef *)&cf);
  metadw_transitionToTerminalState(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
}

void metadw_transitionToTerminalState(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v5 = DerivedStorage;
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216))
    {
      FigSignalErrorAt();
    }
    else if (*(_DWORD *)(v5 + 232) <= 2u)
    {
      if (a2) {
        CFTypeRef v6 = CFRetain(a2);
      }
      else {
        CFTypeRef v6 = 0;
      }
      *(void *)(v5 + 224) = v6;
      if (dword_1E9350CF8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_DWORD *)(v5 + 232) = 4;
      metadw_cancelResourceRequestForMetadataItems((uint64_t)a1);
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        vImage_AffineTransform v10 = (const void *)v9;
        long long v11 = malloc_type_calloc(1uLL, 0x18uLL, 0xE0040D4EF70FBuLL);
        if (v11)
        {
          uint64_t v12 = v11;
          *long long v11 = CFRetain(a1);
          v12[1] = v10;
          if (a2) {
            CFTypeRef v13 = CFRetain(a2);
          }
          else {
            CFTypeRef v13 = 0;
          }
          v12[2] = v13;
          dispatch_async_f(*(dispatch_queue_t *)(v8 + 120), v12, (dispatch_function_t)metadw_sendDownloadFailedCallbackOnCallbackQueue);
        }
        else if (FigSignalErrorAt())
        {
          CFRelease(v10);
        }
      }
    }
  }
}

void metadw_cancelResourceRequestForMetadataItems(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  for (uint64_t i = *(void *)(DerivedStorage + 280); i; uint64_t i = *(void *)i)
  {
    if (*(_DWORD *)(i + 16) != 5)
    {
      BOOL shouldRequestBeSentOverHTTP = metadw_shouldRequestBeSentOverHTTP(a1, i);
      CMBaseObjectGetDerivedStorage();
      if (shouldRequestBeSentOverHTTP)
      {
        if (*(void *)(i + 88))
        {
          if (dword_1E9350CF8)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          metadw_clearHTTPRequestState(a1, i);
        }
      }
      else if (*(void *)(i + 104))
      {
        if (dword_1E9350CF8)
        {
          CFTypeRef v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        metadw_clearCustomURLRequestState(a1, i);
      }
    }
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 312));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 320));
  *(void *)(DerivedStorage + 328) = 0;
  *(void *)(DerivedStorage + 336) = 0;
}

BOOL metadw_shouldRequestBeSentOverHTTP(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL result = FigCFHTTPIsHTTPBasedURL(*(const __CFURL **)(a2 + 24));
  if (result) {
    return *(unsigned char *)(DerivedStorage + 200) == 0;
  }
  return result;
}

void metadw_clearHTTPRequestState(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(a2 + 88);
  if (v4)
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t))(v7 + 24);
    if (v8) {
      v8(v4);
    }
    uint64_t v9 = *(const void **)(a2 + 88);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a2 + 88) = 0;
    }
    *(_DWORD *)(a2 + 96) = 0;
    vImage_AffineTransform v10 = *(__CFDictionary **)(v5 + 312);
    CFDictionaryRemoveValue(v10, 0);
  }
}

void metadw_clearCustomURLRequestState(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(a2 + 104);
  if (v4)
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = *(void *)(DerivedStorage + 168);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
    if (v9) {
      v9(v6, v4);
    }
    *(void *)(a2 + 104) = 0;
    vImage_AffineTransform v10 = *(__CFDictionary **)(v5 + 320);
    CFDictionaryRemoveValue(v10, 0);
  }
}

void metadw_sendDownloadFailedCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    FigSignalErrorAt();
  }
  else
  {
    CFArrayRef v3 = *(void (**)(void, void, void))(DerivedStorage + 56);
    if (v3) {
      v3(a1[1], *a1, a1[2]);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v4 = (const void *)a1[2];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[1];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

uint64_t metadw_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4[2] = 0;
  uint64_t v5 = 0;
  v4[0] = a1;
  v4[1] = 0;
  dispatch_sync_f(*DerivedStorage, v4, (dispatch_function_t)metadw_invalidateDispatch);
  return v5;
}

void metadw_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  metadw_invalidateOnQueue(a1);
  CFArrayRef v3 = *(const void **)(DerivedStorage + 136);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 376);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 376) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 208);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 208) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

CFStringRef metadw_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigStreamingAssetMetadataDownloader %p debugIdentifier:%@ asset %p asset %@]", a1, *(void *)(DerivedStorage + 136), *(void *)(DerivedStorage + 16), *(void *)(DerivedStorage + 16));
}

uint64_t metadw_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  context[0] = a1;
  context[1] = a2;
  uint64_t v12 = a3;
  uint64_t v13 = 0;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)metadw_copyPropertyDispatch);
  uint64_t result = v13;
  if (!v13) {
    *a4 = v11;
  }
  return result;
}

uint64_t metadw_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  void context[3] = 0;
  uint64_t v9 = 0;
  context[0] = a1;
  context[1] = a2;
  void context[2] = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)metadw_setPropertyDispatch);
  return v9;
}

void metadw_invalidateDispatch(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 0;
}

void metadw_invalidateOnQueue(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 216))
  {
    *(unsigned char *)(DerivedStorage + 216) = 1;
    FigRetainProxyInvalidate();
    metadw_cancelResourceRequestForMetadataItems(a1);
    uint64_t v4 = *(const void **)(DerivedStorage + 8);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 8) = 0;
    }
    uint64_t v5 = *(const void **)(DerivedStorage + 16);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 16) = 0;
    }
    uint64_t v6 = *(const void **)(DerivedStorage + 24);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 24) = 0;
    }
    uint64_t v7 = *(void **)(DerivedStorage + 264);
    if (v7)
    {
      do
      {
        uint64_t v9 = (void *)*v7;
        uint64_t v8 = (void *)v7[1];
        if (*v7)
        {
          v9[1] = v8;
          uint64_t v8 = (void *)v7[1];
        }
        else
        {
          *(void *)(DerivedStorage + 272) = v8;
        }
        *uint64_t v8 = v9;
        vImage_AffineTransform v10 = (const void *)v7[2];
        if (v10) {
          CFRelease(v10);
        }
        uint64_t v11 = (const void *)v7[3];
        if (v11) {
          CFRelease(v11);
        }
        free(v7);
        uint64_t v7 = v9;
      }
      while (v9);
    }
    uint64_t v12 = *(const void **)(DerivedStorage + 32);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v13 = *(NSObject **)(DerivedStorage + 120);
    if (v13)
    {
      dispatch_release(v13);
      *(void *)(DerivedStorage + 120) = 0;
    }
    CFTypeID v14 = *(const void **)(DerivedStorage + 152);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 152) = 0;
    }
    uint64_t v15 = *(const void **)(DerivedStorage + 160);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(DerivedStorage + 160) = 0;
    }
    uint64_t v16 = *(const void **)(DerivedStorage + 168);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(DerivedStorage + 168) = 0;
    }
    CFTypeRef v17 = *(const void **)(DerivedStorage + 176);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(DerivedStorage + 176) = 0;
    }
    BOOL v18 = *(const void **)(DerivedStorage + 184);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(DerivedStorage + 184) = 0;
    }
    uint64_t v19 = *(const void **)(DerivedStorage + 192);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 192) = 0;
    }
    uint64_t v20 = *(const void **)(DerivedStorage + 256);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 256) = 0;
    }
    uint64_t v21 = *(const void **)(DerivedStorage + 296);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 296) = 0;
    }
    dispatch_queue_t v22 = *(const void **)(DerivedStorage + 304);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(DerivedStorage + 304) = 0;
    }
    xpc_object_t v23 = *(const void **)(DerivedStorage + 240);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(DerivedStorage + 240) = 0;
    }
    CFMutableDictionaryRef v24 = *(const void **)(DerivedStorage + 360);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(DerivedStorage + 360) = 0;
    }
    CFMutableSetRef v25 = *(const void **)(DerivedStorage + 368);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(DerivedStorage + 368) = 0;
    }
    CFMutableSetRef v26 = *(void **)(DerivedStorage + 280);
    if (v26)
    {
      do
      {
        uint64_t v28 = (void *)*v26;
        CFAllocatorRef v27 = (void *)v26[1];
        if (*v26)
        {
          v28[1] = v27;
          CFAllocatorRef v27 = (void *)v26[1];
        }
        else
        {
          *(void *)(DerivedStorage + 288) = v27;
        }
        *CFAllocatorRef v27 = v28;
        uint64_t v29 = (const void *)v26[3];
        if (v29)
        {
          CFRelease(v29);
          v26[3] = 0;
        }
        uint64_t v30 = (const void *)v26[4];
        if (v30)
        {
          CFRelease(v30);
          v26[4] = 0;
        }
        uint64_t v31 = (const void *)v26[6];
        if (v31)
        {
          CFRelease(v31);
          v26[6] = 0;
        }
        int v32 = (const void *)v26[7];
        if (v32)
        {
          CFRelease(v32);
          v26[7] = 0;
        }
        CMItemCount v33 = (const void *)v26[8];
        if (v33)
        {
          CFRelease(v33);
          v26[8] = 0;
        }
        uint64_t v34 = (const void *)v26[11];
        if (v34)
        {
          CFRelease(v34);
          v26[11] = 0;
        }
        uint64_t v35 = (const void *)v26[14];
        if (v35)
        {
          CFRelease(v35);
          v26[14] = 0;
        }
        uint64_t v36 = (const void *)v26[15];
        if (v36)
        {
          CFRelease(v36);
          v26[15] = 0;
        }
        CFTypeRef v37 = (const void *)v26[16];
        if (v37) {
          CFRelease(v37);
        }
        free(v26);
        CFMutableSetRef v26 = v28;
      }
      while (v28);
    }
    OSType v38 = *(const void **)(DerivedStorage + 312);
    if (v38)
    {
      CFRelease(v38);
      *(void *)(DerivedStorage + 312) = 0;
    }
    CFDictionaryRef v39 = *(const void **)(DerivedStorage + 320);
    if (v39)
    {
      CFRelease(v39);
      *(void *)(DerivedStorage + 320) = 0;
    }
    int32x4_t v40 = *(const void **)(DerivedStorage + 384);
    if (v40)
    {
      CFRelease(v40);
      *(void *)(DerivedStorage + 384) = 0;
    }
    int32x4_t v41 = *(const void **)(DerivedStorage + 224);
    if (v41)
    {
      CFRelease(v41);
      *(void *)(DerivedStorage + 224) = 0;
    }
  }
}

CFArrayRef metadw_copyPropertyDispatch(uint64_t a1)
{
  CFAllocatorRef v2 = *(const __CFAllocator **)(a1 + 24);
  CFArrayRef v3 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216)) {
    goto LABEL_11;
  }
  if (!CFEqual(@"AssetDownloaderProperty_InterstitialEvents", v3))
  {
    CFArrayRef result = 0;
    int v6 = -12784;
    goto LABEL_10;
  }
  CFArrayRef result = *(const __CFArray **)(DerivedStorage + 376);
  if (result)
  {
    if (CFArrayGetCount(result) < 1)
    {
      int v6 = 0;
LABEL_9:
      CFArrayRef result = 0;
      goto LABEL_10;
    }
    CFArrayRef result = CFArrayCreateCopy(v2, *(CFArrayRef *)(DerivedStorage + 376));
    if (result) {
      goto LABEL_6;
    }
LABEL_11:
    int v6 = FigSignalErrorAt();
    goto LABEL_9;
  }
LABEL_6:
  int v6 = 0;
LABEL_10:
  *(_DWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t metadw_setPropertyDispatch(uint64_t a1)
{
  CFArrayRef v3 = *(const void **)(a1 + 8);
  CFAllocatorRef v2 = *(const void **)(a1 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216)) {
    goto LABEL_27;
  }
  if (!FigCFEqual())
  {
    if (CFEqual(@"AssetDownloaderProperty_ProgressMonitor", v3))
    {
      CFTypeID v10 = CFGetTypeID(v2);
      if (v10 != FigStreamingAssetDownloadProgressMonitorGetTypeID()) {
        goto LABEL_27;
      }
      uint64_t v11 = *(const void **)(DerivedStorage + 240);
      *(void *)(DerivedStorage + 240) = v2;
      if (v2) {
LABEL_12:
      }
        CFRetain(v2);
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t result = 4294954512;
        goto LABEL_21;
      }
      CFTypeID v13 = CFGetTypeID(v2);
      if (v13 != FigReportingAgentGetTypeID())
      {
LABEL_27:
        uint64_t result = FigSignalErrorAt();
        goto LABEL_21;
      }
      uint64_t v11 = *(const void **)(DerivedStorage + 384);
      *(void *)(DerivedStorage + 384) = v2;
      if (v2) {
        goto LABEL_12;
      }
    }
    if (v11)
    {
      uint64_t v12 = v11;
LABEL_19:
      CFRelease(v12);
    }
LABEL_20:
    uint64_t result = 0;
    goto LABEL_21;
  }
  CFTypeID v5 = CFGetTypeID(v2);
  if (v5 != FigStreamingCacheGetTypeID()) {
    goto LABEL_27;
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(const void **)(v6 + 24);
  if (v7 == v2) {
    goto LABEL_20;
  }
  uint64_t v8 = v6;
  if (!v2 || !v7)
  {
    *(void *)(v6 + 24) = v2;
    if (!v2) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t result = FigStreamingCacheTransferData(*(void *)(v6 + 24), (uint64_t)v2);
  if (!result)
  {
    uint64_t v7 = *(const void **)(v8 + 24);
    *(void *)(v8 + 24) = v2;
LABEL_16:
    CFRetain(v2);
LABEL_17:
    if (v7)
    {
      uint64_t v12 = v7;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t metadw_start(const void *a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x10600405C4CBD68uLL);
  if (v3)
  {
    uint64_t v4 = v3;
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *uint64_t v4 = v5;
    dispatch_async_f(*DerivedStorage, v4, (dispatch_function_t)metadw_startDispatch);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t metadw_pause(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4[2] = 0;
  uint64_t v5 = 0;
  v4[0] = a1;
  v4[1] = 0;
  dispatch_sync_f(*DerivedStorage, v4, (dispatch_function_t)metadw_pauseDispatch);
  return v5;
}

uint64_t metadw_stop(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v4[2] = 0;
  uint64_t v5 = 0;
  v4[0] = a1;
  v4[1] = 0;
  dispatch_sync_f(*DerivedStorage, v4, (dispatch_function_t)metadw_stopDispatch);
  return v5;
}

void metadw_startDispatch(const void **a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CF8)
  {
    LODWORD(v43) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    uint64_t v37 = FigSignalErrorAt();
    if (!v37) {
      goto LABEL_62;
    }
LABEL_60:
    metadw_transitionToTerminalStateWithOSStatus(*a1, v37);
    goto LABEL_62;
  }
  unsigned int v4 = *(_DWORD *)(DerivedStorage + 232);
  if (v4 > 2 || v4 == 1) {
    goto LABEL_62;
  }
  *(_DWORD *)(DerivedStorage + 232) = 1;
  uint64_t v6 = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v41 = 0;
  *(void *)os_log_type_t type = 0;
  if (v6[35]) {
    goto LABEL_65;
  }
  uint64_t v7 = v6;
  uint64_t v8 = v6[1];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v6[2]);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, os_log_type_t *))(v11 + 48);
  if (!v12) {
    goto LABEL_50;
  }
  uint64_t DoesNotExistAndAddToQueue = v12(CMBaseObject, @"assetProperty_OriginalNetworkContentURL", v8, type);
  if (DoesNotExistAndAddToQueue) {
    goto LABEL_67;
  }
  uint64_t v14 = v7[1];
  uint64_t v15 = FigAssetGetCMBaseObject(v7[2]);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v17 = v16 ? v16 : 0;
  BOOL v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
  if (!v18)
  {
LABEL_50:
    uint64_t v37 = 4294954514;
    goto LABEL_51;
  }
  uint64_t DoesNotExistAndAddToQueue = v18(v15, @"assetProperty_CreationOptionsDictionary", v14, &v41);
  if (!DoesNotExistAndAddToQueue)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v19 = v7[33];
    if (v19)
    {
      while (1)
      {
        cf[0] = 0;
        CFStringRef v45 = 0;
        CFDictionaryRef v43 = 0;
        if (*(void *)type)
        {
          uint64_t DoesNotExistAndAddToQueue = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue((uint64_t)v1, v19, 1, *(const void **)type, *(const void **)type, 0, 0);
          if (DoesNotExistAndAddToQueue) {
            goto LABEL_67;
          }
        }
        PlaylistAlternateCFTypeRef URL = (const void *)FigAlternateGetPlaylistAlternateURL(*(void *)(v19 + 16));
        URLForCacheLookup = (const void *)FigAlternateGetURLForCacheLookup(*(void *)(v19 + 16));
        StableStreamCFStringRef Identifier = (const void *)FigAlternateGetStableStreamIdentifier(*(void *)(v19 + 16));
        uint64_t DoesNotExistAndAddToQueue = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue((uint64_t)v1, v19, 2, PlaylistAlternateURL, URLForCacheLookup, 0, StableStreamIdentifier);
        if (DoesNotExistAndAddToQueue) {
          goto LABEL_67;
        }
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v19 + 24));
        if (Count <= 0) {
          goto LABEL_48;
        }
        CFIndex v24 = Count;
        CFIndex v25 = 0;
        int v44 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 24), v25);
          CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
          uint64_t v28 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
          if (Value)
          {
            uint64_t v29 = v28;
            if (FigCFStringGetOSTypeValue()) {
              break;
            }
          }
          FigSignalErrorAt();
LABEL_36:
          if (v24 == ++v25)
          {
            uint64_t v37 = 0;
            goto LABEL_45;
          }
        }
        if (v44 == 1668047728) {
          goto LABEL_36;
        }
        if (!v29) {
          goto LABEL_36;
        }
        FigAlternateGetRenditionInfoForMediaType(*(void *)(v19 + 16), v44, v29, v29, v29, 0, &v43, cf, &v45);
        if (!cf[0] || !v45) {
          goto LABEL_36;
        }
        CFRetain(cf[0]);
        switch(v44)
        {
          case 1935832172:
            CFTypeRef v30 = cf[0];
            uint64_t v31 = v45;
            CFDictionaryRef v32 = v43;
            uint64_t v33 = (uint64_t)v1;
            uint64_t v34 = v19;
            int v35 = 4;
            break;
          case 1936684398:
            CFTypeRef v30 = cf[0];
            uint64_t v31 = v45;
            CFDictionaryRef v32 = v43;
            uint64_t v33 = (uint64_t)v1;
            uint64_t v34 = v19;
            int v35 = 3;
            break;
          case 1986618469:
            CFTypeRef v30 = cf[0];
            uint64_t v31 = v45;
            CFDictionaryRef v32 = v43;
            uint64_t v33 = (uint64_t)v1;
            uint64_t v34 = v19;
            int v35 = 2;
            break;
          default:
            FigSignalErrorAt();
LABEL_43:
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            goto LABEL_36;
        }
        uint64_t v36 = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue(v33, v34, v35, v30, v31, v29, v32);
        if (!v36) {
          goto LABEL_43;
        }
        uint64_t v37 = v36;
LABEL_45:
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v37) {
          goto LABEL_51;
        }
LABEL_48:
        uint64_t v19 = *(void *)v19;
        if (!v19)
        {
LABEL_65:
          uint64_t v37 = 0;
          goto LABEL_51;
        }
      }
    }
    *((unsigned char *)v7 + 201) = 1;
    uint64_t DoesNotExistAndAddToQueue = metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue((uint64_t)v1, 0, 2, *(const void **)type, *(const void **)type, 0, 0);
  }
LABEL_67:
  uint64_t v37 = DoesNotExistAndAddToQueue;
LABEL_51:
  if (v41) {
    CFRelease(v41);
  }
  if (*(void *)type) {
    CFRelease(*(CFTypeRef *)type);
  }
  if (v37) {
    goto LABEL_60;
  }
  OSType v38 = (void *)(CMBaseObjectGetDerivedStorage() + 280);
  while (1)
  {
    OSType v38 = (void *)*v38;
    if (!v38) {
      break;
    }
    ResourceRequestForMetadataIteCFIndex m = metadw_createResourceRequestForMetadataItem((uint64_t)v1, (uint64_t)v38);
    if (ResourceRequestForMetadataItem)
    {
      uint64_t v37 = ResourceRequestForMetadataItem;
      metadw_transitionToTerminalStateWithOSStatus(v1, ResourceRequestForMetadataItem);
      goto LABEL_60;
    }
  }
  metadw_checkIfDownloadIsComplete(v1);
LABEL_62:
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

uint64_t metadw_createMetadataDownloadItemForPlaylistIfDoesNotExistAndAddToQueue(uint64_t a1, uint64_t a2, int a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 296), a5))
  {
    uint64_t result = metadw_createMetadataDownloadItem(a2, a3, a4, a5, a6, a7, 0, &v17);
    if (result) {
      return result;
    }
    uint64_t v15 = v17;
    uint64_t v16 = *(void **)(DerivedStorage + 288);
    *uint64_t v17 = 0;
    v15[1] = v16;
    *uint64_t v16 = v15;
    *(void *)(DerivedStorage + 288) = v15;
    CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 296), a5);
  }
  return 0;
}

uint64_t metadw_createMetadataDownloadItem(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, void *a8)
{
  uint64_t v16 = malloc_type_calloc(1uLL, 0x98uLL, 0x10E0040DF620F7DuLL);
  if (v16)
  {
    uint64_t v17 = v16;
    CMTime v16[5] = a1;
    *((_DWORD *)v16 + 4) = a2;
    if (a3) {
      CFTypeRef v18 = CFRetain(a3);
    }
    else {
      CFTypeRef v18 = 0;
    }
    v17[3] = v18;
    if (a4) {
      CFTypeRef v19 = CFRetain(a4);
    }
    else {
      CFTypeRef v19 = 0;
    }
    v17[4] = v19;
    if (a5) {
      CFTypeRef v20 = CFRetain(a5);
    }
    else {
      CFTypeRef v20 = 0;
    }
    v17[6] = v20;
    if (a6) {
      CFTypeRef v21 = CFRetain(a6);
    }
    else {
      CFTypeRef v21 = 0;
    }
    v17[7] = v21;
    if (a7) {
      CFTypeRef v22 = CFRetain(a7);
    }
    else {
      CFTypeRef v22 = 0;
    }
    v17[8] = v22;
    *a8 = v17;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t metadw_createResourceRequestForMetadataItem(uint64_t a1, uint64_t a2)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v123[0] = 0;
  CFTypeRef v124 = 0;
  uint64_t v5 = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v6 = v5 + 19;
  if (v5[19])
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  uint64_t v9 = (__CFDictionary **)v5;
  uint64_t v10 = v5[1];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v5[2]);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v13 + 48);
  if (!v14)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v15 = v14(CMBaseObject, @"assetProperty_StorageSession", v10, v6);
  if (!v15)
  {
    uint64_t v8 = FigHTTPSchedulerRetain((dispatch_object_t)*v9);
    uint64_t v16 = v9[19];
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    CFTypeRef v68 = *(uint64_t (**)(__CFDictionary *, NSObject *, void, __CFDictionary **))(v18 + 40);
    if (!v68) {
      goto LABEL_11;
    }
    uint64_t v69 = v68(v16, v8, 0, v9 + 32);
    if (v69) {
      goto LABEL_175;
    }
    uint64_t v70 = v9[1];
    uint64_t v71 = FigAssetGetCMBaseObject(v9[2]);
    uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v72) {
      uint64_t v73 = v72;
    }
    else {
      uint64_t v73 = 0;
    }
    CMTimeValue v87 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *, CFTypeRef *))(v73 + 48);
    if (!v87) {
      goto LABEL_11;
    }
    uint64_t v69 = v87(v71, @"assetProperty_InstanceUUID", v70, v123);
    if (v69) {
      goto LABEL_175;
    }
    signed int v88 = v9[1];
    uint64_t v89 = FigAssetGetCMBaseObject(v9[2]);
    uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v90) {
      uint64_t v91 = v90;
    }
    else {
      uint64_t v91 = 0;
    }
    uint64_t v101 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *, CFTypeRef *))(v91 + 48);
    if (!v101) {
      goto LABEL_11;
    }
    uint64_t v69 = v101(v89, @"assetProperty_CreationOptionsDictionary", v88, &v124);
    if (v69) {
      goto LABEL_175;
    }
    uint64_t v69 = FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions(v9[1], (uint64_t)v124, (__CFDictionary **)&cf);
    if (v69) {
      goto LABEL_175;
    }
    uint64_t v69 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(v9[1], (uint64_t)v124, (unint64_t)v123[0], v9 + 23);
    if (v69) {
      goto LABEL_175;
    }
    DictionaryCFStringRef Value = (const void *)FigCFDictionaryGetDictionaryValue();
    if (DictionaryValue) {
      DictionaryCFStringRef Value = CFRetain(DictionaryValue);
    }
    v9[24] = (__CFDictionary *)DictionaryValue;
    int v103 = v9[1];
    uint64_t v104 = FigAssetGetCMBaseObject(v9[2]);
    uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v105) {
      uint64_t v106 = v105;
    }
    else {
      uint64_t v106 = 0;
    }
    vImagePixelCount v107 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *, __CFDictionary **))(v106 + 48);
    if (!v107) {
      goto LABEL_11;
    }
    uint64_t v69 = v107(v104, @"assetProperty_DefaultContentKeySession", v103, v9 + 20);
    if (v69)
    {
LABEL_175:
      uint64_t v7 = v69;
      goto LABEL_12;
    }
    CGFloat v108 = v9[1];
    uint64_t v109 = FigAssetGetCMBaseObject(v9[2]);
    uint64_t v110 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v110) {
      uint64_t v111 = v110;
    }
    else {
      uint64_t v111 = 0;
    }
    OSType v112 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *, __CFDictionary **))(v111 + 48);
    if (v112)
    {
      uint64_t v69 = v112(v109, @"assetProperty_CustomURLLoader", v108, v9 + 21);
      if (!v69)
      {
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        size_t v113 = v9[22];
        CFTypeRef v114 = cf;
        v9[22] = (__CFDictionary *)cf;
        if (v114) {
          CFRetain(v114);
        }
        if (v113) {
          CFRelease(v113);
        }
        CFTypeRef v115 = v9[1];
        uint64_t v116 = FigAssetGetCMBaseObject(v9[2]);
        uint64_t v117 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v117) {
          uint64_t v118 = v117;
        }
        else {
          uint64_t v118 = 0;
        }
        uint64_t v119 = *(uint64_t (**)(uint64_t, __CFString *, __CFDictionary *, __CFDictionary **))(v118 + 48);
        if (v119)
        {
          uint64_t v7 = v119(v116, @"assetProperty_ContentKeyBoss", v115, v9 + 45);
          if (!v7 && dword_1E9350CF8)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v7 = 0;
          }
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      goto LABEL_175;
    }
LABEL_11:
    uint64_t v7 = 4294954514;
    goto LABEL_12;
  }
  uint64_t v7 = v15;
  uint64_t v8 = 0;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
LABEL_14:
  FigHTTPSchedulerRelease(v8);
  if (v123[0]) {
    CFRelease(v123[0]);
  }
  if (v124) {
    CFRelease(v124);
  }
  if (v7) {
    return v7;
  }
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  v132[0] = 0;
  *(void *)double v125 = 0;
  if (*(unsigned char *)(a2 + 136)) {
    goto LABEL_20;
  }
  uint64_t v32 = v19;
  int v33 = *(_DWORD *)(a2 + 16);
  if ((v33 - 2) >= 3)
  {
    if (v33 != 1) {
      goto LABEL_46;
    }
    int v34 = FigStreamingCacheCopyMasterPlaylist(*(void *)(v19 + 24), (unint64_t)v132, 0);
    goto LABEL_39;
  }
  if (!metadw_createCacheForStream(a1, a2, v125) && *(void *)v125)
  {
    int v34 = FigStreamingCacheMediaStreamCopyPlaylist(*(void *)(v32 + 24), *(uint64_t *)v125, (unint64_t)v132, 0);
LABEL_39:
    int v35 = v34;
    CFTypeRef v36 = v132[0];
    if (!v35 && v132[0])
    {
      *(CFTypeRef *)(a2 + 112) = v132[0];
LABEL_20:
      if ((*(_DWORD *)(a2 + 16) - 1) > 3) {
        return 0;
      }
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      v123[0] = 0;
      CFTypeRef v124 = 0;
      uint64_t v21 = metadw_parseValidateAndCopyPlaylist(*(OpaqueCMBlockBuffer **)(a2 + 112), a1, a2, v123, (uint64_t *)&v124);
      CFTypeRef v22 = v123[0];
      if (!v21)
      {
        if (v123[0])
        {
          CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers((uint64_t)v123[0]);
          uint64_t v24 = metadw_processCryptKeysFromPlaylist(a1, a2, ContentKeySpecifiers);
          if (v24)
          {
            uint64_t v7 = v24;
            goto LABEL_79;
          }
        }
        CFTypeRef v25 = v124;
        if (!v124
          || (CFArrayRef v26 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers((uint64_t)v124),
              uint64_t v21 = metadw_processCryptKeysFromPlaylist(a1, a2, v26),
              !v21))
        {
          metadw_estimateMediaBytesToDownloadForPlaylist(a1, a2, (uint64_t)v25);
          if (dword_1E9350CF8)
          {
            LODWORD(cf) = 0;
            CFAllocatorRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v28 = cf;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v29 = v28;
            }
            else {
              unsigned int v29 = v28 & 0xFFFFFFFE;
            }
            if (v29)
            {
              uint64_t v30 = *(void *)(v20 + 136);
              uint64_t v31 = *(void *)(a2 + 24);
              *(_DWORD *)double v125 = 136315906;
              *(void *)&v125[4] = "metadw_processCachedPlaylist";
              __int16 v126 = 2048;
              uint64_t v127 = a1;
              __int16 v128 = 2114;
              uint64_t v129 = v30;
              __int16 v130 = 2112;
              uint64_t v131 = v31;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v7 = 0;
          if (!v22) {
            goto LABEL_80;
          }
          goto LABEL_79;
        }
      }
      uint64_t v7 = v21;
      if (!v22)
      {
LABEL_80:
        if (v124) {
          CFRelease(v124);
        }
        return v7;
      }
LABEL_79:
      CFRelease(v22);
      goto LABEL_80;
    }
    goto LABEL_43;
  }
  CFTypeRef v36 = v132[0];
LABEL_43:
  if (v36) {
    CFRelease(v36);
  }
  int v33 = *(_DWORD *)(a2 + 16);
LABEL_46:
  if (v33 == 5 && PKDIsContentKeyBossEnabled())
  {
    uint64_t v37 = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    v123[0] = (CFTypeRef)1;
    v123[1] = metadw_contentKeyRequestDidSucceed;
    v123[2] = metadw_contentKeyRequestDidFail;
    CFTypeRef v124 = 0;
    if (!*(void *)(v37 + 360)) {
      goto LABEL_116;
    }
    OSType v38 = (uint64_t *)v37;
    FigContentKeySpecifierGetKeySystem(*(void *)(a2 + 64));
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v40 = FigContentKeyRequestParamsCreate(AllocatorForMedia, *(const void **)(a2 + 64), 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, (uint64_t *)&cf);
    if (v40)
    {
      uint64_t v7 = v40;
    }
    else
    {
      uint64_t v41 = v38[45];
      CFTypeRef v42 = cf;
      uint64_t v43 = v38[22];
      uint64_t v44 = v38[23];
      uint64_t v45 = *v38;
      uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v47 = v46 ? v46 : 0;
      CFArrayRef v74 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, CFTypeRef *))(v47 + 8);
      if (v74)
      {
        uint64_t v7 = v74(v41, v42, 1, 1, v43, v44, v123, a1, v45, &v124);
        if (!v7 && dword_1E9350CF8)
        {
          char v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v7 = 0;
        }
      }
      else
      {
        uint64_t v7 = 4294954514;
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (!v7)
    {
LABEL_116:
      uint64_t v7 = 0;
      ++*(void *)(DerivedStorage + 344);
    }
    return v7;
  }
  BOOL shouldRequestBeSentOverHTTP = metadw_shouldRequestBeSentOverHTTP(a1, a2);
  uint64_t v49 = CMBaseObjectGetDerivedStorage();
  uint64_t v50 = v49;
  if (shouldRequestBeSentOverHTTP)
  {
    v123[0] = 0;
    LODWORD(v124) = 0;
    if (*(void *)(a2 + 88) || *(_DWORD *)(a2 + 96))
    {
      uint64_t v85 = FigSignalErrorAt();
      if (!v85)
      {
LABEL_132:
        if (*(_DWORD *)(a2 + 96) || *(void *)(a2 + 104)) {
          ++*(void *)(DerivedStorage + 328);
        }
        uint64_t v7 = 0;
        *(void *)(a2 + 144) = FigGetUpTimeNanoseconds();
        return v7;
      }
    }
    else
    {
      uint64_t v121 = DerivedStorage;
      if (*(unsigned char *)(v49 + 128)) {
        unsigned int v51 = 2055;
      }
      else {
        unsigned int v51 = 7;
      }
      if (*(unsigned char *)(v49 + 129)) {
        uint64_t v52 = v51 | 0x1000;
      }
      else {
        uint64_t v52 = v51;
      }
      int v53 = *(_DWORD *)(a2 + 16) - 1;
      if (v53 > 4) {
        int v54 = 0;
      }
      else {
        int v54 = dword_194995DC8[v53];
      }
      if (dword_1E9350CF8)
      {
        LODWORD(cf) = 0;
        uint64_t v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v64 = cf;
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v65 = v64;
        }
        else {
          unsigned int v65 = v64 & 0xFFFFFFFE;
        }
        if (v65)
        {
          uint64_t v66 = *(void *)(v50 + 136);
          uint64_t v67 = *(void *)(a2 + 24);
          *(_DWORD *)double v125 = 136315906;
          *(void *)&v125[4] = "metadw_createHTTPRequest";
          __int16 v126 = 2048;
          uint64_t v127 = a1;
          __int16 v128 = 2114;
          uint64_t v129 = v66;
          __int16 v130 = 2112;
          uint64_t v131 = v67;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v76 = *(void *)(v50 + 256);
      uint64_t v77 = *(void *)(v50 + 8);
      uint64_t v78 = *(void *)(a2 + 24);
      uint64_t v80 = *(void *)(v50 + 176);
      uint64_t v79 = *(void *)(v50 + 184);
      uint64_t v81 = *(void *)(v50 + 208);
      uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v82) {
        uint64_t v83 = v82;
      }
      else {
        uint64_t v83 = 0;
      }
      uint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, CFTypeRef *, void, void, void, void (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, uint64_t), uint64_t, CFTypeRef *, CFTypeRef *))(v83 + 8);
      if (!v84) {
        return 4294954514;
      }
      long long v134 = 0u;
      long long v135 = 0u;
      *(_OWORD *)uint64_t v132 = 0u;
      long long v133 = 0u;
      int v136 = 0;
      int v137 = v54;
      long long v138 = 0u;
      long long v139 = 0u;
      uint64_t v140 = 0;
      uint64_t v85 = v84(v76, v77, 0, v78, 0, v79, v80, v52, v132, 0, 0, 0, metadw_httpReadCallback, v81, v123, &v124);
      if (!v85)
      {
        *(CFTypeRef *)(a2 + 88) = v123[0];
        CFTypeRef v86 = (const void *)(int)v124;
        *(_DWORD *)(a2 + 96) = v124;
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v50 + 312), v86, (const void *)a2);
        uint64_t DerivedStorage = v121;
        goto LABEL_132;
      }
    }
    return v85;
  }
  v123[0] = 0;
  CFTypeRef v124 = 0;
  if (!*(void *)(a2 + 24) || !*(void *)(v49 + 168) || !*(void *)(v49 + 160) || *(void *)(a2 + 104))
  {
    uint64_t Mutable = FigSignalErrorAt();
    goto LABEL_174;
  }
  uint64_t Mutable = FigCustomURLRequestInfoCreateMutable();
  if (Mutable)
  {
LABEL_174:
    uint64_t v7 = Mutable;
    CFTypeRef v56 = 0;
    goto LABEL_127;
  }
  CFTypeRef v56 = FigCFHTTPCreateUserAgent();
  uint64_t v57 = FigCustomURLRequestInfoSetUserAgent();
  if (v57) {
    goto LABEL_171;
  }
  if ((*(_DWORD *)(a2 + 16) - 1) > 3)
  {
LABEL_125:
    uint64_t v7 = 0;
    goto LABEL_127;
  }
  uint64_t v57 = FigCustomURLRequestInfoSetAcceptEncoding();
  if (v57)
  {
LABEL_171:
    uint64_t v7 = v57;
  }
  else
  {
    if (dword_1E9350CF8)
    {
      LODWORD(cf) = 0;
      int v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v59 = cf;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v60 = v59;
      }
      else {
        unsigned int v60 = v59 & 0xFFFFFFFE;
      }
      if (v60)
      {
        uint64_t v61 = *(void *)(v50 + 136);
        uint64_t v62 = *(void *)(a2 + 24);
        *(_DWORD *)double v125 = 136315906;
        *(void *)&v125[4] = "metadw_createCustomURLRequest";
        __int16 v126 = 2048;
        uint64_t v127 = a1;
        __int16 v128 = 2114;
        uint64_t v129 = v61;
        __int16 v130 = 2112;
        uint64_t v131 = v62;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v92 = *(void *)(v50 + 168);
    CFTypeRef v93 = v123[0];
    uint64_t v94 = *(void *)(v50 + 208);
    uint64_t v95 = *(void *)v50;
    uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v96) {
      uint64_t v97 = v96;
    }
    else {
      uint64_t v97 = 0;
    }
    BOOL v98 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, void, CFTypeRef *))(v97 + 24);
    if (v98)
    {
      uint64_t v7 = v98(v92, v93, v94, v95, metadw_customURLReadCallback, &v124);
      if (!v7)
      {
        CFTypeRef v99 = v124;
        if (v124)
        {
          *(void *)(a2 + 104) = v124;
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v50 + 320), v99, (const void *)a2);
          goto LABEL_125;
        }
      }
    }
    else
    {
      uint64_t v7 = 4294954514;
    }
  }
LABEL_127:
  if (v123[0]) {
    CFRelease(v123[0]);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (!v7) {
    goto LABEL_132;
  }
  return v7;
}

void metadw_checkIfDownloadIsComplete(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 232) <= 2u)
  {
    uint64_t v3 = DerivedStorage;
    if (*(void *)(DerivedStorage + 336) == *(void *)(DerivedStorage + 328) && !*(unsigned char *)(DerivedStorage + 248))
    {
      *(unsigned char *)(DerivedStorage + 248) = 1;
      uint64_t v4 = CMBaseObjectGetDerivedStorage();
      uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v5)
      {
        uint64_t v6 = (const void *)v5;
        uint64_t v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE0040D4EF70FBuLL);
        if (v7)
        {
          uint64_t v8 = v7;
          if (a1) {
            CFTypeRef v9 = CFRetain(a1);
          }
          else {
            CFTypeRef v9 = 0;
          }
          *uint64_t v8 = v9;
          v8[1] = v6;
          dispatch_async_f(*(dispatch_queue_t *)(v4 + 120), v8, (dispatch_function_t)metadw_sendDidFinishLoadingPlaylistsCallbackCallbackOnCallbackQueue);
        }
        else if (FigSignalErrorAt())
        {
          CFRelease(v6);
        }
      }
    }
    if (*(void *)(v3 + 344) == *(void *)(v3 + 352) && *(void *)(v3 + 336) == *(void *)(v3 + 328))
    {
      if (dword_1E9350CF8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_DWORD *)(v3 + 232) = 3;
      FigStreamingAssetProgressMonitorMarkInitialEstimationOfExpectedBytesAsComplete(*(const void **)(v3 + 240));
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      uint64_t v12 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v12)
      {
        uint64_t v13 = (const void *)v12;
        uint64_t v14 = malloc_type_calloc(1uLL, 0x18uLL, 0xE0040D4EF70FBuLL);
        if (v14)
        {
          uint64_t v15 = v14;
          if (a1) {
            CFTypeRef v16 = CFRetain(a1);
          }
          else {
            CFTypeRef v16 = 0;
          }
          *uint64_t v15 = v16;
          v15[1] = v13;
          dispatch_async_f(*(dispatch_queue_t *)(v11 + 120), v15, (dispatch_function_t)metadw_sendDownloadSucceededCallbackOnCallbackQueue);
        }
        else if (FigSignalErrorAt())
        {
          CFRelease(v13);
        }
      }
    }
  }
}

uint64_t metadw_createCacheForStream(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v14 = 0;
  if (*(unsigned char *)(DerivedStorage + 201)) {
    PeakBitfloat Rate = 0;
  }
  else {
    PeakBitfloat Rate = FigAlternateGetPeakBitRate(*(void *)(*(void *)(a2 + 40) + 16));
  }
  uint64_t v7 = (__CFDictionary *)FigCFHTTPCreateURLString(*(const __CFURL **)(a2 + 32));
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = *(_DWORD *)(a2 + 16);
    uint64_t v10 = (v9 - 2);
    if (v10 >= 3)
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v11 = FigStreamingCacheCreateMediaStream(*(void *)(DerivedStorage + 24), v10, v7, *(const void **)(a2 + 56), PeakBitRate, v9 == 4, &v14);
      if (!v11)
      {
        uint64_t v12 = FigStreamingCacheMediaStreamSetPersistent(*(void *)(DerivedStorage + 24), v14, *MEMORY[0x1E4F1CFD0]);
        if (!v12) {
          *a3 = v14;
        }
        goto LABEL_11;
      }
    }
    uint64_t v12 = v11;
LABEL_11:
    CFRelease(v8);
    return v12;
  }

  return FigSignalErrorAt();
}

uint64_t metadw_parseValidateAndCopyPlaylist(OpaqueCMBlockBuffer *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v18 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  CFTypeRef cf = 0;
  uint64_t ParamsAsDict = FigCFHTTPCopyQueryParamsAsDict(*(void *)(a3 + 24), (CFMutableDictionaryRef *)&cf);
  if (ParamsAsDict) {
    goto LABEL_16;
  }
  uint64_t v11 = FigStreamPlaylistParse(a1, 0, 0, &v18, 0, 0, 1, *(unsigned __int8 *)(DerivedStorage + 202), 0, 0, *(const __CFDictionary **)(DerivedStorage + 368), (const __CFDictionary *)cf, &v17, (CFTypeRef *)&v16);
  if (*(_DWORD *)(a3 + 16) == 1)
  {
    uint64_t v12 = *(const void **)(DerivedStorage + 368);
    if (v17)
    {
      PlaylistVariables = (const void *)FigMultivariantPlaylistGetPlaylistVariables(v17);
      *(void *)(DerivedStorage + 368) = PlaylistVariables;
      if (PlaylistVariables) {
        CFRetain(PlaylistVariables);
      }
      if (!v12) {
        goto LABEL_8;
      }
    }
    else
    {
      *(void *)(DerivedStorage + 368) = 0;
      if (!v12) {
        goto LABEL_8;
      }
    }
    CFRelease(v12);
  }
LABEL_8:
  if (v11) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(a3 + 16) == 1 || v16 && FigMediaPlaylistHasEndTag(v16))
  {
    uint64_t v11 = 0;
    *a4 = v17;
    *a5 = v16;
    goto LABEL_17;
  }
  uint64_t ParamsAsDict = FigSignalErrorAt();
LABEL_16:
  uint64_t v11 = ParamsAsDict;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t metadw_processCryptKeysFromPlaylist(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v7 = 0;
  int v18 = 0;
  if (!a3) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a3); ; CFIndex i = 0)
  {
    if (v7 >= i) {
      return 0;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v7);
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef Identifier = (const __CFString *)FigContentKeySpecifierGetIdentifier((uint64_t)ValueAtIndex);
    CFURLRef v12 = CFURLCreateWithString(AllocatorForMedia, Identifier, 0);
    if (FigCFHTTPIsHTTPBasedURL(v12) || CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 304), v12))
    {
      if (!v12) {
        goto LABEL_9;
      }
LABEL_8:
      CFRelease(v12);
      goto LABEL_9;
    }
    ResourceRequestForMetadataIteCFIndex m = metadw_createMetadataDownloadItem(*(void *)(a2 + 40), 5, v12, 0, 0, 0, ValueAtIndex, &v18);
    if (ResourceRequestForMetadataItem) {
      break;
    }
    uint64_t v14 = v18;
    ResourceRequestForMetadataIteCFIndex m = metadw_createResourceRequestForMetadataItem(a1, v18);
    if (ResourceRequestForMetadataItem) {
      break;
    }
    CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 304), v12);
    uint64_t v15 = *(void **)(DerivedStorage + 288);
    *uint64_t v14 = 0;
    v14[1] = v15;
    *uint64_t v15 = v14;
    *(void *)(DerivedStorage + 288) = v14;
    if (v12) {
      goto LABEL_8;
    }
LABEL_9:
    ++v7;
    if (a3) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  uint64_t v16 = ResourceRequestForMetadataItem;
  if (v12) {
    CFRelease(v12);
  }
  free(v18);
  return v16;
}

uint64_t metadw_estimateMediaBytesToDownloadForPlaylist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v6 = result;
    if (!*(unsigned char *)(result + 201))
    {
      uint64_t v7 = 0;
      int64_t v8 = 0;
      CFIndex v9 = 0;
      char v10 = 1;
      while (1)
      {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a3);
        if (MediaSegmentSpecifiers) {
          CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
        }
        if (v9 >= (uint64_t)MediaSegmentSpecifiers)
        {
          unsigned int v28 = *(const void **)(v6 + 240);
          uint64_t v29 = *(void *)(a2 + 40);
          uint64_t v30 = *(const void **)(v29 + 16);
          uint64_t v31 = *(const void **)(v29 + 24);
          CMTimeMake(&v32, v8, 1);
          return FigStreamingAssetProgressMonitorUpdateExpectedMediaBytesToDownload(v28, v30, v31, (long long *)&v32.value, v7, v10);
        }
        CFArrayRef v12 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a3);
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v12, v9);
        if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)ValueAtIndex))
        {
          v7 += FigMediaSegmentSpecifierGetBytesToRead((uint64_t)ValueAtIndex);
          goto LABEL_29;
        }
        int v14 = *(_DWORD *)(a2 + 16);
        switch(v14)
        {
          case 4:
            char v10 = 0;
            double v16 = (double)v7 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) * 30.0;
            break;
          case 3:
            int HasLosslessAudio = FigAlternateHasLosslessAudio(*(void *)(*(void *)(a2 + 40) + 16));
            int v18 = *(const void **)(a2 + 48);
            uint64_t v19 = *(const void **)(*(void *)(a2 + 40) + 16);
            if (HasLosslessAudio)
            {
              AudioSamplefloat Rate = (uint64_t)FigAlternateGetAudioSampleRate((uint64_t)v19, v18);
              int AudioBitDepth = FigAlternateGetAudioBitDepth(*(void *)(*(void *)(a2 + 40) + 16), *(const void **)(a2 + 48));
              if (AudioSampleRate) {
                BOOL v22 = AudioBitDepth == 0;
              }
              else {
                BOOL v22 = 1;
              }
              if (v22)
              {
                TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
                char v10 = 0;
                double v24 = (double)v7;
                double v25 = 131072.0;
LABEL_27:
                double v16 = v24 + TimeInSeconds * v25;
                break;
              }
              double v27 = (float)((float)((float)AudioSampleRate * (float)AudioBitDepth) * 0.125);
              char v10 = 0;
              double v16 = (double)v7 + v27 * FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
            }
            else
            {
              AudioChannelCFIndex Count = FigAlternateGetAudioChannelCount(v19, v18, 0);
              TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
              double v24 = (double)v7;
              if (AudioChannelCount < 3)
              {
                char v10 = 0;
                double v25 = 16384.0;
                goto LABEL_27;
              }
              char v10 = 0;
              double v16 = v24 + TimeInSeconds * 52428.8008;
            }
            break;
          case 2:
            uint64_t v15 = (uint64_t)(float)((float)(int)FigAlternateGetAverageBitRate(*(void *)(*(void *)(a2 + 40) + 16))
                                 * 0.95);
            if (!v15) {
              uint64_t v15 = (uint64_t)(float)((float)(int)FigAlternateGetPeakBitRate(*(void *)(*(void *)(a2 + 40) + 16))
            }
                                   * 0.7);
            char v10 = 0;
            double v16 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) * (float)v15 * 0.125 + (double)v7;
            break;
          default:
            char v10 = 0;
            goto LABEL_29;
        }
        uint64_t v7 = (uint64_t)v16;
LABEL_29:
        int64_t v8 = (uint64_t)(FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) + (double)v8);
        ++v9;
      }
    }
  }
  return result;
}

void metadw_contentKeyRequestDidSucceed(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(void *)(DerivedStorage + 352);

  metadw_checkIfDownloadIsComplete(a1);
}

void metadw_contentKeyRequestDidFail(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(void *)(DerivedStorage + 352);

  metadw_checkIfDownloadIsComplete(a1);
}

void metadw_httpReadCallback(uint64_t a1, int a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, uint64_t a8)
{
  v33[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v32 = 0;
  v33[0] = 0;
  CFTypeRef cf = 0;
  int v15 = dworch_copyAssetDownloaderFromRetainProxy(a3, v33);
  CFTypeRef v16 = v33[0];
  if (v15) {
    goto LABEL_33;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216)) {
    goto LABEL_36;
  }
  if (*(_DWORD *)(DerivedStorage + 232) != 1) {
    goto LABEL_31;
  }
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 312), (const void *)a2);
  if (Value && (uint64_t v19 = (uint64_t)Value, *((void *)Value + 11) == a1))
  {
    if (a8)
    {
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      double v25 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v21 + 48);
      if (v25)
      {
        v25(a1, 0x1EE57B638, *MEMORY[0x1E4F1CF80], &cf);
        if (cf)
        {
          metadw_transitionToTerminalState(v16, cf);
          goto LABEL_28;
        }
      }
LABEL_27:
      metadw_transitionToTerminalStateWithOSStatus(v16, a8);
LABEL_28:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_31;
    }
    int v22 = a7 & 2;
    if ((Value[4] - 1) <= 3)
    {
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      double v27 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v24 + 48);
      if (v27)
      {
        v27(a1, 0x1EE57B5F8, *MEMORY[0x1E4F1CF80], &v32);
        unsigned int v28 = (__CFHTTPMessage *)v32;
      }
      else
      {
        unsigned int v28 = 0;
      }
      uint64_t v29 = metadw_handlePlaylistFileData((uint64_t)v16, v19, a4, a5, a6, v28, v22);
      a8 = v29;
      if (v22 && !v29) {
        goto LABEL_24;
      }
      goto LABEL_26;
    }
    uint64_t v26 = FigSignalErrorAt();
    if (v22)
    {
LABEL_24:
      if (dword_1E9350CF8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      metadw_clearHTTPRequestState((uint64_t)v16, v19);
      ++*(void *)(DerivedStorage + 336);
      metadw_checkIfDownloadIsComplete(v16);
      goto LABEL_31;
    }
  }
  else
  {
LABEL_36:
    uint64_t v26 = FigSignalErrorAt();
  }
  a8 = v26;
LABEL_26:
  if (a8) {
    goto LABEL_27;
  }
LABEL_31:
  if (v32) {
    CFRelease(v32);
  }
LABEL_33:
  if (v16) {
    CFRelease(v16);
  }
}

uint64_t metadw_handlePlaylistFileData(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, size_t a4, size_t a5, __CFHTTPMessage *a6, int a7)
{
  v78[16] = *(void **)MEMORY[0x1E4F143B8];
  char v65 = 0;
  CFTypeRef v63 = 0;
  unsigned int v64 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!a3)
  {
LABEL_9:
    if (!a7)
    {
      uint64_t v18 = 0;
      goto LABEL_80;
    }
    uint64_t v19 = metadw_parseValidateAndCopyPlaylist(*(OpaqueCMBlockBuffer **)(a2 + 112), a1, a2, &v64, (uint64_t *)&v63);
    uint64_t v20 = v64;
    CFTypeRef v61 = v64;
    if (v19) {
      goto LABEL_84;
    }
    if (v64)
    {
      CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers((uint64_t)v64);
      uint64_t v22 = metadw_processCryptKeysFromPlaylist(a1, a2, ContentKeySpecifiers);
      if (v22)
      {
        uint64_t v18 = v22;
LABEL_79:
        CFRelease(v20);
        goto LABEL_80;
      }
    }
    CFTypeRef v23 = v63;
    if (!v63) {
      goto LABEL_38;
    }
    CFArrayRef v24 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers((uint64_t)v63);
    uint64_t v19 = metadw_processCryptKeysFromPlaylist(a1, a2, v24);
    if (v19)
    {
LABEL_84:
      uint64_t v18 = v19;
      goto LABEL_78;
    }
    if (!*(unsigned char *)(DerivedStorage + 144)) {
      goto LABEL_38;
    }
    uint64_t v25 = CMBaseObjectGetDerivedStorage();
    CFArrayRef theArray = 0;
    CFArrayRef DateEntryArray = (const __CFArray *)FigMediaPlaylistGetDateEntryArray((uint64_t)v23);
    if (DateEntryArray)
    {
      uint64_t v18 = FigPlayerInterstitialEventsCreateFromTaggedRangeMetadata(DateEntryArray, @"kFPICPlayerItem_Null", &theArray);
      if (dword_1E9350CF8)
      {
        unsigned int v67 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v28 = v67;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          uint64_t v30 = *(void *)(v25 + 136);
          int Count = (int)theArray;
          if (theArray) {
            int Count = CFArrayGetCount(theArray);
          }
          *(_DWORD *)CFTypeRef cf = 136316162;
          *(void *)&cf[4] = "metadw_processInterstitialEventsFromPlaylist";
          __int16 v70 = 2048;
          uint64_t v71 = a1;
          __int16 v72 = 2114;
          uint64_t v73 = v30;
          __int16 v74 = 1024;
          int v75 = Count;
          __int16 v76 = 1024;
          int v77 = v18;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayRef v32 = theArray;
      if (v18 || !theArray)
      {
LABEL_35:
        if (v32) {
          CFRelease(v32);
        }
        if (v18) {
          goto LABEL_78;
        }
LABEL_38:
        uint64_t v36 = CMBaseObjectGetDerivedStorage();
        v78[0] = 0;
        *(void *)CFTypeRef cf = 0;
        CFStringRef v37 = (const __CFString *)FigCFHTTPCreateURLString(*(const __CFURL **)(a2 + 24));
        if (!v37)
        {
          uint64_t v18 = FigSignalErrorAt();
          if (v18) {
            goto LABEL_78;
          }
          goto LABEL_56;
        }
        CFStringRef v38 = v37;
        if (!a6
          || (DataCFIndex Length = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a2 + 112)),
              CacheForStreaCFIndex m = FigCFHTTPCreateCacheHeaders(v38, DataLength, a6, 0, (CFDictionaryRef *)cf),
              !CacheForStream))
        {
          int v41 = *(_DWORD *)(a2 + 16);
          if ((v41 - 2) >= 3)
          {
            if (v41 == 5)
            {
              uint64_t v18 = FigSignalErrorAt();
            }
            else
            {
              if (v41 == 1)
              {
                uint64_t v42 = FigStreamingCacheSetMasterPlaylist(*(void *)(v36 + 24), *(const void **)(a2 + 112), *(const void **)cf);
LABEL_47:
                uint64_t v18 = v42;
                if (v42) {
                  goto LABEL_53;
                }
                goto LABEL_51;
              }
              uint64_t v18 = 0;
            }
LABEL_51:
            *(unsigned char *)(a2 + 136) = 1;
            uint64_t v43 = *(const void **)(a2 + 112);
            if (v43)
            {
              CFRelease(v43);
              *(void *)(a2 + 112) = 0;
            }
LABEL_53:
            CFRelease(v38);
            if (*(void *)cf) {
              CFRelease(*(CFTypeRef *)cf);
            }
            if (!v18)
            {
LABEL_56:
              metadw_estimateMediaBytesToDownloadForPlaylist(a1, a2, (uint64_t)v23);
              if (*(_DWORD *)(a2 + 16) == 1)
              {
                uint64_t v44 = *(void *)(DerivedStorage + 384);
                if (v44)
                {
                  uint64_t v45 = *(void *)(a2 + 144);
                  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v47 = v46 ? v46 : 0;
                  signed int v48 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v47 + 56);
                  if (v48) {
                    v48(v44, 0x1EE582C78, 0x1EE584E38, (UpTimeNanoseconds - v45) / 0xF4240uLL, 0);
                  }
                }
              }
              uint64_t v49 = *(void *)(DerivedStorage + 384);
              if (v49)
              {
                uint64_t v50 = *(void *)(a2 + 144);
                uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v52 = v51 ? v51 : 0;
                int v53 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v52 + 40);
                if (v53) {
                  v53(v49, 0x1EE582C78, 0x1EE558D98, (UpTimeNanoseconds - v50) / 0xF4240uLL);
                }
              }
              int v54 = *(_DWORD *)(a2 + 16);
              uint64_t v55 = *(void *)(CMBaseObjectGetDerivedStorage() + 384);
              if (v55)
              {
                if ((v54 - 2) <= 2)
                {
                  uint64_t v56 = (uint64_t)*off_1E57935E8[v54 - 2];
                  if (v56)
                  {
                    uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v58 = v57 ? v57 : 0;
                    unsigned int v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 32);
                    if (v59) {
                      v59(v55, 0x1EE582C78, v56, 1);
                    }
                  }
                }
              }
              uint64_t v18 = 0;
            }
LABEL_78:
            uint64_t v20 = v61;
            if (!v61) {
              goto LABEL_80;
            }
            goto LABEL_79;
          }
          CacheForStreaCFIndex m = metadw_createCacheForStream(a1, a2, v78);
          if (!CacheForStream)
          {
            uint64_t v42 = FigStreamingCacheMediaStreamSetPlaylist(*(void *)(v36 + 24), v78[0], *(const void **)(a2 + 112), *(const void **)cf);
            goto LABEL_47;
          }
        }
        uint64_t v18 = CacheForStream;
        goto LABEL_53;
      }
      int v33 = *(__CFArray **)(v25 + 376);
      if (!v33)
      {
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
        *(void *)(v25 + 376) = Mutable;
        if (!Mutable)
        {
          uint64_t v18 = FigSignalErrorAt();
          goto LABEL_34;
        }
        int v33 = Mutable;
        CFArrayRef v32 = theArray;
      }
      v79.length = CFArrayGetCount(v32);
      v79.locatioCFIndex n = 0;
      CFArrayAppendArray(v33, v32, v79);
    }
    uint64_t v18 = 0;
LABEL_34:
    CFArrayRef v32 = theArray;
    goto LABEL_35;
  }
  CFTypeRef v16 = (CMBlockBufferRef *)(a2 + 112);
  int v15 = *(OpaqueCMBlockBuffer **)(a2 + 112);
  if (!v15)
  {
    uint64_t Empty = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, (CMBlockBufferRef *)(a2 + 112));
    if (Empty) {
      goto LABEL_83;
    }
    int v15 = *v16;
  }
  uint64_t Empty = CMBlockBufferAppendBufferReference(v15, a3, a4, a5, 0);
  if (!Empty)
  {
    if (!FigStreamingPlaylistVerifyM3UPlaylist(*v16, &v65) && v65)
    {
      uint64_t v18 = 4294951694;
      goto LABEL_80;
    }
    goto LABEL_9;
  }
LABEL_83:
  uint64_t v18 = Empty;
LABEL_80:
  if (v63) {
    CFRelease(v63);
  }
  return v18;
}

void metadw_customURLReadCallback(uint64_t a1, const void *a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, unint64_t a6)
{
  v31[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v30 = 0;
  v31[0] = 0;
  CFTypeRef v28 = 0;
  uint64_t v29 = 0;
  CFTypeRef cf = 0;
  if (dworch_copyAssetDownloaderFromRetainProxy(a1, v31)) {
    goto LABEL_54;
  }
  CFTypeRef v10 = v31[0];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216)
    || (CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 320), a2)) == 0)
  {
    ResourceRequestForMetadataIteCFIndex m = FigSignalErrorAt();
    uint64_t v22 = 0;
    CFURLRef v21 = 0;
    goto LABEL_39;
  }
  uint64_t v13 = (uint64_t)Value;
  int v14 = *(_DWORD *)(DerivedStorage + 232);
  if (v14 == 1 || v14 == 3 && Value[4] == 5)
  {
    uint64_t HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
    if (!HTTPStatusCode || (ResourceRequestForMetadataIteCFIndex m = HTTPStatusCode, HTTPStatusCode == -17360))
    {
      uint64_t v17 = FigCFHTTPCreateCFErrorFromHTTPStatusCode(v29, (CFErrorRef *)&cf);
      if (v17) {
        goto LABEL_41;
      }
      int v18 = a5 & 1;
      if (a6 | (unint64_t)cf)
      {
        if (a6) {
          CFTypeRef v19 = (CFTypeRef)a6;
        }
        else {
          CFTypeRef v19 = cf;
        }
        CFTypeRef v20 = CFRetain(v19);
      }
      else
      {
        CFTypeRef v20 = 0;
      }
      if ((*(_DWORD *)(v13 + 16) - 1) > 3)
      {
        ResourceRequestForMetadataIteCFIndex m = FigSignalErrorAt();
        CFURLRef v21 = 0;
        uint64_t v22 = 0;
        goto LABEL_34;
      }
      if (v20)
      {
        uint64_t v22 = 0;
        CFURLRef v21 = 0;
LABEL_37:
        metadw_transitionToTerminalState(v10, v20);
        CFRelease(v20);
        goto LABEL_44;
      }
      if ((a5 & 1) != 0 && dword_1E9350CF8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v17 = FigCustomURLResponseInfoCopyRequestInfo();
      if (v17)
      {
LABEL_41:
        ResourceRequestForMetadataIteCFIndex m = v17;
      }
      else
      {
        uint64_t v24 = FigCustomURLResponseInfoCopyHTTPHeaders();
        if (!v24 || (ResourceRequestForMetadataIteCFIndex m = v24, v24 == -17360))
        {
          if ((a5 & 1) != 0 && FigCFHTTPIsStatusCodeRedirect(v29))
          {
            CFURLRef v25 = FigCFHTTPCopyRedirectLocationFromHTTPHeaders((const __CFDictionary *)v28);
            CFURLRef v21 = v25;
            if (!v25)
            {
              ResourceRequestForMetadataIteCFIndex m = FigSignalErrorAt();
              uint64_t v22 = 0;
              if (!ResourceRequestForMetadataItem) {
                goto LABEL_44;
              }
              goto LABEL_43;
            }
            uint64_t v26 = *(const void **)(v13 + 24);
            *(void *)(v13 + 24) = v25;
            CFRetain(v25);
            if (v26) {
              CFRelease(v26);
            }
            ResourceRequestForMetadataIteCFIndex m = metadw_createResourceRequestForMetadataItem(v10, v13);
            uint64_t v22 = 0;
            if (ResourceRequestForMetadataItem)
            {
LABEL_43:
              metadw_transitionToTerminalStateWithOSStatus(v10, ResourceRequestForMetadataItem);
              goto LABEL_44;
            }
          }
          else
          {
            uint64_t v22 = FigCFHTTPCreateHTTPMessageFromHTTPResponseHeaders(v28);
            ResourceRequestForMetadataIteCFIndex m = metadw_handlePlaylistFileData((uint64_t)v10, v13, a4, 0, 0, v22, v18);
            CFURLRef v21 = 0;
            if (ResourceRequestForMetadataItem) {
              goto LABEL_43;
            }
          }
LABEL_34:
          if (v18)
          {
            metadw_clearCustomURLRequestState((uint64_t)v10, v13);
            ++*(void *)(DerivedStorage + 336);
            metadw_checkIfDownloadIsComplete(v10);
            ResourceRequestForMetadataIteCFIndex m = 0;
          }
          if (v20) {
            goto LABEL_37;
          }
LABEL_39:
          if (!ResourceRequestForMetadataItem) {
            goto LABEL_44;
          }
          goto LABEL_43;
        }
      }
    }
    CFURLRef v21 = 0;
    uint64_t v22 = 0;
    goto LABEL_43;
  }
  CFURLRef v21 = 0;
  uint64_t v22 = 0;
LABEL_44:
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v22) {
    CFRelease(v22);
  }
LABEL_54:
  if (v31[0]) {
    CFRelease(v31[0]);
  }
}

void metadw_sendDidFinishLoadingPlaylistsCallbackCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(void (**)(void, void))(DerivedStorage + 112);
    if (v3) {
      v3(a1[1], *a1);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

void metadw_sendDownloadSucceededCallbackOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(void (**)(void, void))(DerivedStorage + 48);
    if (v3) {
      v3(a1[1], *a1);
    }
    uint64_t v4 = *(void (**)(void, void))(DerivedStorage + 88);
    if (v4) {
      v4(a1[1], *a1);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  uint64_t v5 = (const void *)a1[1];
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

void metadw_pauseDispatch(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    uint64_t v5 = FigSignalErrorAt();
    if (v5) {
      metadw_transitionToTerminalStateWithOSStatus(*(const void **)a1, v5);
    }
  }
  else
  {
    if (*(_DWORD *)(DerivedStorage + 232) <= 1u)
    {
      *(_DWORD *)(DerivedStorage + 232) = 2;
      metadw_cancelResourceRequestForMetadataItems((uint64_t)v2);
    }
    LODWORD(v5) = 0;
  }
  *(_DWORD *)(a1 + 24) = v5;
}

void metadw_stopDispatch(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350CF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 216))
  {
    uint64_t v5 = FigSignalErrorAt();
    if (v5) {
      metadw_transitionToTerminalStateWithOSStatus(*(const void **)a1, v5);
    }
  }
  else
  {
    if (*(_DWORD *)(DerivedStorage + 232) <= 2u)
    {
      *(_DWORD *)(DerivedStorage + 232) = 5;
      metadw_cancelResourceRequestForMetadataItems((uint64_t)v2);
    }
    LODWORD(v5) = 0;
  }
  *(_DWORD *)(a1 + 24) = v5;
}

uint64_t FigWriteHLSfMP4SecurityInfoIncludingAtomHeader(int a1, unsigned int a2, signed int a3, unsigned int a4, const __CFData *a5, void *a6, size_t *a7, unint64_t a8, void *a9)
{
  CMBlockBufferRef theBuffer = 0;
  uint64_t v11 = hlsfmp4_CreateBlockBufferContainingHLSfMP4SecurityInfo(a1, a2, a3, a4, a5, a6, a8, &theBuffer);
  CFArrayRef v12 = theBuffer;
  if (v11) {
    goto LABEL_7;
  }
  uint64_t v13 = (uint64_t)a9;
  DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
  if (a7) {
    *a7 = DataLength;
  }
  if (a9)
  {
    if (DataLength > a8) {
      uint64_t v11 = FigSignalErrorAt();
    }
    else {
      uint64_t v11 = CMBlockBufferCopyDataBytes(v12, 0, DataLength, a9);
    }
LABEL_7:
    uint64_t v13 = v11;
  }
  if (v12) {
    CFRelease(v12);
  }
  return v13;
}

uint64_t hlsfmp4_CreateBlockBufferContainingHLSfMP4SecurityInfo(int a1, unsigned int a2, signed int a3, unsigned int a4, const __CFData *a5, void *a6, unint64_t a7, CMBlockBufferRef *a8)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v16 = CMBlockBufferCreateEmpty(0, 0x20u, 1u, &blockBufferOut);
  if (v16) {
    goto LABEL_89;
  }
  uint64_t v16 = FigAtomWriterInitWithBlockBuffer();
  if (v16) {
    goto LABEL_89;
  }
  uint64_t v17 = FigAtomWriterBeginAtom();
  if (v17)
  {
    uint64_t appended = v17;
    goto LABEL_84;
  }
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  LODWORD(v39) = 0;
  uint64_t v18 = FigAtomWriterInitWithParent();
  if (v18) {
    goto LABEL_80;
  }
  uint64_t v18 = FigAtomWriterBeginAtom();
  if (v18) {
    goto LABEL_80;
  }
  LODWORD(v39) = bswap32(a2);
  uint64_t appended = FigAtomWriterAppendData();
  FigAtomWriterEndAtom();
  if (appended)
  {
LABEL_84:
    FigAtomWriterEndAtom();
    goto LABEL_90;
  }
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  DWORD2(v39) = 0;
  *(void *)&long long v39 = 0;
  LODWORD(v49) = 0;
  if (EC_GetEncryptionScheme((uint64_t)a6, &v49) || !v49 || v49 >= 4)
  {
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_19;
  }
  uint64_t v18 = FigAtomWriterInitWithParent();
  if (v18 || (uint64_t v18 = FigAtomWriterBeginAtom(), v18))
  {
LABEL_80:
    uint64_t appended = v18;
    FigAtomWriterEndAtom();
    goto LABEL_84;
  }
  if (v49 == 1) {
    int v20 = 845374051;
  }
  else {
    int v20 = 1935893091;
  }
  if (v49 == 3) {
    unsigned int v21 = 1668179299;
  }
  else {
    unsigned int v21 = v20;
  }
  LODWORD(v39) = 0;
  *(void *)((char *)&v39 + 4) = v21 | 0x10000000000;
  uint64_t v22 = FigAtomWriterAppendData();
LABEL_19:
  uint64_t appended = v22;
  FigAtomWriterEndAtom();
  if (appended) {
    goto LABEL_84;
  }
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  unsigned int v38 = 0;
  if (EC_GetEncryptionScheme((uint64_t)a6, &v38) || !v38 || v38 >= 4)
  {
    uint64_t v23 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v23 = FigAtomWriterInitWithParent();
    if (!v23)
    {
      uint64_t v23 = FigAtomWriterBeginAtom();
      if (!v23)
      {
        if (v38 == 1)
        {
          if (a1 != 1986618469)
          {
            uint64_t appended = 0;
            goto LABEL_65;
          }
          uint64_t v48 = 0;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          LODWORD(v50) = 0;
          uint64_t v49 = 0;
          uint64_t v24 = FigAtomWriterInitWithParent();
          if (v24) {
            goto LABEL_63;
          }
          uint64_t v24 = FigAtomWriterBeginAtom();
          if (v24) {
            goto LABEL_63;
          }
          if (a3 > 0 && (a4 & 0x80000000) == 0 && a4 + a3 == 10)
          {
            LODWORD(v49) = 0;
            HIDWORD(v49) = bswap32(a3);
            LODWORD(v50) = bswap32(a4);
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v48 = 0;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v45 = 0u;
          uint64_t v49 = 0;
          long long v50 = 0uLL;
          if (a5) {
            char Length = CFDataGetLength(a5);
          }
          else {
            char Length = 0;
          }
          char v44 = Length;
          int v43 = 0;
          if (a3 >= 0x10 || a4 >= 0x10 || EC_GetEncryptionScheme((uint64_t)a6, &v43) || !v43) {
            goto LABEL_79;
          }
          uint64_t v24 = FigAtomWriterInitWithParent();
          if (v24) {
            goto LABEL_63;
          }
          uint64_t v24 = FigAtomWriterBeginAtom();
          if (v24) {
            goto LABEL_63;
          }
          LODWORD(v49) = v43 != 3;
          if (v43 == 3)
          {
            if (a4 | a3) {
              goto LABEL_79;
            }
            *(_WORD *)((char *)&v49 + 5) = 256;
            if (EC_HasPlayReadyInfo((uint64_t)a6))
            {
              PlayReadyKeyCFStringRef Identifier = (const __CFData *)EC_GetPlayReadyKeyIdentifier((uint64_t)a6);
              if (!PlayReadyKeyIdentifier) {
                goto LABEL_79;
              }
            }
            else if (EC_HasWidevineInfo((uint64_t)a6))
            {
              PlayReadyKeyCFStringRef Identifier = (const __CFData *)EC_GetWidevineKeyIdentifier((uint64_t)a6);
              if (!PlayReadyKeyIdentifier) {
                goto LABEL_79;
              }
            }
            else
            {
              if (!EC_HasLegacyConfigInfo(a6)) {
                goto LABEL_79;
              }
              PlayReadyKeyCFStringRef Identifier = (const __CFData *)EC_GetLegacyConfigKeyIdentifier(a6);
              if (!PlayReadyKeyIdentifier) {
                goto LABEL_79;
              }
            }
            HIBYTE(v49) = 8;
            long long v50 = *(_OWORD *)CFDataGetBytePtr(PlayReadyKeyIdentifier);
          }
          else
          {
            BYTE5(v49) = a4 | (16 * a3);
            HIWORD(v49) = 1;
            LOBYTE(v50) = 0;
          }
          uint64_t appended = FigAtomWriterAppendData();
          if (appended || BYTE6(v49) != 1 || HIBYTE(v49)) {
            goto LABEL_64;
          }
          if (Length == 8 || Length == 16)
          {
            uint64_t v24 = FigAtomWriterAppendData();
            if (v24)
            {
LABEL_63:
              uint64_t appended = v24;
LABEL_64:
              FigAtomWriterEndAtom();
              goto LABEL_65;
            }
            CFDataGetBytePtr(a5);
LABEL_62:
            uint64_t v24 = FigAtomWriterAppendData();
            goto LABEL_63;
          }
        }
LABEL_79:
        uint64_t v24 = FigSignalErrorAt();
        goto LABEL_63;
      }
    }
  }
  uint64_t appended = v23;
LABEL_65:
  FigAtomWriterEndAtom();
  FigAtomWriterEndAtom();
  if (appended) {
    goto LABEL_90;
  }
  if (!a7 || *((void *)&v35 + 1) == a7) {
    goto LABEL_77;
  }
  if (*((void *)&v36 + 1) + 8 > a7)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_89;
  }
  uint64_t v16 = FigAtomWriterInitWithBlockBuffer();
  if (v16)
  {
LABEL_89:
    uint64_t appended = v16;
    goto LABEL_90;
  }
  unint64_t v27 = a7 - *((void *)&v35 + 1);
  BOOL v28 = a7 - *((void *)&v35 + 1) >= 7;
  size_t v29 = a7 - *((void *)&v35 + 1) - 7;
  if (v29 == 0 || !v28 || v27 >= 0x7D1)
  {
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_93;
  }
  uint64_t v30 = FigAtomWriterBeginAtom();
  if (v30)
  {
LABEL_93:
    uint64_t appended = v30;
    uint64_t v31 = 0;
    goto LABEL_76;
  }
  uint64_t v31 = malloc_type_calloc(1uLL, v29, 0x7E71BF74uLL);
  if (v31)
  {
    FigAtomWriterAppendData();
    uint64_t appended = 0;
  }
  else
  {
    uint64_t appended = FigSignalErrorAt();
  }
LABEL_76:
  free(v31);
  FigAtomWriterEndAtom();
  if (!appended)
  {
LABEL_77:
    uint64_t appended = 0;
    *a8 = blockBufferOut;
    return appended;
  }
LABEL_90:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return appended;
}

uint64_t FigCreateHLSfMP4SecurityInfoData(int a1, int a2, signed int a3, unsigned int a4, const __CFData *a5, void *a6, __CFData **a7)
{
  CMBlockBufferRef theBuffer = 0;
  if (a2 == 1869641075) {
    int v8 = 1332770163;
  }
  else {
    int v8 = a2;
  }
  if (a2 == 1718378851) {
    unsigned int v9 = 1716281667;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = hlsfmp4_CreateBlockBufferContainingHLSfMP4SecurityInfo(a1, v9, a3, a4, a5, a6, 0, &theBuffer);
  uint64_t v11 = theBuffer;
  if (v10) {
    goto LABEL_15;
  }
  size_t v12 = CMBlockBufferGetDataLength(theBuffer) - 8;
  CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12);
  if (!Mutable)
  {
    uint64_t v10 = FigSignalErrorAt();
LABEL_15:
    uint64_t v16 = v10;
    goto LABEL_11;
  }
  int v14 = Mutable;
  CFDataSetLength(Mutable, v12);
  MutableBytePtr = CFDataGetMutableBytePtr(v14);
  uint64_t v16 = CMBlockBufferCopyDataBytes(v11, 8uLL, v12, MutableBytePtr);
  if (v16) {
    CFRelease(v14);
  }
  else {
    *a7 = v14;
  }
LABEL_11:
  if (v11) {
    CFRelease(v11);
  }
  return v16;
}

uint64_t FigParseHLSfMP4SecurityInfoAndCopyIV(int a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5, _DWORD *a6, _OWORD *a7, void *a8)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  LODWORD(v21) = a1;
  uint64_t v13 = FigAtomStreamInitWithMemoryBlock();
  if (v13) {
    goto LABEL_32;
  }
  uint64_t v13 = hlsfmp4_ParseChildAtoms((uint64_t)v20, 3, (uint64_t)&hlsfmp4_parse_sinf_atomDispatch, (uint64_t)&v21);
  if (v13) {
    goto LABEL_32;
  }
  int v14 = DWORD1(v21);
  if (!DWORD1(v21)) {
    goto LABEL_31;
  }
  int v15 = DWORD2(v21);
  if (v21 == 1986618469)
  {
    if (DWORD2(v21))
    {
      int v16 = HIDWORD(v21);
      if (HIDWORD(v21) + DWORD2(v21) == 10)
      {
        if (!a4) {
          goto LABEL_8;
        }
LABEL_21:
        if (DWORD1(v21) == 1716281667)
        {
          int v14 = 1718378851;
        }
        else if (DWORD1(v21) == 1332770163)
        {
          int v14 = 1869641075;
        }
        *a4 = v14;
        if (!a5) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    goto LABEL_31;
  }
  if (DWORD2(v21) || (int v15 = HIDWORD(v21)) != 0)
  {
LABEL_31:
    uint64_t v13 = FigSignalErrorAt();
LABEL_32:
    uint64_t v18 = v13;
    goto LABEL_25;
  }
  int v16 = 0;
  if (a4) {
    goto LABEL_21;
  }
LABEL_8:
  if (a5) {
LABEL_9:
  }
    *a5 = v15;
LABEL_10:
  if (a6) {
    *a6 = v16;
  }
  if (a7) {
    *a7 = v22;
  }
  if (a8)
  {
    CFTypeRef v17 = cf[0];
    if (cf[0]) {
      CFTypeRef v17 = CFRetain(cf[0]);
    }
    uint64_t v18 = 0;
    *a8 = v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_25:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v18;
}

uint64_t FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(const opaqueCMFormatDescription *a1, int *a2, _DWORD *a3, _DWORD *a4, _OWORD *a5, void *a6)
{
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(a1);
  CFTypeRef cf = 0;
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  if (!Extensions)
  {
    uint64_t v23 = FigSignalErrorAt();
    if (!a6) {
      return v23;
    }
    CFTypeRef v27 = 0;
    CFTypeRef v28 = 0;
    if (v23) {
      return v23;
    }
    goto LABEL_22;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1EE20]);
  if (!Value) {
    goto LABEL_12;
  }
  CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(Value, @"sinf");
  if (!v15) {
    goto LABEL_12;
  }
  CFArrayRef v16 = v15;
  CFTypeID v17 = CFGetTypeID(v15);
  if (v17 == CFArrayGetTypeID())
  {
    if (CFArrayGetCount(v16) >= 1)
    {
      CFIndex v18 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v16, v18);
        CFTypeID v20 = CFGetTypeID(ValueAtIndex);
        if (v20 != CFDataGetTypeID()) {
          break;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)ValueAtIndex);
        CFIndex Length = CFDataGetLength((CFDataRef)ValueAtIndex);
        if (!FigParseHLSfMP4SecurityInfoAndCopyIV(MediaType, (uint64_t)BytePtr, Length, a2, a3, a4, a5, &cf))
        {
          uint64_t v23 = 0;
          goto LABEL_17;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (++v18 >= CFArrayGetCount(v16)) {
          goto LABEL_12;
        }
      }
    }
    goto LABEL_12;
  }
  CFTypeID v24 = CFGetTypeID(v16);
  if (v24 != CFDataGetTypeID())
  {
LABEL_12:
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_17;
  }
  CFURLRef v25 = CFDataGetBytePtr(v16);
  CFIndex v26 = CFDataGetLength(v16);
  uint64_t v23 = FigParseHLSfMP4SecurityInfoAndCopyIV(MediaType, (uint64_t)v25, v26, a2, a3, a4, a5, &cf);
  if (v23)
  {
    CFTypeRef v27 = cf;
    goto LABEL_23;
  }
LABEL_17:
  CFTypeRef v27 = cf;
  if (a6 && !v23)
  {
    if (cf)
    {
      CFTypeRef v28 = CFRetain(cf);
      CFTypeRef v27 = cf;
    }
    else
    {
      CFTypeRef v28 = 0;
    }
LABEL_22:
    uint64_t v23 = 0;
    *a6 = v28;
  }
LABEL_23:
  if (v27) {
    CFRelease(v27);
  }
  return v23;
}

uint64_t FigWriteHLSfMP4SecurityInfoPlaceholderIncludingAtomHeader(int a1, uint64_t a2, size_t *a3, size_t a4, uint64_t *a5)
{
  if (a1 == 1936684398 || a1 == 1986618469) {
    size_t v6 = 89;
  }
  else {
    size_t v6 = 40;
  }
  size_t v7 = v6 + 8;
  if (a3) {
    *a3 = v7;
  }
  if (!a5) {
    return 0;
  }
  if (v7 <= a4)
  {
    *a5 = (v7 << 24) | 0x666E733400000000;
    bzero(a5 + 1, v6);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigCreateHLSfMP4SecurityInfoPlaceholderData(int a1, uint64_t a2, __CFData **a3)
{
  if (a1 == 1936684398 || a1 == 1986618469) {
    size_t v5 = 89;
  }
  else {
    size_t v5 = 40;
  }
  CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5);
  if (Mutable)
  {
    size_t v7 = Mutable;
    CFDataSetLength(Mutable, v5);
    MutableBytePtr = CFDataGetMutableBytePtr(v7);
    bzero(MutableBytePtr, v5);
    *a3 = v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t hlsfmp4_parse_frma()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t hlsfmp4_parse_schm()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t hlsfmp4_parse_schi()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

uint64_t hlsfmp4_ParseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = 0;
  unsigned int v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (result) {
      return result;
    }
    if (a2 >= 1)
    {
      int v11 = 0;
      size_t v12 = v9;
      uint64_t v13 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v13 += 2;
        v12 += 2;
        if (a2 == v11) {
          goto LABEL_12;
        }
      }
      int v14 = 1 << v11;
      if ((*((unsigned char *)v12 - 4) & 1) != 0 && (v14 & v8) != 0) {
        return FigSignalErrorAt();
      }
      uint64_t result = (*v12)(a1, a4);
      if (result) {
        return result;
      }
      v8 |= v14;
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if (result)
    {
      if (result == -12890) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
      if (a2 >= 1)
      {
        int v15 = 0;
        CFArrayRef v16 = (char *)(a3 + 4);
        do
        {
          char v17 = *v16;
          v16 += 16;
          if ((v17 & 2) != 0 && ((v8 >> v15) & 1) == 0) {
            uint64_t result = FigSignalErrorAt();
          }
          ++v15;
        }
        while (a2 != v15);
      }
      return result;
    }
  }
}

uint64_t hlsfmp4_parse_cspn()
{
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t hlsfmp4_parse_tenc()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 0;
  long long v2 = 0uLL;
  uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!result)
  {
    FigAtomStreamGetCurrentAtomVersionAndFlags();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t videoMentorRegisterCFTypes()
{
  sVideoMentorFrameNodeID = _CFRuntimeRegisterClass();
  uint64_t result = _CFRuntimeRegisterClass();
  sVideoMentorRefreshGroupID = result;
  return result;
}

void videoMentorPrerollSampleNotImmediatelyAvailable(uint64_t a1, uint64_t a2)
{
}

void videoMentorDependencyStateReset(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  if (*(void *)a1)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFArrayRef v4 = Mutable;
      CFArrayAppendValue(Mutable, v2);
      if (CFArrayGetCount(v4) >= 1)
      {
        do
        {
          CFDictionaryRef ValueAtIndex = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v4, 0);
          CFArrayRemoveValueAtIndex(v4, 0);
          CFArrayRef v6 = ValueAtIndex[3];
          v21.length = CFArrayGetCount(v6);
          v21.locatioCFIndex n = 0;
          CFArrayAppendArray(v4, v6, v21);
          CFArrayRef v7 = ValueAtIndex[5];
          v22.length = CFArrayGetCount(v7);
          v22.locatioCFIndex n = 0;
          CFArrayAppendArray(v4, v7, v22);
          CFArrayRemoveAllValues(ValueAtIndex[3]);
          CFArrayRemoveAllValues(ValueAtIndex[5]);
          CFArrayRemoveAllValues(ValueAtIndex[4]);
          CFArrayRemoveAllValues(ValueAtIndex[6]);
        }
        while (CFArrayGetCount(v4) > 0);
      }
      CFRelease(v4);
    }
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0;
    }
  }
  unsigned int v8 = *(const void **)(a1 + 8);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 8) = 0;
  }
  CFArrayRef v9 = *(const __CFArray **)(a1 + 16);
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0; i != v11; ++i)
      {
        uint64_t v13 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
        CFArrayRemoveAllValues(v13[5]);
        CFArrayRemoveAllValues(v13[6]);
      }
    }
    int v14 = *(const void **)(a1 + 16);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 16) = 0;
    }
  }
  int v15 = *(const void **)(a1 + 24);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v16 = MEMORY[0x1E4F1F9F8];
  *(_WORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 36) = *(_OWORD *)v16;
  *(void *)(a1 + 52) = *(void *)(v16 + 16);
  char v17 = *(const void **)(a1 + 64);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 64) = 0;
  }
  CFIndex v18 = *(const void **)(a1 + 72);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 72) = 0;
  }
  CFTypeRef v19 = *(const void **)(a1 + 80);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 80) = 0;
  }
  *(unsigned char *)(a1 + 88) = 0;
  CFTypeID v20 = *(const void **)(a1 + 96);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 96) = 0;
  }
}

uint64_t VideoMentorSetModeToReversePlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, const __CFDictionary *a6, const void *a7, const void *a8, CFTypeRef a9)
{
  CFTypeRef v37 = 0;
  CFTypeRef cf = 0;
  int PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a6);
  unsigned int v34 = audioMentorGetModeChangePolicy(a6);
  BOOL IsCursorAccuracyExact = videoMentorIsCursorAccuracyExact(a6);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  int v39 = 0;
  FigCFDictionaryGetInt32IfPresent();
  if (a6)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetFloat32IfPresent();
  }
  if (a2
    && ((uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v17 = 0) : (v17 = v16),
        (CFIndex v18 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v17 + 8)) == 0 || v18(a2, &cf))
    || a4
    && ((uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v20 = 0) : (v20 = v19),
        (CFRange v21 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v20 + 8)) == 0 || v21(a4, &v37)))
  {
    uint64_t v31 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 96));
    if (!*(unsigned char *)a1)
    {
      CFRange v22 = *(const void **)(a1 + 168);
      CFTypeRef v23 = cf;
      *(void *)(a1 + 168) = cf;
      if (v23) {
        CFRetain(v23);
      }
      if (v22) {
        CFRelease(v22);
      }
      uint64_t v24 = *(void *)(a3 + 16);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)a3;
      CFURLRef v25 = *(const void **)(a1 + 200);
      CFTypeRef v26 = v37;
      *(void *)(a1 + 192) = v24;
      *(void *)(a1 + 200) = v26;
      if (v26) {
        CFRetain(v26);
      }
      if (v25) {
        CFRelease(v25);
      }
      long long v27 = *a5;
      *(void *)(a1 + 224) = *((void *)a5 + 2);
      *(_OWORD *)(a1 + 208) = v27;
      *(_DWORD *)(a1 + 232) = -1;
      *(_DWORD *)(a1 + 236) = -1;
      *(_DWORD *)(a1 + 240) = PolicyFromPrerollPolicy;
      *(_DWORD *)(a1 + 244) = v34;
      *(unsigned char *)(a1 + 248) = 0;
      *(_DWORD *)(a1 + 252) = 0;
      *(_DWORD *)(a1 + 256) = 1065353216;
      *(unsigned char *)(a1 + 372) = IsCursorAccuracyExact;
      *(unsigned char *)(a1 + 373) = 1;
      *(unsigned char *)(a1 + 374) = 0;
      *(_DWORD *)(a1 + 452) = 0;
      CFTypeRef v28 = *(const void **)(a1 + 464);
      *(void *)(a1 + 464) = a7;
      if (a7) {
        CFRetain(a7);
      }
      if (v28) {
        CFRelease(v28);
      }
      size_t v29 = *(const void **)(a1 + 472);
      *(void *)(a1 + 472) = a8;
      if (a8) {
        CFRetain(a8);
      }
      if (v29) {
        CFRelease(v29);
      }
      uint64_t v30 = *(const void **)(a1 + 480);
      *(void *)(a1 + 480) = a9;
      if (a9) {
        CFRetain(a9);
      }
      if (v30) {
        CFRelease(v30);
      }
      *(_DWORD *)(a1 + 112) = 3;
      *(unsigned char *)(a1 + 116) = 1;
      FigMemoryBarrier();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 96));
    FigSemaphoreSignal();
    uint64_t v31 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v31;
}

uint64_t VideoMentorSetModeToEmptyEdit(uint64_t a1, const void *a2, const __CFDictionary *a3, const void *a4, const void *a5)
{
  int PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a3);
  unsigned int v11 = audioMentorGetModeChangePolicy(a3);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19970E910](*(void *)(a1 + 96));
  if (!*(unsigned char *)a1)
  {
    *(_DWORD *)(a1 + 240) = PolicyFromPrerollPolicy;
    *(_DWORD *)(a1 + 244) = v11;
    *(unsigned char *)(a1 + 374) = 0;
    *(_DWORD *)(a1 + 452) = 0;
    size_t v12 = *(const void **)(a1 + 456);
    *(void *)(a1 + 456) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v13 = *(const void **)(a1 + 472);
    *(void *)(a1 + 472) = a4;
    if (a4) {
      CFRetain(a4);
    }
    if (v13) {
      CFRelease(v13);
    }
    int v14 = *(const void **)(a1 + 480);
    *(void *)(a1 + 480) = a5;
    if (a5) {
      CFRetain(a5);
    }
    if (v14) {
      CFRelease(v14);
    }
    *(_DWORD *)(a1 + 112) = 4;
    *(unsigned char *)(a1 + 116) = 1;
    FigMemoryBarrier();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 96));
  FigSemaphoreSignal();
  return 0;
}

uint64_t VideoMentorSetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  if (a1 && !*(unsigned char *)a1)
  {
    if (FigCFEqual())
    {
      if (!a3) {
        return 0;
      }
      CFTypeID v5 = CFGetTypeID(a3);
      if (v5 != CFDictionaryGetTypeID()) {
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 272) = v11;
LABEL_23:
      MEMORY[0x19970E930](*(void *)(a1 + 264));
      return 0;
    }
    if (FigCFEqual())
    {
      if (!a3) {
        return 0;
      }
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 != CFDictionaryGetTypeID()) {
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 296) = v11;
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (!a3) {
        return 0;
      }
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 != CFDictionaryGetTypeID()) {
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 320) = v11;
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (!a3) {
        return 0;
      }
      CFTypeID v8 = CFGetTypeID(a3);
      if (v8 != CFDictionaryGetTypeID()) {
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(a1 + 264));
      CMTimeMakeFromDictionary(&v11, (CFDictionaryRef)a3);
      *(CMTime *)(a1 + 344) = v11;
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (!a3) {
        return 0;
      }
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 != CFNumberGetTypeID()) {
        return 0;
      }
      MEMORY[0x19970E910](*(void *)(a1 + 264));
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, (void *)(a1 + 368));
      goto LABEL_23;
    }
  }

  return FigSignalErrorAt();
}

uint64_t VideoMentorSetClientPID(unsigned char *a1)
{
  if (a1 && !*a1) {
    return FigThreadSetProperty();
  }
  else {
    return 4294954511;
  }
}

uint64_t VideoMentorSetThrottleForBackground(uint64_t a1, int a2)
{
  if (!a1 || *(unsigned char *)a1) {
    return 4294954511;
  }
  int valuePtr = 16 * (a2 != 0);
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t v3 = FigThreadSetProperty();
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t FigBaseObject = FigSampleCursorServiceGetFigBaseObject(*(void *)(a1 + 8));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v8 = v7 ? v7 : 0;
    CFTypeID v9 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v8 + 56);
    if (v9) {
      v9(FigBaseObject, @"PriorityOfConsistentThreadHandlingSampleCursors", v5);
    }
  }
  if (v5) {
    CFRelease(v5);
  }
  return v3;
}

uint64_t VideoMentorCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *videoMentorDebugCopyKnownNodes(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 8);
  CFIndex Count = CFDictionaryGetCount(v3);
  CFStringAppendFormat(Mutable, 0, @"Known nodes: %p (%d)\n", v3, Count);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)videoMentorDebugCopyKnownNodesApplier, Mutable);
  return Mutable;
}

void videoMentorDebugCopyKnownNodesApplier(uint64_t a1, uint64_t a2, __CFString *a3)
{
  CFMutableDictionaryRef v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(a3, 0, @"\t%@\n", v4);

  CFRelease(v4);
}

void videoMentorDebugDumpGraph(uint64_t *a1, const char *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (Mutable)
  {
    CFTypeID v6 = Mutable;
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v4, 0, 0, 0);
    if (v7)
    {
      CFDictionaryRef v8 = v7;
      CFTypeID v9 = fopen(a2, "w+");
      if (v9)
      {
        uint64_t v10 = v9;
        fwrite("digraph dependencyGraph {\n", 0x1AuLL, 1uLL, v9);
        fwrite("node [ style = filled ]\n", 0x18uLL, 1uLL, v10);
        videoMentorDebugDumpGraphNode(v10, v6, v8, *a1);
        fwrite("}\n", 2uLL, 1uLL, v10);
        fclose(v10);
      }
      CFRelease(v6);
    }
    else
    {
      CFDictionaryRef v8 = v6;
    }
    CFRelease(v8);
  }
}

void videoMentorDebugDumpGraphNode(FILE *a1, __CFSet *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!CFSetContainsValue(a2, (const void *)a4))
  {
    CFSetSetValue(a2, (const void *)a4);
    time.xpc_object_t value = 0;
    asprintf((char **)&time, "node_%p", (const void *)a4);
    xpc_object_t value = (char *)time.value;
    CMTime time = *(CMTime *)(a4 + 104);
    double Seconds = CMTimeGetSeconds(&time);
    CMTime time = *(CMTime *)(a4 + 128);
    Float64 v10 = CMTimeGetSeconds(&time);
    fprintf(a1, "\"%s\" [ label = \"PTS %1.6f OPTS %1.6f\\n", value, Seconds, v10);
    CMTime v11 = " Sync";
    size_t v12 = "";
    if (!*(unsigned char *)(a4 + 158)) {
      CMTime v11 = "";
    }
    if (*(unsigned char *)(a4 + 159)) {
      uint64_t v13 = " Partial sync";
    }
    else {
      uint64_t v13 = "";
    }
    int v14 = "  Open GOP";
    if (!*(unsigned char *)(a4 + 160)) {
      int v14 = "";
    }
    if (*(unsigned char *)(a4 + 161)) {
      int v15 = " droppable";
    }
    else {
      int v15 = "";
    }
    if (*(unsigned char *)(a4 + 162)) {
      uint64_t v16 = " leading";
    }
    else {
      uint64_t v16 = "";
    }
    if (*(unsigned char *)(a4 + 157)) {
      uint64_t v17 = " STSA";
    }
    else {
      uint64_t v17 = "";
    }
    if (*(unsigned char *)(a4 + 156)) {
      size_t v12 = " TSA";
    }
    fprintf(a1, "T%d%s%s%s%s%s%s%s", *(_DWORD *)(a4 + 152), v11, v13, v14, v15, v16, v17, v12);
    uint64_t v18 = *(void *)(a4 + 56);
    if (v18)
    {
      CMTime time = *(CMTime *)(v18 + 16);
      Float64 v19 = CMTimeGetSeconds(&time);
      fprintf(a1, " RG%1.6f", v19);
      uint64_t v20 = *(void *)(a4 + 56);
      if (*(unsigned char *)(v20 + 58))
      {
        fwrite("(catchup)", 9uLL, 1uLL, a1);
        uint64_t v20 = *(void *)(a4 + 56);
      }
      if (!*(unsigned char *)(v20 + 56)) {
        fwrite("(undetermined)", 0xEuLL, 1uLL, a1);
      }
    }
    if ((*(_DWORD *)(a4 + 92) & 0x1D) == 1)
    {
      CMTime time = *(CMTime *)(a4 + 80);
      Float64 v21 = CMTimeGetSeconds(&time);
      fprintf(a1, "\\nadjusted to %1.6f", v21);
    }
    fprintf(a1, "\\nnode %p", (const void *)a4);
    int v22 = *(_DWORD *)(a4 + 72);
    if (v22)
    {
      if (v22 == 1)
      {
        CFTypeRef v23 = "NO";
      }
      else if (v22 == 2)
      {
        CFTypeRef v23 = "YES";
      }
      else
      {
        CFTypeRef v23 = "??";
      }
    }
    else
    {
      CFTypeRef v23 = "UNK";
    }
    int v24 = *(_DWORD *)(a4 + 68);
    if (v24)
    {
      if (v24 == 1)
      {
        CFURLRef v25 = "NO";
      }
      else if (v24 == 2)
      {
        CFURLRef v25 = "YES";
      }
      else
      {
        CFURLRef v25 = "??";
      }
    }
    else
    {
      CFURLRef v25 = "UNK";
    }
    int v26 = *(_DWORD *)(a4 + 76);
    long long v27 = "undetermined";
    if (v26 == 2) {
      long long v27 = "selected";
    }
    if (v26 == 1) {
      CFTypeRef v28 = "dropped";
    }
    else {
      CFTypeRef v28 = v27;
    }
    fprintf(a1, "\\nR: %s L: %s S: %s", v23, v25, v28);
    fputc(34, a1);
    size_t v29 = *(const void **)(a4 + 56);
    if (v29)
    {
      uint64_t v30 = (char **)CFDictionaryGetValue(a3, v29);
      if (!v30)
      {
        uint64_t v30 = &videoMentorDebugDumpGraphNode_colorStrings[3 * videoMentorDebugDumpGraphNode_nextColorIndex];
        videoMentorDebugDumpGraphNode_nextColorIndex = ((_BYTE)videoMentorDebugDumpGraphNode_nextColorIndex + 1) & 3;
        CFDictionarySetValue(a3, *(const void **)(a4 + 56), v30);
      }
      int v31 = *(_DWORD *)(a4 + 76);
      uint64_t v32 = 1;
      if (v31 != 2) {
        uint64_t v32 = 2;
      }
      if (v31) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      fprintf(a1, ", color = \"%s\"", v30[v33]);
    }
    fwrite("]\n", 2uLL, 1uLL, a1);
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a4 + 24));
    if (Count >= 1)
    {
      CFIndex v35 = Count;
      for (CFIndex i = 0; i != v35; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 24), i);
        time.xpc_object_t value = 0;
        asprintf((char **)&time, "node_%p", ValueAtIndex);
        unsigned int v38 = (void *)time.value;
        fprintf(a1, "\"%s\" -> \"%s\"\n", value, (const char *)time.value);
        free(v38);
      }
    }
    if (*(unsigned char *)(a4 + 64)) {
      fprintf(a1, "\"%s\" -> \"UnknownDepFor%s\"\n", value, value);
    }
    CFIndex v39 = CFArrayGetCount(*(CFArrayRef *)(a4 + 40));
    if (v39 >= 1)
    {
      CFIndex v40 = v39;
      for (CFIndex j = 0; j != v40; ++j)
      {
        uint64_t v42 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 40), j);
        time.xpc_object_t value = 0;
        asprintf((char **)&time, "node_%p", v42);
        int v43 = (void *)time.value;
        fprintf(a1, "\"%s\" -> \"%s\" [style = dotted]\n", value, (const char *)time.value);
        free(v43);
      }
    }
    CFIndex v44 = CFArrayGetCount(*(CFArrayRef *)(a4 + 24));
    if (v44 >= 1)
    {
      CFIndex v45 = v44;
      for (CFIndex k = 0; k != v45; ++k)
      {
        long long v47 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 24), k);
        videoMentorDebugDumpGraphNode(a1, a2, a3, v47);
      }
    }
    CFIndex v48 = CFArrayGetCount(*(CFArrayRef *)(a4 + 40));
    if (v48 >= 1)
    {
      CFIndex v49 = v48;
      for (CFIndex m = 0; m != v49; ++m)
      {
        uint64_t v51 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 40), m);
        videoMentorDebugDumpGraphNode(a1, a2, a3, v51);
      }
    }
    free(value);
  }
}

double videoMentorFrameNodeInit(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void videoMentorFrameNodeFinalize(void *a1)
{
  CFTypeRef v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CFAllocatorRef v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  CFNumberRef v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  CFTypeID v6 = (const void *)a1[6];
  if (v6) {
    CFRelease(v6);
  }
  CFMutableDictionaryRef v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
  }
}

__CFString *videoMentorFrameNodeCopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableSetRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringRef v4 = CFCopyDescription(*(CFTypeRef *)(a1 + 16));
  CMTime time = *(CMTime *)(a1 + 104);
  Float64 Seconds = CMTimeGetSeconds(&time);
  CMTime time = *(CMTime *)(a1 + 128);
  Float64 v6 = CMTimeGetSeconds(&time);
  int v7 = *(_DWORD *)(a1 + 92);
  CFArrayRef v8 = *(const __CFArray **)(a1 + 24);
  if (v8) {
    CFIndex Count = CFArrayGetCount(v8);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v10 = *(const __CFArray **)(a1 + 40);
  if (v10) {
    CFIndex v11 = CFArrayGetCount(v10);
  }
  else {
    CFIndex v11 = 0;
  }
  CFArrayRef v12 = *(const __CFArray **)(a1 + 32);
  if (v12) {
    CFIndex v13 = CFArrayGetCount(v12);
  }
  else {
    CFIndex v13 = 0;
  }
  CFArrayRef v14 = *(const __CFArray **)(a1 + 48);
  if (v14) {
    CFIndex v15 = CFArrayGetCount(v14);
  }
  else {
    CFIndex v15 = 0;
  }
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16)
  {
    CMTime time = *(CMTime *)(v16 + 16);
    double v17 = CMTimeGetSeconds(&time);
  }
  else
  {
    double v17 = NAN;
  }
  int v18 = *(_DWORD *)(a1 + 68);
  if (v18)
  {
    if (v18 == 1)
    {
      Float64 v19 = "NO";
    }
    else if (v18 == 2)
    {
      Float64 v19 = "YES";
    }
    else
    {
      Float64 v19 = "??";
    }
  }
  else
  {
    Float64 v19 = "UNK";
  }
  int v20 = *(_DWORD *)(a1 + 72);
  if (v20)
  {
    if (v20 == 1)
    {
      Float64 v21 = "NO";
    }
    else if (v20 == 2)
    {
      Float64 v21 = "YES";
    }
    else
    {
      Float64 v21 = "??";
    }
  }
  else
  {
    Float64 v21 = "UNK";
  }
  int v22 = *(_DWORD *)(a1 + 76);
  CFTypeRef v23 = "undetermined";
  if (v22 == 2) {
    CFTypeRef v23 = "selected";
  }
  if (v22 == 1) {
    int v24 = "dropped";
  }
  else {
    int v24 = v23;
  }
  if (*(unsigned char *)(a1 + 64)) {
    CFURLRef v25 = ", hasUnknownDependents";
  }
  else {
    CFURLRef v25 = "";
  }
  int v26 = "(with adjustment)";
  if ((v7 & 1) == 0) {
    int v26 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<VideoMentorFrameNode: %p, sampleCursor: %@ %1.6f/%1.6f%s, %d dependents (%d dropped), %d parents (%d dropped), refreshGroup: %p (%1.6f)%s, isLeaf: %s, isRoot: %s, state: %s>", a1, v4, *(void *)&Seconds, *(void *)&v6, v26, Count, v11, v13, v15, v16, *(void *)&v17, v25, v19, v21, v24);
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

double refreshGroupInit(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void refreshGroupFinalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  CFStringRef v4 = (const void *)a1[8];
  if (v4) {
    CFRelease(v4);
  }
  CFNumberRef v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
  }
}

__CFString *refreshGroupCopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableSetRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringRef v4 = (const void *)FigCFCopyCompactDescription();
  CMTime time = *(CMTime *)(a1 + 16);
  Float64 Seconds = CMTimeGetSeconds(&time);
  if (*(unsigned char *)(a1 + 58)) {
    Float64 v6 = "(catchup)";
  }
  else {
    Float64 v6 = "";
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  if (*(unsigned char *)(a1 + 56)) {
    CFArrayRef v8 = ", groupIsProcessed";
  }
  else {
    CFArrayRef v8 = "";
  }
  if (*(unsigned char *)(a1 + 57)) {
    CFTypeID v9 = ", commonParentNodesHaveBeenSelected";
  }
  else {
    CFTypeID v9 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<VideoMentorRefreshGroup: %p targetOPTS: %1.6f%s, %d nodes%s%s>", a1, *(void *)&Seconds, v6, Count, v8, v9);
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

void videoMentorThreadForwardPlayback(uint64_t a1, const void *a2, CMTime *a3, const void *a4, CMTime *a5, int a6, int a7, int a8, float a9, float a10, int a11, unsigned __int8 a12, unsigned __int8 a13, char a14, unsigned __int8 a15, unsigned __int8 a16, char a17, CFArrayRef *a18, const void *a19, char a20,char a21,CFTypeRef cf)
{
  CFTypeRef v271 = a4;
  v272[0] = a2;
  v269 = 0;
  CFTypeRef v270 = 0;
  CFTypeRef v267 = 0;
  CFTypeRef v268 = 0;
  CFTypeRef v266 = 0;
  unsigned __int8 v265 = 1;
  unsigned __int8 v264 = 0;
  CMTime v263 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  *(_OWORD *)&v262.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v28 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v262.CMTimeEpoch epoch = v28;
  *(_OWORD *)&v261.CMTimeValue value = *(_OWORD *)&v262.value;
  v261.CMTimeEpoch epoch = v28;
  unsigned __int8 v260 = 0;
  uint64_t v259 = 0;
  *(_OWORD *)&v258.CMTimeValue value = *(_OWORD *)&v262.value;
  v258.CMTimeEpoch epoch = v28;
  BOOL v29 = a10 != 1.0 && a9 != 0.0;
  char v257 = 0;
  long long v255 = *(_OWORD *)&v262.value;
  CMTimeEpoch v256 = v28;
  int v249 = 0;
  *(_OWORD *)&v254[12] = 0u;
  long long v250 = *(_OWORD *)&v262.value;
  CMTimeEpoch v251 = v28;
  long long v252 = *(_OWORD *)&v262.value;
  CMTimeEpoch v253 = v28;
  *(void *)&v254[16] = v28;
  *(_OWORD *)v254 = *(_OWORD *)&v262.value;
  v254[25] = 0;
  __int16 v247 = 0;
  CFTypeRef v248 = 0;
  *(_OWORD *)&v246.CMTimeValue value = *(_OWORD *)&v262.value;
  v246.CMTimeEpoch epoch = v28;
  *(_OWORD *)&v245.CMTimeValue value = *(_OWORD *)&v262.value;
  v245.CMTimeEpoch epoch = v28;
  *(_OWORD *)&v244.CMTimeValue value = *(_OWORD *)&v262.value;
  v244.CMTimeEpoch epoch = v28;
  long long v232 = *(_OWORD *)&v262.value;
  *(_OWORD *)&v243.CMTimeValue value = *(_OWORD *)&v262.value;
  v243.CMTimeEpoch epoch = v28;
  ++*(_DWORD *)(a1 + 924);
  uint64_t v30 = (int *)MEMORY[0x1E4F1EBA8];
  int v31 = *MEMORY[0x1E4F1EBA8];
  if ((a6 & 0xFFFFFFFD) == 1 && v31 == 1)
  {
    kdebug_trace();
    int v31 = *v30;
  }
  if (v31 == 1) {
    kdebug_trace();
  }
  *(unsigned char *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
  *(_DWORD *)(a1 + 524) = 0;
  *(_DWORD *)(a1 + 500) = 0;
  *(_DWORD *)(a1 + 496) = a6;
  uint64_t v32 = *(const void **)(a1 + 512);
  *(void *)(a1 + 512) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  CFTypeRef v231 = a19;
  if (!a15 || (time1 = *a3, CMTime time2 = *(CMTime *)(a1 + 404), CMTimeCompare(&time1, &time2)))
  {
    int v228 = 0;
    int v233 = 0;
LABEL_16:
    int v33 = 1;
    goto LABEL_17;
  }
  BOOL v46 = v29;
  long long v47 = a3;
  CFIndex v48 = a5;
  uint64_t v49 = *(void *)(a1 + 528);
  if (!v49)
  {
    int v228 = 0;
    int v233 = 0;
    a5 = v48;
    a3 = v47;
    BOOL v29 = v46;
    goto LABEL_16;
  }
  int v228 = a15;
  unsigned int v34 = v272[0];
  if (v272[0])
  {
    int v228 = 0;
    int v233 = 0;
    a5 = v48;
    a3 = v47;
    BOOL v29 = v46;
    int v33 = 1;
    goto LABEL_18;
  }
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v89 = *(uint64_t (**)(uint64_t, const void **))(v59 + 8);
  if (!v89)
  {
    int v40 = -12782;
    goto LABEL_114;
  }
  int v40 = v89(v49, v272);
  if (v40)
  {
LABEL_114:
    FigSignalErrorAt();
    CFMutableSetRef Mutable = 0;
    uint64_t v42 = 0;
    int v43 = 0;
    int v45 = 0;
LABEL_118:
    CFTypeRef v44 = cf;
    goto LABEL_152;
  }
  uint64_t v90 = v272[0];
  uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v91) {
    uint64_t v92 = v91;
  }
  else {
    uint64_t v92 = 0;
  }
  a5 = v48;
  CFTypeRef v93 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(v92 + 168);
  if (!v93)
  {
    CFMutableSetRef Mutable = 0;
    uint64_t v42 = 0;
    int v43 = 0;
    int v40 = -12782;
    goto LABEL_117;
  }
  a3 = v47;
  int v94 = v93(v90, 1, &v259);
  if (v94)
  {
    int v40 = v94;
    CFMutableSetRef Mutable = 0;
    uint64_t v42 = 0;
    int v43 = 0;
    CFTypeRef v44 = cf;
    int v45 = 1;
    goto LABEL_152;
  }
  if (v259 != 1)
  {
    int v43 = 0;
    int v40 = 0;
    int v45 = 1;
    CFTypeRef v44 = cf;
    goto LABEL_127;
  }
  BOOL v29 = v46;
  int v33 = 0;
  long long v95 = *(_OWORD *)(a1 + 380);
  a3->CMTimeEpoch epoch = *(void *)(a1 + 396);
  *(_OWORD *)&a3->CMTimeValue value = v95;
  CMTime v258 = *(CMTime *)(a1 + 380);
  int v233 = 1;
LABEL_17:
  unsigned int v34 = v272[0];
  if (!v272[0])
  {
    CMTime time1 = *a3;
    int CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, a12, (long long *)&time1.value, (uint64_t)v272);
    if (CursorForPresentationTimeStamp)
    {
      int v40 = CursorForPresentationTimeStamp;
      CFMutableSetRef Mutable = 0;
      uint64_t v42 = 0;
      int v43 = 0;
      goto LABEL_25;
    }
    unsigned int v34 = v272[0];
    if (!a20)
    {
      int v233 = 1;
      goto LABEL_18;
    }
    memset(&time1, 0, sizeof(time1));
    memset(&time2, 0, sizeof(time2));
    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v56) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = 0;
    }
    CMTimeValue v87 = *(uint64_t (**)(const void *, CMTime *))(v57 + 40);
    if (!v87)
    {
      int v40 = -12782;
      goto LABEL_115;
    }
    int v40 = v87(v34, &time1);
    if (v40)
    {
LABEL_115:
      FigSignalErrorAt();
LABEL_116:
      CFMutableSetRef Mutable = 0;
      uint64_t v42 = 0;
      int v43 = 0;
LABEL_117:
      int v45 = 1;
      goto LABEL_118;
    }
    if ((time1.flags & 0x1D) == 1)
    {
      CMTime lhs = time1;
      CMTime rhs = *a3;
      if (!CMTimeCompare(&lhs, &rhs))
      {
LABEL_210:
        int v233 = 1;
        unsigned int v34 = v272[0];
        goto LABEL_18;
      }
      int PresentationTimeStamp = FigSampleCursorStepInPresentationOrderAndReportStepsTaken((uint64_t)v272[0], 1, 0);
      if (PresentationTimeStamp
        || (int PresentationTimeStamp = FigSampleCursorGetPresentationTimeStamp((uint64_t)v272[0], (uint64_t)&time2)) != 0)
      {
        int v40 = PresentationTimeStamp;
        goto LABEL_115;
      }
      if ((time2.flags & 0x1D) == 1)
      {
        *a3 = time2;
        goto LABEL_210;
      }
    }
    int v40 = FigSignalErrorAt();
    goto LABEL_116;
  }
LABEL_18:
  if ((a3->flags & 0x1D) != 1)
  {
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v55 = *(uint64_t (**)(const void *, CMTime *))(v38 + 40);
    if (!v55) {
      goto LABEL_147;
    }
    int v40 = v55(v34, a3);
    if (v40) {
      goto LABEL_148;
    }
    if ((a3->flags & 0x1D) != 1) {
      goto LABEL_315;
    }
    unsigned int v34 = v272[0];
  }
  *(_OWORD *)&time1.CMTimeValue value = v232;
  time1.CMTimeEpoch epoch = v28;
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  long long v50 = *(uint64_t (**)(const void *, CMTime *))(v36 + 40);
  if (!v50)
  {
LABEL_94:
    int v40 = -12782;
    goto LABEL_97;
  }
  int v51 = v50(v34, &time1);
  if (v51)
  {
LABEL_483:
    int v40 = v51;
    goto LABEL_97;
  }
  uint64_t v52 = v272[0];
  uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v53) {
    uint64_t v54 = v53;
  }
  else {
    uint64_t v54 = 0;
  }
  unsigned int v60 = *(uint64_t (**)(const void *, const void **))(v54 + 8);
  if (!v60)
  {
LABEL_95:
    int v40 = -12782;
    goto LABEL_96;
  }
  int v40 = v60(v52, &v269);
  if (v40) {
    goto LABEL_96;
  }
  CFTypeID v223 = a3;
  CFTypeID v222 = a5;
  while (1)
  {
    *(_OWORD *)&time2.CMTimeValue value = v232;
    time2.CMTimeEpoch epoch = v28;
    CFTypeRef v61 = v269;
    uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v62) {
      uint64_t v63 = v62;
    }
    else {
      uint64_t v63 = 0;
    }
    unsigned int v64 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(v63 + 168);
    if (!v64) {
      goto LABEL_95;
    }
    int v65 = v64(v61, 1, &v259);
    if (v65) {
      goto LABEL_125;
    }
    if (v259 != 1) {
      break;
    }
    uint64_t v66 = v269;
    uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v67) {
      uint64_t v68 = v67;
    }
    else {
      uint64_t v68 = 0;
    }
    uint64_t v69 = *(uint64_t (**)(const void *, CMTime *))(v68 + 40);
    if (!v69) {
      goto LABEL_94;
    }
    int v51 = v69(v66, &time2);
    if (v51) {
      goto LABEL_483;
    }
    CMTime lhs = time2;
    CMTime rhs = time1;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      CMTime lhs = time2;
      CMTime rhs = *v223;
      if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
      {
        if (v267)
        {
          CFRelease(v267);
          CFTypeRef v267 = 0;
        }
        __int16 v70 = v269;
        uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v71) {
          uint64_t v72 = v71;
        }
        else {
          uint64_t v72 = 0;
        }
        uint64_t v73 = *(uint64_t (**)(const void *, CFTypeRef *))(v72 + 8);
        if (!v73) {
          goto LABEL_95;
        }
        int v65 = v73(v70, &v267);
        if (v65)
        {
LABEL_125:
          int v40 = v65;
LABEL_96:
          FigSignalErrorAt();
LABEL_97:
          CFTypeRef v44 = cf;
          int v45 = v233;
          CFMutableSetRef Mutable = 0;
          uint64_t v42 = 0;
          int v43 = 0;
          goto LABEL_152;
        }
        CMTime time1 = time2;
      }
    }
    uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v74) {
      uint64_t v75 = v74;
    }
    else {
      uint64_t v75 = 0;
    }
    if (!*(void *)(v75 + 80)) {
      break;
    }
    __int16 v76 = v269;
    int v77 = v272[0];
    uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v78)
    {
      uint64_t v79 = v78;
      if (v77) {
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v79 = 0;
      if (v77)
      {
LABEL_76:
        uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
        goto LABEL_79;
      }
    }
    uint64_t v80 = 0;
LABEL_79:
    if (v79 == v80)
    {
      uint64_t v81 = *(unsigned int (**)(const void *, const void *, uint64_t))(v79 + 80);
      if (v81)
      {
        if (v81(v76, v77, 1)) {
          break;
        }
      }
    }
    if (*(unsigned char *)(a1 + 116))
    {
      int v40 = -1;
      goto LABEL_97;
    }
  }
  if (v269)
  {
    CFRelease(v269);
    v269 = 0;
  }
  CFTypeRef v82 = v267;
  uint64_t v83 = v223;
  if (v267)
  {
    if (v233 && v272[0])
    {
      CFRelease(v272[0]);
      CFTypeRef v82 = v267;
    }
    v272[0] = v82;
    CFTypeRef v267 = 0;
    int v233 = 1;
  }
  if (v33)
  {
    *(_OWORD *)&time1.CMTimeValue value = v232;
    time1.CMTimeEpoch epoch = v28;
    uint64_t v84 = v272[0];
    uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v85) {
      uint64_t v86 = v85;
    }
    else {
      uint64_t v86 = 0;
    }
    uint64_t v96 = *(uint64_t (**)(const void *, CMTime *))(v86 + 40);
    if (v96)
    {
      int v40 = v96(v84, &time1);
      if (!v40)
      {
        if ((time1.flags & 0x1D) == 1)
        {
          CMTime time2 = *v223;
          CMTime lhs = time1;
          if ((CMTimeCompare(&time2, &lhs) & 0x80000000) == 0) {
            goto LABEL_140;
          }
          CMTime time2 = *v223;
          CMTime lhs = time1;
          MEMORY[0x19970E910](*(void *)(a1 + 80));
          uint64_t v97 = *(void (**)(void, CFTypeRef, void, CMTime *, CMTime *))(a1 + 64);
          if (v97) {
            v97(*(void *)(a1 + 72), cf, 0, &time2, &lhs);
          }
          MEMORY[0x19970E930](*(void *)(a1 + 80));
          CMTime rhs = time2;
          CMTime v238 = lhs;
          if (!videoMentorEnqueueTimestampIntervalMarker(a1))
          {
            uint64_t v83 = v223;
            goto LABEL_140;
          }
        }
LABEL_315:
        int v40 = FigSignalErrorAt();
LABEL_149:
        CFMutableSetRef Mutable = 0;
        uint64_t v42 = 0;
        int v43 = 0;
LABEL_150:
        CFTypeRef v44 = cf;
        goto LABEL_151;
      }
LABEL_148:
      FigSignalErrorAt();
      goto LABEL_149;
    }
LABEL_147:
    int v40 = -12782;
    goto LABEL_148;
  }
LABEL_140:
  CMTime v258 = *v83;
  CFTypeRef v98 = v271;
  if (v271)
  {
    int v43 = 0;
    CFTypeRef v99 = v271;
    goto LABEL_142;
  }
  if ((v222->flags & 0x1D) != 1)
  {
    int v43 = 0;
    goto LABEL_203;
  }
  memset(&time1, 0, sizeof(time1));
  CMTime time2 = *v222;
  int v40 = audioMentorCreateCursorForPresentationTimeStamp(a1, a12, (long long *)&time2.value, (uint64_t)&v271);
  if (v40) {
    goto LABEL_149;
  }
  int v106 = FigSampleCursorGetPresentationTimeStamp((uint64_t)v271, (uint64_t)&time1);
  if (v106)
  {
    int v40 = v106;
    goto LABEL_148;
  }
  if ((time1.flags & 0x1D) != 1) {
    goto LABEL_315;
  }
  CMTime time2 = time1;
  CMTime lhs = *v222;
  if (!CMTimeCompare(&time2, &lhs))
  {
    int v207 = FigSampleCursorStepInPresentationOrderAndReportStepsTaken((uint64_t)v271, -1, 0);
    if (v207)
    {
      int v40 = v207;
      FigSignalErrorAt();
      goto LABEL_149;
    }
  }
  CFTypeRef v99 = v271;
  int v43 = 1;
  uint64_t v83 = v223;
  if (!v271)
  {
LABEL_203:
    BOOL v216 = a21 == 0;
    goto LABEL_204;
  }
LABEL_142:
  if ((v222->flags & 0x1D) != 1)
  {
    uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v107) {
      uint64_t v108 = v107;
    }
    else {
      uint64_t v108 = 0;
    }
    size_t v113 = *(uint64_t (**)(CFTypeRef, CMTime *))(v108 + 40);
    if (v113)
    {
      int v40 = v113(v99, v222);
      if (!v40)
      {
        if ((v222->flags & 0x1D) == 1)
        {
          CFTypeRef v99 = v271;
          goto LABEL_143;
        }
        int v120 = FigSignalErrorAt();
LABEL_317:
        int v40 = v120;
LABEL_263:
        CFMutableSetRef Mutable = 0;
        uint64_t v42 = 0;
        goto LABEL_150;
      }
LABEL_262:
      FigSignalErrorAt();
      goto LABEL_263;
    }
LABEL_261:
    int v40 = -12782;
    goto LABEL_262;
  }
LABEL_143:
  BOOL v216 = a21 == 0;
  if (a21 || !v99) {
    goto LABEL_204;
  }
  uint64_t v100 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v100) {
    uint64_t v101 = v100;
  }
  else {
    uint64_t v101 = 0;
  }
  CFTypeRef v114 = *(uint64_t (**)(CFTypeRef, const void **))(v101 + 8);
  if (!v114) {
    goto LABEL_261;
  }
  int v40 = v114(v99, &v268);
  if (v40) {
    goto LABEL_262;
  }
  BOOL v218 = v29;
  while (1)
  {
    CFTypeRef v115 = v268;
    uint64_t v116 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v116) {
      uint64_t v117 = v116;
    }
    else {
      uint64_t v117 = 0;
    }
    uint64_t v118 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(v117 + 168);
    if (!v118)
    {
LABEL_462:
      int v40 = -12782;
      goto LABEL_464;
    }
    int v119 = v118(v115, 1, &v259);
    if (v119) {
      goto LABEL_463;
    }
    if (v259 != 1) {
      break;
    }
    CMTime time1 = v258;
    CMTime time2 = *v222;
    int v120 = videoMentorCursorIsInPlayRange(v268, (uint64_t)&time1, &time2, &v260);
    if (v120) {
      goto LABEL_317;
    }
    if (v260)
    {
      if (v266)
      {
        CFRelease(v266);
        CFTypeRef v266 = 0;
      }
      uint64_t v121 = v268;
      uint64_t v122 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v122) {
        uint64_t v123 = v122;
      }
      else {
        uint64_t v123 = 0;
      }
      __int16 v126 = *(uint64_t (**)(const void *, CFTypeRef *))(v123 + 8);
      if (!v126) {
        goto LABEL_462;
      }
      int v119 = v126(v121, &v266);
      if (v119)
      {
LABEL_463:
        int v40 = v119;
LABEL_464:
        FigSignalErrorAt();
        CFMutableSetRef Mutable = 0;
        uint64_t v42 = 0;
LABEL_25:
        CFTypeRef v44 = cf;
        int v45 = v233;
        goto LABEL_152;
      }
    }
    else
    {
      uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v124) {
        uint64_t v125 = v124;
      }
      else {
        uint64_t v125 = 0;
      }
      if (!*(void *)(v125 + 80)) {
        break;
      }
      uint64_t v127 = v268;
      CFTypeRef v128 = v271;
      uint64_t v129 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v130 = v129 ? v129 : 0;
      uint64_t v131 = v128 ? *(void *)(CMBaseObjectGetVTable() + 16) : 0;
      if (v130 == v131)
      {
        uint64_t v132 = *(unsigned int (**)(const void *, CFTypeRef, uint64_t))(v130 + 80);
        if (v132)
        {
          if (v132(v127, v128, 1)) {
            break;
          }
        }
      }
      int v40 = -1;
      if (*(unsigned char *)(a1 + 116)) {
        goto LABEL_263;
      }
    }
  }
  if (v268)
  {
    CFRelease(v268);
    CFTypeRef v268 = 0;
  }
  CFTypeRef v133 = v266;
  if (v266)
  {
    if (!v98 && v271)
    {
      CFRelease(v271);
      CFTypeRef v133 = v266;
    }
    CFTypeRef v271 = v133;
    CFTypeRef v266 = 0;
    BOOL v216 = 1;
    int v43 = 1;
  }
  else
  {
    BOOL v216 = 1;
  }
  uint64_t v83 = v223;
  BOOL v29 = v218;
LABEL_204:
  uint64_t v109 = (CFTypeRef *)a18;
  BOOL v217 = v29;
  if (*a18)
  {
    if (CFArrayGetCount(*a18) < 1)
    {
      CFMutableSetRef Mutable = 0;
      uint64_t v42 = 0;
    }
    else
    {
      uint64_t v110 = v272[0];
      uint64_t v111 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v111) {
        uint64_t v112 = v111;
      }
      else {
        uint64_t v112 = 0;
      }
      long long v134 = *(unsigned int (**)(const void *, const void **))(v112 + 8);
      if (v134 && !v134(v110, &v269))
      {
        CFMutableSetRef Mutable = 0;
        uint64_t v42 = 0;
        lhs.CMTimeValue value = 0;
        CFAllocatorRef v154 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFDictionaryRef v155 = a18;
        do
        {
          CachedVideoFrameForCursor = videoMentorGetCachedVideoFrameForCursor((void *)a1, v269, *v155, (uint64_t)cf);
          if (!CachedVideoFrameForCursor) {
            break;
          }
          uint64_t v157 = CachedVideoFrameForCursor;
          *(_OWORD *)&time1.CMTimeValue value = v232;
          time1.CMTimeEpoch epoch = v28;
          int v158 = v269;
          uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v160 = v159 ? v159 : 0;
          CMTimeValue v161 = *(unsigned int (**)(const void *, CMTime *))(v160 + 8);
          if (!v161 || v161(v158, &lhs)) {
            break;
          }
          CFStringRef v162 = v269;
          uint64_t v163 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v164 = v163 ? v163 : 0;
          uint64_t v165 = *(unsigned int (**)(const void *, uint64_t, uint64_t *))(v164 + 176);
          if (!v165
            || v165(v162, 1, &v259)
            || v259 != 1
            || FigSampleCursorCopy((uint64_t)v269, (uint64_t)&v267)
            || FigSampleCursorGetPresentationTimeStamp((uint64_t)v269, (uint64_t)&time1))
          {
            break;
          }
          if (!Mutable) {
            CFMutableSetRef Mutable = CFArrayCreateMutable(v154, 0, MEMORY[0x1E4F1D510]);
          }
          if (!v42) {
            uint64_t v42 = CFArrayCreateMutable(v154, 0, MEMORY[0x1E4F1D510]);
          }
          CFArrayAppendValue(Mutable, v157);
          CFArrayAppendValue(v42, (const void *)lhs.value);
          if (lhs.value)
          {
            CFRelease((CFTypeRef)lhs.value);
            lhs.CMTimeValue value = 0;
          }
          CMTime v258 = time1;
          CMTimeValue v166 = v272[0];
          v272[0] = v267;
          if (v267) {
            CFRetain(v267);
          }
          if (v166) {
            CFRelease(v166);
          }
          if (v267)
          {
            CFRelease(v267);
            CFTypeRef v267 = 0;
          }
          CMTime time1 = v258;
          CMTime time2 = *v222;
          int32_t v167 = CMTimeCompare(&time1, &time2);
          CFDictionaryRef v155 = a18;
        }
        while (v167 < 0);
        if (lhs.value)
        {
          CFRelease((CFTypeRef)lhs.value);
          lhs.CMTimeValue value = 0;
        }
        if (v269)
        {
          CFRelease(v269);
          v269 = 0;
        }
        if (v267)
        {
          CFRelease(v267);
          CFTypeRef v267 = 0;
        }
        uint64_t v83 = v223;
        uint64_t v109 = (CFTypeRef *)a18;
      }
      else
      {
        CFMutableSetRef Mutable = 0;
        uint64_t v42 = 0;
        uint64_t v109 = (CFTypeRef *)a18;
      }
    }
    if (*v109)
    {
      CFRelease(*v109);
      *uint64_t v109 = 0;
    }
  }
  else
  {
    uint64_t v42 = 0;
    CFMutableSetRef Mutable = 0;
  }
  CFTypeID v220 = (const void **)(a1 + 744);
  int started = videoMentorDependencyStateStartNewOrder((void *)a1, (uint64_t *)(a1 + 744));
  if (started) {
    goto LABEL_275;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 264));
  float v136 = *(float *)(a1 + 368);
  CMTime v246 = *(CMTime *)(a1 + 272);
  CMTime v245 = *(CMTime *)(a1 + 296);
  CMTime v244 = *(CMTime *)(a1 + 320);
  CMTime v243 = *(CMTime *)(a1 + 344);
  MEMORY[0x19970E930](*(void *)(a1 + 264));
  unsigned __int8 v237 = 0;
  BOOL v137 = fabsf(v136 * a10) > a9;
  BOOL v138 = v217 ? v137 : a8;
  CMTime time1 = v258;
  CMTime time2 = *v83;
  CMTime lhs = *v222;
  CMTime rhs = v244;
  CMTime v238 = v243;
  CMTime v236 = v246;
  BOOL v225 = v138;
  int started = videoMentorDependencyStateCopyCursorForDecodeWalk(a1, (uint64_t)v220, 2, (uint64_t)cf, a7, (uint64_t)&time1, &time2, (long long *)&lhs.value, v138, (uint64_t)&rhs, (uint64_t)&v238, (uint64_t)&v236, v272[0], v228, MEMORY[0x1E4F1F9F8], &v237, 0, (char *)&v265, &v264,
              &v270);
  if (started)
  {
LABEL_275:
    int v40 = started;
    goto LABEL_150;
  }
  int v139 = v237;
  BOOL v227 = v237 == 0;
  if (v228 | a16)
  {
    int v219 = 0;
  }
  else
  {
    CMTime time1 = *v83;
    videoMentorEnqueueEditBoundaryMarker((void *)a1, (uint64_t)cf, &time1);
    int v139 = v237;
    int v219 = 1;
  }
  if (v139)
  {
    uint64_t v140 = *(void **)(a1 + 552);
    if (v140)
    {
      while (2)
      {
        uint64_t v141 = v270;
        if (v270)
        {
          uint64_t v229 = v140[1];
          uint64_t v142 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v142) {
            uint64_t v143 = v142;
          }
          else {
            uint64_t v143 = 0;
          }
          if (v143 == *(void *)(CMBaseObjectGetVTable() + 16)
            && (CFDictionaryRef v144 = *(uint64_t (**)(uint64_t, const void *))(v143 + 32)) != 0)
          {
            uint64_t v83 = v223;
            if (v144(v229, v141) == -1) {
              goto LABEL_289;
            }
          }
          else
          {
            uint64_t v83 = v223;
          }
        }
        else
        {
LABEL_289:
          CFTypeID v145 = (const void *)v140[1];
          CMTime time1 = *v83;
          CMTime time2 = *v222;
          int started = videoMentorCursorIsInPlayRange(v145, (uint64_t)&time1, &time2, &v260);
          if (started) {
            goto LABEL_275;
          }
          if (v260)
          {
            uint64_t v146 = (const void *)v140[1];
            CMTime time1 = *v83;
            CMTime time2 = *v222;
            int started = videoMentorThreadGenerateAndEnqueueFrame(a1, v146, 0, 2, v265, v264, 0, v227, a13, (uint64_t)&time1, (uint64_t)&time2, MEMORY[0x1E4F1F9F8], cf);
            if (started) {
              goto LABEL_275;
            }
            BOOL v227 = 0;
            unsigned __int8 v265 = 0;
          }
        }
        uint64_t v140 = (void *)*v140;
        if (!v140) {
          break;
        }
        continue;
      }
    }
  }
  videoMentorResetSavedListAndEnqueueMarker(a1);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      CFIndex v148 = Count;
      CFIndex v149 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(Mutable, v149);
        uint64_t v151 = CFArrayGetValueAtIndex(v42, v149);
        CMTime time1 = *v223;
        CMTime time2 = *v222;
        int started = videoMentorThreadResendCachedSampleBuffer(a1, v151, ValueAtIndex, 0, v265, 0, a13, (long long *)&time1.value, (long long *)&time2.value, MEMORY[0x1E4F1F9F8], cf);
        if (started) {
          goto LABEL_275;
        }
        unsigned __int8 v265 = 0;
      }
      while (v148 != ++v149);
    }
    CFRelease(Mutable);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (!v270)
  {
    int v40 = 0;
    CFTypeRef v44 = cf;
    int v45 = v233;
LABEL_127:
    if (a19 && !v40)
    {
      int v40 = audioMentorEnqueueBufferConsumedMarker(a1, a19);
      CFTypeRef v231 = 0;
    }
    CFMutableSetRef Mutable = 0;
    uint64_t v42 = 0;
    ++*(_DWORD *)(a1 + 928);
    goto LABEL_152;
  }
  CFTypeRef v44 = cf;
  LOBYTE(v152) = v216;
  if (!v216)
  {
    uint64_t v230 = 0;
    BOOL v153 = v217;
LABEL_354:
    BOOL v215 = a21 != 0;
    goto LABEL_355;
  }
  BOOL v153 = v217;
  if (!v271)
  {
    uint64_t v230 = -1;
    goto LABEL_354;
  }
  uint64_t v230 = FigSampleCursorCompareInDecodeOrder((uint64_t)v270, (uint64_t)v271);
  BOOL v215 = a21 != 0;
  if (!a21 && v230 == 1)
  {
LABEL_307:
    int v40 = 0;
LABEL_308:
    videoMentorEnqueueDrainAfterDecodingMarker(a1);
    CFTypeRef v44 = cf;
    int v45 = v233;
    goto LABEL_127;
  }
LABEL_355:
  int v210 = 0;
  long long v168 = (CMTime *)(a1 + 272);
  long long v169 = (CMTime *)(a1 + 320);
  CMItemCount v213 = (CMTime *)(a1 + 560);
  uint64_t v211 = *MEMORY[0x1E4F1CFD0];
  long long v170 = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v171 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v221 = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v214 = v171;
  while (2)
  {
    char v234 = 0;
    v236.CMTimeValue value = 0;
    memset(&time1, 0, sizeof(time1));
    *(_OWORD *)&time2.CMTimeValue value = v170;
    time2.CMTimeEpoch epoch = v171;
    uint64_t v259 = 0;
    MEMORY[0x19970E910](*(void *)(a1 + 264));
    float v172 = *(float *)(a1 + 368);
    CMTime v246 = *v168;
    CMTime v245 = *(CMTime *)(a1 + 296);
    CMTime v244 = *v169;
    CMTime v243 = *(CMTime *)(a1 + 344);
    MEMORY[0x19970E930](*(void *)(a1 + 264));
    BOOL v173 = fabsf(v172 * a10) > a9;
    BOOL v174 = v225;
    if (v153) {
      BOOL v174 = v173;
    }
    BOOL v225 = v174;
    if (*(unsigned char *)(a1 + 116))
    {
      int v40 = -1;
      goto LABEL_482;
    }
    int v175 = FigSampleCursorGetPresentationTimeStamp((uint64_t)v270, (uint64_t)&time1);
    if (v175)
    {
      int v40 = v175;
      FigSignalErrorAt();
      goto LABEL_482;
    }
    if ((time1.flags & 0x1D) != 1) {
      goto LABEL_469;
    }
    CMTime lhs = v258;
    CMTime rhs = *v222;
    int NodeForCursor = videoMentorCursorIsInPlayRange(v270, (uint64_t)&lhs, &rhs, &v260);
    if (NodeForCursor) {
      goto LABEL_470;
    }
    unsigned __int8 v235 = v260;
    if (v152)
    {
      char v234 = v260;
      if (a11)
      {
        if (!v260 && v254[25])
        {
          int v177 = 0;
          CMTimeValue value = 0;
          *(_OWORD *)&v213->CMTimeValue value = v232;
          *(void *)(a1 + 576) = v28;
          goto LABEL_429;
        }
        CMTime lhs = time1;
        CMTime rhs = v246;
        CMTime v238 = v245;
        int v194 = videoMentorSimulateSyncFrameClustersOnly((uint64_t)v270, &lhs, &rhs, &v238, a11, &v234, &v235, &v264, (uint64_t)&v249);
        if (v194) {
          goto LABEL_481;
        }
        CMTimeValue value = 0;
        int v197 = v227;
        if (!v264) {
          int v197 = 1;
        }
        BOOL v227 = v197;
        int v177 = v235;
        *(_OWORD *)&v213->CMTimeValue value = v232;
        *(void *)(a1 + 576) = v28;
        if (!a14 || (uint64_t v198 = MEMORY[0x1E4F1F9F8], !v177))
        {
LABEL_429:
          if (v234)
          {
            if (v177 | v219)
            {
              if (v177)
              {
                if (a17)
                {
                  if (v210)
                  {
                    char v199 = 0;
                    if (++v210 == 2) {
                      int v200 = 3;
                    }
                    else {
                      int v200 = 0;
                    }
                  }
                  else
                  {
                    char v199 = 0;
                    int v200 = 5;
                    int v210 = 1;
                  }
                }
                else
                {
                  char v199 = 0;
                  int v200 = 0;
                }
              }
              else
              {
                char v199 = 1;
                int v200 = 1;
              }
              int v203 = v222;
              uint64_t v202 = v223;
            }
            else
            {
              uint64_t v202 = v223;
              CMTime lhs = *v223;
              videoMentorEnqueueEditBoundaryMarker((void *)a1, (uint64_t)cf, &lhs);
              char v199 = 1;
              int v219 = 1;
              int v200 = 1;
              int v203 = v222;
            }
            FigSampleCursorSetProperty((uint64_t)v270, @"EagerlyFetchSampleDependencyAttributes", v211);
            CMTime lhs = *v202;
            CMTime rhs = *v203;
            CMTime v238 = time2;
            int refreshed = videoMentorThreadGenerateAndEnqueueFrame(a1, v270, v200, 0, v265, v264, 0, v227, a13, (uint64_t)&lhs, (uint64_t)&rhs, (uint64_t)&v238, cf);
            if (refreshed)
            {
LABEL_476:
              int v40 = refreshed;
              CFTypeRef v44 = cf;
              goto LABEL_482;
            }
            unsigned __int8 v265 = 0;
            BOOL v227 = 0;
            if ((v199 & 1) == 0)
            {
              *(_OWORD *)&v213->CMTimeValue value = *(_OWORD *)&time1.value;
              *(void *)(a1 + 576) = time1.epoch;
            }
            int v201 = 1;
            long long v168 = (CMTime *)(a1 + 272);
          }
          else
          {
            int v201 = 0;
            long long v168 = (CMTime *)(a1 + 272);
          }
          BOOL v152 = v216;
          BOOL v153 = v217;
          if (!v216)
          {
            videoMentorUpdateDecoderState(a1, value, v201);
            videoMentorDependencyStateForgetObsoleteRefreshGroups((uint64_t)v220, value);
            v236.CMTimeValue value = 0;
          }
          CFTypeRef v44 = cf;
          goto LABEL_450;
        }
LABEL_425:
        videoMentorPostMinAndMaxUpcomingOutputPTS(a1, v198, v198);
        goto LABEL_429;
      }
      int v212 = v260;
      if (v225)
      {
        if (!v260)
        {
          CFTypeRef v44 = cf;
          BOOL v152 = v216;
          BOOL v153 = v217;
          long long v168 = (CMTime *)(a1 + 272);
LABEL_450:
          if (FigSampleCursorStepInDecodeOrderAndReportStepsTaken((uint64_t)v270, 1, (uint64_t)&v259))
          {
LABEL_469:
            int NodeForCursor = FigSignalErrorAt();
            goto LABEL_470;
          }
          long long v170 = v221;
          if (v259 != 1)
          {
            if (v152)
            {
              uint64_t v208 = (uint64_t)v271;
              if (!v271) {
                goto LABEL_307;
              }
              uint64_t v209 = (uint64_t)v270;
              goto LABEL_479;
            }
            if (*(unsigned char *)(a1 + 832))
            {
              uint64_t v209 = *(void *)(a1 + 824);
              uint64_t v208 = (uint64_t)v270;
LABEL_479:
              if (!FigSampleCursorCompareInDecodeOrder(v209, v208)) {
                goto LABEL_307;
              }
            }
            int v40 = FigSignalErrorAt();
            goto LABEL_308;
          }
          if (v271) {
            BOOL v204 = v152;
          }
          else {
            BOOL v204 = 0;
          }
          if (v204)
          {
            uint64_t v205 = FigSampleCursorCompareInDecodeOrder((uint64_t)v270, (uint64_t)v271);
            long long v170 = v221;
            uint64_t v230 = v205;
          }
          char v206 = v230 != 1 || v215;
          CMTimeEpoch v171 = v214;
          long long v169 = (CMTime *)(a1 + 320);
          if ((v206 & 1) == 0) {
            goto LABEL_307;
          }
          continue;
        }
        CMTime lhs = time1;
        CMTime rhs = v246;
        BOOL v227 = 1;
        int v194 = videoMentorSimulateIFramesOnly((uint64_t)v270, &lhs, &rhs, v213, 1, &v234, &v264);
        if (v194) {
          goto LABEL_481;
        }
        CMTimeValue value = 0;
      }
      else
      {
        if (!v260 || !v264)
        {
          int v194 = videoMentorSimulateFrame((uint64_t)v270, &v257, (uint64_t)&v255, &v234, &v264);
          if (v194)
          {
LABEL_481:
            int v40 = v194;
            CFTypeRef v44 = cf;
            goto LABEL_482;
          }
        }
        CMTimeValue value = 0;
        BOOL v225 = 0;
      }
LABEL_421:
      if (a14 && v212)
      {
        if (a11)
        {
          uint64_t v198 = MEMORY[0x1E4F1F9F8];
          int v177 = v212;
          goto LABEL_425;
        }
        videoMentorUpdateUpcomingOutputPTSRangeAnnouncement((void *)a1, (uint64_t)v270, (uint64_t)v271, (uint64_t)cf, &v263, &v262, &v261);
      }
      int v177 = v212;
      goto LABEL_429;
    }
    break;
  }
  int v212 = v260;
  unsigned int v179 = 1;
  while (1)
  {
    int NodeForCursor = videoMentorDependencyStateGetNodeForCursor((void *)a1, (uint64_t)v220, (uint64_t)v270, (uint64_t)v44, 0, &v236);
    if (NodeForCursor) {
      break;
    }
    if (v236.value)
    {
      int v180 = *(_DWORD *)(v236.value + 76);
      if (v180 == 2)
      {
        uint64_t v181 = *(void *)(v236.value + 56);
        if (v181 && (*(unsigned char *)(v181 + 58) || *(unsigned char *)(v181 + 56))) {
          goto LABEL_397;
        }
      }
      else if (v180 == 1)
      {
        goto LABEL_397;
      }
    }
    if (v248)
    {
      CFRelease(v248);
      CFTypeRef v248 = 0;
    }
    CMTime lhs = v244;
    CMTime rhs = v243;
    CMTime v238 = v246;
    int refreshed = videoMentorDependencyStateFillRefreshGroupsUntil(a1, (uint64_t)v220, (uint64_t)v270, (uint64_t)v44, v225, &lhs, &rhs, &v238, v179, &v248);
    if (refreshed) {
      goto LABEL_476;
    }
    uint64_t v183 = (uint64_t)v248;
    if (v248)
    {
      if (v247)
      {
        CFRelease(v247);
        __int16 v247 = 0;
      }
      CFTypeRef v44 = cf;
      int v40 = videoMentorDependencyStateAddSamplesToGraph(a1, (uint64_t)v220, (uint64_t)cf, v183, v225, &v247, 0);
      if (v40) {
        goto LABEL_482;
      }
      CFIndex v184 = CFArrayGetCount(v247);
      if (v184 >= 1)
      {
        CFIndex v185 = v184;
        for (CFIndex i = 0; i != v185; ++i)
        {
          uint64_t v187 = CFArrayGetValueAtIndex(v247, i);
          if (v187[17] == 1) {
            v187[17] = 0;
          }
        }
      }
    }
    CFIndex v188 = CFArrayGetCount(*(CFArrayRef *)(a1 + 760));
    if (v188 >= 1)
    {
      CFIndex v189 = v188;
      for (CFIndex j = 0; j != v189; ++j)
      {
        uint64_t v191 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 760), j);
        if (!v191[56])
        {
          uint64_t v192 = (uint64_t)v191;
          videoMentorRefreshGroupClassifyNodes((uint64_t)v191);
          videoMentorAddRefreshGroupToProcess((uint64_t)v220, v192);
        }
      }
    }
    videoMentorDependencyStateProcessRefreshGroups((uint64_t)v220);
    CFTypeRef v44 = cf;
    if (!*(unsigned char *)(a1 + 832) && !*(unsigned char *)(a1 + 777) && v179++ < 9) {
      continue;
    }
LABEL_397:
    int v194 = videoMentorDependencyStateGetNodeForCursor((void *)a1, (uint64_t)v220, (uint64_t)v270, (uint64_t)v44, 0, &v236);
    if (v194) {
      goto LABEL_481;
    }
    CMTimeValue value = v236.value;
    if (v236.value)
    {
      int v195 = *(_DWORD *)(v236.value + 76);
      if (!v195)
      {
        lhs.CMTimeValue value = 1;
        *(void *)&lhs.CMTimeScale timescale = v236.value;
        videoMentorDependencyStateExecuteAction(v220, (int *)&lhs);
        int v195 = *(_DWORD *)(value + 76);
      }
      if (v195 == 2)
      {
        char v234 = 1;
        if ((*(_DWORD *)(value + 92) & 0x1D) == 1)
        {
          CMTime lhs = *(CMTime *)(value + 80);
          CMTime rhs = *(CMTime *)(value + 128);
          CMTimeSubtract(&time2, &lhs, &rhs);
        }
        int v196 = v227;
        if (v225) {
          int v196 = 1;
        }
        BOOL v227 = v196;
      }
      goto LABEL_421;
    }
    goto LABEL_307;
  }
LABEL_470:
  int v40 = NodeForCursor;
LABEL_482:
  CFMutableSetRef Mutable = 0;
  uint64_t v42 = 0;
LABEL_151:
  int v45 = v233;
LABEL_152:
  if (*(unsigned char *)(a1 + 492))
  {
    videoMentorPostCollectorCoherenceConduitNotification(a1);
    *(unsigned char *)(a1 + 492) = 0;
  }
  if (a14 && (v40 + 1) <= 1) {
    videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8]);
  }
  videoMentorThreadFinishPreroll(a1, 0, v44);
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!*(unsigned char *)a1)
  {
    int v102 = (uint64_t *)&kMentorNotification_StoppingDueToCompletion;
    if (v40) {
      int v102 = (uint64_t *)&kMentorNotification_StoppingDueToError;
    }
    if (v40 == -1) {
      int v103 = 0;
    }
    else {
      int v103 = v40;
    }
    if (v40 == -1) {
      int v102 = (uint64_t *)&kMentorNotification_ResettingDueToModeSwitch;
    }
    uint64_t v104 = FigMentorNotificationPayloadCreate(*v102, v44, v103, *(unsigned __int8 *)(a1 + 520), v231, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v104) {
      CFRelease(v104);
    }
  }
  if (v45 && v272[0])
  {
    CFRelease(v272[0]);
    v272[0] = 0;
  }
  if (v43 && v271)
  {
    CFRelease(v271);
    CFTypeRef v271 = 0;
  }
  if (v270)
  {
    CFRelease(v270);
    CFTypeRef v270 = 0;
  }
  if (v269)
  {
    CFRelease(v269);
    v269 = 0;
  }
  if (v268)
  {
    CFRelease(v268);
    CFTypeRef v268 = 0;
  }
  if (v267)
  {
    CFRelease(v267);
    CFTypeRef v267 = 0;
  }
  if (v266)
  {
    CFRelease(v266);
    CFTypeRef v266 = 0;
  }
  videoMentorThrottlingStateFree(a1 + 584);
  uint64_t v105 = *(const void **)(a1 + 512);
  if (v105)
  {
    CFRelease(v105);
    *(void *)(a1 + 512) = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v248) {
    CFRelease(v248);
  }
  if (v247) {
    CFRelease(v247);
  }
}

void videoMentorThreadReversePlayback(uint64_t a1, const void *a2, CMTime *a3, const void *a4, CMTime *a5, int a6, int a7, int a8, int a9, char a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, CFArrayRef *a14, const void *a15, CFTypeRef cf)
{
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  CFTypeRef v293 = a2;
  CFTypeRef v292 = a4;
  CFTypeRef v291 = 0;
  CFTypeRef v290 = 0;
  CFTypeRef v289 = 0;
  CFTypeRef v288 = 0;
  CFTypeRef v287 = 0;
  CFTypeRef v286 = 0;
  uint64_t v284 = 0;
  long long v270 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&start.int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v268 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  start.CMTimeEpoch epoch = v268;
  ++*(_DWORD *)(a1 + 932);
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  *(_DWORD *)(a1 + 524) = 0;
  *(unsigned char *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
  *(_DWORD *)(a1 + 500) = 2;
  if (a8) {
    int v21 = a8;
  }
  else {
    int v21 = 2;
  }
  *(_DWORD *)(a1 + 496) = v21;
  int v22 = *(const void **)(a1 + 512);
  *(void *)(a1 + 512) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  CFMutableSetRef Mutable = 0;
  CFArrayRef theArray = 0;
  CFTypeID v274 = a15;
  *(_OWORD *)&v285.int value = 0uLL;
  if (a9 == 2) {
    int v24 = 1;
  }
  else {
    int v24 = a9;
  }
  int v264 = v24;
  v285.CMTimeEpoch epoch = 0;
  if (a2) {
    goto LABEL_14;
  }
  memset(time1, 0, 24);
  *(_OWORD *)&time2.start.int value = *(_OWORD *)&a3->value;
  time2.start.CMTimeEpoch epoch = a3->epoch;
  int CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, a11, (long long *)&time2.start.value, (uint64_t)&v293);
  if (CursorForPresentationTimeStamp)
  {
LABEL_92:
    CFTypeRef v27 = 0;
    int v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    CFMutableSetRef Mutable = 0;
    CFArrayRef v71 = 0;
    int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    goto LABEL_111;
  }
  CFTypeRef v36 = v293;
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  __int16 v70 = *(uint64_t (**)(CFTypeRef, CMTime *))(v38 + 40);
  if (!v70)
  {
    int CursorForPresentationTimeStamp = -12782;
    goto LABEL_91;
  }
  int CursorForPresentationTimeStamp = v70(v36, time1);
  if (CursorForPresentationTimeStamp)
  {
LABEL_91:
    FigSignalErrorAt();
    goto LABEL_92;
  }
  if ((time1[0].flags & 0x1D) != 1)
  {
    int CursorForPresentationTimeStamp = FigSignalErrorAt();
    goto LABEL_92;
  }
  time2.CMTime start = time1[0];
  CMTime lhs = *a3;
  if (!CMTimeCompare(&time2.start, &lhs))
  {
    int v73 = FigSampleCursorStepInPresentationOrderAndReportStepsTaken((uint64_t)v293, -1, 0);
    if (v73)
    {
      int CursorForPresentationTimeStamp = v73;
      goto LABEL_91;
    }
  }
  CMTime start = *a3;
  if (*a14 && CFArrayGetCount(*a14) >= 1 && !FigSampleCursorCopy((uint64_t)v293, (uint64_t)&v291))
  {
    CFMutableSetRef Mutable = 0;
    CFArrayRef theArray = 0;
    rhs.int value = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CachedVideoFrameForCursor = videoMentorGetCachedVideoFrameForCursor((void *)a1, v291, *a14, (uint64_t)cf);
      if (!CachedVideoFrameForCursor) {
        break;
      }
      valueCGFloat a = CachedVideoFrameForCursor;
      *(_OWORD *)&time2.start.int value = v270;
      time2.start.CMTimeEpoch epoch = v268;
      CFTypeRef v117 = v291;
      uint64_t v118 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v119 = v118 ? v118 : 0;
      int v120 = *(unsigned int (**)(CFTypeRef, CMTime *))(v119 + 8);
      if (!v120
        || v120(v117, &rhs)
        || FigSampleCursorGetPresentationTimeStamp((uint64_t)v291, (uint64_t)&time2)
        || FigSampleCursorStepInPresentationOrderAndReportStepsTaken((uint64_t)v291, -1, (uint64_t)&v284)
        || v284 != -1
        || FigSampleCursorCopy((uint64_t)v291, (uint64_t)&v289))
      {
        break;
      }
      if (!Mutable) {
        CFMutableSetRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      }
      uint64_t v121 = theArray;
      if (!theArray) {
        uint64_t v121 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      }
      CFArrayAppendValue(Mutable, valuea);
      CFArrayRef theArray = v121;
      CFArrayAppendValue(v121, (const void *)rhs.value);
      if (rhs.value)
      {
        CFRelease((CFTypeRef)rhs.value);
        rhs.int value = 0;
      }
      CMTime start = time2.start;
      if (v293) {
        CFRelease(v293);
      }
      CFTypeRef v293 = v289;
      CFTypeRef v289 = 0;
      time2.CMTime start = start;
      CMTime lhs = *a5;
    }
    while (CMTimeCompare(&time2.start, &lhs) > 0);
    if (rhs.value)
    {
      CFRelease((CFTypeRef)rhs.value);
      rhs.int value = 0;
    }
    if (v291)
    {
      CFRelease(v291);
      CFTypeRef v291 = 0;
    }
    if (v289)
    {
      CFRelease(v289);
      CFTypeRef v289 = 0;
    }
  }
  else
  {
    CFMutableSetRef Mutable = 0;
    CFArrayRef theArray = 0;
  }
LABEL_14:
  if (*a14)
  {
    CFRelease(*a14);
    *a14 = 0;
  }
  time1[0] = *a5;
  *(_OWORD *)&time2.start.int value = *(_OWORD *)&a5->value;
  time2.start.CMTimeEpoch epoch = a5->epoch;
  CMTime lhs = *a3;
  videoMentorThrottlingStateStartNewOrder(a1 + 584, (long long *)&time1[0].value, (uint64_t)&time2, (__n128 *)&lhs, (uint64_t)v293);
  if (v292 || (a5->flags & 0x1D) != 1)
  {
    int value = 0;
  }
  else
  {
    time1[0] = *a5;
    int v25 = audioMentorCreateCursorForPresentationTimeStamp(a1, a11, (long long *)&time1[0].value, (uint64_t)&v292);
    if (v25)
    {
      int CursorForPresentationTimeStamp = v25;
      CFTypeRef v27 = 0;
      int v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      goto LABEL_110;
    }
    int value = 1;
  }
  if ((a3->flags & 0x1D) != 1)
  {
    CFTypeRef v39 = v293;
    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v40) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v42 = *(uint64_t (**)(CFTypeRef, CMTime *))(v41 + 40);
    if (!v42) {
      goto LABEL_106;
    }
    int CursorForPresentationTimeStamp = v42(v39, a3);
    if (CursorForPresentationTimeStamp) {
      goto LABEL_107;
    }
    if ((a3->flags & 0x1D) != 1) {
      goto LABEL_98;
    }
  }
  CFTypeRef v32 = v292;
  if (v292 && (a5->flags & 0x1D) != 1)
  {
    uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v43) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v72 = *(uint64_t (**)(CFTypeRef, CMTime *))(v44 + 40);
    if (!v72) {
      goto LABEL_106;
    }
    int CursorForPresentationTimeStamp = v72(v32, a5);
    if (CursorForPresentationTimeStamp) {
      goto LABEL_107;
    }
    if ((a5->flags & 0x1D) != 1)
    {
LABEL_98:
      int CursorForPresentationTimeStamp = FigSignalErrorAt();
      goto LABEL_108;
    }
  }
  CFTypeRef v33 = v293;
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  int v45 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v35 + 8);
  if (!v45)
  {
LABEL_106:
    int CursorForPresentationTimeStamp = -12782;
    goto LABEL_107;
  }
  int CursorForPresentationTimeStamp = v45(v33, &v291);
  if (CursorForPresentationTimeStamp) {
    goto LABEL_107;
  }
  uint64_t v257 = a1 + 584;
  while (1)
  {
    CFTypeRef v46 = v291;
    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v47) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v49 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v48 + 168);
    if (!v49) {
      goto LABEL_106;
    }
    int v50 = v49(v46, 1, &v284);
    if (v50) {
      goto LABEL_186;
    }
    if (v284 != 1) {
      break;
    }
    CFTypeRef v51 = v291;
    uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v52) {
      uint64_t v53 = v52;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v54 = *(uint64_t (**)(CFTypeRef, CMTime *))(v53 + 40);
    if (!v54) {
      goto LABEL_106;
    }
    int v50 = v54(v51, &v285);
    if (v50) {
      goto LABEL_186;
    }
    if ((v285.flags & 0x1D) != 1) {
      goto LABEL_98;
    }
    time1[0] = v285;
    time2.CMTime start = start;
    if (CMTimeCompare(time1, &time2.start) < 0)
    {
      if (!v292 || (time1[0] = *a5, time2.CMTime start = v285, CMTimeCompare(time1, &time2.start) <= 0))
      {
        if (v289)
        {
          CFRelease(v289);
          CFTypeRef v289 = 0;
        }
        CFTypeRef v55 = v291;
        uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v56) {
          uint64_t v57 = v56;
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t v58 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v57 + 8);
        if (!v58) {
          goto LABEL_106;
        }
        int v50 = v58(v55, &v289);
        if (v50)
        {
LABEL_186:
          int CursorForPresentationTimeStamp = v50;
          goto LABEL_107;
        }
      }
    }
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    if (!*(void *)(v60 + 80)) {
      break;
    }
    CFTypeRef v61 = v291;
    CFTypeRef v62 = v293;
    uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v63)
    {
      uint64_t v64 = v63;
      if (!v62) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v64 = 0;
      if (!v62)
      {
LABEL_72:
        uint64_t v65 = 0;
        goto LABEL_73;
      }
    }
    uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_73:
    if (v64 == v65)
    {
      uint64_t v66 = *(unsigned int (**)(CFTypeRef, CFTypeRef, uint64_t))(v64 + 80);
      if (v66)
      {
        if (v66(v61, v62, 1)) {
          break;
        }
      }
    }
    int CursorForPresentationTimeStamp = -1;
    if (*(unsigned char *)(a1 + 116)) {
      goto LABEL_108;
    }
  }
  CFTypeRef v67 = v292;
  if (v292)
  {
    uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v68) {
      uint64_t v69 = v68;
    }
    else {
      uint64_t v69 = 0;
    }
    uint64_t v74 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v69 + 8);
    if (v74)
    {
      int CursorForPresentationTimeStamp = v74(v67, &v290);
      if (!CursorForPresentationTimeStamp)
      {
        while (1)
        {
          CFTypeRef v92 = v290;
          uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v94 = v93 ? v93 : 0;
          long long v95 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v94 + 168);
          if (!v95) {
            break;
          }
          int v79 = v95(v92, -1, &v284);
          if (v79) {
            goto LABEL_543;
          }
          if (v284 != -1) {
            goto LABEL_187;
          }
          CFTypeRef v80 = v290;
          uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v81) {
            uint64_t v82 = v81;
          }
          else {
            uint64_t v82 = 0;
          }
          uint64_t v83 = *(uint64_t (**)(CFTypeRef, CMTime *))(v82 + 40);
          if (!v83) {
            break;
          }
          int v79 = v83(v80, &v285);
          if (v79)
          {
LABEL_543:
            int CursorForPresentationTimeStamp = v79;
LABEL_544:
            int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
            int v28 = value;
            CFArrayRef v71 = theArray;
            FigSignalErrorAt();
LABEL_545:
            CFTypeRef v27 = 0;
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            goto LABEL_111;
          }
          if ((v285.flags & 0x1D) != 1) {
            goto LABEL_98;
          }
          time1[0] = v285;
          time2.CMTime start = start;
          if (CMTimeCompare(time1, &time2.start) < 0)
          {
            time1[0] = *a5;
            time2.CMTime start = v285;
            if (CMTimeCompare(time1, &time2.start) <= 0)
            {
              if (v288)
              {
                CFRelease(v288);
                CFTypeRef v288 = 0;
              }
              int v50 = FigSampleCursorCopy((uint64_t)v290, (uint64_t)&v288);
              if (v50) {
                goto LABEL_186;
              }
            }
          }
          uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v84) {
            uint64_t v85 = v84;
          }
          else {
            uint64_t v85 = 0;
          }
          if (!*(void *)(v85 + 80)) {
            goto LABEL_187;
          }
          CFTypeRef v86 = v290;
          CFTypeRef v87 = v292;
          uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v89 = v88 ? v88 : 0;
          uint64_t v90 = v87 ? *(void *)(CMBaseObjectGetVTable() + 16) : 0;
          if (v89 == v90)
          {
            uint64_t v91 = *(unsigned int (**)(CFTypeRef, CFTypeRef, void))(v89 + 80);
            if (v91)
            {
              if (v91(v86, v87, 0)) {
                goto LABEL_187;
              }
            }
          }
          int CursorForPresentationTimeStamp = -1;
          if (*(unsigned char *)(a1 + 116)) {
            goto LABEL_108;
          }
        }
        int CursorForPresentationTimeStamp = -12782;
        goto LABEL_544;
      }
LABEL_107:
      FigSignalErrorAt();
LABEL_108:
      CFTypeRef v27 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      goto LABEL_109;
    }
    goto LABEL_106;
  }
LABEL_187:
  CFTypeRef v96 = v289;
  if (v289)
  {
    if (!a2 && v293)
    {
      CFRelease(v293);
      CFTypeRef v96 = v289;
    }
    CFTypeRef v293 = v96;
    CFTypeRef v289 = 0;
  }
  CFTypeRef v97 = v288;
  if (v288)
  {
    int v98 = value;
    if (!v292) {
      int v98 = 0;
    }
    if (v98 == 1)
    {
      CFRelease(v292);
      CFTypeRef v97 = v288;
    }
    CFTypeRef v292 = v97;
    CFTypeRef v288 = 0;
    int value = 1;
  }
  videoMentorResetSavedListAndEnqueueMarker(a1);
  if (!v292)
  {
    BOOL v101 = v264 != 0;
    if (a10)
    {
      LOBYTE(v294.CFDictionarySetValue(theDict, @"region", value) = 0;
      uint64_t v100 = -1;
      goto LABEL_204;
    }
    long long v281 = v270;
    CMTimeEpoch v282 = v268;
    uint64_t v100 = -1;
    goto LABEL_270;
  }
  uint64_t v99 = FigSampleCursorCompareInDecodeOrder((uint64_t)v292, (uint64_t)v293);
  uint64_t v100 = v99;
  BOOL v101 = v264 != 0;
  if (!a10)
  {
    long long v281 = v270;
    CMTimeEpoch v282 = v268;
    if (v99 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v122 = Mutable;
      CFArrayRef v123 = theArray;
LABEL_264:
      int CursorForPresentationTimeStamp = 0;
      CFMutableSetRef Mutable = v122;
      CFArrayRef v71 = v123;
      goto LABEL_265;
    }
LABEL_270:
    unsigned __int8 v242 = v101;
    uint64_t v235 = v100;
    int64_t v236 = 0;
    uint64_t v30 = 0;
    uint64_t v29 = 0;
    uint64_t v124 = a1 + 320;
    uint64_t v125 = (CMTime *)(a1 + 344);
    unsigned __int8 v237 = (_OWORD *)(a1 + 560);
    long long v244 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
    long long v245 = *MEMORY[0x1E4F1FA20];
    long long v243 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
    while (1)
    {
      *(_OWORD *)&v279.int value = v270;
      v279.CMTimeEpoch epoch = v268;
      MEMORY[0x19970E910](*(void *)(a1 + 264));
      CMTimeValue v305 = *(void *)v124;
      CMTimeScale v306 = *(_DWORD *)(v124 + 8);
      CMTimeFlags v239 = *(_DWORD *)(a1 + 332);
      CMTimeEpoch v238 = *(void *)(a1 + 336);
      CMTime v280 = *v125;
      MEMORY[0x19970E930](*(void *)(a1 + 264));
      CFTypeRef v126 = v293;
      CMTime v278 = start;
      CFTypeRef v304 = 0;
      *(_OWORD *)&time1[0].int value = v245;
      *(_OWORD *)&time1[0].CMTimeEpoch epoch = v244;
      *(_OWORD *)&time1[1].CMTimeScale timescale = v243;
      uint64_t v299 = 0;
      CFTypeRef v287 = 0;
      __int16 v303 = 0;
      __int16 v302 = 0;
      BOOL v301 = 0;
      uint64_t v127 = *(const void **)(a1 + 536);
      if (v127) {
        videoMentorGetCursorPTSRange(v127, time1);
      }
      *(_OWORD *)&time2.start.int value = *(_OWORD *)&time1[0].value;
      *(_OWORD *)&time2.start.CMTimeEpoch epoch = *(_OWORD *)&time1[0].epoch;
      *(_OWORD *)&time2.duration.CMTimeScale timescale = *(_OWORD *)&time1[1].timescale;
      CMTime lhs = start;
      CMTimeRangeContainsTime(&time2, &lhs);
      uint64_t v128 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v128) {
        uint64_t v129 = v128;
      }
      else {
        uint64_t v129 = 0;
      }
      uint64_t v130 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v129 + 8);
      if (!v130)
      {
LABEL_546:
        int CursorForPresentationTimeStamp = -12782;
        goto LABEL_550;
      }
      CFTypeRef v255 = v126;
      int v131 = v130(v126, &v304);
      if (v131) {
        goto LABEL_549;
      }
      int v250 = 0;
      uint64_t v256 = 0;
      uint64_t v249 = 0;
      int v240 = 0;
      int v241 = 0;
      int v254 = 0;
      int v132 = 3;
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v135 = v134 ? v134 : 0;
        int v259 = v132;
        if (*(void *)(v135 + 72))
        {
          CFTypeRef v136 = v304;
          uint64_t v137 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v137) {
            uint64_t v138 = v137;
          }
          else {
            uint64_t v138 = 0;
          }
          CFTypeRef v147 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, void))(v138 + 72);
          if (!v147) {
            goto LABEL_546;
          }
          int v131 = v147(v136, (char *)&v303 + 1, &v303, 0);
          if (v131) {
            goto LABEL_549;
          }
          int v148 = HIBYTE(v303);
          unsigned int v149 = HIBYTE(v303) - 66;
          if (v149 > 0xE || ((1 << v149) & 0x4081) == 0)
          {
            int v198 = FigSignalErrorAt();
            int64_t countb = 0;
            CFTypeRef v27 = v304;
            if (!v198) {
              goto LABEL_426;
            }
LABEL_557:
            int CursorForPresentationTimeStamp = v198;
LABEL_109:
            int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
            int v28 = value;
LABEL_110:
            CFArrayRef v71 = theArray;
            goto LABEL_111;
          }
          int v150 = v259;
          if (v259 == 3)
          {
            if (HIBYTE(v303) == 73)
            {
              if ((_BYTE)v303)
              {
                if (v287)
                {
                  BOOL v151 = 0;
                  int v150 = 1;
                  int v148 = 73;
                }
                else
                {
                  CFTypeRef v176 = v304;
                  uint64_t v177 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v177) {
                    uint64_t v178 = v177;
                  }
                  else {
                    uint64_t v178 = 0;
                  }
                  unsigned int v179 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v178 + 8);
                  if (!v179) {
                    goto LABEL_546;
                  }
                  int v131 = v179(v176, &v287);
                  if (v131) {
                    goto LABEL_549;
                  }
                  BOOL v151 = 0;
                  int v150 = 1;
                  int v148 = HIBYTE(v303);
                }
              }
              else
              {
                BOOL v151 = 1;
                int v150 = 3;
                int v148 = 73;
              }
            }
            else
            {
              BOOL v151 = 0;
              int v150 = 3;
            }
          }
          else
          {
            BOOL v151 = HIBYTE(v303) == 73;
          }
          int v259 = v150;
          BOOL v301 = v148 == 66;
        }
        else
        {
          int v296 = 0;
          CFTypeRef v139 = v304;
          uint64_t v140 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v140) {
            uint64_t v141 = v140;
          }
          else {
            uint64_t v141 = 0;
          }
          uint64_t v142 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, int *, BOOL *))(v141 + 64);
          if (!v142)
          {
LABEL_538:
            int CursorForPresentationTimeStamp = -12782;
            goto LABEL_548;
          }
          int v143 = v142(v139, (char *)&v302 + 1, &v302, &v296, &v301);
          if (v143) {
            goto LABEL_547;
          }
          if (i == 1)
          {
            int v254 = v296;
          }
          else if (v254 >= 1 && !v241)
          {
            int v144 = v254;
            if (v254 <= v296) {
              int v144 = v296;
            }
            int v254 = v144;
          }
          if (!HIBYTE(v302)) {
            goto LABEL_310;
          }
          if (!videoMentorSyncFrameIsOpenGOP((uint64_t)v304))
          {
            if (HIBYTE(v302))
            {
              BOOL v151 = 1;
              goto LABEL_370;
            }
LABEL_310:
            BOOL v151 = 0;
            if ((_BYTE)v302 && v254 >= 1)
            {
              if (!v287)
              {
                int v131 = FigSampleCursorCopy((uint64_t)v304, (uint64_t)&v287);
                if (v131) {
                  goto LABEL_549;
                }
              }
              BOOL v151 = ++v240 >= v254;
              int v241 = 1;
            }
            goto LABEL_370;
          }
          *(_OWORD *)&time2.start.int value = v270;
          time2.start.CMTimeEpoch epoch = v268;
          *(_OWORD *)&lhs.int value = v270;
          lhs.CMTimeEpoch epoch = v268;
          uint64_t v145 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v145) {
            uint64_t v146 = v145;
          }
          else {
            uint64_t v146 = 0;
          }
          BOOL v152 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v146 + 40);
          if (!v152) {
            goto LABEL_539;
          }
          int v153 = v152(v255, &time2);
          if (v153) {
            goto LABEL_564;
          }
          CFTypeRef v154 = v304;
          uint64_t v155 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v156 = v155 ? v155 : 0;
          uint64_t v157 = *(uint64_t (**)(CFTypeRef, CMTime *))(v156 + 40);
          if (!v157)
          {
LABEL_539:
            int CursorForPresentationTimeStamp = -12782;
            goto LABEL_552;
          }
          int v153 = v157(v154, &lhs);
          if (v153)
          {
LABEL_564:
            int CursorForPresentationTimeStamp = v153;
            goto LABEL_552;
          }
          CMTime rhs = time2.start;
          CMTime v307 = lhs;
          int32_t v158 = CMTimeCompare(&rhs, &v307);
          BOOL v151 = 0;
          if ((v158 & 0x80000000) == 0 && !v287)
          {
            CMTime rhs = lhs;
            CFTypeRef v159 = v304;
            uint64_t v160 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v160) {
              uint64_t v161 = v160;
            }
            else {
              uint64_t v161 = 0;
            }
            CFStringRef v162 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v161 + 8);
            if (!v162) {
              goto LABEL_546;
            }
            size_t count = i;
            int v131 = v162(v159, &v287);
            if (v131) {
              goto LABEL_549;
            }
            unsigned int v247 = 0;
            while (1)
            {
              CMTime v307 = rhs;
              CMTime v294 = lhs;
              if (CMTimeCompare(&v307, &v294) > 0) {
                break;
              }
              CFTypeRef v163 = v287;
              uint64_t v164 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v165 = v164 ? v164 : 0;
              uint64_t v166 = v255 ? *(void *)(CMBaseObjectGetVTable() + 16) : 0;
              if (v165 != v166) {
                break;
              }
              int32_t v167 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v165 + 32);
              if (!v167 || v167(v163, v255) != -1) {
                break;
              }
              CFTypeRef v168 = v287;
              uint64_t v169 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v169) {
                uint64_t v170 = v169;
              }
              else {
                uint64_t v170 = 0;
              }
              CMTimeEpoch v171 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v170 + 168);
              if (!v171) {
                goto LABEL_539;
              }
              int v153 = v171(v168, 1, &v299);
              if (v153) {
                goto LABEL_564;
              }
              if (v299 != 1) {
                break;
              }
              CFTypeRef v172 = v287;
              uint64_t v173 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v173) {
                uint64_t v174 = v173;
              }
              else {
                uint64_t v174 = 0;
              }
              int v175 = *(uint64_t (**)(CFTypeRef, CMTime *))(v174 + 40);
              if (!v175) {
                goto LABEL_539;
              }
              int v153 = v175(v172, &rhs);
              ++v247;
              if (v153) {
                goto LABEL_564;
              }
            }
            if (v247 <= 1 && v287)
            {
              CFRelease(v287);
              CFTypeRef v287 = 0;
            }
            BOOL v151 = 1;
            uint64_t i = count;
          }
        }
LABEL_370:
        uint64_t v180 = *(void *)(a1 + 528);
        if (v180)
        {
          BOOL v246 = v151;
          countCGFloat a = i;
          CFTypeRef v248 = v304;
          uint64_t v181 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v181) {
            uint64_t v182 = v181;
          }
          else {
            uint64_t v182 = 0;
          }
          if (v248) {
            uint64_t v183 = *(void *)(CMBaseObjectGetVTable() + 16);
          }
          else {
            uint64_t v183 = 0;
          }
          if (v182 == v183
            && (uint64_t v187 = *(uint64_t (**)(uint64_t, CFTypeRef))(v182 + 32)) != 0
            && v187(v180, v248))
          {
            uint64_t i = counta;
            BOOL v151 = v246;
          }
          else
          {
            uint64_t v184 = *(void *)(a1 + 528);
            uint64_t v185 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v185) {
              uint64_t v186 = v185;
            }
            else {
              uint64_t v186 = 0;
            }
            if (v255) {
              uint64_t v188 = *(void *)(CMBaseObjectGetVTable() + 16);
            }
            else {
              uint64_t v188 = 0;
            }
            if (v186 == v188 && (int v197 = *(uint64_t (**)(uint64_t, CFTypeRef))(v186 + 32)) != 0) {
              uint64_t v189 = v197(v184, v255);
            }
            else {
              uint64_t v189 = 0;
            }
            BOOL v151 = v246;
            int v190 = v250;
            if (v189) {
              int v190 = 1;
            }
            int v250 = v190;
            uint64_t v191 = v249;
            if (v189) {
              uint64_t v191 = v256;
            }
            uint64_t v249 = v191;
            uint64_t i = counta;
          }
        }
        if (v151) {
          goto LABEL_408;
        }
        CFTypeRef v192 = v304;
        uint64_t v193 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v193) {
          uint64_t v194 = v193;
        }
        else {
          uint64_t v194 = 0;
        }
        int v195 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v194 + 168);
        if (!v195) {
          goto LABEL_538;
        }
        int v143 = v195(v192, -1, &v299);
        if (v143)
        {
LABEL_547:
          int CursorForPresentationTimeStamp = v143;
LABEL_548:
          int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          int v28 = value;
          CFArrayRef v71 = theArray;
          FigSignalErrorAt();
LABEL_553:
          CFTypeRef v27 = v304;
          goto LABEL_111;
        }
        if (v299 != -1) {
          break;
        }
        int v132 = v259;
        if (*(unsigned char *)(a1 + 116))
        {
          int CursorForPresentationTimeStamp = -1;
          goto LABEL_552;
        }
        uint64_t v196 = v256;
        if (!v301) {
          uint64_t v196 = v256 + 1;
        }
        uint64_t v256 = v196;
      }
      FigSignalErrorAt();
LABEL_408:
      int64_t countb = i;
      if (v264)
      {
        if (v264 == 1)
        {
          uint64_t v199 = *(void *)(a1 + 24);
          uint64_t v200 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v200) {
            uint64_t v201 = v200;
          }
          else {
            uint64_t v201 = 0;
          }
          uint64_t v202 = *(void (**)(uint64_t))(v201 + 72);
          if (v202) {
            v202(v199);
          }
          videoMentorResetSavedListAndEnqueueMarker(a1);
          *(_DWORD *)(a1 + 544) = -2;
          int v203 = *(const void **)(a1 + 528);
          if (v203)
          {
            CFRelease(v203);
            *(void *)(a1 + 528) = 0;
          }
          BOOL v204 = *(const void **)(a1 + 536);
          if (v204)
          {
            CFRelease(v204);
            *(void *)(a1 + 536) = 0;
          }
          *unsigned __int8 v237 = v270;
          *(void *)(a1 + 576) = v268;
        }
        goto LABEL_425;
      }
      if (!(_BYTE)v250) {
        goto LABEL_425;
      }
      if (v304)
      {
        CFRelease(v304);
        CFTypeRef v304 = 0;
      }
      uint64_t v227 = *(void *)(a1 + 528);
      uint64_t v228 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v228) {
        uint64_t v229 = v228;
      }
      else {
        uint64_t v229 = 0;
      }
      uint64_t v230 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v229 + 8);
      if (!v230) {
        goto LABEL_546;
      }
      int v131 = v230(v227, &v304);
      if (v131) {
        goto LABEL_549;
      }
      CFTypeRef v231 = v304;
      uint64_t v232 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v233 = v232 ? v232 : 0;
      char v234 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v233 + 168);
      if (!v234) {
        goto LABEL_546;
      }
      int v131 = v234(v231, 1, &v299);
      if (v131)
      {
LABEL_549:
        int CursorForPresentationTimeStamp = v131;
LABEL_550:
        FigSignalErrorAt();
LABEL_552:
        int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        int v28 = value;
        CFArrayRef v71 = theArray;
        goto LABEL_553;
      }
      if (v299 != 1 && v304)
      {
        CFRelease(v304);
        CFTypeRef v304 = 0;
      }
LABEL_425:
      CFTypeRef v27 = v304;
LABEL_426:
      if (Mutable)
      {
        if (CFArrayGetCount(Mutable) >= 1)
        {
          CMTime lhs = *a5;
          CMTime rhs = *a3;
          CFIndex v260 = CFArrayGetCount(Mutable);
          if (v260 >= 1)
          {
            CFIndex v205 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(Mutable, v205);
              CFIndex v206 = v205;
              int v207 = CFArrayGetValueAtIndex(theArray, v205);
              time1[0] = lhs;
              time2.CMTime start = rhs;
              int v198 = videoMentorThreadResendCachedSampleBuffer(a1, v207, ValueAtIndex, 0, v242, 1, a12, (long long *)&time1[0].value, (long long *)&time2.start.value, MEMORY[0x1E4F1F9F8], cf);
              if (v198) {
                goto LABEL_557;
              }
              unsigned __int8 v242 = 0;
              ++v205;
            }
            while (v260 != v206 + 1);
            unsigned __int8 v242 = 0;
          }
        }
        CFRelease(Mutable);
      }
      if (theArray) {
        CFRelease(theArray);
      }
      CFTypeRef v208 = v287;
      if (!v287) {
        CFTypeRef v208 = v27;
      }
      int MPEG2FrameType = FigSampleCursorCopy((uint64_t)v208, (uint64_t)&v286);
      if (MPEG2FrameType
        || (int MPEG2FrameType = FigSampleCursorStepInDecodeOrderAndReportStepsTaken((uint64_t)v286, -1, (uint64_t)&v284)) != 0)
      {
LABEL_554:
        int CursorForPresentationTimeStamp = MPEG2FrameType;
        goto LABEL_556;
      }
      if (v284 != -1 && v286)
      {
        CFRelease(v286);
        CFTypeRef v286 = 0;
      }
      if (!v30 || v236 < countb)
      {
        free(v30);
        uint64_t v30 = (CMTime *)malloc_type_calloc(countb, 0x20uLL, 0x10E004092DD265EuLL);
        if (v30) {
          goto LABEL_447;
        }
LABEL_558:
        int CursorPTSRange = FigSignalErrorAt();
LABEL_559:
        int CursorForPresentationTimeStamp = CursorPTSRange;
        goto LABEL_560;
      }
      int64_t countb = v236;
LABEL_447:
      if (videoMentorSyncFrameIsOpenGOP((uint64_t)v27))
      {
        int PresentationTimeStamp = FigSampleCursorGetPresentationTimeStamp((uint64_t)v27, (uint64_t)&v279);
        if (PresentationTimeStamp)
        {
          int CursorForPresentationTimeStamp = PresentationTimeStamp;
          uint64_t v29 = 0;
          goto LABEL_560;
        }
      }
      *unsigned __int8 v237 = v270;
      *(void *)(a1 + 576) = v268;
      if (v287) {
        CFTypeRef v211 = v287;
      }
      else {
        CFTypeRef v211 = v27;
      }
      time1[0].int value = v305;
      *(void *)&time1[0].CMTimeScale timescale = __PAIR64__(v239, v306);
      time1[0].CMTimeEpoch epoch = v238;
      *(_OWORD *)&time2.start.int value = *(_OWORD *)&a5->value;
      time2.start.CMTimeEpoch epoch = a5->epoch;
      videoMentorThrottlingStateHandleDiscontinuity(v257, (uint64_t)time1, (uint64_t)v211, (uint64_t)&time2);
      uint64_t v29 = 0;
      while (2)
      {
        LOBYTE(v294.CFDictionarySetValue(theDict, @"region", value) = 0;
        memset(&time2, 0, 24);
        *(_OWORD *)theArrayCGFloat a = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)&lhs.int value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v212 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        lhs.CMTimeEpoch epoch = v212;
        uint64_t v213 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v213) {
          uint64_t v214 = v213;
        }
        else {
          uint64_t v214 = 0;
        }
        BOOL v215 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v214 + 40);
        if (!v215)
        {
          int CursorForPresentationTimeStamp = -12782;
LABEL_556:
          FigSignalErrorAt();
LABEL_560:
          CFMutableSetRef Mutable = 0;
          CFArrayRef v71 = 0;
          int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          int v28 = value;
          goto LABEL_111;
        }
        int MPEG2FrameType = v215(v27, &time2);
        if (MPEG2FrameType) {
          goto LABEL_554;
        }
        long long v217 = v244;
        long long v216 = v245;
        long long v218 = v243;
        if ((time2.start.flags & 0x1D) != 1) {
          goto LABEL_558;
        }
        if (v279.flags)
        {
          time1[0] = time2.start;
          CMTime rhs = v279;
          int32_t v220 = CMTimeCompare(time1, &rhs);
          if (v220 < 0)
          {
            char v219 = 0;
          }
          else
          {
            if (v220)
            {
              *(_OWORD *)&v279.int value = v270;
              v279.CMTimeEpoch epoch = v268;
            }
            char v219 = 1;
          }
          long long v217 = v244;
          long long v216 = v245;
          long long v218 = v243;
        }
        else
        {
          char v219 = 1;
        }
        CMTimeEpoch v267 = v212;
        if (v287)
        {
          if (FigSampleCursorCompareInDecodeOrder((uint64_t)v27, (uint64_t)v287)) {
            goto LABEL_469;
          }
          long long v217 = v244;
          long long v216 = v245;
          long long v218 = v243;
          if (v287)
          {
            CFRelease(v287);
            long long v218 = v243;
            long long v217 = v244;
            long long v216 = v245;
            CFTypeRef v287 = 0;
          }
        }
        *(_OWORD *)&time1[0].int value = v216;
        *(_OWORD *)&time1[0].CMTimeEpoch epoch = v217;
        *(_OWORD *)&time1[1].CMTimeScale timescale = v218;
        int CursorPTSRange = videoMentorGetCursorPTSRange(v27, time1);
        if (CursorPTSRange) {
          goto LABEL_559;
        }
        if ((a5->flags & 0x1D) == 1)
        {
          CMTime rhs = time1[1];
          *(_OWORD *)&v307.int value = *(_OWORD *)theArraya;
          v307.CMTimeEpoch epoch = v212;
          if (CMTimeCompare(&rhs, &v307))
          {
            CMTime rhs = time2.start;
            CMTime v307 = time1[1];
            CMTimeAdd(&v277, &rhs, &v307);
            CMTime rhs = *a5;
            if (CMTimeCompare(&v277, &rhs) < 1)
            {
LABEL_469:
              BOOL v221 = 0;
              goto LABEL_479;
            }
          }
          else
          {
            CMTime rhs = time2.start;
            CMTime v307 = *a5;
            if (CMTimeCompare(&rhs, &v307) < 0) {
              goto LABEL_469;
            }
          }
        }
        CMTime rhs = start;
        CMTime v307 = time2.start;
        BOOL v221 = CMTimeCompare(&rhs, &v307) > 0;
LABEL_479:
        if (v219)
        {
          if (FigSampleCursorImplementsGetMPEG2FrameType())
          {
            LOBYTE(time1[0].CFDictionarySetValue(theDict, @"region", value) = 0;
            int MPEG2FrameType = FigSampleCursorGetMPEG2FrameType((uint64_t)v27, (uint64_t)time1, 0, 0);
            if (MPEG2FrameType) {
              goto LABEL_554;
            }
            unsigned int v223 = LOBYTE(time1[0].value) - 66;
            if (v223 > 0xE || ((1 << v223) & 0x4081) == 0) {
              goto LABEL_558;
            }
            LOBYTE(v294.CFDictionarySetValue(theDict, @"region", value) = LOBYTE(time1[0].value) == 66;
          }
          else
          {
            int MPEG2FrameType = FigSampleCursorGetDependencyInfo((uint64_t)v27, 0, 0, 0, (uint64_t)&v294);
            if (MPEG2FrameType) {
              goto LABEL_554;
            }
          }
        }
        else
        {
          LOBYTE(v294.CFDictionarySetValue(theDict, @"region", value) = 1;
        }
        if (!v221)
        {
          int v224 = 0;
          goto LABEL_494;
        }
        if ((v239 & 0x1D) != 1
          || (time1[0].int value = v305,
              *(void *)&time1[0].CMTimeScale timescale = __PAIR64__(v239, v306),
              time1[0].CMTimeEpoch epoch = v238,
              *(_OWORD *)&rhs.int value = *(_OWORD *)theArraya,
              rhs.CMTimeEpoch epoch = v267,
              CMTimeCompare(time1, &rhs) < 1))
        {
          BOOL v225 = 1;
          int v224 = 1;
          goto LABEL_496;
        }
        *(_OWORD *)&time1[0].int value = v270;
        time1[0].CMTimeEpoch epoch = v268;
        rhs.int value = v305;
        rhs.CMTimeScale timescale = v306;
        rhs.CMTimeFlags flags = v239;
        rhs.CMTimeEpoch epoch = v238;
        CMTime v307 = v280;
        videoMentorThrottleDroppableFrames(v257, (uint64_t)v27, &rhs, &v307);
        if (videoMentorPopCursorFromSelectedCursors(v257, (uint64_t)v27, (uint64_t)time1))
        {
          CMTime rhs = time1[0];
          CMTime v307 = time2.start;
          CMTimeSubtract(&lhs, &rhs, &v307);
          int v224 = 1;
        }
        else
        {
          int v224 = 0;
          ++*(_DWORD *)(a1 + 952);
        }
LABEL_494:
        BOOL v225 = v224 != 0;
        if (v224 || !LOBYTE(v294.value))
        {
LABEL_496:
          time1[0] = *a5;
          uint64_t v226 = (uint64_t)v30 + 32 * v29;
          CMTime rhs = *a3;
          CMTime v307 = lhs;
          int CursorPTSRange = videoMentorThreadCreateSampleBuffer(a1, (uint64_t)v27, !v225, a12, (long long *)&time1[0].value, (long long *)&rhs.value, (long long *)&v307.value, 1, (uint64_t)cf, v226);
          if (CursorPTSRange) {
            goto LABEL_559;
          }
          *(unsigned char *)(v226 + 28) = v294.value;
          *(unsigned char *)(v226 + 29) = v224;
          *(unsigned char *)(v226 + 30) = 0;
          *(_DWORD *)(v226 + 24) = 0;
          ++v29;
          if (v224)
          {
            *unsigned __int8 v237 = *(_OWORD *)&time2.start.value;
            *(void *)(a1 + 576) = time2.start.epoch;
          }
        }
        int MPEG2FrameType = FigSampleCursorStepInDecodeOrderAndReportStepsTaken((uint64_t)v27, 1, (uint64_t)&v284);
        if (MPEG2FrameType) {
          goto LABEL_554;
        }
        if (v284 != 1 || FigSampleCursorCompareInDecodeOrder((uint64_t)v27, (uint64_t)v293) == 1) {
          goto LABEL_505;
        }
        if (v29 != countb) {
          continue;
        }
        break;
      }
      FigSignalErrorAt();
      uint64_t v29 = countb;
LABEL_505:
      if ((a7 & 0x80000000) == 0) {
        videoMentorThreadReduceReversedGroupToSatisfyPassLimit(v30, v29, a6, a7 + 1, v242);
      }
      int CursorPTSRange = videoMentorThreadSendReversedGroup(a1, (uint64_t)v30, v29, a6, v242, a12, cf, a13, (uint64_t)&v281);
      if (CursorPTSRange) {
        goto LABEL_559;
      }
      if (v27) {
        CFRelease(v27);
      }
      if (v287)
      {
        CFRelease(v287);
        CFTypeRef v287 = 0;
      }
      videoMentorThreadReleaseSampleBuffersInReversalArray((uint64_t)v30, v29);
      if (v293) {
        CFRelease(v293);
      }
      CFArrayRef v123 = (const __CFArray *)v286;
      CFTypeRef v293 = v286;
      CFTypeRef v286 = 0;
      if (!v293)
      {
        uint64_t v122 = 0;
        goto LABEL_264;
      }
      if (v292) {
        uint64_t v235 = FigSampleCursorCompareInDecodeOrder((uint64_t)v292, (uint64_t)v123);
      }
      int v264 = 0;
      CFArrayRef theArray = 0;
      CFMutableSetRef Mutable = 0;
      unsigned __int8 v242 = 0;
      uint64_t v122 = 0;
      CFArrayRef v123 = 0;
      int64_t v236 = countb;
      uint64_t v124 = a1 + 320;
      uint64_t v125 = (CMTime *)(a1 + 344);
      if (v235 == 1) {
        goto LABEL_264;
      }
    }
  }
  int CursorForPresentationTimeStamp = 0;
  LOBYTE(v294.CFDictionarySetValue(theDict, @"region", value) = 0;
  if (v99 == 1) {
    goto LABEL_201;
  }
LABEL_204:
  CMTimeFlags v258 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
  CMTimeEpoch v271 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  CMTimeValue v269 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v265 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  while (2)
  {
    LOBYTE(v281) = 0;
    memset(time1, 0, 24);
    memset(&time2, 0, 24);
    v307.int value = v269;
    v307.CMTimeScale timescale = v265;
    CFTypeRef v102 = v293;
    uint64_t v103 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v103) {
      uint64_t v104 = v103;
    }
    else {
      uint64_t v104 = 0;
    }
    uint64_t v105 = *(uint64_t (**)(CFTypeRef, CMTime *))(v104 + 40);
    if (!v105)
    {
      int CursorForPresentationTimeStamp = -12782;
      goto LABEL_536;
    }
    int v106 = v105(v102, &v285);
    if (v106) {
      goto LABEL_535;
    }
    if ((v285.flags & 0x1D) != 1)
    {
LABEL_234:
      int v115 = FigSignalErrorAt();
LABEL_235:
      int CursorForPresentationTimeStamp = v115;
      goto LABEL_537;
    }
    CFTypeRef v107 = v293;
    uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v108) {
      uint64_t v109 = v108;
    }
    else {
      uint64_t v109 = 0;
    }
    uint64_t v110 = *(uint64_t (**)(CFTypeRef, CMTime *))(v109 + 56);
    if (v110)
    {
      int v111 = v110(v107, time1);
      if (v111)
      {
        int CursorForPresentationTimeStamp = v111;
        if (v111 != -12782) {
          goto LABEL_536;
        }
        goto LABEL_217;
      }
      if ((time1[0].flags & 0x1D) != 1) {
        goto LABEL_234;
      }
    }
    else
    {
LABEL_217:
      *(_OWORD *)&time1[0].int value = *MEMORY[0x1E4F1FA48];
      time1[0].CMTimeEpoch epoch = v271;
    }
    CMTime lhs = v285;
    CMTime rhs = time1[0];
    CMTimeAdd(&time2.start, &lhs, &rhs);
    if (v292 && (lhs = *a5, CMTime rhs = time2.start, CMTimeCompare(&lhs, &rhs) > 0))
    {
      LOBYTE(v112) = 0;
    }
    else
    {
      CMTime lhs = v285;
      CMTime rhs = start;
      unsigned int v112 = CMTimeCompare(&lhs, &rhs) >> 31;
    }
    LOBYTE(v281) = v112;
    MEMORY[0x19970E910](*(void *)(a1 + 264));
    v307.int value = *(void *)(a1 + 272);
    v307.CMTimeScale timescale = *(_DWORD *)(a1 + 280);
    CMTimeFlags v113 = *(_DWORD *)(a1 + 284);
    CMTimeEpoch v114 = *(void *)(a1 + 288);
    MEMORY[0x19970E930](*(void *)(a1 + 264));
    if ((v113 & 0x1D) != 1)
    {
      v307.int value = *MEMORY[0x1E4F1FA48];
      v307.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
      CMTimeFlags v113 = v258;
      CMTimeEpoch v114 = v271;
    }
    CMTime lhs = v285;
    rhs.int value = v307.value;
    rhs.CMTimeScale timescale = v307.timescale;
    rhs.CMTimeFlags flags = v113;
    rhs.CMTimeEpoch epoch = v114;
    int v115 = videoMentorSimulateIFramesOnly((uint64_t)v293, &lhs, &rhs, (CMTime *)(a1 + 560), -1, &v281, &v294);
    if (v115) {
      goto LABEL_235;
    }
    if ((_BYTE)v281)
    {
      CMTime lhs = *a5;
      CMTime rhs = *a3;
      int v115 = videoMentorThreadGenerateAndEnqueueFrame(a1, v293, 0, 0, v101, LOBYTE(v294.value), 1, 1, a12, (uint64_t)&lhs, (uint64_t)&rhs, MEMORY[0x1E4F1F9F8], cf);
      BOOL v101 = 0;
      if (v115) {
        goto LABEL_235;
      }
    }
    int v106 = FigSampleCursorStepInDecodeOrderAndReportStepsTaken((uint64_t)v293, -1, (uint64_t)&v284);
    if (v106)
    {
LABEL_535:
      int CursorForPresentationTimeStamp = v106;
LABEL_536:
      FigSignalErrorAt();
LABEL_537:
      int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      int v28 = value;
      CFArrayRef v71 = theArray;
      goto LABEL_545;
    }
    if (v284 == -1)
    {
      if (v292) {
        uint64_t v100 = FigSampleCursorCompareInDecodeOrder((uint64_t)v292, (uint64_t)v293);
      }
      if (v100 == 1)
      {
        int CursorForPresentationTimeStamp = 0;
        goto LABEL_201;
      }
      continue;
    }
    break;
  }
  int CursorForPresentationTimeStamp = 0;
  if (v100 && v292) {
    int CursorForPresentationTimeStamp = FigSignalErrorAt();
  }
LABEL_201:
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  CFArrayRef v71 = theArray;
LABEL_265:
  int v31 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  int v28 = value;
  if (a15 && !CursorForPresentationTimeStamp)
  {
    int CursorForPresentationTimeStamp = audioMentorEnqueueBufferConsumedMarker(a1, a15);
    CFTypeID v274 = 0;
  }
  videoMentorEnqueueDrainAfterDecodingMarker(a1);
  CFTypeRef v27 = 0;
  ++*(_DWORD *)(a1 + 936);
LABEL_111:
  if (*(unsigned char *)(a1 + 492))
  {
    videoMentorPostCollectorCoherenceConduitNotification(a1);
    *(unsigned char *)(a1 + 492) = 0;
  }
  if (a13 && (CursorForPresentationTimeStamp + 1) <= 1) {
    videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8]);
  }
  videoMentorThreadFinishPreroll(a1, 0, cf);
  if (*v31 == 1) {
    kdebug_trace();
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t v75 = (uint64_t *)&kMentorNotification_StoppingDueToCompletion;
    if (CursorForPresentationTimeStamp) {
      uint64_t v75 = (uint64_t *)&kMentorNotification_StoppingDueToError;
    }
    if (CursorForPresentationTimeStamp == -1) {
      int v76 = 0;
    }
    else {
      int v76 = CursorForPresentationTimeStamp;
    }
    if (CursorForPresentationTimeStamp == -1) {
      uint64_t v75 = (uint64_t *)&kMentorNotification_ResettingDueToModeSwitch;
    }
    int v77 = FigMentorNotificationPayloadCreate(*v75, cf, v76, *(unsigned __int8 *)(a1 + 520), v274, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v77) {
      CFRelease(v77);
    }
  }
  if (v293)
  {
    CFRelease(v293);
    CFTypeRef v293 = 0;
  }
  if (v28 && v292)
  {
    CFRelease(v292);
    CFTypeRef v292 = 0;
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v291)
  {
    CFRelease(v291);
    CFTypeRef v291 = 0;
  }
  if (v290)
  {
    CFRelease(v290);
    CFTypeRef v290 = 0;
  }
  if (v288)
  {
    CFRelease(v288);
    CFTypeRef v288 = 0;
  }
  if (v287)
  {
    CFRelease(v287);
    CFTypeRef v287 = 0;
  }
  if (v286)
  {
    CFRelease(v286);
    CFTypeRef v286 = 0;
  }
  videoMentorThreadReleaseSampleBuffersInReversalArray((uint64_t)v30, v29);
  videoMentorThrottlingStateFree(a1 + 584);
  free(v30);
  uint64_t v78 = *(const void **)(a1 + 512);
  if (v78)
  {
    CFRelease(v78);
    *(void *)(a1 + 512) = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v71) {
    CFRelease(v71);
  }
}

uint64_t FigSampleCursorStepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFArrayRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 176);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t videoMentorGetCursorPTSRange(const void *a1, _OWORD *a2)
{
  CFDictionaryRef v18 = 0;
  uint64_t v2 = MEMORY[0x1E4F1FA20];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *a2 = *MEMORY[0x1E4F1FA20];
  a2[1] = v3;
  a2[2] = *(_OWORD *)(v2 + 32);
  if (a1)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFArrayRef v8 = *(unsigned int (**)(const void *, _OWORD *))(v7 + 232);
    if (v8 && !v8(a1, a2))
    {
      uint64_t PresentationTimeRange = 0;
    }
    else
    {
      uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CFArrayRef v12 = *(unsigned int (**)(uint64_t, __CFString *, void, const __CFDictionary **))(v11 + 48);
      if (!v12
        || (!v12(FigBaseObject, @"PresentationTimeRange", *MEMORY[0x1E4F1CF80], &v18)
          ? (BOOL v13 = v18 == 0)
          : (BOOL v13 = 1),
            v13))
      {
        uint64_t PresentationTimeRange = FigSampleCursorUtilityGetPresentationTimeRange(a1, a2);
      }
      else
      {
        CMTimeRangeMakeFromDictionary(&v17, v18);
        uint64_t PresentationTimeRange = 0;
        long long v16 = *(_OWORD *)&v17.start.epoch;
        *a2 = *(_OWORD *)&v17.start.value;
        a2[1] = v16;
        a2[2] = *(_OWORD *)&v17.duration.timescale;
      }
    }
    if (v18) {
      CFRelease(v18);
    }
    return PresentationTimeRange;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

opaqueCMSampleBuffer *videoMentorGetCachedVideoFrameForCursor(void *a1, const void *a2, CFArrayRef theArray, uint64_t a4)
{
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v24.start.int value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v24.start.CMTimeEpoch epoch = v4;
  *(_OWORD *)&v24.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  long long v18 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v22.int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v22.CMTimeEpoch epoch = v5;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      uint64_t v11 = Count;
      if (!videoMentorGetCursorPTSRange(a2, &v24))
      {
        CMTime start = v24.start;
        CMTimeRange range = v24;
        CMTimeRangeGetEnd(&v22, &range);
        MEMORY[0x19970E910](a1[10]);
        CFArrayRef v12 = (void (*)(void, uint64_t, void, CMTime *, CMTime *))a1[8];
        if (v12) {
          v12(a1[9], a4, 0, &start, &v22);
        }
        MEMORY[0x19970E930](a1[10]);
        if (v11 >= 1)
        {
          for (CFIndex i = 0; v11 != i; ++i)
          {
            CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(theArray, i);
            *(_OWORD *)&range.start.int value = v18;
            range.start.CMTimeEpoch epoch = v5;
            if (!ValueAtIndex) {
              break;
            }
            CFIndex v15 = ValueAtIndex;
            CFTypeID v16 = CFGetTypeID(ValueAtIndex);
            if (v16 != CMSampleBufferGetTypeID()) {
              break;
            }
            CMSampleBufferGetPresentationTimeStamp(&range.start, v15);
            CMTime time1 = range.start;
            CMTime time2 = start;
            if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            {
              CMTime time1 = range.start;
              CMTime time2 = v22;
              if (CMTimeCompare(&time1, &time2) < 0) {
                return v15;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t videoMentorDependencyStateStartNewOrder(void *a1, uint64_t *a2)
{
  videoMentorDependencyStateReset((uint64_t)a2);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t result = videoMentorFrameNodeCreate(a1, *MEMORY[0x1E4F1CF80], -1, 0, a2);
  if (!result)
  {
    uint64_t v6 = *a2;
    *(unsigned char *)(v6 + 64) = 0;
    *(void *)(v6 + 68) = 0x200000001;
    *(_DWORD *)(v6 + 76) = 2;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, &kVideoMentorFrameNodeCursorKeyCallbacks, MEMORY[0x1E4F1D540]);
    a2[1] = (uint64_t)Mutable;
    if (Mutable
      && (CFMutableArrayRef v8 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]), (a2[2] = (uint64_t)v8) != 0)
      && (CFMutableArrayRef v9 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]), (a2[8] = (uint64_t)v9) != 0)
      && (CFMutableArrayRef v10 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]), (a2[12] = (uint64_t)v10) != 0))
    {
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t videoMentorDependencyStateCopyCursorForDecodeWalk(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, CMTime *a7, long long *a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, char a14, uint64_t *a15, unsigned char *a16, unsigned char *a17, char *a18, unsigned char *a19, void *a20)
{
  CFTypeRef v27 = a16;
  int v26 = a17;
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  CFTypeRef v214 = 0;
  CFTypeRef v215 = 0;
  CFSetRef theSet = 0;
  CFTypeRef v213 = 0;
  CFTypeRef v210 = 0;
  CFTypeRef v211 = 0;
  uint64_t v209 = 0;
  long long v28 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v208.start.unsigned int value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v208.start.CMTimeEpoch epoch = v28;
  *(_OWORD *)&v208.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  if ((*((_DWORD *)a15 + 3) & 0x1D) == 1)
  {
    *(_OWORD *)&time1[0].start.unsigned int value = *MEMORY[0x1E4F1FA48];
    time1[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(_OWORD *)CMTime time2 = *(_OWORD *)a15;
    *(void *)&time2[16] = a15[2];
    int32_t v29 = CMTimeCompare(&time1[0].start, (CMTime *)time2);
    CFTypeRef v27 = a16;
    int v26 = a17;
    unsigned int v201 = v29 >> 31;
    BOOL v30 = v29 >= 0;
  }
  else
  {
    unsigned int v201 = 0;
    BOOL v30 = 1;
  }
  int v200 = a5;
  BOOL v32 = a5 != 1 && *(void *)(a1 + 528) != 0;
  if (v27) {
    *CFTypeRef v27 = 0;
  }
  if (v26) {
    *int v26 = 0;
  }
  if (a18) {
    *a18 = 0;
  }
  if (a19) {
    *a19 = 1;
  }
  if (a20) {
    *a20 = 0;
  }
  CFTypeRef v33 = *(const void **)(a1 + 536);
  if (v33) {
    videoMentorGetCursorPTSRange(v33, &v208);
  }
  time1[0] = v208;
  *(_OWORD *)CMTime time2 = *(_OWORD *)a6;
  *(void *)&time2[16] = *(void *)(a6 + 16);
  int v197 = a7;
  BOOL v34 = CMTimeRangeContainsTime(time1, (CMTime *)time2)
     && ((~v208.duration.flags & 5) != 0 || v208.start.epoch == *(void *)(a6 + 16));
  *(_OWORD *)CMTime time2 = *(_OWORD *)a6;
  *(void *)&time2[16] = *(void *)(a6 + 16);
  videoMentorRemapTime((void *)a1, a4, 0, (long long *)time2, (uint64_t)time1);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)&time1[0].start.value;
  *(void *)(a2 + 52) = time1[0].start.epoch;
  long long v35 = *a8;
  *(void *)(a2 + 120) = *((void *)a8 + 2);
  *(_OWORD *)(a2 + 104) = v35;
  *(_OWORD *)CMTime time2 = *a8;
  *(void *)&time2[16] = *((void *)a8 + 2);
  videoMentorRemapTime((void *)a1, a4, 0, (long long *)time2, (uint64_t)time1);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&time1[0].start.value;
  *(void *)(a2 + 144) = time1[0].start.epoch;
  if (!v30) {
    BOOL v32 = 0;
  }
  int v36 = a3 == 1 && v32 && v34;
  if (a3 == 1 && v32)
  {
    CMTime v216 = *(CMTime *)a6;
    uint64_t v37 = a1 + 552;
    while (1)
    {
      uint64_t v37 = *(void *)v37;
      if (!v37) {
        break;
      }
      long long v38 = *(_OWORD *)(v37 + 32);
      *(_OWORD *)&time1[0].start.unsigned int value = *(_OWORD *)(v37 + 16);
      *(_OWORD *)&time1[0].start.CMTimeEpoch epoch = v38;
      *(_OWORD *)&time1[0].duration.CMTimeScale timescale = *(_OWORD *)(v37 + 48);
      *(CMTime *)CMTime time2 = v216;
      if (CMTimeRangeContainsTime(time1, (CMTime *)time2))
      {
        int v36 = 1;
        break;
      }
    }
  }
  uint64_t v39 = (uint64_t)a13;
  if (v201)
  {
    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v40) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    CFTypeRef v51 = *(uint64_t (**)(const void *, CFTypeRef *))(v41 + 8);
    if (!v51) {
      goto LABEL_353;
    }
    uint64_t refreshed = v51(a13, &v211);
    if (refreshed) {
      goto LABEL_345;
    }
    CFTypeRef v53 = v211;
    uint64_t v54 = *a15;
    int32_t v55 = *((_DWORD *)a15 + 2);
    memset(time2, 0, 24);
    CMTimeMake((CMTime *)time2, -v54, v55);
    CMTime v216 = *(CMTime *)time2;
    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v57 = v56 ? v56 : 0;
    uint64_t v58 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v57 + 120);
    if (!v58) {
      goto LABEL_353;
    }
    time1[0].CMTime start = v216;
    uint64_t v59 = v58(v53, time1);
    if (v59)
    {
      uint64_t v45 = v59;
      if (v59 != -12840) {
        goto LABEL_354;
      }
    }
    CFTypeRef v43 = v211;
    uint64_t v42 = a1;
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v42 = a1;
    CFTypeRef v43 = a13;
    uint64_t v44 = a19;
  }
  uint64_t v45 = videoMentorCopySyncCursorForCursor(v42, (uint64_t)v43, &v215, v44);
  if (v45) {
    goto LABEL_354;
  }
  if (v32)
  {
    uint64_t v46 = *(void *)(a1 + 528);
    CFTypeRef v47 = v215;
    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v48)
    {
      uint64_t v49 = v48;
      if (v47)
      {
LABEL_46:
        uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_59:
        BOOL v32 = v49 != v50
           || (uint64_t v66 = *(uint64_t (**)(uint64_t, CFTypeRef))(v49 + 32)) == 0
           || v66(v46, v47) != -1;
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v49 = 0;
      if (v47) {
        goto LABEL_46;
      }
    }
    uint64_t v50 = 0;
    goto LABEL_59;
  }
LABEL_61:
  uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v60) {
    uint64_t v61 = v60;
  }
  else {
    uint64_t v61 = 0;
  }
  CFTypeRef v62 = *(uint64_t (**)(const void *, uint64_t))(v61 + 8);
  if (!v62) {
    goto LABEL_353;
  }
  uint64_t refreshed = v62(a13, a2 + 24);
  if (refreshed) {
    goto LABEL_345;
  }
  CFTypeRef v63 = v215;
  uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v65 = v64 ? v64 : 0;
  CFTypeRef v67 = *(uint64_t (**)(CFTypeRef, uint64_t))(v65 + 8);
  if (!v67) {
    goto LABEL_353;
  }
  BOOL v194 = v32;
  uint64_t refreshed = v67(v63, a2 + 80);
  if (refreshed) {
    goto LABEL_345;
  }
  int v68 = a9;
  int v195 = v36;
  if (a3 == 1)
  {
    CFTypeRef v69 = CFRetain(a13);
    CFTypeRef v214 = v69;
    goto LABEL_129;
  }
  CMTime v216 = *v197;
  *(_OWORD *)&time1[0].start.unsigned int value = *(_OWORD *)a10;
  time1[0].start.CMTimeEpoch epoch = *(void *)(a10 + 16);
  *(_OWORD *)CMTime time2 = *(_OWORD *)a11;
  *(void *)&time2[16] = *(void *)(a11 + 16);
  *(_OWORD *)&v207.unsigned int value = *(_OWORD *)a12;
  v207.CMTimeEpoch epoch = *(void *)(a12 + 16);
  uint64_t refreshed = videoMentorDependencyStateFillRefreshGroupsUntil(a1, a2, (uint64_t)a13, a4, a9, &time1[0].start, (CMTime *)time2, &v207, 1, &v214);
  int v70 = v200;
  if (refreshed) {
    goto LABEL_345;
  }
  CFTypeRef v71 = v214;
  if (!v214)
  {
    if (v63)
    {
      CFRelease(v63);
      int v70 = v200;
      CFTypeRef v215 = 0;
    }
    goto LABEL_174;
  }
  if (a14)
  {
    uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v72) {
      uint64_t v73 = v72;
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = *(uint64_t (**)(const void *, CMTime *))(v73 + 40);
    if (!v74) {
      goto LABEL_353;
    }
    uint64_t refreshed = v74(a13, &v216);
    if (refreshed) {
      goto LABEL_345;
    }
  }
  CMTime v207 = v216;
  long long v205 = *a8;
  uint64_t v206 = *((void *)a8 + 2);
  CFTypeRef v220 = 0;
  CFTypeRef cf = 0;
  uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v75) {
    uint64_t v76 = v75;
  }
  else {
    uint64_t v76 = 0;
  }
  int v77 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v76 + 8);
  if (!v77)
  {
    uint64_t v45 = 4294954514;
    uint64_t v39 = (uint64_t)a13;
    goto LABEL_123;
  }
  uint64_t NodeForCursor = v77(v63, &v220);
  if (NodeForCursor)
  {
LABEL_376:
    uint64_t v45 = NodeForCursor;
LABEL_116:
    uint64_t v39 = (uint64_t)a13;
    int v68 = a9;
    goto LABEL_123;
  }
  CFTypeRef v79 = 0;
  CFTypeRef v80 = 0;
  CFAllocatorRef v198 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    CFTypeRef v81 = v220;
    uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v82) {
      uint64_t v83 = v82;
    }
    else {
      uint64_t v83 = 0;
    }
    if (v83 == *(void *)(CMBaseObjectGetVTable() + 16))
    {
      uint64_t v88 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v83 + 32);
      if (v88)
      {
        if (v88(v81, v71) == 1)
        {
          int v68 = a9;
          goto LABEL_121;
        }
      }
    }
    uint64_t v218 = 0;
    uint64_t v219 = 0;
    uint64_t NodeForCursor = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, (uint64_t)v220, a4, 1, &v218);
    if (NodeForCursor) {
      goto LABEL_376;
    }
    uint64_t v84 = v218;
    if (!*(void *)(v218 + 56))
    {
      char v217 = 0;
      time1[0].CMTime start = v207;
      *(_OWORD *)CMTime time2 = v205;
      *(void *)&time2[16] = v206;
      uint64_t NodeForCursor = videoMentorCursorIsInPlayRange(v220, (uint64_t)time1, (CMTime *)time2, &v217);
      if (NodeForCursor) {
        goto LABEL_376;
      }
      if (!v217)
      {
        if (!v80)
        {
          uint64_t NodeForCursor = videoMentorRefreshGroupCreate(v198, MEMORY[0x1E4F1F9F8], (uint64_t *)&cf);
          if (NodeForCursor) {
            goto LABEL_376;
          }
          CFTypeRef v79 = cf;
          *((unsigned char *)cf + 58) = 1;
        }
        videoMentorRefreshGroupAddNode((uint64_t)v79, v84);
        CFTypeRef v80 = v79;
      }
    }
    CFTypeRef v85 = v220;
    uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v86) {
      uint64_t v87 = v86;
    }
    else {
      uint64_t v87 = 0;
    }
    uint64_t v89 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v87 + 168);
    if (!v89)
    {
      uint64_t v45 = 4294954514;
      goto LABEL_116;
    }
    uint64_t NodeForCursor = v89(v85, 1, &v219);
    if (NodeForCursor) {
      goto LABEL_376;
    }
  }
  while (v219 == 1);
  CFTypeRef v90 = v220;
  uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v91) {
    uint64_t v92 = v91;
  }
  else {
    uint64_t v92 = 0;
  }
  int v68 = a9;
  if (v92 == *(void *)(CMBaseObjectGetVTable() + 16))
  {
    uint64_t v93 = *(void (**)(CFTypeRef, CFTypeRef))(v92 + 32);
    if (v93) {
      v93(v90, v71);
    }
  }
LABEL_121:
  uint64_t v39 = (uint64_t)a13;
  if (v79)
  {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a2 + 16), 0, v79);
    uint64_t v45 = 0;
LABEL_123:
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_125;
  }
  uint64_t v45 = 0;
LABEL_125:
  if (v220) {
    CFRelease(v220);
  }
  if (v45) {
    goto LABEL_354;
  }
  CFTypeRef v69 = v214;
LABEL_129:
  if (v194) {
    p_CFSetRef theSet = &theSet;
  }
  else {
    p_CFSetRef theSet = 0;
  }
  uint64_t v45 = videoMentorDependencyStateAddSamplesToGraph(a1, a2, a4, (uint64_t)v69, v68, 0, p_theSet);
  if (v45) {
    goto LABEL_354;
  }
  uint64_t refreshed = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, v39, a4, 0, &v209);
  if (refreshed) {
    goto LABEL_345;
  }
  uint64_t v199 = v209;
  if (!v209)
  {
LABEL_381:
    uint64_t refreshed = FigSignalErrorAt();
    goto LABEL_345;
  }
  if (v201)
  {
    CFTypeRef v95 = v211;
    *(void *)CMTime time2 = 0;
    uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v96) {
      uint64_t v97 = v96;
    }
    else {
      uint64_t v97 = 0;
    }
    int v98 = *(uint64_t (**)(CFTypeRef, unsigned char *))(v97 + 8);
    if (v98)
    {
      uint64_t v99 = v98(v95, time2);
      if (v99)
      {
LABEL_377:
        uint64_t v45 = v99;
      }
      else
      {
        while (1)
        {
          uint64_t v100 = *(void *)time2;
          uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v102 = v101 ? v101 : 0;
          uint64_t v103 = v39 ? *(void *)(CMBaseObjectGetVTable() + 16) : 0;
          if (v102 == v103)
          {
            CFTypeRef v107 = *(uint64_t (**)(uint64_t, uint64_t))(v102 + 32);
            if (v107)
            {
              if (v107(v100, v39) == 1) {
                break;
              }
            }
          }
          v216.unsigned int value = 0;
          v207.unsigned int value = 0;
          uint64_t v99 = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, *(uint64_t *)time2, a4, 0, &v216);
          if (v99) {
            goto LABEL_377;
          }
          if (v216.value && *(_DWORD *)(v216.value + 76) != 2)
          {
            time1[0].start.unsigned int value = 1;
            *(void *)&time1[0].start.CMTimeScale timescale = v216.value;
            videoMentorDependencyStateExecuteAction((const void **)a2, (int *)time1);
          }
          uint64_t v104 = *(void *)time2;
          uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v105) {
            uint64_t v106 = v105;
          }
          else {
            uint64_t v106 = 0;
          }
          uint64_t v108 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(v106 + 168);
          if (!v108) {
            goto LABEL_166;
          }
          uint64_t v99 = v108(v104, 1, &v207);
          if (v99) {
            goto LABEL_377;
          }
          if (v207.value != 1)
          {
            uint64_t v109 = *(void *)time2;
            uint64_t v110 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v110) {
              uint64_t v111 = v110;
            }
            else {
              uint64_t v111 = 0;
            }
            if (v39) {
              uint64_t v190 = *(void *)(CMBaseObjectGetVTable() + 16);
            }
            else {
              uint64_t v190 = 0;
            }
            if (v111 == v190)
            {
              uint64_t v191 = *(void (**)(uint64_t, uint64_t))(v111 + 32);
              if (v191) {
                v191(v109, v39);
              }
            }
            break;
          }
        }
        uint64_t v45 = 0;
      }
    }
    else
    {
LABEL_166:
      uint64_t v45 = 4294954514;
    }
    if (*(void *)time2) {
      CFRelease(*(CFTypeRef *)time2);
    }
    if (v45) {
      goto LABEL_354;
    }
  }
  else if (a3 == 1 && *(_DWORD *)(v209 + 76) != 2)
  {
    time1[0].start.unsigned int value = 1;
    *(void *)&time1[0].start.CMTimeScale timescale = v209;
    videoMentorDependencyStateExecuteAction((const void **)a2, (int *)time1);
  }
  if (!theSet)
  {
    int v116 = 0;
    int v70 = v200;
    goto LABEL_176;
  }
  int v202 = v68;
  CFIndex Count = CFSetGetCount(theSet);
  int v70 = v200;
  if (Count < 1)
  {
LABEL_174:
    int v116 = 0;
LABEL_176:
    CFTypeRef v117 = a16;
    uint64_t v118 = a17;
    BOOL v119 = v34;
LABEL_177:
    if (v70 == 2)
    {
      int v120 = 2;
      if (v195)
      {
        uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v121) {
          uint64_t v122 = v121;
        }
        else {
          uint64_t v122 = 0;
        }
        if (*(void *)(v122 + 48)) {
          PendingSampleBufferCFIndex Count = FigSampleBufferConsumerGetPendingSampleBufferCount(*(void *)(a1 + 24));
        }
        else {
          PendingSampleBufferCFIndex Count = 0;
        }
        if (PendingSampleBufferCount <= v116)
        {
          uint64_t v166 = *(void *)(a1 + 24);
          uint64_t v167 = *MEMORY[0x1E4F1F1B8];
          uint64_t v168 = *MEMORY[0x1E4F1CFD0];
          *(_OWORD *)&time1[0].start.unsigned int value = *(_OWORD *)a6;
          time1[0].start.CMTimeEpoch epoch = *(void *)(a6 + 16);
          FigSampleBufferConsumerSetAttachmentOnPendingSampleBuffersInPTSRange(v166, v167, v168, MEMORY[0x1E4F1FA08], (long long *)&time1[0].start.value);
          int v195 = 1;
          int v70 = 0;
          if (a19) {
            *a19 = 1;
          }
        }
        else
        {
          int v195 = 0;
          int v70 = 1;
        }
        CFTypeRef v117 = a16;
        uint64_t v118 = a17;
      }
      else
      {
        int v195 = 0;
        int v70 = 1;
      }
    }
    else
    {
      int v120 = v70;
      if (v70 == 1)
      {
        int v195 = 0;
      }
      else if (v70)
      {
        int v195 = 0;
        int v70 = 0;
      }
    }
    if (v117) {
      *CFTypeRef v117 = v195;
    }
    if (a3 == 1) {
      int v169 = v70;
    }
    else {
      int v169 = 1;
    }
    if (v169) {
      BOOL v170 = 0;
    }
    else {
      BOOL v170 = v119;
    }
    if (v70)
    {
      uint64_t v171 = *(void *)(a1 + 24);
      uint64_t v172 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v172) {
        uint64_t v173 = v172;
      }
      else {
        uint64_t v173 = 0;
      }
      uint64_t v174 = *(void (**)(uint64_t))(v173 + 72);
      if (v174) {
        v174(v171);
      }
      videoMentorResetSavedListAndEnqueueMarker(a1);
      *(_DWORD *)(a1 + 544) = -2;
      int v175 = *(const void **)(a1 + 528);
      if (v175)
      {
        CFRelease(v175);
        *(void *)(a1 + 528) = 0;
      }
      CFTypeRef v176 = *(const void **)(a1 + 536);
      if (v176)
      {
        CFRelease(v176);
        *(void *)(a1 + 536) = 0;
      }
      uint64_t v177 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(a1 + 560) = *MEMORY[0x1E4F1F9F8];
      *(void *)(a1 + 576) = *(void *)(v177 + 16);
      uint64_t v118 = a17;
    }
    if (v118) {
      unsigned char *v118 = v170;
    }
    if (v210)
    {
      CFRelease(v210);
      CFTypeRef v210 = 0;
    }
    if (v170)
    {
      if (a20)
      {
LABEL_318:
        CFTypeRef v178 = 0;
        goto LABEL_319;
      }
LABEL_335:
      uint64_t v45 = 0;
      goto LABEL_354;
    }
    if (a18)
    {
      if (v120)
      {
        if (v195) {
          BOOL v179 = v119;
        }
        else {
          BOOL v179 = 0;
        }
        if (v179)
        {
          *a18 = 0;
          if (!a20) {
            goto LABEL_335;
          }
          goto LABEL_333;
        }
        char v180 = 1;
      }
      else
      {
        char v180 = 0;
      }
      *a18 = v180;
    }
    if (!a20) {
      goto LABEL_335;
    }
    if (!v195)
    {
      CFTypeRef v178 = v215;
      if (v215)
      {
        uint64_t v45 = FigSampleCursorCopy((uint64_t)v215, (uint64_t)&v210);
        if (v45) {
          goto LABEL_354;
        }
        CFTypeRef v178 = v210;
      }
      goto LABEL_319;
    }
LABEL_333:
    time1[0].start.unsigned int value = 0;
    uint64_t v181 = *(void *)(a1 + 528);
    uint64_t v182 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v182) {
      uint64_t v183 = v182;
    }
    else {
      uint64_t v183 = 0;
    }
    uint64_t v184 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v183 + 8);
    if (!v184) {
      goto LABEL_353;
    }
    uint64_t refreshed = v184(v181, &v210);
    if (refreshed) {
      goto LABEL_345;
    }
    CFTypeRef v185 = v210;
    uint64_t v186 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v187 = v186 ? v186 : 0;
    uint64_t v188 = *(uint64_t (**)(CFTypeRef, uint64_t, CMTimeRange *))(v187 + 168);
    if (!v188) {
      goto LABEL_353;
    }
    uint64_t refreshed = v188(v185, 1, time1);
    if (refreshed) {
      goto LABEL_345;
    }
    CFTypeRef v178 = v210;
    if (time1[0].start.value != 1 && v210)
    {
      CFRelease(v210);
      goto LABEL_318;
    }
LABEL_319:
    uint64_t v45 = 0;
    *a20 = v178;
    CFTypeRef v210 = 0;
    goto LABEL_354;
  }
  CFTypeRef v113 = v215;
  uint64_t v114 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v114) {
    uint64_t v115 = v114;
  }
  else {
    uint64_t v115 = 0;
  }
  CFArrayRef v123 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v115 + 8);
  if (!v123)
  {
LABEL_353:
    uint64_t v45 = 4294954514;
    goto LABEL_354;
  }
  uint64_t refreshed = v123(v113, &v210);
  if (refreshed) {
    goto LABEL_345;
  }
  int v192 = 0;
  int v124 = 0;
  uint64_t v193 = v39;
  while (1)
  {
    CFTypeRef v125 = v210;
    uint64_t v126 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v126) {
      uint64_t v127 = v126;
    }
    else {
      uint64_t v127 = 0;
    }
    if (v39) {
      uint64_t v128 = *(void *)(CMBaseObjectGetVTable() + 16);
    }
    else {
      uint64_t v128 = 0;
    }
    if (v127 == v128)
    {
      int v144 = *(uint64_t (**)(CFTypeRef, uint64_t))(v127 + 32);
      if (v144)
      {
        if (v144(v125, v39) == 1)
        {
          int v195 = 1;
LABEL_379:
          CFTypeRef v117 = a16;
          uint64_t v118 = a17;
          goto LABEL_380;
        }
      }
    }
    v207.unsigned int value = 0;
    *(void *)&long long v205 = 0;
    if (*(unsigned char *)(a1 + 116))
    {
      uint64_t v45 = 0xFFFFFFFFLL;
      goto LABEL_354;
    }
    int v196 = v124;
    if (a3 != 1) {
      break;
    }
LABEL_227:
    uint64_t refreshed = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, (uint64_t)v210, a4, 0, &v205);
    if (refreshed) {
      goto LABEL_345;
    }
    uint64_t v143 = v205;
    uint64_t v39 = v193;
    if (!(void)v205) {
      goto LABEL_381;
    }
    if (a3 != 1 && !*(_DWORD *)(v205 + 76))
    {
      time1[0].start.unsigned int value = 1;
      *(void *)&time1[0].start.CMTimeScale timescale = v205;
      videoMentorDependencyStateExecuteAction((const void **)a2, (int *)time1);
    }
    if (v196)
    {
      int v124 = 1;
      goto LABEL_271;
    }
    CFTypeRef v145 = v210;
    uint64_t v146 = *(void *)(a1 + 528);
    uint64_t v147 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v147) {
      uint64_t v148 = v147;
    }
    else {
      uint64_t v148 = 0;
    }
    if (v146) {
      uint64_t v149 = *(void *)(CMBaseObjectGetVTable() + 16);
    }
    else {
      uint64_t v149 = 0;
    }
    if (v148 == v149 && (CFTypeRef v154 = *(uint64_t (**)(CFTypeRef, uint64_t))(v148 + 32)) != 0 && v154(v145, v146))
    {
      if (*(_DWORD *)(v143 + 76) != 2)
      {
        int v124 = 0;
        uint64_t v39 = v193;
        goto LABEL_271;
      }
      if (!CFSetContainsValue(theSet, (const void *)v143)) {
        goto LABEL_378;
      }
      int v124 = 0;
      ++v192;
      uint64_t v39 = v193;
    }
    else
    {
      int v124 = 1;
      uint64_t v39 = v193;
      if (*(_DWORD *)(v143 + 76) != 2) {
        goto LABEL_271;
      }
    }
    uint64_t v150 = *(void *)(v143 + 56);
    if (v150)
    {
      int v151 = *(unsigned __int8 *)(v150 + 58);
      BOOL v153 = a3 == 1 && v143 == v199;
      if (v151 && !v153) {
        goto LABEL_271;
      }
    }
    else if (a3 != 1 || v143 != v199)
    {
      goto LABEL_271;
    }
    CMTime v216 = *(CMTime *)(v143 + 104);
    uint64_t v155 = a1 + 552;
    while (1)
    {
      uint64_t v155 = *(void *)v155;
      if (!v155) {
        break;
      }
      long long v156 = *(_OWORD *)(v155 + 32);
      *(_OWORD *)&time1[0].start.unsigned int value = *(_OWORD *)(v155 + 16);
      *(_OWORD *)&time1[0].start.CMTimeEpoch epoch = v156;
      *(_OWORD *)&time1[0].duration.CMTimeScale timescale = *(_OWORD *)(v155 + 48);
      *(CMTime *)CMTime time2 = v216;
      if (CMTimeRangeContainsTime(time1, (CMTime *)time2)) {
        goto LABEL_271;
      }
    }
    BOOL v157 = v34;
    if (v143 != v199) {
      BOOL v157 = 0;
    }
    if (!v157)
    {
LABEL_378:
      int v195 = 0;
      goto LABEL_379;
    }
LABEL_271:
    CFTypeRef v158 = v210;
    uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v159) {
      uint64_t v160 = v159;
    }
    else {
      uint64_t v160 = 0;
    }
    uint64_t v161 = *(uint64_t (**)(CFTypeRef, uint64_t, CMTime *))(v160 + 168);
    if (!v161) {
      goto LABEL_353;
    }
    uint64_t refreshed = v161(v158, 1, &v207);
    if (refreshed) {
      goto LABEL_345;
    }
    CFTypeRef v117 = a16;
    uint64_t v118 = a17;
    if (v207.value != 1)
    {
      int v195 = 1;
LABEL_380:
      BOOL v119 = v34;
      int v70 = v200;
      int v116 = v192;
      goto LABEL_177;
    }
  }
  int v129 = 1;
  while (1)
  {
    uint64_t refreshed = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, (uint64_t)v210, a4, 0, &v205);
    if (refreshed) {
      break;
    }
    uint64_t v130 = v205;
    if ((void)v205)
    {
      int v131 = *(_DWORD *)(v205 + 76);
      if (v131 == 2)
      {
        uint64_t v132 = *(void *)(v205 + 56);
        if (v132 && (*(unsigned char *)(v132 + 58) || *(unsigned char *)(v132 + 56))) {
          goto LABEL_227;
        }
      }
      else if (v131 == 1)
      {
        goto LABEL_227;
      }
    }
    if (v69)
    {
      CFRelease(v69);
      CFTypeRef v214 = 0;
    }
    *(_OWORD *)&time1[0].start.unsigned int value = *(_OWORD *)a10;
    time1[0].start.CMTimeEpoch epoch = *(void *)(a10 + 16);
    *(_OWORD *)CMTime time2 = *(_OWORD *)a11;
    *(void *)&time2[16] = *(void *)(a11 + 16);
    *(_OWORD *)&v216.unsigned int value = *(_OWORD *)a12;
    v216.CMTimeEpoch epoch = *(void *)(a12 + 16);
    uint64_t refreshed = videoMentorDependencyStateFillRefreshGroupsUntil(a1, a2, (uint64_t)v210, a4, v202, &time1[0].start, (CMTime *)time2, &v216, v129, &v214);
    if (refreshed) {
      break;
    }
    CFTypeRef v133 = v214;
    if (v214)
    {
      if (v213)
      {
        CFRelease(v213);
        CFTypeRef v213 = 0;
      }
      uint64_t refreshed = videoMentorDependencyStateAddSamplesToGraph(a1, a2, a4, (uint64_t)v133, v202, (__CFArray **)&v213, 0);
      if (refreshed) {
        break;
      }
      CFIndex v134 = CFArrayGetCount((CFArrayRef)v213);
      if (v134 >= 1)
      {
        CFIndex v135 = v134;
        for (CFIndex i = 0; i != v135; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v213, i);
          if (ValueAtIndex[17] == 1) {
            ValueAtIndex[17] = 0;
          }
        }
      }
    }
    CFIndex v138 = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
    CFIndex v139 = v138;
    if (v138 > 10000)
    {
      LODWORD(v216.CFDictionarySetValue(theDict, @"region", value) = 0;
      LOBYTE(cf) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = v216.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)cf)) {
        unsigned int v164 = value;
      }
      else {
        unsigned int v164 = value & 0xFFFFFFFE;
      }
      if (v164)
      {
        *(_DWORD *)CMTime time2 = 136315906;
        *(void *)&time2[4] = "videoMentorDependencyStateCopyCursorForDecodeWalk";
        *(_WORD *)&time2[12] = 1024;
        *(_DWORD *)&time2[14] = -12836;
        *(_WORD *)&time2[18] = 2080;
        *(void *)&time2[20] = "videoMentorDependencyStateCopyCursorForDecodeWalk";
        __int16 v223 = 1024;
        int v224 = v139;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t refreshed = videoMentorReportIssueWithRefreshNode(v130);
      break;
    }
    if (v138 >= 1)
    {
      CFIndex v140 = 0;
      do
      {
        uint64_t v141 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v140);
        if (!v141[56])
        {
          uint64_t v142 = (uint64_t)v141;
          uint64_t refreshed = videoMentorRefreshGroupClassifyNodes((uint64_t)v141);
          if (refreshed) {
            goto LABEL_345;
          }
          videoMentorAddRefreshGroupToProcess(a2, v142);
        }
        ++v140;
      }
      while (v139 != v140);
    }
    videoMentorDependencyStateProcessRefreshGroups(a2);
    ++v129;
    CFTypeRef v69 = v133;
    if (v129 == 10) {
      goto LABEL_227;
    }
  }
LABEL_345:
  uint64_t v45 = refreshed;
LABEL_354:
  if (v211) {
    CFRelease(v211);
  }
  if (v215) {
    CFRelease(v215);
  }
  if (v214) {
    CFRelease(v214);
  }
  if (v210) {
    CFRelease(v210);
  }
  if (theSet) {
    CFRelease(theSet);
  }
  if (v213) {
    CFRelease(v213);
  }
  return v45;
}

uint64_t videoMentorEnqueueTimestampIntervalMarker(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetCMTime();
  FigCFDictionarySetCMTime();
  uint64_t v3 = audioMentorEnqueueBufferConsumedMarker(a1, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

void videoMentorResetSavedListAndEnqueueMarker(uint64_t a1)
{
  CMAttachmentBearerRef target = 0;
  if (*(void *)(a1 + 552))
  {
    if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target))
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F21A38], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      uint64_t v2 = *(void *)(a1 + 24);
      CMAttachmentBearerRef v3 = target;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int (**)(uint64_t, CMAttachmentBearerRef))(v5 + 8);
      if (v6)
      {
        if (!v6(v2, v3))
        {
          ++*(_DWORD *)(a1 + 912);
          uint64_t v7 = *(void **)(a1 + 552);
          *(void *)(a1 + 552) = 0;
          if (v7)
          {
            do
            {
              CFMutableArrayRef v8 = (void *)*v7;
              videoMentorSavedFrameDestroy(v7);
              uint64_t v7 = v8;
            }
            while (v8);
          }
        }
      }
    }
    if (target) {
      CFRelease(target);
    }
  }
}

uint64_t videoMentorThreadResendCachedSampleBuffer(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, int a4, int a5, int a6, int a7, long long *a8, long long *a9, long long *a10, const void *a11)
{
  CMSampleBufferRef sampleBufferOut = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  if (videoMentorThreadWaitForOutputQueueToDropBelowHighWater(a1, a11)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  CMTime v22 = *(uint64_t (**)(const void *, CMTime *))(v21 + 48);
  if (!v22) {
    return 4294954514;
  }
  uint64_t v23 = v22(a2, &sampleTimingArray.decodeTimeStamp);
  if (v23) {
    return v23;
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  int v26 = *(uint64_t (**)(const void *, CMSampleTimingInfo *))(v25 + 56);
  if (!v26) {
    return 4294954514;
  }
  uint64_t v23 = v26(a2, &sampleTimingArray);
  if (v23) {
    return v23;
  }
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v28 = v27 ? v27 : 0;
  int32_t v29 = *(uint64_t (**)(const void *, CMTime *))(v28 + 40);
  if (!v29) {
    return 4294954514;
  }
  uint64_t v23 = v29(a2, &sampleTimingArray.presentationTimeStamp);
  if (v23) {
    return v23;
  }
  uint64_t v42 = 0;
  CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 1, &sampleTimingArray, &sampleBufferOut);
  uint64_t v35 = a1;
  BOOL v30 = a4 == 1;
  if (!a7) {
    BOOL v30 = 0;
  }
  LOBYTE(v42) = v30;
  if (a7) {
    BOOL v31 = a4 == 0;
  }
  else {
    BOOL v31 = 0;
  }
  BYTE1(v42) = v31;
  long long v36 = *a8;
  uint64_t v37 = *((void *)a8 + 2);
  long long v38 = *a9;
  uint64_t v39 = *((void *)a9 + 2);
  long long v40 = *a10;
  uint64_t v41 = *((void *)a10 + 2);
  BYTE2(v42) = a6;
  videoMentorRemapSBufTiming((uint64_t)&v35, (uint64_t)a11, sampleBufferOut);
  if (a6) {
    CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E4F1F2C8], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
  }
  uint64_t v19 = videoMentorThreadSendSampleBuffer(a1, sampleBufferOut, a2, a4, 3, a5, 0, 0);
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  return v19;
}

uint64_t videoMentorDependencyStateGetNodeForCursor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v18 = 0u;
  uint64_t v20 = 0;
  *a6 = 0;
  uint64_t v19 = a3;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFArrayRef v14 = *(uint64_t (**)(uint64_t, char *))(v13 + 40);
  if (!v14) {
    return 4294954514;
  }
  uint64_t result = v14(a3, (char *)v25 + 8);
  if (result) {
    return result;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 8), &v18);
  CMTimeRange v17 = Value;
  uint64_t v27 = Value;
  if (a5 && !Value)
  {
    uint64_t result = videoMentorFrameNodeCreate(a1, *MEMORY[0x1E4F1CF80], a3, a4, (uint64_t *)&v27);
    if (result) {
      return result;
    }
    CMTimeRange v17 = v27;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v27, v27);
    if (v17) {
      CFRelease(v17);
    }
  }
  uint64_t result = 0;
  *a6 = v17;
  return result;
}

void videoMentorUpdateDecoderState(uint64_t a1, uint64_t a2, int a3)
{
  signed int v5 = *(_DWORD *)(a1 + 544);
  unsigned int v6 = v5;
  if (*(unsigned char *)(a1 + 548) && !*(unsigned char *)(a2 + 162))
  {
    *(unsigned char *)(a1 + 548) = 0;
    unsigned int v6 = 0x7FFFFFFF;
    if (a3)
    {
LABEL_4:
      uint64_t v7 = *(const void **)(a2 + 16);
      if (v7) {
        CFTypeRef v8 = CFRetain(v7);
      }
      else {
        CFTypeRef v8 = 0;
      }
      if (*(unsigned char *)(a2 + 158))
      {
LABEL_13:
        unsigned int v6 = 0x7FFFFFFF;
        goto LABEL_18;
      }
      if (*(unsigned char *)(a2 + 159))
      {
        v6 += v6 >> 31;
      }
      else
      {
        if (!*(unsigned char *)(a2 + 160))
        {
          if (!*(unsigned char *)(a2 + 156))
          {
            if (*(unsigned char *)(a2 + 157) && *(_DWORD *)(a1 + 544) < *(_DWORD *)(a2 + 152)) {
              unsigned int v6 = *(_DWORD *)(a2 + 152);
            }
            goto LABEL_18;
          }
          goto LABEL_13;
        }
        *(unsigned char *)(a1 + 548) = 1;
      }
LABEL_18:
      *(_DWORD *)(a1 + 544) = v6;
      if (v8)
      {
        CFMutableArrayRef v10 = *(const void **)(a1 + 528);
        if (v10) {
          CFRelease(v10);
        }
        *(void *)(a1 + 528) = v8;
      }
      return;
    }
  }
  else if (a3)
  {
    goto LABEL_4;
  }
  if (!*(unsigned char *)(a2 + 161))
  {
    signed int v9 = *(_DWORD *)(a2 + 152);
    if (v5 >= v9) {
      unsigned int v6 = v9 - 1;
    }
  }
  *(_DWORD *)(a1 + 544) = v6;
}

void videoMentorEnqueueDrainAfterDecodingMarker(uint64_t a1)
{
  CMSampleBufferRef v7 = 0;
  if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &v7))
  {
    CMSetAttachment(v7, (CFStringRef)*MEMORY[0x1E4F1F238], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
    uint64_t v2 = *(void *)(a1 + 24);
    CMSampleBufferRef v3 = v7;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    unsigned int v6 = *(void (**)(uint64_t, CMSampleBufferRef))(v5 + 8);
    if (v6) {
      v6(v2, v3);
    }
    CFRelease(v7);
  }
}

void videoMentorPostCollectorCoherenceConduitNotification(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 488))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v3 = Mutable;
      FigCFDictionarySetInt32();
      uint64_t v4 = *(void *)(a1 + 24);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      CMSampleBufferRef v7 = *(void (**)(uint64_t, void, CFMutableDictionaryRef, void))(v6 + 64);
      if (v7) {
        v7(v4, *MEMORY[0x1E4F21A88], v3, 0);
      }
      CFRelease(v3);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t videoMentorFrameNodeCreate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v10 = Instance;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(v10 + 24) = Mutable;
    if (Mutable
      && (CFMutableArrayRef v13 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]), (*(void *)(v10 + 32) = v13) != 0)
      && (CFMutableArrayRef v14 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]), (*(void *)(v10 + 40) = v14) != 0)
      && (CFMutableArrayRef v15 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]), (*(void *)(v10 + 48) = v15) != 0))
    {
      uint64_t v16 = MEMORY[0x1E4F1F9F8];
      long long v17 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v10 + 104) = *MEMORY[0x1E4F1F9F8];
      uint64_t v18 = *(void *)(v16 + 16);
      *(void *)(v10 + 120) = v18;
      *(_OWORD *)(v10 + 128) = v17;
      *(void *)(v10 + 144) = v18;
      if (a3 == -1)
      {
LABEL_18:
        uint64_t v26 = 0;
        *(unsigned char *)(v10 + 64) = 1;
        *a5 = v10;
        return v26;
      }
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      long long v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
      if (!v21) {
        goto LABEL_19;
      }
      uint64_t v22 = v21(a3, v10 + 16);
      if (!v22)
      {
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 40);
        if (v25)
        {
          uint64_t v22 = v25(a3, v10 + 104);
          if (!v22)
          {
            long long v28 = *(_OWORD *)(v10 + 104);
            uint64_t v29 = *(void *)(v10 + 120);
            videoMentorRemapTime(a1, a4, 0, &v28, (uint64_t)&v30);
            *(_OWORD *)(v10 + 128) = v30;
            *(void *)(v10 + 144) = v31;
            goto LABEL_18;
          }
          goto LABEL_23;
        }
LABEL_19:
        uint64_t v26 = 4294954514;
LABEL_20:
        CFRelease((CFTypeRef)v10);
        return v26;
      }
    }
    else
    {
      uint64_t v22 = FigSignalErrorAt();
    }
LABEL_23:
    uint64_t v26 = v22;
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

uint64_t videoMentorRemapTime@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = *a4;
  *(void *)(a5 + 16) = *((void *)a4 + 2);
  MEMORY[0x19970E910](a1[10]);
  uint64_t v10 = (void (*)(void, uint64_t, uint64_t, uint64_t, long long *))a1[8];
  if (v10)
  {
    long long v12 = *a4;
    uint64_t v13 = *((void *)a4 + 2);
    v10(a1[9], a2, a3, a5, &v12);
  }
  return MEMORY[0x19970E930](a1[10]);
}

CFTypeRef videoMentorFrameNodeDictionaryRetain(int a1, CFTypeRef cf)
{
  return CFRetain(cf);
}

void videoMentorFrameNodeDictionaryRelease(int a1, CFTypeRef cf)
{
}

__CFString *videoMentorFrameNodeCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"VideoMentorFrameNode: %p, sampleCursor: %@\n", a1, a1[2]);
  return Mutable;
}

BOOL videoMentorFrameNodeIsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 == v3) {
    return 1;
  }
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16) ? *(void *)(VTable + 16) : 0;
  return v7 != *(void *)(CMBaseObjectGetVTable() + 16)
      || (CFTypeRef v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 32)) == 0
      || v8(v2, v3) == 0;
}

CMTimeValue videoMentorFrameNodeHash(uint64_t a1)
{
  CMTime v2 = *(CMTime *)(a1 + 104);
  CMTimeConvertScale(&v3, &v2, 1000000000, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
  return v3.value;
}

uint64_t videoMentorCopySyncCursorForCursor(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  CFTypeRef v49 = 0;
  __int16 v48 = 0;
  if (a4) {
    *a4 = 1;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v9 + 8);
  if (!v10)
  {
LABEL_68:
    uint64_t v29 = 4294954514;
    goto LABEL_69;
  }
  uint64_t v11 = v10(a2, &v49);
  if (!v11)
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = *(void *)(v13 + 64) != 0;
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v14 != (*(void *)(v16 + 72) != 0))
    {
      int v17 = 0;
      int value = -1;
      uint64_t v19 = (CMTime *)MEMORY[0x1E4F1F9F8];
      while (1)
      {
        uint64_t v47 = 0;
        if (*(unsigned char *)(a1 + 116))
        {
          uint64_t v29 = 0xFFFFFFFFLL;
          goto LABEL_69;
        }
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        if (*(void *)(v21 + 64))
        {
          LODWORD(v46.CFDictionarySetValue(theDict, @"region", value) = 0;
          CFTypeRef v22 = v49;
          uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          long long v30 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, CMTime *, void))(v24 + 64);
          if (!v30) {
            goto LABEL_68;
          }
          uint64_t v29 = v30(v22, (char *)&v48 + 1, &v48, &v46, 0);
          if (v29) {
            goto LABEL_69;
          }
          if (value < 0) {
            int value = v46.value;
          }
          if (!HIBYTE(v48)) {
            goto LABEL_44;
          }
        }
        else
        {
          LOBYTE(v46.CFDictionarySetValue(theDict, @"region", value) = 0;
          LOBYTE(v45.CFDictionarySetValue(theDict, @"region", value) = 0;
          LOBYTE(time1.CFDictionarySetValue(theDict, @"region", value) = 0;
          CFTypeRef v25 = v49;
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v26) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = 0;
          }
          long long v28 = *(uint64_t (**)(CFTypeRef, CMTime *, CMTime *, CMTime *))(v27 + 72);
          if (!v28) {
            goto LABEL_68;
          }
          uint64_t v11 = v28(v25, &v46, &v45, &time1);
          if (v11) {
            goto LABEL_74;
          }
          if (LOBYTE(v45.value)) {
            LODWORD(v29) = LOBYTE(v46.value) == 73;
          }
          else {
            LODWORD(v29) = 0;
          }
          HIBYTE(v48) = LOBYTE(v46.value) == 73;
          if (LOBYTE(v46.value) != 73) {
            goto LABEL_44;
          }
        }
        if (videoMentorSyncFrameIsOpenGOP((uint64_t)v49))
        {
          if (a4) {
            *a4 = 0;
          }
LABEL_45:
          CMTime v46 = *v19;
          CMTime v45 = v46;
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v31) {
            uint64_t v32 = v31;
          }
          else {
            uint64_t v32 = 0;
          }
          CFTypeRef v33 = *(uint64_t (**)(uint64_t, CMTime *))(v32 + 40);
          if (!v33) {
            goto LABEL_68;
          }
          uint64_t v11 = v33(a2, &v46);
          if (v11) {
            goto LABEL_74;
          }
          CFTypeRef v34 = v49;
          uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v36 = v35 ? v35 : 0;
          uint64_t v37 = *(uint64_t (**)(CFTypeRef, CMTime *))(v36 + 40);
          if (!v37) {
            goto LABEL_68;
          }
          uint64_t v11 = v37(v34, &v45);
          if (v11) {
            goto LABEL_74;
          }
          CMTime time1 = v46;
          CMTime v43 = v45;
          if (CMTimeCompare(&time1, &v43) < 0) {
            __int16 v48 = 1;
          }
          goto LABEL_57;
        }
        if (a4) {
          *a4 = 1;
        }
LABEL_44:
        if (v29) {
          goto LABEL_45;
        }
LABEL_57:
        if (!(_BYTE)v48 || value < 1 || (++v17, v17 < value))
        {
          if (!HIBYTE(v48))
          {
            CFTypeRef v38 = v49;
            uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v39) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 0;
            }
            uint64_t v41 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v40 + 168);
            if (!v41) {
              goto LABEL_68;
            }
            uint64_t v11 = v41(v38, -1, &v47);
            if (v11) {
              goto LABEL_74;
            }
            if (v47 == -1) {
              continue;
            }
          }
        }
        uint64_t v29 = 0;
        *a3 = v49;
        return v29;
      }
    }
    uint64_t v11 = FigSignalErrorAt();
  }
LABEL_74:
  uint64_t v29 = v11;
LABEL_69:
  if (v49) {
    CFRelease(v49);
  }
  return v29;
}

uint64_t videoMentorDependencyStateFillRefreshGroupsUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, CMTime *a6, CMTime *a7, CMTime *a8, int a9, void *a10)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  CMTime v96 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v94 = v96;
  CFTypeRef cf = 0;
  CMTimeValue v103 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, CMTime *))(v19 + 40);
  if (!v20) {
    goto LABEL_20;
  }
  uint64_t NodeForCursor = v20(a3, &v96);
  if (NodeForCursor) {
    goto LABEL_157;
  }
  *a10 = 0;
  if (*(unsigned char *)(a2 + 32)) {
    return 0;
  }
  if (a5 && (a8->flags & 0x1D) == 1)
  {
    if ((a6->flags & 0x1D) == 1)
    {
      CMTime time1 = *a6;
      CMTime time2 = *a8;
      CMTimeMaximum(&lhs, &time1, &time2);
      *a6 = lhs;
    }
    else
    {
      long long v23 = *(_OWORD *)&a8->value;
      a6->CMTimeEpoch epoch = a8->epoch;
      *(_OWORD *)&a6->CMTimeValue value = v23;
    }
  }
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v26 = v25 ? v25 : 0;
  uint64_t v27 = *(uint64_t (**)(uint64_t, CMTime *))(v26 + 40);
  if (!v27)
  {
LABEL_20:
    long long v28 = 0;
LABEL_21:
    uint64_t v22 = 4294954514;
    goto LABEL_22;
  }
  uint64_t NodeForCursor = v27(v24, &v94);
  if (NodeForCursor) {
    goto LABEL_157;
  }
  CMTime lhs = v96;
  CMTime time1 = v94;
  uint64_t v87 = a7;
  if (CMTimeCompare(&lhs, &time1) < 0)
  {
    type.CMTimeValue value = 0;
    uint64_t NodeForCursor = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, a3, a4, 1, &type);
    if (!NodeForCursor)
    {
      CMTimeValue value = type.value;
      CFDictionaryRef ValueAtIndex = *(char **)(type.value + 56);
      if (ValueAtIndex)
      {
        long long v28 = 0;
LABEL_48:
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
        v109.locatioCFIndex n = 0;
        v109.length = Count;
        int v29 = Count + ~CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a2 + 16), v109, ValueAtIndex);
        int v30 = 1;
        goto LABEL_49;
      }
      memset(&lhs, 0, sizeof(lhs));
      CMTime time1 = v96;
      videoMentorRemapTime((void *)a1, a4, 0, (long long *)&time1.value, (uint64_t)&lhs);
      CFIndex v37 = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
      if (v37 < 1)
      {
        CFIndex i = 0;
        CFDictionaryRef ValueAtIndex = 0;
LABEL_41:
        if (i != v37 && !ValueAtIndex[56]) {
          goto LABEL_46;
        }
      }
      else
      {
        for (CFIndex i = 0; i != v37; ++i)
        {
          CFDictionaryRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), i);
          CMTime time1 = lhs;
          CMTime time2 = *(CMTime *)(ValueAtIndex + 16);
          if (CMTimeCompare(&time1, &time2) < 1) {
            goto LABEL_41;
          }
        }
        CFIndex i = v37;
      }
      CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time1 = lhs;
      uint64_t NodeForCursor = videoMentorRefreshGroupCreate(v39, (long long *)&time1.value, (uint64_t *)&cf);
      if (!NodeForCursor)
      {
        CFDictionaryRef ValueAtIndex = (char *)cf;
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a2 + 16), i, cf);
        if (ValueAtIndex)
        {
          CFRelease(ValueAtIndex);
          CFTypeRef cf = 0;
        }
LABEL_46:
        videoMentorRefreshGroupAddNode((uint64_t)ValueAtIndex, value);
        long long v28 = *(const void **)(type.value + 16);
        if (v28) {
          CFRetain(*(CFTypeRef *)(type.value + 16));
        }
        goto LABEL_48;
      }
    }
LABEL_157:
    uint64_t v22 = NodeForCursor;
    long long v28 = 0;
    goto LABEL_22;
  }
  long long v28 = 0;
  int v29 = 0;
  int v30 = 0;
LABEL_49:
  if (v29 > a9)
  {
LABEL_50:
    uint64_t v22 = 0;
    *a10 = v28;
    goto LABEL_29;
  }
  int v88 = v30;
  uint64_t v89 = (_OWORD *)(a2 + 104);
  CFAllocatorRef v85 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v83 = (_OWORD *)(a2 + 128);
  uint64_t v84 = *MEMORY[0x1E4F1CFD0];
  CFTypeRef v90 = (CMTimeValue *)(a2 + 36);
  while (1)
  {
    if (*(unsigned char *)(a2 + 33) || *(unsigned char *)(a2 + 32)) {
      goto LABEL_50;
    }
    if (*(unsigned char *)(a1 + 116))
    {
      uint64_t v22 = 0xFFFFFFFFLL;
      goto LABEL_22;
    }
    uint64_t v41 = *(void *)(a2 + 24);
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(uint64_t (**)(uint64_t, CMTime *))(v43 + 40);
    if (!v44) {
      goto LABEL_21;
    }
    int v86 = v29;
    uint64_t v45 = v44(v41, &v94);
    if (v45) {
      goto LABEL_156;
    }
    CMTime time1 = v94;
    videoMentorRemapTime((void *)a1, a4, 0, (long long *)&time1.value, (uint64_t)&lhs);
    CMTimeValue v103 = lhs.value;
    CMTimeFlags flags = lhs.flags;
    CMTimeScale timescale = lhs.timescale;
    if ((lhs.flags & 0x1D) != 1) {
      goto LABEL_50;
    }
    CMTimeEpoch epoch = lhs.epoch;
    CMTime lhs = v94;
    *(_OWORD *)&time1.CMTimeValue value = *v89;
    time1.CMTimeEpoch epoch = *(void *)(a2 + 120);
    if ((CMTimeCompare(&lhs, &time1) & 0x80000000) == 0)
    {
      *(unsigned char *)(a2 + 32) = 1;
      goto LABEL_50;
    }
    if ((a6->flags & 0x1D) != 1
      || (CMTime lhs = *a6, time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], !CMTimeCompare(&lhs, &time1))
      || (int v48 = *(_DWORD *)(a2 + 48), (v48 & 0x1D) != 1))
    {
      *CFTypeRef v90 = v103;
      *(_DWORD *)(a2 + 44) = timescale;
      *(_DWORD *)(a2 + 48) = flags;
      *(void *)(a2 + 52) = epoch;
      LOBYTE(v48) = flags;
    }
    if ((v48 & 0x1D) != 1) {
      goto LABEL_50;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)v90;
    lhs.CMTimeEpoch epoch = *(void *)(a2 + 52);
    uint64_t v45 = videoMentorRefreshGroupCreate(v85, (long long *)&lhs.value, (uint64_t *)&cf);
    if (v45)
    {
LABEL_156:
      uint64_t v22 = v45;
      goto LABEL_22;
    }
    uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(*(void *)(a2 + 24));
    uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v50) {
      uint64_t v51 = v50;
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v52 = *(void (**)(uint64_t, __CFString *, uint64_t))(v51 + 56);
    if (v52) {
      v52(FigBaseObject, @"EagerlyFetchSampleDependencyAttributes", v84);
    }
    lhs.CMTimeValue value = v103;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v90;
    time1.CMTimeEpoch epoch = *(void *)(a2 + 52);
    if (CMTimeCompare(&lhs, &time1) <= 0) {
      break;
    }
LABEL_76:
    CFTypeRef v53 = cf;
    CFIndex v54 = CFArrayGetCount(*((CFArrayRef *)cf + 5));
    if (v54 < 1)
    {
      int v29 = v86;
    }
    else
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v53);
      int v29 = v86;
      if (v88) {
        int v29 = v86 + 1;
      }
    }
    long long v92 = *(_OWORD *)&a6->value;
    CMTimeEpoch v93 = a6->epoch;
    CMTime v91 = *v87;
    CMTime time1 = *a6;
    if (!*(unsigned char *)(a2 + 33) && (*(unsigned char *)(a2 + 48) & 1) != 0 && (BYTE12(v92) & 1) != 0)
    {
      if ((v91.flags & 0x1D) == 1)
      {
        CMTime lhs = *a6;
        CMTime time2 = *v87;
        CMTimeAdd(&time1, &lhs, &time2);
      }
      else
      {
        CMTime v91 = *a6;
      }
      uint64_t v76 = (CMTime *)&v92;
      if (v54 < 1) {
        uint64_t v76 = &v91;
      }
      CMTime lhs = *v76;
      if ((flags & 0x1D) == 1
        && (time2.CMTimeValue value = v103,
            time2.CMTimeScale timescale = timescale,
            time2.CMTimeFlags flags = flags,
            time2.CMTimeEpoch epoch = epoch,
            *(_OWORD *)&type.CMTimeValue value = *v83,
            type.CMTimeEpoch epoch = *(void *)(a2 + 144),
            CMTimeCompare(&time2, &type) < 0))
      {
        type.CMTimeValue value = v103;
        type.CMTimeScale timescale = timescale;
        type.CMTimeFlags flags = flags;
        type.CMTimeEpoch epoch = epoch;
      }
      else
      {
        *(_OWORD *)&type.CMTimeValue value = *v83;
        type.CMTimeEpoch epoch = *(void *)(a2 + 144);
      }
      *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)v90;
      rhs.CMTimeEpoch epoch = *(void *)(a2 + 52);
      CMTimeSubtract(&time2, &type, &rhs);
      CMTimeValue v106 = time2.value;
      CMTimeFlags v77 = time2.flags;
      CMTimeScale v107 = time2.timescale;
      CMTimeEpoch v78 = time2.epoch;
      if ((time2.flags & 0x1D) != 1) {
        goto LABEL_143;
      }
      time2.CMTimeValue value = v106;
      time2.CMTimeScale timescale = v107;
      CMTime type = time1;
      if (CMTimeCompare(&time2, &type) < 1) {
        goto LABEL_143;
      }
      time2.CMTimeValue value = v106;
      time2.CMTimeScale timescale = v107;
      time2.CMTimeFlags flags = v77;
      time2.CMTimeEpoch epoch = v78;
      double Seconds = CMTimeGetSeconds(&time2);
      CMTime time2 = v91;
      double v80 = Seconds / CMTimeGetSeconds(&time2);
      if (v80 > 2147483650.0) {
        double v80 = 2147483650.0;
      }
      if (v80 - floor(v80) < 0.01) {
        double v80 = v80 + -1.0;
      }
      if (v80 > 1.0)
      {
        memset(&time2, 0, sizeof(time2));
        CMTime rhs = v91;
        CMTimeMultiply(&type, &rhs, (int)v80);
        uint64_t v81 = a2 + 36;
        *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)v90;
        rhs.CMTimeEpoch epoch = *(void *)(a2 + 52);
        CMTimeAdd(&time2, &rhs, &type);
        CMTime v98 = time2;
        CMTime v97 = v91;
        CMTimeAdd(&rhs, &v98, &v97);
        *(_OWORD *)CFTypeRef v90 = *(_OWORD *)&rhs.value;
        CMTimeEpoch v82 = rhs.epoch;
      }
      else
      {
LABEL_143:
        uint64_t v81 = a2 + 36;
        *(_OWORD *)&type.CMTimeValue value = *(_OWORD *)v90;
        type.CMTimeEpoch epoch = *(void *)(a2 + 52);
        CMTime rhs = lhs;
        CMTimeAdd(&time2, &type, &rhs);
        *(_OWORD *)CFTypeRef v90 = *(_OWORD *)&time2.value;
        CMTimeEpoch v82 = time2.epoch;
      }
      *(void *)(v81 + 16) = v82;
      *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)v81;
      time2.CMTimeEpoch epoch = v82;
      *(_OWORD *)&rhs.CMTimeValue value = *v83;
      rhs.CMTimeEpoch epoch = *(void *)(a2 + 144);
      if ((CMTimeCompare(&time2, &rhs) & 0x80000000) == 0) {
        *(unsigned char *)(a2 + 33) = 1;
      }
    }
    if (v29 > a9) {
      goto LABEL_50;
    }
  }
  int32_t v55 = v28;
  while (1)
  {
    time2.CMTimeValue value = 0;
    type.CMTimeValue value = 0;
    if (*(unsigned char *)(a1 + 116))
    {
      uint64_t v22 = 0xFFFFFFFFLL;
      goto LABEL_152;
    }
    uint64_t v56 = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, *(void *)(a2 + 24), a4, 1, &type);
    if (v56) {
      break;
    }
    CMTimeValue v57 = type.value;
    videoMentorRefreshGroupAddNode((uint64_t)cf, type.value);
    long long v28 = *(const void **)(v57 + 16);
    if (v55)
    {
      uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v58)
      {
        uint64_t v59 = v58;
        if (v28) {
          goto LABEL_86;
        }
LABEL_90:
        uint64_t v60 = 0;
      }
      else
      {
        uint64_t v59 = 0;
        if (!v28) {
          goto LABEL_90;
        }
LABEL_86:
        uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
      }
      if (v59 == v60
        && (uint64_t v75 = *(uint64_t (**)(const void *, const void *))(v59 + 32)) != 0
        && v75(v55, v28) == -1)
      {
        long long v28 = *(const void **)(type.value + 16);
        if (v28) {
          CFRetain(*(CFTypeRef *)(type.value + 16));
        }
        CFRelease(v55);
      }
      else
      {
        long long v28 = v55;
      }
      goto LABEL_93;
    }
    if (v28) {
      CFRetain(*(CFTypeRef *)(v57 + 16));
    }
LABEL_93:
    uint64_t v61 = *(void *)(type.value + 16);
    uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v62)
    {
      uint64_t v63 = v62;
      if (a3) {
        goto LABEL_95;
      }
    }
    else
    {
      uint64_t v63 = 0;
      if (a3)
      {
LABEL_95:
        uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
        goto LABEL_98;
      }
    }
    uint64_t v64 = 0;
LABEL_98:
    if (v63 != v64 || (int v68 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 32)) == 0 || !v68(v61, a3)) {
      int v88 = 1;
    }
    uint64_t v65 = *(void *)(a2 + 24);
    uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v66) {
      uint64_t v67 = v66;
    }
    else {
      uint64_t v67 = 0;
    }
    CFTypeRef v69 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(v67 + 176);
    if (!v69) {
      goto LABEL_149;
    }
    uint64_t v70 = v69(v65, 1, &time2);
    if (v70) {
      goto LABEL_158;
    }
    if (time2.value != 1)
    {
LABEL_128:
      *(unsigned char *)(a2 + 32) = 1;
      goto LABEL_76;
    }
    uint64_t v71 = *(void *)(a2 + 24);
    uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v73 = v72 ? v72 : 0;
    uint64_t v74 = *(uint64_t (**)(uint64_t, CMTime *))(v73 + 40);
    if (!v74)
    {
LABEL_149:
      uint64_t v22 = 4294954514;
LABEL_150:
      int32_t v55 = v28;
      goto LABEL_152;
    }
    uint64_t v70 = v74(v71, &v94);
    if (v70)
    {
LABEL_158:
      uint64_t v22 = v70;
      goto LABEL_150;
    }
    CMTime time1 = v94;
    videoMentorRemapTime((void *)a1, a4, 0, (long long *)&time1.value, (uint64_t)&lhs);
    CMTimeValue v103 = lhs.value;
    CMTimeFlags flags = lhs.flags;
    CMTimeScale timescale = lhs.timescale;
    CMTimeEpoch epoch = lhs.epoch;
    CMTime lhs = v94;
    *(_OWORD *)&time1.CMTimeValue value = *v89;
    time1.CMTimeEpoch epoch = *(void *)(a2 + 120);
    if ((CMTimeCompare(&lhs, &time1) & 0x80000000) == 0) {
      goto LABEL_128;
    }
    lhs.CMTimeValue value = v103;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v90;
    time1.CMTimeEpoch epoch = *(void *)(a2 + 52);
    int32_t v55 = v28;
    if (CMTimeCompare(&lhs, &time1) >= 1) {
      goto LABEL_76;
    }
  }
  uint64_t v22 = v56;
LABEL_152:
  long long v28 = v55;
LABEL_22:
  LODWORD(time2.CFDictionarySetValue(theDict, @"region", value) = 0;
  LOBYTE(type.CFDictionarySetValue(theDict, @"region", value) = 0;
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v32 = time2.value;
  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
    unsigned int v33 = v32;
  }
  else {
    unsigned int v33 = v32 & 0xFFFFFFFE;
  }
  if (v33)
  {
    LODWORD(time1.CFDictionarySetValue(theDict, @"region", value) = 136315394;
    *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"videoMentorDependencyStateFillRefreshGroupsUntil";
    LOWORD(time1.flags) = 1024;
    *(CMTimeFlags *)((char *)&time1.flags + 2) = v22;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v28) {
    CFRelease(v28);
  }
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  return v22;
}

uint64_t videoMentorDependencyStateAddSamplesToGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __CFArray **a6, __CFSet **a7)
{
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  v128[0] = 0;
  if (a6) {
    *a6 = 0;
  }
  if (a7) {
    *a7 = 0;
  }
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v108 = a6;
    CFTypeRef v113 = a7;
    int v111 = 0;
    uint64_t v13 = 0;
    uint64_t v110 = *MEMORY[0x1E4F1CFD0];
    CFStringRef key = (void *)*MEMORY[0x1E4F1F1F8];
    uint64_t v109 = *MEMORY[0x1E4F1CFC8];
    CMTimeValue v106 = (void *)*MEMORY[0x1E4F1F1A8];
    uint64_t v105 = (void *)*MEMORY[0x1E4F1F1E0];
    uint64_t v15 = (const void *)*MEMORY[0x1E4F1D260];
    uint64_t v112 = a4;
    uint64_t v116 = a1;
    while (1)
    {
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v16 = *(void *)(a2 + 80);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17)
      {
        uint64_t v18 = v17;
        if (!a4) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v18 = 0;
        if (!a4)
        {
LABEL_17:
          uint64_t v19 = 0;
          goto LABEL_18;
        }
      }
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_18:
      if (v18 == v19)
      {
        long long v23 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 32);
        if (v23)
        {
          if (v23(v16, a4) == 1) {
            goto LABEL_178;
          }
        }
      }
      if (*(unsigned char *)(a1 + 116))
      {
        uint64_t v14 = 0xFFFFFFFFLL;
        goto LABEL_170;
      }
      uint64_t NodeForCursor = videoMentorDependencyStateGetNodeForCursor((void *)a1, a2, *(void *)(a2 + 80), a3, 1, &v127);
      if (NodeForCursor) {
        goto LABEL_184;
      }
      __int16 v125 = 0;
      unsigned __int8 v124 = 0;
      int v123 = 0;
      BOOL v122 = 0;
      uint64_t v121 = 0;
      __int16 v120 = 0;
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      if (*(void *)(v22 + 72))
      {
        LOBYTE(time1.CFDictionarySetValue(theDict, @"region", value) = 0;
        LOBYTE(value.CFDictionarySetValue(theDict, @"region", value) = 0;
        uint64_t v24 = *(void *)(a2 + 80);
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v44 = *(uint64_t (**)(uint64_t, CMTime *, char *, CMTime *))(v26 + 72);
        if (!v44) {
          goto LABEL_168;
        }
        uint64_t NodeForCursor = v44(v24, &time1, (char *)&v125 + 1, &value);
        if (NodeForCursor) {
          goto LABEL_184;
        }
        int v43 = LOBYTE(time1.value) == 73;
        LOBYTE(v125) = LOBYTE(time1.value) == 73;
        BOOL v122 = LOBYTE(time1.value) == 66;
        BOOL v31 = v43;
      }
      else
      {
        uint64_t v27 = *(void *)(a2 + 80);
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        int v30 = *(uint64_t (**)(uint64_t, __int16 *, unsigned __int8 *, int *, BOOL *))(v29 + 64);
        if (!v30) {
          goto LABEL_168;
        }
        uint64_t NodeForCursor = v30(v27, &v125, &v124, &v123, &v122);
        if (NodeForCursor) {
          goto LABEL_184;
        }
        BOOL v31 = (v125 | v124) != 0;
        if (v128[0])
        {
          CFRelease(v128[0]);
          v128[0] = 0;
        }
        uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(*(void *)(a2 + 80));
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v33) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        uint64_t v35 = *(void (**)(uint64_t, __CFString *, uint64_t))(v34 + 56);
        if (v35) {
          v35(FigBaseObject, @"EagerlyFetchSampleDependencyAttributes", v110);
        }
        uint64_t v36 = FigSampleCursorGetFigBaseObject(*(void *)(a2 + 80));
        uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v37) {
          uint64_t v38 = v37;
        }
        else {
          uint64_t v38 = 0;
        }
        CFAllocatorRef v39 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v38 + 48);
        if (v39)
        {
          if (!v39(v36, @"SampleDependencyAttributes", allocator, v128))
          {
            if (v128[0])
            {
              CFTypeID v40 = CFGetTypeID(v128[0]);
              if (v40 == CFDictionaryGetTypeID())
              {
                time1.CMTime value = 0;
                value.CMTime value = 0;
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v128[0], key, (const void **)&value)
                  && value.value == v109)
                {
                  BOOL v122 = 1;
                }
                int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)v128[0], v106, (const void **)&value);
                int v42 = value.value == v109 || v31;
                if (ValueIfPresent) {
                  BOOL v31 = v42;
                }
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v128[0], v105, (const void **)&time1)) {
                  FigCFDictionaryGetIntIfPresent();
                }
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetIntIfPresent();
              }
            }
          }
        }
        int v43 = v125;
        if ((_BYTE)v125 && (v121 == 21 || v121 == 16)) {
          HIBYTE(v125) = 1;
        }
      }
      uint64_t v45 = v127;
      *(_DWORD *)(v127 + 152) = HIDWORD(v121);
      *(unsigned char *)(v45 + 156) = HIBYTE(v120);
      *(unsigned char *)(v45 + 157) = v120;
      *(unsigned char *)(v45 + 158) = v43;
      *(unsigned char *)(v45 + 159) = v124;
      int v46 = HIBYTE(v125);
      *(unsigned char *)(v45 + 160) = HIBYTE(v125);
      *(_WORD *)(v45 + 161) = v122;
      if (v43 && !v46)
      {
        videoMentorDependencyStateCloseNodesWithUnknownDependents(a2, Mutable);
        uint64_t v47 = *(unsigned char **)(a2 + 72);
        if (!v47) {
          goto LABEL_78;
        }
        if (v47[64])
        {
          v47[64] = 0;
          CFArrayAppendValue(Mutable, v47);
        }
LABEL_77:
        CFRelease(v47);
        *(void *)(a2 + 72) = 0;
        goto LABEL_78;
      }
      uint64_t v48 = *(void *)(a2 + 72);
      if (v48)
      {
        if (v48 == *(void *)a2
          || (CMTime time1 = *(CMTime *)(v45 + 104),
              CMTime value = *(CMTime *)(v48 + 104),
              int32_t v49 = CMTimeCompare(&time1, &value),
              *(unsigned char *)(v45 + 162) = v49 < 0,
              (v49 & 0x80000000) == 0))
        {
          videoMentorDependencyStateCloseNodesWithUnknownDependents(a2, Mutable);
          CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 64), *(const void **)(a2 + 72));
          uint64_t v47 = *(unsigned char **)(a2 + 72);
          if (v47) {
            goto LABEL_77;
          }
        }
      }
LABEL_78:
      if (HIBYTE(v125)) {
        *(void *)(a2 + 72) = CFRetain((CFTypeRef)v45);
      }
      if (v122)
      {
        *(unsigned char *)(v45 + 64) = 0;
        CFArrayAppendValue(Mutable, (const void *)v45);
      }
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
      CFIndex v51 = Count;
      CFIndex v52 = SHIDWORD(v121);
      if (HIBYTE(v120) && Count > SHIDWORD(v121))
      {
        do
        {
          CFIndex CountOfNodesWithUnknownDependentsAtLevel = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, v52);
          if (CountOfNodesWithUnknownDependentsAtLevel >= 1)
          {
            CFIndex v54 = CountOfNodesWithUnknownDependentsAtLevel;
            for (CFIndex i = 0; i != v54; ++i)
            {
              CFArrayRef NodeWithUnknownDependentsAtLevel = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, v52, i);
              *((unsigned char *)NodeWithUnknownDependentsAtLevel + 64) = 0;
              CFArrayAppendValue(Mutable, NodeWithUnknownDependentsAtLevel);
            }
          }
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), v52++, v15);
        }
        while (v52 != v51);
      }
      else if ((_BYTE)v120)
      {
        if (Count > SHIDWORD(v121))
        {
          CFIndex v57 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, SHIDWORD(v121));
          if (v57 >= 1)
          {
            CFIndex v58 = v57;
            for (CFIndex j = 0; j != v58; ++j)
            {
              CFArrayRef v60 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, SHIDWORD(v121), j);
              *((unsigned char *)v60 + 64) = 0;
              CFArrayAppendValue(Mutable, v60);
              CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), SHIDWORD(v121), v15);
            }
          }
        }
      }
      CFIndex v61 = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
      if (v61 <= SHIDWORD(v121))
      {
        CFIndex v62 = v61 - 1;
        do
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 64), v15);
          ++v62;
        }
        while (v62 < SHIDWORD(v121));
      }
      if (!v31)
      {
        uint64_t v63 = v13;
        uint64_t v64 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        CFArrayAppendValue(v64, (const void *)v45);
        CFIndex v65 = HIDWORD(v121);
        if ((v121 & 0x8000000000000000) == 0)
        {
          do
          {
            CFIndex v66 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, v65);
            if (v66 >= 1)
            {
              CFIndex v67 = v66;
              for (CFIndex k = 0; k != v67; ++k)
              {
                CFArrayRef v69 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, v65, k);
                v129.length = CFArrayGetCount(v64);
                v129.locatioCFIndex n = 0;
                if (CFArrayGetFirstIndexOfValue(v64, v129, v69) == -1) {
                  videoMentorFrameNodeAddDependentNode((CFMutableArrayRef *)v69, (CFMutableArrayRef *)v45);
                }
                CFArrayAppendValue(v64, v69);
                CFArrayRef v70 = (const __CFArray *)*((void *)v69 + 4);
                v130.length = CFArrayGetCount(v70);
                v130.locatioCFIndex n = 0;
                CFArrayAppendArray(v64, v70, v130);
              }
            }
          }
          while (v65-- > 0);
        }
        uint64_t v13 = v63;
        BOOL v31 = 0;
        if (v64) {
          CFRelease(v64);
        }
      }
      if (!CFArrayGetCount(*(CFArrayRef *)(v45 + 32))) {
        videoMentorFrameNodeAddDependentNode(*(CFMutableArrayRef **)a2, (CFMutableArrayRef *)v45);
      }
      a1 = v116;
      if (*(unsigned char *)(v45 + 64))
      {
        CFIndex v72 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, SHIDWORD(v121));
        if (!v31)
        {
          CFIndex v77 = v72;
          if (v72 >= 1)
          {
            CFIndex v78 = 0;
            do
            {
              CFArrayRef v79 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, SHIDWORD(v121), v78);
              *((unsigned char *)v79 + 64) = 0;
              CFArrayAppendValue(Mutable, v79);
              ++v78;
            }
            while (v77 != v78);
          }
          double v80 = *(__CFArray **)(a2 + 64);
          CFIndex v81 = SHIDWORD(v121);
          goto LABEL_120;
        }
        CFIndex v73 = SHIDWORD(v121);
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), SHIDWORD(v121));
        if (ValueAtIndex == v15)
        {
          double v80 = *(__CFArray **)(a2 + 64);
          CFIndex v81 = v73;
LABEL_120:
          CFArraySetValueAtIndex(v80, v81, (const void *)v45);
          goto LABEL_122;
        }
        uint64_t v75 = ValueAtIndex;
        if (CFGetTypeID(ValueAtIndex) == sVideoMentorFrameNodeID)
        {
          uint64_t v76 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          CFArrayAppendValue(v76, v75);
          CFArrayAppendValue(v76, (const void *)v45);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), v73, v76);
          CFRelease(v76);
        }
        else
        {
          CFArrayAppendValue((CFMutableArrayRef)v75, (const void *)v45);
        }
      }
LABEL_122:
      if (v113)
      {
        uint64_t v82 = *(void *)(v116 + 528);
        if (v82)
        {
          if (!v111)
          {
            uint64_t v83 = *(void *)(a2 + 80);
            uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v84) {
              uint64_t v85 = v84;
            }
            else {
              uint64_t v85 = 0;
            }
            if (v85 == *(void *)(CMBaseObjectGetVTable() + 16)
              && (uint64_t v102 = *(uint64_t (**)(uint64_t, uint64_t))(v85 + 32)) != 0
              && v102(v83, v82))
            {
              int v111 = 0;
            }
            else
            {
              if (!*(unsigned char *)(v45 + 160))
              {
                uint64_t v86 = *(int *)(v116 + 544);
                uint64_t v13 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
                uint64_t v87 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                CFIndex v88 = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
                if (v88 >= v86 + 1) {
                  CFIndex v89 = v86 + 1;
                }
                else {
                  CFIndex v89 = v88;
                }
                if (v86 == 0x7FFFFFFF) {
                  uint64_t v90 = v88;
                }
                else {
                  uint64_t v90 = v89;
                }
                if (v90 >= 1)
                {
                  for (CFIndex m = 0; m != v90; ++m)
                  {
                    CFIndex v92 = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a2, m);
                    if (v92 >= 1)
                    {
                      CFIndex v93 = v92;
                      for (CFIndex n = 0; n != v93; ++n)
                      {
                        CFArrayRef v95 = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a2, m, n);
                        CFArrayAppendValue(v87, v95);
                      }
                    }
                  }
                }
                CFArrayAppendValue(v87, (const void *)v45);
                if (CFArrayGetCount(v87) >= 1)
                {
                  do
                  {
                    CMTime v96 = CFArrayGetValueAtIndex(v87, 0);
                    CFArrayRemoveValueAtIndex(v87, 0);
                    if (!CFSetContainsValue(v13, v96))
                    {
                      CFSetSetValue(v13, v96);
                      CFArrayRef v97 = (const __CFArray *)v96[4];
                      v131.length = CFArrayGetCount(v97);
                      v131.locatioCFIndex n = 0;
                      CFArrayAppendArray(v87, v97, v131);
                    }
                  }
                  while (CFArrayGetCount(v87) > 0);
                }
                if (v87) {
                  CFRelease(v87);
                }
              }
              int v111 = 1;
            }
            a1 = v116;
          }
        }
      }
      if (a5)
      {
        if (*(unsigned char *)(v45 + 158) || *(unsigned char *)(v45 + 159))
        {
          *(void *)(v45 + 68) = 0x200000002;
        }
        else if (!*(_DWORD *)(v45 + 76))
        {
          *(_DWORD *)(v45 + 76) = 1;
          uint64_t v103 = *(void *)(v45 + 56);
          if (v103) {
            --*(_DWORD *)(v103 + 80);
          }
        }
      }
      uint64_t v98 = *(void *)(a2 + 80);
      uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v99) {
        uint64_t v100 = v99;
      }
      else {
        uint64_t v100 = 0;
      }
      uint64_t v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v100 + 168);
      if (!v101)
      {
LABEL_168:
        uint64_t v14 = 4294954514;
        goto LABEL_170;
      }
      uint64_t NodeForCursor = v101(v98, 1, &v126);
      if (NodeForCursor)
      {
LABEL_184:
        uint64_t v14 = NodeForCursor;
        goto LABEL_170;
      }
      if (v126 != 1)
      {
        *(unsigned char *)(a2 + 88) = 1;
LABEL_178:
        if (v111)
        {
          a7 = v113;
          a6 = v108;
        }
        else
        {
          a7 = v113;
          a6 = v108;
          if (v13)
          {
            CFRelease(v13);
            uint64_t v13 = 0;
          }
        }
        if (!*(unsigned char *)(a2 + 88)) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      a4 = v112;
      if (*(unsigned char *)(a2 + 88)) {
        goto LABEL_178;
      }
    }
  }
  uint64_t v13 = 0;
LABEL_7:
  videoMentorDependencyStateCloseNodesWithUnknownDependents(a2, Mutable);
LABEL_8:
  if (a6)
  {
    *a6 = Mutable;
    CFMutableArrayRef Mutable = 0;
  }
  uint64_t v14 = 0;
  if (a7)
  {
    *a7 = v13;
    uint64_t v13 = 0;
  }
LABEL_170:
  if (v128[0]) {
    CFRelease(v128[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v14;
}

uint64_t videoMentorReportIssueWithRefreshNode(uint64_t a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v13 = 0;
  cf[0] = 0;
  uint64_t v1 = (void *)MEMORY[0x1E4F1CF80];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *, CFTypeRef *))(v4 + 144);
    if (!v5 || (v5(v2, 0, 0, cf, &v13), !v13))
    {
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      uint64_t v9 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
      if (v9) {
        v9(CMBaseObject, *MEMORY[0x1E4F1EC78], *v1, &v13);
      }
    }
  }
  if (FigCanTriggerTapToRadar())
  {
    RadarDescriptionString = (const void *)FigTapToRadarCreateRadarDescriptionString();
    FigTriggerTapToRadar();
    if (RadarDescriptionString) {
      CFRelease(RadarDescriptionString);
    }
  }
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v13) {
    CFRelease(v13);
  }
  return 0;
}

uint64_t videoMentorRefreshGroupClassifyNodes(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  CFIndex v3 = Count;
  if (Count > 10000)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), 0);
    return videoMentorReportIssueWithRefreshNode((uint64_t)ValueAtIndex);
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    uint64_t v6 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v5);
    if (v6[19] == 1) {
      goto LABEL_45;
    }
    uint64_t v7 = v6;
    uint64_t result = videoMentorFrameNodeDetermineIfIsLeaf(v6, a1);
    if (result) {
      return result;
    }
    if (v7[17] == 1)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(Mutable, v7);
      if (CFArrayGetCount(Mutable) >= 1)
      {
        do
        {
          uint64_t v9 = (CFArrayRef *)CFArrayGetValueAtIndex(Mutable, 0);
          CFIndex v10 = CFArrayGetCount(v9[4]);
          if (v10 >= 1)
          {
            CFIndex v11 = v10;
            for (CFIndex i = 0; i != v11; ++i)
            {
              CFTypeRef v13 = CFArrayGetValueAtIndex(v9[4], i);
              if (*((void *)v13 + 7) == a1 && !v13[17])
              {
                v13[17] = 1;
                CFArrayAppendValue(Mutable, v13);
              }
            }
          }
          CFArrayRemoveValueAtIndex(Mutable, 0);
        }
        while (CFArrayGetCount(Mutable) > 0);
      }
      CFRelease(Mutable);
    }
    CFIndex v14 = v3;
    uint64_t v15 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(v15, v7);
    if (CFArrayGetCount(v15) < 1)
    {
LABEL_35:
      int v28 = 2;
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v16 = CFArrayGetValueAtIndex(v15, 0);
      uint64_t v17 = v16[2];
      if (v17) {
        break;
      }
LABEL_29:
      CFArrayRemoveValueAtIndex(v15, 0);
      if (CFArrayGetCount(v15) <= 0) {
        goto LABEL_35;
      }
    }
    uint64_t v18 = v16;
    uint64_t v19 = *(void *)(a1 + 64);
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v20)
    {
      uint64_t v21 = v20;
      if (v19) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v21 = 0;
      if (v19)
      {
LABEL_21:
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        goto LABEL_24;
      }
    }
    uint64_t v22 = 0;
LABEL_24:
    if (v21 == v22)
    {
      uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 32);
      if (v27)
      {
        if (v27(v17, v19) == -1) {
          goto LABEL_29;
        }
      }
    }
    CFIndex v23 = CFArrayGetCount((CFArrayRef)v18[4]);
    if (v23 < 1) {
      goto LABEL_29;
    }
    CFIndex v24 = v23;
    CFIndex v25 = 0;
    while (1)
    {
      uint64_t v26 = CFArrayGetValueAtIndex((CFArrayRef)v18[4], v25);
      if (v26[7] == a1) {
        break;
      }
      CFArrayAppendValue(v15, v26);
      if (v24 == ++v25) {
        goto LABEL_29;
      }
    }
    int v28 = 1;
LABEL_36:
    CFRelease(v15);
    v7[18] = v28;
    uint64_t v29 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(v29, v7);
    CFIndex v3 = v14;
    if (CFArrayGetCount(v29) >= 1)
    {
      do
      {
        int v30 = (CFArrayRef *)CFArrayGetValueAtIndex(v29, 0);
        CFIndex v31 = CFArrayGetCount(v30[3]);
        if (v31 >= 1)
        {
          CFIndex v32 = v31;
          for (CFIndex j = 0; j != v32; ++j)
          {
            uint64_t v34 = CFArrayGetValueAtIndex(v30[3], j);
            if (*((void *)v34 + 7) == a1 && !v34[18])
            {
              v34[18] = 1;
              CFArrayAppendValue(v29, v34);
            }
          }
        }
        CFArrayRemoveValueAtIndex(v29, 0);
      }
      while (CFArrayGetCount(v29) > 0);
    }
    CFRelease(v29);
LABEL_45:
    if (++v5 == v3) {
      return 0;
    }
  }
}

void videoMentorAddRefreshGroupToProcess(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 80)) {
    videoMentorRefreshGroupMarkAsProcessed(a2);
  }
  if (!*(unsigned char *)(a2 + 56))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
    if (Count < 1)
    {
LABEL_16:
      CFIndex v14 = *(__CFArray **)(a1 + 96);
      CFArrayAppendValue(v14, (const void *)a2);
      return;
    }
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v6);
      uint64_t v8 = ValueAtIndex[8];
      uint64_t v9 = *(void *)(a2 + 64);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10)
      {
        uint64_t v11 = v10;
        if (!v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v11 = 0;
        if (!v9)
        {
LABEL_11:
          uint64_t v12 = 0;
          goto LABEL_12;
        }
      }
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_12:
      if (v11 != v12 || (CFTypeRef v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 32)) == 0 || v13(v8, v9) != -1)
      {
        if (ValueAtIndex != (void *)a2)
        {
          uint64_t v15 = *(__CFArray **)(a1 + 96);
          CFArrayInsertValueAtIndex(v15, v6, (const void *)a2);
        }
        return;
      }
      if (v5 == ++v6) {
        goto LABEL_16;
      }
    }
  }
}

CFIndex videoMentorDependencyStateProcessRefreshGroups(uint64_t a1)
{
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
  if (result < 1) {
    return result;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFIndex v5 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
  do
  {
    CFDictionaryRef ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), 0);
    CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0);
    if (*((unsigned char *)ValueAtIndex + 56)
      || videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex))
    {
      goto LABEL_118;
    }
    CFIndex Count = CFArrayGetCount(ValueAtIndex[6]);
    if (Count >= 1)
    {
      for (CFIndex i = Count; i > 0; CFIndex i = CFArrayGetCount(ValueAtIndex[6]))
      {
        CFArrayRef v9 = ValueAtIndex[6];
        CFIndex v10 = 0;
        ValueAtIndex[6] = CFArrayCreateMutable(v3, 0, &kVideoMentorActionCallbacks);
        do
        {
          uint64_t v11 = (int *)CFArrayGetValueAtIndex(v9, v10);
          videoMentorDependencyStateExecuteAction((const void **)a1, v11);
          ++v10;
        }
        while (i != v10);
        if (v9) {
          CFRelease(v9);
        }
      }
    }
    if (*((unsigned char *)ValueAtIndex + 58)) {
      int v12 = 2;
    }
    else {
      int v12 = 1;
    }
    CFIndex v13 = CFArrayGetCount(ValueAtIndex[5]);
    if (v13 >= 1)
    {
      CFIndex v14 = v13;
      for (CFIndex j = 0; j != v14; ++j)
      {
        CFSetRef v16 = (const __CFSet *)CFArrayGetValueAtIndex(ValueAtIndex[5], j);
        if (!*((_DWORD *)v16 + 19))
        {
          int v17 = *((_DWORD *)v16 + 18);
          BOOL v18 = v17 == 1 || v17 == v12;
          if (v18 && *((_DWORD *)v16 + 17) == 2)
          {
            uint64_t context = 0;
            CFSetRef v68 = v16;
            videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
          }
        }
      }
    }
    if (videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex)|| *((unsigned char *)ValueAtIndex + 58))
    {
      goto LABEL_118;
    }
    if (*((int *)ValueAtIndex + 21) >= 1)
    {
      CFIndex v19 = CFArrayGetCount(ValueAtIndex[5]);
      if (v19 >= 1)
      {
        CFIndex v20 = v19;
        for (CFIndex k = 0; k != v20; ++k)
        {
          CFSetRef v22 = (const __CFSet *)CFArrayGetValueAtIndex(ValueAtIndex[5], k);
          if (!*((_DWORD *)v22 + 19) && *((_DWORD *)v22 + 18) == 2 && *((_DWORD *)v22 + 17) == 2)
          {
            uint64_t context = 0;
            CFSetRef v68 = v22;
            videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
          }
        }
      }
    }
    if (videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex))goto LABEL_118; {
    CFIndex v23 = CFArrayGetCount(ValueAtIndex[5]);
    }
    if (v23 >= 1)
    {
      uint64_t v24 = v23;
      int v25 = 0;
      CFSetRef v26 = 0;
      uint64_t v27 = 0;
      do
      {
        int v28 = (CFArrayRef *)CFArrayGetValueAtIndex(ValueAtIndex[5], v24 - 1);
        uint64_t v29 = v28;
        int v30 = *((_DWORD *)v28 + 19);
        if (v27)
        {
          if (!v30 && *((_DWORD *)v28 + 18) == 2)
          {
            int v31 = *((_DWORD *)v28 + 17);
            if (v31 == 2)
            {
              uint64_t context = 0;
              CFSetRef v68 = (CFSetRef)v28;
              videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
            }
            else if (v31 == 1)
            {
              ++v25;
            }
          }
        }
        else if (v30 || *((_DWORD *)v28 + 18) != 2)
        {
          uint64_t v27 = 0;
        }
        else
        {
          int v64 = v25 + 1;
          if (!v26) {
            CFSetRef v26 = (const __CFSet *)v28;
          }
          CFIndex v32 = CFArrayGetCount(v28[4]);
          if (v32 < 1)
          {
            uint64_t v27 = v29;
          }
          else
          {
            CFIndex v33 = v32;
            CFSetRef theSet = v26;
            CFIndex v34 = 0;
            while (*((_DWORD *)CFArrayGetValueAtIndex(v29[4], v34) + 19))
            {
              if (v33 == ++v34)
              {
                uint64_t v27 = v29;
                goto LABEL_62;
              }
            }
            uint64_t v27 = 0;
LABEL_62:
            CFSetRef v26 = theSet;
          }
          int v25 = v64;
        }
        BOOL v35 = v24-- <= 1;
      }
      while (!v35);
      int v65 = v25;
      theSetCGFloat a = v26;
      if (v27)
      {
        CFIndex v36 = CFArrayGetCount(ValueAtIndex[5]);
        if (v36 >= 1)
        {
          uint64_t v37 = v36;
          do
          {
            uint64_t v38 = (CFArrayRef *)CFArrayGetValueAtIndex(ValueAtIndex[5], v37 - 1);
            if (v38 == v27) {
              break;
            }
            CFAllocatorRef v39 = v38;
            if (!*((_DWORD *)v38 + 19) && *((_DWORD *)v38 + 18) == 2 && *((_DWORD *)v38 + 17) == 2)
            {
              CFIndex v40 = CFArrayGetCount(v38[4]);
              if (v40 >= 1)
              {
                CFIndex v41 = v40;
                CFIndex v42 = 0;
                while (1)
                {
                  int v43 = CFArrayGetValueAtIndex(v39[4], v42);
                  if (!*((_DWORD *)v43 + 19) && CFArrayGetCount(*((CFArrayRef *)v43 + 3)) == 1) {
                    break;
                  }
                  if (v41 == ++v42) {
                    goto LABEL_78;
                  }
                }
                uint64_t context = 0;
                CFSetRef v68 = (CFSetRef)v39;
                videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
              }
            }
LABEL_78:
            BOOL v35 = v37-- <= 1;
          }
          while (!v35);
        }
      }
      uint64_t v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      CFIndex v5 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
      if (v65 == 1 && !*((_DWORD *)ValueAtIndex + 21))
      {
        uint64_t context = 1;
        CFSetRef v68 = theSeta;
        videoMentorDependencyStateExecuteAction((const void **)a1, (int *)&context);
      }
    }
    if (videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex))goto LABEL_118; {
    if (*((unsigned char *)ValueAtIndex + 57))
    }
      goto LABEL_117;
    CFIndex v44 = CFArrayGetCount(ValueAtIndex[5]);
    CFSetRef MutableCopy = 0;
    while (v44 >= 1)
    {
      CFIndex v46 = v44 + 1;
      while (1)
      {
        CFIndex v66 = v46 - 2;
        uint64_t v47 = CFArrayGetValueAtIndex(ValueAtIndex[5], v46 - 2);
        if (!*((_DWORD *)v47 + 19))
        {
          uint64_t v48 = v47;
          if (*((_DWORD *)v47 + 18) != 1) {
            break;
          }
        }
        if ((unint64_t)--v46 <= 1) {
          goto LABEL_112;
        }
      }
      CFSetRef theSetb = MutableCopy;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 0, v4);
      CFMutableSetRef v50 = CFSetCreateMutable(v3, 0, v5);
      CFIndex v51 = v50;
      if (Mutable) {
        BOOL v52 = v50 == 0;
      }
      else {
        BOOL v52 = 1;
      }
      if (!v52)
      {
        CFArrayAppendValue(Mutable, v48);
        if (CFArrayGetCount(Mutable) < 1) {
          goto LABEL_105;
        }
        do
        {
          CFTypeRef v53 = (CFArrayRef *)CFArrayGetValueAtIndex(Mutable, 0);
          CFArrayRemoveValueAtIndex(Mutable, 0);
          CFIndex v54 = CFArrayGetCount(v53[4]);
          if (v54 >= 1)
          {
            CFIndex v55 = v54;
            for (CFIndex m = 0; m != v55; ++m)
            {
              CFIndex v57 = CFArrayGetValueAtIndex(v53[4], m);
              if (!v57[19])
              {
                CFIndex v58 = v57;
                if (!CFSetContainsValue(v51, v57))
                {
                  CFSetSetValue(v51, v58);
                  CFArrayAppendValue(Mutable, v58);
                }
              }
            }
          }
        }
        while (CFArrayGetCount(Mutable) >= 1);
      }
      if (Mutable) {
LABEL_105:
      }
        CFRelease(Mutable);
      CFSetRef MutableCopy = theSetb;
      if (theSetb)
      {
        CFSetRef Copy = CFSetCreateCopy(v3, theSetb);
        uint64_t context = (uint64_t)theSetb;
        CFSetRef v68 = v51;
        CFSetApplyFunction(Copy, (CFSetApplierFunction)videoMentorRemoveFromSetIfNotInIntersection, &context);
        CFRelease(Copy);
      }
      else
      {
        CFSetRef MutableCopy = CFSetCreateMutableCopy(v3, 0, v51);
      }
      uint64_t v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      CFIndex v44 = v66;
      if (v51) {
        CFRelease(v51);
      }
      CFIndex v60 = CFSetGetCount(MutableCopy);
      CFIndex v5 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
      if (!v60) {
        break;
      }
    }
LABEL_112:
    if (MutableCopy)
    {
      if (CFSetGetCount(MutableCopy) >= 1) {
        CFSetApplyFunction(MutableCopy, (CFSetApplierFunction)videoMentorDependencyStateSelectNodeApplier, (void *)a1);
      }
      CFRelease(MutableCopy);
    }
    *((unsigned char *)ValueAtIndex + 57) = 1;
LABEL_117:
    videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup((const void **)a1, (uint64_t)ValueAtIndex);
LABEL_118:
    CFRelease(ValueAtIndex);
    CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
  }
  while (result > 0);
  return result;
}

uint64_t FigSampleBufferConsumerGetPendingSampleBufferCount(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 48);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t FigSampleBufferConsumerSetAttachmentOnPendingSampleBuffersInPTSRange(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v13 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v12 = v13;
  if (v13) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *, long long *))(v14 + 56);
  if (v15)
  {
    long long v18 = *a4;
    uint64_t v19 = *((void *)a4 + 2);
    long long v16 = *a5;
    uint64_t v17 = *((void *)a5 + 2);
    return v15(a1, a2, a3, &v18, &v16);
  }
  return result;
}

BOOL FigSampleCursorImplementsGetMPEG2FrameType()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v0) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(v1 + 72) != 0;
}

uint64_t FigSampleCursorGetMPEG2FrameType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFIndex v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 72);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t videoMentorSyncFrameIsOpenGOP(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4) {
    v4(FigBaseObject, @"SampleDependencyAttributes", *MEMORY[0x1E4F1CF80], &cf);
  }
  FigCFDictionaryGetIntIfPresent();
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t videoMentorRefreshGroupCreate(const __CFAllocator *a1, long long *a2, uint64_t *a3)
{
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v7 + 40) = Mutable;
    if (Mutable
      && (CFMutableArrayRef v9 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kVideoMentorActionCallbacks),
          (*(void *)(v7 + 48) = v9) != 0))
    {
      long long v10 = *a2;
      *(void *)(v7 + 32) = *((void *)a2 + 2);
      *(_OWORD *)(v7 + 16) = v10;
      *a3 = v7;
      return 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v7);
      return v12;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void videoMentorRefreshGroupAddNode(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 56) = CFRetain((CFTypeRef)a1);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), (const void *)a2);
  int v4 = *(_DWORD *)(a2 + 76);
  if (v4 == 2)
  {
    ++*(_DWORD *)(a1 + 84);
  }
  else if (!v4)
  {
    ++*(_DWORD *)(a1 + 80);
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  CFIndex v6 = *(const void **)(a2 + 16);
  if (Count == 1)
  {
    uint64_t v7 = *(const void **)(a2 + 16);
    if (!v6) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v9)
  {
    uint64_t v10 = 0;
    if (v8) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  if (!v8) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_13:
  if (v10 == v11 && (uint64_t v17 = *(uint64_t (**)(const void *, uint64_t))(v10 + 32)) != 0 && v17(v6, v8) == -1) {
    CFIndex v6 = *(const void **)(a2 + 16);
  }
  else {
    CFIndex v6 = 0;
  }
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v14)
  {
    uint64_t v15 = 0;
    if (v13) {
      goto LABEL_17;
    }
LABEL_22:
    uint64_t v16 = 0;
    goto LABEL_23;
  }
  uint64_t v15 = v14;
  if (!v13) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_23:
  if (v15 == v16 && (CFIndex v20 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 32)) != 0 && v20(v12, v13) == 1)
  {
    uint64_t v7 = *(const void **)(a2 + 16);
    if (!v6) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (!v6) {
      goto LABEL_27;
    }
  }
LABEL_25:
  long long v18 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = v6;
  CFRetain(v6);
  if (v18) {
    CFRelease(v18);
  }
LABEL_27:
  if (v7)
  {
    uint64_t v19 = *(const void **)(a1 + 72);
    *(void *)(a1 + 72) = v7;
    CFRetain(v7);
    if (v19)
    {
      CFRelease(v19);
    }
  }
}

void *videoMentorActionArrayRetain(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 16, 0);
  int v4 = v3;
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
    v3[1] = CFRetain(*(CFTypeRef *)(a2 + 8));
  }
  return v4;
}

void videoMentorActionArrayRelease(const __CFAllocator *a1, CFTypeRef *a2)
{
  CFRelease(a2[1]);

  CFAllocatorDeallocate(a1, a2);
}

__CFString *videoMentorActionArrayCopyDescription(int *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = Mutable;
  int v4 = "drop";
  CFIndex v5 = "select";
  int v6 = *a1;
  uint64_t v7 = "??";
  if (*a1 == 2) {
    uint64_t v7 = "reclassify";
  }
  if (v6 != 1) {
    CFIndex v5 = v7;
  }
  if (v6) {
    int v4 = v5;
  }
  CFStringAppendFormat(Mutable, 0, @"VideoMentorAction: %p %s node %@\n", a1, v4, *((void *)a1 + 1));
  return v3;
}

uint64_t videoMentorCursorIsInPlayRange(const void *a1, uint64_t a2, CMTime *a3, unsigned char *a4)
{
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v13.start.CMTime value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v13.start.CMTimeEpoch epoch = v7;
  *(_OWORD *)&v13.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  *a4 = 0;
  uint64_t CursorPTSRange = videoMentorGetCursorPTSRange(a1, &v13);
  if (!CursorPTSRange)
  {
    *(_OWORD *)&v10.start.CMTime value = *(_OWORD *)&v13.start.value;
    v10.start.CMTimeEpoch epoch = v13.start.epoch;
    CMTime time2 = *a3;
    if (CMTimeCompare(&v10.start, &time2) < 0)
    {
      CMTimeRange v10 = v13;
      CMTimeRangeGetEnd(&v11, &v10);
      *(_OWORD *)&v10.start.CMTime value = *(_OWORD *)a2;
      v10.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
      if (CMTimeCompare(&v10.start, &v11) < 0) {
        *a4 = 1;
      }
    }
  }
  return CursorPTSRange;
}

void videoMentorDependencyStateCloseNodesWithUnknownDependents(uint64_t a1, __CFArray *a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFIndex CountOfNodesWithUnknownDependentsAtLevel = videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(a1, i);
      if (CountOfNodesWithUnknownDependentsAtLevel >= 1)
      {
        CFIndex v8 = CountOfNodesWithUnknownDependentsAtLevel;
        for (CFIndex j = 0; j != v8; ++j)
        {
          CFArrayRef NodeWithUnknownDependentsAtLevel = videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(a1, i, j);
          *((unsigned char *)NodeWithUnknownDependentsAtLevel + 64) = 0;
          CFArrayAppendValue(a2, NodeWithUnknownDependentsAtLevel);
        }
      }
    }
  }
  CMTime v11 = *(__CFArray **)(a1 + 64);

  CFArrayRemoveAllValues(v11);
}

CFIndex videoMentorDependencyStateGetCountOfNodesWithUnknownDependentsAtLevel(uint64_t a1, CFIndex a2)
{
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), a2);
  if (ValueAtIndex == (const __CFArray *)*MEMORY[0x1E4F1D260]) {
    return 0;
  }
  CFArrayRef v3 = ValueAtIndex;
  CFTypeID v4 = CFGetTypeID(ValueAtIndex);
  if (v4 != CFArrayGetTypeID()) {
    return 1;
  }

  return CFArrayGetCount(v3);
}

CFArrayRef videoMentorDependencyStateGetNodeWithUnknownDependentsAtLevel(uint64_t a1, CFIndex a2, CFIndex a3)
{
  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), a2);
  CFArrayRef v5 = ValueAtIndex;
  if (!a3)
  {
    CFTypeID v6 = CFGetTypeID(ValueAtIndex);
    if (v6 != CFArrayGetTypeID()) {
      return v5;
    }
    a3 = 0;
  }

  return (const __CFArray *)CFArrayGetValueAtIndex(v5, a3);
}

void videoMentorFrameNodeAddDependentNode(CFMutableArrayRef *a1, CFMutableArrayRef *a2)
{
  if (a1 != a2)
  {
    CFArrayAppendValue(a1[3], a2);
    CFArrayRef v5 = a2[4];
    CFArrayAppendValue(v5, a1);
  }
}

void videoMentorDependencyStateExecuteAction(const void **a1, int *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  int v4 = *a2;
  if (*a2 == 2)
  {
    if ((*(_DWORD *)(v3 + 76) - 1) >= 2 && *(_DWORD *)(v3 + 68) != 2)
    {
      *(_DWORD *)(v3 + 68) = 0;
      videoMentorFrameNodeDetermineIfIsLeaf((const void *)v3, *(void *)(v3 + 56));
      if (*(_DWORD *)(v3 + 68) == 2)
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 32));
        if (Count >= 1)
        {
          CFIndex v13 = Count;
          for (CFIndex i = 0; i != v13; ++i)
          {
            CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 32), i);
            if (!*((_DWORD *)ValueAtIndex + 19))
            {
              uint64_t v16 = ValueAtIndex;
              uint64_t v17 = ValueAtIndex[7];
              if (v17)
              {
                CFIndex v33 = ValueAtIndex;
                uint64_t v32 = 2;
                if (!*(unsigned char *)(v17 + 56))
                {
                  CFArrayAppendValue(*(CFMutableArrayRef *)(v17 + 48), &v32);
                  videoMentorAddRefreshGroupToProcess((uint64_t)a1, v16[7]);
                }
              }
            }
          }
        }
        videoMentorAddRefreshGroupToProcess((uint64_t)a1, *(void *)(v3 + 56));
      }
      else if (CFArrayGetCount(*(CFArrayRef *)(v3 + 24)) == 1)
      {
        uint64_t v31 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 24), 0) + 7);
        if (v31)
        {
          videoMentorAddRefreshGroupToProcess((uint64_t)a1, v31);
        }
      }
    }
  }
  else if (v4 == 1)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFArrayRef v19 = Mutable;
      CFArrayAppendValue(Mutable, (const void *)v3);
      if (CFArrayGetCount(v19) >= 1)
      {
        do
        {
          CFIndex v20 = CFArrayGetValueAtIndex(v19, 0);
          CFArrayRemoveValueAtIndex(v19, 0);
          if (*((_DWORD *)v20 + 19) != 2 && v20 != *a1)
          {
            *((_DWORD *)v20 + 19) = 2;
            uint64_t v21 = (int32x2_t *)*((void *)v20 + 7);
            if (v21) {
              v21[10] = vadd_s32(v21[10], (int32x2_t)0x1FFFFFFFFLL);
            }
            CFIndex v22 = CFArrayGetCount(*((CFArrayRef *)v20 + 4));
            if (v22 >= 1)
            {
              CFIndex v23 = v22;
              for (CFIndex j = 0; j != v23; ++j)
              {
                int v25 = CFArrayGetValueAtIndex(*((CFArrayRef *)v20 + 4), j);
                if (v25[19] != 2) {
                  CFArrayAppendValue(v19, v25);
                }
              }
            }
            CFIndex v26 = CFArrayGetCount(*((CFArrayRef *)v20 + 3));
            if (v26 >= 1)
            {
              CFIndex v27 = v26;
              for (CFIndex k = 0; k != v27; ++k)
              {
                uint64_t v29 = *((void *)CFArrayGetValueAtIndex(*((CFArrayRef *)v20 + 3), k) + 7);
                if (v29) {
                  videoMentorAddRefreshGroupToProcess((uint64_t)a1, v29);
                }
              }
            }
            uint64_t v30 = *((void *)v20 + 7);
            if (v30) {
              videoMentorAddRefreshGroupToProcess((uint64_t)a1, v30);
            }
          }
        }
        while (CFArrayGetCount(v19) > 0);
      }
      CFRelease(v19);
    }
  }
  else if (!v4 && *(_DWORD *)(v3 + 76) != 1)
  {
    *(_DWORD *)(v3 + 76) = 1;
    uint64_t v5 = *(void *)(v3 + 56);
    if (v5)
    {
      --*(_DWORD *)(v5 + 80);
      *(unsigned char *)(v5 + 57) = 0;
    }
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(v3 + 32));
    CFIndex v7 = CFArrayGetCount(Copy);
    if (v7 >= 1)
    {
      CFIndex v8 = v7;
      for (CFIndex m = 0; m != v8; ++m)
      {
        CMTimeRange v10 = (void *)CFArrayGetValueAtIndex(Copy, m);
        videoMentorFrameNodeRemoveDependentNode((CFMutableArrayRef *)v10, (const __CFArray **)v3, 1);
        if (!*((_DWORD *)v10 + 19))
        {
          uint64_t v11 = *((void *)v10 + 7);
          if (v11)
          {
            CFIndex v33 = v10;
            uint64_t v32 = 2;
            if (!*(unsigned char *)(v11 + 56))
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 48), &v32);
              videoMentorAddRefreshGroupToProcess((uint64_t)a1, *((void *)v10 + 7));
            }
          }
        }
      }
    }
    if (Copy) {
      CFRelease(Copy);
    }
  }
}

void videoMentorFrameNodeRemoveDependentNode(CFMutableArrayRef *a1, const __CFArray **a2, int a3)
{
  CFArrayRef v6 = a1[3];
  v12.length = CFArrayGetCount(v6);
  v12.locatioCFIndex n = 0;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v12, a2);
  CFArrayRemoveValueAtIndex(a1[3], FirstIndexOfValue);
  CFArrayRef v8 = a2[4];
  v13.length = CFArrayGetCount(v8);
  v13.locatioCFIndex n = 0;
  CFIndex v9 = CFArrayGetFirstIndexOfValue(v8, v13, a1);
  CFArrayRemoveValueAtIndex(a2[4], v9);
  if (a3)
  {
    CFArrayAppendValue(a1[5], a2);
    CMTimeRange v10 = a2[6];
    CFArrayAppendValue(v10, a1);
  }
}

uint64_t videoMentorFrameNodeDetermineIfIsLeaf(const void *a1, uint64_t a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v6 = CFArrayCreateMutable(v4, 0, 0);
  CFIndex v7 = v6;
  if (Mutable) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
LABEL_30:
    uint64_t refreshed = 0;
    if (Mutable) {
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  CFArrayAppendValue(Mutable, a1);
  CFArrayAppendValue(v7, 0);
  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count < 1)
  {
    uint64_t refreshed = 0;
    goto LABEL_34;
  }
  CFIndex v10 = Count;
  unint64_t v11 = 0;
  while (1)
  {
    CFIndex v12 = v10 - 1;
    CFArrayRef ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(Mutable, v10 - 1);
    uint64_t v14 = (char *)CFArrayGetValueAtIndex(v7, v10 - 1);
    CFIndex v15 = CFArrayGetCount(ValueAtIndex[3]);
    uint64_t v16 = (char *)v15;
    if ((unint64_t)v10 > 0x2710 || v11 >> 4 > 0x270 || v15 >= 10001) {
      break;
    }
    if (!v14)
    {
      if (*((_DWORD *)ValueAtIndex + 17)) {
        goto LABEL_28;
      }
      if (*((unsigned char *)ValueAtIndex + 64))
      {
        int v21 = 1;
LABEL_26:
        *((_DWORD *)ValueAtIndex + 17) = v21;
LABEL_28:
        CFArrayRemoveValueAtIndex(Mutable, v12);
        CFArrayRemoveValueAtIndex(v7, v12);
        goto LABEL_29;
      }
    }
    if (v15 > (uint64_t)v14)
    {
      while (1)
      {
        uint64_t v17 = CFArrayGetValueAtIndex(ValueAtIndex[3], (CFIndex)v14);
        uint64_t v18 = *((void *)v17 + 7);
        if (!v18 || v18 != a2)
        {
          int v20 = 1;
LABEL_22:
          *((_DWORD *)ValueAtIndex + 17) = v20;
          goto LABEL_24;
        }
        CFArrayRef v19 = v17;
        int v20 = *((_DWORD *)v17 + 17);
        if (!v20) {
          break;
        }
        if (v20 == 1) {
          goto LABEL_22;
        }
        if (v16 == ++v14) {
          goto LABEL_25;
        }
      }
      CFArraySetValueAtIndex(v7, v12, v14);
      CFArrayAppendValue(Mutable, v19);
      CFArrayAppendValue(v7, 0);
    }
LABEL_24:
    if (v14 == v16)
    {
LABEL_25:
      int v21 = 2;
      goto LABEL_26;
    }
    if (*((_DWORD *)ValueAtIndex + 17)) {
      goto LABEL_28;
    }
LABEL_29:
    ++v11;
    CFIndex v10 = CFArrayGetCount(Mutable);
    if (v10 <= 0) {
      goto LABEL_30;
    }
  }
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t refreshed = videoMentorReportIssueWithRefreshNode((uint64_t)ValueAtIndex);
  if (Mutable) {
LABEL_34:
  }
    CFRelease(Mutable);
LABEL_35:
  if (v7) {
    CFRelease(v7);
  }
  return refreshed;
}

__n128 videoMentorRefreshGroupMarkAsProcessed(uint64_t a1)
{
  CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 48));
  *(unsigned char *)(a1 + 56) = 1;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    uint64_t v5 = 0;
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFArrayRef ValueAtIndex = (__n128 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), i);
      if (ValueAtIndex[4].n128_u32[3] == 2)
      {
        BOOL v8 = ValueAtIndex;
        CFIndex v9 = ValueAtIndex + 8;
        if (!v5
          || (CMTime time1 = v12,
              *(__n128 *)&v10.CMTime value = *v9,
              v10.CMTimeEpoch epoch = ValueAtIndex[9].n128_i64[0],
              CMTimeCompare(&time1, &v10) < 0))
        {
          __n128 result = *v9;
          CMTime v12 = *(CMTime *)v9->n128_u8;
          uint64_t v5 = v8;
        }
      }
    }
    if (v5)
    {
      __n128 result = *(__n128 *)(a1 + 16);
      v5[6].n128_u64[0] = *(void *)(a1 + 32);
      v5[5] = result;
    }
  }
  return result;
}

uint64_t videoMentorDependencyStateSelectSoloUndeterminedNodeIfNoSelectedNodesInRefreshGroup(const void **a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 58) && *(_DWORD *)(a2 + 80) == 1 && !*(_DWORD *)(a2 + 84))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 40));
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 40), v7);
        if (!ValueAtIndex[19]) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_4;
        }
      }
      v9[1] = ValueAtIndex;
      v9[0] = 1;
      videoMentorDependencyStateExecuteAction(a1, (int *)v9);
    }
  }
LABEL_4:
  if (!*(_DWORD *)(a2 + 80)) {
    videoMentorRefreshGroupMarkAsProcessed(a2);
  }
  return *(unsigned __int8 *)(a2 + 56);
}

void videoMentorDependencyStateSelectNodeApplier(uint64_t a1, const void **a2)
{
  if (*(_DWORD *)(a1 + 76) != 2)
  {
    v2[0] = 1;
    v2[1] = a1;
    videoMentorDependencyStateExecuteAction(a2, (int *)v2);
  }
}

void videoMentorRemoveFromSetIfNotInIntersection(void *value, __CFSet **a2)
{
  if (!CFSetContainsValue(a2[1], value))
  {
    CFIndex v4 = *a2;
    CFSetRemoveValue(v4, value);
  }
}

void videoMentorSavedFrameDestroy(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

void videoMentorEnqueueEditBoundaryMarker(void *a1, uint64_t a2, CMTime *a3)
{
  CMSampleBufferRef v12 = 0;
  *(_OWORD *)&sampleTimingArray.duration.CMTime value = *MEMORY[0x1E4F1FA48];
  sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  sampleTimingArray.CMTime presentationTimeStamp = *a3;
  sampleTimingArray.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v12))
  {
    uint64_t v5 = (void (*)(void, uint64_t, CMSampleBufferRef))a1[7];
    if (v5) {
      v5(a1[9], a2, v12);
    }
    CMSetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F1F250], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
    uint64_t v6 = a1[3];
    CMSampleBufferRef v7 = v12;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CMTime v10 = *(void (**)(uint64_t, CMSampleBufferRef))(v9 + 8);
    if (v10) {
      v10(v6, v7);
    }
    CFRelease(v12);
  }
}

uint64_t videoMentorSimulateSyncFrameClustersOnly(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, uint64_t a9)
{
  __int16 v52 = 0;
  CFTypeRef cf = 0;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  if (*(void *)(v18 + 64))
  {
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    int v28 = *(uint64_t (**)(uint64_t, char *, void, void, __int16 *))(v20 + 64);
    if (v28)
    {
      uint64_t v24 = v28(a1, (char *)&v52 + 1, 0, 0, &v52);
      if (!v24)
      {
        int v27 = HIBYTE(v52);
        goto LABEL_25;
      }
LABEL_37:
      FigSignalErrorAt();
      goto LABEL_38;
    }
LABEL_36:
    uint64_t v24 = 4294954514;
    goto LABEL_37;
  }
  LOBYTE(time1.CFDictionarySetValue(theDict, @"region", value) = 0;
  LOBYTE(time2.CFDictionarySetValue(theDict, @"region", value) = 0;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFIndex v23 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, void))(v22 + 72);
  if (!v23) {
    goto LABEL_36;
  }
  uint64_t v24 = v23(a1, &time1, &time2, 0);
  if (v24) {
    goto LABEL_37;
  }
  unsigned int v25 = LOBYTE(time1.value) - 66;
  if (v25 > 0xE || ((1 << v25) & 0x4081) == 0)
  {
    uint64_t v36 = FigSignalErrorAt();
    goto LABEL_51;
  }
  int v27 = LOBYTE(time1.value) == 73 && LOBYTE(time2.value) == 0;
  HIBYTE(v52) = v27;
  LOBYTE(v52) = LOBYTE(time1.value) == 66;
LABEL_25:
  if (v27)
  {
    if ((*(unsigned char *)(a9 + 16) & 1) == 0
      || (time1 = *(CMTime *)(a9 + 4), CMTime time2 = *a2, CMTimeCompare(&time1, &time2) <= 0))
    {
      *a6 = 1;
      *a8 = 1;
      *(unsigned char *)(a9 + 76) = videoMentorSyncFrameIsOpenGOP(a1);
      long long v30 = *(_OWORD *)&a2->value;
      *(void *)(a9 + 44) = a2->epoch;
      *(_OWORD *)(a9 + 28) = v30;
      if (!*a7) {
        goto LABEL_82;
      }
      *(_DWORD *)a9 = 1;
      long long v31 = *(_OWORD *)&a2->value;
      *(void *)(a9 + 68) = a2->epoch;
      *(_OWORD *)(a9 + 52) = v31;
      if (a5 < 2) {
        goto LABEL_73;
      }
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v37 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v33 + 8);
      if (!v37)
      {
        uint64_t v24 = 4294954514;
        goto LABEL_38;
      }
      uint64_t v36 = v37(a1, &cf);
      if (!v36)
      {
        CFTypeRef v38 = cf;
        uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v39) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = 0;
        }
        CFIndex v41 = *(void (**)(CFTypeRef, void, void))(v40 + 176);
        if (v41) {
          v41(v38, (a5 - 1), 0);
        }
        CFTypeRef v42 = cf;
        uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v43) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        uint64_t v45 = *(void (**)(CFTypeRef, uint64_t))(v44 + 40);
        if (v45) {
          v45(v42, a9 + 52);
        }
LABEL_73:
        if ((a4->flags & 0x1D) == 1
          && (time1 = *a4, CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], CMTimeCompare(&time1, &time2) >= 1))
        {
          CFIndex v46 = (_OWORD *)(a9 + 4);
          if (*(unsigned char *)(a9 + 16))
          {
            *(_OWORD *)&time2.CMTime value = *v46;
            CMTimeEpoch epoch = *(void *)(a9 + 20);
          }
          else
          {
            *(_OWORD *)&time2.CMTime value = *(_OWORD *)&a2->value;
            CMTimeEpoch epoch = a2->epoch;
          }
          time2.CMTimeEpoch epoch = epoch;
          CMTime v48 = *a4;
          CMTimeAdd(&time1, &time2, &v48);
          *CFIndex v46 = *(_OWORD *)&time1.value;
          *(void *)(a9 + 20) = time1.epoch;
        }
        else
        {
          CMTime time2 = *(CMTime *)(a9 + 28);
          CMTime v48 = *a3;
          CMTimeAdd(&time1, &time2, &v48);
          *(CMTime *)(a9 + 4) = time1;
        }
        goto LABEL_80;
      }
LABEL_51:
      uint64_t v24 = v36;
      goto LABEL_38;
    }
  }
  if (!*(unsigned char *)(a9 + 77))
  {
    if (*(unsigned char *)(a9 + 76))
    {
      CMTime time1 = *a2;
      CMTime time2 = *(CMTime *)(a9 + 28);
      if (CMTimeCompare(&time1, &time2) < 0) {
        goto LABEL_55;
      }
    }
    if (!*a7 || !*a8)
    {
      if ((_BYTE)v52)
      {
LABEL_55:
        uint64_t v24 = 0;
        *a6 = 0;
LABEL_57:
        *a7 = 0;
        goto LABEL_38;
      }
LABEL_56:
      uint64_t v24 = 0;
      *a6 = 1;
      goto LABEL_57;
    }
    *a6 = 1;
    *a7 = 1;
    *(_DWORD *)a9 = 1;
    long long v34 = *(_OWORD *)&a2->value;
    *(void *)(a9 + 44) = a2->epoch;
    *(_OWORD *)(a9 + 28) = v34;
    long long v35 = *(_OWORD *)&a2->value;
    *(void *)(a9 + 68) = a2->epoch;
    *(_OWORD *)(a9 + 52) = v35;
    goto LABEL_73;
  }
  if (*(_DWORD *)a9 >= a5)
  {
    uint64_t v24 = 0;
    *a6 = 0;
    *a7 = 0;
    if ((_BYTE)v52) {
      goto LABEL_38;
    }
    *a8 = 0;
    *(unsigned char *)(a9 + 76) = 0;
  }
  else
  {
    CMTime time1 = *(CMTime *)(a9 + 28);
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2) > 0
      || (time1 = *a2, CMTime time2 = *(CMTime *)(a9 + 52), CMTimeCompare(&time1, &time2) > 0))
    {
      if ((_BYTE)v52) {
        goto LABEL_55;
      }
      if (*(unsigned char *)(a9 + 76))
      {
        CMTime time1 = *a2;
        CMTime time2 = *(CMTime *)(a9 + 28);
        if (CMTimeCompare(&time1, &time2) < 0) {
          goto LABEL_55;
        }
      }
      goto LABEL_56;
    }
    *a6 = 1;
    *a7 = 1;
    ++*(_DWORD *)a9;
  }
LABEL_80:
  if (*a7)
  {
    uint64_t v24 = 0;
    *(unsigned char *)(a9 + 77) = 1;
    goto LABEL_38;
  }
LABEL_82:
  uint64_t v24 = 0;
LABEL_38:
  if (cf) {
    CFRelease(cf);
  }
  return v24;
}

uint64_t videoMentorSimulateIFramesOnly(uint64_t a1, CMTime *a2, CMTime *a3, CMTime *a4, int a5, unsigned char *a6, unsigned char *a7)
{
  __int16 v31 = 0;
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(void *)(v15 + 72))
  {
    LOBYTE(v30.CFDictionarySetValue(theDict, @"region", value) = 0;
    LOBYTE(lhs.CFDictionarySetValue(theDict, @"region", value) = 0;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    CFIndex v23 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, void))(v17 + 72);
    if (v23)
    {
      uint64_t v21 = v23(a1, &v30, &lhs, 0);
      if (!v21)
      {
        unsigned int v24 = LOBYTE(v30.value) - 66;
        if (v24 > 0xE || ((1 << v24) & 0x4081) == 0) {
          return FigSignalErrorAt();
        }
        BOOL v25 = LOBYTE(v30.value) == 73;
        if (LOBYTE(lhs.value)) {
          BOOL v25 = 0;
        }
        HIBYTE(v31) = v25;
        if (LOBYTE(v30.value) != 73) {
          goto LABEL_24;
        }
        goto LABEL_13;
      }
LABEL_26:
      FigSignalErrorAt();
      return v21;
    }
LABEL_25:
    uint64_t v21 = 4294954514;
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, char *, __int16 *, void, void))(v19 + 64);
  if (!v20) {
    goto LABEL_25;
  }
  uint64_t v21 = v20(a1, (char *)&v31 + 1, &v31, 0, 0);
  if (v21) {
    goto LABEL_26;
  }
  if (!(HIBYTE(v31) | v31))
  {
LABEL_24:
    uint64_t v21 = 0;
    *a6 = 0;
    return v21;
  }
LABEL_13:
  if ((a4->flags & 0x1D) == 1)
  {
    memset(&v30, 0, sizeof(v30));
    if (a5 < 0)
    {
      CMTime lhs = *a4;
      *(_OWORD *)&v28.CMTime value = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
    }
    else
    {
      CMTime lhs = *a2;
      *(_OWORD *)&v28.CMTime value = *(_OWORD *)&a4->value;
      CMTimeEpoch epoch = a4->epoch;
    }
    v28.CMTimeEpoch epoch = epoch;
    CMTimeSubtract(&v30, &lhs, &v28);
    CMTime lhs = v30;
    CMTime v28 = *a3;
    if (CMTimeCompare(&lhs, &v28) < 0) {
      *a6 = 0;
    }
  }
  if (!*a6) {
    return 0;
  }
  if (HIBYTE(v31)) {
    *a7 = 1;
  }
  uint64_t v21 = 0;
  long long v27 = *(_OWORD *)&a2->value;
  a4->CMTimeEpoch epoch = a2->epoch;
  *(_OWORD *)&a4->CMTime value = v27;
  return v21;
}

void videoMentorUpdateUpcomingOutputPTSRangeAnnouncement(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, CMTime *a7)
{
  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  long long v27 = *MEMORY[0x1E4F1FA10];
  uint64_t v28 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(unsigned int (**)(uint64_t, CMTime *))(v15 + 48);
  if (!v16
    || v16(a2, &v30)
    || (v30.flags & 0x1D) != 1
    || ((uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v18 = 0) : (v18 = v17),
        (uint64_t v19 = *(unsigned int (**)(uint64_t, CMTime *))(v18 + 40)) == 0
     || v19(a2, &v31)
     || (v31.flags & 0x1D) != 1))
  {
    FigSignalErrorAt();
    return;
  }
  CMTime v29 = v31;
  CMTime v26 = *a7;
  if ((v26.flags & 0x1D) == 1 && (time1 = v30, CMTime time2 = *a7, CMTimeCompare(&time1, &time2) < 0))
  {
    CMTime v29 = *a6;
    char v20 = 1;
  }
  else
  {
    if ((!FigSampleCursorImplementsGetMinimumUpcomingPresentationTime()
       || FigSampleCursorGetMinimumUpcomingPresentationTime(a2, a3, (uint64_t)&v29, (uint64_t)&v26))
      && FigSampleCursorUtilityGetMinimumUpcomingPresentationTime(a2, a3, &v29, &v26))
    {
      return;
    }
    char v20 = 0;
  }
  MEMORY[0x19970E910](a1[10]);
  uint64_t v21 = (void (*)(void, uint64_t, void, CMTime *, long long *))a1[8];
  if (v21)
  {
    if ((v31.flags & 0x1D) == 1) {
      v21(a1[9], a4, 0, &v31, &v27);
    }
    if ((v20 & 1) == 0 && (v29.flags & 0x1D) == 1) {
      ((void (*)(void, uint64_t, void, CMTime *, long long *))a1[8])(a1[9], a4, 0, &v29, &v27);
    }
  }
  MEMORY[0x19970E930](a1[10]);
  CMTime time2 = *a5;
  CMTime v23 = v31;
  CMTimeMaximum(&time1, &time2, &v23);
  *(_OWORD *)&a5->CMTime value = *(_OWORD *)&time1.value;
  CMTimeEpoch epoch = time1.epoch;
  a5->CMTimeEpoch epoch = time1.epoch;
  *(_OWORD *)&time1.CMTime value = *(_OWORD *)&a5->value;
  time1.CMTimeEpoch epoch = epoch;
  CMTime time2 = v29;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    CMTime v29 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v26 = v29;
  }
  CMTime time1 = *a6;
  CMTime time2 = v29;
  if (CMTimeCompare(&time1, &time2))
  {
    CMTime time1 = v29;
    videoMentorPostMinAndMaxUpcomingOutputPTS((uint64_t)a1, (uint64_t)&time1, MEMORY[0x1E4F1F9F8]);
    *a6 = v29;
    *a7 = v26;
  }
}

void videoMentorDependencyStateForgetObsoleteRefreshGroups(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = CFRetain(*(CFTypeRef *)(a2 + 16));
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    for (CFIndex i = 0; i < v4; ++i)
    {
      CFMutableArrayRef ValueAtIndex = (CFMutableArrayRef)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
      uint64_t v7 = *((void *)ValueAtIndex + 9);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8)
      {
        uint64_t v9 = v8;
        if (v7) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v9 = 0;
        if (v7)
        {
LABEL_5:
          uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
          goto LABEL_8;
        }
      }
      uint64_t v10 = 0;
LABEL_8:
      if (v9 == v10)
      {
        CMTime v26 = *(uint64_t (**)(CFTypeRef, uint64_t))(v9 + 32);
        if (v26)
        {
          if (v26(cf, v7) == -1) {
            continue;
          }
        }
      }
      CFIndex v11 = CFArrayGetCount(*((CFArrayRef *)ValueAtIndex + 5));
      if (v11 >= 1)
      {
        CFIndex v12 = v11;
        for (CFIndex j = 0; j != v12; ++j)
        {
          uint64_t v14 = (CFArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 5), j);
          if (CFArrayGetCount(v14[3]) >= 1)
          {
            do
            {
              uint64_t v15 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v14[3], 0);
              if (v15[7] != ValueAtIndex || *((_DWORD *)v14 + 17) == 1)
              {
                CFIndex v16 = CFArrayGetCount(v14[4]);
                if (v16 >= 1)
                {
                  CFIndex v17 = v16;
                  for (CFIndex k = 0; k != v17; ++k)
                  {
                    uint64_t v19 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v14[4], k);
                    videoMentorFrameNodeAddDependentNode(v19, v15);
                  }
                }
              }
              videoMentorFrameNodeRemoveDependentNode(v14, v15, 0);
            }
            while (CFArrayGetCount(v14[3]) > 0);
          }
          if (CFArrayGetCount(v14[5]) >= 1)
          {
            do
            {
              char v20 = CFArrayGetValueAtIndex(v14[5], 0);
              videoMentorFrameNodeRemoveDroppedDependentNode(v14, v20);
            }
            while (CFArrayGetCount(v14[5]) > 0);
          }
          if (CFArrayGetCount(v14[4]) >= 1)
          {
            do
            {
              uint64_t v21 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v14[4], 0);
              videoMentorFrameNodeRemoveDependentNode(v21, v14, 0);
            }
            while (CFArrayGetCount(v14[4]) > 0);
          }
          if (CFArrayGetCount(v14[6]) >= 1)
          {
            do
            {
              uint64_t v22 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v14[6], 0);
              videoMentorFrameNodeRemoveDroppedDependentNode(v22, v14);
            }
            while (CFArrayGetCount(v14[6]) > 0);
          }
          if (*((unsigned char *)v14 + 64))
          {
            CFIndex v23 = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
            v24.locatioCFIndex n = *((int *)v14 + 38);
            if (v23 > v24.location)
            {
              v24.length = 1;
              CFArrayReplaceValues(*(CFMutableArrayRef *)(a1 + 64), v24, (const void **)a1, 1);
            }
          }
          if (*(CFArrayRef **)(a1 + 72) == v14)
          {
            BOOL v25 = *(const void **)a1;
            *(void *)(a1 + 72) = *(void *)a1;
            if (v25) {
              CFRetain(v25);
            }
            CFRelease(v14);
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), v14);
        }
      }
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)ValueAtIndex + 5));
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)ValueAtIndex + 6));
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), i--);
      --v4;
    }
  }

  CFRelease(cf);
}

__n128 videoMentorThrottlingStateFree(uint64_t a1)
{
  videoMentorThrottlingStateClearSelectedCursors(a1);
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 80) = 0;
    free(v2);
  }
  *(void *)(a1 + 88) = 0;
  if (*(void *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(void *)a1 = 0;
  }
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E4F1F9F8];
  uint64_t v5 = *(void *)(v3 + 16);
  *(void *)(a1 + 48) = v5;
  *(__n128 *)(a1 + 56) = result;
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 152) = 0;
  return result;
}

void videoMentorPostMinAndMaxUpcomingOutputPTS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
    FigCFDictionarySetCMTime();
  }
  else
  {
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1)
  {
    uint64_t v8 = *v7;
    FigCFDictionarySetCMTime();
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1F338], v8);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFIndex v12 = *(void (**)(uint64_t, void, __CFDictionary *, void))(v11 + 64);
  if (v12) {
    v12(v9, *MEMORY[0x1E4F1F350], Mutable, 0);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

BOOL FigSampleCursorImplementsGetMinimumUpcomingPresentationTime()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v0) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(v1 + 208) != 0;
}

uint64_t FigSampleCursorGetMinimumUpcomingPresentationTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 208);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

void videoMentorFrameNodeRemoveDroppedDependentNode(CFMutableArrayRef *a1, void *a2)
{
  CFArrayRef v4 = a1[5];
  v10.length = CFArrayGetCount(v4);
  v10.locatioCFIndex n = 0;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v10, a2);
  CFArrayRemoveValueAtIndex(a1[5], FirstIndexOfValue);
  CFArrayRef v6 = (const __CFArray *)a2[6];
  v11.length = CFArrayGetCount(v6);
  v11.locatioCFIndex n = 0;
  CFIndex v7 = CFArrayGetFirstIndexOfValue(v6, v11, a1);
  uint64_t v8 = (__CFArray *)a2[6];

  CFArrayRemoveValueAtIndex(v8, v7);
}

void videoMentorThrottlingStateClearSelectedCursors(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v1; ++i)
      {
        CFArrayRef v6 = *(const void **)(v3 + v4);
        if (v6)
        {
          CFRelease(v6);
          uint64_t v3 = *(void *)(a1 + 80);
          unint64_t v1 = *(void *)(a1 + 88);
          *(void *)(v3 + v4) = 0;
        }
        v4 += 32;
      }
    }
  }
}

__n128 videoMentorThrottlingStateStartNewOrder(uint64_t a1, long long *a2, uint64_t a3, __n128 *a4, uint64_t a5)
{
  videoMentorThrottlingStateClearSelectedCursors(a1);
  free(*(void **)(a1 + 80));
  *(void *)(a1 + 88) = 1;
  CFRange v10 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040B07D1DCCuLL);
  *(void *)(a1 + 80) = v10;
  if (!v10) {
    *(void *)(a1 + 88) = 0;
  }
  if (*(void *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(void *)a1 = 0;
  }
  if (a5)
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFRange v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    if (v13) {
      v13(a5, a1);
    }
  }
  uint64_t v14 = MEMORY[0x1E4F1F9F8];
  long long v15 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E4F1F9F8];
  uint64_t v16 = *(void *)(v14 + 16);
  *(void *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 56) = v15;
  *(void *)(a1 + 72) = v16;
  *(unsigned char *)(a1 + 152) = 0;
  long long v17 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v17;
  uint64_t v18 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a3;
  *(void *)(a1 + 120) = v18;
  unint64_t v19 = a4[1].n128_u64[0];
  __n128 result = *a4;
  *(__n128 *)(a1 + 128) = *a4;
  *(void *)(a1 + 144) = v19;
  return result;
}

void videoMentorThrottlingStateHandleDiscontinuity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  CFIndex v54 = 0;
  CFTypeRef v55 = 0;
  *(_OWORD *)&v53.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v53.CMTimeEpoch epoch = v8;
  *(_OWORD *)&v52.CMTimeValue value = *(_OWORD *)&v53.value;
  v52.CMTimeEpoch epoch = v8;
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  long long v44 = *(_OWORD *)&v53.value;
  *(_OWORD *)&v51.CMTimeValue value = *(_OWORD *)&v53.value;
  v51.CMTimeEpoch epoch = v8;
  uint64_t v50 = 0;
  uint64_t v9 = *(const void **)a1;
  if (v9)
  {
    CFRelease(v9);
    *(void *)a1 = 0;
  }
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
    time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    time2.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    if (CMTimeCompare(&time1.start, &time2.start) >= 1)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v11 = v10 ? v10 : 0;
      uint64_t v12 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v11 + 8);
      if (v12 && !v12(a3, &v55))
      {
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v14 = v13 ? v13 : 0;
        long long v15 = *(unsigned int (**)(uint64_t, const void **))(v14 + 8);
        if (v15)
        {
          if (!v15(a3, &v54))
          {
            while (1)
            {
              CFTypeRef v16 = v55;
              uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v17) {
                uint64_t v18 = v17;
              }
              else {
                uint64_t v18 = 0;
              }
              unint64_t v19 = *(unsigned int (**)(CFTypeRef, CMTime *))(v18 + 40);
              if (!v19 || v19(v16, &v52)) {
                break;
              }
              if (v54)
              {
                time1.CMTime start = v52;
                time2.CMTime start = v53;
                if ((CMTimeCompare(&time1.start, &time2.start) & 0x80000000) == 0) {
                  goto LABEL_30;
                }
                if (v54)
                {
                  CFRelease(v54);
                  CFIndex v54 = 0;
                }
              }
              CFTypeRef v20 = v55;
              uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v21) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = 0;
              }
              CFIndex v23 = *(unsigned int (**)(CFTypeRef, const void **))(v22 + 8);
              if (!v23 || v23(v20, &v54)) {
                break;
              }
              CMTime v53 = v52;
LABEL_30:
              uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v24) {
                uint64_t v25 = v24;
              }
              else {
                uint64_t v25 = 0;
              }
              if (!*(void *)(v25 + 80)) {
                goto LABEL_49;
              }
              CFTypeRef v26 = v55;
              uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v27)
              {
                uint64_t v28 = v27;
                if (!a3) {
                  goto LABEL_38;
                }
              }
              else
              {
                uint64_t v28 = 0;
                if (!a3)
                {
LABEL_38:
                  uint64_t v29 = 0;
                  goto LABEL_39;
                }
              }
              uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_39:
              if (v28 != v29
                || (uint64_t v33 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t))(v28 + 80)) == 0
                || !v33(v26, a3, 1))
              {
                CFTypeRef v30 = v55;
                uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v31) {
                  uint64_t v32 = v31;
                }
                else {
                  uint64_t v32 = 0;
                }
                long long v34 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t *))(v32 + 168);
                if (!v34 || v34(v30, 1, &v50)) {
                  break;
                }
                if (v50 == 1) {
                  continue;
                }
              }
LABEL_49:
              long long v42 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
              long long v43 = *MEMORY[0x1E4F1FA20];
              long long v41 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
              do
              {
                *(_OWORD *)&time1.start.CMTimeValue value = v43;
                *(_OWORD *)&time1.start.CMTimeEpoch epoch = v42;
                *(_OWORD *)&time1.duration.CMTimeScale timescale = v41;
                if (videoMentorGetCursorPTSRange(v54, &time1)) {
                  break;
                }
                CMTimeRange time2 = time1;
                CMTimeRangeGetEnd(&v48, &time2);
                *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)(a1 + 104);
                time2.start.CMTimeEpoch epoch = *(void *)(a1 + 120);
                if (CMTimeCompare(&time2.start, &v48) < 0) {
                  break;
                }
                long long v35 = v54;
                uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v37 = v36 ? v36 : 0;
                CFTypeRef v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t *))(v37 + 176);
                if (!v38) {
                  break;
                }
              }
              while (!v38(v35, 1, &v50) && v50 == 1);
              *(void *)a1 = v54;
              CFIndex v54 = 0;
              time1.CMTime start = v53;
              *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)a4;
              time2.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
              if (CMTimeCompare(&time1.start, &time2.start) < 0) {
                CMTime v53 = *(CMTime *)a4;
              }
              *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)(a1 + 8);
              time2.start.CMTimeEpoch epoch = *(void *)(a1 + 24);
              CMTime rhs = v53;
              CMTimeSubtract(&time1.start, &time2.start, &rhs);
              CMTimeValue value = time1.start.value;
              CMTimeScale timescale = time1.start.timescale;
              if ((time1.start.flags & 0x1D) == 1)
              {
                time1.start.CMTimeValue value = value;
                time1.start.CMTimeScale timescale = timescale;
                double Seconds = CMTimeGetSeconds(&time1.start);
                *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
                time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
                double v40 = Seconds / CMTimeGetSeconds(&time1.start);
                if (v40 < 2147483650.0)
                {
                  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
                  time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
                  CMTimeMultiply(&v45, &time1.start, (int)v40);
                  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)(a1 + 8);
                  time1.start.CMTimeEpoch epoch = *(void *)(a1 + 24);
                  CMTimeSubtract(&v51, &time1.start, &v45);
                }
              }
              break;
            }
          }
        }
      }
    }
  }
  *(CMTime *)(a1 + 8) = v51;
  *(_OWORD *)(a1 + 32) = v44;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 152) = 0;
  videoMentorThrottlingStateClearSelectedCursors(a1);
  if (v54)
  {
    CFRelease(v54);
    CFIndex v54 = 0;
  }
  if (v55) {
    CFRelease(v55);
  }
}

void videoMentorThrottleDroppableFrames(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&v74.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v74.CMTimeEpoch epoch = v8;
  v72.CMTimeEpoch epoch = v8;
  CFTypeRef cf = 0;
  long long v67 = *(_OWORD *)&v74.value;
  *(_OWORD *)&v72.CMTimeValue value = *(_OWORD *)&v74.value;
  uint64_t v71 = 0;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(unsigned int (**)(uint64_t, CMTime *))(v10 + 40);
  if (!v11 || v11(a2, &v72))
  {
LABEL_116:
    if (cf) {
      CFRelease(cf);
    }
    return;
  }
  uint64_t v12 = (_OWORD *)(a1 + 32);
  if ((*(_DWORD *)(a1 + 44) & 0x1D) != 1
    || (CMTime time1 = v72,
        *(_OWORD *)&time2.CMTimeValue value = *v12,
        time2.CMTimeEpoch epoch = *(void *)(a1 + 48),
        CMTimeCompare(&time1, &time2) >= 1))
  {
    if (!*(unsigned char *)(a1 + 152))
    {
      if (!*(void *)a1)
      {
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v16 = v15 ? v15 : 0;
        int v65 = *(unsigned int (**)(uint64_t, uint64_t))(v16 + 8);
        if (!v65 || v65(a2, a1)) {
          goto LABEL_116;
        }
      }
      if ((*(_DWORD *)(a1 + 44) & 0x1D) != 1)
      {
        if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1)
        {
          memset(&time1, 0, sizeof(time1));
          Float64 v13 = *(double *)(a1 + 96);
          CMTime time2 = *a3;
          CMTimeMultiplyByFloat64(&time1, &time2, v13);
          CMTime lhs = *(CMTime *)(a1 + 8);
          CMTime rhs = time1;
          CMTimeAdd(&time2, &lhs, &rhs);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)&time2.value;
          CMTimeEpoch epoch = time2.epoch;
        }
        else
        {
          *(_OWORD *)(a1 + 56) = *(_OWORD *)&v72.value;
          CMTimeEpoch epoch = v72.epoch;
        }
        *(void *)(a1 + 72) = epoch;
      }
      uint64_t v17 = (_OWORD *)(a1 + 56);
      uint64_t v18 = (_OWORD *)(a1 + 128);
      CMTime time1 = *(CMTime *)(a1 + 56);
      CMTime time2 = *(CMTime *)(a1 + 128);
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
LABEL_18:
        *(_OWORD *)&time1.CMTimeValue value = *v17;
        time1.CMTimeEpoch epoch = *(void *)(a1 + 72);
        *(_OWORD *)&time2.CMTimeValue value = *v18;
        time2.CMTimeEpoch epoch = *(void *)(a1 + 144);
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          memset(&time1, 0, sizeof(time1));
          *(_OWORD *)&time2.CMTimeValue value = *v17;
          time2.CMTimeEpoch epoch = *(void *)(a1 + 72);
          *(_OWORD *)&lhs.CMTimeValue value = *v18;
          lhs.CMTimeEpoch epoch = *(void *)(a1 + 144);
          CMTimeSubtract(&time1, &time2, &lhs);
          CMTime time2 = time1;
          double Seconds = CMTimeGetSeconds(&time2);
          CMTime time2 = *a3;
          *(double *)(a1 + 96) = Seconds / CMTimeGetSeconds(&time2);
          *uint64_t v12 = *v17;
          *(void *)(a1 + 48) = *(void *)(a1 + 72);
          while (1)
          {
            uint64_t v20 = *(void *)a1;
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v22 = v21 ? v21 : 0;
            CFIndex v23 = *(unsigned int (**)(uint64_t, CMTime *))(v22 + 40);
            if (!v23) {
              break;
            }
            if (v23(v20, &v74)) {
              break;
            }
            CMTime time2 = v74;
            *(_OWORD *)&lhs.CMTimeValue value = *v18;
            lhs.CMTimeEpoch epoch = *(void *)(a1 + 144);
            if ((CMTimeCompare(&time2, &lhs) & 0x80000000) == 0) {
              break;
            }
            if (!videoMentorIsDroppableFrame(*(void *)a1))
            {
              uint64_t v24 = *(void *)a1;
              uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v25) {
                uint64_t v26 = v25;
              }
              else {
                uint64_t v26 = 0;
              }
              uint64_t v27 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v26 + 8);
              if (!v27 || v27(v24, &cf)) {
                goto LABEL_116;
              }
              if (videoMentorPushCursorIntoSelectedCursors(a1, cf) < 0) {
                goto LABEL_115;
              }
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
            }
            uint64_t v28 = *(void *)a1;
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v29) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = 0;
            }
            uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v30 + 176);
            if (!v31 || v31(v28, 1, &v71) || v71 != 1) {
              goto LABEL_116;
            }
          }
        }
        goto LABEL_116;
      }
      int v66 = 0;
      unint64_t v32 = -1;
      int IsDroppableFrame = 1;
      while (1)
      {
        uint64_t v34 = *(void *)a1;
        uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v35) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v37 = *(unsigned int (**)(uint64_t, CMTime *))(v36 + 40);
        if (!v37 || v37(v34, &v74)) {
          goto LABEL_116;
        }
        CMTime time1 = v74;
        *(_OWORD *)&time2.CMTimeValue value = *v17;
        time2.CMTimeEpoch epoch = *(void *)(a1 + 72);
        if (CMTimeCompare(&time1, &time2) > 0 || *(unsigned char *)(a1 + 152)) {
          break;
        }
        CFTypeRef v42 = cf;
        if (cf && !IsDroppableFrame)
        {
          uint64_t v43 = videoMentorPushCursorIntoSelectedCursors(a1, cf);
          if (v43 < 0)
          {
LABEL_115:
            FigSignalErrorAt();
            goto LABEL_116;
          }
          unint64_t v32 = v43;
          int v66 = 1;
          CFTypeRef v42 = cf;
        }
        if (v42)
        {
          CFRelease(v42);
          CFTypeRef cf = 0;
        }
        uint64_t v44 = *(void *)a1;
        uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v45) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = 0;
        }
        CFIndex v60 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v46 + 8);
        if (!v60 || v60(v44, &cf)) {
          goto LABEL_116;
        }
        int IsDroppableFrame = videoMentorIsDroppableFrame((uint64_t)cf);
        uint64_t v61 = *(void *)a1;
        uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v63 = v62 ? v62 : 0;
        int v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v63 + 176);
        if (!v64 || v64(v61, 1, &v71)) {
          goto LABEL_116;
        }
        if (v71 != 1) {
          *(unsigned char *)(a1 + 152) = 1;
        }
LABEL_98:
        *(_OWORD *)&time1.CMTimeValue value = *v17;
        time1.CMTimeEpoch epoch = *(void *)(a1 + 72);
        *(_OWORD *)&time2.CMTimeValue value = *v18;
        time2.CMTimeEpoch epoch = *(void *)(a1 + 144);
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
          goto LABEL_18;
        }
      }
      if (cf)
      {
        if (!IsDroppableFrame || !v66)
        {
          uint64_t v38 = videoMentorPushCursorIntoSelectedCursors(a1, cf);
          if (v38 < 0) {
            goto LABEL_115;
          }
          unint64_t v32 = v38;
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
        }
      }
      else if (!v66)
      {
        int v39 = 1;
LABEL_71:
        long long v69 = *(_OWORD *)&a3->value;
        CMTimeEpoch v70 = a3->epoch;
        CMTime v68 = *a4;
        *(_OWORD *)&time1.CMTimeValue value = v67;
        time1.CMTimeEpoch epoch = v8;
        CMTimeScale timescale = 0;
        CMTimeValue value = 0;
        CMTime lhs = *a3;
        if ((v68.flags & 0x1D) == 1)
        {
          CMTime time2 = *a3;
          CMTime rhs = *a4;
          CMTimeAdd(&lhs, &time2, &rhs);
        }
        else
        {
          CMTime v68 = *a3;
        }
        uint64_t v47 = (CMTime *)&v69;
        if (v39) {
          uint64_t v47 = &v68;
        }
        CMTime time2 = *v47;
        uint64_t v48 = *(void *)a1;
        uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v49) {
          uint64_t v50 = v49;
        }
        else {
          uint64_t v50 = 0;
        }
        CMTime v51 = *(unsigned int (**)(uint64_t, CMTime *))(v50 + 40);
        if (v51
          && !v51(v48, &time1)
          && (time1.flags & 0x1D) == 1
          && (CMTime rhs = time1, *(_OWORD *)&v77.value = *v18,
                           v77.CMTimeEpoch epoch = *(void *)(a1 + 144),
                           CMTimeCompare(&rhs, &v77) < 0))
        {
          *(_OWORD *)&v77.CMTimeValue value = *(_OWORD *)&time1.value;
          CMTimeEpoch v52 = time1.epoch;
        }
        else
        {
          *(_OWORD *)&v77.CMTimeValue value = *v18;
          CMTimeEpoch v52 = *(void *)(a1 + 144);
        }
        v77.CMTimeEpoch epoch = v52;
        *(_OWORD *)&v76.CMTimeValue value = *v17;
        v76.CMTimeEpoch epoch = *(void *)(a1 + 72);
        CMTimeSubtract(&rhs, &v77, &v76);
        CMTimeValue value = rhs.value;
        CMTimeFlags flags = rhs.flags;
        CMTimeScale timescale = rhs.timescale;
        CMTimeEpoch v54 = rhs.epoch;
        if ((rhs.flags & 0x1D) != 1) {
          goto LABEL_92;
        }
        rhs.CMTimeValue value = value;
        rhs.CMTimeScale timescale = timescale;
        CMTime v77 = lhs;
        if (CMTimeCompare(&rhs, &v77) < 1) {
          goto LABEL_92;
        }
        rhs.CMTimeValue value = value;
        rhs.CMTimeScale timescale = timescale;
        rhs.CMTimeFlags flags = flags;
        rhs.CMTimeEpoch epoch = v54;
        double v55 = CMTimeGetSeconds(&rhs);
        CMTime rhs = v68;
        double v56 = v55 / CMTimeGetSeconds(&rhs);
        if (v56 > 2147483650.0) {
          double v56 = 2147483650.0;
        }
        if (v56 - floor(v56) < 0.01) {
          double v56 = v56 + -1.0;
        }
        if (v56 > 1.0)
        {
          CMTime rhs = v68;
          CMTimeMultiply(&v77, &rhs, (int)v56);
          *(_OWORD *)&v76.CMTimeValue value = *v17;
          v76.CMTimeEpoch epoch = *(void *)(a1 + 72);
          CMTimeAdd(&rhs, &v76, &v77);
          *uint64_t v12 = *(_OWORD *)&rhs.value;
          CMTimeEpoch v57 = rhs.epoch;
          *(void *)(a1 + 48) = rhs.epoch;
          *(_OWORD *)&v76.CMTimeValue value = *v12;
          v76.CMTimeEpoch epoch = v57;
          CMTime v75 = v68;
          uint64_t v58 = &v76;
          uint64_t v59 = &v75;
        }
        else
        {
LABEL_92:
          *uint64_t v12 = *v17;
          *(void *)(a1 + 48) = *(void *)(a1 + 72);
          *(_OWORD *)&v77.CMTimeValue value = *v17;
          v77.CMTimeEpoch epoch = *(void *)(a1 + 72);
          CMTime v76 = time2;
          uint64_t v58 = &v77;
          uint64_t v59 = &v76;
        }
        CMTimeAdd(&rhs, v58, v59);
        *uint64_t v17 = *(_OWORD *)&rhs.value;
        *(void *)(a1 + 72) = rhs.epoch;
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        CMTime time1 = v72;
        *(_OWORD *)&time2.CMTimeValue value = *v12;
        time2.CMTimeEpoch epoch = *(void *)(a1 + 48);
        if (CMTimeCompare(&time1, &time2) < 1 || *(unsigned char *)(a1 + 152)) {
          goto LABEL_18;
        }
        int v66 = 0;
        unint64_t v32 = -1;
        int IsDroppableFrame = 1;
        goto LABEL_98;
      }
      int v39 = 0;
      if (!*(unsigned char *)(a1 + 152) && (v32 & 0x8000000000000000) == 0)
      {
        int v39 = 0;
        if (*(void *)(a1 + 88) > v32)
        {
          uint64_t v40 = *(void *)(a1 + 80) + 32 * v32;
          long long v41 = *v17;
          *(void *)(v40 + 24) = *(void *)(a1 + 72);
          *(_OWORD *)(v40 + 8) = v41;
        }
      }
      goto LABEL_71;
    }
  }
}

uint64_t videoMentorPopCursorFromSelectedCursors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 88);
  if (!v4) {
    return *(void *)(a1 + 80) == 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = *(void *)(v9 + v7);
    if (v10) {
      break;
    }
LABEL_11:
    ++v8;
    v7 += 32;
    if (v8 >= v4) {
      return *(void *)(a1 + 80) == 0;
    }
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12 == *(void *)(CMBaseObjectGetVTable() + 16))
  {
    Float64 v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 32);
    if (v13)
    {
      if (v13(a2, v10))
      {
        unint64_t v4 = *(void *)(a1 + 88);
        goto LABEL_11;
      }
    }
  }
  if (a3)
  {
    long long v15 = *(_OWORD *)(v9 + v7 + 8);
    *(void *)(a3 + 16) = *(void *)(v9 + v7 + 24);
    *(_OWORD *)a3 = v15;
  }
  uint64_t v16 = *(const void **)(v9 + v7);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(v9 + v7) = 0;
  }
  uint64_t v17 = MEMORY[0x1E4F1F9F8];
  uint64_t v18 = v9 + v7;
  *(_OWORD *)(v18 + 8) = *MEMORY[0x1E4F1F9F8];
  *(void *)(v18 + 24) = *(void *)(v17 + 16);
  return 1;
}

CMTime *videoMentorThreadReduceReversedGroupToSatisfyPassLimit(CMTime *result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = a2;
  CFArrayRef v6 = result;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (a3 + 1);
  if (a3 < 0) {
    uint64_t v7 = a2;
  }
  uint64_t v8 = v7 * a4;
  if (a2 < 1)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned __int8 *)&result[1].value + 5;
    uint64_t v11 = a2;
    do
    {
      int v12 = *v10;
      v10 += 32;
      if (v12) {
        ++v9;
      }
      --v11;
    }
    while (v11);
  }
  CMTimeValue value = *MEMORY[0x1E4F1FA08];
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 12);
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 8);
  uint64_t v14 = v9 - v8;
  if (v9 <= v8 || a2 < 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
    unint64_t v19 = (unsigned __int8 *)&result[1].value + 4;
    uint64_t v20 = a2;
    do
    {
      int v21 = *v19;
      v19 += 32;
      if (v21) {
        ++v17;
      }
      --v20;
    }
    while (v20);
    uint64_t v16 = 0;
    int v29 = a5;
    if (a5 && a2 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v22 = 0;
      CFIndex v23 = result;
      do
      {
        memset(&v32, 0, sizeof(v32));
        __n128 result = CMSampleBufferGetOutputPresentationTimeStamp(&v32, (CMSampleBufferRef)v23->value);
        if (BYTE5(v23[1].value))
        {
          CMTime time1 = v32;
          time2.CMTimeValue value = value;
          time2.CMTimeScale timescale = timescale;
          time2.CMTimeFlags flags = flags;
          time2.CMTimeEpoch epoch = epoch;
          __n128 result = (CMTime *)CMTimeCompare(&time1, &time2);
          if ((int)result >= 1)
          {
            CMTimeValue value = v32.value;
            CMTimeFlags flags = v32.flags;
            CMTimeScale timescale = v32.timescale;
            CMTimeEpoch epoch = v32.epoch;
            uint64_t v16 = v22;
          }
        }
        ++v22;
        CFIndex v23 = (CMTime *)((char *)v23 + 32);
      }
      while (v5 != v22);
    }
    if (v14 >= v17)
    {
      a5 = v29;
      if (v5 >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v9 - v17;
        uint64_t v28 = (char *)&v6[1].value + 5;
        do
        {
          if (*(v28 - 1))
          {
            *uint64_t v28 = 0;
          }
          else if (*v28)
          {
            v26 += v14 - v17;
            if (v26 >= v27)
            {
              *uint64_t v28 = 0;
              v26 -= v27;
            }
          }
          v28 += 32;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      a5 = v29;
      if (v5 >= 1)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (char *)&v6[1].value + 5;
        do
        {
          if (*(v25 - 1))
          {
            v24 += v14;
            if (v24 >= v17)
            {
              unsigned char *v25 = 0;
              v24 -= v17;
            }
          }
          v25 += 32;
          --v5;
        }
        while (v5);
      }
    }
  }
  if (a5)
  {
    if ((flags & 0x1D) == 1) {
      *((unsigned char *)&v6[1].value + 32 * v16 + 5) = 1;
    }
  }
  return result;
}

uint64_t videoMentorThreadSendReversedGroup(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 a5, int a6, const void *a7, int a8, uint64_t a9)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a4 >= 0) {
    uint64_t v11 = (a4 + 1);
  }
  else {
    uint64_t v11 = a3;
  }
  if (*(_DWORD *)(a1 + 940) < a4) {
    *(_DWORD *)(a1 + 940) = a4;
  }
  CMTimeFlags v72 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeEpoch v71 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  CMTimeFlags v70 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 12);
  uint64_t v61 = (void *)*MEMORY[0x1E4F1F1F8];
  CFStringRef v65 = (const __CFString *)*MEMORY[0x1E4F1F2C8];
  uint64_t v58 = (unsigned char *)(a2 + 30);
  int v64 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFStringRef v63 = (const __CFString *)*MEMORY[0x1E4F1F308];
  CFStringRef v62 = (const __CFString *)*MEMORY[0x1E4F1F300];
  CFStringRef key = (const __CFString *)*MEMORY[0x1E4F1F2E8];
  uint64_t v59 = (void *)*MEMORY[0x1E4F1F208];
  CFIndex v60 = (void *)*MEMORY[0x1E4F1F200];
  do
  {
LABEL_7:
    if (a8)
    {
      sampleSizeArray.CMTimeValue value = *MEMORY[0x1E4F1FA08];
      sampleSizeArray.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 8);
      if (a3 < 1)
      {
        sampleSizeArray.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
        sampleSizeArray.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = a2;
        uint64_t v15 = a3;
        CMTimeEpoch epoch = v71;
        CMTimeFlags flags = v70;
        do
        {
          if (*(unsigned char *)(v14 + 29))
          {
            memset(&sampleTimingArray, 0, 24);
            CMSampleBufferGetOutputPresentationTimeStamp(&sampleTimingArray.duration, *(CMSampleBufferRef *)v14);
            CMTime time1 = sampleTimingArray.duration;
            time2.CMTimeValue value = sampleSizeArray.value;
            time2.CMTimeScale timescale = sampleSizeArray.timescale;
            time2.CMTimeFlags flags = flags;
            time2.CMTimeEpoch epoch = epoch;
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
              sampleSizeArray.CMTimeValue value = sampleTimingArray.duration.value;
              CMTimeFlags flags = sampleTimingArray.duration.flags;
              sampleSizeArray.CMTimeScale timescale = sampleTimingArray.duration.timescale;
              CMTimeEpoch epoch = sampleTimingArray.duration.epoch;
            }
            ++v13;
          }
          v14 += 32;
          --v15;
        }
        while (v15);
        if ((flags & 0x1D) == 1 && v13 > 1
          || (sampleSizeArray.CMTimeValue value = *MEMORY[0x1E4F1F9F8],
              sampleSizeArray.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8),
              CMTimeEpoch epoch = v12,
              CMTimeFlags flags = v72,
              v13 > 1))
        {
LABEL_21:
          sampleTimingArray.duration.CMTimeValue value = sampleSizeArray.value;
          sampleTimingArray.duration.CMTimeScale timescale = sampleSizeArray.timescale;
          sampleTimingArray.duration.CMTimeFlags flags = flags;
          sampleTimingArray.duration.CMTimeEpoch epoch = epoch;
          videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E4F1F9F8], (uint64_t)&sampleTimingArray);
          *(void *)a9 = sampleSizeArray.value;
          *(_DWORD *)(a9 + 8) = sampleSizeArray.timescale;
          *(_DWORD *)(a9 + 12) = flags;
          *(void *)(a9 + 16) = epoch;
          goto LABEL_22;
        }
      }
      CMTimeEpoch epoch = v12;
      CMTimeFlags flags = v72;
      if (*(unsigned char *)(a9 + 12)) {
        goto LABEL_21;
      }
    }
LABEL_22:
    int v18 = videoMentorThreadWaitForOutputQueueToDropBelowHighWater(a1, a7);
    if (v18 || v11 < 1)
    {
      if (v18) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    uint64_t v19 = 0;
    uint64_t v20 = -1;
LABEL_25:
    *(_OWORD *)&sampleTimingArray.duration.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    sampleTimingArray.duration.CMTimeEpoch epoch = v12;
    if (a3 < 1) {
      return 0;
    }
    uint64_t v21 = 0;
    char v22 = 1;
    uint64_t v23 = -1;
LABEL_27:
    uint64_t v24 = a2 + 32 * v21++;
    do
    {
      if (*(unsigned char *)(v24 + 29))
      {
        memset(&time1, 0, sizeof(time1));
        CMSampleBufferGetPresentationTimeStamp(&time1, *(CMSampleBufferRef *)v24);
        if ((v22 & 1) != 0
          || (CMTime time2 = sampleTimingArray.duration, sampleSizeArray = time1, CMTimeCompare(&time2, &sampleSizeArray) < 0))
        {
          uint64_t v23 = v21 - 1;
          sampleTimingArray.duratioCFIndex n = time1;
        }
        char v22 = 0;
        if (v21 != a3) {
          goto LABEL_27;
        }
LABEL_37:
        *(_WORD *)(a2 + 32 * v23 + 29) = 256;
        if (v20 <= v23) {
          uint64_t v20 = v23;
        }
        if (++v19 == v11) {
          goto LABEL_42;
        }
        goto LABEL_25;
      }
      ++v21;
      v24 += 32;
    }
    while (v21 - a3 != 1);
    if ((v22 & 1) == 0) {
      goto LABEL_37;
    }
    if (!v19) {
      return 0;
    }
LABEL_42:
    ;
  }
  while (v20 < 0);
  uint64_t v25 = v20 + 1;
  char v26 = 1;
  uint64_t v27 = v58;
  while (1)
  {
    int v28 = *v27;
    if (*v27)
    {
      *(_WORD *)(v27 - 1) = 0;
    }
    else if (*(v27 - 2))
    {
      goto LABEL_89;
    }
    int v29 = *(opaqueCMSampleBuffer **)(v27 - 30);
    int v56 = *(_DWORD *)(v27 - 6);
    char v57 = v26;
    CMSampleBufferRef sbuf = v29;
    if (v56 >= 1) {
      break;
    }
    CFRetain(v29);
    int v47 = *(_DWORD *)(v27 - 6);
    uint64_t v48 = a1;
    unsigned __int8 v38 = v57;
LABEL_66:
    *(_DWORD *)(v27 - 6) = v47 + 1;
    if (a6)
    {
      memset(&sampleTimingArray, 0, 24);
      if (v28)
      {
        if (v56 >= 1)
        {
          uint64_t v49 = *(const void **)(v27 - 22);
          if (v49) {
            CMSetAttachment(sbuf, v63, v49, 1u);
          }
          uint64_t v50 = *(const void **)(v27 - 14);
          if (v50) {
            CMSetAttachment(sbuf, v62, v50, 1u);
          }
        }
      }
      else
      {
        if (v56 <= 0)
        {
          CFTypeRef v51 = CMGetAttachment(sbuf, v63, 0);
          *(void *)(v27 - 22) = v51;
          if (v51) {
            CFRetain(v51);
          }
          CFTypeRef v52 = CMGetAttachment(sbuf, v62, 0);
          *(void *)(v27 - 14) = v52;
          if (v52) {
            CFRetain(v52);
          }
        }
        CMSampleBufferGetDuration(&sampleTimingArray.duration, sbuf);
        CMTime time1 = sampleTimingArray.duration;
        audioMentorSetAttachmentAsFigTimeDictionary(sbuf, v63, &time1);
        CMSetAttachment(sbuf, v62, 0, 1u);
        unsigned __int8 v38 = v57;
      }
    }
    uint64_t v53 = videoMentorThreadSendSampleBuffer(v48, sbuf, 0, v28 == 0, 0, a5, 0, v38);
    if (!v53)
    {
      if (!v28) {
        ++*(_DWORD *)(a1 + 948);
      }
      if (*(unsigned char *)(a1 + 116)) {
        uint64_t v53 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v53 = 0;
      }
    }
    if (sbuf) {
      CFRelease(sbuf);
    }
    if (v53) {
      return v53;
    }
    a5 = 0;
    char v26 = 0;
LABEL_89:
    v27 += 32;
    if (!--v25) {
      goto LABEL_7;
    }
  }
  time2.CMTimeValue value = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  sampleSizeArray.CMTimeValue value = CMSampleBufferGetSampleSize(v29, 0);
  uint64_t SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(v29, 0, &sampleTimingArray);
  if (SampleTimingInfo) {
    return SampleTimingInfo;
  }
  int v55 = v28;
  CFAllocatorRef v31 = CFGetAllocator(v29);
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(v29);
  FormatDescriptioCFIndex n = CMSampleBufferGetFormatDescription(v29);
  uint64_t v34 = CMSampleBufferCreate(v31, DataBuffer, 0, 0, 0, FormatDescription, 1, 1, &sampleTimingArray, 1, (const size_t *)&sampleSizeArray, (CMSampleBufferRef *)&time2);
  CMTimeValue value = (opaqueCMSampleBuffer *)time2.value;
  if (!v34)
  {
    uint64_t v34 = CMSampleBufferTrackDataReadiness((CMSampleBufferRef)time2.value, v29);
    CMTimeValue value = (opaqueCMSampleBuffer *)time2.value;
    if (!v34)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, v29);
      CMSampleBufferSetOutputPresentationTimeStamp(value, &time1);
      CFTypeRef v36 = CMGetAttachment(v29, key, 0);
      if (v36) {
        CMSetAttachment((CMAttachmentBearerRef)time2.value, key, v36, 1u);
      }
      CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v29, 0);
      unsigned __int8 v38 = v57;
      if (SampleAttachmentsArray)
      {
        CFArrayRef v39 = SampleAttachmentsArray;
        CFArrayRef v40 = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)time2.value, 1u);
        if (v40)
        {
          CFArrayRef v41 = v40;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v39, 0);
          uint64_t v43 = (__CFDictionary *)CFArrayGetValueAtIndex(v41, 0);
          uint64_t v44 = CFDictionaryGetValue(ValueAtIndex, v60);
          if (v44) {
            CFDictionarySetValue(v43, v60, v44);
          }
          uint64_t v45 = CFDictionaryGetValue(ValueAtIndex, v59);
          if (v45) {
            CFDictionarySetValue(v43, v59, v45);
          }
          uint64_t v46 = CFDictionaryGetValue(ValueAtIndex, v61);
          unsigned __int8 v38 = v57;
          if (v46) {
            CFDictionarySetValue(v43, v61, v46);
          }
        }
      }
      FigSampleBufferGetDecryptor();
      FigSampleBufferSetDecryptor();
      CMSampleBufferRef sbuf = (CMSampleBufferRef)time2.value;
      CMSetAttachment((CMAttachmentBearerRef)time2.value, v65, v64, 1u);
      int v47 = *(_DWORD *)(v27 - 6);
      uint64_t v48 = a1;
      if (v47 > *(_DWORD *)(a1 + 944)) {
        *(_DWORD *)(a1 + 944) = v47;
      }
      int v28 = v55;
      goto LABEL_66;
    }
  }
  uint64_t v53 = v34;
  if (value) {
    CFRelease(value);
  }
  return v53;
}

void videoMentorThreadReleaseSampleBuffersInReversalArray(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a2;
    if (a2 >= 1)
    {
      uint64_t v3 = (CFTypeRef *)(a1 + 16);
      do
      {
        unint64_t v4 = *(v3 - 2);
        if (v4)
        {
          CFRelease(v4);
          *(v3 - 2) = 0;
        }
        uint64_t v5 = *(v3 - 1);
        if (v5)
        {
          CFRelease(v5);
          *(v3 - 1) = 0;
        }
        if (*v3)
        {
          CFRelease(*v3);
          CFTypeRef *v3 = 0;
        }
        v3 += 4;
        --v2;
      }
      while (v2);
    }
  }
}

uint64_t videoMentorPushCursorIntoSelectedCursors(uint64_t a1, CFTypeRef cf)
{
  unint64_t v4 = *(void *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = 0;
    CFArrayRef v6 = *(char **)(a1 + 80);
    while (*(void *)v6)
    {
      ++v5;
      v6 += 32;
      if (v4 == v5)
      {
        uint64_t v5 = *(void *)(a1 + 88);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    CFArrayRef v6 = 0;
  }
  if (v5 == v4)
  {
LABEL_8:
    if (v4 >> 58
      || !(v4 << 6)
      || (uint64_t v7 = (char *)malloc_type_realloc(*(void **)(a1 + 80), v4 << 6, 0x687C3F45uLL)) == 0)
    {
      videoMentorThrottlingStateClearSelectedCursors(a1);
      uint64_t v11 = *(void **)(a1 + 80);
      if (v11)
      {
        *(void *)(a1 + 80) = 0;
        free(v11);
      }
      *(void *)(a1 + 88) = 0;
      return -1;
    }
    uint64_t v8 = v7;
    bzero(&v7[32 * *(void *)(a1 + 88)], (v4 << 6) - 32 * *(void *)(a1 + 88));
    unint64_t v9 = 2 * *(void *)(a1 + 88);
    *(void *)(a1 + 80) = v8;
    *(void *)(a1 + 88) = v9;
    if (v4 >= v9) {
      return -1;
    }
    CFArrayRef v6 = &v8[32 * v4];
  }
  if (!v6 || *(void *)v6) {
    return -1;
  }
  if (cf) {
    CFTypeRef v10 = CFRetain(cf);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *(void *)CFArrayRef v6 = v10;
  uint64_t v13 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v6 + 8) = *MEMORY[0x1E4F1F9F8];
  *((void *)v6 + 3) = *(void *)(v13 + 16);
  return v5;
}

uint64_t videoMentorIsDroppableFrame(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  __int16 v14 = 0;
  __int16 v13 = 0;
  unsigned __int8 v12 = 0;
  if (*(void *)(v3 + 72))
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFTypeRef v10 = *(unsigned int (**)(uint64_t, char *, __int16 *, void))(v5 + 72);
    if (v10)
    {
      if (!v10(a1, (char *)&v14 + 1, &v14, 0))
      {
        unsigned int v11 = HIBYTE(v14) - 66;
        if (v11 <= 0xE && ((1 << v11) & 0x4081) != 0) {
          return HIBYTE(v14) == 66;
        }
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int (**)(uint64_t, char *, __int16 *, void, unsigned __int8 *))(v7 + 64);
    if (v8 && !v8(a1, (char *)&v13 + 1, &v13, 0, &v12)) {
      return v12;
    }
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t FigCEA608DataInspectorCreate(const void *a1, void *a2)
{
  if (a2 && (uint64_t v4 = CFAllocatorAllocate((CFAllocatorRef)a1, 24, 0)) != 0)
  {
    uint64_t v5 = v4;
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    uint64_t v7 = 0;
    *uint64_t v5 = v6;
    *a2 = v5;
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  FigCEA608DataInspectorRelease(0);
  return v7;
}

void FigCEA608DataInspectorRelease(CFAllocatorRef *ptr)
{
  if (ptr)
  {
    CFAllocatorRef v1 = *ptr;
    CFAllocatorDeallocate(*ptr, ptr);
    if (v1)
    {
      CFRelease(v1);
    }
  }
}

uint64_t FigCEA608DataInspectorInspectBytePair(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4, __CFString **a5)
{
  __int16 v13 = 0;
  if (a1 && a2 && a3 && a4)
  {
    LOBYTE(v13) = *a2 & 0x7F;
    if (a3 >= 2) {
      HIBYTE(v13) = a2[1] & 0x7F;
    }
    if (!a5) {
      return inspectorInspectBytePair(a1, (unsigned __int8 *)&v13, a3, a4, 0);
    }
    CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Mutable)
    {
      CFTypeRef v10 = Mutable;
      uint64_t v11 = inspectorInspectBytePair(a1, (unsigned __int8 *)&v13, a3, a4, Mutable);
      if (v11) {
        CFRelease(v10);
      }
      else {
        *a5 = v10;
      }
      return v11;
    }
  }

  return FigSignalErrorAt();
}

uint64_t inspectorInspectBytePair(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, __CFString *a5)
{
  unsigned int v10 = *a2;
  if (v10 <= 0xF)
  {
    if (*a2 && *(_DWORD *)(a1 + 16) == 2)
    {
      if (a3 > 1)
      {
        if (!a5)
        {
LABEL_8:
          uint64_t result = 0;
          *(unsigned char *)a4 = 1;
          *(void *)(a4 + 4) = 0x7874646100000002;
          *(_DWORD *)(a4 + 12) = 0;
          *(_DWORD *)(a1 + 16) = 2;
          *(void *)(a1 + 8) = 2020893793;
          return result;
        }
        char v26 = 0;
        *(_DWORD *)cStr = 0;
        __sprintf_chk(cStr, 0, 5uLL, "%02x%02x", v10, a2[1]);
        CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0);
        if (v11)
        {
          CFStringRef v12 = v11;
          CFStringAppend(a5, v11);
          CFRelease(v12);
          goto LABEL_8;
        }
        return 4294950736;
      }
      goto LABEL_81;
    }
    if (a3)
    {
      if (!a5) {
        goto LABEL_25;
      }
      cStr[2] = 0;
      *(_WORD *)cStr = 0;
      __sprintf_chk(cStr, 0, 3uLL, "%02x", v10);
      CFStringRef v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0);
      if (!v17) {
        return 4294950736;
      }
      goto LABEL_24;
    }
LABEL_81:
    return FigSignalErrorAt();
  }
  if (v10 > 0x1F)
  {
    if ((v10 & 0x80) != 0) {
      return 0;
    }
    if (!a3) {
      goto LABEL_81;
    }
    if (!a5) {
      goto LABEL_25;
    }
    *(_WORD *)cStr = bswap32((unsigned __int16)kUTF16StandardCharacters[*a2 - 32]) >> 16;
    CFStringRef v17 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)cStr, 2, 0x10000100u, 0);
    if (v17)
    {
LABEL_24:
      CFStringRef v18 = v17;
      CFStringAppend(a5, v17);
      CFRelease(v18);
LABEL_25:
      *(unsigned char *)a4 = 1;
      *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 16);
      *(void *)(a4 + 8) = *(void *)(a1 + 8);
      if (a3 >= 2) {
        return inspectorInspectBytePair(a1, a2 + 1, a3 - 1, a4, a5);
      }
      return 0;
    }
    return 4294950736;
  }
  if (a3 <= 1) {
    goto LABEL_81;
  }
  uint64_t v14 = a2[1];
  if ((v10 & 0xFFFFFFF7) == 0x10 && v14 >= 0x20 && v14 <= 0x2F)
  {
    if (a5)
    {
      uint64_t v15 = a5;
      int v16 = 16;
      goto LABEL_33;
    }
    goto LABEL_47;
  }
  if ((v10 & 0xF7) != 0x17 || v14 < 0x2D || v14 > 0x2F)
  {
    if ((v10 & 0xF7) == 0x11 && v14 >= 0x20 && v14 <= 0x2F)
    {
      if (!a5) {
        goto LABEL_47;
      }
      CFStringRef v19 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &inspectorAppendMnemonicForMidRowCode_kMidRowMnemonics[6 * a2[1] - 192], 0);
      if (!v19) {
        return 4294950736;
      }
LABEL_46:
      CFStringRef v20 = v19;
      CFStringAppend(a5, v19);
      CFRelease(v20);
      goto LABEL_47;
    }
    if ((v10 & 0xF7) != 0x11 || v14 < 0x30 || v14 > 0x3F)
    {
      if ((v10 & 0xF6) == 0x14 && v14 >= 0x20 && v14 <= 0x2F)
      {
        if (a5)
        {
          uint64_t result = inspectorAppendMnemonicForMiscControlCode(a5, v10 & 0xF7, v14);
          if (result) {
            return result;
          }
        }
        if (v10) {
          int v21 = 2;
        }
        else {
          int v21 = 1;
        }
        goto LABEL_48;
      }
      if ((v10 & 0xF7) == 0x17 && v14 >= 0x21 && v14 <= 0x23)
      {
        if (a5)
        {
          uint64_t result = inspectorAppendMnemonicForMiscControlCode(a5, 23, v14);
          if (result) {
            return result;
          }
        }
        goto LABEL_47;
      }
      if ((char)v14 >= 64)
      {
        if (a5)
        {
          uint64_t result = inspectorAppendMnemonicForPreambleAddressCode(a5, v10 & 0xF7, v14);
          if (result) {
            return result;
          }
        }
        goto LABEL_47;
      }
      if ((v10 & 0x16) == 0x12 && v14 >= 0x20 && v14 <= 0x3F)
      {
        if (a5)
        {
          uint64_t result = inspectorAppendMnemonicForExtendedCharacterCode(a5, v10 & 0xF7, v14);
          if (result) {
            return result;
          }
        }
        goto LABEL_47;
      }
      if (a5)
      {
        char v26 = 0;
        *(_DWORD *)cStr = 0;
        __sprintf_chk(cStr, 0, 5uLL, "%02x%02x", v10, v14);
        CFStringRef v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0);
        if (!v23) {
          return 4294950736;
        }
        CFStringRef v24 = v23;
        CFStringAppend(a5, v23);
        CFRelease(v24);
      }
      uint64_t result = 0;
      *(unsigned char *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 4) = 0;
      return result;
    }
    if (!a5) {
      goto LABEL_47;
    }
    *(_WORD *)cStr = bswap32(kUTF16SpecialCharacters[v14 - 48]) >> 16;
    CFStringRef v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)cStr, 2, 0x10000100u, 0);
    if (v19) {
      goto LABEL_46;
    }
    return 4294950736;
  }
  if (a5)
  {
    uint64_t v15 = a5;
    int v16 = 23;
LABEL_33:
    uint64_t result = inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode(v15, v16, v14);
    if (result) {
      return result;
    }
  }
LABEL_47:
  int v21 = *(_DWORD *)(a1 + 16);
LABEL_48:
  uint64_t result = 0;
  *(unsigned char *)a4 = 1;
  if ((v10 & 8) != 0) {
    int v22 = 2;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(a4 + 4) = v21;
  *(_DWORD *)(a4 + 8) = 1668314222;
  *(_DWORD *)(a4 + 12) = v22;
  *(_DWORD *)(a1 + 12) = v22;
  *(_DWORD *)(a1 + 16) = v21;
  *(_DWORD *)(a1 + 8) = 1668314222;
  return result;
}

uint64_t inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode(__CFString *a1, int a2, unsigned int a3)
{
  if (a2 == 23)
  {
    if (a3 > 0x2F) {
      return 4294950734;
    }
    uint64_t v4 = &inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode_kAttributeMnemonics2[6 * a3 - 270];
  }
  else
  {
    if (a2 == 16)
    {
      if (a3 <= 0x2F)
      {
        uint64_t v4 = &inspectorAppendMnemonicForBackgroundAndForegroundAttributeCode_kAttributeMnemonics1[8 * a3 - a3 - 224];
        goto LABEL_8;
      }
      return 4294950734;
    }
    uint64_t v4 = 0;
  }
LABEL_8:
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 0);
  if (!v5) {
    return 4294950736;
  }
  CFStringRef v6 = v5;
  CFStringAppend(a1, v5);
  CFRelease(v6);
  return 0;
}

uint64_t inspectorAppendMnemonicForMiscControlCode(__CFString *a1, int a2, unsigned int a3)
{
  if ((a2 & 0xFE) == 0x14)
  {
    if (a3 <= 0x2F)
    {
      uint64_t v4 = &inspectorAppendMnemonicForMiscControlCode_kMiscMnemonics1[6 * a3 - 192];
      goto LABEL_8;
    }
    return 4294950734;
  }
  if (a2 == 23)
  {
    if (a3 > 0x23) {
      return 4294950734;
    }
    uint64_t v4 = &inspectorAppendMnemonicForMiscControlCode_kMiscMnemonics2[6 * a3 - 198];
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_8:
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 0);
  if (!v5) {
    return 4294950736;
  }
  CFStringRef v6 = v5;
  CFStringAppend(a1, v5);
  CFRelease(v6);
  return 0;
}

uint64_t inspectorAppendMnemonicForPreambleAddressCode(__CFString *a1, int a2, int a3)
{
  switch(a2)
  {
    case 16:
      if ((a3 & 0xE0) == 0x40) {
        int v4 = a3 - 64;
      }
      else {
        int v4 = 0;
      }
      if ((a3 & 0xE0) == 0x40) {
        uint64_t v5 = 11;
      }
      else {
        uint64_t v5 = 0;
      }
      break;
    case 17:
      int v6 = a3 & 0xE0;
      int v7 = a3 - 96;
      if ((char)a3 <= 95) {
        int v7 = 0;
      }
      unsigned int v8 = 2 * ((char)a3 > 95);
      int v9 = a3 - 64;
      unsigned int v10 = 1;
      goto LABEL_39;
    case 18:
      int v6 = a3 & 0xE0;
      int v7 = a3 - 96;
      if ((char)a3 <= 95) {
        int v7 = 0;
      }
      unsigned int v8 = 4 * ((char)a3 > 95);
      int v9 = a3 - 64;
      unsigned int v10 = 3;
      goto LABEL_39;
    case 19:
      int v11 = a3 & 0xE0;
      if ((char)a3 <= 95) {
        int v12 = 0;
      }
      else {
        int v12 = a3 - 96;
      }
      if ((char)a3 <= 95) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = 13;
      }
      int v14 = a3 - 64;
      unsigned int v15 = 12;
      goto LABEL_52;
    case 20:
      int v11 = a3 & 0xE0;
      if ((char)a3 <= 95) {
        int v12 = 0;
      }
      else {
        int v12 = a3 - 96;
      }
      if ((char)a3 <= 95) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = 15;
      }
      int v14 = a3 - 64;
      unsigned int v15 = 14;
      goto LABEL_52;
    case 21:
      int v11 = a3 & 0xE0;
      if ((char)a3 <= 95) {
        int v12 = 0;
      }
      else {
        int v12 = a3 - 96;
      }
      if ((char)a3 <= 95) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = 6;
      }
      int v14 = a3 - 64;
      unsigned int v15 = 5;
      goto LABEL_52;
    case 22:
      int v6 = a3 & 0xE0;
      int v7 = a3 - 96;
      if ((char)a3 <= 95) {
        int v7 = 0;
      }
      unsigned int v8 = 8 * ((char)a3 > 95);
      int v9 = a3 - 64;
      unsigned int v10 = 7;
LABEL_39:
      if (v6 == 64) {
        int v4 = v9;
      }
      else {
        int v4 = v7;
      }
      if (v6 == 64) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = v8;
      }
      break;
    case 23:
      int v11 = a3 & 0xE0;
      if ((char)a3 <= 95) {
        int v12 = 0;
      }
      else {
        int v12 = a3 - 96;
      }
      if ((char)a3 <= 95) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = 10;
      }
      int v14 = a3 - 64;
      unsigned int v15 = 9;
LABEL_52:
      if (v11 == 64) {
        int v4 = v14;
      }
      else {
        int v4 = v12;
      }
      if (v11 == 64) {
        uint64_t v5 = v15;
      }
      else {
        uint64_t v5 = v13;
      }
      break;
    default:
      int v4 = 0;
      uint64_t v5 = 0;
      break;
  }
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 4294950736;
  }
  CFStringRef v17 = Mutable;
  CFStringAppendFormat(Mutable, 0, @"{Row:%02d,Col:%s}", v5, &inspectorAppendMnemonicForPreambleAddressCode_kPACMnemonics[5 * v4]);
  CFStringAppend(a1, v17);
  CFRelease(v17);
  return 0;
}

uint64_t inspectorAppendMnemonicForExtendedCharacterCode(__CFString *a1, int a2, unsigned int a3)
{
  uint64_t v4 = a3 - 32;
  *(_WORD *)bytes = 0;
  if (a2 == 19)
  {
    if (a3 <= 0x3F)
    {
      unsigned int v5 = kUTF16ExtendedCharacters2[(int)v4];
      goto LABEL_7;
    }
    return 4294950734;
  }
  if (a2 != 18) {
    goto LABEL_8;
  }
  if (a3 > 0x3F) {
    return 4294950734;
  }
  unsigned int v5 = kUTF16ExtendedCharacters1[v4];
LABEL_7:
  *(_WORD *)bytes = bswap32(v5) >> 16;
LABEL_8:
  CFStringRef v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 2, 0x10000100u, 0);
  if (!v6) {
    return 4294950736;
  }
  CFStringRef v7 = v6;
  CFStringAppend(a1, v6);
  CFRelease(v7);
  return 0;
}

uint64_t FigAudioQueueTimingShimNewOutput(const AudioStreamBasicDescription *a1, void (__cdecl *a2)(void *, AudioQueueRef, AudioQueueBufferRef), void *a3, __CFRunLoop *a4, const __CFString *a5, UInt32 a6, const void *a7, long long *a8, uint64_t *a9)
{
  AudioQueueRef outAQ = 0;
  inDatCGFloat a = 0;
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  p_mSamplefloat Rate = &a1->mSampleRate;
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v15 = AudioQueueNewOutput(a1, a2, a3, a4, a5, a6, &outAQ);
  if (v15) {
    goto LABEL_24;
  }
  if (a7)
  {
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (!v16)
    {
      uint64_t Instance = 0;
      uint64_t v22 = 4294948075;
      goto LABEL_17;
    }
    CFStringRef v17 = *(uint64_t (**)(const void *, __CFString *, void, CFTypeRef *))(v16 + 16);
    if (!v17)
    {
      uint64_t Instance = 0;
      uint64_t v22 = 4294948071;
      goto LABEL_17;
    }
    uint64_t v15 = v17(a7, @"FAS_AudioSessionID", *MEMORY[0x1E4F1CF80], &cf);
    if (v15
      || (inDatCGFloat a = FigCFNumberGetSInt32()) != 0
      && (uint64_t v15 = AudioQueueSetProperty(outAQ, 0x72736573u, &inData, 4u), v15))
    {
LABEL_24:
      uint64_t v22 = v15;
LABEL_13:
      uint64_t Instance = 0;
      goto LABEL_17;
    }
  }
  MEMORY[0x19970EE10](&sRegisterFigAudioQueueTimingShimTypeOnce, registerFigAudioQueueTimingShimType);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v19 = FigDispatchQueueCreateWithPriority();
    if (v19)
    {
      uint64_t v20 = v19;
      *(_DWORD *)(Instance + 52) = (int)*p_mSampleRate;
      long long v21 = *a8;
      *(void *)(Instance + 44) = *((void *)a8 + 2);
      *(_OWORD *)(Instance + 28) = v21;
      *(void *)(Instance + 16) = outAQ;
      AudioQueueRef outAQ = 0;
      if (a7) {
        CFRetain(a7);
      }
      uint64_t v22 = 0;
      *(_DWORD *)(Instance + 24) = -12948;
      *(void *)(Instance + 56) = a7;
      *(void *)(Instance + 64) = v20;
      *a9 = Instance;
      goto LABEL_13;
    }
    uint64_t v22 = 4294954510;
  }
  else
  {
    uint64_t v22 = FigSignalErrorAt();
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (Instance) {
    CFRelease((CFTypeRef)Instance);
  }
  if (outAQ) {
    AudioQueueDispose(outAQ, 0);
  }
  return v22;
}

uint64_t FigAudioQueueTimingShimDispose(AudioQueueRef *a1, Boolean a2)
{
  if (!a1) {
    return 4294954516;
  }
  if (!a1[2]) {
    return 4294954511;
  }
  faqts_waitAudioQueueStartSynchronous((uint64_t)a1);
  if (dword_1E9350D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = AudioQueueDispose(a1[2], a2);
  a1[2] = 0;
  CFRelease(a1);
  return v5;
}

uint64_t faqts_waitAudioQueueStartSynchronous(uint64_t a1)
{
  CFAllocatorRef v1 = *(NSObject **)(a1 + 64);
  if (!v1) {
    return 4294954348;
  }
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  if (v1 == dispatch_get_current_queue())
  {
    uint64_t v3 = (unsigned int *)(a1 + 24);
  }
  else
  {
    dispatch_sync_f(v1, &v5, (dispatch_function_t)faqts_getAudioQueueStartErrorInternal);
    uint64_t v3 = (unsigned int *)&v6;
  }
  return *v3;
}

uint64_t FigAudioQueueTimingShimFlush(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(OpaqueAudioQueue **)(a1 + 16);
  if (!v2) {
    return 4294954511;
  }
  if (dword_1E9350D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = *(OpaqueAudioQueue **)(a1 + 16);
  }
  return AudioQueueFlush(v2);
}

uint64_t FigAudioQueueTimingShimReset(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(OpaqueAudioQueue **)(a1 + 16);
  if (!v2) {
    return 4294954511;
  }
  if (dword_1E9350D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = *(OpaqueAudioQueue **)(a1 + 16);
  }
  return AudioQueueReset(v2);
}

uint64_t FigAudioQueueTimingShimPause(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294954511;
  }
  faqts_waitAudioQueueStartSynchronous(a1);
  if (dword_1E9350D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = AudioQueuePause(*(AudioQueueRef *)(a1 + 16));
  if (!result) {
    *(_DWORD *)(a1 + 24) = -12948;
  }
  return result;
}

uint64_t FigAudioQueueTimingShimPrime(uint64_t a1, UInt32 inNumberOfFramesToPrepare, UInt32 *outNumberOfFramesPrepared)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (!v4) {
    return 4294954511;
  }
  if (dword_1E9350D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v4 = *(OpaqueAudioQueue **)(a1 + 16);
  }
  return AudioQueuePrime(v4, inNumberOfFramesToPrepare, outNumberOfFramesPrepared);
}

uint64_t FigAudioQueueTimingShimGetIncrementedSampleTime(CMTime *a1, double *a2, double *a3)
{
  if (!a1) {
    return 4294954516;
  }
  if (!a1->epoch) {
    return 4294954511;
  }
  if (!a3) {
    return 4294954516;
  }
  memset(v10, 0, sizeof(v10));
  faqts_convertTimingShimTimeStampToAQTimeStamp((uint64_t)a1, (uint64_t)a2, (double *)v10);
  *(double *)unsigned int v10 = *(double *)v10 + 1.0;
  faqts_convertAQTimeStampToTimingShimTimeStamp(a1, (uint64_t)v10, (double *)v9);
  long long v6 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *((_OWORD *)a3 + 1) = v6;
  long long v7 = v9[3];
  *((_OWORD *)a3 + 2) = v9[2];
  *((_OWORD *)a3 + 3) = v7;
  uint64_t result = 0;
  if (*a3 == *a2) {
    *a3 = *a3 + 1.0;
  }
  return result;
}

uint64_t faqts_convertTimingShimTimeStampToAQTimeStamp@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  if (*(unsigned char *)(a2 + 56))
  {
    uint64_t v7 = result;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    double v18 = 0.0;
    CMTimeMake(&v17, (uint64_t)*(double *)a2, *(_DWORD *)(result + 52));
    CMTime lhs = v17;
    CMTime rhs = *(CMTime *)(v7 + 28);
    CMTimeSubtract(&v16, &lhs, &rhs);
    int32_t v8 = *(_DWORD *)(v7 + 52);
    CMTime lhs = v16;
    CMTimeConvertScale(&v13, &lhs, v8, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    double value = (double)v13.value;
    uint64_t result = AudioQueueConvertToUnscaledSampleTime();
    double v10 = v18;
    if (result) {
      double v10 = value;
    }
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v11;
    long long v12 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v12;
    *a3 = v10;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v5;
    long long v6 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v6;
  }
  return result;
}

CMTime *faqts_convertAQTimeStampToTimingShimTimeStamp@<X0>(CMTime *result@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  if (*(unsigned char *)(a2 + 56))
  {
    uint64_t v7 = result;
    double v17 = 0.0;
    memset(&v16, 0, sizeof(v16));
    memset(&v15, 0, sizeof(v15));
    double v8 = *(double *)a2;
    if (AudioQueueConvertToScaledSampleTime()) {
      double v17 = v8;
    }
    else {
      double v8 = v17;
    }
    CMTimeMake(&v16, (uint64_t)v8, HIDWORD(v7[2].value));
    CMTime lhs = v16;
    CMTime rhs = *(CMTime *)((char *)v7 + 28);
    CMTimeAdd(&v15, &lhs, &rhs);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v10;
    int32_t value_high = HIDWORD(v7[2].value);
    CMTime lhs = v15;
    uint64_t result = CMTimeConvertScale(&v12, &lhs, value_high, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *a3 = (double)v12.value;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *((_OWORD *)a3 + 1) = v5;
    long long v6 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a3 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a3 + 3) = v6;
  }
  return result;
}

CMTime *FigAudioQueueTimingShimConvertTimingShimTimeToAQTime@<X0>(CMTime *result@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a3->double value = *MEMORY[0x1E4F1F9F8];
  a3->CMTimeEpoch epoch = *(void *)(v4 + 16);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v13 = 1;
    long long v12 = 0u;
    long long v11 = 0u;
    long long v10 = 0u;
    int32_t value_high = HIDWORD(result[2].value);
    v7[0] = *a2;
    CMTimeConvertScale(&v8, v7, value_high, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    double value = (double)v8.value;
    faqts_convertTimingShimTimeStampToAQTimeStamp(v5, (uint64_t)&value, (double *)&v7[0].value);
    return CMTimeMake(a3, (uint64_t)*(double *)&v7[0].value, *(_DWORD *)(v5 + 52));
  }
  return result;
}

uint64_t FigAudioQueueTimingShimStartAsyncWithPerfCallback(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1) {
    return 4294954516;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294954511;
  }
  if (a2)
  {
    uint64_t v13 = a1 + 72;
    faqts_convertTimingShimTimeStampToAQTimeStamp(a1, a2, (double *)v17);
    long long v14 = v17[1];
    *(_OWORD *)(a1 + 72) = v17[0];
    *(_OWORD *)(a1 + 88) = v14;
    long long v15 = v17[3];
    *(_OWORD *)(a1 + 104) = v17[2];
    *(_OWORD *)(a1 + 120) = v15;
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(a1 + 136) = v13;
  faqts_audioQueueStartAsync((void *)a1, a4, a5, a3, a6, a7);
  return 0;
}

void faqts_audioQueueStartAsync(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  long long v12 = malloc_type_malloc(0x38uLL, 0x10A0040BEAD7E86uLL);
  *long long v12 = a1;
  v12[1] = a2;
  v12[2] = a3;
  *((unsigned char *)v12 + 24) = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = FigGetUpTimeNanoseconds();
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v13 = a1[8];

  dispatch_async_f(v13, v12, (dispatch_function_t)faqts_audioQueueStartInternal);
}

uint64_t FigAudioQueueTimingShimStartAsync(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return FigAudioQueueTimingShimStartAsyncWithPerfCallback(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t FigAudioQueueTimingShimStartWithPerfCallback(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 4294954516;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294954511;
  }
  if (a2)
  {
    uint64_t v9 = a1 + 72;
    faqts_convertTimingShimTimeStampToAQTimeStamp(a1, a2, (double *)v13);
    long long v10 = v13[1];
    *(_OWORD *)(a1 + 72) = v13[0];
    *(_OWORD *)(a1 + 88) = v10;
    long long v11 = v13[3];
    *(_OWORD *)(a1 + 104) = v13[2];
    *(_OWORD *)(a1 + 120) = v11;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)(a1 + 136) = v9;
  faqts_audioQueueStartAsync((void *)a1, 0, 0, a3, a4, a5);

  return faqts_waitAudioQueueStartSynchronous(a1);
}

uint64_t FigAudioQueueTimingShimStart(uint64_t a1, uint64_t a2, char a3)
{
  return FigAudioQueueTimingShimStartWithPerfCallback(a1, a2, a3, 0, 0);
}

uint64_t FigAudioQueueTimingShimStop(uint64_t a1, Boolean a2)
{
  if (!a1) {
    return 4294954516;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294954511;
  }
  faqts_waitAudioQueueStartSynchronous(a1);
  if (dword_1E9350D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = AudioQueueStop(*(AudioQueueRef *)(a1 + 16), a2);
  if (!result) {
    *(_DWORD *)(a1 + 24) = -12948;
  }
  return result;
}

uint64_t FigAudioQueueTimingShimGetParameter(uint64_t a1, AudioQueueParameterID a2, AudioQueueParameterValue *a3)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v3 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v3) {
    return AudioQueueGetParameter(v3, a2, a3);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimSetParameter(uint64_t a1, AudioQueueParameterID a2, AudioQueueParameterValue a3)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v3 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v3) {
    return AudioQueueSetParameter(v3, a2, a3);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimGetProperty(uint64_t a1, AudioQueuePropertyID a2, void *a3, UInt32 *a4)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4) {
    return AudioQueueGetProperty(v4, a2, a3, a4);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimSetProperty(uint64_t a1, AudioQueuePropertyID a2, const void *a3, UInt32 a4)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4) {
    return AudioQueueSetProperty(v4, a2, a3, a4);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimAddPropertyListener(uint64_t a1, AudioQueuePropertyID a2, void (__cdecl *a3)(void *, AudioQueueRef, AudioQueuePropertyID), void *a4)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4) {
    return AudioQueueAddPropertyListener(v4, a2, a3, a4);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimRemovePropertyListener(uint64_t a1, AudioQueuePropertyID a2, void (__cdecl *a3)(void *, AudioQueueRef, AudioQueuePropertyID), void *a4)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v4 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v4) {
    return AudioQueueRemovePropertyListener(v4, a2, a3, a4);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimAllocateBufferWithMemory(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  if (*(void *)(a1 + 16)) {
    return MEMORY[0x1F40D4CE8]();
  }
  return 4294954511;
}

uint64_t FigAudioQueueTimingShimAllocateBuffer(uint64_t a1, UInt32 a2, AudioQueueBufferRef *a3)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v3 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v3) {
    return AudioQueueAllocateBuffer(v3, a2, a3);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimFreeBuffer(uint64_t a1, AudioQueueBuffer *a2)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(OpaqueAudioQueue **)(a1 + 16);
  if (v2) {
    return AudioQueueFreeBuffer(v2, a2);
  }
  else {
    return 4294954511;
  }
}

uint64_t FigAudioQueueTimingShimGetCurrentTime(CMTime *a1, AudioQueueTimelineRef inTimeline, int a3, _OWORD *a4, Boolean *outTimelineDiscontinuity)
{
  long long v5 = a4[1];
  *(_OWORD *)&outTimeStamp.mSampleTime = *a4;
  *(_OWORD *)&outTimeStamp.mRateScalar = v5;
  long long v6 = a4[3];
  *(_OWORD *)&outTimeStamp.mSMPTETime.mSubframes = a4[2];
  *(_OWORD *)&outTimeStamp.mSMPTETime.mHours = v6;
  if (!a1) {
    return 4294954516;
  }
  CMTimeEpoch epoch = (OpaqueAudioQueue *)a1->epoch;
  if (!epoch) {
    return 4294954511;
  }
  if (a3)
  {
    uint64_t result = faqts_waitAudioQueueStartSynchronous((uint64_t)a1);
    if (result) {
      return result;
    }
    CMTimeEpoch epoch = (OpaqueAudioQueue *)a1->epoch;
  }
  uint64_t result = AudioQueueGetCurrentTime(epoch, inTimeline, &outTimeStamp, outTimelineDiscontinuity);
  if (!result)
  {
    faqts_convertAQTimeStampToTimingShimTimeStamp(a1, (uint64_t)&outTimeStamp, (double *)v15);
    uint64_t result = 0;
    long long v13 = v15[1];
    *a4 = v15[0];
    a4[1] = v13;
    long long v14 = v15[3];
    a4[2] = v15[2];
    a4[3] = v14;
  }
  return result;
}

uint64_t FigAudioQueueTimingShimScheduleParameters(uint64_t a1, double *a2, unsigned int a3, unsigned int *a4, float *a5)
{
  memset(v27, 0, 64);
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      faqts_convertTimingShimTimeStampToAQTimeStamp(a1, (uint64_t)a2, (double *)v27);
      uint64_t v9 = a3;
      uint64_t v19 = (float *)malloc_type_calloc(a3, 4uLL, 0x100004052888210uLL);
      if (a3)
      {
        long long v11 = v19;
        long long v10 = a4;
        do
        {
          unsigned int v12 = *v10++;
          int v13 = (1 << v12) & 0x8001440;
          if (v12 > 0x1B || v13 == 0)
          {
            float v15 = *a5;
          }
          else
          {
            uint64_t v26 = 1;
            long long v24 = 0u;
            long long v25 = 0u;
            long long v23 = 0u;
            double v22 = *a2 + (float)(*a5 * (float)*(int *)(a1 + 52));
            faqts_convertTimingShimTimeStampToAQTimeStamp(a1, (uint64_t)&v22, v21);
            float v15 = (v21[0] - *(double *)v27) / (double)*(int *)(a1 + 52);
          }
          *v11++ = v15;
          ++a5;
          --v9;
        }
        while (v9);
      }
      CMTime v16 = v19;
      uint64_t v17 = AudioQueueScheduleParameters();
    }
    else
    {
      CMTime v16 = 0;
      uint64_t v17 = 4294954511;
    }
  }
  else
  {
    CMTime v16 = 0;
    uint64_t v17 = 4294954516;
  }
  free(v16);
  return v17;
}

uint64_t FigAudioQueueTimingShimEnqueueBufferWithParameters(CMTime *a1, AudioQueueBuffer *a2, UInt32 a3, const AudioStreamPacketDescription *a4, UInt32 a5, UInt32 a6, UInt32 a7, const AudioQueueParameterEvent *a8, uint64_t a9, _OWORD *a10)
{
  if (!a1) {
    return 4294954516;
  }
  CMTimeEpoch epoch = (OpaqueAudioQueue *)a1->epoch;
  if (!epoch) {
    return 4294954511;
  }
  memset(v25, 0, 64);
  memset(&v24, 0, sizeof(v24));
  if (a9)
  {
    inStartTime = (const AudioTimeStamp *)v25;
    faqts_convertTimingShimTimeStampToAQTimeStamp((uint64_t)a1, a9, (double *)v25);
    CMTimeEpoch epoch = (OpaqueAudioQueue *)a1->epoch;
  }
  else
  {
    inStartTime = 0;
  }
  uint64_t result = AudioQueueEnqueueBufferWithParameters(epoch, a2, a3, a4, a5, a6, a7, a8, inStartTime, &v24);
  if (a10)
  {
    if (!result)
    {
      faqts_convertAQTimeStampToTimingShimTimeStamp(a1, (uint64_t)&v24, (double *)v23);
      uint64_t result = 0;
      long long v21 = v23[1];
      *a10 = v23[0];
      a10[1] = v21;
      long long v22 = v23[3];
      a10[2] = v23[2];
      a10[3] = v22;
    }
  }
  return result;
}

uint64_t FigAudioQueueTimingShimGetAudioQueue(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t FigAudioQueueTimingShimGetAudioQueueLatency(uint64_t a1, OpaqueCMClock *a2, int a3, CMTime *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v4 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v28.unsigned int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v28.CMTimeEpoch epoch = v5;
  if (!a1) {
    return 4294954516;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294954511;
  }
  long long v26 = v4;
  int v10 = FigPreferAudioSessionClock();
  long long v11 = (CMTime *)MEMORY[0x1E4F1FA48];
  if (v10)
  {
    outData.unsigned int value = 0;
    LODWORD(ioDataSize.CFDictionarySetValue(theDict, @"region", value) = 8;
    OSStatus Property = AudioQueueGetProperty(*(AudioQueueRef *)(a1 + 16), 0x7164646Cu, &outData, (UInt32 *)&ioDataSize);
    if (!Property)
    {
      CMTimeMakeWithSeconds(&v28, *(Float64 *)&outData.value, 1000000000);
      if (dword_1E9350D38)
      {
        LODWORD(inObjectID.CFDictionarySetValue(theDict, @"region", value) = 0;
        LOBYTE(type.CFDictionarySetValue(theDict, @"region", value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v14 = inObjectID.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
          *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&v28.value;
          *(void *)&time[0].mRateScalar = v28.epoch;
          Float64 Seconds = CMTimeGetSeconds((CMTime *)time);
          LODWORD(rhs.mSampleTime) = 136315650;
          *(void *)((char *)&rhs.mSampleTime + 4) = "faqts_getAudioQueueDynamicLatency";
          WORD2(rhs.mHostTime) = 2048;
          *(UInt64 *)((char *)&rhs.mHostTime + 6) = a1;
          HIWORD(rhs.mRateScalar) = 2048;
          *(Float64 *)&rhs.mWordClockTime = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  else
  {
    AudioDeviceID deviceIDOut = 0;
    double value_4 = NAN;
    unsigned int value = 0;
    *(_OWORD *)&outData.unsigned int value = v26;
    outData.CMTimeEpoch epoch = v5;
    *(_OWORD *)&ioDataSize.unsigned int value = v26;
    ioDataSize.CMTimeEpoch epoch = v5;
    *(_OWORD *)&inObjectID.unsigned int value = v26;
    inObjectID.CMTimeEpoch epoch = v5;
    CMTime type = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    *(_OWORD *)&v34.unsigned int value = v26;
    v34.CMTimeEpoch epoch = v5;
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"trsnptuo";
    OSStatus AudioDevice = CMAudioDeviceClockGetAudioDevice(a2, 0, &deviceIDOut, 0);
    if (AudioDevice) {
      goto LABEL_44;
    }
    if (!FigAudioDeviceSupportsPresentationTime())
    {
      OSStatus Property = -17921;
      goto LABEL_22;
    }
    OSStatus AudioDevice = faqts_getAudioQueueLatency(a1, &inObjectID);
    if (AudioDevice
      || (OSStatus AudioDevice = FigAudioDeviceGetCurrentDynamicLatency()) != 0
      || (UInt32 v33 = 8, (AudioDevice = AudioObjectGetPropertyData(deviceIDOut, &inAddress, 0, 0, &v33, &value_4)) != 0))
    {
LABEL_44:
      OSStatus Property = AudioDevice;
    }
    else
    {
      v31.mElement = 0;
      *(void *)&v31.mSelector = *(void *)"tlwhptuo";
      UInt32 v33 = 4;
      if (!AudioObjectGetPropertyData(deviceIDOut, &v31, 0, 0, &v33, &value))
      {
        CMTimeMake(&ioDataSize, value, (int)value_4);
        *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&inObjectID.value;
        *(void *)&time[0].mRateScalar = inObjectID.epoch;
        *(_OWORD *)&rhs.mSampleTime = *(_OWORD *)&ioDataSize.value;
        *(void *)&rhs.mRateScalar = ioDataSize.epoch;
        CMTimeSubtract(&type, (CMTime *)time, (CMTime *)&rhs);
      }
      *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&outData.value;
      *(void *)&time[0].mRateScalar = outData.epoch;
      *(_OWORD *)&rhs.mSampleTime = *(_OWORD *)&type.value;
      *(void *)&rhs.mRateScalar = type.epoch;
      CMTimeAdd(&v34, (CMTime *)time, (CMTime *)&rhs);
      if (dword_1E9350D38)
      {
        int v30 = 0;
        os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
        double v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      OSStatus Property = 0;
      CMTime v28 = v34;
    }
  }
LABEL_22:
  if (Property && faqts_getAudioQueueLatency(a1, &v28))
  {
    memset(time, 0, 64);
    memset(&rhs, 0, sizeof(rhs));
    outDatCGFloat a = *v11;
    uint64_t CurrentTime = AudioQueueDeviceGetCurrentTime(*(AudioQueueRef *)(a1 + 16), time);
    if (!CurrentTime)
    {
      if ((~time[0].mFlags & 3) != 0)
      {
LABEL_33:
        CMTime v28 = outData;
        goto LABEL_34;
      }
      LODWORD(inObjectID.CFDictionarySetValue(theDict, @"region", value) = 0;
      LODWORD(type.CFDictionarySetValue(theDict, @"region", value) = 0;
      inAddress.mSelector = 0;
      v31.mSelector = 0;
      PropertyDatCGFloat a = CMAudioDeviceClockGetAudioDevice(a2, 0, (AudioDeviceID *)&inObjectID, 0);
      if (PropertyData) {
        goto LABEL_48;
      }
      ioDataSize.unsigned int value = 0x6F75747073746D23;
      ioDataSize.CMTimeScale timescale = 0;
      LODWORD(v34.CFDictionarySetValue(theDict, @"region", value) = 4;
      uint64_t CurrentTime = AudioObjectGetPropertyData(inObjectID.value, (const AudioObjectPropertyAddress *)&ioDataSize, 0, 0, (UInt32 *)&v34, &type);
      if (CurrentTime) {
        return CurrentTime;
      }
      ioDataSize.unsigned int value = 0x676C6F626C746E63;
      ioDataSize.CMTimeScale timescale = 0;
      LODWORD(v34.CFDictionarySetValue(theDict, @"region", value) = 4;
      PropertyDatCGFloat a = AudioObjectGetPropertyData(type.value, (const AudioObjectPropertyAddress *)&ioDataSize, 0, 0, (UInt32 *)&v34, &inAddress);
      if (PropertyData {
        || (ioDataSize.unsigned int value = 0x6F7574706C746E63,
      }
            ioDataSize.CMTimeScale timescale = 0,
            LODWORD(v34.CFDictionarySetValue(theDict, @"region", value) = 4,
            PropertyDatCGFloat a = AudioObjectGetPropertyData(inObjectID.value, (const AudioObjectPropertyAddress *)&ioDataSize, 0, 0, (UInt32 *)&v34, &v31), PropertyData))
      {
LABEL_48:
        uint64_t v24 = PropertyData;
        FigSignalErrorAt();
        return v24;
      }
      time[0].mSampleTime = time[0].mSampleTime + (double)(v31.mSelector + inAddress.mSelector);
      time[0].mFlags = 1;
      rhs.mFlags = 2;
      uint64_t CurrentTime = AudioQueueDeviceTranslateTime(*(AudioQueueRef *)(a1 + 16), time, &rhs);
      if (!CurrentTime)
      {
        if ((rhs.mFlags & 2) != 0)
        {
          int64_t v21 = FigHostTimeToNanoseconds();
          CMTimeMake(&outData, v21, 1000000000);
        }
        goto LABEL_33;
      }
    }
    return CurrentTime;
  }
LABEL_34:
  LODWORD(rhs.mSampleTime) = 0;
  long long v27 = *(_OWORD *)&v11->value;
  *(_OWORD *)&time[0].mSampleTime = *(_OWORD *)&v11->value;
  Float64 v22 = *(double *)&v11->epoch;
  time[0].mRateScalar = v22;
  if (!FigPreferAudioSessionClock()
    && !faqts_getAudioDeviceScreenLatencyFromDevice(@"AirTunes", &rhs))
  {
    unsigned int mSampleTime_low = LODWORD(rhs.mSampleTime);
    if (!a3 || LODWORD(rhs.mSampleTime))
    {
LABEL_40:
      CMTimeMake((CMTime *)time, mSampleTime_low, 1000);
      *(_OWORD *)&rhs.mSampleTime = *(_OWORD *)&time[0].mSampleTime;
      rhs.mRateScalar = time[0].mRateScalar;
      *(_OWORD *)&outData.unsigned int value = v27;
      *(Float64 *)&outData.CMTimeEpoch epoch = v22;
      if (CMTimeCompare((CMTime *)&rhs, &outData))
      {
        outDatCGFloat a = v28;
        *(_OWORD *)&ioDataSize.unsigned int value = *(_OWORD *)&time[0].mSampleTime;
        ioDataSize.CMTimeEpoch epoch = *(void *)&time[0].mRateScalar;
        CMTimeSubtract((CMTime *)&rhs, &outData, &ioDataSize);
        *(_OWORD *)&v28.unsigned int value = *(_OWORD *)&rhs.mSampleTime;
        v28.CMTimeEpoch epoch = *(void *)&rhs.mRateScalar;
      }
      goto LABEL_42;
    }
    if (!faqts_getAudioDeviceScreenLatencyFromDevice(@"Nero", &rhs))
    {
      unsigned int mSampleTime_low = LODWORD(rhs.mSampleTime);
      goto LABEL_40;
    }
  }
LABEL_42:
  uint64_t v24 = 0;
  *a4 = v28;
  return v24;
}

uint64_t faqts_getAudioQueueLatency(uint64_t a1, CMTime *a2)
{
  outDatCGFloat a = 0.0;
  UInt32 ioDataSize = 8;
  uint64_t Property = AudioQueueGetProperty(*(AudioQueueRef *)(a1 + 16), 0x71646C73u, &outData, &ioDataSize);
  if (!Property)
  {
    CMTimeMakeWithSeconds(&v5, outData, 1000000000);
    *a2 = v5;
  }
  return Property;
}

uint64_t registerFigAudioQueueTimingShimType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAudioQueueTimingShimID = result;
  return result;
}

_DWORD *faqts_getAudioQueueStartErrorInternal(_DWORD *result)
{
  result[2] = *(_DWORD *)(*(void *)result + 24);
  return result;
}

void faqts_audioQueueStartInternal(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  if (*(unsigned char *)(a1 + 24))
  {
    if (dword_1E9350D38)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v5 = AudioQueueStartWithFlags();
  }
  else
  {
    if (dword_1E9350D38)
    {
      long long v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v5 = AudioQueueStart(*((AudioQueueRef *)v2 + 2), *((const AudioTimeStamp **)v2 + 17));
  }
  *((_DWORD *)v2 + 6) = v5;
  long long v6 = *(void (**)(void, uint64_t))(a1 + 8);
  if (v6) {
    v6(*(void *)(a1 + 16), v5);
  }
  uint64_t v7 = *(void (**)(void, void))(a1 + 32);
  if (v7) {
    v7(*(void *)(a1 + 40), 0);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

uint64_t faqts_getAudioDeviceScreenLatencyFromDevice(uint64_t a1, void *a2)
{
  inQualifierDatCGFloat a = a1;
  *(void *)&inAddress.mSelector = 0x676C6F6272756964;
  inAddress.mElement = 0;
  AudioObjectID inObjectID = 0;
  UInt32 ioDataSize = 4;
  PropertyDatCGFloat a = AudioObjectGetPropertyData(1u, &inAddress, 8u, &inQualifierData, &ioDataSize, &inObjectID);
  if (!PropertyData && inObjectID)
  {
    *(void *)&inAddress.mSelector = 0x6F7574706170736CLL;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    return AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, a2);
  }
  return PropertyData;
}

double faqts_init(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void faqts_finalize(uint64_t a1)
{
  CFTypeRef v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef faqts_copyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<FigAudioQueueTimingShim %p>", a1);
}

uint64_t editMentorEditsChanged()
{
  return FigDeferNotificationToDispatchQueue();
}

uint64_t EditMentorNewWithChildEditMentorAndSingleEditSegment(void *a1, uint64_t a2, void *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, 0, a1, 0, a2, 0, 0, a3);
}

uint64_t EditMentorNewWithMentorCallbacks(uint64_t a1, const void *a2, void *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, 0, 0, a1, 0, a2, 0, a3);
}

void *EditMentorSetDebugName(void *result, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = (const void *)result[38];
    if (v4) {
      CFRelease(v4);
    }
    if (cf) {
      double result = CFRetain(cf);
    }
    else {
      double result = 0;
    }
    v3[38] = result;
  }
  return result;
}

const char *editMentorGetModeChangePolicyStr(const __CFDictionary *a1)
{
  if (!a1) {
    return "default:preserve";
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"ModeChangePolicy");
  if (!Value) {
    return "default:preserve";
  }
  CFTypeRef v2 = Value;
  if (CFEqual(Value, @"PreservePreviousOutput")) {
    return "preserve";
  }
  if (CFEqual(v2, @"CancelPreviousOutput")) {
    return "cancel";
  }
  if (CFEqual(v2, @"RepurposeOrCancelPreviousOutput")) {
    return "repurpose";
  }
  else {
    return "default:preserve";
  }
}

uint64_t editMentorSetChildMentorModeToEmptyEdit(uint64_t a1, CMSampleBufferRef a2, uint64_t a3, int a4, uint64_t a5, const void *a6)
{
  CFTypeRef cf = 0;
  unsigned int v12 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(a1, (__CFDictionary **)&cf);
  CMSampleBufferRef v13 = 0;
  if (!a2)
  {
    if (a4 && *(unsigned char *)(a1 + 616))
    {
      char v14 = 0;
      *(unsigned char *)(a1 + 616) = 0;
    }
    else
    {
      char v14 = 1;
    }
    CMTimeFlags v15 = *(_DWORD *)(a3 + 12);
    CMTimeEpoch v16 = *(void *)(a3 + 16);
    CMSampleBufferRef v28 = 0;
    if ((v15 & 0x1D) == 1)
    {
      *(_OWORD *)&sampleTimingArray.duration.unsigned int value = *MEMORY[0x1E4F1FA48];
      CMTimeValue v17 = *(void *)a3;
      sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      sampleTimingArray.presentationTimeStamp.unsigned int value = v17;
      sampleTimingArray.presentationTimeStamp.CMTimeScale timescale = *(_DWORD *)(a3 + 8);
      sampleTimingArray.presentationTimeStamp.CMTimeFlags flags = v15;
      sampleTimingArray.presentationTimeStamp.CMTimeEpoch epoch = v16;
      sampleTimingArray.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      uint64_t v18 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v28);
      if (v18)
      {
        uint64_t v19 = v18;
        CMSampleBufferRef v13 = 0;
        if (!v12) {
          goto LABEL_29;
        }
LABEL_28:
        CFRelease(v12);
        goto LABEL_29;
      }
      uint64_t v20 = (const void *)*MEMORY[0x1E4F1CFD0];
      CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E4F1F258], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      if (*(_DWORD *)(a1 + 320) == 1) {
        CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E4F1F228], v20, 1u);
      }
      if ((v14 & 1) == 0)
      {
        CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E4F1F2A0], v20, 1u);
        if (*(_DWORD *)(a1 + 320) == 3) {
          CMSetAttachment(v28, (CFStringRef)*MEMORY[0x1E4F1F260], v20, 1u);
        }
      }
      MEMORY[0x19970E910](*(void *)(a1 + 272));
      int64_t v21 = *(void (**)(void, uint64_t, CMSampleBufferRef))(a1 + 248);
      if (v21) {
        v21(*(void *)(a1 + 264), a5, v28);
      }
      MEMORY[0x19970E930](*(void *)(a1 + 272));
      a2 = v28;
      CMSampleBufferRef v13 = v28;
    }
    else
    {
      a2 = 0;
      CMSampleBufferRef v13 = 0;
    }
  }
  if (*(void *)a1)
  {
    uint64_t v22 = VideoMentorSetModeToEmptyEdit(*(void *)a1, a2, (const __CFDictionary *)cf, a6, v12);
    goto LABEL_27;
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v23)
  {
    uint64_t v22 = AudioMentorSetModeToEmptyEdit(v23, a2, (const __CFDictionary *)cf, a6, v12);
    goto LABEL_27;
  }
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    uint64_t v22 = EditMentorSetModeToEmptyEdit(v24, (uint64_t)a2, cf, (uint64_t)a6, v12);
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v22 = (*(uint64_t (**)(void, CMSampleBufferRef, CFTypeRef, const void *, const void *))(a1 + 96))(*(void *)(a1 + 40), a2, cf, a6, v12);
LABEL_27:
    uint64_t v19 = v22;
    if (!v12) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v19 = 0;
  if (v12) {
    goto LABEL_28;
  }
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v19;
}

uint64_t EditMentorSetModeToReversePlayback(uint64_t a1, long long *a2, long long *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  char v25 = 1;
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((*((unsigned char *)a3 + 12) & 1) == 0)
  {
    uint64_t v14 = MEMORY[0x1E4F1FA08];
    *a3 = *MEMORY[0x1E4F1FA08];
    *((void *)a3 + 2) = *(void *)(v14 + 16);
  }
  editMentorStartNewParentOrder(a1, a4, a7);
  *(_DWORD *)(a1 + 320) = 3;
  long long v15 = *a3;
  *(void *)(a1 + 636) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 620) = v15;
  long long v16 = *a2;
  *(void *)(a1 + 660) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 644) = v16;
  CMTimeValue v17 = *(const void **)(a1 + 672);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 672) = 0;
  }
  long long v30 = 0u;
  memset(time, 0, sizeof(time));
  long long v18 = *(_OWORD *)(a1 + 636);
  long long v26 = *(_OWORD *)(a1 + 620);
  long long v27 = v18;
  long long v28 = *(_OWORD *)(a1 + 652);
  if (!editMentorSelectFirstEditSegmentForParentRange(a1, (uint64_t)&v26, &v25, (uint64_t)time))
  {
    long long v26 = *a2;
    *(void *)&long long v27 = *((void *)a2 + 2);
    uint64_t v19 = a1;
    int v20 = 1;
    uint64_t v21 = (uint64_t)a7;
    uint64_t v22 = a6;
    return editMentorSetChildMentorModeToEmptyEdit(v19, 0, (uint64_t)&v26, v20, v21, v22);
  }
  *(void *)(a1 + 672) = a6;
  if (a6) {
    CFRetain(a6);
  }
  if (v25)
  {
    long long v26 = *a2;
    *(void *)&long long v27 = *((void *)a2 + 2);
    uint64_t v19 = a1;
    int v20 = 0;
    uint64_t v21 = (uint64_t)a7;
    uint64_t v22 = 0;
    return editMentorSetChildMentorModeToEmptyEdit(v19, 0, (uint64_t)&v26, v20, v21, v22);
  }
  long long v26 = time[0];
  long long v27 = time[1];
  long long v28 = v30;
  return editMentorSetChildMentorModeToReversePlayback(a1, (uint64_t)&v26, a5);
}

uint64_t editMentorSetChildMentorModeToReversePlayback(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v19 = 0;
  long long v6 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(a1, &v19);
  uint64_t v7 = *(void *)a1;
  if (*(void *)a1)
  {
    long long v17 = *(_OWORD *)(a2 + 24);
    uint64_t v18 = *(void *)(a2 + 40);
    long long v15 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
    uint64_t v8 = VideoMentorSetModeToReversePlayback(v7, 0, (uint64_t)&v17, 0, &v15, v19, a3, 0, v6);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    long long v17 = *(_OWORD *)(a2 + 24);
    uint64_t v18 = *(void *)(a2 + 40);
    long long v15 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
    uint64_t v8 = AudioMentorSetModeToReversePlayback(v9, 0, (uint64_t)&v17, 0, (uint64_t)&v15, v19, 0, v6);
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    long long v17 = *(_OWORD *)(a2 + 24);
    uint64_t v18 = *(void *)(a2 + 40);
    long long v15 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
    uint64_t v8 = EditMentorSetModeToReversePlayback(v10, &v17, &v15, v19, a3, 0, v6);
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    long long v11 = *(uint64_t (**)(uint64_t, long long *, long long *, __CFDictionary *, const void *, void, const void *))(a1 + 88);
    uint64_t v12 = *(void *)(a1 + 40);
    long long v17 = *(_OWORD *)(a2 + 24);
    uint64_t v18 = *(void *)(a2 + 40);
    long long v15 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
    uint64_t v8 = v11(v12, &v17, &v15, v19, a3, 0, v6);
LABEL_9:
    uint64_t v13 = v8;
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
LABEL_11:
  if (v19) {
    CFRelease(v19);
  }
  return v13;
}

uint64_t EditMentorSetModeToEmptyEdit(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5)
{
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  editMentorStartNewParentOrder(a1, a3, a5);
  *(_DWORD *)(a1 + 320) = 0;
  long long v11 = *(const void **)(a1 + 672);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 672) = 0;
  }
  return editMentorSetChildMentorModeToEmptyEdit(a1, a2, MEMORY[0x1E4F1F9F8], 0, a5, a4);
}

uint64_t EditMentorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (editMentorPropertyNeedsToBeRescaled())
  {
    MEMORY[0x19970E910](*(void *)(a1 + 280));
    long long v6 = *(__CFDictionary **)(a1 + 288);
    if (a3) {
      CFDictionarySetValue(v6, a2, a3);
    }
    else {
      CFDictionaryRemoveValue(v6, a2);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 280));
  }

  return editMentorSetChildMentorProperty(a1, a2, a3);
}

BOOL editMentorPropertyNeedsToBeRescaled()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t editMentorSetChildMentorProperty(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  CFDictionaryRef v3 = a3;
  if (a3 && editMentorPropertyNeedsToBeRescaled())
  {
    CMTimeMakeFromDictionary(&v14, v3);
    CMTime time1 = *(CMTime *)(a1 + 440);
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2))
    {
      CMTime time2 = v14;
      CMTimeMultiplyTimeByTimeRatio();
      CMTime v14 = time1;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time1 = v14;
    CFDictionaryRef v3 = CMTimeCopyAsDictionary(&time1, v6);
    CFDictionaryRef v7 = v3;
  }
  else
  {
    CFDictionaryRef v7 = 0;
  }
  if (*(void *)a1)
  {
    uint64_t v8 = VideoMentorSetProperty(*(void *)a1, (uint64_t)a2, v3);
    goto LABEL_9;
  }
  if (*(void *)(a1 + 8))
  {
LABEL_13:
    uint64_t v9 = 0;
    if (!v7) {
      return v9;
    }
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v8 = EditMentorSetProperty(v11, a2, v3);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_13;
    }
    uint64_t v8 = (*(uint64_t (**)(void, const void *, const __CFDictionary *))(a1 + 104))(*(void *)(a1 + 40), a2, v3);
  }
LABEL_9:
  uint64_t v9 = v8;
  if (v7) {
LABEL_10:
  }
    CFRelease(v7);
  return v9;
}

void editMentorEditsChanged_deferred(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a2 + 312));
  if (!*(unsigned char *)(a2 + 566))
  {
    JUMPOUT(0x19970E930);
  }
  *(unsigned char *)(a2 + 566) = 0;
  CFDictionaryRef v3 = *(const void **)(a2 + 568);
  if (v3) {
    CFTypeRef v4 = CFRetain(v3);
  }
  else {
    CFTypeRef v4 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a2 + 312));
  editMentorAdvanceToNextEdit(a2, v4, *(_DWORD *)(a2 + 320), 0, 0);
  if (v4)
  {
    CFRelease(v4);
  }
}

void editMentorAdvanceToNextEdit(uint64_t a1, const void *a2, int a3, int a4, int a5)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  memset(&v91, 0, sizeof(v91));
  editMentorStartNewChildOrder(a1, (uint64_t)a2);
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    if (a4 && *(unsigned char *)(a1 + 297))
    {
      if (dword_1E9350D58)
      {
        LODWORD(v92.start.CFDictionarySetValue(theDict, @"region", value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v15 = a1;
      uint64_t v16 = a2;
      int v17 = 1;
LABEL_20:
      editMentorPostOrderCompletionNotification(v15, v16, v17);
      return;
    }
    uint64_t v11 = (CMTimeValue *)(a1 + 620);
    *(_OWORD *)&type.start.unsigned int value = *(_OWORD *)(a1 + 620);
    *(_OWORD *)&type.start.CMTimeEpoch epoch = *(_OWORD *)(a1 + 636);
    *(_OWORD *)&type.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 652);
    if (*(unsigned char *)(a1 + 562))
    {
LABEL_10:
      if (!a5 && *(unsigned char *)(a1 + 616))
      {
        uint64_t v12 = (CMTimeEpoch *)(a1 + 636);
        if (a3 == 2)
        {
          v100.start.CMTimeScale timescale = *(_DWORD *)(a1 + 652);
          v100.start.unsigned int value = *(void *)(a1 + 644);
          uint64_t v13 = (CMTimeFlags *)(a1 + 656);
          uint64_t v12 = (CMTimeEpoch *)(a1 + 660);
        }
        else
        {
          v100.start.unsigned int value = *v11;
          v100.start.CMTimeScale timescale = *(_DWORD *)(a1 + 628);
          uint64_t v13 = (CMTimeFlags *)(a1 + 632);
        }
        CMTimeFlags v18 = *v13;
        if (v18)
        {
          CMTimeEpoch v19 = *v12;
          range.start.unsigned int value = v100.start.value;
          range.start.CMTimeScale timescale = v100.start.timescale;
          range.start.CMTimeFlags flags = v18;
          range.start.CMTimeEpoch epoch = v19;
          editMentorSetChildMentorModeToEmptyEdit(a1, 0, (uint64_t)&range, 1, (uint64_t)a2, 0);
          return;
        }
      }
      uint64_t v15 = a1;
      uint64_t v16 = a2;
      int v17 = a5;
      goto LABEL_20;
    }
    if (*(unsigned char *)(a1 + 560))
    {
      *(unsigned char *)(a1 + 560) = 0;
      CMTime v14 = (unsigned char *)(a1 + 565);
      *(unsigned char *)(a1 + 565) = editMentorCurrentEditIsLastOpenEndedEdit(a1);
LABEL_66:
      long long v57 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 400);
      *(_OWORD *)&v99.start.unsigned int value = v57;
      long long v58 = *(_OWORD *)(a1 + 448);
      *(_OWORD *)&v99.start.CMTimeEpoch epoch = *(_OWORD *)(a1 + 432);
      *(_OWORD *)&v99.duration.CMTimeScale timescale = v58;
      long long v59 = *(_OWORD *)(a1 + 384);
      *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)(a1 + 368);
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v59;
      CMTimeRange v100 = type;
      if (editMentorDoesEditSegmentIntersectTrackRange((uint64_t)&range, (uint64_t)&v100))
      {
        if ((*(unsigned char *)(a1 + 380) & 1) == 0)
        {
          int v60 = *(unsigned __int8 *)(a1 + 561);
LABEL_117:
          *(_OWORD *)&v100.start.unsigned int value = *(_OWORD *)(a1 + 416);
          v100.start.CMTimeEpoch epoch = *(void *)(a1 + 432);
          if (v60 != (a3 == 3))
          {
            long long v82 = *(_OWORD *)(a1 + 432);
            *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)(a1 + 416);
            *(_OWORD *)&range.start.CMTimeEpoch epoch = v82;
            *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 448);
            CMTimeRangeGetEnd(&v100.start, &range);
            int v60 = *(unsigned __int8 *)(a1 + 561);
          }
          *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)&v100.start.value;
          range.start.CMTimeEpoch epoch = v100.start.epoch;
          int v81 = editMentorSetChildMentorModeToEmptyEdit(a1, 0, (uint64_t)&range, v60, (uint64_t)a2, 0);
          goto LABEL_120;
        }
        CMTimeRange v100 = type;
        long long v63 = *(_OWORD *)(a1 + 416);
        *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 400);
        *(_OWORD *)&v99.start.unsigned int value = v63;
        long long v64 = *(_OWORD *)(a1 + 448);
        *(_OWORD *)&v99.start.CMTimeEpoch epoch = *(_OWORD *)(a1 + 432);
        *(_OWORD *)&v99.duration.CMTimeScale timescale = v64;
        long long v65 = *(_OWORD *)(a1 + 384);
        *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)(a1 + 368);
        *(_OWORD *)&range.start.CMTimeEpoch epoch = v65;
        editMentorIntersectTrackRangeWithEditSegmentAndMapToMediaRange(a1, (long long *)&v100.start.value, (long long *)&range.start.value, (uint64_t)&v91);
        editMentorUpdateChildMentorProperties(a1);
        int v66 = *(unsigned __int8 *)(a1 + 563);
        MEMORY[0x19970E910](*(void *)(a1 + 312));
        CFMutableArrayRef Mutable = *(__CFDictionary **)(a1 + 608);
        CMTime v68 = (const void **)MEMORY[0x1E4F1CFD0];
        if (v66 && !Mutable)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(a1 + 608) = Mutable;
          if (Mutable) {
            goto LABEL_77;
          }
          FigSignalErrorAt();
          CFMutableArrayRef Mutable = *(__CFDictionary **)(a1 + 608);
        }
        if (!Mutable)
        {
LABEL_94:
          MEMORY[0x19970E930](*(void *)(a1 + 312));
          int v75 = *(unsigned __int8 *)(a1 + 564);
          MEMORY[0x19970E910](*(void *)(a1 + 312));
          CMTime v76 = *(__CFDictionary **)(a1 + 608);
          if (v75 && !v76)
          {
            CMTime v76 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            *(void *)(a1 + 608) = v76;
            if (v76) {
              goto LABEL_100;
            }
            FigSignalErrorAt();
            CMTime v76 = *(__CFDictionary **)(a1 + 608);
          }
          if (!v76) {
            goto LABEL_102;
          }
          if (!v75)
          {
            CFDictionaryRemoveValue(v76, @"OrderIsContinuousWithPreviousOrder");
LABEL_102:
            MEMORY[0x19970E930](*(void *)(a1 + 312));
            if (!*(unsigned char *)(a1 + 566))
            {
              CMTimeRange range = v91;
              if (a3 == 2) {
                int v81 = editMentorSetChildMentorModeToForwardPlayback(a1, (long long *)&range.start.value, 0);
              }
              else {
                int v81 = editMentorSetChildMentorModeToReversePlayback(a1, (uint64_t)&range, 0);
              }
LABEL_120:
              if (v81)
              {
                uint64_t v83 = FigMentorNotificationPayloadCreate(@"MentorStoppingDueToError", a2, v81, *(unsigned __int8 *)(a1 + 296), *(const void **)(a1 + 672), a5);
                uint64_t v84 = *(const void **)(a1 + 672);
                if (v84)
                {
                  CFRelease(v84);
                  *(void *)(a1 + 672) = 0;
                }
                LODWORD(v92.start.CFDictionarySetValue(theDict, @"region", value) = 0;
                uint64_t v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int value = v92.start.value;
                if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v87 = value;
                }
                else {
                  unsigned int v87 = value & 0xFFFFFFFE;
                }
                if (v87)
                {
                  CMTimeValue v88 = *(void *)(a1 + 304);
                  if (*(unsigned char *)(a1 + 296)) {
                    CFIndex v89 = "YES";
                  }
                  else {
                    CFIndex v89 = "NO";
                  }
                  LODWORD(v100.start.CFDictionarySetValue(theDict, @"region", value) = 136315906;
                  *(CMTimeValue *)((char *)&v100.start.value + 4) = (CMTimeValue)"editMentorAdvanceToNextEdit";
                  LOWORD(v100.start.flags) = 2048;
                  *(void *)((char *)&v100.start.flags + 2) = a1;
                  HIWORD(v100.start.epoch) = 2114;
                  v100.duration.unsigned int value = v88;
                  LOWORD(v100.duration.timescale) = 2082;
                  *(void *)((char *)&v100.duration.timescale + 2) = v89;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
                if (v83) {
                  CFRelease(v83);
                }
              }
              return;
            }
LABEL_103:
            if (dword_1E9350D58)
            {
              LODWORD(v92.start.CFDictionarySetValue(theDict, @"region", value) = 0;
              CMTime v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v78 = v92.start.value;
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v79 = v78;
              }
              else {
                unsigned int v79 = v78 & 0xFFFFFFFE;
              }
              if (v79)
              {
                CMTimeValue v80 = *(void *)(a1 + 304);
                LODWORD(v100.start.CFDictionarySetValue(theDict, @"region", value) = 136315650;
                *(CMTimeValue *)((char *)&v100.start.value + 4) = (CMTimeValue)"editMentorAdvanceToNextEdit";
                LOWORD(v100.start.flags) = 2048;
                *(void *)((char *)&v100.start.flags + 2) = a1;
                HIWORD(v100.start.epoch) = 2114;
                v100.duration.unsigned int value = v80;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (*(unsigned char *)(a1 + 680)) {
              editMentorPostSyntheticPrerollCompleteNotification(a1, a2);
            }
            return;
          }
LABEL_100:
          CFDictionarySetValue(v76, @"OrderIsContinuousWithPreviousOrder", *v68);
          goto LABEL_102;
        }
        if (!v66)
        {
          CFDictionaryRemoveValue(Mutable, @"ContinueFromPreviousOrder");
          goto LABEL_94;
        }
LABEL_77:
        CFDictionarySetValue(Mutable, @"ContinueFromPreviousOrder", *v68);
        goto LABEL_94;
      }
LABEL_69:
      if (*(_DWORD *)(a1 + 320) == 2)
      {
        memset(&v100, 0, 24);
        long long v61 = *(_OWORD *)(a1 + 432);
        *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)(a1 + 416);
        *(_OWORD *)&range.start.CMTimeEpoch epoch = v61;
        *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 448);
        CMTimeRangeGetEnd(&v100.start, &range);
        *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)&v100.start.value;
        range.start.CMTimeEpoch epoch = v100.start.epoch;
        *(_OWORD *)&v92.start.unsigned int value = *(_OWORD *)&type.duration.value;
        v92.start.CMTimeEpoch epoch = type.duration.epoch;
        CFStringRef v62 = &v92;
      }
      else
      {
        *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)&type.start.value;
        range.start.CMTimeEpoch epoch = type.start.epoch;
        *(_OWORD *)&v100.start.unsigned int value = *(_OWORD *)(a1 + 416);
        v100.start.CMTimeEpoch epoch = *(void *)(a1 + 432);
        CFStringRef v62 = &v100;
      }
      int32_t v69 = CMTimeCompare(&range.start, &v62->start);
      if (!*v14)
      {
        if (*(unsigned char *)(a1 + 561) || (v69 & 0x80000000) == 0) {
          goto LABEL_10;
        }
        if (dword_1E9350D58)
        {
          LODWORD(v92.start.CFDictionarySetValue(theDict, @"region", value) = 0;
          LOBYTE(start.CFDictionarySetValue(theDict, @"region", value) = 0;
          CMTimeFlags v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v71 = v92.start.value;
          if (os_log_type_enabled(v70, start.value)) {
            unsigned int v72 = v71;
          }
          else {
            unsigned int v72 = v71 & 0xFFFFFFFE;
          }
          if (v72)
          {
            CMTimeValue v73 = *(void *)(a1 + 304);
            if (*(_DWORD *)(a1 + 320) == 2) {
              CMTime v74 = "forward";
            }
            else {
              CMTime v74 = "reverse";
            }
            LODWORD(v100.start.CFDictionarySetValue(theDict, @"region", value) = 136315906;
            *(CMTimeValue *)((char *)&v100.start.value + 4) = (CMTimeValue)"editMentorSelectNextEditSegmentForParentRange";
            LOWORD(v100.start.flags) = 2048;
            *(void *)((char *)&v100.start.flags + 2) = a1;
            HIWORD(v100.start.epoch) = 2114;
            v100.duration.unsigned int value = v73;
            LOWORD(v100.duration.timescale) = 2082;
            *(void *)((char *)&v100.duration.timescale + 2) = v74;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        int v60 = 1;
        *(unsigned char *)(a1 + 561) = 1;
        goto LABEL_117;
      }
      if ((v69 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      *(unsigned char *)(a1 + 566) = 1;
      goto LABEL_103;
    }
    long long v20 = *(_OWORD *)(a1 + 636);
    *(_OWORD *)&v92.start.unsigned int value = *(_OWORD *)v11;
    *(_OWORD *)&v92.start.CMTimeEpoch epoch = v20;
    *(_OWORD *)&v92.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 652);
    MEMORY[0x19970E910](*(void *)(a1 + 344));
    uint64_t v21 = *(void *)(a1 + 336);
    if (!v21) {
      goto LABEL_64;
    }
    uint64_t v22 = (_OWORD *)(a1 + 416);
    CMTime start = *(CMTime *)(a1 + 416);
    int v23 = *(_DWORD *)(a1 + 320);
    if (v23 == 2)
    {
      long long v24 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)&range.start.unsigned int value = *v22;
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v24;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 448);
      CMTimeRangeGetEnd(&start, &range);
      int v23 = *(_DWORD *)(a1 + 320);
      uint64_t v21 = *(void *)(a1 + 336);
    }
    if (v23 == 2) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = 0xFFFFFFFFLL;
    }
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    long long v28 = (_OWORD *)(a1 + 368);
    os_log_type_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 16);
    if (v29)
    {
      int v30 = v29(v21, v25);
      if (v30 == -12520)
      {
        editMentorSetCurrentConsolidatedEdit(a1, 0);
        if (*(unsigned char *)(a1 + 565))
        {
          memset(&v99, 0, sizeof(v99));
          memset(&range, 0, sizeof(range));
          uint64_t v31 = *(void *)(a1 + 336);
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v33 = v32 ? v32 : 0;
          uint64_t v45 = *(unsigned int (**)(uint64_t, CMTimeRange *))(v33 + 24);
          if (v45)
          {
            if (!v45(v31, &range))
            {
              CMTimeRange v100 = range;
              CMTimeRangeGetEnd(&v96, &v100);
              long long v46 = *(_OWORD *)(a1 + 384);
              *(_OWORD *)&v100.start.unsigned int value = *v28;
              *(_OWORD *)&v100.start.CMTimeEpoch epoch = v46;
              *(_OWORD *)&v100.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 400);
              CMTimeRangeGetEnd(&time1, &v100);
              if (CMTimeCompare(&v96, &time1) >= 1)
              {
                long long v47 = *(_OWORD *)&range.duration.timescale;
                long long v48 = *(_OWORD *)&v99.start.value;
                *(_OWORD *)(a1 + 496) = *(_OWORD *)&range.duration.timescale;
                *(_OWORD *)(a1 + 512) = v48;
                long long v49 = *(_OWORD *)&v99.duration.timescale;
                *(_OWORD *)(a1 + 528) = *(_OWORD *)&v99.start.epoch;
                *(_OWORD *)(a1 + 544) = v49;
                long long v50 = *(_OWORD *)&range.start.value;
                long long v51 = *(_OWORD *)&range.start.epoch;
                *(_OWORD *)(a1 + 464) = *(_OWORD *)&range.start.value;
                *(_OWORD *)(a1 + 480) = v51;
                *(_OWORD *)&v100.start.unsigned int value = v50;
                *(_OWORD *)&v100.start.CMTimeEpoch epoch = v51;
                *(_OWORD *)&v100.duration.CMTimeScale timescale = v47;
                CMTimeRangeGetEnd(&lhs, &v100);
                range.duratioCFIndex n = lhs;
                long long v52 = *(_OWORD *)(a1 + 384);
                *(_OWORD *)&v100.start.unsigned int value = *v28;
                *(_OWORD *)&v100.start.CMTimeEpoch epoch = v52;
                *(_OWORD *)&v100.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 400);
                CMTimeRangeGetEnd(&lhs, &v100);
                range.CMTime start = lhs;
                CMTime lhs = range.duration;
                CMTime rhs = range.start;
                CMTimeSubtract(&v100.start, &lhs, &rhs);
                range.duratioCFIndex n = v100.start;
                CMTimeRange v100 = v99;
                CMTimeRangeGetEnd(&lhs, &v100);
                v99.duratioCFIndex n = lhs;
                long long v53 = *(_OWORD *)(a1 + 432);
                *(_OWORD *)&v100.start.unsigned int value = *v22;
                *(_OWORD *)&v100.start.CMTimeEpoch epoch = v53;
                *(_OWORD *)&v100.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 448);
                CMTimeRangeGetEnd(&lhs, &v100);
                v99.CMTime start = lhs;
                CMTime lhs = v99.duration;
                CMTime rhs = v99.start;
                CMTimeSubtract(&v100.start, &lhs, &rhs);
                v99.duratioCFIndex n = v100.start;
                long long v54 = *(_OWORD *)&v99.start.value;
                *(_OWORD *)(a1 + 400) = *(_OWORD *)&range.duration.timescale;
                *(_OWORD *)(a1 + 416) = v54;
                long long v55 = *(_OWORD *)&v99.duration.timescale;
                *(_OWORD *)(a1 + 432) = *(_OWORD *)&v99.start.epoch;
                *(_OWORD *)(a1 + 448) = v55;
                long long v56 = *(_OWORD *)&range.start.epoch;
                *long long v28 = *(_OWORD *)&range.start.value;
                *(_OWORD *)(a1 + 384) = v56;
                int v43 = 1;
                *(unsigned char *)(a1 + 563) = 1;
                goto LABEL_65;
              }
            }
          }
        }
LABEL_64:
        int v43 = 0;
LABEL_65:
        MEMORY[0x19970E930](*(void *)(a1 + 344));
        CMTime v14 = (unsigned char *)(a1 + 565);
        *(unsigned char *)(a1 + 565) = editMentorCurrentEditIsLastOpenEndedEdit(a1);
        if (!v43) {
          goto LABEL_69;
        }
        goto LABEL_66;
      }
    }
    else
    {
      int v30 = -12782;
    }
    long long v34 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)&v100.start.unsigned int value = *v28;
    v100.start.CMTimeEpoch epoch = *(void *)(a1 + 384);
    memset(&v96, 0, sizeof(v96));
    long long v35 = *(_OWORD *)(a1 + 400);
    *(_OWORD *)&range.start.unsigned int value = *v28;
    *(_OWORD *)&range.start.CMTimeEpoch epoch = v34;
    *(_OWORD *)&range.duration.CMTimeScale timescale = v35;
    CMTimeRangeGetEnd(&v96, &range);
    if (v30)
    {
      int v43 = 0;
    }
    else
    {
      *(_WORD *)(a1 + 563) = 0;
      uint64_t v36 = *(void *)(a1 + 336);
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      CFArrayRef v39 = *(unsigned int (**)(uint64_t, uint64_t))(v38 + 24);
      if (v39)
      {
        if (!v39(v36, a1 + 368))
        {
          CMTimeRange range = v92;
          if (editMentorConsolidateCurrentEdit(a1, &range))
          {
LABEL_58:
            int v43 = 1;
            goto LABEL_65;
          }
          int v40 = *(_DWORD *)(a1 + 320);
          if (v40 == 3)
          {
            long long v44 = *(_OWORD *)(a1 + 384);
            *(_OWORD *)&range.start.unsigned int value = *v28;
            *(_OWORD *)&range.start.CMTimeEpoch epoch = v44;
            *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 400);
            CMTimeRangeGetEnd(&time1, &range);
            *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)&v100.start.value;
            range.start.CMTimeEpoch epoch = v100.start.epoch;
            p_CMTime time1 = (CMTimeRange *)&time1;
            p_CMTimeRange range = &range;
          }
          else
          {
            if (v40 != 2)
            {
LABEL_56:
              *(_OWORD *)&range.start.unsigned int value = *v22;
              range.start.CMTimeEpoch epoch = *(void *)(a1 + 432);
              CMTime lhs = start;
              if (CMTimeCompare(&range.start, &lhs)) {
                FigSignalErrorAt();
              }
              goto LABEL_58;
            }
            *(_OWORD *)&range.start.unsigned int value = *v28;
            range.start.CMTimeEpoch epoch = *(void *)(a1 + 384);
            CMTime time1 = v96;
            p_CMTime time1 = &range;
            p_CMTimeRange range = (CMTimeRange *)&time1;
          }
          if (!CMTimeCompare(&p_time1->start, &p_range->start)) {
            *(unsigned char *)(a1 + 564) = 1;
          }
          if (*(_DWORD *)(a1 + 320) == 3)
          {
            CMTime lhs = start;
            CMTime rhs = *(CMTime *)(a1 + 440);
            CMTimeSubtract(&range.start, &lhs, &rhs);
            CMTime start = range.start;
            if ((~*(_DWORD *)(a1 + 452) & 5) == 0)
            {
              *(_OWORD *)&start.unsigned int value = *v22;
              start.CMTimeEpoch epoch = *(void *)(a1 + 432);
            }
          }
          goto LABEL_56;
        }
        int v43 = 1;
      }
      else
      {
        int v43 = 1;
      }
    }
    FigSignalErrorAt();
    goto LABEL_65;
  }

  editMentorPostOrderCompletionNotification(a1, a2, 0);
}

uint64_t editMentorPostSyntheticPrerollCompleteNotification(uint64_t a1, const void *a2)
{
  CFTypeRef v4 = FigMentorPrerollCompletePayloadCreate(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x19970E910](*(void *)(a1 + 312));
  if (*(const void **)(a1 + 568) == a2) {
    *(unsigned char *)(a1 + 680) = 0;
  }
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x19970E930](*(void *)(a1 + 312));
}

unint64_t editMentorCurrentEditIsLastOpenEndedEdit(uint64_t a1)
{
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970E910](*(void *)(a1 + 344));
  CFTypeRef v2 = *(const void **)(a1 + 336);
  if (!v2)
  {
    MEMORY[0x19970E930](*(void *)(a1 + 344));
    CFTypeRef v6 = 0;
    CFTypeRef v3 = 0;
LABEL_9:
    unint64_t v7 = 0;
    char v8 = 1;
    goto LABEL_22;
  }
  CFTypeRef v3 = CFRetain(v2);
  MEMORY[0x19970E930](*(void *)(a1 + 344));
  if (!v3)
  {
    CFTypeRef v6 = 0;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 320) != 2 || !*(unsigned char *)(a1 + 617))
  {
LABEL_21:
    CFTypeRef v6 = 0;
    char v8 = 0;
    unint64_t v7 = 0;
    goto LABEL_22;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v9 = *(void (**)(CFTypeRef, CFTypeRef *))(v5 + 8);
  if (!v9)
  {
    unint64_t v7 = 0;
    goto LABEL_27;
  }
  v9(v3, &cf);
  unint64_t v7 = (unint64_t)cf;
  if (!cf)
  {
LABEL_27:
    CFRelease(v3);
    return v7;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int (**)(unint64_t, uint64_t))(v11 + 16);
  if (!v12 || v12(v7, 1) != -12520) {
    goto LABEL_21;
  }
  uint64_t FigBaseObject = FigEditCursorGetFigBaseObject(v3);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  int v17 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v15 + 48);
  if (v17)
  {
    v17(FigBaseObject, @"TimeRangesMayIncrease", *MEMORY[0x1E4F1CF80], &v18);
    CFTypeRef v6 = v18;
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  char v8 = 0;
  unint64_t v7 = v6 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
LABEL_22:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef v6 = v18;
  }
  if (v6) {
    CFRelease(v6);
  }
  if ((v8 & 1) == 0) {
    goto LABEL_27;
  }
  return v7;
}

uint64_t editMentorDoesEditSegmentIntersectTrackRange(uint64_t a1, uint64_t a2)
{
  memset(&v8, 0, sizeof(v8));
  if ((*(_DWORD *)(a2 + 36) & 0x1D) == 1)
  {
    *(_OWORD *)&v6.start.unsigned int value = *(_OWORD *)(a2 + 24);
    v6.start.CMTimeEpoch epoch = *(void *)(a2 + 40);
    CMTime time2 = *(CMTime *)(a1 + 48);
    if (CMTimeCompare(&v6.start, &time2) < 1) {
      return 0;
    }
  }
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v6.start.unsigned int value = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v6.start.CMTimeEpoch epoch = v4;
  *(_OWORD *)&v6.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 80);
  CMTimeRangeGetEnd(&v8, &v6);
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1
    && (v6.start = v8, CMTime time2 = *(CMTime *)a2, CMTimeCompare(&v6.start, &time2) < 1))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

void editMentorUpdateChildMentorProperties(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 280));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 288), (CFDictionaryApplierFunction)editMentorUpdateChildMentorProperties_applier, (void *)a1);

  JUMPOUT(0x19970E930);
}

void editMentorSetCurrentConsolidatedEdit(uint64_t a1, const void *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 360));
  long long v4 = *(const void **)(a1 + 352);
  *(void *)(a1 + 352) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }

  JUMPOUT(0x19970E930);
}

uint64_t editMentorConsolidateCurrentEdit(uint64_t a1, _OWORD *a2)
{
  CFTypeRef v64 = 0;
  v65[0] = 0;
  if (*(unsigned char *)(a1 + 681))
  {
    long long v4 = *(_OWORD *)(a1 + 416);
    *(_OWORD *)&value.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 400);
    *(_OWORD *)&v63.start.CMTimeRange value = v4;
    long long v5 = *(_OWORD *)(a1 + 448);
    *(_OWORD *)&v63.start.CMTimeEpoch epoch = *(_OWORD *)(a1 + 432);
    *(_OWORD *)&v63.duration.CMTimeScale timescale = v5;
    long long v6 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)&value.start.CMTimeRange value = *(_OWORD *)(a1 + 368);
    *(_OWORD *)&value.start.CMTimeEpoch epoch = v6;
    if (*(_DWORD *)(a1 + 320) == 3) {
      uint64_t v7 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v7 = 1;
    }
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &editMentorCMTimeMappingArrayCallbacks);
    if (Mutable)
    {
      CFTypeRef v10 = 0;
      long long v44 = (_OWORD *)(a1 + 368);
      CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      long long v49 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
      long long v50 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
      long long v47 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
      long long v48 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
      long long v45 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
      long long v46 = *MEMORY[0x1E4F1FA00];
      while (1)
      {
        *(_OWORD *)&v60.duration.CMTimeScale timescale = v50;
        *(_OWORD *)&v61.start.CMTimeRange value = v49;
        *(_OWORD *)&v61.start.CMTimeEpoch epoch = v48;
        *(_OWORD *)&v61.duration.CMTimeScale timescale = v47;
        *(_OWORD *)&v60.start.CMTimeRange value = v46;
        *(_OWORD *)&v60.start.CMTimeEpoch epoch = v45;
        if (v10)
        {
          CFRelease(v10);
          v65[0] = 0;
        }
        uint64_t v12 = *(void *)(a1 + 336);
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v14 + 8);
        if (!v15)
        {
          uint64_t v37 = 4294954514;
          goto LABEL_61;
        }
        uint64_t v16 = v15(v12, v65);
        if (v16) {
          goto LABEL_69;
        }
        if (v64)
        {
          CFRelease(v64);
          CFTypeRef v64 = 0;
        }
        uint64_t FigBaseObject = FigEditCursorGetFigBaseObject(v65[0]);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        long long v20 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v19 + 48);
        if (v20) {
          v20(FigBaseObject, @"TimeRangesMayIncrease", v8, &v64);
        }
        CFTypeRef v22 = v64;
        CFTypeRef v21 = v65[0];
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v24 = v23 ? v23 : 0;
        uint64_t v25 = *(uint64_t (**)(CFTypeRef, uint64_t))(v24 + 16);
        if (v25)
        {
          int v26 = v25(v21, v7);
          BOOL v27 = v26 == -12520;
          if (v22 == v11 && v26 == -12520) {
            goto LABEL_49;
          }
        }
        else
        {
          BOOL v27 = 0;
        }
        if (*(_DWORD *)(a1 + 320) == 3)
        {
          CFArrayInsertValueAtIndex(Mutable, 0, &value);
          if (v27) {
            goto LABEL_49;
          }
        }
        else
        {
          CFArrayAppendValue(Mutable, &value);
          if (v27) {
            goto LABEL_49;
          }
        }
        CFTypeRef v28 = v65[0];
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v30 = v29 ? v29 : 0;
        uint64_t v31 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v30 + 24);
        if (!v31) {
          break;
        }
        uint64_t v32 = v31(v28, &v60);
        if (v32)
        {
          uint64_t v37 = v32;
          goto LABEL_56;
        }
        if (*(_DWORD *)(a1 + 320) == 3)
        {
          CMTimeRange range = v60;
          CMTimeRangeGetEnd(&v59, &range);
          *(_OWORD *)&range.start.CMTimeRange value = *(_OWORD *)&value.start.value;
          range.start.CMTimeEpoch epoch = value.start.epoch;
          p_CMTime time1 = &v59;
        }
        else
        {
          CMTimeRange range = value;
          CMTimeRangeGetEnd(&time1, &range);
          *(_OWORD *)&range.start.CMTimeRange value = *(_OWORD *)&v60.start.value;
          range.start.CMTimeEpoch epoch = v60.start.epoch;
          p_CMTime time1 = &time1;
        }
        if (CMTimeCompare(p_time1, &range.start)
          || (CMTimeRange range = v60,
              CMTimeRange v57 = v61,
              long long v34 = a2[1],
              v55[0] = *a2,
              v55[1] = v34,
              v55[2] = a2[2],
              !editMentorDoesEditSegmentIntersectTrackRange((uint64_t)&range, (uint64_t)v55)))
        {
LABEL_49:
          if (CFArrayGetCount(Mutable) < 1)
          {
            editMentorSetCurrentConsolidatedEdit(a1, 0);
            uint64_t v37 = 0;
          }
          else
          {
            editMentorSetCurrentConsolidatedEdit(a1, Mutable);
            if (*(_DWORD *)(a1 + 320) == 3)
            {
              if (value.start.flags)
              {
                long long v38 = *(_OWORD *)(a1 + 384);
                *(_OWORD *)&v60.start.CMTimeRange value = *v44;
                *(_OWORD *)&v60.start.CMTimeEpoch epoch = v38;
                *(_OWORD *)&v60.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 400);
                CMTimeRangeGetEnd(&lhs, &v60);
                *(_OWORD *)&range.start.CMTimeRange value = *(_OWORD *)&value.start.value;
                range.start.CMTimeEpoch epoch = value.start.epoch;
                CMTimeSubtract(&v60.start, &lhs, &range.start);
                value.duratioCFIndex n = v60.start;
              }
              long long v39 = *(_OWORD *)(a1 + 432);
              *(_OWORD *)&v60.start.CMTimeRange value = *(_OWORD *)(a1 + 416);
              *(_OWORD *)&v60.start.CMTimeEpoch epoch = v39;
              *(_OWORD *)&v60.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 448);
              CMTimeRangeGetEnd(&v53, &v60);
              *(_OWORD *)&range.start.CMTimeRange value = *(_OWORD *)&v63.start.value;
              range.start.CMTimeEpoch epoch = v63.start.epoch;
              CMTimeSubtract(&v60.start, &v53, &range.start);
              uint64_t v37 = 0;
              v63.duratioCFIndex n = v60.start;
              long long v40 = *(_OWORD *)&v63.start.value;
              *(_OWORD *)(a1 + 400) = *(_OWORD *)&value.duration.timescale;
              *(_OWORD *)(a1 + 416) = v40;
              long long v41 = *(_OWORD *)&v63.duration.timescale;
              *(_OWORD *)(a1 + 432) = *(_OWORD *)&v63.start.epoch;
              *(_OWORD *)(a1 + 448) = v41;
              long long v42 = *(_OWORD *)&value.start.epoch;
              _OWORD *v44 = *(_OWORD *)&value.start.value;
              *(_OWORD *)(a1 + 384) = v42;
            }
            else
            {
              if (value.start.flags)
              {
                CMTimeRange v60 = value;
                CMTimeRangeGetEnd(&v52, &v60);
                *(_OWORD *)&range.start.CMTimeRange value = *v44;
                range.start.CMTimeEpoch epoch = *(void *)(a1 + 384);
                CMTimeSubtract(&v60.start, &v52, &range.start);
                *(_OWORD *)(a1 + 392) = *(_OWORD *)&v60.start.value;
                *(void *)(a1 + 408) = v60.start.epoch;
              }
              CMTimeRange v60 = v63;
              CMTimeRangeGetEnd(&v51, &v60);
              *(_OWORD *)&range.start.CMTimeRange value = *(_OWORD *)(a1 + 416);
              range.start.CMTimeEpoch epoch = *(void *)(a1 + 432);
              CMTimeSubtract(&v60.start, &v51, &range.start);
              uint64_t v37 = 0;
              *(_OWORD *)(a1 + 440) = *(_OWORD *)&v60.start.value;
              *(void *)(a1 + 456) = v60.start.epoch;
            }
          }
          goto LABEL_61;
        }
        long long v35 = *(const void **)(a1 + 336);
        CFTypeRef v36 = v65[0];
        *(CFTypeRef *)(a1 + 336) = v65[0];
        if (v36) {
          CFRetain(v36);
        }
        if (v35) {
          CFRelease(v35);
        }
        CMTimeRange value = v60;
        CMTimeRange v63 = v61;
        CFTypeRef v10 = v65[0];
      }
      uint64_t v37 = 4294954514;
LABEL_56:
      FigSignalErrorAt();
      goto LABEL_61;
    }
    uint64_t v16 = FigSignalErrorAt();
LABEL_69:
    uint64_t v37 = v16;
LABEL_61:
    if (v64) {
      CFRelease(v64);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    uint64_t v37 = 0;
  }
  if (v65[0]) {
    CFRelease(v65[0]);
  }
  return v37;
}

__n128 editMentorCMTimeMappingArrayRetainCallback(const __CFAllocator *a1, uint64_t a2)
{
  CFTypeRef v3 = CFAllocatorAllocate(a1, 96, 0);
  if (v3)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    _OWORD *v3 = *(_OWORD *)a2;
    v3[1] = v5;
    __n128 result = *(__n128 *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 48);
    long long v7 = *(_OWORD *)(a2 + 80);
    v3[4] = *(_OWORD *)(a2 + 64);
    v3[5] = v7;
    v3[2] = result;
    v3[3] = v6;
  }
  return result;
}

CFStringRef editMentorCMTimeMappingArrayCopyDescriptionCallback(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[3];
  *(_OWORD *)&v6.source.duration.CMTimeScale timescale = a1[2];
  *(_OWORD *)&v6.target.start.CMTimeRange value = v2;
  long long v3 = a1[5];
  *(_OWORD *)&v6.target.start.CMTimeEpoch epoch = a1[4];
  *(_OWORD *)&v6.target.duration.CMTimeScale timescale = v3;
  long long v4 = a1[1];
  *(_OWORD *)&v6.source.start.CMTimeRange value = *a1;
  *(_OWORD *)&v6.source.start.CMTimeEpoch epoch = v4;
  return CMTimeMappingCopyDescription(v1, &v6);
}

uint64_t editMentorCMTimeMappingArrayEqualCallback(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a1[1];
  *(_OWORD *)&range1.start.CMTimeRange value = *a1;
  *(_OWORD *)&range1.start.CMTimeEpoch epoch = v4;
  *(_OWORD *)&range1.duration.CMTimeScale timescale = a1[2];
  long long v5 = a2[1];
  *(_OWORD *)&v9.start.CMTimeRange value = *a2;
  *(_OWORD *)&v9.start.CMTimeEpoch epoch = v5;
  *(_OWORD *)&v9.duration.CMTimeScale timescale = a2[2];
  uint64_t result = CMTimeRangeEqual(&range1, &v9);
  if (result)
  {
    long long v7 = a1[4];
    *(_OWORD *)&range1.start.CMTimeRange value = a1[3];
    *(_OWORD *)&range1.start.CMTimeEpoch epoch = v7;
    *(_OWORD *)&range1.duration.CMTimeScale timescale = a1[5];
    long long v8 = a2[4];
    *(_OWORD *)&v9.start.CMTimeRange value = a2[3];
    *(_OWORD *)&v9.start.CMTimeEpoch epoch = v8;
    *(_OWORD *)&v9.duration.CMTimeScale timescale = a2[5];
    return CMTimeRangeEqual(&range1, &v9) != 0;
  }
  return result;
}

void editMentorSelectEditForTimeInConsolidatedEdit(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  if (!*(unsigned char *)(a1 + 681)) {
    goto LABEL_18;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 360));
  long long v8 = *(const void **)(a1 + 352);
  if (!v8)
  {
    MEMORY[0x19970E930](*(void *)(a1 + 360));
    goto LABEL_18;
  }
  CFArrayRef v9 = (const __CFArray *)CFRetain(v8);
  MEMORY[0x19970E930](*(void *)(a1 + 360));
  if (!v9)
  {
LABEL_18:
    if (*(unsigned char *)(a1 + 563))
    {
      long long v19 = *(_OWORD *)(a1 + 512);
      a4[2] = *(_OWORD *)(a1 + 496);
      a4[3] = v19;
      long long v20 = *(_OWORD *)(a1 + 544);
      a4[4] = *(_OWORD *)(a1 + 528);
      a4[5] = v20;
      long long v21 = *(_OWORD *)(a1 + 464);
      long long v22 = *(_OWORD *)(a1 + 480);
    }
    else
    {
      long long v23 = *(_OWORD *)(a1 + 416);
      a4[2] = *(_OWORD *)(a1 + 400);
      a4[3] = v23;
      long long v24 = *(_OWORD *)(a1 + 448);
      a4[4] = *(_OWORD *)(a1 + 432);
      a4[5] = v24;
      long long v21 = *(_OWORD *)(a1 + 368);
      long long v22 = *(_OWORD *)(a1 + 384);
    }
    *a4 = v21;
    a4[1] = v22;
    return;
  }
  if (CFArrayGetCount(v9) < 2)
  {
    if (*(unsigned char *)(a1 + 563))
    {
      long long v25 = *(_OWORD *)(a1 + 512);
      a4[2] = *(_OWORD *)(a1 + 496);
      a4[3] = v25;
      long long v26 = *(_OWORD *)(a1 + 544);
      a4[4] = *(_OWORD *)(a1 + 528);
      a4[5] = v26;
      long long v27 = *(_OWORD *)(a1 + 464);
      long long v28 = *(_OWORD *)(a1 + 480);
    }
    else
    {
      long long v32 = *(_OWORD *)(a1 + 416);
      a4[2] = *(_OWORD *)(a1 + 400);
      a4[3] = v32;
      long long v33 = *(_OWORD *)(a1 + 448);
      a4[4] = *(_OWORD *)(a1 + 432);
      a4[5] = v33;
      long long v27 = *(_OWORD *)(a1 + 368);
      long long v28 = *(_OWORD *)(a1 + 384);
    }
  }
  else
  {
    CFIndex Count = CFArrayGetCount(v9);
    if (Count >= 2)
    {
      CFIndex v11 = 0;
      uint64_t v12 = Count - 1;
      while (1)
      {
        uint64_t v13 = v12 + v11;
        if (v12 + v11 < 0 != __OFADD__(v12, v11)) {
          ++v13;
        }
        uint64_t v14 = v13 >> 1;
        CFDictionaryRef ValueAtIndex = (long long *)CFArrayGetValueAtIndex(v9, v13 >> 1);
        uint64_t v16 = ValueAtIndex;
        int v17 = ValueAtIndex + 3;
        if (a3) {
          int v17 = ValueAtIndex;
        }
        long long v18 = v17[1];
        *(_OWORD *)&v39.start.CMTimeRange value = *v17;
        *(_OWORD *)&v39.start.CMTimeEpoch epoch = v18;
        *(_OWORD *)&v39.duration.CMTimeScale timescale = v17[2];
        *(_OWORD *)&v36.start.CMTimeRange value = *(_OWORD *)a2;
        v36.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
        *(_OWORD *)&time2.CMTimeRange value = *(_OWORD *)&v39.start.value;
        time2.CMTimeEpoch epoch = v18;
        if (CMTimeCompare(&v36.start, &time2) < 0)
        {
          uint64_t v12 = v14 - 1;
        }
        else
        {
          CMTimeRange v36 = v39;
          CMTimeRangeGetEnd(&v37, &v36);
          *(_OWORD *)&v36.start.CMTimeRange value = *(_OWORD *)a2;
          v36.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
          if (CMTimeCompare(&v36.start, &v37) < 0)
          {
            long long v34 = v16[3];
            a4[2] = v16[2];
            a4[3] = v34;
            long long v35 = v16[5];
            a4[4] = v16[4];
            a4[5] = v35;
            long long v27 = *v16;
            long long v28 = v16[1];
            goto LABEL_28;
          }
          CFIndex v11 = v14 + 1;
        }
        if (v12 <= v11) {
          goto LABEL_25;
        }
      }
    }
    CFIndex v11 = 0;
LABEL_25:
    uint64_t v29 = (long long *)CFArrayGetValueAtIndex(v9, v11);
    long long v30 = v29[3];
    a4[2] = v29[2];
    a4[3] = v30;
    long long v31 = v29[5];
    a4[4] = v29[4];
    a4[5] = v31;
    long long v27 = *v29;
    long long v28 = v29[1];
  }
LABEL_28:
  *a4 = v27;
  a4[1] = v28;
  CFRelease(v9);
}

uint64_t editMentorUpdateChildMentorProperties_applier(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  return editMentorSetChildMentorProperty(a3, a1, a2);
}

void editMentorChildMentorStoppedDueToError(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"Mentor_Order");
    FigCFDictionaryGetInt32IfPresent();
    BOOL v8 = CFDictionaryGetValue(theDict, @"Mentor_SamplesWereGenerated") == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else
  {
    BOOL v8 = 0;
    CFDictionaryRef Value = 0;
  }
  if (*(unsigned char *)(a2 + 296)) {
    BOOL v8 = 1;
  }
  *(unsigned char *)(a2 + 296) = v8;
  int IsCurrent_RetainParentOrder = editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, cf, 0, 0);
  CFTypeRef v10 = cf[0];
  if (IsCurrent_RetainParentOrder)
  {
    if (*(unsigned char *)(a2 + 680)) {
      editMentorPostSyntheticPrerollCompleteNotification(a2, cf[0]);
    }
    editMentorStartNewChildOrder(a2, (uint64_t)v10);
    CFIndex v11 = *(const void **)(a2 + 672);
    if (theDict && !v11) {
      CFIndex v11 = CFDictionaryGetValue(theDict, @"Mentor_NotificationThatWasRequestedButDropped");
    }
    uint64_t v12 = FigMentorNotificationPayloadCreate(@"MentorStoppingDueToError", v10, 0, *(unsigned __int8 *)(a2 + 296), v11, 0);
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v14 = *(const void **)(a2 + 672);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a2 + 672) = 0;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t editMentorTimeRangesMayNoLongerIncrease()
{
  return FigDeferNotificationToDispatchQueue();
}

void editMentorTimeRangesMayNoLongerIncrease_deferred(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a2 + 312));
  if (!*(unsigned char *)(a2 + 566))
  {
    JUMPOUT(0x19970E930);
  }
  *(unsigned char *)(a2 + 566) = 0;
  long long v3 = *(const void **)(a2 + 568);
  if (v3) {
    CFTypeRef v4 = CFRetain(v3);
  }
  else {
    CFTypeRef v4 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a2 + 312));
  editMentorAdvanceToNextEdit(a2, v4, *(_DWORD *)(a2 + 320), 0, 0);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t editMentorRemapTimeInterval(void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (editMentorChildOrderRefIsCurrent_RetainParentOrder((uint64_t)a1, a2, &cf, 0, 0))
  {
    if (!a3)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      long long v21 = 0u;
      long long v27 = *(_OWORD *)a4;
      *(void *)&long long v28 = *(void *)(a4 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v27, 1, &v21);
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v14 = *(_OWORD *)a5;
      *(void *)&long long v15 = *(void *)(a5 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v14, 1, &v27);
      long long v16 = v23;
      long long v17 = v24;
      long long v18 = v25;
      long long v19 = v26;
      long long v14 = v21;
      long long v15 = v22;
      editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v14, 0, (long long *)a4);
      long long v16 = v29;
      long long v17 = v30;
      long long v18 = v31;
      long long v19 = v32;
      long long v14 = v27;
      long long v15 = v28;
      v9.n128_f64[0] = editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v14, 0, (long long *)a5);
    }
    MEMORY[0x19970E910](a1[34], v9);
    CFTypeRef v10 = (uint64_t (*)(void, CFTypeRef, uint64_t, uint64_t, uint64_t))a1[32];
    if (v10) {
      uint64_t v11 = v10(a1[33], cf, a3, a4, a5);
    }
    else {
      uint64_t v11 = 0;
    }
    MEMORY[0x19970E930](a1[34]);
    if (a3)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      long long v21 = 0u;
      long long v27 = *(_OWORD *)a4;
      *(void *)&long long v28 = *(void *)(a4 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v27, 0, &v21);
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v14 = *(_OWORD *)a5;
      *(void *)&long long v15 = *(void *)(a5 + 16);
      editMentorSelectEditForTimeInConsolidatedEdit((uint64_t)a1, (uint64_t)&v14, 0, &v27);
      long long v16 = v23;
      long long v17 = v24;
      long long v18 = v25;
      long long v19 = v26;
      long long v14 = v21;
      long long v15 = v22;
      editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v14, a3, (long long *)a4);
      long long v16 = v29;
      long long v17 = v30;
      long long v18 = v31;
      long long v19 = v32;
      long long v14 = v27;
      long long v15 = v28;
      editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(&v14, a3, (long long *)a5);
    }
  }
  else
  {
    if (dword_1E9350D58)
    {
      LODWORD(v14) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v11 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

__n128 editMentorMapTimeFromRangeToRange@<Q0>(CMTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a4->CMTimeRange value = *MEMORY[0x1E4F1F9F8];
  a4->CMTimeEpoch epoch = *(void *)(v8 + 16);
  if ((a1->flags & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.CMTimeRange value = *(_OWORD *)&a1->value;
    time1.start.CMTimeEpoch epoch = a1->epoch;
    *(_OWORD *)&v12.start.CMTimeRange value = *(_OWORD *)a2;
    v12.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
    if (!CMTimeCompare(&time1.start, &v12.start)) {
      goto LABEL_9;
    }
  }
  if ((*(unsigned char *)(a3 + 12) & 1) == 0
    || (*(unsigned char *)(a3 + 36) & 1) == 0
    || *(void *)(a3 + 40)
    || (*(void *)(a3 + 24) & 0x8000000000000000) != 0
    || (*(_OWORD *)&time1.start.CMTimeRange value = *(_OWORD *)(a3 + 24),
        time1.start.CMTimeEpoch epoch = *(void *)(a3 + 40),
        *(_OWORD *)&v12.start.CMTimeRange value = *MEMORY[0x1E4F1FA48],
        v12.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16),
        CMTimeCompare(&time1.start, &v12.start)))
  {
    CMTime v14 = *a1;
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&time1.start.CMTimeRange value = *(_OWORD *)a2;
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v9;
    *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
    long long v10 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v12.start.CMTimeRange value = *(_OWORD *)a3;
    *(_OWORD *)&v12.start.CMTimeEpoch epoch = v10;
    *(_OWORD *)&v12.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
    CMTimeMapTimeFromRangeToRange(a4, &v14, &time1, &v12);
  }
  else
  {
LABEL_9:
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)&a4->CMTimeRange value = *(_OWORD *)a3;
    a4->CMTimeEpoch epoch = *(void *)(a3 + 16);
  }
  return result;
}

void editMentorAddToTrimAttachment(const void *a1, CMTime *a2, CFStringRef key)
{
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CFDictionaryRef v6 = (const __CFDictionary *)CMGetAttachment(a1, key, 0);
  if (v6)
  {
    CMTimeMakeFromDictionary(&v13, v6);
    CMTime lhs = v13;
    CMTime v10 = *a2;
    CMTimeAdd(&time, &lhs, &v10);
    *(_OWORD *)&v13.CMTimeRange value = *(_OWORD *)&time.value;
    CMTimeEpoch epoch = time.epoch;
  }
  else
  {
    *(_OWORD *)&v13.CMTimeRange value = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
  }
  v13.CMTimeEpoch epoch = epoch;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *(_OWORD *)&time.CMTimeRange value = *(_OWORD *)&v13.value;
  time.CMTimeEpoch epoch = epoch;
  CFDictionaryRef v9 = CMTimeCopyAsDictionary(&time, v8);
  CMSetAttachment(a1, key, v9, 1u);
  if (v9) {
    CFRelease(v9);
  }
}

double editMentorRemapTimeFromMediaTimeToTrackTimeUsingEdit(_OWORD *a1, int a2, long long *a3)
{
  if (a2)
  {
    long long v4 = a1[4];
    *(_OWORD *)&v20.start.CMTimeRange value = a1[3];
    *(_OWORD *)&v20.start.CMTimeEpoch epoch = v4;
    *(_OWORD *)&v20.duration.CMTimeScale timescale = a1[5];
  }
  else
  {
    long long v5 = a1[1];
    *(_OWORD *)&v20.start.CMTimeRange value = *a1;
    *(_OWORD *)&v20.start.CMTimeEpoch epoch = v5;
    *(_OWORD *)&v20.duration.CMTimeScale timescale = a1[2];
    a1 += 3;
  }
  long long v6 = a1[1];
  long long v17 = *a1;
  long long v18 = v6;
  long long v19 = a1[2];
  long long v7 = *a3;
  time.CMTimeEpoch epoch = *((void *)a3 + 2);
  CMTimeRange range = v20;
  *(_OWORD *)&time.CMTimeRange value = v7;
  CMTimeClampToRange((CMTime *)&v11, &time, &range);
  *a3 = v11;
  CMTimeEpoch v8 = v12;
  *((void *)a3 + 2) = v12;
  long long v9 = *a3;
  v14.CMTimeEpoch epoch = v8;
  CMTimeRange range = v20;
  long long v11 = v17;
  long long v12 = v18;
  long long v13 = v19;
  *(_OWORD *)&v14.CMTimeRange value = v9;
  editMentorMapTimeFromRangeToRange(&v14, (uint64_t)&range, (uint64_t)&v11, &time);
  double result = *(double *)&time.value;
  *(CMTime *)a3 = time;
  return result;
}

uint64_t FigSampleBufferRenderSynchronizerCreateRemoteWithOptions(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    CFTypeRef v9 = 0;
    uint64_t v5 = 4294950926;
    goto LABEL_16;
  }
  uint64_t v15 = 0;
  long long v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  cf[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
  cf[1] = (CFTypeRef)0x40000000;
  CFTypeRef cf[2] = __synchronizerRemote_ensureClientEstablished_block_invoke;
  CFTypeRef cf[3] = &unk_1E57936F0;
  cf[4] = &v15;
  if (gSBRSRemoteClientSetupOnce != -1) {
    dispatch_once(&gSBRSRemoteClientSetupOnce, cf);
  }
  uint64_t v5 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  if (v5)
  {
LABEL_15:
    CFTypeRef v9 = 0;
    goto LABEL_16;
  }
  cf[0] = 0;
  FigSampleBufferRenderSynchronizerGetClassID();
  uint64_t OnlyTimebase = CMDerivedObjectCreate();
  if (OnlyTimebase
    || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        CMClockRef HostTimeClock = CMClockGetHostTimeClock(),
        uint64_t OnlyTimebase = CMTimebaseCreateWithSourceClock(a1, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 16)),
        OnlyTimebase)
    || (uint64_t OnlyTimebase = CMTimebaseCreateWithSourceTimebase(a1, *(CMTimebaseRef *)(DerivedStorage + 16), (CMTimebaseRef *)(DerivedStorage + 24)), OnlyTimebase)|| (uint64_t OnlyTimebase = CMTimebaseCreateReadOnlyTimebase(), OnlyTimebase))
  {
    uint64_t v5 = OnlyTimebase;
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    goto LABEL_15;
  }
  CFTypeRef v9 = cf[0];
  uint64_t v10 = FigXPCCreateBasicMessage();
  if (!v10)
  {
    uint64_t v10 = FigXPCMessageSetCFDictionary();
    if (!v10)
    {
      uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (v5) {
        goto LABEL_16;
      }
      uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      FigXPCRemoteClientAssociateObject();
      *(void *)(v12 + 8) = uint64;
      CMBaseObjectGetDerivedStorage();
      cf[0] = 0;
      if (!FigXPCCreateBasicMessage()) {
        FigXPCRemoteClientSendAsyncMessage();
      }
      FigXPCRelease();
      uint64_t v5 = 0;
      *a3 = v9;
      goto LABEL_15;
    }
  }
  uint64_t v5 = v10;
LABEL_16:
  FigXPCRelease();
  FigXPCRelease();
  if (v9) {
    CFRelease(v9);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

void __synchronizerRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    long long v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"ServerConnectionDied");
    FigCFDictionarySetInt32();
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16372;
  }
}

unsigned char *synchronizerRemote_deadConnectionCallback()
{
  double result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  *double result = 1;
  return result;
}

uint64_t synchronizerRemote_handleClientMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t synchronizerRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 8);
  CFAllocatorRef v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  long long v3 = *(const void **)(DerivedStorage + 24);
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = *(const void **)(DerivedStorage + 32);
  if (v4) {
    CFRelease(v4);
  }
  if (v2)
  {
    FigXPCRemoteClientDisassociateObject();
    if (!*(unsigned char *)DerivedStorage && !FigXPCCreateBasicMessage()) {
      FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *synchronizerRemote_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferRenderSynchronizerRemote=%p retainCount=%d allocator=%p", a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, @" objectID=%lld", *(void *)(DerivedStorage + 8));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t synchronizerRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = 0;
  uint64_t ObjectID = synchronizerRemote_getObjectID(a1, &v8);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v6 = ObjectID;
  if (a4) {
    *a4 = 0;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t synchronizerRemote_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = synchronizerRemote_getObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t synchronizerRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t synchronizerRemote_AddAudioRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = synchronizerRemote_sendMessageWithAudioRendererPayload(a1, 1633969249, a2);
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t synchronizerRemote_RemoveAudioRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = synchronizerRemote_sendMessageWithAudioRendererPayload(a1, 1919776353, a2);
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t synchronizerRemote_SetRateAndTime(uint64_t a1, float a2)
{
  uint64_t v7 = 0;
  if (a1)
  {
    uint64_t ObjectID = synchronizerRemote_getObjectID(a1, &v7);
    if (ObjectID)
    {
      uint64_t v5 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCCreateBasicMessage();
      if (v4 || (xpc_dictionary_set_double(0, "rate", a2), uint64_t v4 = FigXPCMessageSetCMTime(), v4)) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v5 = 4294950926;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t synchronizerRemote_CopyReadOnlyTimebase(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950926;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRetain(v5);
    uint64_t v6 = *(void *)(v4 + 32);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

uint64_t synchronizerRemote_SetRateAndAnchorTime(uint64_t a1, float a2)
{
  uint64_t v7 = 0;
  if (a1)
  {
    uint64_t ObjectID = synchronizerRemote_getObjectID(a1, &v7);
    if (ObjectID)
    {
      uint64_t v5 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCCreateBasicMessage();
      if (v4
        || (xpc_dictionary_set_double(0, "rate", a2), uint64_t v4 = FigXPCMessageSetCMTime(), v4)
        || (uint64_t v4 = FigXPCMessageSetCMTime(), v4))
      {
        uint64_t v5 = v4;
      }
      else
      {
        uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v5 = 4294950926;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t synchronizerRemote_ConvertTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v4 = 4294950926;
  if (a1 && a4)
  {
    uint64_t ObjectID = synchronizerRemote_getObjectID(a1, &v7);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        FigXPCMessageSetUInt32();
        uint64_t ObjectID = FigXPCMessageSetCMTime();
        if (!ObjectID)
        {
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!ObjectID) {
            uint64_t ObjectID = FigXPCMessageGetCMTime();
          }
        }
      }
    }
    uint64_t v4 = ObjectID;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t synchronizerRemote_sendMessageWithAudioRendererPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (a1)
  {
    uint64_t ObjectID = synchronizerRemote_getObjectID(a1, &v8);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigSampleBufferAudioRendererGetRemoteObjectID(a3, &v7);
        if (!ObjectID)
        {
          xpc_dictionary_set_uint64(0, "audioRendererObjectID", v7);
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    uint64_t v5 = ObjectID;
  }
  else
  {
    uint64_t v5 = 4294950926;
  }
  FigXPCRelease();
  return v5;
}

uint64_t FigDetermineAudioFileTypeHintAndCreateAudioFileInfos(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  UInt32 outDataSize = 0;
  CFURLRef url = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(void (**)(uint64_t, void, void, CFURLRef *))(v8 + 48);
  if (v9)
  {
    v9(CMBaseObject, *MEMORY[0x1E4F1EC78], 0, &url);
    if (url)
    {
      CFStringRef inSpecifier = CFURLCopyPathExtension(url);
      UInt32 outDataSize = 0;
      if (inSpecifier)
      {
        unsigned int v10 = 0;
        if (!AudioFileGetGlobalInfoSize(0x74657874u, 8u, &inSpecifier, &outDataSize) && outDataSize)
        {
          long long v11 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0x61B38FD5uLL);
          if (v11)
          {
            uint64_t v12 = v11;
            if (AudioFileGetGlobalInfo(0x74657874u, 8u, &inSpecifier, &outDataSize, v11)) {
              unsigned int v10 = 0;
            }
            else {
              unsigned int v10 = *v12;
            }
            free(v12);
          }
          else
          {
            unsigned int v10 = 0;
          }
        }
        if (inSpecifier) {
          CFRelease(inSpecifier);
        }
        CFRelease(url);
        if (v10) {
          goto LABEL_60;
        }
      }
      else
      {
        CFRelease(url);
      }
    }
  }
  CFURLRef url = 0;
  uint64_t v13 = CMByteStreamGetCMBaseObject();
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v16 = *(void (**)(uint64_t, void, void, CFURLRef *))(v15 + 48);
  if (v16) {
    v16(v13, *MEMORY[0x1E4F1FB40], 0, &url);
  }
  if (url)
  {
    LODWORD(inSpecifier) = 0;
    CFNumberGetValue(url, kCFNumberSInt32Type, &inSpecifier);
    int v17 = (int)inSpecifier;
    LODWORD(inSpecifier) = bswap32(inSpecifier);
    UInt32 outDataSize = 0;
    if (v17
      && !AudioFileGetGlobalInfoSize(0x74686673u, 4u, &inSpecifier, &outDataSize)
      && outDataSize
      && (int v18 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0x4CBBF0E8uLL)) != 0)
    {
      long long v19 = v18;
      if (AudioFileGetGlobalInfo(0x74686673u, 4u, &inSpecifier, &outDataSize, v18)) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = *v19;
      }
      free(v19);
      CFRelease(url);
      if (v10) {
        goto LABEL_60;
      }
    }
    else
    {
      CFRelease(url);
    }
  }
  CFURLRef url = 0;
  uint64_t v20 = CMByteStreamGetCMBaseObject();
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  long long v23 = *(void (**)(uint64_t, void, void, CFURLRef *))(v22 + 48);
  if (v23) {
    v23(v20, *MEMORY[0x1E4F1FB58], 0, &url);
  }
  if (!url) {
    goto LABEL_49;
  }
  UInt32 outDataSize = 0;
  unsigned int v10 = 0;
  if (!AudioFileGetGlobalInfoSize(0x746D696Du, 8u, &url, &outDataSize) && outDataSize)
  {
    long long v24 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0xF2526951uLL);
    if (v24)
    {
      long long v25 = v24;
      if (AudioFileGetGlobalInfo(0x746D696Du, 8u, &url, &outDataSize, v24)) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = *v25;
      }
      free(v25);
    }
    else
    {
      unsigned int v10 = 0;
    }
  }
  if (url) {
    CFRelease(url);
  }
  if (!v10)
  {
LABEL_49:
    CFURLRef url = 0;
    uint64_t v26 = CMByteStreamGetCMBaseObject();
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    long long v29 = *(void (**)(uint64_t, void, void, CFURLRef *))(v28 + 48);
    if (v29 && (v29(v26, *MEMORY[0x1E4F1FBA8], *MEMORY[0x1E4F1CF80], &url), url))
    {
      UInt32 outDataSize = 0;
      unsigned int v10 = 0;
      if (!AudioFileGetGlobalInfoSize(0x74757469u, 8u, &url, &outDataSize) && outDataSize)
      {
        long long v30 = (unsigned int *)malloc_type_calloc(1uLL, outDataSize, 0xDB291F60uLL);
        if (v30)
        {
          long long v31 = v30;
          if (AudioFileGetGlobalInfo(0x74757469u, 8u, &url, &outDataSize, v30)) {
            unsigned int v10 = 0;
          }
          else {
            unsigned int v10 = *v31;
          }
          free(v31);
        }
        else
        {
          unsigned int v10 = 0;
        }
      }
      if (url) {
        CFRelease(url);
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
  }
LABEL_60:
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (v10) {
    return v10;
  }
  else {
    return 1297106739;
  }
}

uint64_t FigAudioFileShouldNotUseAllowList()
{
  if (FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowListOnce != -1) {
    dispatch_once_f(&FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowListOnce, &FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowList, (dispatch_function_t)AudioFileShouldNotUseAllowList);
  }
  return FigAudioFileShouldNotUseAllowList_sDoNotUseAudioFileAllowList;
}