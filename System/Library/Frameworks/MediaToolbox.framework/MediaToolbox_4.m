uint64_t AudioFileShouldNotUseAllowList(unsigned char *a1)
{
  uint64_t result;

  result = FigGetCFPreferenceBooleanWithDefault();
  *a1 = result;
  return result;
}

uint64_t FigAudioFileFormatReaderCreateFromStream(const void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  FigFormatReaderGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    return v6;
  }
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  UInt32 inPropertyData = 0;
  outPropertyData[0] = 0;
  v50[0] = 0;
  outDataSize[0] = 0;
  if (sRegisterFigAudioFileInfoTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigAudioFileInfoTypeOnce, 0, (dispatch_function_t)RegisterFigAudioFileInfoType);
  }
  ioDataSize[0] = 0;
  isWritable[0] = 0;
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v25 = FigSignalErrorAt();
    v22 = 0;
    v18 = 0;
    goto LABEL_25;
  }
  uint64_t v9 = Instance;
  *(void *)(Instance + 16) = FigReentrantMutexCreate();
  *(void *)(v9 + 24) = CFRetain(a1);
  *(_DWORD *)(v9 + 112) = AudioFileGetGlobalInfoSize(0x616D696Du, 0, 0, outDataSize) == 0;
  AudioFileTypeID AudioFileInfos = FigDetermineAudioFileTypeHintAndCreateAudioFileInfos((uint64_t)a1, v10, 0, 0);
  v12 = (AudioFileID *)(v9 + 32);
  uint64_t Property = AudioFileOpenWithCallbacks((void *)v9, (AudioFile_ReadProc)AudioFile_FigReadProc, 0, (AudioFile_GetSizeProc)AudioFile_FigGetSizeProc, 0, AudioFileInfos, (AudioFileID *)(v9 + 32));
  if (Property) {
    goto LABEL_74;
  }
  ioDataSize[0] = 4;
  uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(v9 + 32), 0x66666D74u, ioDataSize, (void *)(v9 + 40));
  if (Property) {
    goto LABEL_74;
  }
  if (FigCFDictionaryGetInt32IfPresent()) {
    AudioFileSetProperty(*v12, 0x61616770u, 4u, &inPropertyData);
  }
  ioDataSize[0] = 40;
  v14 = (double *)(v9 + 48);
  uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(v9 + 32), 0x64666D74u, ioDataSize, (void *)(v9 + 48));
  if (Property) {
    goto LABEL_74;
  }
  double v15 = *v14;
  if (*v14 <= 0.0) {
    goto LABEL_73;
  }
  *(_DWORD *)(v9 + 88) = (int)v15;
  unsigned int v16 = *(_DWORD *)(v9 + 68);
  if (v16)
  {
    unsigned int v17 = v16 - (v16 & ((int)v15 / 2));
    if ((v16 & ((int)v15 / 2)) == 0) {
      unsigned int v17 = 0;
    }
    *(void *)(v9 + 96) = (v17 + (int)v15 / 2) / v16;
  }
  v18 = 0;
  if (AudioFileGetPropertyInfo(*v12, 0x6D676963u, outPropertyData, isWritable) || !outPropertyData[0]) {
    goto LABEL_19;
  }
  v19 = malloc_type_malloc(outPropertyData[0], 0x4CB4281CuLL);
  if (!v19)
  {
LABEL_73:
    uint64_t Property = FigSignalErrorAt();
LABEL_74:
    uint64_t v25 = Property;
    v18 = 0;
LABEL_75:
    v22 = 0;
    goto LABEL_76;
  }
  v18 = v19;
  uint64_t v20 = AudioFileGetProperty(*v12, 0x6D676963u, outPropertyData, v19);
  if (v20)
  {
    uint64_t v25 = v20;
    goto LABEL_75;
  }
LABEL_19:
  OSStatus PropertyInfo = AudioFileGetPropertyInfo(*v12, 0x636D6170u, v50, isWritable);
  v22 = 0;
  UInt32 v23 = v50[0];
  if (PropertyInfo || !v50[0])
  {
LABEL_23:
    uint64_t v25 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const AudioStreamBasicDescription *)(v9 + 48), v23, v22, outPropertyData[0], v18, 0, (CMAudioFormatDescriptionRef *)(v9 + 104));
    if (!v25)
    {
      uint64_t *DerivedStorage = v9;
      goto LABEL_25;
    }
    goto LABEL_76;
  }
  v22 = (AudioChannelLayout *)malloc_type_malloc(v50[0], 0x3B46C4B5uLL);
  uint64_t v24 = AudioFileGetProperty(*v12, 0x636D6170u, v50, v22);
  if (!v24)
  {
    UInt32 v23 = v50[0];
    goto LABEL_23;
  }
  uint64_t v25 = v24;
LABEL_76:
  CFRelease((CFTypeRef)v9);
LABEL_25:
  free(v18);
  free(v22);
  if (v25) {
    goto LABEL_72;
  }
  v26 = (const void *)*DerivedStorage;
  *(void *)ioDataSize = 0;
  FigTrackReaderGetClassID();
  uint64_t v27 = CMDerivedObjectCreate();
  if (v27)
  {
    uint64_t v25 = v27;
    goto LABEL_72;
  }
  v28 = (void *)CMBaseObjectGetDerivedStorage();
  if (v26) {
    CFTypeRef v29 = CFRetain(v26);
  }
  else {
    CFTypeRef v29 = 0;
  }
  void *v28 = v29;
  DerivedStorage[1] = *(void *)ioDataSize;
  if ((*(_DWORD *)(*DerivedStorage + 56) - 778924081) <= 2)
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v32 = v31 ? v31 : 0;
    v33 = *(void (**)(uint64_t, uint64_t, void))(v32 + 56);
    if (v33) {
      v33(CMBaseObject, 0x1EE5525F8, *MEMORY[0x1E4F1CFD0]);
    }
  }
  uint64_t v34 = *DerivedStorage;
  *(void *)outPropertyData = 0;
  *(void *)ioDataSize = 0;
  UInt32 inPropertyData = 8;
  if (AudioFileGetProperty(*(AudioFileID *)(v34 + 32), 0x6964336Fu, &inPropertyData, outPropertyData))
  {
    *(void *)outDataSize = 0;
    *(void *)v50 = 0;
    *(void *)(v34 + 216) = -1;
    uint64_t v35 = *(void *)(v34 + 24);
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    v38 = *(uint64_t (**)(uint64_t, uint64_t, void, UInt32 *, UInt32 *))(v37 + 32);
    if (v38)
    {
      uint64_t v39 = v38(v35, 3, 0, ioDataSize, v50);
      if (v39)
      {
LABEL_79:
        uint64_t v25 = v39;
LABEL_64:
        if (*(void *)ioDataSize) {
          CFRelease(*(CFTypeRef *)ioDataSize);
        }
        if (!v25) {
          goto LABEL_67;
        }
LABEL_72:
        CFRelease(0);
        return v25;
      }
      if (*(void *)v50 == 3)
      {
        CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)ioDataSize, 0, 0, 0, (char **)outDataSize);
        if (**(unsigned char **)outDataSize == 73
          && *(unsigned char *)(*(void *)outDataSize + 1) == 68
          && *(unsigned char *)(*(void *)outDataSize + 2) == 51)
        {
          uint64_t v25 = 0;
          *(void *)(v34 + 216) = 0;
          goto LABEL_64;
        }
      }
      if (*(void *)(v34 + 216) != -1) {
        goto LABEL_62;
      }
      uint64_t SizeProc = AudioFile_FigGetSizeProc(v34);
      if (SizeProc < 129) {
        goto LABEL_62;
      }
      uint64_t v41 = SizeProc;
      *(void *)isWritable = 0;
      if (*(void *)ioDataSize) {
        CFRelease(*(CFTypeRef *)ioDataSize);
      }
      *(void *)ioDataSize = 0;
      uint64_t v42 = *(void *)(v34 + 24);
      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v43) {
        uint64_t v44 = v43;
      }
      else {
        uint64_t v44 = 0;
      }
      v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt32 *, UInt32 *))(v44 + 32);
      if (v45)
      {
        uint64_t v46 = v41 - 128;
        uint64_t v39 = v45(v42, 3, v46, ioDataSize, v50);
        if (!v39)
        {
          if (*(void *)v50 == 3)
          {
            CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)ioDataSize, 0, 0, 0, (char **)isWritable);
            if (**(unsigned char **)isWritable == 84
              && *(unsigned char *)(*(void *)isWritable + 1) == 65
              && *(unsigned char *)(*(void *)isWritable + 2) == 71)
            {
              *(void *)(v34 + 216) = v46;
            }
          }
LABEL_62:
          uint64_t v25 = 0;
          goto LABEL_64;
        }
        goto LABEL_79;
      }
    }
    uint64_t v25 = 4294954514;
    goto LABEL_64;
  }
  *(void *)(v34 + 216) = *(void *)outPropertyData;
LABEL_67:
  uint64_t v25 = 0;
  *a4 = 0;
  return v25;
}

uint64_t FigAudioFormatReaderConvertCodecElementsToMediaSubType(int a1, int a2, char *__s1, uint64_t a4, _DWORD *a5, int *a6, int *a7)
{
  int v28 = a1;
  if (!a4)
  {
    if (!__s1)
    {
      if (a7)
      {
        uint64_t v8 = 0;
        int v9 = 4;
        goto LABEL_4;
      }
      return 0;
    }
    int v26 = 0;
    int v27 = 0;
    int outPropertyData = 0;
    int inSpecifier = a1;
    if (a1 > 1463899716)
    {
      if (a1 == 1667327590)
      {
LABEL_23:
        if (!a2)
        {
LABEL_29:
          if (!a7) {
            goto LABEL_51;
          }
          unsigned int v17 = 0;
          uint64_t v8 = 0;
          int v18 = 2;
LABEL_34:
          *a7 = v18;
LABEL_53:
          free(v17);
          return v8;
        }
        int v26 = 4;
        int v27 = a2;
        UInt32 v16 = 12;
LABEL_25:
        UInt32 outPropertyDataSize = 0;
        if (AudioFormatGetPropertyInfo(0x6964636Eu, v16, &inSpecifier, &outPropertyDataSize)) {
          goto LABEL_51;
        }
        UInt32 outPropertyDataSize = 4;
        if (AudioFormatGetProperty(0x6964636Eu, v16, &inSpecifier, &outPropertyDataSize, &outPropertyData)
          || !outPropertyData)
        {
          goto LABEL_51;
        }
        goto LABEL_37;
      }
      if (a1 == 1463899717)
      {
        LOWORD(outPropertyDataSize) = 0;
        char v23 = 0;
        int v14 = sscanf(__s1, "%hx%c", &outPropertyDataSize, &v23);
        if (v14 == 2)
        {
          if (!a7) {
            goto LABEL_51;
          }
          int v15 = 10;
        }
        else
        {
          if (v14 == 1)
          {
            int v26 = 2;
            LOWORD(v27) = outPropertyDataSize;
            UInt32 v16 = 10;
            goto LABEL_25;
          }
          if (v14 || !a7) {
            goto LABEL_51;
          }
          int v15 = 6;
        }
        *a7 = v15;
        goto LABEL_51;
      }
    }
    else
    {
      if ((a1 - 1297106737) < 3)
      {
        if (!strcmp(__s1, "mp3"))
        {
          int v28 = 1297106739;
          int v13 = 778924083;
          goto LABEL_36;
        }
        if (!strcmp(__s1, "mp2"))
        {
          int v28 = 1297106738;
          int v13 = 778924082;
          goto LABEL_36;
        }
        if (!strcmp(__s1, "mp1"))
        {
          int v28 = 1297106737;
          int v13 = 778924081;
LABEL_36:
          int outPropertyData = v13;
LABEL_37:
          UInt32 outPropertyDataSize = 0;
          if (!AudioFileGetGlobalInfoSize(0x666D6964u, 4u, &v28, &outPropertyDataSize))
          {
            unsigned int v17 = (char *)malloc_type_calloc(1uLL, outPropertyDataSize, 0xEC368B04uLL);
            AudioFileGetGlobalInfo(0x666D6964u, 4u, &v28, &outPropertyDataSize, v17);
            if (outPropertyDataSize >= 4)
            {
              uint64_t v19 = 0;
              int v20 = outPropertyData;
              while (*(_DWORD *)&v17[v19] != outPropertyData)
              {
                v19 += 4;
                if ((outPropertyDataSize & 0xFFFFFFFC) == v19) {
                  goto LABEL_52;
                }
              }
              if (a5) {
                *a5 = 1936684398;
              }
              if (a6) {
                *a6 = v20;
              }
              uint64_t v8 = 1;
              goto LABEL_53;
            }
            goto LABEL_52;
          }
LABEL_51:
          unsigned int v17 = 0;
LABEL_52:
          uint64_t v8 = 0;
          goto LABEL_53;
        }
        goto LABEL_29;
      }
      if (a1 == 1095321155) {
        goto LABEL_23;
      }
    }
    if (!a7) {
      goto LABEL_51;
    }
    unsigned int v17 = 0;
    uint64_t v8 = 0;
    int v18 = 1;
    goto LABEL_34;
  }
  if (!a7) {
    return 0;
  }
  uint64_t v8 = 0;
  int v9 = 8;
LABEL_4:
  *a7 = v9;
  return v8;
}

void FigAudioFileFormatReaderFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *FigAudioFileFormatReaderCopyDebugDescription()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  v2 = *(const void **)(v0 + 24);
  if (v2)
  {
    CFStringRef v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileFormatReader: stream<%@>", v3);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileFormatReader: stream<%@>", 0);
  }
  return Mutable;
}

uint64_t FigAudioFileFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    int v9 = DerivedStorage;
    uint64_t v10 = *DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, @"Duration"))
    {
      uint64_t v11 = v9[1];
      if (v11)
      {
        v12 = kFigTrackProperty_EditedDuration;
LABEL_8:
        int v13 = *v12;
        return FigAudioFileTrackReaderCopyProperty(v11, v13, a3, a4);
      }
      return 4294954513;
    }
    if (CFEqual(a2, @"NominalDuration"))
    {
      uint64_t v11 = v9[1];
      if (v11)
      {
        v12 = kFigTrackProperty_UneditedDuration;
        goto LABEL_8;
      }
      return 4294954513;
    }
    if (CFEqual(a2, @"Identifier"))
    {
      UInt32 v16 = (CFTypeRef *)kFigFormatReaderIdentifier_AudioFile;
LABEL_17:
      GaplessInfoDictionary_0 = (__CFArray *)CFRetain(*v16);
LABEL_18:
      uint64_t v15 = 0;
LABEL_19:
      *a4 = (CMTimeValue)GaplessInfoDictionary_0;
      return v15;
    }
    if (CFEqual(a2, @"LyricsScanCompleted"))
    {
      UInt32 v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(v10 + 177)) {
        UInt32 v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_17;
    }
    if (CFEqual(a2, @"Lyrics"))
    {
      return CopyLyricsFromAudioFile(a1, a4);
    }
    if (CFEqual(a2, @"AccurateDurationIsKnown") || CFEqual(a2, @"SampleCursorTimeAccuracyIsExact"))
    {
      UInt32 v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      goto LABEL_17;
    }
    if (CFEqual(a2, @"iTunesGaplessInfo"))
    {
      GaplessInfoDictionary_0 = CreateGaplessInfoDictionary_0(v10);
      goto LABEL_18;
    }
    if (CFEqual(a2, @"iTunesSoundCheckVolumeNormalization"))
    {
      int inSpecifier = (void *)CopySoundCheckInfoDictionary(v10);
      if (inSpecifier)
      {
        UInt32 v24 = 4;
        int outPropertyData = 0;
        if (AudioFormatGetProperty(0x73636462u, 8u, &inSpecifier, &v24, &outPropertyData))
        {
          CFRelease(inSpecifier);
        }
        else
        {
          CFNumberRef v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &outPropertyData);
          CFRelease(inSpecifier);
          if (v18)
          {
            uint64_t v15 = 0;
            *a4 = (CMTimeValue)v18;
            return v15;
          }
        }
      }
      return 4294954512;
    }
    if (CFEqual(a2, @"SoundCheckInfo"))
    {
      GaplessInfoDictionary_0 = (__CFArray *)CopySoundCheckInfoDictionary(v10);
      goto LABEL_18;
    }
    if (CFEqual(a2, @"IndicatesContentProtection"))
    {
      BOOL v19 = IndicatesContentProtection(v10);
      UInt32 v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!v19) {
        UInt32 v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_17;
    }
    if (CFEqual(a2, @"MetadataReaders"))
    {
      uint64_t v15 = EnsureMetadataReaderCreated_0(v10);
      if (*(void *)(v10 + 224))
      {
        Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
        CFArrayAppendValue(Mutable, *(const void **)(v10 + 224));
      }
      else
      {
        Mutable = 0;
      }
      *a4 = (CMTimeValue)Mutable;
      return v15;
    }
    if (CFEqual(a2, @"MetadataReader") || CFEqual(a2, @"FormatSpecificMetadataReader"))
    {
      uint64_t v15 = EnsureMetadataReaderCreated_0(v10);
      GaplessInfoDictionary_0 = *(__CFArray **)(v10 + 224);
      if (!GaplessInfoDictionary_0) {
        goto LABEL_19;
      }
    }
    else
    {
      if (!CFEqual(a2, @"ID3MetadataReader"))
      {
        if (CFEqual(a2, @"ID3MetadataReaderBC"))
        {
          int inSpecifier = 0;
          uint64_t v21 = *(void *)(v10 + 216);
          if (v21 < 0)
          {
            CMTimeValue v22 = 0;
            uint64_t v15 = 0;
          }
          else
          {
            uint64_t v15 = FigMetadataReaderCreateForID3WithBackwardCompatibility(a3, *(const void **)(v10 + 24), v21, &inSpecifier);
            CMTimeValue v22 = (CMTimeValue)inSpecifier;
          }
          *a4 = v22;
          return v15;
        }
        if (CFEqual(a2, @"Chapters"))
        {
          int inSpecifier = 0;
          EnsureMetadataReaderCreated_0(v10);
          uint64_t v23 = *(void *)(v10 + 224);
          if (!v23
            || !*(unsigned char *)(v10 + 232)
            || (GaplessInfoDictionary_0 = FigID3MetadataCreateChapterArrayFromTopLevelTableOfContents(a3, v23),
                (int inSpecifier = GaplessInfoDictionary_0) == 0))
          {
            CreateChaptersFromAudioFileChapterList(v10, (CFMutableArrayRef *)&inSpecifier);
            GaplessInfoDictionary_0 = (__CFArray *)inSpecifier;
          }
          goto LABEL_18;
        }
        return 4294954512;
      }
      uint64_t v15 = EnsureMetadataReaderCreated_0(v10);
      GaplessInfoDictionary_0 = *(__CFArray **)(v10 + 224);
      if (!GaplessInfoDictionary_0) {
        goto LABEL_19;
      }
      if (!*(unsigned char *)(v10 + 232))
      {
        GaplessInfoDictionary_0 = 0;
        goto LABEL_19;
      }
    }
    GaplessInfoDictionary_0 = (__CFArray *)CFRetain(GaplessInfoDictionary_0);
    goto LABEL_19;
  }

  return FigSignalErrorAt();
}

uint64_t FigAudioFileTrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v8 = *DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, @"TrackFormatDescriptionArray"))
    {
      uint64_t v10 = *(void *)(v8 + 104);
      int v9 = (const void **)(v8 + 104);
      if (!v10) {
        return 0;
      }
      CMTimeValue value = (CMTimeValue)CFArrayCreate(a3, v9, 1, MEMORY[0x1E4F1D510]);
      goto LABEL_26;
    }
    if (CFEqual(a2, @"TrackTimescale"))
    {
      LODWORD(valuePtr.value) = *(_DWORD *)(v8 + 88);
      CMTimeValue value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
LABEL_26:
      uint64_t Property = 0;
LABEL_27:
      *a4 = value;
      return Property;
    }
    if (CFEqual(a2, @"TrackEnabled")) {
      goto LABEL_9;
    }
    if (CFEqual(a2, @"TrackDuration"))
    {
      if (*(void *)(v8 + 32))
      {
        memset(&valuePtr, 0, sizeof(valuePtr));
        GetAudioFilePacketTableInfo(v8);
        if (*(unsigned char *)(v8 + 179))
        {
          int64_t v14 = *(void *)(v8 + 184);
        }
        else
        {
          uint64_t AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(v8);
          if (AudioFilePacketAndFrameCount) {
            return AudioFilePacketAndFrameCount;
          }
          CFMutableDictionaryRef DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(*(const opaqueCMFormatDescription **)(v8 + 104));
          LODWORD(v21.value) = 0;
          int64_t v14 = *(void *)(v8 + 136);
          if (FigCFDictionaryGetInt32IfPresent()) {
            int64_t v14 = (v14 - SLODWORD(v21.value)) & ~((v14 - SLODWORD(v21.value)) >> 63);
          }
          if (DefaultEnhanced) {
            CFRelease(DefaultEnhanced);
          }
        }
        int32_t v17 = *(_DWORD *)(v8 + 88);
        int64_t v16 = v14;
        goto LABEL_25;
      }
    }
    else if (CFEqual(a2, @"UneditedTrackDuration"))
    {
      if (*(void *)(v8 + 32))
      {
        memset(&valuePtr, 0, sizeof(valuePtr));
        uint64_t AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(v8);
        if (AudioFilePacketAndFrameCount) {
          return AudioFilePacketAndFrameCount;
        }
        int64_t v16 = *(void *)(v8 + 136);
        int32_t v17 = *(_DWORD *)(v8 + 88);
LABEL_25:
        CMTimeMake(&valuePtr, v16, v17);
        CMTime v21 = valuePtr;
        CMTimeValue value = (CMTimeValue)CMTimeCopyAsDictionary(&v21, a3);
        if (value) {
          goto LABEL_26;
        }
        return FigSignalErrorAt();
      }
    }
    else
    {
      if (!CFEqual(a2, @"UneditedSampleCount"))
      {
        if (CFEqual(a2, @"LoudnessInfo"))
        {
          valuePtr.CMTimeValue value = 0;
          LODWORD(v21.value) = 8;
          uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(v8 + 32), 0x6C6F7564u, (UInt32 *)&v21, &valuePtr);
          CMTimeValue value = valuePtr.value;
          if (Property)
          {
            if (valuePtr.value) {
              CFRelease((CFTypeRef)valuePtr.value);
            }
            return Property;
          }
          goto LABEL_27;
        }
        if (CFEqual(a2, @"HasAudioSampleDependencyInformation"))
        {
          int HasSampleDependencies = AudioFileHasSampleDependencies(v8);
        }
        else
        {
          if (!CFEqual(a2, @"IndicatesContentProtection"))
          {
            if (CFEqual(a2, @"UsesAudibleDRM"))
            {
              LODWORD(valuePtr.value) = 0;
              LODWORD(v21.value) = 4;
              AudioFileGetProperty(*(AudioFileID *)(v8 + 32), 0x61756462u, (UInt32 *)&v21, &valuePtr);
              int v13 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
              if (LODWORD(valuePtr.value)) {
                int v13 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
              }
              goto LABEL_10;
            }
            if (!CFEqual(a2, @"AudibleContentIsAuthorized")) {
              return 4294954512;
            }
            LODWORD(valuePtr.value) = 0;
            if (*(_DWORD *)(v8 + 40) == 1635083362)
            {
              LODWORD(v21.value) = 4;
              if (AudioFileGetProperty(*(AudioFileID *)(v8 + 32), 0x61757468u, (UInt32 *)&v21, &valuePtr))
              {
                LODWORD(valuePtr.value) = 0;
              }
              else if (LODWORD(valuePtr.value))
              {
LABEL_9:
                int v13 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_10:
                CMTimeValue value = (CMTimeValue)CFRetain(*v13);
                goto LABEL_26;
              }
            }
            int v13 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
            goto LABEL_10;
          }
          int HasSampleDependencies = IndicatesContentProtection(v8);
        }
        int v13 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        if (!HasSampleDependencies) {
          int v13 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
        goto LABEL_10;
      }
      if (*(void *)(v8 + 32))
      {
        uint64_t Property = GetAudioFilePacketAndFrameCount(v8);
        if (Property) {
          return Property;
        }
        CMTimeValue value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(v8 + 128));
        goto LABEL_27;
      }
    }
    return 4294954513;
  }

  return FigSignalErrorAt();
}

uint64_t CopyLyricsFromAudioFile(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)DerivedStorage;
  MEMORY[0x19970E290](*(void *)(*(void *)DerivedStorage + 16));
  *a2 = 0;
  if (*(unsigned char *)(v4 + 176)) {
    goto LABEL_8;
  }
  UInt32 ioDataSize = 8;
  OSStatus Property = AudioFileGetProperty(*(AudioFileID *)(v4 + 32), 0x4C595243u, &ioDataSize, a2);
  if (!*(unsigned char *)(v4 + 177))
  {
    *(unsigned char *)(v4 + 177) = 1;
    if (!Property) {
      goto LABEL_6;
    }
LABEL_8:
    *(unsigned char *)(v4 + 176) = 1;
    uint64_t v6 = 4294954513;
    goto LABEL_9;
  }
  if (Property) {
    goto LABEL_8;
  }
LABEL_6:
  if (!*a2) {
    goto LABEL_8;
  }
  uint64_t v6 = 0;
LABEL_9:
  MEMORY[0x19970E2B0](*(void *)(v4 + 16));
  return v6;
}

CFMutableDictionaryRef CreateGaplessInfoDictionary_0(uint64_t a1)
{
  CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  GetAudioFilePacketTableInfo(a1);
  if (!*(unsigned char *)(a1 + 179)) {
    return 0;
  }
  GetAudioFilePacketAndFrameCount(a1);
  if (!*(_DWORD *)(a1 + 116)) {
    return 0;
  }
  CMTimeMake(&v8, *(void *)(a1 + 136), *(_DWORD *)(a1 + 88));
  v2 = *(const AudioFormatListItem **)(a1 + 104);
  int v3 = *(_DWORD *)(a1 + 192);
  int v4 = *(_DWORD *)(a1 + 196);
  int64_t v5 = *(void *)(a1 + 184);
  CMTime v7 = v8;
  return FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(v2, &v7, v3, v4, v5);
}

CFTypeRef CopySoundCheckInfoDictionary(uint64_t a1)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (!*(unsigned char *)(a1 + 202))
  {
    UInt32 ioDataSize = 8;
    AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x73636463u, &ioDataSize, (void *)(a1 + 208));
    *(unsigned char *)(a1 + 202) = 1;
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  CFTypeRef result = *(CFTypeRef *)(a1 + 208);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

BOOL IndicatesContentProtection(uint64_t a1)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  UInt32 ioDataSize = 4;
  int outPropertyData = 0;
  AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x63727074u, &ioDataSize, &outPropertyData);
  BOOL v2 = outPropertyData != 0;
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  return v2;
}

uint64_t EnsureMetadataReaderCreated_0(uint64_t a1)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2 < 0 || *(void *)(a1 + 224)) {
    goto LABEL_3;
  }
  uint64_t v3 = FigMetadataReaderCreateForID3((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(const void **)(a1 + 24), v2, (void *)(a1 + 224));
  if (!v3)
  {
    if (!*(void *)(a1 + 224))
    {
LABEL_3:
      uint64_t v3 = 0;
      goto LABEL_4;
    }
    uint64_t v3 = 0;
    *(unsigned char *)(a1 + 232) = 1;
  }
LABEL_4:
  if (!*(void *)(a1 + 224))
  {
    CFTypeRef outPropertyData = 0;
    UInt32 ioDataSize = 8;
    CFTypeRef cf = 0;
    UInt32 v13 = 8;
    uint64_t v12 = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x696E666Fu, &ioDataSize, &outPropertyData)
        && ioDataSize == 8)
      {
        if (outPropertyData)
        {
          CFTypeID v9 = CFGetTypeID(outPropertyData);
          if (v9 == CFDictionaryGetTypeID() && CFDictionaryGetCount((CFDictionaryRef)outPropertyData) >= 1) {
            CFDictionaryApplyFunction((CFDictionaryRef)outPropertyData, (CFDictionaryApplierFunction)CreateFigMetadataItemForAudioFileInfoItem, Mutable);
          }
        }
      }
      if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x61617274u, &v13, &cf) && v13 == 8)
      {
        if (cf)
        {
          CFTypeID v10 = CFGetTypeID(cf);
          if (v10 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)cf) >= 1) {
            AddFigMetadataItemToArray(Mutable, @"aart", cf);
          }
        }
      }
      CFIndex Count = CFArrayGetCount(Mutable);
      CFTypeRef v6 = outPropertyData;
      if (Count < 1)
      {
        uint64_t v8 = 0;
        uint64_t v3 = 0;
      }
      else
      {
        CFAllocatorRef v7 = CFGetAllocator(outPropertyData);
        uint64_t v3 = FigMetadataReaderCreateForGenericMetadataArray((uint64_t)v7, Mutable, @"public.unknown", @"caaf", &v12);
        uint64_t v8 = v12;
        CFTypeRef v6 = outPropertyData;
      }
      *(void *)(a1 + 224) = v8;
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      uint64_t v3 = FigSignalErrorAt();
      *(void *)(a1 + 224) = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (!v3)
    {
      uint64_t v3 = 0;
      if (*(void *)(a1 + 224)) {
        *(unsigned char *)(a1 + 232) = 0;
      }
    }
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  return v3;
}

void CreateChaptersFromAudioFileChapterList(uint64_t a1, CFMutableArrayRef *a2)
{
  UInt32 outDataSize = 0;
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (AudioFileGetPropertyInfo(*(AudioFileID *)(a1 + 32), 0x63687073u, &outDataSize, 0)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = outDataSize >= 0x10;
  }
  if (!v4) {
    goto LABEL_26;
  }
  int64_t v5 = malloc_type_malloc(outDataSize, 0xB6EB5CEDuLL);
  if (!v5)
  {
    FigSignalErrorAt();
LABEL_26:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    CFTypeRef v6 = 0;
    goto LABEL_20;
  }
  CFTypeRef v6 = v5;
  OSStatus Property = AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x63687073u, &outDataSize, v5);
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  if (!Property && *v6 && 8 * (*v6 - 1) + 16 == outDataSize)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFMutableArrayRef v10 = Mutable;
      int v20 = a2;
      if (*v6)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v6 + 4;
        UInt32 v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        while (1)
        {
          int64_t v14 = *(v12 - 1);
          memset(&v22, 0, sizeof(v22));
          CMTimeMake(&v22, v14, *(_DWORD *)(a1 + 88));
          memset(&v21, 0, sizeof(v21));
          ++v11;
          uint64_t v15 = v12;
          if (v11 >= *v6)
          {
            int AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(a1);
            uint64_t v15 = (void *)(a1 + 136);
            if (AudioFilePacketAndFrameCount) {
              break;
            }
          }
          CMTimeMake(&v21, *v15 - v14, *(_DWORD *)(a1 + 88));
          CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v8, 2, MEMORY[0x1E4F1D530], v13);
          if (!v17)
          {
            FigSignalErrorAt();
            break;
          }
          CFMutableDictionaryRef v18 = v17;
          if (FigCFDictionarySetCMTime() || FigCFDictionarySetCMTime())
          {
            FigSignalErrorAt();
            CFRelease(v10);
            CFMutableDictionaryRef v19 = v18;
            goto LABEL_24;
          }
          CFArrayAppendValue(v10, v18);
          CFRelease(v18);
          ++v12;
          if (v11 >= *v6) {
            goto LABEL_19;
          }
        }
        CFMutableDictionaryRef v19 = v10;
LABEL_24:
        CFRelease(v19);
      }
      else
      {
LABEL_19:
        *int v20 = v10;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
LABEL_20:
  free(v6);
}

uint64_t GetAudioFilePacketTableInfo(uint64_t a1)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (!*(unsigned char *)(a1 + 178))
  {
    UInt32 ioDataSize = 16;
    if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x706E666Fu, &ioDataSize, (void *)(a1 + 184))
      && *(uint64_t *)(a1 + 184) >= 1)
    {
      *(unsigned char *)(a1 + 179) = 1;
      if ((*(_DWORD *)(a1 + 192) & 0x80000000) != 0) {
        *(_DWORD *)(a1 + 192) = 0;
      }
      if ((*(_DWORD *)(a1 + 196) & 0x80000000) != 0) {
        *(_DWORD *)(a1 + 196) = 0;
      }
    }
    *(unsigned char *)(a1 + 178) = 1;
  }
  return MEMORY[0x19970E2B0](*(void *)(a1 + 16));
}

uint64_t GetAudioFilePacketAndFrameCount(uint64_t a1)
{
  uint64_t outPropertyData = 0;
  if (!*(_DWORD *)(a1 + 116))
  {
    UInt32 ioDataSize = 8;
    uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x70636E74u, &ioDataSize, &outPropertyData);
    if (Property) {
      return Property;
    }
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    uint64_t v4 = outPropertyData;
    *(void *)(a1 + 128) = outPropertyData;
    uint64_t v5 = *(unsigned int *)(a1 + 68);
    if (v5)
    {
      uint64_t v6 = v4 * v5;
    }
    else
    {
      *(void *)&outPacketDescriptions.mVariableFramesInPacket = 0;
      int64_t v11 = 0;
      outPacketDescriptions.mStartOffset = 0;
      UInt32 ioNumPackets = 1;
      uint64_t v7 = MapPacketNumberToFrameNumber_0(a1, v4 - 1, &v11);
      if (v7
        || (uint64_t v7 = AudioFileReadPacketData(*(AudioFileID *)(a1 + 32), 0, 0, &outPacketDescriptions, outPropertyData - 1, &ioNumPackets, 0), v7))
      {
        uint64_t v1 = v7;
        goto LABEL_10;
      }
      uint64_t v6 = v11 + outPacketDescriptions.mVariableFramesInPacket;
    }
    *(void *)(a1 + 136) = v6;
    uint64_t v1 = 0;
    *(_DWORD *)(a1 + 116) = 1;
LABEL_10:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v1;
  }
  return 0;
}

uint64_t AudioFileHasSampleDependencies(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 200))
  {
    UInt32 ioDataSize = 4;
    int outPropertyData = 0;
    *(_WORD *)(a1 + 200) = 1;
    if (!AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x72726170u, &ioDataSize, &outPropertyData)) {
      *(unsigned char *)(a1 + 201) = outPropertyData != 0;
    }
  }
  return *(unsigned __int8 *)(a1 + 201);
}

uint64_t MapPacketNumberToFrameNumber_0(uint64_t a1, int64_t a2, int64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 68);
  if (v4) {
    unint64_t v5 = *(unsigned int *)(a1 + 68);
  }
  else {
    unint64_t v5 = 1;
  }
  if ((uint64_t)(0x7FFFFFFFFFFEA06FLL / v5) <= a2)
  {
    uint64_t result = 0;
    *a3 = 0x7FFFFFFFFFFEA06FLL;
    return result;
  }
  if (v4)
  {
    uint64_t result = 0;
    int64_t v7 = v4 * a2;
  }
  else
  {
    outPropertyData[0] = 0;
    outPropertyData[1] = a2;
    UInt32 outPropertyData[2] = 0;
    UInt32 ioDataSize = 24;
    uint64_t result = AudioFileGetProperty(*(AudioFileID *)(a1 + 32), 0x706B6672u, &ioDataSize, outPropertyData);
    if (result) {
      return result;
    }
    int64_t v7 = outPropertyData[0];
  }
  *a3 = v7;
  return result;
}

void CreateFigMetadataItemForAudioFileInfoItem(uint64_t a1, const void *a2, void *cf)
{
  CFAllocatorRef v6 = CFGetAllocator(cf);
  CFStringRef v7 = CFStringCreateWithFormat(v6, 0, @"info-%@", a1);
  if (v7)
  {
    CFStringRef v8 = v7;
    AddFigMetadataItemToArray(cf, v7, a2);
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void AddFigMetadataItemToArray(void *a1, const void *a2, const void *a3)
{
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFStringRef v8 = Mutable;
    CFDictionarySetValue(Mutable, @"key", a2);
    CFDictionarySetValue(v8, @"value", a3);
    CFDictionarySetValue(v8, @"keyspace", @"caaf");
    CFArrayAppendValue((CFMutableArrayRef)a1, v8);
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigAudioFileFormatReaderGetTrackCount(uint64_t a1, void *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t FigAudioFileFormatReaderCopyTrackByIndex(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2) {
    return 4294954453;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFTypeRef v10 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v10) {
      CFTypeRef v10 = CFRetain(v10);
    }
    *a3 = v10;
  }
  if (a4) {
    *a4 = 1936684398;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = 1;
  }
  return result;
}

uint64_t FigAudioFileFormatReaderCopyTrackByID(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  if (a2 == 1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
    {
      CFTypeRef v8 = *(CFTypeRef *)(DerivedStorage + 8);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      *a3 = v8;
    }
    if (a4) {
      *a4 = 1936684398;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAudioFileFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  uint64_t result = 4294954453;
  if (!a2 && a3 == 1936684398)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a4)
    {
      CFTypeRef v9 = *(CFTypeRef *)(DerivedStorage + 8);
      if (v9) {
        CFTypeRef v9 = CFRetain(v9);
      }
      *a4 = v9;
    }
    uint64_t result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

uint64_t AudioFile_FigReadProc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v15 = 0;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t *))(v11 + 8);
  if (v12)
  {
    uint64_t result = v12(v9, a3, a2, a4, &v15);
    int v14 = v15;
  }
  else
  {
    int v14 = 0;
    uint64_t result = 4294954514;
  }
  *a5 = v14;
  return result;
}

uint64_t AudioFile_FigGetSizeProc(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 152);
  uint64_t v1 = *(void *)(a1 + 152);
  if (!v1)
  {
    CFNumberRef number = 0;
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFAllocatorRef v6 = *(unsigned int (**)(uint64_t, void, void, CFNumberRef *))(v5 + 48);
    if (v6)
    {
      if (v6(CMBaseObject, *MEMORY[0x1E4F1EC50], *MEMORY[0x1E4F1CF80], &number)) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = number == 0;
      }
      if (!v7)
      {
        CFNumberGetValue(number, kCFNumberSInt64Type, v2);
        CFRelease(number);
      }
    }
    return *(void *)v2;
  }
  return v1;
}

uint64_t RegisterFigAudioFileInfoType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAudioFileInfoID = result;
  return result;
}

double InitFigAudioFileInfo(_OWORD *a1)
{
  double result = 0.0;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t FinalizeFigAudioFileInfo(uint64_t a1)
{
  free(*(void **)(a1 + 168));
  FigFormatDescriptionRelease();
  uint64_t v2 = *(OpaqueAudioFileID **)(a1 + 32);
  if (v2) {
    AudioFileClose(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 208);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 224);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    return FigSimpleMutexDestroy();
  }
  return result;
}

void FigAudioFileTrackReaderFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileTrackReaderCopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (*(void *)DerivedStorage)
  {
    uint64_t v2 = *(const void **)(*(void *)DerivedStorage + 24);
    if (v2)
    {
      CFStringRef v3 = CFCopyDescription(v2);
      CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileTrackReader: stream<%@> trackID %d", v3, 1);
      if (v3) {
        CFRelease(v3);
      }
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, @"\tFigAudioFileTrackReader: stream<%@> trackID %d", 0, 1);
    }
  }
  return Mutable;
}

uint64_t FigAudioFileTrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a3) {
    *a3 = 1936684398;
  }
  if (a2) {
    *a2 = 1;
  }
  return 0;
}

uint64_t FigAudioFileTrackReaderCopySampleCursorService(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  FigSampleCursorServiceGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (v3) {
      CFTypeRef v6 = CFRetain(v3);
    }
    else {
      CFTypeRef v6 = 0;
    }
    void *DerivedStorage = v6;
    *a2 = 0;
  }
  return v4;
}

void FigAudioFileCursorService_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileCursorService_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReader_AudioFile_CursorService %p>{ samplerate %d }", a1, *(unsigned int *)(*(void *)DerivedStorage + 88));
  return Mutable;
}

uint64_t FigAudioFileCursorService_createCursorAtPresentationTimeStamp(uint64_t a1, CMTime *a2, void *a3, BOOL *a4, char *a5)
{
  uint64_t v9 = *(void **)CMBaseObjectGetDerivedStorage();
  int64_t v16 = 0;
  MEMORY[0x19970E290](v9[2]);
  uint64_t v10 = createFigAudioPacketAccessor_0(v9, &v16);
  if (v10)
  {
    uint64_t v13 = v10;
  }
  else
  {
    uint64_t v11 = v16;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    CMTime v15 = *a2;
    uint64_t v13 = moveToSampleAtPTS_0(DerivedStorage, (uint64_t)v9, &v15, a4, a5);
    if (v13)
    {
      if (v11) {
        CFRelease(v11);
      }
    }
    else
    {
      *a3 = v11;
    }
  }
  MEMORY[0x19970E2B0](v9[2]);
  return v13;
}

uint64_t FigAudioFileCursorService_createCursorNearPresentationTimeStamp(uint64_t a1, CMTime *a2, uint64_t a3, void *a4, BOOL *a5, char *a6)
{
  CMTime v7 = *a2;
  return FigAudioFileCursorService_createCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t FigAudioFileCursorService_createCursorAtFirstSampleInDecodeOrder(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  MEMORY[0x19970E290](v3[2]);
  uint64_t v4 = createFigAudioPacketAccessor_0(v3, &v7);
  if (!v4)
  {
    uint64_t v5 = v7;
    *(void *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = v5;
  }
  MEMORY[0x19970E2B0](v3[2]);
  return v4;
}

uint64_t FigAudioFileCursorService_createCursorAtLastSampleInDecodeOrder(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  MEMORY[0x19970E290](v3[2]);
  uint64_t v4 = createFigAudioPacketAccessor_0(v3, &v9);
  if (v4)
  {
    uint64_t AudioFilePacketAndFrameCount = v4;
  }
  else
  {
    uint64_t v5 = v9;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount((uint64_t)v3);
    if (AudioFilePacketAndFrameCount)
    {
      if (v5) {
        CFRelease(v5);
      }
    }
    else
    {
      *(void *)(DerivedStorage + 8) = v3[16] - 1;
      *a2 = v5;
    }
  }
  MEMORY[0x19970E2B0](v3[2]);
  return AudioFilePacketAndFrameCount;
}

uint64_t createFigAudioPacketAccessor_0(void *a1, void *a2)
{
  uint64_t AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount((uint64_t)a1);
  if (AudioFilePacketAndFrameCount) {
    return AudioFilePacketAndFrameCount;
  }
  if (a1[16])
  {
    FigSampleCursorGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5)
    {
      FigSignalErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      void *DerivedStorage = CFRetain(a1);
      DerivedStorage[1] = 0;
      *a2 = 0;
    }
    return v5;
  }

  return FigSignalErrorAt();
}

uint64_t moveToSampleAtPTS_0(void *a1, uint64_t a2, CMTime *a3, BOOL *a4, char *a5)
{
  CMTimeFlags flags = a3->flags;
  int v11 = flags & 9;
  if (v11 == 9)
  {
    CMTimeValue value = 0;
  }
  else if ((flags & 0x1D) == 1)
  {
    memset(&outPropertyData, 0, sizeof(outPropertyData));
    int32_t v13 = *(_DWORD *)(*a1 + 88);
    CMTime v21 = *a3;
    CMTimeConvertScale(&outPropertyData, &v21, v13, kCMTimeRoundingMethod_RoundTowardZero);
    CMTimeValue value = outPropertyData.value;
  }
  else
  {
    CMTimeValue value = 0x7FFFFFFFFFFEA06FLL;
  }
  uint64_t v14 = *(unsigned int *)(a2 + 68);
  if (v14)
  {
    if (!GetAudioFilePacketAndFrameCount(a2))
    {
      if (*(_DWORD *)(a2 + 116))
      {
        uint64_t v15 = value / v14;
        if (*(void *)(a2 + 128) > value / v14)
        {
          char v16 = 0;
          goto LABEL_22;
        }
      }
    }
    uint64_t result = GetAudioFilePacketAndFrameCount(a2);
    if (result) {
      return result;
    }
    uint64_t v15 = *(void *)(a2 + 128) - 1;
LABEL_19:
    char v16 = 1;
    goto LABEL_22;
  }
  *(void *)&outPropertyData.timescale = 0;
  outPropertyData.epoch = 0;
  outPropertyData.CMTimeValue value = value;
  LODWORD(v21.value) = 24;
  uint64_t result = AudioFileGetProperty(*(AudioFileID *)(a2 + 32), 0x6672706Bu, (UInt32 *)&v21, &outPropertyData);
  if ((value & 0x8000000000000000) == 0 && result == 1885563711)
  {
    uint64_t result = GetAudioFilePacketAndFrameCount(a2);
    if (result) {
      return result;
    }
    uint64_t v18 = *(void *)(a2 + 128);
    uint64_t v15 = v18 - 1;
    if (v18 <= 0) {
      uint64_t v15 = 0;
    }
    goto LABEL_19;
  }
  if (result) {
    return result;
  }
  char v16 = 0;
  uint64_t v15 = *(void *)&outPropertyData.timescale;
LABEL_22:
  a1[1] = v15;
  if (a4)
  {
    BOOL v20 = v11 == 9 || a3->value < 0;
    *a4 = v20;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = v16;
  }
  return result;
}

void FigAudioFileCursor_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *FigAudioFileCursor_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReader_AudioFile_SampleCursor %p>{ curPacketNum %lld }", a1, *(void *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t FigAudioFileCursor_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(*DerivedStorage + 16));
  if (!a4)
  {
    uint64_t DependencyInfo = FigSignalErrorAt();
    goto LABEL_44;
  }
  *a4 = 0;
  if (!CFEqual(a2, @"CursorPlayableHorizon"))
  {
    if (CFEqual(a2, @"PreferCreateSampleBuffer"))
    {
      uint64_t v14 = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      goto LABEL_16;
    }
    if (!CFEqual(a2, @"SampleDependencyAttributes"))
    {
      uint64_t Property = 4294954512;
      goto LABEL_17;
    }
    CMTime v21 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    outPacketDescriptions[0].int64_t value = 0;
    if (AudioFileHasSampleDependencies(*v21))
    {
      uint64_t outPropertyData = 0;
      uint64_t DependencyInfo = fafc_GetDependencyInfo(a1, (uint64_t)&outPropertyData);
      if (DependencyInfo) {
        goto LABEL_44;
      }
      uint64_t v22 = FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary();
      if (v22)
      {
        uint64_t Property = v22;
        if (outPacketDescriptions[0].value) {
          CFRelease((CFTypeRef)outPacketDescriptions[0].value);
        }
        goto LABEL_17;
      }
      CMTimeValue v23 = outPacketDescriptions[0].value;
    }
    else
    {
      CMTimeValue v23 = 0;
    }
    uint64_t Property = 0;
    *a4 = v23;
    goto LABEL_17;
  }
  memset(&v31, 0, sizeof(v31));
  uint64_t outPropertyData = 0;
  int64_t v42 = 0;
  uint64_t v43 = 0;
  UInt32 ioDataSize = 24;
  uint64_t v9 = *DerivedStorage;
  int64_t v10 = DerivedStorage[1];
  LODWORD(v11) = *(_DWORD *)(*DerivedStorage + 68);
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v11;
  }
  if (v10 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v11))
  {
    CMTime v31 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    goto LABEL_13;
  }
  uint64_t v44 = 0;
  int64_t v42 = v10;
  uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(v9 + 32), 0x706B6279u, &ioDataSize, &outPropertyData);
  if (Property == 1836020325)
  {
    ioNumPackets[0] = 8;
    uint64_t DependencyInfo = AudioFileReadPacketData(*(AudioFileID *)(*DerivedStorage + 32), 0, 0, (AudioStreamPacketDescription *)outPacketDescriptions, 0, ioNumPackets, 0);
    if (!DependencyInfo)
    {
      uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x706B6279u, &ioDataSize, &outPropertyData);
      goto LABEL_10;
    }
LABEL_44:
    uint64_t Property = DependencyInfo;
    goto LABEL_17;
  }
LABEL_10:
  if (Property)
  {
LABEL_11:
    CMTime v31 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(*DerivedStorage + 24);
  uint64_t v17 = outPropertyData;
  uint64_t v18 = *(void *)(*DerivedStorage + 144);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  UInt32 v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v20 + 24);
  if (!v24 || (uint64_t v25 = v24(v16, v18 + v17, &v44), v25 == -12782))
  {
    uint64_t SizeProc = AudioFile_FigGetSizeProc(*DerivedStorage);
    if (!SizeProc) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t Property = v25;
    if (v25) {
      goto LABEL_11;
    }
    uint64_t SizeProc = v44 + outPropertyData;
    if (!(v44 + outPropertyData))
    {
LABEL_30:
      uint64_t Property = 0;
      goto LABEL_11;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int64_t value = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  *(void *)UInt32 ioNumPackets = SizeProc;
  UInt32 v33 = 24;
  uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x6279706Bu, &v33, ioNumPackets);
  if (Property == 1836020325)
  {
    UInt32 v32 = 8;
    uint64_t v27 = AudioFileReadPacketData(*(AudioFileID *)(*DerivedStorage + 32), 0, 0, (AudioStreamPacketDescription *)outPacketDescriptions, 0, &v32, 0);
    if (v27)
    {
      uint64_t Property = v27;
      goto LABEL_12;
    }
    uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x6279706Bu, &v33, ioNumPackets);
  }
  if (!Property)
  {
    uint64_t v28 = *DerivedStorage;
    uint64_t v29 = *(unsigned int *)(*DerivedStorage + 68);
    if (v29)
    {
      uint64_t Property = 0;
      int64_t v30 = (v38 - DerivedStorage[1]) * v29;
    }
    else
    {
      UInt32 v33 = 24;
      uint64_t v35 = v38;
      uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(v28 + 32), 0x706B6672u, &v33, &value);
      int64_t v30 = value;
      uint64_t v28 = *DerivedStorage;
    }
    CMTimeMake(&v31, v30, *(_DWORD *)(v28 + 88));
  }
LABEL_12:
  if (!Property)
  {
LABEL_13:
    outPacketDescriptions[0] = v31;
    uint64_t v14 = CMTimeCopyAsDictionary(outPacketDescriptions, a3);
LABEL_16:
    uint64_t Property = 0;
    *a4 = (CMTimeValue)v14;
  }
LABEL_17:
  MEMORY[0x19970E2B0](*(void *)(*DerivedStorage + 16));
  return Property;
}

uint64_t fafc_GetDependencyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  UInt32 ioDataSize = 16;
  uint64_t outPropertyData = DerivedStorage[1];
  uint64_t result = AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x706B6470u, &ioDataSize, &outPropertyData);
  if (!result)
  {
    int v5 = HIDWORD(v8);
    *(unsigned char *)a2 = v8 != 0;
    *(_DWORD *)(a2 + 4) = v5;
  }
  return result;
}

uint64_t FigAudioFileCursor_copy(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    int v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    *int v5 = *DerivedStorage;
    CFTypeRef v6 = *(const void **)v5;
    if (v6) {
      CFRetain(v6);
    }
    *a2 = 0;
  }
  return v4;
}

uint64_t FigAudioFileCursor_compareInDecodeOrder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 8);
  uint64_t v3 = *(void *)(v1 + 8);
  BOOL v4 = v2 < v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return -1;
  }
  else {
    return v5;
  }
}

uint64_t FigAudioFileCursor_getPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (int64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *DerivedStorage;
  MEMORY[0x19970E290](*(void *)(*DerivedStorage + 16));
  uint64_t v5 = PacketToPTS(v4, DerivedStorage[1], a2);
  MEMORY[0x19970E2B0](*(void *)(v4 + 16));
  return v5;
}

uint64_t FigAudioFileCursor_getDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (SInt64 *)CMBaseObjectGetDerivedStorage();
  SInt64 v4 = *DerivedStorage;
  MEMORY[0x19970E290](*(void *)(*DerivedStorage + 16));
  int64_t mVariableFramesInPacket = *(unsigned int *)(v4 + 68);
  if (!mVariableFramesInPacket)
  {
    outPacketDescriptions.mStartOffset = 0;
    *(void *)&outPacketDescriptions.int64_t mVariableFramesInPacket = 0;
    UInt32 ioNumPackets = 1;
    uint64_t v6 = AudioFileReadPacketData(*(AudioFileID *)(v4 + 32), 0, 0, &outPacketDescriptions, DerivedStorage[1], &ioNumPackets, 0);
    if (v6)
    {
      uint64_t v7 = v6;
      goto LABEL_5;
    }
    int64_t mVariableFramesInPacket = outPacketDescriptions.mVariableFramesInPacket;
    if (!outPacketDescriptions.mVariableFramesInPacket)
    {
      uint64_t v7 = 4294954516;
      goto LABEL_5;
    }
  }
  CMTimeMake(&v11, mVariableFramesInPacket, *(_DWORD *)(v4 + 88));
  uint64_t v7 = 0;
  *a2 = v11;
LABEL_5:
  MEMORY[0x19970E2B0](*(void *)(v4 + 16));
  return v7;
}

uint64_t FigAudioFileCursor_getDependencyInfo(uint64_t a1, char *a2, unsigned char *a3, _DWORD *a4, unsigned char *a5)
{
  uint64_t v10 = *(void *)CMBaseObjectGetDerivedStorage();
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (!a2) {
    return 0;
  }
  *a2 = 1;
  uint64_t result = AudioFileHasSampleDependencies(v10);
  if (result)
  {
    uint64_t v14 = 0;
    uint64_t result = fafc_GetDependencyInfo(a1, (uint64_t)&v14);
    if (!result)
    {
      if ((_BYTE)v14) {
        BOOL v12 = HIDWORD(v14) == 0;
      }
      else {
        BOOL v12 = 0;
      }
      char v13 = v12;
      *a2 = v13;
    }
  }
  return result;
}

uint64_t FigAudioFileCursor_createSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (int64_t *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *DerivedStorage;
  CMSampleBufferRef sbuf = 0;
  CMBlockBufferRef dataBuffer = 0;
  memset(&v45, 0, sizeof(v45));
  CFTypeRef cf = 0;
  *(void *)UInt32 ioNumPackets = 0;
  MEMORY[0x19970E290](*(void *)(v8 + 16));
  SInt64 v9 = DerivedStorage[1];
  if (v7)
  {
    SInt64 v10 = *(void *)(v7 + 8);
    if (v10 < v9)
    {
      uint64_t v12 = FigSignalErrorAt();
      goto LABEL_72;
    }
    UInt32 v11 = v10 - v9 + 1;
  }
  else
  {
    UInt32 v11 = 1;
  }
  uint64_t v12 = PacketToPTS(v8, DerivedStorage[1], &v45);
  if (v12)
  {
LABEL_72:
    uint64_t v40 = v12;
    goto LABEL_66;
  }
  ioNumPackets[1] = v11;
  int v13 = *(_DWORD *)(v8 + 64);
  uint64_t v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v13)
  {
    unint64_t epoch = v13 * v11;
LABEL_18:
    CFAllocatorRef v16 = *v14;
    uint64_t v17 = CFAllocatorAllocate(*v14, epoch, 0);
    if (!v17)
    {
      uint64_t PacketData = FigSignalErrorAt();
      goto LABEL_68;
    }
    if (*(_DWORD *)(v8 + 68) && *(_DWORD *)(v8 + 64)
      || (uint64_t v12 = ensureAllocationOfPacketDescriptions(v8, ioNumPackets[1]), !v12))
    {
      ioNumPackets[0] = epoch;
      uint64_t PacketData = AudioFileReadPacketData(*(AudioFileID *)(v8 + 32), 0, ioNumPackets, *(AudioStreamPacketDescription **)(v8 + 168), v9, &ioNumPackets[1], v17);
      if (!PacketData)
      {
        uint64_t PacketData = CMBlockBufferCreateWithMemoryBlock(v16, v17, epoch, v16, 0, 0, ioNumPackets[0], 0, &dataBuffer);
        if (!PacketData)
        {
          uint64_t v19 = *(const opaqueCMFormatDescription **)(v8 + 104);
          uint64_t v20 = *(const AudioStreamPacketDescription **)(v8 + 168);
          CMTime outPropertyData = v45;
          uint64_t v21 = CMAudioSampleBufferCreateWithPacketDescriptions(v16, dataBuffer, 1u, 0, 0, v19, ioNumPackets[1], &outPropertyData, v20, &sbuf);
          if (v21)
          {
            uint64_t v40 = v21;
LABEL_58:
            if (sbuf) {
              CFRelease(sbuf);
            }
            goto LABEL_60;
          }
          if (AudioFileHasSampleDependencies(v8))
          {
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v22) {
              uint64_t v23 = v22;
            }
            else {
              uint64_t v23 = 0;
            }
            UInt32 v24 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v23 + 8);
            if (!v24)
            {
LABEL_55:
              uint64_t v40 = 4294954514;
              goto LABEL_56;
            }
            uint64_t v25 = v24(a1, &cf);
            if (v25)
            {
LABEL_73:
              uint64_t v40 = v25;
LABEL_56:
              if (cf) {
                CFRelease(cf);
              }
              goto LABEL_58;
            }
            if (ioNumPackets[1])
            {
              CFIndex v26 = 0;
              do
              {
                CFTypeRef v27 = cf;
                CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
                if (SampleAttachmentsArray)
                {
                  ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, v26);
                  if (ValueAtIndex)
                  {
                    int64_t v30 = ValueAtIndex;
                    outPropertyData.int64_t value = 0;
                    uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(v27);
                    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
                    uint64_t v33 = v32 ? v32 : 0;
                    uint64_t v34 = *(unsigned int (**)(uint64_t, __CFString *, void, CMTime *))(v33 + 48);
                    if (v34)
                    {
                      if (!v34(FigBaseObject, @"SampleDependencyAttributes", 0, &outPropertyData)
                        && outPropertyData.value)
                      {
                        CFDictionaryApplyFunction((CFDictionaryRef)outPropertyData.value, (CFDictionaryApplierFunction)appendAttributesToDictionary_Applier, v30);
                        CFRelease((CFTypeRef)outPropertyData.value);
                      }
                    }
                  }
                }
                CFTypeRef v35 = cf;
                uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v37 = v36 ? v36 : 0;
                uint64_t v38 = *(uint64_t (**)(CFTypeRef, uint64_t, void))(v37 + 168);
                if (!v38) {
                  goto LABEL_55;
                }
                uint64_t v25 = v38(v35, 1, 0);
                if (v25) {
                  goto LABEL_73;
                }
              }
              while (++v26 < (unint64_t)ioNumPackets[1]);
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
          }
          CMBlockBufferRef v39 = dataBuffer;
          *a3 = sbuf;
          if (v39) {
            CFRelease(v39);
          }
          uint64_t v40 = 0;
          goto LABEL_66;
        }
      }
LABEL_68:
      uint64_t v40 = PacketData;
      goto LABEL_61;
    }
    goto LABEL_72;
  }
  UInt32 ioDataSize = 24;
  outPropertyData.int64_t value = v9;
  *(void *)&outPropertyData.timescale = v11;
  outPropertyData.unint64_t epoch = 0;
  if (AudioFileGetProperty(*(AudioFileID *)(*DerivedStorage + 32), 0x70727562u, &ioDataSize, &outPropertyData))
  {
    uint64_t v12 = ensureAllocationOfPacketDescriptions(v8, ioNumPackets[1]);
    if (v12) {
      goto LABEL_72;
    }
    uint64_t v12 = AudioFileReadPacketData(*(AudioFileID *)(v8 + 32), 0, 0, *(AudioStreamPacketDescription **)(v8 + 168), v9, &ioNumPackets[1], 0);
    if (v12) {
      goto LABEL_72;
    }
    if (ioNumPackets[1])
    {
      unint64_t epoch = *(void *)(*(void *)(v8 + 168) + 16 * (ioNumPackets[1] - 1))
            - **(void **)(v8 + 168)
            + *(unsigned int *)(*(void *)(v8 + 168) + 16 * (ioNumPackets[1] - 1) + 12);
      goto LABEL_17;
    }
LABEL_65:
    uint64_t v40 = 4294954456;
    goto LABEL_66;
  }
  unint64_t epoch = outPropertyData.epoch;
  ioNumPackets[1] = outPropertyData.timescale;
  if (!outPropertyData.timescale) {
    goto LABEL_65;
  }
LABEL_17:
  if (!HIDWORD(epoch)) {
    goto LABEL_18;
  }
  uint64_t v40 = FigSignalErrorAt();
LABEL_60:
  uint64_t v17 = 0;
LABEL_61:
  if (dataBuffer) {
    CFRelease(dataBuffer);
  }
  if (v17) {
    CFAllocatorDeallocate(*v14, v17);
  }
LABEL_66:
  MEMORY[0x19970E2B0](*(void *)(v8 + 16));
  return v40;
}

uint64_t FigAudioFileCursor_stepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  memset(&v14, 0, sizeof(v14));
  __int16 v13 = 0;
  MEMORY[0x19970E290](*(void *)(*DerivedStorage + 16));
  uint64_t v4 = *DerivedStorage;
  int64_t v5 = DerivedStorage[1];
  LODWORD(v6) = *(_DWORD *)(*DerivedStorage + 68);
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = v6;
  }
  if (v5 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v6))
  {
    uint64_t v9 = 4294954456;
  }
  else
  {
    memset(&v15, 0, sizeof(v15));
    uint64_t v7 = PacketToPTS(v4, v5, &v15);
    if (v7)
    {
      uint64_t v9 = v7;
    }
    else
    {
      CMTime lhs = v15;
      CMTime v11 = *a2;
      CMTimeAdd(&v14, &lhs, &v11);
      uint64_t v8 = *DerivedStorage;
      CMTime lhs = v14;
      uint64_t v9 = moveToSampleAtPTS_0(DerivedStorage, v8, &lhs, (BOOL *)&v13 + 1, (char *)&v13);
      if (!v9)
      {
        if (HIBYTE(v13) | v13) {
          uint64_t v9 = 4294954456;
        }
        else {
          uint64_t v9 = 0;
        }
      }
    }
  }
  MEMORY[0x19970E2B0](*(void *)(*DerivedStorage + 16));
  return v9;
}

uint64_t FigAudioFileCursor_stepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3 = *a2;
  return FigAudioFileCursor_stepByDecodeTime(a1, &v3);
}

uint64_t FigAudioFileCursor_copySampleLocation(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *DerivedStorage;
  outPacketDescriptions.mStartOffset = 0;
  *(void *)&outPacketDescriptions.int64_t mVariableFramesInPacket = 0;
  UInt32 ioNumPackets = 1;
  MEMORY[0x19970E290](*(void *)(v10 + 16));
  if (!*(_DWORD *)(v10 + 120))
  {
    uint64_t outPropertyData = 0;
    UInt32 ioDataSize = 8;
    uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(v10 + 32), 0x646F6666u, &ioDataSize, &outPropertyData);
    if (Property)
    {
      uint64_t v14 = Property;
      goto LABEL_20;
    }
    *(_DWORD *)(v10 + 120) = 1;
    *(void *)(v10 + 144) = outPropertyData;
  }
  uint64_t v12 = *(unsigned int *)(v10 + 64);
  if (v12)
  {
    outPacketDescriptions.mStartOffset = DerivedStorage[1] * v12;
    outPacketDescriptions.mDataByteSize = v12;
  }
  else
  {
    unsigned int v13 = AudioFileReadPacketData(*(AudioFileID *)(v10 + 32), 0, 0, &outPacketDescriptions, DerivedStorage[1], &ioNumPackets, 0);
    if (v13 == 1869627199) {
      uint64_t v14 = 4294954455;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14) {
      goto LABEL_20;
    }
  }
  if (a2) {
    *a2 = *(void *)(v10 + 144) + outPacketDescriptions.mStartOffset;
  }
  if (a3) {
    *a3 = outPacketDescriptions.mDataByteSize;
  }
  if (a4)
  {
    CFTypeRef v15 = *(CFTypeRef *)(v10 + 24);
    if (v15) {
      CFTypeRef v15 = CFRetain(v15);
    }
    *a4 = v15;
  }
  uint64_t v14 = 0;
  if (a5) {
    *a5 = 0;
  }
LABEL_20:
  MEMORY[0x19970E2B0](*(void *)(v10 + 16));
  return v14;
}

uint64_t FigAudioFileCursor_copyChunkDetails(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unint64_t *a6, unint64_t *a7, unsigned char *a8, unsigned char *a9, unsigned char *a10)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v16 = *DerivedStorage;
  MEMORY[0x19970E290](*(void *)(*DerivedStorage + 16));
  if (!*(_DWORD *)(v16 + 120))
  {
    uint64_t outPropertyData = 0;
    UInt32 ioDataSize = 8;
    uint64_t Property = AudioFileGetProperty(*(AudioFileID *)(v16 + 32), 0x646F6666u, &ioDataSize, &outPropertyData);
    if (Property)
    {
      uint64_t v31 = Property;
      goto LABEL_33;
    }
    *(_DWORD *)(v16 + 120) = 1;
    *(void *)(v16 + 144) = outPropertyData;
  }
  uint64_t v34 = a8;
  uint64_t v33 = a7;
  if (*(unsigned char *)(v16 + 264))
  {
    unint64_t v18 = *(void *)(v16 + 240);
    unint64_t v19 = *(void *)(v16 + 256);
    uint64_t v20 = a4;
  }
  else
  {
    unint64_t v21 = 0.5;
    LODWORD(v21) = *(_DWORD *)(v16 + 68);
    double v22 = *(double *)(v16 + 48) * 0.5 / (double)v21;
    if ((unint64_t)v22 <= 1) {
      unint64_t v18 = 1;
    }
    else {
      unint64_t v18 = (unint64_t)v22;
    }
    unint64_t v23 = *(void *)(v16 + 128);
    unint64_t v19 = v23 / v18;
    unint64_t v24 = v23 % v18;
    *(void *)(v16 + 240) = v18;
    *(void *)(v16 + 248) = v24;
    *(void *)(v16 + 256) = v19;
    if (v24) {
      *(void *)(v16 + 256) = ++v19;
    }
    else {
      *(void *)(v16 + 248) = v18;
    }
    uint64_t v20 = a4;
    *(unsigned char *)(v16 + 264) = 1;
  }
  uint64_t v25 = DerivedStorage[1];
  uint64_t v26 = *(void *)(v16 + 96);
  unint64_t v27 = v18;
  if (v25 / v26 == v19 - 1) {
    unint64_t v27 = *(void *)(v16 + 248);
  }
  uint64_t v28 = *(unsigned int *)(v16 + 64);
  uint64_t v29 = *(void *)(v16 + 144);
  if (a2)
  {
    CFTypeRef v30 = CFRetain(*(CFTypeRef *)(v16 + 24));
    uint64_t v20 = a4;
    *a2 = v30;
  }
  if (a3) {
    *a3 = 0;
  }
  if (v20) {
    *uint64_t v20 = v29 + v25 / v26 * v26 * v28;
  }
  if (a5) {
    *a5 = v27 * v28;
  }
  if (a6) {
    *a6 = v27;
  }
  if (v33) {
    *uint64_t v33 = v25 % v18;
  }
  if (v34) {
    *uint64_t v34 = 1;
  }
  if (a9) {
    *a9 = 1;
  }
  uint64_t v31 = 0;
  if (a10) {
    *a10 = 1;
  }
LABEL_33:
  MEMORY[0x19970E2B0](*(void *)(v16 + 16));
  return v31;
}

uint64_t FigAudioFileCursor_copyFormatDescription(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v4 = *(CFTypeRef *)(*(void *)DerivedStorage + 104);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *a2 = v4;
  }
  return 0;
}

uint64_t FigAudioFileCursor_stepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *DerivedStorage;
  MEMORY[0x19970E290](*(void *)(*DerivedStorage + 16));
  int64_t v7 = DerivedStorage[1];
  LODWORD(v8) = *(_DWORD *)(v6 + 68);
  if (v8 <= 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v8;
  }
  if (v7 >= (uint64_t)(0x7FFFFFFFFFFEA06FLL / v8))
  {
    uint64_t AudioFilePacketAndFrameCount = 4294954456;
    uint64_t v9 = DerivedStorage[1];
    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v9 = v7 + a2;
  if (a2 < 1)
  {
    uint64_t AudioFilePacketAndFrameCount = 0;
    v9 &= ~(v9 >> 63);
    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (!GetAudioFilePacketAndFrameCount(v6) && *(_DWORD *)(v6 + 116) && *(void *)(v6 + 128) > v9)
  {
    uint64_t AudioFilePacketAndFrameCount = 0;
    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t AudioFilePacketAndFrameCount = GetAudioFilePacketAndFrameCount(v6);
  if (!AudioFilePacketAndFrameCount)
  {
    uint64_t v9 = *(void *)(v6 + 128) - 1;
    if (!a3)
    {
LABEL_16:
      DerivedStorage[1] = v9;
      goto LABEL_17;
    }
LABEL_15:
    *a3 = v9 - v7;
    goto LABEL_16;
  }
LABEL_17:
  MEMORY[0x19970E2B0](*(void *)(v6 + 16));
  return AudioFilePacketAndFrameCount;
}

uint64_t PacketToPTS(uint64_t a1, int64_t a2, CMTime *a3)
{
  int64_t value = 0;
  uint64_t v5 = MapPacketNumberToFrameNumber_0(a1, a2, &value);
  if (!v5)
  {
    CMTimeMake(&v7, value, *(_DWORD *)(a1 + 88));
    *a3 = v7;
  }
  return v5;
}

uint64_t ensureAllocationOfPacketDescriptions(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 160) >= (uint64_t)a2)
  {
    return 0;
  }
  else
  {
    size_t v3 = a2;
    free(*(void **)(a1 + 168));
    CFTypeRef v4 = malloc_type_calloc(v3, 0x10uLL, 0x1000040451B5BE8uLL);
    *(void *)(a1 + 168) = v4;
    if (v4)
    {
      __int16 v5 = 0;
      *(void *)(a1 + 160) = v3;
    }
    else
    {
      return (__int16)FigSignalErrorAt();
    }
  }
  return v5;
}

void appendAttributesToDictionary_Applier(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t FigTTMLDocumentWriterGetClassID()
{
  return sFigTTMLDocumentWriterClassID;
}

uint64_t figTTMLDocumentWriter_RegisterFigTTMLDocumentWriterBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigTTMLDocumentWriterGetTypeID()
{
  MEMORY[0x19970EE10](&FigTTMLDocumentWriterGetClassID_sRegisterFigTTMLDocumentWriterBaseTypeOnce, figTTMLDocumentWriter_RegisterFigTTMLDocumentWriterBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigTTMLDocumentWriterSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigTTMLDocumentWriterCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigTTMLDocumentWriterInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  __int16 v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1);
}

uint64_t FigTTMLDocumentWriterStartElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigTTMLDocumentWriterEndElement(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigTTMLDocumentWriterAddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigTTMLDocumentWriterAddText(uint64_t a1)
{
  uint64_t result = FigCaptionDataCreate();
  if (!result) {
    return FigTTMLDocumentWriterAddCaptionData(a1, 0);
  }
  return result;
}

uint64_t FigTTMLDocumentWriterSetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigTTMLDocumentWriterFlush(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 40);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

CFStringRef figTTMLDocumentWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTTMLDocumentWriter %p]", a1);
}

uint64_t FigSampleCursorServiceGetClassID()
{
  return sFigSampleCursorServiceClassID;
}

uint64_t RegisterFigSampleCursorServiceType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigSampleCursorServiceGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleCursorServiceGetClassID_sRegisterFigSampleCursorServiceTypeOnce, RegisterFigSampleCursorServiceType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleCursorGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleCursorGetClassID_sRegisterFigSampleCursorTypeOnce, RegisterFigSampleCursorType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleCursorUtilityGetBatchSampleTimingAndSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v17 + 8);
    if (v18)
    {
      uint64_t v19 = v18(a1, &cf);
      if (!v19)
      {
        if (a2 < 1)
        {
          a2 = 0;
          if (!a4)
          {
LABEL_60:
            if (a5) {
              *a5 = a2;
            }
            uint64_t v50 = 0;
            if (a7) {
              *a7 = a2;
            }
            goto LABEL_55;
          }
        }
        else
        {
          v52 = a5;
          v53 = a7;
          uint64_t v20 = 0;
          uint64_t v21 = a6 + 48;
          uint64_t v22 = a8;
          while (1)
          {
            if (a8)
            {
              CFTypeRef v23 = cf;
              uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v24) {
                uint64_t v25 = v24;
              }
              else {
                uint64_t v25 = 0;
              }
              uint64_t v26 = *(uint64_t (**)(CFTypeRef, void, uint64_t, void, void))(v25 + 144);
              if (!v26) {
                goto LABEL_54;
              }
              uint64_t v19 = v26(v23, 0, v22, 0, 0);
              if (v19) {
                goto LABEL_67;
              }
            }
            if (a6)
            {
              CFTypeRef v27 = cf;
              uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v28) {
                uint64_t v29 = v28;
              }
              else {
                uint64_t v29 = 0;
              }
              CFTypeRef v30 = *(uint64_t (**)(CFTypeRef, uint64_t))(v29 + 40);
              if (!v30) {
                goto LABEL_54;
              }
              uint64_t v19 = v30(v27, v21 - 24);
              if (v19) {
                goto LABEL_67;
              }
              uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v31) {
                uint64_t v32 = v31;
              }
              else {
                uint64_t v32 = 0;
              }
              if (*(void *)(v32 + 48))
              {
                CFTypeRef v33 = cf;
                uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v34) {
                  uint64_t v35 = v34;
                }
                else {
                  uint64_t v35 = 0;
                }
                uint64_t v37 = *(uint64_t (**)(CFTypeRef, uint64_t))(v35 + 48);
                if (!v37) {
                  goto LABEL_54;
                }
                uint64_t v19 = v37(v33, v21);
                if (v19) {
                  goto LABEL_67;
                }
              }
              else
              {
                uint64_t v36 = MEMORY[0x1E4F1F9F8];
                *(_OWORD *)uint64_t v21 = *MEMORY[0x1E4F1F9F8];
                *(void *)(v21 + 16) = *(void *)(v36 + 16);
              }
              CFTypeRef v38 = cf;
              uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v39) {
                uint64_t v40 = v39;
              }
              else {
                uint64_t v40 = 0;
              }
              uint64_t v41 = *(uint64_t (**)(CFTypeRef, uint64_t))(v40 + 56);
              if (!v41) {
                goto LABEL_54;
              }
              uint64_t v19 = v41(v38, v21 - 48);
              if (v19) {
                goto LABEL_67;
              }
            }
            uint64_t v54 = 0;
            CFTypeRef v42 = cf;
            uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v43) {
              uint64_t v44 = v43;
            }
            else {
              uint64_t v44 = 0;
            }
            CMTime v45 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v44 + 168);
            if (!v45) {
              goto LABEL_54;
            }
            uint64_t v19 = v45(v42, 1, &v54);
            if (v19) {
              goto LABEL_67;
            }
            if (v54 != 1) {
              break;
            }
            if (a3)
            {
              CFTypeRef v46 = cf;
              uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v48 = v47 ? v47 : 0;
              if (v48 == *(void *)(CMBaseObjectGetVTable() + 16))
              {
                uint64_t v49 = *(uint64_t (**)(CFTypeRef, uint64_t))(v48 + 32);
                if (v49)
                {
                  if (v49(v46, a3) == 1) {
                    break;
                  }
                }
              }
            }
            ++v20;
            v21 += 72;
            v22 += 8;
            if (a2 == v20) {
              goto LABEL_52;
            }
          }
          a2 = v20 + 1;
LABEL_52:
          a5 = v52;
          a7 = v53;
          if (!a4) {
            goto LABEL_60;
          }
        }
        *a4 = a2;
        goto LABEL_60;
      }
LABEL_67:
      uint64_t v50 = v19;
    }
    else
    {
LABEL_54:
      uint64_t v50 = 4294954514;
    }
LABEL_55:
    if (cf) {
      CFRelease(cf);
    }
    return v50;
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleCursorUtilityGetMinimumUpcomingPresentationTime(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4)
{
  CFTypeRef v51 = 0;
  CMTime v50 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v49 = v50;
  CMTime v47 = v50;
  uint64_t v46 = 0;
  if (!a1)
  {
LABEL_63:
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_64;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v9 + 8);
  if (!v10)
  {
LABEL_62:
    uint64_t v42 = 4294954514;
    goto LABEL_65;
  }
  uint64_t v11 = v10(a1, &v51);
  if (!v11)
  {
    CFTypeRef v12 = v51;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeRef v15 = *(unsigned int (**)(CFTypeRef, CMTime *))(v14 + 48);
    if (v15 && !v15(v12, &v49) && (v49.flags & 0x1D) == 1)
    {
      CFTypeRef v16 = v51;
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      uint64_t v19 = *(unsigned int (**)(CFTypeRef, CMTime *))(v18 + 40);
      if (v19)
      {
        if (!v19(v16, &v50) && (v50.flags & 0x1D) == 1)
        {
          CMTime v48 = v50;
          CMTime v47 = v49;
          while (1)
          {
            CFTypeRef v20 = v51;
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v22 = v21 ? v21 : 0;
            CFTypeRef v23 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v22 + 168);
            if (!v23) {
              goto LABEL_62;
            }
            uint64_t v11 = v23(v20, 1, &v46);
            if (v11) {
              goto LABEL_64;
            }
            if (v46 == 1)
            {
              if (!a2
                || ((CFTypeRef v24 = v51, (v25 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v26 = 0) : (v26 = v25),
                    v26 != *(void *)(CMBaseObjectGetVTable() + 16)
                 || (uint64_t v34 = *(uint64_t (**)(CFTypeRef, uint64_t))(v26 + 32)) == 0
                 || v34(v24, a2) != 1))
              {
                CFTypeRef v27 = v51;
                uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v28) {
                  uint64_t v29 = v28;
                }
                else {
                  uint64_t v29 = 0;
                }
                CFTypeRef v30 = *(unsigned int (**)(CFTypeRef, CMTime *))(v29 + 40);
                if (!v30 || v30(v27, &v50) || (v50.flags & 0x1D) != 1) {
                  goto LABEL_63;
                }
                CMTime time1 = v50;
                CMTime v44 = v48;
                if (CMTimeCompare(&time1, &v44) < 0)
                {
                  CMTime v48 = v50;
                  CFTypeRef v31 = v51;
                  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v33 = v32 ? v32 : 0;
                  uint64_t v35 = *(unsigned int (**)(CFTypeRef, CMTime *))(v33 + 48);
                  if (!v35 || v35(v31, &v47) || (v47.flags & 0x1D) != 1) {
                    goto LABEL_63;
                  }
                }
                uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v37 = v36 ? v36 : 0;
                if (*(void *)(v37 + 80))
                {
                  CFTypeRef v38 = v51;
                  uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v40 = v39 ? v39 : 0;
                  if (v40 != *(void *)(CMBaseObjectGetVTable() + 16)) {
                    continue;
                  }
                  uint64_t v41 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t))(v40 + 80);
                  if (!v41 || !v41(v38, a1, 1)) {
                    continue;
                  }
                }
              }
            }
            if (a3) {
              *a3 = v48;
            }
            uint64_t v42 = 0;
            if (a4) {
              *a4 = v47;
            }
            goto LABEL_65;
          }
        }
      }
    }
    goto LABEL_63;
  }
LABEL_64:
  uint64_t v42 = v11;
LABEL_65:
  if (v51) {
    CFRelease(v51);
  }
  return v42;
}

uint64_t FigSampleCursorUtilityGetPresentationTimeRange(const void *a1, _OWORD *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  memset(&v33, 0, sizeof(v33));
  CMTimeValue value = 0;
  CMTimeScale timescale = 0;
  CFTypeRef v32 = 0;
  CMTime v31 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v30 = 0;
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v29.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v29.start.CMTimeEpoch epoch = v4;
  *(_OWORD *)&v29.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  CFTypeID v5 = CFGetTypeID(a1);
  MEMORY[0x19970EE10](&FigSampleCursorGetClassID_sRegisterFigSampleCursorTypeOnce, RegisterFigSampleCursorType);
  if (v5 != CMBaseClassGetCFTypeID()) {
    goto LABEL_28;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(const void *, CMTime *))(v7 + 40);
  if (!v8) {
    goto LABEL_31;
  }
  uint64_t v9 = v8(a1, &v33);
  if (v9) {
    goto LABEL_29;
  }
  if ((v33.flags & 0x1D) != 1) {
    goto LABEL_28;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v11 = v10 ? v10 : 0;
  CFTypeRef v12 = *(uint64_t (**)(const void *, CFTypeRef *))(v11 + 8);
  if (!v12) {
    goto LABEL_31;
  }
  uint64_t v9 = v12(a1, &v32);
  if (v9) {
    goto LABEL_29;
  }
  CFTypeRef v13 = v32;
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v15 = v14 ? v14 : 0;
  CFTypeRef v16 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v15 + 176);
  if (!v16) {
    goto LABEL_31;
  }
  uint64_t v9 = v16(v13, 1, &v30);
  if (v9) {
    goto LABEL_29;
  }
  if (v30 != 1)
  {
    CMTimeValue value = *MEMORY[0x1E4F1FA10];
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 12);
    CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 8);
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    goto LABEL_26;
  }
  CFTypeRef v17 = v32;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v19 = v18 ? v18 : 0;
  uint64_t v22 = *(uint64_t (**)(CFTypeRef, CMTime *))(v19 + 40);
  if (!v22)
  {
LABEL_31:
    uint64_t v23 = 4294954514;
    if (!a2) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v9 = v22(v17, &v31);
  if (v9) {
    goto LABEL_29;
  }
  CMTime lhs = v31;
  CMTime v26 = v33;
  CMTimeSubtract(&start, &lhs, &v26);
  CMTimeValue value = start.value;
  CMTimeFlags flags = start.flags;
  CMTimeScale timescale = start.timescale;
  CMTimeEpoch epoch = start.epoch;
LABEL_26:
  if ((flags & 0x1D) != 1 && (flags & 5) != 5)
  {
LABEL_28:
    uint64_t v9 = FigSignalErrorAt();
LABEL_29:
    uint64_t v23 = v9;
    if (!a2) {
      goto LABEL_33;
    }
LABEL_32:
    long long v24 = *(_OWORD *)&v29.start.epoch;
    *a2 = *(_OWORD *)&v29.start.value;
    a2[1] = v24;
    a2[2] = *(_OWORD *)&v29.duration.timescale;
    goto LABEL_33;
  }
  CMTime start = v33;
  lhs.CMTimeValue value = value;
  lhs.CMTimeScale timescale = timescale;
  lhs.CMTimeFlags flags = flags;
  lhs.CMTimeEpoch epoch = epoch;
  CMTimeRangeMake(&v29, &start, &lhs);
  uint64_t v23 = 0;
  if (a2) {
    goto LABEL_32;
  }
LABEL_33:
  if (v32) {
    CFRelease(v32);
  }
  return v23;
}

CFStringRef FigSampleCursorServiceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleCursorService %p]", a1);
}

CFStringRef FigSampleCursorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleCursor %p]", a1);
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryStartServer()
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigBufferedAirPlayGlobalRoutingRegistryStartServer_block_invoke;
  block[3] = &unk_1E5793738;
  block[4] = &v3;
  if (FigBufferedAirPlayGlobalRoutingRegistryStartServer_once != -1) {
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryStartServer_once, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigBufferedAirPlayGlobalRoutingRegistryStartServer_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCServerStart();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t globalRoutingRegistry_handleClientMessage(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(a2, "RemoteClientID");
  if (!uint64) {
    return 4294951145;
  }
  uint64_t v5 = uint64;
  if (FigXPCServerGetConnectionRefcon()) {
    return 4294951138;
  }
  int v6 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v8 = 4294951146;
    goto LABEL_6;
  }
  *int v6 = v5;
  uint64_t v8 = FigXPCServerSetConnectionRefcon();
  if (!v8) {
    return 4294951138;
  }
LABEL_6:
  globalRoutingRegistry_disposeConnectionState(v7);
  return v8;
}

void globalRoutingRegistry_disposeConnectionState(uint64_t *a1)
{
  if (a1)
  {
    Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    if (SharedInstance)
    {
      uint64_t v3 = SharedInstance;
      uint64_t v4 = *a1;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 48);
      if (v7) {
        v7(v3, v4);
      }
    }
    free(a1);
  }
}

uint64_t FigSnippetEditCursorServiceSetTrackDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[3].epoch);
  CMTimeEpoch v4 = *(void *)(a2 + 16);
  *(_OWORD *)&DerivedStorage->CMTimeValue value = *(_OWORD *)a2;
  DerivedStorage->CMTimeEpoch epoch = v4;
  snippet_updateSnippetCount(DerivedStorage);
  MEMORY[0x19970E930](DerivedStorage[3].epoch);
  return 0;
}

uint64_t FigSnippetEditCursorServiceSetSnippetDurationAndStep(uint64_t a1, CMTime *a2, CMTime *a3, char a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a2->flags & 0x1D) != 1) {
    goto LABEL_5;
  }
  if ((a3->flags & 0x1D) != 1) {
    goto LABEL_5;
  }
  CMTime time1 = *a2;
  long long v15 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.CMTimeEpoch epoch = v8;
  if (CMTimeCompare(&time1, &time2) < 1
    || (time1 = *a3, *(_OWORD *)&time2.CMTimeValue value = v15, time2.epoch = v8, CMTimeCompare(&time1, &time2) <= 0))
  {
LABEL_5:
    uint64_t v9 = MEMORY[0x1E4F1F9F8];
    long long v10 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v11 = *(void *)(v9 + 16);
    a2->CMTimeEpoch epoch = v11;
    *(_OWORD *)&a3->CMTimeValue value = v10;
    a3->CMTimeEpoch epoch = v11;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  long long v12 = *(_OWORD *)&a2->value;
  *(void *)(DerivedStorage + 40) = a2->epoch;
  *(_OWORD *)(DerivedStorage + 24) = v12;
  CMTimeEpoch epoch = a3->epoch;
  *(_OWORD *)(DerivedStorage + 48) = *(_OWORD *)&a3->value;
  *(void *)(DerivedStorage + 64) = epoch;
  *(unsigned char *)(DerivedStorage + 72) = a4;
  snippet_updateSnippetCount((CMTime *)DerivedStorage);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  return 0;
}

uint64_t FigSnippetEditCursorServiceCreate(uint64_t a1, uint64_t a2, void *a3)
{
  FigEditCursorServiceGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = *(void *)(a2 + 16);
    *(_OWORD *)uint64_t DerivedStorage = *(_OWORD *)a2;
    *(void *)(DerivedStorage + 16) = v7;
    uint64_t v8 = MEMORY[0x1E4F1F9F8];
    long long v9 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E4F1F9F8];
    uint64_t v10 = *(void *)(v8 + 16);
    *(void *)(DerivedStorage + 40) = v10;
    *(_OWORD *)(DerivedStorage + 48) = v9;
    *(void *)(DerivedStorage + 64) = v10;
    *(unsigned char *)(DerivedStorage + 72) = 1;
    *(void *)(DerivedStorage + 80) = 1;
    *(void *)(DerivedStorage + 88) = FigSimpleMutexCreate();
    *a3 = 0;
  }
  return v5;
}

uint64_t snippetCursorService_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 88);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 88) = 0;
  }
  return result;
}

__CFString *snippetCursorService_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSnippetEditCursorService %p>", a1);
  long long v4 = *(_OWORD *)DerivedStorage;
  time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 16);
  *(_OWORD *)&time.CMTimeValue value = v4;
  Float64 Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, @"{ trackDuration %1.3f", *(void *)&Seconds);
  if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1 && (*(_DWORD *)(DerivedStorage + 60) & 0x1D) == 1)
  {
    CMTime time = *(CMTime *)(DerivedStorage + 24);
    Float64 v6 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, @", snippetDuration %1.3f", *(void *)&v6);
    CMTime time = *(CMTime *)(DerivedStorage + 48);
    Float64 v7 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, @", snippetStep %1.3f", *(void *)&v7);
  }
  CFStringAppendFormat(Mutable, 0, @" }");
  return Mutable;
}

uint64_t snippetCursorService_CreateCursorAtTrackTime(const void *a1, CMTime *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (!v7)
  {
    uint64_t v8 = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t v8 = a1;
    CFRetain(a1);
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
    if ((*(_DWORD *)(DerivedStorage + 60) & 0x1D) == 1)
    {
      memset(&v14, 0, sizeof(v14));
      int32_t v9 = *(_DWORD *)(DerivedStorage + 56);
      CMTime v13 = *a2;
      CMTimeConvertScale(&v14, &v13, v9, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
      CMTimeValue v10 = v14.value / *(uint64_t *)(DerivedStorage + 48);
      if (v10 < 0)
      {
        CMTimeValue v10 = 0;
      }
      else
      {
        CMTimeValue v11 = *(void *)(DerivedStorage + 80);
        if (v10 >= v11) {
          CMTimeValue v10 = v11 - 1;
        }
      }
      v8[1] = v10;
    }
    else
    {
      v8[1] = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
    *a3 = v15;
  }
  return v7;
}

void snippetCursor_Finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *snippetCursor_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSnippetEditCursor %p>{ service %p, editIndex %d }", a1, *DerivedStorage, DerivedStorage[1]);
  return Mutable;
}

uint64_t snippetCursor_Copy(const void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    Float64 v6 = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t v7 = *(const void **)DerivedStorage;
    uint64_t v8 = *(void *)(DerivedStorage + 8);
    *Float64 v6 = *(void *)DerivedStorage;
    v6[1] = v8;
    CFRetain(v7);
    *a2 = 0;
  }
  return v5;
}

uint64_t snippetCursor_Step(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v4 + 88));
  uint64_t v5 = *(void *)(v4 + 80);
  MEMORY[0x19970E930](*(void *)(v4 + 88));
  uint64_t v6 = *(void *)(DerivedStorage + 8) + a2;
  uint64_t v7 = v5 - 1;
  if (v6 >= v5) {
    unsigned int v8 = -12520;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v6 < v5) {
    uint64_t v7 = *(void *)(DerivedStorage + 8) + a2;
  }
  if (v6 >= 0) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = 4294954776;
  }
  if (v6 >= 0) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  *(void *)(DerivedStorage + 8) = v10;
  return result;
}

uint64_t snippetCursor_GetEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v4 + 88));
  if ((*(_DWORD *)(v4 + 60) & 0x1D) == 1)
  {
    unint64_t v5 = *(void *)(DerivedStorage + 8);
    if (v5 >> 31)
    {
      uint64_t v9 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v6 = (_OWORD *)(a2 + 48);
      CMTime time = *(CMTime *)(v4 + 48);
      CMTimeMultiply(&lhs, &time, v5);
      *(CMTime *)(a2 + 48) = lhs;
      long long v7 = *(_OWORD *)(v4 + 48);
      *(void *)(a2 + 88) = *(void *)(v4 + 64);
      *(_OWORD *)(a2 + 72) = v7;
      if (*(unsigned char *)(v4 + 72))
      {
        CMTime lhs = *(CMTime *)(v4 + 48);
        CMTime time = *(CMTime *)(v4 + 24);
        CMTimeSubtract(&rhs, &lhs, &time);
        *(_OWORD *)&time.CMTimeValue value = *v6;
        time.CMTimeEpoch epoch = *(void *)(a2 + 64);
        CMTimeAdd(&lhs, &time, &rhs);
        *(_OWORD *)a2 = *(_OWORD *)&lhs.value;
        CMTimeEpoch epoch = lhs.epoch;
      }
      else
      {
        *(_OWORD *)a2 = *v6;
        CMTimeEpoch epoch = *(void *)(a2 + 64);
      }
      *(void *)(a2 + 16) = epoch;
      uint64_t v9 = 0;
      long long v15 = *(_OWORD *)(v4 + 24);
      *(void *)(a2 + 40) = *(void *)(v4 + 40);
      *(_OWORD *)(a2 + 24) = v15;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = MEMORY[0x1E4F1FA48];
    long long v11 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)(a2 + 48) = *MEMORY[0x1E4F1FA48];
    uint64_t v12 = *(void *)(v10 + 16);
    *(void *)(a2 + 64) = v12;
    long long v13 = *(_OWORD *)v4;
    *(void *)(a2 + 88) = *(void *)(v4 + 16);
    *(_OWORD *)(a2 + 72) = v13;
    *(void *)(a2 + 16) = v12;
    *(_OWORD *)a2 = v11;
    uint64_t v14 = *(void *)(v4 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v4;
    *(void *)(a2 + 40) = v14;
  }
  MEMORY[0x19970E930](*(void *)(v4 + 88));
  return v9;
}

uint64_t FigCaptionRendererOutputGetClassID()
{
  return sFigCaptionRendererOutputClassID;
}

uint64_t RegisterFigCaptionRendererOutputType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigCaptionRendererOutputCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptionRendererOutput %p]", a1);
}

uint64_t FigStreamingAssetLoaderRequestSessionKeys(void *a1)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v22 = 0;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFIndex v3 = FigStreamingAssetLoaderCopyProperty((uint64_t)a1, @"assetProperty_HLSSessionKeys", AllocatorForMedia, &theArray);
  if (v3)
  {
    uint64_t v20 = v3;
  }
  else
  {
    CFIndex v4 = 0;
    while (1)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (v4 >= Count) {
        break;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
      char v7 = FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex) == 1
        && FigContentKeySpecifierGetEncryptionMethod((uint64_t)ValueAtIndex) == 3;
      int KeySystem = FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex);
      uint64_t v9 = FigGetAllocatorForMedia();
      uint64_t v10 = FigContentKeyRequestParamsCreate(v9, ValueAtIndex, v7, 0, 0, 0, 0, 0, 0, 1, 1, 0, (uint64_t *)&cf);
      if (v10)
      {
LABEL_18:
        uint64_t v20 = v10;
        goto LABEL_21;
      }
      if (KeySystem == 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = 2;
      }
      uint64_t v12 = a1[7];
      CFTypeRef v13 = cf;
      uint64_t v14 = a1[4];
      uint64_t v15 = a1[5];
      uint64_t v16 = a1[11];
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, void *, uint64_t, uint64_t *))(v18 + 8);
      if (!v19)
      {
        uint64_t v20 = 4294954514;
        goto LABEL_21;
      }
      uint64_t v10 = v19(v12, v13, v11, 1, v14, v15, v23, a1, v16, &v22);
      ++v4;
      if (v10) {
        goto LABEL_18;
      }
    }
    uint64_t v20 = 0;
LABEL_21:
    if (cf) {
      CFRelease(cf);
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v20;
}

CFIndex FigStreamingAssetLoaderCopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, void *a4)
{
  if (!a4)
  {
LABEL_45:
    return FigSignalErrorAt();
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    sapl_loadMultivariantPlaylist(a1);
    if (*(unsigned char *)(a1 + 72)) {
      return 4294954513;
    }
    if (*(void *)(a1 + 160))
    {
      if (FigCFEqual())
      {
        Alternates = (const void *)FigMultivariantPlaylistGetAlternates(*(void *)(a1 + 160));
        if (!Alternates) {
          goto LABEL_77;
        }
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        Alternates = (const void *)FigMultivariantPlaylistGetContentKeySpecifiers(*(void *)(a1 + 160));
        if (!Alternates) {
          goto LABEL_77;
        }
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        Alternates = (const void *)FigMultivariantPlaylistGetMediaSelectionArray(*(void *)(a1 + 160));
        if (Alternates)
        {
LABEL_19:
          DictionaryRepresentation = (void *)CFRetain(Alternates);
LABEL_20:
          uint64_t v9 = DictionaryRepresentation;
LABEL_78:
          CFIndex result = 0;
LABEL_79:
          *a4 = v9;
          return result;
        }
LABEL_77:
        uint64_t v9 = 0;
        goto LABEL_78;
      }
      if (FigCFEqual())
      {
        CFArrayRef v10 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*(void *)(a1 + 160));
        CFNumberRef v11 = FigStreamAlternateCopyNominalVideoFrameRate(v10);
LABEL_23:
        *a4 = v11;
        BOOL v12 = v11 == 0;
        unsigned int v13 = -12783;
        goto LABEL_24;
      }
      if (FigCFEqual())
      {
        CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(a1 + 160));
        if (SessionDataSpecifiers && CFArrayGetCount(SessionDataSpecifiers) >= 1)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          if (Mutable)
          {
            uint64_t v17 = Mutable;
            CFArrayAppendValue(Mutable, @"com.apple.quicktime.HLS");
            *a4 = CFRetain(v17);
            CFRelease(v17);
            return 0;
          }
          goto LABEL_45;
        }
      }
      else
      {
        if (FigCFEqual())
        {
          CFArrayRef v18 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*(void *)(a1 + 160));
          CFNumberRef v11 = FigStreamAlternateCopyAvailableVideoDynamicRanges(v18);
          goto LABEL_23;
        }
        CFIndex result = FigCFEqual();
        if (!result) {
          return result;
        }
        *(_OWORD *)&v31.CMTimeValue value = *MEMORY[0x1E4F1DB30];
        CFArrayRef v19 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*(void *)(a1 + 160));
        if (FigStreamAlternateCopyMaximumVideoResolution(v19, (double *)&v31.value))
        {
          *(void *)&v33.width = v31.value;
          v33.height = *(CGFloat *)&v31.timescale;
          DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v33);
          goto LABEL_20;
        }
      }
      return 4294954513;
    }
    uint64_t v22 = *(__CFError **)(a1 + 176);
    if (!v22) {
      return 4294954513;
    }
    return CFErrorGetCode(v22);
  }
  if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
  {
    if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
    {
      CFIndex result = FigCFEqual();
      if (!result) {
        return result;
      }
      Alternates = *(const void **)(a1 + 96);
      if (Alternates) {
        goto LABEL_19;
      }
      return 4294954513;
    }
    sapl_loadMultivariantPlaylist(a1);
    CFIndex result = sapl_loadMediaPlaylist(a1);
    if (result) {
      return result;
    }
    CFIndex result = sapl_loadSessionData(a1);
    if (result) {
      return result;
    }
    if (*(void *)(a1 + 208) || *(void *)(a1 + 240))
    {
      if (FigCFEqual())
      {
        if (*(void *)(a1 + 208))
        {
          Alternates = *(const void **)(a1 + 232);
          if (Alternates) {
            goto LABEL_19;
          }
          goto LABEL_77;
        }
      }
      else if (FigCFEqual())
      {
        Alternates = *(const void **)(a1 + 208);
        if (Alternates) {
          goto LABEL_19;
        }
      }
      else
      {
        CFIndex result = FigCFEqual();
        if (!result) {
          return result;
        }
        Alternates = *(const void **)(a1 + 240);
        if (Alternates) {
          goto LABEL_19;
        }
      }
      return 4294954513;
    }
    uint64_t v22 = *(__CFError **)(a1 + 224);
    if (!v22) {
      return 4294954513;
    }
    return CFErrorGetCode(v22);
  }
  sapl_loadMultivariantPlaylist(a1);
  CFIndex result = sapl_loadMediaPlaylist(a1);
  if (result) {
    return result;
  }
  if (*(void *)(a1 + 184))
  {
    if (FigCFEqual())
    {
      CMTime v31 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
      int HasEndTag = FigMediaPlaylistHasEndTag(*(void *)(a1 + 184));
      double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a1 + 184));
      if (HasEndTag)
      {
        CMTimeMakeWithSeconds(&v31, PlaylistActiveDurationSecs, 1000000);
      }
      else if (PlaylistActiveDurationSecs <= 0.0)
      {
        return 4294954513;
      }
      CMTime time = v31;
      DictionaryRepresentation = CMTimeCopyAsDictionary(&time, a3);
      goto LABEL_20;
    }
    if (FigCFEqual())
    {
      CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(*(void *)(a1 + 184));
      if (ContentKeySpecifiers && CFArrayGetCount(ContentKeySpecifiers) > 0
        || (CFArrayRef v25 = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(*(void *)(a1 + 160))) != 0
        && CFArrayGetCount(v25) >= 1)
      {
        CFIndex result = 0;
        CMTime v26 = (void **)MEMORY[0x1E4F1CFD0];
      }
      else
      {
        CFIndex result = 0;
        CMTime v26 = (void **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v9 = *v26;
      goto LABEL_79;
    }
    CFIndex result = FigCFEqual();
    if (!result) {
      return result;
    }
    if (FigMediaPlaylistGetTargetDuration(*(void *)(a1 + 184)))
    {
      double MinimumTimeOffsetFromLive = sapl_getMinimumTimeOffsetFromLive(a1);
      CMTimeMakeWithSeconds(&v29, MinimumTimeOffsetFromLive, 1000000);
      CFDictionaryRef v28 = CMTimeCopyAsDictionary(&v29, a3);
      *a4 = v28;
      BOOL v12 = v28 == 0;
      unsigned int v13 = -12786;
LABEL_24:
      if (v12) {
        return v13;
      }
      else {
        return 0;
      }
    }
    *a4 = 0;
    return 4294954513;
  }
  if (*(void *)(a1 + 160) || (uint64_t v23 = *(__CFError **)(a1 + 176)) == 0)
  {
    uint64_t v23 = *(__CFError **)(a1 + 200);
    if (!v23) {
      return 4294954513;
    }
  }
  CFIndex result = CFErrorGetCode(v23);
  if (!result) {
    return 4294954513;
  }
  return result;
}

intptr_t sapl_loadMultivariantPlaylist(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 168))
  {
    JUMPOUT(0x19970E930);
  }
  if (!*(void *)(a1 + 120))
  {
    *(_DWORD *)(a1 + 136) = 1;
    sapl_loadPlaylist(a1, *(const void **)(a1 + 16), 1);
  }
  ++*(void *)(a1 + 152);
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  uint64_t v2 = *(NSObject **)(a1 + 144);

  return dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t sapl_loadMediaPlaylist(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 192) || *(unsigned char *)(a1 + 72) || (uint64_t v2 = *(void *)(a1 + 160)) == 0)
  {
    uint64_t v9 = 0;
    goto LABEL_19;
  }
  CFArrayRef Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates(v2);
  if (!*(void *)(a1 + 120))
  {
    if (*(void *)(a1 + 160))
    {
      CFArrayRef v4 = Alternates;
      if (Alternates)
      {
        if (CFArrayGetCount(Alternates) >= 1)
        {
          uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
          if (CFArrayGetCount(v4) >= 1)
          {
            CFIndex v6 = 0;
            while (1)
            {
              char v7 = CFArrayGetValueAtIndex(v4, v6);
              if (!FigAlternateIsIFrameOnly((uint64_t)v7)) {
                break;
              }
              if (++v6 >= CFArrayGetCount(v4)) {
                goto LABEL_14;
              }
            }
            uint64_t ValueAtIndex = (uint64_t)v7;
          }
LABEL_14:
          if (ValueAtIndex)
          {
            *(_DWORD *)(a1 + 136) = 2;
            PlaylistAlternateURL = (const void *)FigAlternateGetPlaylistAlternateURL(ValueAtIndex);
            sapl_loadPlaylist(a1, PlaylistAlternateURL, 0);
            goto LABEL_16;
          }
        }
      }
    }
    uint64_t v9 = FigSignalErrorAt();
LABEL_19:
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    return v9;
  }
LABEL_16:
  ++*(void *)(a1 + 152);
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 144), 0xFFFFFFFFFFFFFFFFLL);
  return 0;
}

double sapl_getMinimumTimeOffsetFromLive(uint64_t a1)
{
  if (FigMediaPlaylistDoesServerSupportsBlockingReload(*(void *)(a1 + 184))
    && FigMediaPlaylistGetPartTargetDuration(*(void *)(a1 + 184)) > 0.0)
  {
    double PartTargetDuration = FigMediaPlaylistGetPartTargetDuration(*(void *)(a1 + 184));
    double v3 = PartTargetDuration + PartTargetDuration;
    if (FigMediaPlaylistGetHoldBackDuration(*(void *)(a1 + 184)) <= PartTargetDuration + PartTargetDuration) {
      return v3;
    }
  }
  else
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 184));
    uint64_t LastValue = FigCFArrayGetLastValue();
    if (LastValue && (TimeInFloat64 Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(LastValue), TimeInSeconds != 0.0)) {
      double v3 = TimeInSeconds + (double)FigMediaPlaylistGetTargetDuration(*(void *)(a1 + 184)) * 2.0;
    }
    else {
      double v3 = (double)FigMediaPlaylistGetTargetDuration(*(void *)(a1 + 184)) * 3.0;
    }
    if (v3 >= FigMediaPlaylistGetHoldBackDuration(*(void *)(a1 + 184))) {
      return v3;
    }
  }
  uint64_t v7 = *(void *)(a1 + 184);

  return FigMediaPlaylistGetHoldBackDuration(v7);
}

uint64_t sapl_loadSessionData(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  CMTimeValue value = 0;
  if (*(unsigned char *)(a1 + 216) || *(unsigned char *)(a1 + 72))
  {
LABEL_20:
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    double v3 = (uint64_t *)(a1 + 128);
    uint64_t Queue = FigMediaRequestSchedulerCreate(AllocatorForMedia, *(const void **)(a1 + 80), *(const void **)(a1 + 32), *(const void **)(a1 + 40), *(const void **)(a1 + 112), 0, *(const void **)(a1 + 48), *(const void **)(a1 + 104), *(const void **)(a1 + 96), a1, (uint64_t)sapl_loadSessionData_outputCallbacks, *(NSObject **)(a1 + 88), (uint64_t *)(a1 + 128));
    if (Queue)
    {
LABEL_25:
      uint64_t v16 = Queue;
    }
    else
    {
      int v5 = 0;
      CFIndex v6 = 0;
      uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(a1 + 160));
        if (SessionDataSpecifiers) {
          CFArrayRef SessionDataSpecifiers = (const __CFArray *)CFArrayGetCount(SessionDataSpecifiers);
        }
        if (v6 >= (uint64_t)SessionDataSpecifiers) {
          break;
        }
        CFArrayRef v9 = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(a1 + 160));
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v9, v6);
        if (FigSessionDataSpecifierGetURL((uint64_t)ValueAtIndex))
        {
          uint64_t Queue = FigMediaRequestSchedulerAddResourceToReadQueue(*v3, ValueAtIndex);
          if (Queue) {
            goto LABEL_25;
          }
          int v5 = 1;
        }
        else
        {
          if (!*(void *)(a1 + 208))
          {
            CFAllocatorRef v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, v7);
            *(void *)(a1 + 208) = Mutable;
            if (!Mutable)
            {
              uint64_t Queue = FigSignalErrorAt();
              goto LABEL_25;
            }
          }
          Identifier = (void *)FigSessionDataSpecifierGetIdentifier((uint64_t)ValueAtIndex);
          uint64_t v14 = (const void *)FigSessionDataSpecifierGetValue((uint64_t)ValueAtIndex);
          Language = (const void *)FigSessionDataSpecifierGetLanguage((uint64_t)ValueAtIndex);
          uint64_t Queue = FigHLSSessionDataCopyMetadataEntry(Identifier, v14, Language, 0, (CFMutableDictionaryRef *)&value);
          if (Queue) {
            goto LABEL_25;
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 208), value);
          if (value)
          {
            CFRelease(value);
            CMTimeValue value = 0;
          }
        }
        ++v6;
      }
      if (!v5) {
        goto LABEL_20;
      }
      uint64_t v16 = FigMediaRequestSchedulerStart(*v3);
      if (!v16)
      {
        ++*(void *)(a1 + 152);
        MEMORY[0x19970E930](*(void *)(a1 + 64));
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 144), 0xFFFFFFFFFFFFFFFFLL);
        MEMORY[0x19970E910](*(void *)(a1 + 64));
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  if (value) {
    CFRelease(value);
  }
  return v16;
}

uint64_t FigStreamingAssetPropertyLoaderCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, void *a9)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a9)
  {
    long long context = xmmword_1E5793760;
    if (sapl_getTypeID_once != -1) {
      dispatch_once_f(&sapl_getTypeID_once, &context, (dispatch_function_t)spptUtil_registerClass_0);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (!Instance) {
      return FigSignalErrorAt();
    }
    unsigned int v13 = (void *)Instance;
    if (a2) {
      CFTypeRef v14 = CFRetain(a2);
    }
    else {
      CFTypeRef v14 = 0;
    }
    v13[2] = v14;
    if (a3) {
      CFTypeRef v15 = CFRetain(a3);
    }
    else {
      CFTypeRef v15 = 0;
    }
    v13[3] = v15;
    if (a4) {
      CFTypeRef v16 = CFRetain(a4);
    }
    else {
      CFTypeRef v16 = 0;
    }
    v13[4] = v16;
    CFTypeRef v17 = a5;
    if (a5) {
      CFTypeRef v17 = CFRetain(a5);
    }
    v13[5] = v17;
    CFTypeRef v18 = a6;
    if (a6) {
      CFTypeRef v18 = CFRetain(a6);
    }
    v13[6] = v18;
    CFTypeRef v19 = a7;
    if (a7) {
      CFTypeRef v19 = CFRetain(a7);
    }
    v13[7] = v19;
    CFTypeRef v20 = a8;
    if (a8) {
      CFTypeRef v20 = CFRetain(a8);
    }
    v13[12] = v20;
    v13[8] = FigSimpleMutexCreate();
    uint64_t v21 = FigHTTPSchedulerRetain(0);
    v13[11] = v21;
    if (v21)
    {
      uint64_t v22 = 0;
      v13[18] = dispatch_semaphore_create(0);
      *a9 = v13;
    }
    else
    {
      uint64_t v22 = FigSignalErrorAt();
      CFRelease(v13);
    }
    return v22;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sapl_loadPlaylist(uint64_t a1, const void *a2, int a3)
{
  uint64_t v6 = a1 + 80;
  if (*(void *)(a1 + 80)) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (v7) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, *(CFDictionaryRef *)(a1 + 32));
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFMutableDictionaryRef v10 = MutableCopy;
  if (!MutableCopy)
  {
    if (!FigSignalErrorAt()) {
      goto LABEL_13;
    }
LABEL_33:
    JUMPOUT(0x19970E930);
  }
  FigCFDictionarySetInt64();
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFTypeRef v15 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t))(v14 + 40);
  if (v15) {
    int v16 = v15(v11, v12, v10, v6);
  }
  else {
    int v16 = -12782;
  }
  CFRelease(v10);
  if (v16) {
    goto LABEL_33;
  }
LABEL_13:
  if (!*(void *)(a1 + 104)) {
    *(void *)(a1 + 104) = FigCopyCommonMemoryPool();
  }
  if (*(void *)(a1 + 96))
  {
    CFTypeRef v17 = 0;
    goto LABEL_19;
  }
  CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_33;
  }
  CFTypeRef v17 = Mutable;
  CFDictionarySetValue(Mutable, @"FSC_Backing", @"FSC_MemoryBacking");
  CFAllocatorRef v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (FigStreamingCacheCreate(v20, *(const __CFURL **)(a1 + 16), v17, (uint64_t *)(a1 + 96)))
  {
    MEMORY[0x19970E930](*(void *)(a1 + 64));
LABEL_26:
    CFRelease(v17);
    return;
  }
LABEL_19:
  int v21 = FigGetAllocatorForMedia();
  if (!FigMediaRequestCreateForPlaylist(v21, a2, *(const void **)(a1 + 96), a3, *(const void **)(a1 + 80), *(const void **)(a1 + 32), *(const void **)(a1 + 40), 0, 0, 0, 0, *(const void **)(a1 + 48), *(const void **)(a1 + 104), a1, (uint64_t)sapl_loadPlaylist_outputCallbacks, *(NSObject **)(a1 + 88), (void *)(a1 + 120)))
  {
    uint64_t v22 = *(void *)(a1 + 120);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v24 = v23 ? v23 : 0;
    CFArrayRef v25 = *(void (**)(uint64_t))(v24 + 8);
    if (v25) {
      v25(v22);
    }
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  if (v17) {
    goto LABEL_26;
  }
}

void sapl_playlistDidProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, OpaqueCMBlockBuffer *a6, int a7)
{
  int v20 = 0;
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970E910](*(void *)(a2 + 64));
  if (!a7)
  {
    int v11 = FigSignalErrorAt();
    if (!v11) {
      goto LABEL_22;
    }
LABEL_19:
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFErrorRef v15 = CFErrorCreate(AllocatorForMedia, @"CoreMediaErrorDomain", v11, 0);
    sapl_playlistDidFail((uint64_t)v15, a2, v15);
    if (v15) {
      CFRelease(v15);
    }
    goto LABEL_28;
  }
  int v10 = FigStreamPlaylistParse(a6, *(const __CFURL **)(a2 + 16), *(const __CFURL **)(a2 + 16), &v20, 0, 1, 1, 1, 0, 0, 0, 0, (uint64_t *)&v19, &cf);
  if (v10)
  {
    int v11 = v10;
    goto LABEL_19;
  }
  if (v19)
  {
    int v11 = 0;
    *(void *)(a2 + 160) = CFRetain(v19);
  }
  else
  {
    CFTypeRef v12 = cf;
    if (cf)
    {
      if (*(_DWORD *)(a2 + 136) == 1) {
        *(unsigned char *)(a2 + 72) = 1;
      }
      int v11 = 0;
      *(void *)(a2 + 184) = CFRetain(v12);
    }
    else
    {
      int v11 = FigSignalErrorAt();
    }
  }
  int v13 = *(_DWORD *)(a2 + 136);
  if (v13 == 2)
  {
    LOBYTE(v13) = 1;
    goto LABEL_15;
  }
  if (v13 != 1)
  {
    FigSignalErrorAt();
    goto LABEL_18;
  }
  *(unsigned char *)(a2 + 168) = 1;
  if (*(unsigned char *)(a2 + 72))
  {
LABEL_15:
    *(unsigned char *)(a2 + 192) = v13;
    if (v11) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
LABEL_18:
  if (v11) {
    goto LABEL_19;
  }
LABEL_22:
  int v16 = *(const void **)(a2 + 120);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a2 + 120) = 0;
  }
  if (*(uint64_t *)(a2 + 152) >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 144));
      ++v17;
    }
    while (v17 < *(void *)(a2 + 152));
  }
  *(void *)(a2 + 152) = 0;
LABEL_28:
  MEMORY[0x19970E930](*(void *)(a2 + 64));
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sapl_playlistDidFail(uint64_t a1, uint64_t a2, const void *a3)
{
  MEMORY[0x19970E910](*(void *)(a2 + 64));
  int v5 = *(_DWORD *)(a2 + 136);
  if (v5 == 2)
  {
    if (a3) {
      CFTypeRef v7 = CFRetain(a3);
    }
    else {
      CFTypeRef v7 = 0;
    }
    *(void *)(a2 + 200) = v7;
  }
  else if (v5 == 1)
  {
    if (a3) {
      CFTypeRef v6 = CFRetain(a3);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(a2 + 176) = v6;
  }
  else
  {
    FigSignalErrorAt();
  }
  int v8 = *(_DWORD *)(a2 + 136);
  if (v8 == 2)
  {
    *(unsigned char *)(a2 + 192) = 1;
  }
  else if (v8 == 1)
  {
    *(unsigned char *)(a2 + 168) = 1;
  }
  else
  {
    FigSignalErrorAt();
  }
  CFArrayRef v9 = *(const void **)(a2 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a2 + 120) = 0;
  }
  if (*(uint64_t *)(a2 + 152) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 144));
      ++v10;
    }
    while (v10 < *(void *)(a2 + 152));
  }
  *(void *)(a2 + 152) = 0;

  JUMPOUT(0x19970E930);
}

void sapl_sessionDataSchedulerDidProduceDataOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, OpaqueCMBlockBuffer *a7, int a8)
{
  CFTypeRef v43 = 0;
  CFHTTPMessageRef message = 0;
  CMBlockBufferRef blockBufferOut = 0;
  MEMORY[0x19970E910](*(void *)(a3 + 64));
  if (!a8)
  {
    FigSignalErrorAt();
    goto LABEL_60;
  }
  if (a4)
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFHTTPMessageRef *))(v16 + 48);
    if (v17)
    {
      v17(a4, 0x1EE57B5F8, AllocatorForMedia, &message);
      if (message) {
        CFTypeRef v43 = CFHTTPMessageCopyAllHeaderFields(message);
      }
    }
  }
  else if (a5)
  {
    FigCustomURLResponseInfoCopyHTTPHeaders();
  }
  CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFAllocatorRef v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
  size_t DataLength = CMBlockBufferGetDataLength(a7);
  if (!CMBlockBufferCreateContiguous(v18, a7, v19, 0, 0, DataLength, 0, &blockBufferOut))
  {
    CFTypeRef v21 = v43;
    CFArrayRef theArray = 0;
    CFTypeRef cf = 0;
    CMTimeValue value = 0;
    FigGetAllocatorForMedia();
    if (FigCreateCFDataWithBlockBufferNoCopy())
    {
      CFPropertyListRef v24 = 0;
      goto LABEL_52;
    }
    CFDataRef v22 = (const __CFData *)cf;
    CFTypeRef v48 = 0;
    if (FigSessionDataSpecifierGetFormatType(a2) == 2)
    {
      CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFPropertyListRef v24 = CFPropertyListCreateWithData(v23, v22, 1uLL, 0, 0);
      if (!v24) {
        goto LABEL_52;
      }
      goto LABEL_28;
    }
    if (FigSessionDataSpecifierGetFormatType(a2) == 1) {
      goto LABEL_17;
    }
    if (FigSessionDataSpecifierGetFormatType(a2) == 3)
    {
      if (v22)
      {
LABEL_21:
        CFPropertyListRef v24 = CFRetain(v22);
        goto LABEL_28;
      }
    }
    else
    {
      FigSessionDataSpecifierGetIdentifier(a2);
      if (!FigCFEqual())
      {
        if (FigSessionDataSpecifierGetFormatType(a2))
        {
          CFPropertyListRef v24 = v48;
        }
        else
        {
          CFAllocatorRef v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFPropertyListRef v24 = CFPropertyListCreateWithData(v26, v22, 1uLL, 0, 0);
          CFTypeRef v48 = v24;
          if (!v24)
          {
LABEL_17:
            int v25 = FigCFHTTPCreatePropertyListFromJSON((uint64_t)v22, &v48);
            CFPropertyListRef v24 = v48;
            if (v25) {
              goto LABEL_52;
            }
          }
        }
LABEL_28:
        if (*(void *)(a3 + 232)
          || (CFAllocatorRef v27 = (const __CFAllocator *)FigGetAllocatorForMedia(),
              CFMutableArrayRef v28 = CFArrayCreateMutable(v27, 0, MEMORY[0x1E4F1D510]),
              (*(void *)(a3 + 232) = v28) != 0))
        {
          uint64_t v29 = *(void *)(a3 + 184);
          if (v29) {
            double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(v29);
          }
          else {
            double PlaylistActiveDurationSecs = 0.0;
          }
          Identifier = (const void *)FigSessionDataSpecifierGetIdentifier(a2);
          CFURLRef URL = (const __CFURL *)FigSessionDataSpecifierGetURL(a2);
          if (FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntry(Identifier, v24, URL, (uint64_t)v21, &theArray, 0, PlaylistActiveDurationSecs))goto LABEL_52; {
          if (theArray && CFArrayGetCount(theArray) >= 1)
          }
          {
            CGSize v33 = *(__CFArray **)(a3 + 232);
            CFArrayRef v34 = theArray;
            if (theArray) {
              v35.length = CFArrayGetCount(theArray);
            }
            else {
              v35.length = 0;
            }
            v35.location = 0;
            CFArrayAppendArray(v33, v34, v35);
          }
          if (FigSessionDataSpecifierGetURL(a2)
            && (!FigSessionDataSpecifierGetFormatType(a2)
             || FigSessionDataSpecifierGetFormatType(a2) == 1))
          {
            FigSessionDataSpecifierGetIdentifier(a2);
            if (FigCFEqual())
            {
              uint64_t v36 = *(const void **)(a3 + 240);
              *(void *)(a3 + 240) = v24;
              if (v24) {
                CFRetain(v24);
              }
              if (v36) {
                CFRelease(v36);
              }
              goto LABEL_52;
            }
          }
          if (*(void *)(a3 + 208)
            || (CFAllocatorRef v37 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                CFMutableArrayRef Mutable = CFArrayCreateMutable(v37, 0, MEMORY[0x1E4F1D510]),
                (*(void *)(a3 + 208) = Mutable) != 0))
          {
            uint64_t v39 = (void *)FigSessionDataSpecifierGetIdentifier(a2);
            Language = (const void *)FigSessionDataSpecifierGetLanguage(a2);
            CFURLRef v41 = (const __CFURL *)FigSessionDataSpecifierGetURL(a2);
            if (!FigHLSSessionDataCopyMetadataEntry(v39, v24, Language, v41, (CFMutableDictionaryRef *)&value))CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 208), value); {
            goto LABEL_52;
            }
          }
        }
        FigSignalErrorAt();
LABEL_52:
        if (value) {
          CFRelease(value);
        }
        if (theArray) {
          CFRelease(theArray);
        }
        if (v24) {
          CFRelease(v24);
        }
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_60;
      }
      if (v22) {
        goto LABEL_21;
      }
    }
    CFPropertyListRef v24 = 0;
    goto LABEL_28;
  }
LABEL_60:
  MEMORY[0x19970E930](*(void *)(a3 + 64));
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (message) {
    CFRelease(message);
  }
}

void sapl_sessionDataSchedulerDidFailForItem(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  MEMORY[0x19970E930](*(void *)(a3 + 64));
  CFTypeRef v6 = *(const void **)(a3 + 224);
  *(void *)(a3 + 224) = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v6) {
    CFRelease(v6);
  }

  JUMPOUT(0x19970E930);
}

void sapl_sessionDataSchedulerDidFinishReadQueue(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a2 + 64));
  *(unsigned char *)(a2 + 216) = 1;
  double v3 = *(const void **)(a2 + 120);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a2 + 120) = 0;
  }
  if (*(uint64_t *)(a2 + 152) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 144));
      ++v4;
    }
    while (v4 < *(void *)(a2 + 152));
  }
  *(void *)(a2 + 152) = 0;

  JUMPOUT(0x19970E930);
}

uint64_t sapl_shouldRetrySessionDataResource()
{
  return 0;
}

uint64_t sapl_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  double v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  int v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  CFTypeRef v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  CFTypeRef v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  int v8 = (const void *)a1[10];
  if (v8)
  {
    CFRelease(v8);
    a1[10] = 0;
  }
  CFArrayRef v9 = a1[11];
  if (v9)
  {
    dispatch_release(v9);
    a1[11] = 0;
  }
  uint64_t v10 = (const void *)a1[12];
  if (v10)
  {
    CFRelease(v10);
    a1[12] = 0;
  }
  int v11 = (const void *)a1[13];
  if (v11)
  {
    CFRelease(v11);
    a1[13] = 0;
  }
  CFTypeRef v12 = (const void *)a1[14];
  if (v12)
  {
    CFRelease(v12);
    a1[14] = 0;
  }
  int v13 = (const void *)a1[15];
  if (v13)
  {
    CFRelease(v13);
    a1[15] = 0;
  }
  uint64_t v14 = (const void *)a1[16];
  if (v14)
  {
    CFRelease(v14);
    a1[16] = 0;
  }
  uint64_t v15 = a1[18];
  if (v15)
  {
    dispatch_release(v15);
    a1[18] = 0;
  }
  uint64_t v16 = (const void *)a1[20];
  if (v16)
  {
    CFRelease(v16);
    a1[20] = 0;
  }
  uint64_t v17 = (const void *)a1[23];
  if (v17)
  {
    CFRelease(v17);
    a1[23] = 0;
  }
  CFAllocatorRef v18 = (const void *)a1[26];
  if (v18)
  {
    CFRelease(v18);
    a1[26] = 0;
  }
  CFAllocatorRef v19 = (const void *)a1[22];
  if (v19)
  {
    CFRelease(v19);
    a1[22] = 0;
  }
  int v20 = (const void *)a1[25];
  if (v20)
  {
    CFRelease(v20);
    a1[25] = 0;
  }
  CFTypeRef v21 = (const void *)a1[28];
  if (v21)
  {
    CFRelease(v21);
    a1[28] = 0;
  }
  CFDataRef v22 = (const void *)a1[29];
  if (v22)
  {
    CFRelease(v22);
    a1[29] = 0;
  }
  CFAllocatorRef v23 = (const void *)a1[30];
  if (v23)
  {
    CFRelease(v23);
    a1[30] = 0;
  }

  return FigSimpleMutexDestroy();
}

CFStringRef sapl_copyDesc(void *a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigStreamingAssetPropertyLoader %p %@ mvp:%@ media:%@>", a1, a1[2], a1[20], a1[23]);
}

uint64_t spptUtil_registerClass_0(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

uint64_t FigTrackReaderGetTypeID()
{
  MEMORY[0x19970EE10](&FigTrackReaderGetClassID_sRegisterFigTrackReaderBaseTypeOnce, RegisterFigTrackReaderBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigEditCursorServiceGetClassID()
{
  return sFigEditCursorServiceClassID;
}

uint64_t RegisterFigEditCursorServiceBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigEditCursorServiceGetTypeID()
{
  MEMORY[0x19970EE10](&FigEditCursorServiceGetClassID_sRegisterFigEditCursorServiceBaseTypeOnce, RegisterFigEditCursorServiceBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigEditCursorGetClassID()
{
  return sFigEditCursorClassID;
}

uint64_t RegisterFigEditCursorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigEditCursorGetTypeID()
{
  MEMORY[0x19970EE10](&FigEditCursorGetClassID_sRegisterFigEditCursorBaseTypeOnce, RegisterFigEditCursorBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigTrackReaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTrackReader %p]", a1);
}

CFStringRef FigEditCursorServiceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigEditCursorService %p]", a1);
}

CFStringRef FigEditCursorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigEditCursor %p]", a1);
}

uint64_t FigPlaybackItemLogCreateW3CLogData(const __CFArray *a1, __CFString **a2)
{
  if (a1)
  {
    if (a2)
    {
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      if (Mutable)
      {
        CFTypeRef v6 = Mutable;
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v8 = CFDateCreate(v4, Current);
        if (!v8) {
          goto LABEL_50;
        }
        if (FigPlaybackItemLogCreateW3CLogData_sDateFormatter) {
          goto LABEL_10;
        }
        CFArrayRef v9 = CFDateFormatterCreate(v4, 0, kCFDateFormatterShortStyle, kCFDateFormatterLongStyle);
        if (v9)
        {
          uint64_t v10 = v9;
          CFDateFormatterSetFormat(v9, @"yyyy/MM/dd HH:mm:ss.sss");
          if (!FigAtomicCompareAndSwapPtr()) {
            CFRelease(v10);
          }
        }
        if (FigPlaybackItemLogCreateW3CLogData_sDateFormatter)
        {
LABEL_10:
          v65 = a2;
          CFStringAppend(v6, @"#Version: 1.0\n#Software: ");
          CFStringRef v11 = (const __CFString *)FigCFHTTPCreateUserAgent();
          if (v11)
          {
            CFStringRef v12 = v11;
            CFStringAppend(v6, v11);
            CFRelease(v12);
          }
          CFStringAppend(v6, @"\n#Date: ");
          CFDateRef v66 = v8;
          CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v4, (CFDateFormatterRef)FigPlaybackItemLogCreateW3CLogData_sDateFormatter, v8);
          if (StringWithDate)
          {
            CFStringRef v14 = StringWithDate;
            CFStringAppend(v6, StringWithDate);
            CFRelease(v14);
          }
          if (CFArrayGetCount(a1) >= 1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, 0);
            int v16 = CFDictionaryContainsKey(ValueAtIndex, @"status");
            uint64_t v17 = (__CFDateFormatter *)FigPlaybackItemLogCreateW3CLogData_sDateFormatter;
            CFIndex Count = CFArrayGetCount(a1);
            if (v16)
            {
              CFStringAppend(v6, @"\n#Fields: date time uri cs-guid s-ip status domain comment cs-iftype\n");
              if (Count >= 1)
              {
                for (CFIndex i = 0; i != Count; ++i)
                {
                  CFDictionaryRef v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
                  CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(v20, @"date");
                  w3cAppendDateString(v6, Value, v17);
                  CFStringRef v22 = (const __CFString *)CFDictionaryGetValue(v20, @"uri");
                  if (v22) {
                    CFStringRef v23 = v22;
                  }
                  else {
                    CFStringRef v23 = @"-";
                  }
                  CFStringAppend(v6, v23);
                  CFStringAppend(v6, @" ");
                  CFStringRef v24 = (const __CFString *)CFDictionaryGetValue(v20, @"cs-guid");
                  if (v24) {
                    CFStringRef v25 = v24;
                  }
                  else {
                    CFStringRef v25 = @"-";
                  }
                  CFStringAppend(v6, v25);
                  CFStringAppend(v6, @" ");
                  CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(v20, @"s-ip");
                  if (v26) {
                    CFStringRef v27 = v26;
                  }
                  else {
                    CFStringRef v27 = @"-";
                  }
                  CFStringAppend(v6, v27);
                  CFStringAppend(v6, @" ");
                  CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v20, @"status");
                  w3cAppendNumber(v6, v28, 1);
                  CFStringRef v29 = (const __CFString *)CFDictionaryGetValue(v20, @"domain");
                  w3cAppendQuotedString(v6, v29);
                  CFStringRef v30 = (const __CFString *)CFDictionaryGetValue(v20, @"comment");
                  w3cAppendQuotedString(v6, v30);
                  CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(v20, @"cs-iftype");
                  if (v31) {
                    CFStringRef v32 = v31;
                  }
                  else {
                    CFStringRef v32 = @"-";
                  }
                  CFStringAppend(v6, v32);
                  CFStringAppend(v6, @"\n");
                }
              }
            }
            else
            {
              CFStringAppend(v6, @"\n#Fields: date time uri cs-guid s-ip s-ip-changes sc-count c-duration-downloaded c-start-time c-duration-watched bytes c-observed-bitrate sc-indicated-bitrate c-stalls c-frames-dropped c-startup-time c-overdue c-reason c-observed-min-bitrate c-observed-max-bitrate c-observed-bitrate-sd s-playback-type sc-wwan-count c-switch-bitrate\n");
              if (Count >= 1)
              {
                CFArrayRef v33 = a1;
                for (CFIndex j = 0; j != Count; ++j)
                {
                  CFDictionaryRef v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, j);
                  CFDateRef v36 = (const __CFDate *)CFDictionaryGetValue(v35, @"date");
                  w3cAppendDateString(v6, v36, v17);
                  CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v35, @"uri");
                  if (v37) {
                    CFStringRef v38 = v37;
                  }
                  else {
                    CFStringRef v38 = @"-";
                  }
                  CFStringAppend(v6, v38);
                  CFStringAppend(v6, @" ");
                  CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(v35, @"cs-guid");
                  if (v39) {
                    CFStringRef v40 = v39;
                  }
                  else {
                    CFStringRef v40 = @"-";
                  }
                  CFStringAppend(v6, v40);
                  CFStringAppend(v6, @" ");
                  CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(v35, @"s-ip");
                  if (v41) {
                    CFStringRef v42 = v41;
                  }
                  else {
                    CFStringRef v42 = @"-";
                  }
                  CFStringAppend(v6, v42);
                  CFStringAppend(v6, @" ");
                  CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v35, @"s-ip-changes");
                  w3cAppendNumber(v6, v43, 1);
                  CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(v35, @"sc-count");
                  w3cAppendNumber(v6, v44, 1);
                  CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-duration-downloaded");
                  w3cAppendNumber(v6, v45, 1);
                  CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-start-time");
                  w3cAppendNumber(v6, v46, 1);
                  CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-duration-watched");
                  w3cAppendNumber(v6, v47, 1);
                  CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v35, @"bytes");
                  w3cAppendNumber(v6, v48, 1);
                  CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-observed-bitrate");
                  w3cAppendNumber(v6, v49, 1);
                  CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(v35, @"sc-indicated-bitrate");
                  w3cAppendNumber(v6, v50, 1);
                  CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-stalls");
                  w3cAppendNumber(v6, v51, 1);
                  CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-frames-dropped");
                  w3cAppendNumber(v6, v52, 1);
                  CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-startup-time");
                  w3cAppendNumber(v6, v53, 1);
                  CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-overdue");
                  w3cAppendNumber(v6, v54, 1);
                  CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-reason");
                  w3cAppendNumber(v6, v55, 1);
                  CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-observed-min-bitrate");
                  w3cAppendNumber(v6, v56, 1);
                  CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-observed-max-bitrate");
                  w3cAppendNumber(v6, v57, 1);
                  CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-observed-bitrate-sd");
                  w3cAppendNumber(v6, v58, 1);
                  CFStringRef v59 = (const __CFString *)CFDictionaryGetValue(v35, @"s-playback-type");
                  if (v59) {
                    CFStringRef v60 = v59;
                  }
                  else {
                    CFStringRef v60 = @"-";
                  }
                  CFStringAppend(v6, v60);
                  CFStringAppend(v6, @" ");
                  CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v35, @"sc-wwan-count");
                  w3cAppendNumber(v6, v61, 1);
                  CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(v35, @"c-switch-bitrate");
                  w3cAppendNumber(v6, v62, 0);
                  CFStringAppend(v6, @"\n");
                }
              }
            }
          }
          uint64_t v63 = 0;
          CFDateRef v8 = v66;
          *v65 = v6;
        }
        else
        {
LABEL_50:
          uint64_t v63 = FigSignalErrorAt();
          CFRelease(v6);
          if (!v8) {
            return v63;
          }
        }
        CFRelease(v8);
        return v63;
      }
    }
  }

  return FigSignalErrorAt();
}

void w3cAppendDateString(CFMutableStringRef theString, CFDateRef date, CFDateFormatterRef formatter)
{
  if (date
    && (CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], formatter, date)) != 0)
  {
    CFStringRef v5 = StringWithDate;
    CFStringAppend(theString, StringWithDate);
    CFStringAppend(theString, @" ");
    CFRelease(v5);
  }
  else
  {
    CFStringAppend(theString, @"-");
    CFStringAppend(theString, @" ");
    CFStringAppend(theString, @"-");
    CFStringAppend(theString, @" ");
  }
}

void w3cAppendNumber(CFMutableStringRef theString, CFNumberRef number, int a3)
{
  if (!number
    || (!CFNumberIsFloatType(number)
      ? (CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@", number))
      : (uint64_t valuePtr = 0,
         CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr),
         CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%.3f", valuePtr)),
        (CFStringRef v7 = v6) == 0))
  {
    CFStringAppend(theString, @"-");
    if (!a3) {
      return;
    }
    goto LABEL_9;
  }
  CFStringAppend(theString, v6);
  CFRelease(v7);
  if (a3) {
LABEL_9:
  }
    CFStringAppend(theString, @" ");
}

void w3cAppendQuotedString(CFMutableStringRef theString, const __CFString *a2)
{
  if (a2)
  {
    CFStringRef v4 = @"\"";
    CFStringAppend(theString, @"\"");
    CFStringAppend(theString, a2);
  }
  else
  {
    CFStringRef v4 = @"-";
  }
  CFStringAppend(theString, v4);

  CFStringAppend(theString, @" ");
}

uint64_t FigAlternateSetErrorCategory(uint64_t a1, int a2)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  *(_DWORD *)(DerivedStorage + 216) = a2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return 0;
}

uint64_t FigAlternateSetIsFairPlayStreamingVideoAlternate(uint64_t a1, char a2)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  *(unsigned char *)(DerivedStorage + 232) = a2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return 0;
}

uint64_t FigAlternateSetPeakBitRate(uint64_t a1, int a2)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  *(_DWORD *)(DerivedStorage + 236) = a2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return 0;
}

uint64_t FigAlternateSetLateDiscoveredMediaType(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 != 1986618469) {
    return 4294954514;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  *(_DWORD *)(v4 + 240) = 1986618469;
  MEMORY[0x19970E930](*(void *)(v4 + 480));
  return 0;
}

uint64_t FigAlternateSetStartupScore(uint64_t a1, double a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    *(double *)(DerivedStorage + 224) = a2;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  }
  return 0;
}

uint64_t FigAlternateSetLastKnownValueForIsFullyCached(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    *(unsigned char *)(DerivedStorage + 244) = a2;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  }
  return 0;
}

uint64_t FigAlternateIsFairPlayStreamingVideoAlternate()
{
  return 0;
}

uint64_t FigAlternateGetCurrentErrorCategory(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  uint64_t v2 = *(unsigned int *)(DerivedStorage + 216);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return v2;
}

BOOL FigAlternateHasUndeclaredVideo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  BOOL v1 = *(_DWORD *)(DerivedStorage + 240) == 1986618469;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return v1;
}

uint64_t FigAlternateHasVideo(uint64_t result)
{
  if (result) {
    return FigAlternateHasVideoDeclared(result) || FigAlternateHasUndeclaredVideo();
  }
  return result;
}

uint64_t FigAlternateHasVideoDeclared(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 414))
  {
    uint64_t v2 = *(unsigned __int8 *)(DerivedStorage + 413);
    uint64_t v3 = *(void *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    CFStringRef v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (!v4) {
      goto LABEL_9;
    }
    CFDictionaryRef MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
    if (!MediaValidatorPlist) {
      CFDictionaryRef MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
    }
    if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v4, MediaValidatorPlist, &v8, 0))uint64_t v2 = v8 & 2; {
    else
    }
LABEL_9:
      uint64_t v2 = 1;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v6 + 480));
    *(unsigned char *)(v6 + 413) = v2;
    *(unsigned char *)(v6 + 414) = 1;
    uint64_t v3 = *(void *)(v6 + 480);
  }
  MEMORY[0x19970E930](v3);
  return v2;
}

uint64_t FigAlternateHasStereoVideo(__CFArray *a1)
{
  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFStringRef v4 = (void *)(DerivedStorage + 480);
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    if (*(unsigned char *)(DerivedStorage + 458))
    {
      LOBYTE(DerivedStorage) = *(unsigned char *)(DerivedStorage + 457);
LABEL_14:
      MEMORY[0x19970E930](*v4);
      return DerivedStorage;
    }
    MEMORY[0x19970E930](*v4);
  }
  LODWORD(DerivedStorage) = 0;
  CFIndex v5 = 0;
  uint64_t v6 = *MEMORY[0x1E4F1F410];
  CMTagValue v7 = *(void *)(MEMORY[0x1E4F1F410] + 8);
  if (!VideoLayoutTags) {
    goto LABEL_7;
  }
LABEL_6:
  for (CFIndex i = CFArrayGetCount(VideoLayoutTags); v5 < i && !DerivedStorage; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v5);
    *(void *)&v12.category = v6;
    v12.CMTimeValue value = v7;
    LODWORD(DerivedStorage) = CMTagCollectionContainsTag(ValueAtIndex, v12);
    ++v5;
    if (VideoLayoutTags) {
      goto LABEL_6;
    }
LABEL_7:
    ;
  }
  if (a1)
  {
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    CFStringRef v4 = (void *)(v10 + 480);
    MEMORY[0x19970E910](*(void *)(v10 + 480));
    *(unsigned char *)(v10 + 457) = DerivedStorage;
    *(unsigned char *)(v10 + 458) = 1;
    goto LABEL_14;
  }
  return DerivedStorage;
}

__CFArray *FigAlternateGetVideoLayoutTags(__CFArray *result)
{
  if (result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t result = *(__CFArray **)(DerivedStorage + 152);
    if (!result)
    {
      uint64_t result = FigAlternateCreateDefaultTagCollectionsArrayForVideo();
      *(void *)(DerivedStorage + 152) = result;
    }
  }
  return result;
}

uint64_t FigAlternateHasAudioDeclared(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 412))
  {
    uint64_t v2 = *(unsigned __int8 *)(DerivedStorage + 411);
    uint64_t v3 = *(void *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    CFStringRef v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (!v4) {
      goto LABEL_9;
    }
    CFDictionaryRef MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
    if (!MediaValidatorPlist) {
      CFDictionaryRef MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
    }
    if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v4, MediaValidatorPlist, &v8, 0))uint64_t v2 = v8 & 1; {
    else
    }
LABEL_9:
      uint64_t v2 = 1;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v6 + 480));
    *(unsigned char *)(v6 + 411) = v2;
    *(unsigned char *)(v6 + 412) = 1;
    uint64_t v3 = *(void *)(v6 + 480);
  }
  MEMORY[0x19970E930](v3);
  return v2;
}

uint64_t FigAlternateIsAudioOnly(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (FigAlternateHasVideoDeclared(result))
    {
      return 0;
    }
    else
    {
      uint64_t result = FigAlternateHasAudioDeclared(v1);
      if (result) {
        return !FigAlternateHasUndeclaredVideo();
      }
    }
  }
  return result;
}

uint64_t FigAlternateGetLastKnownValueForIsFullyCached()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  uint64_t v1 = *(unsigned __int8 *)(DerivedStorage + 244);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return v1;
}

uint64_t FigAlternateGetPeakBitRate(uint64_t result)
{
  if (result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    unsigned int v2 = *(_DWORD *)(DerivedStorage + 236);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (v2) {
      return v2;
    }
    else {
      return 0x7FFFFFFFLL;
    }
  }
  return result;
}

uint64_t FigAlternateGetExpectedAverageBitrate(uint64_t a1)
{
  if (a1) {
    return fa_GetAlternateAverageBandwidth(a1);
  }
  return a1;
}

uint64_t fa_GetAlternateAverageBandwidth(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
  if (!result)
  {
    return FigAlternateGetPeakBitRate(a1);
  }
  return result;
}

uint64_t FigAlternateGetDeclaredPeakBitRate(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
  }
  return result;
}

uint64_t FigAlternateGetAverageBitRate(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
  }
  return result;
}

uint64_t FigAlternateGetRankingScoreOrPeakBWWithVideoCodecScore(uint64_t result, int a2, _DWORD *a3)
{
  if (result)
  {
    uint64_t v5 = result;
    int PeakBitRate = FigAlternateGetPeakBitRate(result);
    if (a2)
    {
      uint64_t result = CMBaseObjectGetDerivedStorage();
      if (!a3) {
        return result;
      }
    }
    else
    {
      uint64_t result = FigAlternateGetBestVideoFormat(v5);
      if (!a3) {
        return result;
      }
    }
  }
  else
  {
    int PeakBitRate = 0;
    if (!a3) {
      return result;
    }
  }
  *a3 = PeakBitRate;
  return result;
}

double FigAlternateGetRankingScore(uint64_t a1)
{
  if (a1) {
    return *(double *)(CMBaseObjectGetDerivedStorage() + 72);
  }
  else {
    return -1.0;
  }
}

uint64_t FigAlternateGetVideoQualityIndex(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unsigned int VideoRange = FigAlternateGetVideoRange(result);
    int BestVideoFormat = FigAlternateGetBestVideoFormat(v1);
    uint64_t result = 0;
    switch(BestVideoFormat)
    {
      case 1:
        if (VideoRange >= 2) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 20;
        }
        break;
      case 2:
        uint64_t result = VideoRange < 2;
        break;
      case 3:
        if (VideoRange == 2) {
          unsigned int v4 = 14;
        }
        else {
          unsigned int v4 = 0;
        }
        if (VideoRange == 3) {
          unsigned int v4 = 13;
        }
        if (VideoRange >= 2) {
          uint64_t result = v4;
        }
        else {
          uint64_t result = 3;
        }
        break;
      case 4:
        switch(VideoRange)
        {
          case 1u:
            uint64_t result = 2;
            break;
          case 2u:
            if (FigAlternateGetBestSupplementalVideoFormat(v1) == 2) {
              uint64_t result = 9;
            }
            else {
              uint64_t result = 10;
            }
            break;
          case 3u:
            BOOL v5 = FigAlternateGetBestSupplementalVideoFormat(v1) == 3;
            unsigned int v6 = 11;
            unsigned int v7 = 18;
            goto LABEL_35;
          default:
            goto LABEL_29;
        }
        break;
      case 5:
        if (VideoRange >= 2)
        {
          if (VideoRange == 2)
          {
            BOOL v5 = FigAlternateGetBestSupplementalVideoFormat(v1) == 3;
            unsigned int v6 = 15;
            unsigned int v7 = 21;
          }
          else
          {
            if (VideoRange != 3) {
              goto LABEL_29;
            }
            BOOL v5 = FigAlternateGetBestSupplementalVideoFormat(v1) == 3;
            unsigned int v6 = 16;
            unsigned int v7 = 19;
          }
          goto LABEL_35;
        }
        uint64_t result = 4;
        break;
      case 7:
        if (VideoRange == 3)
        {
          BOOL v5 = fa_CodecsIncludeVideoFormat(v1, 1685481521, 20) == 0;
          unsigned int v6 = 22;
          unsigned int v7 = 12;
LABEL_35:
          if (v5) {
            uint64_t result = v7;
          }
          else {
            uint64_t result = v6;
          }
        }
        else
        {
LABEL_29:
          uint64_t result = 0;
        }
        break;
      case 8:
        if (VideoRange == 3) {
          uint64_t result = 17;
        }
        else {
          uint64_t result = 0;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t FigAlternateGetVideoRange(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v2 = (void *)(DerivedStorage + 480);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 356))
  {
    uint64_t v3 = *(unsigned int *)(DerivedStorage + 352);
  }
  else
  {
    MEMORY[0x19970E930](*v2);
    int v4 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 140) + 2;
    if (v4 > 4) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = dword_1949961D4[v4];
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    unsigned int v2 = (void *)(v5 + 480);
    MEMORY[0x19970E910](*(void *)(v5 + 480));
    *(_DWORD *)(v5 + 352) = v3;
    *(unsigned char *)(v5 + 356) = 1;
  }
  MEMORY[0x19970E930](*v2);
  return v3;
}

uint64_t FigAlternateGetBestVideoFormat(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)(DerivedStorage + 480);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 252))
  {
    uint64_t v4 = *(unsigned int *)(DerivedStorage + 248);
  }
  else
  {
    MEMORY[0x19970E930](*v3);
    if (fa_CodecsIncludeVideoFormat(a1, 1684108849, 0))
    {
      uint64_t v4 = 8;
    }
    else
    {
      uint64_t v4 = 7;
      if (!FigAlternateHasVideoFormat(a1, 7))
      {
        if (fa_CodecsIncludeVideoFormat(a1, 1635135537, 0))
        {
          uint64_t v4 = 5;
        }
        else
        {
          uint64_t v4 = 4;
          if (!FigAlternateHasVideoFormat(a1, 4))
          {
            if (fa_CodecsIncludeVideoFormat(a1, 1987063865, 0))
            {
              uint64_t v4 = 3;
            }
            else
            {
              uint64_t v4 = 2;
              if (!FigAlternateHasVideoFormat(a1, 2)) {
                uint64_t v4 = FigAlternateHasVideoFormat(a1, 1) != 0;
              }
            }
          }
        }
      }
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = (void *)(v5 + 480);
    MEMORY[0x19970E910](*(void *)(v5 + 480));
    *(_DWORD *)(v5 + 248) = v4;
    *(unsigned char *)(v5 + 252) = 1;
  }
  MEMORY[0x19970E930](*v3);
  return v4;
}

uint64_t FigAlternateGetBestSupplementalVideoFormat(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)(DerivedStorage + 480);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 260))
  {
    uint64_t v4 = *(unsigned int *)(DerivedStorage + 256);
  }
  else
  {
    MEMORY[0x19970E930](*v3);
    uint64_t v4 = 3;
    if (!FigAlternateHasSupplementalVideoFormat(a1, 3))
    {
      uint64_t v4 = 2;
      if (!FigAlternateHasSupplementalVideoFormat(a1, 2)) {
        uint64_t v4 = FigAlternateHasSupplementalVideoFormat(a1, 1) != 0;
      }
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = (void *)(v5 + 480);
    MEMORY[0x19970E910](*(void *)(v5 + 480));
    *(_DWORD *)(v5 + 256) = v4;
    *(unsigned char *)(v5 + 260) = 1;
  }
  MEMORY[0x19970E930](*v3);
  return v4;
}

uint64_t FigAlternateHasVideoDolbyVisionHEVCProfile(uint64_t result, int a2)
{
  if (result) {
    return fa_CodecsIncludeVideoFormat(result, 1685481521, a2);
  }
  return result;
}

uint64_t FigAlternateMeetsVideoChoice(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    int VideoRange = FigAlternateGetVideoRange(result);
    if (FigAlternateHasVideoFormat(v3, 7)) {
      return *a2 == 7;
    }
    if (fa_CodecsIncludeVideoFormat(v3, 1684108849, 0)) {
      return *a2 == 8;
    }
    if (FigAlternateHasVideoFormat(v3, 4))
    {
      int v6 = *a2 | 2;
      goto LABEL_12;
    }
    if (fa_CodecsIncludeVideoFormat(v3, 1987063865, 0))
    {
      if (*a2 != 6 && *a2 != 3) {
        return 0;
      }
    }
    else if (fa_CodecsIncludeVideoFormat(v3, 1635135537, 0))
    {
      if ((*a2 - 5) > 1) {
        return 0;
      }
    }
    else
    {
      if (FigAlternateHasVideoFormat(v3, 2))
      {
        int v6 = *a2 | 4;
LABEL_12:
        if (v6 != 6) {
          return 0;
        }
        return a2[1] == VideoRange;
      }
      if (!FigAlternateHasVideoFormat(v3, 1)) {
        return FigAlternateHasUndeclaredVideo() && *a2 == 2;
      }
      if (*a2 != 6 && *a2 != 1) {
        return 0;
      }
    }
    return a2[1] == VideoRange;
  }
  return result;
}

uint64_t FigAlternateHasVideoFormat(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    switch(a2)
    {
      case 1:
        if (fa_CodecsIncludeVideoFormat(result, 1785750887, 0)) {
          goto LABEL_19;
        }
        uint64_t v3 = v2;
        int v4 = 1835692135;
        goto LABEL_26;
      case 2:
        if (fa_CodecsIncludeVideoFormat(result, 1635148593, 0)) {
          goto LABEL_19;
        }
        int v4 = 1635148595;
        goto LABEL_25;
      case 3:
        int v5 = 1987063865;
        goto LABEL_21;
      case 4:
        if (fa_CodecsIncludeVideoFormat(result, 1752589105, 0)) {
          goto LABEL_19;
        }
        uint64_t v3 = v2;
        int v4 = 1751479857;
        goto LABEL_26;
      case 5:
        int v5 = 1635135537;
        goto LABEL_21;
      case 6:
        if (fa_CodecsIncludeVideoFormat(result, 1635148593, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1635148595, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1752589105, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1751479857, 0)
          || fa_CodecsIncludeVideoFormat(v2, 1987063865, 0))
        {
          goto LABEL_19;
        }
        uint64_t v3 = v2;
        int v4 = 1635135537;
        goto LABEL_26;
      case 7:
        if (fa_CodecsIncludeVideoFormat(result, 1685481521, 0))
        {
LABEL_19:
          uint64_t result = 1;
        }
        else
        {
          int v4 = 1685481573;
LABEL_25:
          uint64_t v3 = v2;
LABEL_26:
          uint64_t result = fa_CodecsIncludeVideoFormat(v3, v4, 0) != 0;
        }
        break;
      case 8:
        int v5 = 1684108849;
LABEL_21:
        return fa_CodecsIncludeVideoFormat(result, v5, 0);
      default:
        return 0;
    }
  }
  return result;
}

BOOL FigAlternateIsVideoRangeUnknown(uint64_t a1)
{
  return !a1 || *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 140) == -1;
}

uint64_t FigAlternateGetNormalizedPeakBitrate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unsigned int BestVideoFormat = FigAlternateGetBestVideoFormat(result);
    if (BestVideoFormat >= 9) {
      unsigned int v3 = 0;
    }
    else {
      unsigned int v3 = BestVideoFormat;
    }
    float v4 = kVideoCodecScoreFactor[v3];
    int PeakBitRate = FigAlternateGetPeakBitRate(v1);
    if (PeakBitRate == 0x7FFFFFFF) {
      return 0x7FFFFFFFLL;
    }
    else {
      return (int)(float)(v4 * (float)PeakBitRate);
    }
  }
  return result;
}

int FigAlternateGetVariantBitrateRank(uint64_t a1, int a2)
{
  if (a1)
  {
    int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
    if (NormalizedPeakBitrate <= 1) {
      int v4 = 1;
    }
    else {
      int v4 = NormalizedPeakBitrate;
    }
    if (v4 <= a2) {
      int v5 = a2;
    }
    else {
      int v5 = v4;
    }
    LODWORD(a1) = vcvtpd_s64_f64((double)v4 * 100.0 / (double)v5);
  }
  return a1;
}

uint64_t FigAlternateGetCodecString(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  }
  return result;
}

uint64_t FigAlternateGetSupplementalCodecString(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  }
  return result;
}

BOOL FigAlternateHasDeclaredPathwayID(BOOL result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 160) != 0;
  }
  return result;
}

__CFString *FigAlternateGetPathwayID(uint64_t a1)
{
  uint64_t v1 = @".";
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(void *)(DerivedStorage + 160)) {
      return *(__CFString **)(DerivedStorage + 160);
    }
  }
  return v1;
}

uint64_t FigAlternateIsIFrameOnly(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24);
  }
  return result;
}

uint64_t FigAlternateHasValidCodecs(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = (void *)(DerivedStorage + 480);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 410))
  {
    uint64_t IsValidCodecString = *(unsigned __int8 *)(DerivedStorage + 409);
  }
  else
  {
    MEMORY[0x19970E930](*v2);
    CFStringRef v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (v4)
    {
      CFDictionaryRef MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
      if (!MediaValidatorPlist) {
        CFDictionaryRef MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
      }
      uint64_t IsValidCodecString = FigStreamAlternateIsValidCodecString(v4, MediaValidatorPlist, 0, 0, 0, 0);
    }
    else
    {
      uint64_t IsValidCodecString = 1;
    }
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v2 = (void *)(v6 + 480);
    MEMORY[0x19970E910](*(void *)(v6 + 480));
    *(unsigned char *)(v6 + 409) = IsValidCodecString;
    *(unsigned char *)(v6 + 410) = 1;
  }
  MEMORY[0x19970E930](*v2);
  return IsValidCodecString;
}

CFStringRef FigAlternateHasUnknownCodecs(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v7 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 416))
  {
    CFStringRef v2 = (const __CFString *)*(unsigned __int8 *)(DerivedStorage + 415);
    uint64_t v3 = *(void *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    CFStringRef v2 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    if (v2)
    {
      CFDictionaryRef MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
      if (!MediaValidatorPlist) {
        CFDictionaryRef MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
      }
      if (FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v2, MediaValidatorPlist, &v7, 0))CFStringRef v2 = 0; {
      else
      }
        CFStringRef v2 = (const __CFString *)((v7 >> 2) & 1);
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v5 + 480));
    *(unsigned char *)(v5 + 415) = (_BYTE)v2;
    *(unsigned char *)(v5 + 416) = 1;
    uint64_t v3 = *(void *)(v5 + 480);
  }
  MEMORY[0x19970E930](v3);
  return v2;
}

uint64_t FigAlternateHasVideoCodecType(uint64_t result, int a2)
{
  if (result) {
    return fa_CodecsIncludeVideoFormat(result, a2, 0);
  }
  return result;
}

uint64_t fa_CodecsIncludeVideoFormat(uint64_t a1, int a2, int a3)
{
  if (a1) {
    uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t CodecAndProfile = 0;
  if (a2 <= 1685481572)
  {
    if (a2 <= 1635148594)
    {
      if (a2 == 1635135537)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(DerivedStorage + 480);
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
        if (*(unsigned char *)(DerivedStorage + 308))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(DerivedStorage + 307);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v27 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v27 + 480);
          MEMORY[0x19970E910](*(void *)(v27 + 480));
          *(unsigned char *)(v27 + 307) = CodecAndProfile;
          *(unsigned char *)(v27 + 308) = 1;
        }
        goto LABEL_63;
      }
      if (a2 == 1635148593)
      {
        uint64_t v11 = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(v11 + 480);
        MEMORY[0x19970E910](*(void *)(v11 + 480));
        if (*(unsigned char *)(v11 + 292))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(v11 + 291);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v21 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v21 + 480);
          MEMORY[0x19970E910](*(void *)(v21 + 480));
          *(unsigned char *)(v21 + 291) = CodecAndProfile;
          *(unsigned char *)(v21 + 292) = 1;
        }
        goto LABEL_63;
      }
    }
    else
    {
      switch(a2)
      {
        case 1635148595:
          uint64_t v14 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v14 + 480);
          MEMORY[0x19970E910](*(void *)(v14 + 480));
          if (*(unsigned char *)(v14 + 294))
          {
            uint64_t CodecAndProfile = *(unsigned __int8 *)(v14 + 293);
          }
          else
          {
            MEMORY[0x19970E930](*v8);
            uint64_t CodecAndProfile = FigCFStringFind();
            uint64_t v24 = CMBaseObjectGetDerivedStorage();
            int v8 = (void *)(v24 + 480);
            MEMORY[0x19970E910](*(void *)(v24 + 480));
            *(unsigned char *)(v24 + 293) = CodecAndProfile;
            *(unsigned char *)(v24 + 294) = 1;
          }
          goto LABEL_63;
        case 1684108849:
          uint64_t v15 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v15 + 480);
          MEMORY[0x19970E910](*(void *)(v15 + 480));
          if (a3 == 10)
          {
            if (*(unsigned char *)(v15 + 312))
            {
              uint64_t CodecAndProfile = *(unsigned __int8 *)(v15 + 311);
            }
            else
            {
              MEMORY[0x19970E930](*v8);
              uint64_t CodecAndProfile = fa_CodecStringFindCodecAndProfile(v5, @"dav1", 10);
              uint64_t v30 = CMBaseObjectGetDerivedStorage();
              int v8 = (void *)(v30 + 480);
              MEMORY[0x19970E910](*(void *)(v30 + 480));
              *(unsigned char *)(v30 + 311) = CodecAndProfile;
              *(unsigned char *)(v30 + 312) = 1;
            }
          }
          else if (*(unsigned char *)(v15 + 310))
          {
            uint64_t CodecAndProfile = *(unsigned __int8 *)(v15 + 309);
          }
          else
          {
            MEMORY[0x19970E930](*v8);
            uint64_t CodecAndProfile = FigCFStringFind();
            uint64_t v31 = CMBaseObjectGetDerivedStorage();
            int v8 = (void *)(v31 + 480);
            MEMORY[0x19970E910](*(void *)(v31 + 480));
            *(unsigned char *)(v31 + 309) = CodecAndProfile;
            *(unsigned char *)(v31 + 310) = 1;
          }
          goto LABEL_63;
        case 1685481521:
          if (a3 == 5)
          {
            uint64_t v28 = CMBaseObjectGetDerivedStorage();
            int v8 = (void *)(v28 + 480);
            MEMORY[0x19970E910](*(void *)(v28 + 480));
            if (*(unsigned char *)(v28 + 306))
            {
              uint64_t CodecAndProfile = *(unsigned __int8 *)(v28 + 305);
            }
            else
            {
              MEMORY[0x19970E930](*v8);
              uint64_t CodecAndProfile = fa_CodecStringFindCodecAndProfile(v5, @"dvh1", 5);
              uint64_t v33 = CMBaseObjectGetDerivedStorage();
              int v8 = (void *)(v33 + 480);
              MEMORY[0x19970E910](*(void *)(v33 + 480));
              *(unsigned char *)(v33 + 305) = CodecAndProfile;
              *(unsigned char *)(v33 + 306) = 1;
            }
          }
          else if (a3 == 20)
          {
            uint64_t v9 = CMBaseObjectGetDerivedStorage();
            int v8 = (void *)(v9 + 480);
            MEMORY[0x19970E910](*(void *)(v9 + 480));
            if (*(unsigned char *)(v9 + 304))
            {
              uint64_t CodecAndProfile = *(unsigned __int8 *)(v9 + 303);
            }
            else
            {
              MEMORY[0x19970E930](*v8);
              uint64_t CodecAndProfile = fa_CodecStringFindCodecAndProfile(v5, @"dvh1", 20);
              uint64_t v32 = CMBaseObjectGetDerivedStorage();
              int v8 = (void *)(v32 + 480);
              MEMORY[0x19970E910](*(void *)(v32 + 480));
              *(unsigned char *)(v32 + 303) = CodecAndProfile;
              *(unsigned char *)(v32 + 304) = 1;
            }
          }
          else
          {
            uint64_t v29 = CMBaseObjectGetDerivedStorage();
            int v8 = (void *)(v29 + 480);
            MEMORY[0x19970E910](*(void *)(v29 + 480));
            if (*(unsigned char *)(v29 + 302))
            {
              uint64_t CodecAndProfile = *(unsigned __int8 *)(v29 + 301);
            }
            else
            {
              MEMORY[0x19970E930](*v8);
              uint64_t CodecAndProfile = FigCFStringFind();
              uint64_t v34 = CMBaseObjectGetDerivedStorage();
              int v8 = (void *)(v34 + 480);
              MEMORY[0x19970E910](*(void *)(v34 + 480));
              *(unsigned char *)(v34 + 301) = CodecAndProfile;
              *(unsigned char *)(v34 + 302) = 1;
            }
          }
          goto LABEL_63;
      }
    }
  }
  else if (a2 > 1785750886)
  {
    switch(a2)
    {
      case 1785750887:
        uint64_t v16 = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(v16 + 480);
        MEMORY[0x19970E910](*(void *)(v16 + 480));
        if (*(unsigned char *)(v16 + 288))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(v16 + 287);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v25 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v25 + 480);
          MEMORY[0x19970E910](*(void *)(v25 + 480));
          *(unsigned char *)(v25 + 287) = CodecAndProfile;
          *(unsigned char *)(v25 + 288) = 1;
        }
        goto LABEL_63;
      case 1835692135:
        uint64_t v17 = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(v17 + 480);
        MEMORY[0x19970E910](*(void *)(v17 + 480));
        if (*(unsigned char *)(v17 + 290))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(v17 + 289);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v26 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v26 + 480);
          MEMORY[0x19970E910](*(void *)(v26 + 480));
          *(unsigned char *)(v26 + 289) = CodecAndProfile;
          *(unsigned char *)(v26 + 290) = 1;
        }
        goto LABEL_63;
      case 1987063865:
        uint64_t v10 = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(v10 + 480);
        MEMORY[0x19970E910](*(void *)(v10 + 480));
        if (*(unsigned char *)(v10 + 314))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(v10 + 313);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v20 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v20 + 480);
          MEMORY[0x19970E910](*(void *)(v20 + 480));
          *(unsigned char *)(v20 + 313) = CodecAndProfile;
          *(unsigned char *)(v20 + 314) = 1;
        }
        goto LABEL_63;
    }
  }
  else
  {
    switch(a2)
    {
      case 1685481573:
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(v12 + 480);
        MEMORY[0x19970E910](*(void *)(v12 + 480));
        if (*(unsigned char *)(v12 + 300))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(v12 + 299);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v22 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v22 + 480);
          MEMORY[0x19970E910](*(void *)(v22 + 480));
          *(unsigned char *)(v22 + 299) = CodecAndProfile;
          *(unsigned char *)(v22 + 300) = 1;
        }
        goto LABEL_63;
      case 1751479857:
        uint64_t v13 = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(v13 + 480);
        MEMORY[0x19970E910](*(void *)(v13 + 480));
        if (*(unsigned char *)(v13 + 298))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(v13 + 297);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v23 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v23 + 480);
          MEMORY[0x19970E910](*(void *)(v23 + 480));
          *(unsigned char *)(v23 + 297) = CodecAndProfile;
          *(unsigned char *)(v23 + 298) = 1;
        }
        goto LABEL_63;
      case 1752589105:
        uint64_t v7 = CMBaseObjectGetDerivedStorage();
        int v8 = (void *)(v7 + 480);
        MEMORY[0x19970E910](*(void *)(v7 + 480));
        if (*(unsigned char *)(v7 + 296))
        {
          uint64_t CodecAndProfile = *(unsigned __int8 *)(v7 + 295);
        }
        else
        {
          MEMORY[0x19970E930](*v8);
          uint64_t CodecAndProfile = FigCFStringFind();
          uint64_t v19 = CMBaseObjectGetDerivedStorage();
          int v8 = (void *)(v19 + 480);
          MEMORY[0x19970E910](*(void *)(v19 + 480));
          *(unsigned char *)(v19 + 295) = CodecAndProfile;
          *(unsigned char *)(v19 + 296) = 1;
        }
LABEL_63:
        MEMORY[0x19970E930](*v8);
        break;
    }
  }
  return CodecAndProfile;
}

uint64_t FigAlternateHasVideoDolbyVisionProfile(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    return fa_CodecsIncludeVideoFormat(result, 1685481521, a2)
        || fa_CodecsIncludeVideoFormat(v3, 1684108849, a2) != 0;
  }
  return result;
}

uint64_t FigAlternateHasSupplementalVideoFormat(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (v3)
  {
    switch(a2)
    {
      case 1:
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(DerivedStorage + 480);
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
        if (*(unsigned char *)(DerivedStorage + 320))
        {
          uint64_t v3 = *(unsigned __int8 *)(DerivedStorage + 319);
        }
        else
        {
          MEMORY[0x19970E930](*v5);
          uint64_t v3 = FigCFStringFind();
          uint64_t v9 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v9 + 480);
          MEMORY[0x19970E910](*(void *)(v9 + 480));
          *(unsigned char *)(v9 + 319) = v3;
          *(unsigned char *)(v9 + 320) = 1;
        }
        goto LABEL_16;
      case 2:
        uint64_t v7 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v7 + 480);
        MEMORY[0x19970E910](*(void *)(v7 + 480));
        if (*(unsigned char *)(v7 + 318))
        {
          uint64_t v3 = *(unsigned __int8 *)(v7 + 317);
        }
        else
        {
          MEMORY[0x19970E930](*v5);
          uint64_t v3 = FigCFStringFind();
          uint64_t v10 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v10 + 480);
          MEMORY[0x19970E910](*(void *)(v10 + 480));
          *(unsigned char *)(v10 + 317) = v3;
          *(unsigned char *)(v10 + 318) = 1;
        }
        goto LABEL_16;
      case 3:
        uint64_t v4 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v4 + 480);
        MEMORY[0x19970E910](*(void *)(v4 + 480));
        if (*(unsigned char *)(v4 + 316))
        {
          uint64_t v3 = *(unsigned __int8 *)(v4 + 315);
        }
        else
        {
          MEMORY[0x19970E930](*v5);
          uint64_t v3 = FigCFStringFind();
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v8 + 480);
          MEMORY[0x19970E910](*(void *)(v8 + 480));
          *(unsigned char *)(v8 + 315) = v3;
          *(unsigned char *)(v8 + 316) = 1;
        }
LABEL_16:
        MEMORY[0x19970E930](*v5);
        return v3;
    }
    return 0;
  }
  return v3;
}

double FigAlternateGetResolution(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = CMBaseObjectGetDerivedStorage() + 168;
  }
  else {
    uint64_t v1 = MEMORY[0x1E4F1DB30];
  }
  return *(double *)v1;
}

uint64_t FigAlternateGetPixelCount(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFStringRef v2 = (double *)(DerivedStorage + 168);
    uint64_t v3 = (double *)(DerivedStorage + 176);
  }
  else
  {
    CFStringRef v2 = (double *)MEMORY[0x1E4F1DB30];
    uint64_t v3 = (double *)(MEMORY[0x1E4F1DB30] + 8);
  }
  return (uint64_t)*v3 * (uint64_t)*v2;
}

uint64_t FigAlternateGetFrameRateBucket(uint64_t a1)
{
  if (a1) {
    double v1 = *(double *)(CMBaseObjectGetDerivedStorage() + 56);
  }
  else {
    double v1 = 0.0;
  }
  if (v1 <= 60.0) {
    return v1 > 30.0;
  }
  else {
    return 2;
  }
}

uint64_t FigFrameRateToFrameRateBucket(double a1)
{
  if (a1 <= 60.0) {
    return a1 > 30.0;
  }
  else {
    return 2;
  }
}

double FigAlternateGetFrameRate(uint64_t a1)
{
  if (a1) {
    return *(double *)(CMBaseObjectGetDerivedStorage() + 56);
  }
  else {
    return 0.0;
  }
}

uint64_t FigAlternateGetRankingScoreOrAverageBWWithVideoCodecScore(uint64_t result, int a2, _DWORD *a3)
{
  if (result)
  {
    uint64_t v5 = result;
    CMBaseObjectGetDerivedStorage();
    uint64_t result = fa_GetAlternateAverageBandwidth(v5);
    int v6 = result;
    if (a2)
    {
      if (!a3) {
        return result;
      }
    }
    else
    {
      uint64_t result = FigAlternateGetBestVideoFormat(v5);
      if (!a3) {
        return result;
      }
    }
  }
  else
  {
    int v6 = 0;
    if (!a3) {
      return result;
    }
  }
  *a3 = v6;
  return result;
}

uint64_t FigAlternateGetAlternateIndex(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 28);
  }
  return result;
}

uint64_t FigAlternateGetZeroIndexedAlternateIndex(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 32);
  }
  return result;
}

BOOL FigAlternateHasRankingScore(BOOL result)
{
  if (result) {
    return *(double *)(CMBaseObjectGetDerivedStorage() + 72) > 0.0;
  }
  return result;
}

double FigAlternateGetStartupScore(uint64_t a1)
{
  if (!a1) {
    return -1.79769313e308;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  double v2 = *(double *)(DerivedStorage + 224);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return v2;
}

uint64_t FigAlternateGetAllowedCPC(uint64_t a1)
{
  if (a1) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  }
  else {
    return -1;
  }
}

uint64_t FigAlternateGetHDCPLevel(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 136);
  }
  else {
    return 4294967294;
  }
}

BOOL FigAlternateHasDeclaredVideoLayoutTags(BOOL result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 152) != 0;
  }
  return result;
}

__CFString *FigAlternateGetVideoLayoutString(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (a1)
  {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v4 + 480));
    if (*(unsigned char *)(v4 + 440))
    {
      VideoLayoutLoggingStringFromCollectionArray = *(__CFString **)(v4 + 432);
      uint64_t v6 = *(void *)(v4 + 480);
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(v4 + 480));
      CFArrayRef v9 = *(const __CFArray **)(v3 + 152);
      if (v9)
      {
        VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(v9);
        if (!VideoLayoutLoggingStringFromCollectionArray) {
          return VideoLayoutLoggingStringFromCollectionArray;
        }
      }
      else
      {
        VideoLayoutLoggingStringFromCollectionArray = 0;
      }
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v10 + 480));
      *(void *)(v10 + 432) = VideoLayoutLoggingStringFromCollectionArray;
      *(unsigned char *)(v10 + 440) = 1;
      uint64_t v6 = *(void *)(v10 + 480);
    }
    MEMORY[0x19970E930](v6);
    return VideoLayoutLoggingStringFromCollectionArray;
  }
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 152);
  if (!v7) {
    return 0;
  }

  return FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(v7);
}

__CFString *FigAlternateGetVideoContentTypeString(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (a1)
  {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v4 + 480));
    if (*(unsigned char *)(v4 + 456))
    {
      VideoContentTypeStringFromCollectionArray = *(__CFString **)(v4 + 448);
      uint64_t v6 = *(void *)(v4 + 480);
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(v4 + 480));
      CFArrayRef v9 = *(const __CFArray **)(v3 + 152);
      if (v9)
      {
        VideoContentTypeStringFromCollectionArray = FigAlternateCreateVideoContentTypeStringFromCollectionArray(v9);
        if (!VideoContentTypeStringFromCollectionArray) {
          return VideoContentTypeStringFromCollectionArray;
        }
      }
      else
      {
        VideoContentTypeStringFromCollectionArray = 0;
      }
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v10 + 480));
      *(void *)(v10 + 448) = VideoContentTypeStringFromCollectionArray;
      *(unsigned char *)(v10 + 456) = 1;
      uint64_t v6 = *(void *)(v10 + 480);
    }
    MEMORY[0x19970E930](v6);
    return VideoContentTypeStringFromCollectionArray;
  }
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 152);
  if (!v7) {
    return 0;
  }

  return FigAlternateCreateVideoContentTypeStringFromCollectionArray(v7);
}

__CFString *FigAlternateGetHDCPString(uint64_t a1)
{
  if (!a1) {
    return @"Unknown";
  }
  unsigned int v1 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 136) + 1;
  if (v1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5793C70[v1];
  }
}

__CFString *FigAlternateGetLoggingStringFromHDCPLevel(int a1)
{
  if ((a1 + 1) > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5793C70[a1 + 1];
  }
}

uint64_t FigAlternateGetAudioGroupIDString(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 88);
  }
  return result;
}

uint64_t FigAlternateGetVideoGroupIDString(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 96);
  }
  return result;
}

uint64_t FigAlternateGetSubtitleGroupIDString(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 104);
  }
  return result;
}

uint64_t FigAlternateGetClosedCaptionGroupIDString(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 112);
  }
  return result;
}

uint64_t FigAlternateIsVideoGroupSynthesized(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 121);
  }
  return result;
}

uint64_t FigAlternateIsAudioGroupSynthesized(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 120);
  }
  return result;
}

uint64_t FigAlternateIsSubtitleGroupSynthesized(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 122);
  }
  return result;
}

uint64_t FigAlternateIsClosedCaptionGroupSynthesized(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 123);
  }
  return result;
}

__CFString *FigAlternateGetVideoRangeString(__CFString *result)
{
  if (result)
  {
    unsigned int v1 = FigAlternateGetVideoRange((uint64_t)result) - 1;
    if (v1 > 3) {
      return @"Unknown";
    }
    else {
      return off_1E5793C88[v1];
    }
  }
  return result;
}

uint64_t FigAlternateGetStableStreamIdentifier(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 128);
  }
  return result;
}

uint64_t FigAlternateGetPlaylistAlternateURL(uint64_t result)
{
  if (result) {
    return *(void *)CMBaseObjectGetDerivedStorage();
  }
  return result;
}

uint64_t FigAlternateGetURLForCacheLookup(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 40);
  }
  return result;
}

uint64_t FigAlternateGetRenditionInfoForMediaType(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, int a6, const __CFDictionary **a7, void *a8, void *a9)
{
  if (a2 == 1986618469)
  {
    if (!a1) {
      goto LABEL_14;
    }
    uint64_t v14 = (const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 192);
    a5 = a3;
  }
  else
  {
    if (a2 != 1936684398)
    {
      if (a2 == 1935832172 && a1)
      {
        uint64_t v14 = (const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 200);
        goto LABEL_10;
      }
LABEL_14:
      uint64_t v17 = 0;
      uint64_t v19 = 0;
      CFDictionaryRef Value = 0;
      goto LABEL_15;
    }
    if (!a1) {
      goto LABEL_14;
    }
    uint64_t v14 = (const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
    a5 = a4;
  }
LABEL_10:
  uint64_t v17 = 0;
  if (a5)
  {
    CFDictionaryRef v18 = *v14;
    uint64_t v19 = 0;
    CFDictionaryRef Value = 0;
    if (v18)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v18, a5);
      if (Value)
      {
        CFDictionaryRef v21 = Value;
        uint64_t v17 = CFDictionaryGetValue(Value, @"FBPAEGLMK_URL");
        uint64_t v19 = CFDictionaryGetValue(v21, @"FBPAEGLMK_URLForCacheLookup");
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v21, @"FBPAEGLMK_StableStreamIdentifier");
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
    CFDictionaryRef Value = 0;
  }
LABEL_15:
  if (a6 && !v17 && !v19 && !Value)
  {
    if (a1)
    {
      uint64_t v17 = *(const void **)CMBaseObjectGetDerivedStorage();
      uint64_t v19 = *(const void **)(CMBaseObjectGetDerivedStorage() + 40);
      CFDictionaryRef Value = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 128);
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0;
      CFDictionaryRef Value = 0;
    }
  }
  if (a7) {
    *a7 = Value;
  }
  if (a8) {
    *a8 = v17;
  }
  if (a9) {
    *a9 = v19;
  }
  return 0;
}

uint64_t FigAlternateGetSubtitleGroupLocatorMap(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 200);
  }
  return result;
}

uint64_t FigAlternateGetAudioGroupLocatorMap(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 184);
  }
  return result;
}

uint64_t FigAlternateGetVideoGroupLocatorMap(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 192);
  }
  return result;
}

CFURLRef FigAlternateGetCacheLookupIdentifier(const __CFURL *result)
{
  if (result)
  {
    uint64_t result = *(const __CFURL **)(CMBaseObjectGetDerivedStorage() + 128);
    if (!result)
    {
      uint64_t result = *(const __CFURL **)CMBaseObjectGetDerivedStorage();
      if (result)
      {
        return (const __CFURL *)CFURLGetString(result);
      }
    }
  }
  return result;
}

uint64_t FigAlternateGetClosedCaptionGroupLocatorMap(uint64_t result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 208);
  }
  return result;
}

uint64_t FigAlternateGetMediaGroupLocatorMap(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  if (a2 > 1936684397)
  {
    if (a2 == 1936684398)
    {
      if (a1)
      {
        uint64_t v3 = CMBaseObjectGetDerivedStorage() + 184;
        return *(void *)v3;
      }
      return 0;
    }
    if (a2 == 1986618469)
    {
      if (a1)
      {
        uint64_t v3 = CMBaseObjectGetDerivedStorage() + 192;
        return *(void *)v3;
      }
      return 0;
    }
  }
  else
  {
    if (a2 == 1668047728)
    {
      if (a1)
      {
        uint64_t v3 = CMBaseObjectGetDerivedStorage() + 208;
        return *(void *)v3;
      }
      return 0;
    }
    if (a2 == 1935832172)
    {
      if (a1)
      {
        uint64_t v3 = CMBaseObjectGetDerivedStorage() + 200;
        return *(void *)v3;
      }
      return 0;
    }
  }
  return v2;
}

CFDictionaryRef FigAlternateMightHaveDummyAudioGroup(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
    if (result)
    {
      if (CFDictionaryContainsKey(result, @"FBPAEGLMK_Name"))
      {
        return 0;
      }
      else
      {
        CMBaseObjectGetDerivedStorage();
        return (const __CFDictionary *)(FigCFEqual() != 0);
      }
    }
  }
  return result;
}

const void *FigAlternateGetStableStreamIdentifierForMediaSubstream(uint64_t a1, int a2, const void *a3)
{
  if (!a1) {
    return 0;
  }
  switch(a2)
  {
    case 1935832172:
      uint64_t v4 = (CFDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 200);
      break;
    case 1986618469:
      uint64_t v4 = (CFDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 192);
      break;
    case 1936684398:
      uint64_t v4 = (CFDictionaryRef *)(CMBaseObjectGetDerivedStorage() + 184);
      break;
    default:
      return 0;
  }
  if (!*v4) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*v4, a3);
  if (!Value) {
    return 0;
  }

  return CFDictionaryGetValue(Value, @"FBPAEGLMK_StableStreamIdentifier");
}

CFStringRef FigAlternateGetAudioFormatIDs(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    if (*(unsigned char *)(DerivedStorage + 408))
    {
      CFStringRef v3 = *(const __CFString **)(DerivedStorage + 400);
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
      if (FigAlternateHasAudioDeclared(a1))
      {
        CFStringRef v3 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
        if (v3)
        {
          CFDictionaryRef MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
          int v5 = FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v3, MediaValidatorPlist, 0, (const __CFDictionary **)&cf);
          CFStringRef v3 = 0;
          if (!v5)
          {
            CFStringRef Value = (const __CFString *)FigCFDictionaryGetValue();
            CFStringRef v3 = Value;
            if (Value) {
              CFRetain(Value);
            }
          }
        }
      }
      else
      {
        CFStringRef v3 = 0;
      }
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v7 + 480));
      *(void *)(v7 + 400) = v3;
      *(unsigned char *)(v7 + 408) = 1;
      MEMORY[0x19970E930](*(void *)(v7 + 480));
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  else
  {
    FigAlternateHasAudioDeclared(0);
    return 0;
  }
  return v3;
}

CFArrayRef FigAlternateGetCountOfValidMediaSubTypes(const __CFArray *result, int a2)
{
  if (!result) {
    return result;
  }
  if (a2 == 1986618469)
  {
    uint64_t result = (const __CFArray *)FigAlternateGetVideoCodecs((uint64_t)result);
    if (!result) {
      return result;
    }
    return (const __CFArray *)CFArrayGetCount(result);
  }
  if (a2 != 1936684398) {
    return 0;
  }
  uint64_t result = (const __CFArray *)FigAlternateGetAudioFormatIDs((uint64_t)result);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

const void *FigAlternateGetVideoCodecs(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    CFStringRef v4 = 0;
    CFStringRef v3 = 0;
    if (!FigAlternateHasVideoDeclared(0)) {
      return v3;
    }
LABEL_8:
    CFDictionaryRef MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
    CFStringRef v3 = 0;
    if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(v4, MediaValidatorPlist, 0, (const __CFDictionary **)&cf))
    {
      CFStringRef Value = (const void *)FigCFDictionaryGetValue();
      CFStringRef v3 = Value;
      if (Value) {
        CFRetain(Value);
      }
    }
    if (!a1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 392))
  {
    CFStringRef v3 = *(const void **)(DerivedStorage + 384);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    return v3;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  if (FigAlternateHasVideoDeclared(a1))
  {
    CFStringRef v4 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 16);
    goto LABEL_8;
  }
  CFStringRef v3 = 0;
LABEL_14:
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v7 + 480));
  *(void *)(v7 + 384) = v3;
  *(unsigned char *)(v7 + 392) = 1;
  MEMORY[0x19970E930](*(void *)(v7 + 480));
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t FigAlternateHasAudioFormatID(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 == 1700997939)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    if (*(unsigned char *)(DerivedStorage + 346))
    {
      uint64_t v4 = *(unsigned __int8 *)(DerivedStorage + 345);
      uint64_t v5 = *(void *)(DerivedStorage + 480);
LABEL_20:
      MEMORY[0x19970E930](v5);
      return v4;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (!fa_CodecsIncludeAudioFormatChoice(a1, 1700998451))
    {
      uint64_t v4 = 0;
LABEL_19:
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v13 + 480));
      *(unsigned char *)(v13 + 345) = v4;
      *(unsigned char *)(v13 + 346) = 1;
      uint64_t v5 = *(void *)(v13 + 480);
      goto LABEL_20;
    }
    CFDictionaryRef v7 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
    int64_t Count = FigCFDictionaryGetCount();
    if (Count < 1)
    {
      uint64_t v4 = 0;
      uint64_t v11 = 0;
LABEL_18:
      free(v11);
      goto LABEL_19;
    }
    int64_t v9 = Count;
    uint64_t v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v10)
    {
      uint64_t v11 = v10;
      CFDictionaryGetKeysAndValues(v7, v10, 0);
      uint64_t v12 = 0;
      while (1)
      {
        int v14 = 0;
        FigAlternateGetAudioChannelCount(a1, v11[v12], &v14);
        if (v14) {
          break;
        }
        if (v9 == ++v12)
        {
          uint64_t v4 = 0;
          goto LABEL_18;
        }
      }
      uint64_t v4 = 1;
      goto LABEL_18;
    }
    FigSignalErrorAt();
    return 0;
  }

  return fa_CodecsIncludeAudioFormatChoice(a1, a2);
}

uint64_t fa_CodecsIncludeAudioFormatChoice(uint64_t a1, int a2)
{
  if (a1) {
    CMBaseObjectGetDerivedStorage();
  }
  uint64_t v3 = 0;
  if (a2 <= 1633889586)
  {
    if (a2 > 1633772319)
    {
      switch(a2)
      {
        case 1633772320:
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(DerivedStorage + 480);
          MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
          if (*(unsigned char *)(DerivedStorage + 322))
          {
            uint64_t v3 = *(unsigned __int8 *)(DerivedStorage + 321);
          }
          else
          {
            MEMORY[0x19970E930](*v5);
            uint64_t v3 = FigCFStringFind();
            uint64_t v28 = CMBaseObjectGetDerivedStorage();
            uint64_t v5 = (void *)(v28 + 480);
            MEMORY[0x19970E910](*(void *)(v28 + 480));
            *(unsigned char *)(v28 + 321) = v3;
            *(unsigned char *)(v28 + 322) = 1;
          }
          goto LABEL_59;
        case 1633772392:
          uint64_t v16 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v16 + 480);
          MEMORY[0x19970E910](*(void *)(v16 + 480));
          if (*(unsigned char *)(v16 + 324))
          {
            uint64_t v3 = *(unsigned __int8 *)(v16 + 323);
          }
          else
          {
            MEMORY[0x19970E930](*v5);
            uint64_t v3 = FigCFStringFind();
            uint64_t v29 = CMBaseObjectGetDerivedStorage();
            uint64_t v5 = (void *)(v29 + 480);
            MEMORY[0x19970E910](*(void *)(v29 + 480));
            *(unsigned char *)(v29 + 323) = v3;
            *(unsigned char *)(v29 + 324) = 1;
          }
          goto LABEL_59;
        case 1633772400:
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v8 + 480);
          MEMORY[0x19970E910](*(void *)(v8 + 480));
          if (*(unsigned char *)(v8 + 326))
          {
            uint64_t v3 = *(unsigned __int8 *)(v8 + 325);
          }
          else
          {
            MEMORY[0x19970E930](*v5);
            uint64_t v3 = FigCFStringFind();
            uint64_t v21 = CMBaseObjectGetDerivedStorage();
            uint64_t v5 = (void *)(v21 + 480);
            MEMORY[0x19970E910](*(void *)(v21 + 480));
            *(unsigned char *)(v21 + 325) = v3;
            *(unsigned char *)(v21 + 326) = 1;
          }
          goto LABEL_59;
      }
    }
    else
    {
      switch(a2)
      {
        case 778924081:
          uint64_t v11 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v11 + 480);
          MEMORY[0x19970E910](*(void *)(v11 + 480));
          if (*(unsigned char *)(v11 + 328))
          {
            uint64_t v3 = *(unsigned __int8 *)(v11 + 327);
          }
          else
          {
            MEMORY[0x19970E930](*v5);
            uint64_t v3 = FigCFStringFind();
            uint64_t v24 = CMBaseObjectGetDerivedStorage();
            uint64_t v5 = (void *)(v24 + 480);
            MEMORY[0x19970E910](*(void *)(v24 + 480));
            *(unsigned char *)(v24 + 327) = v3;
            *(unsigned char *)(v24 + 328) = 1;
          }
          goto LABEL_59;
        case 778924082:
          uint64_t v12 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v12 + 480);
          MEMORY[0x19970E910](*(void *)(v12 + 480));
          if (*(unsigned char *)(v12 + 330))
          {
            uint64_t v3 = *(unsigned __int8 *)(v12 + 329);
          }
          else
          {
            MEMORY[0x19970E930](*v5);
            uint64_t v3 = FigCFStringFind();
            uint64_t v25 = CMBaseObjectGetDerivedStorage();
            uint64_t v5 = (void *)(v25 + 480);
            MEMORY[0x19970E910](*(void *)(v25 + 480));
            *(unsigned char *)(v25 + 329) = v3;
            *(unsigned char *)(v25 + 330) = 1;
          }
          goto LABEL_59;
        case 778924083:
          uint64_t v6 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v6 + 480);
          MEMORY[0x19970E910](*(void *)(v6 + 480));
          if (*(unsigned char *)(v6 + 332))
          {
            uint64_t v3 = *(unsigned __int8 *)(v6 + 331);
          }
          else
          {
            MEMORY[0x19970E930](*v5);
            uint64_t v3 = FigCFStringFind();
            uint64_t v19 = CMBaseObjectGetDerivedStorage();
            uint64_t v5 = (void *)(v19 + 480);
            MEMORY[0x19970E910](*(void *)(v19 + 480));
            *(unsigned char *)(v19 + 331) = v3;
            *(unsigned char *)(v19 + 332) = 1;
          }
          goto LABEL_59;
      }
    }
  }
  else if (a2 <= 1700998450)
  {
    switch(a2)
    {
      case 1633889587:
        uint64_t v13 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v13 + 480);
        MEMORY[0x19970E910](*(void *)(v13 + 480));
        if (*(unsigned char *)(v13 + 342))
        {
          uint64_t v3 = *(unsigned __int8 *)(v13 + 341);
        }
        else
        {
          MEMORY[0x19970E930](*v5);
          uint64_t v3 = FigCFStringFind();
          uint64_t v26 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v26 + 480);
          MEMORY[0x19970E910](*(void *)(v26 + 480));
          *(unsigned char *)(v26 + 341) = v3;
          *(unsigned char *)(v26 + 342) = 1;
        }
        goto LABEL_59;
      case 1634492771:
        uint64_t v14 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v14 + 480);
        MEMORY[0x19970E910](*(void *)(v14 + 480));
        if (*(unsigned char *)(v14 + 340))
        {
          uint64_t v3 = *(unsigned __int8 *)(v14 + 339);
        }
        else
        {
          MEMORY[0x19970E930](*v5);
          uint64_t v3 = FigCFStringFind();
          uint64_t v27 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v27 + 480);
          MEMORY[0x19970E910](*(void *)(v27 + 480));
          *(unsigned char *)(v27 + 339) = v3;
          *(unsigned char *)(v27 + 340) = 1;
        }
        goto LABEL_59;
      case 1634754915:
        uint64_t v7 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v7 + 480);
        MEMORY[0x19970E910](*(void *)(v7 + 480));
        if (*(unsigned char *)(v7 + 348))
        {
          uint64_t v3 = *(unsigned __int8 *)(v7 + 347);
        }
        else
        {
          MEMORY[0x19970E930](*v5);
          uint64_t v3 = FigCFStringFind();
          uint64_t v20 = CMBaseObjectGetDerivedStorage();
          uint64_t v5 = (void *)(v20 + 480);
          MEMORY[0x19970E910](*(void *)(v20 + 480));
          *(unsigned char *)(v20 + 347) = v3;
          *(unsigned char *)(v20 + 348) = 1;
        }
        goto LABEL_59;
    }
  }
  else if (a2 > 1869641074)
  {
    if (a2 == 1869641075)
    {
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      uint64_t v5 = (void *)(v17 + 480);
      MEMORY[0x19970E910](*(void *)(v17 + 480));
      if (*(unsigned char *)(v17 + 338))
      {
        uint64_t v3 = *(unsigned __int8 *)(v17 + 337);
      }
      else
      {
        MEMORY[0x19970E930](*v5);
        uint64_t v3 = FigCFStringFind();
        uint64_t v30 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v30 + 480);
        MEMORY[0x19970E910](*(void *)(v30 + 480));
        *(unsigned char *)(v30 + 337) = v3;
        *(unsigned char *)(v30 + 338) = 1;
      }
      goto LABEL_59;
    }
    if (a2 == 1970495843)
    {
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      uint64_t v5 = (void *)(v9 + 480);
      MEMORY[0x19970E910](*(void *)(v9 + 480));
      if (*(unsigned char *)(v9 + 334))
      {
        uint64_t v3 = *(unsigned __int8 *)(v9 + 333);
      }
      else
      {
        MEMORY[0x19970E930](*v5);
        uint64_t v3 = FigCFStringFind();
        uint64_t v22 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v22 + 480);
        MEMORY[0x19970E910](*(void *)(v22 + 480));
        *(unsigned char *)(v22 + 333) = v3;
        *(unsigned char *)(v22 + 334) = 1;
      }
      goto LABEL_59;
    }
  }
  else
  {
    if (a2 == 1700998451)
    {
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      uint64_t v5 = (void *)(v10 + 480);
      MEMORY[0x19970E910](*(void *)(v10 + 480));
      if (*(unsigned char *)(v10 + 344))
      {
        uint64_t v3 = *(unsigned __int8 *)(v10 + 343);
      }
      else
      {
        MEMORY[0x19970E930](*v5);
        uint64_t v3 = FigCFStringFind();
        uint64_t v23 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v23 + 480);
        MEMORY[0x19970E910](*(void *)(v23 + 480));
        *(unsigned char *)(v23 + 343) = v3;
        *(unsigned char *)(v23 + 344) = 1;
      }
      goto LABEL_59;
    }
    if (a2 == 1718378851)
    {
      uint64_t v4 = CMBaseObjectGetDerivedStorage();
      uint64_t v5 = (void *)(v4 + 480);
      MEMORY[0x19970E910](*(void *)(v4 + 480));
      if (*(unsigned char *)(v4 + 336))
      {
        uint64_t v3 = *(unsigned __int8 *)(v4 + 335);
      }
      else
      {
        MEMORY[0x19970E930](*v5);
        uint64_t v3 = FigCFStringFind();
        uint64_t v18 = CMBaseObjectGetDerivedStorage();
        uint64_t v5 = (void *)(v18 + 480);
        MEMORY[0x19970E910](*(void *)(v18 + 480));
        *(unsigned char *)(v18 + 335) = v3;
        *(unsigned char *)(v18 + 336) = 1;
      }
LABEL_59:
      MEMORY[0x19970E930](*v5);
    }
  }
  return v3;
}

uint64_t FigAlternateGetAudioChannelCount(const void *a1, const void *a2, _DWORD *a3)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v6);
  uint64_t result = v6;
  if (a3) {
    *a3 = DWORD1(v6);
  }
  if (!result) {
    return FigAlternateGetAudioChannelCountAccordingToCodecTag((uint64_t)a1);
  }
  return result;
}

uint64_t FigAlternateHasAudioFormat(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    switch(a2)
    {
      case 1:
        return fa_CodecsIncludeAudioFormatChoice(result, 1633772320)
            || fa_CodecsIncludeAudioFormatChoice(v2, 1633772392)
            || fa_CodecsIncludeAudioFormatChoice(v2, 1633772400)
            || fa_CodecsIncludeAudioFormatChoice(v2, 778924083)
            || fa_CodecsIncludeAudioFormatChoice(v2, 1970495843)
            || fa_CodecsIncludeAudioFormatChoice(v2, 778924082)
            || fa_CodecsIncludeAudioFormatChoice(v2, 778924081) != 0;
      case 2:
        int v3 = 1718378851;
        goto LABEL_21;
      case 3:
        int v3 = 1869641075;
        goto LABEL_21;
      case 4:
        int v3 = 1634492771;
        goto LABEL_21;
      case 5:
        int v3 = 1633889587;
        goto LABEL_21;
      case 6:
        int v3 = 1700998451;
        goto LABEL_21;
      case 7:
        return FigAlternateHasAudioFormatID(result, 1700997939);
      case 8:
        int v3 = 1634754915;
LABEL_21:
        uint64_t result = fa_CodecsIncludeAudioFormatChoice(result, v3);
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

BOOL FigAlternateGetBestAudioFormat(uint64_t a1)
{
  if (!a1) {
    return FigAlternateHasAudioFormat(0, 1) != 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 268))
  {
    uint64_t v3 = *(unsigned int *)(DerivedStorage + 264);
    uint64_t v4 = *(void *)(DerivedStorage + 480);
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (fa_CodecsIncludeAudioFormatChoice(a1, 1718378851))
    {
      uint64_t v3 = 2;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1634492771))
    {
      uint64_t v3 = 4;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1634754915))
    {
      uint64_t v3 = 8;
    }
    else if (FigAlternateHasAudioFormatID(a1, 1700997939))
    {
      uint64_t v3 = 7;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1700998451))
    {
      uint64_t v3 = 6;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1633889587))
    {
      uint64_t v3 = 5;
    }
    else if (fa_CodecsIncludeAudioFormatChoice(a1, 1869641075))
    {
      uint64_t v3 = 3;
    }
    else
    {
      uint64_t v3 = FigAlternateHasAudioFormat(a1, 1) != 0;
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v5 + 480));
    *(_DWORD *)(v5 + 264) = v3;
    *(unsigned char *)(v5 + 268) = 1;
    uint64_t v4 = *(void *)(v5 + 480);
  }
  MEMORY[0x19970E930](v4);
  return v3;
}

uint64_t FigAlternateGetDeclaredAudioChannelCount(const void *a1, const void *a2, _DWORD *a3)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v5);
  if (a3) {
    *a3 = DWORD1(v5);
  }
  return v5;
}

void fa_getDeclaredAudioInfo(const void *a1@<X0>, const void *a2@<X1>, long long *a3@<X8>)
{
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  if (a2 && a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    if (FigCFDictionaryGetCount() >= 1)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 464), a2);
      if (Value)
      {
        v39.CFIndex location = 0;
        v39.length = 24;
        CFDataGetBytes(Value, v39, (UInt8 *)a3);
        JUMPOUT(0x19970E930);
      }
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    CFDictionaryRef v10 = *(const __CFDictionary **)(v9 + 184);
    if (v10)
    {
      CFTypeID v11 = CFGetTypeID(*(CFTypeRef *)(v9 + 184));
      if (v11 == CFDictionaryGetTypeID())
      {
        CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v10, a2);
        if (v12)
        {
          CFDictionaryRef v13 = v12;
          CFTypeID v14 = CFGetTypeID(v12);
          if (v14 == CFDictionaryGetTypeID())
          {
            CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(v13, @"FBPAEGLMK_Channels");
            CFStringRef v16 = v15;
            if (!v15) {
              goto LABEL_45;
            }
            CFTypeID v17 = CFGetTypeID(v15);
            if (v17 != CFStringGetTypeID()) {
              return;
            }
            CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, @"/");
            if (!ArrayBySeparatingStrings) {
              return;
            }
            CFStringRef v16 = (const __CFString *)ArrayBySeparatingStrings;
            if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
            {
              CFArrayRef v27 = 0;
              goto LABEL_50;
            }
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, 0);
            *(_DWORD *)a3 = CFStringGetIntValue(ValueAtIndex);
            if (CFArrayGetCount((CFArrayRef)v16) >= 2)
            {
              CFStringRef v21 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, 1);
              if (FigAlternateHasAudioFormatID((uint64_t)a1, 1700998451)
                && FigCFStringFind())
              {
                int v22 = 1;
                *((_DWORD *)a3 + 1) = 1;
                goto LABEL_26;
              }
              if (v8)
              {
                if (FigAlternateHasAudioFormatID((uint64_t)a1, 1634754915))
                {
                  CFIndex location = CFStringFind(v21, @"OA", 0).location;
                  if (location != -1)
                  {
                    v40.length = location;
                    v40.CFIndex location = 0;
                    CFStringRef v24 = CFStringCreateWithSubstring(v18, v21, v40);
                    if (v24)
                    {
                      CFStringRef v25 = v24;
                      *((_DWORD *)a3 + 2) = CFStringGetIntValue(v24);
                      CFRelease(v25);
                    }
                  }
                }
              }
            }
            int v22 = 0;
LABEL_26:
            if (CFArrayGetCount((CFArrayRef)v16) > 2)
            {
              LODWORD(v36) = 0;
              CFStringRef v26 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, 2);
              CFArrayRef v27 = CFStringCreateArrayBySeparatingStrings(v18, v26, @",");
              CFIndex v28 = 0;
              if (!v27) {
                goto LABEL_29;
              }
LABEL_28:
              for (CFIndex i = CFArrayGetCount(v27); ; CFIndex i = 0)
              {
                if (v28 >= i) {
                  goto LABEL_46;
                }
                CFArrayGetValueAtIndex(v27, v28);
                if (FigCFStringFind()) {
                  break;
                }
                if (FigCFStringFind())
                {
                  v22 |= 8u;
                  goto LABEL_35;
                }
                if (FigCFStringFind())
                {
                  v22 |= 4u;
                  *((_DWORD *)a3 + 1) = v22;
                  if (FigCFStringGetIntAfterString()) {
                    *((_DWORD *)a3 + 4) = v36;
                  }
                }
                else if (FigCFStringGetIntAfterString())
                {
                  *((_DWORD *)a3 + 3) = v36;
                }
                else if (FigCFStringGetIntAfterString())
                {
                  *((_DWORD *)a3 + 5) = v36;
                }
LABEL_36:
                ++v28;
                if (v27) {
                  goto LABEL_28;
                }
LABEL_29:
                ;
              }
              v22 |= 2u;
LABEL_35:
              *((_DWORD *)a3 + 1) = v22;
              goto LABEL_36;
            }
LABEL_45:
            CFArrayRef v27 = 0;
LABEL_46:
            long long v36 = *a3;
            uint64_t v37 = *((void *)a3 + 2);
            uint64_t v30 = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19970E910](*(void *)(v30 + 480));
            if ((*(void *)(v30 + 464)
               || (CFAllocatorRef v31 = CFGetAllocator(a1),
                   CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
                   (*(void *)(v30 + 464) = Mutable) != 0))
              && (v33 = CFGetAllocator(a1), (CFDataRef v34 = CFDataCreate(v33, (const UInt8 *)&v36, 24)) != 0))
            {
              CFDataRef v35 = v34;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v30 + 464), a2, v34);
              MEMORY[0x19970E930](*(void *)(v30 + 480));
              CFRelease(v35);
              if (!v16) {
                goto LABEL_51;
              }
            }
            else
            {
              MEMORY[0x19970E930](*(void *)(v30 + 480));
              if (!v16)
              {
LABEL_51:
                if (v27) {
                  CFRelease(v27);
                }
                return;
              }
            }
LABEL_50:
            CFRelease(v16);
            goto LABEL_51;
          }
        }
      }
    }
  }
}

uint64_t FigAlternateGetAudioChannelCountAccordingToCodecTag(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
    if (*(unsigned char *)(DerivedStorage + 276))
    {
      uint64_t v3 = *(unsigned int *)(DerivedStorage + 272);
      uint64_t v4 = *(void *)(DerivedStorage + 480);
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
      if (FigAlternateHasAudioFormatID(a1, 1634754915))
      {
        uint64_t v3 = 4;
      }
      else if (FigAlternateHasAudioFormatID(a1, 1700998451))
      {
        uint64_t v3 = 8;
      }
      else if (FigAlternateHasAudioFormatID(a1, 1633889587))
      {
        uint64_t v3 = 6;
      }
      else if (FigAlternateHasAudioFormatID(a1, 1718378851) {
             || FigAlternateHasAudioFormatID(a1, 1869641075)
      }
             || FigAlternateHasAudioFormatID(a1, 1634492771)
             || FigAlternateHasAudioFormat(a1, 1))
      {
        uint64_t v3 = 2;
      }
      else
      {
        uint64_t v3 = 2 * (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 24) == 0);
      }
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v5 + 480));
      *(_DWORD *)(v5 + 272) = v3;
      *(unsigned char *)(v5 + 276) = 1;
      uint64_t v4 = *(void *)(v5 + 480);
    }
    MEMORY[0x19970E930](v4);
  }
  else
  {
    FigAlternateHasAudioFormat(0, 1);
    return 2;
  }
  return v3;
}

uint64_t FigAlternateGetAudioChannelCounts(const void *a1, const void *a2, _DWORD *a3, _DWORD *a4)
{
  AudioChannelint64_t Count = FigAlternateGetAudioChannelCount(a1, a2, a4);
  if (a3)
  {
    *a3 = 0;
    if (a1)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
      if (*(unsigned char *)(DerivedStorage + 428))
      {
        int v8 = *(_DWORD *)(DerivedStorage + 424);
        uint64_t v9 = *(void *)(DerivedStorage + 480);
      }
      else
      {
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
        CFStringRef AudioFormatIDs = FigAlternateGetAudioFormatIDs((uint64_t)a1);
        if (AudioFormatIDs
          && (CFArrayRef v11 = (const __CFArray *)AudioFormatIDs, CFArrayGetCount((CFArrayRef)AudioFormatIDs) >= 1))
        {
          int v8 = 0;
          CFIndex v12 = 0;
          do
          {
            FigCFArrayGetInt32AtIndex();
            AudioMaximumDecodeChannelint64_t Count = FigStreamAlternateGetAudioMaximumDecodeChannelCount(0);
            if (AudioMaximumDecodeChannelCount > v8) {
              int v8 = AudioMaximumDecodeChannelCount;
            }
            ++v12;
          }
          while (CFArrayGetCount(v11) > v12);
        }
        else
        {
          int v8 = 0;
        }
        uint64_t v14 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19970E910](*(void *)(v14 + 480));
        *(_DWORD *)(v14 + 424) = v8;
        *(unsigned char *)(v14 + 428) = 1;
        uint64_t v9 = *(void *)(v14 + 480);
      }
      MEMORY[0x19970E930](v9);
      if (v8) {
        BOOL v15 = (int)AudioChannelCount <= v8;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15) {
        *a3 = AudioChannelCount - v8;
      }
    }
  }
  return AudioChannelCount;
}

uint64_t FigAlternateHasLosslessAudio(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)(DerivedStorage + 480);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 286))
  {
    uint64_t v4 = *(unsigned __int8 *)(DerivedStorage + 285);
  }
  else
  {
    MEMORY[0x19970E930](*v3);
    uint64_t v4 = 1;
    if (!fa_CodecsIncludeAudioFormatChoice(a1, 1718378851)) {
      uint64_t v4 = fa_CodecsIncludeAudioFormatChoice(a1, 1634492771) != 0;
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = (void *)(v5 + 480);
    MEMORY[0x19970E910](*(void *)(v5 + 480));
    *(unsigned char *)(v5 + 285) = v4;
    *(unsigned char *)(v5 + 286) = 1;
  }
  MEMORY[0x19970E930](*v3);
  return v4;
}

const void *FigAlternateGetAudioBitDepth(uint64_t a1, const void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFDictionaryRef v6 = *(const __CFDictionary **)(DerivedStorage + 184);
    if (!v6) {
      return 0;
    }
    CFTypeID v7 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 184));
    if (v7 != CFDictionaryGetTypeID()) {
      return 0;
    }
    uint64_t result = CFDictionaryGetValue(v6, a2);
    if (!result) {
      return result;
    }
    CFTypeID v8 = CFGetTypeID(result);
    if (v8 != CFDictionaryGetTypeID()) {
      return 0;
    }
    FigCFDictionaryGetInt32IfPresent();
    return 0;
  }
  return result;
}

double FigAlternateGetAudioSampleRate(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFDictionaryRef v4 = *(const __CFDictionary **)(DerivedStorage + 184);
      if (v4)
      {
        CFTypeID v5 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 184));
        if (v5 == CFDictionaryGetTypeID())
        {
          CFDataRef Value = CFDictionaryGetValue(v4, a2);
          if (Value)
          {
            CFTypeID v7 = CFGetTypeID(Value);
            if (v7 == CFDictionaryGetTypeID()) {
              FigCFDictionaryGetDoubleIfPresent();
            }
          }
        }
      }
    }
  }
  return 0.0;
}

uint64_t FigAlternateGetAudioInstreamID(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v4 = *(const __CFDictionary **)(DerivedStorage + 184);
  if (!v4) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 184));
  if (v5 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDataRef Value = CFDictionaryGetValue(v4, a2);
  if (!Value) {
    return 0;
  }
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return FigCFDictionaryGetValue();
}

double FigAlternateGetMaxAudioSampleRate(uint64_t a1)
{
  if (!a1)
  {
    CFDictionaryRef v4 = 0;
    if (!FigAlternateHasAudioDeclared(0)) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (!*(unsigned char *)(DerivedStorage + 376))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared(a1))
    {
      CFTypeID v8 = 0;
      double v3 = 0.0;
LABEL_19:
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v11 + 480));
      *(double *)(v11 + 368) = v3;
      *(unsigned char *)(v11 + 376) = 1;
      MEMORY[0x19970E930](*(void *)(v11 + 480));
      CFDictionaryRef v4 = (const __CFDictionary *)v8;
      goto LABEL_20;
    }
    CFDictionaryRef v4 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    int64_t Count = FigCFDictionaryGetCount();
    if (Count < 1)
    {
      CFTypeID v8 = 0;
      double v3 = 0.0;
      goto LABEL_16;
    }
    int64_t v6 = Count;
    CFTypeID v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v7)
    {
      CFTypeID v8 = v7;
      CFDictionaryGetKeysAndValues(v4, v7, 0);
      uint64_t v9 = 0;
      double v3 = 0.0;
      do
      {
        double AudioSampleRate = FigAlternateGetAudioSampleRate(a1, v8[v9]);
        if (AudioSampleRate > v3) {
          double v3 = AudioSampleRate;
        }
        ++v9;
      }
      while (v6 != v9);
LABEL_16:
      CFDictionaryRef v4 = (const __CFDictionary *)v8;
      if (!a1) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    FigSignalErrorAt();
    CFDictionaryRef v4 = 0;
LABEL_5:
    double v3 = 0.0;
LABEL_20:
    free(v4);
    return v3;
  }
  double v3 = *(double *)(DerivedStorage + 368);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return v3;
}

uint64_t FigAlternateWillPlayIfFairplayProtected(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v3 = (void *)(DerivedStorage + 480);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (*(unsigned char *)(DerivedStorage + 420))
  {
    uint64_t HasValidCodecs = *(unsigned __int8 *)(DerivedStorage + 419);
  }
  else
  {
    MEMORY[0x19970E930](*v3);
    uint64_t HasValidCodecs = FigAlternateHasValidCodecs(a1);
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 16)
      && HasValidCodecs
      && FigAlternateHasValidCodecs(a1)
      && fa_hasVideoDecodedBySoftware(a1))
    {
      if (FigAlternateHasVideoFormat(a1, 4) || FigAlternateHasVideoFormat(a1, 7))
      {
        uint64_t HasValidCodecs = 0;
      }
      else
      {
        uint64_t HasValidCodecs = 0;
        if (!fa_CodecsIncludeVideoFormat(a1, 1635135537, 0)) {
          uint64_t HasValidCodecs = fa_CodecsIncludeVideoFormat(a1, 1684108849, 0) == 0;
        }
      }
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    double v3 = (void *)(v5 + 480);
    MEMORY[0x19970E910](*(void *)(v5 + 480));
    *(unsigned char *)(v5 + 419) = HasValidCodecs;
    *(unsigned char *)(v5 + 420) = 1;
  }
  MEMORY[0x19970E930](*v3);
  return HasValidCodecs;
}

unint64_t fa_hasVideoDecodedBySoftware(uint64_t a1)
{
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (!*(unsigned char *)(DerivedStorage + 418))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (a1)
    {
      unint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
      if (!v3)
      {
LABEL_10:
        uint64_t v6 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19970E910](*(void *)(v6 + 480));
        *(unsigned char *)(v6 + 417) = v3;
        *(unsigned char *)(v6 + 418) = 1;
        uint64_t v4 = *(void *)(v6 + 480);
        goto LABEL_11;
      }
      CFDictionaryRef MediaValidatorPlist = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 472);
      if (!MediaValidatorPlist) {
        CFDictionaryRef MediaValidatorPlist = (const __CFDictionary *)FPSupport_GetMediaValidatorPlist();
      }
      if (!FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming((CFStringRef)v3, MediaValidatorPlist, &v8, 0))
      {
        unint64_t v3 = (~v8 & 0x18) == 0;
        goto LABEL_10;
      }
    }
    unint64_t v3 = 0;
    goto LABEL_10;
  }
  unint64_t v3 = *(unsigned __int8 *)(DerivedStorage + 417);
  uint64_t v4 = *(void *)(DerivedStorage + 480);
LABEL_11:
  MEMORY[0x19970E930](v4);
  return v3;
}

BOOL FigAlternateHasVideoCodecRequiringSoftwareDecode(BOOL result)
{
  if (result) {
    return fa_hasVideoDecodedBySoftware(result) != 0;
  }
  return result;
}

unint64_t FigAlternateShouldBeAvoidedForPlaybackInLPM(unint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = fa_hasVideoDecodedBySoftware(result);
    if (!result) {
      return FigAlternateGetVideoRange(v1) > 1;
    }
  }
  return result;
}

uint64_t FigAlternateGetMaxAudioChannelCount(const void *a1)
{
  if (!a1)
  {
    uint64_t AudioChannelCountAccordingToCodecTag = 0;
    uint64_t v4 = 0;
    if (!FigAlternateHasAudioDeclared(0)) {
      goto LABEL_19;
    }
    goto LABEL_8;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (!*(unsigned char *)(DerivedStorage + 284))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared((uint64_t)a1)) {
      goto LABEL_18;
    }
    uint64_t AudioChannelCountAccordingToCodecTag = *(void *)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    int64_t Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      int64_t v6 = Count;
      uint64_t v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
      if (!v4)
      {
        FigSignalErrorAt();
        uint64_t AudioChannelCountAccordingToCodecTag = 0;
        goto LABEL_21;
      }
      CFDictionaryGetKeysAndValues((CFDictionaryRef)AudioChannelCountAccordingToCodecTag, v4, 0);
      uint64_t v7 = 0;
      LODWORD(AudioChannelCountAccordingToCodecTag) = 0;
      do
      {
        int v8 = v4[v7];
        long long v11 = 0uLL;
        uint64_t v12 = 0;
        fa_getDeclaredAudioInfo(a1, v8, &v11);
        if ((int)v11 <= (int)AudioChannelCountAccordingToCodecTag) {
          uint64_t AudioChannelCountAccordingToCodecTag = AudioChannelCountAccordingToCodecTag;
        }
        else {
          uint64_t AudioChannelCountAccordingToCodecTag = v11;
        }
        ++v7;
      }
      while (v6 != v7);
      if (AudioChannelCountAccordingToCodecTag)
      {
        if (!a1) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
LABEL_19:
      uint64_t AudioChannelCountAccordingToCodecTag = FigAlternateGetAudioChannelCountAccordingToCodecTag((uint64_t)a1);
      if (!a1)
      {
LABEL_21:
        free(v4);
        return AudioChannelCountAccordingToCodecTag;
      }
LABEL_20:
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v9 + 480));
      *(_DWORD *)(v9 + 280) = AudioChannelCountAccordingToCodecTag;
      *(unsigned char *)(v9 + 284) = 1;
      MEMORY[0x19970E930](*(void *)(v9 + 480));
      goto LABEL_21;
    }
LABEL_18:
    uint64_t v4 = 0;
    goto LABEL_19;
  }
  uint64_t AudioChannelCountAccordingToCodecTag = *(unsigned int *)(DerivedStorage + 280);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return AudioChannelCountAccordingToCodecTag;
}

uint64_t FigAlternateGetMaxPlayableAudioChannelCount(const void *a1)
{
  if (!a1)
  {
    uint64_t AudioChannelCountAccordingToCodecTag = 0;
    uint64_t v4 = 0;
    if (!FigAlternateHasAudioDeclared(0)) {
      goto LABEL_19;
    }
    goto LABEL_8;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (!*(unsigned char *)(DerivedStorage + 364))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared((uint64_t)a1)) {
      goto LABEL_18;
    }
    uint64_t AudioChannelCountAccordingToCodecTag = *(void *)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    int64_t Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      int64_t v6 = Count;
      uint64_t v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
      if (!v4)
      {
        FigSignalErrorAt();
        uint64_t AudioChannelCountAccordingToCodecTag = 0;
        goto LABEL_21;
      }
      CFDictionaryGetKeysAndValues((CFDictionaryRef)AudioChannelCountAccordingToCodecTag, v4, 0);
      uint64_t v7 = 0;
      LODWORD(AudioChannelCountAccordingToCodecTag) = 0;
      do
      {
        int v11 = 0;
        int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, v4[v7], &v11, 0);
        if (AudioChannelCounts - v11 <= (int)AudioChannelCountAccordingToCodecTag) {
          uint64_t AudioChannelCountAccordingToCodecTag = AudioChannelCountAccordingToCodecTag;
        }
        else {
          uint64_t AudioChannelCountAccordingToCodecTag = (AudioChannelCounts - v11);
        }
        ++v7;
      }
      while (v6 != v7);
      if (AudioChannelCountAccordingToCodecTag)
      {
        if (!a1) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
LABEL_19:
      uint64_t AudioChannelCountAccordingToCodecTag = FigAlternateGetAudioChannelCountAccordingToCodecTag((uint64_t)a1);
      if (!a1)
      {
LABEL_21:
        free(v4);
        return AudioChannelCountAccordingToCodecTag;
      }
LABEL_20:
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v9 + 480));
      *(_DWORD *)(v9 + 360) = AudioChannelCountAccordingToCodecTag;
      *(unsigned char *)(v9 + 364) = 1;
      MEMORY[0x19970E930](*(void *)(v9 + 480));
      goto LABEL_21;
    }
LABEL_18:
    uint64_t v4 = 0;
    goto LABEL_19;
  }
  uint64_t AudioChannelCountAccordingToCodecTag = *(unsigned int *)(DerivedStorage + 360);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return AudioChannelCountAccordingToCodecTag;
}

uint64_t FigAlternateGetImmersiveAudioCapability(const void *a1, const void *a2)
{
  int v6 = 0;
  uint64_t v2 = 1;
  if (a2)
  {
    FigAlternateGetAudioChannelCount(a1, a2, &v6);
    if ((v6 & 4) != 0) {
      int v3 = 2;
    }
    else {
      int v3 = 1;
    }
    if ((v6 & 8) != 0) {
      unsigned int v4 = 4;
    }
    else {
      unsigned int v4 = v3;
    }
    if ((v6 & 2) != 0) {
      return 3;
    }
    else {
      return v4;
    }
  }
  return v2;
}

uint64_t FigAlternateHasBinauralAudio(const void *a1)
{
  if (!a1)
  {
    CFDictionaryRef v4 = 0;
    if (!FigAlternateHasAudioDeclared(0)) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  if (!*(unsigned char *)(DerivedStorage + 358))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
    if (!FigAlternateHasAudioDeclared((uint64_t)a1))
    {
      uint64_t v3 = 0;
      int v8 = 0;
LABEL_20:
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v10 + 480));
      *(unsigned char *)(v10 + 357) = v3;
      *(unsigned char *)(v10 + 358) = 1;
      MEMORY[0x19970E930](*(void *)(v10 + 480));
      CFDictionaryRef v4 = (const __CFDictionary *)v8;
      goto LABEL_21;
    }
    CFDictionaryRef v4 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
LABEL_8:
    int64_t Count = FigCFDictionaryGetCount();
    if (Count < 1)
    {
      int v8 = 0;
LABEL_15:
      uint64_t v3 = 0;
LABEL_17:
      CFDictionaryRef v4 = (const __CFDictionary *)v8;
      if (!a1) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    int64_t v6 = Count;
    uint64_t v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v7)
    {
      int v8 = v7;
      CFDictionaryGetKeysAndValues(v4, v7, 0);
      uint64_t v9 = 0;
      while (FigAlternateGetImmersiveAudioCapability(a1, v8[v9]) != 3)
      {
        if (v6 == ++v9) {
          goto LABEL_15;
        }
      }
      uint64_t v3 = 1;
      goto LABEL_17;
    }
    FigSignalErrorAt();
    CFDictionaryRef v4 = 0;
LABEL_5:
    uint64_t v3 = 0;
LABEL_21:
    free(v4);
    return v3;
  }
  uint64_t v3 = *(unsigned __int8 *)(DerivedStorage + 357);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  return v3;
}

uint64_t FigAlternateIsPeakBitRateDeclared(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
  }
  return result;
}

BOOL FigAlternateIsAverageBitRateDeclared(BOOL result)
{
  if (result) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 48) != 0;
  }
  return result;
}

BOOL FigAlternateIsFrameRateDeclared(BOOL result)
{
  if (result) {
    return *(double *)(CMBaseObjectGetDerivedStorage() + 56) > 0.0;
  }
  return result;
}

uint64_t FigAlternateGetAmbisonicsOrder(const void *a1, const void *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return DWORD2(v3);
}

uint64_t FigAlternateGetChannelBedCount(const void *a1, const void *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return HIDWORD(v3);
}

uint64_t FigAlternateGetDownmixOfChannelCount(const void *a1, const void *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return v4;
}

uint64_t FigAlternateGetDegreesOfFreedom(const void *a1, const void *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  fa_getDeclaredAudioInfo(a1, a2, &v3);
  return HIDWORD(v4);
}

__CFString *FigAlternateGetStringFromVideoRange(int a1)
{
  if ((a1 - 1) > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5793C88[a1 - 1];
  }
}

__CFString *FigAlternateGetStringFromVideoFormat(int a1)
{
  if ((a1 - 1) > 8) {
    return @"Unknown";
  }
  else {
    return off_1E5793CA8[a1 - 1];
  }
}

__CFString *FigAlternateGetStringFromAudioFormat(int a1)
{
  if ((a1 - 1) > 8) {
    return @"Unknown";
  }
  else {
    return off_1E5793CF0[a1 - 1];
  }
}

__CFString *FigAlternateGetStringFromHDCPState(int a1)
{
  if ((a1 + 1) > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5793D38[a1 + 1];
  }
}

__CFString *FigAlternateGetPlaylistStringFromHDCPLevel(int a1)
{
  if ((a1 + 1) > 2) {
    return @"UNKNOWN";
  }
  else {
    return off_1E5793D50[a1 + 1];
  }
}

__CFString *FigAlternateGetStringFromFramerateBucket(unsigned int a1)
{
  if (a1 > 3) {
    return @"UnknownBucket";
  }
  else {
    return off_1E5793D68[a1];
  }
}

__CFString *FigAlternateGetStringFromImmersiveAudioCapability(int a1)
{
  if ((a1 - 2) > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5793D88[a1 - 2];
  }
}

uint64_t FigAlternateStreamVideoQualityIndexToCMVideoDynamicRange(int a1)
{
  if ((a1 - 1) > 0x15) {
    return 0;
  }
  else {
    return dword_1949961E8[a1 - 1];
  }
}

BOOL FigAlternateIs4k(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v2 = (double *)(DerivedStorage + 168);
    long long v3 = (double *)(DerivedStorage + 176);
  }
  else
  {
    uint64_t v2 = (double *)MEMORY[0x1E4F1DB30];
    long long v3 = (double *)(MEMORY[0x1E4F1DB30] + 8);
  }
  double v4 = *v2;
  if (*v3 < *v2) {
    double v4 = *v3;
  }
  return v4 > 1440.0;
}

BOOL FigAlternateHasHDVideoResolution(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v2 = (double *)(DerivedStorage + 168);
    long long v3 = (double *)(DerivedStorage + 176);
  }
  else
  {
    uint64_t v2 = (double *)MEMORY[0x1E4F1DB30];
    long long v3 = (double *)(MEMORY[0x1E4F1DB30] + 8);
  }
  double v4 = *v2;
  if (*v3 < *v2) {
    double v4 = *v3;
  }
  return v4 >= 1440.0;
}

void FigAlternateScaleBitrateFractionToNewAlternate(uint64_t a1, uint64_t a2)
{
}

double fa_getAlternateAvgToPeakRatio(uint64_t a1)
{
  if (a1) {
    double AlternateAverageBandwidth = (double)(int)fa_GetAlternateAverageBandwidth(a1);
  }
  else {
    double AlternateAverageBandwidth = 0.0;
  }
  return AlternateAverageBandwidth / (double)(int)FigAlternateGetPeakBitRate(a1);
}

uint64_t FigAlternateGetClassID()
{
  if (sRegisterFigAlternateClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
  }
  return sFigAlternateClassID;
}

uint64_t RegisterFigAlternateType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateGetTypeID()
{
  if (sRegisterFigAlternateClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternateCreateWithSerializedRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v34 = 0;
  memset(&v31[8], 0, 120);
  *((void *)&v30[1] + 1) = 0;
  *(_OWORD *)((char *)v30 + 8) = 0u;
  uint64_t v5 = (const void *)FigCFDictionaryGetValue();
  *(void *)&v30[0] = FigCFDictionaryGetValue();
  int64_t v6 = (const void *)FigCFDictionaryGetValue();
  *(void *)CFAllocatorRef v31 = FigCFDictionaryGetValue();
  *(void *)&v31[24] = FigCFDictionaryGetValue();
  *(void *)&v31[8] = FigCFDictionaryGetValue();
  *(void *)&v31[40] = FigCFDictionaryGetValue();
  *(void *)&v31[56] = FigCFDictionaryGetValue();
  *(void *)&v31[72] = FigCFDictionaryGetValue();
  *(void *)&v31[104] = FigCFDictionaryGetValue();
  *(void *)&long long v32 = FigCFDictionaryGetValue();
  *((void *)&v32 + 1) = FigCFDictionaryGetValue();
  *(void *)&long long v33 = FigCFDictionaryGetValue();
  *((void *)&v33 + 1) = FigCFDictionaryGetValue();
  DictionaryCFDataRef Value = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  CGSizeMakeWithDictionaryRepresentation(DictionaryValue, (CGSize *)&v31[112]);
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetDoubleIfPresent();
  FigCFDictionaryGetDoubleIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  value[0] = 0;
  CFArrayRef v8 = (const __CFArray *)FigCFDictionaryGetValue();
  if (v8)
  {
    CFArrayRef v9 = v8;
    CFIndex Count = CFArrayGetCount(v8);
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
    if (Count < 1)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        if (CFArrayGetCount(v9) >= 1)
        {
          CFIndex v13 = 0;
          do
          {
            uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            if (MEMORY[0x19970EAB0](ValueAtIndex, AllocatorForMedia, value)) {
              break;
            }
            CFArrayAppendValue(Mutable, value[0]);
            if (value[0])
            {
              CFRelease(value[0]);
              value[0] = 0;
            }
            ++v13;
          }
          while (v13 < CFArrayGetCount(v9));
          if (value[0]) {
            CFRelease(value[0]);
          }
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
  }
  *(void *)&v31[96] = Mutable;
  long long v26 = *(_OWORD *)&v31[96];
  long long v27 = *(_OWORD *)&v31[112];
  long long v28 = v32;
  long long v29 = v33;
  long long v22 = *(_OWORD *)&v31[32];
  long long v23 = *(_OWORD *)&v31[48];
  long long v24 = *(_OWORD *)&v31[64];
  long long v25 = *(_OWORD *)&v31[80];
  *(_OWORD *)CMTimeValue value = v30[0];
  long long v19 = v30[1];
  long long v20 = *(_OWORD *)v31;
  long long v21 = *(_OWORD *)&v31[16];
  uint64_t v16 = FigAlternateCreate(v11, 0, v5, v35, v6, v34, SHIDWORD(v36), v36, (uint64_t)value, a4);
  if (*(void *)&v31[96]) {
    CFRelease(*(CFTypeRef *)&v31[96]);
  }
  return v16;
}

uint64_t FigAlternateCreate(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const void *a5, char a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
  {
    if (sRegisterFigAlternateClassIDOnce != -1) {
      dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
    }
    uint64_t v16 = CMDerivedObjectCreate();
    if (!v16)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a3) {
        CFTypeRef v18 = CFRetain(a3);
      }
      else {
        CFTypeRef v18 = 0;
      }
      *(void *)uint64_t DerivedStorage = v18;
      CFTypeRef v19 = *(CFTypeRef *)a9;
      if (*(void *)a9) {
        CFTypeRef v19 = CFRetain(v19);
      }
      *(void *)(DerivedStorage + 8) = a4;
      uint64_t v20 = *(void *)(a9 + 8);
      *(void *)(DerivedStorage + 40) = v19;
      *(void *)(DerivedStorage + 48) = v20;
      double v21 = *(double *)(a9 + 16);
      *(double *)(DerivedStorage + 56) = v21;
      *(double *)(DerivedStorage + 64) = fmax(v21, 0.0);
      if (a5) {
        CFTypeRef v22 = CFRetain(a5);
      }
      else {
        CFTypeRef v22 = 0;
      }
      *(void *)(DerivedStorage + 16) = v22;
      CFTypeRef v23 = *(CFTypeRef *)(a9 + 32);
      if (v23) {
        CFTypeRef v23 = CFRetain(v23);
      }
      *(void *)(DerivedStorage + 80) = v23;
      CFTypeRef v24 = *(CFTypeRef *)(a9 + 56);
      if (v24) {
        CFTypeRef v24 = CFRetain(v24);
      }
      *(void *)(DerivedStorage + 88) = v24;
      *(unsigned char *)(DerivedStorage + 120) = *(unsigned char *)(a9 + 64);
      CFTypeRef v25 = *(CFTypeRef *)(a9 + 40);
      if (v25) {
        CFTypeRef v25 = CFRetain(v25);
      }
      *(void *)(DerivedStorage + 96) = v25;
      *(unsigned char *)(DerivedStorage + 121) = *(unsigned char *)(a9 + 48);
      CFTypeRef v26 = *(CFTypeRef *)(a9 + 72);
      if (v26) {
        CFTypeRef v26 = CFRetain(v26);
      }
      *(void *)(DerivedStorage + 104) = v26;
      *(unsigned char *)(DerivedStorage + 122) = *(unsigned char *)(a9 + 80);
      CFTypeRef v27 = *(CFTypeRef *)(a9 + 88);
      if (v27) {
        CFTypeRef v27 = CFRetain(v27);
      }
      *(void *)(DerivedStorage + 112) = v27;
      *(unsigned char *)(DerivedStorage + 123) = *(unsigned char *)(a9 + 96);
      *(unsigned char *)(DerivedStorage + 24) = a6;
      *(void *)(DerivedStorage + 72) = *(void *)(a9 + 24);
      CFTypeRef v28 = *(CFTypeRef *)(a9 + 104);
      if (v28) {
        CFTypeRef v28 = CFRetain(v28);
      }
      *(void *)(DerivedStorage + 128) = v28;
      *(void *)(DerivedStorage + 136) = *(void *)(a9 + 112);
      *(void *)(DerivedStorage + 144) = *(void *)(a9 + 120);
      CFTypeRef v29 = *(CFTypeRef *)(a9 + 136);
      if (v29) {
        CFTypeRef v29 = CFRetain(v29);
      }
      *(void *)(DerivedStorage + 160) = v29;
      *(_OWORD *)(DerivedStorage + 168) = *(_OWORD *)(a9 + 144);
      *(_DWORD *)(DerivedStorage + 28) = a7;
      *(_DWORD *)(DerivedStorage + 32) = a8;
      CFTypeRef v30 = *(CFTypeRef *)(a9 + 160);
      if (v30) {
        CFTypeRef v30 = CFRetain(v30);
      }
      *(void *)(DerivedStorage + 184) = v30;
      CFTypeRef v31 = *(CFTypeRef *)(a9 + 168);
      if (v31) {
        CFTypeRef v31 = CFRetain(v31);
      }
      *(void *)(DerivedStorage + 192) = v31;
      CFTypeRef v32 = *(CFTypeRef *)(a9 + 176);
      if (v32) {
        CFTypeRef v32 = CFRetain(v32);
      }
      *(void *)(DerivedStorage + 200) = v32;
      CFTypeRef v33 = *(CFTypeRef *)(a9 + 184);
      if (v33) {
        CFTypeRef v33 = CFRetain(v33);
      }
      *(void *)(DerivedStorage + 208) = v33;
      uint64_t v34 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 480) = v34;
      if (v34)
      {
        *(void *)(DerivedStorage + 224) = 0xFFEFFFFFFFFFFFFFLL;
        *(_DWORD *)(DerivedStorage + 236) = a4;
        CFTypeRef v35 = a2;
        if (a2) {
          CFTypeRef v35 = CFRetain(a2);
        }
        *(void *)(DerivedStorage + 472) = v35;
        CFTypeRef v36 = *(CFTypeRef *)(a9 + 128);
        if (v36) {
          CFTypeRef v36 = CFRetain(v36);
        }
        uint64_t v16 = 0;
        *(void *)(DerivedStorage + 152) = v36;
        *a10 = 0;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAlternateCopy(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a3) {
      goto LABEL_3;
    }
LABEL_7:
    a3 = *(const void **)DerivedStorage;
    if (a4) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  a2 = *(const void **)(DerivedStorage + 472);
  if (!a3) {
    goto LABEL_7;
  }
LABEL_3:
  if (a4) {
    goto LABEL_4;
  }
LABEL_8:
  a4 = *(void *)(DerivedStorage + 40);
LABEL_4:
  uint64_t v26 = a11;
  if (a7)
  {
    char v52 = a8;
  }
  else
  {
    a7 = *(void *)(DerivedStorage + 88);
    char v52 = *(unsigned char *)(DerivedStorage + 120);
  }
  uint64_t v27 = a13;
  if (a11)
  {
    char v51 = a12;
  }
  else
  {
    uint64_t v26 = *(void *)(DerivedStorage + 112);
    char v51 = *(unsigned char *)(DerivedStorage + 123);
  }
  if (!a13) {
    uint64_t v27 = *(void *)(DerivedStorage + 160);
  }
  uint64_t v29 = a16;
  if (!a15) {
    a14 = *(_DWORD *)(DerivedStorage + 28);
  }
  uint64_t v30 = a17;
  if (!a16) {
    uint64_t v29 = *(void *)(DerivedStorage + 184);
  }
  uint64_t v31 = a18;
  if (!a17) {
    uint64_t v30 = *(void *)(DerivedStorage + 192);
  }
  int v53 = a14;
  uint64_t v32 = a19;
  if (!a18) {
    uint64_t v31 = *(void *)(DerivedStorage + 200);
  }
  CFTypeRef v33 = a2;
  CFNumberRef v54 = a3;
  if (!a19) {
    uint64_t v32 = *(void *)(DerivedStorage + 208);
  }
  uint64_t v34 = *(void *)(DerivedStorage + 48);
  uint64_t v35 = *(void *)(DerivedStorage + 56);
  uint64_t v36 = *(void *)(DerivedStorage + 80);
  char v37 = *(unsigned char *)(DerivedStorage + 121);
  uint64_t v38 = *(void *)(DerivedStorage + 96);
  uint64_t v39 = *(void *)(DerivedStorage + 104);
  char v40 = *(unsigned char *)(DerivedStorage + 122);
  uint64_t v41 = *(void *)(DerivedStorage + 72);
  uint64_t v42 = *(void *)(DerivedStorage + 128);
  uint64_t v43 = *(void *)(DerivedStorage + 144);
  uint64_t v44 = *(void *)(DerivedStorage + 152);
  uint64_t v45 = *MEMORY[0x1E4F1CF80];
  uint64_t v46 = *(void *)(DerivedStorage + 8);
  CFNumberRef v47 = *(const void **)(DerivedStorage + 16);
  char v48 = *(unsigned char *)(DerivedStorage + 24);
  int v49 = *(_DWORD *)(DerivedStorage + 32);
  v55[0] = a4;
  v55[1] = v34;
  v55[2] = v35;
  v55[3] = v41;
  v55[4] = v36;
  v55[5] = v38;
  char v56 = v37;
  uint64_t v57 = a7;
  char v58 = v52;
  char v61 = HIBYTE(a8);
  __int16 v60 = HIDWORD(a8) >> 8;
  int v59 = a8 >> 8;
  uint64_t v62 = v39;
  char v63 = v40;
  uint64_t v64 = v26;
  char v65 = v51;
  char v68 = HIBYTE(a12);
  __int16 v67 = HIDWORD(a12) >> 8;
  int v66 = a12 >> 8;
  uint64_t v69 = v42;
  uint64_t v70 = *(void *)(DerivedStorage + 136);
  uint64_t v71 = v43;
  uint64_t v72 = v44;
  uint64_t v73 = v27;
  long long v74 = *(_OWORD *)(DerivedStorage + 168);
  uint64_t v75 = v29;
  uint64_t v76 = v30;
  uint64_t v77 = v31;
  uint64_t v78 = v32;
  return FigAlternateCreate(v45, v33, v54, v46, v47, v48, v53, v49, (uint64_t)v55, a20);
}

__CFString *figAlternateCopyDesc(__CFString *cf)
{
  if (cf)
  {
    uint64_t v2 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 32);
    uint64_t v3 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
    uint64_t v4 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    double v6 = *(double *)(DerivedStorage + 168);
    double v7 = *(double *)(DerivedStorage + 176);
    int v8 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24);
    int IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)cf);
    uint64_t v10 = *(void *)(CMBaseObjectGetDerivedStorage() + 96);
    uint64_t v11 = *(void *)(CMBaseObjectGetDerivedStorage() + 88);
    uint64_t v28 = *(void *)(CMBaseObjectGetDerivedStorage() + 104);
    uint64_t v29 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v30 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v12 + 160)) {
      CFIndex v13 = *(__CFString **)(v12 + 160);
    }
    else {
      CFIndex v13 = @".";
    }
    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 140) == -1) {
      VideoRangeString = 0;
    }
    else {
      VideoRangeString = FigAlternateGetVideoRangeString(cf);
    }
    uint64_t v32 = v13;
    uint64_t v27 = VideoRangeString;
    int v16 = IsAudioOnly;
    if (*(int *)(CMBaseObjectGetDerivedStorage() + 136) < -1) {
      HDCPString = 0;
    }
    else {
      HDCPString = FigAlternateGetHDCPString((uint64_t)cf);
    }
    double v17 = *(double *)(CMBaseObjectGetDerivedStorage() + 56);
    CFStringRef v15 = *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 128);
    double v18 = *(double *)(CMBaseObjectGetDerivedStorage() + 72);
    VideoLayoutString = FigAlternateGetVideoLayoutString((uint64_t)cf);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    VideoLayoutString = 0;
    HDCPString = 0;
    uint64_t v27 = 0;
    uint64_t v32 = 0;
    CFStringRef v15 = 0;
    int v8 = 0;
    int v16 = 0;
    uint64_t v2 = 0;
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    double v6 = 0.0;
    double v7 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
  }
  CFAllocatorRef v19 = CFGetAllocator(cf);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v19, 0);
  double v21 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"<FigAlternate(%2d):[%p]", v2, cf);
    if ((int)v3 >= 1)
    {
      CFTypeRef v22 = "";
      if ((int)v4 > 0) {
        CFTypeRef v22 = "/Avg";
      }
      CFStringAppendFormat(v21, 0, @" [Peak%s %d", v22, v3);
      if ((int)v4 >= 1) {
        CFStringAppendFormat(v21, 0, @"/%d", v4);
      }
      CFStringAppendFormat(v21, 0, @"]");
    }
    if (v6 > 2.22044605e-16 || v7 > 2.22044605e-16) {
      CFStringAppendFormat(v21, 0, @" [%.0fx%.0f]", *(void *)&v6, *(void *)&v7);
    }
    if (v8) {
      CFStringAppendFormat(v21, 0, @" [I-FrameOnly]");
    }
    if (v16) {
      CFStringAppendFormat(v21, 0, @" [AudioOnly]");
    }
    if (v10) {
      CFStringAppendFormat(v21, 0, @" [VideoGroup %@]", v10);
    }
    if (v11) {
      CFStringAppendFormat(v21, 0, @" [AudioGroup %@]", v11);
    }
    if (v28) {
      CFStringAppendFormat(v21, 0, @" [SubtitleGroup %@]", v28);
    }
    if (v29) {
      CFStringAppendFormat(v21, 0, @" [%@]", v29);
    }
    if (v30) {
      CFStringAppendFormat(v21, 0, @" [%@]", v30);
    }
    if (v27) {
      CFStringAppendFormat(v21, 0, @" [VideoRange %@]", v27);
    }
    if (HDCPString) {
      CFStringAppendFormat(v21, 0, @" [HDCP %@]", HDCPString);
    }
    if (v17 > 2.22044605e-16) {
      CFStringAppendFormat(v21, 0, @" [FrameRate %.3f]", *(void *)&v17);
    }
    if (!FigCFEqual()) {
      CFStringAppendFormat(v21, 0, @" [Pathway %@]", v32);
    }
    if (v18 != -1.0) {
      CFStringAppendFormat(v21, 0, @" [Score %.3f]", *(void *)&v18);
    }
    if (VideoLayoutString) {
      CFStringAppendFormat(v21, 0, @" [Immersive %@]", VideoLayoutString);
    }
    if (v15)
    {
      CFIndex Length = CFStringGetLength(v15);
      CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v15);
      if (Length > CFStringGetLength(@"...") + 16)
      {
        v33.length = Length - 16;
        v33.CFIndex location = 9;
        CFStringReplace(MutableCopy, v33, @"...");
      }
      CFStringAppendFormat(v21, 0, @" [StableID %@]", MutableCopy);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
    CFStringAppendFormat(v21, 0, @">");
  }
  return v21;
}

uint64_t FigAlternatesCarryRankingScore(const __CFArray *a1)
{
  if (!a1) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 1;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  while (1)
  {
    uint64_t result = (uint64_t)CFArrayGetValueAtIndex(a1, v4);
    if (!result) {
      break;
    }
    if (*(double *)(CMBaseObjectGetDerivedStorage() + 72) == -1.0) {
      return 0;
    }
    if (v3 == ++v4) {
      return 1;
    }
  }
  return result;
}

CFMutableDictionaryRef FigAlternateCopyAsSerializedRepresentation(__CFArray *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 480));
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt64();
  FigCFDictionarySetInt64();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  FigCFDictionarySetBoolean();
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 168));
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt64();
  FigCFDictionarySetDouble();
  FigCFDictionarySetDouble();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (!Mutable
    || (VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1)) == 0
    || (CFArrayRef v9 = VideoLayoutTags, CFArrayGetCount(VideoLayoutTags) < 1))
  {
LABEL_12:
    if (!a2) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef v11 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
  if (v11)
  {
    uint64_t v12 = v11;
    if (CFArrayGetCount(v9) < 1)
    {
LABEL_10:
      FigCFDictionarySetValue();
    }
    else
    {
      uint64_t v13 = 0;
      while (1)
      {
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        uint64_t v15 = FigGetAllocatorForMedia();
        int v16 = (const void *)MEMORY[0x19970EA60](ValueAtIndex, v15);
        if (!v16) {
          break;
        }
        double v17 = v16;
        CFArrayAppendValue(v12, v16);
        CFRelease(v17);
        if (++v13 >= CFArrayGetCount(v9)) {
          goto LABEL_10;
        }
      }
      FigSignalErrorAt();
    }
    CFRelease(v12);
    goto LABEL_12;
  }
  FigSignalErrorAt();
  if (a2)
  {
LABEL_13:
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
LABEL_14:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 480));
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  return Mutable;
}

uint64_t FigAlternateCopyAsXPCObject(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (!v4)
    {
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_18;
    }
    uint64_t v5 = v4;
    xpc_dictionary_set_double(v4, "AltRankingScore", *(double *)(DerivedStorage + 72));
    xpc_dictionary_set_double(v5, "AltMaxFrameRate", *(double *)(DerivedStorage + 64));
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 168));
    FigXPCMessageSetCFDictionary();
    xpc_dictionary_set_int64(v5, "AltHDCP", *(int *)(DerivedStorage + 136));
    xpc_dictionary_set_int64(v5, "AltVideoRange", *(int *)(DerivedStorage + 140));
    xpc_dictionary_set_uint64(v5, "AltAllowedCPC", *(void *)(DerivedStorage + 144));
    xpc_dictionary_set_int64(v5, "AltAlternateIndex", *(int *)(DerivedStorage + 28));
    xpc_dictionary_set_int64(v5, "AltZeroIndexedAlternateIndex", *(int *)(DerivedStorage + 32));
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    xpc_dictionary_set_int64(v5, "AlternateDeclaredPeakBitRate", *(void *)(DerivedStorage + 8));
    xpc_dictionary_set_int64(v5, "AltAverageBitRate", *(void *)(DerivedStorage + 48));
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    xpc_dictionary_set_BOOL(v5, "AltAudioGroupIsSynthesized", *(unsigned char *)(DerivedStorage + 120) != 0);
    xpc_dictionary_set_BOOL(v5, "AltVideoGroupIsSynthesized", *(unsigned char *)(DerivedStorage + 121) != 0);
    xpc_dictionary_set_BOOL(v5, "AltSubtitlesGroupIsSynthesized", *(unsigned char *)(DerivedStorage + 122) != 0);
    xpc_dictionary_set_BOOL(v5, "AltClosedCaptionGroupIsSynthesized", *(unsigned char *)(DerivedStorage + 123) != 0);
    xpc_dictionary_set_BOOL(v5, "AltIFrameOnly", *(unsigned char *)(DerivedStorage + 24) != 0);
    FigXPCMessageSetCFObject();
    FigXPCMessageSetCFObject();
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v8 = *(const __CFArray **)(v7 + 152);
    if (!v8 || CFArrayGetCount(*(CFArrayRef *)(v7 + 152)) < 1) {
      goto LABEL_15;
    }
    xpc_object_t empty = xpc_array_create_empty();
    if (empty)
    {
      if (CFArrayGetCount(v8) < 1)
      {
        FigXPCRelease();
LABEL_13:
        xpc_dictionary_set_value(v5, "AltVideoLayoutTags", empty);
LABEL_14:
        FigXPCRelease();
LABEL_15:
        *a2 = v5;
        if (DictionaryRepresentation) {
          CFRelease(DictionaryRepresentation);
        }
        goto LABEL_17;
      }
      CFIndex v10 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v8, v10);
        CFMutableArrayRef v11 = (void *)FigTagCollectionCopyAsXPCDictionary();
        if (!v11) {
          break;
        }
        uint64_t v12 = v11;
        xpc_array_append_value(empty, v11);
        xpc_release(v12);
        if (++v10 >= CFArrayGetCount(v8)) {
          goto LABEL_10;
        }
      }
    }
    FigSignalErrorAt();
LABEL_10:
    FigXPCRelease();
    if (!empty) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v13 = 0;
LABEL_18:
  FigXPCRelease();
  return v13;
}

uint64_t FigAlternateCopyAsXPCObjectWithContext(uint64_t a1, CFMutableDictionaryRef *a2, void *a3)
{
  uint64_t v13 = 0;
  uint64_t v6 = FigAlternateCopyAsXPCObject(a1, &v13);
  if (!v6)
  {
    if (a1)
    {
      CFDictionaryRef v7 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 184);
      CFArrayRef v8 = v13;
      if (v7) {
        fa_serializeMediaGroupLocatorMapToXPCDict(v7, v13, a2, "AltAudioGroupLocatorMap", (uint64_t)"AltAudioGroupID", @"FASP_AudioGroups");
      }
      CFDictionaryRef v9 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 192);
      if (v9) {
        fa_serializeMediaGroupLocatorMapToXPCDict(v9, v8, a2, "AltVideoGroupLocatorMap", (uint64_t)"AltVideoGroupID", @"FASP_VideoGroups");
      }
      CFDictionaryRef v10 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 200);
      if (v10) {
        fa_serializeMediaGroupLocatorMapToXPCDict(v10, v8, a2, "AltSubtitleGroupLocatorMap", (uint64_t)"AltSubtitleGroupID", @"FASP_SubtitleGroups");
      }
      CFDictionaryRef v11 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 208);
      if (v11) {
        fa_serializeMediaGroupLocatorMapToXPCDict(v11, v8, a2, "AltClosedCaptionGroupLocatorMap", (uint64_t)"AltClosedCaptionGroupID", @"FASP_ClosedCaptionGroups");
      }
    }
    else
    {
      CFArrayRef v8 = v13;
    }
    *a3 = v8;
  }
  FigXPCRelease();
  return v6;
}

void fa_serializeMediaGroupLocatorMapToXPCDict(const __CFDictionary *a1, void *a2, CFMutableDictionaryRef *a3, const char *a4, uint64_t a5, void *a6)
{
  CFDictionaryRef theDict = 0;
  if (CFDictionaryGetCount(a1) < 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (fa_ensureSerializationContextAndCopyMediaGroupForCache(a3, a6, &theDict))
    {
      uint64_t v12 = 0;
      uint64_t v14 = theDict;
    }
    else
    {
      CFIndex Count = CFDictionaryGetCount(a1);
      uint64_t v12 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
      CFDictionaryGetKeysAndValues(a1, 0, v12);
      CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)*v12, @"FBPAEGLMK_GroupID");
      uint64_t v14 = theDict;
      if (Value)
      {
        uint64_t v15 = Value;
        if (!theDict || !CFDictionaryContainsKey(theDict, Value))
        {
          int v16 = (void *)FigStreamPlaylistParserCopySerializedRepresentationForMediaGroupAsXPCObject((uint64_t)v15, a1);
          if (v16) {
            xpc_dictionary_set_value(a2, a4, v16);
          }
          if (v14) {
            CFDictionarySetValue(v14, v15, (const void *)*MEMORY[0x1E4F1D260]);
          }
        }
        FigXPCMessageSetCFString();
      }
    }
    if (v14) {
      CFRelease(v14);
    }
  }
  FigXPCRelease();

  free(v12);
}

uint64_t FigAlternateCopyArrayOfAlternatesAsXPCObject(const __CFArray *a1, void *a2)
{
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  xpc_object_t empty = xpc_array_create_empty();
  if (empty)
  {
    if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        uint64_t v9 = FigAlternateCopyAsXPCObjectWithContext((uint64_t)ValueAtIndex, (CFMutableDictionaryRef *)&cf, &value);
        if (v9) {
          break;
        }
        xpc_object_t v10 = value;
        xpc_array_append_value(empty, value);
        if (v10)
        {
          xpc_object_t value = 0;
          xpc_release(v10);
        }
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v9;
    }
    else
    {
LABEL_9:
      uint64_t v11 = 0;
      *a2 = empty;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v11;
}

uint64_t FigAlternateCreateWithXPCObject(void *a1, CFMutableDictionaryRef *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v21 = 0;
  if (a1)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (sRegisterFigAlternateClassIDOnce != -1) {
      dispatch_once_f(&sRegisterFigAlternateClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateType);
    }
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltAudioGroupLocatorMap", (int)"AltAudioGroupID", &cf, @"FASP_AudioGroups");
      if (!v7)
      {
        CFTypeRef v9 = cf;
        if (cf)
        {
          *(void *)(DerivedStorage + 184) = CFRetain(cf);
          CFRelease(v9);
          CFTypeRef cf = 0;
        }
        uint64_t v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltVideoGroupLocatorMap", (int)"AltVideoGroupID", &cf, @"FASP_VideoGroups");
        if (!v7)
        {
          CFTypeRef v10 = cf;
          if (cf)
          {
            *(void *)(DerivedStorage + 192) = CFRetain(cf);
            CFRelease(v10);
            CFTypeRef cf = 0;
          }
          uint64_t v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltSubtitleGroupLocatorMap", (int)"AltSubtitleGroupID", &cf, @"FASP_SubtitleGroups");
          if (!v7)
          {
            CFTypeRef v11 = cf;
            if (cf)
            {
              *(void *)(DerivedStorage + 200) = CFRetain(cf);
              CFRelease(v11);
              CFTypeRef cf = 0;
            }
            uint64_t v7 = fa_deserializeAndCopyMediaGroupLocatorMap(a1, a2, "AltClosedCaptionGroupLocatorMap", (int)"AltClosedCaptionGroupID", &cf, @"FASP_ClosedCaptionGroups");
            if (!v7)
            {
              CFTypeRef v12 = cf;
              if (cf)
              {
                *(void *)(DerivedStorage + 208) = CFRetain(cf);
                CFRelease(v12);
              }
              uint64_t v7 = FigXPCMessageCopyCFURL();
              if (!v7)
              {
                uint64_t v7 = FigXPCMessageCopyCFURL();
                if (!v7)
                {
                  uint64_t v7 = FigXPCMessageCopyCFString();
                  if (!v7)
                  {
                    uint64_t v7 = FigXPCMessageCopyCFString();
                    if (!v7)
                    {
                      uint64_t v7 = FigXPCMessageCopyCFString();
                      if (!v7)
                      {
                        uint64_t v7 = FigXPCMessageCopyCFString();
                        if (!v7)
                        {
                          uint64_t v7 = FigXPCMessageCopyCFString();
                          if (!v7)
                          {
                            uint64_t v7 = FigXPCMessageCopyCFString();
                            if (!v7)
                            {
                              uint64_t v7 = FigXPCMessageCopyCFString();
                              if (!v7)
                              {
                                uint64_t v7 = FigXPCMessageCopyCFString();
                                if (!v7)
                                {
                                  *(void *)(DerivedStorage + 8) = xpc_dictionary_get_int64(a1, "AlternateDeclaredPeakBitRate");
                                  *(void *)(DerivedStorage + 48) = xpc_dictionary_get_int64(a1, "AltAverageBitRate");
                                  *(unsigned char *)(DerivedStorage + 120) = xpc_dictionary_get_BOOL(a1, "AltAudioGroupIsSynthesized");
                                  *(unsigned char *)(DerivedStorage + 121) = xpc_dictionary_get_BOOL(a1, "AltVideoGroupIsSynthesized");
                                  *(unsigned char *)(DerivedStorage + 122) = xpc_dictionary_get_BOOL(a1, "AltSubtitlesGroupIsSynthesized");
                                  *(unsigned char *)(DerivedStorage + 123) = xpc_dictionary_get_BOOL(a1, "AltClosedCaptionGroupIsSynthesized");
                                  *(unsigned char *)(DerivedStorage + 24) = xpc_dictionary_get_BOOL(a1, "AltIFrameOnly");
                                  *(double *)(DerivedStorage + 56) = xpc_dictionary_get_double(a1, "AltMaxFrameRate");
                                  *(_DWORD *)(DerivedStorage + 136) = xpc_dictionary_get_int64(a1, "AltHDCP");
                                  *(_DWORD *)(DerivedStorage + 140) = xpc_dictionary_get_int64(a1, "AltVideoRange");
                                  *(double *)(DerivedStorage + 72) = xpc_dictionary_get_double(a1, "AltRankingScore");
                                  *(void *)(DerivedStorage + 144) = xpc_dictionary_get_uint64(a1, "AltAllowedCPC");
                                  *(_DWORD *)(DerivedStorage + 28) = xpc_dictionary_get_int64(a1, "AltAlternateIndex");
                                  *(_DWORD *)(DerivedStorage + 32) = xpc_dictionary_get_int64(a1, "AltZeroIndexedAlternateIndex");
                                  FigXPCMessageCopyCFDictionary();
                                  CGSizeMakeWithDictionaryRepresentation(0, (CGSize *)(DerivedStorage + 168));
                                  xpc_object_t v13 = xpc_dictionary_get_value(a1, "AltVideoLayoutTags");
                                  if (FigXPCArrayGetCount())
                                  {
                                    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
                                    xpc_object_t value = 0;
                                    if (Mutable)
                                    {
                                      if (xpc_array_get_count(v13))
                                      {
                                        size_t v15 = 0;
                                        while (1)
                                        {
                                          xpc_array_get_value(v13, v15);
                                          if (FigTagCollectionCreateFromXPCDictionary()) {
                                            break;
                                          }
                                          CFArrayAppendValue(Mutable, value);
                                          if (value)
                                          {
                                            CFRelease(value);
                                            xpc_object_t value = 0;
                                          }
                                          if (++v15 >= xpc_array_get_count(v13))
                                          {
                                            int v16 = 0;
                                            goto LABEL_36;
                                          }
                                        }
                                        int v16 = Mutable;
                                        CFMutableDictionaryRef Mutable = 0;
LABEL_36:
                                        if (value) {
                                          CFRelease(value);
                                        }
                                        if (v16) {
                                          CFRelease(v16);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      FigSignalErrorAt();
                                    }
                                  }
                                  else
                                  {
                                    CFMutableDictionaryRef Mutable = 0;
                                  }
                                  *(void *)(DerivedStorage + 152) = Mutable;
                                  uint64_t v17 = FigSimpleMutexCreate();
                                  *(void *)(DerivedStorage + 480) = v17;
                                  if (v17)
                                  {
                                    uint64_t v18 = 0;
                                    *(void *)(DerivedStorage + 224) = 0xFFEFFFFFFFFFFFFFLL;
                                    *(_DWORD *)(DerivedStorage + 236) = *(void *)(DerivedStorage + 8);
                                    *a3 = v21;
                                    CFTypeRef v21 = 0;
                                    goto LABEL_43;
                                  }
                                  uint64_t v7 = FigSignalErrorAt();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v18 = v7;
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_43:
  if (v21) {
    CFRelease(v21);
  }
  return v18;
}

uint64_t fa_deserializeAndCopyMediaGroupLocatorMap(void *a1, CFMutableDictionaryRef *a2, const char *a3, int a4, void *a5, void *key)
{
  xpc_object_t value = 0;
  keya = 0;
  CFDictionaryRef theDict = 0;
  uint64_t v9 = fa_ensureSerializationContextAndCopyMediaGroupForCache(a2, key, &theDict);
  if (v9)
  {
    uint64_t v15 = v9;
    CFDictionaryRef v10 = theDict;
  }
  else
  {
    FigXPCMessageCopyCFString();
    CFDictionaryRef v10 = theDict;
    if (keya)
    {
      if (theDict && CFDictionaryContainsKey(theDict, keya))
      {
        CFTypeRef v11 = (void *)CFDictionaryGetValue(v10, keya);
        CFTypeRef v12 = v11;
        if (v11) {
          CFRetain(v11);
        }
        goto LABEL_12;
      }
      xpc_object_t v13 = xpc_dictionary_get_value(a1, a3);
      if (!v13)
      {
        CFTypeRef v12 = 0;
LABEL_12:
        uint64_t v15 = 0;
        *a5 = v12;
        xpc_object_t value = 0;
        goto LABEL_13;
      }
      uint64_t MediaGroupFromXPCDictionary = FigStreamPlaylistParserCreateMediaGroupFromXPCDictionary((uint64_t)v13, 0, (__CFDictionary **)&value);
      if (!MediaGroupFromXPCDictionary)
      {
        CFTypeRef v12 = value;
        if (v10)
        {
          CFDictionarySetValue(v10, keya, value);
          CFTypeRef v12 = value;
        }
        goto LABEL_12;
      }
      uint64_t v15 = MediaGroupFromXPCDictionary;
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
LABEL_13:
  if (v10) {
    CFRelease(v10);
  }
  if (value) {
    CFRelease(value);
  }
  if (keya) {
    CFRelease(keya);
  }
  return v15;
}

uint64_t FigAlternateCreateArrayOfAlternatesFromXPCObject(void *a1, __CFArray **a2)
{
  CFTypeRef cf = 0;
  xpc_object_t value = 0;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    int64_t count = xpc_array_get_count(a1);
    if (count < 1)
    {
LABEL_8:
      uint64_t v11 = 0;
      *a2 = Mutable;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_9;
    }
    int64_t v6 = count;
    size_t v7 = 0;
    while (1)
    {
      xpc_object_t v8 = xpc_array_get_value(a1, v7);
      uint64_t v9 = FigAlternateCreateWithXPCObject(v8, (CFMutableDictionaryRef *)&cf, (CFTypeRef *)&value);
      if (v9) {
        break;
      }
      CFDictionaryRef v10 = value;
      CFArrayAppendValue(Mutable, value);
      if (v10)
      {
        CFRelease(v10);
        xpc_object_t value = 0;
      }
      if (v6 == ++v7) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  uint64_t v11 = v9;
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v11;
}

uint64_t fa_CodecStringFindCodecAndProfile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"%@.%02d", a2, a3);
  uint64_t v6 = FigCFStringFind();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

uint64_t figAlternateEqual(uint64_t a1, uint64_t a2)
{
  uint64_t result = (a1 | a2) == 0;
  if (a1 && a2)
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 128) && *(void *)(CMBaseObjectGetDerivedStorage() + 128))
    {
      CMBaseObjectGetDerivedStorage();
      CMBaseObjectGetDerivedStorage();
      uint64_t result = FigCFEqual();
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v5 = *(const void **)(CMBaseObjectGetDerivedStorage() + 40);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t result = FigCFHTTPCompareURLs(v5, *(CFTypeRef *)(DerivedStorage + 40));
      if (!result) {
        return result;
      }
    }
    int v7 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8);
    if (v7 != *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8)) {
      return 0;
    }
    int v8 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48);
    if (v8 != *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48)) {
      return 0;
    }
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    double v11 = *(double *)(v9 + 168);
    double v10 = *(double *)(v9 + 176);
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    uint64_t result = 0;
    if (v11 != *(double *)(v12 + 168) || v10 != *(double *)(v12 + 176)) {
      return result;
    }
    double v13 = *(double *)(CMBaseObjectGetDerivedStorage() + 72);
    if (v13 != *(double *)(CMBaseObjectGetDerivedStorage() + 72)) {
      return 0;
    }
    int v14 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24);
    if (v14 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 24)) {
      return 0;
    }
    uint64_t v15 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
    if (v15 != *(void *)(CMBaseObjectGetDerivedStorage() + 144)) {
      return 0;
    }
    int v16 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 120);
    if (v16 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 120)) {
      return 0;
    }
    int v17 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 121);
    if (v17 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 121)) {
      return 0;
    }
    int v18 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 122);
    if (v18 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 122)) {
      return 0;
    }
    int v19 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 123);
    if (v19 != *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 123)) {
      return 0;
    }
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    double v20 = *(double *)(CMBaseObjectGetDerivedStorage() + 56);
    if (v20 != *(double *)(CMBaseObjectGetDerivedStorage() + 56)) {
      return 0;
    }
    int VideoRange = FigAlternateGetVideoRange(a1);
    if (VideoRange != FigAlternateGetVideoRange(a2)) {
      return 0;
    }
    int v22 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 136);
    if (v22 != *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 136)) {
      return 0;
    }
    FigAlternateGetVideoLayoutTags((__CFArray *)a1);
    FigAlternateGetVideoLayoutTags((__CFArray *)a2);
    uint64_t result = FigCFEqual();
    if (result)
    {
      CMBaseObjectGetDerivedStorage();
      CMBaseObjectGetDerivedStorage();
      uint64_t result = FigCFEqual();
      if (result)
      {
        CMBaseObjectGetDerivedStorage();
        CMBaseObjectGetDerivedStorage();
        uint64_t result = FigCFEqual();
        if (result)
        {
          CMBaseObjectGetDerivedStorage();
          CMBaseObjectGetDerivedStorage();
          uint64_t result = FigCFEqual();
          if (result)
          {
            CMBaseObjectGetDerivedStorage();
            CMBaseObjectGetDerivedStorage();
            return FigCFEqual() != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t figAlternateFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFIndex v3 = *(const void **)(DerivedStorage + 80);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 80) = 0;
  }
  xpc_object_t v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 96);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 104) = 0;
  }
  int v7 = *(const void **)(DerivedStorage + 112);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 112) = 0;
  }
  int v8 = *(const void **)(DerivedStorage + 128);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 128) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 160);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 160) = 0;
  }
  double v10 = *(const void **)(DerivedStorage + 184);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 184) = 0;
  }
  double v11 = *(const void **)(DerivedStorage + 192);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 192) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 200);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 200) = 0;
  }
  double v13 = *(const void **)(DerivedStorage + 208);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 208) = 0;
  }
  int v14 = *(const void **)(DerivedStorage + 464);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 464) = 0;
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 384);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 384) = 0;
  }
  int v16 = *(const void **)(DerivedStorage + 400);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 400) = 0;
  }
  int v17 = *(const void **)(DerivedStorage + 472);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 472) = 0;
  }
  int v18 = *(const void **)(DerivedStorage + 152);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 152) = 0;
  }
  int v19 = *(const void **)(DerivedStorage + 432);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 432) = 0;
  }
  double v20 = *(const void **)(DerivedStorage + 448);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 448) = 0;
  }

  return FigSimpleMutexDestroy();
}

uint64_t fa_ensureSerializationContextAndCopyMediaGroupForCache(CFMutableDictionaryRef *a1, void *key, CFMutableDictionaryRef *a3)
{
  if (!a1)
  {
    CFMutableDictionaryRef v8 = 0;
    goto LABEL_9;
  }
  CFDictionaryRef v6 = *a1;
  if (v6
    || (CFDictionaryRef v6 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*a1 = v6) != 0))
  {
    CFDataRef Value = (__CFDictionary *)CFDictionaryGetValue(v6, key);
    if (Value)
    {
      CFMutableDictionaryRef v8 = Value;
      CFRetain(Value);
LABEL_9:
      *a3 = v8;
      return 0;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v8 = Mutable;
      CFDictionarySetValue(*a1, key, Mutable);
      goto LABEL_9;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryGetClassID()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce != -1) {
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce, &__block_literal_global_14);
  }
  return sGlobalRoutingRegistryClassID;
}

uint64_t __FigBufferedAirPlayGlobalRoutingRegistryGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryGetTypeID()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce != -1) {
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryGetClassID_sGlobalRoutingRegistryOnce, &__block_literal_global_14);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_onceToken != -1) {
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_onceToken, &__block_literal_global_7);
  }
  return FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_sGlobalRoutingRegistry;
}

uint64_t __FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_block_invoke()
{
  if (FigServer_IsMediaplaybackd()) {
    uint64_t result = FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared();
  }
  else {
    uint64_t result = FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared();
  }
  FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance_sGlobalRoutingRegistry = result;
  return result;
}

CFStringRef FigBufferedAirPlayGlobalRoutingRegistryCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigBufferedAirPlayGlobalRoutingRegistry %p]", a1);
}

uint64_t FigVTTSerializerGetClassID()
{
  return sFigVTTSerializerClassID;
}

uint64_t figVTTSerializer_RegisterFigVTTSerializerBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVTTSerializerGetTypeID()
{
  MEMORY[0x19970EE10](&FigVTTSerializerGetClassID_sRegisterFigVTTSerializerBaseTypeOnce, figVTTSerializer_RegisterFigVTTSerializerBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTSerializerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFMutableDictionaryRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVTTSerializerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  double v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigVTTSerializerInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1);
}

uint64_t FigVTTSerializerAddText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigVTTSerializerFlush(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

CFStringRef figVTTSerializer_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVTTSerializer %p]", a1);
}

void figPlaybackBoss_durationChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v10 = *MEMORY[0x1E4F1F9F8];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 140) = 1;
    MEMORY[0x19970E910](*(void *)(a2 + 576));
    if (!*(unsigned char *)(a2 + 128) && *(_DWORD *)(a2 + 424) == 1886151033)
    {
      uint64_t v3 = *(OpaqueCMTimebase **)(a2 + 112);
      if (v3) {
        float EffectiveRate = CMTimebaseGetEffectiveRate(v3);
      }
      else {
        float EffectiveRate = 1.0;
      }
      bossScheduleReachedEndCallbackForRate(a2, EffectiveRate);
    }
    MEMORY[0x19970E930](*(void *)(a2 + 576));
    bossGetContentDuration(a2, (uint64_t)&v10);
    MEMORY[0x19970E910](*(void *)(a2 + 64));
    if (*(unsigned char *)(a2 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(a2 + 80) >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 72), v6);
        uint64_t v8 = ValueAtIndex[20];
        if (v8 && *((unsigned char *)ValueAtIndex + 168))
        {
          long long v12 = v10;
          uint64_t v13 = v11;
          if (FigSnippetEditCursorServiceSetTrackDuration(v8, (uint64_t)&v12))
          {
            uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        ++v6;
      }
      while (v6 < *(void *)(a2 + 80));
    }
    MEMORY[0x19970E930](*(void *)(a2 + 64));
  }
}

void figPlaybackBoss_formatReaderPropertyChanged(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16)) {
    *(unsigned char *)(a2 + 140) = 1;
  }
}

uint64_t bossSetCursorServiceInTrackList(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(a1, v6);
    uint64_t v8 = ValueAtIndex;
    if (a2)
    {
      uint64_t v9 = ValueAtIndex + 48;
      if (*(void *)(a2 + 8 * v6)) {
        FigCFDictionaryGetBooleanIfPresent();
      }
    }
    else
    {
      uint64_t v9 = ValueAtIndex + 48;
    }
    uint64_t v10 = *((void *)v8 + 4);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(uint64_t (**)(uint64_t, char *))(v12 + 32);
    if (!v13) {
      break;
    }
    uint64_t result = v13(v10, v9);
    if (result) {
      return result;
    }
    v8[396] = 0;
    if (v5 == ++v6) {
      return 0;
    }
  }
  return 4294954514;
}

_DWORD *bossElectNewTimebaseStarter(_DWORD *result)
{
  if ((*((void *)result + 12) & 0x8000000000000000) != 0)
  {
    uint64_t v1 = result;
    uint64_t v2 = *MEMORY[0x1E4F1CFD0];
    char v3 = 1;
    do
    {
      while (1)
      {
        char v4 = v3;
        if (*((uint64_t *)v1 + 10) >= 1) {
          break;
        }
        char v3 = 0;
        if ((v4 & 1) == 0) {
          return result;
        }
      }
      CFIndex v5 = 0;
      while (1)
      {
        uint64_t result = CFArrayGetValueAtIndex(*((CFArrayRef *)v1 + 9), v5);
        CFIndex v6 = result;
        if ((v4 & 1) == 0 || result[18] == 1936684398)
        {
          uint64_t VTable = CMBaseObjectGetVTable();
          uint64_t v9 = *(void *)(VTable + 16);
          uint64_t result = (_DWORD *)(VTable + 16);
          uint64_t v8 = v9;
          uint64_t v10 = v9 ? v8 : 0;
          if (*(void *)(v10 + 8))
          {
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)v6 + 10));
            uint64_t v12 = CMBaseObjectGetVTable();
            uint64_t v14 = *(void *)(v12 + 8);
            uint64_t result = (_DWORD *)(v12 + 8);
            uint64_t v13 = v14;
            uint64_t v15 = v14 ? v13 : 0;
            int v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v15 + 56);
            if (v16)
            {
              uint64_t result = (_DWORD *)v16(FigBaseObject, @"IsTimebaseStarter", v2);
              if (!result) {
                break;
              }
            }
          }
        }
        if (++v5 >= *((void *)v1 + 10))
        {
          CFIndex v5 = *((void *)v1 + 12);
          goto LABEL_18;
        }
      }
      *((void *)v1 + 12) = v5;
LABEL_18:
      char v3 = 0;
    }
    while (((v5 < 0) & v4) != 0);
  }
  return result;
}

void bossElectNewPreferredClock(uint64_t a1)
{
  CMClockRef newSourceClock = 0;
  if (*(uint64_t *)(a1 + 88) <= -2)
  {
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    char v3 = 1;
    while (1)
    {
      char v4 = v3;
      if (*(uint64_t *)(a1 + 80) >= 1)
      {
        CFIndex v5 = 0;
        do
        {
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5);
          if ((v4 & 1) == 0 || *((_DWORD *)ValueAtIndex + 18) == 1936684398)
          {
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
            uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v9 = v8 ? v8 : 0;
            uint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMClockRef *))(v9 + 48);
            if (v10)
            {
              int v11 = v10(FigBaseObject, @"PreferredClock", v2, &newSourceClock);
              uint64_t v12 = newSourceClock;
              if (!v11 && newSourceClock != 0)
              {
                *(void *)(a1 + 88) = v5;
                goto LABEL_20;
              }
            }
          }
          ++v5;
        }
        while (v5 < *(void *)(a1 + 80));
        uint64_t v12 = newSourceClock;
        if (newSourceClock) {
          break;
        }
      }
      char v3 = 0;
      if ((v4 & 1) == 0)
      {
        CMClockRef newSourceClock = CMClockGetHostTimeClock();
        CFRetain(newSourceClock);
        *(void *)(a1 + 88) = -2;
        uint64_t v12 = newSourceClock;
        break;
      }
    }
LABEL_20:
    CMTimebaseSetSourceClock(*(CMTimebaseRef *)(a1 + 112), v12);
    CFRelease(newSourceClock);
  }
}

uint64_t bossGetVideoDecoderMaxSpeedThreshold(uint64_t a1, float *a2)
{
  if (*(uint64_t *)(a1 + 80) < 1) {
    return 0;
  }
  int v4 = 0;
  CFIndex v5 = 0;
  float v6 = 3.4028e38;
  do
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5);
    float v10 = 3.4028e38;
    if (*((_DWORD *)ValueAtIndex + 18) == 1986618469
      && !FigGetEstimatedMaxFullFramePlaybackSpeedForTrackReader(*((void *)ValueAtIndex + 4), &v10))
    {
      if (v6 >= v10) {
        float v8 = v10;
      }
      else {
        float v8 = v6;
      }
      if (v4) {
        float v6 = v8;
      }
      else {
        float v6 = v10;
      }
      int v4 = 1;
    }
    ++v5;
  }
  while (v5 < *(void *)(a1 + 80));
  uint64_t result = 0;
  if (v4)
  {
    if (v6 > 2.0)
    {
      *a2 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t bossBuildMentorForTrack(uint64_t a1, uint64_t a2, const __CFAllocator *a3, const __CFDictionary *a4)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a2 + 344) = 0;
  uint64_t v8 = a2 + 348;
  CMTimeMake((CMTime *)time, 1, 10);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)time;
  *(void *)(v8 + 16) = *(void *)&time[16];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(a2 + 256) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  float v10 = (CMTime *)MEMORY[0x1E4F1F9F8];
  uint64_t v161 = a1;
  if (!a4)
  {
    int v19 = (const void *)*MEMORY[0x1E4F1CFD0];
    goto LABEL_37;
  }
  CMTime v185 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  LODWORD(v168.CFDictionarySetValue(theDict, key, value) = 0;
  CFDataRef Value = CFDictionaryGetValue(a4, @"gdrCount");
  if (Value)
  {
    uint64_t v12 = Value;
    CFTypeID v13 = CFGetTypeID(Value);
    if (v13 == CFNumberGetTypeID()) {
      *(void *)(a2 + 216) = CFRetain(v12);
    }
  }
  uint64_t v14 = CFDictionaryGetValue(a4, @"BossTrack_BonusAudioPrimingPacketCountAtStart");
  if (v14)
  {
    uint64_t v15 = v14;
    CFTypeID v16 = CFGetTypeID(v14);
    if (v16 == CFNumberGetTypeID()) {
      *(void *)(a2 + 224) = CFRetain(v15);
    }
  }
  int v17 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v17 == CFDictionaryGetValue(a4, @"BossTrack_TrimSampleBufferDurations")) {
    *(unsigned char *)(a2 + 248) = 1;
  }
  int v18 = CFDictionaryGetValue(a4, @"BossTrack_SampleBufferCryptor");
  if (v18) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 256), @"SampleBufferCryptor", v18);
  }
  if (FigCFDictionaryGetCMTimeIfPresent() && (v185.flags & 0x1D) == 1) {
    *(CMTime *)(a2 + 264) = v185;
  }
  *(_DWORD *)(a2 + 288) = 1065353216;
  FigCFDictionaryGetFloat32IfPresent();
  if (FigCFDictionaryGetCMTimeIfPresent() && (v185.flags & 0x1D) == 1) {
    *(CMTime *)(a2 + 292) = v185;
  }
  if (FigCFDictionaryGetCMTimeIfPresent() && (v185.flags & 0x1D) == 1) {
    *(CMTime *)(a2 + 316) = v185;
  }
  int v19 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v19 == CFDictionaryGetValue(a4, @"BossTrack_SendSampleReferenceSampleBuffers")) {
    *(unsigned char *)(a2 + 340) = 1;
  }
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (FigCFDictionaryGetInt32IfPresent()) {
    FigCFDictionarySetInt32();
  }
  double v20 = CFDictionaryGetValue(a4, @"BossTrack_OptimizeSampleCursorIPCForPower");
  if (v19 == CFDictionaryGetValue(a4, @"BossTrack_RoundUpStartPTS")) {
    *(unsigned char *)(a2 + 399) = 1;
  }
  if (v17 == CFDictionaryGetValue(a4, @"BossTrack_EnableForStepping")) {
    *(unsigned char *)(a2 + 89) = 0;
  }
  *(_OWORD *)CMTime time = *MEMORY[0x1E4F1FA48];
  uint64_t v21 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&time[24] = *(_OWORD *)time;
  *(void *)&time[16] = v21;
  *(void *)&time[40] = v21;
  *(_OWORD *)&time[48] = *(_OWORD *)time;
  *(_OWORD *)&v173[8] = *(_OWORD *)time;
  *(void *)v173 = v21;
  *(void *)&v173[24] = v21;
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (!FigCFDictionaryGetCMTimeIfPresent())
  {
    *(_OWORD *)&time[48] = *(_OWORD *)time;
    *(void *)v173 = *(void *)&time[16];
  }
  if (!FigCFDictionaryGetCMTimeIfPresent())
  {
    *(_OWORD *)&v173[8] = *(_OWORD *)&time[24];
    *(void *)&v173[24] = *(void *)&time[40];
  }
  *(void *)(a2 + 420) = *(void *)&time[16];
  *(_OWORD *)(a2 + 428) = *(_OWORD *)&time[24];
  *(void *)(a2 + 444) = *(void *)&time[40];
  *(_OWORD *)(a2 + 452) = *(_OWORD *)&time[48];
  *(_OWORD *)(a2 + 476) = *(_OWORD *)&v173[8];
  long long v22 = *(_OWORD *)&time[16];
  *(_OWORD *)&v184[1].int32_t timescale = *(_OWORD *)&time[32];
  *(_OWORD *)&v184[2].xpc_object_t value = *(_OWORD *)&time[48];
  *(_OWORD *)&v184[2].CMTimeEpoch epoch = *(_OWORD *)v173;
  *(_OWORD *)&v184[3].int32_t timescale = *(_OWORD *)&v173[16];
  long long v23 = *(_OWORD *)time;
  *(_OWORD *)(a2 + 404) = *(_OWORD *)time;
  *(void *)(a2 + 468) = *(void *)v173;
  *(void *)(a2 + 492) = *(void *)&v173[24];
  *(_OWORD *)&v184[0].xpc_object_t value = v23;
  *(_OWORD *)&v184[0].CMTimeEpoch epoch = v22;
  *(unsigned char *)(a2 + 400) = !FigVideoCompositionTimeWindowDurationIsZero((uint64_t)v184);
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (v17 != v20)
  {
    CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a2 + 256);
LABEL_37:
    CFDictionarySetValue(Mutable, @"OptimizeSampleCursorIPCForPower", v19);
  }
  CFTypeRef cf = 0;
  int v24 = *(_DWORD *)(a2 + 72);
  if (v24 == 1936684398)
  {
    CFStringRef v25 = @"AudioEarlyDumpBefore";
  }
  else
  {
    if (v24 != 1986618469) {
      goto LABEL_47;
    }
    CFStringRef v25 = @"VideoEarlyDumpBefore";
  }
  CFStringRef v26 = (const __CFString *)CFPreferencesCopyValue(v25, @"com.apple.coremedia", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v26)
  {
    CFStringRef v27 = v26;
    CFTypeID v28 = CFGetTypeID(v26);
    if (v28 == CFStringGetTypeID())
    {
      CFComparisonResult v29 = CFStringCompare(v27, @"decode", 1uLL);
      CFRelease(v27);
      if (v29 == kCFCompareEqualTo)
      {
        uint64_t ThatDiscards = FigSampleBufferConsumerCreateThatDiscards((void *)(a2 + 96));
        goto LABEL_92;
      }
    }
    else
    {
      CFRelease(v27);
    }
  }
LABEL_47:
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 80));
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v33 + 48);
  if (v34 && !v34(FigBaseObject, @"SourceSampleBufferConsumer", a3, a2 + 96)) {
    goto LABEL_93;
  }
  v184[0] = *v10;
  memset(&v185, 0, sizeof(v185));
  CMTimeMake(&v185, 1, 1);
  memset(&v168, 0, sizeof(v168));
  CMTimeMake(&v168, 1, 2);
  int v35 = *(_DWORD *)(a2 + 72);
  if (v35 == 1936684398)
  {
    CMTimeMake((CMTime *)time, 4, 1);
    CMTime v185 = *(CMTime *)time;
    CMTimeMake((CMTime *)time, 2, 1);
    CMTime v168 = *(CMTime *)time;
    int v35 = *(_DWORD *)(a2 + 72);
  }
  MEMORY[0x19970EE10](&sReadModelSpecificPlaybackTuningOnce, bossReadModelSpecificPlaybackTuning);
  if (sModelSpecificPlaybackTuning)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID((CFTypeRef)sModelSpecificPlaybackTuning))
    {
      CFStringRef v37 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%c%c%c%c", (v35 >> 24), (v35 << 8 >> 24), ((__int16)v35 >> 8), (char)v35);
      CFDictionaryRef v38 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)sModelSpecificPlaybackTuning, v37);
      if (v38
        || (CFDictionaryRef v38 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)sModelSpecificPlaybackTuning, @"Default")) != 0)
      {
        CFTypeID v39 = CFDictionaryGetTypeID();
        if (v39 == CFGetTypeID(v38))
        {
          CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v38, @"SampleBufferQueueLowWaterLevelMilliseconds");
          CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v38, @"SampleBufferQueueHighWaterLevelMilliseconds");
          LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 0;
          if (v40)
          {
            CFTypeID v42 = CFNumberGetTypeID();
            if (v42 == CFGetTypeID(v40))
            {
              CFNumberGetValue(v40, kCFNumberIntType, &valuePtr);
              CMTimeMake((CMTime *)time, SLODWORD(valuePtr.value), 1000);
              CMTime v168 = *(CMTime *)time;
            }
          }
          if (v41)
          {
            CFTypeID v43 = CFNumberGetTypeID();
            if (v43 == CFGetTypeID(v41))
            {
              CFNumberGetValue(v41, kCFNumberIntType, &valuePtr);
              CMTimeMake((CMTime *)time, SLODWORD(valuePtr.value), 1000);
              CMTime v185 = *(CMTime *)time;
            }
          }
        }
      }
      a1 = v161;
      if (v37) {
        CFRelease(v37);
      }
    }
  }
  if (FigCFDictionaryGetCMTimeIfPresent() && (v184[0].flags & 0x1D) == 1) {
    CMTime v185 = v184[0];
  }
  if (FigCFDictionaryGetCMTimeIfPresent() && (v184[0].flags & 0x1D) == 1) {
    CMTime v168 = v184[0];
  }
  uint64_t v44 = *(void *)(a2 + 32);
  *(void *)CMTime time = 0;
  uint64_t v45 = FigTrackReaderGetFigBaseObject(v44);
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  char v48 = *(void (**)(uint64_t, __CFString *, void, unsigned char *))(v47 + 48);
  if (v48)
  {
    v48(v45, @"HasSeamSamples", *MEMORY[0x1E4F1CF80], time);
    int v49 = *(const void **)time;
    if (*(void *)time) {
      CFRelease(*(CFTypeRef *)time);
    }
  }
  else
  {
    int v49 = 0;
  }
  if (v49 == v19)
  {
    memset(time, 0, 24);
    CMTimeMake((CMTime *)time, 1, 1);
    CMTime lhs = v185;
    CMTime rhs = *(CMTime *)time;
    CMTimeAdd(&valuePtr, &lhs, &rhs);
    CMTime v185 = valuePtr;
    CMTime lhs = v168;
    CMTime rhs = *(CMTime *)time;
    CMTimeAdd(&valuePtr, &lhs, &rhs);
    CMTime v168 = valuePtr;
  }
  uint64_t v50 = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 80));
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  int v53 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v52 + 48);
  if (v53)
  {
    uint64_t ThatDiscards = v53(v50, @"SourceSampleBufferQueue", a3, &cf);
    CFTypeRef v54 = cf;
    if (ThatDiscards
      || (*(CMTime *)CMTime time = v185,
          CMTime valuePtr = v168,
          ThatDiscards = FigSampleBufferConsumerCreateForBufferQueue((uint64_t)cf, (long long *)time, (long long *)&valuePtr.value, (void *)(a2 + 96)), CFTypeRef v54 = cf, ThatDiscards))
    {
      if (v54) {
        CFRelease(v54);
      }
      return ThatDiscards;
    }
    if (cf) {
      CFRelease(cf);
    }
    uint64_t ThatDiscards = 0;
  }
  else
  {
    uint64_t ThatDiscards = 4294954514;
  }
LABEL_92:
  if (ThatDiscards) {
    return ThatDiscards;
  }
LABEL_93:
  int v55 = *(unsigned __int8 *)(a1 + 121);
  v185.xpc_object_t value = 0;
  v168.xpc_object_t value = 0;
  long long v160 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)CMTime time = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v56 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)&time[16] = v56;
  uint64_t v57 = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 80));
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  __int16 v60 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v59 + 48);
  if (v60)
  {
    if (!v60(v57, @"PipelineLatency", a3, &v168))
    {
      if (v168.value)
      {
        CMTimeMakeFromDictionary((CMTime *)time, (CFDictionaryRef)v168.value);
        if (v168.value)
        {
          CFRelease((CFTypeRef)v168.value);
          v168.xpc_object_t value = 0;
        }
      }
    }
  }
  if (*(unsigned char *)(a2 + 340))
  {
    uint64_t v61 = FigSampleGeneratorCreateForFormatReaderProducingByteReferenceSampleBuffers(a3, *(const void **)(a1 + 40), *(const void **)(a2 + 32), *(void *)(a1 + 112), 0, &v185);
    if (!v61)
    {
LABEL_103:
      uint64_t ThatDiscards = 0;
      *(void *)(a2 + 40) = CFRetain((CFTypeRef)v185.value);
      goto LABEL_104;
    }
  }
  else
  {
    uint64_t v75 = *(void *)(a1 + 112);
    if (v55)
    {
      uint64_t v76 = *(const void **)(a2 + 32);
      uint64_t v77 = *(const void **)(a1 + 48);
      uint64_t v78 = *(const void **)(a1 + 56);
      v184[0] = *(CMTime *)time;
      uint64_t v61 = FigSampleGeneratorCreateForTrackReaderUsingScheduledIO(a3, v76, v77, v78, v75, v184, 2, &v185);
      if (!v61) {
        goto LABEL_103;
      }
    }
    else
    {
      uint64_t v61 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(a3, *(const void **)(a1 + 40), *(const void **)(a2 + 32), *(const void **)(a1 + 48), v75, 2, &v185);
      if (!v61) {
        goto LABEL_103;
      }
    }
  }
  uint64_t ThatDiscards = v61;
LABEL_104:
  if (v185.value) {
    CFRelease((CFTypeRef)v185.value);
  }
  if (ThatDiscards) {
    return ThatDiscards;
  }
  int v62 = *(_DWORD *)(a2 + 72);
  char v63 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  if (v62 != 1936684398 && v62 != 1751216244)
  {
    *(void *)CMTime time = 0;
    CFAllocatorRef v79 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v80 = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 80));
    uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v81) {
      uint64_t v82 = v81;
    }
    else {
      uint64_t v82 = 0;
    }
    v83 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, unsigned char *))(v82 + 48);
    if (v83) {
      v83(v80, @"SupportsSavingFrames", v79, time);
    }
    v84 = *(const void **)time;
    if (*(const void **)time == v19)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 256), @"SpeculativelySaveFrames", v19);
      v84 = *(const void **)time;
    }
    if (v84) {
      CFRelease(v84);
    }
    uint64_t ThatDiscards = VideoMentorNew(*(const void **)(a2 + 48), *(const void **)(a2 + 40), *(const void **)(a2 + 96), *(const __CFDictionary **)(a2 + 256), (void *)(a2 + 120));
    if (ThatDiscards) {
      return ThatDiscards;
    }
    goto LABEL_202;
  }
  LODWORD(lhs.CFDictionarySetValue(theDict, key, value) = 0;
  LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
  valuePtr.xpc_object_t value = 0;
  LODWORD(cf) = 0;
  int32_t timescale = 0;
  if (!a4) {
    goto LABEL_273;
  }
  uint64_t v64 = CFDictionaryGetValue(a4, @"iTunesGaplessInfo");
  if (!v64) {
    goto LABEL_273;
  }
  CFTypeID v65 = CFGetTypeID(v64);
  if (v65 != CFDictionaryGetTypeID()) {
    goto LABEL_273;
  }
  int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  int Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  int v68 = FigCFDictionaryGetInt32IfPresent();
  int v69 = FigCFDictionaryGetInt32IfPresent();
  BOOL v70 = 0;
  int v71 = 0;
  if (v68 && v69)
  {
    int v71 = Int64IfPresent;
    if (FigCFDictionaryGetInt32IfPresent())
    {
      if (!Int64IfPresent)
      {
        LODWORD(v185.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(v168.CFDictionarySetValue(theDict, key, value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v73 = v185.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v168.value)) {
          unsigned int v74 = v73;
        }
        else {
          unsigned int v74 = v73 & 0xFFFFFFFE;
        }
        if (v74)
        {
          LODWORD(v184[0].CFDictionarySetValue(theDict, key, value) = 136315138;
          *(CMTimeValue *)((char *)&v184[0].value + 4) = (CMTimeValue)"bossGetGaplessInfoFromOptions";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      }
      goto LABEL_144;
    }
    if (*(unsigned char *)(a1 + 124))
    {
LABEL_144:
      BOOL v70 = (Int32IfPresent | Int64IfPresent) != 0;
      goto LABEL_145;
    }
    LODWORD(v185.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(v168.CFDictionarySetValue(theDict, key, value) = 0;
    v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v86 = v185.value;
    if (os_log_type_enabled(v85, v168.value)) {
      unsigned int v87 = v86;
    }
    else {
      unsigned int v87 = v86 & 0xFFFFFFFE;
    }
    if (v87)
    {
      LODWORD(v184[0].CFDictionarySetValue(theDict, key, value) = 136315138;
      *(CMTimeValue *)((char *)&v184[0].value + 4) = (CMTimeValue)"bossGetGaplessInfoFromOptions";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_273:
    BOOL v70 = 0;
    int v71 = 0;
  }
LABEL_145:
  uint64_t ThatDiscards = AudioMentorNew(*(const void **)(a2 + 48), *(const void **)(a2 + 40), *(const void **)(a2 + 96), *(const __CFDictionary **)(a2 + 256), (void *)(a2 + 104));
  if (!ThatDiscards && v70)
  {
    int v170 = 0;
    memset(v184, 0, 96);
    uint64_t v88 = *(void *)(a2 + 32);
    *(void *)CMTime time = 0;
    CFAllocatorRef v89 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v90 = FigTrackReaderGetFigBaseObject(v88);
    uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v91) {
      uint64_t v92 = v91;
    }
    else {
      uint64_t v92 = 0;
    }
    v93 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, unsigned char *))(v92 + 48);
    if (v93)
    {
      uint64_t v94 = v93(v90, @"TrackFormatDescriptionArray", v89, time);
      if (!v94)
      {
        if (*(void *)time && CFArrayGetCount(*(CFArrayRef *)time))
        {
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)time, 0);
          if (ValueAtIndex) {
            CFTypeRef v96 = CFRetain(ValueAtIndex);
          }
          else {
            CFTypeRef v96 = 0;
          }
          uint64_t ThatDiscards = 0;
          goto LABEL_159;
        }
        uint64_t v94 = FigSignalErrorAt();
      }
      uint64_t ThatDiscards = v94;
      CFTypeRef v96 = 0;
    }
    else
    {
      CFTypeRef v96 = 0;
      uint64_t ThatDiscards = 4294954514;
    }
LABEL_159:
    if (*(void *)time) {
      CFRelease(*(CFTypeRef *)time);
    }
    if (!ThatDiscards)
    {
      int32_t v97 = timescale;
      CMTimeMake(v184, SLODWORD(lhs.value), timescale);
      if (v71)
      {
        CMTimeMake((CMTime *)time, valuePtr.value, v97);
        *(_OWORD *)&v184[1].xpc_object_t value = *(_OWORD *)time;
        CMTimeEpoch v98 = *(void *)&time[16];
      }
      else
      {
        *(_OWORD *)&v184[1].xpc_object_t value = *MEMORY[0x1E4F1FA10];
        CMTimeEpoch v98 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
      }
      v184[1].CMTimeEpoch epoch = v98;
      CMTimeMake((CMTime *)time, 0, v97);
      v184[2] = *(CMTime *)time;
      v184[3] = v184[1];
      int v99 = (int)cf;
      v100 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      if ((int)cf <= 0)
      {
        LODWORD(v168.CFDictionarySetValue(theDict, key, value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v101 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v102 = v168.value;
        if (os_log_type_enabled(v101, type[0])) {
          unsigned int v103 = v102;
        }
        else {
          unsigned int v103 = v102 & 0xFFFFFFFE;
        }
        if (v103)
        {
          LODWORD(v185.CFDictionarySetValue(theDict, key, value) = 136315394;
          *(CMTimeValue *)((char *)&v185.value + 4) = (CMTimeValue)"bossCreateAudioAndGaplessMentorForTrack";
          LOWORD(v185.flags) = 1024;
          *(CMTimeFlags *)((char *)&v185.flags + 2) = cf;
          _os_log_send_and_compose_impl();
        }
        int v99 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LODWORD(cf) = 1;
        v100 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      }
      int v104 = rhs.value;
      if (!*(unsigned char *)(v161 + 124) && LODWORD(rhs.value))
      {
        *(_DWORD *)type = (v99 + LODWORD(rhs.value) - 1) / v99;
        CFNumberRef v105 = CFNumberCreate(v89, kCFNumberSInt32Type, type);
        memset(&v168, 0, sizeof(v168));
        CMTimeMake(&v168, SLODWORD(rhs.value), v97);
        *(CMTime *)CMTime time = v168;
        *(void *)(a2 + 240) = CMTimeCopyAsDictionary((CMTime *)time, v89);
        if (*((_DWORD *)v100 + 870))
        {
          unsigned int v167 = 0;
          os_log_type_t v166 = OS_LOG_TYPE_DEFAULT;
          v106 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v107 = v167;
          if (os_log_type_enabled(v106, v166)) {
            unsigned int v108 = v107;
          }
          else {
            unsigned int v108 = v107 & 0xFFFFFFFE;
          }
          if (v108)
          {
            LODWORD(v185.CFDictionarySetValue(theDict, key, value) = 136316418;
            *(CMTimeValue *)((char *)&v185.value + 4) = (CMTimeValue)"bossCreateAudioAndGaplessMentorForTrack";
            LOWORD(v185.flags) = 2048;
            *(void *)((char *)&v185.flags + 2) = v161;
            HIWORD(v185.epoch) = 2082;
            CMTimeValue v186 = v161 + 841;
            __int16 v187 = 1024;
            *(_DWORD *)v188 = rhs.value;
            *(_WORD *)&v188[4] = 1024;
            *(_DWORD *)&v188[6] = cf;
            LOWORD(v189) = 1024;
            *(_DWORD *)((char *)&v189 + 2) = *(_DWORD *)type;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v100 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        }
        uint64_t v109 = FigFormatReaderGetFigBaseObject(*(void *)(v161 + 40));
        uint64_t v110 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v110) {
          uint64_t v111 = v110;
        }
        else {
          uint64_t v111 = 0;
        }
        v112 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v111 + 56);
        if (v112) {
          v112(v109, @"MarkPacketOffsetFromEOF", v105);
        }
        CFRelease(v105);
        v184[1] = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        v184[3] = v184[1];
        int v104 = rhs.value;
        int v99 = (int)cf;
      }
      a1 = v161;
      if (v104 > v99)
      {
        int v170 = v104 / v99;
        *(void *)(a2 + 232) = CFNumberCreate(v89, kCFNumberSInt32Type, &v170);
      }
      if (*((_DWORD *)v100 + 870))
      {
        LODWORD(v168.CFDictionarySetValue(theDict, key, value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v113 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v114 = v168.value;
        if (os_log_type_enabled(v113, type[0])) {
          unsigned int v115 = v114;
        }
        else {
          unsigned int v115 = v114 & 0xFFFFFFFE;
        }
        if (v115)
        {
          LODWORD(v185.CFDictionarySetValue(theDict, key, value) = 136317186;
          *(CMTimeValue *)((char *)&v185.value + 4) = (CMTimeValue)"bossCreateAudioAndGaplessMentorForTrack";
          LOWORD(v185.flags) = 2048;
          *(void *)((char *)&v185.flags + 2) = v161;
          HIWORD(v185.epoch) = 2082;
          CMTimeValue v186 = v161 + 841;
          __int16 v187 = 2048;
          *(void *)v188 = v184[0].value;
          *(_WORD *)&v188[8] = 2048;
          CMTimeValue v189 = v184[1].value;
          __int16 v190 = 2048;
          CMTimeValue v191 = v184[2].value;
          __int16 v192 = 2048;
          CMTimeValue v193 = v184[3].value;
          __int16 v194 = 1024;
          int v195 = v170;
          __int16 v196 = 1024;
          int v197 = rhs.value;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t ThatDiscards = EditMentorNewWithChildAudioMentorAndSingleEditSegment(*(void **)(a2 + 104), (uint64_t)v184, (void *)(a2 + 112));
      CFStringRef v116 = CFStringCreateWithFormat(v89, 0, @"GAPLESS (%c%c%c%c)", HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
      EditMentorSetDebugName(*(void **)(a2 + 112), v116);
      if (v116) {
        CFRelease(v116);
      }
    }
    if (v96) {
      CFRelease(v96);
    }
  }
  char v63 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  if (ThatDiscards) {
    return ThatDiscards;
  }
  CFAllocatorRef v79 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_202:
  uint64_t v117 = FigTrackReaderGetFigBaseObject(*(void *)(a2 + 32));
  uint64_t v118 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v118) {
    uint64_t v119 = v118;
  }
  else {
    uint64_t v119 = 0;
  }
  v120 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v119 + 48);
  if (v120) {
    v120(v117, @"EditCursorService", v79, a2 + 56);
  }
  v121 = *(void **)(a2 + 104);
  if (v121)
  {
    v122 = *(const void **)(a2 + 56);
    if (*(void *)(a2 + 112)) {
      uint64_t v123 = EditMentorNewWithChildEditMentor(*(void **)(a2 + 112), v122, 0, (void *)(a2 + 128));
    }
    else {
      uint64_t v123 = EditMentorNewWithChildAudioMentor(v121, v122, (void *)(a2 + 128));
    }
  }
  else
  {
    uint64_t v123 = EditMentorNewWithChildVideoMentor(*(void **)(a2 + 120), *(const void **)(a2 + 56), (void *)(a2 + 128));
  }
  uint64_t ThatDiscards = v123;
  if (!v123)
  {
    CFStringRef v124 = CFStringCreateWithFormat(v79, 0, @"PRIMARY (%c%c%c%c)", HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
    EditMentorSetDebugName(*(void **)(a2 + 128), v124);
    if (v124) {
      CFRelease(v124);
    }
    *(void *)(a2 + 192) = *(void *)(a2 + 128);
    uint64_t v125 = FigTrackReaderGetFigBaseObject(*(void *)(a2 + 32));
    uint64_t v126 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v126) {
      uint64_t v127 = v126;
    }
    else {
      uint64_t v127 = 0;
    }
    v128 = (const void **)(a2 + 64);
    v129 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v127 + 48);
    if (v129) {
      v129(v125, @"SecondaryEditCursorService", v79, a2 + 64);
    }
    if (*v128)
    {
      uint64_t v130 = EditMentorNewWithChildEditMentor(*(void **)(a2 + 192), *v128, 0, (void *)(a2 + 136));
      if (v130) {
        return v130;
      }
      CFStringRef v131 = CFStringCreateWithFormat(v79, 0, @"SUPER (%c%c%c%c)", HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
      EditMentorSetDebugName(*(void **)(a2 + 136), v131);
      if (v131) {
        CFRelease(v131);
      }
      *(void *)(a2 + 192) = *(void *)(a2 + 136);
    }
    if ((*(unsigned char *)(a1 + 204) & 1) != 0
      && (*(unsigned char *)(a1 + 228) & 1) != 0
      && !*(void *)(a1 + 232)
      && (*(void *)(a1 + 216) & 0x8000000000000000) == 0)
    {
      long long v132 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)CMTime time = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&time[16] = v132;
      *(_OWORD *)&time[32] = *(_OWORD *)(a1 + 224);
      uint64_t v130 = FigLoopingEditCursorServiceCreate((uint64_t)v79, (long long *)time, (void *)(a2 + 144));
      if (v130) {
        return v130;
      }
      uint64_t v130 = EditMentorNewWithChildEditMentor(*(void **)(a2 + 192), *(const void **)(a2 + 144), 0, (void *)(a2 + 152));
      if (v130) {
        return v130;
      }
      CFStringRef v133 = CFStringCreateWithFormat(v79, 0, @"LOOPING (%c%c%c%c)", HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
      EditMentorSetDebugName(*(void **)(a2 + 152), v133);
      if (v133) {
        CFRelease(v133);
      }
      *(void *)(a2 + 192) = *(void *)(a2 + 152);
    }
    if (!*(void *)(a2 + 104)) {
      goto LABEL_240;
    }
    *(_OWORD *)CMTime time = *MEMORY[0x1E4F1F9F0];
    *(void *)&time[16] = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
    uint64_t v130 = FigSnippetEditCursorServiceCreate((uint64_t)v79, (uint64_t)time, (void *)(a2 + 160));
    if (!v130)
    {
      *(unsigned char *)(a2 + 168) = 0;
      uint64_t v130 = EditMentorNewWithChildEditMentor(*(void **)(a2 + 192), *(const void **)(a2 + 160), 1, (void *)(a2 + 176));
      if (!v130)
      {
        CFStringRef v134 = CFStringCreateWithFormat(v79, 0, @"SNIPPET (%c%c%c%c)", HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
        EditMentorSetDebugName(*(void **)(a2 + 176), v134);
        if (v134) {
          CFRelease(v134);
        }
        *(void *)(a2 + 192) = *(void *)(a2 + 176);
LABEL_240:
        if (*(void *)(a2 + 120))
        {
          v135 = (_OWORD *)(a2 + 500);
          if (*(unsigned char *)(a2 + 512))
          {
            memset(&v184[1], 0, 72);
            *(_OWORD *)&v184[0].xpc_object_t value = *v135;
            v184[0].CMTimeEpoch epoch = *(void *)(a2 + 516);
            int v136 = *(_DWORD *)(a2 + 536);
          }
          else
          {
            int v136 = *(_DWORD *)(a2 + 536);
            if ((v136 & 1) == 0) {
              goto LABEL_243;
            }
            memset(&v184[1], 0, 72);
            *(_OWORD *)&v184[0].xpc_object_t value = v160;
            v184[0].CMTimeEpoch epoch = v56;
          }
          if (v136)
          {
            *(_OWORD *)CMTime time = *(_OWORD *)(a2 + 524);
            *(void *)&time[16] = *(void *)(a2 + 540);
            *(_OWORD *)&v185.xpc_object_t value = *v135;
            v185.CMTimeEpoch epoch = *(void *)(a2 + 516);
            CMTimeSubtract(&v184[1], (CMTime *)time, &v185);
          }
          else
          {
            v184[1] = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
          }
          v184[2] = v184[0];
          v184[3] = v184[1];
          if (*((_DWORD *)v63 + 870))
          {
            LODWORD(v168.CFDictionarySetValue(theDict, key, value) = 0;
            LOBYTE(valuePtr.CFDictionarySetValue(theDict, key, value) = 0;
            v137 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v138 = v168.value;
            if (os_log_type_enabled(v137, valuePtr.value)) {
              unsigned int v139 = v138;
            }
            else {
              unsigned int v139 = v138 & 0xFFFFFFFE;
            }
            if (v139)
            {
              LODWORD(v185.CFDictionarySetValue(theDict, key, value) = 136316418;
              *(CMTimeValue *)((char *)&v185.value + 4) = (CMTimeValue)"bossBuildMentorForTrack";
              LOWORD(v185.flags) = 2048;
              *(void *)((char *)&v185.flags + 2) = a1;
              HIWORD(v185.epoch) = 2048;
              CMTimeValue v186 = v184[0].value;
              __int16 v187 = 2048;
              *(void *)v188 = v184[1].value;
              *(_WORD *)&v188[8] = 2048;
              CMTimeValue v189 = v184[2].value;
              __int16 v190 = 2048;
              CMTimeValue v191 = v184[3].value;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t ThatDiscards = EditMentorNewWithChildEditMentorAndSingleEditSegment(*(void **)(a2 + 192), (uint64_t)v184, (void *)(a2 + 184));
          CFStringRef v140 = CFStringCreateWithFormat(v79, 0, @"TRIM (%c%c%c%c)", HIBYTE(*(_DWORD *)(a2 + 72)), BYTE2(*(_DWORD *)(a2 + 72)), BYTE1(*(_DWORD *)(a2 + 72)), *(_DWORD *)(a2 + 72));
          EditMentorSetDebugName(*(void **)(a2 + 184), v140);
          if (v140) {
            CFRelease(v140);
          }
          *(void *)(a2 + 192) = *(void *)(a2 + 184);
          goto LABEL_259;
        }
LABEL_243:
        uint64_t ThatDiscards = 0;
LABEL_259:
        if (*((_DWORD *)v63 + 870))
        {
          LODWORD(v185.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(v168.CFDictionarySetValue(theDict, key, value) = 0;
          v141 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v142 = v185.value;
          if (os_log_type_enabled(v141, v168.value)) {
            unsigned int v143 = v142;
          }
          else {
            unsigned int v143 = v142 & 0xFFFFFFFE;
          }
          if (v143)
          {
            int v144 = *(_DWORD *)(a2 + 24);
            unsigned int v145 = *(_DWORD *)(a2 + 72);
            unsigned int v146 = HIBYTE(v145);
            int v147 = BYTE2(v145);
            int v148 = BYTE1(v145);
            int v149 = v145;
            if (*(unsigned char *)(a2 + 89)) {
              v150 = "enableForStepping";
            }
            else {
              v150 = "disableForStepping";
            }
            uint64_t v151 = *(void *)(a2 + 192);
            uint64_t v152 = *(void *)(a2 + 176);
            uint64_t v153 = *(void *)(a2 + 152);
            uint64_t v154 = *(void *)(a2 + 128);
            uint64_t v155 = *(void *)(a2 + 136);
            uint64_t v156 = *(void *)(a2 + 104);
            uint64_t v157 = *(void *)(a2 + 112);
            v158 = "audioMentor";
            if (!v156)
            {
              v158 = "videoMentor";
              uint64_t v156 = *(void *)(a2 + 120);
            }
            *(_DWORD *)CMTime time = 136319234;
            *(void *)&time[4] = "bossBuildMentorForTrack";
            *(_WORD *)&time[12] = 2048;
            *(void *)&time[14] = a1;
            *(_WORD *)&time[22] = 2082;
            *(void *)&time[24] = a1 + 841;
            *(_WORD *)&time[32] = 1024;
            *(_DWORD *)&time[34] = v144;
            *(_WORD *)&time[38] = 1024;
            *(_DWORD *)&time[40] = v146;
            *(_WORD *)&time[44] = 1024;
            *(_DWORD *)&time[46] = v147;
            *(_WORD *)&time[50] = 1024;
            *(_DWORD *)&time[52] = v148;
            *(_WORD *)&time[56] = 1024;
            *(_DWORD *)&time[58] = v149;
            *(_WORD *)&time[62] = 2082;
            *(void *)v173 = v150;
            *(_WORD *)&v173[8] = 2048;
            *(void *)&v173[10] = v151;
            *(_WORD *)&v173[18] = 2048;
            *(void *)&v173[20] = v152;
            *(_WORD *)&v173[28] = 2048;
            *(void *)&v173[30] = v153;
            __int16 v174 = 2048;
            uint64_t v175 = v155;
            __int16 v176 = 2048;
            uint64_t v177 = v154;
            __int16 v178 = 2048;
            uint64_t v179 = v157;
            __int16 v180 = 2082;
            v181 = v158;
            __int16 v182 = 2048;
            uint64_t v183 = v156;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return ThatDiscards;
      }
    }
    return v130;
  }
  return ThatDiscards;
}

uint64_t bossAddNotificationListenersForTrack(uint64_t a1, uint64_t a2)
{
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t result = FigNotificationCenterAddWeakListeners();
  if (!result)
  {
    *(unsigned char *)(a2 + 397) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterAddWeakListeners();
    if (!result) {
      *(unsigned char *)(a2 + 398) = 1;
    }
  }
  return result;
}

uint64_t bossSetExpectScaledEdits(const __CFArray *a1, char *a2, char *a3)
{
  uint64_t result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    uint64_t v5 = result;
    CFIndex v6 = 0;
    char v7 = 0;
    char v8 = 0;
    uint64_t v45 = *MEMORY[0x1E4F1CF80];
    uint64_t v9 = *MEMORY[0x1E4F1CFD0];
    uint64_t v10 = *MEMORY[0x1E4F1CFC8];
    while (1)
    {
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(a1, v6);
      if (*(_DWORD *)(result + 72) == 1936684398) {
        break;
      }
LABEL_56:
      if (++v6 == v5) {
        goto LABEL_60;
      }
    }
    uint64_t v11 = result;
    uint64_t v12 = *(void *)(result + 32);
    CFTypeRef v54 = 0;
    v55[0] = 0;
    CFTypeRef v53 = 0;
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v12);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFTypeID v16 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 48);
    if (!v16) {
      goto LABEL_10;
    }
    v16(FigBaseObject, @"SecondaryEditCursorService", v45, v55);
    uint64_t v17 = (uint64_t)v55[0];
    if (!v55[0]
      || (*(_OWORD *)&start.start.xpc_object_t value = *MEMORY[0x1E4F1FA08],
          start.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16),
          *(_OWORD *)&duration.start.xpc_object_t value = *MEMORY[0x1E4F1FA10],
          duration.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16),
          CMTimeRangeMake(&v52, &start.start, &duration.start),
          (int v18 = figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange(v17, (uint64_t)&v52)) == 0))
    {
LABEL_10:
      uint64_t v19 = FigTrackReaderGetFigBaseObject(v12);
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      long long v22 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v21 + 48);
      if (v22) {
        v22(v19, @"EditCursorService", v45, &v54);
      }
      uint64_t v23 = (uint64_t)v54;
      if (!v54)
      {
LABEL_38:
        int v18 = 0;
        goto LABEL_39;
      }
      CFTypeRef v24 = v55[0];
      if (v55[0])
      {
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        CFStringRef v27 = *(unsigned int (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v26 + 8);
        if (v27)
        {
          *(_OWORD *)&start.start.xpc_object_t value = *MEMORY[0x1E4F1FA08];
          start.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
          if (!v27(v24, &start, &v53))
          {
            while (1)
            {
              long long v50 = 0u;
              long long v51 = 0u;
              long long v49 = 0u;
              memset(&start, 0, sizeof(start));
              CFTypeRef v28 = v53;
              uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v30 = v29 ? v29 : 0;
              uint64_t v31 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(v30 + 24);
              if (!v31 || v31(v28, &start)) {
                break;
              }
              if ((start.start.flags & 1) != 0
                && (start.duration.flags & 1) != 0
                && !start.duration.epoch
                && (start.duration.value & 0x8000000000000000) == 0)
              {
                CMTimeRange duration = start;
                if (figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange((uint64_t)v54, (uint64_t)&duration))
                {
                  int v18 = 1;
                  goto LABEL_39;
                }
              }
              CFTypeRef v32 = v53;
              uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v33) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = 0;
              }
              int v35 = *(unsigned int (**)(CFTypeRef, uint64_t))(v34 + 16);
              if (!v35 || v35(v32, 1)) {
                goto LABEL_38;
              }
            }
          }
        }
        goto LABEL_38;
      }
      *(_OWORD *)&duration.start.xpc_object_t value = *MEMORY[0x1E4F1FA08];
      duration.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
      CMTime v46 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      CMTimeRangeMake(&start, &duration.start, &v46);
      int v18 = figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange(v23, (uint64_t)&start);
    }
LABEL_39:
    if (v55[0]) {
      CFRelease(v55[0]);
    }
    if (v54) {
      CFRelease(v54);
    }
    if (v53) {
      CFRelease(v53);
    }
    if (v18) {
      uint64_t v36 = v9;
    }
    else {
      uint64_t v36 = v10;
    }
    uint64_t v37 = FigRenderPipelineGetFigBaseObject(*(void *)(v11 + 80));
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v40 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v39 = v40;
    if (v40) {
      uint64_t v41 = v39;
    }
    else {
      uint64_t v41 = 0;
    }
    CFTypeID v42 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v41 + 56);
    if (v42) {
      uint64_t result = v42(v37, @"ExpectScaledEdits", v36);
    }
    if (v18) {
      char v7 = 1;
    }
    char v8 = 1;
    goto LABEL_56;
  }
  char v8 = 0;
  char v7 = 0;
LABEL_60:
  if (a2) {
    *a2 = v8;
  }
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t FigPlaybackBossRemoveAndAddTracks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFIndex a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = (CFTypeRef *)a8;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  __int16 v103 = 0;
  memset(&v102, 0, sizeof(v102));
  if (dword_1E9350D98)
  {
    LODWORD(v101.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    char v8 = (CFTypeRef *)a8;
  }
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (!(a5 | a2))
  {
    uint64_t started = 0;
    goto LABEL_156;
  }
  if ((a5 | a2) < 0 || a2 && (!a3 || !a4)) {
    goto LABEL_155;
  }
  CFIndex otherRange = a5;
  if (!a5)
  {
    CFNumberRef v91 = 0;
    long long v22 = 0;
    goto LABEL_72;
  }
  if (!a6 || !a7) {
    goto LABEL_155;
  }
  uint64_t v15 = 0;
  do
  {
    CFTypeID v16 = *(const void **)(a7 + 8 * v15);
    if (!v16) {
      goto LABEL_155;
    }
    CFTypeID v17 = CFGetTypeID(v16);
    if (v17 != FigRenderPipelineGetTypeID()) {
      goto LABEL_155;
    }
    ++v15;
  }
  while (a5 != v15);
  if (v8)
  {
    int v18 = v8;
    CFIndex v19 = a5;
    do
    {
      if (*v18)
      {
        CFTypeID v20 = CFGetTypeID(*v18);
        if (v20 != CFDictionaryGetTypeID()) {
          goto LABEL_155;
        }
      }
      ++v18;
    }
    while (--v19);
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_155:
    uint64_t started = FigSignalErrorAt();
LABEL_156:
    *(unsigned char *)(a1 + 140) = 1;
    return started;
  }
  long long v22 = Mutable;
  uint64_t v23 = 0;
  uint64_t v89 = *MEMORY[0x1E4F1CFD0];
  do
  {
    v105.xpc_object_t value = 0;
    if (FigPlaybackBossTrackGetTypeID_oneTimeOnly != -1) {
      dispatch_once_f(&FigPlaybackBossTrackGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossTrackClassInitialize);
    }
    uint64_t Instance = (char *)_CFRuntimeCreateInstance();
    if (!Instance
      || (uint64_t v25 = Instance,
          CFArrayAppendValue(v22, Instance),
          CFRelease(v25),
          uint64_t v26 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
          (*((void *)v25 + 2) = v26) == 0))
    {
      uint64_t v42 = FigSignalErrorAt();
LABEL_158:
      uint64_t started = v42;
      goto LABEL_45;
    }
    CFArrayRef v27 = v22;
    uint64_t v28 = *(unsigned int *)(a6 + 4 * v23);
    *((_DWORD *)v25 + 6) = v28;
    uint64_t v29 = *(void *)(a1 + 40);
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    CFTypeRef v32 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(v31 + 56);
    if (!v32)
    {
      uint64_t started = 4294954514;
LABEL_44:
      long long v22 = v27;
LABEL_45:
      CFNumberRef v40 = 0;
      uint64_t v41 = 0;
      goto LABEL_148;
    }
    uint64_t v33 = v32(v29, v28, v25 + 32, v25 + 72);
    if (v33)
    {
      uint64_t started = v33;
      goto LABEL_44;
    }
    CFTypeRef v34 = *(CFTypeRef *)(a7 + 8 * v23);
    if (v34) {
      CFTypeRef v34 = CFRetain(v34);
    }
    long long v22 = v27;
    *((void *)v25 + 10) = v34;
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v34);
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    CFDictionaryRef v38 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v37 + 48);
    if (v38 && !v38(FigBaseObject, @"NeedsToFlushWhenRateChanges", allocator, &v105) && v105.value == v89) {
      v25[88] = 1;
    }
    v25[89] = 1;
    ++v23;
  }
  while (otherRange != v23);
  uint64_t v42 = bossSetCursorServiceInTrackList(v27, a8);
  if (v42) {
    goto LABEL_158;
  }
  CFNumberRef v91 = CFNumberCreate(allocator, kCFNumberFloat32Type, (const void *)(a1 + 436));
  CFIndex v43 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v22, v43);
    uint64_t v45 = (uint64_t)ValueAtIndex;
    if (a8) {
      CFDictionaryRef v46 = *(const __CFDictionary **)(a8 + 8 * v43);
    }
    else {
      CFDictionaryRef v46 = 0;
    }
    if (*((_DWORD *)ValueAtIndex + 18) == 1936684398)
    {
      uint64_t v47 = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
      uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v49 = v48 ? v48 : 0;
      long long v50 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v49 + 56);
      if (v50) {
        v50(v47, @"PipelineRate", v91);
      }
    }
    uint64_t v51 = *(void *)(a1 + 112);
    uint64_t v52 = FigRenderPipelineGetFigBaseObject(*(void *)(v45 + 80));
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    int v55 = *(void (**)(uint64_t, __CFString *, uint64_t))(v54 + 56);
    if (v55) {
      v55(v52, @"Timebase", v51);
    }
    uint64_t v56 = *(void *)(v45 + 80);
    uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v57) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = 0;
    }
    long long v22 = v27;
    uint64_t v59 = *(void (**)(uint64_t))(v58 + 48);
    if (v59) {
      v59(v56);
    }
    uint64_t v60 = bossBuildMentorForTrack(a1, v45, allocator, v46);
    if (v60) {
      break;
    }
    *(_DWORD *)(v45 + 208) = 1000 * FigAtomicIncrement32();
    uint64_t v60 = bossAddNotificationListenersForTrack(a1, v45);
    if (v60) {
      break;
    }
    if (otherRange == ++v43)
    {
      bossSetExpectScaledEdits(v27, (char *)&v103 + 1, (char *)&v103);
LABEL_72:
      if (a2) {
        theArraya = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      }
      else {
        theArraya = 0;
      }
      MEMORY[0x19970E910](*(void *)(a1 + 576));
      MEMORY[0x19970E910](*(void *)(a1 + 64));
      if (*(unsigned char *)(a1 + 840))
      {
        LODWORD(v101.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
        uint64_t v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a2 >= 1)
      {
        int v95 = 0;
        uint64_t v62 = 0;
        uint64_t v90 = v22;
        while (*(uint64_t *)(a1 + 80) < 1)
        {
LABEL_84:
          LODWORD(v101.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          __int16 v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_105:
          if (++v62 == a2) {
            goto LABEL_108;
          }
        }
        CFIndex v63 = 0;
        while (1)
        {
          uint64_t v64 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v63);
          if (v64[6] == *(_DWORD *)(a3 + 4 * v62))
          {
            CFTypeID v65 = v64;
            uint64_t v66 = *((void *)v64 + 10);
            if (v66 == *(void *)(a4 + 8 * v62)) {
              break;
            }
          }
          if (++v63 >= *(void *)(a1 + 80)) {
            goto LABEL_84;
          }
        }
        if (*(void *)(a1 + 96) == v63)
        {
          uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v69 = v68 ? v68 : 0;
          BOOL v70 = *(unsigned int (**)(uint64_t))(v69 + 72);
          if (!v70 || v70(v66))
          {
            LODWORD(v101.CFDictionarySetValue(theDict, key, value) = 0;
            LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
            int v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            long long v22 = v90;
          }
        }
        CFArrayAppendValue(theArraya, v65);
        int v72 = v95;
        if (v65[18] == 1936684398) {
          int v72 = 1;
        }
        int v95 = v72;
        CFIndex v73 = *(void *)(a1 + 96);
        if (v73 == v63)
        {
          uint64_t v74 = -1;
          goto LABEL_98;
        }
        if (v73 > v63)
        {
          uint64_t v74 = v73 - 1;
LABEL_98:
          *(void *)(a1 + 96) = v74;
        }
        CFIndex v75 = *(void *)(a1 + 88);
        if (v75 == v63)
        {
          uint64_t v76 = -2;
          goto LABEL_103;
        }
        if (v75 > v63)
        {
          uint64_t v76 = v75 - 1;
LABEL_103:
          *(void *)(a1 + 88) = v76;
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 72), v63);
        --*(void *)(a1 + 80);
        goto LABEL_105;
      }
      LOBYTE(v95) = 0;
LABEL_108:
      CFIndex v77 = *(void *)(a1 + 80);
      v107.CFIndex location = 0;
      v107.length = otherRange;
      CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 72), v22, v107);
      *(void *)(a1 + 80) += otherRange;
      bossApplyThrottleForBackground(a1);
      if (*(uint64_t *)(a1 + 80) < 1)
      {
LABEL_112:
        char v79 = 0;
      }
      else
      {
        CFIndex v78 = 0;
        while (!*((unsigned char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v78) + 88))
        {
          if (*(void *)(a1 + 80) <= ++v78) {
            goto LABEL_112;
          }
        }
        char v79 = 1;
      }
      *(unsigned char *)(a1 + 107) = v79;
      if (HIBYTE(v103)) {
        BOOL v80 = v103 == 0;
      }
      else {
        BOOL v80 = 1;
      }
      if (v80)
      {
        if ((_BYTE)v95) {
          bossSetExpectScaledEdits(*(const __CFArray **)(a1 + 72), (char *)(a1 + 104), (char *)(a1 + 105));
        }
      }
      else
      {
        *(_WORD *)(a1 + 104) = 257;
      }
      bossElectNewTimebaseStarter((_DWORD *)a1);
      bossElectNewPreferredClock(a1);
      uint64_t started = 0;
      int v81 = *(_DWORD *)(a1 + 424);
      if (v81 <= 1886530415)
      {
        if (v81 <= 1886151032)
        {
          if (v81 == 1768189029) {
            goto LABEL_139;
          }
          CFNumberRef v40 = v91;
          uint64_t v41 = theArraya;
          if (v81 != 1885435251) {
            goto LABEL_147;
          }
          goto LABEL_138;
        }
        CFNumberRef v40 = v91;
        uint64_t v41 = theArraya;
        if (v81 != 1886151033)
        {
          if (v81 == 1886154860)
          {
            bossSwitchMentorsToSideQueues(a1, v77);
          }
          else if (v81 != 1886155888)
          {
            goto LABEL_147;
          }
        }
        memset(&v105, 0, sizeof(v105));
        CMTimebaseGetTime(&v105, *(CMTimebaseRef *)(a1 + 112));
        memset(&v104, 0, sizeof(v104));
        if (v105.timescale <= 1000) {
          int32_t timescale = 1000;
        }
        else {
          int32_t timescale = v105.timescale;
        }
        CMTimeMakeWithSeconds(&v104, *(float *)(a1 + 432) * 0.1, timescale);
        CMTime type = v105;
        CMTime rhs = v104;
        CMTimeAdd(&v101, &type, &rhs);
        CMTime v105 = v101;
        bossBroadcastPrerollRateToRenderPipelines(a1, v77, *(float *)(a1 + 432));
        CMTime v101 = v105;
        uint64_t v83 = bossSetMentorModesForTimeAndRate(a1, v77, otherRange, &v101, *(void *)(a1 + 432), *(_DWORD *)(a1 + 440), 2, 0);
      }
      else
      {
        if (v81 <= 1919247480)
        {
          if (v81 == 1886530416)
          {
            MEMORY[0x19970E930](*(void *)(a1 + 64));
            int v85 = *(_DWORD *)(a1 + 424);
            unsigned int v86 = *(const void **)(a1 + 416);
            CMTime v105 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
            uint64_t started = figPlaybackBossStartPrerollAndSetPlayState(a1, &v105, *(void *)(a1 + 432), *(_DWORD *)(a1 + 440), 3, v85, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v86);
            MEMORY[0x19970E930](*(void *)(a1 + 576));
            CFNumberRef v40 = v91;
            uint64_t v41 = theArraya;
            goto LABEL_148;
          }
          if (v81 != 1886544244)
          {
            int v82 = 1886545266;
            goto LABEL_134;
          }
LABEL_139:
          LODWORD(v101.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT);
          CFNumberRef v40 = v91;
          uint64_t v41 = theArraya;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t started = 0;
          goto LABEL_147;
        }
        if (v81 == 2003853684 || v81 == 1920298606) {
          goto LABEL_139;
        }
        int v82 = 1919247481;
LABEL_134:
        CFNumberRef v40 = v91;
        uint64_t v41 = theArraya;
        if (v81 != v82)
        {
LABEL_147:
          MEMORY[0x19970E930](*(void *)(a1 + 576));
          MEMORY[0x19970E930](*(void *)(a1 + 64));
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 424) = 1885435251;
LABEL_138:
        FigPlaybackBossGetTime(a1, &v102);
        CMTime v105 = v102;
        uint64_t v83 = bossSetMentorModesToScrub(a1, v77, otherRange, &v105, 0, 0);
      }
      uint64_t started = v83;
      goto LABEL_147;
    }
  }
  uint64_t started = v60;
  uint64_t v41 = 0;
  CFNumberRef v40 = v91;
LABEL_148:
  *(unsigned char *)(a1 + 140) = 1;
  if (v22) {
    CFRelease(v22);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  return started;
}

uint64_t bossApplyThrottleForBackground(uint64_t result)
{
  if (*(uint64_t *)(result + 80) >= 1)
  {
    uint64_t v1 = result;
    CFIndex v2 = 0;
    uint64_t v3 = *MEMORY[0x1E4F1CFD0];
    uint64_t v4 = *MEMORY[0x1E4F1CFC8];
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), v2);
      uint64_t v6 = ValueAtIndex[10];
      if (v6)
      {
        uint64_t v7 = *(unsigned char *)(v1 + 127) ? v3 : v4;
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v10 = v9 ? v9 : 0;
        uint64_t v11 = *(void (**)(uint64_t, __CFString *, uint64_t))(v10 + 56);
        if (v11) {
          v11(FigBaseObject, @"ThrottleForBackground", v7);
        }
      }
      uint64_t v12 = ValueAtIndex[15];
      if (v12) {
        VideoMentorSetThrottleForBackground(v12, *(unsigned __int8 *)(v1 + 127));
      }
      uint64_t result = ValueAtIndex[13];
      if (result) {
        uint64_t result = AudioMentorSetThrottleForBackground(result, *(unsigned __int8 *)(v1 + 127));
      }
      ++v2;
    }
    while (*(void *)(v1 + 80) > v2);
  }
  return result;
}

void bossBroadcastPrerollRateToRenderPipelines(uint64_t a1, uint64_t a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
  if (a2 < FigCFRangeGetLimit())
  {
    CFIndex v6 = a2;
    do
    {
      uint64_t v7 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6) + 10);
      if (v7)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v10 + 56);
        if (v11) {
          v11(FigBaseObject, @"PrerollRate", v5);
        }
      }
      ++v6;
    }
    while (v6 < FigCFRangeGetLimit());
  }
  CFRelease(v5);
}

uint64_t FigPlaybackBossSetTrackList(uint64_t a1, uint64_t a2, int *a3, void *a4, uint64_t a5)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(a1 + 80) <= a2) {
    size_t v11 = a2;
  }
  else {
    size_t v11 = *(void *)(a1 + 80);
  }
  uint64_t v12 = malloc_type_calloc(v11, 4uLL, 0x100004052888210uLL);
  CFTypeID v13 = malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
  uint64_t v14 = malloc_type_calloc(v11, 4uLL, 0x100004052888210uLL);
  uint64_t v15 = malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
  CFTypeID v16 = malloc_type_calloc(v11, 8uLL, 0x6004044C4A2DFuLL);
  CFTypeID v17 = v16;
  if (v12) {
    BOOL v18 = v13 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  uint64_t v42 = v14;
  if (v18 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    uint64_t v38 = FigSignalErrorAt();
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    uint64_t v37 = v14;
  }
  else
  {
    if (*(uint64_t *)(a1 + 80) < 1)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 0;
      CFIndex v23 = 0;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v23);
        int v25 = ValueAtIndex[6];
        if (a2 < 1)
        {
LABEL_28:
          v12[v22] = v25;
          v13[v22++] = *((void *)ValueAtIndex + 10);
        }
        else
        {
          uint64_t v26 = a3;
          CFArrayRef v27 = a4;
          uint64_t v28 = a2;
          while (1)
          {
            int v29 = *v26++;
            if (v25 == v29 && *((void *)ValueAtIndex + 10) == *v27) {
              break;
            }
            ++v27;
            if (!--v28) {
              goto LABEL_28;
            }
          }
        }
        ++v23;
      }
      while (v23 < *(void *)(a1 + 80));
    }
    uint64_t v40 = (uint64_t)v13;
    uint64_t v41 = (uint64_t)v12;
    if (a2 < 1)
    {
      CFIndex v30 = 0;
      CFTypeRef v32 = v42;
    }
    else
    {
      CFIndex v30 = 0;
      uint64_t v31 = 0;
      CFTypeRef v32 = v42;
      do
      {
        if (*(uint64_t *)(a1 + 80) <= 0)
        {
          int v35 = a3[v31];
LABEL_41:
          v32[v30] = v35;
          v17[v30] = *(void *)(a5 + 8 * v31);
          v15[v30++] = a4[v31];
        }
        else
        {
          CFIndex v33 = 0;
          while (1)
          {
            CFTypeRef v34 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v33);
            int v35 = a3[v31];
            if (v34[6] == v35 && *((void *)v34 + 10) == a4[v31]) {
              break;
            }
            if (++v33 >= *(void *)(a1 + 80))
            {
              CFTypeRef v32 = v42;
              goto LABEL_41;
            }
          }
          CFTypeRef v32 = v42;
        }
        ++v31;
      }
      while (v31 != a2);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    uint64_t v36 = a1;
    uint64_t v37 = v32;
    CFTypeID v13 = (void *)v40;
    uint64_t v12 = (_DWORD *)v41;
    uint64_t v38 = FigPlaybackBossRemoveAndAddTracks(v36, v22, v41, v40, v30, (uint64_t)v37, (uint64_t)v15, (uint64_t)v17);
  }
  free(v12);
  free(v13);
  free(v37);
  free(v15);
  free(v17);
  return v38;
}

void figPlaybackBossPrerollCompleted(uint64_t a1, int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  values = 0;
  if (dword_1E9350D98)
  {
    unsigned int v36 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    return;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 576));
  int v5 = FigCFEqual();
  if (v5)
  {
    values = *(void **)(a1 + 496);
    *(void *)(a1 + 496) = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 576));
  if (!a2 && v5)
  {
    CFDictionaryRef v6 = values
       ? CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigPlaybackBossParameter_PrerollToken, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]): 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v6) {
      CFRelease(v6);
    }
  }
  MEMORY[0x19970E910](*(void *)(a1 + 576));
  int v7 = FigCFEqual();
  if (a2 || v7)
  {
    char v11 = 0;
    int v12 = *(_DWORD *)(a1 + 424);
    if (v12 <= 1886155887)
    {
      if (v12 <= 1885435250)
      {
        if (v12 == 1634624887)
        {
          int v10 = 0;
          if (a2 == 2) {
            int v20 = 1885435251;
          }
          else {
            int v20 = 1919247481;
          }
LABEL_53:
          *(_DWORD *)(a1 + 424) = v20;
          goto LABEL_54;
        }
        if (v12 != 1684365668)
        {
          int v13 = 1768189029;
          goto LABEL_44;
        }
LABEL_45:
        int v10 = 0;
LABEL_54:
        char v11 = 1;
        goto LABEL_68;
      }
      if (v12 == 1885435251)
      {
LABEL_46:
        int v10 = 0;
        if (!a2)
        {
LABEL_73:
          if (*MEMORY[0x1E4F1EBA8] == 1) {
            kdebug_trace();
          }
          int v9 = *(_DWORD *)(a1 + 776);
          int v8 = *(unsigned __int8 *)(a1 + 780);
          *(_DWORD *)(a1 + 776) = 0;
          *(unsigned char *)(a1 + 780) = 0;
          goto LABEL_76;
        }
        int v20 = 1885435251;
        goto LABEL_53;
      }
      if (v12 == 1886151033) {
        goto LABEL_45;
      }
      int v10 = 0;
      if (v12 != 1886154860) {
        goto LABEL_68;
      }
      uint64_t v15 = MEMORY[0x1E4F1F9F8];
      bossStopTimebaseAndAudioContext(a1, 0, MEMORY[0x1E4F1F9F8]);
      ++*(_DWORD *)(a1 + 720);
      if ((*(_DWORD *)(a1 + 456) & 0x1D) == 1)
      {
        CFTypeID v16 = *(OpaqueCMTimebase **)(a1 + 112);
        CMTime rhs = *(CMTime *)(a1 + 444);
        CMTimebaseSetTime(v16, &rhs);
        *(_OWORD *)(a1 + 444) = *(_OWORD *)v15;
        *(void *)(a1 + 460) = *(void *)(v15 + 16);
      }
      bossReplaceMainQueuesWithSideQueuesAndSwitchMentorsToMainQueues(a1);
    }
    else
    {
      if (v12 > 1886545265)
      {
        if (v12 <= 1920298605)
        {
          if (v12 != 1886545266)
          {
            int v10 = 0;
            if (v12 != 1919247481) {
              goto LABEL_68;
            }
            goto LABEL_46;
          }
          if (a2 == 2)
          {
            int v10 = 0;
            *(_DWORD *)(a1 + 424) = 1885435251;
LABEL_71:
            ++*(_DWORD *)(a1 + 644);
            if (*(unsigned char *)(a1 + 628))
            {
              HostTimeClock = CMClockGetHostTimeClock();
              CMClockGetTime(&lhs, HostTimeClock);
              CMTime rhs = *(CMTime *)(a1 + 616);
              CMTimeSubtract(&v34, &lhs, &rhs);
              *(double *)(a1 + 608) = *(double *)(a1 + 608) + fabs(CMTimeGetSeconds(&v34));
              uint64_t v27 = MEMORY[0x1E4F1F9F8];
              *(_OWORD *)(a1 + 616) = *MEMORY[0x1E4F1F9F8];
              *(void *)(a1 + 632) = *(void *)(v27 + 16);
            }
            goto LABEL_73;
          }
          char v11 = 0;
          int v10 = 0;
          int v25 = 1919247481;
LABEL_67:
          *(_DWORD *)(a1 + 424) = v25;
          goto LABEL_68;
        }
        if (v12 != 1920298606)
        {
          int v13 = 2003853684;
LABEL_44:
          int v10 = 0;
          if (v12 != v13) {
            goto LABEL_68;
          }
          goto LABEL_45;
        }
        goto LABEL_45;
      }
      if (v12 == 1886155888)
      {
        if (dword_1E9350D98)
        {
          unsigned int v36 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        char v11 = 0;
        int v10 = 0;
        int v25 = 1886151033;
        goto LABEL_67;
      }
      if (v12 != 1886530416)
      {
        int v10 = 0;
        if (v12 != 1886544244) {
          goto LABEL_68;
        }
        if (dword_1E9350D98)
        {
          unsigned int v36 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        char v11 = 0;
        int v10 = 0;
        int v25 = 2003853684;
        goto LABEL_67;
      }
    }
    float v17 = *(float *)(a1 + 432);
    float v18 = *(float *)(a1 + 436);
    CMTime rhs = *(CMTime *)(a1 + 792);
    CMTime v38 = *(CMTime *)(a1 + 816);
    if (bossStartTimebaseAndAudioContext(a1, (long long *)&rhs.value, &v38, v17, v18))
    {
      *(_DWORD *)(a1 + 424) = 1885435251;
      char v11 = dword_1E9350D98;
      if (dword_1E9350D98)
      {
        unsigned int v36 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFIndex v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        char v11 = 0;
      }
      int v10 = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 424) = 1886151033;
      ++*(_DWORD *)(a1 + 712);
      ++*(_DWORD *)(a1 + 720);
      uint64_t v22 = CMClockGetHostTimeClock();
      CMClockGetTime(&rhs, v22);
      *(CMTime *)(a1 + 656) = rhs;
      CFIndex v23 = *(OpaqueCMTimebase **)(a1 + 112);
      if (v23)
      {
        CMTimebaseGetTime(&rhs, v23);
        *(CMTime *)(a1 + 688) = rhs;
      }
      char v11 = dword_1E9350D98;
      if (dword_1E9350D98)
      {
        unsigned int v36 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFTypeRef v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        char v11 = 0;
      }
      int v10 = 0;
    }
LABEL_68:
    if (a2 == 1) {
      *(_DWORD *)(a1 + 424) = 1684365668;
    }
    if (v11) {
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
LABEL_76:
  int v28 = *(unsigned __int8 *)(a1 + 560);
  if (*(unsigned char *)(a1 + 560))
  {
    int v29 = *(const void **)(a1 + 568);
    *(unsigned char *)(a1 + 560) = 0;
    *(void *)(a1 + 568) = 0;
  }
  else
  {
    int v29 = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 576));
  if (v8 && v9) {
    figPlaybackBossPostSeekDidComplete(a1, v9, 0);
  }
  if (v10)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v28)
  {
    if (dword_1E9350D98)
    {
      unsigned int v36 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFIndex v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v31 = v36;
      if (os_log_type_enabled(v30, type)) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v31 & 0xFFFFFFFE;
      }
      if (v32)
      {
        LODWORD(v38.CFDictionarySetValue(theDict, key, value) = 136315650;
        *(CMTimeValue *)((char *)&v38.value + 4) = (CMTimeValue)"figPlaybackBossPrerollCompleted";
        LOWORD(v38.flags) = 2048;
        *(void *)((char *)&v38.flags + 2) = a1;
        HIWORD(v38.epoch) = 2082;
        uint64_t v39 = a1 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v29) {
      CFRelease(v29);
    }
  }
  if (values) {
    CFRelease(values);
  }
}

void bossBumpCurrentMasterOrder(uint64_t a1)
{
  CFIndex v2 = *(const void **)(a1 + 536);
  ++*(_DWORD *)(a1 + 544);
  *(void *)(a1 + 536) = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(a1 + 544));
  *(unsigned char *)(a1 + 548) = 0;
  uint64_t v3 = *(const void **)(a1 + 552);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 552) = 0;
  }
  *(unsigned char *)(a1 + 560) = 0;
  uint64_t v4 = *(const void **)(a1 + 568);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 568) = 0;
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t bossRemoveVideoCompositionProcessorNotificationListenersForPrerollForBoss(uint64_t result)
{
  if (*(unsigned char *)(result + 781))
  {
    uint64_t v1 = result;
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
    *(unsigned char *)(v1 + 781) = 0;
  }
  return result;
}

uint64_t bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(uint64_t result)
{
  if (*(unsigned char *)(result + 782))
  {
    uint64_t v1 = result;
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
    *(unsigned char *)(v1 + 782) = 0;
  }
  return result;
}

uint64_t FigPlaybackBossSetVideoCompositionProcessor(uint64_t a1, const void *a2)
{
  if (*(unsigned char *)(a1 + 468) && *(void *)(a1 + 592)) {
    bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
  }
  if (*(void *)(a1 + 592))
  {
    bossRemoveVideoCompositionProcessorNotificationListenersForPrerollForBoss(a1);
    uint64_t v4 = *(const void **)(a1 + 592);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 592) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(void *)(a1 + 592);
  if (*(unsigned char *)(a1 + 468))
  {
    if (!v5) {
      return 0;
    }
    bossAddVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
    uint64_t v5 = *(void *)(a1 + 592);
  }
  if (v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    if (!FigNotificationCenterAddWeakListeners()) {
      *(unsigned char *)(a1 + 781) = 1;
    }
  }
  return 0;
}

uint64_t bossAddVideoCompositionProcessorNotificationListenersForSeekForBoss(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t result = FigNotificationCenterAddWeakListeners();
  if (!result) {
    *(unsigned char *)(a1 + 782) = 1;
  }
  return result;
}

uint64_t FigPlaybackBossSetSeekingWaitsForVideoCompositionRendering(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 468) && *(void *)(a1 + 592)) {
    bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
  }
  *(unsigned char *)(a1 + 468) = a2;
  if (a2 && *(void *)(a1 + 592)) {
    bossAddVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
  }
  return 0;
}

uint64_t FigPlaybackBossCanChangeEndTimeTo(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 122) && (!*(unsigned char *)(a1 + 123) || !*(unsigned char *)(a1 + 124))) {
    return 0;
  }
  __n128 v7 = 0uLL;
  CMTimeEpoch v8 = 0;
  FigPlaybackBossGetDuration(a1, &v7);
  if (*(unsigned char *)(a1 + 180))
  {
    CMTime time1 = *(CMTime *)(a1 + 168);
    *(__n128 *)&v5.xpc_object_t value = v7;
    v5.CMTimeEpoch epoch = v8;
    if (CMTimeCompare(&time1, &v5) < 0) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a2 + 12) & 1) != 0
    && (time1 = *(CMTime *)a2, *(__n128 *)&v5.xpc_object_t value = v7, v5.epoch = v8, CMTimeCompare(&time1, &v5) < 0))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

__n128 FigPlaybackBossGetEndTime@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 168);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 184);
  return result;
}

__n128 FigPlaybackBossGetReverseEndTime@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[18];
  *a2 = result;
  a2[1].n128_u64[0] = a1[19].n128_u64[0];
  return result;
}

uint64_t FigPlaybackBossSetAdvanceTimeForOverlappedPlayback(uint64_t a1, long long *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 120))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
    {
      uint64_t v5 = MEMORY[0x1E4F1F9F8];
      *a2 = *MEMORY[0x1E4F1F9F8];
      *((void *)a2 + 2) = *(void *)(v5 + 16);
    }
    if (dword_1E9350D98)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v7 = *a2;
    *(void *)(a1 + 352) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 336) = v7;
    if (*(_DWORD *)(a1 + 424) == 1886151033)
    {
      CMTimeEpoch v8 = *(OpaqueCMTimebase **)(a1 + 112);
      if (v8) {
        float EffectiveRate = CMTimebaseGetEffectiveRate(v8);
      }
      else {
        float EffectiveRate = 1.0;
      }
      bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, EffectiveRate);
    }
    return 0;
  }
}

uint64_t bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(uint64_t a1, float a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  memset(&v8, 0, sizeof(v8));
  uint64_t v3 = (CMTime *)(a1 + 336);
  if ((*(unsigned char *)(a1 + 348) & 1) == 0) {
    goto LABEL_9;
  }
  CMTimebaseGetTime(&v8, *(CMTimebaseRef *)(a1 + 112));
  if (a2 <= 0.0)
  {
    CMTime time1 = *v3;
    CMTime time2 = v8;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      if (!dword_1E9350D98) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
LABEL_9:
    CMTime time1 = *v3;
    return bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, &time1);
  }
  CMTime time1 = *v3;
  CMTime time2 = v8;
  if (CMTimeCompare(&time1, &time2) > 0) {
    goto LABEL_9;
  }
  if (dword_1E9350D98)
  {
LABEL_5:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_10:
  CMTime time1 = *v3;
  bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, &time1);
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 368) = *MEMORY[0x1E4F1F9F8];
  *(void *)(a1 + 384) = *(void *)(v7 + 16);
  return CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 360));
}

__n128 FigPlaybackBossGetAdvanceTimeForOverlappedPlayback@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[21];
  *a2 = result;
  a2[1].n128_u64[0] = a1[22].n128_u64[0];
  return result;
}

void bossGetContentDuration(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFDictionaryRef dictionaryRepresentation = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = (void *)MEMORY[0x1E4F1CF80];
  if (*(unsigned char *)(a1 + 122)
    || ((v8 = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 40)), (uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v10 = 0)
      : (uint64_t v10 = v9),
        (CFTypeID v16 = *(unsigned int (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v10 + 48)) == 0
     || (!v16(v8, @"EstimatedDuration", *v4, &dictionaryRepresentation)
       ? (BOOL v17 = dictionaryRepresentation == 0)
       : (BOOL v17 = 1),
         v17)))
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 40));
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v7 + 48);
    if (!v11)
    {
      CFDictionaryRef v13 = dictionaryRepresentation;
      goto LABEL_16;
    }
    BOOL v12 = v11(FigBaseObject, @"Duration", *v4, &dictionaryRepresentation) == 0;
  }
  else
  {
    BOOL v12 = 1;
  }
  CFDictionaryRef v13 = dictionaryRepresentation;
  if (!v12 || dictionaryRepresentation == 0)
  {
LABEL_16:
    uint64_t v15 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a2 + 16) = *(void *)(v15 + 16);
    if (!v13) {
      return;
    }
    goto LABEL_17;
  }
  CMTimeMakeFromDictionary((CMTime *)a2, dictionaryRepresentation);
  CFDictionaryRef v13 = dictionaryRepresentation;
  if (!dictionaryRepresentation) {
    return;
  }
LABEL_17:
  CFRelease(v13);
}

uint64_t FigPlaybackBossSetVolume(uint64_t a1, float a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  float valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v3) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v7 = 0;
    do
    {
      uint64_t v8 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7) + 10);
      if (v8)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v12 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v11 + 56);
        if (v12) {
          v12(FigBaseObject, @"SoftwareVolume1", v3);
        }
      }
      ++v7;
    }
    while (*(void *)(a1 + 80) > v7);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  CFRelease(v3);
  return 0;
}

float FigPlaybackBossGetVolume(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  float valuePtr = 0.0;
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v3 = 0;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t v5 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v3) + 10);
      if (v5)
      {
        cf[0] = 0;
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v5);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
        if (v9) {
          v9(FigBaseObject, @"SoftwareVolume1", v4, cf);
        }
        if (cf[0])
        {
          CFTypeID v10 = CFGetTypeID(cf[0]);
          if (v10 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)cf[0], kCFNumberFloatType, &valuePtr);
            CFRelease(cf[0]);
            break;
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
      }
      ++v3;
    }
    while (*(void *)(a1 + 80) > v3);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  return valuePtr;
}

uint64_t FigPlaybackBossSetMuted(uint64_t a1, int a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      uint64_t v7 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t v8 = *v7;
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
      if (*((_DWORD *)ValueAtIndex + 18) == 1936684398)
      {
        uint64_t v10 = ValueAtIndex[10];
        if (v10)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t))(v13 + 56);
          if (v14) {
            v14(FigBaseObject, @"Muted", v8);
          }
        }
      }
      ++v6;
    }
    while (*(void *)(a1 + 80) > v6);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossGetMuted(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v3 = 0;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v3);
      if (*((_DWORD *)ValueAtIndex + 18) == 1936684398)
      {
        uint64_t v6 = ValueAtIndex[10];
        if (v6)
        {
          cf[0] = 0;
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
          uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v8) {
            uint64_t v9 = v8;
          }
          else {
            uint64_t v9 = 0;
          }
          uint64_t v10 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
          if (v10) {
            v10(FigBaseObject, @"Muted", v4, cf);
          }
          if (cf[0])
          {
            CFTypeID v11 = CFGetTypeID(cf[0]);
            if (v11 == CFBooleanGetTypeID())
            {
              uint64_t Value = CFBooleanGetValue((CFBooleanRef)cf[0]);
              CFRelease(cf[0]);
              goto LABEL_18;
            }
            if (cf[0]) {
              CFRelease(cf[0]);
            }
          }
        }
      }
      ++v3;
    }
    while (*(void *)(a1 + 80) > v3);
  }
  uint64_t Value = 0;
LABEL_18:
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  return Value;
}

uint64_t FigPlaybackBossSnapTimeToIFrameWithRange(uint64_t a1, OpaqueCMTimebase *a2, CMTime *a3, unsigned int a4, CMTime *a5, CMTime *a6, uint64_t a7)
{
  uint64_t v7 = a7;
  CFTypeID v11 = a3;
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&v88.unsigned int value = *MEMORY[0x1E4F1F9F8];
  long long v12 = *(_OWORD *)&v88.value;
  CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v88.CMTimeEpoch epoch = v13;
  char v87 = 0;
  long long v78 = *(_OWORD *)&v88.value;
  if (dword_1E9350D98)
  {
    LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = a7;
    CFTypeID v11 = a3;
    long long v12 = *(_OWORD *)&v88.value;
  }
  if ((a5->flags & 0x1D) == 1)
  {
    *(_OWORD *)CMTime time = *(_OWORD *)&a5->value;
    *(void *)&time[16] = a5->epoch;
    CMTime time2 = *v11;
    int32_t v16 = CMTimeCompare((CMTime *)time, &time2);
    long long v12 = *(_OWORD *)&v88.value;
    if (v16 >= 1) {
      return FigSignalErrorAt();
    }
  }
  if ((a6->flags & 0x1D) == 1)
  {
    *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
    *(void *)&time[16] = v11->epoch;
    CMTime time2 = *a6;
    int32_t v17 = CMTimeCompare((CMTime *)time, &time2);
    long long v12 = *(_OWORD *)&v88.value;
    if (v17 >= 1) {
      return FigSignalErrorAt();
    }
  }
  int v18 = 0;
  switch((char)a4)
  {
    case 0:
      CMTime time2 = *v11;
      LOBYTE(v85.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      long long v19 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
      long long v92 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
      long long v93 = v19;
      long long v20 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
      long long v94 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
      long long v95 = v20;
      long long v21 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
      *(_OWORD *)CMTime time = *MEMORY[0x1E4F1FA00];
      *(_OWORD *)&time[16] = v21;
      if (!bossScanForEditSegmentContainingTrackTime(a1, (uint64_t)&time2, &v85, &type, (uint64_t)time, 0, 0, 0)&& (!LOBYTE(v85.value) || LOBYTE(type.value) && (time[12] & 0x1D) == 1))
      {
        if (dword_1E9350D98)
        {
          LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int value = v85.value;
          if (os_log_type_enabled(v22, type.value)) {
            unsigned int v24 = value;
          }
          else {
            unsigned int v24 = value & 0xFFFFFFFE;
          }
          if (v24)
          {
            *(_OWORD *)CMTime time = *(_OWORD *)&a3->value;
            *(void *)&time[16] = a3->epoch;
            Float64 Seconds = CMTimeGetSeconds((CMTime *)time);
            LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 136315394;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
            LOWORD(time2.flags) = 2048;
            *(Float64 *)((char *)&time2.flags + 2) = Seconds;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t TimeOfNextIFrameInDirection = 0;
        goto LABEL_107;
      }
      if (!dword_1E9350D98) {
        return 0;
      }
      LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v37 = v85.value;
      if (os_log_type_enabled(v36, type.value)) {
        unsigned int v38 = v37;
      }
      else {
        unsigned int v38 = v37 & 0xFFFFFFFE;
      }
      if (v38)
      {
        *(_OWORD *)CMTime time = *(_OWORD *)&a3->value;
        *(void *)&time[16] = a3->epoch;
        Float64 v39 = CMTimeGetSeconds((CMTime *)time);
        LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 136315394;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
        LOWORD(time2.flags) = 2048;
        *(Float64 *)((char *)&time2.flags + 2) = v39;
        _os_log_send_and_compose_impl();
      }
      goto LABEL_123;
    case 1:
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      uint64_t TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, -1, 0, (a4 >> 8) & 1, &v88, &v87, 0);
      if (v87)
      {
        if (!dword_1E9350D98) {
          goto LABEL_107;
        }
        goto LABEL_21;
      }
      if ((v88.flags & 1) == 0)
      {
        if (!dword_1E9350D98) {
          return TimeOfNextIFrameInDirection;
        }
        goto LABEL_62;
      }
      if ((a5->flags & 0x1D) != 1
        || (*(CMTime *)time = v88, CMTime time2 = *a5, (CMTimeCompare((CMTime *)time, &time2) & 0x80000000) == 0))
      {
        if (!dword_1E9350D98) {
          goto LABEL_134;
        }
        goto LABEL_109;
      }
      if (!dword_1E9350D98) {
        goto LABEL_133;
      }
      LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
      goto LABEL_132;
    case 2:
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      uint64_t TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, 1, 0, (a4 >> 8) & 1, &v88, &v87, 0);
      if (v87)
      {
        if (dword_1E9350D98)
        {
LABEL_21:
          LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
          goto LABEL_59;
        }
        goto LABEL_107;
      }
      if ((v88.flags & 1) == 0)
      {
        if (dword_1E9350D98)
        {
LABEL_62:
          LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          uint64_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
          goto LABEL_90;
        }
        return TimeOfNextIFrameInDirection;
      }
      if ((a6->flags & 0x1D) == 1)
      {
        *(CMTime *)CMTime time = v88;
        CMTime time2 = *a6;
        if (CMTimeCompare((CMTime *)time, &time2) >= 1)
        {
          if (!dword_1E9350D98) {
            goto LABEL_133;
          }
          LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
          goto LABEL_132;
        }
      }
      if (!dword_1E9350D98) {
        goto LABEL_134;
      }
LABEL_109:
      LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
      goto LABEL_110;
    case 3:
      if (!a2) {
        goto LABEL_32;
      }
      CMTimebaseGetTime(&time1, a2);
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      int32_t v28 = CMTimeCompare(&time1, (CMTime *)time);
      if (v28 < 0) {
        int v29 = 1;
      }
      else {
        int v29 = -1;
      }
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      uint64_t TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, v29, 0, (a4 >> 8) & 1, &v88, &v87, 0);
      if (v87)
      {
        if (dword_1E9350D98)
        {
          LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          CFIndex v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
LABEL_59:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_107:
        long long v56 = *(_OWORD *)&a3->value;
        *(void *)(v7 + 16) = a3->epoch;
        *(_OWORD *)uint64_t v7 = v56;
        return TimeOfNextIFrameInDirection;
      }
      if ((v88.flags & 1) == 0)
      {
        if (!dword_1E9350D98) {
          return TimeOfNextIFrameInDirection;
        }
        LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
        uint64_t v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
LABEL_90:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return TimeOfNextIFrameInDirection;
      }
      if (v28 < 0)
      {
        if ((a6->flags & 0x1D) == 1)
        {
          *(CMTime *)CMTime time = v88;
          CMTime time2 = *a6;
          int32_t v64 = CMTimeCompare((CMTime *)time, &time2);
          uint64_t v59 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
          if (v64 < 1) {
            goto LABEL_128;
          }
LABEL_126:
          CMTime v88 = *a3;
LABEL_128:
          if (*((_DWORD *)v59 + 870))
          {
            LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
            LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
            CFTypeID v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)uint64_t v7 = *(_OWORD *)&v88.value;
          CMTimeEpoch epoch = v88.epoch;
          goto LABEL_135;
        }
      }
      else if ((a5->flags & 0x1D) == 1)
      {
        *(CMTime *)CMTime time = v88;
        CMTime time2 = *a5;
        int32_t v58 = CMTimeCompare((CMTime *)time, &time2);
        uint64_t v59 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_128;
        }
        goto LABEL_126;
      }
      uint64_t v59 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      goto LABEL_128;
    case 4:
      goto LABEL_33;
    case 5:
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      uint64_t TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, -1, 1, (a4 >> 8) & 1, &v88, 0, 0);
      if ((v88.flags & 1) == 0)
      {
        if (!dword_1E9350D98) {
          return TimeOfNextIFrameInDirection;
        }
        goto LABEL_38;
      }
      if ((a5->flags & 0x1D) != 1
        || (*(CMTime *)time = v88, CMTime time2 = *a5, (CMTimeCompare((CMTime *)time, &time2) & 0x80000000) == 0))
      {
        if (!dword_1E9350D98) {
          goto LABEL_134;
        }
        goto LABEL_48;
      }
      if (!dword_1E9350D98) {
        goto LABEL_133;
      }
      LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
      goto LABEL_132;
    case 6:
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      uint64_t TimeOfNextIFrameInDirection = bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, 1, 1, (a4 >> 8) & 1, &v88, 0, 0);
      if (v88.flags)
      {
        if ((a6->flags & 0x1D) == 1 && (*(CMTime *)time = v88, CMTime time2 = *a6, CMTimeCompare((CMTime *)time, &time2) >= 1))
        {
          if (dword_1E9350D98)
          {
            LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
            LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
            int v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
LABEL_132:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_133:
          CMTime v88 = *a3;
        }
        else if (dword_1E9350D98)
        {
LABEL_48:
          LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
          CMTime v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
LABEL_110:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_134:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)&v88.value;
        CMTimeEpoch epoch = v88.epoch;
LABEL_135:
        *(void *)(v7 + 16) = epoch;
      }
      else if (dword_1E9350D98)
      {
LABEL_38:
        LODWORD(v85.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
        unsigned int v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        goto LABEL_90;
      }
      return TimeOfNextIFrameInDirection;
    case 7:
LABEL_32:
      int v18 = 2;
LABEL_33:
      *(_OWORD *)&v85.unsigned int value = v12;
      v85.CMTimeEpoch epoch = v13;
      *(_OWORD *)&type.unsigned int value = v12;
      type.CMTimeEpoch epoch = v13;
      __int16 v83 = 0;
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, -1, v18, (a4 >> 8) & 1, &v85, &v87, (BOOL *)&v83 + 1);
      if (v87)
      {
        if (dword_1E9350D98)
        {
          unsigned int v82 = 0;
          os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
          unsigned int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
LABEL_119:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_120;
        }
        goto LABEL_120;
      }
      *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
      *(void *)&time[16] = v11->epoch;
      bossGetTimeOfNextIFrameInDirection(a1, (CMTime *)time, 1, v18, (a4 >> 8) & 1, &type, &v87, (BOOL *)&v83);
      if (v87)
      {
        if (dword_1E9350D98)
        {
LABEL_44:
          unsigned int v82 = 0;
          os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
          CFIndex v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
LABEL_143:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_144:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)&type.value;
        CMTimeEpoch v62 = type.epoch;
        goto LABEL_145;
      }
      if ((a5->flags & 0x1D) == 1
        && (v85.flags & 0x1D) == 1
        && (*(CMTime *)time = v85, CMTime time2 = *a5, CMTimeCompare((CMTime *)time, &time2) < 0))
      {
        long long v68 = *(_OWORD *)&v11->value;
        *(void *)(v7 + 16) = v11->epoch;
        *(_OWORD *)uint64_t v7 = v68;
        long long v42 = v78;
        *(_OWORD *)&v85.unsigned int value = v78;
        v85.CMTimeEpoch epoch = v13;
        uint64_t v41 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      }
      else
      {
        uint64_t v41 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        long long v42 = v78;
      }
      if ((a6->flags & 0x1D) == 1 && (type.flags & 0x1D) == 1)
      {
        *(CMTime *)CMTime time = type;
        CMTime time2 = *a6;
        int32_t v43 = CMTimeCompare((CMTime *)time, &time2);
        long long v42 = v78;
        if (v43 >= 1)
        {
          long long v44 = *(_OWORD *)&v11->value;
          *(void *)(v7 + 16) = v11->epoch;
          *(_OWORD *)uint64_t v7 = v44;
          *(_OWORD *)&type.unsigned int value = v78;
          type.CMTimeEpoch epoch = v13;
        }
      }
      if (HIBYTE(v83) | v83)
      {
        if (!HIBYTE(v83))
        {
          *(_OWORD *)&v85.unsigned int value = v42;
          v85.CMTimeEpoch epoch = v13;
        }
        if (!(_BYTE)v83)
        {
          *(_OWORD *)&type.unsigned int value = v42;
          type.CMTimeEpoch epoch = v13;
        }
      }
      int v45 = type.flags & 0x1D;
      if ((v85.flags & 0x1D) == 1)
      {
        if (v45 != 1)
        {
          if (*((_DWORD *)v41 + 870))
          {
            unsigned int v82 = 0;
            os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
            uint64_t v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
            goto LABEL_119;
          }
LABEL_120:
          *(_OWORD *)uint64_t v7 = *(_OWORD *)&v85.value;
          CMTimeEpoch v62 = v85.epoch;
LABEL_145:
          *(void *)(v7 + 16) = v62;
          return 0;
        }
        *(CMTime *)CMTime time = type;
        CMTime time2 = *v11;
        CMTimeSubtract(&v80, (CMTime *)time, &time2);
        *(_OWORD *)CMTime time = *(_OWORD *)&v11->value;
        *(void *)&time[16] = v11->epoch;
        CMTime time2 = v85;
        CMTimeSubtract(&v79, (CMTime *)time, &time2);
        int32_t v46 = CMTimeCompare(&v80, &v79);
        int v47 = *((_DWORD *)v41 + 870);
        if ((v46 & 0x80000000) == 0)
        {
          if (v47)
          {
            unsigned int v82 = 0;
            os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
            uint64_t v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v49 = v82;
            if (os_log_type_enabled(v48, v81)) {
              unsigned int v50 = v49;
            }
            else {
              unsigned int v50 = v49 & 0xFFFFFFFE;
            }
            if (v50)
            {
              *(_OWORD *)CMTime time = *(_OWORD *)&a3->value;
              *(void *)&time[16] = a3->epoch;
              Float64 v51 = CMTimeGetSeconds((CMTime *)time);
              *(CMTime *)CMTime time = v85;
              Float64 v52 = CMTimeGetSeconds((CMTime *)time);
              LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 136315650;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
              LOWORD(time2.flags) = 2048;
              *(Float64 *)((char *)&time2.flags + 2) = v51;
              HIWORD(time2.epoch) = 2048;
              Float64 v90 = v52;
              _os_log_send_and_compose_impl();
            }
            goto LABEL_119;
          }
          goto LABEL_120;
        }
        if (v47)
        {
          unsigned int v82 = 0;
          os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
          uint64_t v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v70 = v82;
          if (os_log_type_enabled(v69, v81)) {
            unsigned int v71 = v70;
          }
          else {
            unsigned int v71 = v70 & 0xFFFFFFFE;
          }
          if (v71)
          {
            *(_OWORD *)CMTime time = *(_OWORD *)&a3->value;
            *(void *)&time[16] = a3->epoch;
            Float64 v72 = CMTimeGetSeconds((CMTime *)time);
            *(CMTime *)CMTime time = type;
            Float64 v73 = CMTimeGetSeconds((CMTime *)time);
            LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 136315650;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSnapTimeToIFrameWithRange";
            LOWORD(time2.flags) = 2048;
            *(Float64 *)((char *)&time2.flags + 2) = v72;
            HIWORD(time2.epoch) = 2048;
            Float64 v90 = v73;
            _os_log_send_and_compose_impl();
          }
          goto LABEL_143;
        }
        goto LABEL_144;
      }
      int v55 = *((_DWORD *)v41 + 870);
      if (v45 == 1)
      {
        if (v55) {
          goto LABEL_44;
        }
        goto LABEL_144;
      }
      if (v55)
      {
        unsigned int v82 = 0;
        os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
        CFIndex v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
LABEL_123:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    default:
      return FigSignalErrorAt();
  }
}

uint64_t FigPlaybackBossSetDroppableFrameMinimumIntervalAndRequestedFrameTimestampIntervalStep(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  uint64_t v23 = *MEMORY[0x1E4F1F9F8];
  int v24 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  uint64_t v21 = v23;
  int v22 = v24;
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(uint64_t *)(a1 + 80) <= 0)
    {
      MEMORY[0x19970E930](*(void *)(a1 + 64));
    }
    else
    {
      CFIndex v8 = 0;
      int v9 = 0;
      int v17 = *(_DWORD *)(v3 + 12);
      LOBYTE(v18) = v17;
      do
      {
        uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v8);
        if (*((_DWORD *)ValueAtIndex + 18) == 1986618469)
        {
          CFTypeID v11 = ValueAtIndex;
          long long v12 = ValueAtIndex + 292;
          CMTime time1 = *(CMTime *)(ValueAtIndex + 292);
          CMTime time2 = *a2;
          if (CMTimeCompare(&time1, &time2))
          {
            if ((v18 & 1) == 0)
            {
              uint64_t v23 = *(void *)v12;
              int v24 = *((_DWORD *)v12 + 2);
              int v18 = *((_DWORD *)v11 + 76);
            }
            long long v13 = *(_OWORD *)&a2->value;
            *((void *)v12 + 2) = a2->epoch;
            *(_OWORD *)long long v12 = v13;
            int v9 = 1;
            *(unsigned char *)(a1 + 134) = 1;
          }
          uint64_t v14 = (uint64_t *)(v11 + 316);
          CMTime time1 = *(CMTime *)(v11 + 316);
          CMTime time2 = *a3;
          if (CMTimeCompare(&time1, &time2))
          {
            if ((v17 & 1) == 0)
            {
              uint64_t v21 = *v14;
              int v22 = *((_DWORD *)v11 + 81);
              int v17 = *((_DWORD *)v11 + 82);
            }
            long long v15 = *(_OWORD *)&a3->value;
            *(void *)(v11 + 332) = a3->epoch;
            *(_OWORD *)uint64_t v14 = v15;
            int v9 = 1;
            *(unsigned char *)(a1 + 134) = 1;
          }
        }
        ++v8;
      }
      while (*(void *)(a1 + 80) > v8);
      MEMORY[0x19970E930](*(void *)(a1 + 64));
      if (v9)
      {
        if (dword_1E9350D98) {
          goto LABEL_23;
        }
        return 0;
      }
    }
    if (dword_1E9350D98 >= 2)
    {
LABEL_23:
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }

  return FigSignalErrorAt();
}

float FigPlaybackBossGetRate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 120))
    {
      FigSignalErrorAt();
      return 1.0;
    }
    else
    {
      return *(float *)(a1 + 432);
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0.0;
  }
}

uint64_t FigPlaybackBossSetRateAndAnchorTime(uint64_t a1, CMTime *a2, CMTime *a3, const void *a4, float a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    int v16 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 120)) {
    return FigSignalErrorAt();
  }
  if (a5 == 0.0)
  {
    if ((a2->flags & 0x1D) == 1)
    {
      CMTime time = *a2;
      p_CMTime time = &time;
      uint64_t v13 = a1;
      int v14 = 2;
    }
    else
    {
      p_CMTime time = (CMTime *)MEMORY[0x1E4F1F9F8];
      uint64_t v13 = a1;
      int v14 = 1;
    }
    figPlaybackBossSetRateToZero(v13, v14, p_time);
    return 0;
  }
  else
  {
    CMTime time = *a2;
    CMTime v17 = *a3;
    return figPlaybackBossSetRateToNonZero(a1, &time, &v17, a4, a5);
  }
}

uint64_t figPlaybackBossSetRateToNonZero(uint64_t a1, CMTime *a2, CMTime *a3, const void *a4, float a5)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  int v91 = 0;
  uint64_t v90 = 0;
  int v8 = *(unsigned __int8 *)(a1 + 131);
  memset(&v89, 0, sizeof(v89));
  memset(&v88, 0, sizeof(v88));
  *(unsigned char *)(a1 + 128) = 0;
  int v9 = (CMTime *)MEMORY[0x1E4F1F9F8];
  bossScheduleReachedEndCallbackForTime(a1, MEMORY[0x1E4F1F9F8]);
  bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, v9);
  MEMORY[0x19970E910](*(void *)(a1 + 576));
  bossConfigureRatePlan(*(unsigned __int8 *)(a1 + 104), a1 + 392, (float *)(a1 + 404), (uint64_t)&v90, a5);
  float v10 = *(float *)(a1 + 504);
  if (v10 == 0.0)
  {
    if (dword_1E9350D98) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  if (v10 <= 0.0 == *(float *)&v90 > 0.0)
  {
    if (dword_1E9350D98) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a1 + 106))
  {
    if (dword_1E9350D98) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a1 + 107))
  {
    int v11 = 1;
    if (v10 != *(float *)&v90 && *(float *)&v90 != 0.0)
    {
      if (dword_1E9350D98)
      {
LABEL_14:
        LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_15:
      int v11 = 0;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v91 != *(unsigned __int8 *)(a1 + 440))
  {
    if (dword_1E9350D98)
    {
LABEL_22:
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_23:
    int v11 = 0;
    goto LABEL_24;
  }
  if ((_BYTE)v91
    && (float)(*((float *)&v90 + 1) * *(float *)(a1 + 432)) != (float)(*(float *)(a1 + 436) * *(float *)&v90))
  {
    if (dword_1E9350D98) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_24:
  float v14 = *(float *)(a1 + 504);
  if (*(unsigned char *)(a1 + 132))
  {
    if (v14 == *(float *)&v90) {
      goto LABEL_32;
    }
    if (!dword_1E9350D98) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (fabsf(v14) <= *(float *)(a1 + 136) != fabsf(*(float *)&v90) > *(float *)(a1 + 136)) {
    goto LABEL_32;
  }
  if (dword_1E9350D98)
  {
LABEL_30:
    LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    long long v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_31:
  int v11 = 0;
LABEL_32:
  int v16 = (float *)(a1 + 432);
  if (*(unsigned __int8 *)(a1 + 441) != BYTE1(v91))
  {
    if (dword_1E9350D98)
    {
LABEL_38:
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CMTime v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_39:
    int v11 = 0;
    goto LABEL_40;
  }
  if (*(unsigned char *)(a1 + 441) && *v16 != *(float *)&v90)
  {
    if (dword_1E9350D98) {
      goto LABEL_38;
    }
    goto LABEL_39;
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 548))
  {
    if (dword_1E9350D98)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v11 = 0;
  }
  if (*(unsigned char *)(a1 + 105) && *(float *)(a1 + 436) != *((float *)&v90 + 1))
  {
    if (dword_1E9350D98)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v11 = 0;
  }
  float v20 = *(float *)(a1 + 504);
  float v21 = *(float *)&v90;
  if (v20 == 0.0 && *(float *)&v90 < 0.0)
  {
    if (dword_1E9350D98)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v11 = 0;
      float v20 = *(float *)(a1 + 504);
      float v21 = *(float *)&v90;
    }
    else
    {
      int v11 = 0;
    }
  }
  if (v20 <= 0.0 != v21 > 0.0) {
    int v23 = v8;
  }
  else {
    int v23 = 0;
  }
  if ((a2->flags & 0x1D) == 1)
  {
    if (dword_1E9350D98)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v23 = 0;
    int v11 = 0;
  }
  int v25 = a3->flags & 0x1D;
  if (v25 == 1)
  {
    if (dword_1E9350D98)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v23 = 0;
    int v11 = 0;
  }
  if (BYTE1(v91) && *v16 == 0.0 && *(float *)&v90 > 0.0 && *(float *)&v90 < 1.0)
  {
    if (dword_1E9350D98)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v11 = 0;
  }
  if (*(unsigned char *)(a1 + 134))
  {
    if (dword_1E9350D98)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int32_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v11 = 0;
  }
  if (*(float *)(a1 + 504) != *(float *)&v90 || *(unsigned char *)(a1 + 134))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    bossSetMentorPropertiesForRate(a1, 0, *(float *)&v90);
    MEMORY[0x19970E930](*(void *)(a1 + 64));
  }
  *(unsigned char *)(a1 + 134) = 0;
  if (*(unsigned char *)(a1 + 468) && (*(unsigned char *)(a1 + 484) & 1) != 0)
  {
    CFIndex v30 = *(OpaqueCMTimebase **)(a1 + 112);
    CMTime time = *(CMTime *)(a1 + 472);
    CMTimebaseSetTime(v30, &time);
  }
  uint64_t v31 = MEMORY[0x1E4F1F9F8];
  long long v76 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 472) = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v32 = *(void *)(v31 + 16);
  *(void *)(a1 + 488) = v32;
  if (!v11)
  {
    BOOL v34 = 0;
    int v40 = *(_DWORD *)(a1 + 424);
    if (v40 <= 1886530415)
    {
      if (v40 > 1886151032)
      {
        int v44 = 3;
        if (v40 != 1886151033)
        {
          if (v40 == 1886154860)
          {
            bossBumpCurrentMasterOrder(a1);
            MEMORY[0x19970E910](*(void *)(a1 + 64));
            if (*(unsigned char *)(a1 + 840))
            {
              LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            bossSetMentorModesToDoNothing(a1, 0, *(void *)(a1 + 80), 2);
            MEMORY[0x19970E930](*(void *)(a1 + 64));
            if ((*(_DWORD *)(a1 + 456) & 0x1D) == 1)
            {
              uint64_t v57 = *(OpaqueCMTimebase **)(a1 + 112);
              CMTime time = *(CMTime *)(a1 + 444);
              CMTimebaseSetTime(v57, &time);
              *(_OWORD *)(a1 + 444) = v76;
              *(void *)(a1 + 460) = v32;
            }
            MEMORY[0x19970E910](*(void *)(a1 + 64));
            if (*(unsigned char *)(a1 + 840))
            {
              LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              int32_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            bossResetSideQueuesAndSwitchMentorsToMainQueues(a1);
            MEMORY[0x19970E930](*(void *)(a1 + 64));
            int v44 = 2;
          }
          else
          {
            uint64_t v36 = 0;
            if (v40 != 1886155888) {
              goto LABEL_183;
            }
          }
        }
        CMTimebaseGetTime(&v79, *(CMTimebaseRef *)(a1 + 112));
        if (bossCheckTimeWithEndTimes(a1, &v79, 0, *(float *)&v90)) {
          goto LABEL_157;
        }
        bossBumpCurrentMasterOrder(a1);
        MEMORY[0x19970E910](*(void *)(a1 + 64));
        if (v23)
        {
          if (*(unsigned char *)(a1 + 840))
          {
            uint64_t v59 = a4;
            LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = rhs.value;
            if (os_log_type_enabled(v60, type)) {
              unsigned int v62 = value;
            }
            else {
              unsigned int v62 = value & 0xFFFFFFFE;
            }
            if (v62)
            {
              LODWORD(v92.CFDictionarySetValue(theDict, key, value) = 136315394;
              *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"figPlaybackBossSetRateToNonZero";
              LOWORD(v92.flags) = 2048;
              *(void *)((char *)&v92.flags + 2) = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a4 = v59;
          }
          bossSetMentorModesToDoNothing(a1, 0, *(void *)(a1 + 80), 2);
          bossSwitchMentorsToSideQueues(a1, 0);
          MEMORY[0x19970E930](*(void *)(a1 + 64));
          CMTimebaseGetTime(&v89, *(CMTimebaseRef *)(a1 + 112));
          if (v89.timescale <= 1000) {
            int32_t timescale = 1000;
          }
          else {
            int32_t timescale = v89.timescale;
          }
          CMTimeMakeWithSeconds(&v88, *(float *)(a1 + 432) * 0.1, timescale);
          CMTime v92 = v89;
          CMTime rhs = v88;
          CMTimeAdd(&time, &v92, &rhs);
          CMTime v89 = time;
          *(void *)int v16 = v90;
          *(_DWORD *)(a1 + 440) = v91;
          if (fabsf(a5) <= *(float *)(a1 + 136))
          {
            if (a5 < 0.0) {
              unsigned int v67 = 1;
            }
            else {
              unsigned int v67 = 2;
            }
            CMTime time = v89;
            bossSnapTimeToIFrameWithRange(a1, &time, v67, MEMORY[0x1E4F1FA08], MEMORY[0x1E4F1FA10], (uint64_t)&v89);
          }
          CMTime time = v89;
          uint64_t started = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v90, v91, 2, 1886154860, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], a4);
          goto LABEL_181;
        }
        if (*(unsigned char *)(a1 + 840))
        {
          LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          CFIndex v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v64 = rhs.value;
          if (os_log_type_enabled(v63, type)) {
            unsigned int v65 = v64;
          }
          else {
            unsigned int v65 = v64 & 0xFFFFFFFE;
          }
          if (v65)
          {
            LODWORD(v92.CFDictionarySetValue(theDict, key, value) = 136315394;
            *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"figPlaybackBossSetRateToNonZero";
            LOWORD(v92.flags) = 2048;
            *(void *)((char *)&v92.flags + 2) = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        bossSetMentorModesToDoNothing(a1, 0, *(void *)(a1 + 80), 0);
        MEMORY[0x19970E930](*(void *)(a1 + 64));
        bossStopTimebaseAndAudioContext(a1, 1, MEMORY[0x1E4F1F9F8]);
        uint64_t v73 = v90;
        *(void *)int v16 = v90;
        __int16 v74 = v91;
        *(_DWORD *)(a1 + 440) = v91;
        if (v25 == 1) {
          int v75 = 1886151033;
        }
        else {
          int v75 = 1886530416;
        }
        *(_OWORD *)&time.unsigned int value = v76;
        time.CMTimeEpoch epoch = v32;
        CMTime v92 = *a2;
        CMTime rhs = *a3;
        uint64_t v48 = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v73, v74, v44, v75, &v92, (long long *)&rhs.value, a4);
        goto LABEL_135;
      }
      if (v40 != 1634624887)
      {
        if (v40 == 1768189029) {
          goto LABEL_136;
        }
        int v41 = 1885435251;
        goto LABEL_129;
      }
LABEL_130:
      CMTimebaseGetTime(&v81, *(CMTimebaseRef *)(a1 + 112));
      if (bossCheckTimeWithEndTimes(a1, &v81, 0, *(float *)&v90)) {
        goto LABEL_157;
      }
      uint64_t v45 = v90;
      *(void *)int v16 = v90;
      __int16 v46 = v91;
      *(_DWORD *)(a1 + 440) = v91;
      if (v25 == 1) {
        int v47 = 1886151033;
      }
      else {
        int v47 = 1886530416;
      }
      *(_OWORD *)&time.unsigned int value = v76;
      time.CMTimeEpoch epoch = v32;
      CMTime v92 = *a2;
      CMTime rhs = *a3;
      uint64_t v48 = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v45, v46, 3, v47, &v92, (long long *)&rhs.value, a4);
LABEL_135:
      uint64_t v36 = v48;
      BOOL v34 = v48 != 0;
      goto LABEL_183;
    }
    if (v40 > 1919247480)
    {
      if (v40 == 2003853684 || v40 == 1920298606) {
        goto LABEL_136;
      }
      int v41 = 1919247481;
    }
    else
    {
      if (v40 == 1886530416) {
        goto LABEL_130;
      }
      if (v40 == 1886544244) {
        goto LABEL_136;
      }
      int v41 = 1886545266;
    }
LABEL_129:
    uint64_t v36 = 0;
    if (v40 != v41) {
      goto LABEL_183;
    }
    goto LABEL_130;
  }
  CFIndex v33 = *(const void **)(a1 + 416);
  *(void *)(a1 + 416) = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v33) {
    CFRelease(v33);
  }
  BOOL v34 = 0;
  int v35 = *(_DWORD *)(a1 + 424);
  if (v35 > 1886530415)
  {
    if (v35 > 1919247480)
    {
      if (v35 == 1919247481)
      {
        CMTimebaseGetTime(&v85, *(CMTimebaseRef *)(a1 + 112));
        if (bossCheckTimeWithEndTimes(a1, &v85, 0, *(float *)&v90)) {
          goto LABEL_157;
        }
        *(void *)int v16 = v90;
        *(_DWORD *)(a1 + 440) = v91;
        uint64_t v50 = bossStartTimebaseAndAudioContext(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], *(float *)(a1 + 432), *(float *)(a1 + 436));
        if (v50)
        {
          uint64_t v36 = v50;
          *(_DWORD *)(a1 + 432) = 0;
          *(_DWORD *)(a1 + 424) = 1885435251;
          BOOL v34 = 1;
          goto LABEL_183;
        }
        *(_DWORD *)(a1 + 424) = 1886151033;
        ++*(_DWORD *)(a1 + 712);
        ++*(_DWORD *)(a1 + 720);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&time, HostTimeClock);
        *(CMTime *)(a1 + 656) = time;
        long long v56 = *(OpaqueCMTimebase **)(a1 + 112);
        if (v56)
        {
          CMTimebaseGetTime(&time, v56);
          BOOL v34 = 0;
          uint64_t v36 = 0;
          *(CMTime *)(a1 + 688) = time;
          goto LABEL_183;
        }
        goto LABEL_137;
      }
      if (v35 != 1920298606)
      {
        uint64_t v36 = 0;
        if (v35 != 2003853684) {
          goto LABEL_183;
        }
      }
    }
    else
    {
      if (v35 == 1886530416) {
        goto LABEL_120;
      }
      if (v35 != 1886544244)
      {
        uint64_t v36 = 0;
        if (v35 == 1886545266)
        {
          BOOL v34 = 0;
          uint64_t v36 = 0;
          *(void *)int v16 = v90;
          *(_DWORD *)(a1 + 440) = v91;
          *(_DWORD *)(a1 + 424) = 1886530416;
          CMTimeEpoch epoch = a2->epoch;
          *(_OWORD *)(a1 + 792) = *(_OWORD *)&a2->value;
          *(void *)(a1 + 808) = epoch;
          CMTimeEpoch v43 = a3->epoch;
          *(_OWORD *)(a1 + 816) = *(_OWORD *)&a3->value;
          *(void *)(a1 + 832) = v43;
        }
        goto LABEL_183;
      }
    }
LABEL_136:
    LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    unsigned int v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_137:
    BOOL v34 = 0;
    uint64_t v36 = 0;
    goto LABEL_183;
  }
  if (v35 > 1886151032)
  {
    if (v35 == 1886151033) {
      goto LABEL_113;
    }
    if (v35 != 1886154860)
    {
      uint64_t v36 = 0;
      if (v35 != 1886155888) {
        goto LABEL_183;
      }
LABEL_113:
      if (*(float *)&v90 == *v16)
      {
        uint64_t v36 = 0;
        *(_DWORD *)(a1 + 504) = v90;
      }
      else
      {
        CMTimebaseGetTime(&v84, *(CMTimebaseRef *)(a1 + 112));
        if (bossCheckTimeWithEndTimes(a1, &v84, 0, *(float *)&v90)) {
          goto LABEL_157;
        }
        *(void *)int v16 = v90;
        *(_DWORD *)(a1 + 440) = v91;
        uint64_t v51 = MEMORY[0x1E4F1F9F8];
        uint64_t v36 = bossSetPossiblyOutsourcedTimebaseRate(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], *(float *)(a1 + 432), *(float *)(a1 + 436));
        ++*(_DWORD *)(a1 + 720);
        Float64 v52 = *(OpaqueCMTimebase **)(a1 + 112);
        if (v52)
        {
          uint64_t v53 = (_OWORD *)(a1 + 688);
          if (*(unsigned char *)(a1 + 700))
          {
            CMTimebaseGetTime(&lhs, v52);
            *(_OWORD *)&time.unsigned int value = *v53;
            time.CMTimeEpoch epoch = *(void *)(a1 + 704);
            CMTimeSubtract(&v83, &lhs, &time);
            *(double *)(a1 + 680) = *(double *)(a1 + 680) + fabs(CMTimeGetSeconds(&v83));
            _OWORD *v53 = *(_OWORD *)v51;
            *(void *)(a1 + 704) = *(void *)(v51 + 16);
            Float64 v52 = *(OpaqueCMTimebase **)(a1 + 112);
          }
          CMTimebaseGetTime(&time, v52);
          _OWORD *v53 = *(_OWORD *)&time.value;
          *(void *)(a1 + 704) = time.epoch;
        }
      }
      bossScheduleReachedEndCallbackForRate(a1, *(float *)&v90);
      bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, *(float *)&v90);
LABEL_182:
      BOOL v34 = 0;
      goto LABEL_183;
    }
LABEL_120:
    BOOL v34 = 0;
    uint64_t v36 = 0;
    *(void *)int v16 = v90;
    *(_DWORD *)(a1 + 440) = v91;
    goto LABEL_183;
  }
  if (v35 == 1634624887) {
    goto LABEL_94;
  }
  if (v35 == 1768189029) {
    goto LABEL_136;
  }
  uint64_t v36 = 0;
  if (v35 == 1885435251)
  {
LABEL_94:
    CMTimebaseGetTime(&v86, *(CMTimebaseRef *)(a1 + 112));
    if (!bossCheckTimeWithEndTimes(a1, &v86, 0, *(float *)&v90))
    {
      uint64_t v37 = v90;
      *(void *)int v16 = v90;
      __int16 v38 = v91;
      *(_DWORD *)(a1 + 440) = v91;
      *(_OWORD *)&time.unsigned int value = v76;
      time.CMTimeEpoch epoch = v32;
      uint64_t started = figPlaybackBossStartPrerollAndSetPlayState(a1, &time, v37, v38, 3, 1886530416, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], a4);
LABEL_181:
      uint64_t v36 = started;
      goto LABEL_182;
    }
LABEL_157:
    MEMORY[0x19970E930](*(void *)(a1 + 576));
    return 0;
  }
LABEL_183:
  if (dword_1E9350D98)
  {
    LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    long long v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v69 = rhs.value;
    if (os_log_type_enabled(v68, type)) {
      unsigned int v70 = v69;
    }
    else {
      unsigned int v70 = v69 & 0xFFFFFFFE;
    }
    if (v70)
    {
      StateName = getStateName(*(_DWORD *)(a1 + 424));
      LODWORD(v92.CFDictionarySetValue(theDict, key, value) = 136315906;
      *(CMTimeValue *)((char *)&v92.value + 4) = (CMTimeValue)"figPlaybackBossSetRateToNonZero";
      LOWORD(v92.flags) = 2048;
      *(void *)((char *)&v92.flags + 2) = a1;
      HIWORD(v92.epoch) = 2082;
      uint64_t v93 = a1 + 841;
      __int16 v94 = 2082;
      long long v95 = StateName;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 576));
  if (v34)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return v36;
}

uint64_t FigPlaybackBossStartPreroll(uint64_t a1, const __CFDictionary *a2, const void *a3, float a4)
{
  CFDictionaryRef v5 = a2;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  values = a2;
  int v23 = 0;
  uint64_t v22 = 0;
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 120) || a4 == 0.0) {
    return FigSignalErrorAt();
  }
  bossConfigureRatePlan(*(unsigned __int8 *)(a1 + 104), a1 + 392, (float *)(a1 + 404), (uint64_t)&v22, a4);
  MEMORY[0x19970E910](*(void *)(a1 + 576));
  int v11 = *(const void **)(a1 + 496);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 496) = 0;
  }
  uint64_t v9 = 0;
  int v12 = *(_DWORD *)(a1 + 424);
  if (v12 <= 1886530415)
  {
    if (v12 <= 1886151032)
    {
      if (v12 == 1634624887) {
        goto LABEL_16;
      }
      if (v12 != 1768189029)
      {
        if (v12 == 1885435251)
        {
LABEL_16:
          MEMORY[0x19970E910](*(void *)(a1 + 64));
          if (!*(unsigned char *)(a1 + 840))
          {
LABEL_51:
            bossSetMentorPropertiesForRate(a1, 0, *(float *)&v22);
            MEMORY[0x19970E930](*(void *)(a1 + 64));
            float v21 = *(const void **)(a1 + 496);
            *(void *)(a1 + 496) = v5;
            if (v5) {
              CFRetain(v5);
            }
            if (v21) {
              CFRelease(v21);
            }
            CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
            uint64_t started = figPlaybackBossStartPrerollAndSetPlayState(a1, &v25, v22, v23, 3, 1886545266, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], a3);
            goto LABEL_56;
          }
LABEL_50:
          float v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_51;
        }
LABEL_57:
        MEMORY[0x19970E930](*(void *)(a1 + 576));
        return v9;
      }
LABEL_34:
      int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v9 = 0;
      goto LABEL_57;
    }
    if (v12 == 1886151033 || v12 == 1886154860) {
      goto LABEL_32;
    }
    int v13 = 1886155888;
    goto LABEL_31;
  }
  if (v12 <= 1919247480)
  {
    if (v12 != 1886530416 && v12 != 1886544244)
    {
      if (v12 != 1886545266) {
        goto LABEL_57;
      }
      if (*(float *)(a1 + 504) != *(float *)&v22)
      {
        if (dword_1E9350D98)
        {
          int v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19970E910](*(void *)(a1 + 64));
        if (!*(unsigned char *)(a1 + 840)) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
      if (!dword_1E9350D98)
      {
LABEL_33:
        uint64_t started = FigSignalErrorAt();
LABEL_56:
        uint64_t v9 = started;
        goto LABEL_57;
      }
    }
LABEL_32:
    float v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_33;
  }
  if (v12 != 1919247481)
  {
    if (v12 == 1920298606) {
      goto LABEL_34;
    }
    int v13 = 2003853684;
LABEL_31:
    if (v12 != v13) {
      goto LABEL_57;
    }
    goto LABEL_32;
  }
  if (*(float *)(a1 + 504) != *(float *)&v22)
  {
    if (dword_1E9350D98)
    {
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (!*(unsigned char *)(a1 + 840)) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (dword_1E9350D98)
  {
    CMTime v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 576));
  if (v5) {
    CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigPlaybackBossParameter_PrerollToken, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

void bossSetMentorPropertiesForRate(uint64_t a1, uint64_t a2, float a3)
{
  valuePtr[0] = a3;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, valuePtr);
  if (a2 < FigCFRangeGetLimit())
  {
    int v7 = 0;
    double v8 = fabsf(a3);
    CFIndex v9 = a2;
    CFNumberRef v21 = v6;
    do
    {
      uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v9);
      if (*((void *)ValueAtIndex + 24))
      {
        int v11 = ValueAtIndex;
        memset(&v26, 0, sizeof(v26));
        CMTime time = *(CMTime *)(ValueAtIndex + 348);
        CMTimeMultiplyByFloat64(&v26, &time, v8);
        CMTime time = v26;
        CFDictionaryRef v12 = CMTimeCopyAsDictionary(&time, v5);
        memset(&time, 0, sizeof(time));
        CMTime v24 = *(CMTime *)(v11 + 372);
        CMTimeMultiplyByFloat64(&time, &v24, v8);
        CMTime v24 = time;
        CFDictionaryRef v13 = CMTimeCopyAsDictionary(&v24, v5);
        CFDictionaryRef v14 = 0;
        if ((*((_DWORD *)v11 + 76) & 0x1D) == 1)
        {
          memset(&v24, 0, sizeof(v24));
          CMTime v23 = *(CMTime *)(v11 + 292);
          CMTimeMultiplyByFloat64(&v24, &v23, v8);
          CMTime v23 = v24;
          CFDictionaryRef v14 = CMTimeCopyAsDictionary(&v23, v5);
        }
        if ((*((_DWORD *)v11 + 82) & 0x1D) == 1)
        {
          memset(&v24, 0, sizeof(v24));
          CMTime v23 = *(CMTime *)(v11 + 316);
          CMTimeMultiplyByFloat64(&v24, &v23, v8);
          CMTime v23 = v24;
          CFDictionaryRef v15 = CMTimeCopyAsDictionary(&v23, v5);
        }
        else
        {
          CFDictionaryRef v15 = 0;
        }
        int v16 = EditMentorSetProperty(*((void *)v11 + 24), @"IFrameMinimumInterval", v12);
        if (!v7) {
          int v7 = v16;
        }
        if (v12) {
          CFRelease(v12);
        }
        int v17 = EditMentorSetProperty(*((void *)v11 + 24), @"IFrameAverageInterval", v13);
        if (!v7) {
          int v7 = v17;
        }
        if (v13) {
          CFRelease(v13);
        }
        int v18 = EditMentorSetProperty(*((void *)v11 + 24), @"DroppableFrameMinimumInterval", v14);
        if (!v7) {
          int v7 = v18;
        }
        if (v14) {
          CFRelease(v14);
        }
        int v19 = EditMentorSetProperty(*((void *)v11 + 24), @"RequestedFrameTimestampIntervalStep", v15);
        if (!v7) {
          int v7 = v19;
        }
        if (v15) {
          CFRelease(v15);
        }
        CFNumberRef v6 = v21;
        int v20 = EditMentorSetProperty(*((void *)v11 + 24), @"PlayRate", v21);
        if (!v7) {
          int v7 = v20;
        }
      }
      ++v9;
    }
    while (v9 < FigCFRangeGetLimit());
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t FigPlaybackBossGoQuiescent(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    figPlaybackBossTeardownTracks(a1, 0);
    if (dword_1E9350D98)
    {
      uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(a1 + 840) = 1;
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlaybackBossPrerollAndScheduleGaplessStart(uint64_t a1, const void *a2, const void *a3, float a4)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  int v81 = 0;
  CMAttachmentBearerRef target = 0;
  uint64_t v80 = 0;
  MEMORY[0x19970E910](*(void *)(a1 + 576));
  bossConfigureRatePlan(*(unsigned __int8 *)(a1 + 104), a1 + 392, (float *)(a1 + 404), (uint64_t)&v80, a4);
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
  uint64_t v9 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
  if (v9) {
    goto LABEL_89;
  }
  unsigned int v71 = a2;
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2F8], a2, 0);
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    unsigned int v78 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) <= 0)
  {
    MEMORY[0x19970E930](*(void *)(a1 + 64));
LABEL_69:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_89;
  }
  long long v68 = a3;
  uint64_t v69 = v8;
  CFIndex v11 = 0;
  int v70 = 0;
  CFDictionaryRef v12 = v71;
  do
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v11);
    uint64_t v14 = ValueAtIndex[10];
    if (v14)
    {
      CFDictionaryRef v15 = ValueAtIndex;
      int v16 = *(OpaqueCMTimebase **)(a1 + 112);
      CMTimebaseGetTime(&v76, v16);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      int v19 = *(uint64_t (**)(uint64_t, OpaqueCMTimebase *, CMTime *, const void *, void, void))(v18 + 16);
      if (v19)
      {
        CMTime v106 = v76;
        int v20 = v19(v14, v16, &v106, v12, 0, 0);
      }
      else
      {
        int v20 = -12782;
      }
      if (dword_1E9350D98)
      {
        unsigned int v78 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFNumberRef v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v22 = v78;
        if (os_log_type_enabled(v21, type)) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v22 & 0xFFFFFFFE;
        }
        if (v23)
        {
          uint64_t v74 = v15[10];
          unint64_t v24 = *((unsigned int *)v15 + 18);
          unint64_t v25 = v24 >> 24;
          if ((v24 & 0x80000000) != 0)
          {
            int v27 = __maskrune(HIBYTE(*((_DWORD *)v15 + 18)), 0x40000uLL);
            LODWORD(v24) = *((_DWORD *)v15 + 18);
            uint64_t v26 = MEMORY[0x1E4F14390];
          }
          else
          {
            uint64_t v26 = MEMORY[0x1E4F14390];
            int v27 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v25 + 60) & 0x40000;
          }
          if (v27) {
            int v28 = v25;
          }
          else {
            int v28 = 46;
          }
          int v29 = BYTE2(v24);
          int v73 = v28;
          if (BYTE2(v24) > 0x7Fu)
          {
            int v30 = __maskrune(BYTE2(v24), 0x40000uLL);
            LODWORD(v24) = *((_DWORD *)v15 + 18);
          }
          else
          {
            int v30 = *(_DWORD *)(v26 + 4 * BYTE2(v24) + 60) & 0x40000;
          }
          if (v30) {
            int v31 = v29;
          }
          else {
            int v31 = 46;
          }
          int v32 = BYTE1(v24);
          int v72 = v31;
          if (BYTE1(v24) > 0x7Fu)
          {
            int v33 = __maskrune(BYTE1(v24), 0x40000uLL);
            LOBYTE(v24) = *((unsigned char *)v15 + 72);
          }
          else
          {
            int v33 = *(_DWORD *)(v26 + 4 * BYTE1(v24) + 60) & 0x40000;
          }
          if (v33) {
            int v34 = v32;
          }
          else {
            int v34 = 46;
          }
          int v35 = v24;
          if (v24 > 0x7Fu) {
            int v36 = __maskrune(v24, 0x40000uLL);
          }
          else {
            int v36 = *(_DWORD *)(v26 + 4 * v24 + 60) & 0x40000;
          }
          if (v36) {
            int v37 = v35;
          }
          else {
            int v37 = 46;
          }
          __int16 v38 = *(OpaqueCMTimebase **)(a1 + 112);
          CMTimebaseGetTime(&time, v38);
          Float64 Seconds = CMTimeGetSeconds(&time);
          int v82 = 136317954;
          CMTime v83 = "FigPlaybackBossPrerollAndScheduleGaplessStart";
          __int16 v84 = 2048;
          uint64_t v85 = a1;
          __int16 v86 = 2082;
          uint64_t v87 = a1 + 841;
          __int16 v88 = 2048;
          uint64_t v89 = v74;
          __int16 v90 = 1024;
          int v91 = v73;
          __int16 v92 = 1024;
          int v93 = v72;
          __int16 v94 = 1024;
          int v95 = v34;
          __int16 v96 = 1024;
          int v97 = v37;
          __int16 v98 = 2048;
          int v99 = v38;
          __int16 v100 = 2114;
          CFDictionaryRef v12 = v71;
          CMTime v101 = v71;
          __int16 v102 = 2048;
          Float64 v103 = Seconds;
          __int16 v104 = 1024;
          int v105 = v20;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v20)
      {
        v106.unsigned int value = 0;
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v15[10]);
        uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v41) {
          uint64_t v42 = v41;
        }
        else {
          uint64_t v42 = 0;
        }
        CMTimeEpoch v43 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v42 + 48);
        if (v43) {
          v43(FigBaseObject, @"Timebase", v69, &v106);
        }
        unsigned int value = (const void *)v106.value;
        if (v106.value) {
          goto LABEL_59;
        }
        uint64_t v45 = *(void *)(a1 + 112);
        uint64_t v46 = FigRenderPipelineGetFigBaseObject(v15[10]);
        uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v47) {
          uint64_t v48 = v47;
        }
        else {
          uint64_t v48 = 0;
        }
        unsigned int v49 = *(void (**)(uint64_t, __CFString *, uint64_t))(v48 + 56);
        if (v49) {
          v49(v46, @"Timebase", v45);
        }
        unsigned int value = (const void *)v106.value;
        if (v106.value) {
LABEL_59:
        }
          CFRelease(value);
      }
      else
      {
        int v70 = 1;
      }
    }
    ++v11;
  }
  while (*(void *)(a1 + 80) > v11);
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  if (!v70) {
    goto LABEL_69;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    unsigned int v78 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v51 = v78;
    if (os_log_type_enabled(v50, type)) {
      unsigned int v52 = v51;
    }
    else {
      unsigned int v52 = v51 & 0xFFFFFFFE;
    }
    if (v52)
    {
      int v82 = 136315394;
      CMTime v83 = "FigPlaybackBossPrerollAndScheduleGaplessStart";
      __int16 v84 = 2048;
      uint64_t v85 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v53 = 0;
    do
    {
      uint64_t v54 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v53) + 10);
      if (v54)
      {
        CMAttachmentBearerRef v55 = target;
        v106.unsigned int value = 0;
        uint64_t v56 = FigRenderPipelineGetFigBaseObject(v54);
        uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v58 = v57 ? v57 : 0;
        uint64_t v59 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v58 + 48);
        if (v59)
        {
          int v60 = v59(v56, @"SourceSampleBufferQueue", v69, &v106);
          uint64_t v61 = (const void *)v106.value;
          if (!v60)
          {
            CMBufferQueueEnqueue((CMBufferQueueRef)v106.value, v55);
            uint64_t v61 = (const void *)v106.value;
          }
          if (v61) {
            CFRelease(v61);
          }
        }
      }
      ++v53;
    }
    while (*(void *)(a1 + 80) > v53);
  }
  uint64_t v62 = v80;
  *(void *)(a1 + 432) = v80;
  __int16 v63 = v81;
  *(_DWORD *)(a1 + 440) = v81;
  ++*(_DWORD *)(a1 + 640);
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v106, HostTimeClock);
  *(CMTime *)(a1 + 616) = v106;
  *(_DWORD *)(a1 + 424) = 1886544244;
  *(_DWORD *)(a1 + 504) = v62;
  bossBroadcastPrerollRateToRenderPipelines(a1, 0, *(float *)&v62);
  bossBumpCurrentMasterOrder(a1);
  uint64_t v65 = *(void *)(a1 + 80);
  CMTimebaseGetTime(&v106, *(CMTimebaseRef *)(a1 + 112));
  uint64_t v9 = bossSetMentorModesForTimeAndRate(a1, 0, v65, &v106, v62, v63, 1, 0);
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  if (!v9)
  {
    uint64_t v66 = *(const void **)(a1 + 416);
    *(void *)(a1 + 416) = v68;
    if (v68) {
      CFRetain(v68);
    }
    if (v66) {
      CFRelease(v66);
    }
    bossScheduleReachedEndCallbackForRate(a1, *(float *)(a1 + 432));
    bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, *(float *)(a1 + 432));
    uint64_t v9 = 0;
  }
LABEL_89:
  MEMORY[0x19970E930](*(void *)(a1 + 576));
  if (target) {
    CFRelease(target);
  }
  return v9;
}

uint64_t FigPlaybackBossSetTime(uint64_t a1, CMTime *a2, unsigned int a3, const void *a4, int a5)
{
  CMTime v6 = *a2;
  return FigPlaybackBossSetTimeWithRange(a1, &v6, a3, MEMORY[0x1E4F1FA08], MEMORY[0x1E4F1FA10], a4, a5);
}

uint64_t bossSnapTimeToIFrameWithRange(uint64_t a1, CMTime *a2, unsigned int a3, CMTime *a4, CMTime *a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeFlags v23 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) < 1)
  {
    CFNumberRef v21 = 0;
    CMTimeEpoch epoch = v11;
  }
  else
  {
    CFIndex v13 = 0;
    CFNumberRef v21 = 0;
    CMTimeEpoch epoch = v11;
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v13);
      if (*((_DWORD *)ValueAtIndex + 18) == 1986618469)
      {
        CFDictionaryRef v15 = ValueAtIndex;
        *(_OWORD *)&v31.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
        v31.CMTimeEpoch epoch = v11;
        uint64_t v16 = ValueAtIndex[4];
        uint64_t v17 = *(OpaqueCMTimebase **)(a1 + 112);
        CMTime lhs = *a2;
        CMTime rhs = *a4;
        CMTime type = *a5;
        if (!FigPlaybackBossSnapTimeToIFrameWithRange(v16, v17, &lhs, a3, &rhs, &type, (uint64_t)&v31))
        {
          CMTimeFlags flags = v31.flags;
          if ((v31.flags & 0x1D) == 1)
          {
            if ((v23 & 0x1D) != 1) {
              goto LABEL_10;
            }
            lhs.CMTimeValue value = value;
            lhs.CMTimeScale timescale = timescale;
            lhs.CMTimeFlags flags = v23;
            lhs.CMTimeEpoch epoch = epoch;
            CMTime rhs = *a2;
            CMTimeSubtract(&time, &lhs, &rhs);
            CMTimeAbsoluteValue(&time1, &time);
            CMTime lhs = v31;
            CMTime rhs = *a2;
            CMTimeSubtract(&v24, &lhs, &rhs);
            CMTimeAbsoluteValue(&time2, &v24);
            if (CMTimeCompare(&time1, &time2) >= 1)
            {
LABEL_10:
              CMTimeValue value = v31.value;
              CMTimeScale timescale = v31.timescale;
              CFNumberRef v21 = v15;
              CMTimeEpoch epoch = v31.epoch;
              CMTimeFlags v23 = flags;
            }
          }
        }
      }
      ++v13;
    }
    while (*(void *)(a1 + 80) > v13);
  }
  uint64_t result = MEMORY[0x19970E930](*(void *)(a1 + 64));
  if (a6)
  {
    if (v21)
    {
      *(void *)a6 = value;
      *(_DWORD *)(a6 + 8) = timescale;
      *(_DWORD *)(a6 + 12) = v23;
      *(void *)(a6 + 16) = epoch;
    }
  }
  return result;
}

uint64_t bossResetSideQueuesAndSwitchMentorsToMainQueues(uint64_t result)
{
  if (*(uint64_t *)(result + 80) >= 1)
  {
    uint64_t v1 = result;
    CFIndex v2 = 0;
    do
    {
      uint64_t v3 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), v2) + 12);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v5 = v6;
      if (v6) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 96);
      if (v8) {
        uint64_t result = v8(v3);
      }
      ++v2;
    }
    while (v2 < *(void *)(v1 + 80));
  }
  return result;
}

void figPlaybackBossPostSeekDidComplete(uint64_t a1, int a2, int a3)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v7 = Mutable;
      if (!FigCFDictionarySetInt32() && (!a3 || !FigCFDictionarySetInt32()))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      CFRelease(v7);
    }
  }
}

uint64_t FigPlaybackBossInterruptQueueing(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 120))
  {
    return FigSignalErrorAt();
  }
  else
  {
    figPlaybackBossPrerollCompleted(a1, 2);
    MEMORY[0x19970E910](*(void *)(a1 + 576));
    bossBumpCurrentMasterOrder(a1);
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    bossSetMentorModesToDoNothing(a1, 0, *(void *)(a1 + 80), 1);
    bossBumpCurrentMasterOrder(a1);
    bossSetMentorModesToDoNothing(a1, 0, *(void *)(a1 + 80), 2);
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    MEMORY[0x19970E930](*(void *)(a1 + 576));
    return 0;
  }
}

uint64_t FigPlaybackBossStepByCount(uint64_t a1, int a2, const void *a3)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  int v88 = a2;
  if (dword_1E9350D98)
  {
    LODWORD(v123.start.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.start.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = v88;
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    goto LABEL_5;
  }
  int v9 = *(_DWORD *)(a1 + 424);
  BOOL v10 = v9 == 1885435251 || v9 == 1886545266;
  if (!v10 && v9 != 1919247481) {
    goto LABEL_5;
  }
  if (!a2) {
    return 0;
  }
  CMTimebaseGetTime(&time1.start, *(CMTimebaseRef *)(a1 + 112));
  CMTimeFlags flags = time1.start.flags;
  if ((time1.start.flags & 0x1D) != 1
    || (CMTimeScale timescale = time1.start.timescale,
        CMTimeValue v73 = time1.start.value,
        CMTimeEpoch epoch = time1.start.epoch,
        (uint64_t v85 = malloc_type_calloc(*(void *)(a1 + 80), 8uLL, 0x2004093837F09uLL)) == 0))
  {
LABEL_5:
    uint64_t v6 = FigSignalErrorAt();
    CFMutableDictionaryRef v7 = 0;
    goto LABEL_6;
  }
  CMTimeFlags v71 = flags;
  CFIndex v13 = (long long *)MEMORY[0x1E4F1F9F8];
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    LODWORD(v123.start.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.start.CFDictionarySetValue(theDict, key, value) = 0;
    uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, type.start.value);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTimeValue v90 = *(void *)v13;
  CMTimeScale v89 = *((_DWORD *)v13 + 2);
  CMTimeFlags v91 = *((_DWORD *)v13 + 3);
  CMTimeEpoch v100 = *((void *)v13 + 2);
  if (*(uint64_t *)(a1 + 80) < 1)
  {
    int v16 = 0;
  }
  else
  {
    CFIndex v15 = 0;
    int v16 = 0;
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v15);
      if (*((unsigned char *)ValueAtIndex + 89))
      {
        int v18 = ValueAtIndex[18];
        BOOL v19 = v18 == 1635088502 || v18 == 1986618469;
        if (v19 || v18 == 1935893870) {
          v85[v16++] = ValueAtIndex;
        }
      }
      ++v15;
    }
    while (*(void *)(a1 + 80) > v15);
  }
  if (v88 >= 0) {
    int v21 = v88;
  }
  else {
    int v21 = -v88;
  }
  if (v16 > 1) {
    int v22 = 1;
  }
  else {
    int v22 = v21;
  }
  long long v101 = *v13;
  __n128 v114 = (__n128)*v13;
  CMTimeEpoch v23 = v100;
  CMTimeEpoch v115 = v100;
  int v76 = v22;
  if (v88 >= 0) {
    int v24 = v22;
  }
  else {
    int v24 = -v22;
  }
  FigPlaybackBossGetDuration(a1, &v114);
  if (v24 < 0) {
    int v25 = -1;
  }
  else {
    int v25 = 1;
  }
  uint64_t v80 = 0;
  int64_t value = 250 * v24;
  int v102 = v24;
  unsigned int v103 = v25;
  uint64_t v92 = v16;
  int v78 = v25 * v24;
  int v75 = v25 * v24 + 1;
  CMTimeFlags v106 = v71;
  CMTimeScale v86 = timescale;
  CMTimeValue v104 = v73;
  CMTimeEpoch v105 = epoch;
  uint64_t v77 = a1;
  do
  {
    int v79 = v21;
    if ((int)v92 >= 1)
    {
      uint64_t v26 = 0;
      CMTimeFlags v87 = v91;
      CMTimeEpoch v82 = v23;
      CMTimeScale v83 = v89;
      CMTimeValue v84 = v90;
      CFMutableDictionaryRef v7 = v85;
      CMTimeScale v27 = v86;
      while (1)
      {
        uint64_t v28 = v7[v26];
        *(__n128 *)&v113.int64_t value = v114;
        v113.CMTimeEpoch epoch = v115;
        __int16 v127 = 0;
        long long v29 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
        *(_OWORD *)&v137.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
        *(_OWORD *)&v138.start.int64_t value = v29;
        long long v30 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
        *(_OWORD *)&v138.start.CMTimeEpoch epoch = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
        *(_OWORD *)&v138.duration.CMTimeScale timescale = v30;
        long long v31 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
        *(_OWORD *)&v137.start.int64_t value = *MEMORY[0x1E4F1FA00];
        *(_OWORD *)&v137.start.CMTimeEpoch epoch = v31;
        *(_OWORD *)&v126.int64_t value = v101;
        v126.CMTimeEpoch epoch = v23;
        *(_OWORD *)&v124.duration.CMTimeScale timescale = v30;
        *(_OWORD *)&v125.int64_t value = v101;
        v125.CMTimeEpoch epoch = v23;
        long long v97 = v29;
        long long v98 = *(_OWORD *)&v137.duration.timescale;
        *(_OWORD *)&v123.duration.CMTimeScale timescale = *(_OWORD *)&v137.duration.timescale;
        *(_OWORD *)&v124.start.int64_t value = v29;
        long long v95 = v30;
        long long v96 = *(_OWORD *)&v138.start.epoch;
        *(_OWORD *)&v124.start.CMTimeEpoch epoch = *(_OWORD *)&v138.start.epoch;
        long long v93 = v31;
        long long v94 = *(_OWORD *)&v137.start.value;
        *(_OWORD *)&v123.start.int64_t value = *(_OWORD *)&v137.start.value;
        *(_OWORD *)&v123.start.CMTimeEpoch epoch = v31;
        uint64_t v107 = v28;
        uint64_t v32 = *(void *)(v28 + 32);
        time1.start.int64_t value = v104;
        time1.start.CMTimeScale timescale = v27;
        time1.start.CMTimeFlags flags = v106;
        time1.start.CMTimeEpoch epoch = v105;
        uint64_t PresentationTimeAfterSampleCursorStepping = bossScanForEditSegmentContainingTrackTime(v32, (uint64_t)&time1, (unsigned char *)&v127 + 1, &v127, (uint64_t)&v137, v103, (uint64_t)&v125, (unint64_t)&v123);
        if (PresentationTimeAfterSampleCursorStepping)
        {
LABEL_123:
          uint64_t v6 = PresentationTimeAfterSampleCursorStepping;
          goto LABEL_100;
        }
        if (!HIBYTE(v127))
        {
          uint64_t v50 = *(void *)(v107 + 48);
          time1.start.int64_t value = v104;
          time1.start.CMTimeScale timescale = v27;
          time1.start.CMTimeFlags flags = v106;
          time1.start.CMTimeEpoch epoch = v105;
          uint64_t PresentationTimeAfterSampleCursorStepping = bossGetPresentationTimeAfterSampleCursorStepping(v50, &time1.start, v102, 0, &v126);
          if (PresentationTimeAfterSampleCursorStepping) {
            goto LABEL_123;
          }
          CMTimeValue v34 = v126.value;
          CMTimeScale v35 = v126.timescale;
          CMTimeFlags v36 = v126.flags;
          CMTimeEpoch v23 = v126.epoch;
          goto LABEL_112;
        }
        CMTimeValue v34 = v90;
        CMTimeScale v35 = v89;
        CMTimeFlags v36 = v91;
        if (!(_BYTE)v127) {
          goto LABEL_112;
        }
        *(_OWORD *)&v122.int64_t value = v101;
        CMTimeEpoch v23 = v100;
        v122.CMTimeEpoch epoch = v100;
        if ((v137.start.flags & 0x1D) != 1) {
          break;
        }
        type.start.int64_t value = v104;
        type.start.CMTimeScale timescale = v27;
        type.start.CMTimeFlags flags = v106;
        type.start.CMTimeEpoch epoch = v105;
        CMTimeRange time1 = v138;
        CMTimeClampToRange(&v121, &type.start, &time1);
        CMTimeRange time1 = v138;
        CMTimeRange type = v137;
        CMTimeMapTimeFromRangeToRange(&v122, &v121, &time1, &type);
        uint64_t v37 = *(void *)(v107 + 48);
        time1.CMTimeRange start = v122;
        uint64_t v38 = bossGetPresentationTimeAfterSampleCursorStepping(v37, &time1.start, v102, 1, &v126);
        if (v38)
        {
          uint64_t v6 = v38;
          if (v38 != -12840) {
            goto LABEL_100;
          }
          unsigned int v51 = v7;
          __int16 v131 = 0;
          *(_OWORD *)&type.start.int64_t value = v101;
          type.start.CMTimeEpoch epoch = v100;
          *(_OWORD *)&time1.duration.CMTimeScale timescale = v98;
          long long v133 = v97;
          long long v134 = v96;
          long long v135 = v95;
          *(_OWORD *)&time1.start.int64_t value = v94;
          *(_OWORD *)&time1.start.CMTimeEpoch epoch = v93;
          CMTimeMake(&v130, value, 1000);
          lhs.int64_t value = v104;
          lhs.CMTimeScale timescale = v27;
          lhs.CMTimeFlags flags = v106;
          lhs.CMTimeEpoch epoch = v105;
          CMTimeAdd(&type.start, &lhs, &v130);
          CMTime lhs = type.start;
          CMTime v128 = v113;
          if (CMTimeCompare(&lhs, &v128) < 1)
          {
            CMTime lhs = type.start;
            long long v99 = *MEMORY[0x1E4F1FA48];
            *(_OWORD *)&v128.int64_t value = *MEMORY[0x1E4F1FA48];
            CMTimeEpoch v52 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
            v128.CMTimeEpoch epoch = v52;
            if (CMTimeCompare(&lhs, &v128) < 0)
            {
              *(_OWORD *)&type.start.int64_t value = v99;
              type.start.CMTimeEpoch epoch = v52;
            }
          }
          else
          {
            type.CMTimeRange start = v113;
          }
          uint64_t v53 = *(void *)(v107 + 32);
          CMTime lhs = type.start;
          int v54 = bossScanForEditSegmentContainingTrackTime(v53, (uint64_t)&lhs, (unsigned char *)&v131 + 1, &v131, (uint64_t)&time1, 0, 0, 0);
          int v55 = v91 & 0x1D;
          CMTimeValue v34 = v90;
          CMTimeScale v35 = v89;
          CMTimeFlags v36 = v91;
          CFMutableDictionaryRef v7 = v51;
          if (!v54)
          {
            int v55 = v91 & 0x1D;
            CMTimeValue v34 = v90;
            CMTimeScale v35 = v89;
            CMTimeFlags v36 = v91;
            if ((_BYTE)v131)
            {
              int v55 = v91 & 0x1D;
              CMTimeValue v34 = v90;
              CMTimeScale v35 = v89;
              CMTimeFlags v36 = v91;
              if ((time1.start.flags & 0x1D) != 1)
              {
                CMTimeValue v34 = type.start.value;
                CMTimeScale v35 = type.start.timescale;
                CMTimeFlags v36 = type.start.flags;
                CMTimeEpoch v23 = type.start.epoch;
                int v55 = type.start.flags & 0x1D;
              }
            }
          }
          if (v55 != 1)
          {
            uint64_t v6 = 4294954456;
            goto LABEL_100;
          }
          goto LABEL_96;
        }
        time1.CMTimeRange start = v126;
        *(_OWORD *)&type.start.int64_t value = *(_OWORD *)&v137.start.value;
        type.start.CMTimeEpoch epoch = v137.start.epoch;
        if (CMTimeCompare(&time1.start, &type.start) < 0
          || (CMTimeRange time1 = v137,
              CMTimeRangeGetEnd(&time2, &time1),
              time1.CMTimeRange start = v126,
              CMTimeCompare(&time1.start, &time2) > 0))
        {
          if (v78 >= 1)
          {
            int v39 = v75;
            CMTimeValue v40 = v104;
            CMTimeEpoch v41 = v105;
            CMTimeFlags v42 = v106;
            CMTimeScale v43 = v27;
            do
            {
              uint64_t v44 = *(void *)(v107 + 48);
              time1.CMTimeRange start = v122;
              uint64_t v45 = bossGetPresentationTimeAfterSampleCursorStepping(v44, &time1.start, v103, 0, &v126);
              if (v45)
              {
                uint64_t v6 = v45;
                CFMutableDictionaryRef v7 = v85;
LABEL_100:
                if (v6 != -12840)
                {
                  MEMORY[0x19970E930](*(void *)(v77 + 64));
                  goto LABEL_6;
                }
                goto LABEL_120;
              }
              if (v102 < 0)
              {
                time1.CMTimeRange start = v126;
                *(_OWORD *)&type.start.int64_t value = *(_OWORD *)&v137.start.value;
                type.start.CMTimeEpoch epoch = v137.start.epoch;
                if (CMTimeCompare(&time1.start, &type.start) < 0)
                {
                  CMTimeScale v43 = v138.start.timescale;
                  CMTimeFlags v42 = v138.start.flags;
                  CMTimeEpoch v41 = v138.start.epoch;
                  CMTimeValue v40 = v138.start.value - 1;
                  uint64_t v48 = *(void *)(v107 + 32);
                  time1.start.int64_t value = v138.start.value - 1;
                  *(_OWORD *)&time1.start.CMTimeScale timescale = *(_OWORD *)&v138.start.timescale;
                  if (bossScanForEditSegmentContainingTrackTime(v48, (uint64_t)&time1, (unsigned char *)&v127 + 1, &v127, (uint64_t)&v137, 0xFFFFFFFF, (uint64_t)&v125, (unint64_t)&v123))break; {
                  if ((v137.start.flags & 0x1D) != 1)
                  }
                  {
                    CMTimeValue v40 = v125.value;
                    CMTimeScale v43 = v125.timescale;
                    CMTimeFlags v42 = v125.flags;
                    CMTimeEpoch v41 = v125.epoch;
                    CMTimeRange v137 = v123;
                    CMTimeRange v138 = v124;
                  }
                  type.start.int64_t value = v40;
                  type.start.CMTimeScale timescale = v43;
                  type.start.CMTimeFlags flags = v42;
                  type.start.CMTimeEpoch epoch = v41;
                  CMTimeRange time1 = v138;
                  CMTimeClampToRange(&v116, &type.start, &time1);
                  CMTimeRange time1 = v138;
                  CMTimeRange type = v137;
                  unsigned int v49 = &v116;
                  goto LABEL_79;
                }
              }
              else
              {
                CMTimeRange time1 = v137;
                CMTimeRangeGetEnd(&v118, &time1);
                time1.CMTimeRange start = v126;
                if ((CMTimeCompare(&time1.start, &v118) & 0x80000000) == 0)
                {
                  CMTimeRange time1 = v138;
                  CMTimeRangeGetEnd(&type.start, &time1);
                  uint64_t v46 = *(void *)(v107 + 32);
                  time1.start.int64_t value = type.start.value;
                  *(void *)&time1.start.CMTimeScale timescale = *(void *)&type.start.timescale;
                  time1.start.CMTimeEpoch epoch = type.start.epoch;
                  if (bossScanForEditSegmentContainingTrackTime(v46, (uint64_t)&time1, (unsigned char *)&v127 + 1, &v127, (uint64_t)&v137, 1u, (uint64_t)&v125, (unint64_t)&v123))break; {
                  if ((v137.start.flags & 0x1D) == 1)
                  }
                  {
                    time1.start.int64_t value = v40;
                    time1.start.CMTimeScale timescale = v43;
                    time1.start.CMTimeFlags flags = v42;
                    time1.start.CMTimeEpoch epoch = v41;
                    *(_OWORD *)&type.start.int64_t value = *(_OWORD *)&v138.start.value;
                    type.start.CMTimeEpoch epoch = v138.start.epoch;
                    if (CMTimeCompare(&time1.start, &type.start) < 1)
                    {
                      CMTimeValue v40 = v138.start.value;
                      CMTimeScale v43 = v138.start.timescale;
                      CMTimeFlags v42 = v138.start.flags;
                      CMTimeEpoch v41 = v138.start.epoch;
                    }
                    else
                    {
                      memset(&type, 0, 24);
                      CMTimeRange time1 = v138;
                      CMTimeRangeGetEnd(&type.start, &time1);
                      CMTimeFlags v42 = type.start.flags;
                      if ((type.start.flags & 0x1D) != 1) {
                        break;
                      }
                      CMTimeValue v40 = type.start.value;
                      CMTimeScale v43 = type.start.timescale;
                      CMTimeEpoch v41 = type.start.epoch;
                    }
                  }
                  else
                  {
                    CMTimeValue v40 = v125.value;
                    CMTimeScale v43 = v125.timescale;
                    CMTimeFlags v42 = v125.flags;
                    CMTimeEpoch v41 = v125.epoch;
                    CMTimeRange v137 = v123;
                    CMTimeRange v138 = v124;
                  }
                  type.start.int64_t value = v40;
                  type.start.CMTimeScale timescale = v43;
                  type.start.CMTimeFlags flags = v42;
                  type.start.CMTimeEpoch epoch = v41;
                  CMTimeRange time1 = v138;
                  CMTimeClampToRange(&v117, &type.start, &time1);
                  CMTimeRange time1 = v138;
                  CMTimeRange type = v137;
                  unsigned int v49 = &v117;
LABEL_79:
                  CMTimeMapTimeFromRangeToRange(&v130, v49, &time1, &type);
                  *(_OWORD *)&v122.int64_t value = *(_OWORD *)&v130.value;
                  CMTimeEpoch v47 = v130.epoch;
                  goto LABEL_80;
                }
              }
              *(_OWORD *)&v122.int64_t value = *(_OWORD *)&v126.value;
              CMTimeEpoch v47 = v126.epoch;
LABEL_80:
              v122.CMTimeEpoch epoch = v47;
              --v39;
            }
            while (v39 > 1);
          }
          CMTime lhs = v122;
          CMTimeRange time1 = v137;
          CMTimeRange type = v138;
          CMTimeMapTimeFromRangeToRange(&v130, &lhs, &time1, &type);
          CMTimeValue v34 = v130.value;
          CMTimeScale v35 = v130.timescale;
          CMTimeFlags v36 = v130.flags;
          CMTimeEpoch v23 = v130.epoch;
LABEL_110:
          CFMutableDictionaryRef v7 = v85;
          goto LABEL_112;
        }
        CMTime lhs = v126;
        CMTimeRange time1 = v137;
        CMTimeRange type = v138;
        CMTimeMapTimeFromRangeToRange(&v130, &lhs, &time1, &type);
        CMTimeValue v34 = v130.value;
        CMTimeScale v35 = v130.timescale;
        CMTimeFlags v36 = v130.flags;
        CMTimeEpoch v23 = v130.epoch;
LABEL_112:
        if ((v36 & 0x1D) != 1) {
          goto LABEL_120;
        }
        if (v88 < 1)
        {
          if ((v88 & 0x80000000) == 0) {
            goto LABEL_120;
          }
          time1.start.int64_t value = v34;
          time1.start.CMTimeScale timescale = v35;
          time1.start.CMTimeFlags flags = v36;
          time1.start.CMTimeEpoch epoch = v23;
          v137.start.int64_t value = v104;
          v137.start.CMTimeScale timescale = v27;
          v137.start.CMTimeFlags flags = v106;
          v137.start.CMTimeEpoch epoch = v105;
          if ((CMTimeCompare(&time1.start, &v137.start) & 0x80000000) == 0) {
            goto LABEL_120;
          }
        }
        else
        {
          time1.start.int64_t value = v34;
          time1.start.CMTimeScale timescale = v35;
          time1.start.CMTimeFlags flags = v36;
          time1.start.CMTimeEpoch epoch = v23;
          v137.start.int64_t value = v104;
          v137.start.CMTimeScale timescale = v27;
          v137.start.CMTimeFlags flags = v106;
          v137.start.CMTimeEpoch epoch = v105;
          if (CMTimeCompare(&time1.start, &v137.start) <= 0) {
            goto LABEL_120;
          }
        }
        if ((v87 & 0x1D) != 1) {
          goto LABEL_117;
        }
        time1.start.int64_t value = v84;
        time1.start.CMTimeScale timescale = v83;
        time1.start.CMTimeFlags flags = v87;
        time1.start.CMTimeEpoch epoch = v82;
        v137.start.int64_t value = v104;
        v137.start.CMTimeScale timescale = v27;
        v137.start.CMTimeFlags flags = v106;
        v137.start.CMTimeEpoch epoch = v105;
        CMTimeSubtract(&time, &time1.start, &v137.start);
        CMTimeAbsoluteValue(&v112, &time);
        time1.start.int64_t value = v34;
        time1.start.CMTimeScale timescale = v35;
        time1.start.CMTimeFlags flags = v36;
        time1.start.CMTimeEpoch epoch = v23;
        v137.start.int64_t value = v104;
        CFMutableDictionaryRef v7 = v85;
        v137.start.CMTimeScale timescale = v86;
        v137.start.CMTimeFlags flags = v106;
        v137.start.CMTimeEpoch epoch = v105;
        CMTimeScale v27 = v86;
        CMTimeSubtract(&v109, &time1.start, &v137.start);
        CMTimeAbsoluteValue(&v110, &v109);
        if (CMTimeCompare(&v112, &v110) >= 1)
        {
LABEL_117:
          CMTimeValue v84 = v34;
          CMTimeScale v83 = v35;
          CMTimeEpoch v82 = v23;
          uint64_t v80 = v107;
          CMTimeFlags v87 = v36;
        }
LABEL_120:
        ++v26;
        CMTimeEpoch v23 = v100;
        if (v26 == v92) {
          goto LABEL_126;
        }
      }
      CMTimeValue v34 = v90;
      CMTimeScale v35 = v89;
      CMTimeFlags v36 = v91;
      if ((v91 & 0x1D) != 1)
      {
        CMTimeMake(&rhs, value, 1000);
        type.start.int64_t value = v104;
        type.start.CMTimeScale timescale = v27;
        type.start.CMTimeFlags flags = v106;
        type.start.CMTimeEpoch epoch = v105;
        CMTimeAdd(&time1.start, &type.start, &rhs);
        CMTimeValue v34 = time1.start.value;
        CMTimeScale v35 = time1.start.timescale;
        CMTimeFlags v36 = time1.start.flags;
        CMTimeEpoch v23 = time1.start.epoch;
      }
LABEL_96:
      if ((v125.flags & 0x1D) == 1)
      {
        type.start.int64_t value = v34;
        type.start.CMTimeScale timescale = v35;
        type.start.CMTimeFlags flags = v36;
        type.start.CMTimeEpoch epoch = v23;
        CMTime v130 = v125;
        if (v102 < 0) {
          CMTimeMaximum(&time1.start, &type.start, &v130);
        }
        else {
          CMTimeMinimum(&time1.start, &type.start, &v130);
        }
        CMTimeValue v34 = time1.start.value;
        CMTimeScale v35 = time1.start.timescale;
        CMTimeFlags v36 = time1.start.flags;
        CMTimeEpoch v23 = time1.start.epoch;
      }
      if (!dword_1E9350D98) {
        goto LABEL_110;
      }
      LODWORD(v130.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(lhs.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v57 = v130.value;
      if (os_log_type_enabled(v56, lhs.value)) {
        unsigned int v58 = v57;
      }
      else {
        unsigned int v58 = v57 & 0xFFFFFFFE;
      }
      if (v58)
      {
        time1.start.int64_t value = v104;
        time1.start.CMTimeScale timescale = v86;
        time1.start.CMTimeFlags flags = v106;
        time1.start.CMTimeEpoch epoch = v105;
        Float64 Seconds = CMTimeGetSeconds(&time1.start);
        time1.start.int64_t value = v34;
        time1.start.CMTimeScale timescale = v35;
        time1.start.CMTimeFlags flags = v36;
        time1.start.CMTimeEpoch epoch = v23;
        Float64 v60 = CMTimeGetSeconds(&time1.start);
        LODWORD(type.start.CFDictionarySetValue(theDict, key, value) = 136315906;
        *(CMTimeValue *)((char *)&type.start.value + 4) = (CMTimeValue)"bossGetNextTrackTimeAfterStepping";
        LOWORD(type.start.flags) = 2048;
        *(Float64 *)((char *)&type.start.flags + 2) = Seconds;
        HIWORD(type.start.epoch) = 1024;
        LODWORD(type.duration.CFDictionarySetValue(theDict, key, value) = v102;
        WORD2(type.duration.CFDictionarySetValue(theDict, key, value) = 2048;
        *(Float64 *)((char *)&type.duration.value + 6) = v60;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTimeScale v27 = v86;
      CFMutableDictionaryRef v7 = v85;
      goto LABEL_112;
    }
    CMTimeValue v84 = v90;
    CMTimeScale v83 = v89;
    CMTimeEpoch v82 = v23;
    CMTimeFlags v87 = v91;
LABEL_126:
    CMTimeFlags v61 = v87;
    if ((v87 & 0x1D) != 1)
    {
      uint64_t v65 = v77;
      MEMORY[0x19970E930](*(void *)(v77 + 64));
      goto LABEL_131;
    }
    int v21 = v79 - v76;
    CMTimeFlags v106 = v87;
    CMTimeEpoch v62 = v82;
    CMTimeScale v63 = v83;
    CMTimeScale v86 = v83;
    CMTimeValue v64 = v84;
    CMTimeValue v104 = v84;
    CMTimeEpoch v105 = v82;
    uint64_t v65 = v77;
  }
  while (v79 - v76 >= 1);
  MEMORY[0x19970E930](*(void *)(v77 + 64));
  if (!v80)
  {
LABEL_131:
    CMTimeMake(&v108, 250 * v88, 1000);
    v137.start.int64_t value = v73;
    v137.start.CMTimeScale timescale = timescale;
    v137.start.CMTimeFlags flags = v71;
    v137.start.CMTimeEpoch epoch = epoch;
    CMTimeAdd(&time1.start, &v137.start, &v108);
    CMTimeValue v64 = time1.start.value;
    CMTimeScale v63 = time1.start.timescale;
    CMTimeFlags v61 = time1.start.flags;
    CMTimeEpoch v62 = time1.start.epoch;
  }
  uint64_t v66 = a3;
  if (dword_1E9350D98)
  {
    LODWORD(v123.start.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.start.CFDictionarySetValue(theDict, key, value) = 0;
    unsigned int v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v68 = v123.start.value;
    if (os_log_type_enabled(v67, type.start.value)) {
      unsigned int v69 = v68;
    }
    else {
      unsigned int v69 = v68 & 0xFFFFFFFE;
    }
    if (v69)
    {
      time1.start.int64_t value = v64;
      time1.start.CMTimeScale timescale = v63;
      time1.start.CMTimeFlags flags = v61;
      time1.start.CMTimeEpoch epoch = v62;
      Float64 v70 = CMTimeGetSeconds(&time1.start);
      LODWORD(v137.start.CFDictionarySetValue(theDict, key, value) = 136315906;
      *(CMTimeValue *)((char *)&v137.start.value + 4) = (CMTimeValue)"FigPlaybackBossStepByCount";
      LOWORD(v137.start.flags) = 2048;
      *(void *)((char *)&v137.start.flags + 2) = v65;
      HIWORD(v137.start.epoch) = 2082;
      v137.duration.int64_t value = v65 + 841;
      LOWORD(v137.duration.timescale) = 2048;
      *(Float64 *)((char *)&v137.duration.timescale + 2) = v70;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v66 = a3;
  }
  time1.start.int64_t value = v64;
  time1.start.CMTimeScale timescale = v63;
  time1.start.CMTimeFlags flags = v61;
  time1.start.CMTimeEpoch epoch = v62;
  uint64_t v6 = FigPlaybackBossSetTimeWithRange(v65, &time1.start, 0, MEMORY[0x1E4F1FA08], MEMORY[0x1E4F1FA10], v66, 0);
  CFMutableDictionaryRef v7 = v85;
LABEL_6:
  free(v7);
  return v6;
}

uint64_t FigPlaybackBossResetCompositionInstructions(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if ((*(_DWORD *)(a1 + 484) & 0x1D) == 1) {
    int v5 = 0;
  }
  else {
    int v5 = a3;
  }
  return FigVideoCompositionProcessorResetCompositionInstruction(a2, v5, a4);
}

uint64_t FigPlaybackBossRefreshVideoComposition(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!a1 || *(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = FigSignalErrorAt();
    goto LABEL_4;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 576));
  int v4 = *(_DWORD *)(a1 + 424);
  if (v4 <= 1886530415)
  {
    if (v4 <= 1886151032)
    {
      switch(v4)
      {
        case 1634624887:
          goto LABEL_13;
        case 1768189029:
          goto LABEL_14;
        case 1885435251:
LABEL_13:
          if (dword_1E9350D98)
          {
LABEL_14:
            os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          break;
      }
LABEL_42:
      MEMORY[0x19970E930](*(void *)(a1 + 576));
      uint64_t v2 = 0;
      goto LABEL_4;
    }
    if (v4 == 1886151033) {
      goto LABEL_27;
    }
    if (v4 != 1886154860)
    {
      int v8 = 1886155888;
LABEL_26:
      if (v4 != v8) {
        goto LABEL_42;
      }
LABEL_27:
      FigPlaybackBossGetTime(a1, &v18);
      if (dword_1E9350D98)
      {
        int v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTime time = v18;
      uint64_t v12 = a1;
      int v13 = 0;
      goto LABEL_40;
    }
LABEL_29:
    if (*(unsigned char *)(a1 + 804)) {
      CMTime v18 = *(CMTime *)(a1 + 792);
    }
    else {
      FigPlaybackBossGetTime(a1, &v18);
    }
    if (dword_1E9350D98)
    {
      BOOL v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMTime time = v18;
    uint64_t v12 = a1;
    int v13 = 1;
LABEL_40:
    reuint64_t started = figPlaybackBossRestartVideoMentorsFromItemTime(v12, &time, v13);
    if (restarted)
    {
      uint64_t v2 = restarted;
      MEMORY[0x19970E930](*(void *)(a1 + 576));
      goto LABEL_4;
    }
    goto LABEL_42;
  }
  if (v4 > 1919247480)
  {
    if (v4 != 1919247481)
    {
      if (v4 == 1920298606) {
        goto LABEL_14;
      }
      int v8 = 2003853684;
      goto LABEL_26;
    }
    CFMutableDictionaryRef v7 = 0;
    char v6 = 1;
  }
  else
  {
    if (v4 == 1886530416 || v4 == 1886544244) {
      goto LABEL_29;
    }
    if (v4 != 1886545266) {
      goto LABEL_42;
    }
    char v6 = 0;
    CFMutableDictionaryRef v7 = *(const void **)(a1 + 496);
    CFTypeRef cf = v7;
    *(void *)(a1 + 496) = 0;
  }
  FigPlaybackBossGetTime(a1, &v18);
  if (dword_1E9350D98)
  {
    CMTimeEpoch v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossBumpCurrentMasterOrder(a1);
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    CFIndex v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v16 = *(void *)(a1 + 80);
  CMTime time = v18;
  uint64_t v2 = bossSetMentorModesToScrub(a1, 0, v16, &time, 0, 0);
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  *(_DWORD *)(a1 + 424) = 1885435251;
  MEMORY[0x19970E930](*(void *)(a1 + 576));
  if ((v6 & 1) == 0)
  {
    CFDictionaryRef v17 = v7
        ? CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigPlaybackBossParameter_PrerollToken, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]): 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v17) {
      CFRelease(v17);
    }
  }
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

const char *getStateName(int a1)
{
  uint64_t v1 = "unknown";
  if (a1 <= 1886155887)
  {
    int v2 = 1885435250;
    CFMutableDictionaryRef v7 = "Paused";
    uint64_t v14 = "PlayingAndPrerollingWillPlay";
    if (a1 != 1886154860) {
      uint64_t v14 = "unknown";
    }
    if (a1 == 1886151033) {
      CFIndex v15 = "Playing";
    }
    else {
      CFIndex v15 = v14;
    }
    if (a1 != 1885435251) {
      CFMutableDictionaryRef v7 = v15;
    }
    int v8 = 1634624887;
    int v9 = "NotYetUsed";
    BOOL v10 = "Invalidated";
    int v11 = 1684365668;
    BOOL v12 = a1 == 1768189029;
    int v13 = "IdleNonRealTime";
  }
  else
  {
    int v2 = 1886545265;
    uint64_t v3 = "PrerolledWillPlayAtTransition";
    if (a1 != 2003853684) {
      uint64_t v3 = "unknown";
    }
    if (a1 == 1920298606) {
      int v4 = "PlayingNonRealTime";
    }
    else {
      int v4 = v3;
    }
    int v5 = "PausedButPrerolled";
    if (a1 != 1919247481) {
      int v5 = "unknown";
    }
    if (a1 == 1886545266) {
      char v6 = "PrerollingWillPause";
    }
    else {
      char v6 = v5;
    }
    if (a1 <= 1920298605) {
      CFMutableDictionaryRef v7 = v6;
    }
    else {
      CFMutableDictionaryRef v7 = v4;
    }
    int v8 = 1886155888;
    int v9 = "PlayingAfterTransitionStillPrerolling";
    BOOL v10 = "PrerollingWillPlay";
    int v11 = 1886530416;
    BOOL v12 = a1 == 1886544244;
    int v13 = "PrerollingWillPlayAtTransition";
  }
  if (v12) {
    uint64_t v1 = v13;
  }
  if (a1 == v11) {
    uint64_t v1 = v10;
  }
  if (a1 == v8) {
    uint64_t v1 = v9;
  }
  if (a1 <= v2) {
    return v1;
  }
  else {
    return v7;
  }
}

uint64_t figPlaybackBossRestartVideoMentorsFromItemTime(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a3) {
    int v4 = 2;
  }
  else {
    int v4 = 3;
  }
  int v22 = v4;
  float v5 = *(float *)(a1 + 432);
  if (v5 <= 0.0) {
    float v6 = -v5;
  }
  else {
    float v6 = *(float *)(a1 + 432);
  }
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    int v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    CFIndex v9 = 0;
    uint64_t v10 = 0;
    char v21 = a3 != 0;
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v9);
      if (ValueAtIndex[18] == 1986618469)
      {
        uint64_t v12 = (uint64_t)ValueAtIndex;
        bossBumpTrackCurrentOrder(ValueAtIndex);
        if (a3) {
          *(_WORD *)(v12 + 213) = 1;
        }
        if (*(void *)(v12 + 192))
        {
          if (v5 < 0.0) {
            int v13 = 0;
          }
          else {
            int v13 = *(unsigned __int8 *)(v12 + 248);
          }
          char v14 = bossTrackShouldRemoveExcessFramesInRefreshIntervals(a1, v12, v6);
          CFIndex v15 = bossCopyOptionsDictionaryForMentors(a1, v22, *(const void **)(v12 + 216), *(const void **)(v12 + 224), *(const void **)(v12 + 232), *(const void **)(v12 + 240), v13, 0, v6, v21, v5 >= 0.0, 1, *(_DWORD *)(v12 + 344), *(unsigned char *)(v12 + 399), 0, v14);
          uint64_t v16 = (const void *)bossCopyRenderPipelineCachedVideoFrames(a1, *(void *)(v12 + 80));
          uint64_t v17 = *(void *)(v12 + 192);
          CMTime v18 = *(const void **)(v12 + 200);
          CMTime time = *a2;
          if (v5 < 0.0)
          {
            long long v25 = *(_OWORD *)(a1 + 288);
            uint64_t v26 = *(void *)(a1 + 304);
            unsigned int v19 = EditMentorSetModeToReversePlayback(v17, (long long *)&time.value, &v25, v15, v16, 0, v18);
          }
          else
          {
            long long v25 = *(_OWORD *)(a1 + 168);
            uint64_t v26 = *(void *)(a1 + 184);
            unsigned int v19 = EditMentorSetModeToForwardPlayback(v17, (uint64_t)&time, &v25, v15, v16, 0, v18);
          }
          if (v10) {
            uint64_t v10 = v10;
          }
          else {
            uint64_t v10 = v19;
          }
          if (v15) {
            CFRelease(v15);
          }
          if (v16) {
            CFRelease(v16);
          }
        }
      }
      ++v9;
    }
    while (*(void *)(a1 + 80) > v9);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  return v10;
}

uint64_t FigPlaybackBossSendSampleForTime(uint64_t a1, CMTime *a2, char a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1 && !*(unsigned char *)(a1 + 16) && *(unsigned char *)(a1 + 120))
  {
    *(unsigned char *)(a1 + 428) = (a3 & 2) != 0;
    *(unsigned char *)(a1 + 429) = (a3 & 4) != 0;
    MEMORY[0x19970E910](*(void *)(a1 + 576));
    int v9 = *(_DWORD *)(a1 + 424);
    if (v9 > 1768189028)
    {
      if (v9 == 1768189029) {
        goto LABEL_15;
      }
      int v10 = 1920298606;
    }
    else
    {
      if (v9 == 1634624887) {
        goto LABEL_15;
      }
      int v10 = 1684365668;
    }
    if (v9 != v10)
    {
      uint64_t v7 = FigSignalErrorAt();
LABEL_19:
      MEMORY[0x19970E930](*(void *)(a1 + 576));
      return v7;
    }
LABEL_15:
    *(_DWORD *)(a1 + 424) = 1920298606;
    bossBumpCurrentMasterOrder(a1);
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v12 = *(void *)(a1 + 80);
    CMTime time = *a2;
    uint64_t v7 = bossSetMentorModesToScrub(a1, 0, v12, &time, 1, 0);
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    goto LABEL_19;
  }
  return FigSignalErrorAt();
}

uint64_t FigPlaybackBossSendSamplesForTimeRange(uint64_t a1, CMTime *a2, uint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1 && !*(unsigned char *)(a1 + 16) && *(unsigned char *)(a1 + 120))
  {
    *(unsigned char *)(a1 + 428) = (a4 & 2) != 0;
    *(unsigned char *)(a1 + 429) = (a4 & 4) != 0;
    MEMORY[0x19970E910](*(void *)(a1 + 576));
    int v11 = *(_DWORD *)(a1 + 424);
    if (v11 > 1768189028)
    {
      if (v11 == 1768189029) {
        goto LABEL_15;
      }
      int v12 = 1920298606;
    }
    else
    {
      if (v11 == 1634624887) {
        goto LABEL_15;
      }
      int v12 = 1684365668;
    }
    if (v11 != v12)
    {
      uint64_t v9 = FigSignalErrorAt();
LABEL_24:
      MEMORY[0x19970E930](*(void *)(a1 + 576));
      return v9;
    }
LABEL_15:
    *(_DWORD *)(a1 + 424) = 1920298606;
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      int v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    bossSetMentorPropertiesForRate(a1, 0, 1.0);
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    long long v14 = *(_OWORD *)&a2->value;
    *(void *)(a1 + 256) = a2->epoch;
    *(_OWORD *)(a1 + 240) = v14;
    uint64_t v15 = *(void *)(a3 + 16);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)a3;
    *(void *)(a1 + 280) = v15;
    char v16 = a4 & 1;
    if ((a4 & 8) != 0) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
    bossBumpCurrentMasterOrder(a1);
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      CMTime v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v19 = *(void *)(a1 + 80);
    CMTime time = *a2;
    CMTime v20 = *(CMTime *)a3;
    uint64_t v9 = bossSetMentorModesToForwardPlayback(a1, 0, v19, &time, &v20, 0, 0, v17, 1.0, 1.0, v16, 0, 0);
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    goto LABEL_24;
  }
  return FigSignalErrorAt();
}

__n128 FigPlaybackBossGetScheduledEndTime@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  a2[1].n128_u64[0] = *(void *)(a1 + 328);
  __n128 result = *(__n128 *)(a1 + 312);
  *a2 = result;
  return result;
}

uint64_t FigPlaybackBossDidReachEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t FigPlaybackBossGetStopAtEnd(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(unsigned __int8 *)(result + 129);
    }
  }
  return result;
}

uint64_t FigPlaybackBossSetAudibleRateRange(uint64_t a1, char a2, char a3, float a4, float a5)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 392) = a2;
  *(float *)(a1 + 396) = a4;
  *(unsigned char *)(a1 + 393) = a3;
  *(float *)(a1 + 400) = a5;
  return result;
}

uint64_t FigPlaybackBossGetAudibleRateRange(uint64_t a1, unsigned char *a2, _DWORD *a3, unsigned char *a4, _DWORD *a5)
{
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = *(unsigned char *)(a1 + 392);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 396);
  }
  if (a4) {
    *a4 = *(unsigned char *)(a1 + 393);
  }
  if (a5) {
    *a5 = *(_DWORD *)(a1 + 400);
  }
  return 0;
}

uint64_t FigPlaybackBossSetRateSnapping(uint64_t a1, char a2, float a3, float a4)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 404) = a2;
  *(float *)(a1 + 408) = a3;
  *(float *)(a1 + 412) = a4;
  return result;
}

uint64_t FigPlaybackBossGetRateSnapping(uint64_t a1, unsigned char *a2, _DWORD *a3, _DWORD *a4)
{
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = *(unsigned char *)(a1 + 404);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 408);
  }
  if (a4) {
    *a4 = *(_DWORD *)(a1 + 412);
  }
  return 0;
}

uint64_t FigPlaybackBossSetContinuePlayingDuringPrerollForSeek(uint64_t a1, char a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 130) = a2;
  return result;
}

uint64_t FigPlaybackBossGetContinuePlayingDuringPrerollForSeek(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(unsigned __int8 *)(result + 130);
    }
  }
  return result;
}

uint64_t FigPlaybackBossSetContinuePlayingDuringPrerollForRateChange(uint64_t a1, char a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 131) = a2;
  return result;
}

uint64_t FigPlaybackBossGetContinuePlayingDuringPrerollForRateChange(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(unsigned __int8 *)(result + 131);
    }
  }
  return result;
}

uint64_t FigPlaybackBossSetIFrameOnlySpeedThreshold(uint64_t a1, float a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 135) = 1;
  *(float *)(a1 + 136) = a2;
  *(_DWORD *)(a1 + 504) = 0;
  return result;
}

float FigPlaybackBossGetIFrameOnlySpeedThreshold(uint64_t a1)
{
  float result = 0.0;
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      return *(float *)(a1 + 136);
    }
  }
  return result;
}

uint64_t FigPlaybackBossSetReversalLimits(uint64_t a1, int a2, int a3)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 144) = a2;
  *(_DWORD *)(a1 + 148) = a3;
  uint64_t result = 0;
  if (*(float *)(a1 + 504) < 0.0) {
    *(_DWORD *)(a1 + 504) = 0;
  }
  return result;
}

uint64_t FigPlaybackBossGetReversalLimits(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 144);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 148);
  }
  return 0;
}

uint64_t FigPlaybackBossSetScrubPolicy(uint64_t a1, int a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 152) = a2;
  return result;
}

uint64_t FigPlaybackBossGetScrubPolicy(uint64_t a1, _DWORD *a2)
{
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 152);
  }
  return 0;
}

uint64_t FigPlaybackBossSetUseIFrameOnlyPlaybackForHighRateScaledEdits(uint64_t a1, char a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 132) = a2;
  return result;
}

uint64_t FigPlaybackBossGetUseIFrameOnlyPlaybackForHighRateScaledEdits(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(unsigned __int8 *)(result + 132);
    }
  }
  return result;
}

uint64_t FigPlaybackBossSetMinimumIntervalForIFrameOnlyPlayback(uint64_t a1, long long *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
      long long v8 = *a2;
      *(void *)(ValueAtIndex + 364) = *((void *)a2 + 2);
      *(_OWORD *)(ValueAtIndex + 348) = v8;
      ++v6;
    }
    while (*(void *)(a1 + 80) > v6);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  return 0;
}

uint64_t FigPlaybackBossSetTrackEnableForStepping(uint64_t a1, int a2, char a3)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      CFIndex v7 = 0;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
        if (*((_DWORD *)ValueAtIndex + 6) == a2) {
          ValueAtIndex[89] = a3;
        }
        ++v7;
      }
      while (*(void *)(a1 + 80) > v7);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlaybackBossSetThoroughlyRefreshClosedCaptionsWhenSeeking(uint64_t a1, char a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 133) = a2;
  return result;
}

uint64_t FigPlaybackBossGetThoroughlyRefreshClosedCaptionsWhenSeeking(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(unsigned __int8 *)(result + 133);
    }
  }
  return result;
}

uint64_t FigPlaybackBossCopyTrackPerformanceDictionary(uint64_t a1, int a2, const __CFAllocator *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  memset(v50, 0, sizeof(v50));
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      LODWORD(cf) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(a1 + 80) < 1)
    {
LABEL_12:
      MEMORY[0x19970E930](*(void *)(a1 + 64));
      return FigSignalErrorAt();
    }
    CFIndex v8 = 0;
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v8);
      if (ValueAtIndex[6] == a2) {
        break;
      }
      if (*(void *)(a1 + 80) <= ++v8) {
        goto LABEL_12;
      }
    }
    int v11 = ValueAtIndex;
    CFRetain(ValueAtIndex);
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    int v12 = *(unsigned __int8 *)(a1 + 123);
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)keys = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    *(_OWORD *)values = 0u;
    long long v52 = 0u;
    if (!v12)
    {
      *(void *)&v50[0] = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      goto LABEL_49;
    }
    keys[0] = @"NumberOfSamplesInTrack";
    int valuePtr = 0;
    *(void *)CMTimeRange type = 0;
    CFTypeRef cf = 0;
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 40));
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    int v17 = *(uint64_t (**)(uint64_t, __CFString *, void, os_log_type_t *))(v15 + 48);
    if (v17)
    {
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      int v19 = v17(FigBaseObject, @"Identifier", *MEMORY[0x1E4F1CF80], type);
      if (v19) {
        goto LABEL_75;
      }
      if (FigCFEqual() || FigCFEqual())
      {
        uint64_t v20 = v11[4];
        if (v20)
        {
          uint64_t v21 = FigTrackReaderGetFigBaseObject(v20);
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v23 = v22 ? v22 : 0;
          int v24 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v23 + 48);
          if (v24)
          {
            if (!v24(v21, @"UneditedSampleCount", v18, values))
            {
LABEL_73:
              int v29 = 0;
              goto LABEL_44;
            }
          }
        }
        uint64_t v25 = v11[6];
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v27 = v26 ? v26 : 0;
        uint64_t v28 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v27 + 24);
        if (v28)
        {
          int v29 = v28(v25, &cf);
          if (v29) {
            goto LABEL_44;
          }
          int valuePtr = 0;
          int v30 = 1;
          while (1)
          {
            uint64_t v46 = 0;
            CFTypeRef v31 = cf;
            uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v33 = v32 ? v32 : 0;
            CMTimeValue v34 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v33 + 168);
            int v29 = v34 ? v34(v31, 1, &v46) : -12782;
            if (v46 != 1) {
              break;
            }
            int valuePtr = v30++;
            if (v29)
            {
              CFRelease(cf);
              goto LABEL_43;
            }
          }
          CFRelease(cf);
          if (v29) {
            goto LABEL_44;
          }
          values[0] = CFNumberCreate(v18, kCFNumberSInt32Type, &valuePtr);
          if (values[0]) {
            goto LABEL_73;
          }
          int v19 = FigSignalErrorAt();
LABEL_75:
          int v29 = v19;
          goto LABEL_44;
        }
      }
    }
LABEL_43:
    int v29 = -12783;
LABEL_44:
    if (*(void *)type) {
      CFRelease(*(CFTypeRef *)type);
    }
    *(void *)&v50[0] = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, v29 == 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v29 && values[0]) {
      CFRelease(values[0]);
    }
LABEL_49:
    uint64_t v35 = v11[15];
    if (v35)
    {
      if (VideoMentorCopyPerformanceDictionary(v35, (CFMutableDictionaryRef *)v50 + 1)) {
        uint64_t v36 = 1;
      }
      else {
        uint64_t v36 = 2;
      }
    }
    else
    {
      uint64_t v36 = 1;
    }
    uint64_t v37 = v11[5];
    if (v37)
    {
      uint64_t v38 = FigSampleGeneratorGetFigBaseObject(v37, v16);
      uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v40 = v39 ? v39 : 0;
      CMTimeEpoch v41 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, char *))(v40 + 48);
      if (v41)
      {
        if (!v41(v38, @"SampleGeneratorPerformanceDictionary", a3, (char *)v50 + 8 * v36)) {
          ++v36;
        }
      }
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    do
      v42 += CFDictionaryGetCount(*((CFDictionaryRef *)v50 + v43++));
    while (v36 != v43);
    if (v42 < 1)
    {
      uint64_t v10 = 0;
      if (!v11)
      {
LABEL_66:
        uint64_t v44 = (const void **)v50;
        do
        {
          uint64_t v45 = *v44++;
          CFRelease(v45);
          --v36;
        }
        while (v36);
        return v10;
      }
    }
    else
    {
      uint64_t v10 = FigCFCreateCombinedDictionary();
      if (!v11) {
        goto LABEL_66;
      }
    }
    CFRelease(v11);
    goto LABEL_66;
  }

  return FigSignalErrorAt();
}

uint64_t FigPlaybackBossCopyPerformanceDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    FigCFDictionarySetDouble();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if (*(unsigned char *)(a1 + 668))
    {
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&lhs, HostTimeClock);
      CMTime rhs = *(CMTime *)(a1 + 656);
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeGetSeconds(&time);
    }
    FigCFDictionarySetDouble();
    if (*(unsigned char *)(a1 + 700))
    {
      CFIndex v7 = *(OpaqueCMTimebase **)(a1 + 112);
      if (v7)
      {
        CMTimebaseGetTime(&v9, v7);
        CMTime rhs = *(CMTime *)(a1 + 688);
        CMTimeSubtract(&v10, &v9, &rhs);
        CMTimeGetSeconds(&v10);
      }
    }
    FigCFDictionarySetDouble();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if (*(unsigned char *)(a1 + 740))
    {
      CMTime rhs = *(CMTime *)(a1 + 728);
      CMTimeGetSeconds(&rhs);
      FigCFDictionarySetDouble();
    }
  }
  *a3 = Mutable;
  return 0;
}

uint64_t FigPlaybackBossSetClientPID(uint64_t a1, uint64_t a2)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
        uint64_t v8 = ValueAtIndex[10];
        if (v8)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
          uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v11 = v10 ? v10 : 0;
          int v12 = *(void (**)(uint64_t, __CFString *, uint64_t))(v11 + 56);
          if (v12) {
            v12(FigBaseObject, @"ClientPID", a2);
          }
        }
        int v13 = (unsigned char *)ValueAtIndex[15];
        if (v13) {
          VideoMentorSetClientPID(v13);
        }
        uint64_t v14 = (unsigned char *)ValueAtIndex[13];
        if (v14) {
          AudioMentorSetClientPID(v14);
        }
        ++v6;
      }
      while (*(void *)(a1 + 80) > v6);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlaybackBossSetThrottleForBackground(uint64_t a1, char a2)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    *(unsigned char *)(a1 + 127) = a2;
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    bossApplyThrottleForBackground(a1);
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL FigPlaybackBossIsInPlayingState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 424) == 1886151033;
}

BOOL FigPlaybackBossIsInPausedState(uint64_t a1)
{
  return *(_DWORD *)(a1 + 424) == 1885435251;
}

uint64_t bossReadModelSpecificPlaybackTuning()
{
  FigGetAllocatorForPermanentAllocations();
  uint64_t result = FigCreateModelSpecificPropertyList();
  sModelSpecificPlaybackTuning = result;
  return result;
}

void figPlaybackBoss_MentorPrerollComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    uint64_t v8 = v7;
    if (!*(unsigned char *)(v7 + 16))
    {
      MEMORY[0x19970E910](*(void *)(v7 + 24));
      MEMORY[0x19970E910](*(void *)(v8 + 576));
      MEMORY[0x19970E910](*(void *)(v8 + 64));
      if (*(unsigned char *)(v8 + 840))
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a5)
      {
        uint64_t Value = CFDictionaryGetValue(a5, @"MentorPrerollComplete_Order");
        FigCFDictionaryGetInt32IfPresent();
      }
      else
      {
        uint64_t Value = 0;
      }
      if (dword_1E9350D98)
      {
        uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!*(unsigned char *)(v8 + 16) && *(const void **)(a2 + 200) == Value && *(unsigned char *)(a2 + 213))
      {
        int v12 = *(const void **)(v8 + 536);
        if (v12) {
          CFRetain(*(CFTypeRef *)(v8 + 536));
        }
        *(unsigned char *)(a2 + 213) = 0;
        uint64_t v13 = *(void *)(v8 + 80);
        if (v13 >= 1 && (CFArrayRef v14 = *(const __CFArray **)(v8 + 72)) != 0) {
          CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v14);
        }
        else {
          CFArrayRef Copy = 0;
        }
        MEMORY[0x19970E930](*(void *)(v8 + 64));
        MEMORY[0x19970E930](*(void *)(v8 + 576));
        if (v13 >= 1)
        {
          if (*((unsigned char *)CFArrayGetValueAtIndex(Copy, 0) + 213))
          {
LABEL_38:
            if (v12) {
              CFRelease(v12);
            }
            MEMORY[0x19970E930](*(void *)(v8 + 24));
            if (Copy) {
              CFRelease(Copy);
            }
            goto LABEL_13;
          }
          CFIndex v16 = 1;
          while (v13 != v16)
          {
            uint64_t ValueAtIndex = CFArrayGetValueAtIndex(Copy, v16++);
            if (ValueAtIndex[213])
            {
              if (v16 - 1 < v13) {
                goto LABEL_38;
              }
              break;
            }
          }
          for (CFIndex i = 0; i != v13; ++i)
          {
            uint64_t v19 = *((void *)CFArrayGetValueAtIndex(Copy, i) + 5);
            if (v19)
            {
              uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v21 = v20 ? v20 : 0;
              uint64_t v22 = *(void (**)(uint64_t))(v21 + 16);
              if (v22) {
                v22(v19);
              }
            }
          }
        }
        if (!*(unsigned char *)(v8 + 16))
        {
          *(unsigned char *)(v8 + 601) = 0;
          figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(v8);
        }
        goto LABEL_38;
      }
      MEMORY[0x19970E930](*(void *)(v8 + 64));
      MEMORY[0x19970E930](*(void *)(v8 + 576));
      MEMORY[0x19970E930](*(void *)(v8 + 24));
    }
LABEL_13:
    CFRelease((CFTypeRef)v8);
  }
}

void figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 576));
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTimeRange type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigCFEqual())
    {
      int v3 = *(unsigned __int8 *)(a1 + 600) | *(unsigned __int8 *)(a1 + 601);
      MEMORY[0x19970E930](*(void *)(a1 + 64));
      MEMORY[0x19970E930](*(void *)(a1 + 576));
      if (!v3)
      {
        if (dword_1E9350D98)
        {
          int v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(unsigned char *)(a1 + 16))
        {
          MEMORY[0x19970E910](*(void *)(a1 + 576));
          MEMORY[0x19970E910](*(void *)(a1 + 64));
          if (*(unsigned char *)(a1 + 840))
          {
            CFIndex v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (FigCFEqual() && *(uint64_t *)(a1 + 80) >= 1)
          {
            CFIndex v7 = 0;
            int v8 = 0;
            do
            {
              uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
              uint64_t v10 = ValueAtIndex;
              ValueAtIndex[214] = 1;
              uint64_t v11 = *((void *)ValueAtIndex + 10);
              if (v11
                && ((v12 = *((void *)ValueAtIndex + 25), (uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
                  ? (uint64_t v14 = 0)
                  : (uint64_t v14 = v13),
                    (uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t))(v14 + 56)) != 0 && !v15(v11, v12)))
              {
                int v8 = 1;
              }
              else
              {
                v10[214] = 0;
              }
              ++v7;
            }
            while (*(void *)(a1 + 80) > v7);
          }
          else
          {
            int v8 = 0;
          }
          MEMORY[0x19970E930](*(void *)(a1 + 64));
          MEMORY[0x19970E930](*(void *)(a1 + 576));
          if (!v8) {
            figPlaybackBossPrerollCompleted(a1, 0);
          }
        }
      }
    }
    else
    {
      if (dword_1E9350D98)
      {
        float v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19970E930](*(void *)(a1 + 64));
      MEMORY[0x19970E930](*(void *)(a1 + 576));
    }
  }
}

uint64_t bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  memset(&v39, 0, sizeof(v39));
  float v2 = *(float *)(a1 + 432);
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) <= 0)
  {
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    goto LABEL_34;
  }
  CFIndex v4 = 0;
  int v5 = 0;
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  do
  {
    uint64_t v7 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v4) + 10);
    if (v7)
    {
      CFDictionaryRef dictionaryRepresentation = 0;
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v10 + 48);
      if (v11) {
        v11(FigBaseObject, @"EndPresentationTimeForQueuedSamples", v6, &dictionaryRepresentation);
      }
      if (dictionaryRepresentation)
      {
        memset(&lhs, 0, sizeof(lhs));
        CMTimeMakeFromDictionary(&lhs, dictionaryRepresentation);
        if ((lhs.flags & 0x1D) != 1)
        {
LABEL_20:
          CFRelease(dictionaryRepresentation);
          goto LABEL_21;
        }
        if (v5)
        {
          if (v2 >= 0.0)
          {
            CMTime time1 = v39;
            CMTime time2 = lhs;
            CMTimeMaximum(&v39, &time1, &time2);
LABEL_19:
            int v5 = 1;
            goto LABEL_20;
          }
          CMTime time2 = v39;
          CMTime type = lhs;
          CMTimeMinimum(&time1, &time2, &type);
          *(_OWORD *)&v39.unsigned int value = *(_OWORD *)&time1.value;
          CMTimeEpoch epoch = time1.epoch;
        }
        else
        {
          *(_OWORD *)&v39.unsigned int value = *(_OWORD *)&lhs.value;
          CMTimeEpoch epoch = lhs.epoch;
        }
        v39.CMTimeEpoch epoch = epoch;
        goto LABEL_19;
      }
    }
LABEL_21:
    ++v4;
  }
  while (*(void *)(a1 + 80) > v4);
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  if (v5)
  {
    if (bossShouldExtendEndTime(a1))
    {
      memset(&time2, 0, sizeof(time2));
      if (v2 < 0.0) {
        int64_t v13 = -10;
      }
      else {
        int64_t v13 = 10;
      }
      CMTimeMake(&rhs, v13, 1);
      CMTime lhs = v39;
      CMTimeAdd(&time2, &lhs, &rhs);
      if (dword_1E9350D98)
      {
        LODWORD(type.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(dictionaryRepresentation) = 0;
        uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = type.value;
        if (os_log_type_enabled(v14, (os_log_type_t)dictionaryRepresentation)) {
          unsigned int v16 = value;
        }
        else {
          unsigned int v16 = value & 0xFFFFFFFE;
        }
        if (v16)
        {
          CMTime lhs = v39;
          Float64 Seconds = CMTimeGetSeconds(&lhs);
          CMTime lhs = time2;
          Float64 v18 = CMTimeGetSeconds(&lhs);
          LODWORD(time1.CFDictionarySetValue(theDict, key, value) = 136316162;
          *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
          LOWORD(time1.flags) = 2048;
          *(void *)((char *)&time1.flags + 2) = a1;
          HIWORD(time1.epoch) = 2082;
          uint64_t v41 = a1 + 841;
          __int16 v42 = 2048;
          Float64 v43 = Seconds;
          __int16 v44 = 2048;
          Float64 v45 = v18;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTime v39 = time2;
    }
    if (dword_1E9350D98)
    {
      LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v28 = time2.value;
      if (os_log_type_enabled(v27, type.value)) {
        unsigned int v29 = v28;
      }
      else {
        unsigned int v29 = v28 & 0xFFFFFFFE;
      }
      if (v29)
      {
        CMTime lhs = v39;
        Float64 v30 = CMTimeGetSeconds(&lhs);
        LODWORD(time1.CFDictionarySetValue(theDict, key, value) = 136315906;
        *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
        LOWORD(time1.flags) = 2048;
        *(void *)((char *)&time1.flags + 2) = a1;
        HIWORD(time1.epoch) = 2082;
        uint64_t v41 = a1 + 841;
        __int16 v42 = 2048;
        Float64 v43 = v30;
LABEL_58:
        _os_log_send_and_compose_impl();
      }
      goto LABEL_59;
    }
    goto LABEL_60;
  }
LABEL_34:
  if (bossShouldExtendEndTime(a1))
  {
    CMTimebaseGetTime(&v34, *(CMTimebaseRef *)(a1 + 112));
    if (v2 < 0.0) {
      int64_t v19 = -10;
    }
    else {
      int64_t v19 = 10;
    }
    CMTimeMake(&v33, v19, 1);
    CMTimeAdd(&lhs, &v34, &v33);
    CMTime v39 = lhs;
    if (dword_1E9350D98)
    {
      LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v21 = time2.value;
      if (os_log_type_enabled(v20, type.value)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22)
      {
        CMTime lhs = v39;
        Float64 v23 = CMTimeGetSeconds(&lhs);
        LODWORD(time1.CFDictionarySetValue(theDict, key, value) = 136315906;
        *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
        LOWORD(time1.flags) = 2048;
        *(void *)((char *)&time1.flags + 2) = a1;
        HIWORD(time1.epoch) = 2082;
        uint64_t v41 = a1 + 841;
        __int16 v42 = 2048;
        Float64 v43 = v23;
        goto LABEL_58;
      }
LABEL_59:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_60:
    CMTime lhs = v39;
    return bossScheduleReachedEndCallbackForTime(a1, &lhs);
  }
  else
  {
    if (dword_1E9350D98)
    {
      LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v25 = time2.value;
      if (os_log_type_enabled(v24, type.value)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        LODWORD(time1.CFDictionarySetValue(theDict, key, value) = 136315650;
        *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS";
        LOWORD(time1.flags) = 2048;
        *(void *)((char *)&time1.flags + 2) = a1;
        HIWORD(time1.epoch) = 2082;
        uint64_t v41 = a1 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v32 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a1 + 312) = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 328) = *(void *)(v32 + 16);
    return CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  }
}

BOOL bossShouldExtendEndTime(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  CFNumberRef v1 = *(const __CFNumber **)(a1 + 552);
  if (!v1) {
    return 0;
  }
  CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
  BOOL v2 = valuePtr == -12935 || valuePtr == -1001;
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

void figPlaybackBossReachedEndWithContext(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 16))
  {
    os_retain(*(void **)(a1 + 784));
    voucher_adopt();
    *(unsigned char *)(a1 + 128) = 1;
    if (*(unsigned char *)(a1 + 129))
    {
      if (dword_1E9350D98)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTime time = *(CMTime *)(a1 + 312);
      figPlaybackBossSetRateToZero(a1, 2, &time);
      uint64_t v3 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(a1 + 312) = *MEMORY[0x1E4F1F9F8];
      *(void *)(a1 + 328) = *(void *)(v3 + 16);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFIndex v4 = (void *)voucher_adopt();
    os_release(v4);
  }
}

void figPlaybackBoss_bufferConsumedByRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!*(unsigned char *)(v6 + 16))
  {
    if (*(void *)(v6 + 592))
    {
      BOOL v8 = *(unsigned char *)(v6 + 468) == 0;
      if (!a5) {
        goto LABEL_3;
      }
    }
    else
    {
      BOOL v8 = 1;
      if (!a5) {
        goto LABEL_3;
      }
    }
    if (v8)
    {
      CFTypeID v9 = CFGetTypeID(a5);
      if (v9 == CFDictionaryGetTypeID())
      {
        if (CFDictionaryGetValue((CFDictionaryRef)a5, @"BossScrubOrder"))
        {
          MEMORY[0x19970E910](*(void *)(v7 + 576));
          if (FigCFEqual() && (int v10 = *(_DWORD *)(v7 + 776)) != 0)
          {
            *(unsigned char *)(v7 + 780) = 0;
            *(_DWORD *)(v7 + 776) = 0;
            MEMORY[0x19970E930](*(void *)(v7 + 576));
            figPlaybackBossPostSeekDidComplete(v7, v10, 0);
          }
          else
          {
            MEMORY[0x19970E930](*(void *)(v7 + 576));
          }
        }
      }
    }
  }
LABEL_3:

  CFRelease((CFTypeRef)v7);
}

void figPlaybackBoss_renderPipelineCompletedDecodeForPreroll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *Value)
{
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    uint64_t v8 = v7;
    MEMORY[0x19970E910](*(void *)(v7 + 24));
    if (Value) {
      uint64_t Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"RequestID");
    }
    MEMORY[0x19970E910](*(void *)(v8 + 576));
    if (!*(unsigned char *)(v8 + 16) && *(const __CFDictionary **)(a2 + 200) == Value && *(unsigned char *)(a2 + 214))
    {
      CFTypeID v9 = *(const void **)(v8 + 536);
      if (v9) {
        CFRetain(*(CFTypeRef *)(v8 + 536));
      }
      *(unsigned char *)(a2 + 214) = 0;
      MEMORY[0x19970E910](*(void *)(v8 + 64));
      if (*(unsigned char *)(v8 + 840))
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(uint64_t *)(v8 + 80) < 1)
      {
LABEL_17:
        MEMORY[0x19970E930](*(void *)(v8 + 64));
        uint64_t v12 = malloc_type_calloc(1uLL, 0x10uLL, 0xE0040E685C293uLL);
        void *v12 = CFRetain((CFTypeRef)v8);
        if (v9) {
          CFTypeRef v13 = CFRetain(v9);
        }
        else {
          CFTypeRef v13 = 0;
        }
        v12[1] = v13;
        dispatch_async_f(*(dispatch_queue_t *)(v8 + 32), v12, (dispatch_function_t)figPlaybackBoss_allRenderPipelinesCompletedDecodeForPreroll_f);
      }
      else
      {
        CFIndex v11 = 0;
        while (!*((unsigned char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 72), v11) + 214))
        {
          if (*(void *)(v8 + 80) <= ++v11) {
            goto LABEL_17;
          }
        }
        MEMORY[0x19970E930](*(void *)(v8 + 64));
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    MEMORY[0x19970E930](*(void *)(v8 + 576));
    MEMORY[0x19970E930](*(void *)(v8 + 24));
    CFRelease((CFTypeRef)v8);
  }
}

void figPlaybackBoss_renderPipelinePrerollLost()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = v0;
    MEMORY[0x19970E910](*(void *)(v0 + 24));
    MEMORY[0x19970E910](*(void *)(v1 + 576));
    if (!*(unsigned char *)(v1 + 16)) {
      *(unsigned char *)(v1 + 106) = 1;
    }
    MEMORY[0x19970E930](*(void *)(v1 + 576));
    MEMORY[0x19970E930](*(void *)(v1 + 24));
    CFRelease((CFTypeRef)v1);
  }
}

void figPlaybackBoss_renderPipelineLostDecoderState()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v0) {
    return;
  }
  uint64_t v1 = v0;
  if (!*(unsigned char *)(v0 + 120))
  {
    MEMORY[0x19970E910](*(void *)(v0 + 24));
    MEMORY[0x19970E910](*(void *)(v1 + 64));
    if (*(unsigned char *)(v1 + 840))
    {
      int v17 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(v1 + 80) >= 1)
    {
      CFIndex v3 = 0;
      do
      {
        uint64_t v4 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), v3) + 10);
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 64);
        if (v7) {
          v7(v4, 1);
        }
        ++v3;
      }
      while (v3 < *(void *)(v1 + 80));
    }
    MEMORY[0x19970E930](*(void *)(v1 + 64));
    MEMORY[0x19970E910](*(void *)(v1 + 576));
    uint64_t v8 = *(void *)(v1 + 80);
    int v9 = *(_DWORD *)(v1 + 424);
    if (v9 <= 1886530415)
    {
      if (v9 > 1886151032)
      {
        if (v9 != 1886151033 && v9 != 1886154860 && v9 != 1886155888) {
          goto LABEL_43;
        }
        MEMORY[0x19970E910](*(void *)(v1 + 64));
        if (*(unsigned char *)(v1 + 840))
        {
          int v17 = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMTimebaseGetTime(&v14, *(CMTimebaseRef *)(v1 + 112));
        bossSetMentorModesForTimeAndRate(v1, 0, v8, &v14, *(void *)(v1 + 432), *(_DWORD *)(v1 + 440), 2, 0);
        goto LABEL_42;
      }
      if (v9 != 1768189029)
      {
        if (v9 != 1885435251) {
          goto LABEL_43;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v9 <= 1919247480)
      {
        if (v9 == 1886530416)
        {
          CFTypeRef v13 = *(const void **)(v1 + 416);
          v19[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          figPlaybackBossStartPrerollAndSetPlayState(v1, v19, *(void *)(v1 + 432), *(_DWORD *)(v1 + 440), 2, 1886530416, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v13);
          goto LABEL_43;
        }
        if (v9 != 1886544244)
        {
          if (v9 != 1886545266) {
            goto LABEL_43;
          }
          goto LABEL_35;
        }
        goto LABEL_31;
      }
      if (v9 == 1919247481)
      {
LABEL_35:
        *(_DWORD *)(v1 + 424) = 1885435251;
LABEL_36:
        memset(&v18, 0, sizeof(v18));
        FigPlaybackBossGetTime(v1, &v18);
        MEMORY[0x19970E910](*(void *)(v1 + 64));
        if (*(unsigned char *)(v1 + 840))
        {
          *(_DWORD *)CMTime type = 0;
          os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
          CFIndex v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v19[0] = v18;
        bossSetMentorModesToScrub(v1, 0, v8, v19, 0, 0);
LABEL_42:
        MEMORY[0x19970E930](*(void *)(v1 + 64));
        goto LABEL_43;
      }
      if (v9 != 1920298606)
      {
        if (v9 != 2003853684)
        {
LABEL_43:
          MEMORY[0x19970E930](*(void *)(v1 + 576));
          MEMORY[0x19970E930](*(void *)(v1 + 24));
          CFRelease((CFTypeRef)v1);
          return;
        }
LABEL_31:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        goto LABEL_43;
      }
    }
    int v17 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_43;
  }

  CFRelease((CFTypeRef)v0);
}

void figPlaybackBoss_allRenderPipelinesCompletedDecodeForPreroll_f(uint64_t *a1)
{
  figPlaybackBossPrerollCompleted(*a1, 0);
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  BOOL v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

uint64_t figPlaybackBoss_editCursorServiceContainsScaledEditsInTimeRange(uint64_t a1, uint64_t a2)
{
  CFTypeRef v23 = 0;
  *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a2;
  time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v5 + 8);
  if (v6)
  {
    *(_OWORD *)&v22[0].start.unsigned int value = *(_OWORD *)&time1.start.value;
    v22[0].start.CMTimeEpoch epoch = time1.start.epoch;
    if (!v6(a1, v22, &v23))
    {
      while (1)
      {
        memset(v22, 0, sizeof(v22));
        CFTypeRef v7 = v23;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v9 = v8 ? v8 : 0;
        int v10 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(v9 + 24);
        if (!v10 || v10(v7, v22)) {
          break;
        }
        if ((v22[0].start.flags & 1) != 0
          && (v22[0].duration.flags & 1) != 0
          && !v22[0].duration.epoch
          && (v22[0].duration.value & 0x8000000000000000) == 0)
        {
          time1.CMTimeRange start = v22[0].duration;
          CMTime time2 = v22[1].duration;
          if (CMTimeCompare(&time1.start, &time2))
          {
            uint64_t v16 = 1;
            goto LABEL_23;
          }
        }
        CFTypeRef v11 = v23;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CMTime v14 = *(unsigned int (**)(CFTypeRef, uint64_t))(v13 + 16);
        if (v14)
        {
          if (!v14(v11, 1))
          {
            long long v15 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a2;
            *(_OWORD *)&time1.start.CMTimeEpoch epoch = v15;
            *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
            CMTimeRangeGetEnd(&v20, &time1);
            CMTimeRange time1 = v22[1];
            CMTimeRangeGetEnd(&v18, &time1);
            if (CMTimeCompare(&v20, &v18) > 0) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
  uint64_t v16 = 0;
LABEL_23:
  if (v23) {
    CFRelease(v23);
  }
  return v16;
}

void figPlaybackBoss_VideoCompositionProcessorPrerollComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (a2 && !*(unsigned char *)(a2 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a2 + 24));
    if (a5) {
      CFDictionaryGetValue(a5, @"VideoCompositionProcessor_Order");
    }
    MEMORY[0x19970E910](*(void *)(a2 + 576));
    if (dword_1E9350D98)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(unsigned char *)(a2 + 16) && FigCFEqual() && *(unsigned char *)(a2 + 600))
    {
      *(unsigned char *)(a2 + 600) = 0;
      MEMORY[0x19970E930](*(void *)(a2 + 576));
      MEMORY[0x19970E930](*(void *)(a2 + 24));
      figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(a2);
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(a2 + 576));
      MEMORY[0x19970E930](*(void *)(a2 + 24));
    }
  }
}

uint64_t bossRemoveNotificationListenersForTrack(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 397))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t result = FigNotificationCenterRemoveWeakListeners();
    *(unsigned char *)(v1 + 397) = 0;
  }
  if (*(unsigned char *)(v1 + 398))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    *(unsigned char *)(v1 + 398) = 0;
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v1 + 80));
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? (void *)v4 : 0;
    if (*v6 >= 2uLL)
    {
      CFTypeRef v7 = (uint64_t (*)(uint64_t))v6[8];
      if (v7)
      {
        return v7(FigBaseObject);
      }
    }
  }
  return result;
}

void figPlaybackBoss_VideoCompositionProcessorSeekComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  CMTimeValue v19 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v20 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  if (a5)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a5))
      {
        uint64_t Value = CFDictionaryGetValue(a5, @"VideoCompositionProcessor_Order");
        if (Value)
        {
          int v10 = Value;
          CFTypeID v11 = CFNumberGetTypeID();
          if (v11 == CFGetTypeID(v10))
          {
            CMTimeFlags v12 = *(_DWORD *)(v5 + 12);
            CMTimeEpoch v13 = *(void *)(v5 + 16);
            MEMORY[0x19970E910](*(void *)(a2 + 24));
            if (*(unsigned char *)(a2 + 16))
            {
              int v14 = 0;
              int v15 = 0;
            }
            else
            {
              MEMORY[0x19970E910](*(void *)(a2 + 576));
              if (CFEqual(v10, *(CFTypeRef *)(a2 + 536)))
              {
                CMTimeValue v19 = *(void *)(a2 + 472);
                CMTimeScale v20 = *(_DWORD *)(a2 + 480);
                CMTimeFlags v12 = *(_DWORD *)(a2 + 484);
                CMTimeEpoch v16 = *(void *)(a2 + 488);
                *(_OWORD *)(a2 + 472) = *(_OWORD *)v5;
                *(void *)(a2 + 488) = v13;
                if (*(unsigned char *)(a2 + 468))
                {
                  int v15 = *(_DWORD *)(a2 + 776);
                  if (v15)
                  {
                    *(unsigned char *)(a2 + 780) = 0;
                    *(_DWORD *)(a2 + 776) = 0;
                    int v14 = 1;
                  }
                  else
                  {
                    int v14 = 0;
                  }
                }
                else
                {
                  int v14 = 0;
                  int v15 = 0;
                }
                CMTimeEpoch v13 = v16;
              }
              else
              {
                int v14 = 0;
                int v15 = 0;
              }
              MEMORY[0x19970E930](*(void *)(a2 + 576));
            }
            MEMORY[0x19970E930](*(void *)(a2 + 24));
            if ((v12 & 0x1D) == 1)
            {
              int v17 = *(OpaqueCMTimebase **)(a2 + 112);
              v18.unsigned int value = v19;
              v18.CMTimeScale timescale = v20;
              v18.CMTimeFlags flags = v12;
              v18.CMTimeEpoch epoch = v13;
              CMTimebaseSetTime(v17, &v18);
            }
            if (v14) {
              figPlaybackBossPostSeekDidComplete(a2, v15, 0);
            }
          }
        }
      }
    }
  }
}

uint64_t bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(uint64_t a1, CMTime *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *(NSObject **)(a1 + 360);
  if (v5) {
    goto LABEL_7;
  }
  uint64_t v6 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 32));
  *(void *)(a1 + 360) = v6;
  if (!v6) {
    return FigSignalErrorAt();
  }
  dispatch_set_context(v6, (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 360), (dispatch_function_t)figPlaybackBossAdvanceForOverlappedPlaybackWithContext);
  dispatch_resume(*(dispatch_object_t *)(a1 + 360));
  uint64_t result = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 360));
  if (!result)
  {
    uint64_t v5 = *(NSObject **)(a1 + 360);
LABEL_7:
    long long v8 = *(_OWORD *)&a2->value;
    *(void *)(a1 + 384) = a2->epoch;
    *(_OWORD *)(a1 + 368) = v8;
    uint64_t v9 = *(OpaqueCMTimebase **)(a1 + 112);
    CMTime time = *a2;
    return CMTimebaseSetTimerDispatchSourceNextFireTime(v9, v5, &time, 1u);
  }
  return result;
}

void figPlaybackBossAdvanceForOverlappedPlaybackWithContext(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    os_retain(*(void **)(a1 + 784));
    voucher_adopt();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    uint64_t v1 = (void *)voucher_adopt();
    os_release(v1);
  }
}

uint64_t bossUsingEditCursorServiceArrayFindEditSegmentContainingTrackTime(uint64_t *a1, int a2, uint64_t a3, unsigned char *a4, _OWORD *a5)
{
  CFTypeRef v38 = 0;
  memset(v37, 0, sizeof(v37));
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(&v30, 0, sizeof(v30));
  uint64_t v10 = *a1;
  *(_OWORD *)&time[0].start.unsigned int value = *(_OWORD *)a3;
  time[0].start.CMTimeEpoch epoch = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CMTimeEpoch v13 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v12 + 8);
  if (!v13) {
    goto LABEL_20;
  }
  *(_OWORD *)&range.start.unsigned int value = *(_OWORD *)&time[0].start.value;
  range.start.CMTimeEpoch epoch = time[0].start.epoch;
  uint64_t v14 = v13(v10, &range, &v38);
  if (v14 == -12521)
  {
LABEL_25:
    uint64_t v15 = 0;
    goto LABEL_22;
  }
  uint64_t v15 = v14;
  if (v14)
  {
LABEL_21:
    FigSignalErrorAt();
    goto LABEL_22;
  }
  CFTypeRef v16 = v38;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v18 = v17 ? v17 : 0;
  CMTimeValue v19 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v18 + 24);
  if (!v19)
  {
LABEL_20:
    uint64_t v15 = 4294954514;
    goto LABEL_21;
  }
  uint64_t v15 = v19(v16, v37);
  if (v15) {
    goto LABEL_21;
  }
  if (a4) {
    *a4 = 1;
  }
  if ((v37[0].start.flags & 0x1D) != 1
    || (*(_OWORD *)&time[0].start.unsigned int value = *(_OWORD *)a3,
        time[0].start.CMTimeEpoch epoch = *(void *)(a3 + 16),
        CMTimeRange range = v37[1],
        CMTimeClampToRange(&v29, &time[0].start, &range),
        CMTimeRange range = v37[1],
        time[0] = v37[0],
        CMTimeMapTimeFromRangeToRange(&v30, &v29, &range, time),
        a2 < 2))
  {
LABEL_18:
    if (a5)
    {
      uint64_t v15 = 0;
      long long v21 = *(_OWORD *)&v37[1].start.value;
      a5[2] = *(_OWORD *)&v37[0].duration.timescale;
      a5[3] = v21;
      long long v22 = *(_OWORD *)&v37[1].duration.timescale;
      a5[4] = *(_OWORD *)&v37[1].start.epoch;
      a5[5] = v22;
      long long v23 = *(_OWORD *)&v37[0].start.epoch;
      *a5 = *(_OWORD *)&v37[0].start.value;
      a5[1] = v23;
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  range.CMTimeRange start = v30;
  uint64_t EditSegmentContainingTrackTime = bossUsingEditCursorServiceArrayFindEditSegmentContainingTrackTime(a1 + 1, 1, &range, 0, &v31);
  if (!EditSegmentContainingTrackTime)
  {
    time[0] = v37[0];
    time[1] = v37[1];
    v25[2] = v33;
    v25[3] = v34;
    v25[4] = v35;
    v25[5] = v36;
    v25[0] = v31;
    v25[1] = v32;
    bossCombineEditSegments((uint64_t)time, (uint64_t)v25, (uint64_t)&range);
    v37[0] = range;
    v37[1] = v28;
    goto LABEL_18;
  }
  uint64_t v15 = EditSegmentContainingTrackTime;
LABEL_22:
  if (v38) {
    CFRelease(v38);
  }
  return v15;
}

uint64_t bossUsingEditCursorServiceArrayFindNextNonEmptyTrackTime(uint64_t *a1, int a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  v70[0] = 0;
  memset(v69, 0, sizeof(v69));
  if (!a2)
  {
    uint64_t v17 = 0;
    long long v18 = *a3;
    *(void *)(a6 + 16) = *((void *)a3 + 2);
    *(_OWORD *)a6 = v18;
    goto LABEL_13;
  }
  uint64_t v14 = *a1;
  *(_OWORD *)&time2.start.unsigned int value = *a3;
  time2.start.CMTimeEpoch epoch = *((void *)a3 + 2);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  CMTimeValue v19 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v16 + 8);
  if (!v19)
  {
    uint64_t v17 = 4294954514;
    goto LABEL_12;
  }
  *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)&time2.start.value;
  time1.start.CMTimeEpoch epoch = time2.start.epoch;
  uint64_t v20 = v19(v14, &time1, v70);
  if (v20 == -12521)
  {
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  uint64_t v17 = v20;
  if (v20)
  {
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_13;
  }
  CFTypeRef v21 = v70[0];
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  unsigned int v25 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v23 + 24);
  if (v25)
  {
    uint64_t v26 = v25(v21, v69);
    if (v26) {
      goto LABEL_63;
    }
    if ((a4 & 0x80000000) == 0
      || (*(_OWORD *)&time1.start.unsigned int value = *a3,
          time1.start.CMTimeEpoch epoch = *((void *)a3 + 2),
          *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)&v69[1].start.value,
          time2.start.CMTimeEpoch epoch = v69[1].start.epoch,
          CMTimeCompare(&time1.start, &time2.start)))
    {
      while (1)
      {
LABEL_22:
        if ((int)a4 < 1)
        {
          memset(&time2, 0, 24);
          CMTimeRange time1 = v69[1];
          CMTimeRangeGetEnd(&time2.start, &time1);
          *(_OWORD *)&time1.start.unsigned int value = *a3;
          time1.start.CMTimeEpoch epoch = *((void *)a3 + 2);
          *(_OWORD *)&time[0].start.unsigned int value = *(_OWORD *)&time2.start.value;
          time[0].start.CMTimeEpoch epoch = time2.start.epoch;
          if (CMTimeCompare(&time1.start, &time[0].start) >= 1)
          {
            *a3 = *(_OWORD *)&time2.start.value;
            *((void *)a3 + 2) = time2.start.epoch;
          }
          if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1)
          {
            *(_OWORD *)&time1.start.unsigned int value = *a3;
            time1.start.CMTimeEpoch epoch = *((void *)a3 + 2);
            *(_OWORD *)&time[0].start.unsigned int value = *(_OWORD *)a5;
            time[0].start.CMTimeEpoch epoch = *(void *)(a5 + 16);
            if (CMTimeCompare(&time1.start, &time[0].start) < 1)
            {
LABEL_65:
              uint64_t v17 = 4294954776;
              goto LABEL_13;
            }
          }
        }
        else
        {
          *(_OWORD *)&time1.start.unsigned int value = *a3;
          time1.start.CMTimeEpoch epoch = *((void *)a3 + 2);
          *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)&v69[1].start.value;
          time2.start.CMTimeEpoch epoch = v69[1].start.epoch;
          if (CMTimeCompare(&time1.start, &time2.start) < 0)
          {
            *a3 = *(_OWORD *)&v69[1].start.value;
            *((void *)a3 + 2) = v69[1].start.epoch;
          }
          if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1)
          {
            *(_OWORD *)&time1.start.unsigned int value = *a3;
            time1.start.CMTimeEpoch epoch = *((void *)a3 + 2);
            *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)a5;
            time2.start.CMTimeEpoch epoch = *(void *)(a5 + 16);
            if ((CMTimeCompare(&time1.start, &time2.start) & 0x80000000) == 0) {
              goto LABEL_65;
            }
          }
        }
        if ((v69[0].start.flags & 0x1D) == 1)
        {
          memset(&start, 0, sizeof(start));
          *(_OWORD *)&time2.start.unsigned int value = *a3;
          time2.start.CMTimeEpoch epoch = *((void *)a3 + 2);
          CMTimeRange time1 = v69[1];
          CMTimeClampToRange(&v66, &time2.start, &time1);
          CMTimeRange time1 = v69[1];
          CMTimeRange time2 = v69[0];
          CMTimeMapTimeFromRangeToRange(&v68, &v66, &time1, &time2);
          if ((int)a4 < 1)
          {
            CMTime start = v69[0].start;
          }
          else
          {
            CMTimeRange time1 = v69[0];
            CMTimeRangeGetEnd(&start, &time1);
          }
          long long v64 = 0uLL;
          CMTimeEpoch v65 = 0;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v61 = 0u;
          memset(&time1, 0, sizeof(time1));
          time2.CMTime start = v68;
          time[0].CMTime start = start;
          uint64_t NextNonEmptyTrackTime = bossUsingEditCursorServiceArrayFindNextNonEmptyTrackTime(a1 + 1, (a2 - 1), &time2, a4, time, &v64, &time1);
          uint64_t v17 = NextNonEmptyTrackTime;
          if (!NextNonEmptyTrackTime)
          {
            *(_OWORD *)&time[0].start.unsigned int value = v64;
            time[0].start.CMTimeEpoch epoch = v65;
            CMTimeRange time2 = v69[0];
            CMTimeClampToRange(&v59, &time[0].start, &time2);
            CMTimeRange time2 = v69[0];
            time[0] = v69[1];
            CMTimeMapTimeFromRangeToRange(&v50.start, &v59, &time2, time);
            *(_OWORD *)a6 = *(_OWORD *)&v50.start.value;
            *(void *)(a6 + 16) = v50.start.epoch;
            if (a2 < 2)
            {
              long long v40 = *(_OWORD *)&v69[1].start.value;
              a7[2] = *(_OWORD *)&v69[0].duration.timescale;
              a7[3] = v40;
              long long v41 = *(_OWORD *)&v69[1].duration.timescale;
              a7[4] = *(_OWORD *)&v69[1].start.epoch;
              a7[5] = v41;
              long long v38 = *(_OWORD *)&v69[0].start.value;
              long long v39 = *(_OWORD *)&v69[0].start.epoch;
            }
            else
            {
              time[0] = v69[0];
              time[1] = v69[1];
              CMTimeRange v50 = time1;
              long long v51 = v61;
              long long v52 = v62;
              long long v53 = v63;
              bossCombineEditSegments((uint64_t)time, (uint64_t)&v50, (uint64_t)&time2);
              long long v36 = v56;
              a7[2] = *(_OWORD *)&time2.duration.timescale;
              a7[3] = v36;
              long long v37 = v58;
              a7[4] = v57;
              a7[5] = v37;
              long long v38 = *(_OWORD *)&time2.start.value;
              long long v39 = *(_OWORD *)&time2.start.epoch;
            }
            *a7 = v38;
            a7[1] = v39;
            goto LABEL_13;
          }
          if (NextNonEmptyTrackTime != -12520) {
            goto LABEL_13;
          }
        }
        CFTypeRef v28 = v70[0];
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        long long v31 = *(uint64_t (**)(CFTypeRef, uint64_t))(v30 + 16);
        if (!v31) {
          goto LABEL_64;
        }
        uint64_t v17 = v31(v28, a4);
        if (v17) {
          goto LABEL_13;
        }
        CFTypeRef v32 = v70[0];
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v34 = v33 ? v33 : 0;
        long long v35 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v34 + 24);
        if (!v35) {
          goto LABEL_64;
        }
        uint64_t v17 = v35(v32, v69);
        if (v17) {
          goto LABEL_13;
        }
      }
    }
    CFTypeRef v42 = v70[0];
    uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v43) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    Float64 v45 = *(uint64_t (**)(CFTypeRef, uint64_t))(v44 + 16);
    if (!v45) {
      goto LABEL_64;
    }
    uint64_t v26 = v45(v42, 0xFFFFFFFFLL);
    if (v26)
    {
LABEL_63:
      uint64_t v17 = v26;
      goto LABEL_13;
    }
    CFTypeRef v46 = v70[0];
    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v47) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0;
    }
    unsigned int v49 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v48 + 24);
    if (v49)
    {
      uint64_t v26 = v49(v46, v69);
      if (!v26) {
        goto LABEL_22;
      }
      goto LABEL_63;
    }
  }
LABEL_64:
  uint64_t v17 = 4294954514;
LABEL_13:
  if (v70[0]) {
    CFRelease(v70[0]);
  }
  return v17;
}

double bossCombineEditSegments@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v8;
  uint64_t v9 = a3 + 48;
  *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a3 + 48);
  time1.start.CMTimeEpoch epoch = *(void *)(a3 + 64);
  *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)a1;
  time2.start.CMTimeEpoch epoch = *(void *)(a1 + 16);
  if (CMTimeCompare(&time1.start, &time2.start) < 0)
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
    *(_OWORD *)&v35.unsigned int value = *(_OWORD *)a1;
    long long v10 = *(_OWORD *)(a2 + 64);
    long long v11 = *(_OWORD *)(a2 + 80);
    long long v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v10;
    *(_OWORD *)&time1.duration.CMTimeScale timescale = v11;
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)a2;
    *(_OWORD *)&time2.start.CMTimeEpoch epoch = v13;
    *(void *)(v9 + 16) = *(void *)(a1 + 16);
    v35.CMTimeEpoch epoch = *(void *)(a1 + 16);
    *(_OWORD *)&time2.duration.CMTimeScale timescale = v12;
    CMTimeMapTimeFromRangeToRange((CMTime *)a3, &v35, &time1, &time2);
    *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)v9;
    time1.start.CMTimeEpoch epoch = *(void *)(v9 + 16);
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)(a2 + 48);
    time2.start.CMTimeEpoch epoch = *(void *)(a2 + 64);
    CMTimeSubtract(&rhs, &time1.start, &time2.start);
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)(a2 + 72);
    time2.start.CMTimeEpoch epoch = *(void *)(a2 + 88);
    CMTimeSubtract(&time1.start, &time2.start, &rhs);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)&time1.start.value;
    *(void *)(a3 + 88) = time1.start.epoch;
    *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a3;
    time1.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)a2;
    time2.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
    CMTimeSubtract(&v31, &time1.start, &time2.start);
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)(a2 + 24);
    time2.start.CMTimeEpoch epoch = *(void *)(a2 + 40);
    CMTimeSubtract(&time1.start, &time2.start, &v31);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&time1.start.value;
    *(void *)(a3 + 40) = time1.start.epoch;
  }
  long long v14 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)v9;
  *(_OWORD *)&time1.start.CMTimeEpoch epoch = v14;
  *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(v9 + 32);
  CMTimeRangeGetEnd(&v37, &time1);
  long long v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a1;
  *(_OWORD *)&time1.start.CMTimeEpoch epoch = v15;
  *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 32);
  CMTimeRangeGetEnd(&v36, &time1);
  time1.CMTime start = v37;
  time2.CMTime start = v36;
  if (CMTimeCompare(&time1.start, &time2.start) >= 1)
  {
    memset(&v35, 0, sizeof(v35));
    time1.CMTime start = v37;
    time2.CMTime start = v36;
    CMTimeSubtract(&v35, &time1.start, &time2.start);
    *(_OWORD *)&v29.unsigned int value = *(_OWORD *)&v35.value;
    long long v16 = *(_OWORD *)(a2 + 64);
    long long v17 = *(_OWORD *)(a2 + 80);
    long long v18 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v16;
    *(_OWORD *)&time1.duration.CMTimeScale timescale = v17;
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)a2;
    *(_OWORD *)&time2.start.CMTimeEpoch epoch = v19;
    memset(&dur, 0, sizeof(dur));
    v29.CMTimeEpoch epoch = v35.epoch;
    *(_OWORD *)&time2.duration.CMTimeScale timescale = v18;
    CMTimeMapDurationFromRangeToRange(&dur, &v29, &time1, &time2);
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)(a3 + 72);
    time2.start.CMTimeEpoch epoch = *(void *)(a3 + 88);
    CMTime v29 = v35;
    CMTimeSubtract(&time1.start, &time2.start, &v29);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)&time1.start.value;
    *(void *)(a3 + 88) = time1.start.epoch;
    *(_OWORD *)&time2.start.unsigned int value = *(_OWORD *)(a3 + 24);
    time2.start.CMTimeEpoch epoch = *(void *)(a3 + 40);
    CMTime v29 = dur;
    CMTimeSubtract(&time1.start, &time2.start, &v29);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&time1.start.value;
    *(void *)(a3 + 40) = time1.start.epoch;
  }
  *(_OWORD *)&dur.unsigned int value = *(_OWORD *)v9;
  long long v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a1;
  *(_OWORD *)&time1.start.CMTimeEpoch epoch = v20;
  long long v21 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 32);
  long long v22 = *(_OWORD *)(a1 + 64);
  long long v23 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&time2.start.unsigned int value = v21;
  *(_OWORD *)&time2.start.CMTimeEpoch epoch = v22;
  dur.CMTimeEpoch epoch = *(void *)(v9 + 16);
  *(_OWORD *)&time2.duration.CMTimeScale timescale = v23;
  CMTimeMapTimeFromRangeToRange(&v35, &dur, &time1, &time2);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v35.value;
  *(_OWORD *)&dur.unsigned int value = *(_OWORD *)(a3 + 72);
  long long v24 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a1;
  *(_OWORD *)&time1.start.CMTimeEpoch epoch = v24;
  long long v25 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 32);
  long long v26 = *(_OWORD *)(a1 + 64);
  long long v27 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&time2.start.unsigned int value = v25;
  *(_OWORD *)&time2.start.CMTimeEpoch epoch = v26;
  *(void *)(v9 + 16) = v35.epoch;
  dur.CMTimeEpoch epoch = *(void *)(a3 + 88);
  *(_OWORD *)&time2.duration.CMTimeScale timescale = v27;
  CMTimeMapDurationFromRangeToRange(&v35, &dur, &time1, &time2);
  double result = *(double *)&v35.value;
  *(CMTime *)(a3 + 72) = v35;
  return result;
}

uint64_t figPlaybackBoss_timebaseRateChangedDeferredWork(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19970E910](*(void *)(a2 + 576));
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 112)) != 0.0 && *(_DWORD *)(a2 + 424) == 1886151033)
  {
    CMTime v32 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    long long v22 = *(_OWORD *)&v32.value;
    CMTimeEpoch epoch = v32.epoch;
    memset(&v31, 0, sizeof(v31));
    CMTimebaseGetTime(&v31, *(CMTimebaseRef *)(a2 + 112));
    *(_OWORD *)&v30.unsigned int value = v22;
    v30.CMTimeEpoch epoch = epoch;
    CMTime v29 = *(CMTime *)(a2 + 508);
    memset(&v28, 0, sizeof(v28));
    uint64_t v4 = *(const void **)(a2 + 112);
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CMTime time = v31;
    CMSyncConvertTime(&v28, &time, v4, HostTimeClock);
    memset(&v27, 0, sizeof(v27));
    long long v6 = *(const void **)(a2 + 112);
    CMClockRef v7 = CMClockGetHostTimeClock();
    CMTime time = v29;
    CMSyncConvertTime(&v27, &time, v6, v7);
    *(_OWORD *)&v26.unsigned int value = v22;
    v26.CMTimeEpoch epoch = epoch;
    FigCFDictionaryGetCMTimeIfPresent();
    if ((v32.flags & 1) == 0) {
      CMTime v32 = v31;
    }
    long long v8 = *(const void **)(a2 + 112);
    CMClockRef v9 = CMClockGetHostTimeClock();
    CMTime time = v32;
    CMSyncConvertTime(&v26, &time, v8, v9);
    CMTime time = v26;
    CMTime time2 = v27;
    if (CMTimeCompare(&time, &time2) < 0)
    {
      memset(&v25, 0, sizeof(v25));
      CMTime time = v27;
      CMTime time2 = v28;
      CMTimeSubtract(&v25, &time, &time2);
      if (dword_1E9350D98)
      {
        LODWORD(v24.CFDictionarySetValue(theDict, key, value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_OWORD *)&v30.unsigned int value = *(_OWORD *)&v25.value;
      CMTimeEpoch v19 = v25.epoch;
    }
    else
    {
      CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      MEMORY[0x19970E910](*(void *)(a2 + 64));
      if (*(unsigned char *)(a2 + 840))
      {
        LODWORD(v24.CFDictionarySetValue(theDict, key, value) = 0;
        long long v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v12 = *(void *)(a2 + 96);
      if ((v12 & 0x8000000000000000) == 0)
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 72), v12);
        time.unsigned int value = 0;
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v16 = v15 ? v15 : 0;
        long long v17 = *(void (**)(uint64_t, __CFString *, void, CMTime *))(v16 + 48);
        if (v17)
        {
          v17(FigBaseObject, @"UnpauseLatencyEstimate", *MEMORY[0x1E4F1CF80], &time);
          if (time.value)
          {
            CMTimeMakeFromDictionary(&v25, (CFDictionaryRef)time.value);
            CFRelease((CFTypeRef)time.value);
          }
        }
      }
      MEMORY[0x19970E930](*(void *)(a2 + 64));
      memset(&v24, 0, sizeof(v24));
      CMTime time = v26;
      CMTime time2 = v25;
      CMTimeAdd(&lhs, &time, &time2);
      CMTime time = v28;
      CMTimeSubtract(&v24, &lhs, &time);
      if (dword_1E9350D98)
      {
        long long v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_OWORD *)&v30.unsigned int value = *(_OWORD *)&v24.value;
      CMTimeEpoch v19 = v24.epoch;
    }
    v30.CMTimeEpoch epoch = v19;
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      long long v20 = strncpy((char *)&time, (const char *)(a2 + 841), 8uLL);
      CMTime time = v31;
      CMTimeGetSeconds((CMTime *)v20);
      CMTime time = v30;
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
  }
  return MEMORY[0x19970E930](*(void *)(a2 + 576));
}

uint64_t bossCopyRenderPipelineCachedVideoFrames(uint64_t a1, uint64_t a2)
{
  if (a2
    && *(unsigned char *)(a1 + 124)
    && ((uint64_t v7 = 0,
         uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a2),
         (uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v4 = 0)
      : (uint64_t v4 = v3),
        (uint64_t v5 = *(unsigned int (**)(uint64_t, __CFString *, void, uint64_t *))(v4 + 48)) != 0
     && !v5(FigBaseObject, @"CachedVideoFrames", *MEMORY[0x1E4F1CF80], &v7)))
  {
    return v7;
  }
  else
  {
    return 0;
  }
}

void bossBumpTrackCurrentOrder(void *valuePtr)
{
  uint64_t v1 = (const void *)valuePtr[25];
  ++*((_DWORD *)valuePtr + 52);
  valuePtr[25] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr + 26);
  if (v1)
  {
    CFRelease(v1);
  }
}

void figPlaybackBoss_AllMentorsPrerollCompleteWithContext(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (const void *)a1[1];
  if (*(unsigned char *)(v2 + 16))
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *(unsigned char *)(v2 + 601) = 0;
  figPlaybackBoss_waitForCompletionOfPhase1AndStartPhase2(v2);
  uint64_t v3 = (const void *)a1[1];
  if (v3) {
LABEL_3:
  }
    CFRelease(v3);
LABEL_4:
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }

  free(a1);
}

uint64_t bossGetPresentationTimeAfterSampleCursorStepping(uint64_t a1, CMTime *a2, int a3, int a4, CMTime *a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = 0;
  CFTypeRef cf = 0;
  CMTime v42 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!a3)
  {
    a1 = 0;
    *(_OWORD *)&v42.unsigned int value = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
LABEL_5:
    v42.CMTimeEpoch epoch = epoch;
    goto LABEL_22;
  }
  int v8 = a3;
  CMTime time = *a2;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  long long v13 = *(uint64_t (**)(uint64_t, CMTime *, CFTypeRef *, void, void))(v11 + 8);
  if (!v13)
  {
    LODWORD(a1) = -12782;
    goto LABEL_14;
  }
  CMTime time1 = time;
  LODWORD(a1) = v13(a1, &time1, &cf, 0, 0);
  if (a1 || !cf)
  {
LABEL_14:
    LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = time2.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v19 = value;
    }
    else {
      unsigned int v19 = value & 0xFFFFFFFE;
    }
    if (v19)
    {
      LODWORD(time.CFDictionarySetValue(theDict, key, value) = 136315394;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"bossGetPresentationTimeAfterSampleCursorStepping";
      LOWORD(time.flags) = 1024;
      *(CMTimeFlags *)((char *)&time.flags + 2) = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (a1) {
      a1 = a1;
    }
    else {
      a1 = 4294954926;
    }
    goto LABEL_22;
  }
  if ((a2->flags & 0x1F) != 3) {
    goto LABEL_38;
  }
  memset(&time, 0, sizeof(time));
  CMTimeMake(&time, a2->value + 1, a2->timescale);
  CFTypeRef v14 = cf;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  long long v21 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v16 + 176);
  if (!v21)
  {
    a1 = 4294954514;
    goto LABEL_32;
  }
  a1 = v21(v14, 1, &v43);
  if (a1)
  {
LABEL_32:
    CMTime v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
LABEL_65:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_22;
  }
  if (v43 != 1) {
    goto LABEL_38;
  }
  CFTypeRef v22 = cf;
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  CMTime v26 = *(uint64_t (**)(CFTypeRef, CMTime *))(v24 + 40);
  if (!v26)
  {
    a1 = 4294954514;
    goto LABEL_54;
  }
  a1 = v26(v22, &v42);
  if (a1)
  {
LABEL_54:
    CMTime v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    goto LABEL_65;
  }
  time.CMTimeEpoch epoch = v42.epoch;
  CMTime time1 = v42;
  *(_OWORD *)&time2.unsigned int value = *(_OWORD *)&time.value;
  time2.CMTimeEpoch epoch = v42.epoch;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0 && !--v8) {
    goto LABEL_58;
  }
LABEL_38:
  CFTypeRef v27 = cf;
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  CMTime v30 = *(uint64_t (**)(CFTypeRef, void, uint64_t *))(v29 + 176);
  if (!v30)
  {
    a1 = 4294954514;
LABEL_47:
    LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
    uint64_t v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v35 = time2.value;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v36 = v35;
    }
    else {
      unsigned int v36 = v35 & 0xFFFFFFFE;
    }
    if (!v36) {
      goto LABEL_65;
    }
LABEL_51:
    LODWORD(time.CFDictionarySetValue(theDict, key, value) = 136315394;
    *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"bossGetPresentationTimeAfterSampleCursorStepping";
    LOWORD(time.flags) = 1024;
    *(CMTimeFlags *)((char *)&time.flags + 2) = a1;
    _os_log_send_and_compose_impl();
    goto LABEL_65;
  }
  a1 = v30(v27, v8, &v43);
  if (a1) {
    goto LABEL_47;
  }
  if (v43 != v8)
  {
    a1 = 4294954456;
    goto LABEL_22;
  }
  CFTypeRef v31 = cf;
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  long long v38 = *(uint64_t (**)(CFTypeRef, CMTime *))(v33 + 40);
  if (!v38)
  {
    a1 = 4294954514;
LABEL_61:
    LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
    long long v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v40 = time2.value;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (!v41) {
      goto LABEL_65;
    }
    goto LABEL_51;
  }
  a1 = v38(v31, &v42);
  if (a1) {
    goto LABEL_61;
  }
LABEL_58:
  if (a4)
  {
    CMTime time = v42;
    CMTimeConvertScale(&time1, &time, 1000000000, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
    a1 = 0;
    *(_OWORD *)&v42.unsigned int value = *(_OWORD *)&time1.value;
    CMTimeEpoch epoch = time1.epoch;
    goto LABEL_5;
  }
  a1 = 0;
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  *a5 = v42;
  return a1;
}

uint64_t bossTrackShouldRemoveExcessFramesInRefreshIntervals(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 72) != 1986618469 || (*(_DWORD *)(a2 + 304) & 0x1D) != 1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 120)) {
    return 1;
  }
  uint64_t v7 = (_OWORD *)(a2 + 292);
  CMTime time = *(CMTime *)(a2 + 264);
  double Seconds = CMTimeGetSeconds(&time);
  *(_OWORD *)&time.unsigned int value = *v7;
  time.CMTimeEpoch epoch = *(void *)(a2 + 308);
  BOOL v4 = Seconds < CMTimeGetSeconds(&time) * *(float *)(a2 + 288) * a3 * 0.7;
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v4;
}

uint64_t figPlaybackBossTrackClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gFigPlaybackBossTrackCFTypeID TypeID = result;
  return result;
}

void figPlaybackBossTrackInit(uint64_t a1)
{
}

void figPlaybackBossTrackFinalize(void *a1)
{
  bossRemoveNotificationListenersForTrack((uint64_t)a1);
  a1[24] = 0;
  uint64_t v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
  BOOL v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  uint64_t v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  long long v6 = (const void *)a1[20];
  if (v6)
  {
    CFRelease(v6);
    a1[20] = 0;
  }
  uint64_t v7 = (const void *)a1[18];
  if (v7)
  {
    CFRelease(v7);
    a1[18] = 0;
  }
  int v8 = (void *)a1[15];
  if (v8) {
    VideoMentorInvalidate(v8);
  }
  uint64_t v9 = a1[13];
  if (v9) {
    AudioMentorInvalidate(v9);
  }
  uint64_t v10 = (void **)a1[22];
  if (v10)
  {
    EditMentorDispose(v10);
    a1[22] = 0;
  }
  uint64_t v11 = (void **)a1[19];
  if (v11)
  {
    EditMentorDispose(v11);
    a1[19] = 0;
  }
  CFIndex v12 = (void **)a1[17];
  if (v12)
  {
    EditMentorDispose(v12);
    a1[17] = 0;
  }
  long long v13 = (void **)a1[16];
  if (v13)
  {
    EditMentorDispose(v13);
    a1[16] = 0;
  }
  CFTypeRef v14 = (void **)a1[14];
  if (v14)
  {
    EditMentorDispose(v14);
    a1[14] = 0;
  }
  uint64_t v15 = (void *)a1[15];
  if (v15)
  {
    VideoMentorDispose(v15);
    a1[15] = 0;
  }
  uint64_t v16 = (void *)a1[13];
  if (v16)
  {
    AudioMentorDispose(v16);
    a1[13] = 0;
  }
  long long v17 = (const void *)a1[25];
  if (v17)
  {
    CFRelease(v17);
    a1[25] = 0;
  }
  long long v18 = (const void *)a1[27];
  if (v18)
  {
    CFRelease(v18);
    a1[27] = 0;
  }
  unsigned int v19 = (const void *)a1[28];
  if (v19)
  {
    CFRelease(v19);
    a1[28] = 0;
  }
  long long v20 = (const void *)a1[29];
  if (v20)
  {
    CFRelease(v20);
    a1[29] = 0;
  }
  long long v21 = (const void *)a1[30];
  if (v21)
  {
    CFRelease(v21);
    a1[30] = 0;
  }
  CFTypeRef v22 = (const void *)a1[10];
  if (v22)
  {
    CFRelease(v22);
    a1[10] = 0;
  }
  uint64_t v23 = (const void *)a1[6];
  if (v23)
  {
    CFRelease(v23);
    a1[6] = 0;
  }
  uint64_t v24 = (const void *)a1[12];
  if (v24)
  {
    CFRelease(v24);
    a1[12] = 0;
  }
  CMTime v25 = (const void *)a1[32];
  if (v25)
  {
    CFRelease(v25);
    a1[32] = 0;
  }
  CMTime v26 = (const void *)a1[2];
  if (v26)
  {
    CFRelease(v26);
    a1[2] = 0;
  }
}

CFStringRef figPlaybackBossTrackCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<FigPlaybackBossTrack %p>", a1);
}

__CFString *figPlaybackBossTrackCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPlaybackBossTrack %p: ", a1);
  uint64_t v3 = "";
  if (*(unsigned char *)(a1 + 212)) {
    CFAllocatorRef v4 = "";
  }
  else {
    CFAllocatorRef v4 = "not ";
  }
  if (*(unsigned char *)(a1 + 213)) {
    uint64_t v5 = "";
  }
  else {
    uint64_t v5 = "not ";
  }
  if (!*(unsigned char *)(a1 + 214)) {
    uint64_t v3 = "not ";
  }
  CFStringAppendFormat(Mutable, 0, @"trackID %d, mediaType %c%c%c%c, renderPipeline %@, %swaiting for mentor completion, %swaiting for mentor preroll, %swaiting for decode for preroll", *(unsigned int *)(a1 + 24), HIBYTE(*(_DWORD *)(a1 + 72)), BYTE2(*(_DWORD *)(a1 + 72)), BYTE1(*(_DWORD *)(a1 + 72)), *(_DWORD *)(a1 + 72), *(void *)(a1 + 80), v4, v5, v3);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

CFStringRef figPlaybackBossCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<FigPlaybackBoss %p>", a1);
}

__CFString *figPlaybackBossCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPlaybackBoss %p: ", a1);
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 120)) {
    CFAllocatorRef v4 = "YES";
  }
  else {
    CFAllocatorRef v4 = "NO";
  }
  uint64_t v5 = *(void *)(a1 + 112);
  StateName = getStateName(*(_DWORD *)(a1 + 424));
  CFStringAppendFormat(Mutable, 0, @"formatReader %@, nonRealTimeMode %s, timebase %@, playState %s", v3, v4, v5, StateName);
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v7 = 0;
    do
    {
      uint64_t ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
      unsigned int v10 = bswap32(ValueAtIndex[18]);
      CFStringAppendFormat(Mutable, 0, @"\n  %d: %.4s id %d, renderPipeline %@", v7++, &v10, ValueAtIndex[6], *((void *)ValueAtIndex + 10));
    }
    while (*(void *)(a1 + 80) > v7);
  }
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

void FigPlayerInterstitialEventGetPrimaryItem()
{
}

uint64_t FigRenderPipelineGetTypeID()
{
  MEMORY[0x19970EE10](&FigRenderPipelineGetClassID_sRegisterFigRenderPipelineTypeOnce, RegisterFigRenderPipelineType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigRenderPipelineCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRenderPipeline %p]", a1);
}

uint64_t FigReportingStatsCreate(void *a1)
{
  CFDictionaryValueCallBacks v12 = *(CFDictionaryValueCallBacks *)byte_1EE503B60;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1) {
    return 4294955296;
  }
  uint64_t v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x200400FA965B2uLL);
  if (!v2) {
    goto LABEL_12;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  void *v2 = Mutable;
  if (!Mutable) {
    goto LABEL_12;
  }
  CFMutableDictionaryRef v5 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], &v12);
  v2[1] = v5;
  if (!v5) {
    goto LABEL_12;
  }
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v2[2] = v6;
  if (!v6) {
    goto LABEL_12;
  }
  CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], 0);
  v2[5] = v7;
  if (!v7) {
    goto LABEL_12;
  }
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v2[3] = v8;
  if (v8
    && (CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v2[4] = v9) != 0)
    && (CFMutableSetRef v10 = CFSetCreateMutable(v3, 0, MEMORY[0x1E4F1D548]), (v2[6] = v10) != 0))
  {
    uint64_t result = 0;
    *a1 = v2;
  }
  else
  {
LABEL_12:
    FigReportingStatsDestroy((uint64_t)v2);
    return 4294955295;
  }
  return result;
}

uint64_t frs_retainSampleValue(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  ++*(_DWORD *)(a2 + 48);
  return result;
}

void frs_releaseSampleValue(int a1, void *a2)
{
  if (*((_DWORD *)a2 + 12) == 1) {
    free(a2);
  }
  else {
    --*((_DWORD *)a2 + 12);
  }
}

void FigReportingStatsDestroy(uint64_t a1)
{
  if (a1)
  {
    FigReportingStatsResetAll(a1);
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    uint64_t v2 = *(const void **)(a1 + 8);
    if (v2) {
      CFRelease(v2);
    }
    CFAllocatorRef v3 = *(const void **)(a1 + 16);
    if (v3) {
      CFRelease(v3);
    }
    CFAllocatorRef v4 = *(const void **)(a1 + 24);
    if (v4) {
      CFRelease(v4);
    }
    CFMutableDictionaryRef v5 = *(const void **)(a1 + 32);
    if (v5) {
      CFRelease(v5);
    }
    CFMutableDictionaryRef v6 = *(const void **)(a1 + 48);
    if (v6) {
      CFRelease(v6);
    }
    CFMutableDictionaryRef v7 = *(const void **)(a1 + 40);
    if (v7) {
      CFRelease(v7);
    }
    CFMutableDictionaryRef v8 = *(const void **)(a1 + 56);
    if (v8) {
      CFRelease(v8);
    }
    free((void *)a1);
  }
}

void FigReportingStatsResetAll(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v4 = 0;
    uint64_t context = a1;
    CFSetRef theSet = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)frs_findKeysToRemoveDictApplier, &context);
    if ((_BYTE)v4) {
      CFSetApplyFunction(theSet, (CFSetApplierFunction)frs_removeKeysSetApplier, (void *)a1);
    }
    else {
      frs_resetAll((CFMutableDictionaryRef *)a1);
    }
    if (theSet) {
      CFRelease(theSet);
    }
  }
  else
  {
    frs_resetAll((CFMutableDictionaryRef *)a1);
  }
}

uint64_t FigReportingStatsSetValue(uint64_t a1, void *key, uint64_t a3)
{
  CFDictionaryRef v10 = 0;
  uint64_t valuePtr = a3;
  if (key)
  {
    CFSetRef v5 = *(const __CFSet **)(a1 + 56);
    if (v5)
    {
      if (CFSetContainsValue(v5, key)) {
        return 0;
      }
    }
  }
  uint64_t result = frs_validateAndGetStatsDataDictionary(a1, key, 0x1010u, &v10, 0);
  if (!result || result == -12005)
  {
    if (!v10) {
      return 4294955294;
    }
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongLongType, &valuePtr);
    if (!v7) {
      return 4294955295;
    }
    CFNumberRef v8 = v7;
    CFMutableDictionaryRef v9 = v10;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1010);
    CFDictionarySetValue(v9, key, v8);
    CFRelease(v8);
    return 0;
  }
  return result;
}

uint64_t frs_validateAndGetStatsDataDictionary(uint64_t a1, void *key, unsigned int a3, const __CFDictionary **a4, unsigned int *a5)
{
  uint64_t v5 = 4294955296;
  if (a1 && key)
  {
    uint64_t v7 = a1;
    CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 40);
    if (!v8
      || !*(void *)v7
      || !*(void *)(v7 + 16)
      || !*(void *)(v7 + 8)
      || !*(void *)(v7 + 24)
      || !*(void *)(v7 + 32))
    {
      return 4294955294;
    }
    int v10 = CFDictionaryContainsKey(v8, key);
    if (v10)
    {
      unsigned int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 40), key);
      unsigned int v12 = Value;
      uint64_t v5 = 0;
      if (a3 && Value != a3) {
        return 4294955287;
      }
    }
    else
    {
      uint64_t v5 = 4294955291;
      unsigned int v12 = a3;
      if (!a3) {
        return v5;
      }
    }
    switch(v12)
    {
      case 0x1010u:
        break;
      case 0x1011u:
        v7 += 8;
        break;
      case 0x1012u:
        v7 += 16;
        break;
      case 0x1013u:
        v7 += 24;
        break;
      case 0x1014u:
        v7 += 32;
        break;
      default:
        return 4294955287;
    }
    CFDictionaryRef v13 = *(const __CFDictionary **)v7;
    if (!v13) {
      return 4294955287;
    }
    if (v10 && !CFDictionaryContainsKey(v13, key))
    {
      return 4294955292;
    }
    else
    {
      if (a4) {
        *a4 = v13;
      }
      if (a5) {
        *a5 = v12;
      }
    }
  }
  return v5;
}

uint64_t FigReportingStatsAddToCountValue(uint64_t a1, void *key, uint64_t a3)
{
  CFDictionaryRef theDict = 0;
  uint64_t v16 = a3;
  uint64_t valuePtr = 0;
  if (key)
  {
    CFSetRef v6 = *(const __CFSet **)(a1 + 56);
    if (v6)
    {
      if (CFSetContainsValue(v6, key)) {
        return 0;
      }
    }
  }
  uint64_t StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, key, 0x1013u, &theDict, 0);
  uint64_t v8 = StatsDataDictionary;
  if (!StatsDataDictionary || StatsDataDictionary == -12005)
  {
    if (theDict)
    {
      if (StatsDataDictionary == -12005)
      {
        uint64_t v8 = 0;
        goto LABEL_11;
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        uint64_t v16 = valuePtr + a3;
LABEL_11:
        CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &v16);
        if (!v10) {
          return 4294955295;
        }
        CFNumberRef v11 = v10;
        unsigned int v12 = theDict;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1013);
        CFDictionarySetValue(v12, key, v11);
        CFRelease(v11);
        return v8;
      }
    }
    return 4294955294;
  }
  return v8;
}

uint64_t FigReportingStatsSetCFTypeValue(uint64_t a1, void *key, const void *a3)
{
  CFDictionaryRef v9 = 0;
  if (!a3) {
    return 0;
  }
  if (key)
  {
    CFSetRef v6 = *(const __CFSet **)(a1 + 56);
    if (v6)
    {
      if (CFSetContainsValue(v6, key)) {
        return 0;
      }
    }
  }
  uint64_t result = frs_validateAndGetStatsDataDictionary(a1, key, 0x1012u, &v9, 0);
  if (!result || result == -12005)
  {
    uint64_t v8 = v9;
    if (!v9) {
      return 4294955294;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1012);
    CFDictionarySetValue(v8, key, a3);
    return 0;
  }
  return result;
}

uint64_t FigReportingStatsUpdateSampleValue(uint64_t a1, void *key, unint64_t a3)
{
  CFDictionaryRef theDict = 0;
  if (key)
  {
    CFSetRef v6 = *(const __CFSet **)(a1 + 56);
    if (v6)
    {
      if (CFSetContainsValue(v6, key)) {
        return 0;
      }
    }
  }
  uint64_t result = frs_validateAndGetStatsDataDictionary(a1, key, 0x1011u, &theDict, 0);
  if (result && result != -12005) {
    return result;
  }
  if (!theDict) {
    return 4294955294;
  }
  if (result == -12005)
  {
    uint64_t v8 = malloc_type_calloc(1uLL, 0x38uLL, 0x10000405AA1D1E9uLL);
    if (!v8) {
      return 4294955295;
    }
    CFDictionaryRef v9 = v8;
    v8[10] = 1;
    *((void *)v8 + 2) = a3;
    *((void *)v8 + 3) = a3;
    *(void *)uint64_t v8 = a3;
    *((void *)v8 + 1) = a3;
    v8[12] = 1;
    CFNumberRef v10 = theDict;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, (const void *)0x1011);
    CFDictionarySetValue(v10, key, v9);
    int v11 = v9[12];
    goto LABEL_19;
  }
  CFNumberRef Value = CFDictionaryGetValue(theDict, key);
  if (!Value) {
    return 4294955294;
  }
  CFDictionaryRef v9 = Value;
  unint64_t v14 = *((void *)Value + 1);
  unint64_t v13 = *((void *)Value + 2);
  if (v13 <= a3) {
    unint64_t v13 = a3;
  }
  if (v14 >= a3) {
    unint64_t v14 = a3;
  }
  *((void *)Value + 1) = v14;
  *((void *)Value + 2) = v13;
  unint64_t v15 = Value[10];
  uint64_t v16 = (v15 + 1);
  Value[10] = v16;
  unint64_t v17 = *((void *)Value + 3);
  *((void *)Value + 3) = v17 + a3;
  if ((int)v15 < 1) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = (*((void *)Value + 4) + (a3 - (uint64_t)(v17 + a3) / v16) * (a3 - v17 / v15)) / v16;
  }
  *((void *)Value + 4) = v18;
  *(void *)CFNumberRef Value = a3;
  int v11 = Value[12] + 1;
  Value[12] = v11;
LABEL_19:
  int v19 = v11 - 1;
  if (!v19)
  {
    free(v9);
    return 0;
  }
  uint64_t result = 0;
  v9[12] = v19;
  return result;
}

uint64_t FigReportingStatsResetArray(uint64_t a1, CFStringRef theString)
{
  unsigned int v10 = 0;
  CFMutableDictionaryRef theDict = 0;
  if (!theString) {
    return 0;
  }
  CFSetRef v4 = *(const __CFSet **)(a1 + 56);
  if (v4)
  {
    if (CFSetContainsValue(v4, theString)) {
      return 0;
    }
  }
  ArrayNameFromKey = fsrm_createArrayNameFromKey(theString);
  if (!ArrayNameFromKey) {
    return 4294955295;
  }
  CFSetRef v6 = ArrayNameFromKey;
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 48), ArrayNameFromKey);
  uint64_t StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, v6, 0x1014u, &theDict, &v10);
  if (!StatsDataDictionary && theDict)
  {
    CFDictionaryRemoveValue(theDict, v6);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v6);
  }
  CFRelease(v6);
  return StatsDataDictionary;
}

void FigReportingStatsResetValue(uint64_t a1, void *key)
{
  CFMutableDictionaryRef theDict = 0;
  if (!key || (CFSetRef v4 = *(const __CFSet **)(a1 + 56)) == 0 || !CFSetContainsValue(v4, key))
  {
    unsigned int v5 = 0;
    if (!frs_validateAndGetStatsDataDictionary(a1, key, 0, &theDict, &v5))
    {
      if (theDict)
      {
        CFDictionaryRemoveValue(theDict, key);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), key);
      }
    }
  }
}

void frs_resetAll(CFMutableDictionaryRef *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[5];
    if (v2) {
      CFDictionaryRemoveAllValues(v2);
    }
    CFAllocatorRef v3 = a1[1];
    if (v3) {
      CFDictionaryRemoveAllValues(v3);
    }
    if (*a1) {
      CFDictionaryRemoveAllValues(*a1);
    }
    CFSetRef v4 = a1[3];
    if (v4) {
      CFDictionaryRemoveAllValues(v4);
    }
    unsigned int v5 = a1[2];
    if (v5) {
      CFDictionaryRemoveAllValues(v5);
    }
    CFSetRef v6 = a1[4];
    if (v6) {
      CFDictionaryRemoveAllValues(v6);
    }
    uint64_t v7 = a1[6];
    if (v7)
    {
      CFSetRemoveAllValues(v7);
    }
  }
}

uint64_t FigReportingStatsCopyAsCFTypeAndSetInDictionary(uint64_t a1, __CFString *a2, __CFDictionary *a3)
{
  CFDictionaryRef theDict = 0;
  unsigned int v23 = 0;
  uint64_t result = 4294955296;
  if (a2)
  {
    if (a3)
    {
      uint64_t result = frs_validateAndGetStatsDataDictionary(a1, a2, 0, &theDict, &v23);
      if (!result)
      {
        if (theDict)
        {
          if (v23)
          {
            CFNumberRef Value = (int *)CFDictionaryGetValue(theDict, a2);
            if (Value)
            {
              uint64_t valuePtr = 0;
              uint64_t v8 = Value;
              switch(v23)
              {
                case 0x1010u:
                case 0x1013u:
                  CFNumberGetValue((CFNumberRef)Value, kCFNumberLongLongType, &valuePtr);
                  FigCFDictionarySetInt64();
                  goto LABEL_35;
                case 0x1011u:
                  if (Value[10] < 1) {
                    goto LABEL_35;
                  }
                  int v9 = Value[11];
                  unsigned int v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
                  if (v9 && (v9 & 2) == 0) {
                    goto LABEL_14;
                  }
                  CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
                  if (!MutableCopy) {
                    goto LABEL_40;
                  }
                  unsigned int v12 = MutableCopy;
                  CFStringAppend(MutableCopy, @"Min");
                  FigCFDictionarySetInt64();
                  CFRelease(v12);
                  int v9 = v8[11];
LABEL_14:
                  if (v9 && (v9 & 4) == 0) {
                    goto LABEL_18;
                  }
                  unint64_t v13 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v13) {
                    goto LABEL_40;
                  }
                  unint64_t v14 = v13;
                  CFStringAppend(v13, @"Max");
                  FigCFDictionarySetInt64();
                  CFRelease(v14);
                  int v9 = v8[11];
LABEL_18:
                  if (v9 && (v9 & 1) == 0) {
                    goto LABEL_22;
                  }
                  unint64_t v15 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v15) {
                    goto LABEL_40;
                  }
                  uint64_t v16 = v15;
                  CFStringAppend(v15, @"Mean");
                  FigCFDictionarySetInt64();
                  CFRelease(v16);
                  int v9 = v8[11];
LABEL_22:
                  if (v9 && (v9 & 8) == 0) {
                    goto LABEL_26;
                  }
                  unint64_t v17 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v17) {
                    goto LABEL_40;
                  }
                  unint64_t v18 = v17;
                  CFStringAppend(v17, @"Last");
                  FigCFDictionarySetInt64();
                  CFRelease(v18);
                  int v9 = v8[11];
LABEL_26:
                  if (v9 && (v9 & 0x10) == 0) {
                    goto LABEL_30;
                  }
                  int v19 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (!v19) {
                    goto LABEL_40;
                  }
                  long long v20 = v19;
                  CFStringAppend(v19, @"_Count");
                  FigCFDictionarySetInt64();
                  CFRelease(v20);
                  int v9 = v8[11];
LABEL_30:
                  if (v9 && (v9 & 0x20) == 0) {
                    goto LABEL_35;
                  }
                  long long v21 = CFStringCreateMutableCopy(*v10, 0, a2);
                  if (v21)
                  {
                    CFTypeRef v22 = v21;
                    CFStringAppend(v21, @"_Var");
                    FigCFDictionarySetInt64();
                    CFRelease(v22);
LABEL_35:
                    uint64_t result = 0;
                  }
                  else
                  {
LABEL_40:
                    uint64_t result = 4294955295;
                  }
                  break;
                case 0x1012u:
                  CFDictionarySetValue(a3, a2, Value);
                  goto LABEL_35;
                default:
                  goto LABEL_35;
              }
            }
            else
            {
              return 4294955294;
            }
          }
          else
          {
            return 4294955292;
          }
        }
        else
        {
          return 4294955291;
        }
      }
    }
  }
  return result;
}

uint64_t FigReportingStatsCopyArrayAndSetInDictionary(uint64_t a1, const __CFString *a2, __CFDictionary *a3)
{
  CFTypeRef cf = 0;
  unsigned int value = 0;
  uint64_t v3 = 4294955296;
  if (a2 && a3)
  {
    uint64_t v6 = frs_copyArrayForKey(a1, a2, 0, (__CFString **)&value, (CFMutableArrayRef *)&cf);
    CFArrayRef v7 = (const __CFArray *)cf;
    if (!v6)
    {
      if (!cf) {
        goto LABEL_11;
      }
      if (!value) {
        goto LABEL_10;
      }
      if (CFSetGetValue(*(CFSetRef *)(a1 + 48), value))
      {
        CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7);
        if (!Copy)
        {
          uint64_t v3 = 4294955295;
          goto LABEL_10;
        }
        CFArrayRef v9 = Copy;
        CFDictionarySetValue(a3, value, Copy);
        CFRelease(v9);
      }
      uint64_t v3 = 0;
LABEL_10:
      CFRelease(v7);
      goto LABEL_11;
    }
    uint64_t v3 = v6;
    if (cf) {
      goto LABEL_10;
    }
  }
LABEL_11:
  if (value) {
    CFRelease(value);
  }
  return v3;
}

uint64_t frs_copyArrayForKey(uint64_t a1, CFStringRef theString, int a3, __CFString **a4, CFMutableArrayRef *a5)
{
  CFDictionaryRef theDict = 0;
  ArrayNameFromKey = fsrm_createArrayNameFromKey(theString);
  if (!ArrayNameFromKey) {
    return 4294955295;
  }
  unsigned int v10 = ArrayNameFromKey;
  uint64_t StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, ArrayNameFromKey, 0x1014u, &theDict, 0);
  uint64_t v12 = StatsDataDictionary;
  if (!StatsDataDictionary || StatsDataDictionary == -12005)
  {
    if (theDict)
    {
      CFNumberRef Value = (__CFArray *)CFDictionaryGetValue(theDict, v10);
      CFMutableArrayRef v14 = Value;
      if (!a3 || Value) {
        goto LABEL_9;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v14 = Mutable;
        uint64_t v16 = theDict;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v10, (const void *)0x1014);
        CFDictionarySetValue(v16, v10, v14);
        CFRelease(v14);
        uint64_t v12 = 0;
LABEL_9:
        if (a4)
        {
          CFRetain(v10);
          *a4 = v10;
        }
        if (v14) {
          CFRetain(v14);
        }
        *a5 = v14;
        goto LABEL_14;
      }
      uint64_t v12 = 4294955295;
    }
    else
    {
      uint64_t v12 = 4294955294;
    }
  }
LABEL_14:
  CFRelease(v10);
  return v12;
}

uint64_t FigReportingStatsCopyAsCFTypeAndAppendToArray(uint64_t a1, __CFString *theString)
{
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  CFMutableArrayRef v13 = 0;
  unsigned int v12 = 0;
  if (!theString)
  {
LABEL_28:
    uint64_t StatsDataDictionary = 4294955296;
    goto LABEL_9;
  }
  CFSetRef v4 = *(const __CFSet **)(a1 + 56);
  if (v4 && CFSetContainsValue(v4, theString))
  {
    uint64_t StatsDataDictionary = 0;
  }
  else
  {
    uint64_t v5 = frs_copyArrayForKey(a1, theString, 1, (__CFString **)&cf, &v13);
    uint64_t v6 = v13;
    if (!v5)
    {
      if (v13)
      {
        uint64_t StatsDataDictionary = frs_validateAndGetStatsDataDictionary(a1, theString, 0, &theDict, &v12);
        if (!StatsDataDictionary)
        {
          if (theDict)
          {
            if (v12)
            {
              CFNumberRef Value = (int *)CFDictionaryGetValue(theDict, theString);
              unsigned int v10 = v12;
              uint64_t valuePtr = 0;
              if (!Value) {
                unsigned int v10 = 0;
              }
              switch(v10)
              {
                case 0x1010u:
                case 0x1013u:
                  CFNumberGetValue((CFNumberRef)Value, kCFNumberLongLongType, &valuePtr);
                  goto LABEL_18;
                case 0x1011u:
                  if (Value[10] >= 1)
                  {
                    int v11 = Value[11];
                    if (!v11 || (v11 & 8) != 0) {
LABEL_18:
                    }
                      FigCFArrayAppendInt64();
                  }
                  goto LABEL_26;
                case 0x1012u:
                  CFArrayAppendValue(v6, Value);
LABEL_26:
                  CFSetSetValue(*(CFMutableSetRef *)(a1 + 48), cf);
                  uint64_t StatsDataDictionary = 0;
                  break;
                default:
                  CFArrayAppendValue(v6, @"-");
                  uint64_t StatsDataDictionary = 4294955291;
                  break;
              }
              goto LABEL_8;
            }
            uint64_t StatsDataDictionary = 4294955292;
          }
          else
          {
            uint64_t StatsDataDictionary = 4294955291;
          }
        }
        CFArrayAppendValue(v6, @"-");
LABEL_8:
        CFRelease(v6);
        goto LABEL_9;
      }
      goto LABEL_28;
    }
    uint64_t StatsDataDictionary = v5;
    if (v13) {
      goto LABEL_8;
    }
  }
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return StatsDataDictionary;
}

uint64_t FigReportingStatsGetIntValue(uint64_t a1, void *a2, void *a3)
{
  return frs_getIntValue(a1, a2, 0x1010u, a3);
}

uint64_t frs_getIntValue(uint64_t a1, void *a2, unsigned int a3, void *a4)
{
  uint64_t v8 = 0;
  CFDictionaryRef theDict = 0;
  if (!a4) {
    return 4294955296;
  }
  uint64_t result = frs_validateAndGetStatsDataDictionary(a1, a2, a3, &theDict, 0);
  if (!result)
  {
    if (theDict)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, a2);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberLongLongType, &v8);
        uint64_t result = 0;
        *a4 = v8;
      }
      else
      {
        return 4294955292;
      }
    }
    else
    {
      return 4294955291;
    }
  }
  return result;
}

uint64_t FigReportingStatsGetCountValue(uint64_t a1, void *a2, void *a3)
{
  return frs_getIntValue(a1, a2, 0x1013u, a3);
}

uint64_t FigReportingStatsGetCFTypeValue(uint64_t a1, void *a2, void *a3)
{
  CFDictionaryRef theDict = 0;
  if (!a3) {
    return 4294955296;
  }
  uint64_t result = frs_validateAndGetStatsDataDictionary(a1, a2, 0x1012u, &theDict, 0);
  if (!result)
  {
    if (theDict)
    {
      CFNumberRef Value = CFDictionaryGetValue(theDict, a2);
      uint64_t result = 0;
      *a3 = Value;
    }
    else
    {
      return 4294955291;
    }
  }
  return result;
}

uint64_t FigReportingStatsGetArrayCount(uint64_t a1, const __CFString *a2, CFIndex *a3)
{
  CFArrayRef theArray = 0;
  *a3 = 0;
  uint64_t v4 = frs_copyArrayForKey(a1, a2, 0, 0, &theArray);
  CFArrayRef v5 = theArray;
  if (!v4) {
    *a3 = CFArrayGetCount(theArray);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

void FigReportingStatsCopy(void *a1, const __CFDictionary **a2)
{
  if (a1 && a2)
  {
    unsigned int v10 = a1;
    uint64_t v11 = 0;
    CFDictionaryRef v4 = a2[1];
    if (v4 && a1[1])
    {
      LODWORD(v11) = 4113;
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    CFDictionaryRef v5 = *a2;
    if (*a2 && *a1)
    {
      LODWORD(v11) = 4112;
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    CFDictionaryRef v6 = a2[3];
    if (v6 && a1[3])
    {
      LODWORD(v11) = 4115;
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    CFDictionaryRef v7 = a2[2];
    if (v7 && a1[2])
    {
      LODWORD(v11) = 4114;
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    CFDictionaryRef v8 = a2[4];
    if (v8 && a1[4])
    {
      LODWORD(v11) = 4116;
      CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)frs_mergeValueDictApplier, &v10);
    }
    CFSetRef v9 = a2[7];
    if (v9) {
      frs_mergeFrozenKeys((uint64_t)a1, v9);
    }
  }
}

void frs_mergeValueDictApplier(void *key, const void *a2, uint64_t a3)
{
  if (key)
  {
    if (a2)
    {
      CFDictionaryRef v4 = *(__CFDictionary ***)a3;
      if (*(void *)a3)
      {
        switch(*(_DWORD *)(a3 + 8))
        {
          case 0x1010:
            CFDictionaryRef v6 = *v4;
            CFDictionaryRef v7 = v4[5];
            CFDictionaryRef v8 = key;
            uint64_t v9 = 4112;
            goto LABEL_10;
          case 0x1011:
            CFDictionaryRef v6 = v4[1];
            CFDictionaryRef v7 = v4[5];
            CFDictionaryRef v8 = key;
            uint64_t v9 = 4113;
            goto LABEL_10;
          case 0x1012:
            CFDictionaryRef v6 = v4[2];
            CFDictionaryRef v7 = v4[5];
            CFDictionaryRef v8 = key;
            uint64_t v9 = 4114;
            goto LABEL_10;
          case 0x1013:
            CFDictionaryRef v6 = v4[3];
            CFDictionaryRef v7 = v4[5];
            CFDictionaryRef v8 = key;
            uint64_t v9 = 4115;
LABEL_10:
            CFDictionarySetValue(v7, v8, (const void *)v9);
            CFDictionarySetValue(v6, key, a2);
            break;
          case 0x1014:
            unsigned int v10 = v4[4];
            CFDictionarySetValue(v4[5], key, (const void *)0x1014);
            CFDictionarySetValue(v10, key, a2);
            uint64_t v11 = v4[6];
            CFSetSetValue(v11, key);
            break;
          default:
            return;
        }
      }
    }
  }
}

void frs_mergeFrozenKeys(uint64_t a1, CFSetRef theSet)
{
  v3[0] = a1;
  v3[1] = 0;
  if (!*(void *)(a1 + 56)) {
    *(void *)(a1 + 56) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  }
  CFSetApplyFunction(theSet, (CFSetApplierFunction)frs_mergeValueSetApplier, v3);
}

uint64_t FigReportingStatsFreezeKeys(uint64_t a1, CFSetRef theSet)
{
  if (!a1) {
    return 4294955296;
  }
  if (!theSet) {
    return 0;
  }
  if (*(void *)(a1 + 56))
  {
    frs_mergeFrozenKeys(a1, theSet);
    return 0;
  }
  else
  {
    CFMutableSetRef MutableCopy = CFSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theSet);
    uint64_t result = 0;
    *(void *)(a1 + 56) = MutableCopy;
  }
  return result;
}

void frs_findKeysToRemoveDictApplier(void *value, uint64_t a2, uint64_t a3)
{
  if (CFSetContainsValue(*(CFSetRef *)(*(void *)a3 + 56), value))
  {
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    CFDictionaryRef v5 = *(__CFSet **)(a3 + 8);
    CFSetAddValue(v5, value);
  }
}

void frs_removeKeysSetApplier(const __CFString *key, __CFDictionary **a2)
{
  switch(CFDictionaryGetValue(a2[5], key))
  {
    case 0x1010u:
      CFDictionaryRef v4 = *a2;
      goto LABEL_6;
    case 0x1011u:
      CFDictionaryRef v4 = a2[1];
      goto LABEL_6;
    case 0x1012u:
      CFDictionaryRef v4 = a2[2];
      goto LABEL_6;
    case 0x1013u:
      CFDictionaryRef v4 = a2[3];
LABEL_6:
      CFDictionaryRemoveValue(v4, key);
      break;
    case 0x1014u:
      CFDictionaryRemoveValue(a2[4], key);
      if (a2[6])
      {
        ArrayNameFromKey = fsrm_createArrayNameFromKey(key);
        if (ArrayNameFromKey)
        {
          CFDictionaryRef v6 = ArrayNameFromKey;
          CFSetRemoveValue(a2[6], ArrayNameFromKey);
          CFRelease(v6);
        }
      }
      break;
    default:
      return;
  }
}

void frs_mergeValueSetApplier(void *value, uint64_t a2)
{
  if (value)
  {
    if (*(void *)a2) {
      CFSetAddValue(*(CFMutableSetRef *)(*(void *)a2 + 56), value);
    }
  }
}

uint64_t FigNetworkPathInformationSetInterfaceType()
{
  return FigCFDictionarySetInt();
}

void FigNetworkPathInformationSetHostIsReachable(__CFDictionary *a1, int a2)
{
  uint64_t v2 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    uint64_t v2 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(a1, @"kFigNetworkPathInformationKey_HostIsReachable", *v2);
}

void FigNetworkPathInformationSetHostIsLocal(__CFDictionary *a1, int a2)
{
  uint64_t v2 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    uint64_t v2 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(a1, @"kFigNetworkPathInformationKey_HostIsLocal", *v2);
}

void FigNetworkPathInformationSetDoesUseCellular(__CFDictionary *a1, int a2)
{
  uint64_t v2 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    uint64_t v2 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(a1, @"kFigNetworkPathInformationKey_DoesUseCellular", *v2);
}

void FigNetworkPathInformationSetExpensive(__CFDictionary *a1, int a2)
{
  uint64_t v2 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    uint64_t v2 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(a1, @"kFigNetworkPathInformationKey_IsExpensive", *v2);
}

uint64_t FigNetworkPathInformationIsHostReachable(uint64_t a1, char a2)
{
  if (FigCFDictionaryGetBooleanIfPresent() && (a2 & 1) == 0) {
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 0;
}

uint64_t FigNetworkPathInformationIsHostLocal()
{
  return 0;
}

uint64_t FigNetworkPathInformationDoesUseCellular()
{
  return 0;
}

uint64_t FigNetworkPathInformationIsExpensive()
{
  return 0;
}

uint64_t FigNetworkPathInformationGetInterfaceType()
{
  if (FigCFDictionaryGetInt64IfPresent()) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t state_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigTTMLDocumentWriterStateID = result;
  return result;
}

uint64_t FigTTMLDocumentWriterStateStartElement(uint64_t a1, int a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&element_GetTypeID_sRegisterElementOnce, element_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v6 = Instance;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *(_DWORD *)(v6 + 16) = a2;
      *(unsigned char *)(v6 + 20) = 0;
      *(void *)(v6 + 24) = Mutable;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), (const void *)v6);
      CFRelease((CFTypeRef)v6);
      return 0;
    }
    uint64_t v8 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v6);
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  if (!v8) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), 0);
  }
  return v8;
}

uint64_t FigTTMLDocumentWriterStateCloseStartTag(uint64_t a1)
{
  uint64_t v1 = state_peekTop(a1);
  if (v1)
  {
    v1[20] = 1;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const void *state_peekTop(uint64_t a1)
{
  uint64_t result = (const void *)CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (result)
  {
    CFIndex v3 = (CFIndex)result - 1;
    CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
    return CFArrayGetValueAtIndex(v4, v3);
  }
  return result;
}

uint64_t FigTTMLDocumentWriterStateSetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryRef v5 = (CFMutableDictionaryRef *)state_peekTop(a1);
  if (v5)
  {
    CFDictionaryAddValue(v5[3], a2, a3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterStateEndElement(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count <= 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), Count - 1);
    return 0;
  }
}

unsigned __int8 *FigTTMLDocumentWriterStateStartTagClosed(uint64_t a1)
{
  uint64_t result = (unsigned __int8 *)state_peekTop(a1);
  if (result) {
    return (unsigned __int8 *)result[20];
  }
  return result;
}

void *FigTTMLDocumentWriterStateGetAttributes(uint64_t a1)
{
  uint64_t result = state_peekTop(a1);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

unsigned int *FigTTMLDocumentWriterStateGetCurrentElementType(uint64_t a1)
{
  uint64_t result = (unsigned int *)state_peekTop(a1);
  if (result) {
    return (unsigned int *)result[4];
  }
  return result;
}

uint64_t FigTTMLDocumentWriterStateCreate(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    MEMORY[0x19970EE10](&FigTTMLDocumentWriterStateGetTypeID_sRegisterFigTTMLDocumentWriterStateOnce, state_Register);
    uint64_t Instance = (void *)_CFRuntimeCreateInstance();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      uint64_t v7 = 0;
      Instance[2] = Mutable;
      *a2 = Instance;
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
      if (Instance) {
        CFRelease(Instance);
      }
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t state_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void state_Finalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 16);
  if (v1) {
    CFRelease(v1);
  }
}

__CFString *state_CopyDebugDesc(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"[FigTTMLDocumentWriterState(%p)]", a1);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count >= 1)
  {
    unint64_t v4 = Count + 1;
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v4 - 2);
      CFStringAppendFormat(Mutable, 0, @"\n  %@", ValueAtIndex);
      --v4;
    }
    while (v4 > 1);
  }
  return Mutable;
}

uint64_t element_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sElementID = result;
  return result;
}

uint64_t element_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void element_Finalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

CFStringRef element_CopyFormattingDesc(uint64_t a1)
{
  uint64_t v1 = "YES";
  if (!*(unsigned char *)(a1 + 20)) {
    uint64_t v1 = "NO";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[Element %p] elementType = %d startTagClosed: %s", a1, *(unsigned int *)(a1 + 16), v1);
}

CFStringRef element_CopyDebugDesc(uint64_t a1)
{
  uint64_t v1 = "YES";
  if (!*(unsigned char *)(a1 + 20)) {
    uint64_t v1 = "NO";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[Element %p] elementType = %d startTagClosed: %s", a1, *(unsigned int *)(a1 + 16), v1);
}

uint64_t FigUserExperienceSetCurrentRank(void *a1, int a2)
{
  if (a1)
  {
    CFRetain(a1);
    unint64_t v4 = a1[4];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigUserExperienceSetCurrentRank_block_invoke;
    v6[3] = &__block_descriptor_44_e5_v8__0l;
    v6[4] = a1;
    int v7 = a2;
    dispatch_async(v4, v6);
  }
  return 0;
}

void __FigUserExperienceSetCurrentRank_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  v2[16] = v1;
  CFRelease(v2);
}

uint64_t FigUserExperienceReportRateChange(void *a1, int a2, int a3)
{
  if (a1)
  {
    CFRetain(a1);
    uint64_t v6 = a1[4];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigUserExperienceReportRateChange_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    void block[5] = a1;
    int v9 = a3;
    int v10 = a2;
    dispatch_async(v6, block);
  }
  return 0;
}

void __FigUserExperienceReportRateChange_block_invoke(uint64_t a1)
{
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v3 = UpTimeNanoseconds;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_DWORD *)(a1 + 48))
  {
    if (!*(unsigned char *)(v4 + 40))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      if (v5)
      {
        *(void *)(v5 + 56) = UpTimeNanoseconds;
        uint64_t v6 = (void *)MEMORY[0x199711A30]();
        [*(id *)(v5 + 24) addStreamStart:0.0 play:(double)(v3 - (*(void *)(v5 + 48) + *(void *)(v5 + 96))) / 1000000000.0];
        *(unsigned char *)(v5 + 40) = 1;
        uint64_t v4 = *(void *)(a1 + 32);
      }
    }
    *(void *)(v4 + 88) = v3;
    if (*(unsigned char *)(v4 + 69))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 96) + *(void *)(*(void *)(a1 + 40) + 48);
      [*(id *)(v4 + 24) addStreamStall:0 end:(double)(*(void *)(v4 + 80) - v7) / 1000000000.0 quality:(double)(v3 - v7) / 1000000000.0 weight:(double)*(int *)(a1 + 52) / 100.0 params:1.0];
      uint64_t v4 = *(void *)(a1 + 32);
    }
    else if (*(unsigned char *)(v4 + 68))
    {
      *(void *)(v4 + 96) += v3 - *(void *)(v4 + 72);
    }
    *(_WORD *)(v4 + 68) = 0;
  }
  else if (*(unsigned char *)(v4 + 40))
  {
    *(unsigned char *)(v4 + 68) = 1;
    *(void *)(v4 + 72) = UpTimeNanoseconds;
    if (!*(unsigned char *)(v4 + 69) && *(void *)(v4 + 88) < UpTimeNanoseconds) {
      fus_completeVariantGuts(*(void *)(a1 + 40), *(_DWORD *)(v4 + 64), UpTimeNanoseconds);
    }
  }
  uint64_t v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t fus_completeVariantGuts(uint64_t result, int a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 96) + *(void *)(result + 48);
    uint64_t result = [*(id *)(result + 24) addStreamTierSwitch:(double)(*(void *)(result + 88) - v5) / 1000000000.0 end:(double)(a3 - v5) / 1000000000.0 quality:(double)a2 / 100.0 weight:1.0];
    *(void *)(v4 + 88) = a3;
  }
  return result;
}

uint64_t FigUserExperienceReportStall(void *a1)
{
  if (a1)
  {
    CFRetain(a1);
    uint64_t v2 = a1[4];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __FigUserExperienceReportStall_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = a1;
    v4[5] = a1;
    dispatch_async(v2, v4);
  }
  return 0;
}

void __FigUserExperienceReportStall_block_invoke(uint64_t a1)
{
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v3 = *(void *)(a1 + 32);
  *(unsigned char *)(v3 + 69) = 1;
  if (!*(unsigned char *)(v3 + 68) || (uint64_t v4 = *(void *)(v3 + 72), v4 >= UpTimeNanoseconds)) {
    uint64_t v4 = UpTimeNanoseconds;
  }
  *(void *)(v3 + 80) = v4;
  if (*(void *)(v3 + 88) < v4) {
    fus_completeVariantGuts(*(void *)(a1 + 40), *(_DWORD *)(v3 + 64), UpTimeNanoseconds);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t FigUserExperienceReportVariantCompleted(void *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    CFRetain(a1);
    uint64_t v6 = a1[4];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __FigUserExperienceReportVariantCompleted_block_invoke;
    v8[3] = &__block_descriptor_60_e5_v8__0l;
    int v9 = a2;
    v8[4] = a1;
    v8[5] = a1;
    v8[6] = a3;
    dispatch_async(v6, v8);
  }
  return 0;
}

void __FigUserExperienceReportVariantCompleted_block_invoke(uint64_t a1)
{
  fus_completeVariantGuts(*(void *)(a1 + 32), *(_DWORD *)(a1 + 56), *(void *)(*(void *)(a1 + 40) + 88) + 1000000 * *(void *)(a1 + 48));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigUserExperienceReportSessionEnd(void *a1)
{
  if (a1)
  {
    CFRetain(a1);
    uint64_t v2 = a1[4];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __FigUserExperienceReportSessionEnd_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = a1;
    v4[5] = a1;
    dispatch_async(v2, v4);
  }
  return 0;
}

void __FigUserExperienceReportSessionEnd_block_invoke(uint64_t a1)
{
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v4 + 69))
  {
    uint64_t v5 = *(void *)(v3 + 96) + *(void *)(v3 + 48);
    [*(id *)(v4 + 24) addStreamStall:0 end:(double)(*(void *)(v4 + 80) - v5) / 1000000000.0 quality:(double)(UpTimeNanoseconds - v5) / 1000000000.0 weight:(double)*(int *)(v4 + 64) / 100.0 params:1.0];
  }
  else if (!*(unsigned char *)(v4 + 68))
  {
    fus_completeVariantGuts(v3, *(_DWORD *)(v4 + 64), UpTimeNanoseconds);
  }
  [*(id *)(*(void *)(a1 + 40) + 24) addStreamEnd:(double)(UpTimeNanoseconds - (*(void *)(*(void *)(a1 + 32) + 48) + *(void *)(*(void *)(a1 + 32) + 96)))/ 1000000000.0];
  uint64_t v6 = *(const void **)(a1 + 32);
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t FigUserExperienceCalculateScore(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3052000000;
  int v10 = __Block_byref_object_copy__0;
  uint64_t v11 = __Block_byref_object_dispose__0;
  uint64_t v12 = 0;
  if (!a1) {
    goto LABEL_5;
  }
  uint64_t v2 = *(NSObject **)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __FigUserExperienceCalculateScore_block_invoke;
  v6[3] = &unk_1E5794640;
  v6[4] = &v7;
  void v6[5] = a1;
  dispatch_sync(v2, v6);
  uint64_t v3 = (const void *)v8[5];
  if (v3)
  {
    FPSupport_ReportAlgosScoreToSymptomLog(*(const void **)(a1 + 16), v3);
    uint64_t v4 = (void *)v8[5];
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }

  _Block_object_dispose(&v7, 8);
  return 0;
}

void sub_19410E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __FigUserExperienceCalculateScore_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [*(id *)(*(void *)(a1 + 40) + 24) scoreStreaming:0];
  id v3 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void sub_19410E7B8(void *a1)
{
}

uint64_t FigUserExperienceScorerCreate(const void *a1, void *a2)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  *a2 = 0;
  if (FigUserExperienceScorerGetClassID_sRegisterFigUserExperienceScorerTypeOnce != -1) {
    dispatch_once(&FigUserExperienceScorerGetClassID_sRegisterFigUserExperienceScorerTypeOnce, &__block_literal_global_15);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = (void *)Instance;
    uint64_t v6 = (void *)MEMORY[0x199711A30]();
    v5[3] = objc_alloc_init((Class)getAlgosStreamScoreClass[0]());
    if (v5[3] && (dispatch_queue_t v7 = dispatch_queue_create("com.apple.coremedia.uxscorer.work", 0), (v5[4] = v7) != 0))
    {
      if (a1) {
        CFTypeRef v8 = CFRetain(a1);
      }
      else {
        CFTypeRef v8 = 0;
      }
      v5[2] = v8;
      uint64_t v9 = 0;
      v5[6] = FigGetUpTimeNanoseconds();
      *a2 = v5;
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
      if (v9) {
        CFRelease(v5);
      }
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t __FigUserExperienceScorerGetClassID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigUserExperienceScorerID = result;
  return result;
}

double fus_Init(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fus_Finalize(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();

  id v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
  }
}

CFStringRef fus_BaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigUserExperienceScorer %p]", a1);
}

CFStringRef fus_CopyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigUserExperienceScorer %p]", a1);
}

Class initAlgosStreamScore()
{
  if (AlgosScoreFrameworkLibrary_sOnce != -1) {
    dispatch_once(&AlgosScoreFrameworkLibrary_sOnce, &__block_literal_global_17);
  }
  Class result = objc_getClass("AlgosStreamScore");
  classAlgosStreamScore = (uint64_t)result;
  getAlgosStreamScoreClass[0] = AlgosStreamScoreFunction;
  return result;
}

uint64_t AlgosStreamScoreFunction()
{
  return classAlgosStreamScore;
}

void *__AlgosScoreFrameworkLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AlgosScoreFramework.framework/AlgosScoreFramework", 2);
  AlgosScoreFrameworkLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t FigGaplessInfoGetDefaultAudioPrimingFrameCount(const opaqueCMFormatDescription *a1)
{
  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  if (MostCompatibleFormat)
  {
    int mFormatID = MostCompatibleFormat->mASBD.mFormatID;
    return figi_GetDefaultNumAudioPrimingFrames(mFormatID);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t figi_GetDefaultNumAudioPrimingFrames(int a1)
{
  uint64_t v1 = 2048;
  uint64_t v2 = 2112;
  if (a1 > 1667330146)
  {
    if (a1 > 1902207847)
    {
      if (a1 <= 2053202274)
      {
        if (a1 != 1902207848 && a1 != 1902207856)
        {
          int v3 = 1902211171;
LABEL_12:
          if (a1 != v3) {
            return 0;
          }
          return v1;
        }
        return 4224;
      }
      if (a1 == 2053202275) {
        return v2;
      }
      if (a1 == 2053202792) {
        return 4224;
      }
      int v4 = 2053202800;
LABEL_28:
      if (a1 == v4) {
        return 4224;
      }
      return 0;
    }
    if (a1 <= 1885430631)
    {
      if (a1 == 1667330147) {
        return v1;
      }
      int v5 = 1885430115;
    }
    else
    {
      if (a1 == 1885430632 || a1 == 1885430640) {
        return 4224;
      }
      int v5 = 1902207331;
    }
LABEL_34:
    if (a1 == v5) {
      return v2;
    }
    return 0;
  }
  if (a1 <= 1633772395)
  {
    if (a1 > 1633772319)
    {
      if (a1 == 1633772320) {
        return v2;
      }
      if (a1 == 1633772389) {
        return 256;
      }
      int v4 = 1633772392;
      goto LABEL_28;
    }
    if (a1 == 778924083) {
      return 0;
    }
    int v5 = 1633771875;
    goto LABEL_34;
  }
  if (a1 <= 1667326306)
  {
    if (a1 == 1633772396) {
      return 512;
    }
    if (a1 != 1633772400)
    {
      int v3 = 1634754915;
      goto LABEL_12;
    }
    return 4224;
  }
  if (a1 != 1667326307)
  {
    if (a1 != 1667326824)
    {
      int v4 = 1667326832;
      goto LABEL_28;
    }
    return 4224;
  }
  return v2;
}

CMTime *FigGaplessInfoGetDefaultAudioPrimingDuration@<X0>(const opaqueCMFormatDescription *a1@<X0>, CMTime *a2@<X8>)
{
  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a2->unsigned int value = *MEMORY[0x1E4F1FA48];
  a2->CMTimeEpoch epoch = *(void *)(v4 + 16);
  if (MostCompatibleFormat
    && (double mSampleRate = MostCompatibleFormat->mASBD.mSampleRate, MostCompatibleFormat->mASBD.mSampleRate > 0.0))
  {
    int64_t DefaultNumAudioPrimingFrames = figi_GetDefaultNumAudioPrimingFrames(MostCompatibleFormat->mASBD.mFormatID);
    return CMTimeMake(a2, DefaultNumAudioPrimingFrames, (int)(mSampleRate + 0.5));
  }
  else
  {
    return (CMTime *)FigSignalErrorAt();
  }
}

uint64_t FigGaplessInfoGetDefaultBonusAudioPrimingPacketCount(const opaqueCMFormatDescription *a1)
{
  uint64_t result = (uint64_t)CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = figi_GetDefaultNumAudioPrimingFrames(*(_DWORD *)(result + 8));
    if (result)
    {
      int v3 = *(_DWORD *)(v2 + 20);
      if (v3) {
        return ((int)result / v3);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

CFMutableDictionaryRef FigGaplessInfoCreateDefaultEnhanced(const opaqueCMFormatDescription *a1)
{
  if (!a1) {
    return 0;
  }
  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  if (!MostCompatibleFormat) {
    return 0;
  }
  int DefaultNumAudioPrimingFrames = figi_GetDefaultNumAudioPrimingFrames(MostCompatibleFormat->mASBD.mFormatID);
  if (!DefaultNumAudioPrimingFrames) {
    return 0;
  }
  uint64_t v4 = (CMTime *)MEMORY[0x1E4F1F9F8];

  return FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration((const AudioFormatListItem *)a1, v4, DefaultNumAudioPrimingFrames, 0, 0);
}

CFMutableDictionaryRef FigGaplessInfoCreateEnhanced_NoCorrection(const AudioFormatListItem *a1, int a2, int a3, int64_t a4)
{
  return FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(a1, MEMORY[0x1E4F1F9F8], a2, a3, a4);
}

CFMutableDictionaryRef FigGaplessInfoCreateForLaterEnhancement(int a1, int a2, uint64_t a3)
{
  if (!(a2 | a1) && !a3) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a1) {
    FigCFDictionarySetInt32();
  }
  if (a2) {
    FigCFDictionarySetInt32();
  }
  if (a3) {
    FigCFDictionarySetInt64();
  }
  return Mutable;
}

CFMutableDictionaryRef FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(const AudioFormatListItem *a1, CMTime *a2, int a3, int a4, int64_t a5)
{
  if (!a1 || !(a4 | a3) && !a5) {
    return 0;
  }
  CMTime v10 = *a2;
  uint64_t v11 = 0;
  if (!figi_ComputeEnhancementsWithDurations(a1, a5, &v10, (int32_t *)&v11 + 1, (UInt32 *)&v11)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    if (a3) {
      FigCFDictionarySetInt32();
    }
    if (a4) {
      FigCFDictionarySetInt32();
    }
    if (a5) {
      FigCFDictionarySetInt64();
    }
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
  }
  return Mutable;
}

const AudioFormatListItem *figi_ComputeEnhancementsWithDurations(const AudioFormatListItem *result, int64_t a2, CMTime *a3, int32_t *a4, UInt32 *a5)
{
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (result)
  {
    uint64_t v9 = (const opaqueCMFormatDescription *)result;
    uint64_t result = CMAudioFormatDescriptionGetMostCompatibleFormat((CMAudioFormatDescriptionRef)result);
    if (result)
    {
      int32_t v10 = (int)(result->mASBD.mSampleRate + 0.5);
      UInt32 mFramesPerPacket = result->mASBD.mFramesPerPacket;
      CMTimeMake(&v14, a2, v10);
      if ((a3->flags & 0x1D) == 1)
      {
        CMTime time1 = v14;
        CMTime v12 = *a3;
        if (CMTimeCompare(&time1, &v12) >= 1)
        {
          uint64_t result = CMAudioFormatDescriptionGetRichestDecodableFormat(v9);
          if (!result) {
            return result;
          }
          int32_t v10 = (int)(result->mASBD.mSampleRate + 0.5);
          UInt32 mFramesPerPacket = result->mASBD.mFramesPerPacket;
        }
      }
      *a4 = v10;
      *a5 = mFramesPerPacket;
      return (const AudioFormatListItem *)1;
    }
  }
  return result;
}

CFMutableDictionaryRef FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader(const AudioFormatListItem *a1, uint64_t a2, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"FramesPerSecond");
  dispatch_queue_t v7 = CFDictionaryGetValue(theDict, @"FramesPerPacket");
  if (Value) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    return (CFMutableDictionaryRef)CFRetain(theDict);
  }
  uint64_t v17 = 0;
  int64_t v20 = 0;
  CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  FigCFDictionaryGetInt64IfPresent();
  dictionaryRepresentation.unsigned int value = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v12 = v11 ? v11 : 0;
  CMTime v14 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v12 + 48);
  if (v14)
  {
    v14(FigBaseObject, @"UneditedTrackDuration", v9, &dictionaryRepresentation);
    if (dictionaryRepresentation.value)
    {
      CMTimeMakeFromDictionary(&v19, (CFDictionaryRef)dictionaryRepresentation.value);
      CFRelease((CFTypeRef)dictionaryRepresentation.value);
    }
  }
  CMTime dictionaryRepresentation = v19;
  if (!figi_ComputeEnhancementsWithDurations(a1, v20, &dictionaryRepresentation, (int32_t *)&v17 + 1, (UInt32 *)&v17))return (CFMutableDictionaryRef)CFRetain(theDict); {
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, theDict);
  }
  if (!MutableCopy) {
    return (CFMutableDictionaryRef)CFRetain(theDict);
  }
  CFMutableDictionaryRef v13 = MutableCopy;
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  return v13;
}

uint64_t FigGaplessInfoFetchiTunesParametersFromMetadataReader(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    CFTypeRef cf = 0;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v5 = v4 ? v4 : 0;
    uint64_t v6 = *(unsigned int (**)(uint64_t, __CFString *, __CFString *, void, void, CFTypeRef *, void))(v5 + 8);
    if (v6)
    {
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (!v6(a1, @"itlk", @"com.apple.iTunes.iTunSMPB", 0, *MEMORY[0x1E4F1CF80], &cf, 0) && cf != 0)
      {
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(cf))
        {
          CFStringRef v12 = (const __CFString *)CFRetain(cf);
        }
        else
        {
          CFTypeID v13 = CFDataGetTypeID();
          if (v13 != CFGetTypeID(cf)) {
            goto LABEL_28;
          }
          BytePtr = CFDataGetBytePtr((CFDataRef)cf);
          CFIndex Length = CFDataGetLength((CFDataRef)cf);
          CFStringRef v12 = CFStringCreateWithBytes(v7, BytePtr, Length, 0x8000100u, 0);
        }
        CFStringRef v16 = v12;
        if (v12)
        {
          CFIndex v17 = CFStringGetLength(v12);
          CFIndex v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >= 0x2C)
          {
            CMTime v19 = (char *)malloc_type_malloc(v17 + 1, 0xB9A8C49DuLL);
            if (v19)
            {
              int64_t v20 = v19;
              if (CFStringGetCString(v16, v19, v18, 0))
              {
                v20[44] = 0;
                long long v21 = (_DWORD *)(a2 + 4);
                if (sscanf(v20 + 10, "%08x %08x %016llx", a2, a2 + 4, a2 + 8) == 3 && *(uint64_t *)(a2 + 8) >= 1)
                {
                  if ((*(_DWORD *)a2 & 0x80000000) != 0) {
                    *(_DWORD *)a2 = 0;
                  }
                  if ((*v21 & 0x80000000) != 0) {
                    *long long v21 = 0;
                  }
                  uint64_t v9 = 1;
                  goto LABEL_33;
                }
                FigSignalErrorAt();
              }
              uint64_t v9 = 0;
LABEL_33:
              free(v20);
              goto LABEL_34;
            }
            FigSignalErrorAt();
          }
          uint64_t v9 = 0;
LABEL_34:
          CFRelease(v16);
          goto LABEL_35;
        }
LABEL_28:
        uint64_t v9 = 0;
LABEL_35:
        CFRelease(cf);
        return v9;
      }
    }
  }
  return 0;
}

uint64_t FigGaplessInfoCreateGradualDecoderRefresh(const opaqueCMFormatDescription *a1)
{
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(a1);
  if (!RichestDecodableFormat) {
    return 0;
  }
  int mFormatID = RichestDecodableFormat->mASBD.mFormatID;
  if (mFormatID <= 1633772399)
  {
    if (mFormatID <= 1633772388)
    {
      if (mFormatID != 778924083 && mFormatID != 1633772320) {
        return 0;
      }
      goto LABEL_22;
    }
    if (mFormatID == 1633772389 || mFormatID == 1633772392) {
      goto LABEL_22;
    }
    int v3 = 1633772396;
  }
  else
  {
    if (mFormatID > 1885430631)
    {
      if (mFormatID != 1885430632 && mFormatID != 1987015266 && mFormatID != 1885430640) {
        return 0;
      }
      goto LABEL_22;
    }
    if (mFormatID == 1633772400 || mFormatID == 1869641075) {
      goto LABEL_22;
    }
    int v3 = 1885430115;
  }
  if (mFormatID != v3) {
    return 0;
  }
LABEL_22:

  return FigCFNumberCreateSInt32();
}

double FigGaplessInfoGetGaplessSourceTimeRange(const opaqueCMFormatDescription *a1, __CFDictionary *cf, _OWORD *a3)
{
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v17 = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)CFIndex v18 = v4;
  *(_OWORD *)&v18[16] = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  *(void *)CMTimeScale timescale = 0;
  if (cf)
  {
    CFMutableDictionaryRef DefaultEnhanced = cf;
    CFMutableDictionaryRef v6 = 0;
  }
  else
  {
    CFMutableDictionaryRef DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(a1);
    CFMutableDictionaryRef v6 = DefaultEnhanced;
    if (!DefaultEnhanced) {
      goto LABEL_15;
    }
  }
  CFTypeID v7 = CFGetTypeID(DefaultEnhanced);
  if (v7 == CFDictionaryGetTypeID())
  {
    int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    int v9 = FigCFDictionaryGetInt32IfPresent();
    if (Int32IfPresent && v9 != 0)
    {
      int v15 = 0;
      if (FigCFDictionaryGetInt32IfPresent()) {
        CMTimeMake((CMTime *)&v17, v15, timescale[0]);
      }
      int64_t value = 0;
      if (FigCFDictionaryGetInt64IfPresent())
      {
        CMTimeMake(&v13, value, timescale[0]);
        *(CMTime *)&v18[8] = v13;
      }
    }
  }
  if (v6) {
    CFRelease(v6);
  }
LABEL_15:
  long long v11 = *(_OWORD *)v18;
  *a3 = v17;
  a3[1] = v11;
  double result = *(double *)&v18[16];
  a3[2] = *(_OWORD *)&v18[16];
  return result;
}

uint64_t FigGaplessInfoGetTrackGaplessSourceTimeRange(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v41.start.int64_t value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v41.start.CMTimeEpoch epoch = v6;
  *(_OWORD *)&v41.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  long long v7 = *(_OWORD *)&v41.duration.timescale;
  int v40 = 0;
  CFTypeRef v38 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v36 = 0;
  CFArrayRef theArray = 0;
  *a3 = *(_OWORD *)&v41.start.value;
  a3[1] = v6;
  a3[2] = v7;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int32_t v10 = *(uint64_t (**)(uint64_t, void, int *))(v9 + 8);
  if (!v10) {
    goto LABEL_27;
  }
  uint64_t v11 = v10(a2, 0, &v40);
  if (v11) {
    goto LABEL_53;
  }
  if (v40 != 1936684398) {
    goto LABEL_42;
  }
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFStringRef v16 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 48);
  if (v16) {
    v16(FigBaseObject, @"EditsExcludePrimingAndRemainderDuration", v12, &cf);
  }
  CFTypeRef v17 = cf;
  if (cf != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v18 = FigTrackReaderGetFigBaseObject(a2);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    long long v21 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v20 + 48);
    if (v21 && !v21(v18, @"GaplessSourceTimeRange", v12, &v38))
    {
      CMTimeRangeMakeFromDictionary(&v41, (CFDictionaryRef)v38);
      goto LABEL_42;
    }
    uint64_t v22 = FigTrackReaderGetFigBaseObject(a2);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CMTime v25 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v24 + 48);
    if (v25)
    {
      uint64_t v11 = v25(v22, @"TrackFormatDescriptionArray", v12, &theArray);
      if (!v11)
      {
        if (theArray && CFArrayGetCount(theArray) >= 1)
        {
          uint64_t ValueAtIndex = (const AudioFormatListItem *)CFArrayGetValueAtIndex(theArray, 0);
          uint64_t v27 = FigFormatReaderGetFigBaseObject(a1);
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v34 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v29 + 48);
          if (v34)
          {
            int v35 = v34(v27, @"iTunesGaplessInfo", v12, &v36);
            CMTime v30 = 0;
            if (!v35 && v36) {
              CMTime v30 = FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader(ValueAtIndex, a2, (CFDictionaryRef)v36);
            }
          }
          else
          {
            CMTime v30 = 0;
          }
          FigGaplessInfoGetGaplessSourceTimeRange((const opaqueCMFormatDescription *)ValueAtIndex, v30, &v41);
          goto LABEL_50;
        }
LABEL_42:
        CMTime v30 = 0;
LABEL_50:
        uint64_t v31 = 0;
        goto LABEL_28;
      }
LABEL_53:
      uint64_t v31 = v11;
      CMTime v30 = 0;
LABEL_28:
      CFTypeRef v17 = cf;
      if (!cf) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
LABEL_27:
    CMTime v30 = 0;
    uint64_t v31 = 4294954514;
    goto LABEL_28;
  }
  CMTime v30 = 0;
  uint64_t v31 = 0;
  if (cf) {
LABEL_29:
  }
    CFRelease(v17);
LABEL_30:
  if (v38) {
    CFRelease(v38);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (!v31)
  {
    long long v32 = *(_OWORD *)&v41.start.epoch;
    *a3 = *(_OWORD *)&v41.start.value;
    a3[1] = v32;
    a3[2] = *(_OWORD *)&v41.duration.timescale;
  }
  return v31;
}

uint64_t FigGaplessInfoGetTrackDuration(uint64_t a1, uint64_t a2, int a3, CMTime *a4)
{
  uint64_t v22 = 0;
  CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t v5 = FigTrackReaderCreateSegmentData(a1, a2, a3, &v22);
  CFDataRef v6 = v22;
  if (!v5)
  {
    if (v22)
    {
      CFTypeID v7 = CFGetTypeID(v22);
      if (v7 == CFDataGetTypeID())
      {
        unint64_t Length = CFDataGetLength(v6);
        unint64_t v9 = Length - 96;
        if (Length >= 0x60)
        {
          unint64_t v10 = Length;
          BytePtr = CFDataGetBytePtr(v6);
          long long v12 = *((_OWORD *)BytePtr + 4);
          *(_OWORD *)&v20.start.int64_t value = *((_OWORD *)BytePtr + 3);
          *(_OWORD *)&v20.start.CMTimeEpoch epoch = v12;
          *(_OWORD *)&v20.duration.CMTimeScale timescale = *((_OWORD *)BytePtr + 5);
          if (v9 >= 0x60)
          {
            CMTime v13 = &BytePtr[96 * (v10 / 0x60)];
            long long v14 = *((_OWORD *)BytePtr + 4);
            *(_OWORD *)&range.start.int64_t value = *((_OWORD *)BytePtr + 3);
            *(_OWORD *)&range.start.CMTimeEpoch epoch = v14;
            *(_OWORD *)&range.duration.CMTimeScale timescale = *((_OWORD *)BytePtr + 5);
            long long v15 = *((_OWORD *)v13 - 3);
            long long v16 = *((_OWORD *)v13 - 1);
            *(_OWORD *)&v18.start.CMTimeEpoch epoch = *((_OWORD *)v13 - 2);
            *(_OWORD *)&v18.duration.CMTimeScale timescale = v16;
            *(_OWORD *)&v18.start.int64_t value = v15;
            CMTimeRangeGetUnion(&v20, &range, &v18);
          }
          CMTime duration = v20.duration;
        }
      }
    }
    *a4 = duration;
  }
  if (v6) {
    CFRelease(v6);
  }
  return v5;
}

uint64_t FigTrackReaderCreateSegmentData(uint64_t a1, uint64_t a2, int a3, __CFData **a4)
{
  long long v21 = 0;
  CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v17 = *MEMORY[0x1E4F1FA20];
  long long v18 = v4;
  long long v19 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  if (a1 && a2)
  {
    if (a3) {
      FigGaplessInfoGetTrackGaplessSourceTimeRange(a1, a2, &v17);
    }
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, __CFString *, void, const void **))(v10 + 48);
    if (v11 && (v11(FigBaseObject, @"EditCursorService", *MEMORY[0x1E4F1CF80], &v21), (long long v12 = v21) != 0)
      || (TrackUneditedDurationWithPossibleFallback = FigGetTrackUneditedDurationWithPossibleFallback(a1, a2, (uint64_t)&v20), long long v12 = v21, !TrackUneditedDurationWithPossibleFallback))
    {
      CMTime v16 = v20;
      v15[0] = v17;
      v15[1] = v18;
      v15[2] = v19;
      uint64_t TrackUneditedDurationWithPossibleFallback = FigGaplessInfoCreateSegmentDataForTrack((uint64_t)v12, &v16, v15, a4);
      long long v12 = v21;
    }
    if (v12) {
      CFRelease(v12);
    }
    return TrackUneditedDurationWithPossibleFallback;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigGaplessInfoAdjustEditSegmentAccordingtoGaplessAudioTimeRange@<X0>(CMTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = a1->value;
  CMTimeFlags flags = a1->flags;
  CMTimeScale timescale = a1->timescale;
  CMTimeEpoch epoch = a1->epoch;
  CMTimeScale v8 = a1[1].timescale;
  CMTimeFlags v9 = a1[1].flags;
  CMTimeEpoch v11 = a1[1].epoch;
  CMTimeValue v10 = a1[2].value;
  CMTimeScale v12 = a1[2].timescale;
  CMTimeFlags v13 = a1[2].flags;
  CMTimeEpoch v14 = a1[2].epoch;
  CMTimeScale v17 = a1[3].timescale;
  CMTimeFlags v16 = a1[3].flags;
  CMTimeEpoch v18 = a1[3].epoch;
  CMTimeValue v21 = a1[1].value;
  uint64_t result = (uint64_t)&a1[1];
  CMTimeValue v20 = v21;
  CMTimeValue v78 = v10;
  CMTimeScale v79 = v12;
  CMTimeValue v24 = a1[3].value;
  uint64_t v23 = a1 + 3;
  CMTimeValue v22 = v24;
  CMTime v25 = (long long *)MEMORY[0x1E4F1FA48];
  CMTimeEpoch v26 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)(a5 + 16) = v26;
  long long v27 = *v25;
  *(_OWORD *)a5 = *v25;
  if (a4)
  {
    if ((flags & 0x1D) != 1 && (v13 & 1) != 0 && (v16 & 1) != 0 && !v18 && (v22 & 0x8000000000000000) == 0)
    {
      CMTimeEpoch v31 = 0;
      *(_OWORD *)a5 = *(_OWORD *)result;
      *(void *)(a5 + 16) = *(void *)(result + 16);
LABEL_42:
      *(void *)a4 = value;
      *(_DWORD *)(a4 + 8) = timescale;
      *(_DWORD *)(a4 + 12) = flags;
      *(void *)(a4 + 16) = epoch;
      *(void *)(a4 + 24) = v20;
      *(_DWORD *)(a4 + 32) = v8;
      *(_DWORD *)(a4 + 36) = v9;
      CMTimeValue v59 = v78;
      *(void *)(a4 + 40) = v11;
      *(void *)(a4 + 48) = v59;
      *(_DWORD *)(a4 + 56) = v79;
      *(_DWORD *)(a4 + 60) = v13;
      *(void *)(a4 + 64) = v14;
      *(void *)(a4 + 72) = v22;
      *(_DWORD *)(a4 + 80) = v17;
      *(_DWORD *)(a4 + 84) = v16;
      *(void *)(a4 + 88) = v31;
      return result;
    }
    long long v64 = v23;
    CMTimeValue v65 = v22;
    long long v70 = (CMTime *)result;
    CMTimeEpoch v66 = v18;
    CMTimeFlags v67 = v16;
    CMTimeEpoch v68 = v14;
    CMTimeFlags v69 = v13;
    if (*(unsigned char *)(a3 + 36))
    {
      *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)(a3 + 24);
      time1.start.CMTimeEpoch epoch = *(void *)(a3 + 40);
      *(_OWORD *)&time2.CMTimeValue value = v27;
      time2.CMTimeEpoch epoch = v26;
      CMTimeScale v61 = v17;
      uint64_t v32 = a5;
      CMTimeEpoch v33 = v11;
      CMTimeFlags v34 = v9;
      CMTimeFlags v35 = flags;
      CMTimeValue v36 = v20;
      CMTimeScale v37 = v8;
      CMTimeEpoch v38 = epoch;
      int32_t v39 = CMTimeCompare(&time1.start, &time2);
      CMTimeEpoch epoch = v38;
      CMTimeScale v8 = v37;
      CMTimeValue v20 = v36;
      CMTimeFlags flags = v35;
      CMTimeFlags v9 = v34;
      CMTimeEpoch v11 = v33;
      a5 = v32;
      CMTimeScale v17 = v61;
      if (v39 >= 1)
      {
        memset(&time2, 0, sizeof(time2));
        long long v40 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)(a3 + 48);
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v40;
        *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 80);
        CMTimeRangeGetEnd(&time2, &time1);
        CMTime rhs = *(CMTime *)(a3 + 72);
        CMTimeValue value = *MEMORY[0x1E4F1FA20];
        CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 12);
        CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 8);
        CMTimeEpoch v41 = *(void *)(MEMORY[0x1E4F1FA20] + 16);
        CMTimeValue v20 = *(void *)(MEMORY[0x1E4F1FA20] + 24);
        CMTimeScale v42 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 32);
        CMTimeFlags v9 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 36);
        uint64_t v43 = a5;
        CMTimeEpoch v44 = *(void *)(MEMORY[0x1E4F1FA20] + 40);
        CMTimeValue v78 = time2.value;
        CMTimeFlags v45 = time2.flags;
        CMTimeScale v79 = time2.timescale;
        CMTimeEpoch v46 = time2.epoch;
        CMTime lhs = *v64;
        uint64_t result = (uint64_t)CMTimeSubtract(&time1.start, &lhs, &rhs);
        CMTimeEpoch epoch = v41;
        CMTimeScale v8 = v42;
        CMTimeEpoch v11 = v44;
        CMTimeEpoch v14 = v46;
        CMTimeFlags v13 = v45;
        CMTimeValue v22 = time1.start.value;
        CMTimeScale v47 = time1.start.timescale;
        CMTimeFlags v16 = time1.start.flags;
        CMTimeEpoch v31 = time1.start.epoch;
        *(_OWORD *)uint64_t v43 = *(_OWORD *)&v70->value;
        *(void *)(v43 + 16) = v70->epoch;
        CMTimeScale v17 = v47;
        goto LABEL_42;
      }
    }
    memset(&time2, 0, sizeof(time2));
    time1.start.CMTimeValue value = value;
    time1.start.CMTimeScale timescale = timescale;
    time1.start.CMTimeFlags flags = flags;
    CMTimeEpoch v48 = epoch;
    time1.start.CMTimeEpoch epoch = epoch;
    time1.duration.CMTimeValue value = v20;
    time1.duration.CMTimeScale timescale = v8;
    time1.duration.CMTimeFlags flags = v9;
    time1.duration.CMTimeEpoch epoch = v11;
    uint64_t result = (uint64_t)CMTimeRangeGetEnd(&time2, &time1);
    CMTimeValue v76 = *(void *)(a2 + 24);
    CMTimeFlags v49 = *(_DWORD *)(a2 + 36);
    CMTimeScale v77 = *(_DWORD *)(a2 + 32);
    CMTimeEpoch v50 = *(void *)(a2 + 40);
    if (*(unsigned char *)(a2 + 12))
    {
      if (v49)
      {
        long long v51 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = v51;
        *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
        CMTimeRangeGetEnd(&lhs, &time1);
        CMTimeValue v76 = lhs.value;
        CMTimeFlags v49 = lhs.flags;
        CMTimeScale v77 = lhs.timescale;
        CMTimeEpoch v50 = lhs.epoch;
      }
      CMTimeEpoch v60 = v50;
      CMTimeFlags v62 = v49;
      *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
      time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
      lhs.CMTimeValue value = value;
      lhs.CMTimeScale timescale = timescale;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = v48;
      uint64_t result = CMTimeCompare(&time1.start, &lhs);
      if ((int)result < 1)
      {
        CMTimeEpoch epoch = v48;
      }
      else
      {
        *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
        time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
        CMTime lhs = time2;
        uint64_t result = CMTimeCompare(&time1.start, &lhs);
        if ((result & 0x80000000) != 0)
        {
          memset(&lhs, 0, sizeof(lhs));
          *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a2;
          time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
          rhs.CMTimeValue value = value;
          rhs.CMTimeScale timescale = timescale;
          rhs.CMTimeFlags flags = flags;
          rhs.CMTimeEpoch epoch = v48;
          CMTimeSubtract(&lhs, &time1.start, &rhs);
          CMTimeValue value = *(void *)a2;
          CMTimeFlags flags = *(_DWORD *)(a2 + 12);
          CMTimeScale timescale = *(_DWORD *)(a2 + 8);
          CMTimeEpoch v52 = *(void *)(a2 + 16);
          rhs.CMTimeValue value = v20;
          rhs.CMTimeScale timescale = v8;
          rhs.CMTimeFlags flags = v9;
          rhs.CMTimeEpoch epoch = v11;
          CMTime start = lhs;
          CMTimeSubtract(&time1.start, &rhs, &start);
          CMTimeValue v20 = time1.start.value;
          CMTimeScale v8 = time1.start.timescale;
          CMTimeFlags v9 = time1.start.flags;
          CMTimeEpoch v11 = time1.start.epoch;
          time1.start.CMTimeValue value = value;
          time1.start.CMTimeScale timescale = timescale;
          time1.start.CMTimeFlags flags = flags;
          time1.start.CMTimeEpoch epoch = v52;
          time1.duration.CMTimeValue value = v20;
          time1.duration.CMTimeScale timescale = v8;
          time1.duration.CMTimeFlags flags = v9;
          time1.duration.CMTimeEpoch epoch = v11;
          uint64_t result = (uint64_t)CMTimeRangeGetEnd(&rhs, &time1);
          CMTimeEpoch epoch = v52;
          CMTime time2 = rhs;
        }
        else
        {
          CMTimeValue value = *MEMORY[0x1E4F1FA20];
          CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 12);
          CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 8);
          CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA20] + 16);
          CMTimeValue v20 = *(void *)(MEMORY[0x1E4F1FA20] + 24);
          CMTimeScale v8 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 32);
          CMTimeFlags v9 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 36);
          CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA20] + 40);
        }
      }
      CMTimeFlags v49 = v62;
      CMTimeEpoch v50 = v60;
    }
    else
    {
      CMTimeEpoch epoch = v48;
    }
    int v53 = flags & 0x1D;
    CMTimeFlags v13 = v69;
    CMTimeEpoch v14 = v68;
    CMTimeFlags v16 = v67;
    CMTimeEpoch v54 = v66;
    long long v55 = v70;
    if (v53 == 1 && (v49 & 1) != 0)
    {
      CMTimeEpoch v63 = epoch;
      time1.start.CMTimeValue value = v76;
      time1.start.CMTimeScale timescale = v77;
      time1.start.CMTimeFlags flags = v49;
      time1.start.CMTimeEpoch epoch = v50;
      CMTime lhs = time2;
      CMTimeFlags v56 = v49;
      CMTimeEpoch v57 = v50;
      if ((CMTimeCompare(&time1.start, &lhs) & 0x80000000) == 0)
      {
LABEL_26:
        long long v55 = v70;
        goto LABEL_35;
      }
      time1.start.CMTimeValue value = v76;
      time1.start.CMTimeScale timescale = v77;
      time1.start.CMTimeFlags flags = v56;
      time1.start.CMTimeEpoch epoch = v57;
      lhs.CMTimeValue value = value;
      lhs.CMTimeScale timescale = timescale;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = v63;
      uint64_t result = CMTimeCompare(&time1.start, &lhs);
      if ((int)result > 0)
      {
        memset(&time1, 0, 24);
        CMTime lhs = time2;
        rhs.CMTimeValue value = v76;
        rhs.CMTimeScale timescale = v77;
        rhs.CMTimeFlags flags = v56;
        rhs.CMTimeEpoch epoch = v57;
        CMTimeSubtract(&time1.start, &lhs, &rhs);
        rhs.CMTimeValue value = v20;
        rhs.CMTimeScale timescale = v8;
        rhs.CMTimeFlags flags = v9;
        rhs.CMTimeEpoch epoch = v11;
        CMTime start = time1.start;
        CMTimeSubtract(&lhs, &rhs, &start);
        CMTimeValue v20 = lhs.value;
        CMTimeScale v8 = lhs.timescale;
        CMTimeFlags v9 = lhs.flags;
        CMTimeEpoch v11 = lhs.epoch;
        goto LABEL_26;
      }
      CMTimeValue value = *MEMORY[0x1E4F1FA20];
      CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 12);
      CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 8);
      CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA20] + 16);
      CMTimeValue v20 = *(void *)(MEMORY[0x1E4F1FA20] + 24);
      CMTimeScale v8 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 32);
      CMTimeFlags v9 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 36);
      CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA20] + 40);
      int v53 = flags & 0x1D;
      CMTimeFlags v13 = v69;
      CMTimeEpoch v14 = v68;
      CMTimeFlags v16 = v67;
      CMTimeEpoch v54 = v66;
      long long v55 = v70;
    }
    if (v53 != 1 && (v13 & 1) != 0 && (v16 & 1) != 0 && !v54)
    {
      CMTimeValue v22 = v65;
      if ((v65 & 0x8000000000000000) == 0)
      {
        CMTimeEpoch v31 = 0;
LABEL_41:
        *(void *)a5 = v20;
        *(_DWORD *)(a5 + 8) = v8;
        *(_DWORD *)(a5 + 12) = v9;
        *(void *)(a5 + 16) = v11;
        goto LABEL_42;
      }
    }
    CMTimeEpoch v63 = epoch;
LABEL_35:
    time1.start.CMTimeValue value = v20;
    time1.start.CMTimeScale timescale = v8;
    time1.start.CMTimeFlags flags = v9;
    time1.start.CMTimeEpoch epoch = v11;
    CMTime lhs = *v55;
    long long v58 = v55;
    uint64_t result = CMTimeCompare(&time1.start, &lhs);
    if ((result & 0x80000000) != 0)
    {
      *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&v64->value;
      time1.start.CMTimeEpoch epoch = v64->epoch;
      CMTime lhs = *v58;
      uint64_t result = CMTimeCompare(&time1.start, &lhs);
      if (result)
      {
        lhs.CMTimeValue value = v20;
        lhs.CMTimeScale timescale = v8;
        lhs.CMTimeFlags flags = v9;
        lhs.CMTimeEpoch epoch = v11;
        CMTime rhs = *v64;
        CMTime start = *v58;
        uint64_t result = CMTimeMultiplyTimeByTimeRatio();
        CMTimeValue v22 = time1.start.value;
        CMTimeScale v17 = time1.start.timescale;
        CMTimeFlags v16 = time1.start.flags;
        CMTimeEpoch v31 = time1.start.epoch;
      }
      else
      {
        CMTimeValue v22 = v20;
        CMTimeScale v17 = v8;
        CMTimeFlags v16 = v9;
        CMTimeEpoch v31 = v11;
      }
      CMTimeFlags v13 = v69;
      CMTimeEpoch v14 = v68;
      CMTimeEpoch epoch = v63;
    }
    else
    {
      CMTimeFlags v13 = v69;
      CMTimeEpoch v14 = v68;
      CMTimeEpoch epoch = v63;
      CMTimeValue v22 = v65;
      CMTimeEpoch v31 = v66;
      CMTimeFlags v16 = v67;
    }
    goto LABEL_41;
  }

  return FigSignalErrorAt();
}

uint64_t FigGaplessInfoCreateSegmentDataForTrack(uint64_t a1, CMTime *a2, long long *a3, __CFData **a4)
{
  v84[0] = 0;
  if (!a1)
  {
    if ((a2->flags & 0x1D) == 1)
    {
      int v10 = 1;
      goto LABEL_12;
    }
    uint64_t v49 = FigSignalErrorAt();
LABEL_77:
    uint64_t v47 = v49;
    goto LABEL_69;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CMTimeEpoch v11 = *(void (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v9 + 8);
  if (!v11
    || (*(_OWORD *)&v82.start.CMTimeValue value = *MEMORY[0x1E4F1FA08],
        v82.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16),
        v11(a1, &v82, v84),
        (CFTypeRef v12 = v84[0]) == 0))
  {
    int v10 = 0;
    goto LABEL_12;
  }
  v82.start.CMTimeValue value = 0;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CMTimeEpoch v48 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v14 + 8);
  if (!v48)
  {
    uint64_t v47 = 4294954514;
    goto LABEL_69;
  }
  uint64_t v49 = v48(v12, &v82);
  if (v49) {
    goto LABEL_77;
  }
  int v50 = 1;
  do
  {
    int v10 = v50;
    CMTimeValue value = v82.start.value;
    uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v52) {
      uint64_t v53 = v52;
    }
    else {
      uint64_t v53 = 0;
    }
    CMTimeEpoch v54 = *(uint64_t (**)(CMTimeValue, uint64_t))(v53 + 16);
    if (!v54) {
      break;
    }
    int v55 = v54(value, 1);
    int v50 = v10 + 1;
  }
  while (!v55);
  if (v82.start.value) {
    CFRelease((CFTypeRef)v82.start.value);
  }
LABEL_12:
  BOOL v60 = (*((_DWORD *)a3 + 3) & 0x1D) != 1 && (*((_DWORD *)a3 + 9) & 0x1D) != 1;
  if (!v10)
  {
    CMTimeScale v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    uint64_t v47 = 0;
    goto LABEL_70;
  }
  int v15 = v10 << !v60;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 96 * v15);
  CMTimeScale v17 = Mutable;
  if (!Mutable)
  {
    uint64_t v47 = FigSignalErrorAt();
    goto LABEL_70;
  }
  CFDataSetLength(Mutable, 96 * v15);
  MutableBytePtr = CFDataGetMutableBytePtr(v17);
  if (!MutableBytePtr)
  {
    uint64_t v47 = FigSignalErrorAt();
    if (!v47) {
      goto LABEL_70;
    }
    CFRelease(v17);
LABEL_69:
    CMTimeScale v17 = 0;
    goto LABEL_70;
  }
  long long v19 = MutableBytePtr;
  int v58 = v10 << !v60;
  theData = v17;
  int v20 = 0;
  long long v65 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
  long long v66 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
  long long v63 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
  long long v64 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
  long long v61 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
  long long v62 = *MEMORY[0x1E4F1FA00];
  do
  {
    *(_OWORD *)&v82.duration.CMTimeScale timescale = v66;
    *(_OWORD *)&v83.start.CMTimeValue value = v65;
    *(_OWORD *)&v83.start.CMTimeEpoch epoch = v64;
    *(_OWORD *)&v83.duration.CMTimeScale timescale = v63;
    *(_OWORD *)&v82.start.CMTimeValue value = v62;
    *(_OWORD *)&v82.start.CMTimeEpoch epoch = v61;
    CFTypeRef v21 = v84[0];
    if (v84[0])
    {
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      CMTimeValue v24 = *(void (**)(CFTypeRef, CMTimeRange *))(v23 + 24);
      if (v24) {
        v24(v21, &v82);
      }
    }
    else
    {
      v82.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      *(_OWORD *)&v82.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      v82.CMTime duration = *a2;
      CMTimeRange v83 = v82;
    }
    if (v60)
    {
      CMTime v25 = &v19[96 * v20++];
      long long v26 = *(_OWORD *)&v82.start.epoch;
      *(_OWORD *)CMTime v25 = *(_OWORD *)&v82.start.value;
      *((_OWORD *)v25 + 1) = v26;
      long long v27 = *(_OWORD *)&v82.duration.timescale;
      long long v28 = *(_OWORD *)&v83.start.value;
      long long v29 = *(_OWORD *)&v83.duration.timescale;
      *((_OWORD *)v25 + 4) = *(_OWORD *)&v83.start.epoch;
      *((_OWORD *)v25 + 5) = v29;
      *((_OWORD *)v25 + 2) = v27;
      *((_OWORD *)v25 + 3) = v28;
    }
    else
    {
      long long v80 = v66;
      *(_OWORD *)&v81.start.CMTimeValue value = v65;
      *(_OWORD *)&v81.start.CMTimeEpoch epoch = v64;
      *(_OWORD *)&v81.duration.CMTimeScale timescale = v63;
      long long v78 = v62;
      long long v79 = v61;
      long long v76 = *MEMORY[0x1E4F1FA48];
      uint64_t v77 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      do
      {
        long long v74 = v66;
        *(_OWORD *)&v75.start.CMTimeValue value = v65;
        *(_OWORD *)&v75.start.CMTimeEpoch epoch = v64;
        *(_OWORD *)&v75.duration.CMTimeScale timescale = v63;
        *(_OWORD *)CMTimeRange time1 = v62;
        *(_OWORD *)&time1[16] = v61;
        time2[0] = v82;
        time2[1] = v83;
        long long v33 = *a3;
        long long v34 = a3[2];
        v71[1] = a3[1];
        v71[2] = v34;
        long long v69 = v80;
        CMTimeRange v70 = v81;
        v71[0] = v33;
        *(_OWORD *)CMTime rhs = v78;
        *(_OWORD *)&rhs[16] = v79;
        FigGaplessInfoAdjustEditSegmentAccordingtoGaplessAudioTimeRange(&time2[0].start, (uint64_t)v71, (uint64_t)rhs, (uint64_t)time1, (uint64_t)&v76);
        long long v80 = v74;
        CMTimeRange v81 = v75;
        long long v78 = *(_OWORD *)time1;
        long long v79 = *(_OWORD *)&time1[16];
        unsigned int v35 = v20 - 1;
        if (v20 < 1
          || (*(_DWORD *)&v19[96 * v35 + 12] & 0x1D) == 1
          || (v19[96 * v35 + 60] & 1) == 0
          || (CMTimeValue v36 = &v19[96 * v35], (v36[84] & 1) == 0)
          || *(void *)&v19[96 * v35 + 88]
          || (CMTimeScale v42 = v36 + 72, (*((void *)v36 + 9) & 0x8000000000000000) != 0)
          || (time1[12] & 0x1D) == 1
          || (v75.start.flags & 1) == 0
          || (v75.duration.flags & 1) == 0
          || v75.duration.epoch
          || v75.duration.value < 0)
        {
          CMTimeScale v37 = &v19[96 * v20++];
          long long v38 = *(_OWORD *)&time1[16];
          *(_OWORD *)CMTimeScale v37 = *(_OWORD *)time1;
          *((_OWORD *)v37 + 1) = v38;
          long long v39 = v74;
          long long v40 = *(_OWORD *)&v75.start.value;
          long long v41 = *(_OWORD *)&v75.duration.timescale;
          *((_OWORD *)v37 + 4) = *(_OWORD *)&v75.start.epoch;
          *((_OWORD *)v37 + 5) = v41;
          *((_OWORD *)v37 + 2) = v39;
          *((_OWORD *)v37 + 3) = v40;
        }
        else
        {
          CMTimeEpoch v57 = &v19[96 * v35];
          time2[0] = v75;
          CMTimeRangeGetEnd(&lhs, time2);
          long long v43 = *((_OWORD *)v57 + 3);
          *(void *)&rhs[16] = *((void *)v57 + 8);
          *(_OWORD *)CMTime rhs = v43;
          CMTimeSubtract(&time2[0].start, &lhs, (CMTime *)rhs);
          long long v44 = *(_OWORD *)&time2[0].start.value;
          *((void *)v42 + 2) = time2[0].start.epoch;
          *(_OWORD *)CMTimeScale v42 = v44;
        }
        if (v10 < 2) {
          break;
        }
        *(_OWORD *)CMTimeRange time1 = v76;
        *(void *)&time1[16] = v77;
        time2[0].CMTime start = v82.duration;
      }
      while (CMTimeCompare((CMTime *)time1, &time2[0].start) < 0);
    }
    CFTypeRef v30 = v84[0];
    if (v84[0])
    {
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v32 = v31 ? v31 : 0;
      CMTimeFlags v45 = *(void (**)(CFTypeRef, uint64_t))(v32 + 16);
      if (v45) {
        v45(v30, 1);
      }
    }
    --v10;
  }
  while (v10);
  if (v20 >= v58)
  {
    uint64_t v47 = 0;
    CMTimeScale v17 = theData;
  }
  else
  {
    CFIndex v46 = 96 * v20;
    CMTimeScale v17 = theData;
    CFDataSetLength(theData, v46);
    uint64_t v47 = 0;
  }
LABEL_70:
  if (v84[0]) {
    CFRelease(v84[0]);
  }
  *a4 = v17;
  return v47;
}

uint64_t FigSimpleRenderPipelineCreateWithCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, void *a7)
{
  if (a7 && a2 && (*(_DWORD *)(a5 + 12) & 0x1D) == 1)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigRenderPipelineGetClassID();
    uint64_t v12 = CMDerivedObjectCreate();
    if (v12) {
      return v12;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 32) = a2;
    *(void *)(DerivedStorage + 40) = a3;
    *(void *)(DerivedStorage + 48) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    uint64_t v14 = *(void *)(a5 + 16);
    *(_OWORD *)(DerivedStorage + 56) = *(_OWORD *)a5;
    *(void *)(DerivedStorage + 72) = v14;
    *(unsigned char *)(DerivedStorage + 88) = 0;
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    if (a6)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a6, @"SortSampleBufferQueueByOutputPTS");
      if (Value)
      {
        if (CFBooleanGetValue(Value)) {
          CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
        }
      }
    }
    uint64_t v17 = CMBufferQueueCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 16));
    if (!v17) {
      *a7 = 0;
    }
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figSimpleRenderPipelineInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    int v3 = (void *)DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
      long long v4 = (void *)v3[3];
      v3[3] = 0;
      MEMORY[0x19970E930](v3[1]);
      if (v4)
      {
        TMCInvalidate(v4);
        CFRelease(v4);
      }
      simplepipelineSetTimebase(a1, 0);
      uint64_t v5 = (const void *)v3[2];
      if (v5)
      {
        CFRelease(v5);
        void v3[2] = 0;
      }
    }
  }
  return 0;
}

uint64_t figSimpleRenderPipelineFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  figSimpleRenderPipelineInvalidate(a1);
  int v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }

  return FigSimpleMutexDestroy();
}

__CFString *figSimpleRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSimpleRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t figSimpleRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v8 = DerivedStorage;
    if (!*DerivedStorage)
    {
      if (CFEqual(@"SourceSampleBufferQueue", a2))
      {
        *a4 = (CFDictionaryRef)v8[2];
        int v10 = (const void *)v8[2];
        if (v10) {
LABEL_8:
        }
          CFRetain(v10);
      }
      else
      {
        if (!CFEqual(@"Timebase", a2))
        {
          if (CFEqual(@"PerformanceDictionary", a2))
          {
            uint64_t v11 = 0;
            *a4 = 0;
          }
          else if (CFEqual(@"EndPresentationTimeForDecodedSamples", a2))
          {
            memset(&v16, 0, sizeof(v16));
            MEMORY[0x19970E910](v8[1]);
            uint64_t v12 = (const void *)v8[3];
            if (v12)
            {
              uint64_t v13 = (dispatch_queue_t *)CFRetain(v12);
              MEMORY[0x19970E930](v8[1]);
              if (v13)
              {
                uint64_t v11 = TMCGetEndPresentationTimeForDecodedSamples(v13, (uint64_t)&v16);
                if (!v11)
                {
                  CMTime v15 = v16;
                  CFDictionaryRef v14 = CMTimeCopyAsDictionary(&v15, a3);
                  *a4 = v14;
                  if (v14) {
                    uint64_t v11 = 0;
                  }
                  else {
                    uint64_t v11 = 4294954510;
                  }
                }
                CFRelease(v13);
                return v11;
              }
            }
            else
            {
              MEMORY[0x19970E930](v8[1]);
            }
            return 4294954513;
          }
          else
          {
            return 4294954446;
          }
          return v11;
        }
        *a4 = (CFDictionaryRef)v8[10];
        int v10 = (const void *)v8[10];
        if (v10) {
          goto LABEL_8;
        }
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figSimpleRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*DerivedStorage && !CFEqual(@"SourceSampleBufferQueue", a2))
  {
    if (CFEqual(@"Timebase", a2))
    {
      if (!a3 || (CFTypeID TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
      {
        simplepipelineSetTimebase(a1, (uint64_t)a3);
        return 0;
      }
    }
    else if (!CFEqual(@"PerformanceDictionary", a2) {
           && !CFEqual(@"EndPresentationTimeForDecodedSamples", a2))
    }
    {
      return 4294954446;
    }
  }

  return FigSignalErrorAt();
}

void simplepipelineSetTimebase(uint64_t a1, uint64_t a2)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (*(void *)(DerivedStorage + 80))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
    uint64_t v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0;
    MEMORY[0x19970E930](*(void *)(v4 + 8));
    if (v5)
    {
      TMCInvalidate(v5);
      CFRelease(v5);
    }
    CFRelease(*(CFTypeRef *)(v4 + 80));
  }
  *(void *)(v4 + 80) = a2;
  if (a2)
  {
    uint64_t v12 = 0;
    v11[0] = 0;
    v11[1] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v11[2] = simplepipelineSendSample;
    v11[3] = simplepipelineReleaseService;
    v11[4] = simplepipelineResetOutput;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (*(unsigned char *)(v4 + 88))
    {
      keys[0] = @"AllowCaptionGroupSampleBuffers";
      values[0] = *(void **)MEMORY[0x1E4F1CFD0];
      CFDictionaryRef v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    else
    {
      CFDictionaryRef v7 = 0;
    }
    uint64_t v8 = *(const void **)(v4 + 16);
    *(_OWORD *)keys = *(_OWORD *)(v4 + 56);
    uint64_t v9 = *(const void **)(v4 + 80);
    uint64_t v14 = *(void *)(v4 + 72);
    TMCCreateWithQueueAndOptions((uint64_t)v6, v8, (uint64_t)keys, v11, v9, (uint64_t)v7, &v12);
    MEMORY[0x19970E910](*(void *)(v4 + 8));
    int v10 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v12;
    MEMORY[0x19970E930](*(void *)(v4 + 8));
    if (v10)
    {
      TMCInvalidate(v10);
      CFRelease(v10);
    }
    CFRetain(*(CFTypeRef *)(v4 + 80));
    if (v7) {
      CFRelease(v7);
    }
  }
}

uint64_t simplepipelineSendSample(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v6 = DerivedStorage;
      if (!*(unsigned char *)DerivedStorage)
      {
        if (*(void *)(DerivedStorage + 32))
        {
          uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v7)
          {
            uint64_t v8 = (const void *)v7;
            (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v7, a2);
            CFRelease(v8);
          }
        }
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t simplepipelineResetOutput()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v3 = DerivedStorage;
      if (!*(unsigned char *)DerivedStorage)
      {
        if (*(void *)(DerivedStorage + 40))
        {
          uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v4)
          {
            uint64_t v5 = (const void *)v4;
            (*(void (**)(void))(v3 + 40))();
            CFRelease(v5);
          }
        }
      }
    }
    CFRelease(v1);
  }
  return 0;
}

uint64_t FigSampleBufferConsumerCreateForFrameSilo(const void *a1, void *a2)
{
  if (a1 && a2)
  {
    FigSampleBufferConsumerGetClassID();
    uint64_t v4 = CMDerivedObjectCreate();
    if (!v4)
    {
      *(void *)CMBaseObjectGetDerivedStorage() = a1;
      CFRetain(a1);
      *a2 = 0;
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void otfs_finalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *otfs_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerForFrameSilo %p>", a1);
  return Mutable;
}

uint64_t otfs_sendSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v3 = *(OpaqueVTFrameSilo **)CMBaseObjectGetDerivedStorage();

  return VTFrameSiloAddSampleBuffer(v3, a2);
}

uint64_t otfs_isQueueAtOrAboveHighWater()
{
  return 0;
}

uint64_t otfs_isQueueBelowLowWater()
{
  return 1;
}

uint64_t otfs_installLowWaterTrigger()
{
  return 0;
}

uint64_t otfs_removeLowWaterTrigger()
{
  return 0;
}

__CFString *figAudioQueueRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigAudioQueueRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t faqrp_setTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v4 = result;
    MEMORY[0x19970E910](*(void *)(result + 48));
    if (*(void *)(v4 + 112))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CFRelease(*(CFTypeRef *)(v4 + 112));
    }
    *(void *)(v4 + 112) = a2;
    if (a2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CFRetain(*(CFTypeRef *)(v4 + 112));
      if (dword_1E9350DF8)
      {
        int v7 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return MEMORY[0x19970E930](*(void *)(v4 + 48));
  }
  return result;
}

void faqrp_DecodeError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  CFBooleanRef Value = a5;
  values = 0;
  if (!a5) {
    goto LABEL_7;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(Value)) {
    goto LABEL_6;
  }
  CFBooleanRef Value = (void *)CFDictionaryGetValue((CFDictionaryRef)Value, @"FigAudioQueueNotificationParameter_ConverterError");
  values = Value;
  if (!Value) {
    goto LABEL_7;
  }
  CFTypeID v7 = CFNumberGetTypeID();
  if (v7 == CFGetTypeID(Value)) {
    CFBooleanRef Value = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigRenderPipelineNotificationParameter_ErrorCode, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else {
LABEL_6:
  }
    CFBooleanRef Value = 0;
LABEL_7:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Value) {
    CFRelease(Value);
  }
}

uint64_t faqrp_PreemptedError()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_RanDry()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_SegmentFinished()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_playResourceReleased()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_defaultDeviceChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_latencyChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_faqRequiresManualRestartBecauseConfigurationChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_audioQueueDecodeFormatCouldBeImprovedByRebuild()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_audioQueueStartupPerformanceMetricsAvailable()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_audioQueueDeviceHasDisconnected()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t faqrp_timebaseRateChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = result;
  if (dword_1E9350DF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)v4 && !*(unsigned char *)(v4 + 65)) {
    return faqrp_startStopAudioQueueSlavedToTimebase(a2, *(void *)(v4 + 40));
  }
  return result;
}

uint64_t faqrp_startStopAudioQueueSlavedToTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  Float64 outRelativeRate = 0.0;
  memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
  memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    CMClockOrTimebaseRef v7 = CMTimebaseCopySource(*(CMTimebaseRef *)(DerivedStorage + 112));
    uint64_t RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(v6 + 112), v7, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
    if (RelativeRateAndAnchorTime)
    {
      uint64_t v5 = RelativeRateAndAnchorTime;
      if (!v7) {
        return v5;
      }
      goto LABEL_18;
    }
    if (outRelativeRate == 0.0)
    {
      FigAudioQueuePause(a2);
      *(unsigned char *)(v6 + 64) = 0;
      BOOL v14 = outRelativeRate == 0.0;
      if (outRelativeRate == 1.0) {
        BOOL v14 = 1;
      }
      *(unsigned char *)(v6 + 101) = v14;
      faqrp_updateTimePitchBypass();
    }
    else
    {
      memset(&v20, 0, sizeof(v20));
      if (!*(unsigned char *)(v6 + 64))
      {
        CMTime time1 = outOfClockOrTimebaseAnchorTime;
        long long v16 = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        time2.CMTimeEpoch epoch = v9;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          CMTime time2 = outRelativeToClockOrTimebaseAnchorTime;
          CMTime rhs = outOfClockOrTimebaseAnchorTime;
          CMTimeSubtract(&time1, &time2, &rhs);
          CMTime outRelativeToClockOrTimebaseAnchorTime = time1;
          *(_OWORD *)&outOfClockOrTimebaseAnchorTime.CMTimeValue value = v16;
          outOfClockOrTimebaseAnchorTime.CMTimeEpoch epoch = v9;
        }
        CMClockRef HostTimeClock = CMClockGetHostTimeClock();
        CMTime time1 = outRelativeToClockOrTimebaseAnchorTime;
        CMSyncConvertTime(&v20, &time1, v7, HostTimeClock);
        BOOL v11 = outRelativeRate == 0.0;
        if (outRelativeRate == 1.0) {
          BOOL v11 = 1;
        }
        *(unsigned char *)(v6 + 101) = v11;
        faqrp_updateTimePitchBypass();
        FigAudioQueueSetParameter(a2, 2u, *(AudioQueueParameterValue *)(v6 + 216));
        float v12 = outRelativeRate;
        CMTime time1 = outOfClockOrTimebaseAnchorTime;
        faqrp_primeAudioChain(v12, a1, (uint64_t)&time1);
        float v13 = outRelativeRate;
        CMTime time1 = outOfClockOrTimebaseAnchorTime;
        CMTime time2 = v20;
        uint64_t v5 = FigAudioQueueStart2(a2, &time1, &time2, (uint64_t)faqrp_startTimebaseAtAnchorAudioTimeStamp, a1, 0, v13);
        if (!v5)
        {
          *(unsigned char *)(v6 + 64) = 1;
          if (!v7) {
            return v5;
          }
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    uint64_t v5 = 0;
LABEL_17:
    if (!v7) {
      return v5;
    }
LABEL_18:
    CFRelease(v7);
    return v5;
  }
  return 4294954444;
}

uint64_t faqrp_updateTimePitchBypass()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954444;
  }
  uint64_t v2 = DerivedStorage;
  if (!*(unsigned char *)(DerivedStorage + 67))
  {
    if (*(unsigned char *)(DerivedStorage + 101) && !*(unsigned char *)(DerivedStorage + 100)) {
      uint64_t v3 = (const __CFNumber **)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v3 = (const __CFNumber **)MEMORY[0x1E4F1CFC8];
    }
    CFNumberRef v4 = *v3;
    FigAudioQueueSetProperty(*(void *)(DerivedStorage + 40), @"TimePitchBypass", *v3);
    if (*(unsigned char *)(v2 + 66))
    {
      if (v4 == (const __CFNumber *)*MEMORY[0x1E4F1CFD0]) {
        CFNumberRef v5 = (const __CFNumber *)*MEMORY[0x1E4F1CFC8];
      }
      else {
        CFNumberRef v5 = (const __CFNumber *)*MEMORY[0x1E4F1CFD0];
      }
      FigAudioQueueSetProperty(*(void *)(v2 + 40), @"EnableTimePitch", v5);
    }
  }
  return 0;
}

uint64_t faqrp_primeAudioChain(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v6 = result;
    if (*(unsigned char *)(a3 + 12))
    {
      uint64_t v7 = *(void *)(result + 40);
      CMTime v13 = *(CMTime *)a3;
      CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      uint64_t v8 = &v13;
      CMTimeEpoch v9 = &v12;
    }
    else
    {
      memset(&v13, 0, sizeof(v13));
      CMTimebaseGetTime(&v13, *(CMTimebaseRef *)(result + 112));
      uint64_t v7 = *(void *)(v6 + 40);
      CMTime v12 = v13;
      long long v10 = *MEMORY[0x1E4F1F9F8];
      uint64_t v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      uint64_t v8 = &v12;
      CMTimeEpoch v9 = (CMTime *)&v10;
    }
    return FigAudioQueuePrime(v7, v8, (uint64_t)v9, 0, a1);
  }
  return result;
}

uint64_t faqrp_startTimebaseCommon(float a1, uint64_t a2, OpaqueCMTimebase *a3, CMTime *a4, CMTime *a5, CMTime *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CMTime time = *a6;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a6 = timebaseTime;
  CMTime time = *a4;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a4 = timebaseTime;
  CMTime time = *a5;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a5 = timebaseTime;
  double v11 = a1;
  a6->value += (uint64_t)((double)(a5->value - a4->value) / v11 + 0.5);
  long long v12 = *(_OWORD *)&a5->value;
  a4->CMTimeEpoch epoch = a5->epoch;
  *(_OWORD *)&a4->CMTimeValue value = v12;
  if (dword_1E9350DF8)
  {
    LODWORD(v19.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMClockOrTimebaseRef v14 = CMTimebaseCopySource(a3);
  memset(&v19, 0, sizeof(v19));
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMTime timebaseTime = *a6;
  CMSyncConvertTime(&v19, &timebaseTime, HostTimeClock, v14);
  if (dword_1E9350DF8)
  {
    long long v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v14) {
    CFRelease(v14);
  }
  CMTime time = *a4;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a4 = timebaseTime;
  CMTime time = v19;
  CMTimeConvertScale(&timebaseTime, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  CMTime v19 = timebaseTime;
  if (dword_1E9350DF8)
  {
    uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTime timebaseTime = *a4;
  CMTime time = v19;
  return CMTimebaseSetRateAndAnchorTime(a3, v11, &timebaseTime, &time);
}

uint64_t faqrp_setMuted(uint64_t a1, int a2)
{
  int v5 = 1065353216;
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v4 = result;
    if (*(unsigned __int8 *)(result + 103) != a2)
    {
      if (a2)
      {
        if (!FigAudioQueueGetParameter(*(void *)(result + 40), 1u, &v5)
          && !FigAudioQueueSetParameter(*(void *)(v4 + 40), 1u, 0.0))
        {
          *(unsigned char *)(v4 + 108) = 1;
          *(_DWORD *)(v4 + 104) = v5;
        }
        *(unsigned char *)(v4 + 103) = 1;
        return faqrp_updateFAQDiscardSampleBuffersProperty();
      }
      else
      {
        *(unsigned char *)(result + 103) = 0;
        uint64_t result = faqrp_updateFAQDiscardSampleBuffersProperty();
        if (*(unsigned char *)(v4 + 108))
        {
          uint64_t result = FigAudioQueueSetParameter(*(void *)(v4 + 40), 1u, *(AudioQueueParameterValue *)(v4 + 104));
          *(unsigned char *)(v4 + 108) = 0;
        }
      }
    }
  }
  return result;
}

unsigned char *faqrp_setSuspended(uint64_t a1, int a2)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result && result[102] != a2)
  {
    result[102] = a2;
    return (unsigned char *)faqrp_updateFAQDiscardSampleBuffersProperty();
  }
  return result;
}

uint64_t faqrp_updateFAQDiscardSampleBuffersProperty()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v1 = (const __CFNumber **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(result + 103) && !*(unsigned char *)(result + 102)) {
      uint64_t v1 = (const __CFNumber **)MEMORY[0x1E4F1CFC8];
    }
    CFNumberRef v2 = *v1;
    uint64_t v3 = *(void *)(result + 40);
    return FigAudioQueueSetProperty(v3, @"DiscardSampleBuffers", v2);
  }
  return result;
}

uint64_t figAudioQueueRenderPipelineSetRateAndAnchorTime(const void *a1, CMTime *a2, uint64_t a3, float a4, AudioQueueParameterValue a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  float valuePtr = a4;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350DF8)
  {
    LODWORD(v50.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)(DerivedStorage + 66)) {
    goto LABEL_4;
  }
  if (a4 == 0.0)
  {
    CMTime time = *a2;
    uint64_t v12 = faqrp_stopTimebaseAndAudioQueue(a1, (long long *)&time.value);
    *(unsigned char *)(DerivedStorage + 101) = 1;
    faqrp_updateTimePitchBypass();
    goto LABEL_5;
  }
  *(unsigned char *)(DerivedStorage + 101) = a4 == 1.0;
  faqrp_updateTimePitchBypass();
  if (*(unsigned char *)(DerivedStorage + 64)) {
    uint64_t v12 = faqrp_stopTimebaseAndAudioQueue(a1, MEMORY[0x1E4F1F9F8]);
  }
  else {
    uint64_t v12 = 0;
  }
  FigAudioQueueSetParameter(*(void *)(DerivedStorage + 40), 2u, a5);
  *(AudioQueueParameterValue *)(DerivedStorage + 216) = a5;
  if (*(unsigned char *)(DerivedStorage + 64))
  {
    CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
    FigAudioQueueSetProperty(*(void *)(DerivedStorage + 40), @"TimebaseRate", v14);
    CFRelease(v14);
    CMTimebaseSetRate(*(CMTimebaseRef *)(DerivedStorage + 112), valuePtr);
    goto LABEL_5;
  }
  CMTime time = *a2;
  faqrp_primeAudioChain(a4, (uint64_t)a1, (uint64_t)&time);
  CMTimeValue value = a2->value;
  CMTimeFlags flags = a2->flags;
  CMTimeScale timescale = a2->timescale;
  CMTimeEpoch epoch = a2->epoch;
  CMTimeValue v51 = *(void *)a3;
  CMTimeFlags v17 = *(_DWORD *)(a3 + 12);
  CMTimeScale v52 = *(_DWORD *)(a3 + 8);
  CMTimeEpoch v18 = *(void *)(a3 + 16);
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)v19)
  {
LABEL_4:
    uint64_t v12 = 4294954444;
  }
  else
  {
    uint64_t v20 = v19;
    if ((flags & 0x1D) != 1)
    {
      CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v19 + 112));
      CMTimeValue value = time.value;
      CMTimeFlags flags = time.flags;
      CMTimeScale timescale = time.timescale;
      CMTimeEpoch epoch = time.epoch;
    }
    MEMORY[0x19970E910](*(void *)(v20 + 48));
    CFTypeRef v21 = *(const void **)(v20 + 112);
    uint64_t v22 = *(const void **)(v20 + 120);
    *(void *)(v20 + 120) = v21;
    if (v21) {
      CFRetain(v21);
    }
    if (v22) {
      CFRelease(v22);
    }
    *(void *)(v20 + 128) = value;
    *(_DWORD *)(v20 + 136) = timescale;
    *(_DWORD *)(v20 + 140) = flags;
    CMTimeValue v23 = v51;
    *(void *)(v20 + 144) = epoch;
    *(void *)(v20 + 152) = v23;
    *(_DWORD *)(v20 + 160) = v52;
    *(_DWORD *)(v20 + 164) = v17;
    *(void *)(v20 + 168) = v18;
    *(float *)(v20 + 176) = a4;
    MEMORY[0x19970E930](*(void *)(v20 + 48));
    *(unsigned char *)(v20 + 64) = 1;
    if (dword_1E9350DF8)
    {
      CMTimeEpoch v44 = epoch;
      LODWORD(v48.CFDictionarySetValue(theDict, key, value) = 0;
      v47[0] = OS_LOG_TYPE_DEFAULT;
      CMTimeValue v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v25 = v48.value;
      if (os_log_type_enabled(v24, v47[0])) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        uint64_t v27 = *(void *)(v20 + 112);
        time.CMTimeValue value = value;
        time.CMTimeScale timescale = timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = v44;
        double Seconds = CMTimeGetSeconds(&time);
        time.CMTimeValue value = v51;
        time.CMTimeScale timescale = v52;
        time.CMTimeFlags flags = v17;
        time.CMTimeEpoch epoch = v18;
        Float64 v29 = CMTimeGetSeconds(&time);
        CMClockRef HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&type, HostTimeClock);
        time.CMTimeValue value = v51;
        time.CMTimeScale timescale = v52;
        time.CMTimeFlags flags = v17;
        time.CMTimeEpoch epoch = v18;
        CMTimeSubtract(&v50, &time, &type);
        Float64 v31 = CMTimeGetSeconds(&v50);
        LODWORD(immediateSourceTime.CFDictionarySetValue(theDict, key, value) = 136316418;
        *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"faqrp_startTimebaseAndAudioQueue";
        LOWORD(immediateSourceTime.flags) = 2048;
        *(void *)((char *)&immediateSourceTime.flags + 2) = a1;
        HIWORD(immediateSourceTime.epoch) = 2048;
        uint64_t v56 = v27;
        __int16 v57 = 2048;
        double v58 = Seconds;
        __int16 v59 = 2048;
        Float64 v60 = v29;
        __int16 v61 = 2048;
        Float64 v62 = v31;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTimeEpoch epoch = v44;
    }
    uint64_t v32 = *(void *)(v20 + 40);
    time.CMTimeValue value = value;
    time.CMTimeScale timescale = timescale;
    time.CMTimeFlags flags = flags;
    time.CMTimeEpoch epoch = epoch;
    immediateSourceTime.CMTimeValue value = v51;
    immediateSourceTime.CMTimeScale timescale = v52;
    immediateSourceTime.CMTimeFlags flags = v17;
    immediateSourceTime.CMTimeEpoch epoch = v18;
    uint64_t v33 = FigAudioQueueStart2(v32, &time, &immediateSourceTime, (uint64_t)faqrp_startTimebaseAtAnchorAudioTimeStamp, (uint64_t)a1, 0, a4);
    if (v33)
    {
      uint64_t v12 = v33;
      *(unsigned char *)(v20 + 64) = 0;
      FigSignalErrorAt();
    }
    else
    {
      if ((v17 & 0x1D) == 1)
      {
        CMClockOrTimebaseRef v34 = CMTimebaseCopySource(*(CMTimebaseRef *)(v20 + 112));
        memset(&v48, 0, sizeof(v48));
        CMClockRef v35 = CMClockGetHostTimeClock();
        time.CMTimeValue value = v51;
        time.CMTimeScale timescale = v52;
        time.CMTimeFlags flags = v17;
        time.CMTimeEpoch epoch = v18;
        CMSyncConvertTime(&v48, &time, v35, v34);
        if (v34) {
          CFRelease(v34);
        }
        if (dword_1E9350DF8)
        {
          CMTimeEpoch v36 = epoch;
          *(_DWORD *)uint64_t v47 = 0;
          os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
          CMTimeScale v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v38 = *(_DWORD *)v47;
          if (os_log_type_enabled(v37, v46)) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v38 & 0xFFFFFFFE;
          }
          if (v39)
          {
            uint64_t v40 = *(void *)(v20 + 112);
            time.CMTimeValue value = value;
            time.CMTimeScale timescale = timescale;
            time.CMTimeFlags flags = flags;
            time.CMTimeEpoch epoch = v36;
            Float64 v41 = CMTimeGetSeconds(&time);
            CMTime time = v48;
            Float64 v42 = CMTimeGetSeconds(&time);
            LODWORD(immediateSourceTime.CFDictionarySetValue(theDict, key, value) = 136316418;
            *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"faqrp_startTimebaseAndAudioQueue";
            LOWORD(immediateSourceTime.flags) = 2048;
            *(void *)((char *)&immediateSourceTime.flags + 2) = a1;
            HIWORD(immediateSourceTime.epoch) = 2048;
            uint64_t v56 = v40;
            __int16 v57 = 2048;
            double v58 = a4;
            __int16 v59 = 2048;
            Float64 v60 = v41;
            __int16 v61 = 2048;
            Float64 v62 = v42;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CMTimeEpoch epoch = v36;
        }
        long long v43 = *(OpaqueCMTimebase **)(v20 + 112);
        time.CMTimeValue value = value;
        time.CMTimeScale timescale = timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        CMTime immediateSourceTime = v48;
        CMTimebaseSetRateAndAnchorTime(v43, a4, &time, &immediateSourceTime);
      }
      uint64_t v12 = 0;
    }
  }
LABEL_5:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v12;
}

uint64_t figAudioQueueRenderPipelineStartAndUseTimebaseAtTransition(uint64_t a1, CMTimebaseRef timebase, uint64_t a3, const void *a4, uint64_t a5)
{
  if (timebase && a4 && CMTimebaseGetRate(timebase) == 0.0)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
    if (*(unsigned char *)(DerivedStorage + 66))
    {
      uint64_t v16 = 4294954444;
    }
    else
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (*(void *)(DerivedStorage + 184)
        || (CFMutableDictionaryRef v13 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(DerivedStorage + 184) = v13) != 0))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, @"TransitionTimebase", timebase);
        if (a5)
        {
          FigCFDictionarySetCFIndex();
          FigCFDictionarySetCFIndex();
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 184), a4, Mutable);
        uint64_t v15 = *(void *)(DerivedStorage + 40);
        long long v17 = *(_OWORD *)a3;
        uint64_t v18 = *(void *)(a3 + 16);
        uint64_t v16 = FigAudioQueueRequestTransitionCallback(v15, &v17, a4, (uint64_t)faqrp_transitionCallback, a1);
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
        uint64_t v16 = FigSignalErrorAt();
      }
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figAudioQueueRenderPipelineStartOffline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)(DerivedStorage + 66))
  {
    long long v4 = *(_OWORD *)a2;
    *(void *)(DerivedStorage + 84) = *(void *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 68) = v4;
    uint64_t v5 = *(void *)(DerivedStorage + 40);
    long long v8 = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t started = FigAudioQueueStartOffline(v5, &v8);
    if (started) {
      FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t started = 4294954444;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return started;
}

uint64_t figAudioQueueRenderPipelineStopOffline()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)(DerivedStorage + 66))
  {
    uint64_t v1 = FigAudioQueueStopOffline(*(void *)(DerivedStorage + 40));
    if (v1) {
      FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v1 = 4294954444;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v1;
}

uint64_t figAudioQueueRenderPipelineSynchronizeToTimebase(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  uint64_t started = faqrp_startStopAudioQueueSlavedToTimebase(a1, *(void *)(DerivedStorage + 40));
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return started;
}

uint64_t figAudioQueueRenderPipelineReset()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  uint64_t v1 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 32));
  if (!v1) {
    uint64_t v1 = FigAudioQueueResetOffline(*(void *)(DerivedStorage + 40));
  }
  uint64_t v2 = v1;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v2;
}

uint64_t figAudioQueueRenderPipelineFinishSettingRate(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = 4294954444;
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
    uint64_t v5 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
    CMTimeValue v4 = *(void *)(DerivedStorage + 128);
    *(void *)(DerivedStorage + 120) = 0;
    CMTimeValue v23 = v4;
    CMTimeFlags v6 = *(_DWORD *)(DerivedStorage + 140);
    CMTimeScale v24 = *(_DWORD *)(DerivedStorage + 136);
    CMTimeEpoch v7 = *(void *)(DerivedStorage + 144);
    CMTimeValue v21 = *(void *)(DerivedStorage + 152);
    CMTimeFlags v8 = *(_DWORD *)(DerivedStorage + 164);
    CMTimeScale v22 = *(_DWORD *)(DerivedStorage + 160);
    CMTimeEpoch v9 = *(void *)(DerivedStorage + 168);
    float v10 = *(float *)(DerivedStorage + 176);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
    if (v5)
    {
      memset(&v20, 0, sizeof(v20));
      if (v8)
      {
        v20.CMTimeValue value = v21;
        v20.CMTimeScale timescale = v22;
        v20.CMTimeFlags flags = v8;
        v20.CMTimeEpoch epoch = v9;
      }
      else
      {
        CMClockRef HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v20, HostTimeClock);
      }
      memset(&v19, 0, sizeof(v19));
      if (v6)
      {
        v19.CMTimeValue value = v23;
        v19.CMTimeScale timescale = v24;
        v19.CMTimeFlags flags = v6;
        v19.CMTimeEpoch epoch = v7;
      }
      else
      {
        CMTimebaseGetTime(&v19, v5);
      }
      CMTime v18 = v19;
      CMTime v17 = v19;
      CMTime v16 = v20;
      faqrp_startTimebaseCommon(v10, a1, v5, &v18, &v17, &v16);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      CFNumberRef v14 = *(void (**)(uint64_t))(v13 + 48);
      if (v14) {
        v14(a1);
      }
      CFRelease(v5);
    }
    uint64_t v3 = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v3;
}

uint64_t faqrp_stopTimebaseAndAudioQueue(const void *a1, long long *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 4294954444;
  }
  CMTimeFlags v6 = DerivedStorage;
  CMTimeEpoch v7 = (char *)malloc_type_malloc(0x20uLL, 0x1020040B07D1DCCuLL);
  if (a1) {
    CFTypeRef v8 = CFRetain(a1);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)CMTimeEpoch v7 = v8;
  long long v9 = *a2;
  *((void *)v7 + 3) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v9;
  dispatch_async_f(*((dispatch_queue_t *)v6 + 3), v7, (dispatch_function_t)faqrp_stopTimebaseAndAudioQueueDispatch);
  if (!v6[64]) {
    return 0;
  }
  uint64_t result = FigAudioQueuePause(*((void *)v6 + 5));
  v6[64] = 0;
  return result;
}

void faqrp_stopTimebaseAndAudioQueueDispatch(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  uint64_t v3 = *(const void **)(DerivedStorage + 120);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 120) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1)
  {
    CMClockOrTimebaseRef v4 = CMTimebaseCopySource(*(CMTimebaseRef *)(DerivedStorage + 112));
    if (dword_1E9350DF8)
    {
      int v10 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMTimeEpoch v7 = *(OpaqueCMTimebase **)(DerivedStorage + 112);
    CMSyncGetTime(&immediateSourceTime, v4);
    CMTime time = *(CMTime *)(a1 + 8);
    CMTimebaseSetRateAndAnchorTime(v7, 0.0, &time, &immediateSourceTime);
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    if (dword_1E9350DF8)
    {
      int v10 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CMTimeFlags v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v11 = time;
    CMTimebaseSetRateAndAnchorTimeWithFlags();
  }
  FigDeferCFRelease();
  free((void *)a1);
}

void faqrp_transitionCallback(uint64_t a1, const void *a2, CMTime *a3, CMTime *a4, float a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v21, 0, sizeof(v21));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 184), a2);
  if (Value)
  {
    uint64_t v12 = (void *)CFDictionaryGetValue(Value, @"TransitionTimebase");
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v20 = 0;
      if (FigCFDictionaryGetCFIndexIfPresent()) {
        FigCFDictionaryGetCFIndexIfPresent();
      }
      CFRetain(v13);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 184), a2);
      CMClockOrTimebaseRef v14 = CMTimebaseCopySource((CMTimebaseRef)v13);
      CMClockRef HostTimeClock = CMClockGetHostTimeClock();
      CMTime time = *a4;
      CMSyncConvertTime(&v21, &time, HostTimeClock, v14);
      memset(&v19, 0, sizeof(v19));
      CMSyncGetTime(&v19, v14);
      if (dword_1E9350DF8)
      {
        int v18 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTime time = *a3;
      CMTime rhs = v21;
      if (!CMTimebaseSetRateAndAnchorTime((CMTimebaseRef)v13, a5, &time, &rhs)) {
        faqrp_setTimebase(a1, (uint64_t)v13);
      }
      CFRelease(v13);
      if (v14) {
        CFRelease(v14);
      }
    }
  }
}

uint64_t FigPlaybackTimerGetTypeID()
{
  return sFigPlaybackTimerID;
}

uint64_t FigPlaybackTimer_initOnce()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlaybackTimerID = result;
  return result;
}

uint64_t FigPlaybackTimerCreate(uint64_t *a1)
{
  if (a1
    && (MEMORY[0x19970EE10](&FigPlaybackTimerGetTypeID_sFigPlaybackTimerRegisterOnce, FigPlaybackTimer_initOnce),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    *(void *)(Instance + 16) = 0;
    *(void *)(Instance + 24) = 0;
    *a1 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playbacktimer_init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t FigPlaybackTimerScheduleForTimebaseTimeWithTeardownHandlers(uint64_t a1, CFTypeRef cf, NSObject *a3, void *a4, void (__cdecl *a5)(void *), void (__cdecl *a6)(void *), void (__cdecl *a7)(void *), CMTime *a8)
{
  if (!*(void *)(a1 + 16) && (a8->flags & 0x1D) == 1 && cf)
  {
    *(void *)(a1 + 24) = cf;
    CFRetain(cf);
    uint64_t v15 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, a3);
    *(void *)(a1 + 16) = v15;
    if (v15)
    {
      dispatch_set_context(v15, a4);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 16), a5);
      if (a6) {
        dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 16), a6);
      }
      if (a7) {
        dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 16), a7);
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 16));
      uint64_t v16 = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(a1 + 24), *(dispatch_source_t *)(a1 + 16));
      if (v16)
      {
        uint64_t v19 = v16;
      }
      else
      {
        int v18 = *(NSObject **)(a1 + 16);
        CMTime v17 = *(OpaqueCMTimebase **)(a1 + 24);
        CMTime v23 = *a8;
        uint64_t v19 = CMTimebaseSetTimerDispatchSourceNextFireTime(v17, v18, &v23, 1u);
        if (!v19) {
          return v19;
        }
      }
      FigSignalErrorAt();
    }
    else
    {
      uint64_t v19 = FigSignalErrorAt();
      if (!v19) {
        return v19;
      }
    }
    CMTime v21 = *(NSObject **)(a1 + 16);
    if (v21)
    {
      dispatch_source_cancel(v21);
      dispatch_release(*(dispatch_object_t *)(a1 + 16));
      *(void *)(a1 + 16) = 0;
    }
    CMTimeScale v22 = *(const void **)(a1 + 24);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a1 + 24) = 0;
    }
    return v19;
  }

  return FigSignalErrorAt();
}

BOOL FigPlaybackTimerIsScheduled(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

uint64_t FigPlaybackTimerScheduleForTimebaseTime(uint64_t a1, const void *a2, NSObject *a3, void *a4, void (__cdecl *a5)(void *), CMTime *a6)
{
  CMTime v7 = *a6;
  return FigPlaybackTimerScheduleForTimebaseTimeWithTeardownHandlers(a1, a2, a3, a4, a5, 0, 0, &v7);
}

uint64_t FigPlaybackTimerCancel(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 24), v1);
    if (v3)
    {
      FigSignalErrorAt();
    }
    else
    {
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 16));
      dispatch_release(*(dispatch_object_t *)(a1 + 16));
      *(void *)(a1 + 16) = 0;
      CFRelease(*(CFTypeRef *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playbacktimer_finalize(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return FigPlaybackTimerCancel(a1);
  }
  return a1;
}

CFStringRef playbacktimer_copyFormattingDesc(uint64_t a1)
{
  CFStringRef v2 = CFCopyDescription(*(CFTypeRef *)(a1 + 24));
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPlaybackTimer %p]: timebase: %@, dispatch_source %p", a1, v2, *(void *)(a1 + 16));
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

uint64_t FigPhotoCompressionSuggestedPaddingForOptions()
{
  return MEMORY[0x1F410D620]();
}

uint64_t FigPhotoCompressionCreateNativePixelFormatArray()
{
  return MEMORY[0x1F410D500]();
}

uint64_t FigPhotoCompressionWriteFileContainerFromImage()
{
  return MEMORY[0x1F410D630]();
}

uint64_t FigPhotoCompressionCreateDataContainerFromImage()
{
  return MEMORY[0x1F410D4F8]();
}

uint64_t FigPhotoCompressionCreateContainerFromImageExt()
{
  return MEMORY[0x1F410D4F0]();
}

uint64_t figCSSParserRegisterFigCSSParser()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCSSParserID = result;
  return result;
}

uint64_t FigCSSParserCreate(uint64_t a1, const void *a2, CFTypeRef cf, uint64_t **a4)
{
  if (a2
    && a4
    && (!cf || (CFTypeID v8 = CFGetTypeID(cf), v8 == CFDictionaryGetTypeID()))
    && (MEMORY[0x19970EE10](&FigCSSParserGetTypeID_sRegisterFigCSSParserOnce, figCSSParserRegisterFigCSSParser),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    int v10 = (uint64_t *)Instance;
    *(_DWORD *)(Instance + 32) = 0;
    if (cf) {
      FigCFDictionaryGetBooleanIfPresent();
    }
    v10[2] = (uint64_t)CFRetain(a2);
    uint64_t v11 = FigCSSTokenizerCreateWithTextContainer(a1, a2, v10 + 3);
    if (v11) {
      CFRelease(v10);
    }
    else {
      *a4 = v10;
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSParserProduceStyleSheet(uint64_t a1, void *a2)
{
  if (!a1 || !a2)
  {
    return FigSignalErrorAt();
  }
  figCSSParser_reset(a1);
  if (*(_DWORD *)(a1 + 32)) {
    figCSSParser_reset(a1);
  }
  uint64_t v4 = FigCSSTokenizerProduceTokenArray(*(char **)(a1 + 24), (void *)(a1 + 40));
  if (v4)
  {
    uint64_t v25 = v4;
    goto LABEL_281;
  }
  if (!*(void *)(a1 + 40))
  {
    uint64_t v25 = FigSignalErrorAt();
    if (!v25) {
      goto LABEL_268;
    }
    goto LABEL_281;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    CFAllocatorRef v5 = CFGetAllocator((CFTypeRef)a1);
    CFStringRef v6 = CFStringCreateWithFormat(v5, 0, @"parser produced tokens: %@", *(void *)(a1 + 40));
    if (v6) {
      CFRelease(v6);
    }
  }
  CFTypeRef v81 = 0;
  CFTypeRef v82 = 0;
  CFAllocatorRef v7 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v8 = FigCSSTokenWalkerCreate((uint64_t)v7, *(const void **)(a1 + 40), (uint64_t *)&v81);
  if (v8
    || (CFAllocatorRef v9 = CFGetAllocator((CFTypeRef)a1), v8 = FigCSSStyleSheetCreate((uint64_t)v9, (uint64_t *)&v82), v8))
  {
    uint64_t v25 = v8;
    CFTypeRef v71 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_274;
  }
  CFTypeRef v10 = v81;
  CFTypeRef cf = 0;
  CFTypeRef v85 = 0;
  CMTimeValue value = 0;
  CFAllocatorRef v11 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t appended = FigSignalErrorAt();
LABEL_283:
    uint64_t v25 = appended;
    unsigned int v26 = 0;
    CFTypeRef v27 = 0;
    goto LABEL_284;
  }
  CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a1);
  uint64_t appended = FigCSSRuleListCreate((uint64_t)v13, (uint64_t *)&v85);
  if (appended) {
    goto LABEL_283;
  }
  v111[0] = 0;
  LODWORD(v109) = 0;
  uint64_t appended = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v10, v111, &v109);
  if (appended) {
    goto LABEL_283;
  }
  int v15 = (int)v109;
  uint64_t v16 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFTypeRef v77 = v10;
  long long v78 = Mutable;
  while (v15 > 24)
  {
    if ((v15 - 25) >= 2) {
      goto LABEL_31;
    }
LABEL_229:
    v111[0] = 0;
    LODWORD(v109) = 0;
    uint64_t appended = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v10, v111, &v109);
    int v15 = (int)v109;
    if (appended) {
      goto LABEL_283;
    }
  }
  switch(v15)
  {
    case 2:
      goto LABEL_229;
    case 8:
      uint64_t appended = FigCSSTokenWalkerReconsumeInputToken((uint64_t)v10);
      if (appended) {
        goto LABEL_283;
      }
      uint64_t appended = _figCSSParser_consume_an_at_rule((const void *)a1, (uint64_t)v10, &cf, (CFTypeRef *)&value);
      if (appended) {
        goto LABEL_283;
      }
      if (cf)
      {
        uint64_t appended = FigCSSRuleListAppendRule(v85, (void *)cf);
        if (appended) {
          goto LABEL_283;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      if (value)
      {
        CFArrayAppendValue(Mutable, value);
        if (value)
        {
          CFRelease(value);
          CMTimeValue value = 0;
        }
      }
      goto LABEL_229;
    case 1:
      unsigned int v26 = 0;
      CFTypeRef v27 = 0;
      uint64_t v25 = 0;
      CFTypeRef v71 = v85;
      CFTypeRef v85 = 0;
      goto LABEL_247;
  }
LABEL_31:
  uint64_t appended = FigCSSTokenWalkerReconsumeInputToken((uint64_t)v10);
  if (appended) {
    goto LABEL_283;
  }
  CFTypeRef v91 = 0;
  CFTypeRef v92 = 0;
  CFTypeRef v89 = 0;
  CFTypeRef v90 = 0;
  CFTypeRef v87 = 0;
  CFTypeRef v88 = 0;
  CFArrayRef theArray = 0;
  CFAllocatorRef v17 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v18 = FigCSSQualifiedRuleParserNodeCreate(v17, &v91);
  if (v18) {
    goto LABEL_54;
  }
  CFAllocatorRef v19 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v18 = FigCSSRuleCreate((uint64_t)v19, 1, (uint64_t *)&v92);
  if (v18) {
    goto LABEL_54;
  }
  v111[0] = 0;
  LODWORD(v109) = 0;
  uint64_t v18 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v10, v111, &v109);
  if (v18) {
    goto LABEL_54;
  }
  int v20 = (int)v109;
  while (2)
  {
    if (v20 == 1)
    {
      unsigned int v26 = 0;
      CFTypeRef v27 = 0;
      CFMutableDictionaryRef MutableCopy = 0;
      uint64_t v25 = 4294949493;
      goto LABEL_207;
    }
    if (v20 == 18)
    {
      if (v87)
      {
        CFRelease(v87);
        CFTypeRef v87 = 0;
      }
      if (v88)
      {
        CFRelease(v88);
        CFTypeRef v88 = 0;
      }
      uint64_t v18 = _figCSSParser_consume_a_simple_block((const void *)a1, (uint64_t)v10, &v87, &v88);
      if (v18 || (uint64_t v18 = FigCSSQualifiedRuleParserNodeSetSimpleBlock((uint64_t)v91, v88), v18))
      {
LABEL_54:
        uint64_t v25 = v18;
        goto LABEL_55;
      }
      CFTypeRef v28 = v91;
      CFTypeRef v29 = v92;
      CFTypeRef v94 = 0;
      CFTypeRef v95 = 0;
      CFTypeRef v93 = 0;
      if (v91 && v92)
      {
        uint64_t v30 = FigCSSQualifiedRuleParserNodeCopyPrelude((uint64_t)v91, &v95);
        if (!v30)
        {
          uint64_t v30 = FigCSSQualifiedRuleParserNodeCopySimpleBlock((uint64_t)v28, &v94);
          if (!v30)
          {
            uint64_t v30 = _figCSSParser_util_serializeComponentValueNodeArray((const void *)a1, (const __CFArray *)v95, (__CFString **)&v93);
            if (!v30)
            {
              Float64 v31 = (char *)v94;
              CFTypeRef v103 = 0;
              CMTimeValue v104 = 0;
              CFArrayRef v101 = 0;
              CFTypeRef v102 = 0;
              long long v99 = 0;
              CFArrayRef v100 = 0;
              CFTypeRef v97 = 0;
              CFTypeRef v98 = 0;
              CFTypeRef v96 = 0;
              if (v94)
              {
                CFAllocatorRef v32 = CFGetAllocator((CFTypeRef)a1);
                uint64_t v33 = FigCSSStyleDeclarationCreate((uint64_t)v32, (uint64_t *)&v104);
                if (!v33)
                {
                  uint64_t v33 = FigCSSSimpleBlockParserNodeCopyAssociatedToken((uint64_t)v31, &v102);
                  if (!v33)
                  {
                    uint64_t v33 = FigCSSSimpleBlockParserNodeCopyValue((uint64_t)v31, &v100);
                    if (!v33)
                    {
                      uint64_t v33 = _figCSSParser_util_convertComponentValueArrayToTokenArray((const void *)a1, v100, &v99);
                      if (!v33)
                      {
                        CFAllocatorRef v34 = CFGetAllocator((CFTypeRef)a1);
                        uint64_t v33 = FigCSSTokenWalkerCreate((uint64_t)v34, v99, (uint64_t *)&v96);
                        if (!v33)
                        {
                          CFTypeRef v35 = v96;
                          CFTypeRef v106 = 0;
                          uint64_t v107 = 0;
                          CFTypeRef v105 = 0;
                          CFAllocatorRef v36 = CFGetAllocator((CFTypeRef)a1);
                          CFTypeRef v79 = v29;
                          long long v80 = CFArrayCreateMutable(v36, 0, v16);
                          if (!v80)
                          {
                            uint64_t v25 = FigSignalErrorAt();
                            os_log_type_t v46 = 0;
                            CFArrayRef v47 = 0;
                            CFTypeRef v42 = 0;
                            long long v43 = 0;
                            CMTimeEpoch v44 = 0;
                            CFMutableArrayRef v45 = 0;
                            goto LABEL_136;
                          }
                          CFAllocatorRef v37 = CFGetAllocator((CFTypeRef)a1);
                          CFMutableArrayRef v38 = CFArrayCreateMutable(v37, 0, v16);
                          if (!v38)
                          {
                            uint64_t v25 = FigSignalErrorAt();
                            os_log_type_t v46 = 0;
                            CFArrayRef v47 = 0;
                            CFTypeRef v42 = 0;
                            CMTimeEpoch v44 = 0;
                            CFMutableArrayRef v45 = 0;
                            long long v43 = v80;
                            goto LABEL_136;
                          }
                          unsigned int v39 = v38;
                          v111[0] = 0;
                          LODWORD(v109) = 0;
                          uint64_t v40 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v35, v111, &v109);
                          if (v40)
                          {
LABEL_232:
                            uint64_t v25 = v40;
                            os_log_type_t v46 = 0;
                            CFArrayRef v47 = 0;
                            CFTypeRef v42 = 0;
                            CFMutableArrayRef v45 = 0;
                            goto LABEL_135;
                          }
                          int v41 = (int)v109;
                          while (1)
                          {
                            CFTypeRef v42 = 0;
                            uint64_t v25 = 0;
                            long long v43 = 0;
                            CMTimeEpoch v44 = 0;
                            CFMutableArrayRef v45 = 0;
                            os_log_type_t v46 = v80;
                            CFArrayRef v47 = v39;
                            switch(v41)
                            {
                              case 1:
                                goto LABEL_136;
                              case 2:
                                goto LABEL_128;
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                                goto LABEL_132;
                              case 7:
                                CFAllocatorRef v48 = CFGetAllocator((CFTypeRef)a1);
                                uint64_t v49 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                                CFMutableArrayRef v45 = CFArrayCreateMutable(v48, 0, MEMORY[0x1E4F1D510]);
                                if (!v45)
                                {
                                  uint64_t CurrentInputToken = FigSignalErrorAt();
LABEL_236:
                                  uint64_t v25 = CurrentInputToken;
                                  os_log_type_t v46 = 0;
                                  CFArrayRef v47 = 0;
                                  CFTypeRef v42 = 0;
LABEL_135:
                                  long long v43 = v80;
                                  CMTimeEpoch v44 = v39;
LABEL_136:
                                  if (v106) {
                                    CFRelease(v106);
                                  }
                                  if (v107) {
                                    CFRelease(v107);
                                  }
                                  if (v43) {
                                    CFRelease(v43);
                                  }
                                  if (v42) {
                                    CFRelease(v42);
                                  }
                                  if (v44) {
                                    CFRelease(v44);
                                  }
                                  if (v105) {
                                    CFRelease(v105);
                                  }
                                  if (v45) {
                                    CFRelease(v45);
                                  }
                                  Float64 v31 = 0;
                                  if (v25)
                                  {
                                    CFTypeRef v10 = v77;
                                    CFMutableDictionaryRef Mutable = v78;
                                    CFTypeRef v29 = v79;
                                  }
                                  else
                                  {
                                    CFTypeRef v10 = v77;
                                    CFMutableDictionaryRef Mutable = v78;
                                    CFTypeRef v29 = v79;
                                    if (v47)
                                    {
LABEL_152:
                                      CFIndex Count = CFArrayGetCount(v47);
                                      goto LABEL_154;
                                    }
                                    while (1)
                                    {
                                      CFIndex Count = 0;
LABEL_154:
                                      if ((uint64_t)v31 >= Count)
                                      {
                                        uint64_t v25 = 0;
                                        Float64 v31 = v104;
                                        CMTimeValue v104 = 0;
                                        goto LABEL_171;
                                      }
                                      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v47, (CFIndex)v31);
                                      uint64_t SerializationString = FigCSSDeclarationParserNodeCopyName((uint64_t)ValueAtIndex, &v103);
                                      if (SerializationString) {
                                        break;
                                      }
                                      uint64_t SerializationString = FigCSSDeclarationParserNodeCopyValue((uint64_t)ValueAtIndex, &v101);
                                      if (SerializationString) {
                                        break;
                                      }
                                      CFTypeRef v67 = v103;
                                      CFAllocatorRef v68 = CFGetAllocator((CFTypeRef)a1);
                                      uint64_t SerializationString = FigCSSTokenCreateSerializationString(v68, v67, (CFStringRef *)&v97);
                                      if (SerializationString) {
                                        break;
                                      }
                                      uint64_t SerializationString = _figCSSParser_util_serializeComponentValueNodeArray((const void *)a1, v101, (__CFString **)&v98);
                                      if (SerializationString) {
                                        break;
                                      }
                                      uint64_t SerializationString = FigCSSStyleDeclarationSetPropertyInfo(v104, (void *)v97, v98, 0);
                                      if (SerializationString) {
                                        break;
                                      }
                                      if (v98)
                                      {
                                        CFRelease(v98);
                                        CFTypeRef v98 = 0;
                                      }
                                      if (v101)
                                      {
                                        CFRelease(v101);
                                        CFArrayRef v101 = 0;
                                      }
                                      if (v97)
                                      {
                                        CFRelease(v97);
                                        CFTypeRef v97 = 0;
                                      }
                                      if (v103)
                                      {
                                        CFRelease(v103);
                                        CFTypeRef v103 = 0;
                                      }
                                      ++v31;
                                      if (v47) {
                                        goto LABEL_152;
                                      }
                                    }
                                    uint64_t v25 = SerializationString;
                                    Float64 v31 = 0;
                                  }
LABEL_171:
                                  if (v98) {
                                    CFRelease(v98);
                                  }
                                  if (v101) {
                                    CFRelease(v101);
                                  }
                                  if (v97) {
                                    CFRelease(v97);
                                  }
                                  if (v103) {
                                    CFRelease(v103);
                                  }
                                  if (v46) {
                                    CFRelease(v46);
                                  }
                                  if (v47) {
                                    CFRelease(v47);
                                  }
                                  if (v96) {
                                    CFRelease(v96);
                                  }
                                  uint64_t v16 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                                  if (v99) {
                                    CFRelease(v99);
                                  }
                                  if (v100) {
                                    CFRelease(v100);
                                  }
                                  if (v102) {
                                    CFRelease(v102);
                                  }
                                  if (v104) {
                                    CFRelease(v104);
                                  }
                                  if (!v25)
                                  {
                                    uint64_t v69 = FigCSSStyleRuleSetSelector((uint64_t)v29, v93);
                                    if (!v69) {
                                      uint64_t v69 = FigCSSStyleRuleSetDeclaration((uint64_t)v29, v31);
                                    }
                                    uint64_t v25 = v69;
                                  }
                                  if (v31) {
                                    CFRelease(v31);
                                  }
LABEL_199:
                                  if (v93) {
                                    CFRelease(v93);
                                  }
                                  if (v94) {
                                    CFRelease(v94);
                                  }
                                  if (v95) {
                                    CFRelease(v95);
                                  }
                                  if (!v25)
                                  {
                                    CFMutableDictionaryRef MutableCopy = 0;
                                    CFTypeRef v27 = v91;
                                    unsigned int v26 = (void *)v92;
                                    CFTypeRef v91 = 0;
                                    CFTypeRef v92 = 0;
                                    goto LABEL_207;
                                  }
LABEL_55:
                                  unsigned int v26 = 0;
                                  CFTypeRef v27 = 0;
                                  CFMutableDictionaryRef MutableCopy = 0;
                                  goto LABEL_207;
                                }
                                v111[0] = 0;
                                LODWORD(v109) = 0;
                                uint64_t CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken((uint64_t)v35, v111, &v109);
                                if (CurrentInputToken) {
                                  goto LABEL_236;
                                }
                                CFArrayAppendValue(v45, v111[0]);
                                v111[0] = 0;
                                LODWORD(v109) = 0;
                                uint64_t CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v35, v111, &v109);
                                if (CurrentInputToken) {
                                  goto LABEL_236;
                                }
                                CMTimeValue v51 = v111[0];
                                int v52 = (int)v109;
                                while (v52 != 1 && v52 != 14)
                                {
                                  CFArrayAppendValue(v45, v51);
                                  v111[0] = 0;
                                  LODWORD(v109) = 0;
                                  uint64_t CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v35, v111, &v109);
                                  CMTimeValue v51 = v111[0];
                                  int v52 = (int)v109;
                                  if (CurrentInputToken) {
                                    goto LABEL_236;
                                  }
                                }
                                CFAllocatorRef v53 = CFGetAllocator((CFTypeRef)a1);
                                uint64_t CurrentInputToken = FigCSSTokenWalkerCreate((uint64_t)v53, v45, (uint64_t *)&v105);
                                if (CurrentInputToken) {
                                  goto LABEL_236;
                                }
                                uint64_t CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v105, 0, 0);
                                if (CurrentInputToken) {
                                  goto LABEL_236;
                                }
                                uint64_t v54 = (uint64_t)v105;
                                CFTypeRef v108 = 0;
                                CFTypeRef v109 = 0;
                                CFAllocatorRef v55 = CFGetAllocator((CFTypeRef)a1);
                                uint64_t v56 = FigCSSDeclarationParserNodeCreate(v55, &v109);
                                if (v56
                                  || (v111[0] = 0,
                                      int v110 = 0,
                                      uint64_t v56 = FigCSSTokenWalkerGetCurrentInputToken(v54, v111, &v110),
                                      v56)
                                  || (uint64_t v56 = FigCSSDeclarationParserNodeSetName((uint64_t)v109, v111[0]), v56))
                                {
                                  uint64_t v25 = v56;
                                  CFMutableArrayRef v58 = 0;
                                  goto LABEL_115;
                                }
                                CFAllocatorRef v57 = CFGetAllocator((CFTypeRef)a1);
                                CFMutableArrayRef v58 = CFArrayCreateMutable(v57, 0, v49);
                                if (v58)
                                {
                                  uint64_t v59 = FigCSSDeclarationParserNodeSetValue((uint64_t)v109, v58);
                                  if (!v59)
                                  {
                                    v111[0] = 0;
                                    int v110 = 0;
                                    uint64_t v59 = FigCSSTokenWalkerConsumeNextInputToken(v54, v111, &v110);
                                    if (!v59)
                                    {
                                      int v60 = v110;
                                      while (v60 == 2)
                                      {
                                        v111[0] = 0;
                                        int v110 = 0;
                                        uint64_t v59 = FigCSSTokenWalkerConsumeNextInputToken(v54, v111, &v110);
                                        int v60 = v110;
                                        if (v59) {
                                          goto LABEL_102;
                                        }
                                      }
                                      if (v60 != 13)
                                      {
                                        uint64_t v25 = 4294949493;
                                        goto LABEL_115;
                                      }
                                      v111[0] = 0;
                                      int v110 = 0;
                                      uint64_t v59 = FigCSSTokenWalkerConsumeNextInputToken(v54, v111, &v110);
                                      if (!v59)
                                      {
                                        if (v110 == 1)
                                        {
LABEL_113:
                                          uint64_t v25 = 0;
                                          CFTypeRef v42 = v109;
                                          CFTypeRef v109 = 0;
                                          goto LABEL_118;
                                        }
                                        __int16 v61 = v111[0];
                                        while (1)
                                        {
                                          CFAllocatorRef v62 = CFGetAllocator((CFTypeRef)a1);
                                          uint64_t v59 = FigCSSComponentValueParserNodeCreate(v62, &v108);
                                          if (v59) {
                                            break;
                                          }
                                          uint64_t v59 = FigCSSComponentValueParserNodeSetPreservedToken((uint64_t)v108, v61);
                                          if (v59) {
                                            break;
                                          }
                                          CFArrayAppendValue(v58, v108);
                                          v111[0] = 0;
                                          int v110 = 0;
                                          uint64_t v59 = FigCSSTokenWalkerConsumeNextInputToken(v54, v111, &v110);
                                          if (v59) {
                                            break;
                                          }
                                          __int16 v61 = v111[0];
                                          int v63 = v110;
                                          if (v108)
                                          {
                                            CFRelease(v108);
                                            CFTypeRef v108 = 0;
                                          }
                                          if (v63 == 1) {
                                            goto LABEL_113;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  uint64_t v59 = FigSignalErrorAt();
                                }
LABEL_102:
                                uint64_t v25 = v59;
LABEL_115:
                                if (v109) {
                                  CFRelease(v109);
                                }
                                CFTypeRef v42 = 0;
LABEL_118:
                                if (v108) {
                                  CFRelease(v108);
                                }
                                if (v58) {
                                  CFRelease(v58);
                                }
                                if (v25)
                                {
                                  os_log_type_t v46 = 0;
                                  CFArrayRef v47 = 0;
                                  goto LABEL_135;
                                }
                                if (v42)
                                {
                                  CFArrayAppendValue(v39, v42);
                                  CFRelease(v42);
                                }
                                if (v105)
                                {
                                  CFRelease(v105);
                                  CFTypeRef v105 = 0;
                                }
                                CFRelease(v45);
LABEL_128:
                                v111[0] = 0;
                                LODWORD(v109) = 0;
                                uint64_t v40 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v35, v111, &v109);
                                int v41 = (int)v109;
                                if (v40) {
                                  goto LABEL_232;
                                }
                                break;
                              case 8:
                                uint64_t v40 = _figCSSParser_consume_an_at_rule((const void *)a1, (uint64_t)v35, &v107, &v106);
                                if (v40) {
                                  goto LABEL_232;
                                }
                                CFArrayAppendValue(v80, v107);
                                CFArrayAppendValue(v39, v106);
                                goto LABEL_128;
                              default:
                                if (v41 == 14) {
                                  goto LABEL_128;
                                }
LABEL_132:
                                while (1)
                                {
                                  v111[0] = 0;
                                  LODWORD(v109) = 0;
                                  uint64_t v40 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v35, v111, &v109);
                                  if (v40) {
                                    goto LABEL_232;
                                  }
                                  if ((v109 - 3) >= 0xFFFFFFFE)
                                  {
                                    os_log_type_t v46 = 0;
                                    CFArrayRef v47 = 0;
                                    CFTypeRef v42 = 0;
                                    CFMutableArrayRef v45 = 0;
                                    uint64_t v25 = 4294949493;
                                    goto LABEL_135;
                                  }
                                }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                uint64_t v25 = v33;
                Float64 v31 = 0;
              }
              else
              {
                uint64_t v25 = FigSignalErrorAt();
              }
              os_log_type_t v46 = 0;
              CFArrayRef v47 = 0;
              goto LABEL_171;
            }
          }
        }
      }
      else
      {
        uint64_t v30 = FigSignalErrorAt();
      }
      uint64_t v25 = v30;
      goto LABEL_199;
    }
    uint64_t v18 = FigCSSTokenWalkerReconsumeInputToken((uint64_t)v10);
    if (v18) {
      goto LABEL_54;
    }
    uint64_t v18 = _figCSSParser_consume_a_component_value((const void *)a1, (uint64_t)v10, &v89, &v90);
    if (v18) {
      goto LABEL_54;
    }
    uint64_t v18 = FigCSSQualifiedRuleParserNodeCopyPrelude((uint64_t)v91, &theArray);
    if (v18) {
      goto LABEL_54;
    }
    CFArrayRef v21 = theArray;
    CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
    if (v21)
    {
      CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(v22, 0, theArray);
      goto LABEL_44;
    }
    CFMutableDictionaryRef MutableCopy = CFArrayCreateMutable(v22, 0, v16);
    if (MutableCopy)
    {
LABEL_44:
      CFArrayAppendValue(MutableCopy, v90);
      uint64_t v24 = FigCSSQualifiedRuleParserNodeSetPrelude((uint64_t)v91, MutableCopy);
      if (v24) {
        goto LABEL_234;
      }
      if (v90)
      {
        CFRelease(v90);
        CFTypeRef v90 = 0;
      }
      if (v89)
      {
        CFRelease(v89);
        CFTypeRef v89 = 0;
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
      v111[0] = 0;
      LODWORD(v109) = 0;
      uint64_t v18 = FigCSSTokenWalkerConsumeNextInputToken((uint64_t)v10, v111, &v109);
      int v20 = (int)v109;
      if (v18) {
        goto LABEL_54;
      }
      continue;
    }
    break;
  }
  uint64_t v24 = FigSignalErrorAt();
LABEL_234:
  uint64_t v25 = v24;
  unsigned int v26 = 0;
  CFTypeRef v27 = 0;
LABEL_207:
  if (v87) {
    CFRelease(v87);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v92) {
    CFRelease(v92);
  }
  if (v91) {
    CFRelease(v91);
  }
  if (v89) {
    CFRelease(v89);
  }
  if (v90) {
    CFRelease(v90);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v25) {
    goto LABEL_284;
  }
  if (!v26)
  {
LABEL_227:
    if (v27)
    {
      CFArrayAppendValue(Mutable, v27);
      CFRelease(v27);
    }
    goto LABEL_229;
  }
  uint64_t v70 = FigCSSRuleListAppendRule(v85, v26);
  if (!v70)
  {
    CFRelease(v26);
    goto LABEL_227;
  }
  uint64_t v25 = v70;
LABEL_284:
  if (v85) {
    CFRelease(v85);
  }
  if (Mutable)
  {
    CFRelease(Mutable);
    CFTypeRef v71 = 0;
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFTypeRef v71 = 0;
  }
LABEL_247:
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (!v25)
  {
    uint64_t v25 = FigCSSStyleSheetSetRuleList((uint64_t)v82, v71);
    if (!v25)
    {
      *(void *)(a1 + 72) = v82;
      CFTypeRef v82 = 0;
      goto LABEL_258;
    }
  }
LABEL_274:
  if (v82) {
    CFRelease(v82);
  }
LABEL_258:
  if (v71) {
    CFRelease(v71);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v81) {
    CFRelease(v81);
  }
  if (v25)
  {
LABEL_281:
    *(_DWORD *)(a1 + 32) = 2;
    return v25;
  }
  if (*(unsigned char *)(a1 + 81))
  {
    CFAllocatorRef v72 = CFGetAllocator((CFTypeRef)a1);
    CFStringRef v73 = CFStringCreateWithFormat(v72, 0, @"parser produced styleSheet: %@", *(void *)(a1 + 72));
    if (v73) {
      CFRelease(v73);
    }
  }
LABEL_268:
  *(_DWORD *)(a1 + 32) = 1;
  CFTypeRef v74 = *(CFTypeRef *)(a1 + 72);
  if (v74) {
    CFTypeRef v74 = CFRetain(v74);
  }
  uint64_t v25 = 0;
  *a2 = v74;
  return v25;
}

double figCSSParser_reset(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 72) = 0;
  }
  CFStringRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 40) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = xmmword_1949932C0;
  return result;
}

double figCSSParser_Init(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figCSSParser_Finalize(uint64_t a1)
{
  figCSSParser_reset(a1);
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef figCSSParser_CopyFormattingDesc(void *a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCSSParser <%p> textContainer:<%p> tokenizer:<%p> tokens:<%p> producedStyleSheet:<%p>]", a1, a1[2], a1[3], a1[5], a1[9]);
}

CFStringRef figCSSParser_CopyDebugDesc(void *a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCSSParser <%p> textContainer:<%p> tokenizer:<%p> tokens:<%p> producedStyleSheet:<%p>]", a1, a1[2], a1[3], a1[5], a1[9]);
}

uint64_t _figCSSParser_consume_an_at_rule(const void *a1, uint64_t a2, void *a3, CFTypeRef *a4)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  if (!a1 || !a3 || !a4) {
    goto LABEL_30;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  int v20 = 0;
  int v19 = 0;
  uint64_t CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken(a2, &v20, &v19);
  if (CurrentInputToken) {
    goto LABEL_31;
  }
  CFTypeRef v10 = v20;
  uint64_t CurrentInputToken = FigCSSAtRuleParserNodeCreate(v8, &cf);
  if (CurrentInputToken) {
    goto LABEL_31;
  }
  uint64_t CurrentInputToken = FigCSSAtRuleParserNodeSetName((uint64_t)cf, v10);
  if (CurrentInputToken) {
    goto LABEL_31;
  }
  CFAllocatorRef v11 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_30:
    uint64_t CurrentInputToken = FigSignalErrorAt();
    goto LABEL_31;
  }
  CFAllocatorRef v13 = Mutable;
  uint64_t CurrentInputToken = FigCSSAtRuleParserNodeSetPrelude((uint64_t)cf, Mutable);
  if (CurrentInputToken) {
    goto LABEL_31;
  }
  uint64_t CurrentInputToken = FigCSSAtRuleParserNodeSetSimpleBlock((uint64_t)cf, 0);
  if (CurrentInputToken) {
    goto LABEL_31;
  }
  int v20 = 0;
  int v19 = 0;
  uint64_t CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken(a2, &v20, &v19);
  if (CurrentInputToken) {
    goto LABEL_31;
  }
  if (v19 == 1)
  {
LABEL_14:
    uint64_t v14 = 0;
    *a3 = 0;
    goto LABEL_23;
  }
  if (v19 != 18)
  {
    if (v19 == 14) {
      goto LABEL_14;
    }
    uint64_t CurrentInputToken = FigCSSTokenWalkerReconsumeInputToken(a2);
    if (!CurrentInputToken)
    {
      uint64_t CurrentInputToken = _figCSSParser_consume_a_component_value(a1, a2, 0, (CFTypeRef *)&value);
      if (!CurrentInputToken)
      {
        CFArrayAppendValue(v13, value);
        if (value)
        {
          CFRelease(value);
          uint64_t v14 = 0;
          CMTimeValue value = 0;
        }
        else
        {
          uint64_t v14 = 0;
        }
        goto LABEL_23;
      }
    }
LABEL_31:
    uint64_t v14 = CurrentInputToken;
    goto LABEL_23;
  }
  int v20 = 0;
  uint64_t CurrentInputToken = _figCSSParser_consume_a_simple_block(a1, a2, &v20, &v17);
  if (CurrentInputToken) {
    goto LABEL_31;
  }
  uint64_t v14 = FigCSSAtRuleParserNodeSetSimpleBlock((uint64_t)cf, v17);
  if (!v14)
  {
    *a4 = cf;
    CFTypeRef cf = 0;
    goto LABEL_25;
  }
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
LABEL_25:
  if (v17) {
    CFRelease(v17);
  }
  if (value) {
    CFRelease(value);
  }
  return v14;
}

uint64_t _figCSSParser_consume_a_simple_block(const void *a1, uint64_t a2, void *a3, CFTypeRef *a4)
{
  CMTimeValue value = 0;
  CFTypeRef v24 = 0;
  CFTypeRef cf = 0;
  if (!a1 || !a2 || !a3 || !a4)
  {
    uint64_t v20 = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
    goto LABEL_33;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    unsigned int v26 = 0;
    int v25 = 0;
    uint64_t CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken(a2, &v26, &v25);
    if (CurrentInputToken) {
      goto LABEL_44;
    }
    CFAllocatorRef v11 = v26;
    int v12 = v25;
    *a3 = 0;
    *a4 = 0;
    CFAllocatorRef v13 = CFGetAllocator(a1);
    uint64_t CurrentInputToken = FigCSSSimpleBlockParserNodeCreate(v13, &v24);
    if (CurrentInputToken) {
      goto LABEL_44;
    }
    uint64_t CurrentInputToken = FigCSSSimpleBlockParserNodeSetAssociatedToken((uint64_t)v24, v11);
    if (CurrentInputToken) {
      goto LABEL_44;
    }
    CFAllocatorRef v14 = CFGetAllocator(a1);
    CFMutableArrayRef v15 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
    if (v15)
    {
      uint64_t v16 = v15;
      switch(v12)
      {
        case 16:
          int v17 = 17;
          break;
        case 18:
          int v17 = 19;
          break;
        case 20:
          int v17 = 21;
          break;
        default:
          uint64_t v18 = FigSignalErrorAt();
          goto LABEL_31;
      }
      uint64_t v18 = FigCSSSimpleBlockParserNodeSetValue((uint64_t)v24, v15);
      if (!v18)
      {
        unsigned int v26 = 0;
        int v25 = 0;
        uint64_t v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v26, &v25);
        if (!v18)
        {
          int v19 = v25;
          while (v19 != 1 && v19 != v17)
          {
            uint64_t v18 = FigCSSTokenWalkerReconsumeInputToken(a2);
            if (!v18)
            {
              uint64_t v18 = _figCSSParser_consume_a_component_value(a1, a2, &cf, (CFTypeRef *)&value);
              if (!v18)
              {
                CFArrayAppendValue(v16, value);
                if (cf)
                {
                  CFRelease(cf);
                  CFTypeRef cf = 0;
                }
                if (value)
                {
                  CFRelease(value);
                  CMTimeValue value = 0;
                }
                unsigned int v26 = 0;
                int v25 = 0;
                uint64_t v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v26, &v25);
                int v19 = v25;
                if (!v18) {
                  continue;
                }
              }
            }
            goto LABEL_31;
          }
          uint64_t v20 = 0;
          *a4 = v24;
          CFTypeRef v24 = 0;
          goto LABEL_32;
        }
      }
LABEL_31:
      uint64_t v20 = v18;
LABEL_32:
      CFRelease(v16);
      goto LABEL_33;
    }
  }
  uint64_t CurrentInputToken = FigSignalErrorAt();
LABEL_44:
  uint64_t v20 = CurrentInputToken;
LABEL_33:
  if (v24) {
    CFRelease(v24);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v20;
}

uint64_t _figCSSParser_consume_a_component_value(const void *a1, uint64_t a2, void *a3, CFTypeRef *a4)
{
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  CFTypeRef v24 = 0;
  if (!a1 || !a3 || !a4)
  {
    uint64_t CurrentInputToken = FigSignalErrorAt();
    goto LABEL_57;
  }
  *a3 = 0;
  *a4 = 0;
  CFTypeRef v31 = 0;
  LODWORD(v29) = 0;
  uint64_t CurrentInputToken = FigCSSTokenWalkerConsumeNextInputToken(a2, &v31, &v29);
  if (CurrentInputToken)
  {
LABEL_57:
    uint64_t v20 = CurrentInputToken;
LABEL_58:
    CFTypeRef v21 = 0;
    goto LABEL_37;
  }
  HIDWORD(v9) = v29;
  LODWORD(v9) = v29 - 16;
  unsigned int v8 = v9 >> 1;
  if (v8 < 3)
  {
    CFAllocatorRef v10 = CFGetAllocator(a1);
    uint64_t CurrentInputToken = FigCSSComponentValueParserNodeCreate(v10, &v24);
    if (!CurrentInputToken)
    {
      uint64_t CurrentInputToken = _figCSSParser_consume_a_simple_block(a1, a2, &v26, &v25);
      if (!CurrentInputToken)
      {
        uint64_t v11 = FigCSSComponentValueParserNodeSetSimpleBlock((uint64_t)v24, v25);
        goto LABEL_34;
      }
    }
    goto LABEL_57;
  }
  if (v8 != 8)
  {
    CFAllocatorRef v22 = CFGetAllocator(a1);
    uint64_t CurrentInputToken = FigCSSComponentValueParserNodeCreate(v22, &v24);
    if (!CurrentInputToken)
    {
      CFTypeRef v31 = 0;
      LODWORD(v29) = 0;
      uint64_t CurrentInputToken = FigCSSTokenWalkerGetCurrentInputToken(a2, &v31, &v29);
      if (!CurrentInputToken)
      {
        uint64_t v11 = FigCSSComponentValueParserNodeSetPreservedToken((uint64_t)v24, v31);
LABEL_34:
        uint64_t v20 = v11;
        if (!v11)
        {
          CFTypeRef v21 = 0;
LABEL_36:
          *a4 = v24;
          CFTypeRef v24 = 0;
          goto LABEL_37;
        }
        goto LABEL_58;
      }
    }
    goto LABEL_57;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  uint64_t CurrentInputToken = FigCSSComponentValueParserNodeCreate(v12, &v24);
  if (CurrentInputToken) {
    goto LABEL_57;
  }
  CMTimeValue value = 0;
  CFTypeRef v29 = 0;
  CFTypeRef cf = 0;
  if (!a2)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_60:
    uint64_t v20 = v13;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_28;
  }
  CFTypeRef v31 = 0;
  int v30 = 0;
  uint64_t v13 = FigCSSTokenWalkerGetCurrentInputToken(a2, &v31, &v30);
  if (v13) {
    goto LABEL_60;
  }
  CFTypeRef v14 = v31;
  CFAllocatorRef v15 = CFGetAllocator(a1);
  uint64_t v13 = FigCSSFunctionParserNodeCreate(v15, &v29);
  if (v13) {
    goto LABEL_60;
  }
  uint64_t v13 = FigCSSFunctionParserNodeSetName((uint64_t)v29, v14);
  if (v13) {
    goto LABEL_60;
  }
  CFAllocatorRef v16 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v18 = FigSignalErrorAt();
LABEL_27:
    uint64_t v20 = v18;
LABEL_28:
    if (v29) {
      CFRelease(v29);
    }
    CFTypeRef v21 = 0;
    goto LABEL_47;
  }
  uint64_t v18 = FigCSSFunctionParserNodeSetValue((uint64_t)v29, Mutable);
  if (v18) {
    goto LABEL_27;
  }
  CFTypeRef v31 = 0;
  int v30 = 0;
  uint64_t v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v31, &v30);
  if (v18) {
    goto LABEL_27;
  }
  int v19 = v30;
  while ((v19 & 0xFFFFFFEF) != 1)
  {
    uint64_t v18 = FigCSSTokenWalkerReconsumeInputToken(a2);
    if (!v18)
    {
      uint64_t v18 = _figCSSParser_consume_a_component_value(a1, a2, &cf, &value);
      if (!v18)
      {
        CFArrayAppendValue(Mutable, value);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (value)
        {
          CFRelease(value);
          CMTimeValue value = 0;
        }
        CFTypeRef v31 = 0;
        int v30 = 0;
        uint64_t v18 = FigCSSTokenWalkerConsumeNextInputToken(a2, &v31, &v30);
        int v19 = v30;
        if (!v18) {
          continue;
        }
      }
    }
    goto LABEL_27;
  }
  uint64_t v20 = 0;
  CFTypeRef v21 = v29;
  CFTypeRef v29 = 0;
LABEL_47:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!v20)
  {
    uint64_t v20 = FigCSSComponentValueParserNodeSetFunctionNode((uint64_t)v24, v21);
    if (!v20) {
      goto LABEL_36;
    }
  }
LABEL_37:
  if (v26) {
    CFRelease(v26);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v20;
}

uint64_t _figCSSParser_util_serializeComponentValueNodeArray(const void *a1, const __CFArray *a2, __CFString **a3)
{
  if (!a1 || !a2 || !a3)
  {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v6, 0);
  if (CFArrayGetCount(a2) < 1)
  {
    CFMutableStringRef v9 = 0;
LABEL_73:
    uint64_t v18 = 0;
    *a3 = Mutable;
    goto LABEL_74;
  }
  CFIndex v8 = 0;
  CFMutableStringRef v9 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
    if (!ValueAtIndex) {
      break;
    }
    uint64_t v11 = ValueAtIndex;
    CFTypeID v12 = CFGetTypeID(ValueAtIndex);
    if (v12 != FigCSSParserNodeGetTypeID()) {
      break;
    }
    if (v9) {
      CFRelease(v9);
    }
    int v43 = 0;
    CFTypeRef v41 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v39 = 0;
    CFTypeRef v40 = 0;
    CFTypeRef v37 = 0;
    CFTypeRef v38 = 0;
    CFStringRef appendedString = 0;
    CFTypeRef v36 = 0;
    CFStringRef v33 = 0;
    CFStringRef v34 = 0;
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 != FigCSSParserNodeGetTypeID())
    {
      uint64_t v18 = FigSignalErrorAt();
      CFTypeRef v29 = 0;
      goto LABEL_39;
    }
    CFAllocatorRef v14 = CFGetAllocator(a1);
    CFMutableStringRef v9 = CFStringCreateMutable(v14, 0);
    int v43 = 0;
    uint64_t Type = FigCSSComponentValueParserNodeGetType((uint64_t)v11, &v43);
    if (Type) {
      goto LABEL_69;
    }
    if (v43 == 3)
    {
      int v32 = 0;
      uint64_t Type = FigCSSComponentValueParserNodeCopySimpleBlock((uint64_t)v11, &v36);
      if (Type) {
        goto LABEL_69;
      }
      uint64_t Type = FigCSSSimpleBlockParserNodeCopyAssociatedToken((uint64_t)v36, &v40);
      if (Type) {
        goto LABEL_69;
      }
      uint64_t Type = FigCSSTokenGetTokenType((uint64_t)v40, &v32);
      if (Type) {
        goto LABEL_69;
      }
      int v19 = (v32 - 16) > 4 ? 0 : dword_1949962C0[v32 - 16];
      CFAllocatorRef v24 = CFGetAllocator(a1);
      FigCSSSimpleTokenCreate((uint64_t)v24, v19, &v39);
      uint64_t Type = FigCSSSimpleBlockParserNodeCopyValue((uint64_t)v36, &v38);
      if (Type
        || (CFTypeRef v25 = v40,
            CFAllocatorRef v26 = CFGetAllocator(a1),
            uint64_t Type = FigCSSTokenCreateSerializationString(v26, v25, &appendedString),
            Type)
        || (uint64_t Type = _figCSSParser_util_serializeComponentValueNodeArray(a1, v38, &v34), Type))
      {
LABEL_69:
        uint64_t v18 = Type;
LABEL_70:
        CFTypeRef v29 = 0;
        goto LABEL_40;
      }
      CFTypeRef v27 = v39;
      CFAllocatorRef v28 = CFGetAllocator(a1);
      uint64_t v18 = FigCSSTokenCreateSerializationString(v28, v27, &v33);
      if (v18) {
        goto LABEL_70;
      }
      CFStringAppend(v9, appendedString);
      CFStringAppend(v9, v34);
      CFStringRef v23 = v33;
      CFAllocatorRef v22 = v9;
    }
    else
    {
      if (v43 != 2)
      {
        if (v43 == 1)
        {
          uint64_t Type = FigCSSComponentValueParserNodeCopyPreservedToken((uint64_t)v11, &cf);
          if (Type) {
            goto LABEL_69;
          }
          CFTypeRef v16 = cf;
          CFAllocatorRef v17 = CFGetAllocator(a1);
          uint64_t Type = FigCSSTokenCreateSerializationString(v17, v16, &appendedString);
          if (Type) {
            goto LABEL_69;
          }
          if (!appendedString)
          {
            CFMutableStringRef v30 = 0;
            uint64_t v18 = 0;
            goto LABEL_43;
          }
          CFStringAppend(v9, appendedString);
        }
        uint64_t v18 = 0;
        goto LABEL_38;
      }
      uint64_t Type = FigCSSComponentValueParserNodeCopyFunctionNode((uint64_t)v11, &v37);
      if (Type) {
        goto LABEL_69;
      }
      uint64_t Type = FigCSSFunctionParserNodeCopyName((uint64_t)v37, &v41);
      if (Type) {
        goto LABEL_69;
      }
      uint64_t Type = FigCSSFunctionParserNodeCopyValue((uint64_t)v37, &v38);
      if (Type) {
        goto LABEL_69;
      }
      CFTypeRef v20 = v41;
      CFAllocatorRef v21 = CFGetAllocator(a1);
      uint64_t Type = FigCSSTokenCreateSerializationString(v21, v20, &appendedString);
      if (Type) {
        goto LABEL_69;
      }
      uint64_t v18 = _figCSSParser_util_serializeComponentValueNodeArray(a1, v38, &v34);
      if (v18) {
        goto LABEL_70;
      }
      CFStringAppend(v9, appendedString);
      CFStringAppend(v9, v34);
      CFAllocatorRef v22 = v9;
      CFStringRef v23 = @"");
    }
    CFStringAppend(v22, v23);
LABEL_38:
    CFTypeRef v29 = v9;
LABEL_39:
    CFMutableStringRef v9 = 0;
LABEL_40:
    if (appendedString) {
      CFRelease(appendedString);
    }
    CFMutableStringRef v30 = v9;
    CFMutableStringRef v9 = v29;
LABEL_43:
    if (v34) {
      CFRelease(v34);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v30) {
      CFRelease(v30);
    }
    if (v37) {
      CFRelease(v37);
    }
    if (v41) {
      CFRelease(v41);
    }
    if (v36) {
      CFRelease(v36);
    }
    if (v40) {
      CFRelease(v40);
    }
    if (v39) {
      CFRelease(v39);
    }
    if (v33) {
      CFRelease(v33);
    }
    if (v38) {
      CFRelease(v38);
    }
    if (v18) {
      goto LABEL_78;
    }
    if (v9) {
      CFStringAppend(Mutable, v9);
    }
    if (++v8 >= CFArrayGetCount(a2)) {
      goto LABEL_73;
    }
  }
  uint64_t v18 = FigSignalErrorAt();
LABEL_78:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_74:
  if (v9) {
    CFRelease(v9);
  }
  return v18;
}

uint64_t _figCSSParser_util_convertComponentValueArrayToTokenArray(const void *a1, const __CFArray *a2, __CFArray **a3)
{
  CFTypeRef v21 = 0;
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v18 = 0;
  if (!a1 || !a2 || !a3)
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_37:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_38;
  }
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v8 = 0;
      while (1)
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
        uint64_t v16 = 0;
        Nodeuint64_t Type = FigCSSParserNodeGetNodeType((uint64_t)ValueAtIndex, (_DWORD *)&v16 + 1);
        if (NodeType) {
          goto LABEL_54;
        }
        if (HIDWORD(v16) != 4) {
          goto LABEL_53;
        }
        uint64_t Type = FigCSSComponentValueParserNodeGetType((uint64_t)ValueAtIndex, (int *)&v16);
        if (v16 == 2)
        {
          Nodeuint64_t Type = FigCSSComponentValueParserNodeCopyFunctionNode((uint64_t)ValueAtIndex, &v20);
          if (NodeType) {
            goto LABEL_54;
          }
          Nodeuint64_t Type = FigCSSFunctionParserNodeCopyName((uint64_t)v20, &cf);
          if (NodeType) {
            goto LABEL_54;
          }
          CFArrayAppendValue(Mutable, cf);
          Nodeuint64_t Type = FigCSSFunctionParserNodeCopyValue((uint64_t)v20, &v18);
          if (NodeType) {
            goto LABEL_54;
          }
          Nodeuint64_t Type = _figCSSParser_util_convertComponentValueArrayToTokenArray(a1, v18, &theArray);
          if (NodeType) {
            goto LABEL_54;
          }
          CFArrayRef v13 = theArray;
          if (theArray)
          {
            v23.length = CFArrayGetCount(theArray);
            v23.CFIndex location = 0;
            CFArrayAppendArray(Mutable, v13, v23);
          }
          CFAllocatorRef v14 = CFGetAllocator(a1);
          Nodeuint64_t Type = FigCSSSimpleTokenCreate((uint64_t)v14, 17, &v21);
          if (NodeType) {
            goto LABEL_54;
          }
          CFArrayAppendValue(Mutable, v21);
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          if (v21)
          {
            CFRelease(v21);
            CFTypeRef v21 = 0;
          }
          if (v20)
          {
            CFRelease(v20);
            CFTypeRef v20 = 0;
          }
          if (v18)
          {
            CFRelease(v18);
            CFTypeRef v18 = 0;
          }
          if (!theArray)
          {
LABEL_32:
            uint64_t v12 = 0;
            goto LABEL_33;
          }
          CFRelease(theArray);
          uint64_t v12 = 0;
          CFArrayRef theArray = 0;
        }
        else
        {
          uint64_t v12 = Type;
          if (v16 == 1)
          {
            Nodeuint64_t Type = FigCSSComponentValueParserNodeCopyPreservedToken((uint64_t)ValueAtIndex, &value);
            if (NodeType) {
              goto LABEL_54;
            }
            if (!value) {
              goto LABEL_32;
            }
            CFArrayAppendValue(Mutable, value);
            if (!value) {
              goto LABEL_32;
            }
            CFRelease(value);
            uint64_t v12 = 0;
            CMTimeValue value = 0;
          }
        }
LABEL_33:
        if (++v8 >= CFArrayGetCount(a2)) {
          goto LABEL_36;
        }
      }
    }
    uint64_t v12 = 0;
LABEL_36:
    *a3 = Mutable;
    goto LABEL_37;
  }
LABEL_53:
  Nodeuint64_t Type = FigSignalErrorAt();
LABEL_54:
  uint64_t v12 = NodeType;
LABEL_38:
  if (value)
  {
    CFRelease(value);
    CMTimeValue value = 0;
  }
  if (v21)
  {
    CFRelease(v21);
    CFTypeRef v21 = 0;
  }
  if (v20)
  {
    CFRelease(v20);
    CFTypeRef v20 = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v18)
  {
    CFRelease(v18);
    CFTypeRef v18 = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

uint64_t FigVideoRenderPipelineCreateWithFigImageQueueArray(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, int a5, CFArrayRef theArray, const __CFArray *a7, const __CFDictionary *a8, void *a9)
{
  if (theArray) {
    uint64_t Count = CFArrayGetCount(theArray);
  }
  else {
    uint64_t Count = 0;
  }
  CFArrayRef v91 = 0;
  CMTimeValue value = 0;
  CFArrayRef theArraya = 0;
  CFArrayRef v90 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a9 && Count > 0)
  {
    v102.CMTimeValue value = 0;
    FigRenderPipelineGetClassID();
    uint64_t v14 = CMDerivedObjectCreate();
    if (v14)
    {
      uint64_t v74 = v14;
      int v32 = 0;
      CFTypeRef v40 = 0;
    }
    else
    {
      CFAllocatorRef v15 = (const void *)v102.value;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(unsigned char *)(DerivedStorage + 136) = 1;
      uint64_t v17 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 72) = v17;
      if (v17)
      {
        *(unsigned char *)(DerivedStorage + 80) = 1;
        CFTypeRef v18 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
        if (a7)
        {
          CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a7);
          goto LABEL_16;
        }
        CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          CFMutableDictionaryRef MutableCopy = Mutable;
          CFAllocatorRef v22 = (const void *)*MEMORY[0x1E4F1D260];
          do
          {
            CFArrayAppendValue(MutableCopy, v22);
            --Count;
          }
          while (Count);
LABEL_16:
          CFAllocatorRef v82 = *v18;
          CFArrayRef Copy = CFArrayCreateCopy(*v18, theArray);
          *(void *)(DerivedStorage + 56) = Copy;
          if (Copy)
          {
            if (MutableCopy) {
              CFTypeRef v24 = CFRetain(MutableCopy);
            }
            else {
              CFTypeRef v24 = 0;
            }
            *(void *)(DerivedStorage + 64) = v24;
            uint64_t v25 = figVideoRenderPipelineCopyFigImageQueueAndOptionsArrayGroupedByVideoLayerID((uint64_t)v15, &v91, &v90, &theArraya);
            if (!v25)
            {
              CFTypeRef v81 = MutableCopy;
              CFArrayRef v26 = theArraya;
              if (theArraya) {
                uint64_t v27 = CFArrayGetCount(theArraya);
              }
              else {
                uint64_t v27 = 0;
              }
              CFArrayRef v28 = v91;
              if (v91) {
                CFIndex v29 = CFArrayGetCount(v91);
              }
              else {
                CFIndex v29 = 0;
              }
              if (v27 != v29 || ((v30 = v90) == 0 ? (CFIndex v31 = 0) : (CFIndex v31 = CFArrayGetCount(v90)), v27 != v31))
              {
                uint64_t v74 = FigSignalErrorAt();
                CFTypeRef v40 = 0;
                int v32 = 0;
LABEL_148:
                CFMutableDictionaryRef MutableCopy = v81;
LABEL_120:
                if (MutableCopy) {
                  CFRelease(MutableCopy);
                }
                goto LABEL_122;
              }
              int v32 = CFArrayCreateMutable(a1, v27, MEMORY[0x1E4F1D510]);
              if (!v32)
              {
                uint64_t v37 = FigSignalErrorAt();
LABEL_147:
                uint64_t v74 = v37;
                CFTypeRef v40 = 0;
                goto LABEL_148;
              }
              CFDictionaryRef theDict = a8;
              CFArrayRef v33 = v26;
              if (v27 >= 1)
              {
                CFIndex v34 = 0;
                do
                {
                  CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v28, v34);
                  CFArrayRef v36 = (const __CFArray *)CFArrayGetValueAtIndex(v30, v34);
                  uint64_t v37 = FigImageQueueCreateForCacheAndFanOut((int)a1, ValueAtIndex, v36, (CFTypeRef *)&value);
                  if (v37) {
                    goto LABEL_147;
                  }
                  CFArrayAppendValue(v32, value);
                  if (value)
                  {
                    CFRelease(value);
                    CMTimeValue value = 0;
                  }
                }
                while (v27 != ++v34);
              }
              *(void *)(DerivedStorage + 40) = v32;
              *(void *)(DerivedStorage + 48) = v33;
              CFArrayRef theArraya = 0;
              long long v86 = 0u;
              long long v87 = 0u;
              CFTypeRef v88 = 0;
              CFTypeRef v38 = (const void **)MEMORY[0x1E4F1CFD0];
              if (theDict)
              {
                CFAllocatorRef v39 = v82;
                if (CFDictionaryGetValue(theDict, @"ShouldRotateAndScale") == *v38)
                {
                  CFTypeRef v41 = (const void *)FigTransformUtilityCreate((uint64_t)a1, a3);
                  *(void *)(DerivedStorage + 128) = v41;
                  *(void *)&long long v86 = 0;
                  *((void *)&v86 + 1) = CFRetain(v41);
                  CFTypeRef v40 = &v86;
                  *((void *)&v87 + 1) = FigTransformUtilityRelease;
                  CFTypeRef v88 = FigTransformUtilityGenerateReplacementImageBufferAsync;
                }
                else
                {
                  CFTypeRef v40 = 0;
                }
              }
              else
              {
                CFTypeRef v40 = 0;
                CFAllocatorRef v39 = v82;
              }
              memset(&v102, 0, sizeof(v102));
              CMTimeMake(&v102, 3, 30);
              memset(&v101, 0, sizeof(v101));
              CMTimeMake(&v101, 5, 30);
              __int16 v100 = 0;
              uint64_t v42 = CMBaseObjectGetDerivedStorage();
              CFArrayRef v98 = 0;
              long long v99 = 0;
              __int16 v97 = 0;
              __int16 v96 = 0;
              char v95 = 0;
              if (theDict)
              {
                CFTypeRef v77 = (const opaqueCMFormatDescription *)CFDictionaryGetValue(theDict, @"FormatDescription");
                FigCFDictionaryGetCMTimeIfPresent();
                FigCFDictionaryGetCMTimeIfPresent();
                int v43 = CFDictionaryGetValue(theDict, @"SharePixelBufferPool");
                CMTimeEpoch v44 = CFDictionaryGetValue(theDict, @"AllowClientProcessDecode");
                long long v76 = (void *)CFDictionaryGetValue(theDict, @"LoggingID");
                FigCFDictionaryGetBooleanIfPresent();
                if (FigCFDictionaryGetBooleanIfPresent()) {
                  HIBYTE(v100) = (_BYTE)v100 == 0;
                }
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetInt32IfPresent();
                FigCFDictionaryGetBooleanIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
              }
              else
              {
                int v43 = 0;
                CMTimeEpoch v44 = 0;
                long long v76 = 0;
                CFTypeRef v77 = 0;
              }
              CFMutableArrayRef v45 = *(const void **)(v42 + 40);
              if (v45) {
                CFArrayRef theDicta = (const __CFArray *)CFRetain(v45);
              }
              else {
                CFArrayRef theDicta = 0;
              }
              os_log_type_t v46 = *(const void **)(v42 + 48);
              if (v46) {
                CFArrayRef v78 = (const __CFArray *)CFRetain(v46);
              }
              else {
                CFArrayRef v78 = 0;
              }
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.version = 1;
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.refcon = 0;
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDecodeTimeStamp = (CMBufferGetTimeCallback)vsbufGetDecodeTimeStamp;
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getPresentationTimeStamp = (CMBufferGetTimeCallback)vsbufGetPresentationTimeStamp;
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDuration = (CMBufferGetTimeCallback)vsbufGetDuration;
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.isDataReady = (CMBufferGetBooleanCallback)vsbufDataIsReady;
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.compare = 0;
              CFStringRef v47 = (const __CFString *)*MEMORY[0x1E4F1F3A8];
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.dataBecameReadyNotification = (CFStringRef)*MEMORY[0x1E4F1F3A8];
              gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getSize = (CMBufferGetSizeCallback)vsbufGetSampleSize;
              uint64_t Asynchronous = CMBufferQueueCreate(v39, 0, &gFigBufferQueueCallbacksThatIgnoreCatchupFrames, (CMBufferQueueRef *)(v42 + 8));
              if (!Asynchronous)
              {
                if (!v95) {
                  goto LABEL_59;
                }
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.version = 1;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.refcon = 0;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDecodeTimeStamp = (CMBufferGetTimeCallback)vsbufGetDecodeTimeStamp;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getPresentationTimeStamp = (CMBufferGetTimeCallback)vsbufGetPresentationTimeStamp;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getDuration = (CMBufferGetTimeCallback)vsbufGetDuration;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.isDataReady = (CMBufferGetBooleanCallback)vsbufDataIsReady;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.compare = 0;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.dataBecameReadyNotification = v47;
                gFigBufferQueueCallbacksThatIgnoreCatchupFrames.getSize = (CMBufferGetSizeCallback)vsbufGetSampleSize;
                uint64_t Asynchronous = CMBufferQueueCreate(v39, 0, &gFigBufferQueueCallbacksThatIgnoreCatchupFrames, (CMBufferQueueRef *)(v42 + 24));
                if (!Asynchronous)
                {
                  uint64_t v49 = *(void **)(v42 + 8);
                  CMTime v50 = *(const void **)(v42 + 24);
                  CMTime v94 = v101;
                  CMTime v93 = v102;
                  uint64_t Asynchronous = FigSampleAttachmentCollectorCreateAsynchronous(v39, 0, v49, 0, v50, (uint64_t)&v94, (uint64_t)&v93, 0, (CFTypeRef *)(v42 + 32));
                  if (!Asynchronous)
                  {
LABEL_59:
                    *(void *)(v42 + 104) = a3;
                    if (a3) {
                      CFRetain(a3);
                    }
                    *(void *)(v42 + 112) = a4;
                    if (a4) {
                      CFRetain(a4);
                    }
                    figVideoRenderPipelineCopyMaxFanOutDisplayLayerSize((uint64_t)v15, &v99);
                    for (CFIndex i = 0; ; ++i)
                    {
                      CFArrayRef v52 = *(const __CFArray **)(v42 + 40);
                      if (v52) {
                        CFArrayRef v52 = (const __CFArray *)CFArrayGetCount(v52);
                      }
                      if (i >= (uint64_t)v52) {
                        break;
                      }
                      CFArrayGetValueAtIndex(*(CFArrayRef *)(v42 + 40), i);
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigNotificationCenterAddWeakListeners();
                    }
                    dispatch_queue_t v53 = dispatch_queue_create("com.apple.coremedia.svrp.notificationQueue", 0);
                    *(void *)(v42 + 192) = v53;
                    if (v53)
                    {
                      uint64_t v54 = FigSimpleMutexCreate();
                      *(void *)(v42 + 152) = v54;
                      if (v54)
                      {
                        CFAllocatorRef v55 = CFGetAllocator(v15);
                        CFMutableArrayRef v56 = CFArrayCreateMutable(v55, 0, MEMORY[0x1E4F1D510]);
                        *(void *)(v42 + 184) = v56;
                        if (v56)
                        {
                          *(unsigned char *)(v42 + 160) = 0;
                          *(unsigned char *)(v42 + 176) = 0;
                          figVideoRenderPipelineCopyVideoImageQueueArray((uint64_t)v15, &v98, 0);
                          for (CFIndex j = 0; ; ++j)
                          {
                            CFArrayRef v58 = v98;
                            if (v98) {
                              CFArrayRef v58 = (const __CFArray *)CFArrayGetCount(v98);
                            }
                            if (j >= (uint64_t)v58) {
                              break;
                            }
                            uint64_t v59 = CFArrayGetValueAtIndex(v98, j);
                            videopipelineAddListenersOnImageQueue((uint64_t)v15, (uint64_t)v59, j == 0);
                          }
                          int v60 = CFDictionaryCreateMutable(v39, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                          __int16 v61 = v60;
                          if (v60)
                          {
                            if (v43) {
                              CFDictionaryAddValue(v60, @"SharePixelBufferPool", v43);
                            }
                            if (v44) {
                              CFDictionaryAddValue(v61, @"AllowClientProcessDecode", v44);
                            }
                            CFArrayRef v62 = theDicta;
                            if (HIBYTE(v100)) {
                              CFDictionarySetValue(v61, @"RealTime", (const void *)*MEMORY[0x1E4F1CFC8]);
                            }
                            if (HIBYTE(v97)) {
                              CFDictionarySetValue(v61, @"MaximizePowerEfficiency", *v38);
                            }
                            if ((_BYTE)v97) {
                              CFDictionarySetValue(v61, @"InhibitPixelFormatConversion", *v38);
                            }
                            if (HIBYTE(v96)) {
                              CFDictionarySetValue(v61, @"InhibitCompressedBufferUse", *v38);
                            }
                            if (*(_DWORD *)(v42 + 4)) {
                              FigCFDictionarySetInt32();
                            }
                            if (v76) {
                              CFDictionarySetValue(v61, @"LoggingIdentifier", v76);
                            }
                            if ((_BYTE)v96) {
                              CFDictionarySetValue(v61, @"DisableAsyncDecompression", *v38);
                            }
                            videopipelineUpdateVideoPlaybackStateForClient();
                            uint64_t v63 = 24;
                            if (!v95) {
                              uint64_t v63 = 8;
                            }
                            uint64_t v64 = *(const void **)(v42 + v63);
                            long long v65 = *(const void **)(v42 + 104);
                            long long v66 = *(const void **)(v42 + 112);
                            CFTypeRef v67 = (uint64_t *)(v42 + 16);
                            CMTime v94 = v101;
                            CMTime v93 = v102;
                            CFArrayRef v68 = v78;
                            uint64_t started = VMC2CreateWithQueues2(v82, v77, a2, v65, v66, v64, (uint64_t)v40, theDicta, v78, (uint64_t)&v94, (uint64_t)&v93, 0, 0, v61, (uint64_t *)(v42 + 16));
                            if (started
                              || (uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification(), started))
                            {
                              uint64_t v74 = started;
                              CFTypeRef v40 = 0;
                            }
                            else
                            {
                              if (v99) {
                                VMC2SetProperty(*v67, @"DisplayLayerSize", v99);
                              }
                              CMNotificationCenterGetDefaultLocalCenter();
                              FigNotificationCenterAddWeakListeners();
                              videopipelineConfigureAV1FilmGrainModeAsAppropriateForImageQueues((uint64_t)v15);
                              VMC2Go(*v67);
                              if (v95)
                              {
                                uint64_t v70 = *(void *)(v42 + 32);
                                uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
                                uint64_t v72 = v71 ? v71 : 0;
                                CFStringRef v73 = *(void (**)(uint64_t))(v72 + 24);
                                if (v73) {
                                  v73(v70);
                                }
                              }
                              CFTypeRef v40 = 0;
                              uint64_t v74 = 0;
                            }
LABEL_108:
                            if (v99) {
                              CFRelease(v99);
                            }
                            if (v61) {
                              CFRelease(v61);
                            }
                            if (v62) {
                              CFRelease(v62);
                            }
                            CFMutableDictionaryRef MutableCopy = v81;
                            if (v68) {
                              CFRelease(v68);
                            }
                            if (v98) {
                              CFRelease(v98);
                            }
                            if (!v74)
                            {
                              int v32 = 0;
                              *a9 = v15;
                              goto LABEL_120;
                            }
                            goto LABEL_145;
                          }
                          uint64_t v74 = FigSignalErrorAt();
LABEL_138:
                          CFArrayRef v68 = v78;
                          CFArrayRef v62 = theDicta;
                          goto LABEL_108;
                        }
                      }
                    }
                    uint64_t Asynchronous = FigSignalErrorAt();
                  }
                }
              }
              uint64_t v74 = Asynchronous;
              __int16 v61 = 0;
              goto LABEL_138;
            }
          }
          else
          {
            uint64_t v25 = FigSignalErrorAt();
          }
          uint64_t v74 = v25;
          CFTypeRef v40 = 0;
LABEL_145:
          int v32 = 0;
          goto LABEL_120;
        }
        uint64_t v74 = FigSignalErrorAt();
      }
      else
      {
        uint64_t v74 = 0;
      }
      int v32 = 0;
      CFTypeRef v40 = 0;
    }
LABEL_122:
    if (value) {
      CFRelease(value);
    }
    if (v91) {
      CFRelease(v91);
    }
    if (v90) {
      CFRelease(v90);
    }
    if (theArraya) {
      CFRelease(theArraya);
    }
    if (v32) {
      CFRelease(v32);
    }
    if (v40)
    {
      CMTimeRange v75 = (void (*)(void))*((void *)v40 + 3);
      if (v75) {
        v75(*((void *)v40 + 1));
      }
    }
    return v74;
  }

  return FigSignalErrorAt();
}

uint64_t figVideoRenderPipelineCopyFigImageQueueAndOptionsArrayGroupedByVideoLayerID(uint64_t a1, __CFArray **a2, __CFArray **a3, __CFArray **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 56);
  if (v8)
  {
    if (*(void *)(DerivedStorage + 64))
    {
      CFIndex Count = CFArrayGetCount(v8);
      if (Count == CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 64)))
      {
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (theArray)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
          if (!Mutable)
          {
            uint64_t v51 = FigSignalErrorAt();
            CFRelease(theArray);
            return v51;
          }
          uint64_t v12 = Mutable;
          CFArrayRef v52 = a2;
          dispatch_queue_t v53 = a3;
          uint64_t v54 = a4;
          if (Count >= 1)
          {
            CFIndex v13 = 0;
            int v14 = 0;
            int v15 = 0;
            uint64_t v16 = (const void *)*MEMORY[0x1E4F1D260];
            do
            {
              CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 64), v13);
              if (ValueAtIndex == v16) {
                goto LABEL_16;
              }
              if (!ValueAtIndex || (CFTypeID v18 = CFGetTypeID(ValueAtIndex), v18 != CFDictionaryGetTypeID()))
              {
LABEL_29:
                uint64_t v30 = FigSignalErrorAt();
                CFMutableArrayRef v31 = 0;
                CFMutableArrayRef v32 = 0;
                goto LABEL_47;
              }
              if (!FigCFDictionaryGetInt32IfPresent())
              {
LABEL_16:
                if (v15) {
                  goto LABEL_29;
                }
                CFArrayAppendValue(theArray, v16);
                if (!FigCFArrayContainsValue()) {
                  CFArrayAppendValue(v12, v16);
                }
                int v15 = 0;
                int v14 = 1;
              }
              else
              {
                if (v14) {
                  goto LABEL_29;
                }
                FigCFArrayAppendInt32();
                if (!FigCFArrayContainsInt32()) {
                  FigCFArrayAppendInt32();
                }
                int v14 = 0;
                int v15 = 1;
              }
              ++v13;
            }
            while (Count != v13);
          }
          int v19 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          CFTypeRef v20 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
          CFTypeRef v21 = CFArrayCreateMutable(v10, 0, v19);
          CFMutableArrayRef v22 = CFArrayCreateMutable(v10, 0, v19);
          CFRange v23 = v22;
          if (!v20 || !v21 || !v22)
          {
            uint64_t v30 = FigSignalErrorAt();
            CFMutableArrayRef v31 = 0;
            CFMutableArrayRef v32 = 0;
            goto LABEL_48;
          }
          CFMutableArrayRef v56 = v20;
          CFIndex v24 = CFArrayGetCount(v12);
          if (v24 == 1)
          {
            CFArrayAppendValue(v20, *(const void **)(DerivedStorage + 56));
            CFArrayAppendValue(v21, *(const void **)(DerivedStorage + 64));
            uint64_t v25 = CFArrayGetValueAtIndex(v12, 0);
            if (v25)
            {
              CFArrayRef v26 = v25;
              CFTypeID v27 = CFGetTypeID(v25);
              if (v27 == CFNumberGetTypeID())
              {
                CFArrayRef v28 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v28)
                {
                  CFIndex v29 = v28;
                  CFDictionarySetValue(v28, @"DemuxLayerID", v26);
                  CFArrayAppendValue(v23, v29);
                  CFRelease(v29);
                  goto LABEL_46;
                }
                goto LABEL_60;
              }
            }
            CFArrayAppendValue(v23, (const void *)*MEMORY[0x1E4F1D260]);
          }
          else
          {
            CFIndex v33 = v24;
            CFAllocatorRef v55 = v21;
            if (v24 >= 1)
            {
              CFIndex v34 = 0;
              CFTypeRef v35 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
              while (1)
              {
                CFMutableArrayRef v32 = CFArrayCreateMutable(v10, 0, v35);
                CFMutableArrayRef v36 = CFArrayCreateMutable(v10, 0, v35);
                CFMutableArrayRef v31 = v36;
                if (v32) {
                  BOOL v37 = v36 == 0;
                }
                else {
                  BOOL v37 = 1;
                }
                if (v37)
                {
                  uint64_t v30 = FigSignalErrorAt();
                  goto LABEL_63;
                }
                CFArrayAppendValue(v56, v32);
                CFArrayAppendValue(v55, v31);
                CFRelease(v32);
                CFRelease(v31);
                CFTypeRef v38 = CFArrayGetValueAtIndex(v12, v34);
                if (!v38 || (CFAllocatorRef v39 = v38, v40 = CFGetTypeID(v38), v40 != CFNumberGetTypeID()))
                {
                  uint64_t v30 = FigSignalErrorAt();
                  CFMutableArrayRef v31 = 0;
                  CFMutableArrayRef v32 = 0;
                  goto LABEL_63;
                }
                CFTypeRef v41 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFMutableArrayRef v32 = v41;
                if (!v41) {
                  break;
                }
                CFDictionarySetValue(v41, @"DemuxLayerID", v39);
                CFArrayAppendValue(v23, v32);
                CFRelease(v32);
                if (v33 == ++v34) {
                  goto LABEL_40;
                }
              }
              uint64_t v30 = FigSignalErrorAt();
              CFMutableArrayRef v31 = 0;
LABEL_63:
              CFTypeRef v21 = v55;
              goto LABEL_64;
            }
LABEL_40:
            CFTypeRef v21 = v55;
            if (Count >= 1)
            {
              CFIndex v42 = 0;
              while (1)
              {
                int v43 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), v42);
                CMTimeEpoch v44 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 64), v42);
                CFMutableArrayRef v45 = CFArrayGetValueAtIndex(theArray, v42);
                v59.CFIndex location = 0;
                v59.length = v33;
                FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v12, v59, v45);
                if (FirstIndexOfValue == -1) {
                  break;
                }
                CFIndex v47 = FirstIndexOfValue;
                CFAllocatorRef v48 = (__CFArray *)CFArrayGetValueAtIndex(v56, FirstIndexOfValue);
                CFArrayAppendValue(v48, v43);
                uint64_t v49 = (__CFArray *)CFArrayGetValueAtIndex(v55, v47);
                CFArrayAppendValue(v49, v44);
                if (Count == ++v42) {
                  goto LABEL_46;
                }
              }
LABEL_60:
              uint64_t v30 = FigSignalErrorAt();
              CFMutableArrayRef v31 = 0;
              CFMutableArrayRef v32 = 0;
LABEL_64:
              CFTypeRef v20 = v56;
LABEL_48:
              CFRelease(theArray);
              CFRelease(v12);
              if (v20) {
                CFRelease(v20);
              }
              if (v21) {
                CFRelease(v21);
              }
              if (v23) {
                CFRelease(v23);
              }
              if (v32) {
                CFRelease(v32);
              }
              if (v31) {
                CFRelease(v31);
              }
              return v30;
            }
          }
LABEL_46:
          uint64_t v30 = 0;
          CFMutableArrayRef v31 = 0;
          CFMutableArrayRef v32 = 0;
          OpaqueCMTimebase *v52 = v56;
          _OWORD *v53 = v21;
          *uint64_t v54 = v23;
LABEL_47:
          CFRange v23 = 0;
          CFTypeRef v21 = 0;
          CFTypeRef v20 = 0;
          goto LABEL_48;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVideoRenderPipelineCreateWithVisualContext(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, void *a7, const __CFDictionary *a8, void *a9)
{
  values = 0;
  CFIndex v33 = a7;
  uint64_t v16 = FigImageQueueCreateForCoreVideo(0, &values);
  if (v16) {
    goto LABEL_25;
  }
  if (a7)
  {
    uint64_t v17 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v17 == CFDictionaryGetValue((CFDictionaryRef)a7, @"LimitImageQueueCapacityToOneFrame"))
    {
      uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(values);
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v29 = v28 ? v28 : 0;
      CFMutableArrayRef v31 = *(void (**)(uint64_t, __CFString *, const void *))(v29 + 56);
      if (v31) {
        v31(FigBaseObject, @"FigImageQueueProperty_LimitCapacityToOneFrame", v17);
      }
    }
  }
  CFTypeID v18 = values;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  CFTypeRef v21 = *(uint64_t (**)(void *, uint64_t, void))(v20 + 8);
  if (!v21)
  {
    uint64_t v26 = 4294954514;
    goto LABEL_19;
  }
  uint64_t v16 = v21(v18, a6, 0);
  if (v16)
  {
LABEL_25:
    uint64_t v26 = v16;
    goto LABEL_19;
  }
  CFArrayRef v23 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!a7)
  {
    uint64_t v26 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, a3, a4, v22, v23, 0, a8, a9);
    if (!v23) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  CFArrayRef v24 = CFArrayCreate(a1, (const void **)&v33, 1, MEMORY[0x1E4F1D510]);
  uint64_t v26 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, a3, a4, v25, v23, v24, a8, a9);
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
LABEL_18:
  }
    CFRelease(v23);
LABEL_19:
  if (values) {
    CFRelease(values);
  }
  return v26;
}

uint64_t FigVideoRenderPipelineCreateWithVisualContextGroup(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, int a5, CFArrayRef theArray, const __CFArray *a7, uint64_t a8, const __CFDictionary *a9, void *a10)
{
  CFTypeID v40 = 0;
  if (theArray && (Count = CFArrayGetCount(theArray), Count > 0) && a7 && (CFIndex v18 = Count, Count == CFArrayGetCount(a7)))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, v18, MEMORY[0x1E4F1D510]);
    if (Mutable && (CFMutableArrayRef v20 = CFArrayCreateMutable(a1, v18, MEMORY[0x1E4F1D510])) != 0)
    {
      CFMutableArrayRef v36 = a3;
      BOOL v37 = a4;
      CFTypeRef v38 = v20;
      CFArrayRef theArraya = Mutable;
      CFIndex v21 = 0;
      while (1)
      {
        uint64_t TagsWithCategory = FigImageQueueCreateForCoreVideo(0, &v40);
        if (TagsWithCategory) {
          goto LABEL_36;
        }
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v21);
        CFArrayRef v24 = v40;
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        CFTypeID v27 = *(uint64_t (**)(const void *, const void *, void))(v26 + 8);
        if (!v27)
        {
          uint64_t v34 = 4294954514;
          goto LABEL_26;
        }
        uint64_t TagsWithCategory = v27(v24, ValueAtIndex, 0);
        if (TagsWithCategory) {
          goto LABEL_36;
        }
        CFArrayAppendValue(theArraya, v40);
        CFArrayGetValueAtIndex(a7, v21);
        uint64_t TagsWithCategory = FigTagCollectionGetTagsWithCategory();
        if (TagsWithCategory) {
          goto LABEL_36;
        }
        FigTagGetSInt64Value();
        uint64_t SInt64 = FigCFNumberCreateSInt64();
        if (!SInt64)
        {
          uint64_t TagsWithCategory = FigSignalErrorAt();
LABEL_36:
          uint64_t v34 = TagsWithCategory;
          goto LABEL_26;
        }
        uint64_t v29 = (const void *)SInt64;
        uint64_t v30 = a8
            ? (__CFDictionary *)FigCFDictionaryCreateMutableCopy()
            : CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFMutableArrayRef v31 = v30;
        if (!v30) {
          break;
        }
        CFDictionarySetValue(v30, @"DemuxLayerID", v29);
        CFArrayAppendValue(v38, v31);
        CFRelease(v29);
        if (v40)
        {
          CFRelease(v40);
          CFTypeID v40 = 0;
        }
        CFRelease(v31);
        if (v18 == ++v21)
        {
          CFIndex v33 = v38;
          CFMutableArrayRef Mutable = theArraya;
          uint64_t v34 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, v36, v37, v32, theArraya, v38, a9, a10);
          goto LABEL_28;
        }
      }
      uint64_t v34 = FigSignalErrorAt();
      CFRelease(v29);
LABEL_26:
      CFIndex v33 = v38;
      CFMutableArrayRef Mutable = theArraya;
    }
    else
    {
      uint64_t v34 = FigSignalErrorAt();
      CFIndex v33 = 0;
    }
  }
  else
  {
    uint64_t v34 = FigSignalErrorAt();
    CFIndex v33 = 0;
    CFMutableArrayRef Mutable = 0;
  }
LABEL_28:
  if (v40) {
    CFRelease(v40);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v34;
}

__CFString *figVideoRenderPipelineCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoRenderPipeline %p: ", a1);
  CFStringAppendFormat(Mutable, 0, @"videoCompressedFrameQueue %@, videoMediaConverter %@, videoImageQueueArray %@, videoImageQueueOptionsArray %@, destinationPixelBufferAttributes %@, pixelTransferProperties %@, timebase %@", DerivedStorage[1], DerivedStorage[2], DerivedStorage[7], DerivedStorage[8], DerivedStorage[13], DerivedStorage[14], DerivedStorage[15]);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

void figVideoRenderPipelineCopyVideoImageQueueArray(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[9]);
  if (a2)
  {
    CFTypeRef v6 = (CFTypeRef)DerivedStorage[7];
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    *a2 = v6;
  }
  if (a3)
  {
    CFTypeRef v7 = (CFTypeRef)DerivedStorage[8];
    if (v7) {
      CFTypeRef v7 = CFRetain(v7);
    }
    *a3 = v7;
  }

  JUMPOUT(0x19970E930);
}

uint64_t videopipelineRemoveListenersOnImageQueue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListeners();
}

uint64_t videopipelineDecodeError()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineRanDry()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineMarkerBufferConsumed()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineSegmentFinished()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineHandleCompletedDecodeForPrerollNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && (v7 = DerivedStorage, CFTypeID v8 = CFGetTypeID(a5), v8 == CFDictionaryGetTypeID()) && FigCFDictionaryGetValue())
  {
    if (dword_1E9350E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E910](*(void *)(v7 + 152));
    if (FigCFEqual())
    {
      *(unsigned char *)(v7 + 176) = 0;
      CMBaseObjectGetDerivedStorage();
      if (figVideoRenderPipelineHasCompletedAllPreparationForPrerollTasks())
      {
        if (dword_1E9350E18)
        {
          CFAllocatorRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested();
      }
      else if (dword_1E9350E18)
      {
        uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return MEMORY[0x19970E930](*(void *)(v7 + 152));
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videopipelineLostDecoderState()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

BOOL figVideoRenderPipelineHasCompletedAllPreparationForPrerollTasks()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return !*(unsigned char *)(DerivedStorage + 176) && CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184)) == 0;
}

void figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 160))
  {
    CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigRenderPipelineNotificationParameter_RequestID, (const void **)(DerivedStorage + 168), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (dword_1E9350E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v1);
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(v3 + 160) = 0;
  uint64_t v4 = *(const void **)(v3 + 168);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v3 + 168) = 0;
  }
  *(unsigned char *)(v3 + 176) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 184));
}

uint64_t videopipelineFirstImageEnqueued()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineImageReleased()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineHandleImageQueueCompletedRendererPreparationForPrerollNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && (v7 = DerivedStorage, CFTypeID v8 = CFGetTypeID(a5), v8 == CFDictionaryGetTypeID()) && FigCFDictionaryGetValue())
  {
    if (dword_1E9350E18)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E910](*(void *)(v7 + 152));
    if (FigCFEqual())
    {
      FigCFArrayRemoveLastElementOfValue();
      CFArrayRef v10 = *(const __CFArray **)(v7 + 184);
      if (!v10 || !CFArrayGetCount(v10))
      {
        CMBaseObjectGetDerivedStorage();
        if (figVideoRenderPipelineHasCompletedAllPreparationForPrerollTasks())
        {
          if (dword_1E9350E18)
          {
            uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested();
        }
        else if (dword_1E9350E18)
        {
          uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    return MEMORY[0x19970E930](*(void *)(v7 + 152));
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videopipelineDisplaySizeChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFBoolean *a5)
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (result)
  {
    return VMC2SetProperty(result, @"DisplayLayerSize", a5);
  }
  return result;
}

void videopipelineUpdateVideoPlaybackStateForClient()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  CFArrayRef v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  CFDictionaryRef v1 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  if (!v1 || CMTimebaseGetRate(v1) == 0.0)
  {
    BOOL v3 = 0;
    *(unsigned char *)(DerivedStorage + 137) = 0;
    int v2 = *(_DWORD *)(DerivedStorage + 4);
    if (v2) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 137) = 1;
    int v2 = *(_DWORD *)(DerivedStorage + 4);
    BOOL v3 = v2 != 0;
    if (v2) {
      goto LABEL_7;
    }
  }
  int v2 = *(_DWORD *)(DerivedStorage + 140);
LABEL_7:
  if (sVRPPowerLogOnce != -1) {
    dispatch_once(&sVRPPowerLogOnce, &__block_literal_global_16);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videopipelineUpdateVideoPlaybackStateForClient_block_invoke_2;
  block[3] = &unk_1E5794688;
  BOOL v8 = v3;
  int v7 = v2;
  block[4] = &v9;
  void block[5] = DerivedStorage;
  dispatch_sync((dispatch_queue_t)sVRPPowerLogQueue, block);
  if (v10[3])
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFAllocatorRef v5 = Mutable;
      CFDictionarySetValue(Mutable, @"State", (const void *)v10[3]);
      FigCFDictionarySetFloat32();
      FigPowerLogRegisterEvent();
      CFRelease(v5);
      *(_DWORD *)(DerivedStorage + 140) = *(_DWORD *)(DerivedStorage + 4);
    }
  }
  _Block_object_dispose(&v9, 8);
}

CFMutableBagRef __videopipelineUpdateVideoPlaybackStateForClient_block_invoke()
{
  sVRPPowerLoguint64_t Queue = (uint64_t)dispatch_queue_create("com.apple.coremedia.videorenderpipeline.powerlog", 0);
  CFMutableBagRef result = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  sVRPBagOfClientPIDsWithPlayingRenderPipelines = (uint64_t)result;
  return result;
}

void __videopipelineUpdateVideoPlaybackStateForClient_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 144))
  {
    if (!*(unsigned char *)(a1 + 52))
    {
      *(unsigned char *)(v2 + 144) = 0;
      if (MEMORY[0x1997078E0](sVRPBagOfClientPIDsWithPlayingRenderPipelines, *(int *)(a1 + 48)) == 1) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = @"paused";
      }
      CFBagRemoveValue((CFMutableBagRef)sVRPBagOfClientPIDsWithPlayingRenderPipelines, (const void *)*(int *)(a1 + 48));
    }
  }
  else if (*(unsigned char *)(a1 + 52))
  {
    *(unsigned char *)(v2 + 144) = *(unsigned char *)(a1 + 52);
    if (!MEMORY[0x1997078E0](sVRPBagOfClientPIDsWithPlayingRenderPipelines, *(int *)(a1 + 48))) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = @"playing";
    }
    CFBagAddValue((CFMutableBagRef)sVRPBagOfClientPIDsWithPlayingRenderPipelines, (const void *)*(int *)(a1 + 48));
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    JUMPOUT(0x1997078E0);
  }
}

uint64_t videopipelineCopyPerformanceDictionary(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v29, 0, sizeof(v29));
  CFArrayRef theArray = 0;
  figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
  uint64_t v3 = *(void *)(DerivedStorage + 16);
  if (v3) {
    uint64_t v4 = VMC2CopyPerformanceDictionary(v3, (__CFDictionary **)v29) == 0;
  }
  else {
    uint64_t v4 = 0;
  }
  CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 40);
  if (v5) {
    CFIndex Count = CFArrayGetCount(v5);
  }
  else {
    CFIndex Count = 0;
  }
  if (theArray) {
    BOOL v7 = CFArrayGetCount(theArray) > 0;
  }
  else {
    BOOL v7 = 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v7 || Count >= 1)
  {
    keys = @"ImageQueuePerformanceArray";
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
    CFIndex v10 = 0;
    values = Mutable;
    while (1)
    {
      CFIndex v11 = (CFIndex)theArray;
      if (theArray) {
        CFIndex v11 = CFArrayGetCount(theArray);
      }
      if (v11 <= v10) {
        break;
      }
      CMTimeValue value = 0;
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      int v15 = *(unsigned int (**)(const void *, void **))(v14 + 72);
      if (v15 && !v15(ValueAtIndex, &value)) {
        CFArrayAppendValue(Mutable, value);
      }
      if (value) {
        CFRelease(value);
      }
      ++v10;
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CMTimeValue value = 0;
        uint64_t v17 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), i);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        CFMutableArrayRef v20 = *(unsigned int (**)(const void *, void **))(v19 + 72);
        if (v20 && !v20(v17, &value)) {
          CFArrayAppendValue(Mutable, value);
        }
        if (value) {
          CFRelease(value);
        }
      }
    }
    *(void *)((unint64_t)v29 | (8 * v4++)) = CFDictionaryCreate(v8, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (values) {
      CFRelease(values);
    }
  }
  uint64_t v21 = FigCFCreateCombinedDictionary();
  if (theArray) {
    CFRelease(theArray);
  }
  if (v4 >= 1)
  {
    int v22 = (const void **)v29;
    do
    {
      CFArrayRef v23 = *v22++;
      CFRelease(v23);
      --v4;
    }
    while (v4);
  }
  return v21;
}

uint64_t FigImageQueueCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFIndex v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(FigBaseObject, a2, a3, a4);
}

uint64_t FigSampleAttachmentCollectorSetDirection(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  if (v9)
  {
    return v9(a1, a2);
  }
  return result;
}

uint64_t FigSampleAttachmentCollectorStop(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 32);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigSampleAttachmentCollectorGo(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t figVideoRenderPipelineUpdateImageQueues(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFArrayRef v56 = 0;
  CFTypeRef v53 = 0;
  CFTypeRef v54 = 0;
  CFArrayRef theArray = 0;
  CFArrayRef v52 = 0;
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, &v56);
  if (!theArray || (CFIndex v6 = CFArrayGetCount(theArray), v6 < 1))
  {
    CFIndex v11 = 0;
    uint64_t v17 = 0;
    goto LABEL_64;
  }
  CFIndex v7 = v6;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
  if (Count < 1)
  {
    CFIndex v11 = 0;
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable || (CFMutableArrayRef v10 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510])) == 0)
    {
      uint64_t v17 = FigSignalErrorAt();
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 152));
      CFIndex v11 = 0;
      goto LABEL_62;
    }
    CFIndex v11 = v10;
    CFIndex v12 = 0;
    uint64_t v13 = (const void *)*MEMORY[0x1E4F1D260];
    do
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
      v57.CFIndex location = 0;
      v57.length = v7;
      FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(theArray, v57, ValueAtIndex);
      if (FirstIndexOfValue == -1)
      {
        CFArrayAppendValue(v11, v13);
        videopipelineAddListenersOnImageQueue(a1, (uint64_t)ValueAtIndex, v12 == 0);
      }
      else
      {
        uint64_t v16 = CFArrayGetValueAtIndex(v56, FirstIndexOfValue);
        CFArrayAppendValue(v11, v16);
      }
      CFArrayAppendValue(Mutable, ValueAtIndex);
      ++v12;
    }
    while (Count != v12);
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    uint64_t v19 = FigCFArrayGetValueAtIndex();
    if (!FigCFArrayContainsValue())
    {
      videopipelineRemoveListenersOnImageQueue(a1, v19, i == 0);
      FigCFArrayRemoveLastElementOfValue();
    }
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 152));
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  CFMutableArrayRef v20 = *(const void **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = *(const void **)(DerivedStorage + 64);
  *(void *)(DerivedStorage + 64) = v11;
  if (v11) {
    CFRetain(v11);
  }
  if (v21) {
    CFRelease(v21);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  CFArrayRef v22 = *(const __CFArray **)(DerivedStorage + 40);
  if (v22 && CFArrayGetCount(v22) == 1)
  {
    uint64_t ImageQueueConfigurationArray = FigImageQueueArrayCreateImageQueueConfigurationArray(Mutable, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v11, (__CFArray **)&cf);
    if (!ImageQueueConfigurationArray)
    {
      CFArrayRef v24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), 0);
      CFTypeRef v25 = cf;
      uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(v24);
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      int v43 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v28 + 56);
      if (v43) {
        v43(FigBaseObject, @"FigImageQueueProperty_ImageQueueConfigurationArrayForFanout", v25);
      }
LABEL_57:
      FigImageQueueArraySetProperty();
      if (*(void *)(DerivedStorage + 88)) {
        FigImageQueueArraySetProperty();
      }
      uint64_t v49 = 0;
      figVideoRenderPipelineCopyMaxFanOutDisplayLayerSize(a1, &v49);
      CMTimeEpoch v44 = v49;
      if (v49)
      {
        VMC2SetProperty(*(void *)(DerivedStorage + 16), @"DisplayLayerSize", v49);
        CFRelease(v44);
      }
      videopipelineConfigureAV1FilmGrainModeAsAppropriateForImageQueues(a1);
      uint64_t v17 = 0;
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t ImageQueueConfigurationArray = figVideoRenderPipelineCopyFigImageQueueAndOptionsArrayGroupedByVideoLayerID(a1, (__CFArray **)&v54, (__CFArray **)&v53, &v52);
    if (!ImageQueueConfigurationArray)
    {
      CFArrayRef v29 = v52;
      if (v52)
      {
        CFIndex v30 = CFArrayGetCount(v52);
        if (v30 >= 1)
        {
          CFIndex v31 = v30;
          CFIndex v32 = 0;
          CFArrayRef v47 = (const __CFArray *)v53;
          CFArrayRef v48 = (const __CFArray *)v54;
          CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          do
          {
            LODWORD(v49) = 0;
            CFArrayGetValueAtIndex(v29, v32);
            FigCFDictionaryGetInt32IfPresent();
            for (CFIndex j = 0; ; ++j)
            {
              CFArrayRef v34 = *(const __CFArray **)(DerivedStorage + 48);
              if (v34) {
                CFArrayRef v34 = (const __CFArray *)CFArrayGetCount(v34);
              }
              if (j >= (uint64_t)v34) {
                break;
              }
              CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), j);
              int v50 = 0;
              if (FigCFDictionaryGetInt32IfPresent())
              {
                CFArrayRef v35 = (const __CFArray *)CFArrayGetValueAtIndex(v48, v32);
                CFArrayRef v36 = (const __CFArray *)CFArrayGetValueAtIndex(v47, v32);
                uint64_t ImageQueueConfigurationArray = FigImageQueueArrayCreateImageQueueConfigurationArray(v35, v46, v36, (__CFArray **)&cf);
                if (ImageQueueConfigurationArray) {
                  goto LABEL_79;
                }
                BOOL v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), j);
                CFTypeRef v38 = cf;
                uint64_t v39 = FigImageQueueGetFigBaseObject(v37);
                uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v40) {
                  uint64_t v41 = v40;
                }
                else {
                  uint64_t v41 = 0;
                }
                CFIndex v42 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v41 + 56);
                if (v42) {
                  v42(v39, @"FigImageQueueProperty_ImageQueueConfigurationArrayForFanout", v38);
                }
                if (cf)
                {
                  CFRelease(cf);
                  CFTypeRef cf = 0;
                }
                break;
              }
            }
            ++v32;
          }
          while (v32 != v31);
        }
      }
      goto LABEL_57;
    }
  }
LABEL_79:
  uint64_t v17 = ImageQueueConfigurationArray;
LABEL_62:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_64:
  if (v56) {
    CFRelease(v56);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v52) {
    CFRelease(v52);
  }
  return v17;
}

uint64_t videopipelineAddListenersOnImageQueue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterAddWeakListeners();
}

void figVideoRenderPipelineCopyMaxFanOutDisplayLayerSize(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 40);
  if (v4 && (CFIndex Count = CFArrayGetCount(v4), Count >= 1))
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    CFMutableArrayRef Mutable = 0;
    uint64_t v9 = (CGSize *)MEMORY[0x1E4F1DB30];
    double v11 = *MEMORY[0x1E4F1DB30];
    double v10 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFDictionaryRef dict = 0;
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), v7);
      uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v16 + 48);
      if (v17) {
        v17(FigBaseObject, @"FigImageQueueProperty_DisplaySize", v12, &dict);
      }
      if (dict)
      {
        CGSize v20 = *v9;
        CGSizeMakeWithDictionaryRepresentation(dict, &v20);
        CGFloat height = v20.height;
        CGFloat width = v20.width;
        if (v20.height * v20.width <= v11 * v10)
        {
          CGFloat width = v11;
          CGFloat height = v10;
        }
        else if (Mutable {
               || (CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
        }
        {
          CFDictionarySetValue(Mutable, @"DisplaySize", dict);
        }
        if (dict) {
          CFRelease(dict);
        }
      }
      else
      {
        CGFloat height = v10;
        CGFloat width = v11;
      }
      ++v7;
      double v10 = height;
      double v11 = width;
    }
    while (v6 != v7);
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  *a2 = Mutable;
}

uint64_t videopipelineConfigureAV1FilmGrainModeAsAppropriateForImageQueues(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 145) = 0;
  if (*(void *)(result + 16))
  {
    uint64_t v3 = result;
    CFTypeRef cf = 0;
    CFArrayRef theArray = 0;
    figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        CFIndex v6 = 0;
        uint64_t v7 = *MEMORY[0x1E4F1CF80];
        CFTypeRef v8 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
        while (1)
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
          uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v12 = v11 ? v11 : 0;
          uint64_t v13 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v12 + 48);
          if (!v13) {
            break;
          }
          if (v13(FigBaseObject, @"CanSupportAV1FilmGrainDeferMode", v7, &cf) || cf == 0) {
            break;
          }
          CFTypeID v15 = CFGetTypeID(cf);
          if (v15 != CFBooleanGetTypeID() || cf == v8) {
            break;
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          if (v5 == ++v6)
          {
            int v16 = 1;
            goto LABEL_20;
          }
        }
      }
      int v16 = 0;
LABEL_20:
      if (theArray) {
        CFRelease(theArray);
      }
    }
    else
    {
      int v16 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
    uint64_t v17 = (const __CFBoolean **)MEMORY[0x1E4F44790];
    if (v16) {
      uint64_t v17 = (const __CFBoolean **)MEMORY[0x1E4F44788];
    }
    uint64_t result = VMC2SetProperty(*(void *)(v3 + 16), @"AV1FilmGrainMode", *v17);
    *(unsigned char *)(v3 + 145) = v16;
  }
  return result;
}

uint64_t figVideoRenderPipelinePretendOutputIsLow()
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (result)
  {
    return VMC2PretendOutputIsLow(result);
  }
  return result;
}

uint64_t figVideoRenderPipelineRequestDecodeForPreroll(uint64_t a1, const void *a2)
{
  theArray[20] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray[0] = 0;
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
      figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested();
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6 && !VMC2RequestDecodeForPreroll(v6, a2))
      {
        int v7 = 1;
        *(unsigned char *)(v5 + 176) = 1;
      }
      else
      {
        int v7 = 0;
      }
      figVideoRenderPipelineCopyVideoImageQueueArray(a1, theArray, 0);
      if (theArray[0])
      {
        CFIndex Count = CFArrayGetCount(theArray[0]);
        if (Count >= 1)
        {
          CFIndex v9 = Count;
          for (CFIndex i = 0; i != v9; ++i)
          {
            CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], i);
            uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v12) {
              uint64_t v13 = v12;
            }
            else {
              uint64_t v13 = 0;
            }
            uint64_t v14 = *(unsigned int (**)(const void *, const void *))(v13 + 104);
            if (v14 && !v14(ValueAtIndex, a2))
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 184), ValueAtIndex);
              int v7 = 1;
            }
          }
        }
      }
      CFArrayRef v15 = *(const __CFArray **)(v5 + 184);
      if (v15 && CFArrayGetCount(v15) > 0)
      {
        if (dword_1E9350E18) {
          goto LABEL_22;
        }
      }
      else if (dword_1E9350E18)
      {
LABEL_22:
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v7)
      {
        *(unsigned char *)(v5 + 160) = 1;
        CFTypeRef v17 = CFRetain(a2);
        uint64_t v18 = 0;
        *(void *)(v5 + 168) = v17;
      }
      else
      {
        uint64_t v18 = 4294954440;
      }
      MEMORY[0x19970E930](*(void *)(v5 + 152));
      if (theArray[0]) {
        CFRelease(theArray[0]);
      }
      return v18;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figVideoRenderPipelineReset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  if (v4) {
    return v4;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  if (v5) {
    uint64_t v6 = VMC2Reset(v5, a2);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 32);
  if (v7)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    double v10 = *(void (**)(uint64_t, uint64_t))(v9 + 40);
    if (v10) {
      v10(v7, a2);
    }
  }
  return v6;
}

CMTime *vsbufGetDecodeTimeStamp@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t result = (CMTime *)vsbufIsCatchupFrame(a1);
  if (result)
  {
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    a2->CMTimeEpoch epoch = *(void *)(v5 + 16);
  }
  else
  {
    return CMSampleBufferGetOutputDecodeTimeStamp(a2, a1);
  }
  return result;
}

CMTime *vsbufGetPresentationTimeStamp@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t result = (CMTime *)vsbufIsCatchupFrame(a1);
  if (result)
  {
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    a2->CMTimeEpoch epoch = *(void *)(v5 + 16);
  }
  else
  {
    return CMSampleBufferGetOutputPresentationTimeStamp(a2, a1);
  }
  return result;
}

CFArrayRef vsbufIsCatchupFrame(opaqueCMSampleBuffer *a1)
{
  CFArrayRef result = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (result)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(result, 0);
    return (const __CFArray *)(ValueAtIndex
                            && (const void *)*MEMORY[0x1E4F1CFD0] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1B8]));
  }
  return result;
}

uint64_t FigSampleBufferAudioRendererServerRetainAudioRendererForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigSampleBufferAudioRendererServerStart()
{
  if (FigServer_IsMediaparserd())
  {
    return FigSignalErrorAt();
  }
  else
  {
    FigServer_IsMediaplaybackd();
    return FigXPCServerStart();
  }
}

uint64_t audioRendererServer_handleMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v5 = audioRenderer_lookupAndRetainSampleBufferAudioRendererByObjectIDForConnection();
  if (v5) {
    return v5;
  }
  else {
    return 4294951138;
  }
}

uint64_t audioRendererServer_handleMessageNoReply(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  unsigned int v4 = audioRenderer_lookupAndRetainSampleBufferAudioRendererByObjectIDForConnection();
  if (v4) {
    return v4;
  }
  else {
    return 4294951138;
  }
}

uint64_t audioRenderer_lookupAndRetainSampleBufferAudioRendererByObjectIDForConnection()
{
  uint64_t result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

void audioRendererServer_disposeFSBARServedState(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    uint64_t v3 = a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    unsigned int v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

uint64_t audioRendererServer_flushFromTimeCompletionCallback(int a1, uint64_t a2)
{
  if (!FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "completionID", *(void *)a2);
    xpc_dictionary_set_int64(0, "completionStatus", a1);
    xpc_connection_send_message(*(xpc_connection_t *)(a2 + 16), 0);
  }
  audioRendererServer_destroyFlushFromTimeCompletionCallbackContext((void *)a2);
  return FigXPCRelease();
}

void audioRendererServer_destroyFlushFromTimeCompletionCallbackContext(void *a1)
{
  if (a1)
  {
    FigXPCRelease();
    uint64_t v2 = (const void *)a1[3];
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

NSObject *FigCaptionRendererSessionSetMasterClock(NSObject *result, uint64_t a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      void v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)fcrSessionSetMasterClockDo);
      return v4;
    }
  }
  return result;
}

uint64_t fcrSessionSetMasterClockDo(uint64_t a1)
{
  uint64_t result = FigCaptionRendererTriggerCreate(*(OpaqueCMClock **)a1, *(_DWORD *)(*(void *)(a1 + 16) + 1352), (uint64_t)onTriggerEvent, (uint64_t)onTriggerTimeUpdate, *(void *)(a1 + 16), (uint64_t *)(*(void *)(a1 + 16) + 48));
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  if (v3) {
    *uint64_t v3 = result;
  }
  return result;
}

uint64_t FigCaptionRendererSessionSetCALayerDevice(uint64_t a1, uint64_t a2)
{
  if (!a1 || !*(void *)(a1 + 168)) {
    return 0;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 584);
  if (v4) {
    CFDictionaryRef Value = CFDictionaryGetValue(v4, *(const void **)(a1 + 248));
  }
  else {
    CFDictionaryRef Value = 0;
  }
  uint64_t v6 = FigCaptionRendererCALayerOutputCreate((uint64_t)onUserEvent, (uint64_t)onViewportChanged, (uint64_t)drawInContext, a1, a2, (uint64_t)Value, *MEMORY[0x1E4F1CF80], (void *)(a1 + 64));
  if (v6) {
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 616) = FigCDSCALayerOutputGetOrientation();
  *(_DWORD *)(a1 + 620) = FigCaptionRendererCALayerOutputGetDisplayScale();
  uint64_t v7 = *(void *)(a1 + 248);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(double (**)(uint64_t))(v10 + 40);
  if (v11)
  {
    double v12 = v11(v8);
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
  }
  else
  {
    double v12 = *MEMORY[0x1E4F1DB20];
    double v14 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v16 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v18 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(ProtocolVTable + 16);
  if (!v20) {
    goto LABEL_23;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, double, double, double, double))(v20 + 96);
  if (!v21)
  {
LABEL_27:
    uint64_t v25 = 4294954514;
    goto LABEL_24;
  }
  uint64_t v6 = v21(v7, v12, v14, v16, v18);
  if (v6)
  {
LABEL_28:
    uint64_t v25 = v6;
    goto LABEL_24;
  }
  if (!*(void *)(a1 + 584)) {
    return 0;
  }
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  uint64_t v22 = CMBaseObjectGetProtocolVTable();
  if (!v22 || (uint64_t v23 = *(void *)(v22 + 16)) == 0)
  {
LABEL_23:
    uint64_t v25 = 4294954508;
LABEL_24:
    FigSignalErrorAt();
    return v25;
  }
  CFArrayRef v24 = *(uint64_t (**)(const void *))(v23 + 56);
  if (!v24) {
    goto LABEL_27;
  }
  uint64_t v25 = v24(Value);
  if (v25) {
    goto LABEL_24;
  }
  return v25;
}

NSObject *FigCaptionRendererSessionSetCGContextDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  unsigned int v14 = 0;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&context[4] = a8;
      int v10 = a3;
      int v11 = a4;
      double v12 = &v14;
      double v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetCGContextDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t fcrSessionSetCGContextDeviceDo(uint64_t *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = *a1;
  double v4 = *((double *)a1 + 1);
  double v5 = *((double *)a1 + 2);
  double v6 = *((double *)a1 + 3);
  double v7 = *((double *)a1 + 4);
  uint64_t v8 = a1[5];
  CFDictionaryRef v9 = *(const __CFDictionary **)(v2 + 584);
  if (v9)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v9, *(const void **)(v2 + 248));
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v12 = *(void *)(ProtocolVTable + 16);
      if (v12)
      {
        double v13 = *(void (**)(const void *, void))(v12 + 16);
        if (v13) {
          v13(Value, 0);
        }
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248));
    unsigned int v14 = *(const void **)(v2 + 584);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v2 + 584) = 0;
    }
  }
  int v15 = FigCaptionRendererCGOutputCreate((uint64_t)onViewportChanged, (uint64_t)drawInContext, v2, v3, *MEMORY[0x1E4F1CF80], (void *)(v2 + 64));
  if (v15) {
    goto LABEL_31;
  }
  *(void *)(v2 + 616) = v8;
  uint64_t v16 = *(void *)(v2 + 64);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v18 + 48);
  if (!v19) {
    goto LABEL_25;
  }
  int v15 = v19(v16, 1, v4, v5, v6, v7);
  if (v15)
  {
LABEL_31:
    int v36 = v15;
    goto LABEL_27;
  }
  uint64_t v20 = *(void *)(v2 + 248);
  uint64_t v21 = *(void *)(v2 + 64);
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  CFArrayRef v24 = *(double (**)(uint64_t))(v23 + 40);
  if (v24)
  {
    double v25 = v24(v21);
    double v27 = v26;
    double v29 = v28;
    double v31 = v30;
  }
  else
  {
    double v25 = *MEMORY[0x1E4F1DB20];
    double v27 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v29 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v31 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v32 = CMBaseObjectGetProtocolVTable();
  if (!v32 || (uint64_t v33 = *(void *)(v32 + 16)) == 0)
  {
    int v36 = -12788;
    goto LABEL_27;
  }
  CFArrayRef v34 = *(uint64_t (**)(uint64_t, double, double, double, double))(v33 + 96);
  if (v34)
  {
    uint64_t result = v34(v20, v25, v27, v29, v31);
    int v36 = result;
    if (!result) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_25:
  int v36 = -12782;
LABEL_27:
  uint64_t result = FigSignalErrorAt();
LABEL_28:
  BOOL v37 = (int *)a1[6];
  if (v37) {
    *BOOL v37 = v36;
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetLegibleOutputDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  unsigned int v14 = 0;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&context[4] = a8;
      int v10 = a3;
      int v11 = a4;
      uint64_t v12 = &v14;
      double v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetLegibleOutputDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t fcrSessionSetLegibleOutputDeviceDo(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[7];
  double v3 = *((double *)a1 + 1);
  double v4 = *((double *)a1 + 2);
  double v5 = *((double *)a1 + 3);
  double v6 = *((double *)a1 + 4);
  uint64_t v7 = a1[5];
  int v8 = FigCaptionRendererLegibleOutputCreate((uint64_t)onViewportChanged, (uint64_t)layoutInContext, (uint64_t)v2, *a1, v2 + 8);
  if (v8) {
    goto LABEL_24;
  }
  v2[77] = v7;
  uint64_t v9 = v2[8];
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v11 + 48);
  if (!v12) {
    goto LABEL_18;
  }
  int v8 = v12(v9, 1, v3, v4, v5, v6);
  if (v8)
  {
LABEL_24:
    int v29 = v8;
    goto LABEL_20;
  }
  uint64_t v13 = v2[31];
  uint64_t v14 = v2[8];
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(double (**)(uint64_t))(v16 + 40);
  if (v17)
  {
    double v18 = v17(v14);
    double v20 = v19;
    double v22 = v21;
    double v24 = v23;
  }
  else
  {
    double v18 = *MEMORY[0x1E4F1DB20];
    double v20 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v22 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v24 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v26 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    int v29 = -12788;
    goto LABEL_20;
  }
  double v27 = *(uint64_t (**)(uint64_t, double, double, double, double))(v26 + 96);
  if (v27)
  {
    uint64_t result = v27(v13, v18, v20, v22, v24);
    int v29 = result;
    if (!result) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_18:
  int v29 = -12782;
LABEL_20:
  uint64_t result = FigSignalErrorAt();
LABEL_21:
  double v30 = (int *)a1[6];
  if (v30) {
    *double v30 = v29;
  }
  return result;
}

void SetProfileDo(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  CMTimeValue value = 0;
  int v3 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 268) == v3) {
    goto LABEL_24;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(v2 + 584);
  if (!v4) {
    goto LABEL_8;
  }
  double v5 = CFDictionaryGetValue(v4, *(const void **)(v2 + 248));
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v7 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    int v10 = -12788;
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_25;
  }
  int v8 = *(uint64_t (**)(const void *, void))(v7 + 16);
  if (!v8)
  {
    int v10 = -12782;
    goto LABEL_12;
  }
  int v9 = v8(v5, 0);
  if (v9) {
    goto LABEL_31;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248));
  int v3 = *(_DWORD *)(a1 + 8);
LABEL_8:
  if ((v3 | 2) == 3)
  {
    CFTypeRef cf = 0;
    int v9 = FigCaptionRendererAVFLayoutRegionCreate((uint64_t)onDisplayUpdateEvent, v2, &cf);
    if (v9) {
      goto LABEL_31;
    }
  }
  else
  {
    CFTypeRef cf = 0;
    int v9 = FigCaptionRendererFreeLayoutRegionCreate((uint64_t)onDisplayUpdateEvent, v2, &cf);
    if (v9) {
      goto LABEL_31;
    }
  }
  uint64_t v11 = *(const void **)(v2 + 248);
  CFTypeRef v12 = cf;
  *(void *)(v2 + 248) = cf;
  if (v12) {
    CFRetain(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!*(void *)(v2 + 584)) {
    goto LABEL_23;
  }
  int v9 = FigCaptionRendererCALayerOutputNodeCreate(&value);
  if (v9)
  {
LABEL_31:
    int v10 = v9;
    goto LABEL_12;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248), value);
LABEL_23:
  *(_DWORD *)(v2 + 268) = *(_DWORD *)(a1 + 8);
  applyContextDefaultsToMASettings((int64x2_t *)v2);
LABEL_24:
  int v10 = 0;
LABEL_25:
  uint64_t v13 = *(int **)(a1 + 16);
  if (v13) {
    *uint64_t v13 = v10;
  }
  if (value) {
    CFRelease(value);
  }
}

uint64_t FigCaptionRendererSessionSetPlayer(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4[0] = a1;
    v4[1] = a2;
    if (a2 | *(void *)(a1 + 72))
    {
      uint64_t v2 = *(NSObject **)(a1 + 168);
      if (v2) {
        dispatch_sync_f(v2, v4, (dispatch_function_t)setPlayerDo);
      }
    }
  }
  return 0;
}

void setPlayerDo(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void *)a1[1];
  if (*(const void **)(*a1 + 72) == v2) {
    return;
  }
  CFDictionaryRef v4 = (uint64_t *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 56);
  if (!v3)
  {
    if (FigCaptionRendererNotificationInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, (uint64_t)onTextHighlightArray, v1, *MEMORY[0x1E4F1CF80], (void *)(v1 + 56)))goto LABEL_28; {
    uint64_t v3 = *v4;
    }
  }
  if (FigCaptionRendererNotificationInputSetPlayer(v3, (uint64_t)v2)) {
    goto LABEL_28;
  }
  if (*(void *)(v1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    double v5 = *(const void **)(v1 + 72);
  }
  else
  {
    double v5 = 0;
  }
  *(void *)(v1 + 72) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (*(void *)(v1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    MEMORY[0x19970E910](*(void *)(v1 + 1376));
    *(unsigned char *)(v1 + 1347) = 0;
    MEMORY[0x19970E930](*(void *)(v1 + 1376));
    int v13 = FigCaptionRendererTriggerCreate(0, *(_DWORD *)(v1 + 1352), (uint64_t)onTriggerEvent, (uint64_t)onTriggerTimeUpdate, v1, (uint64_t *)(v1 + 48));
    if (!v13)
    {
      v12[0] = &v13;
      v12[1] = v1;
      fcrSessionStartDo((uint64_t)v12);
      if (v13) {
        FigSignalErrorAt();
      }
      return;
    }
    goto LABEL_28;
  }
  double v6 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  *double v6 = (uint64_t)CFRetain((CFTypeRef)v1);
  CFTypeRef v7 = *(CFTypeRef *)(v1 + 72);
  if (v7) {
    CFTypeRef v7 = CFRetain(v7);
  }
  v6[1] = (uint64_t)v7;
  playbackItemChangedCallbackDo(v6);
  int v8 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (!v8)
  {
LABEL_28:
    FigSignalErrorAt();
    return;
  }
  int v9 = v8;
  CFTypeRef v10 = (CFTypeRef)*v4;
  if (*v4) {
    CFTypeRef v10 = CFRetain(v10);
  }
  v9[1] = v10;
  CFTypeRef v11 = *(CFTypeRef *)(v1 + 48);
  if (v11) {
    CFTypeRef v11 = CFRetain(v11);
  }
  v9[2] = v11;
  *int v9 = CFRetain((CFTypeRef)v1);

  fcrSessionStopDo(v9);
}

void updateDisplayPort(void *a1, double a2, double a3, double a4, double a5)
{
  if (a1[22])
  {
    CFTypeRef v10 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x102004065753CD5uLL);
    if (v10)
    {
      CFTypeRef v11 = v10;
      *(void *)CFTypeRef v10 = CFRetain(a1);
      v11[1] = a2;
      v11[2] = a3;
      CFTypeRef v12 = MEMORY[0x1E4F14428];
      v11[3] = a4;
      v11[4] = a5;
      dispatch_async_f(v12, v11, (dispatch_function_t)updateDisplayPortDoAsync);
    }
  }
}

NSObject *FigCaptionRendererSessionSetCaptionArray(NSObject *result, uint64_t a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      void v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)fcrSessionSetCaptionArrayDo);
      return v4;
    }
  }
  return result;
}

uint64_t fcrSessionSetCaptionArrayDo(uint64_t a1)
{
  int v8 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(const void **)a1;
  uint64_t v4 = *(void *)(v2 + 56);
  if (v4)
  {
LABEL_4:
    uint64_t result = FigCaptionRendererCaptionArrayInputSetCaptionsArray(v4, v3);
    int v8 = result;
    if (!result) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  int v8 = FigCaptionRendererCaptionArrayInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, v2, *MEMORY[0x1E4F1CF80], (void *)(v2 + 56));
  if (!v8)
  {
    v7[0] = v2;
    v7[1] = 2;
    v7[2] = &v8;
    SetProfileDo((uint64_t)v7);
    uint64_t v4 = *(void *)(v2 + 56);
    goto LABEL_4;
  }
LABEL_8:
  uint64_t result = FigSignalErrorAt();
LABEL_5:
  double v6 = *(_DWORD **)(a1 + 8);
  if (v6) {
    *double v6 = v8;
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetCaptionSample(NSObject *result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetCaptionSampleDo);
      return v5;
    }
  }
  return result;
}

uint64_t fcrSessionSetCaptionSampleDo(uint64_t a1)
{
  int v10 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  double v6 = (uint64_t *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 56);
  if (!v5)
  {
    int v10 = FigCaptionRendererBasicInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, v2, *MEMORY[0x1E4F1CF80], v6);
    if (v10)
    {
LABEL_10:
      uint64_t result = FigSignalErrorAt();
      goto LABEL_7;
    }
    v9[0] = v2;
    v9[1] = 1;
    v9[2] = &v10;
    SetProfileDo((uint64_t)v9);
    uint64_t v5 = *(void *)(v2 + 56);
  }
  if (v4)
  {
    FigCaptionRendererBasicInputSetLayoutContext(v5, v4);
    uint64_t v5 = *v6;
  }
  uint64_t result = FigCaptionRendererBasicInputAddSample(v5, v3);
  int v10 = result;
  if (result) {
    goto LABEL_10;
  }
LABEL_7:
  int v8 = *(_DWORD **)(a1 + 16);
  if (v8) {
    *int v8 = v10;
  }
  return result;
}

NSObject *FigCaptionRendererSessionNotificationInputSetCaptionSample(NSObject *result, uint64_t a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[2] = &v4;
      context[3] = v2;
      context[0] = a2;
      context[1] = 0;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionNotificationInputSetCaptionSampleDo);
      return v4;
    }
  }
  return result;
}

uint64_t fcrSessionNotificationInputSetCaptionSampleDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(const void **)a1;
  uint64_t v5 = (uint64_t *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 56);
  if (v4)
  {
LABEL_4:
    uint64_t result = FigCaptionRendererNotificationInputAddSample(v4, v3);
    int v8 = result;
    if (!result) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  int v6 = FigCaptionRendererNotificationInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, (uint64_t)onTextHighlightArray, v2, *MEMORY[0x1E4F1CF80], v5);
  if (!v6)
  {
    uint64_t v4 = *v5;
    goto LABEL_4;
  }
  int v8 = v6;
LABEL_9:
  uint64_t result = FigSignalErrorAt();
LABEL_5:
  int v9 = *(_DWORD **)(a1 + 16);
  if (v9) {
    *int v9 = v8;
  }
  return result;
}

NSObject *FigCaptionRendererSessionStart(NSObject *result)
{
  unsigned int v3 = 0;
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionStartDo);
      return v3;
    }
  }
  return result;
}

uint64_t fcrSessionStartDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v2 + 48);
  if (result && (uint64_t result = FigCDSTriggerStart(result), result))
  {
    LODWORD(v4) = result;
  }
  else
  {
    *(unsigned char *)(v2 + 40) = 1;
    uint64_t v4 = *(void *)(v2 + 56);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFTypeRef v7 = *(uint64_t (**)(uint64_t))(v6 + 8);
    if (v7)
    {
      uint64_t result = v7(v4);
      LODWORD(v4) = result;
      if (!result) {
        goto LABEL_12;
      }
    }
    else
    {
      LODWORD(v4) = -12782;
    }
  }
  uint64_t result = FigSignalErrorAt();
LABEL_12:
  if (*(void *)a1) {
    **(_DWORD **)a1 = v4;
  }
  return result;
}

uint64_t FigCaptionRendererSessionStop(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 168))
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 56);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    v2[1] = v3;
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 48);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    v2[2] = v4;
    void *v2 = CFRetain((CFTypeRef)a1);
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 168), v2, (dispatch_function_t)fcrSessionStopDo);
  }
  return 0;
}

void fcrSessionStopDo(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2
    && ((uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v4 = 0) : (v4 = v3),
        (uint64_t v5 = *(unsigned int (**)(uint64_t))(v4 + 16)) == 0 || v5(v2))
    || (*(unsigned char *)(*a1 + 40) = 0, (uint64_t v6 = a1[2]) != 0) && FigCDSTriggerStop(v6))
  {
    FigSignalErrorAt();
  }
  CFTypeRef v7 = (const void *)a1[1];
  if (v7) {
    CFRelease(v7);
  }
  int v8 = (const void *)a1[2];
  if (v8) {
    CFRelease(v8);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }

  free(a1);
}

NSObject *FigCaptionRendererSessionSetTime(NSObject *result, long long *a2)
{
  unsigned int v7 = 0;
  if (result)
  {
    uint64_t v2 = result;
    if (result[6].isa)
    {
      uint64_t result = result[21].isa;
      if (result)
      {
        uint64_t v6 = v2;
        long long v3 = *a2;
        uint64_t v4 = *((void *)a2 + 2);
        uint64_t v5 = &v7;
        dispatch_sync_f(result, &v3, (dispatch_function_t)fcrSessionSetTimeDo);
        return v7;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t fcrSessionSetTimeDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CMTime v5 = *(CMTime *)a1;
  uint64_t result = FigCDSTriggerSetCurrentTime(*(void *)(v2 + 48), &v5);
  uint64_t v4 = *(_DWORD **)(a1 + 24);
  if (v4) {
    *uint64_t v4 = result;
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetCaptionCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = 0;
  if (result)
  {
    long long v3 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      void context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetCaptionCacheRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t fcrSessionSetCaptionCacheRangeDo(uint64_t result)
{
  *(_OWORD *)(*(void *)(result + 24) + 88) = *(_OWORD *)result;
  uint64_t v1 = *(_DWORD **)(result + 16);
  if (v1) {
    _DWORD *v1 = 0;
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetRate(NSObject *result, double a2)
{
  unsigned int v4 = 0;
  if (result)
  {
    uint64_t v2 = result;
    if (result[6].isa)
    {
      uint64_t result = result[21].isa;
      if (result)
      {
        v3[1] = &v4;
        void v3[2] = v2;
        *(double *)long long v3 = a2;
        dispatch_sync_f(result, v3, (dispatch_function_t)fcrSessionSetRateDo);
        return v4;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t fcrSessionSetRateDo(uint64_t a1)
{
  uint64_t result = FigCDSTriggerSetRate(*(void *)(*(void *)(a1 + 16) + 48), *(Float64 *)a1);
  long long v3 = *(_DWORD **)(a1 + 8);
  if (v3) {
    *long long v3 = result;
  }
  return result;
}

double FigCaptionRendererSessionGetRate(uint64_t a1)
{
  double result = 0.0;
  if (a1)
  {
    long long v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      v4[0] = 0;
      v4[1] = a1;
      dispatch_sync_f(v3, v4, (dispatch_function_t)fcrSessionGetRateDo);
      return *(double *)v4;
    }
  }
  return result;
}

void fcrSessionGetRateDo(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 48);
  if (v2) {
    double Rate = FigCDSTriggerGetRate(v2);
  }
  else {
    double Rate = 0.0;
  }
  *(double *)a1 = Rate;
}

uint64_t FigCaptionRendererSessionSetLayoutContext_Viewport(uint64_t result, double a2, double a3, double a4, double a5)
{
  unsigned int v26 = 0;
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  MEMORY[0x19970E910](*(void *)(result + 1376));
  if (!*(unsigned char *)(v9 + 1347))
  {
    *(double *)(v9 + 768) = a2;
    *(double *)(v9 + 776) = a3;
    *(double *)(v9 + 784) = a4;
    *(double *)(v9 + 792) = a5;
    MEMORY[0x19970E930](*(void *)(v9 + 1376));
    return 0;
  }
  MEMORY[0x19970E930](*(void *)(v9 + 1376));
  int v10 = *(NSObject **)(v9 + 168);
  if (v10)
  {
    context[1] = 0;
    long long v18 = 0u;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    context[0] = v9;
    *(double *)&void context[2] = a2;
    *(double *)&context[3] = a3;
    *(double *)&void context[4] = a4;
    long long v17 = *(unint64_t *)&a5;
    double v25 = &v26;
    dispatch_sync_f(v10, context, (dispatch_function_t)SetViewportDo);
  }
  uint64_t v11 = *(void *)(v9 + 248);
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v13 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    int v15 = -12788;
LABEL_11:
    unsigned int v26 = v15;
LABEL_12:
    FigSignalErrorAt();
    return v26;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, double, double, double, double))(v13 + 96);
  if (!v14)
  {
    int v15 = -12782;
    goto LABEL_11;
  }
  double result = v14(v11, a2, a3, a4, a5);
  unsigned int v26 = result;
  if (result) {
    goto LABEL_12;
  }
  return result;
}

uint64_t SetViewportDo(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  long long v3 = (_OWORD *)(a1 + 16);
  if (CGRectEqualToRect(*(CGRect *)(*(void *)a1 + 624), *(CGRect *)(a1 + 16)))
  {
    uint64_t result = 0;
  }
  else
  {
    double v5 = *(double *)(v2 + 640);
    double v6 = *(double *)(v2 + 648);
    long long v7 = v3[1];
    *(_OWORD *)(v2 + 624) = *v3;
    *(_OWORD *)(v2 + 640) = v7;
    CFDictionaryRef v8 = *(const __CFDictionary **)(v2 + 584);
    if (v8)
    {
      uint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      CFDictionaryRef Value = CFDictionaryGetValue(v8, *(const void **)(v2 + 248));
      getOutputNodeLayout((uint64_t)Value, (uint64_t)v15);
      uint64_t v10 = v16;
      if (v16)
      {
        if (vabdd_f64(v5, *(double *)(a1 + 32)) > v5 * 0.1 || vabdd_f64(v6, *(double *)(a1 + 40)) > v6 * 0.1)
        {
          FigCaptionRendererOutputNodeProtocolGetProtocolID();
          Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
          if (ProtocolVTable)
          {
            uint64_t v12 = *(void *)(ProtocolVTable + 16);
            if (v12)
            {
              uint64_t v13 = *(void (**)(uint64_t, void))(v12 + 120);
              if (v13) {
                v13(v10, 0);
              }
            }
          }
        }
      }
    }
    uint64_t result = UpdateLayoutContext(v2);
  }
  uint64_t v14 = *(_DWORD **)(a1 + 168);
  if (v14) {
    _DWORD *v14 = result;
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_VideoSize(NSObject *result, double a2, double a3)
{
  unsigned int v19 = 0;
  if (result)
  {
    double v5 = result;
    MEMORY[0x19970E910](result[172].isa);
    if (BYTE3(v5[168].isa))
    {
      MEMORY[0x19970E930](v5[172].isa);
      uint64_t result = v5[21].isa;
      if (result)
      {
        uint64_t v9 = 0;
        long long v17 = 0u;
        long long v16 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        long long v7 = 0u;
        long long v8 = 0u;
        uint64_t context = v5;
        double v10 = a2;
        long long v11 = *(unint64_t *)&a3;
        long long v18 = &v19;
        dispatch_sync_f(result, &context, (dispatch_function_t)SetVideoSizeDo);
        return v19;
      }
    }
    else
    {
      *(double *)&v5[100].isa = a2;
      *(double *)&v5[101].isa = a3;
      MEMORY[0x19970E930](v5[172].isa);
      return 0;
    }
  }
  return result;
}

uint64_t SetVideoSizeDo(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 48);
  double v3 = *(double *)(a1 + 48);
  uint64_t v4 = *(void *)a1;
  if (*(double *)(v4 + 656) == v3 && *(double *)(v4 + 664) == *(double *)(a1 + 56))
  {
    uint64_t result = 0;
  }
  else
  {
    *(_OWORD *)(v4 + 656) = *v2;
    uint64_t result = UpdateLayoutContext(v4);
  }
  long long v7 = *(_DWORD **)(a1 + 168);
  if (v7) {
    *long long v7 = result;
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_Gravity(NSObject *result, char a2)
{
  unsigned int v15 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      long long v13 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      long long v4 = 0u;
      long long v5 = 0u;
      uint64_t context = v2;
      BYTE8(v13) = a2;
      long long v14 = &v15;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetGravityDo);
      return v15;
    }
  }
  return result;
}

uint64_t SetGravityDo(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 160);
  if (*(unsigned __int8 *)(result + 272) != v3)
  {
    *(unsigned char *)(result + 272) = v3;
    return UpdateLayoutContext(result);
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_Overscan(NSObject *result, char a2)
{
  unsigned int v15 = 0;
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = result[21].isa;
    if (result)
    {
      long long v13 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      long long v4 = 0u;
      long long v5 = 0u;
      uint64_t context = v2;
      BYTE9(v13) = a2;
      long long v14 = &v15;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetOverscanDo);
      return v15;
    }
  }
  return result;
}

uint64_t SetOverscanDo(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 161);
  if (*(unsigned __int8 *)(*(void *)a1 + 273) == v3)
  {
    uint64_t result = 0;
  }
  else
  {
    *(unsigned char *)(v2 + 273) = v3;
    uint64_t result = *(void *)(v2 + 64);
    if (v3) {
      BOOL v5 = result == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      *(double *)(v2 + 280) = FigCDSCALayerOutputGetOverscan();
      uint64_t result = *(void *)(v2 + 64);
    }
    if (result) {
      uint64_t result = UpdateLayoutContext(v2);
    }
  }
  long long v6 = *(_DWORD **)(a1 + 168);
  if (v6) {
    *long long v6 = result;
  }
  return result;
}

uint64_t FigCaptionRendererSessionGetLayoutContext_Overscan(uint64_t a1, unsigned char *a2)
{
  if (a1)
  {
    int v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      uint64_t v17 = 0;
      long long v16 = 0u;
      long long v15 = 0u;
      long long v14 = 0u;
      long long v13 = 0u;
      long long v12 = 0u;
      long long v11 = 0u;
      long long v10 = 0u;
      long long v9 = 0u;
      long long v8 = 0u;
      long long v7 = 0u;
      uint64_t v6 = a1;
      dispatch_sync_f(v3, &v6, (dispatch_function_t)GetOverscanDo);
      *a2 = BYTE9(v16);
    }
  }
  return 0;
}

unsigned char *GetOverscanDo(unsigned char *result)
{
  result[161] = *(unsigned char *)(*(void *)result + 273);
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_VideoRelativeToViewport(NSObject *result, double a2, double a3, double a4, double a5)
{
  unsigned int v24 = 0;
  if (result)
  {
    long long v9 = result;
    MEMORY[0x19970E910](result[172].isa);
    if (BYTE3(v9[168].isa))
    {
      MEMORY[0x19970E930](v9[172].isa);
      uint64_t result = v9[21].isa;
      if (result)
      {
        uint64_t v14 = 0;
        long long v19 = 0u;
        long long v22 = 0u;
        long long v21 = 0u;
        long long v20 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        long long v11 = 0u;
        uint64_t context = v9;
        double v15 = a2;
        double v16 = a3;
        double v17 = a4;
        long long v18 = *(unint64_t *)&a5;
        long long v23 = &v24;
        dispatch_sync_f(result, &context, (dispatch_function_t)SetVideoRelativeToViewportDo);
        return v24;
      }
    }
    else
    {
      *(double *)&v9[102].isa = a2;
      *(double *)&v9[103].isa = a3;
      *(double *)&v9[104].isa = a4;
      *(double *)&v9[105].isa = a5;
      MEMORY[0x19970E930](v9[172].isa);
      return 0;
    }
  }
  return result;
}

uint64_t SetVideoRelativeToViewportDo(CGRect **a1)
{
  uint64_t v2 = *a1;
  int v3 = (CGPoint *)(a1 + 8);
  if (CGRectEqualToRect((*a1)[21], *((CGRect *)a1 + 2)))
  {
    uint64_t result = 0;
  }
  else
  {
    CGSize v5 = (CGSize)v3[1];
    v2[21].origin = *v3;
    v2[21].size = v5;
    uint64_t result = UpdateLayoutContext((uint64_t)v2);
  }
  uint64_t v6 = a1[21];
  if (v6) {
    LODWORD(v6->origin.x) = result;
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_CaptionsAvoidanceMargins(NSObject *result, _OWORD *a2)
{
  unsigned int v17 = 0;
  if (result)
  {
    int v3 = result;
    MEMORY[0x19970E910](result[172].isa);
    if (BYTE3(v3[168].isa))
    {
      MEMORY[0x19970E930](v3[172].isa);
      uint64_t result = v3[21].isa;
      if (result)
      {
        memset(v15, 0, sizeof(v15));
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        uint64_t context = v3;
        long long v4 = a2[1];
        *(_OWORD *)((char *)v15 + 8) = *a2;
        *(_OWORD *)((char *)&v15[1] + 8) = v4;
        long long v5 = a2[3];
        *(_OWORD *)((char *)&v15[2] + 8) = a2[2];
        *(_OWORD *)((char *)&v15[3] + 8) = v5;
        double v16 = &v17;
        dispatch_sync_f(result, &context, (dispatch_function_t)SetCaptionsAvoidanceMarginsDo);
        return v17;
      }
    }
    else
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      long long v8 = a2[3];
      *(_OWORD *)&v3[110].isa = a2[2];
      *(_OWORD *)&v3[112].isa = v8;
      *(_OWORD *)&v3[106].isa = v6;
      *(_OWORD *)&v3[108].isa = v7;
      MEMORY[0x19970E930](v3[172].isa);
      return 0;
    }
  }
  return result;
}

void SetCaptionsAvoidanceMarginsDo(uint64_t a1)
{
  uint64_t v2 = *(_OWORD **)a1;
  if (FigGeometryMarginsEqualToMargins())
  {
    int updated = 0;
  }
  else
  {
    long long v4 = *(_OWORD *)(a1 + 96);
    long long v5 = *(_OWORD *)(a1 + 112);
    long long v6 = *(_OWORD *)(a1 + 144);
    v2[46] = *(_OWORD *)(a1 + 128);
    v2[47] = v6;
    v2[44] = v4;
    v2[45] = v5;
    int updated = UpdateLayoutContext((uint64_t)v2);
    drawInContext(0, (uint64_t)v2);
  }
  long long v7 = *(_DWORD **)(a1 + 168);
  if (v7) {
    *long long v7 = updated;
  }
}

uint64_t FigCaptionRendererSessionUpdateLegibleOutputContext(void *a1, uint64_t a2)
{
  if (!a1 || !a1[21]) {
    return 0;
  }
  uint64_t v4 = a1[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v6 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    uint64_t updated = 4294954508;
LABEL_11:
    FigSignalErrorAt();
    return updated;
  }
  long long v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 232);
  if (!v7)
  {
    uint64_t updated = 4294954514;
    goto LABEL_11;
  }
  uint64_t v8 = v7(v4, 1);
  if (v8)
  {
    uint64_t updated = v8;
    goto LABEL_11;
  }
  uint64_t v9 = a1[8];
  if (!v9) {
    return 0;
  }
  uint64_t updated = FigCaptionRendererCGOutputUpdateCGContext(v9, a2);
  if (updated) {
    goto LABEL_11;
  }
  return updated;
}

uint64_t FigCaptionRendererSessionUpdateCGContext(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 168)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    return 0;
  }
  uint64_t updated = FigCaptionRendererCGOutputUpdateCGContext(v2, a2);
  if (updated) {
    FigSignalErrorAt();
  }
  return updated;
}

uint64_t fcrSessionUpdateOutputDo(uint64_t result)
{
  uint64_t v1 = (_DWORD **)result;
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 64);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  long long v5 = *(uint64_t (**)(uint64_t, double, double, double, double))(v4 + 32);
  if (v5)
  {
    uint64_t result = v5(v2, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
    LODWORD(v2) = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    LODWORD(v2) = -12782;
  }
  uint64_t result = FigSignalErrorAt();
LABEL_10:
  if (*v1) {
    *_DWORD *v1 = v2;
  }
  return result;
}

NSObject *FigCaptionRendererSessionClear(NSObject *result, double a2, double a3, double a4, double a5)
{
  unsigned int v12 = 0;
  if (result)
  {
    uint64_t v9 = result;
    MEMORY[0x19970E910](result[172].isa);
    int v10 = BYTE3(v9[168].isa);
    MEMORY[0x19970E930](v9[172].isa);
    if (v10)
    {
      uint64_t result = v9[21].isa;
      if (result)
      {
        context[0] = v9;
        *(double *)&context[1] = a2;
        *(double *)&void context[2] = a3;
        *(double *)&context[3] = a4;
        *(double *)&void context[4] = a5;
        void context[5] = &v12;
        dispatch_sync_f(result, context, (dispatch_function_t)clearDo);
        return v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *clearDo(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  if (!*result) {
    goto LABEL_19;
  }
  double v3 = *((double *)result + 1);
  double v4 = *((double *)result + 2);
  double v5 = *((double *)result + 3);
  double v6 = *((double *)result + 4);
  purgeOutOfRangeCaptionCache(*result, MEMORY[0x1E4F1F9F8]);
  uint64_t v7 = *(void *)(v2 + 248);
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    goto LABEL_14;
  }
  int v10 = *(uint64_t (**)(uint64_t))(v9 + 56);
  if (!v10)
  {
LABEL_24:
    int v18 = -12782;
    goto LABEL_15;
  }
  LODWORD(result) = v10(v7);
  if (result)
  {
LABEL_25:
    int v18 = (int)result;
    goto LABEL_15;
  }
  uint64_t result = *(uint64_t **)(v2 + 584);
  if (!result) {
    goto LABEL_11;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)result, *(const void **)(v2 + 248));
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  uint64_t v12 = CMBaseObjectGetProtocolVTable();
  if (!v12 || (uint64_t v13 = *(void *)(v12 + 16)) == 0)
  {
LABEL_14:
    int v18 = -12788;
LABEL_15:
    uint64_t result = (uint64_t *)FigSignalErrorAt();
    goto LABEL_16;
  }
  long long v14 = *(uint64_t (**)(const void *))(v13 + 56);
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t result = (uint64_t *)v14(Value);
  if (result) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v15 = *(void *)(v2 + 64);
  if (!v15)
  {
LABEL_19:
    int v18 = 0;
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  long long v20 = *(uint64_t (**)(uint64_t, double, double, double, double))(v17 + 64);
  if (!v20) {
    goto LABEL_24;
  }
  uint64_t result = (uint64_t *)v20(v15, v3, v4, v5, v6);
  int v18 = (int)result;
  if (result) {
    goto LABEL_15;
  }
LABEL_16:
  long long v19 = (int *)v1[5];
  if (v19) {
    int *v19 = v18;
  }
  return result;
}

NSObject *FigCaptionRendererSessionClearForRLO(NSObject *result)
{
  unsigned int v8 = 0;
  if (result)
  {
    uint64_t v1 = result;
    MEMORY[0x19970E910](result[172].isa);
    int v2 = BYTE3(v1[168].isa);
    MEMORY[0x19970E930](v1[172].isa);
    if (v2)
    {
      uint64_t result = v1[21].isa;
      if (result)
      {
        uint64_t context = v1;
        long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
        long long v5 = *MEMORY[0x1E4F1DB20];
        long long v6 = v3;
        uint64_t v7 = &v8;
        dispatch_sync_f(result, &context, (dispatch_function_t)clearRLODo);
        return v8;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void clearRLODo(uint64_t *a1)
{
  __s1 = 0;
  uint64_t v2 = *a1;
  if (!*a1)
  {
    int v14 = 0;
    long long v6 = 0;
LABEL_24:
    unsigned int v8 = 0;
    goto LABEL_17;
  }
  clearDo(a1);
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v2 + 584));
  if (!Count)
  {
    long long v6 = 0;
LABEL_23:
    int v14 = FigSignalErrorAt();
    goto LABEL_24;
  }
  uint64_t v4 = Count;
  size_t v5 = 8 * Count;
  long long v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v7 = (const void **)malloc_type_malloc(v5, 0xC0040B8AA526DuLL);
  if (!v7) {
    goto LABEL_23;
  }
  unsigned int v8 = v7;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v2 + 584), v6, v7);
  if (v4 < 1)
  {
LABEL_14:
    int v14 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = v6[v9];
      FigCaptionRendererBaseProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (!ProtocolVTable || (uint64_t v12 = *(void *)(ProtocolVTable + 16)) == 0)
      {
        int v14 = -12788;
        goto LABEL_17;
      }
      uint64_t v13 = *(uint64_t (**)(const void *, char **))(v12 + 8);
      if (!v13) {
        break;
      }
      int v14 = v13(v10, &__s1);
      if (v14) {
        goto LABEL_17;
      }
      if (!strcmp(__s1, "FigCaptionRendererCaption")) {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 584), v6[v9]);
      }
      if (v4 == ++v9) {
        goto LABEL_14;
      }
    }
    int v14 = -12782;
  }
LABEL_17:
  uint64_t v15 = (int *)a1[5];
  if (v15) {
    *uint64_t v15 = v14;
  }
  free(v6);
  free(v8);
}

uint64_t FigCaptionRendererSessionSetHiddenCallback(uint64_t a1, uint64_t a2)
{
  if (a1 && !*(void *)(a1 + 1360) && !*(void *)(a1 + 1368))
  {
    *(void *)(a1 + 1360) = a2;
    *(void *)(a1 + 1368) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  }
  return 0;
}

uint64_t FigCaptionRendererSessionGetCALayerNodeLayoutForAnimation(uint64_t a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  long long v9 = *MEMORY[0x1E4F1DB28];
  long long v10 = v4;
  uint64_t v11 = 0;
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 584), *(const void **)(a1 + 248));
  getOutputNodeLayout((uint64_t)Value, (uint64_t)&v9);
  *(void *)(a1 + 1400) = 0;
  uint64_t v6 = v11;
  if (!v11) {
    return 4294950092;
  }
  uint64_t result = 0;
  long long v8 = v10;
  *a2 = v9;
  a2[1] = v8;
  *(void *)(a1 + 1400) = v6;
  return result;
}

uint64_t getOutputNodeLayout(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v23 = 0;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v5 = *(void *)(ProtocolVTable + 16);
      if (v5)
      {
        uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t *))(v5 + 112);
        if (v6)
        {
          if (!v6(a1, &v23))
          {
            if (!v23)
            {
LABEL_17:
              uint64_t v22 = 0;
              FigCaptionRendererOutputNodeProtocolGetProtocolID();
              uint64_t v18 = CMBaseObjectGetProtocolVTable();
              if (v18)
              {
                uint64_t v19 = *(void *)(v18 + 16);
                if (v19)
                {
                  long long v20 = *(unsigned int (**)(uint64_t, uint64_t *))(v19 + 40);
                  if (v20)
                  {
                    if (!v20(a1, &v22)) {
                      return FigCFArrayApplyFunction();
                    }
                  }
                }
              }
              return FigSignalErrorAt();
            }
            FigCaptionRendererOutputNodeProtocolGetProtocolID();
            uint64_t v7 = CMBaseObjectGetProtocolVTable();
            if (v7)
            {
              uint64_t v8 = *(void *)(v7 + 16);
              if (v8)
              {
                long long v9 = *(unsigned int (**)(uint64_t, uint64_t))(v8 + 64);
                if (v9)
                {
                  if (!v9(a1, a2))
                  {
                    FigCaptionRendererOutputNodeProtocolGetProtocolID();
                    uint64_t v10 = CMBaseObjectGetProtocolVTable();
                    if (v10)
                    {
                      uint64_t v11 = *(void *)(v10 + 16);
                      if (v11)
                      {
                        uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t))(v11 + 80);
                        if (v12)
                        {
                          if (!v12(a1, a2 + 16))
                          {
                            __asm { FMOV            V0.2D, #-0.5 }
                            *(float64x2_t *)a2 = vaddq_f64(*(float64x2_t *)a2, vmulq_f64(*(float64x2_t *)(a2 + 16), _Q0));
                            *(void *)(a2 + 32) = a1;
                            goto LABEL_17;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererSessionAddAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 1400);
  if (v3)
  {
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v7 = *(void *)(ProtocolVTable + 16);
      if (v7)
      {
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 176);
        if (v8) {
          v8(v3, a2, a3);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererSessionSetOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  if (a2)
  {
    context[0] = a1;
    context[1] = a2;
    void context[2] = a3;
    uint64_t v3 = *(NSObject **)(a1 + 168);
    if (v3) {
      dispatch_sync_f(v3, context, (dispatch_function_t)setOptionsDo);
    }
    return 0;
  }

  return FigSignalErrorAt();
}

void setOptionsDo(void *a1)
{
  uint64_t v2 = *a1;
  CFMutableArrayRef Mutable = *(__CFDictionary **)(*a1 + 1024);
  if (Mutable
    || (CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(v2 + 1024) = Mutable) != 0))
  {
    long long v4 = (const void *)a1[1];
    uint64_t v5 = (const void *)a1[2];
    if (v5)
    {
      CFDictionarySetValue(Mutable, v4, v5);
    }
    else
    {
      CFDictionaryRemoveValue(Mutable, v4);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigCaptionRendererSessionSetSeparated(uint64_t a1, unsigned __int8 a2)
{
  if (a1)
  {
    v4[0] = a1;
    v4[1] = a2;
    uint64_t v2 = *(NSObject **)(a1 + 168);
    if (v2) {
      dispatch_sync_f(v2, v4, (dispatch_function_t)setSeparatedDo);
    }
  }
  return 0;
}

uint64_t *setSeparatedDo(uint64_t *result)
{
  uint64_t v1 = *result;
  *(unsigned char *)(v1 + 1032) = *((unsigned char *)result + 8);
  *(unsigned char *)(v1 + 1033) = 1;
  return result;
}

uint64_t FigCaptionRendererSessionGetIsMACacheReady(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1349);
}

uint64_t FigCaptionRendererSessionCopyCaptionExtendedLanguages(uint64_t a1, __CFArray **a2)
{
  CMTimeValue value = 0;
  __s1 = 0;
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  uint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (v5)
  {
    uint64_t v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    if (!v6)
    {
      uint64_t v18 = FigSignalErrorAt();
      goto LABEL_18;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v5, v6);
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (Count >= 1)
      {
        uint64_t v8 = v5;
        do
        {
          long long v9 = *v8;
          FigCaptionRendererBaseProtocolGetProtocolID();
          Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
          if (!ProtocolVTable || (uint64_t v11 = *(void *)(ProtocolVTable + 16)) == 0)
          {
LABEL_19:
            uint64_t v18 = 4294954508;
            goto LABEL_21;
          }
          uint64_t v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
          if (!v12) {
            goto LABEL_20;
          }
          uint64_t v13 = v12(v9, &__s1);
          if (v13) {
            goto LABEL_27;
          }
          if (!strcmp(__s1, "FigCaptionRendererCaption"))
          {
            int v14 = *v8;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            uint64_t v15 = CMBaseObjectGetProtocolVTable();
            if (!v15) {
              goto LABEL_19;
            }
            uint64_t v16 = *(void *)(v15 + 16);
            if (!v16) {
              goto LABEL_19;
            }
            uint64_t v17 = *(uint64_t (**)(const void *, void **))(v16 + 64);
            if (!v17)
            {
LABEL_20:
              uint64_t v18 = 4294954514;
              goto LABEL_21;
            }
            uint64_t v13 = v17(v14, &value);
            if (v13) {
              goto LABEL_27;
            }
            CFArrayAppendValue(Mutable, value);
          }
          ++v8;
          --Count;
        }
        while (Count);
      }
      uint64_t v18 = 0;
      *a2 = Mutable;
LABEL_18:
      CFMutableArrayRef Mutable = 0;
      goto LABEL_21;
    }
    uint64_t v13 = FigSignalErrorAt();
LABEL_27:
    uint64_t v18 = v13;
  }
  else
  {
    uint64_t v18 = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
    uint64_t v6 = 0;
  }
LABEL_21:
  free(v5);
  free(v6);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v18;
}

uint64_t FigCaptionRendererSessionCopyCaptionImages(uint64_t a1, __CFArray **a2)
{
  CMTimeValue value = 0;
  __s1 = 0;
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  uint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v5)
  {
    uint64_t v18 = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
    uint64_t v6 = 0;
    goto LABEL_21;
  }
  uint64_t v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v6)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_18;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v5, v6);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_27:
    uint64_t v18 = v13;
    goto LABEL_21;
  }
  if (Count < 1)
  {
LABEL_17:
    uint64_t v18 = 0;
    *a2 = Mutable;
LABEL_18:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_21;
  }
  uint64_t v8 = v5;
  while (1)
  {
    long long v9 = *v8;
    FigCaptionRendererBaseProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_19;
    }
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (!v11) {
      goto LABEL_19;
    }
    uint64_t v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
    if (!v12) {
      break;
    }
    uint64_t v13 = v12(v9, &__s1);
    if (v13) {
      goto LABEL_27;
    }
    int v14 = *v8;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v15 = CMBaseObjectGetProtocolVTable();
    if (!v15 || (uint64_t v16 = *(void *)(v15 + 16)) == 0)
    {
LABEL_19:
      uint64_t v18 = 4294954508;
      goto LABEL_21;
    }
    uint64_t v17 = *(uint64_t (**)(const void *, void **))(v16 + 176);
    if (!v17) {
      break;
    }
    uint64_t v13 = v17(v14, &value);
    if (v13) {
      goto LABEL_27;
    }
    if (!strcmp(__s1, "FigCaptionRendererCaption")) {
      CFArrayAppendValue(Mutable, value);
    }
    ++v8;
    if (!--Count) {
      goto LABEL_17;
    }
  }
  uint64_t v18 = 4294954514;
LABEL_21:
  free(v5);
  free(v6);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v18;
}

uint64_t FigCaptionRendererSessionCopyOutputNodeImages(uint64_t a1, __CFArray **a2)
{
  CMTimeValue value = 0;
  __s1 = 0;
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  uint64_t v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v5)
  {
    uint64_t v18 = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
    uint64_t v6 = 0;
    goto LABEL_21;
  }
  uint64_t v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v6)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_18;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v5, v6);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_27:
    uint64_t v18 = v13;
    goto LABEL_21;
  }
  if (Count < 1)
  {
LABEL_17:
    uint64_t v18 = 0;
    *a2 = Mutable;
LABEL_18:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_21;
  }
  uint64_t v8 = 0;
  while (1)
  {
    long long v9 = v5[v8];
    FigCaptionRendererBaseProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_19;
    }
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (!v11) {
      goto LABEL_19;
    }
    uint64_t v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
    if (!v12) {
      break;
    }
    uint64_t v13 = v12(v9, &__s1);
    if (v13) {
      goto LABEL_27;
    }
    int v14 = v6[v8];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v15 = CMBaseObjectGetProtocolVTable();
    if (!v15 || (uint64_t v16 = *(void *)(v15 + 16)) == 0)
    {
LABEL_19:
      uint64_t v18 = 4294954508;
      goto LABEL_21;
    }
    uint64_t v17 = *(uint64_t (**)(const void *, void **))(v16 + 112);
    if (!v17) {
      break;
    }
    uint64_t v13 = v17(v14, &value);
    if (v13) {
      goto LABEL_27;
    }
    if (!strcmp(__s1, "FigCaptionRendererCaption")) {
      CFArrayAppendValue(Mutable, value);
    }
    if (Count == ++v8) {
      goto LABEL_17;
    }
  }
  uint64_t v18 = 4294954514;
LABEL_21:
  free(v5);
  free(v6);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v18;
}

uint64_t FigCaptionRendererSessionCopyOutputNodeImagesAndPositions(uint64_t a1, __CFArray **a2, __CFArray **a3)
{
  CMTimeValue value = 0;
  __s1 = 0;
  CGPoint v29 = (CGPoint)*MEMORY[0x1E4F1DAD8];
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  uint64_t v7 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v7)
  {
    uint64_t v27 = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
    uint64_t v11 = 0;
    uint64_t v8 = 0;
    goto LABEL_27;
  }
  uint64_t v8 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v8)
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_23;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v7, v8);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_24;
  }
  uint64_t v11 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  if (!v11)
  {
    uint64_t v17 = FigSignalErrorAt();
LABEL_36:
    uint64_t v27 = v17;
    goto LABEL_27;
  }
  if (Count < 1)
  {
LABEL_22:
    uint64_t v27 = 0;
    *a2 = Mutable;
    *a3 = v11;
LABEL_23:
    CFMutableArrayRef Mutable = 0;
LABEL_24:
    uint64_t v11 = 0;
    goto LABEL_27;
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = v7[v12];
    FigCaptionRendererBaseProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_25;
    }
    uint64_t v15 = *(void *)(ProtocolVTable + 16);
    if (!v15) {
      goto LABEL_25;
    }
    uint64_t v16 = *(uint64_t (**)(const void *, char **))(v15 + 8);
    if (!v16) {
      break;
    }
    uint64_t v17 = v16(v13, &__s1);
    if (v17) {
      goto LABEL_36;
    }
    uint64_t v18 = v8[v12];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v19 = CMBaseObjectGetProtocolVTable();
    if (!v19) {
      goto LABEL_25;
    }
    uint64_t v20 = *(void *)(v19 + 16);
    if (!v20) {
      goto LABEL_25;
    }
    long long v21 = *(uint64_t (**)(const void *, void **))(v20 + 112);
    if (!v21) {
      break;
    }
    uint64_t v17 = v21(v18, &value);
    if (v17) {
      goto LABEL_36;
    }
    uint64_t v22 = v8[v12];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v23 = CMBaseObjectGetProtocolVTable();
    if (!v23 || (uint64_t v24 = *(void *)(v23 + 16)) == 0)
    {
LABEL_25:
      uint64_t v27 = 4294954508;
      goto LABEL_27;
    }
    double v25 = *(uint64_t (**)(const void *, CGPoint *))(v24 + 64);
    if (!v25) {
      break;
    }
    uint64_t v17 = v25(v22, &v29);
    if (v17) {
      goto LABEL_36;
    }
    if (!strcmp(__s1, "FigCaptionRendererCaption"))
    {
      CFArrayAppendValue(Mutable, value);
      CFDictionaryRef DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v29);
      CFArrayAppendValue(v11, DictionaryRepresentation);
    }
    if (Count == ++v12) {
      goto LABEL_22;
    }
  }
  uint64_t v27 = 4294954514;
LABEL_27:
  free(v7);
  free(v8);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v27;
}

uint64_t FigCaptionRendererSessionUpdateMediaAccessibility(int64x2_t *a1, int a2, uint64_t a3)
{
  int64x2_t v4 = vdupq_n_s64(1uLL);
  a1[18] = v4;
  a1[19] = v4;
  a1[20] = v4;
  a1[21] = v4;
  a1[26].i64[0] = 1;
  a1[29].i64[1] = 0;
  a1[30].i64[1] = 0x3FF0000000000000;
  uint64_t result = 4294950096;
  switch(a2)
  {
    case 1:
      a1[30].i64[1] = 0x4010000000000000;
      a1[21].i64[1] = 1;
      goto LABEL_4;
    case 2:
      a1[30].i64[1] = 0x4000000000000000;
      a1[21].i64[1] = 0;
LABEL_4:
      uint64_t v7 = (const void *)a1[36].i64[0];
      if (v7) {
        CFRelease(v7);
      }
      uint64_t result = 0;
      a1[36].i64[0] = a3;
      return result;
    case 3:
      uint64_t v8 = (const void *)a1[27].i64[0];
      if (v8)
      {
        CFRelease(v8);
        a1[27].i64[0] = 0;
      }
      uint64_t CGColorSRGB = FigCreateCGColorSRGB();
      uint64_t result = 0;
      a1[27].i64[0] = CGColorSRGB;
      a1[18].i64[0] = 1;
      return result;
    case 4:
      uint64_t v10 = (const void *)a1[27].i64[0];
      if (v10)
      {
        CFRelease(v10);
        a1[27].i64[0] = 0;
      }
      uint64_t v11 = FigCreateCGColorSRGB();
      uint64_t result = 0;
      a1[27].i64[0] = v11;
      a1[18].i64[0] = 0;
      return result;
    case 5:
      uint64_t v12 = (const void *)a1[28].i64[0];
      if (v12)
      {
        CFRelease(v12);
        a1[28].i64[0] = 0;
      }
      uint64_t v13 = FigCreateCGColorSRGB();
      uint64_t result = 0;
      a1[28].i64[0] = v13;
      a1[19].i64[0] = 1;
      goto LABEL_19;
    case 6:
      int v14 = (const void *)a1[28].i64[0];
      if (v14)
      {
        CFRelease(v14);
        a1[28].i64[0] = 0;
      }
      uint64_t v15 = FigCreateCGColorSRGB();
      uint64_t result = 0;
      a1[28].i64[0] = v15;
      a1[19].i64[0] = 0;
LABEL_19:
      a1[29].i64[1] = 0x3FF0000000000000;
      break;
    case 19:
      uint64_t result = 0;
      a1[20].i64[1] = 1;
      break;
    case 20:
      uint64_t result = 0;
      a1[29].i64[1] = 0x3FD0000000000000;
      a1[20].i64[1] = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FigCaptionRendererSessionEnableSampleWithCTAttributes(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 1392) = a2;
  return 0;
}

uint64_t FigCaptionRendererSessionSynchronizeDefaults(dispatch_queue_t *a1)
{
  if (a1)
  {
    if (!a1[21]) {
      return 0;
    }
    uint64_t v2 = malloc_type_calloc(1uLL, 0x140uLL, 0x1060040D22D00F8uLL);
    if (v2)
    {
      uint64_t v3 = v2;
      void *v2 = CFRetain(a1);
      *((_WORD *)v3 + 152) = 256;
      *((unsigned char *)v3 + 306) = 0;
      v3[39] = 0;
      dispatch_async_f(a1[21], v3, (dispatch_function_t)updateMASettingsDoAsync);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

void updateMASettingsDoAsync(CFTypeRef *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)*a1 + 67);
  if (!*((unsigned char *)a1 + 304))
  {
    if (v3 != 2) {
      goto LABEL_63;
    }
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    fcrCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 131));
    uint64_t v2 = *a1;
    *((unsigned char *)*a1 + 1344) = 1;
LABEL_5:
    if (*((unsigned char *)a1 + 306))
    {
      int64x2_t v4 = (const void *)v2[130];
      CFTypeRef v5 = a1[39];
      v2[130] = v5;
      if (v5) {
        CFRetain(v5);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
    uint64_t v6 = (int64x2_t *)*a1;
    if (*((unsigned char *)a1 + 305) && v6[84].i8[0])
    {
      fcrCopyMediaAccessibilityParams((uint64_t)&v6[65].i64[1], (uint64_t)v6[18].i64);
      uint64_t v6 = (int64x2_t *)*a1;
      *((unsigned char *)*a1 + 1345) = 1;
    }
    goto LABEL_15;
  }
  fcrCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 36));
  uint64_t v6 = (int64x2_t *)*a1;
  if (!*((_DWORD *)*a1 + 67))
  {
    fcrCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)&v6[65].i64[1]);
    uint64_t v6 = (int64x2_t *)*a1;
    *((unsigned char *)*a1 + 1344) = 1;
  }
LABEL_15:
  applyContextDefaultsToMASettings(v6);
  CFTypeRef v7 = *a1;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v34 = 0x3FF0000000000000;
  if (*((_DWORD *)v7 + 67) == 2)
  {
    CFDictionaryRef v8 = (const __CFDictionary *)*((void *)v7 + 130);
    if (v8)
    {
      CGColorRef v9 = overridesCreateCGColorFromCFArray(v8, (void *)*MEMORY[0x1E4F1F600], &v36);
      CGColorRef v10 = v9;
      if (v9)
      {
        uint64_t v11 = (const void *)*((void *)v7 + 54);
        *((void *)v7 + 54) = v9;
        CFRetain(v9);
        if (v11) {
          CFRelease(v11);
        }
        *((void *)v7 + 36) = 0;
        *((void *)v7 + 57) = v36;
        *((void *)v7 + 39) = 0;
      }
      CGColorRef v12 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 130), (void *)*MEMORY[0x1E4F1F598], &v35);
      CGColorRef v13 = v12;
      if (v12)
      {
        int v14 = (const void *)*((void *)v7 + 55);
        *((void *)v7 + 55) = v12;
        CFRetain(v12);
        if (v14) {
          CFRelease(v14);
        }
        *((void *)v7 + 37) = 0;
        *((void *)v7 + 58) = v35;
        *((void *)v7 + 40) = 0;
      }
      CGColorRef v15 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 130), (void *)*MEMORY[0x1E4F1F548], &v34);
      CGColorRef v16 = v15;
      if (v15)
      {
        uint64_t v17 = (const void *)*((void *)v7 + 56);
        *((void *)v7 + 56) = v15;
        CFRetain(v15);
        if (v17) {
          CFRelease(v17);
        }
        *((void *)v7 + 38) = 0;
        *((void *)v7 + 59) = v34;
        *((void *)v7 + 41) = 0;
      }
      CFDictionaryRef v18 = (const __CFDictionary *)*((void *)v7 + 130);
      if (!v18) {
        goto LABEL_43;
      }
      uint64_t v19 = (const void *)*MEMORY[0x1E4F1F5A0];
      if (!*MEMORY[0x1E4F1F5A0]) {
        goto LABEL_43;
      }
      CMTimeValue value = 0;
      if (!CFDictionaryGetValueIfPresent(v18, v19, (const void **)&value)) {
        goto LABEL_43;
      }
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID != CFGetTypeID(value)) {
        goto LABEL_43;
      }
      uint64_t v21 = 1;
      if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F750], 1uLL))
      {
        if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F758], 1uLL))
        {
          if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F740], 1uLL))
          {
            if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F760], 1uLL))
            {
              if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E4F1F748], 1uLL))
              {
LABEL_43:
                if (v16) {
                  CFRelease(v16);
                }
                if (v13) {
                  CFRelease(v13);
                }
                if (v10) {
                  CFRelease(v10);
                }
                goto LABEL_49;
              }
              uint64_t v21 = 5;
            }
            else
            {
              uint64_t v21 = 4;
            }
          }
          else
          {
            uint64_t v21 = 3;
          }
        }
        else
        {
          uint64_t v21 = 2;
        }
      }
      *((void *)v7 + 70) = v21;
      *((void *)v7 + 52) = 0;
      goto LABEL_43;
    }
  }
LABEL_49:
  uint64_t v22 = *a1;
  if (*((unsigned char *)*a1 + 1349))
  {
    uint64_t v23 = v22[23];
    if (v23)
    {
      BOOL v24 = FigCDSTimerIsOn(v23);
      uint64_t v22 = *a1;
      if (v24)
      {
        FigCDSTimerStop(v22[23]);
        uint64_t v22 = *a1;
      }
    }
    uint64_t v25 = v22[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v27 = *(void *)(ProtocolVTable + 16);
      if (v27)
      {
        double v28 = *(void (**)(uint64_t))(v27 + 272);
        if (v28) {
          v28(v25);
        }
      }
    }
    CGPoint v29 = *a1;
    v29[76] = 0;
    uint64_t v30 = v29[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v31 = CMBaseObjectGetProtocolVTable();
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 16);
      if (v32)
      {
        uint64_t v33 = *(void (**)(uint64_t, void *))(v32 + 304);
        if (v33) {
          v33(v30, v29 + 36);
        }
      }
    }
    updateDisplayPort(*a1, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
    uint64_t v22 = *a1;
  }
  *((unsigned char *)v22 + 1349) = 1;
LABEL_63:
  fcrReleaseAndClearMediaAccessibilityParams((uint64_t)(a1 + 1));
  if (*a1) {
    CFRelease(*a1);
  }
  free(a1);
}

uint64_t FigCaptionRendererSessionSetDefaultTextStyle(dispatch_queue_t *a1, CFTypeRef cf)
{
  if (a1)
  {
    if (!cf || (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      if (!a1[21]) {
        return 0;
      }
      CFTypeRef v5 = malloc_type_calloc(1uLL, 0x140uLL, 0x1060040D22D00F8uLL);
      if (v5)
      {
        uint64_t v6 = v5;
        *CFTypeRef v5 = CFRetain(a1);
        *((_WORD *)v6 + 152) = 0;
        *((unsigned char *)v6 + 306) = 1;
        v6[39] = cf;
        dispatch_async_f(a1[21], v6, (dispatch_function_t)updateMASettingsDoAsync);
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCaptionRendererSessionLocalGetTypeID_sRegisterFigCaptionRendererSessionOnce, RegisterFigCaptionRendererSessionClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 24) = a1;
  *(void *)(Instance + 32) = a2;
  *(void *)(Instance + 16) = a3;
  *(void *)(Instance + 1384) = 0;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_DWORD *)(Instance + 1346) = 0;
  *(_DWORD *)(Instance + 268) = 3;
  *(unsigned char *)(Instance + 952) = 1;
  *(unsigned char *)(Instance + 968) = 0;
  *(void *)(Instance + 960) = 0xBFF0000000000000;
  *(void *)(Instance + 1040) = 0;
  *(_WORD *)(Instance + 1344) = 0;
  fcrReleaseAndClearMediaAccessibilityParams(Instance + 1048);
  *(_OWORD *)(Instance + 1360) = 0u;
  *(_DWORD *)(Instance + 1352) = 250;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(Instance + 584) = Mutable;
  if (!Mutable)
  {
    uint64_t v32 = FigSignalErrorAt();
    goto LABEL_16;
  }
  *(void *)(Instance + 616) = 0x100000001;
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 32);
  long long v11 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 48);
  long long v14 = *MEMORY[0x1E4F216C0];
  long long v13 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 16);
  CGColorRef v15 = (long long *)MEMORY[0x1E4F1DB28];
  *(void *)(Instance + 608) = 0;
  *(_OWORD *)(Instance + 720) = v13;
  *(_OWORD *)(Instance + 736) = v12;
  long long v16 = *v15;
  long long v17 = v15[1];
  *(_OWORD *)(Instance + 624) = *v15;
  *(_OWORD *)(Instance + 640) = v17;
  CFDictionaryRef v18 = (long long *)MEMORY[0x1E4F1DB30];
  *(_OWORD *)(Instance + 688) = v17;
  *(_OWORD *)(Instance + 704) = v14;
  long long v19 = *v18;
  *(_OWORD *)(Instance + 656) = *v18;
  *(_OWORD *)(Instance + 672) = v16;
  *(_OWORD *)(Instance + 752) = v11;
  *(_OWORD *)(Instance + 768) = v16;
  *(_OWORD *)(Instance + 784) = v17;
  *(_OWORD *)(Instance + 800) = v19;
  *(_OWORD *)(Instance + 816) = v16;
  *(_OWORD *)(Instance + 832) = v17;
  *(unsigned char *)(Instance + 1036) = 1;
  *(void *)(Instance + 1024) = 0;
  *(_WORD *)(Instance + 1032) = 0;
  *(_OWORD *)(Instance + 128) = v16;
  *(_OWORD *)(Instance + 144) = v17;
  *(_WORD *)(Instance + 272) = 0;
  *(void *)(Instance + 280) = 0x3FF0000000000000;
  *(void *)(Instance + 120) = 0xFFFFFFFFLL;
  *(void *)(Instance + 1376) = FigSimpleMutexCreate();
  uint64_t v20 = FigCaptionRendererParentIntervalCreate((void *)(Instance + 240));
  if (v20) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(Instance + 240);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v20);
  double v24 = v23;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (uint64_t v26 = *(void *)(ProtocolVTable + 16)) != 0)
  {
    uint64_t v27 = *(uint64_t (**)(uint64_t, double, double))(v26 + 16);
    if (v27)
    {
      uint64_t v20 = v27(v21, FigBaseObject, v24);
      if (!v20)
      {
        *(_OWORD *)(Instance + 88) = xmmword_1949962F0;
        *(_OWORD *)(Instance + 104) = xmmword_194996300;
        *(unsigned char *)(Instance + 40) = 0;
        snprintf(__str, 0x100uLL, "com.apple.coremedia.figfcrsession.messagequeue<%p>", (const void *)Instance);
        dispatch_queue_t v28 = dispatch_queue_create(__str, 0);
        *(void *)(Instance + 168) = v28;
        if (!v28
          || (snprintf(__str, 0x100uLL, "com.apple.coremedia.figfcrsession.workqueue<%p>", (const void *)Instance),
              dispatch_queue_t v29 = dispatch_queue_create(__str, 0),
              (*(void *)(Instance + 176) = v29) == 0))
        {
          uint64_t v32 = 0;
          goto LABEL_16;
        }
        uint64_t v20 = FigCaptionRendererTimerCreate(33, (uint64_t)onAnimationTimerTimeout, Instance, (uint64_t *)(Instance + 184));
        if (!v20)
        {
          CFTypeRef cf = 0;
          uint64_t v20 = FigCaptionRendererAVFLayoutRegionCreate((uint64_t)onDisplayUpdateEvent, Instance, &cf);
          if (!v20)
          {
            if (cf)
            {
              CFTypeRef v30 = CFRetain(cf);
              CFTypeRef v31 = cf;
              *(void *)(Instance + 248) = v30;
              if (v31) {
                CFRelease(v31);
              }
            }
            else
            {
              *(void *)(Instance + 248) = 0;
            }
            if (!*(void *)(Instance + 584))
            {
LABEL_25:
              uint64_t v20 = FigCaptionRendererMACacheCreate((uint64_t)onMAChanged, Instance, (void *)(Instance + 232));
              if (!v20)
              {
                uint64_t v32 = FigCaptionRendererMACacheLoad(*(void **)(Instance + 232), 0);
                if (!v32)
                {
                  *(_DWORD *)(Instance + 192) = 0;
                  long long v34 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
                  *(_OWORD *)(Instance + 200) = *MEMORY[0x1E4F1DB20];
                  *(_OWORD *)(Instance + 216) = v34;
                  *(unsigned char *)(Instance + 1392) = 0;
                  *a4 = Instance;
                  return v32;
                }
                goto LABEL_15;
              }
              goto LABEL_28;
            }
            *(void *)__str = 0;
            uint64_t v20 = FigCaptionRendererCALayerOutputNodeCreate(__str);
            if (!v20)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 584), *(const void **)(Instance + 248), *(const void **)__str);
              if (*(void *)__str) {
                CFRelease(*(CFTypeRef *)__str);
              }
              goto LABEL_25;
            }
          }
        }
      }
LABEL_28:
      uint64_t v32 = v20;
      goto LABEL_15;
    }
    uint64_t v32 = 4294954514;
  }
  else
  {
    uint64_t v32 = 4294954508;
  }
LABEL_15:
  FigSignalErrorAt();
LABEL_16:
  CFRelease((CFTypeRef)Instance);
  return v32;
}

void onAnimationTimerTimeout(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 192) = v2 - 33;
  double Rate = FigCDSTriggerGetRate(*(void *)(a1 + 48));
  if (v2 > 33)
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(void *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&v7, 33, 1000);
      CMTime lhs = v11;
      CMTimeAdd(&v10, &lhs, &v7);
      uint64_t v6 = *(void *)(a1 + 48);
      CMTime lhs = v10;
      FigCDSTriggerSetCurrentTime(v6, &lhs);
    }
    updateDisplayPort((void *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
  }
  else
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(void *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&rhs, *(int *)(a1 + 192) + 33, 1000);
      CMTime lhs = v11;
      CMTimeAdd(&v10, &lhs, &rhs);
      uint64_t v4 = *(void *)(a1 + 48);
      CMTime lhs = v10;
      FigCDSTriggerSetCurrentTime(v4, &lhs);
      updateDisplayPort((void *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
    }
    if (FigCDSTimerStop(*(void *)(a1 + 184)))
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(a1 + 192) = 0;
      long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(a1 + 200) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(a1 + 216) = v5;
    }
  }
}

uint64_t onDisplayUpdateEvent(uint64_t a1, uint64_t a2)
{
  double Rate = FigCDSTriggerGetRate(*(void *)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 4) + *(_DWORD *)a1;
  int v6 = v5 + 33;
  if (v5 < 165) {
    int v6 = 198;
  }
  if (Rate != 0.0) {
    int v5 = v6;
  }
  *(_DWORD *)(a2 + 192) = v5;
  *(CGRect *)(a2 + 200) = CGRectUnion(*(CGRect *)(a2 + 200), *(CGRect *)(a1 + 8));
  uint64_t result = FigCDSTimerIsOn(*(void *)(a2 + 184));
  if (!result)
  {
    uint64_t result = FigCaptionRendererTimerStart(*(void *)(a2 + 184));
    if (result)
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

void onMAChanged(void *a1, uint64_t a2)
{
  if (a1[21])
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x140uLL, 0x1060040D22D00F8uLL);
    if (v4)
    {
      int v5 = v4;
      fcrCopyMediaAccessibilityParams(a2, (uint64_t)(v4 + 4));
      *(void *)int v5 = CFRetain(a1);
      v5[152] = 1;
      *((unsigned char *)v5 + 306) = 0;
      *((void *)v5 + 39) = 0;
      int v6 = a1[21];
      dispatch_async_f(v6, v5, (dispatch_function_t)updateMASettingsDoAsync);
    }
  }
}

uint64_t RegisterFigCaptionRendererSessionClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCaptionRendererSessionID = result;
  return result;
}

void FigCaptionRendererSessionInit(uint64_t a1)
{
}

void FigCaptionRendererSession_Finalize(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 184);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(NSObject **)(a1 + 176);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 176) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 168);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 168) = 0;
  }
  if (*(void *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    int v5 = *(const void **)(a1 + 80);
    if (v5) {
      CFRelease(v5);
    }
  }
  if (*(void *)(a1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    int v6 = *(const void **)(a1 + 72);
    if (v6) {
      CFRelease(v6);
    }
  }
  CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 584);
  if (v7)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v7, *(const void **)(a1 + 248));
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v10 = *(void *)(ProtocolVTable + 16);
      if (v10)
      {
        CMTime v11 = *(void (**)(const void *, void))(v10 + 16);
        if (v11) {
          v11(Value, 0);
        }
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 584), *(const void **)(a1 + 248));
    long long v12 = *(const void **)(a1 + 584);
    if (v12) {
      CFRelease(v12);
    }
  }
  if (*(void *)(a1 + 1376))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 1376) = 0;
  }
  CFRelease(*(CFTypeRef *)(a1 + 248));
  CFRelease(*(CFTypeRef *)(a1 + 240));
  long long v13 = *(const void **)(a1 + 56);
  if (v13) {
    CFRelease(v13);
  }
  long long v14 = *(const void **)(a1 + 64);
  if (v14) {
    CFRelease(v14);
  }
  CGColorRef v15 = *(const void **)(a1 + 48);
  if (v15) {
    CFRelease(v15);
  }
  long long v16 = *(const void **)(a1 + 232);
  if (v16) {
    CFRelease(v16);
  }
  long long v17 = *(const void **)(a1 + 160);
  if (v17) {
    CFRelease(v17);
  }
  fcrReleaseAndClearMediaAccessibilityParams(a1 + 288);
  fcrReleaseAndClearMediaAccessibilityParams(a1 + 1048);
  CFDictionaryRef v18 = *(const void **)(a1 + 1040);
  if (v18) {
    CFRelease(v18);
  }
  long long v19 = *(const void **)(a1 + 928);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 912);
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = *(const void **)(a1 + 920);
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(a1 + 1016);
  if (v22) {
    CFRelease(v22);
  }
  double v23 = *(const void **)(a1 + 984);
  if (v23) {
    CFRelease(v23);
  }
  double v24 = *(const void **)(a1 + 976);
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = *(const void **)(a1 + 992);
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *(const void **)(a1 + 1024);
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v27 = *(const void **)(a1 + 1368);
  if (v27) {
    CFRelease(v27);
  }
  dispatch_queue_t v28 = *(const void **)(a1 + 1384);
  if (v28)
  {
    CFRelease(v28);
  }
}

__CFString *FigCaptionRendererSessionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererSession %p>", a1);
  return Mutable;
}

void timebaseChangedCallback(uint64_t a1, void *a2, uint64_t a3, const void *a4)
{
  if (a2 && a2[21])
  {
    int v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *int v6 = CFRetain(a2);
    if (a4) {
      CFTypeRef v7 = CFRetain(a4);
    }
    else {
      CFTypeRef v7 = 0;
    }
    v6[1] = v7;
    CFAllocatorRef v8 = a2[21];
    dispatch_async_f(v8, v6, (dispatch_function_t)timebaseChangedCallbackDo);
  }
}

void playbackItemChangedCallback(uint64_t a1, void *a2, uint64_t a3, const void *a4)
{
  if (a2 && a2[21])
  {
    int v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *int v6 = CFRetain(a2);
    if (a4) {
      CFTypeRef v7 = CFRetain(a4);
    }
    else {
      CFTypeRef v7 = 0;
    }
    v6[1] = v7;
    CFAllocatorRef v8 = a2[21];
    dispatch_async_f(v8, v6, (dispatch_function_t)playbackItemChangedCallbackDo);
  }
}

uint64_t FigCaptionRendererOutputNodeSetParentNode(uint64_t a1)
{
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v4 = *(void *)(result + 16);
    result += 16;
    uint64_t v3 = v4;
    if (v4)
    {
      int v5 = *(uint64_t (**)(uint64_t, void))(v3 + 16);
      if (v5)
      {
        return v5(a1, 0);
      }
    }
  }
  return result;
}

void timebaseChangedCallbackDo(void *a1)
{
  CFTypeRef cf = 0;
  int v2 = (void *)*a1;
  uint64_t v3 = (const void *)a1[1];
  if (!v3) {
    goto LABEL_16;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1[1]);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v7 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    int v8 = v7(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v9 = cf;
    if (v8) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = cf == 0;
    }
    if (v10) {
      goto LABEL_13;
    }
    uint64_t v11 = v2[6];
    if (v11) {
      FigCaptionRendererTriggerSetTimebase(v11, cf);
    }
    else {
      FigSignalErrorAt();
    }
  }
  CFTypeRef v9 = cf;
LABEL_13:
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v3);
LABEL_16:
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void playbackItemChangedCallbackDo(uint64_t *a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = (const void *)a1[1];
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFTypeRef v7 = *(unsigned int (**)(const void *, void, CFTypeRef *))(v5 + 32);
    if (!v7 || v7(v3, 0, &cf)) {
      goto LABEL_21;
    }
    CFTypeRef v6 = cf;
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  CFTypeRef v8 = *(CFTypeRef *)(v2 + 80);
  if (v8 != v6)
  {
    if (v8)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CFTypeRef v9 = *(const void **)(v2 + 80);
    }
    else
    {
      CFTypeRef v9 = 0;
    }
    *(void *)(v2 + 80) = v6;
    if (v6) {
      CFRetain(v6);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (*(void *)(v2 + 80))
    {
      BOOL v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      *BOOL v10 = CFRetain((CFTypeRef)v2);
      CFTypeRef v11 = *(CFTypeRef *)(v2 + 80);
      if (v11) {
        CFTypeRef v11 = CFRetain(v11);
      }
      v10[1] = v11;
      dispatch_async_f(*(dispatch_queue_t *)(v2 + 168), v10, (dispatch_function_t)timebaseChangedCallbackDo);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease((CFTypeRef)v2);
  }
  free(a1);
}

void onTriggerEvent(const void *a1, long long *a2, void *a3)
{
  if (a3 && a3[21])
  {
    CFTypeRef v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040E349F4B1uLL);
    *CFTypeRef v6 = CFRetain(a3);
    if (a1) {
      CFTypeRef v7 = CFRetain(a1);
    }
    else {
      CFTypeRef v7 = 0;
    }
    v6[1] = v7;
    long long v8 = *a2;
    v6[4] = *((void *)a2 + 2);
    *((_OWORD *)v6 + 1) = v8;
    CFTypeRef v9 = a3[21];
    dispatch_async_f(v9, v6, (dispatch_function_t)onTriggerEventDo);
  }
}

void onTriggerTimeUpdate(CMTime *a1, uint64_t a2)
{
  if (*(void *)(a2 + 32))
  {
    CMTime time = *a1;
    Float64 Seconds = CMTimeGetSeconds(&time);
    int v4 = (int)Seconds % 3600;
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d:%02d:%02d", ((int)Seconds / 3600), (int)(((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15)), (__int16)(v4- 60* (((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15))));
    (*(void (**)(CFStringRef, void))(a2 + 32))(v5, *(void *)(a2 + 16));
    if (v5) {
      CFRelease(v5);
    }
  }
}

void onTriggerEventDo(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(_OWORD *)&v12.CMTimeValue value = *(_OWORD *)(a1 + 16);
  v12.CMTimeEpoch epoch = *(void *)(a1 + 32);
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v12.value;
  time1.CMTimeEpoch epoch = *(void *)(a1 + 32);
  purgeOutOfRangeCaptionCache((uint64_t)v2, &time1);
  double v16 = 0.0;
  double v17 = 0.0;
  uint64_t v3 = v2[30];
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v5 = *(void *)(ProtocolVTable + 16)) == 0
    || (CFTypeRef v6 = *(unsigned int (**)(uint64_t, double *))(v5 + 8)) == 0
    || v6(v3, &v16))
  {
    FigSignalErrorAt();
    goto LABEL_13;
  }
  CMTime time1 = v12;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.CMTimeValue value = 0;
    copyCaptionsByRange(v2[30], 0, (CFTypeRef *)&time1, 0, v16, v17, v16, v17);
    purgeCaptionBitmapCaches((uint64_t)v2, (CFArrayRef)time1.value);
    CMTimeValue value = (const void *)time1.value;
    if (!time1.value) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  CMTime time1 = v12;
  CMTimeGetSeconds(&time1);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v7);
  time1.CMTimeValue value = 0;
  CFArrayRef theArray = 0;
  time2.CMTimeValue value = 0;
  copyCaptionsByRange(v2[30], (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v16, v17, FigBaseObject, v9);
  purgeCaptionBitmapCaches((uint64_t)v2, (CFArrayRef)time2.value);
  purgeCaptionBitmapCaches((uint64_t)v2, theArray);
  if (time2.value) {
    CFRelease((CFTypeRef)time2.value);
  }
  if (time1.value) {
    CFRelease((CFTypeRef)time1.value);
  }
  CMTimeValue value = theArray;
  if (theArray) {
LABEL_20:
  }
    CFRelease(value);
LABEL_13:
  updateDisplayPort(v2, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFTypeRef v11 = *(const void **)(a1 + 8);
  if (v11) {
    CFRelease(v11);
  }
  free((void *)a1);
}

void purgeOutOfRangeCaptionCache(uint64_t a1, CMTime *a2)
{
  double v15 = 0.0;
  double v16 = 0.0;
  uint64_t v4 = *(void *)(a1 + 240);
  FigCaptionRendererIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v6 = *(void *)(ProtocolVTable + 16)) == 0
    || (uint64_t v7 = *(unsigned int (**)(uint64_t, double *))(v6 + 8)) == 0
    || v7(v4, &v15))
  {
    FigSignalErrorAt();
    return;
  }
  CMTime time1 = *a2;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.CMTimeValue value = 0;
    copyCaptionsByRange(*(void *)(a1 + 240), 0, (CFTypeRef *)&time1, 0, v15, v16, v15, v16);
    purgeCaptionCachesFromCaptionsTimeline(a1, (CFArrayRef)time1.value);
    CMTimeValue value = (const void *)time1.value;
    if (!time1.value) {
      return;
    }
LABEL_16:
    CFRelease(value);
    return;
  }
  CMTime time1 = *a2;
  CMTimeGetSeconds(&time1);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v8);
  time1.CMTimeValue value = 0;
  CFArrayRef theArray = 0;
  time2.CMTimeValue value = 0;
  copyCaptionsByRange(*(void *)(a1 + 240), (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v15, v16, FigBaseObject, v10);
  purgeCaptionCachesFromCaptionsTimeline(a1, (CFArrayRef)time2.value);
  purgeCaptionCachesFromCaptionsTimeline(a1, theArray);
  if (time2.value) {
    CFRelease((CFTypeRef)time2.value);
  }
  if (time1.value) {
    CFRelease((CFTypeRef)time1.value);
  }
  CMTimeValue value = theArray;
  if (theArray) {
    goto LABEL_16;
  }
}

uint64_t FigCaptionRendererIntervalGetRange(uint64_t a1, uint64_t a2)
{
  FigCaptionRendererIntervalProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

void copyCaptionsByRange(uint64_t a1, CFArrayRef *a2, CFTypeRef *a3, CFArrayRef *a4, double a5, double a6, double a7, double a8)
{
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  CFArrayRef Copy = 0;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v16 = *(void *)(ProtocolVTable + 16);
    ProtocolVTable += 16;
    uint64_t v15 = v16;
    if (v16)
    {
      double v17 = *(uint64_t (**)(uint64_t, CFTypeRef *, double, double))(v15 + 32);
      if (v17) {
        Protocoluint64_t VTable = v17(a1, &cf, a7, a8);
      }
    }
  }
  double FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  double v20 = v19;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (v21)
  {
    uint64_t v23 = *(void *)(v21 + 16);
    v21 += 16;
    uint64_t v22 = v23;
    if (v23)
    {
      double v24 = *(uint64_t (**)(uint64_t, CFArrayRef *, double, double))(v22 + 32);
      if (v24) {
        uint64_t v21 = v24(a1, &theArray, FigBaseObject, v20);
      }
    }
  }
  double v25 = FigBytePumpGetFigBaseObject(v21);
  double v27 = v26;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  uint64_t v28 = CMBaseObjectGetProtocolVTable();
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      CFTypeRef v30 = *(void (**)(uint64_t, CFArrayRef *, double, double))(v29 + 32);
      if (v30) {
        v30(a1, &Copy, v25, v27);
      }
    }
  }
  CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
  if (theArray) {
    CFRelease(theArray);
  }
  subtractCFArrayFromCFArray((CFIndex)MutableCopy, (CFArrayRef)cf);
  CFArrayRef theArray = CFArrayCreateCopy(v31, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  CFArrayRef v33 = CFArrayCreateMutableCopy(v31, 0, Copy);
  if (Copy) {
    CFRelease(Copy);
  }
  subtractCFArrayFromCFArray((CFIndex)v33, (CFArrayRef)cf);
  CFArrayRef Copy = CFArrayCreateCopy(v31, v33);
  if (v33) {
    CFRelease(v33);
  }
  if (a2)
  {
    *a2 = theArray;
  }
  else if (theArray)
  {
    CFRelease(theArray);
  }
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = Copy;
  }
  else if (Copy)
  {
    CFRelease(Copy);
  }
}

CFIndex purgeCaptionCachesFromCaptionsTimeline(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v4 = *(void *)(a1 + 240);
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (CFIndex i = 0; i < result; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      FigCaptionRendererParentIntervalProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v9 = *(void *)(ProtocolVTable + 16);
        if (v9)
        {
          double v10 = *(void (**)(uint64_t, const void *))(v9 + 16);
          if (v10) {
            v10(v4, ValueAtIndex);
          }
        }
      }
      CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 584);
      if (v11)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(v11, ValueAtIndex);
        if (Value)
        {
          long long v13 = Value;
          FigCaptionRendererOutputNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(const void *, void))(v15 + 16);
              if (v16) {
                v16(v13, 0);
              }
            }
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 584), ValueAtIndex);
        }
      }
      CFIndex result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

CFIndex subtractCFArrayFromCFArray(CFIndex result, CFArrayRef theArray)
{
  if (result)
  {
    if (theArray)
    {
      CFArrayRef v3 = (const __CFArray *)result;
      CFIndex result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        for (CFIndex i = 0; i < result; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          v7.length = CFArrayGetCount(v3);
          v7.CFIndex location = 0;
          FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v3, v7, ValueAtIndex);
          if (FirstIndexOfValue != -1) {
            CFArrayRemoveValueAtIndex(v3, FirstIndexOfValue);
          }
          CFIndex result = CFArrayGetCount(theArray);
        }
      }
    }
  }
  return result;
}

CFIndex purgeCaptionBitmapCaches(uint64_t a1, CFArrayRef theArray)
{
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (CFIndex i = 0; i < result; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      uint64_t v18 = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          uint64_t v9 = *(void (**)(const void *, uint64_t *))(v8 + 32);
          if (v9) {
            v9(ValueAtIndex, &v18);
          }
        }
      }
      CGImageRef image = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          CMTime v12 = *(void (**)(const void *, CGImageRef *))(v11 + 176);
          if (v12) {
            v12(ValueAtIndex, &image);
          }
        }
      }
      if (image)
      {
        int BytesPerRow = CGImageGetBytesPerRow(image);
        *(_DWORD *)(a1 + 124) += CGImageGetHeight(image) * BytesPerRow;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v14 = CMBaseObjectGetProtocolVTable();
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 16);
          if (v15)
          {
            uint64_t v16 = *(void (**)(const void *))(v15 + 160);
            if (v16) {
              v16(ValueAtIndex);
            }
          }
        }
      }
      CFIndex result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

void onUserEvent(long long *a1, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 168))
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10C00407EF3FF2FuLL);
    v4[3] = a2;
    long long v5 = *a1;
    void v4[2] = *((void *)a1 + 2);
    *(_OWORD *)uint64_t v4 = v5;
    uint64_t v6 = *(NSObject **)(a2 + 168);
    dispatch_sync_f(v6, v4, (dispatch_function_t)onUserEventDo);
  }
}

void onViewportChanged(void *a1, int a2, double a3, double a4, double a5, double a6)
{
  if (a1 && a1[21])
  {
    CMTime v12 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x10C00405BF71875uLL);
    *((void *)v12 + 4) = CFRetain(a1);
    double *v12 = a3;
    v12[1] = a4;
    void v12[2] = a5;
    v12[3] = a6;
    if (a2)
    {
      onViewportChangedDo(v12);
    }
    else
    {
      long long v13 = a1[21];
      dispatch_async_f(v13, v12, (dispatch_function_t)onViewportChangedDo);
    }
  }
}

void drawInContext(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1349))
  {
    if (*(void *)(a2 + 168))
    {
      uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      if (v4)
      {
        long long v5 = v4;
        *uint64_t v4 = CFRetain((CFTypeRef)a2);
        v5[1] = a1;
        uint64_t v6 = *(NSObject **)(a2 + 168);
        if (a1)
        {
          dispatch_sync_f(v6, v5, (dispatch_function_t)composeSceneDo);
        }
        else
        {
          dispatch_async_f(v6, v5, (dispatch_function_t)composeSceneDo);
        }
      }
    }
  }
}

void onUserEventDo(int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 3);
  int v3 = *a1;
  double v4 = *((double *)a1 + 1);
  double v5 = *((double *)a1 + 2);
  char v22 = 0;
  if (v3 == 3)
  {
    uint64_t v10 = v2[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(ProtocolVTable + 16);
    if (!v12) {
      goto LABEL_21;
    }
    long long v13 = *(unsigned int (**)(uint64_t, char *, double, double))(v12 + 360);
    if (!v13 || v13(v10, &v22, v4, v5)) {
      goto LABEL_21;
    }
  }
  else if (v3 == 1)
  {
    uint64_t v6 = v2[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v7 = CMBaseObjectGetProtocolVTable();
    if (!v7) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8) {
      goto LABEL_21;
    }
    uint64_t v9 = *(unsigned int (**)(uint64_t, char *, double, double))(v8 + 352);
    if (!v9 || v9(v6, &v22, v4, v5)) {
      goto LABEL_21;
    }
  }
  uint64_t v14 = v2[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v15 = CMBaseObjectGetProtocolVTable();
  if (!v15) {
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16
    || (double v17 = *(unsigned int (**)(uint64_t))(v16 + 272)) == 0
    || v17(v14)
    || (v2[76] = 0,
        uint64_t v18 = v2[31],
        FigCaptionRendererNodeProtocolGetProtocolID(),
        (uint64_t v19 = CMBaseObjectGetProtocolVTable()) == 0)
    || (uint64_t v20 = *(void *)(v19 + 16)) == 0
    || (uint64_t v21 = *(unsigned int (**)(uint64_t, void *))(v20 + 304)) == 0
    || v21(v18, v2 + 36))
  {
LABEL_21:
    FigSignalErrorAt();
    goto LABEL_22;
  }
  updateDisplayPort(v2, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
LABEL_22:
  free(a1);
}

void onViewportChangedDo(double *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  double v3 = a1[2];
  if (v3 <= 0.0 || (double v4 = a1[3], v4 <= 0.0))
  {
    if (!v2) {
      goto LABEL_33;
    }
  }
  else
  {
    double v5 = *a1;
    double v6 = a1[1];
    if (*(void *)(v2 + 584))
    {
      *(_DWORD *)(v2 + 616) = FigCDSCALayerOutputGetOrientation();
      *(_DWORD *)(v2 + 620) = FigCaptionRendererCALayerOutputGetDisplayScale();
    }
    uint64_t v7 = *(void *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_31;
    }
    uint64_t v9 = *(void *)(ProtocolVTable + 16);
    if (!v9) {
      goto LABEL_31;
    }
    uint64_t v10 = *(unsigned int (**)(uint64_t, double, double, double, double))(v9 + 96);
    if (!v10) {
      goto LABEL_31;
    }
    if (v10(v7, v5, v6, v3, v4)) {
      goto LABEL_31;
    }
    uint64_t v11 = *(void *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v12 = CMBaseObjectGetProtocolVTable();
    if (!v12) {
      goto LABEL_31;
    }
    uint64_t v13 = *(void *)(v12 + 16);
    if (!v13) {
      goto LABEL_31;
    }
    uint64_t v14 = *(unsigned int (**)(uint64_t))(v13 + 272);
    if (!v14 || v14(v11)) {
      goto LABEL_31;
    }
    uint64_t v15 = *(const void **)(v2 + 984);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(v2 + 984) = 0;
    }
    uint64_t v16 = *(const void **)(v2 + 976);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v2 + 976) = 0;
    }
    double v17 = *(const void **)(v2 + 992);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v2 + 992) = 0;
    }
    if (FigGeometryMappingCreateCEA608Mappings()) {
      goto LABEL_31;
    }
    FCRGetCEA608CellSize(*(void *)(v2 + 984));
    *(void *)(v2 + 1000) = v18;
    *(void *)(v2 + 1008) = v19;
    uint64_t v20 = *(void *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v21 = CMBaseObjectGetProtocolVTable();
    if (!v21
      || (uint64_t v22 = *(void *)(v21 + 16)) == 0
      || (uint64_t v23 = *(unsigned int (**)(uint64_t, double, double, double, double))(v22 + 96)) == 0
      || v23(v20, v5, v6, v3, v4)
      || (uint64_t v24 = *(void *)(v2 + 248),
          FigCaptionRendererNodeProtocolGetProtocolID(),
          (uint64_t v25 = CMBaseObjectGetProtocolVTable()) == 0)
      || (uint64_t v26 = *(void *)(v25 + 16)) == 0
      || (double v27 = *(unsigned int (**)(uint64_t))(v26 + 272)) == 0
      || v27(v24))
    {
LABEL_31:
      FigSignalErrorAt();
    }
  }
  CFRelease((CFTypeRef)v2);
LABEL_33:
  free(a1);
}

void composeSceneDo(CGContext **a1)
{
  uint64_t v2 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 67) == 1 || *(void *)(v2 + 48))
  {
    uint64_t v3 = *(void *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable
      && (uint64_t v5 = *(void *)(ProtocolVTable + 16)) != 0
      && (double v6 = *(unsigned int (**)(uint64_t, uint64_t))(v5 + 376)) != 0
      && (uint64_t v7 = v2 + 288, !v6(v3, v2 + 288)))
    {
      if (*(_DWORD *)(v2 + 268) == 1)
      {
        CFArrayRef v8 = 0;
      }
      else
      {
        memset(&v36, 0, sizeof(v36));
        FigCDSTriggerGetCurrentTime(*(void *)(v2 + 48), &v36);
        CMTime v35 = v36;
        CFArrayRef v8 = (const __CFArray *)copyCurrentActiveCaptions(v2, &v35);
        CFIndex Count = CFArrayGetCount(v8);
        if (*(void *)(v2 + 1360))
        {
          CFIndex v10 = Count;
          if (*(void *)(v2 + 1368))
          {
            uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v11)
            {
              uint64_t v12 = (const void *)v11;
              (*(void (**)(BOOL, uint64_t))(v2 + 1360))(v10 == 0, v11);
              CFRelease(v12);
            }
          }
        }
        CMTime v35 = v36;
        updateNodeTree(v2, v8, (uint64_t)&v35);
        if (*(_DWORD *)(v2 + 268) == 3 && *(double *)(v2 + 640) > 0.0 && *(double *)(v2 + 648) > 0.0) {
          ensureCaptionsAreRendered(v2, *(void *)(v2 + 248));
        }
      }
      uint64_t v13 = *(void *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v14 = CMBaseObjectGetProtocolVTable();
      if (!v14) {
        goto LABEL_40;
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (!v15) {
        goto LABEL_40;
      }
      uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t))(v15 + 232);
      if (!v16) {
        goto LABEL_40;
      }
      if (v16(v13, 1)) {
        goto LABEL_40;
      }
      *(void *)(v2 + 608) = a1[1];
      uint64_t v17 = *(void *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v18 = CMBaseObjectGetProtocolVTable();
      if (!v18) {
        goto LABEL_40;
      }
      uint64_t v19 = *(void *)(v18 + 16);
      if (!v19) {
        goto LABEL_40;
      }
      uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t))(v19 + 304);
      if (!v20 || v20(v17, v2 + 288)) {
        goto LABEL_40;
      }
      CFDictionaryRef v21 = *(const __CFDictionary **)(v2 + 584);
      if (v21 && *(unsigned char *)(v2 + 1035))
      {
        CFDictionaryRef Value = CFDictionaryGetValue(v21, *(const void **)(v2 + 248));
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        uint64_t v23 = CMBaseObjectGetProtocolVTable();
        if (v23)
        {
          uint64_t v24 = *(void *)(v23 + 16);
          if (v24)
          {
            uint64_t v25 = *(void (**)(const void *))(v24 + 200);
            if (v25) {
              v25(Value);
            }
          }
        }
        uint64_t v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248));
        if (v26) {
          copyOutputNodeContentIntoCGContext((uint64_t)v26, a1[1]);
        }
      }
      uint64_t v27 = *(void *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v28 = CMBaseObjectGetProtocolVTable();
      if (!v28
        || (uint64_t v29 = *(void *)(v28 + 16)) == 0
        || (CFTypeRef v30 = *(unsigned int (**)(uint64_t, uint64_t))(v29 + 104)) == 0
        || v30(v27, v2 + 128))
      {
LABEL_40:
        FigSignalErrorAt();
      }
      uint64_t v31 = *(void *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        uint64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          long long v34 = *(void (**)(uint64_t, uint64_t))(v33 + 384);
          if (v34) {
            v34(v31, v7);
          }
        }
      }
      if (v8) {
        CFRelease(v8);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  CFRelease(*a1);
  free(a1);
}

CFTypeRef copyCurrentActiveCaptions(uint64_t a1, CMTime *a2)
{
  CMTime time = *a2;
  double Seconds = CMTimeGetSeconds(&time);
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a1 + 240);
  double FigBaseObject = FigBytePumpGetFigBaseObject(v5);
  double v8 = v7;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v10 = *(void *)(ProtocolVTable + 16);
    if (v10)
    {
      uint64_t v11 = *(void (**)(uint64_t, CFTypeRef *, double, double))(v10 + 32);
      if (v11) {
        v11(v4, &cf, FigBaseObject, v8);
      }
    }
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    CFArrayRef v14 = (const __CFArray *)MutableCopy;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (CFArrayGetCount(v14) >= 1)
    {
      CFIndex v15 = 0;
      int v16 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
        time.CMTimeValue value = 0;
        *(void *)&time.CMTimeScale timescale = 0;
        time.CMTimeValue value = FigBytePumpGetFigBaseObject(ValueAtIndex);
        *(void *)&time.CMTimeScale timescale = v18;
        FigCaptionRendererIntervalProtocolGetProtocolID();
        uint64_t v19 = CMBaseObjectGetProtocolVTable();
        if (v19)
        {
          uint64_t v20 = *(void *)(v19 + 16);
          if (v20)
          {
            CFDictionaryRef v21 = *(void (**)(const void *, CMTime *))(v20 + 8);
            if (v21) {
              v21(ValueAtIndex, &time);
            }
          }
        }
        if (*(double *)&time.value + *(double *)&time.timescale == Seconds)
        {
          CFArrayRemoveValueAtIndex(v14, v15);
          --v16;
        }
        CFIndex v15 = ++v16;
      }
      while (CFArrayGetCount(v14) > v16);
    }
    CFTypeRef cf = CFArrayCreateCopy(v12, v14);
    CFRelease(v14);
  }
  return cf;
}

void updateNodeTree(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  if (theArray)
  {
    double v6 = *(const void **)(a1 + 248);
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
    v239[0] = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable
      || (uint64_t v10 = *(void *)(ProtocolVTable + 16)) == 0
      || (uint64_t v11 = *(unsigned int (**)(const void *, CFArrayRef *))(v10 + 24)) == 0
      || v11(v6, v239))
    {
LABEL_279:
      FigSignalErrorAt();
LABEL_280:
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      return;
    }
    uint64_t v226 = a3;
    if ((*(_DWORD *)(a1 + 268) & 0xFFFFFFFE) == 2 && CFArrayGetCount(v239[0]) >= 1)
    {
      CFIndex v12 = 0;
      int v13 = 0;
      CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F6F0];
      v221 = v6;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v239[0], v12);
        v238 = 0;
        FigCaptionRendererBaseProtocolGetProtocolID();
        uint64_t v15 = CMBaseObjectGetProtocolVTable();
        if (!v15) {
          goto LABEL_279;
        }
        uint64_t v16 = *(void *)(v15 + 16);
        if (!v16) {
          goto LABEL_279;
        }
        uint64_t v17 = *(unsigned int (**)(const void *, const char **))(v16 + 8);
        if (!v17 || v17(ValueAtIndex, &v238)) {
          goto LABEL_279;
        }
        uint64_t v18 = v238;
        if (v238)
        {
          if (!strcmp(v238, "FigCaptionRendererStackLayoutRegion")
            || !strcmp(v18, "FigCaptionRendererTTMLRegion")
            || !strcmp(v18, "FigCaptionRendererCellStackLayoutRegion")
            || !strcmp(v18, "FigCaptionRendereriTTRegion")
            || !strcmp(v18, "FigCaptionRendererSRTRegion")
            || !strcmp(v18, "FigCaptionRendererFreeLayoutRegion"))
          {
            v237 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v27 = CMBaseObjectGetProtocolVTable();
            if (v27)
            {
              uint64_t v28 = *(void *)(v27 + 16);
              if (v28)
              {
                uint64_t v29 = *(void (**)(const void *, const char **))(v28 + 16);
                if (v29) {
                  v29(ValueAtIndex, &v237);
                }
              }
            }
            CFArrayRef theArraya = 0;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v30 = CMBaseObjectGetProtocolVTable();
            if (!v30) {
              goto LABEL_279;
            }
            uint64_t v31 = *(void *)(v30 + 16);
            if (!v31) {
              goto LABEL_279;
            }
            uint64_t v32 = *(unsigned int (**)(const void *, CFArrayRef *))(v31 + 24);
            if (!v32) {
              goto LABEL_279;
            }
            int v222 = v13;
            if (v32(ValueAtIndex, &theArraya)) {
              goto LABEL_279;
            }
            CFStringRef v33 = attrName;
            if (CFArrayGetCount(theArraya) < 1)
            {
LABEL_112:
              double v6 = v221;
              int v13 = v222;
              goto LABEL_113;
            }
            CFIndex v34 = 0;
            int v35 = 0;
            while (2)
            {
              CMTime v36 = CFArrayGetValueAtIndex(theArraya, v34);
              CFAttributedStringRef aStr = 0;
              FigCaptionRendererCaptionProtocolGetProtocolID();
              uint64_t v37 = CMBaseObjectGetProtocolVTable();
              if (v37)
              {
                uint64_t v38 = *(void *)(v37 + 16);
                if (v38)
                {
                  uint64_t v39 = *(void (**)(const void *, CFAttributedStringRef *))(v38 + 32);
                  if (v39) {
                    v39(v36, &aStr);
                  }
                }
              }
              effectiveRange.CFIndex location = 0;
              effectiveRange.length = 0;
              CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, v33, &effectiveRange);
              if (Attribute)
              {
                CFMutableDictionaryRef Mutable = searchNodesCopyByID(MutableCopy, Attribute);
                goto LABEL_51;
              }
              CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
              idx[0] = 0;
              if (CFArrayGetCount(MutableCopy) < 1) {
                goto LABEL_61;
              }
              CFIndex v43 = -1;
              do
              {
                if (CFArrayGetValueAtIndex(MutableCopy, idx[0]) == v36)
                {
                  CFIndex v43 = idx[0];
                  CFNumberRef v44 = CFNumberCreate(v7, kCFNumberCFIndexType, idx);
                  CFArrayAppendValue(Mutable, v44);
                  if (v44) {
                    CFRelease(v44);
                  }
                }
                CFIndex v45 = ++idx[0];
              }
              while (v45 < CFArrayGetCount(MutableCopy));
              BOOL v46 = v43 == -1;
              CFStringRef v33 = attrName;
              a3 = v226;
              if (v46)
              {
LABEL_61:
                if (Mutable) {
                  CFRelease(Mutable);
                }
              }
              else
              {
LABEL_51:
                if (Mutable)
                {
                  removeNodesByIndexes(MutableCopy, Mutable);
                  CFRelease(Mutable);
                  BOOL v42 = *(void *)(a1 + 72) != 0;
                  *(_OWORD *)idx = *(_OWORD *)a3;
                  v228[0] = *(double *)(a3 + 16);
                  updateTimedNode((uint64_t)v36, (long long *)idx, v42);
LABEL_111:
                  CFIndex v34 = ++v35;
                  if (CFArrayGetCount(theArraya) <= v35) {
                    goto LABEL_112;
                  }
                  continue;
                }
              }
              break;
            }
            int v233 = 0;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            uint64_t v47 = CMBaseObjectGetProtocolVTable();
            if (v47)
            {
              uint64_t v48 = *(void *)(v47 + 16);
              if (v48)
              {
                uint64_t v49 = *(void (**)(const void *, int *))(v48 + 48);
                if (v49) {
                  v49(v36, &v233);
                }
              }
            }
            __s1 = 0;
            FigCaptionRendererBaseProtocolGetProtocolID();
            uint64_t v50 = CMBaseObjectGetProtocolVTable();
            if (v50)
            {
              uint64_t v51 = *(void *)(v50 + 16);
              if (v51)
              {
                CFArrayRef v52 = *(void (**)(const void *, char **))(v51 + 8);
                if (v52) {
                  v52(v36, &__s1);
                }
              }
            }
            if (v233 != 1) {
              goto LABEL_104;
            }
            if (strcmp(v238, "FigCaptionRendererCellStackLayoutRegion")) {
              goto LABEL_104;
            }
            CFTypeRef v53 = __s1;
            if (!__s1) {
              goto LABEL_104;
            }
            uint64_t v54 = strcmp(__s1, "FigCaptionRendererCaption");
            if (v54)
            {
              uint64_t v54 = strcmp(v53, "FigCaptionRendererPaintOnCaption");
              if (v54) {
                goto LABEL_104;
              }
            }
            idx[0] = 0;
            idx[1] = 0;
            idx[0] = FigBytePumpGetFigBaseObject(v54);
            idx[1] = v55;
            FigCaptionRendererIntervalProtocolGetProtocolID();
            uint64_t v56 = CMBaseObjectGetProtocolVTable();
            if (v56)
            {
              uint64_t v58 = *(void *)(v56 + 16);
              v56 += 16;
              uint64_t v57 = v58;
              if (v58)
              {
                CFRange v59 = *(uint64_t (**)(const void *, CFIndex *))(v57 + 8);
                if (v59) {
                  uint64_t v56 = v59(v36, idx);
                }
              }
            }
            *(double *)&CFAttributedStringRef BOOLean = 0.0;
            double v231 = 0.0;
            *(double *)&CFAttributedStringRef BOOLean = FigBytePumpGetFigBaseObject(v56);
            double v231 = v60;
            if (CFArrayGetCount(MutableCopy) >= 1)
            {
              __int16 v61 = CFArrayGetValueAtIndex(MutableCopy, 0);
              CFDictionaryRef theDict = 0;
              FigCaptionRendererCaptionProtocolGetProtocolID();
              uint64_t v62 = CMBaseObjectGetProtocolVTable();
              if (!v62) {
                goto LABEL_279;
              }
              uint64_t v63 = *(void *)(v62 + 16);
              if (!v63) {
                goto LABEL_279;
              }
              uint64_t v64 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v63 + 16);
              if (!v64 || v64(v61, &theDict)) {
                goto LABEL_279;
              }
              CFDictionaryRef Value = (const char *)CFDictionaryGetValue(theDict, @"region");
              if (Value)
              {
                if (Value == v237)
                {
                  FigCaptionRendererIntervalProtocolGetProtocolID();
                  uint64_t v66 = CMBaseObjectGetProtocolVTable();
                  if (v66)
                  {
                    uint64_t v67 = *(void *)(v66 + 16);
                    if (v67)
                    {
                      CFArrayRef v68 = *(void (**)(const void *, CFAttributedStringRef *))(v67 + 8);
                      if (v68) {
                        v68(v61, &BOOLean);
                      }
                    }
                  }
                }
              }
            }
            if (*(double *)&BOOLean - (*(double *)idx + *(double *)&idx[1]) == 0.0)
            {
              uint64_t v69 = *(void *)(a1 + 240);
              FigCaptionRendererParentIntervalProtocolGetProtocolID();
              uint64_t v70 = CMBaseObjectGetProtocolVTable();
              if (!v70) {
                goto LABEL_279;
              }
              uint64_t v71 = *(void *)(v70 + 16);
              if (!v71) {
                goto LABEL_279;
              }
              uint64_t v72 = *(unsigned int (**)(uint64_t, const void *))(v71 + 16);
              if (!v72 || v72(v69, v36)) {
                goto LABEL_279;
              }
              double v73 = *(double *)idx;
              double v74 = v231 + *(double *)&idx[1];
              *(double *)&idx[1] = v231 + *(double *)&idx[1];
              FigCaptionRendererIntervalProtocolGetProtocolID();
              uint64_t v75 = CMBaseObjectGetProtocolVTable();
              if (v75)
              {
                uint64_t v76 = *(void *)(v75 + 16);
                if (v76)
                {
                  CFTypeRef v77 = *(void (**)(const void *, double, double))(v76 + 16);
                  if (v77) {
                    v77(v36, v73, v74);
                  }
                }
              }
              uint64_t v78 = *(void *)(a1 + 240);
              FigCaptionRendererParentIntervalProtocolGetProtocolID();
              uint64_t v79 = CMBaseObjectGetProtocolVTable();
              if (v79)
              {
                uint64_t v80 = *(void *)(v79 + 16);
                if (v80)
                {
                  CFTypeRef v81 = *(void (**)(uint64_t, const void *))(v80 + 8);
                  if (v81) {
                    v81(v78, v36);
                  }
                }
              }
            }
            else
            {
LABEL_104:
              CFDictionaryRef v82 = *(const __CFDictionary **)(a1 + 584);
              if (v82)
              {
                CMTimeRange v83 = CFDictionaryGetValue(v82, v36);
                if (v83)
                {
                  CMTimeValue v84 = v83;
                  FigCaptionRendererOutputNodeProtocolGetProtocolID();
                  uint64_t v85 = CMBaseObjectGetProtocolVTable();
                  if (v85)
                  {
                    uint64_t v86 = *(void *)(v85 + 16);
                    if (v86)
                    {
                      long long v87 = *(void (**)(const void *, void))(v86 + 16);
                      if (v87) {
                        v87(v84, 0);
                      }
                    }
                  }
                }
              }
              CFArrayRemoveValueAtIndex(theArraya, v34);
              --v35;
            }
            goto LABEL_111;
          }
          if (strcmp(v18, "FigCaptionRendererCaption") && strcmp(v18, "FigCaptionRendererPaintOnCaption")) {
            goto LABEL_113;
          }
          *(double *)&CFAttributedStringRef BOOLean = 0.0;
          FigCaptionRendererCaptionProtocolGetProtocolID();
          uint64_t v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            uint64_t v20 = *(void *)(v19 + 16);
            if (v20)
            {
              CFDictionaryRef v21 = *(void (**)(const void *, CFAttributedStringRef *))(v20 + 32);
              if (v21) {
                v21(ValueAtIndex, &BOOLean);
              }
            }
          }
          LODWORD(__s1) = 0;
          FigCaptionRendererCaptionProtocolGetProtocolID();
          uint64_t v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            uint64_t v23 = *(void *)(v22 + 16);
            if (v23)
            {
              uint64_t v24 = *(void (**)(const void *, char **))(v23 + 48);
              if (v24) {
                v24(ValueAtIndex, &__s1);
              }
            }
          }
          if (__s1 > 4 || __s1 == 2)
          {
            effectiveRange.CFIndex location = 0;
            effectiveRange.length = 0;
            CFStringRef v100 = (const __CFString *)CFAttributedStringGetAttribute(BOOLean, 0, attrName, &effectiveRange);
            if (!v100) {
              goto LABEL_113;
            }
            CMTime v101 = searchNodesCopyByID(MutableCopy, v100);
            if (!v101)
            {
              CFDictionaryRef v117 = *(const __CFDictionary **)(a1 + 584);
              if (v117)
              {
                CMTime v118 = CFDictionaryGetValue(v117, ValueAtIndex);
                if (v118) {
                  FigCaptionRendererOutputNodeSetParentNode((uint64_t)v118);
                }
              }
              CFArrayRef v119 = v239[0];
              v242.length = CFArrayGetCount(v239[0]);
              v242.CFIndex location = 0;
              FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v119, v242, ValueAtIndex);
              CFArrayRemoveValueAtIndex(v119, FirstIndexOfValue);
              --v13;
LABEL_168:
              a3 = v226;
              goto LABEL_113;
            }
            CMTime v102 = v101;
            removeNodesByIndexes(MutableCopy, v101);
            CFRelease(v102);
          }
          else
          {
            v240.length = CFArrayGetCount(MutableCopy);
            v240.CFIndex location = 0;
            CFIndex v25 = CFArrayGetFirstIndexOfValue(MutableCopy, v240, ValueAtIndex);
            if (v25 == -1)
            {
              v237 = 0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              uint64_t v88 = CMBaseObjectGetProtocolVTable();
              if (v88)
              {
                uint64_t v89 = *(void *)(v88 + 16);
                if (v89)
                {
                  CFArrayRef v90 = *(void (**)(const void *, const char **))(v89 + 8);
                  if (v90) {
                    v90(ValueAtIndex, &v237);
                  }
                }
              }
              if (!v237) {
                goto LABEL_121;
              }
              uint64_t v91 = strcmp(v237, "FigCaptionRendererPaintOnCaption");
              if (v91) {
                goto LABEL_121;
              }
              idx[0] = 0;
              idx[1] = 0;
              idx[0] = FigBytePumpGetFigBaseObject(v91);
              idx[1] = v103;
              FigCaptionRendererIntervalProtocolGetProtocolID();
              uint64_t v104 = CMBaseObjectGetProtocolVTable();
              if (v104)
              {
                uint64_t v106 = *(void *)(v104 + 16);
                v104 += 16;
                uint64_t v105 = v106;
                if (v106)
                {
                  uint64_t v107 = *(uint64_t (**)(const void *, CFIndex *))(v105 + 8);
                  if (v107) {
                    uint64_t v104 = v107(ValueAtIndex, idx);
                  }
                }
              }
              effectiveRange.CFIndex location = 0;
              effectiveRange.length = 0;
              effectiveRange.CFIndex location = FigBytePumpGetFigBaseObject(v104);
              effectiveRange.length = v108;
              if (CFArrayGetCount(MutableCopy) >= 1)
              {
                CFTypeRef v109 = CFArrayGetValueAtIndex(MutableCopy, 0);
                CFArrayRef theArraya = 0;
                FigCaptionRendererBaseProtocolGetProtocolID();
                uint64_t v110 = CMBaseObjectGetProtocolVTable();
                if (v110)
                {
                  uint64_t v111 = *(void *)(v110 + 16);
                  if (v111)
                  {
                    CMTime v112 = *(void (**)(const void *, CFArrayRef *))(v111 + 8);
                    if (v112) {
                      v112(v109, &theArraya);
                    }
                  }
                }
                CFAttributedStringRef aStr = 0;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                uint64_t v113 = CMBaseObjectGetProtocolVTable();
                if (v113)
                {
                  uint64_t v114 = *(void *)(v113 + 16);
                  if (v114)
                  {
                    CMTimeEpoch v115 = *(void (**)(const void *, CFAttributedStringRef *))(v114 + 16);
                    if (v115) {
                      v115(v109, &aStr);
                    }
                  }
                }
                if (aStr) {
                  CMTime v116 = CFDictionaryGetValue(aStr, @"region");
                }
                else {
                  CMTime v116 = 0;
                }
                if (theArraya && !strcmp((const char *)theArraya, "FigCaptionRendererPaintOnCaption") && !v116) {
                  FigCaptionRendererIntervalGetRange((uint64_t)v109, (uint64_t)&effectiveRange);
                }
              }
              if (*(double *)&effectiveRange.location - (*(double *)idx + *(double *)&idx[1]) != 0.0)
              {
                a3 = v226;
LABEL_121:
                CFDictionaryRef v92 = *(const __CFDictionary **)(a1 + 584);
                if (v92)
                {
                  CMTime v93 = CFDictionaryGetValue(v92, ValueAtIndex);
                  if (v93)
                  {
                    CMTime v94 = v93;
                    FigCaptionRendererOutputNodeProtocolGetProtocolID();
                    uint64_t v95 = CMBaseObjectGetProtocolVTable();
                    if (v95)
                    {
                      uint64_t v96 = *(void *)(v95 + 16);
                      if (v96)
                      {
                        __int16 v97 = *(void (**)(const void *, void))(v96 + 16);
                        if (v97) {
                          v97(v94, 0);
                        }
                      }
                    }
                  }
                }
                CFArrayRef v98 = v239[0];
                v241.length = CFArrayGetCount(v239[0]);
                v241.CFIndex location = 0;
                CFIndex v99 = CFArrayGetFirstIndexOfValue(v98, v241, ValueAtIndex);
                CFArrayRemoveValueAtIndex(v98, v99);
                --v13;
                goto LABEL_113;
              }
              uint64_t v121 = *(void *)(a1 + 240);
              FigCaptionRendererParentIntervalProtocolGetProtocolID();
              uint64_t v122 = CMBaseObjectGetProtocolVTable();
              if (!v122) {
                goto LABEL_279;
              }
              uint64_t v123 = *(void *)(v122 + 16);
              if (!v123) {
                goto LABEL_279;
              }
              CMTimeRange v124 = *(unsigned int (**)(uint64_t, const void *))(v123 + 16);
              if (!v124 || v124(v121, ValueAtIndex)) {
                goto LABEL_279;
              }
              double v125 = *(double *)idx;
              double v126 = *(double *)&effectiveRange.length + *(double *)&idx[1];
              *(double *)&idx[1] = *(double *)&effectiveRange.length + *(double *)&idx[1];
              FigCaptionRendererIntervalProtocolGetProtocolID();
              uint64_t v127 = CMBaseObjectGetProtocolVTable();
              if (v127)
              {
                uint64_t v128 = *(void *)(v127 + 16);
                if (v128)
                {
                  v129 = *(void (**)(const void *, double, double))(v128 + 16);
                  if (v129) {
                    v129(ValueAtIndex, v125, v126);
                  }
                }
              }
              uint64_t v130 = *(void *)(a1 + 240);
              FigCaptionRendererParentIntervalProtocolGetProtocolID();
              uint64_t v131 = CMBaseObjectGetProtocolVTable();
              if (v131)
              {
                uint64_t v132 = *(void *)(v131 + 16);
                if (v132)
                {
                  long long v133 = *(void (**)(uint64_t, const void *))(v132 + 8);
                  if (v133) {
                    v133(v130, ValueAtIndex);
                  }
                }
              }
              goto LABEL_168;
            }
            CFArrayRemoveValueAtIndex(MutableCopy, v25);
          }
          BOOL v26 = *(void *)(a1 + 72) != 0;
          *(_OWORD *)idx = *(_OWORD *)a3;
          v228[0] = *(double *)(a3 + 16);
          updateTimedNode((uint64_t)ValueAtIndex, (long long *)idx, v26);
        }
LABEL_113:
        CFIndex v12 = ++v13;
      }
      while (CFArrayGetCount(v239[0]) > v13);
    }
    if (CFArrayGetCount(MutableCopy) >= 1)
    {
      CFIndex v134 = 0;
      do
      {
        long long v135 = CFArrayGetValueAtIndex(MutableCopy, v134);
        BOOL v136 = *(void *)(a1 + 72) != 0;
        *(_OWORD *)idx = *(_OWORD *)a3;
        v228[0] = *(double *)(a3 + 16);
        updateTimedNode((uint64_t)v135, (long long *)idx, v136);
        effectiveRange.CFIndex location = 0;
        FigCaptionRendererCaptionProtocolGetProtocolID();
        uint64_t v137 = CMBaseObjectGetProtocolVTable();
        if (!v137) {
          goto LABEL_279;
        }
        uint64_t v138 = *(void *)(v137 + 16);
        if (!v138) {
          goto LABEL_279;
        }
        uint64_t v139 = *(unsigned int (**)(const void *, CFRange *))(v138 + 16);
        if (!v139 || v139(v135, &effectiveRange)) {
          goto LABEL_279;
        }
        CFStringRef v140 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)effectiveRange.location, @"region");
        CFStringRef attrNamea = (CFStringRef)v134;
        if (v140)
        {
          CFStringRef v141 = v140;
          if (CFArrayGetCount(v239[0]) >= 1)
          {
            CFIndex v142 = 0;
            do
            {
              unsigned int v143 = CFArrayGetValueAtIndex(v239[0], v142);
              *(double *)&CFAttributedStringRef BOOLean = 0.0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              uint64_t v144 = CMBaseObjectGetProtocolVTable();
              if (!v144) {
                goto LABEL_279;
              }
              uint64_t v145 = *(void *)(v144 + 16);
              if (!v145) {
                goto LABEL_279;
              }
              unsigned int v146 = *(unsigned int (**)(const void *, CFAttributedStringRef *))(v145 + 8);
              if (!v146 || v146(v143, &BOOLean)) {
                goto LABEL_279;
              }
              int v147 = (const char *)BOOLean;
              if (*(double *)&BOOLean != 0.0
                && (!strcmp((const char *)BOOLean, "FigCaptionRendererStackLayoutRegion")
                 || !strcmp(v147, "FigCaptionRendererTTMLRegion")
                 || !strcmp(v147, "FigCaptionRendererCellStackLayoutRegion")
                 || !strcmp(v147, "FigCaptionRendereriTTRegion")
                 || !strcmp(v147, "FigCaptionRendererSRTRegion")
                 || !strcmp(v147, "FigCaptionRendererFreeLayoutRegion")))
              {
                v238 = 0;
                FigCaptionRendererRegionProtocolGetProtocolID();
                uint64_t v148 = CMBaseObjectGetProtocolVTable();
                if (!v148) {
                  goto LABEL_279;
                }
                uint64_t v149 = *(void *)(v148 + 16);
                if (!v149) {
                  goto LABEL_279;
                }
                v150 = *(unsigned int (**)(const void *, const char **))(v149 + 16);
                if (!v150 || v150(v143, &v238)) {
                  goto LABEL_279;
                }
                if (CFStringCompare(v141, (CFStringRef)v238, 1uLL) == kCFCompareEqualTo)
                {
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v151 = CMBaseObjectGetProtocolVTable();
                  if (!v151) {
                    goto LABEL_279;
                  }
                  uint64_t v152 = *(void *)(v151 + 16);
                  if (!v152) {
                    goto LABEL_279;
                  }
                  uint64_t v153 = *(unsigned int (**)(const void *, const void *))(v152 + 40);
                  if (!v153) {
                    goto LABEL_279;
                  }
                  if (v153(v143, v135)) {
                    goto LABEL_279;
                  }
                  CFDictionaryRef v154 = *(const __CFDictionary **)(a1 + 584);
                  if (v154)
                  {
                    uint64_t v155 = CFDictionaryGetValue(v154, v135);
                    uint64_t v156 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 584), v143);
                    v223 = v155;
                    if (v155)
                    {
                      if (v156)
                      {
                        uint64_t v157 = v156;
                        FigCaptionRendererOutputNodeProtocolGetProtocolID();
                        uint64_t v158 = CMBaseObjectGetProtocolVTable();
                        if (!v158) {
                          goto LABEL_279;
                        }
                        uint64_t v159 = *(void *)(v158 + 16);
                        if (!v159) {
                          goto LABEL_279;
                        }
                        long long v160 = *(unsigned int (**)(const void *, const void *))(v159 + 24);
                        if (!v160 || v160(v157, v223)) {
                          goto LABEL_279;
                        }
                      }
                    }
                  }
                  long long v161 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
                  *(_OWORD *)idx = *MEMORY[0x1E4F1DB20];
                  *(_OWORD *)v228 = v161;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v162 = CMBaseObjectGetProtocolVTable();
                  if (v162)
                  {
                    uint64_t v163 = *(void *)(v162 + 16);
                    if (v163)
                    {
                      v164 = *(void (**)(const void *, CFIndex *))(v163 + 152);
                      if (v164) {
                        v164(v143, idx);
                      }
                    }
                  }
                  double v165 = *(double *)idx;
                  double v166 = *(double *)&idx[1];
                  long long v167 = *(_OWORD *)v228;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v168 = CMBaseObjectGetProtocolVTable();
                  if (!v168) {
                    goto LABEL_279;
                  }
                  uint64_t v169 = *(void *)(v168 + 16);
                  if (!v169) {
                    goto LABEL_279;
                  }
                  int v170 = *(unsigned int (**)(const void *, double, double, double, double))(v169 + 64);
                  if (!v170 || v170(v135, v165, v166, *(double *)&v167, *((double *)&v167 + 1))) {
                    goto LABEL_279;
                  }
                }
              }
            }
            while (CFArrayGetCount(v239[0]) > ++v142);
          }
        }
        else
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v171 = CMBaseObjectGetProtocolVTable();
          if (!v171) {
            goto LABEL_279;
          }
          uint64_t v172 = *(void *)(v171 + 16);
          if (!v172) {
            goto LABEL_279;
          }
          v173 = *(unsigned int (**)(const void *, const void *))(v172 + 40);
          if (!v173) {
            goto LABEL_279;
          }
          if (v173(v6, v135)) {
            goto LABEL_279;
          }
          CFDictionaryRef v174 = *(const __CFDictionary **)(a1 + 584);
          if (v174)
          {
            uint64_t v175 = CFDictionaryGetValue(v174, v135);
            __int16 v176 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 584), v6);
            if (v175)
            {
              uint64_t v177 = v176;
              if (v176)
              {
                FigCaptionRendererOutputNodeProtocolGetProtocolID();
                uint64_t v178 = CMBaseObjectGetProtocolVTable();
                if (!v178) {
                  goto LABEL_279;
                }
                uint64_t v179 = *(void *)(v178 + 16);
                if (!v179) {
                  goto LABEL_279;
                }
                __int16 v180 = *(unsigned int (**)(const void *, const void *))(v179 + 24);
                if (!v180 || v180(v177, v175)) {
                  goto LABEL_279;
                }
              }
            }
          }
          *(double *)&CFAttributedStringRef BOOLean = 0.0;
          uint64_t v181 = *(void *)(a1 + 248);
          FigCaptionRendererBaseProtocolGetProtocolID();
          uint64_t v182 = CMBaseObjectGetProtocolVTable();
          if (!v182) {
            goto LABEL_279;
          }
          uint64_t v183 = *(void *)(v182 + 16);
          if (!v183) {
            goto LABEL_279;
          }
          v184 = *(unsigned int (**)(uint64_t, CFAttributedStringRef *))(v183 + 8);
          if (!v184 || v184(v181, &BOOLean)) {
            goto LABEL_279;
          }
          long long v185 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
          *(_OWORD *)idx = *MEMORY[0x1E4F1DB20];
          *(_OWORD *)v228 = v185;
          if (!strcmp((const char *)BOOLean, "FigCaptionRendererAVFLayoutRegion"))
          {
            LODWORD(v238) = 0;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            uint64_t v189 = CMBaseObjectGetProtocolVTable();
            if (v189)
            {
              uint64_t v190 = *(void *)(v189 + 16);
              if (v190)
              {
                CMTimeValue v191 = *(void (**)(const void *, const char **))(v190 + 48);
                if (v191) {
                  v191(v135, &v238);
                }
              }
            }
            if (v238 == 3)
            {
              FigCaptionRendererNodeProtocolGetProtocolID();
              uint64_t v192 = CMBaseObjectGetProtocolVTable();
              if (v192)
              {
                uint64_t v193 = *(void *)(v192 + 16);
                if (v193)
                {
                  __int16 v194 = *(void (**)(const void *, CFIndex *))(v193 + 104);
                  if (v194) {
                    v194(v6, idx);
                  }
                }
              }
            }
            if (v228[0] == 0.0 || v228[1] == 0.0)
            {
              idx[0] = FCRGetVideoPresentationBounds(*(double *)(a1 + 656), *(double *)(a1 + 664), *(double *)(a1 + 624), *(double *)(a1 + 632), *(double *)(a1 + 640), *(double *)(a1 + 648));
              idx[1] = v195;
              v228[0] = v196;
              v228[1] = v197;
            }
          }
          else
          {
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v186 = CMBaseObjectGetProtocolVTable();
            if (v186)
            {
              uint64_t v187 = *(void *)(v186 + 16);
              if (v187)
              {
                v188 = *(void (**)(const void *, CFIndex *))(v187 + 152);
                if (v188) {
                  v188(v6, idx);
                }
              }
            }
          }
          double v198 = *(double *)idx;
          double v199 = *(double *)&idx[1];
          long long v200 = *(_OWORD *)v228;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v201 = CMBaseObjectGetProtocolVTable();
          if (!v201) {
            goto LABEL_279;
          }
          uint64_t v202 = *(void *)(v201 + 16);
          if (!v202) {
            goto LABEL_279;
          }
          v203 = *(unsigned int (**)(const void *, double, double, double, double))(v202 + 64);
          if (!v203 || v203(v135, v198, v199, *(double *)&v200, *((double *)&v200 + 1))) {
            goto LABEL_279;
          }
        }
        CFIndex v134 = (CFIndex)&attrNamea->isa + 1;
      }
      while (CFArrayGetCount(MutableCopy) > (uint64_t)&attrNamea->isa + 1);
    }
    if (!CFArrayGetCount(theArray) || CFArrayGetCount(v239[0]) < 1)
    {
LABEL_272:
      if (!*(void *)(a1 + 72))
      {
        *(_OWORD *)idx = *(_OWORD *)v226;
        v228[0] = *(double *)(v226 + 16);
        CFArrayRef v216 = (const __CFArray *)copyCurrentActiveCaptions(a1, (CMTime *)idx);
        if (CFArrayGetCount(v216) >= 1)
        {
          CFIndex v217 = 0;
          do
          {
            v218 = CFArrayGetValueAtIndex(v216, v217);
            v219 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
            if (!v219) {
              break;
            }
            v220 = v219;
            void *v219 = CFRetain((CFTypeRef)a1);
            v220[1] = CFRetain(v218);
            renderCaptionDo(v220);
            ++v217;
          }
          while (CFArrayGetCount(v216) > v217);
        }
        if (v216) {
          CFRelease(v216);
        }
      }
      goto LABEL_280;
    }
    CFIndex v204 = 0;
    CFAttributedStringRef v205 = *(const __CFAttributedString **)MEMORY[0x1E4F1CFC8];
    uint64_t v206 = *MEMORY[0x1E4F1CFD0];
    while (1)
    {
      v207 = CFArrayGetValueAtIndex(v239[0], v204);
      idx[0] = 0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      uint64_t v208 = CMBaseObjectGetProtocolVTable();
      if (!v208) {
        goto LABEL_279;
      }
      uint64_t v209 = *(void *)(v208 + 16);
      if (!v209) {
        goto LABEL_279;
      }
      v210 = *(unsigned int (**)(const void *, CFIndex *))(v209 + 8);
      if (!v210 || v210(v207, idx)) {
        goto LABEL_279;
      }
      if (idx[0] && !strcmp((const char *)idx[0], "FigCaptionRendererTTMLRegion"))
      {
        effectiveRange.CFIndex location = 0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v211 = CMBaseObjectGetProtocolVTable();
        if (!v211) {
          goto LABEL_279;
        }
        uint64_t v212 = *(void *)(v211 + 16);
        if (!v212) {
          goto LABEL_279;
        }
        v213 = *(unsigned int (**)(const void *, CFRange *))(v212 + 24);
        if (!v213 || v213(v207, &effectiveRange)) {
          goto LABEL_279;
        }
        if (!CFArrayGetCount((CFArrayRef)effectiveRange.location))
        {
          uint64_t v214 = (uint64_t)v207;
          uint64_t v215 = v206;
          goto LABEL_270;
        }
        CFAttributedStringRef BOOLean = v205;
        FigCaptionRendererTTMLRegionGetInvisible((uint64_t)v207, &BOOLean);
        if (CFBooleanGetValue(BOOLean))
        {
          uint64_t v214 = (uint64_t)v207;
          uint64_t v215 = (uint64_t)v205;
LABEL_270:
          FigCaptionRendererTTMLRegionSetInvisible(v214, v215);
        }
      }
      if (CFArrayGetCount(v239[0]) <= ++v204) {
        goto LABEL_272;
      }
    }
  }
}

CFIndex ensureCaptionsAreRendered(uint64_t a1, uint64_t a2)
{
  CFArrayRef theArray = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return FigSignalErrorAt();
  }
  double v6 = *(unsigned int (**)(uint64_t, CFArrayRef *))(v5 + 24);
  if (!v6 || v6(a2, &theArray)) {
    return FigSignalErrorAt();
  }
  CFIndex v7 = 0;
  double v8 = (long long *)MEMORY[0x1E4F1DB20];
  while (1)
  {
    CFIndex result = (CFIndex)theArray;
    if (theArray) {
      CFIndex result = CFArrayGetCount(theArray);
    }
    if (v7 >= result) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
    __s1 = 0;
    FigCaptionRendererBaseProtocolGetProtocolID();
    uint64_t v11 = CMBaseObjectGetProtocolVTable();
    if (!v11) {
      return FigSignalErrorAt();
    }
    uint64_t v12 = *(void *)(v11 + 16);
    if (!v12) {
      return FigSignalErrorAt();
    }
    int v13 = *(unsigned int (**)(const void *, char **))(v12 + 8);
    if (!v13 || v13(ValueAtIndex, &__s1)) {
      return FigSignalErrorAt();
    }
    CFArrayRef v14 = __s1;
    if (__s1)
    {
      if (!strcmp(__s1, "FigCaptionRendererCaption"))
      {
        long long v15 = v8[1];
        long long v26 = *v8;
        long long v27 = v15;
        char v25 = 0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v16 = CMBaseObjectGetProtocolVTable();
        if (!v16) {
          return FigSignalErrorAt();
        }
        uint64_t v17 = *(void *)(v16 + 16);
        if (!v17) {
          return FigSignalErrorAt();
        }
        uint64_t v18 = *(unsigned int (**)(const void *, long long *))(v17 + 104);
        if (!v18) {
          return FigSignalErrorAt();
        }
        if (v18(ValueAtIndex, &v26)) {
          return FigSignalErrorAt();
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v19 = CMBaseObjectGetProtocolVTable();
        if (!v19) {
          return FigSignalErrorAt();
        }
        uint64_t v20 = *(void *)(v19 + 16);
        if (!v20) {
          return FigSignalErrorAt();
        }
        CFDictionaryRef v21 = *(unsigned int (**)(const void *, char *))(v20 + 224);
        if (!v21 || v21(ValueAtIndex, &v25)) {
          return FigSignalErrorAt();
        }
        if (*(double *)&v27 == 0.0 || *((double *)&v27 + 1) == 0.0 || v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            uint64_t v23 = *(void *)(v22 + 16);
            if (v23)
            {
              uint64_t v24 = *(void (**)(const void *, uint64_t))(v23 + 280);
              if (v24) {
                v24(ValueAtIndex, a1 + 288);
              }
            }
          }
        }
      }
      else if (!strcmp(v14, "FigCaptionRendererTTMLRegion"))
      {
        ensureCaptionsAreRendered(a1, ValueAtIndex);
      }
    }
    ++v7;
  }
  return result;
}

void copyOutputNodeContentIntoCGContext(uint64_t a1, CGContext *a2)
{
  if (a1 && a2)
  {
    CGImageRef v20 = 0;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      goto LABEL_24;
    }
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (!v5) {
      goto LABEL_24;
    }
    double v6 = *(unsigned int (**)(uint64_t, CGImageRef *))(v5 + 112);
    if (!v6 || v6(a1, &v20)) {
      goto LABEL_24;
    }
    if (v20)
    {
      *(_OWORD *)uint64_t v19 = *MEMORY[0x1E4F1DAD8];
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t v7 = CMBaseObjectGetProtocolVTable();
      if (!v7) {
        goto LABEL_24;
      }
      uint64_t v8 = *(void *)(v7 + 16);
      if (!v8) {
        goto LABEL_24;
      }
      uint64_t v9 = *(unsigned int (**)(uint64_t, double *))(v8 + 64);
      if (!v9) {
        goto LABEL_24;
      }
      if (v9(a1, v19)) {
        goto LABEL_24;
      }
      CGSize v18 = (CGSize)*MEMORY[0x1E4F1DB30];
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t v10 = CMBaseObjectGetProtocolVTable();
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v10 + 16);
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v12 = *(unsigned int (**)(uint64_t, CGSize *))(v11 + 80);
      if (!v12 || v12(a1, &v18)) {
        goto LABEL_24;
      }
      v23.size = v18;
      v23.origin.x = v19[0] - v18.width * 0.5;
      v23.origin.y = v19[1] - v18.height * 0.5;
      CGRect v24 = CGRectIntegral(v23);
      CGContextDrawImage(a2, v24, v20);
    }
    CFArrayRef theArray = 0;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v13 = CMBaseObjectGetProtocolVTable();
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        long long v15 = *(unsigned int (**)(uint64_t, CFArrayRef *))(v14 + 40);
        if (v15)
        {
          if (!v15(a1, &theArray))
          {
            if (theArray)
            {
              uint64_t Count = CFArrayGetCount(theArray);
              if (Count >= 1)
              {
                v22.length = Count;
                v22.CFIndex location = 0;
                CFArrayApplyFunction(theArray, v22, (CFArrayApplierFunction)copyOutputNodeContentIntoCGContext, a2);
              }
            }
            return;
          }
        }
      }
    }
LABEL_24:
    FigSignalErrorAt();
    return;
  }

  FigSignalErrorAt();
}

__CFArray *searchNodesCopyByID(const __CFArray *a1, const __CFString *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex idx = 0;
  if (CFArrayGetCount(a1) <= 0) {
    goto LABEL_26;
  }
  CFIndex v6 = -1;
  CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F6F0];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, idx);
    __s1 = 0;
    FigCaptionRendererBaseProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable) {
      break;
    }
    uint64_t v9 = *(void *)(ProtocolVTable + 16);
    if (!v9) {
      break;
    }
    uint64_t v10 = *(unsigned int (**)(const void *, char **))(v9 + 8);
    if (!v10 || v10(ValueAtIndex, &__s1)) {
      break;
    }
    uint64_t v11 = __s1;
    if (__s1
      && strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
      && strcmp(v11, "FigCaptionRendererTTMLRegion")
      && strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
      && strcmp(v11, "FigCaptionRendereriTTRegion")
      && strcmp(v11, "FigCaptionRendererSRTRegion")
      && strcmp(v11, "FigCaptionRendererFreeLayoutRegion")
      && !strcmp(v11, "FigCaptionRendererCaption"))
    {
      CFAttributedStringRef aStr = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      uint64_t v12 = CMBaseObjectGetProtocolVTable();
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 16);
        if (v13)
        {
          uint64_t v14 = *(void (**)(const void *, CFAttributedStringRef *))(v13 + 32);
          if (v14) {
            v14(ValueAtIndex, &aStr);
          }
        }
      }
      effectiveRange.CFIndex location = 0;
      effectiveRange.length = 0;
      CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, attrName, &effectiveRange);
      if (CFStringCompare(Attribute, a2, 1uLL) == kCFCompareEqualTo)
      {
        CFIndex v6 = idx;
        CFNumberRef v16 = CFNumberCreate(v4, kCFNumberCFIndexType, &idx);
        CFArrayAppendValue(Mutable, v16);
        if (v16) {
          CFRelease(v16);
        }
      }
    }
    CFIndex v17 = ++idx;
    if (v17 >= CFArrayGetCount(a1)) {
      goto LABEL_25;
    }
  }
  FigSignalErrorAt();
LABEL_25:
  if (v6 == -1)
  {
LABEL_26:
    if (Mutable)
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

CFIndex removeNodesByIndexes(__CFArray *a1, CFArrayRef theArray)
{
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    uint64_t v5 = 0;
    for (CFIndex i = 0; i < result; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, i);
      CFIndex valuePtr = -1;
      CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr);
      valuePtr += v5;
      CFArrayRemoveValueAtIndex(a1, valuePtr);
      CFIndex result = CFArrayGetCount(theArray);
      --v5;
    }
  }
  return result;
}

uint64_t updateTimedNode(uint64_t a1, long long *a2, int a3)
{
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, char **))(v7 + 8);
  if (!v8 || v8(a1, &__s1)) {
    return FigSignalErrorAt();
  }
  uint64_t result = (uint64_t)__s1;
  if (__s1)
  {
    uint64_t result = strcmp(__s1, "FigCaptionRendererPaintOnCaption");
    if (!result)
    {
      long long v10 = *a2;
      uint64_t v11 = *((void *)a2 + 2);
      return FigCaptionRendererPaintOnCaptionSetCurrentTime(a1, (uint64_t)&v10, a3);
    }
  }
  return result;
}

void renderCaptionDo(void *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (const void *)a1[1];
  if (((*(_DWORD *)(*a1 + 120) & 0x80000000) != 0 || *(int *)(v3 + 124) > 0 || *(_DWORD *)(v3 + 268) == 1)
    && *(unsigned char *)(v3 + 1349))
  {
    *(void *)(v3 + 608) = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v5 = *(void *)(ProtocolVTable + 16);
      if (v5)
      {
        CFIndex v6 = *(void (**)(const void *, uint64_t))(v5 + 280);
        if (v6) {
          v6(v2, v3 + 288);
        }
      }
    }
    uint64_t v7 = *(void *)(*a1 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v8 = CMBaseObjectGetProtocolVTable();
    if (!v8) {
      goto LABEL_28;
    }
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9) {
      goto LABEL_28;
    }
    long long v10 = *(unsigned int (**)(uint64_t, uint64_t))(v9 + 104);
    if (!v10 || v10(v7, v3 + 128)) {
      goto LABEL_28;
    }
    uint64_t v11 = *(const void **)(v3 + 160);
    *(void *)(v3 + 160) = v2;
    if (v2) {
      CFRetain(v2);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (*(_DWORD *)(v3 + 268) != 1)
    {
      CGImageRef image = 0;
      uint64_t v12 = *(void *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v13 = CMBaseObjectGetProtocolVTable();
      if (!v13) {
        goto LABEL_28;
      }
      uint64_t v14 = *(void *)(v13 + 16);
      if (!v14) {
        goto LABEL_28;
      }
      long long v15 = *(unsigned int (**)(uint64_t, CGImageRef *))(v14 + 176);
      if (!v15) {
        goto LABEL_28;
      }
      if (v15(v12, &image)) {
        goto LABEL_28;
      }
      int BytesPerRow = CGImageGetBytesPerRow(image);
      size_t Height = CGImageGetHeight(image);
      *(_DWORD *)(v3 + 124) -= Height * BytesPerRow;
      if (*(_DWORD *)(v3 + 268) != 2)
      {
        double FigBaseObject = FigBytePumpGetFigBaseObject(Height);
        double v26 = v18;
        FigCaptionRendererIntervalProtocolGetProtocolID();
        uint64_t v19 = CMBaseObjectGetProtocolVTable();
        if (!v19
          || (uint64_t v20 = *(void *)(v19 + 16)) == 0
          || (CFDictionaryRef v21 = *(unsigned int (**)(const void *, double *))(v20 + 8)) == 0
          || v21(v2, &FigBaseObject)
          || (FigCDSTriggerManualTrigger(*(void *)(v3 + 48)),
              uint64_t v22 = *(void *)(v3 + 48),
              CMTimeMake(&v24, (uint64_t)((FigBaseObject + v26) * 1000.0), 1000),
              FigCaptionRendererTriggerScheduleEvent(v22, (uint64_t)v2, (long long *)&v24.value)))
        {
LABEL_28:
          FigSignalErrorAt();
        }
      }
    }
  }
  CGRect v23 = (const void *)a1[1];
  if (v23) {
    CFRelease(v23);
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  free(a1);
}

void layoutInContext(const void *a1, void *a2)
{
  if (a2[21])
  {
    CFAllocatorRef v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      *CFAllocatorRef v4 = CFRetain(a2);
      if (a1) {
        CFTypeRef v6 = CFRetain(a1);
      }
      else {
        CFTypeRef v6 = 0;
      }
      v5[1] = v6;
      uint64_t v7 = a2[21];
      dispatch_sync_f(v7, v5, (dispatch_function_t)layoutSceneDo);
    }
  }
}

void layoutSceneDo(uint64_t a1)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  v3[76] = 0;
  v3[75] = v2;
  uint64_t v4 = v3[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v6 = *(void *)(ProtocolVTable + 16)) == 0
    || (uint64_t v7 = *(unsigned int (**)(uint64_t, void *))(v6 + 304)) == 0
    || v7(v4, v3 + 36))
  {
    FigSignalErrorAt();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8) {
    CFRelease(v8);
  }

  free((void *)a1);
}

void applyContextDefaultsToMASettings(int64x2_t *a1)
{
  if (a1[16].i32[3] == 2 && !a1[84].i8[1])
  {
    int64x2_t v2 = vdupq_n_s64(1uLL);
    a1[18] = v2;
    a1[19] = v2;
    a1[20] = v2;
    a1[21] = v2;
    a1[26].i64[0] = 1;
    memset_pattern16(&a1[22], &xmmword_194995D30, 0x40uLL);
    uint64_t v3 = 0;
    a1[29].i64[1] = 0;
    uint64_t v4 = a1 + 31;
    do
    {
      uint64_t v5 = (const void *)v4->i64[v3];
      if (v5)
      {
        CFRelease(v5);
        v4->i64[v3] = 0;
      }
      ++v3;
    }
    while (v3 != 8);
    a1[30].i64[1] = 0x3FF0000000000000;
  }
}

void onCaptionInput(const void *a1, void *a2)
{
  if (a2 && a2[21])
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *uint64_t v4 = v5;
    uint64_t v6 = a2[21];
    dispatch_async_f(v6, v4, (dispatch_function_t)onCaptionInputDo);
  }
}

void onRegionInput(const void *a1, void *a2)
{
  if (a2 && a2[21])
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *uint64_t v4 = v5;
    uint64_t v6 = a2[21];
    dispatch_async_f(v6, v4, (dispatch_function_t)onRegionInputDo);
  }
}

void onTextHighlightArray(const void *a1, void *a2)
{
  if (a2 && a2[21])
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xE00401B06D0A3uLL);
    v4[1] = CFRetain(a2);
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *uint64_t v4 = v5;
    uint64_t v6 = a2[21];
    dispatch_sync_f(v6, v4, (dispatch_function_t)onTextHighlightArrayDo);
  }
}

void onCaptionInputDo(uint64_t a1)
{
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v145 = v2;
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  values = *(void **)a1;
  MEMORY[0x19970E910](*(void *)(v3 + 1376));
  if (*(unsigned char *)(v3 + 1347))
  {
    MEMORY[0x19970E930](*(void *)(v3 + 1376));
  }
  else
  {
    CFTypeRef v5 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *CFTypeRef v5 = (uint64_t)CFRetain((CFTypeRef)v3);
    CFTypeRef v6 = *(CFTypeRef *)(v3 + 72);
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    v5[1] = (uint64_t)v6;
    playbackItemChangedCallbackDo(v5);
    long long v7 = *(_OWORD *)(v3 + 784);
    *(_OWORD *)(v3 + 624) = *(_OWORD *)(v3 + 768);
    *(_OWORD *)(v3 + 640) = v7;
    long long v8 = *(_OWORD *)(v3 + 816);
    *(_OWORD *)(v3 + 656) = *(_OWORD *)(v3 + 800);
    *(_OWORD *)(v3 + 672) = v8;
    long long v9 = *(_OWORD *)(v3 + 848);
    *(_OWORD *)(v3 + 688) = *(_OWORD *)(v3 + 832);
    *(_OWORD *)(v3 + 704) = v9;
    long long v10 = *(_OWORD *)(v3 + 896);
    long long v11 = *(_OWORD *)(v3 + 864);
    *(_OWORD *)(v3 + 736) = *(_OWORD *)(v3 + 880);
    *(_OWORD *)(v3 + 752) = v10;
    *(_OWORD *)(v3 + 720) = v11;
    *(unsigned char *)(v3 + 1347) = 1;
    MEMORY[0x19970E930](*(void *)(v3 + 1376));
    UpdateLayoutContext(v3);
  }
  if (*(_DWORD *)(v3 + 268) == 1 || *(unsigned char *)(v3 + 40))
  {
    uint64_t v12 = *(void *)(v3 + 1384);
    if (v12)
    {
      FigCaptionRendererCaptionProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v14 = *(void *)(ProtocolVTable + 16);
        if (v14)
        {
          long long v15 = *(void (**)(const void *, uint64_t))(v14 + 72);
          if (v15) {
            v15(v4, v12);
          }
        }
      }
    }
    if (*(unsigned char *)(v3 + 1392))
    {
      FigCaptionRendererCaptionProtocolGetProtocolID();
      uint64_t v16 = CMBaseObjectGetProtocolVTable();
      if (v16)
      {
        uint64_t v17 = *(void *)(v16 + 16);
        if (v17)
        {
          double v18 = *(void (**)(const void *, void))(v17 + 120);
          if (v18) {
            v18(v4, *MEMORY[0x1E4F1CFD0]);
          }
        }
      }
    }
    double Seconds = 0.0;
    if (*(_DWORD *)(v3 + 268) != 1)
    {
      uint64_t v20 = *(void *)(v3 + 48);
      if (!v20) {
        goto LABEL_163;
      }
      value[0] = 0;
      value[1] = 0;
      *(void *)&long long v136 = 0;
      FigCDSTriggerGetCurrentTime(v20, (CMTime *)value);
      *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)value;
      time.CMTimeEpoch epoch = v136;
      double Seconds = CMTimeGetSeconds(&time);
    }
    int v142 = 0;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v21 = CMBaseObjectGetProtocolVTable();
    if (!v21) {
      goto LABEL_163;
    }
    uint64_t v22 = *(void *)(v21 + 16);
    if (!v22) {
      goto LABEL_163;
    }
    CGRect v23 = *(unsigned int (**)(const void *, int *))(v22 + 48);
    if (!v23 || v23(v4, &v142)) {
      goto LABEL_163;
    }
    if (v142 == 5 && *(_DWORD *)(v3 + 268) == 3)
    {
      value[0] = 0;
      value[1] = 0;
      uint64_t v24 = *(void *)(v3 + 240);
      FigCaptionRendererIntervalProtocolGetProtocolID();
      uint64_t v25 = CMBaseObjectGetProtocolVTable();
      if (v25)
      {
        uint64_t v26 = *(void *)(v25 + 16);
        if (v26)
        {
          long long v27 = *(unsigned int (**)(uint64_t, void **))(v26 + 8);
          if (v27)
          {
            if (!v27(v24, value))
            {
              time.CMTimeValue value = 0;
              copyCaptionsByRange(*(void *)(v3 + 240), 0, (CFTypeRef *)&time, 0, *(double *)value, *(double *)&value[1], *(double *)value, *(double *)&value[1]);
              purgeCaptionCachesFromCaptionsTimeline(v3, (CFArrayRef)time.value);
              if (time.value) {
                CFRelease((CFTypeRef)time.value);
              }
              goto LABEL_164;
            }
          }
        }
      }
      goto LABEL_163;
    }
    if (*(void *)(v3 + 584))
    {
      value[0] = 0;
      if (FigCaptionRendererCALayerOutputNodeCreate(value)) {
        goto LABEL_163;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 584), v4, value[0]);
      if (value[0]) {
        CFRelease(value[0]);
      }
    }
    if ((*(_DWORD *)(v3 + 268) & 0xFFFFFFFE) == 2)
    {
      FigCaptionRendererIntervalProtocolGetProtocolID();
      uint64_t v28 = CMBaseObjectGetProtocolVTable();
      if (!v28) {
        goto LABEL_163;
      }
      uint64_t v29 = *(void *)(v28 + 16);
      if (!v29) {
        goto LABEL_163;
      }
      uint64_t v30 = *(unsigned int (**)(const void *, double *))(v29 + 8);
      if (!v30 || v30(v4, &FigBaseObject)) {
        goto LABEL_163;
      }
      double v31 = Seconds + (double)*(uint64_t *)(v3 + 88);
      if (FigBaseObject + v145 < v31 || FigBaseObject > v31 + (double)*(uint64_t *)(v3 + 96)) {
        goto LABEL_164;
      }
    }
    __s1 = 0;
    uint64_t v32 = *(void *)(v3 + 248);
    FigCaptionRendererBaseProtocolGetProtocolID();
    uint64_t v33 = CMBaseObjectGetProtocolVTable();
    if (!v33) {
      goto LABEL_163;
    }
    uint64_t v34 = *(void *)(v33 + 16);
    if (!v34) {
      goto LABEL_163;
    }
    int v35 = *(unsigned int (**)(uint64_t, char **))(v34 + 8);
    if (!v35 || v35(v32, &__s1)) {
      goto LABEL_163;
    }
    long long v132 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    long long v133 = *MEMORY[0x1E4F1DB20];
    long long v139 = *MEMORY[0x1E4F1DB20];
    *(_OWORD *)CFStringRef v140 = v132;
    if (!strcmp(__s1, "FigCaptionRendererAVFLayoutRegion"))
    {
      if (v142 == 3)
      {
        uint64_t v40 = *(void *)(v3 + 248);
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v41 = CMBaseObjectGetProtocolVTable();
        if (!v41) {
          goto LABEL_163;
        }
        uint64_t v42 = *(void *)(v41 + 16);
        if (!v42) {
          goto LABEL_163;
        }
        CFIndex v43 = *(unsigned int (**)(uint64_t, long long *))(v42 + 104);
        if (!v43 || v43(v40, &v139)) {
          goto LABEL_163;
        }
      }
      if (v140[0] == 0.0 || v140[1] == 0.0)
      {
        *(void *)&long long v139 = FCRGetVideoPresentationBounds(*(double *)(v3 + 656), *(double *)(v3 + 664), *(double *)(v3 + 624), *(double *)(v3 + 632), *(double *)(v3 + 640), *(double *)(v3 + 648));
        *((void *)&v139 + 1) = v44;
        v140[0] = v45;
        v140[1] = v46;
      }
    }
    else
    {
      uint64_t v36 = *(void *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v37 = CMBaseObjectGetProtocolVTable();
      if (!v37) {
        goto LABEL_163;
      }
      uint64_t v38 = *(void *)(v37 + 16);
      if (!v38) {
        goto LABEL_163;
      }
      uint64_t v39 = *(unsigned int (**)(uint64_t, long long *))(v38 + 152);
      if (!v39 || v39(v36, &v139)) {
        goto LABEL_163;
      }
    }
    CFDictionaryRef theDict = 0;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    uint64_t v47 = CMBaseObjectGetProtocolVTable();
    if (!v47
      || (uint64_t v48 = *(void *)(v47 + 16)) == 0
      || (uint64_t v49 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v48 + 16)) == 0
      || v49(v4, &theDict))
    {
LABEL_163:
      FigSignalErrorAt();
      goto LABEL_164;
    }
    CFStringRef v50 = (const __CFString *)CFDictionaryGetValue(theDict, @"region");
    if (v50)
    {
      CFStringRef v51 = v50;
      time.CMTimeValue value = 0;
      uint64_t v52 = *(void *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v53 = CMBaseObjectGetProtocolVTable();
      if (!v53) {
        goto LABEL_163;
      }
      uint64_t v54 = *(void *)(v53 + 16);
      if (!v54) {
        goto LABEL_163;
      }
      CFIndex v55 = *(unsigned int (**)(uint64_t, CMTime *))(v54 + 24);
      if (!v55 || v55(v52, &time)) {
        goto LABEL_163;
      }
      if (CFArrayGetCount((CFArrayRef)time.value) >= 1)
      {
        CFIndex v56 = 0;
        do
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)time.value, v56);
          v147[0] = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          uint64_t v58 = CMBaseObjectGetProtocolVTable();
          if (!v58) {
            goto LABEL_163;
          }
          uint64_t v59 = *(void *)(v58 + 16);
          if (!v59) {
            goto LABEL_163;
          }
          double v60 = *(unsigned int (**)(const void *, const char **))(v59 + 8);
          if (!v60 || v60(ValueAtIndex, v147)) {
            goto LABEL_163;
          }
          __int16 v61 = v147[0];
          if (!strcmp(v147[0], "FigCaptionRendererStackLayoutRegion")
            || !strcmp(v61, "FigCaptionRendererTTMLRegion")
            || !strcmp(v61, "FigCaptionRendererCellStackLayoutRegion")
            || !strcmp(v61, "FigCaptionRendereriTTRegion")
            || !strcmp(v61, "FigCaptionRendererSRTRegion")
            || !strcmp(v61, "FigCaptionRendererFreeLayoutRegion"))
          {
            CFStringRef theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v62 = CMBaseObjectGetProtocolVTable();
            if (!v62) {
              goto LABEL_163;
            }
            uint64_t v63 = *(void *)(v62 + 16);
            if (!v63) {
              goto LABEL_163;
            }
            uint64_t v64 = *(unsigned int (**)(const void *, CFStringRef *))(v63 + 16);
            if (!v64 || v64(ValueAtIndex, &theString2)) {
              goto LABEL_163;
            }
            if (CFStringCompare(v51, theString2, 1uLL) == kCFCompareEqualTo)
            {
              *(_OWORD *)CMTimeValue value = v133;
              long long v136 = v132;
              FigCaptionRendererNodeProtocolGetProtocolID();
              uint64_t v100 = CMBaseObjectGetProtocolVTable();
              if (!v100) {
                goto LABEL_163;
              }
              uint64_t v101 = *(void *)(v100 + 16);
              if (!v101) {
                goto LABEL_163;
              }
              CMTime v102 = *(unsigned int (**)(const void *, void **))(v101 + 152);
              if (!v102) {
                goto LABEL_163;
              }
              if (v102(ValueAtIndex, value)) {
                goto LABEL_163;
              }
              CFIndex v103 = value[0];
              uint64_t v104 = value[1];
              long long v105 = v136;
              FigCaptionRendererNodeProtocolGetProtocolID();
              uint64_t v106 = CMBaseObjectGetProtocolVTable();
              if (!v106) {
                goto LABEL_163;
              }
              uint64_t v107 = *(void *)(v106 + 16);
              if (!v107) {
                goto LABEL_163;
              }
              CFIndex v108 = *(unsigned int (**)(const void *, double, double, double, double))(v107 + 64);
              if (!v108) {
                goto LABEL_163;
              }
              if (v108(v4, *(double *)&v103, *(double *)&v104, *(double *)&v105, *((double *)&v105 + 1))) {
                goto LABEL_163;
              }
              FigCaptionRendererNodeProtocolGetProtocolID();
              uint64_t v109 = CMBaseObjectGetProtocolVTable();
              if (!v109) {
                goto LABEL_163;
              }
              uint64_t v110 = *(void *)(v109 + 16);
              if (!v110) {
                goto LABEL_163;
              }
              uint64_t v111 = *(unsigned int (**)(const void *, const void *))(v110 + 8);
              if (!v111 || v111(v4, ValueAtIndex)) {
                goto LABEL_163;
              }
              if (!strcmp(v147[0], "FigCaptionRendererTTMLRegion"))
              {
                CFIndex v134 = 0;
                FigCaptionRendererTTMLRegionGetWritingMode((uint64_t)ValueAtIndex, &v134);
                uint64_t v128 = v134;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                uint64_t v129 = CMBaseObjectGetProtocolVTable();
                if (v129)
                {
                  uint64_t v130 = *(void *)(v129 + 16);
                  if (v130)
                  {
                    uint64_t v131 = *(void (**)(const void *, void *))(v130 + 112);
                    if (v131) {
                      v131(v4, v128);
                    }
                  }
                }
              }
              CFDictionaryRef v112 = *(const __CFDictionary **)(v3 + 584);
              if (v112)
              {
                uint64_t v113 = CFDictionaryGetValue(v112, ValueAtIndex);
                uint64_t v114 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 584), v4);
                if (v113)
                {
                  CMTimeEpoch v115 = v114;
                  if (v114)
                  {
                    FigCaptionRendererOutputNodeProtocolGetProtocolID();
                    uint64_t v116 = CMBaseObjectGetProtocolVTable();
                    if (!v116) {
                      goto LABEL_163;
                    }
                    uint64_t v117 = *(void *)(v116 + 16);
                    if (!v117) {
                      goto LABEL_163;
                    }
                    CMTime v118 = *(unsigned int (**)(const void *, const void *))(v117 + 24);
                    if (!v118 || v118(v113, v115)) {
                      goto LABEL_163;
                    }
                    CFIndex v134 = 0;
                    CFDictionaryRef v119 = *(const __CFDictionary **)(v3 + 1024);
                    if (v119)
                    {
                      if (CFDictionaryGetValueIfPresent(v119, @"separatedOptions", (const void **)&v134))
                      {
                        v120 = v134;
                        FigCaptionRendererOutputNodeProtocolGetProtocolID();
                        uint64_t v121 = CMBaseObjectGetProtocolVTable();
                        if (v121)
                        {
                          uint64_t v122 = *(void *)(v121 + 16);
                          if (v122)
                          {
                            uint64_t v123 = *(void (**)(const void *, uint64_t, void *))(v122 + 184);
                            if (v123) {
                              v123(v113, 0x1EE53DCB8, v120);
                            }
                          }
                        }
                      }
                    }
                    if (*(unsigned char *)(v3 + 1033))
                    {
                      uint64_t v124 = *(unsigned __int8 *)(v3 + 1032);
                      FigCaptionRendererOutputNodeProtocolGetProtocolID();
                      uint64_t v125 = CMBaseObjectGetProtocolVTable();
                      if (v125)
                      {
                        uint64_t v126 = *(void *)(v125 + 16);
                        if (v126)
                        {
                          uint64_t v127 = *(void (**)(const void *, uint64_t))(v126 + 192);
                          if (v127) {
                            v127(v113, v124);
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            }
          }
        }
        while (CFArrayGetCount((CFArrayRef)time.value) > ++v56);
      }
    }
    else
    {
      long long v65 = v139;
      long long v66 = *(_OWORD *)v140;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v67 = CMBaseObjectGetProtocolVTable();
      if (!v67) {
        goto LABEL_163;
      }
      uint64_t v68 = *(void *)(v67 + 16);
      if (!v68) {
        goto LABEL_163;
      }
      uint64_t v69 = *(unsigned int (**)(const void *, double, double, double, double))(v68 + 64);
      if (!v69) {
        goto LABEL_163;
      }
      if (v69(v4, *(double *)&v65, *((double *)&v65 + 1), *(double *)&v66, *((double *)&v66 + 1))) {
        goto LABEL_163;
      }
      uint64_t v70 = *(void *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v71 = CMBaseObjectGetProtocolVTable();
      if (!v71) {
        goto LABEL_163;
      }
      uint64_t v72 = *(void *)(v71 + 16);
      if (!v72) {
        goto LABEL_163;
      }
      double v73 = *(unsigned int (**)(const void *, uint64_t))(v72 + 8);
      if (!v73 || v73(v4, v70)) {
        goto LABEL_163;
      }
      CFDictionaryRef v74 = *(const __CFDictionary **)(v3 + 584);
      if (v74)
      {
        uint64_t v75 = CFDictionaryGetValue(v74, *(const void **)(v3 + 248));
        uint64_t v76 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 584), v4);
        if (v75)
        {
          uint64_t v77 = (uint64_t)v76;
          if (v76)
          {
            FigCaptionRendererOutputNodeProtocolGetProtocolID();
            uint64_t v78 = CMBaseObjectGetProtocolVTable();
            if (!v78) {
              goto LABEL_163;
            }
            uint64_t v79 = *(void *)(v78 + 16);
            if (!v79) {
              goto LABEL_163;
            }
            uint64_t v80 = *(unsigned int (**)(const void *, uint64_t))(v79 + 24);
            if (!v80 || v80(v75, v77)) {
              goto LABEL_163;
            }
            value[0] = 0;
            CFDictionaryRef v81 = *(const __CFDictionary **)(v3 + 1024);
            if (v81 && CFDictionaryGetValueIfPresent(v81, @"separatedOptions", (const void **)value)) {
              FigCaptionRendererOutputNodeSetOptions(v77, 0x1EE53DCB8, (uint64_t)value[0]);
            }
            if (*(unsigned char *)(v3 + 1033)) {
              FigCaptionRendererOutputNodeSetSeparated(v77, *(unsigned __int8 *)(v3 + 1032));
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v3 + 268) == 1)
    {
      CFArrayRef v82 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
      if (!v82) {
        goto LABEL_163;
      }
      CFArrayRef v83 = v82;
      updateNodeTree(v3, v82, MEMORY[0x1E4F1F9F8]);
      CFRelease(v83);
      CMTimeValue v84 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      if (v84)
      {
        uint64_t v85 = v84;
        void *v84 = CFRetain((CFTypeRef)v3);
        v85[1] = CFRetain(values);
        renderCaptionDo(v85);
      }
    }
    else
    {
      uint64_t v86 = *(void *)(v3 + 240);
      FigCaptionRendererParentIntervalProtocolGetProtocolID();
      uint64_t v87 = CMBaseObjectGetProtocolVTable();
      if (!v87) {
        goto LABEL_163;
      }
      uint64_t v88 = *(void *)(v87 + 16);
      if (!v88) {
        goto LABEL_163;
      }
      uint64_t v89 = *(unsigned int (**)(uint64_t, const void *))(v88 + 8);
      if (!v89 || v89(v86, v4)) {
        goto LABEL_163;
      }
      if (!*(void *)(v3 + 72)) {
        goto LABEL_164;
      }
      uint64_t v90 = *(void *)(v3 + 48);
      if (!v90) {
        goto LABEL_163;
      }
      value[0] = 0;
      value[1] = 0;
      *(void *)&long long v136 = 0;
      FigCDSTriggerGetCurrentTime(v90, (CMTime *)value);
      v147[0] = 0;
      v147[1] = 0;
      FigCaptionRendererIntervalProtocolGetProtocolID();
      uint64_t v91 = CMBaseObjectGetProtocolVTable();
      if (!v91) {
        goto LABEL_163;
      }
      uint64_t v92 = *(void *)(v91 + 16);
      if (!v92) {
        goto LABEL_163;
      }
      CMTime v93 = *(unsigned int (**)(const void *, const char **))(v92 + 8);
      if (!v93 || v93(v4, v147)) {
        goto LABEL_163;
      }
      *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)value;
      time.CMTimeEpoch epoch = v136;
      double v94 = CMTimeGetSeconds(&time);
      int v95 = *(_DWORD *)(v3 + 268);
      if (v95 == 2
        || v95 == 3
        && (double v96 = *(double *)v147 - v94, v97 = *(void *)(v3 + 104), v96 >= (double)v97)
        && v96 <= (double)(*(void *)(v3 + 112) + v97))
      {
        if (*(void *)(v3 + 168))
        {
          CFArrayRef v98 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
          if (v98)
          {
            CFIndex v99 = v98;
            *CFArrayRef v98 = CFRetain((CFTypeRef)v3);
            v99[1] = CFRetain(v4);
            dispatch_async_f(*(dispatch_queue_t *)(v3 + 168), v99, (dispatch_function_t)renderCaptionDo);
          }
        }
      }
    }
  }
LABEL_164:
  if (values) {
    CFRelease(values);
  }
  if (v3) {
    CFRelease((CFTypeRef)v3);
  }
  free((void *)a1);
}

uint64_t UpdateLayoutContext(uint64_t a1)
{
  CFTypeRef v50 = 0;
  CFTypeRef v51 = 0;
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 64) || *(double *)(a1 + 640) == 0.0 || *(double *)(a1 + 648) == 0.0) {
    goto LABEL_17;
  }
  long long v48 = 0u;
  long long v49 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  long long v46 = 0u;
  long long v47 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  FigGeometryRectMake();
  FigGeometryCoordinateSpaceCreate();
  long long v36 = 0u;
  long long v37 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  long long v34 = 0u;
  long long v35 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  FigGeometryRectMake();
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  FigGeometryCoordinateSpaceCreate();
  double v2 = *(const void **)(a1 + 1016);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1016) = 0;
  }
  FigGeometryMappingCreate();
  __s1 = 0;
  uint64_t v3 = *(void *)(a1 + 248);
  FigCaptionRendererBaseProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v5 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    uint64_t v18 = 4294954508;
LABEL_28:
    FigSignalErrorAt();
    goto LABEL_29;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, char **))(v5 + 8);
  if (!v6)
  {
LABEL_27:
    uint64_t v18 = 4294954514;
    goto LABEL_28;
  }
  uint64_t v7 = v6(v3, &__s1);
  if (v7
    || !strcmp(__s1, "FigCaptionRendererAVFLayoutRegion")
    && (uint64_t v7 = FigCaptionRendererAVFLayoutRegionSetLayoutContext(*(void *)(a1 + 248), *(void *)(a1 + 272), *(void *)(a1 + 280)), v7))
  {
LABEL_35:
    uint64_t v18 = v7;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 64))
  {
LABEL_17:
    uint64_t v18 = 0;
    goto LABEL_29;
  }
  double v8 = FCRGetVideoPresentationBounds(*(double *)(a1 + 656), *(double *)(a1 + 664), *(double *)(a1 + 624), *(double *)(a1 + 632), *(double *)(a1 + 640), *(double *)(a1 + 648));
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, double, double, double, double))(v17 + 56);
  if (!v19) {
    goto LABEL_27;
  }
  uint64_t v7 = v19(v15, v8, v10, v12, v14);
  if (v7) {
    goto LABEL_35;
  }
  uint64_t v20 = *(void *)(a1 + 64);
  double v21 = *(double *)(a1 + 624);
  double v22 = *(double *)(a1 + 632);
  double v23 = *(double *)(a1 + 640);
  double v24 = *(double *)(a1 + 648);
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  long long v27 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v26 + 48);
  if (!v27) {
    goto LABEL_27;
  }
  uint64_t v18 = v27(v20, 1, v21, v22, v23, v24);
  if (v18) {
    goto LABEL_28;
  }
LABEL_29:
  if (v50) {
    CFRelease(v50);
  }
  if (v51) {
    CFRelease(v51);
  }
  return v18;
}

uint64_t FigCaptionRendererOutputNodeSetOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v8 = *(void *)(result + 16);
    result += 16;
    uint64_t v7 = v8;
    if (v8)
    {
      double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 184);
      if (v9)
      {
        return v9(a1, a2, a3);
      }
    }
  }
  return result;
}

uint64_t FigCaptionRendererOutputNodeSetSeparated(uint64_t a1, uint64_t a2)
{
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

void onRegionInputDo(const void **a1)
{
  uint64_t v3 = *a1;
  double v2 = (char *)a1[1];
  if (*((void *)v2 + 73))
  {
    CMTimeValue value = 0;
    if (FigCaptionRendererCALayerOutputNodeCreate(&value)) {
      goto LABEL_46;
    }
    CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 73), v3, value);
    if (value) {
      CFRelease(value);
    }
  }
  __s1 = 0;
  uint64_t v4 = *((void *)v2 + 31);
  FigCaptionRendererBaseProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    goto LABEL_46;
  }
  uint64_t v6 = *(void *)(ProtocolVTable + 16);
  if (!v6) {
    goto LABEL_46;
  }
  uint64_t v7 = *(unsigned int (**)(uint64_t, char **))(v6 + 8);
  if (!v7 || v7(v4, &__s1)) {
    goto LABEL_46;
  }
  CGSize v8 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v45.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v45.CGSize size = v8;
  if (!strcmp(__s1, "FigCaptionRendererAVFLayoutRegion"))
  {
    v45.origin.x = FCRGetVideoPresentationBounds(*((double *)v2 + 82), *((double *)v2 + 83), *((double *)v2 + 78), *((double *)v2 + 79), *((double *)v2 + 80), *((double *)v2 + 81));
    v45.origin.y = v14;
    v45.size.CGFloat width = v15;
    v45.size.CGFloat height = v16;
  }
  else
  {
    uint64_t v9 = *((void *)v2 + 31);
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v10 = CMBaseObjectGetProtocolVTable();
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        double v12 = *(void (**)(uint64_t, CGRect *))(v11 + 152);
        if (v12) {
          v12(v9, &v45);
        }
      }
    }
    if (*((_DWORD *)v2 + 67) == 2 && CGRectEqualToRect(v45, *MEMORY[0x1E4F1DB28]))
    {
      CGSize v13 = (CGSize)*((_OWORD *)v2 + 49);
      v45.CGPoint origin = (CGPoint)*((_OWORD *)v2 + 48);
      v45.CGSize size = v13;
    }
  }
  char v44 = 0;
  uint64_t v17 = *((void *)v2 + 31);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v18 = CMBaseObjectGetProtocolVTable();
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      uint64_t v20 = *(void (**)(uint64_t, const void *, char *))(v19 + 32);
      if (v20) {
        v20(v17, v3, &v44);
      }
    }
  }
  if (!v44)
  {
    CGPoint origin = v45.origin;
    CGSize size = v45.size;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v23 = CMBaseObjectGetProtocolVTable();
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 16);
      if (v24)
      {
        uint64_t v25 = *(void (**)(const void *, double, double, double, double))(v24 + 64);
        if (v25) {
          v25(v3, origin.x, origin.y, size.width, size.height);
        }
      }
    }
    uint64_t v26 = *((void *)v2 + 31);
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v27 = CMBaseObjectGetProtocolVTable();
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        uint64_t v29 = *(void (**)(uint64_t, const void *))(v28 + 40);
        if (v29) {
          v29(v26, v3);
        }
      }
    }
    uint64_t v30 = *((void *)v2 + 31);
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v31 = CMBaseObjectGetProtocolVTable();
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 16);
      if (v32)
      {
        long long v33 = *(void (**)(const void *, uint64_t))(v32 + 8);
        if (v33) {
          v33(v3, v30);
        }
      }
    }
    CFDictionaryRef v34 = (const __CFDictionary *)*((void *)v2 + 73);
    if (!v34
      || (long long v35 = CFDictionaryGetValue(v34, *((const void **)v2 + 31)),
          long long v36 = CFDictionaryGetValue(*((CFDictionaryRef *)v2 + 73), v3),
          !v35)
      || (long long v37 = v36) == 0
      || (FigCaptionRendererOutputNodeProtocolGetProtocolID(), (uint64_t v38 = CMBaseObjectGetProtocolVTable()) != 0)
      && (uint64_t v39 = *(void *)(v38 + 16)) != 0
      && (long long v40 = *(unsigned int (**)(const void *, const void *))(v39 + 24)) != 0
      && !v40(v35, v37))
    {
      *((void *)v2 + 76) = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v41 = CMBaseObjectGetProtocolVTable();
      if (v41)
      {
        uint64_t v42 = *(void *)(v41 + 16);
        if (v42)
        {
          long long v43 = *(void (**)(const void *, char *))(v42 + 288);
          if (v43) {
            v43(v3, v2 + 288);
          }
        }
      }
      goto LABEL_47;
    }
LABEL_46:
    FigSignalErrorAt();
  }
LABEL_47:
  if (v3) {
    CFRelease(v3);
  }
  CFRelease(v2);
  free(a1);
}

void onTextHighlightArrayDo(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v5 = (const void *)v3[173];
  v3[173] = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v5) {
    CFRelease(v5);
  }
  CFArrayRef theArray = 0;
  uint64_t v6 = v3[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v8 = *(void *)(ProtocolVTable + 16)) == 0)
  {
    int v24 = -12788;
LABEL_30:
    int v28 = v24;
    goto LABEL_31;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v8 + 24);
  if (!v9)
  {
    int v24 = -12782;
    goto LABEL_30;
  }
  int v28 = v9(v6, &theArray);
  if (v28)
  {
LABEL_31:
    FigSignalErrorAt();
LABEL_32:
    CFRelease(v3);
    goto LABEL_33;
  }
  int v10 = 0;
  for (CFIndex i = 0; ; ++i)
  {
    CFIndex Count = (CFIndex)theArray;
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    if (i >= Count) {
      break;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    __s1[0] = 0;
    FigCaptionRendererBaseProtocolGetProtocolID();
    uint64_t v14 = CMBaseObjectGetProtocolVTable();
    if (!v14 || (uint64_t v15 = *(void *)(v14 + 16)) == 0)
    {
      int v25 = -12788;
LABEL_39:
      int v28 = v25;
LABEL_40:
      FigSignalErrorAt();
      goto LABEL_41;
    }
    CGFloat v16 = *(uint64_t (**)(const void *, char **))(v15 + 8);
    if (!v16)
    {
      int v25 = -12782;
      goto LABEL_39;
    }
    int v28 = v16(ValueAtIndex, __s1);
    if (v28) {
      goto LABEL_40;
    }
    if (__s1[0] && !strcmp(__s1[0], "FigCaptionRendererCaption"))
    {
      uint64_t v17 = v3[173];
      FigCaptionRendererCaptionProtocolGetProtocolID();
      uint64_t v18 = CMBaseObjectGetProtocolVTable();
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 16);
        if (v19)
        {
          uint64_t v20 = *(void (**)(const void *, uint64_t))(v19 + 72);
          if (v20) {
            v20(ValueAtIndex, v17);
          }
        }
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v21 = CMBaseObjectGetProtocolVTable();
      if (v21
        && (uint64_t v22 = *(void *)(v21 + 16)) != 0
        && (uint64_t v23 = *(void (**)(const void *, uint64_t))(v22 + 216)) != 0)
      {
        int v10 = 1;
        v23(ValueAtIndex, 1);
      }
      else
      {
        int v10 = 1;
      }
    }
  }
  if (v10)
  {
    __s1[0] = (char *)&v28;
    __s1[1] = (char *)v3;
    fcrSessionUpdateOutputDo((uint64_t)__s1);
  }
LABEL_41:
  if (v3) {
    goto LABEL_32;
  }
LABEL_33:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

void updateDisplayPortDoAsync(CFTypeRef *a1)
{
  uint64_t v2 = *((void *)*a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 8);
    if (v5) {
      v5(v2);
    }
    uint64_t v6 = *((void *)*a1 + 8);
    double v7 = *((double *)a1 + 1);
    double v8 = *((double *)a1 + 2);
    double v9 = *((double *)a1 + 3);
    double v10 = *((double *)a1 + 4);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CGSize v13 = *(void (**)(uint64_t, double, double, double, double))(v12 + 32);
    if (v13) {
      v13(v6, v7, v8, v9, v10);
    }
    uint64_t v14 = *((void *)*a1 + 8);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t))(v16 + 24);
    if (v17) {
      v17(v14);
    }
    uint64_t v18 = *((void *)*a1 + 8);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t))(v20 + 8);
    if (v21) {
      v21(v18);
    }
    uint64_t v22 = *((void *)*a1 + 8);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    int v25 = *(void (**)(uint64_t))(v24 + 16);
    if (v25) {
      v25(v22);
    }
    uint64_t v26 = *((void *)*a1 + 8);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(void (**)(uint64_t))(v28 + 24);
    if (v29) {
      v29(v26);
    }
  }
  CFRelease(*a1);

  free(a1);
}

CGColorRef overridesCreateCGColorFromCFArray(const __CFDictionary *a1, void *key, void *a3)
{
  CGColorRef v3 = 0;
  components[4] = *(CGFloat *)MEMORY[0x1E4F143B8];
  if (!a1 || !key) {
    return v3;
  }
  if (!CFDictionaryContainsKey(a1, key)) {
    return 0;
  }
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(a1, key);
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CGColorGetTypeID())
  {
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFArrayGetTypeID())
    {
      for (CFIndex i = 0; i != 4; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
        CGFloat v16 = 0.0;
        CFTypeID v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFNumberGetTypeID()) {
          break;
        }
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberCGFloatType, &v16);
        components[((_BYTE)i - 1) & 3] = v16;
      }
    }
    goto LABEL_12;
  }
  CGColorRef v3 = CGColorRetain((CGColorRef)Value);
  if (!v3)
  {
LABEL_12:
    CGSize v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    if (!v13)
    {
      CGColorRef v3 = 0;
      if (!a3) {
        return v3;
      }
      goto LABEL_15;
    }
    uint64_t v14 = v13;
    CGColorRef v3 = CGColorCreate(v13, components);
    CGColorSpaceRelease(v14);
  }
  if (a3) {
LABEL_15:
  }
    *a3 = 0x3FF0000000000000;
  return v3;
}

uint64_t FigCreateSubtitleRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, long long *a9, uint64_t a10, CFTypeRef *a11)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  CFTypeRef v35 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)__str = 0u;
  long long v37 = 0u;
  if (a3) {
    BOOL v11 = a2 != 0;
  }
  else {
    BOOL v11 = 0;
  }
  if ((a2 != 0) != (a3 != 0)) {
    goto LABEL_35;
  }
  BOOL v13 = a5 && a4 != 0;
  if ((a4 != 0) != (a5 != 0)) {
    goto LABEL_35;
  }
  BOOL v15 = a7 && a6 != 0;
  if ((a6 != 0) != (a7 != 0)) {
    goto LABEL_35;
  }
  uint64_t v17 = *MEMORY[0x1E4F1CF80];
  FigRenderPipelineGetClassID();
  uint64_t v18 = CMDerivedObjectCreate();
  if (v18) {
    goto LABEL_32;
  }
  uint64_t v30 = v17;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  snprintf(__str, 0x80uLL, "com.apple.coremedia.figsubtitlerenderpipeline(%p).callbackqueue", v35);
  dispatch_queue_t v20 = dispatch_queue_create(__str, 0);
  *(void *)(DerivedStorage + 8) = v20;
  if (!v20) {
    goto LABEL_35;
  }
  if (v11)
  {
    *(void *)(DerivedStorage + 144) = a2;
    uint64_t v21 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(void *)(DerivedStorage + 152) = v21;
    if (!v21) {
      goto LABEL_35;
    }
  }
  if ((!v13
     || (*(void *)(DerivedStorage + 160) = a4,
         uint64_t v22 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
         (*(void *)(DerivedStorage + 168) = v22) != 0))
    && (!v15
     || (*(void *)(DerivedStorage + 192) = a6,
         uint64_t v23 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
         (*(void *)(DerivedStorage + 200) = v23) != 0)))
  {
    CFTypeRef v24 = a8;
    if (a8) {
      CFTypeRef v24 = CFRetain(a8);
    }
    *(void *)(DerivedStorage + 176) = v24;
    *(_DWORD *)(DerivedStorage + 184) = 0;
    uint64_t v18 = FigTextSampleBufferSetUpState(DerivedStorage + 40, v30, a1);
    if (!v18)
    {
      long long v33 = *a9;
      uint64_t v34 = *((void *)a9 + 2);
      uint64_t v18 = FigSimpleRenderPipelineCreateWithCallback(v30, (uint64_t)subrp_sendSubtitleSampleForSampleBuffer, 0, (uint64_t)v35, (uint64_t)&v33, 0, (void *)(DerivedStorage + 24));
      if (!v18)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 24));
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v26) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v27 + 48);
        if (v28)
        {
          uint64_t v18 = v28(FigBaseObject, @"SourceSampleBufferQueue", v30, DerivedStorage + 32);
          if (!v18)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterAddListener();
            *a11 = v35;
            return v18;
          }
        }
        else
        {
          uint64_t v18 = 4294954514;
        }
      }
    }
  }
  else
  {
LABEL_35:
    uint64_t v18 = FigSignalErrorAt();
  }
LABEL_32:
  if (v35) {
    CFRelease(v35);
  }
  return v18;
}

uint64_t subrp_sendSubtitleSampleForSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  }
  if (!a2) {
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubuint64_t Type = CMFormatDescriptionGetMediaSubType(FormatDescription);
  CFTypeRef v8 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F258], 0);
  memset(&v50, 0, sizeof(v50));
  CMSampleBufferGetOutputPresentationTimeStamp(&v50, a2);
  memset(&v49, 0, sizeof(v49));
  CMSampleBufferGetOutputDuration(&v49, a2);
  long long v44 = *MEMORY[0x1E4F1DB20];
  long long v45 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v47 = *MEMORY[0x1E4F1DB20];
  long long v48 = v45;
  if (MediaSubType) {
    *(_DWORD *)(DerivedStorage + 184) = MediaSubType;
  }
  else {
    MediaSubuint64_t Type = *(_DWORD *)(DerivedStorage + 184);
  }
  if (!WebVTTIsFormatDescriptionForWebVTT(FormatDescription))
  {
    if (v8)
    {
      char v10 = 0;
      CFTypeRef v9 = 0;
      long long v47 = v44;
      long long v48 = v45;
      BOOL v11 = 1;
      LOBYTE(v12) = 1;
    }
    else
    {
      dispatch_queue_t v20 = *(const void **)(DerivedStorage + 136);
      v54[0] = 0;
      *(_OWORD *)numValues = v44;
      long long v53 = v45;
      CFAttributedStringRef aStr = 0;
      CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      int v22 = FigTextSampleBufferCopyAttributedString(DerivedStorage + 40, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2, &aStr, (char *)v54 + 1, v54, (double *)numValues);
      if (v22)
      {
        int v28 = v22;
        CFTypeRef v9 = 0;
        int v12 = 0;
        char v46 = 0;
        BOOL v11 = 0;
        uint64_t v26 = 0;
      }
      else
      {
        if (aStr)
        {
          CFStringRef String = CFAttributedStringGetString(aStr);
          if (!CFStringGetLength(String))
          {
            CFRelease(aStr);
            CFAttributedStringRef aStr = 0;
          }
        }
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v21, 0, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          int v25 = Mutable;
          if (aStr) {
            CFArrayAppendValue(Mutable, aStr);
          }
          uint64_t v26 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v26)
          {
            int v27 = FigCFDictionarySetInt32();
            if (v27)
            {
              int v28 = v27;
              CFTypeRef v9 = 0;
              int v12 = 0;
              char v46 = 0;
              BOOL v11 = 0;
            }
            else
            {
              if (v20) {
                CFDictionarySetValue(v26, @"SubtitleExtendedLanguageTag", v20);
              }
              if (subrp_isSubtitleOverHDRVideo()) {
                CFDictionarySetValue(v26, @"SubtitleOverHDRVideo", (const void *)*MEMORY[0x1E4F1CFD0]);
              }
              CFDictionarySetValue(v26, @"SubtitleContent", v25);
              BOOL v11 = aStr == 0;
              CFTypeRef v9 = CFRetain(v26);
              int v28 = 0;
              int v12 = HIBYTE(v54[0]);
              char v46 = v54[0];
              long long v47 = *(_OWORD *)numValues;
              long long v48 = v53;
            }
          }
          else
          {
            CFTypeRef v9 = 0;
            int v12 = 0;
            char v46 = 0;
            BOOL v11 = 0;
            int v28 = -12786;
          }
          CFRelease(v25);
        }
        else
        {
          CFTypeRef v9 = 0;
          int v12 = 0;
          char v46 = 0;
          BOOL v11 = 0;
          uint64_t v26 = 0;
          int v28 = -12786;
        }
      }
      if (aStr) {
        CFRelease(aStr);
      }
      if (v26) {
        CFRelease(v26);
      }
      if (v28) {
        goto LABEL_83;
      }
      char v10 = v46;
      if (!v12)
      {
        if (*(unsigned char *)(DerivedStorage + 106))
        {
          if (v11)
          {
            LOBYTE(v12) = 1;
          }
          else
          {
            *(_OWORD *)numValues = *(_OWORD *)&v50.value;
            *(void *)&long long v53 = v50.epoch;
            subrp_sendEmptySubtitleSample(a1, MediaSubType, (uint64_t)numValues, 1);
            LOBYTE(v12) = 0;
          }
          *(unsigned char *)(DerivedStorage + 106) = 0;
        }
        else
        {
          LOBYTE(v12) = 0;
        }
        goto LABEL_58;
      }
    }
    *(unsigned char *)(DerivedStorage + 106) = !v11;
    goto LABEL_58;
  }
  if (v8) {
    goto LABEL_10;
  }
  BOOL v13 = *(unint64_t **)(DerivedStorage + 112);
  if (!v13)
  {
    if (WebVTTSampleBufferParserCreate((void *)(DerivedStorage + 112))) {
      return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    }
    BOOL v13 = *(unint64_t **)(DerivedStorage + 112);
  }
  CFArrayRef v14 = *(const __CFArray **)(DerivedStorage + 120);
  BOOL v15 = *(const void **)(DerivedStorage + 136);
  CGFloat v16 = *(const void **)(DerivedStorage + 88);
  numValues[0] = 0;
  if (!subrp_SampleBufferShouldBeDisplayed(a2))
  {
LABEL_10:
    CFTypeRef v9 = 0;
  }
  else
  {
    int v17 = WebVTTCreateAttributedStringArrayFromSampleBuffer(v13, a2, v14, (__CFArray **)numValues);
    if (v17)
    {
      int v18 = v17;
      CFTypeRef v9 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v19 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v19)
      {
        int v30 = FigCFDictionarySetInt32();
        if (v30)
        {
          int v18 = v30;
          CFTypeRef v9 = 0;
        }
        else
        {
          if (v15) {
            CFDictionarySetValue(v19, @"SubtitleExtendedLanguageTag", v15);
          }
          if (subrp_isSubtitleOverHDRVideo()) {
            CFDictionarySetValue(v19, @"SubtitleOverHDRVideo", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          CFArrayRef v31 = (CFArrayRef)numValues[0];
          if (!numValues[0])
          {
            CFArrayRef v31 = CFArrayCreate(v29, 0, 0, MEMORY[0x1E4F1D510]);
            numValues[0] = (CFIndex)v31;
          }
          CFDictionarySetValue(v19, @"SubtitleContent", v31);
          if (v16) {
            CFDictionarySetValue(v19, @"SubtitleContentMetadata", v16);
          }
          CFTypeRef v9 = CFRetain(v19);
          int v18 = 0;
        }
      }
      else
      {
        CFTypeRef v9 = 0;
        int v18 = -12786;
      }
    }
    if (numValues[0]) {
      CFRelease((CFTypeRef)numValues[0]);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v18) {
      goto LABEL_83;
    }
  }
  char v10 = 0;
  long long v47 = v44;
  long long v48 = v45;
  LOBYTE(v12) = 1;
LABEL_58:
  if (!subrp_SampleBufferShouldBeDisplayed(a2)) {
    goto LABEL_83;
  }
  if (subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 176), MediaSubType))
  {
    if (*(void *)(DerivedStorage + 160))
    {
      uint64_t v32 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v32)
      {
        long long v33 = (const void *)v32;
        uint64_t v34 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
        if (v34)
        {
          CFTypeRef v35 = v34;
          if (a1) {
            CFTypeRef v36 = CFRetain(a1);
          }
          else {
            CFTypeRef v36 = 0;
          }
          *(void *)CFTypeRef v35 = v36;
          *((void *)v35 + 1) = *(void *)(DerivedStorage + 160);
          *((void *)v35 + 2) = CFRetain(v33);
          *((void *)v35 + 3) = CFRetain(a2);
          *(CMTime *)(v35 + 32) = v50;
          v35[56] = v12;
          dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v35, (dispatch_function_t)subrpNativeCallback);
        }
        else
        {
          FigSignalErrorAt();
        }
        long long v42 = v33;
LABEL_82:
        CFRelease(v42);
      }
    }
  }
  else if (*(void *)(DerivedStorage + 144))
  {
    uint64_t v37 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v37)
    {
      long long v38 = (const void *)v37;
      long long v39 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
      if (v39)
      {
        long long v40 = v39;
        if (a1) {
          CFTypeRef v41 = CFRetain(a1);
        }
        else {
          CFTypeRef v41 = 0;
        }
        *(void *)long long v40 = v41;
        *((void *)v40 + 1) = *(void *)(DerivedStorage + 144);
        *((void *)v40 + 2) = CFRetain(v38);
        if (v9) {
          CFTypeRef v43 = CFRetain(v9);
        }
        else {
          CFTypeRef v43 = 0;
        }
        *((void *)v40 + 3) = v43;
        *(CMTime *)(v40 + 32) = v50;
        v40[80] = v12;
        v40[81] = v10;
        *(_OWORD *)(v40 + 88) = v47;
        *(_OWORD *)(v40 + 104) = v48;
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v40, (dispatch_function_t)subrpCommonCallback);
      }
      else
      {
        FigSignalErrorAt();
      }
      long long v42 = v38;
      goto LABEL_82;
    }
  }
LABEL_83:
  if (v9) {
    CFRelease(v9);
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
}

uint64_t subrp_resetOutput(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else if (*(void *)(DerivedStorage + 192))
  {
    uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      uint64_t v6 = (const void *)v5;
      double v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE004023458D36uLL);
      if (v7)
      {
        CFTypeRef v8 = v7;
        if (a2) {
          CFTypeRef v9 = CFRetain(a2);
        }
        else {
          CFTypeRef v9 = 0;
        }
        uint64_t v11 = *(void *)(DerivedStorage + 192);
        *CFTypeRef v8 = v9;
        v8[1] = v11;
        v8[2] = CFRetain(v6);
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v8, (dispatch_function_t)subrpFlushCallback);
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v6);
    }
  }
  else
  {
    int v10 = *(_DWORD *)(DerivedStorage + 184);
    figSubtitleRenderPipelineGetCurrentTimeFromTimebase(DerivedStorage, &v12);
    subrp_sendEmptySubtitleSample(a2, v10, (uint64_t)&v12, *(unsigned char *)(DerivedStorage + 106));
    *(unsigned char *)(DerivedStorage + 106) = 0;
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
}

uint64_t figSubtitleRenderPipelineInvalidate(const void *a1)
{
  return 0;
}

uint64_t figSubtitleRenderPipelineFinalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  figSubtitleRenderPipelineInvalidate_Internal(a1, 0);
  FigTextSampleBufferTearDownState(DerivedStorage + 40);
  CGColorRef v3 = *(const void **)(DerivedStorage + 152);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 168);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 200);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(NSObject **)(DerivedStorage + 8);
  if (v6) {
    dispatch_release(v6);
  }
  double v7 = *(const void **)(DerivedStorage + 120);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 120) = 0;
  }
  CFTypeRef v8 = *(const void **)(DerivedStorage + 128);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 128) = 0;
  }
  CFTypeRef v9 = *(const void **)(DerivedStorage + 136);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 136) = 0;
  }
  int v10 = *(const void **)(DerivedStorage + 208);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 208) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 176);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 176) = 0;
  }
  WebVTTSampleBufferParserDestroy(*(void **)(DerivedStorage + 112));
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  return result;
}

__CFString *figSubtitleRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSubtitleRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t figSubtitleRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (CFTypeRef v8 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"SRPP_TextMarkupArray"))
  {
    int v10 = (const void *)v8[15];
    if (!v10) {
      return 4294954513;
    }
    goto LABEL_14;
  }
  if (CFEqual(a2, @"SRPP_TextHighlightArray"))
  {
    int v10 = (const void *)v8[16];
    if (!v10) {
      return 4294954513;
    }
    goto LABEL_14;
  }
  if (CFEqual(a2, @"SRPP_ExtendedLanguageTagString"))
  {
    int v10 = (const void *)v8[17];
    if (v10)
    {
LABEL_14:
      CFTypeRef v11 = CFRetain(v10);
LABEL_15:
      uint64_t result = 0;
      *a4 = v11;
      return result;
    }
LABEL_18:
    CFTypeRef v11 = 0;
    goto LABEL_15;
  }
  if (CFEqual(@"HDRCrossTalker", a2))
  {
    int v10 = (const void *)v8[26];
    if (v10) {
      goto LABEL_14;
    }
    goto LABEL_18;
  }
  uint64_t v12 = v8[3];

  return FigRenderPipelineCopyProperty(v12, (uint64_t)a2, a3, (uint64_t)a4);
}

uint64_t figSubtitleRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v6 = DerivedStorage, *DerivedStorage))
  {
LABEL_3:
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"SRPP_TextMarkupArray"))
  {
    CFTypeRef v8 = (const void *)v6[15];
    if (v8)
    {
      CFRelease(v8);
      v6[15] = 0;
    }
    if (a3)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID != CFGetTypeID(a3)) {
        goto LABEL_3;
      }
      v6[15] = CFRetain(a3);
    }
    return 0;
  }
  if (CFEqual(a2, @"SRPP_TextHighlightArray"))
  {
    if (!a3)
    {
      CFTypeRef v11 = (const void *)v6[16];
      v6[16] = 0;
      goto LABEL_31;
    }
    CFTypeID v10 = CFArrayGetTypeID();
    if (v10 != CFGetTypeID(a3)) {
      goto LABEL_3;
    }
    CFTypeRef v11 = (const void *)v6[16];
    v6[16] = a3;
    goto LABEL_25;
  }
  if (CFEqual(a2, @"SRPP_ExtendedLanguageTagString"))
  {
    if (a3)
    {
      CFTypeID v12 = CFStringGetTypeID();
      if (v12 != CFGetTypeID(a3)) {
        goto LABEL_3;
      }
      CFTypeRef v11 = (const void *)v6[17];
      v6[17] = a3;
      goto LABEL_25;
    }
    CFTypeRef v11 = (const void *)v6[17];
    v6[17] = 0;
    goto LABEL_31;
  }
  if (CFEqual(a2, @"HDRCrossTalker"))
  {
    if (a3)
    {
      uint64_t v13 = FigCrossTalkerGetTypeID();
      if (v13 != CFGetTypeID(a3)) {
        goto LABEL_3;
      }
      CFTypeRef v11 = (const void *)v6[26];
      v6[26] = a3;
LABEL_25:
      CFRetain(a3);
      goto LABEL_31;
    }
    CFTypeRef v11 = (const void *)v6[26];
    v6[26] = 0;
LABEL_31:
    if (v11) {
      CFRelease(v11);
    }
    return 0;
  }
  uint64_t v14 = v6[3];

  return FigRenderPipelineSetProperty_0(v14, (uint64_t)a2, (uint64_t)a3);
}

void figSubtitleRenderPipelineInvalidate_Internal(const void *a1, int a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
    if (*(unsigned char *)DerivedStorage)
    {
      JUMPOUT(0x19970E930);
    }
    if (a2)
    {
      if (*(void *)(DerivedStorage + 192))
      {
        uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v5)
        {
          uint64_t v6 = (const void *)v5;
          (*(void (**)(const void *, uint64_t))(DerivedStorage + 192))(a1, v5);
          CFRelease(v6);
        }
      }
      else
      {
        memset(&v16, 0, sizeof(v16));
        figSubtitleRenderPipelineGetCurrentTimeFromTimebase(DerivedStorage, &v16);
        int v7 = *(_DWORD *)(DerivedStorage + 184);
        char v8 = *(unsigned char *)(DerivedStorage + 106);
        CMTime v15 = v16;
        subrp_sendEmptySubtitleSample(a1, v7, (uint64_t)&v15, v8);
        *(unsigned char *)(DerivedStorage + 106) = 0;
      }
    }
    *(unsigned char *)uint64_t DerivedStorage = 1;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    if (*(void *)(DerivedStorage + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CFRelease(*(CFTypeRef *)(DerivedStorage + 32));
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v9 = *(void *)(DerivedStorage + 24);
    if (v9)
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v9);
      if (FigBaseObject)
      {
        uint64_t v11 = FigBaseObject;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v13 = v12 ? v12 : 0;
        uint64_t v14 = *(void (**)(uint64_t))(v13 + 24);
        if (v14) {
          v14(v11);
        }
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 24));
      *(void *)(DerivedStorage + 24) = 0;
    }
  }
}

void figSubtitleRenderPipelineGetCurrentTimeFromTimebase(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  a2->CMTimeEpoch epoch = *(void *)(v3 + 16);
  CMTimebaseRef timebase = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    char v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CMTimebaseRef *))(v7 + 48);
    if (v8)
    {
      int v9 = v8(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &timebase);
      CMTimebaseRef v10 = timebase;
      if (!v9)
      {
        CMTimebaseGetTime(a2, timebase);
        CMTimebaseRef v10 = timebase;
      }
      if (v10) {
        CFRelease(v10);
      }
    }
  }
}

void subrp_sendEmptySubtitleSample(const void *a1, int a2, uint64_t a3, char a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 176), a2))
  {
    if (!*(void *)(DerivedStorage + 144)) {
      return;
    }
    uint64_t v14 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v14) {
      return;
    }
    CMTimebaseRef v10 = (const void *)v14;
    CMTime v15 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
    if (v15)
    {
      uint64_t v12 = v15;
      if (a1) {
        CFTypeRef v16 = CFRetain(a1);
      }
      else {
        CFTypeRef v16 = 0;
      }
      uint64_t v21 = *(void *)(DerivedStorage + 144);
      *(void *)uint64_t v12 = v16;
      *((void *)v12 + 1) = v21;
      *((void *)v12 + 2) = CFRetain(v10);
      *((void *)v12 + 3) = 0;
      uint64_t v22 = *(void *)(a3 + 16);
      *((_OWORD *)v12 + 2) = *(_OWORD *)a3;
      long long v23 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v12 + 88) = *MEMORY[0x1E4F1DB20];
      *((void *)v12 + 6) = v22;
      v12[80] = a4;
      v12[81] = 0;
      *(_OWORD *)(v12 + 104) = v23;
      uint64_t v19 = *(NSObject **)(DerivedStorage + 8);
      dispatch_queue_t v20 = (void (__cdecl *)(void *))subrpCommonCallback;
      goto LABEL_17;
    }
LABEL_21:
    FigSignalErrorAt();
    goto LABEL_18;
  }
  if (!*(void *)(DerivedStorage + 160)) {
    return;
  }
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v9) {
    return;
  }
  CMTimebaseRef v10 = (const void *)v9;
  uint64_t v11 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
  if (!v11) {
    goto LABEL_21;
  }
  uint64_t v12 = v11;
  if (a1) {
    CFTypeRef v13 = CFRetain(a1);
  }
  else {
    CFTypeRef v13 = 0;
  }
  uint64_t v17 = *(void *)(DerivedStorage + 160);
  *(void *)uint64_t v12 = v13;
  *((void *)v12 + 1) = v17;
  *((void *)v12 + 2) = CFRetain(v10);
  *((void *)v12 + 3) = 0;
  uint64_t v18 = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = *(_OWORD *)a3;
  *((void *)v12 + 6) = v18;
  v12[56] = a4;
  uint64_t v19 = *(NSObject **)(DerivedStorage + 8);
  dispatch_queue_t v20 = (void (__cdecl *)(void *))subrpNativeCallback;
LABEL_17:
  dispatch_async_f(v19, v12, v20);
LABEL_18:

  CFRelease(v10);
}

CFArrayRef subrp_isSubTypeFourCCToBeRepresentedNatively(const __CFArray *a1, int a2)
{
  CFArrayRef v2 = a1;
  int valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    v6.length = CFArrayGetCount(v2);
    v6.CFIndex location = 0;
    CFArrayRef v2 = (const __CFArray *)CFArrayContainsValue(v2, v6, v3);
    CFRelease(v3);
  }
  return v2;
}

void subrpNativeCallback(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  CFNumberRef v3 = *(void (**)(CFTypeRef, uint64_t, long long *, uint64_t, uint64_t))(a1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  v3(v2, v6, &v10, v5, v7);
  char v8 = *(const void **)(a1 + 24);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 16);
  if (v9) {
    CFRelease(v9);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

void subrpCommonCallback(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  CFNumberRef v3 = *(void (**)(CFTypeRef, uint64_t, long long *, uint64_t, uint64_t, uint64_t, double, double, double, double))(a1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 81);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v11 = *(_OWORD *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 48);
  v3(v2, v7, &v11, v5, v6, v8, *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112));
  uint64_t v9 = *(const void **)(a1 + 24);
  if (v9) {
    CFRelease(v9);
  }
  long long v10 = *(const void **)(a1 + 16);
  if (v10) {
    CFRelease(v10);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

BOOL subrp_SampleBufferShouldBeDisplayed(opaqueCMSampleBuffer *a1)
{
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  BOOL result = 1;
  if (SampleAttachmentsArray)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      if ((const void *)*MEMORY[0x1E4F1CFD0] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1B8])) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t subrp_isSubtitleOverHDRVideo()
{
  CFTypeRef cf = 0;
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 208);
  if (!v0) {
    return 0;
  }
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v0);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v3 = v2 ? v2 : 0;
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  if (v4(FigBaseObject, 0x1EE56ACD8, *MEMORY[0x1E4F1CF80], &cf)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *MEMORY[0x1E4F1CFD0] == (void)cf;
  }
  uint64_t v6 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void subrpFlushCallback(CFTypeRef *a1)
{
  ((void (*)(CFTypeRef, CFTypeRef))a1[1])(*a1, a1[2]);
  CFTypeRef v2 = a1[2];
  if (v2) {
    CFRelease(v2);
  }
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

CFStringRef FPSupport_AcquireHDRVideoDisplayAssertion(const void *a1)
{
  return fpSupport_AcquireVideoDisplayAssertion(0, a1);
}

CFStringRef fpSupport_AcquireVideoDisplayAssertion(unsigned int a1, const void *a2)
{
  MEMORY[0x19970EE10](&sCreatedisplayAssertionDictMutexOnce, fpSupport_createDisplayAssertionMutexAndDict);
  uint64_t v4 = a1;
  BOOL v5 = &sAssertionParameters[4 * a1];
  MEMORY[0x19970E910](*v5);
  if (a2)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%p", a2);
    if (v7)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int valuePtr = 1;
      CFNumberRef v9 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
      if (Mutable) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        FigSignalErrorAt();
      }
      else
      {
        CFNumberRef v11 = v9;
        CFDictionarySetValue(Mutable, @"Assertion", v7);
        CFDictionarySetValue(Mutable, @"OwnerCount", v11);
        CFRelease(v11);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)sAssertionParameters[4 * v4 + 1], a2, Mutable);
      CFRelease(Mutable);
    }
  }
  else
  {
    CFStringRef v7 = 0;
  }
  MEMORY[0x19970E930](*v5);
  return v7;
}

uint64_t FPSupport_ReleaseHDRVideoDisplayAssertion(const void *a1, const void *a2)
{
  return FPSupport_ReleaseVideoDisplayAssertion(0, a1, a2);
}

uint64_t FPSupport_ReleaseVideoDisplayAssertion(unsigned int a1, const void *a2, const void *a3)
{
  MEMORY[0x19970EE10](&sCreatedisplayAssertionDictMutexOnce, fpSupport_createDisplayAssertionMutexAndDict);
  CFAllocatorRef v6 = &sAssertionParameters[4 * a1];
  MEMORY[0x19970E910](*v6);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v6[1], a2);
  if (Value)
  {
    uint64_t v8 = Value;
    CFDictionaryGetValue(Value, @"OwnerCount");
    int valuePtr = FigCFNumberGetSInt32() - 1;
    CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v8, @"OwnerCount", v9);
    CFRelease(v9);
    CFDictionaryGetValue(v8, @"OwnerCount");
    if (!FigCFNumberGetSInt32())
    {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)v6[1], a2);
      if (a2) {
        CFRetain(a2);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDeferNotificationToDispatchQueue();
    }
    if (a3) {
      CFRelease(a3);
    }
  }
  return MEMORY[0x19970E930](*v6);
}

CFStringRef FPSupport_Acquire4kVideoDisplayAssertion(const void *a1)
{
  return fpSupport_AcquireVideoDisplayAssertion(1u, a1);
}

uint64_t FPSupport_Release4kVideoDisplayAssertion(const void *a1, const void *a2)
{
  return FPSupport_ReleaseVideoDisplayAssertion(1u, a1, a2);
}

uint64_t FPSupport_GetMediaValidatorPlist()
{
  return sFigMediaValidatorPList;
}

void fpSupport_SetupMediaValidatorPlist()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  CFDictionaryRef v2 = (const __CFDictionary *)VTCopyVP9DecoderCapabilitiesDictionary();
  if (!v2) {
    goto LABEL_35;
  }
  CFDictionaryRef v3 = v2;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E4F44FD0]);
  if (!Value) {
    goto LABEL_24;
  }
  CFArrayRef v5 = Value;
  CFDictionaryRef theDict = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E4F44FC8]);
  CFArrayRef theArray = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
    FigSignalErrorAt();
    goto LABEL_24;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable && (CFTypeRef v41 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    long long v38 = Mutable;
    CFDictionaryRef v39 = ModelSpecificPropertyList;
    if (CFArrayGetCount(v5) >= 1)
    {
      CFIndex v7 = 0;
      uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      CFNumberRef v9 = (const void *)*MEMORY[0x1E4F44FE0];
      while (1)
      {
        unsigned int valuePtr = 0;
        int v43 = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v7);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        CFStringRef v11 = CFStringCreateWithFormat(v0, 0, @"0%d", valuePtr);
        CFArrayAppendValue(theArray, v11);
        CFRelease(v11);
        CFStringRef v12 = CFStringCreateWithFormat(v0, 0, @"%d", valuePtr);
        CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
        CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v14) {
          goto LABEL_39;
        }
        CMTime v15 = v14;
        CFDictionarySetValue(v41, v12, v14);
        CFRelease(v12);
        FigCFDictionaryGetBooleanIfPresent();
        CFDictionarySetValue(v15, @"VideoIsHardwareAccelerated", v8);
        CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(v13, v9);
        CFNumberGetValue(v16, kCFNumberIntType, &v43);
        CFDictionarySetValue(v15, @"MaxLevel", v16);
        uint64_t v17 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
        if (!v17)
        {
LABEL_39:
          int v25 = FigSignalErrorAt();
          CFMutableDictionaryRef Mutable = v38;
          CFDictionaryRef ModelSpecificPropertyList = v39;
          goto LABEL_40;
        }
        uint64_t v18 = v17;
        if (!valuePtr) {
          break;
        }
        if (valuePtr == 2)
        {
          CFArrayAppendValue(v17, @"10");
          uint64_t v19 = @"12";
LABEL_14:
          CFArrayAppendValue(v18, v19);
          CFDictionarySetValue(v15, @"ColorDepth", v18);
        }
        CFRelease(v18);
        CFRelease(v15);
        if (++v7 >= CFArrayGetCount(v5)) {
          goto LABEL_16;
        }
      }
      uint64_t v19 = @"08";
      goto LABEL_14;
    }
LABEL_16:
    CFMutableDictionaryRef Mutable = v38;
    CFDictionarySetValue(v38, @"SupportedProfiles", theArray);
    CFDictionarySetValue(v38, @"PerProfileConstraints", v41);
    CFMutableArrayRef v20 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = 0;
      CFDictionaryRef ModelSpecificPropertyList = v39;
      CFDictionaryRef v23 = v3;
      do
      {
        CFStringRef v24 = CFStringCreateWithFormat(v0, 0, @"%d", dword_1949963F8[v22]);
        CFArrayAppendValue(v21, v24);
        CFRelease(v24);
        ++v22;
      }
      while (v22 != 14);
      CFDictionarySetValue(v38, @"SupportedLevels", v21);
      CFRelease(v21);
      int v25 = 0;
    }
    else
    {
      int v25 = FigSignalErrorAt();
      CFDictionaryRef ModelSpecificPropertyList = v39;
LABEL_40:
      CFDictionaryRef v23 = v3;
    }
    CFRelease(v41);
    CFDictionaryRef v26 = v23;
  }
  else
  {
    int v25 = FigSignalErrorAt();
    CFDictionaryRef v26 = v3;
  }
  CFRelease(v26);
  CFRelease(theArray);
  if (Mutable && v25)
  {
    CFDictionaryRef v3 = Mutable;
LABEL_24:
    CFRelease(v3);
LABEL_35:
    CFAllocatorRef AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
    sFigMediaValidatorPList = (uint64_t)CFDictionaryCreateCopy(AllocatorForPermanentAllocations, ModelSpecificPropertyList);
    goto LABEL_36;
  }
  if (!Mutable) {
    goto LABEL_35;
  }
  CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(ModelSpecificPropertyList, @"VideoCodecProfiles");
  CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(v0, 0, v27);
  if (!MutableCopy)
  {
    CFMutableDictionaryRef v36 = Mutable;
    goto LABEL_34;
  }
  CFAllocatorRef v29 = MutableCopy;
  CFDictionarySetValue(MutableCopy, @"vp09", Mutable);
  CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue(ModelSpecificPropertyList, @"vide");
  CFArrayRef v31 = CFArrayCreateMutableCopy(v0, 0, v30);
  uint64_t v32 = v31;
  if (v31)
  {
    CFArrayAppendValue(v31, @"vp09");
    long long v33 = CFDictionaryCreateMutableCopy(v0, 0, ModelSpecificPropertyList);
    uint64_t v34 = v33;
    if (v33)
    {
      CFDictionaryReplaceValue(v33, @"VideoCodecProfiles", v29);
      CFDictionaryReplaceValue(v34, @"vide", v32);
      CFAllocatorRef v35 = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
      sFigMediaValidatorPList = (uint64_t)CFDictionaryCreateCopy(v35, v34);
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  CFRelease(Mutable);
  CFRelease(v29);
  if (v32) {
    CFRelease(v32);
  }
  if (v34)
  {
    CFMutableDictionaryRef v36 = v34;
LABEL_34:
    CFRelease(v36);
  }
LABEL_36:
  if (ModelSpecificPropertyList) {
    CFRelease(ModelSpecificPropertyList);
  }
}

void FPSupport_DeleteCASlotsInArray(const __CFArray *a1)
{
  CFDictionaryRef v2 = (void *)MEMORY[0x199711A30]();
  if (a1) {
    CFIndex Count = CFArrayGetCount(a1);
  }
  else {
    CFIndex Count = 0;
  }
  Context = (void *)fpSupport_getContext();
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      int valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr) {
        objc_msgSend(Context, "deleteSlot:");
      }
    }
  }
  [MEMORY[0x1E4F39CF8] commit];
}

const void *FPSupport_CopyCAContext()
{
  CFAllocatorRef v0 = (void *)MEMORY[0x199711A30]();
  Context = (const void *)fpSupport_getContext();
  CFDictionaryRef v2 = Context;
  if (Context) {
    CFRetain(Context);
  }
  return v2;
}

uint64_t FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(CFArrayRef theArray, const __CFAllocator *a2, CVPixelBufferRef *a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  *a3 = 0;
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0;
  }
  CFIndex v7 = Count;
  CFIndex v8 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v8);
    uint64_t v9 = CAImageQueueCopyDisplayedIOSurface();
    if (v9) {
      break;
    }
    if (v7 == ++v8) {
      return 0;
    }
  }
  CFStringRef v11 = (__IOSurface *)v9;
  if (IOSurfaceGetProtectionOptions())
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = CVPixelBufferCreateWithIOSurface(a2, v11, 0, &pixelBufferOut);
    if (v10)
    {
      if (pixelBufferOut) {
        CFRelease(pixelBufferOut);
      }
    }
    else
    {
      *a3 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
    }
  }
  CFRelease(v11);
  return v10;
}

uint64_t FPSupport_ShouldApplyVideoTrackMatrix(const void *a1, const void *a2)
{
  CFTypeRef cf = 0;
  CFBooleanRef BOOLean = 0;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFIndex v8 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, CFBooleanRef *))(v7 + 48);
  if (!v8 || v8(FigBaseObject, @"ApplyVideoTrackMatrix", v4, &BOOLean))
  {
    CFTypeRef v14 = 0;
    uint64_t Value = 0;
  }
  else
  {
    uint64_t Value = CFBooleanGetValue(BOOLean);
    if (_CFExecutableLinkedOnOrAfter())
    {
      CFAllocatorRef v10 = CFGetAllocator(a2);
      uint64_t v11 = FigPlaybackItemGetFigBaseObject(a2);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      CMTime v15 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v13 + 48);
      if (v15)
      {
        v15(v11, @"VideoCompositor", v10, &cf);
        CFTypeRef v14 = cf;
      }
      else
      {
        CFTypeRef v14 = 0;
      }
      if (Value) {
        BOOL v16 = v14 == 0;
      }
      else {
        BOOL v16 = 0;
      }
      uint64_t Value = v16;
    }
    else
    {
      CFTypeRef v14 = 0;
    }
  }
  if (BOOLean)
  {
    CFRelease(BOOLean);
    CFTypeRef v14 = cf;
  }
  if (v14) {
    CFRelease(v14);
  }
  return Value;
}

uint64_t FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(CFDictionaryRef theDict, int a2, CFDictionaryRef *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t valuePtr = 0;
  *a3 = 0;
  if (!theDict)
  {
    *(_OWORD *)CFArrayRef v31 = *(_OWORD *)"ARGB";
    uint64_t v30 = 0;
    FigGetAlignmentForIOSurfaceOutput();
    uint64_t v17 = getenv("figvideooutputformat");
    if (v17 && (uint64_t v18 = (unsigned int *)v17, strlen(v17) == 4))
    {
      *(_DWORD *)CFArrayRef v31 = bswap32(*v18);
      int v19 = 1;
    }
    else
    {
      int v19 = 0;
    }
    uint64_t DestinationPixelBufferAttributes = FPSupport_CreateDestinationPixelBufferAttributes(0, 0, v31, v19, 0, 1, SHIDWORD(v30), v30, a2 != 0, a3);
    CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *a3);
    if (!MutableCopy) {
      return FigSignalErrorAt();
    }
    uint64_t v22 = MutableCopy;
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D18], (const void *)*MEMORY[0x1E4F1CFD0]);
    if (*a3) {
      CFRelease(*a3);
    }
    *a3 = v22;
    return DestinationPixelBufferAttributes;
  }
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  if (v6)
  {
    uint64_t v7 = v6;
    FigGetAlignmentForIOSurfaceOutput();
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24C98]);
    if (Value)
    {
      CFNumberRef v9 = Value;
      CFTypeID v10 = CFGetTypeID(Value);
      if (v10 == CFNumberGetTypeID()) {
        CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
      }
    }
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24D78]);
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFTypeID v13 = CFGetTypeID(v11);
      if (v13 == CFNumberGetTypeID()) {
        CFNumberGetValue(v12, kCFNumberIntType, &v28);
      }
    }
    if ((int)valuePtr >= 1)
    {
      if (valuePtr >= 0) {
        int v14 = HIDWORD(valuePtr);
      }
      else {
        int v14 = -HIDWORD(valuePtr);
      }
      if (v14 <= (int)valuePtr) {
        unsigned int v15 = valuePtr;
      }
      else {
        unsigned int v15 = v14;
      }
      if (v14 >= (int)valuePtr) {
        int v14 = valuePtr;
      }
      if (v14 < 1)
      {
        unsigned int v16 = v15;
      }
      else
      {
        do
        {
          unsigned int v16 = v14;
          int v14 = v15 % v14;
          unsigned int v15 = v16;
        }
        while (v14);
      }
      HIDWORD(valuePtr) = (uint64_t)(SHIDWORD(valuePtr) * (unint64_t)valuePtr) / v16;
    }
    if ((int)v28 >= 1)
    {
      if (v28 >= 0) {
        int v23 = HIDWORD(v28);
      }
      else {
        int v23 = -HIDWORD(v28);
      }
      if (v23 <= (int)v28) {
        unsigned int v24 = v28;
      }
      else {
        unsigned int v24 = v23;
      }
      if (v23 >= (int)v28) {
        int v23 = v28;
      }
      if (v23 < 1)
      {
        unsigned int v25 = v24;
      }
      else
      {
        do
        {
          unsigned int v25 = v23;
          int v23 = v24 % v23;
          unsigned int v24 = v25;
        }
        while (v23);
      }
      HIDWORD(v28) = (uint64_t)(SHIDWORD(v28) * (unint64_t)v28) / v25;
    }
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCFDictionarySetInt32();
    if (!PixelBufferAttributesWithIOSurfaceSupport)
    {
      uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCFDictionarySetInt32();
      if (!PixelBufferAttributesWithIOSurfaceSupport)
      {
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F24D30], (const void *)*MEMORY[0x1E4F1CFD0]);
        uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
      }
    }
    uint64_t DestinationPixelBufferAttributes = PixelBufferAttributesWithIOSurfaceSupport;
    CFRelease(v7);
    return DestinationPixelBufferAttributes;
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_GetFirstEnabledTrackIDForMediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  CFTypeRef cf = 0;
  int v17 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CFNumberRef v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(v8 + 64);
    if (!v9 || v9(a1, v6, a2, &cf, &v17))
    {
      uint64_t v12 = 4294954453;
      goto LABEL_12;
    }
    int isTrackEnabled = fpSupport_isTrackEnabled((uint64_t)cf);
    CFTypeRef v11 = cf;
    if (isTrackEnabled) {
      break;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    ++v6;
  }
  if (!cf) {
    return 4294954453;
  }
  CFRetain(cf);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  unsigned int v16 = *(void (**)(CFTypeRef, uint64_t, void))(v15 + 8);
  if (v16) {
    v16(v11, a3, 0);
  }
  CFRelease(v11);
  uint64_t v12 = 0;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

void fpSupport_pickPreferredVideoTrack(const void *a1, const void **a2, int *a3, unsigned char *a4, char a5)
{
  CMFormatDescriptionRef desc = 0;
  fpSupport_copyFormatDescription((uint64_t)a1, &desc);
  CFTypeID v10 = desc;
  if (!desc) {
    return;
  }
  MediaSubuint64_t Type = CMFormatDescriptionGetMediaSubType(desc);
  int v12 = MediaSubType;
  if (fpSupport_isVideoCodecTypeSupported(MediaSubType, a5)
    || CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
  {
    CFTypeID v13 = *a2;
    if (v12 != 1635148593) {
      goto LABEL_14;
    }
    CFPropertyListRef Extension = CMFormatDescriptionGetExtension(v10, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (!Extension) {
      goto LABEL_14;
    }
    uint64_t v15 = Extension;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(v15)) {
      goto LABEL_14;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v15, @"avcC");
    if (!Value) {
      goto LABEL_14;
    }
    CFArrayRef ValueAtIndex = Value;
    CFTypeID v19 = CFArrayGetTypeID();
    if (v19 == CFGetTypeID(ValueAtIndex))
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      if (!ValueAtIndex) {
        goto LABEL_14;
      }
    }
    CFTypeID v20 = CFDataGetTypeID();
    if (v20 == CFGetTypeID(ValueAtIndex)
      && (BytePtr = CFDataGetBytePtr(ValueAtIndex), (unint64_t)CFDataGetLength(ValueAtIndex) >= 7)
      && *BytePtr == 1)
    {
      int v22 = BytePtr[1];
    }
    else
    {
LABEL_14:
      int v22 = 0;
    }
    int v23 = *a3;
    BOOL v26 = v12 != 1785750887 && v23 == 1785750887 || v13 == 0;
    if (v12 == 1635148593 && v23 == 1635148593)
    {
      if (*a4 == 77 && v22 != 77) {
        LOBYTE(v26) = 1;
      }
      if (!v26) {
        goto LABEL_40;
      }
      goto LABEL_35;
    }
    if (v26)
    {
LABEL_35:
      uint64_t v28 = *a2;
      *a2 = a1;
      if (a1) {
        CFRetain(a1);
      }
      if (v28) {
        CFRelease(v28);
      }
      *a3 = v12;
      *a4 = v22;
    }
  }
LABEL_40:

  CFRelease(v10);
}

uint64_t FPSupport_GetClosestCommonRefreshIntervalForRate(uint64_t a1, double a2)
{
  uint64_t v2 = MEMORY[0x1E4F1F9F8];
  long long v3 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v4 = *(void *)(v2 + 16);
  *(void *)(a1 + 16) = v4;
  if (a2 == 0.0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    long long v9 = v3;
    memset(&v19, 0, sizeof(v19));
    CMTimeMake(&v19, vcvtad_u64_f64(1000000000.0 / a2), 1000000000);
    uint64_t v6 = 0;
    *(_OWORD *)&v18.CMTimeValue value = v9;
    v18.CMTimeEpoch epoch = v4;
    CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    do
    {
      memset(&time2, 0, sizeof(time2));
      int32_t v7 = FPSupport_GetClosestCommonRefreshIntervalForRate_commonFrequencies[v6];
      CMTimeMake(&time2, 1, v7);
      memset(&v15, 0, sizeof(v15));
      CMTime lhs = v19;
      CMTime rhs = time2;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&v15, &time);
      CMTime lhs = v15;
      CMTime rhs = v17;
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        CMTime v18 = time2;
        CMTime v17 = v15;
      }
      CMTimeMake(&lhs, 1001, 1000 * v7);
      CMTime time2 = lhs;
      CMTime lhs = v19;
      CMTime rhs = time2;
      CMTimeSubtract(&v11, &lhs, &rhs);
      CMTimeAbsoluteValue(&lhs, &v11);
      CMTime v15 = lhs;
      CMTime rhs = v17;
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        CMTime v18 = time2;
        CMTime v17 = v15;
      }
      v6 += 2;
    }
    while (v6 != 22);
    CMTime time2 = v17;
    CMTimeMultiply(&time1, &time2, 100);
    CMTime time2 = v18;
    if (CMTimeCompare(&time1, &time2) > 0)
    {
      *(_OWORD *)&v18.CMTimeValue value = v9;
      v18.CMTimeEpoch epoch = v4;
    }
    *(CMTime *)a1 = v18;
    return 0;
  }
}

void FPSupport_GetDisplayRefreshInformation(CMTime *a1, CMTime *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(&v20, 0, sizeof(v20));
  CMTimeMake(&v20, 1, 60);
  memset(&v19, 0, sizeof(v19));
  CMTimeMake(&v19, 1, 60);
  uint64_t v6 = *MEMORY[0x1E4F1F9F8];
  int v7 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  uint64_t v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 12);
  int v22 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 20);
  p_cache = (void **)(FigDisplayMirroringChangeObserver + 16);
  if (MGGetBoolAnswer())
  {
    CFArrayRef DisplayList = (const __CFArray *)IOMobileFramebufferCreateDisplayList();
    CFArrayRef v10 = DisplayList;
    if (DisplayList)
    {
      CFIndex Count = CFArrayGetCount(DisplayList);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        CFIndex v13 = 0;
        while (*((_DWORD *)CFArrayGetValueAtIndex(v10, v13) + 2))
        {
          if (v12 == ++v13) {
            goto LABEL_7;
          }
        }
        if (IOMobileFramebufferOpenByName())
        {
LABEL_7:
          uint64_t v14 = 0;
        }
        else
        {
          CMTime v15 = (const void *)IOMobileFramebufferCopyProperty();
          uint64_t v14 = v15;
          if (v15)
          {
            CFTypeID v16 = CFGetTypeID(v15);
            if (v16 == CFDictionaryGetTypeID())
            {
              p_cache = FigDisplayMirroringChangeObserver.cache;
              if (dword_1EB2AE9D8)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                p_cache = FigDisplayMirroringChangeObserver.cache;
              }
              FigCFDictionaryGetInt64IfPresent();
              FigCFDictionaryGetInt64IfPresent();
              FigCFDictionaryGetInt64IfPresent();
              if (!v10) {
                goto LABEL_19;
              }
              goto LABEL_18;
            }
          }
          FigSignalErrorAt();
        }
        p_cache = (void **)(FigDisplayMirroringChangeObserver + 16);
        if (v10) {
          goto LABEL_18;
        }
        goto LABEL_19;
      }
    }
    FigSignalErrorAt();
    uint64_t v14 = 0;
    if (v10) {
LABEL_18:
    }
      CFRelease(v10);
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_19:
  if (v14) {
    CFRelease(v14);
  }
  if (*((_DWORD *)p_cache + 630))
  {
    CMTime v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1) {
    *a1 = v20;
  }
  if (a2) {
    *a2 = v19;
  }
  if (a3)
  {
    *(void *)a3 = v6;
    *(_DWORD *)(a3 + 8) = v7;
    *(void *)(a3 + 12) = v21;
    *(_DWORD *)(a3 + 20) = v22;
  }
}

uint64_t fpSupport_addTrackInfoToArray(uint64_t a1, int a2, int a3, __CFArray *a4)
{
  int valuePtr = a2;
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    long long v9 = Mutable;
    CFNumberRef v10 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
    if (v10)
    {
      CFNumberRef v11 = v10;
      CFDictionarySetValue(v9, @"TrackID", v10);
      CFRelease(v11);
    }
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeID v16 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v14 + 48);
    if (v16) {
      v16(FigBaseObject, @"TrackLanguageCode", v7, &value);
    }
    if (value)
    {
      CFDictionarySetValue(v9, @"Language", value);
      CFRelease(value);
      CMTimeValue value = 0;
    }
    uint64_t v17 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CMTime v20 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v19 + 48);
    if (v20) {
      v20(v17, @"ExtendedLanguageTagString", v7, &value);
    }
    if (value)
    {
      CFDictionarySetValue(v9, @"ExtendedLanguage", value);
      CFRelease(value);
      CMTimeValue value = 0;
    }
    if (a3 == 1936684398)
    {
      CMFormatDescriptionRef desc = 0;
      fpSupport_copyFormatDescription(a1, &desc);
      CMFormatDescriptionRef v21 = desc;
      if (desc)
      {
        *(_DWORD *)bytes = bswap32(CMFormatDescriptionGetMediaSubType(desc));
        CFStringRef v22 = CFStringCreateWithBytes(v7, bytes, 4, 0, 0);
        CFDictionarySetValue(v9, @"AudioFormat", v22);
        if (v22) {
          CFRelease(v22);
        }
        CFRelease(v21);
      }
    }
    uint64_t v23 = FigTrackReaderGetFigBaseObject(a1);
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    BOOL v26 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v25 + 48);
    if (v26)
    {
      v26(v23, @"TrackExcludeFromAutoSelection", v7, &cf);
      if (cf)
      {
        CFDictionarySetValue(v9, @"ExcludeFromAutoSelection", cf);
        CFRelease(cf);
      }
    }
    CFArrayAppendValue(a4, v9);
    CFRelease(v9);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FPSupport_FindSampleStream(const __CFArray *a1, opaqueCMSampleBuffer *a2, CFIndex **a3, CFIndex *a4, CMItemCount *a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = 0;
  int v43 = a5;
  if (a5)
  {
    if (a4)
    {
      if (a2)
      {
        long long v42 = a4;
        if (a1)
        {
          if (a3)
          {
            CMItemCount NumSamples = CMSampleBufferGetNumSamples(a2);
            int64_t v10 = NumSamples;
            CFNumberRef v11 = *a3;
            if (!*a3)
            {
              uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 8 * NumSamples + 3232, 0xD12A08DFuLL);
              if (!result) {
                return result;
              }
              CFNumberRef v11 = (CFIndex *)result;
              *(void *)uint64_t result = 0;
              *(void *)(result + 8) = 0;
              *(void *)(result + 16) = v10 + 400;
              *(void *)(result + 24) = 0;
              *a3 = (CFIndex *)result;
              if (getSampleSizes(a2, v10, (size_t *)(result + 32))) {
                return 0;
              }
              v11[3] = v10;
            }
            CFIndex Count = CFArrayGetCount(a1);
            CFIndex v13 = *v11;
            if (*v11 < Count)
            {
              do
              {
                CFArrayRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(a1, v13);
                CMItemCount v15 = CMSampleBufferGetNumSamples(ValueAtIndex);
                CFIndex v17 = v11[2];
                CFIndex v16 = v11[3];
                if (v16 + v15 > v17)
                {
                  v11[2] = v17 + 400;
                  uint64_t result = (uint64_t)malloc_type_realloc(v11, 8 * v17 + 3232, 0xFDCD17C6uLL);
                  if (!result) {
                    return result;
                  }
                  CFNumberRef v11 = (CFIndex *)result;
                  *a3 = (CFIndex *)result;
                  CFIndex v16 = *(void *)(result + 24);
                }
                if (getSampleSizes(ValueAtIndex, v15, (size_t *)&v11[v16 + 4])) {
                  return 0;
                }
                v11[3] += v15;
                ++*v11;
              }
              while (Count != ++v13);
            }
            if (Count < 1) {
              return 0;
            }
            CFIndex idx = 0;
            uint64_t v18 = v11 + 4;
            int64_t v19 = v10;
            int64_t v50 = v10;
            long long v45 = v11 + 4;
            char v46 = v11;
            CFIndex v44 = Count;
            do
            {
              CMTime v20 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(a1, idx);
              CMItemCount v21 = CMSampleBufferGetNumSamples(v20);
              CMItemCount v22 = v21;
              if (idx == v11[1])
              {
                if (v21 < 1)
                {
                  CMItemCount v23 = 0;
                }
                else
                {
                  CMItemCount v23 = 0;
                  uint64_t v24 = &v18[v19];
                  int64_t v48 = v19;
                  CMTime v49 = v24;
                  CMItemCount v47 = v21;
                  while (v11[3] >= v23 + v19 + v10)
                  {
                    if (v10 < 1)
                    {
                      uint64_t v25 = 0;
                    }
                    else
                    {
                      uint64_t v25 = 0;
                      while (v18[v25] == v24[v25])
                      {
                        if (v10 == ++v25) {
                          goto LABEL_29;
                        }
                      }
                    }
                    if (v25 == v10)
                    {
LABEL_29:
                      SampleAudioPackDescriptors = getSampleAudioPackDescriptors(a2);
                      if (v10 < 1)
                      {
                        int64_t v40 = 0;
                      }
                      else
                      {
                        size_t v26 = 0;
                        int64_t v27 = 0;
                        CFIndex v28 = idx;
                        while (1)
                        {
                          CFAllocatorRef v29 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(a1, v28);
                          CMItemCount v30 = CMSampleBufferGetNumSamples(v29);
                          CFIndex v56 = v29;
                          uint64_t v57 = getSampleAudioPackDescriptors(v29);
                          CMItemCount v31 = 0;
                          size_t v32 = 0;
                          if (v28 == idx && v23)
                          {
                            size_t v32 = 0;
                            for (uint64_t i = 0; i != v23; ++i)
                              v32 += v49[i];
                            CMItemCount v31 = v23;
                          }
                          CFIndex v52 = v28;
                          CMItemCount v34 = v30 + v27 - v31 <= v10 ? v30 : v10 - v27 + v31;
                          if (v31 < v34) {
                            break;
                          }
                          int64_t v40 = v27;
LABEL_52:
                          CFIndex v28 = v52 + 1;
                          int64_t v27 = v40;
                          int64_t v10 = v50;
                          if (v40 >= v50) {
                            goto LABEL_56;
                          }
                        }
                        CFAllocatorRef v35 = (size_t *)&v57[v31];
                        CFMutableDictionaryRef v36 = (size_t *)&SampleAudioPackDescriptors[v27];
                        while (1)
                        {
                          if ((unint64_t)v24[v27] >= 0x20) {
                            size_t v37 = 32;
                          }
                          else {
                            size_t v37 = v24[v27];
                          }
                          if (SampleAudioPackDescriptors) {
                            size_t v26 = *v36;
                          }
                          DataBuffer = CMSampleBufferGetDataBuffer(a2);
                          CMBlockBufferCopyDataBytes(DataBuffer, v26, v37, destination);
                          if (v57) {
                            size_t v32 = *v35;
                          }
                          CFDictionaryRef v39 = CMSampleBufferGetDataBuffer(v56);
                          CMBlockBufferCopyDataBytes(v39, v32, v37, __s2);
                          if (memcmp(destination, __s2, v37)) {
                            break;
                          }
                          int64_t v40 = v27 + 1;
                          CFIndex v41 = v24[v27];
                          v26 += v41;
                          v32 += v41;
                          ++v31;
                          v35 += 2;
                          v36 += 2;
                          ++v27;
                          if (v31 >= v34) {
                            goto LABEL_52;
                          }
                        }
                        int64_t v40 = v27;
                        int64_t v10 = v50;
                      }
LABEL_56:
                      uint64_t v18 = v45;
                      CFNumberRef v11 = v46;
                      CMItemCount v22 = v47;
                      int64_t v19 = v48;
                      if (v40 == v10)
                      {
                        *long long v42 = idx;
                        *int v43 = v23;
                        uint64_t result = 1;
                        goto LABEL_62;
                      }
                    }
                    ++v23;
                    ++v24;
                    if (v23 == v22)
                    {
                      uint64_t result = 0;
                      CFIndex Count = v44;
                      goto LABEL_63;
                    }
                  }
                }
                uint64_t result = 0;
LABEL_62:
                CFIndex Count = v44;
                if (v23 == v22) {
LABEL_63:
                }
                  ++v11[1];
              }
              else
              {
                uint64_t result = 0;
              }
              if (++idx >= Count) {
                break;
              }
              v19 += v22;
            }
            while (!result);
          }
        }
      }
    }
  }
  return result;
}

uint64_t getSampleSizes(opaqueCMSampleBuffer *a1, unint64_t a2, size_t *a3)
{
  long long v3 = a3;
  CMItemCount sizeArrayEntriesNeededOut = 0;
  LODWORD(result) = CMSampleBufferGetSampleSizeArray(a1, a2, a3, &sizeArrayEntriesNeededOut);
  if (result == -12735)
  {
    size_t packetDescriptionsSizeOut = 0;
    packetDescriptionsPointerOut = 0;
    LODWORD(result) = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a1, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut);
    if (!result)
    {
      CMItemCount sizeArrayEntriesNeededOut = packetDescriptionsSizeOut >> 4;
      if (packetDescriptionsSizeOut >> 4 == a2 && packetDescriptionsSizeOut >= 0x10)
      {
        if (a2 <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = a2;
        }
        p_mDataByteSize = &packetDescriptionsPointerOut->mDataByteSize;
        do
        {
          UInt32 v10 = *p_mDataByteSize;
          p_mDataByteSize += 4;
          *v3++ = v10;
          --v8;
        }
        while (v8);
      }
    }
  }
  if (sizeArrayEntriesNeededOut == a2) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = -12737;
  }
  if (result) {
    return result;
  }
  else {
    return v11;
  }
}

AudioStreamPacketDescription *getSampleAudioPackDescriptors(opaqueCMSampleBuffer *a1)
{
  packetDescriptionsPointerOut = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  Mediauint64_t Type = CMFormatDescriptionGetMediaType(FormatDescription);
  uint64_t result = 0;
  if (MediaType == 1936684398)
  {
    CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a1, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, 0);
    return packetDescriptionsPointerOut;
  }
  return result;
}

BOOL FPSupport_AudioSamplesAreDiverse(opaqueCMSampleBuffer *a1)
{
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a1);
  if (NumSamples < 2)
  {
    CFArrayRef v5 = 0;
    CFAllocatorRef v7 = 0;
    int v9 = -1;
    goto LABEL_25;
  }
  int64_t v3 = NumSamples;
  SampleAudioPackDescriptors = getSampleAudioPackDescriptors(a1);
  CFArrayRef v5 = (size_t *)malloc_type_calloc(v3, 8uLL, 0x100004000313F17uLL);
  if (!v5)
  {
    int SampleSizes = FigSignalErrorAt();
    goto LABEL_27;
  }
  int SampleSizes = getSampleSizes(a1, v3, v5);
  if (SampleSizes)
  {
LABEL_27:
    int v9 = SampleSizes;
    CFAllocatorRef v7 = 0;
    goto LABEL_25;
  }
  CFAllocatorRef v7 = malloc_type_malloc(*v5, 0x55A77EA7uLL);
  if (v7)
  {
    if (SampleAudioPackDescriptors) {
      size_t mStartOffset = SampleAudioPackDescriptors->mStartOffset;
    }
    else {
      size_t mStartOffset = 0;
    }
    DataBuffer = CMSampleBufferGetDataBuffer(a1);
    int v9 = CMBlockBufferCopyDataBytes(DataBuffer, mStartOffset, *v5, v7);
    if (!v9)
    {
      __s1 = v7;
      unsigned int v11 = (size_t *)&SampleAudioPackDescriptors[1];
      uint64_t v12 = 1;
      while (*v5 == v5[v12])
      {
        CFIndex v13 = malloc_type_malloc(*v5, 0xD26182B5uLL);
        if (v13)
        {
          uint64_t v14 = v13;
          if (SampleAudioPackDescriptors) {
            size_t mStartOffset = *v11;
          }
          CMItemCount v15 = CMSampleBufferGetDataBuffer(a1);
          int v9 = CMBlockBufferCopyDataBytes(v15, mStartOffset, v5[v12], v14);
          if (v9) {
            BOOL v16 = 1;
          }
          else {
            BOOL v16 = memcmp(__s1, v14, *v5) == 0;
          }
          free(v14);
        }
        else
        {
          BOOL v16 = 1;
        }
        if (v12 + 1 < v3)
        {
          mStartOffset += v5[v12];
          v11 += 2;
          ++v12;
          if (v16) {
            continue;
          }
        }
        if (v16) {
          int v9 = -1;
        }
        break;
      }
      CFAllocatorRef v7 = __s1;
    }
  }
  else
  {
    int v9 = FigSignalErrorAt();
  }
LABEL_25:
  free(v7);
  free(v5);
  return v9 == 0;
}

void FPSupport_resetClosedCaptionLayer(uint64_t a1)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  CFArrayRef v2 = *(const __CFArray **)(a1 + 8);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      for (CFIndex i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i), "resetCaptions");
      [MEMORY[0x1E4F39CF8] commit];
    }
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t FPSupport_updateClosedCaptionLayerBounds(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, CFIndex a7, _OWORD *a8, long long *a9)
{
  rect.origin.x = a2;
  rect.origin.y = a3;
  rect.size.CGFloat width = a4;
  rect.size.CGFloat height = a5;
  if ((a7 & 0x8000000000000000) == 0)
  {
    CGFloat v17 = *MEMORY[0x1E4F1DB20];
    CGFloat v18 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat v19 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v20 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    v42.origin.x = *(CGFloat *)MEMORY[0x1E4F1DB20];
    v42.origin.y = v18;
    v42.size.CGFloat width = v19;
    v42.size.CGFloat height = v20;
    if (!CGRectEqualToRect(*(CGRect *)&a2, v42))
    {
      uint64_t v21 = 0;
      if (a4 <= 0.0 || a5 <= 0.0) {
        return v21;
      }
    }
    if (a8)
    {
      long long v22 = a8[1];
      *(_OWORD *)(a1 + 64) = *a8;
      *(_OWORD *)(a1 + 80) = v22;
    }
    if (a9)
    {
      long long v23 = *a9;
      long long v24 = a9[1];
      long long v25 = a9[3];
      *(_OWORD *)(a1 + 128) = a9[2];
      *(_OWORD *)(a1 + 144) = v25;
      *(_OWORD *)(a1 + 96) = v23;
      *(_OWORD *)(a1 + 112) = v24;
    }
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(void *)(a1 + 8))
    {
      v41.origin.x = a2;
      v41.origin.y = a3;
      v41.size.CGFloat width = a4;
      v41.size.CGFloat height = a5;
      v43.origin.x = v17;
      v43.origin.y = v18;
      v43.size.CGFloat width = v19;
      v43.size.CGFloat height = v20;
      if (CGRectEqualToRect(v41, v43))
      {
        cf[0] = 0;
        if (*(void *)(a1 + 40))
        {
          SInt32 = (const void *)FigCFNumberCreateSInt32();
          if (SInt32)
          {
            int64_t v27 = SInt32;
            if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), SInt32, cf))
            {
              CFTypeID TypeID = CFDictionaryGetTypeID();
              if (TypeID == CFGetTypeID(cf[0])
                && !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)cf[0], &rect))
              {
                FigSignalErrorAt();
              }
            }
            CFRelease(v27);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
      }
      else
      {
        storeClosedCaptionLayerBoundsInCacheForLayerIndex(a1, a2, a3, a4, a5);
      }
      CFArrayRef Count = *(const __CFArray **)(a1 + 8);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if ((uint64_t)Count <= a7)
      {
        uint64_t v21 = 4294954436;
        goto LABEL_28;
      }
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      objc_msgSend(MEMORY[0x1E4F39CF8], "setDisableActions:", 1, cf[0]);
      CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a7);
      double MidX = CGRectGetMidX(rect);
      objc_msgSend(ValueAtIndex, "setPosition:", MidX, CGRectGetMidY(rect));
      objc_msgSend(ValueAtIndex, "setBounds:", rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
      objc_msgSend(ValueAtIndex, "setVideoRelativeToViewport:", *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
      long long v32 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)CFTypeRef cf = *(_OWORD *)(a1 + 96);
      long long v36 = v32;
      long long v33 = *(_OWORD *)(a1 + 144);
      long long v37 = *(_OWORD *)(a1 + 128);
      long long v38 = v33;
      [ValueAtIndex setCaptionsAvoidanceMargins:cf];
      [MEMORY[0x1E4F39CF8] commit];
    }
    else
    {
      storeClosedCaptionLayerBoundsInCacheForLayerIndex(a1, a2, a3, a4, a5);
    }
    uint64_t v21 = 0;
LABEL_28:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v21;
  }

  return FigSignalErrorAt();
}

void storeClosedCaptionLayerBoundsInCacheForLayerIndex(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if ((*(void *)(a1 + 40)
     || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a1 + 40) = Mutable) != 0))&& (SInt32 = FigCFNumberCreateSInt32()) != 0)
  {
    uint64_t v12 = (const void *)SInt32;
    v17.origin.x = a2;
    v17.origin.y = a3;
    v17.size.CGFloat width = a4;
    v17.size.CGFloat height = a5;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v17);
    if (DictionaryRepresentation)
    {
      CFDictionaryRef v14 = DictionaryRepresentation;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v12, DictionaryRepresentation);
      CFRelease(v12);
      CFDictionaryRef v15 = v14;
    }
    else
    {
      FigSignalErrorAt();
      CFDictionaryRef v15 = (CFDictionaryRef)v12;
    }
    CFRelease(v15);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FPSupport_setClosedCaptionLayerOptions(uint64_t a1, uint64_t a2, CFIndex a3, const void *a4, const void *a5)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    CFArrayRef v10 = *(const __CFArray **)(a1 + 8);
    if (v10)
    {
      if (CFArrayGetCount(v10) <= a3)
      {
        uint64_t v12 = 4294954436;
LABEL_12:
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        return v12;
      }
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a3), "setOptions:forKeyPath:", a5, a4);
      [MEMORY[0x1E4F39CF8] commit];
    }
    else
    {
      *(unsigned char *)(a1 + 56) = 1;
    }
    CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a1 + 48);
    if (Mutable
      || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a1 + 48) = Mutable) != 0))
    {
      CFDictionarySetValue(Mutable, a4, a5);
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_setClosedCaptionLayerSeparated(uint64_t a1, uint64_t a2, CFIndex a3, int a4)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    CFArrayRef v8 = *(const __CFArray **)(a1 + 8);
    if (v8)
    {
      if (CFArrayGetCount(v8) <= a3)
      {
        uint64_t v11 = 4294954436;
LABEL_14:
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        return v11;
      }
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a3), "setSeparatedValue:", a4 != 0);
      [MEMORY[0x1E4F39CF8] commit];
    }
    else
    {
      *(unsigned char *)(a1 + 56) = 1;
    }
    CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a1 + 48);
    if (Mutable
      || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a1 + 48) = Mutable) != 0))
    {
      CFArrayRef v10 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!a4) {
        CFArrayRef v10 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(Mutable, @"setSeparated", *v10);
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    goto LABEL_14;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_updateClosedCaptionLayer(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (!*(unsigned char *)(a1 + 2)
    || (!a2 ? (CFIndex Count = 0) : (CFIndex Count = CFArrayGetCount(a2)),
        *(int *)(a1 + 24) <= 0 ? (uint64_t v6 = Count) : (uint64_t v6 = *(unsigned int *)(a1 + 24)),
        v6 < 1))
  {
    cleanupClosedCaptionLayer(a1);
LABEL_63:
    uint64_t v22 = 0;
    goto LABEL_64;
  }
  CFArrayRef v7 = *(const __CFArray **)(a1 + 8);
  if (v7) {
    CFArrayRef v7 = (const __CFArray *)CFArrayGetCount(v7);
  }
  if (v7 == (const __CFArray *)v6)
  {
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    for (CFIndex i = 0; i != v6; ++i)
    {
      CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
      [ValueAtIndex resetCaptions];
      [ValueAtIndex removeFromSuperlayer];
    }
    [MEMORY[0x1E4F39CF8] commit];
LABEL_24:
    int v12 = *(_DWORD *)(a1 + 24);
    if (v12 < 1)
    {
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      if (v6 >= 1)
      {
        CFIndex v15 = 0;
        CGFloat v16 = *MEMORY[0x1E4F1DB20];
        CGFloat v17 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
        CGFloat v18 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
        CGFloat v19 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
        do
        {
          CGFloat v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v15);
          objc_msgSend((id)CFArrayGetValueAtIndex(a2, v15), "addSublayer:", v20);
          FPSupport_updateClosedCaptionLayerBounds(a1, v16, v17, v18, v19, v21, v15++, 0, 0);
        }
        while (v6 != v15);
      }
      [MEMORY[0x1E4F39CF8] commit];
      FPSupport_cleanupClosedCaptionHostLayerArraySupport(a1);
    }
    else
    {
      CFArrayRef v13 = *(const __CFArray **)(a1 + 32);
      if (v13)
      {
        CFArrayRef v13 = (const __CFArray *)CFArrayGetCount(v13);
        int v12 = *(_DWORD *)(a1 + 24);
      }
      if ((uint64_t)v13 <= v12)
      {
        CFArrayRef v23 = *(const __CFArray **)(a1 + 32);
        if (v23)
        {
          CFArrayRef v23 = (const __CFArray *)CFArrayGetCount(v23);
          CFIndex v24 = *(int *)(a1 + 24);
        }
        else
        {
          CFIndex v24 = v12;
        }
        if ((uint64_t)v23 < v24)
        {
          CFArrayRef Mutable = *(const __CFArray **)(a1 + 32);
          if (!Mutable)
          {
            CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v24, MEMORY[0x1E4F1D510]);
            *(void *)(a1 + 32) = Mutable;
          }
          uint64_t v26 = *MEMORY[0x1E4F39E60];
          uint64_t v27 = *MEMORY[0x1E4F1CFD0];
          uint64_t v28 = *MEMORY[0x1E4F39E80];
          if (Mutable) {
LABEL_52:
          }
            CFArrayRef Mutable = (const __CFArray *)CFArrayGetCount(Mutable);
          while ((uint64_t)Mutable < *(int *)(a1 + 24))
          {
            uint64_t v29 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", @"FigPlayer_CC_CAContext", v26, v27, v28, 0);
            CMItemCount v30 = (const void *)[MEMORY[0x1E4F39D28] contextWithOptions:v29];
            if (!v30) {
              goto LABEL_42;
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v30);
            CFArrayRef Mutable = *(const __CFArray **)(a1 + 32);
            if (Mutable) {
              goto LABEL_52;
            }
          }
        }
      }
      else
      {
        [MEMORY[0x1E4F39CF8] begin];
        if (!pthread_main_np()) {
          [MEMORY[0x1E4F39CF8] activateBackground:1];
        }
        [MEMORY[0x1E4F39CF8] setDisableActions:1];
        while (1)
        {
          CFArrayRef v14 = *(const __CFArray **)(a1 + 32);
          if (v14) {
            CFArrayRef v14 = (const __CFArray *)CFArrayGetCount(v14);
          }
          if ((uint64_t)v14 <= *(int *)(a1 + 24)) {
            break;
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), 0);
        }
        [MEMORY[0x1E4F39CF8] commit];
      }
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      if (*(int *)(a1 + 24) >= 1)
      {
        CFIndex v31 = 0;
        CGFloat v32 = *MEMORY[0x1E4F1DB20];
        CGFloat v33 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
        CGFloat v34 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
        CGFloat v35 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
        do
        {
          long long v36 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v31);
          objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v31), "setLayer:", v36);
          FPSupport_updateClosedCaptionLayerBounds(a1, v32, v33, v34, v35, v37, v31++, 0, 0);
        }
        while (v31 < *(int *)(a1 + 24));
      }
      [MEMORY[0x1E4F39CF8] commit];
    }
    goto LABEL_63;
  }
  cleanupClosedCaptionLayer(a1);
  *(void *)(a1 + 8) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, MEMORY[0x1E4F1D510]);
  while (1)
  {
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    CFArrayRef v10 = (void *)+[FigCaptionLayer layer];
    if (!v10) {
      break;
    }
    uint64_t v11 = v10;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), v10);
    [v11 setFontName:"Courier New"];
    [MEMORY[0x1E4F39CF8] commit];
    if (!--v6)
    {
      uint64_t v6 = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
      goto LABEL_24;
    }
  }
  [MEMORY[0x1E4F39CF8] commit];
LABEL_42:
  uint64_t v22 = FigSignalErrorAt();
  if (v22) {
    cleanupClosedCaptionLayer(a1);
  }
LABEL_64:
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  return v22;
}

void cleanupClosedCaptionLayer(uint64_t a1)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  CFArrayRef v2 = *(const __CFArray **)(a1 + 8);
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
      objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i), "removeFromSuperlayer");
  }
  uint64_t v5 = *(const void **)(a1 + 8);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 8) = 0;
  }
  [MEMORY[0x1E4F39CF8] commit];
  FPSupport_cleanupClosedCaptionHostLayerArraySupport(a1);
  uint64_t v6 = *(__CFDictionary **)(a1 + 40);
  if (v6) {
    CFDictionaryRemoveAllValues(v6);
  }

  JUMPOUT(0x19970E2B0);
}

void FPSupport_cleanupClosedCaptionHostLayerArraySupport(uint64_t a1)
{
  CFArrayRef v2 = (void *)MEMORY[0x199711A30]();
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  int64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 32) = 0;
  }
  [MEMORY[0x1E4F39CF8] commit];
}

uint64_t FPSupport_AppendDeferredTransactionChangeForUpdatingHostLayersInLayers(const void *a1, const __CFArray *a2, CFArrayRef theArray, const __CFArray *a4, uint64_t a5)
{
  if (!theArray)
  {
    CFIndex Count = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    CFIndex v10 = 0;
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  CFIndex v10 = CFArrayGetCount(a4);
LABEL_6:
  if (v10 == Count
    && (!a2 ? (CFIndex v11 = 0) : (CFIndex v11 = CFArrayGetCount(a2)),
        v11 == Count && (int v12 = malloc_type_malloc(0x18uLL, 0x6004045F868BCuLL)) != 0))
  {
    uint64_t v13 = (uint64_t)v12;
    void *v12 = FigCFArrayCreateCopy();
    *(void *)(v13 + 8) = FigCFArrayCreateCopy();
    *(void *)(v13 + 16) = FigCFArrayCreateCopy();
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a5, v13, (uint64_t)fps_disposeCallUpdateHostLayersInLayers, (uint64_t)fps_copyDescriptionForCallUpdateHostLayersInLayers, (uint64_t)fps_callUpdateHostLayersInLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeCallUpdateHostLayersInLayers(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  int64_t v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = a1[2];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForCallUpdateHostLayersInLayers()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFArrayRef v2 = (const void *)FigCFCopyCompactDescription();
  int64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"Update Host Layer Array %@ with ContextID Array %@ and insert in Client Layer Array %@", v2, v1, v3);
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  return Mutable;
}

uint64_t fps_callUpdateHostLayersInLayers(uint64_t a1)
{
  CFArrayRef v2 = (void *)MEMORY[0x199711A30]();
  CFArrayRef v3 = *(const __CFArray **)(a1 + 8);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        FigCFArrayGetInt32AtIndex();
        CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
        [ValueAtIndex setContextId:0];
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i), "addSublayer:", ValueAtIndex);
      }
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForRemovingEachLayerInArrayFromItsSuperlayer(const void *a1, uint64_t a2, uint64_t a3)
{
  CFIndex v5 = malloc_type_malloc(8uLL, 0x6004044C4A2DFuLL);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    *CFIndex v5 = FigCFArrayCreateCopy();
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v6, (uint64_t)fps_disposeCallRemoveEachLayerInArrayFromItsSuperLayer, (uint64_t)fps_copyDescriptionForCallRemoveEachLayerInArrayFromItsSuperLayer, (uint64_t)fps_callRemoveEachLayerInArrayFromItsSuperLayer);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeCallRemoveEachLayerInArrayFromItsSuperLayer(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForCallRemoveEachLayerInArrayFromItsSuperLayer()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"Remove Layers From Their Superlayers: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  return Mutable;
}

uint64_t fps_callRemoveEachLayerInArrayFromItsSuperLayer(CFArrayRef *a1)
{
  CFArrayRef v2 = (void *)MEMORY[0x199711A30]();
  if (*a1)
  {
    CFIndex Count = CFArrayGetCount(*a1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*a1, i), "removeFromSuperlayer");
    }
  }
  return 0;
}

uint64_t FPSupport_createRenderPipelineOptions(const __CFAllocator *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, const void *a6, int a7, int a8, char a9, char a10, const void *a11, char a12, char a13, char a14, int a15, char a16, void *value, char a18, void *a19, __CFDictionary **a20)
{
  CFArrayRef Mutable = CFDictionaryCreateMutable(a1, 20, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v28 = Mutable;
  uint64_t v29 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    goto LABEL_15;
  }
  CFDictionarySetValue(Mutable, @"FormatDescription", a2);
  MediaSubuint64_t Type = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)a2);
  if (MediaSubType <= 1634743415)
  {
    if (MediaSubType != 1634742376 && MediaSubType != 1634742888)
    {
      unsigned __int16 v31 = 13416;
LABEL_10:
      if (MediaSubType != (v31 | 0x61700000)) {
        goto LABEL_15;
      }
    }
  }
  else if (((MediaSubType - 1634755432) > 0xB || ((1 << (MediaSubType - 104)) & 0x8C1) == 0) {
         && ((MediaSubType - 1634759272) > 6 || ((1 << (MediaSubType - 104)) & 0x51) == 0))
  }
  {
    unsigned __int16 v31 = 13432;
    goto LABEL_10;
  }
  if (FigVideoFormatDescriptionContainsAlphaChannel()) {
    CFDictionarySetValue(v28, @"InhibitCompressedBufferUse", *v29);
  }
LABEL_15:
  if ((*(_DWORD *)(a4 + 12) & 0x1D) == 1) {
    FigCFDictionarySetCMTime();
  }
  if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1) {
    FigCFDictionarySetCMTime();
  }
  if (a3) {
    FigCFDictionarySetInt32();
  }
  CGFloat v32 = *v29;
  if (a7) {
    CFDictionarySetValue(v28, @"AllowAudibleContent", *v29);
  }
  if (a8) {
    CFDictionarySetValue(v28, @"AllowAMRDecode", v32);
  }
  if (a12) {
    CFDictionarySetValue(v28, @"AllowAtmosDecode", v32);
  }
  if (a13) {
    CFDictionarySetValue(v28, @"EnableSpatialization", v32);
  }
  if (a14) {
    CFDictionarySetValue(v28, @"AudioOnly", v32);
  }
  CGFloat v33 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (a9) {
    CGFloat v34 = v32;
  }
  else {
    CGFloat v34 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v28, @"HardwarePassthrough", v34);
  if (a10) {
    CGFloat v35 = v32;
  }
  else {
    CGFloat v35 = v33;
  }
  CFDictionarySetValue(v28, @"DisallowMultiplePlayResources", v35);
  if (a16) {
    long long v36 = v32;
  }
  else {
    long long v36 = v33;
  }
  CFDictionarySetValue(v28, @"AutomaticallyRestartsAfterConfigurationChange", v36);
  if (a6) {
    CFDictionarySetValue(v28, @"AudioDeviceUID", a6);
  }
  if (a11) {
    CFDictionarySetValue(v28, @"SharePixelBufferPool", a11);
  }
  if (value) {
    CFDictionarySetValue(v28, @"AudioSession", value);
  }
  if (a19) {
    CFDictionarySetValue(v28, @"LoggingID", a19);
  }
  if (a15) {
    FigCFDictionarySetInt32();
  }
  if (a18) {
    FigCFDictionarySetBoolean();
  }
  *a20 = v28;
  if (v28) {
    return 0;
  }
  else {
    return FigSignalErrorAt();
  }
}

double FPSupport_getVideoDecodeWaterLevels(CMTime *a1, CMTime *a2, int a3)
{
  CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v8 = v9;
  if (a3)
  {
    CMTimeMake(&v8, 3, 30);
    int64_t v5 = 5;
    int32_t v6 = 30;
  }
  else
  {
    CMTimeMake(&v8, 5, 300);
    int64_t v5 = 25;
    int32_t v6 = 300;
  }
  CMTimeMake(&v9, v5, v6);
  CelestialCustomizePlaybackImageQueueLevels();
  *a1 = v8;
  double result = *(double *)&v9.value;
  *a2 = v9;
  return result;
}

double FPSupport_getDataQueueWaterLevels(CMTime *a1, CMTime *a2)
{
  memset(&v6, 0, sizeof(v6));
  CMTimeMake(&v6, 100, 1000);
  memset(&v5, 0, sizeof(v5));
  CMTimeMake(&v5, 200, 1000);
  if (a1)
  {
    double result = *(double *)&v6.value;
    *a1 = v6;
  }
  if (a2)
  {
    double result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t FPSupport_createVideoRenderPipeline(const void *a1, const void *a2, int a3, const __CFArray *a4, const __CFArray *a5, int a6, const void *a7, int a8, char a9, const void *a10, const void *a11, int a12, char a13, void *a14, CFTypeRef *a15)
{
  long long v38 = 0;
  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  FPSupport_getVideoDecodeWaterLevels(&v37, &v36, a6);
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime v35 = v37;
  CMTime v34 = v36;
  uint64_t v21 = FPSupport_createRenderPipelineOptions(v20, a7, a8, (uint64_t)&v35, (uint64_t)&v34, 0, 0, 0, 0, 0, a11, 0, 0, 0, a12, 1, 0, a13, a14,
          &v38);
  if (v21) {
    return v21;
  }
  uint64_t v22 = v38;
  CFArrayRef v23 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a9)
  {
    CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(v20, 0, v38);
    CFDictionarySetValue(MutableCopy, @"NeroVideoMode", *v23);
    if (a4 && CFArrayGetCount(a4) >= 1) {
      uint64_t v25 = FigOctaviaVideoRenderPipelineCreateWithFigImageQueueArray(v20, MutableCopy, a4, a5, a1, a2, 0, a3, a10, a15);
    }
    else {
      uint64_t v25 = FigOctaviaVideoRenderPipelineCreate((uint64_t)v20, (uint64_t)MutableCopy, a10, a15);
    }
    uint64_t v26 = v25;
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v26) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  uint64_t v26 = FigVideoRenderPipelineCreateWithFigImageQueueArray(v20, a1, a2, 0, a3, a4, a5, v38, a15);
  if (!v26)
  {
LABEL_12:
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*a15);
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CMItemCount v30 = *(void (**)(uint64_t, __CFString *, const void *))(v29 + 56);
    if (v30) {
      v30(FigBaseObject, @"VideoEnqueueResetsSystemSleepTimer", *v23);
    }
  }
LABEL_17:
  if (v22) {
    CFRelease(v22);
  }
  return v26;
}

uint64_t FPSupport_initializeClosedCaptions(uint64_t a1)
{
  uint64_t result = FigReentrantMutexCreate();
  *(void *)(a1 + 16) = result;
  return result;
}

void FPSupport_releaseClosedCaptions(void *a1)
{
  cleanupClosedCaptionLayer((uint64_t)a1);
  if (a1[2])
  {
    FigSimpleMutexDestroy();
    a1[2] = 0;
  }
  CFArrayRef v2 = (const void *)a1[6];
  if (v2)
  {
    CFRelease(v2);
    a1[6] = 0;
  }
  CFArrayRef v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
}

id FPSupport_CopyDictionaryDescriptionAsCFString(id result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFArrayRef v2 = (void *)MEMORY[0x199711A30]();
    id v3 = (id)[v1 description];
    return v3;
  }
  return result;
}

__CFDictionary *FPSupport_CreateNotificationPayloadForProperties(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  v54[6] = *MEMORY[0x1E4F143B8];
  CMTimeValue value = 0;
  CFIndex Count = CFArrayGetCount(theArray);
  v54[0] = @"ExternalProtectionStatus";
  v54[1] = @"CurrentExternalProtectionStatus";
  v54[2] = @"IsNeroPlaybackActive";
  v54[3] = @"CurrentIsNeroPlaybackActive";
  v54[4] = @"DisplayingClosedCaptions";
  _WORD v54[5] = @"CurrentDisplayingClosedCaptions";
  v53[0] = @"CanPlayFastForward";
  v53[1] = @"CurrentCanPlayFastForward";
  v53[2] = @"CanPlayFastReverse";
  v53[3] = @"CurrentCanPlayFastReverse";
  v53[4] = @"CanPlayReverse";
  v53[5] = @"CurrentCanPlayReverse";
  v53[6] = @"SupportsFrameStepping";
  v53[7] = @"CurrentSupportsFrameStepping";
  v53[8] = @"PlayableTimeIntervals";
  v53[9] = @"CurrentPlayableTimeIntervals";
  v53[10] = @"SeekableTimeIntervals";
  v53[11] = @"CurrentSeekableTimeIntervals";
  v53[12] = @"EndTime";
  v53[13] = @"ItemEndTime";
  v53[14] = @"TrackIDArray";
  v53[15] = @"CurrentTrackIDArray";
  v53[16] = @"HasEnabledAudio";
  v53[17] = @"HasEnabledAudio";
  v53[18] = @"HasEnabledVideo";
  v53[19] = @"HasEnabledVideo";
  v53[20] = @"HasDiscoveredVideo";
  v53[21] = @"HasDiscoveredVideo";
  v53[22] = @"TaggedRangeMetadataArray";
  v53[23] = @"CurrentTaggedRangeMetadataArray";
  v53[24] = @"DisplayNonForcedSubtitles";
  v53[25] = @"CurrentDisplayNonForcedSubtitles";
  v53[26] = @"RecommendedTimeOffsetFromLive";
  v53[27] = @"CurrentRecommendedTimeOffsetFromLive";
  v53[28] = @"TimeOffsetFromLive";
  v53[29] = @"CurrentConfiguredTimeOffsetFromLive";
  v53[30] = @"VideoTrackMatrix";
  v53[31] = @"CurrentVideoTrackMatrix";
  v53[32] = @"SelectedMediaArray";
  v53[33] = @"CurrentSelectedMediaArray";
  v53[34] = @"IsRenderingSpatialAudio";
  v53[35] = @"RenderingSpatialAudio";
  v53[36] = @"CurrentStableVariantID";
  v53[37] = @"CurrentStableVariantID";
  v53[38] = @"CoordinationIdentifier";
  v53[39] = @"CoordinationIdentifier";
  v53[40] = @"BufferState";
  v53[41] = @"CurrentBufferState";
  if (!a1) {
    return 0;
  }
  CFIndex v7 = Count;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  for (uint64_t i = 0; i != 6; i += 2)
  {
    CFIndex v11 = (const void *)v54[i];
    v55.CFIndex location = 0;
    v55.length = v7;
    if (!CFArrayContainsValue(theArray, v55, v11)) {
      continue;
    }
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFIndex v15 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, void **))(v14 + 48);
    if (!v15) {
      goto LABEL_12;
    }
    int v16 = v15(FigBaseObject, v11, v8, &value);
    CGFloat v17 = value;
    if (!v16 && value)
    {
      CFDictionarySetValue(Mutable, (const void *)v54[i + 1], value);
LABEL_12:
      CGFloat v17 = value;
    }
    if (v17)
    {
      CFRelease(v17);
      CMTimeValue value = 0;
    }
  }
  v56.CFIndex location = 0;
  v56.length = v7;
  if (CFArrayContainsValue(theArray, v56, @"CurrentRate"))
  {
    LODWORD(BOOLean.CFDictionarySetValue(theDict, key, value) = 0;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v19 = v18 ? v18 : 0;
    CFAllocatorRef v20 = *(unsigned int (**)(uint64_t, CMTime *))(v19 + 48);
    if (v20)
    {
      if (!v20(a1, &BOOLean)) {
        FigCFDictionarySetFloat32();
      }
    }
  }
  if (!a2) {
    return Mutable;
  }
  uint64_t v21 = 0;
  while (2)
  {
    uint64_t v22 = (const void *)v53[v21];
    v57.CFIndex location = 0;
    v57.length = v7;
    if (CFArrayContainsValue(theArray, v57, v22))
    {
      uint64_t v23 = FigPlaybackItemGetFigBaseObject(a2);
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, void **))(v25 + 48);
      if (v26)
      {
        int v27 = v26(v23, v22, v8, &value);
        uint64_t v28 = value;
        if (!v27 && value)
        {
          CFDictionarySetValue(Mutable, (const void *)v53[v21 + 1], value);
          goto LABEL_33;
        }
      }
      else
      {
LABEL_33:
        uint64_t v28 = value;
      }
      if (v28)
      {
        CFRelease(v28);
        CMTimeValue value = 0;
      }
    }
    v21 += 2;
    if (v21 != 42) {
      continue;
    }
    break;
  }
  v58.CFIndex location = 0;
  v58.length = v7;
  if (CFArrayContainsValue(theArray, v58, @"CurrentDuration"))
  {
    CMTime BOOLean = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    unsigned __int16 v31 = *(void (**)(uint64_t, CMTime *))(v30 + 16);
    if (v31) {
      v31(a2, &BOOLean);
    }
    if (BOOLean.flags)
    {
      CMTime time = BOOLean;
      CFDictionaryRef v32 = CMTimeCopyAsDictionary(&time, v8);
      CMTimeValue value = v32;
      if (v32)
      {
        CFDictionarySetValue(Mutable, @"CurrentDuration", v32);
        if (value)
        {
          CFRelease(value);
          CMTimeValue value = 0;
        }
      }
    }
  }
  v59.CFIndex location = 0;
  v59.length = v7;
  if (CFArrayContainsValue(theArray, v59, @"CurrentDimensions"))
  {
    LODWORD(BOOLean.CFDictionarySetValue(theDict, key, value) = 0;
    LODWORD(time.CFDictionarySetValue(theDict, key, value) = 0;
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v34 = v33 ? v33 : 0;
    CMTime v35 = *(unsigned int (**)(uint64_t, CMTime *, CMTime *))(v34 + 8);
    if (v35)
    {
      if (!v35(a2, &BOOLean, &time))
      {
        v61.CGFloat width = *(float *)&BOOLean.value;
        v61.CGFloat height = *(float *)&time.value;
        CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v61);
        CMTimeValue value = DictionaryRepresentation;
        if (DictionaryRepresentation)
        {
          CFDictionarySetValue(Mutable, @"CurrentDimensions", DictionaryRepresentation);
          if (value)
          {
            CFRelease(value);
            CMTimeValue value = 0;
          }
        }
      }
    }
  }
  v60.CFIndex location = 0;
  v60.length = v7;
  if (!CFArrayContainsValue(theArray, v60, @"VideoSlotArray")) {
    return Mutable;
  }
  BOOLean.CMTimeValue value = 0;
  uint64_t v36 = FigPlaybackItemGetFigBaseObject(a2);
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  CFDictionaryRef v39 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v38 + 48);
  if (!v39)
  {
    int v42 = 0;
    goto LABEL_67;
  }
  int v40 = v39(v36, @"HasEnabledVideo", v8, &BOOLean);
  CGRect v41 = (const void *)BOOLean.value;
  if (!v40)
  {
    int v42 = CFBooleanGetValue((CFBooleanRef)BOOLean.value);
    CGRect v41 = (const void *)BOOLean.value;
    if (!BOOLean.value) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  int v42 = 0;
  if (BOOLean.value) {
LABEL_66:
  }
    CFRelease(v41);
LABEL_67:
  uint64_t v44 = FigPlaybackItemGetFigBaseObject(a2);
  uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v45) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = 0;
  }
  CMItemCount v47 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v46 + 48);
  if (v47 && !v47(v44, @"VideoSlotArray", v8, &value))
  {
    int64_t v48 = value;
    if (!value) {
      return Mutable;
    }
  }
  else
  {
    if (!v42) {
      return Mutable;
    }
    int64_t v48 = value;
    if (!value)
    {
      int64_t v48 = CFArrayCreate(v8, 0, 0, MEMORY[0x1E4F1D510]);
      CMTimeValue value = v48;
      if (!v48) {
        return Mutable;
      }
    }
  }
  CFDictionarySetValue(Mutable, @"CurrentVideoSlotArray", v48);
  if (value) {
    CFRelease(value);
  }
  return Mutable;
}

uint64_t FPSupport_GetMaxDisplaySizeFromImageQueues(const __CFArray *a1, double *a2)
{
  id v3 = (CGSize *)MEMORY[0x1E4F1DB30];
  double width = *MEMORY[0x1E4F1DB30];
  double height = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    CFDictionaryRef dict = 0;
    if (a2)
    {
      CFIndex v8 = Count;
      if (Count >= 1)
      {
        CFIndex v9 = 0;
        uint64_t v10 = *MEMORY[0x1E4F1CF80];
        CGSize v19 = *v3;
        while (1)
        {
          CGSize size = v19;
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
          uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
          uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v13) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = 0;
          }
          CFIndex v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v14 + 48);
          if (!v15) {
            goto LABEL_14;
          }
          int v16 = v15(FigBaseObject, @"FigImageQueueProperty_DisplaySize", v10, &dict);
          CFDictionaryRef v17 = dict;
          if (!v16)
          {
            if (dict) {
              break;
            }
          }
LABEL_15:
          if (v17)
          {
            CFRelease(v17);
            CFDictionaryRef dict = 0;
          }
          if (v8 == ++v9) {
            goto LABEL_20;
          }
        }
        if (CGSizeMakeWithDictionaryRepresentation(dict, &size) && size.width * size.height > width * height)
        {
          double width = size.width;
          double height = size.height;
        }
LABEL_14:
        CFDictionaryRef v17 = dict;
        goto LABEL_15;
      }
      goto LABEL_20;
    }
  }
  else if (a2)
  {
LABEL_20:
    *a2 = width;
    a2[1] = height;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateSetRateOptions(const __CFAllocator *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v5 = Mutable;
  if (!a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    if (v5) {
      CFRelease(v5);
    }
    return v6;
  }
  if (Mutable)
  {
    FigCFDictionarySetInt32();
    uint64_t v6 = 0;
    *a3 = v5;
    return v6;
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_SetTransientTimebaseForCoordinatedPlaybackSynchronization(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  CMTimebaseRef timebaseOut = 0;
  CMClockRef clockOut = 0;
  if (a1)
  {
    if (*(unsigned char *)(a2 + 12) & 1) != 0 && (*(unsigned char *)(a3 + 12))
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v9 = CMAudioClockCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &clockOut);
      if (!v9)
      {
        uint64_t v10 = CMTimebaseCreateWithSourceClock(v8, clockOut, &timebaseOut);
        CMTimebaseRef v11 = timebaseOut;
        if (v10) {
          BOOL v12 = 1;
        }
        else {
          BOOL v12 = timebaseOut == 0;
        }
        if (!v12)
        {
          memset(&v22, 0, sizeof(v22));
          CMClockRef HostTimeClock = CMClockGetHostTimeClock();
          CMTime time = *(CMTime *)a3;
          CMSyncConvertTime(&v22, &time, HostTimeClock, clockOut);
          CMTime time = *(CMTime *)a2;
          CMTime v20 = v22;
          CMTimebaseSetRateAndAnchorTime(timebaseOut, a4, &time, &v20);
          CMTimebaseRef v14 = timebaseOut;
          uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = *(uint64_t (**)(uint64_t, __CFString *, CMTimebaseRef))(v17 + 56);
          if (v18) {
            uint64_t v10 = v18(FigBaseObject, @"TransientTimebaseForCoordinatedPlaybackSynchronization", v14);
          }
          else {
            uint64_t v10 = 4294954514;
          }
          CMTimebaseRef v11 = timebaseOut;
        }
        if (v11) {
          CFRelease(v11);
        }
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
    }
    uint64_t v10 = v9;
LABEL_18:
    if (clockOut) {
      CFRelease(clockOut);
    }
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_ConfigSnapRateForLQZL(float *a1, float *a2, float a3)
{
  uint64_t v3 = 0;
  float v4 = fabsf(a3);
  float v5 = 1.0;
  if (a3 != 0.0)
  {
    float v5 = v4;
    double v6 = v4;
    if (v4 <= 2.1)
    {
      float v5 = 2.0;
      if (v4 <= 1.75)
      {
        float v5 = 1.5;
        if (v4 <= 1.375)
        {
          float v5 = 1.25;
          if (v4 <= 1.125)
          {
            float v5 = 1.0;
            if (v6 <= 0.9)
            {
              if (v6 <= 0.733)
              {
                float v5 = 0.66667;
                if (v6 <= 0.583) {
                  float v5 = 0.5;
                }
              }
              else
              {
                float v5 = 0.8;
              }
            }
          }
        }
      }
      if (a3 < 0.0) {
        a3 = -v5;
      }
      else {
        a3 = v5;
      }
      uint64_t v3 = 1;
    }
  }
  if (a1) {
    *a1 = v5;
  }
  if (a2) {
    *a2 = a3;
  }
  return v3;
}

__CFString *FPSupport_GetPowerStateNotificationSingleton()
{
  return @"PowerStateNotificationSingleton";
}

uint64_t FPSupport_IsInLowPowerMode()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "isLowPowerModeEnabled");
}

__CFString *FPSupport_GetDisplayVideoRangeNotificationSingleton()
{
  return @"DisplayVideoRangeNotificationSingleton";
}

const char *FPSupport_GetModeString(int a1)
{
  if ((a1 - 1) > 4) {
    return "Unknown";
  }
  else {
    return off_1E5794760[a1 - 1];
  }
}

void FPSupport_GetCurrentDisplayModeVideoRangeAndSizeAndFrameRate(const __CFArray *a1, _DWORD *a2, double *a3, double *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t Count = fig_note_initialize_category_with_default_work_cf();
  if (a1)
  {
    uint64_t Count = CFArrayGetCount(a1);
    BOOL v7 = Count > 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t context = (void *)MEMORY[0x199711A30](Count);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  CFAllocatorRef v8 = (void *)[MEMORY[0x1E4F39B60] displays];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    int v11 = 0;
    uint64_t v12 = *(void *)v32;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v32 != v12) {
          objc_enumerationMutation(v8);
        }
        uint64_t v17 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        if (v7)
        {
          CFIndex v18 = CFArrayGetCount(a1);
          CGSize v19 = (const void *)[v17 name];
          v37.CFIndex location = 0;
          v37.length = v18;
          if (!CFArrayContainsValue(a1, v37, v19)) {
            continue;
          }
        }
        int v20 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v17);
        int VideoRangeForMode = FPSupport_GetVideoRangeForMode((void *)[v17 currentMode], v20);
        if (VideoRangeForMode <= v11)
        {
          if (VideoRangeForMode == v11)
          {
            double v24 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v17, "currentMode"), "width");
            unint64_t v25 = objc_msgSend((id)objc_msgSend(v17, "currentMode"), "height");
            objc_msgSend((id)objc_msgSend(v17, "currentMode"), "refreshRate");
            if (v15 >= v24)
            {
              if (v13 < v26 && v15 == v24) {
                double v13 = v26;
              }
            }
            else
            {
              double v14 = (double)v25;
              double v13 = v26;
              double v15 = v24;
            }
          }
        }
        else
        {
          int v22 = VideoRangeForMode;
          double v15 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v17, "currentMode"), "width");
          double v14 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v17, "currentMode"), "height");
          objc_msgSend((id)objc_msgSend(v17, "currentMode"), "refreshRate");
          double v13 = v23;
          int v11 = v22;
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v10);
  }
  else
  {
    int v11 = 0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
  }
  if (a2) {
    *a2 = v11;
  }
  if (a3)
  {
    *a3 = v15;
    a3[1] = v14;
  }
  if (a4) {
    *a4 = v13;
  }
}

CFArrayRef FPSupport_CreateAllVideoRangesSupportedByDisplays()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v2 = fig_note_initialize_category_with_default_work_cf();
  if (Mutable)
  {
    uint64_t context = (void *)MEMORY[0x199711A30](v2);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    obCFIndex j = (id)[MEMORY[0x1E4F39B60] displays];
    uint64_t v3 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v21 = *(void *)v28;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v28 != v21) {
            objc_enumerationMutation(obj);
          }
          double v6 = *(void **)(*((void *)&v27 + 1) + 8 * v5);
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          BOOL v7 = (void *)[v6 availableModes];
          uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v31 count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)v24;
            do
            {
              uint64_t v11 = 0;
              do
              {
                if (*(void *)v24 != v10) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v12 = *(void **)(*((void *)&v23 + 1) + 8 * v11);
                int v13 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v6);
                int valuePtr = 0;
                int valuePtr = FPSupport_GetVideoRangeForMode(v12, v13);
                CFNumberRef v14 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
                if (v14)
                {
                  CFNumberRef v15 = v14;
                  v34.length = CFArrayGetCount(Mutable);
                  v34.CFIndex location = 0;
                  if (!CFArrayContainsValue(Mutable, v34, v15)) {
                    CFArrayAppendValue(Mutable, v15);
                  }
                  CFRelease(v15);
                }
                ++v11;
              }
              while (v9 != v11);
              uint64_t v9 = [v7 countByEnumeratingWithState:&v23 objects:v31 count:16];
            }
            while (v9);
          }
          ++v5;
        }
        while (v5 != v4);
        uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v4);
    }
    if (!CFArrayGetCount(Mutable))
    {
      int valuePtr = 1;
      CFNumberRef v16 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
      if (v16)
      {
        CFNumberRef v17 = v16;
        v35.length = CFArrayGetCount(Mutable);
        v35.CFIndex location = 0;
        if (!CFArrayContainsValue(Mutable, v35, v17)) {
          CFArrayAppendValue(Mutable, v17);
        }
        CFRelease(v17);
      }
    }
  }
  return Mutable;
}

uint64_t fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(void *a1)
{
  CFStringRef v2 = FPSupport_CopyMainDisplayCAName();
  [a1 name];
  uint64_t v3 = FigCFEqual();
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

uint64_t FPSupport_GetVideoRangeForMode(void *a1, int a2)
{
  uint64_t v4 = (void *)[a1 hdrMode];
  if ([v4 isEqualToString:*MEMORY[0x1E4F39F08]])
  {
    if (a2)
    {
      uint64_t v5 = (void *)[a1 colorGamut];
      if ([v5 isEqual:*MEMORY[0x1E4F39EF0]]) {
        unsigned int v6 = 1;
      }
      else {
        unsigned int v6 = 5;
      }
    }
    else
    {
      unsigned int v6 = 1;
    }
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F39EE8]])
  {
    unsigned int v6 = 4;
  }
  else if ([v4 isEqualToString:*MEMORY[0x1E4F39EF8]])
  {
    unsigned int v6 = 3;
  }
  else
  {
    uint64_t result = [v4 isEqualToString:*MEMORY[0x1E4F39F00]];
    if (!result) {
      return result;
    }
    unsigned int v6 = 2;
  }
  if (FigIsHDRAllowedOnDevice()) {
    return v6;
  }
  else {
    return 1;
  }
}

void FPSupport_GetDisplayInfoForCADisplay(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    if (a1)
    {
      uint64_t v3 = (void *)MEMORY[0x199711A30]();
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v4 = objc_msgSend(MEMORY[0x1E4F39B60], "displays", 0);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v15;
        while (2)
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v15 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
            [v9 name];
            if (FigCFEqual())
            {
              int v10 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v9);
              *(_DWORD *)a2 = FPSupport_GetVideoRangeForMode((void *)[v9 currentMode], v10);
              double v11 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v9, "currentMode"), "width");
              unint64_t v12 = objc_msgSend((id)objc_msgSend(v9, "currentMode"), "height");
              *(double *)(a2 + 8) = v11;
              *(double *)(a2 + 16) = (double)v12;
              objc_msgSend((id)objc_msgSend(v9, "currentMode"), "refreshRate");
              *(void *)(a2 + 24) = v13;
              goto LABEL_13;
            }
          }
          uint64_t v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_13:
    }
  }
}

void FPSupport_GetBestDisplayInfoForDisplay(const void *a1, uint64_t a2, float a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    if (a1)
    {
      CFTypeID v6 = CFGetTypeID(a1);
      if (v6 == CFStringGetTypeID())
      {
        uint64_t v7 = (void *)MEMORY[0x199711A30]();
        long long v69 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        uint64_t v8 = (void *)[MEMORY[0x1E4F39B60] displays];
        uint64_t v9 = [v8 countByEnumeratingWithState:&v69 objects:v85 count:16];
        if (!v9) {
          goto LABEL_72;
        }
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v70;
        while (1)
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v70 != v11) {
              objc_enumerationMutation(v8);
            }
            uint64_t v13 = *(void **)(*((void *)&v69 + 1) + 8 * i);
            [v13 name];
            if (FigCFEqual())
            {
              if (a3 <= 60.0) {
                int v14 = a3 > 30.0;
              }
              else {
                int v14 = 2;
              }
              if (![v13 allowedHDRModes]) {
                goto LABEL_70;
              }
              long long v83 = 0u;
              long long v84 = 0u;
              long long v81 = 0u;
              long long v82 = 0u;
              obuint64_t j = (id)[v13 allowedHDRModes];
              uint64_t v67 = [obj countByEnumeratingWithState:&v81 objects:v88 count:16];
              if (!v67) {
                goto LABEL_70;
              }
              CFRange v57 = v7;
              uint64_t v58 = a2;
              int v15 = 0;
              int v16 = 0;
              uint64_t v17 = *(void *)v82;
              uint64_t v18 = *MEMORY[0x1E4F39F08];
              uint64_t v63 = *MEMORY[0x1E4F39EE8];
              uint64_t v60 = *MEMORY[0x1E4F39EF8];
              uint64_t v59 = *MEMORY[0x1E4F39F00];
              double v19 = 0.0;
              double v20 = 0.0;
              double v21 = 0.0;
              long long v65 = v13;
              uint64_t v61 = *MEMORY[0x1E4F39F08];
              uint64_t v62 = *(void *)v82;
              do
              {
                uint64_t v22 = 0;
                do
                {
                  if (*(void *)v82 != v17) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v68 = v22;
                  long long v23 = *(void **)(*((void *)&v81 + 1) + 8 * v22);
                  if (objc_msgSend(v23, "isEqualToString:", v18, v57))
                  {
                    int v24 = 1;
                  }
                  else if ([v23 isEqualToString:v63])
                  {
                    int v24 = 4;
                  }
                  else if ([v23 isEqualToString:v60])
                  {
                    int v24 = 3;
                  }
                  else if ([v23 isEqualToString:v59])
                  {
                    int v24 = 2;
                  }
                  else
                  {
                    int v24 = 0;
                  }
                  if (v24 > v16)
                  {
                    int v66 = v24;
                    long long v79 = 0u;
                    long long v80 = 0u;
                    long long v77 = 0u;
                    long long v78 = 0u;
                    long long v25 = (void *)[v13 availableModes];
                    uint64_t v26 = [v25 countByEnumeratingWithState:&v77 objects:v87 count:16];
                    if (v26)
                    {
                      uint64_t v27 = v26;
                      uint64_t v28 = *(void *)v78;
                      while (2)
                      {
                        for (uint64_t j = 0; j != v27; ++j)
                        {
                          if (*(void *)v78 != v28) {
                            objc_enumerationMutation(v25);
                          }
                          long long v30 = *(void **)(*((void *)&v77 + 1) + 8 * j);
                          [v30 refreshRate];
                          float v32 = v31;
                          int v33 = objc_msgSend(v23, "isEqual:", objc_msgSend(v30, "hdrMode"));
                          BOOL v34 = v14 == v32 > 30.0;
                          if (v32 > 60.0) {
                            BOOL v34 = a3 > 60.0;
                          }
                          if (v33 && v34)
                          {
                            int v35 = 0;
                            goto LABEL_45;
                          }
                        }
                        uint64_t v27 = [v25 countByEnumeratingWithState:&v77 objects:v87 count:16];
                        if (v27) {
                          continue;
                        }
                        break;
                      }
                      int v35 = 1;
LABEL_45:
                      uint64_t v13 = v65;
                    }
                    else
                    {
                      int v35 = 1;
                    }
                    long long v75 = 0u;
                    long long v76 = 0u;
                    long long v73 = 0u;
                    long long v74 = 0u;
                    uint64_t v36 = (void *)[v13 availableModes];
                    uint64_t v37 = [v36 countByEnumeratingWithState:&v73 objects:v86 count:16];
                    if (v37)
                    {
                      uint64_t v38 = v37;
                      uint64_t v39 = *(void *)v74;
                      double v19 = 0.0;
                      double v20 = 0.0;
                      double v21 = 0.0;
                      double v40 = 0.0;
                      double v41 = 0.0;
                      while (1)
                      {
                        for (uint64_t k = 0; k != v38; ++k)
                        {
                          if (*(void *)v74 != v39) {
                            objc_enumerationMutation(v36);
                          }
                          CGRect v43 = *(void **)(*((void *)&v73 + 1) + 8 * k);
                          [v43 refreshRate];
                          double v45 = v44;
                          if (objc_msgSend(v23, "isEqual:", objc_msgSend(v43, "hdrMode")))
                          {
                            BOOL v46 = a3 > 60.0;
                            float v47 = v45;
                            if (v47 <= 60.0) {
                              BOOL v46 = v14 == v47 > 30.0;
                            }
                            if ((v35 | v46) == 1)
                            {
                              [v43 refreshRate];
                              if (v48 >= v41)
                              {
                                [v43 refreshRate];
                                if (v49 <= v41)
                                {
                                  uint64_t v51 = [v43 width];
                                  if (v19 * v40 >= (double)(unint64_t)([v43 height] * v51)) {
                                    continue;
                                  }
                                }
                                else
                                {
                                  [v43 refreshRate];
                                  double v21 = v50;
                                  double v41 = v50;
                                }
                                unint64_t v52 = [v43 width];
                                double v20 = (double)(unint64_t)[v43 height];
                                double v19 = (double)v52;
                                double v40 = v20;
                              }
                            }
                          }
                        }
                        uint64_t v38 = [v36 countByEnumeratingWithState:&v73 objects:v86 count:16];
                        if (!v38)
                        {
                          int v16 = v66;
                          int v15 = v66;
                          uint64_t v13 = v65;
                          goto LABEL_65;
                        }
                      }
                    }
                    double v19 = 0.0;
                    int v16 = v66;
                    int v15 = v66;
                    double v20 = 0.0;
                    double v21 = 0.0;
LABEL_65:
                    uint64_t v18 = v61;
                    uint64_t v17 = v62;
                  }
                  uint64_t v22 = v68 + 1;
                }
                while (v68 + 1 != v67);
                uint64_t v67 = [obj countByEnumeratingWithState:&v81 objects:v88 count:16];
              }
              while (v67);
              uint64_t v7 = v57;
              a2 = v58;
              if (v15)
              {
                *(_DWORD *)uint64_t v58 = v15;
                *(_DWORD *)(v58 + 4) = 0;
                *(double *)(v58 + 8) = v19;
                *(double *)(v58 + 16) = v20;
              }
              else
              {
LABEL_70:
                int v53 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v13);
                *(_DWORD *)a2 = FPSupport_GetVideoRangeForMode((void *)[v13 currentMode], v53);
                double v54 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v13, "currentMode"), "width");
                unint64_t v55 = objc_msgSend((id)objc_msgSend(v13, "currentMode"), "height");
                *(double *)(a2 + 8) = v54;
                *(double *)(a2 + 16) = (double)v55;
                objc_msgSend((id)objc_msgSend(v13, "currentMode"), "refreshRate");
                double v21 = v56;
              }
              *(double *)(a2 + 24) = v21;
              goto LABEL_72;
            }
          }
          uint64_t v10 = [v8 countByEnumeratingWithState:&v69 objects:v85 count:16];
          if (!v10)
          {
LABEL_72:
            return;
          }
        }
      }
    }
  }
}

uint64_t FPSupport_IsExternalDisplay(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != CFStringGetTypeID()) {
    return 0;
  }
  CFStringRef v2 = (void *)MEMORY[0x199711A30]();
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F39B60], "TVOutDisplay"), "name");
  uint64_t v3 = FigCFEqual();
  return v3;
}

CFStringRef FPSupport_CopyMainDisplayCAName()
{
  CFAllocatorRef v0 = (void *)MEMORY[0x199711A30]();
  CFTypeID v1 = (void *)[MEMORY[0x1E4F39B60] mainDisplay];
  if (v1 && (CFStringRef v2 = (const __CFString *)[v1 name]) != 0) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    CFStringRef Copy = 0;
  }
  return Copy;
}

void FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(_DWORD *a1, double *a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v6 = fig_note_initialize_category_with_default_work_cf();
  if (a1) {
    *a1 = 0;
  }
  if (a2)
  {
    *a2 = 0.0;
    a2[1] = 0.0;
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t v7 = (void *)MEMORY[0x199711A30](v6);
  uint64_t v8 = (void *)[MEMORY[0x1E4F39B60] mainDisplay];
  uint64_t v9 = v8;
  if (a1)
  {
    int v10 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v8);
    *a1 = FPSupport_GetVideoRangeForMode((void *)[v9 currentMode], v10);
  }
  if (a2)
  {
    double v11 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v9, "currentMode"), "width");
    double v12 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v9, "currentMode"), "height");
    *a2 = v11;
    a2[1] = v12;
  }
  if (a3)
  {
    objc_msgSend((id)objc_msgSend(v9, "currentMode"), "refreshRate");
    *a3 = v13;
  }
}

uint64_t FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(const void *a1, CFArrayRef theArray, char a3, uint64_t a4)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  uint64_t v8 = malloc_type_malloc(0x10uLL, 0x1060040E5A1EACFuLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    *(void *)uint64_t v8 = theArray;
    v8[8] = a3;
    CFRetain(theArray);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeClearVideoLayerContext, (uint64_t)fps_copyDescriptionForClearVideoLayerContext, (uint64_t)fps_clearFigVideoLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeClearVideoLayerContext(const void **a1)
{
  CFStringRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForClearVideoLayerContext(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = FigCFCopyCompactDescription();
  uint64_t v4 = (const void *)v3;
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v5 = " and remove them from their superlayer";
  }
  else {
    uint64_t v5 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"Clear video layers %@%s", v3, v5);
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t fps_clearFigVideoLayers(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)a1;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
        uint64_t v7 = (void *)[ValueAtIndex superlayer];
        [ValueAtIndex setContents:0];
        if (*(unsigned char *)(a1 + 8))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && ValueAtIndex == (void *)[v7 videoLayer]) {
            [v7 setVideoLayer:0];
          }
          [ValueAtIndex removeFromSuperlayer];
        }
        [ValueAtIndex setFilters:0];
      }
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(const void *a1, const __CFArray *a2, CFArrayRef theArray, uint64_t a4)
{
  if (!theArray)
  {
    CFIndex Count = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    CFIndex v9 = 0;
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  CFIndex v9 = CFArrayGetCount(a2);
  if (Count != v9) {
    goto LABEL_17;
  }
LABEL_6:
  if (Count < 1) {
    return 0;
  }
  int v10 = malloc_type_malloc(0x10uLL, 0x600405BB7FD7CuLL);
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    *int v10 = a2;
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(v11 + 8) = theArray;
    if (theArray) {
      CFRetain(theArray);
    }
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v11, (uint64_t)fps_disposeAttachFigVideoLayerContext, (uint64_t)fps_copyDescriptionForAttachFigVideoLayerContext, (uint64_t)fps_attachFigVideoLayersToClientLayers);
  }
  else
  {
LABEL_17:
    return FigSignalErrorAt();
  }
}

void fps_disposeAttachFigVideoLayerContext(CFTypeRef *a1)
{
  CFTypeRef v2 = a1[1];
  if (v2) {
    CFRelease(v2);
  }
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForAttachFigVideoLayerContext()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFTypeID v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"Attach fig video layers: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeRef v2 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\nto client layers: %@", v2);
  if (v2) {
    CFRelease(v2);
  }
  return Mutable;
}

uint64_t fps_attachFigVideoLayersToClientLayers(CFArrayRef *a1)
{
  CFArrayRef v2 = a1[1];
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v4 = *a1;
  if (*a1) {
    CFArrayRef v4 = (const __CFArray *)CFArrayGetCount(v4);
  }
  if ((const __CFArray *)Count == v4)
  {
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a1[1], i);
        uint64_t v7 = (void *)CFArrayGetValueAtIndex(*a1, i);
        [v7 addSublayer:ValueAtIndex];
        [v7 setVideoLayer:ValueAtIndex];
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingCAImageQueuesOnVideoLayers(const void *a1, CFArrayRef theArray, const __CFArray *a3, long long *a4, uint64_t a5)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (!a3) {
      return 0;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (!a3) {
      return 0;
    }
  }
  CFIndex v11 = CFArrayGetCount(a3);
  if (Count < 1 || v11 < 1) {
    return 0;
  }
  double v12 = malloc_type_malloc(0x28uLL, 0x10600403247B118uLL);
  if (v12)
  {
    uint64_t v13 = (uint64_t)v12;
    void *v12 = a3;
    CFRetain(a3);
    *(void *)(v13 + 8) = theArray;
    if (theArray) {
      CFRetain(theArray);
    }
    long long v14 = *a4;
    *(void *)(v13 + 32) = *((void *)a4 + 2);
    *(_OWORD *)(v13 + 16) = v14;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a5, v13, (uint64_t)fps_disposeSetCAImageQueuesOnVideoLayersContext, (uint64_t)fps_copyDescriptionForSetCAImageQueuesOnVideoLayersContext, (uint64_t)fps_setCAImageQueuesOnVideoLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetCAImageQueuesOnVideoLayersContext(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetCAImageQueuesOnVideoLayersContext(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFArrayRef v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"Set CA image queues: %@", v4);
  if (v4) {
    CFRelease(v4);
  }
  CMTime time = *(CMTime *)(a1 + 16);
  CFStringRef v5 = CMTimeCopyDescription(v2, &time);
  CFStringAppendFormat(Mutable, 0, @"\nand new duration: %@", v5);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non video layers: %@", v6);
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

uint64_t fps_setCAImageQueuesOnVideoLayers(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 8);
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v4 = *(const __CFArray **)a1;
  if (*(void *)a1) {
    CFArrayRef v4 = (const __CFArray *)CFArrayGetCount(v4);
  }
  if (Count >= (uint64_t)v4) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = Count;
  }
  if (v5 >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = *MEMORY[0x1E4F39FA0];
    uint64_t v8 = (_OWORD *)(a1 + 16);
    CFIndex v9 = (CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v6);
      CFIndex v11 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, v6);
      [v11 setContents:ValueAtIndex];
      [v11 setFillMode:v7];
      if ((*(_DWORD *)(a1 + 28) & 0x11) == 1)
      {
        *(_OWORD *)&time1.CMTimeValue value = *v8;
        time1.CMTimeEpoch epoch = *(void *)(a1 + 32);
        CMTime v15 = *v9;
        if (CMTimeCompare(&time1, &v15) >= 1)
        {
          *(_OWORD *)&time1.CMTimeValue value = *v8;
          time1.CMTimeEpoch epoch = *(void *)(a1 + 32);
          double Seconds = CMTimeGetSeconds(&time1);
          objc_msgSend(v11, "setDuration:");
          [v11 timeOffset];
          if (v13 >= Seconds) {
            [v11 setTimeOffset:Seconds + -0.000001];
          }
        }
      }
      ++v6;
    }
    while (v5 != v6);
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnComposition(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  if (a3 && (uint64_t v8 = malloc_type_malloc(0x10uLL, 0x600405C6656D0uLL)) != 0)
  {
    uint64_t v9 = (uint64_t)v8;
    *uint64_t v8 = a2;
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(v9 + 8) = a3;
    CFRetain(a3);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 0, a4, v9, (uint64_t)fps_disposeSetFigImageQueuesOnCompositionContext, (uint64_t)fps_copyDescriptionForSetFigImageQueuesOnCompositionContext, (uint64_t)fps_setFigImageQueuesOnComposition);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetFigImageQueuesOnCompositionContext(CFTypeRef *a1)
{
  CFTypeRef v2 = a1[1];
  if (v2) {
    CFRelease(v2);
  }
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetFigImageQueuesOnCompositionContext(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"Update fig image queues: %@", v3);
  if (v3) {
    CFRelease(v3);
  }
  CFStringAppendFormat(Mutable, 0, @"\non composition processor: %@", *(void *)(a1 + 8));
  return Mutable;
}

uint64_t fps_setFigImageQueuesOnComposition(uint64_t a1)
{
  return FigVideoCompositionProcessorSetProperty(*(void *)(a1 + 8), @"VideoCompositionProcessorProperty_FigImageQueueArray", *(void **)a1);
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  if (a3 && (uint64_t v8 = malloc_type_malloc(0x10uLL, 0x600405C6656D0uLL)) != 0)
  {
    uint64_t v9 = (uint64_t)v8;
    *uint64_t v8 = a2;
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(v9 + 8) = a3;
    CFRetain(a3);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 0, a4, v9, (uint64_t)fps_disposeSetFigImageQueuesOnRenderPipelineContext, (uint64_t)fps_copyDescriptionForSetFigImageQueuesOnRenderPipelineContext, (uint64_t)fps_setFigImageQueuesOnRenderPipeline);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetFigImageQueuesOnRenderPipelineContext(CFTypeRef *a1)
{
  CFTypeRef v2 = a1[1];
  if (v2) {
    CFRelease(v2);
  }
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetFigImageQueuesOnRenderPipelineContext(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"Set fig image queues: %@", v3);
  if (v3) {
    CFRelease(v3);
  }
  CFStringAppendFormat(Mutable, 0, @"\non render pipeline: %@", *(void *)(a1 + 8));
  return Mutable;
}

uint64_t fps_setFigImageQueuesOnRenderPipeline(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1[1]);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v4 + 56);
  if (!v5) {
    return 4294954514;
  }

  return v5(FigBaseObject, @"FigImageQueueArray", v1);
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(const void *a1, long long *a2, CFArrayRef theArray, uint64_t a4)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  uint64_t v8 = (char *)malloc_type_malloc(0x20uLL, 0x106004029F9A71EuLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    long long v10 = *a2;
    *((void *)v8 + 3) = *((void *)a2 + 2);
    *(_OWORD *)(v8 + 8) = v10;
    *(void *)uint64_t v8 = theArray;
    CFRetain(theArray);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeSetDurationOnLayersContext, (uint64_t)fps_copyDescriptionForSetDurationOnLayersContext, (uint64_t)fps_setDurationOnLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetDurationOnLayersContext(const void **a1)
{
  CFTypeRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetDurationOnLayersContext(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CMTime time = *(CMTime *)(a1 + 8);
  CFStringRef v4 = CMTimeCopyDescription(v2, &time);
  CFStringAppendFormat(Mutable, 0, @"Set duration %@", v4);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non layers: %@", v5);
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

uint64_t fps_setDurationOnLayers(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)a1;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      CFIndex v5 = 0;
      CFIndex v6 = (_OWORD *)(a1 + 8);
      uint64_t v7 = *MEMORY[0x1E4F39FA0];
      uint64_t v8 = (CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, v5);
        if ((*(_DWORD *)(a1 + 20) & 0x11) == 1)
        {
          *(_OWORD *)&time1.CMTimeValue value = *v6;
          time1.CMTimeEpoch epoch = *(void *)(a1 + 24);
          CMTime v13 = *v8;
          if (CMTimeCompare(&time1, &v13) >= 1)
          {
            *(_OWORD *)&time1.CMTimeValue value = *v6;
            time1.CMTimeEpoch epoch = *(void *)(a1 + 24);
            double Seconds = CMTimeGetSeconds(&time1);
            objc_msgSend(ValueAtIndex, "setDuration:");
            [ValueAtIndex timeOffset];
            if (v11 >= Seconds) {
              [ValueAtIndex setTimeOffset:Seconds + -0.000001];
            }
          }
        }
        [ValueAtIndex setFillMode:v7];
        ++v5;
      }
      while (v4 != v5);
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingBoundsOnLayers(const void *a1, CFArrayRef theArray, uint64_t a3, double a4, double a5, double a6, double a7)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  long long v14 = (double *)malloc_type_malloc(0x28uLL, 0x1060040A09B13B7uLL);
  if (v14)
  {
    uint64_t v15 = (uint64_t)v14;
    v14[1] = a4;
    v14[2] = a5;
    v14[3] = a6;
    v14[4] = a7;
    *(void *)long long v14 = theArray;
    CFRetain(theArray);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v15, (uint64_t)fps_disposeSetBoundsOnLayersContext, (uint64_t)fps_copyDescriptionForSetBoundsOnLayersContext, (uint64_t)fps_setBoundsOnLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetBoundsOnLayersContext(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetBoundsOnLayersContext(void *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Set bounds: [%G, %G, %G, %G]", a1[1], a1[2], a1[3], a1[4]);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non layers: %@", v3);
  if (v3) {
    CFRelease(v3);
  }
  return Mutable;
}

uint64_t fps_setBoundsOnLayers(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)a1;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i), "setBounds:", *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32));
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingTransformOnLayers(const void *a1, char a2, long long *a3, CFArrayRef theArray, uint64_t a5, double a6, double a7)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  long long v14 = malloc_type_malloc(0x50uLL, 0x1060040CE2EC661uLL);
  if (v14)
  {
    uint64_t v15 = (uint64_t)v14;
    long long v16 = *a3;
    long long v17 = a3[2];
    v14[3] = a3[1];
    v14[4] = v17;
    v14[2] = v16;
    *((unsigned char *)v14 + 8) = a2;
    *((double *)v14 + 2) = a6;
    *((double *)v14 + 3) = a7;
    *(void *)long long v14 = theArray;
    CFRetain(theArray);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a5, v15, (uint64_t)fps_disposeSetTransformOnLayersContext, (uint64_t)fps_copyDescriptionForSetTransformOnLayersContext, (uint64_t)fps_setTransformOnLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetTransformOnLayersContext(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetTransformOnLayersContext(void *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Set position: [%G, %G], transform: [%G, %G, %G, %G, %G, %G]", a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non layers: %@", v3);
  if (v3) {
    CFRelease(v3);
  }
  return Mutable;
}

uint64_t fps_setTransformOnLayers(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)a1;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
        uint64_t v7 = ValueAtIndex;
        if (*(unsigned char *)(a1 + 8)) {
          objc_msgSend(ValueAtIndex, "setPosition:", *(double *)(a1 + 16), *(double *)(a1 + 24));
        }
        long long v8 = *(_OWORD *)(a1 + 48);
        v10[0] = *(_OWORD *)(a1 + 32);
        v10[1] = v8;
        v10[2] = *(_OWORD *)(a1 + 64);
        [v7 setAffineTransform:v10];
      }
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingEdgeAntialiasingMaskOnLayers(const void *a1, int a2, CFArrayRef theArray, uint64_t a4)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  long long v8 = malloc_type_malloc(0x10uLL, 0x1060040ADAFC7CAuLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    v8[2] = a2;
    *(void *)long long v8 = theArray;
    CFRetain(theArray);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeSetAntialiasingMaskOnLayersContext, (uint64_t)fps_copyDescriptionForSetAntialiasingMaskOnLayersContext, (uint64_t)fps_setAntialiasingMaskOnLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetAntialiasingMaskOnLayersContext(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetAntialiasingMaskOnLayersContext(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Set edge antialiasing mask %d", *(unsigned int *)(a1 + 8));
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non layers: %@", v3);
  if (v3) {
    CFRelease(v3);
  }
  return Mutable;
}

uint64_t fps_setAntialiasingMaskOnLayers(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)a1;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i), "setEdgeAntialiasingMask:", *(unsigned int *)(a1 + 8));
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForCallingSetContentsChangedOnLayers(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  CFIndex v6 = malloc_type_malloc(8uLL, 0x6004044C4A2DFuLL);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    *CFIndex v6 = theArray;
    CFRetain(theArray);
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v7, (uint64_t)fps_disposeCallSetContentsChangedOnLayersContext, (uint64_t)fps_copyDescriptionForCallSetContentsChangedOnLayersContext, (uint64_t)fps_callSetContentsChangedOnLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeCallSetContentsChangedOnLayersContext(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForCallSetContentsChangedOnLayersContext()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Call setContentsChanged");
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non layers: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  return Mutable;
}

uint64_t fps_callSetContentsChangedOnLayers(CFArrayRef *a1)
{
  CFArrayRef v2 = *a1;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*a1, i), "setContentsChanged");
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToRelease(const void *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  CFIndex v6 = malloc_type_malloc(8uLL, 0xC0040B8AA526DuLL);
  if (v6)
  {
    *CFIndex v6 = a2;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, (uint64_t)v6, (uint64_t)fps_disposeReleaseContext, (uint64_t)fps_copyDescriptionForReleaseContext, (uint64_t)fps_callRelease);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeReleaseContext(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForReleaseContext()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Call FigCFReleaseAndClear");
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  return Mutable;
}

uint64_t fps_callRelease(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToReleaseOSTransaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  CFIndex v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  if (v6)
  {
    *CFIndex v6 = a2;
    return FigDeferredTransactionAppendPostCommitChangeWithCallback(a1, a3, (uint64_t)v6, (uint64_t)fps_disposeReleaseOSTransactionContext, (uint64_t)fps_copyDescriptionForReleaseOSTransactionContext, (uint64_t)fps_callReleaseOSTransaction);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeReleaseOSTransactionContext(id *a1)
{
  if (*a1) {

  }
  free(a1);
}

__CFString *fps_copyDescriptionForReleaseOSTransactionContext()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Call FigOSReleaseAndClear");
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  return Mutable;
}

uint64_t fps_callReleaseOSTransaction(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(const void *a1, void *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  CFIndex v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    *CFIndex v6 = a2;
    id v8 = a2;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v7, (uint64_t)fps_disposeClearContentsAndRemoveFromSuperLayerContext, (uint64_t)fps_copyDescriptionForClearContentsAndRemoveFromSuperLayerContext, (uint64_t)fps_callClearContentsAndRemoveFromSuperLayer);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeClearContentsAndRemoveFromSuperLayerContext(id *a1)
{
  if (*a1) {

  }
  free(a1);
}

__CFString *fps_copyDescriptionForClearContentsAndRemoveFromSuperLayerContext(id *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Call setContents:nil and removeFromSuperLayerContext");
  CFStringAppendFormat(Mutable, 0, @"\non: %@", [*a1 description]);
  return Mutable;
}

uint64_t fps_callClearContentsAndRemoveFromSuperLayer(id *a1)
{
  *a1 = 0;
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForUpdatingLayerTransform(const void *a1, void *a2, void *a3, int a4, char a5, char a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v37 = malloc_type_malloc(0xA8uLL, 0x1080040CAC251C5uLL);
  if (v37)
  {
    uint64_t v38 = (uint64_t)v37;
    *uint64_t v37 = a2;
    id v39 = a2;
    *(void *)(v38 + 8) = a3;
    id v40 = a3;
    *(double *)(v38 + 16) = a9;
    *(double *)(v38 + 24) = a10;
    *(double *)(v38 + 32) = a11;
    *(double *)(v38 + 40) = a12;
    *(double *)(v38 + 48) = a13;
    *(double *)(v38 + 56) = a14;
    *(double *)(v38 + 64) = a15;
    *(double *)(v38 + 72) = a16;
    *(_DWORD *)(v38 + 80) = a4;
    *(void *)(v38 + 88) = a17;
    *(void *)(v38 + 96) = a18;
    *(void *)(v38 + 104) = a19;
    *(void *)(v38 + 112) = a20;
    *(void *)(v38 + 120) = a21;
    *(void *)(v38 + 128) = a22;
    *(void *)(v38 + 136) = a23;
    *(void *)(v38 + 144) = a24;
    *(unsigned char *)(v38 + 152) = a5;
    *(unsigned char *)(v38 + 153) = a6;
    *(unsigned char *)(v38 + 154) = a7;
    *(void *)(v38 + 160) = a25;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a8, v38, (uint64_t)fps_disposeCallUpdateLayerTransform, (uint64_t)fps_copyDescriptionForCallUpdateLayerTransform, (uint64_t)fps_callUpdateLayerTransform);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeCallUpdateLayerTransform(id *a1)
{
  free(a1);
}

__CFString *fps_copyDescriptionForCallUpdateLayerTransform(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Call updateLayerTransform");
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\n video layers: %@", v3);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    CFStringAppendFormat(Mutable, 0, @" flip_X ");
    uint64_t v4 = *(unsigned int *)(a1 + 80);
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  CFStringAppendFormat(Mutable, 0, @" rotate 90 degree ");
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if ((v4 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_5:
  if (v4)
  {
LABEL_6:
    CFStringAppendFormat(Mutable, 0, @" flip_Y ");
    uint64_t v4 = *(unsigned int *)(a1 + 80);
  }
LABEL_7:
  CFStringAppendFormat(Mutable, 0, @"\n UpdateLayer to sourceRect : [%f, %f, %f, %f]; destRect : [%f, %f, %f, %f]; symmetricTransform : %x; avcRect : [%f, %f, %f, %f]; avcPresentationRect : [%f, %f, %f, %f]; maskingLayerHidden : NO",
    *(void *)(a1 + 16),
    *(void *)(a1 + 24),
    *(void *)(a1 + 32),
    *(void *)(a1 + 40),
    *(void *)(a1 + 48),
    *(void *)(a1 + 56),
    *(void *)(a1 + 64),
    *(void *)(a1 + 72),
    v4,
    *(void *)(a1 + 88),
    *(void *)(a1 + 96),
    *(void *)(a1 + 104),
    *(void *)(a1 + 112),
    *(void *)(a1 + 120),
    *(void *)(a1 + 128),
    *(void *)(a1 + 136),
    *(void *)(a1 + 144));
  return Mutable;
}

uint64_t fps_callUpdateLayerTransform(uint64_t a1)
{
  double v3 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  double v4 = *(double *)(a1 + 32);
  double v5 = *(double *)(a1 + 40);
  double v25 = *(double *)(a1 + 48);
  double v23 = *(double *)(a1 + 56);
  double v6 = *(double *)(a1 + 72);
  int v7 = *(_DWORD *)(a1 + 80);
  double v9 = *(double *)(a1 + 136);
  double v8 = *(double *)(a1 + 144);
  if ((v7 & 4) != 0) {
    double v10 = *(double *)(a1 + 72);
  }
  else {
    double v10 = *(double *)(a1 + 64);
  }
  double v27 = *(double *)(a1 + 64);
  if ((v7 & 4) != 0) {
    double v11 = *(double *)(a1 + 64);
  }
  else {
    double v11 = *(double *)(a1 + 72);
  }
  if (!*(unsigned char *)(a1 + 154))
  {
    double v12 = (void *)MEMORY[0x1E4F39CF8];
    double tya = v10;
    double v13 = v11;
    uint64_t v14 = [NSNumber numberWithDouble:*(double *)(a1 + 160)];
    [v12 setValue:v14 forKey:*MEMORY[0x1E4F3A5A0]];
    double v11 = v13;
    double v10 = tya;
  }
  if (*(unsigned char *)(a1 + 153))
  {
    CGFloat ty = v11;
    double v15 = v8 * (v11 / v5);
    objc_msgSend(*(id *)(a1 + 8), "setAnchorPoint:", v3 / v9, v2 / v8);
    objc_msgSend(*(id *)(a1 + 8), "setBounds:", 0.0, 0.0, v9 * (v10 / v4), v15);
    objc_msgSend(*(id *)a1, "setFrame:", v25, v23, v27, v6);
    long long v16 = *MEMORY[0x1E4F1DAB8];
    long long v17 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)&v36.a = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)&v36.c = v17;
    long long v18 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
    *(_OWORD *)&v36.tx = v18;
    if (v7)
    {
      long long v24 = v17;
      long long v26 = v16;
      long long v20 = v18;
      CGAffineTransformMakeScale(&v35, -1.0, 1.0);
      *(_OWORD *)&v34.a = v26;
      *(_OWORD *)&v34.c = v24;
      *(_OWORD *)&v34.tx = v20;
      CGAffineTransformConcat(&v36, &v34, &v35);
      CGAffineTransformMakeTranslation(&v33, v10, 0.0);
      CGAffineTransform v32 = v36;
      CGAffineTransformConcat(&v34, &v32, &v33);
      CGAffineTransform v36 = v34;
      if ((v7 & 2) == 0)
      {
LABEL_12:
        if ((v7 & 4) == 0)
        {
LABEL_14:
          objc_msgSend(*(id *)(a1 + 8), "setAffineTransform:", &v36, v20);
          goto LABEL_15;
        }
LABEL_13:
        CGAffineTransformMakeRotation(&t2, 1.57079633);
        CGAffineTransform t1 = v36;
        CGAffineTransformConcat(&v34, &t1, &t2);
        CGAffineTransform v36 = v34;
        CGAffineTransformMakeTranslation(&t1, v27, 0.0);
        CGAffineTransform v28 = v36;
        CGAffineTransformConcat(&v34, &v28, &t1);
        CGAffineTransform v36 = v34;
        goto LABEL_14;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_12;
    }
    CGAffineTransformMakeScale(&v32, 1.0, -1.0);
    CGAffineTransform v31 = v36;
    CGAffineTransformConcat(&v34, &v31, &v32);
    CGAffineTransform v36 = v34;
    CGAffineTransformMakeTranslation(&v31, 0.0, ty);
    CGAffineTransform t2 = v36;
    CGAffineTransformConcat(&v34, &t2, &v31);
    CGAffineTransform v36 = v34;
    if ((v7 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_15:
  if (*(unsigned char *)(a1 + 152)) {
    [*(id *)a1 setHidden:0];
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForHidingLayer(const void *a1, void *a2, uint64_t a3)
{
  if (a2 && (double v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL)) != 0)
  {
    uint64_t v7 = (uint64_t)v6;
    *double v6 = a2;
    id v8 = a2;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v7, (uint64_t)fps_disposeCallHideMaskingLayer, (uint64_t)fps_copyDescriptionForCallHideMaskingLayer, (uint64_t)fps_callHideMaskingLayer);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeCallHideMaskingLayer(id *a1)
{
  free(a1);
}

__CFString *fps_copyDescriptionForCallHideMaskingLayer(id *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Call hideMaskingLayer");
  CFStringAppendFormat(Mutable, 0, @"\n maksking layer : %@", [*a1 description]);
  return Mutable;
}

uint64_t fps_callHideMaskingLayer(id *a1)
{
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToTargetMirroringObserverAtDisplayOfCALayer(const void *a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 && (id v8 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL)) != 0)
  {
    uint64_t v9 = (uint64_t)v8;
    v8[1] = a3;
    id v10 = a3;
    *(void *)(v9 + 16) = (id)[*(id *)(v9 + 8) superlayer];
    *(void *)uint64_t v9 = a2;
    id v11 = a2;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeTargetMirroringObserverAtDisplayOfCALayer, (uint64_t)fps_copyDescriptionForTargetMirroringObserverAtDisplayOfCALayer, (uint64_t)fps_targetMirroringObserverAtDisplayOfCALayer);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeTargetMirroringObserverAtDisplayOfCALayer(id *a1)
{
  free(a1);
}

__CFString *fps_copyDescriptionForTargetMirroringObserverAtDisplayOfCALayer(id *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"TargetMirroringObserverAtDisplayOfCALayer");
  CFStringAppendFormat(Mutable, 0, @"\n observer : %@", [*a1 description]);
  CFStringAppendFormat(Mutable, 0, @"\n videoLayer : %@", [a1[1] description]);
  CFStringAppendFormat(Mutable, 0, @"\n videoLayerParent : %@", [a1[2] description]);
  return Mutable;
}

uint64_t fps_targetMirroringObserverAtDisplayOfCALayer(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v19 = MEMORY[0x199711A30]();
  uint64_t v1 = *(void **)(v18 + 8);
  if (v1)
  {
    uint64_t v2 = *MEMORY[0x1E4F39E58];
    uint64_t v3 = *MEMORY[0x1E4F39E60];
    while (1)
    {
      double v4 = objc_msgSend((id)objc_msgSend(v1, "context", v18, v19), "options");
      double v5 = (void *)[v4 objectForKey:v2];
      if (v5)
      {
        int v6 = [v5 unsignedIntValue];
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        uint64_t v7 = (void *)[MEMORY[0x1E4F39B60] displays];
        uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(void *)v21;
LABEL_6:
          uint64_t v11 = 0;
          while (1)
          {
            if (*(void *)v21 != v10) {
              objc_enumerationMutation(v7);
            }
            double v12 = *(void **)(*((void *)&v20 + 1) + 8 * v11);
            if (v6 == [v12 displayId]) {
              break;
            }
            if (v9 == ++v11)
            {
              uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
              if (v9) {
                goto LABEL_6;
              }
              goto LABEL_14;
            }
          }
          uint64_t v13 = [v12 name];
          if (v13) {
            break;
          }
        }
      }
LABEL_14:
      uint64_t v13 = [v4 objectForKey:v3];
      if (v13) {
        break;
      }
      uint64_t v1 = (void *)[v1 superlayer];
      if (!v1) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    uint64_t v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F39B60], "mainDisplay", v18, v19), "name");
  }
  double v15 = (id *)v18;
  uint64_t v14 = (void *)v19;
  uint64_t v16 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", v13, v18, v19);
  if (*v15) {
    [*v15 setBaseDisplayList:v16];
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToConfigureFigVideoQueueHostLayerAndPostNotification(const void *a1, void *a2, void *a3, int a4, const void *a5, const void *a6, uint64_t a7)
{
  if (a2 && a3 && (uint64_t v14 = malloc_type_malloc(0x28uLL, 0x10E004019DEF5ECuLL)) != 0)
  {
    uint64_t v15 = (uint64_t)v14;
    void *v14 = a2;
    id v16 = a2;
    *(void *)(v15 + 8) = a3;
    id v17 = a3;
    *(void *)(v15 + 16) = a5;
    if (a5) {
      CFRetain(a5);
    }
    *(void *)(v15 + 32) = a6;
    if (a6) {
      CFRetain(a6);
    }
    *(_DWORD *)(v15 + 24) = a4;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a7, v15, (uint64_t)fps_disposeConfigureFigVideoQueueHostLayerAndPostNotification, (uint64_t)fps_copyDescriptionForConfigureFigVideoQueueHostLayerAndPostNotification, (uint64_t)fps_configureFigVideoQueueHostLayerAndPostNotification);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeConfigureFigVideoQueueHostLayerAndPostNotification(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }

  free((void *)a1);
}

__CFString *fps_copyDescriptionForConfigureFigVideoQueueHostLayerAndPostNotification(id *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Call FVQClientSetupHostLayer");
  CFStringAppendFormat(Mutable, 0, @"\n clientVideoLayer : %@; hostLayer : %@ ",
    [a1[1] description],
    [*a1 description]);
  return Mutable;
}

uint64_t fps_configureFigVideoQueueHostLayerAndPostNotification(void *a1)
{
  if (a1[4])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToResizeClientVideoLayerWithinHostLayer(const void *a1, void *a2, void *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  if (a2 && a3 && (id v16 = malloc_type_malloc(0x30uLL, 0x1080040DAA165ECuLL)) != 0)
  {
    uint64_t v17 = (uint64_t)v16;
    *id v16 = a2;
    id v18 = a2;
    *(void *)(v17 + 8) = a3;
    id v19 = a3;
    *(double *)(v17 + 16) = a5;
    *(double *)(v17 + 24) = a6;
    *(double *)(v17 + 32) = a7;
    *(double *)(v17 + 40) = a8;
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v17, (uint64_t)fps_disposeResizeClientVideoLayerWithinHostLayer, (uint64_t)fps_copyDescriptionForResizeClientVideoLayerWithinHostLayer, (uint64_t)fps_resizeClientVideoLayerWithinHostLayer);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeResizeClientVideoLayerWithinHostLayer(id *a1)
{
  free(a1);
}

__CFString *fps_copyDescriptionForResizeClientVideoLayerWithinHostLayer(id *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"ResizeClientVideoLayerWithinHostLayer");
  CFStringAppendFormat(Mutable, 0, @"\n clientVideoLayer : %@; hostLayer : %@ ",
    [a1[1] description],
    [*a1 description]);
  return Mutable;
}

uint64_t fps_resizeClientVideoLayerWithinHostLayer(uint64_t a1)
{
  id v2 = *(id *)a1;
  [*(id *)(a1 + 8) bounds];
  objc_msgSend(v2, "setFrame:");
  if (*(double *)(a1 + 32) > 0.0 && *(double *)(a1 + 40) > 0.0)
  {
    [*(id *)(a1 + 8) bounds];
    double v4 = v3;
    double v6 = v5;
    memset(&v12, 0, sizeof(v12));
    double v7 = *(double *)(a1 + 32);
    double v8 = *(double *)(a1 + 40);
    CGAffineTransformMakeScale(&v12, v3 / v7, v5 / v8);
    CGAffineTransform v10 = v12;
    CGAffineTransformTranslate(&v11, &v10, (v4 - v7) * 0.5, (v6 - v8) * 0.5);
    CGAffineTransform v12 = v11;
    [*(id *)a1 setAffineTransform:&v11];
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue(uint64_t a1, const void *a2, NSObject *a3, uint64_t a4)
{
  if (!a3) {
    goto LABEL_9;
  }
  if (!a2) {
    return 0;
  }
  double v8 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    *double v8 = a2;
    CFRetain(a2);
    *(void *)(v9 + 8) = a3;
    dispatch_retain(a3);
    return FigDeferredTransactionAppendPostCommitChangeWithCallback(a1, a4, v9, (uint64_t)fps_disposeReleasePlayerResourcesOnQueueContext, (uint64_t)fps_copyDescriptionForReleasePlayerResourcesOnQueueContext, (uint64_t)fps_releasePlayerResources);
  }
  else
  {
LABEL_9:
    return FigSignalErrorAt();
  }
}

void fps_disposeReleasePlayerResourcesOnQueueContext(const void **a1)
{
  id v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  double v3 = a1[1];
  if (v3) {
    dispatch_release(v3);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForReleasePlayerResourcesOnQueueContext()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Release player resources");
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\nof: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  return Mutable;
}

uint64_t fps_releasePlayerResources(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  if (*(void *)a1) {
    CFRetain(*(CFTypeRef *)a1);
  }
  double v3 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fps_releasePlayerResources_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  dispatch_async(v3, block);
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingImageQueueSlotsOnVideoLayers(const void *a1, CFArrayRef theArray, const __CFArray *a3, uint64_t a4)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (!a3) {
      return 0;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (!a3) {
      return 0;
    }
  }
  CFIndex v9 = CFArrayGetCount(a3);
  if (Count < 1 || v9 < 1) {
    return 0;
  }
  CGAffineTransform v10 = malloc_type_malloc(0x10uLL, 0x600405BB7FD7CuLL);
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    *CGAffineTransform v10 = a3;
    CFRetain(a3);
    *(void *)(v11 + 8) = theArray;
    if (theArray) {
      CFRetain(theArray);
    }
    return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v11, (uint64_t)fps_disposeSetCAImageQueueSlotsOnVideoLayersContext, (uint64_t)fps_copyDescriptionForSetImageQueueSlotsOnVideoLayersContext, (uint64_t)fps_setCAImageQueueSlotsOnVideoLayers);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fps_disposeSetCAImageQueueSlotsOnVideoLayersContext(const void **a1)
{
  CFTypeRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  double v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }

  free(a1);
}

__CFString *fps_copyDescriptionForSetImageQueueSlotsOnVideoLayersContext()
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"Set image queue slots: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeRef v2 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\non video layers: %@", v2);
  if (v2) {
    CFRelease(v2);
  }
  return Mutable;
}

uint64_t fps_setCAImageQueueSlotsOnVideoLayers(CFArrayRef *a1)
{
  CFArrayRef v2 = a1[1];
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v4 = *a1;
  if (*a1) {
    CFArrayRef v4 = (const __CFArray *)CFArrayGetCount(v4);
  }
  if (Count >= (uint64_t)v4) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = Count;
  }
  if (v5 >= 1)
  {
    for (CFIndex i = 0; i != v5; ++i)
    {
      unsigned int valuePtr = 0;
      CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a1, i);
      CFNumberRef v8 = (const __CFNumber *)CFArrayGetValueAtIndex(a1[1], i);
      CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
      objc_msgSend(ValueAtIndex, "setContents:", objc_msgSend(MEMORY[0x1E4F39B58], "objectForSlot:", valuePtr));
    }
  }
  return 0;
}

uint64_t FPSupport_GetDisplayModeSwitchMonitor()
{
  return 0;
}

uint64_t FPSupport_IsDisplayModeSwitchInProgress()
{
  return 0;
}

void FPSupport_ReportStallToSymptomLog(int a1, const void *a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    double v7 = Mutable;
    if (CFEqual(a2, @"wired") || CFEqual(a2, @"lan"))
    {
      CFNumberRef v8 = @"WiredEthernet";
    }
    else if (CFEqual(a2, @"wifi-infra") || CFEqual(a2, @"wifi-AWDL"))
    {
      CFNumberRef v8 = @"Wifi";
    }
    else if (CFEqual(a2, @"wwan"))
    {
      CFNumberRef v8 = @"Cellular";
    }
    else if (CFEqual(a2, @"loopback"))
    {
      CFNumberRef v8 = @"Loopback";
    }
    else
    {
      CFNumberRef v8 = @"Other";
    }
    CFIndex v9 = @"File";
    if (a1 == 2) {
      CFIndex v9 = @"HTTP Progressive Download";
    }
    if (a1) {
      CGAffineTransform v10 = v9;
    }
    else {
      CGAffineTransform v10 = @"HTTP Live Stream";
    }
    if (a3)
    {
      CFArrayRef Value = CFDictionaryGetValue(a3, @"assetOption_ClientBundleIdentifier");
      if (!Value || (CGAffineTransform v12 = CFRetain(Value)) == 0)
      {
        CFDataRef v13 = (const __CFData *)CFDictionaryGetValue(a3, @"assetOption_ClientAuditToken");
        CGAffineTransform v12 = FigCFHTTPCopyClientProcessName(v13);
      }
    }
    else
    {
      CGAffineTransform v12 = 0;
    }
    CFDictionarySetValue(v7, @"name", @"MEDIA_PLAYBACK_STALL");
    CFDictionarySetValue(v7, @"mediaType", v10);
    CFDictionarySetValue(v7, @"transportType", v10);
    CFDictionarySetValue(v7, @"interfaceType", v8);
    if (v12) {
      CFDictionarySetValue(v7, @"BundleID", v12);
    }
    CFStringRef v14 = (const __CFString *)FigCFStringCreateWithJSONDictionary();
    CFStringRef v15 = v14;
    if (v14 && CFStringGetCStringPtr(v14, 0x8000100u)) {
      fig_post_a_symptom_guts();
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFRelease(v7);
  }
}

void FPSupport_ReportAlgosScoreToSymptomLog(const void *a1, const void *a2)
{
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v5 = Mutable;
      CFDictionarySetValue(Mutable, @"name", @"MEDIA_PLAYBACK_ALGOS");
      CFDictionarySetValue(v5, @"MEDIA_PLAYBACK_ALGOS", a2);
      if (a1) {
        CFDictionarySetValue(v5, @"BundleID", a1);
      }
      CFStringRef v6 = (const __CFString *)FigCFStringCreateWithJSONDictionary();
      if (v6)
      {
        CFStringRef v7 = v6;
        if (CFStringGetCStringPtr(v6, 0x8000100u)) {
          fig_post_a_symptom_guts();
        }
        CFRelease(v7);
      }
      CFRelease(v5);
    }
  }
}

uint64_t FPSupport_CopyCombinedSetPropertiesErrDictionary(CFTypeRef cf, const void *a2, uint64_t *a3)
{
  if (a3)
  {
    if (cf)
    {
      if (a2)
      {
        uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
LABEL_9:
        *a3 = MutableCopy;
        return 0;
      }
    }
    else
    {
      if (!a2)
      {
        uint64_t MutableCopy = 0;
        goto LABEL_9;
      }
      CFTypeRef cf = a2;
    }
    uint64_t MutableCopy = (uint64_t)CFRetain(cf);
    goto LABEL_9;
  }
  return 0;
}

uint64_t FPSupport_HandlePlayerSetPropertiesAndCopyModification(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, BOOL *a5, void *a6, void *a7)
{
  v13[0] = 0;
  v13[1] = a1;
  v13[2] = a3;
  v13[3] = a4;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4) {
    return fpSupport_handlePlayerOrItemSetPropertiesAndCopyModification((uint64_t)v13, a2, a5, a6, a7);
  }

  return FigSignalErrorAt();
}

uint64_t fpSupport_handlePlayerOrItemSetPropertiesAndCopyModification(uint64_t a1, const __CFDictionary *cf, BOOL *a3, void *a4, void *a5)
{
  context[0] = a1;
  context[1] = cf;
  CFTypeRef cfa = 0;
  uint64_t v17 = 0;
  CFTypeRef v15 = 0;
  if (cf && (CFTypeID v9 = CFGetTypeID(cf), v9 == CFDictionaryGetTypeID()))
  {
    CFDictionaryApplyFunction(cf, (CFDictionaryApplierFunction)fpSupport_handleSetPropertiesApplier, context);
    uint64_t v10 = v17;
    if (!v17)
    {
      if (v15) {
        CFTypeRef v11 = v15;
      }
      else {
        CFTypeRef v11 = cf;
      }
      if (a3) {
        *a3 = FigCFDictionaryGetCount() == 0;
      }
      if (a4)
      {
        *a4 = v11;
        CFRetain(v11);
      }
      if (a5)
      {
        CFTypeRef v12 = cfa;
        if (cfa) {
          CFTypeRef v12 = CFRetain(cfa);
        }
        uint64_t v10 = 0;
        *a5 = v12;
      }
      else
      {
        uint64_t v10 = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
  }
  if (v15) {
    CFRelease(v15);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  return v10;
}

uint64_t FPSupport_HandlePlayerSetPropertiesAndForwardToSubPlayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t *a6)
{
  BOOL v20 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  if (!a5 || !a2)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a5, a3, a4, &v20, &cf, &v19);
  if (v8)
  {
    uint64_t v14 = v8;
  }
  else
  {
    if (v20)
    {
      CFTypeRef v15 = 0;
LABEL_12:
      FPSupport_CopyCombinedSetPropertiesErrDictionary(v19, v15, a6);
      uint64_t v14 = 0;
      goto LABEL_14;
    }
    CFTypeRef v9 = cf;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    CFTypeRef v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v11 + 112);
    if (v12)
    {
      uint64_t v13 = v12(a2, v9, &v18);
LABEL_10:
      uint64_t v14 = v13;
      if (v13) {
        goto LABEL_14;
      }
      CFTypeRef v15 = v18;
      goto LABEL_12;
    }
    uint64_t v14 = 4294954514;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v14;
}

uint64_t FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, BOOL *a5, void *a6, void *a7)
{
  v13[1] = a1;
  v13[0] = 1;
  v13[2] = a3;
  v13[3] = a4;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4) {
    return fpSupport_handlePlayerOrItemSetPropertiesAndCopyModification((uint64_t)v13, a2, a5, a6, a7);
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_HandlePlayerSetPropertyAndCopyModification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, CFTypeRef *a7, CFTypeRef *a8)
{
  v15[0] = 1;
  v15[1] = a1;
  _OWORD v15[2] = a4;
  long long v15[3] = a5;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a5) {
    return fpSupport_handlePlayerOrItemSetPropertyAndCopyModification((uint64_t)v15, a2, a3, a6, a7, a8);
  }

  return FigSignalErrorAt();
}

uint64_t fpSupport_handlePlayerOrItemSetPropertyAndCopyModification(uint64_t a1, CFTypeRef cf, uint64_t a3, unsigned char *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  CFTypeRef v18 = 0;
  CFTypeRef cfa = 0;
  char v17 = 0;
  if (!cf) {
    goto LABEL_13;
  }
  CFTypeID v12 = CFGetTypeID(cf);
  if (v12 != CFStringGetTypeID()) {
    goto LABEL_13;
  }
  uint64_t v13 = fpSupport_handleSetPropertiesInternal(a1, (uint64_t)cf, a3, (uint64_t)&v17, (uint64_t)&cfa, (uint64_t)&v18);
  if (v13)
  {
LABEL_14:
    uint64_t v15 = v13;
    goto LABEL_15;
  }
  if (!v17)
  {
    if (!cfa || (CFTypeID v14 = CFGetTypeID(cfa), v14 != CFStringGetTypeID()))
    {
LABEL_13:
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
  }
  if (a5)
  {
    *a5 = cfa;
    CFTypeRef cfa = 0;
  }
  if (a6)
  {
    *a6 = v18;
    CFTypeRef v18 = 0;
  }
  uint64_t v15 = 0;
  if (a4) {
    *a4 = v17;
  }
LABEL_15:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

uint64_t FPSupport_HandlePlayerSetPropertyAndForwardToSubPlayer(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  char v16 = 0;
  if (!a3 || !a2)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a3, a4, a5, a6, &v16, &cf, &v17);
  if (v7)
  {
LABEL_10:
    uint64_t v14 = v7;
    goto LABEL_12;
  }
  if (v16)
  {
    uint64_t v14 = 0;
  }
  else
  {
    CFTypeRef v9 = v17;
    CFTypeRef v8 = cf;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a2);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v12 + 56);
    if (v13)
    {
      uint64_t v7 = v13(FigBaseObject, v8, v9);
      goto LABEL_10;
    }
    uint64_t v14 = 4294954514;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v14;
}

uint64_t FPSupport_HandlePlaybackItemSetPropertyAndForwardToSubItem(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  char v16 = 0;
  if (!a3 || !a2)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a3, a4, a5, a6, &v16, &cf, &v17);
  if (v7)
  {
LABEL_10:
    uint64_t v14 = v7;
    goto LABEL_12;
  }
  if (v16)
  {
    uint64_t v14 = 0;
  }
  else
  {
    CFTypeRef v9 = v17;
    CFTypeRef v8 = cf;
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v12 + 56);
    if (v13)
    {
      uint64_t v7 = v13(FigBaseObject, v8, v9);
      goto LABEL_10;
    }
    uint64_t v14 = 4294954514;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v14;
}

uint64_t FPSupport_HandlePlaybackItemSetPropertiesAndForwardToSubItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t *a6)
{
  BOOL v20 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  if (!a5 || !a2)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v8 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a5, a3, a4, &v20, &cf, &v19);
  if (v8)
  {
    uint64_t v14 = v8;
  }
  else
  {
    if (v20)
    {
      CFTypeRef v15 = 0;
LABEL_12:
      FPSupport_CopyCombinedSetPropertiesErrDictionary(v19, v15, a6);
      uint64_t v14 = 0;
      goto LABEL_14;
    }
    CFTypeRef v9 = cf;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v11 + 160);
    if (v12)
    {
      uint64_t v13 = v12(a2, v9, &v18);
LABEL_10:
      uint64_t v14 = v13;
      if (v13) {
        goto LABEL_14;
      }
      CFTypeRef v15 = v18;
      goto LABEL_12;
    }
    uint64_t v14 = 4294954514;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v14;
}

BOOL FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2 && !FigDebugIsInternalBuild()) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v7 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (!v7 || v7(a1, *MEMORY[0x1E4F75FB0], *MEMORY[0x1E4F1CF80], &cf)) {
    goto LABEL_15;
  }
  uint64_t SInt32 = FigCFNumberGetSInt32();
  if (!SInt32)
  {
    FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v9 = SInt32;
  uint64_t v10 = (void *)MEMORY[0x199711A30]();
  uint64_t v11 = [MEMORY[0x1E4F963F8] identifierWithPid:v9];
  uint64_t v12 = (void *)[MEMORY[0x1E4F963E8] handleForIdentifier:v11 error:0];
  if (!v12)
  {
LABEL_15:
    BOOL v17 = 0;
    uint64_t v13 = 0;
    goto LABEL_16;
  }
  uint64_t v13 = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "bundle"), "identifier"), "copy");
  if (v13)
  {
    uint64_t v14 = (const void *)FigCopyCFPreferenceAppValueOrOptionCFTypeWithDefault();
    CFTypeRef v15 = v14;
    if (v14 && (CFTypeID v16 = CFGetTypeID(v14), v16 != CFArrayGetTypeID()))
    {
      FigSignalErrorAt();
      BOOL v17 = 0;
    }
    else
    {
      BOOL v17 = FigCFArrayContainsValue() != 0;
      if (a4) {
        *a4 = CFRetain(v13);
      }
    }
    goto LABEL_17;
  }
  BOOL v17 = 0;
LABEL_16:
  CFTypeRef v15 = 0;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v17;
}

uint64_t FPSupport_HasTrackOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  unsigned __int8 v5 = 0;
  CFTypeRef cf = 0;
  int v13 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(v7 + 64);
    if (!v8 || v8(a1, v4, a2, &cf, &v13)) {
      break;
    }
    if (a2 == 1986618469)
    {
      CMFormatDescriptionRef desc = 0;
      if (fpSupport_copyFormatDescription((uint64_t)cf, &desc)) {
        break;
      }
      CMFormatDescriptionRef v9 = desc;
      if (desc)
      {
        MediaSubuint64_t Type = CMFormatDescriptionGetMediaSubType(desc);
        if (fpSupport_isVideoCodecTypeSupported(MediaSubType, 0)
          || CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
        {
          unsigned __int8 v5 = 1;
        }
        CFRelease(v9);
      }
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    ++v4;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

BOOL fpSupport_isVideoCodecTypeSupported(uint64_t a1, char a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = Mutable;
  unsigned __int8 v5 = (const void **)MEMORY[0x1E4F1CFD0];
  uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if ((a2 & 1) == 0)
  {
    if ((a2 & 4) == 0)
    {
      if ((a2 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455D0], *v6);
  if ((a2 & 2) == 0)
  {
LABEL_4:
    if ((a2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F455B0], *v5);
  if ((a2 & 8) == 0)
  {
LABEL_5:
    if ((a2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F455C0], *v5);
  if ((a2 & 0x10) == 0)
  {
LABEL_6:
    if ((a2 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F455F0], *v5);
  if ((a2 & 0x20) != 0) {
LABEL_7:
  }
    CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F455C8], *v5);
LABEL_8:
  VideoDecoderuint64_t Instance = VTSelectAndCreateVideoDecoderInstance();
  if (v4) {
    CFRelease(v4);
  }
  return VideoDecoderInstance == 0;
}

uint64_t FPSupport_GetAudioFormatDescriptionSpatializationEligibility(uint64_t a1, void *a2)
{
  *(void *)inSpecifierSize = 0;
  int inSpecifier = 0;
  uint64_t v4 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout()) {
    return 0;
  }
  uint64_t result = 0;
  if (a2) {
    *a2 = 0;
  }
  return result;
}

uint64_t FPSupport_CopySingleVideoChannelAndMultichannelVideoTargetsFromArray(const __CFArray *a1, CFAllocatorRef allocator, __CFArray **a3, CFMutableArrayRef *a4)
{
  CFArrayRef theArray = 0;
  if (a1)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      uint64_t v25 = FigSignalErrorAt();
LABEL_33:
      if (theArray) {
        CFRelease(theArray);
      }
      return v25;
    }
    CMFormatDescriptionRef v9 = Mutable;
    CFMutableArrayRef v10 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (v10)
    {
      long long v29 = a3;
      long long v30 = a4;
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        CFIndex v13 = 0;
        uint64_t v14 = *MEMORY[0x1E4F21E08];
        CMTagValue v15 = *(void *)(MEMORY[0x1E4F21E08] + 8);
        CMTagValue v27 = *(void *)(MEMORY[0x1E4F21E68] + 8);
        uint64_t v28 = *MEMORY[0x1E4F21E68];
        do
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v13);
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          CFTypeRef v19 = *(void (**)(const void *, CFAllocatorRef, CFArrayRef *))(v18 + 48);
          if (v19) {
            v19(ValueAtIndex, allocator, &theArray);
          }
          if (!theArray) {
            goto LABEL_23;
          }
          if (CFArrayGetCount(theArray) != 1) {
            goto LABEL_19;
          }
          BOOL v20 = CFArrayGetValueAtIndex(theArray, 0);
          if (FigDataChannelGroupGetCountOfDataChannels((uint64_t)v20) != 1) {
            goto LABEL_19;
          }
          if ((DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v20, 0), MEMORY[0x19970EAF0]() == 1)&& (v33.CMTimeValue value = 1634630006, *(void *)&v33.category = 0x40000005706C7972, CMTagCollectionContainsTag(DataChannelByIndex, v33))|| (*(void *)&v34.category = v14, v34.CMTimeValue value = v15, CMTagCollectionContainsTag(DataChannelByIndex, v34))&& (v35.CMTimeValue value = v27, *(void *)&v35.category = v28, CMTagCollectionContainsTag(DataChannelByIndex, v35)))
          {
            int v22 = 0;
          }
          else
          {
LABEL_19:
            int v22 = 1;
          }
          if (theArray)
          {
            CFRelease(theArray);
            CFArrayRef theArray = 0;
          }
          long long v23 = v9;
          if (v22) {
LABEL_23:
          }
            long long v23 = v10;
          CFArrayAppendValue(v23, ValueAtIndex);
          ++v13;
        }
        while (v12 != v13);
      }
      if (v29)
      {
        *long long v29 = v9;
        CMFormatDescriptionRef v9 = 0;
      }
      if (v30)
      {
        *long long v30 = v10;
        CFMutableArrayRef v10 = 0;
      }
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      if (!v9) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v24 = FigSignalErrorAt();
    }
    CFRelease(v9);
    uint64_t v25 = v24;
LABEL_31:
    if (v10) {
      CFRelease(v10);
    }
    goto LABEL_33;
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateDefaultTagCollectionForVideo(CMTagCollectionRef *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CMTagCollectionRef newCollectionOut = 0;
  long long v2 = *MEMORY[0x1E4F1F3E8];
  CMTag tags = (CMTag)*MEMORY[0x1E4F21E68];
  long long v7 = v2;
  long long v8 = *MEMORY[0x1E4F1F408];
  uint64_t v3 = CMTagCollectionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &tags, 3, &newCollectionOut);
  if (!a1 || v3)
  {
    if (newCollectionOut) {
      CFRelease(newCollectionOut);
    }
  }
  else
  {
    *a1 = newCollectionOut;
  }
  return v3;
}

uint64_t FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(const opaqueCMFormatDescription *a1, void *a2)
{
  if (a2)
  {
    long long v2 = a2;
    uint64_t Mutable = FigTagCollectionCreateMutable();
    if (Mutable) {
      return Mutable;
    }
    CFPropertyListRef Extension = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F21620]);
    uint64_t v6 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
    if (Extension)
    {
      CFPropertyListRef v7 = Extension;
      CFTypeID v8 = CFGetTypeID(Extension);
      if (v8 != CFBooleanGetTypeID()) {
        return FigSignalErrorAt();
      }
      int v9 = v7 == *v6;
    }
    else
    {
      int v9 = 0;
    }
    CFPropertyListRef v10 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F21628]);
    if (v10)
    {
      CFPropertyListRef v11 = v10;
      CFTypeID v12 = CFGetTypeID(v10);
      if (v12 != CFBooleanGetTypeID()) {
        return FigSignalErrorAt();
      }
      if (v11 == *v6) {
        v9 |= 2u;
      }
    }
    uint64_t v13 = *MEMORY[0x1E4F21DE8];
    CMTagValue v14 = *(void *)(MEMORY[0x1E4F21DE8] + 8);
    CMTagValue v15 = (const opaqueCMFormatDescription *)HIDWORD(*MEMORY[0x1E4F21DE8]);
    if (v9 == 3)
    {
      CFTypeRef v19 = (CMTagValue *)MEMORY[0x1E4F21E58];
    }
    else if (v9 == 2)
    {
      CFTypeRef v19 = (CMTagValue *)MEMORY[0x1E4F21E70];
    }
    else
    {
      CMTagValue v16 = *MEMORY[0x1E4F21DE8];
      uint64_t v17 = HIDWORD(*MEMORY[0x1E4F21DE8]);
      CMTagValue v18 = *(void *)(MEMORY[0x1E4F21DE8] + 8);
      if (v9 != 1) {
        goto LABEL_18;
      }
      CFTypeRef v19 = (CMTagValue *)MEMORY[0x1E4F21E60];
    }
    CMTagValue v16 = *v19;
    CMTagValue v18 = v19[1];
    uint64_t v17 = HIDWORD(*v19);
LABEL_18:
    CMTagDataType v45 = v17;
    CFPropertyListRef v20 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F21668]);
    LODWORD(v21) = v13;
    LODWORD(v22) = v15;
    CMTagValue v23 = v14;
    if (!v20) {
      goto LABEL_25;
    }
    uint64_t v24 = v20;
    CFTypeID v25 = CFGetTypeID(v20);
    if (v25 != CFStringGetTypeID()) {
      return FigSignalErrorAt();
    }
    if (CFEqual((CFTypeRef)*MEMORY[0x1E4F216A0], v24))
    {
      long long v26 = (unint64_t *)MEMORY[0x1E4F21E20];
    }
    else
    {
      int v27 = CFEqual((CFTypeRef)*MEMORY[0x1E4F21698], v24);
      LODWORD(v21) = v13;
      LODWORD(v22) = v15;
      CMTagValue v23 = v14;
      if (!v27) {
        goto LABEL_25;
      }
      long long v26 = (unint64_t *)MEMORY[0x1E4F21E18];
    }
    unint64_t v21 = *v26;
    CMTagValue v23 = v26[1];
    unint64_t v22 = HIDWORD(v21);
LABEL_25:
    CMTagValue tagToAdd = v23;
    CFPropertyListRef v28 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F21648]);
    if (v28)
    {
      long long v29 = v28;
      int v43 = v13;
      int v30 = v21;
      int v31 = (int)v15;
      CMTagValue v15 = a1;
      int v32 = v22;
      int v33 = v16;
      CMTagValue v16 = v14;
      CMTagValue v34 = v18;
      CMTag v35 = v2;
      CFTypeID v36 = CFGetTypeID(v28);
      BOOL v37 = v36 == CFStringGetTypeID();
      long long v2 = v35;
      CMTagValue v18 = v34;
      CMTagValue v14 = v16;
      LODWORD(v16) = v33;
      LODWORD(v22) = v32;
      a1 = v15;
      LODWORD(v15) = v31;
      LODWORD(v21) = v30;
      LODWORD(v13) = v43;
      if (!v37) {
        return FigSignalErrorAt();
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x1E4F21680], v29))
      {
        uint64_t v38 = (uint64_t *)MEMORY[0x1E4F21E30];
LABEL_36:
        uint64_t v13 = *v38;
        CMTagValue v14 = v38[1];
        CMTagValue v15 = (const opaqueCMFormatDescription *)HIDWORD(*v38);
        goto LABEL_37;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x1E4F21690], v29))
      {
        uint64_t v38 = (uint64_t *)MEMORY[0x1E4F21E40];
        goto LABEL_36;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x1E4F21678], v29))
      {
        uint64_t v38 = (uint64_t *)MEMORY[0x1E4F21E28];
        goto LABEL_36;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x1E4F21688], v29))
      {
        uint64_t v38 = (uint64_t *)MEMORY[0x1E4F21E38];
        goto LABEL_36;
      }
    }
LABEL_37:
    CFPropertyListRef v39 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F21658]);
    if (!v39) {
      goto LABEL_40;
    }
    CFTypeID v40 = CFGetTypeID(v39);
    if (v40 == CFNumberGetTypeID())
    {
      FigCFNumberGetSInt32();
LABEL_40:
      if (v45 == kCMTagDataType_Invalid
        || (v47.category = v16,
            v47.datauint64_t Type = v45,
            v47.CMTimeValue value = v18,
            uint64_t Mutable = CMTagCollectionAddTag(0, v47),
            !Mutable))
      {
        if (!v22
          || (v48.category = v21,
              v48.datauint64_t Type = v22,
              v48.CMTimeValue value = tagToAdd,
              uint64_t Mutable = CMTagCollectionAddTag(0, v48),
              !Mutable))
        {
          if (!v15
            || (v49.category = v13,
                v49.datauint64_t Type = v15,
                v49.CMTimeValue value = v14,
                uint64_t Mutable = CMTagCollectionAddTag(0, v49),
                !Mutable))
          {
            uint64_t v41 = 0;
            if (!FigTagCollectionIsEmpty()) {
              void *v2 = 0;
            }
            return v41;
          }
        }
      }
      return Mutable;
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(const opaqueCMFormatDescription *a1, void *a2)
{
  CFTypeRef cf = 0;
  uint64_t Mutable = FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &cf);
  if (Mutable) {
    goto LABEL_11;
  }
  if (!cf)
  {
    uint64_t Mutable = FigTagCollectionCreateMutable();
    if (!Mutable) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v5 = Mutable;
    goto LABEL_7;
  }
  uint64_t Mutable = FigTagCollectionCreateMutableCopy();
  if (Mutable) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v4 = FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
  uint64_t v5 = v4;
  if (a2 && !v4) {
    *a2 = 0;
  }
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories()
{
  CFTypeRef cf = 0;
  uint64_t DefaultTagCollectionForVideo = FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&cf);
  if (!DefaultTagCollectionForVideo) {
    uint64_t DefaultTagCollectionForVideo = FigTagCollectionAddTagsFromCollectionWithFilterFunction();
  }
  uint64_t v1 = DefaultTagCollectionForVideo;
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

BOOL fps_tagCollectionFilterDoesNotContainTagOfCategory(CMTagCategory category, int a2, CMTagCollectionRef tagCollection)
{
  return category && CMTagCollectionContainsCategory(tagCollection, category) == 0;
}

BOOL FPSupport_CanFormatsShareVideoRenderPipeline(const opaqueCMFormatDescription *a1, const opaqueCMFormatDescription *a2)
{
  CFArrayRef theArray = 0;
  CFArrayRef tagCollectionsOut = 0;
  long long v8 = 0uLL;
  CMVideoFormatDescriptionCopyTagCollectionArray(a1, &tagCollectionsOut);
  CMVideoFormatDescriptionCopyTagCollectionArray(a2, &theArray);
  if (tagCollectionsOut) {
    CFIndex Count = CFArrayGetCount(tagCollectionsOut);
  }
  else {
    CFIndex Count = 0;
  }
  CFIndex v5 = (CFIndex)theArray;
  if (theArray) {
    CFIndex v5 = CFArrayGetCount(theArray);
  }
  if (Count != v5)
  {
LABEL_11:
    BOOL v6 = 0;
    goto LABEL_13;
  }
  FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, (void *)&v8 + 1);
  FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a2, &v8);
  if (v8 != 0)
  {
    if (fps_verifyTagsOfCategoryAreEqual(*((uint64_t *)&v8 + 1), v8)
      && fps_verifyTagsOfCategoryAreEqual(*((uint64_t *)&v8 + 1), v8))
    {
      BOOL v6 = fps_verifyTagsOfCategoryAreEqual(*((uint64_t *)&v8 + 1), v8);
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  BOOL v6 = 1;
LABEL_13:
  if (tagCollectionsOut) {
    CFRelease(tagCollectionsOut);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (*((void *)&v8 + 1)) {
    CFRelease(*((CFTypeRef *)&v8 + 1));
  }
  if ((void)v8) {
    CFRelease((CFTypeRef)v8);
  }
  return v6;
}

BOOL fps_verifyTagsOfCategoryAreEqual(uint64_t a1, uint64_t a2)
{
  if (a1) {
    FigTagCollectionGetTagsWithCategory();
  }
  if (a2) {
    FigTagCollectionGetTagsWithCategory();
  }
  return FigTagEqualToTag() != 0;
}

uint64_t FPSupport_CanVideoRenderPipelineSupportChangingFigImageQueues(const opaqueCMFormatDescription *a1)
{
  CFTypeRef cf = 0;
  FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &cf);
  if (!cf) {
    return 1;
  }
  FigTagCollectionGetTagsWithCategory();
  BOOL v1 = FigTagEqualToTag() == 0;
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

BOOL FPSupport_FormatDescriptionIndicatesStereoVideo(const opaqueCMFormatDescription *a1)
{
  CMTagCollectionRef tagCollection = 0;
  CFArrayRef tagCollectionsOut = 0;
  CMVideoFormatDescriptionCopyTagCollectionArray(a1, &tagCollectionsOut);
  if (tagCollectionsOut && CFArrayGetCount(tagCollectionsOut) > 1) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = !FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &tagCollection)
  }
      && tagCollection
      && CMTagCollectionContainsTag(tagCollection, *MEMORY[0x1E4F1F410]) != 0;
  if (tagCollectionsOut)
  {
    CFRelease(tagCollectionsOut);
    CFArrayRef tagCollectionsOut = 0;
  }
  if (tagCollection) {
    CFRelease(tagCollection);
  }
  return v2;
}

BOOL FPSupport_FormatDescriptionIndicatesFishEyeProjection(const opaqueCMFormatDescription *a1)
{
  CMTagCollectionRef tagCollection = 0;
  if (FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &tagCollection))
  {
    BOOL v1 = 0;
  }
  else
  {
    if (!tagCollection) {
      return 0;
    }
    BOOL v1 = CMTagCollectionContainsTag(tagCollection, *MEMORY[0x1E4F1F400]) != 0;
  }
  if (tagCollection) {
    CFRelease(tagCollection);
  }
  return v1;
}

uint64_t FPSupport_RenderPipelineSupportsGaplessTransitionWithFormats(uint64_t a1, CMAudioFormatDescriptionRef formatDescription, CMAudioFormatDescriptionRef otherFormatDescription)
{
  if (!a1
    || ((uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v7 = 0) : (v7 = v6),
        (long long v8 = *(uint64_t (**)(uint64_t, CMAudioFormatDescriptionRef))(v7 + 96)) == 0
     || (uint64_t result = v8(a1, otherFormatDescription), result != 1)))
  {
    return CMAudioFormatDescriptionEqual(formatDescription, otherFormatDescription, 1u, 0);
  }
  return result;
}

BOOL FPSupport_AudioProcessingUnitsConfigurationsAreDifferent()
{
  return FigCFEqual() == 0;
}

uint64_t FPSupport_SeekIDGetSource(int a1)
{
  return (a1 / 100000000);
}

uint64_t FPSupport_InitialSeekIDForSource(int a1)
{
  return (100000000 * a1) | 1u;
}

uint64_t FPSupport_IncrementSeekID(int a1)
{
  int v1 = (a1 % 100000000 + 1) % 100000000;
  do
  {
    int v2 = v1;
    int v1 = 1;
  }
  while (!v2);
  return (a1 - a1 % 100000000 + v2);
}

uint64_t FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem(uint64_t a1, CFStringRef *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  if (!a2)
  {
LABEL_20:
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 152);
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = v6(a1, &v17);
  if (v7) {
    goto LABEL_21;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v17);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v10 = v9 ? v9 : 0;
  CFPropertyListRef v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (!v11)
  {
LABEL_14:
    uint64_t v14 = 4294954514;
    goto LABEL_15;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v7 = v11(CMBaseObject, @"assetProperty_CreationURL", *MEMORY[0x1E4F1CF80], &cf);
  if (!v7)
  {
    if (cf)
    {
      CFHashCode v13 = CFHash(cf);
      uint64_t v14 = 0;
      *a2 = CFStringCreateWithFormat(v12, 0, @"#%lu", v13);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v14 = v7;
LABEL_15:
  if (v17) {
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t FPSupport_fvtSupportsMetadataTrack(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  CFArrayRef theArray = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!a2)
  {
    FigSignalErrorAt();
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, void, CFArrayRef *))(v5 + 48);
  if (!v6 || v6(a1, *MEMORY[0x1E4F1CF80], &theArray)) {
    goto LABEL_24;
  }
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    uint64_t v10 = *MEMORY[0x1E4F21E00];
    CMTagValue v11 = *(void *)(MEMORY[0x1E4F21E00] + 8);
    while (1)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
      CFIndex CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)ValueAtIndex);
      if (CountOfDataChannels >= 1) {
        break;
      }
LABEL_17:
      uint64_t v21 = 0;
      if (++v9 >= v8) {
        goto LABEL_25;
      }
    }
    CFIndex v14 = CountOfDataChannels;
    CFIndex v15 = 0;
    while (1)
    {
      DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)ValueAtIndex, v15);
      *(void *)&v24.category = v10;
      v24.CMTimeValue value = v11;
      if (CMTagCollectionContainsTag(DataChannelByIndex, v24))
      {
        if (!CMTagCollectionContainsCategory(DataChannelByIndex, kCMTagCategory_MediaSubType))
        {
          uint64_t v21 = 1;
          goto LABEL_25;
        }
        CMFormatDescriptionGetMediaSubType(a2);
        uint64_t v17 = FigTagMakeWithOSTypeValue();
        CMTagValue v19 = v18;
        *(void *)&v25.category = v17;
        v25.CMTimeValue value = v19;
        uint64_t v20 = CMTagCollectionContainsTag(DataChannelByIndex, v25);
        if (v20) {
          break;
        }
      }
      if (v14 == ++v15) {
        goto LABEL_17;
      }
    }
    uint64_t v21 = v20;
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v21 = 0;
LABEL_25:
  if (theArray) {
    CFRelease(theArray);
  }
  return v21;
}

BOOL FPSupport_IsFormatDescAllowable(const opaqueCMFormatDescription *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4)
{
  MediaSubuint64_t Type = 0;
  if (!a1) {
    return 1;
  }
  Mediauint64_t Type = CMFormatDescriptionGetMediaType(a1);
  if (MediaType == 1668047728)
  {
    MediaSubuint64_t Type = CMFormatDescriptionGetMediaSubType(a1);
    a3 = a4;
    goto LABEL_90;
  }
  if (MediaType == 1936684398)
  {
    RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(a1);
    if (!RichestDecodableFormat) {
      goto LABEL_90;
    }
    signed int mFormatID = RichestDecodableFormat->mASBD.mFormatID;
    MediaSubuint64_t Type = mFormatID;
    if (mFormatID <= 1902207794)
    {
      if (mFormatID <= 1685220712)
      {
        if (mFormatID > 1667524656)
        {
          if (mFormatID <= 1667656802)
          {
            if (mFormatID == 1667524657 || mFormatID == 1667574579) {
              goto LABEL_89;
            }
            int v14 = 1667575091;
          }
          else if (mFormatID > 1668047202)
          {
            if (mFormatID == 1668047203) {
              goto LABEL_89;
            }
            int v14 = 1668641633;
          }
          else
          {
            if (mFormatID == 1667656803) {
              goto LABEL_89;
            }
            int v14 = 1667790435;
          }
        }
        else
        {
          if (mFormatID <= 1667326823)
          {
            if (mFormatID == 1633771875 || mFormatID == 1667312947) {
              goto LABEL_89;
            }
            unsigned __int16 v12 = 24931;
          }
          else if (mFormatID > 1667330146)
          {
            if (mFormatID == 1667330147) {
              goto LABEL_89;
            }
            unsigned __int16 v12 = 30307;
          }
          else
          {
            if (mFormatID == 1667326824) {
              goto LABEL_89;
            }
            unsigned __int16 v12 = 25456;
          }
          int v14 = v12 | 0x63610000;
        }
        goto LABEL_88;
      }
      if (mFormatID <= 1885430578)
      {
        if (mFormatID <= 1701733237)
        {
          if (mFormatID == 1685220713 || mFormatID == 1700886115) {
            goto LABEL_89;
          }
          int v14 = 1701733217;
        }
        else if (mFormatID > 1882599479)
        {
          if (mFormatID == 1882599480) {
            goto LABEL_89;
          }
          int v14 = 1885430115;
        }
        else
        {
          if (mFormatID == 1701733238) {
            goto LABEL_89;
          }
          int v14 = 1869117027;
        }
        goto LABEL_88;
      }
      if (mFormatID <= 1885547314)
      {
        if ((mFormatID - 1885430579) > 0x3D
          || ((1 << (mFormatID - 51)) & 0x2020000000000001) == 0)
        {
          goto LABEL_90;
        }
LABEL_89:
        MediaSubuint64_t Type = FPSupport_GetPlaintextAudioFormatForEncryptedFormatID(mFormatID);
        goto LABEL_90;
      }
      if (mFormatID <= 1886745440)
      {
        if (mFormatID == 1885547315) {
          goto LABEL_89;
        }
        int v14 = 1885692723;
        goto LABEL_88;
      }
      if (mFormatID == 1886745441) {
        goto LABEL_89;
      }
      unsigned __int16 v13 = 24931;
    }
    else
    {
      if (mFormatID > 1902667125)
      {
        if (mFormatID <= 2053202738)
        {
          if (mFormatID <= 1902998903)
          {
            if (mFormatID == 1902667126 || mFormatID == 1902671459) {
              goto LABEL_89;
            }
            int v14 = 1902928227;
            goto LABEL_88;
          }
          if (mFormatID <= 1903587384)
          {
            if (mFormatID == 1902998904) {
              goto LABEL_89;
            }
            int v14 = 1903522657;
            goto LABEL_88;
          }
          if (mFormatID == 1903587385) {
            goto LABEL_89;
          }
          unsigned __int16 v11 = 24931;
        }
        else
        {
          if (mFormatID > 2053319474)
          {
            if (mFormatID > 2053923170)
            {
              if (mFormatID == 2054517601) {
                goto LABEL_89;
              }
              int v14 = 2053923171;
            }
            else
            {
              if (mFormatID == 2053319475) {
                goto LABEL_89;
              }
              int v14 = 2053464883;
            }
            goto LABEL_88;
          }
          if ((mFormatID - 2053202739) <= 0x3D
            && ((1 << (mFormatID - 51)) & 0x2020000000000001) != 0)
          {
            goto LABEL_89;
          }
          unsigned __int16 v11 = 30307;
        }
        int v14 = v11 | 0x7A610000;
LABEL_88:
        if (mFormatID != v14) {
          goto LABEL_90;
        }
        goto LABEL_89;
      }
      if (mFormatID > 1902324530)
      {
        if (mFormatID <= 1902405732)
        {
          if (mFormatID == 1902324531 || mFormatID == 1902403958) {
            goto LABEL_89;
          }
          unsigned __int16 v15 = 26673;
        }
        else
        {
          if (mFormatID > 1902469938)
          {
            if (mFormatID == 1902469939) {
              goto LABEL_89;
            }
            int v14 = 1902537827;
            goto LABEL_88;
          }
          if (mFormatID == 1902405733) {
            goto LABEL_89;
          }
          unsigned __int16 v15 = 28024;
        }
        int v14 = v15 | 0x71640000;
        goto LABEL_88;
      }
      if ((mFormatID - 1902207795) <= 0x3D
        && ((1 << (mFormatID - 51)) & 0x2020000000000001) != 0
        || (mFormatID - 1902212657) <= 0x34
        && ((1 << (mFormatID - 49)) & 0x14000000000001) != 0)
      {
        goto LABEL_89;
      }
      unsigned __int16 v13 = 28771;
    }
    int v14 = v13 | 0x71610000;
    goto LABEL_88;
  }
  if (MediaType != 1986618469) {
    return 1;
  }
  CMVideoFormatDescriptionGetPlaintextMediaSubTypeAndEncryptionScheme();
  a3 = a2;
LABEL_90:
  if (!a3 || CFArrayGetCount(a3) < 1) {
    return 1;
  }
  return MediaSubType && FigCFArrayContainsInt32() != 0;
}

uint64_t FPSupport_SetCurrentTimeWithRangeIDAndReason(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v10 = Mutable;
  if (!a1)
  {
    uint64_t v14 = FigSignalErrorAt();
    if (!v10) {
      return v14;
    }
    goto LABEL_9;
  }
  if (Mutable)
  {
    FigCFDictionarySetInt32();
    long long v18 = *a4;
    uint64_t v19 = *((void *)a4 + 2);
    FigCFDictionarySetCMTime();
    long long v18 = *a5;
    uint64_t v19 = *((void *)a5 + 2);
    FigCFDictionarySetCMTime();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    long long v16 = *a2;
    uint64_t v17 = *((void *)a2 + 2);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    unsigned __int16 v13 = *(uint64_t (**)(uint64_t, long long *, CFMutableDictionaryRef))(v12 + 176);
    if (v13)
    {
      long long v18 = v16;
      uint64_t v19 = v17;
      uint64_t v14 = v13(a1, &v18, v10);
    }
    else
    {
      uint64_t v14 = 4294954514;
    }
LABEL_9:
    CFRelease(v10);
    return v14;
  }

  return FigSignalErrorAt();
}

BOOL FPSupport_IsRunningInAppleVirtualMachine()
{
  if (FPSupport_IsRunningInAppleVirtualMachine_sCheckOnce != -1) {
    dispatch_once(&FPSupport_IsRunningInAppleVirtualMachine_sCheckOnce, &__block_literal_global_156);
  }
  return FPSupport_IsRunningInAppleVirtualMachine_isAppleVirtualMachine != 0;
}

uint64_t FPSupport_GetAssetDoNotLogURLs(uint64_t a1)
{
  CFNumberRef number = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  int v5 = v4(CMBaseObject, @"assetProperty_CreationFlags", *MEMORY[0x1E4F1CF80], &number);
  CFNumberRef v6 = number;
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = number == 0;
  }
  if (v7)
  {
    uint64_t v8 = 0;
    if (!number) {
      return v8;
    }
    goto LABEL_14;
  }
  uint64_t v10 = 0;
  CFNumberGetValue(number, kCFNumberSInt64Type, &v10);
  uint64_t v8 = (v10 >> 9) & 1;
  CFNumberRef v6 = number;
  if (number) {
LABEL_14:
  }
    CFRelease(v6);
  return v8;
}

BOOL FPSupport_HasAudioSessionInRuntime()
{
  return objc_opt_class() != 0;
}

uint64_t FPSupport_CreatePayloadForLastPlayedDateNotification(const void *a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  if (a1 && a2)
  {
    uint64_t result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v8 = (__CFDictionary *)result;
    if (result)
    {
      FigCFDictionarySetBoolean();
      CFDictionarySetValue(v8, @"Date", a2);
      CFDictionarySetValue(v8, @"URL", a1);
      uint64_t result = 0;
    }
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    uint64_t v8 = 0;
  }
  *a4 = v8;
  return result;
}

uint64_t FPSupport_ProcessPayloadForLastPlayedDateNotification(uint64_t a1)
{
  if (a1)
  {
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t Value = FigCFDictionaryGetValue();
    CFURLRef v2 = (const __CFURL *)FigCFDictionaryGetValue();
    MainBundle = CFBundleGetMainBundle();
    CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
    return FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL(v2, Identifier, Value, 0);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

dispatch_queue_t fpSupport_createDisplayAssertionMutexAndDict()
{
  sAssertionParameters = FigSimpleMutexCreate();
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFURLRef v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  qword_1E934DAE0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  qword_1E934DAE8 = (uint64_t)dispatch_queue_create("com.apple.coremedia.fpsupport.HDRBatonAvailableNotificationQueue", 0);
  unk_1E934DAF0 = @"HDRBatonAvailable";
  qword_1E934DAF8 = FigSimpleMutexCreate();
  qword_1E934DB00 = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, v2);
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.fpsupport.4kBatonAvailableNotificationQueue", 0);
  qword_1E934DB08 = (uint64_t)result;
  unk_1E934DB10 = @"4kBatonAvailable";
  return result;
}

void fpSupport_PostDeferredBatonAvailableNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CMNotificationCenterPostNotification();
  if (a4)
  {
    CFRelease(a4);
  }
}

uint64_t __fpSupport_getContext_block_invoke()
{
  uint64_t result = FigSimpleMutexCreate();
  fpSupport_getContext_contextMutex = result;
  return result;
}

void __fps_releasePlayerResources_block_invoke(uint64_t a1)
{
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(a1 + 32));
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = *(void (**)(uint64_t, __CFString *, void))(v4 + 56);
  if (v5) {
    v5(FigBaseObject, @"ImageQueueSlotTransitionFinished", *MEMORY[0x1E4F1CFD0]);
  }
  CFNumberRef v6 = *(const void **)(a1 + 32);
  if (v6)
  {
    CFRelease(v6);
  }
}

void fpSupport_handleSetPropertiesApplier(CFTypeRef cf, CFTypeRef a2, uint64_t a3)
{
  char v21 = 0;
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1D260];
  if ((CFTypeRef)*MEMORY[0x1E4F1D260] == a2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (uint64_t)a2;
  }
  CFTypeRef v19 = 0;
  CFTypeRef cfa = 0;
  if (*(_DWORD *)(a3 + 32))
  {
LABEL_35:
    int v17 = 0;
    goto LABEL_36;
  }
  CFTypeRef v6 = cf;
  if (!cf || (CFTypeID v8 = CFGetTypeID(cf), v8 != CFStringGetTypeID()))
  {
    int v17 = FigSignalErrorAt();
LABEL_36:
    CFTypeRef v6 = cfa;
    if (!cfa) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  int v9 = fpSupport_handleSetPropertiesInternal(*(void *)a3, (uint64_t)v6, v5, (uint64_t)&v21, (uint64_t)&cfa, (uint64_t)&v19);
  if (v9) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v21 == 0;
  }
  if (v10)
  {
    if (cfa)
    {
      CFTypeID v11 = CFGetTypeID(cfa);
      if (v11 == CFStringGetTypeID()) {
        goto LABEL_20;
      }
    }
    int v9 = FigSignalErrorAt();
  }
  if (v9)
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t SInt64 = (const void *)FigCFNumberCreateSInt64();
    char v21 = 1;
    CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a3 + 24);
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(a3 + 24) = Mutable;
    }
    CFDictionarySetValue(Mutable, v6, SInt64);
    if (SInt64) {
      CFRelease(SInt64);
    }
  }
LABEL_20:
  CFTypeRef v15 = v19;
  if (!v19)
  {
    if (v4) {
      CFTypeRef v15 = CFRetain(v4);
    }
    else {
      CFTypeRef v15 = 0;
    }
    CFTypeRef v19 = v15;
  }
  if (v21)
  {
    uint64_t MutableCopy = *(__CFDictionary **)(a3 + 16);
    if (!MutableCopy)
    {
      uint64_t MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a3 + 8));
      *(void *)(a3 + 16) = MutableCopy;
    }
    CFDictionaryRemoveValue(MutableCopy, v6);
    goto LABEL_35;
  }
  if (cfa != v6 || v15 != a2)
  {
    long long v18 = *(__CFDictionary **)(a3 + 16);
    if (!v18)
    {
      long long v18 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a3 + 8));
      *(void *)(a3 + 16) = v18;
    }
    CFDictionaryRemoveValue(v18, v6);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), cfa, v19);
    goto LABEL_35;
  }
  int v17 = 0;
LABEL_37:
  CFRelease(v6);
LABEL_38:
  if (v19) {
    CFRelease(v19);
  }
  if (!*(_DWORD *)(a3 + 32)) {
    *(_DWORD *)(a3 + 32) = v17;
  }
}

uint64_t fpSupport_handleSetPropertiesInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)a1 > 1u) {
    return FigSignalErrorAt();
  }
  else {
    return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(void *)(a1 + 8), *(void *)(a1 + 16), a2, a3, a4, a5, a6);
  }
}

uint64_t FigPictureReaderGetAPIVersion()
{
  return 45;
}

uint64_t FigPictureReaderGetClassID()
{
  return sFigPictureReaderClassID;
}

uint64_t RegisterFigPictureReaderBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPictureReaderGetTypeID()
{
  MEMORY[0x19970EE10](&FigPictureReaderGetClassID_sRegisterFigPictureReaderBaseTypeOnce, RegisterFigPictureReaderBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureReaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPictureReader %p]", a1);
}

uint64_t FigStreamAssetImageGeneratorCreateFromAssetWithOptions(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  uint64_t v4 = 4294954863;
  if (!a2 || !a4) {
    goto LABEL_25;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFTypeID v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (!v11)
  {
    uint64_t v4 = 4294954514;
    goto LABEL_23;
  }
  uint64_t v12 = v11(CMBaseObject, @"assetProperty_AssetType", *MEMORY[0x1E4F1CF80], &cf);
  if (v12) {
    goto LABEL_29;
  }
  if (FigCFEqual())
  {
    FigAssetImageGeneratorGetClassID();
    uint64_t v12 = CMDerivedObjectCreate();
    if (!v12)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v12 = FigRetainProxyCreate();
      if (!v12)
      {
        *(unsigned char *)(DerivedStorage + 9) = 0;
        *(void *)(DerivedStorage + 24) = CFRetain(a2);
        *(void *)(DerivedStorage + 96) = 0;
        uint64_t v14 = FigSimpleMutexCreate();
        *(void *)(DerivedStorage + 32) = v14;
        if (v14)
        {
          *(void *)(DerivedStorage + 40) = 0;
          *(void *)(DerivedStorage + 48) = DerivedStorage + 40;
          *(void *)(DerivedStorage + 64) = FigSemaphoreCreate();
          uint64_t v15 = FigSemaphoreCreate();
          *(void *)(DerivedStorage + 576) = *(void *)(DerivedStorage + 64);
          *(void *)(DerivedStorage + 72) = v15;
          *(void *)(DerivedStorage + 80) = 0;
          uint64_t v16 = FigSimpleMutexCreate();
          *(void *)(DerivedStorage + 568) = v16;
          if (v16)
          {
            uint64_t v17 = 0;
            uint64_t v18 = MEMORY[0x1E4F1FA48];
            *(_OWORD *)(DerivedStorage + 392) = *MEMORY[0x1E4F1FA48];
            *(void *)(DerivedStorage + 408) = *(void *)(v18 + 16);
            uint64_t v19 = MEMORY[0x1E4F1F9F8];
            long long v20 = *MEMORY[0x1E4F1F9F8];
            *(_OWORD *)(DerivedStorage + 416) = *MEMORY[0x1E4F1F9F8];
            uint64_t v21 = *(void *)(v19 + 16);
            *(void *)(DerivedStorage + 432) = v21;
            *(_OWORD *)(DerivedStorage + 440) = v20;
            *(void *)(DerivedStorage + 456) = v21;
            *(_OWORD *)(DerivedStorage + 368) = v20;
            *(void *)(DerivedStorage + 384) = v21;
            do
            {
              uint64_t v22 = DerivedStorage + 464 + v17;
              *(_OWORD *)uint64_t v22 = v20;
              *(void *)(v22 + 16) = v21;
              v17 += 24;
            }
            while (v17 != 72);
            *(_DWORD *)(DerivedStorage + 552) = 0;
            *(void *)(DerivedStorage + 624) = 0;
            *(void *)(DerivedStorage + 320) = 0;
            *(void *)(DerivedStorage + 328) = DerivedStorage + 320;
            *(void *)(DerivedStorage + 336) = 0;
            MEMORY[0x19970EE10](&sSAIGCreateNotificationQueueOnce, saig_createNotificationQueueOnce);
            if (sSAIGNotificationQueue)
            {
              FigCFWeakReferenceStore();
              uint64_t v23 = FigAssetGetCMBaseObject(a2);
              uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v24) {
                uint64_t v25 = v24;
              }
              else {
                uint64_t v25 = 0;
              }
              long long v26 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v25 + 48);
              if (v26) {
                v26(v23, @"assetProperty_CreationURL", a1, DerivedStorage + 16);
              }
              uint64_t v4 = 0;
              *a4 = v29;
              CFTypeRef v29 = 0;
              goto LABEL_23;
            }
          }
        }
        uint64_t v12 = FigSignalErrorAt();
      }
    }
LABEL_29:
    uint64_t v4 = v12;
    goto LABEL_23;
  }
  uint64_t v4 = 4294954860;
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
LABEL_25:
  if (v29) {
    CFRelease(v29);
  }
  return v4;
}

dispatch_queue_t saig_createNotificationQueueOnce()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.streamassetimagegenerator.notifications", 0);
  sSAIGNotificationuint64_t Queue = (uint64_t)result;
  return result;
}

uint64_t FigStreamAssetImageGeneratorCreateFromAsset(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  return FigStreamAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, (uint64_t)a3, a3);
}

uint64_t saig_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (uint64_t)DerivedStorage;
  CFTypeRef v4 = *DerivedStorage;
  if (*DerivedStorage) {
    CFRetain(*DerivedStorage);
  }
  FigRetainProxyLockMutex();
  if (!*(unsigned char *)(v3 + 8))
  {
    FigRetainProxyInvalidate();
    *(unsigned char *)(v3 + 8) = 1;
    saig_CancelAllRequests(v3);
    if (*(void *)(v3 + 624)) {
      FigSemaphoreSignal();
    }
    if (*(void *)(v3 + 80))
    {
      FigSemaphoreSignal();
      uint64_t v5 = *(void *)(v3 + 80);
      *(void *)(v3 + 80) = 0;
      FigRetainProxyUnlockMutex();
      if (v5)
      {
        FigThreadAbort();
        FigThreadJoin();
      }
    }
    else
    {
      FigRetainProxyUnlockMutex();
    }
    FigRetainProxyLockMutex();
    CFTypeRef v6 = *(const void **)(v3 + 96);
    if (v6)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      *(void *)(v3 + 96) = 0;
      FigBytePumpGetFigBaseObject(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v10 = v9 ? v9 : 0;
        CFTypeID v11 = *(void (**)(uint64_t))(v10 + 24);
        if (v11) {
          v11(v8);
        }
      }
      FigBytePumpRelease(v6);
    }
    MEMORY[0x19970E910](*(void *)(v3 + 568));
    uint64_t v12 = *(const void **)(v3 + 560);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(v3 + 560) = 0;
    }
    MEMORY[0x19970E930](*(void *)(v3 + 568));
    saig_tearDownManifoldsAndDeleteTracks(a1);
    FigCFWeakReferenceStore();
    if (*(void *)(v3 + 64))
    {
      FigSemaphoreDestroy();
      *(void *)(v3 + 64) = 0;
    }
    if (*(void *)(v3 + 72))
    {
      FigSemaphoreDestroy();
      *(void *)(v3 + 72) = 0;
    }
    unsigned __int16 v13 = *(const void **)(v3 + 648);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v3 + 648) = 0;
    }
    uint64_t v14 = *(const void **)(v3 + 616);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v3 + 616) = 0;
    }
    uint64_t v15 = *(const void **)(v3 + 144);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(v3 + 144) = 0;
    }
    uint64_t v16 = *(const void **)(v3 + 112);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v3 + 112) = 0;
    }
    uint64_t v17 = *(const void **)(v3 + 120);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v3 + 120) = 0;
    }
    uint64_t v18 = *(const void **)(v3 + 128);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(v3 + 128) = 0;
    }
    uint64_t v19 = *(const void **)(v3 + 136);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(v3 + 136) = 0;
    }
    long long v20 = *(const void **)(v3 + 24);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(v3 + 24) = 0;
    }
    uint64_t v21 = *(const void **)(v3 + 16);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(v3 + 16) = 0;
    }
  }
  FigRetainProxyUnlockMutex();
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t saig_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  saig_Invalidate(a1);
  if (*(void *)(DerivedStorage + 32))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 32) = 0;
  }
  if (*(void *)(DerivedStorage + 568))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 568) = 0;
  }

  return FigRetainProxyRelease();
}

__CFString *saig_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigStreamAssetImageGenerator %p url: ", a1);
  CFStringRef v4 = CFURLGetString(*(CFURLRef *)(DerivedStorage + 16));
  CFStringAppend(Mutable, v4);
  CFStringAppend(Mutable, @">");
  return Mutable;
}

uint64_t saig_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = 4294954516;
  if (a2 && a3)
  {
    uint64_t v7 = DerivedStorage;
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      FigSignalErrorAt();
    }
    else
    {
      if (!CFEqual(a2, @"ClientPID"))
      {
        if (CFEqual(a2, @"AllowAlternateDecoderSelection"))
        {
          uint64_t v6 = 0;
          *(unsigned char *)(v7 + 656) = (const void *)*MEMORY[0x1E4F1CFD0] == a3;
        }
        else
        {
          uint64_t v6 = 4294954512;
        }
        goto LABEL_8;
      }
      uint64_t v8 = *(const void **)(v7 + 648);
      *(void *)(v7 + 648) = a3;
      CFRetain(a3);
      if (v8) {
        CFRelease(v8);
      }
    }
    uint64_t v6 = 0;
LABEL_8:
    FigRetainProxyUnlockMutex();
  }
  return v6;
}

void saig_CancelAllRequests(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 32));
  CFURLRef v2 = *(uint64_t **)(a1 + 40);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 556);
    do
    {
      *((unsigned char *)v2 + 8) = 1;
      int v4 = *((_DWORD *)v2 + 14);
      if (v3 < v4)
      {
        *(_DWORD *)(a1 + 556) = v4;
        int v3 = v4;
      }
      CFURLRef v2 = (uint64_t *)*v2;
    }
    while (v2);
  }

  JUMPOUT(0x19970E930);
}

uint64_t saig_DurationChanged()
{
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_21;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v1 = CFRetain(Owner);
  }
  else {
    CFTypeRef v1 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 104) != 2)
  {
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = *(void *)(DerivedStorage + 96);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, float))(v6 + 96);
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = v8(v4, 1.0);
  if (!v9)
  {
    uint64_t v10 = *(void *)(v3 + 96);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    unsigned __int16 v13 = *(uint64_t (**)(uint64_t, _OWORD *, void, void, void, uint64_t, void))(v12 + 72);
    if (v13)
    {
      long long v14 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
      v16[0] = *MEMORY[0x1E4F1FA20];
      v16[1] = v14;
      v16[2] = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
      uint64_t v7 = v13(v10, v16, 0, 0, 0, v3 + 536, 0);
      if (!v7) {
        *(_DWORD *)(v3 + 104) = 3;
      }
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v7 = 4294954514;
    goto LABEL_19;
  }
  uint64_t v7 = v9;
LABEL_19:
  saig_HandleError((uint64_t)v1, v7);
  if (v1) {
    CFRelease(v1);
  }
LABEL_21:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t saig_AlternateListChanged()
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef theDict = 0;
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_104;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v1 = CFRetain(Owner);
  }
  else {
    CFTypeRef v1 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 96));
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v6 + 48);
  if (v7)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v9 = v7(v4, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], &theDict);
    if (!v9)
    {
      int v10 = *(_DWORD *)(DerivedStorage + 104);
      if (v10 == 2)
      {
        uint64_t v11 = *(const void **)(DerivedStorage + 144);
        if (!v11)
        {
LABEL_15:
          CFAllocatorRef allocator = v8;
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"FBPAIK_FigAlternateArray");
          CFIndex Count = CFArrayGetCount(Value);
          long long v14 = *(const void **)(DerivedStorage + 112);
          if (v14)
          {
            CFRelease(v14);
            *(void *)(DerivedStorage + 112) = 0;
          }
          uint64_t v15 = *(const void **)(DerivedStorage + 128);
          if (v15)
          {
            CFRelease(v15);
            *(void *)(DerivedStorage + 128) = 0;
          }
          capaciCGFloat ty = Count;
          uint64_t v16 = *(const void **)(DerivedStorage + 120);
          if (v16)
          {
            CFRelease(v16);
            *(void *)(DerivedStorage + 120) = 0;
          }
          CFArrayRef v67 = Value;
          uint64_t v68 = (CFArrayRef *)(DerivedStorage + 120);
          long long v70 = (CFArrayRef *)(DerivedStorage + 112);
          uint64_t v71 = (uint64_t)v1;
          uint64_t v17 = CFDictionaryGetValue(theDict, @"FBPAIK_MediaSelectionArray");
          if (v17)
          {
            CFTypeRef v18 = CFRetain(v17);
            *(void *)(DerivedStorage + 128) = v18;
            if (v18)
            {
              uint64_t v19 = *(const void **)(DerivedStorage + 136);
              if (v19)
              {
                CFRelease(v19);
                *(void *)(DerivedStorage + 136) = 0;
              }
              CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
              *(void *)(DerivedStorage + 136) = Mutable;
              if (!Mutable)
              {
                uint64_t v9 = 4294954510;
                goto LABEL_99;
              }
              CFIndex v73 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 128));
              if (v73 >= 1)
              {
                for (CFIndex i = 0; i != v73; ++i)
                {
                  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 128), i);
                  uint64_t v23 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
                  CFArrayRef v24 = *(const __CFArray **)(DerivedStorage + 136);
                  if (v23) {
                    BOOL v25 = v24 == 0;
                  }
                  else {
                    BOOL v25 = 1;
                  }
                  if (v25) {
                    goto LABEL_38;
                  }
                  CFIndex v26 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136));
                  if (v26 < 1) {
                    goto LABEL_38;
                  }
                  CFIndex v27 = v26;
                  CFIndex v28 = 0;
                  while (1)
                  {
                    CFDictionaryRef v29 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, v28);
                    CFDictionaryGetValue(v29, @"MediaSelectionGroupMediaType");
                    if (FigCFEqual()) {
                      break;
                    }
                    if (v27 == ++v28) {
                      goto LABEL_38;
                    }
                  }
                  if (!v29)
                  {
LABEL_38:
                    CFStringForOSTypeCFArrayRef Value = (const void *)FigGetCFStringForOSTypeValue();
                    int v31 = CFEqual(v23, CFStringForOSTypeValue);
                    CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupOptions");
                    keys = 0;
                    long long v78 = 0;
                    values = 0;
                    long long v76 = 0;
                    if (!v31)
                    {
                      CFArrayRef v33 = v32;
                      CFIndex v34 = CFArrayGetCount(v32);
                      if (v34 < 1)
                      {
                        CFIndex v36 = 0;
                        CFAllocatorRef v37 = allocator;
                      }
                      else
                      {
                        CFIndex v35 = v34;
                        CFIndex v36 = 0;
                        CFAllocatorRef v37 = allocator;
                        while (1)
                        {
                          CFDictionaryRef v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, v36);
                          CFBooleanRef v39 = (const __CFBoolean *)CFDictionaryGetValue(v38, @"MediaSelectionOptionsIsDefault");
                          if (v39)
                          {
                            if (CFBooleanGetValue(v39)) {
                              break;
                            }
                          }
                          if (v35 == ++v36)
                          {
                            CFIndex v36 = 0;
                            break;
                          }
                        }
                      }
                      CFDictionaryRef v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, v36);
                      keys = @"MediaSelectionOptionsPersistentID";
                      uint64_t v41 = (void *)CFDictionaryGetValue(v40, @"MediaSelectionOptionsPersistentID");
                      long long v78 = @"MediaSelectionGroupMediaType";
                      values = v41;
                      long long v76 = v23;
                      CFDictionaryRef v42 = CFDictionaryCreate(v37, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      if (!v42)
                      {
                        uint64_t v9 = FigSignalErrorAt();
                        if (v9) {
                          goto LABEL_99;
                        }
                        break;
                      }
                      CFDictionaryRef v43 = v42;
                      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), v42);
                      CFRelease(v43);
                    }
                  }
                }
              }
            }
          }
          else
          {
            *(void *)(DerivedStorage + 128) = 0;
          }
          CFMutableArrayRef v48 = CFArrayCreateMutable(allocator, capacity, MEMORY[0x1E4F1D510]);
          *long long v70 = v48;
          if (v48 && (CFMutableArrayRef v49 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]), (*v68 = v49) != 0))
          {
            if (capacity >= 1)
            {
              for (CFIndex j = 0; j != capacity; ++j)
              {
                LODWORD(keys) = 0;
                uint64_t v51 = CFArrayGetValueAtIndex(v67, j);
                CodecCFStringRef String = (const __CFString *)FigAlternateGetCodecString((uint64_t)v51);
                FigAlternateGetPeakBitRate((uint64_t)v51);
                if (CodecString)
                {
                  if (FigMediaValidatorValidateRFC4281CodecsForStreaming(CodecString, 0, &keys)) {
                    continue;
                  }
                  int IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)v51);
                  BOOL v54 = (keys & 3) == 1 && IsIFrameOnly == 0;
                  if (v54 || (keys & 4) != 0) {
                    continue;
                  }
                }
                if (FigAlternateIsIFrameOnly((uint64_t)v51)) {
                  double v56 = (CFMutableArrayRef *)(DerivedStorage + 120);
                }
                else {
                  double v56 = (CFMutableArrayRef *)(DerivedStorage + 112);
                }
                CFArrayAppendValue(*v56, v51);
              }
            }
            CFArrayRef v57 = *(const __CFArray **)(DerivedStorage + 112);
            v80.length = CFArrayGetCount(v57);
            v80.CFIndex location = 0;
            CFArraySortValues(v57, v80, (CFComparatorFunction)saig_AlternatesComparator, 0);
            CFArrayRef v58 = *(const __CFArray **)(DerivedStorage + 120);
            v81.length = CFArrayGetCount(v58);
            v81.CFIndex location = 0;
            CFArraySortValues(v58, v81, (CFComparatorFunction)saig_AlternatesComparator, 0);
            if (*(void *)(DerivedStorage + 96) && CFArrayGetCount(*v68) > 0 && CFArrayGetCount(*v70) > 0)
            {
              uint64_t v59 = *(void *)(DerivedStorage + 144);
              if (v59)
              {
                if (FigAlternateIsIFrameOnly(v59))
                {
                  v60.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120));
                  CFArrayRef v61 = *(const __CFArray **)(DerivedStorage + 120);
                }
                else
                {
                  v60.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 112));
                  CFArrayRef v61 = *(const __CFArray **)(DerivedStorage + 112);
                }
                v60.CFIndex location = 0;
                if (!CFArrayContainsValue(v61, v60, *(const void **)(DerivedStorage + 144)))
                {
                  saig_tearDownManifoldsAndDeleteTracks(v71);
                  uint64_t v62 = *(const void **)(DerivedStorage + 144);
                  if (v62)
                  {
                    CFRelease(v62);
                    *(void *)(DerivedStorage + 144) = 0;
                  }
                  MEMORY[0x19970E910](*(void *)(DerivedStorage + 568));
                  uint64_t v63 = *(const void **)(DerivedStorage + 560);
                  if (v63)
                  {
                    CFRelease(v63);
                    *(void *)(DerivedStorage + 560) = 0;
                  }
                  MEMORY[0x19970E930](*(void *)(DerivedStorage + 568));
                }
              }
              uint64_t v64 = CFArrayGetValueAtIndex(*v70, 0);
              if (CFDictionaryContainsKey(theDict, @"FBPAIK_CurrentFigAlternate")
                && *(void *)(DerivedStorage + 144))
              {
                uint64_t v9 = 0;
                goto LABEL_99;
              }
              if (*(_DWORD *)(DerivedStorage + 104) != 3) {
                *(_DWORD *)(DerivedStorage + 104) = 2;
              }
              uint64_t v65 = saig_SetAlternate(v71, v64, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8]);
            }
            else
            {
              uint64_t v65 = FigSignalErrorAt();
            }
            uint64_t v9 = v65;
          }
          else
          {
            uint64_t v9 = 4294954862;
          }
LABEL_99:
          if (theDict) {
            CFRelease(theDict);
          }
          CFTypeRef v1 = (CFTypeRef)v71;
          goto LABEL_102;
        }
        CFRelease(v11);
        *(void *)(DerivedStorage + 144) = 0;
        int v10 = *(_DWORD *)(DerivedStorage + 104);
      }
      if (!v10) {
        *(_DWORD *)(DerivedStorage + 104) = 1;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = 4294954514;
  }
  *(_DWORD *)(DerivedStorage + 352) = 1;
  *(void *)(DerivedStorage + 344) = 1;
  double v44 = *(const void **)(DerivedStorage + 112);
  if (v44)
  {
    CFRelease(v44);
    *(void *)(DerivedStorage + 112) = 0;
  }
  CMTagDataType v45 = *(const void **)(DerivedStorage + 128);
  if (v45)
  {
    CFRelease(v45);
    *(void *)(DerivedStorage + 128) = 0;
  }
  BOOL v46 = *(const void **)(DerivedStorage + 120);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(DerivedStorage + 120) = 0;
  }
  CMTag v47 = *(const void **)(DerivedStorage + 144);
  if (v47)
  {
    CFRelease(v47);
    *(void *)(DerivedStorage + 144) = 0;
  }
LABEL_102:
  saig_HandleError((uint64_t)v1, v9);
  if (v1) {
    CFRelease(v1);
  }
LABEL_104:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

void saig_tearDownManifoldsAndDeleteTracks(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 320);
  if (v3)
  {
    do
    {
      uint64_t v4 = *(void *)(v3 + 8);
      saig_deleteTrack(a1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = 0;
  uint64_t v6 = DerivedStorage + 176;
  do
  {
    if (*(void *)(v6 + v5))
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      uint64_t FigBaseObject = FigManifoldGetFigBaseObject(*(void *)(v6 + v5));
      if (FigBaseObject)
      {
        uint64_t v8 = FigBaseObject;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void (**)(uint64_t))(v10 + 24);
        if (v11) {
          v11(v8);
        }
      }
      uint64_t v12 = *(const void **)(v6 + v5);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(v6 + v5) = 0;
      }
    }
    v5 += 8;
  }
  while (v5 != 24);
}

uint64_t saig_HandleError(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *(_DWORD *)(DerivedStorage + 88) = a2;
    FigSemaphoreSignal();
  }
  return a2;
}

uint64_t saig_AlternatesComparator(uint64_t a1, uint64_t a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  int v4 = FigAlternateGetPeakBitRate(a2);
  uint64_t v5 = 1;
  uint64_t v6 = -1;
  uint64_t v7 = 1;
  if (PeakBitRate <= v4) {
    uint64_t v7 = -1;
  }
  if (v4) {
    uint64_t v6 = v7;
  }
  if (PeakBitRate) {
    uint64_t v5 = v6;
  }
  if (PeakBitRate == v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t saig_SetAlternate(uint64_t a1, const void *a2, long long *a3, long long *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  long long v35 = *a4;
  uint64_t v36 = *((void *)a4 + 2);
  long long v37 = *MEMORY[0x1E4F1F9F8];
  uint64_t v38 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v39 = v37;
  uint64_t v40 = v38;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)(DerivedStorage + 96);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = *(void *)(DerivedStorage + 136);
  long long v28 = *a3;
  uint64_t v29 = *((void *)a3 + 2);
  long long v26 = *a4;
  uint64_t v27 = *((void *)a4 + 2);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned __int16 v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void, void, uint64_t, long long *, long long *, long long *, char *, uint64_t *, uint64_t))(v12 + 32);
  if (!v13) {
    return 4294954514;
  }
  long long v33 = v28;
  uint64_t v34 = v29;
  long long v31 = v26;
  uint64_t v32 = v27;
  uint64_t result = v13(v8, a2, v10, 0, 0, 1, &v33, &v31, &v35, (char *)&v30 + 4, &v30, v9 + 536);
  if (result) {
    return result;
  }
  uint64_t v15 = (BYTE4(v30) & 3) - 1;
  if (v15 <= 2)
  {
    uint64_t v16 = qword_194996440[v15];
    uint64_t v17 = qword_194996458[(int)v15];
    *(void *)(v9 + 344) = v16;
    *(void *)(v9 + 360) = v17;
  }
  CFTypeRef v18 = *(const void **)(v9 + 144);
  *(void *)(v9 + 144) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (HIDWORD(v30) == *(_DWORD *)(v9 + 352)) {
    return 0;
  }
  uint64_t v19 = 0;
  uint64_t v20 = v9 + 176;
  do
  {
    if (((HIDWORD(v30) >> v19) & 1) == 0)
    {
      uint64_t v21 = *(void *)(v20 + 8 * v19);
      if (v21)
      {
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        CFArrayRef v24 = *(void (**)(uint64_t, void))(v23 + 16);
        if (v24) {
          v24(v21, 0);
        }
        FigStopForwardingMediaServicesProcessDeathNotification();
        BOOL v25 = *(const void **)(v20 + 8 * v19);
        if (v25)
        {
          CFRelease(v25);
          *(void *)(v20 + 8 * v19) = 0;
        }
      }
    }
    ++v19;
  }
  while (v19 != 3);
  uint64_t result = 0;
  *(_DWORD *)(v9 + 352) = HIDWORD(v30);
  return result;
}

void saig_deleteTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(a2 + 144))
  {
    uint64_t v4 = *(void *)(a2 + 40);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 24);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v7 = v6 ? v6 : 0;
      uint64_t v8 = *(void (**)(uint64_t, uint64_t, void, void))(v7 + 32);
      if (v8) {
        v8(v4, v5, 0, 0);
      }
    }
    *(unsigned char *)(a2 + 144) = 1;
  }
  saig_ReleaseRenderPipelineForTrack(a2);
  uint64_t v9 = *(void *)(DerivedStorage + 320);
  if (v9 == a2)
  {
    uint64_t v12 = DerivedStorage + 320;
    uint64_t v18 = *(void *)(a2 + 8);
    *(void *)(DerivedStorage + 320) = v18;
    if (!v18) {
LABEL_12:
    }
      *(void *)(DerivedStorage + 328) = v12;
  }
  else
  {
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != a2);
    uint64_t v11 = *(void *)(a2 + 8);
    *(void *)(v10 + 8) = v11;
    uint64_t v12 = v10 + 8;
    if (!v11) {
      goto LABEL_12;
    }
  }
  unsigned __int16 v13 = *(const void **)(a2 + 40);
  if (v13)
  {
    *(void *)(a2 + 40) = 0;
    CFRelease(v13);
  }
  long long v14 = *(const void **)(a2 + 56);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a2 + 56) = 0;
  }
  uint64_t v15 = *(const void **)(a2 + 152);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a2 + 152) = 0;
  }
  uint64_t v16 = *(const void **)(a2 + 208);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a2 + 208) = 0;
  }
  uint64_t v17 = *(const void **)(a2 + 32);
  if (v17) {
    CFRelease(v17);
  }

  free((void *)a2);
}

void saig_ReleaseRenderPipelineForTrack(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  if (*(void *)(a1 + 192))
  {
    FigBufferQueueRelease();
    *(void *)(a1 + 192) = 0;
  }
  if (*(void *)(a1 + 184))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a1 + 184));
    uint64_t v3 = *(void **)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    if (*v4 >= 2uLL)
    {
      uint64_t v5 = (void (*)(uint64_t))v4[8];
      if (v5) {
        v5(FigBaseObject);
      }
    }
    uint64_t v6 = FigRenderPipelineGetFigBaseObject(*(void *)(a1 + 184));
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v9 = v8 ? v8 : 0;
      uint64_t v10 = *(void (**)(uint64_t))(v9 + 24);
      if (v10) {
        v10(v7);
      }
    }
    CFRelease(*(CFTypeRef *)(a1 + 184));
    *(void *)(a1 + 184) = 0;
  }
  uint64_t v11 = *(const void **)(a1 + 216);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 216) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 224);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 224) = 0;
  }
}

uint64_t saig_handleRenderPipelineDecodeErrorNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  FAIGCommon_handleRenderPipelineDecodeErrorNotification(a1, a2, a3, a4, a5);

  return FigSemaphoreSignal();
}

uint64_t saig_RequestCGImageAtTimeAsync(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = 0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_18;
  }
  int v8 = *(_DWORD *)(DerivedStorage + 552) + 1;
  *(_DWORD *)(DerivedStorage + 552) = v8;
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  uint64_t v9 = FAIGCommon_createImageRequest(&v16, a3, a4, v8, &v18);
  if (v9)
  {
LABEL_18:
    uint64_t v12 = v9;
    goto LABEL_16;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  uint64_t v10 = 0;
  *(void *)uint64_t v18 = 0;
  **(void **)(DerivedStorage + 48) = v18;
  *(void *)(DerivedStorage + 48) = v18;
  int v11 = *(unsigned __int8 *)(DerivedStorage + 56);
  if (!*(unsigned char *)(DerivedStorage + 56))
  {
    *(unsigned char *)(DerivedStorage + 56) = 1;
    uint64_t v10 = *(void *)(DerivedStorage + 80);
    if (v10) {
      *(void *)(DerivedStorage + 80) = 0;
    }
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  FigSemaphoreSignal();
  if (v10) {
    FigThreadJoin();
  }
  if (v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)&long long v16 = @"com.apple.coremedia.streamimagegenerator.processimagerequest";
    CFDictionaryRef v13 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&v16, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v12 = FigThreadCreate();
    if (v13) {
      CFRelease(v13);
    }
    if (v12)
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
      *(unsigned char *)(DerivedStorage + 56) = 0;
      uint64_t v14 = **(void **)(DerivedStorage + 40);
      *(void *)(DerivedStorage + 40) = v14;
      if (!v14) {
        *(void *)(DerivedStorage + 48) = DerivedStorage + 40;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
      FAIGCommon_releaseImageRequest(v18);
    }
  }
LABEL_16:
  FigRetainProxyUnlockMutex();
  return v12;
}

uint64_t saig_CancelAllCGImageAsyncRequests()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v1 = FigSignalErrorAt();
  }
  else
  {
    saig_CancelAllRequests(DerivedStorage);
    if (*(void *)(DerivedStorage + 624)) {
      FigSemaphoreSignal();
    }
    uint64_t v1 = 0;
  }
  FigRetainProxyUnlockMutex();
  return v1;
}

uint64_t saig_processImageRequestThread(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v48 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v52.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v47 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v52.CMTimeEpoch epoch = v47;
  uint64_t valuePtr = -1;
  if (FigSemaphoreWaitRelative() != -12792)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v49 = a1;
    while (1)
    {
      if (FigRetainProxyIsInvalidated()) {
        goto LABEL_2;
      }
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
      uint64_t valuePtr = 9000000000;
      uint64_t v5 = *(void *)(DerivedStorage + 40);
      if (!v5)
      {
        *(unsigned char *)(DerivedStorage + 56) = 0;
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
        return 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
      CFDictionaryRef v6 = *(const __CFDictionary **)(v5 + 40);
      if (v6)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"TimeoutInterval");
        if (Value)
        {
          CFNumberRef v8 = Value;
          CFTypeID v9 = CFGetTypeID(Value);
          if (v9 == CFNumberGetTypeID()) {
            CFNumberGetValue(v8, kCFNumberSInt64Type, &valuePtr);
          }
        }
        uint64_t v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 40), @"RequestID");
        int v11 = v10;
        if (v10) {
          CFRetain(v10);
        }
      }
      else
      {
        int v11 = 0;
      }
      if (!*(unsigned char *)(v5 + 8) && !FigRetainProxyIsInvalidated()) {
        break;
      }
      uint64_t v12 = 0;
      int v13 = -12432;
LABEL_17:
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
      uint64_t v14 = **(void **)(DerivedStorage + 40);
      *(void *)(DerivedStorage + 40) = v14;
      if (!v14) {
        *(void *)(DerivedStorage + 48) = DerivedStorage + 40;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
      FAIGCommon_releaseImageRequest((void *)v5);
      CMTime imageOut = v52;
      int v54 = v13;
      keys[0] = 0;
      keys[1] = 0;
      uint64_t v58 = 0;
      values[0] = 0;
      values[1] = 0;
      uint64_t v56 = 0;
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      if (v13)
      {
        keys[0] = @"Result";
        values[0] = CFNumberCreate(v4, kCFNumberSInt32Type, &v54);
        CFIndex v16 = 1;
        uint64_t v17 = kFigAssetImageGeneratorNotification_FailedToGenerateCGImage;
      }
      else
      {
        if (v12)
        {
          keys[0] = @"CGImage";
          values[0] = (void *)CFRetain(v12);
          uint64_t v18 = 1;
        }
        else
        {
          uint64_t v18 = 0;
        }
        keys[v18] = @"FigTime";
        CMTime time = imageOut;
        values[v18] = CMTimeCopyAsDictionary(&time, v4);
        CFIndex v16 = v18 + 1;
        uint64_t v17 = kFigAssetImageGeneratorNotification_DidGenerateCGImage;
      }
      uint64_t v23 = *v17;
      if (v11)
      {
        keys[v16] = @"RequestID";
        values[v16++] = (void *)CFRetain(v11);
      }
      CFDictionaryRef v24 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, v16, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v24)
      {
        CFDictionaryRef v25 = v24;
        uint64_t v26 = MEMORY[0x19970C720](v15 + 640);
        if (v26)
        {
          uint64_t v27 = (const void *)v26;
          long long v28 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00406B48E91AuLL);
          if (v28)
          {
            uint64_t v29 = v28;
            if (v23) {
              CFTypeRef v30 = CFRetain(v23);
            }
            else {
              CFTypeRef v30 = 0;
            }
            v29[1] = v30;
            v29[2] = CFRetain(v25);
            *uint64_t v29 = v27;
            dispatch_async_f((dispatch_queue_t)sSAIGNotificationQueue, v29, (dispatch_function_t)saig_postNotificationAsynchronously);
          }
          else
          {
            CFRelease(v27);
          }
        }
        CFRelease(v25);
      }
      unint64_t v31 = 0;
      uint64_t v32 = 8 * v16;
      do
      {
        long long v33 = values[v31 / 8];
        if (v33)
        {
          CFRelease(v33);
          values[v31 / 8] = 0;
        }
        v31 += 8;
      }
      while (v32 != v31);
      if (v12) {
        CFRelease(v12);
      }
      if (v11) {
        CFRelease(v11);
      }
      *(_OWORD *)&v52.CMTimeValue value = v48;
      v52.CMTimeEpoch epoch = v47;
      if (FigSemaphoreWaitRelative() == -12792) {
        goto LABEL_2;
      }
    }
    CMBaseObjectGetDerivedStorage();
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      int v22 = -12785;
      goto LABEL_79;
    }
    if (*(void *)(v19 + 624))
    {
      int PumpReady = FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(v19 + 88) = 0;
      *(void *)(v19 + 624) = v5;
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(v20 + 9))
      {
        if (*(unsigned char *)(v20 + 9) != 1) {
          goto LABEL_56;
        }
        int PumpReady = saig_RequestAnImageFromPump(v49, *(void *)(v19 + 624));
      }
      else
      {
        uint64_t v21 = v20;
        if (!*(unsigned char *)(v20 + 108))
        {
          FigRetainProxyRetain();
          uint64_t v36 = *(void *)(v21 + 24);
          uint64_t v46 = *(void *)v21;
          uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v37) {
            uint64_t v38 = v37;
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v40 = *(uint64_t (**)(uint64_t, void, uint64_t))(v38 + 72);
          if (v40)
          {
            int v22 = v40(v36, saig_PumpTransferCallback, v46);
            if (!v22)
            {
              *(_DWORD *)(v21 + 104) = 0;
              *(unsigned char *)(v21 + 108) = 1;
              goto LABEL_56;
            }
          }
          else
          {
            int v22 = -12782;
          }
          FigRetainProxyRelease();
          goto LABEL_79;
        }
        if (*(_DWORD *)(v20 + 104))
        {
          if (!*(void *)(v20 + 144))
          {
            int v22 = -12436;
LABEL_79:
            *(void *)(v19 + 624) = 0;
            FigRetainProxyUnlockMutex();
            uint64_t v12 = 0;
LABEL_80:
            if (FigRetainProxyIsInvalidated())
            {
              int v13 = 0;
            }
            else if (*(unsigned char *)(v5 + 8))
            {
              int v13 = -12432;
            }
            else
            {
              int v13 = v22;
            }
            goto LABEL_17;
          }
LABEL_56:
          FigRetainProxyUnlockMutex();
          int v22 = FigSemaphoreWaitRelative();
          uint64_t v35 = CMBaseObjectGetDerivedStorage();
          time.CMTimeValue value = 0;
          imageOut.CMTimeValue value = 0;
          FigRetainProxyLockMutex();
          if (FigRetainProxyIsInvalidated())
          {
            uint64_t v12 = 0;
            int v22 = -12785;
            goto LABEL_71;
          }
          if (v22)
          {
            saig_CleanVideoRendersAndVisualContext();
            if (!*(unsigned char *)(v35 + 9))
            {
              saig_tearDownManifoldsAndDeleteTracks(v49);
              long long v39 = *(const void **)(v35 + 144);
              if (v39)
              {
                CFRelease(v39);
                *(void *)(v35 + 144) = 0;
              }
              uint64_t v12 = 0;
              *(_DWORD *)(v35 + 104) = 0;
              goto LABEL_71;
            }
            goto LABEL_59;
          }
          if (*(unsigned char *)(v5 + 8))
          {
            if (*(unsigned char *)(v35 + 9)) {
              saig_CleanVideoRendersAndVisualContext();
            }
            uint64_t v12 = 0;
            int v22 = -12432;
            goto LABEL_71;
          }
          int v22 = *(_DWORD *)(v35 + 608);
          if (!v22)
          {
            int v22 = *(_DWORD *)(v35 + 88);
            if (!v22)
            {
              MEMORY[0x19970E910](*(void *)(v35 + 568));
              uint64_t v41 = *(void *)(v35 + 560);
              if (v41)
              {
                uint64_t v56 = *(void *)(v35 + 600);
                *(_OWORD *)values = *(_OWORD *)(v35 + 584);
                uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v42) {
                  uint64_t v43 = v42;
                }
                else {
                  uint64_t v43 = 0;
                }
                double v44 = *(uint64_t (**)(uint64_t, const __CFAllocator *, void **, uint64_t, CMTime *, void, void))(v43 + 48);
                if (!v44)
                {
                  MEMORY[0x19970E930](*(void *)(v35 + 568));
                  uint64_t v12 = 0;
                  int v22 = -12782;
                  goto LABEL_71;
                }
                *(_OWORD *)keys = *(_OWORD *)values;
                uint64_t v58 = v56;
                int v22 = v44(v41, v4, keys, 3, &time, 0, 0);
                MEMORY[0x19970E930](*(void *)(v35 + 568));
                if (v22) {
                  goto LABEL_59;
                }
                if (time.value)
                {
                  int CGImageFromPixelBufferWithDynamicRangeConversion = FigCreateCGImageFromPixelBufferWithDynamicRangeConversion((CVPixelBufferRef)time.value, 0, 0, (CGImageRef *)&imageOut);
                  if (!CGImageFromPixelBufferWithDynamicRangeConversion)
                  {
                    uint64_t v12 = (const void *)imageOut.value;
                    if (imageOut.value)
                    {
                      int v22 = 0;
                      CMTime v52 = *(CMTime *)(v35 + 584);
                      imageOut.CMTimeValue value = 0;
                    }
                    else
                    {
                      int v22 = -12434;
                    }
LABEL_71:
                    *(void *)(v35 + 624) = 0;
                    *(_DWORD *)(v35 + 88) = 0;
                    FigRetainProxyUnlockMutex();
                    if (time.value) {
                      CFRelease((CFTypeRef)time.value);
                    }
                    goto LABEL_80;
                  }
                  int v22 = CGImageFromPixelBufferWithDynamicRangeConversion;
                  goto LABEL_59;
                }
              }
              else
              {
                MEMORY[0x19970E930](*(void *)(v35 + 568));
              }
              uint64_t v12 = 0;
              int v22 = -12431;
              goto LABEL_71;
            }
          }
LABEL_59:
          uint64_t v12 = 0;
          goto LABEL_71;
        }
        if (!*(void *)(v20 + 96)) {
          goto LABEL_56;
        }
        int PumpReady = saig_GetPumpReady();
      }
    }
    int v22 = PumpReady;
    if (PumpReady) {
      goto LABEL_79;
    }
    goto LABEL_56;
  }
LABEL_2:
  *(unsigned char *)(DerivedStorage + 56) = 0;
  return 0;
}

uint64_t saig_RequestAnImageFromPump(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int valuePtr = 0;
  CMTime v51 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  CMTime v50 = v51;
  memset(&v49, 0, sizeof(v49));
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  lhs.CMTimeValue value = 0;
  rhs.CMTimeValue value = 0;
  CFArrayRef v6 = *(const __CFArray **)(v5 + 120);
  if (!v6 || !a2 || (CFIndex Count = CFArrayGetCount(v6), Count <= 0))
  {
    uint64_t v25 = FigSignalErrorAt();
    goto LABEL_40;
  }
  CFIndex v8 = Count;
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  uint64_t v9 = *(void *)(v5 + 144);
  BOOL v10 = v9 && FigAlternateIsIFrameOnly(v9);
  CMTimeValue value = rhs.value;
  if (*(double *)&lhs.value == *(double *)(v5 + 152) && *(double *)&rhs.value == *(double *)(v5 + 160))
  {
    if (v10) {
      goto LABEL_41;
    }
  }
  else
  {
    *(void *)(v5 + 152) = lhs.value;
    *(void *)(v5 + 160) = value;
  }
  uint64_t v12 = 0;
  CFIndex v13 = 0;
  double v14 = *MEMORY[0x1E4F1DB30];
  double v15 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  double v16 = 0.0;
  double v17 = 0.0;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 120), v13);
    double Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
    if (Resolution != v14 || v20 != v15)
    {
      if (!v12) {
        goto LABEL_23;
      }
      double v22 = v20 * Resolution;
      double v23 = v16 * v17;
      if (v20 * Resolution <= *(double *)&lhs.value * *(double *)&rhs.value)
      {
        if (v22 > v23) {
          goto LABEL_23;
        }
      }
      else if (v22 < v23 || v23 < *(double *)&lhs.value * *(double *)&rhs.value)
      {
LABEL_23:
        double v17 = Resolution;
        double v16 = v20;
        uint64_t v12 = ValueAtIndex;
      }
    }
    ++v13;
  }
  while (v8 != v13);
  if (v12 || (uint64_t v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 120), 0)) != 0) {
    CFRetain(v12);
  }
  CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    uint64_t v25 = 0;
    if (!v12) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  DescriptionCFStringRef String = (const void *)FigAlternateCreateDescriptionString(v12);
  saig_tearDownManifoldsAndDeleteTracks(a1);
  uint64_t v25 = saig_SetAlternate(a1, v12, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8]);
  if (v25)
  {
    FigSignalErrorAt();
    if (DescriptionString) {
LABEL_36:
    }
      CFRelease(DescriptionString);
  }
  else if (DescriptionString)
  {
    goto LABEL_36;
  }
  if (!v25)
  {
    if (!v12) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v25 = FigSignalErrorAt();
  if (v12) {
LABEL_39:
  }
    CFRelease(v12);
LABEL_40:
  if (!v25)
  {
LABEL_41:
    CFDictionaryRef v27 = *(const __CFDictionary **)(a2 + 40);
    if (v27)
    {
      CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v27, @"TimeFlags");
      if (v28)
      {
        CFNumberRef v29 = v28;
        CFTypeID v30 = CFGetTypeID(v28);
        if (v30 == CFNumberGetTypeID()) {
          CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
        }
      }
      CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 40), @"TimeToleranceBefore");
      if (v31)
      {
        CFDictionaryRef v32 = v31;
        CFTypeID v33 = CFGetTypeID(v31);
        if (v33 == CFDictionaryGetTypeID()) {
          CMTimeMakeFromDictionary(&v51, v32);
        }
      }
      CFDictionaryRef v34 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 40), @"TimeToleranceAfter");
      if (v34)
      {
        CFDictionaryRef v35 = v34;
        CFTypeID v36 = CFGetTypeID(v34);
        if (v36 == CFDictionaryGetTypeID()) {
          CMTimeMakeFromDictionary(&v50, v35);
        }
      }
    }
    if ((valuePtr - 1) > 4) {
      uint64_t v37 = 2;
    }
    else {
      uint64_t v37 = dword_194996470[valuePtr - 1];
    }
    uint64_t v38 = (CMTime *)(a2 + 12);
    CMTime lhs = *(CMTime *)(a2 + 12);
    CMTime rhs = *(CMTime *)(DerivedStorage + 392);
    CMTimeAdd(&v49, &lhs, &rhs);
    CMTime lhs = v49;
    long long v45 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&rhs.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v39 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    rhs.CMTimeEpoch epoch = v39;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      *(_OWORD *)&v49.CMTimeValue value = v45;
      v49.CMTimeEpoch epoch = v39;
    }
    uint64_t v40 = *(void *)(DerivedStorage + 96);
    CMTime lhs = *v38;
    CMTime rhs = v51;
    CMTimeSubtract(&v48, &lhs, &rhs);
    CMTime lhs = *v38;
    CMTime rhs = v50;
    CMTimeAdd(&v47, &lhs, &rhs);
    CMTime v46 = v49;
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, CMTime *, uint64_t))(v42 + 104);
    if (v43)
    {
      CMTime lhs = v46;
      CMTime rhs = v48;
      CMTime v53 = v47;
      return v43(v40, &lhs, v37, &rhs, &v53, DerivedStorage + 536);
    }
    else
    {
      return 4294954514;
    }
  }
  return v25;
}

uint64_t saig_PumpTransferCallback(int a1, const void *a2, CFErrorRef err)
{
  if (err) {
    CFIndex Code = CFErrorGetCode(err);
  }
  else {
    CFIndex Code = 0;
  }
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_25;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v6 = CFRetain(Owner);
  }
  else {
    CFTypeRef v6 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!Code)
  {
    if (a2)
    {
      CFIndex v8 = (uint64_t *)DerivedStorage;
      CFTypeRef v9 = FigBytePumpRetain(a2);
      v8[12] = (uint64_t)v9;
      FigBytePumpGetFigBaseObject(v9);
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      double v14 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v13 + 56);
      if (!v14)
      {
LABEL_22:
        CFIndex Code = 4294954514;
        goto LABEL_23;
      }
      uint64_t PumpReady = v14(v11, 0x1EE53EA38, @"SAIGenerator");
      if (!PumpReady)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        uint64_t v16 = v8[12];
        uint64_t v17 = *v8;
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        double v20 = *(uint64_t (**)(uint64_t, uint64_t (*)(int, int, void *, unsigned int, unsigned int, int, uint64_t, long long *, uint64_t, uint64_t, uint64_t, CFErrorRef), void, uint64_t))(v19 + 88);
        if (v20)
        {
          uint64_t PumpReady = v20(v16, saig_BytePumpFn, 0, v17);
          if (!PumpReady) {
            uint64_t PumpReady = saig_GetPumpReady();
          }
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t PumpReady = FigSignalErrorAt();
    }
LABEL_21:
    CFIndex Code = PumpReady;
  }
LABEL_23:
  saig_HandleError((uint64_t)v6, Code);
  if (v6) {
    CFRelease(v6);
  }
LABEL_25:
  FigRetainProxyUnlockMutex();

  return FigRetainProxyRelease();
}

uint64_t saig_GetPumpReady()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v47 = 0;
  CFTypeRef v48 = 0;
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  v52[0] = 0;
  char v51 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v50 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v1 + 24));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v5 + 48);
  if (!v6
    || v6(CMBaseObject, @"assetProperty_CreationOptionsDictionary", v2, v52)
    || ((v7 = FigAssetGetCMBaseObject(*(void *)(v1 + 24)), (uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v9 = 0)
      : (uint64_t v9 = v8),
        (uint64_t v10 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v9 + 48)) == 0
     || v10(v7, @"assetProperty_OriginalNetworkContentURL", v2, &v50)))
  {
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      URLCFNumberRef Value = (const void *)FigCFDictionaryGetURLValue();
      FigCFDictionaryGetBooleanIfPresent();
      if (v51)
      {
        if (URLValue)
        {
          CFDictionarySetValue(Mutable, @"FSC_DiskCacheRepositoryURL", URLValue);
          CFDictionarySetValue(Mutable, @"FSC_Backing", @"FSC_DiskBacking");
          CFDictionarySetValue(Mutable, @"FSC_ClientName", @"imagegen");
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          if (!FigStreamingCacheCreate(v2, (const __CFURL *)v50, Mutable, (uint64_t *)&cf))
          {
            uint64_t v13 = *(void *)(v1 + 96);
            CFTypeRef v14 = cf;
            FigBytePumpGetFigBaseObject(v13);
            uint64_t v16 = v15;
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v18 = v17 ? v17 : 0;
            CMTimeEpoch v39 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v18 + 56);
            if (v39) {
              v39(v16, 0x1EE53E498, v14);
            }
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v52[0]) {
    CFRelease(v52[0]);
  }
  if (v50) {
    CFRelease(v50);
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 96));
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  double v23 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v22 + 48);
  if (v23 && v23(v20, 0x1EE53E2B8, v2, &v48) == -12783)
  {
    *(_DWORD *)(DerivedStorage + 104) = 0;
    uint64_t v24 = *(void *)(DerivedStorage + 96);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v37 = *(uint64_t (**)(uint64_t))(v26 + 64);
    if (v37)
    {
      uint64_t v33 = v37(v24);
      if (v33) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
LABEL_66:
    uint64_t v33 = 4294954514;
    goto LABEL_49;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 96));
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  CFDictionaryRef v31 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v30 + 48);
  if (!v31)
  {
    uint64_t v33 = 4294954514;
    goto LABEL_48;
  }
  uint64_t v32 = v31(v28, @"FBP_Duration", v2, &v47);
  if (v32 == -12783)
  {
    *(_DWORD *)(DerivedStorage + 104) = 1;
    saig_AlternateListChanged();
    goto LABEL_44;
  }
  uint64_t v33 = v32;
  if (v32) {
    goto LABEL_48;
  }
  *(_DWORD *)(DerivedStorage + 104) = 3;
  saig_AlternateListChanged();
  if (!*(void *)(DerivedStorage + 144))
  {
LABEL_44:
    uint64_t v33 = 0;
    goto LABEL_48;
  }
  uint64_t v34 = *(void *)(DerivedStorage + 96);
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v40 = *(uint64_t (**)(uint64_t, float))(v36 + 96);
  if (!v40) {
    goto LABEL_66;
  }
  uint64_t v41 = v40(v34, 1.0);
  if (!v41)
  {
    uint64_t v42 = *(void *)(DerivedStorage + 96);
    uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v43) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    long long v45 = *(uint64_t (**)(uint64_t, CFTypeRef *, void, void, void, uint64_t, void))(v44 + 72);
    if (!v45) {
      goto LABEL_66;
    }
    long long v46 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
    *(_OWORD *)CMTime v52 = *MEMORY[0x1E4F1FA20];
    long long v53 = v46;
    long long v54 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
    uint64_t v41 = v45(v42, v52, 0, 0, 0, DerivedStorage + 536, 0);
    uint64_t v33 = 0;
    if (!v41)
    {
LABEL_48:
      if (*(void *)(DerivedStorage + 96)) {
        goto LABEL_49;
      }
      uint64_t v41 = FigSignalErrorAt();
    }
  }
  uint64_t v33 = v41;
LABEL_49:
  if (v48) {
    CFRelease(v48);
  }
  if (v47) {
    CFRelease(v47);
  }
  return v33;
}

uint64_t saig_BytePumpFn(int a1, int a2, void *a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, long long *a8, uint64_t a9, uint64_t a10, uint64_t a11, CFErrorRef err)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (err) {
    uint64_t Code = CFErrorGetCode(err);
  }
  else {
    uint64_t Code = 0;
  }
  CMTimeValue v89 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v90 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_89;
  }
  uint64_t v79 = a7;
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v20 = CFRetain(Owner);
  }
  else {
    CFTypeRef v20 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 4 * a5 + 536) != a6) {
    goto LABEL_87;
  }
  uint64_t v22 = DerivedStorage;
  uint64_t v23 = a5;
  BOOL v24 = *(void *)(DerivedStorage + 8 * a5 + 296) != a11;
  int v25 = (v24 & (a4 >> 2)) != 0 ? a4 ^ 4 : a4;
  if (Code) {
    goto LABEL_87;
  }
  CMTimeEpoch v82 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  unsigned int v83 = v25;
  unsigned int v81 = v25 & 0x10;
  if ((v25 & 0x14) == 4)
  {
    uint64_t v26 = DerivedStorage + 8 * a5;
    uint64_t v28 = *(void *)(v26 + 176);
    uint64_t v27 = (CFTypeRef *)(v26 + 176);
    uint64_t v29 = a3;
    if (!v28) {
      goto LABEL_36;
    }
    FigStopForwardingMediaServicesProcessDeathNotification();
    CFTypeRef v30 = *v27;
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v40 = *(void (**)(CFTypeRef, void))(v32 + 16);
    if (v40) {
      v40(v30, 0);
    }
    goto LABEL_34;
  }
  char v33 = v24 | v25;
  uint64_t v29 = a3;
  if (v33 & 1 | ((v25 & 0x10) != 0))
  {
    *(unsigned char *)(DerivedStorage + 548) = 0;
    if (v33)
    {
      uint64_t v34 = CMBaseObjectGetDerivedStorage();
      uint64_t v35 = v34 + 8 * a5;
      uint64_t v37 = *(void *)(v35 + 176);
      uint64_t v27 = (CFTypeRef *)(v35 + 176);
      uint64_t v36 = v37;
      if (v37)
      {
        uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v39 = v38 ? v38 : 0;
        uint64_t v41 = *(void (**)(uint64_t, void))(v39 + 16);
        if (v41) {
          v41(v36, 0);
        }
      }
      uint64_t v42 = *(void *)(v34 + 320);
      if (v42)
      {
        do
        {
          uint64_t v43 = *(void *)(v42 + 8);
          if (*(unsigned __int8 *)(v42 + 92) == a5) {
            saig_deleteTrack((uint64_t)v20, v42);
          }
          uint64_t v42 = v43;
        }
        while (v43);
      }
      uint64_t v44 = v34 + 24 * a5;
      *(_OWORD *)(v44 + 224) = *MEMORY[0x1E4F1F9F8];
      *(void *)(v44 + 240) = v82;
      *(void *)(v34 + 8 * a5 + 296) = a11;
      uint64_t v29 = a3;
      if (*v27)
      {
        FigStopForwardingMediaServicesProcessDeathNotification();
LABEL_34:
        if (*v27)
        {
          CFRelease(*v27);
          *uint64_t v27 = 0;
        }
      }
    }
  }
LABEL_36:
  if ((*(unsigned char *)(v22 + 380) & 1) == 0 && (*((_DWORD *)a8 + 3) & 0x1D) == 1)
  {
    long long v45 = *a8;
    *(void *)(v22 + 384) = *((void *)a8 + 2);
    *(_OWORD *)(v22 + 368) = v45;
  }
  CMTimeEpoch v46 = v82;
  if ((*((_DWORD *)a8 + 3) & 0x1D) == 1)
  {
    long long v47 = *a8;
    uint64_t v48 = v22 + 24 * a5;
    *(void *)(v48 + 480) = *((void *)a8 + 2);
    *(_OWORD *)(v48 + 464) = v47;
  }
  uint64_t v49 = v22 + 8 * a5;
  uint64_t v51 = *(void *)(v49 + 176);
  CFTypeRef v50 = (uint64_t *)(v49 + 176);
  char v52 = v83;
  if (v51)
  {
    if (!v29 && !v83)
    {
      uint64_t Code = 0;
      goto LABEL_87;
    }
    fpfs_prepareDataForInject(v29);
    uint64_t v58 = *v50;
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    CFArrayRef v61 = *(uint64_t (**)(uint64_t, uint64_t, void, void *))(v60 + 8);
    if (v61)
    {
      uint64_t Code = v61(v58, v79, (v83 >> 5) & 2 | (v81 >> 4), v29);
      if (!Code)
      {
LABEL_80:
        if ((v52 & 0x20) != 0)
        {
          uint64_t v74 = *v50;
          if (*v50)
          {
            uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v76 = v75 ? v75 : 0;
            long long v77 = *(void (**)(uint64_t))(v76 + 40);
            if (v77) {
              v77(v74);
            }
          }
        }
      }
    }
    else
    {
      uint64_t Code = 4294954514;
    }
  }
  else
  {
    if (!v29)
    {
      uint64_t Code = ((int)(v83 << 30) >> 31) & 0xFFFFCF71;
      goto LABEL_80;
    }
    uint64_t v53 = v22 + 8 * v23;
    uint64_t v56 = *(OpaqueCMBlockBuffer **)(v53 + 200);
    unint64_t v55 = (const void **)(v53 + 200);
    long long v54 = v56;
    CFRange v80 = v55;
    if (v56)
    {
      uint64_t appended = CMBlockBufferAppendBufferReference(v54, (CMBlockBufferRef)v29, 0, 0, 0);
      if (appended)
      {
        uint64_t Code = appended;
        goto LABEL_87;
      }
    }
    else
    {
      *unint64_t v55 = CFRetain(v29);
    }
    uint64_t v62 = *(void *)(v22 + 320);
    if (v62)
    {
      CMTimeFlags v63 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
      do
      {
        if (*(void *)(v62 + 48) == a11)
        {
          CMTime lhs = *(CMTime *)(v62 + 120);
          CMTime rhs = *(CMTime *)(v62 + 64);
          CMTimeSubtract(&time1, &lhs, &rhs);
          CMTimeValue value = time1.value;
          CMTimeFlags flags = time1.flags;
          CMTimeScale timescale = time1.timescale;
          if ((time1.flags & 0x1D) == 1)
          {
            CMTimeEpoch epoch = time1.epoch;
            if ((v63 & 1) == 0
              || (time1.CMTimeValue value = value,
                  time1.CMTimeScale timescale = timescale,
                  lhs.CMTimeValue value = v89,
                  lhs.CMTimeScale timescale = v90,
                  lhs.CMTimeFlags flags = v63,
                  lhs.CMTimeEpoch epoch = v46,
                  CMTimeCompare(&time1, &lhs) >= 1))
            {
              CMTimeValue v89 = value;
              CMTimeScale v90 = timescale;
              CMTimeFlags v63 = flags;
              CMTimeEpoch v46 = epoch;
            }
          }
        }
        uint64_t v62 = *(void *)(v62 + 8);
      }
      while (v62);
    }
    int v66 = (OpaqueCMBlockBuffer *)*v80;
    uint64_t v67 = CMBaseObjectGetDerivedStorage();
    CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    FigManifoldFactoryCreateManifold(0, v66, 0, &time1, 0, (uint64_t)saig_NewTrackNote, 0, 0, 0, 28, (uint64_t)v20, (void *)(v67 + 8 * v23 + 176));
    uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification();
    if (started != -16044)
    {
      uint64_t Code = started;
      char v52 = v83;
      if (!started)
      {
        fpfs_prepareDataForInject(*v80);
        uint64_t v69 = *v50;
        long long v70 = *v80;
        uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v72 = v71 ? v71 : 0;
        CFIndex v73 = *(uint64_t (**)(uint64_t, void, void, const void *))(v72 + 8);
        uint64_t Code = v73 ? v73(v69, 0, (v83 >> 5) & 2 | (v81 >> 4), v70) : 4294954514;
        if (*v80)
        {
          CFRelease(*v80);
          *CFRange v80 = 0;
        }
      }
      if (Code) {
        goto LABEL_87;
      }
      goto LABEL_80;
    }
    char v52 = v83;
    if (CMBlockBufferGetDataLength((CMBlockBufferRef)*v80) <= 0x20000)
    {
      uint64_t Code = 0;
      goto LABEL_80;
    }
    uint64_t Code = 4294951252;
  }
LABEL_87:
  saig_HandleError((uint64_t)v20, Code);
  if (v20) {
    CFRelease(v20);
  }
LABEL_89:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t saig_NewTrackNote(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = 0;
  while (*(const void **)(DerivedStorage + 176 + 8 * v10) != a1)
  {
    if (++v10 == 3)
    {
      unsigned int v11 = 3;
      goto LABEL_6;
    }
  }
  unsigned int v11 = v10;
LABEL_6:
  int v12 = 1;
  if (a3 <= 1935832171)
  {
    if (a3 == 1668047728 || a3 == 1835365473) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (a3 == 1935832172)
  {
    int v12 = 4;
    goto LABEL_15;
  }
  if (a3 != 1986618469)
  {
    if (a3 == 1936684398)
    {
      int v12 = 2;
      goto LABEL_15;
    }
LABEL_13:
    int v12 = 0;
  }
LABEL_15:
  uint64_t v13 = *(void *)(DerivedStorage + 320);
  int v14 = 1;
  if (!v13) {
    goto LABEL_31;
  }
  uint64_t v15 = (void *)(DerivedStorage + 8 * v11 + 296);
  while (1)
  {
    while (1)
    {
      uint64_t v16 = v13;
      uint64_t v13 = *(void *)(v13 + 8);
      if (*(_DWORD *)(v16 + 28) != a3) {
        goto LABEL_25;
      }
      if (*(const void **)(v16 + 40) == a1) {
        goto LABEL_30;
      }
      if (*(void *)(v16 + 48) != *v15) {
        goto LABEL_25;
      }
      int v17 = *(unsigned __int8 *)(v16 + 92);
      if (v17 == v11) {
        goto LABEL_25;
      }
      int v18 = 1 << v17;
      if (*(_DWORD *)(v16 + 88) == 6) {
        break;
      }
      if (v18 == v12) {
        goto LABEL_30;
      }
      saig_deleteTrack(a2, v16);
      if (!v13)
      {
LABEL_29:
        int v14 = 1;
        goto LABEL_31;
      }
    }
    if (v18 == v12)
    {
      int v19 = *(_DWORD *)(v9 + 352);
      if ((v19 & v18) != 0 && (v19 & v12) != 0) {
        break;
      }
    }
LABEL_25:
    if (!v13) {
      goto LABEL_29;
    }
  }
LABEL_30:
  int v14 = 0;
LABEL_31:
  if (a3 != 1986618469 && (uint64_t v20 = *(void *)(v9 + 144)) != 0 && FigAlternateIsIFrameOnly(v20) || !v14)
  {
    uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v34) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(void (**)(const void *, uint64_t, void, void))(v35 + 32);
    if (v36) {
      v36(a1, a4, 0, 0);
    }
    return 0;
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = (uint64_t *)malloc_type_calloc(1uLL, 0xF0uLL, 0x1060040B7CBE5F1uLL);
  if (!v22)
  {
LABEL_63:
    return FigSignalErrorAt();
  }
  uint64_t v23 = v22;
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  if (CMBufferQueueCreate(v24, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)v23 + 7))
  {
    free(v23);
    goto LABEL_63;
  }
  uint64_t v26 = *(void *)(v21 + 336) + 1;
  *(void *)(v21 + 336) = v26;
  *uint64_t v23 = a2;
  v23[2] = v26;
  *((_DWORD *)v23 + 6) = a4;
  uint64_t v27 = MEMORY[0x1E4F1F9F8];
  long long v41 = *MEMORY[0x1E4F1F9F8];
  *((_OWORD *)v23 + 4) = *MEMORY[0x1E4F1F9F8];
  uint64_t v28 = *(void *)(v27 + 16);
  v23[10] = v28;
  CFTypeRef v29 = CFRetain(a1);
  *((unsigned char *)v23 + 92) = v11;
  uint64_t v30 = *(void *)(v21 + 8 * v11 + 296);
  v23[5] = (uint64_t)v29;
  v23[6] = v30;
  v23[17] = v28;
  *(_OWORD *)(v23 + 15) = v41;
  *((_DWORD *)v23 + 58) = 1065353216;
  *((_DWORD *)v23 + 7) = a3;
  uint64_t v31 = (_OWORD *)MEMORY[0x1E4F1FA48];
  v23[22] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *((_OWORD *)v23 + 10) = *v31;
  v23[25] = -1;
  v23[1] = 0;
  **(void **)(v21 + 328) = v23;
  *(void *)(v21 + 328) = v23 + 1;
  BOOL v32 = 1;
  if (a3 <= 1935832171)
  {
    if (a3 == 1668047728 || a3 == 1835365473) {
      goto LABEL_53;
    }
  }
  else
  {
    switch(a3)
    {
      case 1935832172:
        goto LABEL_53;
      case 1936684398:
        goto LABEL_52;
      case 1986618469:
        uint64_t v33 = *(void *)(v21 + 144);
        if (v33)
        {
          BOOL v32 = FigAlternateIsIFrameOnly(v33) != 0;
          goto LABEL_53;
        }
LABEL_52:
        BOOL v32 = 0;
LABEL_53:
        *((unsigned char *)v23 + 93) = v32;
        break;
    }
  }
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = *(uint64_t (**)(const void *, uint64_t, uint64_t (**)(), uint64_t *))(v39 + 32);
  if (!v40) {
    return 4294954514;
  }

  return v40(a1, a4, kManifoldOutputCallbacks_0, v23);
}

uint64_t saig_FmtDescChangeNote(uint64_t a1, uint64_t a2, uint64_t a3, const opaqueCMFormatDescription *a4, const void *a5)
{
  uint64_t v8 = *(void *)a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *(const opaqueCMFormatDescription **)(a3 + 32);
  if (v10 == a4 && *(const void **)(a3 + 152) == a5) {
    return 0;
  }
  if (v10) {
    return 4294954860;
  }
  if (*(unsigned char *)(a3 + 93))
  {
    BOOL v12 = a5 != 0;
    if (a5 && *(_DWORD *)(a3 + 28) == 1986618469)
    {
      saig_tearDownManifoldsAndDeleteTracks(v8);
      CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 120);
      v22.length = CFArrayGetCount(v13);
      v22.CFIndex location = 0;
      FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v13, v22, *(const void **)(DerivedStorage + 144));
      if (FirstIndexOfValue != -1) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 120), FirstIndexOfValue);
      }
      uint64_t v15 = *(const void **)(DerivedStorage + 144);
      if (v15)
      {
        CFRelease(v15);
        *(void *)(DerivedStorage + 144) = 0;
      }
      return 4294954860;
    }
  }
  else
  {
    BOOL v12 = a5 != 0;
  }
  *(void *)(a3 + 32) = FigFormatDescriptionRetain();
  Mediauint64_t Type = CMFormatDescriptionGetMediaType(a4);
  *(_DWORD *)(a3 + 28) = MediaType;
  if (MediaType == 1936684398)
  {
    FigGaplessInfoGetDefaultAudioPrimingDuration(*(const opaqueCMFormatDescription **)(a3 + 32), &v21);
    *(CMTime *)(a3 + 160) = v21;
  }
  if (!v12)
  {
    int v19 = *(const void **)(a3 + 152);
    *(void *)(a3 + 152) = a5;
    if (!v19) {
      return 0;
    }
LABEL_20:
    CFRelease(v19);
    return 0;
  }
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(const void *, __CFString *, void))(v18 + 56);
  if (!v20) {
    return 4294954514;
  }
  uint64_t result = v20(a5, @"DisplayList", 0);
  if (!result)
  {
    saig_ensureDecryptorIsReady((uint64_t)a5);
    int v19 = *(const void **)(a3 + 152);
    *(void *)(a3 + 152) = a5;
    CFRetain(a5);
    if (!v19) {
      return 0;
    }
    goto LABEL_20;
  }
  return result;
}

uint64_t saig_PushSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, opaqueCMSampleBuffer *a6)
{
  uint64_t v145 = *(void *)a3;
  values = (void *)CMBaseObjectGetDerivedStorage();
  memset(&v161, 0, sizeof(v161));
  CMSampleBufferRef sbuf = a6;
  CMSampleBufferGetPresentationTimeStamp(&v161, a6);
  memset(&v160, 0, sizeof(v160));
  keys = @"AIGRequestedNotificationWhenConsumed";
  if (*(void *)(a3 + 152))
  {
    FigBasicAESCPECryptorGetClassID();
    if (!CMBaseObjectIsMemberOfClass()
      || ((LODWORD(lhs.value) = 0, v8 = *(void *)(a3 + 152), (uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
        ? (uint64_t v10 = 0)
        : (uint64_t v10 = v9),
          (unsigned int v11 = *(unsigned int (**)(uint64_t, CMTime *))(v10 + 16)) == 0
       || v11(v8, &lhs)
       || LODWORD(lhs.value)))
    {
      FigSampleBufferSetDecryptor();
    }
  }
  BOOL v12 = (_OWORD *)(a3 + 64);
  key = (void *)*MEMORY[0x1E4F1F200];
  CFStringRef v141 = (CFDictionaryRef *)(a3 + 208);
  int v142 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFStringRef v140 = (void *)(a3 + 184);
  CFAllocatorRef v143 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v134 = (void *)*MEMORY[0x1E4F455B0];
  CMTimeValue value = (void *)*MEMORY[0x1E4F1CFD0];
  long long v139 = (CFDictionaryRef *)(a3 + 224);
  uint64_t v133 = *MEMORY[0x1E4F44D20];
  unsigned int v146 = (_OWORD *)(a3 + 120);
  int valuePtr = (float *)(a3 + 232);
  CFStringRef v135 = (const __CFString *)*MEMORY[0x1E4F1F2C8];
  CFStringRef v138 = (const __CFString *)*MEMORY[0x1E4F1F2A8];
  uint64_t v148 = (_OWORD *)(a3 + 96);
  CFArrayRef v13 = (_OWORD *)(a3 + 160);
  char v14 = 1;
  while (2)
  {
    if ((*(_DWORD *)(a3 + 76) & 0x1D) == 1)
    {
      CMTime lhs = v161;
      *(_OWORD *)&rhs.CMTimeValue value = *v12;
      rhs.CMTimeEpoch epoch = *(void *)(a3 + 80);
      CMTimeAdd(&v160, &lhs, &rhs);
      CMTime lhs = v160;
      CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
    }
    else
    {
      CMTime v160 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
    uint64_t v15 = 0;
    CFDictionaryRef v16 = 0;
    char v17 = 0;
    switch(*(_DWORD *)(a3 + 88))
    {
      case 0:
        uint64_t v18 = (char *)values;
        uint64_t v19 = *((void *)values + 40);
        if (v19)
        {
          do
          {
            if ((*(_DWORD *)(v19 + 88) & 0xFFFFFFFE) == 2
              && *(void *)(v19 + 40) == *(void *)(a3 + 40)
              && *(void *)(v19 + 48) == *(void *)(a3 + 48))
            {
              Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v19 + 56));
              if (Head)
              {
                memset(&lhs, 0, sizeof(lhs));
                CMSampleBufferGetPresentationTimeStamp(&lhs, Head);
                CMTime rhs = v161;
                CMTime time2 = lhs;
                CMTime v164 = *(CMTime *)(v19 + 160);
                CMTimeAdd(&time1, &time2, &v164);
                CMTime lhs = time1;
                CMTime time1 = rhs;
                *(_OWORD *)&time2.CMTimeValue value = *v13;
                time2.CMTimeEpoch epoch = *(void *)(a3 + 176);
                CMTimeAdd(&rhs, &time1, &time2);
                CMTime time1 = rhs;
                CMTime time2 = lhs;
                if (CMTimeCompare(&time1, &time2) < 0)
                {
                  memset(&time1, 0, sizeof(time1));
                  CMTime time2 = lhs;
                  CMTime v164 = rhs;
                  CMTimeSubtract(&time1, &time2, &v164);
                  memset(&time2, 0, sizeof(time2));
                  CMTime v164 = *(CMTime *)(v19 + 64);
                  CMTime v163 = time1;
                  CMTimeAdd(&time2, &v164, &v163);
                  CMTime v21 = (char *)values + 24 * *(unsigned __int8 *)(v19 + 92);
                  long long v22 = *((_OWORD *)v21 + 14);
                  v164.CMTimeEpoch epoch = *((void *)v21 + 30);
                  *(_OWORD *)&v164.CMTimeValue value = v22;
                  CMTime v163 = *(CMTime *)(v19 + 64);
                  if (!CMTimeCompare(&v164, &v163))
                  {
                    uint64_t v23 = (char *)values + 24 * *(unsigned __int8 *)(v19 + 92);
                    CMTimeEpoch epoch = time2.epoch;
                    *((_OWORD *)v23 + 14) = *(_OWORD *)&time2.value;
                    *((void *)v23 + 30) = epoch;
                  }
                  *(CMTime *)(v19 + 64) = time2;
                  uint64_t v25 = MEMORY[0x1E4F1FA48];
                  *(_OWORD *)(v19 + 120) = *MEMORY[0x1E4F1FA48];
                  *(void *)(v19 + 136) = *(void *)(v25 + 16);
                  CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v19 + 56), (OSStatus (__cdecl *)(CMBufferRef, void *))saig_AdjustTime, (void *)v19);
                }
              }
            }
            uint64_t v19 = *(void *)(v19 + 8);
          }
          while (v19);
          uint64_t v18 = (char *)values;
          uint64_t v26 = (uint64_t *)((char *)values + 320);
          uint64_t v27 = *((void *)values + 40);
          if (v27)
          {
            while (*(void *)(v27 + 48) != *(void *)(a3 + 48) || (*(_DWORD *)(v27 + 76) & 0x1D) != 1)
            {
              uint64_t v27 = *(void *)(v27 + 8);
              if (!v27) {
                goto LABEL_37;
              }
            }
            long long v30 = *(_OWORD *)(v27 + 64);
            *(void *)(a3 + 80) = *(void *)(v27 + 80);
            _OWORD *v12 = v30;
          }
        }
        else
        {
          uint64_t v26 = (uint64_t *)((char *)values + 320);
        }
LABEL_37:
        if ((*(_DWORD *)(a3 + 76) & 0x1D) == 1)
        {
          uint64_t v31 = *v26;
          if (v31)
          {
            while (*(void *)(v31 + 48) != *(void *)(a3 + 48)
                 || (*(_DWORD *)(v31 + 76) & 0x1D) != 1
                 || (*(unsigned char *)(v31 + 108) & 1) == 0)
            {
              uint64_t v31 = *(void *)(v31 + 8);
              if (!v31) {
                goto LABEL_64;
              }
            }
            long long v48 = *(_OWORD *)(v31 + 96);
            *(void *)(a3 + 112) = *(void *)(v31 + 112);
            *uint64_t v148 = v48;
          }
LABEL_64:
          uint64_t v49 = &v18[24 * *(unsigned __int8 *)(a3 + 92)];
          long long v50 = *v12;
          *((void *)v49 + 30) = *(void *)(a3 + 80);
          *((_OWORD *)v49 + 14) = v50;
          if (*(unsigned char *)(a3 + 93) && *(_DWORD *)(a3 + 28) == 1986618469)
          {
            if (*(_DWORD *)(a3 + 88) == 6) {
              continue;
            }
            int v29 = 6;
          }
          else
          {
            if (*(_DWORD *)(a3 + 88) == 2) {
              continue;
            }
            int v29 = 2;
          }
          goto LABEL_70;
        }
        if (*(unsigned char *)(a3 + 93))
        {
          int v32 = *(unsigned __int8 *)(a3 + 92);
          if (*(_DWORD *)(a3 + 28) == 1986618469)
          {
            if ((v18[24 * *(unsigned __int8 *)(a3 + 92) + 476] & 1) == 0)
            {
LABEL_56:
              uint64_t v18 = (char *)values;
              int v41 = *(unsigned __int8 *)(a3 + 92);
              if (*((unsigned char *)values + 24 * *(unsigned __int8 *)(a3 + 92) + 236))
              {
                uint64_t v42 = (char *)values + 24 * *(unsigned __int8 *)(a3 + 92);
                long long v43 = *((_OWORD *)v42 + 14);
                *(void *)(a3 + 80) = *((void *)v42 + 30);
                _OWORD *v12 = v43;
              }
              int v44 = *(_DWORD *)(a3 + 76);
              if (v41 == 2 && (v44 & 1) == 0)
              {
                long long v45 = (_OWORD *)MEMORY[0x1E4F1F9F0];
                *(void *)(a3 + 80) = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
                _OWORD *v12 = *v45;
                uint64_t v46 = MEMORY[0x1E4F1F9F8];
                *uint64_t v148 = *MEMORY[0x1E4F1F9F8];
                *(void *)(a3 + 112) = *(void *)(v46 + 16);
                int v44 = *(_DWORD *)(a3 + 76);
              }
              if ((v44 & 1) == 0)
              {
                *(_OWORD *)&rhs.CMTimeValue value = *v148;
                rhs.CMTimeEpoch epoch = *(void *)(a3 + 112);
                CMTime time1 = v161;
                CMTimeSubtract(&lhs, &rhs, &time1);
                _OWORD *v12 = *(_OWORD *)&lhs.value;
                CMTimeEpoch v47 = lhs.epoch;
                *(void *)(a3 + 80) = lhs.epoch;
                *(_OWORD *)&rhs.CMTimeValue value = *v12;
                rhs.CMTimeEpoch epoch = v47;
                *(_OWORD *)&time1.CMTimeValue value = *v13;
                time1.CMTimeEpoch epoch = *(void *)(a3 + 176);
                CMTimeSubtract(&lhs, &rhs, &time1);
                _OWORD *v12 = *(_OWORD *)&lhs.value;
                *(void *)(a3 + 80) = lhs.epoch;
                uint64_t v18 = (char *)values;
              }
              goto LABEL_64;
            }
            uint64_t v33 = &v18[24 * *(unsigned __int8 *)(a3 + 92)];
            long long v34 = *((_OWORD *)v33 + 29);
            rhs.CMTimeEpoch epoch = *((void *)v33 + 60);
            *(_OWORD *)&rhs.CMTimeValue value = v34;
            CMTime time1 = *(CMTime *)(v18 + 392);
            CMTimeSubtract(&lhs, &rhs, &time1);
            goto LABEL_53;
          }
        }
        else
        {
          int v32 = *(unsigned __int8 *)(a3 + 92);
        }
        if ((v18[24 * v32 + 476] & 1) == 0)
        {
          if (v18[380])
          {
            long long v40 = *((_OWORD *)v18 + 23);
            *(void *)(a3 + 112) = *((void *)v18 + 48);
            *uint64_t v148 = v40;
            goto LABEL_56;
          }
          uint64_t v35 = MEMORY[0x1E4F1FA48];
          uint64_t v36 = a3 + 96;
          *uint64_t v148 = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v37 = *(void *)(v35 + 16);
          goto LABEL_54;
        }
        uint64_t v38 = &v18[24 * v32];
        long long v39 = *((_OWORD *)v38 + 29);
        lhs.CMTimeEpoch epoch = *((void *)v38 + 60);
        *(_OWORD *)&lhs.CMTimeValue value = v39;
        CMTime rhs = *(CMTime *)(v18 + 392);
        CMTimeSubtract(&v158, &lhs, &rhs);
        CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        CMTimeMaximum(&lhs, &v158, &rhs);
LABEL_53:
        uint64_t v36 = a3 + 96;
        *uint64_t v148 = *(_OWORD *)&lhs.value;
        CMTimeEpoch v37 = lhs.epoch;
LABEL_54:
        *(void *)(v36 + 16) = v37;
        goto LABEL_56;
      case 2:
        if (*(_DWORD *)(a3 + 28) != 1986618469) {
          goto LABEL_34;
        }
        if ((a4 & 1) == 0) {
          goto LABEL_154;
        }
        uint64_t OutputImagePropertiesForImageRetrieval = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 56), a6);
        if (OutputImagePropertiesForImageRetrieval) {
          return OutputImagePropertiesForImageRetrieval;
        }
        if (*(_DWORD *)(a3 + 88) != 3)
        {
LABEL_34:
          int v29 = 3;
LABEL_70:
          *(_DWORD *)(a3 + 88) = v29;
        }
        continue;
      case 3:
        int v51 = *(_DWORD *)(a3 + 28);
        if (v51 == 1936684398)
        {
          if (*(unsigned char *)(a3 + 92) == 1)
          {
            uint64_t v52 = *(void *)(a3 + 152);
            if (!v52 || !saig_ensureDecryptorIsReady(v52)) && (*(unsigned char *)(a3 + 132))
            {
              *(_OWORD *)&lhs.CMTimeValue value = *v146;
              lhs.CMTimeEpoch epoch = *(void *)(a3 + 136);
              *(_OWORD *)&rhs.CMTimeValue value = *v148;
              rhs.CMTimeEpoch epoch = *(void *)(a3 + 112);
              if (CMTimeCompare(&lhs, &rhs) >= 1)
              {
                uint64_t v53 = *((void *)values + 12);
                uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v55 = v54 ? v54 : 0;
                long long v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 8);
                if (v78) {
                  v78(v53, 1, 1);
                }
              }
            }
          }
          int v51 = *(_DWORD *)(a3 + 28);
        }
        if (v51 == 1986618469 && *((void *)values + 43) == 2)
        {
          uint64_t v79 = *(void *)(a3 + 152);
          if (!v79 || !saig_ensureDecryptorIsReady(v79)) && (*(unsigned char *)(a3 + 132))
          {
            *(_OWORD *)&lhs.CMTimeValue value = *v146;
            lhs.CMTimeEpoch epoch = *(void *)(a3 + 136);
            *(_OWORD *)&rhs.CMTimeValue value = *v148;
            rhs.CMTimeEpoch epoch = *(void *)(a3 + 112);
            if (CMTimeCompare(&lhs, &rhs) >= 1)
            {
              uint64_t v80 = *((void *)values + 12);
              uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v82 = v81 ? v81 : 0;
              unsigned int v83 = *(void (**)(uint64_t, void, uint64_t))(v82 + 8);
              if (v83) {
                v83(v80, 0, 1);
              }
            }
          }
        }
        if (*((unsigned char *)values + 9)) {
          goto LABEL_154;
        }
        uint64_t v84 = *(void *)(a3 + 48);
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v86 = *(void *)(DerivedStorage + 320);
        if (v86)
        {
          int v87 = 0;
          while (1)
          {
            uint64_t v88 = *(void *)(v86 + 152);
            if (v88 && saig_ensureDecryptorIsReady(v88)) {
              goto LABEL_153;
            }
            if (*(void *)(v86 + 48) == v84)
            {
              if ((*(unsigned char *)(v86 + 76) & 1) != 0 || *(unsigned char *)(v86 + 144)) {
                v87 |= 1 << *(unsigned char *)(v86 + 92);
              }
              if (!*(unsigned char *)(v86 + 93) && !*(unsigned char *)(v86 + 144))
              {
                if (!*(void *)(v86 + 32)) {
                  break;
                }
                if (!*(_DWORD *)(v86 + 88)) {
                  break;
                }
                if (!*(_DWORD *)(v86 + 28)) {
                  break;
                }
                if ((*(unsigned char *)(v86 + 132) & 1) == 0) {
                  break;
                }
                CMTime lhs = *(CMTime *)(v86 + 120);
                CMTime rhs = *(CMTime *)(v86 + 96);
                if (CMTimeCompare(&lhs, &rhs) < 1) {
                  break;
                }
              }
            }
            uint64_t v86 = *(void *)(v86 + 8);
            if (!v86)
            {
              char v89 = 0;
              goto LABEL_149;
            }
          }
          char v89 = 1;
        }
        else
        {
          char v89 = 0;
          int v87 = 0;
        }
LABEL_149:
        if (*(uint64_t *)(DerivedStorage + 344) >= 2 && ((*(_DWORD *)(DerivedStorage + 352) ^ v87) & 7) != 0) {
          char v89 = 1;
        }
        if ((v89 & 1) == 0)
        {
          uint64_t v15 = 0;
          CFDictionaryRef v16 = 0;
          char v14 = 0;
          char v17 = 0;
          *((unsigned char *)values + 9) = 1;
          goto LABEL_194;
        }
LABEL_153:
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 56), sbuf);
LABEL_154:
        uint64_t v15 = 0;
        CFDictionaryRef v16 = 0;
        char v17 = 0;
        char v14 = 1;
        goto LABEL_194;
      case 6:
        CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a6, 0);
        if (SampleAttachmentsArray)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
          if (ValueAtIndex)
          {
            CFDictionaryRef v58 = ValueAtIndex;
            if (CFDictionaryContainsKey(ValueAtIndex, key))
            {
              if (CFDictionaryGetValue(v58, key) != v142) {
                goto LABEL_154;
              }
            }
          }
        }
        uint64_t v59 = (char *)values;
        uint64_t v60 = *((void *)values + 78);
        if (!v60)
        {
          uint64_t v15 = 0;
          CFDictionaryRef v16 = 0;
          char v14 = 1;
          goto LABEL_193;
        }
        char v14 = 1;
        if (*((unsigned char *)values + 548))
        {
          uint64_t v15 = 0;
          CFDictionaryRef v16 = 0;
          goto LABEL_193;
        }
        v164.CMTimeValue value = 0;
        *((unsigned char *)values + 548) = 1;
        time1.CMTimeValue value = 0;
        time2.CMTimeValue value = 0;
        LOBYTE(v156.CFDictionarySetValue(theDict, key, value) = 1;
        LODWORD(v157.CFDictionarySetValue(theDict, key, value) = 0;
        MEMORY[0x19970E910](*((void *)v59 + 71));
        CFAllocatorRef v61 = v143;
        if (*((void *)v59 + 70)) {
          goto LABEL_88;
        }
        uint64_t Basic = FigVisualContextCreateBasic(*(void *)(v60 + 48), 0, (CFTypeRef *)v59 + 70);
        if (Basic) {
          goto LABEL_110;
        }
        *((void *)v59 + 72) = *((void *)v59 + 8);
        uint64_t v74 = *((void *)v59 + 70);
        uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v75) {
          uint64_t v76 = v75;
        }
        else {
          uint64_t v76 = 0;
        }
        long long v77 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, __n128 *, uint64_t, uint64_t), char *))(v76 + 8);
        if (!v77)
        {
          uint64_t v15 = 4294954514;
          goto LABEL_112;
        }
        uint64_t Basic = v77(v74, saig_decodedImageBecameAvailable, v59 + 576);
        if (Basic)
        {
LABEL_110:
          uint64_t v15 = Basic;
LABEL_112:
          MEMORY[0x19970E930](*((void *)v59 + 71));
          return v15;
        }
LABEL_88:
        MEMORY[0x19970E930](*((void *)v59 + 71));
        uint64_t OutputImagePropertiesForImageRetrieval = FAIGCommon_getOutputImagePropertiesForImageRetrieval(*(CMVideoFormatDescriptionRef *)(a3 + 32), *(CFDictionaryRef *)(v60 + 40), 0, &time1, (CFDictionaryRef *)&time2);
        if (OutputImagePropertiesForImageRetrieval) {
          return OutputImagePropertiesForImageRetrieval;
        }
        FAIGCommon_checkAndUpdateOutputImagePropertiesForImageRetrieval((_DWORD *)(a3 + 200), time1.value, v141, (CFTypeRef)time2.value, &v156);
        if (time2.value)
        {
          CFRelease((CFTypeRef)time2.value);
          time2.CMTimeValue value = 0;
        }
        if (*v140 && !LOBYTE(v156.value))
        {
          uint64_t v62 = (CMBufferQueueRef *)(a3 + 192);
          goto LABEL_176;
        }
        saig_ReleaseRenderPipelineForTrack(a3);
        LODWORD(v163.CFDictionarySetValue(theDict, key, value) = 1111970369;
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v143, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v64 = Mutable;
        if (v59[656]) {
          CFDictionarySetValue(Mutable, v134, value);
        }
        uint64_t DestinationPixelBufferAttributes = FPSupport_CreateDestinationPixelBufferAttributes(time1.value, SHIDWORD(time1.value), (char *)&v163, 1, 0, 1, 0, 0, 0, v139);
        if (DestinationPixelBufferAttributes
          || (CFAllocatorRef v66 = *(const __CFAllocator **)(v60 + 48),
              uint64_t v67 = *(const void **)(a3 + 32),
              CMTimeMake(&lhs, 1, 30),
              CMTimeMake(&rhs, 1, 30),
              uint64_t DestinationPixelBufferAttributes = FAIGCommon_createRenderPipelineOptions(v66, v67, 0, &lhs, &rhs, (CFDictionaryRef *)(a3 + 216)), DestinationPixelBufferAttributes))
        {
          uint64_t v15 = DestinationPixelBufferAttributes;
          uint64_t v62 = (CMBufferQueueRef *)(a3 + 192);
          uint64_t v68 = v64;
        }
        else
        {
          MEMORY[0x19970E910](*((void *)v59 + 71));
          uint64_t v68 = v64;
          uint64_t v15 = FigVideoRenderPipelineCreateWithVisualContext(*(const __CFAllocator **)(v60 + 48), v64, *v139, *v141, 1, *((void *)v59 + 70), 0, *(const __CFDictionary **)(a3 + 216), v140);
          MEMORY[0x19970E930](*((void *)v59 + 71));
          if (!v15)
          {
            uint64_t v69 = *(const opaqueCMFormatDescription **)(a3 + 32);
            uint64_t v62 = (CMBufferQueueRef *)(a3 + 192);
            CFAllocatorRef v61 = v143;
            if (!v69) {
              goto LABEL_247;
            }
            CMFormatDescriptionGetExtensions(v69);
            if (!FigCFDictionaryGetInt32IfPresent() || SLODWORD(v157.value) < 2) {
              goto LABEL_247;
            }
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*v140);
            uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v71) {
              uint64_t v72 = v71;
            }
            else {
              uint64_t v72 = 0;
            }
            CMTimeScale v90 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v72 + 56);
            if (!v90) {
              goto LABEL_172;
            }
            uint64_t v91 = v90(FigBaseObject, @"FieldMode", v133);
            if (!v91)
            {
LABEL_247:
              uint64_t v92 = *((void *)v59 + 81);
              if (!v92) {
                goto LABEL_165;
              }
              uint64_t v93 = FigRenderPipelineGetFigBaseObject(*v140);
              uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v94) {
                uint64_t v95 = v94;
              }
              else {
                uint64_t v95 = 0;
              }
              double v96 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v95 + 56);
              if (!v96) {
                goto LABEL_172;
              }
              uint64_t v91 = v96(v93, @"ClientPID", v92);
              if (!v91)
              {
LABEL_165:
                uint64_t v97 = FigRenderPipelineGetFigBaseObject(*v140);
                uint64_t v98 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v98) {
                  uint64_t v99 = v98;
                }
                else {
                  uint64_t v99 = 0;
                }
                uint64_t v100 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v99 + 48);
                if (v100)
                {
                  uint64_t v91 = v100(v97, @"SourceSampleBufferQueue", v143, a3 + 192);
                  if (!v91)
                  {
                    uint64_t v101 = FigRenderPipelineGetFigBaseObject(*v140);
                    uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v102) {
                      uint64_t v103 = v102;
                    }
                    else {
                      uint64_t v103 = 0;
                    }
                    long long v132 = *(void (**)(uint64_t, __CFString *, void *))(v103 + 56);
                    if (v132) {
                      v132(v101, @"ObeyEmptyMediaMarkers", value);
                    }
                    CMNotificationCenterGetDefaultLocalCenter();
                    uint64_t v91 = CMNotificationCenterAddListener();
                  }
                  goto LABEL_240;
                }
LABEL_172:
                uint64_t v15 = 4294954514;
                goto LABEL_173;
              }
            }
LABEL_240:
            uint64_t v15 = v91;
            goto LABEL_173;
          }
          uint64_t v62 = (CMBufferQueueRef *)(a3 + 192);
        }
        CFAllocatorRef v61 = v143;
LABEL_173:
        if (v68) {
          CFRelease(v68);
        }
        if (!v15)
        {
LABEL_176:
          if ((*(unsigned char *)(a3 + 132) & 1) == 0) {
            goto LABEL_187;
          }
          *(_OWORD *)&lhs.CMTimeValue value = *v146;
          lhs.CMTimeEpoch epoch = *(void *)(a3 + 136);
          CMTime rhs = v160;
          if (CMTimeCompare(&lhs, &rhs) < 1)
          {
            float v104 = 1.0;
            if (*valuePtr >= 0.0) {
              goto LABEL_187;
            }
          }
          else
          {
            CMSetAttachment(sbuf, v135, value, 1u);
            float v104 = -1.0;
            if (*valuePtr <= 0.0) {
              goto LABEL_187;
            }
          }
          *int valuePtr = v104;
          CFNumberRef v105 = CFNumberCreate(v61, kCFNumberFloatType, valuePtr);
          if (v105)
          {
            CFNumberRef v106 = v105;
            uint64_t v107 = FigRenderPipelineGetFigBaseObject(*v140);
            uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v108) {
              uint64_t v109 = v108;
            }
            else {
              uint64_t v109 = 0;
            }
            uint64_t v110 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v109 + 56);
            if (!v110)
            {
              CFRelease(v106);
              return 4294954514;
            }
            uint64_t v15 = v110(v107, @"PrerollRate", v106);
            CFRelease(v106);
            if (v15) {
              return v15;
            }
          }
LABEL_187:
          uint64_t OutputImagePropertiesForImageRetrieval = CMBufferQueueEnqueue(*v62, sbuf);
          if (!OutputImagePropertiesForImageRetrieval)
          {
            CFDictionaryRef v111 = CFDictionaryCreate(v61, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], 0);
            CFDictionaryRef v16 = v111;
            if (!v111)
            {
              uint64_t v115 = FigSignalErrorAt();
              goto LABEL_230;
            }
            CFDictionaryRef v112 = values;
            uint64_t v113 = MEMORY[0x1E4F1F9F8];
            *(_OWORD *)((char *)values + 584) = *MEMORY[0x1E4F1F9F8];
            v112[75] = *(void *)(v113 + 16);
            uint64_t v114 = (const void *)v112[77];
            v112[77] = v111;
            CFRetain(v111);
            if (v114) {
              CFRelease(v114);
            }
            uint64_t v115 = CMSampleBufferCreate(v61, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&v164);
            if (v115) {
              goto LABEL_230;
            }
            char v14 = 1;
            CMSetAttachment((CMAttachmentBearerRef)v164.value, v138, v16, 1u);
            uint64_t v15 = CMBufferQueueEnqueue(*v62, (CMBufferRef)v164.value);
            CFRelease((CFTypeRef)v164.value);
LABEL_193:
            char v17 = 1;
LABEL_194:
            if ((*(_DWORD *)(a3 + 76) & 0x1D) == 1)
            {
              memset(&v157, 0, sizeof(v157));
              memset(&v156, 0, sizeof(v156));
              CMSampleBufferGetOutputDuration(&v156, sbuf);
              CMSampleBufferGetOutputPresentationTimeStamp(&lhs, sbuf);
              CMTime v161 = lhs;
              if ((v156.flags & 0x1D) == 1)
              {
                CMTime lhs = v161;
                CMTime rhs = v156;
                CMTimeAdd(&v157, &lhs, &rhs);
              }
              else
              {
                CMTime v157 = v161;
              }
              if (*(unsigned char *)(a3 + 93)
                && (*(_DWORD *)(a3 + 28) == 1986618469 ? (char v116 = v17) : (char v116 = 0), (v116 & 1) != 0)
                || (*(unsigned char *)(a3 + 132) & 1) == 0
                || (*(_OWORD *)&lhs.CMTimeValue value = *v146,
                    lhs.CMTimeEpoch epoch = *(void *)(a3 + 136),
                    CMTime rhs = v157,
                    CMTimeCompare(&lhs, &rhs) < 0))
              {
                *unsigned int v146 = *(_OWORD *)&v157.value;
                *(void *)(a3 + 136) = v157.epoch;
              }
              int v117 = *(_DWORD *)(a3 + 28);
              if (v117 == 1936684398 || v117 == 1986618469 && *(_DWORD *)(a3 + 88) == 6)
              {
                memset(&v155, 0, sizeof(v155));
                CMSampleBufferGetPresentationTimeStamp(&v154, sbuf);
                *(_OWORD *)&lhs.CMTimeValue value = *v12;
                lhs.CMTimeEpoch epoch = *(void *)(a3 + 80);
                CMTimeAdd(&v155, &v154, &lhs);
                memset(&v153, 0, sizeof(v153));
                memset(&v152, 0, sizeof(v152));
                CMSampleBufferGetDuration(&v152, sbuf);
                if (v152.flags)
                {
                  CMTime lhs = v155;
                  CMTime rhs = v152;
                  CMTimeAdd(&v153, &lhs, &rhs);
                }
                else
                {
                  CMTime v153 = v155;
                }
                CMTime lhs = v153;
                *(_OWORD *)&rhs.CMTimeValue value = *v148;
                rhs.CMTimeEpoch epoch = *(void *)(a3 + 112);
                if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0
                  && (*((unsigned char *)values + 24 * *(unsigned __int8 *)(a3 + 92) + 476) & 1) != 0)
                {
                  CMTime lhs = v155;
                  *(_OWORD *)&rhs.CMTimeValue value = *v148;
                  rhs.CMTimeEpoch epoch = *(void *)(a3 + 112);
                  if (CMTimeCompare(&lhs, &rhs) < 0)
                  {
                    *(_OWORD *)&v155.CMTimeValue value = *v148;
                    v155.CMTimeEpoch epoch = *(void *)(a3 + 112);
                  }
                  CMTime v118 = (char *)values;
                  CFDictionaryRef v119 = (char *)values + 24 * *(unsigned __int8 *)(a3 + 92);
                  CMTime v151 = v155;
                  *(_OWORD *)&v150.CMTimeValue value = *((_OWORD *)v119 + 29);
                  v150.CMTimeEpoch epoch = *((void *)v119 + 60);
                  v120 = (CMTime *)((char *)values + 440);
                  int v121 = *((_DWORD *)values + 113);
                  if (v121)
                  {
                    memset(&lhs, 0, sizeof(lhs));
                    CMTime rhs = v150;
                    CMTime time1 = *(CMTime *)((char *)values + 416);
                    CMTimeSubtract(&lhs, &rhs, &time1);
                    memset(&rhs, 0, sizeof(rhs));
                    CMTime time1 = v151;
                    CMTime time2 = *v120;
                    CMTimeSubtract(&rhs, &time1, &time2);
                    memset(&time1, 0, sizeof(time1));
                    memset(&time2, 0, sizeof(time2));
                    CMTimeMake(&time2, 1, 1);
                    CMTime v164 = lhs;
                    CMTime v163 = rhs;
                    if (CMTimeCompare(&v164, &v163) < 0)
                    {
                      CMTime v164 = rhs;
                      *(_OWORD *)&v163.CMTimeValue value = *(_OWORD *)&lhs.value;
                      CMTimeEpoch v122 = lhs.epoch;
                    }
                    else
                    {
                      CMTime v164 = lhs;
                      *(_OWORD *)&v163.CMTimeValue value = *(_OWORD *)&rhs.value;
                      CMTimeEpoch v122 = rhs.epoch;
                    }
                    v163.CMTimeEpoch epoch = v122;
                    CMTimeSubtract(&time1, &v164, &v163);
                    CMTime v164 = time1;
                    CMTime v163 = time2;
                    if ((CMTimeCompare(&v164, &v163) & 0x80000000) == 0)
                    {
                      uint64_t v123 = MEMORY[0x1E4F1F9F8];
                      long long v124 = *MEMORY[0x1E4F1F9F8];
                      *(_OWORD *)&v120->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
                      CMTimeEpoch v125 = *(void *)(v123 + 16);
                      v120->CMTimeEpoch epoch = v125;
                      *((_OWORD *)v118 + 26) = v124;
                      *((void *)v118 + 54) = v125;
                    }
                    int v121 = *((_DWORD *)v118 + 113);
                  }
                  if ((v121 & 1) == 0)
                  {
                    CMTime rhs = v150;
                    CMTime time1 = v151;
                    CMTimeSubtract(&lhs, &rhs, &time1);
                    *(CMTime *)(v118 + 392) = lhs;
                    CMTime *v120 = v151;
                    *((_OWORD *)v118 + 26) = *(_OWORD *)&v150.value;
                    *((void *)v118 + 54) = v150.epoch;
                  }
                  uint64_t v126 = 0;
                  long long v127 = *MEMORY[0x1E4F1F9F8];
                  uint64_t v128 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                  do
                  {
                    uint64_t v129 = &v118[v126 + 464];
                    *(_OWORD *)uint64_t v129 = v127;
                    *((void *)v129 + 2) = v128;
                    v126 += 24;
                  }
                  while (v126 != 72);
                }
              }
            }
            if (v14) {
              goto LABEL_231;
            }
            uint64_t v130 = *((void *)values + 78);
            if (!v130) {
              goto LABEL_231;
            }
            uint64_t v115 = saig_RequestAnImageFromPump(v145, v130);
LABEL_230:
            uint64_t v15 = v115;
LABEL_231:
            if (v16) {
              CFRelease(v16);
            }
            return v15;
          }
          return OutputImagePropertiesForImageRetrieval;
        }
        return v15;
      default:
        goto LABEL_194;
    }
  }
}

uint64_t saig_TrackEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a3 + 144))
  {
    uint64_t v6 = *(void *)(a3 + 40);
    if (v6)
    {
      uint64_t v7 = *(unsigned int *)(a3 + 24);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, void))(v9 + 32);
      if (v10) {
        v10(v6, v7, 0, 0);
      }
    }
    *(unsigned char *)(a3 + 144) = 1;
  }
  return a4;
}

uint64_t saig_ensureDecryptorIsReady(uint64_t a1)
{
  uint64_t v11 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t *))(v3 + 8);
  if (!v4 || (uint64_t v5 = v4(a1, &v11), v5 == -12782))
  {
    CFTypeRef cf = 0;
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8)
    {
      uint64_t v5 = v8(a1, *MEMORY[0x1E4F1FDF8], *MEMORY[0x1E4F1CF80], &cf);
      if (!v5)
      {
        if ((CFTypeRef)*MEMORY[0x1E4F1CFC8] == cf) {
          uint64_t v5 = 4294954431;
        }
        else {
          uint64_t v5 = 0;
        }
        CFRelease(cf);
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return v5;
}

uint64_t saig_AdjustTime(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  CMTime rhs = *(CMTime *)(a2 + 64);
  CMTimeAdd(&v10, &lhs, &rhs);
  CMTime rhs = v10;
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputDuration(&v7, a1);
  if ((v7.flags & 0x1D) == 1)
  {
    CMTime time1 = rhs;
    CMTime v5 = v7;
    CMTimeAdd(&rhs, &time1, &v5);
  }
  CMTime time1 = *(CMTime *)(a2 + 120);
  CMTime v5 = rhs;
  if (CMTimeCompare(&time1, &v5) < 0) {
    *(CMTime *)(a2 + 120) = rhs;
  }
  CMTime time1 = v10;
  return CMSampleBufferSetOutputPresentationTimeStamp(a1, &time1);
}

uint64_t saig_decodedImageBecameAvailable(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  FAIGCommon_decodedImageBecameAvailable(a1, &v5, a3, a4);
  return FigSemaphoreSignal();
}

void saig_CleanVideoRendersAndVisualContext()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage[40];
  if (v1)
  {
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    do
    {
      if (*(_DWORD *)(v1 + 28) == 1986618469 && *(unsigned char *)(v1 + 93))
      {
        saig_ReleaseRenderPipelineForTrack(v1);
        *(_OWORD *)(v1 + 120) = *(_OWORD *)v2;
        *(void *)(v1 + 136) = *(void *)(v2 + 16);
        *(_DWORD *)(v1 + 232) = 1065353216;
      }
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
  }
  MEMORY[0x19970E910](DerivedStorage[71]);
  uint64_t v3 = (const void *)DerivedStorage[70];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[70] = 0;
  }

  JUMPOUT(0x19970E930);
}

void saig_postNotificationAsynchronously(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }

  free((void *)a1);
}

uint64_t FigCDSBaseProtocolGetProtocolID()
{
  return sFigCDSBaseProtocolID;
}

uint64_t RegisterFigCDSBaseProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSBaseProtocolDesc, 0, &sFigCDSBaseProtocolID);
}

uint64_t FigCDSTimerStart(uint64_t a1)
{
  dispatch_source_t v2 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 64));
  *(void *)(a1 + 72) = v2;
  if (v2)
  {
    uint64_t v3 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)cdsTimerOnTimerCanceled);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)cdsTimerDispatchFunctionCallback);
    dispatch_set_context(*(dispatch_object_t *)(a1 + 72), v3);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0, 1000000 * *(int *)(a1 + 36), 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 72));
  }
  *(unsigned char *)(a1 + 33) = 0;
  return 0;
}

void cdsTimerOnTimerCanceled(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void cdsTimerDispatchFunctionCallback()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (void (**)(void))v0;
    if (*(void *)(v0 + 24))
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        uint64_t v3 = (const void *)v2;
        v1[3]();
        CFRelease(v3);
      }
    }
    CFRelease(v1);
  }
}

uint64_t FigCDSTimerStop(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
  }
  *(unsigned char *)(a1 + 33) = 1;
  return 0;
}

BOOL FigCDSTimerIsOn(uint64_t a1)
{
  return *(unsigned char *)(a1 + 33) == 0;
}

uint64_t FigCDSTimerCreate(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  MEMORY[0x19970EE10](&FigCDSTimerLocalGetTypeID_sRegisterFigCDSTimerOnce, RegisterFigCDSTimerClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 32) = 256;
  *(_DWORD *)(Instance + 36) = a1;
  snprintf(__str, 0x100uLL, "com.apple.coremedia.figcdstimer.soQueue<%p>", (const void *)Instance);
  *(void *)(Instance + 64) = dispatch_queue_create(__str, 0);
  if (a2
    && a3
    && (*(void *)(Instance + 24) = a2,
        uint64_t v9 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(Instance + 16) = v9) == 0))
  {
    uint64_t v10 = FigSignalErrorAt();
    CFRelease((CFTypeRef)Instance);
  }
  else
  {
    uint64_t v10 = 0;
    *a4 = Instance;
  }
  return v10;
}

uint64_t RegisterFigCDSTimerClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCDSTimerID = result;
  return result;
}

double FigCDSTimerInit(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCDSTimer_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 64) = 0;
  }
}

__CFString *FigCDSTimerCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSTimer %p>", a1);
  return Mutable;
}

uint64_t FigAlternateFilterGetClassID()
{
  return sFigAlternateFilterClassID;
}

uint64_t RegisterFigAlternateFilterType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateFilterGetTypeID()
{
  MEMORY[0x19970EE10](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigSimpleAlternateFilterCreate(uint64_t a1, const void *a2, int a3, long long *a4, const void *a5, void *a6)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19970EE10](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  uint64_t v10 = CMDerivedObjectCreate();
  if (v10) {
    return v10;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFTypeRef v12 = CFRetain(a2);
  }
  else {
    CFTypeRef v12 = 0;
  }
  *(void *)uint64_t DerivedStorage = v12;
  *(_DWORD *)(DerivedStorage + 8) = a3;
  long long v13 = *a4;
  long long v14 = a4[1];
  *(void *)(DerivedStorage + 48) = *((void *)a4 + 4);
  *(_OWORD *)(DerivedStorage + 16) = v13;
  *(_OWORD *)(DerivedStorage + 32) = v14;
  if (a5) {
    CFTypeRef v15 = CFRetain(a5);
  }
  else {
    CFTypeRef v15 = 0;
  }
  *(void *)(DerivedStorage + 72) = v15;
  uint64_t v16 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 56) = v16;
  if (!v16) {
    return FigSignalErrorAt();
  }
  uint64_t v17 = 0;
  *a6 = 0;
  return v17;
}

CFTypeRef FigCFRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void FigCFRelease_2(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigAlternateMergeFilterCreate(uint64_t a1, const void *a2, int a3, const void *a4, const void *a5, int a6, void *a7)
{
  MEMORY[0x19970EE10](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  uint64_t v13 = CMDerivedObjectCreate();
  if (!v13)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v15 = CFRetain(a2);
    }
    else {
      CFTypeRef v15 = 0;
    }
    *(void *)uint64_t DerivedStorage = v15;
    *(_DWORD *)(DerivedStorage + 8) = a3;
    if (a4) {
      CFTypeRef v16 = CFRetain(a4);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *(void *)(DerivedStorage + 16) = v16;
    if (a5) {
      CFTypeRef v17 = CFRetain(a5);
    }
    else {
      CFTypeRef v17 = 0;
    }
    *(void *)(DerivedStorage + 24) = v17;
    *(_DWORD *)(DerivedStorage + 32) = a6;
    *a7 = 0;
  }
  return v13;
}

uint64_t FigAlternateHDCPLazyEPMFilterCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x19970EE10](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    return v8;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  void *DerivedStorage = FigCFWeakReferenceHolderCreateWithReferencedObject();
  DerivedStorage[1] = a2;
  DerivedStorage[2] = a3;
  DerivedStorage[3] = 0x100000001;
  uint64_t v10 = FigSimpleMutexCreate();
  DerivedStorage[4] = v10;
  if (!v10) {
    return FigSignalErrorAt();
  }
  uint64_t v11 = 0;
  *a5 = 0;
  return v11;
}

uint64_t FigAlternateProtectedHDCPLevelUpperLimitFilterCreate(const __CFAllocator *a1, int a2, void *a3)
{
  *(_DWORD *)bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, bytes, 4);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"ProtectedHDCPLevelUpperLimit", 1000, (long long *)&unk_1EE504408, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL fhaf_protectedLevelUpperLimitFilterFn(uint64_t a1, CFDataRef theData)
{
  int v3 = *(_DWORD *)CFDataGetBytePtr(theData);
  return v3 >= (int)FigAlternateGetHDCPLevel(a1);
}

CFStringRef fhaf_copyProtectedHDCPLevelUpperLimitDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (int *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  LoggingStringFromHDCPLevel = FigAlternateGetLoggingStringFromHDCPLevel(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, @"hdcpLevel:%@", LoggingStringFromHDCPLevel);
}

uint64_t FigAlternateSupportedVideoRangeFilterCreate(const __CFAllocator *a1, int a2, void *a3)
{
  *(_DWORD *)bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, bytes, 4);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"SupportedVideoRange", 1000, (long long *)&unk_1EE504430, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL faf_SupportedVideoRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  int v3 = *(_DWORD *)CFDataGetBytePtr(theData);
  unsigned int VideoRange = FigAlternateGetVideoRange(a1);
  unsigned int v5 = FPSupportVideoRangeToAlternateVideoRange(v3);
  int IsAudioOnly = FigAlternateIsAudioOnly(a1);
  BOOL v9 = VideoRange == 2 && v3 == 1 || v5 >= VideoRange;
  if (!v3 && !FigAlternateGetCodecString(a1)) {
    BOOL v9 = 1;
  }
  return IsAudioOnly || v9;
}

CFStringRef faf_copySupportedVideoRangeDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (int *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ModeCFStringRef String = FPSupport_GetModeString(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, @"mode:[%s]", ModeString);
}

uint64_t FigAlternateMediaValidationFilterCreate(uint64_t a1, int a2, void *a3)
{
  unsigned int v5 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    unsigned int v5 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  if (*v5) {
    CFTypeRef v6 = CFRetain(*v5);
  }
  else {
    CFTypeRef v6 = 0;
  }

  return FigSimpleAlternateFilterCreate(a1, @"MediaValidation", 1000, (long long *)&unk_1EE504458, v6, a3);
}

uint64_t faf_mediaValidationFilterFn(uint64_t a1, uint64_t a2)
{
  if (FigAlternateHasVideoFormat(a1, 2) && FigAlternateGetVideoRange(a1) == 3) {
    return 0;
  }
  if (!FigAlternateGetCodecString(a1)) {
    return 1;
  }
  uint64_t result = FigAlternateHasValidCodecs(a1);
  if (!result) {
    return result;
  }
  return *MEMORY[0x1E4F1CFD0] == a2 || !FigAlternateHasUnknownCodecs(a1);
}

CFStringRef faf_copyMediaValidationDescAddendum(uint64_t a1, uint64_t a2)
{
  if (*MEMORY[0x1E4F1CFD0] == a2) {
    uint64_t v2 = "YES";
  }
  else {
    uint64_t v2 = "NO";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"allowUnknownCodecs:%s", v2);
}

uint64_t FigAlternateAllowedCPCFilterCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  *(void *)bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, bytes, 8);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"AllowedCPC", 1000, (long long *)&unk_1EE504480, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL faf_allowedCPCFilterFn(uint64_t a1, CFDataRef theData)
{
  uint64_t v3 = *(void *)CFDataGetBytePtr(theData);
  uint64_t AllowedCPC = FigAlternateGetAllowedCPC(a1);
  uint64_t v5 = FigAlternateGetAllowedCPC(a1);
  return (AllowedCPC & v3) != 0 || v5 == -1;
}

CFStringRef faf_copyAllowedCPCDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"systemCPC:0x%llx", *(void *)BytePtr);
}

uint64_t FigAlternateSuppressVP9FilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"SuppressVP9", 1100, (long long *)&unk_1EE5044A8, 0, a2);
}

BOOL faf_SuppressVP9FilterFn(uint64_t a1)
{
  return FigAlternateHasVideoFormat(a1, 3) == 0;
}

uint64_t FigAlternatePathwayPreferenceFilterCreate(void *a1, const void *a2, const void *a3, void *a4)
{
  context.version = 0;
  context.info = a1;
  context.retain = (CFAllocatorRetainCallBack)FigCFRetain;
  context.release = (CFAllocatorReleaseCallBack)FigCFRelease_2;
  memset(&context.copyDescription, 0, 24);
  context.deallocate = (CFAllocatorDeallocateCallBack)fappfContextDeallocateCallback;
  context.preferredSize = 0;
  CFAllocatorRef v8 = CFAllocatorCreate((CFAllocatorRef)a1, &context);
  if (!v8) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v9 = v8;
  uint64_t v10 = (CFTypeRef *)CFAllocatorAllocate((CFAllocatorRef)a1, 40, 0);
  if (v10)
  {
    uint64_t v11 = v10;
    *uint64_t v10 = a3;
    v10[1] = a2;
    _OWORD v10[3] = 0;
    v10[4] = 0;
    v10[2] = 0;
    CFDataRef v12 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)a1, (const UInt8 *)v10, 40, v9);
    if (v12)
    {
      CFDataRef v13 = v12;
      if (*v11) {
        CFRetain(*v11);
      }
      CFTypeRef v14 = v11[1];
      if (v14) {
        CFRetain(v14);
      }
      uint64_t v15 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PathwayPreference", 647, (long long *)&off_1EE5044D0, v13, a4);
      CFRelease(v9);
      CFAllocatorRef v16 = v13;
      goto LABEL_9;
    }
    uint64_t v15 = FigSignalErrorAt();
    CFAllocatorDeallocate((CFAllocatorRef)a1, v11);
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  CFAllocatorRef v16 = v9;
LABEL_9:
  CFRelease(v16);
  return v15;
}

CFArrayRef fappf_PathwayFilterInitFn(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  uint64_t v2 = (const void *)*((void *)BytePtr + 2);
  if (v2)
  {
    CFRelease(v2);
    *((void *)BytePtr + 2) = 0;
  }
  CFArrayRef result = *(const __CFArray **)BytePtr;
  if (*(void *)BytePtr) {
    CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
  }
  *((void *)BytePtr + 3) = result;
  if (!*((void *)BytePtr + 4))
  {
    CFArrayRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *((void *)BytePtr + 4) = result;
  }
  return result;
}

void fappf_PathwayFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  PathwayID = FigAlternateGetPathwayID(a1);
  FirstIndexOfCFNumberRef Value = 0;
  if (PathwayID && *(void *)BytePtr)
  {
    if (!FigCFDictionaryGetCFIndexIfPresent())
    {
      CFArrayRef v5 = *(const __CFArray **)BytePtr;
      v8.length = CFArrayGetCount(*(CFArrayRef *)BytePtr);
      v8.CFIndex location = 0;
      FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v5, v8, PathwayID);
      if (FirstIndexOfValue == -1) {
        FirstIndexOfCFNumberRef Value = CFArrayGetCount(*(CFArrayRef *)BytePtr);
      }
      FigCFDictionarySetCFIndex();
    }
  }
  else
  {
    FirstIndexOfCFNumberRef Value = *((void *)BytePtr + 3);
  }
  if (FirstIndexOfValue < *((void *)BytePtr + 3))
  {
    CFDataRef v6 = (const void *)*((void *)BytePtr + 2);
    *((void *)BytePtr + 2) = PathwayID;
    if (PathwayID) {
      CFRetain(PathwayID);
    }
    if (v6) {
      CFRelease(v6);
    }
    *((void *)BytePtr + 3) = FirstIndexOfValue;
  }
}

uint64_t fappf_PathwayFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  PathwayID = FigAlternateGetPathwayID(a1);
  if (!PathwayID) {
    return 1;
  }
  if (!*((void *)BytePtr + 2) && !*((void *)BytePtr + 1))
  {
    *((void *)BytePtr + 2) = PathwayID;
    CFRetain(PathwayID);
    return 1;
  }

  return FigCFEqual();
}

CFStringRef fappf_PathwayFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Pathway Priority: %@, Fallback Pathway: %@", v3, *((void *)BytePtr + 1));
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

void fappfContextDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  CFStringRef v4 = *ptr;
  if (v4)
  {
    CFRelease(v4);
    *ptr = 0;
  }
  CFArrayRef v5 = ptr[1];
  if (v5)
  {
    CFRelease(v5);
    ptr[1] = 0;
  }
  CFDataRef v6 = ptr[2];
  if (v6)
  {
    CFRelease(v6);
    ptr[2] = 0;
  }
  uint64_t v7 = ptr[4];
  if (v7)
  {
    CFRelease(v7);
    ptr[4] = 0;
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateAllowListWithStableVariantIDFilterCreate(uint64_t a1, const void *a2, unsigned int a3, void *a4)
{
  if (a3 >= 0x372) {
    CFStringRef v4 = 0;
  }
  else {
    CFStringRef v4 = faf_allEqualMinSortingFn;
  }
  long long v6 = 0uLL;
  uint64_t v7 = fasvip_StableVariantIDFilterFn;
  CFRange v8 = v4;
  uint64_t v9 = 0;
  return FigSimpleAlternateFilterCreate(a1, @"StableVariantIDPinning", a3, &v6, a2, a4);
}

uint64_t fasvip_StableVariantIDFilterFn(uint64_t a1)
{
  FigAlternateGetStableStreamIdentifier(a1);

  return FigCFEqual();
}

uint64_t faf_allEqualMinSortingFn()
{
  return 0;
}

uint64_t FigAlternateAllowListWithStableRenditionIDFilterCreate(void *a1, CFTypeRef cf, const void *a3, int a4, unsigned int a5, void *a6)
{
  uint64_t v16 = 0;
  if (cf) {
    CFTypeRef v11 = CFRetain(cf);
  }
  else {
    CFTypeRef v11 = 0;
  }
  v15[0] = v11;
  if (a3) {
    CFTypeRef v12 = CFRetain(a3);
  }
  else {
    CFTypeRef v12 = 0;
  }
  v15[1] = v12;
  LODWORD(v16) = a4;
  if (a5 >= 0x372) {
    CFDataRef v13 = 0;
  }
  else {
    CFDataRef v13 = faf_allEqualMinSortingFn;
  }
  return fsaf_createWithBytes(a1, @"StableRenditionIDPinning", a5, (uint64_t)fasrif_StableRenditionIDFilterFn, (uint64_t)v13, 0, 0, 0, v15, 0x18uLL, (void (__cdecl *)(void *, void *))fasrifContextDeallocateCallback, a6);
}

uint64_t fsaf_createWithBytes(void *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CFTypeRef (*a8)(), const void *a9, size_t a10, void (__cdecl *a11)(void *, void *), void *a12)
{
  context.version = 0;
  context.info = a1;
  context.retain = (CFAllocatorRetainCallBack)FigCFRetain;
  context.release = (CFAllocatorReleaseCallBack)FigCFRelease_2;
  memset(&context.copyDescription, 0, 24);
  context.deallocate = a11;
  context.preferredSize = 0;
  if (a8) {
    CFTypeRef v17 = a8;
  }
  else {
    CFTypeRef v17 = fsaf_copyEmptyDescAddendum;
  }
  uint64_t v18 = (UInt8 *)CFAllocatorAllocate((CFAllocatorRef)a1, a10, 0);
  if (v18)
  {
    uint64_t v19 = v18;
    memcpy(v18, a9, a10);
    CFAllocatorRef v20 = CFAllocatorCreate((CFAllocatorRef)a1, &context);
    if (!v20) {
      return FigSignalErrorAt();
    }
    CFAllocatorRef v21 = v20;
    CFDataRef v22 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)a1, v19, a10, v20);
    if (v22)
    {
      CFDataRef v23 = v22;
      *(void *)&long long v29 = a7;
      *((void *)&v29 + 1) = a6;
      uint64_t v30 = a4;
      uint64_t v31 = a5;
      int v32 = v17;
      uint64_t v24 = FigSimpleAlternateFilterCreate((uint64_t)a1, a2, a3, &v29, v22, a12);
      CFRelease(v21);
      CFDataRef v25 = v23;
    }
    else
    {
      uint64_t v24 = FigSignalErrorAt();
      CFDataRef v25 = v21;
    }
    CFRelease(v25);
    return v24;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fasrif_StableRenditionIDFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  FigAlternateGetStableStreamIdentifierForMediaSubstream(a1, *((_DWORD *)BytePtr + 4), *(const void **)BytePtr);

  return FigCFEqual();
}

void fasrifContextDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  CFStringRef v4 = *ptr;
  if (v4)
  {
    CFRelease(v4);
    *ptr = 0;
  }
  CFArrayRef v5 = ptr[1];
  if (v5)
  {
    CFRelease(v5);
    ptr[1] = 0;
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateMediaSelectionAudibleFilterCreate(uint64_t a1, const void *a2, void *a3)
{
  MEMORY[0x19970EE10](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v7 = CFRetain(a2);
    }
    else {
      CFTypeRef v7 = 0;
    }
    void *DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

uint64_t FigAlternateSuppressAudioOnlyFilterCreate(const __CFAllocator *a1, void *a2)
{
  return fsaf_createWithNoContext(a1, @"SuppressAudioOnly", 950, (uint64_t)FigAlternateHasVideo, (uint64_t)faf_allEqualMinSortingFn, a2);
}

uint64_t fsaf_createWithNoContext(const __CFAllocator *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  *(void *)bytes = a4;
  uint64_t v23 = a5;
  CFDataRef v12 = CFDataCreate(a1, bytes, 16);
  if (!v12) {
    return FigSignalErrorAt();
  }
  CFDataRef v13 = v12;
  if (a5) {
    CFTypeRef v14 = fsaf_ComparatorFnNoContext;
  }
  else {
    CFTypeRef v14 = 0;
  }
  if (a4) {
    uint64_t v15 = fsaf_filterFnNoContext;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v18 = 0uLL;
  uint64_t v19 = v15;
  CFAllocatorRef v20 = v14;
  CFAllocatorRef v21 = fsaf_copyEmptyDescAddendum;
  uint64_t v16 = FigSimpleAlternateFilterCreate((uint64_t)a1, a2, a3, &v18, v12, a6);
  CFRelease(v13);
  return v16;
}

uint64_t FigAlternateIFramesOnlyFilterCreate(const __CFAllocator *a1, void *a2)
{
  return fsaf_createWithNoContext(a1, @"IFramesOnly", 950, (uint64_t)FigAlternateIsIFrameOnly, 0, a2);
}

uint64_t FigAlternateContinuousFramesOnlyFilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"ContinuousFramesOnly", 950, (long long *)&unk_1EE504510, 0, a2);
}

BOOL faf_ContinuousFramesOnlyFilterFn(uint64_t a1)
{
  return FigAlternateIsIFrameOnly(a1) == 0;
}

uint64_t FigAlternateURLDependencyDenyListFilterCreate(void *a1, CFTypeRef cf, const void *a3, int a4, void *a5)
{
  if (cf)
  {
    v14[0] = CFRetain(cf);
    if (a3) {
      CFTypeRef v10 = CFRetain(a3);
    }
    else {
      CFTypeRef v10 = 0;
    }
    v14[1] = v10;
    if (a4) {
      int v11 = 890;
    }
    else {
      int v11 = 878;
    }
    if (a4) {
      CFDataRef v12 = 0;
    }
    else {
      CFDataRef v12 = faf_allEqualMinSortingFn;
    }
    return fsaf_createWithBytes(a1, @"URLDependency", v11, (uint64_t)faf_urlDependencyFilterFn, (uint64_t)v12, 0, 0, 0, v14, 0x10uLL, (void (__cdecl *)(void *, void *))faf_urlDependencyDeallocateCallback, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL faf_urlDependencyFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (CFArrayRef *)CFDataGetBytePtr(theData);
  FigAlternateGetPlaylistAlternateURL(a1);
  if (!CFArrayGetCount(*BytePtr)) {
    return 1;
  }
  if (!BytePtr[1]) {
    return FigCFArrayContainsValue() == 0;
  }
  if (!FigAlternateHasVideo(a1)) {
    FigAlternateHasAudio(a1);
  }
  CFIndex Count = CFArrayGetCount(BytePtr[1]);
  if (Count < 1) {
    return FigCFArrayContainsValue() == 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(BytePtr[1], v7);
    CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
    int v13 = 0;
    if (FigCFStringGetOSTypeValue())
    {
      CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      CFDictionaryRef v10 = 0;
      FigAlternateGetRenditionInfoForMediaType(a1, v13, Value, Value, Value, 0, &v10, &v12, &v11);
      if (v12)
      {
        if (FigCFArrayContainsValue()) {
          break;
        }
      }
    }
    if (v6 == ++v7) {
      return FigCFArrayContainsValue() == 0;
    }
  }
  return 0;
}

void faf_urlDependencyDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  CFStringRef v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = ptr[1];
  if (v5) {
    CFRelease(v5);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateScanModePreferenceFilterCreate(const __CFAllocator *a1, UInt8 a2, void *a3)
{
  UInt8 bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, &bytes, 1);
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"ScanModePreference", 881, (long long *)&unk_1EE504538, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL faf_ScanModeFn(uint64_t a1, CFDataRef theData)
{
  int v3 = *CFDataGetBytePtr(theData);
  return v3 == FigAlternateIsIFrameOnly(a1);
}

uint64_t faf_ScanModeMinSortingFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  int v5 = *CFDataGetBytePtr(theData);
  unsigned int IsIFrameOnly = FigAlternateIsIFrameOnly(a1);
  unsigned int v7 = FigAlternateIsIFrameOnly(a2);
  uint64_t v8 = -1;
  if (IsIFrameOnly >= v7) {
    uint64_t v8 = 1;
  }
  if (IsIFrameOnly == v7) {
    uint64_t v8 = 0;
  }
  if (v5) {
    return -v8;
  }
  else {
    return v8;
  }
}

CFTypeRef faf_copyScanModePreferenceDescAddendum(int a1, CFDataRef theData)
{
  if (*CFDataGetBytePtr(theData)) {
    uint64_t v2 = @"I-Frame";
  }
  else {
    uint64_t v2 = @"contiguous";
  }

  return CFRetain(v2);
}

uint64_t FigAlternateSupportedAudioFormatFilterCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  *(_DWORD *)UInt8 bytes = a2;
  char v11 = BYTE6(a2);
  __int16 v10 = WORD2(a2);
  CFDataRef v5 = CFDataCreate(a1, bytes, 7);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"SupportedAudioFormat", 1000, (long long *)&unk_1EE504560, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL faf_supportedAudioFormatFilterFn(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int v4 = *BytePtr;
  int v5 = BytePtr[1];
  int v6 = BytePtr[2];
  int v7 = BytePtr[3];
  int v8 = BytePtr[4];
  int v9 = BytePtr[5];
  int v10 = BytePtr[6];
  if (FigAlternateHasAudioFormat((uint64_t)a1, 7))
  {
    BOOL v11 = !v9 && v8 == 0;
    if (v11 && v6 == 0) {
      return 0;
    }
  }
  if (FigAlternateHasAudioFormat((uint64_t)a1, 6) && !v8 && !v5
    || FigAlternateHasAudioFormat((uint64_t)a1, 5) && !v7 && !v4)
  {
    return 0;
  }
  int HasAudioFormat = FigAlternateHasAudioFormat((uint64_t)a1, 3);
  BOOL result = 1;
  if (HasAudioFormat)
  {
    if (!v10) {
      return (int)FigAlternateGetMaxAudioChannelCount(a1) < 3;
    }
  }
  return result;
}

CFStringRef faf_copySupportedAudioFormatDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (BytePtr[3]) {
    int v3 = "YES";
  }
  else {
    int v3 = "NO";
  }
  if (BytePtr[4]) {
    int v4 = "YES";
  }
  else {
    int v4 = "NO";
  }
  if (BytePtr[5]) {
    int v5 = "YES";
  }
  else {
    int v5 = "NO";
  }
  if (*BytePtr) {
    int v6 = "YES";
  }
  else {
    int v6 = "NO";
  }
  if (BytePtr[1]) {
    int v7 = "YES";
  }
  else {
    int v7 = "NO";
  }
  if (BytePtr[2]) {
    int v8 = "YES";
  }
  else {
    int v8 = "NO";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"ac3IsDecodable:%s ec3IsDecodable:%s atmosIsDecodable:%s, ac3CanPassthrough:%s ec3CanPassthrough:%s, atmosCanPassthrough:%s", v3, v4, v5, v6, v7, v8);
}

uint64_t FigAlternateLowPowerModeFilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"LowPowerMode", 850, (long long *)&unk_1EE504588, 0, a2);
}

BOOL faf_LowPowerModeFilterFn(unint64_t a1)
{
  return FigAlternateShouldBeAvoidedForPlaybackInLPM(a1) == 0;
}

uint64_t FigAlternatePreferVideoCodecsWithHardwareDecodeFilterCreate(const __CFAllocator *a1, void *a2)
{
  UInt8 bytes = 0;
  CFDataRef v4 = CFDataCreate(a1, &bytes, 1);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFDataRef v5 = v4;
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PreferVideoCodecsWithHardwareDecode", 876, (long long *)&off_1EE5045B0, v4, a2);
  CFRelease(v5);
  return v6;
}

const UInt8 *faf_PreferVideoCodecsWithHardwareDecodeFilterInit(const __CFData *a1)
{
  BOOL result = CFDataGetBytePtr(a1);
  *BOOL result = 0;
  return result;
}

uint64_t faf_PreferVideoCodecsWithHardwareDecodeFirstPassFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateHasVideo(a1);
  if (result)
  {
    uint64_t result = FigAlternateHasVideoCodecRequiringSoftwareDecode(a1);
    BOOL v5 = result == 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  *BytePtr |= v5;
  return result;
}

BOOL faf_PreferVideoCodecsWithHardwareDecodeFilterFn(uint64_t a1, CFDataRef theData)
{
  return !*CFDataGetBytePtr(theData)
      || !FigAlternateHasVideo(a1)
      || !FigAlternateHasVideoCodecRequiringSoftwareDecode(a1);
}

uint64_t FigAlternateOfflinePlayableForMediaSelectionFilterCreate(void *a1, uint64_t a2, const __CFArray *a3, int a4, void *a5)
{
  CFTypeRef v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t result = FigStreamingCacheCopyCompletedMediaStreamURLs(a2, (CFArrayRef *)&v11, (CFArrayRef *)&v11 + 1);
  if (!result)
  {
    if (a4) {
      int v10 = 0;
    }
    else {
      int v10 = faf_allEqualMinSortingFn;
    }
    *(void *)&long long v12 = faf_copyMediaSelectionPersistentIDForMediaType(a3, 1986618469);
    *((void *)&v12 + 1) = faf_copyMediaSelectionPersistentIDForMediaType(a3, 1936684398);
    CFTypeRef v13 = faf_copyMediaSelectionPersistentIDForMediaType(a3, 1935832172);
    return fsaf_createWithBytes(a1, @"OfflinePlayable", 1050, (uint64_t)faf_offlinePlayableFilterFn, (uint64_t)v10, 0, 0, 0, &v11, 0x28uLL, (void (__cdecl *)(void *, void *))faf_offlinePlayableForMediaSelectionFilterBytesDeallocateCallback, a5);
  }
  return result;
}

CFTypeRef faf_copyMediaSelectionPersistentIDForMediaType(CFArrayRef theArray, int a2)
{
  CFIndex v4 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); ; CFIndex i = 0)
  {
    if (v4 >= i) {
      return 0;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v4);
    if ((CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsMediaType")
       || CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType"))
      && FigCFStringGetOSTypeValue()
      && !a2)
    {
      break;
    }
    ++v4;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  CFTypeRef result = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
  if (result) {
    return CFRetain(result);
  }
  return result;
}

BOOL faf_offlinePlayableFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  BOOL v4 = faf_isMediaSelectionOptionOfflinePlayable((uint64_t)BytePtr, a1, 1986618469)
    && (!*((void *)BytePtr + 3)
     || faf_isMediaSelectionOptionOfflinePlayable((uint64_t)BytePtr, a1, 1936684398))
    && (!*((void *)BytePtr + 4)
     || faf_isMediaSelectionOptionOfflinePlayable((uint64_t)BytePtr, a1, 1935832172));
  FigAlternateSetLastKnownValueForIsFullyCached(a1, v4);
  return v4;
}

void faf_offlinePlayableForMediaSelectionFilterBytesDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  BOOL v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }
  BOOL v5 = ptr[1];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = ptr[2];
  if (v6) {
    CFRelease(v6);
  }
  int v7 = ptr[3];
  if (v7) {
    CFRelease(v7);
  }
  int v8 = ptr[4];
  if (v8) {
    CFRelease(v8);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateAllowableMediaSubtypeFilterCreate(const __CFAllocator *a1, const __CFArray *a2, const __CFArray *a3, void *a4)
{
  uint64_t v16 = 0;
  int v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  v15[0] = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  v15[1] = CFArrayCreateMutable(a1, 0, v8);
  if (FigCFArrayContainsInt32()) {
    BOOL v9 = FigCFArrayContainsInt32() == 0;
  }
  else {
    BOOL v9 = 0;
  }
  CFIndex v10 = 0;
  LOBYTE(v16) = v9;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_5:
  for (CFIndex i = CFArrayGetCount(a2); v10 < i; CFIndex i = 0)
  {
    FigCFArrayGetInt32AtIndex();
    if (!FigCFArrayContainsInt32()) {
      FigCFArrayAppendInt32();
    }
    ++v10;
    if (a2) {
      goto LABEL_5;
    }
LABEL_6:
    ;
  }
  CFIndex v12 = 0;
  if (!a3) {
    goto LABEL_14;
  }
LABEL_13:
  for (CFIndex j = CFArrayGetCount(a3); v12 < j; CFIndex j = 0)
  {
    FigCFArrayGetInt32AtIndex();
    if (!FigCFArrayContainsInt32()) {
      FigCFArrayAppendInt32();
    }
    ++v12;
    if (a3) {
      goto LABEL_13;
    }
LABEL_14:
    ;
  }
  return fsaf_createWithBytes(a1, @"AllowableMediaSubtypes", 885, (uint64_t)faf_allowableMediaSubtypeIsAlternateMediaSubtypesAllowed, 0, 0, 0, (CFTypeRef (*)())faf_allowableMediaSubtypeDescAddendum, v15, 0x18uLL, (void (__cdecl *)(void *, void *))faf_allowableMediaSubtypesDeallocateCallback, a4);
}

BOOL faf_allowableMediaSubtypeIsAlternateMediaSubtypesAllowed(const __CFArray *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFArrayRef v4 = (const __CFArray *)*((void *)BytePtr + 1);
  if ((!v4 || CFArrayGetCount(v4) <= 0) && (!*(void *)BytePtr || CFArrayGetCount(*(CFArrayRef *)BytePtr) < 1)) {
    return 1;
  }
  if (FigAlternateHasUnknownCodecs((uint64_t)a1)) {
    return 0;
  }
  CFArrayRef v5 = (const __CFArray *)*((void *)BytePtr + 1);
  if (v5 && CFArrayGetCount(v5) >= 1)
  {
    unsigned int CountOfValidMediaSubTypes = FigAlternateGetCountOfValidMediaSubTypes(a1, 1936684398);
    if (!BytePtr[16]) {
      CountOfValidMediaSubTypes += FigAlternateHasAudioFormat((uint64_t)a1, 7);
    }
    int v7 = 0;
    for (uint64_t i = 0; ; ++i)
    {
      CFArrayRef Count = (const __CFArray *)*((void *)BytePtr + 1);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      FigCFArrayGetInt32AtIndex();
      v7 += FigAlternateHasAudioFormatID((uint64_t)a1, 0);
    }
    if (v7 != CountOfValidMediaSubTypes) {
      return 0;
    }
  }
  if (!*(void *)BytePtr || CFArrayGetCount(*(CFArrayRef *)BytePtr) < 1) {
    return 1;
  }
  unsigned int v10 = FigAlternateGetCountOfValidMediaSubTypes(a1, 1986618469);
  int v11 = 0;
  for (uint64_t j = 0; ; ++j)
  {
    CFArrayRef v13 = *(const __CFArray **)BytePtr;
    if (*(void *)BytePtr) {
      CFArrayRef v13 = (const __CFArray *)CFArrayGetCount(v13);
    }
    if (j >= (uint64_t)v13) {
      break;
    }
    FigCFArrayGetInt32AtIndex();
    v11 += FigAlternateHasVideoCodecType((uint64_t)a1, 0);
  }
  return v11 == v10;
}

CFStringRef faf_allowableMediaSubtypeDescAddendum(int a1, CFDataRef theData)
{
  CFDataGetBytePtr(theData);
  uint64_t v2 = (const void *)FigCFCopyCompactDescription();
  int v3 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"videoSubtypes:%@ audioSubtypes:%@", v2, v3);
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

void faf_allowableMediaSubtypesDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  CFStringRef v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }
  CFArrayRef v5 = ptr[1];
  if (v5) {
    CFRelease(v5);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternatePreferredVideoFormatFilterCreate(CFAllocatorRef allocator, int a2, unsigned int a3, void *a4)
{
  *(_DWORD *)UInt8 bytes = a2;
  int v11 = a3;
  uint64_t v12 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)UInt8 bytes = 4;
      goto LABEL_4;
    case 1:
      if (a3 - 7 > 1) {
        goto LABEL_4;
      }
      goto LABEL_8;
    case 2:
      if (a3 > 9 || ((1 << a3) & 0x230) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    case 3:
      if (!a3) {
        goto LABEL_15;
      }
      if (a3 != 2 && a3 != 1) {
        goto LABEL_16;
      }
LABEL_8:
      uint64_t result = FigSignalErrorAt();
      break;
    default:
LABEL_4:
      if (!a3) {
LABEL_15:
      }
        int v11 = 9;
LABEL_16:
      uint64_t v13 = 0;
      CFDataRef v7 = CFDataCreate(allocator, bytes, 24);
      if (v7)
      {
        CFDataRef v8 = v7;
        uint64_t v9 = FigSimpleAlternateFilterCreate((uint64_t)allocator, @"PreferredVideoFormat", 800, (long long *)&off_1EE5045D8, v7, a4);
        CFRelease(v8);
      }
      else
      {
        uint64_t v9 = FigSignalErrorAt();
      }
      uint64_t result = v9;
      break;
  }
  return result;
}

const UInt8 *faf_videoFormatPreferenceApplyFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 16) = 0;
  *((void *)result + 1) = 0;
  return result;
}

uint64_t faf_videoFormatFilterFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!(BytePtr[16] | result))
  {
    int VideoRange = FigAlternateGetVideoRange(a1);
    uint64_t result = FigAlternateGetBestVideoFormat(a1);
    if (VideoRange == *(_DWORD *)BytePtr && result == *((_DWORD *)BytePtr + 1))
    {
      *((unsigned char *)BytePtr + 16) = 1;
    }
    else
    {
      uint64_t v7 = *((void *)BytePtr + 1);
      if (!v7 || (uint64_t result = faf_videoFormatPreferenceFilterMinSortingFn(a1, v7, theData), result == -1)) {
        *((void *)BytePtr + 1) = a1;
      }
    }
  }
  return result;
}

uint64_t faf_videoFormatPreferenceFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int VideoRange = FigAlternateGetVideoRange(a1);
  int BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  int IsAudioOnly = FigAlternateIsAudioOnly(a1);
  if (!BytePtr[16])
  {
    BOOL v8 = faf_videoFormatPreferenceFilterMinSortingFn(a1, *((void *)BytePtr + 1), theData) == 0;
LABEL_5:
    unsigned int v9 = v8;
    goto LABEL_9;
  }
  if (VideoRange == *(_DWORD *)BytePtr)
  {
    BOOL v8 = BestVideoFormat == *((_DWORD *)BytePtr + 1);
    goto LABEL_5;
  }
  unsigned int v9 = 0;
LABEL_9:
  if (IsAudioOnly) {
    return 1;
  }
  else {
    return v9;
  }
}

CFStringRef faf_copyPreferredVideoFormatDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (int *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  StringFromint VideoRange = FigAlternateGetStringFromVideoRange(*BytePtr);
  StringFromVideoFormat = FigAlternateGetStringFromVideoFormat(BytePtr[1]);
  return CFStringCreateWithFormat(v3, 0, @"preferredRange:%@ preferredFormat:%@", StringFromVideoRange, StringFromVideoFormat);
}

uint64_t FigAlternateNeroSupportedVideoFormatFilterCreate(const __CFAllocator *a1, void *a2)
{
  long long v8 = xmmword_1949964B8;
  uint64_t v9 = 0;
  CFDataRef v4 = CFDataCreate(a1, (const UInt8 *)&v8, 24);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFDataRef v5 = v4;
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"NeroSupportedVideoFormat", 1000, (long long *)&unk_1EE504600, v4, a2);
  CFRelease(v5);
  return v6;
}

uint64_t faf_neroSupportedVideoFormatFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  unsigned int VideoRange = FigAlternateGetVideoRange(a1);
  uint64_t result = FigAlternateGetBestVideoFormat(a1);
  if (__PAIR64__(result, VideoRange) == *(void *)BytePtr) {
    *((unsigned char *)BytePtr + 16) = 1;
  }
  return result;
}

uint64_t faf_neroSupportedVideoFormatFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int IsAudioOnly = FigAlternateIsAudioOnly(a1);
  int VideoRange = FigAlternateGetVideoRange(a1);
  int BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  if (BytePtr[16])
  {
    if (VideoRange == *(_DWORD *)BytePtr)
    {
      BOOL v7 = 0;
      BOOL v8 = BestVideoFormat == *((_DWORD *)BytePtr + 1);
      goto LABEL_9;
    }
  }
  else if (!FigAlternateGetCodecString(a1))
  {
    BOOL v8 = 0;
    BOOL v7 = VideoRange == *(_DWORD *)BytePtr || VideoRange == 0;
    goto LABEL_9;
  }
  BOOL v8 = 0;
  BOOL v7 = 0;
LABEL_9:
  BOOL v9 = v7;
  unsigned int v10 = v8 || v9;
  if (IsAudioOnly) {
    return 1;
  }
  else {
    return v10;
  }
}

uint64_t FigAlternatePreferBestFormatForVideoRangeFilterCreate(const __CFAllocator *a1, int a2, void *a3)
{
  *(void *)UInt8 bytes = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((a2 - 4) <= 0xFFFFFFFC)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)UInt8 bytes = a2;
    CFDataRef v5 = CFDataCreate(a1, bytes, 24);
    if (!v5) {
      return FigSignalErrorAt();
    }
    CFDataRef v6 = v5;
    uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PreferBestFormatForVideoRange", 700, (long long *)&off_1EE504628, v5, a3);
    CFRelease(v6);
    return v7;
  }
}

double faf_videoFormatApplyFilterInit(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  *((_DWORD *)BytePtr + 1) = 0;
  *(void *)&double result = 7;
  *(_OWORD *)(BytePtr + 8) = xmmword_194996490;
  return result;
}

uint64_t faf_preferBestFormatForVideoRangeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!result)
  {
    uint64_t result = FigAlternateGetVideoRange(a1);
    if (result == *(_DWORD *)BytePtr)
    {
      unsigned int BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
      unsigned int v6 = *((_DWORD *)BytePtr + 1);
      uint64_t result = FigAlternateGetBestVideoFormat(a1);
      if (BestVideoFormat > v6)
      {
        *((_DWORD *)BytePtr + 1) = result;
        uint64_t result = faf_alternateVideoVertResolutionBucket(a1);
        *((void *)BytePtr + 1) = result;
LABEL_7:
        *((void *)BytePtr + 2) = result;
        return result;
      }
      if (result != *((_DWORD *)BytePtr + 1)) {
        return result;
      }
      uint64_t result = faf_alternateVideoVertResolutionBucket(a1);
      if (result > *((void *)BytePtr + 2)) {
        goto LABEL_7;
      }
      if (result < *((void *)BytePtr + 1)) {
        *((void *)BytePtr + 1) = result;
      }
    }
  }
  return result;
}

BOOL faf_preferBestFormatForVideoRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v4 = faf_alternateVideoVertResolutionBucket(a1);
  return FigAlternateIsAudioOnly(a1)
      || FigAlternateGetVideoRange(a1) != *(_DWORD *)BytePtr
      || FigAlternateGetBestVideoFormat(a1) == *((_DWORD *)BytePtr + 1)
      || v4 < *((void *)BytePtr + 1)
      || v4 > *((void *)BytePtr + 2);
}

CFStringRef faf_copyPreferBestFormatForVideoRangeDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (int *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  StringFromint VideoRange = FigAlternateGetStringFromVideoRange(*BytePtr);
  StringFromVideoFormat = FigAlternateGetStringFromVideoFormat(BytePtr[1]);
  return CFStringCreateWithFormat(v3, 0, @"videoRange:%@ bestFormat:%@", StringFromVideoRange, StringFromVideoFormat);
}

uint64_t FigAlternateDisplaySizeFilterCreate(const __CFAllocator *a1, void *a2, double a3, double a4)
{
  v10[2] = 0;
  _OWORD v10[3] = 0;
  *(double *)uint64_t v10 = a3;
  *(double *)&v10[1] = a4;
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"DisplaySize", 700, (long long *)&off_1EE504650, v6, a2);
  CFRelease(v7);
  return v8;
}

const UInt8 *faf_displaySizeApplyInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 16) = 0;
  *((void *)result + 3) = 0xBFF0000000000000;
  return result;
}

void faf_displaySizeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  double Resolution = FigAlternateGetResolution(a1);
  double v6 = v5 * Resolution;
  if (v5 * Resolution > 0.0)
  {
    double v7 = Resolution;
    double v8 = v5;
    if (!FigAlternateIsAudioOnly(a1))
    {
      double v9 = *((double *)BytePtr + 1);
      BOOL v10 = v7 < *(double *)BytePtr * 1.35 && v8 < v9 * 1.35;
      if (v10 && v6 < *(double *)BytePtr * v9 * 1.35 * 1.35) {
        *((unsigned char *)BytePtr + 16) = 1;
      }
      double v11 = *((double *)BytePtr + 3);
      if (v11 < 0.0 || v6 < v11) {
        *((double *)BytePtr + 3) = v6;
      }
    }
  }
}

BOOL faf_displaySizeFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  double Resolution = FigAlternateGetResolution(a1);
  double v6 = v5 * Resolution;
  BOOL result = 1;
  if (v5 * Resolution > 0.0)
  {
    double v7 = Resolution;
    double v8 = v5;
    if (!FigAlternateIsAudioOnly(a1))
    {
      double v10 = *((double *)BytePtr + 1);
      BOOL v11 = v7 < *(double *)BytePtr * 1.35 && v8 < v10 * 1.35;
      if ((!v11 || v6 >= *(double *)BytePtr * v10 * 1.35 * 1.35)
        && (BytePtr[16] || vabdd_f64(v6, *((double *)BytePtr + 3)) >= 2.22044605e-16))
      {
        return 0;
      }
    }
  }
  return result;
}

CFStringRef faf_copyDisplaySizeDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"displaySize:[%.0fx%.0f]", *(void *)BytePtr, *((void *)BytePtr + 1));
}

uint64_t FigAlternatePreferredVideoRangeFilterCreate(const __CFAllocator *a1, int a2, void *a3)
{
  *(_DWORD *)&UInt8 bytes[4] = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  *(_DWORD *)UInt8 bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, bytes, 24);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PreferredVideoRange", 800, (long long *)&off_1EE504678, v5, a3);
  CFRelease(v6);
  return v7;
}

const UInt8 *faf_videoRangeFilterApplyFilterInit(const __CFData *a1)
{
  BOOL result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 16) = 0;
  *((void *)result + 1) = 0;
  return result;
}

uint64_t faf_videoRangeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!(BytePtr[16] | result))
  {
    uint64_t result = FigAlternateGetVideoRange(a1);
    if (result == *(_DWORD *)BytePtr)
    {
      BytePtr[16] = 1;
    }
    else
    {
      uint64_t v5 = *((void *)BytePtr + 1);
      if (!v5 || (uint64_t result = faf_videoRangeMinSortingFn(a1, v5, (unsigned int *)BytePtr), result == -1)) {
        *((void *)BytePtr + 1) = a1;
      }
    }
  }
  return result;
}

uint64_t faf_videoRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  int VideoRange = FigAlternateGetVideoRange(a1);
  int IsAudioOnly = FigAlternateIsAudioOnly(a1);
  if (BytePtr[16]) {
    BOOL v6 = VideoRange == *(_DWORD *)BytePtr;
  }
  else {
    BOOL v6 = faf_videoRangeMinSortingFn(a1, *((void *)BytePtr + 1), (unsigned int *)BytePtr) == 0;
  }
  unsigned int v7 = v6;
  if (IsAudioOnly) {
    return 1;
  }
  else {
    return v7;
  }
}

CFStringRef faf_copyVideoRangeDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (int *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  StringFromint VideoRange = FigAlternateGetStringFromVideoRange(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, @"desiredVideoRange:%@", StringFromVideoRange);
}

uint64_t FigAlternateVideoFormatFilterCreate(const __CFAllocator *a1, int a2, void *a3)
{
  *(_DWORD *)UInt8 bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, bytes, 4);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PreferredVideoFormat", 800, (long long *)&unk_1EE5046A0, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t faf_videoFormatFilterFn(uint64_t a1, CFDataRef theData)
{
  int v3 = *(_DWORD *)CFDataGetBytePtr(theData);

  return FigAlternateHasVideoFormat(a1, v3);
}

CFStringRef faf_copyVideoFormatDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (int *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  StringFromVideoFormat = FigAlternateGetStringFromVideoFormat(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, @"desiredVideoFormat:%@", StringFromVideoFormat);
}

uint64_t FigAlternateFramerateBucketCapFilterCreate(const __CFAllocator *a1, int a2, void *a3)
{
  *(_DWORD *)&UInt8 bytes[4] = 0;
  *(_DWORD *)UInt8 bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, bytes, 8);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"FrameRateBucketCap", 700, (long long *)&unk_1EE5046C8, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t fafb_framerateBucketCapFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  Framedouble Rate = FigAlternateGetFrameRate(a1);
  uint64_t result = FigFrameRateToFrameRateBucket(FrameRate);
  if (result <= *(_DWORD *)BytePtr)
  {
    uint64_t result = FigAlternateIsAudioOnly(a1);
    if (!result) {
      *((unsigned char *)BytePtr + 4) = 1;
    }
  }
  return result;
}

BOOL fafb_framerateBucketCapFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateIsAudioOnly(a1)) {
    return 1;
  }
  Framedouble Rate = FigAlternateGetFrameRate(a1);
  return FigFrameRateToFrameRateBucket(FrameRate) <= *(_DWORD *)BytePtr || BytePtr[4] == 0;
}

CFStringRef fafb_copyFramerateBucketCapDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  StringFromFramerateBucket = FigAlternateGetStringFromFramerateBucket(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, @"framerateBucketCap:%@", StringFromFramerateBucket);
}

uint64_t FigAlternatePreferredAudioFormatFilterCreate(const __CFAllocator *a1, unsigned int a2, unsigned int a3, const __CFDictionary *a4, char a5, CFNumberRef number, int a7, void *a8)
{
  long long v26 = 0u;
  long long v27 = 0u;
  *(void *)&long long v25 = __PAIR64__(a3, a2);
  DWORD2(v25) = -1;
  HIDWORD(v25) = a7;
  LOBYTE(v26) = a5;
  if (number) {
    CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&v25 + 8);
  }
  if (a2 <= 4)
  {
    if (a2 - 1 < 4) {
      int v13 = 1;
    }
    else {
      int v13 = 9;
    }
    LODWORD(v25) = v13;
  }
  if (!a3) {
    DWORD1(v25) = 0x7FFFFFFF;
  }
  uint64_t Count = FigCFDictionaryGetCount();
  CFIndex v15 = 16 * Count + 48;
  CFMutableArrayRef Mutable = CFDataCreateMutable(a1, v15);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFTypeRef v17 = Mutable;
  CFDataSetLength(Mutable, v15);
  MutableBytePtr = CFDataGetMutableBytePtr(v17);
  long long v20 = v26;
  long long v19 = v27;
  *(_OWORD *)MutableBytePtr = v25;
  *((_OWORD *)MutableBytePtr + 1) = v20;
  *((_OWORD *)MutableBytePtr + 2) = v19;
  if (Count >= 1)
  {
    CFAllocatorRef v21 = MutableBytePtr;
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)faf_storeChannelCountMaxSampleRate, MutableBytePtr);
    int64_t v22 = *((void *)v21 + 5);
    if (v22 >= 2) {
      qsort(v21 + 48, v22, 0x10uLL, (int (__cdecl *)(const void *, const void *))faf_maxSampleRateComparator);
    }
  }
  uint64_t v23 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PreferredAudioFormat", 750, (long long *)&off_1EE5046F0, v17, a8);
  CFRelease(v17);
  return v23;
}

const UInt8 *faf_audioFormatApplyFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 32) = 0;
  *((void *)result + 3) = 0;
  return result;
}

uint64_t faf_audioFormatFilterFirstPassFn(const void *a1, CFDataRef theData)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t result = FigAlternateHasVideo((uint64_t)a1);
  if (result)
  {
    uint64_t result = FigAlternateHasAudio(a1);
    BOOL v6 = result != 0;
  }
  else
  {
    BOOL v6 = 1;
  }
  if (BytePtr[32]) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = !v6;
  }
  if (!v7)
  {
    uint64_t v10 = *(void *)BytePtr;
    LODWORD(v11) = 0;
    BYTE4(v11) = BytePtr[16];
    uint64_t v12 = 0;
    LODWORD(v13) = 0x80000000;
    faf_populateAudioFormatAlternateComparatorRec(a1, *((_DWORD *)BytePtr + 2), (uint64_t)v9);
    uint64_t result = faf_audioFormatPreferenceComparator((uint64_t)v9, (uint64_t)&v10, (int *)BytePtr);
    if (result)
    {
      double v8 = (const void *)*((void *)BytePtr + 3);
      if (!v8 || (uint64_t result = faf_audioFormatPreferenceFilterMinSortingFn(a1, v8, theData), result == -1)) {
        *((void *)BytePtr + 3) = a1;
      }
    }
    else
    {
      BytePtr[32] = 1;
    }
  }
  return result;
}

uint64_t faf_audioFormatPreferenceFilterFn(const void *a1, CFDataRef theData)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  memset(v9, 0, sizeof(v9));
  if (FigAlternateHasVideo((uint64_t)a1)) {
    BOOL v5 = FigAlternateHasAudio(a1) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (BytePtr[32])
  {
    uint64_t v10 = *(void *)BytePtr;
    LODWORD(v11) = 0;
    BYTE4(v11) = BytePtr[16];
    uint64_t v12 = 0;
    LODWORD(v13) = 0x80000000;
    faf_populateAudioFormatAlternateComparatorRec(a1, *((_DWORD *)BytePtr + 2), (uint64_t)v9);
    uint64_t v6 = faf_audioFormatPreferenceComparator((uint64_t)v9, (uint64_t)&v10, (int *)BytePtr);
    BOOL v7 = v5;
    BOOL v5 = v6 == 0;
  }
  else
  {
    BOOL v7 = faf_audioFormatPreferenceFilterMinSortingFn(a1, *((const void **)BytePtr + 3), theData) == 0;
  }
  return v5 | v7;
}

CFStringRef faf_copyPreferredAudioFormatDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v3 = *((void *)BytePtr + 5);
  if (v3)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (v3 >= 1)
    {
      uint64_t v6 = BytePtr + 56;
      do
      {
        if (--v3) {
          BOOL v7 = ", ";
        }
        else {
          BOOL v7 = "";
        }
        CFStringAppendFormat(Mutable, 0, @"<channel count %d: max sample rate %.3f>%s", *((unsigned int *)v6 - 2), *v6, v7);
        v6 += 2;
      }
      while (v3);
    }
  }
  else
  {
    CFMutableArrayRef Mutable = (__CFString *)CFRetain(@"none");
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  StringFromAudioFormat = FigAlternateGetStringFromAudioFormat(*(_DWORD *)BytePtr);
  double v9 = "YES";
  if (BytePtr[12]) {
    uint64_t v10 = "YES";
  }
  else {
    uint64_t v10 = "NO";
  }
  if (BytePtr[13]) {
    uint64_t v11 = "YES";
  }
  else {
    uint64_t v11 = "NO";
  }
  if (BytePtr[14]) {
    uint64_t v12 = "YES";
  }
  else {
    uint64_t v12 = "NO";
  }
  if (!BytePtr[16]) {
    double v9 = "NO";
  }
  CFStringRef v13 = CFStringCreateWithFormat(v4, 0, @"preferredFormat:%@ preferredMixableNumberOfChannels:%d ac3CanPassthrough:%s ec3CanPassthrough:%s atmosCanPassthrough:%s preferLossyEncodings:%s sampleRateContraints:%@", StringFromAudioFormat, *((unsigned int *)BytePtr + 1), v10, v11, v12, v9, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v13;
}

uint64_t faf_storeChannelCountMaxSampleRate(const __CFNumber *a1, CFNumberRef number, uint64_t a3)
{
  uint64_t v5 = a3 + 48;
  CFNumberGetValue(number, kCFNumberDoubleType, (void *)(a3 + 48 + 16 * *(void *)(a3 + 40) + 8));
  uint64_t v6 = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = v6 + 1;

  return CFNumberGetValue(a1, kCFNumberSInt32Type, (void *)(v5 + 16 * v6));
}

uint64_t faf_maxSampleRateComparator(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t FigAlternateEligibleLosslessAudioFilterCreate(const __CFAllocator *a1, const void *a2, void *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, 0, 0);
  if (Mutable)
  {
    CFMutableDictionaryRef v7 = Mutable;
    double v8 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v8)
    {
      double v9 = v8;
      if (a2) {
        CFDictionarySetValue(v8, @"PersistentID", a2);
      }
      CFDictionarySetValue(v9, @"ChannelCountDict", v7);
      uint64_t v10 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"EligibleLosslessAudio", 760, (long long *)&off_1EE504718, v9, a3);
      CFRelease(v9);
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    CFRelease(v7);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void faf_EligibleLosslessAudioInitFn(const __CFDictionary *a1)
{
  CFNumberRef Value = (__CFDictionary *)CFDictionaryGetValue(a1, @"ChannelCountDict");

  CFDictionaryRemoveAllValues(Value);
}

void faf_EligibleLosslessAudioFirstPassFn(const void *a1, CFDictionaryRef theDict)
{
  int v4 = -1;
  int valuePtr = -1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PersistentID");
  CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ChannelCountDict");
  int v13 = 0;
  key = 0;
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v4 = valuePtr;
  }
  faf_getAlternateAudioFormatInfo(a1, v4, &v13, (_DWORD *)&key + 1, &key, 0);
  CFMutableDictionaryRef v7 = (const void *)HIDWORD(key);
  if (SHIDWORD(key) >= 1)
  {
    unsigned int v8 = CFDictionaryGetValue(v6, (const void *)HIDWORD(key));
    if (v8 != 7)
    {
      if (FigAlternateHasLosslessAudio((uint64_t)a1))
      {
        unsigned int v9 = v8 | 1;
      }
      else
      {
        if (key) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v13 == 1;
        }
        int v11 = 3;
        if (v10) {
          int v11 = 7;
        }
        unsigned int v9 = v11 | v8;
      }
      CFDictionarySetValue(v6, v7, (const void *)v9);
    }
  }
}

uint64_t faf_EligibleLosslessAudioFilterFn(const void *a1, CFDictionaryRef theDict)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"PersistentID");
  CFDictionaryRef v5 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ChannelCountDict");
  int v9 = 0;
  if (FigAlternateHasVideo((uint64_t)a1) && !FigAlternateHasAudio(a1)
    || !FigAlternateHasLosslessAudio((uint64_t)a1))
  {
    return 1;
  }
  int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, Value, &v9, 0);
  unsigned int v7 = CFDictionaryGetValue(v5, (const void *)AudioChannelCounts);
  if ((v7 & 2) != 0) {
    return (v7 >> 2) & 1;
  }
  else {
    return 1;
  }
}

CFTypeRef fsaf_copyEmptyDescAddendum()
{
  return CFRetain(&stru_1EE53F4B8);
}

uint64_t FigAlternateImmersiveAudioPreferenceFilterCreate(const __CFAllocator *a1, CFNumberRef number, int a3, int a4, char a5, void *a6)
{
  long long v15 = 0u;
  long long v16 = 0u;
  if (number) {
    CFNumberGetValue(number, kCFNumberSInt32Type, &v15);
  }
  else {
    LODWORD(v15) = -1;
  }
  DWORD2(v16) = a3;
  DWORD1(v15) = a4;
  BYTE12(v16) = a5;
  CFDataRef v11 = CFDataCreate(a1, (const UInt8 *)&v15, 32);
  if (!v11) {
    return FigSignalErrorAt();
  }
  CFDataRef v12 = v11;
  uint64_t v13 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"ImmersiveAudioPreference", 760, (long long *)&off_1EE504740, v11, a6);
  CFRelease(v12);
  return v13;
}

const UInt8 *faf_ImmersiveAudioPreferenceInitFn(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((void *)result + 2) = 0;
  *((unsigned char *)result + 8) = 0;
  return result;
}

uint64_t faf_ImmersiveAudioPreferenceFirstPassFn(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  ImmersiveAudioCapabiliCGFloat ty = faf_GetImmersiveAudioCapability(a1, theData);
  uint64_t result = FigAlternateGetAverageBitRate((uint64_t)a1);
  if (!BytePtr[8])
  {
    int v7 = *((_DWORD *)BytePtr + 1);
    if (v7 == -1 || (int)result < v7)
    {
      if (ImmersiveAudioCapability == *((_DWORD *)BytePtr + 6))
      {
        *((unsigned char *)BytePtr + 8) = 1;
      }
      else
      {
        int v9 = (const void *)*((void *)BytePtr + 2);
        if (!v9 || (uint64_t result = faf_ImmersiveAudioComparator(a1, v9, theData), result == 1)) {
          *((void *)BytePtr + 2) = a1;
        }
      }
    }
  }
  return result;
}

BOOL faf_ImmersiveAudioPreferenceFilterFn(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  ImmersiveAudioCapabiliCGFloat ty = faf_GetImmersiveAudioCapability(a1, theData);
  AverageBitdouble Rate = FigAlternateGetAverageBitRate((uint64_t)a1);
  if (FigAlternateHasVideo((uint64_t)a1)) {
    BOOL v7 = FigAlternateHasAudio(a1) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = *((_DWORD *)BytePtr + 1);
  if (v8 != -1 && AverageBitRate >= v8) {
    return 0;
  }
  if (BytePtr[8])
  {
    return v7 || ImmersiveAudioCapability == *((_DWORD *)BytePtr + 6);
  }
  else
  {
    if (BytePtr[28]) {
      return 0;
    }
    return !faf_ImmersiveAudioComparator(a1, *((const void **)BytePtr + 2), theData) || v7;
  }
}

CFStringRef faf_ImmersiveAudioPreferenceDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  StringFromImmersiveAudioCapabiliCGFloat ty = FigAlternateGetStringFromImmersiveAudioCapability(*((_DWORD *)BytePtr + 6));
  return CFStringCreateWithFormat(v3, 0, @"capability:%@", StringFromImmersiveAudioCapability);
}

uint64_t FigAlternateLossyAudioPreferenceFilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"LossyAudioPreference", 760, (long long *)&unk_1EE504768, 0, a2);
}

BOOL faf_lossyAudioOnlyFilterFn(uint64_t a1)
{
  return FigAlternateHasLosslessAudio(a1) == 0;
}

uint64_t FigAlternateLosslessAudioPreferenceFilterCreate(uint64_t a1, int a2, void *a3)
{
  if (a2) {
    CFAllocatorRef v3 = 0;
  }
  else {
    CFAllocatorRef v3 = faf_allEqualMinSortingFn;
  }
  long long v5 = 0uLL;
  CFDictionaryRef v6 = faf_losslessAudioOnlyFilterFn;
  BOOL v7 = v3;
  uint64_t v8 = 0;
  return FigSimpleAlternateFilterCreate(a1, @"LosslessAudioPreference", 760, &v5, 0, a3);
}

uint64_t FigAlternateMaximumSampleRatePreferenceFilter(const __CFAllocator *a1, CFNumberRef number, void *a3, double a4)
{
  v10[0] = 0;
  long long v11 = 0u;
  *(double *)&v10[1] = a4;
  if (number) {
    CFNumberGetValue(number, kCFNumberSInt32Type, v10);
  }
  else {
    LODWORD(v10[0]) = -1;
  }
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"MaximumSampleRatePreference", 750, (long long *)&off_1EE504790, v6, a3);
  CFRelease(v7);
  return v8;
}

const UInt8 *faf_maximumSampleRatePreferenceFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 16) = 0;
  *((void *)result + 3) = 0;
  return result;
}

void faf_maximumSampleRatePreferenceFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0) {
    CFNumberRef v4 = 0;
  }
  else {
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
  }
  double AudioSampleRate = FigAlternateGetAudioSampleRate(a1, v4);
  if (AudioSampleRate != 0.0)
  {
    if (AudioSampleRate <= *((double *)BytePtr + 1)) {
      *((unsigned char *)BytePtr + 16) = 1;
    }
    double v6 = *((double *)BytePtr + 3);
    if (v6 == 0.0 || AudioSampleRate < v6) {
      *((double *)BytePtr + 3) = AudioSampleRate;
    }
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

BOOL faf_maximumSampleRatePreferenceFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0) {
    CFNumberRef v4 = 0;
  }
  else {
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
  }
  double AudioSampleRate = FigAlternateGetAudioSampleRate(a1, v4);
  if (AudioSampleRate == 0.0)
  {
    BOOL v6 = 1;
    if (!v4) {
      return v6;
    }
    goto LABEL_9;
  }
  if (BytePtr[16])
  {
    BOOL v6 = AudioSampleRate <= *((double *)BytePtr + 1);
    if (!v4) {
      return v6;
    }
    goto LABEL_9;
  }
  BOOL v6 = AudioSampleRate == *((double *)BytePtr + 3);
  if (v4) {
LABEL_9:
  }
    CFRelease(v4);
  return v6;
}

CFStringRef faf_maximumSampleRatePreferenceDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", (int)*((double *)BytePtr + 1));
}

uint64_t FigAlternateMultichannelAudioFilterCreate(const __CFAllocator *a1, CFNumberRef number, int a3, int a4, void *a5)
{
  uint64_t valuePtr = 0;
  if (a3) {
    CFDataRef v7 = faf_MultichannelAudioFilterFnForMulti;
  }
  else {
    CFDataRef v7 = faf_MultichannelAudioFilterFnForStereo;
  }
  if (a4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = faf_allEqualMinSortingFn;
  }
  if (number) {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  }
  else {
    LODWORD(valuePtr) = -1;
  }
  CFDataRef v9 = CFDataCreate(a1, (const UInt8 *)&valuePtr, 8);
  if (!v9) {
    return FigSignalErrorAt();
  }
  CFDataRef v10 = v9;
  *(void *)&long long v13 = faf_MultichannelAudioFilterFnForMultiInit;
  *((void *)&v13 + 1) = faf_MultichannelAudioFilterFnForMultiFirstPassFn;
  CFTypeRef v14 = v7;
  long long v15 = v8;
  uint64_t v16 = 0;
  uint64_t v11 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"MultichannelAudio", 620, &v13, v9, a5);
  CFRelease(v10);
  return v11;
}

const UInt8 *faf_MultichannelAudioFilterFnForMultiInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 4) = 0;
  return result;
}

void faf_MultichannelAudioFilterFnForMultiFirstPassFn(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr[4])
  {
    CFNumberRef v4 = BytePtr;
    if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
    {
      int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, 0, 0, 0);
    }
    else
    {
      CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
      int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, v5, 0, 0);
      if (v5) {
        CFRelease(v5);
      }
    }
    if (AudioChannelCounts >= 3) {
      *((unsigned char *)v4 + 4) = 1;
    }
  }
}

BOOL faf_MultichannelAudioFilterFnForMulti(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateHasVideo((uint64_t)a1)) {
    BOOL v4 = FigAlternateHasAudio(a1) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!BytePtr[4]) {
    return 0;
  }
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
  {
    int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, 0, 0, 0);
  }
  else
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
    int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, v5, 0, 0);
    if (v5) {
      CFRelease(v5);
    }
  }
  return v4 || AudioChannelCounts > 2;
}

BOOL faf_MultichannelAudioFilterFnForStereo(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
  {
    int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, 0, 0, 0);
  }
  else
  {
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
    int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, v4, 0, 0);
    if (v4) {
      CFRelease(v4);
    }
  }
  return AudioChannelCounts < 3;
}

uint64_t FigAlternateDefaultAudioLayoutPreferenceFilterCreate(uint64_t a1, const void *a2, void *a3)
{
  MEMORY[0x19970EE10](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v7 = CFRetain(a2);
    }
    else {
      CFTypeRef v7 = 0;
    }
    void *DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

uint64_t FigAlternateResolutionCapFilterCreate(const __CFAllocator *a1, const void *a2, int a3, void *a4, double a5, double a6)
{
  void v14[2] = 0;
  v14[3] = 0;
  *(double *)CFTypeRef v14 = a5;
  *(double *)&v14[1] = a6;
  CFDataRef v10 = CFDataCreate(a1, (const UInt8 *)v14, 32);
  if (!v10) {
    return FigSignalErrorAt();
  }
  CFDataRef v11 = v10;
  uint64_t v12 = FigSimpleAlternateFilterCreate((uint64_t)a1, a2, a3, (long long *)&off_1EE5047D0, v10, a4);
  CFRelease(v11);
  return v12;
}

int64x2_t faf_resolutionCapApplyFilterInit(const __CFData *a1)
{
  BytePtr = (int64x2_t *)CFDataGetBytePtr(a1);
  int64x2_t result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  BytePtr[1] = result;
  return result;
}

uint64_t faf_resolutionCapFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (double *)CFDataGetBytePtr(theData);
  double v4 = *BytePtr;
  double v5 = BytePtr[1];
  double Resolution = FigAlternateGetResolution(a1);
  double v8 = v7;
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!result)
  {
    if (Resolution > v4 || v8 > v5)
    {
      if (BytePtr[3] >= 1.79769313e308)
      {
        double v11 = BytePtr[2];
        if (v11 >= 1.79769313e308 || Resolution < v11) {
          BytePtr[2] = Resolution;
        }
      }
    }
    else
    {
      BytePtr[2] = v4;
      BytePtr[3] = v5;
    }
  }
  return result;
}

BOOL faf_resolutionCapFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  BOOL v5 = FigAlternateGetResolution(a1) <= *((double *)BytePtr + 2) && v4 <= *((double *)BytePtr + 3);
  return FigAlternateIsAudioOnly(a1) || v5;
}

CFStringRef faf_copyResolutionDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (double *)CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%dx%d", (int)*BytePtr, (int)BytePtr[1]);
}

uint64_t FigAlternateResolutionFloorFilterCreate(const __CFAllocator *a1, void *a2, double a3, double a4)
{
  void v10[2] = 0;
  _OWORD v10[3] = 0;
  *(double *)CFDataRef v10 = a3;
  *(double *)&v10[1] = a4;
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"ResolutionFloor", 700, (long long *)&off_1EE5047F8, v6, a2);
  CFRelease(v7);
  return v8;
}

__n128 faf_resolutionFloorApplyFilterInit(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB30];
  *((_OWORD *)BytePtr + 1) = *MEMORY[0x1E4F1DB30];
  return result;
}

uint64_t faf_resolutionFloorFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (double *)CFDataGetBytePtr(theData);
  double v4 = *BytePtr;
  double v5 = BytePtr[1];
  double Resolution = FigAlternateGetResolution(a1);
  double v8 = v7;
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!result)
  {
    if (Resolution < v4 || v8 < v5)
    {
      if (BytePtr[3] <= 2.22044605e-16)
      {
        double v11 = BytePtr[2];
        if (v11 <= 2.22044605e-16 || Resolution > v11) {
          BytePtr[2] = Resolution;
        }
      }
    }
    else
    {
      BytePtr[2] = v4;
      BytePtr[3] = v5;
    }
  }
  return result;
}

BOOL faf_resolutionFloorFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  BOOL v5 = FigAlternateGetResolution(a1) >= *((double *)BytePtr + 2) && v4 >= *((double *)BytePtr + 3);
  return FigAlternateIsAudioOnly(a1) || v5;
}

uint64_t FigAlternateResolutionLowerLimitFilterCreate(const __CFAllocator *a1, void *a2, double a3, double a4)
{
  *(double *)CFDataRef v10 = a3;
  *(double *)&v10[1] = a4;
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)v10, 16);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"ResolutionLowerLimit", 800, (long long *)&unk_1EE504820, v6, a2);
  CFRelease(v7);
  return v8;
}

BOOL faf_resolutionLowerLimitFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (double *)CFDataGetBytePtr(theData);
  double v4 = *BytePtr;
  double v5 = BytePtr[1];
  double Resolution = FigAlternateGetResolution(a1);
  BOOL v8 = Resolution == *MEMORY[0x1E4F1DB30] && v7 == *(double *)(MEMORY[0x1E4F1DB30] + 8);
  BOOL result = 1;
  if (!v8 && vabdd_f64(Resolution, v4) >= 2.22044605e-16 && Resolution < v4)
  {
    if (vabdd_f64(Resolution, v5) >= 2.22044605e-16 && Resolution <= v5) {
      return 0;
    }
    if (vabdd_f64(v7, v4) >= 2.22044605e-16 && v7 <= v4) {
      return 0;
    }
  }
  return result;
}

uint64_t FigAlternateResolutionUpperLimitFilterCreate(const __CFAllocator *a1, void *a2, double a3, double a4)
{
  *(double *)CFDataRef v10 = a3;
  *(double *)&v10[1] = a4;
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)v10, 16);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"ResolutionUpperLimit", 800, (long long *)&unk_1EE504848, v6, a2);
  CFRelease(v7);
  return v8;
}

BOOL faf_resolutionCapWidthOnlyFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (double *)CFDataGetBytePtr(theData);
  double v4 = *BytePtr;
  double v5 = BytePtr[1];
  double Resolution = FigAlternateGetResolution(a1);
  double v8 = v7;
  BOOL result = 0;
  if (!FigAlternateIsAudioOnly(a1))
  {
    if (Resolution == *MEMORY[0x1E4F1DB30] && v8 == *(double *)(MEMORY[0x1E4F1DB30] + 8)) {
      return 1;
    }
    if (vabdd_f64(Resolution, v4) < 2.22044605e-16 || Resolution < v4)
    {
      BOOL v12 = vabdd_f64(Resolution, v5) >= 2.22044605e-16 && Resolution <= v5;
      if (v12 || vabdd_f64(v8, v4) < 2.22044605e-16 || v8 <= v4) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t FigAlternateResolutionClosestHeightFilterCreate(const __CFAllocator *a1, void *a2, double a3, double a4)
{
  *(double *)CFDataRef v10 = a3;
  *(double *)&v10[1] = a4;
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)v10, 16);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"ResolutionClosestHeight", 700, (long long *)&unk_1EE504870, v6, a2);
  CFRelease(v7);
  return v8;
}

uint64_t faf_resolutionClosestHeightComparatorFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  FigAlternateGetResolution(a1);
  double v7 = v6;
  FigAlternateGetResolution(a2);
  double v9 = v8;
  if (!FigAlternateHasVideo(a1)) {
    return 1;
  }
  double v10 = *((double *)BytePtr + 1);
  double v11 = vabdd_f64(v7, v10);
  double v12 = vabdd_f64(v9, v10);
  if (v11 < v12) {
    return -1;
  }
  return v11 != v12;
}

CFStringRef faf_copyResolutionClosestHeightDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"desiredReolution:%1.1fX%1.1f", *(void *)BytePtr, *((void *)BytePtr + 1));
}

uint64_t FigAlternateMinimumRequiredPresentationSizeFilterCreate(const __CFAllocator *a1, void *a2, double a3, double a4)
{
  void v10[2] = 0;
  _OWORD v10[3] = 0;
  *(double *)double v10 = a3;
  *(double *)&v10[1] = a4;
  CFDataRef v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"MinimumRequiredPresentationSize", 700, (long long *)&off_1EE504898, v6, a2);
  CFRelease(v7);
  return v8;
}

int64x2_t faf_minimumRequiredPresentationSizeFilterInit(const __CFData *a1)
{
  BytePtr = (int64x2_t *)CFDataGetBytePtr(a1);
  int64x2_t result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  BytePtr[1] = result;
  return result;
}

uint64_t faf_minimumRequiredPresentationSizeFirstPass(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  double Resolution = FigAlternateGetResolution(a1);
  uint64_t v6 = v5;
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!result && Resolution >= *(double *)BytePtr && Resolution < *((double *)BytePtr + 2))
  {
    *((double *)BytePtr + 2) = Resolution;
    *((void *)BytePtr + 3) = v6;
  }
  return result;
}

BOOL faf_minimumRequiredPresentationSizeFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return *((double *)BytePtr + 2) == 1.79769313e308 && *((double *)BytePtr + 3) == 1.79769313e308
      || FigAlternateGetResolution(a1) == *((double *)BytePtr + 2);
}

CFStringRef faf_minimumRequiredPresentationSizeDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (double *)CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%dx%d", (int)*BytePtr, (int)BytePtr[1]);
}

uint64_t FigAlternateFrameRateCapFilterCreate(uint64_t a1, void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFNumberRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate(a1, @"FrameRateCap", 800, (long long *)&unk_1EE5048C0, v5, a2);
  CFRelease(v6);
  return v7;
}

BOOL faf_frameRateCapFilterFn(uint64_t a1, const __CFNumber *a2)
{
  double valuePtr = 0.0;
  Framedouble Rate = FigAlternateGetFrameRate(a1);
  CFNumberGetValue(a2, kCFNumberDoubleType, &valuePtr);
  return valuePtr - FrameRate > -2.22044605e-16 || FrameRate == 0.0;
}

uint64_t faf_frameRateCapComparatorFn(uint64_t a1, uint64_t a2)
{
  Framedouble Rate = FigAlternateGetFrameRate(a1);
  double v4 = FigAlternateGetFrameRate(a2);
  double v5 = vabdd_f64(FrameRate, v4);
  uint64_t v6 = -1;
  if (FrameRate >= v4) {
    uint64_t v6 = 1;
  }
  if (v5 >= 2.22044605e-16) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t FigAlternateVideoRangeAndFrameRateBucketFilterCreate(const __CFAllocator *a1, int a2, int a3, void *a4)
{
  *(_DWORD *)UInt8 bytes = a2;
  int v11 = a3;
  CFDataRef v6 = CFDataCreate(a1, bytes, 8);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"VideoRangeAndFrameRateBucket", 1000, (long long *)&unk_1EE5048E8, v6, a4);
  CFRelease(v7);
  return v8;
}

BOOL frcvr_videoRangeAndFrameRateBucketFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  Framedouble Rate = FigAlternateGetFrameRate(a1);
  unsigned int VideoRange = FigAlternateGetVideoRange(a1);
  unsigned int v6 = *(_DWORD *)BytePtr;
  unsigned int v7 = *((_DWORD *)BytePtr + 1);
  unsigned int v8 = FigFrameRateToFrameRateBucket(FrameRate);
  int IsAudioOnly = FigAlternateIsAudioOnly(a1);
  return v6 >= VideoRange || v7 >= v8 || IsAudioOnly != 0;
}

CFStringRef frcvr_videoRangeAndFrameRateBucketFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  StringFromunsigned int VideoRange = FigAlternateGetStringFromVideoRange(*(_DWORD *)BytePtr);
  StringFromFramerateBucket = FigAlternateGetStringFromFramerateBucket(*((_DWORD *)BytePtr + 1));
  return CFStringCreateWithFormat(v3, 0, @"maxVideoRange:%@ framerate:%@", StringFromVideoRange, StringFromFramerateBucket);
}

uint64_t FigAlternateLimitConcurrent4K60HEVCDecodeFilterCreate(void *a1, CFTypeRef cf, void *a3)
{
  v7[1] = 0;
  if (cf) {
    CFTypeRef v5 = CFRetain(cf);
  }
  else {
    CFTypeRef v5 = 0;
  }
  v7[0] = v5;
  return fsaf_createWithBytes(a1, @"LimitConcurrent4K60HEVCDecode", 510, (uint64_t)faf_limitConcurrent4K60HEVCDecodeFilterFn, 0, (uint64_t)faf_limitConcurrent4K60HEVCDecodeFirstPassFn, (uint64_t)faf_limitConcurrent4K60HEVCDecodeApplyInitFn, (CFTypeRef (*)())faf_limitConcurrent4K60HEVCDecodeFilterDescAddendum, v7, 0x10uLL, (void (__cdecl *)(void *, void *))faf_limitConcurrent4K60HEVCDecodeDeallocateCallback, a3);
}

uint64_t faf_limitConcurrent4K60HEVCDecodeFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateIsAudioOnly(a1) || !BytePtr[8] || FigCFEqual()) {
    return 1;
  }
  else {
    return faf_willRequire4K60Decode(a1) ^ 1;
  }
}

uint64_t faf_limitConcurrent4K60HEVCDecodeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = faf_willRequire4K60Decode(a1);
    *((unsigned char *)BytePtr + 8) = result;
  }
  return result;
}

const UInt8 *faf_limitConcurrent4K60HEVCDecodeApplyInitFn(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 8) = 0;
  return result;
}

CFStringRef faf_limitConcurrent4K60HEVCDecodeFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = BytePtr[8];
  uint64_t PeakBitRate = FigAlternateGetPeakBitRate(*(void *)BytePtr);
  return CFStringCreateWithFormat(v3, 0, @"avoidConcurrentDecode:%d alternate %d", v4, PeakBitRate);
}

void faf_limitConcurrent4K60HEVCDecodeDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  uint64_t v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateNormalizedPeakBitRateCapFilterCreate(uint64_t a1, int a2, int a3, void *a4)
{
  int valuePtr = a2;
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v7) {
    return FigSignalErrorAt();
  }
  CFNumberRef v8 = v7;
  if (a3) {
    double v9 = 0;
  }
  else {
    double v9 = faf_normalizedPeakBitRateCapComparatorFn;
  }
  if (a3) {
    int v10 = 950;
  }
  else {
    int v10 = 600;
  }
  long long v13 = 0uLL;
  CFTypeRef v14 = faf_normalizedPeakBitRateCapFilterFn;
  long long v15 = v9;
  uint64_t v16 = faf_copyNormalizedPeakBitRateCapDescAddendum;
  uint64_t v11 = FigSimpleAlternateFilterCreate(a1, @"PeakNormalizedBitRateCap", v10, &v13, v7, a4);
  CFRelease(v8);
  return v11;
}

BOOL faf_normalizedPeakBitRateCapFilterFn(uint64_t a1, const __CFNumber *a2)
{
  int valuePtr = 0;
  int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr);
  return NormalizedPeakBitrate <= valuePtr;
}

uint64_t faf_normalizedPeakBitRateCapComparatorFn(uint64_t a1, uint64_t a2)
{
  int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  int v4 = FigAlternateGetNormalizedPeakBitrate(a2);
  if (NormalizedPeakBitrate >= v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (NormalizedPeakBitrate > v4) {
    return 1;
  }
  else {
    return v5;
  }
}

CFStringRef faf_copyNormalizedPeakBitRateCapDescAddendum(int a1, CFNumberRef number)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d bps", valuePtr);
}

uint64_t FigAlternatePeakBitRateCapFilterCreate(uint64_t a1, int a2, void *a3)
{
  return figAlternatePeakBitRateCapFilterCreateWithNameAndPriority(a1, a2, @"PeakBitRateCap", 645, a3);
}

uint64_t figAlternatePeakBitRateCapFilterCreateWithNameAndPriority(uint64_t a1, int a2, const void *a3, int a4, void *a5)
{
  int valuePtr = a2;
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v9) {
    return FigSignalErrorAt();
  }
  CFNumberRef v10 = v9;
  uint64_t v11 = FigSimpleAlternateFilterCreate(a1, a3, a4, (long long *)&unk_1EE504F10, v9, a5);
  CFRelease(v10);
  return v11;
}

uint64_t FigAlternatePeakBitRateCapFilterForExpensiveNetworksCreate(uint64_t a1, int a2, void *a3)
{
  return figAlternatePeakBitRateCapFilterCreateWithNameAndPriority(a1, a2, @"PeakBitRateCapForExpensiveNetworks", 644, a3);
}

uint64_t FigAlternateSkipBitrateRangeFilterCreate(void *a1, const void *a2, const void *a3, const void *a4, int a5, void *a6)
{
  v16[2] = 0;
  int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate((uint64_t)a3);
  if (ExpectedAverageBitrate <= (int)FigAlternateGetExpectedAverageBitrate((uint64_t)a2))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a2) {
      CFTypeRef v13 = CFRetain(a2);
    }
    else {
      CFTypeRef v13 = 0;
    }
    v16[0] = v13;
    if (a3) {
      CFTypeRef v14 = CFRetain(a3);
    }
    else {
      CFTypeRef v14 = 0;
    }
    v16[1] = v14;
    return fsaf_createWithBytes(a1, a4, a5, (uint64_t)faf_skipBitrateRangeFilterFn, 0, (uint64_t)faf_skipBitrateRangeFirstPassFn, (uint64_t)faf_skipBitrateRangeFilterApplyInitFn, (CFTypeRef (*)())faf_skipBitrateRangeFilterDescAddendum, v16, 0x18uLL, (void (__cdecl *)(void *, void *))faf_skipBitrateRangeDeallocateCallback, a6);
  }
}

BOOL faf_skipBitrateRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  BOOL result = 1;
  if (BytePtr[16])
  {
    int v4 = (uint64_t *)BytePtr;
    AverageBitdouble Rate = FigAlternateGetAverageBitRate(a1);
    if ((int)FigAlternateGetAverageBitRate(v4[1]) > AverageBitRate
      && (int)FigAlternateGetAverageBitRate(*v4) < AverageBitRate)
    {
      return 0;
    }
    int PeakBitRate = FigAlternateGetPeakBitRate(a1);
    if ((int)FigAlternateGetPeakBitRate(v4[1]) > PeakBitRate && (int)FigAlternateGetPeakBitRate(*v4) < PeakBitRate) {
      return 0;
    }
  }
  return result;
}

uint64_t faf_skipBitrateRangeFirstPassFn(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigCFEqual();
  if (result) {
    *((unsigned char *)BytePtr + 16) = 1;
  }
  return result;
}

const UInt8 *faf_skipBitrateRangeFilterApplyInitFn(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((unsigned char *)result + 16) = 0;
  return result;
}

CFStringRef faf_skipBitrateRangeFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = (uint64_t *)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t PeakBitRate = FigAlternateGetPeakBitRate(BytePtr[1]);
  AverageBitdouble Rate = FigAlternateGetAverageBitRate(BytePtr[1]);
  uint64_t v6 = FigAlternateGetPeakBitRate(*BytePtr);
  uint64_t v7 = FigAlternateGetAverageBitRate(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, @"highBitrate [%d %d], lowBitrate [%d %d]", PeakBitRate, AverageBitRate, v6, v7);
}

void faf_skipBitrateRangeDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  int v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = ptr[1];
  if (v5) {
    CFRelease(v5);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateSkipEqualOrLowerBitratesFilterCreate(void *a1, CFTypeRef cf, const void *a3, int a4, void *a5)
{
  v11[1] = 0;
  v11[2] = 0;
  if (cf) {
    CFTypeRef v9 = CFRetain(cf);
  }
  else {
    CFTypeRef v9 = 0;
  }
  v11[0] = v9;
  return fsaf_createWithBytes(a1, a3, a4, (uint64_t)faf_skipEqualOrLowerBitratesFilterFn, 0, (uint64_t)faf_skipBitrateRangeFirstPassFn, (uint64_t)faf_skipBitrateRangeFilterApplyInitFn, (CFTypeRef (*)())faf_skipEqualOrLowerBitratesFilterDescAddendum, v11, 0x18uLL, (void (__cdecl *)(void *, void *))faf_skipBitrateRangeDeallocateCallback, a5);
}

BOOL faf_skipEqualOrLowerBitratesFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr[16]) {
    return 1;
  }
  int v4 = (uint64_t *)BytePtr;
  if (FigCFEqual()) {
    return 1;
  }
  int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*v4);
  return ExpectedAverageBitrate < (int)FigAlternateGetExpectedAverageBitrate(a1);
}

CFStringRef faf_skipEqualOrLowerBitratesFilterDescAddendum(int a1, CFDataRef theData)
{
  uint64_t v2 = *(const void **)CFDataGetBytePtr(theData);

  return CFCopyDescription(v2);
}

uint64_t FigAlternateNextHighestPeakBitRateFilterCreate(const __CFAllocator *a1, uint64_t a2, void *a3, float a4)
{
  *(_DWORD *)&UInt8 bytes[4] = 0;
  *(_DWORD *)UInt8 bytes = (int)(float)((float)(int)FigAlternateGetNormalizedPeakBitrate(a2) * a4);
  CFDataRef v6 = CFDataCreate(a1, bytes, 8);
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFDataRef v7 = v6;
  uint64_t v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"NextHighestPeakBitRate", 600, (long long *)&off_1EE504910, v6, a3);
  CFRelease(v7);
  return v8;
}

const UInt8 *faf_nextHighestPeakBitRateApplyFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((_DWORD *)result + 1) = 0x7FFFFFFF;
  return result;
}

uint64_t faf_nextHighestPeakBitRateFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateGetNormalizedPeakBitrate(a1);
  if ((int)result > *(_DWORD *)BytePtr && (int)result < *((_DWORD *)BytePtr + 1)) {
    *((_DWORD *)BytePtr + 1) = result;
  }
  return result;
}

BOOL faf_nextHighestPeakBitRateFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return (int)FigAlternateGetNormalizedPeakBitrate(a1) <= *((_DWORD *)BytePtr + 1);
}

CFStringRef faf_nextHighestPeakBitRateFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"ceiling: %d bps", *(unsigned int *)BytePtr);
}

uint64_t FigAlternateMeasuredBitrateCapFilterCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, void *a4, double a5, double a6)
{
  double v14 = a5;
  double v15 = a6;
  *(void *)UInt8 bytes = a2;
  double v8 = fabs(a6);
  if (v8 <= 1.0) {
    double v8 = 1.0;
  }
  uint64_t v16 = (uint64_t)((double)a2 / a5 / ceil(v8));
  uint64_t v17 = a3;
  CFDataRef v9 = CFDataCreate(a1, bytes, 40);
  if (!v9) {
    return FigSignalErrorAt();
  }
  CFDataRef v10 = v9;
  uint64_t v11 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"MeasuredBitrateCap", 550, (long long *)&unk_1EE504938, v9, a4);
  CFRelease(v10);
  return v11;
}

BOOL faf_measuredBitrateFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (*((_DWORD *)BytePtr + 8)) {
    int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(a1);
  }
  else {
    int ExpectedAverageBitrate = FigAlternateGetPeakBitRate(a1);
  }
  return *((void *)BytePtr + 3) >= ExpectedAverageBitrate;
}

uint64_t faf_measuredBitrateCapComparatorFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (*((_DWORD *)BytePtr + 8)) {
    int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(a1);
  }
  else {
    int ExpectedAverageBitrate = FigAlternateGetPeakBitRate(a1);
  }
  int v7 = ExpectedAverageBitrate;
  if (*((_DWORD *)BytePtr + 8)) {
    int PeakBitRate = FigAlternateGetExpectedAverageBitrate(a2);
  }
  else {
    int PeakBitRate = FigAlternateGetPeakBitRate(a2);
  }
  if (v7 >= PeakBitRate) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = -1;
  }
  if (v7 > PeakBitRate) {
    return 1;
  }
  else {
    return v9;
  }
}

CFStringRef faf_copyMeasuredBitrateCapDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (*((_DWORD *)BytePtr + 8)) {
    CFAllocatorRef v3 = "Average";
  }
  else {
    CFAllocatorRef v3 = "Peak";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"MeasuredBitrate:%lld bps handicap:%.2f rate:%.2f Cap:%lld bps bitrateMeasure:%s", *(void *)BytePtr, *((void *)BytePtr + 1), *((void *)BytePtr + 2), *((void *)BytePtr + 3), v3);
}

uint64_t FigAlternateLowestVideoThenAudioFilterCreate(const __CFAllocator *a1, void *a2)
{
  return fsaf_createWithNoContext(a1, @"LowestVideoThenAudio", 500, 0, (uint64_t)faf_lowestVideoThenAudioComparatorFn, a2);
}

uint64_t faf_lowestVideoThenAudioComparatorFn(uint64_t a1, uint64_t a2)
{
  int HasVideo = FigAlternateHasVideo(a1);
  int v5 = FigAlternateHasVideo(a2);
  int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  int v7 = FigAlternateGetNormalizedPeakBitrate(a2);
  if (HasVideo && !v5) {
    return -1;
  }
  if (!HasVideo && v5) {
    return 1;
  }
  if (NormalizedPeakBitrate >= v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = -1;
  }
  if (NormalizedPeakBitrate > v7) {
    return 1;
  }
  else {
    return v9;
  }
}

uint64_t FigAlternateLowestPeakBitRateFilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"LowestPeakBitRate", 500, (long long *)&unk_1EE504960, 0, a2);
}

uint64_t faf_lowestPeakBitRateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  int v4 = FigAlternateGetPeakBitRate(a2);
  if (!PeakBitRate) {
    return 1;
  }
  if (PeakBitRate < v4) {
    return -1;
  }
  return PeakBitRate != v4;
}

uint64_t FigAlternateMinimumRequiredBitrateFilterCreate(const __CFAllocator *a1, unsigned int a2, void *a3)
{
  v9[1] = 0;
  v9[0] = a2;
  CFDataRef v5 = CFDataCreate(a1, (const UInt8 *)v9, 16);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"MinimumRequiredBitrate", 600, (long long *)&off_1EE504988, v5, a3);
  CFRelease(v6);
  return v7;
}

const UInt8 *faf_minimumRequiredBitrateFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((void *)result + 1) = 0;
  return result;
}

uint64_t faf_minimumRequiredBitrateFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateGetPeakBitRate(a1);
  if ((int)result >= *(_DWORD *)BytePtr)
  {
    int v5 = result;
    uint64_t result = *((void *)BytePtr + 1);
    if (!result || (uint64_t result = FigAlternateGetPeakBitRate(result), v5 < (int)result)) {
      *((void *)BytePtr + 1) = a1;
    }
  }
  return result;
}

BOOL faf_minimumRequiredBitrateFilterFn(uint64_t a1, CFDataRef theData)
{
  uint64_t v3 = *((void *)CFDataGetBytePtr(theData) + 1);
  return !v3 || v3 == a1;
}

CFStringRef faf_minimumRequiredBitrateFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d bps", *(unsigned int *)BytePtr);
}

uint64_t FigAlternateMinimumRequiredBitrateForHEVCFilterCreate(const __CFAllocator *a1, unsigned int a2, void *a3)
{
  v9[1] = 0;
  v9[0] = a2;
  CFDataRef v5 = CFDataCreate(a1, (const UInt8 *)v9, 16);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"MinimumRequiredBitrateForHEVC", 640, (long long *)&off_1EE5049B0, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t faf_minimumRequiredBitrateForHEVCFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  uint64_t result = FigAlternateHasVideoFormat(a1, 7);
  if (result || (uint64_t result = FigAlternateHasVideoFormat(a1, 4), result))
  {
    if (PeakBitRate >= *(_DWORD *)BytePtr)
    {
      uint64_t result = *((void *)BytePtr + 1);
      if (!result || (uint64_t result = FigAlternateGetPeakBitRate(result), PeakBitRate < (int)result)) {
        *((void *)BytePtr + 1) = a1;
      }
    }
  }
  return result;
}

uint64_t FigAlternateHighestPeakBitRateFilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"HighestPeakBitRate", 500, (long long *)&unk_1EE5049D8, 0, a2);
}

uint64_t faf_highestPeakBitRateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  int v4 = FigAlternateGetPeakBitRate(a2);
  if (v4 >= PeakBitRate) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (v4 > PeakBitRate) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t FigAlternateAllowListWithURLFilterCreate(uint64_t a1, const void *a2, int a3, char a4, void *a5)
{
  uint64_t v6 = FigSimpleAlternateFilterCreate(a1, @"AllowListURLFilter", a3, (long long *)&unk_1EE504A00, a2, a5);
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64) = a4;
  return v6;
}

uint64_t faf_alternateWithURLFilterFn(uint64_t a1)
{
  FigAlternateGetPlaylistAlternateURL(a1);

  return FigCFEqual();
}

uint64_t faf_alternateWithURLFilterMinSortingFn()
{
  return 0;
}

CFStringRef faf_alternateWithURLFilterDescAddendum(uint64_t a1, __CFString *a2)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 64)) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = @"<redacted>";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"alternateURL: %@", v3);
}

uint64_t FigAlternateDenyListFilterCreate(uint64_t a1, const void *a2, const void *a3, unsigned int a4, int a5, void *a6)
{
  uint64_t v6 = faf_lowestBitrateComparatorFn;
  if (!a5) {
    uint64_t v6 = faf_denylistComparatorFn;
  }
  if (a4 >= 0x372) {
    uint64_t v6 = 0;
  }
  long long v8 = 0uLL;
  uint64_t v9 = faf_denyListFilterFn;
  CFDataRef v10 = v6;
  uint64_t v11 = 0;
  return FigSimpleAlternateFilterCreate(a1, a3, a4, &v8, a2, a6);
}

BOOL faf_denyListFilterFn()
{
  return FigCFArrayContainsValue() == 0;
}

uint64_t faf_lowestBitrateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  int v5 = FigAlternateGetPeakBitRate(a2);
  if (PeakBitRate >= v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = -1;
  }
  if (PeakBitRate > v5) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = v6;
  }
  if (!result)
  {
    return faf_sameBitrateComparatorFn(a1, a2);
  }
  return result;
}

uint64_t faf_denylistComparatorFn(const void *a1, const void *a2, CFArrayRef theArray)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v7 = CFArrayGetCount(theArray);
  }
  else
  {
    CFIndex Count = 0;
    CFIndex v7 = 0;
  }
  CFIndex v10 = v7;
  CFIndex v11 = Count;
  faf_isAlternateInDenyList(a1, theArray, &v11);
  faf_isAlternateInDenyList(a2, theArray, &v10);
  if (v10 >= v11) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = -1;
  }
  if (v10 > v11) {
    return 1;
  }
  else {
    return v8;
  }
}

uint64_t FigAlternateHighestRankingScoreFilterCreate(const __CFAllocator *a1, void *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  CFDataRef v4 = CFDataCreate(a1, (const UInt8 *)v8, 16);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFDataRef v5 = v4;
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"HighestRankingScore", 460, (long long *)&off_1EE504A28, v4, a2);
  CFRelease(v5);
  return v6;
}

UInt8 *faf_rankingScoreFilterInit(const __CFData *a1)
{
  uint64_t result = (UInt8 *)CFDataGetBytePtr(a1);
  *((void *)result + 1) = 0xBFF0000000000000;
  *uint64_t result = 1;
  return result;
}

void faf_rankingScoreFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (*BytePtr)
  {
    CFDataRef v4 = BytePtr;
    if (FigAlternateHasRankingScore(a1))
    {
      double v5 = *((double *)v4 + 1);
      if (v5 <= FigAlternateGetRankingScore(a1)) {
        double RankingScore = FigAlternateGetRankingScore(a1);
      }
      else {
        double RankingScore = *((double *)v4 + 1);
      }
      *((double *)v4 + 1) = RankingScore;
    }
    else
    {
      *CFDataRef v4 = 0;
    }
  }
}

BOOL faf_rankingScoreFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return !*BytePtr || vabdd_f64(FigAlternateGetRankingScore(a1), *((double *)BytePtr + 1)) < 2.22044605e-16;
}

uint64_t FigAlternateFrameRateSwitchCapFilterCreate(const __CFAllocator *a1, void *a2)
{
  int v9 = 0;
  uint64_t v8 = 0;
  CFDataRef v4 = CFDataCreate(a1, (const UInt8 *)&v8, 12);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFDataRef v5 = v4;
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"FrameRateSwitchCap", 450, (long long *)&off_1EE504A50, v4, a2);
  CFRelease(v5);
  return v6;
}

void faf_frameRateSwitchCapFilterInit(const __CFData *a1)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(a1);

  memset_pattern16(BytePtr, &unk_1949964A0, 0xCuLL);
}

uint64_t faf_frameRateSwitchCapFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int FrameRateBucket = FigAlternateGetFrameRateBucket(a1);
  int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!result)
  {
    int v7 = *(_DWORD *)&BytePtr[4 * FrameRateBucket];
    if (v7 >= NormalizedPeakBitrate) {
      int v7 = NormalizedPeakBitrate;
    }
    *(_DWORD *)&BytePtr[4 * FrameRateBucket] = v7;
  }
  return result;
}

BOOL faf_frameRateSwitchCapFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int FrameRateBucket = FigAlternateGetFrameRateBucket(a1);
  int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  return FigAlternateIsAudioOnly(a1)
      || (FrameRateBucket + 1) > 2
      || *(_DWORD *)&BytePtr[4 * (FrameRateBucket + 1)] >= NormalizedPeakBitrate;
}

CFStringRef faf_frameRateSwitchCapFilterDescAddendum()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"frameRateSwitchCapFilter");
}

uint64_t FigAlternatePlaybackScoreAndBitRateFilterCreate(const __CFAllocator *a1, void *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  CFDataRef v4 = CFDataCreate(a1, (const UInt8 *)v8, 16);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFDataRef v5 = v4;
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PlaybackScoreAndBitRate", 400, (long long *)&off_1EE504A78, v4, a2);
  CFRelease(v5);
  return v6;
}

const UInt8 *faf_playbackScoreFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0xBFF0000000000000;
  return result;
}

uint64_t faf_playbackScoreFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  int BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  uint64_t result = FigAlternateIsAudioOnly(a1);
  if (!result && BestVideoFormat)
  {
    int v9 = 0;
    double v6 = *((double *)BytePtr + 1);
    uint64_t result = FigAlternateGetRankingScoreOrPeakBWWithVideoCodecScore(a1, 0, &v9);
    if (v6 < v7)
    {
      *(void *)BytePtr = a1;
      uint64_t result = FigAlternateGetRankingScoreOrPeakBWWithVideoCodecScore(a1, 0, &v9);
      *((void *)BytePtr + 1) = v8;
    }
  }
  return result;
}

BOOL faf_playbackScoreFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (uint64_t *)CFDataGetBytePtr(theData);
  int BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  int IsAudioOnly = FigAlternateIsAudioOnly(a1);
  BOOL result = 1;
  if (!IsAudioOnly)
  {
    if (BestVideoFormat)
    {
      int PeakBitRate = FigAlternateGetPeakBitRate(a1);
      return PeakBitRate <= (int)FigAlternateGetPeakBitRate(*BytePtr);
    }
  }
  return result;
}

uint64_t FigAlternateFinalSelectionHighestPeakBitRateFilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"FinalSelectionHighestBitRate", 200, (long long *)&unk_1EE504AA0, 0, a2);
}

uint64_t faf_highestBitrateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  int v5 = FigAlternateGetPeakBitRate(a2);
  if (v5 >= PeakBitRate) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = -1;
  }
  if (v5 > PeakBitRate) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = v6;
  }
  if (!result)
  {
    return faf_sameBitrateComparatorFn(a1, a2);
  }
  return result;
}

uint64_t FigAlternateCombinedAudioPreferenceFilterCreate(int a1, int a2, unsigned int a3, const void *a4, uint64_t a5, int a6, char a7, uint64_t a8, CFArrayRef a9, void *a10)
{
  *(_OWORD *)uint64_t v60 = 0u;
  *(_OWORD *)CFAllocatorRef v61 = 0u;
  int v13 = *(_DWORD *)(a5 + 4);
  long long v14 = *(_OWORD *)(a5 + 8);
  *(_OWORD *)uint64_t v62 = 0u;
  v62[2] = v13;
  long long v63 = v14;
  *(_OWORD *)CFArrayRef theArray = 0u;
  theArray[0] = *(CFArrayRef *)(a5 + 24);
  LOBYTE(v60[0]) = *(unsigned char *)a5;
  v60[1] = a2;
  *(void *)&v60[2] = a3;
  v61[1] = a4;
  v61[0] = faf_copyMediaSelectionPersistentIDForMediaType(a9, 1936684398);
  v62[0] = a6;
  LOBYTE(v62[1]) = a7;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a8)
  {
    uint64_t v16 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate((void *)*MEMORY[0x1E4F1CF80], a8, a9, 1, &theArray[1]);
    if (v16)
    {
      uint64_t v21 = v16;
      goto LABEL_281;
    }
  }
  CFTypeRef v67 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v66 = 0;
  uint64_t Filter = FigAlternateFilterTreeCreate((uint64_t)v15, &v66);
  if (Filter) {
    goto LABEL_274;
  }
  if (!v66)
  {
    uint64_t Filter = FigSignalErrorAt();
    goto LABEL_274;
  }
  uint64_t Filter = faf_CombinedAudioPreferenceAlternateFilterForChannels((uint64_t)v60, 2, 0, &v67);
  if (Filter)
  {
LABEL_274:
    uint64_t v21 = Filter;
    goto LABEL_275;
  }
  CFTypeRef v18 = v67;
  uint64_t v82 = 0;
  *(void *)&long long v83 = 0;
  uint64_t v88 = 0;
  v89[0] = 0;
  int v87 = 0;
  uint64_t inserted = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
  if (inserted) {
    goto LABEL_290;
  }
  if (!v89[0])
  {
    uint64_t inserted = FigSignalErrorAt();
LABEL_290:
    uint64_t v21 = inserted;
    goto LABEL_291;
  }
  CFNumberRef v20 = (const __CFNumber *)v61[0];
  uint64_t inserted = FigAlternateEligibleLosslessAudioFilterCreate(v15, v61[0], &v82);
  if (inserted) {
    goto LABEL_290;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v82, 510);
  if (inserted) {
    goto LABEL_290;
  }
  uint64_t inserted = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v20, 4, -1, 1, &v88);
  if (inserted) {
    goto LABEL_290;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 500);
  if (inserted) {
    goto LABEL_290;
  }
  uint64_t inserted = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], 2u, (const __CFDictionary *)v61[1], v62[1], v20, v62[0], &v87);
  if (inserted) {
    goto LABEL_290;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 490);
  if (inserted) {
    goto LABEL_290;
  }
  if (v18)
  {
    uint64_t inserted = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v18);
    if (inserted) {
      goto LABEL_290;
    }
  }
  uint64_t v21 = FigAlternateFilterTreeCreateFilter(v89[0], @"ImmersiveAudioFilterTree", 760, &v83);
  if (!v21)
  {
    int64_t v22 = (const void *)v83;
    CFTypeRef cf = (CFTypeRef)v83;
    *(void *)&long long v83 = 0;
    goto LABEL_18;
  }
LABEL_291:
  int64_t v22 = 0;
LABEL_18:
  if (v89[0]) {
    CFRelease(v89[0]);
  }
  if ((void)v83) {
    CFRelease((CFTypeRef)v83);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v87) {
    CFRelease(v87);
  }
  if (v82) {
    CFRelease(v82);
  }
  if (v21)
  {
LABEL_275:
    CFArrayRef v48 = (CFArrayRef)cf;
    if (!cf) {
      goto LABEL_277;
    }
    goto LABEL_276;
  }
  if (v22)
  {
    CFTypeRef v67 = v22;
    CFRetain(v22);
    if (v18) {
      CFRelease(v18);
    }
    CFRelease(v22);
    CFTypeRef cf = 0;
  }
  else
  {
    int64_t v22 = v18;
  }
  if (!LOBYTE(v60[0]) && (*(uint64_t *)&v60[2] > 2 || !*(void *)&v60[2]))
  {
    uint64_t Filter = faf_CombinedAudioPreferenceAlternateFilterForChannels((uint64_t)v60, v60[2], v22, &cf);
    if (!Filter)
    {
      CFTypeRef v23 = cf;
      if (cf)
      {
        CFTypeRef v67 = cf;
        CFRetain(cf);
        if (v22) {
          CFRelease(v22);
        }
        CFRelease(v23);
        CFTypeRef cf = 0;
      }
      goto LABEL_42;
    }
    goto LABEL_274;
  }
LABEL_42:
  if (theArray[0])
  {
    CFIndex Count = CFArrayGetCount(theArray[0]);
    if (Count >= 1)
    {
      CFTypeRef v25 = 0;
      CFIndex v26 = Count + 1;
      while (1)
      {
        int v65 = 1064530531;
        FigCFArrayGetInt32AtIndex();
        if (v65 == 1651076712) {
          break;
        }
        if (v65 == 1835824233)
        {
          CFTypeRef v27 = v67;
          uint64_t v80 = 0;
          CFTypeRef v78 = 0;
          CFTypeRef v79 = 0;
          CFTypeRef v76 = 0;
          CFTypeRef v77 = 0;
          CFTypeRef v74 = 0;
          CFTypeRef v75 = 0;
          CFTypeRef v72 = 0;
          CFTypeRef v73 = 0;
          CFTypeRef v70 = 0;
          CFTypeRef v71 = 0;
          CFTypeRef v69 = 0;
          uint64_t v28 = FigAlternateFilterTreeCreate((uint64_t)v15, &v76);
          if (!v28)
          {
            if (!v76) {
              goto LABEL_156;
            }
            uint64_t v28 = FigAlternateFilterTreeCreate((uint64_t)v15, &v78);
            if (!v28)
            {
              if (v78)
              {
                int v29 = v62[2];
                if (v62[2] == 1836019574)
                {
                  uint64_t v30 = FigAlternateResolutionLowerLimitFilterCreate(v15, &v71, *(double *)&v63, *((double *)&v63 + 1));
                  if (v30) {
                    goto LABEL_154;
                  }
                  uint64_t v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v71, 520);
                  if (v30) {
                    goto LABEL_154;
                  }
                }
                CFNumberRef v31 = (const __CFNumber *)v61[0];
                uint64_t v30 = FigAlternateEligibleLosslessAudioFilterCreate(v15, v61[0], &v70);
                if (v30
                  || (uint64_t v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v70, 510), v30)
                  || (uint64_t v30 = FigAlternateMultichannelAudioFilterCreate(v15, v31, 1, 1, &v73), v30)
                  || (uint64_t v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v73, 480), v30)
                  || (uint64_t v30 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v31, 1, -1, 1, &v74), v30)
                  || (uint64_t v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v74, 500), v30))
                {
LABEL_154:
                  uint64_t v21 = v30;
                  long long v39 = 0;
                  uint64_t v38 = 0;
                  goto LABEL_97;
                }
                CFDictionaryRef v32 = (const __CFDictionary *)v61[1];
                char v33 = v62[1];
                int v34 = v62[0];
                uint64_t v35 = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], v60[2], (const __CFDictionary *)v61[1], v62[1], v31, v62[0], &v72);
                if (v35
                  || (uint64_t v35 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v72, 490), v35)
                  || (uint64_t v35 = FigAlternateAmbisonicOrderFilterCreate(v15, 0, 0x7FFFFFFF, v31, 0, &v75), v35)
                  || (uint64_t v35 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v75, 505), v35)
                  || (uint64_t v35 = FigAlternateFilterTreeCreateFilter(v76, @"MultichannelSpatialAudioFilterTree", 760, &v69), v35))
                {
                  uint64_t v21 = v35;
                  long long v39 = 0;
                  uint64_t v38 = 0;
                  goto LABEL_97;
                }
                uint64_t v82 = 0;
                *(void *)&long long v83 = 0;
                uint64_t v88 = 0;
                v89[0] = 0;
                int v87 = 0;
                uint64_t v81 = 0;
                uint64_t v36 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
                if (!v36)
                {
                  if (v89[0])
                  {
                    if (v29 != 1836019574
                      || (uint64_t v36 = FigAlternateResolutionUpperLimitFilterCreate(v15, &v87, *(double *)&v63 + -1.0, *((double *)&v63 + 1) + -1.0), !v36)&& (uint64_t v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 520), !v36))
                    {
                      uint64_t v36 = FigAlternateEligibleLosslessAudioFilterCreate(v15, v31, &v81);
                      if (!v36)
                      {
                        uint64_t v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v81, 510);
                        if (!v36)
                        {
                          uint64_t v36 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v31, 2, -1, 0, &v88);
                          if (!v36)
                          {
                            uint64_t v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 500);
                            if (!v36)
                            {
                              uint64_t v36 = FigAlternatePreferredAudioFormatFilterCreate(v15, 0, 2u, v32, v33, v31, v34, &v82);
                              if (!v36)
                              {
                                uint64_t v37 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v82, 490);
                                if (v37)
                                {
                                  uint64_t v21 = v37;
                                  goto LABEL_169;
                                }
                                uint64_t v21 = FigAlternateFilterTreeCreateFilter(v89[0], @"MultichannelSpatialAudioFilterTree", 760, &v83);
                                uint64_t v38 = (const void *)v83;
                                if (!v21)
                                {
                                  *(void *)&long long v83 = 0;
                                  goto LABEL_78;
                                }
                                if ((void)v83)
                                {
                                  CFRelease((CFTypeRef)v83);
LABEL_169:
                                  uint64_t v38 = 0;
                                }
LABEL_78:
                                if (v89[0]) {
                                  CFRelease(v89[0]);
                                }
                                if (v88) {
                                  CFRelease(v88);
                                }
                                if (v87) {
                                  CFRelease(v87);
                                }
                                if (v82) {
                                  CFRelease(v82);
                                }
                                if (v81) {
                                  CFRelease(v81);
                                }
                                if (v21)
                                {
                                  long long v39 = 0;
                                }
                                else
                                {
                                  FigAlternateMergeFilterCreate((uint64_t)v15, @"MultichannelSpatialAudioFilterTree", 760, v69, v38, 1, &v80);
                                  long long v39 = v80;
                                  uint64_t v40 = FigAlternateFilterTreeInsertLeaf((uint64_t)v78, v80, 760);
                                  if (v40)
                                  {
                                    uint64_t v21 = v40;
                                  }
                                  else if (v29 == 1936684398 {
                                         && ((uint64_t v41 = FigAlternateStereoCapForMultichannelFilterCreate(v15, v31, &v77),
                                  }
                                              v41)
                                          || (uint64_t v41 = FigAlternateFilterTreeInsertLeaf((uint64_t)v78, v77, 750), v41))
                                         || v27
                                         && (uint64_t v41 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v78, v27),
                                             v41))
                                  {
                                    uint64_t v21 = v41;
                                  }
                                  else
                                  {
                                    uint64_t v21 = FigAlternateFilterTreeCreateFilter(v78, @"MultichannelSpatialAudioFilterTree", 760, &v79);
                                    if (!v21)
                                    {
                                      CFTypeRef cf = v79;
                                      CFTypeRef v79 = 0;
                                    }
                                  }
                                }
LABEL_97:
                                if (v78) {
                                  CFRelease(v78);
                                }
                                if (v39) {
                                  CFRelease(v39);
                                }
                                if (v79) {
                                  CFRelease(v79);
                                }
                                if (v69) {
                                  CFRelease(v69);
                                }
                                if (v38) {
                                  CFRelease(v38);
                                }
                                if (v76) {
                                  CFRelease(v76);
                                }
                                if (v77) {
                                  CFRelease(v77);
                                }
                                if (v74) {
                                  CFRelease(v74);
                                }
                                if (v75) {
                                  CFRelease(v75);
                                }
                                if (v73) {
                                  CFRelease(v73);
                                }
                                if (v71) {
                                  CFRelease(v71);
                                }
                                if (v72) {
                                  CFRelease(v72);
                                }
                                if (v70) {
                                  CFRelease(v70);
                                }
                                if (v21) {
                                  goto LABEL_275;
                                }
                                CFTypeRef v25 = cf;
                                CFTypeRef v42 = cf;
LABEL_148:
                                if (v42)
                                {
                                  CFTypeRef v46 = v67;
                                  CFTypeRef v67 = v42;
                                  CFRetain(v42);
                                  if (v46) {
                                    CFRelease(v46);
                                  }
                                  CFRelease(v42);
                                  CFTypeRef v25 = 0;
                                  CFTypeRef cf = 0;
                                }
                                goto LABEL_152;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v36 = FigSignalErrorAt();
                  }
                }
                uint64_t v21 = v36;
                uint64_t v38 = 0;
                goto LABEL_78;
              }
LABEL_156:
              uint64_t v28 = FigSignalErrorAt();
            }
          }
          uint64_t v21 = v28;
          long long v39 = 0;
          uint64_t v38 = 0;
          goto LABEL_97;
        }
LABEL_152:
        if ((unint64_t)--v26 <= 1) {
          goto LABEL_171;
        }
      }
      CFTypeRef v43 = v67;
      uint64_t v82 = 0;
      *(void *)&long long v83 = 0;
      uint64_t v88 = 0;
      v89[0] = 0;
      int v87 = 0;
      uint64_t v44 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
      if (!v44)
      {
        if (v89[0])
        {
          CFNumberRef v45 = (const __CFNumber *)v61[0];
          uint64_t v44 = FigAlternateEligibleLosslessAudioFilterCreate(v15, v61[0], &v82);
          if (!v44)
          {
            uint64_t v44 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v82, 510);
            if (!v44)
            {
              uint64_t v44 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v45, 3, -1, 1, &v88);
              if (!v44)
              {
                uint64_t v44 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 500);
                if (!v44)
                {
                  uint64_t v44 = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], 2u, (const __CFDictionary *)v61[1], v62[1], v45, v62[0], &v87);
                  if (!v44)
                  {
                    uint64_t v44 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 490);
                    if (!v44)
                    {
                      if (!v43 || (uint64_t v44 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v43), !v44))
                      {
                        uint64_t v21 = FigAlternateFilterTreeCreateFilter(v89[0], @"BinauralAudioFilterTree", 760, &v83);
                        if (!v21)
                        {
                          CFTypeRef cf = (CFTypeRef)v83;
                          CFTypeRef v25 = (CFTypeRef)v83;
                          *(void *)&long long v83 = 0;
                          CFTypeRef v42 = v25;
                          goto LABEL_137;
                        }
LABEL_161:
                        CFTypeRef v42 = 0;
LABEL_137:
                        if (v89[0]) {
                          CFRelease(v89[0]);
                        }
                        if ((void)v83) {
                          CFRelease((CFTypeRef)v83);
                        }
                        if (v88) {
                          CFRelease(v88);
                        }
                        if (v87) {
                          CFRelease(v87);
                        }
                        if (v82) {
                          CFRelease(v82);
                        }
                        if (v21) {
                          goto LABEL_275;
                        }
                        goto LABEL_148;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          uint64_t v44 = FigSignalErrorAt();
        }
      }
      uint64_t v21 = v44;
      goto LABEL_161;
    }
  }
  CFTypeRef v25 = 0;
LABEL_171:
  CFArrayRef v47 = theArray[1];
  if (!theArray[1])
  {
    CFArrayRef v48 = (CFArrayRef)v67;
LABEL_272:
    uint64_t Filter = FigAlternateFilterTreeInsertLeaf((uint64_t)v66, v48, 760);
    if (!Filter) {
      uint64_t Filter = FigAlternateFilterTreeCreateFilter(v66, @"CombinedAudioPreference", 760, a10);
    }
    goto LABEL_274;
  }
  CFArrayRef v48 = (CFArrayRef)v67;
  if (*(uint64_t *)&v60[2] > 2) {
    goto LABEL_193;
  }
  uint64_t v88 = 0;
  v89[0] = 0;
  int v87 = 0;
  uint64_t v49 = FigAlternateFilterTreeCreate((uint64_t)v15, &v88);
  if (v49) {
    goto LABEL_296;
  }
  if (!v88)
  {
    uint64_t v49 = FigSignalErrorAt();
LABEL_296:
    uint64_t v21 = v49;
    long long v50 = 0;
    goto LABEL_179;
  }
  FigAlternateFilterTreeInsertLeaf((uint64_t)v88, v47, 540);
  if (v48)
  {
    uint64_t v49 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v88, v48);
    if (v49) {
      goto LABEL_296;
    }
  }
  long long v83 = 0uLL;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = faf_losslessAudioOnlyFilterFn;
  FigSimpleAlternateFilterCreate((uint64_t)v15, @"LosslessAudioPreference", 760, &v83, 0, &v87);
  long long v50 = v87;
  FigAlternateFilterTreeInsertLeaf((uint64_t)v88, v87, 510);
  uint64_t v21 = FigAlternateFilterTreeCreateFilter(v88, @"OfflinePlayableLosslessTree", 760, v89);
  if (!v21)
  {
    CFTypeRef v25 = v89[0];
    CFTypeRef cf = v89[0];
    v89[0] = 0;
  }
LABEL_179:
  if (v88) {
    CFRelease(v88);
  }
  if (v89[0]) {
    CFRelease(v89[0]);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v21) {
    goto LABEL_275;
  }
  CFTypeRef v67 = v25;
  if (v25) {
    CFRetain(v25);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v25)
  {
    CFRelease(v25);
    CFTypeRef cf = 0;
  }
  CFArrayRef v47 = theArray[1];
  CFArrayRef v48 = (CFArrayRef)v67;
  if (!theArray[1]) {
    goto LABEL_272;
  }
LABEL_193:
  *(void *)&long long v83 = 0;
  uint64_t v88 = 0;
  v89[0] = 0;
  uint64_t v51 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
  if (v51)
  {
LABEL_294:
    uint64_t v21 = v51;
    goto LABEL_201;
  }
  if (!v89[0])
  {
    uint64_t v51 = FigSignalErrorAt();
    goto LABEL_294;
  }
  uint64_t v51 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v47, 540);
  if (v51) {
    goto LABEL_294;
  }
  uint64_t v51 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, (CFNumberRef)v61[0], 4, -1, 1, &v88);
  if (v51) {
    goto LABEL_294;
  }
  FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 530);
  if (v48)
  {
    uint64_t v51 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v48);
    if (v51) {
      goto LABEL_294;
    }
  }
  uint64_t v21 = FigAlternateFilterTreeCreateFilter(v89[0], @"OfflinePlayableImmersiveAudioTree", 760, &v83);
  if (!v21)
  {
    CFTypeRef cf = (CFTypeRef)v83;
    *(void *)&long long v83 = 0;
  }
LABEL_201:
  if (v89[0]) {
    CFRelease(v89[0]);
  }
  if ((void)v83) {
    CFRelease((CFTypeRef)v83);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v21) {
    goto LABEL_275;
  }
  CFTypeRef v52 = cf;
  CFTypeRef v67 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v52)
  {
    CFRelease(v52);
    CFTypeRef cf = 0;
  }
  if (!theArray[0] || (CFIndex v53 = CFArrayGetCount(theArray[0]), v53 < 1))
  {
    CFArrayRef v48 = (CFArrayRef)v52;
LABEL_271:
    CFTypeRef v67 = v48;
    CFTypeRef cf = 0;
    goto LABEL_272;
  }
  unint64_t v54 = v53 + 1;
  while (1)
  {
    LODWORD(v82) = 1064530531;
    FigCFArrayGetInt32AtIndex();
    if (v82 != 1651076712)
    {
      if (v82 != 1835824233) {
        goto LABEL_243;
      }
      *(void *)&long long v83 = 0;
      uint64_t v88 = 0;
      v89[0] = 0;
      int v87 = 0;
      CFArrayRef v48 = theArray[1];
      if (!theArray[1])
      {
        uint64_t v21 = 0;
        goto LABEL_230;
      }
      uint64_t v55 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
      if (!v55)
      {
        if (v89[0])
        {
          uint64_t v55 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v48, 540);
          if (!v55)
          {
            CFNumberRef v56 = (const __CFNumber *)v61[0];
            uint64_t v55 = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], v60[2], (const __CFDictionary *)v61[1], v62[1], (CFNumberRef)v61[0], v62[0], &v88);
            if (!v55)
            {
              uint64_t v55 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 490);
              if (!v55)
              {
                uint64_t v55 = FigAlternateMultichannelAudioFilterCreate(v15, v56, 1, 1, &v87);
                if (!v55)
                {
                  FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 480);
                  if (!v52 || (uint64_t v55 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v52), !v55))
                  {
                    uint64_t v21 = FigAlternateFilterTreeCreateFilter(v89[0], @"OfflinePlayableMultiTree", 760, &v83);
                    if (!v21)
                    {
                      CFArrayRef v48 = (CFArrayRef)v83;
                      *(void *)&long long v83 = 0;
                      goto LABEL_230;
                    }
                    goto LABEL_264;
                  }
                }
              }
            }
          }
        }
        else
        {
          uint64_t v55 = FigSignalErrorAt();
        }
      }
      uint64_t v21 = v55;
LABEL_264:
      CFArrayRef v48 = 0;
LABEL_230:
      if (v89[0]) {
        CFRelease(v89[0]);
      }
      if ((void)v83) {
        CFRelease((CFTypeRef)v83);
      }
      if (v88) {
        CFRelease(v88);
      }
      CFArrayRef v57 = v87;
      if (v87) {
        goto LABEL_237;
      }
      goto LABEL_238;
    }
    *(void *)&long long v83 = 0;
    uint64_t v88 = 0;
    v89[0] = 0;
    CFArrayRef v48 = theArray[1];
    if (!theArray[1])
    {
      uint64_t v21 = 0;
      goto LABEL_257;
    }
    uint64_t v58 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
    if (v58) {
      goto LABEL_267;
    }
    if (!v89[0])
    {
      uint64_t v58 = FigSignalErrorAt();
LABEL_267:
      uint64_t v21 = v58;
      goto LABEL_268;
    }
    uint64_t v58 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v48, 540);
    if (v58) {
      goto LABEL_267;
    }
    uint64_t v58 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, (CFNumberRef)v61[0], 3, -1, 1, &v88);
    if (v58) {
      goto LABEL_267;
    }
    FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 530);
    if (v52)
    {
      uint64_t v58 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v52);
      if (v58) {
        goto LABEL_267;
      }
    }
    uint64_t v21 = FigAlternateFilterTreeCreateFilter(v89[0], @"OfflinePlayableBinauralTree", 760, &v83);
    if (!v21)
    {
      CFArrayRef v48 = (CFArrayRef)v83;
      *(void *)&long long v83 = 0;
      goto LABEL_255;
    }
LABEL_268:
    CFArrayRef v48 = 0;
LABEL_255:
    if (v89[0]) {
      CFRelease(v89[0]);
    }
LABEL_257:
    if ((void)v83) {
      CFRelease((CFTypeRef)v83);
    }
    CFArrayRef v57 = v88;
    if (v88) {
LABEL_237:
    }
      CFRelease(v57);
LABEL_238:
    if (v21) {
      break;
    }
    if (v48)
    {
      CFRetain(v48);
      if (v52) {
        CFRelease(v52);
      }
      CFRelease(v48);
      goto LABEL_244;
    }
LABEL_243:
    CFArrayRef v48 = (CFArrayRef)v52;
LABEL_244:
    --v54;
    CFTypeRef v52 = v48;
    if (v54 <= 1) {
      goto LABEL_271;
    }
  }
  CFTypeRef v67 = v52;
  CFTypeRef cf = v48;
  if (v48) {
LABEL_276:
  }
    CFRelease(v48);
LABEL_277:
  if (v66) {
    CFRelease(v66);
  }
  if (v67) {
    CFRelease(v67);
  }
LABEL_281:
  if (theArray[1]) {
    CFRelease(theArray[1]);
  }
  if (v61[0]) {
    CFRelease(v61[0]);
  }
  return v21;
}

uint64_t FigAlternateLowestIndexAlternateFilterCreate(uint64_t a1, void *a2)
{
  return FigSimpleAlternateFilterCreate(a1, @"LowestIndex", 560, (long long *)&unk_1EE504AC8, 0, a2);
}

uint64_t faf_lowestIndexFilterComparatorFn(uint64_t a1, uint64_t a2)
{
  int AlternateIndex = FigAlternateGetAlternateIndex(a1);
  int v4 = FigAlternateGetAlternateIndex(a2);
  if (AlternateIndex >= v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (AlternateIndex > v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t FigAlternateSingleAlternateFilterCreate(uint64_t a1, const void *a2, int a3, const void *a4, int a5, void *a6)
{
  if (a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = faf_allEqualMinSortingFn;
  }
  long long v8 = 0uLL;
  int v9 = faf_singleAlternateFilterFn;
  CFIndex v10 = v6;
  CFIndex v11 = faf_singleAlternateFilterDescAddendum;
  return FigSimpleAlternateFilterCreate(a1, a4, a5, &v8, a2, a6);
}

CFStringRef faf_singleAlternateFilterDescAddendum(uint64_t a1, uint64_t a2)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@", a2);
}

uint64_t FigAlternateStartupScoreFilterCreate(const __CFAllocator *a1, void *a2)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  CFDataRef v4 = CFDataCreate(a1, (const UInt8 *)v8, 40);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFDataRef v5 = v4;
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"StartupScore", 555, (long long *)&off_1EE504AF0, v4, a2);
  CFRelease(v5);
  return v6;
}

UInt8 *faf_startupScoreFilterInit(const __CFData *a1)
{
  uint64_t result = (UInt8 *)CFDataGetBytePtr(a1);
  *(_WORD *)uint64_t result = 257;
  result[2] = 0;
  *((void *)result + 1) = 0xFFEFFFFFFFFFFFFFLL;
  result[16] = 0;
  *((void *)result + 3) = 0xFFEFFFFFFFFFFFFFLL;
  *((void *)result + 4) = 0;
  return result;
}

uint64_t faf_startupScoreFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int IsAudioOnly = FigAlternateIsAudioOnly(a1);
  int IsIFrameOnly = FigAlternateIsIFrameOnly(a1);
  double StartupScore = FigAlternateGetStartupScore(a1);
  uint64_t result = FigAlternateGetPeakBitRate(a1);
  if (!IsIFrameOnly)
  {
    const UInt8 *BytePtr = 0;
    if (IsAudioOnly)
    {
      if (StartupScore > *((double *)BytePtr + 3))
      {
        *((unsigned char *)BytePtr + 16) = 1;
        *((double *)BytePtr + 3) = StartupScore;
        *((_DWORD *)BytePtr + 9) = result;
      }
    }
    else
    {
      *((unsigned char *)BytePtr + 1) = 0;
      if (StartupScore > *((double *)BytePtr + 1))
      {
        *((unsigned char *)BytePtr + 2) = 1;
        *((double *)BytePtr + 1) = StartupScore;
        *((_DWORD *)BytePtr + 8) = result;
      }
    }
  }
  return result;
}

BOOL faf_startupScoreFilterFn(uint64_t a1, const __CFData *a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  BytePtr = CFDataGetBytePtr(a2);
  if (!*BytePtr)
  {
    if (BytePtr[16] && BytePtr[1])
    {
      int v5 = *((_DWORD *)BytePtr + 9);
      return v5 + 1 >= PeakBitRate;
    }
    if (BytePtr[2])
    {
      int v5 = *((_DWORD *)BytePtr + 8);
      return v5 + 1 >= PeakBitRate;
    }
  }
  return 0;
}

uint64_t faf_startupScoreFilterComparatorFn(uint64_t a1, uint64_t a2)
{
  ZeroIndexedint AlternateIndex = FigAlternateGetZeroIndexedAlternateIndex(a1);
  int v4 = FigAlternateGetZeroIndexedAlternateIndex(a2);
  if (ZeroIndexedAlternateIndex >= v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (ZeroIndexedAlternateIndex > v4) {
    return 1;
  }
  else {
    return v5;
  }
}

__CFString *faf_startupScoreFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  int v4 = Mutable;
  if (Mutable)
  {
    uint64_t v5 = "IFrameOnly ";
    uint64_t v6 = "";
    if (!*BytePtr) {
      uint64_t v5 = "";
    }
    if (BytePtr[1]) {
      double v7 = "AudioOnly ";
    }
    else {
      double v7 = "";
    }
    if (BytePtr[16]) {
      long long v8 = "hasAudioScore ";
    }
    else {
      long long v8 = "";
    }
    if (BytePtr[2]) {
      uint64_t v6 = "hasVideoScore ";
    }
    CFStringAppendFormat(Mutable, 0, @"%s%s%s%s", v5, v7, v8, v6);
    CFStringTrimWhitespace(v4);
  }
  return v4;
}

uint64_t FigAlternatePassthroughFilterCreate(uint64_t a1, const __CFString *a2, int a3, void *a4)
{
  if (a2)
  {
    if (a4)
    {
      MEMORY[0x19970EE10](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
      uint64_t v7 = CMDerivedObjectCreate();
      if (v7) {
        return v7;
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v9 = FigReentrantMutexCreate();
      *(void *)uint64_t DerivedStorage = v9;
      if (v9)
      {
        CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
        *(void *)(DerivedStorage + 16) = Copy;
        if (Copy)
        {
          uint64_t v11 = FigDispatchQueueCreateWithPriority();
          *(void *)(DerivedStorage + 24) = v11;
          if (v11)
          {
            uint64_t v12 = 0;
            *(_DWORD *)(DerivedStorage + 8) = a3;
            *a4 = 0;
            return v12;
          }
        }
      }
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t FigAlternateTransitionBiasFilterCreate(void *a1, CFTypeRef cf, const void *a3, void *a4)
{
  if (cf) {
    CFTypeRef v7 = CFRetain(cf);
  }
  else {
    CFTypeRef v7 = 0;
  }
  v10[0] = v7;
  if (a3) {
    CFTypeRef v8 = CFRetain(a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  v10[1] = v8;
  return fsaf_createWithBytes(a1, @"TransitionBias", 570, (uint64_t)faf_TransitionBiasFilterFn, 0, 0, 0, (CFTypeRef (*)())faf_TransitionBiasFilterAddendum, v10, 0x10uLL, (void (__cdecl *)(void *, void *))faf_TransitionBiasDeallocateCallback, a4);
}

uint64_t faf_TransitionBiasFilterFn(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (!*(void *)BytePtr) {
    return 0;
  }
  int v4 = BytePtr;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  uint64_t result = FigAlternateHasAudioFormatID((uint64_t)a1, 0);
  if (!result) {
    return result;
  }
  if (FigAlternateGetAudioChannelCounts(a1, *(const void **)v4, 0, 0)) {
    return 0;
  }
  if (!CFDictionaryContainsKey(*((CFDictionaryRef *)v4 + 1), @"bitdepth")
    || (FigCFDictionaryGetInt32IfPresent(),
        unsigned int AudioBitDepth = FigAlternateGetAudioBitDepth((uint64_t)a1, *(const void **)v4),
        uint64_t result = 0,
        !AudioBitDepth))
  {
    if (CFDictionaryContainsKey(*((CFDictionaryRef *)v4 + 1), @"samplerate"))
    {
      FigCFDictionaryGetDoubleIfPresent();
      return FigAlternateGetAudioSampleRate((uint64_t)a1, *(const void **)v4) == 0.0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

CFStringRef faf_TransitionBiasFilterAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)BytePtr + 1), @"bitdepth"))
  {
    CFNumberRef Value = CFDictionaryGetValue(*((CFDictionaryRef *)BytePtr + 1), @"bitdepth");
    CFStringAppendFormat(Mutable, 0, @" Bitdepth: %@", Value);
  }
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)BytePtr + 1), @"samplerate"))
  {
    uint64_t v6 = CFDictionaryGetValue(*((CFDictionaryRef *)BytePtr + 1), @"samplerate");
    CFStringAppendFormat(Mutable, 0, @" SampleRate: %@", v6);
  }
  CFTypeRef v7 = CFDictionaryGetValue(*((CFDictionaryRef *)BytePtr + 1), @"channels");
  CFStringRef v8 = CFStringCreateWithFormat(v3, 0, @"channels: %@%@", v7, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v8;
}

void faf_TransitionBiasDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  int v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = ptr[1];
  if (v5) {
    CFRelease(v5);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateHighestAtmosBitrateFilterCreate(const __CFAllocator *a1, void *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  CFDataRef v4 = CFDataCreate(a1, (const UInt8 *)v8, 16);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFDataRef v5 = v4;
  uint64_t v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"HighestAtmosBitrateFilter", 635, (long long *)&off_1EE504B30, v4, a2);
  CFRelease(v5);
  return v6;
}

const UInt8 *faf_HighestAtmosBitrateFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *uint64_t result = 0;
  *((void *)result + 1) = 0;
  return result;
}

uint64_t faf_HighestAtmosBitrateFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateGetPeakBitRate(a1);
  if (!*BytePtr)
  {
    int v5 = result;
    if (FigAlternateHasVideo(a1)) {
      UInt8 *BytePtr = 1;
    }
    uint64_t result = FigAlternateHasAudioFormat(a1, 7);
    if (result)
    {
      uint64_t result = *((void *)BytePtr + 1);
      if (!result || (uint64_t result = FigAlternateGetPeakBitRate(result), v5 > (int)result)) {
        *((void *)BytePtr + 1) = a1;
      }
    }
  }
  return result;
}

BOOL faf_HighestAtmosBitrateFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (*BytePtr) {
    return 1;
  }
  uint64_t v5 = *((void *)BytePtr + 1);
  return !v5 || v5 == a1;
}

uint64_t FigAlternatePreferExclusiveAudioPassthroughFilterCreate(const __CFAllocator *a1, int a2, void *a3)
{
  *(_DWORD *)UInt8 bytes = a2;
  CFDataRef v5 = CFDataCreate(a1, bytes, 4);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"PreferExclusiveAudioPassthrough", 639, (long long *)&unk_1EE504B58, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t faf_PreferExclusiveAudioPassthroughFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateHasAudioFormat(a1, 7) && BytePtr[2]
    || FigAlternateHasAudioFormat(a1, 6) && BytePtr[1])
  {
    return 1;
  }
  uint64_t result = FigAlternateHasAudioFormat(a1, 5);
  if (result) {
    return *BytePtr != 0;
  }
  return result;
}

uint64_t FigAlternateVideoLayoutCapabilityFilterCreate(const __CFAllocator *a1, const __CFArray *a2, void *a3)
{
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3 || !a2 || !CFArrayGetCount(a2))
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v6 = fiv_copyFilteringSupportedTagCollectionArray(a2, (CFMutableArrayRef *)&cf);
  if (v6)
  {
LABEL_10:
    uint64_t v11 = v6;
    VideoLayoutLoggingStringFromCollectionArray = 0;
    goto LABEL_11;
  }
  VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray((const __CFArray *)cf);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v9 = Mutable;
    CFTypeRef v10 = cf;
    if (cf) {
      CFTypeRef v10 = CFRetain(cf);
    }
    v13[0] = v10;
    v13[1] = CFRetain(v9);
    uint64_t v11 = fsaf_createWithBytes(a1, @"VideoLayoutCapability", 1000, (uint64_t)fivc_filterFn, 0, 0, 0, (CFTypeRef (*)())fivc_copyDescAddendum, v13, 0x10uLL, (void (__cdecl *)(void *, void *))fivc_deallocateContext, a3);
    CFRelease(v9);
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (VideoLayoutLoggingStringFromCollectionArray) {
    CFRelease(VideoLayoutLoggingStringFromCollectionArray);
  }
  return v11;
}

uint64_t fiv_copyFilteringSupportedTagCollectionArray(const __CFArray *a1, CFMutableArrayRef *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 4294951686;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294951685;
  }
  CFMutableArrayRef v6 = Mutable;
  CFMutableSetRef v7 = CFSetCreateMutable(v4, 0, MEMORY[0x1E4F1D548]);
  if (v7)
  {
    CFIndex v8 = 0;
    if (!a1) {
      goto LABEL_6;
    }
LABEL_5:
    for (CFIndex i = CFArrayGetCount(a1); v8 < i; CFIndex i = 0)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      CFTypeRef cf = 0;
      uint64_t v15 = *(void *)"kcapseyejorp";
      int v16 = 1886547818;
      uint64_t v11 = MEMORY[0x19970EA80](v4, ValueAtIndex, &v15, 3, &cf);
      if (v11)
      {
        uint64_t v12 = v11;
      }
      else
      {
        if (MEMORY[0x19970EAF0](cf) == 3) {
          FigTagCollectionGetTagsWithCategory();
        }
        uint64_t v12 = 0;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v12) {
        goto LABEL_25;
      }
      ++v8;
      if (a1) {
        goto LABEL_5;
      }
LABEL_6:
      ;
    }
    uint64_t v12 = 0;
    *a2 = v6;
LABEL_20:
    CFRelease(v7);
    return v12;
  }
  uint64_t v12 = 4294951685;
LABEL_25:
  CFRelease(v6);
  if (v7) {
    goto LABEL_20;
  }
  return v12;
}

BOOL fivc_filterFn(__CFArray *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFArrayRef v4 = *(const __CFArray **)BytePtr;
  int IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)a1);
  BOOL v6 = 0;
  if (IsAudioOnly || !v4) {
    return IsAudioOnly || v6;
  }
  if (CFArrayGetCount(v4))
  {
    CFMutableSetRef v7 = (__CFDictionary *)*((void *)BytePtr + 1);
    VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
    if (VideoLayoutTags)
    {
      CFArrayRef v9 = VideoLayoutTags;
      CFIndex Count = CFArrayGetCount(VideoLayoutTags);
      if (Count >= 1)
      {
        CFIndex v11 = 0;
        uint64_t v12 = 0;
        int v13 = (void *)*MEMORY[0x1E4F1CFC8];
        long long v14 = (void *)*MEMORY[0x1E4F1CFD0];
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v11);
          CMTimeValue value = v13;
          if (CFDictionaryGetValueIfPresent(v7, ValueAtIndex, (const void **)&value))
          {
            if (v14 != value) {
              break;
            }
            ++v12;
          }
          else
          {
            CFIndex v16 = 0;
            while (v16 < CFArrayGetCount(v4))
            {
              CFArrayGetValueAtIndex(v4, v16++);
              if (FigCFEqual())
              {
                ++v12;
                uint64_t v17 = v14;
                goto LABEL_15;
              }
            }
            uint64_t v17 = v13;
LABEL_15:
            CFDictionarySetValue(v7, ValueAtIndex, v17);
          }
          ++v11;
        }
        while (v11 != Count);
        int IsAudioOnly = 0;
        goto LABEL_20;
      }
    }
    else
    {
      CFIndex Count = 0;
    }
    uint64_t v12 = 0;
LABEL_20:
    BOOL v6 = v12 == Count;
    return IsAudioOnly || v6;
  }
  BOOL v6 = 0;
  return IsAudioOnly || v6;
}

CFStringRef fivc_copyDescAddendum(int a1, CFDataRef theData)
{
  CFArrayRef Count = *(const __CFArray **)CFDataGetBytePtr(theData);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  return CFStringCreateWithFormat(v3, 0, @"Channels:%ld", Count);
}

void fivc_deallocateContext(const void **ptr, CFAllocatorRef allocator)
{
  CFArrayRef v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }
  CFDataRef v5 = ptr[1];
  if (v5) {
    CFRelease(v5);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateVideoLayoutPreferenceFilterCreate(void *a1, const __CFArray *a2, void *a3)
{
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v11 = 0;
  CFTypeRef v12 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3 || !a2 || !CFArrayGetCount(a2))
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_13;
  }
  uint64_t v6 = fiv_copyFilteringSupportedTagCollectionArray(a2, (CFMutableArrayRef *)&cf);
  if (v6)
  {
LABEL_13:
    uint64_t v9 = v6;
    VideoLayoutLoggingStringFromCollectionArray = 0;
    goto LABEL_14;
  }
  VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray((const __CFArray *)cf);
  uint64_t inserted = FigAlternateFilterTreeCreate((uint64_t)a1, &v11);
  if (!inserted)
  {
    uint64_t inserted = fivp_createFilter(a1, cf, 1, &v13);
    if (!inserted)
    {
      uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v11, v13, 2);
      if (!inserted)
      {
        uint64_t inserted = fivp_createFilter(a1, cf, 0, &v12);
        if (!inserted)
        {
          uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v11, v12, 1);
          if (!inserted) {
            uint64_t inserted = FigAlternateFilterTreeCreateFilter(v11, @"VideoLayoutPreference", 880, a3);
          }
        }
      }
    }
  }
  uint64_t v9 = inserted;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (VideoLayoutLoggingStringFromCollectionArray) {
    CFRelease(VideoLayoutLoggingStringFromCollectionArray);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v9;
}

uint64_t fivp_createFilter(void *a1, CFTypeRef cf, int a3, void *a4)
{
  v10[1] = 0;
  void v10[2] = 0;
  if (cf) {
    CFTypeRef v7 = CFRetain(cf);
  }
  else {
    CFTypeRef v7 = 0;
  }
  v10[0] = v7;
  _OWORD v10[3] = a3 == 0;
  if (a3) {
    CFIndex v8 = @"VideoLayoutPreferenceMain";
  }
  else {
    CFIndex v8 = @"VideoLayoutPreferenceDisc";
  }
  return fsaf_createWithBytes(a1, v8, 880, (uint64_t)fivp_filterFn, 0, (uint64_t)fivp_firstPassFn, (uint64_t)fivp_filterInitFn, (CFTypeRef (*)())fivp_copyDescAddendum, v10, 0x20uLL, (void (__cdecl *)(void *, void *))fivp_deallocateContext, a4);
}

uint64_t FigAlternateVideoLayoutPinningFilterCreate(uint64_t a1, const void *a2, void *a3)
{
  if (a3) {
    return FigSimpleAlternateFilterCreate(a1, @"VideoLayoutPinning", 883, (long long *)&unk_1EE504B80, a2, a3);
  }
  else {
    return FigSignalErrorAt();
  }
}

BOOL fvlp_filterFn(__CFArray *a1)
{
  return FigCFEqual() || FigAlternateIsAudioOnly((uint64_t)a1) != 0;
}

CFStringRef fvlp_desc(uint64_t a1, const __CFArray *a2)
{
  VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(a2);
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"collection %@", VideoLayoutLoggingStringFromCollectionArray);
  if (VideoLayoutLoggingStringFromCollectionArray) {
    CFRelease(VideoLayoutLoggingStringFromCollectionArray);
  }
  return v3;
}

uint64_t FigAlternateSuppressDoVi5StereoFilterCreate(uint64_t a1, void *a2)
{
  if (a2) {
    return FigSimpleAlternateFilterCreate(a1, @"SuppressDoVi5Stereo", 1000, (long long *)&unk_1EE504BA8, 0, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

BOOL fsds_filterFn(__CFArray *a1)
{
  return !FigAlternateHasVideoDolbyVisionHEVCProfile((uint64_t)a1, 5)
      || !faf_alternateHasOnlyStereoVideo(a1);
}

uint64_t FigAlternateSuppressDoVi20MonoFilterCreate(uint64_t a1, void *a2)
{
  if (a2) {
    return FigSimpleAlternateFilterCreate(a1, @"SuppressDoVi20Mono", 1000, (long long *)&unk_1EE504BD0, 0, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t fsdm_filterFn(__CFArray *a1)
{
  if (!FigAlternateHasVideoDolbyVisionHEVCProfile((uint64_t)a1, 20)) {
    return 1;
  }
  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  CFIndex v3 = 0;
  uint64_t v4 = *MEMORY[0x1E4F21E68];
  CMTagValue v5 = *(void *)(MEMORY[0x1E4F21E68] + 8);
  do
  {
    if (VideoLayoutTags) {
      CFIndex Count = CFArrayGetCount(VideoLayoutTags);
    }
    else {
      CFIndex Count = 0;
    }
    BOOL v7 = v3 < Count;
    if (v3 >= Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v3);
    *(void *)&tagBuffer.category = 0;
    tagBuffer.CMTimeValue value = 0;
    CMItemCount numberOfTagsCopied = 0;
    CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_StereoView, &tagBuffer, 1, &numberOfTagsCopied);
    *(void *)&v12.category = v4;
    v12.CMTimeValue value = v5;
    ++v3;
  }
  while (CMTagEqualToTag(tagBuffer, v12));
  return v7;
}

uint64_t FigAlternateMediaValidationForStereoVideoFilterCreate(uint64_t a1, void *a2)
{
  if (a2) {
    return FigSimpleAlternateFilterCreate(a1, @"MediaValidationForStereoVideo", 1000, (long long *)&unk_1EE504BF8, 0, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

BOOL fmvsv_filterFn(__CFArray *a1)
{
  if (!faf_alternateHasOnlyStereoVideo(a1)) {
    return 1;
  }
  if (!FigAlternateHasVideoFormat((uint64_t)a1, 4)) {
    return FigAlternateHasVideoFormat((uint64_t)a1, 7) != 0;
  }
  BOOL v2 = FigAlternateGetVideoRange((uint64_t)a1) == 1;
  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  CFIndex v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F1F400];
  CMTagValue v6 = *(void *)(MEMORY[0x1E4F1F400] + 8);
  while (1)
  {
    CFIndex v7 = VideoLayoutTags ? CFArrayGetCount(VideoLayoutTags) : 0;
    if (v4 >= v7) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v4);
    *(void *)&tagBuffer.category = 0;
    tagBuffer.CMTimeValue value = 0;
    CMItemCount numberOfTagsCopied = 0;
    CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_ProjectionType, &tagBuffer, 1, &numberOfTagsCopied);
    *(void *)&v12.category = v5;
    v12.CMTimeValue value = v6;
    ++v4;
    if (CMTagEqualToTag(tagBuffer, v12)) {
      return 1;
    }
  }
  return v2;
}

uint64_t FigAlternateAmbisonicOrderFilterCreate(const __CFAllocator *a1, int a2, int a3, CFNumberRef number, int a5, void *a6)
{
  uint64_t valuePtr = 0;
  uint64_t v20 = 0;
  if (a5) {
    CFTypeRef v10 = 0;
  }
  else {
    CFTypeRef v10 = faf_AmbisonicOrderFilterMinSortingFn;
  }
  if (number) {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  }
  else {
    LODWORD(valuePtr) = -1;
  }
  HIDWORD(valuePtr) = a2;
  LODWORD(v20) = a3;
  CFDataRef v11 = CFDataCreate(a1, (const UInt8 *)&valuePtr, 16);
  if (!v11) {
    return FigSignalErrorAt();
  }
  CFDataRef v12 = v11;
  *(void *)&long long v15 = faf_AmbisonicOrderFilterInit;
  *((void *)&v15 + 1) = faf_AmbisonicOrderFilterFirstPassFn;
  CFIndex v16 = faf_AmbisonicOrderFilterFilterFn;
  uint64_t v17 = v10;
  CFTypeRef v18 = faf_AmbisonicOrderFilterAddendum;
  uint64_t v13 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"AmbisonicOrderAudio", 770, &v15, v11, a6);
  CFRelease(v12);
  return v13;
}

const UInt8 *faf_AmbisonicOrderFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((_DWORD *)result + 3) = -1;
  return result;
}

void faf_AmbisonicOrderFilterFirstPassFn(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0) {
    CFNumberRef v4 = 0;
  }
  else {
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
  }
  int AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, v4);
  if (AmbisonicsOrder > *((_DWORD *)BytePtr + 3)
    && *((_DWORD *)BytePtr + 1) <= AmbisonicsOrder
    && AmbisonicsOrder <= *((_DWORD *)BytePtr + 2))
  {
    *((_DWORD *)BytePtr + 3) = AmbisonicsOrder;
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

BOOL faf_AmbisonicOrderFilterFilterFn(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
  {
    int AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, 0);
  }
  else
  {
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
    int AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, v4);
    if (v4) {
      CFRelease(v4);
    }
  }
  return AmbisonicsOrder == *((_DWORD *)BytePtr + 3);
}

uint64_t faf_AmbisonicOrderFilterMinSortingFn(const void *a1, const void *a2, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0) {
    CFNumberRef v6 = 0;
  }
  else {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
  }
  int AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, v6);
  int v8 = FigAlternateGetAmbisonicsOrder(a2, v6);
  if (v6) {
    CFRelease(v6);
  }
  if (AmbisonicsOrder >= v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = -1;
  }
  if (AmbisonicsOrder > v8) {
    return 1;
  }
  else {
    return v9;
  }
}

CFStringRef faf_AmbisonicOrderFilterAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"minAmbisonicOrder:%d, maxAmbisonicOrder:%d", *((unsigned int *)BytePtr + 1), *((unsigned int *)BytePtr + 2));
}

uint64_t FigAlternateStereoCapForMultichannelFilterCreate(void *a1, CFTypeRef cf, void *a3)
{
  v7[1] = 0;
  if (cf) {
    CFTypeRef v5 = CFRetain(cf);
  }
  else {
    CFTypeRef v5 = 0;
  }
  v7[0] = v5;
  return fsaf_createWithBytes(a1, @"StereoCapForMultichannel", 750, (uint64_t)faf_stereoCapForMultichannelFilterFn, 0, (uint64_t)faf_stereoCapForMultichannelFirstPassFn, (uint64_t)faf_stereoCapForMultichannelFilterInit, 0, v7, 0x10uLL, (void (__cdecl *)(void *, void *))faf_stereoCapForMultichannelDeallocateContext, a3);
}

BOOL faf_stereoCapForMultichannelFilterFn(const void *a1, CFDataRef theData)
{
  int v6 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  int AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, *(const void **)BytePtr, &v6, 0);
  return AudioChannelCounts - v6 > 2
      || (int)FigAlternateGetExpectedAverageBitrate((uint64_t)a1) < *((_DWORD *)BytePtr + 2);
}

uint64_t faf_stereoCapForMultichannelFirstPassFn(const void *a1, CFDataRef theData)
{
  int v5 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateGetAudioChannelCounts(a1, *(const void **)BytePtr, &v5, 0);
  if ((int)result - v5 >= 3)
  {
    uint64_t result = FigAlternateGetExpectedAverageBitrate((uint64_t)a1);
    if ((int)result < *((_DWORD *)BytePtr + 2)) {
      *((_DWORD *)BytePtr + 2) = result;
    }
  }
  return result;
}

const UInt8 *faf_stereoCapForMultichannelFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((_DWORD *)result + 2) = 0x7FFFFFFF;
  return result;
}

void faf_stereoCapForMultichannelDeallocateContext(const void **ptr, CFAllocatorRef allocator)
{
  CFNumberRef v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateMinimumRequiredPixelCountFilterCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  v9[0] = a2;
  v9[1] = 0;
  CFDataRef v5 = CFDataCreate(a1, (const UInt8 *)v9, 16);
  if (!v5) {
    return FigSignalErrorAt();
  }
  CFDataRef v6 = v5;
  uint64_t v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, @"MinimumRequiredPixelCount", 530, (long long *)&off_1EE504C20, v5, a3);
  CFRelease(v6);
  return v7;
}

const UInt8 *faf_preferPixelCountFilterInit(const __CFData *a1)
{
  uint64_t result = CFDataGetBytePtr(a1);
  *((void *)result + 1) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t faf_preferPixelCountFilterFirstPassFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t result = FigAlternateGetPixelCount(a1);
  if (*(void *)BytePtr) {
    BOOL v5 = result < *(void *)BytePtr;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *((void *)BytePtr + 1);
    if (v6 >= result) {
      uint64_t v6 = result;
    }
    *((void *)BytePtr + 1) = v6;
  }
  return result;
}

BOOL faf_preferPixelCountFilterFn(uint64_t a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return FigAlternateGetPixelCount(a1) == *((void *)BytePtr + 1);
}

CFStringRef faf_preferPixelCountFilterDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"pixelCounts %lld", *(void *)BytePtr);
}

CFStringRef FigAlternateFilterCopyFormattingDesc(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFNumberRef v4 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  BOOL v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  if (v5) {
    uint64_t v6 = (__CFString *)v5(a1);
  }
  else {
    uint64_t v6 = &stru_1EE53F4B8;
  }
  CFAllocatorRef v7 = *v4;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(uint64_t (**)(uint64_t))(v9 + 16);
  if (v10) {
    uint64_t v11 = v10(a1);
  }
  else {
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  return CFStringCreateWithFormat(v7, 0, @"[FigAlternateFilter <%@:%p> priority:%d]", v6, a1, v11);
}

uint64_t faf_equal(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t))(v5 + 8);
    if (!v6)
    {
      if (!a2) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    v6(a1);
  }
  if (!a2) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t))(v8 + 8);
  if (v9) {
    v9(a2);
  }
LABEL_15:

  return FigCFEqual();
}

uint64_t fsaf_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 72);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 72) = 0;
  }

  return FigSimpleMutexDestroy();
}

CFStringRef fsaf_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](v3[7]);
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v3[6];
  uint64_t v5 = v3[9];
  if (v4)
  {
    CFStringRef v6 = (const __CFString *)v4(a1, v5);
LABEL_3:
    CFStringRef v7 = v6;
    MEMORY[0x19970E930](v3[7]);
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_4;
  }
  if (!v5)
  {
    CFStringRef v6 = (const __CFString *)CFRetain(&stru_1EE53F4B8);
    goto LABEL_3;
  }
  uint64_t v13 = (const void *)FigCFCopyCompactDescription();
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"context:%@", v13);
  MEMORY[0x19970E930](v3[7]);
  if (v13) {
    CFRelease(v13);
  }
LABEL_4:
  CFIndex Length = CFStringGetLength(v7);
  CFTypeRef v10 = " ";
  if (!Length) {
    CFTypeRef v10 = "";
  }
  CFStringRef v11 = CFStringCreateWithFormat(v8, 0, @"[FigSimpleAlternateFilter <%@:%p> priority:%d%s%@]", *(void *)DerivedStorage, a1, *(unsigned int *)(DerivedStorage + 8), v10, v7);
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

uint64_t fsaf_getName()
{
  return *(void *)CMBaseObjectGetDerivedStorage();
}

uint64_t fsaf_getPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t fsaf_apply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v15 = 0u;
  long long v16 = 0u;
  if (!a2)
  {
    uint64_t v11 = FigSignalErrorAt();
    CFArrayRef Mutable = 0;
    goto LABEL_15;
  }
  CFStringRef v7 = (void *)DerivedStorage;
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (CFArrayGetCount(a2) >= 1)
  {
    MEMORY[0x19970E910](v7[7]);
    CFTypeRef v10 = (void (*)(void))v7[2];
    if (v10) {
      v10(v7[9]);
    }
    *(void *)&long long v15 = a1;
    *(void *)&long long v16 = Mutable;
    if (!v7[3]
      || (v17.length = CFArrayGetCount(a2),
          v17.CFIndex location = 0,
          CFArrayApplyFunction(a2, v17, (CFArrayApplierFunction)fsaf_firstPassCFArrayApplierFn, &v15),
          uint64_t v11 = DWORD2(v16),
          !DWORD2(v16)))
    {
      if (!v7[4]
        || (v18.length = CFArrayGetCount(a2),
            v18.CFIndex location = 0,
            CFArrayApplyFunction(a2, v18, (CFArrayApplierFunction)fsaf_applyCFArrayApplierFn, &v15),
            uint64_t v11 = DWORD2(v16),
            !DWORD2(v16)))
      {
        if (CFArrayGetCount(Mutable)
          || !v7[5]
          || (CFRelease(Mutable),
              CFAllocatorRef v12 = CFGetAllocator(a1),
              (CFArrayRef Mutable = faf_copyMinimumAlternatesFromArray(v12, a2, v7[5], v7[9])) != 0))
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v11 = FigSignalErrorAt();
        }
      }
    }
    MEMORY[0x19970E930](v7[7]);
LABEL_15:
    if (v11) {
      goto LABEL_19;
    }
  }
  if (*a3) {
    CFRelease(*a3);
  }
  CFAllocatorRef v13 = CFGetAllocator(a1);
  uint64_t v11 = 0;
  *a3 = CFArrayCreateCopy(v13, Mutable);
LABEL_19:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v11;
}

uint64_t fsaf_firstPassCFArrayApplierFn(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(a2 + 24))
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(result + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(result + 72);
      return v5(a1, v6);
    }
  }
  return result;
}

void fsaf_applyCFArrayApplierFn(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(a2 + 24))
  {
    uint64_t v5 = *(unsigned int (**)(const void *, void))(DerivedStorage + 32);
    if (v5)
    {
      if (v5(a1, *(void *)(DerivedStorage + 72)))
      {
        uint64_t v6 = *(__CFArray **)(a2 + 16);
        CFArrayAppendValue(v6, a1);
      }
    }
  }
}

CFArrayRef faf_copyMinimumAlternatesFromArray(const __CFAllocator *a1, const __CFArray *a2, uint64_t a3, uint64_t a4)
{
  long long v12 = 0u;
  *(_OWORD *)CFArrayRef theArray = 0u;
  CFArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v9 = Mutable;
  if (a2 && Mutable)
  {
    theArray[1] = Mutable;
    *(void *)&long long v12 = a3;
    *((void *)&v12 + 1) = a4;
    v14.length = CFArrayGetCount(a2);
    v14.CFIndex location = 0;
    CFArrayApplyFunction(a2, v14, (CFArrayApplierFunction)faf_minimumCFArrayApplierFn, &v12);
    CFArrayRef Copy = CFArrayCreateCopy(a1, theArray[1]);
LABEL_4:
    CFRelease(v9);
    return Copy;
  }
  CFArrayRef Copy = 0;
  CFArrayRef result = 0;
  if (v9) {
    goto LABEL_4;
  }
  return result;
}

void faf_minimumCFArrayApplierFn(const void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(const void *, uint64_t, void))a2)(a1, v4, *(void *)(a2 + 8));
    if (v5 == 1) {
      return;
    }
    if (v5 == -1)
    {
      *(void *)(a2 + 16) = a1;
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a2 + 24));
    }
  }
  else
  {
    *(void *)(a2 + 16) = a1;
  }
  uint64_t v6 = *(__CFArray **)(a2 + 24);

  CFArrayAppendValue(v6, a1);
}

void faf_mergeFilterFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef faf_mergeFilterCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  uint64_t v5 = Mutable;
  CFStringAppendFormat(Mutable, 0, @"[FigAlternateMergeFilter <%@:%p> priority:%d]", *(void *)DerivedStorage, a1, *(unsigned int *)(DerivedStorage + 8));
  CFStringRef v6 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 16));
  CFStringRef v7 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 24));
  if (v6)
  {
    uint64_t v8 = FigCFStringCopyWithIndent();
    CFArrayRef v9 = (const void *)v8;
    if (!v8)
    {
      CFStringRef Copy = 0;
      goto LABEL_10;
    }
    CFStringAppendFormat(v5, 0, @"\n%@", v8);
    CFRelease(v9);
  }
  if (v7)
  {
    uint64_t v10 = FigCFStringCopyWithIndent();
    CFArrayRef v9 = (const void *)v10;
    if (!v10)
    {
      CFStringRef Copy = 0;
      if (!v6) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    CFStringAppendFormat(v5, 0, @"\n%@", v10);
  }
  else
  {
    CFArrayRef v9 = 0;
  }
  CFStringRef Copy = CFStringCreateCopy(v3, v5);
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v5);
  if (v9) {
    CFRelease(v9);
  }
  return Copy;
}

uint64_t faf_mergeFilterCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  if (a2 && a4)
  {
    uint64_t result = CFEqual(@"FAFProperty_CountOfChildFilters", a2);
    if (result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = faf_mergeFilterCountFilterAndItsChildren(*(void *)(DerivedStorage + 16));
      uint64_t valuePtr = faf_mergeFilterCountFilterAndItsChildren(*(void *)(DerivedStorage + 24)) + v7;
      CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, &valuePtr);
      *a4 = v8;
      if (v8) {
        return 0;
      }
      else {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t faf_mergeFilterCountFilterAndItsChildren(uint64_t a1)
{
  uint64_t v9 = 0;
  CFNumberRef number = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v3 + 48);
  if (!v4) {
    return 1;
  }
  int v5 = v4(a1, @"FAFProperty_CountOfChildFilters", *MEMORY[0x1E4F1CF80], &number);
  CFNumberRef v6 = number;
  if (v5)
  {
    uint64_t v7 = 1;
    if (!number) {
      return v7;
    }
    goto LABEL_7;
  }
  CFNumberGetValue(number, kCFNumberLongType, &v9);
  CFNumberRef v6 = number;
  uint64_t v7 = v9 + 1;
  if (number) {
LABEL_7:
  }
    CFRelease(v6);
  return v7;
}

uint64_t faf_mergeFilterName()
{
  return *(void *)CMBaseObjectGetDerivedStorage();
}

uint64_t faf_mergeFilterPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t faf_mergeFilterApply(uint64_t a1, const __CFArray *a2, CFTypeRef *a3)
{
  return faf_mergeFilterApplyReturningInfo(a1, a2, a3, 0);
}

uint64_t faf_mergeFilterApplyReturningInfo(uint64_t a1, const __CFArray *a2, CFTypeRef *a3, CFDataRef *a4)
{
  CFArrayRef v63 = 0;
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v61 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F20258]);
  if (!Mutable)
  {
    uint64_t v21 = FigSignalErrorAt();
    CFMutableArrayRef v11 = 0;
    goto LABEL_104;
  }
  CFMutableArrayRef v11 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  if (!v11)
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_104;
  }
  uint64_t v12 = *(void *)(DerivedStorage + 16);
  if (a4) {
    p_CFTypeRef cf = &cf;
  }
  else {
    p_CFTypeRef cf = 0;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v16 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *, CFTypeRef *))(v15 + 32);
  if (v16)
  {
    uint64_t v17 = v16(v12, a2, &theArray, p_cf);
  }
  else
  {
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *))(v19 + 24);
    if (!v20) {
      goto LABEL_43;
    }
    uint64_t v17 = v20(v12, a2, &theArray);
  }
  uint64_t v21 = v17;
  if (v17)
  {
LABEL_104:
    uint64_t v35 = 0;
    goto LABEL_87;
  }
  uint64_t v22 = *(void *)(DerivedStorage + 24);
  if (a4) {
    CFTypeRef v23 = &v61;
  }
  else {
    CFTypeRef v23 = 0;
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  CFIndex v26 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *, CFTypeRef *))(v25 + 32);
  if (v26)
  {
    uint64_t v27 = v26(v22, a2, &v63, v23);
    goto LABEL_30;
  }
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *))(v29 + 24);
  if (!v30)
  {
LABEL_43:
    uint64_t v35 = 0;
    uint64_t v21 = 4294954514;
    goto LABEL_87;
  }
  uint64_t v27 = v30(v22, a2, &v63);
LABEL_30:
  uint64_t v21 = v27;
  if (v27) {
    goto LABEL_104;
  }
  int v31 = *(_DWORD *)(DerivedStorage + 32);
  if (v31)
  {
    if (!theArray || !CFArrayGetCount(theArray)) {
      goto LABEL_50;
    }
    int v31 = *(_DWORD *)(DerivedStorage + 32);
  }
  if ((v31 & 2) == 0 || v63 && CFArrayGetCount(v63))
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (i >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFSetAddValue(Mutable, ValueAtIndex);
    }
    for (CFIndex j = 0; ; ++j)
    {
      CFIndex v37 = (CFIndex)v63;
      if (v63) {
        CFIndex v37 = CFArrayGetCount(v63);
      }
      if (j >= v37) {
        break;
      }
      uint64_t v38 = CFArrayGetValueAtIndex(v63, j);
      CFSetAddValue(Mutable, v38);
    }
    CFSetApplyFunction(Mutable, (CFSetApplierFunction)faf_mergeSetApplier, v11);
  }
LABEL_50:
  if (a4)
  {
    uint64_t v35 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (!v35) {
      goto LABEL_105;
    }
    long long v39 = cf;
    if (!cf)
    {
      CFArrayRef v59 = theArray;
      uint64_t v58 = a2 ? CFArrayGetCount(a2) : 0;
      uint64_t v40 = *(void *)(DerivedStorage + 16);
      uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v42 = v41 ? v41 : 0;
      CFTypeRef v43 = *(uint64_t (**)(uint64_t))(v42 + 8);
      uint64_t v44 = v43 ? (__CFString *)v43(v40) : &stru_1EE53F4B8;
      long long v39 = FigAlternateFilterApplyInfoCreate(v9, v59, v58, v44, 0);
      CFTypeRef cf = v39;
      if (!v39) {
        goto LABEL_105;
      }
    }
    CFArrayAppendValue(v35, v39);
    CFNumberRef v45 = v61;
    if (!v61)
    {
      CFArrayRef v60 = v63;
      uint64_t v46 = a2 ? CFArrayGetCount(a2) : 0;
      uint64_t v47 = *(void *)(DerivedStorage + 24);
      uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v49 = v48 ? v48 : 0;
      long long v50 = *(uint64_t (**)(uint64_t))(v49 + 8);
      uint64_t v51 = v50 ? (__CFString *)v50(v47) : &stru_1EE53F4B8;
      CFNumberRef v45 = FigAlternateFilterApplyInfoCreate(v9, v60, v46, v51, 0);
      CFTypeRef v61 = v45;
      if (!v45) {
        goto LABEL_105;
      }
    }
    CFArrayAppendValue(v35, v45);
    if (a2) {
      a2 = (const __CFArray *)CFArrayGetCount(a2);
    }
    uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v53 = v52 ? v52 : 0;
    unint64_t v54 = *(uint64_t (**)(uint64_t))(v53 + 8);
    uint64_t v55 = v54 ? (__CFString *)v54(a1) : &stru_1EE53F4B8;
    CFDataRef v56 = FigAlternateFilterApplyInfoCreate(v9, v11, (uint64_t)a2, v55, v35);
    *a4 = v56;
    if (!v56)
    {
LABEL_105:
      uint64_t v21 = FigSignalErrorAt();
      goto LABEL_87;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  if (*a3) {
    CFRelease(*a3);
  }
  uint64_t v21 = 0;
  *a3 = v11;
  CFMutableArrayRef v11 = 0;
LABEL_87:
  if (cf) {
    CFRelease(cf);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v21;
}

void faf_mergeSetApplier(void *value, CFMutableArrayRef theArray)
{
}

uint64_t fhaf_finalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0) {
    CFRelease(v0);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef fhaf_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  CFNumberRef v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (v6) {
    uint64_t v7 = (__CFString *)v6(a1);
  }
  else {
    uint64_t v7 = &stru_1EE53F4B8;
  }
  CFAllocatorRef v8 = *v5;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFMutableArrayRef v11 = *(uint64_t (**)(uint64_t))(v10 + 16);
  if (v11) {
    uint64_t v12 = v11(a1);
  }
  else {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  StringFromHDCPState = FigAlternateGetStringFromHDCPState(*(_DWORD *)(DerivedStorage + 24));
  uint64_t v14 = FigAlternateGetStringFromHDCPState(*(_DWORD *)(DerivedStorage + 28));
  CFStringRef v15 = CFStringCreateWithFormat(v8, 0, @"[FigHDCPAlternateFilter <%@: %p> priority: %d hdcp0:%@ hdcp1:%@]", v7, a1, v12, StringFromHDCPState, v14);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  return v15;
}

__CFString *fhaf_getName()
{
  return @"HDCP";
}

uint64_t fhaf_getPriority()
{
  return 879;
}

uint64_t faf_HDCPAlternateFilterApply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFNumberRef v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a2 && (CFAllocatorRef v7 = CFGetAllocator(a1), (MutableCopy = CFArrayCreateMutableCopy(v7, 0, a2)) != 0))
  {
    uint64_t v9 = MutableCopy;
    if (CFArrayGetCount(a2) < 1)
    {
      char v12 = 0;
      char v11 = 0;
    }
    else
    {
      CFIndex v10 = 0;
      char v11 = 0;
      char v12 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v10);
        int HDCPLevel = FigAlternateGetHDCPLevel((uint64_t)ValueAtIndex);
        if (!HDCPLevel) {
          char v11 = 1;
        }
        if (HDCPLevel == 1) {
          char v12 = 1;
        }
        if (v11) {
          BOOL v15 = v12 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15) {
          break;
        }
        ++v10;
      }
      while (v10 < CFArrayGetCount(a2));
    }
    if (v11 | v12) {
      BOOL v16 = v6 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      int v17 = -1;
      if (v12)
      {
        if (faf_getHDCPState((uint64_t)a1, 1) > 1) {
          int v17 = -1;
        }
        else {
          int v17 = 1;
        }
      }
      if (v11 && v17 < 0)
      {
        if (faf_getHDCPState((uint64_t)a1, 0) <= 1) {
          int v17 = 0;
        }
        else {
          int v17 = -1;
        }
      }
      if (v11) {
        BOOL v18 = v17 < 0;
      }
      else {
        BOOL v18 = 0;
      }
      int v19 = v18;
      BOOL v20 = v17 >= 1 || v12 == 0;
      if (!v20 || v19)
      {
        CFIndex Count = CFArrayGetCount(a2);
        if (Count >= 1)
        {
          unint64_t v22 = Count + 1;
          do
          {
            CFTypeRef v23 = CFArrayGetValueAtIndex(a2, v22 - 2);
            if ((int)FigAlternateGetHDCPLevel((uint64_t)v23) > v17) {
              CFArrayRemoveValueAtIndex(v9, v22 - 2);
            }
            --v22;
          }
          while (v22 > 1);
        }
      }
    }
    while (1)
    {
LABEL_47:
      if (v9)
      {
        if (CFArrayGetCount(v9)) {
          break;
        }
        CFRelease(v9);
      }
      CFAllocatorRef v24 = CFGetAllocator(a1);
      uint64_t v9 = faf_copyMinimumAlternatesFromArray(v24, a2, (uint64_t)faf_HDCPAlternateMinSortingFn, 0);
      if (v9) {
        break;
      }
      uint64_t v25 = FigSignalErrorAt();
      if (v25) {
        goto LABEL_56;
      }
    }
    if (*a3) {
      CFRelease(*a3);
    }
    CFAllocatorRef v26 = CFGetAllocator(a1);
    *a3 = CFArrayCreateCopy(v26, v9);
    CFRelease(v9);
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = FigSignalErrorAt();
    if (!v25)
    {
      uint64_t v9 = 0;
      goto LABEL_47;
    }
  }
LABEL_56:
  if (v6) {
    CFRelease(v6);
  }
  return v25;
}

uint64_t faf_getHDCPState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (a2 == 1)
  {
    uint64_t v4 = *(unsigned int *)(DerivedStorage + 28);
    if (v4 == -2)
    {
      uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v5)
      {
        CFNumberRef v6 = (const void *)v5;
        uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(DerivedStorage + 16))(1, v5);
        *(_DWORD *)(DerivedStorage + 28) = v4;
LABEL_8:
        CFRelease(v6);
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(DerivedStorage + 24);
    if (v4 == -2)
    {
      uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v7)
      {
        CFNumberRef v6 = (const void *)v7;
        uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(DerivedStorage + 8))(0, v7);
        *(_DWORD *)(DerivedStorage + 24) = v4;
        goto LABEL_8;
      }
LABEL_9:
      uint64_t v4 = 4294967294;
    }
  }
LABEL_10:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  return v4;
}

uint64_t faf_HDCPAlternateMinSortingFn(uint64_t a1, uint64_t a2)
{
  int HDCPLevel = FigAlternateGetHDCPLevel(a1);
  int v4 = FigAlternateGetHDCPLevel(a2);
  if (HDCPLevel >= v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (HDCPLevel > v4) {
    return 1;
  }
  else {
    return v5;
  }
}

void fmsaaf_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

CFStringRef fmsaaf_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  CFArrayRef Mutable = 0;
  CFIndex v3 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFArrayRef Count = *DerivedStorage;
    if (*DerivedStorage) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v3 >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*DerivedStorage, v3);
    CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
    CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
    FigGetCFStringForOSTypeValue();
    if (FigCFEqual()) {
      BOOL v8 = Value == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (Mutable) {
        CFStringAppend(Mutable, @",");
      }
      else {
        CFArrayRef Mutable = CFStringCreateMutable(v4, 0);
      }
      CFStringAppendFormat(Mutable, 0, @"%@", Value);
    }
    ++v3;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = *(uint64_t (**)(uint64_t))(v10 + 8);
  if (v11) {
    char v12 = (__CFString *)v11(a1);
  }
  else {
    char v12 = &stru_1EE53F4B8;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  BOOL v15 = *(uint64_t (**)(uint64_t))(v14 + 16);
  if (v15) {
    uint64_t v16 = v15(a1);
  }
  else {
    uint64_t v16 = 0xFFFFFFFFLL;
  }
  int v17 = @"NULL";
  if (Mutable) {
    int v17 = Mutable;
  }
  CFStringRef v18 = CFStringCreateWithFormat(v4, 0, @"[FigMediaSelectionAudibleAlternateFilter <%@: %p> priority: %d persistentIDs: %@]", v12, a1, v16, v17);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v18;
}

__CFString *fmsaaf_getName()
{
  return @"MediaSelectionAudible";
}

uint64_t fmsaaf_getPriority()
{
  return 950;
}

uint64_t faf_mediaSelectionAudibleAlternateFilterApply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (uint64_t v7 = (CFArrayRef *)DerivedStorage,
        CFAllocatorRef v8 = CFGetAllocator(a1),
        (CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(v8, 0, a2)) != 0))
  {
    uint64_t v10 = MutableCopy;
    unint64_t v22 = a1;
    CFTypeRef v23 = a3;
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *v7;
      if (*v7) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v7, i);
      CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
      CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
      FigGetCFStringForOSTypeValue();
      if (FigCFEqual()) {
        BOOL v15 = Value == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15)
      {
        CFIndex v16 = CFArrayGetCount(a2);
        if (v16 >= 1)
        {
          unint64_t v17 = v16 + 1;
          do
          {
            CFStringRef v18 = CFArrayGetValueAtIndex(a2, v17 - 2);
            CFDictionaryRef AudioGroupLocatorMap = (const __CFDictionary *)FigAlternateGetAudioGroupLocatorMap((uint64_t)v18);
            if (!FigAlternateIsIFrameOnly((uint64_t)v18)
              && AudioGroupLocatorMap
              && !CFDictionaryContainsKey(AudioGroupLocatorMap, Value))
            {
              CFArrayRemoveValueAtIndex(v10, v17 - 2);
            }
            --v17;
          }
          while (v17 > 1);
        }
      }
    }
    a1 = v22;
    a3 = v23;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
    uint64_t v10 = 0;
  }
  if (*a3) {
    CFRelease(*a3);
  }
  CFAllocatorRef v20 = CFGetAllocator(a1);
  *a3 = CFArrayCreateCopy(v20, v10);
  if (v10) {
    CFRelease(v10);
  }
  return 0;
}

uint64_t fsaf_filterFnNoContext(uint64_t a1, CFDataRef theData)
{
  CFIndex v3 = *(uint64_t (**)(uint64_t))CFDataGetBytePtr(theData);

  return v3(a1);
}

uint64_t fsaf_ComparatorFnNoContext(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, void))*((void *)CFDataGetBytePtr(theData) + 1);

  return v5(a1, a2, 0);
}

uint64_t faf_isMediaSelectionOptionOfflinePlayable(uint64_t a1, uint64_t a2, int a3)
{
  CFURLRef v10 = 0;
  CMTimeValue value = 0;
  FigAlternateGetRenditionInfoForMediaType(a2, a3, *(const void **)(a1 + 16), *(const void **)(a1 + 24), *(const void **)(a1 + 32), 1, (const __CFDictionary **)&value, 0, &v10);
  CFTypeRef v4 = FigCFHTTPCreateURLString(v10);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  if (value)
  {
    CFArrayRef v6 = *(const __CFArray **)(a1 + 8);
    if (v6)
    {
      v12.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
      v12.CFIndex location = 0;
      LODWORD(v6) = CFArrayContainsValue(v6, v12, value);
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  CFArrayRef v7 = *(const __CFArray **)a1;
  v13.length = CFArrayGetCount(v7);
  v13.CFIndex location = 0;
  uint64_t v8 = CFArrayContainsValue(v7, v13, v5) | v6;
  CFRelease(v5);
  return v8;
}

uint64_t faf_videoRangePreferenceComparator(unsigned int a1, unsigned int a2)
{
  if (a1 >= a2) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = -1;
  }
  if (a1 > a2) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t faf_videoFormatPreferenceExactMatchComparator(unsigned int a1, unsigned int a2)
{
  if (a1 >= a2) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = -1;
  }
  if (a1 > a2) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t faf_videoFormatPreferenceFilterMinSortingFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
  unsigned int v6 = *BytePtr;
  uint64_t v7 = BytePtr[1];
  unsigned int VideoRange = FigAlternateGetVideoRange(a1);
  unsigned int v9 = FigAlternateGetVideoRange(a2);
  unsigned int BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  unsigned int v11 = FigAlternateGetBestVideoFormat(a2);
  unsigned int v12 = VideoRange;
  unsigned int v13 = v9;
  uint64_t v14 = faf_videoRangePreferenceComparator(v12, v9);
  if (v14)
  {
    uint64_t v15 = v14;
    if (faf_videoRangePreferenceComparator(v6, v12) == -1)
    {
      uint64_t v16 = -v15;
    }
    else if (faf_videoRangePreferenceComparator(v6, v13) == -1)
    {
      uint64_t v16 = 1;
    }
    else
    {
      uint64_t v16 = v15;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (v7)
    {
      if (v7 == v11 || v7 == BestVideoFormat)
      {
        CFStringRef v18 = faf_videoFormatPreferenceExactMatchComparator;
        uint64_t v19 = ((uint64_t (*)(void, void, void))faf_videoFormatPreferenceExactMatchComparator)(BestVideoFormat, v11, 0);
      }
      else
      {
        CFStringRef v18 = faf_videoFormatPreferenceMixableMatchComparator;
        uint64_t v19 = ((uint64_t (*)(void, void, void))faf_videoFormatPreferenceMixableMatchComparator)(BestVideoFormat, v11, 0);
      }
      if (v19)
      {
        uint64_t v20 = v19;
        if (((uint64_t (*)(uint64_t, void, void))v18)(v7, BestVideoFormat, 0) == -1)
        {
          uint64_t v16 = -v20;
        }
        else if (((uint64_t (*)(uint64_t, void, void))v18)(v7, v11, 0) == -1)
        {
          uint64_t v16 = 1;
        }
        else
        {
          uint64_t v16 = v20;
        }
      }
      else
      {
        unsigned int BestSupplementalVideoFormat = FigAlternateGetBestSupplementalVideoFormat(a1);
        unsigned int v22 = FigAlternateGetBestSupplementalVideoFormat(a2);
        uint64_t v23 = 1;
        if (BestSupplementalVideoFormat <= v22) {
          uint64_t v23 = -1;
        }
        if (BestSupplementalVideoFormat == v22 || v6 != 3 || BestVideoFormat - 3 >= 3) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = v23;
        }
      }
    }
  }
  return -v16;
}

uint64_t faf_videoFormatPreferenceMixableMatchComparator(unsigned int a1, unsigned int a2)
{
  if (a1 - 6 >= 0xFFFFFFFB) {
    unsigned int v2 = 6;
  }
  else {
    unsigned int v2 = a1;
  }
  if (v2 >= a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = -1;
  }
  if (v2 > a2) {
    uint64_t v3 = 1;
  }
  if (v2 == 6 && a2 - 6 >= 0xFFFFFFFB) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t faf_alternateVideoVertResolutionBucket(uint64_t a1)
{
  double Resolution = FigAlternateGetResolution(a1);
  if (v2 * Resolution <= 0.0) {
    return -1;
  }
  for (uint64_t result = 0; result != 7; ++result)
  {
    if (v2 <= (double)kFigAlternateVertResolutionLimits[result]) {
      break;
    }
  }
  return result;
}

uint64_t faf_videoRangeMinSortingFn(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int VideoRange = FigAlternateGetVideoRange(a1);
  unsigned int v6 = FigAlternateGetVideoRange(a2);
  unsigned int v7 = *a3;
  uint64_t v8 = faf_videoRangePreferenceComparator(VideoRange, v6);
  if (v8)
  {
    if (faf_videoRangePreferenceComparator(v7, VideoRange) == -1)
    {
      uint64_t v8 = -v8;
    }
    else if (faf_videoRangePreferenceComparator(v7, v6) == -1)
    {
      uint64_t v8 = 1;
    }
  }
  return -v8;
}

uint64_t faf_populateAudioFormatAlternateComparatorRec(const void *a1, int a2, uint64_t a3)
{
  faf_getAlternateAudioFormatInfo(a1, a2, (int *)a3, (_DWORD *)(a3 + 4), (_DWORD *)(a3 + 8), (double *)(a3 + 16));
  *(unsigned char *)(a3 + 12) = FigAlternateHasLosslessAudio((uint64_t)a1) == 0;
  uint64_t result = FigAlternateGetAlternateIndex((uint64_t)a1);
  *(_DWORD *)(a3 + 24) = result;
  return result;
}

uint64_t faf_audioFormatPreferenceComparator(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(_DWORD *)a1 <= 1u) {
    int v3 = 1;
  }
  else {
    int v3 = *(_DWORD *)a1;
  }
  if (*(_DWORD *)a2 <= 1u) {
    int v4 = 1;
  }
  else {
    int v4 = *(_DWORD *)a2;
  }
  unsigned int v5 = a3[3];
  int v6 = BYTE2(v5);
  int v7 = BYTE1(v5);
  switch(v3)
  {
    case 7:
      int v8 = BYTE2(v5);
      break;
    case 6:
      int v8 = BYTE1(v5);
      break;
    case 5:
      int v8 = a3[3];
      break;
    default:
      int v8 = 0;
      break;
  }
  if (v4 == 5) {
    int v9 = a3[3];
  }
  else {
    int v9 = 0;
  }
  if (v4 == 6) {
    int v9 = BYTE1(v5);
  }
  if (v4 == 7) {
    int v9 = BYTE2(v5);
  }
  if (v3 != v4)
  {
    unsigned int v10 = *a3;
    if (*a3 <= 8)
    {
      if (v10 == v3) {
        return 1;
      }
      if (v10 == v4) {
        return -1;
      }
    }
  }
  if (v8 | v9)
  {
    unsigned int v11 = HIBYTE(v5);
    if (!v8 || v9)
    {
      if (v8 || !v9)
      {
        if (v8 && v9)
        {
          if (a3[3]) {
            int v12 = 6;
          }
          else {
            int v12 = 0;
          }
          if (v7) {
            int v13 = 8;
          }
          else {
            int v13 = v12;
          }
          if (v6) {
            int v14 = 16;
          }
          else {
            int v14 = v13;
          }
          int v15 = *(_DWORD *)(a1 + 4);
          int v16 = *(_DWORD *)(a2 + 4);
          if (v15 > v16)
          {
            BOOL v17 = v16 < v14;
LABEL_55:
            uint64_t v20 = 1;
            goto LABEL_71;
          }
          if (v15 < v16)
          {
            BOOL v17 = v15 < v14;
            goto LABEL_70;
          }
          if (v3 == v4) {
            return 0;
          }
          if (v3 == 7) {
            return 1;
          }
          if (v4 == 7) {
            return -1;
          }
          if (v3 == 6) {
            return 1;
          }
          if (v4 == 6) {
            return -1;
          }
          goto LABEL_97;
        }
      }
      else if (v11 || *(_DWORD *)(a2 + 4) > a3[1])
      {
        return -1;
      }
    }
    else if (v11 || *(_DWORD *)(a1 + 4) > a3[1])
    {
      return 1;
    }
  }
  int v18 = *(_DWORD *)(a1 + 8);
  int v19 = *(_DWORD *)(a2 + 8);
  if (v18 < v19) {
    return 1;
  }
  if (v18 > v19) {
    return -1;
  }
  int v21 = *(_DWORD *)(a1 + 4);
  int v22 = *(_DWORD *)(a2 + 4);
  if (v21 > v22)
  {
    BOOL v17 = v22 < a3[1];
    goto LABEL_55;
  }
  if (v21 < v22)
  {
    BOOL v17 = v21 < a3[1];
LABEL_70:
    uint64_t v20 = -1;
LABEL_71:
    if (!v17) {
      return -v20;
    }
    return v20;
  }
  if (*((unsigned char *)a3 + 16) && *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
  {
    uint64_t v20 = -1;
    if (*(unsigned char *)(a1 + 12)) {
      return 1;
    }
  }
  else
  {
    uint64_t v23 = *((void *)a3 + 5);
    if (v23 < 1 || (double v24 = *(double *)(a1 + 16), v25 = *(double *)(a2 + 16), v24 == v25))
    {
LABEL_86:
      if (v3 == v4) {
        return 0;
      }
      goto LABEL_97;
    }
    CFAllocatorRef v26 = &a3[4 * v23];
    double v27 = *((double *)v26 + 5);
    if ((unint64_t)v23 >= 2)
    {
      uint64_t v28 = (double *)(v26 + 10);
      while (v21 > *((_DWORD *)v28 - 2))
      {
        v28 -= 2;
        BOOL v17 = v23-- <= 1;
        if (v17) {
          goto LABEL_84;
        }
      }
      double v27 = *v28;
    }
LABEL_84:
    if (v25 > v27 != v24 <= v27)
    {
      if (v24 <= v27) {
        goto LABEL_86;
      }
      if (v24 < v25) {
        return 1;
      }
      if (v24 <= v25) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = -1;
      }
      if (v3 != v4 && v24 <= v25)
      {
LABEL_97:
        int v30 = *(_DWORD *)(a1 + 24);
        int v31 = *(_DWORD *)(a2 + 24);
        BOOL v17 = v30 <= v31;
        uint64_t v20 = v30 < v31;
        if (!v17) {
          return -1;
        }
      }
    }
    else
    {
      uint64_t v20 = -1;
      if (v24 <= v27) {
        return 1;
      }
    }
  }
  return v20;
}

uint64_t faf_audioFormatPreferenceFilterMinSortingFn(const void *a1, const void *a2, CFDataRef theData)
{
  BytePtr = (int *)CFDataGetBytePtr(theData);
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  faf_populateAudioFormatAlternateComparatorRec(a1, BytePtr[2], (uint64_t)v8);
  faf_populateAudioFormatAlternateComparatorRec(a2, BytePtr[2], (uint64_t)v7);
  return -faf_audioFormatPreferenceComparator((uint64_t)v8, (uint64_t)v7, BytePtr);
}

void faf_getAlternateAudioFormatInfo(const void *a1, int a2, int *a3, _DWORD *a4, _DWORD *a5, double *a6)
{
  int valuePtr = a2;
  if (a2 < 0) {
    CFNumberRef v11 = 0;
  }
  else {
    CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  }
  BOOL BestAudioFormat = FigAlternateGetBestAudioFormat((uint64_t)a1);
  int v13 = (BestAudioFormat - 1) < 4 || BestAudioFormat;
  *a3 = v13;
  *a4 = FigAlternateGetAudioChannelCounts(a1, v11, a5, 0);
  if (a6) {
    *a6 = FigAlternateGetAudioSampleRate((uint64_t)a1, v11);
  }
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t faf_GetImmersiveAudioCapability(const void *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
  {
    return FigAlternateGetImmersiveAudioCapability(a1, 0);
  }
  else
  {
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, BytePtr);
    ImmersiveAudioCapabiliCGFloat ty = FigAlternateGetImmersiveAudioCapability(a1, v4);
    if (v4) {
      CFRelease(v4);
    }
    return ImmersiveAudioCapability;
  }
}

uint64_t faf_ImmersiveAudioComparator(const void *a1, const void *a2, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  ImmersiveAudioCapabiliCGFloat ty = faf_GetImmersiveAudioCapability(a1, theData);
  int v8 = faf_GetImmersiveAudioCapability(a2, theData);
  if (ImmersiveAudioCapability >= v8)
  {
    if (ImmersiveAudioCapability <= v8) {
      return 0;
    }
    BOOL v9 = ImmersiveAudioCapability <= *((_DWORD *)BytePtr + 6);
    uint64_t v10 = -1;
  }
  else
  {
    BOOL v9 = v8 <= *((_DWORD *)BytePtr + 6);
    uint64_t v10 = 1;
  }
  if (v9) {
    return -v10;
  }
  else {
    return v10;
  }
}

void faf_defaultAudioPreferenceFinalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

CFStringRef faf_defaultAudioPreferenceCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFNumberRef v4 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  unsigned int v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  if (v5) {
    int v6 = (__CFString *)v5(a1);
  }
  else {
    int v6 = &stru_1EE53F4B8;
  }
  CFAllocatorRef v7 = *v4;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v9 + 16);
  if (v10) {
    uint64_t v11 = v10(a1);
  }
  else {
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  return CFStringCreateWithFormat(v7, 0, @"[FigAlternateFilter <%@: %p> priority: %d]", v6, a1, v11);
}

__CFString *faf_defaultAudioPreferenceGetName()
{
  return @"DefaultAudioLayoutPreference";
}

uint64_t faf_defaultAudioPreferenceGetPriority()
{
  return 750;
}

uint64_t faf_defaultAudioPreferenceApply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  uint64_t v28 = 0;
  int v27 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef theArray = Mutable;
  if (Mutable)
  {
    uint64_t v9 = Mutable;
    CFIndex Count = CFArrayGetCount(a2);
    if (Count < 1) {
      goto LABEL_22;
    }
    CFIndex v11 = Count;
    CFIndex v12 = 0;
    int v13 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
      if (!FigAlternateHasVideo((uint64_t)ValueAtIndex)
        || FigAlternateHasAudio(ValueAtIndex))
      {
        unsigned int v15 = FigAlternateGetAudioChannelCount(ValueAtIndex, *DerivedStorage, &v27) - 1;
        if ((v27 & 6) == 0 && v15 <= 1)
        {
          CFArrayAppendValue(v9, ValueAtIndex);
          int v13 = 1;
        }
      }
      ++v12;
    }
    while (v11 != v12);
    for (CFIndex i = 0; i != v11; ++i)
    {
      int v18 = CFArrayGetValueAtIndex(a2, i);
      if (FigAlternateHasVideo((uint64_t)v18) && !FigAlternateHasAudio(v18)) {
        CFArrayAppendValue(v9, v18);
      }
    }
    if (v13)
    {
      int v19 = 0;
    }
    else
    {
LABEL_22:
      CFRelease(v9);
      CFArrayRef theArray = 0;
      uint64_t v22 = FigAlternatePreferredAudioFormatFilterCreate(v7, 7u, 0, 0, 0, (CFNumberRef)*DerivedStorage, 0, &v28);
      int v19 = v28;
      if (v22)
      {
        uint64_t v21 = v22;
        goto LABEL_30;
      }
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      double v25 = *(uint64_t (**)(const void *, const __CFArray *, CFArrayRef *))(v24 + 24);
      if (!v25)
      {
        uint64_t v21 = 4294954514;
        goto LABEL_30;
      }
      uint64_t v21 = v25(v19, a2, &theArray);
      if (v21) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    uint64_t v21 = FigSignalErrorAt();
    int v19 = 0;
    if (v21) {
      goto LABEL_30;
    }
  }
  if (*a3) {
    CFRelease(*a3);
  }
  CFAllocatorRef v20 = CFGetAllocator(a1);
  uint64_t v21 = 0;
  *a3 = CFArrayCreateCopy(v20, theArray);
LABEL_30:
  if (v19) {
    CFRelease(v19);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v21;
}

uint64_t faf_willRequire4K60Decode(uint64_t a1)
{
  if (FigAlternateIsIFrameOnly(a1) || FigAlternateIsAudioOnly(a1)) {
    return 0;
  }
  uint64_t result = FigAlternateIs4k(a1);
  if (result)
  {
    Framedouble Rate = FigAlternateGetFrameRate(a1);
    uint64_t result = FigFrameRateToFrameRateBucket(FrameRate);
    if (result)
    {
      if (FigAlternateHasVideoFormat(a1, 4)) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = FigAlternateHasVideoFormat(a1, 7) != 0;
      }
      if (FigAlternateHasVideoFormat(a1, 5)) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = FigAlternateHasVideoFormat(a1, 8) != 0;
      }
      return v5 | v4;
    }
  }
  return result;
}

BOOL faf_peakBitRateCapFilterFn(uint64_t a1, const __CFNumber *a2)
{
  int valuePtr = 0;
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr);
  return PeakBitRate <= valuePtr;
}

uint64_t faf_peakBitRateCapComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  int v4 = FigAlternateGetPeakBitRate(a2);
  if (PeakBitRate >= v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = -1;
  }
  if (PeakBitRate > v4) {
    return 1;
  }
  else {
    return v5;
  }
}

CFStringRef faf_copyPeakBitRateCapDescAddendum(int a1, CFNumberRef number)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d bps", valuePtr);
}

uint64_t faf_isAlternateInDenyList(const void *a1, const __CFArray *a2, uint64_t *a3)
{
  uint64_t result = FigCFArrayContainsValue();
  if (a3)
  {
    if (result)
    {
      v7.length = CFArrayGetCount(a2);
      v7.CFIndex location = 0;
      uint64_t result = CFArrayGetLastIndexOfValue(a2, v7, a1);
      *a3 = result;
    }
  }
  return result;
}

uint64_t faf_sameBitrateComparatorFn(uint64_t a1, uint64_t a2)
{
  double RankingScore = FigAlternateGetRankingScore(a1);
  double v5 = FigAlternateGetRankingScore(a2);
  BOOL v6 = RankingScore == -1.0 || v5 == -1.0;
  if (v6 || (RankingScore > v5 ? (uint64_t result = -1) : (uint64_t result = RankingScore < v5), !result))
  {
    int AlternateIndex = FigAlternateGetAlternateIndex(a1);
    int v9 = FigAlternateGetAlternateIndex(a2);
    if (AlternateIndex >= v9) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = -1;
    }
    if (AlternateIndex > v9) {
      return 1;
    }
    else {
      return v10;
    }
  }
  return result;
}

uint64_t faf_CombinedAudioPreferenceAlternateFilterForChannels(uint64_t a1, signed int a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v15 = 0;
  int v16 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t inserted = FigAlternateFilterTreeCreate(*MEMORY[0x1E4F1CF80], &cf);
  if (inserted) {
    goto LABEL_34;
  }
  if (!cf)
  {
    uint64_t inserted = FigSignalErrorAt();
LABEL_34:
    uint64_t v13 = inserted;
    uint64_t v10 = 0;
    goto LABEL_20;
  }
  uint64_t inserted = FigAlternateEligibleLosslessAudioFilterCreate(v8, *(const void **)(a1 + 16), &v15);
  if (inserted) {
    goto LABEL_34;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v15, 510);
  if (inserted) {
    goto LABEL_34;
  }
  uint64_t inserted = FigAlternateImmersiveAudioPreferenceFilterCreate(v8, *(CFNumberRef *)(a1 + 16), 1, -1, 0, &v18);
  if (inserted) {
    goto LABEL_34;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v18, 500);
  if (inserted) {
    goto LABEL_34;
  }
  uint64_t inserted = FigAlternatePreferredAudioFormatFilterCreate(v8, *(_DWORD *)(a1 + 4), a2, *(const __CFDictionary **)(a1 + 24), *(unsigned char *)(a1 + 36), *(CFNumberRef *)(a1 + 16), *(_DWORD *)(a1 + 32), &v17);
  if (inserted) {
    goto LABEL_34;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v17, 490);
  if (inserted) {
    goto LABEL_34;
  }
  if (a2 < 3)
  {
    uint64_t v10 = 0;
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  FigAlternateMultichannelAudioFilterCreate(v8, *(CFNumberRef *)(a1 + 16), 1, 1, &v16);
  uint64_t v10 = v16;
  uint64_t v11 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v16, 480);
  if (v11) {
    goto LABEL_35;
  }
  if (a3)
  {
LABEL_14:
    uint64_t v11 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)cf, a3);
    if (!v11) {
      goto LABEL_15;
    }
LABEL_35:
    uint64_t v13 = v11;
    goto LABEL_20;
  }
LABEL_15:
  if (a2 <= 2) {
    CFStringRef v12 = @"StereoAudioFilterTree";
  }
  else {
    CFStringRef v12 = @"DiscreteMultichannelAudioFilterTree";
  }
  uint64_t v13 = FigAlternateFilterTreeCreateFilter(cf, v12, 760, &v20);
  if (!v13)
  {
    *a4 = v20;
    CFTypeRef v20 = 0;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v13;
}

void faf_passthroughFilterFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  uint64_t v1 = (const void *)DerivedStorage[2];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = DerivedStorage[3];
  if (v3)
  {
    dispatch_release(v3);
  }
}

CFStringRef faf_passthroughFilterCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  CFArrayRef v3 = (const __CFArray *)DerivedStorage[4];
  if (v3) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 0;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRange v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  CFAllocatorRef v8 = *(uint64_t (**)(uint64_t))(v6 + 8);
  if (v8) {
    int v9 = (__CFString *)v8(a1);
  }
  else {
    int v9 = &stru_1EE53F4B8;
  }
  CFAllocatorRef v10 = *v7;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v12 + 16);
  if (v13) {
    uint64_t v14 = v13(a1);
  }
  else {
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  return CFStringCreateWithFormat(v10, 0, @"[PassthroughFilter <%@: %p> priority: %d Total Alternate %ld]", v9, a1, v14, Count);
}

uint64_t faf_passthroughFilterCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    CFRange v7 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    if (FigCFEqual())
    {
      CFArrayRef v8 = (const __CFArray *)v7[4];
      if (v8)
      {
        CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8);
        if (!Copy)
        {
          uint64_t v10 = FigSignalErrorAt();
LABEL_10:
          MEMORY[0x19970E2B0](*v7);
          return v10;
        }
      }
      else
      {
        CFArrayRef Copy = 0;
      }
      uint64_t v10 = 0;
      *a4 = Copy;
      goto LABEL_10;
    }
    uint64_t v10 = 4294954512;
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

uint64_t faf_passthroughFilterGetName()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t faf_passthroughFilterGetPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t faf_passthroughFilterApply(uint64_t a1, const __CFArray *a2, CFArrayRef *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a2)
  {
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    if (!Copy)
    {
      uint64_t v8 = FigSignalErrorAt();
      goto LABEL_12;
    }
  }
  else
  {
    CFArrayRef Copy = 0;
  }
  int v9 = FigCFEqual();
  uint64_t v10 = (const void *)DerivedStorage[4];
  DerivedStorage[4] = Copy;
  if (Copy) {
    CFRetain(Copy);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (!v9)
  {
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  uint64_t v8 = 0;
LABEL_12:
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (a3) {
    *a3 = CFArrayCreateCopy(*v6, a2);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  return v8;
}

BOOL fivp_filterFn(__CFArray *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  int v4 = BytePtr;
  uint64_t v5 = *((void *)BytePtr + 1);
  if (v5 == 0xFFFFFFFFLL) {
    uint64_t v5 = *((void *)BytePtr + 2);
  }
  CFArrayRef v6 = *(const __CFArray **)BytePtr;
  if (!*(void *)v4 || (CFArrayGetCount(v6) ? (BOOL v7 = v5 == 0xFFFFFFFFLL) : (BOOL v7 = 1), v7))
  {
    BOOL v10 = 0;
    int IsAudioOnly = 1;
  }
  else
  {
    int IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)a1);
    if (IsAudioOnly)
    {
      BOOL v10 = 0;
    }
    else
    {
      AlternatePlayableAtPreferenceForChannelCapabiliCGFloat ty = fiv_getAlternatePlayableAtPreferenceForChannelCapability(a1, *(const __CFArray **)v4, *((void *)v4 + 3));
      int IsAudioOnly = 0;
      BOOL v10 = AlternatePlayableAtPreferenceForChannelCapability == v5;
    }
  }
  return IsAudioOnly || v10;
}

CFArrayRef fivp_firstPassFn(__CFArray *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  CFArrayRef result = *(const __CFArray **)BytePtr;
  if (*(void *)BytePtr)
  {
    CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      CFArrayRef result = (const __CFArray *)FigAlternateIsAudioOnly((uint64_t)a1);
      if (!result)
      {
        AlternatePlayableAtPreferenceForChannelCapabiliCGFloat ty = fiv_getAlternatePlayableAtPreferenceForChannelCapability(a1, *(const __CFArray **)BytePtr, *((void *)BytePtr + 3));
        CFArrayRef result = (const __CFArray *)FigAlternateIsIFrameOnly((uint64_t)a1);
        if (result)
        {
          uint64_t v8 = *((void *)BytePtr + 2);
          BOOL v7 = (uint64_t *)(BytePtr + 16);
          uint64_t v6 = v8;
        }
        else
        {
          uint64_t v9 = *((void *)BytePtr + 1);
          BOOL v7 = (uint64_t *)(BytePtr + 8);
          uint64_t v6 = v9;
        }
        if (AlternatePlayableAtPreferenceForChannelCapability < v6) {
          *BOOL v7 = AlternatePlayableAtPreferenceForChannelCapability;
        }
      }
    }
  }
  return result;
}

__n128 fivp_filterInitFn(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *(__n128 *)(BytePtr + 8) = result;
  return result;
}

CFStringRef fivp_copyDescAddendum(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v3 = *((void *)BytePtr + 1);
  if (v3 == 0xFFFFFFFFLL) {
    goto LABEL_7;
  }
  int v4 = BytePtr;
  CFArrayRef Count = *(const __CFArray **)BytePtr;
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if (v3 >= (uint64_t)Count)
  {
LABEL_7:
    VideoLayoutLoggingStringFromCollection = @"Passthru";
    CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"lowestplayable:%@", @"Passthru");
  }
  else
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v4, *((void *)v4 + 1));
    VideoLayoutLoggingStringFromCollection = FigAlternateCreateVideoLayoutLoggingStringFromCollection((uint64_t)ValueAtIndex);
    CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"lowestplayable:%@", VideoLayoutLoggingStringFromCollection);
    if (!VideoLayoutLoggingStringFromCollection) {
      return v8;
    }
  }
  CFRelease(VideoLayoutLoggingStringFromCollection);
  return v8;
}

void fivp_deallocateContext(const void **ptr, CFAllocatorRef allocator)
{
  int v4 = *ptr;
  if (v4) {
    CFRelease(v4);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t fiv_getAlternatePlayableAtPreferenceForChannelCapability(__CFArray *a1, const __CFArray *a2, CFIndex a3)
{
  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  if (VideoLayoutTags)
  {
    CFArrayRef v6 = VideoLayoutTags;
    if (CFArrayGetCount(VideoLayoutTags))
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count <= a3) {
        CFIndex v8 = Count - 1;
      }
      else {
        CFIndex v8 = a3;
      }
      CFArrayGetValueAtIndex(v6, v8);
      CFIndex v9 = 0;
      if (!a2) {
        goto LABEL_8;
      }
LABEL_7:
      for (CFIndex i = CFArrayGetCount(a2); v9 < i; CFIndex i = 0)
      {
        CFArrayGetValueAtIndex(a2, v9);
        if (FigCFEqual()) {
          return v9;
        }
        ++v9;
        if (a2) {
          goto LABEL_7;
        }
LABEL_8:
        ;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

BOOL faf_alternateHasOnlyStereoVideo(__CFArray *a1)
{
  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  CFIndex v2 = 0;
  BOOL v3 = VideoLayoutTags != 0;
  uint64_t v4 = *MEMORY[0x1E4F21E58];
  CMTagValue v5 = *(void *)(MEMORY[0x1E4F21E58] + 8);
  while (1)
  {
    CFIndex v6 = VideoLayoutTags ? CFArrayGetCount(VideoLayoutTags) : 0;
    if (v2 >= v6) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v2);
    *(void *)&tagBuffer.category = 0;
    tagBuffer.CMTimeValue value = 0;
    CMItemCount numberOfTagsCopied = 0;
    CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_StereoView, &tagBuffer, 1, &numberOfTagsCopied);
    *(void *)&v11.category = v4;
    v11.CMTimeValue value = v5;
    ++v2;
    if (!CMTagEqualToTag(tagBuffer, v11)) {
      return 0;
    }
  }
  return v3;
}

uint64_t FigDataQueueRemoteSetupRemoteXPCClientIfNecessary(const __CFAllocator *a1, int a2, uint64_t (*a3)(uint64_t, CFTypeRef *), uint64_t a4)
{
  block[4] = a1;
  CFTypeRef cf = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigDataQueueRemoteSetupRemoteXPCClientIfNecessary_block_invoke;
  block[3] = &__block_descriptor_tmp_28;
  if (FigDataQueueRemoteSetupRemoteXPCClientIfNecessary_sFigDataQueueRemoteXPCRemoteClientByPIDMutexRegisterOnce != -1) {
    dispatch_once(&FigDataQueueRemoteSetupRemoteXPCClientIfNecessary_sFigDataQueueRemoteXPCRemoteClientByPIDMutexRegisterOnce, block);
  }
  if (!gFigDataQueueRemoteXPCRemoteClientByPIDTable) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970E910](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  CMTimeValue value = (void *)CFDictionaryGetValue((CFDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, (const void *)a2);
  if (value)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v10 = a3(a4, &cf);
    if (!v10)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable || (FigCFDictionarySetInt32(), FigXPCRemoteClientCreateWithXPCEndpoint()))
      {
        uint64_t v8 = FigSignalErrorAt();
      }
      else
      {
        CFDictionarySetValue((CFMutableDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, (const void *)a2, value);
        if (value) {
          CFRelease(value);
        }
        uint64_t v8 = 0;
      }
      goto LABEL_13;
    }
    uint64_t v8 = v10;
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_13:
  MEMORY[0x19970E930](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v8;
}

uint64_t dqr_HandleRemoteMessagesFromServer()
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result) {
    return 4294951138;
  }
  return result;
}

CFMutableDictionaryRef __FigDataQueueRemoteSetupRemoteXPCClientIfNecessary_block_invoke(uint64_t a1)
{
  gFigDataQueueRemoteXPCRemoteClientByPIDMutex = FigSimpleMutexCreate();
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 32), 0, 0, MEMORY[0x1E4F1D540]);
  gFigDataQueueRemoteXPCRemoteClientByPIDTable = (uint64_t)result;
  return result;
}

uint64_t FigDataQueueRemoteCreateWithObjectID(int a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, CFTypeRef *a7)
{
  CFTypeRef cf = 0;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a7) {
    goto LABEL_14;
  }
  FigDataQueueGetClassID();
  uint64_t v11 = CMDerivedObjectCreate();
  if (v11)
  {
LABEL_15:
    uint64_t v19 = v11;
    goto LABEL_16;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = FigReentrantMutexCreate();
  *(void *)(DerivedStorage + 24) = v13;
  if (!v13
    || (uint64_t v14 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 64) = v14) == 0)
    || (a6->flags & 0x1D) == 1
    && (a5->flags & 0x1D) == 1
    && (CMTime time1 = *a6, time2 = *a5, CMTimeCompare(&time1, &time2) >= 1))
  {
LABEL_14:
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_15;
  }
  long long v15 = *(_OWORD *)&a5->value;
  *(void *)(DerivedStorage + 88) = a5->epoch;
  *(_OWORD *)(DerivedStorage + 72) = v15;
  long long v16 = *(_OWORD *)&a6->value;
  *(void *)(DerivedStorage + 112) = a6->epoch;
  *(_OWORD *)(DerivedStorage + 96) = v16;
  uint64_t v17 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 160) = v17;
  if (!v17)
  {
    uint64_t v19 = 4294951505;
    goto LABEL_16;
  }
  MEMORY[0x19970E910](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, (const void *)a1);
  if (!Value)
  {
    *(void *)uint64_t DerivedStorage = 0;
    *(_DWORD *)(DerivedStorage + 8) = a1;
    MEMORY[0x19970E930](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
    goto LABEL_14;
  }
  *(void *)uint64_t DerivedStorage = CFRetain(Value);
  *(_DWORD *)(DerivedStorage + 8) = a1;
  MEMORY[0x19970E930](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  uint64_t v11 = FigXPCRemoteClientAssociateObject();
  if (v11) {
    goto LABEL_15;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *(void *)(DerivedStorage + 16) = a2;
  uint64_t v19 = FigXPCRemoteClientCopyMemoryOrigin();
  if (!v19)
  {
    *a7 = cf;
    return v19;
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

void dqr_HandleDeadServerConnection()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 176) = 1;
  MEMORY[0x19970E910](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  uint64_t v1 = (const void *)*(int *)(DerivedStorage + 8);
  if (v1)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, v1);
    *(_DWORD *)(DerivedStorage + 8) = 0;
  }

  JUMPOUT(0x19970E930);
}

uint64_t FigDataQueueRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dqr_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 32) = 0;
  }
  CFIndex v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 40) = 0;
  }
  BOOL v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 144);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 144) = 0;
  }
  CMTagValue v5 = *(const void **)(DerivedStorage + 152);
  if (v5)
  {
    FigSyncMomentSourceDestroy(v5);
    *(void *)(DerivedStorage + 152) = 0;
  }
  CFIndex v6 = *(NSObject **)(DerivedStorage + 160);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(DerivedStorage + 160) = 0;
  }
  BOOL v7 = *(NSObject **)(DerivedStorage + 136);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 128);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 128) = 0;
  }
  CFIndex v9 = *(const void **)(DerivedStorage + 168);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 168) = 0;
  }
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  if (*(void *)DerivedStorage)
  {
    FigXPCRemoteClientDisassociateObject();
    if (*(unsigned char *)(DerivedStorage + 176)
      || !FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessage())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*(void *)DerivedStorage)
      {
        CFRelease(*(CFTypeRef *)DerivedStorage);
        *(void *)uint64_t DerivedStorage = 0;
      }
    }
  }
  return FigXPCRelease();
}

__CFString *dqr_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  if (*(unsigned char *)(DerivedStorage + 176)) {
    uint64_t v4 = "SERVER DIED";
  }
  else {
    uint64_t v4 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<DataQueueRemote %p>, remoteClient %p, ObjectID: %016llx %s", a1, *(void *)DerivedStorage, *(void *)(DerivedStorage + 16), v4);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t dqr_copyProperty(const void *a1, uint64_t a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v9 = DerivedStorage;
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
    if (!FigCFEqual())
    {
      uint64_t v16 = FigXPCSendStdCopyPropertyMessage();
      MEMORY[0x19970E2B0](*(void *)(v9 + 24));
      return v16;
    }
    CFTypeRef cf = 0;
    if (*(void *)(v9 + 168)
      && (uint64_t v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject(), (cf = v10) != 0))
    {
      CFDictionaryRef v11 = 0;
    }
    else
    {
      CFDictionaryRef v11 = CFDictionaryCreate(a3, (const void **)&kFigSampleBufferConsumerForDataQueueOption_ConsumeAsynchronously, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v12 = FigSampleBufferConsumerForDataQueueCreate(a1, (uint64_t)a3, (uint64_t)v11, &cf);
      if (v12)
      {
        uint64_t v15 = v12;
        goto LABEL_15;
      }
      uint64_t v13 = *(const void **)(v9 + 168);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(v9 + 168) = 0;
      }
      uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(v9 + 168) = v14;
      uint64_t v10 = cf;
      if (!v14)
      {
        if (cf) {
          CFRelease(cf);
        }
        uint64_t v15 = 4294951505;
        goto LABEL_15;
      }
    }
    uint64_t v15 = 0;
    *a4 = v10;
LABEL_15:
    MEMORY[0x19970E2B0](*(void *)(v9 + 24));
    if (v11) {
      CFRelease(v11);
    }
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t dqr_setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
LABEL_25:
    return FigSignalErrorAt();
  }
  uint64_t v6 = DerivedStorage;
  if (FigCFEqual())
  {
    if (!a3 || (CFTypeID TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      MEMORY[0x19970E290](*(void *)(v6 + 24));
      if (*(unsigned char *)(v6 + 176))
      {
        uint64_t v15 = FigSignalErrorAt();
LABEL_21:
        MEMORY[0x19970E2B0](*(void *)(v6 + 24));
        return v15;
      }
      CFTypeRef cf = 0;
      uint64_t v8 = (void *)CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E290](v8[3]);
      uint64_t v9 = 0;
      if (!FigCFEqual())
      {
        uint64_t v9 = (const void **)malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
        if (v9 && (v10 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*uint64_t v9 = (const void *)v10) != 0))
        {
          *((unsigned char *)v9 + 8) = 1;
        }
        else
        {
          int v17 = FigSignalErrorAt();
          dqr_DestroyTimebaseSyncState(v9);
          uint64_t v9 = 0;
          if (v17) {
            goto LABEL_18;
          }
        }
        CFDictionaryRef v11 = v8[20];
        if (!a3)
        {
          v18[0] = MEMORY[0x1E4F143A8];
          v18[1] = 0x40000000;
          v18[2] = __dqr_RebuildTimebaseSync_block_invoke;
          v18[3] = &__block_descriptor_tmp_14_0;
          v18[4] = v9;
          dispatch_sync(v11, v18);
          uint64_t v12 = (const void *)v8[18];
          v8[18] = 0;
          if (!v12) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        if (!FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)dqr_SyncServerTimebaseToMoment, (uint64_t)v9, (void (*)(uint64_t))dqr_DestroyTimebaseSyncState, a3, v11, (uint64_t *)&cf))
        {
          uint64_t v12 = (const void *)v8[18];
          v8[18] = a3;
          CFRetain(a3);
          uint64_t v9 = 0;
          if (!v12)
          {
LABEL_14:
            uint64_t v13 = (const void *)v8[19];
            CFTypeRef v14 = cf;
            v8[19] = cf;
            if (v14) {
              CFRetain(v14);
            }
            if (v13) {
              CFRelease(v13);
            }
            goto LABEL_18;
          }
LABEL_13:
          CFRelease(v12);
          goto LABEL_14;
        }
      }
LABEL_18:
      MEMORY[0x19970E2B0](v8[3]);
      dqr_DestroyTimebaseSyncState(v9);
      if (cf) {
        CFRelease(cf);
      }
      uint64_t v15 = 0;
      goto LABEL_21;
    }
    goto LABEL_25;
  }

  return FigXPCSendStdSetPropertyMessage();
}

void dqr_SyncServerTimebaseToMoment(uint64_t a1, void *__s1)
{
  CFTypeRef v18 = 0;
  int v17 = 0;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  int __s2 = 120;
  int v4 = memcmp(__s1, &__s2, 0x78uLL);
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    uint64_t v6 = (const void *)v5;
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 176))
    {
      FigSignalErrorAt();
    }
    else
    {
      if (*(unsigned char *)(a1 + 8))
      {
        *((_DWORD *)__s1 + 1) |= 4u;
        *(unsigned char *)(a1 + 8) = 0;
      }
      if (FigXPCCreateBasicMessage()) {
        goto LABEL_17;
      }
      if (v4)
      {
        if (FigXPCMessageSetCFBoolean()) {
          goto LABEL_17;
        }
        CMBlockBufferRef blockBufferOut = 0;
        int v7 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0x78uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0x78uLL, 1u, &blockBufferOut);
        if (!v7)
        {
          int v7 = CMBlockBufferReplaceDataBytes(__s1, blockBufferOut, 0, 0x78uLL);
          if (!v7) {
            int v7 = FigXPCMessageSetBlockBuffer();
          }
        }
        int v8 = v7;
        if (blockBufferOut) {
          CFRelease(blockBufferOut);
        }
        if (v8) {
          goto LABEL_17;
        }
      }
      else if (FigXPCMessageSetCFBoolean())
      {
        goto LABEL_17;
      }
      FigXPCRemoteClientSendSyncMessage();
    }
LABEL_17:
    FigXPCRemoteClientKillServerOnTimeout();
    CFRelease(v6);
    if (v18) {
      CFRelease(v18);
    }
  }
}

void dqr_DestroyTimebaseSyncState(const void **a1)
{
  if (a1)
  {
    CFIndex v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

uint64_t dqr_EnqueueSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_12;
  }
  if (!CMSampleBufferGetDataBuffer(a2))
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  if (*(unsigned char *)(DerivedStorage + 176))
  {
LABEL_12:
    uint64_t v4 = FigSignalErrorAt();
LABEL_13:
    uint64_t v5 = v4;
    goto LABEL_9;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4) {
    goto LABEL_13;
  }
  uint64_t v4 = FigXPCMessageAddCMSampleBuffer();
  if (v4) {
    goto LABEL_13;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v5)
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v6 + 56) = FigXPCMessageGetInt32();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t dqr_GetWaterLevelState()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t dqr_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, const void *a3, NSObject *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
    if (*(void *)(v8 + 120) || (*(_DWORD *)(v8 + 108) & 0x1D) != 1 || *(unsigned char *)(v8 + 176))
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    else
    {
      *(void *)(v8 + 120) = a2;
      if (a3) {
        CFTypeRef v9 = CFRetain(a3);
      }
      else {
        CFTypeRef v9 = 0;
      }
      *(void *)(v8 + 128) = v9;
      if (a4) {
        dispatch_retain(a4);
      }
      *(void *)(v8 + 136) = a4;
      uint64_t v10 = FigXPCCreateBasicMessage();
      if (!v10) {
        uint64_t v10 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    uint64_t v11 = v10;
    MEMORY[0x19970E2B0](*(void *)(v8 + 24));
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t dqr_RemoveLowWaterTrigger()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  if (!*(void *)(DerivedStorage + 120) || *(unsigned char *)(DerivedStorage + 176))
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  else
  {
    *(void *)(DerivedStorage + 120) = 0;
    uint64_t v1 = *(const void **)(DerivedStorage + 128);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 128) = 0;
    }
    CFIndex v2 = *(NSObject **)(DerivedStorage + 136);
    if (v2)
    {
      dispatch_release(v2);
      *(void *)(DerivedStorage + 136) = 0;
    }
    uint64_t v3 = FigXPCCreateBasicMessage();
    if (!v3) {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  uint64_t v4 = v3;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t dqr_Flush()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 176))
  {
    uint64_t v1 = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t v1 = FigXPCCreateBasicMessage();
  if (v1)
  {
LABEL_8:
    uint64_t v2 = v1;
    goto LABEL_6;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  uint64_t v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v2)
  {
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v3 + 56) = FigXPCMessageGetInt32();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
LABEL_6:
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigVideoTargetCreateWithVideoReceiver(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf1 = 0;
  CFTypeRef cf = 0;
  if (!a4 || !a2)
  {
    uint64_t InstanceTypeFromCreationOptions = FigSignalErrorAt();
    goto LABEL_12;
  }
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t InstanceTypeFromCreationOptions = videoTarget_getInstanceTypeFromCreationOptions(a3, &cf1);
  if (InstanceTypeFromCreationOptions)
  {
LABEL_12:
    uint64_t v13 = InstanceTypeFromCreationOptions;
    goto LABEL_20;
  }
  if (CFEqual(cf1, @"Remote"))
  {
    uint64_t CMBaseObject = FigVideoReceiverGetCMBaseObject(a2);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
    if (v11)
    {
      uint64_t v12 = *MEMORY[0x1E4F1CF80];
      uint64_t InstanceTypeFromCreationOptions = v11(CMBaseObject, @"XPCEndpointID", *MEMORY[0x1E4F1CF80], &cf);
      if (!InstanceTypeFromCreationOptions) {
        uint64_t InstanceTypeFromCreationOptions = FigVideoTargetCreateRemoteWithVideoReceiverEndpointID(v12, (void *)cf, a3, a4);
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v14 = FigVideoReceiverGetCMBaseObject(a2);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v16 + 48);
    if (v17)
    {
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t InstanceTypeFromCreationOptions = v17(v14, @"XPCEndpointID", *MEMORY[0x1E4F1CF80], &cf);
      if (!InstanceTypeFromCreationOptions) {
        uint64_t InstanceTypeFromCreationOptions = FigVideoTargetCreateLocalWithVideoReceiverEndpointID(v18, (void *)cf, a3, a4);
      }
      goto LABEL_12;
    }
  }
  uint64_t v13 = 4294954514;
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t videoTarget_getInstanceTypeFromCreationOptions(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetValueIfPresent();
    *a2 = @"Remote";
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVideoTargetCreateWithVideoReceiverEndpointID(uint64_t a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf1 = 0;
  if (a4 && a2)
  {
    uint64_t result = videoTarget_getInstanceTypeFromCreationOptions(a3, &cf1);
    if (!result)
    {
      int v7 = CFEqual(cf1, @"Remote");
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (v7) {
        return FigVideoTargetCreateRemoteWithVideoReceiverEndpointID((uint64_t)v8, a2, 0, a4);
      }
      else {
        return FigVideoTargetCreateLocalWithVideoReceiverEndpointID(v8, a2, 0, a4);
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigVideoTargetCreateSharingVideoReceiverFromVideoTarget(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  char v24 = 0;
  CFTypeRef cf2 = 0;
  CFTypeRef cf1 = 0;
  if (!a4)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (!a2)
  {
    uint64_t RemoteSharingVideoReceiverFromRemoteVideoTarget = FigSignalErrorAt();
    goto LABEL_14;
  }
  uint64_t CMBaseObject = FigVideoTargetGetCMBaseObject(a2);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v10 + 48);
  if (!v11) {
    goto LABEL_22;
  }
  uint64_t RemoteSharingVideoReceiverFromRemoteVideoTarget = v11(CMBaseObject, @"InstanceType", a1, &cf2);
  if (RemoteSharingVideoReceiverFromRemoteVideoTarget)
  {
LABEL_14:
    uint64_t v15 = RemoteSharingVideoReceiverFromRemoteVideoTarget;
    goto LABEL_23;
  }
  FigCFDictionaryGetValueIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (v24)
  {
    uint64_t v13 = @"Local";
    CFTypeRef cf1 = @"Local";
  }
  else
  {
    uint64_t v13 = (__CFString *)cf1;
    if (!cf1)
    {
      CFTypeRef v14 = cf2;
      CFTypeRef cf1 = cf2;
      goto LABEL_12;
    }
  }
  CFEqual(v13, cf2);
  CFTypeRef v14 = cf1;
LABEL_12:
  if (CFEqual(v14, @"Remote"))
  {
    uint64_t RemoteSharingVideoReceiverFromRemoteVideoTarget = FigVideoTargetCreateRemoteSharingVideoReceiverFromRemoteVideoTarget(a1, a2, a3, a4);
    goto LABEL_14;
  }
  uint64_t v16 = FigVideoTargetGetCMBaseObject(a2);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v18 + 48);
  if (v19)
  {
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t RemoteSharingVideoReceiverFromRemoteVideoTarget = v19(v16, @"VideoReceiver", *MEMORY[0x1E4F1CF80], &cf);
    if (!RemoteSharingVideoReceiverFromRemoteVideoTarget) {
      uint64_t RemoteSharingVideoReceiverFromRemoteVideoTarget = FigVideoTargetCreateLocalWithVideoReceiver(v20, cf, 0, a4);
    }
    goto LABEL_14;
  }
LABEL_22:
  uint64_t v15 = 4294954514;
LABEL_23:
  if (cf2) {
    CFRelease(cf2);
  }
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t FigVTTCaptionWriterCreateForDocument(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigVTTCaptionWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigBytePumpGetFigBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      void *DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTCaptionWriterForDocument_Invalidate()
{
  return 0;
}

void figVTTCaptionWriterForDocument_Finalize(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 8);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v4);
  }
}

CFStringRef figVTTCaptionWriterForDocument_CopyDebugDesc()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigVTTDocumentWriterForDocument");
}

uint64_t figVTTCaptionWriterForDocument_AddCaption(const void *a1, const void *a2, _OWORD *a3)
{
  *(_OWORD *)&v107.start.CMTimeValue value = *a3;
  *(_OWORD *)&v107.start.CMTimeEpoch epoch = a3[1];
  *(_OWORD *)&v107.duration.CMTimeScale timescale = a3[2];
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v109 = 0;
  CFAllocatorRef v5 = CFGetAllocator(a1);
  *(_OWORD *)&time.start.CMTimeValue value = *(_OWORD *)&v107.start.value;
  time.start.CMTimeEpoch epoch = v107.start.epoch;
  CFDictionaryRef v6 = CMTimeCopyAsDictionary(&time.start, v5);
  CMTimeRange time = v107;
  CMTimeRangeGetEnd(&v108, &time);
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFDictionaryRef v8 = CMTimeCopyAsDictionary(&v108, v7);
  uint64_t v9 = FigVTTDocumentWriterCreateAndAddNode(*DerivedStorage, 3, 1, (uint64_t)&v109);
  if (v9
    || (uint64_t v9 = FigVTTNodeSetAttribute((uint64_t)v109, @"starttime", v6), v9)
    || (uint64_t v9 = FigVTTNodeSetAttribute((uint64_t)v109, @"endtime", v8), v9))
  {
    uint64_t value_low = v9;
    goto LABEL_232;
  }
  CFTypeRef v10 = v109;
  CFAllocatorRef v11 = CFGetAllocator(a1);
  CFTypeRef context = 0;
  uint64_t v126 = 0;
  v127[0] = 0;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, const void **))(v14 + 48);
  CFDictionaryRef v104 = v8;
  if (!v15) {
    goto LABEL_97;
  }
  uint64_t v16 = v15(CMBaseObject, *MEMORY[0x1E4F1FF20], v11, &v126);
  if (v16) {
    goto LABEL_256;
  }
  if (v126)
  {
    CFTypeID v17 = CFGetTypeID(v126);
    if (v17 != FigCaptionRegionGetTypeID()) {
      goto LABEL_255;
    }
  }
  uint64_t v18 = FigCaptionDataGetCMBaseObject();
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v20 + 48);
  if (v21) {
    uint64_t value_low = v21(v18, *MEMORY[0x1E4F1FF58], v11, &context);
  }
  else {
    uint64_t value_low = 4294954514;
  }
  if (context)
  {
    CFTypeID v23 = CFGetTypeID(context);
    if (v23 != FigCaptionDynamicStyleGetTypeID()) {
      goto LABEL_255;
    }
    if (context)
    {
      InitialCFNumberRef Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
      v127[0] = InitialValue;
      if (InitialValue) {
        InitialCFNumberRef Value = CFRetain(InitialValue);
      }
      v127[0] = InitialValue;
    }
  }
  if (value_low)
  {
LABEL_257:
    CFAllocatorRef v26 = 0;
    goto LABEL_98;
  }
  if (v127[0] && !CFEqual(v127[0], (CFTypeRef)*MEMORY[0x1E4F20230]))
  {
    if (CFEqual(v127[0], (CFTypeRef)*MEMORY[0x1E4F20250]))
    {
      double v25 = kFigVTT_AttributeValue_cue_textAlign_start;
    }
    else if (CFEqual(v127[0], (CFTypeRef)*MEMORY[0x1E4F20238]))
    {
      double v25 = kFigVTT_AttributeValue_cue_textAlign_end;
    }
    else if (CFEqual(v127[0], (CFTypeRef)*MEMORY[0x1E4F20240]))
    {
      double v25 = kFigVTT_AttributeValue_cue_textAlign_left;
    }
    else
    {
      if (!CFEqual(v127[0], (CFTypeRef)*MEMORY[0x1E4F20248]))
      {
        CFAllocatorRef v26 = 0;
        goto LABEL_39;
      }
      double v25 = kFigVTT_AttributeValue_cue_textAlign_right;
    }
  }
  else
  {
    double v25 = kFigVTT_AttributeValue_cue_textAlign_center;
  }
  CFAllocatorRef v26 = *v25;
  if (!*v25)
  {
LABEL_39:
    char v28 = 1;
    goto LABEL_40;
  }
  uint64_t v27 = FigVTTNodeSetAttribute((uint64_t)v10, @"align", v26);
  if (v27) {
    goto LABEL_85;
  }
  char v28 = 0;
LABEL_40:
  if (v127[0])
  {
    CFRelease(v127[0]);
    v127[0] = 0;
  }
  if ((v28 & 1) == 0) {
    CFRelease(v26);
  }
  if (!v126) {
    goto LABEL_62;
  }
  uint64_t v29 = FigCaptionRegionGetCMBaseObject();
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  CFDictionaryRef v32 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, const void **))(v31 + 48);
  if (!v32) {
    goto LABEL_97;
  }
  uint64_t v16 = v32(v29, *MEMORY[0x1E4F20070], v11, v127);
  if (v16) {
    goto LABEL_256;
  }
  if (!v127[0]) {
    goto LABEL_67;
  }
  CFTypeID v33 = CFGetTypeID(v127[0]);
  if (v33 != FigCaptionDynamicStyleGetTypeID()) {
    goto LABEL_255;
  }
  if (!v127[0]) {
    goto LABEL_67;
  }
  FigCaptionDynamicStyleGetInitialValue();
  FigGeometryPointMakeFromDictionary();
  CMTimeValue value = time.duration.value;
  if ((*(void *)&time.start.timescale & 0x1FFFFFFFFLL) == 0x125202020)
  {
    CFAllocatorRef v26 = (const void *)FigGeometryDimensionCopyAsDictionary();
    uint64_t v27 = FigVTTNodeSetAttribute((uint64_t)v10, @"position", v26);
    if (!v27)
    {
      if (v26) {
        CFRelease(v26);
      }
      goto LABEL_57;
    }
LABEL_85:
    uint64_t value_low = v27;
    goto LABEL_98;
  }
LABEL_57:
  if ((value & 0x100000000) != 0 && (value == 1818848869 || value == 622862368))
  {
    CFAllocatorRef v26 = (const void *)FigGeometryDimensionCopyAsDictionary();
    uint64_t v27 = FigVTTNodeSetAttribute((uint64_t)v10, @"line", v26);
    if (v27) {
      goto LABEL_85;
    }
    goto LABEL_63;
  }
LABEL_62:
  CFAllocatorRef v26 = 0;
LABEL_63:
  if (v127[0])
  {
    CFRelease(v127[0]);
    v127[0] = 0;
  }
  if (v26) {
    CFRelease(v26);
  }
LABEL_67:
  FigGeometryDimensionMake();
  if (!v126)
  {
    CFAllocatorRef v26 = 0;
    goto LABEL_71;
  }
  uint64_t v35 = FigCaptionRegionGetCMBaseObject();
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v38 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, const void **))(v37 + 48);
  if (!v38) {
    goto LABEL_97;
  }
  uint64_t v16 = v38(v35, *MEMORY[0x1E4F20090], v11, v127);
  if (v16)
  {
LABEL_256:
    uint64_t value_low = v16;
    goto LABEL_257;
  }
  if (!v127[0]) {
    goto LABEL_86;
  }
  CFTypeID v39 = CFGetTypeID(v127[0]);
  if (v39 != FigCaptionDynamicStyleGetTypeID())
  {
LABEL_255:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_256;
  }
  if (!v127[0]) {
    goto LABEL_86;
  }
  uint64_t v40 = (const void *)FigCaptionDynamicStyleGetInitialValue();
  if (!v40 || (CFTypeID v41 = CFGetTypeID(v40), v41 != CFDictionaryGetTypeID()))
  {
    uint64_t value_low = FigSignalErrorAt();
    CFAllocatorRef v26 = 0;
    CFDictionaryRef v8 = v104;
    goto LABEL_98;
  }
  FigGeometryDimensionMakeFromDictionary();
  CFAllocatorRef v26 = (const void *)FigGeometryDimensionCopyAsDictionary();
  CFDictionaryRef v8 = v104;
  if (v26)
  {
    uint64_t v27 = FigVTTNodeSetAttribute((uint64_t)v10, @"size", v26);
    if (v27) {
      goto LABEL_85;
    }
  }
LABEL_71:
  if (v127[0])
  {
    CFRelease(v127[0]);
    v127[0] = 0;
  }
  if (v26) {
    CFRelease(v26);
  }
LABEL_86:
  if (!v126) {
    goto LABEL_251;
  }
  uint64_t v42 = FigCaptionRegionGetCMBaseObject();
  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v43) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = 0;
  }
  CFNumberRef v45 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, const void **))(v44 + 48);
  if (!v45)
  {
LABEL_97:
    CFAllocatorRef v26 = 0;
    uint64_t value_low = 4294954514;
    goto LABEL_98;
  }
  uint64_t v16 = v45(v42, *MEMORY[0x1E4F20098], v11, v127);
  if (v16) {
    goto LABEL_256;
  }
  if (!v127[0])
  {
    CFAllocatorRef v26 = 0;
    goto LABEL_253;
  }
  uint64_t v46 = (const void *)FigCaptionDynamicStyleGetInitialValue();
  if (!v46) {
    goto LABEL_255;
  }
  uint64_t v47 = v46;
  CFTypeID v48 = CFGetTypeID(v46);
  if (v48 != CFStringGetTypeID()) {
    goto LABEL_255;
  }
  if (CFEqual(v127[0], (CFTypeRef)*MEMORY[0x1E4F200B8]))
  {
LABEL_96:
    uint64_t v49 = kFigVTT_AttributeValue_cue_writingMode_TopToBottom;
    goto LABEL_245;
  }
  if (CFEqual(v47, (CFTypeRef)*MEMORY[0x1E4F200D0]))
  {
    uint64_t v49 = kFigVTT_AttributeValue_cue_writingMode_RightToLeft;
  }
  else
  {
    if (!CFEqual(v47, (CFTypeRef)*MEMORY[0x1E4F200C8]))
    {
      if (!CFEqual(v47, (CFTypeRef)*MEMORY[0x1E4F200C0]))
      {
LABEL_251:
        CFAllocatorRef v26 = 0;
        uint64_t v100 = v127[0];
        if (v127[0])
        {
LABEL_252:
          CFRelease(v100);
          uint64_t value_low = 0;
          v127[0] = 0;
          goto LABEL_98;
        }
LABEL_253:
        uint64_t value_low = 0;
        goto LABEL_98;
      }
      goto LABEL_96;
    }
    uint64_t v49 = kFigVTT_AttributeValue_cue_writingMode_LeftToRight;
  }
LABEL_245:
  CFAllocatorRef v26 = *v49;
  if (!*v49) {
    goto LABEL_251;
  }
  uint64_t value_low = FigVTTNodeSetAttribute((uint64_t)v10, @"writingMode", v26);
  if (!value_low)
  {
    uint64_t v100 = v127[0];
    if (v127[0]) {
      goto LABEL_252;
    }
  }
LABEL_98:
  if (v126) {
    CFRelease(v126);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v127[0]) {
    CFRelease(v127[0]);
  }
  if (context) {
    CFRelease(context);
  }
  if (!value_low)
  {
    CFTypeRef v50 = v109;
    uint64_t v113 = 0;
    CFTypeRef v114 = 0;
    CFTypeRef v111 = 0;
    CFTypeRef cf = 0;
    uint64_t v105 = *MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (!Mutable || (CFAllocatorRef v52 = CFGetAllocator(a1), (v53 = CFArrayCreateMutable(v52, 0, MEMORY[0x1E4F1D510])) == 0))
    {
      uint64_t value_low = FigSignalErrorAt();
LABEL_224:
      if (v111) {
        CFRelease(v111);
      }
      if (v114) {
        CFRelease(v114);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_232;
    }
    unint64_t v54 = v53;
    CFAllocatorRef v55 = CFGetAllocator(a1);
    CMTimeRange time = v107;
    uint64_t v56 = FigCaptionStyleSegmentGeneratorCreate((uint64_t)v55, a2, (long long *)&time.start.value, (uint64_t *)&v114);
    uint64_t v102 = Mutable;
    CFDictionaryRef v103 = v6;
    if (v56) {
      goto LABEL_220;
    }
    uint64_t v56 = FigCaptionStyleSegmentGeneratorPerform((uint64_t)v114);
    if (v56) {
      goto LABEL_220;
    }
    uint64_t v101 = (uint64_t)v50;
    SegmentCFIndex Count = FigCaptionStyleSegmentGeneratorGetSegmentCount((uint64_t)v114);
    if (SegmentCount >= 1)
    {
      CFIndex v58 = SegmentCount;
      CFIndex v59 = 0;
      CFArrayRef v60 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        SegmentAtIndex = FigCaptionStyleSegmentGeneratorGetSegmentAtIndex((uint64_t)v114, v59);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v111)
        {
          CFRelease(v111);
          CFTypeRef v111 = 0;
        }
        uint64_t v56 = FigCaptionStyleSegmentCopyText((uint64_t)SegmentAtIndex, (__CFString **)&cf);
        if (v56) {
          goto LABEL_220;
        }
        uint64_t v56 = FigCaptionStyleSegmentCopyAttributes((uint64_t)SegmentAtIndex, &v111);
        if (v56) {
          goto LABEL_220;
        }
        if (v113)
        {
          CFRelease(v113);
          uint64_t v113 = 0;
        }
        CFAllocatorRef v62 = CFGetAllocator(a1);
        uint64_t v56 = FigVTTSpanCreate((uint64_t)v62, &v113);
        if (v56) {
          goto LABEL_220;
        }
        uint64_t v56 = FigVTTNodeSetValue((uint64_t)v113, cf);
        if (v56) {
          goto LABEL_220;
        }
        CFDictionaryRef v63 = (const __CFDictionary *)v111;
        uint64_t v64 = v113;
        MEMORY[0x19970EE10](&fcwvtt_getCaptionStylePropertyToVTTAttributesMapping_once, fcwvtt_initCaptionStylePropertyToVTTAttributesMapping);
        CMTimeValue v65 = sCaptionStylePropertyToVTTAttributesMapping;
        CFAllocatorRef v66 = CFGetAllocator(a1);
        CFMutableDictionaryRef v67 = CFDictionaryCreateMutable(v66, 0, MEMORY[0x1E4F1D530], v60);
        if (v67)
        {
          CFDictionaryRef v68 = v67;
          time.start.CMTimeEpoch epoch = (CMTimeEpoch)v64;
          time.duration.CMTimeValue value = 0;
          time.start.CMTimeValue value = v65;
          *(void *)&time.start.CMTimeScale timescale = v67;
          CFDictionaryApplyFunction(v63, (CFDictionaryApplierFunction)fcwvtt_mapOneCaptionStylePropertyToAttribute, &time);
          uint64_t value_low = LODWORD(time.duration.value);
          if (!LODWORD(time.duration.value))
          {
            CFTypeRef context = v64;
            uint64_t v116 = 0;
            CFDictionaryApplyFunction(v68, (CFDictionaryApplierFunction)fcwvtt_copyOneAttributeToNode, &context);
            uint64_t value_low = v116;
          }
          CFRelease(v68);
          if (value_low) {
            goto LABEL_221;
          }
        }
        else
        {
          uint64_t value_low = FigSignalErrorAt();
          if (value_low) {
            goto LABEL_221;
          }
        }
        CFTypeRef v69 = v113;
        FigBytePumpGetFigBaseObject(a1);
        uint64_t v70 = CMBaseObjectGetDerivedStorage();
        time.start.CMTimeValue value = 0;
        CFTypeRef v71 = (uint64_t *)(v70 + 8);
        if (!*(void *)(v70 + 8))
        {
          CFAllocatorRef v72 = CFGetAllocator(a1);
          uint64_t v73 = FigAttributePartitionGeneratorCreate((uint64_t)v72, v71);
          if (v73) {
            goto LABEL_141;
          }
          CFAllocatorRef v74 = CFGetAllocator(a1);
          CFMutableArrayRef v75 = CFArrayCreateMutable(v74, 0, MEMORY[0x1E4F1D510]);
          *(void *)(v70 + 16) = v75;
          if (!v75) {
            break;
          }
        }
        uint64_t v73 = FigVTTNodeCopyAttributes((uint64_t)v69, &time);
        if (v73) {
          goto LABEL_141;
        }
        uint64_t value_low = FigAttributePartitionGeneratorAddElement((CFMutableArrayRef *)*v71, v69, time.start.value);
        if (!value_low) {
          CFArrayAppendValue(*(CFMutableArrayRef *)(v70 + 16), v69);
        }
LABEL_133:
        if (time.start.value) {
          CFRelease((CFTypeRef)time.start.value);
        }
        if (value_low) {
          goto LABEL_221;
        }
        CFArrayAppendValue(v54, v113);
        if (v58 == ++v59) {
          goto LABEL_142;
        }
      }
      uint64_t v73 = FigSignalErrorAt();
LABEL_141:
      uint64_t value_low = v73;
      goto LABEL_133;
    }
LABEL_142:
    time.start.CMTimeValue value = 0;
    *(void *)&time.start.CMTimeScale timescale = 0;
    CFTypeRef context = 0;
    CFAllocatorRef v76 = CFGetAllocator(a1);
    uint64_t v126 = 0;
    v127[0] = 0;
    long long v124 = 0;
    CMTimeEpoch v125 = 0;
    CFTypeRef v122 = 0;
    uint64_t v123 = 0;
    uint64_t v77 = FigCaptionDataGetCMBaseObject();
    uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v78) {
      uint64_t v79 = v78;
    }
    else {
      uint64_t v79 = 0;
    }
    uint64_t v80 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v79 + 48);
    if (v80)
    {
      uint64_t v81 = v80(v77, *MEMORY[0x1E4F1FF48], v105, &v122);
      if (v81)
      {
LABEL_240:
        uint64_t value_low = v81;
        goto LABEL_204;
      }
      uint64_t v82 = *MEMORY[0x1E4F201C0];
      if (!FigCFArrayContainsValue()
        || ((uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v84 = 0) : (v84 = v83),
            (uint64_t v85 = *(uint64_t (**)(const void *))(v84 + 8)) == 0
          ? (CFStringRef v86 = &stru_1EE53F4B8)
          : (CFStringRef v86 = (const __CFString *)v85(a2)),
            (CFIndex Length = CFStringGetLength(v86)) == 0))
      {
LABEL_202:
        uint64_t value_low = 0;
LABEL_204:
        if (v127[0]) {
          CFRelease(v127[0]);
        }
        if (v126) {
          CFRelease(v126);
        }
        if (v125) {
          CFRelease(v125);
        }
        if (v124) {
          CFRelease(v124);
        }
        if (v123) {
          CFRelease(v123);
        }
        if (context) {
          CFRelease(context);
        }
        if (v122) {
          CFRelease(v122);
        }
        if (value_low) {
          goto LABEL_221;
        }
        uint64_t v56 = FigVTTNodeSetChildNodeArray(v101, (uint64_t)v54);
LABEL_220:
        uint64_t value_low = v56;
LABEL_221:
        CFRelease(v54);
        if (v113) {
          CFRelease(v113);
        }
        CFDictionaryRef v6 = v103;
        CFDictionaryRef v8 = v104;
        CFMutableStringRef Mutable = v102;
        goto LABEL_224;
      }
      CFIndex v88 = Length;
      CMTimeValue v89 = 0;
      while (1)
      {
        if (context)
        {
          CFRelease(context);
          CFTypeRef context = 0;
        }
        uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v91 = v90 ? v90 : 0;
        uint64_t v92 = *(uint64_t (**)(const void *, CMTimeValue, uint64_t, uint64_t, CFTypeRef *, CMTimeRange *))(v91 + 24);
        if (!v92) {
          break;
        }
        uint64_t v81 = v92(a2, v89, v82, v105, &context, &time);
        if (v81) {
          goto LABEL_240;
        }
        if (context)
        {
          CFIndex v120 = -1;
          CFIndex v121 = -1;
          CFIndex v118 = 0;
          CFIndex v119 = 0;
          __int16 v117 = 0;
          if (v127[0])
          {
            CFRelease(v127[0]);
            v127[0] = 0;
          }
          if (v126)
          {
            CFRelease(v126);
            uint64_t v126 = 0;
          }
          if (v125)
          {
            CFRelease(v125);
            CMTimeEpoch v125 = 0;
          }
          if (v124)
          {
            CFRelease(v124);
            long long v124 = 0;
          }
          if (v123)
          {
            CFRelease(v123);
            uint64_t v123 = 0;
          }
          uint64_t v81 = fcwtt_mapOffsetToSpanAndSpanOffset((uint64_t)a2, time.start.value, v54, &v121, &v119, (BOOL *)&v117 + 1);
          if (v81) {
            goto LABEL_240;
          }
          if (v119 >= 1)
          {
            uint64_t v81 = fcwtt_splitSpanNode(v54, v121, v119);
            if (v81) {
              goto LABEL_240;
            }
          }
          uint64_t v81 = fcwtt_mapOffsetToSpanAndSpanOffset((uint64_t)a2, *(void *)&time.start.timescale + time.start.value, v54, &v120, &v118, (BOOL *)&v117);
          if (v81) {
            goto LABEL_240;
          }
          if (v118 >= 1)
          {
            uint64_t v81 = fcwtt_splitSpanNode(v54, v120, v118);
            if (v81) {
              goto LABEL_240;
            }
          }
          uint64_t v81 = FigVTTSpanCreate((uint64_t)v76, v127);
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTNodeSetProperty((uint64_t)v127[0], @"WebVTTSpanNode_MarkupElement", @"RubyStart");
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTSpanCreate((uint64_t)v76, &v126);
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTNodeSetProperty((uint64_t)v126, @"WebVTTSpanNode_MarkupElement", @"RubyEnd");
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTSpanCreate((uint64_t)v76, &v125);
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTNodeSetProperty((uint64_t)v125, @"WebVTTSpanNode_MarkupElement", @"RubyTextStart");
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTSpanCreate((uint64_t)v76, &v123);
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTNodeSetProperty((uint64_t)v123, @"WebVTTSpanNode_MarkupElement", @"RubyTextEnd");
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTSpanCreate((uint64_t)v76, &v124);
          if (v81) {
            goto LABEL_240;
          }
          uint64_t v81 = FigVTTNodeSetProperty((uint64_t)v124, @"WebVTTSpanNode_MarkupElement", @"RubyText");
          if (v81) {
            goto LABEL_240;
          }
          CFTypeRef v93 = context;
          uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v95 = v94 ? v94 : 0;
          double v96 = *(uint64_t (**)(CFTypeRef))(v95 + 8);
          uint64_t v97 = v96 ? (__CFString *)v96(v93) : &stru_1EE53F4B8;
          uint64_t v81 = FigVTTNodeSetValue((uint64_t)v124, v97);
          if (v81) {
            goto LABEL_240;
          }
          CFArrayInsertValueAtIndex(v54, v121, v127[0]);
          if ((_BYTE)v117) {
            CFIndex Count = CFArrayGetCount(v54);
          }
          else {
            CFIndex Count = v120 + 1;
          }
          CFArrayInsertValueAtIndex(v54, Count, v126);
          CFArrayInsertValueAtIndex(v54, Count, v123);
          CFArrayInsertValueAtIndex(v54, Count, v124);
          CFArrayInsertValueAtIndex(v54, Count, v125);
        }
        CMTimeValue v89 = *(void *)&time.start.timescale + time.start.value;
        if (*(void *)&time.start.timescale + time.start.value == v88) {
          goto LABEL_202;
        }
      }
    }
    uint64_t value_low = 4294954514;
    goto LABEL_204;
  }
LABEL_232:
  if (v109) {
    CFRelease(v109);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  return value_low;
}

uint64_t figVTTCaptionWriterForDocument_Finish(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  CFTypeRef v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = a1;
  CFTypeRef v12 = 0;
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_18;
  }
  uint64_t v5 = FigAttributePartitionGeneratorPerformPartitioning(v4, &theDict);
  if (!v5)
  {
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fcwvtt_addOnePartitionAsStyleNode, &v11);
    uint64_t v6 = v14;
    if (v14) {
      goto LABEL_16;
    }
    if (!v12 || (uint64_t v5 = FigVTTNodeSetChildNodeArray((uint64_t)v12, (uint64_t)v13), !v5))
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFArrayRef Count = *(const __CFArray **)(v3 + 16);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (v7 >= (uint64_t)Count) {
          break;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 16), v7);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v5 = FigAttributePartitionGeneratorCopyPartitionReferences(*(void *)(v3 + 8), ValueAtIndex, &cf);
        if (!v5)
        {
          uint64_t v5 = FigVTTNodeSetProperty((uint64_t)ValueAtIndex, @"WebVTTSpanNode_StyleReferences", (uint64_t)cf);
          ++v7;
          if (!v5) {
            continue;
          }
        }
        goto LABEL_14;
      }
      uint64_t v6 = 0;
      goto LABEL_16;
    }
  }
LABEL_14:
  uint64_t v6 = v5;
LABEL_16:
  if (v12) {
    CFRelease(v12);
  }
LABEL_18:
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (!v6) {
    return FigVTTDocumentWriterFlush(*DerivedStorage);
  }
  return v6;
}

const void *fcwvtt_mapOneCaptionStylePropertyToAttribute(const void *key, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 24))
  {
    key = CFDictionaryGetValue(*(CFDictionaryRef *)a3, key);
    if (key)
    {
      key = (const void *)((uint64_t (*)(uint64_t, void))key)(a2, *(void *)(a3 + 8));
      if (key) {
        *(_DWORD *)(a3 + 24) = key;
      }
    }
  }
  return key;
}

uint64_t fcwvtt_copyOneAttributeToNode(uint64_t cf, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 8))
  {
    uint64_t v4 = (const void *)cf;
    if (cf && (CFTypeID v6 = CFGetTypeID((CFTypeRef)cf), v6 == CFStringGetTypeID()))
    {
      CFTypeRef cf = FigVTTNodeSetAttribute(*(void *)a3, v4, a2);
      if (!cf) {
        return cf;
      }
    }
    else
    {
      CFTypeRef cf = 4294949406;
    }
    *(_DWORD *)(a3 + 8) = cf;
  }
  return cf;
}

void fcwvtt_initCaptionStylePropertyToVTTAttributesMapping()
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F201C8], FigVTTDocumentWriterMapPropertyToAttribute_TextColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20138], FigVTTDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20180], FigVTTDocumentWriterMapPropertyToAttribute_FontWeight);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20160], FigVTTDocumentWriterMapPropertyToAttribute_FontStyle);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20140], FigVTTDocumentWriterMapPropertyToAttribute_Decoration);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20150], FigVTTDocumentWriterMapPropertyToAttribute_FontFamily);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20158], FigVTTDocumentWriterMapPropertyToAttribute_FontSize);
  sCaptionStylePropertyToVTTAttributesMapping = (uint64_t)Mutable;
}

uint64_t fcwtt_mapOffsetToSpanAndSpanOffset(uint64_t a1, CFIndex a2, const __CFArray *a3, CFIndex *a4, void *a5, BOOL *a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v30 = 0;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 8);
  if (v14)
  {
    CFStringRef v15 = (const __CFString *)v14(a1);
    if (!v15)
    {
      CFIndex v16 = 0;
      BOOL v17 = 0;
      CFIndex v18 = -1;
LABEL_35:
      if (a4) {
        *a4 = v18;
      }
      if (a5) {
        *a5 = v16;
      }
      uint64_t v26 = 0;
      if (a6) {
        *a6 = v17;
      }
      goto LABEL_41;
    }
  }
  else
  {
    CFStringRef v15 = &stru_1EE53F4B8;
  }
  CFIndex Length = CFStringGetLength(v15);
  if ((a2 & 0x8000000000000000) == 0 && Length >= a2)
  {
    char v28 = a6;
    CFIndex v18 = 0;
    CFIndex v20 = 0;
    if (!a3) {
      goto LABEL_12;
    }
LABEL_11:
    for (CFIndex i = CFArrayGetCount(a3); v18 < i; CFIndex i = 0)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v18);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      CFAllocatorRef v23 = CFGetAllocator(ValueAtIndex);
      uint64_t v24 = FigVTTNodeCopyProperty((uint64_t)ValueAtIndex, @"WebVTTSpanNode_MarkupElement", (uint64_t)v23, (uint64_t)&cf);
      if (v24) {
        goto LABEL_47;
      }
      if (cf
        && (CFEqual(cf, @"RubyStart")
         || CFEqual(cf, @"RubyEnd")
         || CFEqual(cf, @"RubyTextStart")
         || CFEqual(cf, @"RubyTextEnd")
         || CFEqual(cf, @"RubyText")))
      {
        goto LABEL_30;
      }
      if (v30)
      {
        CFRelease(v30);
        CFTypeRef v30 = 0;
      }
      uint64_t v24 = FigVTTNodeCopyValue((uint64_t)ValueAtIndex, &v30);
      if (v24) {
        goto LABEL_47;
      }
      if (!v30)
      {
LABEL_30:
        CFIndex v25 = v20;
      }
      else
      {
        CFIndex v25 = CFStringGetLength((CFStringRef)v30) + v20;
        CFIndex v16 = a2 - v20;
        if (a2 >= v20 && v25 > a2) {
          goto LABEL_34;
        }
      }
      ++v18;
      CFIndex v20 = v25;
      if (a3) {
        goto LABEL_11;
      }
LABEL_12:
      ;
    }
    CFIndex v16 = 0;
    CFIndex v18 = -1;
LABEL_34:
    BOOL v17 = v18 == -1;
    a6 = v28;
    goto LABEL_35;
  }
  uint64_t v24 = FigSignalErrorAt();
LABEL_47:
  uint64_t v26 = v24;
LABEL_41:
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  return v26;
}

uint64_t fcwtt_splitSpanNode(const __CFArray *a1, CFIndex a2, CFIndex a3)
{
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  theCFStringRef String = 0;
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  uint64_t CopyWithValueRange = FigVTTNodeCopyValue((uint64_t)ValueAtIndex, &theString);
  if (CopyWithValueRange) {
    goto LABEL_14;
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v9 = Length - a3;
  if (Length <= a3)
  {
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t CopyWithValueRange = FigVTTSpanCreateCopyWithValueRange(ValueAtIndex, 0, a3, (CFTypeRef *)&value);
  if (CopyWithValueRange)
  {
LABEL_14:
    uint64_t v10 = CopyWithValueRange;
  }
  else
  {
    uint64_t v10 = FigVTTSpanCreateCopyWithValueRange(ValueAtIndex, a3, v9, &cf);
    if (!v10)
    {
      CFArrayRemoveValueAtIndex(a1, a2);
      CFArrayInsertValueAtIndex(a1, a2, value);
      CFArrayInsertValueAtIndex(a1, a2 + 1, cf);
    }
  }
LABEL_7:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (theString) {
    CFRelease(theString);
  }
  return v10;
}

void fcwvtt_addOnePartitionAsStyleNode(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  CMTimeValue value = 0;
  FigBytePumpGetFigBaseObject(*(void *)a3);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a3 + 24)) {
    goto LABEL_8;
  }
  if (*(void *)(a3 + 8))
  {
LABEL_5:
    CFAllocatorRef v11 = CFGetAllocator(*(CFTypeRef *)a3);
    int v8 = FigVTTStyleCreate((uint64_t)v11, a1, &value);
    if (!v8)
    {
      v12[0] = *(void *)(a3 + 8);
      v12[1] = value;
      uint64_t v13 = 0;
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fcwvtt_applyOneAttributeToStyleNode, v12);
      int v8 = v13;
      if (!v13)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 16), value);
        goto LABEL_8;
      }
    }
    goto LABEL_12;
  }
  CFIndex v7 = (CFTypeRef *)DerivedStorage;
  int v8 = FigVTTDocumentWriterCreateAndAddNode(*DerivedStorage, 2, 7, a3 + 8);
  if (!v8)
  {
    CFAllocatorRef v9 = CFGetAllocator(*v7);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    *(void *)(a3 + 16) = Mutable;
    if (!Mutable)
    {
      int v8 = FigSignalErrorAt();
      if (!v8) {
        goto LABEL_8;
      }
      goto LABEL_12;
    }
    goto LABEL_5;
  }
LABEL_12:
  *(_DWORD *)(a3 + 24) = v8;
LABEL_8:
  if (value) {
    CFRelease(value);
  }
}

const void *fcwvtt_applyOneAttributeToStyleNode(const void *result, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 16))
  {
    uint64_t result = (const void *)FigVTTNodeSetAttribute(*(void *)(a3 + 8), result, a2);
    if (result) {
      *(_DWORD *)(a3 + 16) = result;
    }
  }
  return result;
}

uint64_t FigCDSNodeCreate(void *a1)
{
  *a1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCDSNodeGetClassID_sRegisterFigCDSNodeBaseTypeOnce, RegisterFigCDSNodeBaseType);
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    *(void *)(DerivedStorage + 8) = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
    *(void *)(DerivedStorage + 216) = CFArrayCreateMutable(v2, 0, v5);
    *(_WORD *)(DerivedStorage + 208) = 257;
    *(_OWORD *)(DerivedStorage + 48) = CDSRectNull;
    *(_OWORD *)(DerivedStorage + 64) = unk_19499C530;
    *(_OWORD *)(DerivedStorage + 80) = xmmword_19499C540;
    *(_OWORD *)(DerivedStorage + 96) = unk_19499C550;
    long long v6 = *MEMORY[0x1E4F1DB20];
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E4F1DB20];
    *(_OWORD *)(DerivedStorage + 128) = v7;
    *(_OWORD *)(DerivedStorage + 16) = v6;
    *(_OWORD *)(DerivedStorage + 32) = v7;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v13 = *MEMORY[0x1E4F1DB30];
    *(_OWORD *)(DerivedStorage + 144) = _Q0;
    *(_OWORD *)(DerivedStorage + 160) = v13;
    *(void *)(DerivedStorage + 176) = 0;
    *(_DWORD *)(DerivedStorage + 184) = 0;
    *(void *)(DerivedStorage + 192) = 0;
    *(void *)(DerivedStorage + 200) = 0;
    *a1 = 0;
  }
  return v3;
}

void FigCDSNodeFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
  CFRelease(*(CFTypeRef *)(DerivedStorage + 216));
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 200));
  uint64_t v1 = *(void **)(DerivedStorage + 192);
  if (v1)
  {
    free(v1);
    *(void *)(DerivedStorage + 192) = 0;
  }
}

__CFString *FigCDSNodeCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSNode: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSNode_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSNode <FigCDSNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  *(void *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetParentNode(uint64_t a1, void *a2)
{
  *a2 = *(void *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetChildren(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  CFArrayRef v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v7.length = CFArrayGetCount(v5);
  v7.CFIndex location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) >= 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  CFArrayRef v3 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v6.length = CFArrayGetCount(v3);
  v6.CFIndex location = 0;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v3, v6, a2);
  CFArrayRemoveValueAtIndex(v3, FirstIndexOfValue);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 8));
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetViewport(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.double width = a3;
  v10.size.double height = a4;
  if (!CGRectEqualToRect(*(CGRect *)(DerivedStorage + 16), v10))
  {
    *(CGFloat *)(DerivedStorage + 16) = a1;
    *(CGFloat *)(DerivedStorage + 24) = a2;
    *(CGFloat *)(DerivedStorage + 32) = a3;
    *(CGFloat *)(DerivedStorage + 40) = a4;
    *(unsigned char *)(DerivedStorage + 209) = 1;
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetViewport(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)(DerivedStorage + 32);
  *a2 = *(_OWORD *)(DerivedStorage + 16);
  a2[1] = v4;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  long long v4 = a2[3];
  long long v6 = *a2;
  long long v5 = a2[1];
  DerivedStorage[5] = a2[2];
  DerivedStorage[6] = v4;
  DerivedStorage[3] = v6;
  DerivedStorage[4] = v5;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  long long v4 = DerivedStorage[6];
  long long v6 = DerivedStorage[3];
  long long v5 = DerivedStorage[4];
  a2[2] = DerivedStorage[5];
  a2[3] = v4;
  *a2 = v6;
  a2[1] = v5;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 112) = a1;
  *(double *)(DerivedStorage + 120) = a2;
  *(double *)(DerivedStorage + 128) = a3;
  *(double *)(DerivedStorage + 136) = a4;
  CFArrayRef v9 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v9) >= 1)
  {
    CFIndex v10 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v10);
      FigCDSNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v13 = *(void *)(ProtocolVTable + 16);
        if (v13)
        {
          uint64_t v14 = *(void (**)(const void *, double, double, double, double))(v13 + 64);
          if (v14) {
            v14(ValueAtIndex, a1, a2, a3, a4);
          }
        }
      }
      ++v10;
    }
    while (CFArrayGetCount(v9) > v10);
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)(DerivedStorage + 128);
  *a2 = *(_OWORD *)(DerivedStorage + 112);
  a2[1] = v4;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 160) = a1;
  *(double *)(DerivedStorage + 168) = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCGSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 160);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 144) = a1;
  *(double *)(DerivedStorage + 152) = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void **)(DerivedStorage + 192);
  if (v1)
  {
    *(void *)(DerivedStorage + 192) = 0;
    free(v1);
    *(void *)(DerivedStorage + 176) = 0;
    *(_DWORD *)(DerivedStorage + 184) = 0;
  }
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 200));
  *(void *)(DerivedStorage + 200) = 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetImageCache(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 200));
  *(void *)(DerivedStorage + 200) = CGImageRetain(a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageCache(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 200);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 176);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 180);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 <= 0x10000 && a3 <= 0x10000 && a4 < 0x11)
  {
    unint64_t v8 = a3 * (unint64_t)a2 * a4 * a4;
    if (!(v8 >> 29))
    {
      uint64_t v9 = DerivedStorage;
      int v10 = *(_DWORD *)(DerivedStorage + 180) * *(_DWORD *)(DerivedStorage + 176) * *(_DWORD *)(DerivedStorage + 184);
      CFAllocatorRef v11 = *(void **)(DerivedStorage + 192);
      if (v10 == a3 * a2 * a4)
      {
        bzero(v11, 4 * v8);
        return 0;
      }
      if (v11)
      {
        *(void *)(v9 + 192) = 0;
        free(v11);
        *(void *)(v9 + 176) = 0;
        *(_DWORD *)(v9 + 184) = 0;
      }
      if (!v8 || (uint64_t v12 = malloc_type_calloc(4 * v8, 1uLL, 0x17B560CDuLL), (*(void *)(v9 + 192) = v12) != 0))
      {
        *(_DWORD *)(v9 + 176) = a2;
        *(_DWORD *)(v9 + 180) = a3;
        *(_DWORD *)(v9 + 184) = a4;
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 192);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, char a2)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 208) = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 208);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 209) = a2;
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v4) >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      FigCDSNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          uint64_t v9 = *(void (**)(const void *, uint64_t))(v8 + 216);
          if (v9) {
            v9(ValueAtIndex, a2);
          }
        }
      }
      ++v5;
    }
    while (CFArrayGetCount(v4) > v5);
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 209);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_HasActions(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 216)) > 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetZOrder()
{
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetZOrder(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_ResetNodeTree(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)(DerivedStorage + 208) = 257;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(DerivedStorage + 144) = _Q0;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v9 = *(void *)(ProtocolVTable + 16);
    if (v9)
    {
      int v10 = *(void (**)(uint64_t))(v9 + 312);
      if (v10) {
        v10(a1);
      }
    }
  }
  CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v11) >= 1)
  {
    CFIndex v12 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
      FigCDSNodeProtocolGetProtocolID();
      uint64_t v14 = CMBaseObjectGetProtocolVTable();
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 16);
        if (v15)
        {
          CFIndex v16 = *(void (**)(const void *))(v15 + 256);
          if (v16) {
            v16(ValueAtIndex);
          }
        }
      }
      ++v12;
    }
    while (CFArrayGetCount(v11) > v12);
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950096;
  }
  uint64_t v5 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 224) && *(unsigned char *)(a2 + 464))
  {
    CGContextSaveGState(*(CGContextRef *)(a2 + 288));
    CGSize v6 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    v11.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
    v11.CGSize size = v6;
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v8 = *(void *)(ProtocolVTable + 16);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, CGRect *))(v8 + 104);
        if (v9) {
          v9(a1, &v11);
        }
      }
    }
    CGContextSetRGBStrokeColor(*(CGContextRef *)(a2 + 288), 1.0, 0.0, 1.0, 1.0);
    CGContextSetLineWidth(*(CGContextRef *)(a2 + 288), 3.0);
    CGContextStrokeRect(*(CGContextRef *)(a2 + 288), v11);
    CGContextRestoreGState(*(CGContextRef *)(a2 + 288));
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 208) = 0;
  return result;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950096;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t result = 0;
  *(unsigned char *)(v4 + 209) = 0;
  return result;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 4294950096;
  }
}

uint64_t FigCDSNode_FigCDSNodeProtocol_Compose(uint64_t a1, void *a2)
{
  CFArrayRef v3 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v5.length = CFArrayGetCount(v3);
  v5.CFIndex location = 0;
  CFArrayApplyFunction(v3, v5, (CFArrayApplierFunction)updateDisplayChildNodes, a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (v5)
    {
      CGSize v6 = *(void (**)(uint64_t, _OWORD *))(v5 + 296);
      if (v6)
      {
        v11[0] = v8;
        v11[1] = v9;
        uint64_t v12 = v10;
        v6(v3, v11);
      }
    }
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_AddAction(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 216), a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 216));
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetActions(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 216);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 216) = 0;
  }
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(DerivedStorage + 216) = v5;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetActions(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 216);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SelectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v9 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v18.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v18.CGSize size = v9;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (v11)
    {
      uint64_t v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12) {
        v12(a1, &v18);
      }
    }
  }
  uint64_t v17 = 0;
  *(CGFloat *)CFTypeRef context = a3;
  *(CGFloat *)&context[1] = a4;
  CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.CFIndex location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)SelectChildNodes, context);
  if (!(_BYTE)v17)
  {
    v20.x = a3;
    v20.y = a4;
    *(unsigned char *)(DerivedStorage + 224) = CGRectContainsPoint(v18, v20);
  }
  if (a2)
  {
    if ((_BYTE)v17)
    {
      BOOL v14 = 1;
    }
    else
    {
      v21.x = a3;
      v21.y = a4;
      BOOL v14 = CGRectContainsPoint(v18, v21);
    }
    *a2 = v14;
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_UnselectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v9 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v18.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v18.CGSize size = v9;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (v11)
    {
      uint64_t v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12) {
        v12(a1, &v18);
      }
    }
  }
  uint64_t v17 = 0;
  *(CGFloat *)CFTypeRef context = a3;
  *(CGFloat *)&context[1] = a4;
  CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.CFIndex location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)UnselectChildNodes, context);
  if (!(_BYTE)v17)
  {
    v20.x = a3;
    v20.y = a4;
    if (CGRectContainsPoint(v18, v20)) {
      *(unsigned char *)(DerivedStorage + 224) = 0;
    }
  }
  if (a2)
  {
    if ((_BYTE)v17)
    {
      BOOL v14 = 1;
    }
    else
    {
      v21.x = a3;
      v21.y = a4;
      BOOL v14 = CGRectContainsPoint(v18, v21);
    }
    *a2 = v14;
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_IsSelected(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 224);
  return 0;
}

uint64_t updateDisplayChildNodes(uint64_t a1, uint64_t a2)
{
  FigCDSNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      CFRange v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 288);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

uint64_t SelectChildNodes(uint64_t a1, uint64_t a2)
{
  char v10 = 0;
  double v4 = *(double *)a2;
  double v5 = *(double *)(a2 + 8);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result && (uint64_t v8 = *(void *)(result + 16), result += 16, (v7 = v8) != 0))
  {
    CGSize v9 = *(uint64_t (**)(uint64_t, char *, double, double))(v7 + 336);
    if (v9)
    {
      uint64_t result = v9(a1, &v10, v4, v5);
      LOBYTE(v9) = v10 != 0;
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  if (*(unsigned char *)(a2 + 16)) {
    LOBYTE(v9) = 1;
  }
  *(unsigned char *)(a2 + 16) = (_BYTE)v9;
  return result;
}

uint64_t UnselectChildNodes(uint64_t a1, uint64_t a2)
{
  char v10 = 0;
  double v4 = *(double *)a2;
  double v5 = *(double *)(a2 + 8);
  FigCDSNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result && (uint64_t v8 = *(void *)(result + 16), result += 16, (v7 = v8) != 0))
  {
    CGSize v9 = *(uint64_t (**)(uint64_t, char *, double, double))(v7 + 344);
    if (v9)
    {
      uint64_t result = v9(a1, &v10, v4, v5);
      LOBYTE(v9) = v10 != 0;
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  if (*(unsigned char *)(a2 + 16)) {
    LOBYTE(v9) = 1;
  }
  *(unsigned char *)(a2 + 16) = (_BYTE)v9;
  return result;
}

uint64_t RegisterFigCDSNodeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSNodeBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSNode]");
}

uint64_t FigByteFlumeCreateWithHTTP(uint64_t a1, const __CFURL *a2, const void *a3, const void *a4, const void *a5, NSObject *a6, int a7, const __CFDictionary *a8, void *a9)
{
  valuePtr[16] = *MEMORY[0x1E4F143B8];
  CFTypeRef v98 = 0;
  CFTypeRef v99 = 0;
  uint64_t v97 = 0;
  if (FigNote_AllowInternalDefaultLogs()) {
    FigNote_AllowInternalDefaultLogs();
  }
  fig_note_initialize_category_with_default_work_cf();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a9) {
    goto LABEL_150;
  }
  BOOL v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a4) {
    goto LABEL_20;
  }
  CFStringRef v15 = (const __CFString *)FigCFHTTPCreateURLString(a2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a4)
    || (CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a4, @"Version")) == 0
    || (CGRect v18 = Value, v19 = CFNumberGetTypeID(), v19 != CFGetTypeID(v18))
    || (LODWORD(valuePtr[0]) = 0, !CFNumberGetValue((CFNumberRef)v18, kCFNumberSInt32Type, valuePtr))
    || LODWORD(valuePtr[0]) != 1
    || (CFStringRef v20 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a4, @"URL")) == 0)
  {
LABEL_105:
    a4 = 0;
    if (!v15) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (!a7)
  {
    if (CFStringCompare(v20, v15, 0)) {
      goto LABEL_105;
    }
    goto LABEL_16;
  }
  CFAllocatorRef v21 = *v14;
  CFURLRef v22 = CFURLCreateWithString(*v14, v20, 0);
  if (v22)
  {
    CFURLRef v23 = v22;
    CFStringRef v24 = (const __CFString *)FigCFURLCreateCacheKey();
    CFRelease(v23);
  }
  else
  {
    CFStringRef v24 = 0;
  }
  CFURLRef v73 = CFURLCreateWithString(v21, v15, 0);
  if (!v73)
  {
    CFStringRef v75 = 0;
LABEL_101:
    if (v24) {
      CFRelease(v24);
    }
    if (v75) {
      CFRelease(v75);
    }
    goto LABEL_105;
  }
  CFURLRef v74 = v73;
  CFStringRef v75 = (const __CFString *)FigCFURLCreateCacheKey();
  CFRelease(v74);
  if (!v24 || !v75) {
    goto LABEL_101;
  }
  CFComparisonResult v76 = CFStringCompare(v24, v75, 0);
  CFRelease(v24);
  CFRelease(v75);
  if (v76) {
    goto LABEL_105;
  }
LABEL_16:
  CFIndex v25 = CFDictionaryGetValue((CFDictionaryRef)a4, @"Size");
  if (!v25) {
    goto LABEL_105;
  }
  uint64_t v26 = v25;
  CFTypeID v27 = CFNumberGetTypeID();
  if (v27 != CFGetTypeID(v26)) {
    goto LABEL_105;
  }
  if (v15) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  FigByteFlumeGetClassID();
  uint64_t v28 = CMDerivedObjectCreate();
  if (v28) {
    goto LABEL_151;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigNetworkUrgencyMonitorCreate(a1, (uint64_t *)(DerivedStorage + 624));
  uint64_t v28 = FigByteFlumeBaseInitialize(a1, DerivedStorage);
  if (v28) {
    goto LABEL_151;
  }
  if (a8)
  {
    CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(a8, @"FBFCreateOption_MaxSizeAllowedForCellularAccess");
    if (v30)
    {
      CFNumberRef v31 = v30;
      CFTypeID v32 = CFGetTypeID(v30);
      if (v32 == CFNumberGetTypeID()) {
        *(unsigned char *)(DerivedStorage + 152) = CFNumberGetValue(v31, kCFNumberSInt64Type, (void *)(DerivedStorage + 160));
      }
    }
    CFTypeID v33 = (const void *)*MEMORY[0x1E4F1CFD0];
    *(unsigned char *)(DerivedStorage + 153) = v33 == CFDictionaryGetValue(a8, @"FBFCreateOption_DisallowsExpensiveNetworkAccess");
    *(unsigned char *)(DerivedStorage + 154) = v33 == CFDictionaryGetValue(a8, @"FBFCreateOption_DisallowsConstrainedNetworkAccess");
    *(unsigned char *)(DerivedStorage + 532) = v33 == CFDictionaryGetValue(a8, @"FBFCreateOption_UseAWDL");
    *(unsigned char *)(DerivedStorage + 248) = v33 == CFDictionaryGetValue(a8, @"FBFCreateOption_DisableLargeDownload");
    int v34 = CFDictionaryGetValue(a8, @"FBFCreateOption_HTTPRequestOptions");
    if (v34) {
      int v34 = CFRetain(v34);
    }
    *(void *)(DerivedStorage + 568) = v34;
    uint64_t v35 = CFDictionaryGetValue(a8, @"FBFCreateOption_AlternativeConfigurationOptions");
    *(unsigned char *)(DerivedStorage + 184) = v33 == CFDictionaryGetValue(a8, @"FBFCreateOption_AlwaysFollowRedirects");
    uint64_t v36 = CFDictionaryGetValue(a8, @"FBFCreateOption_ParentNetworkActivity");
    if (v36) {
      uint64_t v36 = CFRetain(v36);
    }
    *(void *)(DerivedStorage + 640) = v36;
    FigCFDictionaryGetBooleanIfPresent();
    *(unsigned char *)(DerivedStorage + 533) = 0;
    *(void *)(DerivedStorage + 616) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    CFDictionaryRef v37 = (const __CFDictionary *)CFDictionaryGetValue(a8, @"FBFCreateOption_StoreBagConfiguration");
    *(unsigned char *)(DerivedStorage + 632) = FigRCLGetNumberWithDefault(v37, @"enableHTTP3Connection") != 0;
    *(unsigned char *)(DerivedStorage + 633) = FigRCLGetNumberWithDefault(v37, @"enableL4S") != 0;
  }
  else
  {
    uint64_t v35 = 0;
  }
  CFDictionaryRef v38 = *(const __CFDictionary **)(DerivedStorage + 568);
  if (v38)
  {
    CFTypeID v39 = CFDictionaryGetValue(v38, @"FHRP_InterfaceName");
    if (v39) {
      CFTypeID v39 = CFRetain(v39);
    }
    *(void *)(DerivedStorage + 536) = v39;
    uint64_t v40 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 568), @"FHRP_StorageSession");
    if (v40) {
      uint64_t v40 = CFRetain(v40);
    }
    *(void *)(DerivedStorage + 232) = v40;
    CFTypeID v41 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 568), @"FHRP_ClientAuditToken");
    if (v41) {
      CFTypeID v41 = CFRetain(v41);
    }
    *(void *)(DerivedStorage + 544) = v41;
    uint64_t v42 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 568), @"FHRP_ClientBundleIdentifier");
    if (v42) {
      uint64_t v42 = CFRetain(v42);
    }
    *(void *)(DerivedStorage + 552) = v42;
    *(void *)(DerivedStorage + 560) = FigCFHTTPCopyClientProcessName(*(const __CFData **)(DerivedStorage + 544));
  }
  uint64_t v43 = FigHTTPSchedulerRetain(a6);
  uint64_t v44 = *(void *)(DerivedStorage + 240);
  *(void *)(DerivedStorage + 48) = v43;
  if (v44)
  {
    CFNumberRef v45 = 0;
    goto LABEL_44;
  }
  if (*(void *)(DerivedStorage + 232))
  {
    CFAllocatorRef v49 = *v14;
    goto LABEL_120;
  }
  if (*(void *)(DerivedStorage + 568))
  {
    LOBYTE(valuePtr[0]) = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
LABEL_150:
      uint64_t v28 = FigSignalErrorAt();
LABEL_151:
      uint64_t v72 = v28;
      goto LABEL_152;
    }
    uint64_t v78 = Mutable;
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionaryGetBooleanIfPresent();
    *(unsigned char *)(DerivedStorage + 633) = LOBYTE(valuePtr[0]) == 0;
    if (*(unsigned char *)(DerivedStorage + 532)) {
      CFDictionarySetValue(v78, @"FUSS_UseAWDL", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (*(unsigned char *)(DerivedStorage + 533)) {
      CFDictionarySetValue(v78, @"FUSS_EnableMultiPath", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    uint64_t v72 = FigURLStorageSessionCreate(v78, (uint64_t *)(DerivedStorage + 232));
    CFRelease(v78);
    if (v72) {
      goto LABEL_152;
    }
  }
  else
  {
    uint64_t v72 = FigURLStorageSessionCreate(0, (uint64_t *)(DerivedStorage + 232));
    if (v72)
    {
LABEL_152:
      CFNumberRef v45 = 0;
      goto LABEL_131;
    }
  }
  CFDictionaryRef v79 = *(const __CFDictionary **)(DerivedStorage + 568);
  CFAllocatorRef v49 = *v14;
  if (v79)
  {
    CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(*v14, 0, v79);
    CFRelease(*(CFTypeRef *)(DerivedStorage + 568));
  }
  else
  {
    CFMutableArrayRef MutableCopy = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFDictionarySetValue(MutableCopy, @"FHRP_StorageSession", *(const void **)(DerivedStorage + 232));
  *(void *)(DerivedStorage + 568) = MutableCopy;
  if (!*(void *)(DerivedStorage + 232)) {
    goto LABEL_150;
  }
LABEL_120:
  uint64_t v81 = CFDictionaryCreateMutable(v49, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v45 = v81;
  if (!v81) {
    goto LABEL_148;
  }
  uint64_t v82 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)(DerivedStorage + 533)) {
    uint64_t v82 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v81, @"FHRSP_EnableMultiPath", *v82);
  uint64_t v83 = *(void *)(DerivedStorage + 232);
  uint64_t v84 = *(void *)(DerivedStorage + 48);
  uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v85) {
    uint64_t v86 = v85;
  }
  else {
    uint64_t v86 = 0;
  }
  int v87 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t))(v86 + 40);
  if (!v87)
  {
    uint64_t v72 = 4294954514;
    goto LABEL_131;
  }
  uint64_t v47 = v87(v83, v84, v45, DerivedStorage + 240);
  if (v47) {
    goto LABEL_149;
  }
  uint64_t v88 = *(void *)(DerivedStorage + 240);
  uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v89) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 0;
  }
  uint64_t v92 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v90 + 48);
  if (v92 && !v92(v88, 0x1EE57E398, v49, &v98) && v98) {
    CFNumberGetValue((CFNumberRef)v98, kCFNumberSInt64Type, &v97);
  }
  if (v97)
  {
    uint64_t v93 = 3;
  }
  else
  {
    if (*(uint64_t *)(DerivedStorage + 616) < 3) {
      goto LABEL_44;
    }
    uint64_t v93 = 2;
  }
  *(void *)(DerivedStorage + 616) = v93;
LABEL_44:
  *(_DWORD *)(DerivedStorage + 528) = a7;
  *(_DWORD *)(DerivedStorage + 72) = 0;
  if (a4)
  {
    uint64_t v46 = CFDictionaryGetValue((CFDictionaryRef)a4, @"FileName");
    if (v46) {
      *(void *)(DerivedStorage + 208) = CFRetain(v46);
    }
    *(void *)(DerivedStorage + 272) = CFRetain(a4);
  }
  uint64_t v47 = FigByteRateHistoryCreate((void *)(DerivedStorage + 344));
  if (v47) {
    goto LABEL_149;
  }
  uint64_t v47 = FigByteRateHistoryAllocSampleArray(*(void *)(DerivedStorage + 344), 64);
  if (v47) {
    goto LABEL_149;
  }
  if (a3) {
    CFTypeRef v48 = CFRetain(a3);
  }
  else {
    CFTypeRef v48 = FigCFHTTPCreateUserAgent();
  }
  *(void *)(DerivedStorage + 200) = v48;
  *(void *)(DerivedStorage + 168) = CFRetain(a2);
  *(void *)(DerivedStorage + 192) = FigCFHTTPCreateURLString(a2);
  if (a5) {
    CFTypeRef v50 = CFRetain(a5);
  }
  else {
    CFTypeRef v50 = 0;
  }
  *(void *)(DerivedStorage + 224) = v50;
  *(void *)(DerivedStorage + 56) = 0;
  *(void *)(DerivedStorage + 64) = DerivedStorage + 56;
  *(void *)(DerivedStorage + 464) = 60000000000;
  if (FigHTTPCreateTimer(*(const void **)DerivedStorage, (uint64_t)fbf_NetworkMonitorTimerProc, *(NSObject **)(DerivedStorage + 48), (dispatch_object_t *)(DerivedStorage + 456), 8073216000.0))
  {
LABEL_148:
    uint64_t v47 = FigSignalErrorAt();
LABEL_149:
    uint64_t v72 = v47;
    goto LABEL_131;
  }
  valuePtr[0] = 0x4014000000000000;
  CFAllocatorRef v51 = *v14;
  CFNumberRef v52 = CFNumberCreate(v51, kCFNumberDoubleType, valuePtr);
  CFMutableArrayRef v53 = CFDictionaryCreateMutable(v51, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFStringRef v54 = CFStringCreateWithFormat(v51, 0, @"ByteFlume-%p", v99);
  CFDictionarySetValue(v53, (const void *)*MEMORY[0x1E4F21788], v54);
  CFDictionarySetValue(v53, (const void *)*MEMORY[0x1E4F1EFB0], v52);
  *(void *)(DerivedStorage + 368) = CMMemoryPoolCreate(v53);
  if (v54) {
    CFRelease(v54);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v53) {
    CFRelease(v53);
  }
  *(void *)(DerivedStorage + 592) = FigNetworkInterfaceReporterCreate();
  FigByteFlumeCreateReportingAgent(DerivedStorage, (uint64_t)v35, *(const __CFDictionary **)(DerivedStorage + 224), *(const void **)(DerivedStorage + 560), *(const void **)(DerivedStorage + 552), 0, 0);
  uint64_t v55 = *(void *)(DerivedStorage + 32);
  if (v55)
  {
    uint64_t v56 = *(void *)(DerivedStorage + 616);
    uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v58 = v57 ? v57 : 0;
    CFIndex v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v58 + 56);
    if (v59) {
      v59(v55, 0x1EE582C18, 0x1EE584CF8, v56, 0);
    }
  }
  uint64_t v60 = *(void *)(DerivedStorage + 32);
  if (v60)
  {
    uint64_t v61 = v97;
    uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v62) {
      uint64_t v63 = v62;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v63 + 56);
    if (v64) {
      v64(v60, 0x1EE582C18, 0x1EE584D18, v61, 0);
    }
    uint64_t v65 = *(void *)(DerivedStorage + 32);
    if (v65)
    {
      uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v67 = v66 ? v66 : 0;
      CFDictionaryRef v68 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v67 + 56);
      if (v68) {
        v68(v65, 0x1EE582C18, 0x1EE55E0B8, 0, 0);
      }
    }
  }
  FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(DerivedStorage + 592), 0, 0, 0, 0);
  if (FigGetCFPreferenceNumberWithDefault() == 1) {
    *(unsigned char *)(DerivedStorage + 184) = 1;
  }
  uint64_t v69 = nw_activity_create();
  *(void *)(DerivedStorage + 600) = v69;
  if (v69)
  {
    if (!*(void *)(DerivedStorage + 640) || (nw_activity_set_parent_activity(), *(void *)(DerivedStorage + 600))) {
      nw_activity_activate();
    }
  }
  if (dword_1E9350E58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v71 = v99;
  if (v99) {
    CFTypeRef v71 = CFRetain(v99);
  }
  uint64_t v72 = 0;
  *a9 = v71;
LABEL_131:
  if (v99) {
    CFRelease(v99);
  }
  if (v98) {
    CFRelease(v98);
  }
  if (v45) {
    CFRelease(v45);
  }
  return v72;
}

uint64_t fbf_NetworkMonitorTimerProc()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    FigRetainProxyGetOwner();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v1 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 448))
    {
      fbf_CancelReconnect(DerivedStorage);
      uint64_t v2 = *(void *)(v1 + 480);
      uint64_t v3 = *(void *)(v1 + 320);
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      if (v2 == v3)
      {
        uint64_t v5 = *(void *)(v1 + 472);
        BOOL v6 = v5 <= UpTimeNanoseconds;
        uint64_t v7 = v5 - UpTimeNanoseconds;
        if (!v6)
        {
LABEL_31:
          FigHTTPRescheduleTimer((double)v7 / 1000000000.0, *(void *)(v1 + 48), *(NSObject **)(v1 + 456));
          return FigRetainProxyUnlockMutex();
        }
        if (*(unsigned char *)(v1 + 17)) {
          goto LABEL_41;
        }
        *(unsigned char *)(v1 + 17) = 1;
        int v8 = *(_DWORD *)(v1 + 44);
        BOOL v9 = *(unsigned char *)(v1 + 40) && v8 == 1;
        BOOL v10 = v9 || v8 == 2;
        int v11 = v10;
        FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(v1 + 592), 0, *(void *)(v1 + 32), 0x1EE582C18, v11);
        fbf_ReleaseAndCreateLastError(v1, -12661, @"CoreMediaErrorDomain", @"Host unavailable - inactivity detected");
        fbf_ReportingAgentReportErrorEvent(v1, @"CoreMediaErrorDomain", @"Host unavailable - inactivity detected", 2u, -12661);
        FigByteFlumePostHostUnavailableNotification(v1);
        FigRetainProxyRetainOwner();
        FigCFHTTPStopAllReads(v1, -12935);
        FigRetainProxyReleaseOwner();
        if (!FigRetainProxyIsInvalidated())
        {
LABEL_41:
          if (*(unsigned char *)(v1 + 18) != 1 && !*(unsigned char *)(v1 + 392))
          {
            if (*(void *)(v1 + 512))
            {
              if (dword_1E9350E58)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else
            {
              if (dword_1E9350E58)
              {
                uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(void *)(v1 + 512) = FigGetUpTimeNanoseconds();
            }
            goto LABEL_37;
          }
        }
      }
      else
      {
        uint64_t v14 = *(void *)(v1 + 320) - UpTimeNanoseconds + *(void *)(v1 + 464);
        if (*(unsigned char *)(v1 + 17) == 1)
        {
          *(unsigned char *)(v1 + 17) = 0;
          if (FigByteFlumePostHostAvailableNotification(v1)) {
            fbf_ReportingAgentResetErrorStats(v1);
          }
        }
        *(_DWORD *)(v1 + 496) = 0;
        fbf_SetInactivityMonitorTimer((void *)v1, v14);
      }
    }
    else
    {
      if (!*(unsigned char *)(DerivedStorage + 392))
      {
        if (*(void *)(DerivedStorage + 488))
        {
          uint64_t v15 = FigGetUpTimeNanoseconds();
          uint64_t v16 = *(void *)(v1 + 520);
          BOOL v6 = v16 <= v15;
          uint64_t v7 = v16 - v15;
          if (v6)
          {
            fbf_CancelReconnect(v1);
            ++*(_DWORD *)(v1 + 496);
            *(void *)(v1 + 512) = 0;
            fbf_postConnectionToHostLostNotification(v1);
            return FigRetainProxyUnlockMutex();
          }
          goto LABEL_31;
        }
LABEL_37:
        fbf_ResumeRetryAttempt(v1, 0);
        return FigRetainProxyUnlockMutex();
      }
      if (dword_1E9350E58)
      {
        CFArrayRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigHTTPRescheduleTimer(8073216000.0, *(void *)(v1 + 48), *(NSObject **)(v1 + 456));
      fbf_CancelReconnect(v1);
    }
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t FigCFHTTPResetURLAndRead(uint64_t a1, const void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8, void *a9)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v20 = 4294954511;
  }
  else
  {
    if (a2)
    {
      uint64_t v22 = a8;
      CGRect v18 = *(const void **)(DerivedStorage + 176);
      *(void *)(DerivedStorage + 176) = a2;
      CFRetain(a2);
      if (v18) {
        CFRelease(v18);
      }
      *(unsigned char *)(DerivedStorage + 378) = 1;
      uint64_t v19 = FigCFHTTPReadWithAdditionalHeaders(a1, a3, a4, a5, 0, a6, a7, v22, a9);
    }
    else
    {
      uint64_t v19 = FigSignalErrorAt();
    }
    uint64_t v20 = v19;
  }
  FigRetainProxyUnlockMutex();
  return v20;
}

uint64_t FigCFHTTPReadWithAdditionalHeaders(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8, void *a9)
{
  if (a6)
  {
    FigByteFlumeGetFigBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      uint64_t HTTPRequest = 4294954511;
      goto LABEL_64;
    }
    int v17 = *(_DWORD *)(DerivedStorage + 72);
    if (v17 == 1)
    {
      if (*(void *)(DerivedStorage + 216) <= a3) {
        goto LABEL_68;
      }
    }
    else if (v17 == 2)
    {
      goto LABEL_9;
    }
    if (*(unsigned char *)(DerivedStorage + 392))
    {
LABEL_9:
      uint64_t HTTPRequest = 4294954361;
LABEL_64:
      FigRetainProxyUnlockMutex();
      return HTTPRequest;
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    if (*(_DWORD *)(DerivedStorage + 72) == 1)
    {
      uint64_t v20 = *(void *)(DerivedStorage + 216);
      if (a4 + a3 > v20) {
        a4 = v20 - a3;
      }
    }
    CFDictionaryRef v21 = *(const __CFDictionary **)(DerivedStorage + 224);
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v21) {
      CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(v22, 0, v21);
    }
    else {
      CFMutableArrayRef MutableCopy = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFStringRef v24 = MutableCopy;
    if (MutableCopy)
    {
      if (!*(_DWORD *)(DerivedStorage + 72)) {
        fbf_ApplyCacheHeaders(DerivedStorage, MutableCopy);
      }
      if (a2) {
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)FigCFHTTPAddHeader, v24);
      }
      CFIndex v25 = malloc_type_calloc(1uLL, 0x90uLL, 0x10E0040FE5446C7uLL);
      if (v25)
      {
        uint64_t v26 = (uint64_t)v25;
        v25[27] = 1;
        *(void *)CFIndex v25 = a3;
        *((void *)v25 + 1) = a4;
        if (a7) {
          CFTypeRef v27 = CFRetain(a7);
        }
        else {
          CFTypeRef v27 = 0;
        }
        *(void *)(v26 + 40) = v27;
        *(void *)(v26 + 48) = a8;
        *(void *)(v26 + 16) = a6;
        *(void *)(v26 + 56) = FigRetainProxyRetain();
        Allocator = CMMemoryPoolGetAllocator(*(CMMemoryPoolRef *)(DerivedStorage + 368));
        if (Allocator) {
          Allocator = CFRetain(Allocator);
        }
        *(void *)(v26 + 72) = Allocator;
        *(void *)(v26 + 88) = CFRetain(v24);
        if (a5) {
          CFTypeRef v29 = CFRetain(a5);
        }
        else {
          CFTypeRef v29 = 0;
        }
        *(void *)(v26 + 96) = v29;
        uint64_t v30 = *(void *)(DerivedStorage + 80);
        *(void *)(DerivedStorage + 80) = v30 + 1;
        *(void *)(v26 + 64) = v30;
        if (!*(void *)(DerivedStorage + 56))
        {
          *(unsigned char *)(DerivedStorage + 448) = 1;
          fbf_SetInactivityMonitorTimer((void *)DerivedStorage, *(void *)(DerivedStorage + 464));
        }
        *(void *)(v26 + 128) = 0;
        CFNumberRef v31 = *(uint64_t **)(DerivedStorage + 64);
        *(void *)(v26 + 136) = v31;
        *CFNumberRef v31 = v26;
        *(void *)(DerivedStorage + 64) = v26 + 128;
        *(unsigned char *)(v26 + 126) = 1;
        if (a9) {
          *a9 = *(void *)(v26 + 64);
        }
        if (*(double *)(DerivedStorage + 576) == 0.0) {
          *(CFAbsoluteTime *)(DerivedStorage + 576) = Current;
        }
        if (*(double *)(DerivedStorage + 584) == 0.0) {
          *(CFAbsoluteTime *)(DerivedStorage + 584) = CFAbsoluteTimeGetCurrent();
        }
        *(_DWORD *)(v26 + 36) = fbf_CreateHTTPRequestFlags(DerivedStorage);
        uint64_t HTTPRequest = fbf_CreateHTTPRequest(DerivedStorage, v26, *(void *)v26, *(void *)(v26 + 8));
        *(_DWORD *)(DerivedStorage + 284) = 0;
        *(void *)(DerivedStorage + 320) = FigGetUpTimeNanoseconds();
        if (HTTPRequest)
        {
          if (!*(_DWORD *)(DerivedStorage + 72)) {
            *(_DWORD *)(DerivedStorage + 72) = 2;
          }
          int v32 = *(_DWORD *)(DerivedStorage + 44);
          if (*(unsigned char *)(DerivedStorage + 40)) {
            BOOL v33 = v32 == 1;
          }
          else {
            BOOL v33 = 0;
          }
          int v35 = v33 || v32 == 2;
          FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(DerivedStorage + 592), *(void *)(v26 + 24), *(void *)(DerivedStorage + 32), 0x1EE582C18, v35);
          uint64_t v36 = *(void *)(v26 + 24);
          if (v36)
          {
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            uint64_t v40 = *(void (**)(uint64_t))(v38 + 24);
            if (v40) {
              v40(v36);
            }
          }
          ReadRequestRelease(v26);
        }
        else
        {
          ++*(void *)(DerivedStorage + 352);
          if (!*(void *)(DerivedStorage + 88))
          {
            CFTypeRef v39 = *(CFTypeRef *)(v26 + 24);
            if (v39) {
              CFTypeRef v39 = CFRetain(v39);
            }
            *(void *)(DerivedStorage + 88) = v39;
            *(_DWORD *)(DerivedStorage + 96) = *(_DWORD *)(v26 + 32);
          }
          uint64_t HTTPRequest = 0;
          if (*(unsigned char *)(DerivedStorage + 378)) {
            *(unsigned char *)(DerivedStorage + 378) = 0;
          }
        }
      }
      else
      {
        uint64_t HTTPRequest = FigSignalErrorAt();
      }
      CFRelease(v24);
      goto LABEL_64;
    }
LABEL_68:
    uint64_t HTTPRequest = FigSignalErrorAt();
    goto LABEL_64;
  }
  return 4294954365;
}

uint64_t FigByteFlumeSetAdditionalOpenRequestHeaders(uint64_t a1, const void *a2)
{
  FigByteFlumeGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    double v4 = *(const void **)(DerivedStorage + 112);
    *(void *)(DerivedStorage + 112) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  FigRetainProxyUnlockMutex();
  return v5;
}

__CFString *FigCFHTTPCopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigHTTPSession <%p>\n", DerivedStorage);
  if (FigRetainProxyIsInvalidated())
  {
    CFStringAppend(Mutable, @" Invalidated\n");
  }
  else
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 264), @"MIME Type");
    CFStringAppend(Mutable, @" URL      : ");
    CFStringAppend(Mutable, *(CFStringRef *)(DerivedStorage + 192));
    if (*(void *)(DerivedStorage + 176))
    {
      CFStringAppend(Mutable, @"\n redirect : ");
      CFStringRef v3 = CFURLGetString(*(CFURLRef *)(DerivedStorage + 176));
      CFStringAppend(Mutable, v3);
    }
    CFStringAppend(Mutable, @"\n MIME     : ");
    CFStringAppend(Mutable, Value);
    CFStringAppendFormat(Mutable, 0, @"\n fileSize : %lld bytes\n", *(void *)(DerivedStorage + 216));
  }
  return Mutable;
}

void fbf_CancelReconnect(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 488);
  if (v2)
  {
    nw_connection_cancel(v2);
    nw_release(*(void **)(a1 + 488));
    *(void *)(a1 + 488) = 0;
  }
}

void RemoveReadRequestFromQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  double v4 = *(void **)(a2 + 136);
  if (v3)
  {
    *(void *)(v3 + 136) = v4;
    double v4 = *(void **)(a2 + 136);
  }
  else
  {
    *(void *)(a1 + 64) = v4;
  }
  *double v4 = v3;
  *(unsigned char *)(a2 + 126) = 0;
  if (*(void *)(a1 + 56)) {
    return;
  }
  *(unsigned char *)(a1 + 448) = 0;
  FigHTTPRescheduleTimer(8073216000.0, *(void *)(a1 + 48), *(NSObject **)(a1 + 456));
  if (*(unsigned char *)(a1 + 392) == 1)
  {
    if (!dword_1E9350E58) {
      return;
    }
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 18) == 1)
  {
    if (dword_1E9350E58)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(void *)(a1 + 512) = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 17) != 1) {
      return;
    }
    if (!*(void *)(a1 + 512))
    {
      if (!dword_1E9350E58) {
        return;
      }
LABEL_18:
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return;
    }
    if (dword_1E9350E58)
    {
      BOOL v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbf_ResumeRetryAttempt(a1, 0);
  }
}

void fbf_ResumeRetryAttempt(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 488)) {
    return;
  }
  if (*(unsigned char *)(a1 + 392) == 1) {
    return;
  }
  if (*(unsigned char *)(a1 + 448) == 1) {
    return;
  }
  if (*(unsigned char *)(a1 + 18) == 1) {
    return;
  }
  if (!*(unsigned char *)(a1 + 17)) {
    return;
  }
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v5 = *(void *)(a1 + 512);
  if (!v5) {
    return;
  }
  if (a2 >= 1 && UpTimeNanoseconds + a2 > v5)
  {
    double v6 = (double)a2;
LABEL_13:
    double v9 = v6 / 1000000000.0;
    uint64_t v10 = *(void *)(a1 + 48);
    int v11 = *(NSObject **)(a1 + 456);
    FigHTTPRescheduleTimer(v9, v10, v11);
    return;
  }
  BOOL v7 = v5 <= UpTimeNanoseconds;
  uint64_t v8 = v5 - UpTimeNanoseconds;
  if (!v7)
  {
    double v6 = (double)v8;
    goto LABEL_13;
  }

  fbf_TryReconnect(a1);
}

void fbf_TryReconnect(uint64_t a1)
{
  uint64_t v28 = 0;
  CFURLRef v2 = *(const __CFURL **)(a1 + 176);
  if (v2 || (CFURLRef v2 = *(const __CFURL **)(a1 + 168)) != 0)
  {
    CFStringRef v3 = CFURLCopyHostName(v2);
    if (v3)
    {
      if (CFURLGetPortNumber(v2) != -1) {
        goto LABEL_5;
      }
      CFStringRef v10 = CFURLCopyScheme(v2);
      if (v10)
      {
        CFStringRef v11 = v10;
        if (CFStringCompare(v10, @"http", 1uLL))
        {
          CFComparisonResult v12 = CFStringCompare(v11, @"https", 1uLL);
          CFRelease(v11);
          if (v12)
          {
            int v13 = -12931;
            goto LABEL_32;
          }
        }
        else
        {
          CFRelease(v11);
        }
LABEL_5:
        if (FigCFStringGetCStringPtrAndBufferToFree())
        {
          uint64_t host_with_numeric_port = nw_endpoint_create_host_with_numeric_port();
          if (host_with_numeric_port)
          {
            uint64_t v5 = host_with_numeric_port;
            nw_parameters_t secure_tcp = nw_parameters_create_secure_tcp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C90], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C88]);
            if (!secure_tcp)
            {
              int v13 = FigSignalErrorAt();
              goto LABEL_31;
            }
            BOOL v7 = secure_tcp;
            uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
            unint64_t v9 = UpTimeNanoseconds;
            if (!*(_DWORD *)(a1 + 496))
            {
              *(void *)(a1 + 504) = UpTimeNanoseconds;
              *(void *)(a1 + 440) = 0;
              *(void *)(a1 + 520) = UpTimeNanoseconds + 300000000000;
            }
            if (*(void *)(a1 + 552))
            {
              *(void *)buffer = 0;
              FigCFStringGetCStringPtrAndBufferToFree();
              nw_parameters_set_source_application_by_bundle_id();
              free(0);
            }
            else
            {
              CFDataRef v14 = *(const __CFData **)(a1 + 544);
              if (v14)
              {
                *(_OWORD *)buffer = 0u;
                long long v27 = 0u;
                if (CFDataGetLength(v14) != 32) {
                  goto LABEL_43;
                }
                CFDataRef v15 = *(const __CFData **)(a1 + 544);
                v29.length = CFDataGetLength(v15);
                v29.CFIndex location = 0;
                CFDataGetBytes(v15, v29, buffer);
                long long v24 = *(_OWORD *)buffer;
                long long v25 = v27;
                nw_parameters_set_source_application();
              }
            }
            if (*(unsigned char *)(a1 + 152))
            {
              uint64_t v16 = *(void *)(a1 + 160);
              if (!v16 || *(void *)(a1 + 216) > v16) {
                nw_parameters_prohibit_interface_type(v7, nw_interface_type_cellular);
              }
            }
            uint64_t v17 = *(void *)(a1 + 520);
            unint64_t v18 = v17 - 60000000000;
            uint64_t v19 = v17 - v9;
            if (v18 >= v9) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = 60000000000;
            }
            CFDictionaryRef v21 = nw_connection_create(v5, v7);
            *(void *)(a1 + 488) = v21;
            if (v21)
            {
              CFTypeRef v22 = *(CFTypeRef *)a1;
              if (*(void *)a1)
              {
                CFTypeRef v22 = CFRetain(*(CFTypeRef *)a1);
                CFDictionaryRef v21 = *(NSObject **)(a1 + 488);
              }
              handler[0] = MEMORY[0x1E4F143A8];
              handler[1] = 0x40000000;
              handler[2] = __fbf_TryReconnect_block_invoke;
              handler[3] = &unk_1E5794E10;
              handler[4] = v22;
              nw_connection_set_state_changed_handler(v21, handler);
              FigHTTPRescheduleTimer((double)v20 / 1000000000.0, *(void *)(a1 + 48), *(NSObject **)(a1 + 456));
              nw_connection_set_queue(*(nw_connection_t *)(a1 + 488), *(dispatch_queue_t *)(a1 + 48));
              nw_connection_start(*(nw_connection_t *)(a1 + 488));
              int v13 = 0;
              goto LABEL_30;
            }
LABEL_43:
            int v13 = FigSignalErrorAt();
LABEL_30:
            nw_release(v7);
LABEL_31:
            nw_release(v5);
            goto LABEL_32;
          }
        }
      }
    }
    int v13 = FigSignalErrorAt();
    goto LABEL_32;
  }
  int v13 = FigSignalErrorAt();
  CFStringRef v3 = 0;
LABEL_32:
  if (v28) {
    free(v28);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v13)
  {
    *(void *)(a1 + 512) = FigGetUpTimeNanoseconds() + 30000000000;
    FigHTTPRescheduleTimer(30.0, *(void *)(a1 + 48), *(NSObject **)(a1 + 456));
  }
}

void fbf_SetRetryAttemptTimer(void *a1, uint64_t a2)
{
  a1[64] = FigGetUpTimeNanoseconds() + a2;
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[57];

  FigHTTPRescheduleTimer((double)a2 / 1000000000.0, v4, v5);
}

uint64_t fbf_ReleaseAndRetainLastErrorFromCFError(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(const void **)(result + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 24) = 0;
    }
    *(void *)(v3 + 328) = 0;
    if (cf) {
      CFTypeRef v5 = CFRetain(cf);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *(void *)(v3 + 24) = v5;
    uint64_t result = FigGetUpTimeNanoseconds();
    *(void *)(v3 + 328) = result;
  }
  return result;
}

void fbf_postConnectionToHostLostNotification(uint64_t a1)
{
  if (FigByteFlumePostConnectionToHostLostNotification(a1))
  {
    fbf_ReportingAgentReportErrorEvent(a1, @"CoreMediaErrorDomain", @"Connection to host lost", 2u, -12661);
  }
}

uint64_t fbf_ReportingAgentResetErrorStats(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 32);
    if (v2)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v5 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v4 = v5;
      if (v5) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = 0;
      }
      BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v6 + 48);
      if (v7) {
        uint64_t result = v7(v2, 0x1EE582C18, 0x1EE55E678, &stru_1EE53F4B8, 0);
      }
      uint64_t v8 = *(void *)(v1 + 32);
      if (v8)
      {
        uint64_t v9 = CMBaseObjectGetVTable();
        uint64_t v11 = *(void *)(v9 + 16);
        uint64_t result = v9 + 16;
        uint64_t v10 = v11;
        if (v11) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v12 + 56);
        if (v13) {
          uint64_t result = v13(v8, 0x1EE582C18, 0x1EE55E658, 0, 0);
        }
        uint64_t v14 = *(void *)(v1 + 32);
        if (v14)
        {
          uint64_t v15 = CMBaseObjectGetVTable();
          uint64_t v17 = *(void *)(v15 + 16);
          uint64_t result = v15 + 16;
          uint64_t v16 = v17;
          if (v17) {
            uint64_t v18 = v16;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v18 + 48);
          if (v19) {
            uint64_t result = v19(v14, 0x1EE582C18, 0x1EE55E698, &stru_1EE53F4B8, 0);
          }
          uint64_t v20 = *(void *)(v1 + 32);
          if (v20)
          {
            uint64_t v21 = CMBaseObjectGetVTable();
            uint64_t v23 = *(void *)(v21 + 16);
            uint64_t result = v21 + 16;
            uint64_t v22 = v23;
            uint64_t v24 = v23 ? v22 : 0;
            long long v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v24 + 56);
            if (v25)
            {
              return v25(v20, 0x1EE582C18, 0x1EE55E6B8, 0, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

void fbf_ReportingAgentReportErrorEvent(uint64_t a1, const __CFString *a2, CFStringRef a3, unsigned int a4, CFIndex a5)
{
  if (!a1) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6) {
    return;
  }
  uint64_t v9 = *(__CFError **)(a1 + 24);
  if (v9)
  {
    CFIndex Code = CFErrorGetCode(v9);
    CFErrorDomain Domain = CFErrorGetDomain(*(CFErrorRef *)(a1 + 24));
    CFStringRef v12 = CFErrorCopyDescription(*(CFErrorRef *)(a1 + 24));
    CFStringRef v13 = v12;
    uint64_t v6 = *(void *)(a1 + 32);
    BOOL v14 = v12 == 0;
    if (v12) {
      a3 = v12;
    }
    if (!v6) {
      goto LABEL_14;
    }
  }
  else
  {
    CFIndex Code = a5;
    CFErrorDomain Domain = a2;
    CFStringRef v13 = 0;
    BOOL v14 = 1;
  }
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v16 + 48);
  if (v17) {
    v17(v6, 0x1EE582C18, 0x1EE55E678, a3, 0);
  }
LABEL_14:
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18)
  {
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFIndex, void))(v20 + 56);
    if (v21) {
      v21(v18, 0x1EE582C18, 0x1EE55E658, Code, 0);
    }
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22)
    {
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      long long v25 = *(void (**)(uint64_t, uint64_t, uint64_t, CFErrorDomain, void))(v24 + 48);
      if (v25) {
        v25(v22, 0x1EE582C18, 0x1EE55E698, Domain, 0);
      }
      uint64_t v26 = *(void *)(a1 + 32);
      if (v26)
      {
        uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v27) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = 0;
        }
        CFRange v29 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v28 + 56);
        if (v29) {
          v29(v26, 0x1EE582C18, 0x1EE55E6B8, a4, 0);
        }
        uint64_t v30 = *(void *)(a1 + 32);
        if (v30)
        {
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v32 = v31 ? v31 : 0;
          BOOL v33 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v32 + 8);
          if (v33) {
            v33(v30, 0x1EE582C18, 502, 0, 0);
          }
        }
      }
    }
  }
  if (!v14)
  {
    CFRelease(v13);
  }
}

uint64_t FigCFHTTPCopyBandwidthInfo(uint64_t a1, double *a2, double *a3, double *a4)
{
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (a1)
  {
    uint64_t v9 = UpTimeNanoseconds;
    if (a2 || a3 || a4)
    {
      FigRetainProxyLockMutex();
      if (FigRetainProxyIsInvalidated())
      {
        uint64_t v10 = 4294954511;
LABEL_27:
        FigRetainProxyUnlockMutex();
        return v10;
      }
      if (*(void *)(a1 + 56) && *(_DWORD *)(a1 + 284) && (unint64_t)(v9 - *(void *)(a1 + 320)) >= 0xEE6B2801)
      {
        FigByteRateHistoryClear(*(void *)(a1 + 344));
        if (a2) {
          *a2 = 0.0;
        }
        if (a3) {
          *a3 = 0.0;
        }
        if (a4)
        {
          uint64_t v10 = 0;
LABEL_24:
          *a4 = 0.0;
          goto LABEL_27;
        }
      }
      else
      {
        if (!FigByteRateHistoryHasCompleteSample(*(void *)(a1 + 344))
          && *(void *)(a1 + 288) < *(uint64_t *)(a1 + 216) >> 2)
        {
          uint64_t v12 = 0;
          double v13 = 0.0;
          FigByteRateHistoryReportAverage(*(void *)(a1 + 344), &v13, (double *)&v12);
          if (v13 <= 0.0)
          {
            uint64_t v10 = 4294954513;
            goto LABEL_27;
          }
          if (a2) {
            *a2 = v13;
          }
          if (a3) {
            *(void *)a3 = v12;
          }
          uint64_t v10 = 0;
          if (!a4) {
            goto LABEL_27;
          }
          goto LABEL_24;
        }
        FigByteRateHistoryReportAverage(*(void *)(a1 + 344), a2, a3);
        FigByteRateHistoryReportMovingAverage(*(void *)(a1 + 344), a4);
      }
      uint64_t v10 = 0;
      goto LABEL_27;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fbf_CreateAccessLog(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  double valuePtr = 0.0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v35 = 4294954511;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      BOOL v7 = Mutable;
      CFDictionaryAddValue(Mutable, @"s-playback-type", @"FILE");
      uint64_t v8 = *(const void **)(a1 + 560);
      if (v8) {
        CFDictionarySetValue(v7, @"c-client-name", v8);
      }
      CFDataRef v9 = *(const __CFData **)(a1 + 136);
      uint64_t v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      if (v9)
      {
        CFDataRef v11 = FigCFHTTPCreateAddressString(v9);
        if (v11)
        {
          CFDataRef v12 = v11;
          CFDictionaryAddValue(v7, @"s-ip", v11);
          CFRelease(v12);
        }
        CFAllocatorRef v13 = *v10;
        CFNumberRef v14 = CFNumberCreate(*v10, kCFNumberCFIndexType, (const void *)(a1 + 144));
        if (v14)
        {
          CFNumberRef v15 = v14;
          CFDictionaryAddValue(v7, @"s-ip-changes", v14);
          CFRelease(v15);
        }
      }
      else
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      }
      double valuePtr = (double)*(uint64_t *)(a1 + 312) / 1000000000.0;
      CFNumberRef v16 = CFNumberCreate(v13, kCFNumberDoubleType, &valuePtr);
      if (v16)
      {
        CFNumberRef v17 = v16;
        CFDictionaryAddValue(v7, @"c-transfer-duration", v16);
        CFRelease(v17);
      }
      CFNumberRef v18 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 288));
      if (v18)
      {
        CFNumberRef v19 = v18;
        CFDictionaryAddValue(v7, @"bytes", v18);
        CFRelease(v19);
      }
      if (*(uint64_t *)(a1 + 296) >= 1)
      {
        CFNumberRef v20 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 296));
        if (v20)
        {
          CFNumberRef v21 = v20;
          CFDictionaryAddValue(v7, @"bytes-cellular", v20);
          CFRelease(v21);
        }
        if (*(uint64_t *)(a1 + 304) >= 1)
        {
          CFNumberRef v22 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 304));
          if (v22)
          {
            CFNumberRef v23 = v22;
            CFDictionaryAddValue(v7, @"bytes-cellular-fallback", v22);
            CFRelease(v23);
          }
        }
      }
      CFNumberRef v24 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 352));
      if (v24)
      {
        CFNumberRef v25 = v24;
        CFDictionaryAddValue(v7, @"sc-count", v24);
        CFRelease(v25);
      }
      CFNumberRef v26 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 360));
      if (v26)
      {
        CFNumberRef v27 = v26;
        CFDictionaryAddValue(v7, @"sc-wwan-count", v26);
        CFRelease(v27);
      }
      CFURLRef v28 = *(const __CFURL **)(a1 + 176);
      if (!v28) {
        CFURLRef v28 = *(const __CFURL **)(a1 + 168);
      }
      CFTypeRef v29 = FigCFHTTPCreateURLString(v28);
      if (v29)
      {
        uint64_t v30 = v29;
        CFDictionaryAddValue(v7, @"uri", v29);
        CFRelease(v30);
      }
      CFDictionaryRef v31 = *(const __CFDictionary **)(a1 + 224);
      if (v31)
      {
        CFStringRef Value = CFDictionaryGetValue(v31, @"X-Playback-Session-Id");
        if (Value) {
          CFDictionaryAddValue(v7, @"cs-guid", Value);
        }
      }
      if (*(double *)(a1 + 576) > 0.0) {
        FigCFDictionarySetDouble();
      }
      if (*(double *)(a1 + 584) > 0.0) {
        FigCFDictionarySetDouble();
      }
      if (*(uint64_t *)(a1 + 336) >= 1) {
        FigCFDictionarySetInt32();
      }
      BOOL v33 = FigNetworkInterfaceReporterCopyPhysicalStatistics(*(void *)(a1 + 592));
      if (v33)
      {
        int v34 = v33;
        FigAccessLogUpdateWithPhysicalStatistcs(v7, v33);
        CFRelease(v34);
      }
      uint64_t v35 = 0;
      *a3 = v7;
    }
    else
    {
      uint64_t v35 = 4294954510;
    }
  }
  FigRetainProxyUnlockMutex();
  return v35;
}

__CFString *fbf_GetInterfaceType(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      CFTypeRef cf = 0;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v5 + 48);
      if (v6)
      {
        int v7 = v6(v3, 0x1EE57B6B8, *MEMORY[0x1E4F1CF80], &cf);
        CFTypeRef v8 = cf;
        if (v7)
        {
          int InterfaceTypeFromCFNStats = 0;
          if (!cf) {
            goto LABEL_10;
          }
        }
        else
        {
          int InterfaceTypeFromCFNStats = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)cf);
          CFTypeRef v8 = cf;
          if (!cf)
          {
LABEL_10:
            if (InterfaceTypeFromCFNStats) {
              return FigErrorLogGetStringFromInterfaceType(InterfaceTypeFromCFNStats);
            }
            goto LABEL_11;
          }
        }
        CFRelease(v8);
        goto LABEL_10;
      }
    }
  }
LABEL_11:
  int InterfaceTypeFromCFNStats = FigNetworkInterfaceReporterGetInterfaceType(*(unsigned char **)(a1 + 592));
  if (!InterfaceTypeFromCFNStats)
  {
    if (*(void *)(a1 + 408)) {
      int InterfaceTypeFromCFNStats = FigNetworkPathInformationGetInterfaceType();
    }
    else {
      int InterfaceTypeFromCFNStats = 0;
    }
  }
  return FigErrorLogGetStringFromInterfaceType(InterfaceTypeFromCFNStats);
}

void fbf_releaseInteractivePlaybackAssertion(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    if (dword_1E9350E58)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v4 = *(_DWORD *)(DerivedStorage + 380) - 1;
    *(_DWORD *)(DerivedStorage + 380) = v4;
    if (!v4 && (*(unsigned char *)(DerivedStorage + 17) || *(unsigned char *)(DerivedStorage + 392)))
    {
      if (dword_1E9350E58)
      {
        uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fbf_FailImmediately(DerivedStorage);
    }
  }
  FigRetainProxyUnlockMutex();
  if (a1) {
    CFRelease(a1);
  }
}

void fbf_FailImmediately(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 448)) {
    FigHTTPRescheduleTimer(8073216000.0, *(void *)(a1 + 48), *(NSObject **)(a1 + 456));
  }
  fbf_CancelReconnect(a1);
  *(void *)(a1 + 512) = 0;
  if (!*(unsigned char *)(a1 + 17))
  {
    if (dword_1E9350E58)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(a1 + 17) = 1;
    FigByteFlumePostHostUnavailableNotification(a1);
  }
  if (!*(unsigned char *)(a1 + 18))
  {
    if (dword_1E9350E58)
    {
      uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbf_postConnectionToHostLostNotification(a1);
  }
}

const void *FigCFHTTPMatchesIdentifier(uint64_t a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  FigByteFlumeGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(DerivedStorage + 216);
  CFStringRef v7 = *(const __CFString **)(DerivedStorage + 192);
  int v8 = *(_DWORD *)(DerivedStorage + 528);
  CFDictionaryRef v9 = *(const __CFDictionary **)(DerivedStorage + 264);

  return FigCFHTTPMatchCacheHeaders((const __CFDictionary *)cf, v6, v7, v8, v9);
}

uint64_t FigCFHTTPOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      uint64_t v25 = 4294954511;
    }
    else
    {
      if (!*(_DWORD *)(DerivedStorage + 72))
      {
        *(void *)(DerivedStorage + 104) = a2;
        *(void *)(DerivedStorage + 120) = a3;
        CFDictionaryRef v6 = *(const __CFDictionary **)(DerivedStorage + 112);
        uint64_t v7 = CMBaseObjectGetDerivedStorage();
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDictionaryRef v9 = *(const __CFDictionary **)(v7 + 224);
        uint64_t v10 = *MEMORY[0x1E4F1CF80];
        if (v9) {
          CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v9);
        }
        else {
          CFMutableArrayRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        CFDataRef v12 = MutableCopy;
        if (!MutableCopy)
        {
          *(_DWORD *)(v7 + 72) = 2;
          *(unsigned char *)(v7 + 384) = 0;
          *(void *)(v7 + 104) = 0;
          *(void *)(v7 + 120) = 0;
          uint64_t v25 = 4294954363;
LABEL_36:
          CFNumberRef v26 = *(const void **)(DerivedStorage + 112);
          if (v26)
          {
            CFRelease(v26);
            *(void *)(DerivedStorage + 112) = 0;
          }
          goto LABEL_38;
        }
        fbf_ApplyCacheHeaders(v7, MutableCopy);
        if (v6) {
          CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)FigCFHTTPAddHeader, v12);
        }
        if (*(unsigned char *)(v7 + 532)) {
          unsigned int v13 = 17;
        }
        else {
          unsigned int v13 = 1;
        }
        if (!*(unsigned char *)(v7 + 248)) {
          v13 |= 0x40u;
        }
        if (*(unsigned char *)(v7 + 632)) {
          v13 |= 0x8000u;
        }
        if (*(unsigned char *)(v7 + 633)) {
          uint64_t v14 = v13 | 0x10000;
        }
        else {
          uint64_t v14 = v13;
        }
        if (*(double *)(v7 + 576) == 0.0) {
          *(CFAbsoluteTime *)(v7 + 576) = Current;
        }
        if (*(double *)(v7 + 584) == 0.0) {
          *(CFAbsoluteTime *)(v7 + 584) = CFAbsoluteTimeGetCurrent();
        }
        OptionsAndSetNWActiviCGFloat ty = (const void *)fbf_CopyHttpRequestCreateOptionsAndSetNWActivity(v7, 2);
        *(unsigned char *)(v7 + 384) = 1;
        uint64_t v16 = *(void *)(v7 + 240);
        uint64_t v17 = *(void *)(v7 + 168);
        uint64_t v18 = *(void *)(v7 + 200);
        uint64_t v19 = *(void *)v7;
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        CFNumberRef v22 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __CFDictionary *, const void *, uint64_t, _OWORD *, void, uint64_t, void, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t), uint64_t, uint64_t, uint64_t))(v21 + 8);
        if (v22)
        {
          memset(v28, 0, 112);
          uint64_t v23 = v22(v16, v10, 0, v17, v18, v12, OptionsAndSetNWActivity, v14, v28, 0, 2, 0, FigCFHTTPOpenResponse, v19, v7 + 88, v7 + 96);
          if (!v23)
          {
            FigNetworkUrgencyMonitorAddHTTPRequest(*(void *)(v7 + 624), *(void *)(v7 + 88));
            if (dword_1E9350E58)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v25 = 0;
            goto LABEL_34;
          }
          uint64_t v25 = v23;
        }
        else
        {
          uint64_t v25 = 4294954514;
        }
        *(_DWORD *)(v7 + 72) = 2;
        *(unsigned char *)(v7 + 384) = 0;
        *(void *)(v7 + 104) = 0;
        *(void *)(v7 + 120) = 0;
LABEL_34:
        CFRelease(v12);
        if (OptionsAndSetNWActivity) {
          CFRelease(OptionsAndSetNWActivity);
        }
        goto LABEL_36;
      }
      uint64_t v25 = FigSignalErrorAt();
    }
LABEL_38:
    FigRetainProxyUnlockMutex();
    return v25;
  }

  return FigSignalErrorAt();
}

void fbf_ApplyCacheHeaders(uint64_t a1, __CFDictionary *a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 272);
  if (v3)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v3, @"ETag");
    if (Value)
    {
      CFStringRef v6 = Value;
      CFBooleanRef v7 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), @"ETag weak");
      if (v7)
      {
        int v8 = CFBooleanGetValue(v7);
        CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        uint64_t v10 = Mutable;
        if (v8) {
          CFStringAppend(Mutable, @"W/");
        }
      }
      else
      {
        uint64_t v10 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      }
      CFStringAppend(v10, v6);
      CFDictionaryAddValue(a2, @"If-None-Match", v10);
      CFRelease(v10);
    }
    CFDataRef v11 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), @"Last-Modified");
    if (v11)
    {
      CFDictionaryAddValue(a2, @"If-Modified-Since", v11);
    }
  }
}

void FigCFHTTPAddHeader(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t fbf_CopyHttpRequestCreateOptionsAndSetNWActivity(uint64_t a1, int a2)
{
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if ((a2 - 2) <= 2)
  {
    uint64_t v5 = nw_activity_create();
    if (v5)
    {
      CFStringRef v6 = (const void *)v5;
      if (*(void *)(a1 + 600)) {
        nw_activity_set_parent_activity();
      }
      FigCFDictionarySetValue();
      CFRelease(v6);
    }
  }
  CFNumberRef v7 = (const __CFNumber *)FigNetworkUrgencyMonitorCopyExpectedProgressTarget(*(void *)(a1 + 624));
  if (v7)
  {
    CFNumberRef v8 = v7;
    uint64_t valuePtr = 0;
    CFNumberGetValue(v7, kCFNumberSInt64Type, &valuePtr);
    FigGetContinuousUpTimeNanoseconds();
    FigCFDictionarySetValue();
    CFRelease(v8);
  }
  return MutableCopy;
}

uint64_t fbf_ReleaseAndCreateLastError(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    CFNumberRef v7 = (void *)result;
    CFNumberRef v8 = *(const void **)(result + 24);
    if (v8)
    {
      CFRelease(v8);
      void v7[3] = 0;
    }
    v7[41] = 0;
    void v7[3] = FigCreateCFError(a3, a2, a4, 0, 0, v7[21], 0);
    uint64_t result = FigGetUpTimeNanoseconds();
    v7[41] = result;
  }
  return result;
}

void fbf_ConfigurePathEvaluator(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 400))
  {
    CFTypeID v4 = (uint64_t *)(a1 + 400);
    CFMutableDictionaryRef OptionsFromHTTPRequestOptions = FigByteFlumeCreateNetworkPathEvaluatorCreateOptionsFromHTTPRequestOptions(*(void *)(a1 + 568));
    uint64_t v6 = *(void *)(a1 + 176);
    if (!v6) {
      uint64_t v6 = *(void *)(a1 + 168);
    }
    if (!FigNetworkPathEvaluatorCreate(*MEMORY[0x1E4F1CF80], v6, OptionsFromHTTPRequestOptions, *(void *)(a1 + 48), a2, fbf_UpdatePathEvaluation, v4))
    {
      CFNumberRef v7 = *(const void **)(a1 + 408);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 408) = 0;
      }
      uint64_t v8 = *v4;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFDataRef v11 = *(uint64_t (**)(uint64_t))(v10 + 8);
      if (v11) {
        uint64_t v12 = v11(v8);
      }
      else {
        uint64_t v12 = 0;
      }
      *(void *)(a1 + 408) = v12;
      *(_DWORD *)(a1 + 416) = 0;
      if (dword_1E9350E58)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (OptionsFromHTTPRequestOptions) {
      CFRelease(OptionsFromHTTPRequestOptions);
    }
  }
}

void fbf_GetResponseProperties(uint64_t a1, void *a2)
{
  CFTypeID v4 = a2 + 32;
  uint64_t v5 = (const void *)a2[32];
  if (v5)
  {
    *CFTypeID v4 = 0;
    CFRelease(v5);
  }
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v8 + 48);
  if (v9) {
    v9(a1, 0x1EE57B5F8, v6, v4);
  }
  uint64_t v10 = (const void *)a2[22];
  if (v10)
  {
    a2[22] = 0;
    CFRelease(v10);
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v12 + 48);
  if (v13) {
    v13(a1, 0x1EE57B618, v6, a2 + 22);
  }
  uint64_t v14 = (const void *)a2[17];
  if (v14)
  {
    a2[17] = 0;
    CFRelease(v14);
  }
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v16 + 48);
  if (v17) {
    v17(a1, 0x1EE57B698, v6, a2 + 17);
  }

  fbf_ReportingAgentSetServerAddress((uint64_t)a2);
}

void fbf_ReportingAgentSetCDNHeaders(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2 && *(void *)(a1 + 32))
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v5 + 48);
    if (v6)
    {
      v6(a2, 0x1EE57B5F8, *MEMORY[0x1E4F1CF80], &cf);
      if (cf)
      {
        fbf_ReportingAgentSetHTTPHeaderField(a1, (CFHTTPMessageRef)cf, @"Via", 0x1EE584BD8);
        fbf_ReportingAgentSetHTTPHeaderField(a1, (CFHTTPMessageRef)cf, @"CDN-Server", 0x1EE584EF8);
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
}

void fbf_ReleaseAndSetLastErrorFromHTTPRequest(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  if (a1 && a2 && a4)
  {
    *a4 = 0;
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
    if (v11 && (v11(a2, 0x1EE57B638, v8, &v17), v17))
    {
      fbf_ReleaseAndRetainLastErrorFromCFError(a1, v17);
      *a4 = 1;
    }
    else
    {
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 48);
      if (v14)
      {
        v14(a2, 0x1EE57B658, v8, &cf);
        CFTypeRef v15 = cf;
      }
      else
      {
        CFTypeRef v15 = 0;
      }
      fbf_ReleaseAndCreateLastError(a1, a3, @"CoreMediaErrorDomain", (uint64_t)v15);
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  if (v17) {
    CFRelease(v17);
  }
}

BOOL fbf_httpRequestHandlesNetworkTransitions(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v3 + 48);
  if (v4)
  {
    v4(a1, 0x1EE57B7B8, *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v5 = cf;
    CFTypeRef v6 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    CFTypeRef v5 = 0;
    CFTypeRef v6 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  }
  return v6 == v5;
}

uint64_t fbf_UpdateAndReportMultiPathActivity(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 616);
  switch(v2)
  {
    case 5:
      if (!a2) {
        return result;
      }
      break;
    case 4:
      if (a2) {
        return result;
      }
      break;
    case 3:
      if (a2) {
        uint64_t v3 = 4;
      }
      else {
        uint64_t v3 = 5;
      }
      goto LABEL_11;
    default:
      return result;
  }
  uint64_t v3 = 6;
LABEL_11:
  *(void *)(result + 616) = v3;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v7 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v6 = v7;
    uint64_t v8 = v7 ? v6 : 0;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v8 + 56);
    if (v9)
    {
      return v9(v4, 0x1EE582C18, 0x1EE584CF8, v3, 0);
    }
  }
  return result;
}

uint64_t fbf_ParseResponseHeadersAndSetLastError(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t valuePtr = 0;
  unsigned __int8 v37 = 0;
  CFTypeRef v5 = *(__CFHTTPMessage **)(a2 + 256);
  if (!v5 || !*(void *)(a2 + 176))
  {
    uint64_t v9 = FigSignalErrorAt();
    uint64_t v10 = @"no response or URL";
    uint64_t v11 = a2;
    int v12 = -12931;
    goto LABEL_14;
  }
  ResponseStatusCFIndex Code = CFHTTPMessageGetResponseStatusCode(v5);
  if (ResponseStatusCode == 200) {
    goto LABEL_6;
  }
  CFIndex v8 = ResponseStatusCode;
  if (ResponseStatusCode == 304)
  {
    if (FigCFHTTPGetContentRangeFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), 0, 0, &valuePtr, &v37)&& v37)
    {
      *(void *)(a2 + 216) = valuePtr;
    }
    CFDictionaryRef v13 = *(const __CFDictionary **)(a2 + 272);
    if (v13)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v13, @"Size");
      if (!Value)
      {
LABEL_22:
        fbf_ReleaseAndCreateLastError(a2, -12936, @"CoreMediaErrorDomain", @"Unable to get Cache Headers");
        return 0;
      }
      CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
      if (v37)
      {
        if (valuePtr != *(void *)(a2 + 216)) {
          goto LABEL_22;
        }
      }
      else
      {
        *(void *)(a2 + 216) = valuePtr;
      }
      *(unsigned char *)(a2 + 280) = 1;
    }
    uint64_t v20 = (CFDictionaryRef *)(a2 + 264);
    uint64_t v21 = *(const void **)(a2 + 264);
    if (v21)
    {
      *uint64_t v20 = 0;
      CFRelease(v21);
    }
    CFStringRef v22 = *(const __CFString **)(a2 + 192);
    uint64_t v23 = *(void *)(a2 + 216);
    CFNumberRef v24 = *(__CFHTTPMessage **)(a2 + 256);
    CFDictionaryRef v25 = *(const __CFDictionary **)(a2 + 272);
LABEL_47:
    uint64_t v30 = FigCFHTTPCreateCacheHeaders(v22, v23, v24, v25, v20);
    if (v30)
    {
      uint64_t v9 = v30;
      uint64_t v10 = @"Unable to create Cache Headers";
      uint64_t v11 = a2;
      int v12 = -12936;
      goto LABEL_14;
    }
    uint64_t v9 = *(void *)(a2 + 32);
    if (!v9) {
      return v9;
    }
    uint64_t v31 = *(void *)(a2 + 216);
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    int v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v33 + 56);
    if (v34) {
      v34(v9, 0x1EE582C18, 0x1EE55E018, (uint64_t)(round((double)v31 / 1000.0) * 1000.0), 0);
    }
    return 0;
  }
  if (ResponseStatusCode == 206)
  {
LABEL_6:
    if (a3)
    {
      if (!FigCFHTTPGetContentRangeFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), &v40, &v39, &valuePtr, &v37)|| !v37|| v40|| v39 != 1)
      {
        uint64_t v9 = FigSignalErrorAt();
        uint64_t v10 = @"HTTP response has bad Content-Range";
LABEL_12:
        uint64_t v11 = a2;
        int v12 = v9;
LABEL_14:
        fbf_ReleaseAndCreateLastError(v11, v12, @"CoreMediaErrorDomain", (uint64_t)v10);
        return v9;
      }
    }
    else if (FigCFHTTPIsDataURL(*(const __CFURL **)(a2 + 168)))
    {
      CFNumberRef number = 0;
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      CFNumberRef v26 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v18 + 48);
      if (v26)
      {
        int v27 = v26(a1, @"FHRP_PayloadLength", AllocatorForMedia, &number);
        CFNumberRef v28 = number;
        if (!v27)
        {
          CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
          CFNumberRef v28 = number;
        }
        if (v28) {
          CFRelease(v28);
        }
      }
      unsigned __int8 v37 = 1;
    }
    else
    {
      if (FigCFHTTPGetContentRangeFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), 0, 0, &valuePtr, &v37))
      {
        unsigned int v19 = v37;
      }
      else
      {
        unsigned int v19 = FigCFHTTPGetContentLengthFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), &valuePtr);
        unsigned __int8 v37 = v19;
      }
      if (!v19)
      {
        uint64_t v9 = FigSignalErrorAt();
        uint64_t v10 = @"HTTP response has bad Content-Length";
        goto LABEL_12;
      }
    }
    uint64_t v23 = valuePtr;
    *(void *)(a2 + 216) = valuePtr;
    uint64_t v20 = (CFDictionaryRef *)(a2 + 264);
    uint64_t v29 = *(const void **)(a2 + 264);
    if (v29)
    {
      *(void *)(a2 + 264) = 0;
      CFRelease(v29);
      uint64_t v23 = *(void *)(a2 + 216);
    }
    CFStringRef v22 = *(const __CFString **)(a2 + 192);
    CFNumberRef v24 = *(__CFHTTPMessage **)(a2 + 256);
    CFDictionaryRef v25 = 0;
    goto LABEL_47;
  }
  uint64_t v9 = FigSignalErrorAt();
  CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"HTTP response code: %ld", v8);
  fbf_ReleaseAndCreateLastError(a2, v8, @"CoreMediaErrorDomain", (uint64_t)v15);
  if (v15) {
    CFRelease(v15);
  }
  return v9;
}

uint64_t fbf_UpdatePathEvaluation(uint64_t result, const void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    FigRetainProxyRetain();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
LABEL_62:
      FigRetainProxyUnlockMutex();
      return FigRetainProxyRelease();
    }
    FigRetainProxyGetOwner();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int v5 = *(_DWORD *)(DerivedStorage + 388);
    BOOL IsCellular = FigNetworkInterfaceIsCellular(v5);
    Interfaceuint64_t Type = FigNetworkPathInformationGetInterfaceType();
    int DoesUseCellular = FigNetworkPathInformationDoesUseCellular();
    if (dword_1E9350E58)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(unsigned char *)(DerivedStorage + 448)) {
      FigHTTPRescheduleTimer(8073216000.0, *(void *)(DerivedStorage + 48), *(NSObject **)(DerivedStorage + 456));
    }
    fbf_CancelReconnect(DerivedStorage);
    if (*(unsigned char *)(DerivedStorage + 152))
    {
      uint64_t v9 = *(void *)(DerivedStorage + 160);
      if (v9) {
        char v10 = *(void *)(DerivedStorage + 216) <= v9;
      }
      else {
        char v10 = 0;
      }
    }
    else
    {
      char v10 = 1;
    }
    int IsHostReachable = FigNetworkPathInformationIsHostReachable((uint64_t)a2, v10);
    int v12 = *(unsigned __int8 *)(DerivedStorage + 392);
    if (!IsHostReachable)
    {
      if (!*(unsigned char *)(DerivedStorage + 392))
      {
        if (dword_1E9350E58)
        {
          uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(unsigned char *)(DerivedStorage + 392) = 1;
        *(void *)(DerivedStorage + 424) = FigGetUpTimeNanoseconds();
        if (!*(unsigned char *)(DerivedStorage + 17)) {
          FigByteFlumePostHostUnavailableNotification(DerivedStorage);
        }
        goto LABEL_58;
      }
      if (dword_1E9350E58)
      {
LABEL_18:
        CFStringRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_58:
      CFStringRef v22 = *(const void **)(DerivedStorage + 408);
      *(void *)(DerivedStorage + 408) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v22) {
        CFRelease(v22);
      }
      goto LABEL_62;
    }
    if (*(unsigned char *)(DerivedStorage + 392))
    {
      uint64_t v13 = FigGetUpTimeNanoseconds() - *(void *)(DerivedStorage + 424);
      if (dword_1E9350E58)
      {
        uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(unsigned char *)(DerivedStorage + 392) = 0;
      *(void *)(DerivedStorage + 440) += v13;
      *(void *)(DerivedStorage + 520) += v13;
      goto LABEL_39;
    }
    if (*(unsigned char *)(DerivedStorage + 533)
      && (unint64_t)(*(void *)(DerivedStorage + 616) - 5) >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (!dword_1E9350E58) {
        goto LABEL_39;
      }
    }
    else
    {
      if (!*(unsigned char *)(DerivedStorage + 384) || *(unsigned char *)(DerivedStorage + 385))
      {
        uint64_t v16 = *(void *)(DerivedStorage + 56);
        if (!v16)
        {
LABEL_27:
          if (*(unsigned char *)(DerivedStorage + 16) == 1)
          {
            if (!IsCellular || DoesUseCellular)
            {
              if (v5 && v5 != InterfaceType) {
                fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded(DerivedStorage, v3);
              }
            }
            else
            {
              if (dword_1E9350E58)
              {
                uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              fbf_postHostAvailableOnBetterInterfaceNotification(DerivedStorage);
            }
          }
LABEL_39:
          if (*(unsigned char *)(DerivedStorage + 18) != 1)
          {
            if (*(unsigned char *)(DerivedStorage + 17) == 1)
            {
              if (!FigNetworkInterfaceIsProxied(InterfaceType))
              {
                if (dword_1E9350E58)
                {
                  uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                fbf_ResumeRetryAttempt(DerivedStorage, 1000000000);
                goto LABEL_58;
              }
              if (dword_1E9350E58)
              {
                uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else if (!v12)
            {
              goto LABEL_58;
            }
            if (FigByteFlumePostHostAvailableNotification(DerivedStorage)) {
              fbf_ReportingAgentResetErrorStats(DerivedStorage);
            }
            goto LABEL_58;
          }
          if (dword_1E9350E58) {
            goto LABEL_18;
          }
          goto LABEL_58;
        }
        while (!*(void *)(v16 + 24) || *(unsigned char *)(v16 + 104))
        {
          uint64_t v16 = *(void *)(v16 + 128);
          if (!v16) {
            goto LABEL_27;
          }
        }
      }
      if (!dword_1E9350E58) {
        goto LABEL_39;
      }
    }
    unsigned int v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_39;
  }
  return result;
}

uint64_t fbf_postHostAvailableOnBetterInterfaceNotification(uint64_t a1)
{
  uint64_t result = FigByteFlumePostHostAvailableOnBetterInterfaceNotification(a1);
  if (result)
  {
    return fbf_ReportingAgentResetErrorStats(a1);
  }
  return result;
}

void fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(void *)(a1 + 432) + 1000000000 >= UpTimeNanoseconds)
  {
    if (dword_1E9350E58)
    {
      int v11 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    *(void *)(a1 + 432) = UpTimeNanoseconds;
    if (dword_1E9350E58)
    {
      int v11 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    dispatch_time_t v7 = dispatch_time(0, 1000000000);
    CFIndex v8 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded_block_invoke;
    block[3] = &unk_1E5794E38;
    block[4] = a2;
    dispatch_after(v7, v8, block);
  }
}

uint64_t __fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded_block_invoke()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    FigRetainProxyGetOwner();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigByteFlumePostHostAvailableOnBetterInterfaceNotification(DerivedStorage)) {
      fbf_ReportingAgentResetErrorStats(DerivedStorage);
    }
  }
  FigRetainProxyUnlockMutex();

  return FigRetainProxyRelease();
}

void fbf_ReportingAgentSetServerAddress(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 32))
    {
      CFDataRef v2 = *(const __CFData **)(a1 + 136);
      if (v2)
      {
        CFDataRef v3 = FigCFHTTPCreateAddressString(v2);
        if (v3)
        {
          CFDataRef v4 = v3;
          uint64_t v5 = *(void *)(a1 + 32);
          if (v5)
          {
            uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v7 = v6 ? v6 : 0;
            CFIndex v8 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFData *, void))(v7 + 48);
            if (v8) {
              v8(v5, 0x1EE582C18, 0x1EE583D78, v4, 0);
            }
          }
          CFRelease(v4);
        }
      }
    }
  }
}

void fbf_ReportingAgentSetHTTPHeaderField(uint64_t a1, CFHTTPMessageRef message, CFStringRef headerField, uint64_t a4)
{
  if (message)
  {
    if (headerField)
    {
      CFStringRef v6 = CFHTTPMessageCopyHeaderFieldValue(message, headerField);
      if (v6)
      {
        CFStringRef v7 = v6;
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8)
        {
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v10 = v9 ? v9 : 0;
          int v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v10 + 48);
          if (v11) {
            v11(v8, 0x1EE582C18, a4, v7, 0);
          }
        }
        CFRelease(v7);
      }
    }
  }
}

void fbf_SetInactivityMonitorTimer(void *a1, uint64_t a2)
{
  fbf_CancelReconnect((uint64_t)a1);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v5 = a1[40];
  a1[59] = UpTimeNanoseconds + a2;
  a1[60] = v5;
  uint64_t v6 = a1[6];
  CFStringRef v7 = a1[57];

  FigHTTPRescheduleTimer((double)a2 / 1000000000.0, v6, v7);
}

uint64_t fbf_CreateHTTPRequestFlags(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 532)) {
    unsigned int v1 = 17;
  }
  else {
    unsigned int v1 = 1;
  }
  if (!*(unsigned char *)(a1 + 248)) {
    v1 |= 0x40u;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void *)(a1 + 160);
    if (!v2 || (uint64_t v3 = *(void *)(a1 + 216), v3 > v2))
    {
      v1 |= 0x180u;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 216);
  }
  if (v3 > 10485760 && *(uint64_t *)(a1 + 288) > 10240) {
    v1 |= 0x100u;
  }
LABEL_14:
  if (*(unsigned char *)(a1 + 153)) {
    v1 |= 0x800u;
  }
  if (*(unsigned char *)(a1 + 154)) {
    return v1 | 0x1000;
  }
  else {
    return v1;
  }
}

uint64_t fbf_CreateHTTPRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 378))
  {
    CFStringRef v7 = *(const void **)(a2 + 80);
    uint64_t v8 = *(const void **)(a1 + 176);
    *(void *)(a2 + 80) = v8;
    if (v8) {
      CFRetain(v8);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  if (!v6)
  {
    if (*(unsigned char *)(a1 + 184) && (uint64_t v13 = *(const void **)(a1 + 176)) != 0)
    {
      uint64_t v14 = *(const void **)(a2 + 80);
      *(void *)(a2 + 80) = v13;
      CFRetain(v13);
      if (v14) {
        CFRelease(v14);
      }
    }
    else if (!*(void *)(a2 + 80))
    {
      int v27 = *(const void **)(a1 + 168);
      *(void *)(a2 + 80) = v27;
      if (v27) {
        CFRetain(v27);
      }
    }
  }
  FigCFDictionaryGetIntIfPresent();
  OptionsAndSetNWActiviCGFloat ty = (const void *)fbf_CopyHttpRequestCreateOptionsAndSetNWActivity(a1, 0);
  uint64_t v10 = *(void *)(a1 + 240);
  uint64_t v11 = *(void *)(a1 + 128);
  if (v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(a1 + 200);
  }
  uint64_t v15 = *(void *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(unsigned int *)(a2 + 36);
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t, _OWORD *, uint64_t, uint64_t, void, uint64_t (*)(uint64_t, int, uint64_t, void *, size_t, size_t, char, int), uint64_t, uint64_t, uint64_t))(v20 + 8);
  if (v21)
  {
    uint64_t v22 = *MEMORY[0x1E4F1CF80];
    memset(v30, 0, 112);
    uint64_t v23 = v21(v10, v22, v11, v15, v12, v16, OptionsAndSetNWActivity, v17, v30, a3, a4, 0, FigCFHTTPReadResponse, v18, a2 + 24, a2 + 32);
    if (!v23) {
      FigNetworkUrgencyMonitorAddHTTPRequest(*(void *)(a1 + 624), *(void *)(a2 + 24));
    }
  }
  else
  {
    uint64_t v23 = 4294954514;
  }
  CFNumberRef v24 = *(const void **)(a1 + 128);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 128) = 0;
  }
  if (OptionsAndSetNWActivity) {
    CFRelease(OptionsAndSetNWActivity);
  }
  if (dword_1E9350E58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v23;
}

uint64_t FigReportingAgentStatsAddToCountValue_0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    uint64_t v9 = v8 ? v7 : 0;
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
    if (v10)
    {
      return v10(v5, a2, a3, 1);
    }
  }
  return result;
}

uint64_t FigCFHTTPGoInactiveIfUnreachable(uint64_t result, uint64_t *a2)
{
  *a2 = 0;
  if (!*(unsigned char *)(result + 392))
  {
    uint64_t v2 = result;
    if (*(void *)(result + 400))
    {
      uint64_t v3 = *(void *)(result + 408);
      if (v3
        && (!*(unsigned char *)(v2 + 152)
          ? (char v6 = 1)
          : (uint64_t v5 = *(void *)(v2 + 160)) == 0
          ? (char v6 = 0)
          : (char v6 = *(void *)(v2 + 216) <= v5),
            uint64_t result = FigNetworkPathInformationIsHostReachable(v3, v6),
            result))
      {
        if (*(_DWORD *)(v2 + 496) || !*(_DWORD *)(v2 + 416))
        {
          uint64_t result = FigGetUpTimeNanoseconds();
          uint64_t v7 = *(void *)(v2 + 320) + 30000000000;
          BOOL v8 = v7 <= result;
          uint64_t v9 = v7 - result;
          if (v8) {
            uint64_t v9 = 0;
          }
        }
        else
        {
          uint64_t v9 = 1000000000;
        }
        *a2 = v9;
        if (dword_1E9350E58)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (dword_1E9350E58)
        {
          uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(unsigned char *)(v2 + 392) = 1;
        *(void *)(v2 + 424) = FigGetUpTimeNanoseconds();
        FigHTTPRescheduleTimer(8073216000.0, *(void *)(v2 + 48), *(NSObject **)(v2 + 456));
        fbf_CancelReconnect(v2);
        fbf_ReportingAgentReportErrorEvent(v2, @"CoreMediaErrorDomain", @"Host unavailable", 2u, -12661);
        uint64_t result = FigByteFlumePostHostUnavailableNotification(v2);
      }
      *(_DWORD *)(v2 + 416) = 0;
    }
  }
  return result;
}

uint64_t FigPlayerStartupTaskGetTypeID()
{
  if (FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce != -1) {
    dispatch_once_f(&FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce, 0, (dispatch_function_t)registerFigPlayerStartupTaskType);
  }
  return sFigPlayerStartupTaskID;
}

uint64_t registerFigPlayerStartupTaskType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlayerStartupTaskID = result;
  return result;
}

uint64_t FigPlayerStartupTaskGetTaskDescription(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t FigPlayerStartupTaskGetWaitingState(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL FigPlayerStartupTaskDoesAllowStartup(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  BOOL v2 = *(_DWORD *)(a1 + 40) == 1;
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  return v2;
}

uint64_t FigPlayerStartupTaskNotifyOfEvents(uint64_t a1, int a2, uint64_t a3, BOOL *a4)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  if ((*(_DWORD *)(a1 + 20) & a2) == 0)
  {
    if (a4) {
      *a4 = *(_DWORD *)(a1 + 40) == 1;
    }
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    return 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 32);
  *(unsigned char *)(a1 + 36) = 1;
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8)
  {
    uint64_t v9 = (const void *)v8;
    CFRetain((CFTypeRef)a1);
    (*(void (**)(const void *, void, uint64_t, uint64_t, void (*)(const void *, int, int)))(a1 + 64))(v9, *(unsigned int *)(a1 + 32), a3, a1, figPlayerStartupTask_completion);
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    *(unsigned char *)(a1 + 36) = 0;
    if (a4) {
      *a4 = *(_DWORD *)(a1 + 40) == 1;
    }
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    CFRelease(v9);
    return 0;
  }
  uint64_t v10 = FigSignalErrorAt();
  figPlayerStartupTask_completionInternal(a1, *(_DWORD *)(a1 + 32), 1);
  if (a4) {
    *a4 = 1;
  }
  return v10;
}

void figPlayerStartupTask_completionInternal(uint64_t a1, int a2, int a3)
{
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  if (*(_DWORD *)(a1 + 32) != a2) {
    goto LABEL_7;
  }
  if (!a3)
  {
    int v6 = 2;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    int v6 = 1;
LABEL_6:
    *(_DWORD *)(a1 + 40) = v6;
LABEL_7:
    JUMPOUT(0x19970E930);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  *(_DWORD *)(a1 + 40) = 1;
  MEMORY[0x19970E930](*(void *)(a1 + 24));
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void figPlayerStartupTask_completion(const void *a1, int a2, int a3)
{
  figPlayerStartupTask_completionInternal((uint64_t)a1, a2, a3);
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t FigPlayerStartupTaskCopyRequiredParameters(uint64_t a1, __CFArray **a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2)
  {
    CFDataRef v4 = Mutable;
    CFArrayAppendValue(Mutable, @"CurrentRate");
    CFArrayAppendValue(v4, @"PlayImmediately");
    CFArrayAppendValue(v4, @"CoordinationIdentifier");
    CFArrayAppendValue(v4, @"SeekID");
    CFArrayAppendValue(v4, @"SeekTime");
    CFArrayAppendValue(v4, @"CurrentTime");
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlayerStartupTaskCreateWithCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  if (!a5 || !a4 || !a3) {
    goto LABEL_13;
  }
  if (FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce != -1) {
    dispatch_once_f(&FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce, 0, (dispatch_function_t)registerFigPlayerStartupTaskType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v8 = Instance;
    if (!a4[1]) {
      goto LABEL_12;
    }
    *(void *)(Instance + 48) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_DWORD *)(v8 + 40) = 1;
    FigCFDictionaryGetInt32IfPresent();
    CFNumberRef Value = (const void *)FigCFDictionaryGetValue();
    *(void *)(v8 + 72) = Value;
    if (Value) {
      CFRetain(Value);
    }
    *(_DWORD *)(v8 + 20) = 7;
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v10 = FigSimpleMutexCreate();
    *(void *)(v8 + 24) = v10;
    if (v10)
    {
      *(void *)(v8 + 56) = *a4;
      *(void *)(v8 + 64) = a4[1];
      *a5 = v8;
      return 0;
    }
    else
    {
LABEL_12:
      uint64_t v12 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v8);
      return v12;
    }
  }
  else
  {
LABEL_13:
    return FigSignalErrorAt();
  }
}

double FigPlayerStartupTask_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigPlayerStartupTask_Finalize(void *a1)
{
  if (a1[3]) {
    FigSimpleMutexDestroy();
  }
  BOOL v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
}

__CFString *FigPlayerStartupTask_CopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPlayerStartupTask %p - %@>", a1, a1[9]);
  return Mutable;
}

uint64_t FigCachedFileByteStreamGetClassID()
{
  return sFigCachedFileByteStreamClassID;
}

uint64_t RegisterFigCachedFileByteStreamClass()
{
  CMByteStreamGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigCachedFileByteStreamCreateFromByteStream(const void *a1, uint64_t a2, CFAllocatorRef Default, CFTypeRef *a4)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (!a1 || !a4)
  {
    uint64_t CacheAddOpenByteStream = FigSignalErrorAt();
    goto LABEL_19;
  }
  uint64_t CacheAddOpenByteStream = FigReadCacheAddOpenByteStream(1, a1);
  if (CacheAddOpenByteStream)
  {
LABEL_19:
    uint64_t v9 = CacheAddOpenByteStream;
    CacheNewRequestCompletion = 0;
    goto LABEL_17;
  }
  CacheNewRequestCompletion = FigReadCacheNewRequestCompletion();
  if (CacheNewRequestCompletion)
  {
    FigReadCacheCopyContainerForByteStream(a1, CacheNewRequestCompletion, &v19);
    if (v19)
    {
      CFNumberRef number = 0;
      MEMORY[0x19970EE10](&FigCachedFileByteStreamGetClassID_sRegisterFigCachedFileByteStreamClassOnce, RegisterFigCachedFileByteStreamClass);
      uint64_t v9 = CMDerivedObjectCreate();
      if (!v9)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (!Default) {
          Default = CFAllocatorGetDefault();
        }
        *(void *)uint64_t DerivedStorage = Default;
        *(void *)uint64_t DerivedStorage = CFRetain(Default);
        *(void *)(DerivedStorage + 32) = CacheNewRequestCompletion;
        CFTypeRef v11 = CFRetain(a1);
        uint64_t v12 = v19;
        *(void *)(DerivedStorage + 16) = 0;
        *(void *)(DerivedStorage + 24) = v12;
        *(void *)(DerivedStorage + 8) = v11;
        *(void *)(DerivedStorage + 112) = FigSimpleMutexCreate();
        *(unsigned char *)(DerivedStorage + 120) = 0;
        FigByteStreamStatsSetupWorker();
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(unsigned int (**)(uint64_t, void, void, CFNumberRef *))(v15 + 48);
        if (v16 && !v16(CMBaseObject, *MEMORY[0x1E4F1EC50], *MEMORY[0x1E4F1CF80], &number))
        {
          CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(DerivedStorage + 40));
          CFRelease(number);
        }
        CacheNewRequestCompletion = 0;
        *a4 = v20;
        uint64_t v20 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      *a4 = CFRetain(a1);
    }
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
LABEL_17:
  FigReadCacheDisposeRequestCompletion(CacheNewRequestCompletion);
  return v9;
}

uint64_t FigCachedFileByteStreamReadAndCreateBlockBuffer(uint64_t a1, uint64_t a2, uint64_t a3, CMBlockBufferRef *a4, size_t *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 < 0 || !a4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v10 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 120))
    {
      CMBlockBufferRef theBuffer = 0;
      uint64_t v11 = *(void *)(DerivedStorage + 40);
      if (a2 && v11 <= a3)
      {
        size_t DataLength = 0;
        uint64_t v13 = 4294954423;
        if (!a5) {
          return v13;
        }
      }
      else
      {
        if (a3 + a2 > (unint64_t)v11) {
          a2 = v11 - a3;
        }
        FigGetUpTimeNanoseconds();
        uint64_t v13 = FigReadCacheContainerReadBBuf(*(void *)(v10 + 24), (OpaqueCMBlockBuffer *)a3, (OpaqueCMBlockBuffer *)(a2 + a3), *(void **)(v10 + 32), &theBuffer);
        if (theBuffer) {
          size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
        }
        else {
          size_t DataLength = 0;
        }
        FigGetUpTimeNanoseconds();
        FigByteStreamStatsLogOneRead();
        *a4 = theBuffer;
        if (!a5) {
          return v13;
        }
      }
      *a5 = DataLength;
      return v13;
    }
    uint64_t v14 = *(void *)(DerivedStorage + 8);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, size_t *))(v16 + 32);
    if (!v17) {
      return 4294954514;
    }
    return v17(v14, a2, a3, a4, a5);
  }
}

uint64_t PurgeableVMAllocatorDeallocateCallBack(uint64_t result)
{
  if (result) {
    JUMPOUT(0x199712230);
  }
  return result;
}

uint64_t FigReadCacheAddOpenByteStream(uint64_t a1, const void *a2)
{
  if (a2)
  {
    char v4 = a1;
    if (gFigReadCache && *(_DWORD *)gFigReadCache
      || (uint64_t result = FigReadCacheInitialize(a1, 64, 0x40000u), !result))
    {
      int v6 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
      v6[4] = v4 & 1 | 6;
      *((void *)v6 + 3) = CFRetain(a2);
      IssueFigReadCacheRequest(v6);
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigReadCacheAddOneFileAndCopyContainer(uint64_t a1, const void *a2, void *a3, void *a4)
{
  char v7 = a1;
  if (!gFigReadCache || !*(_DWORD *)gFigReadCache)
  {
    uint64_t CacheInitialize = FigReadCacheInitialize(a1, 64, 0x40000u);
    if (CacheInitialize) {
      return CacheInitialize;
    }
  }
  uint64_t v9 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
  uint64_t v10 = v9;
  if (v7) {
    int v11 = 10;
  }
  else {
    int v11 = 9;
  }
  v9[4] = v11;
  *((void *)v9 + 3) = CFRetain(a2);
  *((void *)v10 + 4) = 0;
  *((unsigned char *)v10 + 40) = 0;
  *((void *)v10 + 6) = a3;
  MEMORY[0x19970E910](*a3);
  IssueFigReadCacheRequest(v10);
  FigSemaphoreWaitRelative();
  MEMORY[0x19970E930](*a3);
  uint64_t v12 = *((void *)v10 + 7);
  if (!v12) {
    goto LABEL_14;
  }
  if (!*(void *)(v12 + 88))
  {
    if (FigCanTriggerTapToRadar())
    {
      RadarDescriptionCFStringRef String = (const void *)FigTapToRadarCreateRadarDescriptionString();
      FigTriggerTapToRadar();
      if (RadarDescriptionString) {
        CFRelease(RadarDescriptionString);
      }
    }
    uint64_t v15 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
    void v15[4] = 4;
    *((void *)v15 + 3) = v12;
    IssueFigReadCacheRequest(v15);
LABEL_14:
    uint64_t v13 = 4294955044;
    goto LABEL_15;
  }
  uint64_t v13 = 0;
  *a4 = v12;
LABEL_15:
  uint64_t v16 = (const void *)*((void *)v10 + 3);
  if (v16) {
    CFRelease(v16);
  }
  free(v10);
  return v13;
}

uint64_t FigReadCacheCopyContainer(const void *a1, const void *a2, void *a3, void *a4)
{
  *a4 = 0;
  if (!gFigReadCache) {
    return 0;
  }
  uint64_t v8 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
  uint64_t v9 = v8;
  if (a2)
  {
    v8[4] = 8;
    *((void *)v8 + 3) = 0;
    CFTypeRef v10 = CFRetain(a2);
    char v11 = 1;
  }
  else
  {
    v8[4] = 2;
    CFTypeRef v13 = CFRetain(a1);
    CFTypeRef v10 = 0;
    char v11 = 0;
    *((void *)v9 + 3) = v13;
  }
  *((void *)v9 + 4) = v10;
  *((unsigned char *)v9 + 40) = v11;
  *((void *)v9 + 6) = a3;
  MEMORY[0x19970E910](*a3);
  IssueFigReadCacheRequest(v9);
  FigSemaphoreWaitRelative();
  MEMORY[0x19970E930](*a3);
  uint64_t v14 = *((void *)v9 + 7);
  if (v14)
  {
    uint64_t v12 = 0;
    *a4 = v14;
  }
  else
  {
    uint64_t v12 = 4294955044;
  }
  uint64_t v15 = (const void *)*((void *)v9 + 3);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = (const void *)*((void *)v9 + 4);
  if (v16) {
    CFRelease(v16);
  }
  free(v9);
  return v12;
}

uint64_t FigReadCacheCopyContainerForByteStream(const void *a1, void *a2, void *a3)
{
  return FigReadCacheCopyContainer(0, a1, a2, a3);
}

uint64_t FigReadCacheContainerShowInterestInCaching(uint64_t a1)
{
  if (a1)
  {
    if (FigAtomicIncrement32() == 1) {
      *(unsigned char *)(a1 + 153) = 0;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigReadCacheContainerShowDisinterestInCaching(uint64_t a1)
{
  if (a1)
  {
    if (!FigAtomicDecrement32()) {
      *(unsigned char *)(a1 + 153) = 1;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void IssueCacheMissRequest(uint64_t a1, void *a2, uint64_t a3)
{
  int v6 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
  v6[4] = 3;
  *((void *)v6 + 3) = a1;
  *((void *)v6 + 4) = a3;
  *((void *)v6 + 5) = a2;
  MEMORY[0x19970E910](*a2);
  IssueFigReadCacheRequest(v6);
  FigSemaphoreWaitRelative();
  MEMORY[0x19970E930](*a2);

  free(v6);
}

uint64_t CMByteStreamReadAndCreateBlockBuffer_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

uint64_t CMByteStreamRead_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

uint64_t FRCContainerFinalize(uint64_t a1)
{
  *(unsigned char *)(a1 + 152) = 0;
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 88) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    os_release(v3);
    *(void *)(a1 + 144) = 0;
    --*(_DWORD *)(gFigReadCache + 164);
  }
  char v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 40) = 0;
  }
  if (*(void *)(a1 + 16))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 16) = 0;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

CFStringRef FRCContainerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigReadCacheContainer %p]", a1);
}

CFMutableStringRef FRCContainerCopyDebugDesc()
{
  return CFStringCreateMutable(0, 0);
}

void LoadOneByteStreamForOpenFile(unint64_t a1, char a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(gFigReadCache + 120);
  if (v4)
  {
    while (!*(unsigned char *)(v4 + 96) || *(void *)(v4 + 88) != a1)
    {
      uint64_t v4 = *(void *)(v4 + 136);
      if (!v4) {
        goto LABEL_5;
      }
    }
    LoadContainerInCache((void *)v4);
  }
  else
  {
LABEL_5:
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8)
    {
      v8(CMBaseObject, *MEMORY[0x1E4F1EC50], *MEMORY[0x1E4F1CF80], &cf);
      CFNumberRef v9 = (const __CFNumber *)cf;
    }
    else
    {
      CFNumberRef v9 = 0;
    }
    CFNumberGetValue(v9, kCFNumberSInt64Type, v10);
    CreateAndLoadNewContainerInCacheAndReturnContainer(0, a1, v10, a2, 0);
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t HandleAddOneFileAndCopyContainer(uint64_t a1, char a2)
{
  uint64_t v7 = 0;
  CFTypeRef cf = 0;
  memset(v6, 0, sizeof(v6));
  unint64_t v4 = *(void *)(a1 + 24);
  if (!FigFileGetFileInfo())
  {
    if (FindFileInCacheAndCopyContainer(*(CFTypeRef *)(a1 + 24), (uint64_t)v6, &cf))
    {
      *(void *)(a1 + 56) = cf;
      CFTypeRef cf = 0;
    }
    else
    {
      CreateAndLoadNewContainerInCacheAndReturnContainer(v4, 0, v6, a2, (uint64_t *)&cf);
      if (cf)
      {
        *(void *)(a1 + 56) = CFRetain(cf);
        CFTypeRef cf = 0;
        ++*(_DWORD *)(gFigReadCache + 160);
      }
    }
  }
  return FigSemaphoreSignal();
}

uint64_t FindFileInCacheAndCopyContainer(CFTypeRef cf2, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3 = *(void *)(gFigReadCache + 120);
  if (!v3) {
    return 0;
  }
  while (!CFEqual(*(CFTypeRef *)(v3 + 40), cf2) || !FigFileInfoEqual())
  {
    uint64_t v3 = *(void *)(v3 + 136);
    if (!v3) {
      return 0;
    }
  }
  if (AssureContainerFileIsOpen(v3)) {
    return 0;
  }
  LoadContainerInCache((void *)v3);
  if (a3)
  {
    *a3 = CFRetain((CFTypeRef)v3);
    ++*(_DWORD *)(gFigReadCache + 160);
  }
  return 1;
}

void *LoadContainerInCache(void *result)
{
  uint64_t v1 = (void *)gFigReadCache;
  uint64_t v2 = result[16];
  uint64_t v3 = (void *)result[17];
  if (v2)
  {
    *(void *)(v2 + 136) = v3;
    uint64_t v3 = (void *)result[17];
  }
  else
  {
    *(void *)(gFigReadCache + 120) = v3;
  }
  if (!v3) {
    uint64_t v3 = v1;
  }
  v3[16] = v2;
  result[16] = 0;
  result[17] = 0;
  result[4] = v1[12];
  uint64_t v4 = v1[16];
  if (v4)
  {
    *(void *)(v4 + 136) = result;
    result[16] = v4;
  }
  else
  {
    v1[15] = result;
  }
  v1[16] = result;
  return result;
}

uint64_t CreateAndLoadNewContainerInCacheAndReturnContainer(unint64_t a1, unint64_t a2, long long *a3, char a4, uint64_t *a5)
{
  MEMORY[0x19970EE10](&sRegisterFigReadCacheContainerTypeOnce, RegisterFigReadCacheContainerType);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = Instance;
  if (!Instance)
  {
    int v22 = FigSignalErrorAt();
    uint64_t result = 0;
    if (v22) {
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  if (a1 | a2)
  {
    uint64_t v12 = (_OWORD *)(Instance + 48);
    if (a2)
    {
      *(void *)(Instance + 40) = 0;
      CFTypeRef v13 = CFRetain((CFTypeRef)a2);
      char v14 = 1;
    }
    else
    {
      CFTypeRef v15 = CFRetain((CFTypeRef)a1);
      CFTypeRef v13 = 0;
      char v14 = 0;
      *(void *)(v11 + 40) = v15;
    }
    *(void *)(v11 + 88) = v13;
    long long v16 = *a3;
    long long v17 = a3[1];
    *(void *)(v11 + 80) = *((void *)a3 + 4);
    _OWORD *v12 = v16;
    *(_OWORD *)(v11 + 64) = v17;
    *(unsigned char *)(v11 + 96) = v14;
    *(void *)(v11 + 144) = 0;
    *(void *)(v11 + 16) = FigSimpleMutexCreate();
    *(void *)(v11 + 24) = FigSimpleMutexCreate();
    *(unsigned char *)(v11 + 152) = 1;
    if (!AssureContainerFileIsOpen(v11))
    {
      uint64_t v18 = gFigReadCache;
      uint64_t v19 = *(void *)(gFigReadCache + 128);
      if (v19)
      {
        *(void *)(v19 + 136) = v11;
        *(void *)(v11 + 128) = v19;
      }
      else
      {
        *(void *)(gFigReadCache + 120) = v11;
      }
      *(void *)(v18 + 128) = v11;
      ++*(_DWORD *)(v18 + 136);
      *(void *)(v11 + 32) = *(void *)(v18 + 96);
LABEL_11:
      *(unsigned char *)(v11 + 153) = a4;
      uint64_t v20 = gFigReadCache;
      if (!*(void *)(gFigReadCache + 144)) {
        *(void *)(gFigReadCache + 144) = v11;
      }
      if (*(_DWORD *)(v20 + 304))
      {
        PopulateCacheContainer(v11, 0);
        uint64_t result = 1;
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else if (!FigSignalErrorAt())
  {
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  CFRelease((CFTypeRef)v11);
  uint64_t v11 = 0;
LABEL_19:
  uint64_t result = 0;
LABEL_20:
  if (a5) {
    *a5 = v11;
  }
  return result;
}

uint64_t FreeEntriesInGroup(unsigned int a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(gFigReadCache + 24 * a1 + 192);
  if (v5) {
    BOOL v6 = a3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v5 + 8);
      uint64_t v10 = *(void *)(v5 + 88);
      if (v9 != a2)
      {
        if (v9 != v8)
        {
          if (v8) {
            MEMORY[0x19970E930](*(void *)(v8 + 16));
          }
          MEMORY[0x19970E910](*(void *)(v9 + 16));
          uint64_t v8 = v9;
        }
        CFGetRetainCount(*(CFTypeRef *)(v5 + 48));
        uint64_t v11 = *(void *)(v5 + 56);
        uint64_t v12 = *(void *)(v5 + 64);
        if (v11)
        {
          *(void *)(v11 + 64) = v12;
          uint64_t v12 = *(void *)(v5 + 64);
        }
        else
        {
          *(void *)(v9 + 104) = v12;
        }
        if (v12) {
          CFTypeRef v13 = (void *)(v12 + 56);
        }
        else {
          CFTypeRef v13 = (void *)(v9 + 112);
        }
        *CFTypeRef v13 = v11;
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        int v14 = *(_DWORD *)(v9 + 120) - 1;
        *(_DWORD *)(v9 + 120) = v14;
        if (!v14 && CFGetRetainCount((CFTypeRef)v9) <= 1)
        {
          MEMORY[0x19970E930](*(void *)(v9 + 16));
          DeleteCacheContainer((CFTypeRef)v9);
          uint64_t v8 = 0;
        }
        a4.n128_f64[0] = RecycleCacheEntry(v5);
        --v4;
      }
      if (v10) {
        BOOL v15 = v4 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      uint64_t v5 = v10;
    }
    while (!v15);
    if (v8) {
      MEMORY[0x19970E930](*(void *)(v8 + 16), a4);
    }
  }
  return v4;
}

void DeleteCacheContainer(CFTypeRef cf)
{
  uint64_t v1 = gFigReadCache;
  uint64_t v2 = *((void *)cf + 16);
  if (*(CFTypeRef *)(gFigReadCache + 144) != cf)
  {
    uint64_t v4 = (uint64_t *)((char *)cf + 136);
    uint64_t v3 = *((void *)cf + 17);
    if (!v2) {
      goto LABEL_8;
    }
LABEL_6:
    *(void *)(v2 + 136) = v3;
    uint64_t v3 = *v4;
    goto LABEL_9;
  }
  if (v2)
  {
    *(void *)(gFigReadCache + 144) = v2;
    uint64_t v4 = (uint64_t *)((char *)cf + 136);
    uint64_t v3 = *((void *)cf + 17);
    goto LABEL_6;
  }
  uint64_t v3 = *((void *)cf + 17);
  *(void *)(gFigReadCache + 144) = v3;
LABEL_8:
  uint64_t v2 = 0;
  *(void *)(v1 + 120) = v3;
LABEL_9:
  if (!v3) {
    uint64_t v3 = v1;
  }
  *(void *)(v3 + 128) = v2;
  *((void *)cf + 16) = 0;
  *((void *)cf + 17) = 0;
  --*(_DWORD *)(v1 + 136);
  CFRelease(cf);
}

double RecycleCacheEntry(uint64_t a1)
{
  if (*(_DWORD *)a1 == 1) {
    FigAtomicDecrement32();
  }
  MoveToVGroup(a1, 4u, 1);
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void ScanForAbandonedEntries()
{
  if (gFigReadCache)
  {
    if (*(_DWORD *)(gFigReadCache + 176))
    {
      for (CFIndex i = *(void **)(gFigReadCache + 120); i; CFIndex i = (void *)i[17])
      {
        MEMORY[0x19970E910](i[2]);
        if (CFGetRetainCount(i) <= 1)
        {
          for (uint64_t j = i[13]; j; uint64_t j = *(void *)(j + 64))
          {
            if (*(_DWORD *)(j + 72) && CFGetRetainCount(*(CFTypeRef *)(j + 48)) == 1 && *(_DWORD *)(j + 72) != 3)
            {
              MoveToVGroup(j, 3u, 1);
              if (*(unsigned char *)(j + 96))
              {
                *(unsigned char *)(j + 96) = 0;
                FigAtomicDecrement32();
              }
            }
          }
        }
        MEMORY[0x19970E930](i[2]);
      }
    }
  }
}

uint64_t FigXMLReadMemory(OpaqueCMBlockBuffer *a1, const __CFURL *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = 0;
  dataPointerOut = 0;
  size_t lengthAtOffsetOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  size_t totalLengthOut = 0;
  if (figXMLEnsureLibraryIsInitialized()) {
    goto LABEL_14;
  }
  if (!CFURLGetString(a2) || (FigGetAllocatorForMedia(), (BytesFromCFCFStringRef String = FigCreateBytesFromCFString()) == 0))
  {
    FigSignalErrorAt();
LABEL_14:
    uint64_t Memory = 0;
    goto LABEL_12;
  }
  uint64_t v8 = (void *)BytesFromCFString;
  if (!CMBlockBufferGetDataPointer(a1, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
  {
    if (lengthAtOffsetOut >= totalLengthOut
      || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
          CFAllocatorRef v10 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          !CMBlockBufferCreateContiguous(AllocatorForMedia, a1, v10, 0, 0, 0, 1u, &blockBufferOut))
      && !CMBlockBufferGetDataPointer(blockBufferOut, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
    {
      uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      if (CStringPtrAndBufferToFree)
      {
        uint64_t Memory = s_ps_xmlReadMemory(dataPointerOut, totalLengthOut, v8, CStringPtrAndBufferToFree, a4);
        goto LABEL_10;
      }
      FigSignalErrorAt();
    }
  }
  uint64_t Memory = 0;
LABEL_10:
  CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFAllocatorDeallocate(v13, v8);
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
LABEL_12:
  free(v18);
  return Memory;
}

uint64_t figXMLEnsureLibraryIsInitialized()
{
  MEMORY[0x19970EE10](&figXMLEnsureLibraryIsInitialized_sFigLibXMLLoadOnce, initLibXMLLibrary);
  if (s_ps_xmlAddChild) {
    BOOL v0 = s_ps_xmlBufferContent == 0;
  }
  else {
    BOOL v0 = 1;
  }
  int v22 = v0
     || s_ps_xmlBufferCreate == 0
     || s_ps_xmlBufferFree == 0
     || s_ps_xmlBufferLength == 0
     || s_ps_xmlFree == 0
     || s_ps_xmlFreeDoc == 0
     || s_ps_xmlFreeNode == 0
     || s_ps_xmlGetProp == 0
     || s_ps_xmlNewNode == 0
     || s_ps_xmlNewProp == 0
     || s_ps_xmlNodeAddContent == 0
     || s_ps_xmlNodeGetContent == 0
     || s_ps_xmlNodeSetContent == 0
     || s_ps_xmlReadFile == 0
     || s_ps_xmlNewDoc == 0
     || s_ps_xmlDocDumpFormatMemory == 0
     || s_ps_xmlDocSetRootElement == 0
     || s_ps_xmlReadMemory == 0
     || s_ps_xmlSaveClose == 0
     || s_ps_xmlSaveDoc == 0
     || s_ps_xmlSaveToBuffer == 0
     || s_ps_xmlStrEqual == 0;
  return (v22 << 31 >> 31);
}

uint64_t FigXMLFreeDoc(uint64_t a1)
{
  uint64_t IsInitialized = figXMLEnsureLibraryIsInitialized();
  if (!IsInitialized) {
    s_ps_xmlFreeDoc(a1);
  }
  return IsInitialized;
}

uint64_t FigXMLReadFromByteStream(uint64_t Memory)
{
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v23 = 0;
  uint64_t valuePtr = 0;
  CFNumberRef number = 0;
  dataPointerOut = 0;
  dataCFIndex Length = 0;
  size_t lengthAtOffsetOut = 0;
  size_t totalLengthOut = 0;
  if (!figXMLEnsureLibraryIsInitialized())
  {
    if (!Memory)
    {
      FigSignalErrorAt();
      goto LABEL_22;
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    BOOL v6 = *(unsigned int (**)(uint64_t, void, uint64_t, CFNumberRef *))(v5 + 48);
    if (v6 && !v6(CMBaseObject, *MEMORY[0x1E4F1EC50], AllocatorForMedia, &number))
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
      uint64_t v7 = valuePtr;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v9 = v8 ? v8 : 0;
      CFAllocatorRef v10 = *(unsigned int (**)(uint64_t, uint64_t, void, OpaqueCMBlockBuffer **, size_t *))(v9 + 32);
      if (v10)
      {
        if (!v10(Memory, v7, 0, &v23, &dataLength)
          && !CMBlockBufferGetDataPointer(v23, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
        {
          if (lengthAtOffsetOut >= totalLengthOut
            || (CFAllocatorRef v11 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                uint64_t v12 = v23,
                CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                !CMBlockBufferCreateContiguous(v11, v12, v13, 0, 0, dataLength, 1u, &blockBufferOut))
            && !CMBlockBufferGetDataPointer(blockBufferOut, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
          {
            uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
            if (CStringPtrAndBufferToFree)
            {
              uint64_t Memory = s_ps_xmlReadMemory(dataPointerOut, totalLengthOut, 0, CStringPtrAndBufferToFree, 0);
              goto LABEL_22;
            }
            FigSignalErrorAt();
          }
        }
      }
    }
  }
  uint64_t Memory = 0;
LABEL_22:
  if (v23) {
    CFRelease(v23);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (number) {
    CFRelease(number);
  }
  free(0);
  return Memory;
}

uint64_t FigXMLReadFileFromURL()
{
  if (figXMLEnsureLibraryIsInitialized()) {
    return 0;
  }
  FigGetAllocatorForMedia();
  if (CMByteStreamCreateForFileURL()) {
    return 0;
  }
  else {
    return FigXMLReadFromByteStream(0);
  }
}

uint64_t FigXMLWriteFileDirectlyFromBlockBufferAtURL(OpaqueCMBlockBuffer *a1, const __CFURL *a2)
{
  if (figXMLEnsureLibraryIsInitialized()) {
    return 0xFFFFFFFFLL;
  }
  if (a1 && a2 && (CFStringRef v4 = CFURLCopyLastPathComponent(a2)) != 0)
  {
    CFStringRef v5 = v4;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(AllocatorForMedia, a2);
    if (PathComponent)
    {
      CFURLRef v8 = PathComponent;
      uint64_t v9 = FigXMLReadMemory(a1, a2, @"UTF-8", 0);
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v10 = v9;
      int v11 = ps_writeXMLDocToFileAtomically(v8, v5, v9);
      if (!figXMLEnsureLibraryIsInitialized()) {
        s_ps_xmlFreeDoc(v10);
      }
      if (v11) {
LABEL_19:
      }
        uint64_t v12 = FigSignalErrorAt();
      else {
        uint64_t v12 = 0;
      }
      CFRelease(v5);
      CFRelease(v8);
      return v12;
    }
    uint64_t v14 = FigSignalErrorAt();
    CFRelease(v5);
    return v14;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ps_writeXMLDocToFileAtomically(const __CFURL *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t IsInitialized = figXMLEnsureLibraryIsInitialized();
  if (IsInitialized)
  {
    uint64_t v8 = 0;
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  if (!a1 || !a2)
  {
    uint64_t v14 = FigSignalErrorAt();
    uint64_t v8 = 0;
LABEL_22:
    FigFileForkClose();
    goto LABEL_16;
  }
  uint64_t v8 = s_ps_xmlBufferCreate(IsInitialized, v7);
  if (!v8
    || (uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree()) == 0
    || (uint64_t v10 = s_ps_xmlSaveToBuffer(v8, CStringPtrAndBufferToFree, 33)) == 0
    || (uint64_t v11 = v10, s_ps_xmlSaveDoc(v10, a3) == -1)
    || s_ps_xmlSaveClose(v11) == -1
    || (s_ps_xmlBufferLength(v8), !s_ps_xmlBufferContent(v8))
    || FigFileCreateTempFileAtURL())
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (FigFileForkWrite())
  {
    FigSignalErrorAt();
    CFURLRef v13 = 0;
  }
  else
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFURLRef v13 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, a1, a2, 0);
    if (v13) {
      FigFileRename();
    }
    else {
      FigSignalErrorAt();
    }
  }
  FigFileForkClose();
  uint64_t v14 = FigFileDeleteFile();
  if (v13) {
    CFRelease(v13);
  }
LABEL_16:
  free(0);
  if (v8) {
    s_ps_xmlBufferFree(v8);
  }
  return v14;
}

uint64_t FigXMLNodeWriteXMLFileFromBlockBufferAtURL(OpaqueCMBlockBuffer *a1, uint64_t a2, const __CFURL *a3)
{
  if (_os_feature_enabled_impl())
  {
    CFTypeRef cf = 0;
    CFStringRef PathComponent = CFURLCopyLastPathComponent(a3);
    if (PathComponent)
    {
      CFStringRef v6 = PathComponent;
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v8 = CFURLCreateCopyDeletingLastPathComponent(AllocatorForMedia, a3);
      if (v8)
      {
        CFURLRef v9 = v8;
        uint64_t v10 = FigXMLServiceReadFromMemoryAndCopyParsedXML((uint64_t)v8, (uint64_t)v6, (uint64_t)a1, &cf);
        if (!v10) {
          uint64_t v10 = FigXMLNodeWriteToFilePath((uint64_t)cf, a3);
        }
        uint64_t v11 = v10;
        CFRelease(v6);
        CFRelease(v9);
        if (cf) {
          CFRelease(cf);
        }
        return v11;
      }
      else
      {
        uint64_t v13 = FigSignalErrorAt();
        CFRelease(v6);
        return v13;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigXMLWriteFileDirectlyFromBlockBufferAtURL(a1, a3);
  }
}

uint64_t FigXMLNodeCreateWithDoc(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  if (figXMLEnsureLibraryIsInitialized()) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    CFStringRef v5 = *(void **)(a2 + 24);
    if (v5)
    {
      while (1)
      {
        uint64_t v6 = figXMLNode_processNode(v5, &cf);
        if (v6) {
          break;
        }
        CFStringRef v5 = (void *)v5[6];
        if (!v5)
        {
          CFTypeRef v7 = cf;
          goto LABEL_8;
        }
      }
      uint64_t v8 = v6;
      CFTypeRef v7 = cf;
      goto LABEL_11;
    }
    CFTypeRef v7 = 0;
LABEL_8:
    uint64_t v8 = 0;
    if (!a3)
    {
LABEL_11:
      if (v7) {
        CFRelease(v7);
      }
      return v8;
    }
    *a3 = v7;
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figXMLNode_processNode(void *a1, CFTypeRef *a2)
{
  CFTypeRef v33 = 0;
  theCFStringRef String = 0;
  CFTypeRef cf = 0;
  if (figXMLEnsureLibraryIsInitialized())
  {
    CFMutableStringRef MutableCopy = 0;
    CFStringRef v21 = 0;
    CFStringRef v17 = 0;
    CFStringRef v4 = 0;
    uint64_t v29 = 0xFFFFFFFFLL;
    goto LABEL_53;
  }
  CFStringRef v4 = (const char *)a1[2];
  if (v4)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v6 = CFStringCreateWithCString(AllocatorForMedia, v4, 0x8000100u);
    if (v6)
    {
      CFStringRef v7 = v6;
      uint64_t v8 = FigGetAllocatorForMedia();
      uint64_t v9 = FigXMLNodeCreateNode(v8, v7, &v33);
      if (v9)
      {
        uint64_t v29 = v9;
        CFMutableStringRef MutableCopy = 0;
        CFStringRef v21 = 0;
        CFStringRef v17 = 0;
        CFStringRef v4 = 0;
      }
      else
      {
        uint64_t v10 = a1[9];
        if (v10 && (uint64_t v11 = a1[5]) != 0 && *(_DWORD *)(v11 + 8) == 9)
        {
          CFStringRef v4 = *(const char **)(v10 + 16);
          if (v4)
          {
            CFAllocatorRef v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFStringRef v4 = (const char *)CFStringCreateWithCString(v12, v4, 0x8000100u);
            if (!v4)
            {
              uint64_t v13 = FigSignalErrorAt();
              goto LABEL_73;
            }
            uint64_t v13 = FigXMLNodeAttributeSetCFString((uint64_t)v33, @"xmlns", (uint64_t)v4);
            if (v13
              || (uint64_t v13 = FigXMLNodeAttributeSetCFString((uint64_t)v33, @"xmlns:xsi", @"http://www.w3.org/2001/XMLSchema-instance"), v13))
            {
LABEL_73:
              uint64_t v29 = v13;
              CFMutableStringRef MutableCopy = 0;
LABEL_74:
              CFStringRef v21 = 0;
              CFStringRef v17 = 0;
              goto LABEL_49;
            }
          }
        }
        else
        {
          CFStringRef v4 = 0;
        }
        uint64_t v14 = a1[11];
        if (v14)
        {
          while (1)
          {
            BOOL v15 = *(const char **)(v14 + 16);
            CFAllocatorRef v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFStringRef v17 = CFStringCreateWithCString(v16, v15, 0x8000100u);
            if (!v17)
            {
              uint64_t v29 = FigSignalErrorAt();
              CFMutableStringRef MutableCopy = 0;
              CFStringRef v21 = 0;
              goto LABEL_49;
            }
            uint64_t Prop = s_ps_xmlGetProp(a1, v15);
            if (Prop)
            {
              uint64_t v19 = (const char *)Prop;
              CFAllocatorRef v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFStringRef v21 = CFStringCreateWithCString(v20, v19, 0x8000100u);
              s_ps_xmlFree(v19);
            }
            else
            {
              FigSignalErrorAt();
              CFStringRef v21 = 0;
            }
            uint64_t v22 = FigXMLNodeAttributeSetCFString((uint64_t)v33, (uint64_t)v17, (uint64_t)v21);
            if (v22) {
              break;
            }
            CFRelease(v17);
            if (v21) {
              CFRelease(v21);
            }
            uint64_t v14 = *(void *)(v14 + 48);
            if (!v14) {
              goto LABEL_24;
            }
          }
          uint64_t v29 = v22;
          CFMutableStringRef MutableCopy = 0;
          goto LABEL_49;
        }
LABEL_24:
        uint64_t v23 = a1[3];
        if (v23)
        {
          do
          {
            int v24 = *(_DWORD *)(v23 + 8);
            if (*(void *)(v23 + 24)) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v24 == 3;
            }
            if (v25)
            {
              uint64_t v13 = ps_xmlNodeCopyContentAsCFString(v23, &theString);
              if (v13) {
                goto LABEL_73;
              }
              CFAllocatorRef v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v26, 0, theString);
              CFStringTrimWhitespace(MutableCopy);
              if (CFStringCompare(&stru_1EE53F4B8, MutableCopy, 0))
              {
                uint64_t v28 = FigXMLNodeContentSetCFString((uint64_t)v33, theString);
                if (v28)
                {
                  uint64_t v29 = v28;
                  goto LABEL_74;
                }
              }
              if (MutableCopy) {
                CFRelease(MutableCopy);
              }
              if (theString)
              {
                CFRelease(theString);
                theCFStringRef String = 0;
              }
            }
            else if (v24 == 1)
            {
              uint64_t v13 = figXMLNode_processNode(v23, &cf);
              if (v13) {
                goto LABEL_73;
              }
              uint64_t v13 = figXMLNodeAddChild((uint64_t)v33, (void *)cf);
              if (v13) {
                goto LABEL_73;
              }
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
            }
            uint64_t v23 = *(void *)(v23 + 48);
          }
          while (v23);
          if (a2) {
            goto LABEL_47;
          }
          CFMutableStringRef MutableCopy = 0;
          CFStringRef v21 = 0;
          CFStringRef v17 = 0;
          uint64_t v29 = 0;
          goto LABEL_49;
        }
        uint64_t v13 = ps_xmlNodeCopyContentAsCFString((uint64_t)a1, &theString);
        if (v13) {
          goto LABEL_73;
        }
        uint64_t v30 = FigXMLNodeContentSetCFString((uint64_t)v33, theString);
        uint64_t v29 = v30;
        CFMutableStringRef MutableCopy = 0;
        if (!a2 || v30)
        {
          CFStringRef v21 = 0;
          CFStringRef v17 = 0;
        }
        else
        {
LABEL_47:
          CFMutableStringRef MutableCopy = 0;
          CFStringRef v21 = 0;
          CFStringRef v17 = 0;
          uint64_t v29 = 0;
          *a2 = v33;
          CFTypeRef v33 = 0;
        }
      }
LABEL_49:
      CFRelease(v7);
      if (v33) {
        CFRelease(v33);
      }
      goto LABEL_51;
    }
    uint64_t v29 = FigSignalErrorAt();
    CFStringRef v4 = 0;
  }
  else
  {
    uint64_t v29 = FigSignalErrorAt();
  }
  CFStringRef v17 = 0;
  CFStringRef v21 = 0;
  CFMutableStringRef MutableCopy = 0;
LABEL_51:
  if (cf) {
    CFRelease(cf);
  }
LABEL_53:
  if (theString) {
    CFRelease(theString);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v29;
}

uint64_t FigXMLNodeCreateDocFromNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t IsInitialized = figXMLEnsureLibraryIsInitialized();
  if (!IsInitialized)
  {
    uint64_t v6 = s_ps_xmlNewDoc("1.0");
    uint64_t v7 = figXMLNode_convertNodeToLibXMLNode(a2);
    s_ps_xmlDocSetRootElement(v6, v7);
    if (a3) {
      *a3 = v6;
    }
  }
  return IsInitialized;
}

uint64_t figXMLNode_convertNodeToLibXMLNode(uint64_t a1)
{
  if (figXMLEnsureLibraryIsInitialized())
  {
    CFAllocatorRef v12 = 0;
    BOOL v15 = 0;
    uint64_t v3 = 0;
    goto LABEL_18;
  }
  uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
  uint64_t v3 = s_ps_xmlNewNode(0, CStringPtrAndBufferToFree);
  if (*(void *)(a1 + 24))
  {
    FigGetAllocatorForMedia();
    BytesFromCFCFStringRef String = FigCreateBytesFromCFString();
    if (BytesFromCFString)
    {
      CFStringRef v5 = (void *)BytesFromCFString;
      uint64_t v6 = s_ps_xmlEncodeEntitiesReentrant(*(void *)(v3 + 64), BytesFromCFString);
      if (v6)
      {
        uint64_t v7 = v6;
        s_ps_xmlNodeSetContent(v3, v6);
        s_ps_xmlFree(v7);
        int v8 = 0;
      }
      else
      {
        int v8 = FigSignalErrorAt();
      }
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFAllocatorDeallocate(AllocatorForMedia, v5);
      if (!v8) {
        goto LABEL_7;
      }
    }
    else if (!FigSignalErrorAt())
    {
      goto LABEL_7;
    }
    CFAllocatorRef v12 = 0;
    BOOL v15 = 0;
    goto LABEL_18;
  }
LABEL_7:
  CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 32);
  if (v10)
  {
    CFIndex Count = CFDictionaryGetCount(v10);
    CFAllocatorRef v12 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 32), v12, 0);
    CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
    BOOL v15 = Mutable;
    if (!Mutable)
    {
      FigSignalErrorAt();
      goto LABEL_18;
    }
    if (Count >= 1)
    {
      for (uint64_t i = 0; i != Count; ++i)
        CFArrayAppendValue(v15, v12[i]);
      v28.CFIndex location = 0;
      v28.length = Count;
      CFArraySortValues(v15, v28, MEMORY[0x1E4F1C2A8], 0);
      CFIndex v17 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v15, v17);
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), ValueAtIndex);
        uint64_t v19 = FigCFStringGetCStringPtrAndBufferToFree();
        FigGetAllocatorForMedia();
        uint64_t v20 = FigCreateBytesFromCFString();
        if (v20)
        {
          CFStringRef v21 = (void *)v20;
          s_ps_xmlNewProp(v3, v19, v20);
          CFAllocatorRef v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFAllocatorDeallocate(v22, v21);
        }
        else if (FigSignalErrorAt())
        {
          goto LABEL_18;
        }
        if (Count == ++v17) {
          goto LABEL_23;
        }
      }
    }
    v29.CFIndex location = 0;
    v29.length = Count;
    CFArraySortValues(Mutable, v29, MEMORY[0x1E4F1C2A8], 0);
  }
  else
  {
    CFAllocatorRef v12 = 0;
    BOOL v15 = 0;
  }
LABEL_23:
  for (CFIndex j = 0; ; ++j)
  {
    CFArrayRef v25 = *(const __CFArray **)(a1 + 40);
    if (v25) {
      CFArrayRef v25 = (const __CFArray *)CFArrayGetCount(v25);
    }
    if (j >= (uint64_t)v25) {
      break;
    }
    CFAllocatorRef v26 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), j);
    uint64_t v27 = figXMLNode_convertNodeToLibXMLNode(v26);
    s_ps_xmlAddChild(v3, v27);
  }
LABEL_18:
  free(v12);
  free(0);
  free(0);
  if (v15) {
    CFRelease(v15);
  }
  return v3;
}

uint64_t FigXMLNodeCreateFromURL(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  if (_os_feature_enabled_impl())
  {
    return FigXMLServiceReadAndCopyParsedXML(a2, a3);
  }
  else
  {
    uint64_t v6 = FigXMLReadFileFromURL();
    uint64_t v7 = FigXMLNodeCreateWithDoc(v6, v6, a3);
    if (v6 && !figXMLEnsureLibraryIsInitialized()) {
      s_ps_xmlFreeDoc(v6);
    }
    return v7;
  }
}

uint64_t FigXMLNodeCreateNode(uint64_t a1, const void *a2, void *a3)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    uint64_t v5 = figXMLNodeCreateNode(a1, &cf);
    if (v5)
    {
      CFTypeRef v7 = cf;
      if (!cf) {
        return v5;
      }
    }
    else
    {
      CFTypeRef v6 = CFRetain(a2);
      CFTypeRef v7 = cf;
      *((void *)cf + 2) = v6;
      if (a3)
      {
        uint64_t v5 = 0;
        *a3 = v7;
        return v5;
      }
    }
    CFRelease(v7);
    return v5;
  }

  return FigSignalErrorAt();
}

uint64_t figXMLNodeCreateNode(uint64_t a1, void *a2)
{
  if (FigXMLNodeGetTypeID_once != -1) {
    dispatch_once_f(&FigXMLNodeGetTypeID_once, 0, (dispatch_function_t)xmlnode_registerClass);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    Instance[1] = 0u;
    Instance[2] = 0u;
    if (a2) {
      *a2 = Instance;
    }
    else {
      CFRelease(Instance);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeCreateChildNode(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a3)
  {
    uint64_t v7 = figXMLNodeCreateNode(a1, &cf);
    if (v7)
    {
      uint64_t v10 = v7;
      CFTypeRef v11 = cf;
    }
    else
    {
      CFTypeRef v8 = CFRetain(a3);
      uint64_t v9 = (void *)cf;
      *((void *)cf + 2) = v8;
      uint64_t v10 = figXMLNodeAddChild(a2, v9);
      CFTypeRef v11 = cf;
      if (a4 && !v10)
      {
        *a4 = cf;
        return v10;
      }
    }
    if (v11) {
      CFRelease(v11);
    }
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t figXMLNodeAddChild(uint64_t a1, void *value)
{
  if (a1
    && value
    && ((CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 40)) != 0
     || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
         CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
         (*(void *)(a1 + 40) = Mutable) != 0)))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeGetTag(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

CFStringRef *FigXMLNodeGetChild(uint64_t a1, const __CFString *a2)
{
  CFIndex v4 = 0;
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 40);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v4 >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (CFStringRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v4++);
    if (CFEqual(a2, ValueAtIndex[2])) {
      return ValueAtIndex;
    }
  }
  return 0;
}

CFArrayRef FigXMLNodeGetCountOfChildren(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 40);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

const void *FigXMLNodeGetChildAtIndex(uint64_t a1, CFIndex a2)
{
  return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
}

uint64_t FigXMLNodeGetAllAttributes(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t FigXMLNodeGetAttribute()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigXMLNodeGetAttributeAsInt64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __errstrp = 0;
  if (!a1 || !a2)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_9;
  }
  if (!FigCFDictionaryGetValue()) {
    goto LABEL_8;
  }
  uint64_t CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  uint64_t v5 = strtonum(CStringPtrAndBufferToFree, 0, 0x7FFFFFFFFFFFFFFFLL, (const char **)&__errstrp);
  if (!__errstrp)
  {
    if (a3)
    {
      uint64_t v6 = 0;
      *a3 = v5;
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = 4294950371;
LABEL_9:
  free(0);
  return v6;
}

uint64_t FigXMLNodeCopyAttributeAsCFString(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFNumberRef Value = (const void *)FigCFDictionaryGetValue();
  if (a3 && Value) {
    *a3 = CFRetain(Value);
  }
  return 0;
}

uint64_t FigXMLNodeGetAttributeAsDouble(uint64_t a1, uint64_t a2, double *a3)
{
  CFStringRef Value = (const __CFString *)FigCFDictionaryGetValue();
  if (Value)
  {
    DoubleCFStringRef Value = CFStringGetDoubleValue(Value);
    if (a3) {
      *a3 = DoubleValue;
    }
  }
  return 0;
}

uint64_t FigXMLNodeContentSetCFString(uint64_t a1, CFTypeRef cf)
{
  if (a1 && cf)
  {
    uint64_t v3 = *(const void **)(a1 + 24);
    *(void *)(a1 + 24) = cf;
    CFRetain(cf);
    if (v3) {
      CFRelease(v3);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeContentSetInt64(uint64_t a1, uint64_t a2)
{
  if (a1
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFStringRef v5 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%lld", a2)) != 0))
  {
    CFStringRef v6 = v5;
    uint64_t v7 = FigXMLNodeContentSetCFString(a1, v5);
    CFRelease(v6);
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeGetContentAsCFString(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t FigXMLNodeGetContentAsInt64(uint64_t a1, void *a2)
{
  if (a1)
  {
    IntCFStringRef Value = CFStringGetIntValue(*(CFStringRef *)(a1 + 24));
    if (a2) {
      *a2 = IntValue;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeCopyContentAsCFString(uint64_t a1, void *a2)
{
  if (a1)
  {
    CFIndex v4 = *(const void **)(a1 + 24);
    if (v4)
    {
      CFTypeRef v5 = CFRetain(v4);
      if (!a2)
      {
        if (v5) {
          CFRelease(v5);
        }
        return 0;
      }
    }
    else
    {
      if (!a2) {
        return 0;
      }
      CFTypeRef v5 = 0;
    }
    *a2 = v5;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigXMLNodeRemoveAndClearChild(uint64_t a1, const void **a2)
{
  if (a1 && *a2)
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 40);
    v7.length = CFArrayGetCount(v4);
    v7.CFIndex location = 0;
    FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v4, v7, *a2);
    if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), FirstIndexOfValue);
    }
    *a2 = 0;
  }
  return 0;
}

uint64_t FigXMLNodeSetAttributes(uint64_t a1, const __CFDictionary *a2)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFIndex Count = CFDictionaryGetCount(a2);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, Count, a2);
  if (MutableCopy)
  {
    CFMutableDictionaryRef v7 = MutableCopy;
    *(void *)(a1 + 32) = CFRetain(MutableCopy);
    CFRelease(v7);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeAttributeSetCFString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && a2
    && a3
    && (*(void *)(a1 + 32)
     || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
         CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
         (*(void *)(a1 + 32) = Mutable) != 0)))
  {
    FigCFDictionarySetValue();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeAttributeSetInt64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && a2
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFStringRef v7 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%lld", a3)) != 0))
  {
    CFStringRef v8 = v7;
    uint64_t v9 = FigXMLNodeAttributeSetCFString(a1, a2, (uint64_t)v7);
    CFRelease(v8);
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeAttributeSetDouble(uint64_t a1, uint64_t a2, double a3)
{
  if (a1
    && a2
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFStringRef v7 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%f", *(void *)&a3)) != 0))
  {
    CFStringRef v8 = v7;
    uint64_t v9 = FigXMLNodeAttributeSetCFString(a1, a2, (uint64_t)v7);
    CFRelease(v8);
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigXMLNodeWriteToFilePath(uint64_t a1, const __CFURL *a2)
{
  uint64_t v14 = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigXMLNodeCreateDocFromNode(AllocatorForMedia, a1, &v14))
  {
    uint64_t v10 = 0xFFFFFFFFLL;
  }
  else
  {
    CFStringRef PathComponent = CFURLCopyLastPathComponent(a2);
    if (PathComponent)
    {
      CFStringRef v6 = PathComponent;
      CFAllocatorRef v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v8 = CFURLCreateCopyDeletingLastPathComponent(v7, a2);
      if (v8)
      {
        CFURLRef v9 = v8;
        uint64_t v10 = ps_writeXMLDocToFileAtomically(v8, v6, v14);
        CFRelease(v6);
        CFStringRef v11 = (const __CFString *)v9;
      }
      else
      {
        uint64_t v10 = FigSignalErrorAt();
        CFStringRef v11 = v6;
      }
      CFRelease(v11);
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
    }
  }
  uint64_t v12 = v14;
  if (v14 && !figXMLEnsureLibraryIsInitialized()) {
    s_ps_xmlFreeDoc(v12);
  }
  return v10;
}

void *initLibXMLLibrary()
{
  CFArrayRef result = dlopen("/usr/lib/libxml2.dylib", 6);
  if (result)
  {
    uint64_t v1 = result;
    s_ps_xmlAddChild = dlsym(result, "xmlAddChild");
    s_ps_xmlBufferContent = dlsym(v1, "xmlBufferContent");
    s_ps_xmlBufferCreate = dlsym(v1, "xmlBufferCreate");
    s_ps_xmlBufferFree = dlsym(v1, "xmlBufferFree");
    s_ps_xmlBufferCFIndex Length = dlsym(v1, "xmlBufferLength");
    s_ps_xmlFreeFunc = (uint64_t)dlsym(v1, "xmlFree");
    s_ps_xmlFree = *(_UNKNOWN **)s_ps_xmlFreeFunc;
    s_ps_xmlFreeDoc = dlsym(v1, "xmlFreeDoc");
    s_ps_xmlFreeNode = (uint64_t)dlsym(v1, "xmlFreeNode");
    s_ps_xmlGetuint64_t Prop = dlsym(v1, "xmlGetProp");
    s_ps_xmlNewNode = dlsym(v1, "xmlNewNode");
    s_ps_xmlNewuint64_t Prop = dlsym(v1, "xmlNewProp");
    s_ps_xmlNodeAddContent = (uint64_t)dlsym(v1, "xmlNodeAddContent");
    s_ps_xmlNodeGetContent = dlsym(v1, "xmlNodeGetContent");
    s_ps_xmlNodeSetContent = dlsym(v1, "xmlNodeSetContent");
    s_ps_xmlReadFile = (uint64_t)dlsym(v1, "xmlReadFile");
    s_ps_xmlNewDoc = dlsym(v1, "xmlNewDoc");
    s_ps_xmlDocDumpFormatuint64_t Memory = (uint64_t)dlsym(v1, "xmlDocDumpFormatMemory");
    s_ps_xmlDocSetRootElement = dlsym(v1, "xmlDocSetRootElement");
    s_ps_xmlReaduint64_t Memory = dlsym(v1, "xmlReadMemory");
    s_ps_xmlSaveClose = dlsym(v1, "xmlSaveClose");
    s_ps_xmlSaveDoc = dlsym(v1, "xmlSaveDoc");
    s_ps_xmlSaveToBuffer = dlsym(v1, "xmlSaveToBuffer");
    s_ps_xmlStrEqual = (uint64_t)dlsym(v1, "xmlStrEqual");
    CFArrayRef result = dlsym(v1, "xmlEncodeEntitiesReentrant");
    s_ps_xmlEncodeEntitiesReentrant = result;
  }
  return result;
}

uint64_t ps_xmlNodeCopyContentAsCFString(uint64_t a1, CFStringRef *a2)
{
  uint64_t Content = s_ps_xmlNodeGetContent();
  CFArrayRef v4 = (const char *)Content;
  if (!a2)
  {
    uint64_t v7 = FigSignalErrorAt();
    if (!v4) {
      return v7;
    }
    goto LABEL_5;
  }
  if (Content)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v6 = CFStringCreateWithCString(AllocatorForMedia, v4, 0x8000100u);
    if (v6)
    {
      uint64_t v7 = 0;
      *a2 = v6;
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
LABEL_5:
    s_ps_xmlFree(v4);
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t xmlnode_registerClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gFigXMLNodeCFTypeID TypeID = result;
  return result;
}

void xmlNode_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CFArrayRef v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
  }
}

__CFString *xmlNode_copyDebugDesc(uint64_t a1)
{
  return xmlNode_copyDesc(a1, 0);
}

__CFString *xmlNode_copyDesc(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(AllocatorForMedia, 0);
  if (Mutable)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    CFArrayRef v7 = *(const __CFArray **)(a1 + 40);
    if (v7) {
      CFIndex Count = CFArrayGetCount(v7);
    }
    else {
      CFIndex Count = 0;
    }
    if (a2 < 1)
    {
      uint64_t v12 = 0;
      if (v6) {
LABEL_11:
      }
        CFStringAppendFormat(Mutable, 0, @"<[FigXMLNode %p] %@", a1, v6);
    }
    else
    {
      CFAllocatorRef v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableStringRef v11 = CFStringCreateMutable(v10, 0);
      if (!v11) {
        return Mutable;
      }
      uint64_t v12 = v11;
      uint64_t v13 = a2;
      do
      {
        CFStringAppend(v12, @"\t");
        --v13;
      }
      while (v13);
      CFStringAppend(Mutable, v12);
      if (v6) {
        goto LABEL_11;
      }
    }
    if (v8)
    {
      CFArrayRef v14 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
      CFIndex v15 = 0;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_14:
      for (CFIndex i = CFArrayGetCount(v14); v15 < i; CFIndex i = 0)
      {
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        uint64_t Value = FigCFDictionaryGetValue();
        CFStringAppendFormat(Mutable, 0, @" %@=%@", ValueAtIndex, Value);
        ++v15;
        if (v14) {
          goto LABEL_14;
        }
LABEL_15:
        ;
      }
    }
    else
    {
      CFArrayRef v14 = 0;
    }
    CFStringAppend(Mutable, @">");
    if (v27) {
      CFStringAppendFormat(Mutable, 0, @"%@", v27);
    }
    if (Count && (CFStringAppend(Mutable, @"\n"), Count >= 1))
    {
      uint64_t v19 = v6;
      CFIndex v20 = 0;
      uint64_t v21 = (a2 + 1);
      do
      {
        CFAllocatorRef v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v20);
        uint64_t v23 = (const void *)xmlNode_copyDesc(v22, v21);
        CFStringAppendFormat(Mutable, 0, @"%@", v23);
        if (v23) {
          CFRelease(v23);
        }
        ++v20;
      }
      while (Count != v20);
      char v24 = 1;
      uint64_t v6 = v19;
      if (!v19) {
        goto LABEL_39;
      }
    }
    else
    {
      char v24 = 0;
      if (!v6)
      {
LABEL_39:
        if (v12) {
          CFRelease(v12);
        }
        if (v14) {
          CFRelease(v14);
        }
        return Mutable;
      }
    }
    char v25 = v24 ^ 1;
    if (!v12) {
      char v25 = 1;
    }
    if ((v25 & 1) == 0) {
      CFStringAppend(Mutable, v12);
    }
    CFStringAppendFormat(Mutable, 0, @"</%@>\n", v6);
    goto LABEL_39;
  }
  return Mutable;
}

uint64_t DummyDataProc(uint64_t a1, uint64_t *a2, uint64_t *a3, __CFData *a4, __CFData *a5, void *a6)
{
  return 0;
}

void FigCEA608Parser::~FigCEA608Parser(FigCEA608Parser *this)
{
  CEA608Parser::~CEA608Parser(this);

  JUMPOUT(0x199710860);
}

uint64_t cdp_sequence_cntr(const unsigned __int8 *a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 5)) >> 16;
}

uint64_t FigCEA608CaptionDecoderCreate(int a1, CMFormatDescriptionRef desc, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  if (a4) {
    BOOL v6 = a3 != 0;
  }
  else {
    BOOL v6 = 0;
  }
  if ((a3 != 0) == (a4 != 0) && a6 && desc)
  {
    MediaSubuint64_t Type = CMFormatDescriptionGetMediaSubType(desc);
    if (MediaSubType > 1664561207)
    {
      if (MediaSubType == 1664561208) {
        goto LABEL_13;
      }
      int v9 = 1882599480;
    }
    else
    {
      if (MediaSubType == 1635017571) {
        goto LABEL_13;
      }
      int v9 = 1664495672;
    }
    if (MediaSubType != v9)
    {
      uint64_t v13 = FigSignalErrorAt();
      if (v13) {
        return v13;
      }
    }
LABEL_13:
    FigCaptionDecoderGetClassID();
    if (!CMDerivedObjectCreate())
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v11 = DerivedStorage;
      if (!v6
        || (*(void *)(DerivedStorage + 16) = a3,
            uint64_t v12 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
            (*(void *)(v11 + 24) = v12) != 0))
      {
        *(void *)UInt8 bytes = cea608dec_rendererCallback;
        CFTypeRef v16 = cf;
        operator new();
      }
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

void sub_19415CFE4(_Unwind_Exception *a1)
{
  MEMORY[0x199710860](v1, 0x10A1C4035A3BD56);
  _Unwind_Resume(a1);
}

void cea608dec_rendererCallback(uint64_t a1, const __CFDictionary *a2, CMTime *a3, const void *a4)
{
  if (a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(void *)(DerivedStorage + 16))
    {
      uint64_t v8 = DerivedStorage;
      uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        CFAllocatorRef v10 = (const void *)v9;
        uint64_t v11 = *(void (**)(uint64_t, const __CFDictionary *, long long *, uint64_t))(v8 + 16);
        long long v12 = *(_OWORD *)&a3->value;
        CMTimeEpoch epoch = a3->epoch;
        v11(a1, a2, &v12, v9);
        CFRelease(v10);
      }
    }
  }
}

void FigCEA608DecoderFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[10];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[10] = 0;
  }
  void *DerivedStorage = 0;
  uint64_t v2 = DerivedStorage[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DerivedStorage[1] = 0;
  uint64_t v3 = (const void *)DerivedStorage[4];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[4] = 0;
  }
  CFArrayRef v4 = (const void *)DerivedStorage[3];
  if (v4)
  {
    CFRelease(v4);
  }
}

__CFString *FigCEA608DecoderCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<CEA608CaptionDecoder %p>", a1);
  return Mutable;
}

uint64_t FigCEA608DecoderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t v7 = DerivedStorage, FigCFEqual()))
  {
    *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(v7 + 120));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCEA608DecoderSetProperty(uint64_t a1, uint64_t a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (BOOL v6 = (_DWORD *)DerivedStorage, FigCFEqual())
    && (int valuePtr = 0, a3)
    && (CFTypeID v7 = CFGetTypeID(a3), v7 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    int v8 = valuePtr;
    if ((valuePtr - 5) <= 0xFFFFFFFB)
    {
      return FigSignalErrorAt();
    }
    else
    {
      if (v6[30] != valuePtr)
      {
        v6[30] = valuePtr;
        unsigned int v9 = v8 & 0xFFFFFFFD;
        unsigned int v10 = 2 * (((v8 - 2) & 0xFFFFFFFD) == 0);
        if (v9 == 1) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = v10;
        }
        (*(void (**)(void, uint64_t))(**(void **)v6 + 72))(*(void *)v6, v11);
      }
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCEA608PushSample(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
  if (*(void *)(DerivedStorage + 32))
  {
    CMTime v81 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    uint64_t v6 = FigCEA608RenderToTime(a1, &v81, 0);
    if (v6) {
      return v6;
    }
  }
  if (!a2) {
    return 0;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubuint64_t Type = CMFormatDescriptionGetMediaSubType(FormatDescription);
  int v9 = MediaSubType;
  uint64_t v10 = 0;
  if (MediaSubType > 1664561207)
  {
    if (MediaSubType == 1664561208) {
      goto LABEL_12;
    }
    int v11 = 1882599480;
  }
  else
  {
    if (MediaSubType == 1635017571) {
      goto LABEL_12;
    }
    int v11 = 1664495672;
  }
  if (MediaSubType != v11) {
    uint64_t v10 = FigSignalErrorAt();
  }
LABEL_12:
  Decryptor = (const void *)FigSampleBufferGetDecryptor();
  if (Decryptor)
  {
    uint64_t v13 = Decryptor;
    if (Decryptor != *(const void **)(DerivedStorage + 80))
    {
      CFTypeID v14 = CFGetTypeID(Decryptor);
      uint64_t TypeID = FigCPECryptorGetTypeID();
      CFTypeRef v16 = *(const void **)(DerivedStorage + 80);
      if (v14 == TypeID)
      {
        *(void *)(DerivedStorage + 80) = v13;
        CFRetain(v13);
        if (v16) {
          CFRelease(v16);
        }
      }
      else if (v16)
      {
        CFRelease(*(CFTypeRef *)(DerivedStorage + 80));
        *(void *)(DerivedStorage + 80) = 0;
      }
    }
  }
  if (v9 == 1882599480 && !*(void *)(DerivedStorage + 80)) {
    return 4294955138;
  }
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (DataBuffer) {
    uint64_t v18 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(DerivedStorage + 80);
  if (!v19) {
    goto LABEL_51;
  }
  size_t DataLength = CMBlockBufferGetDataLength(v18);
  CMBlockBufferRef blockBufferOut = 0;
  destination.CMTimeValue value = 0;
  int IsRangeContiguous = CMBlockBufferIsRangeContiguous(v18, 0, DataLength);
  CFAllocatorRef v22 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (IsRangeContiguous)
  {
    if (v18) {
      uint64_t v23 = (OpaqueCMBlockBuffer *)CFRetain(v18);
    }
    else {
      uint64_t v23 = 0;
    }
    CMBlockBufferRef blockBufferOut = v23;
    CFAllocatorRef v24 = *v22;
  }
  else
  {
    CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v25 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
    if (v25)
    {
      uint64_t v10 = v25;
      if (!v18) {
        return v10;
      }
      goto LABEL_186;
    }
  }
  uint64_t v26 = CMBlockBufferCreateWithMemoryBlock(v24, 0, DataLength, v24, 0, 0, DataLength, 1u, (CMBlockBufferRef *)&destination);
  if (v26)
  {
    uint64_t v10 = v26;
LABEL_44:
    CMTimeValue v32 = 0;
    goto LABEL_45;
  }
  CMBlockBufferRef v27 = blockBufferOut;
  CMTimeValue value = destination.value;
  CFRange v29 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  if (*v30 < 4uLL || (uint64_t v31 = (uint64_t (*)(uint64_t, CMBlockBufferRef, CMTimeValue))v30[4]) == 0)
  {
    uint64_t v10 = 4294954514;
LABEL_42:
    if (destination.value) {
      CFRelease((CFTypeRef)destination.value);
    }
    goto LABEL_44;
  }
  uint64_t v10 = v31(v19, v27, value);
  if (v10) {
    goto LABEL_42;
  }
  CMTimeValue v32 = destination.value;
  destination.CMTimeValue value = 0;
LABEL_45:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v10) {
    goto LABEL_183;
  }
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v10 = 0;
  uint64_t v18 = (OpaqueCMBlockBuffer *)v32;
LABEL_51:
  if (v18)
  {
    if (v9 <= 1664561207)
    {
      if (v9 != 1635017571)
      {
        int v33 = 1664495672;
LABEL_57:
        if (v9 != v33) {
          goto LABEL_172;
        }
        size_t v34 = CMBlockBufferGetDataLength(v18);
        size_t v35 = 0;
        if ((*(_DWORD *)(DerivedStorage + 120) - 3) >= 2) {
          unsigned int v36 = 1667522932;
        }
        else {
          unsigned int v36 = 1667527730;
        }
        unsigned int v37 = bswap32(v36);
        *(void *)(DerivedStorage + 32) = 0;
        while (1)
        {
          size_t v38 = v35 + 8;
          if (v35 + 8 > v34)
          {
            uint64_t v10 = 0;
            goto LABEL_172;
          }
          uint64_t Contiguous = CMBlockBufferCopyDataBytes(v18, v35, 8uLL, &destination);
          if (Contiguous) {
            goto LABEL_68;
          }
          unsigned int v40 = bswap32(destination.value);
          if (v40 <= 7) {
            break;
          }
          v35 += v40;
          if (v35 > v34) {
            break;
          }
          if (HIDWORD(destination.value) == v37)
          {
            uint64_t Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v38, v40 - 8, 0, v5);
            goto LABEL_68;
          }
        }
        uint64_t Contiguous = FigSignalErrorAt();
        goto LABEL_68;
      }
      CMBlockBufferRef blockBufferOut = 0;
      destination.CMTimeValue value = 0;
      CMBlockBufferRef theBuffer = 0;
      CMBlockBufferRef targetBBuf = 0;
      size_t v41 = CMBlockBufferGetDataLength(v18);
      *CFTypeRef v5 = 0;
      if (CMBlockBufferIsRangeContiguous(v18, 0, v41))
      {
        uint64_t v42 = (OpaqueCMBlockBuffer *)CFRetain(v18);
        CMBlockBufferRef blockBufferOut = v42;
      }
      else
      {
        uint64_t DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
        if (DataPointer) {
          goto LABEL_194;
        }
        uint64_t v42 = blockBufferOut;
      }
      uint64_t DataPointer = CMBlockBufferGetDataPointer(v42, 0, 0, 0, (char **)&destination);
      if (!DataPointer)
      {
        if (v41 >= 8)
        {
          uint64_t v46 = 0;
          uint64_t v47 = (unsigned char *)destination.value;
          while (1)
          {
            if (*v47 != 71 || v47[1] != 65 || v47[2] != 57 || v47[3] != 52 || v47[4] != 3)
            {
              destination.CMTimeValue value = (CMTimeValue)++v47;
              --v41;
              goto LABEL_96;
            }
            destination.CMTimeValue value = (CMTimeValue)(v47 + 5);
            unint64_t v48 = 3 * (v47[5] & 0x1F) + 2;
            BOOL v57 = v41 - 5 >= v48;
            size_t v41 = v41 - 5 - v48;
            if (!v57)
            {
              uint64_t appended = FigSignalErrorAt();
LABEL_198:
              uint64_t v10 = appended;
              goto LABEL_160;
            }
            if ((v47[5] & 0x40) != 0)
            {
              uint64_t appended = createBBufFromCCData((uint64_t)(v47 + 7), v47[5] & 0x1F, *(_DWORD *)(DerivedStorage + 120), &targetBBuf);
              if (appended) {
                goto LABEL_198;
              }
              CMBlockBufferRef v49 = targetBBuf;
              if (targetBBuf)
              {
                if (!v46)
                {
                  CMBlockBufferRef targetBBuf = 0;
                  goto LABEL_94;
                }
                uint64_t appended = CMBlockBufferAppendBufferReference(v46, targetBBuf, 0, 0, 0);
                if (appended) {
                  goto LABEL_198;
                }
                if (targetBBuf)
                {
                  CFRelease(targetBBuf);
                  CMBlockBufferRef targetBBuf = 0;
                }
              }
            }
            CMBlockBufferRef v49 = v46;
LABEL_94:
            uint64_t v47 = (unsigned char *)(destination.value + v48);
            destination.value += v48;
            uint64_t v46 = v49;
LABEL_96:
            if (v41 <= 7)
            {
              if (v46 && !CMBlockBufferIsEmpty(v46))
              {
                if (CMBlockBufferIsRangeContiguous(v46, 0, 0))
                {
                  CFTypeRef v50 = (OpaqueCMBlockBuffer *)CFRetain(v46);
LABEL_159:
                  uint64_t v10 = 0;
                  *CFTypeRef v5 = v50;
                  CMBlockBufferRef theBuffer = 0;
                  goto LABEL_160;
                }
                uint64_t appended = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v46, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &theBuffer);
                if (!appended)
                {
                  CFTypeRef v50 = theBuffer;
                  goto LABEL_159;
                }
                goto LABEL_198;
              }
              uint64_t v10 = 0;
LABEL_160:
              if (targetBBuf) {
                CFRelease(targetBBuf);
              }
              if (v46)
              {
                CMBlockBufferRef v71 = v46;
                goto LABEL_169;
              }
              goto LABEL_170;
            }
          }
        }
        uint64_t v10 = 0;
LABEL_100:
        uint64_t v46 = 0;
        goto LABEL_160;
      }
LABEL_194:
      uint64_t v10 = DataPointer;
      goto LABEL_100;
    }
    if (v9 != 1664561208)
    {
      int v33 = 1882599480;
      goto LABEL_57;
    }
    size_t v43 = CMBlockBufferGetDataLength(v18);
    CMBlockBufferRef targetBBuf = 0;
    CMBlockBufferRef blockBufferOut = 0;
    CMBlockBufferRef v83 = 0;
    CMBlockBufferRef theBuffer = 0;
    CMBlockBufferRef v82 = 0;
    *CFTypeRef v5 = 0;
    if (CMBlockBufferIsRangeContiguous(v18, 0, v43))
    {
      uint64_t v44 = (OpaqueCMBlockBuffer *)CFRetain(v18);
      CMBlockBufferRef blockBufferOut = v44;
    }
    else
    {
      uint64_t Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
      if (Contiguous)
      {
LABEL_68:
        uint64_t v10 = Contiguous;
        goto LABEL_172;
      }
      uint64_t v44 = blockBufferOut;
    }
    uint64_t v51 = CMBlockBufferGetDataPointer(v44, 0, 0, 0, (char **)&targetBBuf);
    if (v51)
    {
      uint64_t v10 = v51;
      goto LABEL_170;
    }
    CFAllocatorRef blockAllocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v52 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &theBuffer);
    if (v52)
    {
      uint64_t v10 = v52;
      goto LABEL_170;
    }
    if (v43 >= 9)
    {
      CFMutableArrayRef v53 = (unsigned int *)targetBBuf;
      while (1)
      {
        unint64_t v54 = bswap32(*v53);
        unint64_t v55 = v43 - v54;
        if (v43 < v54) {
          break;
        }
        unint64_t v56 = v54 - 8;
        BOOL v57 = v53[1] == 1885627235 && v56 >= 0xC;
        if (v57)
        {
          uint64_t v58 = (unsigned __int8 *)(v53 + 2);
          while (*v58 == 150)
          {
            if (v58[1] != 105) {
              break;
            }
            unint64_t v59 = v58[2];
            BOOL v57 = v56 >= v59;
            v56 -= v59;
            if (!v57) {
              break;
            }
            int v60 = v58[3] >> 4;
            if (v60 != *(unsigned __int8 *)(DerivedStorage + 116))
            {
              switch(v60)
              {
                case 1:
                  int64_t v61 = 1001;
                  int32_t v62 = 24000;
                  break;
                case 2:
                  int64_t v61 = 1;
                  int32_t v62 = 24;
                  break;
                case 3:
                  int64_t v61 = 1;
                  int32_t v62 = 25;
                  break;
                case 4:
                  int64_t v61 = 1001;
                  int32_t v62 = 30000;
                  break;
                case 5:
                  int64_t v61 = 1;
                  int32_t v62 = 30;
                  break;
                case 6:
                  int64_t v61 = 1;
                  int32_t v62 = 50;
                  break;
                case 7:
                  int64_t v61 = 1001;
                  int32_t v62 = 60000;
                  break;
                case 8:
                  int64_t v61 = 1;
                  int32_t v62 = 60;
                  break;
                default:
                  goto LABEL_153;
              }
              CMTimeMake(&destination, v61, v62);
              *(CMTime *)(DerivedStorage + 92) = destination;
              *(unsigned char *)(DerivedStorage + 116) = v60;
            }
            uint64_t v63 = 7;
            if ((v58[4] & 0x80u) != 0) {
              uint64_t v63 = 12;
            }
            if ((v58[4] & 0x40) != 0)
            {
              uint64_t v64 = &v58[v63];
              if (*v64 != 114) {
                goto LABEL_153;
              }
              uint64_t v65 = 3 * (v64[1] & 0x1F) + 2;
              if (v65 > v59 || &v64[v65] > (unsigned __int8 *)targetBBuf + v43) {
                goto LABEL_153;
              }
              uint64_t v67 = createBBufFromCCData((uint64_t)(v64 + 2), v64[1] & 0x1F, *(_DWORD *)(DerivedStorage + 120), &v83);
              if (v67) {
                goto LABEL_154;
              }
              if (v83)
              {
                uint64_t v68 = CMBlockBufferAppendBufferReference(theBuffer, v83, 0, 0, 0);
                if (v68)
                {
                  uint64_t v10 = v68;
                  goto LABEL_192;
                }
                if (v83)
                {
                  CFRelease(v83);
                  CMBlockBufferRef v83 = 0;
                }
              }
            }
            v58 += v59;
            if (v56 <= 0xB)
            {
              CFMutableArrayRef v53 = (unsigned int *)targetBBuf;
              unint64_t v55 = v43 - v54;
              goto LABEL_148;
            }
          }
          break;
        }
LABEL_148:
        CFMutableArrayRef v53 = (unsigned int *)((char *)v53 + v54);
        CMBlockBufferRef targetBBuf = (CMBlockBufferRef)v53;
        size_t v43 = v55;
        if (v55 <= 8) {
          goto LABEL_149;
        }
      }
LABEL_153:
      uint64_t v67 = FigSignalErrorAt();
LABEL_154:
      uint64_t v10 = v67;
      CFTypeRef v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
      goto LABEL_168;
    }
LABEL_149:
    if (CMBlockBufferIsEmpty(theBuffer))
    {
      uint64_t v10 = 0;
LABEL_192:
      CFTypeRef v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
      goto LABEL_166;
    }
    CFTypeRef v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
    if (CMBlockBufferIsRangeContiguous(theBuffer, 0, 0))
    {
      if (theBuffer) {
        uint64_t v69 = (void *)CFRetain(theBuffer);
      }
      else {
        uint64_t v69 = 0;
      }
    }
    else
    {
      uint64_t v70 = CMBlockBufferCreateContiguous(blockAllocator, theBuffer, blockAllocator, 0, 0, 0, 0, &v82);
      if (v70)
      {
        uint64_t v10 = v70;
LABEL_166:
        if (v83) {
          CFRelease(v83);
        }
LABEL_168:
        CMBlockBufferRef v71 = theBuffer;
        if (theBuffer) {
LABEL_169:
        }
          CFRelease(v71);
LABEL_170:
        if (blockBufferOut) {
          CFRelease(blockBufferOut);
        }
LABEL_172:
        if (!v10)
        {
          if (!*v5)
          {
            uint64_t v10 = 0;
LABEL_186:
            CFRelease(v18);
            return v10;
          }
          *(void *)(DerivedStorage + 40) = 0;
          CMSampleBufferGetOutputPresentationTimeStamp(&destination, a2);
          *(CMTime *)(DerivedStorage + 48) = destination;
          CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
          LOBYTE(destination.CFDictionaryAddValue(theDict, key, value) = 0;
          if (SampleAttachmentsArray && (CFArrayRef v73 = SampleAttachmentsArray, CFArrayGetCount(SampleAttachmentsArray) >= 1))
          {
            CFArrayGetValueAtIndex(v73, 0);
            FigCFDictionaryGetBooleanIfPresent();
            char v74 = destination.value;
          }
          else
          {
            char v74 = 0;
          }
          *(unsigned char *)(DerivedStorage + 72) = v74;
          CFArrayRef v75 = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
          LOBYTE(destination.CFDictionaryAddValue(theDict, key, value) = 0;
          if (v75 && (CFArrayRef v76 = v75, CFArrayGetCount(v75) >= 1))
          {
            CFArrayGetValueAtIndex(v76, 0);
            FigCFDictionaryGetBooleanIfPresent();
            char v77 = destination.value;
          }
          else
          {
            char v77 = 0;
          }
          uint64_t v10 = 0;
          *(unsigned char *)(DerivedStorage + 73) = v77;
        }
LABEL_183:
        if (!v18) {
          return v10;
        }
        goto LABEL_186;
      }
      uint64_t v69 = v82;
    }
    uint64_t v10 = 0;
    *(void *)(DerivedStorage + 32) = v69;
    CMBlockBufferRef v82 = 0;
    goto LABEL_166;
  }
  return v10;
}

uint64_t FigCEA608RenderToTime(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 32);
  if (!v6) {
    return 0;
  }
  dataPointerOut = 0;
  totalLengthOut[0] = 0;
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  v44[0] = *MEMORY[0x1E4F1DB28];
  v44[1] = v7;
  v43[0] = v44[0];
  v43[1] = v7;
  long long v41 = *MEMORY[0x1E4F1F9F8];
  uint64_t v42 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  int v8 = *(_DWORD *)(DerivedStorage + 120) - 1;
  if (v8 > 3) {
    int v9 = 0;
  }
  else {
    int v9 = dword_194996520[v8];
  }
  CMBlockBufferGetDataPointer(v6, 0, 0, totalLengthOut, &dataPointerOut);
  if ((*(_DWORD *)(DerivedStorage + 60) & 0x1D) != 1)
  {
    long long v11 = *MEMORY[0x1E4F1FA10];
    a2->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    *(_OWORD *)&a2->CMTimeValue value = v11;
  }
  long long v12 = (_OWORD *)(DerivedStorage + 48);
  if ((~a2->flags & 5) != 0)
  {
    float v15 = (float)*(int *)(DerivedStorage + 100) / (float)*(uint64_t *)(DerivedStorage + 92);
    CMTime lhs = *a2;
    *(_OWORD *)&rhs.CMTimeValue value = *v12;
    rhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 64);
    CMTimeSubtract(&time, &lhs, &rhs);
    float v16 = CMTimeGetSeconds(&time) * v15;
    size_t v17 = 2 * (unint64_t)v16 + 2;
    if (v16 <= 0.0) {
      size_t v17 = 2;
    }
    unint64_t v14 = *(void *)(DerivedStorage + 40);
    if (v17 <= v14 + 2) {
      size_t v17 = v14 + 2;
    }
    if (v17 >= totalLengthOut[0]) {
      size_t v13 = totalLengthOut[0];
    }
    else {
      size_t v13 = v17;
    }
  }
  else
  {
    size_t v13 = totalLengthOut[0];
    unint64_t v14 = *(void *)(DerivedStorage + 40);
  }
  uint64_t v18 = (unint64_t *)(DerivedStorage + 40);
  if (v14 >= v13)
  {
    uint64_t v10 = 0;
    BOOL v20 = 1;
  }
  else
  {
    do
    {
      CMTime v37 = *(CMTime *)(DerivedStorage + 92);
      *(_OWORD *)&v36.CMTimeValue value = *v12;
      v36.CMTimeEpoch epoch = *(void *)(DerivedStorage + 64);
      currentTimeFromBytePositionFrameRateAndStartTime(&v37, &v36, v14, (uint64_t)&v41);
      uint64_t v10 = CEA608Parser::ProcessCodePair(*(CEA608Parser **)(DerivedStorage + 8), (const unsigned __int8 *)dataPointerOut, (uint64_t *)(DerivedStorage + 40), v13, v9);
      if ((*(unsigned int (**)(void))(**(void **)DerivedStorage + 56))()
        && !*(unsigned char *)(DerivedStorage + 72)
        && !*(unsigned char *)(DerivedStorage + 73)
        && !v10)
      {
        uint64_t v19 = *(void *)DerivedStorage;
        long long v34 = v41;
        uint64_t v35 = v42;
        (*(void (**)(uint64_t, void, long long *, _OWORD *, _OWORD *))(*(void *)v19 + 216))(v19, 0, &v34, v44, v43);
      }
      unint64_t v14 = *v18;
      BOOL v20 = v10 == 0;
    }
    while (*v18 < v13 && !v10);
  }
  if ((*(unsigned int (**)(void))(**(void **)DerivedStorage + 56))()
    && (*(unsigned char *)(DerivedStorage + 72) ? (BOOL v21 = v20) : (BOOL v21 = 0), v21))
  {
    uint64_t v22 = *(void *)DerivedStorage;
    long long v32 = v41;
    uint64_t v33 = v42;
    (*(void (**)(uint64_t, void, long long *, _OWORD *, _OWORD *))(*(void *)v22 + 216))(v22, 0, &v32, v44, v43);
    uint64_t v10 = 0;
    size_t v23 = totalLengthOut[0];
  }
  else
  {
    size_t v23 = totalLengthOut[0];
    if (v10 == -12560)
    {
      uint64_t v10 = 0;
      if (v13 == totalLengthOut[0])
      {
        unint64_t *v18 = v13;
        size_t v23 = v13;
      }
    }
  }
  uint64_t v24 = *v18;
  if (*v18 == v23)
  {
    CFRelease(*(CFTypeRef *)(DerivedStorage + 32));
    *(void *)(DerivedStorage + 32) = 0;
    *(void *)(DerivedStorage + 40) = 0;
    uint64_t v25 = (long long *)MEMORY[0x1E4F1F9F8];
    _OWORD *v12 = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 64) = *((void *)v25 + 2);
    *(_WORD *)(DerivedStorage + 72) = 0;
    if (a3)
    {
      long long v26 = *v25;
      *(void *)(a3 + 16) = *((void *)v25 + 2);
      *(_OWORD *)a3 = v26;
    }
  }
  else if (a3)
  {
    CMTime v29 = *(CMTime *)(DerivedStorage + 92);
    *(_OWORD *)&v28.CMTimeValue value = *v12;
    v28.CMTimeEpoch epoch = *(void *)(DerivedStorage + 64);
    currentTimeFromBytePositionFrameRateAndStartTime(&v29, &v28, v24, (uint64_t)&v30);
    *(_OWORD *)a3 = v30;
    *(void *)(a3 + 16) = v31;
  }
  return v10;
}

uint64_t FigCEA608ResetAtTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  v12[0] = *MEMORY[0x1E4F1DB28];
  v12[1] = v4;
  v11[0] = v12[0];
  v11[1] = v4;
  CEA608Parser::Reset(DerivedStorage[1]);
  (*(void (**)(void))(*(void *)*DerivedStorage + 208))();
  if ((*(unsigned int (**)(void))(*(void *)*DerivedStorage + 56))())
  {
    uint64_t v5 = *DerivedStorage;
    long long v9 = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    (*(void (**)(uint64_t, void, long long *, _OWORD *, _OWORD *))(*(void *)v5 + 216))(v5, 0, &v9, v12, v11);
  }
  uint64_t v6 = (const void *)DerivedStorage[4];
  if (v6)
  {
    CFRelease(v6);
    uint64_t v7 = MEMORY[0x1E4F1F9F8];
    DerivedStorage[4] = 0;
    DerivedStorage[5] = 0;
    *((_OWORD *)DerivedStorage + 3) = *(_OWORD *)v7;
    DerivedStorage[8] = *(void *)(v7 + 16);
    *((_WORD *)DerivedStorage + 36) = 0;
  }
  return 0;
}

uint64_t createBBufFromCCData(uint64_t a1, uint64_t a2, int a3, CMBlockBufferRef *a4)
{
  uint64_t v6 = a2;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
  size_t v9 = 2 * a2;
  uint64_t v10 = (char *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF90], 2 * a2, 0);
  if (!v10) {
    return 12;
  }
  long long v11 = v10;
  if (v6 < 1) {
    goto LABEL_14;
  }
  int64_t v12 = 0;
  size_t v13 = (char *)(a1 + 2);
  do
  {
    unsigned int v14 = *(v13 - 2);
    if (v14 >= 0xFC)
    {
      unsigned int v15 = v14 & 3;
      BOOL v16 = v15 > 1;
      int v17 = ((a3 - 5) < 0xFFFFFFFE) ^ (v15 == 1);
      if (!v16 && v17 != 0)
      {
        uint64_t v19 = &v10[v12];
        char *v19 = *(v13 - 1);
        v19[1] = *v13;
        v12 += 2;
      }
    }
    v13 += 3;
    --v6;
  }
  while (v6);
  if (v12 < 1)
  {
LABEL_14:
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, v9, v8, 0, 0, v12, 0, a4);
    if (!v20) {
      return v20;
    }
  }
  CFAllocatorDeallocate(v8, v11);
  return v20;
}

CMTime *currentTimeFromBytePositionFrameRateAndStartTime@<X0>(CMTime *a1@<X1>, CMTime *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTimeEpoch epoch = v13.epoch;
  *(_OWORD *)a4 = *(_OWORD *)&v13.value;
  *(void *)(a4 + 16) = epoch;
  if ((unint64_t)(a3 - 0x100000000) <= 0xFFFFFFFEFFFFFFFELL)
  {
    return (CMTime *)FigSignalErrorAt();
  }
  else
  {
    if (a3 >= 0) {
      unint64_t v7 = a3;
    }
    else {
      unint64_t v7 = a3 + 1;
    }
    CMTime time = *a1;
    CMTimeMultiply(&v13, &time, v7 >> 1);
    CMTime lhs = *a2;
    CMTime v9 = v13;
    uint64_t result = CMTimeAdd(&v11, &lhs, &v9);
    *(CMTime *)a4 = v11;
  }
  return result;
}

uint64_t FigDiskCacheRepositoryGetTypeID()
{
  if (sRegisterFigDiskCacheRepositoryTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigDiskCacheRepositoryTypeOnce, 0, (dispatch_function_t)RegisterFigDiskCacheRepositoryType);
  }
  return sFigDiskCacheRepositoryID;
}

uint64_t RegisterFigDiskCacheRepositoryType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigDiskCacheRepositoryID = result;
  return result;
}

uint64_t FigDiskCacheRepositoryCopyDefaultTmpDirURL(CFTypeRef *a1)
{
  if (a1)
  {
    *a1 = 0;
    uint64_t v3 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
    if (v3)
    {
      long long v4 = v3;
      *a1 = CFRetain(v3);
      CFRelease(v4);
      return 0;
    }
    else
    {
      return 4294954669;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fdcr_ReadRepositoryPlist(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v3 = (const __CFDictionary *)FigCFPropertyListCreateFromFigFileFork();
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFDictionaryGetTypeID())
    {
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      if (*(_DWORD *)(a1 + 128) || *(double *)(a1 + 120) != 0.0)
      {
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 72));
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 80));
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        *(unsigned char *)(a1 + 56) = 0;
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"checkedinlist");
        if (Value) {
          CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFStringToCFURLApplierFunction, *(void **)(a1 + 72));
        }
        if (*(unsigned char *)(a1 + 112))
        {
          CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(v4, @"checkedoutlist");
          if (v7) {
            CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFStringToCFURLApplierFunction, *(void **)(a1 + 80));
          }
        }
        *(void *)(a1 + 64) = 0;
        if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 104)) < 1)
        {
          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 96));
        }
        else
        {
          CFDictionaryRef Copy = CFDictionaryCreateCopy(v2, *(CFDictionaryRef *)(a1 + 96));
          CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)fdcr_CleanupCacheSizeListApplierFunction, (void *)a1);
          if (Copy) {
            CFRelease(Copy);
          }
        }
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_UpdateCacheSizeApplierFunction, (void *)a1);
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 80), (CFDictionaryApplierFunction)fdcr_UpdateCacheSizeApplierFunction, (void *)a1);
      }
    }
    CFRelease(v4);
  }
}

uint64_t FigDiskCacheRepositoryExists(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    if (FigCFURLDoesDirectoryExist()) {
      FigCFURLGetFileStats();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t fdcr_CheckInResource(uint64_t a1, const __CFString *a2, const void *a3, void *a4)
{
  int v8 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), a2);
  if (!v8)
  {
    CFTypeRef v10 = CFRetain(a2);
    CFURLRef v12 = 0;
LABEL_7:
    CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v10);
    if (Value)
    {
      CFURLRef v14 = Value;
      if (CFEqual(a3, Value)) {
        CFURLRef v15 = 0;
      }
      else {
        CFURLRef v15 = v14;
      }
    }
    else
    {
      CFURLRef v15 = 0;
    }
    int Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
    uint64_t updated = fdcr_UpdateCacheSize();
    if (updated) {
      goto LABEL_25;
    }
    if (Int64IfPresent) {
      *(void *)(a1 + 64) = *(void *)(a1 + 64);
    }
    if (v12) {
      fdcr_DeleteResource(v12);
    }
    if (v15) {
      fdcr_DeleteResource(v15);
    }
    if (v8)
    {
      if (FigCFDictionaryGetInt64IfPresent())
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 96), a2);
        *(void *)(a1 + 64) = *(void *)(a1 + 64);
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 80), a2);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 104), a2);
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v10, a3);
    if (!a4)
    {
LABEL_25:
      if (v10) {
        CFRelease(v10);
      }
    }
    else
    {
      uint64_t updated = 0;
      *a4 = v10;
    }
    return updated;
  }
  CFStringRef v9 = fdcr_CopyCheckInIDFromCheckOutID(a2);
  if (v9)
  {
    CFTypeRef v10 = v9;
    CFURLRef v11 = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2);
    if (CFEqual(a3, v11)) {
      CFURLRef v12 = 0;
    }
    else {
      CFURLRef v12 = v11;
    }
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

uint64_t markDiskCacheRepositoryPurgeable()
{
  return FigFileMarkPurgeable();
}

uint64_t fdcr_CheckOutResource(CFDictionaryRef *a1, const void *a2, CFTypeRef *a3, const void **a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFURLRef Value = CFDictionaryGetValue(a1[9], a2);
  if (!Value) {
    return 4294954671;
  }
  CFStringRef v9 = Value;
  if (a3) {
    *a3 = CFRetain(Value);
  }
  memset(out, 0, sizeof(out));
  memset(v12, 0, 37);
  uuid_generate_random(out);
  uuid_unparse_upper(out, v12);
  CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s=%@", v12, a2);
  *a4 = v10;
  CFDictionaryAddValue(a1[10], v10, v9);
  CFDictionaryAddValue(a1[13], *a4, v9);
  CFDictionaryRemoveValue(a1[9], a2);
  uint64_t result = FigCFDictionaryGetInt64IfPresent();
  if (result)
  {
    CFDictionaryRemoveValue(a1[12], a2);
    return FigCFDictionarySetInt64();
  }
  return result;
}

uint64_t FigDiskCacheRepositoryCheckInAndOut(uint64_t a1, const __CFString *a2, const void *a3, const void **a4)
{
  CFTypeRef cf = 0;
  uint64_t v16 = 0;
  if (a1 && a2 && a3 && a4)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v8 = FigCFURLCreateDirectory();
    if (v8)
    {
      uint64_t v9 = v8;
    }
    else if (FigFileForkOpenMainByCFURL())
    {
      uint64_t v9 = 0;
    }
    else
    {
      fdcr_ReadRepositoryPlist(a1);
      unsigned int v11 = fdcr_CheckInResource(a1, a2, a3, &cf);
      if (!v11) {
        unsigned int v11 = fdcr_CheckOutResource((CFDictionaryRef *)a1, cf, 0, a4);
      }
      uint64_t v12 = v16;
      char v13 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80)) == 0;
      unsigned int v14 = fdcr_WriteRepositoryPlist(a1, v12, 1, v13);
      if (v11) {
        uint64_t v9 = v11;
      }
      else {
        uint64_t v9 = v14;
      }
      FigFileForkClose();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDiskCacheRepositoryDelete(uint64_t a1, const __CFString *a2)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    if (FigFileForkOpenMainByCFURL())
    {
      uint64_t v4 = 0;
    }
    else
    {
      fdcr_ReadRepositoryPlist(a1);
      CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
      if (Value)
      {
        fdcr_DeleteCacheEntry(a1, a2, Value);
        uint64_t v4 = fdcr_WriteRepositoryPlist(a1, 0, 1, 0);
      }
      else
      {
        if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80)) >= 1) {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 88), a2, (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        uint64_t v4 = 0;
      }
      FigFileForkClose();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fdcr_DeleteCacheEntry(uint64_t a1, const __CFString *a2, const __CFURL *a3)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
  if (result)
  {
    fdcr_RemoveFromCacheFileSizeList(a1, a2);
    fdcr_DeleteResource(a3);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 88), a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), a2);
    return 1;
  }
  return result;
}

uint64_t FigDiskCacheRepositoryReserveBacking(uint64_t a1, const void *a2, uint64_t a3)
{
  CFArrayRef theArray = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 104), a2))
    {
      if (*(void *)(a1 + 48) >= a3)
      {
        FigCFDictionaryGetInt64IfPresent();
        uint64_t v8 = a3 + *(void *)(a1 + 64);
        if (v8 > *(void *)(a1 + 40) && !FigFileForkOpenMainByCFURL())
        {
          fdcr_ReadRepositoryPlist(a1);
          uint64_t v10 = fdcr_CopySortedCacheFileListCheckedIn(a1, &theArray);
          if (v10)
          {
            uint64_t v6 = v10;
            FigFileForkClose();
            goto LABEL_12;
          }
          uint64_t v11 = *(void *)(a1 + 40);
          uint64_t v12 = v8 - v11;
          if (v12 < 1)
          {
            int v13 = 0;
LABEL_23:
            uint64_t v8 = a3 + *(void *)(a1 + 64);
            if (v8 <= v11) {
              uint64_t v6 = 0;
            }
            else {
              uint64_t v6 = 4294954667;
            }
          }
          else
          {
            int v13 = 0;
            uint64_t v14 = 0;
            while (CFArrayGetCount(theArray))
            {
              uint64_t ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
              if (fdcr_DeleteCacheEntry(a1, *(const __CFString **)ValueAtIndex, *((const __CFURL **)ValueAtIndex + 1)))int v13 = 1; {
              v14 += *((void *)ValueAtIndex + 2);
              }
              CFArrayRemoveValueAtIndex(theArray, 0);
              free(ValueAtIndex);
              if (v14 >= v12)
              {
                uint64_t v11 = *(void *)(a1 + 40);
                goto LABEL_23;
              }
            }
            uint64_t v8 = *(void *)(a1 + 64);
            uint64_t v6 = 4294954667;
          }
          if (v13) {
            fdcr_WriteRepositoryPlist(a1, 0, 0, 0);
          }
          FigFileForkClose();
          if (v6) {
            goto LABEL_12;
          }
        }
        uint64_t v6 = FigCFDictionarySetInt64();
        if (!v6) {
          *(void *)(a1 + 64) = v8;
        }
        goto LABEL_12;
      }
      uint64_t v6 = 4294954668;
    }
    else
    {
      uint64_t v6 = 4294954671;
    }
LABEL_12:
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    CFArrayRef v7 = theArray;
    goto LABEL_13;
  }
  uint64_t v6 = FigSignalErrorAt();
  CFArrayRef v7 = 0;
LABEL_13:
  fdcr_PurgeFileInfoList(v7);
  return v6;
}

uint64_t fdcr_CopySortedCacheFileListCheckedIn(uint64_t a1, const __CFArray **a2)
{
  if (a2 && (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0)) != 0)
  {
    CFArrayRef v5 = Mutable;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_CreateFileInfoFromDictionaryApplierFunction, Mutable);
    v8.length = CFArrayGetCount(v5);
    v8.CFIndex location = 0;
    CFArraySortValues(v5, v8, (CFComparatorFunction)fdcr_OlderEntryFirstComparator, 0);
    uint64_t v6 = 0;
    *a2 = v5;
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  fdcr_PurgeFileInfoList(0);
  return v6;
}

void fdcr_PurgeFileInfoList(const __CFArray *a1)
{
  if (a1)
  {
    if (CFArrayGetCount(a1) >= 1)
    {
      do
      {
        uint64_t ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, 0);
        CFArrayRemoveValueAtIndex(a1, 0);
        free(ValueAtIndex);
      }
      while (CFArrayGetCount(a1) > 0);
    }
    CFRelease(a1);
  }
}

uint64_t FigDiskCacheRepositoryCopyCheckedInIDs(uint64_t a1, CFMutableArrayRef *a2)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    if (FigFileForkOpenMainByCFURL())
    {
      uint64_t v4 = 0;
      CFMutableArrayRef Mutable = 0;
    }
    else
    {
      fdcr_ReadRepositoryPlist(a1);
      CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 72);
      if (v7 && CFDictionaryGetCount(v7))
      {
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 72));
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, Count, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_CopyKeyIntoArray, Mutable);
          uint64_t v4 = 0;
        }
        else
        {
          uint64_t v4 = FigSignalErrorAt();
        }
      }
      else
      {
        uint64_t v4 = 0;
        CFMutableArrayRef Mutable = 0;
      }
      FigFileForkClose();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    *a2 = Mutable;
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fdcr_CopyKeyIntoArray(const void *a1, uint64_t a2, __CFArray *a3)
{
  if (a1)
  {
    if (a3)
    {
      CFTypeID v5 = CFGetTypeID(a1);
      if (v5 == CFStringGetTypeID())
      {
        CFArrayAppendValue(a3, a1);
      }
    }
  }
}

uint64_t FigDiskCacheRepositoryGetFileSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    if (FigCFDictionaryGetInt64IfPresent()) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = FigSignalErrorAt();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDiskCacheRepositoryCopyProperty(uint64_t a1, const void *a2, const void *a3, const __CFAllocator *a4, CFNumberRef *a5)
{
  if (a1 && a2 && a3 && a5)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    if (CFEqual(a3, @"FigDiskCacheRepository_Size"))
    {
      uint64_t valuePtr = 0;
      if (FigCFDictionaryGetInt64IfPresent())
      {
        uint64_t v10 = 0;
        *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
      }
      else
      {
        uint64_t v10 = FigSignalErrorAt();
      }
      goto LABEL_21;
    }
    if (!CFEqual(a3, @"FigDiskCacheRepository_LastModifiedDate"))
    {
      uint64_t v10 = 4294951026;
LABEL_21:
      MEMORY[0x19970E930](*(void *)(a1 + 16));
      return v10;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t valuePtr = 0;
    if (FigFileForkOpenMainByCFURL()) {
      goto LABEL_13;
    }
    fdcr_ReadRepositoryPlist(a1);
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2))
    {
      uint64_t v13 = FigCFURLGetFileStats();
      if (!v13)
      {
        CFDateRef v14 = CFDateCreate(a4, (double)v16 / 1000000000.0 + (double)valuePtr - *MEMORY[0x1E4F1CF78]);
        if (v14)
        {
          CFDateRef v12 = v14;
          FigFileForkClose();
          goto LABEL_20;
        }
        uint64_t v10 = FigSignalErrorAt();
        FigFileForkClose();
        if (v10) {
          goto LABEL_21;
        }
LABEL_13:
        CFDateRef v12 = 0;
LABEL_20:
        uint64_t v10 = 0;
        *a5 = v12;
        goto LABEL_21;
      }
      uint64_t v10 = v13;
    }
    else
    {
      uint64_t v10 = 4294954671;
    }
    FigFileForkClose();
    goto LABEL_21;
  }

  return FigSignalErrorAt();
}

uint64_t FigDiskCacheRepositoryMakeRoom(uint64_t a1, int a2, void *a3)
{
  CFArrayRef theArray = 0;
  uint64_t v12 = 0;
  if (!a1)
  {
    uint64_t v6 = FigSignalErrorAt();
    uint64_t v7 = 0;
    if (!a3) {
      return v6;
    }
    goto LABEL_16;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  if (FigFileForkOpenMainByCFURL())
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    fdcr_ReadRepositoryPlist(a1);
    uint64_t v6 = fdcr_CopySortedCacheFileListCheckedIn(a1, &theArray);
    if (v6 || !CFArrayGetCount(theArray))
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      int v8 = 0;
      do
      {
        uint64_t ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
        if (fdcr_DeleteCacheEntry(a1, *(const __CFString **)ValueAtIndex, *((const __CFURL **)ValueAtIndex + 1)))
        {
          v7 += *((void *)ValueAtIndex + 2);
          int v8 = 1;
        }
        CFArrayRemoveValueAtIndex(theArray, 0);
        free(ValueAtIndex);
      }
      while (a2 && CFArrayGetCount(theArray) > 0);
      if (v8) {
        fdcr_WriteRepositoryPlist(a1, v12, 0, 0);
      }
    }
    FigFileForkClose();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  fdcr_PurgeFileInfoList(theArray);
  if (a3) {
LABEL_16:
  }
    *a3 = v7;
  return v6;
}

double fdcr_Init(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t fdcr_Finalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  CFDictionaryRef v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = (const void *)a1[9];
  if (v4)
  {
    CFRelease(v4);
    a1[9] = 0;
  }
  CFTypeID v5 = (const void *)a1[10];
  if (v5)
  {
    CFRelease(v5);
    a1[10] = 0;
  }
  uint64_t v6 = (const void *)a1[11];
  if (v6)
  {
    CFRelease(v6);
    a1[11] = 0;
  }
  uint64_t v7 = (const void *)a1[12];
  if (v7)
  {
    CFRelease(v7);
    a1[12] = 0;
  }
  int v8 = (const void *)a1[13];
  if (v8)
  {
    CFRelease(v8);
    a1[13] = 0;
  }
  uint64_t result = a1[2];
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    a1[2] = 0;
  }
  return result;
}

__CFString *fdcr_CopyDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigDiskCacheRepository %p repository %@ sizeLimit %llu fileSizeLimit %llu currentSize %llu>", a1, a1[3], a1[5], a1[6], a1[8]);
  return Mutable;
}

CFStringRef fdcr_CopyCheckInIDFromCheckOutID(const __CFString *result)
{
  range.CFIndex location = 0;
  range.length = 0;
  if (result)
  {
    CFStringRef v1 = result;
    v4.length = CFStringGetLength(result);
    v4.CFIndex location = 0;
    if (CFStringFindWithOptions(v1, @"=", v4, 0, &range))
    {
      ++range.location;
      CFIndex Length = CFStringGetLength(v1);
      v5.CFIndex location = range.location;
      v5.length = Length - range.location;
      range.length = Length - range.location;
      return CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, v5);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t fdcr_UpdateCacheSize()
{
  uint64_t v1 = -1;
  uint64_t result = FigCFURLGetFileStats();
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t fdcr_DeleteResource(const __CFURL *a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    {
      uint64_t result = removefile((const char *)buffer, 0, 1u);
      if (result) {
        return (uint64_t)__error();
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fdcr_GetDirectoryStats(const __CFURL *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  v15[0] = (char *)buffer;
  v15[1] = 0;
  memset(&v14, 0, sizeof(v14));
  if (!a1 || !(a2 | a3) || !CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024)) {
    return FigSignalErrorAt();
  }
  if (stat((const char *)buffer, &v14) == -1) {
    return *__error();
  }
  CFRange v5 = fts_open(v15, 4, 0);
  if (!v5) {
    return FigSignalErrorAt();
  }
  uint64_t v6 = v5;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = fts_read(v6);
    if (!v9) {
      break;
    }
    uint64_t v10 = v9;
    if (v9->fts_info == 8)
    {
      unint64_t fts_namelen = v9->fts_namelen;
      if (fts_namelen < 7 || strncmp((const char *)&v9->fts_statp + fts_namelen + 2, ".plist", 6uLL))
      {
        fts_statp = v10->fts_statp;
        v8 += fts_statp->st_size;
        v7 += fts_statp->st_blocks;
      }
    }
  }
  if (a2) {
    *(void *)a2 = v8;
  }
  if (a3) {
    *(void *)a3 = v7 << 9;
  }
  fts_close(v6);
  return 0;
}

void fdcr_CreateFileInfoFromDictionaryApplierFunction(uint64_t a1, uint64_t a2, __CFArray *a3)
{
  if (a3)
  {
    uint64_t v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10600403247B118uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      *uint64_t v6 = a1;
      v6[1] = a2;
      if (fdcr_FigCFURLGetFileStats())
      {
        free(v7);
      }
      else
      {
        CFArrayAppendValue(a3, v7);
      }
    }
  }
}

uint64_t fdcr_OlderEntryFirstComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v2 < v3) {
    return -1;
  }
  if (v2 != v3) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  BOOL v7 = v5 < v6;
  BOOL v8 = v5 != v6;
  if (v7) {
    return -1;
  }
  else {
    return v8;
  }
}

uint64_t fdcr_FigCFURLGetFileStats()
{
  unint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (fdcr_FigCFURLGetFileStats_sLastStatUptimeNanoseconds + 60000000000 > UpTimeNanoseconds) {
    uint64_t v1 = fdcr_FigCFURLGetFileStats_sNumRecentStatCalls + 1;
  }
  else {
    uint64_t v1 = 0;
  }
  fdcr_FigCFURLGetFileStats_sNumRecentStatCalls = v1;
  fdcr_FigCFURLGetFileStats_sLastStatUptimeNanoseconds = UpTimeNanoseconds;
  if (v1 == 1)
  {
  }
  else if (v1)
  {
    if (v1 > 9)
    {
      if ((unint64_t)v1 > 0x63)
      {
        if ((unint64_t)v1 > 0x3E7)
        {
        }
        else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
        }
      }
      else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
      {
        __break(0xC471u);
      }
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return fdcr_FigCFURLGetFileStats_0_recent_stat_calls();
}

uint64_t fdcr_FigCFURLGetFileStats_0_recent_stat_calls()
{
  return FigCFURLGetFileStats();
}

void fdcr_RemoveFromCacheFileSizeList(uint64_t a1, const __CFString *a2)
{
  if (!FigCFDictionaryGetInt64IfPresent())
  {
    CFStringRef v5 = fdcr_CopyCheckInIDFromCheckOutID(a2);
    if (!v5) {
      return;
    }
    CFTypeRef v4 = v5;
    if (!FigCFDictionaryGetInt64IfPresent()) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    if (v4)
    {
LABEL_7:
      *(void *)(a1 + 64) = *(void *)(a1 + 64);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 96), v4);
LABEL_8:
      CFRelease(v4);
    }
  }
}

void fdcr_ConvertValueFromCFStringToCFURLApplierFunction(const void *a1, const __CFString *a2, __CFDictionary *a3)
{
  CFURLRef v5 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, kCFURLPOSIXPathStyle, 0);
  CFDictionaryAddValue(a3, a1, v5);
  if (v5)
  {
    CFRelease(v5);
  }
}

void fdcr_CleanupCacheSizeListApplierFunction(void *key, const __CFNumber *a2, uint64_t a3)
{
  uint64_t valuePtr = 0;
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 104), key))
  {
    CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
    *(void *)(a3 + 64) += valuePtr;
  }
  else
  {
    uint64_t v6 = *(__CFDictionary **)(a3 + 96);
    CFDictionaryRemoveValue(v6, key);
  }
}

const void *fdcr_UpdateCacheSizeApplierFunction(void *key, uint64_t a2, uint64_t a3)
{
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 104), key);
  if (!result)
  {
    return (const void *)fdcr_UpdateCacheSize();
  }
  return result;
}

void fdcr_ConvertValueFromCFURLToCFStringApplierFunction(const void *a1, CFURLRef anURL, __CFDictionary *a3)
{
  CFStringRef v5 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  CFDictionaryAddValue(a3, a1, v5);
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t fdcr_CleanCacheFileList(uint64_t a1, const __CFDictionary *a2)
{
  if (a2 && (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) != 0)
  {
    CFArrayRef v5 = Mutable;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fdcr_CopyNonExistentFileApplierFunction, Mutable);
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, i);
        CFDictionaryRemoveValue(a2, ValueAtIndex);
        fdcr_RemoveFromCacheFileSizeList(a1, ValueAtIndex);
      }
    }
    CFRelease(v5);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fdcr_IsResourceInUse(uint64_t a1, char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  p_UInt8 buffer = (char *)&buffer;
  uint64_t v6 = 0;
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  FigCFURLGetFileStats();
  if (FigFileForkOpenMainByCFURL())
  {
    char v4 = 1;
  }
  else
  {
    FigFileForkClose();
    char v4 = 0;
  }
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

void fdcr_CopyFilenameFromPathDictionaryApplierFunction(int a1, CFURLRef url, __CFSet *a3)
{
  if (a3)
  {
    CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
    if (PathComponent)
    {
      CFStringRef v5 = PathComponent;
      CFSetSetValue(a3, PathComponent);
      CFRelease(v5);
    }
  }
}

void fdcr_CopyNonExistentFileApplierFunction(const void *a1, uint64_t a2, __CFArray *a3)
{
  if (!FigFileDoesFileExist())
  {
    CFArrayAppendValue(a3, a1);
  }
}

uint64_t FigXPCCPEProtectorServerAssociateCopiedNeighborCPEProtector(_xpc_connection_s *a1)
{
  uint64_t v6 = 0;
  uint64_t pid = xpc_connection_get_pid(a1);
  uint64_t v2 = CreateServedCPEProtectorState(pid, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    uint64_t v4 = v2;
  }
  else
  {
    uint64_t v4 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
    if (!v4) {
      uint64_t v3 = 0;
    }
  }
  DisposeServedCPEProtectorState(v3);
  return v4;
}

uint64_t CreateServedCPEProtectorState(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v3 && (v4 = FigOSTransactionCreate(), (*uint64_t v3 = v4) != 0))
  {
    uint64_t v5 = 0;
    *a2 = v3;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  free(v3);
  return v5;
}

void DisposeServedCPEProtectorState(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      os_release(v2);
    }
    free(a1);
  }
}

uint64_t FigCPEProtectorServerStart()
{
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleCPEProtectorMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  cf[0] = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294951138;
  }
  return v6;
}

uint64_t FigSamplingEventIdentifierGetTypeID()
{
  if (FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce != -1) {
    dispatch_once(&FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce, &__block_literal_global_18);
  }
  return FigSamplingEventIdentifierGetTypeID_sSamplingEventIdentifierTypeID;
}

uint64_t __FigSamplingEventIdentifierGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigSamplingEventIdentifierGetTypeID_sSamplingEventIdentifieruint64_t TypeID = result;
  return result;
}

double samplingEventIdentifier_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void samplingEventIdentifier_finalize(uint64_t a1)
{
  if (dword_1E9350E80 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
}

BOOL samplingEventIdentifier_equal(CMTime *a1, uint64_t a2)
{
  CMTime time1 = a1[1];
  CMTime v3 = *(CMTime *)(a2 + 24);
  return !CMTimeCompare(&time1, &v3) && FigCFEqual() != 0;
}

CFStringRef samplingEventIdentifier_copyDebugDesc(CMTime *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFIndex v3 = CFGetRetainCount(a1);
  CMTime time = a1[1];
  Float64 Seconds = CMTimeGetSeconds(&time);
  return CFStringCreateWithFormat(v2, 0, @"<FigSamplingEventIdentifier %p retainCount: %d> pts: %.3f, samples: %@", a1, v3, *(void *)&Seconds, a1->epoch);
}

uint64_t FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID()
{
  if (FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken != -1) {
    dispatch_once(&FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken, &__block_literal_global_13);
  }
  return FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sReceiverPlaybackStartupPreventionAssertionTypeID;
}

uint64_t __FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sReceiverPlaybackStartupPreventionAssertionuint64_t TypeID = result;
  return result;
}

void *receiverPlaybackStartupPreventionAssertion_init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void receiverPlaybackStartupPreventionAssertion_finalize(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 2)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFIndex v3 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __receiverPlaybackStartupPreventionAssertion_finalize_block_invoke;
  block[3] = &__block_descriptor_tmp_29_1;
  block[4] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 16) = 0;
  }
  _Block_release(*(const void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

CFStringRef receiverPlaybackStartupPreventionAssertion_copyDebugDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigVideoReceiverPlaybackStartupPreventionAssertion %p> retainCount: %d, desc: %@", a1, v3, a1[2]);
}

uint64_t FigVideoReceiverGetClassID()
{
  return sFigVideoReceiverClassID;
}

uint64_t RegisterFigVideoReceiverTypeOnce()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVideoReceiverGetTypeID()
{
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigVideoReceiverCreateLocal(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    goto LABEL_36;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 72) = Mutable;
  if (!Mutable) {
    goto LABEL_35;
  }
  dispatch_queue_t v8 = dispatch_queue_create("com.apple.coremedia.videoreceiver.callbackQ", 0);
  *(void *)(DerivedStorage + 264) = v8;
  if (!v8) {
    goto LABEL_35;
  }
  uint64_t v9 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 304) = v9;
  if (!v9) {
    goto LABEL_35;
  }
  uint64_t v10 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 336) = v10;
  if (!v10) {
    goto LABEL_35;
  }
  uint64_t v11 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 416) = v11;
  if (!v11) {
    goto LABEL_35;
  }
  values = 0;
  uint64_t v5 = FigDataChannelGroupCreateForUseCase(a1, 0, &values);
  if (v5)
  {
LABEL_36:
    uint64_t v33 = v5;
    goto LABEL_29;
  }
  CFArrayRef v12 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 288) = v12;
  if (values)
  {
    CFRelease(values);
    CFArrayRef v12 = *(CFArrayRef *)(DerivedStorage + 288);
  }
  if (!v12)
  {
LABEL_35:
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_36;
  }
  uint64_t v5 = FigImageQueueDisplayCountHistory_Create((uint64_t *)(DerivedStorage + 344));
  if (v5) {
    goto LABEL_36;
  }
  FigImageQueueDisplayCountHistory_StartTracingDisplayCount(*(void *)(DerivedStorage + 344), 0, "fvr");
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  LoggingIdentifierOfCFIndex Length = FigCFStringCreateLoggingIdentifierOfLength();
  if (LoggingIdentifierOfLength)
  {
    uint64_t v16 = (const void *)LoggingIdentifierOfLength;
    CFStringRef v17 = CFStringCreateWithFormat(v14, 0, @"R/%@", LoggingIdentifierOfLength);
    if (v17)
    {
      CFStringRef v18 = v17;
      CCFStringRef String = CFStringGetCString(v17, (char *)(v13 + 236), 10, 0x600u);
      CFRelease(v16);
      if (CString)
      {
        CFRelease(v18);
        uint64_t v20 = MEMORY[0x1E4F1F9F8];
        long long v35 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(DerivedStorage + 360) = *MEMORY[0x1E4F1F9F8];
        uint64_t v21 = *(void *)(v20 + 16);
        *(void *)(DerivedStorage + 376) = v21;
        CFMutableDictionaryRef v22 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(DerivedStorage + 16) = v22;
        if (v22)
        {
          CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E4F1D540]);
          *(void *)(DerivedStorage + 24) = v23;
          if (v23)
          {
            CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E4F1D540]);
            *(void *)(DerivedStorage + 32) = v24;
            if (v24)
            {
              *(unsigned char *)(DerivedStorage + 40) = 1;
              CFMutableArrayRef v25 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
              *(void *)(DerivedStorage + 48) = v25;
              if (v25)
              {
                *(unsigned char *)(DerivedStorage + 96) = 0;
                *(_OWORD *)(DerivedStorage + 100) = v35;
                *(void *)(DerivedStorage + 116) = v21;
                *(_OWORD *)(DerivedStorage + 124) = v35;
                *(void *)(DerivedStorage + 140) = v21;
                dispatch_queue_t v26 = dispatch_queue_create("com.apple.coremedia.videoreceiver", 0);
                *(void *)(DerivedStorage + 152) = v26;
                if (v26)
                {
                  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
                  uint64_t v5 = CMTimebaseCreateWithSourceClock(v14, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 56));
                  if (v5) {
                    goto LABEL_36;
                  }
                  CMTime v28 = *(OpaqueCMTimebase **)(DerivedStorage + 56);
                  CMTime timebaseTime = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                  CMTime immediateSourceTime = timebaseTime;
                  uint64_t v5 = CMTimebaseSetRateAndAnchorTime(v28, 1.0, &timebaseTime, &immediateSourceTime);
                  if (v5) {
                    goto LABEL_36;
                  }
                  dispatch_source_t v29 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, 0);
                  *(void *)(DerivedStorage + 64) = v29;
                  if (v29)
                  {
                    long long v30 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
                    if (v30)
                    {
                      uint64_t v31 = v30;
                      *(void *)uint64_t DerivedStorage = CFRetain(v30);
                      dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 64), v31);
                      dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 64), (dispatch_function_t)videoReceiver_finalizeConfigurationTimerSource);
                      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 64), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
                      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 64), (dispatch_function_t)videoReceiver_activateReceiverConfiguration);
                      dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 64));
                      uint64_t v5 = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 56), *(dispatch_source_t *)(DerivedStorage + 64));
                      if (!v5)
                      {
                        if (dword_1E9350E80)
                        {
                          int v37 = 0;
                          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        *(_DWORD *)(DerivedStorage + 160) = 0;
                        *(_OWORD *)(DerivedStorage + 164) = v35;
                        *(void *)(DerivedStorage + 180) = v21;
                        *(_OWORD *)(DerivedStorage + 188) = v35;
                        *(void *)(DerivedStorage + 204) = v21;
                        *(_OWORD *)(DerivedStorage + 212) = v35;
                        *(void *)(DerivedStorage + 228) = v21;
                        *(unsigned char *)(DerivedStorage + 456) = 1;
                        *(_DWORD *)(DerivedStorage + 476) = 0;
                        *(void *)(DerivedStorage + 468) = 0;
                        *(void *)(DerivedStorage + 460) = 0;
                        *(void *)(DerivedStorage + 480) = 1000000000;
                        *(_DWORD *)(DerivedStorage + 488) = 0;
                        *(unsigned char *)(DerivedStorage + 496) = 1;
                        *(_DWORD *)(DerivedStorage + 516) = 0;
                        *(void *)(DerivedStorage + 500) = 0;
                        *(void *)(DerivedStorage + 508) = 0;
                        *(void *)(DerivedStorage + 520) = 1000000000;
                        *(_DWORD *)(DerivedStorage + 528) = 0;
                        *(unsigned char *)(DerivedStorage + 536) = 1;
                        *(_DWORD *)(DerivedStorage + 556) = 0;
                        *(void *)(DerivedStorage + 540) = 0;
                        *(void *)(DerivedStorage + 548) = 0;
                        *(void *)(DerivedStorage + 560) = 1000000000;
                        *(_DWORD *)(DerivedStorage + 568) = 3;
                        if (*MEMORY[0x1E4F1EBA8] == 1)
                        {
                          strncpy((char *)&timebaseTime, (const char *)(DerivedStorage + 236), 8uLL);
                          kdebug_trace();
                        }
                        uint64_t v33 = 0;
                        *a3 = cf;
                        return v33;
                      }
                      goto LABEL_36;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_35;
      }
      uint64_t v33 = 4294951720;
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v33 = 4294951726;
    }
    CFRelease(v16);
    goto LABEL_29;
  }
  uint64_t v33 = 4294951726;
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  return v33;
}

void videoReceiver_finalizeConfigurationTimerSource(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void videoReceiver_activateReceiverConfiguration()
{
  BOOL v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
    if (v2 == CMBaseClassGetCFTypeID())
    {
      CFIndex v3 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 152);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __videoReceiver_activateReceiverConfiguration_block_invoke;
      block[3] = &__block_descriptor_tmp_117;
      block[4] = v1;
      dispatch_sync(v3, block);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t __receiverPlaybackStartupPreventionAssertion_finalize_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

CFStringRef FigVideoReceiverCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVideoReceiver %p]", a1);
}

void videoReceiver_Finalize()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350E80)
  {
    int v28 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeID v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
  CFIndex v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 48) = 0;
  }
  CFIndex v7 = *(NSObject **)(DerivedStorage + 64);
  if (v7)
  {
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 56), v7);
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 64));
  }
  dispatch_queue_t v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v9 = *(NSObject **)(DerivedStorage + 64);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 88);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 80);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 80) = 0;
  }
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 152), &__block_literal_global_39);
  CFArrayRef v12 = *(NSObject **)(DerivedStorage + 152);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 72);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 72) = 0;
  }
  CFAllocatorRef v14 = *(NSObject **)(DerivedStorage + 264);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(DerivedStorage + 264) = 0;
  }
  _Block_release(*(const void **)(DerivedStorage + 400));
  *(void *)(DerivedStorage + 400) = 0;
  _Block_release(*(const void **)(DerivedStorage + 408));
  *(void *)(DerivedStorage + 408) = 0;
  FigSimpleMutexDestroy();
  _Block_release(*(const void **)(DerivedStorage + 424));
  *(void *)(DerivedStorage + 424) = 0;
  CFURLRef v15 = *(const void **)(DerivedStorage + 288);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 288) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v16 = *(const void **)(DerivedStorage + 312);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 312) = 0;
  }
  CFStringRef v17 = *(const void **)(DerivedStorage + 320);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 320) = 0;
  }
  FigSimpleMutexDestroy();
  FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(*(void *)(DerivedStorage + 344));
  CFStringRef v18 = *(const void **)(DerivedStorage + 344);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 344) = 0;
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 352);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 352) = 0;
  }
  uint64_t v20 = *(const void **)(DerivedStorage + 384);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 384) = 0;
  }
  uint64_t v21 = *(const void **)(DerivedStorage + 392);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(DerivedStorage + 392) = 0;
  }
  if (*(void *)(DerivedStorage + 432))
  {
    uint64_t v22 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v22)
    {
      CFMutableDictionaryRef v23 = (const void *)v22;
      receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler(v22, 0);
      CFRelease(v23);
    }
    CFMutableDictionaryRef v24 = *(const void **)(DerivedStorage + 432);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(DerivedStorage + 432) = 0;
    }
  }
  CFMutableArrayRef v25 = *(const void **)(DerivedStorage + 440);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 440) = 0;
  }
  dispatch_queue_t v26 = *(const void **)(DerivedStorage + 448);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(DerivedStorage + 448) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *videoReceiver_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  if (a1) {
    uint64_t v4 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
  }
  else {
    uint64_t v4 = "";
  }
  CFIndex v5 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoReceiver [%p|%s] retainCount: %d>", a1, v4, v5);
  return Mutable;
}

uint64_t videoReceiver_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 5)
  {
    int v26 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2 || !a4) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"XPCEndpointID"))
  {
    *(void *)&long long value = 0;
    uint64_t v10 = (uint64_t *)(CMBaseObjectGetDerivedStorage() + 8);
    if (!*v10
      && (uint64_t v11 = FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint(*MEMORY[0x1E4F1CF80], a1, (xpc_endpoint_t *)&value, v10), v11))
    {
      uint64_t v13 = v11;
      xpc_object_t v12 = 0;
    }
    else
    {
      xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_value(v12, (const char *)kFigVideoReceiverEndpoint, (xpc_object_t)value);
      uint64_t v13 = 0;
    }
    FigXPCRelease();
    FigXPCRelease();
    if (!v13)
    {
      if (v12)
      {
        uint64_t v13 = 0;
        *a4 = (CFMutableDictionaryRef)v12;
      }
      else
      {
        return 4294951720;
      }
    }
    return v13;
  }
  if (CFEqual(a2, @"RefreshRate"))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    long long value = *(_OWORD *)(DerivedStorage + 164);
    uint64_t v28 = *(void *)(DerivedStorage + 180);
    FigCFDictionarySetCMTime();
    long long value = *(_OWORD *)(DerivedStorage + 188);
    uint64_t v28 = *(void *)(DerivedStorage + 204);
    FigCFDictionarySetCMTime();
    long long value = *(_OWORD *)(DerivedStorage + 212);
    uint64_t v28 = *(void *)(DerivedStorage + 228);
    FigCFDictionarySetCMTime();
LABEL_14:
    uint64_t v13 = 0;
    *a4 = Mutable;
    return v13;
  }
  if (CFEqual(a2, @"DesiredPixelCount"))
  {
    CFURLRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(DerivedStorage + 160));
LABEL_19:
    uint64_t v13 = 0;
    *a4 = v15;
    return v13;
  }
  if (CFEqual(a2, @"LoggingIdentifier"))
  {
    CFURLRef v15 = (__CFDictionary *)CFStringCreateWithCString(a3, (const char *)(DerivedStorage + 236), 0x600u);
    if (!v15) {
      return 4294951726;
    }
    goto LABEL_19;
  }
  if (CFEqual(a2, @"PlaybackStartupPreventionAssertionInfo"))
  {
    CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(a3, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v17)
    {
      CFMutableDictionaryRef Mutable = v17;
      FigCFDictionarySetBoolean();
      if (*(void *)(DerivedStorage + 432))
      {
        uint64_t v18 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v18)
        {
          uint64_t v19 = (const void *)v18;
          FigCFDictionarySetBoolean();
          FigCFDictionarySetValue();
          CFRelease(v19);
        }
      }
      goto LABEL_14;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"ImageQueueReceivers"))
  {
    *(void *)&long long value = 0;
    *((void *)&value + 1) = &value;
    uint64_t v28 = 0x2000000000;
    CFMutableArrayRef v29 = 0;
    CFMutableArrayRef v29 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
    if (*(void *)(*((void *)&value + 1) + 24))
    {
      uint64_t v20 = *(NSObject **)(DerivedStorage + 152);
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = __videoReceiver_CopyProperty_block_invoke;
      v24[3] = &unk_1E5795008;
      v24[4] = &value;
      v24[5] = DerivedStorage;
      uint64_t v21 = v24;
LABEL_32:
      dispatch_sync(v20, v21);
      uint64_t v13 = 0;
      *a4 = *(CFMutableDictionaryRef *)(*((void *)&value + 1) + 24);
LABEL_33:
      _Block_object_dispose(&value, 8);
      return v13;
    }
    goto LABEL_47;
  }
  if (CFEqual(a2, @"DataQueues"))
  {
    *(void *)&long long value = 0;
    *((void *)&value + 1) = &value;
    uint64_t v28 = 0x2000000000;
    CFMutableArrayRef v29 = 0;
    CFMutableArrayRef v29 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
    if (*(void *)(*((void *)&value + 1) + 24))
    {
      uint64_t v20 = *(NSObject **)(DerivedStorage + 152);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __videoReceiver_CopyProperty_block_invoke_2;
      block[3] = &unk_1E5795030;
      block[4] = &value;
      void block[5] = DerivedStorage;
      uint64_t v21 = block;
      goto LABEL_32;
    }
LABEL_47:
    uint64_t v13 = 4294951726;
    goto LABEL_33;
  }
  if (CFEqual(a2, @"ClientPreferredDataChannelGroups"))
  {
    *(void *)&long long value = 0;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 304));
    uint64_t v13 = FigDataChannelGroupsArrayCopyAsDictionary(*(const __CFArray **)(DerivedStorage + 288), a3, (CFDictionaryRef *)&value);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 304));
    if (!v13) {
      *a4 = (CFMutableDictionaryRef)value;
    }
  }
  else if (CFEqual(a2, @"ClientDataChannelSettings"))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 336));
    uint64_t v22 = *(void **)(DerivedStorage + 320);
    if (v22) {
      uint64_t v22 = (void *)CFRetain(v22);
    }
    *a4 = (CFMutableDictionaryRef)v22;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 336));
    return 0;
  }
  else
  {
    return 4294954509;
  }
  return v13;
}

uint64_t videoReceiver_SetProperty(CFTypeRef cf, const void *a2, const void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 4)
  {
    LODWORD(v24.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v8 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v8 != CMBaseClassGetCFTypeID() || !a2 || !a3) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    CFTypeID v10 = CFGetTypeID(a3);
    if (v10 == CFDictionaryGetTypeID())
    {
      CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime v25 = valuePtr;
      CMTime v24 = valuePtr;
      FigCFDictionaryGetCMTimeIfPresent();
      if ((valuePtr.flags & 0x1D) == 1)
      {
        CMTime type = valuePtr;
        long long v17 = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)&time2.int value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        time2.CMTimeEpoch epoch = v11;
        if (CMTimeCompare(&type, &time2) >= 1)
        {
          FigCFDictionaryGetCMTimeIfPresent();
          if ((v25.flags & 0x1D) == 1)
          {
            CMTime type = v25;
            *(_OWORD *)&time2.int value = v17;
            time2.CMTimeEpoch epoch = v11;
            if (CMTimeCompare(&type, &time2) >= 1)
            {
              FigCFDictionaryGetCMTimeIfPresent();
              if ((v24.flags & 0x1D) == 1)
              {
                *(CMTime *)(DerivedStorage + 164) = valuePtr;
                *(CMTime *)(DerivedStorage + 188) = v25;
                *(CMTime *)(DerivedStorage + 212) = v24;
                xpc_object_t v12 = *(NSObject **)(DerivedStorage + 152);
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 0x40000000;
                block[2] = __videoReceiver_SetProperty_block_invoke;
                block[3] = &__block_descriptor_tmp_49;
                block[4] = cf;
                CMTime v21 = valuePtr;
                dispatch_async(v12, block);
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFDictionarySetValue(Mutable, a2, a3);
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
                if (Mutable) {
                  CFRelease(Mutable);
                }
                return 0;
              }
            }
          }
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (FigCFEqual())
  {
    CFTypeID v14 = CFGetTypeID(a3);
    if (v14 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr.CFDictionaryAddValue(theDict, key, value) = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
      int value = valuePtr.value;
      if ((valuePtr.value & 0x80000000) == 0)
      {
        *(_DWORD *)(DerivedStorage + 160) = valuePtr.value;
        uint64_t v16 = *(NSObject **)(DerivedStorage + 152);
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 0x40000000;
        v18[2] = __videoReceiver_SetProperty_block_invoke_2;
        v18[3] = &__block_descriptor_tmp_50;
        v18[4] = cf;
        int v19 = value;
        dispatch_async(v16, v18);
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  return 4294954509;
}

void receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler(uint64_t a1, void *aBlock)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  CFTypeID v8 = &v7;
  uint64_t v9 = 0x3002000000;
  CFTypeID v10 = __Block_byref_object_copy__1;
  CMTimeEpoch v11 = __Block_byref_object_dispose__1;
  uint64_t v12 = 0;
  CFIndex v3 = _Block_copy(aBlock);
  uint64_t v4 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler_block_invoke;
  block[3] = &unk_1E5794FE0;
  void block[5] = &v7;
  void block[6] = a1;
  block[4] = v3;
  dispatch_sync(v4, block);
  if (dword_1E9350E80 >= 4)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  _Block_release((const void *)v8[5]);
  _Block_object_dispose(&v7, 8);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void *__receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler_block_invoke(void *result)
{
  *(void *)(*(void *)(result[5] + 8) + 40) = *(void *)(result[6] + 32);
  *(void *)(result[6] + 32) = result[4];
  return result;
}

uint64_t videoReceiver_createEndpointID(uint64_t a1, void *a2)
{
  xpc_object_t value = 0;
  uint64_t v4 = (uint64_t *)(CMBaseObjectGetDerivedStorage() + 8);
  if (!*v4
    && (uint64_t v5 = FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint(*MEMORY[0x1E4F1CF80], a1, (xpc_endpoint_t *)&value, v4), v5))
  {
    uint64_t v7 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_value(v6, (const char *)kFigVideoReceiverEndpoint, value);
    uint64_t v7 = 0;
    *a2 = v6;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t videoReceiver_copyImageForTime(const void *a1, long long *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v48 = 0;
  CMBlockBufferRef v49 = &v48;
  uint64_t v50 = 0x2000000000;
  int v51 = 0;
  uint64_t v46 = 0;
  CFArrayRef theArray = 0;
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  uint64_t v38 = 0;
  uint64_t v39 = (CMTime *)&v38;
  uint64_t v40 = 0x3000000000;
  long long v41 = *MEMORY[0x1E4F1F9F8];
  uint64_t v42 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  __int16 v37 = 0;
  if (!a1
    || (CFTypeID v9 = CFGetTypeID(a1),
        MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v9 != CMBaseClassGetCFTypeID())|| (*((unsigned char *)a2 + 12) & 1) == 0|| !a4)
  {
    *((_DWORD *)v49 + 6) = FigSignalErrorAt();
    goto LABEL_31;
  }
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350E80 >= 3)
  {
    unsigned int v36 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v12 = *(NSObject **)(DerivedStorage + 152);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_copyImageForTime_block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  long long v33 = *a2;
  uint64_t v34 = *((void *)a2 + 2);
  block[4] = DerivedStorage;
  void block[5] = a1;
  dispatch_sync(v12, block);
  int v13 = videoReceiver_copyOutputQueuesIfReady(a1, (unsigned char *)&v37 + 1, &theArray, 0, 0, 0, 0);
  CFTypeID v14 = v49;
  *((_DWORD *)v49 + 6) = v13;
  if (!v13)
  {
    if (*(void *)(DerivedStorage + 88))
    {
      if (!HIBYTE(v37))
      {
LABEL_29:
        int v22 = -15575;
        goto LABEL_30;
      }
      if (theArray)
      {
        if (CFArrayGetCount(theArray))
        {
          if (HIBYTE(v37))
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            uint64_t v16 = *(NSObject **)(DerivedStorage + 152);
            v28[0] = MEMORY[0x1E4F143A8];
            v28[1] = 0x40000000;
            v28[2] = __videoReceiver_copyImageForTime_block_invoke_2;
            v28[3] = &unk_1E57950B8;
            long long v29 = *a2;
            uint64_t v30 = *((void *)a2 + 2);
            char v31 = v37;
            _OWORD v28[8] = ValueAtIndex;
            v28[9] = DerivedStorage;
            v28[4] = &v48;
            v28[5] = &v43;
            v28[6] = &v38;
            v28[7] = a1;
            dispatch_sync(v16, v28);
            if (!*((_DWORD *)v49 + 6))
            {
              if (dword_1E9350E80 >= 3)
              {
                unsigned int v36 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                long long v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v18 = v36;
                if (os_log_type_enabled(v17, type)) {
                  unsigned int v19 = v18;
                }
                else {
                  unsigned int v19 = v18 & 0xFFFFFFFE;
                }
                if (v19)
                {
                  uint64_t v20 = CMBaseObjectGetDerivedStorage() + 236;
                  CMTime time = v39[1];
                  Float64 Seconds = CMTimeGetSeconds(&time);
                  int v52 = 136316162;
                  CFMutableArrayRef v53 = "videoReceiver_copyImageForTime";
                  __int16 v54 = 2048;
                  unint64_t v55 = a1;
                  __int16 v56 = 2082;
                  uint64_t v57 = v20;
                  __int16 v58 = 2048;
                  Float64 v59 = Seconds;
                  __int16 v60 = 2048;
                  int64_t v61 = ValueAtIndex;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (a5)
              {
                CMTimeEpoch epoch = v39[1].epoch;
                *(_OWORD *)a5 = *(_OWORD *)&v39[1].value;
                *(void *)(a5 + 16) = epoch;
              }
              CMTime v24 = v44;
              *a4 = v44[3];
              v24[3] = 0;
            }
            goto LABEL_31;
          }
          CFTypeID v14 = v49;
          goto LABEL_29;
        }
        CFTypeID v14 = v49;
      }
      int v22 = -15930;
    }
    else
    {
      int v22 = -15579;
    }
LABEL_30:
    *((_DWORD *)v14 + 6) = v22;
  }
LABEL_31:
  if (theArray) {
    CFRelease(theArray);
  }
  CMTime v25 = (const void *)v44[3];
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *((unsigned int *)v49 + 6);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v48, 8);
  return v26;
}

uint64_t videoReceiver_createImageQueueReceiver(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 2)
  {
    unsigned int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v9 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v9 != CMBaseClassGetCFTypeID() || !a2 || !a4) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeEpoch v11 = (const void *)CAXPCImageQueueReceiverCreate();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v8 = FigSignalErrorAt();
    if (!v11) {
      return v8;
    }
    goto LABEL_22;
  }
  CFMutableDictionaryRef v13 = Mutable;
  FigCFDictionarySetValue();
  if (*(_DWORD *)(DerivedStorage + 160)) {
    CAXPCImageQueueReceiverSetDisplayedPixelCount();
  }
  if ((*(_DWORD *)(DerivedStorage + 176) & 0x1D) == 1)
  {
    CMTime time = *(CMTime *)(DerivedStorage + 164);
    CMTimeGetSeconds(&time);
    Float32 = (const void *)FigCFNumberCreateFloat32();
    CAXPCImageQueueReceiverSetProperty();
    if (Float32) {
      CFRelease(Float32);
    }
  }
  CFURLRef v15 = *(NSObject **)(DerivedStorage + 152);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_createImageQueueReceiver_block_invoke;
  block[3] = &__block_descriptor_tmp_75;
  block[4] = a2;
  void block[5] = DerivedStorage;
  void block[6] = v13;
  dispatch_sync(v15, block);
  if (dword_1E9350E80)
  {
    unsigned int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v17 = v23;
    if (os_log_type_enabled(v16, type)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      uint64_t v19 = CMBaseObjectGetDerivedStorage();
      int v24 = 136316162;
      CMTime v25 = "videoReceiver_createImageQueueReceiver";
      __int16 v26 = 2048;
      CFTypeRef v27 = cf;
      __int16 v28 = 2082;
      uint64_t v29 = v19 + 236;
      __int16 v30 = 2048;
      char v31 = v11;
      __int16 v32 = 2048;
      uint64_t v33 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(v13);
  uint64_t v8 = 0;
  if (v11) {
LABEL_22:
  }
    CFRelease(v11);
  return v8;
}

uint64_t videoReceiver_releaseImageQueueReceiver(CFTypeRef cf, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 2)
  {
    int v10 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v6 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v6 != CMBaseClassGetCFTypeID() || !a2) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 152);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_releaseImageQueueReceiver_block_invoke;
  block[3] = &__block_descriptor_tmp_76;
  block[4] = cf;
  void block[5] = a2;
  dispatch_sync(v7, block);
  return 0;
}

uint64_t videoReceiver_setImageQueueMessage(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  unsigned int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  int v25 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  if (dword_1E9350E80 >= 2)
  {
    int v17 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    goto LABEL_4;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  BOOL v8 = v7 != CMBaseClassGetCFTypeID() || a2 == 0;
  if (v8 || a3 == 0) {
    goto LABEL_4;
  }
  if (dword_1E9350E80 >= 2)
  {
    int v17 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v11 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 152);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_setImageQueueMessage_block_invoke;
  block[3] = &unk_1E57951A8;
  void block[6] = cf;
  void block[7] = a2;
  block[4] = &v18;
  void block[5] = &v22;
  dispatch_sync(v11, block);
  if (!*((_DWORD *)v23 + 6) && (CAXPCImageQueueReceiverProcessMessage() & 1) == 0) {
LABEL_4:
  }
    *((_DWORD *)v23 + 6) = FigSignalErrorAt();
  uint64_t v12 = (const void *)v19[3];
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *((unsigned int *)v23 + 6);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v13;
}

uint64_t videoReceiver_createDataQueue(const void *a1, uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (dword_1E9350E80 >= 2)
  {
    unsigned int v22 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a5) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CMTime v28 = *a3;
  CMTime v24 = *a4;
  uint64_t v13 = FigDataQueueCreate(v12, a2, &v28, &v24, &cf);
  if (v13)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    CFTypeID v14 = *(NSObject **)(DerivedStorage + 152);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_createDataQueue_block_invoke;
    block[3] = &__block_descriptor_tmp_78;
    block[4] = cf;
    void block[5] = DerivedStorage;
    dispatch_sync(v14, block);
    if (dword_1E9350E80)
    {
      unsigned int v22 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFURLRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v16 = v22;
      if (os_log_type_enabled(v15, type)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        if (a1) {
          uint64_t v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
        }
        else {
          uint64_t v18 = "";
        }
        LODWORD(v24.CFDictionaryAddValue(theDict, key, value) = 136315906;
        *(CMTimeValue *)((char *)&v24.value + 4) = (CMTimeValue)"videoReceiver_createDataQueue";
        LOWORD(v24.flags) = 2048;
        *(void *)((char *)&v24.flags + 2) = a1;
        HIWORD(v24.epoch) = 2082;
        int v25 = v18;
        __int16 v26 = 2048;
        CFTypeRef v27 = cf;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v13 = 0;
    *a5 = cf;
  }
  return v13;
}

uint64_t videoReceiver_addDataChannelConfiguration(const void *a1, uint64_t a2, int a3, long long *a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  CFTypeRef v51 = 0;
  CFTypeRef v52 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v50 = 0;
  if (!a1) {
    goto LABEL_2;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v10 != CMBaseClassGetCFTypeID() || !a2) {
    goto LABEL_2;
  }
  int v38 = a3;
  if (a3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1E9350E80) {
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  if ((*((unsigned char *)a4 + 12) & 1) == 0)
  {
LABEL_2:
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_3;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350E80)
  {
LABEL_11:
    LODWORD(v55) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_12:
  uint64_t v55 = 0;
  __int16 v56 = &v55;
  uint64_t v57 = 0x2000000000;
  int v58 = 0;
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350E80 >= 2)
  {
    CFTypeID v14 = a4;
    *(_DWORD *)os_log_type_t type = 0;
    os_log_type_t v53 = OS_LOG_TYPE_DEFAULT;
    CFURLRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v16 = *(_DWORD *)type;
    if (os_log_type_enabled(v15, v53)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      uint64_t v18 = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)UInt8 buffer = 136315906;
      *(void *)&buffer[4] = "videoReceiver_EnsureDataChannelConfigurationIsValid";
      __int16 v60 = 2048;
      int64_t v61 = a1;
      __int16 v62 = 2082;
      uint64_t v63 = v18 + 236;
      __int16 v64 = 2114;
      uint64_t v65 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a4 = v14;
  }
  uint64_t v19 = *(NSObject **)(v13 + 152);
  block.xpc_object_t value = MEMORY[0x1E4F143A8];
  *(void *)&block.CMTimeScale timescale = 0x40000000;
  block.CMTimeEpoch epoch = (CMTimeEpoch)__videoReceiver_EnsureDataChannelConfigurationIsValid_block_invoke;
  uint64_t v67 = &unk_1E5795250;
  uint64_t v69 = a2;
  uint64_t v70 = a1;
  uint64_t v68 = &v55;
  dispatch_sync(v19, &block);
  uint64_t v5 = *((unsigned int *)v56 + 6);
  _Block_object_dispose(&v55, 8);
  if (!v5)
  {
    CFAllocatorRef v20 = CFGetAllocator(a1);
    uint64_t v4 = FigDataChannelConfigurationCreateCopy(v20, a2, &cf);
    if (v4) {
      goto LABEL_3;
    }
    CFTypeRef v21 = cf;
    uint64_t v55 = 0;
    __int16 v56 = &v55;
    uint64_t v57 = 0x2000000000;
    int v58 = 0;
    uint64_t v22 = CMBaseObjectGetDerivedStorage();
    if (dword_1E9350E80 >= 2)
    {
      *(_DWORD *)os_log_type_t type = 0;
      os_log_type_t v53 = OS_LOG_TYPE_DEFAULT;
      unsigned int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v24 = *(_DWORD *)type;
      if (os_log_type_enabled(v23, v53)) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v24 & 0xFFFFFFFE;
      }
      if (v25)
      {
        uint64_t v26 = CMBaseObjectGetDerivedStorage();
        *(_DWORD *)UInt8 buffer = 136315906;
        *(void *)&buffer[4] = "videoReceiver_AddImageQueueReceiverToConfiguration";
        __int16 v60 = 2048;
        int64_t v61 = a1;
        __int16 v62 = 2082;
        uint64_t v63 = v26 + 236;
        __int16 v64 = 2114;
        uint64_t v65 = (uint64_t)v21;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef v27 = *(NSObject **)(v22 + 152);
    block.xpc_object_t value = MEMORY[0x1E4F143A8];
    *(void *)&block.CMTimeScale timescale = 0x40000000;
    block.CMTimeEpoch epoch = (CMTimeEpoch)__videoReceiver_AddImageQueueReceiverToConfiguration_block_invoke;
    uint64_t v67 = &unk_1E5795278;
    uint64_t v69 = (uint64_t)v21;
    uint64_t v70 = a1;
    uint64_t v68 = &v55;
    dispatch_sync(v27, &block);
    uint64_t v5 = *((unsigned int *)v56 + 6);
    _Block_object_dispose(&v55, 8);
    if (!v5)
    {
      CMTime v28 = *(NSObject **)(DerivedStorage + 152);
      if (v38)
      {
        uint64_t v29 = v48;
        v48[0] = MEMORY[0x1E4F143A8];
        v48[1] = 0x40000000;
        v48[2] = __videoReceiver_addDataChannelConfiguration_block_invoke;
        v48[3] = &__block_descriptor_tmp_79;
        v48[4] = cf;
        v48[5] = DerivedStorage;
      }
      else
      {
        uint64_t v29 = v45;
        v45[0] = MEMORY[0x1E4F143A8];
        v45[1] = 0x40000000;
        v45[2] = __videoReceiver_addDataChannelConfiguration_block_invoke_80;
        v45[3] = &__block_descriptor_tmp_81;
        v45[4] = DerivedStorage;
        v45[5] = cf;
        long long v46 = *a4;
        uint64_t v47 = *((void *)a4 + 2);
      }
      v29[6] = a1;
      dispatch_sync(v28, v29);
      uint64_t v4 = fvr_copyDescriptionSettingsAndResourcesFromConfiguration((uint64_t)cf, (CFMutableArrayRef *)&v52, (CFMutableDictionaryRef *)&v51, (CFMutableArrayRef *)&v50);
      if (!v4)
      {
        CFRetain(a1);
        int ModificationID = FigDataChannelConfigurationGetModificationID((uint64_t)cf);
        if (cf) {
          CFRetain(cf);
        }
        if (v52) {
          CFRetain(v52);
        }
        if (v51) {
          CFRetain(v51);
        }
        if (v50)
        {
          CFRetain(v50);
          CFTypeRef v31 = v50;
        }
        else
        {
          CFTypeRef v31 = 0;
        }
        __int16 v32 = *(NSObject **)(DerivedStorage + 264);
        v41[0] = MEMORY[0x1E4F143A8];
        v41[1] = 0x40000000;
        v41[2] = __videoReceiver_addDataChannelConfiguration_block_invoke_82;
        v41[3] = &__block_descriptor_tmp_83;
        v41[4] = DerivedStorage;
        v41[5] = a1;
        long long v42 = *a4;
        uint64_t v43 = *((void *)a4 + 2);
        int v44 = ModificationID;
        v41[6] = cf;
        v41[7] = v52;
        v41[8] = v51;
        v41[9] = v31;
        dispatch_async(v32, v41);
        theCFStringRef String = 0;
        CFStringRef v40 = 0;
        FigDataChannelConfigurationCopyPlayerItemLoggingIdentifier((uint64_t)cf, &v40);
        FigDataChannelConfigurationCopyLoggingIdentifier((uint64_t)cf, &theString);
        if (*MEMORY[0x1E4F1EBA8] == 1)
        {
          CFStringRef v33 = theString;
          *(void *)UInt8 buffer = 0;
          if (theString)
          {
            if (CFStringGetLength(theString) <= 8) {
              v34.length = CFStringGetLength(v33);
            }
            else {
              v34.length = 8;
            }
            v34.CFIndex location = 0;
            CFStringGetBytes(v33, v34, 0, 0x3Fu, 0, buffer, 8, 0);
          }
          strncpy((char *)&block, buffer, 8uLL);
          CFStringRef v35 = v40;
          *(void *)UInt8 buffer = 0;
          if (v40)
          {
            if (CFStringGetLength(v40) <= 8) {
              v36.length = CFStringGetLength(v35);
            }
            else {
              v36.length = 8;
            }
            v36.CFIndex location = 0;
            CFStringGetBytes(v35, v36, 0, 0x3Fu, 0, buffer, 8, 0);
          }
          strncpy((char *)&block, buffer, 8uLL);
          kdebug_trace();
        }
        if (v40) {
          CFRelease(v40);
        }
        if (theString) {
          CFRelease(theString);
        }
        uint64_t v5 = 0;
        goto LABEL_59;
      }
LABEL_3:
      uint64_t v5 = v4;
    }
  }
LABEL_59:
  if (v52) {
    CFRelease(v52);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t videoReceiver_createPlaybackStartupPreventionAssertion(const void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    if (!a2)
    {
      FigSignalErrorAt();
      return 0;
    }
    BOOL v8 = (uint64_t *)DerivedStorage;
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 432))
    {
      uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        uint64_t v10 = v9;
        if (dword_1E9350E80)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v27 = 0;
        *a4 = v10;
        return v27;
      }
    }
    CFGetAllocator(a1);
    if (FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken != -1) {
      dispatch_once(&FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken, &__block_literal_global_13);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v13 = Instance;
      dispatch_queue_t v14 = dispatch_queue_create("com.apple.coremedia.videoreceiver.videoreceiverassertionQ", 0);
      *(void *)(v13 + 24) = v14;
      if (v14)
      {
        *(void *)(v13 + 16) = CFRetain(a2);
        goto LABEL_12;
      }
      uint64_t v27 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v13);
    }
    else
    {
      uint64_t v27 = FigSignalErrorAt();
    }
    if (v27) {
      return v27;
    }
    uint64_t v13 = 0;
LABEL_12:
    uint64_t v15 = *v8;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __videoReceiver_createPlaybackStartupPreventionAssertion_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_97;
    aBlock[4] = v15;
    receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler(v13, aBlock);
    CFAllocatorRef v16 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v16, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v18 = Mutable;
      CFDictionarySetValue(Mutable, @"PlaybackStartupPreventionAssertionDebugDescription", *(const void **)(v13 + 16));
      if (dword_1E9350E80)
      {
        unsigned int v32 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v20 = v32;
        if (os_log_type_enabled(v19, type)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (v21)
        {
          if (a1) {
            uint64_t v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          }
          else {
            uint64_t v22 = "";
          }
          int v33 = 136315906;
          CFRange v34 = "videoReceiver_createPlaybackStartupPreventionAssertion";
          __int16 v35 = 2048;
          CFRange v36 = a1;
          __int16 v37 = 2082;
          int v38 = v22;
          __int16 v39 = 2112;
          uint64_t v40 = v13;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v23 = CMNotificationCenterPostNotification();
      if (!v23)
      {
        unsigned int v24 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        if (v24)
        {
          unsigned int v25 = v24;
          uint64_t v26 = (const void *)v8[54];
          v8[54] = (uint64_t)v24;
          CFRetain(v24);
          if (v26) {
            CFRelease(v26);
          }
          *a4 = v13;
          CFRelease(v18);
          CFRelease(v25);
          return 0;
        }
        uint64_t v23 = FigSignalErrorAt();
      }
      uint64_t v27 = v23;
      CFRelease((CFTypeRef)v13);
      uint64_t v29 = v18;
    }
    else
    {
      uint64_t v27 = FigSignalErrorAt();
      if (!v13) {
        return v27;
      }
      uint64_t v29 = (const void *)v13;
    }
    CFRelease(v29);
    return v27;
  }

  return FigSignalErrorAt();
}

uint64_t videoReceiver_specifyPreferredDataChannelGroupsWithID(CFTypeRef cf, const __CFArray *a2, int a3)
{
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v9 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v9 != CMBaseClassGetCFTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a2
    || (CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        CFIndex Count = CFArrayGetCount(a2),
        (CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, Count, MEMORY[0x1E4F1D510])) == 0))
  {
    uint64_t v7 = FigSignalErrorAt();
    CFMutableArrayRef v15 = 0;
    if (!v7) {
      goto LABEL_32;
    }
    return v7;
  }
  CFMutableArrayRef v15 = Mutable;
  CFIndex v16 = CFArrayGetCount(a2);
  if (v16 >= 1)
  {
    CFIndex v17 = v16;
    int v31 = a3;
    CFIndex v18 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v18);
      value[0] = 0;
      CFTypeRef cfa = 0;
      if (ValueAtIndex)
      {
        uint64_t v20 = (uint64_t)ValueAtIndex;
        uint64_t v21 = FigDataChannelGroupCreate(v12, value);
        if (!v21)
        {
          if (FigDataChannelGroupGetCountOfDataChannels(v20) < 1)
          {
LABEL_20:
            uint64_t v8 = 0;
            unsigned int v24 = (__CFDictionary *)value[0];
            value[0] = 0;
            goto LABEL_21;
          }
          CFIndex v22 = 0;
          while (1)
          {
            DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex(v20, v22);
            uint64_t v21 = vr_createModifiedDataChannelTagCollectionWithDefaultTags(DataChannelByIndex, &cfa);
            if (v21) {
              break;
            }
            uint64_t v21 = FigDataChannelGroupAddDataChannel((uint64_t)value[0], (void *)cfa);
            if (v21) {
              break;
            }
            if (cfa)
            {
              CFRelease(cfa);
              CFTypeRef cfa = 0;
            }
            if (++v22 >= FigDataChannelGroupGetCountOfDataChannels(v20)) {
              goto LABEL_20;
            }
          }
        }
      }
      else
      {
        uint64_t v21 = FigSignalErrorAt();
      }
      uint64_t v8 = v21;
      if (value[0]) {
        CFRelease(value[0]);
      }
      unsigned int v24 = 0;
LABEL_21:
      if (cfa) {
        CFRelease(cfa);
      }
      if (v8)
      {
        CFRelease(v15);
        if (v24)
        {
          uint64_t v29 = v24;
LABEL_46:
          CFRelease(v29);
        }
        return v8;
      }
      CFArrayAppendValue(v15, v24);
      if (v24) {
        CFRelease(v24);
      }
      if (++v18 == v17)
      {
        a3 = v31;
        uint64_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
        break;
      }
    }
  }
LABEL_32:
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 304));
  unsigned int v25 = *(const void **)(DerivedStorage + 288);
  *(void *)(DerivedStorage + 288) = v15;
  if (v15) {
    CFRetain(v15);
  }
  if (v25) {
    CFRelease(v25);
  }
  *(_DWORD *)(DerivedStorage + 296) = a3;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 304));
  CFAllocatorRef v26 = *v11;
  uint64_t v27 = CFDictionaryCreateMutable(*v11, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a2)
  {
LABEL_40:
    if (a3) {
      FigCFDictionarySetInt32();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    uint64_t v8 = 0;
    if (v15) {
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  value[0] = 0;
  uint64_t v28 = FigDataChannelGroupsArrayCopyAsDictionary(a2, v26, (CFDictionaryRef *)value);
  if (!v28)
  {
    CFDictionarySetValue(v27, @"PreferredDataChannelGroups", value[0]);
    if (value[0]) {
      CFRelease(value[0]);
    }
    goto LABEL_40;
  }
  uint64_t v8 = v28;
  if (v15) {
LABEL_43:
  }
    CFRelease(v15);
LABEL_44:
  if (v27)
  {
    uint64_t v29 = v27;
    goto LABEL_46;
  }
  return v8;
}

uint64_t videoReceiver_specifyDataChannelSettingsWithID(CFTypeRef cf, const __CFArray *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = 0;
  CFTypeRef cfa = 0;
  if (dword_1E9350E80 >= 4)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    goto LABEL_4;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v9 != CMBaseClassGetCFTypeID()) {
    goto LABEL_4;
  }
  CFIndex v10 = 0;
  if (a2) {
    goto LABEL_14;
  }
LABEL_15:
  for (CFIndex i = 0; v10 < i; CFIndex i = CFArrayGetCount(a2))
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v10);
    CFDictionaryGetValue(ValueAtIndex, @"ChannelSpecificSettings");
    CFDictionaryRef theDict = 0;
    if (FigCFDictionaryGetValueIfPresent()
      && (CFDictionaryGetCount(theDict) < 3
       || !CFDictionaryGetValue(theDict, @"VideoColorPrimaries")
       || !CFDictionaryGetValue(theDict, @"VideoYCbCrMatrix")
       || !CFDictionaryGetValue(theDict, @"VideoTransferFunction")))
    {
      goto LABEL_4;
    }
    ++v10;
    if (!a2) {
      goto LABEL_15;
    }
LABEL_14:
    ;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFIndex v16 = Mutable;
    if (CFArrayGetCount(a2) >= 1)
    {
      for (CFIndex j = 0; j < CFArrayGetCount(a2); ++j)
      {
        CFDictionaryRef v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, j);
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, v18);
        uint64_t v20 = (const OpaqueCMTagCollection *)CFDictionaryGetValue(v18, @"ChannelDescription");
        if (v20)
        {
          uint64_t v21 = vr_createModifiedDataChannelTagCollectionWithDefaultTags(v20, &value);
          if (v21)
          {
            uint64_t v7 = v21;
            goto LABEL_49;
          }
          CFDictionarySetValue(MutableCopy, @"ChannelDescription", value);
          if (value)
          {
            CFRelease(value);
            xpc_object_t value = 0;
          }
        }
        CFArrayAppendValue(v16, MutableCopy);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
    }
    uint64_t v22 = FigVideoReceiverDataChannelSettingsCopySerializable(v16, (__CFArray **)&cfa);
    if (v22)
    {
      uint64_t v7 = v22;
      CFMutableDictionaryRef MutableCopy = 0;
LABEL_49:
      uint64_t v8 = 0;
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 336));
      uint64_t v23 = *(const void **)(DerivedStorage + 312);
      *(void *)(DerivedStorage + 312) = v16;
      CFRetain(v16);
      if (v23) {
        CFRelease(v23);
      }
      unsigned int v24 = *(const void **)(DerivedStorage + 320);
      CFTypeRef v25 = cfa;
      *(void *)(DerivedStorage + 320) = cfa;
      if (v25) {
        CFRetain(v25);
      }
      if (v24) {
        CFRelease(v24);
      }
      *(_DWORD *)(DerivedStorage + 328) = a3;
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 336));
      CFAllocatorRef v26 = CFDictionaryCreateMutable(v14, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v8 = v26;
      if (cfa) {
        CFDictionarySetValue(v26, @"DataChannelSettings", cfa);
      }
      if (a3) {
        FigCFDictionarySetInt32();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFMutableDictionaryRef MutableCopy = 0;
      uint64_t v7 = 0;
    }
    CFRelease(v16);
    if (value) {
      CFRelease(value);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  else
  {
LABEL_4:
    uint64_t v7 = FigSignalErrorAt();
    uint64_t v8 = 0;
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

uint64_t videoReceiver_copyTaggedBufferGroupForTime(CMTime *a1, long long *a2, uint64_t a3, CFTypeRef *a4, CMTime *a5)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  return videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(a1, (uint64_t)&v6, a3, a4, 0, a5, 0);
}

uint64_t videoReceiver_copyTaggedBufferGroupAndResourcesForTime(CMTime *a1, long long *a2, uint64_t a3, CFTypeRef *a4, CFTypeRef *a5, CMTime *a6)
{
  if (a5)
  {
    long long v8 = *a2;
    uint64_t v9 = *((void *)a2 + 2);
    return videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(a1, (uint64_t)&v8, a3, a4, a5, a6, 0);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiver_createDataChannelResource(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  cf[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (dword_1E9350E80 >= 3)
  {
    int v19 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a4) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v10 = CFGetAllocator(a1);
  uint64_t v11 = FigDataChannelResourceCreate((uint64_t)v10, a2, a3, cf);
  if (v11)
  {
    uint64_t v15 = v11;
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    if (dword_1E9350E80)
    {
      int v19 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFAllocatorRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1) {
      CFRetain(a1);
    }
    if (cf[0])
    {
      CFRetain(cf[0]);
      CFTypeRef v13 = cf[0];
    }
    else
    {
      CFTypeRef v13 = 0;
    }
    CFAllocatorRef v14 = *(NSObject **)(DerivedStorage + 264);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_createDataChannelResource_block_invoke;
    block[3] = &__block_descriptor_tmp_108;
    block[4] = DerivedStorage;
    void block[5] = a1;
    void block[6] = v13;
    dispatch_async(v14, block);
    uint64_t v15 = 0;
    *a4 = cf[0];
  }
  return v15;
}

uint64_t videoReceiver_announceDataChannelResourceRemoval(CFTypeRef cf, const void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 3)
  {
    int v11 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v6 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v6 != CMBaseClassGetCFTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(cf);
  if (a2) {
    CFRetain(a2);
  }
  long long v8 = *(NSObject **)(DerivedStorage + 264);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_announceDataChannelResourceRemoval_block_invoke;
  block[3] = &__block_descriptor_tmp_109;
  block[4] = DerivedStorage;
  void block[5] = cf;
  void block[6] = a2;
  dispatch_async(v8, block);
  return 0;
}

uint64_t videoReceiver_setPrepareDataChannelsWithDependentResourcesCallback(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 2)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v8 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v8 != CMBaseClassGetCFTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v10 = *(NSObject **)(DerivedStorage + 264);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_setPrepareDataChannelsWithDependentResourcesCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_110;
  block[4] = DerivedStorage;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v10, block);
  return 0;
}

uint64_t videoReceiver_setResourceLifeCycleCallback(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 3)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFTypeID v8 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v8 != CMBaseClassGetCFTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v10 = *(NSObject **)(DerivedStorage + 264);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_setResourceLifeCycleCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_111;
  block[4] = DerivedStorage;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v10, block);
  return 0;
}

uint64_t videoReceiver_copyTaggedBufferGroupAndResourcesAndSamplingEventIdentifierForTime(CMTime *a1, long long *a2, uint64_t a3, CFTypeRef *a4, CFTypeRef *a5, CMTime *a6, void *a7)
{
  if (a7)
  {
    long long v9 = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    return videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(a1, (uint64_t)&v9, a3, a4, a5, a6, a7);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiver_provideFrameTelemetryForSamplingEvent(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CMTimeValue v27 = *(void *)(a2 + 24);
  CMTimeScale v28 = *(_DWORD *)(a2 + 32);
  if (a3
    && ((unint64_t)(*(void *)a3 - 3) >= 0xFFFFFFFFFFFFFFFELL ? (BOOL v4 = cf == 0) : (BOOL v4 = 1),
        !v4
     && (CMTimeFlags v7 = *(_DWORD *)(a2 + 36),
         CMTimeEpoch v8 = *(void *)(a2 + 40),
         CFTypeID v9 = CFGetTypeID(cf),
         MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v9 == CMBaseClassGetCFTypeID()&& (*(unsigned char *)(a3 + 20) & 1) != 0&& (*(unsigned char *)(a3 + 44) & 1) != 0&& (v7 & 1) != 0)))
  {
    uint64_t v10 = (_OWORD *)(a3 + 8);
    if (dword_1E9350E80 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)&time.xpc_object_t value = *v10;
    time.CMTimeEpoch epoch = *(void *)(a3 + 24);
    uint64_t v13 = CMClockConvertHostTimeToSystemUnits(&time);
    uint64_t v14 = *(void *)(a3 + 56);
    double v15 = *(double *)(a3 + 64) / (double)v14;
    LODWORD(v16) = v14;
    if (*(void *)a3 >= 2uLL) {
      uint64_t v16 = *(void *)(a3 + 80);
    }
    uint64_t v17 = *(void *)(DerivedStorage + 344);
    double v18 = *(double *)(a3 + 72);
    time.xpc_object_t value = v27;
    time.CMTimeScale timescale = v28;
    time.CMTimeFlags flags = v7;
    time.CMTimeEpoch epoch = v8;
    FigImageQueueDisplayCountHistory_TraceDisplayCountUsingHostTime(v17, &time, v14, v16, v13, v15, v18);
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(a2 + 16);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), i);
      if (ValueAtIndex)
      {
        uint64_t v22 = ValueAtIndex;
        FigReadWriteLockLockForWrite();
        uint64_t v23 = *(void *)(a3 + 56);
        if (v23 > 4294967294) {
          int v24 = -1;
        }
        else {
          int v24 = *(void *)(a3 + 56);
        }
        if (v23 < 0) {
          int v24 = 0;
        }
        *((_DWORD *)v22 + 10) = v24;
        double v25 = *(double *)(a3 + 64);
        v22[6] = v25 / (double)v23;
        v22[10] = v25;
        *(_OWORD *)&time.xpc_object_t value = *v10;
        time.CMTimeEpoch epoch = *(void *)(a3 + 24);
        *((void *)v22 + 8) = CMClockConvertHostTimeToSystemUnits(&time);
        CMTime time = *(CMTime *)(a3 + 32);
        *((void *)v22 + 9) = CMClockConvertHostTimeToSystemUnits(&time);
        v22[7] = *(double *)(a3 + 72);
        FigReadWriteLockUnlockForWrite();
      }
      else
      {
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoReceiver_setResourceLifeCycleHandler(CFTypeRef cf, const void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  double v15 = &v14;
  uint64_t v16 = 0x3002000000;
  uint64_t v17 = __Block_byref_object_copy__1;
  double v18 = __Block_byref_object_dispose__1;
  uint64_t v19 = 0;
  if (dword_1E9350E80 >= 2)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf
    && (CFTypeID v6 = CFGetTypeID(cf),
        MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v6 == CMBaseClassGetCFTypeID()))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CMTimeEpoch v8 = _Block_copy(a2);
    CFTypeID v9 = *(NSObject **)(DerivedStorage + 264);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_setResourceLifeCycleHandler_block_invoke;
    block[3] = &unk_1E5795440;
    void block[5] = &v14;
    void block[6] = DerivedStorage;
    block[4] = v8;
    dispatch_sync(v9, block);
    _Block_release((const void *)v15[5]);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v14, 8);
  return v5;
}

uint64_t videoReceiver_setPrepareDataChannelsWithDependentResourcesHandler(CFTypeRef cf, const void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  double v15 = &v14;
  uint64_t v16 = 0x3002000000;
  uint64_t v17 = __Block_byref_object_copy__1;
  double v18 = __Block_byref_object_dispose__1;
  uint64_t v19 = 0;
  if (dword_1E9350E80 >= 2)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf
    && (CFTypeID v6 = CFGetTypeID(cf),
        MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v6 == CMBaseClassGetCFTypeID()))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CMTimeEpoch v8 = _Block_copy(a2);
    CFTypeID v9 = *(NSObject **)(DerivedStorage + 264);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_setPrepareDataChannelsWithDependentResourcesHandler_block_invoke;
    block[3] = &unk_1E5795468;
    void block[5] = &v14;
    void block[6] = DerivedStorage;
    block[4] = v8;
    dispatch_sync(v9, block);
    _Block_release((const void *)v15[5]);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v14, 8);
  return v5;
}

uint64_t videoReceiver_setActiveConfigurationChangedHandler(const void *a1, const void *a2)
{
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1),
        MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v4 == CMBaseClassGetCFTypeID()))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeID v6 = _Block_copy(a2);
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 416));
    uint64_t v7 = *(void *)(DerivedStorage + 416);
    CMTimeEpoch v8 = *(const void **)(DerivedStorage + 424);
    *(void *)(DerivedStorage + 424) = v6;
    MEMORY[0x19970E930](v7);
    if (dword_1E9350E80 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    _Block_release(v8);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__n128 __videoReceiver_copyImageForTime_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CMTime time1 = *(CMTime *)(a1 + 48);
  CMTime v6 = *(CMTime *)(v2 + 124);
  if ((CMTimeCompare(&time1, &v6) & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(unsigned char *)(v4 + 96) = 1;
    long long v5 = *(_OWORD *)(a1 + 48);
    *(void *)(v4 + 116) = *(void *)(a1 + 64);
    *(_OWORD *)(v4 + 100) = v5;
    videoReceiver_activateReceiverConfiguration2(*(void *)(a1 + 40));
  }
  return result;
}

void videoReceiver_activateReceiverConfiguration2(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v16, 0, sizeof(v16));
  CMTimebaseGetTime(&v16, *(CMTimebaseRef *)(DerivedStorage + 56));
  if (*(unsigned char *)(DerivedStorage + 96)) {
    CMTime v16 = *(CMTime *)(DerivedStorage + 100);
  }
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 48);
  CMTime v15 = v16;
  if (CFArrayGetCount(v3) >= 2)
  {
    CFIndex v4 = 1;
    do
    {
      CFDictionaryRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(v3, v4);
      if (!ValueAtIndex) {
        break;
      }
      CMTime time1 = v15;
      CMTime time2 = *(CMTime *)(ValueAtIndex + 16);
      if (CMTimeCompare(&time1, &time2) < 1) {
        break;
      }
      CFArrayRemoveValueAtIndex(v3, v4++ - 1);
    }
    while (v4 < CFArrayGetCount(v3));
  }
  if (!CFArrayGetCount(v3)
    || (CMTime v6 = (char *)CFArrayGetValueAtIndex(v3, 0),
        CMTime time1 = v15,
        CMTime time2 = *(CMTime *)(v6 + 16),
        CMTimeCompare(&time1, &time2) < 0))
  {
    CFTypeRef v8 = 0;
  }
  else
  {
    uint64_t v7 = (const void *)*((void *)v6 + 5);
    if (v7) {
      CFTypeRef v8 = CFRetain(v7);
    }
    else {
      CFTypeRef v8 = 0;
    }
    CFArrayRemoveValueAtIndex(v3, 0);
    videoReceiver_replacePendingConfiguration(a1, v8);
    if (dword_1E9350E80 >= 2)
    {
      LODWORD(v15.CFDictionaryAddValue(theDict, key, value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  long long v14 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v15.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v15.CMTimeEpoch epoch = v10;
  if (receiverConfiguration_findEarliestCfgTimeToActivate(*(CFArrayRef *)(DerivedStorage + 48), (uint64_t)&v15))
  {
    int v11 = *(OpaqueCMTimebase **)(DerivedStorage + 56);
    uint64_t v12 = *(NSObject **)(DerivedStorage + 64);
    CMTime time1 = v15;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v11, v12, &time1, 1u);
    if (dword_1E9350E80 >= 2)
    {
      int v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  *(CMTime *)(DerivedStorage + 124) = v15;
  *(unsigned char *)(DerivedStorage + 96) = 0;
  *(_OWORD *)(DerivedStorage + 100) = v14;
  *(void *)(DerivedStorage + 116) = v10;
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t videoReceiver_copyOutputQueuesIfReady(const void *a1, unsigned char *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v55 = 0;
  __int16 v56 = &v55;
  uint64_t v57 = 0x2000000000;
  int v58 = 0;
  uint64_t v51 = 0;
  CFTypeRef v52 = &v51;
  uint64_t v53 = 0x2000000000;
  uint64_t v54 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = &v47;
  uint64_t v49 = 0x2000000000;
  uint64_t v50 = 0;
  uint64_t v43 = 0;
  int v44 = &v43;
  uint64_t v45 = 0x2000000000;
  uint64_t v46 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2000000000;
  uint64_t v42 = 0;
  uint64_t v35 = 0;
  CFRange v36 = &v35;
  uint64_t v37 = 0x2000000000;
  uint64_t v38 = 0;
  uint64_t v31 = 0;
  unsigned int v32 = &v31;
  uint64_t v33 = 0x2000000000;
  char v34 = 0;
  if (a1
    && (CFTypeID v14 = CFGetTypeID(a1),
        MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v14 == CMBaseClassGetCFTypeID()))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CMTime v16 = *(NSObject **)(DerivedStorage + 152);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 0x40000000;
    _OWORD v30[2] = __videoReceiver_copyOutputQueuesIfReady_block_invoke;
    v30[3] = &unk_1E5795120;
    v30[4] = &v55;
    v30[5] = &v51;
    v30[6] = &v47;
    v30[7] = &v43;
    v30[12] = a1;
    v30[13] = a7;
    _OWORD v30[8] = &v39;
    v30[9] = &v35;
    v30[10] = &v31;
    v30[11] = DerivedStorage;
    dispatch_sync(v16, v30);
  }
  else
  {
    *((_DWORD *)v56 + 6) = FigSignalErrorAt();
  }
  uint64_t v17 = v32;
  if (*((unsigned char *)v32 + 24))
  {
    if (a3)
    {
      double v18 = v52;
      *a3 = v52[3];
      v18[3] = 0;
    }
    if (a4)
    {
      uint64_t v19 = v48;
      *a4 = v48[3];
      double v19[3] = 0;
    }
    if (a5)
    {
      uint64_t v20 = v44;
      *a5 = v44[3];
      v20[3] = 0;
    }
    if (a6)
    {
      uint64_t v21 = v40;
      *a6 = v40[3];
      v21[3] = 0;
    }
    if (a7)
    {
      uint64_t v22 = v36;
      *a7 = v36[3];
      v22[3] = 0;
    }
  }
  if (a2) {
    *a2 = *((unsigned char *)v17 + 24);
  }
  uint64_t v23 = (const void *)v52[3];
  if (v23) {
    CFRelease(v23);
  }
  int v24 = (const void *)v48[3];
  if (v24) {
    CFRelease(v24);
  }
  double v25 = (const void *)v44[3];
  if (v25) {
    CFRelease(v25);
  }
  CFAllocatorRef v26 = (const void *)v40[3];
  if (v26) {
    CFRelease(v26);
  }
  CMTimeValue v27 = (const void *)v36[3];
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = *((unsigned int *)v56 + 6);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  return v28;
}

uint64_t __videoReceiver_copyImageForTime_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  CFArrayRef v3 = *(const void **)(a1 + 64);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  int v5 = *(unsigned __int8 *)(*(void *)(a1 + 72) + 40);
  CMTime v6 = (__IOSurface **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v7 = (CMTime *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  long long v9 = *(_OWORD *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 96);
  uint64_t result = videoReceiver_copyPixelBufferFromImageQueueReceiverSamplingAtTime(v2, v3, (uint64_t)&v9, v4, v5, v6, v7, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t videoReceiver_copyPixelBufferFromImageQueueReceiverSamplingAtTime(const void *a1, const void *a2, uint64_t a3, int a4, int a5, __IOSurface **a6, CMTime *a7, uint64_t *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  if (a2)
  {
    CMTimeFlags v15 = *(_DWORD *)(a3 + 12);
    if (v15)
    {
      CMTimeEpoch v16 = *(void *)(a3 + 16);
      time.xpc_object_t value = *(void *)a3;
      time.CMTimeScale timescale = *(_DWORD *)(a3 + 8);
      time.CMTimeFlags flags = v15;
      time.CMTimeEpoch epoch = v16;
      CMTimeGetSeconds(&time);
      uint64_t SampleForTime = CAXPCImageQueueReceiverCreateSampleForTime();
      if (SampleForTime)
      {
        double v18 = (const void *)SampleForTime;
        if (FigCAXPCImageQueueSampleGetTypeID_sRegisterFigCAXPCImageQueueSampleTypeOnce != -1) {
          dispatch_once(&FigCAXPCImageQueueSampleGetTypeID_sRegisterFigCAXPCImageQueueSampleTypeOnce, &__block_literal_global_68);
        }
        uint64_t Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          *(void *)(Instance + 16) = CFRetain(v18);
          *(void *)(Instance + 32) = FigReadWriteLockCreate();
          *(unsigned char *)(Instance + 24) = a4;
          *(unsigned char *)(Instance + 25) = a4 == 0;
          *(unsigned char *)(Instance + 26) = 0;
        }
        else
        {
          uint64_t v20 = FigSignalErrorAt();
          if (v20)
          {
LABEL_9:
            CFRelease(v18);
            if (!v20) {
              goto LABEL_10;
            }
LABEL_48:
            if (!Instance) {
              return v20;
            }
            goto LABEL_53;
          }
        }
        uint64_t v20 = 0;
        goto LABEL_9;
      }
    }
  }
  uint64_t v20 = FigSignalErrorAt();
  uint64_t Instance = 0;
  if (v20) {
    goto LABEL_48;
  }
LABEL_10:
  CAXPCImageQueueSampleGetTimestamp();
  double v22 = v21;
  if (!CAXPCImageQueueSampleGetIOSurface())
  {
    uint64_t v20 = FigSignalErrorAt();
LABEL_53:
    CFDictionaryRef Mutable = 0;
    goto LABEL_54;
  }
  if (a5)
  {
    uint64_t v23 = 32;
    if (a4) {
      uint64_t v24 = 32;
    }
    else {
      uint64_t v24 = 24;
    }
    if (a4) {
      uint64_t v23 = 24;
    }
    CFDictionaryRef v25 = *(const __CFDictionary **)(DerivedStorage + v23);
    CFDictionaryRef v26 = *(const __CFDictionary **)(DerivedStorage + v24);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v26, a2);
    CFDictionaryRef Mutable = Value;
    if (Value)
    {
      CFRetain(Value);
      uint64_t v29 = (__IOSurface *)vr_copyCachedPixelBufferIfSameIQSample(Mutable);
      BOOL v30 = v29 != 0;
      if (v29)
      {
        IOSurface = v29;
        goto LABEL_32;
      }
    }
    else
    {
      BOOL v30 = 0;
    }
    CFDictionaryRef v32 = (const __CFDictionary *)CFDictionaryGetValue(v25, a2);
    if (v32)
    {
      IOSurface = (__IOSurface *)vr_copyCachedPixelBufferIfSameIQSample(v32);
      if (IOSurface) {
        goto LABEL_32;
      }
    }
  }
  else
  {
    BOOL v30 = 0;
    CFDictionaryRef Mutable = 0;
    CFDictionaryRef v26 = 0;
  }
  time.xpc_object_t value = 0;
  IOSurface = (__IOSurface *)CAXPCImageQueueSampleGetIOSurface();
  if (IOSurface)
  {
    if (MEMORY[0x1E4F39B28]) {
      int IsLowLatency = CAXPCImageQueueSampleIsLowLatency();
    }
    else {
      int IsLowLatency = 0;
    }
    CFAllocatorRef v34 = CFGetAllocator((CFTypeRef)Instance);
    uint64_t v35 = CVPixelBufferCreateWithIOSurface(v34, IOSurface, 0, (CVPixelBufferRef *)&time);
    if (!v35)
    {
      if (IsLowLatency) {
        CVBufferSetAttachment((CVBufferRef)time.value, (CFStringRef)*MEMORY[0x1E4F24AE0], (CFTypeRef)*MEMORY[0x1E4F1CFD0], kCVAttachmentMode_ShouldNotPropagate);
      }
      IOSurface = (__IOSurface *)time.value;
      goto LABEL_32;
    }
    uint64_t v20 = v35;
    if (time.value) {
      CFRelease((CFTypeRef)time.value);
    }
LABEL_54:
    IOSurface = 0;
    goto LABEL_55;
  }
  uint64_t v37 = FigSignalErrorAt();
  if (v37) {
    goto LABEL_62;
  }
LABEL_32:
  if (a5 && !v30)
  {
    if (Mutable
      || (CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
    {
      CFDictionarySetValue(Mutable, @"CachedPixelBuffer", IOSurface);
      CFDictionarySetValue(Mutable, @"CachedIQSample", (const void *)Instance);
      CFDictionarySetValue(v26, a2, Mutable);
      goto LABEL_37;
    }
    uint64_t v37 = FigSignalErrorAt();
LABEL_62:
    uint64_t v20 = v37;
    goto LABEL_55;
  }
LABEL_37:
  if (a6)
  {
    *a6 = IOSurface;
    IOSurface = 0;
  }
  if (a7)
  {
    CMTimeMakeWithSeconds(&time, v22 + 0.00000555555556, 90000);
    *a7 = time;
  }
  uint64_t v20 = 0;
  if (a8)
  {
    *a8 = Instance;
    if (!IOSurface) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_55:
  CFRelease((CFTypeRef)Instance);
  if (IOSurface) {
LABEL_43:
  }
    CFRelease(IOSurface);
LABEL_44:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v20;
}

void videoReceiver_replacePendingConfiguration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350E80)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  videoReceiver_RemoveAndReleaseConfiguration(a1, *(void *)(DerivedStorage + 80));
  *(void *)(DerivedStorage + 80) = a2;
  if (a2) {
    CFRetain(a2);
  }
}

uint64_t receiverConfiguration_findEarliestCfgTimeToActivate(CFArrayRef theArray, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  uint64_t result = (uint64_t)CFArrayGetValueAtIndex(theArray, 0);
  if (result)
  {
    long long v6 = *(_OWORD *)(result + 16);
    *(void *)(a2 + 16) = *(void *)(result + 32);
    *(_OWORD *)a2 = v6;
    return 1;
  }
  return result;
}

void videoReceiver_RemoveAndReleaseConfiguration(uint64_t a1, uint64_t a2)
{
  block[16] = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  if (dword_1E9350E80 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    if (videoReceiver_deferCFObjectRelease_deferredReleaseQueueOnce != -1) {
      dispatch_once(&videoReceiver_deferCFObjectRelease_deferredReleaseQueueOnce, &__block_literal_global_56);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_deferCFObjectRelease_block_invoke_2;
    block[3] = &__block_descriptor_tmp_58;
    block[4] = a2;
    dispatch_async((dispatch_queue_t)videoReceiver_deferCFObjectRelease_deferredReleaseQueue, block);
  }
}

dispatch_queue_t __videoReceiver_deferCFObjectRelease_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.videoreceiver.deferredrelease", 0);
  videoReceiver_deferCFObjectRelease_deferredReleaseuint64_t Queue = (uint64_t)result;
  return result;
}

void __videoReceiver_deferCFObjectRelease_block_invoke_2(uint64_t a1)
{
  if (dword_1E9350E80 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __videoReceiver_copyOutputQueuesIfReady_block_invoke(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  __int16 v102 = 0;
  uint64_t v2 = a1[11];
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3)
  {
    uint64_t v4 = (CFMutableArrayRef *)(*(void *)(a1[5] + 8) + 24);
    int v5 = (__CFArray **)(*(void *)(a1[6] + 8) + 24);
    long long v6 = (__CFArray **)(*(void *)(a1[7] + 8) + 24);
    uint64_t v7 = (__CFArray **)(*(void *)(a1[8] + 8) + 24);
    uint64_t v8 = a1[12];
    if (v1[13]) {
      long long v9 = (uint64_t *)(*(void *)(v1[9] + 8) + 24);
    }
    else {
      long long v9 = 0;
    }
    *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = videoReceiver_copyOutputQueuesResourceAndStatusFromConfiguration(v8, v3, v4, v5, v6, v7, v9, (char *)&v102 + 1, (char *)&v102);
    if (*(_DWORD *)(*(void *)(v1[4] + 8) + 24)) {
      return;
    }
    uint64_t v10 = v1[11];
    if (!*(void *)(v10 + 88) || v102)
    {
      if (dword_1E9350E80 >= 2)
      {
        LODWORD(v103.CFDictionaryAddValue(theDict, key, value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v18 = v103.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v19 = v18;
        }
        else {
          unsigned int v19 = v18 & 0xFFFFFFFE;
        }
        if (v19)
        {
          uint64_t v20 = v1[12];
          if (v20) {
            double v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          }
          else {
            double v21 = "";
          }
          uint64_t v22 = *(void *)(v1[11] + 80);
          *(_DWORD *)UInt8 buffer = 136315906;
          *(void *)&buffer[4] = "videoReceiver_copyOutputQueuesIfReady_block_invoke";
          *(_WORD *)&unsigned char buffer[12] = 2048;
          *(void *)&buffer[14] = v20;
          __int16 v116 = 2082;
          __int16 v117 = v21;
          __int16 v118 = 2114;
          uint64_t v119 = v22;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v10 = v1[11];
      }
      uint64_t v23 = v1[12];
      uint64_t v24 = *(void **)(v10 + 80);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFStringRef v107 = 0;
      theCFStringRef String = 0;
      CFTypeRef v105 = 0;
      CFTypeRef v106 = 0;
      CFTypeRef v104 = 0;
      memset(&v103, 0, sizeof(v103));
      uint64_t v26 = *(void *)(DerivedStorage + 88);
      if (v26) {
        FigDataChannelConfigurationCopyLoggingIdentifier(v26, &theString);
      }
      if (v24) {
        FigDataChannelConfigurationCopyLoggingIdentifier((uint64_t)v24, &v107);
      }
      CMTimeValue v27 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      if (*MEMORY[0x1E4F1EBA8] == 1)
      {
        CFStringRef v28 = theString;
        *(void *)UInt8 buffer = 0;
        if (theString)
        {
          if (CFStringGetLength(theString) <= 8) {
            v29.length = CFStringGetLength(v28);
          }
          else {
            v29.length = 8;
          }
          v29.CFIndex location = 0;
          CFStringGetBytes(v28, v29, 0, 0x3Fu, 0, buffer, 8, 0);
        }
        strncpy((char *)&__dst, buffer, 8uLL);
        CFStringRef v30 = v107;
        *(void *)UInt8 buffer = 0;
        if (v107)
        {
          if (CFStringGetLength(v107) <= 8) {
            v31.length = CFStringGetLength(v30);
          }
          else {
            v31.length = 8;
          }
          v31.CFIndex location = 0;
          CFStringGetBytes(v30, v31, 0, 0x3Fu, 0, buffer, 8, 0);
        }
        strncpy((char *)&__dst, buffer, 8uLL);
        kdebug_trace();
        if (*v27 == 1)
        {
          CFStringRef v32 = v107;
          *(void *)UInt8 buffer = 0;
          if (v107)
          {
            if (CFStringGetLength(v107) <= 8) {
              v33.length = CFStringGetLength(v32);
            }
            else {
              v33.length = 8;
            }
            v33.CFIndex location = 0;
            CFStringGetBytes(v32, v33, 0, 0x3Fu, 0, buffer, 8, 0);
          }
          strncpy((char *)&__dst, buffer, 8uLL);
          kdebug_trace();
        }
      }
      if (dword_1E9350E80)
      {
        *(_DWORD *)os_log_type_t type = 0;
        v113[0] = OS_LOG_TYPE_DEFAULT;
        CFAllocatorRef v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v35 = *(_DWORD *)type;
        if (os_log_type_enabled(v34, v113[0])) {
          unsigned int v36 = v35;
        }
        else {
          unsigned int v36 = v35 & 0xFFFFFFFE;
        }
        if (v36)
        {
          if (v23) {
            uint64_t v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          }
          else {
            uint64_t v37 = "";
          }
          uint64_t v38 = *(void *)(DerivedStorage + 88);
          *(_DWORD *)UInt8 buffer = 136316162;
          *(void *)&buffer[4] = "videoReceiver_replaceActiveConfiguration";
          *(_WORD *)&unsigned char buffer[12] = 2048;
          *(void *)&buffer[14] = v23;
          __int16 v116 = 2082;
          __int16 v117 = v37;
          __int16 v118 = 2114;
          uint64_t v119 = v38;
          __int16 v120 = 2114;
          CFIndex v121 = v24;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      videoReceiver_RemoveAndReleaseConfiguration(v23, *(void *)(DerivedStorage + 88));
      *(void *)(DerivedStorage + 88) = v24;
      if (v24) {
        CFRetain(v24);
      }
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 24));
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 32));
      if (!FigDataChannelConfigurationGetChannelCount((uint64_t)v24)
        && !FigDataChannelConfigurationGetResourceCount((uint64_t)v24))
      {
        uint64_t v39 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(DerivedStorage + 360) = *MEMORY[0x1E4F1F9F8];
        *(void *)(DerivedStorage + 376) = *(void *)(v39 + 16);
        uint64_t v40 = *(const void **)(DerivedStorage + 384);
        if (v40)
        {
          CFRelease(v40);
          *(void *)(DerivedStorage + 384) = 0;
        }
        uint64_t v41 = *(const void **)(DerivedStorage + 392);
        if (v41)
        {
          CFRelease(v41);
          *(void *)(DerivedStorage + 392) = 0;
        }
      }
      if (!fvr_copyDescriptionSettingsAndResourcesFromConfiguration((uint64_t)v24, (CFMutableArrayRef *)&v106, (CFMutableDictionaryRef *)&v105, 0)&& !FigDataChannelConfigurationCopyPlaybackItemUniqueInstanceIdentifier((CFStringRef *)v24, (CFStringRef *)&v104))
      {
        CFTypeRef v42 = v104;
        CFTypeRef v43 = v105;
        CFTypeRef v44 = v106;
        CMTimebaseGetTime(&v103, *(CMTimebaseRef *)(DerivedStorage + 56));
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 416));
        uint64_t v45 = *(void *)(DerivedStorage + 424);
        if (v45)
        {
          uint64_t v46 = *(void (**)(uint64_t, uint64_t, CMTag *))(v45 + 16);
          *(void *)&__dst.category = v42;
          __dst.xpc_object_t value = (CMTagValue)v44;
          CFTypeRef v123 = v43;
          CMTime v124 = v103;
          v46(v45, v23, &__dst);
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 416));
        xpc_object_t value = 0;
        CFTypeRef v111 = 0;
        CMTagCollectionRef tagCollection = 0;
        uint64_t v47 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19970E910](*(void *)(v47 + 336));
        uint64_t v48 = *(const void **)(v47 + 312);
        CFTypeRef cf = (CFTypeRef)v23;
        if (v48) {
          CFArrayRef v49 = (const __CFArray *)CFRetain(v48);
        }
        else {
          CFArrayRef v49 = 0;
        }
        uint64_t v83 = v47;
        uint64_t v84 = v1;
        MEMORY[0x19970E930](*(void *)(v47 + 336));
        uint64_t v99 = (uint64_t)v24;
        ChannelCFIndex Count = FigDataChannelConfigurationGetChannelCount((uint64_t)v24);
        uint64_t v51 = (uint64_t *)MEMORY[0x1E4F1F418];
        uint64_t v98 = ChannelCount;
        if (ChannelCount < 1)
        {
          BOOL v54 = 0;
          BOOL v53 = 0;
        }
        else
        {
          CFIndex v52 = 0;
          LOBYTE(v53) = 0;
          LOBYTE(v54) = 0;
          uint64_t v55 = *MEMORY[0x1E4F1F418];
          CMTagValue v56 = *(void *)(MEMORY[0x1E4F1F418] + 8);
          uint64_t v57 = *MEMORY[0x1E4F1F428];
          CMTagValue v58 = *(void *)(MEMORY[0x1E4F1F428] + 8);
          do
          {
            ChannelDescriptionTagsAtIndex = (const OpaqueCMTagCollection *)FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(v99, v52);
            __int16 v60 = ChannelDescriptionTagsAtIndex;
            if (v54)
            {
              BOOL v54 = 1;
            }
            else
            {
              *(void *)&v126.category = v55;
              v126.xpc_object_t value = v56;
              BOOL v54 = CMTagCollectionContainsTag(ChannelDescriptionTagsAtIndex, v126) != 0;
            }
            if (v53)
            {
              BOOL v53 = 1;
            }
            else
            {
              *(void *)&v127.category = v57;
              v127.xpc_object_t value = v58;
              BOOL v53 = CMTagCollectionContainsTag(v60, v127) != 0;
            }
            ++v52;
          }
          while (v98 != v52);
        }
        CFAllocatorRef v61 = CFGetAllocator(cf);
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v61, 0, MEMORY[0x1E4F1D510]);
        if (Mutable && (CFAllocatorRef v63 = CFGetAllocator(cf), (v64 = CFArrayCreateMutable(v63, 0, MEMORY[0x1E4F1D510])) != 0))
        {
          CFMutableArrayRef v90 = v64;
          CFMutableArrayRef theArray = Mutable;
          if (v98 < 1)
          {
LABEL_154:
            uint64_t v80 = *(const void **)(v83 + 440);
            CFMutableArrayRef Mutable = theArray;
            *(void *)(v83 + 440) = theArray;
            CFRetain(theArray);
            if (v80) {
              CFRelease(v80);
            }
            CMTime v81 = *(const void **)(v83 + 448);
            *(void *)(v83 + 448) = v90;
            CFMutableArrayRef v79 = v90;
            CFRetain(v90);
            uint64_t v1 = v84;
            if (v81) {
              CFRelease(v81);
            }
          }
          else
          {
            CFIndex v65 = 0;
            int v66 = v54 && v53;
            CMTagValue v96 = *(void *)(MEMORY[0x1E4F1F410] + 8);
            uint64_t v97 = *MEMORY[0x1E4F1F410];
            CMTagValue v93 = v51[1];
            uint64_t v94 = *v51;
            CMTagValue v88 = *(void *)(MEMORY[0x1E4F1F428] + 8);
            uint64_t v89 = *MEMORY[0x1E4F1F428];
            CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            key = (void *)*MEMORY[0x1E4F24A90];
            uint64_t v86 = (void *)*MEMORY[0x1E4F24C18];
            uint64_t v85 = (void *)*MEMORY[0x1E4F24BC8];
            while (1)
            {
              uint64_t v67 = (const OpaqueCMTagCollection *)FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(v99, v65);
              if (vr_createModifiedDataChannelTagCollectionWithDefaultTags(v67, &tagCollection)) {
                break;
              }
              uint64_t v95 = v67;
              CFIndex v100 = v65;
              CFIndex v68 = 0;
              if (v49)
              {
LABEL_99:
                CFIndex Count = CFArrayGetCount(v49);
                goto LABEL_101;
              }
              while (1)
              {
                CFIndex Count = 0;
LABEL_101:
                if (v68 >= Count) {
                  break;
                }
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v49, v68);
                uint64_t v71 = (const OpaqueCMTagCollection *)CFDictionaryGetValue(ValueAtIndex, @"ChannelDescription");
                uint64_t v72 = CFDictionaryGetValue(ValueAtIndex, @"ChannelSpecificSettings");
                uint64_t v73 = FigCFDictionaryGetValue();
                if (v71 && v73)
                {
                  if (CMTagCollectionContainsTagsOfCollection(tagCollection, v71)) {
                    goto LABEL_125;
                  }
                  if (v66)
                  {
                    char v74 = tagCollection;
                    CMTag __dst = (CMTag)*MEMORY[0x1E4F1F3D8];
                    *(CMTag *)UInt8 buffer = __dst;
                    *(void *)uint64_t v113 = 0;
                    *(void *)os_log_type_t type = 0;
                    CMItemCount numberOfTagsCopied = 0;
                    CMTagCollectionGetTagsWithCategory(tagCollection, kCMTagCategory_StereoView, &__dst, 1, &numberOfTagsCopied);
                    if (numberOfTagsCopied < 1
                      || (CMTagCollectionGetTagsWithCategory(v71, kCMTagCategory_StereoView, (CMTag *)buffer, 1, &numberOfTagsCopied), numberOfTagsCopied < 1)|| !CMTagEqualToTag(__dst, *(CMTag *)buffer)&& ((v128.xpc_object_t value = v96, *(void *)&v128.category = v97, !CMTagEqualToTag(*(CMTag *)buffer, v128))|| (v129.xpc_object_t value = v93, *(void *)&v129.category = v94, !CMTagEqualToTag(__dst, v129))&& (v130.xpc_object_t value = v88, *(void *)&v130.category = v89, !CMTagEqualToTag(__dst, v130)))|| CMTagCollectionCreateMutableCopy(v74, allocator, (CMMutableTagCollectionRef *)type)|| CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_StereoView)|| CMTagCollectionCreateMutableCopy(v71, allocator, (CMMutableTagCollectionRef *)v113)|| CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)v113, kCMTagCategory_StereoView))
                    {
                      int v75 = 0;
                    }
                    else
                    {
                      int v75 = CMTagCollectionContainsTagsOfCollection(*(CMTagCollectionRef *)type, *(CMTagCollectionRef *)v113);
                    }
                    if (*(void *)type) {
                      CFRelease(*(CFTypeRef *)type);
                    }
                    if (*(void *)v113) {
                      CFRelease(*(CFTypeRef *)v113);
                    }
                    if (v75)
                    {
LABEL_125:
                      CFGetAllocator(cf);
                      if (VTPixelBufferConformerCreateWithAttributes()) {
                        goto LABEL_153;
                      }
                      if (!v72) {
                        goto LABEL_145;
                      }
                      int v76 = CFGetAllocator(cf);
                      if (FigDataChannelConfigurationCopyFormatDescriptionsAtIndex(v99, v76, v100, (uint64_t *)&v111))goto LABEL_153; {
                      v113[0] = OS_LOG_TYPE_DEFAULT;
                      }
                      FigCFDictionaryGetValue();
                      *(void *)&__dst.category = FigCFDictionaryGetValue();
                      *(void *)UInt8 buffer = FigCFDictionaryGetValue();
                      *(void *)os_log_type_t type = FigCFDictionaryGetValue();
                      if (FigCFDictionaryGetBooleanIfPresent() && v113[0] == OS_LOG_TYPE_DEFAULT) {
                        CMFormatDescriptionGetWidestColorPropertiesFromFormatDescriptions();
                      }
                      char v77 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      if (v77)
                      {
                        uint64_t v78 = v77;
                        if (*(void *)&__dst.category) {
                          CFDictionarySetValue(v77, key, *(const void **)&__dst.category);
                        }
                        if (*(void *)buffer) {
                          CFDictionarySetValue(v78, v86, *(const void **)buffer);
                        }
                        if (*(void *)type) {
                          CFDictionarySetValue(v78, v85, *(const void **)type);
                        }
                        if (CFDictionaryGetCount(v78) <= 0)
                        {
                          CFRelease(v78);
                          goto LABEL_140;
                        }
                      }
                      else
                      {
                        if (FigSignalErrorAt()) {
                          goto LABEL_153;
                        }
LABEL_140:
                        uint64_t v78 = 0;
                      }
                      if (v111)
                      {
                        CFRelease(v111);
                        CFTypeRef v111 = 0;
                      }
                      if (v78)
                      {
                        VTPixelBufferConformerSetColorProperties();
                        CFArrayAppendValue(theArray, v95);
                        CFArrayAppendValue(v90, value);
                        CFRelease(v78);
                      }
                      else
                      {
LABEL_145:
                        CFArrayAppendValue(theArray, v95);
                        CFArrayAppendValue(v90, value);
                      }
                      if (value)
                      {
                        CFRelease(value);
                        xpc_object_t value = 0;
                      }
                      break;
                    }
                  }
                }
                ++v68;
                if (v49) {
                  goto LABEL_99;
                }
              }
              if (tagCollection)
              {
                CFRelease(tagCollection);
                CMTagCollectionRef tagCollection = 0;
              }
              CFIndex v65 = v100 + 1;
              if (v100 + 1 == v98) {
                goto LABEL_154;
              }
            }
LABEL_153:
            uint64_t v1 = v84;
            CFMutableArrayRef v79 = v90;
            CFMutableArrayRef Mutable = theArray;
          }
        }
        else
        {
          FigSignalErrorAt();
          CFMutableArrayRef v79 = 0;
          uint64_t v1 = v84;
        }
        if (tagCollection) {
          CFRelease(tagCollection);
        }
        if (value) {
          CFRelease(value);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v79) {
          CFRelease(v79);
        }
        if (v49) {
          CFRelease(v49);
        }
        if (v111) {
          CFRelease(v111);
        }
      }
      if (v104) {
        CFRelease(v104);
      }
      if (v106) {
        CFRelease(v106);
      }
      if (v105) {
        CFRelease(v105);
      }
      if (theString) {
        CFRelease(theString);
      }
      if (v107) {
        CFRelease(v107);
      }
      CMBlockBufferRef v82 = *(const void **)(v1[11] + 80);
      if (v82)
      {
        CFRelease(v82);
        *(void *)(v1[11] + 80) = 0;
      }
      goto LABEL_182;
    }
  }
  else if (!*(void *)(v2 + 88))
  {
    return;
  }
  int v11 = *(const void **)(*(void *)(v1[5] + 8) + 24);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(*(void *)(v1[5] + 8) + 24) = 0;
  }
  uint64_t v12 = *(const void **)(*(void *)(v1[6] + 8) + 24);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(*(void *)(v1[6] + 8) + 24) = 0;
  }
  int v13 = *(const void **)(*(void *)(v1[7] + 8) + 24);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(*(void *)(v1[7] + 8) + 24) = 0;
  }
  uint64_t v14 = *(void *)(v1[8] + 8);
  CMTimeFlags v15 = *(const void **)(v14 + 24);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(*(void *)(v1[8] + 8) + 24) = 0;
    uint64_t v14 = *(void *)(v1[8] + 8);
  }
  if (v1[13]) {
    CMTimeEpoch v16 = (uint64_t *)(*(void *)(v1[9] + 8) + 24);
  }
  else {
    CMTimeEpoch v16 = 0;
  }
  *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = videoReceiver_copyOutputQueuesResourceAndStatusFromConfiguration(v1[12], *(void *)(v1[11] + 88), (CFMutableArrayRef *)(*(void *)(v1[5] + 8) + 24), (__CFArray **)(*(void *)(v1[6] + 8) + 24), (__CFArray **)(*(void *)(v1[7] + 8) + 24), (__CFArray **)(v14 + 24), v16, (char *)&v102 + 1, (char *)&v102);
  if (!*(_DWORD *)(*(void *)(v1[4] + 8) + 24))
  {
LABEL_182:
    if (HIBYTE(v102) | v102) {
      *(unsigned char *)(*(void *)(v1[10] + 8) + 24) = 1;
    }
  }
}

uint64_t videoReceiver_copyOutputQueuesResourceAndStatusFromConfiguration(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3, __CFArray **a4, __CFArray **a5, __CFArray **a6, uint64_t *a7, char *a8, char *a9)
{
  CMBaseObjectGetDerivedStorage();
  ChannelCFIndex Count = FigDataChannelConfigurationGetChannelCount(a2);
  if (!ChannelCount)
  {
    CFStringRef v30 = 0;
    CMTimeEpoch v16 = 0;
    CMTimeFlags v15 = 0;
    CFMutableArrayRef Mutable = 0;
    char v20 = 0;
    char v31 = 1;
    goto LABEL_30;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    char v20 = 0;
    CMTimeFlags v15 = 0;
LABEL_65:
    CMTimeEpoch v16 = 0;
    goto LABEL_66;
  }
  CMTimeFlags v15 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
  if (!v15)
  {
    char v20 = 0;
    goto LABEL_65;
  }
  CMTimeEpoch v16 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
  if (!v16 || (CFMutableArrayRef v17 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510])) == 0)
  {
    char v20 = 0;
LABEL_66:
    CFStringRef v30 = 0;
    ChannelCFIndex Count = 0;
    goto LABEL_57;
  }
  uint64_t v39 = a8;
  uint64_t v40 = a7;
  CFMutableArrayRef theArray = v17;
  unsigned int v18 = Mutable;
  if (ChannelCount >= 1)
  {
    CFIndex v19 = 0;
    char v20 = 0;
    while (1)
    {
      int OutputQueueTypeAtIndex = FigDataChannelConfigurationGetOutputQueueTypeAtIndex(a2, v19);
      if (OutputQueueTypeAtIndex == 2)
      {
        FigDataQueueAtIndex = FigDataChannelConfigurationGetFigDataQueueAtIndex(a2, v19);
        if (!FigDataQueueAtIndex
          || (CMTimeValue v27 = FigDataQueueAtIndex,
              (ChannelDescriptionTagsAtIndex = FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(a2, v19)) == 0))
        {
LABEL_55:
          ChannelCFIndex Count = 0;
          goto LABEL_56;
        }
        CFRange v29 = ChannelDescriptionTagsAtIndex;
        CFArrayAppendValue(v16, v27);
        CFArrayAppendValue(theArray, v29);
        char v20 = 1;
      }
      else if (OutputQueueTypeAtIndex == 1)
      {
        CAImageQueueReceiverAtIndex = FigDataChannelConfigurationGetCAImageQueueReceiverAtIndex(a2, v19);
        if (!CAImageQueueReceiverAtIndex)
        {
          ChannelCFIndex Count = 0;
          goto LABEL_56;
        }
        uint64_t v23 = CAImageQueueReceiverAtIndex;
        uint64_t v24 = FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(a2, v19);
        if (!v24) {
          goto LABEL_55;
        }
        CFDictionaryRef v25 = v24;
        if (CAXPCImageQueueReceiverGetImageCount()) {
          char v20 = 1;
        }
        CFArrayAppendValue(v18, v23);
        CFArrayAppendValue(v15, v25);
      }
      if (ChannelCount == ++v19) {
        goto LABEL_22;
      }
    }
  }
  char v20 = 0;
LABEL_22:
  ResourceCFIndex Count = FigDataChannelConfigurationGetResourceCount(a2);
  char v31 = 0;
  ChannelCFIndex Count = 0;
  if (!v40 || (CFIndex v33 = ResourceCount, ResourceCount < 1))
  {
LABEL_29:
    CFMutableArrayRef Mutable = v18;
    a8 = v39;
    a7 = v40;
    CFStringRef v30 = theArray;
    goto LABEL_30;
  }
  ChannelCFIndex Count = (uint64_t)CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
  if (ChannelCount)
  {
    CFIndex v34 = 0;
    while (1)
    {
      FigDataChannelResourceAtIndex = FigDataChannelConfigurationGetFigDataChannelResourceAtIndex(a2, v34);
      if (!FigDataChannelResourceAtIndex) {
        break;
      }
      CFArrayAppendValue((CFMutableArrayRef)ChannelCount, FigDataChannelResourceAtIndex);
      if (v33 == ++v34)
      {
        char v31 = 0;
        goto LABEL_29;
      }
    }
  }
LABEL_56:
  CFMutableArrayRef Mutable = v18;
  a8 = v39;
  a7 = v40;
  CFStringRef v30 = theArray;
LABEL_57:
  uint64_t v38 = FigSignalErrorAt();
  if (v38)
  {
    uint64_t v36 = v38;
    if (!Mutable) {
      goto LABEL_46;
    }
LABEL_45:
    CFRelease(Mutable);
    goto LABEL_46;
  }
  char v31 = 0;
LABEL_30:
  if (a3)
  {
    *a3 = Mutable;
    CFMutableArrayRef Mutable = 0;
  }
  if (a4)
  {
    *a4 = v15;
    CMTimeFlags v15 = 0;
  }
  if (a5)
  {
    *a5 = v16;
    CMTimeEpoch v16 = 0;
  }
  if (a6)
  {
    *a6 = v30;
    CFStringRef v30 = 0;
  }
  if (a7)
  {
    *a7 = ChannelCount;
    ChannelCFIndex Count = 0;
  }
  if (a8) {
    *a8 = v31;
  }
  uint64_t v36 = 0;
  if (a9) {
    *a9 = v20;
  }
  if (Mutable) {
    goto LABEL_45;
  }
LABEL_46:
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (ChannelCount) {
    CFRelease((CFTypeRef)ChannelCount);
  }
  return v36;
}

uint64_t fvr_copyDescriptionSettingsAndResourcesFromConfiguration(uint64_t a1, CFMutableArrayRef *a2, CFMutableDictionaryRef *a3, CFMutableArrayRef *a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v9 = Mutable;
    CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v10 || (CFMutableArrayRef v11 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510])) == 0)
    {
      uint64_t TagsWithCategory = FigSignalErrorAt();
      CFMutableArrayRef v12 = 0;
      goto LABEL_21;
    }
    CFMutableArrayRef v12 = v11;
    uint64_t v23 = a4;
    ChannelCFIndex Count = FigDataChannelConfigurationGetChannelCount(a1);
    if (ChannelCount < 1)
    {
LABEL_10:
      ResourceCFIndex Count = FigDataChannelConfigurationGetResourceCount(a1);
      if (ResourceCount < 1)
      {
LABEL_14:
        if (a2)
        {
          *a2 = v9;
          CFMutableArrayRef v9 = 0;
        }
        if (a3)
        {
          *a3 = v10;
          CFMutableDictionaryRef v10 = 0;
        }
        uint64_t TagsWithCategory = 0;
        if (v23)
        {
          *uint64_t v23 = v12;
          CFMutableArrayRef v12 = 0;
        }
LABEL_20:
        if (!v9)
        {
LABEL_22:
          if (v10) {
            CFRelease(v10);
          }
          if (v12) {
            CFRelease(v12);
          }
          return TagsWithCategory;
        }
LABEL_21:
        CFRelease(v9);
        goto LABEL_22;
      }
      CFIndex v19 = ResourceCount;
      CFIndex v20 = 0;
      while (1)
      {
        FigDataChannelResourceAtIndex = FigDataChannelConfigurationGetFigDataChannelResourceAtIndex(a1, v20);
        if (!FigDataChannelResourceAtIndex) {
          break;
        }
        CFArrayAppendValue(v12, FigDataChannelResourceAtIndex);
        if (v19 == ++v20) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      CFIndex v14 = ChannelCount;
      CFIndex v15 = 0;
      while (1)
      {
        ChannelDescriptionTagsAtIndex = FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(a1, v15);
        if (!ChannelDescriptionTagsAtIndex) {
          break;
        }
        CFArrayAppendValue(v9, ChannelDescriptionTagsAtIndex);
        if (FigDataChannelConfigurationGetChannelSettingsAtIndex(a1, v15))
        {
          uint64_t TagsWithCategory = FigTagCollectionGetTagsWithCategory();
          FigSignalErrorAt();
          goto LABEL_20;
        }
        if (v14 == ++v15) {
          goto LABEL_10;
        }
      }
    }
    uint64_t TagsWithCategory = FigSignalErrorAt();
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

uint64_t vr_createModifiedDataChannelTagCollectionWithDefaultTags(const OpaqueCMTagCollection *a1, void *a2)
{
  if (a1)
  {
    if (!a2) {
      return FigSignalErrorAt();
    }
    uint64_t MutableCopy = FigTagCollectionCreateMutableCopy();
    if (!MutableCopy)
    {
      if (!CMTagCollectionContainsTag(a1, *MEMORY[0x1E4F1F3E0])) {
        goto LABEL_16;
      }
      uint64_t v5 = *MEMORY[0x1E4F1F418];
      CMTagValue v6 = *(void *)(MEMORY[0x1E4F1F418] + 8);
      *(void *)&v12.category = *MEMORY[0x1E4F1F418];
      v12.xpc_object_t value = v6;
      if (!CMTagCollectionContainsTag(a1, v12)) {
        goto LABEL_25;
      }
      uint64_t v7 = *MEMORY[0x1E4F1F428];
      CMTagValue v8 = *(void *)(MEMORY[0x1E4F1F428] + 8);
      *(void *)&v13.category = *MEMORY[0x1E4F1F428];
      v13.xpc_object_t value = v8;
      if (!CMTagCollectionContainsTag(a1, v13)
        || (*(void *)&v14.category = v5,
            v14.xpc_object_t value = v6,
            uint64_t MutableCopy = CMTagCollectionRemoveTag(0, v14),
            !MutableCopy)
        && (*(void *)&v15.category = v7,
            v15.xpc_object_t value = v8,
            uint64_t MutableCopy = CMTagCollectionRemoveTag(0, v15),
            !MutableCopy)
        && (uint64_t MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E4F1F410]), !MutableCopy))
      {
LABEL_25:
        if (CMTagCollectionContainsCategory(a1, kCMTagCategory_StereoView)
          || (uint64_t MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E4F1F420]), !MutableCopy))
        {
          if (CMTagCollectionContainsCategory(a1, kCMTagCategory_PackingType)
            || (uint64_t MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E4F1F3E8]), !MutableCopy))
          {
            if (CMTagCollectionContainsCategory(a1, kCMTagCategory_ProjectionType)
              || (uint64_t MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E4F1F408]), !MutableCopy))
            {
LABEL_16:
              uint64_t v9 = 0;
              *a2 = 0;
              return v9;
            }
          }
        }
      }
    }
    return MutableCopy;
  }

  return FigSignalErrorAt();
}

CFTypeRef vr_copyCachedPixelBufferIfSameIQSample(const __CFDictionary *a1)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"CachedPixelBuffer");
  uint64_t v3 = CFDictionaryGetValue(a1, @"CachedIQSample");
  if (Value) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  IOSurface = (__IOSurface *)CAXPCImageQueueSampleGetIOSurface();
  CAXPCImageQueueSampleGetTimestamp();
  double v7 = v6;
  CMTagValue v8 = (__IOSurface *)CAXPCImageQueueSampleGetIOSurface();
  CAXPCImageQueueSampleGetTimestamp();
  double v10 = v9;
  IOSurfaceID ID = IOSurfaceGetID(IOSurface);
  if (ID != IOSurfaceGetID(v8) || v7 != v10) {
    return 0;
  }

  return CFRetain(Value);
}

uint64_t __FigCAXPCImageQueueSampleGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigCAXPCImageQueueSampleGetTypeID_sFigCAXPCImageQueueSampleuint64_t TypeID = result;
  return result;
}

double figCAXPCImageQueueSample_init(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t figCAXPCImageQueueSample_finalize(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 7)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a1 + 25))
  {
    cf[0] = 0;
    figCAXPCImageQueueSample_copyTelemetryInfoDict((unsigned char *)a1, (CFMutableDictionaryRef *)cf);
    CAXPCImageQueueSampleFinish();
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
  return FigReadWriteLockDestroy();
}

BOOL figCAXPCImageQueueSample_equal(uint64_t a1, uint64_t a2)
{
  return a1 == a2 || CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
}

CFHashCode figCAXPCImageQueueSample_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef figCAXPCImageQueueSample_copyDebugDesc(uint64_t a1)
{
  CFTypeRef cf = 0;
  figCAXPCImageQueueSample_copyTelemetryInfoDict((unsigned char *)a1, (CFMutableDictionaryRef *)&cf);
  uint64_t v2 = (const void *)FigCFCopyCompactDescription();
  CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)a1);
  CFIndex v4 = CFGetRetainCount((CFTypeRef)a1);
  if (*(unsigned char *)(a1 + 26)) {
    uint64_t v5 = "YES";
  }
  else {
    uint64_t v5 = "NO";
  }
  CFStringRef v6 = CFStringCreateWithFormat(v3, 0, @"<FigCAXPCImageQueueSample %p retainCount %d> iqSample: %@, wasProvidedToClient: %s, telemetryInfo: %@", a1, v4, *(void *)(a1 + 16), v5, v2);
  if (cf) {
    CFRelease(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v6;
}

void figCAXPCImageQueueSample_copyTelemetryInfoDict(unsigned char *a1, CFMutableDictionaryRef *a2)
{
  if (a1 && a2)
  {
    if (a1[26])
    {
      FigReadWriteLockLockForRead();
      CFAllocatorRef v4 = CFGetAllocator(a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable)
      {
        FigSignalErrorAt();
        goto LABEL_12;
      }
      CFMutableDictionaryRef v6 = Mutable;
      if (!FigCFDictionarySetUInt32()
        && !FigCFDictionarySetDouble()
        && !FigCFDictionarySetUInt64()
        && !FigCFDictionarySetUInt64()
        && !FigCFDictionarySetDouble()
        && !FigCFDictionarySetDouble())
      {
        *a2 = v6;
LABEL_12:
        FigReadWriteLockUnlockForRead();
        return;
      }
      FigReadWriteLockUnlockForRead();
      CFRelease(v6);
    }
    else if (dword_1E9350E80 >= 7)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void __videoReceiver_createImageQueueReceiver_block_invoke(uint64_t a1)
{
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 16), UInt64, *(const void **)(a1 + 48));
  if (UInt64)
  {
    CFRelease(UInt64);
  }
}

void __videoReceiver_releaseImageQueueReceiver_block_invoke()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350E80 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), UInt64);
  if (Value)
  {
    CFDictionaryGetValue(Value, @"ImageQueueReceiverKey");
    if (dword_1E9350E80)
    {
      CFAllocatorRef v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), UInt64);
  }
  if (UInt64) {
    CFRelease(UInt64);
  }
}

CFTypeRef __videoReceiver_setImageQueueMessage_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = videoReceiver_getImageQueueReceiverByID();
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    return CFRetain(v2);
  }
  else
  {
    CFTypeRef result = (CFTypeRef)FigSignalErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  }
  return result;
}

CFDictionaryRef videoReceiver_getImageQueueReceiverByID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), UInt64);
  if (UInt64) {
    CFRelease(UInt64);
  }
  if (Value)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"ImageQueueReceiverKey");
    if (dword_1E9350E80 >= 7)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return Value;
}

void __videoReceiver_createDataQueue_block_invoke(uint64_t a1)
{
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1 + 40) + 72), v2);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __videoReceiver_addDataChannelConfiguration_block_invoke(uint64_t a1)
{
  if (FigCFEqual()) {
    BOOL v2 = *(void *)(*(void *)(a1 + 40) + 80) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2 || FigCFEqual())
  {
    if (dword_1E9350E80 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(void *)(a1 + 40) + 48));
    videoReceiver_replacePendingConfiguration(*(void *)(a1 + 48), *(const void **)(a1 + 32));
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v4 + 124) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v4 + 140) = *(void *)(v5 + 16);
  }
}

uint64_t __videoReceiver_addDataChannelConfiguration_block_invoke_80(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  BOOL v2 = *(const void **)(a1 + 40);
  CFAllocatorRef v3 = *(__CFArray **)(*(void *)(a1 + 32) + 48);
  CMTime fireTime = *(CMTime *)(a1 + 56);
  if (receiverConfigurationActivationBlock_GetTypeID_sRegisterReceiverConfigurationActivationBlockTypeOnce != -1) {
    dispatch_once(&receiverConfigurationActivationBlock_GetTypeID_sRegisterReceiverConfigurationActivationBlockTypeOnce, &__block_literal_global_88);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = (void *)Instance;
    *(CMTime *)(Instance + 16) = fireTime;
    *(void *)(Instance + 40) = 0;
    if (v2) {
      CFTypeRef v6 = CFRetain(v2);
    }
    else {
      CFTypeRef v6 = 0;
    }
    v5[5] = v6;
    CFArrayAppendValue(v3, v5);
    if (v3)
    {
      uint64_t Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        v21.length = Count;
        v21.CFIndex location = 0;
        CFArraySortValues(v3, v21, (CFComparatorFunction)receiverConfigurationActivation_compareActivationTimes, 0);
      }
    }
    CMTagValue v8 = 0;
    CFIndex v9 = 0;
LABEL_11:
    double v10 = v8;
    if (v3)
    {
LABEL_12:
      CFIndex v11 = CFArrayGetCount(v3);
      goto LABEL_14;
    }
    while (1)
    {
      CFIndex v11 = 0;
LABEL_14:
      if (v9 >= v11) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v9);
      CMTagValue v8 = ValueAtIndex;
      if (!v10 || !ValueAtIndex || !FigCFEqual())
      {
        ++v9;
        goto LABEL_11;
      }
      CFArrayRemoveValueAtIndex(v3, v9);
      if (v3) {
        goto LABEL_12;
      }
    }
    CFRelease(v5);
  }
  else
  {
    FigSignalErrorAt();
  }
  receiverConfiguration_findEarliestCfgTimeToActivate(*(CFArrayRef *)(*(void *)(a1 + 32) + 48), (uint64_t)&v18);
  uint64_t v13 = *(void *)(a1 + 32);
  CMTag v14 = *(OpaqueCMTimebase **)(v13 + 56);
  CMTag v15 = *(NSObject **)(v13 + 64);
  CMTime fireTime = v18;
  uint64_t result = CMTimebaseSetTimerDispatchSourceNextFireTime(v14, v15, &fireTime, 1u);
  *(CMTime *)(*(void *)(a1 + 32) + 124) = v18;
  if (dword_1E9350E80 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void __videoReceiver_addDataChannelConfiguration_block_invoke_82(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  BOOL v2 = *(void **)(a1 + 32);
  CFAllocatorRef v3 = (void (*)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2[31];
  if (v3)
  {
    if (dword_1E9350E80)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      BOOL v2 = *(void **)(a1 + 32);
      CFAllocatorRef v3 = (void (*)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2[31];
    }
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(unsigned int *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = v2[32];
    long long v24 = *(_OWORD *)(a1 + 80);
    uint64_t v25 = *(void *)(a1 + 96);
    v3(v5, &v24, v6, v7, v8, v9, v10);
    BOOL v2 = *(void **)(a1 + 32);
  }
  uint64_t v11 = v2[51];
  if (v11)
  {
    if (dword_1E9350E80)
    {
      CMTag v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 408);
    }
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(unsigned int *)(a1 + 104);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 72);
    CMTime v18 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16);
    long long v24 = *(_OWORD *)(a1 + 80);
    uint64_t v25 = *(void *)(a1 + 96);
    v18(v11, v13, &v24, v14, v15, v16, v17);
  }
  CFIndex v19 = *(const void **)(a1 + 40);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 56);
  if (v20) {
    CFRelease(v20);
  }
  CFRange v21 = *(const void **)(a1 + 64);
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(a1 + 72);
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *(const void **)(a1 + 48);
  if (v23) {
    CFRelease(v23);
  }
}

double receiverConfigurationActivationBlock_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void receiverConfigurationActivationBlock_finalize(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = *(const void **)(a1 + 40);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 40) = 0;
    }
  }
}

uint64_t receiverConfigurationActivationBlock_equal()
{
  return FigCFEqual();
}

CFHashCode receiverConfigurationActivationBlock_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 40));
}

CFStringRef receiverConfigurationActivationBlock_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!a1) {
    return CFStringCreateWithFormat(v1, 0, @"[receiverConfigurationActivation %p]", 0);
  }
  CMTime time = *(CMTime *)(a1 + 16);
  Float64 Seconds = CMTimeGetSeconds(&time);
  return CFStringCreateWithFormat(v1, 0, @"[receiverConfigurationActivation %p] activationTime:%.3f, configuration: %@", a1, *(void *)&Seconds, *(void *)(a1 + 40));
}

uint64_t receiverConfigurationActivation_compareActivationTimes(uint64_t a1, uint64_t a2)
{
  CMTime time1 = *(CMTime *)(a1 + 16);
  CMTime v3 = *(CMTime *)(a2 + 16);
  return CMTimeCompare(&time1, &v3);
}

void __videoReceiver_createPlaybackStartupPreventionAssertion_block_invoke(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v1)
    {
      BOOL v2 = (const void *)v1;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetValue();
      CMNotificationCenterGetDefaultLocalCenter();
      if (CMNotificationCenterPostNotification() || dword_1E9350E80)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v2);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
}

uint64_t videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(CMTime *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, CFTypeRef *a5, CMTime *a6, void *a7)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  long long v61 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v67.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v67.CMTimeEpoch epoch = v7;
  CFTypeRef cf = 0;
  CFTypeRef v66 = 0;
  if (!a1
    || (CFTypeID v15 = CFGetTypeID(a1),
        MEMORY[0x19970EE10](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v15 != CMBaseClassGetCFTypeID())|| (*(unsigned char *)(a2 + 12) & 1) == 0|| !a4)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_60;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  LOBYTE(time.CFDictionaryAddValue(theDict, key, value) = 0;
  v85[0] = 0;
  LOBYTE(v81) = 0;
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (dword_1E9350E80 >= 3)
  {
    LODWORD(v81) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTime time = *(CMTime *)a2;
  uint64_t v18 = videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal(a1, (uint64_t)&time, 0, &cf, (uint64_t)&v67, (CFArrayRef *)&v66, a7);
  if (!v18)
  {
    if (*(unsigned char *)(DerivedStorage + 456)
      && fvr_isAllowedToLog(DerivedStorage + 456, 0)
      && dword_1E9350E80)
    {
      LODWORD(v81) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v42 = v81;
      if (os_log_type_enabled(v41, type[0])) {
        unsigned int v43 = v42;
      }
      else {
        unsigned int v43 = v42 & 0xFFFFFFFE;
      }
      if (v43)
      {
        uint64_t v44 = CMBaseObjectGetDerivedStorage() + 236;
        CMTime time = *(CMTime *)a2;
        Float64 Seconds = CMTimeGetSeconds(&time);
        int v46 = *(_DWORD *)(DerivedStorage + 476);
        *(_DWORD *)uint64_t v85 = 136316162;
        *(void *)&v85[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAva"
                             "ilableOtherwiseLastReturnedSample";
        *(_WORD *)&v85[12] = 2048;
        *(void *)&v85[14] = a1;
        *(_WORD *)&v85[22] = 2082;
        *(void *)uint64_t v86 = v44;
        *(_WORD *)&v86[8] = 2048;
        *(Float64 *)&v86[10] = Seconds;
        *(_WORD *)&v86[18] = 1024;
        *(_DWORD *)&v86[20] = v46;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    BOOL v54 = *(NSObject **)(DerivedStorage + 152);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample_block_invoke;
    block[3] = &__block_descriptor_tmp_99;
    char v64 = 0;
    __int16 v65 = 0;
    CMTime v63 = v67;
    block[4] = DerivedStorage;
    void block[5] = cf;
    void block[6] = v66;
    dispatch_sync(v54, block);
    goto LABEL_48;
  }
  uint64_t v8 = v18;
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  uint64_t v81 = 0;
  CMBlockBufferRef v82 = &v81;
  uint64_t v83 = 0x2000000000;
  char v84 = 0;
  *(void *)os_log_type_t type = 0;
  uint64_t v78 = type;
  uint64_t v79 = 0x2000000000;
  uint64_t v80 = 0;
  *(void *)uint64_t v85 = 0;
  *(void *)&v85[8] = v85;
  *(void *)&v85[16] = 0x3000000000;
  *(_OWORD *)uint64_t v86 = v61;
  *(void *)&v86[16] = v7;
  uint64_t v73 = 0;
  char v74 = &v73;
  uint64_t v75 = 0x2000000000;
  uint64_t v76 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = &v69;
  uint64_t v71 = 0x2000000000;
  uint64_t v72 = 0;
  uint64_t v20 = *(NSObject **)(v19 + 152);
  time.xpc_object_t value = MEMORY[0x1E4F143A8];
  *(void *)&time.CMTimeScale timescale = 0x40000000;
  time.CMTimeEpoch epoch = (CMTimeEpoch)__videoReceiver_copyCachedTaggedBufferGroupAndRelatedObjectsIfAvailable_block_invoke;
  CFMutableArrayRef v90 = &unk_1E5795398;
  uint64_t v91 = &v81;
  uint64_t v92 = type;
  CMTagValue v93 = v85;
  uint64_t v94 = &v73;
  uint64_t v95 = &v69;
  uint64_t v96 = v19;
  uint64_t v97 = a7;
  uint64_t v98 = a1;
  dispatch_sync(v20, &time);
  CFRange v21 = v78;
  if (*((unsigned char *)v82 + 24))
  {
    uint64_t v22 = (const void *)*((void *)v78 + 3);
    *((void *)v78 + 3) = 0;
    CMTime v67 = *(CMTime *)(*(void *)&v85[8] + 24);
    CFTypeRef cf = v22;
    CFTypeRef v66 = (CFTypeRef)v74[3];
    v74[3] = 0;
    if (a7)
    {
      uint64_t v23 = v70;
      *a7 = v70[3];
      CFTypeRef v23[3] = 0;
    }
  }
  long long v24 = (const void *)*((void *)v21 + 3);
  uint64_t v25 = a4;
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v26 = (const void *)v74[3];
  if (v26) {
    CFRelease(v26);
  }
  CMTimeValue v27 = (const void *)v70[3];
  if (v27) {
    CFRelease(v27);
  }
  int v28 = *((unsigned __int8 *)v82 + 24);
  _Block_object_dispose(&v69, 8);
  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(v85, 8);
  _Block_object_dispose(type, 8);
  _Block_object_dispose(&v81, 8);
  uint64_t v29 = DerivedStorage + 456;
  if (v28)
  {
    int isAllowedToLog = fvr_isAllowedToLog(v29, 1);
    unsigned int v31 = dword_1E9350E80;
    if (!isAllowedToLog || !dword_1E9350E80) {
      goto LABEL_49;
    }
    CFStringRef v32 = a6;
    LODWORD(v81) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CFIndex v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v34 = v81;
    if (os_log_type_enabled(v33, type[0])) {
      unsigned int v35 = v34;
    }
    else {
      unsigned int v35 = v34 & 0xFFFFFFFE;
    }
    if (v35)
    {
      uint64_t v36 = CMBaseObjectGetDerivedStorage() + 236;
      CMTime time = *(CMTime *)a2;
      Float64 v37 = CMTimeGetSeconds(&time);
      CMTime time = v67;
      double v38 = CMTimeGetSeconds(&time);
      int v39 = *(_DWORD *)(DerivedStorage + 472);
      uint64_t v40 = "logs skipped ";
      *(_DWORD *)uint64_t v85 = 136316930;
      *(void *)&v85[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvail"
                           "ableOtherwiseLastReturnedSample";
      *(_WORD *)&v85[12] = 2048;
      if (!v39) {
        uint64_t v40 = "";
      }
      *(void *)&v85[14] = a1;
      *(_WORD *)&v85[22] = 2082;
      *(void *)uint64_t v86 = v36;
      *(_WORD *)&v86[8] = 2048;
      *(Float64 *)&v86[10] = v37;
      *(_WORD *)&v86[18] = 1024;
      *(_DWORD *)&v86[20] = v8;
      *(_WORD *)&v86[24] = 2048;
      *(double *)&v86[26] = v38;
      *(_WORD *)&v86[34] = 2080;
      *(void *)&v86[36] = v40;
      __int16 v87 = 1024;
      int v88 = v39;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a6 = v32;
LABEL_48:
    uint64_t v25 = a4;
    unsigned int v31 = dword_1E9350E80;
LABEL_49:
    if (v31 >= 3)
    {
      LODWORD(v81) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v56 = v81;
      if (os_log_type_enabled(v55, type[0])) {
        unsigned int v57 = v56;
      }
      else {
        unsigned int v57 = v56 & 0xFFFFFFFE;
      }
      if (v57)
      {
        uint64_t v58 = CMBaseObjectGetDerivedStorage() + 236;
        CMTime time = v67;
        Float64 v59 = CMTimeGetSeconds(&time);
        *(_DWORD *)uint64_t v85 = 136316418;
        *(void *)&v85[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAva"
                             "ilableOtherwiseLastReturnedSample";
        *(_WORD *)&v85[12] = 2048;
        *(void *)&v85[14] = a1;
        *(_WORD *)&v85[22] = 2082;
        *(void *)uint64_t v86 = v58;
        *(_WORD *)&v86[8] = 2048;
        *(Float64 *)&v86[10] = v59;
        *(_WORD *)&v86[18] = 2114;
        *(void *)&v86[20] = cf;
        *(_WORD *)&v86[28] = 2114;
        *(void *)&v86[30] = v66;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *uint64_t v25 = cf;
    CFTypeRef cf = 0;
    if (a5)
    {
      *a5 = v66;
      CFTypeRef v66 = 0;
    }
    uint64_t v8 = 0;
    if (a6) {
      *a6 = v67;
    }
    goto LABEL_60;
  }
  if (fvr_isAllowedToLog(v29, 2) && dword_1E9350E80)
  {
    LODWORD(v81) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v48 = v81;
    if (os_log_type_enabled(v47, type[0])) {
      unsigned int v49 = v48;
    }
    else {
      unsigned int v49 = v48 & 0xFFFFFFFE;
    }
    if (v49)
    {
      uint64_t v50 = CMBaseObjectGetDerivedStorage() + 236;
      CMTime time = *(CMTime *)a2;
      double v51 = CMTimeGetSeconds(&time);
      int v52 = *(_DWORD *)(DerivedStorage + 472);
      BOOL v53 = "logs skipped ";
      *(_DWORD *)uint64_t v85 = 136316674;
      *(void *)&v85[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvail"
                           "ableOtherwiseLastReturnedSample";
      if (!v52) {
        BOOL v53 = "";
      }
      *(_WORD *)&v85[12] = 2048;
      *(void *)&v85[14] = a1;
      *(_WORD *)&v85[22] = 2082;
      *(void *)uint64_t v86 = v50;
      *(_WORD *)&v86[8] = 2048;
      *(double *)&v86[10] = v51;
      *(_WORD *)&v86[18] = 1024;
      *(_DWORD *)&v86[20] = v8;
      *(_WORD *)&v86[24] = 2080;
      *(void *)&v86[26] = v53;
      *(_WORD *)&v86[34] = 1024;
      *(_DWORD *)&v86[36] = v52;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_60:
  if (cf) {
    CFRelease(cf);
  }
  if (v66) {
    CFRelease(v66);
  }
  return v8;
}

uint64_t videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal(CMTime *a1, uint64_t a2, int a3, void *a4, uint64_t a5, CFArrayRef *a6, void *a7)
{
  uint64_t v248 = *MEMORY[0x1E4F143B8];
  CMTimeValue v196 = *MEMORY[0x1E4F1F9F8];
  CMTimeValue v220 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v13 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeScale v221 = v13;
  char v214 = 0;
  *(_OWORD *)CFMutableArrayRef theArray = 0u;
  memset(v213, 0, sizeof(v213));
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)CMTime time = *(_OWORD *)a2;
  uint64_t v205 = a2;
  *(void *)&time[16] = *(void *)(a2 + 16);
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  rhs.CFStringRef value = 0;
  theString.CFStringRef value = 0;
  uint64_t v16 = *(void *)(v15 + 88);
  if (v16)
  {
    FigDataChannelConfigurationCopyPlayerLoggingIdentifier(v16, (CFStringRef *)&rhs);
    FigDataChannelConfigurationCopyLoggingIdentifier(*(void *)(v15 + 88), (CFStringRef *)&theString);
  }
  uint64_t v17 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    CFStringRef value = (const __CFString *)theString.value;
    buffer.CFStringRef value = 0;
    if (theString.value)
    {
      if (CFStringGetLength((CFStringRef)theString.value) <= 8) {
        v19.length = CFStringGetLength(value);
      }
      else {
        v19.length = 8;
      }
      v19.CFIndex location = 0;
      CFStringGetBytes(value, v19, 0, 0x3Fu, 0, (UInt8 *)&buffer, 8, 0);
    }
    strncpy((char *)&__dst, (const char *)&buffer, 8uLL);
    CFStringRef v20 = (const __CFString *)rhs.value;
    buffer.CFStringRef value = 0;
    if (rhs.value)
    {
      if (CFStringGetLength((CFStringRef)rhs.value) <= 8) {
        v21.length = CFStringGetLength(v20);
      }
      else {
        v21.length = 8;
      }
      v21.CFIndex location = 0;
      CFStringGetBytes(v20, v21, 0, 0x3Fu, 0, (UInt8 *)&buffer, 8, 0);
    }
    strncpy((char *)&__dst, (const char *)&buffer, 8uLL);
    *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)time;
    __dst.start.CMTimeEpoch epoch = *(void *)&time[16];
    CMTimeGetSeconds(&__dst.start);
    kdebug_trace();
  }
  if (rhs.value) {
    CFRelease((CFTypeRef)rhs.value);
  }
  CMTimeValue v191 = a4;
  uint64_t v192 = a5;
  CMTimeFlags v194 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch v209 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (theString.value) {
    CFRelease((CFTypeRef)theString.value);
  }
  *(_OWORD *)CMTime time = *(_OWORD *)v205;
  *(void *)&time[16] = *(void *)(v205 + 16);
  uint64_t v22 = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = *(NSObject **)(v22 + 152);
  __dst.start.CFStringRef value = MEMORY[0x1E4F143A8];
  *(void *)&__dst.start.CMTimeScale timescale = 0x40000000;
  __dst.start.CMTimeEpoch epoch = (CMTimeEpoch)__videoReceiver_updateActiveConfigurationForHostTimeIfNecessary_block_invoke;
  __dst.duration.CFStringRef value = (CMTimeValue)&__block_descriptor_tmp_101;
  long long v223 = *(_OWORD *)time;
  p_theCFStringRef String = *(CMTime **)&time[16];
  *(void *)&__dst.duration.CMTimeScale timescale = v22;
  __dst.duration.CMTimeEpoch epoch = (CMTimeEpoch)a1;
  dispatch_sync(v23, &__dst);
  if (a6) {
    long long v24 = &v213[2];
  }
  else {
    long long v24 = 0;
  }
  uint64_t v25 = videoReceiver_copyOutputQueuesIfReady(a1, &v214, theArray, &theArray[1], v213, &v213[1], v24);
  if (v25) {
    goto LABEL_377;
  }
  if (!*(void *)(DerivedStorage + 88))
  {
    CMTimeValue v27 = 0;
    uint64_t v28 = 4294951717;
    if (fvr_isAllowedToLog(DerivedStorage + 496, 3) && dword_1E9350E80)
    {
      uint64_t v29 = DerivedStorage;
      CFStringRef v30 = v17;
      LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v32 = buffer.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (!v33) {
        goto LABEL_125;
      }
      if (a1) {
        unsigned int v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      }
      else {
        unsigned int v34 = "";
      }
      *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)v205;
      __dst.start.CMTimeEpoch epoch = *(void *)(v205 + 16);
      double Seconds = CMTimeGetSeconds(&__dst.start);
      int v74 = *(_DWORD *)(v29 + 512);
      uint64_t v75 = "logs skipped ";
      *(_DWORD *)CMTime time = 136316418;
      *(void *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v74) {
        uint64_t v75 = "";
      }
      goto LABEL_124;
    }
LABEL_65:
    CFArrayRef v47 = 0;
    unsigned int v48 = 0;
    CFArrayRef v208 = 0;
    unsigned int v49 = 0;
    CFTypeRef v50 = 0;
    goto LABEL_323;
  }
  uint64_t v202 = DerivedStorage;
  if (theArray[0]) {
    CFIndex Count = CFArrayGetCount(theArray[0]);
  }
  else {
    CFIndex Count = 0;
  }
  if (v213[0]) {
    CFIndex v35 = CFArrayGetCount(v213[0]);
  }
  else {
    CFIndex v35 = 0;
  }
  if (v214 && Count == -v35)
  {
    CMTimeValue v27 = 0;
    uint64_t v28 = 4294951366;
    if (fvr_isAllowedToLog(v202 + 496, 4) && dword_1E9350E80)
    {
      CFStringRef v30 = v17;
      LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
      uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v37 = buffer.value;
      if (os_log_type_enabled(v36, rhs.value)) {
        unsigned int v38 = v37;
      }
      else {
        unsigned int v38 = v37 & 0xFFFFFFFE;
      }
      if (!v38) {
        goto LABEL_125;
      }
      if (a1) {
        unsigned int v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      }
      else {
        unsigned int v34 = "";
      }
      *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)v205;
      __dst.start.CMTimeEpoch epoch = *(void *)(v205 + 16);
      double Seconds = CMTimeGetSeconds(&__dst.start);
      int v74 = *(_DWORD *)(v202 + 512);
      uint64_t v75 = "logs skipped ";
      *(_DWORD *)CMTime time = 136316418;
      *(void *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v74) {
        uint64_t v75 = "";
      }
LABEL_124:
      *(_WORD *)&time[12] = 2048;
      *(void *)&time[14] = a1;
      *(_WORD *)&time[22] = 2082;
      *(void *)&time[24] = v34;
      *(_WORD *)v237 = 2048;
      *(double *)&v237[2] = Seconds;
      *(_WORD *)&v237[10] = 2080;
      *(void *)&v237[12] = v75;
      *(_WORD *)&v237[20] = 1024;
      *(_DWORD *)&v237[22] = v74;
      _os_log_send_and_compose_impl();
LABEL_125:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTimeValue v27 = 0;
      CFArrayRef v47 = 0;
      unsigned int v48 = 0;
      CFArrayRef v208 = 0;
      unsigned int v49 = 0;
      CFTypeRef v50 = 0;
      uint64_t v17 = v30;
      goto LABEL_323;
    }
    goto LABEL_65;
  }
  if (!v214)
  {
    CMTimeValue v27 = 0;
    uint64_t v28 = 4294951719;
    if (fvr_isAllowedToLog(v202 + 496, 5) && dword_1E9350E80)
    {
      CFStringRef v30 = v17;
      LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
      uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v45 = buffer.value;
      if (os_log_type_enabled(v44, rhs.value)) {
        unsigned int v46 = v45;
      }
      else {
        unsigned int v46 = v45 & 0xFFFFFFFE;
      }
      if (!v46) {
        goto LABEL_125;
      }
      if (a1) {
        unsigned int v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      }
      else {
        unsigned int v34 = "";
      }
      *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)v205;
      __dst.start.CMTimeEpoch epoch = *(void *)(v205 + 16);
      double Seconds = CMTimeGetSeconds(&__dst.start);
      int v74 = *(_DWORD *)(v202 + 512);
      uint64_t v75 = "logs skipped ";
      *(_DWORD *)CMTime time = 136316418;
      *(void *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v74) {
        uint64_t v75 = "";
      }
      goto LABEL_124;
    }
    goto LABEL_65;
  }
  CFArrayRef v39 = theArray[1];
  if (theArray[1]) {
    CFArrayRef v39 = (CFArrayRef)CFArrayGetCount(theArray[1]);
  }
  if ((CFArrayRef)Count != v39) {
    goto LABEL_376;
  }
  CFArrayRef v40 = v213[1];
  if (v213[1]) {
    CFArrayRef v40 = (CFArrayRef)CFArrayGetCount(v213[1]);
  }
  if ((CFArrayRef)v35 != v40)
  {
LABEL_376:
    uint64_t v25 = FigSignalErrorAt();
LABEL_377:
    uint64_t v28 = v25;
    CMTimeValue v27 = 0;
    CFArrayRef v47 = 0;
    unsigned int v48 = 0;
    CFArrayRef v208 = 0;
    unsigned int v49 = 0;
    CFTypeRef v50 = 0;
    goto LABEL_323;
  }
  *(_OWORD *)v207 = *(_OWORD *)theArray;
  CFArrayRef v41 = v213[0];
  long long v219 = *(_OWORD *)&v213[1];
  *(_OWORD *)CFTypeRef cf = *(_OWORD *)v205;
  CMTimeEpoch v211 = *(void *)(v205 + 16);
  *(void *)CMTime time = 0;
  *(void *)&time[8] = time;
  *(void *)&time[16] = 0x2000000000;
  *(_DWORD *)&time[24] = 0;
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  buffer.CFStringRef value = 0;
  *(void *)&buffer.CMTimeScale timescale = &buffer;
  buffer.CMTimeEpoch epoch = 0x2000000000;
  uint64_t v247 = 0;
  rhs.CFStringRef value = 0;
  *(void *)&rhs.CMTimeScale timescale = &rhs;
  rhs.CMTimeEpoch epoch = 0x2000000000;
  uint64_t v245 = 0;
  theString.CFStringRef value = 0;
  *(void *)&theString.CMTimeScale timescale = &theString;
  theString.CMTimeEpoch epoch = 0x2000000000;
  uint64_t v218 = 0;
  v215.CFStringRef value = 0;
  *(void *)&v215.CMTimeScale timescale = &v215;
  v215.CMTimeEpoch epoch = 0x2000000000;
  uint64_t v216 = 0;
  if (v207[0]) {
    CFIndex v43 = CFArrayGetCount((CFArrayRef)v207[0]);
  }
  else {
    CFIndex v43 = 0;
  }
  uint64_t v189 = a6;
  if (v41) {
    CFIndex v51 = CFArrayGetCount(v41);
  }
  else {
    CFIndex v51 = 0;
  }
  CFAllocatorRef v52 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v52, v43, MEMORY[0x1E4F1D510]);
  *(void *)(*(void *)&buffer.timescale + 24) = Mutable;
  if (!Mutable) {
    goto LABEL_374;
  }
  CFAllocatorRef v54 = CFGetAllocator(a1);
  CFMutableArrayRef v55 = CFArrayCreateMutable(v54, v43, MEMORY[0x1E4F1D510]);
  *(void *)(*(void *)&rhs.timescale + 24) = v55;
  if (!v55) {
    goto LABEL_374;
  }
  CFAllocatorRef v56 = CFGetAllocator(a1);
  CFMutableArrayRef v57 = CFArrayCreateMutable(v56, v51, MEMORY[0x1E4F1D510]);
  *(void *)(*(void *)&theString.timescale + 24) = v57;
  if (v57
    && (CFAllocatorRef v58 = CFGetAllocator(a1),
        CFMutableArrayRef v59 = CFArrayCreateMutable(v58, v51, MEMORY[0x1E4F1D510]),
        (*(void *)(*(void *)&v215.timescale + 24) = v59) != 0))
  {
    __int16 v60 = *(NSObject **)(v42 + 152);
    __dst.start.CFStringRef value = MEMORY[0x1E4F143A8];
    *(void *)&__dst.start.CMTimeScale timescale = 0x40000000;
    __dst.start.CMTimeEpoch epoch = (CMTimeEpoch)__videoReceiver_copyBuffersFromSamplingSourceForHostTime_block_invoke;
    __dst.duration.CFStringRef value = (CMTimeValue)&unk_1E5795320;
    long long v226 = *(_OWORD *)v207;
    long long v228 = v219;
    CMTimeEpoch v227 = (CMTimeEpoch)v41;
    v229 = a1;
    long long v232 = *(_OWORD *)cf;
    CMTimeEpoch v233 = v211;
    char v235 = BYTE2(a3);
    __int16 v234 = a3;
    *(void *)&__dst.duration.CMTimeScale timescale = time;
    __dst.duration.CMTimeEpoch epoch = (CMTimeEpoch)&buffer;
    *(void *)&long long v223 = &v215;
    *((void *)&v223 + 1) = &rhs;
    uint64_t v230 = v42;
    CFIndex v231 = v51;
    p_theCFStringRef String = &theString;
    CFIndex v225 = v43;
    dispatch_sync(v60, &__dst);
    if (*(_DWORD *)(*(void *)&time[8] + 24))
    {
      uint64_t v190 = 0;
      CFArrayRef v47 = 0;
      uint64_t v206 = 0;
      CFArrayRef v61 = 0;
    }
    else
    {
      CFArrayRef v61 = *(const __CFArray **)(*(void *)&buffer.timescale + 24);
      *(void *)(*(void *)&buffer.timescale + 24) = 0;
      uint64_t v206 = *(const void **)(*(void *)&rhs.timescale + 24);
      *(void *)(*(void *)&rhs.timescale + 24) = 0;
      CFArrayRef v47 = *(const __CFArray **)(*(void *)&theString.timescale + 24);
      *(void *)(*(void *)&theString.timescale + 24) = 0;
      uint64_t v190 = *(const void **)(*(void *)&v215.timescale + 24);
      *(void *)(*(void *)&v215.timescale + 24) = 0;
    }
  }
  else
  {
LABEL_374:
    uint64_t v190 = 0;
    CFArrayRef v47 = 0;
    uint64_t v206 = 0;
    CFArrayRef v61 = 0;
    *(_DWORD *)(*(void *)&time[8] + 24) = FigSignalErrorAt();
  }
  __int16 v62 = *(const void **)(*(void *)&v215.timescale + 24);
  if (v62) {
    CFRelease(v62);
  }
  CMTime v63 = *(const void **)(*(void *)&buffer.timescale + 24);
  if (v63) {
    CFRelease(v63);
  }
  char v64 = *(const void **)(*(void *)&rhs.timescale + 24);
  if (v64) {
    CFRelease(v64);
  }
  __int16 v65 = *(const void **)(*(void *)&theString.timescale + 24);
  if (v65) {
    CFRelease(v65);
  }
  uint64_t v28 = *(unsigned int *)(*(void *)&time[8] + 24);
  _Block_object_dispose(&v215, 8);
  _Block_object_dispose(&theString, 8);
  _Block_object_dispose(&rhs, 8);
  _Block_object_dispose(&buffer, 8);
  _Block_object_dispose(time, 8);
  CFArrayRef v204 = v47;
  CFArrayRef v208 = v61;
  if (v28)
  {
    unsigned int v49 = 0;
    if (!fvr_isAllowedToLog(v202 + 496, 6) || !dword_1E9350E80)
    {
      CFTypeRef v50 = 0;
      goto LABEL_322;
    }
    CFTypeRef v66 = v17;
    LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
    CMTime v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v68 = buffer.value;
    if (os_log_type_enabled(v67, rhs.value)) {
      unsigned int v69 = v68;
    }
    else {
      unsigned int v69 = v68 & 0xFFFFFFFE;
    }
    if (v69)
    {
      if (a1) {
        uint64_t v70 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      }
      else {
        uint64_t v70 = "";
      }
      *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)v205;
      __dst.start.CMTimeEpoch epoch = *(void *)(v205 + 16);
      double v80 = CMTimeGetSeconds(&__dst.start);
      int v81 = *(_DWORD *)(v202 + 512);
      CMBlockBufferRef v82 = "logs skipped ";
      *(_DWORD *)CMTime time = 136316674;
      *(void *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v81) {
        CMBlockBufferRef v82 = "";
      }
      *(_WORD *)&time[12] = 2048;
      *(void *)&time[14] = a1;
      *(_WORD *)&time[22] = 2082;
      *(void *)&time[24] = v70;
      *(_WORD *)v237 = 1024;
      *(_DWORD *)&v237[2] = v28;
      *(_WORD *)&v237[6] = 2048;
      *(double *)&v237[8] = v80;
      *(_WORD *)&v237[16] = 2080;
      *(void *)&v237[18] = v82;
      *(_WORD *)&v237[26] = 1024;
      *(_DWORD *)&v237[28] = v81;
      goto LABEL_120;
    }
    goto LABEL_320;
  }
  v203 = a1;
  if ((a3 & 0xFF00) != 0)
  {
    *(_OWORD *)CFTypeRef cf = *(_OWORD *)v205;
    CMTimeEpoch v211 = *(void *)(v205 + 16);
    if (v61)
    {
      CFIndex v71 = CFArrayGetCount(v61);
      if (v47)
      {
LABEL_97:
        CFIndex v72 = CFArrayGetCount(v47);
        goto LABEL_109;
      }
    }
    else
    {
      CFIndex v71 = 0;
      if (v47) {
        goto LABEL_97;
      }
    }
    CFIndex v72 = 0;
LABEL_109:
    *(void *)&long long v219 = v196;
    DWORD2(v219) = v13;
    uint64_t v188 = CMBaseObjectGetDerivedStorage();
    if (dword_1E9350E80 >= 3)
    {
      LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
      uint64_t v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v77 = buffer.value;
      if (os_log_type_enabled(v76, rhs.value)) {
        unsigned int v78 = v77;
      }
      else {
        unsigned int v78 = v77 & 0xFFFFFFFE;
      }
      if (v78)
      {
        if (v203) {
          uint64_t v79 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
        }
        else {
          uint64_t v79 = "";
        }
        *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)cf;
        __dst.start.CMTimeEpoch epoch = v211;
        double v83 = CMTimeGetSeconds(&__dst.start);
        *(_DWORD *)CMTime time = 136316674;
        *(void *)&time[4] = "videoReceiver_areBuffersSynchronized";
        char v84 = " with data queue sampling at video PTS";
        *(_WORD *)&time[12] = 2048;
        *(_WORD *)&time[22] = 2082;
        *(void *)&time[14] = v203;
        if ((*(void *)&a3 & 0xFF0000) == 0) {
          char v84 = ".";
        }
        *(void *)&time[24] = v79;
        *(_WORD *)v237 = 1024;
        *(_DWORD *)&v237[2] = v71;
        *(_WORD *)&v237[6] = 1024;
        *(_DWORD *)&v237[8] = v72;
        *(_WORD *)&v237[12] = 2048;
        *(double *)&v237[14] = v83;
        *(_WORD *)&v237[22] = 2080;
        *(void *)&v237[24] = v84;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMTimeEpoch v85 = v209;
    CMTimeFlags v86 = v194;
    if (v71 < 1)
    {
LABEL_145:
      uint64_t v91 = v202;
      if (v72 < 1)
      {
LABEL_181:
        a1 = v203;
        CFArrayRef v61 = v208;
        if (*(unsigned char *)(v188 + 536) && fvr_isAllowedToLog(v188 + 536, 0) && dword_1E9350E80)
        {
          LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
          LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
          CFTypeRef v109 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v110 = buffer.value;
          if (os_log_type_enabled(v109, rhs.value)) {
            unsigned int v111 = v110;
          }
          else {
            unsigned int v111 = v110 & 0xFFFFFFFE;
          }
          if (v111)
          {
            if (v203) {
              CFDictionaryRef v112 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
            }
            else {
              CFDictionaryRef v112 = "";
            }
            int v122 = *(_DWORD *)(v188 + 556);
            *(_DWORD *)CMTime time = 136315906;
            *(void *)&time[4] = "videoReceiver_areBuffersSynchronized";
            *(_WORD *)&time[12] = 2048;
            *(void *)&time[14] = v203;
            *(_WORD *)&time[22] = 2082;
            *(void *)&time[24] = v112;
            *(_WORD *)v237 = 1024;
            *(_DWORD *)&v237[2] = v122;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        CFIndex v92 = 0;
        uint64_t v93 = MEMORY[0x1E4F1FA48];
        CFArrayRef v197 = (CFArrayRef)v72;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v204, v92);
          memset(&theString, 0, sizeof(theString));
          CMSampleBufferGetOutputPresentationTimeStamp(&theString, ValueAtIndex);
          if ((theString.flags & 1) == 0) {
            break;
          }
          memset(&v215, 0, sizeof(v215));
          CMSampleBufferGetOutputDuration(&v215, ValueAtIndex);
          __dst.CMTime start = v215;
          *(_OWORD *)long long v200 = *(_OWORD *)v93;
          *(_OWORD *)CMTime time = *(_OWORD *)v93;
          CMTimeEpoch v95 = *(void *)(v93 + 16);
          *(void *)&time[16] = v95;
          if (CMTimeCompare(&__dst.start, (CMTime *)time) <= 0)
          {
            *(_OWORD *)&v215.CFStringRef value = *(_OWORD *)v200;
            v215.CMTimeEpoch epoch = v95;
            if (dword_1E9350E80 >= 7)
            {
              LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
              LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
              CFIndex v100 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v101 = buffer.value;
              if (os_log_type_enabled(v100, rhs.value)) {
                unsigned int v102 = v101;
              }
              else {
                unsigned int v102 = v101 & 0xFFFFFFFE;
              }
              if (v102)
              {
                if (v203) {
                  CMTime v103 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                }
                else {
                  CMTime v103 = "";
                }
                __dst.start.CFStringRef value = v219;
                __dst.start.CMTimeScale timescale = DWORD2(v219);
                __dst.start.CMTimeFlags flags = v86;
                __dst.start.CMTimeEpoch epoch = v85;
                Float64 v105 = CMTimeGetSeconds(&__dst.start);
                *(_DWORD *)CMTime time = 136316162;
                *(void *)&time[4] = "videoReceiver_areBuffersSynchronized";
                *(_WORD *)&time[12] = 2048;
                *(void *)&time[14] = v203;
                *(_WORD *)&time[22] = 2082;
                *(void *)&time[24] = v103;
                *(_WORD *)v237 = 1024;
                *(_DWORD *)&v237[2] = v92;
                *(_WORD *)&v237[6] = 2048;
                *(Float64 *)&v237[8] = v105;
                _os_log_send_and_compose_impl();
                CFIndex v72 = (CFIndex)v197;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CMTimeValue v242 = theString.value;
            CMTimeFlags flags = theString.flags;
            CMTimeScale timescale = theString.timescale;
            CMTimeEpoch epoch = theString.epoch;
            if ((theString.flags & 0x1F) != 3 && (v86 & 0x1F) != 3) {
              goto LABEL_176;
            }
            memset(&__dst, 0, 24);
            CMTime buffer = theString;
            rhs.CFStringRef value = v219;
            rhs.CMTimeScale timescale = DWORD2(v219);
            rhs.CMTimeFlags flags = v86;
            rhs.CMTimeEpoch epoch = v85;
            CMTimeSubtract((CMTime *)time, &buffer, &rhs);
            CMTimeAbsoluteValue(&__dst.start, (CMTime *)time);
            CMTimeMake(&buffer, 1, 1000000000);
            CMTime rhs = __dst.start;
            if (CMTimeCompare(&rhs, &buffer) < 1)
            {
              int32_t v108 = 0;
            }
            else
            {
LABEL_176:
              __dst.start.CFStringRef value = v242;
              __dst.start.CMTimeScale timescale = timescale;
              __dst.start.CMTimeFlags flags = flags;
              __dst.start.CMTimeEpoch epoch = epoch;
              rhs.CFStringRef value = v219;
              rhs.CMTimeScale timescale = DWORD2(v219);
              rhs.CMTimeFlags flags = v86;
              rhs.CMTimeEpoch epoch = v85;
              int32_t v108 = CMTimeCompare(&__dst.start, &rhs);
            }
            uint64_t v91 = v202;
            if (v108)
            {
LABEL_190:
              int isAllowedToLog = fvr_isAllowedToLog(v188 + 536, 9);
              uint64_t v17 = (_DWORD *)MEMORY[0x1E4F1EBA8];
              if (isAllowedToLog && dword_1E9350E80)
              {
                LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
                LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
                CFTypeRef v114 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v115 = buffer.value;
                if (os_log_type_enabled(v114, rhs.value)) {
                  unsigned int v116 = v115;
                }
                else {
                  unsigned int v116 = v115 & 0xFFFFFFFE;
                }
                if (v116)
                {
                  if (v203) {
                    __int16 v117 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                  }
                  else {
                    __int16 v117 = "";
                  }
                  __dst.CMTime start = theString;
                  Float64 v163 = CMTimeGetSeconds(&__dst.start);
                  __dst.CMTime start = v215;
                  Float64 v164 = CMTimeGetSeconds(&__dst.start);
                  __dst.start.CFStringRef value = v219;
                  __dst.start.CMTimeScale timescale = DWORD2(v219);
                  __dst.start.CMTimeFlags flags = v86;
                  __dst.start.CMTimeEpoch epoch = v85;
                  double v165 = CMTimeGetSeconds(&__dst.start);
                  int v166 = *(_DWORD *)(v188 + 552);
                  long long v167 = "logs skipped ";
                  *(_DWORD *)CMTime time = 136317186;
                  if (!v166) {
                    long long v167 = "";
                  }
                  *(void *)&time[4] = "videoReceiver_areBuffersSynchronized";
                  *(_WORD *)&time[12] = 2048;
                  *(void *)&time[14] = v203;
                  *(_WORD *)&time[22] = 2082;
                  *(void *)&time[24] = v117;
                  *(_WORD *)v237 = 1024;
                  *(_DWORD *)&v237[2] = v92;
                  *(_WORD *)&v237[6] = 2048;
                  *(Float64 *)&v237[8] = v163;
                  *(_WORD *)&v237[16] = 2048;
                  *(Float64 *)&v237[18] = v164;
                  *(_WORD *)&v237[26] = 2048;
                  *(double *)&v237[28] = v165;
                  __int16 v238 = 2080;
                  v239 = v167;
                  __int16 v240 = 1024;
                  int v241 = v166;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                goto LABEL_311;
              }
              goto LABEL_312;
            }
          }
          else
          {
            if ((v215.flags & 1) == 0)
            {
              LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
              LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
              uint64_t v96 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v97 = buffer.value;
              if (os_log_type_enabled(v96, rhs.value)) {
                unsigned int v98 = v97;
              }
              else {
                unsigned int v98 = v97 & 0xFFFFFFFE;
              }
              if (v98)
              {
                if (v203) {
                  uint64_t v99 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                }
                else {
                  uint64_t v99 = "";
                }
                __dst.start.CFStringRef value = v219;
                __dst.start.CMTimeScale timescale = DWORD2(v219);
                __dst.start.CMTimeFlags flags = v86;
                __dst.start.CMTimeEpoch epoch = v85;
                Float64 v104 = CMTimeGetSeconds(&__dst.start);
                *(_DWORD *)CMTime time = 136316162;
                *(void *)&time[4] = "videoReceiver_areBuffersSynchronized";
                *(_WORD *)&time[12] = 2048;
                *(void *)&time[14] = v203;
                *(_WORD *)&time[22] = 2082;
                *(void *)&time[24] = v99;
                *(_WORD *)v237 = 1024;
                *(_DWORD *)&v237[2] = v92;
                *(_WORD *)&v237[6] = 2048;
                *(Float64 *)&v237[8] = v104;
                _os_log_send_and_compose_impl();
                CFIndex v72 = (CFIndex)v197;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CMTime v215 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
              uint64_t v91 = v202;
            }
            memset(&__dst, 0, sizeof(__dst));
            *(CMTime *)CMTime time = theString;
            CMTime buffer = v215;
            CMTimeRangeMake(&__dst, (CMTime *)time, &buffer);
            *(_OWORD *)CMTime time = *(_OWORD *)&__dst.start.value;
            *(_OWORD *)&time[16] = *(_OWORD *)&__dst.start.epoch;
            *(_OWORD *)v237 = *(_OWORD *)&__dst.duration.timescale;
            buffer.CFStringRef value = v219;
            buffer.CMTimeScale timescale = DWORD2(v219);
            buffer.CMTimeFlags flags = v86;
            buffer.CMTimeEpoch epoch = v85;
            if (!CMTimeRangeContainsTime((CMTimeRange *)time, &buffer)) {
              goto LABEL_190;
            }
          }
          if (v72 == ++v92) {
            goto LABEL_181;
          }
        }
        a1 = v203;
        CFArrayRef v61 = v208;
      }
      uint64_t v17 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      CFArrayRef v47 = v204;
    }
    else
    {
      uint64_t v87 = 0;
      *(_OWORD *)double v199 = *MEMORY[0x1E4F1F9F8];
      CMTimeFlags v86 = v194;
      CMTimeEpoch v85 = v209;
      while (1)
      {
        *(_OWORD *)&v215.CFStringRef value = *(_OWORD *)v199;
        v215.CMTimeEpoch epoch = v209;
        FigCFArrayGetCMTimeAtIndex();
        CMTimeFlags v88 = v215.flags;
        if ((v215.flags & 1) == 0) {
          break;
        }
        if (v86)
        {
          CMTimeValue v242 = v215.value;
          CMTimeScale timescale = v215.timescale;
          CMTimeEpoch v89 = v215.epoch;
          if ((v215.flags & 0x1F) != 3 && (v86 & 0x1F) != 3) {
            goto LABEL_387;
          }
          memset(&__dst, 0, 24);
          CMTime buffer = v215;
          rhs.CFStringRef value = v219;
          rhs.CMTimeScale timescale = DWORD2(v219);
          rhs.CMTimeFlags flags = v86;
          rhs.CMTimeEpoch epoch = v85;
          CMTimeSubtract((CMTime *)time, &buffer, &rhs);
          CMTimeAbsoluteValue(&__dst.start, (CMTime *)time);
          CMTimeMake(&theString, 1, 1000000000);
          CMTime buffer = __dst.start;
          if (CMTimeCompare(&buffer, &theString) > 0)
          {
LABEL_387:
            __dst.start.CFStringRef value = v242;
            __dst.start.CMTimeScale timescale = timescale;
            __dst.start.CMTimeFlags flags = v88;
            __dst.start.CMTimeEpoch epoch = v89;
            buffer.CFStringRef value = v219;
            buffer.CMTimeScale timescale = DWORD2(v219);
            buffer.CMTimeFlags flags = v86;
            buffer.CMTimeEpoch epoch = v85;
            if (CMTimeCompare(&__dst.start, &buffer))
            {
              if (fvr_isAllowedToLog(v188 + 536, 8) && dword_1E9350E80)
              {
                LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
                LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
                __int16 v118 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v119 = buffer.value;
                if (os_log_type_enabled(v118, rhs.value)) {
                  unsigned int v120 = v119;
                }
                else {
                  unsigned int v120 = v119 & 0xFFFFFFFE;
                }
                if (v120)
                {
                  if (v203) {
                    CFIndex v121 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                  }
                  else {
                    CFIndex v121 = "";
                  }
                  __dst.CMTime start = v215;
                  Float64 v168 = CMTimeGetSeconds(&__dst.start);
                  __dst.start.CFStringRef value = v219;
                  __dst.start.CMTimeScale timescale = DWORD2(v219);
                  __dst.start.CMTimeFlags flags = v86;
                  __dst.start.CMTimeEpoch epoch = v85;
                  double v169 = CMTimeGetSeconds(&__dst.start);
                  int v170 = *(_DWORD *)(v188 + 552);
                  uint64_t v171 = "logs skipped ";
                  *(_DWORD *)CMTime time = 136316930;
                  *(void *)&time[4] = "videoReceiver_areBuffersSynchronized";
                  if (!v170) {
                    uint64_t v171 = "";
                  }
                  *(_WORD *)&time[12] = 2048;
                  *(void *)&time[14] = v203;
                  *(_WORD *)&time[22] = 2082;
                  *(void *)&time[24] = v121;
                  *(_WORD *)v237 = 1024;
                  *(_DWORD *)&v237[2] = v87;
                  *(_WORD *)&v237[6] = 2048;
                  *(Float64 *)&v237[8] = v168;
                  *(_WORD *)&v237[16] = 2048;
                  *(double *)&v237[18] = v169;
                  *(_WORD *)&v237[26] = 2080;
                  *(void *)&v237[28] = v171;
                  __int16 v238 = 1024;
                  LODWORD(v239) = v170;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v17 = (_DWORD *)MEMORY[0x1E4F1EBA8];
LABEL_311:
              uint64_t v91 = v202;
LABEL_312:
              CMTimeValue v27 = v190;
              unsigned int v48 = v206;
              unsigned int v49 = 0;
              uint64_t v28 = 4294951365;
              if (fvr_isAllowedToLog(v91 + 496, 7) && dword_1E9350E80)
              {
                CFTypeRef v66 = v17;
                LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
                LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
                uint64_t v172 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v173 = buffer.value;
                if (os_log_type_enabled(v172, rhs.value)) {
                  unsigned int v174 = v173;
                }
                else {
                  unsigned int v174 = v173 & 0xFFFFFFFE;
                }
                if (v174)
                {
                  if (v203) {
                    uint64_t v175 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                  }
                  else {
                    uint64_t v175 = "";
                  }
                  *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)v205;
                  __dst.start.CMTimeEpoch epoch = *(void *)(v205 + 16);
                  double v185 = CMTimeGetSeconds(&__dst.start);
                  int v186 = *(_DWORD *)(v202 + 512);
                  uint64_t v187 = "logs skipped ";
                  *(_DWORD *)CMTime time = 136316418;
                  *(void *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierF"
                                        "orHostTimeInternal";
                  if (!v186) {
                    uint64_t v187 = "";
                  }
                  *(_WORD *)&time[12] = 2048;
                  *(void *)&time[14] = v203;
                  *(_WORD *)&time[22] = 2082;
                  *(void *)&time[24] = v175;
                  *(_WORD *)v237 = 2048;
                  *(double *)&v237[2] = v185;
                  *(_WORD *)&v237[10] = 2080;
                  *(void *)&v237[12] = v187;
                  *(_WORD *)&v237[20] = 1024;
                  *(_DWORD *)&v237[22] = v186;
LABEL_120:
                  _os_log_send_and_compose_impl();
                }
LABEL_320:
                CFArrayRef v47 = v204;
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                unsigned int v49 = 0;
                CFTypeRef v50 = 0;
                goto LABEL_321;
              }
              CFTypeRef v50 = 0;
LABEL_366:
              CFArrayRef v47 = v204;
              goto LABEL_323;
            }
          }
        }
        else
        {
          *(void *)&long long v219 = v215.value;
          DWORD2(v219) = v215.timescale;
          CMTimeEpoch v85 = v215.epoch;
          CMTimeFlags v86 = v215.flags;
        }
        if (v71 == ++v87) {
          goto LABEL_145;
        }
      }
      a1 = v203;
      CFArrayRef v47 = v204;
      uint64_t v17 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      CFArrayRef v61 = v208;
    }
  }
  CFArrayRef v198 = theArray[1];
  CFArrayRef v201 = v213[1];
  rhs.CFStringRef value = v196;
  rhs.CMTimeScale timescale = v13;
  cf[0] = 0;
  CFAllocatorRef v123 = CFGetAllocator(a1);
  CFMutableArrayRef v124 = CFArrayCreateMutable(v123, 0, MEMORY[0x1E4F1D510]);
  if (!v124)
  {
    uint64_t v28 = FigSignalErrorAt();
    CFTypeRef v50 = 0;
    goto LABEL_272;
  }
  uint64_t v125 = v124;
  CFAllocatorRef v126 = CFGetAllocator(a1);
  CFMutableArrayRef v127 = CFArrayCreateMutable(v126, 0, MEMORY[0x1E4F1D510]);
  if (!v127)
  {
    uint64_t v28 = FigSignalErrorAt();
    CFTypeRef v50 = 0;
    a1 = v203;
    CFArrayRef v47 = v204;
    goto LABEL_270;
  }
  CMTag v128 = v127;
  int v129 = 0;
  CFIndex v130 = 0;
  CMTimeFlags v131 = v194;
  CMTimeEpoch v195 = v209;
  if (!v61) {
    goto LABEL_216;
  }
LABEL_215:
  for (CFIndex i = CFArrayGetCount(v61); ; CFIndex i = 0)
  {
    if (v130 >= i)
    {
      CFIndex v147 = 0;
      a1 = v203;
      while (1)
      {
        CFArrayRef v47 = v204;
        if (v204) {
          CFIndex v148 = CFArrayGetCount(v204);
        }
        else {
          CFIndex v148 = 0;
        }
        if (v147 >= v148)
        {
          CFAllocatorRef v152 = CFGetAllocator(v203);
          uint64_t v28 = MEMORY[0x19970AA90](v152, v125, v128, cf);
          if (v28)
          {
            CFTypeRef v50 = 0;
          }
          else
          {
            CFTypeRef v50 = cf[0];
            CMTimeValue v220 = rhs.value;
            CMTimeScale v221 = rhs.timescale;
            CMTimeEpoch v209 = v195;
            cf[0] = 0;
            CMTimeFlags v194 = v131;
          }
          goto LABEL_269;
        }
        uint64_t v149 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v204, v147);
        CMTime v150 = CFArrayGetValueAtIndex(v201, v147);
        memset(&__dst, 0, 24);
        CMSampleBufferGetPresentationTimeStamp(&__dst.start, v149);
        if (!v129)
        {
          CMTimeFlags v151 = __dst.start.flags;
          if ((__dst.start.flags & 0x1D) == 1)
          {
            if (v131)
            {
              *(_OWORD *)CMTime time = *(_OWORD *)&__dst.start.value;
              *(void *)&time[16] = __dst.start.epoch;
              buffer.CFStringRef value = rhs.value;
              buffer.CMTimeScale timescale = rhs.timescale;
              buffer.CMTimeFlags flags = v131;
              buffer.CMTimeEpoch epoch = v195;
              if ((CMTimeCompare((CMTime *)time, &buffer) & 0x80000000) == 0) {
                goto LABEL_266;
              }
              CMTimeFlags v151 = __dst.start.flags;
            }
            rhs.CFStringRef value = __dst.start.value;
            rhs.CMTimeScale timescale = __dst.start.timescale;
            CMTimeEpoch v195 = __dst.start.epoch;
            CMTimeFlags v131 = v151;
          }
        }
LABEL_266:
        CFArrayAppendValue(v128, v149);
        CFArrayAppendValue(v125, v150);
        ++v147;
      }
    }
    *(_OWORD *)&buffer.CFStringRef value = *MEMORY[0x1E4F1F9F8];
    buffer.CMTimeEpoch epoch = v209;
    FigCFArrayGetCMTimeAtIndex();
    if ((buffer.flags & 0x1D) != 1) {
      goto LABEL_222;
    }
    if ((v131 & 1) == 0) {
      goto LABEL_220;
    }
    __dst.CMTime start = buffer;
    *(void *)CMTime time = rhs.value;
    *(_DWORD *)&time[8] = rhs.timescale;
    *(_DWORD *)&time[12] = v131;
    *(void *)&time[16] = v195;
    if (CMTimeCompare(&__dst.start, (CMTime *)time) < 0)
    {
      if (dword_1E9350E80 >= 3)
      {
        LODWORD(theString.CFDictionaryAddValue(theDict, key, value) = 0;
        LOBYTE(v215.CFDictionaryAddValue(theDict, key, value) = 0;
        CFStringRef v141 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v142 = theString.value;
        if (os_log_type_enabled(v141, v215.value)) {
          unsigned int v143 = v142;
        }
        else {
          unsigned int v143 = v142 & 0xFFFFFFFE;
        }
        if (v143)
        {
          if (v203) {
            uint64_t v144 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          }
          else {
            uint64_t v144 = "";
          }
          __dst.start.CFStringRef value = rhs.value;
          __dst.start.CMTimeScale timescale = rhs.timescale;
          __dst.start.CMTimeFlags flags = v131;
          __dst.start.CMTimeEpoch epoch = v195;
          Float64 v145 = CMTimeGetSeconds(&__dst.start);
          __dst.CMTime start = buffer;
          Float64 v146 = CMTimeGetSeconds(&__dst.start);
          *(_DWORD *)CMTime time = 136316162;
          *(void *)&time[4] = "videoReceiver_createTaggedBufferGroupFromSamplingSourceForTime";
          *(_WORD *)&time[12] = 2048;
          *(void *)&time[14] = v203;
          *(_WORD *)&time[22] = 2082;
          *(void *)&time[24] = v144;
          *(_WORD *)v237 = 2048;
          *(Float64 *)&v237[2] = v145;
          *(_WORD *)&v237[10] = 2048;
          *(Float64 *)&v237[12] = v146;
          _os_log_send_and_compose_impl();
          CFArrayRef v61 = v208;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_220:
      rhs.CFStringRef value = buffer.value;
      CMTimeFlags v131 = buffer.flags;
      rhs.CMTimeScale timescale = buffer.timescale;
      int v129 = 1;
      CMTimeEpoch v195 = buffer.epoch;
    }
LABEL_222:
    uint64_t v133 = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(v198, v130);
    CFIndex v134 = CFArrayGetValueAtIndex(v61, v130);
    *(void *)CMTime time = 0;
    *(void *)&time[8] = time;
    *(void *)&time[16] = 0x2000000000;
    *(void *)&time[24] = 0;
    theString.CFStringRef value = 0;
    v215.CFStringRef value = 0;
    uint64_t v135 = CMBaseObjectGetDerivedStorage();
    if (!v134)
    {
      uint64_t v28 = FigSignalErrorAt();
LABEL_253:
      CFArrayRef v61 = v208;
      goto LABEL_229;
    }
    CMTimeEpoch v136 = v135;
    uint64_t v137 = vr_createModifiedDataChannelTagCollectionWithDefaultTags(v133, &v215);
    if (v137)
    {
      uint64_t v28 = v137;
      CFIndex v134 = 0;
      goto LABEL_253;
    }
    CFStringRef v138 = *(NSObject **)(v136 + 152);
    __dst.start.CFStringRef value = MEMORY[0x1E4F143A8];
    *(void *)&__dst.start.CMTimeScale timescale = 0x40000000;
    __dst.start.CMTimeEpoch epoch = (CMTimeEpoch)__videoReceiver_createConformedPixelBufferWithClientSpecifiedAttributes_block_invoke;
    __dst.duration.CFStringRef value = (CMTimeValue)&unk_1E5795348;
    __dst.duration.CMTimeEpoch epoch = v136;
    *(void *)&long long v223 = v215.value;
    *(void *)&__dst.duration.CMTimeScale timescale = time;
    dispatch_sync(v138, &__dst);
    if (!*(void *)(*(void *)&time[8] + 24))
    {
      CFIndex v134 = CFRetain(v134);
      CFArrayRef v61 = v208;
      goto LABEL_228;
    }
    uint64_t v139 = VTPixelBufferConformerCopyConformedPixelBuffer();
    CFArrayRef v61 = v208;
    if (!v139)
    {
      CFIndex v134 = (const void *)theString.value;
LABEL_228:
      uint64_t v28 = 0;
      theString.CFStringRef value = 0;
      goto LABEL_229;
    }
    uint64_t v28 = v139;
    CFIndex v134 = 0;
LABEL_229:
    CFStringRef v140 = *(const void **)(*(void *)&time[8] + 24);
    if (v140) {
      CFRelease(v140);
    }
    if (v215.value) {
      CFRelease((CFTypeRef)v215.value);
    }
    if (theString.value) {
      CFRelease((CFTypeRef)theString.value);
    }
    _Block_object_dispose(time, 8);
    if (v28) {
      break;
    }
    CFArrayAppendValue(v128, v134);
    CFArrayAppendValue(v125, v133);
    if (v134) {
      CFRelease(v134);
    }
    ++v130;
    if (v61) {
      goto LABEL_215;
    }
LABEL_216:
    ;
  }
  if (v134) {
    CFRelease(v134);
  }
  CFTypeRef v50 = 0;
  a1 = v203;
  CFArrayRef v47 = v204;
LABEL_269:
  uint64_t v17 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  CFRelease(v128);
LABEL_270:
  CFRelease(v125);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
LABEL_272:
  CMTimeValue v27 = v190;
  unsigned int v48 = v206;
  if (v28)
  {
    unsigned int v49 = 0;
    goto LABEL_323;
  }
  if (!a7) {
    goto LABEL_279;
  }
  *(void *)CMTime time = 0;
  *(void *)&time[8] = time;
  *(void *)&time[16] = 0x2000000000;
  *(_DWORD *)&time[24] = 0;
  buffer.CFStringRef value = 0;
  *(void *)&buffer.CMTimeScale timescale = &buffer;
  buffer.CMTimeEpoch epoch = 0x2000000000;
  uint64_t v247 = 0;
  rhs.CFStringRef value = 0;
  *(void *)&rhs.CMTimeScale timescale = &rhs;
  rhs.CMTimeEpoch epoch = 0x2000000000;
  uint64_t v245 = 0;
  uint64_t v153 = CMBaseObjectGetDerivedStorage();
  CMTime v154 = *(NSObject **)(v153 + 152);
  __dst.start.CFStringRef value = MEMORY[0x1E4F143A8];
  *(void *)&__dst.start.CMTimeScale timescale = 0x40000000;
  __dst.start.CMTimeEpoch epoch = (CMTimeEpoch)__videoReceiver_createUpdatedSamplingEventIdentifierForPresentationTime_block_invoke;
  __dst.duration.CFStringRef value = (CMTimeValue)&unk_1E5795370;
  CFIndex v225 = (CFIndex)v190;
  *(void *)&long long v226 = v220;
  *((void *)&v226 + 1) = __PAIR64__(v194, v221);
  CMTimeEpoch v227 = v209;
  *(void *)&__dst.duration.CMTimeScale timescale = &rhs;
  __dst.duration.CMTimeEpoch epoch = (CMTimeEpoch)&buffer;
  *(void *)&long long v223 = time;
  *((void *)&v223 + 1) = v153;
  p_theCFStringRef String = a1;
  dispatch_sync(v154, &__dst);
  unsigned int v49 = *(const void **)(*(void *)&buffer.timescale + 24);
  *(void *)(*(void *)&buffer.timescale + 24) = 0;
  CMTime v155 = *(const void **)(*(void *)&rhs.timescale + 24);
  if (v155)
  {
    CFRelease(v155);
    CMTime v156 = *(const void **)(*(void *)&buffer.timescale + 24);
    if (v156) {
      CFRelease(v156);
    }
  }
  uint64_t v28 = *(unsigned int *)(*(void *)&time[8] + 24);
  _Block_object_dispose(&rhs, 8);
  _Block_object_dispose(&buffer, 8);
  _Block_object_dispose(time, 8);
  if (v28) {
    goto LABEL_366;
  }
  *a7 = v49;
  CFArrayRef v47 = v204;
LABEL_279:
  if (v191)
  {
    *CMTimeValue v191 = v50;
    CFTypeRef v50 = 0;
  }
  if (v192)
  {
    *(void *)uint64_t v192 = v220;
    *(_DWORD *)(v192 + 8) = v221;
    *(_DWORD *)(v192 + 12) = v194;
    *(void *)(v192 + 16) = v209;
  }
  if (v189)
  {
    *uint64_t v189 = v213[2];
    v213[2] = 0;
  }
  if (*(unsigned char *)(v202 + 496))
  {
    uint64_t v28 = 0;
    unsigned int v49 = 0;
    if (fvr_isAllowedToLog(v202 + 496, 0) && dword_1E9350E80)
    {
      CFTypeRef v66 = v17;
      LODWORD(buffer.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(rhs.CFDictionaryAddValue(theDict, key, value) = 0;
      CMTime v157 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v158 = buffer.value;
      if (os_log_type_enabled(v157, rhs.value)) {
        unsigned int v159 = v158;
      }
      else {
        unsigned int v159 = v158 & 0xFFFFFFFE;
      }
      if (v159)
      {
        if (a1) {
          CMTime v160 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
        }
        else {
          CMTime v160 = "";
        }
        *(_OWORD *)&__dst.start.CFStringRef value = *(_OWORD *)v205;
        __dst.start.CMTimeEpoch epoch = *(void *)(v205 + 16);
        Float64 v161 = CMTimeGetSeconds(&__dst.start);
        int v162 = *(_DWORD *)(v202 + 516);
        *(_DWORD *)CMTime time = 136316162;
        *(void *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
        *(_WORD *)&time[12] = 2048;
        *(void *)&time[14] = a1;
        *(_WORD *)&time[22] = 2082;
        *(void *)&time[24] = v160;
        *(_WORD *)v237 = 2048;
        *(Float64 *)&v237[2] = v161;
        *(_WORD *)&v237[10] = 1024;
        *(_DWORD *)&v237[12] = v162;
        _os_log_send_and_compose_impl();
      }
      CFArrayRef v47 = v204;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      unsigned int v49 = 0;
      uint64_t v28 = 0;
LABEL_321:
      uint64_t v17 = v66;
LABEL_322:
      CMTimeValue v27 = v190;
      unsigned int v48 = v206;
    }
  }
  else
  {
    unsigned int v49 = 0;
    uint64_t v28 = 0;
  }
LABEL_323:
  uint64_t v176 = CMBaseObjectGetDerivedStorage();
  buffer.CFStringRef value = 0;
  rhs.CFStringRef value = 0;
  if (!v28)
  {
    uint64_t v177 = v176;
    uint64_t v178 = *(void *)(v176 + 88);
    if (v178)
    {
      FigDataChannelConfigurationCopyPlayerLoggingIdentifier(v178, (CFStringRef *)&buffer);
      FigDataChannelConfigurationCopyLoggingIdentifier(*(void *)(v177 + 88), (CFStringRef *)&rhs);
    }
    if (*v17 == 1)
    {
      CFStringRef v179 = (const __CFString *)rhs.value;
      *(void *)CMTime time = 0;
      if (rhs.value)
      {
        if (CFStringGetLength((CFStringRef)rhs.value) <= 8) {
          v180.length = CFStringGetLength(v179);
        }
        else {
          v180.length = 8;
        }
        v180.CFIndex location = 0;
        CFStringGetBytes(v179, v180, 0, 0x3Fu, 0, time, 8, 0);
      }
      CFArrayRef v181 = v47;
      strncpy((char *)&__dst, time, 8uLL);
      CFStringRef v182 = (const __CFString *)buffer.value;
      *(void *)CMTime time = 0;
      if (buffer.value)
      {
        if (CFStringGetLength((CFStringRef)buffer.value) <= 8) {
          v183.length = CFStringGetLength(v182);
        }
        else {
          v183.length = 8;
        }
        v183.CFIndex location = 0;
        CFStringGetBytes(v182, v183, 0, 0x3Fu, 0, time, 8, 0);
      }
      strncpy((char *)&__dst, time, 8uLL);
      __dst.start.CFStringRef value = v220;
      __dst.start.CMTimeScale timescale = v221;
      __dst.start.CMTimeFlags flags = v194;
      __dst.start.CMTimeEpoch epoch = v209;
      CMTimeGetSeconds(&__dst.start);
      kdebug_trace();
      CFArrayRef v47 = v181;
    }
    if (buffer.value) {
      CFRelease((CFTypeRef)buffer.value);
    }
    if (rhs.value) {
      CFRelease((CFTypeRef)rhs.value);
    }
  }
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  if (theArray[1]) {
    CFRelease(theArray[1]);
  }
  if (v213[0]) {
    CFRelease(v213[0]);
  }
  if (v213[1]) {
    CFRelease(v213[1]);
  }
  if (v213[2]) {
    CFRelease(v213[2]);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v208) {
    CFRelease(v208);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v49) {
    CFRelease(v49);
  }
  return v28;
}

uint64_t fvr_isAllowedToLog(uint64_t a1, int a2)
{
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(_DWORD *)(a1 + 4) == a2 && *(unsigned char *)a1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 16) = v5;
    if (!a2 || v5 > *(_DWORD *)(a1 + 32) && UpTimeNanoseconds < *(void *)(a1 + 24) + *(void *)(a1 + 8)) {
      return 0;
    }
    *(void *)(a1 + 8) = UpTimeNanoseconds;
  }
  else
  {
    *(_DWORD *)(a1 + 4) = a2;
    *(void *)(a1 + 8) = UpTimeNanoseconds;
    int v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = v7;
  }
  return 1;
}

void __videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample_block_invoke(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    long long v3 = *(_OWORD *)(a1 + 56);
    *(void *)(v2 + 376) = *(void *)(a1 + 72);
    *(_OWORD *)(v2 + 360) = v3;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(const void **)(a1 + 40);
    uint64_t v6 = *(const void **)(v5 + 384);
    *(void *)(v5 + 384) = v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(const void **)(v7 + 392);
    uint64_t v9 = *(const void **)(a1 + 48);
    *(void *)(v7 + 392) = v9;
    if (v9) {
      CFRetain(v9);
    }
    if (v8)
    {
      CFRelease(v8);
    }
  }
}

__n128 __videoReceiver_updateActiveConfigurationForHostTimeIfNecessary_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CMTime time1 = *(CMTime *)(a1 + 48);
  CMTime v6 = *(CMTime *)(v2 + 124);
  if ((CMTimeCompare(&time1, &v6) & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(unsigned char *)(v4 + 96) = 1;
    long long v5 = *(_OWORD *)(a1 + 48);
    *(void *)(v4 + 116) = *(void *)(a1 + 64);
    *(_OWORD *)(v4 + 100) = v5;
    videoReceiver_activateReceiverConfiguration2(*(void *)(a1 + 40));
  }
  return result;
}

void __videoReceiver_copyBuffersFromSamplingSourceForHostTime_block_invoke(uint64_t a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFStringRef value = 0;
  CFTypeRef v54 = 0;
  CMTimeValue v66 = *MEMORY[0x1E4F1F9F8];
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4 < 1)
  {
LABEL_15:
    CFArrayRef Count = *(const __CFArray **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (Count)
    {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      uint64_t v4 = *(void *)(a1 + 72);
    }
    if (Count != (const __CFArray *)v4) {
      goto LABEL_88;
    }
    CFArrayRef v14 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (v14) {
      CFArrayRef v14 = (const __CFArray *)CFArrayGetCount(v14);
    }
    if ((const __CFArray *)v4 != v14) {
      goto LABEL_88;
    }
    CFArrayRef v15 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v15) {
      CFArrayRef v15 = (const __CFArray *)CFArrayGetCount(v15);
    }
    if ((const __CFArray *)v4 == v15)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v17 = Mutable;
      if (Mutable)
      {
        CMTimeEpoch v50 = v3;
        uint64_t v18 = (const void **)MEMORY[0x1E4F1CFD0];
        if (*(unsigned char *)(a1 + 168)) {
          CFDictionarySetValue(Mutable, @"SamplingOptionDoNotConsume", (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        if (*(unsigned char *)(a1 + 170)) {
          CFDictionarySetValue(v17, @"SamplingOptionSampleUsingMediaTime", *v18);
        }
        CFAllocatorRef v52 = v17;
        uint64_t v19 = *(void *)(a1 + 136);
        if (v19 >= 1)
        {
          CFIndex v20 = 0;
          CFRange v21 = (_OWORD *)(a1 + 144);
          CMTimeFlags v22 = flags;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v20);
            if (!*(unsigned char *)(a1 + 170) || (flags & 1) == 0)
            {
              *(_OWORD *)&time2.CFStringRef value = *v21;
              time2.CMTimeEpoch epoch = *(void *)(a1 + 160);
              uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v25) {
                uint64_t v26 = v25;
              }
              else {
                uint64_t v26 = 0;
              }
              uint64_t v29 = *(uint64_t (**)(const void *, CMTime *, __CFDictionary *, CFTypeRef *))(v26 + 48);
              if (v29)
              {
                CMTime time = time2;
                int v30 = v29(ValueAtIndex, &time, v52, &v54);
              }
              else
              {
                int v30 = -12782;
              }
              *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v30;
              if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
              {
                LODWORD(v53.CFDictionaryAddValue(theDict, key, value) = 0;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v32 = v53.value;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v33 = v32;
                }
                else {
                  unsigned int v33 = v32 & 0xFFFFFFFE;
                }
                if (v33)
                {
                  uint64_t v34 = *(void *)(a1 + 120);
                  if (v34) {
                    CFIndex v35 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                  }
                  else {
                    CFIndex v35 = "";
                  }
                  *(_OWORD *)&time.CFStringRef value = *v21;
                  time.CMTimeEpoch epoch = *(void *)(a1 + 160);
                  Float64 Seconds = CMTimeGetSeconds(&time);
                  int v44 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                  LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136316418;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"videoReceiver_copyBuffersFromSamplingSourceF"
                                                                            "orHostTime_block_invoke";
                  LOWORD(time2.flags) = 2048;
                  *(void *)((char *)&time2.flags + 2) = v34;
                  HIWORD(time2.epoch) = 2082;
                  CFAllocatorRef v58 = v35;
                  __int16 v59 = 1024;
                  int v60 = v20;
                  __int16 v61 = 2048;
                  Float64 v62 = Seconds;
                  __int16 v63 = 1024;
                  int v64 = v44;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CMTimeFlags flags = v22;
              }
            }
            else
            {
              uint64_t VTable = CMBaseObjectGetVTable();
              if (*(void *)(VTable + 16)) {
                uint64_t v28 = *(void *)(VTable + 16);
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v36 = *(uint64_t (**)(const void *, CMTime *, __CFDictionary *, CFTypeRef *))(v28 + 48);
              if (v36)
              {
                time.CFStringRef value = v66;
                time.CMTimeScale timescale = timescale;
                time.CMTimeFlags flags = flags;
                time.CMTimeEpoch epoch = v50;
                int v37 = v36(ValueAtIndex, &time, v52, &v54);
              }
              else
              {
                int v37 = -12782;
              }
              *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v37;
              if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
              {
                LODWORD(v53.CFDictionaryAddValue(theDict, key, value) = 0;
                unsigned int v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v39 = v53.value;
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v40 = v39;
                }
                else {
                  unsigned int v40 = v39 & 0xFFFFFFFE;
                }
                if (v40)
                {
                  uint64_t v41 = *(void *)(a1 + 120);
                  if (v41) {
                    uint64_t v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                  }
                  else {
                    uint64_t v42 = "";
                  }
                  time.CFStringRef value = v66;
                  time.CMTimeScale timescale = timescale;
                  time.CMTimeFlags flags = v22;
                  time.CMTimeEpoch epoch = v50;
                  Float64 v45 = CMTimeGetSeconds(&time);
                  int v46 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
                  LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136316418;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"videoReceiver_copyBuffersFromSamplingSourceF"
                                                                            "orHostTime_block_invoke";
                  LOWORD(time2.flags) = 2048;
                  *(void *)((char *)&time2.flags + 2) = v41;
                  HIWORD(time2.epoch) = 2082;
                  CFAllocatorRef v58 = v42;
                  __int16 v59 = 1024;
                  int v60 = v20;
                  __int16 v61 = 2048;
                  Float64 v62 = v45;
                  __int16 v63 = 1024;
                  int v64 = v46;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CMTimeFlags flags = v22;
                if (*(unsigned char *)(a1 + 169)) {
                  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -15931;
                }
              }
            }
            if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
              break;
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), v54);
            ++v20;
            uint64_t v19 = *(void *)(a1 + 136);
            if (v20 >= v19) {
              goto LABEL_73;
            }
          }
          uint64_t v17 = v52;
          goto LABEL_76;
        }
LABEL_73:
        CFArrayRef v47 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        if (v47)
        {
          CFArrayRef v47 = (const __CFArray *)CFArrayGetCount(v47);
          uint64_t v19 = *(void *)(a1 + 136);
        }
        uint64_t v17 = v52;
        if (v47 == (const __CFArray *)v19) {
          goto LABEL_76;
        }
      }
      int v48 = FigSignalErrorAt();
    }
    else
    {
LABEL_88:
      int v48 = FigSignalErrorAt();
      uint64_t v17 = 0;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v48;
    goto LABEL_76;
  }
  CFIndex v5 = 0;
  CMTime v6 = (CMTime *)(a1 + 144);
  *(_OWORD *)CFIndex v51 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  unsigned int v49 = (CMTime *)(a1 + 144);
  while (1)
  {
    *(_OWORD *)&v53.CFStringRef value = *(_OWORD *)v51;
    v53.CMTimeEpoch epoch = v3;
    uint64_t v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v5);
    int v9 = *(unsigned __int8 *)(a1 + 168);
    uint64_t v10 = *(const void **)(a1 + 120);
    int v11 = *(unsigned __int8 *)(*(void *)(a1 + 128) + 40);
    CMTime time = *v6;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = videoReceiver_copyPixelBufferFromImageQueueReceiverSamplingAtTime(v10, v8, (uint64_t)&time, v9, v11, (__IOSurface **)&value, &v53, (uint64_t *)&cf);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
    if ((v53.flags & 1) == 0)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
      break;
    }
    if (dword_1E9350E80 >= 7)
    {
      CMTag v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTime v6 = v49;
    }
    CMTime time = v53;
    time2.CFStringRef value = v66;
    time2.CMTimeScale timescale = timescale;
    time2.CMTimeFlags flags = flags;
    time2.CMTimeEpoch epoch = epoch;
    if (CMTimeCompare(&time, &time2) < 0)
    {
      CMTimeValue v66 = v53.value;
      CMTimeFlags flags = v53.flags;
      CMTimeScale timescale = v53.timescale;
      CMTimeEpoch epoch = v53.epoch;
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), value);
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), cf);
    CMTime time = v53;
    FigCFArrayAppendCMTime();
    if (value)
    {
      CFRelease(value);
      CFStringRef value = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    ++v5;
    uint64_t v4 = *(void *)(a1 + 72);
    if (v5 >= v4)
    {
      CMTimeEpoch v3 = epoch;
      goto LABEL_15;
    }
  }
  uint64_t v17 = 0;
LABEL_76:
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v17) {
    CFRelease(v17);
  }
}

CFArrayRef __videoReceiver_createConformedPixelBufferWithClientSpecifiedAttributes_block_invoke(uint64_t a1)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef result = *(const __CFArray **)(*(void *)(a1 + 40) + 440);
    if (result) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (i >= (uint64_t)result) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 40) + 440), i);
    if (CMTagCollectionContainsTagsOfCollection(*(CMTagCollectionRef *)(a1 + 48), ValueAtIndex))
    {
      CFArrayRef result = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 40) + 448), i);
      if (result) {
        CFArrayRef result = (const __CFArray *)CFRetain(result);
      }
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
      return result;
    }
  }
  return result;
}

uint64_t __videoReceiver_createUpdatedSamplingEventIdentifierForPresentationTime_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v2 = *(CMTime **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2 && (time1 = v2[1], CMTime v8 = *(CMTime *)(a1 + 80), result = CMTimeCompare(&time1, &v8), !result))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    CFAllocatorRef v4 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
    CFIndex v5 = *(const void **)(a1 + 72);
    CMTime v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    CMTime time1 = *(CMTime *)(a1 + 80);
    uint64_t result = samplingEventIdentifier_create((uint64_t)v4, (long long *)&time1.value, v5, v6);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      uint64_t v7 = *(const void **)(*(void *)(a1 + 56) + 352);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(*(void *)(a1 + 56) + 352) = 0;
      }
      uint64_t result = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(*(void *)(a1 + 56) + 352) = result;
    }
  }
  return result;
}

uint64_t samplingEventIdentifier_create(uint64_t a1, long long *a2, const void *a3, uint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350E80 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a4) {
    return FigSignalErrorAt();
  }
  if (FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce != -1) {
    dispatch_once(&FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce, &__block_literal_global_18);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return FigSignalErrorAt();
  }
  uint64_t v9 = Instance;
  long long v10 = *a2;
  *(void *)(Instance + 40) = *((void *)a2 + 2);
  *(_OWORD *)(Instance + 24) = v10;
  if (a3) {
    CFTypeRef v11 = CFRetain(a3);
  }
  else {
    CFTypeRef v11 = 0;
  }
  CFIndex v12 = 0;
  *(void *)(v9 + 16) = v11;
  if (!a3) {
    goto LABEL_12;
  }
LABEL_11:
  for (CFIndex i = CFArrayGetCount((CFArrayRef)a3); v12 < i; CFIndex i = 0)
  {
    *((unsigned char *)CFArrayGetValueAtIndex((CFArrayRef)a3, v12++) + 26) = 1;
    if (a3) {
      goto LABEL_11;
    }
LABEL_12:
    ;
  }
  uint64_t result = 0;
  *a4 = v9;
  return result;
}

void *__videoReceiver_copyCachedTaggedBufferGroupAndRelatedObjectsIfAvailable_block_invoke(void *result)
{
  uint64_t v1 = result[9];
  if ((*(unsigned char *)(v1 + 372) & 1) != 0 && *(void *)(v1 + 384))
  {
    uint64_t v2 = result;
    *(unsigned char *)(*(void *)(result[4] + 8) + 24) = 1;
    CFTypeRef v3 = *(CFTypeRef *)(result[9] + 384);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *(void *)(*(void *)(v2[5] + 8) + 24) = v3;
    uint64_t v4 = *(void *)(v2[6] + 8);
    uint64_t v5 = v2[9];
    long long v6 = *(_OWORD *)(v5 + 360);
    *(void *)(v4 + 40) = *(void *)(v5 + 376);
    *(_OWORD *)(v4 + 24) = v6;
    uint64_t result = *(void **)(v2[9] + 392);
    if (result) {
      uint64_t result = CFRetain(result);
    }
    *(void *)(*(void *)(v2[7] + 8) + 24) = result;
    if (v2[10])
    {
      uint64_t result = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
      *(void *)(*(void *)(v2[8] + 8) + 24) = result;
      if (!*(void *)(*(void *)(v2[8] + 8) + 24))
      {
        CFAllocatorRef v7 = CFGetAllocator((CFTypeRef)v2[11]);
        uint64_t v8 = *(void *)(v2[6] + 8);
        uint64_t v9 = (uint64_t *)(*(void *)(v2[8] + 8) + 24);
        long long v10 = *(_OWORD *)(v8 + 24);
        uint64_t v11 = *(void *)(v8 + 40);
        return (void *)samplingEventIdentifier_create((uint64_t)v7, &v10, 0, v9);
      }
    }
  }
  return result;
}

void __videoReceiver_createDataChannelResource_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  CFTypeRef v3 = (void (*)(void, void, void, void))v2[34];
  if (v3)
  {
    v3(a1[5], a1[6], v2[35], 0);
    uint64_t v2 = (void *)a1[4];
  }
  uint64_t v4 = v2[50];
  if (v4) {
    (*(void (**)(uint64_t, void, void, void))(v4 + 16))(v4, a1[5], a1[6], 0);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  long long v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
  }
}

void __videoReceiver_announceDataChannelResourceRemoval_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  CFTypeRef v3 = (void (*)(void, void, void, uint64_t))v2[34];
  if (v3)
  {
    v3(a1[5], a1[6], v2[35], 1);
    uint64_t v2 = (void *)a1[4];
  }
  uint64_t v4 = v2[50];
  if (v4) {
    (*(void (**)(uint64_t, void, void, uint64_t))(v4 + 16))(v4, a1[5], a1[6], 1);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  long long v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
  }
}

void *__videoReceiver_setPrepareDataChannelsWithDependentResourcesCallback_block_invoke(void *result)
{
  *(void *)(result[4] + 248) = result[5];
  *(void *)(result[4] + 256) = result[6];
  return result;
}

void *__videoReceiver_setResourceLifeCycleCallback_block_invoke(void *result)
{
  *(void *)(result[4] + 272) = result[5];
  *(void *)(result[4] + 280) = result[6];
  return result;
}

void *__videoReceiver_setResourceLifeCycleHandler_block_invoke(void *result)
{
  *(void *)(*(void *)(result[5] + 8) + 40) = *(void *)(result[6] + 400);
  *(void *)(result[6] + 400) = result[4];
  return result;
}

void *__videoReceiver_setPrepareDataChannelsWithDependentResourcesHandler_block_invoke(void *result)
{
  *(void *)(*(void *)(result[5] + 8) + 40) = *(void *)(result[6] + 408);
  *(void *)(result[6] + 408) = result[4];
  return result;
}

void __videoReceiver_activateReceiverConfiguration_block_invoke(uint64_t a1)
{
}

uint64_t FigSampleBufferProcessorCreateForMonochrome(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigSampleBufferProcessorGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3) {
      *a2 = 0;
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sbp_monochrome_invalidate()
{
  *(void *)CMBaseObjectGetDerivedStorage() = 0;
  return 0;
}

void *sbp_monochrome_finalize()
{
  uint64_t result = (void *)CMBaseObjectGetDerivedStorage();
  *uint64_t result = 0;
  return result;
}

__CFString *sbp_monochrome_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_Monochrome %p>", a1);
  return Mutable;
}

uint64_t sbp_monochrome_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  void *DerivedStorage = a2;
  DerivedStorage[1] = a3;
  return 0;
}

uint64_t sbp_monochrome_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  if (ImageBuffer
    && (uint64_t v5 = ImageBuffer, CVPixelBufferGetPixelFormatType(ImageBuffer) == 875704438)
    && !CVPixelBufferLockBaseAddress(v5, 0))
  {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v5, 1uLL);
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v5, 1uLL);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v5, 1uLL);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v5, 1uLL);
    if (WidthOfPlane == BytesPerRowOfPlane >> 1)
    {
      memset(BaseAddressOfPlane, 136, 2 * WidthOfPlane * HeightOfPlane);
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    CVPixelBufferUnlockBaseAddress(v5, 0);
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  if (*(void *)DerivedStorage) {
    (*(void (**)(void, uint64_t, opaqueCMSampleBuffer *))DerivedStorage)(*(void *)(DerivedStorage + 8), v6, a2);
  }
  return v6;
}

uint64_t sbp_monochrome_finishPendingProcessing()
{
  return 0;
}

uint64_t FigVirtualFramebufferGetRemoteFramebufs(void *__dst, uint64_t a2)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigVirtualFramebufferGetRemoteFramebufs_block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  block[4] = a2;
  if (FigVirtualFramebufferGetRemoteFramebufs_once != -1) {
    dispatch_once(&FigVirtualFramebufferGetRemoteFramebufs_once, block);
  }
  uint64_t v3 = FigVirtualFramebufferGetRemoteFramebufs_framebufCount;
  if (FigVirtualFramebufferGetRemoteFramebufs_framebufCount) {
    memcpy(__dst, (const void *)FigVirtualFramebufferGetRemoteFramebufs_framebufs, 8 * FigVirtualFramebufferGetRemoteFramebufs_framebufCount);
  }
  return v3;
}

void __FigVirtualFramebufferGetRemoteFramebufs_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = dispatch_queue_create("com.apple.coremedia.vfbremote.connect", 0);
  FigVirtualFramebufferGetRemoteFramebufs_framebufs = (uint64_t)malloc_type_calloc(*(void *)(a1 + 32), 8uLL, 0x2004093837F09uLL);
  if (*(void *)(a1 + 32))
  {
    unint64_t v3 = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v5 = FigVirtualFramebufferGetRemoteFramebufs_framebufs;
      uint64_t v23 = 0;
      memset(&context.retain, 0, 40);
      FigVirtualFramebufferGetClassID();
      int v6 = CMDerivedObjectCreate();
      if (v6) {
        break;
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(DerivedStorage + 24) = v3 + 1;
      *(void *)uint64_t DerivedStorage = 0;
      *(void *)(DerivedStorage + 16) = v2;
      dispatch_retain(v2);
      *(void *)(DerivedStorage + 8) = 0;
      *(void *)(DerivedStorage + 32) = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 40) = CFDictionaryCreateMutable(v4, 0, 0, MEMORY[0x1E4F1D540]);
      *(_DWORD *)(DerivedStorage + 64) = -1;
      *(void *)(DerivedStorage + 72) = FigSimpleMutexCreate();
      context.version = 0;
      context.info = v23;
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbremote_hotplugSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbremote_hotplugSourceCancel;
      context.perform = (void (__cdecl *)(void *))vfbremote_hotplugSourcePerform;
      *(void *)(DerivedStorage + 88) = CFRunLoopSourceCreate(v4, 0, &context);
      *(void *)(DerivedStorage + 120) = FigSimpleMutexCreate();
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbremote_vsyncSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbremote_vsyncSourceCancel;
      context.perform = (void (__cdecl *)(void *))vfbremote_vsyncSourcePerform;
      *(void *)(DerivedStorage + 136) = CFRunLoopSourceCreate(v4, 0, &context);
      *(void *)(DerivedStorage + 192) = FigSimpleMutexCreate();
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbremote_hdcpSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbremote_hdcpSourceCancel;
      context.perform = (void (__cdecl *)(void *))vfbremote_hdcpSourcePerform;
      *(void *)(DerivedStorage + 208) = CFRunLoopSourceCreate(v4, 0, &context);
      uint64_t v8 = *(NSObject **)(DerivedStorage + 16);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __vfbremote_create_block_invoke;
      block[3] = &__block_descriptor_tmp_2_1;
      block[4] = v23;
      dispatch_async(v8, block);
      *(void *)(v5 + 8 * v3) = v23;
      unsigned int v22 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v10 = v22;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        int v12 = *(_DWORD *)(DerivedStorage + 24);
        *(_DWORD *)long long v24 = 136315394;
        uint64_t v25 = "vfbremote_create";
        __int16 v26 = 1024;
        int v27 = v12;
        _os_log_send_and_compose_impl();
      }
      ++v3;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v3 >= *(void *)(a1 + 32)) {
        goto LABEL_12;
      }
    }
    int v13 = v6;
    unsigned int v22 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFArrayRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v15 = v22;
    if (os_log_type_enabled(v14, type)) {
      unsigned int v16 = v15;
    }
    else {
      unsigned int v16 = v15 & 0xFFFFFFFE;
    }
    if (v16)
    {
      *(_DWORD *)long long v24 = 136315650;
      uint64_t v25 = "vfbremote_create";
      __int16 v26 = 1024;
      int v27 = 1199;
      __int16 v28 = 1024;
      int v29 = v13;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    LODWORD(block[0]) = 0;
    v24[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v18 = block[0];
    if (os_log_type_enabled(v17, v24[0])) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      LODWORD(context.version) = 136315650;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)"FigVirtualFramebufferGetRemoteFramebufs_block_invoke";
      WORD2(context.info) = 1024;
      *(_DWORD *)((char *)&context.info + 6) = 1268;
      WORD1(context.retain) = 1024;
      HIDWORD(context.retain) = v13;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    unint64_t v3 = 0;
  }
LABEL_12:
  dispatch_release(v2);
  FigVirtualFramebufferGetRemoteFramebufs_framebufCFArrayRef Count = v3;
}

uint64_t vfbremote_hotplugSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  if (*(void *)(DerivedStorage + 80))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(DerivedStorage + 80) = a2;
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
}

uint64_t vfbremote_hotplugSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  if (*(void *)(DerivedStorage + 80) != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(DerivedStorage + 80) = 0;
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
}

uint64_t vfbremote_hotplugSourcePerform()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  uint64_t v1 = *(void *)(DerivedStorage + 104);
  CFAllocatorRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(DerivedStorage + 96);
  uint64_t v2 = *(unsigned __int8 *)(DerivedStorage + 112);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  *(_DWORD *)(DerivedStorage + 64) = -1;
  if (!v2) {
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 40));
  }
  uint64_t result = MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  if (v4)
  {
    return v4(v2, v1);
  }
  return result;
}

uint64_t vfbremote_vsyncSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 120));
  if (*(void *)(DerivedStorage + 128))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(DerivedStorage + 128) = a2;
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 120));
}

uint64_t vfbremote_vsyncSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 120));
  if (*(void *)(DerivedStorage + 128) != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(DerivedStorage + 128) = 0;
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 120));
}

uint64_t vfbremote_vsyncSourcePerform()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[15]);
  uint64_t v1 = DerivedStorage[19];
  int v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DerivedStorage[18];
  uint64_t v2 = DerivedStorage[20];
  uint64_t v3 = DerivedStorage[21];
  uint64_t v4 = DerivedStorage[22];
  uint64_t result = MEMORY[0x19970E930](DerivedStorage[15]);
  if (v6)
  {
    return v6(v2, v3, v4, v1);
  }
  return result;
}

uint64_t vfbremote_hdcpSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 192));
  if (*(void *)(DerivedStorage + 200))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(DerivedStorage + 200) = a2;
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 192));
}

uint64_t vfbremote_hdcpSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[24]);
  if (DerivedStorage[25] != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[25] = 0;
  DerivedStorage[27] = 0;
  DerivedStorage[28] = 0;
  return MEMORY[0x19970E930](DerivedStorage[24]);
}

uint64_t vfbremote_hdcpSourcePerform()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 192));
  uint64_t v1 = *(void *)(DerivedStorage + 224);
  uint64_t v4 = *(uint64_t (**)(uint64_t, BOOL))(DerivedStorage + 216);
  int v2 = *(unsigned __int8 *)(DerivedStorage + 232);
  *(void *)(DerivedStorage + 216) = 0;
  *(void *)(DerivedStorage + 224) = 0;
  uint64_t result = MEMORY[0x19970E930](*(void *)(DerivedStorage + 192));
  if (v4)
  {
    return v4(v1, v2 != 0);
  }
  return result;
}

void __vfbremote_create_block_invoke(uint64_t a1)
{
}

void vfbremote_connect(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  xpc_object_t v23 = 0;
  xCFDictionaryRef dict = 0;
  CFTypeRef cf = 0;
  if (*(void *)(DerivedStorage + 8)) {
    goto LABEL_36;
  }
  if (vfbremote_getRemoteClient_once != -1) {
    dispatch_once(&vfbremote_getRemoteClient_once, &__block_literal_global_19);
  }
  uint64_t v3 = vfbremote_getRemoteClient_client;
  *(void *)(DerivedStorage + 8) = vfbremote_getRemoteClient_client;
  if (v3)
  {
LABEL_36:
    if (atomic_exchange((atomic_ullong *volatile)DerivedStorage, 0)) {
      FigXPCRemoteClientDisassociateObject();
    }
    if (FigXPCCreateBasicMessage()
      || (xpc_dictionary_set_uint64(xdict, "InFramebufID", *(int *)(DerivedStorage + 24)),
          FigXPCRemoteClientSendSyncMessageCreatingReply())
      || (uint64_t uint64 = xpc_dictionary_get_uint64(v23, (const char *)*MEMORY[0x1E4F20280])) == 0)
    {
      int v21 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      int v13 = -536870199;
    }
    else
    {
      unint64_t v5 = uint64;
      FigXPCRemoteClientAssociateObject();
      atomic_store(v5, (unint64_t *)DerivedStorage);
      FigBytePumpGetFigBaseObject(a1);
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v9 + 48);
      if (v10)
      {
        int v11 = v10(v7, 0x1EE57A4B8, *MEMORY[0x1E4F1CF80], &cf);
        if (!v11)
        {
          int v21 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          int v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (*(unsigned char *)(DerivedStorage + 113)) {
            vfbremote_setHotPlugDetectNotifications(a1);
          }
          if (*(unsigned char *)(DerivedStorage + 184)) {
            vfbremote_setVSyncNotifications();
          }
          goto LABEL_23;
        }
        int v13 = v11;
      }
      else
      {
        int v13 = -12782;
      }
      int v21 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFArrayRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_24;
  }
  int v21 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  unsigned int v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_23:
  int v13 = 0;
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v13)
  {
    sleep(2u);
    unsigned int v15 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __vfbremote_connect_block_invoke;
    block[3] = &__block_descriptor_tmp_13;
    block[4] = a1;
    dispatch_async(v15, block);
  }
  else if (!*(void *)(DerivedStorage + 8))
  {
    unsigned int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

CFStringRef vfbremote_copyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = *(unsigned int *)(DerivedStorage + 24);
  CFIndex v5 = CFGetRetainCount(a1);
  unint64_t v6 = atomic_load((unint64_t *)DerivedStorage);
  return CFStringCreateWithFormat(v3, 0, @"<FigVirtualFramebufferRemote %p (%d) retainCount: %ld objectID: %llu>", a1, v4, v5, v6);
}

uint64_t vfbremote_copyProperty()
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = atomic_load(DerivedStorage);
  if (v1) {
    uint64_t v2 = FigXPCSendStdCopyPropertyMessage();
  }
  else {
    uint64_t v2 = 3758097111;
  }
  vfbremote_handleError((uint64_t)DerivedStorage, v1, v2);
  return v2;
}

uint64_t vfbremote_setProperty()
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = atomic_load(DerivedStorage);
  if (v1)
  {
    uint64_t v2 = FigXPCSendStdSetPropertyMessage();
    if (v2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    uint64_t v2 = 3758097111;
  }
  vfbremote_handleError((uint64_t)DerivedStorage, v1, v2);
  return v2;
}

uint64_t vfbremote_handleError(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  if (a3)
  {
    MEMORY[0x19970E910](*(void *)(result + 32));
    *(_DWORD *)(v4 + 64) = -1;
    uint64_t result = MEMORY[0x19970E930](*(void *)(v4 + 32));
  }
  if (a2)
  {
    return FigXPCRemoteClientKillServerOnTimeout();
  }
  return result;
}

uint64_t vfbremote_getSupportedDigitalOutModes(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = atomic_load(DerivedStorage);
  if (v6)
  {
    uint64_t v7 = FigXPCCreateBasicMessage();
    if (v7
      || (uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v7)
      || (uint64_t v7 = FigXPCMessageCopyCFArray(), v7)
      || (uint64_t v7 = FigXPCMessageCopyCFArray(), v7))
    {
      uint64_t v10 = v7;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      MEMORY[0x19970E910](DerivedStorage[4]);
      uint64_t v8 = (const void *)DerivedStorage[6];
      DerivedStorage[6] = 0;
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v9 = (const void *)DerivedStorage[7];
      DerivedStorage[7] = 0;
      if (v9) {
        CFRelease(v9);
      }
      MEMORY[0x19970E930](DerivedStorage[4]);
      if (a2) {
        *a2 = 0;
      }
      uint64_t v10 = 0;
      if (a3) {
        *a3 = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v6, v10);
  return v10;
}

uint64_t vfbremote_setDigitalOutMode(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = atomic_load(DerivedStorage);
  if (!v6)
  {
    uint64_t v8 = 3758097111;
    goto LABEL_4;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7)
  {
    uint64_t v8 = v7;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_8:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_4;
  }
  xpc_dictionary_set_uint64(0, "InColorModeID", a2);
  xpc_dictionary_set_uint64(0, "InTimingModeID", a3);
  uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v8)
  {
    int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v6, v8);
  return v8;
}

uint64_t vfbremote_submitSurface(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, int a14)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v39 = 0;
  xCFDictionaryRef dict = 0;
  bytes[0] = a13;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  *(double *)&bytes[3] = a3;
  *(double *)&UInt8 bytes[4] = a4;
  *(double *)&bytes[5] = a5;
  *(double *)&bytes[6] = a6;
  *(double *)&bytes[7] = a7;
  *(double *)&UInt8 bytes[8] = a8;
  int v35 = a11;
  int v36 = a10;
  int v37 = a12;
  int v38 = a14;
  uint64_t v28 = atomic_load(DerivedStorage);
  if (!v28)
  {
    uint64_t v30 = 3758097111;
    goto LABEL_4;
  }
  uint64_t v29 = FigXPCCreateBasicMessage();
  if (v29)
  {
    uint64_t v30 = v29;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_8:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_4;
  }
  xpc_dictionary_set_data(xdict, "InSurfaceData", bytes, 0x58uLL);
  uint64_t v30 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v30)
  {
    unsigned int v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v28, v30);
  return v30;
}

uint64_t vfbremote_swapWaitWithTimeout()
{
  return 0;
}

uint64_t vfbremote_swapWaitSurfaceTimeout()
{
  return 0;
}

uint64_t vfbremote_getVSyncRunLoopSource()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 136);
}

uint64_t vfbremote_enableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[15]);
  if (DerivedStorage[18])
  {
    uint64_t v7 = 4294955219;
  }
  else
  {
    DerivedStorage[18] = a2;
    DerivedStorage[19] = a3;
    uint64_t v8 = DerivedStorage[2];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    long long v10[2] = __vfbremote_enableVSyncNotifications_block_invoke;
    _OWORD v10[3] = &__block_descriptor_tmp_8_2;
    void v10[4] = DerivedStorage;
    v10[5] = a1;
    dispatch_async(v8, v10);
    uint64_t v7 = 0;
  }
  MEMORY[0x19970E930](DerivedStorage[15]);
  return v7;
}

uint64_t vfbremote_disableVSyncNotifications(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[15]);
  DerivedStorage[18] = 0;
  DerivedStorage[19] = 0;
  CFAllocatorRef v3 = DerivedStorage[2];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __vfbremote_disableVSyncNotifications_block_invoke;
  v5[3] = &__block_descriptor_tmp_9_2;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_async(v3, v5);
  MEMORY[0x19970E930](DerivedStorage[15]);
  return 0;
}

uint64_t vfbremote_getHotPlugRunLoopSource()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t vfbremote_enableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[9]);
  if (DerivedStorage[12])
  {
    uint64_t v7 = 4294955219;
  }
  else
  {
    DerivedStorage[12] = a2;
    DerivedStorage[13] = a3;
    uint64_t v8 = DerivedStorage[2];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    long long v10[2] = __vfbremote_enableHotPlugDetectNotifications_block_invoke;
    _OWORD v10[3] = &__block_descriptor_tmp_10_2;
    void v10[4] = DerivedStorage;
    v10[5] = a1;
    dispatch_async(v8, v10);
    uint64_t v7 = 0;
  }
  MEMORY[0x19970E930](DerivedStorage[9]);
  return v7;
}

uint64_t vfbremote_disableHotPlugDetectNotifications(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[9]);
  DerivedStorage[12] = 0;
  DerivedStorage[13] = 0;
  CFAllocatorRef v3 = DerivedStorage[2];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __vfbremote_disableHotPlugDetectNotifications_block_invoke;
  v5[3] = &__block_descriptor_tmp_11_1;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_async(v3, v5);
  MEMORY[0x19970E930](DerivedStorage[9]);
  return 0;
}

uint64_t vfbremote_getHDCPDownstreamState(uint64_t a1, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  xCFDictionaryRef dict = 0;
  uint64_t v13 = 0;
  size_t length = 0;
  uint64_t v4 = atomic_load(DerivedStorage);
  if (v4)
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (v5 || (uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v5))
    {
      uint64_t v7 = v5;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      data = xpc_dictionary_get_data(xdict, "OutHDCPReply", &length);
      if (data && length == 16)
      {
        uint64_t v7 = 0;
        *a2 = *data;
      }
      else
      {
        uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v7 = 3758097097;
      }
    }
  }
  else
  {
    uint64_t v7 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v4, v7);
  return v7;
}

uint64_t vfbremote_enableMirroring(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (uint64_t)DerivedStorage;
  uint64_t v5 = atomic_load(DerivedStorage);
  if (!v5)
  {
    uint64_t v8 = 3758097111;
    goto LABEL_5;
  }
  MEMORY[0x19970E910](DerivedStorage[4]);
  int v6 = *(_DWORD *)(v4 + 64);
  *(_DWORD *)(v4 + 64) = a2;
  MEMORY[0x19970E930](*(void *)(v4 + 32));
  if (v6 == a2)
  {
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7)
  {
    uint64_t v8 = v7;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_10:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_5;
  }
  xpc_dictionary_set_uint64(0, "InEnable", a2);
  uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v8)
  {
    int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_10;
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v4, v5, v8);
  return v8;
}

uint64_t vfbremote_acquireWritebackSurface(double a1, double a2, uint64_t a3, int a4, uint64_t a5, int a6, IOSurfaceID *a7, uint64_t *a8)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v16 = (uint64_t)DerivedStorage;
  xpc_object_t v35 = 0;
  xCFDictionaryRef dict = 0;
  if (a7) {
    BOOL v17 = a8 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  unsigned int v18 = !v17;
  bytes[0] = a5;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  int v32 = a4;
  int v33 = a6;
  uint64_t v34 = v18;
  uint64_t v19 = atomic_load(DerivedStorage);
  if (v19)
  {
    uint64_t v20 = FigXPCCreateBasicMessage();
    if (v20)
    {
      uint64_t v21 = v20;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      xpc_dictionary_set_data(xdict, "InSurfaceData", bytes, 0x28uLL);
      uint64_t v21 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      char v22 = v18 ^ 1;
      if (v21) {
        char v22 = 1;
      }
      if ((v22 & 1) == 0)
      {
        xpc_object_t value = xpc_dictionary_get_value(v35, "OutSurface");
        if (value && (long long v24 = IOSurfaceLookupFromXPCObject(value)) != 0)
        {
          uint64_t v25 = v24;
          IOSurfaceID ID = IOSurfaceGetID(v24);
          if (ID != xpc_dictionary_get_uint64(v35, "OutSurfaceID"))
          {
            uint64_t v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          MEMORY[0x19970E910](*(void *)(v16 + 32));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v16 + 40), (const void *)ID, v25);
          MEMORY[0x19970E930](*(void *)(v16 + 32));
          *a7 = ID;
          *a8 = xpc_dictionary_get_uint64(v35, "OutSurfaceRefCon");
          CFRelease(v25);
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v21 = 3758097097;
        }
      }
    }
  }
  else
  {
    uint64_t v21 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v16, v19, v21);
  return v21;
}

uint64_t vfbremote_relinquishWritebackSurface(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = (uint64_t)DerivedStorage;
  uint64_t v18 = 0;
  xCFDictionaryRef dict = 0;
  uint64_t bytes = a3;
  unsigned int v16 = a2;
  int v17 = a4;
  uint64_t v9 = atomic_load(DerivedStorage);
  if (!v9)
  {
    uint64_t v11 = 3758097111;
    goto LABEL_6;
  }
  if (a2)
  {
    MEMORY[0x19970E910](DerivedStorage[4]);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v8 + 40), (const void *)a2);
    MEMORY[0x19970E930](*(void *)(v8 + 32));
  }
  uint64_t v10 = FigXPCCreateBasicMessage();
  if (v10)
  {
    uint64_t v11 = v10;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_10:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_6;
  }
  xpc_dictionary_set_data(xdict, "InSurfaceData", &bytes, 0x10uLL);
  uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v11)
  {
    uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    goto LABEL_10;
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v8, v9, v11);
  return v11;
}

uint64_t vfbremote_getHDCPRunLoopSource()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 208);
}

uint64_t vfbremote_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = (uint64_t)DerivedStorage;
  uint64_t v9 = atomic_load(DerivedStorage);
  if (v9)
  {
    MEMORY[0x19970E910](DerivedStorage[24]);
    *(void *)(v8 + 216) = a4;
    *(void *)(v8 + 224) = a5;
    MEMORY[0x19970E930](*(void *)(v8 + 192));
    uint64_t v10 = FigXPCCreateBasicMessage();
    if (v10 || (uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v10))
    {
      uint64_t v12 = v10;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(v8 + 192));
      BOOL v11 = xpc_dictionary_get_BOOL(0, "OutHDCPReady");
      *(unsigned char *)(v8 + 232) = v11;
      if (!v11)
      {
        unsigned int v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(void *)(v8 + 200))
      {
        CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(v8 + 208));
        CFRunLoopWakeUp(*(CFRunLoopRef *)(v8 + 200));
      }
      MEMORY[0x19970E930](*(void *)(v8 + 192));
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v8, v9, v12);
  return v12;
}

uint64_t vfbremote_HDCPGetReply(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  xpc_object_t v15 = 0;
  xCFDictionaryRef dict = 0;
  size_t length = 0;
  uint64_t v6 = atomic_load(DerivedStorage);
  if (v6)
  {
    uint64_t v7 = FigXPCCreateBasicMessage();
    if (v7
      || (xpc_dictionary_set_uint64(xdict, "InHDCPReplySize", *a3),
          uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          v7))
    {
      uint64_t v10 = v7;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      data = xpc_dictionary_get_data(v15, "OutHDCPReply", &length);
      if (data && (size_t v9 = length, length <= *a3))
      {
        memcpy(a2, data, length);
        uint64_t v10 = 0;
        *a3 = v9;
      }
      else
      {
        uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v10 = 3758097097;
      }
    }
  }
  else
  {
    uint64_t v10 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v6, v10);
  return v10;
}

uint64_t __vfbremote_enableVSyncNotifications_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 184) = 1;
  return vfbremote_setVSyncNotifications();
}

uint64_t vfbremote_setVSyncNotifications()
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  if (atomic_load(DerivedStorage))
  {
    uint64_t v2 = DerivedStorage;
    if (FigXPCCreateBasicMessage()
      || (xpc_dictionary_set_uint64(0, "InEnable", *((unsigned __int8 *)v2 + 184)),
          FigXPCRemoteClientSendSyncMessageCreatingReply()))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t __vfbremote_disableVSyncNotifications_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 184) = 0;
  return vfbremote_setVSyncNotifications();
}

uint64_t __vfbremote_enableHotPlugDetectNotifications_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 113) = 1;
  return vfbremote_setHotPlugDetectNotifications(v1);
}

uint64_t vfbremote_setHotPlugDetectNotifications(uint64_t a1)
{
  uint64_t DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  if (atomic_load(DerivedStorage))
  {
    uint64_t v4 = DerivedStorage;
    if (FigXPCCreateBasicMessage()
      || (xpc_dictionary_set_uint64(0, "InEnable", *((unsigned __int8 *)v4 + 113)),
          FigXPCRemoteClientSendSyncMessageCreatingReply()))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else if (*((unsigned char *)v4 + 113))
    {
      vfbremote_handleHotPlugNotification(a1, 0);
    }
  }
  FigXPCRelease();
  return FigXPCRelease();
}

void vfbremote_handleHotPlugNotification(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  *(unsigned char *)(DerivedStorage + 112) = xpc_dictionary_get_uint64(a2, "OutIsActive") != 0;
  if (*(void *)(DerivedStorage + 80))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(DerivedStorage + 88));
    CFRunLoopWakeUp(*(CFRunLoopRef *)(DerivedStorage + 80));
  }

  JUMPOUT(0x19970E930);
}

uint64_t __vfbremote_disableHotPlugDetectNotifications_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(v1 + 113) = 0;
  return vfbremote_setHotPlugDetectNotifications(v2);
}

uint64_t __vfbremote_connect_block_invoke(uint64_t a1)
{
  return vfbremote_connect(*(void *)(a1 + 32));
}

void __vfbremote_getRemoteClient_block_invoke()
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"FVFBServerDied");
  FigCFDictionarySetInt32();
  int v1 = FigXPCRemoteClientCreate();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void vfbremote_handleDeadConnection(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vfbremote_handleDeadConnection_block_invoke;
  block[3] = &__block_descriptor_tmp_19_0;
  block[4] = a1;
  dispatch_async(v2, block);
}

uint64_t vfbremote_handleServerMessage()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (!OpCode) {
    return 3758097097;
  }
  uint64_t v1 = OpCode;
  LODWORD(length) = 0;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v1;
}

void __vfbremote_handleDeadConnection_block_invoke(uint64_t a1)
{
}

uint64_t FigShared_SetDiskCacheParams(const __CFString *cf, int64_t a2, int64_t a3, int a4)
{
  CFStringRef v7 = cf;
  CFTypeRef v12 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v7);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v10 = FigSharedRemote_SetDiskCacheParams(v7, a2, a3, a4);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v9 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v7 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v9 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v9 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v12);
    if (!v9)
    {
      uint64_t v10 = FigDiskCacheRepositorySetTarget((uint64_t)v12, a2, a3, a4);
LABEL_13:
      uint64_t v9 = v10;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v9;
}

uint64_t fs_CreateDirectoryAtPath(CFStringRef URLString)
{
  CFURLRef v1 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLString, 0);
  if (!v1) {
    return 4294954669;
  }
  CFURLRef v2 = v1;
  uint64_t v3 = FigCFURLCreateDirectory();
  CFRelease(v2);
  return v3;
}

uint64_t fs_CopyRepositoryByParent(const __CFString *a1, int a2, void **a3)
{
  MEMORY[0x19970E910](sDiskCacheLock);
  uint64_t v6 = (void *)CFDictionaryGetValue((CFDictionaryRef)sDiskCacheList, a1);
  xpc_object_t value = v6;
  if (v6)
  {
    CFStringRef v7 = v6;
    if (!a2 || FigDiskCacheRepositoryExists((uint64_t)v6))
    {
      CFRetain(v7);
      uint64_t v8 = 0;
      goto LABEL_10;
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)sDiskCacheList, a1);
    xpc_object_t value = 0;
  }
  CFURLRef v9 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, 0);
  if (v9)
  {
    CFURLRef v10 = v9;
    uint64_t v8 = FigDiskCacheRepositoryCreate(v9, 52428800, 41943040, (uint64_t *)&value);
    CFRelease(v10);
    if (!v8) {
      CFDictionarySetValue((CFMutableDictionaryRef)sDiskCacheList, a1, value);
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
LABEL_10:
  MEMORY[0x19970E930](sDiskCacheLock);
  *a3 = value;
  return v8;
}

uint64_t FigShared_CheckIntoAndOutOfDiskCache(const __CFString *cf, const __CFString *a2, const void *a3, const void **a4)
{
  CFStringRef v7 = cf;
  CFTypeRef v12 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v7);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v10 = FigSharedRemote_CheckIntoAndOutOfDiskCache(v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v9 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v7 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v9 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v9 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v12);
    if (!v9)
    {
      uint64_t v10 = FigDiskCacheRepositoryCheckInAndOut((uint64_t)v12, a2, a3, a4);
LABEL_13:
      uint64_t v9 = v10;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v9;
}

uint64_t FigShared_DeleteFromDiskCache(const __CFString *cf, const __CFString *a2)
{
  CFStringRef v3 = cf;
  CFTypeRef v8 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v3);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v6 = FigSharedRemote_DeleteFromDiskCache(v3, (uint64_t)a2);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v5 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v3 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v5 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v5 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v8);
    if (!v5)
    {
      uint64_t v6 = FigDiskCacheRepositoryDelete((uint64_t)v8, a2);
LABEL_13:
      uint64_t v5 = v6;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v5;
}

uint64_t FigShared_ReserveDiskCacheBacking(const __CFString *a1, const void *a2, int64_t a3)
{
  CFTypeRef v9 = 0;
  CFTypeRef cf = a1;
  if (a1)
  {
    CFStringRef v5 = a1;
    CFRetain(a1);
    if (sDiskCacheIsRemote) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v7 = FigSharedRemote_ReserveDiskCacheBacking(v5, (uint64_t)a2, a3);
    goto LABEL_12;
  }
  if (sDiskCacheIsRemote != 1)
  {
    CFStringRef v5 = 0;
    goto LABEL_11;
  }
  uint64_t v6 = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cf, 0);
  if (v6) {
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v5 = (const __CFString *)cf;
    goto LABEL_11;
  }
LABEL_3:
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v6 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v6 = fs_CopyRepositoryByParent((const __CFString *)cf, 0, (void **)&v9);
    if (!v6)
    {
      uint64_t v7 = FigDiskCacheRepositoryReserveBacking((uint64_t)v9, a2, a3);
LABEL_12:
      uint64_t v6 = v7;
    }
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v6;
}

uint64_t FigShared_CopyDiskCacheCheckedInIDs(const __CFString *cf, CFMutableArrayRef *a2)
{
  CFStringRef v3 = cf;
  CFTypeRef v8 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v3);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v6 = FigSharedRemote_CopyDiskCacheCheckedInIDs(v3, (uint64_t)a2);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v5 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v3 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v5 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v5 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v8);
    if (!v5)
    {
      uint64_t v6 = FigDiskCacheRepositoryCopyCheckedInIDs((uint64_t)v8, a2);
LABEL_13:
      uint64_t v5 = v6;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v5;
}

uint64_t FigShared_GetCacheFileSize(const __CFString *cf, uint64_t a2, int64_t *a3)
{
  CFStringRef v5 = cf;
  CFTypeRef v10 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v5);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t CacheFileSize = FigSharedRemote_GetCacheFileSize(v5, a2, a3);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v7 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v5 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v7 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v7 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v10);
    if (!v7)
    {
      uint64_t CacheFileSize = FigDiskCacheRepositoryGetFileSize((uint64_t)v10, a2, (uint64_t)a3);
LABEL_13:
      uint64_t v7 = CacheFileSize;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v7;
}

uint64_t FigShared_CopyCacheProperty(const __CFString *cf, const void *a2, const void *a3, const __CFAllocator *a4, CFNumberRef *a5)
{
  CFStringRef v9 = cf;
  CFTypeRef v14 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v9);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v12 = FigSharedRemote_CopyCacheProperty(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v11 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v9 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v11 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v11 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v14);
    if (!v11)
    {
      uint64_t v12 = FigDiskCacheRepositoryCopyProperty((uint64_t)v14, a2, a3, a4, a5);
LABEL_13:
      uint64_t v11 = v12;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v11;
}

uint64_t FigShared_CopyCacheLastModifiedDate(const __CFString *a1, const void *a2, CFNumberRef *a3)
{
  return FigShared_CopyCacheProperty(a1, a2, @"FigDiskCacheRepository_LastModifiedDate", (const __CFAllocator *)*MEMORY[0x1E4F1CF80], a3);
}

uint64_t FigShared_MakeRoomInDiskCache(const __CFString *cf, int a2, int64_t *a3)
{
  CFStringRef v5 = cf;
  CFTypeRef v10 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v5);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t RoomInDiskCache = FigSharedRemote_MakeRoomInDiskCache(v5, a2, a3);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v7 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v5 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v7 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v7 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v10);
    if (!v7)
    {
      uint64_t RoomInDiskCache = FigDiskCacheRepositoryMakeRoom((uint64_t)v10, a2, a3);
LABEL_13:
      uint64_t v7 = RoomInDiskCache;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v7;
}

uint64_t FigShared_DisableRemoteDiskCache()
{
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    int64_t v1 = 0;
    sDiskCacheIsRemote = 1;
    return FigShared_CopyDiskCacheParams(0, &v1, 0, 0, 0, 0);
  }
  return result;
}

void FigShared_EnableRemoteDiskCache()
{
  sDiskCacheIsRemote = 0;
}

void sub_194176774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_194176AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_194176C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_194176E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_194177078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_194177624(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id _animationByTransformingValues(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = (id)[a1 copy];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = [v3 fromValue];
    uint64_t v5 = [v3 toValue];
    uint64_t v6 = [v3 byValue];
    if (v4) {
      objc_msgSend(v3, "setFromValue:", (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4));
    }
    if (v5) {
      objc_msgSend(v3, "setToValue:", (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v5));
    }
    if (v6) {
      objc_msgSend(v3, "setByValue:", (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v6));
    }
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v7 = (void *)[v3 values];
      if (v7)
      {
        CFTypeRef v8 = v7;
        CFStringRef v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v7, "count"));
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v16;
          do
          {
            uint64_t v13 = 0;
            do
            {
              if (*(void *)v16 != v12) {
                objc_enumerationMutation(v8);
              }
              objc_msgSend(v9, "addObject:", (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(*((void *)&v15 + 1) + 8 * v13++)));
            }
            while (v11 != v13);
            uint64_t v11 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
          }
          while (v11);
        }
        [v3 setValues:v9];
      }
    }
  }
  return v3;
}

uint64_t FigSharedPlayerCreateWithOptions(const __CFAllocator *a1, int a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  __int16 v6 = a2;
  if ((a2 & 0x40) != 0)
  {
    if ((a2 & 0x200) != 0)
    {
      CFTypeRef cf = 0;
      uint64_t v11 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFFFBF, a3, &cf);
      if (v11) {
        return v11;
      }
      uint64_t v12 = FigPlayerAsyncCreateWithOptions((uint64_t)a1, cf, a3, a4);
      goto LABEL_56;
    }
    unsigned int v9 = a2 & 0xFFFFFFBF;
    return FigPlayerAsyncCreateWithEngineTopologyAndOptions((uint64_t)a1, v9, a3, a4);
  }
  else
  {
    if ((a2 & 0x20) == 0)
    {
      if ((a2 & 0x400) != 0)
      {
        CFTypeRef cf = 0;
        uint64_t v11 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFFBFF, a3, &cf);
        if (v11) {
          return v11;
        }
        uint64_t v12 = FigPlayerCoordinatorCreateWithOptions((uint64_t)a1, cf, a3, a4);
      }
      else
      {
        if ((a2 & 0x800) == 0)
        {
          if ((a2 & 0x10) == 0)
          {
            switch(a2 & 0xF)
            {
              case 0:
                return FigSignalErrorAt();
              case 4:
                uint64_t v11 = 0;
                *a4 = 0;
                return v11;
              case 5:
                return FigPlayerStreamCreateWithOptions();
              case 6:
                if (!sharedplayer_enableOverlapPlayer())
                {
                  return FigPlayerSurrogateCreateWithOptions(a1, a3, a4);
                }
                CFTypeRef v21 = 0;
                CFTypeRef cf = 0;
                uint64_t v11 = FigPlayerSurrogateCreateWithOptions(a1, a3, &cf);
                if (!v11)
                {
                  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  CFDictionaryRef Value = CFDictionaryGetValue(a3, @"LoggingIdentifier");
                  long long v17 = CFDictionaryGetValue(a3, @"PlayerName");
                  CFStringRef v18 = CFStringCreateWithFormat(v14, 0, @"%@.2", Value);
                  CFStringRef v19 = CFStringCreateWithFormat(v14, 0, @"%@.2", v17);
                  CFDictionarySetValue(MutableCopy, @"LoggingIdentifier", v18);
                  CFDictionarySetValue(MutableCopy, @"PlayerName", v19);
                  uint64_t v11 = FigPlayerSurrogateCreateWithOptions(a1, MutableCopy, &v21);
                  if (v18) {
                    CFRelease(v18);
                  }
                  if (MutableCopy) {
                    CFRelease(MutableCopy);
                  }
                  if (v19) {
                    CFRelease(v19);
                  }
                  if (!v11) {
                    uint64_t v11 = FigPlayerOverlapCreateWithOptions(a1, cf, v21, a3, a4);
                  }
                }
                if (cf) {
                  CFRelease(cf);
                }
                CFTypeRef v20 = v21;
                if (v21) {
                  goto LABEL_57;
                }
                break;
              default:
                return FigPlayerFileCreateWithOptions((uint64_t)a1, (uint64_t)a3, a4);
            }
            return v11;
          }
          CFTypeRef cf = 0;
          uint64_t v11 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFFFEF, a3, &cf);
          if (!v11)
          {
            CFTypeRef v13 = cf;
            if ((v6 & 0x100) == 0 && cf)
            {
              CFTypeRef v21 = 0;
              if (FigPlayerAirPlayCreateWithOptions(a1, cf, a3, &v21))
              {
                FigSignalErrorAt();
                CFTypeRef v13 = cf;
              }
              else
              {
                if (cf) {
                  CFRelease(cf);
                }
                CFTypeRef v13 = v21;
                CFTypeRef cf = v21;
              }
            }
            uint64_t v12 = FigPlayerCentralCreateWithOptions((uint64_t)a1, (uint64_t)v13, (uint64_t)a3, (uint64_t)a4);
            goto LABEL_56;
          }
          return v11;
        }
        CFTypeRef cf = 0;
        uint64_t v11 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFF7FF, a3, &cf);
        if (v11) {
          return v11;
        }
        uint64_t v12 = FigPlayerCelesteCreateWithOptions((uint64_t)a1, (uint64_t)cf, (uint64_t)a3, (uint64_t)a4);
      }
LABEL_56:
      uint64_t v11 = v12;
      CFTypeRef v20 = cf;
      if (cf) {
LABEL_57:
      }
        CFRelease(v20);
      return v11;
    }
    unsigned int v10 = a2 & 0xFFFFFFDF;
    return FigPlayerRemoteCreateWithOptions(a1, v10, a3, a4);
  }
}

uint64_t sharedplayer_enableOverlapPlayer()
{
  uint64_t v0 = *MEMORY[0x1E4F1CFD0];
  if (v0 == FigCFDictionaryGetValue()) {
    return 1;
  }
  else {
    return _os_feature_enabled_impl();
  }
}

uint64_t subtitleRenderingNeedsLayoutNotification(uint64_t a1, void *a2)
{
  return [a2 handleNeedsLayoutNotification];
}

const void *getContentIDDo(void **a1)
{
  uint64_t result = CFDictionaryGetValue((CFDictionaryRef)(*a1)[7], (const void *)*MEMORY[0x1E4F1F880]);
  *a1[1] = result;
  return result;
}

void setContentDo(uint64_t *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v2 = *a1;
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)a1[1]);
  if (!MutableCopy) {
    return;
  }
  CFMutableDictionaryRef v4 = MutableCopy;
  uint64_t v5 = *(const void **)(v2 + 56);
  *(void *)(v2 + 56) = MutableCopy;
  CFRetain(MutableCopy);
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(v4);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 56), @"kFigSubtitleRenderer_RegionCues");
  if (Value)
  {
    uint64_t v7 = CFDictionaryCreateMutableCopy(v1, 0, Value);
    if (v7)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 64));
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        for (CFIndex i = 0; i < v9; ++i)
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 64), i);
          uint64_t v12 = (const void *)[ValueAtIndex getContentID];
          if (v12 && (CFTypeRef v13 = v12, CFDictionaryGetValue(v7, v12)))
          {
            CFDictionaryRemoveValue(v7, v13);
          }
          else
          {
            [ValueAtIndex removeFromSuperlayer];
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 64), i);
            --v9;
            --i;
          }
        }
      }
      size_t v14 = CFDictionaryGetCount(v7);
      if (v14)
      {
        int64_t v15 = v14;
        long long v16 = (const void **)malloc_type_calloc(v14, 8uLL, 0xC0040B8AA526DuLL);
        long long v17 = (const void **)malloc_type_calloc(v15, 8uLL, 0xC0040B8AA526DuLL);
        CFDictionaryGetKeysAndValues(v7, v16, v17);
        if (v15 < 1)
        {
LABEL_18:
          *(_DWORD *)(v2 + 72) = 0;
        }
        else
        {
          uint64_t v18 = 0;
          while (1)
          {
            CFStringRef v19 = objc_alloc_init(FigSubtitleWebVTTCueCALayer);
            if (!v19) {
              break;
            }
            CFTypeRef v20 = v19;
            [*(id *)v2 addSublayer:v19];
            CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 64), v20);
            [(FigSubtitleWebVTTCueCALayer *)v20 setRenderer:*(void *)(v2 + 16)];
            [*(id *)v2 bounds];
            -[FigSubtitleWebVTTCueCALayer setViewport:](v20, "setViewport:");
            [(FigSubtitleWebVTTCueCALayer *)v20 setContent:v17[v18]];

            if (v15 == ++v18) {
              goto LABEL_18;
            }
          }
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v16 = 0;
  long long v17 = 0;
LABEL_19:
  free(v16);
  free(v17);
  if (v7)
  {
    CFRelease(v7);
  }
}

void updateRegionDisplay(id *a1)
{
  id v2 = *a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __updateRegionDisplay_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

void setRendererDo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  CFAllocatorRef v1 = (const void *)a1[1];
  id v3 = *(const void **)(v2 + 16);
  *(void *)(v2 + 16) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

__n128 setViewportDo(uint64_t *a1)
{
  result.n128_u64[0] = a1[3];
  if (result.n128_f64[0] >= 0.0)
  {
    result.n128_u64[0] = a1[4];
    if (result.n128_f64[0] >= 0.0)
    {
      uint64_t v2 = *a1;
      __n128 result = *(__n128 *)(a1 + 1);
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 3);
      *(__n128 *)(v2 + 24) = result;
      *(_DWORD *)(v2 + 72) = 1;
    }
  }
  return result;
}

void sub_194178F88(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __updateRegionDisplay_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 32);
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [*v2 setNeedsLayout];
  [*v2 setNeedsDisplay];
  [MEMORY[0x1E4F39CF8] commit];
  id v3 = **(void ***)(a1 + 32);
}

uint64_t FigVisualContextGetClassID()
{
  if (FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce != -1) {
    dispatch_once_f(&FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce, 0, (dispatch_function_t)RegisterFigVisualContextBaseType);
  }
  return sFigVisualContextClassID;
}

uint64_t RegisterFigVisualContextBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVisualContextGetTypeID()
{
  if (FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce != -1) {
    dispatch_once_f(&FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce, 0, (dispatch_function_t)RegisterFigVisualContextBaseType);
  }

  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigVisualContextRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void FigVisualContextRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigVisualContextGetEarliestSequentialImageTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }
  long long v12 = *MEMORY[0x1E4F1F9F8];
  uint64_t v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  return v10(a1, a2, &v12, a3, a4);
}

uint64_t FigCreateNullPixelBuffer(const __CFAllocator *a1, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t v3 = CVPixelBufferCreate(a1, 1uLL, 1uLL, 0x20u, 0, pixelBufferOut);
  if (!v3) {
    CVBufferSetAttachment(*pixelBufferOut, @"QTNull", @"QTNull", kCVAttachmentMode_ShouldNotPropagate);
  }
  return v3;
}

BOOL FigIsNullPixelBuffer(__CVBuffer *a1)
{
  CFTypeRef v2 = CVBufferCopyAttachment(a1, @"QTNull", 0);
  CFTypeRef v3 = v2;
  if (v2) {
    CFRelease(v2);
  }
  if (a1) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  return !v4;
}

CFStringRef VisualContextCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVisualContext %p]", a1);
}

uint64_t FigCreateMediaSelectionArrayFromFormatReaderProperties(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  CFDictionaryRef v239 = 0;
  CFArrayRef v240 = 0;
  v237 = 0;
  __int16 v238 = 0;
  char v235 = 0;
  CFDictionaryRef v236 = 0;
  unsigned int v234 = 0;
  long long v232 = 0;
  CMTimeEpoch v233 = 0;
  CFTypeRef v230 = 0;
  CFTypeRef v231 = 0;
  unsigned int valuePtr = 0;
  if (!a1)
  {
    uint64_t MediaSelectionOptionDictionary = FigSignalErrorAt();
    ConcatenationOfTwoArrays = 0;
    uint64_t v18 = 0;
    long long v17 = 0;
LABEL_337:
    CFNumberRef v150 = 0;
LABEL_338:
    CFNumberRef v151 = 0;
    goto LABEL_339;
  }
  uint64_t v6 = a1;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFArray **))(v10 + 48);
  if (v11) {
    v11(FigBaseObject, @"AlternateGroupArray", v7, &v240);
  }
  uint64_t v12 = FigFormatReaderGetFigBaseObject(v6);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int64_t v15 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFDictionary **))(v14 + 48);
  if (v15) {
    v15(v12, @"TrackReferenceDictionary", v7, &v239);
  }
  if (v239)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v239, @"forc");
    CFArrayRef v213 = (const __CFArray *)CFDictionaryGetValue(v239, @"folw");
    CFArrayRef v227 = (const __CFArray *)CFDictionaryGetValue(v239, @"fall");
  }
  else
  {
    CFArrayRef v227 = 0;
    CFArrayRef v213 = 0;
    CFArrayRef Value = 0;
  }
  uint64_t v225 = v6;
  if (v240)
  {
    CFIndex Count = CFArrayGetCount(v240);
    if (Count >= 1)
    {
      CFIndex v16 = 0;
      int v208 = 0;
      long long v17 = 0;
      uint64_t v18 = 0;
      CFIndex v19 = 0;
      CMTimeValue v191 = (void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v192 = a3;
      uint64_t v201 = -1;
      uint64_t v207 = -1;
      uint64_t v226 = (uint64_t)v7;
      CMTimeValue v196 = a4;
      while (1)
      {
        CFIndex v197 = v19;
        double v199 = v17;
        long long v200 = v18;
        CFIndex v205 = v16;
        CFArrayRef theArray = (const __CFArray *)CFArrayGetValueAtIndex(v240, v16);
        CFIndex v20 = CFArrayGetCount(theArray);
        if (v20 < 1)
        {
          CFMutableArrayRef Mutable = 0;
          uint64_t v216 = 0;
          uint64_t v209 = 0;
          uint64_t v204 = 0;
          goto LABEL_296;
        }
        uint64_t v204 = 0;
        uint64_t v209 = 0;
        uint64_t v216 = 0;
        unsigned __int8 v217 = 0;
        char v21 = 0;
        CFIndex v22 = 0;
        CFMutableArrayRef Mutable = 0;
        unsigned __int8 v23 = 0;
        CFIndex v211 = v20;
        do
        {
          int v228 = 0;
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v22);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
          uint64_t v25 = valuePtr;
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v26) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v27 + 56);
          if (!v28)
          {
LABEL_335:
            uint64_t MediaSelectionOptionDictionary = 4294954514;
LABEL_336:
            a4 = v196;
            long long v17 = v199;
            uint64_t v18 = v200;
            ConcatenationOfTwoArrays = Mutable;
            goto LABEL_337;
          }
          uint64_t v29 = v28(v6, v25, &v231, &v228);
          if (v29) {
            goto LABEL_486;
          }
          if (v21)
          {
            uint64_t v30 = v225;
          }
          else
          {
            uint64_t v31 = FigTrackReaderGetFigBaseObject(v231);
            uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v32) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = 0;
            }
            uint64_t v34 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v33 + 48);
            if (!v34) {
              goto LABEL_335;
            }
            uint64_t v29 = v34(v31, @"AlternateGroupID", v7, &v237);
            if (v29) {
              goto LABEL_486;
            }
            uint64_t v30 = v225;
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
            if (!Mutable)
            {
              uint64_t MediaSelectionOptionDictionary = FigSignalErrorAt();
              ConcatenationOfTwoArrays = 0;
              a4 = v196;
              long long v17 = v199;
              uint64_t v18 = v200;
              goto LABEL_337;
            }
          }
          FigMediaCharacteristicsGetMajorIntrinsicCharacteristicForMediaType(v228);
          CFIndex v221 = v22;
          if (a2)
          {
            CFNumberRef v223 = ValueAtIndex;
            if (v227)
            {
              unsigned int v35 = valuePtr;
              CFIndex v36 = CFArrayGetCount(v227);
              if (v36 >= 2)
              {
                CFIndex v37 = v36;
                CFIndex v38 = 1;
                while (1)
                {
                  CFNumberRef v39 = (const __CFNumber *)CFArrayGetValueAtIndex(v227, v38 - 1);
                  if (v39)
                  {
                    CFNumberRef v40 = v39;
                    CFTypeID v41 = CFGetTypeID(v39);
                    if (v41 == CFNumberGetTypeID()) {
                      break;
                    }
                  }
LABEL_54:
                  v38 += 2;
                  if (v38 >= v37) {
                    goto LABEL_61;
                  }
                }
                LODWORD(v248) = 0;
                values = 0;
                v250[0] = 0;
                CFNumberGetValue(v40, kCFNumberSInt32Type, &v248);
                uint64_t v42 = v248;
                uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v43) {
                  uint64_t v44 = v43;
                }
                else {
                  uint64_t v44 = 0;
                }
                Float64 v45 = *(unsigned int (**)(uint64_t, uint64_t, int **, void))(v44 + 56);
                if (v45 && !v45(v30, v42, v250, 0))
                {
                  uint64_t v49 = FigTrackReaderGetFigBaseObject(v250[0]);
                  uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v51 = v50 ? v50 : 0;
                  CFAllocatorRef v52 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v51 + 48);
                  if (v52) {
                    v52(v49, @"AlternateGroupID", v7, &values);
                  }
                }
                if (!FigCFEqual()) {
                  goto LABEL_48;
                }
                CFNumberRef v46 = (const __CFNumber *)CFArrayGetValueAtIndex(v227, v38);
                CFNumberRef v47 = v46;
                if (!v46) {
                  goto LABEL_49;
                }
                CFTypeID v48 = CFGetTypeID(v46);
                if (v48 == CFNumberGetTypeID())
                {
                  displayFlagsOut[0] = 0;
                  CFNumberGetValue(v47, kCFNumberSInt32Type, displayFlagsOut);
                  LODWORD(v47) = displayFlagsOut[0] == v35;
                }
                else
                {
LABEL_48:
                  LODWORD(v47) = 0;
                }
LABEL_49:
                if (v250[0]) {
                  CFRelease(v250[0]);
                }
                if (values) {
                  CFRelease(values);
                }
                if (v47)
                {
                  CFMutableArrayRef v57 = 0;
                  goto LABEL_267;
                }
                goto LABEL_54;
              }
            }
LABEL_61:
            int v53 = FigCFEqual();
            values = v223;
            CFArrayRef v54 = CFArrayCreate(v7, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
            if (v54)
            {
              CFArrayRef v55 = v54;
              CFMutableDictionaryRef MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
              if (MutableCopy)
              {
                CFMutableArrayRef v57 = MutableCopy;
                AppendFallbacksOfTracks(v55, v227, MutableCopy);
                if (CFArrayGetCount(v57) == 1)
                {
                  CFRelease(v57);
                  goto LABEL_65;
                }
                CFIndex v59 = CFArrayGetCount(v57);
                if (v59 >= 1)
                {
                  CFIndex v60 = v59;
                  CFIndex v61 = 0;
                  unsigned __int8 v62 = 0;
                  unsigned __int8 v23 = 0;
                  while (2)
                  {
                    LODWORD(v245) = 0;
                    CFDictionaryRef v248 = 0;
                    values = (void *)CFArrayGetValueAtIndex(v57, v61);
                    CFNumberGetValue((CFNumberRef)values, kCFNumberSInt32Type, &v245);
                    uint64_t v63 = v245;
                    uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v64) {
                      uint64_t v65 = v64;
                    }
                    else {
                      uint64_t v65 = 0;
                    }
                    CMTimeValue v66 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef *, void))(v65 + 56);
                    if (v66) {
                      v66(v30, v63, &v248, 0);
                    }
                    if (!v248) {
                      goto LABEL_94;
                    }
                    char IsEnabled = TrackIsEnabled((uint64_t)v248);
                    CFDictionaryRef v68 = v248;
                    if (v53)
                    {
                      v250[0] = 0;
                      uint64_t v69 = FigTrackReaderGetFigBaseObject(v248);
                      uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v70) {
                        uint64_t v71 = v70;
                      }
                      else {
                        uint64_t v71 = 0;
                      }
                      CFIndex v72 = *(void (**)(uint64_t, __CFString *, uint64_t, int **))(v71 + 48);
                      if (!v72) {
                        goto LABEL_88;
                      }
                      v72(v69, @"TrackFormatDescriptionArray", v226, v250);
                      if (!v250[0])
                      {
                        char v77 = 0;
                        goto LABEL_92;
                      }
                      CFIndex v73 = CFArrayGetCount((CFArrayRef)v250[0]);
                      if (v73 < 1)
                      {
LABEL_88:
                        char v77 = 0;
                        goto LABEL_89;
                      }
                      CFIndex v74 = v73;
                      CFIndex v75 = 0;
                      while (1)
                      {
                        uint64_t v76 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)v250[0], v75);
                        displayFlagsOut[0] = 0;
                        if (!CMTextFormatDescriptionGetDisplayFlags(v76, displayFlagsOut)) {
                          break;
                        }
                        if (v74 == ++v75)
                        {
                          char v77 = 0;
                          goto LABEL_105;
                        }
                      }
                      char v77 = 1;
LABEL_105:
                      uint64_t v30 = v225;
LABEL_89:
                      if (v250[0]) {
                        CFRelease(v250[0]);
                      }
LABEL_92:
                      v62 |= v77;
                      CFDictionaryRef v68 = v248;
                      CFAllocatorRef v7 = (const __CFAllocator *)v226;
                    }
                    v23 |= IsEnabled;
                    CFRelease(v68);
LABEL_94:
                    if (v62) {
                      BOOL v78 = 1;
                    }
                    else {
                      BOOL v78 = v53 == 0;
                    }
                    if (v78 && v23 != 0) {
                      goto LABEL_107;
                    }
                    if (++v61 == v60) {
                      goto LABEL_107;
                    }
                    continue;
                  }
                }
                unsigned __int8 v23 = 0;
                unsigned __int8 v62 = 0;
LABEL_107:
                CFRelease(v55);
                if (v53) {
                  unsigned __int8 v58 = v62;
                }
                else {
                  unsigned __int8 v58 = 0;
                }
LABEL_110:
                CFNumberRef ValueAtIndex = v223;
                if (v217)
                {
                  unsigned __int8 v23 = 0;
                }
                else
                {
                  unsigned __int8 v217 = v23;
                  if (!v57)
                  {
LABEL_113:
                    unsigned __int8 v23 = TrackIsEnabled((uint64_t)v231);
                    CFMutableArrayRef v57 = 0;
                    unsigned __int8 v217 = v23;
                    goto LABEL_114;
                  }
                }
                goto LABEL_114;
              }
              FigSignalErrorAt();
LABEL_65:
              CFRelease(v55);
            }
            else
            {
              FigSignalErrorAt();
            }
            unsigned __int8 v58 = 0;
            CFMutableArrayRef v57 = 0;
            goto LABEL_110;
          }
          unsigned __int8 v58 = 0;
          if (!v217) {
            goto LABEL_113;
          }
          CFMutableArrayRef v57 = 0;
          unsigned __int8 v23 = 0;
LABEL_114:
          if (v228 != 1936684398)
          {
            if (v228 == 1935832172)
            {
              uint64_t v29 = AddOptionsForSubtitleTrack((uint64_t)v231, ValueAtIndex, Value, v213, v23, v57, Mutable);
              if (!v29) {
                goto LABEL_267;
              }
LABEL_486:
              uint64_t MediaSelectionOptionDictionary = v29;
            }
            else
            {
              v250[0] = 0;
              int v135 = v208;
              if (v228 == 1668047728) {
                int v135 = 1;
              }
              int v208 = v135;
              uint64_t v136 = CopyReferencedTrackIDs(ValueAtIndex, v213, (__CFArray **)v250);
              if (v136)
              {
                uint64_t MediaSelectionOptionDictionary = v136;
              }
              else
              {
                uint64_t MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary((uint64_t)v231, ValueAtIndex, 0, 0, v228, v23, v58, 0, (uint64_t)v250[0], v57, 0, &v235);
                if (v250[0]) {
                  CFRelease(v250[0]);
                }
                if (!MediaSelectionOptionDictionary)
                {
                  CFArrayAppendValue(Mutable, v235);
                  if (v235)
                  {
                    CFRelease(v235);
                    char v235 = 0;
                  }
                  goto LABEL_267;
                }
              }
              if (v57) {
                CFRelease(v57);
              }
            }
            goto LABEL_336;
          }
          uint64_t v80 = (uint64_t)v231;
          CFArrayRef v241 = 0;
          uint64_t v81 = CopyAudioCompatibleCompositionPresetArrayOfTrack((uint64_t)v231, (CFIndex *)&v241);
          CFArrayRef v82 = v241;
          if (v81)
          {
            uint64_t MediaSelectionOptionDictionary = v81;
            if (v241) {
              goto LABEL_265;
            }
            goto LABEL_266;
          }
          v244 = 0;
          uint64_t v245 = 0;
          v243 = 0;
          uint64_t v83 = CopyReferencedTrackIDs(ValueAtIndex, v213, &v245);
          if (v83) {
            goto LABEL_288;
          }
          if (!v82 || (CFIndex v84 = CFArrayGetCount(v82)) == 0)
          {
            uint64_t MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary(v80, ValueAtIndex, 0, 0, 1936684398, v23, 0, 0, (uint64_t)v245, v57, 0, &v244);
            if (!MediaSelectionOptionDictionary) {
              CFArrayAppendValue(Mutable, v244);
            }
            goto LABEL_251;
          }
          if (v84 < 1)
          {
            CFTypeRef cf = 0;
            CMTimeValue v220 = 0;
            CFMutableArrayRef v129 = 0;
            uint64_t MediaSelectionOptionDictionary = 0;
            goto LABEL_252;
          }
          uint64_t v85 = 0;
          CFNumberRef v224 = ValueAtIndex;
          uint64_t v194 = v80;
          CFIndex v193 = v84;
          while (1)
          {
            FigCFArrayGetValueAtIndex();
            uint64_t v242 = -1;
            DictionaryCFArrayRef Value = FigCFDictionaryGetDictionaryValue();
            if (!DictionaryValue || (NumberCFArrayRef Value = FigCFDictionaryGetNumberValue()) == 0)
            {
              uint64_t v83 = FigSignalErrorAt();
LABEL_288:
              uint64_t MediaSelectionOptionDictionary = v83;
LABEL_251:
              CFTypeRef cf = 0;
              CMTimeValue v220 = 0;
              CFMutableArrayRef v129 = 0;
              goto LABEL_252;
            }
            CFNumberRef number = (const __CFNumber *)NumberValue;
            uint64_t v203 = v85;
            StringCFArrayRef Value = (__CFString *)FigCFDictionaryGetStringValue();
            CFStringRef v88 = StringValue ? StringValue : @"und";
            v250[0] = 0;
            if (v245)
            {
              CFIndex v89 = CFArrayGetCount(v245);
              uint64_t v90 = v225;
              if (v89 >= 1) {
                break;
              }
            }
            CFMutableArrayRef v218 = 0;
LABEL_145:
            uint64_t v99 = FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription((uint64_t)v7, DictionaryValue, &v243);
            if (v99)
            {
              uint64_t MediaSelectionOptionDictionary = v99;
              CFTypeRef cf = 0;
              CMTimeValue v220 = 0;
              CFMutableArrayRef v129 = v218;
              goto LABEL_252;
            }
            CFArrayRef v212 = v243;
            *(void *)displayFlagsOut = 0;
            CFDictionaryRef v248 = 0;
            if (v57)
            {
              CFIndex v100 = CFArrayGetCount(v57);
              uint64_t v101 = v225;
              if (v100 < 1)
              {
                uint64_t MediaSelectionOptionDictionary = 0;
                CFTypeRef cf = 0;
                CMTimeValue v220 = 0;
                CFNumberRef v123 = v224;
                uint64_t v128 = v194;
                CFMutableArrayRef v129 = v218;
                uint64_t v130 = v203;
              }
              else
              {
                CFIndex v102 = v100;
                uint64_t v103 = 0;
                CFTypeRef cf = 0;
                CMTimeValue v220 = 0;
                CFIndex v198 = v100;
                while (1)
                {
                  uint64_t v246 = 0;
                  FigCFArrayGetInt32AtIndex();
                  uint64_t v104 = HIDWORD(v246);
                  uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v106 = v105 ? v105 : 0;
                  CFStringRef v107 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef *, uint64_t *))(v106 + 56);
                  if (!v107) {
                    break;
                  }
                  uint64_t v108 = v107(v101, v104, &v248, &v246);
                  if (v108) {
                    goto LABEL_236;
                  }
                  if (v246 != 1936684398)
                  {
                    uint64_t v101 = v225;
                    goto LABEL_196;
                  }
                  uint64_t v108 = CopyAudioCompatibleCompositionPresetArrayOfTrack((uint64_t)v248, (CFIndex *)displayFlagsOut);
                  if (v108)
                  {
LABEL_236:
                    uint64_t MediaSelectionOptionDictionary = v108;
                    goto LABEL_205;
                  }
                  CFArrayRef v109 = *(const __CFArray **)displayFlagsOut;
                  if (!*(void *)displayFlagsOut || !CFArrayGetCount(*(CFArrayRef *)displayFlagsOut))
                  {
                    uint64_t v101 = v225;
                    if (!TrackMatchesPrimaryLanguage((uint64_t)v248, v88)) {
                      goto LABEL_194;
                    }
                    v250[0] = 0;
                    if (FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForTrackReader((uint64_t)v7, (uint64_t)v248, v250))int v122 = 0; {
                    else
                    }
                      int v122 = MediaCharacteristicsArraysMatch((CFArrayRef)v250[0], v212);
                    if (v250[0]) {
                      CFRelease(v250[0]);
                    }
                    if (!v122) {
                      goto LABEL_193;
                    }
LABEL_188:
                    CFMutableArrayRef v124 = cf;
                    if (cf || (CFMutableArrayRef v124 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510])) != 0)
                    {
                      CFMutableArrayRef v125 = v220;
                      if (v220 || (CFMutableArrayRef v125 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510])) != 0)
                      {
                        CFTypeRef cf = v124;
                        FigCFArrayAppendInt32();
                        CMTimeValue v220 = v125;
                        FigCFArrayAppendCFIndex();
                        CFArrayRef v109 = *(const __CFArray **)displayFlagsOut;
                        goto LABEL_193;
                      }
                      uint64_t MediaSelectionOptionDictionary = FigSignalErrorAt();
                      CMTimeValue v220 = 0;
                      CFNumberRef v123 = v224;
                      goto LABEL_207;
                    }
                    uint64_t MediaSelectionOptionDictionary = FigSignalErrorAt();
                    CFNumberRef v123 = v224;
                    goto LABEL_208;
                  }
                  uint64_t v110 = -1;
                  values = (void *)-1;
                  v250[0] = 0;
                  CFIndex v111 = CFArrayGetCount(v109);
                  if (v111 < 1)
                  {
                    uint64_t MediaSelectionOptionDictionary = 0;
                    goto LABEL_184;
                  }
                  CFIndex v112 = v111;
                  uint64_t v113 = 0;
                  while (1)
                  {
                    FigCFArrayGetValueAtIndex();
                    uint64_t v114 = FigCFDictionaryGetDictionaryValue();
                    if (!v114 || (uint64_t v115 = v114, (v116 = FigCFDictionaryGetNumberValue()) == 0))
                    {
                      uint64_t v119 = FigSignalErrorAt();
LABEL_201:
                      uint64_t MediaSelectionOptionDictionary = v119;
LABEL_172:
                      uint64_t v110 = -1;
                      goto LABEL_183;
                    }
                    CFNumberRef v117 = (const __CFNumber *)v116;
                    __int16 v118 = (__CFString *)FigCFDictionaryGetStringValue();
                    uint64_t v119 = FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription(v226, v115, (__CFArray **)v250);
                    if (v119) {
                      goto LABEL_201;
                    }
                    CFStringRef v120 = v118 ? v118 : @"und";
                    if (CFStringCompare(v120, v88, 1uLL) == kCFCompareEqualTo
                      && MediaCharacteristicsArraysMatch((CFArrayRef)v250[0], v212))
                    {
                      break;
                    }
                    if (v250[0])
                    {
                      CFRelease(v250[0]);
                      v250[0] = 0;
                    }
                    if (v112 == ++v113)
                    {
                      uint64_t MediaSelectionOptionDictionary = 0;
                      goto LABEL_172;
                    }
                  }
                  CFNumberGetValue(v117, kCFNumberCFIndexType, &values);
                  uint64_t MediaSelectionOptionDictionary = 0;
                  uint64_t v110 = (uint64_t)values;
LABEL_183:
                  CFAllocatorRef v7 = (const __CFAllocator *)v226;
LABEL_184:
                  CFNumberRef v123 = v224;
                  if (v250[0]) {
                    CFRelease(v250[0]);
                  }
                  if (MediaSelectionOptionDictionary) {
                    goto LABEL_206;
                  }
                  uint64_t v101 = v225;
                  if (v110 != -1) {
                    goto LABEL_188;
                  }
LABEL_193:
                  CFIndex v102 = v198;
LABEL_194:
                  if (v109)
                  {
                    CFRelease(v109);
                    *(void *)displayFlagsOut = 0;
                  }
LABEL_196:
                  if (v248)
                  {
                    CFRelease(v248);
                    CFDictionaryRef v248 = 0;
                  }
                  if (++v103 == v102)
                  {
                    uint64_t MediaSelectionOptionDictionary = 0;
                    CFNumberRef v123 = v224;
                    uint64_t v128 = v194;
                    CFMutableArrayRef v129 = v218;
                    uint64_t v130 = v203;
                    goto LABEL_212;
                  }
                }
                uint64_t MediaSelectionOptionDictionary = 4294954514;
LABEL_205:
                CFNumberRef v123 = v224;
LABEL_206:
                CFMutableArrayRef v124 = cf;
                if (cf) {
LABEL_207:
                }
                  CFRelease(v124);
LABEL_208:
                uint64_t v128 = v194;
                CFMutableArrayRef v129 = v218;
                uint64_t v130 = v203;
                if (v220) {
                  CFRelease(v220);
                }
                CFTypeRef cf = 0;
                CMTimeValue v220 = 0;
LABEL_212:
                if (*(void *)displayFlagsOut) {
                  CFRelease(*(CFTypeRef *)displayFlagsOut);
                }
              }
              if (v248) {
                CFRelease(v248);
              }
              CFArrayRef v127 = cf;
              CFAllocatorRef v126 = v220;
              if (MediaSelectionOptionDictionary) {
                goto LABEL_293;
              }
            }
            else
            {
              CFAllocatorRef v126 = 0;
              CFArrayRef v127 = 0;
              CFNumberRef v123 = v224;
              uint64_t v128 = v194;
              CFMutableArrayRef v129 = v218;
              uint64_t v130 = v203;
            }
            CFNumberGetValue(number, kCFNumberCFIndexType, &v242);
            if (v23) {
              BOOL v131 = v242 == 0;
            }
            else {
              BOOL v131 = 0;
            }
            int v132 = v131;
            CFTypeRef cf = v127;
            CMTimeValue v220 = v126;
            uint64_t v133 = CreateMediaSelectionOptionDictionary(v128, v123, DictionaryValue, (uint64_t)number, 1936684398, v132, 0, 0, (uint64_t)v129, v127, (uint64_t)v126, &v244);
            if (v133)
            {
              uint64_t MediaSelectionOptionDictionary = (uint64_t)v133;
LABEL_293:
              CFAllocatorRef v7 = (const __CFAllocator *)v226;
              goto LABEL_252;
            }
            CFArrayAppendValue(Mutable, v244);
            CFAllocatorRef v7 = (const __CFAllocator *)v226;
            if (v244)
            {
              CFRelease(v244);
              v244 = 0;
            }
            if (v126) {
              CFRelease(v126);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v243)
            {
              CFRelease(v243);
              v243 = 0;
            }
            if (v129) {
              CFRelease(v129);
            }
            CFTypeRef cf = 0;
            CMTimeValue v220 = 0;
            CFMutableArrayRef v129 = 0;
            uint64_t MediaSelectionOptionDictionary = 0;
            uint64_t v85 = v130 + 1;
            if (v85 == v193) {
              goto LABEL_252;
            }
          }
          CFIndex v91 = v89;
          uint64_t v92 = 0;
          CFMutableArrayRef v218 = 0;
          while (1)
          {
            LODWORD(values) = 0;
            FigCFArrayGetInt32AtIndex();
            uint64_t v93 = values;
            uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v94) {
              uint64_t v95 = v94;
            }
            else {
              uint64_t v95 = 0;
            }
            uint64_t v96 = *(uint64_t (**)(uint64_t, uint64_t, int **, void))(v95 + 56);
            if (!v96)
            {
              uint64_t MediaSelectionOptionDictionary = 4294954514;
              goto LABEL_281;
            }
            uint64_t v97 = v96(v90, v93, v250, 0);
            if (v97)
            {
              uint64_t MediaSelectionOptionDictionary = v97;
LABEL_281:
              if (v218) {
                CFRelease(v218);
              }
              goto LABEL_251;
            }
            if (!TrackMatchesPrimaryLanguage((uint64_t)v250[0], v88))
            {
              uint64_t v90 = v225;
              goto LABEL_142;
            }
            uint64_t v90 = v225;
            CFMutableArrayRef v98 = v218;
            if (!v218)
            {
              CFMutableArrayRef v98 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
              if (!v98) {
                break;
              }
            }
            CFMutableArrayRef v218 = v98;
            FigCFArrayAppendInt32();
LABEL_142:
            if (v91 == ++v92) {
              goto LABEL_145;
            }
          }
          uint64_t v134 = FigSignalErrorAt();
          CFMutableArrayRef v218 = 0;
          if (!v134) {
            goto LABEL_145;
          }
          uint64_t MediaSelectionOptionDictionary = v134;
          CFMutableArrayRef v129 = 0;
          CFTypeRef cf = 0;
          CMTimeValue v220 = 0;
LABEL_252:
          if (v244) {
            CFRelease(v244);
          }
          if (v129) {
            CFRelease(v129);
          }
          if (v220) {
            CFRelease(v220);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v243) {
            CFRelease(v243);
          }
          if (v245) {
            CFRelease(v245);
          }
          CFArrayRef v82 = v241;
          if (v241) {
LABEL_265:
          }
            CFRelease(v82);
LABEL_266:
          if (MediaSelectionOptionDictionary) {
            goto LABEL_336;
          }
LABEL_267:
          if (FigCFEqual())
          {
            ++v216;
          }
          else if (FigCFEqual())
          {
            ++v209;
          }
          else
          {
            int v137 = FigCFEqual();
            uint64_t v138 = v204;
            if (v137) {
              uint64_t v138 = v204 + 1;
            }
            uint64_t v204 = v138;
          }
          uint64_t v6 = v225;
          if (v231)
          {
            CFRelease(v231);
            CFTypeRef v231 = 0;
          }
          if (v57) {
            CFRelease(v57);
          }
          CFIndex v22 = v221 + 1;
          char v21 = 1;
          CFIndex v20 = v211;
        }
        while (v221 + 1 != v211);
LABEL_296:
        long long v17 = v199;
        uint64_t v18 = v200;
        if (v209 != v20 || v200 != 0 || v199 != 0)
        {
          a4 = v196;
          a3 = v192;
          if (v216 == v20)
          {
            uint64_t v141 = v201;
            if (v201 == -1) {
              uint64_t v141 = v205;
            }
            uint64_t v201 = v141;
            unsigned int v142 = @"public.audible";
          }
          else
          {
            unsigned int v143 = @"public.visual";
            if (v204 != v20) {
              unsigned int v143 = 0;
            }
            if (v209 == v20) {
              unsigned int v142 = @"public.legible";
            }
            else {
              unsigned int v142 = v143;
            }
          }
          uint64_t inserted = CreateMediaSelectionGroupWithOptions(v237, v191, v142, Mutable, &v236);
          if (!inserted)
          {
            CFDictionaryRef v145 = v236;
            uint64_t inserted = InsertGroupIntoMediaSelectionArray(&v238, v197, v236);
            if (!inserted)
            {
              CFIndex v19 = v197 + 1;
              uint64_t v6 = v225;
              CFIndex v146 = v205;
              if (!v145) {
                goto LABEL_324;
              }
LABEL_323:
              CFRelease(v145);
              CFIndex v146 = v205;
              CFDictionaryRef v236 = 0;
              goto LABEL_324;
            }
          }
          uint64_t MediaSelectionOptionDictionary = inserted;
          CFNumberRef v150 = 0;
          CFNumberRef v151 = 0;
          ConcatenationOfTwoArrays = Mutable;
LABEL_339:
          if (MediaSelectionOptionDictionary && v238)
          {
            CFRelease(v238);
            __int16 v238 = 0;
            if (!v18) {
              goto LABEL_393;
            }
LABEL_392:
            CFRelease(v18);
            goto LABEL_393;
          }
LABEL_391:
          if (!v18) {
            goto LABEL_393;
          }
          goto LABEL_392;
        }
        a4 = v196;
        a3 = v192;
        if (v237) {
          uint64_t v18 = (void *)CFRetain(v237);
        }
        else {
          uint64_t v18 = 0;
        }
        CFIndex v19 = v197;
        if (Mutable) {
          long long v17 = (void *)CFRetain(Mutable);
        }
        else {
          long long v17 = 0;
        }
        CFDictionaryRef v145 = v236;
        CFIndex v146 = v205;
        uint64_t v207 = v205;
        if (v236) {
          goto LABEL_323;
        }
LABEL_324:
        if (v237)
        {
          CFRelease(v237);
          CFIndex v146 = v205;
          v237 = 0;
        }
        if (Mutable)
        {
          CFRelease(Mutable);
          CFIndex v146 = v205;
        }
        CFIndex v16 = v146 + 1;
        if (v16 == Count)
        {
          if (!(_BYTE)v208) {
            goto LABEL_332;
          }
          goto LABEL_349;
        }
      }
    }
  }
  long long v17 = 0;
  uint64_t v18 = 0;
  CFIndex v19 = 0;
  uint64_t v201 = -1;
  uint64_t v207 = -1;
LABEL_332:
  FPSupport_GetDefaultTrackIDForMediaType(v6, 1668047728, (uint64_t)&v234, 0);
  if (v234
    && ((uint64_t v147 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v148 = 0) : (v148 = v147),
        (CFAllocatorRef v152 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void))(v148 + 64)) != 0
     && v152(v6, 1, 1668047728, 0, 0) == -12843))
  {
    uint64_t v153 = a3;
    LODWORD(values) = 0;
    v250[0] = 0;
    CFNumberRef v150 = CFNumberCreate(v7, kCFNumberSInt32Type, &v234);
    if (!v150) {
      goto LABEL_491;
    }
    uint64_t v154 = v234;
    uint64_t v155 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v155) {
      uint64_t v156 = v155;
    }
    else {
      uint64_t v156 = 0;
    }
    unsigned int v173 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void **))(v156 + 56);
    if (!v173)
    {
      uint64_t MediaSelectionOptionDictionary = 4294954514;
LABEL_438:
      ConcatenationOfTwoArrays = 0;
      goto LABEL_338;
    }
    uint64_t MediaSelectionGroupWithOptions = v173(v6, v154, &v230, &values);
    if (MediaSelectionGroupWithOptions)
    {
LABEL_492:
      uint64_t MediaSelectionOptionDictionary = MediaSelectionGroupWithOptions;
      goto LABEL_438;
    }
    a3 = v153;
    if (!TrackIsAMemberOfAnyAlternateTrackGroup((uint64_t)v230))
    {
      uint64_t MediaSelectionGroupWithOptions = CopyReferencedTrackIDs(v150, v213, (__CFArray **)v250);
      if (MediaSelectionGroupWithOptions) {
        goto LABEL_492;
      }
      unsigned int v174 = v250[0];
      uint64_t MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary((uint64_t)v230, v150, 0, 0, 1668047728, 0, 0, 0, (uint64_t)v250[0], 0, 0, &v232);
      if (v174) {
        CFRelease(v174);
      }
      a3 = v153;
      if (MediaSelectionOptionDictionary) {
        goto LABEL_438;
      }
    }
    if (v230)
    {
      CFRelease(v230);
      CFTypeRef v230 = 0;
    }
    uint64_t v6 = v225;
  }
  else
  {
LABEL_349:
    CFNumberRef v150 = 0;
  }
  if (v207 == -1)
  {
    uint64_t v164 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v165 = v164 ? v164 : 0;
    Float64 v168 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *, unsigned int *))(v165 + 64);
    if (v168)
    {
      if (!v168(v6, 0, 1935832172, &v231, &valuePtr))
      {
        uint64_t v169 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v169) {
          uint64_t v170 = v169;
        }
        else {
          uint64_t v170 = 0;
        }
        uint64_t v176 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void))(v170 + 64);
        if (v176 && v176(v225, 1, 1935832172, 0, 0) == -12843)
        {
          uint64_t v177 = a3;
          uint64_t v178 = 0;
          LODWORD(v248) = 0;
          values = 0;
          v250[0] = 0;
          for (char i = 1; ; char i = 0)
          {
            uint64_t v180 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v181 = v180 ? v180 : 0;
            CFStringRef v182 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, CFDictionaryRef *))(v181 + 64);
            if (!v182 || v182(v225, v178, 1952807028, 0, &v248)) {
              break;
            }
            if (i) {
              FCSupport_GetListOfChapterTitleTrackIDs(v225, (uint64_t *)&values, v250, 0);
            }
            CFRange v183 = (char *)values;
            if ((uint64_t)values < 1)
            {
LABEL_466:
              free(v250[0]);
              a3 = v177;
              goto LABEL_467;
            }
            ++v178;
            v184 = v250[0];
            while (1)
            {
              int v185 = *v184++;
              if (v185 == v248) {
                break;
              }
              if (!--v183) {
                goto LABEL_466;
              }
            }
          }
          free(v250[0]);
          a3 = v177;
          if (!TrackIsAMemberOfAnyAlternateTrackGroup((uint64_t)v231))
          {
            uint64_t MediaSelectionGroupWithOptions = SynthesizeOptionsForSoloSubtitleTrack((uint64_t)v231, valuePtr, Value, v213, &v233);
            if (MediaSelectionGroupWithOptions) {
              goto LABEL_492;
            }
          }
        }
LABEL_467:
        if (v231)
        {
          CFRelease(v231);
          CFTypeRef v231 = 0;
        }
      }
    }
  }
  CFArrayRef v157 = v233;
  if (!a3 && !v232 && !v233)
  {
    CFIndex v158 = v207;
    if (!v17) {
      goto LABEL_374;
    }
    goto LABEL_369;
  }
  CFIndex v158 = v207;
  if ((v207 & 0x8000000000000000) == 0)
  {
    if (a3) {
      goto LABEL_358;
    }
    goto LABEL_384;
  }
  uint64_t v18 = (void *)CFRetain(@"SynthesizedLegibleGroup");
  long long v17 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  if (!v17)
  {
LABEL_491:
    uint64_t MediaSelectionGroupWithOptions = FigSignalErrorAt();
    goto LABEL_492;
  }
  CFIndex v158 = v19;
  if (a3)
  {
LABEL_358:
    ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
    if (!ConcatenationOfTwoArrays)
    {
      uint64_t MediaSelectionOptionDictionary = FigSignalErrorAt();
      goto LABEL_338;
    }
    CFNumberRef v159 = (const __CFNumber *)FigCFArrayCreateMutableCopy();
    CFNumberRef v151 = v159;
    if (v159) {
      CFRetain(v159);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (!v151)
    {
      CFRelease(ConcatenationOfTwoArrays);
      uint64_t MediaSelectionOptionDictionary = FigSignalErrorAt();
      ConcatenationOfTwoArrays = 0;
      long long v17 = 0;
      goto LABEL_339;
    }
    CFRelease(v151);
    CFRelease(ConcatenationOfTwoArrays);
    CFArrayRef v157 = v233;
    if (v233) {
      goto LABEL_365;
    }
    goto LABEL_366;
  }
LABEL_384:
  CFNumberRef v151 = (CFNumberRef)v17;
  if (v157)
  {
LABEL_365:
    v251.size_t length = CFArrayGetCount(v157);
    v251.CFIndex location = 0;
    CFArrayAppendArray(v151, v157, v251);
  }
LABEL_366:
  if (v232) {
    CFArrayAppendValue(v151, v232);
  }
  long long v17 = v151;
  if (!v151) {
    goto LABEL_374;
  }
LABEL_369:
  v250[0] = 0;
  uint64_t MediaSelectionGroupWithOptions = CreateMediaSelectionGroupWithOptions(v18, (void *)*MEMORY[0x1E4F1CFD0], @"public.legible", v17, (CFDictionaryRef *)v250);
  if (MediaSelectionGroupWithOptions) {
    goto LABEL_492;
  }
  Float64 v161 = v250[0];
  uint64_t MediaSelectionOptionDictionary = InsertGroupIntoMediaSelectionArray(&v238, v158, v250[0]);
  if (v161) {
    CFRelease(v161);
  }
  if (MediaSelectionOptionDictionary) {
    goto LABEL_438;
  }
  ++v19;
LABEL_374:
  CFNumberRef v151 = 0;
  uint64_t MediaSelectionOptionDictionary = 0;
  if (v158 < 0 || v201 != -1)
  {
    ConcatenationOfTwoArrays = 0;
    if (v18) {
      goto LABEL_392;
    }
    goto LABEL_393;
  }
  uint64_t v162 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v162) {
    uint64_t v163 = v162;
  }
  else {
    uint64_t v163 = 0;
  }
  int v166 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *, unsigned int *))(v163 + 64);
  if (!v166 || v166(v225, 0, 1936684398, &v231, &valuePtr))
  {
    uint64_t MediaSelectionOptionDictionary = 0;
    CFNumberRef v151 = 0;
LABEL_390:
    ConcatenationOfTwoArrays = 0;
    goto LABEL_391;
  }
  uint64_t v171 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v171) {
    uint64_t v172 = v171;
  }
  else {
    uint64_t v172 = 0;
  }
  uint64_t v175 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void))(v172 + 64);
  if (!v175) {
    goto LABEL_443;
  }
  CFNumberRef v151 = 0;
  if (v175(v225, 1, 1936684398, 0, 0) == -12843)
  {
    if (TrackIsAMemberOfAnyAlternateTrackGroup((uint64_t)v231))
    {
LABEL_443:
      CFNumberRef v151 = 0;
      goto LABEL_444;
    }
    values = 0;
    v250[0] = 0;
    CFDictionaryRef v248 = 0;
    CFNumberRef v186 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v151 = v186;
    if (v186)
    {
      uint64_t v187 = CopyReferencedTrackIDs(v186, v213, (__CFArray **)v250);
      if (v187)
      {
LABEL_495:
        uint64_t MediaSelectionOptionDictionary = v187;
        goto LABEL_481;
      }
      uint64_t v188 = v250[0];
      uint64_t MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary((uint64_t)v231, v151, 0, 0, 1936684398, 1, 0, 0, (uint64_t)v250[0], 0, 0, (__CFDictionary **)&values);
      if (v188) {
        CFRelease(v188);
      }
      if (MediaSelectionOptionDictionary) {
        goto LABEL_481;
      }
      CFArrayRef v189 = CFArrayCreate(v7, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
      if (values) {
        CFRelease(values);
      }
      if (v189)
      {
        uint64_t MediaSelectionOptionDictionary = CreateMediaSelectionGroupWithOptions(@"SoloAudioGroup", (void *)*MEMORY[0x1E4F1CFD0], @"public.audible", v189, &v248);
        CFRelease(v189);
        if (!MediaSelectionOptionDictionary)
        {
          CFDictionaryRef v190 = v248;
          uint64_t MediaSelectionOptionDictionary = InsertGroupIntoMediaSelectionArray(&v238, v19, v248);
          if (v190) {
            CFRelease(v190);
          }
          if (!MediaSelectionOptionDictionary) {
            goto LABEL_444;
          }
        }
LABEL_481:
        ConcatenationOfTwoArrays = 0;
        goto LABEL_339;
      }
    }
    uint64_t v187 = FigSignalErrorAt();
    goto LABEL_495;
  }
LABEL_444:
  if (!v231)
  {
    uint64_t MediaSelectionOptionDictionary = 0;
    goto LABEL_390;
  }
  CFRelease(v231);
  uint64_t MediaSelectionOptionDictionary = 0;
  ConcatenationOfTwoArrays = 0;
  CFTypeRef v231 = 0;
  if (v18) {
    goto LABEL_392;
  }
LABEL_393:
  if (v17) {
    CFRelease(v17);
  }
  if (v233) {
    CFRelease(v233);
  }
  if (v232) {
    CFRelease(v232);
  }
  if (v150) {
    CFRelease(v150);
  }
  if (v151) {
    CFRelease(v151);
  }
  if (v236) {
    CFRelease(v236);
  }
  if (v237) {
    CFRelease(v237);
  }
  if (ConcatenationOfTwoArrays) {
    CFRelease(ConcatenationOfTwoArrays);
  }
  if (v239) {
    CFRelease(v239);
  }
  if (v240) {
    CFRelease(v240);
  }
  if (v231) {
    CFRelease(v231);
  }
  if (v230) {
    CFRelease(v230);
  }
  *a4 = v238;
  return MediaSelectionOptionDictionary;
}