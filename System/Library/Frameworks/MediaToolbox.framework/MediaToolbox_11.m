void fcar_flushConversionPool(__CVPixelBufferPool *a1)
{
  CVPixelBufferPoolFlush(a1, 0);
}

double fcarInit(uint64_t a1)
{
  *(void *)(a1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

CFTypeRef fcarCopyFormattingDesc(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return CFRetain(@"[FCAR (invalidated)]");
  }
  else {
    return CFRetain(@"[FCAR]");
  }
}

__CFString *fcarCopyDebugDesc(unsigned char *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFTypeRef cf = 0;
  CFIndex v4 = CFGetRetainCount(a1);
  if (a1[16]) {
    v5 = " (invalidated)";
  }
  else {
    v5 = "";
  }
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"FCAR %p retainCount: %ld%s allocator: %p\n", a1, v4, v5, v6);
  fcar_copyPerformanceDictionary((uint64_t)a1, (CFDictionaryRef *)&cf);
  if (cf)
  {
    CFStringAppendFormat(Mutable, 0, @", performanceDictionary %@", cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  return Mutable;
}

void fcar_addNumberToDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void fcar_releaseCVPixelBufferCallback(int a1, int a2, CVPixelBufferRef texture)
{
  if (texture) {
    CVPixelBufferRelease(texture);
  }
}

uint64_t FigRemote_StartCARenderServerAndReturnPort(_DWORD *a1)
{
  if (!a1) {
    return 1;
  }
  FigAtomicIncrement32();
  if (CARenderServerIsRunning() & 1) != 0 || (MEMORY[0x1997073D0]())
  {
    int v2 = MEMORY[0x1997073A0]();
    uint64_t result = 0;
    *a1 = v2;
  }
  else
  {
    if ((int)FigAtomicDecrement32() <= 0) {
      MEMORY[0x1997073C0]();
    }
    return 1;
  }
  return result;
}

uint64_t FigRemote_CreateLocalCAContext(void *a1)
{
  int v2 = (void *)MEMORY[0x199711A30]();
  id v3 = (id)[MEMORY[0x1E4F39B58] localContext];
  if (v3)
  {
    uint64_t v4 = 0;
    *a1 = v3;
  }
  else
  {
    uint64_t v4 = 1;
  }
  return v4;
}

uint64_t FigRemote_CreateCAImageQueuesAndSlotIDs(int a1, void *a2, __CFArray **a3, __CFArray **a4)
{
  int valuePtr = 0;
  v8 = (void *)MEMORY[0x199711A30]();
  uint64_t v9 = 1;
  if (a2 && a3 && a4)
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v13 = CFArrayCreateMutable(v10, 0, v11);
    v14 = v13;
    if (Mutable) {
      BOOL v15 = v13 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
      if (a1 < 1)
      {
LABEL_13:
        uint64_t v9 = 0;
        *a3 = Mutable;
        *a4 = v14;
        Mutable = 0;
        v14 = 0;
      }
      else
      {
        while (1)
        {
          uint64_t v9 = 1;
          uint64_t v16 = CAImageQueueCreate();
          if (!v16) {
            break;
          }
          v17 = (const void *)v16;
          CAImageQueueSetFlags();
          uint64_t v18 = [a2 createSlot];
          int valuePtr = v18;
          [a2 setObject:v17 forSlot:v18];
          CFArrayAppendValue(Mutable, v17);
          CFRelease(v17);
          CFNumberRef v19 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
          CFArrayAppendValue(v14, v19);
          CFRelease(v19);
          if (!--a1) {
            goto LABEL_13;
          }
        }
      }
      [MEMORY[0x1E4F39CF8] commit];
      [MEMORY[0x1E4F39CF8] flush];
      [MEMORY[0x1E4F39CF8] synchronize];
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v14) {
      CFRelease(v14);
    }
  }
  return v9;
}

uint64_t FigRemote_CreateLayerHostForRemoteContext(uint64_t a1, void *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
  id v5 = (id)[MEMORY[0x1E4F39BF0] layer];
  [v5 setContextId:a1];
  [MEMORY[0x1E4F39CF8] commit];
  [MEMORY[0x1E4F39CF8] flush];
  [MEMORY[0x1E4F39CF8] synchronize];
  *a2 = v5;
  return 0;
}

uint64_t FigRemote_RemoveReleaseAndClearLayerHost(id *a1)
{
  if (a1 && *a1)
  {
    int v2 = (void *)MEMORY[0x199711A30]();
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
    [*a1 removeFromSuperlayer];

    *a1 = 0;
    [MEMORY[0x1E4F39CF8] commit];
  }
  return 0;
}

uint64_t FigRemote_RemoveReleaseAndClearCAImageQueuesAndSlotIDs(void *a1, CFTypeRef *a2, CFArrayRef *a3)
{
  unsigned int valuePtr = 0;
  CFNumberRef v6 = (void *)MEMORY[0x199711A30]();
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
  CFIndex Count = CFArrayGetCount(*a3);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    for (CFIndex i = 0; i != v8; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*a3, i);
      if (ValueAtIndex)
      {
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        [a1 deleteSlot:valuePtr];
      }
      unsigned int valuePtr = 0;
    }
  }
  if (*a3) {
    CFRelease(*a3);
  }
  *a3 = 0;
  if (*a2) {
    CFRelease(*a2);
  }
  *a2 = 0;
  [MEMORY[0x1E4F39CF8] commit];
  return 0;
}

uint64_t FigRemote_ReleaseAndClearLocalCAContextAndShutDownCAServer(id *a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  if (a1 && *a1)
  {
    [MEMORY[0x1E4F39CF8] begin];
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigRemote_ReleaseAndClearLocalCAContextAndShutDownCAServer_block_invoke;
    v6[3] = &unk_1E5794738;
    v6[4] = a2;
    [MEMORY[0x1E4F39CF8] addCommitHandler:v6 forPhase:5];
    [*a1 invalidate];

    [MEMORY[0x1E4F39CF8] commit];
    *a1 = 0;
  }
  else if ((int)FigAtomicDecrement32() <= 0)
  {
    MEMORY[0x1997073C0]();
  }
  return 0;
}

uint64_t FigRemote_CreateRemoteCAContextAndAttachLayer(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t result = 1;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v9 = (void *)MEMORY[0x199711A30](1);
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
    CFAllocatorRef v10 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v11 = [NSNumber numberWithUnsignedInt:a1];
    uint64_t v12 = objc_msgSend(v10, "dictionaryWithObjectsAndKeys:", v11, *MEMORY[0x1E4F39E88], 0);
    id v13 = (id)[MEMORY[0x1E4F39B58] remoteContextWithOptions:v12];
    [v13 setLayer:a2];
    *a4 = [v13 contextId];
    [MEMORY[0x1E4F39CF8] commit];
    [MEMORY[0x1E4F39CF8] flush];
    [MEMORY[0x1E4F39CF8] synchronize];
    *a3 = v13;
    return 0;
  }
  return result;
}

uint64_t FigRemote_InstallSlotIDsInVideoLayers(const __CFArray *a1, const __CFArray *a2)
{
  unsigned int valuePtr = 0;
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v6 = CFArrayGetCount(a2);
  uint64_t v7 = 1;
  if (Count && v6 && Count == v6)
  {
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
        CFAllocatorRef v10 = (void *)CFArrayGetValueAtIndex(a2, i);
        if (!v10) {
          break;
        }
        if (!ValueAtIndex) {
          break;
        }
        uint64_t v11 = v10;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        objc_msgSend(v11, "setContents:", objc_msgSend(MEMORY[0x1E4F39B58], "objectForSlot:", valuePtr));
      }
    }
    [MEMORY[0x1E4F39CF8] commit];
    [MEMORY[0x1E4F39CF8] flush];
    [MEMORY[0x1E4F39CF8] synchronize];
    uint64_t v7 = 0;
  }
  return v7;
}

uint64_t FigRemote_RemoveSlotIDsFromVideoLayers(const __CFArray *a1)
{
  int v2 = (void *)MEMORY[0x199711A30]();
  CFIndex Count = CFArrayGetCount(a1);
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
      objc_msgSend((id)CFArrayGetValueAtIndex(a1, i), "setContents:", 0);
  }
  [MEMORY[0x1E4F39CF8] commit];
  return 0;
}

uint64_t FigRemote_RemoveReleaseAndClearRemoteCAContext(id *a1, void *a2)
{
  if (a1 && *a1)
  {
    uint64_t v4 = (void *)MEMORY[0x199711A30]();
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
    [a2 removeFromSuperlayer];
    [*a1 setLayer:0];
    [*a1 invalidate];

    *a1 = 0;
    [MEMORY[0x1E4F39CF8] commit];
  }
  return 0;
}

uint64_t FigRemote_DestroyCARenderServerPort(int a1)
{
  if (a1) {
    FigMachPortReleaseSendRight_();
  }
  return 0;
}

uint64_t FigRemote_CreatePixelBufferAndPoolAttributesDictionary(const __CFAllocator *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  if (a4)
  {
    keys[0] = 0;
    keys[1] = 0;
    values[0] = 0;
    values[1] = 0;
    if (a2)
    {
      keys[0] = @"PixelBufferPoolAtttributes";
      values[0] = a2;
      unsigned int v5 = 1;
      if (!a3) {
        goto LABEL_5;
      }
    }
    else
    {
      unsigned int v5 = 0;
      if (!a3)
      {
LABEL_5:
        CFDictionaryRef v6 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, v5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v6) {
          return FigSignalErrorAt();
        }
        CFDictionaryRef v7 = v6;
        uint64_t result = 0;
        *a4 = v7;
        return result;
      }
    }
    keys[v5] = @"PixelBufferAttributes";
    values[v5++] = a3;
    goto LABEL_5;
  }

  return FigSignalErrorAt();
}

uint64_t FigRemote_CopyPixelBufferAndPoolAttributesFromDictionary(const __CFDictionary *a1, void *a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    Value = CFDictionaryGetValue(a1, @"PixelBufferPoolAtttributes");
    *a2 = Value;
    if (Value) {
      CFRetain(Value);
    }
    CFDictionaryRef v7 = CFDictionaryGetValue(a1, @"PixelBufferAttributes");
    *a3 = v7;
    if (v7) {
      CFRetain(v7);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigFairPlaySharedContextLoad(const void *a1, CFTypeRef cf, const __CFDictionary *a3)
{
  if (gSharedContextPoolInitOnce == -1)
  {
    if (cf)
    {
LABEL_3:
      CFURLRef v6 = (const __CFURL *)CFRetain(cf);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once_f(&gSharedContextPoolInitOnce, 0, (dispatch_function_t)InitSharedContextPool);
    if (cf) {
      goto LABEL_3;
    }
  }
  CFURLRef v6 = FigFairPlayCopyDefaultKeybagFolderURL();
LABEL_6:
  CFURLRef v7 = v6;
  if (!v6) {
    return 4294955146;
  }
  MEMORY[0x19970E910](gSharedContextPoolLock);
  CFIndex v8 = FigFairPlayCopyAbsolutePathFromURL(v7);
  if (!CFDictionaryContainsKey((CFDictionaryRef)gSharedContextPool, v8))
  {
    MEMORY[0x19970EE10](&FigFairPlaySharedContextGetClassID_sRegisterFigFairPlaySharedContextTypeOnce, RegisterFigFairPlaySharedContextType);
    uint64_t v9 = CMDerivedObjectCreate();
    if (v9) {
      goto LABEL_32;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1) {
      CFTypeRef v11 = CFRetain(a1);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *(void *)uint64_t DerivedStorage = v11;
    *(void *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 16) = CFSetCreateMutable((CFAllocatorRef)a1, 0, 0);
    if (v8) {
      CFTypeRef v12 = CFRetain(v8);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *(void *)(DerivedStorage + 24) = v12;
    *(void *)(DerivedStorage + 32) = dispatch_queue_create("FigFPSharedContextFPInitializationQueue", 0);
    if (a3)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a3, @"InitializeForInspection");
      v16 = Value && (v14 = Value, CFTypeID v15 = CFGetTypeID(Value), v15 == CFBooleanGetTypeID()) && CFBooleanGetValue(v14) != 0;
      CFBooleanRef v17 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"InitializeForAudioPlayback");
      if (v17)
      {
        CFBooleanRef v18 = v17;
        CFTypeID v19 = CFGetTypeID(v17);
        if (v19 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v18)) {
            BOOL v16 = 1;
          }
        }
      }
      CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"InitializeForVideoPlayback");
      if (v20)
      {
        CFBooleanRef v21 = v20;
        CFTypeID v22 = CFGetTypeID(v20);
        if (v22 == CFBooleanGetTypeID())
        {
          if (!(CFBooleanGetValue(v21) | v16)) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
      }
      if (v16) {
LABEL_30:
      }
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 32), 0, (dispatch_function_t)FigFairPlaySharedContextLoad_EnsureFairPlayContext);
    }
LABEL_31:
    CFDictionaryAddValue((CFMutableDictionaryRef)gSharedContextPool, v8, 0);
    goto LABEL_32;
  }
  uint64_t v9 = 0;
LABEL_32:
  if (v8) {
    CFRelease(v8);
  }
  MEMORY[0x19970E930](gSharedContextPoolLock);
  CFRelease(v7);
  return v9;
}

CFMutableDictionaryRef InitSharedContextPool()
{
  gSharedContextPoolLock = FigSimpleMutexCreate();
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  gSharedContextPool = (uint64_t)result;
  return result;
}

void FigFairPlaySharedContextLoad_EnsureFairPlayContext(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  EnsureFairPlayContext(DerivedStorage);
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t FigFairPlaySharedContextUnload(CFTypeRef cf)
{
  if (gSharedContextPoolInitOnce == -1)
  {
    if (cf)
    {
LABEL_3:
      CFURLRef v2 = (const __CFURL *)CFRetain(cf);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once_f(&gSharedContextPoolInitOnce, 0, (dispatch_function_t)InitSharedContextPool);
    if (cf) {
      goto LABEL_3;
    }
  }
  CFURLRef v2 = FigFairPlayCopyDefaultKeybagFolderURL();
LABEL_6:
  CFURLRef v3 = v2;
  if (!v2) {
    return 4294955146;
  }
  MEMORY[0x19970E910](gSharedContextPoolLock);
  uint64_t v4 = FigFairPlayCopyAbsolutePathFromURL(v3);
  uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)gSharedContextPool, v4);
  if (Value)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
    CFIndex Count = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 16));
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
    if (Count <= 0)
    {
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      CFAllocatorRef v10 = *(uint64_t (**)(uint64_t))(v9 + 24);
      if (v10)
      {
        uint64_t Value = v10(Value);
        if (!Value) {
          CFDictionaryRemoveValue((CFMutableDictionaryRef)gSharedContextPool, v4);
        }
      }
      else
      {
        uint64_t Value = 4294954514;
      }
    }
    else
    {
      uint64_t Value = 4294955138;
    }
  }
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x19970E930](gSharedContextPoolLock);
  CFRelease(v3);
  return Value;
}

uint64_t FigFairPlaySharedContextCopyForKeybagURLAndClient(const void *a1, const void *a2, const void *a3, void *a4)
{
  uint64_t v4 = 4294955146;
  if (a2 && a3 && a4)
  {
    uint64_t v8 = FigFairPlaySharedContextLoad(a1, a2, 0);
    if (v8) {
      return v8;
    }
    MEMORY[0x19970E910](gSharedContextPoolLock);
    uint64_t v9 = FigFairPlayCopyAbsolutePathFromURL((const __CFURL *)a2);
    uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)gSharedContextPool, v9);
    if (Value)
    {
      CFTypeRef v11 = Value;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 16), a3);
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
      CFTypeRef v13 = CFRetain(v11);
      uint64_t v4 = 0;
      *a4 = v13;
      if (!v9)
      {
LABEL_8:
        MEMORY[0x19970E930](gSharedContextPoolLock);
        return v4;
      }
    }
    else
    {
      uint64_t v4 = 4294955138;
      if (!v9) {
        goto LABEL_8;
      }
    }
    CFRelease(v9);
    goto LABEL_8;
  }
  return v4;
}

uint64_t FigFairPlaySharedContextEqual(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !v5) {
    return a1 == a2;
  }
  CFURLRef v6 = *(const void **)(v5 + 24);
  CFURLRef v7 = *(const void **)(DerivedStorage + 24);

  return CFEqual(v7, v6);
}

uint64_t FigFairPlaySharedContextInvalidate()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v1 = (CFTypeRef *)result;
    MEMORY[0x19970E910](*(void *)(result + 8));
    CFSetRef v2 = (const __CFSet *)v1[2];
    if (v2 && !CFSetGetCount(v2))
    {
      CFTypeRef v3 = v1[2];
      if (v3)
      {
        CFRelease(v3);
        v1[2] = 0;
      }
      MEMORY[0x19970E930](v1[1]);
      dispatch_sync_f((dispatch_queue_t)v1[4], v1, (dispatch_function_t)FigFairPlaySharedContextInvalidate_FairPlay);
      if (*v1)
      {
        CFRelease(*v1);
        CFTypeRef *v1 = 0;
      }
      uint64_t result = (uint64_t)v1[3];
      if (result)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        v1[3] = 0;
      }
    }
    else
    {
      MEMORY[0x19970E930](v1[1]);
      return 4294955138;
    }
  }
  return result;
}

void FigFairPlaySharedContextFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigFairPlaySharedContextInvalidate();
  FigSimpleMutexDestroy();
  v1 = *(NSObject **)(DerivedStorage + 32);

  dispatch_release(v1);
}

__CFString *FigFairPlaySharedContextCopyDebugDescription()
{
  uint64_t DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  v1 = DerivedStorage;
  Mutable = CFStringCreateMutable(*DerivedStorage, 0);
  CFTypeRef v3 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"<FigFPSharedContext: context<0x%x>", *((unsigned int *)v1 + 11));
  }
  return v3;
}

uint64_t FigFairPlaySharedContextCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a4 && a2 && DerivedStorage)
  {
    if (CFEqual(a2, @"3721370B-B25B-4EED-A8C8-F27CAA873C75"))
    {
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 32), (void *)DerivedStorage, (dispatch_function_t)EnsureFairPlayContext);
      uint64_t v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(DerivedStorage + 44));
    }
    else
    {
      if (!CFEqual(a2, @"ED1C2894-E22E-4BCB-9D7F-BE48EF1B699E")) {
        return 4294955144;
      }
      uint64_t v8 = (void *)CFRetain(*(CFTypeRef *)(DerivedStorage + 24));
    }
    uint64_t v9 = v8;
    uint64_t result = 0;
    *a4 = v9;
  }
  return result;
}

uint64_t FigFairPlaySharedContextSetProperty()
{
  return 4294955144;
}

uint64_t FigFairPlaySharedContextInvalidate_FairPlay(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 40))
  {
    uint64_t result = *(unsigned int *)(result + 44);
    if (result)
    {
      uint64_t v2 = VLxCLgDpiF(result);
      uint64_t result = FAIRPLAY_CALL_LOG(v2);
      *(_DWORD *)(v1 + 44) = 0;
    }
  }
  *(unsigned char *)(v1 + 41) = 1;
  return result;
}

void EnsureFairPlayContext(uint64_t a1)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 40) || (df35957c4e0(), FAIRPLAY_CALL_LOG(v2) == -42032))
  {
    if (!*(unsigned char *)(a1 + 41))
    {
      memset(v14, 0, 24);
      CFIndex maxBufLen = 0;
      CFTypeRef v13 = 0;
      *(_DWORD *)(a1 + 44) = 0;
      CFStringRef v3 = (const __CFString *)MGCopyAnswer();
      if (v3)
      {
        CFStringRef v4 = v3;
        CFIndex Length = CFStringGetLength(v3);
        CFStringGetSystemEncoding();
        uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
        zxcm2Qme0x(CStringPtrAndBufferToFree, Length, (uint64_t)v14);
        LODWORD(Length) = FAIRPLAY_CALL_LOG(v7);
        free(v13);
        CFRelease(v4);
        if (!Length)
        {
          CFIndex v8 = CFStringGetLength(*(CFStringRef *)(a1 + 24));
          v15.location = 0;
          v15.length = v8;
          if (CFStringGetBytes(*(CFStringRef *)(a1 + 24), v15, 0x8000100u, 0, 0, 0, 0, &maxBufLen) >= 1)
          {
            uint64_t v9 = (UInt8 *)malloc_type_malloc(maxBufLen + 2, 0xDD04F135uLL);
            if (v9)
            {
              CFAllocatorRef v10 = v9;
              v16.location = 0;
              v16.length = v8;
              CFStringGetBytes(*(CFStringRef *)(a1 + 24), v16, 0x8000100u, 0, 0, v9, maxBufLen, &maxBufLen);
              v10[maxBufLen] = 0;
              uint64_t v11 = XtCqEf5X(0, (uint64_t)v14, (uint64_t)v10, a1 + 44);
              if (FAIRPLAY_CALL_LOG(v11)) {
                *(_DWORD *)(a1 + 44) = 0;
              }
              free(v10);
            }
          }
        }
      }
      *(unsigned char *)(a1 + 40) = 1;
    }
  }
}

uint64_t RemoveClient(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a1)
  {
    if (a2)
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
      return 0;
    }
  }
  return result;
}

uint64_t RegisterFigFairPlaySharedContextType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlaySharedContextCopyFormattingDesc()
{
  return CFRetain(@"[FigFPSharedContext]");
}

uint64_t FigCaptionRendererBaseProtocolGetProtocolID()
{
  return sFigCaptionRendererBaseProtocolID;
}

uint64_t RegisterFigCaptionRendererBaseProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererBaseProtocolDesc, 0, &sFigCaptionRendererBaseProtocolID);
}

uint64_t FigCDSPaintOnCaptionSetCurrentTime(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = *(void *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)a2;
    *(void *)(DerivedStorage + 24) = v8;
    if (!*(void *)(DerivedStorage + 64))
    {
      cf.value = 0;
      FigCDSCaptionProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable
        && (uint64_t v10 = *(void *)(ProtocolVTable + 16)) != 0
        && (uint64_t v11 = *(void (**)(uint64_t, CMTime *))(v10 + 32)) != 0)
      {
        v11(a1, &cf);
        value = (const void *)cf.value;
        CFTypeRef v13 = *(const void **)(DerivedStorage + 64);
        *(void *)(DerivedStorage + 64) = cf.value;
        if (value) {
          CFRetain(value);
        }
      }
      else
      {
        CFTypeRef v13 = *(const void **)(DerivedStorage + 64);
        *(void *)(DerivedStorage + 64) = 0;
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    CFBooleanRef v14 = (long long *)(DerivedStorage + 8);
    CMTime cf = *(CMTime *)(DerivedStorage + 32);
    double Seconds = CMTimeGetSeconds(&cf);
    *(void *)&long long v80 = FigBytePumpGetFigBaseObject(v16);
    *((void *)&v80 + 1) = v17;
    FigCDSIntervalProtocolGetProtocolID();
    uint64_t v18 = CMBaseObjectGetProtocolVTable();
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        CFBooleanRef v20 = *(void (**)(uint64_t, long long *))(v19 + 8);
        if (v20) {
          v20(a1, &v80);
        }
      }
    }
    long long v21 = *v14;
    cf.epoch = *(void *)(DerivedStorage + 24);
    *(_OWORD *)&cf.value = v21;
    Float64 v22 = CMTimeGetSeconds(&cf);
    if (v22 == *(double *)&v80)
    {
      *(unsigned char *)(DerivedStorage + 56) = 1;
      if (a3)
      {
        uint64_t v82 = 0;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v23 = CMBaseObjectGetProtocolVTable();
        if (v23
          && (uint64_t v24 = *(void *)(v23 + 16)) != 0
          && (v25 = *(void (**)(uint64_t, uint64_t *))(v24 + 16)) != 0)
        {
          v25(a1, &v82);
          uint64_t v26 = v82;
        }
        else
        {
          uint64_t v26 = 0;
        }
        long long v46 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
        long long v80 = *MEMORY[0x1E4F1DB20];
        long long v81 = v46;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v47 = CMBaseObjectGetProtocolVTable();
        if (v47)
        {
          uint64_t v49 = *(void *)(v47 + 16);
          v47 += 16;
          uint64_t v48 = v49;
          if (v49)
          {
            v50 = *(uint64_t (**)(uint64_t, long long *))(v48 + 104);
            if (v50) {
              uint64_t v47 = v50(v26, &v80);
            }
          }
        }
        v79[0] = FigBytePumpGetFigBaseObject(v47);
        v79[1] = v51;
        FigCDSIntervalProtocolGetProtocolID();
        uint64_t v52 = CMBaseObjectGetProtocolVTable();
        if (v52)
        {
          uint64_t v53 = *(void *)(v52 + 16);
          if (v53)
          {
            v54 = *(void (**)(uint64_t, void *))(v53 + 8);
            if (v54) {
              v54(a1, v79);
            }
          }
        }
        long long v55 = *v14;
        cf.epoch = *(void *)(DerivedStorage + 24);
        *(_OWORD *)&cf.value = v55;
        double v56 = CMTimeGetSeconds(&cf);
        double v57 = *(double *)v79;
        long long v77 = v80;
        long long v78 = v81;
        *(void *)(DerivedStorage + 72) = 0x2100000021;
        uint64_t v58 = v82;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v59 = CMBaseObjectGetProtocolVTable();
        if (v59)
        {
          uint64_t v60 = *(void *)(v59 + 16);
          if (v60)
          {
            v61 = *(void (**)(uint64_t, CMTime *))(v60 + 296);
            if (v61)
            {
              LODWORD(cf.value) = 0;
              HIDWORD(cf.value) = (int)((Seconds - (v56 - v57)) * 1000.0);
              *(_OWORD *)&cf.timescale = v77;
              long long v84 = v78;
              v61(v58, &cf);
            }
          }
        }
        return 0;
      }
    }
    else
    {
      *(unsigned char *)(DerivedStorage + 56) = 0;
    }
    int v27 = *(_DWORD *)(DerivedStorage + 72);
    BOOL v28 = __OFSUB__(v27, 33);
    v27 -= 33;
    *(_DWORD *)(DerivedStorage + 72) = v27;
    if (!((v27 < 0) ^ v28 | (v27 == 0))) {
      return 0;
    }
    *(_DWORD *)(DerivedStorage + 72) = *(_DWORD *)(DerivedStorage + 76);
    uint64_t v29 = CMBaseObjectGetDerivedStorage();
    double FigBaseObject = FigBytePumpGetFigBaseObject(v29);
    double v32 = v31;
    *(double *)&long long v80 = FigBaseObject;
    *((double *)&v80 + 1) = v31;
    FigCDSIntervalProtocolGetProtocolID();
    uint64_t v33 = CMBaseObjectGetProtocolVTable();
    if (v33)
    {
      uint64_t v34 = *(void *)(v33 + 16);
      if (v34)
      {
        v35 = *(void (**)(uint64_t, long long *))(v34 + 8);
        if (v35)
        {
          v35(a1, &v80);
          double v32 = *((double *)&v80 + 1);
        }
      }
    }
    if (v32 <= 0.0)
    {
      FigSignalErrorAt();
      return 0;
    }
    CFAttributedStringRef v36 = *(const __CFAttributedString **)(v29 + 64);
    uint64_t Length = CFAttributedStringGetLength(v36);
    long long v38 = *(_OWORD *)(v29 + 8);
    cf.epoch = *(void *)(v29 + 24);
    *(_OWORD *)&cf.value = v38;
    double v39 = CMTimeGetSeconds(&cf);
    CMTime cf = *(CMTime *)(v29 + 32);
    double v40 = CMTimeGetSeconds(&cf);
    double v41 = v39 - *(double *)&v80;
    if (v40 <= 0.0 || Length <= 0)
    {
      double v44 = (double)Length;
    }
    else
    {
      double v42 = v41 * 1000.0 / 33.0;
      double v43 = v42 + v42;
      if (v42 < 0.0) {
        double v43 = 0.0;
      }
      double v44 = (double)Length;
      double v45 = v43 / (double)Length;
      if (v45 <= 1.0) {
        goto LABEL_50;
      }
    }
    double v45 = 1.0;
LABEL_50:
    BOOL v62 = (v40 - v41) * 1000.0 < 66.0;
    double v63 = 1.0;
    if (!v62) {
      double v63 = v45;
    }
    LODWORD(v64) = llround(v44 * v63);
    if ((int)v64 <= 1) {
      CFIndex v64 = 1;
    }
    else {
      CFIndex v64 = v64;
    }
    if (Length >= v64) {
      v65.length = v64;
    }
    else {
      v65.length = Length;
    }
    v65.location = 0;
    CFAttributedStringRef v66 = CFAttributedStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v36, v65);
    FigCDSCaptionProtocolGetProtocolID();
    uint64_t v67 = CMBaseObjectGetProtocolVTable();
    if (v67)
    {
      uint64_t v68 = *(void *)(v67 + 16);
      if (v68)
      {
        v69 = *(void (**)(uint64_t, CFAttributedStringRef))(v68 + 24);
        if (v69) {
          v69(a1, v66);
        }
      }
    }
    if (v66) {
      CFRelease(v66);
    }
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v70 = CMBaseObjectGetProtocolVTable();
    if (v70)
    {
      uint64_t v71 = *(void *)(v70 + 16);
      if (v71)
      {
        v72 = *(void (**)(uint64_t, uint64_t))(v71 + 216);
        if (v72) {
          v72(a1, 1);
        }
      }
    }
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v73 = CMBaseObjectGetProtocolVTable();
    if (v73)
    {
      uint64_t v74 = *(void *)(v73 + 16);
      if (v74)
      {
        v75 = *(void (**)(uint64_t, uint64_t))(v74 + 200);
        if (v75) {
          v75(a1, 1);
        }
      }
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLFeatureCreate(const __CFAllocator *a1, uint64_t a2, long long *a3, void *a4)
{
  uint64_t v8 = FigTTMLGetLibXMLAccess();
  if (v8)
  {
    uint64_t v9 = v8;
    if (a4)
    {
      FigTTMLNodeGetClassID();
      uint64_t v10 = CMDerivedObjectCreate();
      if (!v10)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v10 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a3);
        if (!v10)
        {
          uint64_t v10 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
          if (!v10)
          {
            CFTypeRef v12 = (const char *)(*(uint64_t (**)(uint64_t))(v9 + 104))(a2);
            CFStringRef v13 = CFStringCreateWithCString(a1, v12, 0x8000100u);
            if (!v13)
            {
              uint64_t v15 = FigSignalErrorAt();
              goto LABEL_10;
            }
            CFStringRef v14 = v13;
            if (CFStringGetLength(v13))
            {
              uint64_t v15 = FigTTMLSkipNode(a2, (uint64_t *)a3, *(__CFArray **)(DerivedStorage + 128));
              if (!v15)
              {
                *(void *)(DerivedStorage + 144) = v14;
                *a4 = 0;
LABEL_10:
                (*(void (**)(const char *))(v9 + 112))(v12);
                return v15;
              }
            }
            else
            {
              uint64_t v15 = FigSignalErrorAt();
            }
            CFRelease(v14);
            goto LABEL_10;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    uint64_t v15 = v10;
    CFTypeRef v12 = 0;
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

void figTTMLFeature_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 144);
  if (v2) {
    CFRelease(v2);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLFeature_CopyDebugDesc()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"feature[%@] : %@(%@)", v1, *(void *)(DerivedStorage + 144), *(void *)(DerivedStorage + 136));
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t figTTMLFeature_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  if (a2)
  {
    CFAllocatorRef v4 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLFeature_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 18;
  return 0;
}

uint64_t FigTTMLBodyCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      FigBytePumpGetFigBaseObject(0);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (!v8)
      {
        uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v8)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            CFMutableArrayRef v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
            *(void *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              uint64_t v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLBodyConsumeChildNode, (uint64_t *)a3);
              if (!v12) {
                *a4 = 0;
              }
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLBodyConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  FigBytePumpGetFigBaseObject(*a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v15 = 0;
  value = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1) {
    goto LABEL_13;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v15, (CFStringRef *)&cf);
  if (v8) {
    goto LABEL_23;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    CFAllocatorRef v9 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLDivCreate(v9, a1, (uint64_t)a2, &value);
    if (!v8)
    {
      uint64_t v10 = *(__CFArray **)(DerivedStorage + 136);
LABEL_12:
      CFArrayAppendValue(v10, value);
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_13:
    uint64_t v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!v8)
    {
LABEL_14:
      uint64_t v12 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  CFAllocatorRef v11 = CFGetAllocator(*a2);
  uint64_t v8 = FigTTMLSetCreate((uint64_t)v11, a1, (uint64_t)a2, &value);
  if (!v8)
  {
    uint64_t v10 = *(__CFArray **)(DerivedStorage + 144);
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v8;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
LABEL_18:
  if (v15) {
    CFRelease(v15);
  }
  if (value) {
    CFRelease(value);
  }
  return v12;
}

void figTTMLBody_Finalize(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(const void **)(DerivedStorage + 136);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 144);
  if (v3) {
    CFRelease(v3);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLBody_CopyDebugDesc(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"body: %@", v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t figTTMLBody_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLBody_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 2;
  return 0;
}

CFDictionaryRef FigCPEFairPlaySupportsFormatDescription(const opaqueCMFormatDescription *a1)
{
  unsigned int v5 = 0;
  CFDictionaryRef result = FigFairPlayCopySinfExtensionsFromFormatDescription(a1);
  if (result)
  {
    CFDictionaryRef v2 = result;
    int SchemeFromSinf = FigFairPlayGetSchemeFromSinf(result, &v5);
    CFRelease(v2);
    return (const __CFDictionary *)(!SchemeFromSinf && v5 == 1769239918);
  }
  return result;
}

uint64_t FigCPEFairPlayInitializeWithOptions(const __CFDictionary *a1, __CFString **a2)
{
  uint64_t Value = CFDictionaryGetValue(a1, @"StorageURL");
  FigBytePumpGetFigBaseObject(Value);
  if (Value) {
    CFRetain(Value);
  }
  else {
    uint64_t Value = FigFairPlayCopyDefaultKeybagFolderURL();
  }
  uint64_t v5 = FigFairPlaySharedContextLoad((const void *)*MEMORY[0x1E4F1CF80], Value, a1);
  if (!v5)
  {
    *a2 = FigFairPlayCopyAbsolutePathFromURL((const __CFURL *)Value);
    if (!Value) {
      return v5;
    }
    goto LABEL_6;
  }
  if (Value) {
LABEL_6:
  }
    CFRelease(Value);
  return v5;
}

uint64_t FigCPEFairPlayUninitialize(CFStringRef URLString)
{
  CFURLRef v1 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLString, 0);
  uint64_t v2 = FigFairPlaySharedContextUnload(v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t FigCPEFairPlayProtectorCreateForFormatDescriptions(const void *a1, const __CFDictionary *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v79 = 0;
  CFTypeRef cf = 0;
  CFMutableDictionaryRef context = 0;
  if (!a4) {
    return 4294955146;
  }
  CFAllocatorRef v4 = a4;
  MEMORY[0x19970EE10](&FigFairPlayCPEProtectorGetClassID_sRegisterFigFairPlayCPEProtectorTypeOnce, RegisterFigFairPlayCPEProtectorType);
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    uint64_t v16 = v8;
    goto LABEL_119;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_118;
  }
  uint64_t v10 = DerivedStorage;
  if (a1) {
    CFTypeRef v11 = CFRetain(a1);
  }
  else {
    CFTypeRef v11 = 0;
  }
  *(void *)uint64_t v10 = v11;
  *(void *)&long long v82 = 0;
  FigBytePumpGetFigBaseObject(v11);
  if (!a3
    || (uint64_t Value = CFDictionaryGetValue(a3, @"StorageURL")) == 0
    || (CFStringRef v13 = Value, v14 = CFGetTypeID(Value), v14 != CFURLGetTypeID())
    || (CFTypeRef v15 = CFRetain(v13)) == 0)
  {
    CFTypeRef v15 = FigFairPlayCopyDefaultKeybagFolderURL();
  }
  uint64_t v16 = FigFairPlaySharedContextCopyForKeybagURLAndClient(a1, v15, cf, &v82);
  if (!v16)
  {
    *(void *)(v10 + 8) = v82;
    *(void *)&long long v82 = 0;
  }
  if (v15) {
    CFRelease(v15);
  }
  if ((void)v82) {
    CFRelease((CFTypeRef)v82);
  }
  if (v16) {
    goto LABEL_119;
  }
  if (a3)
  {
    uint64_t v17 = CFDictionaryGetValue(a3, @"AE50A074-4909-4EBC-8ADF-C8DDD5F591AA");
    *(void *)(v10 + 48) = v17;
    if (v17)
    {
      CFTypeID v18 = CFGetTypeID(v17);
      if (v18 != CFDictionaryGetTypeID()) {
        goto LABEL_78;
      }
      uint64_t v19 = *(const void **)(v10 + 48);
      if (v19) {
        CFRetain(v19);
      }
    }
    CFBooleanRef v20 = CFDictionaryGetValue(a3, @"9692C034-625A-4B20-9D38-D1E9CF40B67F");
    *(void *)(v10 + 40) = v20;
    if (v20)
    {
      CFTypeID v21 = CFGetTypeID(v20);
      if (v21 != CFDictionaryGetTypeID()) {
        goto LABEL_78;
      }
      Float64 v22 = *(const void **)(v10 + 40);
      if (v22) {
        CFRetain(v22);
      }
    }
    CFBooleanRef v23 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"MonitorExternalProtectionState");
    if (v23)
    {
      CFBooleanRef v24 = v23;
      CFTypeID v25 = CFGetTypeID(v23);
      if (v25 == CFBooleanGetTypeID())
      {
        *(unsigned char *)(v10 + 73) = CFBooleanGetValue(v24);
        goto LABEL_31;
      }
LABEL_78:
      uint64_t v16 = 4294955136;
      goto LABEL_119;
    }
  }
LABEL_31:
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef context = Mutable;
    *(void *)(v10 + 16) = Mutable;
    if (Mutable)
    {
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)FormatDescriptionFilter, &context);
      *(void *)(v10 + 24) = v79;
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(v10 + 16)) < 1)
      {
        uint64_t v16 = 4294955141;
        goto LABEL_119;
      }
LABEL_37:
      uint64_t v27 = CMBaseObjectGetDerivedStorage();
      long long v82 = xmmword_194996620;
      CFDictionaryRef v28 = *(const __CFDictionary **)(v27 + 48);
      if (v28)
      {
        CFArrayRef v29 = (const __CFArray *)CFDictionaryGetValue(v28, @"sinfs");
        if (!v29) {
          goto LABEL_78;
        }
        CFArrayRef v30 = v29;
        CFTypeID v31 = CFGetTypeID(v29);
        if (v31 != CFArrayGetTypeID()) {
          goto LABEL_78;
        }
        int64_t Count = CFArrayGetCount(v30);
        if (Count < 1) {
          goto LABEL_78;
        }
        size_t v33 = Count;
        uint64_t v74 = v10;
        uint64_t v76 = v27;
        v75 = v4;
        uint64_t v34 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
        v35 = (const void **)malloc_type_calloc(v33, 8uLL, 0xC0040B8AA526DuLL);
        CFIndex v36 = 0;
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        v37 = v34;
        size_t v38 = v33;
        while (1)
        {
          LODWORD(valuePtr) = 0;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v36);
          if (!ValueAtIndex) {
            break;
          }
          CFDictionaryRef v40 = ValueAtIndex;
          CFTypeID v41 = CFGetTypeID(ValueAtIndex);
          if (v41 != CFDictionaryGetTypeID()) {
            break;
          }
          CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v40, @"id");
          if (!v42) {
            break;
          }
          CFNumberRef v43 = v42;
          CFTypeID v44 = CFGetTypeID(v42);
          if (v44 != CFNumberGetTypeID()
            || !CFNumberGetValue(v43, kCFNumberSInt32Type, &valuePtr)
            || (valuePtr & 0x80000000) != 0)
          {
            break;
          }
          if (valuePtr)
          {
            *v37 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(allocator, valuePtr, 0);
          }
          else
          {
            if (CFDictionaryGetCount(*(CFDictionaryRef *)(v76 + 16)) != 1) {
              goto LABEL_67;
            }
            CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v76 + 16), v37, 0);
            if (*v37) {
              CFRetain(*v37);
            }
          }
          double v45 = CFDictionaryGetValue(v40, @"sinf");
          long long v46 = CFDictionaryGetValue(v40, @"sinf2");
          CFDictionaryRef SinfExtensionsFromSinfData = FigFairPlayCreateSinfExtensionsFromSinfData((unint64_t)v45, (unint64_t)v46);
          v35[v36] = SinfExtensionsFromSinfData;
          if (!SinfExtensionsFromSinfData)
          {
            uint64_t v48 = CFDictionaryGetValue(v40, @"pinf");
            uint64_t v49 = CFDictionaryGetValue(v40, @"dpInfo");
            CFDictionaryRef SinfExtensionsFromSinfData = FigFairPlayCreateSinfExtensionsFromPinfData((unint64_t)v48, (unint64_t)v49);
            v35[v36] = SinfExtensionsFromSinfData;
          }
          if (!*v37 || !SinfExtensionsFromSinfData)
          {
LABEL_67:
            uint64_t v16 = 0;
            CFDictionaryRef v57 = 0;
            goto LABEL_68;
          }
          ++v36;
          ++v37;
          if (!--v38)
          {
            CFDictionaryRef v57 = CFDictionaryCreate(allocator, v34, v35, v33, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v16 = 0;
LABEL_68:
            int v58 = 1;
            goto LABEL_70;
          }
        }
        int v58 = 0;
        CFDictionaryRef v57 = 0;
        uint64_t v16 = 4294955136;
LABEL_70:
        for (uint64_t i = 0; i != v33; ++i)
        {
          uint64_t v60 = v34[i];
          if (v60) {
            CFRelease(v60);
          }
          v61 = v35[i];
          if (v61) {
            CFRelease(v61);
          }
        }
        free(v34);
        free(v35);
        if (!v58)
        {
          uint64_t v10 = v74;
          CFAllocatorRef v4 = v75;
          if (!v57) {
            goto LABEL_112;
          }
          goto LABEL_111;
        }
        uint64_t v10 = v74;
        CFAllocatorRef v4 = v75;
        uint64_t v27 = v76;
        if (!v57) {
          goto LABEL_78;
        }
      }
      else
      {
        CFIndex v50 = CFDictionaryGetCount(*(CFDictionaryRef *)(v27 + 16));
        size_t v51 = v50;
        if (v50 <= 0)
        {
          CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFDictionaryRef v57 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v50, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v53 = 0;
          uint64_t v52 = 0;
        }
        else
        {
          uint64_t v52 = (const void **)malloc_type_calloc(v50, 8uLL, 0x80040B8603338uLL);
          uint64_t v53 = (const void **)malloc_type_calloc(v51, 8uLL, 0x80040B8603338uLL);
          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v27 + 16), v52, v53);
          uint64_t v54 = 0;
          do
          {
            v53[v54] = FigFairPlayCopySinfExtensionsFromFormatDescription((const opaqueCMFormatDescription *)v53[v54]);
            ++v54;
          }
          while (v51 != v54);
          CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFDictionaryRef v57 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v52, v53, v51, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v55 = 0;
          do
          {
            double v56 = v53[v55];
            if (v56) {
              CFRelease(v56);
            }
            ++v55;
          }
          while (v51 != v55);
        }
        free(v52);
        free(v53);
      }
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(v27 + 16)) < 1)
      {
        BYTE9(v82) = 1;
      }
      else
      {
        *(void *)&long long v82 = v57;
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(v27 + 16), (CFDictionaryApplierFunction)SetProtectionInfoValidateEntry, &v82);
        if (!BYTE8(v82))
        {
          uint64_t v16 = 4294955136;
          if (!v57) {
            goto LABEL_112;
          }
          goto LABEL_111;
        }
      }
      BOOL v62 = *(const void **)(v27 + 32);
      *(void *)(v27 + 32) = v57;
      if (v57) {
        CFRetain(v57);
      }
      if (v62) {
        CFRelease(v62);
      }
      CFIndex v64 = (const void **)(v27 + 64);
      uint64_t v63 = *(void *)(v27 + 64);
      *(void *)(v27 + 80) = 0;
      if (BYTE9(v82))
      {
        if (v63)
        {
          if (FigCPEExternalProtectionMonitorGetMethods(v63)) {
            goto LABEL_110;
          }
          CFRange v65 = *v64;
        }
        else
        {
          CFRange v65 = 0;
        }
        CFTypeRef valuePtr = 0;
        uint64_t v66 = FigCPEExternalProtectionMonitorCreateForMethods(*(const __CFAllocator **)v27, 5u, 0, v65, &valuePtr);
        if (v66) {
          goto LABEL_123;
        }
        uint64_t v67 = *v64;
        CFTypeRef v68 = valuePtr;
        *CFIndex v64 = valuePtr;
        if (v68) {
          CFRetain(v68);
        }
        if (v67) {
          CFRelease(v67);
        }
        if (valuePtr) {
          CFRelease(valuePtr);
        }
      }
      else
      {
        if (v63) {
          goto LABEL_110;
        }
        uint64_t v66 = FigCPEExternalProtectionMonitorCreateForMethods(*(const __CFAllocator **)v27, 4u, 0, 0, (void *)(v27 + 64));
        if (v66)
        {
LABEL_123:
          uint64_t v16 = v66;
          if (!v57) {
            goto LABEL_112;
          }
          goto LABEL_111;
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v66 = FigNotificationCenterAddWeakListener();
      if (!v66)
      {
        if (!*(unsigned char *)(v27 + 73)
          || (FigCPEExternalProtectionMonitorBeginMonitoring(*(void *)(v27 + 64)),
              *(unsigned char *)(v27 + 72) = 1,
              CMNotificationCenterGetDefaultLocalCenter(),
              uint64_t v66 = FigNotificationCenterAddWeakListener(),
              !v66))
        {
LABEL_110:
          CFDictionaryRef v69 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v27 + 32), *(const void **)(v27 + 24));
          FigFairPlayGetSinfExtensionType(v69, (int *)(v27 + 56));
          uint64_t v16 = 0;
          if (!v57)
          {
LABEL_112:
            if (v16) {
              goto LABEL_119;
            }
            uint64_t v70 = FigSimpleMutexCreate();
            *(void *)(v10 + 96) = v70;
            if (v70)
            {
              dispatch_queue_t v71 = dispatch_queue_create("com.apple.fpcpefp.persistentrepo", 0);
              *(void *)(v10 + 128) = v71;
              if (v71)
              {
                CFMutableDictionaryRef v72 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                *(void *)(v10 + 120) = v72;
                if (v72)
                {
                  uint64_t v16 = 0;
                  *CFAllocatorRef v4 = cf;
                  return v16;
                }
              }
            }
            goto LABEL_118;
          }
LABEL_111:
          CFRelease(v57);
          goto LABEL_112;
        }
      }
      goto LABEL_123;
    }
LABEL_118:
    uint64_t v16 = 4294955145;
    goto LABEL_119;
  }
  if (*(unsigned char *)(v10 + 73))
  {
    *(void *)(v10 + 16) = CFDictionaryCreate((CFAllocatorRef)a1, 0, 0, 0, 0, 0);
    goto LABEL_37;
  }
  uint64_t v16 = 4294955146;
LABEL_119:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

void FormatDescriptionFilter(const void *a1, const opaqueCMFormatDescription *a2, uint64_t a3)
{
  CFDictionaryRef v6 = FigFairPlayCopySinfExtensionsFromFormatDescription(a2);
  if (v6)
  {
    CFDictionaryRef v7 = v6;
    unsigned int v8 = 0;
    if (!FigFairPlayGetSchemeFromSinf(v6, &v8) && v8 == 1769239918)
    {
      if (!*(void *)(a3 + 8)) {
        *(void *)(a3 + 8) = CFRetain(a1);
      }
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)a3, a1, a2);
    }
    CFRelease(v7);
  }
}

uint64_t FigCPEFairPlayProtectorCreateForFormatReader(const void *a1, uint64_t a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  uint64_t v34 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v10 = Mutable;
  if (!a2)
  {
    uint64_t v28 = 4294955146;
    if (!Mutable) {
      goto LABEL_35;
    }
LABEL_34:
    CFRelease(v10);
    goto LABEL_35;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFStringRef v13 = *(uint64_t (**)(uint64_t, uint64_t *))(v12 + 8);
  if (!v13) {
    goto LABEL_33;
  }
  CFArrayRef v30 = a4;
  uint64_t v14 = v13(a2, &v34);
  if (!v14)
  {
    if (v34 >= 1)
    {
      uint64_t v15 = 0;
      while (1)
      {
        unsigned int v32 = 0;
        CFArrayRef theArray = 0;
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v17 = v16 ? v16 : 0;
        CFTypeID v18 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void, unsigned int *))(v17 + 48);
        if (!v18) {
          break;
        }
        uint64_t v14 = v18(a2, v15, &cf, 0, &v32);
        if (v14) {
          goto LABEL_31;
        }
        uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v21 = v20 ? v20 : 0;
        Float64 v22 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v21 + 48);
        if (!v22) {
          break;
        }
        uint64_t v14 = v22(FigBaseObject, @"TrackFormatDescriptionArray", v8, &theArray);
        if (v14) {
          goto LABEL_31;
        }
        if (theArray)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v24 = Count;
            for (uint64_t i = 0; i != v24; ++i)
            {
              CFStringRef v26 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(v8, v32, i);
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
              CFDictionarySetValue(v10, v26, ValueAtIndex);
              if (v26) {
                CFRelease(v26);
              }
            }
          }
          if (theArray) {
            CFRelease(theArray);
          }
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (++v15 >= v34) {
          goto LABEL_30;
        }
      }
LABEL_33:
      uint64_t v28 = 4294954514;
      if (!v10) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_30:
    uint64_t v14 = FigCPEFairPlayProtectorCreateForFormatDescriptions(a1, v10, a3, v30);
  }
LABEL_31:
  uint64_t v28 = v14;
  if (v10) {
    goto LABEL_34;
  }
LABEL_35:
  if (cf) {
    CFRelease(cf);
  }
  return v28;
}

uint64_t FigCPEFairPlayProtectorCreate(const void *a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  if (!theDict) {
    return 4294955146;
  }
  if (CFDictionaryContainsKey(theDict, @"6519D6C3-E423-4DEA-811B-AA98B31B3180"))
  {
    return FigCPEFairPlayCloudProtectorCreate(a1, theDict, a3);
  }
  else
  {
    return FigCPEFairPlayProtectorCreateForFormatDescriptions(a1, 0, theDict, a3);
  }
}

uint64_t FigCPEFairPlayProtectorCheckInCryptRef(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v6 = malloc_type_malloc(0x18uLL, 0x6004082687C62uLL);
  *CFDictionaryRef v6 = DerivedStorage;
  if (a2) {
    CFTypeRef v7 = CFRetain(a2);
  }
  else {
    CFTypeRef v7 = 0;
  }
  v6[1] = v7;
  if (a3) {
    CFTypeRef v8 = CFRetain(a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  v6[2] = v8;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 128), v6, (dispatch_function_t)CheckInCryptRef);
  return 0;
}

void CheckInCryptRef(const void **a1)
{
  uint64_t v2 = (__CFDictionary *)*((void *)*a1 + 15);
  if (v2) {
    CFDictionarySetValue(v2, a1[1], a1[2]);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }
  CFAllocatorRef v4 = a1[2];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

uint64_t FigCPEFairPlayProtectorCheckOutCryptRef(uint64_t a1, uint64_t a2)
{
  context[0] = CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  uint64_t v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(context[0] + 128), context, (dispatch_function_t)CheckOutCryptRef);
  return v5;
}

void CheckOutCryptRef(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(*(void *)a1 + 120);
  if (v2)
  {
    uint64_t Value = CFDictionaryGetValue(v2, *(const void **)(a1 + 8));
    *(void *)(a1 + 16) = Value;
    if (Value)
    {
      CFRetain(Value);
      CFAllocatorRef v4 = *(const void **)(a1 + 8);
      uint64_t v5 = *(__CFDictionary **)(*(void *)a1 + 120);
      CFDictionaryRemoveValue(v5, v4);
    }
  }
}

BOOL FigFairPlayCPEProtectorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigFairPlayCPEProtectorInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    CFAllocatorRef v4 = *(const void **)(DerivedStorage + 16);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 16) = 0;
    }
    uint64_t v5 = *(const void **)(v3 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(v3 + 24) = 0;
    }
    CFDictionaryRef v6 = *(const void **)(v3 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v3 + 32) = 0;
    }
    CFTypeRef v7 = *(const void **)(v3 + 40);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v3 + 40) = 0;
    }
    CFTypeRef v8 = *(const void **)(v3 + 48);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v3 + 48) = 0;
    }
    uint64_t v9 = *(void *)(v3 + 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      if (v12) {
        v12(v9, a1);
      }
      CFStringRef v13 = *(const void **)(v3 + 8);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(v3 + 8) = 0;
      }
    }
    if (*(void *)v3)
    {
      CFRelease(*(CFTypeRef *)v3);
      *(void *)uint64_t v3 = 0;
    }
    uint64_t v14 = *(void *)(v3 + 64);
    if (v14)
    {
      if (*(unsigned char *)(v3 + 72)) {
        FigCPEExternalProtectionMonitorEndMonitoring(v14);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*(unsigned char *)(v3 + 73))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      uint64_t v15 = *(const void **)(v3 + 64);
      if (v15)
      {
        CFRelease(v15);
        *(void *)(v3 + 64) = 0;
      }
    }
    uint64_t v16 = *(const void **)(v3 + 104);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v3 + 104) = 0;
    }
    uint64_t v17 = *(const void **)(v3 + 112);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v3 + 112) = 0;
    }
    if (*(void *)(v3 + 96))
    {
      FigSimpleMutexDestroy();
      *(void *)(v3 + 96) = 0;
    }
    CFTypeID v18 = *(void **)(v3 + 88);
    if (v18)
    {
      FigFairPlayAirPlaySessionDestroy(v18);
      *(void *)(v3 + 88) = 0;
    }
    uint64_t v19 = *(NSObject **)(v3 + 128);
    if (v19) {
      dispatch_sync_f(v19, (void *)v3, (dispatch_function_t)DisposePersistentCryptRefRepository);
    }
    uint64_t v20 = *(const void **)(v3 + 136);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(v3 + 136) = 0;
    }
  }
  return 0;
}

void FigFairPlayCPEProtectorFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigFairPlayCPEProtectorInvalidate(a1);
  if (DerivedStorage)
  {
    uint64_t v3 = *(NSObject **)(DerivedStorage + 128);
    if (v3)
    {
      dispatch_sync_f(v3, 0, (dispatch_function_t)NoOp);
      CFAllocatorRef v4 = *(NSObject **)(DerivedStorage + 128);
      dispatch_release(v4);
    }
  }
}

__CFString *FigFairPlayCPEProtectorCopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(*(CFAllocatorRef *)DerivedStorage, 0);
  CFDictionaryRef v2 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"<FigFairPlayCPEProtector: sharedContext<%@>", *(void *)(DerivedStorage + 8));
  }
  return v2;
}

uint64_t FigFairPlayCPEProtectorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFString **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 4294955146;
  if (!a2 || !a4) {
    return v8;
  }
  uint64_t v9 = DerivedStorage;
  if (CFEqual(a2, @"DisplayList"))
  {
    uint64_t v10 = *(void *)(v9 + 64);
    return FigCPEExternalProtectionMonitorCopyProperty(v10, @"DisplayList", a3, (uint64_t)a4);
  }
  if (CFEqual(a2, @"ExternalProtectionRequiredForPlayback"))
  {
    if (FigCPEExternalProtectionMonitorGetMethods(*(void *)(v9 + 64)))
    {
LABEL_9:
      uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFD0];
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (CFEqual(a2, @"ApplicationAuthorizationChallengeProvider"))
  {
    CFStringRef v13 = @"ApplicationAuthorizationChallengeProviderNone";
    goto LABEL_64;
  }
  if (CFEqual(a2, @"IsRental"))
  {
    uint64_t v8 = IsRental(v9, 0);
    if (v8) {
      return v8;
    }
    CFStringRef v13 = *(__CFString **)(v9 + 104);
    if (!v13) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (CFEqual(a2, @"IsRentalPlaybackStarted"))
  {
    uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v15 = IsRental(v9, 0);
    if (v15)
    {
      uint64_t v8 = v15;
    }
    else if (CFBooleanGetValue(*(CFBooleanRef *)(v9 + 104)))
    {
      CFDictionaryRef theDict = 0;
      uint64_t v8 = CopyRentalInfo(v9, &theDict);
      if (!v8)
      {
        if (CFDictionaryContainsKey(theDict, @"RentalPlaybackPeriodStartDate")) {
          uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        if (theDict) {
          CFRelease(theDict);
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (v14) {
      CFStringRef v13 = (__CFString *)CFRetain(v14);
    }
    else {
      CFStringRef v13 = 0;
    }
    goto LABEL_66;
  }
  if (CFEqual(a2, @"RentalPeriodStartDate")
    || CFEqual(a2, @"RentalPeriodEndDate")
    || CFEqual(a2, @"RentalPlaybackPeriodStartDate")
    || CFEqual(a2, @"RentalPlaybackPeriodEndDate"))
  {
    CFDictionaryRef theDict = 0;
    uint64_t v8 = CopyRentalInfo(v9, &theDict);
    if (!v8)
    {
      uint64_t Value = (__CFString *)CFDictionaryGetValue(theDict, a2);
      if (Value) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = 4294955137;
      }
      if (Value) {
        uint64_t Value = (__CFString *)CFRetain(Value);
      }
      *a4 = Value;
      if (theDict) {
        CFRelease(theDict);
      }
    }
    return v8;
  }
  if (CFEqual(a2, @"ContentKind"))
  {
    CFTypeID v18 = (uint64_t *)(v9 + 80);
    uint64_t v17 = *(void *)(v9 + 80);
    if (!v17)
    {
      CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), *(const void **)(v9 + 24));
      if (FigFairPlayGetMediaKindFromSinf(v21, (uint64_t *)(v9 + 80)))
      {
        *CFTypeID v18 = 0;
        goto LABEL_52;
      }
      uint64_t v17 = *v18;
    }
    if (v17 <= 15)
    {
      switch(v17)
      {
        case 1:
          uint64_t v12 = kFigCPEContentKind_Song;
          break;
        case 2:
          uint64_t v12 = kFigCPEContentKind_Movie;
          break;
        case 4:
          uint64_t v12 = kFigCPEContentKind_Podcast;
          break;
        case 8:
          uint64_t v12 = kFigCPEContentKind_AudioBook;
          break;
        default:
          goto LABEL_52;
      }
LABEL_63:
      CFStringRef v13 = *v12;
      if (!*v12)
      {
LABEL_65:
        uint64_t v8 = 0;
LABEL_66:
        *a4 = v13;
        return v8;
      }
LABEL_64:
      CFStringRef v13 = (__CFString *)CFRetain(v13);
      goto LABEL_65;
    }
    switch(v17)
    {
      case 16:
        uint64_t v12 = kFigCPEContentKind_Booklet;
        goto LABEL_63;
      case 32:
        uint64_t v12 = kFigCPEContentKind_MusicVideo;
        goto LABEL_63;
      case 64:
        uint64_t v12 = kFigCPEContentKind_TVShow;
        goto LABEL_63;
    }
LABEL_52:
    uint64_t v12 = kFigCPEContentKind_Unknown;
    goto LABEL_63;
  }
  if (CFEqual(a2, @"AllowsImageGeneration"))
  {
    uint64_t v20 = (uint64_t *)(v9 + 80);
    uint64_t v19 = *(void *)(v9 + 80);
    if (v19) {
      goto LABEL_48;
    }
    CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), *(const void **)(v9 + 24));
    if (!FigFairPlayGetMediaKindFromSinf(v22, (uint64_t *)(v9 + 80)))
    {
      uint64_t v19 = *v20;
LABEL_48:
      if (v19 == 32) {
        goto LABEL_9;
      }
      goto LABEL_62;
    }
    *uint64_t v20 = 0;
LABEL_62:
    uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFC8];
    goto LABEL_63;
  }
  if (CFEqual(a2, @"IsAirPlayPossible"))
  {
    if (*(_DWORD *)(v9 + 56) == 1) {
      goto LABEL_9;
    }
    goto LABEL_62;
  }
  uint64_t v23 = *(void *)(v9 + 8);

  return FigCPECryptorCopyProperty(v23, (uint64_t)a2, a3, (uint64_t)a4);
}

uint64_t FigFairPlayCPEProtectorSetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(a2, @"DisplayList"))
  {
    CFTypeRef v7 = *(void **)(v6 + 64);
    return FigCPEExternalProtectionMonitorSetProperty(v7, @"DisplayList", a3);
  }
  else if (CFEqual(a2, @"NeroTransport"))
  {
    uint64_t v9 = *(const void **)(v6 + 136);
    *(void *)(v6 + 136) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v9) {
      CFRelease(v9);
    }
    return 0;
  }
  else
  {
    return 4294955144;
  }
}

uint64_t ExternalProtectionStatusChangedCallback_0()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t ExternalProtectionStateChangedCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

void DisposePersistentCryptRefRepository(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 120);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 120) = 0;
  }
}

uint64_t IsRental(uint64_t a1, Boolean *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 96));
  CFTypeRef v4 = *(CFTypeRef *)(a1 + 104);
  if (!v4)
  {
    BOOL v10 = 0;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), *(const void **)(a1 + 24));
    uint64_t IsRentalSinf = FigFairPlayIsRentalSinf(Value, &v10);
    if (IsRentalSinf)
    {
      uint64_t v8 = IsRentalSinf;
      goto LABEL_12;
    }
    if (v10) {
      CFTypeRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    else {
      CFTypeRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef v4 = *v7;
    if (*v7) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *(void *)(a1 + 104) = v4;
  }
  uint64_t v8 = 0;
  if (a2 && v4)
  {
    uint64_t v8 = 0;
    *a2 = CFBooleanGetValue((CFBooleanRef)v4);
  }
LABEL_12:
  MEMORY[0x19970E930](*(void *)(a1 + 96));
  return v8;
}

uint64_t CopyRentalInfo(uint64_t a1, void *a2)
{
  Boolean v27 = 0;
  unsigned int v4 = IsRental(a1, &v27);
  if (v4 | v27) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 4294955144;
  }
  if (!v5)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 96));
    if (!*(void *)(a1 + 112))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), *(const void **)(a1 + 24));
      CFDataRef BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(Value);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t FairPlayContext = GetFairPlayContext((uint64_t *)a1);
      BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
      CFIndex Length = CFDataGetLength(BestSinfFromSinfExtensions);
      RbFpir(FairPlayContext, (uint64_t)BytePtr, Length, (uint64_t)&v25);
      uint64_t v13 = FAIRPLAY_CALL_LOG(v12);
      if (v13)
      {
        uint64_t v5 = v13;
LABEL_21:
        MEMORY[0x19970E930](*(void *)(a1 + 96));
        return v5;
      }
      *(void *)(a1 + 112) = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      LODWORD(v14) = v25;
      double v15 = *MEMORY[0x1E4F1CF78];
      CFDateRef v16 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v14 - *MEMORY[0x1E4F1CF78]);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), @"RentalPeriodStartDate", v16);
      if (v16) {
        CFRelease(v16);
      }
      LODWORD(v18) = HIDWORD(v25);
      LODWORD(v17) = v25;
      CFDateRef v19 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v17 + (double)v18 - v15);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), @"RentalPeriodEndDate", v19);
      if (v19) {
        CFRelease(v19);
      }
      if (v26 != -1)
      {
        CFDateRef v20 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v26 - v15);
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), @"RentalPlaybackPeriodStartDate", v20);
        if (v20) {
          CFRelease(v20);
        }
        LODWORD(v22) = HIDWORD(v26);
        LODWORD(v21) = v26;
        CFDateRef v23 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v21 + (double)v22 - v15);
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), @"RentalPlaybackPeriodEndDate", v23);
        if (v23) {
          CFRelease(v23);
        }
      }
    }
    if (a2)
    {
      CFTypeRef v6 = *(CFTypeRef *)(a1 + 112);
      if (v6) {
        CFTypeRef v6 = CFRetain(v6);
      }
      uint64_t v5 = 0;
      *a2 = v6;
    }
    else
    {
      uint64_t v5 = 0;
    }
    goto LABEL_21;
  }
  return v5;
}

uint64_t GetFairPlayContext(uint64_t *a1)
{
  CFNumberRef number = 0;
  unsigned int valuePtr = 0;
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(v4 + 48);
  if (v5)
  {
    if (!v5(v1, 0x1EE571CB8, v2, &number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (number) {
        CFRelease(number);
      }
    }
  }
  return valuePtr;
}

uint64_t FigFairPlayCPEProtectorCreateCryptorForFormatDescriptionIdentifier(const void *a1, const void *a2, int a3, const __CFDictionary *a4, const void *a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (!a5 || !DerivedStorage) {
    return result;
  }
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 16), a5)) {
    return 4294955132;
  }
  int v21 = 0;
  unint64_t v14 = a4 ? (__SecTask *)CFDictionaryGetValue(a4, @"ClientSecTask") : 0;
  int IsApplicationAuthorizedWithEntitlement = FigFairPlayCPEProtectorIsApplicationAuthorizedWithEntitlement((uint64_t)a1, v14, a3, &v21);
  uint64_t result = 4294955135;
  if (IsApplicationAuthorizedWithEntitlement || v21 != a3) {
    return result;
  }
  if (!a4)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a5);
    goto LABEL_16;
  }
  CFDateRef v16 = CFDictionaryGetValue(a4, @"Destination");
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a5);
  if (!v16 || CFEqual(v16, @"DestinationLocal"))
  {
LABEL_16:
    CFDateRef v19 = (const opaqueCMFormatDescription *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a5);
    uint64_t result = FigFairPlayCPECryptorCreate(a1, a2, a3, v19, Value, *(const void **)(DerivedStorage + 40), *(const void **)(DerivedStorage + 64), a6);
    if (result) {
      return result;
    }
    goto LABEL_17;
  }
  if (!CFEqual(v16, @"DestinationNero")) {
    return 4294955136;
  }
  unint64_t v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a5);
  uint64_t result = FigFairPlayOctaviaCPECryptorCreate(a1, a2, a3, (uint64_t)v18, Value, *(void **)(DerivedStorage + 64), *(const void **)(DerivedStorage + 136), a6);
  if (!result)
  {
LABEL_17:
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    CFDateRef v20 = *(const void **)(DerivedStorage + 112);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 112) = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 96));
    return 0;
  }
  return result;
}

CFIndex FigFairPlayCPEProtectorIsApplicationAuthorizedWithEntitlement(uint64_t a1, __SecTask *a2, int a3, int *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFErrorRef error = 0;
  char v18 = 1;
  CFIndex Code = 4294955146;
  if (!a4) {
    goto LABEL_19;
  }
  if (!a2) {
    goto LABEL_19;
  }
  uint64_t v9 = DerivedStorage;
  if (!DerivedStorage) {
    goto LABEL_19;
  }
  uint64_t v11 = (void *)(DerivedStorage + 80);
  uint64_t v10 = *(void *)(DerivedStorage + 80);
  if (v10)
  {
    if ((v10 & 0x1000) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), *(const void **)(DerivedStorage + 24));
    if (FigFairPlayGetMediaKindFromSinf(Value, (uint64_t *)(v9 + 80)))
    {
      void *v11 = 0;
    }
    else if ((*v11 & 0x1000) != 0)
    {
LABEL_6:
      CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), *(const void **)(v9 + 24));
      FigFairPlayIsPreviewEncrypted(v12, (BOOL *)&v18);
      if (v18) {
        CFStringRef v13 = @"com.apple.coremedia.allow-preview-encrypted-tone-playback";
      }
      else {
        CFStringRef v13 = @"com.apple.coremedia.allow-protected-content-playback";
      }
      goto LABEL_13;
    }
  }
  char v18 = 0;
  CFStringRef v13 = @"com.apple.coremedia.allow-protected-content-playback";
LABEL_13:
  CFTypeRef v15 = SecTaskCopyValueForEntitlement(a2, v13, &error);
  if (!error)
  {
    CFIndex Code = 0;
    if (v15 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
      int v16 = 3;
    }
    else {
      int v16 = 0;
    }
    *a4 = v16 & a3;
    if (!v15) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  CFIndex Code = CFErrorGetCode(error);
  if (v15) {
LABEL_18:
  }
    CFRelease(v15);
LABEL_19:
  if (error) {
    CFRelease(error);
  }
  return Code;
}

uint64_t FigFairPlayCPEProtectorIsContentAuthorized(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a3)
  {
    if (DerivedStorage)
    {
      *a3 = 0;
      uint64_t result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), *(const void **)(DerivedStorage + 24));
      if (result)
      {
        if (*(_DWORD *)(DerivedStorage + 56) == 2)
        {
          *(unsigned char *)(DerivedStorage + 60) = 1;
LABEL_6:
          uint64_t result = 0;
          *a3 = a2;
          return result;
        }
        CFDictionaryRef v7 = (const __CFDictionary *)result;
        long long v15 = 0u;
        long long v16 = 0u;
        CFDataRef LegacySinfFromSinfExtensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions((const __CFDictionary *)result);
        if (LegacySinfFromSinfExtensions)
        {
          CFDataRef v9 = LegacySinfFromSinfExtensions;
          *((void *)&v15 + 1) = CFDataGetBytePtr(LegacySinfFromSinfExtensions);
          LODWORD(v15) = CFDataGetLength(v9);
        }
        CFDataRef ExtendedSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetExtendedSinfFromSinfExtensions(v7);
        if (ExtendedSinfFromSinfExtensions)
        {
          CFDataRef v11 = ExtendedSinfFromSinfExtensions;
          *((void *)&v16 + 1) = CFDataGetBytePtr(ExtendedSinfFromSinfExtensions);
          LODWORD(v16) = CFDataGetLength(v11);
        }
        uint64_t FairPlayContext = GetFairPlayContext((uint64_t *)DerivedStorage);
        HN0R(FairPlayContext, (uint64_t)&v15);
        int v14 = FAIRPLAY_CALL_LOG(v13);
        if (v14 == -42072)
        {
          uint64_t result = 0;
          *(_WORD *)(DerivedStorage + 60) = 257;
        }
        else
        {
          *(unsigned char *)(DerivedStorage + 60) = 1;
          if (!v14) {
            goto LABEL_6;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorGetAggregateExternalProtectionStatus(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      int Status = FigCPEExternalProtectionMonitorGetStatus(*(void *)(DerivedStorage + 64));
      uint64_t result = 0;
      *a2 = Status;
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorGetAggregateExternalProtectionState(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && DerivedStorage)
  {
    if (*(unsigned char *)(DerivedStorage + 73))
    {
      int State = FigCPEExternalProtectionMonitorGetState(*(void *)(DerivedStorage + 64), 7);
      uint64_t result = 0;
      *a2 = State;
    }
    else
    {
      return 4294955137;
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorBeginAirPlaySessionAsync(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[11])
  {
    uint64_t v11 = 4294955138;
    goto LABEL_4;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t FairPlayContext = GetFairPlayContext(DerivedStorage);
  uint64_t v10 = (void *)FigFairPlayAirPlaySessionCreateWithProtectionInfo(FairPlayContext, v8[4], a2);
  v8[11] = (uint64_t)v10;
  if (!v10)
  {
    uint64_t v11 = 4294955145;
    goto LABEL_4;
  }
  uint64_t v11 = FigFairPlayAirPlaySessionBeginAsync(v10, a3, a4);
  if (v11) {
LABEL_4:
  }
    FigFairPlayCPEProtectorEndAirPlaySession();
  return v11;
}

uint64_t FigFairPlayCPEProtectorEndAirPlaySession()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955146;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t result = *(void *)(DerivedStorage + 88);
  if (result)
  {
    FigFairPlayAirPlaySessionDestroy((void *)result);
    uint64_t result = 0;
    *(void *)(v1 + 88) = 0;
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorCopyPropertyForFormatDescriptionIdentifierAndRights(uint64_t a1, const void *a2, char a3, const void *a4, uint64_t a5, void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && DerivedStorage && a4 && a6)
  {
    if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 32), a2)) {
      return 4294955132;
    }
    if (!CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F1FD80])) {
      return 4294954509;
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a2);
    BOOL v21 = 0;
    CFDataRef LegacySinfFromSinfExtensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions(Value);
    if (LegacySinfFromSinfExtensions)
    {
      CFDataRef v14 = LegacySinfFromSinfExtensions;
      CFDataGetBytePtr(LegacySinfFromSinfExtensions);
      CFDataGetLength(v14);
    }
    CFDataRef ExtendedSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetExtendedSinfFromSinfExtensions(Value);
    if (ExtendedSinfFromSinfExtensions)
    {
      CFDataRef v16 = ExtendedSinfFromSinfExtensions;
      CFDataGetBytePtr(ExtendedSinfFromSinfExtensions);
      CFDataGetLength(v16);
    }
    int IsLowValueSinf = FigFairPlayIsLowValueSinf(Value, &v21);
    if (v21) {
      int v18 = IsLowValueSinf;
    }
    else {
      int v18 = -42042;
    }
    if (v18 > -42032)
    {
      if (v18)
      {
        int v19 = -42031;
LABEL_20:
        if (v18 != v19) {
          goto LABEL_23;
        }
      }
    }
    else if (v18 != -42407)
    {
      int v19 = -42403;
      goto LABEL_20;
    }
    if ((a3 & 5) != 0)
    {
      CFDateRef v20 = (void *)MEMORY[0x1E4F1CFD0];
LABEL_24:
      uint64_t result = 0;
      *a6 = *v20;
      return result;
    }
LABEL_23:
    CFDateRef v20 = (void *)MEMORY[0x1E4F1CFC8];
    goto LABEL_24;
  }
  return result;
}

uint64_t RegisterFigFairPlayCPEProtectorType()
{
  FigCPEProtectorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlayCPEProtectorCopyFormattingDesc()
{
  return CFRetain(@"[FigFPCPEProtector]");
}

uint64_t SetProtectionInfoValidateEntry(uint64_t key, const opaqueCMFormatDescription *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 8))
  {
    key = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)a3, (const void *)key);
    *(unsigned char *)(a3 + 8) = key != 0;
    if (key)
    {
      int v6 = *(unsigned __int8 *)(a3 + 9);
      uint64_t v5 = (BOOL *)(a3 + 9);
      if (!v6)
      {
        CFDictionaryRef v7 = (const __CFDictionary *)key;
        key = CMFormatDescriptionGetMediaType(a2);
        if (key == 1986618469)
        {
          return FigFairPlayIsHDCPRequiredSinf(v7, v5);
        }
      }
    }
  }
  return key;
}

uint64_t figCSSStyleSheetRegisterFigCSSStyleSheet()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCSSStyleSheetID = result;
  return result;
}

uint64_t FigCSSStyleSheetCreate(uint64_t a1, uint64_t *a2)
{
  if (a2
    && (MEMORY[0x19970EE10](&FigCSSStyleSheetGetTypeID_sRegisterFigCSSStyleSheetOnce, figCSSStyleSheetRegisterFigCSSStyleSheet), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleSheetCopyRuleList(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 16);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *a2 = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleSheetSetRuleList(uint64_t a1, CFTypeRef cf)
{
  if (a1 && cf)
  {
    CFTypeRef v3 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = cf;
    CFRetain(cf);
    if (v3) {
      CFRelease(v3);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figCSSRuleListRegisterFigCSSRuleList()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCSSRuleListID = result;
  return result;
}

uint64_t FigCSSRuleListCreate(uint64_t a1, uint64_t *a2)
{
  if (a2
    && (MEMORY[0x19970EE10](&FigCSSRuleListGetTypeID_sRegisterFigCSSRuleListOnce, figCSSRuleListRegisterFigCSSRuleList),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFIndex FigCSSRuleListGetLength(uint64_t a1)
{
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  CFArrayRef v1 = *(const __CFArray **)(a1 + 16);
  if (!v1) {
    return 0;
  }

  return CFArrayGetCount(v1);
}

uint64_t FigCSSRuleListCopyRuleAtIndex(uint64_t a1, CFIndex idx, CFTypeRef *a3, _DWORD *a4)
{
  if (!a1) {
    goto LABEL_12;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((idx & 0x8000000000000000) == 0
    && (uint64_t)Count > idx
    && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx)) != 0)
  {
    uint64_t v10 = ValueAtIndex;
    if (a3) {
      *a3 = CFRetain(ValueAtIndex);
    }
    if (a4) {
      *a4 = v10[4];
    }
    return 0;
  }
  else
  {
LABEL_12:
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSRuleListAppendRule(void *cf, void *value)
{
  if (cf
    && value
    && ((CFMutableDictionaryRef Mutable = (__CFArray *)cf[2]) != 0
     || (CFAllocatorRef v5 = CFGetAllocator(cf), Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]), (cf[2] = Mutable) != 0)))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figCSSRuleRegisterFigCSSRule()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCSSRuleID = result;
  return result;
}

uint64_t FigCSSRuleCreate(uint64_t a1, int a2, uint64_t *a3)
{
  if (a3
    && (MEMORY[0x19970EE10](&FigCSSRuleGetTypeID_sRegisterFigCSSRuleOnce, figCSSRuleRegisterFigCSSRule),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    *(_DWORD *)(Instance + 16) = a2;
    *a3 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleRuleCopySelector(uint64_t a1, void *a2)
{
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 1)
  {
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 24);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *a2 = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleRuleCopyDeclaration(uint64_t a1, void *a2)
{
  if (a1 && a2 && *(_DWORD *)(a1 + 16) == 1)
  {
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 32);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *a2 = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleRuleSetSelector(uint64_t a1, CFTypeRef cf)
{
  if (a1 && cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFStringGetTypeID()) && *(_DWORD *)(a1 + 16) == 1)
  {
    CFAllocatorRef v5 = *(const void **)(a1 + 24);
    *(void *)(a1 + 24) = cf;
    CFRetain(cf);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleRuleSetDeclaration(uint64_t a1, CFTypeRef cf)
{
  if (a1
    && cf
    && (CFTypeID v4 = CFGetTypeID(cf),
        MEMORY[0x19970EE10](&FigCSSStyleDeclarationGetTypeID_sRegisterFigCSSStyleDeclarationOnce, figCSSStyleDeclarationRegisterFigCSSStyleDeclaration), v4 == sFigCSSStyleDeclarationID)&& *(_DWORD *)(a1 + 16) == 1)
  {
    CFAllocatorRef v5 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = cf;
    CFRetain(cf);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figCSSStyleDeclarationRegisterFigCSSStyleDeclaration()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCSSStyleDeclarationID = result;
  return result;
}

uint64_t FigCSSStyleDeclarationCreate(uint64_t a1, uint64_t *a2)
{
  if (a2
    && (MEMORY[0x19970EE10](&FigCSSStyleDeclarationGetTypeID_sRegisterFigCSSStyleDeclarationOnce, figCSSStyleDeclarationRegisterFigCSSStyleDeclaration), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    *a2 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleDeclarationCopyPropertyNameAtIndex(uint64_t a1, CFIndex idx, void *a3)
{
  if (!a1 || !a3) {
    goto LABEL_10;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((idx & 0x8000000000000000) == 0 && (uint64_t)Count > idx)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
    if (ValueAtIndex) {
      CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
    }
    *a3 = ValueAtIndex;
    return 0;
  }
  else
  {
LABEL_10:
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSStyleDeclarationCopyPropertyValue(uint64_t a1, const void *a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 24);
    if (v4)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, a2);
      if (Value && (int v6 = CFDictionaryGetValue(Value, @"value")) != 0)
      {
        CFTypeRef v7 = CFRetain(v6);
        uint64_t result = 0;
        *a3 = v7;
      }
      else
      {
        return 4294949477;
      }
    }
    else
    {
      return 4294949478;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCSSStyleDeclarationSetPropertyInfo(CFTypeRef cf, void *key, const void *a3, int a4)
{
  if (!cf || !key || !a3) {
    goto LABEL_19;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)*((void *)cf + 3);
  if (v8 && CFDictionaryGetValue(v8, key))
  {
    CFArrayRef v9 = (const __CFArray *)*((void *)cf + 2);
    if (v9)
    {
      v10.length = CFArrayGetCount(v9);
      CFArrayRef v9 = (const __CFArray *)*((void *)cf + 2);
    }
    else
    {
      v10.length = 0;
    }
    v10.location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v9, v10, key);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)cf + 2), FirstIndexOfValue);
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)cf + 3), key);
    }
  }
  if (!*((void *)cf + 2))
  {
    CFAllocatorRef v12 = CFGetAllocator(cf);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
    *((void *)cf + 2) = Mutable;
    if (!Mutable) {
      goto LABEL_19;
    }
  }
  if ((*((void *)cf + 3)
     || (CFAllocatorRef v14 = CFGetAllocator(cf),
         CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
         (*((void *)cf + 3) = v15) != 0))
    && (CFAllocatorRef v16 = CFGetAllocator(cf),
        (unint64_t v17 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
  {
    int v18 = v17;
    CFDictionarySetValue(v17, @"value", a3);
    if (a4) {
      CFDictionarySetValue(v18, @"important", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    CFArrayAppendValue(*((CFMutableArrayRef *)cf + 2), key);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)cf + 3), key, v18);
    CFRelease(v18);
    return 0;
  }
  else
  {
LABEL_19:
    return FigSignalErrorAt();
  }
}

uint64_t figCSSStyleSheet_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void figCSSStyleSheet_Finalize(uint64_t a1)
{
  CFArrayRef v1 = *(const void **)(a1 + 16);
  if (v1) {
    CFRelease(v1);
  }
}

CFStringRef figCSSStyleSheet_CopyFormattingDesc(uint64_t a1)
{
  uint64_t v2 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigCSSStyleSheet [%p]\n %@>", a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

CFStringRef figCSSStyleSheet_CopyDebugDesc(uint64_t a1)
{
  uint64_t v2 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCSSStyleSheet %p] %@", a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

uint64_t figCSSRuleList_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void figCSSRuleList_Finalize(uint64_t a1)
{
  CFArrayRef v1 = *(const void **)(a1 + 16);
  if (v1) {
    CFRelease(v1);
  }
}

__CFString *figCSSRuleList_CopyFormattingDesc(CFArrayRef *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCSSRuleList [%p]\n", a1);
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = a1[2];
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFArrayGetValueAtIndex(a1[2], i);
    int v6 = (const void *)FigCFCopyCompactDescription();
    CFStringAppendFormat(Mutable, 0, @"    rule[%ld] = %@\n", i, v6);
    if (v6) {
      CFRelease(v6);
    }
  }
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

CFStringRef figCSSRuleList_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCSSRuleList %p] [%@]", a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

void *figCSSRule_Init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figCSSRule_Finalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *figCSSRule_CopyFormattingDesc(unsigned int *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFGetAllocator(a1);
  CFDictionaryRef v4 = _figCSSObjModel_MapRuleTypeToString(a1[4]);
  CFAllocatorRef v5 = (const void *)FigCFCopyCompactDescription();
  int v6 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"<FigCSSRule [%p]\n", a1);
  CFStringAppendFormat(Mutable, 0, @"    ruleType = %@ selector = %@\n", v4, v5);
  CFStringAppendFormat(Mutable, 0, @"    %@\n", v6);
  CFStringAppendFormat(Mutable, 0, @">");
  CFRelease(v4);
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

CFStringRef figCSSRule_CopyDebugDesc(unsigned int *a1)
{
  CFGetAllocator(a1);
  CFAllocatorRef v2 = _figCSSObjModel_MapRuleTypeToString(a1[4]);
  CFStringRef v3 = (const void *)FigCFCopyCompactDescription();
  CFDictionaryRef v4 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCSSRule %p] %@ %@ : %@", a1, v2, v3, v4);
  CFRelease(v2);
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

__CFString *_figCSSObjModel_MapRuleTypeToString(unsigned int a1)
{
  if (a1 < 9) {
    return off_1E57A3680[a1];
  }
  FigSignalErrorAt();
  return @"Invalid";
}

uint64_t figCSSStyleDeclaration_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void figCSSStyleDeclaration_Finalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *figCSSStyleDeclaration_CopyFormattingDesc(CFArrayRef *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCSSStyleDeclaration [%p] {\n", a1);
  CFIndex v4 = 0;
  CFStringRef v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  while (1)
  {
    CFArrayRef Count = a1[2];
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v4 >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1[2], v4);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1[3], ValueAtIndex);
    if (!Value)
    {
      uint64_t v11 = (const void *)FigCFCopyCompactDescription();
LABEL_11:
      uint64_t v13 = &stru_1EE53F4B8;
      goto LABEL_12;
    }
    CFDictionaryRef v9 = Value;
    CFDictionaryGetValue(Value, @"value");
    CFRange v10 = CFDictionaryGetValue(v9, @"important");
    uint64_t v11 = (const void *)FigCFCopyCompactDescription();
    if (!v10) {
      goto LABEL_11;
    }
    int v12 = CFEqual(v10, v5);
    uint64_t v13 = @"!important";
    if (!v12) {
      uint64_t v13 = &stru_1EE53F4B8;
    }
LABEL_12:
    CFStringAppendFormat(Mutable, 0, @"    %@ : %@ %@\n", ValueAtIndex, v11, v13);
    if (v11) {
      CFRelease(v11);
    }
    ++v4;
  }
  CFStringAppendFormat(Mutable, 0, @"} >");
  return Mutable;
}

CFStringRef figCSSStyleDeclaration_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v3 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"** [FigCSSStyleDeclaration <%p> names = {%@} properties = {%@} ]", a1, v2, v3);
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v4;
}

uint64_t FigCaptionGroupConverterToSampleBufferGetClassID()
{
  return sFigCaptionGroupConverterToSampleBufferClassID;
}

uint64_t RegisterFigCaptionGroupConverterToSampleBufferType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigCaptionGroupConverterToSampleBufferCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptionGroupConverterToSampleBuffer %p]", a1);
}

uint64_t FigPWDKeyExchangeSenderCreateForAOCP(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = (void *)MEMORY[0x199711A30]();
  if (!a4)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_8;
  }
  FigPWDKeyExchangeSenderGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    goto LABEL_10;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
LABEL_11:
    uint64_t v11 = 4294947756;
    goto LABEL_8;
  }
  CFDictionaryRef v9 = (void *)DerivedStorage;
  *(_DWORD *)(DerivedStorage + 24) = 0;
  *(void *)(DerivedStorage + 32) = 0;
  if (!a2
    || (*(_OWORD *)(DerivedStorage + 64) = *(_OWORD *)a2,
        *(void *)(DerivedStorage + 80) = *(void *)(a2 + 16),
        *(void *)(DerivedStorage + 88) = *(void *)(a2 + 24),
        !*(void *)(a2 + 8)))
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_10:
    uint64_t v11 = v7;
    goto LABEL_8;
  }
  *(void *)(DerivedStorage + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v9[13] = FigDispatchQueueCreateWithPriority();
  uint64_t v10 = FigSimpleMutexCreate();
  v9[2] = v10;
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = 0;
  v9[14] = [[FigPWDKeyExchangeSenderServerHelper alloc] initWithKeyServerURLString:0 certServerURLString:0];
  *a4 = 0;
LABEL_8:
  return v11;
}

uint64_t pwdKeyExchangeSenderAOCP_Finalize()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 40);
    if (v2)
    {
      JE2f6WCx(v2);
      *(void *)(v1 + 40) = 0;
    }
    *(void *)(v1 + 32) = 0;
    *(_DWORD *)(v1 + 24) = 0;
    CFStringRef v3 = *(const void **)(v1 + 96);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 96) = 0;
    }
    CFStringRef v4 = *(const void **)(v1 + 56);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v1 + 56) = 0;
    }
    CFStringRef v5 = *(NSObject **)(v1 + 104);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(v1 + 104) = 0;
    }
    int v6 = *(void **)(v1 + 112);
    if (v6)
    {

      *(void *)(v1 + 112) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *pwdKeyExchangeSenderAOCP_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPWDKeyExchangeSenderAOCP %p>", a1);
  return Mutable;
}

uint64_t pwdKeyExchangeSenderAOCP_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 4294947752;
  if (a2 && a4)
  {
    uint64_t v8 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
    if (CFEqual(a2, @"PWDEncryptor"))
    {
      if (*(void *)(v8 + 48))
      {
        uint64_t UInt64 = FigCFNumberCreateUInt64();
        *a4 = UInt64;
        if (UInt64) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = 4294947756;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    MEMORY[0x19970E930](*(void *)(v8 + 16));
  }
  return v7;
}

uint64_t pwdKeyExchangeSenderAOCP_SetProperty()
{
  return 0;
}

uint64_t pwdKeyExchangeSenderAOCP_Start(uint64_t a1)
{
  uint64_t v25 = 0;
  int v24 = 0;
  if (a1)
  {
    FigPWDKeyExchangeSenderGetCMBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFDataRef v3 = *(const __CFData **)(DerivedStorage + 56);
    if (v3 || (FigPWDKeyExchangeSenderAOCP_getCertificate(a1), (CFDataRef v3 = *(const __CFData **)(DerivedStorage + 56)) != 0))
    {
      BytePtr = CFDataGetBytePtr(v3);
      int Length = CFDataGetLength(*(CFDataRef *)(DerivedStorage + 56));
      if (Qhl17oSYJtCJIxM((uint64_t)BytePtr, Length, (uint64_t)&VERSION, 8, (uint64_t)&v25)) {
        return FigSignalErrorAt();
      }
      *(void *)(DerivedStorage + 32) = v25;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        return FigSignalErrorAt();
      }
      uint64_t v8 = Mutable;
      CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v9)
      {
        uint64_t v19 = FigSignalErrorAt();
        CFDateRef v20 = v8;
        goto LABEL_20;
      }
      CFDictionaryRef v10 = v9;
      FigCFDictionarySetInt32();
      CFDictionarySetValue(v8, @"Y7bdIsnh7", *(const void **)(DerivedStorage + 56));
      if (nS1Q9ljw9esy9((uint64_t)v8, (uint64_t)v10))
      {
        uint64_t v19 = FigSignalErrorAt();
LABEL_19:
        CFRelease(v8);
        CFDateRef v20 = v10;
LABEL_20:
        CFRelease(v20);
        return v19;
      }
      FigCFDictionaryGetInt32IfPresent();
      CFDictionaryRef Value = CFDictionaryGetValue(v10, @"xNJu5eepP");
      *(_DWORD *)(DerivedStorage + 24) = v24;
      int v12 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v12, @"payload", Value);
      int valuePtr = 1936745330;
      CFNumberRef v13 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
      if (v13)
      {
        CFNumberRef v14 = v13;
        CFDictionarySetValue(v12, @"opcode", v13);
        CFRelease(v14);
      }
      CFDataRef Data = CFPropertyListCreateData(v6, v12, kCFPropertyListBinaryFormat_v1_0, 0, 0);
      if (*(void *)(DerivedStorage + 72))
      {
        CFAllocatorRef v16 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        if (!v16)
        {
          uint64_t v19 = FigSignalErrorAt();
          if (!v12)
          {
LABEL_17:
            if (Data) {
              CFRelease(Data);
            }
            goto LABEL_19;
          }
LABEL_16:
          CFRelease(v12);
          goto LABEL_17;
        }
        unint64_t v17 = v16;
        CFRetain(v16);
        if (Data) {
          CFRetain(Data);
        }
        int v18 = *(NSObject **)(DerivedStorage + 104);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __pwdKeyExchangeSenderAOCP_Start_block_invoke;
        block[3] = &__block_descriptor_56_e5_v8__0l;
        block[4] = DerivedStorage;
        block[5] = v17;
        block[6] = Data;
        dispatch_async(v18, block);
        CFRelease(v17);
      }
      uint64_t v19 = 0;
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  return FigSignalErrorAt();
}

uint64_t pwdKeyExchangeSenderAOCP_Stop()
{
  return 4294947755;
}

uint64_t pwdKeyExchangeSenderAOCP_ProcessIncomingMessage(uint64_t a1, const __CFData *a2)
{
  int v36 = 0;
  CFErrorRef error = 0;
  if (a1 && a2)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v4 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0, 0, &error);
    if (!v4) {
      return FigSignalErrorAt();
    }
    CFDictionaryRef v5 = v4;
    FigCFDictionaryGetInt32IfPresent();
    if (!v36
      || (CFAllocatorRef v6 = CFDictionaryGetValue(v5, @"payload")) == 0
      || v36 != 1667982195
      || (uint64_t v7 = v6,
          strcpy(__s, "one"),
          uint64_t v37 = 0,
          FigPWDKeyExchangeSenderGetCMBaseObject(a1),
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
          (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
    {
      uint64_t v30 = FigSignalErrorAt();
      goto LABEL_38;
    }
    CFDictionaryRef v10 = Mutable;
    CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v11)
    {
      uint64_t v30 = FigSignalErrorAt();
      CFTypeID v31 = v10;
      goto LABEL_36;
    }
    CFDictionaryRef v12 = v11;
    FigCFDictionarySetInt32();
    CFNumberRef v13 = *(const void **)(DerivedStorage + 56);
    if (!v13)
    {
      FigPWDKeyExchangeSenderAOCP_getCertificate(a1);
      CFNumberRef v13 = *(const void **)(DerivedStorage + 56);
      if (!v13) {
        goto LABEL_47;
      }
    }
    CFDictionarySetValue(v10, @"Y7bdIsnh7", v13);
    FigCFDictionarySetInt32();
    CFDictionarySetValue(v10, @"yN1lNULD2GD", v7);
    FigCFDictionarySetInt64();
    unsigned int v14 = strlen(__s);
    CFDataRef v15 = CFDataCreate(v3, (const UInt8 *)__s, v14);
    if (!v15)
    {
LABEL_47:
      uint64_t v30 = FigSignalErrorAt();
      goto LABEL_35;
    }
    CFDataRef v16 = v15;
    CFDictionarySetValue(v10, @"HJN6grNt", v15);
    if (pC3lVfLuVJLMz((uint64_t)v10, (uint64_t)v12)) {
      goto LABEL_44;
    }
    FigCFDictionaryGetInt64IfPresent();
    if (!v37) {
      goto LABEL_44;
    }
    *(void *)(DerivedStorage + 40) = v37;
    CFDataRef v17 = (const __CFData *)CFDictionaryGetValue(v12, @"yN1lNULD2GD");
    if (!v17) {
      goto LABEL_44;
    }
    CFDataRef v18 = v17;
    uint64_t v19 = (void *)MEMORY[0x199711A30]();
    CFTypeRef v41 = 0;
    values = 0;
    value = 0;
    FigPWDKeyExchangeSenderGetCMBaseObject(a1);
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v21)
    {
      int v28 = FigSignalErrorAt();
      CFDateRef v23 = 0;
      CFArrayRef v27 = 0;
      goto LABEL_24;
    }
    unint64_t v22 = v21;
    uint64_t v33 = v20;
    CFDateRef v23 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v23
      && (uint64_t v34 = v19,
          CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
          (values = v24) != 0))
    {
      uint64_t v25 = v24;
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      CFDictionarySetValue(v25, @"uri", &stru_1EE53F4B8);
      CFDataGetBytePtr(v18);
      CFDataGetLength(v18);
      int Base64EncodedStringFromBytes = FigCreateBase64EncodedStringFromBytes();
      if (Base64EncodedStringFromBytes)
      {
        int v28 = Base64EncodedStringFromBytes;
        CFArrayRef v27 = 0;
      }
      else
      {
        CFDictionarySetValue(v25, @"spc", value);
        CFArrayRef v27 = CFArrayCreate(v3, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
        if (v27)
        {
          CFDictionarySetValue(v23, @"streaming-keys", v27);
          CFDictionarySetValue(v22, @"fairplay-streaming-request", v23);
          int v28 = FigCFDataCreateWithJSONObject();
          uint64_t v19 = v34;
          if (!v28)
          {
            CFArrayRef v29 = *(void **)(v33 + 112);
            v39[0] = MEMORY[0x1E4F143A8];
            v39[1] = 3221225472;
            v39[2] = __FigPWDKeyExchangeSenderAOCP_requestCKCFromServerAfterSendingSPC_block_invoke;
            v39[3] = &__block_descriptor_40_e28_v24__0__NSData_8__NSError_16l;
            v39[4] = a1;
            [v29 requestKeyDataFromServer:v41 completionHandler:v39];
          }
          goto LABEL_22;
        }
        int v28 = FigSignalErrorAt();
      }
      uint64_t v19 = v34;
    }
    else
    {
      int v28 = FigSignalErrorAt();
      CFArrayRef v27 = 0;
    }
LABEL_22:
    CFRelease(v22);
    if (v41) {
      CFRelease(v41);
    }
LABEL_24:
    if (value) {
      CFRelease(value);
    }
    if (v23) {
      CFRelease(v23);
    }
    if (values) {
      CFRelease(values);
    }
    if (v27) {
      CFRelease(v27);
    }
    if (!v28)
    {
      uint64_t v30 = 0;
LABEL_34:
      CFRelease(v16);
LABEL_35:
      CFRelease(v10);
      CFTypeID v31 = v12;
LABEL_36:
      CFRelease(v31);
LABEL_38:
      CFRelease(v5);
      return v30;
    }
LABEL_44:
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_34;
  }

  return FigSignalErrorAt();
}

void FigPWDKeyExchangeSenderAOCP_getCertificate(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)MEMORY[0x199711A30]();
  CFAllocatorRef v3 = dispatch_semaphore_create(0);
  FigPWDKeyExchangeSenderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v5 = *(void **)(DerivedStorage + 112);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __FigPWDKeyExchangeSenderAOCP_getCertificate_block_invoke;
  v6[3] = &unk_1E57A3700;
  v6[4] = v3;
  void v6[5] = DerivedStorage;
  [v5 requestCertDataFromServer:v6];
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (v3) {
    dispatch_release(v3);
  }
}

uint64_t FigPictureCollectionGetClassID()
{
  if (FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce != -1) {
    dispatch_once_f(&FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce, &FigPictureCollectionGetClassID_sFigPictureCollectionClassID, (dispatch_function_t)FigPictureCollectionGetClassIDCallback);
  }
  return FigPictureCollectionGetClassID_sFigPictureCollectionClassID;
}

uint64_t FigPictureCollectionGetClassIDCallback()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPictureCollectionGetTypeID()
{
  if (FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce != -1) {
    dispatch_once_f(&FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce, &FigPictureCollectionGetClassID_sFigPictureCollectionClassID, (dispatch_function_t)FigPictureCollectionGetClassIDCallback);
  }

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureCollectionBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPictureCollection %p]", a1);
}

uint64_t FigFairPlayCPECryptorCreate(const void *a1, const void *a2, int a3, const opaqueCMFormatDescription *a4, const void *a5, const void *a6, const void *a7, CFTypeRef *a8)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  CFTypeRef v46 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v13 = 4294955146;
  if (!a1) {
    goto LABEL_54;
  }
  if (!a3) {
    goto LABEL_54;
  }
  if (!a4) {
    goto LABEL_54;
  }
  if (!a5) {
    goto LABEL_54;
  }
  unsigned int v14 = a8;
  if (!a8) {
    goto LABEL_54;
  }
  FigCPEFairPlayCryptorGetClassID();
  uint64_t IsSkipEncrypted = CMDerivedObjectCreate();
  if (IsSkipEncrypted) {
    goto LABEL_52;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v13 = 4294955145;
    goto LABEL_54;
  }
  uint64_t v17 = DerivedStorage;
  if (a2) {
    CFTypeRef v18 = CFRetain(a2);
  }
  else {
    CFTypeRef v18 = 0;
  }
  *(void *)uint64_t v17 = v18;
  *(void *)(v17 + 8) = CFRetain(a1);
  *(_DWORD *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = CFRetain(a5);
  if (a6) {
    CFTypeRef v19 = CFRetain(a6);
  }
  else {
    CFTypeRef v19 = 0;
  }
  *(void *)(v17 + 32) = v19;
  if ((a3 & 0xD) == 0) {
    goto LABEL_43;
  }
  number[0] = 0;
  *(_DWORD *)int valuePtr = 0;
  uint64_t v21 = *(void *)v17;
  uint64_t v20 = *(void *)(v17 + 8);
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  CFMutableDictionaryRef v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(v23 + 48);
  if (v24)
  {
    if (!v24(v20, 0x1EE571CB8, v21, number))
    {
      CFNumberGetValue(number[0], kCFNumberSInt32Type, valuePtr);
      if (number[0]) {
        CFRelease(number[0]);
      }
    }
  }
  *(_OWORD *)CFNumberRef number = 0u;
  long long v51 = 0u;
  CFDataRef LegacySinfFromSinfExtensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions(*(const __CFDictionary **)(v17 + 24));
  CFDataRef ExtendedSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetExtendedSinfFromSinfExtensions(*(const __CFDictionary **)(v17 + 24));
  CFDataRef DPInfoFromSinfExtensions = (const __CFData *)FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v17 + 24));
  if (LegacySinfFromSinfExtensions)
  {
    number[1] = (CFNumberRef)CFDataGetBytePtr(LegacySinfFromSinfExtensions);
    int Length = CFDataGetLength(LegacySinfFromSinfExtensions);
  }
  else
  {
    int Length = 0;
    number[1] = 0;
  }
  LODWORD(number[0]) = Length;
  if (ExtendedSinfFromSinfExtensions)
  {
    *((void *)&v51 + 1) = CFDataGetBytePtr(ExtendedSinfFromSinfExtensions);
    int v29 = CFDataGetLength(ExtendedSinfFromSinfExtensions);
  }
  else
  {
    int v29 = 0;
    *((void *)&v51 + 1) = 0;
  }
  LODWORD(v51) = v29;
  if ((a3 & 5) == 0) {
    goto LABEL_43;
  }
  uint64_t v30 = FigCPEFairPlayProtectorCheckOutCryptRef((uint64_t)a1, (uint64_t)a5);
  *(void *)(v17 + 40) = v30;
  if (v30) {
    goto LABEL_43;
  }
  CMFormatDescriptionGetMediaType(a4);
  if (*(void *)(v17 + 40)) {
    goto LABEL_43;
  }
  *(void *)int valuePtr = 0;
  CFDictionaryRef v31 = *(const __CFDictionary **)(v17 + 32);
  if (!v31)
  {
    if ((unint64_t)LegacySinfFromSinfExtensions | (unint64_t)ExtendedSinfFromSinfExtensions)
    {
      qdrn6();
    }
    else
    {
      if (!DPInfoFromSinfExtensions)
      {
        uint64_t v13 = 0;
        goto LABEL_40;
      }
      CFDataGetBytePtr(DPInfoFromSinfExtensions);
      CFDataGetLength(DPInfoFromSinfExtensions);
      NOAHabXy();
    }
    uint64_t v13 = FAIRPLAY_CALL_LOG(v35);
    goto LABEL_40;
  }
  uint64_t v45 = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v31, @"SessionID");
  CFNumberGetValue(Value, kCFNumberSInt64Type, &v45);
  CFDataRef v33 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(v17 + 32), @"PlayInfo");
  if (v33)
  {
    CFDataRef v34 = v33;
    CFDataGetBytePtr(v33);
    CFDataGetLength(v34);
  }
  NQ7ggq70Owbvqj8qbExsJ5Hw();
  uint64_t v13 = FAIRPLAY_CALL_LOG(v36);
  unsigned int v14 = a8;
LABEL_40:
  if (*(void *)valuePtr) {
    *(void *)(v17 + 40) = FigCFKBCryptRefCreate(*MEMORY[0x1E4F1CF80], *(uint64_t *)valuePtr);
  }
  if (v13) {
    goto LABEL_54;
  }
LABEL_43:
  uint64_t IsSkipEncrypted = FigFairPlayIsSkipEncrypted(*(const __CFDictionary **)(v17 + 24), (BOOL *)(v17 + 49));
  if (IsSkipEncrypted
    || *(unsigned char *)(v17 + 49)
    && (uint64_t IsSkipEncrypted = FigFairPlayGetSkipParametersFromSinf(*(const __CFDictionary **)(v17 + 24), (_DWORD *)(v17 + 52)), IsSkipEncrypted))
  {
LABEL_52:
    uint64_t v13 = IsSkipEncrypted;
    goto LABEL_54;
  }
  CFTypeRef v37 = a7;
  if (a7) {
    CFTypeRef v37 = CFRetain(a7);
  }
  *(void *)(v17 + 80) = v37;
  FigCPEExternalProtectionMonitorBeginMonitoring((uint64_t)v37);
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v13 = FigNotificationCenterAddWeakListener();
  if (!v13)
  {
    CFTypeRef *v14 = v46;
    CFTypeRef v46 = 0;
    return FigFairPlayMapFairPlayErrorToCPEError(v13);
  }
LABEL_54:
  if (v46) {
    CFRelease(v46);
  }
  if (dword_1E93513B0)
  {
    LODWORD(v45) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v40 = v45;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (v41)
    {
      *(_DWORD *)int valuePtr = 136315394;
      *(void *)&valuePtr[4] = "FigFairPlayCPECryptorCreate";
      __int16 v48 = 1024;
      int v49 = v13;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigFairPlayMapFairPlayErrorToCPEError(v13);
}

uint64_t ExternalProtectionStatusChangedCallback_1()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigFairPlayCPELimitedCryptorCreate(uint64_t a1, const void *a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
  {
    FigCPEFairPlayCryptorGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (!v6)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v8 = (void *)DerivedStorage;
        if (a2) {
          CFTypeRef v9 = CFRetain(a2);
        }
        else {
          CFTypeRef v9 = 0;
        }
        void *v8 = v9;
        uint64_t v6 = 0;
        v8[1] = FigCFKBCryptRefCreate(*MEMORY[0x1E4F1CF80], a1);
        *a3 = 0;
        return FigFairPlayMapFairPlayErrorToCPEError(v6);
      }
      uint64_t v6 = 4294955145;
    }
  }
  else
  {
    uint64_t v6 = 4294955146;
  }
  if (dword_1E93513B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigFairPlayMapFairPlayErrorToCPEError(v6);
}

uint64_t FigFairPlayCPELimitedCryptorCreateWithExternalProtectionMethods(uint64_t a1, int a2, const void *a3, void *a4)
{
  uint64_t v6 = FigFairPlayCPELimitedCryptorCreate(a1, a3, a4);
  uint64_t v7 = v6;
  if (a4 && !v6) {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) = a2;
  }
  return v7;
}

uint64_t FigFairPlayCPECryptorEqual()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !v1) {
    return (DerivedStorage | v1) == 0;
  }
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result) {
      return FigCFEqual() != 0;
    }
  }
  return result;
}

uint64_t FigFairPlayCPECryptorInvalidate()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    int v11 = 0;
    CFAllocatorRef v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      const void *v1 = 0;
    }
    if (v1[5])
    {
      if (FigFairPlayGetSinfExtensionType((const __CFDictionary *)v1[3], &v11)) {
        BOOL v3 = 0;
      }
      else {
        BOOL v3 = v11 == 2;
      }
      if (v3) {
        FigCPEFairPlayProtectorCheckInCryptRef((uint64_t)v1[1], v1[3], v1[5]);
      }
      CFDictionaryRef v4 = v1[5];
      if (v4)
      {
        CFRelease(v4);
        v1[5] = 0;
      }
    }
    *((unsigned char *)v1 + 48) = 0;
    CFDictionaryRef v5 = v1[3];
    if (v5)
    {
      CFRelease(v5);
      v1[3] = 0;
    }
    uint64_t v6 = v1[4];
    if (v6)
    {
      CFRelease(v6);
      v1[4] = 0;
    }
    if (v1[10])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigCPEExternalProtectionMonitorEndMonitoring((uint64_t)v1[10]);
      uint64_t v7 = v1[10];
      if (v7)
      {
        CFRelease(v7);
        v1[10] = 0;
      }
    }
    uint64_t v8 = v1[11];
    if (v8)
    {
      CFRelease(v8);
      v1[11] = 0;
    }
    CFTypeRef v9 = v1[1];
    if (v9)
    {
      CFRelease(v9);
      v1[1] = 0;
    }
  }
  return 0;
}

__CFString *FigFairPlayCPECryptorCopyDebugDescription()
{
  uint64_t DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(*DerivedStorage, 0);
  BOOL v3 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"<FigFPCPECryptor: protectorParent<%@> >", v1[1]);
  }
  return v3;
}

uint64_t FigFairPlayCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955146;
  }
  uint64_t v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
  {
    BOOL v23 = 0;
    int IsLowValueSinf = FigFairPlayIsLowValueSinf(*(const __CFDictionary **)(v8 + 24), &v23);
    if (v23) {
      int v10 = IsLowValueSinf;
    }
    else {
      int v10 = -42042;
    }
    if (v10 > -42032)
    {
      BOOL v11 = v10 == 0;
      int v12 = -42031;
    }
    else
    {
      BOOL v11 = v10 == -42407;
      int v12 = -42403;
    }
    BOOL v14 = v11 || v10 == v12;
    if (v14 && (*(unsigned char *)(v8 + 16) & 5) != 0) {
      CFDataRef v15 = (void **)MEMORY[0x1E4F1CFD0];
    }
    else {
      CFDataRef v15 = (void **)MEMORY[0x1E4F1CFC8];
    }
    uint64_t result = 0;
    uint64_t v17 = *v15;
    goto LABEL_23;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
  {
    uint64_t v13 = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
LABEL_22:
    uint64_t v17 = v13;
    uint64_t result = 0;
LABEL_23:
    *a4 = v17;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0]))
  {
    uint64_t Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v8 + 80));
    uint64_t v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &Methods);
    goto LABEL_22;
  }
  uint64_t v18 = *(void *)(v8 + 8);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v20 + 48);
  if (!v21) {
    return 4294954514;
  }

  return v21(v18, a2, a3, a4);
}

uint64_t FigFairPlayCPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDA0])) {
    return 4294955144;
  }
  unsigned int Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v6 + 80));
  uint64_t valuePtr = 0;
  if (!a3) {
    return 4294955136;
  }
  unsigned int v8 = Methods;
  CFTypeID v9 = CFGetTypeID(a3);
  if (v9 != CFNumberGetTypeID()) {
    return 4294955136;
  }
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
  if ((valuePtr & ~(unint64_t)v8) == 0) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t result = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E4F1CF80], valuePtr & ~v8, 0, *(CFTypeRef *)(v6 + 80), &cf);
  if (!result)
  {
    BOOL v11 = *(const void **)(v6 + 80);
    CFTypeRef v12 = cf;
    *(void *)(v6 + 80) = cf;
    if (v12) {
      CFRetain(v12);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (cf) {
      CFRelease(cf);
    }
    return 0;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorGetNativeSession(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && DerivedStorage)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 40);
    if (v5) {
      uint64_t AudioQueue = FigAudioQueueTimingShimGetAudioQueue(v5);
    }
    else {
      uint64_t AudioQueue = 0;
    }
    uint64_t result = 0;
    *a2 = AudioQueue;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      int Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(DerivedStorage + 80));
      uint64_t result = 0;
      *a2 = Methods;
    }
  }
  return result;
}

uint64_t FigFairPlayCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  int Status = FigCPEExternalProtectionMonitorGetStatus(*(void *)(DerivedStorage + 80));
  uint64_t result = 0;
  *a3 = Status;
  return result;
}

uint64_t FigFairPlayCPECryptorDecryptSample(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3)
{
  CFTypeRef v6 = a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return DecryptCommon(DerivedStorage, a2, &v6);
}

uint64_t FigFairPlayCPECryptorScrambleDecryptedSample(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  Dataint Length = CMBlockBufferGetDataLength(a2);
  OSStatus DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
  uint64_t result = 4294955146;
  if (DataLength && !DataPointer && dataPointerOut)
  {
    if (!CMBlockBufferIsRangeContiguous(a2, 0, DataLength)) {
      return 4294955140;
    }
    if (*(unsigned char *)(DerivedStorage + 49))
    {
      size_t v7 = *(unsigned int *)(DerivedStorage + 52);
      if (DataLength <= v7) {
        return 0;
      }
      unsigned int v9 = *(_DWORD *)(DerivedStorage + 56);
      int v8 = *(_DWORD *)(DerivedStorage + 60);
    }
    else
    {
      int v8 = 0;
      size_t v7 = 0;
      unsigned int v9 = 512;
    }
    uint64_t result = 0;
    uint64_t v10 = v9 + v8;
    if (v10 && v7 < DataLength)
    {
      do
      {
        unsigned int v11 = DataLength - v7;
        if (DataLength - v7 >= v9) {
          unsigned int v11 = v9;
        }
        uint64_t v12 = v11 & 0xFFFFFFF0;
        BOOL v13 = __CFADD__(v12, v7);
        size_t v14 = v12 + v7;
        if (v13)
        {
          char v15 = FigFairPlayCPECryptorScrambleDecryptedSample_sbCounter;
          size_t v16 = v7;
          do
          {
            dataPointerOut[v16++] = ((v15 ^ 0x4C) * (32 - v15)) ^ &FigFairPlayCPECryptorScrambleDecryptedSample_sbCounter;
            char v15 = ++FigFairPlayCPECryptorScrambleDecryptedSample_sbCounter;
          }
          while (v16 > v14);
        }
        v7 += v10;
      }
      while (v7 < DataLength);
      return 0;
    }
  }
  return result;
}

uint64_t FigFairPlayCPECryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3)
{
  CFTypeRef v6 = a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return DecryptCommon(DerivedStorage, a2, &v6);
}

uint64_t FigFairPlayCPECryptorPairForReEncryption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && DerivedStorage)
  {
    if ((*(_DWORD *)(DerivedStorage + 16) & 5) == 1)
    {
      if (a4)
      {
        uint64_t v8 = CMBaseObjectGetDerivedStorage();
        if (v8)
        {
          if ((*(_DWORD *)(v8 + 16) & 5) == 1) {
            return 4294955136;
          }
          else {
            return 4294955143;
          }
        }
        else
        {
          return 4294955146;
        }
      }
    }
    else
    {
      return 4294955143;
    }
  }
  return result;
}

uint64_t FigFairPlayCPECryptorIsCompatibleWithFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = 0;
  BOOL v10 = 0;
  if (a2)
  {
    if (a1)
    {
      uint64_t v6 = DerivedStorage;
      if (DerivedStorage)
      {
        CFDictionaryRef v7 = FigFairPlayCopySinfExtensionsFromFormatDescription(a2);
        CFDictionaryRef v8 = v7;
        if (v7 && CFEqual(v7, *(CFTypeRef *)(v6 + 24)))
        {
          uint64_t v5 = 1;
          goto LABEL_13;
        }
        if (FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v6 + 24))
          && !FigFairPlayIsPlaceholder(v8, &v10)
          && v10)
        {
          uint64_t v5 = 1;
          if (!v8) {
            return v5;
          }
          goto LABEL_13;
        }
        uint64_t v5 = 0;
        if (v8) {
LABEL_13:
        }
          CFRelease(v8);
      }
    }
  }
  return v5;
}

uint64_t FigFairPlayCPECryptorGetMaximumRequiredOutputBufferSizeForSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && a4)
  {
    if (!*(unsigned char *)(DerivedStorage + 72))
    {
      uint64_t result = FigFairPlayGetMaximumReEncryptionPaddingByteCount(*(void *)(DerivedStorage + 24), (void *)(DerivedStorage + 64));
      if (result) {
        return result;
      }
      *(unsigned char *)(DerivedStorage + 72) = 1;
    }
    Dataint Length = CMBlockBufferGetDataLength(a2);
    uint64_t result = 0;
    *a4 = *(void *)(DerivedStorage + 64) + DataLength;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorReEncryptSample(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }

  return DecryptCommon(DerivedStorage, a3, a4);
}

uint64_t FigFairPlayCPECryptorReEncryptSampleWithFormat(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }

  return DecryptCommon(DerivedStorage, a3, a4);
}

uint64_t FigFairPlayCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, void *a4, CFDataRef *a5)
{
  return FigFairPlayCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigFairPlayCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, void *a5, CFDataRef *a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  memset(v37, 0, sizeof(v37));
  dataPointerOut = 0;
  blockBufferOut[0] = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t totalLengthOut = 0;
  int v29 = 0;
  memset(bytes, 0, sizeof(bytes));
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (CMFormatDescriptionGetMediaSubType(FormatDescription) != 1685220713) {
    goto LABEL_30;
  }
  if (FigCFEqual())
  {
LABEL_13:
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    DataBuffer = CMSampleBufferGetDataBuffer(a2);
    uint64_t Contiguous = CMBlockBufferCreateContiguous(v21, DataBuffer, v21, 0, 0, 0, 0, blockBufferOut);
    if (Contiguous) {
      goto LABEL_31;
    }
    uint64_t Contiguous = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, &totalLengthOut, &dataPointerOut);
    if (Contiguous) {
      goto LABEL_31;
    }
    uint64_t Contiguous = CMBlockBufferCreateWithMemoryBlock(v21, 0, totalLengthOut, v21, 0, 0, totalLengthOut, 1u, &theBuffer);
    if (Contiguous) {
      goto LABEL_31;
    }
    uint64_t Contiguous = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v29);
    if (Contiguous) {
      goto LABEL_31;
    }
    v37[0] = FigAudioQueueTimingShimGetAudioQueue(*(void *)(DerivedStorage + 40));
    *(void *)((char *)&v37[1] + 4) = 0;
    int v24 = (a3 & 1) != 0 ? 5 : 1;
    LODWORD(v37[1]) = v24;
    WORD2(v38) = 4;
    *((void *)&v38 + 1) = dataPointerOut;
    LODWORD(v39) = totalLengthOut;
    *((void *)&v39 + 1) = v29;
    LODWORD(v40) = totalLengthOut;
    BYTE4(v41) = 0;
    *((void *)&v41 + 1) = bytes;
    LODWORD(v42) = 16;
    HIDWORD(v43) = 0;
    LGokLiStr((uint64_t)v37);
    uint64_t Contiguous = FAIRPLAY_CALL_LOG(v25);
    if (Contiguous) {
      goto LABEL_31;
    }
    if (v40 == totalLengthOut)
    {
      uint64_t v26 = DWORD1(v42);
      if (DWORD1(v42) < 0x11)
      {
        *a5 = *(void *)((char *)&v43 + 4);
        CFDataRef v27 = CFDataCreate(v21, (const UInt8 *)bytes, 24 * v26);
        uint64_t v19 = 0;
        *a4 = theBuffer;
        CMBlockBufferRef theBuffer = 0;
        *a6 = v27;
        goto LABEL_24;
      }
    }
LABEL_30:
    uint64_t Contiguous = FigSignalErrorAt();
LABEL_31:
    uint64_t v19 = Contiguous;
    goto LABEL_24;
  }
  CMBaseObjectGetDerivedStorage();
  long long v34 = 0u;
  long long v35 = 0u;
  memset(&blockBufferOut[1], 0, 64);
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension
    || (v14 = Extension, CFTypeID v15 = CFGetTypeID(Extension), v15 != CFDictionaryGetTypeID())
    || (CFNumberRef Value = CFDictionaryGetValue(v14, @"avcC")) == 0
    || (CFTypeID v17 = CFGetTypeID(Value), v17 != CFDataGetTypeID())
    || (uint64_t SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC(), !SPSAndPPSCountFromAVCC))
  {
    uint64_t SPSAndPPSCountFromAVCC = FigSignalErrorAt();
  }
  uint64_t v19 = SPSAndPPSCountFromAVCC;
  if (!SPSAndPPSCountFromAVCC)
  {
    uint64_t v20 = *(const void **)(DerivedStorage + 88);
    *(void *)(DerivedStorage + 88) = FormatDescription;
    if (FormatDescription) {
      CFRetain(FormatDescription);
    }
    if (v20) {
      CFRelease(v20);
    }
    goto LABEL_13;
  }
LABEL_24:
  if (blockBufferOut[0]) {
    CFRelease(blockBufferOut[0]);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v19;
}

uint64_t FigFairPlayCPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  int StatusIgnoringDisplays = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(void *)(DerivedStorage + 80));
  uint64_t result = 0;
  *a3 = StatusIgnoringDisplays;
  return result;
}

uint64_t FigFairPlayCPECryptorCopySerializedCryptorRecipe(uint64_t a1, CFDataRef *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  if (!DerivedStorage)
  {
    CFDataRef v8 = 0;
LABEL_9:
    uint64_t result = 0;
    *a2 = v8;
    return result;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t *))(v7 + 8);
  if (!v9) {
    return 4294954514;
  }
  uint64_t result = v9(a1, &v11);
  if (!result)
  {
    *(void *)bytes = v11;
    uint64_t Methods = FigCPEExternalProtectionMonitorGetMethods(*(void *)(v5 + 80));
    uint64_t v14 = 1;
    CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 24);
    if (v8) {
      goto LABEL_9;
    }
    return 4294955145;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorGetCryptorType(uint64_t a1, _DWORD *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t result = 0;
  *a2 = 1;
  return result;
}

uint64_t DecryptCommon(uint64_t a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  uint64_t v14 = 0;
  dataPointerOut = 0;
  uint64_t v3 = 4294955146;
  if (a1 && a2 && a3 && *a3)
  {
    uint64_t v7 = (OpaqueCMBlockBuffer *)CFRetain(*a3);
    Dataint Length = CMBlockBufferGetDataLength(a2);
    size_t v9 = CMBlockBufferGetDataLength(v7);
    if (CMBlockBufferIsRangeContiguous(a2, 0, DataLength) && CMBlockBufferIsRangeContiguous(v7, 0, v9))
    {
      if (*(void *)(a1 + 40))
      {
        uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
        if (DataPointer
          || (uint64_t DataPointer = CMBlockBufferGetDataPointer(v7, 0, 0, 0, &v14), DataPointer))
        {
          uint64_t v3 = DataPointer;
        }
        else
        {
          FigAudioQueueTimingShimGetAudioQueue(*(void *)(a1 + 40));
          YHrWZQ6wU();
          uint64_t v3 = FAIRPLAY_CALL_LOG(v11);
          if (!v3)
          {
            CFTypeRef v12 = *a3;
            *a3 = v7;
            if (v7) {
              CFRetain(v7);
            }
            if (v12) {
              CFRelease(v12);
            }
            uint64_t v3 = 0;
          }
        }
      }
      else
      {
        uint64_t v3 = 4294955138;
      }
    }
    else
    {
      uint64_t v3 = 4294955140;
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  return v3;
}

uint64_t FigFairPlayCPELimitedCryptorInvalidate()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    CFAllocatorRef v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      CFAllocatorRef *v1 = 0;
    }
    uint64_t v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    CFDictionaryRef v4 = v1[2];
    if (v4)
    {
      CFRelease(v4);
      v1[2] = 0;
    }
  }
  return 0;
}

uint64_t FigFairPlayCPELimitedCryptorGetNativeSession(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && DerivedStorage)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 8);
    if (v5) {
      uint64_t AudioQueue = FigAudioQueueTimingShimGetAudioQueue(v5);
    }
    else {
      uint64_t AudioQueue = 0;
    }
    uint64_t result = 0;
    *a2 = AudioQueue;
  }
  return result;
}

uint64_t FigFairPlayCPELimitedCryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(DerivedStorage + 24);
    }
  }
  return result;
}

uint64_t FigFairPlayCPELimitedCryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v12 = 0;
  dataPointerOut = 0;
  uint64_t result = 4294955146;
  if (a1 && a2 && a3)
  {
    Dataint Length = CMBlockBufferGetDataLength(a2);
    size_t v9 = CMBlockBufferGetDataLength(a3);
    if (v9 < DataLength)
    {
      return 4294955136;
    }
    else
    {
      size_t v10 = v9;
      if (CMBlockBufferIsRangeContiguous(a2, 0, DataLength) && CMBlockBufferIsRangeContiguous(a3, 0, v10))
      {
        if (*(void *)(DerivedStorage + 8))
        {
          uint64_t result = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
          if (!result)
          {
            uint64_t result = CMBlockBufferGetDataPointer(a3, 0, 0, 0, &v12);
            if (!result)
            {
              FigAudioQueueTimingShimGetAudioQueue(*(void *)(DerivedStorage + 8));
              YHrWZQ6wU();
              return FAIRPLAY_CALL_LOG(v11);
            }
          }
        }
        else
        {
          return 4294955138;
        }
      }
      else
      {
        return 4294955140;
      }
    }
  }
  return result;
}

uint64_t FigFairPlayCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, void *a4, CFDataRef *a5)
{
  return FigFairPlayCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigFairPlayCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, void *a5, CFDataRef *a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  memset(v37, 0, sizeof(v37));
  dataPointerOut = 0;
  blockBufferOut[0] = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t totalLengthOut = 0;
  int v29 = 0;
  memset(bytes, 0, sizeof(bytes));
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (CMFormatDescriptionGetMediaSubType(FormatDescription) != 1685220713) {
    goto LABEL_30;
  }
  if (FigCFEqual())
  {
LABEL_13:
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    DataBuffer = CMSampleBufferGetDataBuffer(a2);
    uint64_t Contiguous = CMBlockBufferCreateContiguous(v21, DataBuffer, v21, 0, 0, 0, 0, blockBufferOut);
    if (Contiguous) {
      goto LABEL_31;
    }
    uint64_t Contiguous = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, &totalLengthOut, &dataPointerOut);
    if (Contiguous) {
      goto LABEL_31;
    }
    uint64_t Contiguous = CMBlockBufferCreateWithMemoryBlock(v21, 0, totalLengthOut, v21, 0, 0, totalLengthOut, 1u, &theBuffer);
    if (Contiguous) {
      goto LABEL_31;
    }
    uint64_t Contiguous = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v29);
    if (Contiguous) {
      goto LABEL_31;
    }
    v37[0] = FigAudioQueueTimingShimGetAudioQueue(*(void *)(DerivedStorage + 8));
    *(void *)((char *)&v37[1] + 4) = 0;
    int v24 = (a3 & 1) != 0 ? 5 : 1;
    LODWORD(v37[1]) = v24;
    WORD2(v38) = 4;
    *((void *)&v38 + 1) = dataPointerOut;
    LODWORD(v39) = totalLengthOut;
    *((void *)&v39 + 1) = v29;
    LODWORD(v40) = totalLengthOut;
    BYTE4(v41) = 0;
    *((void *)&v41 + 1) = bytes;
    LODWORD(v42) = 16;
    HIDWORD(v43) = 0;
    LGokLiStr((uint64_t)v37);
    uint64_t Contiguous = FAIRPLAY_CALL_LOG(v25);
    if (Contiguous) {
      goto LABEL_31;
    }
    if (v40 == totalLengthOut)
    {
      uint64_t v26 = DWORD1(v42);
      if (DWORD1(v42) < 0x11)
      {
        *a5 = *(void *)((char *)&v43 + 4);
        CFDataRef v27 = CFDataCreate(v21, (const UInt8 *)bytes, 24 * v26);
        uint64_t v19 = 0;
        *a4 = theBuffer;
        CMBlockBufferRef theBuffer = 0;
        *a6 = v27;
        goto LABEL_24;
      }
    }
LABEL_30:
    uint64_t Contiguous = FigSignalErrorAt();
LABEL_31:
    uint64_t v19 = Contiguous;
    goto LABEL_24;
  }
  CMBaseObjectGetDerivedStorage();
  long long v34 = 0u;
  long long v35 = 0u;
  memset(&blockBufferOut[1], 0, 64);
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension
    || (v14 = Extension, CFTypeID v15 = CFGetTypeID(Extension), v15 != CFDictionaryGetTypeID())
    || (CFNumberRef Value = CFDictionaryGetValue(v14, @"avcC")) == 0
    || (CFTypeID v17 = CFGetTypeID(Value), v17 != CFDataGetTypeID())
    || (uint64_t SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC(), !SPSAndPPSCountFromAVCC))
  {
    uint64_t SPSAndPPSCountFromAVCC = FigSignalErrorAt();
  }
  uint64_t v19 = SPSAndPPSCountFromAVCC;
  if (!SPSAndPPSCountFromAVCC)
  {
    uint64_t v20 = *(const void **)(DerivedStorage + 16);
    *(void *)(DerivedStorage + 16) = FormatDescription;
    if (FormatDescription) {
      CFRetain(FormatDescription);
    }
    if (v20) {
      CFRelease(v20);
    }
    goto LABEL_13;
  }
LABEL_24:
  if (blockBufferOut[0]) {
    CFRelease(blockBufferOut[0]);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v19;
}

uint64_t FigFairPlayCPELimitedCryptorIsCompatibleWithSerializedCryptorRecipe(uint64_t a1, const __CFData *a2, BOOL *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BytePtr = CFDataGetBytePtr(a2);
  if (CFDataGetLength(a2) != 24) {
    return 4294949724;
  }
  uint64_t v8 = *(void *)BytePtr;
  int v9 = *((_DWORD *)BytePtr + 2);
  uint64_t v10 = *((unsigned int *)BytePtr + 4);
  uint64_t v16 = 0;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  BOOL v13 = *(uint64_t (**)(uint64_t, uint64_t *))(v12 + 8);
  if (!v13) {
    return 4294954514;
  }
  uint64_t result = v13(a1, &v16);
  if (!result)
  {
    BOOL v15 = v16 == v8 && *(_DWORD *)(DerivedStorage + 24) == v9 && v10 == 1;
    uint64_t result = 0;
    *a3 = v15;
  }
  return result;
}

uint64_t FigAudioSessionCreateWithCMSessionAndMXSession(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  if (!_os_feature_enabled_impl())
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          MEMORY[0x19970EE10](&FigAudioSessionCreateWithCMSessionAndMXSession_sInitOnce, audioSessionMXSession_initOnce);
          if (sAudioSessionMXSession_MXSessionNotificationNameMap)
          {
            if (sAudioSessionMXSession_CMSessionNotificationNameMap && sAudioSessionMXSessionMutexForNameMap)
            {
              FigAudioSessionGetClassID();
              uint64_t v7 = CMDerivedObjectCreate();
              if (v7) {
                return v7;
              }
              uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
              *uint64_t DerivedStorage = CFRetain(a2);
              DerivedStorage[1] = CFRetain(a3);
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v9 = FigNotificationCenterAddWeakListener();
              if (v9) {
                return v9;
              }
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v7 = FigNotificationCenterAddWeakListener();
              if (v7) {
                return v7;
              }
              CMBaseObjectGetDerivedStorage();
              CFStringRef theString = 0;
              uint64_t v10 = 0;
              *a4 = 0;
              return v10;
            }
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

CFMutableDictionaryRef audioSessionMXSession_initOnce()
{
  FigKTraceInit();
  sAudioSessionMXSessionMutexForNameMap = FigSimpleMutexCreate();
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFAllocatorRef v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  sAudioSessionMXSession_CMSessionNotificationNameMap = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(v0, 0, v1, v2);
  sAudioSessionMXSession_MXSessionNotificationNameMap = (uint64_t)result;
  return result;
}

void audioSessionMXSession_forwardMXSessionNotification(int a1, int a2, void *key)
{
  if (key)
  {
    if (!FigAudioSessionGetNotificationNameForMXSessionNotificationNameInternal(key))
    {
      MEMORY[0x19970E910](sAudioSessionMXSessionMutexForNameMap);
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)sAudioSessionMXSession_MXSessionNotificationNameMap, key);
      MEMORY[0x19970E930](sAudioSessionMXSessionMutexForNameMap);
      if (!Value)
      {
        CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigAudioSessionMXSessionNotification_%@", key);
        if (!v5) {
          return;
        }
        CFStringRef v6 = v5;
        MEMORY[0x19970E910](sAudioSessionMXSessionMutexForNameMap);
        CFDictionarySetValue((CFMutableDictionaryRef)sAudioSessionMXSession_MXSessionNotificationNameMap, key, v6);
        MEMORY[0x19970E930](sAudioSessionMXSessionMutexForNameMap);
        CFRelease(v6);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

void audioSessionMXSession_forwardCMSessionNotification(uint64_t a1, uint64_t a2, const void *a3)
{
  if (a3)
  {
    MEMORY[0x19970E910](sAudioSessionMXSessionMutexForNameMap);
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)sAudioSessionMXSession_CMSessionNotificationNameMap, a3);
    MEMORY[0x19970E930](sAudioSessionMXSessionMutexForNameMap);
    if (!Value)
    {
      CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigAudioSessionCMSessionNotification_%@", a3);
      if (!v5) {
        return;
      }
      CFStringRef v6 = v5;
      MEMORY[0x19970E910](sAudioSessionMXSessionMutexForNameMap);
      CFDictionarySetValue((CFMutableDictionaryRef)sAudioSessionMXSession_CMSessionNotificationNameMap, a3, v6);
      MEMORY[0x19970E930](sAudioSessionMXSessionMutexForNameMap);
      CFRelease(v6);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

uint64_t FigAudioSessionCreateWithCMSession(uint64_t a1, const void *a2, void *a3)
{
  uint64_t result = MXSessionCreate();
  if (!result) {
    return FigAudioSessionCreateWithCMSessionAndMXSession(a1, a2, 0, a3);
  }
  return result;
}

uint64_t FigAudioSessionCreateUsingPrimaryCMSessionForAuditToken(uint64_t a1, uint64_t a2, void *a3)
{
  if (AudioSessionGetPrimaryAudioSessionIDForAuditToken()
    && (CFStringRef v5 = (const void *)AudioSessionCopyCMSessionForSessionID()) != 0)
  {
    CFStringRef v6 = v5;
    uint64_t v7 = FigAudioSessionCreateWithCMSession(a1, v5, a3);
    CFRelease(v6);
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAudioSessionCreateWithMXSessionSiblingForFigAudioSession(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  if (!a2) {
    return 4294948075;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 16);
    if (v8)
    {
      uint64_t v9 = v8(a2, @"FAS_AudioSessionID", a1, &cf);
      if (!v9)
      {
        FigCFNumberGetSInt32();
        uint64_t v10 = (const void *)AudioSessionCopyCMSessionForSessionID();
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = FigAudioSessionCreateWithCMSession(a1, v10, a4);
          CFRelease(v11);
          goto LABEL_10;
        }
        uint64_t v9 = FigSignalErrorAt();
      }
      uint64_t v12 = v9;
    }
    else
    {
      uint64_t v12 = 4294948071;
    }
  }
  else
  {
    uint64_t v12 = 4294948075;
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

void audioSessionMXSession_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

CFStringRef audioSessionMXSession_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigAudioSession(MX): %p %s>", a1, DerivedStorage + 16);
}

uint64_t audioSessionMXSession_CopyResolvedConfigurationForProperty(uint64_t a1, void *a2, uint64_t a3, __CFDictionary **a4)
{
  CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForResolvedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForResolvedFigAudioSessionPropertyInternal(a2);
  uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (MXSessionPropertyForResolvedFigAudioSessionPropertyInternal
    || FigCFEqual()
    || FigCFEqual())
  {
    uint64_t IsAvailable = MXSessionCopyProperty();
LABEL_9:
    uint64_t v11 = IsAvailable;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    uint64_t v13 = a1;
    CFAllocatorRef v14 = (const __CFAllocator *)a3;
    uint64_t v15 = 1836019574;
LABEL_19:
    uint64_t IsAvailable = audioSessionMXSession_CopySpatializationCapabilities(v13, v14, v15, a4);
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    uint64_t v13 = a1;
    CFAllocatorRef v14 = (const __CFAllocator *)a3;
    uint64_t v15 = 1936684398;
    goto LABEL_19;
  }
  if (FigCFEqual())
  {
    uint64_t IsAvailable = audioSessionMXSession_copyNeroInformationDictionary(a1, a3, a4);
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    uint64_t IsAvailable = audioSessionMXSession_copyAudioDeviceIsAvailable(a1, (CFTypeRef *)a4);
    goto LABEL_9;
  }
  uint64_t v11 = 4294948074;
LABEL_10:
  if (*v9 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v11;
}

uint64_t audioSessionMXSession_CopyRequestedConfigurationForProperty(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(a2);
  uint64_t v8 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal
    || FigCFEqual()
    || FigCFEqual())
  {
    uint64_t v9 = MXSessionCopyProperty();
  }
  else if (FigCFEqual())
  {
    CFTypeRef v11 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v11) {
      CFTypeRef v11 = CFRetain(v11);
    }
    uint64_t v9 = 0;
    *a4 = v11;
  }
  else
  {
    uint64_t v9 = 4294948074;
  }
  if (*v8 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v9;
}

uint64_t audioSessionMXSession_RequestConfigurationForProperty(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(a2);
  CFDictionaryRef v4 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal) {
    uint64_t v5 = MXSessionSetProperty();
  }
  else {
    uint64_t v5 = 4294948074;
  }
  if (*v4 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v5;
}

uint64_t audioSessionMXSession_CopyCMSessionProperty(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  uint64_t v4 = CMSessionCopyProperty();
  if (*v3 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_SetCMSessionProperty(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  uint64_t v4 = CMSessionSetProperty();
  if (*v3 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_CopyMXSessionProperty(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  uint64_t v4 = MXSessionCopyProperty();
  if (*v3 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_SetMXSessionProperty(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  uint64_t v4 = MXSessionSetProperty();
  if (*v3 == 1)
  {
    if (a2) {
      CFHash(a2);
    }
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_Activate()
{
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v0 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v1 = CMSessionBeginInterruption();
  if (*v0 == 1) {
    kdebug_trace();
  }
  return v1;
}

uint64_t audioSessionMXSession_Deactivate()
{
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v0 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (FigCFDictionaryGetBooleanIfPresent()) {
    uint64_t v1 = CMSessionEndInterruption_WithInterruptionNotification();
  }
  else {
    uint64_t v1 = CMSessionEndInterruption();
  }
  uint64_t v2 = v1;
  if (*v0 == 1) {
    kdebug_trace();
  }
  return v2;
}

BOOL audioSessionMXSession_IsRelatedSessionID()
{
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v0 = (const void *)AudioSessionCopyCMSessionForSessionID();
  BOOL v1 = v0
    && !MXSessionCopyProperty()
    && !CMSessionCopyProperty()
    && CFNumberCompare(0, 0, 0) == kCFCompareEqualTo;
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

BOOL audioSessionMXSession_SetMXSessionPropertiesAndCopyErrors(uint64_t a1, const __CFDictionary *a2, CFMutableDictionaryRef *a3)
{
  CMBaseObjectGetDerivedStorage();
  size_t Count = FigCFDictionaryGetCount();
  CFStringRef v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(a2, v6, 0);
  if ((uint64_t)Count < 1)
  {
    BOOL v10 = 1;
  }
  else
  {
    uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      if (*v6) {
        CFHash(*v6);
      }
      if (Count >= 2)
      {
        uint64_t v8 = v6[1];
        if (v8) {
          CFHash(v8);
        }
        if (Count >= 3)
        {
          uint64_t v9 = v6[2];
          if (v9) {
            CFHash(v9);
          }
        }
      }
      kdebug_trace();
    }
    BOOL v10 = MXSessionSetProperties() == 0;
    if (*v7 == 1)
    {
      if (Count >= 4)
      {
        CFTypeRef v11 = v6[3];
        if (v11) {
          CFHash(v11);
        }
        if (Count >= 5)
        {
          uint64_t v12 = v6[4];
          if (v12) {
            CFHash(v12);
          }
          if (Count >= 6)
          {
            uint64_t v13 = v6[5];
            if (v13) {
              CFHash(v13);
            }
          }
        }
      }
      kdebug_trace();
    }
    if (a3) {
      *a3 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
  }
  free(v6);
  return v10;
}

uint64_t audioSessionMXSession_CopyMXSessionPropertiesAndErrors(uint64_t a1, const __CFArray *a2, uint64_t *a3, void *a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    unint64_t v9 = Count;
    if (*v7 != 1) {
      goto LABEL_18;
    }
    if (Count >= 1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
      if (ValueAtIndex) {
        CFHash(ValueAtIndex);
      }
      if (v9 < 2)
      {
        unint64_t v9 = 1;
      }
      else
      {
        CFTypeRef v11 = CFArrayGetValueAtIndex(a2, 1);
        if (v11) {
          CFHash(v11);
        }
        if (v9 < 3)
        {
          unint64_t v9 = 2;
        }
        else
        {
          uint64_t v12 = CFArrayGetValueAtIndex(a2, 2);
          if (v12) {
            CFHash(v12);
          }
        }
      }
    }
    goto LABEL_17;
  }
  unint64_t v9 = 0;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
LABEL_17:
  }
    kdebug_trace();
LABEL_18:
  *a3 = MXSessionCopyProperties();
  if (*v7 == 1)
  {
    if ((uint64_t)v9 >= 4)
    {
      uint64_t v13 = CFArrayGetValueAtIndex(a2, 3);
      if (v13) {
        CFHash(v13);
      }
      if (v9 >= 5)
      {
        CFAllocatorRef v14 = CFArrayGetValueAtIndex(a2, 4);
        if (v14) {
          CFHash(v14);
        }
        if (v9 >= 6)
        {
          uint64_t v15 = CFArrayGetValueAtIndex(a2, 5);
          if (v15) {
            CFHash(v15);
          }
        }
      }
    }
    kdebug_trace();
  }
  if (a4) {
    *a4 = 0;
  }
  return 0;
}

uint64_t audioSessionMXSession_CopySpatializationCapabilities(uint64_t a1, const __CFAllocator *a2, uint64_t a3, __CFDictionary **a4)
{
  CFTypeRef cf = 0;
  memset(v9, 0, sizeof(v9));
  int v10 = 0;
  CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t SessionSpatialPreferencesForContentType = CMSessionCopyProperty();
    if (!SessionSpatialPreferencesForContentType)
    {
      FigCFNumberGetSInt32();
      uint64_t SessionSpatialPreferencesForContentType = AudioGetSessionSpatialPreferencesForContentType();
      if (!SessionSpatialPreferencesForContentType) {
        uint64_t SessionSpatialPreferencesForContentType = FPSupport_CreateFigSpatializationCapabilitiesFromSpatialAudioPreferences((uint64_t)v9, a2, a4);
      }
    }
  }
  else
  {
    uint64_t SessionSpatialPreferencesForContentType = FigSignalErrorAt();
  }
  uint64_t v7 = SessionSpatialPreferencesForContentType;
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t audioSessionMXSession_copyNeroInformationDictionary(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v7 = 0;
  if (!a3) {
    return FigSignalErrorAt();
  }
  uint64_t v4 = CMSessionCopyProperty();
  if (v4) {
    return v4;
  }
  uint64_t v5 = 0;
  *a3 = 0;
  return v5;
}

uint64_t audioSessionMXSession_copyAudioDeviceIsAvailable(uint64_t a1, CFTypeRef *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v15 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  if (!a2)
  {
    uint64_t v3 = FigSignalErrorAt();
    goto LABEL_30;
  }
  uint64_t v3 = MXSessionCopyProperty();
  if (v3)
  {
LABEL_30:
    uint64_t v9 = v3;
    goto LABEL_20;
  }
  if (FigCFNumberGetSInt32() == 12)
  {
    uint64_t v3 = MXSessionCopyProperty();
    if (!v3)
    {
      CFTypeRef v4 = v15;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(CFTypeRef, CFTypeRef, CFTypeRef *))(v6 + 144);
      if (!v8)
      {
        uint64_t v9 = 4294954514;
        goto LABEL_20;
      }
      uint64_t v9 = v8(v4, v13, &cf);
      CFTypeRef v10 = cf;
      if (v9) {
        goto LABEL_17;
      }
      if (!cf) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
    goto LABEL_30;
  }
  uint64_t v3 = MXSessionCopyProperty();
  if (v3) {
    goto LABEL_30;
  }
  if (!theArray || CFArrayGetCount(theArray) <= 0)
  {
LABEL_15:
    CFTypeRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_16;
  }
LABEL_10:
  CFTypeRef v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_16:
  uint64_t v9 = 0;
  *a2 = CFRetain(*v7);
  CFTypeRef v10 = cf;
LABEL_17:
  if (v10) {
    CFRelease(v10);
  }
LABEL_20:
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v9;
}

uint64_t FigRCLCreateConfiguration(const void *a1, CFTypeRef cf1, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  if (figRCLReadStorebagOverrideOnce_onceToken == -1)
  {
    if (!cf1) {
      goto LABEL_41;
    }
  }
  else
  {
    dispatch_once(&figRCLReadStorebagOverrideOnce_onceToken, &__block_literal_global_70);
    if (!cf1) {
      goto LABEL_41;
    }
  }
  if (!a4) {
    goto LABEL_41;
  }
  if (gFigRemoteConfigLoaderInit != -1) {
    dispatch_once_f(&gFigRemoteConfigLoaderInit, 0, (dispatch_function_t)rcl_InitializeLoader);
  }
  uint64_t v8 = (dispatch_queue_t *)gFRCL_Loader;
  if (!gFRCL_Loader) {
    goto LABEL_41;
  }
  if (CFEqual(cf1, @"kFigRemoteConfigurationLoaderStoreBagType_Pump"))
  {
    unsigned int v9 = 0;
    goto LABEL_13;
  }
  if (CFEqual(cf1, @"kFigRemoteConfigurationLoaderStoreBagType_CRABS"))
  {
    unsigned int v9 = 1;
    goto LABEL_13;
  }
  if (!CFEqual(cf1, @"kFigRemoteConfigurationLoaderStoreBagType_AirPlay"))
  {
LABEL_41:
    return FigSignalErrorAt();
  }
  unsigned int v9 = 2;
LABEL_13:
  uint64_t v24 = 0;
  memset(context, 0, sizeof(context));
  CFTypeRef v10 = &v8[3 * v9];
  dispatch_queue_t v12 = v10[5];
  CFTypeRef v11 = v10 + 5;
  if (v12 && v8[3 * v9 + 6])
  {
    if (a3)
    {
      CFTypeRef v13 = CFDictionaryGetValue(a3, @"ServiceIdentifier");
      CFTypeRef v14 = CFDictionaryGetValue(a3, @"configurationGroup");
    }
    else
    {
      CFTypeRef v13 = 0;
      CFTypeRef v14 = 0;
    }
    if (v13) {
      CFTypeRef v15 = v13;
    }
    else {
      CFTypeRef v15 = a1;
    }
    uint64_t v24 = 0;
    *(_OWORD *)((char *)&context[1] + 8) = 0u;
    *(void *)&context[0] = v8;
    *((void *)&context[0] + 1) = v15;
    *(void *)&context[1] = v14;
    *((void *)&context[2] + 1) = v11;
    dispatch_sync_f(*v8, context, (dispatch_function_t)rcl_FigRCLCreateConfiguration_dispatcher);
    if (!*((void *)&context[1] + 1))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *((void *)&context[1] + 1) = Mutable;
      if (!Mutable) {
        return FigSignalErrorAt();
      }
      goto LABEL_38;
    }
    value = 0;
    if (FigCFEqual())
    {
      uint64_t v16 = 0;
    }
    else if (FigCFEqual())
    {
      uint64_t v16 = 1;
    }
    else
    {
      if (!FigCFEqual())
      {
LABEL_37:
        CFMutableDictionaryRef Mutable = (CFMutableDictionaryRef)*((void *)&context[1] + 1);
LABEL_38:
        uint64_t result = 0;
        *a4 = Mutable;
        return result;
      }
      uint64_t v16 = 2;
    }
    FigTrialCreate(a1, v16, (uint64_t *)&value);
    if (value)
    {
      MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        uint64_t v20 = MutableCopy;
        CFDictionarySetValue(MutableCopy, @"figTrial", value);
        CFAllocatorRef v21 = (const void *)*((void *)&context[1] + 1);
        *((void *)&context[1] + 1) = v20;
        CFRetain(v20);
        if (v21) {
          CFRelease(v21);
        }
        CFRelease(v20);
      }
      if (value) {
        CFRelease(value);
      }
    }
    goto LABEL_37;
  }
  return 4294954516;
}

void rcl_FigRCLCreateConfiguration_dispatcher(uint64_t a1)
{
  v66[16] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 33) = 1;
  uint64_t v2 = *(void *)(a1 + 40);
  CFTypeRef v4 = *(NSObject ***)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  uint64_t v5 = *(const void **)(a1 + 16);
  uint64_t valuePtr = 0;
  CFAbsoluteTime v6 = *(double *)(v2 + 16) + 21600.0;
  *(unsigned char *)(a1 + 33) = v6 < CFAbsoluteTimeGetCurrent();
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v8 = Mutable;
    CFArrayAppendValue(Mutable, @"storeBagVersion");
    CFArrayAppendValue(v8, @"versionConfiguration");
    CFArrayAppendValue(v8, @"configurationGroupMap");
    CFArrayAppendValue(v8, @"expires");
    CFArrayAppendValue(v8, @"OSVersion");
    CFDictionaryRef v9 = CFPreferencesCopyMultiple(v8, *(CFStringRef *)(v2 + 8), (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    if (!v9)
    {
      CFNumberRef v12 = 0;
      CFDictionaryRef v10 = v8;
      goto LABEL_46;
    }
    CFDictionaryRef v10 = v9;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v9, @"storeBagVersion");
    CFNumberRef v12 = Value;
    if (Value)
    {
      CFTypeID v13 = CFGetTypeID(Value);
      if (v13 != CFNumberGetTypeID()) {
        goto LABEL_44;
      }
      CFNumberGetValue(v12, kCFNumberCFIndexType, &valuePtr);
      if (valuePtr != 2) {
        goto LABEL_44;
      }
      CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"versionConfiguration");
      if (!v14) {
        goto LABEL_44;
      }
      CFDictionaryRef v15 = v14;
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 != CFDictionaryGetTypeID()) {
        goto LABEL_44;
      }
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v10, @"configurationGroupMap");
      CFNumberRef v12 = v17;
      if (v17)
      {
        CFTypeID v18 = CFGetTypeID(v17);
        if (v18 == CFDictionaryGetTypeID())
        {
          if (v5)
          {
            uint64_t v19 = CFDictionaryGetValue(v12, v5);
            if (v19) {
              goto LABEL_27;
            }
          }
          if (v3 && (CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v15, v3)) != 0
            || (CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v15, @"defaultBundleID")) != 0
            && (CFArrayRef v20 = v21, v22 = CFGetTypeID(v21), v22 == CFArrayGetTypeID()))
          {
            CFDictionaryRef v56 = v10;
            signed int v23 = arc4random_uniform(0x64u);
            if (CFArrayGetCount(v20) >= 1)
            {
              CFIndex v24 = 0;
              signed int v55 = v23;
              double v25 = (double)v23;
              double v26 = 0.0;
              do
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v24);
                double v61 = 0.0;
                if (!ValueAtIndex
                  || (CFDictionaryRef v28 = ValueAtIndex, v29 = CFGetTypeID(ValueAtIndex), v29 != CFDictionaryGetTypeID()))
                {
                  *(_DWORD *)type = 0;
                  os_log_type_t v59 = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v50 = *(_DWORD *)type;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v59)) {
                    unsigned int v51 = v50;
                  }
                  else {
                    unsigned int v51 = v50 & 0xFFFFFFFE;
                  }
                  if (v51)
                  {
                    unsigned int v62 = 136315138;
                    uint64_t v63 = "rcl_GetConfigurationGroupNameFromPercentArray";
                    goto LABEL_60;
                  }
LABEL_61:
                  CFDictionaryRef v10 = v56;
                  goto LABEL_43;
                }
                CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v28, @"percentage");
                if (!v30 || (CFNumberRef v31 = v30, v32 = CFGetTypeID(v30), v32 != CFNumberGetTypeID()))
                {
                  *(_DWORD *)type = 0;
                  os_log_type_t v59 = OS_LOG_TYPE_DEFAULT;
                  uint64_t v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v53 = *(_DWORD *)type;
                  if (os_log_type_enabled(v52, v59)) {
                    unsigned int v54 = v53;
                  }
                  else {
                    unsigned int v54 = v53 & 0xFFFFFFFE;
                  }
                  if (v54)
                  {
                    unsigned int v62 = 136315138;
                    uint64_t v63 = "rcl_GetConfigurationGroupNameFromPercentArray";
LABEL_60:
                    _os_log_send_and_compose_impl();
                  }
                  goto LABEL_61;
                }
                CFNumberGetValue(v31, kCFNumberFloat64Type, &v61);
                double v26 = v26 + v61;
                CFDataRef v33 = CFDictionaryGetValue(v28, @"configurationGroup");
                if (v26 >= v25) {
                  break;
                }
                ++v24;
              }
              while (v24 < CFArrayGetCount(v20));
              signed int v23 = v55;
              if (v33)
              {
                CFTypeID v34 = CFGetTypeID(v33);
                if (v34 == CFStringGetTypeID())
                {
                  uint64_t v19 = CFDictionaryGetValue(v12, v33);
                  CFDictionaryRef v10 = v56;
                  if (!v19) {
                    goto LABEL_44;
                  }
LABEL_27:
                  CFTypeID v35 = CFGetTypeID(v19);
                  if (v35 == CFDictionaryGetTypeID())
                  {
                    CFNumberRef v12 = (const __CFNumber *)CFRetain(v19);
                    v66[0] = 0;
                    unsigned int v62 = 0;
                    CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v10, @"expires");
                    if (!v36) {
                      goto LABEL_35;
                    }
                    CFNumberRef v37 = v36;
                    CFTypeID v38 = CFGetTypeID(v36);
                    if (v38 != CFNumberGetTypeID()) {
                      goto LABEL_35;
                    }
                    CFNumberGetValue(v37, kCFNumberDoubleType, v66);
                    CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v10, @"OSVersion");
                    if (v39
                      && (CFNumberRef v40 = v39, v41 = CFGetTypeID(v39), v41 == CFNumberGetTypeID())
                      && (CFNumberGetValue(v40, kCFNumberSInt32Type, &v62), gFRCL_OSVersion >= v62)
                      && (double v42 = *(double *)v66, v42 > CFAbsoluteTimeGetCurrent()))
                    {
                      char v43 = 0;
                    }
                    else
                    {
LABEL_35:
                      char v43 = 1;
                    }
                    *(unsigned char *)(a1 + 33) = v43;
                    goto LABEL_45;
                  }
                  goto LABEL_44;
                }
              }
            }
            LODWORD(v61) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v45 = LODWORD(v61);
            if (os_log_type_enabled(v44, type[0])) {
              unsigned int v46 = v45;
            }
            else {
              unsigned int v46 = v45 & 0xFFFFFFFE;
            }
            if (v46)
            {
              unsigned int v62 = 136315394;
              uint64_t v63 = "rcl_GetConfigurationGroupNameFromPercentArray";
              __int16 v64 = 1024;
              signed int v65 = v23;
              _os_log_send_and_compose_impl();
            }
            CFDictionaryRef v10 = v56;
LABEL_43:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
LABEL_44:
        CFNumberRef v12 = 0;
      }
    }
LABEL_45:
    CFRelease(v8);
LABEL_46:
    CFRelease(v10);
    goto LABEL_47;
  }
  CFNumberRef v12 = 0;
LABEL_47:
  *(void *)(a1 + 24) = v12;
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v47 = *(void *)(a1 + 40);
    __int16 v48 = *v4;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __rcl_FigRCLCreateConfiguration_dispatcher_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v47;
    dispatch_async(v48, block);
  }
}

const void *FigRCLCopyCFType(CFDictionaryRef theDict, __CFString *key)
{
  if (gStorebagOverrideDefaults)
  {
    CFPropertyListRef v4 = CFPreferencesCopyAppValue(key, @"com.apple.coremedia");
  }
  else
  {
    if (!theDict) {
      return 0;
    }
    CFNumberRef Value = CFDictionaryGetValue(theDict, key);
    if (!Value)
    {
      uint64_t v5 = 0;
      if (theDict) {
        goto LABEL_4;
      }
      return v5;
    }
    CFPropertyListRef v4 = CFRetain(Value);
  }
  uint64_t v5 = v4;
  if (!theDict) {
    return v5;
  }
LABEL_4:
  if (gStorebagOverrideDefaults || !CFDictionaryContainsKey(theDict, @"figTrial")) {
    return v5;
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = FigCFDictionaryGetValue();

  return (const void *)FigTrialCopyCFType(v6, key);
}

uint64_t FigRCLGetNumberWithDefault(const __CFDictionary *a1, __CFString *a2)
{
  uint64_t v2 = FigRCLCopyCFType(a1, a2);
  uint64_t NumberFromCFTypeWithDefault = FigGetNumberFromCFTypeWithDefault();
  if (v2) {
    CFRelease(v2);
  }
  return NumberFromCFTypeWithDefault;
}

uint64_t FigRCLGetLongNumberWithDefault(const __CFDictionary *a1, __CFString *a2)
{
  uint64_t v2 = FigRCLCopyCFType(a1, a2);
  Longuint64_t NumberFromCFTypeWithDefault = FigGetLongNumberFromCFTypeWithDefault();
  if (v2) {
    CFRelease(v2);
  }
  return LongNumberFromCFTypeWithDefault;
}

double FigRCLGetDoubleWithDefault(const __CFDictionary *a1, __CFString *a2)
{
  uint64_t v2 = FigRCLCopyCFType(a1, a2);
  FigGetDoubleFromCFTypeWithDefault();
  double v4 = v3;
  if (v2) {
    CFRelease(v2);
  }
  return v4;
}

CFDictionaryRef FigRCLCopyConfigurationGroupName(CFDictionaryRef theDict)
{
  CFDictionaryRef v1 = theDict;
  if (gStorebagOverrideDefaults)
  {
    uint64_t v2 = @"overriddenByDefaults";
  }
  else
  {
    if (!theDict) {
      return v1;
    }
    CFNumberRef Value = CFDictionaryGetValue(theDict, @"configurationGroup");
    if (Value) {
      uint64_t v2 = (__CFString *)CFRetain(Value);
    }
    else {
      uint64_t v2 = 0;
    }
  }
  if (!v1 || gStorebagOverrideDefaults || !CFDictionaryContainsKey(v1, @"figTrial")) {
    return (const __CFDictionary *)v2;
  }
  double v3 = (__CFString *)FigCFDictionaryGetValue();
  double v4 = FigTrialCopyExperimentId(v3);
  CFDictionaryRef v1 = (const __CFDictionary *)v4;
  if (v4) {
    CFRetain(v4);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v1;
}

uint64_t __figRCLReadStorebagOverrideOnce_block_invoke()
{
  return MEMORY[0x1F40DD2E0](@"overrideStoreBag", &gStorebagOverrideDefaults, 0);
}

void rcl_InitializeLoader()
{
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  gFRCL_Loader = (uint64_t)malloc_type_calloc(1uLL, 0x70uLL, 0x10E004040338472uLL);
  if (!gFRCL_Loader)
  {
LABEL_35:
    gFRCL_Loader = 0;
    return;
  }
  uint64_t v0 = FigDispatchQueueCreateWithPriority();
  uint64_t v1 = gFRCL_Loader;
  *(void *)gFRCL_Loader = v0;
  if (!v0) {
    goto LABEL_28;
  }
  CFTypeRef v2 = FigURLStorageSessionCopyGlobalSession();
  uint64_t v1 = gFRCL_Loader;
  *(void *)(gFRCL_Loader + 24) = v2;
  if (!v2) {
    goto LABEL_28;
  }
  CFTypeRef v3 = v2;
  dispatch_object_t v6 = *(dispatch_object_t *)v1;
  uint64_t v4 = v1 + 32;
  dispatch_object_t v5 = v6;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFDictionaryRef v9 = *(void (**)(CFTypeRef, dispatch_object_t, void, uint64_t))(v8 + 40);
  if (v9) {
    v9(v3, v5, 0, v4);
  }
  uint64_t v1 = gFRCL_Loader;
  if (!*(void *)(gFRCL_Loader + 32))
  {
LABEL_28:
    CFIndex v24 = *(const void **)(v1 + 32);
    if (v24)
    {
      CFRelease(v24);
      uint64_t v1 = gFRCL_Loader;
      *(void *)(gFRCL_Loader + 32) = 0;
    }
    double v25 = *(const void **)(v1 + 24);
    if (v25)
    {
      CFRelease(v25);
      uint64_t v1 = gFRCL_Loader;
      *(void *)(gFRCL_Loader + 24) = 0;
    }
    if (*(void *)v1)
    {
      dispatch_release(*(dispatch_object_t *)v1);
      uint64_t v1 = gFRCL_Loader;
    }
    rcl_ReleaseConnectionDataList(v1 + 8);
    free((void *)gFRCL_Loader);
    goto LABEL_35;
  }
  *(void *)(gFRCL_Loader + 8) = 0;
  *(void *)(v1 + 16) = v1 + 8;
  CFDictionaryRef v10 = (const void *)MGCopyAnswer();
  if (v10)
  {
    CFTypeRef v11 = v10;
    gFRCL_IsInternalOS = CFEqual(v10, @"Internal");
    CFRelease(v11);
  }
  CFStringRef v12 = (const __CFString *)MGCopyAnswer();
  if (v12)
  {
    CFStringRef v13 = v12;
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, @".");
    if (ArrayBySeparatingStrings)
    {
      CFArrayRef v15 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
      {
        int v16 = 0;
      }
      else
      {
        int v16 = 0;
        uint64_t v17 = 24;
        CFIndex v18 = 1;
        do
        {
          uint64_t v19 = v17;
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v18 - 1);
          v16 |= CFStringGetIntValue(ValueAtIndex) << v19;
          if (v18 >= CFArrayGetCount(v15)) {
            break;
          }
          uint64_t v17 = v19 - 8;
          ++v18;
        }
        while (v19);
      }
      CFRelease(v15);
    }
    else
    {
      int v16 = 0;
    }
    gFRCL_OSVersion = v16;
    CFRelease(v13);
  }
  gFRCL_DeviceModelName = CelestialGetModelSpecificName();
  CFArrayRef v21 = (const void *)MGCopyAnswer();
  if (v21)
  {
    CFTypeID v22 = v21;
    gFRCL_ProductTypeString = (uint64_t)CFRetain(v21);
    CFRelease(v22);
  }
  rcl_InitializeStoreBagContext((void *)(gFRCL_Loader + 40), (uint64_t)rcl_InitializeLoader_kFigRemoteConfigurationLoader_PumpStoreBagValues);
  rcl_InitializeStoreBagContext((void *)(gFRCL_Loader + 64), (uint64_t)rcl_InitializeLoader_kFigRemoteConfigurationLoader_CRABSStoreBagValues);
  signed int v23 = (void *)(gFRCL_Loader + 88);

  rcl_InitializeStoreBagContext(v23, (uint64_t)rcl_InitializeLoader_kFigRemoteConfigurationLoader_AirPlayStoreBagValues);
}

CFTypeRef rcl_InitializeStoreBagContext(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(const void **)(a2 + 24);
  CFPropertyListRef v6 = CFPreferencesCopyAppValue(*(CFStringRef *)a2, @"com.apple.coremedia");
  if (!v6)
  {
    CFPropertyListRef v6 = (CFPropertyListRef)(gFRCL_IsInternalOS ? v3 : v5);
    if (v6) {
      CFRetain(v6);
    }
  }
  *a1 = v6;
  if (v4) {
    CFTypeRef result = CFRetain(v4);
  }
  else {
    CFTypeRef result = 0;
  }
  a1[1] = result;
  a1[2] = 0;
  return result;
}

uint64_t *rcl_ReleaseConnectionDataList(uint64_t a1)
{
  CFTypeRef result = *(uint64_t **)a1;
  if (result)
  {
    do
    {
      uint64_t v3 = *result;
      uint64_t v4 = (void *)result[1];
      if (*result)
      {
        *(void *)(v3 + 8) = v4;
        uint64_t v4 = (void *)result[1];
      }
      else
      {
        *(void *)(a1 + 8) = v4;
      }
      *uint64_t v4 = v3;
      rcl_ReleaseConnectionData(result);
      CFTypeRef result = *(uint64_t **)a1;
    }
    while (*(void *)a1);
  }
  return result;
}

void rcl_ReleaseConnectionData(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[3];
    if (v2)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
      if (v5) {
        v5(v2);
      }
      CFPropertyListRef v6 = (const void *)a1[3];
      if (v6) {
        CFRelease(v6);
      }
    }
    uint64_t v7 = (const void *)a1[5];
    if (v7) {
      CFRelease(v7);
    }
    free(a1);
  }
}

void rcl_HTTPReadCallback(uint64_t a1, int a2, int a3, CMBlockBufferRef targetBBuf, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (gFigRemoteConfigLoaderInit != -1) {
    dispatch_once_f(&gFigRemoteConfigLoaderInit, 0, (dispatch_function_t)rcl_InitializeLoader);
  }
  uint64_t v12 = gFRCL_Loader;
  CMBlockBufferRef blockBufferOut = 0;
  if (!gFRCL_Loader) {
    return;
  }
  uint64_t v13 = gFRCL_Loader + 8;
  do
  {
    uint64_t v13 = *(void *)v13;
    if (!v13)
    {
      CFDictionaryRef v16 = 0;
      goto LABEL_97;
    }
  }
  while (*(void *)(v13 + 24) != a1);
  if (a8) {
    goto LABEL_102;
  }
  if (!targetBBuf)
  {
    OSStatus appended = 0;
    if ((a7 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  CFDictionaryRef v14 = *(OpaqueCMBlockBuffer **)(v13 + 40);
  if (!v14)
  {
    CFTypeRef v17 = CFRetain(targetBBuf);
    OSStatus appended = 0;
    *(void *)(v13 + 40) = v17;
    if ((a7 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_16:
    uint64_t v18 = *(void *)(v13 + 16);
    *(_DWORD *)(v13 + 48) = appended;
    if (!appended)
    {
      *(CFAbsoluteTime *)(v18 + 16) = CFAbsoluteTimeGetCurrent();
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (!CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CMBlockBufferRef *)(v13 + 40), (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut)&& !FigCreateCFDataWithBlockBufferNoCopy())
      {
        CFDictionaryRef v20 = (const __CFDictionary *)CFPropertyListCreateWithData(v19, 0, 1uLL, 0, 0);
        CFDictionaryRef v16 = v20;
        if (v20)
        {
          CFStringRef v21 = *(const __CFString **)(v18 + 8);
          CFTypeID v22 = CFDictionaryGetValue(v20, @"signature");
          int v100 = 0;
          int valuePtr = 21600;
          if (!v22
            || (signed int v23 = v22, v24 = CFGetTypeID(v22), v24 != CFStringGetTypeID())
            || (CFDataRef v25 = CFDataCreate(v19, FigRCLPublicKey, 270)) == 0)
          {
            __int16 v79 = FigSignalErrorAt();
            goto LABEL_92;
          }
          CFDataRef v26 = v25;
          v103[0] = 0.0;
          uint64_t v27 = SecKeyCreateFromPublicData();
          if (v27)
          {
            CFDictionaryRef v28 = (__SecKey *)v27;
            CFStringRef applicationID = v21;
            uint64_t v29 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedString:v23 options:1];
            CFTypeRef v94 = (CFTypeRef)v29;
            CFTypeRef cf = v28;
            if (!v29)
            {
              CFTypeRef v92 = 0;
              CFDataRef v93 = 0;
              goto LABEL_120;
            }
            CFDataRef v30 = (const __CFData *)v29;
            CFDataRef v98 = v26;
            CFNumberRef v31 = CFDictionaryGetValue(v16, @"bag");
            if (v31 && (CFTypeID v32 = v31, v33 = CFGetTypeID(v31), v33 == CFStringGetTypeID()))
            {
              CFDataRef v34 = (const __CFData *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedString:v32 options:1];
              if (v34)
              {
                CFDataRef v35 = v34;
                BytePtr = CFDataGetBytePtr(v34);
                CC_LONG Length = CFDataGetLength(v35);
                CC_SHA1(BytePtr, Length, md);
                CFTypeID v38 = CFDataGetBytePtr(v30);
                size_t v39 = CFDataGetLength(v30);
                CFDataRef v93 = v35;
                if (SecKeyRawVerify(v28, 0x8002u, md, 0x14uLL, v38, v39))
                {
                  CFTypeRef v92 = 0;
                }
                else
                {
                  CFPropertyListRef v40 = CFPropertyListCreateWithData(v19, v35, 1uLL, 0, 0);
                  CFTypeRef v92 = v40;
                  if (v40)
                  {
                    CFDictionaryRef v41 = (const __CFDictionary *)v40;
                    CFTypeID v42 = CFGetTypeID(v40);
                    if (v42 == CFDictionaryGetTypeID())
                    {
                      CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v41, @"refreshCycle");
                      if (v43)
                      {
                        CFNumberRef v44 = v43;
                        CFDictionaryRef v45 = v41;
                        CFTypeID v46 = CFGetTypeID(v43);
                        BOOL v47 = v46 == CFNumberGetTypeID();
                        CFDictionaryRef v41 = v45;
                        if (v47) {
                          CFNumberGetValue(v44, kCFNumberIntType, &valuePtr);
                        }
                      }
                      CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v41, @"storeBagVersion");
                      if (v48)
                      {
                        CFNumberRef v49 = v48;
                        CFTypeID v50 = CFGetTypeID(v48);
                        if (v50 == CFNumberGetTypeID())
                        {
                          CFNumberGetValue(v49, kCFNumberSInt32Type, &v100);
                          if (v100 == 2)
                          {
                            CFDictionaryRef v51 = (const __CFDictionary *)CFDictionaryGetValue(v41, @"configurationGroupMap");
                            if (v51)
                            {
                              CFNumberRef value = v49;
                              CFDictionaryRef theDict = v51;
                              CFTypeID v52 = CFGetTypeID(v51);
                              if (v52 == CFDictionaryGetTypeID())
                              {
                                v103[0] = CFAbsoluteTimeGetCurrent() + (double)valuePtr;
                                CFNumberRef v53 = CFNumberCreate(v19, kCFNumberDoubleType, v103);
                                CFDataRef v26 = v98;
                                if (v53)
                                {
                                  CFNumberRef v54 = v53;
                                  CFDictionaryRef v87 = v16;
                                  uint64_t v88 = v12;
                                  CFArrayRef v55 = (const __CFArray *)CFDictionaryGetValue(v41, @"versionBagArray");
                                  if (!v55) {
                                    goto LABEL_70;
                                  }
                                  CFArrayRef v56 = v55;
                                  CFTypeID v57 = CFGetTypeID(v55);
                                  if (v57 != CFArrayGetTypeID() || CFArrayGetCount(v56) < 1) {
                                    goto LABEL_70;
                                  }
                                  CFNumberRef v86 = v54;
                                  v96 = 0;
                                  CFNumberRef v97 = 0;
                                  CFIndex v58 = 0;
                                  while (1)
                                  {
                                    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v56, v58);
                                    if (ValueAtIndex)
                                    {
                                      CFDictionaryRef v60 = ValueAtIndex;
                                      CFTypeID v61 = CFGetTypeID(ValueAtIndex);
                                      if (v61 == CFDictionaryGetTypeID())
                                      {
                                        unsigned int v62 = CFDictionaryGetValue(v60, @"deviceList");
                                        CFArrayRef v63 = (const __CFArray *)CFDictionaryGetValue(v60, @"productType");
                                        if (!gFRCL_ProductTypeString
                                          || (CFArrayRef v64 = v63) == 0
                                          || (CFTypeID v65 = CFGetTypeID(v63), v65 != CFArrayGetTypeID())
                                          || CFArrayGetCount(v64) < 1
                                          || (*(void *)md = MEMORY[0x1E4F143A8],
                                              uint64_t v105 = 3221225472,
                                              v106 = __rcl_CopyVersionBag_block_invoke,
                                              v107 = &unk_1E57A3840,
                                              uint64_t v108 = gFRCL_ProductTypeString,
                                              [(__CFArray *)v64 indexOfObjectPassingTest:md] != 0x7FFFFFFFFFFFFFFFLL))
                                        {
                                          if (!v62) {
                                            goto LABEL_60;
                                          }
                                          CFTypeID v66 = CFGetTypeID(v62);
                                          if (v66 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v62) < 1) {
                                            goto LABEL_60;
                                          }
                                          if (CFArrayGetCount((CFArrayRef)v62) >= 1) {
                                            break;
                                          }
                                        }
                                      }
                                    }
LABEL_64:
                                    if (++v58 >= CFArrayGetCount(v56))
                                    {
                                      CFNumberRef v54 = v86;
                                      if (v96)
                                      {
                                        CFTypeID v71 = CFGetTypeID(v96);
                                        if (v71 == CFDictionaryGetTypeID())
                                        {
                                          if (v97)
                                          {
                                            CFTypeID v72 = CFGetTypeID(v97);
                                            if (v72 == CFNumberGetTypeID())
                                            {
                                              CFTypeRef v73 = CFRetain(v96);
                                              CFTypeRef v74 = CFRetain(v97);
LABEL_71:
                                              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                              uint64_t v76 = Mutable;
                                              CFDictionaryRef v16 = v87;
                                              uint64_t v12 = v88;
                                              CFDataRef v26 = v98;
                                              if (Mutable)
                                              {
                                                CFDictionarySetValue(Mutable, @"expires", v54);
                                                CFDictionarySetValue(v76, @"storeBagVersion", value);
                                                CFDictionarySetValue(v76, @"OSVersion", v74);
                                                CFDictionarySetValue(v76, @"versionConfiguration", v73);
                                                CFMutableDictionaryRef v77 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                                if (v77)
                                                {
                                                  CFDictionaryApplyFunction((CFDictionaryRef)v73, (CFDictionaryApplierFunction)rcl_VersionConfigurationDictApplierFunc, v77);
                                                  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)rcl_ConfigurationGroupMapDictApplierFunc, v77);
                                                  CFMutableDictionaryRef v78 = v77;
                                                }
                                                else
                                                {
                                                  CFMutableDictionaryRef v78 = theDict;
                                                }
                                                CFDictionarySetValue(v76, @"configurationGroupMap", v78);
                                                CFPreferencesSetMultiple(v76, 0, applicationID, (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
                                                __int16 v79 = 0;
                                              }
                                              else
                                              {
                                                __int16 v79 = FigSignalErrorAt();
                                                CFMutableDictionaryRef v77 = 0;
                                              }
                                              goto LABEL_75;
                                            }
                                          }
                                        }
                                      }
LABEL_70:
                                      CFTypeRef v74 = 0;
                                      CFTypeRef v73 = 0;
                                      if (!FigSignalErrorAt()) {
                                        goto LABEL_71;
                                      }
                                      __int16 v79 = FigSignalErrorAt();
                                      CFTypeRef v73 = 0;
                                      CFTypeRef v74 = 0;
                                      CFMutableDictionaryRef v77 = 0;
                                      uint64_t v76 = 0;
                                      CFDictionaryRef v16 = v87;
                                      uint64_t v12 = v88;
                                      CFDataRef v26 = v98;
LABEL_75:
                                      CFRelease(v26);
                                      CFRelease(cf);
                                      if (v94) {
                                        CFRelease(v94);
                                      }
                                      if (v92) {
                                        CFRelease(v92);
                                      }
                                      if (v93) {
                                        CFRelease(v93);
                                      }
                                      if (v54) {
                                        CFRelease(v54);
                                      }
                                      if (v74) {
                                        CFRelease(v74);
                                      }
                                      if (v73) {
                                        CFRelease(v73);
                                      }
                                      if (v77) {
                                        CFRelease(v77);
                                      }
                                      if (v76)
                                      {
                                        long long v80 = v76;
                                        goto LABEL_91;
                                      }
                                      goto LABEL_92;
                                    }
                                  }
                                  CFIndex v67 = 0;
                                  while (1)
                                  {
                                    CFArrayGetValueAtIndex((CFArrayRef)v62, v67);
                                    if (FigCFEqual()) {
                                      break;
                                    }
                                    if (++v67 >= CFArrayGetCount((CFArrayRef)v62)) {
                                      goto LABEL_64;
                                    }
                                  }
LABEL_60:
                                  CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(v60, @"OSVersion");
                                  unsigned int v102 = 0;
                                  if (v68)
                                  {
                                    CFNumberRef v69 = v68;
                                    CFTypeID v70 = CFGetTypeID(v68);
                                    if (v70 == CFNumberGetTypeID())
                                    {
                                      CFNumberGetValue(v69, kCFNumberSInt32Type, &v102);
                                      if (gFRCL_OSVersion >= v102)
                                      {
                                        v96 = CFDictionaryGetValue(v60, @"versionConfiguration");
                                        CFNumberRef v97 = v69;
                                      }
                                    }
                                  }
                                  goto LABEL_64;
                                }
LABEL_120:
                                __int16 v79 = FigSignalErrorAt();
                                CFTypeRef v73 = 0;
                                CFTypeRef v74 = 0;
                                CFNumberRef v54 = 0;
                                CFMutableDictionaryRef v77 = 0;
                                uint64_t v76 = 0;
                                goto LABEL_75;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                CFTypeRef v92 = 0;
                CFDataRef v93 = 0;
              }
            }
            else
            {
              CFTypeRef v92 = 0;
              CFDataRef v93 = 0;
            }
            CFDataRef v26 = v98;
            goto LABEL_120;
          }
          __int16 v79 = FigSignalErrorAt();
          long long v80 = v26;
LABEL_91:
          CFRelease(v80);
LABEL_92:
          if (v79)
          {
            unsigned int v102 = 0;
            LOBYTE(valuePtr) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v84 = v102;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)valuePtr)) {
              unsigned int v85 = v84;
            }
            else {
              unsigned int v85 = v84 & 0xFFFFFFFE;
            }
            if (v85)
            {
              LODWORD(v103[0]) = 136315138;
              *(void *)((char *)v103 + 4) = "rcl_HTTPReadCallback";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
LABEL_93:
        uint64_t v81 = *(void *)v13;
        long long v82 = *(uint64_t **)(v13 + 8);
        if (*(void *)v13)
        {
          *(void *)(v81 + 8) = v82;
          long long v82 = *(uint64_t **)(v13 + 8);
        }
        else
        {
          *(void *)(v12 + 16) = v82;
        }
        *long long v82 = v81;
        goto LABEL_97;
      }
    }
LABEL_102:
    CFDictionaryRef v16 = 0;
    goto LABEL_93;
  }
  OSStatus appended = CMBlockBufferAppendBufferReference(v14, targetBBuf, 0, 0, 0);
  if ((a7 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_14:
  CFDictionaryRef v16 = 0;
  uint64_t v13 = 0;
LABEL_97:
  rcl_ReleaseConnectionData((void *)v13);
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v16) {
    CFRelease(v16);
  }
}

void rcl_VersionConfigurationDictApplierFunc(int a1, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
    {
      FigCFArrayApplyFunction();
    }
  }
}

void rcl_ConfigurationGroupMapDictApplierFunc(const void *a1, const void *a2, void *cf)
{
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFDictionaryReplaceValue((CFMutableDictionaryRef)cf, a1, a2);
    }
  }
}

void rcl_ConfigGroupArrayApplierFunc(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFDictionaryGetTypeID())
    {
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"configurationGroup");
      if (Value)
      {
        CFDictionarySetValue(a2, Value, Value);
      }
    }
  }
}

uint64_t FigAlternateCreationContextCopyMediaGroupLocatorMapForMediaGroupID(CFMutableDictionaryRef *a1, void *a2, const void *a3, void *a4)
{
  CFDictionaryRef theDict = 0;
  if (a4)
  {
    uint64_t v6 = fa_ensureSerializationContextAndCopyMediaGroupForCache(a1, a2, &theDict);
    CFDictionaryRef v7 = theDict;
    if (!v6)
    {
      if (CFDictionaryContainsKey(theDict, a3))
      {
        CFNumberRef Value = CFDictionaryGetValue(v7, a3);
        if (Value) {
          CFNumberRef Value = CFRetain(Value);
        }
      }
      else
      {
        CFNumberRef Value = 0;
      }
      *a4 = Value;
    }
    if (v7) {
      CFRelease(v7);
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAlternateCreationContextSetMediaGroupLocatorMapForMediaGroupID(CFMutableDictionaryRef *a1, void *a2, const void *a3, const void *a4)
{
  CFMutableDictionaryRef theDict = 0;
  uint64_t v6 = fa_ensureSerializationContextAndCopyMediaGroupForCache(a1, a2, &theDict);
  CFMutableDictionaryRef v7 = theDict;
  if (!v6) {
    CFDictionarySetValue(theDict, a3, a4);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v6;
}

uint64_t FigResetDisplaySleepTimer(__CFString *a1)
{
  uint64_t v6 = 0;
  CFMutableDictionaryRef v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  if (FigResetDisplaySleepTimer_onceToken != -1) {
    dispatch_once(&FigResetDisplaySleepTimer_onceToken, &__block_literal_global_18);
  }
  CFTypeID v2 = @"com.apple.coremedia";
  if (a1) {
    CFTypeID v2 = a1;
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __FigResetDisplaySleepTimer_block_invoke_2;
  v5[3] = &unk_1E5794640;
  v5[4] = &v6;
  v5[5] = v2;
  dispatch_sync((dispatch_queue_t)FigResetDisplaySleepTimer_sAssertionQueue, v5);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

dispatch_queue_t __FigResetDisplaySleepTimer_block_invoke()
{
  FigResetDisplaySleepTimer_sActiveAssertions = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.displaysleeptimer", 0);
  FigResetDisplaySleepTimer_sAssertionQueue = (uint64_t)result;
  return result;
}

void __FigResetDisplaySleepTimer_block_invoke_2(uint64_t a1)
{
  CFTypeID v2 = (void *)MEMORY[0x199711A30]();
  uint64_t v3 = (FigDisplaySleepAssertion *)[(id)FigResetDisplaySleepTimer_sActiveAssertions objectForKey:*(void *)(a1 + 40)];
  if (!v3)
  {
    CFTypeID v4 = [FigDisplaySleepAssertion alloc];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v7 = MEMORY[0x1E4F143A8];
    uint64_t v8 = 3221225472;
    char v9 = __FigResetDisplaySleepTimer_block_invoke_3;
    CFDictionaryRef v10 = &__block_descriptor_40_e5_v8__0l;
    uint64_t v11 = v5;
    uint64_t v3 = -[FigDisplaySleepAssertion initWithReason:queue:expirationHandler:](v4, "initWithReason:queue:expirationHandler:");
    [(id)FigResetDisplaySleepTimer_sActiveAssertions setObject:v3 forKey:*(void *)(a1 + 40)];
    uint64_t v6 = v3;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [(FigDisplaySleepAssertion *)v3 resetIdleTimer];
}

uint64_t __FigResetDisplaySleepTimer_block_invoke_3(uint64_t a1)
{
  return [(id)FigResetDisplaySleepTimer_sActiveAssertions removeObjectForKey:*(void *)(a1 + 32)];
}

uint64_t FigCDSLegibleOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCDSOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

__CFString *FigCDSLegibleOutput_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSLegibleOutput %p>", a1);
  return Mutable;
}

uint64_t transactionBegin_3()
{
  return 0;
}

uint64_t transactionFlush_3()
{
  return 0;
}

uint64_t transactionCommit_3()
{
  return 0;
}

uint64_t setNeedsDisplayInRect_3()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    (*(void (**)(void, void))(DerivedStorage + 88))(*(void *)DerivedStorage, *(void *)(DerivedStorage + 72));
  }
  return 0;
}

double getBounds_3()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t setBounds_3(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  *(double *)(DerivedStorage + 24) = a3;
  *(double *)(DerivedStorage + 32) = a4;
  (*(void (**)(void, double, double, double, double))(DerivedStorage + 80))(*(void *)(DerivedStorage + 72), a1, a2, a3, a4);
  return 0;
}

uint64_t setVideoBounds_3(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[5] = a1;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = a3;
  DerivedStorage[8] = a4;
  return 0;
}

int clear_3(void)
{
  return 0;
}

uint64_t figDeferredTransactionClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gFigDeferredTransactionTypeID = result;
  return result;
}

uint64_t FigDeferredTransactionCreate(uint64_t a1, uint64_t *a2)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2) {
    goto LABEL_6;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (FigDeferredTransactionGetTypeID_oneTimeOnly != -1) {
    dispatch_once_f(&FigDeferredTransactionGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figDeferredTransactionClassInitialize);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = Instance;
    uint64_t v6 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    *(void *)(Instance + 32) = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v5 + 40) = CFArrayCreateMutable(v3, 0, v6);
    *(unsigned char *)(v5 + 48) = 0;
    *(void *)(v5 + 24) = 0;
    *a2 = v5;
    return 0;
  }
  else
  {
LABEL_6:
    return FigSignalErrorAt();
  }
}

uint64_t FigDeferredTransactionCommit(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 16))
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 32);
    if (v2 && CFArrayGetCount(v2) >= 1)
    {
      *(void *)(a1 + 24) = FigGetUpTimeNanoseconds();
      if (!*(unsigned char *)(a1 + 48))
      {
        uint64_t v5 = (void *)MEMORY[0x199711A30]();
        LODWORD(v3) = fdt_commitTransactionChanges(a1);
        unsigned int v6 = fdt_performPostCommitChanges(a1);
        if (v3) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v6;
        }
        goto LABEL_8;
      }
      CFRetain((CFTypeRef)a1);
      dispatch_async_f(MEMORY[0x1E4F14428], (void *)a1, (dispatch_function_t)fdt_commitTransactionOnMainQueue);
    }
    uint64_t v3 = 0;
LABEL_8:
    *(unsigned char *)(a1 + 16) = 1;
    return v3;
  }

  return FigSignalErrorAt();
}

void fdt_commitTransactionOnMainQueue(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = (void *)MEMORY[0x199711A30]();
  if (a1[3])
  {
    if ((double)(FigGetUpTimeNanoseconds() - a1[3]) / 1000000000.0 > 0.02)
    {
      CFStringRef v3 = CFCopyDescription(a1);
      int v13 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v3) {
        CFRelease(v3);
      }
    }
  }
  objc_msgSend(MEMORY[0x1E4F39CF8], "begin", v8, v9);
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  fdt_commitTransactionChanges((uint64_t)a1);
  uint64_t v5 = [FigDeferredTransactionReleaseTrigger alloc];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __fdt_commitTransactionOnMainQueue_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = a1;
  unsigned int v6 = [(FigDeferredTransactionReleaseTrigger *)v5 initWithReleaseBlock:v11];
  uint64_t v7 = v6;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __fdt_commitTransactionOnMainQueue_block_invoke_2;
  v10[3] = &unk_1E5794738;
  v10[4] = v6;
  [MEMORY[0x1E4F39CF8] addCommitHandler:v10 forPhase:5];
  [MEMORY[0x1E4F39CF8] commit];
}

uint64_t fdt_commitTransactionChanges(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 32);
  if (!v2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    LODWORD(v6) = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v5);
      unsigned int v8 = fdt_performTransactionChange((uint64_t)ValueAtIndex);
      if (v6) {
        unsigned int v9 = v6;
      }
      else {
        unsigned int v9 = v8;
      }
      if (v8) {
        uint64_t v6 = v9;
      }
      else {
        uint64_t v6 = v6;
      }
      ++v5;
    }
    while (v4 != v5);
  }
  CFDictionaryRef v10 = *(const void **)(a1 + 32);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 32) = 0;
  }
  return v6;
}

uint64_t fdt_performPostCommitChanges(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 40);
  if (!v2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1) {
    return 0;
  }
  CFIndex v4 = Count;
  CFIndex v5 = 0;
  LODWORD(v6) = 0;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v5);
    unsigned int v8 = fdt_performTransactionChange((uint64_t)ValueAtIndex);
    if (v6) {
      unsigned int v9 = v6;
    }
    else {
      unsigned int v9 = v8;
    }
    if (v8) {
      uint64_t v6 = v9;
    }
    else {
      uint64_t v6 = v6;
    }
    ++v5;
  }
  while (v4 != v5);
  return v6;
}

uint64_t FigDeferredTransactionAppendChangeWithCallback(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  CFNumberRef value = 0;
  CFTypeRef v12 = a1;
  if (!a1)
  {
    uint64_t v13 = FigDeferredTransactionCreate(0, (uint64_t *)&cf);
    if (v13)
    {
LABEL_6:
      uint64_t v14 = v13;
      goto LABEL_12;
    }
    CFTypeRef v12 = cf;
  }
  if (*((unsigned char *)v12 + 16))
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_6;
  }
  uint64_t v13 = fdr_createChange(a7, a4, a5, &value);
  if (v13) {
    goto LABEL_6;
  }
  CFArrayAppendValue(*((CFMutableArrayRef *)v12 + 4), value);
  if (a2) {
    *((unsigned char *)v12 + 48) = 1;
  }
  if (!a1)
  {
    uint64_t v13 = FigDeferredTransactionCommit((uint64_t)v12);
    goto LABEL_6;
  }
  uint64_t v14 = 0;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  return v14;
}

uint64_t fdr_createChange(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a4) {
    goto LABEL_6;
  }
  if (FigDeferredTransactionChangeGetTypeID_oneTimeOnly != -1) {
    dispatch_once_f(&FigDeferredTransactionChangeGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figDeferredTransactionChangeClassInitialize);
  }
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    Instance[3] = a1;
    Instance[4] = a3;
    Instance[5] = a2;
    *a4 = Instance;
    return 0;
  }
  else
  {
LABEL_6:
    return FigSignalErrorAt();
  }
}

uint64_t FigDeferredTransactionAppendPostCommitChangeWithCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFNumberRef value = 0;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v7 = fdr_createChange(a6, a3, a4, &value);
      if (!v7) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), value);
      }
    }
  }
  else
  {
    uint64_t v7 = fdr_createChange(a6, a3, a4, &value);
    if (!v7) {
      fdt_performTransactionChange((uint64_t)value);
    }
  }
  if (value) {
    CFRelease(value);
  }
  return v7;
}

uint64_t fdt_performTransactionChange(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void (**)(void))(a1 + 24)) != 0)
  {
    v1(*(void *)(a1 + 40));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

double figDeferredTransactionInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figDeferredTransactionFinalize(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef figDeferredTransactionCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<FigDeferredTransaction %p>", a1);
}

__CFString *figDeferredTransactionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef v3 = Mutable;
  CFAllocatorRef v4 = "wants";
  if (!*(unsigned char *)(a1 + 48)) {
    CFAllocatorRef v4 = "doesn't need";
  }
  if (*(unsigned char *)(a1 + 16)) {
    CFIndex v5 = "committed";
  }
  else {
    CFIndex v5 = "pending";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigDeferredTransaction %p, %s CATransaction, is %s", a1, v4, v5);
  CFStringAppend(v3, @"\nChanges:\n");
  CFArrayRef v6 = *(const __CFArray **)(a1 + 32);
  if (v6)
  {
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      for (CFIndex i = 0; i != v8; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        CFStringRef v11 = CFCopyDescription(ValueAtIndex);
        CFStringAppend(v3, v11);
        CFStringAppend(v3, @"\n");
        if (v11) {
          CFRelease(v11);
        }
      }
    }
  }
  CFStringAppend(v3, @"\nPost commit changes:\n");
  CFArrayRef v12 = *(const __CFArray **)(a1 + 40);
  if (v12)
  {
    CFIndex v13 = CFArrayGetCount(v12);
    if (v13 >= 1)
    {
      CFIndex v14 = v13;
      for (CFIndex j = 0; j != v14; ++j)
      {
        CFDictionaryRef v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), j);
        CFStringRef v17 = CFCopyDescription(v16);
        CFStringAppend(v3, v17);
        CFStringAppend(v3, @"\n");
        if (v17) {
          CFRelease(v17);
        }
      }
    }
  }
  CFStringAppendFormat(v3, 0, @">");
  return v3;
}

void __fdt_commitTransactionOnMainQueue_block_invoke(uint64_t a1)
{
  fdt_performPostCommitChanges(*(void *)(a1 + 32));
  CFArrayRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __fdt_commitTransactionOnMainQueue_block_invoke_2(uint64_t a1)
{
}

uint64_t figDeferredTransactionChangeClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gFigDeferredTransactionChangeTypeID = result;
  return result;
}

double figDeferredTransactionChangeInit(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t figDeferredTransactionChangeFinalize(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 32);
  if (v1) {
    return v1(*(void *)(result + 40));
  }
  return result;
}

CFStringRef figDeferredTransactionChangeCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<FigDeferredTransactionChange %p>", a1);
}

__CFString *figDeferredTransactionChangeCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigDeferredTransactionChange %p", a1);
  CFStringAppendFormat(Mutable, 0, @"\nunknown caller requesting to\n");
  CFStringAppendFormat(Mutable, 0, @"\n%p", *(void *)(a1 + 24));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t FigVTTStyleBlockCreate(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigVTTNodeGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      uint64_t DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
      uint64_t v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
      if (!v3) {
        *a2 = 0;
      }
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figVTTStyleBlock_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }

  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTStyleBlock_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"styleblock: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figVTTStyleBlock_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 7;
  return 0;
}

uint64_t figVTTStyleBlock_copyChildNodeArray(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v4 = *(CFTypeRef *)(DerivedStorage + 16);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTStyleBlock_copyNodeDocumentSerialization(const void *a1, __CFString **a2)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  if (!a2)
  {
    uint64_t v11 = FigSignalErrorAt();
    CFArrayRef v6 = 0;
    goto LABEL_15;
  }
  *a2 = 0;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v4, 0);
  CFArrayRef v6 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"%@\n", @"STYLE");
    uint64_t v7 = FigVTTNodeCopyChildNodeArray((uint64_t)a1, (uint64_t)&theArray);
    if (!v7)
    {
      for (CFIndex i = 0; ; ++i)
      {
        CFIndex Count = (CFIndex)theArray;
        if (theArray) {
          CFIndex Count = CFArrayGetCount(theArray);
        }
        if (i >= Count) {
          break;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v7 = FigVTTNodeCopyDocumentSerialization((uint64_t)ValueAtIndex, (uint64_t)&cf);
        if (v7) {
          goto LABEL_22;
        }
        CFStringAppendFormat(v6, 0, @"%@\n", cf);
      }
      CFStringAppendFormat(v6, 0, @"\n");
      uint64_t v11 = 0;
      *a2 = v6;
      CFArrayRef v6 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
LABEL_22:
  uint64_t v11 = v7;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v11;
}

uint64_t figVTTStyleBlock_setChildNodeArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigMultivariantPlaylistGetTypeID()
{
  long long v1 = xmmword_1E57A3880;
  if (mvp_getTypeID_once != -1) {
    dispatch_once_f(&mvp_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass_1);
  }
  return mvp_getTypeID_typeID;
}

uint64_t FigMultivariantPlaylistCreateEmpty(uint64_t a1, void *a2)
{
  if (a2 && (FigMultivariantPlaylistGetTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    CFAllocatorRef v4 = (void *)Instance;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v4[4] = Mutable;
    if (!Mutable) {
      goto LABEL_12;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v4[6] = v8;
    if (!v8) {
      goto LABEL_12;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v4[7] = v10;
    if (!v10) {
      goto LABEL_12;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v4[5] = v12;
    if (!v12) {
      goto LABEL_12;
    }
    CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v14 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
    v4[8] = v14;
    if (!v14) {
      goto LABEL_12;
    }
    CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v16 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]);
    v4[2] = v16;
    if (!v16) {
      goto LABEL_12;
    }
    CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v18 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
    v4[3] = v18;
    if (v18
      && (CFAllocatorRef v19 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          CFMutableArrayRef v20 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]),
          (v4[9] = v20) != 0))
    {
      *a2 = v4;
      return 0;
    }
    else
    {
LABEL_12:
      uint64_t v22 = FigSignalErrorAt();
      CFRelease(v4);
      return v22;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMultivariantPlaylistGetAlternates(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t FigMultivariantPlaylistAddAlternate(uint64_t a1, void *value)
{
  CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 16);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 16) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigMultivariantPlaylistSetAlternates(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetMediaSelectionArray(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigMultivariantPlaylistAddMediaSelection(uint64_t a1, void *value)
{
  CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 24);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 24) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigMultivariantPlaylistSetMediaSelectionArray(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetAudioGroups(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void FigMultivariantPlaylistSetAudioGroups(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetMutableAudioGroups(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t FigMultivariantPlaylistGetVideoGroups(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigMultivariantPlaylistGetMutableVideoGroups(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void FigMultivariantPlaylistSetVideoGroups(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetSubtitleGroups(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t FigMultivariantPlaylistGetMutableSubtitleGroups(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void FigMultivariantPlaylistSetSubtitleGroups(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetClosedCaptionGroups(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void FigMultivariantPlaylistSetClosedCaptionGroups(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetMutableClosedCaptionGroups(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t FigMultivariantPlaylistGetContentSteeringServerURL(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

void FigMultivariantPlaylistSetContentSteeringServerURL(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetContentSteeringInitPathwayID(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

void FigMultivariantPlaylistSetContentSteeringInitPathwayID(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 96);
  *(void *)(a1 + 96) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetSessionDataSpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t FigMultivariantPlaylistAddSessionDataSpecifier(uint64_t a1, void *value)
{
  CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 64);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 64) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMultivariantPlaylistGetContentKeySpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t FigMultivariantPlaylistAddContentKeySpecifier(uint64_t a1, const void *a2)
{
  if (*(void *)(a1 + 72)
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 72) = Mutable) != 0))
  {
    LastCFNumberRef Value = FigCFArrayGetLastValue();
    if (LastValue)
    {
      uint64_t v7 = LastValue;
      FigContentKeySpecifierSetNextKey(LastValue, (uint64_t)a2);
      FigContentKeySpecifierSetPreviousKey((uint64_t)a2, v7);
      FigContentKeySpecifierSetNextKey((uint64_t)a2, 0);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMultivariantPlaylistGetPlaylistVariables(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void FigMultivariantPlaylistSetPlaylistVariables(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMultivariantPlaylistGetVersion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t FigMultivariantPlaylistSetVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 104) = a2;
  return result;
}

uint64_t FigMultivariantPlaylistHasIndependentSegments(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108);
}

uint64_t FigMultivariantPlaylistSetHasIndependentSegments(uint64_t result, char a2)
{
  *(unsigned char *)(result + 108) = a2;
  return result;
}

double FigMultivariantPlaylistGetStartTimeValue(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

uint64_t FigMultivariantPlaylistSetStartTimeValue(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  return result;
}

uint64_t FigMultivariantPlaylistHasStartTime(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

uint64_t FigMultivariantPlaylistSetHasStartTime(uint64_t result, char a2)
{
  *(unsigned char *)(result + 120) = a2;
  return result;
}

uint64_t FigMultivariantPlaylistIsStartTimePrecise(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 121);
}

uint64_t FigMultivariantPlaylistSetIsStartTimePrecise(uint64_t result, char a2)
{
  *(unsigned char *)(result + 121) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetTypeID()
{
  long long v1 = xmmword_1E57A3890;
  if (mp_getTypeID_once != -1) {
    dispatch_once_f(&mp_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass_1);
  }
  return mp_getTypeID_typeID;
}

uint64_t FigMediaPlaylistCreateEmpty(uint64_t a1, void *a2)
{
  if (a2 && (FigMediaPlaylistGetTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    CFAllocatorRef v4 = (void *)Instance;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
    v4[2] = Mutable;
    if (!Mutable) {
      goto LABEL_12;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v8 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    v4[3] = v8;
    if (!v8) {
      goto LABEL_12;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v10 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    v4[4] = v10;
    if (!v10) {
      goto LABEL_12;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v12 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
    v4[5] = v12;
    if (!v12) {
      goto LABEL_12;
    }
    CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v14 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
    v4[6] = v14;
    if (!v14) {
      goto LABEL_12;
    }
    CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v16 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]);
    v4[7] = v16;
    if (v16
      && (CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          v4[26] = CFDictionaryCreateMutable(v17, 0, &parsedIndexKeyCallbacks, MEMORY[0x1E4F1D540]),
          v4[7])
      && (CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          v4[27] = CFDictionaryCreateMutable(v18, 0, &parsedIndexKeyCallbacks, MEMORY[0x1E4F1D540]),
          v4[7]))
    {
      *a2 = v4;
      return 0;
    }
    else
    {
LABEL_12:
      uint64_t v20 = FigSignalErrorAt();
      CFRelease(v4);
      return v20;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaPlaylistGetRenditionReportSpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t FigMediaPlaylistAddRenditionReportSpecifier(uint64_t a1, void *value)
{
  CFMutableArrayRef Mutable = *(__CFArray **)(a1 + 16);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 16) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigMediaPlaylistSetRenditionReportSpecifiers(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaPlaylistGetDateRangeSpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigMediaPlaylistGetMutableDateRangeSpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigMediaPlaylistAddDateRangeSpecifier(uint64_t a1, void *value)
{
  CFMutableArrayRef Mutable = *(__CFArray **)(a1 + 24);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 24) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigMediaPlaylistSetDateRangeSpecifiers(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t FigMediaPlaylistGetContentKeySpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t FigMediaPlaylistAddContentKeySpecifier(uint64_t a1, const void *a2)
{
  if (*(void *)(a1 + 32)
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 32) = Mutable) != 0))
  {
    LastCFNumberRef Value = FigCFArrayGetLastValue();
    if (LastValue)
    {
      uint64_t v7 = LastValue;
      FigContentKeySpecifierSetNextKey(LastValue, (uint64_t)a2);
      FigContentKeySpecifierSetPreviousKey((uint64_t)a2, v7);
      FigContentKeySpecifierSetNextKey((uint64_t)a2, 0);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaPlaylistGetMediaSegmentSpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigMediaPlaylistAddMediaSegmentSpecifier(uint64_t a1, const void *a2)
{
  if (*(void *)(a1 + 40)
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 40) = Mutable) != 0))
  {
    LastCFNumberRef Value = FigCFArrayGetLastValue();
    if (LastValue)
    {
      uint64_t v7 = LastValue;
      FigMediaSegmentSpecifierSetNextSegment(LastValue, (uint64_t)a2);
      FigMediaSegmentSpecifierSetPreviousSegment((uint64_t)a2, v7);
      FigMediaSegmentSpecifierSetNextSegment((uint64_t)a2, 0);
    }
    if (FigMediaSegmentSpecifierGetDateStamp((uint64_t)a2)) {
      ++*(void *)(a1 + 168);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaPlaylistSetDateStampCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 168) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetDateStampCount(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

uint64_t FigMediaPlaylistGetMapSegmentSpecifiers(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t FigMediaPlaylistAddMapSegmentSpecifier(uint64_t a1, const void *a2)
{
  if (*(void *)(a1 + 48)
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 48) = Mutable) != 0))
  {
    LastCFNumberRef Value = FigCFArrayGetLastValue();
    if (LastValue)
    {
      uint64_t v7 = LastValue;
      FigMediaSegmentSpecifierSetNextSegment(LastValue, (uint64_t)a2);
      FigMediaSegmentSpecifierSetPreviousSegment((uint64_t)a2, v7);
      FigMediaSegmentSpecifierSetNextSegment((uint64_t)a2, 0);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaPlaylistGetDateEntryArray(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t FigMediaPlaylistAddDateEntryArray(uint64_t a1, void *value)
{
  CFMutableArrayRef Mutable = *(__CFArray **)(a1 + 56);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 56) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, value);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigMediaPlaylistSetDateEntryArray(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaPlaylistGetParseDate(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void FigMediaPlaylistSetParseDate(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaPlaylistGetPreloadHint(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void FigMediaPlaylistSetPreloadHint(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaPlaylistGetPreloadMapHint(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void FigMediaPlaylistSetPreloadMapHint(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

double FigMediaPlaylistGetPlaylistActiveDurationSecs(uint64_t a1)
{
  return *(double *)(a1 + 88);
}

uint64_t FigMediaPlaylistSetPlaylistActiveDurationSecs(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  return result;
}

double FigMediaPlaylistGetPartTargetDuration(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

uint64_t FigMediaPlaylistSetPartTargetDuration(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  return result;
}

double FigMediaPlaylistGetHoldBackDuration(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t FigMediaPlaylistSetHoldBackDuration(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  *(unsigned char *)(result + 188) = a2 > 0.0;
  return result;
}

uint64_t FigMediaPlaylistHasHoldBackDuration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

double FigMediaPlaylistGetPartHoldBackDuration(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

uint64_t FigMediaPlaylistSetPartHoldBackDuration(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  *(unsigned char *)(result + 189) = a2 > 0.0;
  return result;
}

uint64_t FigMediaPlaylistHasPartHoldBackDuration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 189);
}

double FigMediaPlaylistGetSkipDeltaBoundary(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

uint64_t FigMediaPlaylistSetSkipDeltaBoundary(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(unsigned char *)(result + 190) = a2 > 0.0;
  return result;
}

uint64_t FigMediaPlaylistHasSkipDeltaBoundary(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 190);
}

double FigMediaPlaylistGetStartTimeValue(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

uint64_t FigMediaPlaylistSetStartTimeValue(uint64_t result, double a2)
{
  *(double *)(result + 128) = a2;
  return result;
}

double FigMediaPlaylistGetAvgSegmentDuration(uint64_t a1)
{
  return *(double *)(a1 + 136);
}

uint64_t FigMediaPlaylistSetAvgSegmentDuration(uint64_t result, double a2)
{
  *(double *)(result + 136) = a2;
  return result;
}

double FigMediaPlaylistGetMaxSegmentDuration(uint64_t a1)
{
  return *(double *)(a1 + 144);
}

uint64_t FigMediaPlaylistSetMaxSegmentDuration(uint64_t result, double a2)
{
  *(double *)(result + 144) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetMediaEntryCount(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t FigMediaPlaylistSetMediaEntryCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 152) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetCryptKeyCount(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t FigMediaPlaylistSetCryptKeyCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 160) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetTargetDuration(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t FigMediaPlaylistSetTargetDuration(uint64_t result, int a2)
{
  *(_DWORD *)(result + 176) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetVersion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t FigMediaPlaylistSetVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 180) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetPlaylistType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

uint64_t FigMediaPlaylistSetPlaylistType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasEndTag(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 191);
}

uint64_t FigMediaPlaylistSetHasEndTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 191) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasMediaSequence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192);
}

uint64_t FigMediaPlaylistSetHasMediaSequence(uint64_t result, char a2)
{
  *(unsigned char *)(result + 192) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasOnlyIFrames(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 193);
}

uint64_t FigMediaPlaylistSetHasOnlyIFrames(uint64_t result, char a2)
{
  *(unsigned char *)(result + 193) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasStartTime(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194);
}

uint64_t FigMediaPlaylistSetHasStartTime(uint64_t result, char a2)
{
  *(unsigned char *)(result + 194) = a2;
  return result;
}

uint64_t FigMediaPlaylistIsStartTimePrecise(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 195);
}

uint64_t FigMediaPlaylistSetIsStartTimePrecise(uint64_t result, char a2)
{
  *(unsigned char *)(result + 195) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasIndependentSegments(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

uint64_t FigMediaPlaylistSetHasIndependentSegments(uint64_t result, char a2)
{
  *(unsigned char *)(result + 196) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasIndependentParts(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 197);
}

uint64_t FigMediaPlaylistSetHasIndependentParts(uint64_t result, char a2)
{
  *(unsigned char *)(result + 197) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasDiscontinuitySequence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 198);
}

uint64_t FigMediaPlaylistSetHasDiscontinuitySequence(uint64_t result, char a2)
{
  *(unsigned char *)(result + 198) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasPartTag(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 199);
}

uint64_t FigMediaPlaylistSetHasPartTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 199) = a2;
  return result;
}

uint64_t FigMediaPlaylistDoesServerSupportsBlockingReload(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t FigMediaPlaylistSetDoesServerSupportsBlockingReload(uint64_t result, char a2)
{
  *(unsigned char *)(result + 200) = a2;
  return result;
}

uint64_t FigMediaPlaylistCanSkipDATERANGES(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 201);
}

uint64_t FigMediaPlaylistSetCanSkipDATERANGES(uint64_t result, char a2)
{
  *(unsigned char *)(result + 201) = a2;
  return result;
}

unsigned char *FigMediaPlaylistRemoveContentKeySpecifier(unsigned char *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    FigMediaPlaylistRemoveContentKeySpecifierRemote(result, a2);
    if (*((void *)v3 + 27) && FigContentKeySpecifierGetCryptKeyParsedIndex(a2))
    {
      CFAllocatorRef v4 = (__CFDictionary *)*((void *)v3 + 27);
      CryptKeyParsedIndex = (const void *)FigContentKeySpecifierGetCryptKeyParsedIndex(a2);
      CFDictionaryRemoveValue(v4, CryptKeyParsedIndex);
    }
    uint64_t PreviousKey = FigContentKeySpecifierGetPreviousKey(a2);
    uint64_t NextKey = FigContentKeySpecifierGetNextKey(a2);
    if (PreviousKey) {
      FigContentKeySpecifierSetNextKey(PreviousKey, NextKey);
    }
    if (NextKey) {
      FigContentKeySpecifierSetPreviousKey(NextKey, PreviousKey);
    }
    double result = (unsigned char *)*((void *)v3 + 4);
    if (result)
    {
      return (unsigned char *)FigCFArrayRemoveLastElementOfValue();
    }
  }
  return result;
}

uint64_t FigMediaPlaylistRemoveMediaSegmentSpecifier(uint64_t a1, uint64_t a2)
{
  FigMediaPlaylistRemoveMediaSegmentSpecifierRemote((unsigned char *)a1, a2);
  uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(a2);
  uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment(a2);
  if (PreviousSegment) {
    FigMediaSegmentSpecifierSetNextSegment(PreviousSegment, NextSegment);
  }
  if (NextSegment) {
    FigMediaSegmentSpecifierSetPreviousSegment(NextSegment, PreviousSegment);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    return FigCFArrayRemoveLastElementOfValue();
  }
  return result;
}

uint64_t FigMediaPlaylistRemovePartSegmentSpecifier(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  FigMediaPlaylistRemovePartSegmentSpecifierRemote(a1, a2, a3);

  return FigMediaSegmentSpecifierRemovePartialSegment(a2, a3);
}

uint64_t FigMediaPlaylistRemoveMapSegmentSpecifier(uint64_t a1, uint64_t a2)
{
  FigMediaPlaylistRemoveMapSegmentSpecifierRemote((unsigned char *)a1, a2);
  uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(a2);
  uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment(a2);
  if (PreviousSegment) {
    FigMediaSegmentSpecifierSetNextSegment(PreviousSegment, NextSegment);
  }
  if (NextSegment) {
    FigMediaSegmentSpecifierSetPreviousSegment(NextSegment, PreviousSegment);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    return FigCFArrayRemoveLastElementOfValue();
  }
  return result;
}

uint64_t FigMediaPlaylistGetCryptKeyParsedIndexToEntryMap(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

void FigMediaPlaylistAddToCryptKeyParsedIndexToEntryMap(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t FigMediaPlaylistGetMediaParsedIndexToEntryMap(uint64_t a1)
{
  return *(void *)(a1 + 208);
}

void FigMediaPlaylistAddToMediaParsedIndexToEntryMap(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t FigMediaPlaylistGetXPCClientObject(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

void FigMediaPlaylistSetXPCClientObject(uint64_t a1, CFTypeRef cf)
{
  CFArrayRef v2 = *(const void **)(a1 + 224);
  *(void *)(a1 + 224) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaPlaylistGetMessagingDelayTime(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t FigMediaPlaylistSetMessagingDelayTime(uint64_t result, uint64_t a2)
{
  *(void *)(result + 232) = a2;
  return result;
}

void mvp_finalize(void *a1)
{
  CFArrayRef v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CFAllocatorRef v4 = (const void *)a1[8];
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = (const void *)a1[9];
  if (v5) {
    CFRelease(v5);
  }
  CFArrayRef v6 = (const void *)a1[10];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[4];
  if (v7) {
    CFRelease(v7);
  }
  CFMutableArrayRef v8 = (const void *)a1[5];
  if (v8) {
    CFRelease(v8);
  }
  CFAllocatorRef v9 = (const void *)a1[6];
  if (v9) {
    CFRelease(v9);
  }
  CFMutableArrayRef v10 = (const void *)a1[7];
  if (v10) {
    CFRelease(v10);
  }
  CFAllocatorRef v11 = (const void *)a1[11];
  if (v11) {
    CFRelease(v11);
  }
  CFMutableArrayRef v12 = (const void *)a1[12];
  if (v12)
  {
    CFRelease(v12);
  }
}

CFStringRef mvp_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigMultivariantPlaylist %p>", a1);
}

uint64_t spptUtil_registerClass_1(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

void mp_finalize(void *a1)
{
  CFArrayRef v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CFAllocatorRef v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  CFArrayRef v6 = (const void *)a1[6];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[9];
  if (v7) {
    CFRelease(v7);
  }
  CFMutableArrayRef v8 = (const void *)a1[10];
  if (v8) {
    CFRelease(v8);
  }
  CFAllocatorRef v9 = (const void *)a1[7];
  if (v9) {
    CFRelease(v9);
  }
  CFMutableArrayRef v10 = (const void *)a1[8];
  if (v10) {
    CFRelease(v10);
  }
  CFAllocatorRef v11 = (const void *)a1[26];
  if (v11) {
    CFRelease(v11);
  }
  CFMutableArrayRef v12 = (const void *)a1[27];
  if (v12) {
    CFRelease(v12);
  }
  CFAllocatorRef v13 = (const void *)a1[28];
  if (v13)
  {
    CFRelease(v13);
  }
}

CFStringRef mp_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigMediaPlaylist %p>", a1);
}

CFStringRef streamPlaylistParser_parsedIndexKeyCopyDescriptionCallBack(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"%d", a1);
}

uint64_t FigVirtualDisplaySinkConduitCreate(uint64_t a1, long long *a2, const __CFDictionary *a3, void *a4)
{
  if (!a4) {
    return 4294954516;
  }
  FigVirtualDisplaySinkGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (!v7)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)(DerivedStorage + 88) = xmmword_194992F40;
    *(_WORD *)(DerivedStorage + 112) = 256;
    *(void *)(DerivedStorage + 116) = 60;
    if (a3)
    {
      CFNumberRef Value = CFDictionaryGetValue(a3, @"displayInfo");
      FigCFDictionaryGetInt32IfPresent();
      if (Value && (CFTypeID v10 = CFGetTypeID(Value), v10 == CFDictionaryGetTypeID())
        || (CFNumberRef Value = CFDictionaryGetValue(a3, @"deviceInfo")) != 0)
      {
        CFTypeID v11 = CFGetTypeID(Value);
        if (v11 == CFDictionaryGetTypeID())
        {
          CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Value, @"displaySizeInPixels");
          if (v12)
          {
            CFAllocatorRef v13 = (double *)MEMORY[0x1E4F1DB30];
            CGSize size = (CGSize)*MEMORY[0x1E4F1DB30];
            CGSizeMakeWithDictionaryRepresentation(v12, &size);
            if (size.width != *v13 || size.height != v13[1]) {
              *(CGSize *)(DerivedStorage + 88) = size;
            }
          }
          CFMutableArrayRef v14 = CFDictionaryGetValue((CFDictionaryRef)Value, @"displayUUID");
          *(void *)(DerivedStorage + 64) = v14;
          if (v14) {
            CFRetain(v14);
          }
          CFAllocatorRef v15 = CFDictionaryGetValue((CFDictionaryRef)Value, @"displayName");
          *(void *)(DerivedStorage + 72) = v15;
          if (v15) {
            CFRetain(v15);
          }
          CFMutableArrayRef v16 = CFDictionaryGetValue((CFDictionaryRef)Value, @"displayEDID");
          *(void *)(DerivedStorage + 80) = v16;
          if (v16) {
            CFRetain(v16);
          }
          FigCFDictionaryGetBooleanIfPresent();
          FigCFDictionaryGetBooleanIfPresent();
          CFAllocatorRef v17 = CFDictionaryGetValue((CFDictionaryRef)Value, @"HDRInfo");
          *(void *)(DerivedStorage + 104) = v17;
          if (v17) {
            CFRetain(v17);
          }
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
        }
      }
      if (!*(void *)(DerivedStorage + 104))
      {
        CFAllocatorRef v18 = CFDictionaryGetValue(a3, @"HDRInfo");
        *(void *)(DerivedStorage + 104) = v18;
        if (v18) {
          CFRetain(v18);
        }
      }
    }
    if (!*(void *)(DerivedStorage + 64)) {
      *(void *)(DerivedStorage + 64) = FVDUtilsCreateDisplayUUID();
    }
    global_queue = dispatch_get_global_queue(0, 0);
    *(void *)(DerivedStorage + 56) = global_queue;
    dispatch_retain(global_queue);
    if (a2)
    {
      long long v20 = *a2;
      long long v21 = a2[1];
      long long v22 = a2[2];
      *(void *)(DerivedStorage + 48) = *((void *)a2 + 6);
      *(_OWORD *)(DerivedStorage + 16) = v21;
      *(_OWORD *)(DerivedStorage + 32) = v22;
      *(_OWORD *)uint64_t DerivedStorage = v20;
    }
    uint64_t v7 = 0;
    *a4 = 0;
  }
  return v7;
}

void conduit_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  long long v1 = DerivedStorage;
  CFArrayRef v2 = (void (*)(void))DerivedStorage[3];
  if (v2) {
    v2(*DerivedStorage);
  }
  uint64_t v3 = (const void *)v1[8];
  if (v3)
  {
    CFRelease(v3);
    v1[8] = 0;
  }
  CFAllocatorRef v4 = (const void *)v1[9];
  if (v4)
  {
    CFRelease(v4);
    v1[9] = 0;
  }
  CFIndex v5 = (const void *)v1[10];
  if (v5)
  {
    CFRelease(v5);
    v1[10] = 0;
  }
  CFArrayRef v6 = (const void *)v1[13];
  if (v6)
  {
    CFRelease(v6);
    v1[13] = 0;
  }
  uint64_t v7 = v1[7];
  if (v7)
  {
    dispatch_release(v7);
    v1[7] = 0;
  }
}

uint64_t conduit_copyProperty(int a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  if (!CFEqual(cf1, @"Type")) {
    return 4294954512;
  }
  CFTypeRef v5 = CFRetain(@"Conduit");
  uint64_t result = 0;
  *a4 = v5;
  return result;
}

uint64_t conduit_setProperty()
{
  return 4294954512;
}

uint64_t conduit_start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = DerivedStorage;
  CFArrayRef v6 = (uint64_t (*)(void))DerivedStorage[1];
  if (!v6)
  {
    uint64_t v7 = 0;
    if (!a3) {
      return v7;
    }
    goto LABEL_3;
  }
  uint64_t v7 = v6(*DerivedStorage);
  if (a3)
  {
LABEL_3:
    CFMutableArrayRef v8 = v5[7];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    v10[2] = __conduit_start_block_invoke;
    v10[3] = &unk_1E57A38B0;
    v10[4] = a3;
    int v11 = v7;
    dispatch_async(v8, v10);
  }
  return v7;
}

uint64_t conduit_stop(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = DerivedStorage;
  CFTypeRef v5 = (void (*)(void))DerivedStorage[2];
  if (v5) {
    v5(*DerivedStorage);
  }
  if (a2)
  {
    CFArrayRef v6 = v4[7];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __conduit_stop_block_invoke;
    block[3] = &unk_1E57A38D8;
    block[4] = a2;
    dispatch_async(v6, block);
  }
  return 0;
}

uint64_t conduit_pushFrame(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  long long v22 = (void (*)(void, uint64_t, uint64_t, double, double, double, double, double, double, double, double))DerivedStorage[4];
  if (v22) {
    v22(*DerivedStorage, a10, a11, a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t conduit_suspend()
{
  return 0;
}

uint64_t conduit_resume()
{
  return 0;
}

uint64_t conduit_getPropertyAsync(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"displayInfo"))
  {
    signed int v23 = 0;
    CFTypeID v24 = 0;
    long long v21 = 0;
    long long v22 = 0;
    CFTypeRef cf = 0;
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef v8 = *(const __CFDictionary **)(DerivedStorage + 104);
    if (v8)
    {
      CFNumberRef Value = CFDictionaryGetValue(v8, @"HDRMode");
      FigDisplayModes_BuildColorAndTimingModes((int)*(double *)(DerivedStorage + 88), (int)*(double *)(DerivedStorage + 96), *(unsigned __int8 *)(DerivedStorage + 112), *(_DWORD *)(DerivedStorage + 116), 0x64u, 0, 0, 0, &v21);
      FigDisplayModes_BuildColorModesFromHDRMode(Value, *(const __CFDictionary **)(DerivedStorage + 104), 0, 0x64u, &v22);
    }
    else
    {
      FigDisplayModes_BuildColorAndTimingModes((int)*(double *)(DerivedStorage + 88), (int)*(double *)(DerivedStorage + 96), *(unsigned __int8 *)(DerivedStorage + 112), *(_DWORD *)(DerivedStorage + 116), 0x64u, 0, 0, &v22, &v21);
    }
    if (v22 && v21)
    {
      int v11 = *(_DWORD *)(DerivedStorage + 120);
      if (v11 >= 1)
      {
        FigDisplayModes_CopyTimingModeAppendingPreferredUIScale(v21, v11, (CFMutableDictionaryRef *)&cf);
        CFDictionaryRef v12 = v21;
        long long v21 = (__CFDictionary *)cf;
        if (cf) {
          CFRetain(cf);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
      FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode(v22, v21, &v24, &v23);
      if (v24 && v23)
      {
        CFDictionarySetValue(Mutable, @"colorModes", v24);
        CFDictionarySetValue(Mutable, @"timingModes", v23);
      }
    }
    CFDictionarySetValue(Mutable, @"displayUUID", *(const void **)(DerivedStorage + 64));
    CFAllocatorRef v13 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(DerivedStorage + 113)) {
      CFAllocatorRef v13 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"rotationSupport", *v13);
    CFMutableArrayRef v14 = *(const void **)(DerivedStorage + 72);
    if (v14) {
      CFDictionarySetValue(Mutable, @"displayName", v14);
    }
    CFAllocatorRef v15 = *(const void **)(DerivedStorage + 80);
    if (v15) {
      CFDictionarySetValue(Mutable, @"displayEDID", v15);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v24) {
      CFRelease(v24);
    }
    if (v23) {
      CFRelease(v23);
    }
    uint64_t v10 = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    uint64_t v10 = 4294954512;
  }
  CFMutableArrayRef v16 = *(NSObject **)(DerivedStorage + 56);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __conduit_getPropertyAsync_block_invoke;
  block[3] = &unk_1E57A3900;
  int v19 = v10;
  block[4] = a4;
  void block[5] = Mutable;
  dispatch_async(v16, block);
  return v10;
}

uint64_t conduit_perform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    CFArrayRef v6 = (void (*)(void))DerivedStorage[6];
    if (v6) {
      v6(*DerivedStorage);
    }
  }
  if (a4)
  {
    uint64_t v7 = DerivedStorage[7];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = __conduit_perform_block_invoke;
    void v9[3] = &unk_1E57A3928;
    v9[4] = a4;
    int v10 = 0;
    dispatch_async(v7, v9);
  }
  return 0;
}

uint64_t conduit_setDispatchQueue(uint64_t a1, NSObject *global_queue)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!global_queue) {
    global_queue = dispatch_get_global_queue(0, 0);
  }
  dispatch_retain(global_queue);
  CFAllocatorRef v4 = *(NSObject **)(DerivedStorage + 56);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(DerivedStorage + 56) = global_queue;
  return 0;
}

uint64_t conduit_setEventHandler()
{
  return 0;
}

uint64_t conduit_shouldDropFrame()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  long long v1 = (uint64_t (*)(uint64_t))DerivedStorage[5];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *DerivedStorage;

  return v1(v2);
}

uint64_t __conduit_start_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t __conduit_stop_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __conduit_getPropertyAsync_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t __conduit_perform_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
}

uint64_t FigVirtualFramebufferServerStart()
{
  block[16] = *MEMORY[0x1E4F143B8];
  if (!FigVirtualFramebufferServerLivesInMediaProcess()) {
    return 0;
  }
  uint64_t v3 = 0;
  CFAllocatorRef v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  if (vfbserv_getProcessType_once != -1) {
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_34_0);
  }
  if (vfbserv_getProcessType_procType == 1 || vfbserv_getProcessType_procType == 3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __vfbserv_start_block_invoke;
    block[3] = &unk_1E57A39C8;
    block[4] = &v3;
    if (vfbserv_start_once != -1) {
      dispatch_once(&vfbserv_start_once, block);
    }
    uint64_t v0 = *((unsigned int *)v4 + 6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v0 = 4294954514;
    *((_DWORD *)v4 + 6) = -12782;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigVirtualFramebufferServerGetMaxCount()
{
  if (!FigVirtualFramebufferServerLivesInMediaProcess())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if (vfbserv_getProcessType_once != -1) {
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_34_0);
  }
  if (vfbserv_getProcessType_procType == 3) {
    return 1;
  }
  if (vfbserv_getProcessType_procType != 2) {
    return vfbserv_getProcessType_procType == 1;
  }
  if (vfblocal_getFramebufMaxCount_once != -1) {
    dispatch_once(&vfblocal_getFramebufMaxCount_once, &__block_literal_global_40_0);
  }
  return vfblocal_getFramebufMaxCount_framebufMaxCount;
}

uint64_t FigVirtualFramebufferServerGetFramebufs(void *a1, unint64_t a2)
{
  if (!FigVirtualFramebufferServerLivesInMediaProcess()) {
    goto LABEL_22;
  }
  if (vfbserv_getProcessType_once != -1) {
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_34_0);
  }
  if (vfbserv_getProcessType_procType != 3)
  {
    if (vfbserv_getProcessType_procType == 2)
    {
      if (vfblocal_getFramebufMaxCount_once != -1) {
        dispatch_once(&vfblocal_getFramebufMaxCount_once, &__block_literal_global_40_0);
      }
      uint64_t v8 = vfblocal_getFramebufMaxCount_framebufMaxCount;
      if (vfblocal_getFramebufMaxCount_framebufMaxCount > a2)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        goto LABEL_17;
      }
      uint64_t RemoteFramebufs = FigVirtualFramebufferGetRemoteFramebufs(a1, vfblocal_getFramebufMaxCount_framebufMaxCount);
      if (RemoteFramebufs)
      {
        uint64_t v8 = RemoteFramebufs;
        uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        goto LABEL_17;
      }
      goto LABEL_22;
    }
    if (vfbserv_getProcessType_procType != 1) {
      return 0;
    }
  }
  if (a2)
  {
    if (vfbintern_getFramebuf_once != -1) {
      dispatch_once(&vfbintern_getFramebuf_once, &__block_literal_global_49);
    }
    uint64_t v4 = vfbintern_getFramebuf_framebuf;
    *a1 = vfbintern_getFramebuf_framebuf;
    if (!v4)
    {
LABEL_22:
      int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
  }
  uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  uint64_t v8 = 1;
LABEL_17:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v8;
}

uint64_t FigVirtualFramebufferServerSourceScreenCreateIOS(uint64_t a1, uint64_t a2, void *a3)
{
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!FigVirtualFramebufferServerLivesInMediaProcess()) {
    return 4294954514;
  }
  if (!a3) {
    return 4294955226;
  }
  if (vfbserv_getProcessType_once != -1) {
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_34_0);
  }
  if (vfbserv_getProcessType_procType != 1 && vfbserv_getProcessType_procType != 3)
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954514;
  }
  FigVirtualDisplaySourceGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    *a3 = 0;
  }
  return v5;
}

void __vfbserv_start_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  if (vfbintern_getFramebuf_once != -1) {
    dispatch_once(&vfbintern_getFramebuf_once, &__block_literal_global_49);
  }
  if (vfblocal_getFramebufs_once != -1) {
    dispatch_once(&vfblocal_getFramebufs_once, &__block_literal_global_72);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCServerStart();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t vfbserv_handleClientMessage()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (!OpCode) {
    return 4294955226;
  }
  uint64_t v1 = OpCode;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v1;
}

uint64_t vfbserv_verifyConnection(_xpc_connection_s *a1)
{
  xpc_connection_get_pid(a1);
  uint64_t HasEntitlement = FigXPCConnectionHasEntitlement();
  FigServer_CopyProcessName();
  return HasEntitlement;
}

void vfbserv_handleDisconnect(void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[21]);
  if (DerivedStorage[23] == a1[1])
  {
    DerivedStorage[23] = 0;
    uint64_t v3 = (void *)DerivedStorage[22];
    if (v3)
    {
      DerivedStorage[22] = 0;
      xpc_release(v3);
    }
  }
  MEMORY[0x19970E930](DerivedStorage[21]);

  free(a1);
}

uint64_t vfbserv_getAndRetainFramebufFromMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v2)
  {
    uint64_t v6 = v2;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return FigSignalErrorAt();
  }
  return v6;
}

uint64_t vfbserv_vsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  bytes[2] = a3;
  xpc_object_t xdict = 0;
  bytes[0] = a1;
  bytes[1] = a2;
  if (DerivedStorage
    && (uint64_t v7 = DerivedStorage,
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 168)),
        uint64_t v8 = *(void *)(v7 + 184),
        CFAllocatorRef v9 = (_xpc_connection_s *)FigXPCRetain(),
        MEMORY[0x19970E930](*(void *)(v7 + 168)),
        v8)
    && v9
    && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_data(xdict, "OutVSyncData", bytes, 0x18uLL);
    xpc_connection_send_message(v9, xdict);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t vfbserv_hotPlugCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage
    && (uint64_t v3 = DerivedStorage,
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 168)),
        uint64_t v4 = *(void *)(v3 + 184),
        uint64_t v5 = (_xpc_connection_s *)FigXPCRetain(),
        MEMORY[0x19970E930](*(void *)(v3 + 168)),
        v4)
    && v5
    && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "OutIsActive", a1);
    xpc_connection_send_message(v5, 0);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

unsigned char *vfbserv_HDCPCallback(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void __vfblocal_getFramebufs_block_invoke()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (vfblocal_getFramebufMaxCount_once != -1) {
    dispatch_once(&vfblocal_getFramebufMaxCount_once, &__block_literal_global_40_0);
  }
  uint64_t v0 = vfblocal_getFramebufMaxCount_framebufMaxCount;
  vfblocal_getFramebufs_framebufs = (uint64_t)malloc_type_calloc(vfblocal_getFramebufMaxCount_framebufMaxCount, 8uLL, 0x2004093837F09uLL);
  uint64_t v1 = 0;
  if (v0)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v3 = vfblocal_getFramebufs_framebufs;
      uint64_t v14 = 0;
      *(void *)CFAllocatorRef v15 = 0;
      FigVirtualFramebufferGetClassID();
      int v4 = CMDerivedObjectCreate();
      if (v4) {
        break;
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)uint64_t DerivedStorage = 0;
      *(_DWORD *)(DerivedStorage + 4) = v1 + 1;
      *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 40) = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E4F1D540]);
      *(void *)(DerivedStorage + 168) = FigSimpleMutexCreate();
      asprintf(&v14, "VirtualFramebufLocalVSyncQueue.%d", *(_DWORD *)(DerivedStorage + 4));
      *(_DWORD *)(DerivedStorage + 144) = 60;
      uint64_t v6 = FigDispatchQueueCreateWithPriority();
      *(void *)(DerivedStorage + 152) = v6;
      uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, v6);
      *(void *)(DerivedStorage + 160) = v7;
      *(void *)handler = MEMORY[0x1E4F143A8];
      *(void *)&handler[8] = 0x40000000;
      *(void *)&handler[16] = __vfblocal_create_block_invoke;
      CFAllocatorRef v17 = &__block_descriptor_tmp_20_0;
      uint64_t v18 = *(void *)v15;
      dispatch_source_set_event_handler(v7, handler);
      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 160), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 160));
      *(void *)(v3 + 8 * v1) = *(void *)v15;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      ++v1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      free(v14);
      if (v0 == v1)
      {
        uint64_t v1 = v0;
        goto LABEL_8;
      }
    }
    int v9 = v4;
    int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    unsigned int v19 = 0;
    v15[0] = OS_LOG_TYPE_DEFAULT;
    int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v12 = v19;
    if (os_log_type_enabled(v11, v15[0])) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
      *(_DWORD *)handler = 136315650;
      *(void *)&handler[4] = "vfblocal_getFramebufs_block_invoke";
      *(_WORD *)&handler[12] = 1024;
      *(_DWORD *)&handler[14] = 852;
      *(_WORD *)&handler[18] = 1024;
      *(_DWORD *)&handler[20] = v9;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_8:
  vfblocal_getFramebufs_framebufCFIndex Count = v1;
}

uintptr_t __vfblocal_create_block_invoke()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uintptr_t result = dispatch_source_get_data(*(dispatch_source_t *)(DerivedStorage + 160));
  if ((int)result >= 1)
  {
    uint64_t v2 = *(void *)(DerivedStorage + 112) + 1;
    uint64_t v3 = *(void *)(DerivedStorage + 120) + *(void *)(DerivedStorage + 128) * result;
    *(void *)(DerivedStorage + 112) = v2;
    *(void *)(DerivedStorage + 120) = v3;
    int v4 = *(uint64_t (**)(uint64_t))(DerivedStorage + 96);
    if (v4)
    {
      return v4(v2);
    }
  }
  return result;
}

CFStringRef vfblocal_copyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v5 = *DerivedStorage;
  uint64_t v4 = DerivedStorage[1];
  CFIndex v6 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v3, 0, @"<FigVirtualFramebufferLocal %p (%d) state: %d retainCount: %ld objectID: %llu>", a1, v4, v5, v6, *((void *)DerivedStorage + 23));
}

uint64_t vfblocal_copyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  int v8 = CFEqual(a2, @"FramebufIsActive");
  int v9 = *(_DWORD *)DerivedStorage;
  if (v8)
  {
    if (v9 && *(void *)(DerivedStorage + 8)) {
      int v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    else {
      int v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t v11 = 0;
    *a4 = CFRetain(*v10);
  }
  else
  {
    if (v9 && (uint64_t v12 = *(void *)(DerivedStorage + 8)) != 0)
    {
      uint64_t CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(v12);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      CFMutableArrayRef v16 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFTypeRef *))(v15 + 48);
      if (!v16)
      {
        uint64_t v11 = 4294954514;
        goto LABEL_16;
      }
      uint64_t v17 = v16(CMBaseObject, a2, a3, a4);
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
    }
    uint64_t v11 = v17;
  }
LABEL_16:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v11;
}

uint64_t vfblocal_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (!*(_DWORD *)DerivedStorage || (uint64_t v6 = *(void *)(DerivedStorage + 8)) == 0)
  {
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  uint64_t CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(v6);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (!v10)
  {
    uint64_t v11 = 4294954514;
LABEL_10:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_11;
  }
  uint64_t v11 = v10(CMBaseObject, a2, a3);
  if (v11) {
    goto LABEL_10;
  }
LABEL_11:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v11;
}

uint64_t vfblocal_getSupportedDigitalOutModes(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  uint64_t v7 = (void *)(DerivedStorage + 24);
  uint64_t v6 = *(const void **)(DerivedStorage + 24);
  if (v6)
  {
    CFRelease(v6);
    *uint64_t v7 = 0;
  }
  uint64_t v9 = (void *)(DerivedStorage + 32);
  uint64_t v8 = *(const void **)(DerivedStorage + 32);
  if (v8)
  {
    CFRelease(v8);
    *uint64_t v9 = 0;
  }
  if (!*(_DWORD *)DerivedStorage) {
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v13)
  {
    uint64_t v15 = 4294954514;
LABEL_14:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_15;
  }
  uint64_t v14 = v13(v10, DerivedStorage + 24, DerivedStorage + 32);
  if (v14)
  {
    uint64_t v15 = v14;
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v15 = 0;
  *a2 = *v7;
  *a3 = *v9;
LABEL_15:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v15;
}

uint64_t vfblocal_setDigitalOutMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(_DWORD *)DerivedStorage)
  {
    uint64_t v6 = *(void *)(DerivedStorage + 8);
    if (v6)
    {
      *(_DWORD *)(DerivedStorage + 144) = 60;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 64);
      if (v9)
      {
        uint64_t v10 = v9(v6, a2, a3);
        if (!v10)
        {
          if (!FigDisplayModes_ExtractVSyncRateFromTimingMode(*(const __CFArray **)(DerivedStorage + 32), a3, &v14))
          {
            uint64_t v11 = 0;
            *(_DWORD *)(DerivedStorage + 144) = v14;
            goto LABEL_12;
          }
          goto LABEL_9;
        }
        uint64_t v11 = v10;
      }
      else
      {
        uint64_t v11 = 4294954514;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_12;
    }
  }
LABEL_9:
  uint64_t v11 = 0;
LABEL_12:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v11;
}

uint64_t vfblocal_submitSurface(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, unsigned int a11, uint64_t a12, uint64_t a13, unsigned int a14)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  int v27 = *(_DWORD *)DerivedStorage;
  if (!*(_DWORD *)DerivedStorage || !*(void *)(DerivedStorage + 8)) {
    goto LABEL_19;
  }
  if (a10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v37 = FigSignalErrorAt();
    goto LABEL_20;
  }
  if (a11)
  {
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), (const void *)a11);
    if (!Value)
    {
      uint64_t v37 = 4294955226;
      goto LABEL_20;
    }
    uint64_t v29 = Value;
    int v27 = *(_DWORD *)DerivedStorage;
  }
  else
  {
    uint64_t v29 = 0;
  }
  if (v27 != 2)
  {
LABEL_19:
    uint64_t v37 = 0;
    goto LABEL_20;
  }
  uint64_t v30 = *(void *)(DerivedStorage + 8);
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  CFTypeID v33 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void, void, double, double, double, double, double, double, double, double))(v32 + 80);
  if (v33)
  {
    uint64_t v34 = v33(v30, v29, a13, (a14 >> 1) & 7, 0, a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v34)
    {
      int v35 = *(_DWORD *)(DerivedStorage + 92);
      *(_DWORD *)(DerivedStorage + 92) = v35 + 1;
      if (!v35)
      {
        CFNumberRef v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_19;
    }
    uint64_t v37 = v34;
  }
  else
  {
    uint64_t v37 = 4294954514;
  }
  CFTypeID v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_20:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v37;
}

uint64_t vfblocal_enableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t vfblocal_disableVSyncNotifications(uint64_t a1)
{
  return 0;
}

uint64_t vfblocal_enableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t vfblocal_disableHotPlugDetectNotifications(uint64_t a1)
{
  return 0;
}

uint64_t vfblocal_getHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  BOOL isRunning = vfblocal_isRunning();
  hdcp_getHDCPDownstreamState(isRunning, a2);
  return 0;
}

uint64_t vfblocal_enableMirroring(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (!*(_DWORD *)DerivedStorage || (uint64_t v4 = *(void *)(DerivedStorage + 8)) == 0)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 72);
  if (!v7)
  {
    uint64_t v8 = 4294954514;
LABEL_10:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_11;
  }
  uint64_t v8 = v7(v4, a2);
  if (v8) {
    goto LABEL_10;
  }
LABEL_11:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v8;
}

uint64_t vfblocal_acquireWritebackSurface(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, IOSurfaceID *a7, CFTypeRef *a8)
{
  uint64_t v14 = 3758097112;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v16 = DerivedStorage;
  CFTypeRef cf = 0;
  if (a7) {
    BOOL v17 = a8 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  int v18 = !v17;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (!*(_DWORD *)v16 || (uint64_t v19 = *(void *)(v16 + 8)) == 0)
  {
    uint64_t v24 = FigSignalErrorAt();
LABEL_33:
    uint64_t v14 = v24;
    goto LABEL_22;
  }
  if (*(_DWORD *)v16 != 2) {
    goto LABEL_22;
  }
  if (v18) {
    p_CFTypeRef cf = &cf;
  }
  else {
    p_CFTypeRef cf = 0;
  }
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  signed int v23 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *, double, double))(v22 + 88);
  if (!v23)
  {
    uint64_t v14 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v24 = v23(v19, a4, a6 & 1, p_cf, a1, a2);
  if (v24)
  {
    if (v24 == -12072) {
      goto LABEL_22;
    }
    if (v24 == -12073)
    {
      uint64_t v14 = 3758097109;
      goto LABEL_22;
    }
    goto LABEL_33;
  }
  if (a7)
  {
    if (cf)
    {
      IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)cf);
      IOSurfaceID ID = IOSurfaceGetID(IOSurface);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v16 + 40), (const void *)ID, cf);
    }
    else
    {
      IOSurfaceID ID = 0;
    }
    *a7 = ID;
  }
  uint64_t v14 = 0;
  if (a8)
  {
    *a8 = cf;
    CFTypeRef cf = 0;
    goto LABEL_24;
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
LABEL_24:
  MEMORY[0x19970E930](*(void *)(v16 + 16));
  return v14;
}

uint64_t vfblocal_relinquishWritebackSurface(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(_DWORD *)DerivedStorage && *(void *)(DerivedStorage + 8))
  {
    if (!a2 || !a3)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v6 = 4294955226;
      goto LABEL_7;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 40), (const void *)a2);
  }
  uint64_t v6 = 0;
LABEL_7:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v6;
}

uint64_t vfblocal_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  return 0;
}

uint64_t vfblocal_HDCPGetReply(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 <= 0xFuLL)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  else
  {
    BOOL isRunning = vfblocal_isRunning();
    hdcp_getHDCPDownstreamState(isRunning, a2);
    uint64_t result = 0;
    *a3 = 16;
  }
  return result;
}

uint64_t vfblocal_setVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  uint64_t v6 = *(NSObject **)(DerivedStorage + 152);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vfblocal_setVSyncNotifications_block_invoke;
  block[3] = &__block_descriptor_tmp_22_2;
  block[4] = a2;
  void block[5] = DerivedStorage;
  void block[6] = a3;
  dispatch_async(v6, block);
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
}

void __vfblocal_setVSyncNotifications_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  if (v3)
  {
    if (!*(void *)(v2 + 96))
    {
      *(void *)(v2 + 96) = v3;
      *(void *)(a1[5] + 104) = a1[6];
      uint64_t v4 = a1[5];
      int64_t v5 = 0x3B9ACA00uLL / *(int *)(v4 + 144);
      *(void *)(v4 + 136) = v5;
      CMTimeMake(&hostTime, v5, 1000000000);
      *(void *)(a1[5] + 128) = CMClockConvertHostTimeToSystemUnits(&hostTime);
      uint64_t v6 = mach_absolute_time();
      uint64_t v7 = (void *)a1[5];
      int64_t v8 = v7[17];
      v7[15] = v7[16] + v6;
      uint64_t v9 = v7[20];
      dispatch_time_t v10 = dispatch_time(0, v8);
      dispatch_source_set_timer(v9, v10, *(void *)(a1[5] + 136), 0xF4240uLL);
    }
  }
  else
  {
    *(void *)(v2 + 96) = 0;
    *(void *)(a1[5] + 104) = 0;
    uint64_t v11 = *(NSObject **)(a1[5] + 160);
    dispatch_source_set_timer(v11, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
}

void vfblocal_setHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[2]);
  if (a2) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = 0;
  }
  DerivedStorage[6] = a2;
  DerivedStorage[7] = v6;

  JUMPOUT(0x19970E930);
}

void hdcp_getHDCPDownstreamState(int a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = 0x1000150434448;
  *(_DWORD *)(a2 + 8) = 0x8000000;
  *(unsigned char *)(a2 + 12) = 0;
  *(_WORD *)(a2 + 14) = 0;
  if (hdcp_getHDCPDownstreamState_tetheredDemoModeOnce == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
  }
  else
  {
    dispatch_once(&hdcp_getHDCPDownstreamState_tetheredDemoModeOnce, &__block_literal_global_25);
    if (a1)
    {
LABEL_3:
      if (!hdcp_getHDCPDownstreamState_tetheredDemoModeEnabled) {
        return;
      }
    }
  }
  *(_DWORD *)(a2 + 8) = 0;
}

BOOL vfblocal_isRunning()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  BOOL v1 = *(_DWORD *)DerivedStorage == 2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v1;
}

uint64_t __hdcp_getHDCPDownstreamState_block_invoke()
{
  char v0 = MGGetBoolAnswer();
  uint64_t result = CFPreferencesGetAppBooleanValue(@"EnableTetheredDisplayPortMode", (CFStringRef)*MEMORY[0x1E4F1D3B8], 0);
  if (result) {
    char v2 = v0;
  }
  else {
    char v2 = 0;
  }
  hdcp_getHDCPDownstreamState_tetheredDemoModeEnabled = v2;
  return result;
}

char *__vfbserv_getProcessType_block_invoke()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  pid_t v0 = getpid();
  uint64_t result = (char *)proc_pidpath(v0, &buffer, 0x400u);
  if ((int)result >= 1)
  {
    char v9 = 0;
    if (buffer == 0x6962732F7273752FLL
      && (void)v8 == 0x73616964656D2F6ELL
      && *(void *)((char *)&v8 + 7) == 0x64726576726573)
    {
      int v6 = 1;
      goto LABEL_21;
    }
    if (buffer == 0x62696C2F7273752FLL
      && (void)v8 == 0x6361622F63657865
      && *((void *)&v8 + 1) == 0x646472616F626BLL)
    {
      int v6 = 2;
      goto LABEL_21;
    }
    uint64_t result = strrchr((char *)&buffer, 47);
    if (result)
    {
      uint64_t result = (char *)strcmp(result + 1, "audiomxd");
      if (!result)
      {
        int v6 = 3;
LABEL_21:
        vfbserv_getProcessType_procType = v6;
      }
    }
  }
  return result;
}

uint64_t __vfblocal_getFramebufMaxCount_block_invoke()
{
  unsigned int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (CFPreferenceNumberWithDefault >= 8) {
    uint64_t v1 = 8;
  }
  else {
    uint64_t v1 = CFPreferenceNumberWithDefault;
  }
  vfblocal_getFramebufMaxCount_framebufMaxCFIndex Count = v1;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

CFRunLoopSourceRef __vfbintern_getFramebuf_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigVirtualFramebufferGetClassID();
  if (CMDerivedObjectCreate())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return (CFRunLoopSourceRef)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = FigSimpleMutexCreate();
    memset(&context, 0, 56);
    context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbintern_sourceSchedule;
    context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbintern_sourceCancel;
    context.perform = (void (__cdecl *)(void *))vfbintern_sourcePerform;
    CFRunLoopSourceRef result = CFRunLoopSourceCreate(v0, 0, &context);
    DerivedStorage[2] = result;
    vfbintern_getFramebuf_framebuf = 0;
  }
  return result;
}

uint64_t vfbintern_sourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[1])
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = a2;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t vfbintern_sourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (DerivedStorage[1] != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = 0;
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  return MEMORY[0x19970E930](*DerivedStorage);
}

uint64_t vfbintern_sourcePerform()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = DerivedStorage[4];
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))DerivedStorage[3];
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  uint64_t result = MEMORY[0x19970E930](*DerivedStorage);
  if (v3)
  {
    return v3(v1, 1);
  }
  return result;
}

CFStringRef vfbintern_copyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigVirtualFramebufferInternal %p retainCount: %ld>", a1, v3);
}

uint64_t vfbintern_getHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  if (vfblocal_getFramebufs_once != -1) {
    dispatch_once(&vfblocal_getFramebufs_once, &__block_literal_global_72);
  }
  uint64_t v3 = vfblocal_getFramebufs_framebufCount;
  if (vfblocal_getFramebufs_framebufCount)
  {
    uint64_t v4 = vfblocal_getFramebufs_framebufs;
    while (!vfblocal_isRunning())
    {
      v4 += 8;
      if (!--v3) {
        goto LABEL_7;
      }
    }
    int v5 = 1;
  }
  else
  {
LABEL_7:
    int v5 = 0;
  }
  hdcp_getHDCPDownstreamState(v5, a2);
  return 0;
}

uint64_t vfbintern_getHDCPRunLoopSource()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t vfbintern_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  DerivedStorage[3] = a4;
  DerivedStorage[4] = a5;
  if (DerivedStorage[1])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[2]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[1]);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

uint64_t vfbintern_HDCPGetReply(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && a3 && *a3 > 0xFuLL)
  {
    vfbintern_getHDCPDownstreamState(a1, a2);
    uint64_t result = 0;
    *a3 = 16;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return result;
}

void *scr_finalize()
{
  uint64_t result = (void *)CMBaseObjectGetDerivedStorage();
  if (*result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    if (result)
    {
      uint64_t result = (void *)FigSimpleMutexDestroy();
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t scr_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!CFEqual(@"sourceType", a2)) {
    return 4294954512;
  }
  CFTypeRef v5 = CFRetain(@"Screen");
  uint64_t result = 0;
  *a4 = v5;
  return result;
}

uint64_t scr_setProperty()
{
  return 4294954512;
}

uint64_t scr_plugProcessor(uint64_t a1, const void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (vfblocal_getFramebufs_once != -1) {
    dispatch_once(&vfblocal_getFramebufs_once, &__block_literal_global_72);
  }
  uint64_t v4 = (void *)vfblocal_getFramebufs_framebufs;
  uint64_t v5 = vfblocal_getFramebufs_framebufCount;
  MEMORY[0x19970E910](DerivedStorage[1]);
  if (*DerivedStorage)
  {
    v19.int tm_sec = 0;
    v20[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_23:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v10 = 4294955226;
    goto LABEL_12;
  }
  if (v5)
  {
    while (1)
    {
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      if (!a2) {
        break;
      }
      uint64_t v7 = v6;
      MEMORY[0x19970E910](*(void *)(v6 + 16));
      if (!*(_DWORD *)v7 && !*(void *)(v7 + 8))
      {
        *(void *)(v7 + 8) = CFRetain(a2);
        gettimeofday((timeval *)(v7 + 64), 0);
        MEMORY[0x19970E930](*(void *)(v7 + 16));
        uint64_t v10 = 0;
        *uint64_t DerivedStorage = *v4;
        goto LABEL_12;
      }
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      memset(&v19, 0, sizeof(v19));
      localtime_r((const time_t *)(v8 + 64), &v19);
      strftime((char *)&v21, 0x40uLL, "%F %T", &v19);
      char v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      MEMORY[0x19970E930](*(void *)(v7 + 16));
      ++v4;
      if (!--v5)
      {
        uint64_t v10 = 4294955223;
        goto LABEL_12;
      }
    }
    v19.int tm_sec = 0;
    v20[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    int tm_sec = v19.tm_sec;
    if (os_log_type_enabled(v12, v20[0])) {
      unsigned int v14 = tm_sec;
    }
    else {
      unsigned int v14 = tm_sec & 0xFFFFFFFE;
    }
    if (v14)
    {
      int v21 = 136315394;
      uint64_t v22 = "vfblocal_plugProcessor";
      __int16 v23 = 1024;
      int v24 = 903;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19.int tm_sec = 0;
    v20[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    int v16 = v19.tm_sec;
    if (os_log_type_enabled(v15, v20[0])) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      int v21 = 136315394;
      uint64_t v22 = "scr_plugProcessor";
      __int16 v23 = 1024;
      int v24 = 2099;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_23;
  }
  uint64_t v10 = 0;
LABEL_12:
  MEMORY[0x19970E930](DerivedStorage[1]);
  return v10;
}

uint64_t scr_unplugProcessor(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[1]);
  if (!*DerivedStorage) {
    goto LABEL_7;
  }
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  MEMORY[0x19970E910](*(void *)(v4 + 16));
  if (*(_DWORD *)v5 || *(const void **)(v5 + 8) != a2)
  {
    MEMORY[0x19970E930](*(void *)(v5 + 16));
LABEL_7:
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 4294955226;
    goto LABEL_8;
  }
  CFRelease(a2);
  *(void *)(v5 + 8) = 0;
  MEMORY[0x19970E930](*(void *)(v5 + 16));
  uint64_t v6 = 0;
  *uint64_t DerivedStorage = 0;
LABEL_8:
  MEMORY[0x19970E930](DerivedStorage[1]);
  return v6;
}

uint64_t scr_start(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[1]);
  if (!*DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFNumberRef Value = (__CFString *)CFDictionaryGetValue(a2, @"clientName");
  }
  else {
    CFNumberRef Value = 0;
  }
  MEMORY[0x19970E910](*(void *)(v4 + 16));
  if (*(_DWORD *)v4 || !*(void *)(v4 + 8))
  {
    MEMORY[0x19970E930](*(void *)(v4 + 16));
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
LABEL_19:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v11 = 4294955226;
    goto LABEL_20;
  }
  FigCFDictionaryGetBooleanIfPresent();
  *(_DWORD *)uint64_t v4 = 2;
  if (!FigCFDictionaryGetInt32IfPresent()) {
    *(_DWORD *)(v4 + 88) = getpid();
  }
  if (Value) {
    uint64_t v7 = Value;
  }
  else {
    uint64_t v7 = @"media server";
  }
  uint64_t v8 = *(const void **)(v4 + 80);
  *(void *)(v4 + 80) = v7;
  CFRetain(v7);
  if (v8) {
    CFRelease(v8);
  }
  char v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v10 = *(void (**)(uint64_t, void))(v4 + 48);
  if (v10) {
    v10(1, *(void *)(v4 + 56));
  }
  MEMORY[0x19970E930](*(void *)(v4 + 16));
  uint64_t v11 = 0;
LABEL_20:
  MEMORY[0x19970E930](DerivedStorage[1]);
  return v11;
}

uint64_t scr_stop()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[1]);
  if (*DerivedStorage)
  {
    uint64_t v1 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v1 + 16));
    if (*(_DWORD *)v1 == 1 || *(_DWORD *)v1 == 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v3 = *(const void **)(v1 + 80);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 80) = 0;
    }
    *(void *)(v1 + 88) = 0;
    *(_DWORD *)uint64_t v1 = 0;
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v1 + 40));
    uint64_t v4 = *(void (**)(void, void))(v1 + 48);
    if (v4) {
      v4(0, *(void *)(v1 + 56));
    }
    MEMORY[0x19970E930](*(void *)(v1 + 16));
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v5 = 4294955226;
  }
  MEMORY[0x19970E930](DerivedStorage[1]);
  return v5;
}

uint64_t scr_suspend()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[1]);
  if (*DerivedStorage)
  {
    uint64_t v1 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(v1 + 16));
    if (*(_DWORD *)v1 == 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(v1 + 92) = 0;
    *(_DWORD *)uint64_t v1 = 1;
    MEMORY[0x19970E930](*(void *)(v1 + 16));
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v3 = 4294955226;
  }
  MEMORY[0x19970E930](DerivedStorage[1]);
  return v3;
}

uint64_t scr_resume()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[1]);
  if (!*DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_9;
  }
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v1 + 16));
  if (*(_DWORD *)v1 != 1)
  {
    MEMORY[0x19970E930](*(void *)(v1 + 16));
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
LABEL_9:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v5 = 4294955226;
    goto LABEL_10;
  }
  *(_DWORD *)uint64_t v1 = 2;
  CFAllocatorRef v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v4 = *(void (**)(uint64_t, void))(v1 + 48);
  if (v4) {
    v4(1, *(void *)(v1 + 56));
  }
  MEMORY[0x19970E930](*(void *)(v1 + 16));
  uint64_t v5 = 0;
LABEL_10:
  MEMORY[0x19970E930](DerivedStorage[1]);
  return v5;
}

uint64_t CreateSampleGeneratorForClosedCaptions(void *a1)
{
  CFAllocatorRef v2 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  a1[10] = 0;
  a1[11] = v3;
  a1[6] = CCPushForType;
  a1[8] = CCResyncForType;
  a1[7] = CCFlushForType;
  a1[9] = CCDestroyForType;
  return result;
}

uint64_t CCPushForType(CMFormatDescriptionRef *formatDescriptionOut, OpaqueCMBlockBuffer *a2, CMTime *a3, CMTime *a4, uint64_t a5, uint64_t a6)
{
  memset(&sampleTimingArray, 0, 24);
  CFTypeRef cf = 0;
  unsigned int v13 = formatDescriptionOut + 5;
  CMFormatDescriptionRef v12 = formatDescriptionOut[5];
  unsigned int v14 = v13[6];
  if (v12)
  {
    if (*v14 == 1635017571) {
      goto LABEL_7;
    }
    CFRelease(v12);
    *unsigned int v13 = 0;
  }
  _DWORD *v14 = 1635017571;
  uint64_t v15 = CMFormatDescriptionCreate(formatDescriptionOut[1], 0x636C6370u, 0x61746363u, 0, v13);
  if (v15) {
    return v15;
  }
  uint64_t v15 = ((uint64_t (*)(CMFormatDescriptionRef *, CMFormatDescriptionRef, CMFormatDescriptionRef))formatDescriptionOut[2])(formatDescriptionOut, formatDescriptionOut[4], formatDescriptionOut[5]);
  if (v15) {
    return v15;
  }
  if (*v13)
  {
LABEL_7:
    sampleTimingArray.decodeTimeStamp = *a4;
    sampleTimingArray.presentationTimeStamp = *a3;
    CMTimeMake(&sampleTimingArray.duration, 1, 90000);
    size_t sampleSizeArray = CMBlockBufferGetDataLength(a2);
    uint64_t v15 = CMSampleBufferCreate(formatDescriptionOut[1], a2, 1u, 0, 0, formatDescriptionOut[5], 1, 1, &sampleTimingArray, 1, &sampleSizeArray, (CMSampleBufferRef *)&cf);
    if (!v15)
    {
      uint64_t v16 = ((uint64_t (*)(CMFormatDescriptionRef *, CMFormatDescriptionRef, CFTypeRef, uint64_t, uint64_t))formatDescriptionOut[3])(formatDescriptionOut, formatDescriptionOut[4], cf, a6, a5);
      if (cf) {
        CFRelease(cf);
      }
      return v16;
    }
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t CCFlushForType()
{
  return 0;
}

void CCDestroyForType(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
}

uint64_t FigRemoteStreamingAssetDownloaderCreateWithAsset(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  xpc_object_t xdict = 0;
  unsigned int v17 = 0;
  uint64_t v15 = 0;
  uint64_t v10 = rad_ensureClientEstablished();
  if (v10
    || (uint64_t v10 = FigXPCCreateBasicMessage(), v10)
    || (uint64_t v10 = rad_fillInCreationDictionary(v17, a2, a3, 0, 0, a4, 0), v10)
    || (uint64_t v10 = FigSandboxRegisterURLWithProcessAndCopyRegistration(), v10)
    || (uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v10))
  {
    uint64_t v12 = v10;
  }
  else
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t v12 = rad_createInternal(a1, uint64, 0, 0, 0, &v15);
    if (!v12)
    {
      uint64_t v13 = v15;
      *(void *)(CMBaseObjectGetDerivedStorage() + 112) = 0;
      *a5 = v13;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t rad_ensureClientEstablished()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __rad_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57A3AD0;
  block[4] = &v3;
  if (rad_ensureClientEstablished_sFigAssetDownloaderRemoteClientSetupOnce != -1) {
    dispatch_once(&rad_ensureClientEstablished_sFigAssetDownloaderRemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t rad_fillInCreationDictionary(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7)
{
  uint64_t value = 0;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (a2)
  {
    ObjectIOSurfaceID ID = FigAssetXPCRemoteGetObjectID(a2, &value);
    if (ObjectID) {
      goto LABEL_18;
    }
    xpc_dictionary_set_uint64(a1, "AssetToken", value);
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFURL();
  if (ObjectID
    || (ObjectIOSurfaceID ID = FigXPCMessageSetCFArray(), ObjectID)
    || (ObjectIOSurfaceID ID = FigXPCMessageSetCFArray(), ObjectID))
  {
LABEL_18:
    uint64_t v15 = ObjectID;
    FigXPCRelease();
    if (!MutableCopy) {
      return v15;
    }
    goto LABEL_16;
  }
  if (a7)
  {
    xpc_object_t v13 = FigStreamingAssetDownloadConfigCopySerializedRepresentation(a7);
    if (v13) {
      xpc_dictionary_set_value(a1, "DownloadConfig", v13);
    }
  }
  if (CFDictionaryGetValue(a6, @"AssetDownloaderCreateOption_RetryError"))
  {
    unsigned int v14 = (const void *)FigCFCopyCFErrorAsPropertyList();
    CFDictionarySetValue(MutableCopy, @"AssetDownloaderCreateOption_RetryError", v14);
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v15 = FigXPCMessageSetCFDictionary();
  FigXPCRelease();
  if (v14) {
    CFRelease(v14);
  }
  if (MutableCopy) {
LABEL_16:
  }
    CFRelease(MutableCopy);
  return v15;
}

uint64_t rad_createInternal(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, void *a5, void *a6)
{
  FigAssetDownloaderGetClassID();
  uint64_t v11 = CMDerivedObjectCreate();
  if (v11) {
    return v11;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 8) = a2;
  *(void *)(DerivedStorage + 112) = 0;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        xpc_object_t v13 = (void *)DerivedStorage;
        dispatch_retain(a4);
        v13[2] = a4;
        __copy_assignment_8_8_t0w8_pa0_62591_8_pa0_48202_16_pa0_13082_24_pa0_11046_32_pa0_49729_40_pa0_62126_48_pa0_6100_56_pa0_11999_64_pa0_10804_72(v13 + 3, a5);
        uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        v13[13] = v14;
        if (!v14) {
          return FigSignalErrorAt();
        }
      }
    }
  }
  uint64_t v11 = FigXPCRemoteClientAssociateObject();
  if (v11) {
    return v11;
  }
  uint64_t v15 = 0;
  *a6 = 0;
  return v15;
}

uint64_t FigRemoteStreamingAssetDownloadOrchestratorCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, NSObject *a9, void *a10, void *a11)
{
  xpc_object_t xdict = 0;
  CFDataRef v26 = 0;
  uint64_t v24 = 0;
  uint64_t v19 = rad_ensureClientEstablished();
  if (v19
    || (uint64_t v19 = FigXPCCreateBasicMessage(), v19)
    || (uint64_t v19 = rad_fillInCreationDictionary(v26, a2, a3, a4, a5, a6, a7), v19)
    || (uint64_t v19 = FigSandboxRegisterURLWithProcessAndCopyRegistration(), v19)
    || (uint64_t v19 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v19))
  {
    uint64_t v21 = v19;
  }
  else
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t v21 = rad_createInternal(a1, uint64, a8, a9, a10, &v24);
    if (!v21)
    {
      uint64_t v22 = v24;
      *(void *)(CMBaseObjectGetDerivedStorage() + 112) = 0;
      *a11 = v22;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v21;
}

void __rad_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"AssetDownloader_ServerConnectionDied");
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t rad_deadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 1) = 1;
  return result;
}

uint64_t rad_handleServerMessage()
{
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

void __rad_downloadSuccessCallback_block_invoke(void *a1)
{
  (*(void (**)(void, void))(a1[4] + 32))(a1[5], a1[6]);
  CFAllocatorRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
  }
}

void __rad_downloadFailureCallback_block_invoke(void *a1)
{
  (*(void (**)(void, void, void))(a1[4] + 40))(a1[5], a1[6], a1[7]);
  CFAllocatorRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
  }
}

void __rad_loadedTimeRangeChangedCallback_block_invoke(void *a1)
{
  (*(void (**)(void, void, void, void, void, void))(a1[4] + 48))(a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  CFAllocatorRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  int v6 = (const void *)a1[9];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[10];
  if (v7)
  {
    CFRelease(v7);
  }
}

void __rad_didResolveMediaSelection_block_invoke(void *a1)
{
  (*(void (**)(void, void, void))(a1[4] + 56))(a1[5], a1[6], a1[7]);
  CFAllocatorRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
  }
}

void __rad_didFinishDownloadForMediaSelection_block_invoke(void *a1)
{
  (*(void (**)(void, void, void))(a1[4] + 64))(a1[5], a1[6], a1[7]);
  CFAllocatorRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
  }
}

void __rad_progressUpdateCallback_block_invoke(void *a1)
{
  (*(void (**)(void, void, void, void))(a1[4] + 80))(a1[5], a1[6], a1[7], a1[8]);
  CFAllocatorRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
  }
}

void __rad_willDownloadAlternatesCallback_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(void *)(v2 + 24) == 2) {
    (*(void (**)(void, void, void))(v2 + 88))(a1[5], a1[6], a1[7]);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t rad_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_8;
  }
  uint64_t v1 = DerivedStorage;
  *(unsigned char *)uint64_t DerivedStorage = 1;
  uint64_t v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(v1 + 104);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = FigXPCRemoteClientDisassociateObject();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v1 + 1))
  {
LABEL_8:
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (v6) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
LABEL_11:
  FigXPCRelease();
  return v5;
}

void rad_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  rad_invalidate();
  uint64_t v1 = *(const void **)(DerivedStorage + 112);
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef rad_copyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigRemoteAssetDownloader %p>", a1);
}

uint64_t rad_copyProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  ObjectIOSurfaceID ID = rad_getObjectID(a1, &v4);
  if (!ObjectID) {
    ObjectIOSurfaceID ID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t rad_setProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  ObjectIOSurfaceID ID = rad_getObjectID(a1, &v4);
  if (!ObjectID) {
    ObjectIOSurfaceID ID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t rad_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)(DerivedStorage + 1))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t rad_start(uint64_t a1)
{
  uint64_t v5 = 0;
  ObjectIOSurfaceID ID = rad_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t rad_pause(uint64_t a1)
{
  uint64_t v5 = 0;
  ObjectIOSurfaceID ID = rad_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t rad_stop(uint64_t a1)
{
  uint64_t v5 = 0;
  ObjectIOSurfaceID ID = rad_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t rad_loadMetadata(uint64_t a1)
{
  uint64_t v5 = 0;
  ObjectIOSurfaceID ID = rad_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t RegisterSchemeInternal(__CFDictionary *a1, const void *a2, long long *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 4294955146;
  if (a1 && a2 && a3)
  {
    uint64_t v3 = malloc_type_calloc(1uLL, 0x40uLL, 0x80040A284212CuLL);
    long long v8 = a3[3];
    long long v10 = *a3;
    long long v9 = a3[1];
    v3[2] = a3[2];
    v3[3] = v8;
    *uint64_t v3 = v10;
    v3[1] = v9;
    if (!CFDictionaryContainsKey(a1, a2))
    {
      CFDictionaryAddValue(a1, a2, v3);
      return 0;
    }
    uint64_t v4 = 4294955136;
  }
  free(v3);
  return v4;
}

uint64_t FigCPEIsSupportedFormatDescription(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E910](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    }
    CFDictionaryRef v2 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    int64_t Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    uint64_t v4 = Count;
    if (Count < 1)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v2, 0, v5);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E930](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (v4 < 1)
    {
LABEL_16:
      uint64_t v1 = 0;
    }
    else
    {
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(unsigned int (**)(uint64_t))v5[v6];
        if (v7)
        {
          if (v7(v1)) {
            break;
          }
        }
        if (v4 == ++v6) {
          goto LABEL_16;
        }
      }
      uint64_t v1 = 1;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  free(v5);
  return v1;
}

uint64_t FigCPEProtectorCreateForScheme(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 4294955146;
  if (a2 && a4)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E910](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    }
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary, a2);
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E930](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (Value && (long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))Value[1]) != 0)
    {
      return v10(a1, a3, a4);
    }
    else
    {
      return 4294955141;
    }
  }
  return result;
}

uint64_t FigCPEProtectorCreateForFormatReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  CFTypeRef cf = 0;
  uint64_t v38 = 0;
  CFArrayRef theArray = 0;
  uint64_t v5 = 4294955146;
  if (a2 && a4)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E910](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    }
    CFDictionaryRef v10 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    int64_t Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    uint64_t v12 = Count;
    if (Count < 1)
    {
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v10, 0, v4);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E930](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t *))(v14 + 8);
    if (!v15) {
      goto LABEL_56;
    }
    uint64_t v16 = v15(a2, &v38);
    if (v16)
    {
LABEL_69:
      uint64_t v5 = v16;
    }
    else
    {
      if (v38 >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v34 = *MEMORY[0x1E4F1CF80];
        while (1)
        {
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v19 = v18 ? v18 : 0;
          uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void, void))(v19 + 48);
          if (!v20) {
            break;
          }
          uint64_t v16 = v20(a2, v17, &cf, 0, 0);
          if (v16) {
            goto LABEL_69;
          }
          uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v23 = v22 ? v22 : 0;
          uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v23 + 48);
          if (!v24) {
            break;
          }
          uint64_t v16 = v24(FigBaseObject, @"TrackFormatDescriptionArray", v34, &theArray);
          if (v16) {
            goto LABEL_69;
          }
          if (theArray)
          {
            uint64_t v33 = v17;
            CFIndex v35 = CFArrayGetCount(theArray);
            if (v35 < 1)
            {
              unsigned int v26 = 0;
              LODWORD(v28) = 0;
            }
            else
            {
              CFIndex v25 = 0;
              unsigned int v26 = 0;
              do
              {
                if (v12 >= 1)
                {
                  uint64_t v27 = 0;
                  while (1)
                  {
                    CFDictionaryRef v28 = *(unsigned int (**)(const void *))v4[v27];
                    if (v28)
                    {
                      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v25);
                      if (v28(ValueAtIndex))
                      {
                        uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v4[v27] + 3);
                        if (!v30)
                        {
                          uint64_t v5 = 4294955141;
                          goto LABEL_57;
                        }
                        unsigned int v26 = v30(a1, a2, a3, a4);
                        LODWORD(v28) = v26 == 0;
                      }
                      else
                      {
                        LODWORD(v28) = 0;
                      }
                    }
                    if (++v27 >= v12 || v28) {
                      goto LABEL_43;
                    }
                  }
                }
                LODWORD(v28) = 0;
LABEL_43:
                ++v25;
              }
              while (v25 < v35 && !v28);
            }
            if (theArray)
            {
              CFRelease(theArray);
              CFArrayRef theArray = 0;
            }
            uint64_t v17 = v33;
          }
          else
          {
            unsigned int v26 = 0;
            LODWORD(v28) = 0;
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          ++v17;
          BOOL v31 = v28 != 0;
          if (v17 >= v38 || v28) {
            goto LABEL_63;
          }
        }
LABEL_56:
        uint64_t v5 = 4294954514;
        goto LABEL_57;
      }
      unsigned int v26 = 0;
      BOOL v31 = 0;
LABEL_63:
      if (v26) {
        BOOL v31 = 1;
      }
      if (v31) {
        uint64_t v5 = v26;
      }
      else {
        uint64_t v5 = 4294955131;
      }
    }
  }
LABEL_57:
  free(v4);
  if (cf) {
    CFRelease(cf);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v5;
}

CFStringRef FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  return CFStringCreateWithFormat(a1, 0, @"TrackID:%u;Index:%u", a2, a3);
}

uint64_t FigCPEInitializeWithOptions(const void *a1, uint64_t a2, uint64_t a3)
{
  if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  }
  MEMORY[0x19970E910](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (GetSchemeRegistrationDictionary_initOnce != -1) {
    dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary, a1);
  if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  }
  MEMORY[0x19970E930](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (!Value) {
    return 4294955141;
  }
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))Value[4];
  if (!v7) {
    return 4294955141;
  }

  return v7(a2, a3);
}

uint64_t FigCPEUninitialize(const void *a1, uint64_t a2)
{
  if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  }
  MEMORY[0x19970E910](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (GetSchemeRegistrationDictionary_initOnce != -1) {
    dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary, a1);
  if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  }
  MEMORY[0x19970E930](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (!Value) {
    return 4294955141;
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))Value[5];
  if (!v5) {
    return 4294955141;
  }

  return v5(a2);
}

uint64_t FigCPESetSessionRecordStorageURLForAppIdentifierInternal(const void *a1, const void *a2)
{
  if (FigCPEGetSessionRecordStorageLocations_once != -1) {
    dispatch_once_f(&FigCPEGetSessionRecordStorageLocations_once, &FigCPEGetSessionRecordStorageLocations_database, (dispatch_function_t)InitCPESessionRecordLocations);
  }
  uint64_t result = 4294955146;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](FigCPEGetSessionRecordStorageLocations_database);
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E934F8D0, a1);
    if (Value == a2)
    {
LABEL_16:
      MEMORY[0x19970E930](FigCPEGetSessionRecordStorageLocations_database);
      return 0;
    }
    if (!Value)
    {
LABEL_15:
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1E934F8D0, a1, a2);
      goto LABEL_16;
    }
    CFStringRef v6 = (const __CFString *)FigCFURLCreateCacheKey();
    CFStringRef v7 = (const __CFString *)FigCFURLCreateCacheKey();
    CFStringRef v8 = v7;
    if (v6 && v7)
    {
      BOOL v9 = CFEqual(v6, v7);
    }
    else
    {
      BOOL v9 = 0;
      BOOL v10 = 0;
      if (!v6) {
        goto LABEL_12;
      }
    }
    CFRelease(v6);
    BOOL v10 = v9;
LABEL_12:
    if (v8) {
      CFRelease(v8);
    }
    if (v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  return result;
}

uint64_t FigCPECopySessionRecordStorageURLForAppIdentifier(const void *a1, void *a2)
{
  if (FigCPEGetSessionRecordStorageLocations_once != -1) {
    dispatch_once_f(&FigCPEGetSessionRecordStorageLocations_once, &FigCPEGetSessionRecordStorageLocations_database, (dispatch_function_t)InitCPESessionRecordLocations);
  }
  uint64_t result = 4294955146;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](FigCPEGetSessionRecordStorageLocations_database);
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E934F8D0, a1);
    if (Value) {
      CFTypeRef v6 = CFRetain(Value);
    }
    else {
      CFTypeRef v6 = 0;
    }
    MEMORY[0x19970E930](FigCPEGetSessionRecordStorageLocations_database);
    uint64_t result = 0;
    *a2 = v6;
  }
  return result;
}

uint64_t FigCPECopySessionRecordsForAppIdentifierInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294955146;
  if (a1 && a2)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E910](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    }
    CFDictionaryRef v5 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    int64_t Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    uint64_t v7 = Count;
    if (Count < 1)
    {
      CFStringRef v8 = 0;
    }
    else
    {
      CFStringRef v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v5, 0, v8);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E930](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (v7 < 1)
    {
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 0;
      BOOL v9 = v8;
      do
      {
        BOOL v10 = (uint64_t (*)(uint64_t, uint64_t))*((void *)*v9 + 6);
        if (v10)
        {
          uint64_t v2 = v10(a1, a2);
          if (!v2) {
            break;
          }
        }
        ++v9;
        --v7;
      }
      while (v7);
    }
    free(v8);
  }
  return v2;
}

uint64_t FigCPERemoveSessionRecordsForAppIdentifierInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294955146;
  if (a1 && a2)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E910](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    }
    CFDictionaryRef v5 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    int64_t Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    uint64_t v7 = Count;
    if (Count < 1)
    {
      CFStringRef v8 = 0;
    }
    else
    {
      CFStringRef v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v5, 0, v8);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1) {
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    }
    MEMORY[0x19970E930](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (v7 < 1)
    {
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 0;
      BOOL v9 = v8;
      do
      {
        BOOL v10 = (uint64_t (*)(uint64_t, uint64_t))*((void *)*v9 + 7);
        if (v10)
        {
          uint64_t v2 = v10(a1, a2);
          if (!v2) {
            break;
          }
        }
        ++v9;
        --v7;
      }
      while (v7);
    }
    free(v8);
  }
  return v2;
}

uint64_t SchemeRegistrationDictionaryLockInitOnce(uint64_t *a1)
{
  uint64_t result = FigSimpleMutexCreate();
  *a1 = result;
  return result;
}

uint64_t SchemeRegistrationDictionaryInitOnce(__CFDictionary **a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  long long v4 = xmmword_1EE516380;
  long long v5 = *(_OWORD *)&off_1EE516390;
  long long v6 = xmmword_1EE5163A0;
  long long v7 = unk_1EE5163B0;
  RegisterSchemeInternal(Mutable, @"FairPlay", &v4);
  long long v4 = xmmword_1EE5163C0;
  long long v5 = *(_OWORD *)algn_1EE5163D0;
  long long v6 = xmmword_1EE5163E0;
  long long v7 = unk_1EE5163F0;
  RegisterSchemeInternal(Mutable, @"com.apple.pkd", &v4);
  long long v4 = xmmword_1EE516400;
  long long v5 = *(_OWORD *)algn_1EE516410;
  long long v6 = xmmword_1EE516420;
  long long v7 = unk_1EE516430;
  uint64_t result = RegisterSchemeInternal(Mutable, @"com.apple.basicAES", &v4);
  *a1 = Mutable;
  return result;
}

CFMutableDictionaryRef InitCPESessionRecordLocations(uint64_t *a1)
{
  *a1 = FigSimpleMutexCreate();
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  a1[1] = (uint64_t)result;
  return result;
}

const void *FigExportSettingsForExportPreset(void *key)
{
  if (!FigExportSettingsForExportPreset_sSettings)
  {
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    uint64_t v3 = (const void *)MEMORY[0x19970CE00](*MEMORY[0x1E4F1CF80], @"com.apple.MediaToolbox", @"AVAssetExportPresetsBase.plist");
    uint64_t v4 = MEMORY[0x19970CE00](v2, @"com.apple.MediaToolbox", @"AVAssetExportPresets.plist");
    long long v5 = (const void *)v4;
    if (v3) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      FigGetAllocatorForPermanentAllocations();
      FigCFCreateCombinedDictionary();
      CFRelease(v3);
LABEL_9:
      CFRelease(v5);
      goto LABEL_10;
    }
    if (v3)
    {
      CFAllocatorRef AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
      FigExportSettingsForExportPreset_sSettings = (uint64_t)CFDictionaryCreateCopy(AllocatorForPermanentAllocations, (CFDictionaryRef)v3);
      CFRelease(v3);
      if (!v5) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if (v4)
    {
      CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
      FigExportSettingsForExportPreset_sSettings = (uint64_t)CFDictionaryCreateCopy(v9, (CFDictionaryRef)v5);
      goto LABEL_9;
    }
  }
LABEL_10:
  CFMutableDictionaryRef result = 0;
  if (key)
  {
    if (FigExportSettingsForExportPreset_sSettings) {
      return CFDictionaryGetValue((CFDictionaryRef)FigExportSettingsForExportPreset_sSettings, key);
    }
  }
  return result;
}

uint64_t FigAssetExportSettingsUseHEVCHardwareEncoder()
{
  return 0;
}

double FigExportSettingsCalculateOutputDimensions(double a1, double a2)
{
  int CGFloatIfPresent = FigCFDictionaryGetCGFloatIfPresent();
  int v5 = FigCFDictionaryGetCGFloatIfPresent();
  if (CGFloatIfPresent) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return 0.0;
  }
  int FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
  int v8 = FigCFDictionaryGetFloatIfPresent();
  if (FigCFDictionaryGetFloatIfPresent() && a1 * a2 > 0.0)
  {
    double v9 = a1 - sqrt(a1 * 0.0 / a2);
    double v10 = round((a1 - v9) * 0.25);
    double v11 = a2 * v9 / a1;
    a1 = v10 * 4.0;
    a2 = round((a2 - v11) * 0.25) * 4.0;
  }
  if (FloatIfPresent | v8)
  {
    if (FloatIfPresent && a1 >= 1.0 && (double v12 = 0.0, a1 > 0.0))
    {
      a2 = round(a2 * 0.0 / a1 * 0.25) * 4.0;
      if (!v8) {
        return v12;
      }
    }
    else
    {
      double v12 = a1;
      if (!v8) {
        return v12;
      }
    }
    if (a2 >= 1.0 && a2 > 0.0) {
      return round(v12 * 0.0 / a2 * 0.25) * 4.0;
    }
    return v12;
  }
  return a1;
}

uint64_t FigExportSettingsAverageBitRateForSourceAndExportPreset(uint64_t a1, double a2, double a3, float a4)
{
  double v6 = FigExportSettingsCalculateOutputDimensions(a2, a3);
  if (!a1) {
    return 0;
  }
  double v8 = v6;
  double v9 = v7;
  if (!figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable)
  {
    figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable = MEMORY[0x19970CE00](*MEMORY[0x1E4F1CF80], @"com.apple.MediaToolbox", @"AVExportBitRate.plist");
    if (!figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable) {
      goto LABEL_96;
    }
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (FigCFEqual())
    {
      double v10 = @"AVAssetExportBitRateBasicSquare";
      goto LABEL_15;
    }
    double v10 = @"AVAssetExportBitRateBasic";
LABEL_14:
    if (FigCFEqual()) {
      goto LABEL_15;
    }
LABEL_96:
    FigCFDictionaryGetInt32IfPresent();
    return 0;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    double v10 = @"AVAssetExportBitRateHEVCBasic";
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    double v10 = @"AVAssetExportBitRateMVHEVCSquare";
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    double v10 = @"AVAssetExportBitRateYouTubeHD";
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (!FigCFEqual())
    {
      double v10 = @"AVAssetExportBitRateMessage";
      goto LABEL_14;
    }
    double v10 = @"AVAssetExportBitRateMessageSquare";
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    double v10 = @"AVAssetExportBitRateAVCAnimoji";
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_83:
    double v10 = @"AVAssetExportBitRateICPL";
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (FigCFEqual())
    {
      double v10 = @"AVAssetExportBitRateICPLSquare";
      goto LABEL_15;
    }
    goto LABEL_83;
  }
  if (FigCFEqual() || FigCFEqual() || FigCFEqual()) {
    goto LABEL_91;
  }
  if (!FigCFEqual() && !FigCFEqual()) {
    goto LABEL_96;
  }
  if (!FigCFEqual())
  {
LABEL_91:
    double v10 = @"AVAssetExportBitRateICPLHEVC";
    goto LABEL_14;
  }
  double v10 = @"AVAssetExportBitRateICPLHEVCSquare";
LABEL_15:
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable, v10);
  if (!Value) {
    goto LABEL_96;
  }
  CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(Value, @"BitRateTiers");
  if (!v13) {
    goto LABEL_96;
  }
  CFArrayRef v14 = v13;
  CFIndex Count = CFArrayGetCount(v13);
  if (Count < 1) {
    goto LABEL_96;
  }
  CFIndex v16 = Count;
  CFIndex v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = (int)v8 + 30;
  if ((int)v8 >= -15) {
    int v20 = (int)v8 + 15;
  }
  int v21 = v20 >> 4;
  int v22 = (int)v9 + 30;
  if ((int)v9 >= -15) {
    int v22 = (int)v9 + 15;
  }
  int v23 = v21 * (v22 >> 4);
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v17);
    double v25 = exportSettings_tierDimension();
    if (!v19) {
      goto LABEL_30;
    }
    int v27 = (int)v25 + 30;
    if ((int)v25 >= -15) {
      int v27 = (int)v25 + 15;
    }
    int v28 = v27 >> 4;
    int v29 = (int)v26 + 30;
    if ((int)v26 >= -15) {
      int v29 = (int)v26 + 15;
    }
    if (v23 > v28 * (v29 >> 4))
    {
      ++v17;
    }
    else
    {
LABEL_30:
      if (++v17 >= v16) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = CFArrayGetValueAtIndex(v14, v17);
      }
      uint64_t v19 = ValueAtIndex;
    }
  }
  while (v17 != v16);
  if (!v19) {
    goto LABEL_96;
  }
  FigCFDictionaryGetFloatIfPresent();
  float v30 = 0.0;
  if (v18)
  {
    double v31 = exportSettings_tierDimension();
    int v33 = (int)v31 + 30;
    if ((int)v31 >= -15) {
      int v33 = (int)v31 + 15;
    }
    int v34 = v33 >> 4;
    int v35 = (int)v32 + 30;
    if ((int)v32 >= -15) {
      int v35 = (int)v32 + 15;
    }
    int v36 = v34 * (v35 >> 4);
    FigCFDictionaryGetFloatIfPresent();
    double v37 = exportSettings_tierDimension();
    double v39 = v38;
    FigCFDictionaryGetFloatIfPresent();
    if (v23 <= v36)
    {
      int v40 = (int)v37 + 30;
      if ((int)v37 >= -15) {
        int v40 = (int)v37 + 15;
      }
      int v41 = v40 >> 4;
      int v42 = (int)v39 + 30;
      if ((int)v39 >= -15) {
        int v42 = (int)v39 + 15;
      }
      float v30 = (float)((float)(0.0 - 0.0) * (float)((float)(v23 - v41 * (v42 >> 4)) / (float)(v36 - v41 * (v42 >> 4))))
          + 0.0;
    }
  }
  FigCFDictionaryGetFloat32IfPresent();
  FigCFDictionaryGetFloat32IfPresent();
  double v43 = (float)(a4 / 0.0);
  if ((float)(a4 / 0.0) >= 0.5)
  {
    float v45 = v43 * 0.5 + 0.5;
  }
  else
  {
    BOOL v44 = v43 < 0.3;
    float v45 = v43 * 3.25 + -0.875;
    if (v44) {
      float v45 = 0.1;
    }
  }
  float v46 = v30 * v45;
  int Float32IfPresent = FigCFDictionaryGetFloat32IfPresent();
  float v48 = 0.0;
  if (v46 <= 0.0) {
    float v48 = v46;
  }
  if (Float32IfPresent) {
    float v46 = v48;
  }
  int v49 = FigCFDictionaryGetFloat32IfPresent();
  float v50 = 0.0;
  if (v46 >= 0.0) {
    float v50 = v46;
  }
  if (!v49) {
    float v50 = v46;
  }
  uint64_t v11 = (int)v50;
  FigCFDictionaryGetInt32IfPresent();
  return v11;
}

uint64_t FigExportSettingsGetHDRType(const opaqueCMFormatDescription *a1)
{
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F24A90]);
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F24BC8]);
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F24C18]);
  int v3 = 1;
  if (MediaSubType > 1836415072)
  {
    if (MediaSubType > 1902407031)
    {
      if (MediaSubType > 1902671458)
      {
        if (MediaSubType == 1902671459) {
          goto LABEL_26;
        }
        int v4 = 1902998904;
      }
      else
      {
        if (MediaSubType == 1902407032) {
          goto LABEL_26;
        }
        int v4 = 1902667126;
      }
    }
    else if (MediaSubType > 1902405680)
    {
      if (MediaSubType == 1902405681) {
        goto LABEL_26;
      }
      int v4 = 1902405733;
    }
    else
    {
      if (MediaSubType == 1836415073) {
        goto LABEL_26;
      }
      int v4 = 1869117027;
    }
  }
  else if (MediaSubType > 1685481572)
  {
    if (MediaSubType > 1751479856)
    {
      if (MediaSubType == 1751479857) {
        goto LABEL_26;
      }
      int v4 = 1752589105;
    }
    else
    {
      if (MediaSubType == 1685481573) {
        goto LABEL_26;
      }
      int v4 = 1718908520;
    }
  }
  else if (MediaSubType > 1684895095)
  {
    if (MediaSubType == 1684895096) {
      goto LABEL_26;
    }
    int v4 = 1685481521;
  }
  else
  {
    if (MediaSubType == 1667524657) {
      goto LABEL_26;
    }
    int v4 = 1667790435;
  }
  if (MediaSubType != v4) {
    int v3 = 0;
  }
LABEL_26:
  CFPropertyListRef Extension = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (v3)
  {
    double v6 = Extension;
    if (Extension)
    {
      TypeIOSurfaceID ID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v6)
        && CFDictionaryGetValue((CFDictionaryRef)v6, @"dvvC")
        && FigCFEqual()
        && FigCFEqual()
        && FigCFEqual())
      {
        return 20;
      }
    }
  }
  if ((v3 & 1) == 0)
  {
    if (MediaSubType <= 1634743415)
    {
      if (MediaSubType != 1634742376 && MediaSubType != 1634742888)
      {
        unsigned __int16 v9 = 13416;
LABEL_43:
        if (MediaSubType != (v9 | 0x61700000)) {
          goto LABEL_50;
        }
      }
    }
    else if (((MediaSubType - 1634755432) > 0xB || ((1 << (MediaSubType - 104)) & 0x8C1) == 0) {
           && ((MediaSubType - 1634759272) > 6 || ((1 << (MediaSubType - 104)) & 0x51) == 0))
    }
    {
      unsigned __int16 v9 = 13432;
      goto LABEL_43;
    }
  }
  if (CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE00])
    && CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1ED88])
    && FigCFEqual())
  {
    return 10;
  }
LABEL_50:
  if (FigCFEqual()) {
    return 17;
  }
  if (FigCFEqual()) {
    return 9;
  }
  return 0;
}

BOOL FigExportSettingsRequiresHDRMetadata(char a1)
{
  return (a1 & 6) != 0;
}

CFArrayRef FigExportSettingsGetPreferredFormatDescription(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    if (CFArrayGetCount(result) < 1)
    {
      CFIndex v2 = 0;
    }
    else
    {
      CFIndex v2 = 0;
      unsigned int v3 = 0;
      CFIndex v4 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v1, v4);
        unsigned int HDRType = FigExportSettingsGetHDRType(ValueAtIndex);
        if (v3 < HDRType) {
          CFIndex v2 = v4;
        }
        if (v3 <= HDRType) {
          unsigned int v3 = HDRType;
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(v1));
    }
    return (const __CFArray *)CFArrayGetValueAtIndex(v1, v2);
  }
  return result;
}

CFDictionaryRef FigExportSettings_CopyEffectiveColorPropertyForPresetAndInputOutputFormat(CFDictionaryRef theDict, const __CFArray *a2, const __CFDictionary *a3)
{
  CFDictionaryRef v5 = theDict;
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  if (theDict)
  {
    CFDictionaryRef Value = (void *)CFDictionaryGetValue(theDict, @"colorPrimaries");
    CFPropertyListRef Extension = CFDictionaryGetValue(v5, @"transferFunction");
    CFMutableDictionaryRef theDict = (CFDictionaryRef)CFDictionaryGetValue(v5, @"ycbcrMatrix");
  }
  else
  {
    CFPropertyListRef Extension = 0;
    CFDictionaryRef Value = 0;
  }
  keys[0] = @"colorPrimaries";
  keys[1] = @"transferFunction";
  keys[2] = @"ycbcrMatrix";
  values = 0;
  double v25 = 0;
  CFDictionaryRef v26 = 0;
  if (Value && Extension && theDict) {
    goto LABEL_7;
  }
  if (v5) {
    CFDictionaryRef v5 = (const __CFDictionary *)CFDictionaryGetValue(v5, @"colorPropertyTiers");
  }
  if (a3 && CFDictionaryGetCount(a3) >= 1)
  {
    CFDictionaryRef Value = (void *)CFDictionaryGetValue(a3, @"colorPrimaries");
    CFPropertyListRef Extension = CFDictionaryGetValue(a3, @"transferFunction");
    double v10 = CFDictionaryGetValue(a3, @"ycbcrMatrix");
  }
  else if (a2 && CFArrayGetCount(a2) >= 1)
  {
    CFArrayRef PreferredFormatDescription = FigExportSettingsGetPreferredFormatDescription(a2);
    CFDictionaryRef Value = (void *)CMFormatDescriptionGetExtension(PreferredFormatDescription, (CFStringRef)*MEMORY[0x1E4F24A90]);
    CFPropertyListRef Extension = CMFormatDescriptionGetExtension(PreferredFormatDescription, (CFStringRef)*MEMORY[0x1E4F24BC8]);
    double v10 = CMFormatDescriptionGetExtension(PreferredFormatDescription, (CFStringRef)*MEMORY[0x1E4F24C18]);
  }
  else
  {
    CFDictionaryRef Value = 0;
    CFPropertyListRef Extension = 0;
    double v10 = 0;
  }
  CFTypeRef cf = v10;
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v13 = Count;
      CFIndex v14 = 0;
      CFDictionaryRef Copy = 0;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v14);
        CFDictionaryRef v16 = ValueAtIndex;
        if (Copy)
        {
          CFDictionaryGetValue(ValueAtIndex, @"colorPrimaries");
          CFDictionaryGetValue(v16, @"transferFunction");
          CFDictionaryGetValue(v16, @"ycbcrMatrix");
          if (FigCFEqual() && FigCFEqual() && FigCFEqual())
          {
            CFRelease(Copy);
            CFDictionaryRef v21 = (const __CFDictionary *)CFRetain(v16);
            CFDictionaryRef Copy = v21;
            if (v21) {
              return Copy;
            }
LABEL_31:
            if (!Value) {
              return Copy;
            }
            CFTypeID v17 = CFGetTypeID(Value);
            CFDictionaryRef Copy = 0;
            if (v17 != CFStringGetTypeID()) {
              return Copy;
            }
            if (!Extension) {
              return Copy;
            }
            CFTypeID v18 = CFGetTypeID(Extension);
            CFDictionaryRef Copy = 0;
            if (v18 != CFStringGetTypeID() || !cf) {
              return Copy;
            }
            CFTypeID v19 = CFGetTypeID(cf);
            BOOL v20 = v19 == CFStringGetTypeID();
            CFMutableDictionaryRef theDict = (CFDictionaryRef)cf;
            if (!v20) {
              return 0;
            }
LABEL_7:
            values = Value;
            double v25 = Extension;
            CFDictionaryRef v26 = theDict;
            return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          }
        }
        else
        {
          CFDictionaryRef Copy = CFDictionaryCreateCopy(allocator, ValueAtIndex);
        }
        if (v13 == ++v14) {
          goto LABEL_30;
        }
      }
    }
  }
  CFDictionaryRef Copy = 0;
LABEL_30:
  if (!Copy) {
    goto LABEL_31;
  }
  return Copy;
}

uint64_t FigExportSettings_GetMaximumBitsPerComponent(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v2 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v2);
    CMFormatDescriptionGetExtensions(ValueAtIndex);
    if (!FigCFDictionaryGetIntIfPresent())
    {
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
      CFDictionaryRef v7 = CVPixelFormatDescriptionCreateWithPixelFormatType(v3, MediaSubType);
      FigCFDictionaryGetIntIfPresent();
      if (v7) {
        CFRelease(v7);
      }
    }
    ++v2;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return 0;
}

uint64_t FigExportSettings_CopyEncoderIDForProfile(CMVideoCodecType a1, const void *a2, const void **a3)
{
  CFTypeRef cf = 0;
  CFArrayRef listOfVideoEncodersOut = 0;
  uint64_t v5 = VTCopyVideoEncoderList(0, &listOfVideoEncodersOut);
  if (v5)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFDictionaryRef v26 = a3;
    CFIndex v6 = 0;
    CFMutableDictionaryRef Mutable = 0;
    double v8 = (const void *)*MEMORY[0x1E4F45620];
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    double v10 = (const void *)*MEMORY[0x1E4F45658];
    key = (void *)*MEMORY[0x1E4F44AA0];
    int v28 = (void *)*MEMORY[0x1E4F45310];
    while (1)
    {
      CFIndex Count = (CFIndex)listOfVideoEncodersOut;
      if (listOfVideoEncodersOut) {
        CFIndex Count = CFArrayGetCount(listOfVideoEncodersOut);
      }
      if (v6 >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(listOfVideoEncodersOut, v6);
      if (FigCFDictionaryGetInt32IfPresent()) {
        BOOL v13 = a1 == 0;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13)
      {
        CFIndex v14 = CFDictionaryGetValue(ValueAtIndex, v8);
        if (v14)
        {
          uint64_t v15 = v14;
          CFTypeID v16 = CFGetTypeID(v14);
          if (v16 == CFStringGetTypeID())
          {
            if (Mutable) {
              CFRelease(Mutable);
            }
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFDictionarySetValue(Mutable, v10, v15);
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (!VTCopySupportedPropertyDictionaryForEncoder(1920, 1080, a1, Mutable, 0, (CFDictionaryRef *)&cf))
            {
              if (cf)
              {
                CFTypeID v17 = CFGetTypeID(cf);
                if (v17 == CFDictionaryGetTypeID())
                {
                  CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, key);
                  if (v18)
                  {
                    CFDictionaryRef v19 = v18;
                    unsigned int v29 = v5;
                    CFTypeID v20 = CFGetTypeID(v18);
                    if (v20 == CFDictionaryGetTypeID()
                      && (CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v19, v28)) != 0
                      && (CFArrayRef v22 = v21, v23 = CFGetTypeID(v21), v23 == CFArrayGetTypeID()))
                    {
                      v33.length = CFArrayGetCount(v22);
                      v33.location = 0;
                      uint64_t v5 = v29;
                      if (CFArrayContainsValue(v22, v33, a2))
                      {
                        uint64_t v24 = *v26;
                        *CFDictionaryRef v26 = v15;
                        CFRetain(v15);
                        if (v24) {
                          CFRelease(v24);
                        }
                        uint64_t v5 = v29;
                        break;
                      }
                    }
                    else
                    {
                      uint64_t v5 = v29;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v6;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (listOfVideoEncodersOut) {
    CFRelease(listOfVideoEncodersOut);
  }
  return v5;
}

double exportSettings_tierDimension()
{
  return 0.0;
}

uint64_t FigCPEProtectorGetClassID()
{
  return sFigCPEProtectorClassID;
}

uint64_t RegisterFigCPEProtectorType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigCPEProtectorGetTypeID()
{
  MEMORY[0x19970EE10](&FigCPEProtectorGetClassID_sRegisterFigCPEProtectorTypeOnce, RegisterFigCPEProtectorType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCPEProtectorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCPEProtector %p]", a1);
}

uint64_t FigMetricItemVariantChangeStartEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  long long v17 = *MEMORY[0x1E4F1F9F8];
  uint64_t v18 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef v12 = 0;
  if (a1 && a2)
  {
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageCopyCFDate();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFString();
        if (!CMTime)
        {
          uint64_t CMTime = FigXPCMessageCopyCFArray();
          if (!CMTime)
          {
            xpc_object_t value = xpc_dictionary_get_value(a1, "FromVariant");
            uint64_t CMTime = FigAlternateCreateWithXPCObject(value, 0, &v14);
            if (!CMTime)
            {
              xpc_object_t v6 = xpc_dictionary_get_value(a1, "ToVariant");
              uint64_t CMTime = FigAlternateCreateWithXPCObject(v6, 0, &v13);
              if (!CMTime)
              {
                uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
                long long v10 = v17;
                uint64_t v11 = v18;
                uint64_t CMTime = ((uint64_t (*)(uint64_t, long long *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t))FigMetricItemVariantChangeStartEventCreate)(AllocatorForMedia, &v10, cf, v15, v13, v14, v12, a2);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v8 = CMTime;
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v8;
}

uint64_t FigMetricItemVariantChangeStartEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, void *a8)
{
  if (a8)
  {
    FigMetricEventGetClassID();
    uint64_t v16 = CMDerivedObjectCreate();
    if (!v16)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v18 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 80) = v18;
      if (v18)
      {
        *(void *)(DerivedStorage + 8) = 7;
        if (a3)
        {
          CFDictionaryRef v19 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDictionaryRef v19 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v19;
        long long v21 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v21;
        if (a4) {
          CFTypeRef v22 = CFRetain(a4);
        }
        else {
          CFTypeRef v22 = 0;
        }
        *(void *)(DerivedStorage + 24) = v22;
        if (a5) {
          CFTypeRef v23 = CFRetain(a5);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 56) = v23;
        if (a6) {
          CFTypeRef v24 = CFRetain(a6);
        }
        else {
          CFTypeRef v24 = 0;
        }
        *(void *)(DerivedStorage + 64) = v24;
        if (a7) {
          CFTypeRef v25 = CFRetain(a7);
        }
        else {
          CFTypeRef v25 = 0;
        }
        *(void *)(DerivedStorage + 72) = v25;
        uint64_t v16 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v16) {
          *a8 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t meivcs_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = (const void *)DerivedStorage[7];
  if (v1) {
    CFRelease(v1);
  }
  CFIndex v2 = (const void *)DerivedStorage[8];
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = (const void *)DerivedStorage[2];
  if (v3) {
    CFRelease(v3);
  }
  CFIndex v4 = (const void *)DerivedStorage[3];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)DerivedStorage[9];
  if (v5) {
    CFRelease(v5);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef meivcs_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMetricItemVariantChangeStartEvent %p]", a1);
}

void meivcs_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t meivcs_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 10));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 10));
  return v1;
}

uint64_t meivcs_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meivcs_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meivcs_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 80));
  return v2;
}

uint64_t meivcs_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  if (*(unsigned char *)DerivedStorage)
  {
    CFIndex v4 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 80));
  return v5;
}

void meivcs_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 48);

  JUMPOUT(0x19970E930);
}

uint64_t meivcs_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 80));
  return v4;
}

uint64_t meivcs_serialize(uint64_t a1, void *a2)
{
  void (*v19)(long long *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  long long v33;
  uint64_t v34;
  xpc_object_t v35;
  xpc_object_t value;

  int v35 = 0;
  xpc_object_t value = 0;
  if (!a1 || !a2)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_54:
    double v31 = v8;
    CFDictionaryRef v26 = 0;
    goto LABEL_50;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 80);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  xpc_object_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (v6) {
    uint64_t v7 = v6(a1);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = FigAlternateCopyAsXPCObject(v7, &value);
  if (v8) {
    goto LABEL_54;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 80);
  uint64_t v10 = v9 ? v9 : 0;
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 16);
  uint64_t v12 = v11 ? v11(a1) : 0;
  uint64_t v8 = FigAlternateCopyAsXPCObject(v12, &v35);
  if (v8) {
    goto LABEL_54;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  CFTypeRef v15 = *(uint64_t (**)(uint64_t))(v14 + 24);
  int64_t v16 = v15 ? v15(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v16);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v18 = v17 ? v17 : 0;
  CFDictionaryRef v19 = *(void (**)(long long *__return_ptr, uint64_t))(v18 + 56);
  if (v19)
  {
    v19(&v33, a1);
  }
  else
  {
    CFRange v33 = *MEMORY[0x1E4F1F9F8];
    int v34 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  uint64_t v8 = FigXPCMessageSetCMTime();
  if (v8) {
    goto LABEL_54;
  }
  CFTypeID v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    long long v21 = v20;
  }
  else {
    long long v21 = 0;
  }
  CFTypeRef v22 = *(void (**)(uint64_t))(v21 + 32);
  if (v22) {
    v22(a1);
  }
  uint64_t v8 = FigXPCMessageSetCFDate();
  if (v8) {
    goto LABEL_54;
  }
  CFTypeRef v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    CFTypeRef v24 = v23;
  }
  else {
    CFTypeRef v24 = 0;
  }
  CFTypeRef v25 = *(uint64_t (**)(uint64_t))(v24 + 40);
  if (v25) {
    CFDictionaryRef v26 = (const void *)v25(a1);
  }
  else {
    CFDictionaryRef v26 = 0;
  }
  int v27 = FigXPCMessageSetCFString();
  if (v27)
  {
    double v31 = v27;
  }
  else
  {
    int v28 = *(void *)(CMBaseObjectGetVTable() + 80);
    if (v28) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = 0;
    }
    float v30 = *(void (**)(uint64_t))(v29 + 24);
    if (v30) {
      v30(a1);
    }
    double v31 = FigXPCMessageSetCFArray();
    if (!v31)
    {
      xpc_dictionary_set_value(a2, "ToVariant", value);
      xpc_dictionary_set_value(a2, "FromVariant", v35);
    }
  }
LABEL_50:
  FigXPCRelease();
  FigXPCRelease();
  if (v26) {
    CFRelease(v26);
  }
  return v31;
}

uint64_t meivcs_getToVariant()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t meivcs_getFromVariant()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t meivcs_getLoadedTimeRanges()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t FigManifoldCreateRemoteForMovieFragmentStream(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, void *a7)
{
  return manifoldRemote_manifoldCreateGuts(a1, 0, a2, a3, 0, a4, a5, a6, a7);
}

uint64_t manifoldRemote_manifoldCreateGuts(uint64_t a1, unsigned int a2, OpaqueCMBlockBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, void *a9)
{
  uint64_t v29 = 0;
  float v30 = &v29;
  uint64_t v31 = 0x2000000000;
  int v32 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __mr_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57A3F30;
  block[4] = &v29;
  if (mr_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce != -1) {
    dispatch_once(&mr_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce, block);
  }
  uint64_t v16 = *((unsigned int *)v30 + 6);
  _Block_object_dispose(&v29, 8);
  if (v16) {
    goto LABEL_37;
  }
  ServerPIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ServerPID) {
    goto LABEL_42;
  }
  xpc_dictionary_set_uint64(0, "manifoldType", a2);
  ServerPIOSurfaceID ID = FigXPCRemoteClientCopyMemoryRecipient();
  if (ServerPID) {
    goto LABEL_42;
  }
  ServerPIOSurfaceID ID = FigXPCRemoteClientCopyMemoryOrigin();
  if (ServerPID) {
    goto LABEL_42;
  }
  if (a3 && CMBlockBufferIsEmpty(a3)) {
    uint64_t v18 = FigXPCMessageSetCFBoolean();
  }
  else {
    uint64_t v18 = FigXPCMessageSetBlockBufferUsingMemoryOrigin();
  }
  uint64_t v16 = v18;
  if (v18) {
    goto LABEL_37;
  }
  if (CMGetAttachment(a3, @"FMFD_BufferDecryptor", 0))
  {
    ServerPIOSurfaceID ID = FigXPCRemoteClientGetServerPID();
    if (ServerPID) {
      goto LABEL_42;
    }
    ServerPIOSurfaceID ID = FigCPECryptorServerGetIDForCryptorByAssociatingWithClientPID();
    if (ServerPID) {
      goto LABEL_42;
    }
    xpc_dictionary_set_uint64(0, "cryptorObjectID", 0);
  }
  if (a4) {
    xpc_dictionary_set_BOOL(0, "installNewTrackCallback", 1);
  }
  if (a6) {
    xpc_dictionary_set_BOOL(0, "installAllNewTracksReadyCallback", 1);
  }
  if (a5) {
    xpc_dictionary_set_BOOL(0, "installErrorCallback", 1);
  }
  xpc_dictionary_set_uint64(0, "movieManifoldStreamFlags", a8);
  ServerPIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ServerPID) {
    goto LABEL_42;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    ServerPIOSurfaceID ID = FigSignalErrorAt();
LABEL_42:
    uint64_t v16 = ServerPID;
LABEL_37:
    CFTypeRef v24 = 0;
    goto LABEL_38;
  }
  uint64_t v20 = uint64;
  block[0] = 0;
  FigManifoldGetClassID();
  uint64_t v16 = CMDerivedObjectCreate();
  long long v21 = (const void *)block[0];
  if (v16) {
    goto LABEL_44;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = v20;
  DerivedStorage[9] = 0;
  DerivedStorage[11] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  DerivedStorage[2] = Mutable;
  if (!Mutable)
  {
    uint64_t v16 = FigSignalErrorAt();
    long long v21 = (const void *)block[0];
LABEL_44:
    if (v21) {
      CFRelease(v21);
    }
    CFTypeRef v24 = 0;
    if (v16) {
      goto LABEL_38;
    }
    goto LABEL_27;
  }
  CFTypeRef v24 = (const void *)block[0];
LABEL_27:
  uint64_t v25 = FigXPCRemoteClientAssociateObject();
  if (!v25)
  {
    CFDictionaryRef v26 = (void *)CMBaseObjectGetDerivedStorage();
    if (a7) {
      v26[6] = a7;
    }
    if (a4) {
      v26[3] = a4;
    }
    if (a6) {
      v26[4] = a6;
    }
    if (a5) {
      v26[5] = a5;
    }
    uint64_t v16 = 0;
    *a9 = v24;
    goto LABEL_37;
  }
  uint64_t v16 = v25;
LABEL_38:
  if (v24) {
    CFRelease(v24);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v16;
}

uint64_t FigManifoldCreateRemoteForMPEG2(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return manifoldRemote_manifoldCreateGuts(a1, 1u, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t FigManifoldCreateRemoteForWebVTT(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return manifoldRemote_manifoldCreateGuts(a1, 2u, a2, a3, 0, a4, a5, 0, a6);
}

uint64_t FigManifoldCreateRemoteForICY(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return manifoldRemote_manifoldCreateGuts(a1, 3u, a2, a3, 0, a4, a5, 0, a6);
}

uint64_t __mr_ensureClientEstablished_block_invoke(uint64_t a1)
{
  uint64_t result = FigXPCRemoteClientCreate();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t manifoldRemote_deadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t manifoldRemote_invalidate()
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t v1 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v0 = FigXPCCreateBasicMessage();
    if (v0) {
      uint64_t v1 = v0;
    }
    else {
      uint64_t v1 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v1;
}

uint64_t manifoldRemote_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigXPCRemoteClientDisassociateObject()
    && !*(unsigned char *)(DerivedStorage + 8)
    && !FigXPCCreateBasicMessage())
  {
    FigXPCRemoteClientSendAsyncMessage();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFTypeRef v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 56) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 72);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 72) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 80) = 0;
  }
  xpc_object_t v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 96);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 104);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 104) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 112);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 112) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 120);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 120) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 128) = 0;
  }
  return FigXPCRelease();
}

CFStringRef manifoldRemote_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRemoteManifold %p ObjectID: %016llx]", a1, *DerivedStorage);
}

uint64_t manifoldRemote_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v12 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    BlockBufferCFDataRef Data = FigSignalErrorAt();
    goto LABEL_20;
  }
  if (a4)
  {
    BlockBufferCFDataRef Data = FigXPCCreateBasicMessage();
    if (BlockBufferData) {
      goto LABEL_20;
    }
    BlockBufferCFDataRef Data = FigXPCMessageSetCFString();
    if (BlockBufferData) {
      goto LABEL_20;
    }
    BlockBufferCFDataRef Data = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (BlockBufferData) {
      goto LABEL_20;
    }
    if (FigCFEqual())
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(xdict, "formatReader");
      if (uint64)
      {
        BlockBufferCFDataRef Data = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 1, &cf);
        if (BlockBufferData) {
          goto LABEL_20;
        }
        BlockBufferCFDataRef Data = FigAssetCreateWithFormatReader(a3, cf, 0, 0, &v13);
        if (BlockBufferData) {
          goto LABEL_20;
        }
      }
LABEL_15:
      uint64_t v8 = 0;
      *a4 = v13;
      CFTypeRef v13 = 0;
      goto LABEL_16;
    }
    if (FigCFEqual())
    {
      BlockBufferCFDataRef Data = FigXPCMessageCreateBlockBufferData();
      if (!BlockBufferData) {
        goto LABEL_15;
      }
    }
    else
    {
      BlockBufferCFDataRef Data = FigXPCMessageCopyCFObject();
      if (!BlockBufferData) {
        goto LABEL_15;
      }
    }
LABEL_20:
    uint64_t v8 = BlockBufferData;
    goto LABEL_21;
  }
  uint64_t v8 = 0;
LABEL_21:
  if (v13) {
    CFRelease(v13);
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t manifoldRemote_setProperty()
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    return FigXPCSendStdSetPropertyMessage();
  }
}

uint64_t manifoldRemote_injectData(const void *a1, int64_t a2, unsigned int a3, void *a4)
{
  xpc_object_t v34 = 0;
  xpc_object_t xdict = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t value = 0;
  int v32 = 0;
  if (a1) {
    CFRetain(a1);
  }
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    ServerPIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_54;
  }
  ServerPIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ServerPID) {
    goto LABEL_54;
  }
  xpc_dictionary_set_int64(xdict, "dataStartReference", a2);
  xpc_dictionary_set_uint64(xdict, "injectFlags", a3);
  CFTypeRef v10 = CMGetAttachment(a4, @"FMFD_BufferDecryptor", 0);
  CFTypeRef v11 = CMGetAttachment(a4, @"FMFD_BufferAudioDecryptor", 0);
  if (!v10) {
    goto LABEL_43;
  }
  CFTypeRef v12 = v11;
  FigBasicAESCPECryptorGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
  {
    ServerPIOSurfaceID ID = FigXPCRemoteClientGetServerPID();
    if (!ServerPID)
    {
      ServerPIOSurfaceID ID = FigCPECryptorServerGetIDForCryptorByAssociatingWithClientPID();
      if (!ServerPID)
      {
        xpc_dictionary_set_uint64(xdict, "cryptorObjectID", value);
        if (!v12) {
          goto LABEL_43;
        }
        ServerPIOSurfaceID ID = FigXPCRemoteClientGetServerPID();
        if (!ServerPID)
        {
          ServerPIOSurfaceID ID = FigCPECryptorServerGetIDForCryptorByAssociatingWithClientPID();
          if (!ServerPID)
          {
            xpc_dictionary_set_uint64(xdict, "audioCryptorObjectID", value);
            goto LABEL_43;
          }
        }
      }
    }
    goto LABEL_54;
  }
  xpc_dictionary_set_BOOL(xdict, "UseAESCryptor", 1);
  if (FigCFEqual())
  {
    xpc_dictionary_set_BOOL(xdict, "UseExistingAESCryptor", 1);
  }
  else
  {
    CFTypeRef v13 = *(const void **)(DerivedStorage + 96);
    *(void *)(DerivedStorage + 96) = v10;
    CFRetain(v10);
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = *(const void **)(DerivedStorage + 104);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 104) = 0;
    }
    CFTypeRef v15 = *(const void **)(DerivedStorage + 112);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(DerivedStorage + 112) = 0;
    }
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(CFTypeRef, void, void, CFTypeRef *))(v17 + 48);
  if (!v18) {
    goto LABEL_55;
  }
  uint64_t v19 = *MEMORY[0x1E4F1CF80];
  ServerPIOSurfaceID ID = v18(v10, *MEMORY[0x1E4F1FDB8], *MEMORY[0x1E4F1CF80], &cf);
  if (ServerPID) {
    goto LABEL_54;
  }
  if (!FigCFEqual())
  {
    ServerPIOSurfaceID ID = FigXPCMessageSetCFData();
    if (ServerPID) {
      goto LABEL_54;
    }
    uint64_t v20 = *(const void **)(DerivedStorage + 104);
    CFTypeRef v21 = cf;
    *(void *)(DerivedStorage + 104) = cf;
    if (v21) {
      CFRetain(v21);
    }
    if (v20) {
      CFRelease(v20);
    }
  }
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v23 = v22 ? v22 : 0;
  CFTypeRef v24 = *(uint64_t (**)(CFTypeRef, void, uint64_t, CFTypeRef *))(v23 + 48);
  if (!v24)
  {
LABEL_55:
    uint64_t v28 = 4294954514;
    goto LABEL_56;
  }
  ServerPIOSurfaceID ID = v24(v10, *MEMORY[0x1E4F1FDA8], v19, &v30);
  if (ServerPID) {
    goto LABEL_54;
  }
  if (FigCFEqual()) {
    goto LABEL_43;
  }
  ServerPIOSurfaceID ID = FigXPCMessageSetCFData();
  if (ServerPID)
  {
LABEL_54:
    uint64_t v28 = ServerPID;
    goto LABEL_56;
  }
  uint64_t v25 = *(const void **)(DerivedStorage + 112);
  CFTypeRef v26 = v30;
  *(void *)(DerivedStorage + 112) = v30;
  if (v26) {
    CFRetain(v26);
  }
  if (v25) {
    CFRelease(v25);
  }
LABEL_43:
  if (CMGetAttachment(a4, @"FBPAKey_TimedData", 0)) {
    xpc_dictionary_set_BOOL(xdict, "timedMetadata", 1);
  }
  if (a4 && CMBlockBufferIsEmpty((CMBlockBufferRef)a4)) {
    uint64_t v27 = FigXPCMessageSetCFBoolean();
  }
  else {
    uint64_t v27 = FigXPCMessageSetBlockBufferUsingMemoryOrigin();
  }
  uint64_t v28 = v27;
  if (!v27)
  {
    ServerPIOSurfaceID ID = FigMemoryRecipientAppendRecipientStateUpdateToXPCMessage();
    if (!ServerPID)
    {
      ServerPIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ServerPID)
      {
        ServerPIOSurfaceID ID = FigMemoryOriginUpdateRecipientStateFromXPCMessage();
        if (!ServerPID) {
          ServerPIOSurfaceID ID = manifoldRemote_processPendingCallbacks((uint64_t)a1, v34);
        }
      }
    }
    goto LABEL_54;
  }
LABEL_56:
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (a1) {
    CFRelease(a1);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v28;
}

uint64_t manifoldRemote_noteStreamEnd(uint64_t a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      FigXPCMessageSetOSStatus();
      uint64_t v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v2) {
        uint64_t v2 = manifoldRemote_processPendingCallbacks(a1, 0);
      }
    }
  }
  uint64_t v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_copyCurrentFormatDescriptionForTrack(uint64_t a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      FigXPCMessageSetInt32();
      uint64_t v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v2)
      {
        FigGetAllocatorForMedia();
        uint64_t v2 = FigXPCMessageCopyFormatDescription2();
        if (!v2) {
          uint64_t v2 = manifoldRemote_processPendingCallbacks(a1, 0);
        }
      }
    }
  }
  uint64_t v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_installCallbacksForTrack(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  xpc_object_t v22 = 0;
  xpc_object_t xdict = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = FigXPCCreateBasicMessage();
  if (v10)
  {
LABEL_20:
    uint64_t v16 = v10;
    goto LABEL_18;
  }
  FigXPCMessageSetInt32();
  if (a3)
  {
    if (*a3)
    {
      xpc_dictionary_set_BOOL(xdict, "installFormatDescriptionOrDecryptorChangedCallback", 1);
      uint64_t v19 = *a3;
    }
    if (a3[1])
    {
      xpc_dictionary_set_BOOL(xdict, "installPushSampleBufferCallback", 1);
      uint64_t v20 = a3[1];
    }
    uint64_t v12 = a3[2];
    CFTypeRef v11 = a3 + 2;
    if (v12)
    {
      xpc_dictionary_set_BOOL(xdict, "installTrackEndedCallback", 1);
      uint64_t v21 = *v11;
    }
  }
  __copy_constructor_8_8_pa0_6124_0_pa0_43336_8_pa0_40812_16(v18, &v19);
  if (FigManifoldRemoteCallbackInfoGetTypeID_once != -1) {
    dispatch_once(&FigManifoldRemoteCallbackInfoGetTypeID_once, &__block_literal_global_73);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v14 = (void *)Instance;
  if (Instance)
  {
    __copy_constructor_8_8_pa0_6124_0_pa0_43336_8_pa0_40812_16((void *)(Instance + 16), v18);
    v14[5] = a4;
  }
  else
  {
    uint64_t v16 = FigSignalErrorAt();
    if (v16) {
      goto LABEL_18;
    }
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 16), (const void *)a2, v14);
  uint64_t v15 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v15) {
    uint64_t v15 = manifoldRemote_processPendingCallbacks(a1, v22);
  }
  uint64_t v16 = v15;
  if (v14) {
    CFRelease(v14);
  }
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  return v16;
}

uint64_t manifoldRemote_flush(uint64_t a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v2) {
        uint64_t v2 = manifoldRemote_processPendingCallbacks(a1, 0);
      }
    }
  }
  uint64_t v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_copyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8) || !a3 || !a5)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_12:
    uint64_t v10 = v8;
    goto LABEL_10;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8) {
    goto LABEL_12;
  }
  FigXPCMessageSetInt32();
  uint64_t v8 = FigXPCMessageSetCFString();
  if (v8) {
    goto LABEL_12;
  }
  uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v8) {
    goto LABEL_12;
  }
  uint64_t v9 = FigXPCMessageCopyCFObject();
  if (v9)
  {
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = manifoldRemote_processPendingCallbacks(a1, 0);
    if (!v10) {
      *a5 = 0;
    }
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t manifoldRemote_reannounceUnregisteredTracks(uint64_t a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v2) {
        uint64_t v2 = manifoldRemote_processPendingCallbacks(a1, 0);
      }
    }
  }
  uint64_t v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_processPendingCallbacks(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "pendingCallbacks");
  if (!value) {
    return 0;
  }
  uint64_t v4 = value;
  size_t count = xpc_array_get_count(value);
  if (!count) {
    return 0;
  }
  size_t v6 = count;
  size_t v7 = 0;
  CFAllocatorRef v62 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v61 = *MEMORY[0x1E4F1FDB8];
  size_t v63 = count;
  while (1)
  {
    xpc_object_t v8 = xpc_array_get_value(v4, v7);
    if (!v8) {
      return FigSignalErrorAt();
    }
    uint64_t v9 = v8;
    switch(xpc_dictionary_get_uint64(v8, "callbackType"))
    {
      case 0u:
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        CFTypeRef v11 = *(void (**)(uint64_t, void))(DerivedStorage + 32);
        if (v11) {
          v11(a1, *(void *)(DerivedStorage + 48));
        }
        goto LABEL_35;
      case 1u:
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        uint64_t Int32 = FigXPCMessageGetInt32();
        uint64_t v14 = FigXPCMessageGetInt32();
        uint64_t v15 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 24);
        if (v15)
        {
          uint64_t v16 = v15(a1, *(void *)(v12 + 48), Int32, v14);
          if (v16) {
            return v16;
          }
        }
        goto LABEL_35;
      case 2u:
        uint64_t v17 = CMBaseObjectGetDerivedStorage();
        CFTypeRef v66 = 0;
        uint64_t v18 = FigXPCMessageGetInt32();
        OSint Status = FigXPCMessageGetOSStatus();
        uint64_t v20 = FigXPCMessageCopyCFDictionary();
        if (v20) {
          goto LABEL_14;
        }
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, CFTypeRef))(v17 + 40);
        if (v21)
        {
          uint64_t v20 = v21(a1, v18, *(void *)(v17 + 48), OSStatus, v66);
LABEL_14:
          uint64_t v22 = v20;
        }
        else
        {
          uint64_t v22 = 0;
        }
        CFTypeRef v38 = v66;
        if (v66) {
          goto LABEL_33;
        }
        goto LABEL_34;
      case 3u:
        uint64_t v23 = CMBaseObjectGetDerivedStorage();
        CFTypeRef v65 = 0;
        CFTypeRef v66 = 0;
        *(void *)bytes = 0;
        uint64_t v24 = FigXPCMessageGetInt32();
        uint64_t v25 = CFDictionaryGetValue(*(CFDictionaryRef *)(v23 + 16), (const void *)(int)v24);
        if (!v25) {
          goto LABEL_68;
        }
        CFTypeRef v26 = v25;
        FigGetAllocatorForMedia();
        uint64_t v27 = FigXPCMessageCopyFormatDescription2();
        if (v27) {
          goto LABEL_45;
        }
        uint64_t uint64 = xpc_dictionary_get_uint64(v9, "cryptorObjectID");
        BOOL v29 = xpc_dictionary_get_BOOL(v9, "useDummyAESCryptor");
        if (uint64)
        {
          uint64_t v27 = FigCPECryptorServerCopyCryptorForID();
          if (v27) {
            goto LABEL_45;
          }
        }
        else if (v29)
        {
          float v45 = (uint64_t *)(v23 + 128);
          if (!*(void *)(v23 + 128))
          {
            uint64_t v27 = FigCPEProtectorCreateForScheme((uint64_t)v62, @"com.apple.basicAES", 0, v23 + 128);
            if (v27) {
              goto LABEL_45;
            }
          }
          float v48 = *(const void **)(v23 + 120);
          BOOL v47 = (CFTypeRef *)(v23 + 120);
          CFTypeRef v46 = v48;
          if (v48) {
            goto LABEL_41;
          }
          uint64_t v50 = *v45;
          uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v51) {
            uint64_t v52 = v51;
          }
          else {
            uint64_t v52 = 0;
          }
          CFNumberRef v53 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, void, CFTypeRef *))(v52 + 104);
          if (!v53) {
            goto LABEL_66;
          }
          uint64_t v27 = v53(v50, v62, 1, 0, v47);
          if (v27) {
            goto LABEL_45;
          }
          CFDataRef v54 = CFDataCreate(v62, bytes, 1);
          *(void *)bytes = v54;
          if (!v54)
          {
LABEL_68:
            uint64_t v27 = FigSignalErrorAt();
            goto LABEL_45;
          }
          CFDataRef v55 = v54;
          CFTypeRef v56 = *v47;
          uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v58 = v57 ? v57 : 0;
          os_log_type_t v59 = *(uint64_t (**)(CFTypeRef, uint64_t, CFDataRef))(v58 + 56);
          if (!v59)
          {
LABEL_66:
            uint64_t v22 = 4294954514;
            goto LABEL_47;
          }
          uint64_t v27 = v59(v56, v61, v55);
          if (v27) {
            goto LABEL_45;
          }
          CFTypeRef v46 = *v47;
          if (*v47) {
LABEL_41:
          }
            CFTypeRef v46 = CFRetain(v46);
          CFTypeRef v65 = v46;
        }
        int v49 = (uint64_t (*)(uint64_t, uint64_t, void, CFTypeRef, CFTypeRef))v26[2];
        if (v49)
        {
          uint64_t v27 = v49(a1, v24, v26[5], v66, v65);
LABEL_45:
          uint64_t v22 = v27;
          goto LABEL_47;
        }
        uint64_t v22 = 0;
LABEL_47:
        size_t v6 = v63;
        if (*(void *)bytes) {
          CFRelease(*(CFTypeRef *)bytes);
        }
        if (v66) {
          CFRelease(v66);
        }
        CFTypeRef v38 = v65;
        if (v65) {
LABEL_33:
        }
          CFRelease(v38);
LABEL_34:
        if (v22) {
          return v22;
        }
LABEL_35:
        if (v6 == ++v7) {
          return 0;
        }
        break;
      case 4u:
        uint64_t v30 = CMBaseObjectGetDerivedStorage();
        CFTypeRef v66 = 0;
        uint64_t v31 = FigXPCMessageGetInt32();
        int v32 = CFDictionaryGetValue(*(CFDictionaryRef *)(v30 + 16), (const void *)(int)v31);
        if (!v32) {
          goto LABEL_67;
        }
        CFRange v33 = v32;
        if (!v32[3]) {
          goto LABEL_35;
        }
        uint64_t v34 = xpc_dictionary_get_uint64(v9, "pushSampleFlags");
        int64_t int64 = xpc_dictionary_get_int64(v9, "dataStartReference");
        FigGetAllocatorForMedia();
        uint64_t v36 = FigXPCMessageCopyCMSampleBuffer();
        CFTypeRef v37 = v66;
        if (v36)
        {
          uint64_t v22 = v36;
        }
        else
        {
          uint64_t v22 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, int64_t, CFTypeRef))v33[3])(a1, v31, v33[5], v34, int64, v66);
          CFTypeRef v37 = v66;
        }
        size_t v6 = v63;
        if (!v37) {
          goto LABEL_34;
        }
        CFTypeRef v38 = v37;
        goto LABEL_33;
      case 5u:
        uint64_t v39 = CMBaseObjectGetDerivedStorage();
        uint64_t v40 = FigXPCMessageGetInt32();
        int v41 = CFDictionaryGetValue(*(CFDictionaryRef *)(v39 + 16), (const void *)(int)v40);
        if (v41)
        {
          int v42 = v41;
          if (!v41[4]) {
            goto LABEL_35;
          }
          uint64_t v43 = FigXPCMessageGetOSStatus();
          uint64_t v44 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t))v42[4])(a1, v40, v42[5], v43);
        }
        else
        {
LABEL_67:
          uint64_t v44 = FigSignalErrorAt();
        }
        uint64_t v22 = v44;
        goto LABEL_34;
      default:
        return 4294951256;
    }
  }
}

void *__copy_constructor_8_8_pa0_6124_0_pa0_43336_8_pa0_40812_16(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  return result;
}

uint64_t __FigManifoldRemoteCallbackInfoGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gCallbackInfoTypeIOSurfaceID ID = result;
  return result;
}

CFStringRef manifoldCallbackInfo_copyDebugDesc(void *a1)
{
  if (a1[2]) {
    uint64_t v1 = a1[2];
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1[3]) {
    uint64_t v2 = a1[3];
  }
  else {
    uint64_t v2 = 0;
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigManifoldCallbackInfo %p outputCallbacks %p %p %p refCon %p]", a1, v1, v2, a1[4], a1[5]);
}

uint64_t FigTTMLRegionCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (!v8)
      {
        uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v8)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            CFMutableArrayRef v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
            *(void *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              uint64_t v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLRegionConsumeChildNode, (uint64_t *)a3);
              if (!v12) {
                *a4 = 0;
              }
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLRegionConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v15 = 0;
  xpc_object_t value = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1) {
    goto LABEL_13;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v15, (CFStringRef *)&cf);
  if (v8) {
    goto LABEL_23;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    CFAllocatorRef v9 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLStyleCreate((uint64_t)v9, a1, (uint64_t)a2, &value);
    if (!v8)
    {
      uint64_t v10 = *(__CFArray **)(DerivedStorage + 136);
LABEL_12:
      CFArrayAppendValue(v10, value);
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_13:
    uint64_t v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!v8)
    {
LABEL_14:
      uint64_t v12 = 0;
      if (a3)
      {
        *a3 = value;
        xpc_object_t value = 0;
      }
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  CFAllocatorRef v11 = CFGetAllocator(*a2);
  uint64_t v8 = FigTTMLSetCreate((uint64_t)v11, a1, (uint64_t)a2, &value);
  if (!v8)
  {
    uint64_t v10 = *(__CFArray **)(DerivedStorage + 144);
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v8;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
LABEL_18:
  if (v15) {
    CFRelease(v15);
  }
  if (value) {
    CFRelease(value);
  }
  return v12;
}

uint64_t FigTTMLRegionCreateDefault(const __CFAllocator *a1, long long *a2, void *a3)
{
  if (a3)
  {
    FigTTMLNodeGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (!v6)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v6 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a2);
      if (!v6)
      {
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), @"http://www.w3.org/XML/1998/namespace id", &stru_1EE53F4B8);
        CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
        *(void *)(DerivedStorage + 136) = Mutable;
        if (Mutable)
        {
          CFMutableArrayRef v9 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 144) = v9;
          if (v9)
          {
            uint64_t v10 = 0;
            *a3 = 0;
            return v10;
          }
        }
        return FigSignalErrorAt();
      }
    }
    return v6;
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLRegionCopyID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    xpc_object_t value = 0;
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 24), @"http://www.w3.org/XML/1998/namespace id", (const void **)&value))
    {
      if (value) {
        CFTypeRef v4 = CFRetain(value);
      }
      else {
        CFTypeRef v4 = 0;
      }
      uint64_t result = 0;
      *a2 = v4;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void figTTMLRegion_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef figTTMLRegion_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"region: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLRegion_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  if (a2) {
    *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
  }
  else {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLRegion_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 10;
  return 0;
}

uint64_t FigByteFlumeCustomURLCreateWithURL(uint64_t a1, const __CFURL *a2, const void *a3, const void *a4, const void *a5, NSObject *a6, int a7, const void *a8, const void *a9, void *a10)
{
  if (a2 && a10)
  {
    FigByteFlumeGetClassID();
    uint64_t v17 = CMDerivedObjectCreate();
    if (v17) {
      return v17;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v19 = FigByteFlumeBaseInitialize(a1, DerivedStorage);
    if (!v19)
    {
      CFTypeRef v20 = FigCFHTTPCreateURLString(a2);
      *(void *)(DerivedStorage + 88) = v20;
      if (v20)
      {
        *(void *)(DerivedStorage + 144) = 0;
        *(_DWORD *)(DerivedStorage + 216) = 0;
        *(void *)(DerivedStorage + 152) = DerivedStorage + 144;
        *(void *)(DerivedStorage + 80) = CFRetain(a2);
        if (a5) {
          CFTypeRef v21 = CFRetain(a5);
        }
        else {
          CFTypeRef v21 = 0;
        }
        *(void *)(DerivedStorage + 96) = v21;
        if (a8) {
          CFTypeRef v22 = CFRetain(a8);
        }
        else {
          CFTypeRef v22 = 0;
        }
        *(void *)(DerivedStorage + 48) = v22;
        if (a3) {
          CFTypeRef v23 = CFRetain(a3);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 104) = v23;
        if (a4) {
          CFTypeRef v24 = CFRetain(a4);
        }
        else {
          CFTypeRef v24 = 0;
        }
        *(void *)(DerivedStorage + 112) = v24;
        *(void *)(DerivedStorage + 128) = FigHTTPSchedulerRetain(a6);
        if (a9) {
          CFTypeRef v25 = CFRetain(a9);
        }
        else {
          CFTypeRef v25 = 0;
        }
        *(void *)(DerivedStorage + 240) = v25;
        *(_DWORD *)(DerivedStorage + 136) = a7;
        *(void *)(DerivedStorage + 120) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        if (a9)
        {
          *(unsigned char *)(DerivedStorage + 201) = CFDictionaryGetValue((CFDictionaryRef)a9, @"FBFCreateOption_DisableNativeHTTPReads") == (const void *)*MEMORY[0x1E4F1CFD0];
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a9, @"FBFCreateOption_HTTPRequestOptions");
          CFDictionaryRef v27 = Value;
          if (Value)
          {
            uint64_t v28 = CFDictionaryGetValue(Value, @"FHRP_ClientBundleIdentifier");
            if (v28) {
              uint64_t v28 = CFRetain(v28);
            }
            *(void *)(DerivedStorage + 208) = v28;
            CFDataRef v29 = (const __CFData *)CFDictionaryGetValue(v27, @"FHRP_ClientAuditToken");
            CFDictionaryRef v27 = FigCFHTTPCopyClientProcessName(v29);
          }
          uint64_t v30 = CFDictionaryGetValue((CFDictionaryRef)a9, @"FBFCreateOption_AlternativeConfigurationOptions");
        }
        else
        {
          uint64_t v30 = 0;
          CFDictionaryRef v27 = 0;
        }
        FigByteFlumeCreateReportingAgent(DerivedStorage, (uint64_t)v30, *(const __CFDictionary **)(DerivedStorage + 96), v27, *(const void **)(DerivedStorage + 208), *(unsigned __int8 *)(DerivedStorage + 290), 0);
        uint64_t v31 = *(void *)(DerivedStorage + 32);
        if (v31)
        {
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v33 = v32 ? v32 : 0;
          uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v33 + 56);
          if (v34) {
            v34(v31, 0x1EE582C18, 0x1EE55E0B8, 1, 0);
          }
        }
        if (v27) {
          CFRelease(v27);
        }
        uint64_t v35 = 0;
        *a10 = 0;
        return v35;
      }
      uint64_t v19 = FigSignalErrorAt();
    }
    uint64_t v35 = v19;
    CFRelease(0);
    return v35;
  }

  return FigSignalErrorAt();
}

uint64_t FigByteFlumeCustomURLInvalidate()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v1 = (uint64_t)DerivedStorage;
    FigRetainProxyLockMutex();
    FigRetainProxyInvalidate();
    *(_DWORD *)(v1 + 216) = 3;
    uint64_t v2 = *(const void **)(v1 + 56);
    if (v2) {
      CFTypeRef v3 = CFRetain(v2);
    }
    else {
      CFTypeRef v3 = 0;
    }
    uint64_t v4 = *(void *)(v1 + 272);
    if (v4) {
      figByteFlumeCancelCustomURLRequest(v1, v4);
    }
    uint64_t v5 = *(void **)(v1 + 144);
    if (v5)
    {
      do
      {
        uint64_t v7 = (void *)v5[11];
        uint64_t v6 = (void *)v5[12];
        if (v7)
        {
          v7[12] = v6;
          uint64_t v6 = (void *)v5[12];
        }
        else
        {
          *(void *)(v1 + 152) = v6;
        }
        *uint64_t v6 = v7;
        figByteFlumeCancelCustomURLRequest(v1, v5[8]);
        fbfcu_ReleaseReadRequest(v5);
        uint64_t v5 = v7;
      }
      while (v7);
    }
    CFMutableArrayRef v9 = *(void (**)(uint64_t, void, uint64_t))(v1 + 248);
    uint64_t v8 = *(void *)(v1 + 256);
    *(void *)(v1 + 248) = 0;
    FigByteFlumeBaseInvalidate(v1);
    FigRetainProxyUnlockMutex();
    if (v3)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(CFTypeRef))(v11 + 24);
      if (v12) {
        v12(v3);
      }
      CFRelease(v3);
    }
    if (v9) {
      v9(v8, 0, 4294954364);
    }
  }
  return 0;
}

void FigByteFlumeCustomURLFinalize()
{
  FigByteFlumeCustomURLInvalidate();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 80);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 80) = 0;
  }
  CFTypeRef v3 = *(const void **)(DerivedStorage + 88);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 104);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 104) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 112);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 112) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 120);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 120) = 0;
  }
  FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 128));
  uint64_t v7 = *(const void **)(DerivedStorage + 56);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 160);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 160) = 0;
  }
  CFMutableArrayRef v9 = *(const void **)(DerivedStorage + 168);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 168) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 96);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 240);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 240) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 184);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 184) = 0;
  }
  CFTypeRef v13 = *(const void **)(DerivedStorage + 280);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 280) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 208);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 208) = 0;
  }
  CFTypeRef v15 = *(void ***)(DerivedStorage + 224);
  if (v15)
  {
    FigByteRateHistoryDispose(v15);
    *(void *)(DerivedStorage + 224) = 0;
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 64);
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 72);
  if (v17) {
    CFRelease(v17);
  }

  FigByteFlumeBaseDispose(DerivedStorage);
}

__CFString *FigByteFlumeCustomURLCopyDebugDescription()
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigByteFlumeCustomURL <%p>\n", DerivedStorage);
  if (FigRetainProxyIsInvalidated())
  {
    CFStringRef v2 = @" Invalidated\n";
  }
  else
  {
    CFStringAppend(Mutable, @" Original URL      : ");
    CFStringRef v2 = *(const __CFString **)(DerivedStorage + 88);
  }
  CFStringAppend(Mutable, v2);
  return Mutable;
}

uint64_t FigByteFlumeCustomURLCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated()) {
    return 4294954511;
  }
  uint64_t v9 = *(void *)(DerivedStorage + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, CFDictionaryRef *))(v11 + 48);
    if (!v14) {
      return 4294954514;
    }
    return v14(v9, a2, a3, a4);
  }
  if (CFEqual(a2, @"FBF_URL"))
  {
    uint64_t v12 = *(const void **)(DerivedStorage + 280);
    if (!v12)
    {
      uint64_t v12 = *(const void **)(DerivedStorage + 80);
      if (!v12) {
        goto LABEL_9;
      }
    }
    goto LABEL_18;
  }
  if (CFEqual(a2, @"FBF_HTTPResponseHeaders"))
  {
    uint64_t v12 = *(const void **)(DerivedStorage + 168);
    if (v12)
    {
LABEL_18:
      CFDictionaryRef v15 = (const __CFDictionary *)CFRetain(v12);
LABEL_19:
      CFDictionaryRef v13 = v15;
      goto LABEL_20;
    }
    return 4294954513;
  }
  if (CFEqual(a2, @"FBF_EntireLength"))
  {
    if (!*(unsigned char *)(DerivedStorage + 200)) {
      return 4294954357;
    }
    CFDictionaryRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(DerivedStorage + 192));
    goto LABEL_19;
  }
  if (!CFEqual(a2, @"FBF_BandwidthInfo"))
  {
    if (CFEqual(a2, @"FBF_NoCache"))
    {
      if (!*(unsigned char *)(DerivedStorage + 288)) {
        return 4294954513;
      }
      CFTypeRef v21 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    else
    {
      if (CFEqual(a2, @"FBF_MIMEType"))
      {
        uint64_t v12 = *(const void **)(DerivedStorage + 184);
        if (v12) {
          goto LABEL_18;
        }
        return 4294954513;
      }
      if (CFEqual(a2, @"FBF_StorageSession")) {
        return 4294954513;
      }
      if (!CFEqual(a2, @"FBF_EntireLengthAvailableOnDemand"))
      {
        if (CFEqual(a2, @"FBF_ReportingAgent"))
        {
          uint64_t v12 = *(const void **)(DerivedStorage + 32);
          if (!v12)
          {
LABEL_9:
            CFDictionaryRef v13 = 0;
LABEL_20:
            uint64_t result = 0;
            *a4 = v13;
            return result;
          }
        }
        else
        {
          if (!CFEqual(a2, @"FBF_ClientBundleIdentifier")) {
            return 4294954512;
          }
          uint64_t v12 = *(const void **)(DerivedStorage + 208);
          if (!v12) {
            goto LABEL_9;
          }
        }
        goto LABEL_18;
      }
      CFTypeRef v21 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 289)) {
        CFTypeRef v21 = (const void **)MEMORY[0x1E4F1CFC8];
      }
    }
    uint64_t v12 = *v21;
    goto LABEL_18;
  }
  uint64_t v23 = 0;
  double valuePtr = 0.0;
  uint64_t v22 = 0;
  keys[0] = @"FBF_BandwidthSample";
  keys[1] = @"FBF_BandwidthMovingAverage";
  keys[2] = @"FBF_BandwidthStandardDeviation";
  uint64_t v16 = *(void *)(DerivedStorage + 224);
  if (!v16) {
    return 4294954513;
  }
  FigByteRateHistoryReportAverage(v16, &valuePtr, (double *)&v22);
  if (FigByteRateHistoryHasCompleteSample(*(void *)(DerivedStorage + 224))) {
    FigByteRateHistoryReportMovingAverage(*(void *)(DerivedStorage + 224), (double *)&v23);
  }
  if (valuePtr <= 0.0) {
    return 4294954513;
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  values[1] = CFNumberCreate(v17, kCFNumberDoubleType, &v23);
  values[2] = CFNumberCreate(v17, kCFNumberDoubleType, &v22);
  CFDictionaryRef v18 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v19 = 0;
  *a4 = v18;
  do
  {
    CFTypeRef v20 = values[v19];
    if (v20) {
      CFRelease(v20);
    }
    ++v19;
  }
  while (v19 != 3);
  return 0;
}

uint64_t FigByteFlumeCustomURLSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v12 = 4294954511;
LABEL_15:
    FigRetainProxyUnlockMutex();
    return v12;
  }
  if (!a2)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v6 = (const void *)DerivedStorage[7];
  if (!v6)
  {
    if (CFEqual(a2, @"FBF_BandwidthSampleCount"))
    {
      uint64_t v10 = (const void *)DerivedStorage[20];
      DerivedStorage[20] = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v10) {
        CFRelease(v10);
      }
      if (DerivedStorage[28])
      {
        int UInt64 = FigCFNumberGetUInt64();
        FigByteRateHistoryAllocSampleArray(DerivedStorage[28], UInt64);
      }
    }
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  CFTypeRef v7 = CFRetain(v6);
  FigRetainProxyUnlockMutex();
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFDictionaryRef v13 = *(uint64_t (**)(CFTypeRef, const void *, const void *))(v9 + 56);
  if (v13) {
    uint64_t v12 = v13(v7, a2, a3);
  }
  else {
    uint64_t v12 = 4294954514;
  }
  CFRelease(v7);
  return v12;
}

uint64_t figByteFlumeCancelCustomURLRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

void fbfcu_ReleaseReadRequest(void *a1)
{
  CFStringRef v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *((_DWORD *)a1 + 14) - 1;
  *((_DWORD *)a1 + 14) = v3;
  if (!v3)
  {
    free(a1);
  }
}

uint64_t FigByteFlumeCustomURLRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  uint64_t v8 = 4294954365;
  if (a3 && a5)
  {
    FigByteFlumeGetFigBaseObject(a1);
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      uint64_t v8 = 4294954511;
    }
    else
    {
      CFAllocatorRef v17 = malloc_type_calloc(1uLL, 0x68uLL, 0x10E0040628CCBB7uLL);
      if (v17)
      {
        CFDictionaryRef v18 = v17;
        void *v17 = a2;
        v17[1] = a3;
        v17[2] = 0;
        if (a6) {
          CFTypeRef v19 = CFRetain(a6);
        }
        else {
          CFTypeRef v19 = 0;
        }
        v18[5] = v19;
        v18[6] = a7;
        *((_DWORD *)v18 + 14) = 1;
        v18[4] = a5;
        if (!DerivedStorage[18]) {
          DerivedStorage[29] = FigGetUpTimeNanoseconds();
        }
        uint64_t v20 = fbfcu_AskForResponse(a1, *v18, v18[1], v18 + 8);
        if (v20)
        {
          uint64_t v8 = v20;
          fbfcu_ReleaseReadRequest(v18);
        }
        else
        {
          v18[11] = 0;
          CFTypeRef v21 = (void *)DerivedStorage[19];
          v18[12] = v21;
          *CFTypeRef v21 = v18;
          DerivedStorage[19] = v18 + 11;
          uint64_t v8 = 0;
          if (a8) {
            *a8 = v18[8];
          }
        }
      }
      else
      {
        uint64_t v8 = FigSignalErrorAt();
      }
    }
    FigRetainProxyUnlockMutex();
  }
  return v8;
}

uint64_t FigByteFlumeCustomURLCancel(uint64_t a1, uint64_t a2)
{
  FigByteFlumeGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_23:
    uint64_t v6 = v7;
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 144);
  if (!v4)
  {
LABEL_5:
    CFTypeRef v5 = 0;
    uint64_t v6 = 4294954362;
    goto LABEL_14;
  }
  while (*(void *)(v4 + 64) != a2)
  {
    uint64_t v4 = *(void *)(v4 + 88);
    if (!v4) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = figByteFlumeCancelCustomURLRequest(DerivedStorage, a2);
  if (v7) {
    goto LABEL_23;
  }
  if (!*(unsigned char *)(v4 + 80))
  {
    fbfcu_FinishRequest(DerivedStorage, v4, 0, 0, 0, 4294954364);
    uint64_t v6 = 0;
LABEL_11:
    CFTypeRef v5 = 0;
    uint64_t v4 = 0;
    goto LABEL_14;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 56);
  if (v8) {
    CFTypeRef v5 = CFRetain(v8);
  }
  else {
    CFTypeRef v5 = 0;
  }
  uint64_t v6 = 0;
  uint64_t v4 = *(void *)(v4 + 72);
LABEL_14:
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  if (v5)
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(CFTypeRef, uint64_t))(v10 + 16);
    if (v11) {
      v11(v5, v4);
    }
    CFRelease(v5);
  }
  return v6;
}

uint64_t FigByteFlumeCustomURLCopyIdentifier(uint64_t a1, CFDictionaryRef *a2)
{
  xpc_object_t value = 0;
  if (a1)
  {
    FigByteFlumeGetFigBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v5 = DerivedStorage;
      uint64_t v6 = *(void *)(DerivedStorage + 56);
      if (v6)
      {
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v12 = *(uint64_t (**)(uint64_t, CFDictionaryRef *))(v8 + 24);
        if (v12)
        {
          return v12(v6, a2);
        }
        return 4294954514;
      }
      int valuePtr = 1;
      if (a2)
      {
        *a2 = 0;
        if (*(_DWORD *)(DerivedStorage + 216) != 2) {
          return 4294954513;
        }
        if (*(void *)(DerivedStorage + 88))
        {
          uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(a1);
          uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v10) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = 0;
          }
          CFDictionaryRef v15 = *(uint64_t (**)(uint64_t, __CFString *, void, void **))(v11 + 48);
          if (!v15)
          {
            uint64_t v14 = 4294954514;
            goto LABEL_35;
          }
          CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          uint64_t v17 = v15(FigBaseObject, @"FBF_EntireLength", *MEMORY[0x1E4F1CF80], &value);
          if (v17)
          {
LABEL_42:
            uint64_t v14 = v17;
LABEL_35:
            if (value) {
              CFRelease(value);
            }
            return v14;
          }
          CFNumberRef v18 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
          if (v18)
          {
            CFNumberRef v19 = v18;
            CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (Mutable)
            {
              CFTypeRef v21 = Mutable;
              CFDictionarySetValue(Mutable, @"Version", v19);
              CFDictionarySetValue(v21, @"URL", *(const void **)(v5 + 88));
              CFDictionarySetValue(v21, @"Size", value);
              uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
              if (!*(unsigned char *)(v5 + 288)) {
                uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
              }
              CFDictionarySetValue(v21, @"no-cache", *v22);
              CFDictionaryRef v23 = *(const __CFDictionary **)(v5 + 120);
              if (v23)
              {
                CFTypeRef v24 = CFDictionaryGetValue(v23, @"Last-Modified");
                if (v24) {
                  CFDictionarySetValue(v21, @"Last-Modified", v24);
                }
                CFTypeRef v25 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 120), @"ETag");
                if (v25) {
                  CFDictionarySetValue(v21, @"ETag", v25);
                }
                CFTypeRef v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 120), @"ETag weak");
                if (v26) {
                  CFDictionarySetValue(v21, @"ETag weak", v26);
                }
              }
              *a2 = CFDictionaryCreateCopy(v16, v21);
              CFRelease(v21);
              uint64_t v14 = 0;
            }
            else
            {
              uint64_t v14 = FigSignalErrorAt();
            }
            CFRelease(v19);
            goto LABEL_35;
          }
        }
      }
    }
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_42;
  }

  return FigSignalErrorAt();
}

const void *FigByteFlumeCustomURLMatchesIdentifier(uint64_t a1, const void *a2)
{
  if (!a1 || (FigByteFlumeGetFigBaseObject(a1), (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage()) == 0))
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 56);
  if (v5)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, const void *))(v7 + 32);
    if (v14)
    {
      return (const void *)v14(v5, a2);
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 != CFDictionaryGetTypeID() || !*(unsigned char *)(v4 + 200)) {
    return 0;
  }
  uint64_t v9 = *(void *)(v4 + 192);
  CFStringRef v10 = *(const __CFString **)(v4 + 88);
  int v11 = *(_DWORD *)(v4 + 136);
  CFDictionaryRef v12 = *(const __CFDictionary **)(v4 + 120);

  return FigCFHTTPMatchCacheHeaders((const __CFDictionary *)a2, v9, v10, v11, v12);
}

uint64_t FigByteFlumeCustomURLOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      uint64_t v8 = 4294954511;
    }
    else if (*(_DWORD *)(DerivedStorage + 216) || !*(void *)(DerivedStorage + 48))
    {
      uint64_t v8 = FigSignalErrorAt();
    }
    else
    {
      *(void *)(DerivedStorage + 248) = a2;
      *(void *)(DerivedStorage + 256) = a3;
      *(_DWORD *)(DerivedStorage + 216) = 1;
      uint64_t v8 = fbfcu_AskForResponse(a1, 0, 2, (void *)(DerivedStorage + 272));
      if (v8)
      {
        *(void *)(DerivedStorage + 248) = 0;
        *(void *)(DerivedStorage + 256) = 0;
      }
    }
    FigRetainProxyUnlockMutex();
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fbfcu_AskForResponse(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v16 = 0;
  CFTypeRef v17 = 0;
  uint64_t Mutable = FigCustomURLRequestInfoCreateMutable();
  if (Mutable) {
    goto LABEL_19;
  }
  uint64_t Mutable = FigCustomURLRequestInfoSetHTTPHeaders();
  if (Mutable) {
    goto LABEL_19;
  }
  if (FigCustomURLRequestInfoCopyUserAgent())
  {
    if (!DerivedStorage[13])
    {
      CFTypeRef v7 = FigCFHTTPCreateUserAgent();
      DerivedStorage[13] = (uint64_t)v7;
      if (!v7)
      {
        uint64_t Mutable = FigSignalErrorAt();
        goto LABEL_19;
      }
    }
    uint64_t Mutable = FigCustomURLRequestInfoSetUserAgent();
    if (Mutable) {
      goto LABEL_19;
    }
  }
  uint64_t Mutable = FigCustomURLRequestInfoSetByteRange();
  if (Mutable)
  {
LABEL_19:
    uint64_t v14 = Mutable;
    goto LABEL_15;
  }
  uint64_t v8 = DerivedStorage[6];
  uint64_t v9 = *DerivedStorage;
  uint64_t v10 = DerivedStorage[16];
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFDictionaryRef v13 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, void, uint64_t *))(v12 + 24);
  if (v13)
  {
    uint64_t v14 = v13(v8, v17, v9, v10, fbfcu_customURLLoaderDataCallback, &v16);
    if (!v14) {
      *a4 = v16;
    }
  }
  else
  {
    uint64_t v14 = 4294954514;
  }
LABEL_15:
  if (v17) {
    CFRelease(v17);
  }
  return v14;
}

uint64_t fbfcu_customURLLoaderDataCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, __CFError *a6)
{
  statusCode[16] = *MEMORY[0x1E4F143B8];
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFRetain(Owner);
    if (*(_DWORD *)(DerivedStorage + 216) == 3)
    {
LABEL_121:
      CFRelease(Owner);
      goto LABEL_122;
    }
    if (*(void *)(DerivedStorage + 272) == a2)
    {
      uint64_t v12 = *(void (**)(void, void, CFIndex))(DerivedStorage + 248);
      CFTypeRef cf = 0;
      CFTypeRef v69 = 0;
      CFTypeRef v67 = 0;
      if (a6)
      {
        CFIndex Code = CFErrorGetCode(a6);
        if (Code)
        {
LABEL_6:
          CFTypeRef v14 = 0;
LABEL_100:
          *(void *)(DerivedStorage + 248) = 0;
          v12(*(void *)(DerivedStorage + 256), 0, Code);
LABEL_101:
          if (v14) {
            CFRelease(v14);
          }
LABEL_103:
          if (cf) {
            CFRelease(cf);
          }
          CFTypeRef v55 = v69;
          if (!v69) {
            goto LABEL_121;
          }
          goto LABEL_120;
        }
        uint64_t v24 = FigSignalErrorAt();
        if (v24) {
          goto LABEL_146;
        }
      }
      if (FigCustomURLResponseInfoCopyRedirectLocation())
      {
        if (*(unsigned char *)(DerivedStorage + 176))
        {
          CFIndex Code = 0;
LABEL_88:
          if (a4)
          {
            int64_t v52 = *(void *)(DerivedStorage + 264) + CMBlockBufferGetDataLength(a4);
            *(void *)(DerivedStorage + 264) = v52;
            if (v52 >= 3)
            {
              *(unsigned char *)(DerivedStorage + 200) = 0;
              CFIndex Code = 4294954357;
            }
          }
          if ((a5 & 3) != 0)
          {
            if (!*(void *)(DerivedStorage + 64))
            {
              CFDictionaryRef Value = *(const __CFDictionary **)(DerivedStorage + 240);
              if (Value) {
                CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"FBFCreateOption_HTTPRequestOptions");
              }
              CFMutableDictionaryRef OptionsFromHTTPRequestOptions = FigByteFlumeCreateNetworkPathEvaluatorCreateOptionsFromHTTPRequestOptions((uint64_t)Value);
              FigNetworkPathEvaluatorCreate(*MEMORY[0x1E4F1CF80], *(void *)(DerivedStorage + 80), OptionsFromHTTPRequestOptions, *(void *)(DerivedStorage + 128), *(void *)DerivedStorage, fbfcu_networkMonitorCallback, DerivedStorage + 64);
              if (OptionsFromHTTPRequestOptions) {
                CFRelease(OptionsFromHTTPRequestOptions);
              }
            }
            *(void *)(DerivedStorage + 272) = 0;
            *(_DWORD *)(DerivedStorage + 216) = 2;
            *(void *)(DerivedStorage + 248) = 0;
            v12(*(void *)(DerivedStorage + 256), 0, 0);
          }
          CFTypeRef v14 = 0;
          goto LABEL_99;
        }
        CFStringRef inUTI = 0;
        statusCode[0] = -1;
        CFTypeRef v25 = *(const void **)(DerivedStorage + 168);
        if (v25)
        {
          CFRelease(v25);
          *(void *)(DerivedStorage + 168) = 0;
        }
        if (FigCustomURLResponseInfoGetHTTPStatusCode() == -17360)
        {
          CFIndex v26 = 206;
          statusCode[0] = 206;
        }
        else
        {
          CFIndex v26 = statusCode[0];
        }
        CFHTTPMessageRef Response = CFHTTPMessageCreateResponse((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v26, 0, (CFStringRef)*MEMORY[0x1E4F18F90]);
        *(void *)(DerivedStorage + 168) = Response;
        if (Response)
        {
          CFDictionaryRef theDict = 0;
          FigCustomURLResponseInfoCopyHTTPHeaders();
        }
        if (*(unsigned char *)(DerivedStorage + 201))
        {
          CFDataRef v29 = *(const void **)(DerivedStorage + 280);
          if (v29)
          {
            CFRelease(v29);
            *(void *)(DerivedStorage + 280) = 0;
          }
          uint64_t v30 = FigCustomURLResponseInfoCopyFinalURL();
          if (v30)
          {
            CFIndex Code = v30;
            if (v30 != -17360) {
              goto LABEL_6;
            }
          }
        }
        if (FigCustomURLResponseInfoCopyUniversalTypeIdentifier())
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          statusCode[0] = 0;
          if (FigCustomURLResponseInfoCopyHTTPHeaders()) {
            goto LABEL_77;
          }
          uint64_t v50 = CFDictionaryGetValue((CFDictionaryRef)statusCode[0], @"Content-Type");
          if (v50) {
            uint64_t v50 = CFRetain(v50);
          }
          *(void *)(DerivedStorage + 184) = v50;
          CFStringRef v37 = (CFStringRef)statusCode[0];
          if (!statusCode[0]) {
            goto LABEL_77;
          }
        }
        else
        {
          *(void *)(DerivedStorage + 184) = UTTypeCopyPreferredTagWithClass(inUTI, (CFStringRef)*MEMORY[0x1E4F22500]);
          CFStringRef v37 = inUTI;
          if (!inUTI) {
            goto LABEL_77;
          }
        }
        CFRelease(v37);
LABEL_77:
        if (!FigCustomURLResponseInfoGetIsCachingDisabled()) {
          *(unsigned char *)(DerivedStorage + 288) = 0;
        }
        if (!FigCustomURLResponseInfoGetEntireLengthAvailableOnDemand()) {
          *(unsigned char *)(DerivedStorage + 289) = 0;
        }
        CFIndex Code = FigCustomURLResponseInfoGetResourceSize();
        if (Code == -17360)
        {
          *(unsigned char *)(DerivedStorage + 200) = 0;
          CFIndex Code = FigSignalErrorAt();
        }
        if (Code) {
          goto LABEL_6;
        }
        *(void *)(DerivedStorage + 192) = 0;
        *(unsigned char *)(DerivedStorage + 200) = 1;
        uint64_t v51 = *(__CFHTTPMessage **)(DerivedStorage + 168);
        if (v51) {
          CFIndex Code = FigCFHTTPCreateCacheHeaders(*(const __CFString **)(DerivedStorage + 88), 0, v51, 0, (CFDictionaryRef *)(DerivedStorage + 120));
        }
        else {
          CFIndex Code = 0;
        }
        *(unsigned char *)(DerivedStorage + 176) = 1;
        goto LABEL_88;
      }
      if (*(unsigned char *)(DerivedStorage + 201))
      {
        CFTypeRef v14 = 0;
        CFIndex Code = 4294954361;
        goto LABEL_100;
      }
      if (*(unsigned char *)(DerivedStorage + 176)) {
        goto LABEL_103;
      }
      *(unsigned char *)(DerivedStorage + 176) = 1;
      *(_DWORD *)(DerivedStorage + 216) = 2;
      uint64_t v24 = FigByteFlumeCreateWithHTTP(*MEMORY[0x1E4F1CF80], (const __CFURL *)cf, *(const void **)(DerivedStorage + 104), *(const void **)(DerivedStorage + 112), *(const void **)(DerivedStorage + 96), *(NSObject **)(DerivedStorage + 128), *(_DWORD *)(DerivedStorage + 136), *(const __CFDictionary **)(DerivedStorage + 240), (void *)(DerivedStorage + 56));
      if (v24)
      {
LABEL_146:
        CFIndex Code = v24;
        goto LABEL_6;
      }
      if (FigCustomURLResponseInfoCopyRedirectRequestHeaders())
      {
        CFTypeRef v14 = 0;
      }
      else
      {
        uint64_t v38 = fbfcu_copyAllowedHTTPHeaders((const __CFDictionary *)v69, (CFDictionaryRef *)&v67);
        CFTypeRef v14 = v67;
        if (v38) {
          goto LABEL_145;
        }
      }
      uint64_t v38 = FigByteFlumeSetAdditionalOpenRequestHeaders(*(void *)(DerivedStorage + 56), v14);
      if (!v38)
      {
        uint64_t v39 = *(void *)(DerivedStorage + 56);
        uint64_t v40 = *(void *)DerivedStorage;
        uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v41) {
          uint64_t v42 = v41;
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v43 = *(uint64_t (**)(uint64_t, void, uint64_t))(v42 + 40);
        if (!v43)
        {
          CFIndex Code = 4294954514;
          goto LABEL_100;
        }
        CFIndex Code = v43(v39, fbfcu_OpenCallback, v40);
LABEL_99:
        if (!Code) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
LABEL_145:
      CFIndex Code = v38;
      goto LABEL_100;
    }
    CFTypeRef v69 = 0;
    CFDictionaryRef theDict = 0;
    CFTypeRef v67 = 0;
    CFTypeRef cf = 0;
    CFStringRef inUTI = 0;
    uint64_t v15 = *(void *)(DerivedStorage + 144);
    if (!v15) {
      goto LABEL_115;
    }
    while (*(void *)(v15 + 64) != a2)
    {
      uint64_t v15 = *(void *)(v15 + 88);
      if (!v15) {
        goto LABEL_115;
      }
    }
    int v16 = a5 & 3;
    int v17 = *(unsigned __int8 *)(v15 + 24);
    if (!*(unsigned char *)(v15 + 24))
    {
      FigCustomURLResponseInfoCopyRedirectLocation();
      *(unsigned char *)(v15 + 25) = v67 != 0;
      *(unsigned char *)(v15 + 24) = 1;
    }
    CFNumberRef v18 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a6;
    if (a6) {
      CFRetain(a6);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (a6)
    {
      CFIndex v19 = CFErrorGetCode(a6);
      FigByteFlumePostHostUnavailableNotification(DerivedStorage);
      uint64_t v20 = DerivedStorage;
      uint64_t v21 = v15;
      uint64_t v22 = 0;
      uint64_t v23 = v19;
LABEL_19:
      fbfcu_FinishRequest(v20, v21, v22, 0, 0, v23);
      goto LABEL_115;
    }
    if (v67)
    {
      statusCode[0] = 0;
      if (!v17)
      {
        if (*(void *)(DerivedStorage + 56))
        {
          if (!FigCustomURLResponseInfoCopyHTTPHeaders())
          {
            if (FigCustomURLResponseInfoCopyRedirectRequestHeaders())
            {
              CFDictionaryRef v27 = 0;
LABEL_67:
              uint64_t v44 = *(void *)v15;
              uint64_t v45 = *(void *)(v15 + 8);
              uint64_t v46 = *(void *)(v15 + 48);
              CFStringRef v47 = (const __CFString *)CFRetain(*(CFTypeRef *)(DerivedStorage + 56));
              FigRetainProxyUnlockMutex();
              uint64_t v48 = FigCFHTTPResetURLAndRead(*(void *)(DerivedStorage + 56), v67, v27, v44, v45, (uint64_t)fbfcu_ReadCallback, *(const void **)DerivedStorage, v46, statusCode);
              FigRetainProxyLockMutex();
              if (!FigRetainProxyIsInvalidated())
              {
                uint64_t v49 = *(void *)(DerivedStorage + 144);
                if (v49)
                {
                  while (v46 != *(void *)(v49 + 48))
                  {
                    uint64_t v49 = *(void *)(v49 + 88);
                    if (!v49) {
                      goto LABEL_110;
                    }
                  }
                  *(void *)(v15 + 72) = statusCode[0];
                  if (v48) {
                    fbfcu_FinishRequest(DerivedStorage, v15, 0, 0, 0, v48);
                  }
                  else {
                    *(unsigned char *)(v15 + 80) = 1;
                  }
                }
              }
LABEL_110:
              if (theDict) {
                CFRelease(theDict);
              }
              if (v47)
              {
                CFStringRef v56 = v47;
LABEL_114:
                CFRelease(v56);
              }
LABEL_115:
              if (v69) {
                CFRelease(v69);
              }
              if (cf) {
                CFRelease(cf);
              }
              CFTypeRef v55 = v67;
              if (!v67) {
                goto LABEL_121;
              }
LABEL_120:
              CFRelease(v55);
              goto LABEL_121;
            }
            if (!fbfcu_copyAllowedHTTPHeaders((const __CFDictionary *)v69, (CFDictionaryRef *)&cf))
            {
              CFDictionaryRef v27 = (const __CFDictionary *)cf;
              goto LABEL_67;
            }
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      CFStringRef v47 = 0;
      goto LABEL_110;
    }
    if (*(unsigned char *)(v15 + 25)) {
      goto LABEL_115;
    }
    if (!a4)
    {
      if (v16)
      {
        uint64_t v22 = *(void *)(v15 + 16);
        uint64_t v20 = DerivedStorage;
        uint64_t v21 = v15;
        uint64_t v23 = 0;
        goto LABEL_19;
      }
      goto LABEL_115;
    }
    DataCC_LONG Length = CMBlockBufferGetDataLength(a4);
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v35 = (uint64_t *)(DerivedStorage + 224);
    uint64_t v34 = *(void *)(DerivedStorage + 224);
    if (!v34)
    {
      if (FigByteRateHistoryCreate((void *)(DerivedStorage + 224))) {
        goto LABEL_131;
      }
      int v36 = *(void *)(DerivedStorage + 160) ? FigCFNumberGetUInt64() : 64;
      if (FigByteRateHistoryAllocSampleArray(*v35, v36)) {
        goto LABEL_131;
      }
      uint64_t v34 = *v35;
    }
    statusCode[0] = UpTimeNanoseconds - *(void *)(DerivedStorage + 232);
    statusCode[1] = DataLength;
    FigByteRateHistoryAddToSample(v34, (uint64_t)statusCode);
    if (FigByteRateHistoryGetCurrentSampleDuration(*(void *)(DerivedStorage + 224)) >= 100000000) {
      FigByteRateHistoryNextSample((uint64_t *)*v35);
    }
    *(void *)(DerivedStorage + 232) = UpTimeNanoseconds;
LABEL_131:
    FigByteFlumePostHostAvailableNotification(DerivedStorage);
    size_t v59 = *(void *)(v15 + 8);
    uint64_t v58 = *(void *)(v15 + 16);
    if (v58 + DataLength <= v59)
    {
      uint64_t v62 = 0;
      BOOL v63 = v16 != 0;
    }
    else
    {
      CFAllocatorRef v60 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      DataCC_LONG Length = v59 - v58;
      if (v59 == v58) {
        uint64_t Empty = CMBlockBufferCreateEmpty(v60, 0, 0, (CMBlockBufferRef *)&inUTI);
      }
      else {
        uint64_t Empty = CMBlockBufferCreateWithBufferReference(v60, a4, 0, v59 - v58, 0, (CMBlockBufferRef *)&inUTI);
      }
      uint64_t v62 = Empty;
      BOOL v63 = 1;
      a4 = (OpaqueCMBlockBuffer *)inUTI;
    }
    ++*(_DWORD *)(v15 + 56);
    CFArrayRef v64 = *(const void **)(v15 + 40);
    if (v64) {
      CFRetain(v64);
    }
    if (v63)
    {
      uint64_t v65 = *(void *)(v15 + 16);
      *(void *)(v15 + 16) = v65 + DataLength;
      fbfcu_FinishRequest(DerivedStorage, v15, v65, (uint64_t)a4, 0, v62);
    }
    else
    {
      (*(void (**)(void, void, void, void, OpaqueCMBlockBuffer *, void, void))(v15 + 32))(*(void *)(v15 + 40), *(void *)(v15 + 48), *(void *)(v15 + 64), *(void *)(v15 + 16), a4, 0, 0);
      *(void *)(v15 + 16) += DataLength;
    }
    fbfcu_ReleaseReadRequest((void *)v15);
    CFStringRef v56 = inUTI;
    if (inUTI) {
      goto LABEL_114;
    }
    goto LABEL_115;
  }
LABEL_122:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t fbfcu_copyAllowedHTTPHeaders(const __CFDictionary *a1, CFDictionaryRef *a2)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = 0;
  keys[1] = 0;
  xpc_object_t value = 0;
  uint64_t v9 = 0;
  *a2 = 0;
  if (!CFDictionaryGetValueIfPresent(a1, @"Client-Daap-Validation", (const void **)&value))
  {
    if (!CFDictionaryGetValueIfPresent(a1, @"Client-Daap-Request-Id", (const void **)&value))
    {
      CFDictionaryRef v6 = 0;
      goto LABEL_8;
    }
    CFIndex v5 = 0;
    goto LABEL_6;
  }
  keys[0] = @"Client-Daap-Validation";
  int ValueIfPresent = CFDictionaryGetValueIfPresent(a1, @"Client-Daap-Request-Id", &v9);
  CFIndex v5 = 1;
  if (ValueIfPresent) {
LABEL_6:
  }
    keys[v5++] = @"Client-Daap-Request-Id";
  CFDictionaryRef v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&value, v5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v6)
  {
LABEL_8:
    uint64_t result = 0;
    *a2 = v6;
    return result;
  }
  return FigSignalErrorAt();
}

uint64_t fbfcu_OpenCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t Owner = FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[34] = 0;
    uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))DerivedStorage[31];
    uint64_t v7 = DerivedStorage[32];
    DerivedStorage[31] = 0;
    v8(v7, a2, a3);
  }
  FigRetainProxyUnlockMutex();

  return FigRetainProxyRelease();
}

void fbfcu_addHeader(CFStringRef headerField, CFStringRef value, CFHTTPMessageRef message)
{
}

uint64_t fbfcu_networkMonitorCallback(uint64_t a1, const void *a2)
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t Owner = FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(void *)(DerivedStorage + 24) && FigNetworkPathInformationIsHostReachable((uint64_t)a2, 0)) {
      FigByteFlumePostHostAvailableNotification(DerivedStorage);
    }
    CFIndex v5 = *(const void **)(DerivedStorage + 72);
    *(void *)(DerivedStorage + 72) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v5) {
      CFRelease(v5);
    }
  }

  return FigRetainProxyUnlockMutex();
}

void fbfcu_FinishRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v8 = *(void **)(a2 + 96);
  if (v7)
  {
    *(void *)(v7 + 96) = v8;
    uint64_t v8 = *(void **)(a2 + 96);
  }
  else
  {
    *(void *)(a1 + 152) = v8;
  }
  void *v8 = v7;
  (*(void (**)(void, void, void, uint64_t, uint64_t, void, uint64_t))(a2 + 32))(*(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 64), a3, a4, a5 | 1u, a6);

  fbfcu_ReleaseReadRequest((void *)a2);
}

uint64_t fbfcu_ReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t Owner = FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v15 = *(void *)(DerivedStorage + 144);
    if (v15)
    {
      while (*(void *)(v15 + 72) != a3)
      {
        uint64_t v15 = *(void *)(v15 + 88);
        if (!v15) {
          goto LABEL_11;
        }
      }
      if (a6 & 1 | a7)
      {
        fbfcu_FinishRequest(DerivedStorage, v15, a4, a5, a6, a7);
      }
      else
      {
        ++*(_DWORD *)(v15 + 56);
        int v16 = *(const void **)(v15 + 40);
        if (v16)
        {
          CFRetain(v16);
          int v16 = *(const void **)(v15 + 40);
        }
        (*(void (**)(const void *, uint64_t, void, uint64_t, uint64_t, uint64_t, void))(v15 + 32))(v16, a2, *(void *)(v15 + 64), a4, a5, a6, 0);
        fbfcu_ReleaseReadRequest((void *)v15);
      }
    }
  }
LABEL_11:
  FigRetainProxyUnlockMutex();

  return FigRetainProxyRelease();
}

uint64_t FigPhotoDecompressionTileIteratorReset()
{
  return MEMORY[0x1F410DA00]();
}

uint64_t FigPhotoDecompressionTileIteratorStepAndReportPosition()
{
  return MEMORY[0x1F410DA08]();
}

uint64_t FigPhotoDecompressionTileIteratorMoveToPosition()
{
  return MEMORY[0x1F410D9F8]();
}

uint64_t FigPhotoDecompressionTileIteratorGetTileSourceRect()
{
  return MEMORY[0x1F410D9E8]();
}

uint64_t FigPhotoDecompressionTileIteratorCopyTileSampleBuffer()
{
  return MEMORY[0x1F410D9C8]();
}

uint64_t FigPhotoDecompressionTileIteratorGetTileItemType()
{
  return MEMORY[0x1F410D9E0]();
}

uint64_t FigPhotoDecompressionTileIteratorDecodeTileAsyncF()
{
  return MEMORY[0x1F410D9D8]();
}

uint64_t FigPhotoDecompressionTileIteratorDecodeTileAsync()
{
  return MEMORY[0x1F410D9D0]();
}

uint64_t FigPhotoDecompressionTileIteratorCancelAsyncRequest()
{
  return MEMORY[0x1F410D9C0]();
}

uint64_t MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArray(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7, char *a8)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 20))
  {
    if (a2)
    {
      uint64_t v8 = a3;
      if (a3)
      {
        uint64_t v9 = a8;
        v75 = (CMTime *)(a1 + 24);
        if ((*(unsigned char *)(a1 + 36) & 1) == 0)
        {
          CFTypeRef v14 = (long long *)(a4 + 48);
          if ((*(_DWORD *)(a4 + 60) & 1) == 0) {
            CFTypeRef v14 = (long long *)(a4 + 24);
          }
          long long v15 = *v14;
          *(void *)(a1 + 40) = *((void *)v14 + 2);
          *(_OWORD *)&v75->xpc_object_t value = v15;
        }
        if (*(_DWORD *)(a1 + 12) == 1)
        {
          if (a3 <= 0x38E38E38E38E38ELL)
          {
            if (72 * a3)
            {
              int v16 = (char *)malloc_type_malloc(72 * a3, 0x5CC9CBA6uLL);
              if (v16)
              {
                int v17 = v16;
                CFAllocatorRef v60 = a6;
                uint64_t v62 = a7;
                uint64_t v58 = a5;
                uint64_t v18 = a2;
                if (a2 < 1)
                {
LABEL_19:
                  char v29 = 0;
                  uint64_t v30 = v58;
                  uint64_t v31 = v60;
                  uint64_t v32 = v18;
                  uint64_t v33 = v62;
LABEL_45:
                  uint64_t v34 = 0;
                  *uint64_t v9 = v29;
                  *uint64_t v30 = v32;
                  *uint64_t v31 = v8;
                  *uint64_t v33 = v17;
                  *(unsigned char *)(a1 + 16) = 1;
                  return v34;
                }
                uint64_t v19 = 0;
                uint64_t v20 = (_OWORD *)(a1 + 48);
                long long v77 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
                long long v79 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
                CMTimeEpoch v21 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
                long long v73 = *MEMORY[0x1E4F1FA70];
                long long v76 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
                long long v71 = *MEMORY[0x1E4F1F9F8];
                CMTimeEpoch v22 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                while (1)
                {
                  *(_OWORD *)&v92[16] = v79;
                  *(_OWORD *)&v93.xpc_object_t value = v77;
                  v93.CMTimeEpoch epoch = v21;
                  long long v91 = v73;
                  *(_OWORD *)CFTypeRef v92 = v76;
                  multiplier.xpc_object_t value = 0;
                  *(_OWORD *)&time2.xpc_object_t value = v71;
                  time2.CMTimeEpoch epoch = v22;
                  if ((*(unsigned char *)(a1 + 60) & 1) == 0)
                  {
                    CMTimeMake(&time, 0, *(_DWORD *)(a1 + 20));
                    *uint64_t v20 = *(_OWORD *)&time.value;
                    *(void *)(a1 + 64) = time.epoch;
                  }
                  uint64_t SampleTimingAtIndex = getSampleTimingAtIndex(v18, v19, v8, (long long *)a4, (uint64_t)&v91, &multiplier.value);
                  if (SampleTimingAtIndex) {
                    break;
                  }
                  if ((BYTE12(v91) & 1) == 0)
                  {
                    uint64_t SampleTimingAtIndex = FigSignalErrorAt();
                    break;
                  }
                  int32_t v24 = *(_DWORD *)(a1 + 20);
                  *(_OWORD *)&time.xpc_object_t value = v91;
                  time.CMTimeEpoch epoch = *(void *)v92;
                  CMTimeConvertScale(&time2, &time, v24, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                  *(_OWORD *)&time1.xpc_object_t value = *v20;
                  long long v25 = *(_OWORD *)&time1.value;
                  time1.CMTimeEpoch epoch = *(void *)(a1 + 64);
                  CMTimeEpoch epoch = time1.epoch;
                  CFDictionaryRef v27 = &v17[72 * v19];
                  CMTimeEpoch v28 = time2.epoch;
                  *(_OWORD *)CFDictionaryRef v27 = *(_OWORD *)&time2.value;
                  *((void *)v27 + 2) = v28;
                  *(_OWORD *)(v27 + 24) = v25;
                  *((void *)v27 + 5) = epoch;
                  *((_OWORD *)v27 + 3) = v25;
                  *((void *)v27 + 8) = epoch;
                  CMTime time = time2;
                  CMTimeMultiply(&rhs, &time, multiplier.value);
                  *(_OWORD *)&lhs.xpc_object_t value = *v20;
                  lhs.CMTimeEpoch epoch = *(void *)(a1 + 64);
                  CMTimeAdd(&time, &lhs, &rhs);
                  *uint64_t v20 = *(_OWORD *)&time.value;
                  *(void *)(a1 + 64) = time.epoch;
                  v19 += multiplier.value;
                  uint64_t v18 = a2;
                  if (v19 >= a2) {
                    goto LABEL_19;
                  }
                }
                uint64_t v34 = SampleTimingAtIndex;
                free(v17);
                uint64_t v30 = v58;
                uint64_t v31 = v60;
                uint64_t v33 = v62;
                if (!v34)
                {
                  char v29 = 0;
                  uint64_t v8 = 0;
                  int v17 = 0;
                  uint64_t v32 = a2;
                  goto LABEL_45;
                }
                return v34;
              }
            }
          }
          return 4294950936;
        }
        uint64_t v34 = 4294950936;
        if ((unint64_t)a2 > 0x38E38E38E38E38ELL || !(72 * a2)) {
          return v34;
        }
        uint64_t v35 = *(void *)(a1 + 104);
        uint64_t v55 = *(void *)(a1 + 96);
        int v36 = *(char **)(a1 + 112);
        CFStringRef v37 = (char *)malloc_type_malloc(72 * a2, 0x5CC9CBA6uLL);
        if (!v37) {
          return 4294950936;
        }
        uint64_t v38 = 0;
        uint64_t v39 = (CMTimeValue *)(a1 + 72);
        uint64_t v65 = v36;
        uint64_t v54 = v35;
        CFArrayRef v64 = (CMTime *)&v36[72 * v35 - 72];
        CFTypeRef v66 = (_OWORD *)(a1 + 192);
        long long v70 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
        long long v72 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
        CMTimeEpoch v69 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
        long long v67 = *MEMORY[0x1E4F1FA70];
        long long v68 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
        long long v40 = *MEMORY[0x1E4F1F9F8];
        CMTimeEpoch v41 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        uint64_t v57 = v37;
        uint64_t v42 = v37;
        uint64_t v43 = a2;
        long long v78 = *MEMORY[0x1E4F1F9F8];
        while (1)
        {
          *(_OWORD *)&v92[16] = v72;
          *(_OWORD *)&v93.xpc_object_t value = v70;
          v93.CMTimeEpoch epoch = v69;
          long long v91 = v67;
          *(_OWORD *)CFTypeRef v92 = v68;
          *(_OWORD *)&multiplier.xpc_object_t value = v40;
          multiplier.CMTimeEpoch epoch = v41;
          *(_OWORD *)&v84.xpc_object_t value = v40;
          v84.CMTimeEpoch epoch = v41;
          *(_OWORD *)&v83.xpc_object_t value = v40;
          v83.CMTimeEpoch epoch = v41;
          *(_OWORD *)&v82.xpc_object_t value = v40;
          v82.CMTimeEpoch epoch = v41;
          CMTimeValue v94 = *v39;
          CMTimeScale v95 = *(_DWORD *)(a1 + 80);
          CMTimeFlags v44 = *(_DWORD *)(a1 + 84);
          CMTimeEpoch v45 = *(void *)(a1 + 88);
          uint64_t v46 = getSampleTimingAtIndex(v43, v38, a3, (long long *)a4, (uint64_t)&v91, 0);
          if (v46)
          {
LABEL_48:
            uint64_t v34 = v46;
            free(v57);
            return v34;
          }
          if (v44) {
            break;
          }
          CMTimeMake(&multiplier, 0, *(_DWORD *)(a1 + 20));
          uint64_t v43 = a2;
LABEL_41:
          CMTime lhs = multiplier;
          CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          CMTime time2 = *(CMTime *)&v92[8];
          CMTime time = v93;
          if (CMTimeCompare(&time2, &time))
          {
            memset(&time2, 0, sizeof(time2));
            CMTime time = *(CMTime *)&v92[8];
            CMTime rhs = *v75;
            CMTimeSubtract(&time2, &time, &rhs);
            CMTime time = time2;
            CMTime rhs = lhs;
            CMTimeSubtract(&time1, &time, &rhs);
          }
          int32_t v48 = *(_DWORD *)(a1 + 20);
          CMTime time2 = time1;
          CMTimeConvertScale(&v82, &time2, v48, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          CMTime time1 = multiplier;
          CMTime time2 = v82;
          CMTimeAdd(&v84, &time1, &time2);
          long long v40 = v78;
          *(_OWORD *)uint64_t v42 = v78;
          *((void *)v42 + 2) = v41;
          CMTimeEpoch v49 = v84.epoch;
          *(_OWORD *)(v42 + 24) = *(_OWORD *)&v84.value;
          *((void *)v42 + 5) = v49;
          long long v50 = *(_OWORD *)&multiplier.value;
          *((void *)v42 + 8) = multiplier.epoch;
          *((_OWORD *)v42 + 3) = v50;
          long long v51 = *(_OWORD *)&v93.value;
          *(_OWORD *)(a1 + 152) = *(_OWORD *)&v92[16];
          *(_OWORD *)(a1 + 168) = v51;
          *(void *)(a1 + 184) = v93.epoch;
          long long v52 = *(_OWORD *)v92;
          *(_OWORD *)(a1 + 120) = v91;
          *(_OWORD *)(a1 + 136) = v52;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)&multiplier.value;
          *(void *)(a1 + 88) = multiplier.epoch;
          ++v38;
          v42 += 72;
          if (v43 == v38)
          {
            *(void *)(a1 + 96) = v43;
            *(void *)(a1 + 104) = v43;
            char v29 = 1;
            uint64_t v8 = v54;
            uint64_t v32 = v55;
            uint64_t v9 = a8;
            *(void *)(a1 + 112) = v57;
            uint64_t v31 = a6;
            uint64_t v33 = a7;
            uint64_t v30 = a5;
            int v17 = v65;
            goto LABEL_45;
          }
        }
        *(_OWORD *)&time1.xpc_object_t value = v78;
        time1.CMTimeEpoch epoch = v41;
        *(_OWORD *)&time2.xpc_object_t value = v78;
        time2.CMTimeEpoch epoch = v41;
        *(_OWORD *)&time.xpc_object_t value = v78;
        time.CMTimeEpoch epoch = v41;
        CMTime rhs = v93;
        CMTime lhs = *v75;
        CMTimeSubtract(&time1, &rhs, &lhs);
        rhs.xpc_object_t value = v94;
        rhs.timescale = v95;
        rhs.flags = v44;
        rhs.CMTimeEpoch epoch = v45;
        CMTime lhs = time1;
        if (CMTimeCompare(&rhs, &lhs) < 0)
        {
          CMTime rhs = time1;
          lhs.xpc_object_t value = v94;
          lhs.timescale = v95;
          lhs.flags = v44;
          lhs.CMTimeEpoch epoch = v45;
          CMTimeSubtract(&time2, &rhs, &lhs);
          int32_t v47 = *(_DWORD *)(a1 + 20);
          CMTime rhs = time2;
          CMTimeConvertScale(&time, &rhs, v47, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          CMTime lhs = time;
          if (!CMTimeCompare(&rhs, &lhs))
          {
            CMTimeMake(&rhs, 1, *(_DWORD *)(a1 + 20));
            CMTime time = rhs;
          }
        }
        else
        {
          CMTime rhs = *(CMTime *)(a1 + 168);
          CMTime lhs = v93;
          if ((CMTimeCompare(&rhs, &lhs) & 0x80000000) == 0)
          {
            uint64_t v46 = FigSignalErrorAt();
            if (v46) {
              goto LABEL_48;
            }
            if (v38) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }
          CMTimeMake(&time, 1, *(_DWORD *)(a1 + 20));
        }
        CMTime v83 = time;
        if (v38)
        {
LABEL_31:
          *((CMTime *)v42 - 3) = v83;
          uint64_t v43 = a2;
LABEL_40:
          time2.xpc_object_t value = v94;
          time2.timescale = v95;
          time2.flags = v44;
          time2.CMTimeEpoch epoch = v45;
          CMTime time = v83;
          CMTimeAdd(&time1, &time2, &time);
          CMTime multiplier = time1;
          *CFTypeRef v66 = *(_OWORD *)&v83.value;
          *(void *)(a1 + 208) = v83.epoch;
          goto LABEL_41;
        }
LABEL_36:
        uint64_t v43 = a2;
        if (v65)
        {
          *CFArrayRef v64 = v83;
        }
        else
        {
          *(_OWORD *)&time1.xpc_object_t value = *v66;
          time1.CMTimeEpoch epoch = *(void *)(a1 + 208);
          CMTime time2 = v83;
          if (CMTimeCompare(&time1, &time2))
          {
            *(_OWORD *)&v83.xpc_object_t value = *v66;
            v83.CMTimeEpoch epoch = *(void *)(a1 + 208);
          }
        }
        goto LABEL_40;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArrayWithDefaultLastSampleDuration(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v8 = *(void *)(a1 + 104);
  if (!v8)
  {
    uint64_t v12 = 0;
LABEL_13:
    *a2 = *(void *)(a1 + 96);
    *a3 = *(void *)(a1 + 104);
    *a4 = v12;
    return 0;
  }
  size_t v9 = 72 * v8;
  if (v8 <= 0x38E38E38E38E38ELL && v9 != 0)
  {
    CFDictionaryRef v13 = (char *)malloc_type_malloc(v9, 0x5CC9CBA6uLL);
    if (v13)
    {
      uint64_t v12 = v13;
      memcpy(v13, *(const void **)(a1 + 112), 72 * *(void *)(a1 + 104));
      CFTypeRef v14 = &v12[72 * *(void *)(a1 + 104)];
      MediaSampleTimingGeneratorGetDefaultLastSampleDuration((CMTime *)a1, &v16);
      long long v15 = *(_OWORD *)&v16.value;
      *((void *)v14 - 7) = v16.epoch;
      *(_OWORD *)(v14 - 72) = v15;
      goto LABEL_13;
    }
  }

  return FigSignalErrorAt();
}

CMTime *MediaSampleTimingGeneratorGetDefaultLastSampleDuration@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a2->xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  a2->CMTimeEpoch epoch = *(void *)(v3 + 16);
  if (result->flags == 2)
  {
    uint64_t v4 = result;
    if (result[6].flags)
    {
      if ((result[5].flags & 1) != 0
        && (CFIndex v5 = result + 5,
            CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
            CMTime v8 = result[5],
            CMTimeCompare(&time1, &v8)))
      {
        *(_OWORD *)&a2->xpc_object_t value = *(_OWORD *)&v5->value;
        CMTimeEpoch epoch = v4[5].epoch;
      }
      else if (v4[8].flags)
      {
        *(_OWORD *)&a2->xpc_object_t value = *(_OWORD *)&v4[8].value;
        CMTimeEpoch epoch = v4[8].epoch;
      }
      else
      {
        memset(&time1, 0, sizeof(time1));
        CMTimeMake(&time1, 1, 15);
        *(_OWORD *)&a2->xpc_object_t value = *(_OWORD *)&time1.value;
        CMTimeEpoch epoch = time1.epoch;
      }
      a2->CMTimeEpoch epoch = epoch;
      int32_t epoch_high = HIDWORD(v4->epoch);
      *(_OWORD *)&time1.xpc_object_t value = *(_OWORD *)&a2->value;
      time1.CMTimeEpoch epoch = epoch;
      return CMTimeConvertScale(a2, &time1, epoch_high, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    }
  }
  return result;
}

uint64_t MediaSampleTimingGeneratorCreateLastMediaSampleTimingInfoArray(uint64_t a1, long long *a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = *(void *)(a1 + 112);
  if (v10 && (*((unsigned char *)a2 + 12) & 1) != 0)
  {
    int32_t v11 = *(_DWORD *)(a1 + 20);
    CMTime v16 = *(CMTime *)a2;
    CMTimeConvertScale(&time1, &v16, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *(CMTime *)a2 = time1;
    CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTime v16 = *(CMTime *)a2;
    if (!CMTimeCompare(&time1, &v16))
    {
      CMTimeMake(&time1, 1, *(_DWORD *)(a1 + 20));
      *(CMTime *)a2 = time1;
    }
    uint64_t v12 = *(void *)(a1 + 112) + 72 * *(void *)(a1 + 104);
    long long v13 = *a2;
    *(void *)(v12 - 56) = *((void *)a2 + 2);
    *(_OWORD *)(v12 - 72) = v13;
    uint64_t v10 = *(void *)(a1 + 112);
  }
  *a3 = *(void *)(a1 + 96);
  *a4 = *(void *)(a1 + 104);
  *a5 = v10;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  long long v14 = *a2;
  *(void *)(a1 + 208) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 192) = v14;
  return 0;
}

uint64_t MediaSampleTimingGeneratorCreate(const __CFAllocator *a1, int a2, int a3, void *a4)
{
  if ((a3 - 3) < 0xFFFFFFFE) {
    return 4294950935;
  }
  CMTime v8 = CFAllocatorAllocate(a1, 216, 0);
  if (!v8) {
    return 4294950936;
  }
  size_t v9 = v8;
  v8[26] = 0;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)CMTime v8 = 0u;
  if (a1) {
    CFTypeRef v10 = CFRetain(a1);
  }
  else {
    CFTypeRef v10 = 0;
  }
  uint64_t result = 0;
  *size_t v9 = v10;
  *((_DWORD *)v9 + 2) = a2;
  *((_DWORD *)v9 + 3) = a3;
  *a4 = v9;
  return result;
}

void MediaSampleTimingGeneratorRelease(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *(const __CFAllocator **)a1;
    free(*((void **)a1 + 14));
    CFAllocatorDeallocate(v2, a1);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

uint64_t MediaSampleTimingGeneratorSetMediaTimeScale(uint64_t a1, int a2)
{
  if (!a2 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 20) = a2;
  return 0;
}

uint64_t MediaSampleTimingGeneratorGetMediaTimeScale(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void MediaSampleTimingGeneratorReset(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4F1F9F8];
  long long v3 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 24) = *MEMORY[0x1E4F1F9F8];
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = v3;
  *(void *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v4;
  free(*(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0;
}

uint64_t getSampleTimingAtIndex(uint64_t a1, uint64_t multiplier, uint64_t a3, long long *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a3 != 1)
  {
    uint64_t v12 = (long long *)((char *)a4 + 72 * multiplier);
    long long v26 = *v12;
    CMTimeValue v13 = *((void *)v12 + 3);
    uint64_t v27 = *((void *)v12 + 2);
    CMTimeValue value = v13;
    CMTimeFlags flags = *((_DWORD *)v12 + 9);
    CMTimeScale timescale = *((_DWORD *)v12 + 8);
    CMTimeEpoch epoch = *((void *)v12 + 5);
    lhs.CMTimeValue value = *((void *)v12 + 6);
    CMTimeFlags v16 = *((_DWORD *)v12 + 15);
    lhs.CMTimeScale timescale = *((_DWORD *)v12 + 14);
    CMTimeEpoch v17 = *((void *)v12 + 8);
    uint64_t v18 = 1;
    if (v16) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (multiplier)
  {
    if ((*((unsigned char *)a4 + 12) & 1) == 0) {
      return (__int16)FigSignalErrorAt();
    }
    long long v26 = *a4;
    uint64_t v27 = *((void *)a4 + 2);
    CMTime time = *(CMTime *)a4;
    CMTimeMultiply(&v25, &time, multiplier);
    CMTime lhs = *(CMTime *)((unsigned char *)a4 + 1);
    CMTime v23 = v25;
    CMTimeAdd(&time, &lhs, &v23);
    CMTimeFlags flags = time.flags;
    CMTimeScale timescale = time.timescale;
    CMTimeEpoch epoch = time.epoch;
    CMTime lhs = *(CMTime *)((unsigned char *)a4 + 2);
    CMTimeValue value = time.value;
    CMTime v23 = v25;
    CMTimeAdd(&time, &lhs, &v23);
    lhs.CMTimeValue value = time.value;
    CMTimeFlags v16 = time.flags;
    lhs.CMTimeScale timescale = time.timescale;
    CMTimeEpoch v17 = time.epoch;
  }
  else
  {
    CMTimeValue v22 = *((void *)a4 + 3);
    uint64_t v27 = *((void *)a4 + 2);
    CMTimeValue value = v22;
    CMTimeFlags flags = *((_DWORD *)a4 + 9);
    CMTimeScale timescale = *((_DWORD *)a4 + 8);
    CMTimeEpoch epoch = *((void *)a4 + 5);
    lhs.CMTimeValue value = *((void *)a4 + 6);
    CMTimeFlags v16 = *((_DWORD *)a4 + 15);
    lhs.CMTimeScale timescale = *((_DWORD *)a4 + 14);
    long long v26 = *a4;
    CMTimeEpoch v17 = *((void *)a4 + 8);
  }
  uint64_t v18 = a1 - multiplier;
  if ((v16 & 1) == 0)
  {
LABEL_6:
    lhs.CMTimeValue value = value;
    lhs.CMTimeScale timescale = timescale;
    CMTimeFlags v16 = flags;
    CMTimeEpoch v17 = epoch;
  }
LABEL_7:
  *(_OWORD *)a5 = v26;
  CMTimeValue v19 = value;
  *(void *)(a5 + 16) = v27;
  *(void *)(a5 + 24) = v19;
  *(_DWORD *)(a5 + 32) = timescale;
  *(_DWORD *)(a5 + 36) = flags;
  CMTimeValue v20 = lhs.value;
  *(void *)(a5 + 40) = epoch;
  *(void *)(a5 + 48) = v20;
  *(_DWORD *)(a5 + 56) = lhs.timescale;
  *(_DWORD *)(a5 + 60) = v16;
  *(void *)(a5 + 64) = v17;
  __int16 v11 = 0;
  if (a6) {
    *a6 = v18;
  }
  return v11;
}

void setCuePositionDo(double *a1)
{
  uint64_t v2 = *(void *)a1;
  CFAttributedStringRef v3 = *(const __CFAttributedString **)(*(void *)a1 + 56);
  if (v3)
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    CGSize v10 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
    CGPoint v11 = (CGPoint)*MEMORY[0x1E4F1DB28];
    rect.origin = (CGPoint)*MEMORY[0x1E4F1DB28];
    rect.CGSize size = v10;
    CFDictionaryRef Attribute = (const __CFDictionary *)CFAttributedStringGetAttribute(v3, 0, @"kFigSubtitleRenderer_SuggestLayout", &effectiveRange);
    if (Attribute) {
      CGRectMakeWithDictionaryRepresentation(Attribute, &rect);
    }
    v12.origin = v11;
    v12.CGSize size = v10;
    CFDictionaryRef v5 = (const __CFDictionary *)CFAttributedStringGetAttribute(*(CFAttributedStringRef *)(v2 + 56), 0, @"kFigSubtitleRenderer_SuggestTextLayout", &effectiveRange);
    if (v5) {
      CGRectMakeWithDictionaryRepresentation(v5, &v12);
    }
    v17.size.width = rect.size.width;
    v17.size.height = rect.size.height;
    v17.origin.y = a1[2] - rect.size.height * 0.5;
    rect.origin.x = a1[1] - rect.size.width * 0.5;
    v17.origin.x = rect.origin.x;
    rect.origin.y = v17.origin.y;
    CGRect rect = CGRectIntegral(v17);
    v18.size.width = v12.size.width;
    v18.size.height = v12.size.height;
    v18.origin.y = a1[2] - v12.size.height * 0.5;
    v12.origin.x = a1[1] - v12.size.width * 0.5;
    v18.origin.x = v12.origin.x;
    v12.origin.y = v18.origin.y;
    CGRect v12 = CGRectIntegral(v18);
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(rect);
    if (DictionaryRepresentation)
    {
      CFDictionaryRef v7 = DictionaryRepresentation;
      v15.length = CFAttributedStringGetLength(*(CFAttributedStringRef *)(v2 + 56));
      v15.location = 0;
      CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(v2 + 56), v15, @"kFigSubtitleRenderer_SuggestLayout", v7);
      CFRelease(v7);
    }
    CFDictionaryRef v8 = CGRectCreateDictionaryRepresentation(v12);
    if (v8)
    {
      CFDictionaryRef v9 = v8;
      v16.length = CFAttributedStringGetLength(*(CFAttributedStringRef *)(v2 + 56));
      v16.location = 0;
      CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(v2 + 56), v16, @"kFigSubtitleRenderer_SuggestTextLayout", v9);
      CFRelease(v9);
    }
  }
}

CGFloat getSuggestedBoundsDo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8))
  {
    if (*(void *)(v2 + 56))
    {
      CFAttributedStringRef v3 = (_OWORD *)a1[2];
      CGSize v4 = *(CGSize *)(v2 + 40);
      CFRange effectiveRange = *(CFRange *)(v2 + 24);
      CGSize v34 = v4;
      long long v5 = *MEMORY[0x1E4F1DAB8];
      long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      CGSize v35 = v4;
      long long v36 = v5;
      long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      long long v37 = v6;
      long long v38 = v7;
      int v8 = [*(id *)v2 contentsAreFlipped];
      SubtitleSampleFromAttributedString = FigSubtitleRendererCreateSubtitleSampleFromAttributedString(*(const void **)(v2 + 56));
      if (SubtitleSampleFromAttributedString)
      {
        CGPoint v11 = SubtitleSampleFromAttributedString;
        CFTypeRef cf = 0;
        long long v12 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
        long long v30 = *MEMORY[0x1E4F1DB28];
        long long v31 = v12;
        uint64_t v13 = *(void *)(v2 + 16);
        CGSize v23 = v35;
        long long v24 = v36;
        long long v25 = v37;
        long long v26 = v38;
        v22.origin = (CGPoint)effectiveRange;
        v22.CGSize size = v34;
        int v27 = 0;
        unint64_t v28 = 0xBFF0000000000000;
        int v29 = v8;
        FigSubtitleRendererLayout(v13, (uint64_t)v11, &v22, (uint64_t)&v30, (uint64_t)&cf);
        CFRelease(v11);
        long long v14 = v31;
        *CFAttributedStringRef v3 = v30;
        v3[1] = v14;
        AttributedStringFromSubtitleSample = FigSubtitleRendererGetAttributedStringFromSubtitleSample((const __CFDictionary *)cf);
        CFRange v16 = *(const void **)(v2 + 56);
        *(void *)(v2 + 56) = AttributedStringFromSubtitleSample;
        if (AttributedStringFromSubtitleSample) {
          CFRetain(AttributedStringFromSubtitleSample);
        }
        if (v16) {
          CFRelease(v16);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  else
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    CGSize v17 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
    v22.origin = (CGPoint)*MEMORY[0x1E4F1DB28];
    v22.CGSize size = v17;
    CFAttributedStringRef v18 = *(const __CFAttributedString **)(v2 + 56);
    if (v18)
    {
      CFDictionaryRef Attribute = (const __CFDictionary *)CFAttributedStringGetAttribute(v18, 0, @"kFigSubtitleRenderer_SuggestLayout", &effectiveRange);
      if (Attribute) {
        CGRectMakeWithDictionaryRepresentation(Attribute, &v22);
      }
    }
    uint64_t v20 = a1[2];
    CGFloat result = v22.origin.x;
    CGSize size = v22.size;
    *(CGPoint *)uint64_t v20 = v22.origin;
    *(CGSize *)(v20 + 16) = size;
  }
  return result;
}

CFAttributedStringRef getContentIDDo_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  v4.location = 0;
  v4.length = 0;
  CFAttributedStringRef result = *(const __CFAttributedString **)(v2 + 56);
  if (result) {
    CFAttributedStringRef result = (const __CFAttributedString *)CFAttributedStringGetAttribute(result, 0, (CFStringRef)*MEMORY[0x1E4F1F6F0], &v4);
  }
  *(void *)a1[1] = result;
  return result;
}

void setContentDo_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (const void *)a1[1];
  CFAttributedStringRef v3 = *(const void **)(v2 + 56);
  *(void *)(v2 + 56) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3) {
    CFRelease(v3);
  }
  *(unsigned char *)(v2 + 64) = 1;
}

void setRendererDo_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (const void *)a1[1];
  CFAttributedStringRef v3 = *(const void **)(v2 + 16);
  *(void *)(v2 + 16) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

__n128 setViewportDo_0(uint64_t *a1)
{
  result.n128_u64[0] = a1[3];
  if (result.n128_f64[0] >= 0.0)
  {
    result.n128_u64[0] = a1[4];
    if (result.n128_f64[0] >= 0.0)
    {
      uint64_t v2 = *a1;
      __n128 result = *(__n128 *)(a1 + 1);
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 3);
      *(__n128 *)(v2 + 24) = result;
    }
  }
  return result;
}

void setDefaultFontSizeDo(void *a1)
{
  CFAttributedStringRef v1 = *(const __CFAttributedString **)(*a1 + 56);
  if (v1)
  {
    uint64_t valuePtr = a1[1];
    CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &valuePtr);
    if (v2)
    {
      CFNumberRef v3 = v2;
      v5.length = CFAttributedStringGetLength(v1);
      v5.location = 0;
      CFAttributedStringSetAttribute(v1, v5, (CFStringRef)*MEMORY[0x1E4F21E90], v3);
      CFRelease(v3);
    }
  }
}

void sub_194503C04(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t FAIRPLAY_CALL_LOG(uint64_t a1)
{
  if (FAIRPLAY_CALL_LOG_sInitOnce != -1) {
    dispatch_once_f(&FAIRPLAY_CALL_LOG_sInitOnce, &FAIRPLAY_CALL_LOG_sLoggingPolicy, (dispatch_function_t)FAIRPLAY_CALL_LOG_INIT_ONCE);
  }
  return a1;
}

void FAIRPLAY_CALL_LOG_INIT_ONCE(BOOL *a1)
{
  CFNumberRef v2 = (const void *)MGCopyAnswer();
  *a1 = v2 != (const void *)*MEMORY[0x1E4F1CFD0];
  a1[1] = 1;
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigTTMLStylingCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (!v8)
      {
        uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v8)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            uint64_t v11 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLStyling_ConsumeChildNode, (uint64_t *)a3);
            if (!v11) {
              *a4 = 0;
            }
            return v11;
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLStyling_ConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v13 = 0;
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1) {
    goto LABEL_8;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v13, (CFStringRef *)&cf);
  if (v8) {
    goto LABEL_18;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    CFAllocatorRef v9 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLStyleCreate((uint64_t)v9, a1, (uint64_t)a2, &value);
    if (!v8)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
      goto LABEL_9;
    }
  }
  else
  {
LABEL_8:
    uint64_t v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!v8)
    {
LABEL_9:
      uint64_t v10 = 0;
      if (a3)
      {
        *a3 = value;
        CMTimeValue value = 0;
      }
      goto LABEL_11;
    }
  }
LABEL_18:
  uint64_t v10 = v8;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
LABEL_13:
  if (v13) {
    CFRelease(v13);
  }
  if (value) {
    CFRelease(value);
  }
  return v10;
}

void figTTMLStyling_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLStyling_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"styling: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLStyling_CopyChildNodeArray(const void *a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    CFAllocatorRef v6 = CFGetAllocator(a1);
    *a2 = CFArrayCreateCopy(v6, *(CFArrayRef *)(v5 + 136));
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLStyling_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 12;
  return 0;
}

uint64_t FigCDSActionProtocolGetProtocolID()
{
  return sFigCDSActionProtocolID;
}

uint64_t RegisterFigCDSActionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSActionProtocolDesc, 0, &sFigCDSActionProtocolID);
}

uint64_t FigCDSMoveToActionProtocolGetProtocolID()
{
  return sFigCDSMoveToActionProtocolID;
}

uint64_t RegisterFigCDSMoveToActionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSMoveToActionProtocolDesc, 0, &sFigCDSMoveToActionProtocolID);
}

uint64_t FigAlternateNSPredicateFilterCreate(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  [v6 setObject:a2 atIndexedSubscript:0];
  v9[0] = xmmword_1EE516890;
  v9[1] = *(_OWORD *)&off_1EE5168A0;
  uint64_t v10 = off_1EE5168B0;
  uint64_t v7 = FigSimpleAlternateFilterCreate(a1, @"ClientPredicatesFilter", 872, v9, v6, a3);

  return v7;
}

uint64_t clientPredicatesFilter_filter(uint64_t a1, void *a2)
{
  CFNumberRef v3 = (void *)[a2 objectAtIndexedSubscript:0];
  CFRange v4 = [[FigAlternateObjC alloc] initWithFigAlternate:a1];
  uint64_t v5 = [v3 evaluateWithObject:v4];

  return v5;
}

uint64_t clientPredicatesFilter_allEqualMinSortingFn()
{
  return 0;
}

CFStringRef clientPredicatesFilter_copyDescAddendum(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 objectAtIndexedSubscript:0];
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"predicate: %@", v2);
}

uint64_t FigAlternateMultipleNSPredicateFilterCreate(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  uint64_t inserted = FigAlternateFilterTreeCreate(a1, &v19);
  if (!inserted)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v7 = [a2 countByEnumeratingWithState:&v14 objects:v20 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v15;
      int v10 = 0x7FFFFFFF;
LABEL_4:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(a2);
        }
        uint64_t inserted = FigAlternateNSPredicateFilterCreate(a1, *(void *)(*((void *)&v14 + 1) + 8 * v11), &cf);
        if (inserted) {
          break;
        }
        uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v19, cf, v10);
        if (inserted) {
          break;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        ++v11;
        --v10;
        if (v8 == v11)
        {
          uint64_t v8 = [a2 countByEnumeratingWithState:&v14 objects:v20 count:16];
          if (v8) {
            goto LABEL_4;
          }
          goto LABEL_13;
        }
      }
    }
    else
    {
LABEL_13:
      uint64_t inserted = FigAlternateFilterTreeCreateFilter(v19, @"MultipleNSPredicateTreeFilter", 872, a3);
    }
  }
  uint64_t v12 = inserted;
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v12;
}

uint64_t FigAlternateMinimumOrMaximumInKeyPathFilterCreate(uint64_t a1, const void *a2, int a3, void *a4)
{
  CFRange v4 = faf_lowestInKeyPathComparatorFn;
  long long v6 = 0uLL;
  if (!a3) {
    CFRange v4 = faf_highestInKeyPathComparatorFn;
  }
  uint64_t v7 = 0;
  uint64_t v8 = v4;
  uint64_t v9 = 0;
  return FigSimpleAlternateFilterCreate(a1, @"MinOrMaxInKeyPathFilter", 595, &v6, a2, a4);
}

uint64_t faf_lowestInKeyPathComparatorFn(uint64_t a1, uint64_t a2, void *a3)
{
  return -faf_highestInKeyPathComparatorFn(a1, a2, a3);
}

uint64_t faf_highestInKeyPathComparatorFn(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = [[FigAlternateObjC alloc] initWithFigAlternate:a1];
  long long v6 = [[FigAlternateObjC alloc] initWithFigAlternate:a2];
  int v7 = [a3 containsString:@"presentationSize"];
  uint64_t v8 = (void *)[(FigAlternateObjC *)v5 valueForKeyPath:a3];
  if (v7)
  {
    [v8 sizeValue];
    double v10 = v9;
    objc_msgSend((id)-[FigAlternateObjC valueForKeyPath:](v6, "valueForKeyPath:", a3), "sizeValue");
  }
  else
  {
    [v8 doubleValue];
    double v10 = v12;
    objc_msgSend((id)-[FigAlternateObjC valueForKeyPath:](v6, "valueForKeyPath:", a3), "doubleValue");
  }
  return (__PAIR128__(v10 < v11, *(unint64_t *)&v11) - *(unint64_t *)&v10) >> 64;
}

uint64_t FigAlternateMultipleAlternateQualifierFilterCreate(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v23 = 0;
  uint64_t inserted = FigAlternateFilterTreeCreate(a1, &v23);
  if (!inserted)
  {
    long long v17 = a3;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v7 = [a2 countByEnumeratingWithState:&v18 objects:v28 count:16];
    if (!v7) {
      goto LABEL_20;
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v19;
    int v10 = 0x7FFFFFFF;
    while (1)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(a2);
        }
        double v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t inserted = FigAlternateNSPredicateFilterCreate(a1, [v12 _predicate], &cf);
          if (inserted) {
            goto LABEL_21;
          }
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            CFTypeRef v13 = (const void *)[v12 _keyPath];
            long long v24 = 0uLL;
            uint64_t v25 = 0;
            long long v14 = faf_lowestInKeyPathComparatorFn;
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_15;
            }
            CFTypeRef v13 = (const void *)[v12 _keyPath];
            long long v24 = 0uLL;
            uint64_t v25 = 0;
            long long v14 = faf_highestInKeyPathComparatorFn;
          }
          long long v26 = v14;
          uint64_t v27 = 0;
          uint64_t inserted = FigSimpleAlternateFilterCreate(a1, @"MinOrMaxInKeyPathFilter", 595, &v24, v13, &cf);
          if (inserted) {
            goto LABEL_21;
          }
        }
LABEL_15:
        uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v23, cf, v10);
        if (inserted) {
          goto LABEL_21;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        --v10;
      }
      uint64_t v8 = [a2 countByEnumeratingWithState:&v18 objects:v28 count:16];
      if (!v8)
      {
LABEL_20:
        uint64_t inserted = FigAlternateFilterTreeCreateFilter(v23, @"MultipleAlternateQualifierTreeFilter", 872, v17);
        break;
      }
    }
  }
LABEL_21:
  uint64_t v15 = inserted;
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v15;
}

uint64_t FigAlternateMatchesAnyClientPredicateFilterCreate(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v7 = [a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(a2);
        }
        double v11 = *(void **)(*((void *)&v14 + 1) + 8 * v10);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_10;
          }
          double v11 = (void *)[v11 _predicate];
        }
        CFArrayAppendValue(Mutable, v11);
LABEL_10:
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }
  v18[0] = xmmword_1EE5168B8;
  v18[1] = *(_OWORD *)&off_1EE5168C8;
  long long v19 = off_1EE5168D8;
  uint64_t v12 = FigSimpleAlternateFilterCreate(a1, @"MatchesAnyClientPredicateFilter", 870, v18, Mutable, a3);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

uint64_t finalSelectionMatchesAnyClientPredicate_filter(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFNumberRef v3 = [[FigAlternateObjC alloc] initWithFigAlternate:a1];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(a2);
        }
        if ([*(id *)(*((void *)&v10 + 1) + 8 * v7) evaluateWithObject:v3])
        {
          uint64_t v8 = 1;
          goto LABEL_11;
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_11:

  return v8;
}

CFStringRef finalSelectionMatchesAnyClientPredicate_copyDescAddendum()
{
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"predicates: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t FigCoreTextSubtitleRendererCreate(uint64_t a1, const void **a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    goto LABEL_19;
  }
  FigSubtitleRendererGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 28) = 0;
    *(_WORD *)(DerivedStorage + 360) = 256;
    uint64_t v5 = (NSObject **)(DerivedStorage + 368);
    uint64_t v3 = FigCaptionRendererSessionCreate(0, 0, (uint64_t)*a2, (uint64_t *)(DerivedStorage + 368));
    if (!v3)
    {
      if (*v5)
      {
        uint64_t v6 = (uint64_t)FigCaptionRendererSessionSetCGContextDevice(*v5, 0, 0, 3, 0.0, 0.0, 320.0, 240.0);
        if (v6) {
          goto LABEL_6;
        }
        snprintf(__str, 0x100uLL, "com.apple.coremedia.subtitlerenderer.notificationqueue<%p>", *a2);
        dispatch_queue_t v7 = dispatch_queue_create(__str, 0);
        *(void *)(DerivedStorage + 16) = v7;
        if (!v7) {
          goto LABEL_19;
        }
        snprintf(label, 0x100uLL, "com.apple.coremedia.subtitlerenderer.messagequeue<%p>", *a2);
        dispatch_queue_t v8 = dispatch_queue_create(label, 0);
        *(void *)(DerivedStorage + 8) = v8;
        if (!v8) {
          goto LABEL_19;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigGetNotifyingObjectForMediaAccessibilityChanged();
        FigNotificationCenterAddWeakListener();
        clearMediaAccessibilityParams(DerivedStorage + 88);
        *(unsigned char *)uint64_t DerivedStorage = 1;
        if (*(void *)(DerivedStorage + 8))
        {
          uint64_t v9 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
          if (v9)
          {
            long long v10 = v9;
            if (*a2)
            {
              CFRetain(*a2);
              uint64_t v11 = (uint64_t)*a2;
            }
            else
            {
              uint64_t v11 = 0;
            }
            *long long v10 = v11;
            dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v10, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_1);
            return 0;
          }
LABEL_19:
          uint64_t v6 = FigSignalErrorAt();
          if (!v6) {
            return v6;
          }
          goto LABEL_6;
        }
      }
      return 0;
    }
  }
  uint64_t v6 = v3;
LABEL_6:
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  return v6;
}

uint64_t FigSubtitleRendererUseCoreTextRendererByDefault()
{
  return 0;
}

void mediaAccessibilityDidChange_1(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 8))
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a2) {
        CFRetain(a2);
      }
      *uint64_t v6 = a2;
      dispatch_queue_t v7 = *(NSObject **)(v4 + 8);
      dispatch_async_f(v7, v6, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_1);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void clearMediaAccessibilityParams(uint64_t a1)
{
  int64x2_t v2 = vdupq_n_s64(1uLL);
  *(void *)(a1 + 128) = 1;
  *(int64x2_t *)(a1 + 32) = v2;
  *(int64x2_t *)(a1 + 48) = v2;
  *(int64x2_t *)a1 = v2;
  *(int64x2_t *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 64), &xmmword_194995D30, 0x40uLL);
  uint64_t v3 = *(const void **)(a1 + 136);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 152);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v6 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 160) = _Q0;
  *(_OWORD *)(a1 + 176) = _Q0;
  *(void *)(a1 + 192) = 0xBFF0000000000000;
  uint64_t v12 = a1 + 200;
  do
  {
    long long v13 = *(const void **)(v12 + v6);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v12 + v6) = 0;
    }
    v6 += 8;
  }
  while (v6 != 64);
  *(void *)(a1 + 264) = 0;
}

void mediaAccessibilityDidChangeDoAsync_1(const void **a1)
{
  int64x2_t v2 = *a1;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  long long v41 = 0u;
  long long v39 = 0u;
  memset(v40, 0, sizeof(v40));
  *(_OWORD *)long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  if (*DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    CGColorRef v5 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v28);
    cf[1] = v5;
    if (v5) {
      CGColorGetComponents(v5);
    }
    CGColorRef v6 = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v28 + 1);
    v37[0] = v6;
    if (v6) {
      CGColorGetComponents(v6);
    }
    CGColorRef v7 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v29);
    v37[1] = v7;
    if (v7) {
      CGColorGetComponents(v7);
    }
    *(void *)&long long v38 = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v29 + 1);
    *((void *)&v38 + 1) = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v30);
    *(void *)&long long v39 = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v30 + 1);
    *((void *)&v39 + 1) = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v31);
    MACaptionAppearanceFontStyle v8 = kMACaptionAppearanceFontStyleDefault;
    *(void *)&v40[0] = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v31 + 1);
    uint64_t v9 = (MACaptionAppearanceBehavior *)&v32;
    do
    {
      *((void *)v40 + v8 + 1) = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, v9, v8);
      ++v8;
      ++v9;
    }
    while (v8 != 8);
    *((void *)&v41 + 1) = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)cf);
    long long v10 = v29;
    *(_OWORD *)(v4 + 88) = v28;
    long long v11 = v33;
    *(_OWORD *)(v4 + 152) = v32;
    long long v12 = v30;
    *(_OWORD *)(v4 + 136) = v31;
    *(_OWORD *)(v4 + 120) = v12;
    *(_OWORD *)(v4 + 104) = v10;
    long long v13 = v34;
    *(_OWORD *)(v4 + 200) = v35;
    *(_OWORD *)(v4 + 184) = v13;
    *((CFTypeRef *)v4 + 27) = cf[0];
    *(_OWORD *)(v4 + 168) = v11;
    long long v14 = (const void *)*((void *)v4 + 28);
    CFTypeRef v15 = cf[1];
    *((CFTypeRef *)v4 + 28) = cf[1];
    if (v15) {
      CFRetain(v15);
    }
    if (v14) {
      CFRelease(v14);
    }
    long long v16 = (const void *)*((void *)v4 + 29);
    CFTypeRef v17 = v37[0];
    *((CFTypeRef *)v4 + 29) = v37[0];
    if (v17) {
      CFRetain(v17);
    }
    if (v16) {
      CFRelease(v16);
    }
    long long v18 = (const void *)*((void *)v4 + 30);
    CFTypeRef v19 = v37[1];
    *((CFTypeRef *)v4 + 30) = v37[1];
    if (v19) {
      CFRetain(v19);
    }
    if (v18) {
      CFRelease(v18);
    }
    uint64_t v20 = 0;
    long long v21 = v39;
    *(_OWORD *)(v4 + 248) = v38;
    *(_OWORD *)(v4 + 264) = v21;
    *((void *)v4 + 35) = *(void *)&v40[0];
    CGRect v22 = v4 + 288;
    do
    {
      CFTypeRef v23 = *(const void **)&v22[v20];
      long long v24 = *(const void **)((char *)v40 + v20 + 8);
      *(void *)&v22[v20] = v24;
      if (v24) {
        CFRetain(v24);
      }
      if (v23) {
        CFRelease(v23);
      }
      v20 += 8;
    }
    while (v20 != 64);
    *((void *)v4 + 44) = *((void *)&v41 + 1);
    clearMediaAccessibilityParams((uint64_t)&v28);
    uint64_t v25 = (const void *)*((void *)v4 + 5);
    if (v25)
    {
      CFRelease(v25);
      *((void *)v4 + 5) = 0;
    }
    if (*((void *)v4 + 2))
    {
      long long v26 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
      if (!v26)
      {
        FigSignalErrorAt();
        if (!v2) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
      uint64_t v27 = v26;
      if (v2) {
        CFRetain(v2);
      }
      *uint64_t v27 = v2;
      dispatch_async_f(*((dispatch_queue_t *)v4 + 2), v27, (dispatch_function_t)sendNotificationDoAsync);
    }
  }
  if (v2) {
LABEL_36:
  }
    CFRelease(v2);
LABEL_37:
  free(a1);
}

uint64_t FigSubtitleRendererDrawSubtitleAttributedStringDirect(uint64_t a1, CGContext *a2, const void *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CFTypeRef v27 = 0;
  if (a1)
  {
    memset(v28, 0, sizeof(v28));
    if (!a2
      || CGRectEqualToRect(*(CGRect *)&a4, *MEMORY[0x1E4F1DB20])
      || (a6 > 1.0 ? (BOOL v14 = a7 <= 1.0) : (BOOL v14 = 1), v14))
    {
      uint64_t v18 = FigSignalErrorAt();
      SubtitleSampleFromAttributedString = 0;
    }
    else
    {
      SubtitleSampleFromAttributedString = FigSubtitleRendererCreateSubtitleSampleFromAttributedString(a3);
      if (SubtitleSampleFromAttributedString)
      {
        transform.a = a4;
        transform.b = a5;
        transform.c = a6;
        transform.d = a7;
        transform.tx = a6;
        transform.ty = a7;
        long long v16 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        long long v21 = *MEMORY[0x1E4F1DAB8];
        long long v22 = v16;
        long long v23 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        int v24 = 0;
        unint64_t v25 = 0xBFF0000000000000;
        int v26 = 1;
        uint64_t v17 = (uint64_t)subtitleRendererLayout(a1, (uint64_t)SubtitleSampleFromAttributedString, (long long *)&transform, (uint64_t)v28, (uint64_t)&v27);
        if (!v17)
        {
          transform.b = 0.0;
          transform.c = 0.0;
          transform.a = 1.0;
          *(_OWORD *)&transform.d = xmmword_1949965D0;
          transform.ty = a7;
          CGContextConcatCTM(a2, &transform);
          *(void *)&transform.a = a2;
          transform.b = 1.0;
          transform.c = 0.0;
          transform.d = 0.0;
          *(_OWORD *)&transform.tx = xmmword_1949965D0;
          *(CGFloat *)&long long v21 = a7;
          uint64_t v17 = (uint64_t)subtitleRendererDrawSubtitleText(a1, (uint64_t)v27, (long long *)&transform);
        }
      }
      else
      {
        uint64_t v17 = FigSignalErrorAt();
      }
      uint64_t v18 = v17;
    }
    if (v27) {
      CFRelease(v27);
    }
    if (SubtitleSampleFromAttributedString) {
      CFRelease(SubtitleSampleFromAttributedString);
    }
    return v18;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFDictionary *FigSubtitleRendererCreateSubtitleSampleFromAttributedString(const void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable && (uint64_t v4 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510])) != 0)
    {
      CGColorRef v5 = v4;
      CFArrayAppendValue(v4, a1);
      CFDictionarySetValue(Mutable, @"SubtitleContent", v5);
      int valuePtr = 2004251764;
      CFNumberRef v6 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFDictionarySetValue(Mutable, @"SubtitleFormat", v6);
        CFRelease(v7);
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v5);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return Mutable;
}

NSObject *subtitleRendererLayout(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v27 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16[0] = a1;
  v16[1] = a2;
  long long v11 = a3[1];
  long long v17 = *a3;
  long long v18 = v11;
  long long v12 = a3[6];
  long long v13 = a3[4];
  long long v22 = a3[5];
  long long v23 = v12;
  long long v14 = a3[3];
  long long v19 = a3[2];
  long long v20 = v14;
  long long v21 = v13;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  int v26 = &v27;
  __n128 result = *(NSObject **)(DerivedStorage + 8);
  if (result)
  {
    dispatch_sync_f(result, v16, (dispatch_function_t)subtitleRendererLayoutDo);
    return v27;
  }
  return result;
}

NSObject *subtitleRendererDrawSubtitleText(uint64_t a1, uint64_t a2, long long *a3)
{
  unsigned int v14 = 0;
  __n128 result = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  if (result)
  {
    context[0] = a1;
    context[1] = a2;
    long long v7 = a3[1];
    long long v9 = *a3;
    long long v10 = v7;
    long long v11 = a3[2];
    uint64_t v12 = *((void *)a3 + 6);
    long long v13 = &v14;
    dispatch_sync_f(result, context, (dispatch_function_t)subtitleRendererDrawSubtitleTextDo);
    return v14;
  }
  return result;
}

uint64_t FigSubtitleRendererDrawSubtitleTextDirect(uint64_t a1, CGContext *a2, const __CFString *a3, const __CFDictionary *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 360))
  {
    CFTypeRef cf = 0;
    if (a1)
    {
      *(_OWORD *)long long v35 = 0u;
      long long v36 = 0u;
      if (!a2
        || (v37.origin.x = a5,
            v37.origin.y = a6,
            v37.size.width = a7,
            v37.size.height = a8,
            CGRectEqualToRect(v37, *MEMORY[0x1E4F1DB20]))
        || a7 <= 1.0
        || a8 <= 1.0)
      {
        uint64_t v19 = FigSignalErrorAt();
        CFDictionaryRef SubtitleSample = 0;
      }
      else
      {
        CFDictionaryRef SubtitleSample = CreateSubtitleSample(a3, a4);
        if (SubtitleSample)
        {
          transform.a = a5;
          transform.b = a6;
          transform.c = a7;
          transform.d = a8;
          transform.tx = a7;
          transform.ty = a8;
          long long v17 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
          long long v28 = *MEMORY[0x1E4F1DAB8];
          long long v29 = v17;
          long long v30 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
          int v31 = 0;
          unint64_t v32 = 0xBFF0000000000000;
          int v33 = 1;
          uint64_t v18 = (uint64_t)subtitleRendererLayout(a1, (uint64_t)SubtitleSample, (long long *)&transform, (uint64_t)v35, (uint64_t)&cf);
          if (!v18)
          {
            transform.b = 0.0;
            transform.c = 0.0;
            transform.a = 1.0;
            *(_OWORD *)&transform.d = xmmword_1949965D0;
            transform.ty = a8;
            CGContextConcatCTM(a2, &transform);
            *(void *)&transform.a = a2;
            transform.b = 1.0;
            transform.c = 0.0;
            transform.d = 0.0;
            *(_OWORD *)&transform.tx = xmmword_1949965D0;
            *(CGFloat *)&long long v28 = a8;
            uint64_t v18 = (uint64_t)subtitleRendererDrawSubtitleText(a1, (uint64_t)cf, (long long *)&transform);
          }
        }
        else
        {
          uint64_t v18 = FigSignalErrorAt();
        }
        uint64_t v19 = v18;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (SubtitleSample) {
        CFRelease(SubtitleSample);
      }
      return v19;
    }
    return FigSignalErrorAt();
  }
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (!a2) {
    return FigSignalErrorAt();
  }
  double v20 = *MEMORY[0x1E4F1DB20];
  double v21 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v22 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v23 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  v38.origin.x = a5;
  v38.origin.y = a6;
  v38.size.width = a7;
  v38.size.height = a8;
  v39.origin.x = *(CGFloat *)MEMORY[0x1E4F1DB20];
  v39.origin.y = v21;
  v39.size.width = v22;
  v39.size.height = v23;
  if (CGRectEqualToRect(v38, v39)) {
    return FigSignalErrorAt();
  }
  if (a7 <= 1.0) {
    return FigSignalErrorAt();
  }
  if (a8 <= 1.0) {
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCaptionRendererSessionClear(*(NSObject **)(DerivedStorage + 368), v20, v21, v22, v23);
  FigCaptionRendererSessionSetLayoutContext_Viewport(*(void *)(DerivedStorage + 368), a5, a6, a7, a8);
  FigCaptionRendererSessionSetLayoutContext_VideoSize(*(NSObject **)(DerivedStorage + 368), a7, a8);
  FigCaptionRendererSessionSetLayoutContext_Gravity(*(NSObject **)(DerivedStorage + 368), 0);
  FigCaptionRendererSessionSetLayoutContext_Overscan(*(NSObject **)(DerivedStorage + 368), 0);
  CFDictionaryRef v25 = CreateSubtitleSample(a3, a4);
  if (!v25) {
    return FigSignalErrorAt();
  }
  v35[0] = 0;
  FigSubtitleSampleCreatePropertyList(v25, 1, 1, (CFDictionaryRef *)v35, v20, v21, v22, v23);
  FigCaptionRendererSessionSetCaptionSample(*(NSObject **)(DerivedStorage + 368), (uint64_t)v35[0], 0);
  transform.b = 0.0;
  transform.c = 0.0;
  transform.a = 1.0;
  *(_OWORD *)&transform.d = xmmword_1949965D0;
  transform.ty = a8;
  CGContextConcatCTM(a2, &transform);
  FigCaptionRendererSessionUpdateCGContext(*(void *)(DerivedStorage + 368), (uint64_t)a2);
  if (v35[0]) {
    CFRelease(v35[0]);
  }
  return 0;
}

double FigSubtitleRendererGetWindowRoundedCornerRadius(uint64_t a1)
{
  double v4 = 0.0;
  context[0] = a1;
  context[1] = &v4;
  CFStringRef v1 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v1) {
    return 0.0;
  }
  dispatch_sync_f(v1, context, (dispatch_function_t)subtitleRendererGetWindowRoundedCornerRadiusDo);
  return v4;
}

uint64_t subtitleRendererGetWindowRoundedCornerRadiusDo(uint64_t result)
{
  if (*(void *)(result + 8))
  {
    uint64_t v1 = result;
    __n128 result = CMBaseObjectGetDerivedStorage();
    double v2 = *(double *)(result + 280) * 4.0;
    if (v2 > 10.0) {
      double v2 = 10.0;
    }
    **(double **)(v1 + 8) = v2;
  }
  return result;
}

double FigSubtitleRendererGetWindowOpacity(uint64_t a1)
{
  double v4 = 0.0;
  context[0] = a1;
  context[1] = &v4;
  uint64_t v1 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v1) {
    return 0.0;
  }
  dispatch_sync_f(v1, context, (dispatch_function_t)subtitleRendererGetWindowOpacityDo);
  return v4;
}

double subtitleRendererGetWindowOpacityDo(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v4 = *(double **)(a1 + 8);
  if (v4)
  {
    double result = *(double *)(DerivedStorage + 264);
    *double v4 = result;
  }
  return result;
}

CFDictionaryRef FigSubtitleRendererDetachRegionInfo(const __CFDictionary *result, CFDictionaryRef *a2, BOOL *a3)
{
  *a2 = 0;
  if (!result
    || (v5 = result, (double result = (const __CFDictionary *)CFDictionaryGetValue(result, @"SubtitleContent")) == 0))
  {
    CFIndex Count = 0;
    goto LABEL_18;
  }
  CFArrayRef v6 = result;
  CFIndex Count = CFArrayGetCount(result);
  double result = (const __CFDictionary *)CFDictionaryGetValue(v5, @"SubtitleContentMetadata");
  if (!result
    || (CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        double result = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, result),
        (*a2 = result) == 0))
  {
LABEL_18:
    if (a3) {
      goto LABEL_19;
    }
    return result;
  }
  CFDictionaryRemoveValue(v5, @"SubtitleContentMetadata");
  if (Count < 1)
  {
LABEL_15:
    double result = 0;
    if (a3) {
      goto LABEL_19;
    }
    return result;
  }
  CFIndex v8 = 0;
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1F690];
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F1F6F0];
  while (1)
  {
    CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v6, v8);
    if (!ValueAtIndex) {
      goto LABEL_14;
    }
    CFAttributedStringRef v12 = ValueAtIndex;
    if (!CFAttributedStringGetLength(ValueAtIndex) || !CFAttributedStringGetAttribute(v12, 0, v9, &effectiveRange)) {
      goto LABEL_14;
    }
    CFDictionaryRef Value = (__CFDictionary *)CFDictionaryGetValue(*a2, @"kFigSubtitleRenderer_RegionCues");
    if (!Value) {
      break;
    }
LABEL_13:
    CFTypeRef Attribute = CFAttributedStringGetAttribute(v12, 0, v10, &effectiveRange);
    CFDictionaryAddValue(Value, Attribute, v12);
    CFArrayRemoveValueAtIndex(v6, v8);
    --Count;
    --v8;
LABEL_14:
    if (++v8 >= Count) {
      goto LABEL_15;
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFDictionaryRef Value = Mutable;
    CFDictionaryAddValue(*a2, @"kFigSubtitleRenderer_RegionCues", Mutable);
    CFRelease(Value);
    goto LABEL_13;
  }
  double result = (const __CFDictionary *)FigSignalErrorAt();
  if (!a3) {
    return result;
  }
LABEL_19:
  *a3 = Count > 0;
  return result;
}

uint64_t FigSubtitleRendererPatchRegionInfo(const __CFDictionary *a1, CFDictionaryRef theDict)
{
  CFDictionaryRef v2 = theDict;
  double v4 = (const void *)*MEMORY[0x1E4F1F818];
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1F818]);
  CFArrayRef v6 = (void *)CFDictionaryGetValue(a1, v4);
  if (!v6)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      uint64_t v20 = FigSignalErrorAt();
      goto LABEL_55;
    }
    CFArrayRef v6 = Mutable;
    CFDictionaryAddValue(a1, v4, Mutable);
    CFRelease(v6);
  }
  size_t Count = FigCFDictionaryGetCount();
  if (!Count)
  {
    uint64_t v20 = 0;
    goto LABEL_18;
  }
  int64_t v9 = Count;
  CFDictionaryRef theDicta = v2;
  CFStringRef v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
  long long v11 = (const void **)malloc_type_calloc(v9, 8uLL, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(Value, v10, v11);
  if (v9 < 1)
  {
LABEL_14:
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    if (v10) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v13 = v11;
  unsigned int v14 = v10;
  while (1)
  {
    if (!*v13) {
      goto LABEL_13;
    }
    CFTypeID v15 = CFGetTypeID(*v13);
    if (v15 != CFDictionaryGetTypeID()) {
      goto LABEL_13;
    }
    if (!*v14) {
      goto LABEL_13;
    }
    CFTypeID v16 = CFGetTypeID(*v14);
    if (v16 != CFStringGetTypeID()) {
      goto LABEL_13;
    }
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(v12, 0, (CFDictionaryRef)*v13);
    if (!MutableCopy) {
      break;
    }
    CFMutableDictionaryRef v18 = MutableCopy;
    CFDictionaryAddValue((CFMutableDictionaryRef)v6, *v14, MutableCopy);
    CFRelease(v18);
LABEL_13:
    ++v14;
    ++v13;
    if (!--v9) {
      goto LABEL_14;
    }
  }
  uint64_t v19 = FigSignalErrorAt();
LABEL_15:
  free(v10);
  uint64_t v20 = v19;
LABEL_16:
  CFDictionaryRef v2 = theDicta;
  if (v11) {
    free(v11);
  }
LABEL_18:
  CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v2, @"kFigSubtitleRenderer_RegionCues");
  CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(a1, v4);
  double v23 = (void *)CFDictionaryGetCount(v22);
  if (!v23) {
    goto LABEL_59;
  }
  int64_t v24 = (int64_t)v23;
  unsigned int v52 = v20;
  CFDictionaryRef v25 = (const void **)malloc_type_calloc((size_t)v23, 8uLL, 0xC0040B8AA526DuLL);
  int v26 = (const void **)malloc_type_calloc(v24, 8uLL, 0xC0040B8AA526DuLL);
  CFDictionaryRef v51 = v22;
  CFNumberRef v53 = v25;
  CFDictionaryGetKeysAndValues(v22, v25, v26);
  if (v24 >= 1)
  {
    uint64_t v27 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F1F6F0];
    uint64_t v55 = v26;
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      long long v29 = (void *)CFDictionaryGetValue((CFDictionaryRef)v26[v27], @"kFigSubtitleRenderer_RegionCues");
      if (!v29)
      {
        CFMutableDictionaryRef v30 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v30)
        {
          uint64_t v20 = FigSignalErrorAt();
          double v23 = v53;
          goto LABEL_56;
        }
        long long v29 = v30;
        CFDictionaryAddValue((CFMutableDictionaryRef)v26[v27], @"kFigSubtitleRenderer_RegionCues", v30);
        CFRelease(v29);
      }
      int64_t v31 = v24;
      int64_t v32 = CFDictionaryGetCount((CFDictionaryRef)v29);
      int v33 = (const void **)malloc_type_calloc(v32, 8uLL, 0xC0040B8AA526DuLL);
      long long v34 = (const void **)malloc_type_calloc(v32, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)v29, v33, v34);
      if (v32 >= 1)
      {
        long long v35 = (CFAttributedStringRef *)v34;
        do
        {
          CFTypeRef Attribute = CFAttributedStringGetAttribute(*v35, 0, v28, &effectiveRange);
          if (v21 && CFDictionaryGetValue(v21, Attribute)) {
            CGRect v37 = v21;
          }
          else {
            CGRect v37 = (__CFDictionary *)v29;
          }
          CFDictionaryRemoveValue(v37, Attribute);
          ++v35;
          --v32;
        }
        while (v32);
      }
      if (v33) {
        free(v33);
      }
      if (v34) {
        free(v34);
      }
      ++v27;
      int64_t v24 = v31;
      BOOL v38 = v27 == v31;
      int v26 = v55;
    }
    while (!v38);
  }
  if (v53) {
    free(v53);
  }
  uint64_t v20 = v52;
  if (v26) {
    free(v26);
  }
  if (v21)
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    double v23 = (void *)CFDictionaryGetCount(v21);
    if (v23)
    {
      int64_t v39 = (int64_t)v23;
      long long v40 = (const void **)malloc_type_calloc((size_t)v23, 8uLL, 0xC0040B8AA526DuLL);
      long long v41 = (const void **)malloc_type_calloc(v39, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues(v21, v40, v41);
      if (v39 >= 1)
      {
        CFStringRef v42 = (const __CFString *)*MEMORY[0x1E4F1F690];
        CFStringRef v43 = (const __CFString *)*MEMORY[0x1E4F1F6F0];
        CMTimeFlags v44 = (CFAttributedStringRef *)v41;
        do
        {
          CFTypeRef v45 = CFAttributedStringGetAttribute(*v44, 0, v42, &effectiveRange);
          if (v45)
          {
            CFDictionaryRef v46 = (const __CFDictionary *)CFDictionaryGetValue(v51, v45);
            if (v46)
            {
              int32_t v47 = (__CFDictionary *)CFDictionaryGetValue(v46, @"kFigSubtitleRenderer_RegionCues");
              if (v47)
              {
                int32_t v48 = v47;
                CFTypeRef v49 = CFAttributedStringGetAttribute(*v44, 0, v43, &effectiveRange);
                if (v49) {
                  CFDictionaryAddValue(v48, v49, *v44);
                }
              }
            }
          }
          ++v44;
          --v39;
        }
        while (v39);
      }
      if (v40) {
        free(v40);
      }
      if (v41) {
        free(v41);
      }
      goto LABEL_55;
    }
LABEL_59:
    int v26 = 0;
    goto LABEL_56;
  }
LABEL_55:
  int v26 = 0;
  double v23 = 0;
LABEL_56:
  free(v23);
  free(v26);
  return v20;
}

const void *FigSubtitleRendererGetAttributedStringFromSubtitleSample(const __CFDictionary *a1)
{
  if (a1 && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"SubtitleContent")) != 0)
  {
    return CFArrayGetValueAtIndex(Value, 0);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

double FigSubtitleRendererGetRegionDefaultFontSize(double a1, double a2, double a3, double a4)
{
  return a4 * 0.0533 / 1.3;
}

double FigSubtitleRendererGetRegionBounds(const __CFDictionary *a1, double a2, double a3, double a4)
{
  double v7 = *MEMORY[0x1E4F1DB28];
  double v13 = 0.0;
  int valuePtr = 0;
  if (FigCFDictionaryGetCGFloatIfPresent())
  {
    double v8 = a4 * v13 / 100.0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F1F888]);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F1F8A0]))
      {
        if (FigCFDictionaryGetCGFloatIfPresent()
          && FigCFDictionaryGetCGFloatIfPresent()
          && CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F1F890])
          && FigCFDictionaryGetCGFloatIfPresent()
          && FigCFDictionaryGetCGFloatIfPresent())
        {
          double v10 = a2 + a4 * 0.0 / 100.0 - v8 * 0.0 / 100.0;
          if (v10 < a2) {
            double v10 = a2;
          }
          if (v8 + v10 <= a2 + a4) {
            return v10;
          }
          else {
            return a2 + a4 - v8;
          }
        }
      }
    }
  }
  return v7;
}

void coreTextSubtitleRenderer_Finalize()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetNotifyingObjectForMediaAccessibilityChanged();
    FigNotificationCenterRemoveWeakListener();
    unsigned char *v1 = 0;
    CFDictionaryRef v2 = *((void *)v1 + 1);
    if (v2)
    {
      dispatch_release(v2);
      *((void *)v1 + 1) = 0;
    }
    uint64_t v3 = *((void *)v1 + 2);
    if (v3)
    {
      dispatch_release(v3);
      *((void *)v1 + 2) = 0;
    }
    if (!v1[360])
    {
      double v4 = (const void *)*((void *)v1 + 46);
      if (v4) {
        CFRelease(v4);
      }
    }
    clearMediaAccessibilityParams((uint64_t)(v1 + 88));
    CFDictionaryRef v5 = (const void *)*((void *)v1 + 6);
    if (v5) {
      CFRelease(v5);
    }
    CFArrayRef v6 = (const void *)*((void *)v1 + 9);
    if (v6) {
      CFRelease(v6);
    }
    double v7 = (const void *)*((void *)v1 + 5);
    if (v7) {
      CFRelease(v7);
    }
    double v8 = (const void *)*((void *)v1 + 7);
    if (v8)
    {
      CFRelease(v8);
    }
  }
}

__CFString *coreTextSubtitleRenderer_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCoreTextSubtitleRenderer %p>", a1);
  return Mutable;
}

void sendNotificationDoAsync(const void **a1)
{
  CFDictionaryRef v2 = *a1;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

CFDictionaryRef CreateSubtitleSample(CFStringRef str, CFDictionaryRef attributes)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], str, attributes);
  if (!values)
  {
    FigSignalErrorAt();
    return 0;
  }
  CFArrayRef v4 = CFArrayCreate(v3, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (v4)
  {
    CFArrayRef v5 = v4;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      double v7 = Mutable;
      if (attributes && CFDictionaryContainsKey(attributes, @"SubtitleFormat"))
      {
        CFNumberRef v8 = 0;
      }
      else
      {
        int valuePtr = 2004251764;
        CFNumberRef v9 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
        if (!v9)
        {
          FigSignalErrorAt();
          CFDictionaryRef Copy = 0;
          goto LABEL_12;
        }
        CFNumberRef v8 = v9;
        CFDictionarySetValue(v7, @"SubtitleFormat", v9);
      }
      CFDictionarySetValue(v7, @"SubtitleContent", v5);
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v3, v7);
      if (Copy)
      {
        if (!v8)
        {
LABEL_12:
          CFRelease(v5);
          CFRelease(v7);
          goto LABEL_13;
        }
      }
      else
      {
        FigSignalErrorAt();
        if (!v8) {
          goto LABEL_12;
        }
      }
      CFRelease(v8);
      goto LABEL_12;
    }
    FigSignalErrorAt();
    CFRelease(v5);
  }
  else
  {
    FigSignalErrorAt();
  }
  CFDictionaryRef Copy = 0;
LABEL_13:
  if (values) {
    CFRelease(values);
  }
  return Copy;
}

uint64_t subtitleRendererDrawSubtitleTextDo(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v3 = *(void *)a1;
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 8);
  CFArrayRef v4 = *(CGContext **)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v74.a = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v74.c = v5;
  *(_OWORD *)&v74.tCGFloat x = *(_OWORD *)(a1 + 56);
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    goto LABEL_64;
  }
  if (!v2 || (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v2, @"SubtitleContent")) == 0)
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_65;
  }
  CFArrayRef v7 = Value;
  if (CFArrayGetCount(Value) < 1)
  {
LABEL_64:
    uint64_t result = 0;
    goto LABEL_65;
  }
  uint64_t v55 = v1;
  CFIndex v8 = 0;
  CGFloat v10 = *MEMORY[0x1E4F1DB20];
  CGFloat v9 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v65 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  CGFloat v66 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  uint64_t v62 = (void *)*MEMORY[0x1E4F1F548];
  CFTypeRef v60 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  double v57 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  CGSize v67 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  CGPoint v68 = (CGPoint)*MEMORY[0x1E4F1DB20];
  keCGFloat y = (void *)*MEMORY[0x1E4F1F5A0];
  CFArrayRef v59 = v7;
  double v58 = *MEMORY[0x1E4F1DB20];
  double v61 = v9;
  do
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    rect.origin = v68;
    rect.CGSize size = v67;
    CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v7, v8);
    CFDictionaryRef Attribute = (const __CFDictionary *)CFAttributedStringGetAttribute(ValueAtIndex, 0, @"kFigSubtitleRenderer_SuggestTextLayout", &effectiveRange);
    if (Attribute) {
      CGRectMakeWithDictionaryRepresentation(Attribute, &rect);
    }
    CGAffineTransform v71 = v74;
    CGRect v80 = CGRectApplyAffineTransform(rect, &v71);
    CGFloat y = v80.origin.y;
    CGFloat x = v80.origin.x;
    double width = v80.size.width;
    double height = v80.size.height;
    CFDictionaryRef v15 = (const __CFDictionary *)CFAttributedStringGetAttribute(ValueAtIndex, 0, @"kFigSubtitleRenderer_SuggestLayout", &effectiveRange);
    if (v15) {
      CGRectMakeWithDictionaryRepresentation(v15, &rect);
    }
    CGAffineTransform v71 = v74;
    CGRect v81 = CGRectApplyAffineTransform(rect, &v71);
    CGFloat v16 = v81.origin.x;
    CGFloat v17 = v81.origin.y;
    CGFloat v18 = v81.size.width;
    CGFloat v19 = v81.size.height;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    v71.a = 0.0;
    v71.b = 0.0;
    double valuePtr = 0.0;
    CFNumberRef v21 = (const __CFNumber *)CFAttributedStringGetAttribute(ValueAtIndex, 0, @"kFigSubtitleRenderer_FontSizeToUse", (CFRange *)&v71);
    if (!v21) {
      goto LABEL_12;
    }
    CFNumberGetValue(v21, kCFNumberCGFloatType, &valuePtr);
    v82.origin.CGFloat y = y;
    v82.origin.CGFloat x = x;
    v82.size.double width = width;
    v82.size.double height = height;
    v88.origin.CGFloat x = v10;
    v88.origin.CGFloat y = v9;
    v88.size.double height = v65;
    v88.size.double width = v66;
    if (CGRectEqualToRect(v82, v88))
    {
LABEL_12:
      CFDictionaryRef v22 = 0;
      goto LABEL_60;
    }
    CFDictionaryRef theDict = CFAttributedStringGetAttributes(ValueAtIndex, 0, (CFRange *)&v71);
    CFDictionaryRef v22 = copyContentColor_0(*(void *)(DerivedStorage + 104), *(CGColorRef *)(DerivedStorage + 240), *(void *)(DerivedStorage + 128), theDict, v62, *(CGFloat *)(DerivedStorage + 264));
    uint64_t v23 = CMBaseObjectGetDerivedStorage();
    if (*(double *)(v23 + 280) * 4.0 <= 10.0) {
      double v24 = *(double *)(v23 + 280) * 4.0;
    }
    else {
      double v24 = 10.0;
    }
    CGContextSaveGState(v4);
    CGContextSetFontRenderingStyle();
    CGContextSetShouldSmoothFonts(v4, 0);
    CGContextSetShouldAntialias(v4, 1);
    CGContextSetInterpolationQuality(v4, kCGInterpolationHigh);
    if (v22)
    {
      CGContextSetFillColorWithColor(v4, v22);
      CGContextBeginPath(v4);
      if (v24 <= 1.0)
      {
        v87.origin.CGFloat x = v16;
        v87.origin.CGFloat y = v17;
        v87.size.double width = v18;
        v87.size.double height = v19;
        CGContextAddRect(v4, v87);
      }
      else
      {
        CGContextSaveGState(v4);
        v83.origin.CGFloat x = v16;
        v83.origin.CGFloat y = v17;
        v83.size.double width = v18;
        v83.size.double height = v19;
        CGFloat MinX = CGRectGetMinX(v83);
        v84.origin.CGFloat x = v16;
        v84.origin.CGFloat y = v17;
        v84.size.double width = v18;
        v84.size.double height = v19;
        CGFloat MinY = CGRectGetMinY(v84);
        CGContextTranslateCTM(v4, MinX, MinY);
        CGContextScaleCTM(v4, v24, v24);
        v85.origin.CGFloat x = v16;
        v85.origin.CGFloat y = v17;
        v85.size.double width = v18;
        v85.size.double height = v19;
        *(float *)&CGFloat MinX = CGRectGetWidth(v85) / v24;
        v86.origin.CGFloat x = v16;
        v86.origin.CGFloat y = v17;
        v86.size.double width = v18;
        v86.size.double height = v19;
        float v27 = CGRectGetHeight(v86) / v24;
        CGFloat v28 = *(float *)&MinX;
        CGFloat v29 = (float)(v27 * 0.5);
        CGContextMoveToPoint(v4, *(float *)&MinX, v29);
        CGFloat v30 = v27;
        float v31 = *(float *)&MinX * 0.5;
        CGFloat v10 = v58;
        CGFloat v32 = v31;
        CGContextAddArcToPoint(v4, v28, v30, v31, v30, 1.0);
        CGContextAddArcToPoint(v4, 0.0, v30, 0.0, v29, 1.0);
        CGContextAddArcToPoint(v4, 0.0, 0.0, v32, 0.0, 1.0);
        CGContextAddArcToPoint(v4, v28, 0.0, v28, v29, 1.0);
        CGContextClosePath(v4);
        CGContextRestoreGState(v4);
      }
      CGContextFillPath(v4);
    }
    CFTypeRef v33 = CFAttributedStringGetAttribute(ValueAtIndex, 0, @"kFigSubtitleRenderer_CommonSetupDone", (CFRange *)&v71);
    if (v33 && v60 != v33)
    {
      CFAttributedStringRef v34 = 0;
      CGFloat v9 = v61;
      double v36 = y;
      double v35 = x;
      goto LABEL_24;
    }
    MutableCFDictionaryRef Copy = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
    CGFloat v9 = v61;
    if (MutableCopy)
    {
      CFAttributedStringRef v34 = MutableCopy;
      double v40 = height / 3.0;
      int v41 = subtitleRendererSetupText(v3, MutableCopy, 0, height / 3.0);
      int v42 = 0;
      double v43 = v57;
      while (1)
      {
        CFIndex Length = CFAttributedStringGetLength(v34);
        if (Length >= 1)
        {
          CFIndex v45 = Length;
          CFDictionaryRef v46 = CTFramesetterCreateWithAttributedString(v34);
          if (!v46)
          {
            CFArrayRef v7 = v59;
            goto LABEL_57;
          }
          int32_t v47 = v46;
          v77.location = 0;
          v77.length = v45;
          v79.double width = width;
          v79.double height = 1.79769313e308;
          double v43 = ceil(CTFramesetterSuggestFrameSizeWithConstraints(v46, v77, 0, v79, 0).height);
          CFRelease(v47);
        }
        double v48 = 1.0;
        if (v43 <= 1.0) {
          break;
        }
        if (v43 <= height)
        {
          if (v42 == -1) {
            break;
          }
          int v42 = 1;
        }
        else
        {
          int v42 = -1;
          double v48 = -1.0;
        }
        double v40 = v40 + v48;
        int v41 = subtitleRendererSetupText(v3, v34, 3, v40);
      }
      v76[0] = v40;
      CFNumberRef v49 = CFNumberCreate(alloc, kCFNumberCGFloatType, v76);
      v78.length = CFAttributedStringGetLength(v34);
      v78.location = 0;
      CFAttributedStringSetAttribute(v34, v78, @"kFigSubtitleRenderer_FontSizeToUse", v49);
      CFRelease(v49);
      CFAttributedStringRef ValueAtIndex = v34;
      CFArrayRef v7 = v59;
      double v36 = y;
      double v35 = x;
      if (v41) {
        goto LABEL_57;
      }
LABEL_24:
      if (*(_DWORD *)(DerivedStorage + 28))
      {
        CFAttributedStringRef v37 = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
        if (!v37) {
          goto LABEL_57;
        }
        CFAttributedStringRef v38 = v37;
        if (subtitleRendererDrawText(valuePtr, v35, v36, width, height, v3, v37, v4, 2u))
        {
LABEL_55:
          CFRelease(v38);
LABEL_57:
          if (v34) {
            CFRelease(v34);
          }
          goto LABEL_59;
        }
      }
      else
      {
        CFAttributedStringRef v38 = 0;
      }
      unint64_t v50 = getEdgeStyle(*(void *)(DerivedStorage + 216), *(void *)(DerivedStorage + 352), theDict, key) - 1;
      CFAttributedStringRef v51 = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
      CFAttributedStringRef v52 = v51;
      if (v50 >= 3)
      {
        if (!v51) {
          goto LABEL_54;
        }
        setupHighlight_0(v3, v51);
        if (subtitleRendererSetupText(v3, v52, 2, valuePtr)
          || subtitleRendererDrawText(valuePtr, v35, v36, width, height, v3, v52, v4, 1u))
        {
          CFAttributedStringRef v53 = v52;
          goto LABEL_53;
        }
        CFAttributedStringRef v53 = v52;
        CFAttributedStringRef v52 = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
        if (!v52) {
          goto LABEL_53;
        }
      }
      else
      {
        if (!v51) {
          goto LABEL_54;
        }
        setupHighlight_0(v3, v51);
        CFAttributedStringRef v53 = 0;
      }
      if (!subtitleRendererSetupText(v3, v52, 1, valuePtr)) {
        subtitleRendererDrawText(valuePtr, v35, v36, width, height, v3, v52, v4, 0);
      }
      CFRelease(v52);
      if (!v53)
      {
LABEL_54:
        CFArrayRef v7 = v59;
        if (!v38) {
          goto LABEL_57;
        }
        goto LABEL_55;
      }
LABEL_53:
      CFRelease(v53);
      goto LABEL_54;
    }
LABEL_59:
    CGContextRestoreGState(v4);
LABEL_60:
    CGColorRelease(v22);
    ++v8;
  }
  while (CFArrayGetCount(v7) > v8);
  uint64_t result = 0;
  uint64_t v1 = v55;
LABEL_65:
  **(_DWORD **)(v1 + 72) = result;
  return result;
}

CGColor *copyContentColor_0(uint64_t a1, CGColorRef color, uint64_t a3, const __CFDictionary *a4, void *key, CGFloat a6)
{
  if (a1 || !color)
  {
    BOOL v10 = 1;
    if (a4)
    {
      if (key)
      {
        CGColorFromCFArraCGFloat y = createCGColorFromCFArray(a4, key, 0);
        BOOL v10 = CGColorFromCFArray == 0;
        if (CGColorFromCFArray) {
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
    CGColorFromCFArraCGFloat y = CGColorCreateCopy(color);
    BOOL v10 = 1;
    if (CGColorFromCFArray) {
      goto LABEL_9;
    }
  }
  CGColorFromCFArraCGFloat y = CGColorCreateCopy(color);
  if (!CGColorFromCFArray) {
    return CGColorFromCFArray;
  }
LABEL_9:
  if (!a3)
  {
    if (a6 < 0.0) {
      return CGColorFromCFArray;
    }
    goto LABEL_16;
  }
  if (a6 >= 0.0 && v10)
  {
LABEL_16:
    CGColorRef CopyWithAlpha = CGColorCreateCopyWithAlpha(CGColorFromCFArray, a6);
    if (CopyWithAlpha)
    {
      CGColorRef v13 = CopyWithAlpha;
      CGColorRelease(CGColorFromCFArray);
      return v13;
    }
  }
  return CGColorFromCFArray;
}

uint64_t subtitleRendererDrawText(double a1, double a2, double a3, double a4, double a5, uint64_t a6, const __CFAttributedString *a7, CGContext *a8, unsigned int a9)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a9 == 1)
  {
    CGContextSetLineJoin(a8, kCGLineJoinBevel);
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    double v19 = 0.0;
    double v20 = 0.0;
  }
  else
  {
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    if (a1 <= 60.0) {
      double v20 = a1 * 0.0882352941;
    }
    else {
      double v20 = a1 * 0.0882352941 / 1.5;
    }
    if (*(_DWORD *)(v18 + 32) != 1) {
      double v20 = -v20;
    }
    double v19 = 0.0;
  }
  effectiveRange.a = 0.0;
  effectiveRange.double b = 0.0;
  CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a7, 0, (CFRange *)&effectiveRange);
  switch(getEdgeStyle(*(void *)(v18 + 216), *(void *)(v18 + 352), Attributes, (void *)*MEMORY[0x1E4F1F5A0]))
  {
    case 1:
    case 4:
      goto LABEL_21;
    case 2:
      if (a1 <= 60.0)
      {
        double v19 = a1 * -0.0882352941;
        double v20 = a1 * 0.0882352941;
      }
      else
      {
        double v19 = a1 * 0.0882352941 / -1.5;
        double v20 = a1 * 0.0882352941 / 1.5;
      }
      goto LABEL_17;
    case 3:
      if (a1 <= 60.0) {
        double v19 = a1 * 0.0882352941;
      }
      else {
        double v19 = a1 * 0.0882352941 / 1.5;
      }
      double v20 = -v19;
      goto LABEL_17;
    default:
LABEL_17:
      *(_OWORD *)&effectiveRange.a = xmmword_194999700;
      *(_OWORD *)&effectiveRange.c = unk_194999710;
      CFDictionaryRef v22 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      if (v22)
      {
        uint64_t v23 = v22;
        double v24 = CGColorCreate(v22, &effectiveRange.a);
        CGColorRef CopyWithAlpha = CGColorCreateCopyWithAlpha(v24, *(CGFloat *)(v18 + 248));
        CGColorRelease(v24);
        CGColorSpaceRelease(v23);
      }
      else
      {
        CGColorRef CopyWithAlpha = 0;
      }
      v101.CGFloat width = v19;
      v101.CGFloat height = v20;
      CGContextSetShadowWithColor(a8, v101, 4.0, CopyWithAlpha);
      CGColorRelease(CopyWithAlpha);
LABEL_21:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      if (!Mutable) {
        return 4294955204;
      }
      float v27 = Mutable;
      CTFramesetterRef v28 = CTFramesetterCreateWithAttributedString(a7);
      if (!v28)
      {
        uint64_t v37 = 4294955204;
        goto LABEL_81;
      }
      CGFloat v29 = v28;
      v91.location = 0;
      v91.length = 0;
      CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(a7, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &v91);
      FrameAttributesDictionarCGFloat y = createFrameAttributesDictionary(Attribute);
      effectiveRange.a = 0.0;
      CFNumberRef v32 = (const __CFNumber *)CFAttributedStringGetAttribute(a7, 0, @"kFigSubtitleRenderer_CompensationInTextLayout", &v91);
      if (v32) {
        CFNumberGetValue(v32, kCFNumberCGFloatType, &effectiveRange);
      }
      v103.origin.CGFloat x = a2 + effectiveRange.a;
      v103.origin.CGFloat y = a3 + effectiveRange.a;
      v103.size.CGFloat width = a4 - effectiveRange.a * 2.0;
      v103.size.CGFloat height = a5 - effectiveRange.a * 2.0;
      double v74 = a3 + effectiveRange.a;
      double v75 = a2 + effectiveRange.a;
      CGPathAddRect(v27, 0, v103);
      v95.length = CFAttributedStringGetLength(a7);
      v95.location = 0;
      CFTypeRef v33 = CTFramesetterCreateFrame(v29, v95, v27, FrameAttributesDictionary);
      if (FrameAttributesDictionary) {
        CFRelease(FrameAttributesDictionary);
      }
      if (!v33)
      {
        uint64_t v37 = 4294955204;
        goto LABEL_80;
      }
      if (!*(_DWORD *)(DerivedStorage + 28))
      {
        CTFrameDraw(v33, a8);
        goto LABEL_79;
      }
      CFArrayRef Lines = CTFrameGetLines(v33);
      CGFloat leading = 0.0;
      CFIndex Count = CFArrayGetCount(Lines);
      if (Count >= 1)
      {
        CFAttributedStringRef ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(Lines, Count - 1);
        CTLineGetTypographicBounds(ValueAtIndex, 0, 0, &leading);
      }
      frame = v33;
      CGFloat v66 = v29;
      CGSize v67 = v27;
      if (Attribute)
      {
        CGContextSaveGState(a8);
        *(_OWORD *)&effectiveRange.a = xmmword_1949996E0;
        effectiveRange.c = 1.0;
        memset(&effectiveRange.d, 0, 24);
        CGContextConcatCTM(a8, &effectiveRange);
        *(_OWORD *)&v92.a = xmmword_1949996E0;
        v92.c = 1.0;
        memset(&v92.d, 0, 24);
        CGAffineTransformInvert(&effectiveRange, &v92);
        float64x2_t v72 = *(float64x2_t *)&effectiveRange.c;
        float64x2_t v73 = *(float64x2_t *)&effectiveRange.a;
        float64x2_t v36 = *(float64x2_t *)&effectiveRange.tx;
      }
      else
      {
        float64x2_t v72 = *(float64x2_t *)(MEMORY[0x1E4F1DAB8] + 16);
        float64x2_t v73 = *(float64x2_t *)MEMORY[0x1E4F1DAB8];
        float64x2_t v36 = *(float64x2_t *)(MEMORY[0x1E4F1DAB8] + 32);
      }
      float64x2_t v71 = v36;
      if (Count < 1) {
        goto LABEL_76;
      }
      CFIndex v38 = 0;
      CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F9B8];
      CFStringRef name = (const __CFString *)*MEMORY[0x1E4F1DC98];
      int64_t v39 = (void *)*MEMORY[0x1E4F1F598];
      CGFloat v78 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
      CGFloat v79 = *MEMORY[0x1E4F1DB30];
      CFArrayRef v69 = Lines;
      CFStringRef v70 = Attribute;
      break;
  }
  do
  {
    double v40 = (const __CTLine *)CFArrayGetValueAtIndex(Lines, v38);
    origins.CGFloat x = 0.0;
    origins.CGFloat y = 0.0;
    v96.location = v38;
    v96.length = 1;
    CTFrameGetLineOrigins(frame, v96, &origins);
    origins.CGFloat x = v75 + origins.x;
    if (Attribute && CFEqual(Attribute, theString2))
    {
      effectiveRange.a = 0.0;
      effectiveRange.double b = 0.0;
      v97.location = Count + ~v38;
      v97.length = 1;
      CTFrameGetLineOrigins(frame, v97, (CGPoint *)&effectiveRange);
      double b = effectiveRange.b;
    }
    else
    {
      double b = origins.y;
    }
    CGPoint origins = (CGPoint)vaddq_f64(v71, vmlaq_n_f64(vmulq_n_f64(v72, v74 + b + leading * -0.5), v73, origins.x));
    CGContextSetTextPosition(a8, origins.x, origins.y);
    if (v38)
    {
      CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(v40, 0x10uLL);
    }
    else
    {
      CGRect v105 = CTLineGetBoundsWithOptions(v40, 0);
      CGFloat x = v105.origin.x;
      CGFloat y = v105.origin.y;
      CGFloat width = v105.size.width;
      CGFloat height = v105.size.height;
      CGRect v108 = CTLineGetBoundsWithOptions(v40, 8uLL);
      v106.origin.CGFloat x = x;
      v106.origin.CGFloat y = y;
      v106.size.CGFloat width = width;
      v106.size.CGFloat height = height;
      CGRect BoundsWithOptions = CGRectUnion(v106, v108);
    }
    CGFloat v80 = BoundsWithOptions.size.height;
    double v81 = BoundsWithOptions.origin.y;
    CFArrayRef GlyphRuns = CTLineGetGlyphRuns(v40);
    memset(&effectiveRange, 0, sizeof(effectiveRange));
    CGContextGetTextMatrix(&effectiveRange, a8);
    if (CFArrayGetCount(GlyphRuns) >= 1)
    {
      CFIndex v47 = 0;
      double v48 = 0.0;
      while (1)
      {
        CGFloat descent = 0.0;
        CGFloat ascent = 0.0;
        CGFloat v84 = 0.0;
        CFNumberRef v49 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v47);
        CFDictionaryRef v50 = CTRunGetAttributes(v49);
        CGPoint TextPosition = CGContextGetTextPosition(a8);
        CTRunGetTextMatrix(&v92, v49);
        long long v87 = *(_OWORD *)&v92.a;
        long long v88 = *(_OWORD *)&v92.c;
        tCGFloat x = v92.tx;
        tCGFloat y = v92.ty;
        v98.location = 0;
        v98.length = 0;
        double TypographicBounds = CTRunGetTypographicBounds(v49, v98, &ascent, &descent, &v84);
        double v55 = origins.y;
        double v83 = origins.x;
        double v56 = descent;
        *(_OWORD *)&v92.a = v87;
        *(_OWORD *)&v92.c = v88;
        v92.tCGFloat x = tx;
        v92.tCGFloat y = ty;
        CGAffineTransformIsIdentity(&v92);
        if (a9 != 2)
        {
          if (a9 <= 1)
          {
            CGContextSaveGState(a8);
            *(_OWORD *)&v92.a = v87;
            *(_OWORD *)&v92.c = v88;
            v92.tCGFloat x = tx;
            v92.tCGFloat y = ty;
            if (CGAffineTransformIsIdentity(&v92))
            {
              CGContextSetTextPosition(a8, TextPosition.x, v55 - v56 + descent);
              v99.location = 0;
              v99.length = 0;
              CTRunDraw(v49, a8, v99);
            }
            else
            {
              *(_OWORD *)&v92.a = v87;
              *(_OWORD *)&v92.c = v88;
              *(CGPoint *)&v92.tCGFloat x = TextPosition;
              CGContextSetTextMatrix(a8, &v92);
              v100.location = 0;
              v100.length = 0;
              CTRunDraw(v49, a8, v100);
              CGAffineTransform v92 = effectiveRange;
              CGContextSetTextMatrix(a8, &v92);
            }
            CGContextRestoreGState(a8);
          }
          goto LABEL_72;
        }
        if (v50) {
          break;
        }
        double v61 = 0;
LABEL_71:
        CGColorRelease(v61);
LABEL_72:
        double v48 = v48 + TypographicBounds;
        CGContextSetTextPosition(a8, TextPosition.x, TextPosition.y);
        if (++v47 >= CFArrayGetCount(GlyphRuns)) {
          goto LABEL_75;
        }
      }
      double v57 = CGColorSpaceCreateWithName(name);
      if (CFDictionaryContainsKey(v50, v39))
      {
        CGColorFromCFArraCGFloat y = createCGColorFromCFArray(v50, v39, 0);
        CFArrayRef v59 = CGColorFromCFArray;
        if (CGColorFromCFArray)
        {
          if (*(void *)(DerivedStorage + 96))
          {
            Components = CGColorGetComponents(CGColorFromCFArray);
            *(_OWORD *)&v92.a = *(_OWORD *)Components;
            v92.c = Components[2];
            goto LABEL_64;
          }
          char v62 = 0;
LABEL_63:
          BOOL v63 = CGColorGetComponents(*(CGColorRef *)(DerivedStorage + 232));
          *(_OWORD *)&v92.a = *(_OWORD *)v63;
          v92.c = v63[2];
          CFArrayRef v64 = (CGFloat *)(DerivedStorage + 256);
          if (v62)
          {
LABEL_67:
            v92.d = *v64;
            double v61 = CGColorCreate(v57, &v92.a);
            CGColorRelease(v59);
            if (v57) {
              CFRelease(v57);
            }
            if (v61)
            {
              CGContextSaveGState(a8);
              v102.CGFloat height = v78;
              v102.CGFloat width = v79;
              CGContextSetShadowWithColor(a8, v102, 0.0, 0);
              CGContextSetFillColorWithColor(a8, v61);
              v107.size.CGFloat height = v80;
              v107.origin.CGFloat y = v81 + origins.y + leading * 0.5;
              v107.origin.CGFloat x = v48 + v83;
              v107.size.CGFloat width = TypographicBounds;
              CGContextFillRect(a8, v107);
              CGContextRestoreGState(a8);
            }
            goto LABEL_71;
          }
LABEL_64:
          if (*(void *)(DerivedStorage + 120)) {
            CFArrayRef v64 = (CGFloat *)(CGColorGetComponents(v59) + 3);
          }
          else {
            CFArrayRef v64 = (CGFloat *)(DerivedStorage + 256);
          }
          goto LABEL_67;
        }
      }
      else
      {
        CFArrayRef v59 = 0;
      }
      char v62 = 1;
      goto LABEL_63;
    }
LABEL_75:
    ++v38;
    CFArrayRef Lines = v69;
    CFStringRef Attribute = v70;
  }
  while (v38 != Count);
LABEL_76:
  if (Attribute) {
    CGContextRestoreGState(a8);
  }
  CGFloat v29 = v66;
  float v27 = v67;
  CFTypeRef v33 = frame;
LABEL_79:
  CFRelease(v33);
  uint64_t v37 = 0;
LABEL_80:
  CFRelease(v29);
LABEL_81:
  CFRelease(v27);
  return v37;
}

void setupHighlight_0(uint64_t a1, const __CFAttributedString *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 28))
  {
    uint64_t v4 = DerivedStorage;
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    CFIndex Length = CFAttributedStringGetLength(a2);
    if (Length >= 1)
    {
      CFIndex v6 = Length;
      CFIndex v7 = 0;
      CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1DC98];
      CGFloat v9 = (void *)*MEMORY[0x1E4F1F598];
      CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F243C8];
      CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F247F0];
      BOOL v10 = (const void *)*MEMORY[0x1E4F1CFD0];
      while (1)
      {
        CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a2, v7, &effectiveRange);
        if (Attributes) {
          break;
        }
LABEL_21:
        CFIndex v7 = effectiveRange.length + effectiveRange.location;
        if (effectiveRange.length + effectiveRange.location >= v6) {
          return;
        }
      }
      CFDictionaryRef v12 = Attributes;
      CGColorRef v13 = CGColorSpaceCreateWithName(v8);
      if (CFDictionaryContainsKey(v12, v9))
      {
        CGColorFromCFArraCGFloat y = createCGColorFromCFArray(v12, v9, 0);
        CFDictionaryRef v15 = CGColorFromCFArray;
        if (CGColorFromCFArray)
        {
          if (*(void *)(v4 + 96))
          {
            CGFloat v16 = CGColorGetComponents(CGColorFromCFArray);
            *(_OWORD *)components = *(_OWORD *)v16;
            uint64_t v25 = *((void *)v16 + 2);
            goto LABEL_13;
          }
          char v17 = 0;
LABEL_12:
          uint64_t v18 = CGColorGetComponents(*(CGColorRef *)(v4 + 232));
          *(_OWORD *)components = *(_OWORD *)v18;
          uint64_t v25 = *((void *)v18 + 2);
          double v19 = (const CGFloat *)(v4 + 256);
          if (v17)
          {
LABEL_16:
            uint64_t v26 = *(void *)v19;
            CGColorRef v20 = CGColorCreate(v13, components);
            CGColorRelease(v15);
            if (v13) {
              CFRelease(v13);
            }
            if (v20)
            {
              CFAttributedStringSetAttribute(a2, effectiveRange, attrName, v20);
              CFAttributedStringSetAttribute(a2, effectiveRange, v21, v10);
            }
            CGColorRelease(v20);
            goto LABEL_21;
          }
LABEL_13:
          if (*(void *)(v4 + 120)) {
            double v19 = CGColorGetComponents(v15) + 3;
          }
          else {
            double v19 = (const CGFloat *)(v4 + 256);
          }
          goto LABEL_16;
        }
      }
      else
      {
        CFDictionaryRef v15 = 0;
      }
      char v17 = 1;
      goto LABEL_12;
    }
  }
}

uint64_t subtitleRendererSetupText(uint64_t a1, const __CFAttributedString *a2, int a3, CGFloat a4)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 == 3)
  {
    CFIndex Length = CFAttributedStringGetLength(a2);
    if (Length >= 1)
    {
      CFIndex v26 = Length;
      CFIndex v27 = 0;
      CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F243F0];
      do
      {
        v146.a = 0.0;
        v146.double b = 0.0;
        CGFloat v29 = (const __CTFont *)CFAttributedStringGetAttribute(a2, v27, v28, (CFRange *)&v146);
        if (v29)
        {
          if (*(void *)&v146.b <= 1uLL) {
            CFIndex v30 = 1;
          }
          else {
            CFIndex v30 = *(void *)&v146.b;
          }
          CopyWithCFDictionaryRef Attributes = CTFontCreateCopyWithAttributes(v29, a4, 0, 0);
          v156.location = v27;
          v156.length = v30;
          CFAttributedStringSetAttribute(a2, v156, v28, CopyWithAttributes);
          CFRelease(CopyWithAttributes);
        }
        if (*(void *)&v146.b) {
          v27 += *(void *)&v146.b;
        }
        else {
          ++v27;
        }
      }
      while (v27 < v26);
    }
    return 0;
  }
  if (a3 == 2)
  {
    v146.a = 0.0;
    *(void *)&v153[0] = 0;
    CFIndex v32 = CFAttributedStringGetLength(a2);
    calculateStrokeAttributes(a4, a1, &v146, (CFNumberRef *)v153);
    if (*(void *)&v146.a)
    {
      v157.location = 0;
      v157.length = v32;
      CFAttributedStringSetAttribute(a2, v157, (CFStringRef)*MEMORY[0x1E4F247B8], *(CFTypeRef *)&v146.a);
    }
    if (*(void *)&v153[0])
    {
      v158.location = 0;
      v158.length = v32;
      CFAttributedStringSetAttribute(a2, v158, (CFStringRef)*MEMORY[0x1E4F247C0], *(CFTypeRef *)&v153[0]);
    }
    if (*(void *)&v146.a)
    {
      CFRelease(*(CFTypeRef *)&v146.a);
      v146.a = 0.0;
    }
    if (*(void *)&v153[0])
    {
      CFRelease(*(CFTypeRef *)&v153[0]);
      *(void *)&v153[0] = 0;
    }
    setupRubyAnnotation_0(a1, a2, 2, a4);
    return 0;
  }
  if (a3) {
    return 0;
  }
  uint64_t v8 = DerivedStorage;
  v145.location = 0;
  v145.length = 0;
  CFIndex range = CFAttributedStringGetLength(a2);
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  CFTypeRef v9 = CFAttributedStringGetAttribute(a2, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &effectiveRange);
  CFNumberRef v10 = (const __CFNumber *)CFAttributedStringGetAttribute(a2, 0, @"kFigSubtitleRenderer_SourceFormat", &effectiveRange);
  int valuePtr = 0;
  CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  CFIndex v11 = CFAttributedStringGetLength(a2);
  CFStringRef String = CFAttributedStringGetString(a2);
  CGColorRef v13 = (UniChar *)malloc_type_calloc(v11, 2uLL, 0x1000040BDFB0063uLL);
  unsigned int v14 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v13)
  {
    CFDictionaryRef v15 = v13;
    LODWORD(v146.a) = 1;
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v146);
    if (v17)
    {
      CFNumberRef v18 = v17;
      v155.location = 0;
      v155.length = v11;
      CFStringGetCharacters(String, v155, v15);
      if (v11 < 1)
      {
        char v24 = 0;
      }
      else
      {
        char v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = -1;
        do
        {
          unsigned int v22 = v15[v20];
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x51C019C0003000C0, (uint16x4_t)vadd_s16(vdup_n_s16(v22), (int16x4_t)0xB200CC00CE40CFC0))) & 1) != 0|| (unsigned __int16)(v22 + 1792) < 0x200u|| (unsigned __int16)(v22 + 464) < 0x20u|| (unsigned __int16)(v22 + 256) < 0xF0u|| (v22 & 0xFFC0) == 0x3000|| (v22 & 0xFF80) == 0x2E80|| (v22 & 0xFE00) == 0x3200)
          {
            if (v21 < 0) {
              uint64_t v21 = v20;
            }
          }
          else
          {
            if (v21 >= -1) {
              uint64_t v23 = -1;
            }
            else {
              uint64_t v23 = v21;
            }
            if (v21 >= 0) {
              char v19 = 1;
            }
            uint64_t v21 = v23;
          }
          ++v20;
        }
        while (v11 != v20);
        if (v21 >= 0) {
          char v24 = 1;
        }
        else {
          char v24 = v19;
        }
      }
      CFRelease(v18);
    }
    else
    {
      char v24 = 0;
    }
    free(v15);
    BOOL v128 = v9 != 0;
    int v112 = 1;
    if (v24 && v9)
    {
      v159.location = 0;
      v159.length = range;
      CFAttributedStringSetAttribute(a2, v159, (CFStringRef)*MEMORY[0x1E4F248A8], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      CGMutablePathRef Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        return FigSignalErrorAt();
      }
      CFAttributedStringRef v34 = Mutable;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F243D8], (const void *)*MEMORY[0x1E4F243E8]);
      v160.location = 0;
      v160.length = range;
      CFAttributedStringSetAttribute(a2, v160, (CFStringRef)*MEMORY[0x1E4F243E0], v34);
      CFRelease(v34);
      int v112 = 0;
      BOOL v128 = 1;
    }
  }
  else
  {
    BOOL v128 = v9 != 0;
    int v112 = 1;
  }
  CTParagraphStyleRef v35 = CTParagraphStyleCreate(0, 0);
  if (v35)
  {
    CTParagraphStyleRef v36 = v35;
    CTParagraphStyleSetCompositionLanguage();
    v161.location = 0;
    CFIndex v37 = range;
    v161.length = range;
    CFStringRef v113 = (const __CFString *)*MEMORY[0x1E4F24790];
    CFAttributedStringSetAttribute(a2, v161, (CFStringRef)*MEMORY[0x1E4F24790], v36);
    CFRelease(v36);
    uint64_t v134 = *MEMORY[0x1E4F24540];
    v125 = (void *)*MEMORY[0x1E4F1F600];
    keCGFloat y = (void *)*MEMORY[0x1E4F1F710];
    v116 = (void *)*MEMORY[0x1E4F1F618];
    CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F24770];
    v130 = (void *)*MEMORY[0x1E4F1F6B0];
    CFTypeRef value = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    v123 = (void *)*MEMORY[0x1E4F1F630];
    v122 = (void *)*MEMORY[0x1E4F1F558];
    v121 = (void *)*MEMORY[0x1E4F1F718];
    CFAllocatorRef allocator = *v14;
    CFStringRef v110 = (const __CFString *)*MEMORY[0x1E4F248A0];
    v120 = (void *)*MEMORY[0x1E4F1F5E0];
    uint64_t v109 = (void *)*MEMORY[0x1E4F1F608];
    uint64_t v115 = *MEMORY[0x1E4F245D8];
    v119 = (void *)*MEMORY[0x1E4F1F638];
    CFStringRef v111 = (const __CFString *)*MEMORY[0x1E4F24780];
    CGRect v107 = (void *)*MEMORY[0x1E4F24410];
    CFStringRef v118 = (const __CFString *)*MEMORY[0x1E4F24740];
    CFStringRef v117 = (const __CFString *)*MEMORY[0x1E4F243F0];
    CFStringRef attribute = (const __CFString *)*MEMORY[0x1E4F245A8];
    while (1)
    {
      if (v145.length + v145.location >= v37)
      {
        setupRubyAnnotation_0(a1, a2, 0, a4);
        v162.length = CFAttributedStringGetLength(a2);
        v145.location = 0;
        v145.length = v162.length;
        v162.location = 0;
        CFAttributedStringSetAttribute(a2, v162, @"kFigSubtitleRenderer_CommonSetupDone", value);
        return 0;
      }
      v153[0] = xmmword_194999720;
      v153[1] = unk_194999730;
      CFStringRef v38 = (const __CFString *)CFRetain(@"Helvetica");
      double v142 = 0.0;
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a2, v145.length + v145.location, &v145);
      if (!Attributes)
      {
        v137 = 0;
        LODWORD(v56) = 0;
        int v138 = 0;
        int v57 = 0;
        int v58 = 0;
        BOOL v51 = 0;
        int v129 = 0;
        BOOL v136 = 0;
        uint64_t v131 = v134;
        double v46 = a4;
        goto LABEL_130;
      }
      CFDictionaryRef v40 = Attributes;
      CGColorFromCFArraCGFloat y = copyContentColor_0(*(void *)(v8 + 88), *(CGColorRef *)(v8 + 224), *(void *)(v8 + 112), Attributes, v125, *(CGFloat *)(v8 + 248));
      if (!CGColorFromCFArray) {
        CGColorFromCFArraCGFloat y = createCGColorFromCFArray(0, 0, v153);
      }
      if (CFDictionaryContainsKey(v40, key) && (CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v40, key)) != 0)
      {
        CFNumberGetValue(v42, kCFNumberCGFloatType, &v142);
        BOOL v43 = v142 >= -100.0;
        if (v142 > 100.0) {
          BOOL v43 = 0;
        }
        BOOL v136 = v43;
      }
      else
      {
        BOOL v136 = 0;
      }
      if (v128)
      {
        if (CFDictionaryContainsKey(v40, v116))
        {
          CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(v40, v116);
          CFNumberRef v45 = v44;
          LODWORD(v146.a) = 0;
          if (!v44 || (CFNumberGetValue(v44, kCFNumberIntType, &v146), LODWORD(v146.a) <= 4)) {
            CFAttributedStringSetAttribute(a2, v145, attrName, v45);
          }
        }
      }
      double v46 = a4;
      if (CFDictionaryContainsKey(v40, v130))
      {
        CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v40, v130);
        int a_low = 100;
        LODWORD(v146.a) = 100;
        if (v47)
        {
          CFNumberGetValue(v47, kCFNumberIntType, &v146);
          int a_low = LODWORD(v146.a);
        }
        double v46 = (double)a_low * a4 / 100.0;
      }
      int v49 = value == CFDictionaryGetValue(v40, v123);
      int v138 = value == CFDictionaryGetValue(v40, v122);
      if (value == CFDictionaryGetValue(v40, v121))
      {
        LODWORD(v146.a) = 1;
        CFNumberRef v50 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v146);
        CFAttributedStringSetAttribute(a2, v145, v110, v50);
        if (v50) {
          CFRelease(v50);
        }
      }
      BOOL v51 = *(unsigned __int8 *)(v8 + 64) != v49 || *(unsigned __int8 *)(v8 + 65) != v138 || *(unsigned char *)(v8 + 80);
      if (valuePtr != 2021028980 && valuePtr != 2004251764) {
        break;
      }
      if (CFDictionaryContainsKey(v40, v120))
      {
        CFStringRef v52 = (const __CFString *)CFDictionaryGetValue(v40, v120);
        if (!v52) {
          break;
        }
        CFStringRef v53 = v52;
        CFRetain(v52);
        if (v38) {
          CFRelease(v38);
        }
        int v54 = 1;
        CFStringRef v38 = v53;
        uint64_t v55 = v134;
        int v129 = 1;
      }
      else
      {
        if (!CFDictionaryContainsKey(v40, v109) || !CFDictionaryGetValue(v40, v109)) {
          break;
        }
        v146.a = 0.0;
        if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
          && (CFArrayRef v59 = *(const __CTFontDescriptor **)(v8 + 8 * *(void *)&v146.a + 288)) != 0)
        {
          if (v38) {
            CFRelease(v38);
          }
          CFStringRef v38 = (const __CFString *)CTFontDescriptorCopyAttribute(v59, attribute);
          int v54 = 1;
          uint64_t v55 = v115;
        }
        else
        {
          int v54 = 0;
          uint64_t v55 = v134;
        }
        int v129 = 0;
      }
LABEL_100:
      v137 = CGColorFromCFArray;
      if (*(void *)(v8 + 152))
      {
        if (v54)
        {
          uint64_t v131 = v55;
          goto LABEL_113;
        }
        CFTypeRef v60 = *(const __CTFontDescriptor **)(v8 + 288);
        if (v38) {
          CFRelease(v38);
        }
      }
      else
      {
        if (v38) {
          CFRelease(v38);
        }
        CFTypeRef v60 = *(const __CTFontDescriptor **)(v8 + 288);
      }
      CFStringRef v38 = (const __CFString *)CTFontDescriptorCopyAttribute(v60, attribute);
      double v61 = *(const void **)(v8 + 288);
      if (v61)
      {
        int v62 = v49;
        BOOL v63 = *(const void **)(v8 + 48);
        if (v63 && v63 == v61)
        {
          int v57 = 0;
          int v58 = 0;
          uint64_t v131 = v115;
          goto LABEL_126;
        }
        *(void *)(v8 + 48) = v61;
        CFRetain(v61);
        int v66 = 0;
        int v58 = 0;
        int v57 = 1;
        uint64_t v131 = v115;
        if (v63) {
          goto LABEL_124;
        }
        goto LABEL_126;
      }
      uint64_t v131 = v115;
LABEL_113:
      CFArrayRef v64 = *(const void **)(v8 + 48);
      if (v64)
      {
        CFRelease(v64);
        *(void *)(v8 + 48) = 0;
      }
      CFStringRef v65 = *(const __CFString **)(v8 + 56);
      if (!v65)
      {
        BOOL v63 = 0;
LABEL_119:
        int v62 = v49;
        *(void *)(v8 + 56) = v38;
        if (v38) {
          CFRetain(v38);
        }
        int v57 = 0;
        int v66 = 1;
        int v58 = 1;
        if (!v63) {
          goto LABEL_126;
        }
LABEL_124:
        CFRelease(v63);
        int v58 = v66;
        goto LABEL_126;
      }
      if (CFStringCompare(v65, v38, 0))
      {
        BOOL v63 = *(const void **)(v8 + 56);
        goto LABEL_119;
      }
      int v62 = v49;
      int v57 = 0;
      int v58 = 0;
LABEL_126:
      if (CFDictionaryContainsKey(v40, v119))
      {
        CGSize v67 = CFDictionaryGetValue(v40, v119);
        if (v67) {
          CFAttributedStringSetAttribute(a2, v145, v111, v67);
        }
      }
      LODWORD(v56) = v62;
LABEL_130:
      CGPoint v68 = *(const __CTFont **)(v8 + 40);
      if (v68)
      {
        double Size = CTFontGetSize(v68);
        uint64_t v70 = *(void *)(v8 + 40);
        if (!(v58 | v57 | v51) && v46 == Size)
        {
          float64x2_t v71 = v137;
          if (!v70) {
            goto LABEL_208;
          }
          goto LABEL_204;
        }
        if (v70)
        {
          CFRelease(*(CFTypeRef *)(v8 + 40));
          *(void *)(v8 + 40) = 0;
        }
      }
      float64x2_t v72 = *(const void **)(v8 + 48);
      CFStringRef v73 = *(const __CFString **)(v8 + 72);
      double v74 = v142;
      uint64_t v75 = CMBaseObjectGetDerivedStorage();
      if (!v38)
      {
LABEL_159:
        CGRect v82 = 0;
        float64x2_t v71 = v137;
        goto LABEL_203;
      }
      if (!v73)
      {
LABEL_150:
        uint64_t v77 = 0;
        goto LABEL_152;
      }
      uint64_t v76 = v75;
      if (CFStringCompare(@"yue", v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(@"yue-Hant", v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(@"cmn-Hant", v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(@"zh-cmn-Hant", v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(@"zh-Hant", v73, 1uLL) == kCFCompareEqualTo)
      {
        uint64_t v77 = 3;
        goto LABEL_152;
      }
      if (CFStringCompare(@"cmn-Hans", v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(@"zh-cmn-Hans", v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(@"zh-cmn", v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(@"zh-Hans", v73, 1uLL) == kCFCompareEqualTo)
      {
        uint64_t v77 = 2;
        goto LABEL_152;
      }
      if (CFStringCompare(@"ja", v73, 1uLL) && CFStringCompare(@"ja-JP", v73, 1uLL)) {
        goto LABEL_150;
      }
      if (v129)
      {
        uint64_t v77 = 1;
LABEL_152:
        if (v72)
        {
          CGFloat v78 = (const __CTFontDescriptor *)CFRetain(v72);
          CFDictionaryRef v79 = 0;
          if (v78) {
            goto LABEL_163;
          }
          goto LABEL_222;
        }
        CGFloat v80 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v80) {
          goto LABEL_159;
        }
        CFDictionaryRef v79 = v80;
        if (v134 == v131)
        {
          double v81 = (const void **)MEMORY[0x1E4F24538];
LABEL_161:
          CFDictionaryAddValue(v80, *v81, v38);
        }
        else if (v115 == v131)
        {
          double v81 = (const void **)MEMORY[0x1E4F245A8];
          goto LABEL_161;
        }
        CGFloat v78 = CTFontDescriptorCreateWithAttributes(v79);
        if (v78) {
          goto LABEL_163;
        }
        goto LABEL_222;
      }
      uint64_t v77 = 1;
      if (*(void *)(v76 + 152) != 1) {
        goto LABEL_152;
      }
      *(void *)&v146.a = 1;
      CGFloat v78 = (const __CTFontDescriptor *)MACaptionAppearanceCopyFontDescriptorForLanguage();
      CFDictionaryRef v79 = 0;
      uint64_t v77 = 1;
      if (v78)
      {
LABEL_163:
        int v132 = (int)v56;
        CTFontSymbolicTraits v83 = v56 | (2 * v138);
        CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v78, v83, 3u);
        if (!CopyWithSymbolicTraits)
        {
          if (!v132) {
            goto LABEL_174;
          }
          Suint64_t Int32 = (const __CFNumber *)FigCFNumberCreateSInt32();
          Uuint64_t Int32 = (const __CFNumber *)FigCFNumberCreateUInt32();
          CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v78, SInt32, UInt32);
          CopyWithSymbolicTraits = CopyWithFeature;
          if (!v138) {
            goto LABEL_169;
          }
          if (CopyWithFeature)
          {
            CTFontDescriptorRef v88 = CTFontDescriptorCreateCopyWithSymbolicTraits(CopyWithFeature, v83, 2u);
            if (v88)
            {
              CTFontDescriptorRef v89 = v88;
              CFRelease(CopyWithSymbolicTraits);
              CopyWithSymbolicTraits = v89;
            }
LABEL_169:
            if (SInt32) {
LABEL_170:
            }
              CFRelease(SInt32);
          }
          else
          {
            CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v78, v83, 2u);
            if (SInt32) {
              goto LABEL_170;
            }
          }
          if (UInt32) {
            CFRelease(UInt32);
          }
          if (!CopyWithSymbolicTraits) {
LABEL_174:
          }
            CopyWithSymbolicTraits = CFRetain(v78);
        }
        if (v136)
        {
          double v90 = v74 * 90.0 / 100.0;
          double v91 = 89.0;
          LOBYTE(v56) = v132;
          if (v90 < 89.0)
          {
            double v91 = v74 * 90.0 / 100.0;
            if (v90 <= -89.0) {
              double v91 = -89.0;
            }
          }
          double v92 = tan(v91 * 3.14159265 / 180.0);
          if (v112) {
            double v93 = 0.0;
          }
          else {
            double v93 = v92;
          }
          v146.a = 1.0;
          if (!v112) {
            double v92 = 0.0;
          }
          v146.double b = v93;
          v146.c = v92;
          v146.d = 1.0;
          v146.tCGFloat x = 0.0;
          v146.tCGFloat y = 0.0;
          CGRect v82 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v46, &v146);
          if (!v82) {
            CGRect v82 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v46, 0);
          }
          if (!v82)
          {
LABEL_198:
            float64x2_t v71 = v137;
            goto LABEL_199;
          }
        }
        else
        {
          CGRect v82 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v46, 0);
          LOBYTE(v56) = v132;
          if (!v82) {
            goto LABEL_198;
          }
        }
        if ((v77 & 2) == 0) {
          goto LABEL_198;
        }
        if (!v79) {
          goto LABEL_198;
        }
        *(void *)&v146.a = qword_1E57A4038[v77];
        CFArrayRef v94 = CFArrayCreate(allocator, (const void **)&v146, 1, MEMORY[0x1E4F1D510]);
        if (!v94) {
          goto LABEL_198;
        }
        CFArrayRef v95 = v94;
        CFArrayRef v96 = CTFontCopyDefaultCascadeListForLanguages(v82, v94);
        float64x2_t v71 = v137;
        if (v96)
        {
          CFArrayRef v56 = v96;
          CFDictionarySetValue(v79, v107, v96);
          CFRelease(v78);
          CFRelease(v82);
          CFRange v97 = CTFontDescriptorCreateWithAttributes(v79);
          CGFloat v78 = v97;
          if (v97) {
            CGRect v82 = CTFontCreateWithFontDescriptor(v97, v46, 0);
          }
          else {
            CGRect v82 = 0;
          }
          CFRelease(v56);
          CFRelease(v95);
          LOBYTE(v56) = v132;
          if (!v78)
          {
            if (!CopyWithSymbolicTraits)
            {
LABEL_201:
              if (!v79) {
                goto LABEL_203;
              }
LABEL_202:
              CFRelease(v79);
              goto LABEL_203;
            }
LABEL_200:
            CFRelease(CopyWithSymbolicTraits);
            goto LABEL_201;
          }
        }
        else
        {
          CFRelease(v95);
          LOBYTE(v56) = v132;
        }
LABEL_199:
        CFRelease(v78);
        if (!CopyWithSymbolicTraits) {
          goto LABEL_201;
        }
        goto LABEL_200;
      }
LABEL_222:
      CGRect v82 = 0;
      float64x2_t v71 = v137;
      if (v79) {
        goto LABEL_202;
      }
LABEL_203:
      *(void *)(v8 + 40) = v82;
      *(unsigned char *)(v8 + 80) = 0;
      *(unsigned char *)(v8 + 64) = (_BYTE)v56;
      *(unsigned char *)(v8 + 65) = v138;
      if (!v82) {
        goto LABEL_208;
      }
LABEL_204:
      char TextAlignment = 0;
      char TextAlignment = getTextAlignment(a2);
      double Ascent = CTFontGetAscent(*(CTFontRef *)(v8 + 40));
      double Descent = CTFontGetDescent(*(CTFontRef *)(v8 + 40));
      double v140 = 0.0;
      CFRange v100 = *(const __CTFont **)(v8 + 40);
      double v101 = CTFontGetAscent(v100);
      double v102 = CTFontGetDescent(v100);
      double Leading = CTFontGetLeading(v100);
      if (Leading <= (v101 + v102) * 0.2) {
        double Leading = (v101 + v102) * 0.2;
      }
      double v140 = Leading;
      double v139 = Ascent + Descent + Leading;
      LODWORD(v146.a) = 0;
      *(void *)&v146.double b = 1;
      *(void *)&v146.c = &TextAlignment;
      LODWORD(v146.d) = 15;
      *(void *)&v146.tCGFloat x = 8;
      *(void *)&v146.tCGFloat y = &v140;
      int v147 = 14;
      uint64_t v148 = 8;
      v149 = &v140;
      int v150 = 8;
      uint64_t v151 = 8;
      v152 = &v139;
      CTParagraphStyleRef v104 = CTParagraphStyleCreate((const CTParagraphStyleSetting *)&v146, 4uLL);
      CFAttributedStringSetAttribute(a2, v145, v118, v71);
      CFAttributedStringSetAttribute(a2, v145, v117, *(CFTypeRef *)(v8 + 40));
      if (!v104)
      {
LABEL_208:
        uint64_t v105 = 4294955204;
        goto LABEL_209;
      }
      CFAttributedStringSetAttribute(a2, v145, v113, v104);
      CFRelease(v104);
      uint64_t v105 = 0;
LABEL_209:
      CFIndex v37 = range;
      CGColorRelease(v71);
      if (v38) {
        CFRelease(v38);
      }
      if (v105) {
        return v105;
      }
    }
    int v54 = 0;
    int v129 = 0;
    uint64_t v55 = v134;
    goto LABEL_100;
  }
  return 4294955204;
}

uint64_t getTextAlignment(const __CFAttributedString *a1)
{
  v6.location = 0;
  v6.length = 0;
  CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(a1, 0, (CFStringRef)*MEMORY[0x1E4F1F538], &v6);
  if (Attribute)
  {
    CFStringRef v3 = Attribute;
    if (CFStringCompare(Attribute, (CFStringRef)*MEMORY[0x1E4F1F528], 0))
    {
      if (CFStringCompare(v3, (CFStringRef)*MEMORY[0x1E4F1F510], 0))
      {
        unsigned __int8 v4 = 1;
        if (CFStringCompare(v3, (CFStringRef)*MEMORY[0x1E4F1F508], 0))
        {
          if (CFStringCompare(v3, (CFStringRef)*MEMORY[0x1E4F1F520], 0)) {
            return 2;
          }
          else {
            return 1;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4;
    }
  }
  else
  {
    return (2 * (CFAttributedStringGetAttribute(a1, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &v6) == 0));
  }
  return v4;
}

void setupRubyAnnotation_0(uint64_t a1, CFAttributedStringRef aStr, int a3, double a4)
{
  CFAttributedStringRef v5 = aStr;
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  CFIndex Length = CFAttributedStringGetLength(aStr);
  if (Length >= 1)
  {
    CFIndex v7 = Length;
    CFIndex v8 = 0;
    CFTypeRef v9 = (const void *)*MEMORY[0x1E4F24740];
    CFNumberRef v10 = (const void *)*MEMORY[0x1E4F1F6B8];
    keCGFloat y = (void *)*MEMORY[0x1E4F1F6C0];
    CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F8F0];
    CFStringRef v37 = (const __CFString *)*MEMORY[0x1E4F1F8E0];
    CFStringRef v38 = (const __CFString *)*MEMORY[0x1E4F1F8C0];
    CFStringRef v35 = (const __CFString *)*MEMORY[0x1E4F1F8D0];
    CFStringRef v36 = (const __CFString *)*MEMORY[0x1E4F1F8C8];
    CFStringRef v33 = (const __CFString *)*MEMORY[0x1E4F1F8B8];
    CFStringRef v34 = (const __CFString *)*MEMORY[0x1E4F1F8E8];
    int v49 = (void *)*MEMORY[0x1E4F1F6C8];
    CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F243D0];
    double v11 = a4 * 0.5;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    double v46 = (void *)*MEMORY[0x1E4F247A8];
    CFNumberRef v45 = (const void *)*MEMORY[0x1E4F247A0];
    CFNumberRef v44 = (const void *)*MEMORY[0x1E4F1CFD0];
    int v41 = (void *)*MEMORY[0x1E4F247B8];
    CFDictionaryRef v40 = (void *)*MEMORY[0x1E4F247C0];
    double v48 = (void *)*MEMORY[0x1E4F1F6D0];
    CFStringRef v47 = (const __CFString *)*MEMORY[0x1E4F24798];
    while (1)
    {
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(v5, v8, &effectiveRange);
      if (Attributes)
      {
        CFDictionaryRef v14 = Attributes;
        CFDictionaryRef v15 = CFDictionaryContainsKey(Attributes, v9) ? CFDictionaryGetValue(v14, v9) : 0;
        if (CFDictionaryContainsKey(v14, v10)) {
          break;
        }
      }
LABEL_44:
      CFIndex v8 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v7) {
        return;
      }
    }
    CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(v14, v10);
    CFStringRef String = CFAttributedStringGetString(Value);
    v53.location = 0;
    v53.length = 0;
    CFDictionaryRef v18 = CFAttributedStringGetAttributes(Value, 0, &v53);
    CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(v18, key);
    if (v19)
    {
      CFStringRef v20 = v19;
      if (CFEqual(v19, theString2))
      {
        CTRubyAlignment v21 = kCTRubyAlignmentStart;
        goto LABEL_22;
      }
      if (CFStringCompare(v20, v38, 0))
      {
        if (CFStringCompare(v20, v37, 0))
        {
          if (CFStringCompare(v20, v36, 0))
          {
            if (CFStringCompare(v20, v35, 0))
            {
              if (CFStringCompare(v20, v34, 0)) {
                CTRubyAlignment v21 = 2 * (CFStringCompare(v20, v33, 0) != kCFCompareEqualTo);
              }
              else {
                CTRubyAlignment v21 = kCTRubyAlignmentLineEdge;
              }
            }
            else
            {
              CTRubyAlignment v21 = kCTRubyAlignmentDistributeSpace;
            }
          }
          else
          {
            CTRubyAlignment v21 = kCTRubyAlignmentDistributeLetter;
          }
        }
        else
        {
          CTRubyAlignment v21 = kCTRubyAlignmentEnd;
        }
        goto LABEL_22;
      }
    }
    CTRubyAlignment v21 = kCTRubyAlignmentCenter;
LABEL_22:
    unsigned int v22 = CFDictionaryGetValue(v18, v49);
    if (v22) {
      CFAttributedStringSetAttribute(v5, effectiveRange, attrName, v22);
    }
    CFArrayRef v56 = 0;
    uint64_t valuePtr = 0x3FE0000000000000;
    CFNumberRef v55 = 0;
    if (a3 == 2) {
      calculateStrokeAttributes(v11, a1, &v56, &v55);
    }
    CGMutablePathRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef theDict = v18;
      CTRubyAlignment v24 = v21;
      CFAttributedStringRef v25 = v5;
      CFStringRef v26 = String;
      CFIndex v27 = v7;
      CFStringRef v28 = v10;
      CFNumberRef v29 = CFNumberCreate(v12, kCFNumberCGFloatType, &valuePtr);
      CFDictionaryAddValue(Mutable, v46, v29);
      if (v29) {
        CFRelease(v29);
      }
      CFDictionaryAddValue(Mutable, v45, v44);
      CFDictionaryAddValue(Mutable, v9, v15);
      if (v56) {
        CFDictionaryAddValue(Mutable, v41, v56);
      }
      CFNumberRef v10 = v28;
      if (v55) {
        CFDictionaryAddValue(Mutable, v40, v55);
      }
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v12, Mutable);
      CFIndex v7 = v27;
      CFStringRef String = v26;
      CFAttributedStringRef v5 = v25;
      CTRubyAlignment v21 = v24;
      CFDictionaryRef v18 = theDict;
    }
    else
    {
      FigSignalErrorAt();
      CFDictionaryRef Copy = 0;
    }
    if (v56) {
      CFRelease(v56);
    }
    if (v55) {
      CFRelease(v55);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFDictionaryGetValue(v18, v48);
    CTRubyPosition v31 = FigCFEqual() != 0;
    CTRubyAnnotationRef v32 = CTRubyAnnotationCreateWithAttributes(v21, kCTRubyOverhangNone, v31, String, Copy);
    CFAttributedStringSetAttribute(v5, effectiveRange, v47, v32);
    if (v32) {
      CFRelease(v32);
    }
    if (Copy) {
      CFRelease(Copy);
    }
    goto LABEL_44;
  }
}

void calculateStrokeAttributes(double a1, uint64_t a2, void *a3, CFNumberRef *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 > 0.0)
  {
    uint64_t v8 = DerivedStorage;
    components[0] = *(CGFloat *)(DerivedStorage + 152);
    CGColorRef CopyWithAlpha = (const void *)MACaptionAppearanceCopyStrokeColor();
    if (!CopyWithAlpha)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      if (DeviceRGB)
      {
        double v11 = DeviceRGB;
        *(_OWORD *)components = xmmword_194999740;
        long long v19 = unk_194999750;
        CFAllocatorRef v12 = CGColorCreate(DeviceRGB, components);
        CGColorRef CopyWithAlpha = CGColorCreateCopyWithAlpha(v12, *(CGFloat *)(v8 + 248));
        CGColorRelease(v12);
        CGColorSpaceRelease(v11);
      }
      else
      {
        CGColorRef CopyWithAlpha = 0;
      }
    }
    MACaptionAppearanceGetStrokeWidth();
    double v14 = v13 + v13;
    if (*(unsigned char *)(v8 + 361)) {
      double v14 = v14 * 100.0 / a1;
    }
    components[0] = v14;
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, components);
    if (v16)
    {
      if (a3)
      {
LABEL_10:
        *a3 = CopyWithAlpha;
LABEL_16:
        if (a4)
        {
          *a4 = v16;
        }
        else if (v16)
        {
          CFRelease(v16);
        }
        return;
      }
    }
    else
    {
      double v17 = a1 * 0.147058824;
      if (a1 > 60.0) {
        double v17 = a1 * 0.147058824 * 0.5;
      }
      components[0] = v17;
      CFNumberRef v16 = CFNumberCreate(v15, kCFNumberCGFloatType, components);
      if (a3) {
        goto LABEL_10;
      }
    }
    if (CopyWithAlpha) {
      CFRelease(CopyWithAlpha);
    }
    goto LABEL_16;
  }
}

void subtitleRendererLayoutDo(double *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)a1;
  CFDictionaryRef v3 = (const __CFDictionary *)*((void *)v1 + 1);
  double v5 = v1[2];
  double v4 = v1[3];
  double v7 = v1[6];
  double v6 = v1[7];
  *(_OWORD *)CFStringRef attrName = *((_OWORD *)v1 + 4);
  *(_OWORD *)CFTypeRef value = *((_OWORD *)v1 + 2);
  long long v478 = *((_OWORD *)v1 + 5);
  long long v506 = *((_OWORD *)v1 + 6);
  char v495 = *((unsigned char *)v1 + 112);
  double v8 = *(double *)((char *)v1 + 116);
  int v489 = *((_DWORD *)v1 + 31);
  CFTypeRef v9 = (double *)*((void *)v1 + 16);
  v413 = (CFDictionaryRef *)*((void *)v1 + 17);
  uint64_t v454 = v2;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  int valuePtr = 0;
  effectiveRange.length = 0;
  effectiveRange.location = 0;
  if (!*DerivedStorage)
  {
    int v26 = 0;
    goto LABEL_483;
  }
  if (!v9)
  {
    int v26 = FigSignalErrorAt();
    CFIndex v27 = v413;
    if (v26) {
      goto LABEL_481;
    }
    goto LABEL_483;
  }
  double v11 = v9;
  CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
  if (!v3)
  {
    int v26 = -12090;
    CFIndex v27 = v413;
    goto LABEL_480;
  }
  double v13 = DerivedStorage;
  v410 = v9;
  CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(v3, @"SubtitleContent");
  if (!v14 || !CFArrayGetCount(v14))
  {
    int v26 = -12090;
    CFIndex v27 = v413;
    double v11 = v9;
    goto LABEL_480;
  }
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex Count = CFDictionaryGetCount(v3);
  MutableCFAttributedStringRef Copy = CFDictionaryCreateMutableCopy(v15, Count, v3);
  if (!MutableCopy)
  {
    int v26 = FigSignalErrorAt();
    goto LABEL_479;
  }
  CFDictionaryRef v18 = MutableCopy;
  BOOL v20 = v8 < 1.0 && v8 != 0.0 || v8 == -1.0;
  double v21 = fabs(v8);
  if (!v20) {
    double v21 = 0.9;
  }
  float64x2_t v22 = vmulq_n_f64(*(float64x2_t *)value, v21);
  double v424 = v22.f64[1];
  double v425 = v4;
  v405 = v1;
  float64x2_t v428 = v22;
  if (v7 == 0.0 || v6 == 0.0)
  {
    long long v24 = *MEMORY[0x1E4F1DAB8];
    long long v25 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    uint64_t v23 = (float64x2_t *)(MEMORY[0x1E4F1DAB8] + 32);
    double v6 = v22.f64[1];
    double v7 = v22.f64[0];
  }
  else
  {
    uint64_t v23 = (float64x2_t *)&v506;
    long long v25 = v478;
    long long v24 = *(_OWORD *)attrName;
  }
  float64x2_t v505 = *v23;
  *(_OWORD *)&rect.double a = v24;
  *(_OWORD *)&rect.double c = v25;
  *(float64x2_t *)&rect.tCGFloat x = v505;
  double v474 = v21;
  CGAffineTransformScale(&v511, &rect, v21, v21);
  double a = v511.a;
  double b = v511.b;
  double c = v511.c;
  double d = v511.d;
  float64x2_t v505 = *(float64x2_t *)&v511.tx;
  valuedouble a = (const __CFNumber *)CFDictionaryGetValue(v18, @"SubtitleFormat");
  CFNumberGetValue(valuea, kCFNumberSInt32Type, &valuePtr);
  CTRubyAnnotationRef v32 = CFDictionaryGetValue(v18, @"SubtitleExtendedLanguageTag");
  if (!FigCFEqual())
  {
    CFStringRef v33 = (const void *)*((void *)v13 + 9);
    *((void *)v13 + 9) = v32;
    if (v32) {
      CFRetain(v32);
    }
    if (v33) {
      CFRelease(v33);
    }
    v13[80] = 1;
  }
  CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(v18, @"SubtitleContent");
  CFStringRef v35 = CFDictionaryGetValue(v18, @"kFigSubtitleRenderer_ObeySubtitleFormatting");
  int64_t v36 = CFArrayGetCount(v34);
  CGMutablePathRef Mutable = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable || (v446 = malloc_type_calloc(v36, 0x98uLL, 0x1000040C7D30508uLL)) == 0)
  {
    int v402 = FigSignalErrorAt();
    CFDictionaryRef v403 = v18;
    goto LABEL_475;
  }
  CGFloat v414 = v5;
  CFDictionaryRef theDict = v18;
  CFStringRef v456 = (const __CFString *)*MEMORY[0x1E4F1F720];
  CFStringRef v431 = (const __CFString *)*MEMORY[0x1E4F1F9C0];
  CFAllocatorRef alloc = v15;
  CFArrayRef theArray = Mutable;
  v408 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v36 >= 1)
  {
    CFIndex v38 = 0;
    uint64_t range_8 = 0;
    double v39 = v6 * d;
    double v40 = v6 * c + a * v7;
    double v41 = v39 + b * v7;
    CFStringRef v468 = (const __CFString *)*MEMORY[0x1E4F1F700];
    CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F9B8];
    CFStringRef v466 = (const __CFString *)*MEMORY[0x1E4F1F668];
    CFStringRef v458 = (const __CFString *)*MEMORY[0x1E4F1F660];
    CFStringRef v463 = (const __CFString *)*MEMORY[0x1E4F1F728];
    BOOL v479 = v35 == (const void *)*MEMORY[0x1E4F1CFD0];
    __asm { FMOV            V1.2D, #0.5 }
    float64x2_t v475 = vmulq_f64(vmulq_n_f64(v428, 1.0 - v474), _Q1);
    uint64_t v45 = v454;
    while (1)
    {
      CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v34, v38);
      if (ValueAtIndex)
      {
        CFAttributedStringRef v47 = ValueAtIndex;
        if (CFAttributedStringGetLength(ValueAtIndex)) {
          break;
        }
      }
LABEL_71:
      if (v36 == ++v38) {
        goto LABEL_74;
      }
    }
    v518.length = CFAttributedStringGetLength(v47);
    v518.location = 0;
    CFAttributedStringSetAttribute(v47, v518, @"kFigSubtitleRenderer_SourceFormat", valuea);
    double v48 = (float64x2_t *)&v446[19 * range_8];
    v48[6].f64[0] = a;
    v48[6].f64[1] = b;
    v48[7].f64[0] = c;
    v48[7].f64[1] = d;
    v48[8] = v505;
    v48->f64[0] = v5;
    v48->f64[1] = v425;
    v48[1] = v428;
    v48[2].f64[0] = v40;
    v48[2].f64[1] = v41;
    LODWORD(v48[9].f64[0]) = v489;
    if (valuePtr != 2021028980 && valuePtr != 2004251764)
    {
      long long v52 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)&rect.double a = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)&rect.double c = v52;
      v446[19 * range_8 + 11] = 0x3FECCCCCCCCCCCCDLL;
      CFDictionaryRef v53 = (const __CFDictionary *)CFDictionaryGetValue(v18, @"kFigSubtitleRenderer_TextBox");
      if (v53) {
        CGRectMakeWithDictionaryRepresentation(v53, (CGRect *)&rect);
      }
      v535.origin.CGFloat x = rect.a;
      v535.origin.CGFloat y = rect.b;
      v535.size.double width = rect.c;
      v535.size.CGFloat height = rect.d;
      v511.double a = a;
      v511.double b = b;
      v511.double c = c;
      v511.double d = d;
      *(float64x2_t *)&v511.tCGFloat x = v505;
      CGRect v536 = CGRectApplyAffineTransform(v535, &v511);
      int v54 = v446;
      uint64_t v55 = range_8;
      CFArrayRef v56 = (double *)&v446[19 * range_8];
      double v57 = v536.origin.y + v536.size.height * 0.5;
      v56[8] = v40 * 0.5;
      goto LABEL_68;
    }
    v511.double a = 50.0;
    rect.double a = 100.0;
    LODWORD(v512.location) = 0;
    v517.location = 0xC059000000000000;
    CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(v47, 0, v456, &effectiveRange);
    CFNumberRef v50 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v468, &effectiveRange);
    if (Attribute)
    {
      if (CFEqual(Attribute, theString2))
      {
        v511.double a = 0.0;
        if (!v50) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
      v511.double a = 100.0;
    }
    if (!v50)
    {
LABEL_41:
      CFNumberRef v51 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v466, &effectiveRange);
      rect.double a = 100.0;
      if (Attribute)
      {
        if (CFStringCompare(Attribute, theString2, 0)) {
          rect.double a = 0.0;
        }
        else {
          rect.double a = 100.0;
        }
      }
      int v58 = (char *)&v446[19 * range_8];
      v58[80] = 0;
      CFArrayRef v59 = v58 + 80;
      if (v51)
      {
        CFNumberGetValue(v51, kCFNumberCGFloatType, &rect);
        if (Attribute && CFEqual(Attribute, v431)) {
          rect.double a = 100.0 - rect.a;
        }
      }
      else
      {
        CFNumberRef v60 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v458, &effectiveRange);
        if (v60)
        {
          CFNumberGetValue(v60, kCFNumberIntType, &v512);
          *CFArrayRef v59 = 1;
        }
      }
      CFNumberRef v61 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v463, &effectiveRange);
      if (v61) {
        CFNumberGetValue(v61, kCFNumberCGFloatType, &v517);
      }
      uint64_t v55 = range_8;
      *(double *)&v446[19 * range_8 + 11] = *(double *)&v517.location / 100.0;
      if (Attribute)
      {
        CGMutablePathRef Mutable = theArray;
        if (*v59) {
          double location_low = (double)SLODWORD(v512.location);
        }
        else {
          double location_low = v40 * (rect.a / 100.0);
        }
        CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
        int v54 = v446;
        double v57 = v41 * ((100.0 - v511.a) / 100.0);
        *(double *)&v446[19 * range_8 + 8] = location_low;
      }
      else
      {
        CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
        if (v51) {
          double v57 = v41 * ((100.0 - rect.a) / 100.0);
        }
        else {
          double v57 = (double)SLODWORD(v512.location);
        }
        int v54 = v446;
        *(double *)&v446[19 * range_8 + 8] = v40 * (v511.a / 100.0);
        CGMutablePathRef Mutable = theArray;
      }
      CFArrayRef v56 = (double *)&v54[19 * range_8];
LABEL_68:
      v56[9] = v57;
      BOOL v63 = &v54[19 * v55];
      *((unsigned char *)v63 + 81) = v479;
      *((unsigned char *)v63 + 82) = v495;
      *((_DWORD *)v63 + 21) = valuePtr;
      *((float64x2_t *)v63 + 3) = v475;
      CFIndex Length = CFAttributedStringGetLength(v47);
      CFMutableAttributedStringRef v65 = CFAttributedStringCreateMutableCopy(alloc, Length, v47);
      if (v65)
      {
        CFMutableAttributedStringRef v66 = v65;
        CFArrayAppendValue(Mutable, v65);
        CFRelease(v66);
        uint64_t range_8 = v55 + 1;
      }
      uint64_t v45 = v454;
      goto LABEL_71;
    }
LABEL_40:
    CFNumberGetValue(v50, kCFNumberCGFloatType, &v511);
    goto LABEL_41;
  }
  uint64_t range_8 = 0;
  uint64_t v45 = v454;
LABEL_74:
  double v420 = *v12;
  double v433 = v12[1];
  double v437 = v12[3];
  double v438 = v12[2];
  CFStringRef v444 = (const __CFString *)*MEMORY[0x1E4F21E90];
  CFStringRef v422 = (const __CFString *)*MEMORY[0x1E4F1F550];
  double v439 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  double v440 = *MEMORY[0x1E4F1DB30];
  v406 = (const void *)*MEMORY[0x1E4F1F630];
  v407 = (void *)*MEMORY[0x1E4F24768];
  v415 = (void *)*MEMORY[0x1E4F1F5A0];
  CFStringRef v443 = (const __CFString *)*MEMORY[0x1E4F1F5B8];
  CFStringRef v432 = (const __CFString *)*MEMORY[0x1E4F1F768];
  CFStringRef v423 = (const __CFString *)*MEMORY[0x1E4F1F770];
  double v419 = v5 + v428.f64[0];
  double v67 = 1.0;
  double v68 = 0.5;
  CFStringRef v442 = (const __CFString *)*MEMORY[0x1E4F1F5C0];
  CFStringRef v451 = (const __CFString *)*MEMORY[0x1E4F1F780];
  CFStringRef v421 = (const __CFString *)*MEMORY[0x1E4F1F790];
  CFStringRef v441 = (const __CFString *)*MEMORY[0x1E4F1F788];
  double v467 = 1.0;
  CFAllocatorRef v69 = alloc;
  uint64_t v70 = (char *)v446;
  do
  {
    while (1)
    {
      uint64_t v416 = CMBaseObjectGetDerivedStorage();
      CFIndex v453 = CFArrayGetCount(Mutable);
      if (v453 >= 1)
      {
        for (CFIndex i = 0; i != v453; ++i)
        {
          CFAttributedStringRef v72 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, i);
          CFStringRef v73 = &v70[152 * i];
          double v74 = *((double *)v73 + 2);
          double v75 = *((double *)v73 + 3);
          double v76 = *((double *)v73 + 4);
          double v77 = *((double *)v73 + 5);
          CFStringRef v469 = *((CFStringRef *)v73 + 7);
          theString2double a = *((CFStringRef *)v73 + 6);
          valuedouble b = *((double *)v73 + 8);
          double v490 = *((double *)v73 + 9);
          int v459 = v73[80];
          theCFDataRef Data = v73[81];
          int v464 = v73[82];
          int v78 = *((_DWORD *)v73 + 21);
          double v79 = *((double *)v73 + 11);
          double v80 = *((double *)v73 + 13);
          double v81 = *((double *)v73 + 15);
          int v82 = *((_DWORD *)v73 + 36);
          uint64_t v83 = CMBaseObjectGetDerivedStorage();
          double v509 = 0.0;
          double v507 = 0.0;
          *(_DWORD *)(v83 + 32) = v82;
          double v480 = v75;
          double v496 = v76;
          _NF = vabdd_f64(v76, v74) < 0.1;
          double v457 = (v75 - v77) * v68;
          if (_NF) {
            double v85 = (v75 - v77) * v68;
          }
          else {
            double v85 = 0.0;
          }
          attrNamedouble a = v85;
          if (_NF) {
            double v86 = 0.0;
          }
          else {
            double v86 = (v74 - v76) * v68;
          }
          double v508 = v77 * 0.15 / 3.0;
          if (v78 != 1954034535)
          {
            v511.double b = 0.0;
            v511.double a = 0.0;
            CFNumberRef v87 = (const __CFNumber *)CFAttributedStringGetAttribute(v72, 0, v444, (CFRange *)&v511);
            if (v87)
            {
              CFNumberGetValue(v87, kCFNumberCGFloatType, &v508);
              double v508 = v80 + v81 * v508;
            }
            else
            {
              CFNumberRef v135 = (const __CFNumber *)CFAttributedStringGetAttribute(v72, 0, v422, (CFRange *)&v511);
              if (v135)
              {
                rect.double a = 0.0;
                CFNumberGetValue(v135, kCFNumberCGFloatType, &rect);
                if (*(void *)(v83 + 144) == 1)
                {
                  double v89 = v77 * rect.a / 100.0;
                  if (v89 > 0.0) {
                    goto LABEL_88;
                  }
                }
              }
            }
          }
          double v88 = *(double *)(v83 + 280);
          double v89 = v508;
          if (v88 > 0.0) {
            double v89 = v88 * v508;
          }
LABEL_88:
          double v509 = v467 * v89;
          double v90 = attrNamea;
          double v67 = 1.0;
          CFNumberRef v91 = CFNumberCreate(v69, kCFNumberCGFloatType, &v509);
          v519.length = CFAttributedStringGetLength(v72);
          v519.location = 0;
          CFAttributedStringSetAttribute(v72, v519, @"kFigSubtitleRenderer_FontSizeToUse", v91);
          CFRelease(v91);
          double v92 = *(double *)(v83 + 280);
          CGFloat v93 = v509;
          uint64_t v94 = CMBaseObjectGetDerivedStorage();
          double v476 = v86;
          if (!v72)
          {
            double v134 = v437;
            double v114 = v438;
            double v99 = v496;
            goto LABEL_177;
          }
          uint64_t v95 = v94;
          double v96 = -v79;
          if (v79 >= 0.0) {
            double v96 = v79;
          }
          double v97 = v467 * v92;
          if (v92 <= 0.0) {
            double v97 = 1.0;
          }
          double v98 = v96 * v97;
          if (v98 > 1.0) {
            double v98 = 1.0;
          }
          double v507 = 0.0;
          double v99 = v496;
          double v100 = v496 * v98;
          v512.location = 0;
          v512.length = 0;
          int v455 = subtitleRendererSetupText(v45, v72, 0, v93);
          CFStringRef v101 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v456, &v512);
          CFStringRef v102 = v101;
          if (v101) {
            CGFloat v103 = v100;
          }
          else {
            CGFloat v103 = v77;
          }
          if (v101) {
            CGFloat v104 = v77;
          }
          else {
            CGFloat v104 = v100;
          }
          CFIndex v105 = CFAttributedStringGetLength(v72);
          if (v105 < 1)
          {
            double v134 = v439;
            double v114 = v440;
            uint64_t v45 = v454;
            double v67 = 1.0;
            goto LABEL_173;
          }
          CFIndex v106 = v105;
          framesetter = CTFramesetterCreateWithAttributedString(v72);
          if (!framesetter)
          {
            uint64_t v45 = v454;
            double v67 = 1.0;
LABEL_176:
            double v114 = v99;
            double v134 = v77;
            goto LABEL_177;
          }
          frameCFDictionaryRef Attributes = createFrameAttributesDictionary(v102);
          if (!*(_DWORD *)(v95 + 28))
          {
            CFIndex v136 = CFAttributedStringGetLength(v72);
            v137 = CGPathCreateMutable();
            uint64_t v45 = v454;
            if (v137)
            {
              int v138 = v137;
              double width = 0.0;
              v541.origin.CGFloat x = 0.0;
              v541.origin.CGFloat y = 0.0;
              v541.size.double width = v104;
              v541.size.CGFloat height = v103;
              CGPathAddRect(v137, 0, v541);
              v521.location = 0;
              v521.length = v136;
              v450 = v138;
              double v140 = CTFramesetterCreateFrame(framesetter, v521, v138, frameAttributes);
              double v141 = 0.0;
              if (v140)
              {
                cfdouble a = v140;
                CFArrayRef Lines = CTFrameGetLines(v140);
                if (Lines)
                {
                  CFArrayRef v143 = Lines;
                  CFIndex v144 = CFArrayGetCount(Lines);
                  if (v144 >= 1)
                  {
                    rangedouble a = v136;
                    CGFloat descent = 0.0;
                    CGFloat ascent = 0.0;
                    CGFloat leading = 0.0;
                    CFIndex v145 = v144;
                    CGAffineTransform v146 = (const __CTLine *)CFArrayGetValueAtIndex(v143, 0);
                    CTLineGetTypographicBounds(v146, &ascent, &descent, &leading);
                    double v418 = ascent;
                    double v147 = leading;
                    framedouble a = descent;
                    int v513 = 0;
                    CFNumberRef v148 = (const __CFNumber *)CFDictionaryGetValue(frameAttributes, v407);
                    if (!v148 || (CFNumberGetValue(v148, kCFNumberSInt32Type, &v513), !v513))
                    {
                      CFIndex v149 = 0;
                      float v150 = v93 / 5.0;
                      double v151 = v150;
                      do
                      {
                        v152 = (const __CTLine *)CFArrayGetValueAtIndex(v143, v149);
                        CFArrayRef v153 = v143;
                        CFIndex v154 = v145;
                        CFRange v155 = v152;
                        CFRange StringRange = CTLineGetStringRange(v152);
                        v517.location = 0;
                        v517.length = 0;
                        CFDictionaryRef Attributes = CFAttributedStringGetAttributes(v72, StringRange.length + StringRange.location - 1, &v517);
                        CFRange v158 = CFDictionaryGetValue(Attributes, v406);
                        CFRange v159 = v155;
                        CFIndex v145 = v154;
                        CFArrayRef v143 = v153;
                        double TypographicBounds = CTLineGetTypographicBounds(v159, &ascent, &descent, &leading);
                        if (v158 == v408) {
                          double v161 = v151;
                        }
                        else {
                          double v161 = 0.0;
                        }
                        double v162 = TypographicBounds + v161;
                        if (width < v162) {
                          double width = v162;
                        }
                        ++v149;
                      }
                      while (v145 != v149);
                    }
                    double v141 = v418 + framea + v147;
                    CFAllocatorRef v69 = alloc;
                    uint64_t v45 = v454;
                    CFIndex v136 = rangea;
                  }
                }
                CFRelease(cfa);
                CGMutablePathRef Mutable = theArray;
                uint64_t v70 = (char *)v446;
              }
              CFRelease(v450);
              v163.location = 0;
            }
            else
            {
              v163.location = 0;
              double width = 0.0;
              double v141 = 0.0;
            }
            double v507 = v141;
            v163.length = v136;
            v534.double width = v104;
            v534.CGFloat height = v103;
            CGSize v164 = CTFramesetterSuggestFrameSizeWithConstraints(framesetter, v163, 0, v534, 0);
            if (v164.width >= width) {
              double width = v164.width;
            }
            uint64_t v165 = CMBaseObjectGetDerivedStorage();
            v517.location = 0;
            v517.length = 0;
            CFDictionaryRef v166 = CFAttributedStringGetAttributes(v72, 0, &v517);
            uint64_t EdgeStyle = getEdgeStyle(*(void *)(v165 + 216), *(void *)(v165 + 352), v166, v415);
            if (EdgeStyle == 4)
            {
              double v168 = v141 * 10.0 / 100.0;
              double v67 = 1.0;
            }
            else
            {
              double v67 = 1.0;
              if (EdgeStyle != 3)
              {
                double v168 = 0.0;
                double v90 = attrNamea;
                if (EdgeStyle == 2)
                {
                  double v168 = v93 * 0.0882352941;
                  if (v93 > 60.0) {
                    double v168 = v168 / 1.5;
                  }
                }
LABEL_163:
                *(double *)&v517.location = v168;
                CFIndex v169 = CFAttributedStringGetLength(v72);
                CFNumberRef v170 = CFNumberCreate(v69, kCFNumberCGFloatType, &v517);
                if (v170)
                {
                  CFNumberRef v171 = v170;
                  v522.location = 0;
                  v522.length = v169;
                  CFAttributedStringSetAttribute(v72, v522, @"kFigSubtitleRenderer_CompensationInTextLayout", v170);
                  CFRelease(v171);
                }
                double v114 = width + *(double *)&v517.location * 2.0;
                double v113 = v164.height + *(double *)&v517.location * 2.0;
                double v99 = v496;
                CFDictionaryRef v109 = frameAttributes;
                if (!frameAttributes) {
                  goto LABEL_172;
                }
                goto LABEL_171;
              }
              double v168 = v93 * 0.0882352941;
              if (v93 > 60.0) {
                double v168 = v93 * 0.0882352941 / 1.5;
              }
            }
            double v90 = attrNamea;
            goto LABEL_163;
          }
          CGRect v107 = CGPathCreateMutable();
          uint64_t v45 = v454;
          if (v107)
          {
            CGRect v108 = v107;
            v537.origin.CGFloat x = 0.0;
            v537.origin.CGFloat y = 0.0;
            v537.size.double width = v104;
            v537.size.CGFloat height = v103;
            CGPathAddRect(v107, 0, v537);
            v520.location = 0;
            v520.length = v106;
            CFDictionaryRef v109 = frameAttributes;
            CFStringRef v110 = CTFramesetterCreateFrame(framesetter, v520, v108, frameAttributes);
            if (v110)
            {
              CFStringRef v111 = v110;
              CFArrayRef v112 = CTFrameGetLines(v110);
              double v113 = v439;
              double v114 = v440;
              double v67 = 1.0;
              if (v112)
              {
                CFArrayRef v115 = v112;
                CFIndex v116 = CFArrayGetCount(v112);
                double v113 = v439;
                double v114 = v440;
                if (v116)
                {
                  CFIndex v117 = v116;
                  frame = v111;
                  CFIndex range = v116 - 1;
                  if (v116 < 1)
                  {
                    double cf = 0.0;
                    double v449 = 0.0;
                    double v114 = v440;
                    double v123 = 0.0;
                    double v122 = 0.0;
                    CGFloat v121 = 0.0;
                    CGFloat v120 = 0.0;
                    CGFloat v119 = 0.0;
                    CGFloat v417 = 0.0;
                  }
                  else
                  {
                    CFIndex v118 = 0;
                    CGFloat v417 = 0.0;
                    CGFloat v119 = 0.0;
                    CGFloat v120 = 0.0;
                    CGFloat v121 = 0.0;
                    double v122 = 0.0;
                    double v123 = 0.0;
                    double cf = 0.0;
                    double v449 = 0.0;
                    double v124 = v440;
                    do
                    {
                      v125 = (const __CTLine *)CFArrayGetValueAtIndex(v115, v118);
                      if (!v125) {
                        goto LABEL_122;
                      }
                      v126 = v125;
                      if (v118)
                      {
                        CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(v125, 0x10uLL);
                        double v114 = BoundsWithOptions.size.width;
                      }
                      else
                      {
                        CGRect v539 = CTLineGetBoundsWithOptions(v125, 0);
                        CGFloat x = v539.origin.x;
                        CGFloat y = v539.origin.y;
                        CGFloat v129 = v539.size.width;
                        CGFloat height = v539.size.height;
                        CGRect v580 = CTLineGetBoundsWithOptions(v126, 8uLL);
                        v540.origin.CGFloat x = x;
                        v540.origin.CGFloat y = y;
                        v540.size.double width = v129;
                        v540.size.CGFloat height = height;
                        CGRect BoundsWithOptions = CGRectUnion(v540, v580);
                        double v114 = v131;
                        CGFloat v121 = BoundsWithOptions.size.height;
                        CGFloat v120 = v131;
                        CGFloat v119 = BoundsWithOptions.origin.y;
                        CGFloat v417 = BoundsWithOptions.origin.x;
                      }
                      if (range == v118) {
                        double v132 = BoundsWithOptions.size.height;
                      }
                      else {
                        double v132 = v449;
                      }
                      double v133 = cf;
                      if (range == v118) {
                        double v133 = v114;
                      }
                      double cf = v133;
                      double v449 = v132;
                      if (range == v118)
                      {
                        double v123 = BoundsWithOptions.origin.y;
                        double v122 = BoundsWithOptions.origin.x;
                      }
                      if (v124 >= v114) {
LABEL_122:
                      }
                        double v114 = v124;
                      ++v118;
                      double v124 = v114;
                    }
                    while (v117 != v118);
                  }
                  double v507 = v121;
                  v517.location = 0;
                  v517.length = 0;
                  CFStringRef v111 = frame;
                  v523.location = 0;
                  v523.length = 1;
                  CTFrameGetLineOrigins(frame, v523, (CGPoint *)&v517);
                  CGAffineTransformMakeTranslation(&v511, 0.0, *(CGFloat *)&v517.length);
                  v542.origin.CGFloat x = v417;
                  v542.origin.CGFloat y = v119;
                  v542.size.double width = v120;
                  v542.size.CGFloat height = v121;
                  CGRect v543 = CGRectApplyAffineTransform(v542, &v511);
                  double MaxY = CGRectGetMaxY(v543);
                  v524.location = range;
                  v524.length = 1;
                  CTFrameGetLineOrigins(frame, v524, (CGPoint *)&v517);
                  CGAffineTransformMakeTranslation(&rect, 0.0, *(CGFloat *)&v517.length);
                  v544.origin.CGFloat x = v122;
                  v544.origin.CGFloat y = v123;
                  v544.size.double width = cf;
                  v544.size.CGFloat height = v449;
                  CGRect v545 = CGRectApplyAffineTransform(v544, &rect);
                  double v67 = 1.0;
                  double v113 = MaxY - CGRectGetMinY(v545) + 1.0;
                  double v90 = attrNamea;
                  double v99 = v496;
                  CFDictionaryRef v109 = frameAttributes;
                }
              }
              CFRelease(v111);
              CGMutablePathRef Mutable = theArray;
              uint64_t v45 = v454;
            }
            else
            {
              int v455 = -12092;
              double v113 = v439;
              double v114 = v440;
              double v67 = 1.0;
            }
            CFRelease(v108);
            uint64_t v70 = (char *)v446;
            if (!v109) {
              goto LABEL_172;
            }
          }
          else
          {
            double v113 = v439;
            double v114 = v440;
            CFDictionaryRef v109 = frameAttributes;
            uint64_t v70 = (char *)v446;
            double v67 = 1.0;
            if (!frameAttributes) {
              goto LABEL_172;
            }
          }
LABEL_171:
          CFRelease(v109);
LABEL_172:
          double v134 = ceil(v113);
          CFRelease(framesetter);
LABEL_173:
          CFIndex v173 = CFAttributedStringGetLength(v72);
          CFNumberRef v174 = CFNumberCreate(v69, kCFNumberCGFloatType, &v507);
          if (v174)
          {
            CFNumberRef v175 = v174;
            v525.location = 0;
            v525.length = v173;
            CFAttributedStringSetAttribute(v72, v525, @"kFigSubtitleRenderer_SuggestLineHeight", v174);
            CFRelease(v175);
          }
          if (v455) {
            goto LABEL_176;
          }
LABEL_177:
          if (v78 != 1954034535)
          {
            v511.double b = 0.0;
            v511.double a = 0.0;
            CFStringRef v183 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v456, (CFRange *)&v511);
            if (v183)
            {
              if (v459)
              {
                if (valueb <= 0.0) {
                  double v184 = -(valueb * v507);
                }
                else {
                  double v184 = v99 - valueb * v507;
                }
                valuedouble b = v184;
              }
              double v180 = v134;
              double v134 = v114;
            }
            else
            {
              if (v459)
              {
                if (v490 <= 0.0) {
                  double v185 = -(v490 * v507);
                }
                else {
                  double v185 = v77 - v490 * v507;
                }
                double v490 = v185;
              }
              double v180 = v114;
            }
            CFStringRef v186 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v443, (CFRange *)&v511);
            double v181 = v476;
            if (v186)
            {
              CFStringRef v187 = v186;
              if (CFStringCompare(v186, v432, 0))
              {
                if (CFStringCompare(v187, v423, 0)) {
                  goto LABEL_195;
                }
                if (v183)
                {
                  double v178 = v476 + valueb + v180 * -0.5;
LABEL_203:
                  double v179 = v433;
LABEL_210:
                  CFStringRef v192 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v442, (CFRange *)&v511);
                  if (!v192)
                  {
                    int TextAlignment = getTextAlignment(v72);
                    CFStringRef v194 = v451;
                    if (TextAlignment != 1) {
                      CFStringRef v194 = v441;
                    }
                    if ((TextAlignment & 3) != 0) {
                      CFStringRef v192 = v194;
                    }
                    else {
                      CFStringRef v192 = v421;
                    }
                  }
                  if (CFStringCompare(v192, v451, 0))
                  {
                    if (CFStringCompare(v192, v441, 0))
                    {
                      double v182 = *(double *)&v469;
                      double v176 = *(double *)&theString2a;
                      if (v183) {
                        double v179 = v90 + v490 - v134;
                      }
                      else {
                        double v178 = v476 + valueb;
                      }
LABEL_226:
                      double v177 = v496;
                      goto LABEL_227;
                    }
                    double v195 = v476 + valueb + v180 * -0.5;
                    double v196 = v90 + v490 + v134 * -0.5;
                  }
                  else
                  {
                    double v195 = v476 + valueb - v180;
                    double v196 = v90 + v490;
                  }
                  if (v183) {
                    double v179 = v196;
                  }
                  else {
                    double v178 = v195;
                  }
                  double v182 = *(double *)&v469;
                  double v176 = *(double *)&theString2a;
                  goto LABEL_226;
                }
                double v179 = v90 + v490 + v134 * -0.5;
LABEL_209:
                double v178 = v420;
                goto LABEL_210;
              }
              if (!v183)
              {
                double v179 = v90 + v490;
                goto LABEL_209;
              }
              CFComparisonResult v191 = CFStringCompare(v183, v431, 0);
              double v189 = v476 + valueb;
              double v190 = 0.0;
              if (v191) {
                double v190 = v180;
              }
            }
            else
            {
LABEL_195:
              if (!v183)
              {
                double v179 = v90 + v490 - v134;
                goto LABEL_209;
              }
              CFComparisonResult v188 = CFStringCompare(v183, v431, 0);
              double v189 = v476 + valueb;
              double v190 = 0.0;
              if (v188 == kCFCompareEqualTo) {
                double v190 = v180;
              }
            }
            double v178 = v189 - v190;
            goto LABEL_203;
          }
          double v176 = *(double *)&theString2a;
          double v177 = v99;
          double v178 = v99 * 0.5 + v476 - v114 * 0.5;
          double v179 = v90 + v490 - v134 * 0.5;
          double v180 = v114;
          double v181 = v476;
          double v182 = *(double *)&v469;
LABEL_227:
          if (v178 + v180 <= v177 + v181)
          {
            if (v178 < v181) {
              double v197 = v181;
            }
            else {
              double v197 = v178;
            }
          }
          else
          {
            double v197 = v177 + v181 - v180;
          }
          double v68 = 0.5;
          double v198 = v77 + v90;
          if (v179 + v134 <= v77 + v90)
          {
            if (v179 < v90) {
              double v179 = v90;
            }
          }
          else
          {
            double v179 = v198 - v134;
          }
          double v199 = v134 * 0.5;
          double v200 = v134 * 0.5 + v179;
          if (v78 == 1954034535)
          {
            double v201 = v480;
            double v202 = v480 - v200;
            if (!theData) {
              double v202 = v134 * 0.5 + v179;
            }
            double v203 = v77 * 0.5;
            double v204 = v77 * 0.5 + v90;
            if (v464)
            {
              if (v202 <= v204)
              {
                if (v457 >= v134) {
                  double v200 = v480 * 0.5 - v203 - v199;
                }
                else {
                  double v200 = v134 * 0.5;
                }
              }
              else
              {
                double v200 = v480 * 0.5 + v203 + v199;
                if (v457 < v134) {
                  double v200 = v480 - v199;
                }
              }
            }
            else if (v202 <= v204)
            {
              double v200 = v90 + v199;
            }
            else
            {
              double v200 = v198 - v199;
            }
          }
          else
          {
            double v201 = v480;
          }
          double v205 = v180 * 0.5 + v197;
          if (*(_DWORD *)(v83 + 32) == 1) {
            double v200 = v201 - v200;
          }
          v546.origin.CGFloat x = v176 + v205 - v180 * 0.5;
          v546.origin.CGFloat y = v182 + v200 - v199;
          v546.size.double width = v180;
          v546.size.CGFloat height = v134;
          CGRect v547 = CGRectIntegral(v546);
          double v206 = v547.origin.x;
          double v207 = v547.origin.y;
          double v208 = v547.size.width;
          double v209 = v547.size.height;
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v547);
          v526.length = CFAttributedStringGetLength(v72);
          v526.location = 0;
          CFAttributedStringSetAttribute(v72, v526, @"kFigSubtitleRenderer_SuggestTextLayout", DictionaryRepresentation);
          CFRelease(DictionaryRepresentation);
          if (*(double *)(CMBaseObjectGetDerivedStorage() + 264) > 0.0)
          {
            v511.double b = 0.0;
            v511.double a = 0.0;
            rect.double a = 0.0;
            CFNumberRef v211 = (const __CFNumber *)CFAttributedStringGetAttribute(v72, 0, @"kFigSubtitleRenderer_SuggestLineHeight", (CFRange *)&v511);
            if (v211)
            {
              CFNumberGetValue(v211, kCFNumberCGFloatType, &rect);
              double v212 = rect.a;
            }
            else
            {
              double v212 = 0.0;
            }
            v548.origin.CGFloat y = v207 - v212 / 20.0;
            v548.origin.CGFloat x = v206 - v212 / 20.0;
            double v213 = v212 / 10.0;
            v548.size.CGFloat height = v209 + v213;
            v548.size.double width = v208 + v213;
            CGRect v549 = CGRectIntegral(v548);
            double v206 = v549.origin.x;
            double v207 = v549.origin.y;
            double v208 = v549.size.width;
            double v209 = v549.size.height;
          }
          v550.origin.CGFloat x = v206;
          v550.origin.CGFloat y = v207;
          v550.size.double width = v208;
          v550.size.CGFloat height = v209;
          CFDictionaryRef v214 = CGRectCreateDictionaryRepresentation(v550);
          if (v214)
          {
            CFDictionaryRef v215 = v214;
            v527.length = CFAttributedStringGetLength(v72);
            v527.location = 0;
            CFAttributedStringSetAttribute(v72, v527, @"kFigSubtitleRenderer_SuggestLayout", v215);
            CFRelease(v215);
          }
        }
      }
      CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
      CGFloat v216 = v414;
      double v217 = v425;
      if (*(_DWORD *)(v416 + 24) > 1u) {
        goto LABEL_437;
      }
      uint64_t v218 = CMBaseObjectGetDerivedStorage();
      uint64_t v219 = CFArrayGetCount(Mutable);
      if (v219 <= 1) {
        goto LABEL_437;
      }
      uint64_t v220 = v219;
      CFMutableArrayRef v221 = CFArrayCreateMutable(v69, v219, 0);
      if (v221) {
        break;
      }
      double v467 = v467 + -0.1;
      if (v467 <= 0.0) {
        goto LABEL_437;
      }
    }
    v222 = v221;
    CFIndex v223 = 0;
    rect.double b = 0.0;
    rect.double a = 0.0;
    double v225 = v425 + v424;
    double v224 = v419;
    double v226 = -1.0;
    do
    {
      long long v227 = *((_OWORD *)v12 + 1);
      *(_OWORD *)&v511.double a = *(_OWORD *)v12;
      *(_OWORD *)&v511.double c = v227;
      CFAttributedStringRef v228 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v223);
      CFDictionaryRef v229 = (const __CFDictionary *)CFAttributedStringGetAttribute(v228, 0, @"kFigSubtitleRenderer_SuggestLayout", (CFRange *)&rect);
      if (v229) {
        CGRectMakeWithDictionaryRepresentation(v229, (CGRect *)&v511);
      }
      v230 = malloc_type_calloc(1uLL, 0xC8uLL, 0x1020040DCB5435FuLL);
      if (!v230) {
        goto LABEL_358;
      }
      v231 = v230;
      *((_DWORD *)v230 + 48) = 0;
      CFMutableArrayRef v232 = CFArrayCreateMutable(v69, 0, 0);
      *((void *)v231 + 4) = v232;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)((char *)v231 + 40) = _Q0;
      *(_OWORD *)((char *)v231 + 56) = _Q0;
      if (!v232)
      {
        free(v231);
LABEL_358:
        int v311 = 1;
        uint64_t v70 = (char *)v446;
        uint64_t v45 = v454;
        goto LABEL_416;
      }
      long long v234 = *(_OWORD *)&v511.c;
      _OWORD *v231 = *(_OWORD *)&v511.a;
      v231[1] = v234;
      CFArrayAppendValue(v222, v231);
      ++v223;
    }
    while (v220 != v223);
    int v235 = *(_DWORD *)(v218 + 24);
    uint64_t v481 = v220;
    if (v235 == 1)
    {
      CFIndex v312 = CFArrayGetCount(v222);
      uint64_t v313 = (v312 - 1) * v312;
      uint64_t v70 = (char *)v446;
      uint64_t v45 = v454;
      if (v313 >= 1)
      {
        CFIndex v314 = CFArrayGetCount(v222);
        resetOverlaps(v222);
        surveyOverlaps(v222);
        if (v314 >= 1)
        {
          BOOL v315 = 0;
          uint64_t v316 = v313 & ~(v313 >> 63);
          uint64_t v317 = 1;
          while (1)
          {
            int v318 = 0;
            CFIndex v319 = 0;
            int v320 = 0;
            do
            {
              v321 = (CFArrayRef *)CFArrayGetValueAtIndex(v222, v319);
              if (*((int *)v321 + 48) <= 0)
              {
                v322 = v321;
                if (CFArrayGetCount(v321[4]) >= 1)
                {
                  CFIndex v323 = CFArrayGetCount(v322[4]);
                  if (v323 < 1)
                  {
                    int v320 = 0;
                  }
                  else
                  {
                    CFIndex v324 = v323;
                    CFIndex v325 = 0;
                    int v320 = 0;
                    double v326 = *((double *)v322 + 1) + *((double *)v322 + 3) * v68;
                    do
                    {
                      v327 = (double *)CFArrayGetValueAtIndex(v322[4], v325);
                      double v328 = v327[1];
                      double v329 = v327[3] * v68;
                      double v330 = v328 + v329;
                      double v331 = v329 + *((double *)v322 + 3) * v68 - vabdd_f64(v326, v328 + v329);
                      if (v331 > 0.0 && !*((_DWORD *)v327 + 48))
                      {
                        if (v330 <= v326) {
                          double v332 = -v331;
                        }
                        else {
                          double v332 = v331;
                        }
                        v327[1] = v328 + v332;
                        int v320 = 1;
                        *((_DWORD *)v327 + 48) = 1;
                      }
                      ++v325;
                    }
                    while (v324 != v325);
                  }
                  BOOL v315 = 1;
                  int v318 = 1;
                }
              }
              ++v319;
            }
            while (v319 != v314);
            if (!v318 || v320)
            {
              uint64_t v70 = (char *)v446;
              uint64_t v45 = v454;
              if (!v318 || v317 == v316) {
                goto LABEL_388;
              }
            }
            else
            {
              resetNumMoves(v222);
              uint64_t v70 = (char *)v446;
              uint64_t v45 = v454;
              if (v317 == v316) {
                goto LABEL_388;
              }
            }
            ++v317;
            CFIndex v314 = CFArrayGetCount(v222);
            resetOverlaps(v222);
            surveyOverlaps(v222);
            if (v314 <= 0) {
              goto LABEL_388;
            }
          }
        }
      }
      BOOL v315 = 0;
LABEL_388:
      sublayout_unionCFDataRects(v222);
      if (v333 <= v424)
      {
        uint64_t v220 = v481;
        if (surveyOverlaps(v222))
        {
          int v465 = 1;
          CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
          CFAllocatorRef v69 = alloc;
        }
        else
        {
          v551.origin.CGFloat x = sublayout_unionCFDataRects(v222);
          CGFloat v334 = v551.origin.x;
          CGFloat v335 = v551.origin.y;
          CGFloat v336 = v551.size.width;
          CGFloat v497 = v551.size.height;
          double MinX = CGRectGetMinX(v551);
          v552.origin.CGFloat x = v414;
          v552.origin.CGFloat y = v425;
          v552.size.double width = v428.f64[0];
          v552.size.CGFloat height = v424;
          if (MinX >= CGRectGetMinX(v552))
          {
            v558.origin.CGFloat x = v414;
            v558.origin.CGFloat y = v425;
            v558.size.double width = v428.f64[0];
            v558.size.CGFloat height = v424;
            double MaxX = CGRectGetMaxX(v558);
            v559.origin.CGFloat x = v334;
            v559.origin.CGFloat y = v335;
            v559.size.double width = v336;
            v559.size.CGFloat height = v497;
            CGFloat v357 = CGRectGetMaxX(v559);
            double v339 = 0.0;
            CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
            CFAllocatorRef v69 = alloc;
            if (MaxX < v357)
            {
              v560.origin.CGFloat x = v334;
              v560.origin.CGFloat y = v335;
              v560.size.double width = v336;
              v560.size.CGFloat height = v497;
              double v358 = CGRectGetMaxX(v560);
              v561.origin.CGFloat x = v414;
              v561.origin.CGFloat y = v425;
              v561.size.double width = v428.f64[0];
              v561.size.CGFloat height = v424;
              double v339 = -(v358 - CGRectGetMaxX(v561));
            }
          }
          else
          {
            v553.origin.CGFloat x = v414;
            v553.origin.CGFloat y = v425;
            v553.size.double width = v428.f64[0];
            v553.size.CGFloat height = v424;
            double v338 = CGRectGetMinX(v553);
            v554.origin.CGFloat x = v334;
            v554.origin.CGFloat y = v335;
            v554.size.double width = v336;
            v554.size.CGFloat height = v497;
            double v339 = v338 - CGRectGetMinX(v554);
            CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
            CFAllocatorRef v69 = alloc;
          }
          v562.origin.CGFloat x = v334;
          v562.origin.CGFloat y = v335;
          v562.size.double width = v336;
          v562.size.CGFloat height = v497;
          double MinY = CGRectGetMinY(v562);
          v563.origin.CGFloat x = v414;
          v563.origin.CGFloat y = v425;
          v563.size.double width = v428.f64[0];
          v563.size.CGFloat height = v424;
          if (MinY >= CGRectGetMinY(v563))
          {
            v566.origin.CGFloat x = v414;
            v566.origin.CGFloat y = v425;
            v566.size.double width = v428.f64[0];
            v566.size.CGFloat height = v424;
            double v362 = CGRectGetMaxY(v566);
            v567.origin.CGFloat x = v334;
            v567.origin.CGFloat y = v335;
            v567.size.double width = v336;
            v567.size.CGFloat height = v497;
            CGFloat v363 = CGRectGetMaxY(v567);
            double v361 = 0.0;
            if (v362 < v363)
            {
              v568.origin.CGFloat x = v334;
              v568.origin.CGFloat y = v335;
              v568.size.double width = v336;
              v568.size.CGFloat height = v497;
              double v364 = CGRectGetMaxY(v568);
              v569.origin.CGFloat x = v414;
              v569.origin.CGFloat y = v425;
              v569.size.double width = v428.f64[0];
              v569.size.CGFloat height = v424;
              double v361 = -(v364 - CGRectGetMaxY(v569));
            }
          }
          else
          {
            v564.origin.CGFloat x = v414;
            v564.origin.CGFloat y = v425;
            v564.size.double width = v428.f64[0];
            v564.size.CGFloat height = v424;
            double v360 = CGRectGetMinY(v564);
            v565.origin.CGFloat x = v334;
            v565.origin.CGFloat y = v335;
            v565.size.double width = v336;
            v565.size.CGFloat height = v497;
            double v361 = v360 - CGRectGetMinY(v565);
          }
          v570.origin.CGFloat x = v334;
          v570.origin.CGFloat y = v335;
          v570.size.double width = v336;
          v570.size.CGFloat height = v497;
          CGRect v571 = CGRectOffset(v570, v339, v361);
          CGFloat v365 = v571.origin.x;
          CGFloat v366 = v571.origin.y;
          CGFloat v367 = v571.size.width;
          CGFloat v368 = v571.size.height;
          double v492 = CGRectGetMinX(v571);
          v572.origin.CGFloat x = v334;
          v572.origin.CGFloat y = v335;
          v572.size.double width = v336;
          v572.size.CGFloat height = v497;
          valuedouble c = CGRectGetMinX(v572);
          v573.origin.CGFloat x = v365;
          v573.origin.CGFloat y = v366;
          v573.size.double width = v367;
          v573.size.CGFloat height = v368;
          double v369 = CGRectGetMinY(v573);
          v574.origin.CGFloat x = v334;
          v574.origin.CGFloat y = v335;
          v574.size.double width = v336;
          v574.size.CGFloat height = v497;
          double v370 = CGRectGetMinY(v574);
          CFIndex v371 = CFArrayGetCount(v222);
          double v68 = 0.5;
          if (v371 < 1)
          {
            int v465 = 0;
            CGFloat v216 = v414;
            double v217 = v425;
            uint64_t v45 = v454;
            double v67 = 1.0;
          }
          else
          {
            CFIndex v372 = v371;
            CFIndex v373 = 0;
            double v67 = 1.0;
            do
            {
              v374 = (CGRect *)CFArrayGetValueAtIndex(v222, v373);
              CGRect *v374 = CGRectOffset(*v374, v492 - valuec, v369 - v370);
              ++v373;
            }
            while (v372 != v373);
            int v465 = 0;
            CGFloat v216 = v414;
            double v217 = v425;
            uint64_t v70 = (char *)v446;
            uint64_t v45 = v454;
          }
        }
      }
      else
      {
        int v465 = 1;
        CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
        CFAllocatorRef v69 = alloc;
        uint64_t v220 = v481;
      }
      goto LABEL_400;
    }
    uint64_t v70 = (char *)v446;
    uint64_t v45 = v454;
    if (v235 || (v236 = CFArrayGetCount(v222), (theDatadouble a = CFDataCreateMutable(v69, 0)) == 0))
    {
      int v311 = 1;
      goto LABEL_416;
    }
    uint64_t v460 = (v236 - 1) * v236;
    if (v460 < 1)
    {
      CFStringRef v470 = 0;
LABEL_393:
      int v465 = 1;
      goto LABEL_399;
    }
    CFStringRef v470 = 0;
    theString2double b = (CFStringRef)v222;
    while (1)
    {
      resetOverlaps(v222);
      int v465 = surveyOverlaps(v222);
      if (!v465)
      {
        int v465 = 0;
        CFStringRef v470 = (CFStringRef)((char *)v470 + 1);
        goto LABEL_399;
      }
      uint64_t v237 = CFArrayGetCount(v222);
      if (v237 >= 1)
      {
        for (CFIndex j = 0; j != v237; ++j)
        {
          v239 = (CGFloat *)CFArrayGetValueAtIndex(v222, j);
          v239[5] = v414;
          v239[6] = v224;
          v239[7] = v225;
          v239[8] = v217;
        }
      }
      v240 = CFArrayCreateMutableCopy(v69, 0, v222);
      if (v240)
      {
        CFArrayRef v241 = v240;
        v528.location = 0;
        v528.length = v237;
        CFArraySortValues(v240, v528, (CFComparatorFunction)objComparatorX, 0);
        v242 = (double *)CFArrayGetValueAtIndex(v241, 0);
        v243 = v242;
        v242[5] = v414;
        if (v237 >= 2)
        {
          for (CFIndex k = 1; k != v237; ++k)
          {
            v242 = (double *)CFArrayGetValueAtIndex(v241, k);
            double v245 = v242[2] * v68;
            double v246 = v243[2] * v68;
            v243[6] = v246 + *v242 + v245 + v226;
            v242[5] = v246 + *v243 + v67 - v245;
            v243 = v242;
          }
        }
        v242[6] = v224;
        v529.location = 0;
        v529.length = v237;
        CFArraySortValues(v241, v529, (CFComparatorFunction)objComparatorY, 0);
        v247 = (double *)CFArrayGetValueAtIndex(v241, 0);
        v248 = v247;
        v247[8] = v217;
        if (v237 >= 2)
        {
          for (CFIndex m = 1; m != v237; ++m)
          {
            v247 = (double *)CFArrayGetValueAtIndex(v241, m);
            double v250 = v247[3] * v68;
            double v251 = v248[3] * v68;
            v248[7] = v251 + v247[1] + v250 + v226;
            v247[8] = v251 + v248[1] + v67 - v250;
            v248 = v247;
          }
        }
        v247[7] = v225;
        CFRelease(v241);
        uint64_t v70 = (char *)v446;
      }
      CFIndex v252 = CFArrayGetCount(v222);
      if (v252 < 1)
      {
        int v465 = 1;
        uint64_t v45 = v454;
        goto LABEL_399;
      }
      CFIndex v253 = v252;
      attrNamedouble b = 0;
      CFIndex v254 = 0;
      CFIndex v255 = -1;
      double v256 = 0.0;
      uint64_t v45 = v454;
      CFIndex v477 = v252;
      do
      {
        v257 = (char *)CFArrayGetValueAtIndex(v222, v254);
        if (!v257) {
          goto LABEL_331;
        }
        v258 = v257;
        if (*((int *)v257 + 48) > 0)
        {
          attrNamedouble b = 1;
          goto LABEL_331;
        }
        CFIndex v491 = v255;
        double v260 = *((double *)v257 + 5);
        double v259 = *((double *)v257 + 6);
        double v261 = *((double *)v257 + 7);
        double v262 = *((double *)v257 + 8);
        CFIndex v263 = CFArrayGetCount(*((CFArrayRef *)v257 + 4));
        if (v263 >= 1)
        {
          CFIndex v264 = v263;
          CFIndex v265 = 0;
          double v266 = *(double *)v258 + *((double *)v258 + 2) * 0.5;
          v267 = (double *)(v258 + 96);
          v268 = (double *)(v258 + 72);
          double v269 = *((double *)v258 + 1) + *((double *)v258 + 3) * 0.5;
          v270 = (double *)(v258 + 128);
          v271 = (double *)(v258 + 152);
          do
          {
            v272 = (double *)CFArrayGetValueAtIndex(*((CFArrayRef *)v258 + 4), v265);
            double v273 = v272[3];
            double v274 = v272[2] * 0.5;
            double v275 = v272[1];
            double v276 = *v272 + v274;
            double v277 = *((double *)v258 + 3);
            double v278 = v274 + *((double *)v258 + 2) * 0.5 - vabdd_f64(v266, v276);
            if (v266 >= v276)
            {
              v279 = (double *)(v258 + 96);
              v280 = (double *)(v258 + 112);
              if (*v267 == 0.0 || (v279 = (double *)(v258 + 96), v280 = (double *)(v258 + 112), v278 < *v267)) {
LABEL_302:
              }
                double *v279 = v278;
            }
            else
            {
              v279 = (double *)(v258 + 72);
              v280 = (double *)(v258 + 88);
              if (*v268 == 0.0) {
                goto LABEL_302;
              }
              v279 = (double *)(v258 + 72);
              v280 = (double *)(v258 + 88);
              if (v278 < *v268) {
                goto LABEL_302;
              }
            }
            double v281 = v273 * 0.5;
            double v282 = v275 + v281;
            double v283 = v281 + v277 * 0.5 - vabdd_f64(v269, v275 + v281);
            double *v280 = v283 + *v280;
            if (v269 >= v282)
            {
              v284 = (double *)(v258 + 128);
              v285 = (double *)(v258 + 136);
              if (*v270 != 0.0)
              {
                v284 = (double *)(v258 + 128);
                v285 = (double *)(v258 + 136);
                if (v283 >= *v270) {
                  goto LABEL_310;
                }
              }
            }
            else
            {
              v284 = (double *)(v258 + 152);
              v285 = (double *)(v258 + 160);
              if (*v271 != 0.0)
              {
                v284 = (double *)(v258 + 152);
                v285 = (double *)(v258 + 160);
                if (v283 >= *v271) {
                  goto LABEL_310;
                }
              }
            }
            double *v284 = v283;
LABEL_310:
            double *v285 = v278 + *v285;
            ++v265;
          }
          while (v264 != v265);
        }
        CGFloat v286 = v259 - v260;
        CGFloat v287 = v261 - v262;
        *((double *)v258 + 9) = -*((double *)v258 + 9);
        *((double *)v258 + 19) = -*((double *)v258 + 19);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 72), v260, v262, v286, v287);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 96), v260, v262, v286, v287);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 144), v260, v262, v286, v287);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 120), v260, v262, v286, v287);
        double v288 = *((double *)v258 + 11);
        double v289 = *((double *)v258 + 14);
        BOOL v290 = v288 <= v289;
        if (v288 <= v289) {
          double v288 = *((double *)v258 + 14);
        }
        uint64_t v291 = 96;
        if (!v290) {
          uint64_t v291 = 72;
        }
        uint64_t v292 = *(void *)&v258[v291];
        double v293 = *((double *)v258 + 17);
        double v294 = *((double *)v258 + 20);
        BOOL v295 = v293 <= v294;
        if (v293 <= v294) {
          double v293 = *((double *)v258 + 20);
        }
        uint64_t v296 = 152;
        if (!v295) {
          uint64_t v296 = 128;
        }
        uint64_t v297 = *(void *)&v258[v296];
        if (v288 > 0.0 || v293 > 0.0)
        {
          BOOL v298 = v288 > 0.0 && *((double *)v258 + 2) < *((double *)v258 + 3);
          CFAllocatorRef v69 = alloc;
          uint64_t v70 = (char *)v446;
          uint64_t v45 = v454;
          double v225 = v425 + v424;
          double v224 = v419;
          double v67 = 1.0;
          double v68 = 0.5;
          double v226 = -1.0;
          uint64_t v220 = v481;
          CFIndex v255 = v491;
          CFIndex v253 = v477;
          if (v298)
          {
            *((void *)v258 + 21) = v292;
            *((void *)v258 + 22) = 0;
            *((double *)v258 + 23) = v288;
          }
          else
          {
            *((void *)v258 + 21) = 0;
            double v288 = v293;
            *((void *)v258 + 22) = v297;
            *((double *)v258 + 23) = v293;
          }
          v222 = (__CFArray *)theString2b;
        }
        else
        {
          *((void *)v258 + 21) = 0;
          *((void *)v258 + 22) = 0;
          double v288 = 0.0;
          *((void *)v258 + 23) = 0;
          CFAllocatorRef v69 = alloc;
          uint64_t v70 = (char *)v446;
          uint64_t v45 = v454;
          double v225 = v425 + v424;
          double v224 = v419;
          double v67 = 1.0;
          double v68 = 0.5;
          double v226 = -1.0;
          v222 = (__CFArray *)theString2b;
          CFIndex v253 = v477;
          uint64_t v220 = v481;
          CFIndex v255 = v491;
        }
        if (v256 < v288)
        {
          CFIndex v255 = v254;
          double v256 = v288;
        }
LABEL_331:
        ++v254;
      }
      while (v254 != v253);
      if (v256 > 0.0) {
        break;
      }
      CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
      double v217 = v425;
      if (!attrNameb) {
        goto LABEL_393;
      }
      resetNumMoves(v222);
      CFStringRef v310 = (CFStringRef)((char *)v470 - 1);
LABEL_355:
      CFStringRef v470 = (CFStringRef)((char *)&v310->isa + 1);
      if ((uint64_t)&v310->isa + 1 >= v460) {
        goto LABEL_399;
      }
    }
    v299 = (char *)CFArrayGetValueAtIndex(v222, v255);
    CFAllocatorRef v12 = (double *)MEMORY[0x1E4F1DB28];
    double v217 = v425;
    if (v299)
    {
      *(float64x2_t *)v299 = vaddq_f64(*(float64x2_t *)(v299 + 168), *(float64x2_t *)v299);
      ++*((_DWORD *)v299 + 48);
    }
    CFIndex v300 = CFArrayGetCount(v222);
    if (!v300) {
      goto LABEL_353;
    }
    int64_t v301 = CFDataGetLength(theDataa) / (unint64_t)(200 * v300);
    if (v301 < 1)
    {
LABEL_347:
      if (v300 < 1)
      {
LABEL_353:
        uint64_t v45 = v454;
        uint64_t v220 = v481;
      }
      else
      {
        CFIndex v308 = 0;
        uint64_t v220 = v481;
        do
        {
          v309 = (const UInt8 *)CFArrayGetValueAtIndex(v222, v308);
          CFDataAppendBytes(theDataa, v309, 200);
          ++v308;
        }
        while (v300 != v308);
        uint64_t v45 = v454;
      }
      CFStringRef v310 = v470;
      goto LABEL_355;
    }
    BytePtr = CFDataGetBytePtr(theDataa);
    uint64_t v303 = 0;
    while (1)
    {
      if (v300 < 1)
      {
        int v304 = 0;
      }
      else
      {
        int v304 = 0;
        CFIndex v305 = 0;
        v306 = BytePtr;
        do
        {
          v307 = CFArrayGetValueAtIndex(v222, v305);
          if (!memcmp(v306, v307, 0xC8uLL)) {
            ++v304;
          }
          ++v305;
          v306 += 200;
        }
        while (v300 != v305);
      }
      if (v300 == v304) {
        break;
      }
      ++v303;
      BytePtr += 200 * v300;
      CFAllocatorRef v69 = alloc;
      uint64_t v70 = (char *)v446;
      if (v303 == v301) {
        goto LABEL_347;
      }
    }
    int v465 = 1;
    CFAllocatorRef v69 = alloc;
    uint64_t v70 = (char *)v446;
    uint64_t v45 = v454;
    uint64_t v220 = v481;
LABEL_399:
    CFRelease(theDataa);
    BOOL v315 = (uint64_t)v470 > 1;
LABEL_400:
    if (v315)
    {
      CFIndex v340 = 0;
      CGMutablePathRef Mutable = theArray;
      do
      {
        CFAttributedStringRef v341 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v340);
        v342 = (CGRect *)CFArrayGetValueAtIndex(v222, v340);
        if (v341)
        {
          p_CGFloat x = &v342->origin.x;
          if (v342)
          {
            CFDictionaryRef v344 = CGRectCreateDictionaryRepresentation(*v342);
            v530.length = CFAttributedStringGetLength(v341);
            v530.location = 0;
            CFAttributedStringSetAttribute(v341, v530, @"kFigSubtitleRenderer_SuggestLayout", v344);
            CFRelease(v344);
            double v345 = *p_x;
            double v346 = p_x[1];
            double v347 = p_x[2];
            double v348 = p_x[3];
            if (*(double *)(CMBaseObjectGetDerivedStorage() + 264) <= 0.0)
            {
              CGMutablePathRef Mutable = theArray;
            }
            else
            {
              v511.double b = 0.0;
              v511.double a = 0.0;
              v517.location = 0;
              CFNumberRef v349 = (const __CFNumber *)CFAttributedStringGetAttribute(v341, 0, @"kFigSubtitleRenderer_SuggestLineHeight", (CFRange *)&v511);
              if (v349)
              {
                CFNumberGetValue(v349, kCFNumberCGFloatType, &v517);
                double v350 = *(double *)&v517.location;
              }
              else
              {
                double v350 = 0.0;
              }
              CGMutablePathRef Mutable = theArray;
              v555.origin.CGFloat y = v346 + v350 / 20.0;
              v555.origin.CGFloat x = v345 + v350 / 20.0;
              double v351 = v350 / 10.0;
              v555.size.CGFloat height = v348 - v351;
              v555.size.double width = v347 - v351;
              CGRect v556 = CGRectIntegral(v555);
              double v345 = v556.origin.x;
              double v346 = v556.origin.y;
              double v347 = v556.size.width;
              double v348 = v556.size.height;
            }
            v557.origin.CGFloat x = v345;
            v557.origin.CGFloat y = v346;
            v557.size.double width = v347;
            v557.size.CGFloat height = v348;
            CFDictionaryRef v352 = CGRectCreateDictionaryRepresentation(v557);
            double v217 = v425;
            if (v352)
            {
              CFDictionaryRef v353 = v352;
              v531.length = CFAttributedStringGetLength(v341);
              v531.location = 0;
              CFAttributedStringSetAttribute(v341, v531, @"kFigSubtitleRenderer_SuggestTextLayout", v353);
              CFRelease(v353);
            }
          }
        }
        ++v340;
      }
      while (v220 != v340);
      uint64_t v70 = (char *)v446;
      uint64_t v45 = v454;
    }
    else
    {
      CGMutablePathRef Mutable = theArray;
    }
    int v311 = v465;
LABEL_416:
    if (CFArrayGetCount(v222) >= 1)
    {
      do
      {
        v354 = CFArrayGetValueAtIndex(v222, 0);
        CFArrayRemoveValueAtIndex(v222, 0);
        if (v354)
        {
          v355 = (const void *)v354[4];
          if (v355) {
            CFRelease(v355);
          }
          free(v354);
        }
      }
      while (CFArrayGetCount(v222) > 0);
    }
    CFRelease(v222);
    if (!v311) {
      break;
    }
    double v467 = v467 + -0.1;
  }
  while (v467 > 0.0);
LABEL_437:
  uint64_t v375 = range_8;
  if (range_8 < 1)
  {
    double v378 = 0.0;
    double v377 = 0.0;
    v379.f64[0] = v428.f64[0];
  }
  else
  {
    CFIndex v376 = 0;
    double v377 = 0.0;
    long long v493 = *((_OWORD *)v12 + 1);
    long long v498 = *(_OWORD *)v12;
    double v378 = 0.0;
    float64x2_t v379 = v428;
    do
    {
      float64x2_t v429 = v379;
      CFAttributedStringRef v380 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v376);
      *(_OWORD *)&v511.double a = v498;
      *(_OWORD *)&v511.double c = v493;
      CFDictionaryRef v381 = (const __CFDictionary *)CFAttributedStringGetAttribute(v380, 0, @"kFigSubtitleRenderer_SuggestLayout", &effectiveRange);
      if (v381) {
        CGRectMakeWithDictionaryRepresentation(v381, (CGRect *)&v511);
      }
      float64x2_t v379 = v429;
      if (v511.a < v429.f64[0]) {
        v379.f64[0] = v511.a;
      }
      if (v511.a + v511.c > v378) {
        double v378 = v511.a + v511.c;
      }
      double v382 = v424;
      if (v511.b < v424) {
        double v382 = v511.b;
      }
      double v424 = v382;
      if (v511.b + v511.d > v377) {
        double v377 = v511.b + v511.d;
      }
      ++v376;
      uint64_t v375 = range_8;
    }
    while (range_8 != v376);
  }
  double v383 = v378 - v379.f64[0];
  double v384 = v424;
  double v385 = v377 - v424;
  double *v410 = v379.f64[0];
  v410[1] = v424;
  v410[2] = v383;
  v410[3] = v385;
  if (v216 != *MEMORY[0x1E4F1DAD8] || v217 != *(double *)(MEMORY[0x1E4F1DAD8] + 8))
  {
    if (v375 >= 1)
    {
      CFIndex v387 = 0;
      long long v494 = *((_OWORD *)v12 + 1);
      long long v499 = *(_OWORD *)v12;
      do
      {
        CFAttributedStringRef v388 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v387);
        CFIndex v389 = CFAttributedStringGetLength(v388);
        *(_OWORD *)&v511.double a = v499;
        *(_OWORD *)&v511.double c = v494;
        *(_OWORD *)&rect.double a = v499;
        *(_OWORD *)&rect.double c = v494;
        CFDictionaryRef v390 = (const __CFDictionary *)CFAttributedStringGetAttribute(v388, 0, @"kFigSubtitleRenderer_SuggestLayout", &effectiveRange);
        if (v390) {
          CGRectMakeWithDictionaryRepresentation(v390, (CGRect *)&v511);
        }
        CGAffineTransformMakeTranslation(&v502, v216, v217);
        v575.origin.CGFloat x = v511.a;
        v575.origin.CGFloat y = v511.b;
        v575.size.double width = v511.c;
        v575.size.CGFloat height = v511.d;
        CGRect v576 = CGRectApplyAffineTransform(v575, &v502);
        v511.double a = v576.origin.x;
        v511.double b = v576.origin.y;
        v511.double c = v576.size.width;
        v511.double d = v576.size.height;
        CFDictionaryRef v391 = CGRectCreateDictionaryRepresentation(v576);
        if (v391)
        {
          CFDictionaryRef v392 = v391;
          v532.location = 0;
          v532.length = v389;
          CFAttributedStringSetAttribute(v388, v532, @"kFigSubtitleRenderer_SuggestLayout", v391);
          CFRelease(v392);
        }
        CFDictionaryRef v393 = (const __CFDictionary *)CFAttributedStringGetAttribute(v388, 0, @"kFigSubtitleRenderer_SuggestTextLayout", &effectiveRange);
        if (v393) {
          CGRectMakeWithDictionaryRepresentation(v393, (CGRect *)&rect);
        }
        CGAffineTransformMakeTranslation(&v501, v216, v217);
        v577.origin.CGFloat x = rect.a;
        v577.origin.CGFloat y = rect.b;
        v577.size.double width = rect.c;
        v577.size.CGFloat height = rect.d;
        CGRect v578 = CGRectApplyAffineTransform(v577, &v501);
        rect.double a = v578.origin.x;
        rect.double b = v578.origin.y;
        rect.double c = v578.size.width;
        rect.double d = v578.size.height;
        CFDictionaryRef v394 = CGRectCreateDictionaryRepresentation(v578);
        if (v394)
        {
          CFDictionaryRef v395 = v394;
          v533.location = 0;
          v533.length = v389;
          CFAttributedStringSetAttribute(v388, v533, @"kFigSubtitleRenderer_SuggestTextLayout", v394);
          CFRelease(v395);
        }
        ++v387;
      }
      while (range_8 != v387);
      v379.f64[0] = *v410;
      double v384 = v410[1];
      double v383 = v410[2];
      double v385 = v410[3];
    }
    CGFloat v430 = v379.f64[0];
    CGFloat v396 = v217;
    CGFloat v397 = v384;
    CGAffineTransformMakeTranslation(&v500, v216, v396);
    v579.origin.CGFloat x = v430;
    v579.origin.CGFloat y = v397;
    v579.size.double width = v383;
    v579.size.CGFloat height = v385;
    CGRectApplyAffineTransform(v579, &v500);
    uint64_t v375 = range_8;
  }
  if (v375 >= 1)
  {
    CFIndex v398 = 0;
    do
    {
      CFAttributedStringRef v399 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v398);
      CFAttributedStringRef Copy = CFAttributedStringCreateCopy(v69, v399);
      CFArraySetValueAtIndex(Mutable, v398, Copy);
      if (Copy) {
        CFRelease(Copy);
      }
      ++v398;
    }
    while (range_8 != v398);
  }
  CFArrayRef v401 = CFArrayCreateCopy(v69, Mutable);
  CFDictionarySetValue(theDict, @"SubtitleContent", v401);
  CFDictionaryRef *v413 = CFDictionaryCreateCopy(v69, theDict);
  free(v70);
  CFRelease(theDict);
  int v402 = 0;
  int v26 = 0;
  CFDictionaryRef v403 = v401;
  if (v401)
  {
LABEL_475:
    CFRelease(v403);
    int v26 = v402;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v1 = v405;
LABEL_479:
  CFIndex v27 = v413;
  double v11 = v410;
  if (v26)
  {
LABEL_480:
    long long v404 = *((_OWORD *)v12 + 1);
    *(_OWORD *)double v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v404;
LABEL_481:
    if (v27) {
      *CFIndex v27 = 0;
    }
  }
LABEL_483:
  **((_DWORD **)v1 + 18) = v26;
}

void resetOverlaps(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v13 = _Q0;
      do
      {
        CFAttributedStringRef ValueAtIndex = (__CFArray **)CFArrayGetValueAtIndex(a1, v4);
        if (ValueAtIndex)
        {
          double v11 = ValueAtIndex;
          CFAllocatorRef v12 = ValueAtIndex[4];
          if (v12) {
            CFArrayRemoveAllValues(v12);
          }
          *(_OWORD *)(v11 + 5) = v13;
          *(_OWORD *)(v11 + 7) = v13;
          v11[22] = 0;
          v11[23] = 0;
          v11[21] = 0;
          *(_OWORD *)(v11 + 9) = 0u;
          *(_OWORD *)(v11 + 11) = 0u;
          *(_OWORD *)(v11 + 13) = 0u;
          *(_OWORD *)(v11 + 15) = 0u;
          *(_OWORD *)(v11 + 17) = 0u;
          *(_OWORD *)(v11 + 19) = 0u;
        }
        ++v4;
      }
      while (v3 != v4);
    }
  }
}

uint64_t surveyOverlaps(const __CFArray *a1)
{
  if (a1 && (Count = CFArrayGetCount(a1), CFIndex v3 = Count - 2, Count >= 2))
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    unsigned __int8 v6 = 0;
    do
    {
      CFIndex v7 = v5;
      CFAttributedStringRef ValueAtIndex = (double *)CFArrayGetValueAtIndex(a1, v5++);
      if (ValueAtIndex && v5 < v4)
      {
        CFTypeRef v9 = ValueAtIndex;
        CFIndex v10 = v5;
        do
        {
          double v11 = (double *)CFArrayGetValueAtIndex(a1, v10);
          if (v11)
          {
            CFAllocatorRef v12 = v11;
            if (vabdd_f64(*v9 + v9[2] * 0.5, *v11 + v11[2] * 0.5) < v9[2] * 0.5 + v11[2] * 0.5 + -3.0
              && vabdd_f64(v9[1] + v9[3] * 0.5, v11[1] + v11[3] * 0.5) < v11[3] * 0.5 + v9[3] * 0.5 + -3.0)
            {
              CFArrayAppendValue(*((CFMutableArrayRef *)v9 + 4), v11);
              CFArrayAppendValue(*((CFMutableArrayRef *)v12 + 4), v9);
              unsigned __int8 v6 = 1;
            }
          }
          ++v10;
        }
        while (v4 != v10);
      }
    }
    while (v7 != v3);
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t resetNumMoves(const __CFArray *a1)
{
  uint64_t result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    uint64_t v3 = result;
    for (CFIndex i = 0; i != v3; ++i)
    {
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(a1, i);
      *(_DWORD *)(result + 192) = 0;
    }
  }
  return result;
}

uint64_t objComparatorX(double *a1, double *a2)
{
  double v2 = *a1 + a1[2] * 0.5;
  double v3 = *a2 + a2[2] * 0.5;
  if (v2 < v3) {
    return -1;
  }
  else {
    return v2 > v3;
  }
}

uint64_t objComparatorY(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8) + *(double *)(a1 + 24) * 0.5;
  double v3 = *(double *)(a2 + 8) + *(double *)(a2 + 24) * 0.5;
  if (v2 < v3) {
    return -1;
  }
  else {
    return v2 > v3;
  }
}

double sublayout_unionCFDataRects(const __CFArray *a1)
{
  double x = *MEMORY[0x1E4F1DB20];
  CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      CGRect v12 = *(CGRect *)CFArrayGetValueAtIndex(a1, i);
      v10.origin.double x = x;
      v10.origin.CGFloat y = y;
      v10.size.CGFloat width = width;
      v10.size.CGFloat height = height;
      CGRect v11 = CGRectUnion(v10, v12);
      double x = v11.origin.x;
      CGFloat y = v11.origin.y;
      CGFloat width = v11.size.width;
      CGFloat height = v11.size.height;
    }
  }
  return x;
}

uint64_t FigCaptionRendererAVFLayoutRegionCreate(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (!a2) {
    return 4294950096;
  }
  uint64_t v18 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererAVFLayoutRegionGetClassID_sRegisterFigCaptionRendererAVFLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererAVFLayoutRegionBaseType);
  uint64_t result = CMDerivedObjectCreate();
  if (!result)
  {
    uint64_t v7 = v18;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)(DerivedStorage + 8) = a2;
    *(void *)(DerivedStorage + 16) = a1;
    *(unsigned char *)(DerivedStorage + 40) = 1;
    uint64_t v17 = 0;
    FigCaptionRendererFreeLayoutRegionCreate(a1, a2, &v17);
    uint64_t v9 = v17;
    *(void *)uint64_t DerivedStorage = v17;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v11 = *(void *)(ProtocolVTable + 16);
      if (v11)
      {
        CGRect v12 = *(void (**)(uint64_t, uint64_t))(v11 + 216);
        if (v12) {
          v12(v9, 1);
        }
      }
    }
    uint64_t v13 = *(void *)DerivedStorage;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        CFNumberRef v16 = *(void (**)(uint64_t, uint64_t))(v15 + 232);
        if (v16) {
          v16(v13, 1);
        }
      }
    }
    uint64_t result = 0;
    *a3 = v7;
  }
  return result;
}

uint64_t FigCaptionRendererAVFLayoutRegionSetLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 24) = a2;
  *(void *)(DerivedStorage + 32) = a3;
  return 0;
}

void FigCaptionRendererAVFLayoutRegionFinalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCaptionRendererAVFLayoutRegionCopyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererAVFLayoutRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererAVFLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererAVFLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererAVFLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererAVFLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  CFNumberRef v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(void *)(a2 + 296))
  {
    CGSize v5 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    v25.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
    v25.CGSize size = v5;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v7 = *(void *)(ProtocolVTable + 16);
      if (v7)
      {
        uint64_t v8 = *(void (**)(const void *, CGRect *))(v7 + 104);
        if (v8) {
          v8(a1, &v25);
        }
      }
    }
    CFDictionaryRef v9 = *(const __CFDictionary **)(a2 + 296);
    if (v9)
    {
      CFAttributedStringRef Value = CFDictionaryGetValue(v9, a1);
      double MidX = CGRectGetMidX(v25);
      double MidY = CGRectGetMidY(v25);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = *(void (**)(const void *, double, double))(v14 + 72);
          if (v15) {
            v15(Value, MidX, MidY);
          }
        }
      }
      CGSize size = v25.size;
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t v17 = CMBaseObjectGetProtocolVTable();
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18)
        {
          long long v19 = *(void (**)(const void *, double, double))(v18 + 88);
          if (v19) {
            v19(Value, size.width, size.height);
          }
        }
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 280);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, float64x2_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2[22].f64[0] > 0.0 && a2[22].f64[1] > 0.0)
  {
    v160[0] = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t ProtocolVTable = (const char *)CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v6 = *((void *)ProtocolVTable + 2);
      if (v6 && (uint64_t v7 = *(void (**)(uint64_t, const char **))(v6 + 24)) != 0)
      {
        v7(a1, v160);
        uint64_t ProtocolVTable = v160[0];
      }
      else
      {
        uint64_t ProtocolVTable = 0;
      }
    }
    CFIndex Count = CFArrayGetCount((CFArrayRef)ProtocolVTable);
    if (Count >= 1)
    {
      CFDictionaryRef v9 = (const void *)*MEMORY[0x1E4F1F728];
      __n128 v10 = (const void *)*MEMORY[0x1E4F1F700];
      __n128 v11 = (const void *)*MEMORY[0x1E4F1F538];
      kedouble y = (void *)*MEMORY[0x1E4F1F5C0];
      CFStringRef v142 = (const __CFString *)*MEMORY[0x1E4F1F510];
      CFStringRef v139 = (const __CFString *)*MEMORY[0x1E4F1F518];
      CFStringRef v136 = (const __CFString *)*MEMORY[0x1E4F1F520];
      CFStringRef v135 = (const __CFString *)*MEMORY[0x1E4F1F528];
      CFStringRef v134 = (const __CFString *)*MEMORY[0x1E4F1F508];
      CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F790];
      CFStringRef v141 = (const __CFString *)*MEMORY[0x1E4F1F788];
      CFStringRef v138 = (CFStringRef)*MEMORY[0x1E4F1F780];
      CFNumberRef v148 = (void *)*MEMORY[0x1E4F1F668];
      double v147 = (void *)*MEMORY[0x1E4F1F660];
      CGAffineTransform v146 = (void *)*MEMORY[0x1E4F1F5B8];
      CFIndex v12 = Count + 1;
      CFStringRef v143 = (const __CFString *)*MEMORY[0x1E4F1F778];
      double v13 = 1.0;
      CFStringRef v140 = (const __CFString *)*MEMORY[0x1E4F1F770];
      CFStringRef v137 = (const __CFString *)*MEMORY[0x1E4F1F768];
      CFIndex v145 = (void *)*MEMORY[0x1E4F1F720];
      double v14 = 0.5;
      while (1)
      {
        CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v160[0], v12 - 2);
        CFRange v159 = 0;
        FigCaptionRendererBaseProtocolGetProtocolID();
        uint64_t v16 = CMBaseObjectGetProtocolVTable();
        if (!v16
          || (uint64_t v17 = *(void *)(v16 + 16)) == 0
          || (uint64_t v18 = *(unsigned int (**)(const void *, const char **))(v17 + 8)) == 0
          || v18(ValueAtIndex, &v159))
        {
LABEL_138:
          FigSignalErrorAt();
          goto LABEL_139;
        }
        long long v19 = v159;
        if (v159) {
          break;
        }
LABEL_135:
        if ((unint64_t)--v12 <= 1) {
          goto LABEL_139;
        }
      }
      if (strcmp(v159, "FigCaptionRendererCaption"))
      {
        if (strcmp(v19, "FigCaptionRendererStackLayoutRegion")
          && strcmp(v19, "FigCaptionRendererCellStackLayoutRegion")
          && strcmp(v19, "FigCaptionRendererTTMLRegion"))
        {
          goto LABEL_135;
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        uint64_t v20 = CMBaseObjectGetProtocolVTable();
        if (!v20) {
          goto LABEL_135;
        }
        uint64_t v21 = *(void *)(v20 + 16);
        if (!v21) {
          goto LABEL_135;
        }
        uint64_t v22 = *(void (**)(const void *, uint64_t))(v21 + 232);
        if (!v22) {
          goto LABEL_135;
        }
        goto LABEL_134;
      }
      int v158 = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      uint64_t v23 = CMBaseObjectGetProtocolVTable();
      if (!v23) {
        goto LABEL_138;
      }
      uint64_t v24 = *(void *)(v23 + 16);
      if (!v24) {
        goto LABEL_138;
      }
      CGRect v25 = *(unsigned int (**)(const void *, int *))(v24 + 48);
      if (!v25) {
        goto LABEL_138;
      }
      if (v25(ValueAtIndex, &v158)) {
        goto LABEL_138;
      }
      CFDictionaryRef v157 = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      uint64_t v26 = CMBaseObjectGetProtocolVTable();
      if (!v26) {
        goto LABEL_138;
      }
      uint64_t v27 = *(void *)(v26 + 16);
      if (!v27) {
        goto LABEL_138;
      }
      CFStringRef v28 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v27 + 16);
      if (!v28) {
        goto LABEL_138;
      }
      if (v28(ValueAtIndex, &v157)) {
        goto LABEL_138;
      }
      CGSize v130 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
      CGPoint v132 = (CGPoint)*MEMORY[0x1E4F1DB20];
      long long v155 = *MEMORY[0x1E4F1DB20];
      CGSize v156 = v130;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v29 = CMBaseObjectGetProtocolVTable();
      if (!v29) {
        goto LABEL_138;
      }
      uint64_t v30 = *(void *)(v29 + 16);
      if (!v30) {
        goto LABEL_138;
      }
      CTRubyPosition v31 = *(unsigned int (**)(const void *, long long *))(v30 + 104);
      if (!v31 || v31(ValueAtIndex, &v155)) {
        goto LABEL_138;
      }
      BOOL v32 = a2[23].f64[0] == 0.0;
      if (a2[23].f64[1] == 0.0) {
        BOOL v32 = 1;
      }
      if (v32) {
        double v33 = a2[22].f64[0];
      }
      else {
        double v33 = a2[23].f64[0];
      }
      if (v32) {
        double v34 = a2[22].f64[1];
      }
      else {
        double v34 = a2[23].f64[1];
      }
      double v37 = FCRGetVideoPresentationBounds(v33, v34, a2[21].f64[0], a2[21].f64[1], a2[22].f64[0], a2[22].f64[1]);
      double v39 = v38;
      double v40 = v35;
      if (v158 != 4)
      {
        if (v158 == 3)
        {
          double v127 = v35;
          double v128 = v36;
          rect.origin = v132;
          rect.CGSize size = v130;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v157, @"textbox");
          if (Value) {
            CGRectMakeWithDictionaryRepresentation(Value, &rect);
          }
          if (CGRectIsNull(rect))
          {
            double width = v33 * 0.9;
            double height = v34 * 0.15;
            double x = (v33 - v33 * 0.9) * v14;
            double y = v34 - v34 * 0.15;
            rect.origin.double x = x;
            rect.origin.double y = y;
            rect.size.double width = v33 * 0.9;
            rect.size.double height = v34 * 0.15;
          }
          else
          {
            double x = rect.origin.x;
            double y = rect.origin.y;
            double width = rect.size.width;
            double height = rect.size.height;
          }
          double MidX = CGRectGetMidX(*(CGRect *)&x);
          double MidY = CGRectGetMidY(rect);
          CGSize v56 = v156;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v57 = CMBaseObjectGetProtocolVTable();
          if (v57)
          {
            uint64_t v58 = *(void *)(v57 + 16);
            if (v58)
            {
              CFArrayRef v59 = *(void (**)(const void *, double, double))(v58 + 128);
              if (v59) {
                v59(ValueAtIndex, v37 + MidX * (v127 / v33) - v56.width * 0.5, v39 + (v34 - MidY) * (v128 / v34) - v56.height * 0.5);
              }
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v60 = CMBaseObjectGetProtocolVTable();
          if (v60)
          {
            uint64_t v61 = *(void *)(v60 + 16);
            if (v61)
            {
              int v62 = *(void (**)(const void *, uint64_t))(v61 + 232);
              if (v62) {
                v62(ValueAtIndex, 1);
              }
            }
          }
          double v13 = 1.0;
          double v14 = 0.5;
        }
        goto LABEL_135;
      }
      double v129 = v36;
      double valuePtr = 50.0;
      rect.origin.double x = 100.0;
      double v152 = 100.0;
      int v151 = 0;
      double v133 = v9;
      CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v157, v9);
      if (v46)
      {
        CFNumberGetValue(v46, kCFNumberCGFloatType, &rect);
        if (rect.origin.x < 0.0) {
          goto LABEL_138;
        }
      }
      double v131 = v10;
      CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v157, v10);
      CFStringRef v48 = (const __CFString *)CFDictionaryGetValue(v157, v11);
      CFStringRef v49 = (const __CFString *)CFDictionaryGetValue(v157, key);
      CFStringRef v50 = v49;
      if (v47)
      {
        CFNumberGetValue(v47, kCFNumberCGFloatType, &valuePtr);
        if (valuePtr < 0.0) {
          goto LABEL_138;
        }
        goto LABEL_53;
      }
      if (!v48)
      {
        if (v49)
        {
LABEL_54:
          if (CFEqual(v50, theString2))
          {
            double v53 = 0.0;
            goto LABEL_85;
          }
          if (CFStringCompare(v50, v141, 0))
          {
            CFStringRef v51 = v50;
            CFStringRef v52 = v138;
LABEL_57:
            if (CFStringCompare(v51, v52, 0)) {
              double v53 = 50.0;
            }
            else {
              double v53 = 100.0;
            }
LABEL_85:
            CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(v157, v148);
            CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue(v157, v147);
            CFStringRef v67 = (const __CFString *)CFDictionaryGetValue(v157, v146);
            double v126 = v39;
            if (v65)
            {
              CFNumberGetValue(v65, kCFNumberCGFloatType, &v152);
              __n128 v10 = v131;
              if (v152 < 0.0) {
                goto LABEL_138;
              }
              char v68 = 1;
            }
            else
            {
              if (v66)
              {
                CFNumberGetValue(v66, kCFNumberIntType, &v151);
                char v68 = 0;
              }
              else
              {
                char v68 = 1;
              }
              __n128 v10 = v131;
            }
            double v69 = 0.0;
            if (v67 && CFStringCompare(v67, v143, 0))
            {
              if (CFStringCompare(v67, v140, 0))
              {
                if (CFStringCompare(v67, v137, 0)) {
                  double v69 = 0.0;
                }
                else {
                  double v69 = 100.0;
                }
              }
              else
              {
                double v69 = 50.0;
              }
            }
            double v70 = v53 / 100.0;
            double v152 = v152 / 100.0;
            double valuePtr = valuePtr / 100.0;
            double v71 = v69 / 100.0;
            CFAttributedStringRef v72 = CFDictionaryGetValue(v157, v145);
            CFStringRef v73 = v72;
            float v150 = 0.0;
            if (v68)
            {
              if (!v72)
              {
                double v74 = v40;
                double v75 = v37;
                double v76 = valuePtr;
                double v77 = v129 * (v13 - v152);
LABEL_122:
                CFDictionaryRef v9 = v133;
                double v88 = v74 * v76 - v156.width * v70;
                double v70 = v69 / 100.0;
                goto LABEL_127;
              }
            }
            else
            {
              FigCaptionRendererCaptionProtocolGetProtocolID();
              uint64_t v78 = CMBaseObjectGetProtocolVTable();
              if (v78)
              {
                uint64_t v79 = *(void *)(v78 + 16);
                if (v79)
                {
                  double v80 = *(void (**)(const void *, float *))(v79 + 104);
                  if (v80) {
                    v80(ValueAtIndex, &v150);
                  }
                }
              }
              if (!v73)
              {
                double v74 = v40;
                double v76 = valuePtr;
                float v85 = (float)v151;
                double v75 = v37;
                if (v151 < 0) {
                  double v77 = (float)-(float)(v150 * v85);
                }
                else {
                  double v77 = v129 - (float)(v150 * v85);
                }
                goto LABEL_122;
              }
            }
            int v81 = FigCFEqual();
            double v77 = v129 * (v13 - valuePtr);
            if (v68)
            {
              double v82 = v40;
              CFDictionaryRef v9 = v133;
              double v75 = v37;
              if (v81)
              {
                double v83 = v82 * v152;
LABEL_118:
                double v88 = v83 - v156.width * v71;
LABEL_127:
                double v90 = v156.height;
                FigCaptionRendererNodeProtocolGetProtocolID();
                uint64_t v91 = CMBaseObjectGetProtocolVTable();
                if (v91)
                {
                  uint64_t v92 = *(void *)(v91 + 16);
                  if (v92)
                  {
                    CGFloat v93 = *(void (**)(const void *, double, double))(v92 + 128);
                    if (v93) {
                      v93(ValueAtIndex, v75 + v88, v126 + v77 - v90 * (v13 - v70));
                    }
                  }
                }
                FigCaptionRendererNodeProtocolGetProtocolID();
                uint64_t v94 = CMBaseObjectGetProtocolVTable();
                if (!v94) {
                  goto LABEL_135;
                }
                uint64_t v95 = *(void *)(v94 + 16);
                if (!v95) {
                  goto LABEL_135;
                }
                uint64_t v22 = *(void (**)(const void *, uint64_t))(v95 + 232);
                if (!v22) {
                  goto LABEL_135;
                }
LABEL_134:
                v22(ValueAtIndex, 1);
                goto LABEL_135;
              }
              double v86 = v82 * (v13 - v152);
            }
            else
            {
              float v84 = (float)v151;
              if (v151 < 0)
              {
                CFDictionaryRef v9 = v133;
                if (v81)
                {
                  double v87 = v40;
                  double v75 = v37;
                  double v83 = v87 + (float)(v150 * v84);
                  goto LABEL_118;
                }
                double v75 = v37;
                double v86 = (float)-(float)(v150 * v84);
              }
              else
              {
                double v83 = (float)(v150 * v84);
                CFDictionaryRef v9 = v133;
                if (v81)
                {
                  double v75 = v37;
                  goto LABEL_118;
                }
                double v89 = v40;
                double v75 = v37;
                double v86 = v89 - v83;
              }
            }
            double v88 = v86 - v156.width * (v13 - v71);
            goto LABEL_127;
          }
        }
LABEL_83:
        *(double *)&uint64_t v64 = 50.0;
        goto LABEL_84;
      }
      if (CFStringCompare(v48, v142, 0))
      {
        if (CFEqual(v48, v139))
        {
          *(double *)&uint64_t v63 = 50.0;
          goto LABEL_124;
        }
        if (CFEqual(v48, v136))
        {
          *(double *)&uint64_t v63 = 100.0;
LABEL_124:
          double valuePtr = *(double *)&v63;
        }
      }
      else
      {
        double valuePtr = 0.0;
      }
LABEL_53:
      if (v50) {
        goto LABEL_54;
      }
      if (v48)
      {
        double v53 = 0.0;
        if (CFEqual(v48, v142)) {
          goto LABEL_85;
        }
        if (CFStringCompare(v48, v139, 0))
        {
          if (CFStringCompare(v48, v136, 0))
          {
            if (CFEqual(v48, v135)) {
              goto LABEL_85;
            }
            CFStringRef v51 = v48;
            CFStringRef v52 = v134;
            goto LABEL_57;
          }
          *(double *)&uint64_t v64 = 100.0;
LABEL_84:
          double v53 = *(double *)&v64;
          goto LABEL_85;
        }
      }
      goto LABEL_83;
    }
  }
LABEL_139:
  if (*(unsigned char *)(DerivedStorage + 40)) {
    FigCaptionRendererLayoutDecouple_ApplyDecouplingAndSafeRegion(a1, a2);
  }
  rect.origin.double x = 0.0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v96 = CMBaseObjectGetProtocolVTable();
  if (v96)
  {
    uint64_t v97 = *(void *)(v96 + 16);
    if (v97)
    {
      double v98 = *(uint64_t (**)(uint64_t, CGRect *))(v97 + 24);
      if (!v98)
      {
LABEL_170:
        uint64_t v124 = 4294954514;
        goto LABEL_168;
      }
      uint64_t v99 = v98(a1, &rect);
      if (v99)
      {
LABEL_173:
        uint64_t v124 = v99;
        goto LABEL_168;
      }
      CFIndex v100 = CFArrayGetCount(*(CFArrayRef *)&rect.origin.x);
      if (v100 < 1) {
        return 0;
      }
      CFIndex v101 = v100 + 1;
      CFStringRef v102 = (long long *)MEMORY[0x1E4F1DB28];
      while (1)
      {
        CGFloat v103 = CFArrayGetValueAtIndex(*(CFArrayRef *)&rect.origin.x, v101 - 2);
        v160[0] = 0;
        FigCaptionRendererBaseProtocolGetProtocolID();
        uint64_t v104 = CMBaseObjectGetProtocolVTable();
        if (!v104) {
          break;
        }
        uint64_t v105 = *(void *)(v104 + 16);
        if (!v105) {
          break;
        }
        CFIndex v106 = *(uint64_t (**)(const void *, const char **))(v105 + 8);
        if (!v106) {
          goto LABEL_170;
        }
        uint64_t v99 = v106(v103, v160);
        if (v99) {
          goto LABEL_173;
        }
        if (!v160[0] || strcmp(v160[0], "FigCaptionRendererCaption"))
        {
          CGSize v107 = (CGSize)v102[1];
          long long v155 = *v102;
          CGSize v156 = v107;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v108 = CMBaseObjectGetProtocolVTable();
          if (v108)
          {
            uint64_t v109 = *(void *)(v108 + 16);
            if (v109)
            {
              CFStringRef v110 = *(void (**)(uint64_t, long long *))(v109 + 104);
              if (v110) {
                v110(a1, &v155);
              }
            }
          }
          double v111 = FCRGetOverscanSafeRect(*(double *)&v155, *((double *)&v155 + 1), v156.width, v156.height);
          double v113 = v112;
          double v115 = v114;
          double v117 = v116;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v118 = CMBaseObjectGetProtocolVTable();
          if (v118)
          {
            uint64_t v119 = *(void *)(v118 + 16);
            if (v119)
            {
              CGFloat v120 = *(void (**)(const void *, double, double, double, double))(v119 + 64);
              if (v120) {
                v120(v103, v111, v113, v115, v117);
              }
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v121 = CMBaseObjectGetProtocolVTable();
          if (v121)
          {
            uint64_t v122 = *(void *)(v121 + 16);
            if (v122)
            {
              double v123 = *(void (**)(const void *, uint64_t))(v122 + 232);
              if (v123) {
                v123(v103, 1);
              }
            }
          }
        }
        uint64_t v124 = 0;
        if ((unint64_t)--v101 <= 1) {
          return v124;
        }
      }
    }
  }
  uint64_t v124 = 4294954508;
LABEL_168:
  FigSignalErrorAt();
  return v124;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 16);
            if (v9)
            {
              __n128 v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10) {
                v10(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      double v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16) {
                v16(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      long long v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __n128 v4 = *(void (**)(_OWORD *, uint64_t))(DerivedStorage + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 8);
    long long v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    uint64_t v9 = *(void *)(a2 + 32);
    v4(v8, v5);
  }
  return 0;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(a2 + 296);
    if (v5)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(v5, a1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          __n128 v9 = *(void (**)(const void *))(v8 + 128);
          if (v9) {
            v9(Value);
          }
        }
      }
    }
  }
  uint64_t v10 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return 4294954508;
  }
  double v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 376);
  if (!v13) {
    return 4294954514;
  }

  return v13(v10, a2);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(a2 + 296);
    if (v5)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(v5, a1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          __n128 v9 = *(void (**)(const void *))(v8 + 136);
          if (v9) {
            v9(Value);
          }
        }
      }
    }
  }
  uint64_t v10 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return 4294954508;
  }
  double v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 384);
  if (!v13) {
    return 4294954514;
  }

  return v13(v10, a2);
}

uint64_t RegisterFigCaptionRendererAVFLayoutRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererAVFLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererAVFLayoutRegion]");
}

void FigLoadAVFDylib()
{
  if (FigLoadAVFDylib_loadAVFoundationOnce != -1) {
    dispatch_once(&FigLoadAVFDylib_loadAVFoundationOnce, &__block_literal_global_172);
  }
}

void *__FigLoadAVFDylib_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 4);
  FigLoadAVFDylib_avfDylidouble b = (uint64_t)result;
  return result;
}

uint64_t CreatePesPrivateForLPCM(void *a1)
{
  if (a1[6])
  {
    uint64_t v2 = (void (*)(void *))a1[107];
    if (v2) {
      v2(a1);
    }
    a1[6] = 0;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B0040DDD21EB6uLL);
  if (!v3) {
    return 12;
  }
  __n128 v4 = v3;
  uint64_t result = 0;
  *__n128 v4 = v4 + 37;
  v4[2] = (char *)v4 + 300;
  v4[3] = 4;
  v4[4] = LPCMCheckHeader;
  v4[5] = LPCMCompareHeaders;
  v4[6] = LPCMGetSamplesPerFrame;
  v4[7] = LPCMGetSampleFrequency;
  v4[8] = LPCMGetFrameSize;
  a1[105] = PesLPCMProcessData;
  a1[106] = PesLPCMCleanPrivateData;
  a1[107] = PesLPCMDeletePrivateData;
  a1[6] = v4;
  return result;
}

BOOL LPCMCompareHeaders(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  __n128 v4 = 0;
  return !CMBlockBufferAccessDataBytes(a1, 0, 4uLL, temporaryBlock, &v4) && *(_DWORD *)v4 == *a2;
}

uint64_t PesLPCMProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(void **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesLPCMCleanPrivateData(uint64_t a1)
{
}

void PesLPCMDeletePrivateData(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

uint64_t FigCreateCaptionRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, long long *a9, uint64_t a10, CFTypeRef *a11)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFTypeRef v51 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  *(_OWORD *)__str = 0u;
  long long v53 = 0u;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3) {
    BOOL v16 = a2 != 0;
  }
  else {
    BOOL v16 = 0;
  }
  if ((a2 != 0) != (a3 != 0)) {
    goto LABEL_48;
  }
  BOOL v17 = a5 && a4 != 0;
  if ((a4 != 0) != (a5 != 0)) {
    goto LABEL_48;
  }
  BOOL v18 = a7 && a6 != 0;
  if ((a6 != 0) != (a7 != 0)) {
    goto LABEL_48;
  }
  BOOL v43 = v16;
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigRenderPipelineGetClassID();
  uint64_t v20 = CMDerivedObjectCreate();
  if (v20) {
    goto LABEL_45;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 2) = 1;
  *(unsigned char *)(DerivedStorage + 1) = FigSubtitleRendererUseCoreTextRendererByDefault() == 0;
  uint64_t v22 = FigCaptionSerializerCreate();
  if (v22) {
    goto LABEL_49;
  }
  *(void *)(DerivedStorage + 256) = 0;
  *(void *)(DerivedStorage + 264) = v19;
  *(void *)&long long v50 = caprp_FigCaptionGroupConverterOutputCallbackTX3G;
  *((void *)&v50 + 1) = DerivedStorage + 256;
  int v23 = _os_feature_enabled_impl();
  uint64_t v24 = (void *)(DerivedStorage + 288);
  if (v23) {
    int64_t v25 = FigTX3GCaptionGroupConverterFromSampleBufferCreateRemote(&v50, (uint64_t)v19, v24);
  }
  else {
    int64_t v25 = FigTX3GCaptionGroupConverterFromSampleBufferCreate((uint64_t)&v50, (uint64_t)v19, v24);
  }
  uint64_t v20 = v25;
  if (v25) {
    goto LABEL_45;
  }
  *(void *)(DerivedStorage + 272) = 0;
  *(void *)(DerivedStorage + 280) = v19;
  *(void *)&long long v49 = caprp_FigCaptionGroupConverterOutputCallbackWebVTT;
  *((void *)&v49 + 1) = DerivedStorage + 272;
  int v26 = _os_feature_enabled_impl();
  uint64_t v27 = (void *)(DerivedStorage + 296);
  int64_t v28 = v26
      ? FigWebVTTCaptionGroupConverterFromSampleBufferCreateRemote(&v49, (uint64_t)v19, v27)
      : FigWebVTTCaptionGroupConverterFromSampleBufferCreate((uint64_t)&v49, (uint64_t)v19, v27);
  uint64_t v20 = v28;
  if (v28) {
    goto LABEL_45;
  }
  *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 128) = FigSimpleMutexCreate();
  snprintf(__str, 0x80uLL, "com.apple.coremedia.figcaptionrenderpipeline(%p).callbackqueue", v51);
  dispatch_queue_t v29 = dispatch_queue_create(__str, 0);
  *(void *)(DerivedStorage + 8) = v29;
  if (!v29) {
    goto LABEL_48;
  }
  if (v43)
  {
    *(void *)(DerivedStorage + 152) = a2;
    uint64_t v30 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(void *)(DerivedStorage + 160) = v30;
    if (!v30) {
      goto LABEL_48;
    }
  }
  if (v17
    && (*(void *)(DerivedStorage + 168) = a4,
        uint64_t v31 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(DerivedStorage + 176) = v31) == 0)
    || v18
    && (*(void *)(DerivedStorage + 200) = a6,
        uint64_t v32 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(DerivedStorage + 208) = v32) == 0))
  {
LABEL_48:
    uint64_t v22 = FigSignalErrorAt();
LABEL_49:
    uint64_t v20 = v22;
    goto LABEL_45;
  }
  CFTypeRef v33 = a8;
  if (a8) {
    CFTypeRef v33 = CFRetain(a8);
  }
  *(void *)(DerivedStorage + 184) = v33;
  *(_DWORD *)(DerivedStorage + 192) = 0;
  uint64_t v20 = FigTextSampleBufferSetUpState(DerivedStorage + 40, v19, a1);
  if (!v20)
  {
    CGMutablePathRef Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v35 = Mutable;
      CFDictionarySetValue(Mutable, @"AllowCaptionGroupSampleBuffers", (const void *)*MEMORY[0x1E4F1CFD0]);
      long long v47 = *a9;
      uint64_t v48 = *((void *)a9 + 2);
      uint64_t v20 = FigSimpleRenderPipelineCreateWithCallback((uint64_t)v19, (uint64_t)caprp_sendSubtitleSampleForSampleBuffer, 0, (uint64_t)v51, (uint64_t)&v47, v35, (void *)(DerivedStorage + 24));
      if (!v20)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 24));
        uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v37) {
          uint64_t v38 = v37;
        }
        else {
          uint64_t v38 = 0;
        }
        double v39 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v38 + 48);
        if (v39)
        {
          uint64_t v20 = v39(FigBaseObject, @"SourceSampleBufferQueue", v19, DerivedStorage + 32);
          if (!v20)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterAddListener();
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            uint64_t v20 = CMBufferQueueCreate(v19, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 224));
            if (!v20)
            {
              double v41 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
              uint64_t v20 = CMBufferQueueCreate(v19, 0, v41, (CMBufferQueueRef *)(DerivedStorage + 240));
              if (!v20)
              {
                *a11 = v51;
                CFTypeRef v51 = 0;
              }
            }
          }
        }
        else
        {
          uint64_t v20 = 4294954514;
        }
      }
      CFRelease(v35);
    }
    else
    {
      uint64_t v20 = 4294954510;
    }
  }
LABEL_45:
  if (v51) {
    CFRelease(v51);
  }
  return v20;
}

uint64_t caprp_FigCaptionGroupConverterOutputCallbackTX3G(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  if (FigCaptionGroupGetSliceCount() && !FigSampleBufferCreateForCaptionGroup())
  {
    if (*a3)
    {
      CFArrayRemoveAllValues(*a3);
      CGMutablePathRef Mutable = *a3;
LABEL_6:
      CFArrayAppendValue(Mutable, 0);
      return 0;
    }
    CGMutablePathRef Mutable = CFArrayCreateMutable(a3[1], 1, MEMORY[0x1E4F1D510]);
    *a3 = Mutable;
    if (Mutable) {
      goto LABEL_6;
    }
  }
  return 0;
}

uint64_t caprp_FigCaptionGroupConverterOutputCallbackWebVTT(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  if (FigCaptionGroupGetSliceCount() && !FigSampleBufferCreateForCaptionGroup())
  {
    if (*a3)
    {
      CFArrayRemoveAllValues(*a3);
      CGMutablePathRef Mutable = *a3;
LABEL_6:
      CFArrayAppendValue(Mutable, 0);
      return 0;
    }
    CGMutablePathRef Mutable = CFArrayCreateMutable(a3[1], 1, MEMORY[0x1E4F1D510]);
    *a3 = Mutable;
    if (Mutable) {
      goto LABEL_6;
    }
  }
  return 0;
}

uint64_t caprp_sendSubtitleSampleForSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
    goto LABEL_3;
  }
  if (!a2) {
    goto LABEL_3;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  CFTypeRef v8 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F258], 0);
  memset(&v37, 0, sizeof(v37));
  CMSampleBufferGetOutputPresentationTimeStamp(&v37, a2);
  memset(&v36, 0, sizeof(v36));
  CMSampleBufferGetOutputDuration(&v36, a2);
  __int16 v35 = 0;
  long long v31 = *MEMORY[0x1E4F1DB20];
  long long v32 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v33 = *MEMORY[0x1E4F1DB20];
  long long v34 = v32;
  if (MediaSubType) {
    *(_DWORD *)(DerivedStorage + 192) = MediaSubType;
  }
  else {
    FourCharCode MediaSubType = *(_DWORD *)(DerivedStorage + 192);
  }
  if (CMFormatDescriptionGetMediaType(FormatDescription) == 1668310898)
  {
    if (!v8)
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 128));
      __n128 v9 = *(const void **)(DerivedStorage + 120);
      if (v9) {
        CFTypeRef v10 = CFRetain(v9);
      }
      else {
        CFTypeRef v10 = 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 128));
      int v15 = caprp_createSubtitleSampleForCaptionGroupSampleBuffer((uint64_t)a1, a2, *(const void **)(DerivedStorage + 136), *(void **)(DerivedStorage + 88), &cf);
      goto LABEL_38;
    }
LABEL_41:
    char v13 = 1;
    __int16 v35 = 256;
    long long v33 = v31;
    long long v34 = v32;
    goto LABEL_42;
  }
  if ((CMFormatDescriptionGetMediaType(FormatDescription) == 1935832172
     || CMFormatDescriptionGetMediaType(FormatDescription) == 1937072756)
    && CMFormatDescriptionGetMediaSubType(FormatDescription) == 1937010800)
  {
    if (v8) {
      goto LABEL_41;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 128));
    uint64_t v11 = *(const void **)(DerivedStorage + 120);
    if (v11) {
      CFTypeRef v10 = CFRetain(v11);
    }
    else {
      CFTypeRef v10 = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 128));
    int v15 = caprp_createSubtitleSampleForMPEG4Part30SampleBuffer((uint64_t)a1, a2, *(const void **)(DerivedStorage + 136), *(void **)(DerivedStorage + 88), &cf);
LABEL_38:
    int v16 = v15;
    if (v10) {
      CFRelease(v10);
    }
    if (v16) {
      goto LABEL_3;
    }
    goto LABEL_41;
  }
  if (WebVTTIsFormatDescriptionForWebVTT(FormatDescription))
  {
    if (v8) {
      goto LABEL_41;
    }
    if (!*(void *)(DerivedStorage + 112)
      && WebVTTSampleBufferParserCreate((void *)(DerivedStorage + 112)))
    {
      goto LABEL_3;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 128));
    uint64_t v12 = *(const void **)(DerivedStorage + 120);
    if (v12) {
      CFTypeRef v10 = CFRetain(v12);
    }
    else {
      CFTypeRef v10 = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 128));
    int v15 = caprp_createSubtitleSampleForWebVTTSampleBuffer((uint64_t)a1, *(unint64_t **)(DerivedStorage + 112), a2, (const __CFArray *)v10, *(const void **)(DerivedStorage + 136), *(const void **)(DerivedStorage + 88), &cf);
    goto LABEL_38;
  }
  LOBYTE(v39) = 0;
  if (v8)
  {
    char v13 = 1;
    __int16 v35 = 256;
    long long v33 = v31;
    long long v34 = v32;
    int v14 = 1;
  }
  else
  {
    if (caprp_createSubtitleSampleForTX3GSampleBuffer((uint64_t)a1, a2, *(const void **)(DerivedStorage + 136), &cf, (BOOL *)&v39, (unsigned char *)&v35 + 1, &v35, &v33))goto LABEL_3; {
    char v13 = HIBYTE(v35);
    }
    if (!HIBYTE(v35))
    {
      if (*(unsigned char *)(DerivedStorage + 106))
      {
        if ((_BYTE)v39)
        {
          char v13 = 1;
          HIBYTE(v35) = 1;
          *(unsigned char *)(DerivedStorage + 106) = 0;
          goto LABEL_42;
        }
        CMTime v40 = v37;
        caprp_sendSubtitleSample(a1, MediaSubType, (uint64_t)&v40, 1, 0);
        *(unsigned char *)(DerivedStorage + 106) = 0;
      }
      if (!*(unsigned char *)(DerivedStorage + 144)) {
        goto LABEL_3;
      }
      char v13 = 0;
      goto LABEL_42;
    }
    int v14 = v39;
  }
  *(unsigned char *)(DerivedStorage + 106) = v14 == 0;
LABEL_42:
  if (*(unsigned char *)(DerivedStorage + 2))
  {
    *(unsigned char *)(DerivedStorage + 2) = 0;
    CMFormatDescriptionGetMediaType(FormatDescription);
    if (dword_1E93513F0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (subrp_SampleBufferShouldBeDisplayed(a2))
  {
    if (subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 184), MediaSubType))
    {
      if (*(void *)(DerivedStorage + 168))
      {
        uint64_t v18 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v18)
        {
          CFAllocatorRef v19 = (const void *)v18;
          uint64_t v20 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
          if (v20)
          {
            uint64_t v21 = v20;
            if (a1) {
              CFTypeRef v22 = CFRetain(a1);
            }
            else {
              CFTypeRef v22 = 0;
            }
            *(void *)uint64_t v21 = v22;
            *((void *)v21 + 1) = *(void *)(DerivedStorage + 168);
            *((void *)v21 + 2) = CFRetain(v19);
            *((void *)v21 + 3) = CFRetain(a2);
            *(CMTime *)(v21 + 32) = v37;
            v21[56] = v13;
            dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v21, (dispatch_function_t)caprpNativeCallback);
          }
          else
          {
            FigSignalErrorAt();
          }
          int64_t v28 = v19;
LABEL_65:
          CFRelease(v28);
        }
      }
    }
    else if (*(void *)(DerivedStorage + 152))
    {
      uint64_t v23 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v23)
      {
        uint64_t v24 = (const void *)v23;
        int64_t v25 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
        if (v25)
        {
          int v26 = v25;
          if (a1) {
            CFTypeRef v27 = CFRetain(a1);
          }
          else {
            CFTypeRef v27 = 0;
          }
          *(void *)int v26 = v27;
          *((void *)v26 + 1) = *(void *)(DerivedStorage + 152);
          *((void *)v26 + 2) = CFRetain(v24);
          CFTypeRef v29 = cf;
          if (cf) {
            CFTypeRef v29 = CFRetain(cf);
          }
          *((void *)v26 + 3) = v29;
          *(CMTime *)(v26 + 32) = v37;
          v26[80] = v13;
          v26[81] = v35;
          long long v30 = v34;
          *(_OWORD *)(v26 + 88) = v33;
          *(_OWORD *)(v26 + 104) = v30;
          dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v26, (dispatch_function_t)caprpCommonCallback);
        }
        else
        {
          FigSignalErrorAt();
        }
        int64_t v28 = v24;
        goto LABEL_65;
      }
    }
  }
LABEL_3:
  if (cf) {
    CFRelease(cf);
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
}

uint64_t caprp_resetOutput(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else if (*(void *)(DerivedStorage + 200))
  {
    uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      long long v6 = (const void *)v5;
      uint64_t v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE004023458D36uLL);
      if (v7)
      {
        CFTypeRef v8 = v7;
        if (a2) {
          CFTypeRef v9 = CFRetain(a2);
        }
        else {
          CFTypeRef v9 = 0;
        }
        uint64_t v11 = *(void *)(DerivedStorage + 200);
        void *v8 = v9;
        v8[1] = v11;
        _OWORD v8[2] = CFRetain(v6);
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v8, (dispatch_function_t)caprpFlushCallback);
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v6);
    }
  }
  else
  {
    int v10 = *(_DWORD *)(DerivedStorage + 192);
    figSubtitleRenderPipelineGetCurrentTimeFromTimebase(DerivedStorage, &v12);
    caprp_sendSubtitleSample(a2, v10, (uint64_t)&v12, *(unsigned char *)(DerivedStorage + 106), 0);
    *(unsigned char *)(DerivedStorage + 106) = 0;
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
}

uint64_t figCaptionRenderPipelineInvalidate(const void *a1)
{
  return 0;
}

uint64_t figCaptionRenderPipelineFinalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 2) = 1;
  figCaptionRenderPipelineInvalidate_Internal(a1, 0);
  FigTextSampleBufferTearDownState(DerivedStorage + 40);
  uint64_t v3 = *(const void **)(DerivedStorage + 288);
  if (v3) {
    CFRelease(v3);
  }
  __n128 v4 = *(const void **)(DerivedStorage + 296);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 248);
  if (v5) {
    CFRelease(v5);
  }
  long long v6 = *(const void **)(DerivedStorage + 160);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 176);
  if (v7) {
    CFRelease(v7);
  }
  CFTypeRef v8 = *(const void **)(DerivedStorage + 208);
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v9 = *(NSObject **)(DerivedStorage + 8);
  if (v9) {
    dispatch_release(v9);
  }
  if (*(void *)(DerivedStorage + 120))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 128));
    CFRelease(*(CFTypeRef *)(DerivedStorage + 120));
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 128));
  }
  int v10 = *(const void **)(DerivedStorage + 136);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 304);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 304) = 0;
  }
  CMTime v12 = *(const void **)(DerivedStorage + 184);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 184) = 0;
  }
  WebVTTSampleBufferParserDestroy(*(void **)(DerivedStorage + 112));
  if (*(void *)(DerivedStorage + 128))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 128) = 0;
  }
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  return result;
}

__CFString *figCaptionRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CGMutablePathRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t figCaptionRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (CFTypeRef v8 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"CRPP_TextMarkupArray"))
  {
    MEMORY[0x19970E910](v8[16]);
    int v10 = (const void *)v8[15];
    if (v10)
    {
      uint64_t v11 = 0;
      *a4 = CFRetain(v10);
    }
    else
    {
      uint64_t v11 = 4294954513;
    }
    MEMORY[0x19970E930](v8[16]);
    return v11;
  }
  if (CFEqual(a2, @"CRPP_ExtendedLanguageTagString"))
  {
    CFTypeRef v12 = (CFTypeRef)v8[17];
    if (!v12)
    {
LABEL_12:
      uint64_t v11 = 0;
      *a4 = v12;
      return v11;
    }
LABEL_11:
    CFTypeRef v12 = CFRetain(v12);
    goto LABEL_12;
  }
  if (CFEqual(@"HDRCrossTalker", a2))
  {
    CFTypeRef v12 = (CFTypeRef)v8[38];
    if (!v12) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v13 = v8[3];

  return FigRenderPipelineCopyProperty(v13, (uint64_t)a2, a3, (uint64_t)a4);
}

uint64_t figCaptionRenderPipelineSetProperty(const void *a1, const void *a2, void *a3)
{
  values = a3;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v7 = (uint64_t)DerivedStorage, *DerivedStorage))
  {
LABEL_3:
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"CRPP_TextMarkupArray"))
  {
    if (a3)
    {
      TypeIOSurfaceID ID = CFArrayGetTypeID();
      if (TypeID != CFGetTypeID(a3)) {
        goto LABEL_3;
      }
    }
    MEMORY[0x19970E910](*(void *)(v7 + 128));
    int v10 = *(const void **)(v7 + 120);
    *(void *)(v7 + 120) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v10) {
      CFRelease(v10);
    }
    MEMORY[0x19970E930](*(void *)(v7 + 128));
    return 0;
  }
  if (CFEqual(a2, @"CRPP_TextHighlightArray"))
  {
    if (a3)
    {
      CFTypeID v11 = CFGetTypeID(a3);
      if (v11 != CFArrayGetTypeID()) {
        goto LABEL_3;
      }
    }
    CFDictionaryRef v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigTextAttributeSubtitleTextHighlightArray, (const void **)&values, 1, 0, 0);
    int v13 = *(_DWORD *)(v7 + 192);
    figSubtitleRenderPipelineGetCurrentTimeFromTimebase(v7, &v19);
    caprp_sendSubtitleSample(a1, v13, (uint64_t)&v19, 0, (uint64_t)v12);
    return 0;
  }
  if (CFEqual(a2, @"CRPP_ExtendedLanguageTagString"))
  {
    if (a3)
    {
      CFTypeID v14 = CFStringGetTypeID();
      if (v14 != CFGetTypeID(a3)) {
        goto LABEL_3;
      }
      int v15 = *(const void **)(v7 + 136);
      *(void *)(v7 + 136) = a3;
LABEL_22:
      CFRetain(a3);
      if (!v15) {
        return 0;
      }
      goto LABEL_29;
    }
    int v15 = *(const void **)(v7 + 136);
    *(void *)(v7 + 136) = 0;
    if (!v15) {
      return 0;
    }
    goto LABEL_29;
  }
  if (CFEqual(a2, @"DisplayNonForcedSubtitles"))
  {
    if (a3)
    {
      CFTypeID v16 = CFBooleanGetTypeID();
      if (v16 != CFGetTypeID(a3)) {
        goto LABEL_3;
      }
    }
    *(unsigned char *)(v7 + 144) = CFBooleanGetValue((CFBooleanRef)a3);
    return 0;
  }
  if (CFEqual(a2, @"HDRCrossTalker"))
  {
    if (a3)
    {
      uint64_t v17 = FigCrossTalkerGetTypeID();
      if (v17 != CFGetTypeID(a3)) {
        goto LABEL_3;
      }
      int v15 = *(const void **)(v7 + 304);
      *(void *)(v7 + 304) = a3;
      goto LABEL_22;
    }
    int v15 = *(const void **)(v7 + 304);
    *(void *)(v7 + 304) = 0;
    if (!v15) {
      return 0;
    }
LABEL_29:
    CFRelease(v15);
    return 0;
  }
  uint64_t v18 = *(void *)(v7 + 24);

  return FigRenderPipelineSetProperty_0(v18, (uint64_t)a2, (uint64_t)a3);
}

void figCaptionRenderPipelineInvalidate_Internal(const void *a1, int a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v5 = DerivedStorage;
      if (*(void *)(DerivedStorage + 16))
      {
        MEMORY[0x19970E910]();
        if (*(unsigned char *)v5)
        {
          JUMPOUT(0x19970E930);
        }
        if (a2)
        {
          if (*(void *)(v5 + 200))
          {
            uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v6)
            {
              uint64_t v7 = (const void *)v6;
              (*(void (**)(const void *, uint64_t))(v5 + 200))(a1, v6);
              CFRelease(v7);
            }
          }
          else
          {
            memset(&v23, 0, sizeof(v23));
            figSubtitleRenderPipelineGetCurrentTimeFromTimebase(v5, &v23);
            int v8 = *(_DWORD *)(v5 + 192);
            char v9 = *(unsigned char *)(v5 + 106);
            CMTime v22 = v23;
            caprp_sendSubtitleSample(a1, v8, (uint64_t)&v22, v9, 0);
            *(unsigned char *)(v5 + 106) = 0;
          }
        }
        *(unsigned char *)uint64_t v5 = 1;
        MEMORY[0x19970E930](*(void *)(v5 + 16));
        if (*(void *)(v5 + 32))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterRemoveListener();
          CFRelease(*(CFTypeRef *)(v5 + 32));
          *(void *)(v5 + 32) = 0;
        }
        uint64_t v10 = *(void *)(v5 + 24);
        if (v10)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
          if (FigBaseObject)
          {
            uint64_t v12 = FigBaseObject;
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v14 = v13 ? v13 : 0;
            int v15 = *(void (**)(uint64_t))(v14 + 24);
            if (v15) {
              v15(v12);
            }
          }
          CFRelease(*(CFTypeRef *)(v5 + 24));
          *(void *)(v5 + 24) = 0;
        }
        CFTypeID v16 = *(const void **)(v5 + 216);
        if (v16)
        {
          CFRelease(v16);
          *(void *)(v5 + 216) = 0;
        }
        uint64_t v17 = *(const void **)(v5 + 224);
        if (v17)
        {
          CFRelease(v17);
          *(void *)(v5 + 224) = 0;
        }
        uint64_t v18 = *(const void **)(v5 + 232);
        if (v18)
        {
          CFRelease(v18);
          *(void *)(v5 + 232) = 0;
        }
        CMTime v19 = *(const void **)(v5 + 240);
        if (v19)
        {
          CFRelease(v19);
          *(void *)(v5 + 240) = 0;
        }
        uint64_t v20 = *(const void **)(v5 + 272);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(v5 + 272) = 0;
        }
        uint64_t v21 = *(const void **)(v5 + 256);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(v5 + 256) = 0;
        }
      }
    }
  }
}

void caprp_sendSubtitleSample(const void *a1, int a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 184), a2))
  {
    if (!*(void *)(DerivedStorage + 152)) {
      return;
    }
    uint64_t v16 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v16) {
      return;
    }
    uint64_t v12 = (const void *)v16;
    uint64_t v17 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
    if (v17)
    {
      uint64_t v18 = v17;
      if (a1) {
        CFTypeRef v19 = CFRetain(a1);
      }
      else {
        CFTypeRef v19 = 0;
      }
      uint64_t v25 = *(void *)(DerivedStorage + 152);
      *(void *)uint64_t v18 = v19;
      *((void *)v18 + 1) = v25;
      *((void *)v18 + 2) = CFRetain(v12);
      *((void *)v18 + 3) = a5;
      uint64_t v26 = *(void *)(a3 + 16);
      *((_OWORD *)v18 + 2) = *(_OWORD *)a3;
      long long v27 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v18 + 88) = *MEMORY[0x1E4F1DB20];
      *((void *)v18 + 6) = v26;
      v18[80] = a4;
      v18[81] = 0;
      *(_OWORD *)(v18 + 104) = v27;
      CMTime v22 = *(NSObject **)(DerivedStorage + 8);
      CMTime v23 = (void (__cdecl *)(void *))caprpCommonCallback;
      uint64_t v24 = v18;
      goto LABEL_17;
    }
LABEL_21:
    FigSignalErrorAt();
    goto LABEL_18;
  }
  if (!*(void *)(DerivedStorage + 168)) {
    return;
  }
  uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11) {
    return;
  }
  uint64_t v12 = (const void *)v11;
  uint64_t v13 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
  if (!v13) {
    goto LABEL_21;
  }
  uint64_t v14 = v13;
  if (a1) {
    CFTypeRef v15 = CFRetain(a1);
  }
  else {
    CFTypeRef v15 = 0;
  }
  uint64_t v20 = *(void *)(DerivedStorage + 168);
  void *v14 = v15;
  v14[1] = v20;
  v14[2] = CFRetain(v12);
  v14[3] = 0;
  uint64_t v21 = *(void *)(a3 + 16);
  *((_OWORD *)v14 + 2) = *(_OWORD *)a3;
  v14[6] = v21;
  *((unsigned char *)v14 + 56) = a4;
  CMTime v22 = *(NSObject **)(DerivedStorage + 8);
  CMTime v23 = (void (__cdecl *)(void *))caprpNativeCallback;
  uint64_t v24 = v14;
LABEL_17:
  dispatch_async_f(v22, v24, v23);
LABEL_18:

  CFRelease(v12);
}

void caprpNativeCallback(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  uint64_t v3 = *(void (**)(CFTypeRef, uint64_t, long long *, uint64_t, uint64_t))(a1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  v3(v2, v6, &v10, v5, v7);
  int v8 = *(const void **)(a1 + 24);
  if (v8) {
    CFRelease(v8);
  }
  char v9 = *(const void **)(a1 + 16);
  if (v9) {
    CFRelease(v9);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

void caprpCommonCallback(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  uint64_t v3 = *(void (**)(CFTypeRef, uint64_t, long long *, uint64_t, uint64_t, uint64_t, double, double, double, double))(a1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 81);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v11 = *(_OWORD *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 48);
  v3(v2, v7, &v11, v5, v6, v8, *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112));
  char v9 = *(const void **)(a1 + 24);
  if (v9) {
    CFRelease(v9);
  }
  long long v10 = *(const void **)(a1 + 16);
  if (v10) {
    CFRelease(v10);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

uint64_t caprp_createSubtitleSampleForCaptionGroupSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3, void *a4, void *a5)
{
  CMTime v40 = 0;
  uint64_t v41 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!subrp_SampleBufferShouldBeDisplayed(a2))
  {
    uint64_t v16 = 0;
    CFDictionaryRef Mutable = 0;
    CFDictionaryRef v13 = 0;
    CFTypeRef v19 = 0;
    uint64_t v14 = 0;
    goto LABEL_43;
  }
  uint64_t v28 = DerivedStorage;
  long long v27 = a4;
  uint64_t CaptionGroup = FigSampleBufferGetCaptionGroup();
  if (!CaptionGroup)
  {
    CFDictionaryRef v13 = 0;
    CFDictionaryRef Mutable = 0;
    uint64_t v16 = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_18;
  }
  SliceCFIndex Count = FigCaptionGroupGetSliceCount();
  memset(&v39, 0, sizeof(v39));
  CMSampleBufferGetPresentationTimeStamp(&v39, a2);
  memset(&v38, 0, sizeof(v38));
  CMSampleBufferGetDuration(&v38, a2);
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDictionaryRef v13 = 0;
    goto LABEL_59;
  }
  CFDictionaryRef v13 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v13)
  {
LABEL_59:
    uint64_t v16 = 0;
    CFTypeRef v19 = 0;
    goto LABEL_60;
  }
  if (SliceCount < 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v26 = a5;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      CaptionCFDataRef Data = FigCaptionGroupGetCaptionData();
      if (CaptionData)
      {
        uint64_t v18 = CaptionData;
        memset(&time, 0, sizeof(time));
        FigCaptionGroupGetDurationBeforeSlice();
        long long v35 = 0uLL;
        uint64_t v36 = 0;
        FigCaptionGroupGetDurationAfterSlice();
        CMTime v34 = v39;
        CMTime v33 = v38;
        CMTime v32 = time;
        long long v30 = v35;
        uint64_t v31 = v36;
        uint64_t v14 = FigCaptionDataToMarkupBasedAttributedString(v11, v18, (uint64_t)&v34, &v33, &v32, (uint64_t)&v30, &v41, Mutable, v13);
        if (!v16)
        {
          uint64_t v16 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
          if (!v16) {
            goto LABEL_59;
          }
        }
        CFArrayAppendValue(v16, v41);
        if (v41)
        {
          CFRelease(v41);
          uint64_t v41 = 0;
        }
      }
      ++v15;
    }
    while (SliceCount != v15);
    if (v14)
    {
      CFTypeRef v19 = 0;
      CFTypeRef v20 = 0;
      a5 = v26;
LABEL_42:
      *a5 = v20;
      goto LABEL_43;
    }
    a5 = v26;
  }
LABEL_18:
  CFTypeRef v19 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v19)
  {
LABEL_60:
    uint64_t v14 = 4294954510;
    goto LABEL_43;
  }
  CFDataFromuint64_t CaptionGroup = FigCFDictionarySetInt32();
  if (!CFDataFromCaptionGroup)
  {
    CFDataFromuint64_t CaptionGroup = FigCFDictionarySetInt32();
    if (!CFDataFromCaptionGroup)
    {
      memset(&v39, 0, sizeof(v39));
      CMSampleBufferGetOutputPresentationTimeStamp(&v39, a2);
      memset(&v38, 0, sizeof(v38));
      CMSampleBufferGetDuration(&v38, a2);
      CMTime time = v39;
      CFDictionaryRef v22 = CMTimeCopyAsDictionary(&time, v11);
      CMTime time = v38;
      CFDictionaryRef v23 = CMTimeCopyAsDictionary(&time, v11);
      uint64_t v24 = CFArrayCreateMutable(v11, 2, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(v24, v22);
      CFArrayAppendValue(v24, v23);
      CFDictionarySetValue(v19, @"SubtitleTimeRange", v24);
      if (v22) {
        CFRelease(v22);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (v24) {
        CFRelease(v24);
      }
      if (a3) {
        CFDictionarySetValue(v19, @"SubtitleExtendedLanguageTag", a3);
      }
      if (caprp_isSubtitleOverHDRVideo()) {
        CFDictionarySetValue(v19, @"SubtitleOverHDRVideo", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      if (!v16) {
        uint64_t v16 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
      }
      CFDictionarySetValue(v19, @"SubtitleContent", v16);
      if (!CaptionGroup || !*(unsigned char *)(v28 + 1)) {
        goto LABEL_37;
      }
      CFDataFromuint64_t CaptionGroup = FigCaptionSerializerCreateCFDataFromCaptionGroup();
      if (!CFDataFromCaptionGroup)
      {
        CFDictionarySetValue(v19, @"SubtitleSerializedCaptionGroup", v40);
LABEL_37:
        if (v27) {
          CFDictionarySetValue(v19, @"SubtitleContentMetadata", v27);
        }
        if (Mutable) {
          CFDictionarySetValue(v19, @"SubtitleContentMetadata", Mutable);
        }
        CFTypeRef v20 = CFRetain(v19);
        uint64_t v14 = 0;
        goto LABEL_42;
      }
    }
  }
  uint64_t v14 = CFDataFromCaptionGroup;
LABEL_43:
  if (v41) {
    CFRelease(v41);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v40) {
    CFRelease(v40);
  }
  return v14;
}

uint64_t caprp_createSubtitleSampleForMPEG4Part30SampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3, void *a4, void *a5)
{
  CFTypeRef v32 = 0;
  CMTime v33 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!subrp_SampleBufferShouldBeDisplayed(a2)) {
    return 0;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableAttributedStringRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    CFMutableAttributedStringRef v12 = Mutable;
    CMSampleBufferGetPresentationTimeStamp(&v33, a2);
    CMTime v31 = v33;
    CFStringRef v13 = CMTimeCopyDescription(v10, &v31);
    cf[1] = v10;
    CFTypeRef v35 = 0;
    cf[0] = 0;
    v31.CFTypeRef value = (CMTimeValue)caprp_FigCaptionGroupConverterOutputCallbackMPEG4Part30;
    *(void *)&v31.CMTimeScale timescale = cf;
    uint64_t v14 = FigTTMLCaptionGroupConverterFromSampleBufferCreate(&v31, (uint64_t)v10, &v35);
    if (!v14)
    {
      CFTypeRef v15 = v35;
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(uint64_t (**)(CFTypeRef, opaqueCMSampleBuffer *))(v17 + 8);
      if (!v18) {
        goto LABEL_16;
      }
      uint64_t v14 = v18(v15, a2);
      if (v14) {
        goto LABEL_46;
      }
      CFTypeRef v19 = v35;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v21 = v20 ? v20 : 0;
      CFDictionaryRef v22 = *(uint64_t (**)(CFTypeRef))(v21 + 16);
      if (!v22)
      {
LABEL_16:
        CFArrayRef v23 = 0;
        uint64_t v24 = 4294954514;
        goto LABEL_17;
      }
      uint64_t v14 = v22(v19);
      if (!v14)
      {
        if (!cf[0])
        {
          uint64_t v24 = 0;
          CFArrayRef v23 = 0;
          goto LABEL_19;
        }
        CFArrayRef v23 = (const __CFArray *)CFRetain(cf[0]);
        uint64_t v24 = 0;
LABEL_17:
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
LABEL_19:
        if (v35) {
          CFRelease(v35);
        }
        if (v24)
        {
          CFMutableDictionaryRef v25 = 0;
        }
        else
        {
          if (v23)
          {
            if (CFArrayGetCount(v23) >= 1)
            {
              CFAttributedStringRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v23, 0);
              uint64_t v29 = caprp_createSubtitleSampleForCaptionGroupSampleBuffer(a1, ValueAtIndex, a3, a4, &v32);
              if (v29)
              {
                CFMutableDictionaryRef v25 = 0;
                uint64_t v24 = v29;
                if (!v13)
                {
LABEL_26:
                  CFRelease(v12);
                  if (v25) {
                    CFRelease(v25);
                  }
                  goto LABEL_28;
                }
LABEL_25:
                CFRelease(v13);
                goto LABEL_26;
              }
            }
          }
          if (v32) {
            MutableCFAttributedStringRef Copy = CFDictionaryCreateMutableCopy(v10, 0, (CFDictionaryRef)v32);
          }
          else {
            MutableCFAttributedStringRef Copy = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          }
          CFMutableDictionaryRef v25 = MutableCopy;
          if (MutableCopy)
          {
            CFTypeRef v26 = CFRetain(MutableCopy);
LABEL_24:
            *a5 = v26;
            if (!v13) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }
        }
        CFTypeRef v26 = 0;
        goto LABEL_24;
      }
    }
LABEL_46:
    uint64_t v24 = v14;
    CFArrayRef v23 = 0;
    goto LABEL_17;
  }
  CFArrayRef v23 = 0;
  uint64_t v24 = 4294954510;
LABEL_28:
  if (v32) {
    CFRelease(v32);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v24;
}

uint64_t caprp_createSubtitleSampleForWebVTTSampleBuffer(uint64_t a1, unint64_t *a2, opaqueCMSampleBuffer *a3, const __CFArray *a4, const void *a5, const void *a6, CFTypeRef *a7)
{
  CFNumberRef v44 = 0;
  uint64_t v45 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!subrp_SampleBufferShouldBeDisplayed(a3))
  {
    CFMutableAttributedStringRef Mutable = 0;
    CFDataFromuint64_t CaptionGroup = 0;
    goto LABEL_50;
  }
  CFArrayRef v40 = a4;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableAttributedStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDataFromuint64_t CaptionGroup = 4294954510;
    goto LABEL_48;
  }
  CMTime v38 = a7;
  uint64_t v15 = FigCFDictionarySetInt32();
  if (!v15)
  {
    memset(&v43, 0, sizeof(v43));
    CMSampleBufferGetOutputPresentationTimeStamp(&v43, a3);
    memset(&v42, 0, sizeof(v42));
    CMSampleBufferGetOutputDuration(&v42, a3);
    CMTime time = v43;
    CFDictionaryRef v16 = CMTimeCopyAsDictionary(&time, v13);
    CMTime time = v42;
    CFDictionaryRef v17 = CMTimeCopyAsDictionary(&time, v13);
    uint64_t v18 = CFArrayCreateMutable(v13, 2, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(v18, v16);
    CFArrayAppendValue(v18, v17);
    CFDictionarySetValue(Mutable, @"SubtitleTimeRange", v18);
    if (v16) {
      CFRelease(v16);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (a5) {
      CFDictionarySetValue(Mutable, @"SubtitleExtendedLanguageTag", a5);
    }
    if (caprp_isSubtitleOverHDRVideo()) {
      CFDictionarySetValue(Mutable, @"SubtitleOverHDRVideo", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (!*(unsigned char *)(DerivedStorage + 1))
    {
      CFDataFromuint64_t CaptionGroup = WebVTTCreateAttributedStringArrayFromSampleBuffer(a2, a3, v40, &v45);
      CFArrayRef v23 = v45;
      uint64_t v24 = a6;
      if (!v45)
      {
        CFArrayRef v23 = CFArrayCreate(v13, 0, 0, MEMORY[0x1E4F1D510]);
        uint64_t v45 = v23;
      }
      CFDictionarySetValue(Mutable, @"SubtitleContent", v23);
      CFArrayRef v25 = 0;
      if (!a6)
      {
LABEL_23:
        *CMTime v38 = CFRetain(Mutable);
        if (!v25) {
          goto LABEL_48;
        }
        goto LABEL_24;
      }
LABEL_22:
      CFDictionarySetValue(Mutable, @"SubtitleContentMetadata", v24);
      goto LABEL_23;
    }
    if (!CMSampleBufferGetDataBuffer(a3) || !CMSampleBufferGetNumSamples(a3)) {
      goto LABEL_55;
    }
    uint64_t CMBaseObject = FigCaptionGroupConverterFromSampleBufferGetCMBaseObject(*(void *)(DerivedStorage + 296));
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CFTypeRef v26 = *(uint64_t (**)(uint64_t, uint64_t, const __CFArray *))(v21 + 56);
    if (!v26) {
      goto LABEL_47;
    }
    uint64_t v15 = v26(CMBaseObject, 0x1EE55B598, v40);
    if (!v15)
    {
      uint64_t v27 = *(void *)(DerivedStorage + 296);
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      long long v30 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v29 + 8);
      if (!v30) {
        goto LABEL_47;
      }
      uint64_t v15 = v30(v27, a3);
      if (!v15)
      {
        if (!_os_feature_enabled_impl()) {
          goto LABEL_39;
        }
        uint64_t v31 = *(void *)(DerivedStorage + 296);
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        CMTime v34 = *(uint64_t (**)(uint64_t))(v33 + 16);
        if (v34)
        {
          uint64_t v15 = v34(v31);
          if (!v15)
          {
LABEL_39:
            CFTypeRef v35 = *(const void **)(DerivedStorage + 272);
            if (v35)
            {
              CFArrayRef v25 = (const __CFArray *)CFRetain(v35);
              uint64_t v36 = *(const void **)(DerivedStorage + 272);
              if (v36)
              {
                CFRelease(v36);
                *(void *)(DerivedStorage + 272) = 0;
              }
              if (v25)
              {
                if (CFArrayGetCount(v25) >= 1)
                {
                  CFArrayGetValueAtIndex(v25, 0);
                  if (FigSampleBufferGetCaptionGroup())
                  {
                    CFDataFromuint64_t CaptionGroup = FigCaptionSerializerCreateCFDataFromCaptionGroup();
                    if (CFDataFromCaptionGroup)
                    {
LABEL_24:
                      CFRelease(v25);
                      goto LABEL_48;
                    }
                    CFDictionarySetValue(Mutable, @"SubtitleSerializedCaptionGroup", v44);
LABEL_57:
                    uint64_t v24 = a6;
                    if (!a6) {
                      goto LABEL_23;
                    }
                    goto LABEL_22;
                  }
                }
              }
LABEL_56:
              CFDataFromuint64_t CaptionGroup = 0;
              goto LABEL_57;
            }
LABEL_55:
            CFArrayRef v25 = 0;
            goto LABEL_56;
          }
          goto LABEL_61;
        }
LABEL_47:
        CFDataFromuint64_t CaptionGroup = 4294954514;
        goto LABEL_48;
      }
    }
  }
LABEL_61:
  CFDataFromuint64_t CaptionGroup = v15;
LABEL_48:
  if (v44) {
    CFRelease(v44);
  }
LABEL_50:
  if (v45) {
    CFRelease(v45);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return CFDataFromCaptionGroup;
}

uint64_t caprp_createSubtitleSampleForTX3GSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3, CFTypeRef *a4, BOOL *a5, unsigned char *a6, unsigned char *a7, _OWORD *a8)
{
  v54[0] = 0;
  long long v14 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v52 = *MEMORY[0x1E4F1DB20];
  long long v53 = v14;
  CFAttributedStringRef aStr = 0;
  CFTypeRef value = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableAttributedStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFNumberRef v44 = a5;
    uint64_t v18 = FigCFDictionarySetInt32();
    if (v18) {
      goto LABEL_65;
    }
    CMTime v42 = a6;
    CMTime v43 = a7;
    memset(&v48, 0, sizeof(v48));
    CMSampleBufferGetOutputPresentationTimeStamp(&v48, a2);
    memset(&v47, 0, sizeof(v47));
    CMSampleBufferGetOutputDuration(&v47, a2);
    CMTime time = v48;
    CFDictionaryRef v19 = CMTimeCopyAsDictionary(&time, v16);
    CMTime time = v47;
    CFDictionaryRef v20 = CMTimeCopyAsDictionary(&time, v16);
    uint64_t v21 = CFArrayCreateMutable(v16, 2, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(v21, v19);
    CFArrayAppendValue(v21, v20);
    CFDictionarySetValue(Mutable, @"SubtitleTimeRange", v21);
    if (v19) {
      CFRelease(v19);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (a3) {
      CFDictionarySetValue(Mutable, @"SubtitleExtendedLanguageTag", a3);
    }
    if (caprp_isSubtitleOverHDRVideo()) {
      CFDictionarySetValue(Mutable, @"SubtitleOverHDRVideo", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    uint64_t v18 = FigTextSampleBufferDecryptSample(DerivedStorage + 40, a2, &cf);
    if (v18) {
      goto LABEL_65;
    }
    CFDictionaryRef v22 = cf ? (opaqueCMSampleBuffer *)cf : a2;
    uint64_t v18 = FigTextSampleBufferCopyAttributedString(DerivedStorage + 40, v16, v22, &aStr, (char *)v54 + 1, v54, (double *)&v52);
    if (v18) {
      goto LABEL_65;
    }
    if (*(unsigned char *)(DerivedStorage + 1))
    {
      if (!CMSampleBufferGetDataBuffer(v22) || !CMSampleBufferGetNumSamples(v22)) {
        goto LABEL_50;
      }
      uint64_t v23 = *(void *)(DerivedStorage + 288);
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v29 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v25 + 8);
      if (!v29) {
        goto LABEL_49;
      }
      uint64_t v18 = v29(v23, v22);
      if (!v18)
      {
        if (!_os_feature_enabled_impl()) {
          goto LABEL_40;
        }
        uint64_t v30 = *(void *)(DerivedStorage + 288);
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        CMTime v34 = *(uint64_t (**)(uint64_t))(v32 + 16);
        if (v34)
        {
          uint64_t v18 = v34(v30);
          if (!v18)
          {
LABEL_40:
            CFTypeRef v35 = *(const void **)(DerivedStorage + 256);
            if (v35)
            {
              CFArrayRef v33 = (const __CFArray *)CFRetain(v35);
              uint64_t v36 = *(const void **)(DerivedStorage + 256);
              if (v36)
              {
                CFRelease(v36);
                *(void *)(DerivedStorage + 256) = 0;
              }
              if (v33 && CFArrayGetCount(v33) >= 1)
              {
                CFArrayGetValueAtIndex(v33, 0);
                if (FigSampleBufferGetCaptionGroup())
                {
                  CFDataFromuint64_t CaptionGroup = FigCaptionSerializerCreateCFDataFromCaptionGroup();
                  if (CFDataFromCaptionGroup)
                  {
                    uint64_t v39 = CFDataFromCaptionGroup;
                    CFTypeRef v26 = 0;
LABEL_53:
                    CFRelease(v33);
                    uint64_t v38 = v39;
                    goto LABEL_54;
                  }
                  CFDictionarySetValue(Mutable, @"SubtitleSerializedCaptionGroup", value);
                }
                CFTypeRef v26 = 0;
                BOOL v28 = FigCaptionGroupGetSliceCount() == 0;
LABEL_52:
                uint64_t v39 = 0;
                uint64_t v38 = 0;
                *a4 = CFRetain(Mutable);
                *CFNumberRef v44 = v28;
                *CMTime v42 = HIBYTE(v54[0]);
                *CMTime v43 = v54[0];
                long long v40 = v53;
                *a8 = v52;
                a8[1] = v40;
                if (!v33) {
                  goto LABEL_54;
                }
                goto LABEL_53;
              }
LABEL_51:
              CFTypeRef v26 = 0;
              BOOL v28 = 0;
              goto LABEL_52;
            }
LABEL_50:
            CFArrayRef v33 = 0;
            goto LABEL_51;
          }
          goto LABEL_65;
        }
LABEL_49:
        CFTypeRef v26 = 0;
        uint64_t v38 = 4294954514;
        goto LABEL_54;
      }
LABEL_65:
      uint64_t v38 = v18;
      CFTypeRef v26 = 0;
      goto LABEL_54;
    }
    CFTypeRef v26 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
    if (v26)
    {
      if (aStr)
      {
        CFStringRef String = CFAttributedStringGetString(aStr);
        if (CFStringGetLength(String))
        {
          if (aStr)
          {
            CFArrayAppendValue(v26, aStr);
            BOOL v28 = aStr == 0;
LABEL_36:
            CFDictionarySetValue(Mutable, @"SubtitleContent", v26);
            CFArrayRef v33 = 0;
            goto LABEL_52;
          }
        }
        else
        {
          CFRelease(aStr);
          CFAttributedStringRef aStr = 0;
        }
      }
      BOOL v28 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    CFTypeRef v26 = 0;
  }
  uint64_t v38 = 4294954510;
LABEL_54:
  if (value) {
    CFRelease(value);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (aStr) {
    CFRelease(aStr);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v38;
}

uint64_t caprp_isSubtitleOverHDRVideo()
{
  CFTypeRef cf = 0;
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 304);
  if (!v0) {
    return 0;
  }
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v0);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v3 = v2 ? v2 : 0;
  __n128 v4 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  if (v4(FigBaseObject, 0x1EE56ACD8, *MEMORY[0x1E4F1CF80], &cf)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *MEMORY[0x1E4F1CFD0] == (void)cf;
  }
  uint64_t v6 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t caprp_FigCaptionGroupConverterOutputCallbackMPEG4Part30(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  if (!*a3)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a3[1], 0, MEMORY[0x1E4F1D510]);
    *a3 = Mutable;
    if (!Mutable) {
      return 4294954516;
    }
  }
  if (!FigCaptionGroupGetSliceCount()) {
    return 0;
  }
  uint64_t v5 = FigSampleBufferCreateForCaptionGroup();
  if (!v5) {
    CFArrayAppendValue(*a3, 0);
  }
  return v5;
}

void caprpFlushCallback(CFTypeRef *a1)
{
  ((void (*)(CFTypeRef, CFTypeRef))a1[1])(*a1, a1[2]);
  CFTypeRef v2 = a1[2];
  if (v2) {
    CFRelease(v2);
  }
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

uint64_t CreateSampleGeneratorForLPCM(void *a1)
{
  CFTypeRef v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x10200406925D324uLL);
  if (!v2) {
    return 12;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  a1[6] = LPCMPushForType;
  a1[8] = LPCMResyncForType;
  a1[7] = LPCMFlushForType;
  a1[9] = LPCMDestroyForType;
  a1[10] = LPCMReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t LPCMPushForType(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  char *returnedPointerOut;
  unsigned char temporaryBlock[7];
  unsigned int v39;
  unint64_t v40;
  AudioStreamBasicDescription asbd;

  uint64_t v11 = *(void *)(a1 + 88);
  long long v40 = 0;
  uint64_t v39 = 0;
  returnedPointerOut = 0;
  if (*(_DWORD *)a1 == 1886612592) {
    size_t v12 = 7;
  }
  else {
    size_t v12 = 4;
  }
  if (a5)
  {
    uint64_t appended = LPCMFlushForType(a1);
    if (appended) {
      goto LABEL_59;
    }
  }
  uint64_t appended = CMBlockBufferAccessDataBytes(theBuffer, 0, v12, temporaryBlock, &returnedPointerOut);
  if (appended) {
    goto LABEL_59;
  }
  uint64_t v36 = a6;
  int v35 = a5;
  uint64_t v34 = a3;
  if (*(_DWORD *)a1 == 1886612592)
  {
    uint64_t appended = PSLPCMGetSampleFrequency((uint64_t)returnedPointerOut, &v39);
    if (appended) {
      goto LABEL_59;
    }
    int v14 = PSLPCMGetChannelLayout((uint64_t)returnedPointerOut);
    UInt32 v15 = PSLPCMGetQuantization((uint64_t)returnedPointerOut);
    uint64_t appended = PSLPCMGetSamplesPerFrame((uint64_t)returnedPointerOut, &v40);
    if (appended) {
      goto LABEL_59;
    }
    int v16 = v40;
    UInt32 v17 = PSLPCMGetFrameCountOfPacket((uint64_t)returnedPointerOut) * v16;
  }
  else
  {
    uint64_t v39 = LPCMGetSampleFrequency((uint64_t)returnedPointerOut);
    if (!v39)
    {
      uint64_t v25 = 0;
      goto LABEL_60;
    }
    int v14 = LPCMGetChannelLayout((uint64_t)returnedPointerOut);
    UInt32 v15 = LPCMGetBitsPerChannelSample((uint64_t)returnedPointerOut);
    UInt32 v17 = LPCMGetSamplesPerFrame((unsigned __int16 *)returnedPointerOut);
  }
  uint64_t v18 = (CFTypeRef *)(a1 + 40);
  if (*(void *)(a1 + 40)
    && *(unsigned __int16 *)(v11 + 16) == (unsigned __int16)v14
    && v17 == *(_DWORD *)(v11 + 4)
    && v39 == *(_DWORD *)v11)
  {
    goto LABEL_52;
  }
  LPCMFlushForType(a1);
  unsigned int v19 = v39;
  memset(&asbd.mFormatID, 0, 32);
  CFDictionaryRef v20 = (AudioChannelLayout *)malloc_type_calloc(1uLL, 20 * (unsigned __int16)v14 + 12, 0x90B379D8uLL);
  if (!v20) {
    return 12;
  }
  uint64_t v21 = v20;
  if (v14 > 458755)
  {
    if (v14 > 589829)
    {
      if (v14 != 589830)
      {
        if (v14 == 655368 || v14 == 720904)
        {
          v20->mChannelLayoutTag = 0;
          v20->mNumberChannelDescriptions = (unsigned __int16)v14;
          v20->mChannelDescriptions[0].mChannelLabel = 1;
          v20[1].mChannelLayoutTag = 2;
          LODWORD(v20[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
          v20[2].mNumberChannelDescriptions = 5;
          LODWORD(v20[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
          v20[3].mChannelDescriptions[0].mChannelFlags = 34;
          v20[4].mChannelBitmap = 6;
          LODWORD(v20[4].mChannelDescriptions[0].mCoordinates[1]) = 4 * (v14 != 655368);
          goto LABEL_42;
        }
        goto LABEL_40;
      }
LABEL_30:
      v20->mChannelLayoutTag = 0;
      v20->mNumberChannelDescriptions = (unsigned __int16)v14;
      v20->mChannelDescriptions[0].mChannelLabel = 1;
      v20[1].mChannelLayoutTag = 2;
      LODWORD(v20[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
      v20[2].mNumberChannelDescriptions = 5;
      LODWORD(v20[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
      v20[3].mChannelDescriptions[0].mChannelFlags = 4 * (v14 != 524294);
      goto LABEL_42;
    }
    if (v14 != 458756)
    {
      if (v14 == 524294) {
        goto LABEL_30;
      }
LABEL_40:
      int v22 = 6619138;
      goto LABEL_41;
    }
    int v22 = 8650756;
LABEL_41:
    v20->mChannelLayoutTag = v22;
    goto LABEL_42;
  }
  if (v14 > 327683)
  {
    if (v14 != 327684)
    {
      if (v14 != 393220) {
        goto LABEL_40;
      }
      int v22 = 7536644;
      goto LABEL_41;
    }
  }
  else
  {
    if (v14 == 65538)
    {
      v20->mChannelLayoutTag = 0;
      v20->mNumberChannelDescriptions = (unsigned __int16)v14;
      v20->mChannelDescriptions[0].mChannelLabel = 42;
      v20[1].mChannelLayoutTag = 0;
      goto LABEL_42;
    }
    if (v14 != 262148) {
      goto LABEL_40;
    }
  }
  v20->mChannelLayoutTag = 0;
  v20->mNumberChannelDescriptions = (unsigned __int16)v14;
  v20->mChannelDescriptions[0].mChannelLabel = 1;
  v20[1].mChannelLayoutTag = 2;
  if (v14 == 262148) {
    int v23 = 3;
  }
  else {
    int v23 = 9;
  }
  LODWORD(v20[1].mChannelDescriptions[0].mCoordinates[0]) = v23;
  v20[2].mNumberChannelDescriptions = 0;
LABEL_42:
  asbd.mSampleRate = (double)v19;
  asbd.mFormatIOSurfaceID ID = 1819304813;
  asbd.mFramesPerPacket = v17;
  asbd.mChannelsPerFrame = (unsigned __int16)v14;
  asbd.mBitsPerChannel = v15;
  if ((v15 & 0xFFFFFFF7) == 0x10)
  {
    asbd.mFormatFlags = 14;
    asbd.mFramesPerPacket = 1;
    UInt32 v24 = (v15 >> 3) * (unsigned __int16)v14;
  }
  else
  {
    if (v15 != 20) {
      goto LABEL_47;
    }
    asbd.mFormatFlags = 22;
    asbd.mFramesPerPacket = 1;
    UInt32 v24 = 3 * (unsigned __int16)v14;
  }
  asbd.mBytesPerFrame = v24;
  asbd.mBytesPerPacket = v24;
LABEL_47:
  if (*v18)
  {
    CFRelease(*v18);
    *uint64_t v18 = 0;
  }
  uint64_t v25 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &asbd, 0x20uLL, v21, 0, 0, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
  free(v21);
  if (!v25)
  {
    *(_DWORD *)(v11 + 16) = v14;
    *(_DWORD *)uint64_t v11 = v39;
    *(_DWORD *)(v11 + 4) = v17;
    *(_DWORD *)(v11 + 8) = v15;
    CFTypeRef v26 = *(uint64_t (**)(uint64_t, void, void))(a1 + 16);
    if (!v26 || (uint64_t appended = v26(a1, *(void *)(a1 + 32), *(void *)(a1 + 40)), !appended))
    {
LABEL_52:
      size_t v27 = CMBlockBufferGetDataLength(theBuffer) - v12;
      BOOL v28 = *(OpaqueCMBlockBuffer **)(v11 + 24);
      if (!v28)
      {
        uint64_t Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), 1u, 0, (CMBlockBufferRef *)(v11 + 24));
        if (Empty) {
          return Empty;
        }
        *(_DWORD *)(v11 + 32) = v17;
        *(void *)(v11 + 40) = v27;
        uint64_t v30 = *(void *)(v34 + 16);
        *(_OWORD *)(v11 + 48) = *(_OWORD *)v34;
        *(_DWORD *)(v11 + 20) = v35;
        *(void *)(v11 + 64) = v30;
        *(void *)(v11 + 72) = v36;
        BOOL v28 = *(OpaqueCMBlockBuffer **)(v11 + 24);
      }
      uint64_t appended = CMBlockBufferAppendBufferReference(v28, theBuffer, v12, v27, 0);
      if (!appended)
      {
        *(_DWORD *)(v11 + 32) = v17;
        *(void *)(v11 + 40) = v27;
        return LPCMFlushForType(a1);
      }
    }
LABEL_59:
    uint64_t v25 = appended;
LABEL_60:
    uint64_t v32 = *(void *)(a1 + 88);
    CFArrayRef v33 = *(const void **)(v32 + 24);
    if (v33) {
      CFRelease(v33);
    }
    *(void *)(v32 + 24) = 0;
    *(_DWORD *)(v32 + 32) = 0;
    *(void *)(v32 + 40) = 0;
  }
  return v25;
}

void LPCMResyncForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  CFTypeRef v2 = *(const void **)(v1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
}

uint64_t LPCMFlushForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  CFTypeRef v2 = *(OpaqueCMBlockBuffer **)(v1 + 24);
  if (!v2) {
    return 0;
  }
  CFAllocatorRef v4 = *(const __CFAllocator **)(a1 + 8);
  uint64_t v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  CMItemCount v6 = *(unsigned int *)(v1 + 32);
  CMTime presentationTimeStamp = *(CMTime *)(v1 + 48);
  CMAttachmentBearerRef target = 0;
  uint64_t v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, 0, (CMSampleBufferRef *)&target);
  if (v7)
  {
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v1 + 20);
    if (v8)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F278], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      uint64_t v8 = *(unsigned int *)(v1 + 20);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, CMAttachmentBearerRef, void, uint64_t))(a1 + 24))(a1, *(void *)(a1 + 32), target, *(void *)(v1 + 72), v8);
    if (target) {
      CFRelease(target);
    }
  }
  CFAllocatorRef v10 = *(const void **)(v1 + 24);
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 28) = 0;
  *(void *)(v1 + 20) = 0;
  return v9;
}

void LPCMDestroyForType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v3 = *(void **)(a1 + 88);
    if (*(void *)(v1 + 24))
    {
      CFRelease(*(CFTypeRef *)(v1 + 24));
      uint64_t v3 = *(void **)(a1 + 88);
    }
    *(void *)(v1 + 24) = 0;
    *(_DWORD *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    free(v3);
    *(void *)(a1 + 88) = 0;
  }
}

uint64_t LPCMReadBitRate(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 40)) {
    return 4294954323;
  }
  if (!a2) {
    return 4294954516;
  }
  uint64_t result = 0;
  *a2 = *(unsigned int *)(*(void *)(a1 + 88) + 12);
  return result;
}

uint64_t FigTTMLSpanCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (!v8)
      {
        uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v8)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            CFMutableArrayRef v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
            *(void *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              uint64_t v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLSpan_ConsumeChildNode, (uint64_t *)a3);
              if (!v12) {
                *a4 = 0;
              }
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSpan_ConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef theString = 0;
  CFTypeRef value = 0;
  CFAllocatorRef v7 = CFGetAllocator(*a2);
  uint64_t v8 = FigTTMLParseAndCreateInlineClassNode(v7, a1, a2, &value);
  if (v8) {
    goto LABEL_24;
  }
  if (!value)
  {
    CFAllocatorRef v11 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLParseAndCreateAnimationClassNode((uint64_t)v11, a1, (uint64_t)a2, &value);
    if (!v8)
    {
      CFAllocatorRef v10 = value;
      if (!value)
      {
        uint64_t v14 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
        uint64_t v12 = v14;
        if (a3 && !v14) {
          goto LABEL_12;
        }
        goto LABEL_14;
      }
      uint64_t v9 = *(__CFArray **)(DerivedStorage + 144);
      goto LABEL_10;
    }
LABEL_24:
    uint64_t v12 = v8;
    goto LABEL_14;
  }
  uint64_t v8 = FigTTMLNodeCopyNodeValue((uint64_t)value, &theString);
  if (v8) {
    goto LABEL_24;
  }
  if (theString && !CFStringGetLength(theString))
  {
    if (value)
    {
      CFRelease(value);
      CFTypeRef value = 0;
    }
    goto LABEL_11;
  }
  uint64_t v9 = *(__CFArray **)(DerivedStorage + 136);
  CFAllocatorRef v10 = value;
LABEL_10:
  CFArrayAppendValue(v9, v10);
LABEL_11:
  if (a3)
  {
LABEL_12:
    uint64_t v12 = 0;
    *a3 = value;
    CFTypeRef value = 0;
    goto LABEL_16;
  }
  uint64_t v12 = 0;
LABEL_14:
  if (value) {
    CFRelease(value);
  }
LABEL_16:
  if (theString) {
    CFRelease(theString);
  }
  return v12;
}

void figTTMLSpan_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeRef v2 = *(const void **)(DerivedStorage + 144);
  if (v2) {
    CFRelease(v2);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLSpan_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"span: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLSpan_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLSpan_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 5;
  return 0;
}

uint64_t LPCMCheckHeader(unsigned __int16 *a1)
{
  uint64_t result = 0;
  int v3 = __rev16(*a1);
  char v4 = *((unsigned char *)a1 + 2);
  int v5 = v4 & 0xF;
  unsigned int v6 = *((unsigned __int8 *)a1 + 3);
  unsigned int v7 = v6 >> 6;
  if (v3 <= 4319)
  {
    if (v3 > 1919)
    {
      switch(v3)
      {
        case 1920:
          if (v7 == 1 && v5 == 1) {
            return 1;
          }
          uint64_t result = 0;
          if ((v4 & 0xD0) != 0x10 || v7 != 1) {
            return result;
          }
          break;
        case 2880:
          if ((v7 == 1 && (v4 & 0xE0) == 128 || (v6 & 0x80u) != 0) && v5 == 1) {
            return 1;
          }
          uint64_t result = 0;
          if ((v4 & 0xD0) != 0x10 || ((char)v6 & 0x80000000) == 0) {
            return result;
          }
          break;
        case 3840:
          BOOL v10 = (v4 & 0xE0) == 160;
          if (v7 != 1) {
            BOOL v10 = 0;
          }
          BOOL v11 = v5 == 1 && v10;
          BOOL v12 = v5 == 2 && v7 == 1;
          if (!v11 && !v12)
          {
            uint64_t result = 0;
            if ((v4 & 0xD0) != 0x10 || v7 != 1) {
              return result;
            }
            goto LABEL_104;
          }
          return 1;
        default:
          return result;
      }
      if (v5 != 2) {
        return result;
      }
      return 1;
    }
    if (v3 == 960) {
      return (v4 & 0xD0) == 0x10 && v7 == 1 && v5 == 1;
    }
    if (v3 != 1440) {
      return result;
    }
    if ((v4 & 0xD0) == 0x10) {
      return (v6 & 0x80u) != 0 && v5 == 1;
    }
    return 0;
  }
  if (v3 > 8639)
  {
    switch(v3)
    {
      case 8640:
        if ((v4 & 0xE0) == 0x80) {
          return (v6 & 0x80u) != 0 && v5 == 2;
        }
        break;
      case 11520:
        int v21 = v4 & 0xE0;
        if (v21 == 128)
        {
          if ((v6 & 0x80) != 0 && v5 == 3) {
            return 1;
          }
        }
        else if (v21 == 160 && (v6 & 0x80) != 0 && v5 == 2)
        {
          return 1;
        }
        uint64_t result = 0;
        if ((v6 & 0x80) == 0) {
          return result;
        }
LABEL_104:
        if (v5 != 3) {
          return result;
        }
        return 1;
      case 17280:
        if ((v4 & 0xE0) == 0x80) {
          return (v6 & 0x80u) != 0 && v5 == 3;
        }
        break;
      default:
        return result;
    }
    return 0;
  }
  switch(v3)
  {
    case 4320:
      if ((v4 & 0xE0) == 0x80) {
        return (v6 & 0x80u) != 0 && v5 == 1;
      }
      return 0;
    case 5760:
      if ((v4 & 0xE0) != 0xA0 || (v6 & 0x80) == 0 || v5 != 1)
      {
        BOOL v18 = v7 == 1 && (v4 & 0xE0) == 128;
        BOOL v19 = v18 || (v6 & 0x80u) != 0;
        if (!v19 || v5 != 2)
        {
          uint64_t result = 0;
          if ((v4 & 0xD0) != 0x10 || ((char)v6 & 0x80000000) == 0) {
            return result;
          }
          goto LABEL_104;
        }
      }
      return 1;
    case 7680:
      BOOL v8 = (v4 & 0xE0) == 160;
      if (v7 != 1) {
        BOOL v8 = 0;
      }
      if (v5 != 2) {
        BOOL v8 = 0;
      }
      BOOL v9 = v5 == 3 && v7 == 1;
      return v8 | v9;
  }
  return result;
}

uint64_t LPCMGetChannelLayout(uint64_t a1)
{
  uint64_t v1 = (*(unsigned __int8 *)(a1 + 2) >> 4) - 1;
  if (v1 > 0xA) {
    return 196610;
  }
  else {
    return dword_1949997D0[v1];
  }
}

uint64_t LPCMGetBitsPerChannelSample(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 3) >> 6;
  if (v1 == 3) {
    unsigned int v2 = 24;
  }
  else {
    unsigned int v2 = 16;
  }
  if (v1 == 2) {
    return 20;
  }
  else {
    return v2;
  }
}

uint64_t LPCMGetSamplesPerFrame(unsigned __int16 *a1)
{
  unsigned int v2 = __rev16(*a1);
  int v3 = (unsigned __int16)LPCMGetChannelLayout((uint64_t)a1);
  if (*((char *)a1 + 3) >= 0) {
    int v4 = 2;
  }
  else {
    int v4 = 3;
  }
  return v2 / (v4 * v3);
}

uint64_t LPCMGetSampleFrequency(uint64_t a1)
{
  int v1 = *(unsigned char *)(a1 + 2) & 0xF;
  if (v1 == 5) {
    unsigned int v2 = 192000;
  }
  else {
    unsigned int v2 = 48000;
  }
  if (v1 == 4) {
    return 96000;
  }
  else {
    return v2;
  }
}

uint64_t LPCMGetFrameSize(unsigned __int16 *a1)
{
  return __rev16(*a1) + 4;
}

uint64_t PSLPCMCheckHeader(unsigned char *a1)
{
  if ((*a1 & 0xF8) == 0xA0) {
    return PSLPCMGetBytesPerFrame((uint64_t)a1, &v3);
  }
  uint64_t result = FigSignalErrorAt();
  if (!result) {
    return PSLPCMGetBytesPerFrame((uint64_t)a1, &v3);
  }
  return result;
}

uint64_t PSLPCMGetBytesPerFrame(uint64_t a1, uint64_t *a2)
{
  *a2 = 0;
  unsigned int v8 = 0;
  uint64_t result = PSLPCMGetSampleFrequency(a1, &v8);
  if (!result)
  {
    unint64_t v5 = v8 / 0x258uLL + v8 / 0x258 * (unint64_t)(*(unsigned char *)(a1 + 5) & 7);
    int v6 = *(unsigned char *)(a1 + 5) & 0xC0;
    if (v6 == 128)
    {
      uint64_t result = 0;
      uint64_t v7 = 3 * v5;
      goto LABEL_7;
    }
    if (v6 == 64)
    {
      return 4294954321;
    }
    else
    {
      if ((*(unsigned char *)(a1 + 5) & 0xC0) == 0)
      {
        uint64_t result = 0;
        uint64_t v7 = 2 * v5;
LABEL_7:
        *a2 = v7;
        return result;
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t PSLPCMGetFrameCountOfPacket(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t PSLPCMGetByteOffsetToStartFrameOfPacket(uint64_t a1)
{
  return __rev16(*(unsigned __int16 *)(a1 + 2));
}

uint64_t PSLPCMGetSampleFrequency(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  if ((*(unsigned char *)(a1 + 5) & 0x30) != 0) {
    return FigSignalErrorAt();
  }
  *a2 = 48000;
  return 0;
}

uint64_t PSLPCMGetSamplesPerFrame(uint64_t a1, unint64_t *a2)
{
  unsigned int v4 = 0;
  *a2 = 0;
  uint64_t result = PSLPCMGetSampleFrequency(a1, &v4);
  if (!result) {
    *a2 = v4 / 0x258uLL;
  }
  return result;
}

uint64_t PSLPCMGetChannelLayout(uint64_t a1)
{
  return dword_1949997FC[*(unsigned char *)(a1 + 5) & 7];
}

uint64_t PSLPCMGetQuantization(uint64_t a1)
{
  int v1 = *(unsigned char *)(a1 + 5) & 0xC0;
  if ((*(unsigned char *)(a1 + 5) & 0xC0) != 0) {
    int v2 = 0;
  }
  else {
    int v2 = 16;
  }
  if (v1 == 64) {
    unsigned int v3 = 20;
  }
  else {
    unsigned int v3 = v2;
  }
  if (v1 == 128) {
    return 24;
  }
  else {
    return v3;
  }
}

uint64_t FigPlaybackItemSegmentGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

__n128 FigPlaybackItemSegmentGetTimeMapping@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(a2 + 48) = v2;
  long long v3 = *(_OWORD *)(a1 + 100);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 84);
  *(_OWORD *)(a2 + 80) = v3;
  __n128 result = *(__n128 *)(a1 + 20);
  long long v5 = *(_OWORD *)(a1 + 36);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t FigPlaybackItemSegmentGetLoadedTimeRanges(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t FigPlaybackItemSegmentGetStartDate(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t FigPlaybackItemSegmentGetInterstitialEvent(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t FigPlaybackItemSegmentCreate(int a1, long long *a2, const void *a3, const void *a4, const void *a5, void *a6)
{
  if (a6
    && (a1 == 1 || !a1 && !a5)
    && (MEMORY[0x19970EE10](&FigPlaybackItemSegmentGetTypeID_sFigPlaybackItemSegmentRegisterOnce, FigPlaybackItemSegment_initOnce), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    CFAllocatorRef v13 = (void *)Instance;
    *(_DWORD *)(Instance + 16) = a1;
    long long v14 = *a2;
    *(_OWORD *)(Instance + 36) = a2[1];
    *(_OWORD *)(Instance + 20) = v14;
    long long v15 = a2[2];
    long long v16 = a2[3];
    long long v17 = a2[4];
    *(_OWORD *)(Instance + 100) = a2[5];
    *(_OWORD *)(Instance + 84) = v17;
    *(_OWORD *)(Instance + 68) = v16;
    *(_OWORD *)(Instance + 52) = v15;
    if (a3) {
      CFTypeRef v18 = CFRetain(a3);
    }
    else {
      CFTypeRef v18 = 0;
    }
    v13[15] = v18;
    if (a4) {
      CFTypeRef v19 = CFRetain(a4);
    }
    else {
      CFTypeRef v19 = 0;
    }
    v13[16] = v19;
    if (a5) {
      CFTypeRef v20 = CFRetain(a5);
    }
    else {
      CFTypeRef v20 = 0;
    }
    v13[17] = v20;
    *a6 = v13;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlaybackItemSegment_initOnce()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlaybackItemSegmentIOSurfaceID ID = result;
  return result;
}

double fpis_init(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void fpis_finalize(void *a1)
{
  long long v2 = (const void *)a1[15];
  if (v2)
  {
    CFRelease(v2);
    a1[15] = 0;
  }
  long long v3 = (const void *)a1[16];
  if (v3)
  {
    CFRelease(v3);
    a1[16] = 0;
  }
  unsigned int v4 = (const void *)a1[17];
  if (v4)
  {
    CFRelease(v4);
    a1[17] = 0;
  }
}

CFStringRef fpfis_copyFormattingDesc(uint64_t a1)
{
  long long v2 = (__CFString *)FigCFCopyCompactDescription();
  if (fpfis_copyFormattingDesc_onceToken != -1) {
    dispatch_once(&fpfis_copyFormattingDesc_onceToken, &__block_literal_global_75);
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(_DWORD *)(a1 + 16)) {
    unsigned int v4 = @"I";
  }
  else {
    unsigned int v4 = @"P";
  }
  uint64_t v5 = *(void *)(a1 + 128);
  *(_OWORD *)&time.start.CFTypeRef value = *(_OWORD *)(a1 + 20);
  time.start.CMTimeEpoch epoch = *(void *)(a1 + 36);
  Float64 Seconds = CMTimeGetSeconds(&time.start);
  long long v7 = *(_OWORD *)(a1 + 36);
  *(_OWORD *)&time.start.CFTypeRef value = *(_OWORD *)(a1 + 20);
  *(_OWORD *)&time.start.CMTimeEpoch epoch = v7;
  *(_OWORD *)&time.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 52);
  CMTimeRangeGetEnd(&v17, &time);
  Float64 v8 = CMTimeGetSeconds(&v17);
  *(_OWORD *)&time.start.CFTypeRef value = *(_OWORD *)(a1 + 68);
  time.start.CMTimeEpoch epoch = *(void *)(a1 + 84);
  Float64 v9 = CMTimeGetSeconds(&time.start);
  long long v10 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)&time.start.CFTypeRef value = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&time.start.CMTimeEpoch epoch = v10;
  *(_OWORD *)&time.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 100);
  CMTimeRangeGetEnd(&v15, &time);
  double v11 = CMTimeGetSeconds(&v15);
  if (fpfis_copyFormattingDesc_includeLoadedTimeRange) {
    BOOL v12 = v2;
  }
  else {
    BOOL v12 = &stru_1EE53F4B8;
  }
  CFStringRef v13 = CFStringCreateWithFormat(v3, 0, @"[%@] %@: [%.3f, %.3f] [%.3f, %.3f] %@", v4, v5, *(void *)&Seconds, *(void *)&v8, *(void *)&v9, *(void *)&v11, v12);
  if (v2) {
    CFRelease(v2);
  }
  return v13;
}

uint64_t __fpfis_copyFormattingDesc_block_invoke()
{
  uint64_t result = FigGetCFPreferenceBooleanWithDefault();
  fpfis_copyFormattingDesc_includeLoadedTimeRange = result;
  return result;
}

uint64_t FigCaptionRendererNodeCreate(void *a1)
{
  *a1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCaptionRendererNodeGetClassID_sRegisterFigCaptionRendererNodeBaseTypeOnce, RegisterFigCaptionRendererNodeBaseType);
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    *(void *)(DerivedStorage + 8) = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
    *(void *)(DerivedStorage + 312) = CFArrayCreateMutable(v2, 0, v5);
    *(_WORD *)(DerivedStorage + 304) = 257;
    *(_OWORD *)(DerivedStorage + 48) = FCRRectNull;
    *(_OWORD *)(DerivedStorage + 64) = *(_OWORD *)&byte_1949966D8;
    *(_OWORD *)(DerivedStorage + 80) = xmmword_1949966E8;
    *(_OWORD *)(DerivedStorage + 96) = *(_OWORD *)&byte_1949966F8;
    long long v6 = *MEMORY[0x1E4F1DB20];
    long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E4F1DB20];
    *(_OWORD *)(DerivedStorage + 128) = v7;
    *(_OWORD *)(DerivedStorage + 16) = v6;
    *(_OWORD *)(DerivedStorage + 32) = v7;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v13 = *MEMORY[0x1E4F1DB30];
    *(_OWORD *)(DerivedStorage + 240) = _Q0;
    *(_OWORD *)(DerivedStorage + 256) = v13;
    *(void *)(DerivedStorage + 272) = 0;
    *(_DWORD *)(DerivedStorage + 280) = 0;
    *(void *)(DerivedStorage + 288) = 0;
    *(void *)(DerivedStorage + 296) = 0;
    *a1 = 0;
  }
  return v3;
}

void FigCaptionRendererNodeFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
  CFRelease(*(CFTypeRef *)(DerivedStorage + 312));
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 296));
  int v1 = *(void **)(DerivedStorage + 288);
  if (v1)
  {
    free(v1);
    *(void *)(DerivedStorage + 288) = 0;
  }
}

__CFString *FigCaptionRendererNodeCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererNode: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererNode_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererNode <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  *(void *) CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, void *a2)
{
  *a2 = *(void *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  CFArrayRef v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v7.length = CFArrayGetCount(v5);
  v7.location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) >= 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), a2);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  CFArrayRef v3 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v6.length = CFArrayGetCount(v3);
  v6.location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v3, v6, a2);
  CFArrayRemoveValueAtIndex(v3, FirstIndexOfValue);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 8));
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetViewport(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10.origin.double x = a1;
  v10.origin.double y = a2;
  v10.size.double width = a3;
  v10.size.double height = a4;
  if (!CGRectEqualToRect(*(CGRect *)(DerivedStorage + 16), v10))
  {
    *(CGFloat *)(DerivedStorage + 16) = a1;
    *(CGFloat *)(DerivedStorage + 24) = a2;
    *(CGFloat *)(DerivedStorage + 32) = a3;
    *(CGFloat *)(DerivedStorage + 40) = a4;
    *(unsigned char *)(DerivedStorage + 305) = 1;
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)(DerivedStorage + 32);
  *a2 = *(_OWORD *)(DerivedStorage + 16);
  a2[1] = v4;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  long long v4 = a2[3];
  long long v6 = *a2;
  long long v5 = a2[1];
  DerivedStorage[5] = a2[2];
  DerivedStorage[6] = v4;
  DerivedStorage[3] = v6;
  DerivedStorage[4] = v5;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  long long v4 = DerivedStorage[6];
  long long v6 = DerivedStorage[3];
  long long v5 = DerivedStorage[4];
  a2[2] = DerivedStorage[5];
  a2[3] = v4;
  *a2 = v6;
  a2[1] = v5;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 112) = a1;
  *(double *)(DerivedStorage + 120) = a2;
  *(double *)(DerivedStorage + 128) = a3;
  *(double *)(DerivedStorage + 136) = a4;
  double v9 = 0.0;
  double v10 = 0.0;
  if (*(void *)(DerivedStorage + 184) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    double v10 = v11 / 100.0 * *(double *)(DerivedStorage + 128);
  }
  if (*(void *)(DerivedStorage + 200) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    double v9 = v12 / 100.0 * *(double *)(DerivedStorage + 128);
  }
  double v13 = 0.0;
  if (*(void *)(DerivedStorage + 216) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    double v13 = v14 / 100.0 * *(double *)(DerivedStorage + 136);
  }
  if (*(void *)(DerivedStorage + 232) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    double v16 = v15 / 100.0;
    double v17 = *(double *)(DerivedStorage + 136);
    double v18 = v16 * v17;
  }
  else
  {
    double v17 = *(double *)(DerivedStorage + 136);
    double v18 = 0.0;
  }
  double v19 = v18 + *(double *)(DerivedStorage + 120);
  double v20 = *(double *)(DerivedStorage + 128) - v10 - v9;
  *(double *)(DerivedStorage + 144) = v10 + *(double *)(DerivedStorage + 112);
  *(double *)(DerivedStorage + 152) = v19;
  *(double *)(DerivedStorage + 160) = v20;
  *(double *)(DerivedStorage + 168) = v17 - v13 - v18;
  CFArrayRef v21 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v21) >= 1)
  {
    CFIndex v22 = 0;
    do
    {
      CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(v21, v22);
      double v24 = *(double *)(DerivedStorage + 144);
      double v25 = *(double *)(DerivedStorage + 152);
      double v26 = *(double *)(DerivedStorage + 160);
      double v27 = *(double *)(DerivedStorage + 168);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v29 = *(void *)(ProtocolVTable + 16);
        if (v29)
        {
          uint64_t v30 = *(void (**)(const void *, double, double, double, double))(v29 + 64);
          if (v30) {
            v30(ValueAtIndex, v24, v25, v26, v27);
          }
        }
      }
      ++v22;
    }
    while (CFArrayGetCount(v21) > v22);
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)(DerivedStorage + 128);
  *a2 = *(_OWORD *)(DerivedStorage + 112);
  a2[1] = v4;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 256) = a1;
  *(double *)(DerivedStorage + 264) = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 256);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 240) = a1;
  *(double *)(DerivedStorage + 248) = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 240);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[22] = a2;
  DerivedStorage[23] = a3;
  DerivedStorage[24] = a4;
  DerivedStorage[25] = a5;
  DerivedStorage[26] = a6;
  DerivedStorage[27] = a7;
  DerivedStorage[28] = a9;
  DerivedStorage[29] = a10;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)(DerivedStorage + 160);
  *a2 = *(_OWORD *)(DerivedStorage + 144);
  a2[1] = v4;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = *(void **)(DerivedStorage + 288);
  if (v1)
  {
    *(void *)(DerivedStorage + 288) = 0;
    free(v1);
    *(void *)(DerivedStorage + 272) = 0;
    *(_DWORD *)(DerivedStorage + 280) = 0;
  }
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 296));
  *(void *)(DerivedStorage + 296) = 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 296));
  *(void *)(DerivedStorage + 296) = CGImageRetain(a2);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 296);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 272);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 276);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 <= 0x10000 && a3 <= 0x10000 && a4 < 0x11)
  {
    unint64_t v8 = a3 * (unint64_t)a2 * a4 * a4;
    if (!(v8 >> 29))
    {
      uint64_t v9 = DerivedStorage;
      int v10 = *(_DWORD *)(DerivedStorage + 276) * *(_DWORD *)(DerivedStorage + 272) * *(_DWORD *)(DerivedStorage + 280);
      double v11 = *(void **)(DerivedStorage + 288);
      if (v10 == a3 * a2 * a4)
      {
        bzero(v11, 4 * v8);
        return 0;
      }
      if (v11)
      {
        *(void *)(v9 + 288) = 0;
        free(v11);
        *(void *)(v9 + 272) = 0;
        *(_DWORD *)(v9 + 280) = 0;
      }
      if (!v8 || (double v12 = malloc_type_calloc(4 * v8, 1uLL, 0xF28EB18CuLL), (*(void *)(v9 + 288) = v12) != 0))
      {
        *(_DWORD *)(v9 + 272) = a2;
        *(_DWORD *)(v9 + 276) = a3;
        *(_DWORD *)(v9 + 280) = a4;
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 288);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, char a2)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 304) = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 304);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 305) = a2;
  CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v4) >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          uint64_t v9 = *(void (**)(const void *, uint64_t))(v8 + 232);
          if (v9) {
            v9(ValueAtIndex, a2);
          }
        }
      }
      ++v5;
    }
    while (CFArrayGetCount(v4) > v5);
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 305);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 312)) > 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetZOrder()
{
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_ResetNodeTree(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)(DerivedStorage + 304) = 257;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(DerivedStorage + 240) = _Q0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v9 = *(void *)(ProtocolVTable + 16);
    if (v9)
    {
      int v10 = *(void (**)(uint64_t))(v9 + 328);
      if (v10) {
        v10(a1);
      }
    }
  }
  CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v11) >= 1)
  {
    CFIndex v12 = 0;
    do
    {
      CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v14 = CMBaseObjectGetProtocolVTable();
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 16);
        if (v15)
        {
          double v16 = *(void (**)(const void *))(v15 + 272);
          if (v16) {
            v16(ValueAtIndex);
          }
        }
      }
      ++v12;
    }
    while (CFArrayGetCount(v11) > v12);
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950096;
  }
  uint64_t v5 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 320) && *(unsigned char *)(a2 + 746))
  {
    CGContextSaveGState(*(CGContextRef *)(a2 + 320));
    CGSize v6 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    v11.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
    v11.CGSize size = v6;
    FigCaptionRendererNodeProtocolGetProtocolID();
    uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v8 = *(void *)(ProtocolVTable + 16);
      if (v8)
      {
        uint64_t v9 = *(void (**)(uint64_t, CGRect *))(v8 + 104);
        if (v9) {
          v9(a1, &v11);
        }
      }
    }
    CGContextSetRGBStrokeColor(*(CGContextRef *)(a2 + 320), 1.0, 0.0, 1.0, 1.0);
    CGContextSetLineWidth(*(CGContextRef *)(a2 + 320), 3.0);
    CGContextStrokeRect(*(CGContextRef *)(a2 + 320), v11);
    CGContextRestoreGState(*(CGContextRef *)(a2 + 320));
  }
  uint64_t result = 0;
  *(unsigned char *)(v5 + 304) = 0;
  return result;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950096;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t result = 0;
  *(unsigned char *)(v4 + 305) = 0;
  return result;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 4294950096;
  }
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_Compose()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 8);
  if (v1)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      MutableCFAttributedStringRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v1);
      if (MutableCopy)
      {
        uint64_t v5 = MutableCopy;
        v7.location = 0;
        v7.length = v3;
        CFArraySortValues(MutableCopy, v7, (CFComparatorFunction)nodeComparatorZIndex, 0);
        FigCFArrayApplyFunction();
        CFRelease(v5);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (v5)
    {
      CGSize v6 = *(void (**)(uint64_t, _OWORD *))(v5 + 312);
      if (v6)
      {
        v11[0] = v8;
        v11[1] = v9;
        uint64_t v12 = v10;
        v6(v3, v11);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 312), a2);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 312));
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 312);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 312) = 0;
  }
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(DerivedStorage + 312) = v5;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 312);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SelectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v9 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v18.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v18.CGSize size = v9;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (v11)
    {
      uint64_t v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12) {
        v12(a1, &v18);
      }
    }
  }
  uint64_t v17 = 0;
  *(CGFloat *)CFRunLoopSourceContext context = a3;
  *(CGFloat *)&context[1] = a4;
  CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)SelectChildNodes_0, context);
  if (!(_BYTE)v17)
  {
    v20.double x = a3;
    v20.double y = a4;
    *(unsigned char *)(DerivedStorage + 320) = CGRectContainsPoint(v18, v20);
  }
  if (a2)
  {
    if ((_BYTE)v17)
    {
      BOOL v14 = 1;
    }
    else
    {
      v21.double x = a3;
      v21.double y = a4;
      BOOL v14 = CGRectContainsPoint(v18, v21);
    }
    *a2 = v14;
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_UnselectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v9 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v18.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v18.CGSize size = v9;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v11 = *(void *)(ProtocolVTable + 16);
    if (v11)
    {
      uint64_t v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12) {
        v12(a1, &v18);
      }
    }
  }
  uint64_t v17 = 0;
  *(CGFloat *)CFRunLoopSourceContext context = a3;
  *(CGFloat *)&context[1] = a4;
  CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)UnselectChildNodes_0, context);
  if (!(_BYTE)v17)
  {
    v20.double x = a3;
    v20.double y = a4;
    if (CGRectContainsPoint(v18, v20)) {
      *(unsigned char *)(DerivedStorage + 320) = 0;
    }
  }
  if (a2)
  {
    if ((_BYTE)v17)
    {
      BOOL v14 = 1;
    }
    else
    {
      v21.double x = a3;
      v21.double y = a4;
      BOOL v14 = CGRectContainsPoint(v18, v21);
    }
    *a2 = v14;
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 320);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_BeginScene()
{
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_EndScene()
{
  return 0;
}

uint64_t updateDisplayChildNodes_0(uint64_t a1, uint64_t a2)
{
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    result += 16;
    uint64_t v5 = v6;
    if (v6)
    {
      CFRange v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
      if (v7)
      {
        return v7(a1, a2);
      }
    }
  }
  return result;
}

uint64_t nodeComparatorZIndex(uint64_t a1, uint64_t a2)
{
  unint64_t v12 = 0;
  double v13 = 0.0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, double *))(v5 + 264);
      if (v6) {
        v6(a1, &v13);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v7 = CMBaseObjectGetProtocolVTable();
  v8.n128_u64[0] = 0;
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
      uint64_t v10 = *(void (**)(uint64_t, unint64_t *, __n128))(v9 + 264);
      if (v10)
      {
        v10(a2, &v12, v8);
        v8.n128_u64[0] = v12;
      }
    }
  }
  if (v13 < v8.n128_f64[0]) {
    return -1;
  }
  else {
    return v13 > v8.n128_f64[0];
  }
}

uint64_t SelectChildNodes_0(uint64_t a1, uint64_t a2)
{
  char v10 = 0;
  double v4 = *(double *)a2;
  double v5 = *(double *)(a2 + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result && (uint64_t v8 = *(void *)(result + 16), result += 16, (v7 = v8) != 0))
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, char *, double, double))(v7 + 352);
    if (v9)
    {
      uint64_t result = v9(a1, &v10, v4, v5);
      LOBYTE(v9) = v10 != 0;
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  if (*(unsigned char *)(a2 + 16)) {
    LOBYTE(v9) = 1;
  }
  *(unsigned char *)(a2 + 16) = (_BYTE)v9;
  return result;
}

uint64_t UnselectChildNodes_0(uint64_t a1, uint64_t a2)
{
  char v10 = 0;
  double v4 = *(double *)a2;
  double v5 = *(double *)(a2 + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t result = CMBaseObjectGetProtocolVTable();
  if (result && (uint64_t v8 = *(void *)(result + 16), result += 16, (v7 = v8) != 0))
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, char *, double, double))(v7 + 360);
    if (v9)
    {
      uint64_t result = v9(a1, &v10, v4, v5);
      LOBYTE(v9) = v10 != 0;
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  if (*(unsigned char *)(a2 + 16)) {
    LOBYTE(v9) = 1;
  }
  *(unsigned char *)(a2 + 16) = (_BYTE)v9;
  return result;
}

uint64_t RegisterFigCaptionRendererNodeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererNodeBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererNode]");
}

uint64_t FigHLSSessionDataCopyMetadataEntryRemote()
{
  uint64_t v0 = fsd_ensureClientEstablished();
  if (!v0)
  {
    uint64_t v0 = FigXPCCreateBasicMessage();
    if (!v0)
    {
      uint64_t v0 = FigXPCMessageSetCFString();
      if (!v0)
      {
        uint64_t v0 = FigXPCMessageSetCFObject();
        if (!v0)
        {
          uint64_t v0 = FigXPCMessageSetCFString();
          if (!v0)
          {
            uint64_t v0 = FigXPCMessageSetCFURL();
            if (!v0)
            {
              uint64_t v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!v0) {
                uint64_t v0 = FigXPCMessageCopyCFDictionary();
              }
            }
          }
        }
      }
    }
  }
  uint64_t v1 = v0;
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t fsd_ensureClientEstablished()
{
  uint64_t v3 = 0;
  double v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fsd_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57A42E0;
  block[4] = &v3;
  if (fsd_ensureClientEstablished_sFigSessionDataRemoteClientSetupOnce != -1) {
    dispatch_once(&fsd_ensureClientEstablished_sFigSessionDataRemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryRemote(double a1)
{
  uint64_t v2 = fsd_ensureClientEstablished();
  if (v2) {
    goto LABEL_11;
  }
  uint64_t v2 = FigXPCCreateBasicMessage();
  if (v2) {
    goto LABEL_11;
  }
  uint64_t v2 = FigXPCMessageSetCFString();
  if (v2
    || (uint64_t v2 = FigXPCMessageSetCFObject(), v2)
    || (xpc_dictionary_set_double(0, "duration", a1), uint64_t v2 = FigXPCMessageSetCFURL(), v2)
    || (uint64_t v2 = FigXPCMessageSetCFDictionary(), v2)
    || (uint64_t v2 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v2)
    || (uint64_t v2 = FigXPCMessageCopyCFArray(), v2)
    || (uint64_t v2 = FigXPCMessageCopyCFDictionary(), v2))
  {
LABEL_11:
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v3 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

void __fsd_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = Mutable;
    FigCFDictionarySetValue();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12786;
  }
}

uint64_t FigSubtitleRendererGetClassID()
{
  return sFigSubtitleRendererClassID;
}

uint64_t RegisterFigSubtitleRendererClass()
{
  return FigBaseClassRegisterClass();
}

uint64_t FigSubtitleRendererNotificationBarrier(uint64_t a1)
{
  uint64_t v2 = *(void **)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    CFMutableDictionaryRef v3 = v2;
  }
  else {
    CFMutableDictionaryRef v3 = 0;
  }
  if (*v3 < 2uLL) {
    return 4294954514;
  }
  double v4 = (uint64_t (*)(uint64_t))v3[8];
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigSubtitleRendererDrawSubtitleText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v7 + 8);
  long long v9 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v9;
  _OWORD v11[2] = *(_OWORD *)(a3 + 32);
  uint64_t v12 = *(void *)(a3 + 48);
  return v8(a1, a2, v11);
}

uint64_t FigSubtitleRendererLayout(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v11 + 16);
  long long v13 = a3[5];
  v17[4] = a3[4];
  v17[5] = v13;
  v17[6] = a3[6];
  long long v14 = a3[1];
  v17[0] = *a3;
  v17[1] = v14;
  long long v15 = a3[3];
  v17[2] = a3[2];
  v17[3] = v15;
  return v12(a1, a2, v17, a4, a5);
}

CFStringRef FigSubtitleRendererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSubtitleRenderer %p]", a1);
}

uint64_t MediaDataChunkWriterCreate(const __CFAllocator *a1, uint64_t *a2)
{
  if (!a2)
  {
    uint64_t DataBuffer = FigSignalErrorAt();
    goto LABEL_11;
  }
  double v4 = CFAllocatorAllocate(a1, 80, 0);
  uint64_t v5 = (uint64_t)v4;
  if (!v4)
  {
    uint64_t DataBuffer = 4294949686;
    goto LABEL_12;
  }
  v4[3] = 0u;
  v4[4] = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *double v4 = 0u;
  if (a1) {
    CFTypeRef v6 = CFRetain(a1);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)uint64_t v5 = v6;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
  *(void *)(v5 + 8) = Mutable;
  if (!Mutable) {
    goto LABEL_13;
  }
  uint64_t Empty = CMBlockBufferCreateEmpty(a1, 0x40u, 0, (CMBlockBufferRef *)(v5 + 24));
  if (Empty)
  {
LABEL_14:
    uint64_t DataBuffer = Empty;
    goto LABEL_12;
  }
  *(_DWORD *)(v5 + 36) = 10;
  CMMemoryPoolRef v9 = CMMemoryPoolCreate(0);
  *(void *)(v5 + 40) = v9;
  if (!v9)
  {
LABEL_13:
    uint64_t Empty = FigSignalErrorAt();
    goto LABEL_14;
  }
  uint64_t DataBuffer = allocateDataBuffer(v5);
  if (!DataBuffer)
  {
    *a2 = v5;
LABEL_11:
    uint64_t v5 = 0;
  }
LABEL_12:
  MediaDataChunkWriterRelease((const __CFAllocator **)v5);
  return DataBuffer;
}

uint64_t allocateDataBuffer(uint64_t a1)
{
  uint64_t result = FigMemoryPoolCreateBlockBuffer();
  if (!result)
  {
    uint64_t result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 48), 0, (size_t *)(a1 + 64), 0, (char **)(a1 + 56));
    if (!result) {
      *(void *)(a1 + 72) = 0;
    }
  }
  return result;
}

void MediaDataChunkWriterRelease(const __CFAllocator **ptr)
{
  if (ptr)
  {
    CFAllocatorRef v3 = *ptr;
    CFArrayRef v2 = ptr[1];
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0; i != v5; ++i)
        {
          CFAttributedStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(ptr[1], i);
          if (ValueAtIndex) {
            CFAllocatorDeallocate(v3, ValueAtIndex);
          }
        }
      }
      CFAllocatorRef v8 = ptr[1];
      if (v8) {
        CFRelease(v8);
      }
    }
    CFAllocatorRef v9 = ptr[5];
    if (v9) {
      CFRelease(v9);
    }
    CFAllocatorRef v10 = ptr[3];
    if (v10) {
      CFRelease(v10);
    }
    CFAllocatorRef v11 = ptr[6];
    if (v11) {
      CFRelease(v11);
    }
    CFAllocatorDeallocate(v3, ptr);
    if (v3)
    {
      CFRelease(v3);
    }
  }
}

uint64_t MediaDataChunkWriterAddTrack(CFAllocatorRef *a1, int a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1 && a4 && a6 && (uint64_t v12 = CFAllocatorAllocate(*a1, 112, 0)) != 0)
  {
    long long v13 = v12;
    *uint64_t v12 = 0u;
    v12[1] = 0u;
    v12[5] = 0u;
    v12[6] = 0u;
    v12[3] = 0u;
    _OWORD v12[4] = 0u;
    v12[2] = 0u;
    *(_DWORD *)uint64_t v12 = a2;
    *((void *)v12 + 1) = a4;
    *((void *)v12 + 2) = a5;
    *((_DWORD *)v12 + 18) = 0x100000;
    CMTimeMake(&v15, 1, 1);
    *(CMTime *)((char *)v13 + 76) = v15;
    *((_DWORD *)v13 + 25) = 0;
    *((unsigned char *)v13 + 104) = a3 & 1;
    CFArrayAppendValue(a1[1], v13);
    *a6 = v13;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MediaDataChunkWriterTrackAppendSampleData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, const __CFArray *a11, uint64_t a12)
{
  if (a1 && a2 && a3 && a4 && a6 > 0 && a7 > 0 && a8 && a9 > 0 && a10)
  {
    uint64_t v12 = 0;
    while (a10[v12])
    {
      if (a9 == ++v12) {
        return appendSampleDataOrSampleReference(a1, a2, a3, a4, 0, a5, a6, a7, a8, a9, a10, a11, a12);
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t appendSampleDataOrSampleReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, const __CFArray *a12, uint64_t a13)
{
  uint64_t v13 = MEMORY[0x1F4188790]();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v102 = v20;
  CFTypeRef cf = v21;
  uint64_t v22 = v14;
  uint64_t v24 = v23;
  double v25 = (void *)v13;
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v121 = 0;
  if (v14)
  {
    uint64_t EndOffset = getEndOffset(v13, v14, &v121);
    if (EndOffset) {
      return EndOffset;
    }
    uint64_t v15 = v121;
  }
  else
  {
    uint64_t v121 = v15;
  }
  if (v15 == *(void *)(v24 + 32) && *(void *)(v24 + 24) == (int)v102 && !*(unsigned char *)(v24 + 105))
  {
    int v27 = 0;
  }
  else
  {
    *(unsigned char *)(v24 + 105) = 0;
    int v27 = 1;
  }
  if (v19 < 1) {
    return 0;
  }
  uint64_t v115 = v15;
  CFIndex v28 = 0;
  size_t offset = 0;
  uint64_t v29 = a11;
  double v114 = (CMTime *)(v24 + 48);
  CGFloat v103 = (CMTime *)(v24 + 76);
  uint64_t v99 = (CMTimeValue *)(a9 + 12);
  CMTimeValue v101 = *MEMORY[0x1E4F1FA48];
  CMTimeScale v98 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  double v113 = *(OpaqueCMBlockBuffer **)(MEMORY[0x1E4F1FA48] + 12);
  CMTimeScale v112 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 20);
  uint64_t v104 = v17;
  uint64_t v118 = v19;
  uint64_t v110 = v24;
  uint64_t v111 = v22;
  uint64_t v108 = v25;
  while (1)
  {
    CMBlockBufferRef v129 = v113;
    CMTimeScale v130 = v112;
    double v127 = v113;
    CMTimeScale v128 = v112;
    int v116 = v27;
    if (v27)
    {
      if (v22)
      {
        uint64_t v30 = *(int *)(v24 + 100);
        if (v30 < 2)
        {
          uint64_t v32 = 0;
        }
        else
        {
          uint64_t v31 = v30 - v115 % v30;
          if (v115 % v30) {
            uint64_t v32 = v30 - v115 % v30;
          }
          else {
            uint64_t v32 = 0;
          }
          if (v32)
          {
            bzero(time1, 0x4000uLL);
            while (v31 > 0)
            {
              if ((unint64_t)v31 >= 0x4000) {
                unint64_t v33 = 0x4000;
              }
              else {
                unint64_t v33 = v31;
              }
              uint64_t EndOffset = appendDataViaDataBuffer(v25, v22, v33, (char *)time1);
              v31 -= v33;
              if (EndOffset) {
                return EndOffset;
              }
            }
          }
          uint64_t v24 = v110;
        }
        v115 += v32;
        uint64_t v121 = v115;
      }
      unint64_t v35 = 0;
      *(void *)(v24 + 24) = (int)v102;
      *(void *)(v24 + 40) = 0;
      uint64_t v36 = MEMORY[0x1E4F1FA48];
      *(_OWORD *)&v114->CFTypeRef value = *MEMORY[0x1E4F1FA48];
      v114->CMTimeEpoch epoch = *(void *)(v36 + 16);
      v25[2] = v24;
      int v34 = 1;
    }
    else
    {
      int v34 = 0;
      unint64_t v35 = *(void *)(v24 + 40);
    }
    unint64_t v37 = *(int *)(v24 + 72);
    BOOL v38 = v37 >= v35;
    unint64_t v39 = v37 - v35;
    if (v38) {
      unint64_t v40 = v39;
    }
    else {
      unint64_t v40 = 0;
    }
    uint64_t v41 = v19 - v28;
    *(_OWORD *)&time1[0].version = *MEMORY[0x1E4F1F9F8];
    *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E4F1F9F8] + 16);
    unsigned int v109 = v34;
    if (a10 != 1)
    {
      unint64_t v42 = 0;
      CFNumberRef v44 = &v29[v28];
      unint64_t v45 = *v44;
      uint64_t v46 = 1;
      do
      {
        uint64_t v43 = v46;
        v42 += v45;
        if (v28 + v46 >= v19) {
          break;
        }
        unint64_t v45 = v44[v46++];
      }
      while (v45 + v42 < v40);
      goto LABEL_44;
    }
    unint64_t v42 = *v29;
    if (*v29 <= v40 && v41 != 1) {
      break;
    }
    if (v17 == 1)
    {
      uint64_t v43 = 1;
LABEL_55:
      *(_OWORD *)&lhs.CFTypeRef value = *(_OWORD *)a9;
      lhs.CMTimeEpoch epoch = *(void *)(a9 + 16);
      CMTimeMultiply((CMTime *)time1, &lhs, v43);
      goto LABEL_56;
    }
    *(_OWORD *)&time1[0].version = *MEMORY[0x1E4F1FA48];
    *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v43 = 1;
LABEL_50:
    CMTime v47 = (CMTime *)(a9 + 72 * v28);
    CFIndex v48 = v28;
    do
    {
      *(_OWORD *)&lhs.CFTypeRef value = *(_OWORD *)&time1[0].version;
      lhs.CMTimeEpoch epoch = *(CMTimeEpoch *)((char *)&time1[0].FreeBlock + 4);
      CMTime rhs = *v47;
      CMTimeAdd((CMTime *)time1, &lhs, &rhs);
      ++v48;
      v47 += 3;
    }
    while (v48 < v43 + v28);
    uint64_t v19 = v118;
    uint64_t v24 = v110;
    uint64_t v22 = v111;
LABEL_56:
    CMTimeValue v49 = *(void *)&time1[0].version;
    CMTimeScale AllocateBlock_high = HIDWORD(time1[0].AllocateBlock);
    FreeBlocCFIndex k = time1[0].FreeBlock;
    int refCon = (int)time1[0].refCon;
    if (v116 || v40 >= v42) {
      goto LABEL_60;
    }
    int v27 = 1;
LABEL_151:
    double v25 = v108;
    if (v28 >= v19) {
      return 0;
    }
  }
  if (v42)
  {
    if (v41 >= (uint64_t)(v40 / v42)) {
      uint64_t v43 = v40 / v42;
    }
    else {
      uint64_t v43 = v19 - v28;
    }
    v42 *= v43;
LABEL_44:
    if (v17 == 1) {
      goto LABEL_55;
    }
    *(_OWORD *)&time1[0].version = *MEMORY[0x1E4F1FA48];
    *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E4F1FA48] + 16);
    if (v43 < 1) {
      goto LABEL_56;
    }
    goto LABEL_50;
  }
  if (v17 == 1)
  {
    uint64_t v43 = 0;
    unint64_t v42 = 0;
    goto LABEL_55;
  }
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  *(_OWORD *)&time1[0].version = *MEMORY[0x1E4F1FA48];
  *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E4F1FA48] + 16);
  CMTimeValue v49 = *(void *)&time1[0].version;
  CMTimeScale AllocateBlock_high = HIDWORD(time1[0].AllocateBlock);
  FreeBlocCFIndex k = time1[0].FreeBlock;
  int refCon = (int)time1[0].refCon;
LABEL_60:
  CMTimeScale v106 = AllocateBlock_high;
  CMTimeValue v107 = v49;
  *(_OWORD *)&time1[0].version = *(_OWORD *)&v103->value;
  *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = (void (__cdecl *)(void *, void *, size_t))v103->epoch;
  CMTime lhs = *v114;
  if (CMTimeCompare((CMTime *)time1, &lhs) < 0)
  {
    *(_OWORD *)&v119.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA48] + 8);
    v119.CFTypeRef value = v101;
  }
  else
  {
    CMTime lhs = *v103;
    CMTime rhs = *v114;
    CMTimeSubtract((CMTime *)time1, &lhs, &rhs);
    v119.CFTypeRef value = *(void *)&time1[0].version;
    *(_OWORD *)&v119.CMTimeScale timescale = *(_OWORD *)((char *)&time1[0].AllocateBlock + 4);
  }
  if (v17 == 1)
  {
    CFIndex v51 = v28;
    CMTimeValue v52 = *(void *)a9;
    CMTimeScale v53 = *(_DWORD *)(a9 + 8);
    rhs.CFTypeRef value = *v99;
    rhs.CMTimeScale timescale = *(_DWORD *)(a9 + 20);
    *(void *)&time1[0].version = v119.value;
    *(_OWORD *)((char *)&time1[0].AllocateBlock + 4) = *(_OWORD *)&v119.timescale;
    lhs.CFTypeRef value = v52;
    lhs.CMTimeScale timescale = v53;
    *(void *)&lhs.CMTimeFlags flags = *v99;
    HIDWORD(lhs.epoch) = *(_DWORD *)(a9 + 20);
    if (CMTimeCompare((CMTime *)time1, &lhs) < 0 || v41 == 1)
    {
      CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)rhs.value;
      CMTimeScale timescale = rhs.timescale;
      uint64_t v41 = 1;
    }
    else
    {
      CMTime lhs = v119;
      CMTimeConvertScale((CMTime *)time1, &lhs, v53, kCMTimeRoundingMethod_RoundTowardZero);
      if (v41 >= *(void *)&time1[0].version / v52) {
        uint64_t v41 = *(void *)&time1[0].version / v52;
      }
      lhs.CFTypeRef value = v52;
      lhs.CMTimeScale timescale = v53;
      *(void *)&lhs.CMTimeFlags flags = rhs.value;
      HIDWORD(lhs.epoch) = rhs.timescale;
      CMTimeMultiply((CMTime *)time1, &lhs, v41);
      CMTimeValue v52 = *(void *)&time1[0].version;
      CMTimeScale v53 = HIDWORD(time1[0].AllocateBlock);
      CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)time1[0].FreeBlock;
      CMTimeScale timescale = (CMTimeScale)time1[0].refCon;
    }
  }
  else
  {
    CMBlockBufferRef blockBufferOut = v113;
    CMTimeScale timescale = v112;
    CFIndex v51 = v28;
    long long v54 = (CMTime *)(a9 + 72 * v28);
    uint64_t v55 = 1;
    CMTimeValue v52 = v101;
    CMTimeScale v53 = v98;
    do
    {
      uint64_t v41 = v55;
      CFIndex v56 = v28 + v55;
      lhs.CFTypeRef value = v52;
      lhs.CMTimeScale timescale = v53;
      *(void *)&lhs.CMTimeFlags flags = blockBufferOut;
      HIDWORD(lhs.epoch) = timescale;
      CMTime rhs = *v54;
      CMTimeAdd((CMTime *)time1, &lhs, &rhs);
      CMTimeValue v52 = *(void *)&time1[0].version;
      CMTimeScale v53 = HIDWORD(time1[0].AllocateBlock);
      CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)time1[0].FreeBlock;
      CMTimeScale timescale = (CMTimeScale)time1[0].refCon;
      if (v56 >= v118) {
        break;
      }
      time1[0].FreeBlocCFIndex k = (void (__cdecl *)(void *, void *, size_t))blockBufferOut;
      LODWORD(time1[0].refCon) = timescale;
      CMTime lhs = v54[3];
      CMTimeAdd(&v122, (CMTime *)time1, &lhs);
      *(void *)&time1[0].version = v119.value;
      *(_OWORD *)((char *)&time1[0].AllocateBlock + 4) = *(_OWORD *)&v119.timescale;
      int32_t v57 = CMTimeCompare(&v122, (CMTime *)time1);
      uint64_t v55 = v41 + 1;
      v54 += 3;
    }
    while (v57 < 0);
  }
  if (a10 == 1)
  {
    uint64_t v17 = v104;
    unint64_t v58 = *a11 * v41;
    CFIndex v28 = v51;
    uint64_t v29 = a11;
  }
  else
  {
    CFIndex v28 = v51;
    unint64_t v58 = 0;
    if (v41 < 1)
    {
      uint64_t v29 = a11;
      uint64_t v17 = v104;
    }
    else
    {
      uint64_t v59 = v41 + v51;
      CFIndex v60 = v51;
      uint64_t v29 = a11;
      uint64_t v17 = v104;
      do
        v58 += a11[v60++];
      while (v60 < v59);
    }
  }
  CMBlockBufferRef v129 = blockBufferOut;
  CMTimeScale v130 = timescale;
  *(void *)&time1[0].version = v119.value;
  *(_OWORD *)((char *)&time1[0].AllocateBlock + 4) = *(_OWORD *)&v119.timescale;
  lhs.CFTypeRef value = v52;
  lhs.CMTimeScale timescale = v53;
  *(void *)&lhs.CMTimeFlags flags = blockBufferOut;
  HIDWORD(lhs.epoch) = timescale;
  int32_t v61 = CMTimeCompare((CMTime *)time1, &lhs);
  if (!v116 && v61 < 0)
  {
    int v27 = 1;
    uint64_t v19 = v118;
    uint64_t v24 = v110;
    uint64_t v22 = v111;
    goto LABEL_151;
  }
  p_FreeBlocCFIndex k = &FreeBlock;
  if (v41 < v43) {
    p_FreeBlocCFIndex k = (void (__cdecl **)(void *, void *, size_t))&v129;
  }
  CMTimeValue v63 = v107;
  if (v41 < v43) {
    CMTimeValue v63 = v52;
  }
  CMTimeValue v120 = v63;
  CMTimeScale v64 = v106;
  if (v41 < v43) {
    CMTimeScale v64 = v53;
  }
  CMTimeScale v117 = v64;
  if (v41 >= v43) {
    CFIndex v65 = v43;
  }
  else {
    CFIndex v65 = v41;
  }
  if (v41 >= v43) {
    unint64_t v66 = v42;
  }
  else {
    unint64_t v66 = v58;
  }
  double v127 = (OpaqueCMBlockBuffer *)*p_FreeBlock;
  CMTimeScale v128 = *((_DWORD *)p_FreeBlock + 2);
  if (!v111) {
    goto LABEL_129;
  }
  CFTypeID v67 = CFGetTypeID(cf);
  if (*(unsigned char *)(v110 + 104))
  {
    int v68 = 0;
    int v69 = 0;
    goto LABEL_99;
  }
  int v81 = *(_DWORD *)v110;
  int v68 = 1;
  if (*(int *)v110 > 1936684397)
  {
    if (v81 > 1953325923)
    {
      int v69 = 1;
      if (v81 != 1953325924) {
        goto LABEL_158;
      }
      goto LABEL_99;
    }
    if (v81 != 1936684398)
    {
      int v69 = 1;
      int v82 = 1952807028;
      goto LABEL_155;
    }
LABEL_159:
    int v69 = 1;
    goto LABEL_99;
  }
  if (v81 > 1835365472)
  {
    if (v81 != 1835365473)
    {
      int v69 = 1;
      int v82 = 1935832172;
LABEL_155:
      if (v81 != v82) {
        goto LABEL_158;
      }
      goto LABEL_99;
    }
    goto LABEL_159;
  }
  if (v81 != 1635088502)
  {
    int v69 = 1;
    int v82 = 1668047728;
    goto LABEL_155;
  }
LABEL_158:
  int v68 = 0;
  int v69 = 2;
LABEL_99:
  if (CMBlockBufferGetTypeID() != v67)
  {
    if (CVPixelBufferGetTypeID() == v67)
    {
      uint64_t EndOffset = CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
      if (EndOffset) {
        return EndOffset;
      }
      BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
      if (v68)
      {
        uint64_t appended = appendDataViaDataBuffer(v108, v111, v66, BaseAddress);
      }
      else
      {
        uint64_t appended = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)v108, v111, 0);
        if (!appended)
        {
          uint64_t appended = appendAggregateBBufToByteStream((uint64_t)v108, v111);
          if (!appended) {
            uint64_t appended = CMByteStreamAppend();
          }
        }
      }
      uint64_t v73 = appended;
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
      goto LABEL_128;
    }
    goto LABEL_129;
  }
  if (!FigIsMemoryPoolBlockBuffer() || !CMBlockBufferIsRangeContiguous((CMBlockBufferRef)cf, 0, 0))
  {
    double v74 = v108;
    uint64_t v83 = v111;
    int v84 = v69;
LABEL_126:
    uint64_t v77 = appendBlockBufferToSampleDataDestination(v74, v83, v84, (CMBlockBufferRef)cf, offset, v66);
LABEL_127:
    uint64_t v73 = v77;
    goto LABEL_128;
  }
  int v70 = v69;
  DataCFIndex Length = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v124 = 0;
  unsigned int v72 = *(_DWORD *)(v110 + 100);
  uint64_t v73 = FigMemoryPoolBlockBufferGetPaddedWriteInfo();
  double v74 = v108;
  if (v73) {
    goto LABEL_128;
  }
  if (v72 < 2 || v66 + offset != DataLength)
  {
    uint64_t v83 = v111;
    int v84 = v70;
    goto LABEL_126;
  }
  uint64_t v75 = v124;
  CFAllocatorRef v76 = (const __CFAllocator *)*v108;
  lhs.CFTypeRef value = 0;
  rhs.CFTypeRef value = 0;
  v122.CFTypeRef value = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (CMBlockBufferIsRangeContiguous((CMBlockBufferRef)cf, 0, 0) != 1)
  {
    uint64_t v95 = FigSignalErrorAt();
    if (!v95) {
      uint64_t v95 = appendBlockBufferToSampleDataDestination(v108, v111, v70, 0, offset, v75 + v66);
    }
    uint64_t v73 = v95;
    goto LABEL_171;
  }
  uint64_t v77 = FigMemoryPoolBlockBufferGetPaddedWriteInfo();
  if (v77) {
    goto LABEL_127;
  }
  time1[0].version = 0;
  if (cf) {
    uint64_t v78 = (void *)CFRetain(cf);
  }
  else {
    uint64_t v78 = 0;
  }
  time1[0].int refCon = v78;
  time1[0].AllocateBlocCFIndex k = 0;
  time1[0].FreeBlocCFIndex k = (void (__cdecl *)(void *, void *, size_t))mdcwMemPoolBBufSourceRelease;
  uint64_t v93 = CMBlockBufferCreateWithMemoryBlock(v76, (void *)lhs.value, rhs.value, 0, time1, 0, rhs.value, 0, &blockBufferOut);
  CMBlockBufferRef v94 = blockBufferOut;
  if (!v93)
  {
    uint64_t v73 = appendBlockBufferToSampleDataDestination(v108, v111, v70, blockBufferOut, offset, v75 + v66);
    if (v94) {
      CFRelease(v94);
    }
    goto LABEL_128;
  }
  uint64_t v73 = v93;
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_171:
  uint64_t v29 = a11;
  uint64_t v17 = v104;
LABEL_128:
  if (v73) {
    return v73;
  }
LABEL_129:
  if (v17 == 1) {
    uint64_t v85 = 1;
  }
  else {
    uint64_t v85 = v65;
  }
  if (v17 == 1) {
    CFIndex v86 = 0;
  }
  else {
    CFIndex v86 = v28;
  }
  if (a10 == 1) {
    uint64_t v87 = 1;
  }
  else {
    uint64_t v87 = v65;
  }
  if (a10 == 1) {
    CFIndex v88 = 0;
  }
  else {
    CFIndex v88 = v28;
  }
  if (a12)
  {
    if (v28 || CFArrayGetCount(a12) != v65)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, 0);
      v138.location = v28;
      v138.length = v65;
      CFArrayAppendArray(Mutable, a12, v138);
    }
    else
    {
      CFMutableArrayRef Mutable = (__CFArray *)CFRetain(a12);
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  CFIndex v90 = a9 + 72 * v86;
  uint64_t v24 = v110;
  uint64_t v91 = (*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t, CFIndex, uint64_t, CFIndex, uint64_t, unint64_t *, __CFArray *, uint64_t, void))(v110 + 8))(v109, v115, v66, v102, v65, v85, v90, v87, &v29[v88], Mutable, a13, *(void *)(v110 + 16));
  if (!v91)
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    unint64_t v92 = *(void *)(v110 + 40) + v66;
    *(void *)(v110 + 32) = v115 + v66;
    *(void *)(v110 + 40) = v92;
    CMTime lhs = *v114;
    rhs.CFTypeRef value = v120;
    rhs.CMTimeScale timescale = v117;
    *(void *)&rhs.CMTimeFlags flags = v127;
    HIDWORD(rhs.epoch) = v128;
    CMTimeAdd((CMTime *)time1, &lhs, &rhs);
    int v27 = 0;
    *(_OWORD *)&v114->CFTypeRef value = *(_OWORD *)&time1[0].version;
    v114->CMTimeEpoch epoch = *(CMTimeEpoch *)((char *)&time1[0].FreeBlock + 4);
    v115 += v66;
    uint64_t v121 = v115;
    offset += v66;
    v28 += v65;
    uint64_t v19 = v118;
    uint64_t v22 = v111;
    goto LABEL_151;
  }
  uint64_t v73 = v91;
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v73;
}

uint64_t MediaDataChunkWriterTrackAppendSampleReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, const __CFArray *a10, uint64_t a11)
{
  if (a1 && a2 && a5 > 0 && a6 > 0 && a7 && a8 > 0 && a9)
  {
    uint64_t v11 = 0;
    while (a9[v11])
    {
      if (a8 == ++v11) {
        return appendSampleDataOrSampleReference(a1, a2, 0, 0, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t MediaDataChunkWriterFlush(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 && *(_DWORD *)(v4 + 100) == 0x4000)
    {
      uint64_t v5 = *(void *)(a1 + 72);
      BOOL v6 = -v5 < 0;
      uint64_t v7 = -v5 & 0x3FFF;
      uint64_t v8 = v5 & 0x3FFF;
      if (!v6) {
        uint64_t v8 = -v7;
      }
      if (v8) {
        size_t v9 = 0x4000 - v8;
      }
      else {
        size_t v9 = 0;
      }
    }
    else
    {
      size_t v9 = 0;
    }
    uint64_t result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer(a1, a2, v9);
    if (!result)
    {
      uint64_t result = appendAggregateBBufToByteStream(a1, a2);
      if (!result) {
        *(void *)(a1 + 16) = 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer(uint64_t a1, uint64_t a2, size_t a3)
{
  size_t v3 = *(void *)(a1 + 72);
  if (!v3) {
    return 0;
  }
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = (void *)(*(void *)(a1 + 56) + v3);
    if (v6 - v3 >= a3) {
      size_t v8 = a3;
    }
    else {
      size_t v8 = v6 - v3;
    }
    bzero(v7, v8);
    size_t v3 = *(void *)(a1 + 72) + v8;
    *(void *)(a1 + 72) = v3;
  }
  uint64_t result = appendBlockBufferReferenceToAggregateBBuf(a1, a2, *(CMBlockBufferRef *)(a1 + 48), 0, v3);
  if (!result)
  {
    CFAllocatorRef v10 = *(const void **)(a1 + 48);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 48) = 0;
    }
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    return allocateDataBuffer(a1);
  }
  return result;
}

uint64_t appendAggregateBBufToByteStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t result = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 24));
  if (result)
  {
    uint64_t result = appendBlockBufferToByteStream(a2, *v4, 0, result);
    if (!result)
    {
      if (*v4)
      {
        CFRelease((CFTypeRef)*v4);
        *uint64_t v4 = 0;
      }
      uint64_t result = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)a1, 0x40u, 0, (CMBlockBufferRef *)v4);
      if (!result) {
        *(_DWORD *)(a1 + 32) = 0;
      }
    }
  }
  return result;
}

uint64_t MediaDataChunkWriterTrackStartNewChunk(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 105) = 1;
  return 0;
}

uint64_t MediaDataChunkWriterGetEntireLength(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3) {
    return getEndOffset(a1, a2, a3);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t getEndOffset(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  size_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v7 + 24);
  if (!v8) {
    return 4294954514;
  }
  uint64_t result = v8(a2, 0, &v11);
  if (!result)
  {
    DataCFIndex Length = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 24));
    uint64_t result = 0;
    *a3 = *(void *)(a1 + 72) + v11 + DataLength;
  }
  return result;
}

uint64_t MediaDataChunkWriterTrackSetPreferredChunkSize(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2 || a3 < 0) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a2 + 72) = a3;
  return 0;
}

uint64_t MediaDataChunkWriterTrackGetPreferredChunkSize(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !a2 || !a3) {
    return FigSignalErrorAt();
  }
  *a3 = *(_DWORD *)(a2 + 72);
  return 0;
}

uint64_t MediaDataChunkWriterTrackSetPreferredChunkDuration(uint64_t a1, uint64_t a2, CMTime *a3)
{
  if (a1 && a2 && (a3->flags & 0x1D) == 1)
  {
    CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTime v7 = *a3;
    if (CMTimeCompare(&time1, &v7) >= 1)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      long long v6 = *(_OWORD *)&a3->value;
      *(void *)(a2 + 92) = a3->epoch;
      *(_OWORD *)(a2 + 76) = v6;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t MediaDataChunkWriterTrackGetPreferredChunkDuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a2 || !a3) {
    return FigSignalErrorAt();
  }
  long long v3 = *(_OWORD *)(a2 + 76);
  *(void *)(a3 + 16) = *(void *)(a2 + 92);
  *(_OWORD *)a3 = v3;
  return 0;
}

uint64_t MediaDataChunkWriterTrackSetPreferredChunkAlignment(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2 || a3 < 0) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a2 + 100) = a3;
  return 0;
}

uint64_t MediaDataChunkWriterTrackGetPreferredChunkAlignment(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !a2 || !a3) {
    return FigSignalErrorAt();
  }
  *a3 = *(_DWORD *)(a2 + 100);
  return 0;
}

uint64_t appendDataViaDataBuffer(void *a1, uint64_t a2, unint64_t a3, char *__src)
{
  if (!a3) {
    return 0;
  }
  unint64_t v5 = a3;
  while (1)
  {
    uint64_t v8 = a1[9];
    size_t v9 = (void *)(a1[7] + v8);
    unint64_t v10 = a1[8] - v8;
    size_t v11 = v5 >= v10 ? v10 : v5;
    memcpy(v9, __src, v11);
    uint64_t v12 = a1[8];
    size_t v13 = a1[9] + v11;
    a1[9] = v13;
    if (v13 == v12)
    {
      uint64_t result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)a1, a2, 0);
      if (result) {
        break;
      }
    }
    __src += v11;
    v5 -= v11;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

uint64_t appendBlockBufferToSampleDataDestination(void *a1, uint64_t a2, int a3, CMBlockBufferRef theBuffer, size_t offset, unint64_t a6)
{
  unint64_t v6 = a6;
  if (a3)
  {
    if (a3 == 2)
    {
      uint64_t result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)a1, a2, 0);
      if (!result)
      {
        return appendBlockBufferReferenceToAggregateBBuf((uint64_t)a1, a2, theBuffer, offset, v6);
      }
    }
    else if (a3 == 1 && a6)
    {
      while (1)
      {
        size_t v13 = 0;
        size_t lengthAtOffsetOut = 0;
        uint64_t result = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &v13);
        if (result) {
          break;
        }
        size_t v12 = v6 >= lengthAtOffsetOut ? lengthAtOffsetOut : v6;
        size_t lengthAtOffsetOut = v12;
        uint64_t result = appendDataViaDataBuffer(a1, a2, v12, v13);
        if (result) {
          break;
        }
        offset += lengthAtOffsetOut;
        v6 -= lengthAtOffsetOut;
        if (!v6) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)a1, a2, 0);
    if (!result)
    {
      uint64_t result = appendAggregateBBufToByteStream((uint64_t)a1, a2);
      if (!result)
      {
        return appendBlockBufferToByteStream(a2, (uint64_t)theBuffer, offset, v6);
      }
    }
  }
  return result;
}

void mdcwMemPoolBBufSourceRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t appendBlockBufferToByteStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v9 + 24);
  if (!v10) {
    return 4294954514;
  }
  uint64_t result = v10(a1, 0, &v16);
  if (!result)
  {
    uint64_t v12 = v16;
    size_t v13 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    if (*v14 < 4uLL) {
      return CMByteStreamAppendBlockBuffer();
    }
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))v14[7];
    if (!v15) {
      return CMByteStreamAppendBlockBuffer();
    }
    uint64_t result = v15(a1, a2, a3, a4, v12, 0);
    if (result == -12782) {
      return CMByteStreamAppendBlockBuffer();
    }
  }
  return result;
}

uint64_t appendBlockBufferReferenceToAggregateBBuf(uint64_t a1, uint64_t a2, CMBlockBufferRef targetBBuf, size_t offsetToData, size_t dataLength)
{
  uint64_t result = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 24), targetBBuf, offsetToData, dataLength, 0);
  if (!result)
  {
    int v8 = *(_DWORD *)(a1 + 36);
    int v9 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 == v8)
    {
      return appendAggregateBBufToByteStream(a1, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t FigCDSOutputNodeProtocolGetProtocolID()
{
  return sFigCDSOutputNodeProtocolID;
}

uint64_t RegisterFigCDSOutputNodeProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCDSOutputNodeProtocolDesc, 0, &sFigCDSOutputNodeProtocolID);
}

uint64_t FigCaptionRendererTimerStart(uint64_t a1)
{
  dispatch_source_t v2 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 64));
  *(void *)(a1 + 72) = v2;
  if (v2)
  {
    long long v3 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)fcrTimerOnTimerCanceled);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)fcrTimerDispatchFunctionCallback);
    dispatch_set_context(*(dispatch_object_t *)(a1 + 72), v3);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0, 1000000 * *(int *)(a1 + 36), 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 72));
  }
  *(unsigned char *)(a1 + 33) = 0;
  return 0;
}

void fcrTimerOnTimerCanceled(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void fcrTimerDispatchFunctionCallback()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (void (**)(void))v0;
    if (*(void *)(v0 + 24))
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        long long v3 = (const void *)v2;
        v1[3]();
        CFRelease(v3);
      }
    }
    CFRelease(v1);
  }
}

uint64_t FigCaptionRendererTimerCreate(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererTimerLocalGetTypeID_sRegisterFigCaptionRendererTimerOnce, RegisterFigCaptionRendererTimerClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 32) = 256;
  *(_DWORD *)(Instance + 36) = a1;
  snprintf(__str, 0x100uLL, "com.apple.coremedia.figfcrtimer.soQueue<%p>", (const void *)Instance);
  *(void *)(Instance + 64) = dispatch_queue_create(__str, 0);
  if (a2
    && a3
    && (*(void *)(Instance + 24) = a2,
        uint64_t v9 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(Instance + 16) = v9) == 0))
  {
    uint64_t v10 = FigSignalErrorAt();
    CFRelease((CFTypeRef)Instance);
  }
  else
  {
    uint64_t v10 = 0;
    *a4 = Instance;
  }
  return v10;
}

uint64_t RegisterFigCaptionRendererTimerClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCaptionRendererTimerIOSurfaceID ID = result;
  return result;
}

double FigCaptionRendererTimerInit(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCaptionRendererTimer_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 64) = 0;
  }
}

__CFString *FigCaptionRendererTimerCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererTimer %p>", a1);
  return Mutable;
}

uint64_t FigSampleGeneratorServerStart()
{
  v3[0] = 1;
  v3[1] = HandleSampleGeneratorMessage;
  v3[2] = HandleNoReplyFigSampleGeneratorMessage;
  memset(&v3[3], 0, 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1107296256;
  block[2] = __FigSampleGeneratorServerStart_block_invoke;
  block[3] = &__block_descriptor_tmp_148;
  __copy_constructor_8_8_t0w8_pa0_45604_8_pa0_22587_16_pa0_57319_24_pa0_49646_32_pa0_60888_40(v2, v3);
  v2[6] = 0;
  if (FigSampleGeneratorServerStart_sFigSampleGeneratorServerOnce != -1) {
    dispatch_once(&FigSampleGeneratorServerStart_sFigSampleGeneratorServerOnce, block);
  }
  return FigSampleGeneratorServerStart_sFigSampleGeneratorServerStartError;
}

uint64_t HandleSampleGeneratorMessage(uint64_t a1, void *a2)
{
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  uint64_t v6 = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  OpCFIndex Code = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t HandleNoReplyFigSampleGeneratorMessage(uint64_t a1, void *a2)
{
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  OpCFIndex Code = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

dispatch_queue_t __FigSampleGeneratorServerStart_block_invoke()
{
  if (FigServer_IsMediaparserd())
  {
    int v0 = FigSignalErrorAt();
  }
  else
  {
    FigServer_IsMediaplaybackd();
    int v0 = FigXPCServerStart();
  }
  FigSampleGeneratorServerStart_sFigSampleGeneratorServerStartError = v0;
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.samplegenerator.transport", 0);
  gFigSampleGeneratorServerCallbackQueue = (uint64_t)result;
  return result;
}

void *__copy_helper_block_8_32n72_8_8_t0w8_pa0_45604_8_pa0_22587_16_pa0_57319_24_pa0_49646_32_pa0_60888_40(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w8_pa0_45604_8_pa0_22587_16_pa0_57319_24_pa0_49646_32_pa0_60888_40((void *)(a1 + 32), (void *)(a2 + 32));
}

void *__copy_constructor_8_8_t0w8_pa0_45604_8_pa0_22587_16_pa0_57319_24_pa0_49646_32_pa0_60888_40(void *result, void *a2)
{
  *dispatch_queue_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  return result;
}

uint64_t __FigServedSampleGeneratorObjectStateGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigServedSampleGeneratorObjectStateGetTypeID_sFigServedSampleGeneratorObjectStateIOSurfaceID ID = result;
  return result;
}

double FigServedSampleGeneratorObjectState_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigServedSampleGeneratorObjectState_Finalize(void *context)
{
  uint64_t v2 = (const void *)context[2];
  if (v2)
  {
    CFRelease(v2);
    void context[2] = 0;
  }
  long long v3 = (void *)context[3];
  if (v3)
  {
    os_release(v3);
    _OWORD context[3] = 0;
  }
  uint64_t v4 = context[4];
  if (v4)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(v4 + 16);
    if (v5) {
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)sampleBufferHandler_removeListenersApply, context);
    }
  }
  FigCFWeakReferenceStore();
  FigCFWeakReferenceStore();
  DestroySampleBufferHandler(context[4]);
  context[4] = 0;
}

__CFString *FigServedSampleGeneratorObjectState_CopyDebugDesc(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"FigServedSampleGeneratorObjectState %p", a1);
  return Mutable;
}

uint64_t sampleBufferHandler_removeListenersApply()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListener();
}

void DestroySampleBufferHandler(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 8);
    if (v2)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)a1, v2);
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1) {
      CMBufferQueueReset(*(CMBufferQueueRef *)a1);
    }
    long long v3 = *(void **)(a1 + 40);
    if (v3)
    {
      *(void *)(a1 + 40) = 0;
      xpc_release(v3);
    }
    uint64_t v4 = *(const void **)(a1 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 16) = 0;
    }
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0;
    }
    CFDictionaryRef v5 = *(const void **)(a1 + 48);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v6 = *(const void **)(a1 + 56);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 56) = 0;
    }
    FigSimpleMutexDestroy();
    *(void *)(a1 + 24) = 0;
    CMTime v7 = *(const void **)(a1 + 64);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 64) = 0;
    }
    int v8 = *(const void **)(a1 + 72);
    if (v8) {
      CFRelease(v8);
    }
    free((void *)a1);
  }
}

uint64_t sampleBufferGenerator_dataFailedCallback(uint64_t a1, uint64_t a2, uint64_t a3, opaqueCMSampleBuffer *a4)
{
  uint64_t v5 = *(void *)(a2 + 32);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();

  return sampleBufferGenerator_sendDataFailedMessage(a4, v5);
}

uint64_t sampleBufferGenerator_sendDataFailedMessage(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CFTypeRef value = 0;
  xpc_object_t xdict = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a2 + 24));
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 16), a1, (const void **)&value))
    {
      int64_t v5 = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v5);
      OSStatus statusOut = FigXPCCreateBasicMessage();
      if (!statusOut)
      {
        xpc_dictionary_set_int64(xdict, "RequestID", v5);
        CMSampleBufferHasDataFailed(a1, &statusOut);
        xpc_dictionary_set_int64(xdict, "SampleBufferErrorReturn", statusOut);
        xpc_connection_send_message(*(xpc_connection_t *)(a2 + 40), xdict);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 16), a1);
      }
    }
    else
    {
      OSStatus statusOut = FigSignalErrorAt();
    }
    MEMORY[0x19970E930](*(void *)(a2 + 24));
  }
  else
  {
    OSStatus statusOut = FigSignalErrorAt();
  }
  return FigXPCRelease();
}

void sampleBufferGenerator_bufferQueue_dataReadyCallback(uint64_t a1)
{
  if (a1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __sampleBufferGenerator_bufferQueue_dataReadyCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_22_3;
    void block[4] = a1;
    dispatch_async((dispatch_queue_t)gFigSampleGeneratorServerCallbackQueue, block);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void *__sampleBufferGenerator_bufferQueue_dataReadyCallback_block_invoke(void *result)
{
  uint64_t v1 = result[4];
  value[0] = 0;
  if (v1)
  {
    double result = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)v1);
    if (result)
    {
      uint64_t v2 = result;
      do
      {
        MEMORY[0x19970E910](*(void *)(v1 + 24));
        if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v1 + 16), v2, (const void **)value))
        {
          int64_t v5 = 0;
          CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt64Type, &v5);
          long long v3 = *(_xpc_connection_s **)(v1 + 40);
          int64_t v4 = v5;
          value[1] = 0;
          xpc_object_t xdict = 0;
          if (!FigXPCCreateBasicMessage())
          {
            xpc_dictionary_set_int64(xdict, "RequestID", v4);
            xpc_dictionary_set_int64(xdict, "SampleBufferErrorReturn", 0);
            if (!FigXPCServerCopyMemoryOrigin()
              && !FigXPCMessageAddDataBufferFromCMSampleBuffer())
            {
              xpc_connection_send_message(v3, xdict);
            }
          }
          FigXPCRelease();
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v1 + 16), v2);
        }
        MEMORY[0x19970E930](*(void *)(v1 + 24));
        CFRelease(v2);
        double result = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)v1);
        uint64_t v2 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sampleBufferGeneratorServer_createSampleBufferAtCursor(CFTypeRef cf, int a2, uint64_t a3, void *a4, void *a5)
{
  CFTypeRef v9 = cf;
  unint64_t v45 = 0;
  int v44 = 0;
  memset(v43, 0, sizeof(v43));
  if (a2)
  {
    if (!cf) {
      goto LABEL_34;
    }
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 != FigSampleGeneratorBatchGetTypeID()) {
      goto LABEL_34;
    }
    CFTypeRef v11 = 0;
    if (!a3) {
      goto LABEL_34;
    }
  }
  else
  {
    if (!cf) {
      goto LABEL_34;
    }
    CFTypeID v12 = CFGetTypeID(cf);
    if (v12 != FigSampleGeneratorGetTypeID()) {
      goto LABEL_34;
    }
    CFTypeRef v11 = v9;
    CFTypeRef v9 = 0;
    if (!a3) {
      goto LABEL_34;
    }
  }
  size_t length = 0;
  datdouble a = xpc_dictionary_get_data(a4, "SampleBufferGenerationRequest", &length);
  if (!data || length != 48 || (uint64_t v14 = *(void *)(a3 + 32)) == 0)
  {
LABEL_34:
    uint64_t v39 = FigSignalErrorAt();
    CallbackParameters = 0;
    goto LABEL_31;
  }
  uint64_t v15 = (uint64_t)data;
  CallbackParameters = sampleBufferGeneratorServer_createCallbackParameters(*(void *)(a3 + 32), 1, v9);
  if (!CallbackParameters) {
    goto LABEL_35;
  }
  uint64_t v17 = (*(_DWORD *)(a3 + 40) + 1);
  *(_DWORD *)(a3 + 40) = v17;
  uint64_t SampleBufferGeneratorRequestFromXPCMessage = sampleBufferGeneratorServer_createSampleBufferGeneratorRequestFromXPCMessage(v17 << 32, v15, a3, (uint64_t)v43);
  if (!SampleBufferGeneratorRequestFromXPCMessage)
  {
    if (a2)
    {
      long long v19 = v43[0];
      uint64_t v20 = *(void *)&v43[1];
      uint64_t v21 = DWORD2(v43[1]);
      uint64_t v22 = *(void *)((char *)&v43[1] + 12);
      uint64_t v23 = DWORD1(v43[2]);
      uint64_t v24 = DWORD2(v43[2]);
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v36 = *(uint64_t (**)(CFTypeRef, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, opaqueCMSampleBuffer **))(v26 + 8);
      if (v36)
      {
        uint64_t v37 = v36(v9, v19, *((void *)&v19 + 1), v20, v21, v22, v23, v24, 0, 0, 0, &v45);
        goto LABEL_27;
      }
    }
    else
    {
      CFArrayRef v27 = *(const __CFArray **)(v14 + 48);
      if (v27 && CFArrayGetCount(v27))
      {
LABEL_35:
        uint64_t SampleBufferGeneratorRequestFromXPCMessage = FigSignalErrorAt();
        goto LABEL_36;
      }
      long long v28 = v43[0];
      uint64_t v29 = *(void *)&v43[1];
      uint64_t v30 = DWORD2(v43[1]);
      uint64_t v31 = *(void *)((char *)&v43[1] + 12);
      uint64_t v32 = DWORD1(v43[2]);
      uint64_t v33 = DWORD2(v43[2]);
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      BOOL v38 = *(uint64_t (**)(CFTypeRef, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, opaqueCMSampleBuffer **))(v35 + 8);
      if (v38)
      {
        uint64_t v37 = v38(v11, v28, *((void *)&v28 + 1), v29, v30, v31, v32, v33, 0, 0, 0, &v45);
LABEL_27:
        uint64_t v39 = v37;
        if (v37) {
          goto LABEL_31;
        }
        sampleBufferGeneratorServer_requestCallback(CallbackParameters, (uint64_t)v43, 0, v45);
        if (xpc_array_get_count((xpc_object_t)CallbackParameters[2]) == 1)
        {
          dictionardouble y = xpc_array_get_dictionary((xpc_object_t)CallbackParameters[2], 0);
          xpc_dictionary_set_value(a5, "SampleBufferResponse", dictionary);
          uint64_t v39 = 0;
          goto LABEL_31;
        }
        goto LABEL_35;
      }
    }
    uint64_t v39 = 4294954514;
    goto LABEL_31;
  }
LABEL_36:
  uint64_t v39 = SampleBufferGeneratorRequestFromXPCMessage;
LABEL_31:
  if (v45) {
    CFRelease(v45);
  }
  sampleBufferGeneratorServer_destroySampleBufferGeneratorRequest((uint64_t)v43);
  sampleBufferGeneratorServer_destroyCallbackParameters(CallbackParameters);
  return v39;
}

void *sampleBufferGeneratorServer_createCallbackParameters(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040C95B7C1FuLL);
  if (v6 && a1)
  {
    xpc_object_t v7 = xpc_array_create(0, 0);
    v6[2] = v7;
    if (v7)
    {
      v6[3] = a1;
      *uint64_t v6 = a2;
      if (a3) {
        CFTypeRef v8 = CFRetain(a3);
      }
      else {
        CFTypeRef v8 = 0;
      }
      v6[1] = v8;
    }
  }
  else if (FigSignalErrorAt())
  {
    sampleBufferGeneratorServer_destroyCallbackParameters(v6);
    return 0;
  }
  return v6;
}

uint64_t sampleBufferGeneratorServer_createSampleBufferGeneratorRequestFromXPCMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t valuePtr = a1;
  if (!a2
    || !a4
    || (*(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 16),
        *(_OWORD *)(a4 + 8) = *(_OWORD *)a2,
        *(void *)(a4 + 36) = *(void *)(a2 + 20),
        uint64_t v7 = MEMORY[0x19970C720](a3 + 48),
        uint64_t v8 = MEMORY[0x19970C720](a3 + 56),
        !(v7 | v8)))
  {
    uint64_t v12 = FigSignalErrorAt();
    if (!v12) {
      return v12;
    }
    goto LABEL_17;
  }
  CFTypeRef v9 = (const void *)v8;
  if (FigFormatReaderServerIsObjectIDLocallyServed(*(void *)(a2 + 32)))
  {
    if (FigXPCFormatReaderServerCopySampleCursorForID(*(void *)(a2 + 32), (void *)a4)) {
      goto LABEL_23;
    }
  }
  else if (FigFormatReaderXPCRemoteCopySampleCursorForObjectIDFromOtherProcess(v7, (uint64_t)v9, *(void *)(a2 + 32), (void *)a4))
  {
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a2 + 40);
  if (v10)
  {
    if (FigFormatReaderServerIsObjectIDLocallyServed(v10))
    {
      if (FigXPCFormatReaderServerCopySampleCursorForID(*(void *)(a2 + 40), (void *)(a4 + 28))) {
        goto LABEL_23;
      }
    }
    else if (FigFormatReaderXPCRemoteCopySampleCursorForObjectIDFromOtherProcess(v7, (uint64_t)v9, *(void *)(a2 + 40), (void *)(a4 + 28)))
    {
      goto LABEL_23;
    }
  }
  *(void *)(a4 + 52) = 0;
  *(void *)(a4 + 44) = 0;
  CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  *(void *)(a4 + 60) = v11;
  if (v11)
  {
    uint64_t v12 = 0;
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_23:
  uint64_t v12 = FigSignalErrorAt();
  if (v7) {
LABEL_13:
  }
    CFRelease((CFTypeRef)v7);
LABEL_14:
  if (v9) {
    CFRelease(v9);
  }
  if (v12) {
LABEL_17:
  }
    sampleBufferGeneratorServer_destroySampleBufferGeneratorRequest(a4);
  return v12;
}

void sampleBufferGeneratorServer_requestCallback(uint64_t *a1, uint64_t a2, int a3, opaqueCMSampleBuffer *a4)
{
  if (!a1) {
    return;
  }
  uint64_t v5 = a1[3];
  if (!v5) {
    return;
  }
  CFNumberRef v6 = *(const __CFNumber **)(a2 + 60);
  if (v6)
  {
    int64_t v15 = 0;
    CFNumberGetValue(v6, kCFNumberSInt64Type, &v15);
    if (v15 >= *a1) {
      goto LABEL_21;
    }
    if (a4)
    {
      IsReaddouble y = CMSampleBufferDataIsReady(a4);
      if (!IsReady)
      {
        MEMORY[0x19970E910](*(void *)(v5 + 24));
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 16), a4, v6);
        MEMORY[0x19970E930](*(void *)(v5 + 24));
        CFTypeRef cf = 0;
        if (!a1[1])
        {
          uint64_t v10 = *(void **)(v5 + 48);
          CFTypeRef cf = v10;
          goto LABEL_12;
        }
        if (FigCFDictionaryGetValueIfPresent())
        {
          uint64_t v10 = (void *)cf;
LABEL_12:
          CFArrayAppendValue((CFMutableArrayRef)v10, a4);
          IsReaddouble y = 0;
          goto LABEL_13;
        }
LABEL_21:
        FigSignalErrorAt();
        return;
      }
    }
    else
    {
      IsReaddouble y = 1;
    }
LABEL_13:
    int64_t v11 = v15;
    uint64_t v12 = (void *)a1[2];
    CFTypeRef cf = 0;
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    uint64_t v14 = v13;
    if (v13)
    {
      xpc_dictionary_set_int64(v13, "SampleBufferErrorReturn", a3);
      xpc_dictionary_set_int64(v14, "RequestID", v11);
      xpc_dictionary_set_BOOL(v14, "SampleBufferDataReady", IsReady != 0);
      if (!a4 || !FigXPCServerCopyMemoryOrigin() && !FigXPCMessageAddCMSampleBuffer()) {
        xpc_array_append_value(v12, v14);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    FigXPCRelease();
    if (cf) {
      CFRelease(cf);
    }
    return;
  }

  FigSignalErrorAt();
}

void sampleBufferGeneratorServer_destroySampleBufferGeneratorRequest(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  long long v3 = *(const void **)(a1 + 28);
  if (v3) {
    CFRelease(v3);
  }
  int64_t v4 = *(const void **)(a1 + 60);
  if (v4)
  {
    CFRelease(v4);
  }
}

void sampleBufferGeneratorServer_destroyCallbackParameters(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[1];
    if (v2)
    {
      CFRelease(v2);
      a1[1] = 0;
    }
    long long v3 = (void *)a1[2];
    if (v3)
    {
      a1[2] = 0;
      xpc_release(v3);
    }
    free(a1);
  }
}

uint64_t sampleBufferGeneratorServer_enqueuePendingSampleBuffers(CFArrayRef theArray, uint64_t a2)
{
  CFTypeRef value = 0;
  if (a2 && theArray && (uint64_t v3 = *(void *)(a2 + 32)) != 0)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count < 1) {
      return 0;
    }
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      uint64_t v8 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)v3, ValueAtIndex);
      if (v8)
      {
        uint64_t v10 = 0;
        MEMORY[0x19970E910](*(void *)(v3 + 24));
        if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v3 + 16), ValueAtIndex, (const void **)&value))
        {
          CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 16), ValueAtIndex);
        }
        MEMORY[0x19970E930](*(void *)(v3 + 24));
      }
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL sampleBufferGeneratorServer_NotificationFilter()
{
  return FigCFEqual() != 0;
}

uint64_t RegisterFigCFCaptionRendererClass()
{
  return FigBaseClassRegisterClass();
}

uint64_t FigCFCaptionRendererCreate()
{
  MEMORY[0x19970EE10](&FigCFCaptionRendererGetClassID_sRegisterFigCFCaptionRendererOnce, RegisterFigCFCaptionRendererClass);
  if (CMDerivedObjectCreate()) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 336) = 0;
  uint64_t v2 = FigSimpleMutexCreate();
  *(void *)(v1 + 32) = v2;
  if (!v2) {
    return 0;
  }
  *(unsigned char *)(v1 + 344) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterAddWeakListener();
  FigCaptionLayoutCopyMAXCaptionSystemSettings(v1 + 80);
  return 0;
}

uint64_t fcfcr_MAXCaptionSettingsChangedNotificationCallBack()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCaptionLayoutCopyMAXCaptionSystemSettings(DerivedStorage + 80);
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigCFCaptionRendererProcessCaptionCommandData(uint64_t a1, int a2, const __CFDictionary *a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    CFNumberRef v6 = (void *)result;
    switch(a2)
    {
      case 1:
        goto LABEL_23;
      case 6:
        MEMORY[0x19970E910](*(void *)(result + 32));
        FigCFDictionaryGetBooleanIfPresent();
        CFDictionaryRef Value = CFDictionaryGetValue(a3, @"W");
        uint64_t v8 = (const void *)v6[37];
        v6[37] = Value;
        if (Value) {
          goto LABEL_4;
        }
        goto LABEL_5;
      case 7:
        MEMORY[0x19970E910](*(void *)(result + 32));
        CFDictionaryRef Value = CFDictionaryGetValue(a3, @"C");
        uint64_t v8 = (const void *)v6[36];
        v6[36] = Value;
        if (!Value) {
          goto LABEL_5;
        }
LABEL_4:
        CFRetain(Value);
LABEL_5:
        if (v8) {
          CFRelease(v8);
        }
        JUMPOUT(0x19970E930);
      case 8:
        MEMORY[0x19970E910](*(void *)(result + 32));
        if (a3)
        {
          CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"V");
          a3 = v9;
          uint64_t v10 = (const void *)v6[40];
          v6[40] = v9;
          if (v9)
          {
            CFRetain(v9);
            char v11 = 0;
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = (const void *)v6[40];
          v6[40] = 0;
        }
        char v11 = 1;
LABEL_18:
        if (v10) {
          CFRelease(v10);
        }
        if ((v11 & 1) == 0)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, 0);
          CFDictionaryGetValue(ValueAtIndex, @"CMTextHighlightAttributeKey_StringToHighlight");
        }
        MEMORY[0x19970E930](v6[4]);
LABEL_23:
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t result = CMNotificationCenterPostNotification();
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t FigCFCaptionRendererResetCaptions()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v1 = result;
    MEMORY[0x19970E910](*(void *)(result + 32));
    uint64_t v2 = *(const void **)(v1 + 288);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(v1 + 288) = 0;
    }
    uint64_t v3 = *(const void **)(v1 + 296);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 296) = 0;
    }
    FigCaptionLayoutReleaseCaptionElementArray(*(const __CFArray **)(v1 + 304));
    *(void *)(v1 + 304) = 0;
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t FigCFCaptionRendererSetFontName(uint64_t a1, const __CFString *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v4 = result;
    MEMORY[0x19970E910](*(void *)(result + 32));
    CFIndex v5 = *(const void **)(v4 + 24);
    if (v5) {
      CFRelease(v5);
    }
    *(void *)(v4 + 24) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t FigCFCaptionRendererSetStyleOptions(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v4 = result;
    MEMORY[0x19970E910](*(void *)(result + 32));
    CFIndex v5 = *(const void **)(v4 + 336);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(v4 + 336) = 0;
    }
    if (!a2
      || (CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2), (*(void *)(v4 + 336) = Copy) != 0))
    {
      JUMPOUT(0x19970E930);
    }
    return FigSignalErrorAt();
  }
  return result;
}

void FigCFCaptionRendererGetCaptionElementRect(uint64_t a1, _OWORD *a2, int a3, int a4, _DWORD *a5, CGRect *a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  long long v12 = a2[1];
  v14[0] = *a2;
  v14[1] = v12;
  long long v13 = a2[3];
  v14[2] = a2[2];
  v14[3] = v13;
  FigCFCaptionRendererGetCaptionElementWindowProperties(a7, a8, a9, a10, a11, a12, a1, (double *)v14, a3, a4, a5, a6, 0, 0, 0);
}

void FigCFCaptionRendererGetCaptionElementWindowProperties(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, double *a8, int a9, int a10, _DWORD *a11, CGRect *a12, BOOL *a13, void *a14, unsigned char *a15)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v23 = *a8;
  double v24 = a8[2];
  double v25 = a8[4];
  double v177 = a8[6];
  uint64_t v195 = 0;
  long long v194 = 0u;
  long long v193 = 0u;
  long long v192 = 0u;
  long long v191 = 0u;
  long long v190 = 0u;
  long long v189 = 0u;
  long long v188 = 0u;
  long long v187 = 0u;
  long long v186 = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  CFArrayRef theArray = 0;
  CFTypeRef v26 = *(CFTypeRef *)(DerivedStorage + 80);
  if (v26) {
    CFTypeRef v26 = CFRetain(v26);
  }
  v183[0] = v26;
  CFTypeRef v27 = *(CFTypeRef *)(DerivedStorage + 88);
  if (v27) {
    CFTypeRef v27 = CFRetain(v27);
  }
  v183[1] = v27;
  CFTypeRef v28 = *(CFTypeRef *)(DerivedStorage + 96);
  if (v28) {
    CFTypeRef v28 = CFRetain(v28);
  }
  v183[2] = v28;
  CFTypeRef v29 = *(CFTypeRef *)(DerivedStorage + 104);
  if (v29) {
    CFTypeRef v29 = CFRetain(v29);
  }
  *(void *)&long long v184 = v29;
  CFTypeRef v30 = *(CFTypeRef *)(DerivedStorage + 120);
  if (v30) {
    CFTypeRef v30 = CFRetain(v30);
  }
  *(void *)&long long v185 = v30;
  CFTypeRef v31 = *(CFTypeRef *)(DerivedStorage + 128);
  if (v31) {
    CFTypeRef v31 = CFRetain(v31);
  }
  *((void *)&v185 + 1) = v31;
  CFTypeRef v32 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v32) {
    CFTypeRef v32 = CFRetain(v32);
  }
  *(void *)&long long v186 = v32;
  CFTypeRef v33 = *(CFTypeRef *)(DerivedStorage + 144);
  if (v33) {
    CFTypeRef v33 = CFRetain(v33);
  }
  *((void *)&v186 + 1) = v33;
  CFTypeRef v34 = *(CFTypeRef *)(DerivedStorage + 152);
  if (v34) {
    CFTypeRef v34 = CFRetain(v34);
  }
  *(void *)&long long v187 = v34;
  CFTypeRef v35 = *(CFTypeRef *)(DerivedStorage + 160);
  if (v35) {
    CFTypeRef v35 = CFRetain(v35);
  }
  *((void *)&v187 + 1) = v35;
  CFTypeRef v36 = *(CFTypeRef *)(DerivedStorage + 168);
  if (v36) {
    CFTypeRef v36 = CFRetain(v36);
  }
  *(void *)&long long v188 = v36;
  CFTypeRef v37 = *(CFTypeRef *)(DerivedStorage + 176);
  if (v37) {
    CFTypeRef v37 = CFRetain(v37);
  }
  *((void *)&v188 + 1) = v37;
  *((void *)&v184 + 1) = *(void *)(DerivedStorage + 112);
  long long v190 = *(_OWORD *)(DerivedStorage + 200);
  long long v189 = *(_OWORD *)(DerivedStorage + 184);
  long long v191 = *(_OWORD *)(DerivedStorage + 216);
  long long v192 = *(_OWORD *)(DerivedStorage + 232);
  long long v193 = *(_OWORD *)(DerivedStorage + 248);
  long long v194 = *(_OWORD *)(DerivedStorage + 264);
  uint64_t v195 = *(void *)(DerivedStorage + 280);
  CFTypeRef v196 = 0;
  v197.CGFloat a = 0.0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  BOOL v38 = *(const void **)(DerivedStorage + 24);
  if (v38) {
    CFTypeRef v39 = CFRetain(v38);
  }
  else {
    CFTypeRef v39 = 0;
  }
  unint64_t v40 = *(const void **)(DerivedStorage + 288);
  if (v40) {
    CFArrayRef v181 = (const __CFArray *)CFRetain(v40);
  }
  else {
    CFArrayRef v181 = 0;
  }
  uint64_t v41 = *(const void **)(DerivedStorage + 296);
  if (v41) {
    CFArrayRef v180 = (const __CFArray *)CFRetain(v41);
  }
  else {
    CFArrayRef v180 = 0;
  }
  unint64_t v42 = *(const void **)(DerivedStorage + 320);
  if (v42) {
    CFArrayRef v43 = (const __CFArray *)CFRetain(v42);
  }
  else {
    CFArrayRef v43 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  *(void *)(DerivedStorage + 328) = 0;
  CFArrayRef cf = v43;
  int v44 = FigCaptionLayoutCopyEffectiveFontNamePlusInfoAndCreateElementGeometryArrays(v39, a9, v181, v180, *(void *)DerivedStorage, *(CFTypeRef *)(DerivedStorage + 8), *(const void **)(DerivedStorage + 16), 0, a1, a2, a3, a4, (uint64_t)v183, v43, (uint64_t *)(DerivedStorage + 328), (unsigned __int8 *)(DerivedStorage + 40), (double *)(DerivedStorage + 48), &v197, &v196,
          &theArray,
          (double *)(DerivedStorage + 64),
          (double *)(DerivedStorage + 56));
  unint64_t v45 = v44;
  uint64_t v46 = *(const void **)DerivedStorage;
  *(void *)uint64_t DerivedStorage = v44;
  if (v44) {
    CFRetain(v44);
  }
  if (v46) {
    CFRelease(v46);
  }
  CMTime v47 = *(const void **)(DerivedStorage + 8);
  CGFloat a = v197.a;
  *(CGFloat *)(DerivedStorage + 8) = v197.a;
  if (a != 0.0) {
    CFRetain(*(CFTypeRef *)&a);
  }
  if (v47) {
    CFRelease(v47);
  }
  CMTimeValue v49 = *(const void **)(DerivedStorage + 16);
  CFTypeRef v50 = v196;
  *(void *)(DerivedStorage + 16) = v196;
  if (v50) {
    CFRetain(v50);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (*(void *)&v197.a) {
    CFRelease(*(CFTypeRef *)&v197.a);
  }
  if (v196) {
    CFRelease(v196);
  }
  uint64_t v167 = DerivedStorage;
  if (v45) {
    CFRelease(v45);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (CFPreferencesGetAppBooleanValue(@"disable_caption_repositioning", @"com.apple.coremedia", 0)) {
    goto LABEL_136;
  }
  double v51 = *MEMORY[0x1E4F1DB28];
  double v52 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  double v53 = round(a3 + a1 * 2.0);
  double v54 = round(a4 + a2 * 2.0);
  if (a5 >= -0.5 && a6 >= -0.5) {
    goto LABEL_60;
  }
  int v55 = 0;
  if (a3 > 0.0 && a4 > 0.0 && v53 > 0.0 && v54 > 0.0)
  {
    CFArrayRef v92 = theArray;
    double v93 = v53 / a3;
    double v94 = v54 / a4;
    if (v93 == 1.0 && v94 == 1.0)
    {
LABEL_60:
      int v55 = 0;
      goto LABEL_61;
    }
    double v164 = v25;
    double v165 = v23;
    CFIndex v95 = 0;
    allocatordouble b = *(CFAllocatorRef *)MEMORY[0x1E4F1DB28];
    double v96 = v53 * 0.5 + v51;
    double v163 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v97 = v54 * 0.5 + v52;
    if (theArray) {
      goto LABEL_93;
    }
LABEL_94:
    for (CFIndex i = 0; v95 < i; CFIndex i = CFArrayGetCount(v92))
    {
      CFDictionaryRef ValueAtIndex = (double *)CFArrayGetValueAtIndex(v92, v95);
      double v99 = ValueAtIndex[4];
      double v100 = ValueAtIndex[5];
      double v101 = ValueAtIndex[8] - v99;
      double v102 = ValueAtIndex[9] - v100;
      double v103 = v96 + (v99 + ValueAtIndex[6] * 0.5 - v96) * v93 - ValueAtIndex[6] * 0.5;
      double v104 = v97 + (v100 + ValueAtIndex[7] * 0.5 - v97) * v94 - ValueAtIndex[7] * 0.5;
      ValueAtIndex[4] = v103;
      ValueAtIndex[5] = v104;
      ValueAtIndex[8] = v101 + v103;
      ValueAtIndex[9] = v102 + v104;
      ++v95;
      if (!v92) {
        goto LABEL_94;
      }
LABEL_93:
      ;
    }
    int v55 = 1;
    double v25 = v164;
    double v23 = v165;
    double v51 = *(double *)&allocatorb;
    double v52 = v163;
  }
LABEL_61:
  if (v25 > 0.0 || v177 > 0.0 || v23 > 0.0 || v24 > 0.0)
  {
    char v56 = 0;
    if (a9 == 1) {
      double v57 = v25;
    }
    else {
      double v57 = v177;
    }
    double v58 = v53 - (v23 + v24);
    if (v58 > 0.0)
    {
      double v59 = v54 - (v25 + v177);
      if (v59 > 0.0)
      {
        double v60 = v52;
        *(double *)&allocatorCGFloat a = v51;
        MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
        if (MutableCopy)
        {
          CFArrayRef v62 = MutableCopy;
          double v63 = v57 + v60;
          CFTypeRef v196 = 0;
          v197.CGFloat a = 0.0;
          char v64 = fcfcr_sweepBottomUp(MutableCopy, &v197.a, v63);
          double v65 = v59 + v63;
          uint64_t Count = CFArrayGetCount(v62);
          v198.location = 0;
          v198.size_t length = Count;
          CFArraySortValues(v62, v198, (CFComparatorFunction)fcfcr_objComparatorTop, 0);
          if (Count < 1)
          {
            char v68 = 0;
          }
          else
          {
            CFIndex v67 = 0;
            char v68 = 0;
            double v69 = v59 + v63;
            do
            {
              int v70 = (CGRect *)CFArrayGetValueAtIndex(v62, v67);
              fcfcr_getElementRect(v70);
              double v73 = v71 + v72 - v65;
              if (v73 > 0.0)
              {
                v70[1].origin.double y = v70[1].origin.y - v73;
                v70[2].origin.double y = v70[2].origin.y - v73;
                double v71 = v71 - v73;
                char v68 = 1;
              }
              double v69 = fmin(v69, v71);
              ++v67;
            }
            while (Count != v67);
            if ((v68 & (Count > 1)) == 1)
            {
              double v178 = v58;
              CFIndex v74 = 1;
              do
              {
                uint64_t v75 = (CGRect *)CFArrayGetValueAtIndex(v62, v74);
                double ElementRect = fcfcr_getElementRect(v75);
                double v78 = v77;
                double v80 = v79;
                double v82 = v81;
                CFIndex v83 = 0;
                do
                {
                  int v84 = (CGRect *)CFArrayGetValueAtIndex(v62, v83);
                  double v85 = fcfcr_getElementRect(v84);
                  double v87 = v86;
                  if (fcfcr_isOverlap(ElementRect, v78, v80, v82, v85, v86, v88, v89))
                  {
                    double v90 = v82 + v78 - v87;
                    v75[1].origin.double y = v75[1].origin.y - v90;
                    v75[2].origin.double y = v75[2].origin.y - v90;
                    double v78 = v78 - v90;
                    double v69 = fmin(v69, v78);
                  }
                  ++v83;
                }
                while (v74 != v83);
                ++v74;
              }
              while (v74 != Count);
              char v68 = 1;
              double v65 = v69;
              double v91 = *(double *)&allocatora;
              double v58 = v178;
              goto LABEL_100;
            }
            double v65 = v69;
          }
          double v91 = *(double *)&allocatora;
LABEL_100:
          double v106 = v23 + v91;
          if (v65 < v63) {
            fcfcr_sweepBottomUp(v62, &v197.a, (v63 + v65) * 0.5);
          }
          char v107 = fcfcr_sweepLeftRight(v62, (double *)&v196, v106);
          double v108 = v58 + v106;
          uint64_t v109 = CFArrayGetCount(v62);
          v199.location = 0;
          v199.size_t length = v109;
          CFArraySortValues(v62, v199, (CFComparatorFunction)fcfcr_objComparatorRight, 0);
          if (v109 < 1)
          {
            char v111 = 0;
          }
          else
          {
            CFIndex v110 = 0;
            char v111 = 0;
            double v112 = v58 + v106;
            do
            {
              double v113 = (CGRect *)CFArrayGetValueAtIndex(v62, v110);
              double v114 = fcfcr_getElementRect(v113);
              double v116 = v114 + v115 - v108;
              if (v116 > 0.0)
              {
                v113[1].origin.double x = v113[1].origin.x - v116;
                v113[2].origin.double x = v113[2].origin.x - v116;
                double v114 = v114 - v116;
                char v111 = 1;
              }
              double v112 = fmin(v112, v114);
              ++v110;
            }
            while (v109 != v110);
            if ((v111 & (v109 > 1)) == 1)
            {
              CFIndex v117 = 1;
              do
              {
                uint64_t v118 = (CGRect *)CFArrayGetValueAtIndex(v62, v117);
                double v119 = fcfcr_getElementRect(v118);
                double v121 = v120;
                double v123 = v122;
                double v125 = v124;
                CFIndex v126 = 0;
                double v127 = v119 + v122;
                do
                {
                  CMTimeScale v128 = (CGRect *)CFArrayGetValueAtIndex(v62, v126);
                  double v129 = fcfcr_getElementRect(v128);
                  if (fcfcr_isOverlap(v119, v121, v123, v125, v129, v130, v131, v132))
                  {
                    v118[1].origin.double x = v118[1].origin.x - (v127 - v129);
                    v118[2].origin.double x = v118[2].origin.x - (v127 - v129);
                    double v121 = v121 - (v127 - v129);
                    double v112 = fmin(v112, v119);
                  }
                  ++v126;
                }
                while (v117 != v126);
                ++v117;
              }
              while (v117 != v109);
              char v111 = 1;
            }
            double v108 = v112;
          }
          char v56 = v68 | v107 | v111 | v64;
          if (v108 < v106) {
            fcfcr_sweepLeftRight(v62, (double *)&v196, (v106 + v108) * 0.5);
          }
          CFRelease(v62);
          goto LABEL_120;
        }
        char v56 = 0;
      }
    }
LABEL_120:
    v55 |= v56 & 1;
  }
  if (v55)
  {
    CFIndex v133 = 0;
    CFArrayRef v134 = theArray;
    allocatordouble c = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef v179 = theArray;
    if (theArray) {
      goto LABEL_133;
    }
LABEL_134:
    for (CFIndex j = 0; v133 < j; CFIndex j = CFArrayGetCount(v134))
    {
      CFStringRef v135 = (CFDictionaryRef *)CFArrayGetValueAtIndex(v134, v133);
      CFIndex v136 = CFDictionaryGetCount(v135[12]);
      if (v136)
      {
        int64_t v137 = v136;
        double v138 = *((double *)v135 + 8) - FigCaptionLayoutGetBackgroundPathRectFromDictionary(v135[12]);
        double v140 = *((double *)v135 + 9) - v139;
        if (v138 != 0.0 || v140 != 0.0)
        {
          memset(&v197, 0, sizeof(v197));
          CGAffineTransformMakeTranslation(&v197, v138, v140);
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(allocatorc, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFStringRef v142 = (const void **)malloc_type_calloc(8uLL, v137, 0x20E75177uLL);
          CFStringRef v143 = (const void **)malloc_type_calloc(8uLL, v137, 0xCDEDA0EuLL);
          CFDictionaryGetKeysAndValues(v135[12], v142, v143);
          CFIndex v144 = v142;
          CFIndex v145 = v143;
          if (v137 >= 1)
          {
            do
            {
              double v147 = *v144++;
              CGAffineTransform v146 = v147;
              uint64_t v148 = (uint64_t)*v145++;
              CFIndex v149 = (const void *)MEMORY[0x199708EC0](v148, &v197);
              CFDictionaryAddValue(Mutable, v146, v149);
              CGPathRelease((CGPathRef)v149);
              --v137;
            }
            while (v137);
          }
          free(v142);
          free(v143);
          CFDictionaryRef v150 = v135[12];
          if (v150) {
            CFRelease(v150);
          }
          v135[12] = Mutable;
          CFArrayRef v134 = v179;
        }
      }
      ++v133;
      if (!v134) {
        goto LABEL_134;
      }
LABEL_133:
      ;
    }
  }
LABEL_136:
  MEMORY[0x19970E910](*(void *)(v167 + 32));
  FigCaptionLayoutReleaseCaptionElementArray(*(const __CFArray **)(v167 + 304));
  *(void *)(v167 + 304) = theArray;
  MEMORY[0x19970E930](*(void *)(v167 + 32));
  __n128 v152 = FigCaptionLayoutClearMAXCaptionSettings((uint64_t)v183);
  if (cf) {
    CFRelease(cf);
  }
  CFIndex v154 = a13;
  CFArrayRef v153 = a14;
  long long v155 = a12;
  if (v181) {
    CFRelease(v181);
  }
  if (v180) {
    CFRelease(v180);
  }
  MEMORY[0x19970E910](*(void *)(v167 + 32), v152);
  CGSize v156 = FigCaptionLayoutCopyCaptionElementArray(*(CFArrayRef *)(v167 + 304));
  char v157 = *(unsigned char *)(v167 + 312);
  MEMORY[0x19970E930](*(void *)(v167 + 32));
  if (v156) {
    CFIndex v158 = CFArrayGetCount(v156);
  }
  else {
    CFIndex v158 = 0;
  }
  if (v158 >= a10) {
    uint64_t v159 = a10;
  }
  else {
    uint64_t v159 = v158;
  }
  if (v159 >= 1)
  {
    for (CFIndex k = 0; k != v159; ++k)
    {
      double v161 = (CGRect *)CFArrayGetValueAtIndex(v156, k);
      double v162 = v161;
      if (v155)
      {
        CGRect v200 = CGRectUnion(v161[2], v161[1]);
        CGRect v201 = CGRectIntegral(v200);
        *v155++ = CGRectInset(v201, -v162[4].origin.x, -v162[4].origin.x);
      }
      if (v154) {
        *v154++ = CGColorGetAlpha(*(CGColorRef *)&v162[3].size.height) > 0.0;
      }
      if (v153) {
        *v153++ = *(void *)&v162[4].origin.y;
      }
    }
  }
  if (a15) {
    *a15 = v157;
  }
  *a11 = v158;
  FigCaptionLayoutReleaseCaptionElementArray(v156);
}

void FigCFCaptionRendererDrawCaptionElementInContextForRectOrientation(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, unsigned int a6, CGContext *a7, int a8, BOOL *a9)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  uint64_t v14 = FigCaptionLayoutCopyCaptionElementArray(*(CFArrayRef *)(DerivedStorage + 304));
  uint64_t v128 = DerivedStorage;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  CFArrayRef v15 = v14;
  if (v14)
  {
    CFIndex Count = CFArrayGetCount(v14);
    CFArrayRef v15 = v14;
    if ((a6 & 0x80000000) != 0) {
      goto LABEL_99;
    }
  }
  else
  {
    CFIndex Count = 0;
    if ((a6 & 0x80000000) != 0)
    {
LABEL_99:
      BOOL v48 = 0;
      goto LABEL_102;
    }
  }
  if (Count <= a6) {
    goto LABEL_99;
  }
  CFArrayRef v109 = v15;
  CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v15, a6);
  double v115 = *(double *)(DerivedStorage + 72);
  CFIndex v116 = CFArrayGetCount(*((CFArrayRef *)ValueAtIndex + 14));
  CGContextSaveGState(a7);
  uint64_t v18 = (CGColor *)*((void *)ValueAtIndex + 15);
  if (v18)
  {
    long long v19 = CGColorRetain(v18);
    value.CGFloat a = 0.0;
    CFDictionaryRef v20 = *(const __CFDictionary **)(DerivedStorage + 336);
    if (v20
      && CFDictionaryGetValueIfPresent(v20, (const void *)*MEMORY[0x1E4F1F548], (const void **)&value)
      && ((Components = CGColorGetComponents(v19),
           double v22 = Components[3],
           *(void *)CFIndex v149 = 0,
           FigCFArrayGetCGFloatAtIndex(),
           v22 > 0.0)
        ? (BOOL v23 = v22 < *(double *)v149)
        : (BOOL v23 = 0),
          v23))
    {
      long long valuePtr = *(_OWORD *)Components;
      uint64_t v153 = *((void *)Components + 2);
      uint64_t v154 = *(void *)v149;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      double v24 = DeviceRGB;
      if (DeviceRGB)
      {
        CGColorRef v107 = CGColorCreate(DeviceRGB, (const CGFloat *)&valuePtr);
        if (v107)
        {
          double v108 = v107;
          CGColorRelease(v19);
          long long v19 = v108;
        }
      }
    }
    else
    {
      double v24 = 0;
    }
    CGColorSpaceRelease(v24);
    CGFloat v25 = *((double *)ValueAtIndex + 17);
    v160.origin.CGFloat x = a1;
    v160.origin.CGFloat y = a2;
    v160.size.CGFloat width = a3;
    v160.size.CGFloat height = a4;
    CGFloat y1 = CGRectGetMinY(v160);
    v161.origin.CGFloat x = a1;
    v161.origin.CGFloat y = a2;
    v161.size.CGFloat width = a3;
    v161.size.CGFloat height = a4;
    colorCGFloat a = CGRectGetMinX(v161);
    v162.origin.CGFloat x = a1;
    v162.origin.CGFloat y = a2;
    v162.size.CGFloat width = a3;
    v162.size.CGFloat height = a4;
    CGFloat MaxY = CGRectGetMaxY(v162);
    v163.origin.CGFloat x = a1;
    v163.origin.CGFloat y = a2;
    v163.size.CGFloat width = a3;
    v163.size.CGFloat height = a4;
    CGFloat MaxX = CGRectGetMaxX(v163);
    v164.origin.CGFloat x = a1;
    v164.origin.CGFloat y = a2;
    v164.size.CGFloat width = a3;
    v164.size.CGFloat height = a4;
    CGRect v165 = CGRectInset(v164, v25, v25);
    CGFloat x = v165.origin.x;
    double v138 = a1;
    CGFloat y = v165.origin.y;
    CGFloat width = v165.size.width;
    CGFloat height = v165.size.height;
    fontCGFloat a = CGRectGetMinY(v165);
    v166.origin.CGFloat x = x;
    v166.origin.CGFloat y = y;
    v166.size.CGFloat width = width;
    v166.size.CGFloat height = height;
    CGFloat MinX = CGRectGetMinX(v166);
    v167.origin.CGFloat x = x;
    v167.origin.CGFloat y = y;
    v167.size.CGFloat width = width;
    v167.size.CGFloat height = height;
    CGFloat v132 = CGRectGetMaxY(v167);
    v168.origin.CGFloat x = x;
    v168.origin.CGFloat y = y;
    a1 = v138;
    v168.size.CGFloat width = width;
    v168.size.CGFloat height = height;
    CGFloat v33 = CGRectGetMaxX(v168);
    CFMutableArrayRef Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, MinX, y1);
    CGPathAddLineToPoint(Mutable, 0, v33, y1);
    CGPathAddArcToPoint(Mutable, 0, MaxX, y1, MaxX, fonta, v25);
    CGPathAddLineToPoint(Mutable, 0, MaxX, v132);
    CGPathAddArcToPoint(Mutable, 0, MaxX, MaxY, v33, MaxY, v25);
    CGPathAddLineToPoint(Mutable, 0, MinX, MaxY);
    CGPathAddArcToPoint(Mutable, 0, colora, MaxY, colora, v132, v25);
    CGPathAddLineToPoint(Mutable, 0, colora, fonta);
    CGPathAddArcToPoint(Mutable, 0, colora, y1, MinX, y1, v25);
    CGPathCloseSubpath(Mutable);
    CGContextAddPath(a7, Mutable);
    CGColorRetain(v19);
    CGContextSetFillColorWithColor(a7, v19);
    CGColorRelease(v19);
    CGContextFillPath(a7);
    CGPathRelease(Mutable);
    CGColorRelease(v19);
  }
  CFIndex v117 = (CGFloat *)ValueAtIndex;
  CFDictionaryRef v35 = (const __CFDictionary *)*((void *)ValueAtIndex + 12);
  int64_t v36 = CFDictionaryGetCount(v35);
  CFTypeRef v37 = (const void **)malloc_type_calloc(8uLL, v36, 0x658CB02BuLL);
  BOOL v38 = (const void **)malloc_type_calloc(8uLL, v36, 0x35103200uLL);
  CFDictionaryGetKeysAndValues(v35, v37, v38);
  if (v36 >= 1)
  {
    CFTypeRef v39 = (const CGPath **)v38;
    unint64_t v40 = (CGColor **)v37;
    do
    {
      uint64_t v41 = *v39++;
      CGContextAddPath(a7, v41);
      unint64_t v42 = *v40++;
      CFArrayRef v43 = CGColorRetain(v42);
      CGContextSetFillColorWithColor(a7, v43);
      CGColorRelease(v43);
      CGContextFillPath(a7);
      --v36;
    }
    while (v36);
  }
  free(v37);
  free(v38);
  int v44 = v117;
  v169.origin.CGFloat x = a1;
  v169.origin.CGFloat y = a2;
  v169.size.CGFloat width = a3;
  v169.size.CGFloat height = a4;
  CGRect v170 = CGRectInset(v169, v117[16], v117[16]);
  CGFloat v45 = v170.origin.x;
  double v114 = v170.origin.y;
  CGFloat v111 = v170.size.height;
  CGFloat v112 = v170.size.width;
  double v46 = CGRectGetWidth(v170);
  if (v116 >= 1)
  {
    double v47 = v46;
    BOOL v48 = 0;
    CFIndex v49 = 0;
    CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F243F0];
    CFAllocatorRef v50 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CGFloat v126 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    CGFloat v127 = *MEMORY[0x1E4F1DB30];
    CFStringRef v125 = (const __CFString *)*MEMORY[0x1E4F247C0];
    CFStringRef v124 = (const __CFString *)*MEMORY[0x1E4F247B8];
    CGFloat v121 = v45;
    double v122 = v115;
    double v113 = v45;
    allocatorCGFloat a = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v129 = a8;
    while (1)
    {
      CFArrayRef theArray = (const __CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)v44 + 14), v49);
      if (!v49)
      {
        CFArrayGetValueAtIndex(theArray, 0);
        FigCFDictionaryGetCGFloatIfPresent();
      }
      if (a8 == 1)
      {
        double v51 = v114 + (double)v49 * v115 + 0.0;
      }
      else
      {
        v171.origin.CGFloat x = v45;
        v171.origin.CGFloat y = v114;
        v171.size.CGFloat height = v111;
        v171.size.CGFloat width = v112;
        double v51 = v114 + CGRectGetHeight(v171) - (double)(v49 + 1) * v115 - 0.0;
      }
      CFIndex v119 = v49;
      BOOL v120 = v48;
      CGFloat v52 = v121;
      double v53 = v122;
      double v54 = v47;
      CGRect v172 = CGRectIntegral(*(CGRect *)(&v51 - 1));
      double v55 = v172.origin.x;
      double v56 = v172.origin.y;
      CGFloat v118 = v172.size.width;
      double v122 = v172.size.height;
      CFIndex v130 = CFArrayGetCount(theArray);
      CGFloat v121 = v55;
      int v57 = 0;
      if (v130 >= 1) {
        break;
      }
LABEL_97:
      BOOL v48 = (v120 | v57) != 0;
      CFIndex v49 = v119 + 1;
      int v44 = v117;
      CGFloat v45 = v113;
      double v47 = v118;
      if (v119 + 1 == v116) {
        goto LABEL_101;
      }
    }
    CFIndex v58 = 0;
    while (1)
    {
      CFDictionaryRef v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v58);
      CFAttributedStringRef v60 = (const __CFAttributedString *)CFDictionaryGetValue(v59, @"S");
      longestEffectiveRange.location = 0;
      longestEffectiveRange.size_t length = 0;
      double v147 = 0.0;
      if (v60)
      {
        CFAttributedStringRef v61 = v60;
        CFIndex v133 = v58;
        CFIndex Length = CFAttributedStringGetLength(v60);
        if (Length)
        {
          CFIndex v63 = Length;
          if (*(unsigned char *)(v128 + 344))
          {
            *(unsigned char *)(v128 + 344) = 0;
            if (dword_1E9351410)
            {
              unsigned int v146 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v65 = v146;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                unsigned int v66 = v65;
              }
              else {
                unsigned int v66 = v65 & 0xFFFFFFFE;
              }
              if (v66)
              {
                *(_DWORD *)CFIndex v149 = 136315394;
                *(void *)&v149[4] = "fcfcr_DrawRowStrings";
                __int16 v150 = 2112;
                CFAttributedStringRef v151 = v61;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          CFStringRef Attribute = (const __CTFont *)CFAttributedStringGetAttribute(v61, 0, attrName, 0);
          double CapHeight = CTFontGetCapHeight(Attribute);
          font = Attribute;
          double XHeight = CTFontGetXHeight(Attribute);
          FigCFDictionaryGetCGFloatIfPresent();
          double v55 = v55 + v147;
          uint64_t Limit = FigCFRangeGetLimit();
          if (Limit < FigCFRangeGetLimit())
          {
            double v71 = ((v122 - CapHeight) * 0.5 + (v122 - XHeight) * 0.5) * 0.5;
            while (1)
            {
              CFIndex v72 = FigCFRangeGetLimit();
              v158.location = 0;
              v158.size_t length = v63;
              CFDictionaryRef AttributesAndLongestEffectiveRange = CFAttributedStringGetAttributesAndLongestEffectiveRange(v61, v72, v158, &longestEffectiveRange);
              if (AttributesAndLongestEffectiveRange) {
                break;
              }
LABEL_93:
              uint64_t v105 = FigCFRangeGetLimit();
              if (v105 >= FigCFRangeGetLimit()) {
                goto LABEL_94;
              }
            }
            CFDictionaryRef v74 = AttributesAndLongestEffectiveRange;
            CFAttributedStringRef v75 = CFAttributedStringCreateWithSubstring(v50, v61, longestEffectiveRange);
            CFAllocatorRef v76 = CTLineCreateWithAttributedString(v75);
            double LineWidthWithRange = FigCaptionLayoutGetLineWidthWithRange(v76, 0, longestEffectiveRange.length);
            CFBooleanRef v78 = (const __CFBoolean *)CFDictionaryGetValue(v74, @"d");
            if (v78 && CFBooleanGetValue(v78))
            {
              double v79 = v71;
              if (a8 == 1)
              {
                value.double b = 0.0;
                value.double c = 0.0;
                value.CGFloat a = 1.0;
                value.double d = -1.0;
                value.tCGFloat x = 0.0;
                value.tCGFloat y = 0.0;
                CGContextSetTextMatrix(a7, &value);
                double v79 = v122 - v71;
              }
              CGContextSetTextPosition(a7, v55, v56 + v79);
              *(_DWORD *)CFIndex v149 = 0;
              FigCFDictionaryGetInt32IfPresent();
              double v80 = (CGColor *)CFDictionaryGetValue(v74, @"e");
              CFNumberRef v81 = (const __CFNumber *)CFDictionaryGetValue(v74, @"q");
              CGColorRetain(v80);
              uint64_t v82 = *(int *)v149;
              CFIndex v83 = CFAttributedStringGetLength(v75);
              if (v82)
              {
                CFIndex v84 = v83;
                double Size = CTFontGetSize(font);
                double v86 = Size;
                if (v82 > 2)
                {
                  double v91 = Size * 0.147058824;
                  if (v86 > 60.0) {
                    double v91 = v86 * 0.147058824 * 0.5;
                  }
                  *(double *)&long long valuePtr = v91;
                  if (v81)
                  {
                    CFNumberGetValue(v81, kCFNumberCGFloatType, &valuePtr);
                    *(double *)&long long valuePtr = (*(double *)&valuePtr + *(double *)&valuePtr) * 100.0 / v86;
                  }
                  CFNumberRef v92 = CFNumberCreate(allocatora, kCFNumberCGFloatType, &valuePtr);
                  color = CGColorCreateCopyWithAlpha(v80, 0.4);
                  CGPoint TextPosition = CGContextGetTextPosition(a7);
                  double v94 = a7;
                  MutableCFDictionaryRef Copy = CFAttributedStringCreateMutableCopy(allocatora, 0, v75);
                  CGContextSetFontRenderingStyle();
                  CGContextSetShouldSmoothFonts(v94, 0);
                  CGContextSetShouldAntialias(v94, 1);
                  CGContextSetInterpolationQuality(v94, kCGInterpolationHigh);
                  CGContextSetLineJoin(v94, kCGLineJoinRound);
                  v156.location = 0;
                  v156.size_t length = v84;
                  CFAttributedStringSetAttribute(MutableCopy, v156, v125, v92);
                  v157.location = 0;
                  v157.size_t length = v84;
                  CFAttributedStringSetAttribute(MutableCopy, v157, v124, v80);
                  if (v82 != 3)
                  {
                    v159.CGFloat height = v126;
                    v159.CGFloat width = v127;
                    CGContextSetShadowWithColor(v94, v159, 4.0, color);
                  }
                  double v96 = CTLineCreateWithAttributedString(MutableCopy);
                  CTLineDraw(v96, v94);
                  if (v96) {
                    CFRelease(v96);
                  }
                  if (v82 != 3)
                  {
                    double v97 = v86 * 0.0882352941;
                    if (v86 <= 60.0) {
                      double v98 = v86 * 0.0882352941;
                    }
                    else {
                      double v98 = v86 * 0.0882352941 / 1.5;
                    }
                    double v99 = -v98;
                    if (v86 > 60.0) {
                      double v97 = v86 * 0.0882352941 / 1.5;
                    }
                    if (v129 == 1) {
                      double v100 = v97;
                    }
                    else {
                      double v100 = v99;
                    }
                    uint64_t v101 = 0;
                    CGContextSetShadowWithColor(v94, *(CGSize *)(&v100 - 1), 4.0, color);
                  }
                  CGContextSetTextPosition(v94, TextPosition.x, TextPosition.y);
                  double v102 = CTLineCreateWithAttributedString(v75);
                  CTLineDraw(v102, v94);
                  CFAllocatorRef v50 = allocatora;
                  if (v102) {
                    CFRelease(v102);
                  }
                  if (MutableCopy) {
                    CFRelease(MutableCopy);
                  }
                  if (color) {
                    CFRelease(color);
                  }
                  a7 = v94;
                  if (v92) {
                    CFRelease(v92);
                  }
                  a8 = v129;
                }
                else
                {
                  if (v82 == 2)
                  {
                    double v87 = Size * 0.0882352941;
                    if (v86 > 60.0) {
                      double v87 = v86 * 0.0882352941 / 1.5;
                    }
                    double v88 = -v87;
                    CFAllocatorRef v50 = allocatora;
                  }
                  else
                  {
                    double v88 = v126;
                    double v87 = v127;
                    BOOL v89 = v82 == 1;
                    CFAllocatorRef v50 = allocatora;
                    if (v89)
                    {
                      if (v86 <= 60.0)
                      {
                        double v87 = v86 * -0.0882352941;
                        double v88 = v86 * 0.0882352941;
                      }
                      else
                      {
                        double v87 = v86 * 0.0882352941 / -1.5;
                        double v88 = v86 * 0.0882352941 / 1.5;
                      }
                    }
                  }
                  double v103 = 0.0;
                  if (a8 == 1) {
                    double v103 = v88;
                  }
                  double v104 = v88 - v103;
                  CGContextSetShadowWithColor(a7, *(CGSize *)&v87, 4.0, v80);
                  double v90 = CTLineCreateWithAttributedString(v75);
                  CTLineDraw(v90, a7);
                  if (v90) {
LABEL_87:
                  }
                    CFRelease(v90);
                }
              }
              else
              {
                double v90 = CTLineCreateWithAttributedString(v75);
                CTLineDraw(v90, a7);
                CFAllocatorRef v50 = allocatora;
                if (v90) {
                  goto LABEL_87;
                }
              }
              CGColorRelease(v80);
            }
            if (v76) {
              CFRelease(v76);
            }
            double v55 = v55 + LineWidthWithRange;
            if (v75) {
              CFRelease(v75);
            }
            goto LABEL_93;
          }
LABEL_94:
          int v57 = 1;
        }
        CFIndex v58 = v133;
      }
      if (++v58 == v130) {
        goto LABEL_97;
      }
    }
  }
  BOOL v48 = 0;
LABEL_101:
  CGContextRestoreGState(a7);
  CFArrayRef v15 = v109;
LABEL_102:
  if (a9) {
    *a9 = v48;
  }
  FigCaptionLayoutReleaseCaptionElementArray(v15);
}

CFStringRef FigCFCaptionRendererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCFCaptionRenderer %p]", a1);
}

void captionRenderer_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterRemoveWeakListener();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 336);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)(DerivedStorage + 32))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 32) = 0;
  }
  FigCaptionLayoutClearMAXCaptionSettings(DerivedStorage + 80);
  CFIndex v5 = *(const void **)(DerivedStorage + 288);
  if (v5) {
    CFRelease(v5);
  }
  CFNumberRef v6 = *(const void **)(DerivedStorage + 296);
  if (v6) {
    CFRelease(v6);
  }
  FigCaptionLayoutReleaseCaptionElementArray(*(const __CFArray **)(DerivedStorage + 304));
  uint64_t v7 = *(const void **)(DerivedStorage + 320);
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t fcfcr_sweepBottomUp(const __CFArray *a1, double *a2, double a3)
{
  uint64_t Count = CFArrayGetCount(a1);
  *a2 = a3;
  v32.location = 0;
  v32.size_t length = Count;
  CFArraySortValues(a1, v32, (CFComparatorFunction)fcfcr_objComparatorBottom, 0);
  if (Count < 1)
  {
    char v8 = 0;
  }
  else
  {
    CFIndex v7 = 0;
    char v8 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (CGRect *)CFArrayGetValueAtIndex(a1, v7);
      fcfcr_getElementRect(ValueAtIndex);
      double v12 = a3 - v10;
      if (a3 - v10 > 0.0)
      {
        ValueAtIndex[1].origin.CGFloat y = v12 + ValueAtIndex[1].origin.y;
        ValueAtIndex[2].origin.CGFloat y = v12 + ValueAtIndex[2].origin.y;
        double v10 = v10 + v12;
        char v8 = 1;
      }
      *a2 = fmax(*a2, v11 + v10);
      ++v7;
    }
    while (Count != v7);
    if ((v8 & (Count > 1)) == 1)
    {
      CFIndex v13 = 1;
      do
      {
        uint64_t v14 = (CGRect *)CFArrayGetValueAtIndex(a1, v13);
        double ElementRect = fcfcr_getElementRect(v14);
        double v17 = v16;
        double v19 = v18;
        double v21 = v20;
        CFIndex v22 = 0;
        do
        {
          BOOL v23 = (CGRect *)CFArrayGetValueAtIndex(a1, v22);
          double v24 = fcfcr_getElementRect(v23);
          double v26 = v25;
          double v28 = v27;
          if (fcfcr_isOverlap(ElementRect, v17, v19, v21, v24, v25, v29, v27))
          {
            double v30 = v26 + v28 - v17;
            v14[1].origin.CGFloat y = v30 + v14[1].origin.y;
            v14[2].origin.CGFloat y = v30 + v14[2].origin.y;
            double v17 = v17 + v30;
            *a2 = fmax(*a2, v21 + v17);
          }
          ++v22;
        }
        while (v13 != v22);
        ++v13;
      }
      while (v13 != Count);
    }
  }
  return v8 & 1;
}

uint64_t fcfcr_sweepLeftRight(const __CFArray *a1, double *a2, double a3)
{
  uint64_t Count = CFArrayGetCount(a1);
  *a2 = a3;
  v31.location = 0;
  v31.size_t length = Count;
  CFArraySortValues(a1, v31, (CFComparatorFunction)fcfcr_objComparatorLeft, 0);
  if (Count < 1)
  {
    char v8 = 0;
  }
  else
  {
    CFIndex v7 = 0;
    char v8 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (CGRect *)CFArrayGetValueAtIndex(a1, v7);
      double ElementRect = fcfcr_getElementRect(ValueAtIndex);
      double v12 = a3 - ElementRect;
      if (a3 - ElementRect > 0.0)
      {
        ValueAtIndex[1].origin.CGFloat x = v12 + ValueAtIndex[1].origin.x;
        ValueAtIndex[2].origin.CGFloat x = v12 + ValueAtIndex[2].origin.x;
        double ElementRect = ElementRect + v12;
        char v8 = 1;
      }
      *a2 = fmax(*a2, v11 + ElementRect);
      ++v7;
    }
    while (Count != v7);
    if ((v8 & (Count > 1)) == 1)
    {
      CFIndex v13 = 1;
      do
      {
        uint64_t v14 = (CGRect *)CFArrayGetValueAtIndex(a1, v13);
        double v15 = fcfcr_getElementRect(v14);
        double v17 = v16;
        double v19 = v18;
        double v21 = v20;
        CFIndex v22 = 0;
        do
        {
          BOOL v23 = (CGRect *)CFArrayGetValueAtIndex(a1, v22);
          double v24 = fcfcr_getElementRect(v23);
          double v26 = v25;
          if (fcfcr_isOverlap(v15, v17, v19, v21, v24, v27, v25, v28))
          {
            double v29 = v24 + v26 - v15;
            v14[1].origin.CGFloat x = v29 + v14[1].origin.x;
            v14[2].origin.CGFloat x = v29 + v14[2].origin.x;
            double v15 = v15 + v29;
            *a2 = fmax(*a2, v19 + v15);
          }
          ++v22;
        }
        while (v13 != v22);
        ++v13;
      }
      while (v13 != Count);
    }
  }
  return v8 & 1;
}

uint64_t fcfcr_objComparatorBottom(CGRect *a1, CGRect *a2)
{
  fcfcr_getElementRect(a1);
  double v4 = v3;
  fcfcr_getElementRect(a2);
  if (v4 < v5) {
    return -1;
  }
  else {
    return v4 > v5;
  }
}

double fcfcr_getElementRect(CGRect *a1)
{
  CGRect v5 = CGRectUnion(a1[2], a1[1]);
  CGRect v6 = CGRectIntegral(v5);
  double v2 = -a1[4].origin.x;

  *(void *)&double result = (unint64_t)CGRectInset(v6, v2, v2);
  return result;
}

BOOL fcfcr_isOverlap(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return vabdd_f64(a1 + a3 * 0.5, a5 + a7 * 0.5) < a3 * 0.5 + a7 * 0.5 + -3.0
      && vabdd_f64(a2 + a4 * 0.5, a6 + a8 * 0.5) < a4 * 0.5 + a8 * 0.5 + -3.0;
}

uint64_t fcfcr_objComparatorTop(CGRect *a1, CGRect *a2)
{
  fcfcr_getElementRect(a1);
  double v4 = v3;
  double v6 = v5;
  fcfcr_getElementRect(a2);
  double v9 = v7 + v8;
  if (v4 + v6 > v9) {
    return -1;
  }
  else {
    return v4 + v6 < v9;
  }
}

uint64_t fcfcr_objComparatorLeft(CGRect *a1, CGRect *a2)
{
  double ElementRect = fcfcr_getElementRect(a1);
  double v4 = fcfcr_getElementRect(a2);
  if (ElementRect < v4) {
    return -1;
  }
  else {
    return ElementRect > v4;
  }
}

uint64_t fcfcr_objComparatorRight(CGRect *a1, CGRect *a2)
{
  double ElementRect = fcfcr_getElementRect(a1);
  double v5 = v4;
  double v6 = fcfcr_getElementRect(a2);
  double v8 = v6 + v7;
  if (ElementRect + v5 > v8) {
    return -1;
  }
  else {
    return ElementRect + v5 < v8;
  }
}

uint64_t FigSteeringParserStartServer()
{
  uint64_t v3 = 0;
  double v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigSteeringParserStartServer_block_invoke;
  block[3] = &unk_1E57A4468;
  void block[4] = &v3;
  if (FigSteeringParserStartServer_sFigSteeringParserServerSetupOnce != -1) {
    dispatch_once(&FigSteeringParserStartServer_sFigSteeringParserServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigSteeringParserStartServer_block_invoke(uint64_t a1)
{
  uint64_t result = FigXPCServerStart();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t FigSteeringManifest_replyingMessageHandler()
{
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

void FPSupport_InvalidateMetadataStorage(void *a1)
{
  if (a1)
  {
    double v2 = (const void *)a1[6];
    if (v2)
    {
      CFRelease(v2);
      a1[6] = 0;
    }
    uint64_t v3 = (const void *)a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    double v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    a1[3] = 0;
    a1[4] = 0;
  }
}

uint64_t FigMetadataStorageCreate(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (FigMetadataStorageGetTypeID_onceToken != -1) {
      dispatch_once_f(&FigMetadataStorageGetTypeID_onceToken, 0, (dispatch_function_t)registerFigMetadataStorage);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      double v4 = (void *)Instance;
      CFDictionaryRef v5 = CFDictionaryCreate(v2, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFArrayRef v6 = CFArrayCreate(v2, 0, 0, 0);
      CFArrayRef v7 = v6;
      if (v5)
      {
        if (v6)
        {
          v4[2] = CFRetain(v5);
          uint64_t v8 = 0;
          v4[6] = CFRetain(v7);
        }
        else
        {
          uint64_t v8 = FigSignalErrorAt();
        }
        CFRelease(v5);
        if (!v7) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v8 = FigSignalErrorAt();
        if (!v7) {
          goto LABEL_10;
        }
      }
      CFRelease(v7);
LABEL_10:
      if (v8) {
        CFRelease(v4);
      }
      else {
        *a1 = v4;
      }
      return v8;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_SetMetadataOutputCallbacks(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    *(void *)(result + 24) = a2;
    *(void *)(result + 32) = a3;
    uint64_t result = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(void *)(v3 + 40) = result;
  }
  return result;
}

uint64_t FPSupport_UpdateMetadataOutputs(void *a1, CFDictionaryRef theDict)
{
  if (a1)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (Count < 1)
      {
        keys = 0;
        uint64_t v8 = 0;
LABEL_25:
        CFArrayRef v23 = (const __CFArray *)CFRetain(Mutable);
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v8 = 0;
        if ((unint64_t)Count >> 61
          || !(8 * Count)
          || (double v9 = (const void **)malloc_type_malloc(8 * Count, 0x5CC9CBA6uLL),
              double v10 = (const void **)malloc_type_malloc(8 * Count, 0x5CC9CBA6uLL),
              uint64_t v8 = v10,
              (keys = (void **)v9) == 0))
        {
          uint64_t v22 = FigSignalErrorAt();
          CFArrayRef v23 = 0;
          free(0);
          goto LABEL_27;
        }
        if (v10)
        {
          CFRange v31 = v10;
          CFDictionaryGetKeysAndValues(theDict, v9, v10);
          uint64_t v11 = 0;
          double v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
          while (1)
          {
            CFIndex v13 = keys[v11];
            CFDictionaryRef v14 = (const __CFDictionary *)v31[v11];
            FigCFDictionaryGetDoubleIfPresent();
            CFDictionaryRef Value = CFDictionaryGetValue(v14, @"MetadatadataOutputKey_MetadataIdentifiersToOutput");
            if (FigMetadataOutputStorageGetTypeID_onceToken != -1) {
              dispatch_once_f(&FigMetadataOutputStorageGetTypeID_onceToken, 0, (dispatch_function_t)registerFigMetadataOutputStorage);
            }
            uint64_t Instance = _CFRuntimeCreateInstance();
            if (Instance)
            {
              double v17 = (void *)Instance;
              *(void *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
              if (v13) {
                CFTypeRef v18 = CFRetain(v13);
              }
              else {
                CFTypeRef v18 = 0;
              }
              v17[4] = v18;
              v17[5] = 0;
              _OWORD v17[7] = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], v12);
              if (Value) {
                CFTypeRef v19 = CFRetain(Value);
              }
              else {
                CFTypeRef v19 = 0;
              }
              v17[6] = v19;
              v17[8] = CFDictionaryCreateMutable(v6, 0, 0, v12);
              CFTypeRef v20 = CFRetain(v17);
              CFRelease(v17);
            }
            else
            {
              uint64_t v21 = FigSignalErrorAt();
              if (v21)
              {
                uint64_t v22 = v21;
                CFArrayRef v23 = 0;
                uint64_t v8 = v31;
                goto LABEL_26;
              }
              CFTypeRef v20 = 0;
            }
            CFArrayAppendValue(Mutable, v20);
            CFRelease(v20);
            if (Count == ++v11)
            {
              uint64_t v8 = v31;
              goto LABEL_25;
            }
          }
        }
        uint64_t v22 = FigSignalErrorAt();
        CFArrayRef v23 = 0;
      }
LABEL_26:
      free(keys);
    }
    else
    {
      uint64_t v22 = FigSignalErrorAt();
      CFArrayRef v23 = 0;
      uint64_t v8 = 0;
      free(0);
    }
LABEL_27:
    free(v8);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v22) {
      goto LABEL_41;
    }
    if (v23)
    {
      CFIndex v24 = CFArrayGetCount(v23);
      if (v24 >= 1)
      {
        CFIndex v25 = v24;
        for (CFIndex i = 0; i != v25; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v23, i);
          ValueAtIndex[3] = CFRetain(a1);
        }
      }
      double v28 = (const void *)a1[6];
      a1[6] = v23;
      CFRetain(v23);
      if (!v28) {
        goto LABEL_36;
      }
    }
    else
    {
      double v28 = (const void *)a1[6];
      a1[6] = 0;
      if (!v28) {
        goto LABEL_36;
      }
    }
    CFRelease(v28);
LABEL_36:
    double v29 = (const void *)a1[2];
    a1[2] = theDict;
    if (theDict) {
      CFRetain(theDict);
    }
    if (v29) {
      CFRelease(v29);
    }
    uint64_t v22 = 0;
LABEL_41:
    if (v23) {
      CFRelease(v23);
    }
    return v22;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateAndAddMetadataOutputRenderPipelinesForTrackWithID(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v9 = a2;
  CFTypeRef cf = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v5 = fpsupport_forEachMetadataOutput(a1, (uint64_t)fpsupport_addRenderPipelineToMetadataOutputApplierFn, (uint64_t)&v9);
  CFTypeRef v6 = cf;
  if (a3 && !v5)
  {
    if (cf)
    {
      CFTypeRef v7 = CFRetain(cf);
      CFTypeRef v6 = cf;
    }
    else
    {
      CFTypeRef v7 = 0;
    }
    *a3 = v7;
  }
  if (v6) {
    CFRelease(v6);
  }
  return v5;
}

uint64_t fpsupport_forEachMetadataOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    context[0] = a2;
    context[1] = a3;
    CFArrayRef v4 = *(const __CFArray **)(a1 + 48);
    if (v4)
    {
      uint64_t v7 = 0;
      v8.size_t length = CFArrayGetCount(v4);
      v8.location = 0;
      CFArrayApplyFunction(v4, v8, (CFArrayApplierFunction)fpsupport_forEachMetadataOutputApplierFn, context);
      return v7;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpsupport_addRenderPipelineToMetadataOutputApplierFn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v6 = Mutable;
  CFTypeRef cf = 0;
  keCGFloat y = 0;
  if (!Mutable)
  {
    uint64_t v12 = FigSignalErrorAt();
    CFIndex v13 = 0;
    goto LABEL_13;
  }
  CFDictionarySetValue(Mutable, @"MetadataOutput", *(const void **)(a1 + 16));
  FigCFDictionarySetInt32();
  CMTimeMakeWithSeconds(&v15, *(Float64 *)(a1 + 40), 1000000000);
  uint64_t v7 = FigSimpleRenderPipelineCreateWithCallback(v4, (uint64_t)fpsupport_simpleRenderPipelineCallback, 0, (uint64_t)v6, (uint64_t)&v15, 0, &key);
  if (v7) {
    goto LABEL_21;
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(key);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v10 + 48);
  if (!v11)
  {
    CFIndex v13 = 0;
    uint64_t v12 = 4294954514;
    goto LABEL_11;
  }
  uint64_t v7 = v11(FigBaseObject, @"SourceSampleBufferQueue", v4, &cf);
  if (v7)
  {
LABEL_21:
    uint64_t v12 = v7;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v12 = FigNotificationCenterAddWeakListener();
    if (!v12)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), key, v6);
      CFIndex v13 = key;
      goto LABEL_11;
    }
  }
  CFIndex v13 = 0;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
LABEL_13:
  if (key) {
    CFRelease(key);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (!v12) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), v13);
  }
  return v12;
}

uint64_t FPSupport_ForgetAboutMetadataOutputRenderPipeline(uint64_t a1, uint64_t a2)
{
  return fpsupport_forEachMetadataOutput(a1, (uint64_t)fpsupport_forgetAboutRenderPipelineFromMetadataOutputApplierFn, a2);
}

uint64_t fpsupport_forgetAboutRenderPipelineFromMetadataOutputApplierFn(uint64_t a1, const void *a2)
{
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 56), a2))
  {
    fpsupport_unregisterOutputFromRenderPipelineCallbacks(a1, (uint64_t)a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), a2);
  }
  return 0;
}

__CFDictionary *FPSupport_CreateMetadataOutputDataCallbackPayload(const void *a1, const void *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"MetadataOutputKey", a2);
  CFDictionarySetValue(Mutable, @"SampleBuffers", a1);
  FigCFDictionarySetInt32();
  return Mutable;
}

CFDictionaryRef FPSupport_CreateMedadataOutputFlushCallbackPayload(void *a1)
{
  values = a1;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemParameter_MetadataOutputKey, (const void **)&values, 1, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
}

uint64_t registerFigMetadataStorage()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigMetadataStorageIOSurfaceID ID = result;
  return result;
}

double fpsupport_figMetadataStorageInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fpsupport_figMetadataStorageFinalize(void *a1)
{
  if (a1) {
    FPSupport_InvalidateMetadataStorage(a1);
  }
}

uint64_t registerFigMetadataOutputStorage()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigMetadataOutputStorageIOSurfaceID ID = result;
  return result;
}

double fpsupport_FigMetadataOutputStorageInit(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fpsupport_FigMetadataOutputStorageFinalize(CFDictionaryRef *context)
{
  CFDictionaryApplyFunction(context[7], (CFDictionaryApplierFunction)fpsupport_destroyMetadataRenderPipelineCallbackContextApplierFn, context);
  CFDictionaryRef v2 = context[3];
  if (v2)
  {
    CFRelease(v2);
    _OWORD context[3] = 0;
  }
  CFDictionaryRef v3 = context[4];
  if (v3)
  {
    CFRelease(v3);
    context[4] = 0;
  }
  CFDictionaryRef v4 = context[6];
  if (v4)
  {
    CFRelease(v4);
    context[6] = 0;
  }
  CFDictionaryRef v5 = context[7];
  if (v5)
  {
    CFRelease(v5);
    context[7] = 0;
  }
  CFDictionaryRef v6 = context[2];
  if (v6)
  {
    CFRelease(v6);
    void context[2] = 0;
  }
  CFDictionaryRef v7 = context[8];
  if (v7)
  {
    CFRelease(v7);
    context[8] = 0;
  }
}

uint64_t fpsupport_destroyMetadataRenderPipelineCallbackContextApplierFn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fpsupport_unregisterOutputFromRenderPipelineCallbacks(a3, a1);
  uint64_t result = FigRenderPipelineGetFigBaseObject(a1);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v7 = v8;
    uint64_t v9 = v8 ? v7 : 0;
    uint64_t v10 = *(uint64_t (**)(uint64_t))(v9 + 24);
    if (v10)
    {
      return v10(v5);
    }
  }
  return result;
}

void fpsupport_unregisterOutputFromRenderPipelineCallbacks(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v4 + 48);
  if (v5 && !v5(FigBaseObject, @"SourceSampleBufferQueue", *MEMORY[0x1E4F1CF80], &cf))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (cf) {
    CFRelease(cf);
  }
}

void fpsupport_bufferQueueResetOutputCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v5 = (const void *)v4;
  CFDictionaryRef v6 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
  if (v6) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (!v4) {
      return;
    }
  }
  else
  {
    v6(v2, v4);
  }

  CFRelease(v5);
}

uint64_t fpsupport_forEachMetadataOutputApplierFn(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 16))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))a2)(result, *(void *)(a2 + 8));
    *(_DWORD *)(a2 + 16) = result;
  }
  return result;
}

void fpsupport_simpleRenderPipelineCallback(const __CFDictionary *a1, void *a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"MetadataOutput");
  FigCFDictionaryGetInt32IfPresent();
  if (Value)
  {
    uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      uint64_t v5 = v4;
      if (!*(void *)(v4 + 48)) {
        goto LABEL_25;
      }
      CFDictionaryRef v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 64), 0);
      if (v6)
      {
        BOOL v7 = v6;
        CFRetain(v6);
        goto LABEL_23;
      }
      CFTypeRef cf = 0;
      uint64_t v8 = *MEMORY[0x1E4F1CF80];
      if (FigMetadataFilterStorageGetTypeID_onceToken != -1) {
        dispatch_once_f(&FigMetadataFilterStorageGetTypeID_onceToken, 0, (dispatch_function_t)registerFigMetadataFilterStorage);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        int v10 = FigSampleBufferProcessorCreateForTemporalMetadataFilter(v8, *(const void **)(v5 + 48), &cf);
        if (!v10)
        {
          *(void *)(Instance + 24) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          *(_DWORD *)(Instance + 16) = 0;
          *(void *)(Instance + 32) = CFRetain(cf);
          CFTypeRef v11 = cf;
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          CFDictionaryRef v14 = *(uint64_t (**)(CFTypeRef, void, uint64_t))(v13 + 8);
          if (!v14)
          {
            BOOL v7 = 0;
            int v15 = -12782;
            goto LABEL_17;
          }
          int v15 = v14(v11, fpsupport_temporalMetadataFilterOutputCallback, Instance);
          if (!v15)
          {
            BOOL v7 = (void *)Instance;
            uint64_t Instance = 0;
            goto LABEL_17;
          }
LABEL_34:
          BOOL v7 = 0;
LABEL_17:
          if (cf) {
            CFRelease(cf);
          }
          if (Instance) {
            CFRelease((CFTypeRef)Instance);
          }
          if (v15)
          {
            if (!v7) {
              goto LABEL_30;
            }
            goto LABEL_29;
          }
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v5 + 64), 0, v7);
          if (v7)
          {
LABEL_23:
            uint64_t v16 = v7[4];
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = 0;
            }
            CFTypeRef v19 = *(void (**)(uint64_t, void *))(v18 + 16);
            if (v19) {
              v19(v16, a2);
            }
LABEL_29:
            CFRelease(v7);
            goto LABEL_30;
          }
LABEL_25:
          FigMetadataOutputReactToNewBufferFromTemporalMetadataFilter(v5, a2, 0);
LABEL_30:
          CFRelease((CFTypeRef)v5);
          return;
        }
      }
      else
      {
        int v10 = FigSignalErrorAt();
      }
      int v15 = v10;
      goto LABEL_34;
    }
  }
}

void fpsupport_temporalMetadataFilterOutputCallback(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    CFDictionaryRef v6 = (const void *)v5;
    FigMetadataOutputReactToNewBufferFromTemporalMetadataFilter(v5, a3, *(unsigned int *)(a1 + 16));
    CFRelease(v6);
  }
}

void FigMetadataOutputReactToNewBufferFromTemporalMetadataFilter(uint64_t a1, void *target, uint64_t a3)
{
  values = target;
  if (target && !CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F258], 0))
  {
    CFArrayRef v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v9 = (const void *)v8;
    int v10 = *(void (**)(uint64_t, uint64_t, CFArrayRef, uint64_t))(v7 + 24);
    if (v10) {
      BOOL v11 = v8 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (!v8)
      {
        if (!v5) {
          return;
        }
        goto LABEL_10;
      }
    }
    else
    {
      v10(v6, a3, v5, v8);
    }
    CFRelease(v9);
    if (!v5) {
      return;
    }
LABEL_10:
    CFRelease(v5);
  }
}

uint64_t registerFigMetadataFilterStorage()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigMetadataFilterStorageIOSurfaceID ID = result;
  return result;
}

void *fpsupport_FigMetadataFilterStorageInit(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void fpsupport_FigMetadataFilterStorageFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigEndpointStreamAudioEngineStartServer()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  uint64_t v1 = FigXPCServerStart();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t HandleAudioEngineRemoteMessage(uint64_t a1, void *a2)
{
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  cf[0] = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294951815;
  }
  return v6;
}

void figEndpointStreamAudioEngine_ServerDisassociateAudioEngineCallback(const void *a1)
{
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(const void *, void, void, void))(v5 + 16);
    if (v6) {
      v6(v3, 0, 0, 0);
    }
    CFRelease(v3);
  }
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t CreateCompletionCallbackParametersFromMessageAndConnection(void *a1, uint64_t a2, void *a3)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(a1, "CompletionID");
  if (!uint64)
  {
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  uint64_t v6 = uint64;
  uint64_t v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200403ED2C137uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    *uint64_t v7 = v6;
    v7[1] = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E4F20280]);
    _OWORD v8[2] = FigXPCRetain();
LABEL_5:
    *a3 = v8;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t SimpleCompletionCallback(uint64_t a1, int a2, uint64_t a3)
{
  if (a3 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "CompletionID", *(void *)a3);
    xpc_dictionary_set_int64(0, "CompletionStatus", a2);
    xpc_connection_send_message(*(xpc_connection_t *)(a3 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a3);
  return FigXPCRelease();
}

void DestroyCompletionCallbackParameters(void *a1)
{
  if (a1)
  {
    FigXPCRelease();
    free(a1);
  }
}

void *__serverXPCAudioEngine_getAPAudioSourceSharedMemoryReaderCreate_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
  if (result)
  {
    uint64_t result = dlsym(result, "APAudioSourceSharedMemoryReaderCreate");
    serverXPCAudioEngine_getAPAudioSourceSharedMemoryReaderCreate_sAudioSourceSMReaderCreate = result;
  }
  return result;
}

uint64_t SetRateAndAnchorTimeCallback(double a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "CompletionID", *(void *)a7);
    xpc_dictionary_set_int64(0, "CompletionStatus", a3);
    xpc_dictionary_set_double(0, "Rate", a1);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCFDictionary();
    xpc_connection_send_message(*(xpc_connection_t *)(a7 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a7);
  return FigXPCRelease();
}

uint64_t FigSampleBufferConsumerInputForBufferedAirPlayOutputCreate(const __CFAllocator *a1, const void *a2, const char *a3, void *a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v8 = 4294954535;
  if (a2)
  {
    if (a4)
    {
      FigSampleBufferConsumerGetClassID();
      uint64_t v8 = CMDerivedObjectCreate();
      if (!v8)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v10 = FigReentrantMutexCreate();
        *(void *)uint64_t DerivedStorage = v10;
        if (v10)
        {
          *(void *)(DerivedStorage + 8) = CFRetain(a2);
          *(void *)(DerivedStorage + 16) = FigDispatchQueueCreateWithPriority();
          uint64_t v11 = MEMORY[0x1E4F1F9F8];
          long long v12 = *MEMORY[0x1E4F1F9F8];
          *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E4F1F9F8];
          uint64_t v13 = *(void *)(v11 + 16);
          *(void *)(DerivedStorage + 40) = v13;
          *(void *)(DerivedStorage + 48) = 0;
          *(_OWORD *)(DerivedStorage + 56) = v12;
          *(void *)(DerivedStorage + 72) = v13;
          *(void *)(DerivedStorage + 80) = 0;
          if (a3) {
            CFDictionaryRef v14 = a3;
          }
          else {
            CFDictionaryRef v14 = "-";
          }
          uint64_t v8 = 0;
          *(void *)(DerivedStorage + 88) = CFStringCreateWithCString(a1, v14, 0x8000100u);
          *a4 = 0;
        }
        else
        {
          return 4294954536;
        }
      }
    }
  }
  return v8;
}

uint64_t sbcbao_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  sbcbao_dropLastSbufTracer();
  MEMORY[0x19970E2B0](*DerivedStorage);
  uint64_t v1 = (const void *)DerivedStorage[1];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = DerivedStorage[2];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)DerivedStorage[11];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[11] = 0;
  }

  return FigSimpleMutexDestroy();
}

__CFString *sbcbao_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerInputForBufferedAirPlayOutput %p>", a1);
  return Mutable;
}

uint64_t sbcbao_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

void sbcbao_dropLastSbufTracer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 48))
  {
    uint64_t v1 = DerivedStorage;
    MutableCFDictionaryRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFStringRef *)(DerivedStorage + 88));
    CFStringAppendCString(MutableCopy, "-DROPPING", 0x8000100u);
    FigEndpointStreamAudioEngineSbufTracerDebugPrint(*(CMAttachmentBearerRef *)(v1 + 48));
    uint64_t v3 = *(const void **)(v1 + 48);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 48) = 0;
    }
    if (MutableCopy)
    {
      CFRelease(MutableCopy);
    }
  }
}

uint64_t sbcbao_SendSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v30 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    CMSampleBufferGetPresentationTimeStamp(&time1, (CMSampleBufferRef)a2);
    CMSampleBufferGetDuration(&time1, (CMSampleBufferRef)a2);
    CMSampleBufferGetOutputDuration(&v30, (CMSampleBufferRef)a2);
    CMItemCount NumSamples = CMSampleBufferGetNumSamples((CMSampleBufferRef)a2);
    CMSampleBufferGetOutputPresentationTimeStamp(&time1, (CMSampleBufferRef)a2);
    CMTimeValue value = time1.value;
    CMTimeFlags flags = time1.flags;
    CMTimeScale timescale = time1.timescale;
    CMTimeEpoch epoch = time1.epoch;
    FigEndpointStreamAudioEngineSbufTracerDebugPrint((CMAttachmentBearerRef)a2);
    uint64_t v8 = (_OWORD *)(v4 + 56);
    if ((*(unsigned char *)(v4 + 68) & 1) == 0
      || (time1.CMTimeValue value = value,
          time1.CMTimeScale timescale = timescale,
          time1.CMTimeFlags flags = flags,
          time1.CMTimeEpoch epoch = epoch,
          *(_OWORD *)&time2.CMTimeValue value = *v8,
          time2.CMTimeEpoch epoch = *(void *)(v4 + 72),
          (CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      || (unint64_t v9 = *(void *)(v4 + 80), v9 <= 0x31))
    {
      CMTimeMake(&rhs, 400, 1000);
      time2.CMTimeValue value = value;
      time2.CMTimeScale timescale = timescale;
      time2.CMTimeFlags flags = flags;
      time2.CMTimeEpoch epoch = epoch;
      CMTimeAdd(&time1, &time2, &rhs);
      _OWORD *v8 = *(_OWORD *)&time1.value;
      *(void *)(v4 + 72) = time1.epoch;
      unint64_t v9 = *(void *)(v4 + 80);
    }
    *(void *)(v4 + 80) = v9 + 1;
    if ((flags & 1) != 0 && NumSamples >= 1)
    {
      uint64_t v10 = (_OWORD *)(v4 + 24);
      if (*(unsigned char *)(v4 + 36))
      {
        *(_OWORD *)&time1.CMTimeValue value = *v10;
        time1.CMTimeEpoch epoch = *(void *)(v4 + 40);
        time2.CMTimeValue value = value;
        time2.CMTimeScale timescale = timescale;
        time2.CMTimeFlags flags = flags;
        time2.CMTimeEpoch epoch = epoch;
        if (CMTimeCompare(&time1, &time2))
        {
          if (dword_1E9351430)
          {
            LODWORD(v27.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v12 = MEMORY[0x1E4F1F9F8];
          *uint64_t v10 = *MEMORY[0x1E4F1F9F8];
          *(void *)(v4 + 40) = *(void *)(v12 + 16);
        }
      }
      if ((*(unsigned char *)(v4 + 36) & 1) == 0)
      {
        *(void *)uint64_t v10 = value;
        *(_DWORD *)(v4 + 32) = timescale;
        *(_DWORD *)(v4 + 36) = flags;
        *(void *)(v4 + 40) = epoch;
      }
      *(_OWORD *)&time2.CMTimeValue value = *v10;
      time2.CMTimeEpoch epoch = *(void *)(v4 + 40);
      CMTime v27 = v30;
      CMTimeAdd(&time1, &time2, &v27);
      *uint64_t v10 = *(_OWORD *)&time1.value;
      *(void *)(v4 + 40) = time1.epoch;
    }
  }
  uint64_t v13 = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*v13);
  if (!a2)
  {
    MEMORY[0x19970E2B0](*v13);
    return a2;
  }
  CFTypeRef v14 = CMGetAttachment((CMAttachmentBearerRef)a2, @"SbufTracer", 0);
  CMItemCount v15 = CMSampleBufferGetNumSamples((CMSampleBufferRef)a2);
  CFDictionaryRef v16 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CMAttachmentBearerRef)a2, 1u);
  CFDictionaryRef v17 = v16;
  if (v16 && ((Count = CFDictionaryGetCount(v16), v14) ? (BOOL v19 = Count == 1) : (BOOL v19 = 0), v19))
  {
    sbcbao_dropLastSbufTracer();
    if (!v15)
    {
      v13[6] = CFRetain((CFTypeRef)a2);
      MEMORY[0x19970E2B0](*v13);
      a2 = 0;
LABEL_34:
      CFRelease(v17);
      return a2;
    }
  }
  else
  {
    if (v14) {
      sbcbao_dropLastSbufTracer();
    }
    CFTypeRef v20 = (const void *)v13[6];
    if (v20)
    {
      CFTypeRef v21 = CMGetAttachment(v20, @"SbufTracer", 0);
      CMSetAttachment((CMAttachmentBearerRef)a2, @"SbufTracer", v21, 0);
      sbcbao_dropLastSbufTracer();
    }
  }
  FigEndpointStreamAudioEngineSbufTracerDebugPrint((CMAttachmentBearerRef)a2);
  uint64_t v22 = v13[1];
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  CFIndex v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
  if (v25) {
    a2 = v25(v22, a2);
  }
  else {
    a2 = 4294954514;
  }
  MEMORY[0x19970E2B0](*v13);
  if (v17) {
    goto LABEL_34;
  }
  return a2;
}

uint64_t sbcbao_IsQueueAtOrAboveHighWater()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 16);
  if (!v3) {
    return 0;
  }

  return v3(v0);
}

uint64_t sbcbao_IsQueueBelowLowWater()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 24);
  if (!v3) {
    return 0;
  }

  return v3(v0);
}

uint64_t sbcbao_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t sbcbao_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t sbcbao_GetPendingSampleBufferCount()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage[1];
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 48);
  if (v4) {
    uint64_t v5 = v4(v1);
  }
  else {
    uint64_t v5 = 0;
  }
  MEMORY[0x19970E290](*DerivedStorage);
  if (DerivedStorage[6]) {
    ++v5;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v5;
}

uint64_t sbcbao_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t sbcbao_Flush()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = MEMORY[0x1E4F1F9F8];
  long long v2 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 3) = *MEMORY[0x1E4F1F9F8];
  uint64_t v3 = *(void *)(v1 + 16);
  DerivedStorage[5] = v3;
  *(_OWORD *)(DerivedStorage + 7) = v2;
  DerivedStorage[9] = v3;
  DerivedStorage[10] = 0;
  MEMORY[0x19970E290](*DerivedStorage);
  sbcbao_dropLastSbufTracer();
  MEMORY[0x19970E2B0](*DerivedStorage);
  uint64_t v4 = DerivedStorage[1];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 72);
  if (!v7) {
    return 4294954514;
  }

  return v7(v4);
}

void FigVirtualDisplayScreenRecordingPostState()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (screenRecordingMonitorGetCurrent_once != -1) {
    dispatch_once(&screenRecordingMonitorGetCurrent_once, &__block_literal_global_78);
  }
  if (screenRecordingMonitorGetCurrent_monitor_3)
  {
    MEMORY[0x19970E910](screenRecordingMonitorGetCurrent_monitor_1);
    CFIndex Count = CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0);
    int v5 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigVirtualDisplayScreenRecordingPostState_block_invoke;
    block[3] = &__block_descriptor_tmp_96;
    BOOL v3 = Count > 0;
    dispatch_async((dispatch_queue_t)screenRecordingMonitorGetCurrent_monitor_2, block);
    MEMORY[0x19970E930](screenRecordingMonitorGetCurrent_monitor_1);
  }
}

uint64_t __FigVirtualDisplayScreenRecordingPostState_block_invoke(uint64_t a1)
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(*(unsigned __int8 *)(a1 + 32));
}

uint64_t FigVirtualDisplaySessionCreateWithComponents(uint64_t a1, const void *a2, const void *a3, const void *a4, CFDictionaryRef theDict, CFTypeRef *a6)
{
  cf[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v41 = 0;
  cf[0] = 0;
  CFTypeRef v40 = 0;
  if (theDict) {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"logPrefix");
  }
  else {
    CFStringRef Value = 0;
  }
  if (checkFigVirtualDisplaySessionTrace_once != -1) {
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_48);
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!a6 || !a3 || !a4)
  {
    BOOL v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v36 = 4294955226;
    goto LABEL_42;
  }
  if (a2)
  {
    cf[0] = CFRetain(a2);
    goto LABEL_12;
  }
  uint64_t v14 = FigVirtualDisplaySourceScreenCreate(a1, (uint64_t)theDict, cf);
  if (!v14)
  {
LABEL_12:
    FigVirtualDisplaySessionGetClassID();
    uint64_t v14 = CMDerivedObjectCreate();
    if (!v14)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = 0;
      *(void *)(DerivedStorage + 64) = FigOSTransactionCreate();
      *(void *)(DerivedStorage + 8) = dispatch_queue_create("com.apple.coremedia.vdsession.stateq", 0);
      *(void *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.vdsession.notifq", 0);
      *(void *)(DerivedStorage + 24) = dispatch_queue_create("com.apple.coremedia.vdsession.sinkq", 0);
      *(void *)(DerivedStorage + 32) = dispatch_semaphore_create(0);
      *(void *)(DerivedStorage + 40) = CFRetain(cf[0]);
      *(void *)(DerivedStorage + 48) = CFRetain(a3);
      *(void *)(DerivedStorage + 56) = CFRetain(a4);
      LogPrefiCGFloat x = FVDUtilsCreateLogPrefix(Value, (unint64_t)v41);
      *(void *)(DerivedStorage + 80) = LogPrefix;
      uint64_t CMBaseObject = FigVirtualDisplaySourceGetCMBaseObject(*(void *)(DerivedStorage + 40));
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      CFTypeRef v20 = *(void (**)(uint64_t, __CFString *, CFStringRef))(v19 + 56);
      if (v20) {
        v20(CMBaseObject, @"LogPrefix", LogPrefix);
      }
      uint64_t v21 = FigVirtualDisplayProcessorGetCMBaseObject(*(void *)(DerivedStorage + 48));
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void (**)(uint64_t, __CFString *, CFStringRef))(v23 + 56);
      if (v24) {
        v24(v21, @"LogPrefix", LogPrefix);
      }
      uint64_t v25 = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(DerivedStorage + 56));
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      double v28 = *(void (**)(uint64_t, __CFString *, CFStringRef))(v27 + 56);
      if (v28) {
        v28(v25, @"LogPrefix", LogPrefix);
      }
      uint64_t v29 = *MEMORY[0x1E4F1CF80];
      uint64_t v30 = FigVirtualDisplaySourceGetCMBaseObject(*(void *)(DerivedStorage + 40));
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v31) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 0;
      }
      CGFloat v33 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v32 + 48);
      if (v33) {
        v33(v30, @"sourceType", v29, &v40);
      }
      int v34 = FigCFEqual();
      *(unsigned char *)(DerivedStorage + 109) = v34;
      if (v34)
      {
        *(unsigned char *)(DerivedStorage + 111) = 1;
        FigCFDictionaryGetBooleanIfPresent();
        FigCFDictionaryGetBooleanIfPresent();
      }
      if (theDict)
      {
        uint64_t v35 = CFDictionaryGetValue(theDict, @"clientName");
        *(void *)(DerivedStorage + 72) = v35;
        if (v35)
        {
          CFRetain(v35);
          if (*(void *)(DerivedStorage + 72)) {
            goto LABEL_41;
          }
        }
      }
      else
      {
        *(void *)(DerivedStorage + 72) = 0;
      }
      FigCopyBacktrace();
LABEL_41:
      uint64_t v36 = 0;
      *a6 = v41;
      CFTypeRef v41 = 0;
      goto LABEL_42;
    }
  }
  uint64_t v36 = v14;
  CFTypeRef v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_42:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v41) {
    CFRelease(v41);
  }
  return v36;
}

uint64_t FigVirtualDisplaySessionCreateWithConfiguration(const __CFAllocator *a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  if (theDict) {
    CFDictionaryGetValue(theDict, @"logPrefix");
  }
  if (checkFigVirtualDisplaySessionTrace_once != -1) {
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_48);
  }
  if (!theDict)
  {
    uint64_t v7 = 0;
LABEL_10:
    uint64_t v6 = @"Screen";
    goto LABEL_11;
  }
  uint64_t v6 = (__CFString *)CFDictionaryGetValue(theDict, @"sourceType");
  uint64_t v7 = (__CFString *)CFDictionaryGetValue(theDict, @"sinkType");
  if (!v6) {
    goto LABEL_10;
  }
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 != CFStringGetTypeID()) {
    goto LABEL_10;
  }
LABEL_11:
  if (!v7 || (CFTypeID v9 = CFGetTypeID(v7), v9 != CFStringGetTypeID())) {
    uint64_t v7 = @"FileWriter";
  }
  if (CFStringCompare(v6, @"Screen", 1uLL))
  {
    if (CFStringCompare(v6, @"Movie", 1uLL)) {
      uint64_t v10 = FigSignalErrorAt();
    }
    else {
      uint64_t v10 = FigVirtualDisplaySourceMovieCreate(a1, 0, theDict, &cf);
    }
    uint64_t v11 = v10;
    if (v10)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      goto LABEL_52;
    }
  }
  else
  {
    CFTypeRef cf = 0;
  }
  if (CFStringCompare(v7, @"FileWriter", 1uLL))
  {
    if (CFStringCompare(v7, @"Conduit", 1uLL)) {
      uint64_t v12 = FigSignalErrorAt();
    }
    else {
      uint64_t v12 = FigVirtualDisplaySinkConduitCreate((uint64_t)a1, 0, theDict, &v30);
    }
  }
  else
  {
    uint64_t v12 = FigVirtualDisplaySinkFileWriterCreate((uint64_t)a1, &v30);
  }
  uint64_t v11 = v12;
  if (v12)
  {
    uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    if (theDict)
    {
      value[0] = 0;
      if (CFDictionaryGetValueIfPresent(theDict, @"Destination", (const void **)value))
      {
        uint64_t v13 = value[0];
        uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(v30);
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v16 = v15 ? v15 : 0;
        CFDictionaryRef v17 = *(void (**)(uint64_t, __CFString *, void *))(v16 + 56);
        if (v17) {
          v17(CMBaseObject, @"Destination", v13);
        }
      }
      if (CFDictionaryGetValueIfPresent(theDict, @"deviceInfo", (const void **)value))
      {
        uint64_t v18 = value[0];
        uint64_t v19 = FigVirtualDisplaySinkGetCMBaseObject(v30);
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v21 = v20 ? v20 : 0;
        uint64_t v22 = *(void (**)(uint64_t, __CFString *, void *))(v21 + 56);
        if (v22) {
          v22(v19, @"deviceInfo", v18);
        }
      }
    }
    uint64_t v23 = FigVirtualDisplayProcessorCreate((uint64_t)a1, (uint64_t)theDict, &v29);
    if (v23)
    {
      uint64_t v11 = v23;
      uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      uint64_t v11 = FigVirtualDisplaySessionCreateWithComponents((uint64_t)a1, cf, v29, v30, theDict, a3);
      if (!v11) {
        goto LABEL_41;
      }
      uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    }
  }
LABEL_52:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_41:
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  return v11;
}

CFTypeRef FigVirtualDisplaySessionActivateWithSourceAndSink(const void *a1, const void *a2, CFDictionaryRef theDict)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v19 = 0;
  cf[0] = 0;
  if (theDict) {
    CFDictionaryGetValue(theDict, @"logPrefix");
  }
  if (checkFigVirtualDisplaySessionTrace_once == -1)
  {
    if (!a2) {
      goto LABEL_19;
    }
  }
  else
  {
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_48);
    if (!a2) {
      goto LABEL_19;
    }
  }
  if (!theDict || (CFStringRef Value = CFDictionaryGetValue(theDict, @"CustomProcessor"), (cf[0] = Value) == 0))
  {
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    if (FigVirtualDisplayProcessorCreate(*MEMORY[0x1E4F1CF80], (uint64_t)theDict, cf))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      goto LABEL_21;
    }
    CFTypeRef v7 = cf[0];
    goto LABEL_11;
  }
  CFTypeRef v7 = Value;
  CFRetain(Value);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != FigVirtualDisplayProcessorGetTypeID())
  {
LABEL_19:
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    goto LABEL_21;
  }
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
LABEL_11:
  if (FigVirtualDisplaySessionCreateWithComponents(v9, a1, v7, a2, theDict, &v19))
  {
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    CFTypeRef v10 = v19;
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(unsigned int (**)(CFTypeRef, CFDictionaryRef, void))(v12 + 8);
    if (v13 && !v13(v10, theDict, 0)) {
      goto LABEL_22;
    }
    uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  }
LABEL_21:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_22:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v19;
}

uint64_t FigVirtualDisplaySessionDeactivate(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (a1 && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigVirtualDisplaySessionGetTypeID()))
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    int v5 = *(void (**)(const void *))(v4 + 16);
    if (v5) {
      v5(a1);
    }
    CFRelease(a1);
    return 0;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
}

CFTypeRef FigVirtualDisplaySessionActivate(CFDictionaryRef theDict)
{
  v9[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v9[0] = 0;
  if (theDict) {
    CFDictionaryGetValue(theDict, @"logPrefix");
  }
  if (checkFigVirtualDisplaySessionTrace_once != -1) {
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_48);
  }
  if (FigVirtualDisplaySessionCreateWithConfiguration((const __CFAllocator *)*MEMORY[0x1E4F1CF80], theDict, v9))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_13;
  }
  CFTypeRef v2 = v9[0];
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = *(unsigned int (**)(CFTypeRef, CFDictionaryRef, void))(v4 + 8);
  if (!v5 || v5(v2, theDict, 0))
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
LABEL_13:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v9[0];
}

uint64_t __screenRecordingMonitorGetCurrent_block_invoke()
{
  FVDUtilsSessionServerEnabled();
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  screenRecordingMonitorGetCurrent_monitor_3 = result != 0;
  if (result)
  {
    screenRecordingMonitorGetCurrent_monitor_0 = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    screenRecordingMonitorGetCurrent_monitor_1 = FigSimpleMutexCreate();
    uint64_t result = (uint64_t)dispatch_queue_create("com.apple.coremedia.vdsessionscreenrecordingmon.notifq", 0);
    screenRecordingMonitorGetCurrent_monitor_2 = result;
  }
  return result;
}

void fvds_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage)
  {
    CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    fvds_appendSessionStartInfo(a1, Mutable);
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    FigBytePumpRelease(Mutable);
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 8);
    if (v4) {
      dispatch_release(v4);
    }
    int v5 = *(NSObject **)(DerivedStorage + 16);
    if (v5) {
      dispatch_release(v5);
    }
    uint64_t v6 = *(NSObject **)(DerivedStorage + 24);
    if (v6) {
      dispatch_release(v6);
    }
    CFTypeRef v7 = *(NSObject **)(DerivedStorage + 32);
    if (v7) {
      dispatch_release(v7);
    }
    CFTypeID v8 = *(const void **)(DerivedStorage + 40);
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = *(const void **)(DerivedStorage + 48);
    if (v9) {
      CFRelease(v9);
    }
    CFTypeRef v10 = *(const void **)(DerivedStorage + 56);
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = *(const void **)(DerivedStorage + 72);
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)(DerivedStorage + 88);
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v13 = *(void **)(DerivedStorage + 64);
    if (v13)
    {
      os_release(v13);
      *(void *)(DerivedStorage + 64) = 0;
    }
    uint64_t v14 = *(const void **)(DerivedStorage + 80);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 80) = 0;
    }
  }
}

CFStringRef fvds_copyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigVirtualDisplaySourceGetCMBaseObject(DerivedStorage[5]);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v7 = *(void (**)(uint64_t, __CFString *, uint64_t, __CFString **))(v6 + 48);
  if (v7) {
    v7(CMBaseObject, @"sourceType", v3, &v26);
  }
  uint64_t v8 = FigVirtualDisplayProcessorGetCMBaseObject(DerivedStorage[6]);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, __CFString *, uint64_t, __CFString **))(v10 + 48);
  if (v11) {
    v11(v8, @"processorType", v3, &v25);
  }
  uint64_t v12 = FigVirtualDisplaySinkGetCMBaseObject(DerivedStorage[7]);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, __CFString *, uint64_t, __CFString **))(v14 + 48);
  if (v15) {
    v15(v12, @"Type", v3, &v24);
  }
  CFAllocatorRef v16 = CFGetAllocator(a1);
  uint64_t v17 = *(unsigned int *)DerivedStorage;
  CFIndex v18 = CFGetRetainCount(a1);
  CFTypeRef v19 = v26;
  if (!v26) {
    CFTypeRef v19 = @"source";
  }
  uint64_t v21 = v24;
  uint64_t v20 = v25;
  if (!v25) {
    uint64_t v20 = @"processor";
  }
  if (!v24) {
    uint64_t v21 = @"sink";
  }
  CFStringRef v22 = CFStringCreateWithFormat(v16, 0, @"<FigVirtualDisplaySession %p state: %d retainCount: %ld> { %@ (%p) -> %@ (%p) -> %@ (%p) }", a1, v17, v18, v19, DerivedStorage[5], v20, DerivedStorage[6], v21, DerivedStorage[7]);
  if (v26) {
    CFRelease(v26);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v22;
}

uint64_t fvds_copyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"IsIdle"))
  {
    uint64_t CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(*(void *)(DerivedStorage + 48));
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v10 + 48);
    if (v12)
    {
      return v12(CMBaseObject, @"IsIdle", a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954512;
  }
}

uint64_t fvds_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"ScreenRecording"))
  {
    if (a3 && (CFTypeID v7 = CFGetTypeID(a3), v7 == CFBooleanGetTypeID()))
    {
      uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __fvds_setProperty_block_invoke;
      block[3] = &__block_descriptor_tmp_74;
      void block[4] = DerivedStorage;
      void block[5] = a3;
      void block[6] = a1;
      dispatch_sync(v8, block);
      return 0;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954516;
    }
  }
  else
  {
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954512;
  }
}

void fvds_appendSessionStartInfo(uint64_t a1, __CFString *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(const void **)(v5 + 72);
  CFTypeID v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v6)
  {
    uint64_t v8 = (void *)CFRetain(v6);
    goto LABEL_3;
  }
  CFArrayRef v10 = *(const __CFArray **)(v5 + 88);
  if (v10)
  {
    CFIndex Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      CFIndex v12 = Count;
      CFIndex v13 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 88), v13);
        memset(&v18, 0, sizeof(v18));
        dladdr(ValueAtIndex, &v18);
        if (v18.dli_fname)
        {
          uint64_t v15 = strrchr((char *)v18.dli_fname, 47);
          if (v15)
          {
            CFAllocatorRef v16 = v15 + 1;
            if (strcmp(v15 + 1, "MediaToolbox")) {
              break;
            }
          }
        }
        if (v12 == ++v13) {
          goto LABEL_12;
        }
      }
      uint64_t v8 = (void *)CFStringCreateWithCString(*v7, v16, 0x8000100u);
LABEL_3:
      CFTypeRef v9 = v8;
      if (v8) {
        goto LABEL_13;
      }
    }
  }
LABEL_12:
  CFTypeRef v9 = CFRetain(@"???");
LABEL_13:
  if (fvds_appendSessionStartInfo_once != -1) {
    dispatch_once(&fvds_appendSessionStartInfo_once, &__block_literal_global_51);
  }
  CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(*v7, (CFDateFormatterRef)fvds_appendSessionStartInfo_dateFormatter, *(CFAbsoluteTime *)(DerivedStorage + 96));
  if (CFStringGetLength(a2) >= 1) {
    CFStringAppendFormat(a2, 0, @" ");
  }
  CFStringAppendFormat(a2, 0, @"{ session %p started at %@ by %@ }", a1, StringWithAbsoluteTime, v9);
  if (v9) {
    CFRelease(v9);
  }
  if (StringWithAbsoluteTime) {
    CFRelease(StringWithAbsoluteTime);
  }
}

CFDateFormatterRef __fvds_appendSessionStartInfo_block_invoke()
{
  CFDateFormatterRef result = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0xFF3uLL);
  fvds_appendSessionStartInfo_dateFormatter = (uint64_t)result;
  return result;
}

void __fvds_setProperty_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 109))
  {
    int Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 40));
    *(unsigned char *)(*(void *)(a1 + 32) + 110) = Value;
    uint64_t v3 = *(const void **)(a1 + 48);
    if (Value)
    {
      recordingSessionRegister(v3);
    }
    else
    {
      recordingSessionUnregister(v3);
    }
  }
}

void recordingSessionRegister(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (screenRecordingMonitorGetCurrent_once != -1) {
    dispatch_once(&screenRecordingMonitorGetCurrent_once, &__block_literal_global_78);
  }
  if (screenRecordingMonitorGetCurrent_monitor_3)
  {
    if (*(unsigned char *)(DerivedStorage + 109) && *(unsigned char *)(DerivedStorage + 110))
    {
      if (*(_DWORD *)DerivedStorage == 2)
      {
        MEMORY[0x19970E910](screenRecordingMonitorGetCurrent_monitor_1);
        CFIndex Count = CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0);
        CFSetAddValue((CFMutableSetRef)screenRecordingMonitorGetCurrent_monitor_0, a1);
        if (!Count)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          dispatch_async((dispatch_queue_t)screenRecordingMonitorGetCurrent_monitor_2, &__block_literal_global_77_0);
        }
        MEMORY[0x19970E930](screenRecordingMonitorGetCurrent_monitor_1);
      }
    }
    else
    {
      uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void recordingSessionUnregister(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (screenRecordingMonitorGetCurrent_once != -1) {
    dispatch_once(&screenRecordingMonitorGetCurrent_once, &__block_literal_global_78);
  }
  if (screenRecordingMonitorGetCurrent_monitor_3)
  {
    if (*(unsigned char *)(DerivedStorage + 109))
    {
      MEMORY[0x19970E910](screenRecordingMonitorGetCurrent_monitor_1);
      CFIndex Count = CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0);
      CFSetRemoveValue((CFMutableSetRef)screenRecordingMonitorGetCurrent_monitor_0, a1);
      if (Count >= 1 && !CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        dispatch_async((dispatch_queue_t)screenRecordingMonitorGetCurrent_monitor_2, &__block_literal_global_80_0);
      }
      MEMORY[0x19970E930](screenRecordingMonitorGetCurrent_monitor_1);
    }
    else
    {
      uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t __recordingSessionRegister_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(1uLL);
}

uint64_t __recordingSessionUnregister_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(0);
}

uint64_t sessionStart(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v13 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFArrayRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (a2) {
LABEL_3:
  }
    CFRetain(a2);
LABEL_4:
  uint64_t v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionStart_block_invoke;
  block[3] = &unk_1E57A46A0;
  void block[4] = a3;
  void block[5] = a1;
  void block[6] = a2;
  void block[7] = DerivedStorage;
  dispatch_async(v8, block);
  return 0;
}

uint64_t sessionStop(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v8 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v4 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionStop_block_invoke;
  block[3] = &__block_descriptor_tmp_95_2;
  void block[4] = a1;
  dispatch_sync(v4, block);
  return 0;
}

uint64_t sessionSuspend(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v9 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage != 2)
  {
    int v9 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionSuspend_block_invoke;
  block[3] = &__block_descriptor_tmp_96_1;
  void block[4] = a1;
  dispatch_sync(v4, block);
  return 0;
}

uint64_t sessionResume(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  CFIndex v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v10 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage != 1)
  {
    int v10 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeID v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __sessionResume_block_invoke;
  block[3] = &unk_1E57A4790;
  void block[4] = &v11;
  void block[5] = a1;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t sessionGetStartStatus()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __sessionGetStartStatus_block_invoke;
  v4[3] = &unk_1E57A47B8;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sessionCopyComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v8 = *(NSObject **)(DerivedStorage + 8);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __sessionCopyComponents_block_invoke;
  v10[3] = &__block_descriptor_tmp_99_1;
  v10[4] = a2;
  void v10[5] = DerivedStorage;
  v10[6] = a3;
  v10[7] = a4;
  dispatch_sync(v8, v10);
  return 0;
}

void __sessionStart_block_invoke(void *a1)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void *)a1[5];
  CFDictionaryRef v3 = (const __CFDictionary *)a1[6];
  uint64_t v92 = 0;
  double v93 = &v92;
  uint64_t v94 = 0x2000000000;
  int v95 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v91 = 0;
  uint64_t v5 = *(__CFString **)(DerivedStorage + 80);
  if (*(_DWORD *)DerivedStorage)
  {
    unsigned int v96 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v7 = v96;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      int v9 = &stru_1EE53F4B8;
      int v10 = *(_DWORD *)DerivedStorage;
      if (v5) {
        int v9 = v5;
      }
      *(_DWORD *)double v97 = 138412802;
      *(void *)&v97[4] = v9;
      *(_WORD *)&v97[12] = 2080;
      *(void *)&v97[14] = "fvds_start";
      *(_WORD *)&v97[22] = 1024;
      LODWORD(v98) = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *((_DWORD *)v93 + 6) = -12070;
    goto LABEL_125;
  }
  *(CFAbsoluteTime *)(DerivedStorage + 96) = CFAbsoluteTimeGetCurrent();
  if (v3)
  {
    int Value = CFDictionaryGetValue(v3, @"clientName");
    if (Value)
    {
      CFIndex v12 = *(const void **)(DerivedStorage + 72);
      *(void *)(DerivedStorage + 72) = Value;
      CFRetain(Value);
      if (v12) {
        CFRelease(v12);
      }
    }
  }
  if (*(unsigned char *)(DerivedStorage + 109))
  {
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    if (screenSessionManagerGetCurrent_once != -1) {
      dispatch_once(&screenSessionManagerGetCurrent_once, &__block_literal_global_87);
    }
    if (screenSessionManagerGetCurrent_manager_3 && *(unsigned char *)(v13 + 109))
    {
      int v14 = *(__CFString **)(v13 + 80);
      MEMORY[0x19970E910](screenSessionManagerGetCurrent_manager_2);
      if (screenSessionManagerGetCurrent_manager_0)
      {
        CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        fvds_appendSessionStartInfo(screenSessionManagerGetCurrent_manager_0, Mutable);
        unsigned int v96 = 0;
        CFAllocatorRef v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v17 = v96;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = v17 & 0xFFFFFFFE;
        }
        if (!v18) {
          goto LABEL_36;
        }
        CFTypeRef v19 = &stru_1EE53F4B8;
        if (v14) {
          CFTypeRef v19 = v14;
        }
LABEL_25:
        *(_DWORD *)double v97 = 138412802;
        *(void *)&v97[4] = v19;
        *(_WORD *)&v97[12] = 2080;
        *(void *)&v97[14] = "screenSessionRegister";
        *(_WORD *)&v97[22] = 2114;
        *(void *)&long long v98 = Mutable;
        _os_log_send_and_compose_impl();
LABEL_36:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        MEMORY[0x19970E930](screenSessionManagerGetCurrent_manager_2);
        if (Mutable) {
          CFRelease(Mutable);
        }
        *((_DWORD *)v93 + 6) = -12073;
        unsigned int v96 = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v24 = v96;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v25 = v24;
        }
        else {
          unsigned int v25 = v24 & 0xFFFFFFFE;
        }
        if (v25)
        {
          uint64_t v26 = &stru_1EE53F4B8;
          *(_DWORD *)double v97 = 138413058;
          if (v5) {
            uint64_t v26 = v5;
          }
          *(void *)&v97[4] = v26;
          *(_WORD *)&v97[12] = 2080;
          *(void *)&v97[14] = "fvds_start";
          *(_WORD *)&v97[22] = 1024;
          LODWORD(v98) = 702;
          WORD2(v98) = 1024;
          *(_DWORD *)((char *)&v98 + 6) = -12073;
          _os_log_send_and_compose_impl();
        }
        goto LABEL_124;
      }
      if (*(unsigned char *)(v13 + 111))
      {
        if (CFSetGetCount((CFSetRef)screenSessionManagerGetCurrent_manager_1) >= 1)
        {
          CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
          CFSetApplyFunction((CFSetRef)screenSessionManagerGetCurrent_manager_1, (CFSetApplierFunction)fvds_appendSessionStartInfo, Mutable);
          unsigned int v96 = 0;
          uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v21 = v96;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v22 = v21;
          }
          else {
            unsigned int v22 = v21 & 0xFFFFFFFE;
          }
          if (!v22) {
            goto LABEL_36;
          }
          CFTypeRef v19 = &stru_1EE53F4B8;
          if (v14) {
            CFTypeRef v19 = v14;
          }
          goto LABEL_25;
        }
        screenSessionManagerGetCurrent_manager_0 = (uint64_t)v2;
      }
      else
      {
        CFSetAddValue((CFMutableSetRef)screenSessionManagerGetCurrent_manager_1, v2);
      }
      MEMORY[0x19970E930](screenSessionManagerGetCurrent_manager_2);
    }
    *((_DWORD *)v93 + 6) = 0;
  }
  if (*(_DWORD *)(DerivedStorage + 4))
  {
    unsigned int v96 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CFAttributedStringRef v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v76 = v96;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v77 = v76;
    }
    else {
      unsigned int v77 = v76 & 0xFFFFFFFE;
    }
    if (v77)
    {
      CFBooleanRef v78 = &stru_1EE53F4B8;
      if (v5) {
        CFBooleanRef v78 = v5;
      }
      *(_DWORD *)double v97 = 138412802;
      *(void *)&v97[4] = v78;
      *(_WORD *)&v97[12] = 2080;
      *(void *)&v97[14] = "fvds_start";
      *(_WORD *)&v97[22] = 1024;
      LODWORD(v98) = 705;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v27 = *(void *)(DerivedStorage + 40);
  uint64_t v28 = *(void *)(DerivedStorage + 48);
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
  if (!v31)
  {
    int v37 = -12782;
    *((_DWORD *)v93 + 6) = -12782;
LABEL_58:
    unsigned int v96 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    BOOL v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v39 = v96;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v40 = v39;
    }
    else {
      unsigned int v40 = v39 & 0xFFFFFFFE;
    }
    if (!v40) {
      goto LABEL_124;
    }
    CFTypeRef v41 = &stru_1EE53F4B8;
    *(_DWORD *)double v97 = 138413058;
    if (v5) {
      CFTypeRef v41 = v5;
    }
    *(void *)&v97[4] = v41;
    *(_WORD *)&v97[12] = 2080;
    *(void *)&v97[14] = "fvds_start";
    *(_WORD *)&v97[22] = 1024;
    LODWORD(v98) = 709;
    WORD2(v98) = 1024;
    *(_DWORD *)((char *)&v98 + 6) = v37;
LABEL_78:
    _os_log_send_and_compose_impl();
LABEL_124:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_125;
  }
  int v32 = v31(v27, v28);
  *((_DWORD *)v93 + 6) = v32;
  if (v32)
  {
    int v37 = v32;
    goto LABEL_58;
  }
  *(_DWORD *)(DerivedStorage + 4) = 1;
  uint64_t v33 = *(void *)(DerivedStorage + 48);
  uint64_t v34 = *(void *)(DerivedStorage + 56);
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  unint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8);
  if (!v42)
  {
    int v48 = -12782;
    *((_DWORD *)v93 + 6) = -12782;
LABEL_71:
    unsigned int v96 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CFIndex v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v50 = v96;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v51 = v50;
    }
    else {
      unsigned int v51 = v50 & 0xFFFFFFFE;
    }
    if (!v51) {
      goto LABEL_124;
    }
    CGFloat v52 = &stru_1EE53F4B8;
    *(_DWORD *)double v97 = 138413058;
    if (v5) {
      CGFloat v52 = v5;
    }
    *(void *)&v97[4] = v52;
    *(_WORD *)&v97[12] = 2080;
    *(void *)&v97[14] = "fvds_start";
    *(_WORD *)&v97[22] = 1024;
    LODWORD(v98) = 713;
    WORD2(v98) = 1024;
    *(_DWORD *)((char *)&v98 + 6) = v48;
    goto LABEL_78;
  }
  int v43 = v42(v33, v34);
  *((_DWORD *)v93 + 6) = v43;
  if (v43)
  {
    int v48 = v43;
    goto LABEL_71;
  }
  uint64_t v44 = *(void *)(DerivedStorage + 56);
  uint64_t v45 = *(void *)(DerivedStorage + 24);
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  double v53 = *(void (**)(uint64_t, uint64_t))(v47 + 64);
  if (v53) {
    v53(v44, v45);
  }
  double v54 = getenv("WIRELESSDISPLAY_DISABLE_ENCRYPTION");
  if (v54 && !strcmp(v54, "1"))
  {
    uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(DerivedStorage + 56));
    uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v70 = v69 ? v69 : 0;
    CFDictionaryRef v74 = *(void (**)(uint64_t, __CFString *, void))(v70 + 56);
    if (v74) {
      v74(CMBaseObject, @"useEncryption", *MEMORY[0x1E4F1CFC8]);
    }
  }
  *(_DWORD *)(DerivedStorage + 4) = 2;
  uint64_t v55 = *(void *)(DerivedStorage + 56);
  *(void *)double v97 = MEMORY[0x1E4F143A8];
  *(void *)&v97[8] = 0x40000000;
  *(void *)&v97[16] = __fvds_start_block_invoke;
  *(void *)&long long v98 = &unk_1E57A46C8;
  *((void *)&v98 + 1) = &v92;
  uint64_t v99 = DerivedStorage;
  uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v56) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = 0;
  }
  CFIndex v58 = *(void (**)(uint64_t, const __CFDictionary *, unsigned char *))(v57 + 8);
  if (v58) {
    v58(v55, v3, v97);
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*((_DWORD *)v93 + 6)) {
    goto LABEL_123;
  }
  *(_DWORD *)(DerivedStorage + 4) = 3;
  uint64_t v59 = *(void *)(DerivedStorage + 48);
  uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v60) {
    uint64_t v61 = v60;
  }
  else {
    uint64_t v61 = 0;
  }
  CFArrayRef v62 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v61 + 24);
  if (!v62)
  {
    *((_DWORD *)v93 + 6) = -12782;
LABEL_123:
    *(_DWORD *)os_log_type_t type = 0;
    os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
    double v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
    goto LABEL_124;
  }
  int v63 = v62(v59, v3);
  *((_DWORD *)v93 + 6) = v63;
  if (v63) {
    goto LABEL_123;
  }
  *(_DWORD *)(DerivedStorage + 4) = 4;
  CMNotificationCenterGetDefaultLocalCenter();
  int v64 = FigNotificationCenterAddWeakListener();
  *((_DWORD *)v93 + 6) = v64;
  if (v64) {
    goto LABEL_123;
  }
  *(unsigned char *)(DerivedStorage + 108) = 1;
  uint64_t v65 = *(void *)(DerivedStorage + 40);
  uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v66) {
    uint64_t v67 = v66;
  }
  else {
    uint64_t v67 = 0;
  }
  double v71 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v67 + 24);
  if (!v71)
  {
    *((_DWORD *)v93 + 6) = -12782;
    goto LABEL_123;
  }
  int v72 = v71(v65, v3);
  *((_DWORD *)v93 + 6) = v72;
  if (v72) {
    goto LABEL_123;
  }
  *(_DWORD *)(DerivedStorage + 4) = 5;
  FigCFDictionaryGetBooleanIfPresent();
  if (v91) {
    int v73 = 1;
  }
  else {
    int v73 = 2;
  }
  *(_DWORD *)uint64_t DerivedStorage = v73;
  if (*(unsigned char *)(DerivedStorage + 110)) {
    recordingSessionRegister(v2);
  }
LABEL_125:
  double v80 = v93;
  int v81 = *((_DWORD *)v93 + 6);
  if (v81)
  {
    *(_DWORD *)os_log_type_t type = 0;
    os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
    uint64_t v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    fvds_stop(v2);
    double v80 = v93;
    int v81 = *((_DWORD *)v93 + 6);
  }
  *(_DWORD *)(DerivedStorage + 104) = v81;
  int v83 = *((_DWORD *)v80 + 6);
  _Block_object_dispose(&v92, 8);
  CFIndex v84 = (const void *)a1[6];
  if (v84) {
    CFRelease(v84);
  }
  uint64_t v85 = a1[4];
  if (v85)
  {
    double v86 = *(NSObject **)(a1[7] + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __sessionStart_block_invoke_2;
    block[3] = &unk_1E57A4678;
    void block[4] = v85;
    int v88 = v83;
    dispatch_async(v86, block);
  }
}

uint64_t __sessionStart_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

intptr_t __fvds_start_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 32));
}

void fvds_handleSourceFatalError(uint64_t a1, const void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v8 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFRetain(a2);
  uint64_t v5 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvds_handleSourceFatalError_block_invoke;
  block[3] = &__block_descriptor_tmp_93_0;
  void block[4] = a2;
  dispatch_async(v5, block);
}

void fvds_stop(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 108))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 108) = 0;
  }
  switch(*(_DWORD *)(DerivedStorage + 4))
  {
    case 1:
      goto LABEL_30;
    case 2:
      goto LABEL_20;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_9;
    case 5:
      uint64_t v3 = *(void *)(DerivedStorage + 40);
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 32);
      if (v6) {
        v6(v3);
      }
LABEL_9:
      uint64_t v7 = *(void *)(DerivedStorage + 48);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      int v10 = *(void (**)(uint64_t))(v9 + 32);
      if (v10) {
        v10(v7);
      }
LABEL_14:
      uint64_t v11 = *(void *)(DerivedStorage + 56);
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 0x40000000;
      v29[2] = __fvds_stop_block_invoke;
      v29[3] = &__block_descriptor_tmp_94_1;
      v29[4] = DerivedStorage;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      int v14 = *(void (**)(uint64_t, void *))(v13 + 16);
      if (v14) {
        v14(v11, v29);
      }
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 32), 0xFFFFFFFFFFFFFFFFLL);
LABEL_20:
      uint64_t v15 = *(void *)(DerivedStorage + 56);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      unsigned int v18 = *(void (**)(uint64_t, void))(v17 + 64);
      if (v18) {
        v18(v15, 0);
      }
      uint64_t v19 = *(void *)(DerivedStorage + 48);
      uint64_t v20 = *(void *)(DerivedStorage + 56);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v22 + 16);
      if (v23) {
        v23(v19, v20);
      }
LABEL_30:
      uint64_t v24 = *(void *)(DerivedStorage + 40);
      uint64_t v25 = *(void *)(DerivedStorage + 48);
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 16);
      if (v28) {
        v28(v24, v25);
      }
      break;
    default:
      break;
  }
  *(void *)uint64_t DerivedStorage = 0;
  if (*(unsigned char *)(DerivedStorage + 109))
  {
    if (screenSessionManagerGetCurrent_once != -1) {
      dispatch_once(&screenSessionManagerGetCurrent_once, &__block_literal_global_87);
    }
    if (screenSessionManagerGetCurrent_manager_3)
    {
      MEMORY[0x19970E910](screenSessionManagerGetCurrent_manager_2);
      if ((const void *)screenSessionManagerGetCurrent_manager_0 == a1) {
        screenSessionManagerGetCurrent_manager_0 = 0;
      }
      CFSetRemoveValue((CFMutableSetRef)screenSessionManagerGetCurrent_manager_1, a1);
      MEMORY[0x19970E930](screenSessionManagerGetCurrent_manager_2);
    }
  }
  if (*(unsigned char *)(DerivedStorage + 110)) {
    recordingSessionUnregister(a1);
  }
}

uint64_t __screenSessionManagerGetCurrent_block_invoke()
{
  screenSessionManagerGetCurrent_manager_3 = FVDUtilsSessionServerEnabled();
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  screenSessionManagerGetCurrent_manager_3 = result != 0;
  if (result)
  {
    screenSessionManagerGetCurrent_manager_2 = FigSimpleMutexCreate();
    uint64_t result = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    screenSessionManagerGetCurrent_manager_1 = result;
  }
  return result;
}

void __fvds_handleSourceFatalError_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

intptr_t __fvds_stop_block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 32));
}

void __sessionStop_block_invoke(uint64_t a1)
{
}

void __sessionSuspend_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage == 2)
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = *(void *)(DerivedStorage + 40);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t))(v6 + 40);
    if (v7) {
      v7(v4);
    }
    uint64_t v8 = *(void *)(v3 + 48);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t))(v10 + 40);
    if (v11) {
      v11(v8);
    }
    uint64_t v12 = *(void *)(v3 + 56);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t))(v14 + 32);
    if (v15) {
      v15(v12);
    }
    *(_DWORD *)uint64_t v3 = 1;
    if (*(unsigned char *)(v3 + 110))
    {
      recordingSessionUnregister(v1);
    }
  }
}

void __sessionResume_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (*(_DWORD *)DerivedStorage == 1)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 56);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t))(v7 + 40);
    if (v9)
    {
      int v10 = v9(v5);
      if (v10 != -12782 && v10 != 0) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *(void *)(v4 + 48);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v14 = v13 ? v13 : 0;
    uint64_t v16 = *(uint64_t (**)(uint64_t))(v14 + 48);
    if (v16)
    {
      int v10 = v16(v12);
      if (v10 != -12782 && v10 != 0)
      {
LABEL_11:
        int v15 = v10;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_31:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_32;
      }
    }
    uint64_t v18 = *(void *)(v4 + 40);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v20 + 48);
    if (v21)
    {
      int v22 = v21(v18);
      if (v22 != -12782)
      {
        int v15 = v22;
        if (v22)
        {
          uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          goto LABEL_31;
        }
      }
    }
    *(_DWORD *)uint64_t v4 = 2;
    if (*(unsigned char *)(v4 + 110)) {
      recordingSessionRegister(v2);
    }
    int v15 = 0;
  }
  else
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v15 = -12070;
  }
LABEL_32:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v15;
}

uint64_t __sessionGetStartStatus_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 104);
  return result;
}

void *__sessionCopyComponents_block_invoke(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)result[4];
  if (v2)
  {
    uint64_t result = *(void **)(result[5] + 40);
    if (result)
    {
      uint64_t result = CFRetain(result);
      uint64_t v2 = (void *)v1[4];
    }
    *uint64_t v2 = result;
  }
  uint64_t v3 = (void *)v1[6];
  if (v3)
  {
    uint64_t result = *(void **)(v1[5] + 48);
    if (result)
    {
      uint64_t result = CFRetain(result);
      uint64_t v3 = (void *)v1[6];
    }
    *uint64_t v3 = result;
  }
  uint64_t v4 = (void *)v1[7];
  if (v4)
  {
    uint64_t result = *(void **)(v1[5] + 56);
    if (result)
    {
      uint64_t result = CFRetain(result);
      uint64_t v4 = (void *)v1[7];
    }
    *uint64_t v4 = result;
  }
  return result;
}

uint64_t FigTTMLDocumentWriterCreateRegionBuilder(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterRegionBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRegionBuilder_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef figTTMLDocumentWriterRegionBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterRegionBuilder[%p]", a1);
}

uint64_t figTTMLDocumentWriterRegionBuilder_StartElement(uint64_t a1, int a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E4F1CF80], a2, *(void *)(DerivedStorage + 16), (uint64_t *)&cf);
  if (v4)
  {
    CFTypeRef v7 = cf;
    if (!cf) {
      return v4;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf) {
      CFTypeRef v6 = CFRetain(cf);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(DerivedStorage + 8) = v6;
  }
  CFTypeRef v7 = cf;
  *(void *)(DerivedStorage + 16) = cf;
  if (v7) {
LABEL_9:
  }
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterRegionBuilder_EndElement(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 16);
  if (v3 != *(void *)(DerivedStorage + 8))
  {
LABEL_45:
    uint64_t timescale = 0;
    *(void *)(DerivedStorage + 16) = FigTTMLDocumentWriterElementGetParentElement(v3);
    return timescale;
  }
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v29 = (uint64_t)Mutable;
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v30 = *MEMORY[0x1E4F1FA20];
  long long v31 = v7;
  long long v32 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(v4 + 8), (uint64_t (*)(CFArrayRef *, uint64_t))updateContextTimeRange, 0, addExplicitCaptionRegionToDictionary, (uint64_t)&v29);
  if (!FigCFDictionaryGetCount()
    || (int v38 = 9,
        CFArrayRef v36 = 0,
        uint64_t v37 = 0x800000007,
        FigTTMLDocumentWriterElementInsertBeforeIfNotExist(*(CFArrayRef **)(v4 + 8), (uint64_t)&v37, 3, &v36),
        !v36))
  {
    uint64_t timescale = 0;
    if (!Mutable) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *(_OWORD *)&context.CMTimeValue value = (unint64_t)v36;
  CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)addRegionElement, &context);
  uint64_t timescale = context.timescale;
  if (Mutable) {
LABEL_7:
  }
    CFRelease(Mutable);
LABEL_8:
  if (timescale) {
    return timescale;
  }
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v36 = 0;
  uint64_t v37 = 0;
  unint64_t v35 = 0;
  CFTypeRef cf = 0;
  FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(v9 + 8), 0, 0, copyRootContainerRegion, (uint64_t)&v37);
  if (!v37)
  {
    uint64_t timescale = 0;
    goto LABEL_33;
  }
  uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, void, uint64_t, const __CFArray **))(v12 + 48);
  if (v13)
  {
    uint64_t v14 = v13(CMBaseObject, *MEMORY[0x1E4F20078], v5, &v36);
    if (v14)
    {
LABEL_32:
      uint64_t timescale = v14;
      goto LABEL_33;
    }
    CFArrayRef v15 = v36;
    unint64_t v16 = *(void *)(v9 + 8);
    uint64_t v29 = v37;
    long long v30 = v16;
    v40.size_t length = CFArrayGetCount(v36);
    v40.location = 0;
    CFArrayApplyFunction(v15, v40, (CFArrayApplierFunction)mapAndAddRootContainerRegionAttribute, &v29);
    uint64_t timescale = DWORD2(v30);
    if (!DWORD2(v30))
    {
      uint64_t v17 = FigCaptionRegionGetCMBaseObject();
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, void, uint64_t, unint64_t *))(v19 + 48);
      if (v20) {
        v20(v17, *MEMORY[0x1E4F20090], v5, &v35);
      }
      uint64_t v21 = FigCaptionRegionGetCMBaseObject();
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v23 + 48);
      if (v24)
      {
        v24(v21, *MEMORY[0x1E4F20008], v5, &cf);
        unint64_t v25 = (unint64_t)cf;
      }
      else
      {
        unint64_t v25 = 0;
      }
      if (!(v35 | v25))
      {
        uint64_t timescale = 0;
        goto LABEL_38;
      }
      if (v35 && v25)
      {
        uint64_t v26 = *(void *)(v9 + 8);
        CMTime context = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        uint64_t v14 = FigTTMLDocumentWriterMapWidthAndHeightPropertiesToExtentAttributeAndSet((const void *)v35, (const void *)v25, &context, v26);
      }
      else
      {
        uint64_t v14 = FigSignalErrorAt();
      }
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t timescale = 4294954514;
  }
LABEL_33:
  if (v35) {
    CFRelease((CFTypeRef)v35);
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_38:
  if (v36) {
    CFRelease(v36);
  }
  if (v37) {
    CFRelease((CFTypeRef)v37);
  }
  if (!timescale)
  {
    uint64_t v27 = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 8), *(void *)DerivedStorage);
    if (v27) {
      return v27;
    }
    uint64_t v3 = *(void *)(DerivedStorage + 16);
    goto LABEL_45;
  }
  return timescale;
}

uint64_t figTTMLDocumentWriterRegionBuilder_AddCaptionData(uint64_t a1, const void *a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(void *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionBuilder_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(void *)(DerivedStorage + 16), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionBuilder_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2]) {
    return 4294950721;
  }
  uint64_t v3 = *DerivedStorage;

  return FigTTMLDocumentWriterFlush(v3);
}

uint64_t updateContextTimeRange(uint64_t a1, uint64_t a2)
{
  CFStringRef Attribute = FigTTMLDocumentWriterElementGetAttribute(a1, @"begin");
  uint64_t v5 = FigTTMLDocumentWriterElementGetAttribute(a1, @"end");
  if (Attribute)
  {
    CFTypeRef v6 = v5;
    CFTypeID v7 = CFGetTypeID(Attribute);
    if (v7 == CFDictionaryGetTypeID() && v6 != 0)
    {
      CFTypeID v9 = CFGetTypeID(v6);
      if (v9 == CFDictionaryGetTypeID())
      {
        memset(&v16, 0, sizeof(v16));
        CMTimeMakeFromDictionary(&v16, (CFDictionaryRef)Attribute);
        memset(&v15, 0, sizeof(v15));
        CMTimeMakeFromDictionary(&v15, (CFDictionaryRef)v6);
        if ((v16.flags & 0x1D) == 1 && (v15.flags & 0x1D) == 1)
        {
          memset(&v14, 0, sizeof(v14));
          CMTime start = v16;
          CMTime v12 = v15;
          CMTimeRangeFromTimeToTime(&v14, &start, &v12);
          long long v10 = *(_OWORD *)&v14.start.epoch;
          *(_OWORD *)(a2 + 8) = *(_OWORD *)&v14.start.value;
          *(_OWORD *)(a2 + 24) = v10;
          *(_OWORD *)(a2 + 40) = *(_OWORD *)&v14.duration.timescale;
        }
      }
    }
  }
  return 0;
}

uint64_t addExplicitCaptionRegionToDictionary(uint64_t a1, uint64_t a2)
{
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
  if (v6)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    v6(CMBaseObject, *MEMORY[0x1E4F1FF20], *MEMORY[0x1E4F1CF80], &v31);
    if (v31)
    {
      uint64_t v8 = *MEMORY[0x1E4F1FFF8];
      uint64_t v9 = *MEMORY[0x1E4F20018];
      uint64_t v10 = *MEMORY[0x1E4F1FFE0];
      while (1)
      {
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v11 = FigCaptionRegionGetCMBaseObject();
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CMTimeRange v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 48);
        if (v14) {
          v14(v11, v8, v7, &cf);
        }
        if (FigCFEqual())
        {
          if (v30)
          {
            CFRelease(v30);
            CFTypeRef v30 = 0;
          }
          uint64_t v15 = FigCaptionRegionGetCMBaseObject();
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v17 + 48);
          if (v18) {
            v18(v15, v9, v7, &v30);
          }
          if (v30) {
            break;
          }
        }
        *(void *)&v27[0] = 0;
        uint64_t v19 = FigCaptionRegionGetCMBaseObject();
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, long long *))(v21 + 48);
        if (v22) {
          v22(v19, v10, v7, v27);
        }
        if (v31) {
          CFRelease(v31);
        }
        CFTypeRef v31 = *(CFTypeRef *)&v27[0];
        if (!*(void *)&v27[0]) {
          goto LABEL_40;
        }
      }
      if (v31)
      {
        int Value = CFDictionaryGetValue(*(CFDictionaryRef *)a2, v30);
        if (Value)
        {
          CFTypeRef v24 = CFRetain(Value);
          CFTypeRef v29 = v24;
          if (v24)
          {
LABEL_39:
            long long v25 = *(_OWORD *)(a2 + 24);
            v27[0] = *(_OWORD *)(a2 + 8);
            v27[1] = v25;
            v27[2] = *(_OWORD *)(a2 + 40);
            FigTTMLDocumentWriterRegionTimelineAddRegionSlice((uint64_t)v24, v27, (uint64_t)v31);
            goto LABEL_40;
          }
        }
        else
        {
          CFTypeRef v29 = 0;
        }
        if (FigTTMLDocumentWriterRegionTimelineCreate(&v29)) {
          goto LABEL_40;
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)a2, v30, v29);
        CFTypeRef v24 = v29;
        goto LABEL_39;
      }
    }
  }
LABEL_40:
  if (cf) {
    CFRelease(cf);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v31) {
    CFRelease(v31);
  }
  return 0;
}

void addRegionElement(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v6 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E4F1CF80], 10, *(void *)a3, (uint64_t *)&cf);
  if (v6
    || (MEMORY[0x19970EE10](&initRegionPropertyToAttributeMapOnce, initRegionPropertyToAttributeMap),
        (int v6 = FigTTMLDocumentWriterRegionTimelineWriteAttributesAndSetElements((uint64_t)a2, (uint64_t)cf, sExplicitRegionPropertyToAttributeMap)) != 0))
  {
    int v11 = v6;
LABEL_30:
    *(_DWORD *)(a3 + 8) = v11;
    goto LABEL_24;
  }
  CFTypeRef v7 = cf;
  long long v18 = 0uLL;
  int v8 = FigTTMLDocumentWriterRegionTimelineCopyProperty((uint64_t)a2, (CFTypeRef)*MEMORY[0x1E4F20090], (void *)&v18 + 1);
  if (v8
    || (int v8 = FigTTMLDocumentWriterRegionTimelineCopyProperty((uint64_t)a2, (CFTypeRef)*MEMORY[0x1E4F20008], &v18)) != 0)
  {
    int v11 = v8;
    goto LABEL_12;
  }
  FigGeometryDimensionMake();
  uint64_t v9 = FigGeometryDimensionCopyAsDictionary();
  uint64_t v10 = (const void *)v9;
  if (v18 == 0)
  {
    int v11 = 0;
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (*((void *)&v18 + 1))
  {
    if ((void)v18) {
      goto LABEL_8;
    }
  }
  else
  {
    FigCaptionDynamicStyleCreate();
    if ((void)v18) {
      goto LABEL_8;
    }
  }
  FigCaptionDynamicStyleCreate();
LABEL_8:
  memset(&v17, 0, sizeof(v17));
  FigTTMLDocumentWriterRegionTimelineGetTimeRange(a2, &v17);
  *(_OWORD *)&v14.start.CMTimeValue value = *(_OWORD *)&v17.start.value;
  v14.start.CMTimeEpoch epoch = v17.start.epoch;
  int v11 = FigTTMLDocumentWriterMapWidthAndHeightPropertiesToExtentAttributeAndSet(*((const void **)&v18 + 1), (const void *)v18, &v14.start, (uint64_t)v7);
  if (v10) {
LABEL_11:
  }
    CFRelease(v10);
LABEL_12:
  if ((void)v18) {
    CFRelease((CFTypeRef)v18);
  }
  if (*((void *)&v18 + 1)) {
    CFRelease(*((CFTypeRef *)&v18 + 1));
  }
  if (v11) {
    goto LABEL_30;
  }
  if (FigTTMLDocumentWriterRegionTimelineIsAnimated((uint64_t)a2))
  {
    memset(&v17, 0, sizeof(v17));
    FigTTMLDocumentWriterRegionTimelineGetTimeRange(a2, &v17);
    *(_OWORD *)&v14.start.CMTimeValue value = *(_OWORD *)&v17.start.value;
    v14.start.CMTimeEpoch epoch = v17.start.epoch;
    CFDictionaryRef v12 = CMTimeCopyAsDictionary(&v14.start, v5);
    CMTimeRange v14 = v17;
    CMTimeRangeGetEnd(&time, &v14);
    CFDictionaryRef v13 = CMTimeCopyAsDictionary(&time, v5);
    FigTTMLDocumentWriterElementSetAttribute((uint64_t)cf, @"begin", v12);
    FigTTMLDocumentWriterElementSetAttribute((uint64_t)cf, @"end", v13);
  }
  else
  {
    CFDictionaryRef v12 = 0;
    CFDictionaryRef v13 = 0;
  }
  FigTTMLDocumentWriterElementAddChildElement(*(void *)a3, cf);
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
}

void initRegionPropertyToAttributeMap()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20018], FigTTMLDocumentWriterMapPropertyToAttribute_Identifier);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20070], FigTTMLDocumentWriterMapPropertyToAttribute_Position);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1FFD8], FigTTMLDocumentWriterMapPropertyToAttribute_ClipOverflow);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20080], FigTTMLDocumentWriterMapPropertyToAttribute_ShowBackground);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20060], FigTTMLDocumentWriterMapPropertyToAttribute_Opacity);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20000], FigTTMLDocumentWriterMapPropertyToAttribute_ForcedDisplay);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1FFC8], FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20098], FigTTMLDocumentWriterMapPropertyToAttribute_WritingMode);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1FFE8], FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAlign);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20010], FigTTMLDocumentWriterMapPropertyToAttribute_Hidden);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20050], FigTTMLDocumentWriterMapPropertyToAttribute_Invisible);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20068], FigTTMLDocumentWriterMapPropertyToAttribute_Padding);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F200A0], FigTTMLDocumentWriterMapPropertyToAttribute_ZIndex);
  sExplicitRegionPropertyToAttributeMap = (uint64_t)Mutable;
  uint64_t v3 = CFDictionaryCreateMutable(v0, 0, v1, 0);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E4F1FFF0], FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAspectRatio);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E4F1FFB0], FigTTMLDocumentWriterMapPropertyToAttribute_ActiveArea);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E4F1FFD0], FigTTMLDocumentWriterMapPropertyToAttribute_CellResolution);
  sRootContainerRegionPropertyToAttributeMap = (uint64_t)v3;
}

uint64_t copyRootContainerRegion(uint64_t a1, uint64_t a2)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
  if (!v6 || (uint64_t v7 = *MEMORY[0x1E4F1CF80], v6(CMBaseObject, *MEMORY[0x1E4F1FF20], *MEMORY[0x1E4F1CF80], &v21), !v21))
  {
LABEL_24:
    CFTypeRef v18 = 0;
    if (!a2) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v8 = *MEMORY[0x1E4F1FFE0];
  uint64_t v9 = *MEMORY[0x1E4F1FFF8];
  while (1)
  {
    uint64_t v20 = 0;
    uint64_t v10 = FigCaptionRegionGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFDictionaryRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t, const void **))(v12 + 48);
    if (v13) {
      v13(v10, v8, v7, &v20);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v14 = FigCaptionRegionGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CMTimeRange v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v16 + 48);
    if (v17) {
      v17(v14, v9, v7, &cf);
    }
    if (!v20 && !FigCFEqual()) {
      break;
    }
    if (v21) {
      CFRelease(v21);
    }
    CFTypeRef v21 = v20;
    if (!v20) {
      goto LABEL_24;
    }
  }
  CFTypeRef v18 = v21;
  CFTypeRef v21 = 0;
  if (a2)
  {
LABEL_25:
    *(void *)a2 = v18;
    a2 = 2;
    CFTypeRef v18 = 0;
  }
LABEL_26:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return a2;
}

void mapAndAddRootContainerRegionAttribute(const void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (!*(_DWORD *)(a2 + 16))
  {
    uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, const void *, void, CFTypeRef *))(v6 + 48);
    if (v7)
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      int v9 = v7(CMBaseObject, a1, *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v10 = cf;
      if (v9) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = cf == 0;
      }
      if (v11)
      {
        if (!v9)
        {
LABEL_18:
          if (v10) {
            CFRelease(v10);
          }
          return;
        }
        CFDictionaryRef Mutable = 0;
      }
      else
      {
        MEMORY[0x19970EE10](&initRegionPropertyToAttributeMapOnce, initRegionPropertyToAttributeMap);
        int Value = (uint64_t (*)(CFTypeRef, const __CFDictionary *))CFDictionaryGetValue((CFDictionaryRef)sRootContainerRegionPropertyToAttributeMap, a1);
        if (!Value) {
          goto LABEL_17;
        }
        CFDictionaryRef v13 = Value;
        CFDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        int v9 = v13(cf, Mutable);
        if (!v9)
        {
          CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement, *(void **)(a2 + 8));
          if (!Mutable) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
      CFDictionaryRef Mutable = 0;
      int v9 = -12782;
    }
    *(_DWORD *)(a2 + 16) = v9;
    if (Mutable) {
LABEL_16:
    }
      CFRelease(Mutable);
LABEL_17:
    CFTypeRef v10 = cf;
    goto LABEL_18;
  }
}

void setAttributeToElement(const void *a1, const void *a2, uint64_t a3)
{
}

uint64_t CreatePropertyStore(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, NSObject *a6, NSObject *a7, uint64_t a8, const void *a9, void *a10)
{
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (AssetPropertyStoreGetTypeID_sRegisterAssetPropertyStoreTypeOnce != -1) {
    dispatch_once_f(&AssetPropertyStoreGetTypeID_sRegisterAssetPropertyStoreTypeOnce, &AssetPropertyStoreGetTypeID_sAssetPropertyStoreID, (dispatch_function_t)RegisterAssetPropertyStoreType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v19 = (void *)Instance;
    CFArrayRef v20 = (const __CFArray *)CFRetain(a1);
    v19[7] = v20;
    CFIndex Count = CFArrayGetCount(v20);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v17, Count, MEMORY[0x1E4F1D530], 0);
    v19[8] = Mutable;
    if (Mutable
      && (CFMutableArrayRef v23 = CFArrayCreateMutable(v17, 0, 0), (v19[10] = v23) != 0)
      && (uint64_t v24 = FigDispatchQueueCreateWithPriority(), (v19[2] = v24) != 0))
    {
      v19[13] = a8;
      v19[14] = CFRetain(a9);
      v19[11] = a6;
      dispatch_retain(a6);
      v19[12] = a7;
      dispatch_retain(a7);
      v19[3] = CFRetain(a2);
      v19[4] = CFRetain(a3);
      v19[5] = CFRetain(a4);
      v19[6] = CFRetain(a5);
      *a10 = v19;
      return 0;
    }
    else
    {
      uint64_t v26 = FigSignalErrorAt();
      CFRelease(v19);
      return v26;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t InitializeProperty(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = a5;
  uint64_t v11 = 0;
  v6[0] = a1;
  v6[1] = a2;
  int v7 = a3;
  int v8 = a4;
  uint64_t v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v6, (dispatch_function_t)PerformInitializeProperty);
  return v11;
}

const void *PerformInitializeProperty(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t result = (const void *)AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v6);
  int v3 = (int)result;
  if (!result)
  {
    uint64_t v4 = v6;
    *uint64_t v6 = *(void *)(a1 + 16);
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 24);
    if (v5)
    {
      CFTypeRef v5 = CFRetain(v5);
      uint64_t v4 = v6;
    }
    v4[1] = v5;
    uint64_t result = *(const void **)(a1 + 32);
    if (result)
    {
      uint64_t result = CFRetain(result);
      uint64_t v4 = v6;
    }
    v4[2] = result;
  }
  *(_DWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t QueryProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, void *a5, void *a6)
{
  memset(v16, 0, sizeof(v16));
  v14[0] = a1;
  v14[1] = a2;
  *(_OWORD *)CFTypeRef cf = 0u;
  LOBYTE(v16[1]) = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v14, (dispatch_function_t)PerformQueryProperty);
  if (a3) {
    *a3 = cf[0];
  }
  if (a4) {
    *a4 = HIDWORD(cf[0]);
  }
  if (a5)
  {
    CFTypeRef v10 = cf[1];
    if (cf[1]) {
      CFTypeRef v10 = CFRetain(cf[1]);
    }
    *a5 = v10;
  }
  if (a6)
  {
    CFTypeRef v11 = v16[0];
    if (v16[0]) {
      CFTypeRef v11 = CFRetain(v16[0]);
    }
    *a6 = v11;
  }
  uint64_t v12 = HIDWORD(v16[1]);
  TearDownFetchPropertyContext(v14);
  return v12;
}

const void *PerformQueryProperty(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t result = (const void *)AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v6);
  int v3 = (int)result;
  if (!result)
  {
    uint64_t v4 = v6;
    *(_DWORD *)(a1 + 20) = v6[1];
    CFTypeRef v5 = (CFTypeRef)*((void *)v4 + 1);
    if (v5)
    {
      CFTypeRef v5 = CFRetain(v5);
      uint64_t v4 = v6;
    }
    *(void *)(a1 + 24) = v5;
    *(_DWORD *)(a1 + 16) = *v4;
    uint64_t result = (const void *)*((void *)v4 + 2);
    if (result)
    {
      uint64_t result = CFRetain(result);
      uint64_t v4 = v6;
    }
    *(void *)(a1 + 32) = result;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)v4 + 32);
  }
  *(_DWORD *)(a1 + 44) = v3;
  return result;
}

void TearDownFetchPropertyContext(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  int v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = a1[6];
  if (v4)
  {
    dispatch_release(v4);
    a1[6] = 0;
  }
}

uint64_t PropertyStoreSetComplainForSyncQueries(uint64_t result, char a2)
{
  *(unsigned char *)(result + 136) = a2;
  return result;
}

uint64_t PropertyStoreGetComplainForSyncQueries(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

uint64_t ObtainPropertySync(uint64_t a1, uint64_t a2, void *a3, CFStringRef *a4)
{
  *(_OWORD *)CFTypeRef cf = 0u;
  context[0] = a1;
  context[1] = a2;
  group[0] = 0;
  long long v13 = 0u;
  LOBYTE(cf[1]) = 0;
  group[1] = (dispatch_group_t)1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformObtainProperty);
  uint64_t v8 = HIDWORD(cf[1]);
  if (!HIDWORD(cf[1]))
  {
    int v9 = v13;
    if (v13 == 1)
    {
      if (a4 && *(unsigned char *)(a1 + 136)) {
        *a4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Main thread blocked by synchronous property query on not-yet-loaded property (%@) for HTTP(S) asset. This could have been a problem if this asset were being read from a slow network.", a2);
      }
      dispatch_group_wait(group[0], 0xFFFFFFFFFFFFFFFFLL);
      dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformQueryProperty);
      if (HIDWORD(cf[1]))
      {
        uint64_t v8 = 0;
        goto LABEL_12;
      }
      int v9 = v13;
    }
    uint64_t v8 = DWORD1(v13);
    if (v9 == 2)
    {
      CFTypeRef v10 = cf[0];
      if (cf[0]) {
        CFTypeRef v10 = CFRetain(cf[0]);
      }
      *a3 = v10;
    }
  }
LABEL_12:
  TearDownFetchPropertyContext(context);
  return v8;
}

uint64_t PerformObtainProperty(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t result = AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v14);
  if (result) {
    goto LABEL_20;
  }
  int v3 = v14;
  if (v14[32])
  {
    if (*(_DWORD *)(a1 + 56) == 1)
    {
      uint64_t result = 4294951201;
      goto LABEL_20;
    }
    if (*(_DWORD *)v14) {
      goto LABEL_11;
    }
    CFTypeRef v5 = *(const __CFArray ***)a1;
    uint64_t v4 = *(const void **)(a1 + 8);
    v15[2] = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v5[15], v4);
    if (CFArrayGetCount(Value))
    {
      *int v3 = 1;
      uint64_t v16 = 0;
      v15[0] = (uint64_t)v5;
      v15[1] = (uint64_t)Value;
      PerformMultiplePropertyRequest(v15);
      goto LABEL_11;
    }
    int v3 = v14;
  }
  else if (*(_DWORD *)v14)
  {
    goto LABEL_11;
  }
  *int v3 = 1;
  int v7 = dispatch_group_create();
  *((void *)v14 + 3) = v7;
  dispatch_group_enter(v7);
  uint64_t v8 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040CC7F86E7uLL);
  void *v8 = CFRetain(*(CFTypeRef *)a1);
  v8[1] = CFRetain(*(CFTypeRef *)(a1 + 8));
  v8[5] = CFRetain(*(CFTypeRef *)(*(void *)a1 + 112));
  *((unsigned char *)v8 + 48) = v14[32];
  dispatch_group_async_f(*(dispatch_group_t *)(*(void *)a1 + 96), *(dispatch_queue_t *)(*(void *)a1 + 88), v8, *(dispatch_function_t *)(*(void *)a1 + 104));
LABEL_11:
  int v9 = v14;
  if (*(_DWORD *)v14 == 1 && *(_DWORD *)(a1 + 56) == 1)
  {
    CFTypeRef v10 = *((void *)v14 + 3);
    *(void *)(a1 + 48) = v10;
    dispatch_retain(v10);
    int v9 = v14;
  }
  *(_DWORD *)(a1 + 20) = *((_DWORD *)v9 + 1);
  CFTypeRef v11 = (CFTypeRef)*((void *)v9 + 1);
  if (v11)
  {
    CFTypeRef v11 = CFRetain(v11);
    int v9 = v14;
  }
  *(void *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)v9;
  uint64_t v12 = (const void *)*((void *)v9 + 2);
  if (v12)
  {
    CFTypeRef v13 = CFRetain(v12);
    int v9 = v14;
  }
  else
  {
    CFTypeRef v13 = 0;
  }
  uint64_t result = 0;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = v9[32];
LABEL_20:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t RequestPropertyAsync(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  memset(v8, 0, sizeof(v8));
  int v10 = 0;
  v6[0] = a1;
  v6[1] = a2;
  long long v7 = 0u;
  v8[8] = 0;
  uint64_t v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v6, (dispatch_function_t)PerformObtainProperty);
  uint64_t v4 = *(unsigned int *)&v8[12];
  if (!*(_DWORD *)&v8[12]) {
    *a3 = v7;
  }
  TearDownFetchPropertyContext(v6);
  return v4;
}

uint64_t NewPropertyStoreBatchID()
{
  return FigAtomicIncrement32();
}

uint64_t RequestPropertiesAsync(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = 0;
  context[1] = a2;
  uint64_t v7 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformMultiplePropertyRequest);
  uint64_t result = v9;
  if (a3)
  {
    if (!v9) {
      *a3 = v7;
    }
  }
  return result;
}

void PerformMultiplePropertyRequest(uint64_t *a1)
{
  uint64_t Count = CFArrayGetCount((CFArrayRef)a1[1]);
  if (a1[3])
  {
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D548]);
    if (!Mutable)
    {
      int v4 = FigSignalErrorAt();
      goto LABEL_21;
    }
  }
  else
  {
    CFMutableSetRef Mutable = 0;
  }
  if (Count < 1)
  {
    char v6 = 1;
    if (Mutable)
    {
LABEL_15:
      if (a1[3] && CFSetGetCount(Mutable))
      {
        *(_DWORD *)a1[3] = FigAtomicIncrement32();
        uint64_t v9 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
        if (!v9)
        {
          int v4 = FigSignalErrorAt();
          goto LABEL_20;
        }
        int v10 = v9;
        *uint64_t v9 = *(_DWORD *)a1[3];
        *((void *)v9 + 1) = CFRetain(Mutable);
        CFArrayAppendValue(*(CFMutableArrayRef *)(*a1 + 80), v10);
      }
    }
LABEL_19:
    int v4 = 0;
    *((unsigned char *)a1 + 16) = v6;
    if (!Mutable) {
      goto LABEL_21;
    }
LABEL_20:
    CFRelease(Mutable);
    goto LABEL_21;
  }
  CFIndex v5 = 0;
  char v6 = 1;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1[1], v5);
    uint64_t v8 = *a1;
    int v18 = 0;
    int v15 = 0;
    v11[0] = v8;
    v11[1] = ValueAtIndex;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    PerformObtainProperty(v11);
    int v4 = v16;
    if (v16) {
      break;
    }
    if ((v12 & 0xFFFFFFFE) != 2)
    {
      char v6 = 0;
      if (Mutable)
      {
        CFSetAddValue(Mutable, ValueAtIndex);
        char v6 = 0;
      }
    }
    TearDownFetchPropertyContext(v11);
    if (Count == ++v5)
    {
      if (Mutable) {
        goto LABEL_15;
      }
      goto LABEL_19;
    }
  }
  TearDownFetchPropertyContext(v11);
  if (Mutable) {
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)a1 + 8) = v4;
}

void NotifyCompletedBatch(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFDictionaryRef v3 = CFDictionaryCreate(v2, (const void **)kFigAssetPayloadKey_BatchID, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v3) {
    CFRelease(v3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ReviseProperty(void *a1, const void *a2, const void *a3)
{
  char v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040D8CEB3B9uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    *char v6 = CFRetain(a1);
    v7[1] = a2;
    if (a2) {
      CFRetain(a2);
    }
    v7[4] = a3;
    if (a3) {
      CFRetain(a3);
    }
    uint64_t v8 = a1[2];
    dispatch_async_f(v8, v7, (dispatch_function_t)PerformReviseProperty);
  }
}

void PerformReviseProperty(uint64_t a1)
{
  uint64_t v7 = 0;
  CFAllocatorRef v2 = (CFTypeRef *)(a1 + 8);
  if (!AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v7)
    && *(_DWORD *)v7 == 2)
  {
    CFDictionaryRef v3 = (const void *)v7[2];
    int v4 = *(const void **)(a1 + 32);
    v7[2] = v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
    CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigAssetPayloadKey_Property, (const void **)(a1 + 8), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v5);
  }
  if (*v2) {
    CFRelease(*v2);
  }
  char v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFRelease(v6);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  free((void *)a1);
}

void ReportCompletedPropertyJob(void *context)
{
}

void PerformJobCompletion(void *a1)
{
  if (!*((unsigned char *)a1 + 49)) {
    StoreProperty(*(const __CFArray ***)a1, *((void **)a1 + 1), *((_DWORD *)a1 + 4), *((const void **)a1 + 4), *((const void **)a1 + 3));
  }
  CFAllocatorRef v2 = (const void *)*((void *)a1 + 1);
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = (const void *)*((void *)a1 + 3);
  if (v3) {
    CFRelease(v3);
  }
  int v4 = (const void *)*((void *)a1 + 4);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFDictionaryRef v5 = (const void *)*((void *)a1 + 5);
  if (v5) {
    CFRelease(v5);
  }

  free(a1);
}

void StoreByProduct(void *a1, const void *a2, int a3, const void *a4, const void *a5)
{
  int v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040D8CEB3B9uLL);
  if (v10)
  {
    CFTypeRef v11 = v10;
    *int v10 = CFRetain(a1);
    v11[1] = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (a3)
    {
      _OWORD v11[3] = a4;
      if (a4) {
        CFRetain(a4);
      }
    }
    *((_DWORD *)v11 + 4) = a3;
    v11[4] = a5;
    if (a5) {
      CFRetain(a5);
    }
    uint64_t v12 = a1[2];
    dispatch_async_f(v12, v11, (dispatch_function_t)PerformStoreByProduct);
  }
}

void PerformStoreByProduct(uint64_t a1)
{
  StoreProperty(*(const __CFArray ***)a1, *(void **)(a1 + 8), *(_DWORD *)(a1 + 16), *(const void **)(a1 + 24), *(const void **)(a1 + 32));
  CFAllocatorRef v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  int v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }

  free((void *)a1);
}

uint64_t DefineMacroProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  v4[2] = a3;
  uint64_t v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)PerformDefineMacroProperty);
  return v5;
}

void PerformDefineMacroProperty(const void **a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)*((void *)*a1 + 15);
  if (v2)
  {
    if (CFDictionaryContainsKey(v2, a1[1]))
    {
LABEL_3:
      int v3 = FigSignalErrorAt();
LABEL_4:
      int v4 = v3;
      goto LABEL_36;
    }
    CFMutableSetRef Mutable = (__CFDictionary *)*((void *)*a1 + 15);
  }
  else
  {
    CFMutableSetRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *((void *)*a1 + 15) = Mutable;
  }
  CFDictionarySetValue(Mutable, a1[1], a1[2]);
  char v6 = (const __CFArray **)*a1;
  uint64_t v7 = (void *)a1[1];
  CFArrayRef v8 = (const __CFArray *)a1[2];
  uint64_t v27 = 0;
  long long v26 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  *(_OWORD *)CMTimeValue value = 0u;
  uint64_t v22 = 0;
  uint64_t Count = CFArrayGetCount(v8);
  CFMutableArrayRef v23 = v6;
  if (Count < 1)
  {
    int v3 = AccessPropertyInfo(v6, v7, (const void **)&v22);
    if (!v3)
    {
LABEL_23:
      if (Count) {
        StoreProperty(v6, v7, 0, 0, 0);
      }
      int v10 = 0;
      goto LABEL_26;
    }
    goto LABEL_4;
  }
  int v10 = 0;
  CFIndex v11 = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v13 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
  do
  {
    value[0] = (void *)CFArrayGetValueAtIndex(v8, v11);
    PerformQueryProperty((uint64_t)&v23);
    int v4 = DWORD1(v26);
    if (DWORD1(v26)) {
      goto LABEL_41;
    }
    if (LODWORD(value[1]) != 2)
    {
      if (LODWORD(value[1]) != 3)
      {
        if (!v10)
        {
          int v10 = CFSetCreateMutable(v12, Count, v13);
          if (!v10) {
            goto LABEL_3;
          }
        }
        CFSetAddValue(v10, value[0]);
        goto LABEL_15;
      }
      int v19 = HIDWORD(value[1]);
      if (cf[0])
      {
        CFTypeRef v18 = CFRetain(cf[0]);
        if (!v10)
        {
LABEL_30:
          TearDownFetchPropertyContext(&v23);
          int v20 = AccessPropertyInfo(v6, v7, (const void **)&v22);
          if (!v20)
          {
            StoreProperty(v6, v7, v19, v18, 0);
            int v10 = 0;
            goto LABEL_32;
          }
          int v4 = v20;
          goto LABEL_34;
        }
      }
      else
      {
        CFTypeRef v18 = 0;
        if (!v10) {
          goto LABEL_30;
        }
      }
      CFRelease(v10);
      goto LABEL_30;
    }
LABEL_15:
    TearDownFetchPropertyContext(&v23);
    ++v11;
  }
  while (Count != v11);
  int v14 = AccessPropertyInfo(v6, v7, (const void **)&v22);
  if (v14)
  {
    int v4 = v14;
LABEL_41:
    CFTypeRef v18 = 0;
    if (v10) {
      goto LABEL_33;
    }
  }
  else
  {
    if (!v10) {
      goto LABEL_23;
    }
    int v15 = malloc_type_calloc(1uLL, 0x10uLL, 0x600405C6656D0uLL);
    if (!v15)
    {
      int v4 = FigSignalErrorAt();
      CFTypeRef v18 = 0;
      goto LABEL_33;
    }
    uint64_t v16 = v15;
    *int v15 = CFRetain(v7);
    v16[1] = CFRetain(v10);
    uint64_t v17 = v6[16];
    if (!v17)
    {
      uint64_t v17 = CFArrayCreateMutable(v12, 0, 0);
      v6[16] = v17;
    }
    CFArrayAppendValue(v17, v16);
LABEL_26:
    CFTypeRef v18 = 0;
LABEL_32:
    int v4 = 0;
    CFTypeRef v21 = v22;
    v22[32] = 1;
    *((void *)v21 + 2) = 0;
    if (v10) {
LABEL_33:
    }
      CFRelease(v10);
  }
LABEL_34:
  if (v18) {
    CFRelease(v18);
  }
LABEL_36:
  *((_DWORD *)a1 + 6) = v4;
}

uint64_t CreateValidationStore(const void *a1, NSObject *a2, NSObject *a3, uint64_t a4, const void *a5, void *a6)
{
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (AssetValidationStoreGetTypeID_sRegisterAssetValidationStoreTypeOnce != -1) {
    dispatch_once_f(&AssetValidationStoreGetTypeID_sRegisterAssetValidationStoreTypeOnce, &AssetValidationStoreGetTypeID_sAssetValidationStoreID, (dispatch_function_t)RegisterAssetValidationStoreType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    int v14 = (void *)Instance;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], 0);
    _OWORD v14[4] = Mutable;
    if (Mutable
      && (CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], 0), (v14[5] = v16) != 0)
      && (dispatch_queue_t v17 = dispatch_queue_create("AssetValidationStoreQueue", 0), (v14[2] = v17) != 0))
    {
      v14[8] = a4;
      v14[9] = CFRetain(a5);
      v14[6] = a2;
      dispatch_retain(a2);
      v14[7] = a3;
      dispatch_retain(a3);
      if (a1) {
        CFTypeRef v18 = CFRetain(a1);
      }
      else {
        CFTypeRef v18 = 0;
      }
      v14[3] = v18;
      *a6 = v14;
      return 0;
    }
    else
    {
      uint64_t v20 = FigSignalErrorAt();
      CFRelease(v14);
      return v20;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t RequestValidationAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5)
{
  context[0] = a1;
  context[1] = a2;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  void context[2] = a3;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformRequestValidation);
  uint64_t result = HIDWORD(v10);
  if (!HIDWORD(v10))
  {
    *a4 = v9;
    if (a5) {
      *a5 = v10;
    }
  }
  return result;
}

void PerformRequestValidation(uint64_t a1)
{
  CFArrayRef v8 = 0;
  int v2 = AccessValidationInfo(*(void *)a1, *(CFTypeRef *)(a1 + 8), *(const void **)(a1 + 16), (const void **)&v8);
  if (!v2)
  {
    int v3 = v8;
    uint64_t v4 = *v8;
    if (!*v8)
    {
      void *v8 = 1;
      uint64_t v5 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E004058B5FA3BuLL);
      void *v5 = CFRetain(*(CFTypeRef *)a1);
      CFTypeRef v6 = *(CFTypeRef *)(a1 + 8);
      if (v6) {
        CFTypeRef v6 = CFRetain(v6);
      }
      v5[1] = v6;
      CFTypeRef v7 = *(CFTypeRef *)(a1 + 16);
      if (v7) {
        CFTypeRef v7 = CFRetain(v7);
      }
      v5[2] = v7;
      v5[4] = CFRetain(*(CFTypeRef *)(*(void *)a1 + 72));
      dispatch_group_async_f(*(dispatch_group_t *)(*(void *)a1 + 56), *(dispatch_queue_t *)(*(void *)a1 + 48), v5, *(dispatch_function_t *)(*(void *)a1 + 64));
      int v3 = v8;
      uint64_t v4 = *v8;
    }
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v3 + 2);
    *(void *)(a1 + 24) = v4;
  }
  *(_DWORD *)(a1 + 36) = v2;
}

void ReportCompletedValidationJob(void *context)
{
}

void PerformValidationJobCompletion(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  values = 0;
  keys = 0;
  CFTypeRef v18 = 0;
  int v19 = 0;
  CFNumberRef v15 = 0;
  uint64_t v16 = 0;
  if (!AccessValidationInfo(*(void *)a1, *(CFTypeRef *)(a1 + 8), *(const void **)(a1 + 16), (const void **)&v13))
  {
    int v2 = *(_DWORD *)(a1 + 24);
    int v3 = v13;
    CFIndex v4 = 2;
    if (v2) {
      uint64_t v5 = 3;
    }
    else {
      uint64_t v5 = 2;
    }
    *uint64_t v13 = v5;
    *((_DWORD *)v3 + 2) = v2;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, v3 + 1);
    keys = @"assetPayload_ValidationCriteria";
    CFTypeRef v18 = @"assetPayload_Result";
    uint64_t v8 = *(void *)(a1 + 16);
    values = *(void **)(a1 + 8);
    CFNumberRef v15 = v7;
    if (v8)
    {
      int v19 = @"assetPayload_CustomPlist";
      uint64_t v16 = v8;
      CFIndex v4 = 3;
    }
    CFDictionaryRef v9 = CFDictionaryCreate(v6, (const void **)&keys, (const void **)&values, v4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v9);
    CFRelease(v7);
  }
  uint64_t v10 = *(const void **)(a1 + 8);
  if (v10) {
    CFRelease(v10);
  }
  CFIndex v11 = *(const void **)(a1 + 16);
  if (v11) {
    CFRelease(v11);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFAllocatorRef v12 = *(const void **)(a1 + 32);
  if (v12) {
    CFRelease(v12);
  }
  free((void *)a1);
}

uint64_t RegisterAssetPropertyStoreType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double AssetPropertyStore_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void AssetPropertyStore_Finalize(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 88);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 88) = 0;
  }
  int v3 = *(NSObject **)(a1 + 96);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 96) = 0;
  }
  CFIndex v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 16) = 0;
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 64);
  if (v5)
  {
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)PerPropertyInfoDisposalApplierFunction, 0);
    CFAllocatorRef v6 = *(const void **)(a1 + 64);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 64) = 0;
    }
  }
  CFNumberRef v7 = *(const void **)(a1 + 120);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 56) = 0;
  }
  CFDictionaryRef v9 = *(const void **)(a1 + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 32);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 32) = 0;
  }
  CFIndex v11 = *(const void **)(a1 + 40);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 40) = 0;
  }
  CFAllocatorRef v12 = *(const void **)(a1 + 48);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 112);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 112) = 0;
  }
  CFArrayRef v14 = *(const __CFArray **)(a1 + 80);
  if (v14)
  {
    CFIndex Count = CFArrayGetCount(v14);
    if (Count >= 1)
    {
      CFIndex v16 = Count;
      for (CFIndex i = 0; i != v16; ++i)
      {
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), i);
        if (ValueAtIndex)
        {
          int v19 = ValueAtIndex;
          uint64_t v20 = (const void *)*((void *)ValueAtIndex + 1);
          if (v20) {
            CFRelease(v20);
          }
          free(v19);
        }
      }
    }
    CFTypeRef v21 = *(const void **)(a1 + 80);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a1 + 80) = 0;
    }
  }
  CFArrayRef v22 = *(const __CFArray **)(a1 + 128);
  if (v22)
  {
    CFIndex v23 = CFArrayGetCount(v22);
    if (v23 >= 1)
    {
      CFIndex v24 = v23;
      for (CFIndex j = 0; j != v24; ++j)
      {
        long long v26 = (CFTypeRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), j);
        if (v26)
        {
          uint64_t v27 = v26;
          CFTypeRef v28 = v26[1];
          if (v28)
          {
            CFRelease(v28);
            v27[1] = 0;
          }
          if (*v27) {
            CFRelease(*v27);
          }
          free(v27);
        }
      }
    }
    CFTypeRef v29 = *(const void **)(a1 + 128);
    if (v29)
    {
      CFRelease(v29);
      *(void *)(a1 + 128) = 0;
    }
  }
}

__CFString *AssetPropertyStore_CopyDebugDesc(void *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFIndex v3 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<AssetPropertyStore %p> RC %d WRC %p WG %p WQ %p", a1, v3, a1[14], a1[12], a1[11]);
  return Mutable;
}

void PerPropertyInfoDisposalApplierFunction(int a1, void *a2)
{
  if (a2)
  {
    CFIndex v3 = (const void *)a2[1];
    if (v3)
    {
      CFRelease(v3);
      a2[1] = 0;
    }
    CFIndex v4 = (const void *)a2[2];
    if (v4) {
      CFRelease(v4);
    }
    free(a2);
  }
}

uint64_t AccessPropertyInfo(const __CFArray **a1, const void *a2, const void **a3)
{
  if (CFDictionaryGetValueIfPresent(a1[8], a2, a3)) {
    return 0;
  }
  CFArrayRef v7 = a1[7];
  v12.size_t length = CFArrayGetCount(v7);
  v12.location = 0;
  if (CFArrayContainsValue(v7, v12, a2) || (CFDictionaryRef v10 = a1[15]) != 0 && CFDictionaryContainsKey(v10, a2))
  {
    uint64_t v8 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E00406F9AF8A3uLL);
    if (v8)
    {
      CFDictionaryRef v9 = v8;
      CFDictionarySetValue(a1[8], a2, v8);
      uint64_t result = 0;
      *a3 = v9;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    *a3 = 0;
    return 4294955124;
  }
  return result;
}

void StoreProperty(const __CFArray **a1, void *a2, int a3, const void *a4, const void *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  values = 0;
  keys = 0;
  unint64_t v42 = 0;
  int v43 = 0;
  CFNumberRef v39 = 0;
  CFRange v40 = 0;
  if (!AccessPropertyInfo(a1, a2, (const void **)&v37))
  {
    CFDictionaryRef v10 = v37;
    if (*(_DWORD *)v37 <= 1u)
    {
      *((_DWORD *)v37 + 1) = a3;
      if (a3)
      {
        *(_DWORD *)CFDictionaryRef v10 = 3;
        CFIndex v11 = (const void *)*((void *)v10 + 1);
        *((void *)v10 + 1) = a4;
        if (a4) {
          CFRetain(a4);
        }
        if (v11) {
          CFRelease(v11);
        }
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, v37 + 4);
        keys = @"assetPayload_Property";
        unint64_t v42 = @"assetPayload_Result";
        values = a2;
        CFNumberRef v39 = v13;
        if (a4)
        {
          int v43 = @"assetPayload_CFError";
          CFRange v40 = a4;
          CFIndex v14 = 3;
        }
        else
        {
          CFIndex v14 = 2;
        }
        CFDictionaryRef v15 = CFDictionaryCreate(v12, (const void **)&keys, (const void **)&values, v14, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v15);
      }
      else
      {
        *(_DWORD *)CFDictionaryRef v10 = 2;
        *((void *)v10 + 2) = a5;
        if (a5) {
          CFRetain(a5);
        }
        keys = @"assetPayload_Property";
        values = a2;
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberRef v13 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      CFRelease(v13);
      CFIndex v16 = *((void *)v37 + 3);
      if (v16)
      {
        dispatch_group_leave(v16);
        dispatch_release(*((dispatch_object_t *)v37 + 3));
        *((void *)v37 + 3) = 0;
      }
      CFIndex Count = CFArrayGetCount(a1[10]);
      if (Count >= 1)
      {
        CFIndex v18 = Count;
        for (CFIndex i = 0; i < v18; ++i)
        {
          CFDictionaryRef ValueAtIndex = (CFSetRef *)CFArrayGetValueAtIndex(a1[10], i);
          if (CFSetContainsValue(ValueAtIndex[1], a2))
          {
            CFSetRemoveValue(ValueAtIndex[1], a2);
            if (!CFSetGetCount(ValueAtIndex[1]))
            {
              int v21 = *(_DWORD *)ValueAtIndex;
              CFArrayRemoveValueAtIndex(a1[10], i);
              CFSetRef v22 = ValueAtIndex[1];
              if (v22) {
                CFRelease(v22);
              }
              --v18;
              --i;
              free(ValueAtIndex);
              NotifyCompletedBatch((uint64_t)a1, v21);
            }
          }
        }
      }
      CFArrayRef v23 = a1[16];
      if (v23)
      {
        CFIndex v24 = v37;
        CFIndex v25 = CFArrayGetCount(v23);
        if (v25 >= 1)
        {
          CFIndex v26 = v25;
          CFIndex v27 = 0;
          CFMutableDictionaryRef Mutable = 0;
          CFTypeRef v29 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          do
          {
            CFTypeRef v30 = (void *)CFArrayGetValueAtIndex(a1[16], v27);
            if (CFSetContainsValue(*((CFSetRef *)v30 + 1), a2))
            {
              CFTypeRef v31 = (__CFSet *)*((void *)v30 + 1);
              if (*(_DWORD *)v24 == 2) {
                CFSetRemoveValue(v31, a2);
              }
              else {
                CFSetRemoveAllValues(v31);
              }
              if (!CFSetGetCount(*((CFSetRef *)v30 + 1)))
              {
                if (!Mutable) {
                  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v12, 0, v29);
                }
                CFArrayAppendValue(Mutable, *(const void **)v30);
                CFArrayRemoveValueAtIndex(a1[16], v27);
                long long v32 = (const void *)*((void *)v30 + 1);
                if (v32)
                {
                  CFRelease(v32);
                  *((void *)v30 + 1) = 0;
                }
                if (*(void *)v30) {
                  CFRelease(*(CFTypeRef *)v30);
                }
                --v26;
                --v27;
                free(v30);
              }
            }
            ++v27;
          }
          while (v27 < v26);
          if (Mutable)
          {
            CFIndex v33 = CFArrayGetCount(Mutable);
            if (v33)
            {
              CFIndex v34 = v33;
              if (v33 >= 1)
              {
                for (CFIndex j = 0; j != v34; ++j)
                {
                  CFArrayRef v36 = CFArrayGetValueAtIndex(Mutable, j);
                  StoreProperty(a1, v36, *((unsigned int *)v24 + 1), *((void *)v24 + 1), 0);
                }
              }
              CFRelease(Mutable);
            }
          }
        }
      }
    }
  }
}

uint64_t RegisterAssetValidationStoreType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double AssetValidationStore_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void AssetValidationStore_Finalize(void *a1)
{
  int v2 = a1[6];
  if (v2)
  {
    dispatch_release(v2);
    a1[6] = 0;
  }
  CFIndex v3 = a1[7];
  if (v3)
  {
    dispatch_release(v3);
    a1[7] = 0;
  }
  CFIndex v4 = a1[2];
  if (v4)
  {
    dispatch_release(v4);
    a1[2] = 0;
  }
  CFDictionaryRef v5 = (const __CFDictionary *)a1[4];
  if (v5)
  {
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)PerValidationInfoDisposalApplierFunction, 0);
    CFAllocatorRef v6 = (const void *)a1[4];
    if (v6)
    {
      CFRelease(v6);
      a1[4] = 0;
    }
  }
  CFDictionaryRef v7 = (const __CFDictionary *)a1[5];
  if (v7)
  {
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)PerValidationInfoDisposalApplierFunction, 0);
    uint64_t v8 = (const void *)a1[5];
    if (v8)
    {
      CFRelease(v8);
      a1[5] = 0;
    }
  }
  CFDictionaryRef v9 = (const void *)a1[3];
  if (v9)
  {
    CFRelease(v9);
    a1[3] = 0;
  }
  CFDictionaryRef v10 = (const void *)a1[9];
  if (v10)
  {
    CFRelease(v10);
    a1[9] = 0;
  }
}

__CFString *AssetValidationStore_CopyDebugDesc(void *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFIndex v3 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<AssetValidationStore %p> RC %d WRC %p WG %p WQ %p", a1, v3, a1[9], a1[7], a1[6]);
  return Mutable;
}

void PerValidationInfoDisposalApplierFunction(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

uint64_t AccessValidationInfo(uint64_t a1, CFTypeRef cf1, const void *a3, const void **a4)
{
  if (CFEqual(cf1, @"validationCriteria_Custom"))
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), a3, a4)) {
      return 0;
    }
    uint64_t v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
    if (v8)
    {
      CFDictionaryRef v9 = v8;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, v8);
      *a4 = v9;
      return 0;
    }
  }
  else
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), cf1, a4)) {
      return 0;
    }
    CFDictionaryRef v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
    if (v10)
    {
      CFIndex v11 = v10;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), cf1, v10);
      *a4 = v11;
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleBufferProcessorRestoreBufferedAirPlayStates(uint64_t a1, long long *a2, CMTime *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  if ((a3->flags & 0x1D) != 1) {
    return 4294954516;
  }
  uint64_t v6 = DerivedStorage;
  if (*((unsigned char *)a2 + 12))
  {
    long long v9 = *a2;
    *(void *)(DerivedStorage + 84) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 68) = v9;
    CMTime lhs = *a3;
    CMTime v15 = *(CMTime *)a2;
    CMTimeSubtract(&v17, &lhs, &v15);
    *(CMTime *)(v6 + 44) = v17;
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)(DerivedStorage + 44) = *MEMORY[0x1E4F1FA48];
    *(void *)(DerivedStorage + 60) = *(void *)(v7 + 16);
    CMTimeEpoch epoch = a3->epoch;
    *(_OWORD *)(DerivedStorage + 68) = *(_OWORD *)&a3->value;
    *(void *)(DerivedStorage + 84) = epoch;
  }
  *(unsigned char *)(v6 + 40) = 1;
  *(unsigned char *)(v6 + 92) = 1;
  *(unsigned char *)(v6 + 120) = 0;
  MEMORY[0x19970E910](*(void *)(v6 + 168));
  uint64_t v10 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v6 + 176) = *MEMORY[0x1E4F1F9F8];
  *(void *)(v6 + 192) = *(void *)(v10 + 16);
  MEMORY[0x19970E930](*(void *)(v6 + 168));
  CFIndex v11 = *(const void **)(v6 + 136);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(v6 + 136) = 0;
  }
  CFAllocatorRef v12 = *(const void **)(v6 + 128);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(v6 + 128) = 0;
  }
  MEMORY[0x19970E910](*(void *)(v6 + 152));
  CFNumberRef v13 = *(const void **)(v6 + 144);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(v6 + 144) = 0;
  }
  MEMORY[0x19970E930](*(void *)(v6 + 152));
  return 0;
}

uint64_t FigSampleBufferProcessorForBufferedAirPlayCreate(const void *a1, const void *a2, const __CFDictionary *a3, void *a4)
{
  CMTimeValue value = 0;
  uint64_t v26 = 0;
  if (a4)
  {
    FigSampleBufferProcessorGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (v8) {
      return v8;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    dispatch_queue_t v10 = dispatch_queue_create("com.apple.coremedia.FigSampleBufferProcessor_BufferedAirPlay.notificationqueue", 0);
    *(void *)(DerivedStorage + 344) = v10;
    if (!v10) {
      return 4294954510;
    }
    CFTypeRef v11 = a2 ? CFRetain(a2) : 0;
    *(void *)(DerivedStorage + 24) = v11;
    CFTypeRef v13 = a1 ? CFRetain(a1) : 0;
    *(void *)(DerivedStorage + 32) = v13;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v14 = FigNotificationCenterAddWeakListener();
    CMTime v15 = (long long *)MEMORY[0x1E4F1FA48];
    *(unsigned char *)(DerivedStorage + 40) = 1;
    long long v16 = *v15;
    *(_OWORD *)(DerivedStorage + 68) = *v15;
    uint64_t v17 = *((void *)v15 + 2);
    *(void *)(DerivedStorage + 84) = v17;
    *(_OWORD *)(DerivedStorage + 44) = v16;
    *(void *)(DerivedStorage + 60) = v17;
    *(unsigned char *)(DerivedStorage + 120) = 0;
    *(_OWORD *)(DerivedStorage + 96) = v16;
    *(void *)(DerivedStorage + 112) = v17;
    *(void *)(DerivedStorage + 216) = v17;
    long long v24 = v16;
    *(_OWORD *)(DerivedStorage + 200) = v16;
    uint64_t v18 = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 152) = v18;
    if (!v18) {
      return 4294954510;
    }
    uint64_t v19 = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 168) = v19;
    if (!v19) {
      return 4294954510;
    }
    uint64_t v20 = MEMORY[0x1E4F1F9F8];
    long long v21 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 224) = *MEMORY[0x1E4F1F9F8];
    uint64_t v22 = *(void *)(v20 + 16);
    *(void *)(DerivedStorage + 240) = v22;
    *(_OWORD *)(DerivedStorage + 248) = v21;
    *(void *)(DerivedStorage + 264) = v22;
    *(_OWORD *)(DerivedStorage + 272) = v21;
    *(void *)(DerivedStorage + 288) = v22;
    *(_OWORD *)(DerivedStorage + 296) = v21;
    *(void *)(DerivedStorage + 312) = v22;
    *(_OWORD *)(DerivedStorage + 320) = v24;
    *(void *)(DerivedStorage + 336) = v17;
    *(void *)(DerivedStorage + 352) = 0;
    if (a3 && CFDictionaryGetValueIfPresent(a3, @"LoggingID", (const void **)&value))
    {
      CFArrayRef v23 = value;
      if (value) {
        CFArrayRef v23 = (void *)CFRetain(value);
      }
      *(void *)(DerivedStorage + 352) = v23;
    }
    *a4 = v26;
    return v14;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

unsigned char *fbarp_inhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  double result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    uint64_t v7 = result;
    if (!*result)
    {
      CFArrayRef Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1F328]);
      MEMORY[0x19970E910](*((void *)v7 + 19));
      long long v9 = (const void *)*((void *)v7 + 18);
      *((void *)v7 + 18) = Value;
      if (Value) {
        CFRetain(Value);
      }
      if (v9) {
        CFRelease(v9);
      }
      JUMPOUT(0x19970E930);
    }
  }
  return result;
}

unsigned char *fbarp_resetOutput(uint64_t a1, const void *a2)
{
  double result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CFIndex v4 = result;
    fbarp_postNotificationSync(a2, @"ResetOutput");
    MEMORY[0x19970E910](*((void *)v4 + 21));
    uint64_t v5 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)(v4 + 200) = *MEMORY[0x1E4F1FA48];
    *((void *)v4 + 27) = *(void *)(v5 + 16);
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t FigSampleBufferProcessorForBufferedAirPlayCopyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 168));
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    CMTime v19 = *(CMTime *)(DerivedStorage + 224);
    CFDictionaryRef v7 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v7) {
      goto LABEL_11;
    }
    CFDictionaryRef v8 = v7;
    CFDictionarySetValue(v6, @"FirstMediaSamplePts", v7);
    CFRelease(v8);
    CMTime v19 = *(CMTime *)(DerivedStorage + 248);
    CFDictionaryRef v9 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v9) {
      goto LABEL_11;
    }
    CFDictionaryRef v10 = v9;
    CFDictionarySetValue(v6, @"LastMediaSamplePts", v9);
    CFRelease(v10);
    CMTime v19 = *(CMTime *)(DerivedStorage + 272);
    CFDictionaryRef v11 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v11) {
      goto LABEL_11;
    }
    CFDictionaryRef v12 = v11;
    CFDictionarySetValue(v6, @"FirstContinuousSamplePts", v11);
    CFRelease(v12);
    CMTime v19 = *(CMTime *)(DerivedStorage + 296);
    CFDictionaryRef v13 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v13
      || (CFDictionaryRef v14 = v13,
          CFDictionarySetValue(v6, @"LastContinuousSamplePts", v13),
          CFRelease(v14),
          CMTime v19 = *(CMTime *)(DerivedStorage + 320),
          (CFDictionaryRef v15 = CMTimeCopyAsDictionary(&v19, v4)) == 0))
    {
LABEL_11:
      uint64_t v17 = FigSignalErrorAt();
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 168));
      CFRelease(v6);
      return v17;
    }
    CFDictionaryRef v16 = v15;
    CFDictionarySetValue(v6, @"DurationProcessed", v15);
    CFRelease(v16);
    uint64_t v17 = 0;
    if (a2) {
      *a2 = v6;
    }
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 168));
  return v17;
}

uint64_t fbarpInvalidate()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*DerivedStorage)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*((void *)v1 + 19)) {
        MEMORY[0x19970E910]();
      }
      int v2 = (const void *)*((void *)v1 + 18);
      if (v2)
      {
        CFRelease(v2);
        *((void *)v1 + 18) = 0;
      }
      if (*((void *)v1 + 19)) {
        MEMORY[0x19970E930]();
      }
      CFIndex v3 = (const void *)*((void *)v1 + 3);
      if (v3)
      {
        CFRelease(v3);
        *((void *)v1 + 3) = 0;
      }
      CFAllocatorRef v4 = (const void *)*((void *)v1 + 4);
      if (v4)
      {
        CFRelease(v4);
        *((void *)v1 + 4) = 0;
      }
      uint64_t v5 = (const void *)*((void *)v1 + 16);
      if (v5)
      {
        CFRelease(v5);
        *((void *)v1 + 16) = 0;
      }
      uint64_t v6 = (const void *)*((void *)v1 + 17);
      if (v6)
      {
        CFRelease(v6);
        *((void *)v1 + 17) = 0;
      }
      CFDictionaryRef v7 = (const void *)*((void *)v1 + 44);
      if (v7)
      {
        CFRelease(v7);
        *((void *)v1 + 44) = 0;
      }
      v1[160] = 0;
      *((void *)v1 + 1) = 0;
      *((void *)v1 + 2) = 0;
      MEMORY[0x19970E910](*((void *)v1 + 21));
      uint64_t v8 = MEMORY[0x1E4F1F9F8];
      *((_OWORD *)v1 + 11) = *MEMORY[0x1E4F1F9F8];
      *((void *)v1 + 24) = *(void *)(v8 + 16);
      MEMORY[0x19970E930](*((void *)v1 + 21));
      unsigned char *v1 = 1;
    }
  }
  return 0;
}

void fbarpFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fbarpInvalidate();
  if (*(void *)(DerivedStorage + 152))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 152) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 344);
  if (v1)
  {
    dispatch_sync(v1, &__block_literal_global_79);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 344));
    *(void *)(DerivedStorage + 344) = 0;
  }
}

__CFString *fbarpCopyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(DerivedStorage);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(DerivedStorage);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_BufferedAirPlay %p> retainCount: %d%s allocator: %p\n", a1, v5, v6, v7);
  return Mutable;
}

uint64_t fbarpCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t result = 4294954516;
  if (a2 && a4)
  {
    if (!*(unsigned char *)DerivedStorage)
    {
      if (CFEqual(a2, @"CurrentOutputTime"))
      {
        CMTime lhs = *(CMTime *)(DerivedStorage + 68);
        CMTime v13 = *(CMTime *)(DerivedStorage + 44);
        CMTimeAdd(&v15, &lhs, &v13);
        CMTime lhs = v15;
        CFDictionaryRef v9 = CMTimeCopyAsDictionary(&lhs, a3);
      }
      else
      {
        if (!CFEqual(a2, @"TransitionIDContext"))
        {
          if (CFEqual(a2, @"Last\x10InputSbufPresentationEndTime"))
          {
            MEMORY[0x19970E910](*(void *)(DerivedStorage + 168));
            *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)(DerivedStorage + 176);
            CMTimeEpoch v12 = *(void *)(DerivedStorage + 192);
          }
          else
          {
            if (!CFEqual(a2, @"ProcessedSingleSessionAudioDuration")) {
              return 4294954512;
            }
            MEMORY[0x19970E910](*(void *)(DerivedStorage + 168));
            *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)(DerivedStorage + 200);
            CMTimeEpoch v12 = *(void *)(DerivedStorage + 216);
          }
          lhs.CMTimeEpoch epoch = v12;
          *a4 = CMTimeCopyAsDictionary(&lhs, a3);
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 168));
          return 0;
        }
        CFDictionaryRef v11 = *(const void **)(DerivedStorage + 136);
        if (!v11)
        {
          CFDictionaryRef v10 = 0;
          goto LABEL_7;
        }
        CFDictionaryRef v9 = (const __CFDictionary *)CFRetain(v11);
      }
      CFDictionaryRef v10 = v9;
LABEL_7:
      uint64_t result = 0;
      *a4 = v10;
      return result;
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fbarp_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 8) = a2;
  *(void *)(DerivedStorage + 16) = a3;
  return 0;
}

uint64_t fbarp_processSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue v64 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v65 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  long long v5 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v56.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v56.CMTimeEpoch epoch = v6;
  CMTimeValue value = v64;
  CMTimeScale timescale = v65;
  if (a2)
  {
    uint64_t v7 = DerivedStorage;
    long long v52 = v5;
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    sampleBufferOut.CMTimeValue value = 0;
    uint64_t Copy = CMSampleBufferCreateCopy(*(CFAllocatorRef *)(v8 + 24), a2, (CMSampleBufferRef *)&sampleBufferOut);
    if (sampleBufferOut.value)
    {
      uint64_t v10 = Copy;
      CFDictionaryRef v11 = CMCopyDictionaryOfAttachments(*(CFAllocatorRef *)(v8 + 24), a2, 0);
      if (v11) {
        CMSetAttachments((CMAttachmentBearerRef)sampleBufferOut.value, v11, 0);
      }
      if (sampleBufferOut.value)
      {
        CMTimeEpoch v12 = (opaqueCMSampleBuffer *)CFRetain((CFTypeRef)sampleBufferOut.value);
        if (!v11)
        {
LABEL_10:
          if (sampleBufferOut.value) {
            CFRelease((CFTypeRef)sampleBufferOut.value);
          }
          if (!v12) {
            return FigSignalErrorAt();
          }
          CMTimeEpoch v51 = v6;
          CMSampleBufferGetOutputDuration(&sampleBufferOut, v12);
          CMTimeValue value = sampleBufferOut.value;
          CMTimeFlags flags = sampleBufferOut.flags;
          CMTimeScale timescale = sampleBufferOut.timescale;
          CMTimeEpoch epoch = sampleBufferOut.epoch;
          CMSampleBufferGetOutputPresentationTimeStamp(&sampleBufferOut, v12);
          CMTimeValue v64 = sampleBufferOut.value;
          CMTimeFlags v15 = sampleBufferOut.flags;
          CMTimeScale v65 = sampleBufferOut.timescale;
          CMTimeEpoch v16 = sampleBufferOut.epoch;
          if (sampleBufferOut.flags)
          {
            MEMORY[0x19970E910](*(void *)(v7 + 168));
            lhs.CMTimeValue value = v64;
            lhs.CMTimeScale timescale = v65;
            lhs.CMTimeFlags flags = v15;
            lhs.CMTimeEpoch epoch = v16;
            rhs.CMTimeValue value = value;
            rhs.CMTimeScale timescale = timescale;
            rhs.CMTimeFlags flags = flags;
            rhs.CMTimeEpoch epoch = epoch;
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            *(CMTime *)(v7 + 176) = sampleBufferOut;
            MEMORY[0x19970E930](*(void *)(v7 + 168));
          }
          CMTimeEpoch v50 = epoch;
          uint64_t v17 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19970E910](*(void *)(v17 + 152));
          if (*(void *)(v17 + 144))
          {
            CFTypeRef v18 = CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F1F2C0], 0);
            if (!FigCFEqual())
            {
              MEMORY[0x19970E930](*(void *)(v17 + 152));
              goto LABEL_29;
            }
            CMTime v19 = *(const void **)(v17 + 144);
            if (v19)
            {
              CFRelease(v19);
              *(void *)(v17 + 144) = 0;
            }
            uint64_t v20 = MEMORY[0x1E4F1FA48];
            long long v21 = *MEMORY[0x1E4F1FA48];
            *(_OWORD *)(v17 + 44) = *MEMORY[0x1E4F1FA48];
            uint64_t v22 = *(void *)(v20 + 16);
            *(void *)(v17 + 60) = v22;
            *(_OWORD *)(v17 + 68) = v21;
            *(void *)(v17 + 84) = v22;
          }
          else
          {
            CFTypeRef v18 = 0;
          }
          MEMORY[0x19970E930](*(void *)(v17 + 152));
          if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F21A68], 0) && !*(unsigned char *)(v7 + 160))
          {
            fbarp_postNotificationSync(a1, @"IsGapTrack");
            *(unsigned char *)(v7 + 160) = 1;
            if ((v15 & 1) == 0) {
              goto LABEL_24;
            }
          }
          else if ((v15 & 1) == 0)
          {
LABEL_24:
            if (v18)
            {
              CFDictionaryRef v23 = 0;
              *(unsigned char *)(v7 + 40) = 1;
              goto LABEL_26;
            }
            CFTypeRef v47 = CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F1F2F8], 0);
            if (v47)
            {
              *(unsigned char *)(v7 + 120) = 1;
              *(void *)(v7 + 128) = v47;
              CFRetain(v47);
              CMTime sampleBufferOut = *(CMTime *)(v7 + 44);
              CMTime lhs = *(CMTime *)(v7 + 68);
              CMTimeAdd(&time, &sampleBufferOut, &lhs);
              CFDictionaryRef v23 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
              CMSetAttachment(v12, @"TransitionIDOutputPresentationTimeStamp", v23, 0);
              if (!v10) {
                goto LABEL_49;
              }
              goto LABEL_83;
            }
            if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F1F238], 0))
            {
              CFDictionaryRef v23 = 0;
              *(unsigned char *)(v7 + 92) = 1;
              if (!v10) {
                goto LABEL_49;
              }
              goto LABEL_83;
            }
            if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F21A30], 0))
            {
              CFDictionaryRef v23 = 0;
LABEL_26:
              *(unsigned char *)(v7 + 92) = 0;
              if (!v10) {
                goto LABEL_49;
              }
LABEL_83:
              CFDictionaryRef v32 = 0;
LABEL_84:
              CFRelease(v12);
              if (v23) {
                CFRelease(v23);
              }
              if (!v32) {
                return v10;
              }
              CFDictionaryRef v24 = v32;
              goto LABEL_88;
            }
            CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F1F2B8], 0);
            goto LABEL_82;
          }
          CFTypeRef v25 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
          CMSetAttachment(v12, @"BufferedAirPlayIsOriginalContent", (CFTypeRef)*MEMORY[0x1E4F1CFD0], 0);
          if (v18 || *(unsigned char *)(v7 + 40))
          {
            Mutableuint64_t Copy = (const void *)FigCFDictionaryCreateMutableCopy();
            sampleBufferOut.CMTimeValue value = v64;
            sampleBufferOut.CMTimeScale timescale = v65;
            sampleBufferOut.CMTimeFlags flags = v15;
            sampleBufferOut.CMTimeEpoch epoch = v16;
            FigCFDictionarySetCMTime();
            *(unsigned char *)(v7 + 40) = 0;
            fbarp_postNotification(a1, @"ResumeOutputSbufFound", MutableCopy);
            if (MutableCopy) {
              CFRelease(MutableCopy);
            }
          }
          if (*(unsigned char *)(v7 + 120))
          {
            CFIndex v27 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            CFTypeRef v28 = (_OWORD *)(v7 + 68);
            sampleBufferOut.CMTimeValue value = v64;
            sampleBufferOut.CMTimeScale timescale = v65;
            sampleBufferOut.CMTimeFlags flags = v15;
            sampleBufferOut.CMTimeEpoch epoch = v16;
            CMTime lhs = *(CMTime *)(v7 + 68);
            if (CMTimeCompare(&sampleBufferOut, &lhs))
            {
              CMTime lhs = *(CMTime *)(v7 + 44);
              *(_OWORD *)&rhs.CMTimeValue value = *v28;
              rhs.CMTimeEpoch epoch = *(void *)(v7 + 84);
              CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
              *(CMTime *)(v7 + 44) = sampleBufferOut;
            }
            CFDictionarySetValue(v27, @"TransitionID", *(const void **)(v7 + 128));
            *(_OWORD *)&sampleBufferOut.CMTimeValue value = *v28;
            sampleBufferOut.CMTimeEpoch epoch = *(void *)(v7 + 84);
            FigCFDictionarySetCMTime();
            sampleBufferOut.CMTimeValue value = v64;
            sampleBufferOut.CMTimeScale timescale = v65;
            sampleBufferOut.CMTimeFlags flags = v15;
            sampleBufferOut.CMTimeEpoch epoch = v16;
            FigCFDictionarySetCMTime();
            sampleBufferOut.CMTimeValue value = v64;
            sampleBufferOut.CMTimeScale timescale = v65;
            sampleBufferOut.CMTimeFlags flags = v15;
            sampleBufferOut.CMTimeEpoch epoch = v16;
            CMTime lhs = *(CMTime *)(v7 + 44);
            CMTimeAdd(&v54, &sampleBufferOut, &lhs);
            FigCFDictionarySetCMTime();
            CFTypeRef v29 = *(const void **)(v7 + 136);
            *(void *)(v7 + 136) = v27;
            if (v27) {
              CFRetain(v27);
            }
            if (v29) {
              CFRelease(v29);
            }
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            if (v27) {
              CFRelease(v27);
            }
            CFTypeRef v30 = *(const void **)(v7 + 128);
            if (v30)
            {
              CFRelease(v30);
              *(void *)(v7 + 128) = 0;
            }
            *(unsigned char *)(v7 + 120) = 0;
            *(unsigned char *)(v7 + 92) = 0;
          }
          sampleBufferOut.CMTimeValue value = v64;
          sampleBufferOut.CMTimeScale timescale = v65;
          sampleBufferOut.CMTimeFlags flags = v15;
          sampleBufferOut.CMTimeEpoch epoch = v16;
          CMTime lhs = *(CMTime *)(v7 + 44);
          CMTimeAdd(&v56, &sampleBufferOut, &lhs);
          CMTime sampleBufferOut = v56;
          uint64_t v31 = CMSampleBufferSetOutputPresentationTimeStamp(v12, &sampleBufferOut);
          if (!v31)
          {
            CFDictionaryRef v23 = 0;
            if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E4F1F268], 0) != v25) {
              goto LABEL_49;
            }
            int v48 = (const void *)FigCFDictionaryCreateMutableCopy();
            memset(&sampleBufferOut, 0, sizeof(sampleBufferOut));
            CMTime lhs = v56;
            rhs.CMTimeValue value = value;
            rhs.CMTimeScale timescale = timescale;
            rhs.CMTimeFlags flags = flags;
            rhs.CMTimeEpoch epoch = v50;
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            if (v48)
            {
              CMTime lhs = sampleBufferOut;
              FigCFDictionarySetCMTime();
              fbarp_postNotification(a1, @"EndOfSiriTTSUtteranceFound", v48);
              CFRelease(v48);
              uint64_t v10 = 0;
            }
            else
            {
              uint64_t v10 = FigSignalErrorAt();
            }
LABEL_82:
            CFDictionaryRef v23 = 0;
            if (v10) {
              goto LABEL_83;
            }
LABEL_49:
            if (*(unsigned char *)(v7 + 92))
            {
              CFDictionaryRef v32 = 0;
            }
            else
            {
              CMSampleBufferGetOutputDuration(&sampleBufferOut, v12);
              CFDictionaryRef v32 = 0;
              CMTimeValue value = sampleBufferOut.value;
              CMTimeScale timescale = sampleBufferOut.timescale;
              if (v15 & 1) != 0 && (sampleBufferOut.flags)
              {
                lhs.CMTimeValue value = v64;
                lhs.CMTimeScale timescale = v65;
                lhs.CMTimeFlags flags = v15;
                lhs.CMTimeEpoch epoch = v16;
                rhs.CMTimeValue value = value;
                rhs.CMTimeScale timescale = timescale;
                rhs.CMTimeFlags flags = sampleBufferOut.flags;
                rhs.CMTimeEpoch epoch = sampleBufferOut.epoch;
                CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
                *(CMTime *)(v7 + 68) = sampleBufferOut;
                CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                sampleBufferOut.CMTimeValue value = v64;
                sampleBufferOut.CMTimeScale timescale = v65;
                sampleBufferOut.CMTimeFlags flags = v15;
                sampleBufferOut.CMTimeEpoch epoch = v16;
                CFDictionaryRef v32 = CMTimeCopyAsDictionary(&sampleBufferOut, v33);
                CMSetAttachment(v12, @"MediaPresentationTimeStamp", v32, 0);
              }
            }
            uint64_t v34 = CMBaseObjectGetDerivedStorage();
            memset(&sampleBufferOut, 0, sizeof(sampleBufferOut));
            CMTime lhs = *(CMTime *)(v34 + 68);
            CMTime rhs = *(CMTime *)(v34 + 44);
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            memset(&lhs, 0, sizeof(lhs));
            CMTimeMake(&rhs, 5, 1);
            CMTime time1 = *(CMTime *)(v34 + 44);
            CMTimeAdd(&lhs, &time1, &rhs);
            if (fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_onceToken != -1) {
              dispatch_once(&fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_onceToken, &__block_literal_global_76);
            }
            if (*(unsigned char *)(v34 + 236))
            {
              CMTime time1 = sampleBufferOut;
              CMTime time2 = lhs;
              unsigned int v35 = CMTimeCompare(&time1, &time2) >> 31;
            }
            else
            {
              LOBYTE(v35) = 1;
            }
            CMTime time1 = *(CMTime *)(v34 + 96);
            CMTime time2 = sampleBufferOut;
            int32_t v36 = CMTimeCompare(&time1, &time2);
            CMSampleBufferGetOutputPresentationTimeStamp(&time1, v12);
            if (v36 < 0
              || (v35 & 1) != 0
              || (time1.flags & 1) == 0
              || fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_sTraceAllSbuf)
            {
              random();
              uint64_t v37 = FigCFDictionaryCreateMutableCopy();
              if (v37)
              {
                int v38 = (__CFDictionary *)v37;
                Uuint64_t Int32 = (__CFDictionary *)FigCFNumberCreateUInt32();
                if (UInt32)
                {
                  CFRange v40 = UInt32;
                  CFDictionarySetValue(v38, @"SbufTracerOption_UniqueID", UInt32);
                  CFDictionarySetValue(v38, @"SbufTracerOption_SourceID", *(const void **)(v34 + 352));
                  CMSetAttachment(v12, @"SbufTracer", v38, 0);
                  CMTimeMake(&v66, 200, 1000);
                  CMTime v57 = sampleBufferOut;
                  CMTimeAdd(&time2, &v57, &v66);
                  *(CMTime *)(v34 + 96) = time2;
                  CFRelease(v38);
                  int v38 = v40;
                }
                CFRelease(v38);
              }
            }
            uint64_t v41 = CMBaseObjectGetDerivedStorage();
            *(_OWORD *)&sampleBufferOut.CMTimeValue value = v52;
            sampleBufferOut.CMTimeEpoch epoch = v51;
            CMSampleBufferGetPresentationTimeStamp(&lhs, v12);
            time2.CMTimeValue value = lhs.value;
            CMTimeFlags v42 = lhs.flags;
            time2.CMTimeScale timescale = lhs.timescale;
            CMTimeEpoch v43 = lhs.epoch;
            CMSampleBufferGetDuration(&lhs, v12);
            v66.CMTimeValue value = lhs.value;
            CMTimeFlags v44 = lhs.flags;
            v66.CMTimeScale timescale = lhs.timescale;
            CMTimeEpoch v45 = lhs.epoch;
            CMTime lhs = *(CMTime *)(v41 + 44);
            rhs.CMTimeValue value = time2.value;
            rhs.CMTimeScale timescale = time2.timescale;
            rhs.CMTimeFlags flags = v42;
            rhs.CMTimeEpoch epoch = v43;
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            if (v42 & 1) != 0 && (v44)
            {
              MEMORY[0x19970E910](*(void *)(v41 + 168));
              if ((*(unsigned char *)(v41 + 236) & 1) == 0)
              {
                *(void *)(v41 + 224) = time2.value;
                *(_DWORD *)(v41 + 232) = time2.timescale;
                *(_DWORD *)(v41 + 236) = v42;
                *(void *)(v41 + 240) = v43;
              }
              rhs.CMTimeValue value = time2.value;
              rhs.CMTimeScale timescale = time2.timescale;
              rhs.CMTimeFlags flags = v42;
              rhs.CMTimeEpoch epoch = v43;
              time1.CMTimeValue value = v66.value;
              time1.CMTimeScale timescale = v66.timescale;
              time1.CMTimeFlags flags = v44;
              time1.CMTimeEpoch epoch = v45;
              CMTimeAdd(&lhs, &rhs, &time1);
              *(CMTime *)(v41 + 248) = lhs;
              if ((*(unsigned char *)(v41 + 284) & 1) == 0) {
                *(CMTime *)(v41 + 272) = sampleBufferOut;
              }
              CMTime rhs = sampleBufferOut;
              time1.CMTimeValue value = v66.value;
              time1.CMTimeScale timescale = v66.timescale;
              time1.CMTimeFlags flags = v44;
              time1.CMTimeEpoch epoch = v45;
              CMTimeAdd(&lhs, &rhs, &time1);
              *(CMTime *)(v41 + 296) = lhs;
              CMTime rhs = *(CMTime *)(v41 + 320);
              time1.CMTimeValue value = v66.value;
              time1.CMTimeScale timescale = v66.timescale;
              time1.CMTimeFlags flags = v44;
              time1.CMTimeEpoch epoch = v45;
              CMTimeAdd(&lhs, &rhs, &time1);
              *(CMTime *)(v41 + 320) = lhs;
              MEMORY[0x19970E930](*(void *)(v41 + 168));
            }
            uint64_t v46 = *(void (**)(void, void, opaqueCMSampleBuffer *))(v7 + 8);
            if (v46) {
              v46(*(void *)(v7 + 16), 0, v12);
            }
            MEMORY[0x19970E910](*(void *)(v7 + 168));
            CMSampleBufferGetOutputDuration(&v53, v12);
            CMTime lhs = *(CMTime *)(v7 + 200);
            CMTimeAdd(&sampleBufferOut, &lhs, &v53);
            *(CMTime *)(v7 + 200) = sampleBufferOut;
            MEMORY[0x19970E930](*(void *)(v7 + 168));
            uint64_t v10 = 0;
            goto LABEL_84;
          }
          uint64_t v10 = v31;
LABEL_29:
          CFDictionaryRef v24 = v12;
LABEL_88:
          CFRelease(v24);
          return v10;
        }
      }
      else
      {
        CMTimeEpoch v12 = 0;
        if (!v11) {
          goto LABEL_10;
        }
      }
      CFRelease(v11);
      goto LABEL_10;
    }
    uint64_t v10 = FigSignalErrorAt();
    CMTimeEpoch v12 = 0;
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

uint64_t fbarp_finishPendingProcessing()
{
  return 0;
}

void fbarp_postNotificationSync(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  long long v5 = *(NSObject **)(DerivedStorage + 344);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fbarp_postNotificationSync_block_invoke;
  block[3] = &__block_descriptor_tmp_71_0;
  void block[4] = a2;
  void block[5] = a1;
  void block[6] = 0;
  dispatch_sync(v5, block);
}

void fbarp_postNotification(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3) {
    CFRetain(a3);
  }
  CFRetain(a1);
  uint64_t v7 = *(NSObject **)(DerivedStorage + 344);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fbarp_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_73_0;
  void block[4] = a2;
  void block[5] = a1;
  void block[6] = a3;
  dispatch_async(v7, block);
}

void __fbarp_postNotificationSync_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(void *)(a1 + 40);

  fbarp_releaseAsync(v2);
}

void fbarp_releaseAsync(uint64_t a1)
{
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fbarp_releaseAsync_block_invoke;
  block[3] = &__block_descriptor_tmp_72_0;
  void block[4] = a1;
  dispatch_async(global_queue, block);
}

void __fbarp_releaseAsync_block_invoke(uint64_t a1)
{
}

void __fbarp_postNotification_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);

  fbarp_releaseAsync(v3);
}

uint64_t __fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_sTraceAllSbuf = result;
  return result;
}

uint64_t FigCaptionRendererActionCreate(void *a1)
{
  *a1 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererActionGetClassID_sRegisterFigCaptionRendererActionBaseTypeOnce, RegisterFigCaptionRendererActionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    *(_DWORD *) CMBaseObjectGetDerivedStorage() = 0;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCaptionRendererMoveToActionCreate(void *a1)
{
  *a1 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererMoveToActionGetClassID_sRegisterFigCaptionRendererMoveToActionBaseTypeOnce, RegisterFigCaptionRendererMoveToActionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (v2) {
    return v2;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E4F1DAD8];
  uint64_t v4 = FigCaptionRendererActionCreate((void *)DerivedStorage);
  if (v4) {
    FigSignalErrorAt();
  }
  else {
    *a1 = 0;
  }
  return v4;
}

__CFString *FigCaptionRendererActionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererAction: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererAction_FigCaptionRendererActionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererAction <FigCaptionRendererActionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererAction_FigCaptionRendererActionProtocol_GetDuration(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCaptionRendererAction_FigCaptionRendererActionProtocol_SetDuration(uint64_t a1, int a2)
{
  *(_DWORD *) CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t RegisterFigCaptionRendererActionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererActionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererAction]");
}

void FigCaptionRendererMoveToActionFinalize()
{
  CFAllocatorRef v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCaptionRendererMoveToActionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererMoveToAction: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererMoveToAction_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererMoveToAction <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererMoveToAction";
  return 0;
}

__CFString *FigCaptionRendererMoveToAction_FigCaptionRendererActionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererMoveToAction <FigCaptionRendererActionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererActionProtocol_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererActionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CMTimeEpoch v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererActionProtocol_SetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererActionProtocolGetProtocolID();
  uint64_t ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CMTimeEpoch v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCaptionRendererMoveToAction_FigCaptionRendererMoveToActionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererMoveToAction <FigCaptionRendererMoveToActionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererMoveToActionProtocol_GetTargetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererMoveToActionProtocol_SetTargetPosition(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  return 0;
}

uint64_t RegisterFigCaptionRendererMoveToActionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererMoveToActionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererMoveToAction]");
}

uint64_t FigCaptionClientGetTypeID()
{
  return sFigCaptionClientID;
}

uint64_t RegisterFigCaptionClientType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCaptionClientIOSurfaceID ID = result;
  return result;
}

uint64_t FigCaptionClientCreate(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    MEMORY[0x19970EE10](&sRegisterFigCaptionClientTypeOnce, RegisterFigCaptionClientType);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v5 = Instance;
      uint64_t result = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)(Instance + 16));
      if (!result) {
        *a2 = v5;
      }
    }
    else
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

NSObject *FigCaptionClientSetCGContextDevice(NSObject *result, double a2, double a3, double a4, double a5, uint64_t a6, int a7, int a8)
{
  if (result) {
    return FigCaptionRendererSessionSetCGContextDevice(result[2].isa, 0, a7, a8, a2, a3, a4, a5);
  }
  return result;
}

NSObject *FigCaptionClientSetMasterClock(NSObject *result)
{
  if (result)
  {
    isCGFloat a = result[2].isa;
    HostTimeClocCFIndex k = CMClockGetHostTimeClock();
    return FigCaptionRendererSessionSetMasterClock(isa, (uint64_t)HostTimeClock);
  }
  return result;
}

uint64_t FigCaptionClientSynchronizeDefaults(uint64_t result)
{
  if (result) {
    return FigCaptionRendererSessionSynchronizeDefaults(*(dispatch_queue_t **)(result + 16));
  }
  return result;
}

uint64_t FigCaptionClientSetBounds(uint64_t result)
{
  if (result) {
    return FigCaptionRendererSessionSetBounds(*(void *)(result + 16));
  }
  return result;
}

NSObject *FigCaptionClientSetCaptionCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return FigCaptionRendererSessionSetCaptionCacheRange(result[2].isa, a2, a3);
  }
  return result;
}

NSObject *FigCaptionClientStart(NSObject *result)
{
  if (result) {
    return FigCaptionRendererSessionStart(result[2].isa);
  }
  return result;
}

uint64_t FigCaptionClientStop(uint64_t result)
{
  if (result) {
    return FigCaptionRendererSessionStop(*(void *)(result + 16));
  }
  return result;
}

NSObject *FigCaptionClientSetTime(NSObject *result, uint64_t a2)
{
  if (result)
  {
    isCGFloat a = result[2].isa;
    long long v3 = *(_OWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
    return FigCaptionRendererSessionSetTime(isa, &v3);
  }
  return result;
}

uint64_t FigCaptionClientUpdateCGContext(uint64_t result, uint64_t a2)
{
  if (result) {
    return FigCaptionRendererSessionUpdateCGContext(*(void *)(result + 16), a2);
  }
  return result;
}

NSObject *FigCaptionClientSetCaptionArray(NSObject *result, uint64_t a2)
{
  if (result) {
    return FigCaptionRendererSessionSetCaptionArray(result[2].isa, a2);
  }
  return result;
}

uint64_t FigCaptionClientSetDefaultTextStyle(uint64_t a1, const void *a2)
{
  if (a1) {
    FigCaptionRendererSessionSetDefaultTextStyle(*(dispatch_queue_t **)(a1 + 16), a2);
  }
  return 0;
}

uint64_t fcc_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void fcc_Finalize(uint64_t a1)
{
  if (a1) {
    FigCaptionRendererSessionStop(*(void *)(a1 + 16));
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef fcc_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptionClient %p]", a1);
}

CFStringRef fcc_CopyDebugDesc(uint64_t a1)
{
  return CFCopyDescription(*(CFTypeRef *)(a1 + 16));
}

uint64_t FVDUtilsCanMirrorDisplayWithID(uint64_t a1)
{
  if (FVDUtilsCanMirrorDisplayWithID_once != -1) {
    dispatch_once(&FVDUtilsCanMirrorDisplayWithID_once, &__block_literal_global_80);
  }
  uint64_t v2 = 1;
  if (a1 >= 2 && FVDUtilsCanMirrorDisplayWithID_allowFVDMirrorIDChecks)
  {
    long long v3 = (void *)MEMORY[0x199711A30]();
    uint64_t v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F39D28], "serverIfRunning"), "displayWithDisplayId:", a1);
    if (!v4
      || (uint64_t v5 = v4, !FVDUtilsCanMirrorDisplayWithID_allowFVDSource) && [v4 displayType] == 2
      || (([v5 bounds], v7 == *MEMORY[0x1E4F1DB30])
        ? (BOOL v8 = v6 == *(double *)(MEMORY[0x1E4F1DB30] + 8))
        : (BOOL v8 = 0),
          v8 || [v5 cloneMaster]))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 1;
    }
  }
  return v2;
}

uint64_t __FVDUtilsCanMirrorDisplayWithID_block_invoke()
{
  FVDUtilsCanMirrorDisplayWithID_allowFVDSource = FigVirtualDisplayPrefsGetBooleanWithDefault(@"allow_fvd_as_mirroring_source", FVDUtilsCanMirrorDisplayWithID_allowFVDSource);
  uint64_t result = FigVirtualDisplayPrefsGetBooleanWithDefault(@"check_for_valid_mirror_id", FVDUtilsCanMirrorDisplayWithID_allowFVDMirrorIDChecks);
  FVDUtilsCanMirrorDisplayWithID_allowFVDMirrorIDChecks = result;
  return result;
}

uint64_t FVDUtilsH264EncoderSupports444()
{
  if (FVDUtilsH264EncoderSupports444_once != -1) {
    dispatch_once(&FVDUtilsH264EncoderSupports444_once, &__block_literal_global_8);
  }
  return FVDUtilsH264EncoderSupports444_result;
}

void __FVDUtilsH264EncoderSupports444_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = 16;
  if (isAppleVirtualDevice_once != -1) {
    dispatch_once(&isAppleVirtualDevice_once, &__block_literal_global_68_0);
  }
  if (isAppleVirtualDevice_result)
  {
    FVDUtilsH264EncoderSupports444_uint64_t result = 1;
  }
  else
  {
    uint64_t v0 = 0;
    mach_port_t v1 = *MEMORY[0x1E4F2EEF0];
    for (char i = 1; ; char i = 0)
    {
      char v3 = i;
      CFDictionaryRef v4 = IOServiceMatching(FVDUtilsH264EncoderSupports444_drivers[v0]);
      uint64_t MatchingService = IOServiceGetMatchingService(v1, v4);
      if (MatchingService) {
        break;
      }
      uint64_t v0 = 1;
      if ((v3 & 1) == 0) {
        return;
      }
    }
    io_object_t v6 = MatchingService;
    if (MEMORY[0x19970FC50](MatchingService, "H264EncoderCanDo444", v10, &v9)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v9 == 0;
    }
    BOOL v8 = !v7 && strncasecmp(v10, "Yes", v9) == 0;
    FVDUtilsH264EncoderSupports444_uint64_t result = v8;
    IOObjectRelease(v6);
  }
}

uint64_t FVDUtilsH264DecoderSupports444()
{
  if (FVDUtilsH264DecoderSupports444_once != -1) {
    dispatch_once(&FVDUtilsH264DecoderSupports444_once, &__block_literal_global_15_0);
  }
  return FVDUtilsH264DecoderSupports444_result;
}

void __FVDUtilsH264DecoderSupports444_block_invoke()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 16;
  if (isAppleVirtualDevice_once != -1) {
    dispatch_once(&isAppleVirtualDevice_once, &__block_literal_global_68_0);
  }
  if (isAppleVirtualDevice_result)
  {
    FVDUtilsH264DecoderSupports444_uint64_t result = 1;
  }
  else
  {
    uint64_t v0 = 0;
    mach_port_t v1 = *MEMORY[0x1E4F2EEF0];
    while (1)
    {
      CFDictionaryRef v2 = IOServiceMatching(FVDUtilsH264DecoderSupports444_drivers[v0]);
      uint64_t MatchingService = IOServiceGetMatchingService(v1, v2);
      if (MatchingService) {
        break;
      }
      if (++v0 == 3) {
        return;
      }
    }
    io_object_t v4 = MatchingService;
    if (MEMORY[0x19970FC50](MatchingService, "H264DecoderCanDo444", v8, &v7)) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v7 == 0;
    }
    BOOL v6 = !v5 && strncasecmp(v8, "Yes", v7) == 0;
    FVDUtilsH264DecoderSupports444_uint64_t result = v6;
    IOObjectRelease(v4);
  }
}

uint64_t FVDUtilsH264EncoderSupports1080p60()
{
  return 1;
}

uint64_t FVDUtilsH264EncoderSupportsBGRA()
{
  return 0;
}

uint64_t FVDUtilsH264EncoderSupportsScaling()
{
  return 0;
}

uint64_t FVDUtilsH264EncoderSupports4K30()
{
  if (FVDUtilsH264EncoderSupports4K30_once != -1) {
    dispatch_once(&FVDUtilsH264EncoderSupports4K30_once, &__block_literal_global_18_0);
  }
  return FVDUtilsH264EncoderSupports4K30_result;
}

void __FVDUtilsH264EncoderSupports4K30_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = 16;
  if (isAppleVirtualDevice_once != -1) {
    dispatch_once(&isAppleVirtualDevice_once, &__block_literal_global_68_0);
  }
  if (isAppleVirtualDevice_result)
  {
    FVDUtilsH264EncoderSupports4K30_uint64_t result = 1;
  }
  else
  {
    mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v1 = IOServiceMatching("AppleAVE2Driver");
    uint64_t MatchingService = IOServiceGetMatchingService(v0, v1);
    if (MatchingService)
    {
      io_object_t v3 = MatchingService;
      if (MEMORY[0x19970FC50](MatchingService, "H264EncoderCanDo4k30", v7, &v6)) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = v6 == 0;
      }
      BOOL v5 = !v4 && strncasecmp(v7, "Yes", v6) == 0;
      FVDUtilsH264EncoderSupports4K30_uint64_t result = v5;
      IOObjectRelease(v3);
    }
  }
}

uint64_t FVDUtilsHEVCEncoderSupports4K60()
{
  if (FVDUtilsHEVCEncoderSupports4K60_once != -1) {
    dispatch_once(&FVDUtilsHEVCEncoderSupports4K60_once, &__block_literal_global_21_1);
  }
  return FVDUtilsHEVCEncoderSupports4K60_result;
}

void __FVDUtilsHEVCEncoderSupports4K60_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = 16;
  if (isAppleVirtualDevice_once != -1) {
    dispatch_once(&isAppleVirtualDevice_once, &__block_literal_global_68_0);
  }
  if (isAppleVirtualDevice_result)
  {
    FVDUtilsHEVCEncoderSupports4K60_uint64_t result = 1;
  }
  else
  {
    mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v1 = IOServiceMatching("AppleAVE2Driver");
    uint64_t MatchingService = IOServiceGetMatchingService(v0, v1);
    if (MatchingService)
    {
      io_object_t v3 = MatchingService;
      if (MEMORY[0x19970FC50](MatchingService, "HEVCEncoderCanDo4k60", v7, &v6)) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = v6 == 0;
      }
      BOOL v5 = !v4 && strncasecmp(v7, "Yes", v6) == 0;
      FVDUtilsHEVCEncoderSupports4K60_uint64_t result = v5;
      IOObjectRelease(v3);
    }
  }
}

uint64_t FVDUtilsHEVCEncoderSupports42010()
{
  if (FVDUtilsHEVCEncoderSupports4K60_once != -1) {
    dispatch_once(&FVDUtilsHEVCEncoderSupports4K60_once, &__block_literal_global_21_1);
  }
  return FVDUtilsHEVCEncoderSupports4K60_result;
}

uint64_t FVDUtilsHEVCEncoderSupports44410()
{
  if (FVDUtilsHEVCEncoderSupports4K60_once != -1) {
    dispatch_once(&FVDUtilsHEVCEncoderSupports4K60_once, &__block_literal_global_21_1);
  }
  return FVDUtilsHEVCEncoderSupports4K60_result;
}

uint64_t FVDUtilsHEVCDecodeSupported()
{
  if (FVDUtilsHEVCDecodeSupported_once != -1) {
    dispatch_once(&FVDUtilsHEVCDecodeSupported_once, &__block_literal_global_24_0);
  }
  return FVDUtilsHEVCDecodeSupported_result;
}

void __FVDUtilsHEVCDecodeSupported_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (isAppleVirtualDevice_once != -1) {
    dispatch_once(&isAppleVirtualDevice_once, &__block_literal_global_68_0);
  }
  if (isAppleVirtualDevice_result)
  {
    FVDUtilsHEVCDecodeSupported_uint64_t result = 1;
  }
  else
  {
    uint64_t v0 = 0;
    char v1 = 1;
    mach_port_t v2 = *MEMORY[0x1E4F2EEF0];
    do
    {
      char v3 = v1;
      unsigned int v9 = 16;
      CFDictionaryRef v4 = IOServiceMatching(FVDUtilsHEVCDecodeSupported_drivers[v0]);
      uint64_t MatchingService = IOServiceGetMatchingService(v2, v4);
      if (MatchingService)
      {
        io_object_t v6 = MatchingService;
        BOOL v7 = MEMORY[0x19970FC50](MatchingService, "HEVCSupported", v10, &v9) || v9 == 0;
        BOOL v8 = !v7 && strncasecmp(v10, "Yes", v9) == 0;
        FVDUtilsHEVCDecodeSupported_uint64_t result = v8;
        IOObjectRelease(v6);
        if (FVDUtilsHEVCDecodeSupported_result) {
          break;
        }
      }
      char v1 = 0;
      uint64_t v0 = 1;
    }
    while ((v3 & 1) != 0);
  }
}

uint64_t FVDUtilsAGXPixelFormatsSupported()
{
  if (FVDUtilsAGXPixelFormatsSupported_once != -1) {
    dispatch_once(&FVDUtilsAGXPixelFormatsSupported_once, &__block_literal_global_27_0);
  }
  return FVDUtilsAGXPixelFormatsSupported_result;
}

uint64_t FVDUtilsMainDisplaySupportsExtendedColor()
{
  if (FVDUtilsMainDisplaySupportsExtendedColor_once != -1) {
    dispatch_once(&FVDUtilsMainDisplaySupportsExtendedColor_once, &__block_literal_global_29_0);
  }
  return FVDUtilsMainDisplaySupportsExtendedColor_result;
}

uint64_t __FVDUtilsMainDisplaySupportsExtendedColor_block_invoke()
{
  uint64_t result = CelestialIsAppleTV();
  if (!result)
  {
    uint64_t result = MGGetBoolAnswer();
    FVDUtilsMainDisplaySupportsExtendedColor_uint64_t result = result;
  }
  return result;
}

uint64_t FVDUtilsEncoderCodecSupported(int a1)
{
  CFArrayRef listOfVideoEncodersOut = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45610], (const void *)*MEMORY[0x1E4F1CFD0]);
  if (VTCopyVideoEncoderList(Mutable, &listOfVideoEncodersOut)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = listOfVideoEncodersOut == 0;
  }
  if (v3 || (CFIndex Count = CFArrayGetCount(listOfVideoEncodersOut), Count < 1))
  {
LABEL_9:
    uint64_t v7 = 0;
    if (!Mutable) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(listOfVideoEncodersOut, v6);
    FigCFDictionaryGetInt32IfPresent();
    if (!a1) {
      break;
    }
    if (v5 == ++v6) {
      goto LABEL_9;
    }
  }
  uint64_t v7 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if (listOfVideoEncodersOut) {
    CFRelease(listOfVideoEncodersOut);
  }
  return v7;
}

uint64_t FVDUtilsEncryptedEncodeSupported()
{
  if (FVDUtilsEncryptedEncodeSupported_once != -1) {
    dispatch_once(&FVDUtilsEncryptedEncodeSupported_once, &__block_literal_global_34_1);
  }
  return FVDUtilsEncryptedEncodeSupported_result;
}

uint64_t __FVDUtilsEncryptedEncodeSupported_block_invoke()
{
  uint64_t result = FVDUtilsEncoderCodecSupported(1869117027);
  FVDUtilsEncryptedEncodeSupported_uint64_t result = result;
  return result;
}

uint64_t FVDUtilsEncryptedDecodeSupported()
{
  if (FVDUtilsEncryptedDecodeSupported_once != -1) {
    dispatch_once(&FVDUtilsEncryptedDecodeSupported_once, &__block_literal_global_36);
  }
  return FVDUtilsEncryptedDecodeSupported_result;
}

uint64_t __FVDUtilsEncryptedDecodeSupported_block_invoke()
{
  uint64_t result = VTIsHardwareDecodeSupported(0x6F687663u);
  FVDUtilsEncryptedDecodeSupported_uint64_t result = result;
  return result;
}

CFStringRef FVDUtilsCreateDisplayUUID()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memset(out, 0, sizeof(out));
  memset(v1, 0, sizeof(v1));
  uuid_generate_random(out);
  uuid_unparse(out, (char *)v1);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v1, 0x8000100u);
}

uint64_t FVDUtilsLoadVCPEncoder()
{
  if (FVDUtilsLoadVCPEncoder_once != -1) {
    dispatch_once(&FVDUtilsLoadVCPEncoder_once, &__block_literal_global_38);
  }
  uint64_t result = FVDUtilsLoadVCPEncoder_success;
  if (!FVDUtilsLoadVCPEncoder_success)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return FVDUtilsLoadVCPEncoder_success;
  }
  return result;
}

uint64_t __FVDUtilsLoadVCPEncoder_block_invoke()
{
  uint64_t result = FigServer_IsServerProcess();
  if (!result)
  {
    char v1 = dlopen("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", 4);
    if (v1 && (mach_port_t v2 = (uint64_t (*)(void))dlsym(v1, "VPModuleInitialize")) != 0)
    {
      uint64_t result = v2();
      char v3 = 1;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      char v3 = 0;
    }
    FVDUtilsLoadVCPEncoder_success = v3;
  }
  return result;
}

CFStringRef FVDUtilsCreateLogPrefix(const __CFString *a1, unint64_t a2)
{
  if (!a1)
  {
    CFDictionaryRef v4 = "";
    goto LABEL_7;
  }
  CFStringRef v3 = a1;
  CFDictionaryRef v4 = "";
  if (CFStringGetLength(a1) < 1)
  {
LABEL_7:
    CFStringRef v3 = &stru_1EE53F4B8;
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s%@ [%04x]", v4, v3, (unsigned __int16)(bswap64(0x8A970BE7488FDA55 * (a2 ^ (a2 >> 4))) ^ (-9643 * (a2 ^ (a2 >> 4)))));
  }
  if (CFStringGetCharacterAtIndex(v3, 0) != 32) {
    CFDictionaryRef v4 = " ";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s%@ [%04x]", v4, v3, (unsigned __int16)(bswap64(0x8A970BE7488FDA55 * (a2 ^ (a2 >> 4))) ^ (-9643 * (a2 ^ (a2 >> 4)))));
}

uint64_t FVDUtilsSessionServerEnabled()
{
  if (FVDUtilsSessionServerEnabled_once != -1) {
    dispatch_once(&FVDUtilsSessionServerEnabled_once, &__block_literal_global_50);
  }
  return FVDUtilsSessionServerEnabled_result;
}

uint64_t __FVDUtilsSessionServerEnabled_block_invoke()
{
  FVDUtilsSessionServerEnabled_uint64_t result = FigVirtualDisplayPrefsGetBooleanWithDefault(@"fvdsessionserver_enabled", FVDUtilsSessionServerEnabled_result);
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t FVDUtilsStartXPCServers()
{
  FigVirtualFramebufferServerStart();

  return FigVirtualDisplaySessionServerStart();
}

uint64_t FVDUtilsGetTempDirectory()
{
  if (FVDUtilsGetTempDirectory_once != -1) {
    dispatch_once(&FVDUtilsGetTempDirectory_once, &__block_literal_global_57);
  }
  return FVDUtilsGetTempDirectory_tmpDir;
}

uint64_t __FVDUtilsGetTempDirectory_block_invoke()
{
  uint64_t v0 = (__CFString *)FigVirtualDisplayPrefsCopyValue(@"fvd_tempdir_path");
  if (!v0)
  {
    char v1 = NSTemporaryDirectory();
    if (v1) {
      uint64_t v0 = (__CFString *)v1;
    }
    else {
      uint64_t v0 = @"/tmp";
    }
    CFRetain(v0);
  }
  FVDUtilsGetTempDirectory_tmpDir = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@/", v0);
  CFRelease(v0);
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t __isAppleVirtualDevice_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  isAppleVirtualDevice_uint64_t result = result;
  return result;
}

uint64_t FigAssetWatchdogMonitorCommonQueues()
{
  if (PerformURLAssetOneTimeInitialization_static_init != -1) {
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
  }
  FigWatchdogMonitorDispatchQueue();

  return FigWatchdogMonitorDispatchQueue();
}

uint64_t URLAssetCreateAssetTrack(uint64_t a1, const void *a2, const void *a3, const void *a4, const char *a5, NSObject *a6, char a7, char a8, const __CFDictionary *a9, char a10, char a11, void *a12)
{
  int IsItOKToLogURLs = FigIsItOKToLogURLs();
  if (a11) {
    BOOL v20 = 1;
  }
  else {
    BOOL v20 = IsItOKToLogURLs == 0;
  }
  char v21 = !v20;
  if (!a2 || !a3 || !a12) {
    return FigSignalErrorAt();
  }
  char v34 = v21;
  FigAssetTrackGetClassID();
  uint64_t v22 = CMDerivedObjectCreate();
  if (v22) {
    return v22;
  }
  CFDictionaryRef v23 = a5;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(0);
  if (InternalURLTrackGetTypeID_sRegisterInternalURLTrackTypeOnce != -1) {
    dispatch_once_f(&InternalURLTrackGetTypeID_sRegisterInternalURLTrackTypeOnce, &InternalURLTrackGetTypeID_sInternalURLTrackID, (dispatch_function_t)RegisterInternalURLTrackType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v27 = Instance;
    *(void *)(Instance + 16) = CFRetain(a2);
    *(void *)(v27 + 24) = CFRetain(a3);
    if (a4) {
      CFTypeRef v28 = CFRetain(a4);
    }
    else {
      CFTypeRef v28 = 0;
    }
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 48) = a6;
    dispatch_retain(a6);
    *(unsigned char *)(v27 + 64) = a7;
    *(unsigned char *)(v27 + 65) = a8;
    strncpy((char *)(v27 + 80), v23, 0xAuLL);
    *(unsigned char *)(v27 + 90) = v34;
    CFTypeRef v29 = dispatch_group_create();
    *(void *)(v25 + 24) = v29;
    *(void *)(v27 + 56) = v29;
    dispatch_retain(v29);
    AllPropertyKeys = (const void *)FigAssetTrackGetAllPropertyKeys();
    uint64_t PropertyStore = CreatePropertyStore(AllPropertyKeys, @"assetTrackNotice_PropertyFailedToLoad", @"assetTrackNotice_PropertyLoaded", @"assetTrackNotice_PropertyRevised", @"assetTrackNotice_BatchPropertyLoadComplete", a6, *(NSObject **)(v25 + 24), (uint64_t)URLAssetTrackPropertyWorkFunction, (const void *)v27, (void *)(v25 + 8));
    if (PropertyStore) {
      goto LABEL_26;
    }
    FigCFWeakReferenceStore();
    if (a9) {
      CFDictionaryApplyFunction(a9, (CFDictionaryApplierFunction)TrackMacroPropertyDefinitionApplierFunction, *(void **)(v25 + 8));
    }
    uint64_t PropertyStore = CreateValidationStore(@"assetTrackNotice_ValidationComplete", a6, *(NSObject **)(v25 + 24), (uint64_t)URLAssetTrackValidationWorkFunction, (const void *)v27, (void *)(v25 + 16));
    if (PropertyStore)
    {
LABEL_26:
      uint64_t v32 = PropertyStore;
      CFRelease((CFTypeRef)v27);
      return v32;
    }
    *(unsigned char *)(v25 + 32) = a10;
    *uint64_t DerivedStorage = v27;
    goto LABEL_22;
  }
  uint64_t v22 = FigSignalErrorAt();
  if (v22) {
    return v22;
  }
LABEL_22:
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v32 = 0;
  *a12 = 0;
  return v32;
}

uint64_t URLAssetTrackForwardNotificationFromStore()
{
  return FigDispatchAsyncPostNotification();
}

uint64_t URLAssetTrackSetComplainForSyncQueries(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return PropertyStoreSetComplainForSyncQueries(v3, a2);
}

uint64_t FigAssetCreateWithURL(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  int IsItOKToLogURLs = FigIsItOKToLogURLs();
  char v11 = (a3 & 0x200) == 0 && IsItOKToLogURLs != 0;
  if (PerformURLAssetOneTimeInitialization_static_init != -1)
  {
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
    if (a2) {
      goto LABEL_9;
    }
LABEL_25:
    uint64_t InternalURLAsset = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (!a2) {
    goto LABEL_25;
  }
LABEL_9:
  if (!a5 || (a3 & 0xFFFFFFFFFFFFFCC2) != 0) {
    goto LABEL_25;
  }
  FigAssetGetClassID();
  uint64_t InternalURLAsset = CMDerivedObjectCreate();
  if (InternalURLAsset) {
    goto LABEL_26;
  }
  if (!a4
    || (DataCFArrayRef Value = (const __CFData *)FigCFDictionaryGetDataValue()) == 0
    || (CFDictionaryRef v14 = FigCFHTTPCopyClientProcessName(DataValue)) == 0)
  {
    CFDictionaryRef v14 = CFRetain(@"[]");
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v14) {
    CFRelease(v14);
  }
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t InternalURLAsset = CreateInternalURLAsset(0, a2, 0, 0, a3, a4, v11, DerivedStorage);
  if (InternalURLAsset)
  {
LABEL_26:
    uint64_t v18 = InternalURLAsset;
    if (!a5) {
      return v18;
    }
    goto LABEL_22;
  }
  FigGetUpTimeNanoseconds();
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  InitializeProperty(DerivedStorage[1], @"assetProperty_CreationTime", 2, 0, (uint64_t)SInt64);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (SInt64) {
    CFRelease(SInt64);
  }
  uint64_t v18 = 0;
LABEL_22:
  *a5 = 0;
  return v18;
}

uint64_t CreateInternalURLAsset(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, const void *a6, char a7, uint64_t *a8)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t valuePtr = a5;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  *(_OWORD *)__str = 0u;
  long long v61 = 0u;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  getpid();
  int v57 = 0;
  char v56 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  CFTypeRef v54 = a4;
  if (!a4) {
    FigMediaparserdUtilities_EnsureProcessLaunched();
  }
  FigCFDictionaryGetInt32IfPresent();
  CFGetAllocator(a1);
  if (InternalURLAssetGetTypeID_sRegisterInternalURLAssetTypeOnce != -1) {
    dispatch_once_f(&InternalURLAssetGetTypeID_sRegisterInternalURLAssetTypeOnce, &InternalURLAssetGetTypeID_sInternalURLAssetID, (dispatch_function_t)RegisterInternalURLAssetType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return FigSignalErrorAt();
  }
  uint64_t v17 = Instance;
  CMTime v53 = a8;
  *(void *)(Instance + 80) = valuePtr;
  if (a6)
  {
    CFDictionaryRef v18 = (const __CFDictionary *)CFRetain(a6);
    *(void *)(v17 + 88) = v18;
    CMTime v19 = (void *)(v17 + 88);
    *(unsigned char *)(v17 + 610) = a7;
    BOOL v20 = (const char *)(v17 + 584);
    *(unsigned char *)(v17 + 584) = 0;
    if (v18)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v18, @"assetOption_LoggingIdentifier");
      if (Value)
      {
        CFStringRef v22 = Value;
        CFTypeRef cf = a6;
        CFDictionaryRef v23 = a1;
        CFDictionaryRef v24 = a3;
        CFTypeID v25 = CFGetTypeID(Value);
        if (v25 == CFStringGetTypeID()) {
          CFStringGetCString(v22, (char *)(v17 + 584), 10, 0x600u);
        }
        a3 = v24;
        a1 = v23;
        a6 = cf;
      }
    }
  }
  else
  {
    *(void *)(Instance + 88) = 0;
    CMTime v19 = (void *)(Instance + 88);
    *(unsigned char *)(Instance + 610) = a7;
    BOOL v20 = (const char *)(Instance + 584);
    *(unsigned char *)(Instance + 584) = 0;
  }
  *(void *)(v17 + 536) = FigOSTransactionCreate();
  snprintf(__str, 0x100uLL, "URLAssetWorkQueue.%s", v20);
  *(void *)(v17 + 96) = FigDispatchQueueCreateWithPriority();
  FigThreadMakeDispatchQueueAbortable();
  uint64_t v26 = dispatch_group_create();
  *(void *)(DerivedStorage + 24) = v26;
  *(void *)(v17 + 104) = v26;
  dispatch_retain(v26);
  snprintf(__str, 0x100uLL, "URLAssetMiscQueue.%s", v20);
  *(void *)(v17 + 472) = FigDispatchQueueCreateWithPriority();
  CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFUUIDRef v28 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v28)
  {
    CFUUIDRef v29 = v28;
    *(void *)(v17 + 336) = CFUUIDCreateString(v27, v28);
    CFRelease(v29);
  }
  cfCGFloat a = a3;
  *(void *)(v17 + 136) = FigSimpleMutexCreate();
  CFTypeRef v30 = (const void **)MEMORY[0x1E4F1CFD0];
  if (*(void *)(v17 + 88))
  {
    DictionaryCFStringRef Value = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    if (!DictionaryValue || (CMTimeMakeFromDictionary(&v55, DictionaryValue), (v55.flags & 0x1D) != 1)) {
      *(unsigned char *)(v17 + 216) = CFDictionaryGetValue(*(CFDictionaryRef *)(v17 + 88), @"assetOption_MakeReadAheadAssertionWhenCreatingByteStream") == *v30;
    }
  }
  AllPropertyKeys = (const void *)FigAssetGetAllPropertyKeys();
  CFAllocatorRef v33 = (uint64_t *)(DerivedStorage + 8);
  uint64_t PropertyStore = CreatePropertyStore(AllPropertyKeys, @"assetNotice_PropertyFailedToLoad", @"assetNotice_PropertyLoaded", @"assetNotice_PropertyRevised", @"assetNotice_BatchPropertyLoadComplete", *(NSObject **)(v17 + 96), *(NSObject **)(DerivedStorage + 24), (uint64_t)URLAssetPropertyWorkFunction, (const void *)v17, (void *)(DerivedStorage + 8));
  if (PropertyStore) {
    goto LABEL_62;
  }
  FigCFWeakReferenceStore();
  uint64_t PropertyStore = CreateTrackMacroPropertyState((uint64_t)a1, *v33, (uint64_t)URLAssetCopyStoreForTrack, (void *)(v17 + 600));
  if (PropertyStore) {
    goto LABEL_62;
  }
  InitializeProperty(*v33, @"assetProperty_CreationOptionsDictionary", 2, 0, (uint64_t)a6);
  CFNumberRef v35 = CFNumberCreate(v27, kCFNumberSInt64Type, &valuePtr);
  InitializeProperty(*v33, @"assetProperty_CreationFlags", 2, 0, (uint64_t)v35);
  if (v35) {
    CFRelease(v35);
  }
  InitializeProperty(*v33, @"assetProperty_CreationURL", 2, 0, a2);
  InitializeProperty(*v33, @"assetProperty_InstanceUUID", 2, 0, *(void *)(v17 + 336));
  if (!v54)
  {
    if (*v19)
    {
      StringCFStringRef Value = (const void *)FigCFDictionaryGetStringValue();
      if (StringValue) {
        InternalURLAssetSetDeclaredAssetType(*v33, v17, StringValue);
      }
    }
  }
  if (!FigCFDictionaryGetBooleanIfPresent()) {
    *(unsigned char *)(v17 + 609) = 0;
  }
  InternalURLAssetSetStorageSession(*(void **)(DerivedStorage + 8), v17);
  uint64_t PropertyStore = CreateValidationStore(@"assetNotice_ValidationComplete", *(NSObject **)(v17 + 96), *(NSObject **)(v17 + 104), (uint64_t)URLAssetValidationWorkFunction, (const void *)v17, (void *)(DerivedStorage + 16));
  if (PropertyStore) {
    goto LABEL_62;
  }
  if (a2)
  {
    *(_DWORD *)(v17 + 64) = 1431456810;
    int32_t v36 = (const void *)a2;
LABEL_34:
    *(void *)(v17 + 72) = CFRetain(v36);
    goto LABEL_35;
  }
  int32_t v36 = cfa;
  if (cfa)
  {
    *(_DWORD *)(v17 + 64) = 708989738;
    goto LABEL_34;
  }
  *(_DWORD *)(v17 + 64) = 709251626;
  if (v54) {
    CFTypeRef v43 = CFRetain(v54);
  }
  else {
    CFTypeRef v43 = 0;
  }
  *(void *)(v17 + 72) = v43;
  InitializeProperty(*v33, @"assetProperty_FormatReader", 2, 0, (uint64_t)v54);
LABEL_35:
  CFTypeRef v59 = 0;
  int v38 = *(_DWORD *)(v17 + 64);
  if (v38 == 708989738)
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    CMTimeFlags v44 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v42 + 48);
    if (!v44 || (v44(CMBaseObject, *MEMORY[0x1E4F1EC78], v27, &v59), (CFTypeRef v39 = v59) == 0))
    {
LABEL_50:
      BOOL v45 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    if (v38 != 1431456810) {
      goto LABEL_50;
    }
    CFTypeRef v39 = *(CFTypeRef *)(v17 + 72);
    if (v39) {
      CFTypeRef v39 = CFRetain(v39);
    }
    CFTypeRef v59 = v39;
    if (!v39) {
      goto LABEL_50;
    }
  }
  BOOL v45 = FigCFHTTPIsHTTPBasedURL((const __CFURL *)v39);
  if (v59) {
    CFRelease(v59);
  }
LABEL_51:
  *(unsigned char *)(v17 + 608) = v45;
  uint64_t PropertyStore = InternalURLAssetCreateByteStreamProvider(v17);
  if (PropertyStore)
  {
LABEL_62:
    uint64_t v49 = PropertyStore;
    CFRelease((CFTypeRef)v17);
    return v49;
  }
  InitializeProperty(*v33, @"assetProperty_ByteStreamProvider", 2, 0, *(void *)(v17 + 480));
  *(void *)(v17 + 56) = FigSimpleMutexCreate();
  InitializeProperty(*v33, @"assetProperty_DownloadToken", 2, 0, *MEMORY[0x1E4F1CFD0]);
  FigCFWeakReferenceInit();
  FigDispatchOnceInitWithinObject();
  if (*(void *)(v17 + 88))
  {
    uint64_t v46 = CFDictionaryGetValue((CFDictionaryRef)a6, @"assetOption_CustomURLLoader");
    CFTypeRef v47 = v53;
    if (v46) {
      CFTypeRef v48 = CFRetain(v46);
    }
    else {
      CFTypeRef v48 = 0;
    }
    *(void *)(v17 + 488) = v48;
  }
  else
  {
    CFTypeRef v48 = *(CFTypeRef *)(v17 + 488);
    CFTypeRef v47 = v53;
  }
  InitializeProperty(*v33, @"assetProperty_CustomURLLoader", 2, 0, (uint64_t)v48);
  InitializeProperty(*v33, @"assetProperty_DownloadToDestinationResult", 2, 0, 0);
  uint64_t v49 = 0;
  *CFTypeRef v47 = v17;
  return v49;
}

uint64_t URLAssetForwardNotificationFromStore()
{
  return FigDispatchAsyncPostNotification();
}

uint64_t FigAssetCreateWithByteStream(uint64_t a1, const void *a2, uint64_t a3, const void *a4, void *a5)
{
  int IsItOKToLogURLs = FigIsItOKToLogURLs();
  char v11 = (a3 & 0x200) == 0 && IsItOKToLogURLs != 0;
  if (PerformURLAssetOneTimeInitialization_static_init == -1)
  {
    if (a2) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t InternalURLAsset = FigSignalErrorAt();
    if (!a5) {
      return InternalURLAsset;
    }
    goto LABEL_14;
  }
  dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
  if (!a2) {
    goto LABEL_17;
  }
LABEL_9:
  if (a5)
  {
    if ((a3 & 0xFFFFFFFFFFFFFCC2) != 0)
    {
      uint64_t InternalURLAsset = FigSignalErrorAt();
    }
    else
    {
      FigAssetGetClassID();
      uint64_t InternalURLAsset = CMDerivedObjectCreate();
      if (!InternalURLAsset)
      {
        uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
        uint64_t InternalURLAsset = CreateInternalURLAsset(0, 0, a2, 0, a3, a4, v11, DerivedStorage);
        if (!InternalURLAsset)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
      }
    }
LABEL_14:
    *a5 = 0;
    return InternalURLAsset;
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetCreateWithBlockBuffer(const __CFAllocator *a1, CMBlockBufferRef theBuffer, int a3, const __CFString *a4, uint64_t a5, const void *a6, CFTypeRef *a7)
{
  CFTypeRef v37 = 0;
  if (!theBuffer)
  {
    uint64_t v25 = FigSignalErrorAt();
    CFStringRef v26 = 0;
    CFStringRef v8 = 0;
    goto LABEL_41;
  }
  if (a3 == -1) {
    goto LABEL_20;
  }
  CFStringRef v8 = a4;
  if (!a4)
  {
LABEL_54:
    uint64_t v25 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (!a7 || !CMBlockBufferGetDataLength(theBuffer)) {
    goto LABEL_20;
  }
  uint64_t v13 = CMByteStreamCreateForBlockBuffer();
  if (v13)
  {
LABEL_21:
    uint64_t v25 = v13;
    CFStringRef v8 = 0;
LABEL_22:
    CFStringRef v26 = 0;
    goto LABEL_41;
  }
  if (a3 == 2)
  {
    CFTypeID v18 = CFGetTypeID(v8);
    if (v18 == CFStringGetTypeID())
    {
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      CFAllocatorRef v27 = *(uint64_t (**)(uint64_t, void, const __CFString *))(v20 + 56);
      if (v27)
      {
        CFUUIDRef v28 = (void *)MEMORY[0x1E4F1FB58];
LABEL_29:
        uint64_t v13 = v27(CMBaseObject, *v28, v8);
        if (!v13)
        {
          uint64_t v29 = FigAtomicIncrement32();
          CFStringRef v26 = CFStringCreateWithFormat(a1, 0, @"DataAsset_%d", v29);
          if (!v26)
          {
            uint64_t v25 = FigSignalErrorAt();
            CFStringRef v8 = 0;
            goto LABEL_41;
          }
          CFStringRef v8 = (const __CFString *)CFURLCreateWithFileSystemPath(a1, v26, kCFURLPOSIXPathStyle, 0);
          if (v8)
          {
            uint64_t v30 = CMByteStreamGetCMBaseObject();
            uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v31) {
              uint64_t v32 = v31;
            }
            else {
              uint64_t v32 = 0;
            }
            int32_t v36 = *(uint64_t (**)(uint64_t, void, const __CFString *))(v32 + 56);
            if (v36)
            {
              uint64_t v25 = v36(v30, *MEMORY[0x1E4F1EC78], v8);
              if (v25) {
                goto LABEL_41;
              }
              goto LABEL_51;
            }
LABEL_40:
            uint64_t v25 = 4294954514;
            goto LABEL_41;
          }
          uint64_t v34 = FigSignalErrorAt();
LABEL_58:
          uint64_t v25 = v34;
          goto LABEL_41;
        }
        goto LABEL_21;
      }
      goto LABEL_34;
    }
    goto LABEL_20;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      CFTypeID v14 = CFGetTypeID(v8);
      if (v14 == CFStringGetTypeID())
      {
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        CFAllocatorRef v27 = *(uint64_t (**)(uint64_t, void, const __CFString *))(v17 + 56);
        if (v27)
        {
          CFUUIDRef v28 = (void *)MEMORY[0x1E4F1FBA8];
          goto LABEL_29;
        }
LABEL_34:
        CFStringRef v8 = 0;
LABEL_39:
        CFStringRef v26 = 0;
        goto LABEL_40;
      }
    }
    goto LABEL_20;
  }
  CFTypeID v21 = CFGetTypeID(v8);
  if (v21 != CFStringGetTypeID())
  {
LABEL_20:
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_21;
  }
  CFStringRef v8 = (const __CFString *)CFURLCreateWithFileSystemPath(a1, v8, kCFURLPOSIXPathStyle, 0);
  if (!v8) {
    goto LABEL_54;
  }
  uint64_t v22 = CMByteStreamGetCMBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  CFAllocatorRef v33 = *(uint64_t (**)(uint64_t, void, const __CFString *))(v24 + 56);
  if (!v33) {
    goto LABEL_39;
  }
  uint64_t v34 = v33(v22, *MEMORY[0x1E4F1EC78], v8);
  CFStringRef v26 = 0;
  if (v34) {
    goto LABEL_58;
  }
LABEL_51:
  uint64_t v25 = FigAssetCreateWithByteStream((uint64_t)a1, 0, a5, a6, &v37);
  if (!v25)
  {
    *a7 = v37;
    CFTypeRef v37 = 0;
  }
LABEL_41:
  if (v37) {
    CFRelease(v37);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v25;
}

uint64_t FigAssetCreateWithFormatReader(uint64_t a1, const void *a2, uint64_t a3, const void *a4, void *a5)
{
  CFTypeRef cf = 0;
  CFTypeRef v23 = 0;
  int IsItOKToLogURLs = FigIsItOKToLogURLs();
  char v11 = (a3 & 0x200) == 0 && IsItOKToLogURLs != 0;
  if (PerformURLAssetOneTimeInitialization_static_init != -1)
  {
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
    if (a2) {
      goto LABEL_9;
    }
LABEL_27:
    uint64_t InternalURLAsset = FigSignalErrorAt();
    goto LABEL_28;
  }
  if (!a2) {
    goto LABEL_27;
  }
LABEL_9:
  if (!a5 || (a3 & 0xFFFFFFFFFFFFFCC2) != 0) {
    goto LABEL_27;
  }
  FigAssetGetClassID();
  uint64_t InternalURLAsset = CMDerivedObjectCreate();
  if (InternalURLAsset
    || (uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage(),
        uint64_t InternalURLAsset = CreateInternalURLAsset(v23, 0, 0, a2, a3, a4, v11, DerivedStorage),
        InternalURLAsset))
  {
LABEL_28:
    uint64_t v19 = InternalURLAsset;
    CFTypeRef v20 = v23;
    if (!a5) {
      return v19;
    }
    goto LABEL_24;
  }
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a2);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v16 + 48);
  if (v17)
  {
    v17(FigBaseObject, @"CanMutate", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v18 = cf;
  }
  else
  {
    CFTypeRef v18 = 0;
  }
  if (v18 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
    *(unsigned char *)(*DerivedStorage + 456) = 1;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v19 = 0;
  CFTypeRef v20 = v23;
LABEL_24:
  *a5 = v20;
  return v19;
}

uint64_t FigAssetCreateWithMovieProxyData(const __CFAllocator *a1, CFDataRef theData, uint64_t a3, uint64_t a4, void *a5)
{
  if (PerformURLAssetOneTimeInitialization_static_init != -1)
  {
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
    if (theData) {
      goto LABEL_3;
    }
    return FigSignalErrorAt();
  }
  if (!theData) {
    return FigSignalErrorAt();
  }
LABEL_3:
  if (!CFDataGetLength(theData)) {
    return FigSignalErrorAt();
  }
  if (!a5) {
    return FigSignalErrorAt();
  }
  Mutableuint64_t Copy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return FigSignalErrorAt();
  }
  uint64_t v10 = (__CFDictionary *)MutableCopy;
  StringCFStringRef Value = (const void *)FigCFDictionaryGetStringValue();
  if (StringValue) {
    CFStringRef v12 = (const __CFString *)CFRetain(StringValue);
  }
  else {
    CFStringRef v12 = 0;
  }
  CFDictionarySetValue(v10, @"assetOption_IsMovieProxy", (const void *)*MEMORY[0x1E4F1CFD0]);
  BlockBufferWithCFDataNouint64_t Copy = FigCreateBlockBufferWithCFDataNoCopy();
  if (BlockBufferWithCFDataNoCopy
    || (BlockBufferWithCFDataNouint64_t Copy = CMByteStreamCreateForBlockBuffer(), BlockBufferWithCFDataNoCopy))
  {
    uint64_t v21 = BlockBufferWithCFDataNoCopy;
    if (!v12) {
      goto LABEL_24;
    }
  }
  else
  {
    if (!v12)
    {
      CFStringRef v12 = CFStringCreateWithFormat(a1, 0, @"MovieProxy_%p-%p.mov", theData, 0);
      if (!v12)
      {
        uint64_t v21 = FigSignalErrorAt();
        goto LABEL_24;
      }
    }
    CFURLRef v14 = CFURLCreateWithFileSystemPath(a1, v12, kCFURLPOSIXPathStyle, 0);
    if (v14)
    {
      CFURLRef v15 = v14;
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(uint64_t (**)(uint64_t, void, CFURLRef))(v18 + 56);
      if (v19)
      {
        uint64_t v20 = v19(CMBaseObject, *MEMORY[0x1E4F1EC78], v15);
        if (!v20) {
          uint64_t v20 = FigAssetCreateWithByteStream((uint64_t)a1, 0, a3, v10, a5);
        }
        uint64_t v21 = v20;
      }
      else
      {
        uint64_t v21 = 4294954514;
      }
      CFRelease(v12);
      CFStringRef v22 = (const __CFString *)v15;
      goto LABEL_23;
    }
    uint64_t v21 = FigSignalErrorAt();
  }
  CFStringRef v22 = v12;
LABEL_23:
  CFRelease(v22);
LABEL_24:
  CFRelease(v10);
  return v21;
}

uint64_t FigAssetCreatePListFromOptionsDict(void *a1, void *a2)
{
  mach_port_t v2 = a2;
  if (!a2)
  {
    uint64_t v14 = FigSignalErrorAt();
    Mutableuint64_t Copy = 0;
    goto LABEL_25;
  }
  Mutableuint64_t Copy = a1;
  if (a1)
  {
    URLCFStringRef Value = FigCFDictionaryGetURLValue();
    uint64_t v5 = FigCFDictionaryGetURLValue();
    DictionaryCFStringRef Value = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    uint64_t v7 = FigCFDictionaryGetURLValue();
    if (URLValue) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = v5 == 0;
    }
    if (v8 && v7 == 0)
    {
      Mutableuint64_t Copy = (void *)CFRetain(MutableCopy);
    }
    else
    {
      uint64_t v10 = v7;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      Mutableuint64_t Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)MutableCopy);
      if (!MutableCopy)
      {
        uint64_t v14 = FigSignalErrorAt();
        goto LABEL_24;
      }
      if (URLValue) {
        FigReplaceURLWithString();
      }
      if (v5) {
        FigReplaceURLWithString();
      }
      if (v10)
      {
        CFMutableDictionaryRef v12 = CFDictionaryCreateMutableCopy(v11, 0, DictionaryValue);
        if (!v12)
        {
          uint64_t v14 = FigSignalErrorAt();
          if (!v14) {
            goto LABEL_24;
          }
          CFRelease(MutableCopy);
          goto LABEL_20;
        }
        CFMutableDictionaryRef v13 = v12;
        FigReplaceURLWithString();
        CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, @"assetOption_ContentProtectionOptions", v13);
        CFRelease(v13);
      }
      if (!CFDictionaryGetCount((CFDictionaryRef)MutableCopy))
      {
        CFRelease(MutableCopy);
        uint64_t v14 = 0;
LABEL_20:
        Mutableuint64_t Copy = 0;
LABEL_24:
        mach_port_t v2 = a2;
        goto LABEL_25;
      }
    }
    uint64_t v14 = 0;
    goto LABEL_24;
  }
  uint64_t v14 = 0;
LABEL_25:
  *mach_port_t v2 = MutableCopy;
  return v14;
}

uint64_t FigAssetCreateOptionsDictFromPList(const void *a1, __CFDictionary **a2)
{
  if (!a1 || (CFTypeID v4 = CFGetTypeID(a1), v4 != CFDictionaryGetTypeID()) || !a2)
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_19;
  }
  StringCFStringRef Value = FigCFDictionaryGetStringValue();
  uint64_t v6 = FigCFDictionaryGetStringValue();
  DictionaryCFStringRef Value = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  uint64_t v8 = FigCFDictionaryGetStringValue();
  uint64_t v9 = v8;
  if (StringValue || v6 || v8)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Mutableuint64_t Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)a1);
    if (!MutableCopy)
    {
      uint64_t v14 = FigSignalErrorAt();
      goto LABEL_17;
    }
    if (StringValue) {
      FigReplaceStringWithURL();
    }
    if (v6) {
      FigReplaceStringWithURL();
    }
    if (!v9) {
      goto LABEL_16;
    }
    CFMutableDictionaryRef v12 = CFDictionaryCreateMutableCopy(v11, 0, DictionaryValue);
    if (v12)
    {
      CFMutableDictionaryRef v13 = v12;
      FigReplaceStringWithURL();
      CFDictionarySetValue(MutableCopy, @"assetOption_ContentProtectionOptions", v13);
      CFRelease(v13);
      goto LABEL_16;
    }
    uint64_t v14 = FigSignalErrorAt();
    if (!v14) {
      goto LABEL_17;
    }
    CFRelease(MutableCopy);
LABEL_19:
    Mutableuint64_t Copy = 0;
    goto LABEL_17;
  }
  Mutableuint64_t Copy = (__CFDictionary *)CFRetain(a1);
LABEL_16:
  uint64_t v14 = 0;
LABEL_17:
  *a2 = MutableCopy;
  return v14;
}

uint64_t InitializeURLAsset()
{
  gCommonAssetNotificationQueue = FigDispatchQueueCreateWithPriority();
  uint64_t result = FigDispatchQueueCreateWithPriority();
  gCommonAssetTrackNotificationQueue = result;
  return result;
}

void URLAssetTrackFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  char v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  mach_port_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 24);
  if (v3)
  {
    dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    CFTypeID v4 = *(NSObject **)(DerivedStorage + 24);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(DerivedStorage + 24) = 0;
    }
  }
}

__CFString *URLAssetTrackCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef v4 = CFCopyDescription(*DerivedStorage);
  CFStringRef v5 = CFCopyDescription(DerivedStorage[1]);
  CFStringRef v6 = CFCopyDescription(DerivedStorage[2]);
  CFIndex v7 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigURLAssetTrack %p> RC %d {%@} {%@} {%@}", a1, v7, v4, v5, v6);
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

uint64_t URLAssetTrackCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return URLAssetTrackCopyPropertyAndBlockageWarning(a1, a2, a3, a4, 0);
}

uint64_t URLAssetTrackCopyPropertyAndBlockageWarning(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, CFStringRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    *a4 = 0;
    if (*(unsigned char *)(DerivedStorage + 32)) {
      uint64_t v9 = a5;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(DerivedStorage + 8);
    return ObtainPropertySync(v10, a2, a4, v9);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetTrackGetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    *a3 = 0;
    uint64_t v10 = *(void *)(DerivedStorage + 8);
    return QueryProperty(v10, a2, a3, a4, a5, 0);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetTrackLoadValuesAsyncForProperties(uint64_t a1, const __CFArray *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t v8 = DerivedStorage, CFArrayGetCount(a2)))
  {
    uint64_t v9 = *(void *)(v8 + 8);
    return RequestPropertiesAsync(v9, (uint64_t)a2, a3, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetTrackLoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v8 = 0;
  if (a2)
  {
    uint64_t result = RequestPropertyAsync(*(void *)(DerivedStorage + 8), a2, &v8);
    if (!result)
    {
      BOOL v7 = (v8 & 0xFFFFFFFE) == 2;
      if (!a3) {
        return result;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  BOOL v7 = 0;
  if (!a3) {
    return result;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t URLAssetTrackGetTrackInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)CMBaseObjectGetDerivedStorage() + 24);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t URLAssetTrackValidateAsync(uint64_t a1, const void *a2, uint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4) {
    goto LABEL_12;
  }
  uint64_t v10 = DerivedStorage;
  if (!CFEqual(a2, @"validationCriteria_Custom"))
  {
    if (CFEqual(a2, @"validationCriteria_CameraRoll")
      || CFEqual(a2, @"validationCriteria_MediaPlayback")
      || CFEqual(a2, @"validationCriteria_MediaDecoding"))
    {
      goto LABEL_9;
    }
LABEL_12:
    return FigSignalErrorAt();
  }
  if (!a3) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v11 = *(void *)(v10 + 16);

  return RequestValidationAsync(v11, (uint64_t)a2, a3, a4, a5);
}

uint64_t TrackMacroPropertyDefinitionApplierFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DefineMacroProperty(a3, a1, a2);
}

uint64_t RegisterInternalURLTrackType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double InternalURLTrack_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void InternalURLTrack_Finalize(uint64_t a1)
{
  InternalURLAssetTrackStopMonitoringChanges(a1);
  objc_destroyWeak((id *)(a1 + 40));
  mach_port_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
  CFStringRef v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v5 = *(NSObject **)(a1 + 48);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *(NSObject **)(a1 + 56);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 56) = 0;
  }
}

__CFString *InternalURLTrack_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  uint64_t v17 = 1061109567;
  CFTypeRef v16 = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, char *, uint64_t *))(v5 + 8);
  if (v6) {
    v6(v3, (char *)&v17 + 4, &v17);
  }
  CFIndex v7 = CFGetRetainCount((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, @"<InternalURLTrack %p %s> RC %d TrackID %d '%c%c%c%c'", a1, a1 + 80, v7, HIDWORD(v17), BYTE3(v17), BYTE2(v17), BYTE1(v17), v17);
  if (*(void *)(a1 + 32))
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v10 + 48);
    if (v11)
    {
      v11(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &v16);
      if (v16)
      {
        CFStringRef v12 = CFCopyDescription(v16);
        if (v12)
        {
          CFStringRef v13 = v12;
          if (*(unsigned char *)(a1 + 90)) {
            uint64_t v14 = (__CFString *)v12;
          }
          else {
            uint64_t v14 = @"<redacted>";
          }
          CFStringAppendFormat(Mutable, 0, @" AssetURL: %@", v14);
          CFRelease(v13);
        }
        CFRelease(v16);
      }
    }
  }
  return Mutable;
}

void URLAssetFinalize()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*DerivedStorage)
  {
    InternalURLAssetShutdownWorkQueue(*DerivedStorage);
    InternalURLAssetCleanupChangeMonitoring(*DerivedStorage);
    InternalURLAssetCleanupIncrementalFragmentProcessing((void *)*DerivedStorage);
    InternalURLAssetCleanupStreamingProcessing(*DerivedStorage);
    InternalURLAssetCleanupPostPurchaseProcessing(*DerivedStorage);
    if (*DerivedStorage)
    {
      CFRelease((CFTypeRef)*DerivedStorage);
      *uint64_t DerivedStorage = 0;
    }
  }
  mach_port_t v2 = (const void *)DerivedStorage[1];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[1] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  uint64_t v4 = DerivedStorage[3];
  if (v4)
  {
    dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v5 = DerivedStorage[3];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[3] = 0;
    }
  }
}

__CFString *URLAssetCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef v4 = CFCopyDescription(*DerivedStorage);
  CFStringRef v5 = CFCopyDescription(DerivedStorage[1]);
  CFStringRef v6 = CFCopyDescription(DerivedStorage[2]);
  if (a1 && (uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage()) != 0) {
    int v8 = (const char *)(v7 + 584);
  }
  else {
    int v8 = "";
  }
  CFIndex v9 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigURLAsset %p %s> RC %d {%@} {%@} {%@}", a1, v8, v9, v4, v5, v6);
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

uint64_t URLAssetCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  return URLAssetCopyPropertyAndBlockageWarning(a1, a2, a3, a4, 0);
}

uint64_t URLAssetSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
LABEL_19:
    return FigSignalErrorAt();
  }
  CFStringRef v6 = (dispatch_queue_t **)DerivedStorage;
  if (CFEqual(a2, @"assetProperty_MakeReadAheadAssertionWhenCreatingByteStream"))
  {
    if (a3)
    {
      uint64_t v7 = *v6;
      CFTypeID v8 = CFGetTypeID(a3);
      if (v8 == CFBooleanGetTypeID())
      {
        MEMORY[0x19970E910](v7[17]);
        if (v7[20])
        {
          uint64_t v9 = 4294955126;
        }
        else
        {
          uint64_t v9 = 0;
          *((unsigned char *)v7 + 216) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        }
        MEMORY[0x19970E930](v7[17]);
        return v9;
      }
    }
    goto LABEL_19;
  }
  if (CFEqual(a2, @"assetProperty_IncrementalFragmentParseInterval"))
  {
    if (a3)
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFNumberGetTypeID())
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
        InternalURLAssetSetIncrementalFragmentParsingInterval(*v6, valuePtr);
      }
    }
    return 0;
  }
  if (!CFEqual(a2, @"assetProperty_ShouldPrefetchCryptKeys")) {
    goto LABEL_19;
  }
  CFStringRef v13 = *v6;
  CFStringRef v12 = v6[1];

  return InternalURLAssetSetShouldPrefetchCryptKeys(v12, v13, (uint64_t)a3);
}

uint64_t URLAssetCopyPropertyAndBlockageWarning(uint64_t a1, const void *a2, uint64_t a3, void *a4, CFStringRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v9 = (uint64_t *)DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, @"assetProperty_CreationURL"))
    {
      if (*(_DWORD *)(*v9 + 64) == 1431456810)
      {
        CFTypeID v10 = *(const void **)(*v9 + 72);
        if (!v10) {
          goto LABEL_30;
        }
        goto LABEL_18;
      }
      return 0;
    }
    if (CFEqual(a2, @"assetProperty_CreationFlags"))
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v12 = (void *)(*v9 + 80);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"assetProperty_CreationOptionsDictionary"))
    {
      CFTypeID v10 = *(const void **)(*v9 + 88);
      if (!v10) {
        goto LABEL_30;
      }
      goto LABEL_18;
    }
    if (CFEqual(a2, @"assetProperty_MakeReadAheadAssertionWhenCreatingByteStream"))
    {
      if (*(unsigned char *)(*v9 + 216)) {
        uint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v14 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v10 = *v14;
      if (!*v14) {
        goto LABEL_30;
      }
      goto LABEL_18;
    }
    if (CFEqual(a2, @"assetProperty_OriginalReadAheadAssertion"))
    {
      uint64_t v16 = *v9;
      return CopyOutReadAheadAssertion(v16, a4);
    }
    if (CFEqual(a2, @"assetProperty_DownloadToken"))
    {
      InternalURLAssetEnsureDownloadTokenEstablished(*v9);
      CFStringRef v12 = (void *)(*v9 + 24);
      if (!*v12) {
        return 0;
      }
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_9:
      CFStringRef v13 = CFNumberCreate(v11, kCFNumberSInt64Type, v12);
LABEL_19:
      CFURLRef v15 = v13;
LABEL_31:
      uint64_t result = 0;
      *a4 = v15;
      return result;
    }
    if (CFEqual(a2, @"assetProperty_InstanceUUID"))
    {
      CFTypeID v10 = *(const void **)(*v9 + 336);
      if (!v10)
      {
LABEL_30:
        CFURLRef v15 = 0;
        goto LABEL_31;
      }
      goto LABEL_18;
    }
    if (CFEqual(a2, @"assetProperty_DefaultContentKeySession"))
    {
      uint64_t result = InternalURLAssetEnsureContentKeySessionCreated((void *)*v9);
      if (result) {
        return result;
      }
      CFTypeID v10 = *(const void **)(*v9 + 512);
      goto LABEL_18;
    }
    if (CFEqual(a2, @"assetProperty_ContentKeyBoss"))
    {
      uint64_t result = InternalURLAssetEnsureContentKeyBoss((void *)*v9);
      if (result) {
        return result;
      }
      CFTypeID v10 = *(const void **)(*v9 + 520);
      goto LABEL_18;
    }
    if (CFEqual(a2, @"assetProperty_CustomURLLoader"))
    {
      uint64_t result = InternalURLAssetEnsureCustomURLLoaderCreated((dispatch_once_t *)*v9);
      if (result) {
        return result;
      }
      CFTypeID v10 = *(const void **)(*v9 + 488);
LABEL_18:
      CFStringRef v13 = (void *)CFRetain(v10);
      goto LABEL_19;
    }
    uint64_t v18 = v9[1];
    if (*(unsigned char *)(*v9 + 608)) {
      uint64_t v19 = a5;
    }
    else {
      uint64_t v19 = 0;
    }
    return ObtainPropertySync(v18, (uint64_t)a2, a4, v19);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t CopyOutReadAheadAssertion(uint64_t a1, void *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 136));
  uint64_t v4 = *(void *)(a1 + 224);
  if (v4)
  {
    FigAssertionSetProperty(v4, @"Assertion_HolderName", @"Client-of-FigAsset");
    uint64_t v5 = 0;
    *a2 = *(void *)(a1 + 224);
    *(void *)(a1 + 224) = 0;
    *(unsigned char *)(a1 + 217) = 1;
  }
  else
  {
    *a2 = 0;
    if (*(unsigned char *)(a1 + 217)) {
      uint64_t v5 = 4294955126;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  MEMORY[0x19970E930](*(void *)(a1 + 136));
  return v5;
}

uint64_t URLAssetGetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    *a3 = 0;
    uint64_t v10 = *(void *)(DerivedStorage + 8);
    return QueryProperty(v10, a2, a3, a4, a5, 0);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetLoadValuesAsyncForProperties(uint64_t a1, const __CFArray *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t v8 = DerivedStorage, CFArrayGetCount(a2)))
  {
    uint64_t v9 = *(void *)(v8 + 8);
    return RequestPropertiesAsync(v9, (uint64_t)a2, a3, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetLoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v7 = 0;
  if (a2)
  {
    uint64_t result = RequestPropertyAsync(*(void *)(DerivedStorage + 8), a2, &v7);
    if (a3)
    {
      if (!result) {
        *a3 = (v7 & 0xFFFFFFFE) == 2;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t URLAssetValidateAsync(uint64_t a1, const void *a2, uint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4) {
    goto LABEL_12;
  }
  uint64_t v10 = DerivedStorage;
  if (!CFEqual(a2, @"validationCriteria_Custom"))
  {
    if (CFEqual(a2, @"validationCriteria_CameraRoll")
      || CFEqual(a2, @"validationCriteria_MediaPlayback")
      || CFEqual(a2, @"validationCriteria_PhotosTranscodingService"))
    {
      goto LABEL_9;
    }
LABEL_12:
    return FigSignalErrorAt();
  }
  if (!a3) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v11 = *(void *)(v10 + 16);

  return RequestValidationAsync(v11, (uint64_t)a2, a3, a4, a5);
}

uint64_t URLAssetCopyTrackByID(uint64_t a1, int a2, void *a3)
{
  CFArrayRef theArray = 0;
  if (a2)
  {
    if (!a3)
    {
      uint64_t v19 = FigSignalErrorAt();
      goto LABEL_24;
    }
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, void, CFArrayRef *))(v7 + 48);
    if (v8)
    {
      if (!v8(CMBaseObject, @"assetProperty_Tracks", *MEMORY[0x1E4F1CF80], &theArray) && theArray != 0)
      {
        int v22 = 0;
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          for (CFIndex i = 0; v11 != i; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            if (!ValueAtIndex) {
              break;
            }
            uint64_t v14 = ValueAtIndex;
            CFTypeID v15 = CFGetTypeID(ValueAtIndex);
            if (v15 != FigAssetTrackGetTypeID()) {
              break;
            }
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = *(unsigned int (**)(const void *, int *, void))(v17 + 32);
            if (v18 && !v18(v14, &v22, 0) && v22 == a2)
            {
              CFTypeRef v20 = CFRetain(v14);
              if (!v20) {
                break;
              }
              uint64_t v19 = 0;
              if (a3) {
                goto LABEL_23;
              }
              goto LABEL_24;
            }
          }
        }
      }
    }
  }
  uint64_t v19 = FigSignalErrorAt();
  CFTypeRef v20 = 0;
  if (a3) {
LABEL_23:
  }
    *a3 = v20;
LABEL_24:
  if (theArray) {
    CFRelease(theArray);
  }
  return v19;
}

uint64_t URLAssetCopyTracksWithMediaType(uint64_t a1, int a2, __CFArray **a3)
{
  CFArrayRef theArray = 0;
  if (a3)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v7 + 48);
    if (!v8)
    {
      CFMutableDictionaryRef Mutable = 0;
      unsigned int v10 = -12782;
      goto LABEL_32;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned int v10 = v8(CMBaseObject, @"assetProperty_Tracks", *MEMORY[0x1E4F1CF80], &theArray);
    if (v10) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = theArray == 0;
    }
    if (!v11)
    {
      int v24 = 0;
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count)
      {
        uint64_t v13 = Count;
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v9, Count, MEMORY[0x1E4F1D510]);
        if (!Mutable)
        {
LABEL_38:
          uint64_t v22 = FigSignalErrorAt();
          goto LABEL_35;
        }
        if (v13 >= 1)
        {
          CFIndex v15 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
            if (!ValueAtIndex) {
              goto LABEL_38;
            }
            uint64_t v17 = ValueAtIndex;
            CFTypeID v18 = CFGetTypeID(ValueAtIndex);
            if (v18 != FigAssetTrackGetTypeID()) {
              goto LABEL_38;
            }
            uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v19) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = *(uint64_t (**)(const void *, void, int *))(v20 + 32);
            if (v21)
            {
              unsigned int v10 = v21(v17, 0, &v24);
              if (!v10 && v24 == a2)
              {
                CFArrayAppendValue(Mutable, v17);
                unsigned int v10 = 0;
              }
            }
            else
            {
              unsigned int v10 = -12782;
            }
            if (v13 == ++v15) {
              goto LABEL_29;
            }
          }
        }
        unsigned int v10 = 0;
LABEL_29:
        if (CFArrayGetCount(Mutable))
        {
LABEL_32:
          if (Mutable) {
            uint64_t v22 = v10;
          }
          else {
            uint64_t v22 = 4294955122;
          }
LABEL_35:
          *a3 = Mutable;
          if (theArray) {
            CFRelease(theArray);
          }
          return v22;
        }
        CFRelease(Mutable);
      }
      else
      {
        unsigned int v10 = 0;
      }
    }
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_32;
  }

  return FigSignalErrorAt();
}

uint64_t URLAssetCopyChapterData(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = (dispatch_queue_t **)CMBaseObjectGetDerivedStorage();
  if (a4 && a5 && (unsigned int v10 = *DerivedStorage, *((_DWORD *)*DerivedStorage + 16) != 709251626))
  {
    BOOL v11 = DerivedStorage[1];
    return InternalURLAssetCopyChapterData(v11, v10, a2, a3, a4, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetFetchChapterDataAsync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t **)CMBaseObjectGetDerivedStorage();
  if (!a4 || (uint64_t v8 = *DerivedStorage, *((_DWORD *)*DerivedStorage + 16) == 709251626))
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFAllocatorRef v9 = DerivedStorage[1];
    return InternalURLAssetFetchChapterDataAsync(v9, v8, a2, a3, a4);
  }
}

uint64_t URLAssetTransferBytePumpAsync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(dispatch_queue_t **)DerivedStorage;
  uint64_t v7 = *(const void **)(DerivedStorage + 8);

  return InternalURLAssetTransferBytePumpAsync(v7, v6, a2, a3);
}

uint64_t URLAssetLoadValuesAsyncForTrackProperties(uint64_t a1, CFTypeRef a2, const __CFArray *a3, unsigned char *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  char v24 = 0;
  if (!a3) {
    goto LABEL_30;
  }
  uint64_t v11 = DerivedStorage;
  if (!CFArrayGetCount(a3)) {
    goto LABEL_30;
  }
  if (a2)
  {
    if (CFArrayGetCount((CFArrayRef)a2))
    {
      CFTypeRef cf = a2;
      CFRetain(a2);
LABEL_15:
      uint64_t v16 = (uint64_t)InternalURLAssetLoadValuesAsyncForTrackProperties(*(const void **)(v11 + 8), *(dispatch_queue_t **)v11, (const __CFArray *)a2, a3, &v24, a5);
      goto LABEL_16;
    }
    goto LABEL_30;
  }
  unsigned int v22 = 0;
  int v23 = 0;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, __CFString *, int *, unsigned int *, void))(v13 + 8);
  if (!v14)
  {
    a2 = 0;
    goto LABEL_15;
  }
  v14(a1, @"assetProperty_Tracks", &v23, &v22, 0);
  if (v23 == 2)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v20 + 48);
    if (!v21)
    {
      uint64_t v15 = 4294954514;
      if (!a4) {
        goto LABEL_18;
      }
LABEL_17:
      *a4 = v24;
      goto LABEL_18;
    }
    uint64_t v16 = v21(CMBaseObject, @"assetProperty_Tracks", *MEMORY[0x1E4F1CF80], &cf);
    if (v16) {
      goto LABEL_16;
    }
    a2 = cf;
    if (cf) {
      goto LABEL_15;
    }
LABEL_30:
    uint64_t v16 = FigSignalErrorAt();
LABEL_16:
    uint64_t v15 = v16;
    if (!a4) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  a2 = 0;
  if (v23 != 3) {
    goto LABEL_15;
  }
  uint64_t v15 = v22;
  if (a4) {
    goto LABEL_17;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t URLAssetDefineMacroProperty(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && (uint64_t v6 = DerivedStorage, CFArrayGetCount(a3)))
  {
    uint64_t v7 = *(void *)(v6 + 8);
    return DefineMacroProperty(v7, a2, (uint64_t)a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetDefineTrackMacroProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && (uint64_t v6 = DerivedStorage, CFArrayGetCount((CFArrayRef)a3)))
  {
    uint64_t v7 = *(void *)(*(void *)v6 + 600);
    return DefineTrackMacroProperty(v7, a2, a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t URLAssetDefineCrossTrackMacroProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && (uint64_t v6 = (void *)DerivedStorage, CFArrayGetCount((CFArrayRef)a3)))
  {
    uint64_t v7 = v6[1];
    uint64_t v8 = *(void *)(*v6 + 600);
    return DefineCrossTrackMacroProperty(v8, v7, a2, a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFTypeRef URLAssetCopyStoreForTrack()
{
  uint64_t v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 8);

  return CFRetain(v0);
}

uint64_t RegisterInternalURLAssetType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void InternalURLAsset_Init(uint64_t a1)
{
}

void *InternalURLAsset_Finalize(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 464));
  mach_port_t v2 = *(const void **)(a1 + 600);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 600) = 0;
  }
  uint64_t v3 = *(NSObject **)(a1 + 472);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 472) = 0;
  }
  if (*(void *)(a1 + 136))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 136) = 0;
  }
  if (*(void *)(a1 + 424))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 424) = 0;
  }
  uint64_t v4 = *(NSObject **)(a1 + 368);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 368) = 0;
  }
  if (*(void *)(a1 + 240)) {
    FigStopForwardingMediaServicesProcessDeathNotification();
  }
  uint64_t v5 = *(const void **)(a1 + 488);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 488) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 528);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 528) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 88) = 0;
  }
  CFAllocatorRef v9 = *(const void **)(a1 + 176);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 176) = 0;
  }
  unsigned int v10 = *(const void **)(a1 + 184);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 184) = 0;
  }
  uint64_t v11 = *(const void **)(a1 + 160);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 160) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 152);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 240);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 240) = 0;
  }
  uint64_t v14 = *(const void **)(a1 + 248);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 248) = 0;
  }
  uint64_t v15 = *(const void **)(a1 + 272);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v16 = *(const void **)(a1 + 344);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v17 = *(const void **)(a1 + 360);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 360) = 0;
  }
  CFTypeID v18 = *(const void **)(a1 + 120);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v19 = *(const void **)(a1 + 328);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 328) = 0;
  }
  uint64_t v20 = *(const void **)(a1 + 336);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 336) = 0;
  }
  uint64_t v21 = *(const void **)(a1 + 224);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 224) = 0;
  }
  unsigned int v22 = *(const void **)(a1 + 208);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 208) = 0;
  }
  int v23 = *(const void **)(a1 + 432);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 432) = 0;
  }
  char v24 = *(const void **)(a1 + 384);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 384) = 0;
  }
  uint64_t v25 = *(const void **)(a1 + 400);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 400) = 0;
  }
  CFStringRef v26 = *(const void **)(a1 + 408);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 408) = 0;
  }
  CFAllocatorRef v27 = *(const void **)(a1 + 416);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 416) = 0;
  }
  CFUUIDRef v28 = *(const void **)(a1 + 480);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 480) = 0;
  }
  uint64_t v29 = *(const void **)(a1 + 512);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 512) = 0;
  }
  uint64_t v30 = *(const void **)(a1 + 520);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(a1 + 520) = 0;
  }
  objc_destroyWeak((id *)(a1 + 48));
  uint64_t v31 = *(const void **)(a1 + 504);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(a1 + 504) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v32 = *(void *)(a1 + 24);
  if (v32)
  {
    FigAssetDownloadCoordinatorUnregisterAssetWithDownloadTokenForAllDownloaders(v32);
    FigAssetTableRemoveAsset();
  }
  CFAllocatorRef v33 = *(const void **)(a1 + 576);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(a1 + 576) = 0;
  }
  uint64_t v34 = *(NSObject **)(a1 + 280);
  if (v34) {
    dispatch_release(v34);
  }
  CFNumberRef v35 = *(NSObject **)(a1 + 104);
  if (v35)
  {
    dispatch_release(v35);
    *(void *)(a1 + 104) = 0;
  }
  int32_t v36 = *(NSObject **)(a1 + 96);
  if (v36)
  {
    dispatch_release(v36);
    *(void *)(a1 + 96) = 0;
  }
  CFTypeRef v37 = *(void **)(a1 + 536);
  if (v37)
  {
    os_release(v37);
    *(void *)(a1 + 536) = 0;
  }
  uint64_t result = *(void **)(a1 + 40);
  if (result)
  {
    return (void *)FigAssetDownloadCoordinatorRelinquishAccessToURL(result);
  }
  return result;
}

__CFString *InternalURLAsset_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringRef v3 = CFCopyDescription(*(CFTypeRef *)(a1 + 72));
  CFIndex v4 = CFGetRetainCount((CFTypeRef)a1);
  int v5 = *(_DWORD *)(a1 + 64);
  uint64_t v6 = "FormatReader";
  if (v5 == 708989738) {
    uint64_t v6 = "ByteStream";
  }
  if (v5 == 1431456810) {
    uint64_t v7 = "URL";
  }
  else {
    uint64_t v7 = v6;
  }
  if (*(unsigned char *)(a1 + 610)) {
    uint64_t v8 = (__CFString *)v3;
  }
  else {
    uint64_t v8 = @"<redacted>";
  }
  CFStringAppendFormat(Mutable, 0, @"<InternalURLAssetRef %p %s> RC %d Created with %s {%@}", a1, a1 + 584, v4, v7, v8);
  if (v3) {
    CFRelease(v3);
  }
  CFStringAppendFormat(Mutable, 0, @" createFlags = 0x%0llx", *(void *)(a1 + 80));
  if (*(void *)(a1 + 88))
  {
    CFAllocatorRef v9 = (const void *)FigCFCopyCompactDescription();
    CFStringAppendFormat(Mutable, 0, @"\noptionsDict = {%@}", v9);
    if (v9) {
      CFRelease(v9);
    }
  }
  return Mutable;
}

uint64_t FigAssetGetAllPropertyKeys()
{
  if (FigAssetGetAllPropertyKeys_static_init != -1) {
    dispatch_once_f(&FigAssetGetAllPropertyKeys_static_init, 0, (dispatch_function_t)InitializeAssetPropertyKeys);
  }
  return gAllAssetProperties;
}

CFArrayRef InitializeAssetPropertyKeys()
{
  v1[75] = *(const void **)MEMORY[0x1E4F143B8];
  memcpy(v1, off_1E57A53E8, 0x258uLL);
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, 75, MEMORY[0x1E4F1D510]);
  gAllAssetProperties = (uint64_t)result;
  return result;
}

uint64_t FigAssetTrackGetAllPropertyKeys()
{
  if (FigAssetTrackGetAllPropertyKeys_static_init != -1) {
    dispatch_once_f(&FigAssetTrackGetAllPropertyKeys_static_init, 0, (dispatch_function_t)InitializeAssetTrackPropertyKeys);
  }
  return gAllAssetTrackProperties;
}

CFArrayRef InitializeAssetTrackPropertyKeys()
{
  v1[55] = *(const void **)MEMORY[0x1E4F143B8];
  v1[0] = @"FormatDescriptionArray";
  v1[1] = @"IsEnabled";
  v1[2] = @"IsSelfContained";
  v1[3] = @"TotalSampleDataLength";
  _OWORD v1[4] = @"TimeRange";
  v1[5] = @"MediaPresentationTimeRange";
  v1[6] = @"MediaDecodeTimeRange";
  v1[7] = @"NaturalTimeScale";
  v1[8] = @"EstimatedDataRate";
  v1[9] = @"PeakDataRate";
  v1[10] = @"UneditedSampleCount";
  v1[11] = @"HasRollInformation";
  v1[12] = @"LanguageCode";
  v1[13] = @"MediaCharacteristicArray";
  v1[14] = @"ExtendedLanguageTag";
  v1[15] = @"NaturalSize";
  v1[16] = @"TrackDimensions";
  v1[17] = @"CleanApertureDimensions";
  v1[18] = @"ProductionApertureDimensions";
  v1[19] = @"EncodedPixelsDimensions";
  v1[20] = @"PreferredTransform";
  v1[21] = @"NominalFrameRate";
  v1[22] = @"NonDroppableFrameRate";
  v1[23] = @"CommonMetadata";
  v1[24] = @"AvailableMetadataFormats";
  v1[25] = @"IsExcludedFromAutoselection";
  v1[26] = @"Volume";
  v1[27] = @"LoudnessInfo";
  v1[28] = @"Layer";
  v1[29] = @"MinSampleDuration";
  v1[30] = @"AlternateGroupID";
  v1[31] = @"DefaultAlternateGroupID";
  v1[32] = @"ProvisionalAlternateGroupID";
  v1[33] = @"LoadSettings";
  v1[34] = @"SampleGroupDescriptions";
  v1[35] = @"HEVCTemporalLevelInfoCombinations";
  v1[36] = @"HEVCSyncSampleNALUnitTypes";
  v1[37] = @"assetTrackProperty_QuickTimeUserData";
  v1[38] = @"assetTrackProperty_ISOUserData";
  v1[39] = @"assetTrackProperty_QuickTimeMetadata";
  v1[40] = @"assetTrackProperty_FormatSpecificMetadata";
  v1[41] = @"assetTrackProperty_FormatSpecificMetadataFormat";
  v1[42] = @"assetTrackProperty_EditSegmentData";
  v1[43] = @"assetTrackProperty_PresentationSegmentData";
  v1[44] = @"assetTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration";
  v1[45] = @"assetTrackProperty_GaplessSourceTimeRange";
  v1[46] = @"assetTrackProperty_TrackReferences";
  v1[47] = @"assetTrackProperty_ProtectedStatus";
  v1[48] = @"assetTrackProperty_UsesAudibleDRM";
  v1[49] = @"assetTrackProperty_AudibleContentIsAuthorized";
  v1[50] = @"assetTrackProperty_CameraRollValidation";
  v1[51] = @"assetTrackProperty_MediaPlaybackValidation";
  v1[52] = @"assetTrackProperty_MediaDecodingValidation";
  v1[53] = @"assetTrackProperty_ContainsWideColor";
  v1[54] = @"assetTrackProperty_LatentBaseDecodeTimeStampOfFirstTrackFragment";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, 55, MEMORY[0x1E4F1D510]);
  gAllAssetTrackProperties = (uint64_t)result;
  return result;
}

uint64_t FigAssetGetClassID()
{
  return sFigAssetClassID;
}

uint64_t RegisterFigAssetBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAssetGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetGetClassID_sRegisterFigAssetBaseTypeOnce, RegisterFigAssetBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetTrackGetClassID()
{
  return sFigAssetTrackClassID;
}

uint64_t RegisterFigAssetTrackBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAssetTrackGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetTrackGetClassID_sRegisterFigAssetTrackBaseTypeOnce, RegisterFigAssetTrackBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t CreateTrackMacroPropertyState(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (TrackMacroPropertyStateGetTypeID_sRegisterTrackMacroPropertyStateTypeOnce != -1) {
    dispatch_once_f(&TrackMacroPropertyStateGetTypeID_sRegisterTrackMacroPropertyStateTypeOnce, &TrackMacroPropertyStateGetTypeID_sTrackMacroPropertyStateID, (dispatch_function_t)RegisterTrackMacroPropertyStateType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = (void *)Instance;
    uint64_t v8 = FigReentrantMutexCreate();
    v7[2] = v8;
    if (v8 && (uint64_t v9 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (v7[3] = v9) != 0))
    {
      FigCFWeakReferenceStore();
      v7[8] = a3;
      *a4 = v7;
      return 0;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      CFRelease(v7);
      return v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void DisconnectCrossTrackMacroProperties(uint64_t a1, CFArrayRef theArray)
{
  if (theArray && *(void *)(a1 + 40))
  {
    if (CFArrayGetCount(theArray))
    {
      v4[0] = a1;
      v4[1] = theArray;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)CrossTrackDisconnectApplierFunction, v4);
    }
  }
}

uint64_t CrossTrackDisconnectApplierFunction(void *key, uint64_t a2, CFArrayRef *a3)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 5), key);
  if (result)
  {
    int v5 = (__CFSet *)result;
    uint64_t result = CFSetGetCount((CFSetRef)result);
    if (result)
    {
      uint64_t result = CFArrayGetCount(a3[1]);
      if (result >= 1)
      {
        uint64_t v6 = result;
        for (CFIndex i = 0; i != v6; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3[1], i);
          CFSetRemoveValue(v5, ValueAtIndex);
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t result = FigNotificationCenterRemoveWeakListeners();
        }
      }
    }
  }
  return result;
}

void ConnectCrossTrackMacroProperties(uint64_t a1, CFArrayRef theArray)
{
  if (theArray && *(void *)(a1 + 40))
  {
    if (CFArrayGetCount(theArray))
    {
      v5[0] = a1;
      v5[1] = theArray;
      Mutableuint64_t Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a1 + 40));
      CFDictionaryApplyFunction(MutableCopy, (CFDictionaryApplierFunction)CrossTrackConnectApplierFunction, v5);
      CFRelease(MutableCopy);
    }
  }
}

void CrossTrackConnectApplierFunction(const void *a1, uint64_t a2, CFArrayRef *a3)
{
  CFIndex Count = CFArrayGetCount(a3[1]);
  CFStringRef Value = (void *)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 5), a1);
  if (!Value)
  {
    CFStringRef Value = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)*a3 + 5), a1, Value);
    CFRelease(Value);
  }
  if (Count < 1)
  {
LABEL_19:
    int v16 = 0;
    CFTypeRef v17 = 0;
    goto LABEL_20;
  }
  for (CFIndex i = 0; i != Count; ++i)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3[1], i);
    CFSetAddValue((CFMutableSetRef)Value, ValueAtIndex);
  }
  CFIndex v9 = 0;
  while (1)
  {
    CFTypeRef cf = 0;
    uint64_t v19 = 0;
    unsigned int v10 = CFArrayGetValueAtIndex(a3[1], v9);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(const void *, const void *, char *, uint64_t *, CFTypeRef *))(v12 + 8);
    if (v13) {
      v13(v10, a1, (char *)&v19 + 4, &v19, &cf);
    }
    if ((HIDWORD(v19) & 0xFFFFFFFE) != 2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListeners();
      goto LABEL_16;
    }
    CFSetRemoveValue((CFMutableSetRef)Value, v10);
    if (HIDWORD(v19) == 3) {
      break;
    }
LABEL_16:
    if (cf) {
      CFRelease(cf);
    }
    if (Count == ++v9) {
      goto LABEL_19;
    }
  }
  int v16 = v19;
  CFTypeRef v17 = cf;
  CFTypeRef cf = 0;
  CFSetApplyFunction((CFSetRef)Value, (CFSetApplierFunction)RemoveCrossTrackListenersFromTracksInSet, *a3);
  CFSetRemoveAllValues((CFMutableSetRef)Value);
LABEL_20:
  if (!CFSetGetCount((CFSetRef)Value))
  {
    uint64_t v14 = (void *)MEMORY[0x19970C720]((char *)*a3 + 56);
    if (v14)
    {
      uint64_t v15 = v14;
      StoreByProduct(v14, a1, v16, v17, 0);
      CFRelease(v15);
    }
  }
  if (v17) {
    CFRelease(v17);
  }
}

uint64_t DefineTrackMacroProperty(uint64_t a1, const void *a2, const void *a3)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  CFDictionaryRef Mutable = *(const __CFDictionary **)(a1 + 32);
  if ((Mutable
     || (CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a1 + 32) = Mutable) != 0))&& !CFDictionaryContainsKey(Mutable, a2))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
    CFArrayRef v7 = *(const __CFArray **)(a1 + 48);
    if (v7 && (CFIndex Count = CFArrayGetCount(v7), Count >= 1))
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v10);
        uint64_t v12 = (const void *)(*(uint64_t (**)(const void *))(a1 + 64))(ValueAtIndex);
        uint64_t v13 = DefineMacroProperty((uint64_t)v12, (uint64_t)a2, (uint64_t)a3);
        CFRelease(v12);
        if (v13) {
          break;
        }
        if (v9 == ++v10) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  return v13;
}

uint64_t DefineCrossTrackMacroProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  CFDictionaryRef Mutable = *(const __CFDictionary **)(a1 + 40);
  CFIndex v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!Mutable
    && (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a1 + 40) = Mutable) == 0)|| CFDictionaryContainsKey(Mutable, a3)|| (CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 32)) != 0 && CFDictionaryContainsKey(v10, a3))
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v11 = DefineTrackMacroProperty(a1, a3, a4);
  if (v11)
  {
LABEL_16:
    uint64_t v15 = v11;
    goto LABEL_14;
  }
  CFAllocatorRef v12 = *v9;
  CFMutableSetRef v13 = CFSetCreateMutable(*v9, 0, MEMORY[0x1E4F1D548]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, v13);
  CFArrayRef v14 = CFArrayCreate(v12, 0, 0, MEMORY[0x1E4F1D510]);
  uint64_t v15 = DefineMacroProperty(a2, (uint64_t)a3, (uint64_t)v14);
  if (!v15)
  {
    CFArrayRef v16 = *(const __CFArray **)(a1 + 48);
    if (v16) {
      ConnectCrossTrackMacroProperties(a1, v16);
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
LABEL_14:
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  return v15;
}

void SetTrackMacroPropertyStateTracks(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFTypeRef v4 = CFRetain(cf);
  }
  else {
    CFTypeRef v4 = 0;
  }
  *(void *)(a1 + 48) = v4;

  ConnectCrossTrackMacroProperties(a1, (CFArrayRef)cf);
}

void ReviseTrackMacroPropertyStateTracks(uint64_t a1, CFTypeRef cf, CFArrayRef theArray, CFArrayRef a4)
{
  CFArrayRef v6 = *(const __CFArray **)(a1 + 48);
  if (cf)
  {
    if (v6)
    {
      if (a4 && CFArrayGetCount(a4)) {
        DisconnectCrossTrackMacroProperties(a1, a4);
      }
      if (theArray && CFArrayGetCount(theArray)) {
        ConnectCrossTrackMacroProperties(a1, theArray);
      }
      CFIndex v9 = *(const void **)(a1 + 48);
      *(void *)(a1 + 48) = cf;
      CFRetain(cf);
      if (v9)
      {
        CFRelease(v9);
      }
    }
    else
    {
      *(void *)(a1 + 48) = CFRetain(cf);
      ConnectCrossTrackMacroProperties(a1, (CFArrayRef)cf);
    }
  }
  else
  {
    DisconnectCrossTrackMacroProperties(a1, v6);
    CFDictionaryRef v10 = *(const void **)(a1 + 48);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 48) = 0;
    }
  }
}

void LockTrackMacroPropertyState()
{
}

void UnlockTrackMacroPropertyState()
{
}

uint64_t GetTrackMacroPropertyDefinitions(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

CFStringRef AssetCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAsset %p]", a1);
}

CFStringRef AssetTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetTrack %p]", a1);
}

uint64_t RegisterTrackMacroPropertyStateType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double trackMacroPropertyState_Init(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void trackMacroPropertyState_Finalize(uint64_t a1)
{
  if (*(void *)(a1 + 16) && *(void *)(a1 + 48))
  {
    MEMORY[0x19970E290]();
    DisconnectCrossTrackMacroProperties(a1, *(CFArrayRef *)(a1 + 48));
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  }
  FigSimpleMutexDestroy();
  mach_port_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  int v5 = *(const void **)(a1 + 24);
  if (v5) {
    CFRelease(v5);
  }

  objc_destroyWeak((id *)(a1 + 56));
}

__CFString *trackMacroPropertyState_CopyDebugDesc(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"TrackMacroPropertyState %p", a1);
  return Mutable;
}

void CrossTrackMacroPropertyNotificationCallback(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    CFDictionaryRef v10 = (void *)v9;
    uint64_t v11 = CFDictionaryGetValue(a5, @"assetPayload_Property");
    CMTimeValue value = 0;
    MEMORY[0x19970E290](*(void *)(a2 + 16));
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 40), v11, (const void **)&value)
      && CFSetGetCount((CFSetRef)value))
    {
      if (CFEqual(a3, @"assetTrackNotice_PropertyFailedToLoad"))
      {
        FigCFDictionaryGetIntIfPresent();
        CFAllocatorRef v12 = CFDictionaryGetValue(a5, @"assetPayload_CFError");
        CFMutableSetRef v13 = (__CFSet *)value;
        CFSetApplyFunction((CFSetRef)value, (CFSetApplierFunction)RemoveCrossTrackListenersFromTracksInSet, (void *)a2);
        CFSetRemoveAllValues(v13);
      }
      else
      {
        CFSetRemoveValue((CFMutableSetRef)value, a4);
        CFAllocatorRef v12 = 0;
      }
      if (!CFSetGetCount((CFSetRef)value))
      {
        CFArrayRef v14 = (void *)MEMORY[0x19970C720](a2 + 56);
        if (v14)
        {
          uint64_t v15 = v14;
          StoreByProduct(v14, v11, 0, v12, 0);
          CFRelease(v15);
        }
      }
    }
    MEMORY[0x19970E2B0](*(void *)(a2 + 16));
    if (GetAssetDeferredReleaseQueue_createQueueOnce != -1) {
      dispatch_once_f(&GetAssetDeferredReleaseQueue_createQueueOnce, 0, (dispatch_function_t)CreateAssetDeferredReleaseQueue);
    }
    dispatch_async_f((dispatch_queue_t)gCommonAssetDeferredReleaseQueue, v10, (dispatch_function_t)DeferredReleaseCFType);
  }
}

uint64_t RemoveCrossTrackListenersFromTracksInSet()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListeners();
}

uint64_t CreateAssetDeferredReleaseQueue()
{
  uint64_t result = FigDispatchQueueCreateWithPriority();
  gCommonAssetDeferredReleaseQueue = result;
  return result;
}

uint64_t FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(const __CFURL *a1, const void *a2, const void *a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (CFTypeID v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && a3
      && (CFTypeID v9 = CFGetTypeID(a3), v9 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLCFStringRef String = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        uint64_t v11 = (void *)[(id)sCacheManagementAssetClass assetFromFile:URLString withIdentifier:a2];
        if (!v11)
        {
          uint64_t v13 = FigSignalErrorAt();
          goto LABEL_15;
        }
        CFAllocatorRef v12 = v11;
        [v11 setContentType:a3];
        [v12 commit];
      }
      else
      {
        FigSignalErrorAt();
      }
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
      URLCFStringRef String = 0;
    }
  }
  else
  {
    URLCFStringRef String = 0;
    uint64_t v13 = 4294949823;
  }
LABEL_15:

  return v13;
}

CFStringRef figStorageManagementCreateURLString(const __CFURL *a1)
{
  if (!a1) {
    return 0;
  }
  CFURLRef v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1)
  {
    FigSignalErrorAt();
    return 0;
  }
  CFURLRef v2 = v1;
  CFStringRef v3 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  if (!v3) {
    FigSignalErrorAt();
  }
  CFRelease(v2);
  return v3;
}

uint64_t FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (CFTypeID v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLCFStringRef String = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        CFDictionaryRef v10 = (void *)[(id)sCacheManagementAssetClass assetFromFile:URLString withIdentifier:a2];
        if (!v10)
        {
          uint64_t v12 = FigSignalErrorAt();
          goto LABEL_13;
        }
        uint64_t v11 = v10;
        [v10 setDownloadStartDate:a3];
        [v11 commit];
      }
      else
      {
        FigSignalErrorAt();
      }
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      URLCFStringRef String = 0;
    }
  }
  else
  {
    URLCFStringRef String = 0;
    uint64_t v12 = 4294949823;
  }
LABEL_13:

  return v12;
}

uint64_t FigAssetDownloadStorageManagementCopyDownloadStartDateForAssetAtURL(const void *a1, const void *a2, void *a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (!a1) {
      goto LABEL_19;
    }
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID()) {
      goto LABEL_19;
    }
    if (!a2) {
      goto LABEL_19;
    }
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist()) {
      goto LABEL_19;
    }
    URLCFStringRef String = figStorageManagementCreateURLString((const __CFURL *)a1);
    CFTypeRef v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      uint64_t v13 = 0;
      goto LABEL_14;
    }
    uint64_t v11 = (void *)[(id)sCacheManagementAssetClass assetFromFile:v10 withIdentifier:a2];
    if (!v11)
    {
LABEL_19:
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    CFTypeRef v12 = (CFTypeRef)[v11 downloadStartDate];
    if (v12) {
      CFTypeRef v12 = CFRetain(v12);
    }
    uint64_t v13 = 0;
    *a3 = v12;
  }
  else
  {
    uint64_t v13 = 4294949823;
  }
LABEL_14:
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (CFTypeID v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLCFStringRef String = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        CFTypeRef v10 = (void *)[(id)sCacheManagementAssetClass assetFromFile:URLString withIdentifier:a2];
        if (!v10)
        {
          uint64_t v12 = FigSignalErrorAt();
          goto LABEL_13;
        }
        uint64_t v11 = v10;
        [v10 setDownloadCompletionDate:a3];
        [v11 commit];
      }
      else
      {
        FigSignalErrorAt();
      }
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      URLCFStringRef String = 0;
    }
  }
  else
  {
    URLCFStringRef String = 0;
    uint64_t v12 = 4294949823;
  }
LABEL_13:

  return v12;
}

uint64_t FigAssetDownloadStorageManagementCopyDownloadCompletionDateForAssetAtURL(const void *a1, const void *a2, void *a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (!a1) {
      goto LABEL_16;
    }
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID()) {
      goto LABEL_16;
    }
    if (!a2) {
      goto LABEL_16;
    }
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !a3 || !FigFileDoesFileExist()) {
      goto LABEL_16;
    }
    URLCFStringRef String = figStorageManagementCreateURLString((const __CFURL *)a1);
    CFTypeRef v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      uint64_t v13 = 0;
      goto LABEL_15;
    }
    uint64_t v11 = (void *)[(id)sCacheManagementAssetClass assetFromFile:v10 withIdentifier:a2];
    if (v11)
    {
      CFTypeRef v12 = (CFTypeRef)[v11 downloadCompletionDate];
      if (v12) {
        CFTypeRef v12 = CFRetain(v12);
      }
      uint64_t v13 = 0;
      *a3 = v12;
    }
    else
    {
LABEL_16:
      uint64_t v13 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v13 = 4294949823;
  }
LABEL_15:
  return v13;
}

uint64_t FigAssetDownloadStorageManagementCopyLastPlayedOutDateForAssetAtURL(const void *a1, const void *a2, void *a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (!a1) {
      goto LABEL_19;
    }
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID()) {
      goto LABEL_19;
    }
    if (!a2) {
      goto LABEL_19;
    }
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist()) {
      goto LABEL_19;
    }
    URLCFStringRef String = figStorageManagementCreateURLString((const __CFURL *)a1);
    CFTypeRef v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      uint64_t v13 = 0;
      goto LABEL_14;
    }
    uint64_t v11 = (void *)[(id)sCacheManagementAssetClass assetFromFile:v10 withIdentifier:a2];
    if (!v11)
    {
LABEL_19:
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    CFTypeRef v12 = (CFTypeRef)[v11 consumedDate];
    if (v12) {
      CFTypeRef v12 = CFRetain(v12);
    }
    uint64_t v13 = 0;
    *a3 = v12;
  }
  else
  {
    uint64_t v13 = 4294949823;
  }
LABEL_14:
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3, int a4)
{
  CFTypeID v8 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (CFTypeID v9 = CFGetTypeID(a1), v9 == CFURLGetTypeID())
      && a2
      && (CFTypeID v10 = CFGetTypeID(a2), v10 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLCFStringRef String = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        CFTypeRef v12 = (void *)[(id)sCacheManagementAssetClass assetFromFile:URLString withIdentifier:a2];
        if (!v12)
        {
          uint64_t v14 = FigSignalErrorAt();
          goto LABEL_15;
        }
        uint64_t v13 = v12;
        [v12 setLastViewedDate:a3];
        if (a4) {
          [v13 setConsumedDate:a3];
        }
        [v13 commit];
      }
      else
      {
        FigSignalErrorAt();
      }
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = FigSignalErrorAt();
      URLCFStringRef String = 0;
    }
  }
  else
  {
    URLCFStringRef String = 0;
    uint64_t v14 = 4294949823;
  }
LABEL_15:

  return v14;
}

uint64_t FigAssetDownloadStorageManagementCopyLastPlayedDateForAssetAtURL(const void *a1, const void *a2, void *a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (!a1) {
      goto LABEL_19;
    }
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID()) {
      goto LABEL_19;
    }
    if (!a2) {
      goto LABEL_19;
    }
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist()) {
      goto LABEL_19;
    }
    URLCFStringRef String = figStorageManagementCreateURLString((const __CFURL *)a1);
    CFTypeRef v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      uint64_t v13 = 0;
      goto LABEL_14;
    }
    uint64_t v11 = (void *)[(id)sCacheManagementAssetClass assetFromFile:v10 withIdentifier:a2];
    if (!v11)
    {
LABEL_19:
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    CFTypeRef v12 = (CFTypeRef)[v11 lastViewedDate];
    if (v12) {
      CFTypeRef v12 = CFRetain(v12);
    }
    uint64_t v13 = 0;
    *a3 = v12;
  }
  else
  {
    uint64_t v13 = 4294949823;
  }
LABEL_14:
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetExpirationDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (CFTypeID v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (CFTypeID v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLCFStringRef String = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        CFTypeRef v10 = (void *)[(id)sCacheManagementAssetClass assetFromFile:URLString withIdentifier:a2];
        if (!v10)
        {
          uint64_t v12 = FigSignalErrorAt();
          goto LABEL_13;
        }
        uint64_t v11 = v10;
        [v10 setExpirationDate:a3];
        [v11 commit];
      }
      else
      {
        FigSignalErrorAt();
      }
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      URLCFStringRef String = 0;
    }
  }
  else
  {
    URLCFStringRef String = 0;
    uint64_t v12 = 4294949823;
  }
LABEL_13:

  return v12;
}

uint64_t FigAssetDownloadStorageManagementCopyExpirationDateForAssetAtURL(const void *a1, const void *a2, void *a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (!a1) {
      goto LABEL_19;
    }
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID()) {
      goto LABEL_19;
    }
    if (!a2) {
      goto LABEL_19;
    }
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist()) {
      goto LABEL_19;
    }
    URLCFStringRef String = figStorageManagementCreateURLString((const __CFURL *)a1);
    CFTypeRef v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      uint64_t v13 = 0;
      goto LABEL_14;
    }
    uint64_t v11 = (void *)[(id)sCacheManagementAssetClass assetFromFile:v10 withIdentifier:a2];
    if (!v11)
    {
LABEL_19:
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    CFTypeRef v12 = (CFTypeRef)[v11 expirationDate];
    if (v12) {
      CFTypeRef v12 = CFRetain(v12);
    }
    uint64_t v13 = 0;
    *a3 = v12;
  }
  else
  {
    uint64_t v13 = 4294949823;
  }
LABEL_14:
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetPriorityForAssetAtURL(const void *a1, const void *a2, int a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (!sCacheManagementAssetClass)
  {
    URLCFStringRef String = 0;
    uint64_t v13 = 4294949823;
    goto LABEL_18;
  }
  if (!a1
    || (CFTypeID v7 = CFGetTypeID(a1), v7 != CFURLGetTypeID())
    || !a2
    || (CFTypeID v8 = CFGetTypeID(a2), v8 != CFStringGetTypeID())
    || !FigFileDoesFileExist())
  {
    uint64_t v13 = FigSignalErrorAt();
    URLCFStringRef String = 0;
    goto LABEL_18;
  }
  URLCFStringRef String = (__CFString *)figStorageManagementCreateURLString((const __CFURL *)a1);
  if (!URLString)
  {
    FigSignalErrorAt();
    goto LABEL_16;
  }
  CFTypeRef v10 = (void *)[(id)sCacheManagementAssetClass assetFromFile:URLString withIdentifier:a2];
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = v10;
  if (a3 == 1)
  {
    uint64_t v12 = 3;
    goto LABEL_15;
  }
  if (a3)
  {
LABEL_17:
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_18;
  }
  uint64_t v12 = 1;
LABEL_15:
  [v10 setPriority:v12];
  [v11 commit];
LABEL_16:
  uint64_t v13 = 0;
LABEL_18:

  return v13;
}

uint64_t FigAssetDownloadStorageManagementCopyPriorityForAssetAtURL(const void *a1, const void *a2, _DWORD *a3)
{
  CFArrayRef v6 = (void *)MEMORY[0x199711A30]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1) {
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_81);
  }
  if (sCacheManagementAssetClass)
  {
    if (!a1) {
      goto LABEL_17;
    }
    CFTypeID v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID()) {
      goto LABEL_17;
    }
    if (!a2) {
      goto LABEL_17;
    }
    CFTypeID v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist()) {
      goto LABEL_17;
    }
    URLCFStringRef String = figStorageManagementCreateURLString((const __CFURL *)a1);
    CFTypeRef v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      uint64_t v12 = 0;
      goto LABEL_12;
    }
    uint64_t v11 = (void *)[(id)sCacheManagementAssetClass assetFromFile:v10 withIdentifier:a2];
    if (!v11)
    {
LABEL_17:
      uint64_t v12 = FigSignalErrorAt();
      goto LABEL_12;
    }
    uint64_t v12 = 0;
    *a3 = [v11 priority] == 3;
  }
  else
  {
    uint64_t v12 = 4294949823;
  }
LABEL_12:
  return v12;
}

void FigAssetDownloadStorageManagementExcludeURLFromBackup(const __CFURL *a1)
{
  CFErrorRef error = 0;
  CFURLSetResourcePropertyForKey(a1, (CFStringRef)*MEMORY[0x1E4F1D680], (CFTypeRef)*MEMORY[0x1E4F1CFD0], &error);
  if (error) {
    CFRelease(error);
  }
}

uint64_t FigSetImageDataForAssetAtURL(const __CFURL *a1, CFDataRef theData)
{
  if (a1 && theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    size_t Length = CFDataGetLength(theData);
    return figSetExtendedAttributeData(a1, "com.apple.coremedia.asset.image", BytePtr, Length);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figSetExtendedAttributeData(const __CFURL *a1, const char *a2, const void *a3, size_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 && FigCFURLIsLocalResource() && a2 && a3 && (CFURLRef v8 = CFURLCopyAbsoluteURL(a1)) != 0)
  {
    CFURLRef v9 = v8;
    CFStringRef v10 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
    if (v10)
    {
      CFStringRef v11 = v10;
      if (CFStringGetCString(v10, buffer, 1024, 0x8000100u))
      {
        int v12 = setxattr(buffer, a2, a3, a4, 0, 0);
        uint64_t v13 = 0;
        if (v12) {
          uint64_t v13 = *__error();
        }
      }
      else
      {
        uint64_t v13 = FigSignalErrorAt();
      }
      CFRelease(v9);
      CFRelease(v11);
      return v13;
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
      CFRelease(v9);
      return v15;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSetNameForAssetAtURL(const __CFURL *a1, uint64_t a2)
{
  if (a1 && a2 && (uint64_t CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree()) != 0)
  {
    CFTypeRef v4 = CStringPtrAndBufferToFree;
    size_t v5 = strlen(CStringPtrAndBufferToFree);
    uint64_t v6 = figSetExtendedAttributeData(a1, "com.apple.coremedia.asset.name", v4, v5 + 1);
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  uint64_t v7 = v6;
  free(0);
  return v7;
}

CFDataRef MTCopyImageDataForAssetAtURL(const __CFURL *a1)
{
  ssize_t v8 = 0;
  CFURLRef v9 = 0;
  ExtendedAttributeCFDataRef Data = figGetExtendedAttributeData(a1, "com.apple.coremedia.asset.image", &v9, &v8);
  CFURLRef v2 = v9;
  if (ExtendedAttributeData)
  {
    CFDataRef v6 = 0;
  }
  else
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v4 = v8;
    GlobalCFAllocatorFigMCFAllocatorRef alloc = (const __CFAllocator *)FigGetGlobalCFAllocatorFigMalloc();
    CFDataRef v6 = CFDataCreateWithBytesNoCopy(v3, v2, v4, GlobalCFAllocatorFigMalloc);
    if (v6)
    {
      CFURLRef v2 = 0;
      CFURLRef v9 = 0;
    }
    else
    {
      CFURLRef v2 = v9;
    }
  }
  free(v2);
  return v6;
}

uint64_t figGetExtendedAttributeData(const __CFURL *a1, const char *a2, void *a3, ssize_t *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1 || !FigCFURLIsLocalResource() || !a3 || !a4 || (CFURLRef v8 = CFURLCopyAbsoluteURL(a1)) == 0)
  {
    uint64_t v16 = FigSignalErrorAt();
LABEL_15:
    uint64_t v14 = 0;
    goto LABEL_13;
  }
  CFURLRef v9 = v8;
  CFStringRef v10 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
  if (!v10)
  {
    uint64_t v16 = FigSignalErrorAt();
    CFRelease(v9);
    goto LABEL_15;
  }
  CFStringRef v11 = v10;
  if (!CFStringGetCString(v10, buffer, 1024, 0x8000100u))
  {
    uint64_t v14 = 0;
    uint64_t v16 = 4294954516;
    goto LABEL_12;
  }
  ssize_t v12 = getxattr(buffer, a2, 0, 0, 0, 0);
  if (v12 <= 0)
  {
    CFTypeID v18 = __error();
    uint64_t v14 = 0;
LABEL_21:
    uint64_t v16 = *v18;
    goto LABEL_12;
  }
  size_t v13 = v12;
  uint64_t v14 = malloc_type_calloc(1uLL, v12, 0xBA71CC5DuLL);
  if (!v14)
  {
    uint64_t v16 = 4294954510;
    goto LABEL_12;
  }
  ssize_t v15 = getxattr(buffer, a2, v14, v13, 0, 0);
  if (v15 <= 0)
  {
    CFTypeID v18 = __error();
    goto LABEL_21;
  }
  uint64_t v16 = 0;
  *a3 = v14;
  *a4 = v15;
  uint64_t v14 = 0;
LABEL_12:
  CFRelease(v9);
  CFRelease(v11);
LABEL_13:
  free(v14);
  return v16;
}

CFStringRef MTCopyNameForAssetAtURL(const __CFURL *a1)
{
  ssize_t v8 = 0;
  CFURLRef v9 = 0;
  ExtendedAttributeCFDataRef Data = figGetExtendedAttributeData(a1, "com.apple.coremedia.asset.name", &v9, &v8);
  CFURLRef v2 = v9;
  if (ExtendedAttributeData)
  {
    CFStringRef v6 = 0;
  }
  else
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v4 = v8;
    GlobalCFAllocatorFigMCFAllocatorRef alloc = (const __CFAllocator *)FigGetGlobalCFAllocatorFigMalloc();
    CFStringRef v6 = CFStringCreateWithBytesNoCopy(v3, v2, v4, 0x8000100u, 0, GlobalCFAllocatorFigMalloc);
    if (v6)
    {
      CFURLRef v2 = 0;
      CFURLRef v9 = 0;
    }
    else
    {
      CFURLRef v2 = v9;
    }
  }
  free(v2);
  return v6;
}

void *__figStorageManagerEnsureCacheDeleteIsLoaded_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CacheDelete.framework/CacheDelete", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "OBJC_CLASS_$_CacheManagementAsset");
    sCacheManagementAssetClass = (uint64_t)result;
  }
  return result;
}

uint64_t FigValeriaGetClassID()
{
  if (FigValeriaGetClassID_sRegisterFigValeriaTypeOnce != -1) {
    dispatch_once(&FigValeriaGetClassID_sRegisterFigValeriaTypeOnce, &__block_literal_global_82);
  }
  return FigValeriaGetClassID_sFigValeriaClassID;
}

CFStringRef val_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigValeria %p>", a1);
}

uint64_t __FigValeriaGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigValeriaGetTypeID()
{
  if (FigValeriaGetClassID_sRegisterFigValeriaTypeOnce != -1) {
    dispatch_once(&FigValeriaGetClassID_sRegisterFigValeriaTypeOnce, &__block_literal_global_82);
  }

  return CMBaseClassGetCFTypeID();
}

void InternalURLAssetCleanupPostPurchaseProcessing(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 192) && *(unsigned char *)(a1 + 193))
  {
    uint64_t v2 = *(void *)(a1 + 296);
    CMNotificationCenterGetDefaultLocalCenter();
    if (v2)
    {
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      CFIndex v4 = *(void **)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        size_t v5 = v4;
      }
      else {
        size_t v5 = 0;
      }
      if (*v5 >= 2uLL)
      {
        CFStringRef v6 = (void (*)(uint64_t))v5[8];
        if (v6) {
          v6(CMBaseObject);
        }
      }
      FigThreadAbortQueueForTeardown();
      dispatch_group_wait(*(dispatch_group_t *)(a1 + 296), 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(a1 + 296));
      *(void *)(a1 + 296) = 0;
      dispatch_release(*(dispatch_object_t *)(a1 + 304));
      *(void *)(a1 + 304) = 0;
    }
    else
    {
      FigNotificationCenterRemoveWeakListener();
    }
  }
}

void URLAssetDoneDownloadingCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
}

void URLAssetReadErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  int valuePtr = 0;
  values = 0;
  if (!*(unsigned char *)(a2 + 112) && *(void *)(a2 + 160) == a4)
  {
    if (a5 && (TypeIOSurfaceID ID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(a5)))
    {
      CFStringRef Value = (void *)CFDictionaryGetValue(a5, @"CRABS_ReadCFError");
      values = Value;
    }
    else
    {
      CFStringRef Value = 0;
    }
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a5, @"CRABS_ReadErrorCode");
    CFNumberRef number = v9;
    if (Value && (CFTypeID v10 = CFErrorGetTypeID(), v10 == CFGetTypeID(Value)))
    {
      CFDictionaryRef v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigAssetPayloadKey_CFError, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int Code = CFErrorGetCode((CFErrorRef)values);
      int valuePtr = Code;
    }
    else if (v9)
    {
      CFTypeID v13 = CFNumberGetTypeID();
      if (v13 == CFGetTypeID(v9))
      {
        CFDictionaryRef v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigAssetPayloadKey_Result, (const void **)&number, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
        int Code = valuePtr;
      }
      else
      {
        int Code = 0;
        CFDictionaryRef v11 = 0;
      }
    }
    else
    {
      int Code = 0;
      CFDictionaryRef v11 = 0;
    }
    ReviseDownloadToDestinationResultProperty(a2, Code);
    CFRetain((CFTypeRef)a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    if (v11) {
      CFRelease(v11);
    }
  }
}

void URLAssetDoneBufferingCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(a2 + 112) && *(void *)(a2 + 160) == a4)
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    ssize_t v8 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8 && !v8(CMBaseObject, *MEMORY[0x1E4F1EC50], 0, &v13))
    {
      uint64_t v9 = CMByteStreamGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v11 = v10 ? v10 : 0;
      ssize_t v12 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v11 + 48);
      if (v12)
      {
        if (!v12(v9, *MEMORY[0x1E4F1EC48], 0, &cf) && !*(unsigned char *)(a2 + 194) && CFEqual(cf, v13))
        {
          ReviseDownloadToDestinationResultProperty(a2, 0);
          CFRetain((CFTypeRef)a2);
          CMNotificationCenterGetDefaultLocalCenter();
          FigDeferNotificationToDispatchQueue();
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
}

uint64_t InternalURLAssetEnsureCustomURLLoaderCreated(dispatch_once_t *context)
{
  dispatch_once_t v3 = context[2];
  uint64_t v2 = context + 2;
  if (v3 != -1) {
    dispatch_once_f(v2, context, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
  }
  return *((unsigned int *)context + 124);
}

uint64_t CreateCustomURLLoaderOnceFunc(uint64_t a1)
{
  if (*(void *)(a1 + 488)) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = FigCustomURLLoaderCreate();
  }
  *(_DWORD *)(a1 + 496) = result;
  return result;
}

uint64_t InternalURLAssetSetStorageSession(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 88) || !FigCFDictionaryGetArrayValue()) {
    return 0;
  }

  return EnsureStorageSessionCreated(a1, a2);
}

uint64_t EnsureStorageSessionCreated(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 288)) {
    return *(unsigned int *)(a2 + 292);
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    if (*(void *)(a2 + 88))
    {
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
    }
    FigCFDictionarySetValue();
    goto LABEL_7;
  }
  uint64_t v3 = FigSignalErrorAt();
  if (!v3)
  {
LABEL_7:
    uint64_t v3 = FigURLStorageSessionCreate(Mutable, (uint64_t *)(a2 + 528));
    *(_DWORD *)(a2 + 292) = v3;
  }
  *(unsigned char *)(a2 + 288) = 1;
  StoreByProduct(a1, @"assetProperty_StorageSession", v3, 0, *(const void **)(a2 + 528));
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

void InternalURLAssetSetIncrementalFragmentParsingInterval(void *a1, uint64_t a2)
{
  CFIndex v4 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  if (v4)
  {
    size_t v5 = v4;
    *CFIndex v4 = CFRetain(a1);
    v5[1] = a2;
    uint64_t v7 = a1[12];
    uint64_t v6 = a1[13];
    dispatch_group_async_f(v6, v7, v5, (dispatch_function_t)PerformSetIncrementalFragmentParsingInterval);
  }
}

void PerformSetIncrementalFragmentParsingInterval(uint64_t a1)
{
  CFTypeRef v3 = *(CFTypeRef *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = v2 & ~(v2 >> 63);
  *((void *)v3 + 69) = v4;
  if (*((unsigned char *)v3 + 544))
  {
    size_t v5 = *((void *)v3 + 70);
    if (v5)
    {
      if (v2 < 1)
      {
        dispatch_time_t v8 = -1;
        uint64_t v6 = 0;
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v6 = 1000000 * v4;
        uint64_t v7 = 1000000 * (v4 / 0x64);
        dispatch_time_t v8 = 0;
      }
      dispatch_source_set_timer(v5, v8, v6, v7);
    }
  }
  CFRelease(*(CFTypeRef *)a1);

  free((void *)a1);
}

uint64_t InternalURLAssetShutdownWorkQueue(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    *(unsigned char *)(a1 + 112) = 1;
    return FigThreadAbortQueueForTeardown();
  }
  return result;
}

void InternalURLAssetCleanupChangeMonitoring(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 456))
  {
    if (*(unsigned char *)(a1 + 457))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(unsigned char *)(a1 + 458))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(unsigned char *)(a1 + 459))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(unsigned char *)(a1 + 460))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(void *)(a1 + 448))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v2 = *(const void **)(a1 + 448);
      if (v2)
      {
        CFRelease(v2);
        *(void *)(a1 + 448) = 0;
      }
    }
  }
}

void DurationPropertyNotificationCallback(int a1, NSObject **cf)
{
  CFRetain(cf);
  unint64_t v4 = cf[12];
  CFTypeRef v3 = cf[13];

  dispatch_group_async_f(v3, v4, cf, (dispatch_function_t)ReviseDurationProperty);
}

void CouldContainFragmentsPropertyNotificationCallback(int a1, NSObject **cf)
{
  CFRetain(cf);
  unint64_t v4 = cf[12];
  CFTypeRef v3 = cf[13];

  dispatch_group_async_f(v3, v4, cf, (dispatch_function_t)ReviseCouldContainFragmentsProperty);
}

void ContainsFragmentsPropertyNotificationCallback(int a1, NSObject **cf)
{
  CFRetain(cf);
  unint64_t v4 = cf[12];
  CFTypeRef v3 = cf[13];

  dispatch_group_async_f(v3, v4, cf, (dispatch_function_t)ReviseContainsFragmentsProperty);
}

void TracksArrayPropertyNotificationCallback(int a1, NSObject **cf)
{
  CFRetain(cf);
  unint64_t v4 = cf[12];
  CFTypeRef v3 = cf[13];

  dispatch_group_async_f(v3, v4, cf, (dispatch_function_t)ReviseTracksArrayProperty);
}

void AssetMutationMonitoringNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5 && *(void *)(a2 + 448))
  {
    uint64_t v7 = MEMORY[0x19970C720](a2 + 464);
    if (v7)
    {
      dispatch_time_t v8 = (const void *)v7;
      CFTypeRef v9 = CFRetain(*(CFTypeRef *)(a2 + 448));
      CFRetain(a5);
      CFRetain((CFTypeRef)a2);
      CFRetain(v8);
      uint64_t v11 = *(NSObject **)(a2 + 96);
      uint64_t v10 = *(NSObject **)(a2 + 104);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      v12[2] = __AssetMutationMonitoringNotificationCallback_block_invoke;
      v12[3] = &__block_descriptor_tmp_99;
      _OWORD v12[4] = a5;
      v12[5] = a2;
      v12[6] = v8;
      v12[7] = v9;
      dispatch_group_async(v10, v11, v12);
      CFRelease(v8);
    }
  }
}

void InternalURLAssetCleanupIncrementalFragmentProcessing(void *a1)
{
  CFRetain(a1);
  CFTypeRef v3 = a1[12];
  uint64_t v2 = a1[13];

  dispatch_group_async_f(v2, v3, a1, (dispatch_function_t)TearDownIncrementalFragmentParsingTimer);
}

void TearDownIncrementalFragmentParsingTimer(CFTypeRef cf)
{
  uint64_t v2 = *((void *)cf + 70);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)cf + 70));
    *((void *)cf + 70) = 0;
    *((unsigned char *)cf + 544) = 0;
    CFTypeRef v3 = (void *)*((void *)cf + 71);
    if (v3)
    {
      os_release(v3);
      *((void *)cf + 71) = 0;
    }
  }

  CFRelease(cf);
}

uint64_t InternalURLAssetEnsureDownloadTokenEstablished(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 56));
  if (*(unsigned char *)(a1 + 32))
  {
    MEMORY[0x19970E930](*(void *)(a1 + 56));
    return 0;
  }
  uint64_t v2 = MEMORY[0x19970C720](a1 + 48);
  if (v2)
  {
    CFTypeRef v3 = (const void *)v2;
    FigAssetTableAddAsset();
    *(unsigned char *)(a1 + 32) = 1;
    MEMORY[0x19970E930](*(void *)(a1 + 56));
    CFRelease(v3);
    return 0;
  }
  return 4294954511;
}

uint64_t InternalURLAssetCreateByteStreamProvider(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if ((v2 & 0x38) != 0) {
    int v3 = 30;
  }
  else {
    int v3 = 2;
  }
  uint64_t v4 = v3 & (v2 >> 1);
  if ((v3 & (v2 >> 1)) != 0 && *(_DWORD *)(a1 + 64) == 1431456810)
  {
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    uint64_t BaseByteStreamProvider = FigGetBaseByteStreamProvider();
    uint64_t v7 = *(void *)(a1 + 72);
    return MEMORY[0x1F40DC7B0](v5, BaseByteStreamProvider, v7, v4, a1 + 480);
  }
  else
  {
    dispatch_time_t v8 = (const void *)FigGetBaseByteStreamProvider();
    *(void *)(a1 + 480) = v8;
    if (v8) {
      CFRetain(v8);
    }
    return 0;
  }
}

uint64_t InternalURLAssetEnsureContentKeySessionCreated(void *a1)
{
  MEMORY[0x19970E910](a1[7]);
  if (!a1[64])
  {
    if (FigContentKeySessionCreate(*MEMORY[0x1E4F1CF80], a1 + 64)) {
      goto LABEL_12;
    }
    if (a1[11])
    {
      DataCFStringRef Value = FigCFDictionaryGetDataValue();
      if (!DataValue) {
        goto LABEL_3;
      }
      uint64_t v4 = a1[64];
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v7 = *(unsigned int (**)(uint64_t, void, uint64_t))(v6 + 56);
      if (!v7 || v7(v4, *MEMORY[0x1E4F1FC68], DataValue))
      {
LABEL_12:
        DataCFStringRef Value = FigSignalErrorAt();
        goto LABEL_3;
      }
    }
  }
  DataCFStringRef Value = 0;
LABEL_3:
  MEMORY[0x19970E930](a1[7]);
  return DataValue;
}

uint64_t InternalURLAssetEnsureContentKeyBoss(void *a1)
{
  MEMORY[0x19970E910](a1[7]);
  if (a1[65])
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v3 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v5 = Mutable;
      FigCFDictionarySetValueFromKeyInDict();
      uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
      if ((a1[10] & 0x200) == 0) {
        uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v5, @"kCKBCO_DoNotLogURLs", *v6);
      uint64_t v2 = FigContentKeyCompoundBossCreate(v3, v5, a1 + 65);
      CFRelease(v5);
    }
    else
    {
      uint64_t v2 = FigSignalErrorAt();
    }
  }
  MEMORY[0x19970E930](a1[7]);
  return v2;
}

uint64_t InternalURLAssetTransferBytePumpAsync(const void *a1, dispatch_queue_t *a2, uint64_t a3, uint64_t a4)
{
  dispatch_time_t v8 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040CEEF0025uLL);
  if (v8)
  {
    CFTypeRef v9 = v8;
    _OWORD v8[2] = CFRetain(a2);
    void v9[3] = CFRetain(a1);
    void v9[5] = a3;
    v9[6] = a4;
    dispatch_group_async_f(a2[13], a2[12], v9, (dispatch_function_t)PerformTransferBytePumpAsync);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void PerformTransferBytePumpAsync(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (void *)a1[3];
  CFTypeRef v58 = 0;
  if (*(unsigned char *)(v2 + 112))
  {
    *(_DWORD *)a1 = -12785;
    goto LABEL_44;
  }
  int v4 = EnsureBytePump(v3, v2);
  *(_DWORD *)a1 = v4;
  if (v4) {
    goto LABEL_38;
  }
  if (*(_DWORD *)(v2 + 380) == 1)
  {
    CFTypeRef cf = 0;
    int Options = CreateBytePumpCreateOptions(v3, v2, 0, (__CFDictionary **)&v58);
    *(_DWORD *)a1 = Options;
    if (Options) {
      goto LABEL_31;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v7 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(void *)(v2 + 88), *(void *)(v2 + 336), (__CFDictionary **)&cf);
    *(_DWORD *)a1 = v7;
    if (v7) {
      goto LABEL_31;
    }
    *(_DWORD *)a1 = FigBytePumpCreateForICY(v6, *(const void **)(v2 + 176), cf, (const __CFDictionary *)v58, 0, 0, 0, a1 + 4);
    CFTypeRef v8 = cf;
    if (!cf) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (*(unsigned char *)(v2 + 376))
  {
    CFTypeRef cf = 0;
    int v9 = CreateBytePumpCreateOptions(v3, v2, 0, (__CFDictionary **)&v58);
    *(_DWORD *)a1 = v9;
    if (!v9)
    {
      uint64_t v10 = *MEMORY[0x1E4F1CF80];
      int v11 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(void *)(v2 + 88), *(void *)(v2 + 336), (__CFDictionary **)&cf);
      *(_DWORD *)a1 = v11;
      if (!v11)
      {
        ssize_t v12 = a1 + 4;
        *(_DWORD *)a1 = CreateSegmentBytePump(v3, v2, cf, (const __CFDictionary *)v58, (CFTypeRef *)a1 + 4);
        if (cf) {
          CFRelease(cf);
        }
        uint64_t v13 = *v12;
        if (*v12)
        {
          CFTypeRef v56 = 0;
          FigBytePumpGetFigBaseObject(v13);
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v17 + 48);
          if (v19) {
            v19(v15, 0x1EE53E918, v10, &v56);
          }
          CFTypeRef v20 = v56;
          if (v56)
          {
            uint64_t v21 = *(void *)(v2 + 416);
            if (v21)
            {
              uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v23 = v22 ? v22 : 0;
              char v24 = *(void (**)(CFTypeRef, uint64_t, uint64_t))(v23 + 24);
              if (v24) {
                v24(v20, v21, 0x1EE582CD8);
              }
            }
          }
          CFTypeRef v8 = v56;
          if (v56) {
LABEL_30:
          }
            CFRelease(v8);
        }
      }
    }
  }
  else
  {
    CFTypeRef v18 = *(CFTypeRef *)(v2 + 384);
    if (v18) {
      CFTypeRef v18 = CFRetain(v18);
    }
    a1[4] = v18;
  }
LABEL_31:
  uint64_t v25 = *(void *)(v2 + 408);
  if (v25)
  {
    FigBytePumpGetFigBaseObject(a1[4]);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v29 = v28 ? v28 : 0;
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 56);
    if (v30) {
      v30(v27, 0x1EE53E4B8, v25);
    }
  }
  if (*(_DWORD *)a1)
  {
LABEL_38:
    CFTypeRef v31 = *(CFTypeRef *)(v2 + 400);
    if (v31) {
      CFTypeRef v31 = CFRetain(v31);
    }
    a1[1] = v31;
  }
  if (!*(unsigned char *)(v2 + 376))
  {
    CFTypeRef cf = 0;
    uint64_t v37 = *(void *)(v2 + 384);
    if (v37)
    {
      FigBytePumpGetFigBaseObject(v37);
      uint64_t v39 = v38;
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v40) {
        uint64_t v41 = v40;
      }
      else {
        uint64_t v41 = 0;
      }
      CMTimeFlags v44 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v41 + 48);
      if (v44) {
        v44(v39, 0x1EE53E918, *MEMORY[0x1E4F1CF80], &cf);
      }
      if (FigIsItOKToLogURLs()) {
        int v45 = (*(unsigned __int8 *)(v2 + 81) >> 1) & 1;
      }
      else {
        LOBYTE(v45) = 0;
      }
      uint64_t v46 = (uint64_t *)(v2 + 416);
      if (!FigReportingAgentCreate(0, 0, 0, 0, 0, 1, 0, v45, (void *)(v2 + 416)))
      {
        uint64_t v48 = *v46;
        uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v49) {
          uint64_t v50 = v49;
        }
        else {
          uint64_t v50 = 0;
        }
        CMTimeEpoch v51 = *(void (**)(uint64_t, uint64_t, void))(v50 + 56);
        if (v51) {
          v51(v48, 0x1EE582B38, *MEMORY[0x1E4F1CFC8]);
        }
        uint64_t v52 = *v46;
        CFTypeRef v47 = cf;
        if (!v52 || !cf) {
          goto LABEL_65;
        }
        uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v53) {
          uint64_t v54 = v53;
        }
        else {
          uint64_t v54 = 0;
        }
        CMTime v55 = *(void (**)(uint64_t, CFTypeRef, uint64_t))(v54 + 24);
        if (v55) {
          v55(v52, v47, 0x1EE582CD8);
        }
      }
      CFTypeRef v47 = cf;
LABEL_65:
      if (v47) {
        CFRelease(v47);
      }
    }
  }
  *(unsigned char *)(v2 + 376) = 1;
  if (v58) {
    CFRelease(v58);
  }
LABEL_44:
  uint64_t v32 = a1[4];
  if (v32)
  {
    FigBytePumpGetFigBaseObject(v32);
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v36 = v35 ? v35 : 0;
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, void))(v36 + 56);
    if (v42) {
      v42(v34, 0x1EE53E498, 0);
    }
  }
  CFTypeRef v43 = *(void **)(v2 + 40);
  if (v43 && !FigAssetDownloadCoordinatorRelinquishAccessToURL(v43)) {
    *(void *)(v2 + 40) = 0;
  }
  dispatch_async_f(*(dispatch_queue_t *)(v2 + 472), a1, (dispatch_function_t)PerformCompleteTransferBytePump);
}

void InternalURLAssetCleanupStreamingProcessing(uint64_t a1)
{
  if (*(void *)(a1 + 384))
  {
    RemoveBytePumpListenersAndDoBarrier(a1);
    FigBytePumpGetFigBaseObject(*(void *)(a1 + 384));
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      CFAllocatorRef v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6)
      {
        v6(v3);
      }
    }
  }
}

uint64_t RemoveBytePumpListenersAndDoBarrier(uint64_t result)
{
  if (*(unsigned char *)(result + 377))
  {
    uint64_t v1 = result;
    if (*(void *)(result + 384))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(v1 + 384));
      uint64_t v3 = *(void **)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      if (*v4 >= 2uLL)
      {
        uint64_t v5 = (void (*)(uint64_t))v4[8];
        if (v5) {
          v5(FigBaseObject);
        }
      }
      uint64_t result = FigStopForwardingMediaServicesProcessDeathNotification();
      *(unsigned char *)(v1 + 377) = 0;
    }
  }
  return result;
}

void URLAssetPropertyWorkFunction(void *a1)
{
  uint64_t v2 = *((void *)a1 + 5);
  if (*(unsigned char *)(v2 + 112))
  {
    int v9 = -12785;
    *((_DWORD *)a1 + 4) = -12785;
    goto LABEL_33;
  }
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    strncpy(__dst, (const char *)(v2 + 584), 8uLL);
    uint64_t v5 = (const void *)*((void *)a1 + 1);
    if (v5) {
      CFHash(v5);
    }
    kdebug_trace();
  }
  if (*((unsigned char *)a1 + 48))
  {
    *(void *)__dst = 0;
    LockTrackMacroPropertyState();
  }
  if (CFEqual(*((CFTypeRef *)a1 + 1), @"assetProperty_ResolvedURL"))
  {
    if (!*(unsigned char *)(v2 + 168))
    {
      int v6 = *(_DWORD *)(v2 + 64);
      if (v6 == 1431456810 || v6 == 708989738) {
        EnsureContentStreamCreated(v3, v2);
      }
      *(unsigned char *)(v2 + 168) = 1;
    }
    CFTypeRef v8 = *(CFTypeRef *)(v2 + 184);
    if (v8 || (CFTypeRef v8 = *(CFTypeRef *)(v2 + 176)) != 0) {
      CFTypeRef v8 = CFRetain(v8);
    }
    *((void *)a1 + 3) = v8;
    int v9 = *(_DWORD *)(v2 + 172);
    goto LABEL_29;
  }
  if (CFEqual(*((CFTypeRef *)a1 + 1), @"assetProperty_AssetType"))
  {
    int v9 = EnsureAssetTypeEstablished(v3, v2);
    if (v9)
    {
LABEL_29:
      *((_DWORD *)a1 + 4) = v9;
      goto LABEL_30;
    }
    CFTypeRef v10 = *(CFTypeRef *)(v2 + 120);
    if (!v10)
    {
LABEL_25:
      *((void *)a1 + 3) = v10;
      goto LABEL_29;
    }
LABEL_24:
    CFTypeRef v10 = CFRetain(v10);
    goto LABEL_25;
  }
  if (CFEqual(*((CFTypeRef *)a1 + 1), @"assetProperty_ContentByteStream"))
  {
    int v9 = EnsureContentStreamCreated(v3, v2);
    CFTypeRef v10 = *(CFTypeRef *)(v2 + 160);
    if (!v10) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!CFEqual(*((CFTypeRef *)a1 + 1), @"assetProperty_StorageSession"))
  {
    int v12 = EnsureAssetTypeEstablished(v3, v2);
    *((_DWORD *)a1 + 4) = v12;
    if (!v12)
    {
      int v11 = (*(uint64_t (**)(void *, uint64_t, void, uint64_t))(v2 + 128))(v3, v2, *((void *)a1 + 1), (uint64_t)a1 + 24);
      goto LABEL_39;
    }
    int v9 = v12;
LABEL_33:
    *((void *)a1 + 4) = AssetCopyLoadError(v2, v9);
    goto LABEL_34;
  }
  int v11 = ProduceStorageSessionProperty(v3, v2, (void *)a1 + 3);
LABEL_39:
  int v9 = v11;
  *((_DWORD *)a1 + 4) = v11;
LABEL_30:
  if (*v4 == 1)
  {
    kdebug_trace();
    int v9 = *((_DWORD *)a1 + 4);
  }
  if (v9) {
    goto LABEL_33;
  }
LABEL_34:
  ReportCompletedPropertyJob(a1);
}

uint64_t ProduceStorageSessionProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = EnsureStorageSessionCreated(a1, a2);
  CFTypeRef v6 = *(CFTypeRef *)(a2 + 528);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  *a3 = v6;
  return v5;
}

uint64_t EnsureAssetTypeEstablished(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112))
  {
    int v11 = -12785;
  }
  else
  {
    if (*(unsigned char *)(a2 + 113))
    {
      uint64_t v4 = (unsigned int *)(a2 + 116);
      return *v4;
    }
    if (*(_DWORD *)(a2 + 64) == 709251626)
    {
      uint64_t v5 = kFigAssetType_FormatReader;
      goto LABEL_10;
    }
    int v6 = EnsureContentStreamCreated(a1, a2);
    if (!v6)
    {
      if (*(unsigned char *)(a2 + 192))
      {
        CFTypeRef v7 = CFRetain(@"com.apple.coremedia.assettype.streaming");
        *(void *)(a2 + 120) = v7;
        CFTypeRef v8 = ProduceStreamingAssetProperty;
LABEL_11:
        *(void *)(a2 + 128) = v8;
        *(_DWORD *)(a2 + 116) = 0;
        int v9 = (unsigned int *)(a2 + 116);
        *((unsigned char *)v9 - 3) = 1;
        StoreByProduct(a1, @"assetProperty_AssetType", 0, 0, v7);
        uint64_t v4 = v9;
        return *v4;
      }
      uint64_t v5 = kFigAssetType_File;
LABEL_10:
      CFTypeRef v7 = CFRetain(*v5);
      *(void *)(a2 + 120) = v7;
      CFTypeRef v8 = ProduceFormatReaderAssetProperty;
      goto LABEL_11;
    }
    int v11 = v6;
  }
  *(unsigned char *)(a2 + 113) = 1;
  *(_DWORD *)(a2 + 116) = v11;
  uint64_t v4 = (unsigned int *)(a2 + 116);
  CFStringRef Error = AssetCopyLoadError(a2, v11);
  StoreByProduct(a1, @"assetProperty_AssetType", *(_DWORD *)(a2 + 116), Error, *(const void **)(a2 + 120));
  if (Error) {
    CFRelease(Error);
  }
  return *v4;
}

CFStringRef AssetCopyLoadError(uint64_t a1, int a2)
{
  uint64_t v16 = 0;
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v2 = *(void *)(a1 + 384);
    if (v2)
    {
      CFTypeRef cf = 0;
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v2);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      CFTypeRef v10 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v6 + 48);
      if (v10)
      {
        v10(FigBaseObject, 0x1EE53E3D8, *MEMORY[0x1E4F1CF80], &cf);
        if (cf)
        {
          CFStringRef CFErrorFromFigErrorLog = FigCreateCFErrorFromFigErrorLog((const __CFString *)cf, a2);
          CFRelease(cf);
          return CFErrorFromFigErrorLog;
        }
      }
    }
    return 0;
  }
  if (*(void *)(a1 + 160))
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, void, void, uint64_t *))(v9 + 48);
    if (v14)
    {
      v14(CMBaseObject, *MEMORY[0x1E4F1FB50], 0, &v16);
      return (const __CFString *)v16;
    }
    return 0;
  }
  int v12 = *(const void **)(a1 + 152);
  if (!v12) {
    return 0;
  }

  return (const __CFString *)CFRetain(v12);
}

uint64_t InternalURLAssetSetShouldPrefetchCryptKeys(const void *a1, dispatch_queue_t *a2, uint64_t a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040A95220FAuLL);
  *uint64_t v6 = CFRetain(a2);
  v6[1] = CFRetain(a1);
  *((unsigned char *)v6 + 16) = *MEMORY[0x1E4F1CFD0] == a3;
  dispatch_group_async_f(a2[13], a2[12], v6, (dispatch_function_t)PerformSetShouldPrefetchCryptKeys);
  return 0;
}

void PerformSetShouldPrefetchCryptKeys(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  if (!EnsureAssetTypeEstablished(v3, *(void *)a1))
  {
    BOOL v5 = !*(unsigned char *)(v2 + 192) || v4 == 0;
    if (!v5 && *(unsigned __int8 *)(v2 + 379) != v4 && !EnsureBytePump(v3, v2) && *(void *)(v2 + 384))
    {
      if (_os_feature_enabled_impl())
      {
        if (!EnsureStreamingAssetPropertyLoaderCreated(v3, v2)) {
          FigStreamingAssetLoaderRequestSessionKeys(*(void **)(v2 + 504));
        }
      }
      else
      {
        FigBytePumpGetFigBaseObject(*(void *)(v2 + 384));
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        CFTypeRef v10 = *(void (**)(uint64_t, uint64_t, void))(v9 + 56);
        if (v10) {
          v10(v7, 0x1EE53E798, *MEMORY[0x1E4F1CFD0]);
        }
      }
    }
  }
  *(unsigned char *)(v2 + 379) = v4;
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 8));

  free((void *)a1);
}

void URLAssetTrackPropertyWorkFunction(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    strncpy(__dst, (const char *)(v2 + 80), 8uLL);
    int v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFHash(v4);
    }
    kdebug_trace();
  }
  int v5 = ProduceAssetTrackProperty(v2, *(CFTypeRef *)(a1 + 8), (void *)(a1 + 24));
  if (*v3 == 1) {
    kdebug_trace();
  }
  *(_DWORD *)(a1 + 16) = v5;
  if (v5 && *(void *)(v2 + 32))
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, void, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(CMBaseObject, *MEMORY[0x1E4F1FB50], *MEMORY[0x1E4F1CF80], a1 + 32);
    }
  }
  ReportCompletedPropertyJob((void *)a1);
}

uint64_t ProduceAssetTrackProperty(uint64_t a1, CFTypeRef cf1, void *a3)
{
  uint64_t v33 = 0;
  if (CFEqual(cf1, @"FormatDescriptionArray"))
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    int v11 = *(uint64_t (**)(uint64_t, __CFString *, void, __CFArray **))(v8 + 48);
    if (v11)
    {
      int v12 = kFigTrackProperty_FormatDescriptionArray;
LABEL_16:
      unsigned int v16 = v11(FigBaseObject, *v12, *MEMORY[0x1E4F1CF80], &v33);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (CFEqual(cf1, @"IsEnabled"))
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = *(uint64_t (**)(uint64_t, __CFString *, void, __CFArray **))(v10 + 48);
    if (v11)
    {
      int v12 = kFigTrackProperty_Enabled;
      goto LABEL_16;
    }
    goto LABEL_32;
  }
  if (!CFEqual(cf1, @"IsSelfContained"))
  {
    if (CFEqual(cf1, @"TotalSampleDataLength"))
    {
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      int v11 = *(uint64_t (**)(uint64_t, __CFString *, void, __CFArray **))(v18 + 48);
      if (v11)
      {
        int v12 = kFigTrackProperty_UneditedNumDataBytes;
        goto LABEL_16;
      }
LABEL_32:
      unsigned int v16 = -12782;
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"TimeRange"))
    {
      unsigned int v16 = ProduceTimeRangeAssetTrackProperty(a1, &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"MediaPresentationTimeRange"))
    {
      unsigned int v16 = ProduceMediaPresentationTimeRangeAssetTrackProperty(a1, &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"MediaDecodeTimeRange"))
    {
      unsigned int v16 = ProduceMediaDecodeTimeRangeAssetTrackProperty(a1, &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"NaturalTimeScale"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_Timescale;
LABEL_64:
      uint64_t v27 = *v26;
      uint64_t v28 = *MEMORY[0x1E4F1CF80];
LABEL_65:
      unsigned int v16 = FigTrackReaderCopyProperty(v25, (uint64_t)v27, v28, (uint64_t)&v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"EstimatedDataRate"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_EstimatedDataRate;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"PeakDataRate"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_PeakDataRate;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"UneditedSampleCount"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_UneditedSampleCount;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"HasRollInformation"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_HasRollInformation;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"LanguageCode"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_LanguageCode;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"MediaCharacteristicArray"))
    {
      unsigned int v16 = FigMediaCharacteristicsCopyMediaCharacteristicsForTrackReader(*MEMORY[0x1E4F1CF80], *(void *)(a1 + 24), &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"ExtendedLanguageTag"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_ExtendedLanguageTagString;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"NaturalSize"))
    {
      uint64_t v29 = *MEMORY[0x1E4F1CF80];
      if (FigTrackReaderCopyProperty(*(void *)(a1 + 24), @"CleanApertureDimensions", *MEMORY[0x1E4F1CF80], (uint64_t)&v33)|| !v33)
      {
        uint64_t v25 = *(void *)(a1 + 24);
        uint64_t v27 = @"TrackDimensions";
        uint64_t v28 = v29;
        goto LABEL_65;
      }
      goto LABEL_73;
    }
    if (CFEqual(cf1, @"TrackDimensions"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_Dimensions;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"CleanApertureDimensions"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_CleanApertureDimensions;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"ProductionApertureDimensions"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_ProductionApertureDimensions;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"EncodedPixelsDimensions"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_EncodedPixelsDimensions;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"PreferredTransform"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_Matrix;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"NominalFrameRate"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_NominalFrameRate;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"NonDroppableFrameRate"))
    {
      unsigned int v16 = ProduceAssetTrackNonDroppableFrameRateProperty(a1, &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"assetTrackProperty_QuickTimeMetadata"))
    {
      unsigned int v16 = FigMetadataCopyTrackQuickTimeMetadata(*(void *)(a1 + 24), *MEMORY[0x1E4F1CF80], &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"assetTrackProperty_QuickTimeUserData"))
    {
      unsigned int v16 = FigMetadataCopyTrackQuickTimeUserdata(*(void *)(a1 + 24), *MEMORY[0x1E4F1CF80], &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"assetTrackProperty_ISOUserData"))
    {
      unsigned int v16 = FigMetadataCopyTrackISOUserdata(*(void *)(a1 + 24), *MEMORY[0x1E4F1CF80], &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"CommonMetadata"))
    {
      unsigned int v16 = FigMetadataCopyTrackCommonMetadata(*(void *)(a1 + 24), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"assetTrackProperty_FormatSpecificMetadata"))
    {
      unsigned int v16 = ProduceFormatSpecificMetadataAssetTrackProperty(*(void *)(a1 + 24), &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"assetTrackProperty_FormatSpecificMetadataFormat"))
    {
      unsigned int v16 = ProduceFormatSpecificMetadataFormatAssetTrackProperty(*(void *)(a1 + 24), (uint64_t)&v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"AvailableMetadataFormats"))
    {
      unsigned int v16 = ProduceAvailableMetadataFormatsAssetTrackProperty(*(void *)(a1 + 24), &v33);
      goto LABEL_33;
    }
    if (CFEqual(cf1, @"IsExcludedFromAutoselection"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_ExcludeFromAutoSelection;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"Volume"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_Volume;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"Layer"))
    {
      uint64_t v25 = *(void *)(a1 + 24);
      uint64_t v26 = kFigTrackProperty_Layer;
      goto LABEL_64;
    }
    if (CFEqual(cf1, @"assetTrackProperty_EditSegmentData"))
    {
      uint64_t v30 = a1;
      int v31 = 0;
    }
    else
    {
      if (!CFEqual(cf1, @"assetTrackProperty_PresentationSegmentData"))
      {
        if (CFEqual(cf1, @"assetTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration"))
        {
          uint64_t v25 = *(void *)(a1 + 24);
          uint64_t v26 = kFigTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration;
          goto LABEL_64;
        }
        if (CFEqual(cf1, @"assetTrackProperty_GaplessSourceTimeRange"))
        {
          ProduceGaplessSourceTimeRangeAssetTrackProperty(a1, &v33);
          goto LABEL_73;
        }
        if (CFEqual(cf1, @"assetTrackProperty_TrackReferences"))
        {
          unsigned int v16 = ProduceTrackReferencesTrackProperty(a1, &v33);
          goto LABEL_33;
        }
        if (CFEqual(cf1, @"LoudnessInfo"))
        {
          unsigned int v16 = ProduceLoudnessInfoTrackProperty(a1, &v33);
          goto LABEL_33;
        }
        if (CFEqual(cf1, @"assetTrackProperty_ProtectedStatus"))
        {
          unsigned int v16 = ProduceProtectedStatusTrackProperty(a1, (CFTypeRef *)&v33);
          goto LABEL_33;
        }
        if (CFEqual(cf1, @"assetTrackProperty_UsesAudibleDRM"))
        {
          ProduceUsesAudibleDRMTrackProperty(a1, &v33);
          goto LABEL_73;
        }
        if (CFEqual(cf1, @"assetTrackProperty_AudibleContentIsAuthorized"))
        {
          ProduceAudibleContentIsAuthorizedTrackProperty(a1, &v33);
          goto LABEL_73;
        }
        if (CFEqual(cf1, @"MinSampleDuration"))
        {
          ProduceMinSampleDurationTrackProperty(a1, &v33);
          goto LABEL_73;
        }
        if (CFEqual(cf1, @"AlternateGroupID"))
        {
          uint64_t v32 = kFigTrackProperty_AlternateGroupID;
        }
        else
        {
          if (!CFEqual(cf1, @"DefaultAlternateGroupID"))
          {
            if (CFEqual(cf1, @"ProvisionalAlternateGroupID"))
            {
              uint64_t v25 = *(void *)(a1 + 24);
              uint64_t v26 = kFigTrackProperty_ProvisionalAlternateGroupID;
              goto LABEL_64;
            }
            if (CFEqual(cf1, @"LoadSettings"))
            {
              uint64_t v25 = *(void *)(a1 + 24);
              uint64_t v26 = kFigTrackProperty_QTLoadSettings;
              goto LABEL_64;
            }
            if (CFEqual(cf1, @"SampleGroupDescriptions"))
            {
              uint64_t v25 = *(void *)(a1 + 24);
              uint64_t v26 = kFigTrackProperty_SampleGroupDescriptions;
              goto LABEL_64;
            }
            if (CFEqual(cf1, @"HEVCTemporalLevelInfoCombinations"))
            {
              uint64_t v25 = *(void *)(a1 + 24);
              uint64_t v26 = kFigTrackProperty_HEVCTemporalLevelInfoCombinations;
              goto LABEL_64;
            }
            if (CFEqual(cf1, @"HEVCSyncSampleNALUnitTypes"))
            {
              uint64_t v25 = *(void *)(a1 + 24);
              uint64_t v26 = kFigTrackProperty_HEVCSyncSampleNALUnitTypes;
              goto LABEL_64;
            }
            if (CFEqual(cf1, @"assetTrackProperty_CameraRollValidation"))
            {
              ProduceAssetTrackCameraRollValidationProperty(a1, &v33);
            }
            else if (CFEqual(cf1, @"assetTrackProperty_MediaPlaybackValidation"))
            {
              ProduceAssetTrack_MediaPlaybackValidationProperty(a1, &v33);
            }
            else
            {
              if (!CFEqual(cf1, @"assetTrackProperty_MediaDecodingValidation"))
              {
                if (CFEqual(cf1, @"assetTrackProperty_ContainsWideColor"))
                {
                  unsigned int v16 = ProduceAssetTrack_ContainsWideColor(a1, (CFTypeRef *)&v33);
                }
                else if (CFEqual(cf1, @"assetTrackProperty_LatentBaseDecodeTimeStampOfFirstTrackFragment"))
                {
                  unsigned int v16 = ProduceAssetTrackLatentBaseDecodeTimeStampOfFirstTrackFragment(a1, &v33);
                }
                else
                {
                  unsigned int v16 = -12182;
                }
                goto LABEL_33;
              }
              ProduceAssetTrack_MediaDecodingValidationProperty(a1, &v33);
            }
LABEL_73:
            unsigned int v16 = 0;
            goto LABEL_33;
          }
          uint64_t v32 = kFigTrackProperty_DefaultAlternateGroupID;
        }
        ProduceAlternateGroupIDTrackPropertyByKey(a1, (uint64_t)*v32, &v33);
        goto LABEL_73;
      }
      uint64_t v30 = a1;
      int v31 = 1;
    }
    unsigned int v16 = ProduceSegmentDataAssetTrackProperty(v30, v31, &v33);
    goto LABEL_33;
  }
  uint64_t v13 = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, void, __CFArray **))(v15 + 48);
  if (!v19 || (unsigned int v16 = v19(v13, @"TrackIsSelfContained", *MEMORY[0x1E4F1CF80], &v33), !v33))
  {
    if (*MEMORY[0x1E4F1CFD0]) {
      CFTypeRef v20 = (__CFArray *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    }
    else {
      CFTypeRef v20 = 0;
    }
    unsigned int v16 = 0;
    uint64_t v33 = v20;
  }
LABEL_33:
  if (v16 >> 1 == 2147477256 || v16 == -12787) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v16;
  }
  *a3 = v33;
  if (!v22 && *(unsigned char *)(a1 + 65))
  {
    if (!*(void *)(a1 + 72))
    {
      if (sBuildPropertyDependencyDictionaryOnce != -1) {
        dispatch_once_f(&sBuildPropertyDependencyDictionaryOnce, 0, (dispatch_function_t)BuildPropertyDependencyDictionary);
      }
      *(void *)(a1 + 72) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)sAssetTrackPropertyDependencies, cf1);
    if (Value) {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), cf1, Value);
    }
  }
  return v22;
}

void InternalURLAssetTrackStopMonitoringChanges(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 65))
  {
    if (*(unsigned char *)(a1 + 66))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(a1 + 66) = 0;
    }
    if (*(void *)(a1 + 72))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v2 = *(const void **)(a1 + 72);
      if (v2)
      {
        CFRelease(v2);
        *(void *)(a1 + 72) = 0;
      }
    }
  }
}

void SegmentDataAssetTrackPropertiesNotificationCallback(int a1, NSObject **cf)
{
  CFRetain(cf);
  uint64_t v3 = cf[6];

  dispatch_async_f(v3, cf, (dispatch_function_t)ReviseSegmentDataAssetTrackProperties);
}

void AssetTrackMutationMonitoringNotificationCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5)
  {
    uint64_t v7 = MEMORY[0x19970C720](a2 + 5);
    if (v7)
    {
      uint64_t v8 = (const void *)v7;
      CFRetain(a5);
      CFRetain(a2);
      CFRetain(v8);
      uint64_t v10 = a2[6];
      uint64_t v9 = a2[7];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __AssetTrackMutationMonitoringNotificationCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_15_1;
      void block[4] = a5;
      void block[5] = a2;
      void block[6] = v8;
      dispatch_group_async(v9, v10, block);
      CFRelease(v8);
    }
  }
}

void URLAssetValidationWorkFunction(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)MEMORY[0x19970C720](v2 + 464);
  int v4 = v3;
  if (*(unsigned char *)(v2 + 112)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0;
  }
  if (v5)
  {
    *(_DWORD *)(a1 + 24) = -12785;
    ReportCompletedValidationJob((void *)a1);
    if (!v4) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) = ProduceAssetValidationResult(v3, v2, *(const void **)(a1 + 8), *(const void **)(a1 + 16));
    ReportCompletedValidationJob((void *)a1);
  }

  CFRelease(v4);
}

uint64_t ProduceAssetValidationResult(void *a1, uint64_t a2, const void *a3, const void *a4)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a2 + 112)) {
    return 4294954511;
  }
  uint64_t v8 = EnsureAssetTypeEstablished();
  if (v8) {
    return v8;
  }
  if (*(unsigned char *)(a2 + 192))
  {
    if (CFEqual(a3, @"validationCriteria_CameraRoll")) {
      return 4294951204;
    }
    else {
      return 0;
    }
  }
  if (CFEqual(a3, @"validationCriteria_Custom"))
  {
    if (a4) {
      CFTypeRef v11 = CFRetain(a4);
    }
    else {
      CFTypeRef v11 = 0;
    }
    CFTypeRef cf = v11;
LABEL_22:
    if (!v11) {
      return 0;
    }
    uint64_t v13 = EnsureFormatReaderCreated(a1, a2);
    CFTypeRef v11 = cf;
    if (!v13)
    {
      uint64_t v9 = FigMediaValidatorValidateByteStream(*(void *)(a2 + 160), *(const void **)(a2 + 240), (const __CFDictionary *)cf);
      CFTypeRef v11 = cf;
      if (!cf) {
        return v9;
      }
LABEL_25:
      CFRelease(v11);
      return v9;
    }
LABEL_32:
    uint64_t v9 = v13;
    if (!v11) {
      return v9;
    }
    goto LABEL_25;
  }
  if (CFEqual(a3, @"validationCriteria_CameraRoll"))
  {
    int v12 = @"CameraRollValidator.plist";
    goto LABEL_21;
  }
  if (CFEqual(a3, @"validationCriteria_MediaPlayback"))
  {
    int v12 = @"MediaValidator.plist";
    goto LABEL_21;
  }
  if (CFEqual(a3, @"validationCriteria_AirPlayVideo"))
  {
    int v12 = @"AirPlayVideoMediaValidator.plist";
    goto LABEL_21;
  }
  if (CFEqual(a3, @"validationCriteria_PhotosTranscodingService"))
  {
    int v12 = @"CloudTranscodeValidator.plist";
LABEL_21:
    uint64_t v13 = FigMediaValidatorCreateMediaValidatorPropertyList((uint64_t)v12, &cf);
    CFTypeRef v11 = cf;
    if (v13) {
      goto LABEL_32;
    }
    goto LABEL_22;
  }

  return FigSignalErrorAt();
}

void URLAssetTrackValidationWorkFunction(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = ProduceAssetTrackValidationResult(*(void *)(a1 + 32), *(CFTypeRef *)(a1 + 8), *(const void **)(a1 + 16));

  ReportCompletedValidationJob((void *)a1);
}

uint64_t ProduceAssetTrackValidationResult(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  CFTypeRef cf = 0;
  if (CFEqual(cf1, @"validationCriteria_Custom"))
  {
    if (!a3) {
      return 0;
    }
    CFTypeRef v6 = CFRetain(a3);
    CFTypeRef cf = v6;
    if (!v6) {
      return 0;
    }
LABEL_13:
    uint64_t v9 = FigMediaValidatorValidateIndividualTrack(*(void *)(a1 + 16), *(void *)(a1 + 24), (const __CFDictionary *)v6);
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"validationCriteria_CameraRoll"))
  {
    uint64_t v7 = @"CameraRollValidator.plist";
  }
  else if (CFEqual(cf1, @"validationCriteria_MediaPlayback"))
  {
    uint64_t v7 = @"MediaValidator.plist";
  }
  else
  {
    if (CFEqual(cf1, @"validationCriteria_MediaDecoding"))
    {
      char v8 = 0;
      uint64_t v7 = @"MediaValidator.plist";
      goto LABEL_10;
    }
    if (!CFEqual(cf1, @"validationCriteria_PhotosTranscodingService"))
    {
      uint64_t v9 = FigSignalErrorAt();
      goto LABEL_16;
    }
    uint64_t v7 = @"CloudTranscodeValidator.plist";
  }
  char v8 = 1;
LABEL_10:
  uint64_t v9 = FigMediaValidatorCreateMediaValidatorPropertyList((uint64_t)v7, &cf);
  if (v9) {
    goto LABEL_16;
  }
  CFTypeRef v6 = cf;
  if (!cf) {
    return 0;
  }
  if (v8) {
    goto LABEL_13;
  }
  uint64_t v9 = FigMediaValidatorValidateIndividualTrackForDecoding(*(void *)(a1 + 16), *(void *)(a1 + 24), (const __CFDictionary *)cf);
LABEL_16:
  uint64_t v10 = v9;
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t InternalURLAssetCopyChapterData(const void *a1, dispatch_queue_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6)
{
  int v12 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x106004070AE3097uLL);
  if (v12)
  {
    *((void *)v12 + 1) = CFRetain(a2);
    *((void *)v12 + 2) = CFRetain(a1);
    v12[6] = a3;
    v12[7] = a4;
    void v12[8] = a5;
    dispatch_sync_f(a2[12], v12, (dispatch_function_t)PerformCopyChapterData);
    CFRelease(*((CFTypeRef *)v12 + 1));
    CFRelease(*((CFTypeRef *)v12 + 2));
    *a6 = *((void *)v12 + 5);
    uint64_t v13 = *v12;
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
  }
  free(v12);
  return v13;
}

void PerformCopyChapterData(uint64_t a1)
{
  values = 0;
  unsigned int valuePtr = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    goto LABEL_43;
  }
  uint64_t v3 = *(void **)(a1 + 16);
  if (!v3
    || (*(_DWORD *)(a1 + 24) & 0x80000000) != 0
    || (*(_DWORD *)(a1 + 28) & 0x80000000) != 0
    || *(int *)(a1 + 32) <= 0)
  {
    goto LABEL_43;
  }
  if (!*(unsigned char *)(v2 + 112))
  {
    int v4 = EnsureChapterGroupInfoCreated(v3, v2);
    if (v4)
    {
LABEL_44:
      int v27 = v4;
      goto LABEL_35;
    }
    CFArrayRef v5 = *(const __CFArray **)(v2 + 328);
    if (!v5)
    {
      CFMutableDictionaryRef Mutable = 0;
      int v27 = -12175;
LABEL_34:
      *(void *)(a1 + 40) = Mutable;
LABEL_35:
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_36;
    }
    CFIndex Count = CFArrayGetCount(v5);
    CFIndex v7 = *(int *)(a1 + 24);
    if (Count > v7)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 328), v7);
      CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"chapterGroupKey_Type");
      int v10 = CFEqual(Value, @"artwork");
      CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"chapterGroupKey_TrackID");
      CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
      CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"chapterGroupKey_PerChapterInfo");
      if (!v12)
      {
        CFMutableDictionaryRef Mutable = 0;
LABEL_33:
        int v27 = 0;
        goto LABEL_34;
      }
      CFArrayRef v13 = v12;
      if (CFArrayGetCount(v12) >= *(int *)(a1 + 32) + (uint64_t)*(int *)(a1 + 28))
      {
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (*(int *)(a1 + 32) >= 1)
        {
          CFIndex v16 = *(int *)(a1 + 28);
          uint64_t v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
          while (1)
          {
            CFDictionaryRef v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v16);
            if (*(unsigned char *)(v2 + 112)) {
              goto LABEL_46;
            }
            CFDictionaryRef v19 = v18;
            if (v10)
            {
              int v20 = FCSupport_CopyChapterImageData(*(void *)(v2 + 240), *(void *)(v2 + 480), valuePtr, v18, (CFDataRef *)&values, 0);
              if (v20) {
                goto LABEL_42;
              }
              CFDictionaryRef v21 = CFDictionaryCreate(v14, (const void **)kFigChapterArtworkDataKey_ImageData, (const void **)&values, 1, MEMORY[0x1E4F1D530], v17);
              if (!v21)
              {
LABEL_41:
                int v20 = FigSignalErrorAt();
LABEL_42:
                int v27 = v20;
                goto LABEL_36;
              }
              CFDictionaryRef v22 = v21;
              CFArrayAppendValue(Mutable, v21);
              CFRelease(v22);
              if (values)
              {
                CFRelease(values);
                values = 0;
              }
            }
            else
            {
              if (!FCSupport_HasChapterDetails(v18))
              {
                int v20 = FCSupport_PopulateChapterTitleDetail(*(void *)(v2 + 240), valuePtr, *(void *)(v2 + 480), v19);
                if (v20) {
                  goto LABEL_42;
                }
              }
              CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], v17);
              if (!v23) {
                goto LABEL_41;
              }
              char v24 = v23;
              uint64_t v25 = CFDictionaryGetValue(v19, @"ChapterName");
              if (v25 || (uint64_t v25 = CFDictionaryGetValue(v19, @"ChapterHREFText")) != 0) {
                CFDictionaryAddValue(v24, @"ChapterTitleText", v25);
              }
              uint64_t v26 = CFDictionaryGetValue(v19, @"ChapterHREFURL");
              if (v26) {
                CFDictionaryAddValue(v24, @"ChapterTitleHREF", v26);
              }
              CFArrayAppendValue(Mutable, v24);
              CFRelease(v24);
            }
            if (++v16 >= *(int *)(a1 + 32) + (uint64_t)*(int *)(a1 + 28)) {
              goto LABEL_33;
            }
          }
        }
        goto LABEL_33;
      }
    }
LABEL_43:
    int v4 = FigSignalErrorAt();
    goto LABEL_44;
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_46:
  int v27 = -12785;
LABEL_36:
  if (values) {
    CFRelease(values);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  *(_DWORD *)a1 = v27;
}

uint64_t InternalURLAssetFetchChapterDataAsync(const void *a1, dispatch_queue_t *a2, int a3, int a4, int a5)
{
  int v10 = malloc_type_calloc(1uLL, 0x30uLL, 0x106004070AE3097uLL);
  if (v10)
  {
    CFNumberRef v11 = v10;
    v10[1] = CFRetain(a2);
    void v11[2] = CFRetain(a1);
    *((_DWORD *)v11 + 6) = a3;
    *((_DWORD *)v11 + 7) = a4;
    *((_DWORD *)v11 + 8) = a5;
    dispatch_group_async_f(a2[13], a2[12], v11, (dispatch_function_t)PerformFetchChapterData);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void PerformFetchChapterData(void *a1)
{
  PerformCopyChapterData((uint64_t)a1);
  uint64_t v2 = *(NSObject **)(a1[1] + 472);

  dispatch_async_f(v2, a1, (dispatch_function_t)PerformCompleteChapterJob);
}

CFArrayRef InternalURLAssetLoadValuesAsyncForTrackProperties(const void *a1, dispatch_queue_t *a2, const __CFArray *a3, const __CFArray *a4, unsigned char *a5, _DWORD *a6)
{
  CFArrayRef v12 = malloc_type_calloc(1uLL, 0x40uLL, 0x1060040E9991D62uLL);
  if (v12)
  {
    *(void *)CFArrayRef v12 = CFRetain(a2);
    *((void *)v12 + 1) = CFRetain(a1);
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    *((void *)v12 + 3) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
    if (a6)
    {
      int v14 = NewPropertyStoreBatchID();
      *((_DWORD *)v12 + 9) = v14;
      *a6 = v14;
      *((unsigned char *)v12 + 33) = 1;
    }
    if (!a3)
    {
      *((unsigned char *)v12 + 34) = 1;
      dispatch_async_f(a2[12], v12, (dispatch_function_t)PerformMultiTrackBatchLoad);
      goto LABEL_9;
    }
    *((void *)v12 + 2) = CFArrayCreateCopy(v13, a3);
    uint64_t v15 = RequestMultiTrackBatches((uint64_t)v12);
    if (!v15)
    {
      char v16 = *((unsigned char *)v12 + 32);
      if (*((unsigned char *)v12 + 33))
      {
        uint64_t v17 = *((void *)v12 + 5);
        dispatch_retain(v17);
        dispatch_group_enter(v17);
        dispatch_group_notify_f(v17, a2[59], v12, (dispatch_function_t)FinalizeMultiTrackBatchLoadJob);
        dispatch_group_leave(v17);
        dispatch_release(v17);
      }
      else
      {
        FinalizeMultiTrackBatchLoadJob((uint64_t)v12);
      }
      a3 = 0;
      if (!a5) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  a3 = (const __CFArray *)v15;
LABEL_9:
  char v16 = 0;
  if (a5) {
LABEL_13:
  }
    *a5 = v16;
LABEL_14:
  if (a3) {
    FinalizeMultiTrackBatchLoadJob((uint64_t)v12);
  }
  return a3;
}

void PerformMultiTrackBatchLoad(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if (!EnsureAssetTypeEstablished(v3, *a1)
    && !*(unsigned char *)(v2 + 192)
    && !EnsureTracksArrayCreated(v3, v2))
  {
    int v4 = *(const void **)(v2 + 272);
    if (v4)
    {
      a1[2] = (uint64_t)v4;
      CFRetain(v4);
      if (!RequestMultiTrackBatches((uint64_t)a1) && *((unsigned char *)a1 + 33))
      {
        CFArrayRef v5 = a1[5];
        dispatch_retain(v5);
        dispatch_group_enter(v5);
        dispatch_group_notify_f(v5, *(dispatch_queue_t *)(v2 + 472), a1, (dispatch_function_t)FinalizeMultiTrackBatchLoadJob);
        dispatch_group_leave(v5);
        dispatch_release(v5);
        return;
      }
    }
    else if (!FigSignalErrorAt())
    {
      return;
    }
  }

  FinalizeMultiTrackBatchLoadJob((uint64_t)a1);
}

uint64_t RequestMultiTrackBatches(uint64_t a1)
{
  unsigned __int8 v30 = 0;
  int64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  CFIndex v3 = Count;
  *(unsigned char *)(a1 + 32) = 1;
  if (!*(unsigned char *)(a1 + 33))
  {
    if (Count >= 1)
    {
      CFIndex v21 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v21);
        unsigned __int8 v30 = 0;
        uint64_t v23 = *(void *)(a1 + 24);
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void (**)(const void *, uint64_t, unsigned __int8 *, void))(v25 + 16);
        if (v26) {
          v26(ValueAtIndex, v23, &v30, 0);
        }
        if (*(unsigned char *)(a1 + 32)) {
          BOOL v27 = v30 == 0;
        }
        else {
          BOOL v27 = 1;
        }
        char v28 = !v27;
        *(unsigned char *)(a1 + 32) = v28;
        ++v21;
      }
      while (v3 != v21);
    }
    return 0;
  }
  int v4 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  *(void *)(a1 + 48) = v4;
  if (v4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, MEMORY[0x1E4F1D530], 0);
    *(void *)(a1 + 56) = Mutable;
    if (Mutable)
    {
      *(void *)(a1 + 40) = dispatch_group_create();
      if (v3 >= 1)
      {
        uint64_t v6 = 0;
        for (CFIndex i = 0; i != v3; ++i)
        {
          char v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 56), v8, (const void *)(*(void *)(a1 + 48) + v6));
          v6 += 4;
        }
        uint64_t v9 = 0;
        for (CFIndex j = 0; j != v3; ++j)
        {
          CFNumberRef v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), j);
          unsigned __int8 v30 = 0;
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterAddListener();
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
          uint64_t v12 = *(void *)(a1 + 24);
          uint64_t v13 = *(void *)(a1 + 48);
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          char v16 = *(uint64_t (**)(const void *, uint64_t, unsigned __int8 *, uint64_t))(v15 + 16);
          if (v16) {
            int v17 = v16(v11, v12, &v30, v13 + v9);
          }
          else {
            int v17 = -12782;
          }
          int v18 = v30;
          if (*(unsigned char *)(a1 + 32)) {
            BOOL v19 = v30 == 0;
          }
          else {
            BOOL v19 = 1;
          }
          char v20 = !v19;
          *(unsigned char *)(a1 + 32) = v20;
          if (v18 || v17) {
            dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
          }
          v9 += 4;
        }
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

void FinalizeMultiTrackBatchLoadJob(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 33))
    {
      if (*(unsigned char *)(a1 + 34) || !*(unsigned char *)(a1 + 32)) {
        NotifyCompletedBatch(*(void *)(a1 + 8), *(_DWORD *)(a1 + 36));
      }
      CFArrayRef v2 = *(const __CFArray **)(a1 + 16);
      if (v2)
      {
        CFIndex Count = CFArrayGetCount(v2);
        if (Count >= 1)
        {
          CFIndex v4 = Count;
          for (CFIndex i = 0; i != v4; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterRemoveListener();
            uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
            char v8 = *(void **)(CMBaseObjectGetVTable() + 8);
            if (v8) {
              uint64_t v9 = v8;
            }
            else {
              uint64_t v9 = 0;
            }
            if (*v9 >= 2uLL)
            {
              int v10 = (void (*)(uint64_t))v9[8];
              if (v10) {
                v10(CMBaseObject);
              }
            }
          }
        }
      }
    }
    CFNumberRef v11 = *(NSObject **)(a1 + 40);
    if (v11) {
      dispatch_release(v11);
    }
    uint64_t v12 = *(const void **)(a1 + 16);
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v13 = *(const void **)(a1 + 24);
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = *(const void **)(a1 + 56);
    if (v14) {
      CFRelease(v14);
    }
    free(*(void **)(a1 + 48));
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    uint64_t v15 = *(const void **)(a1 + 8);
    if (v15) {
      CFRelease(v15);
    }
    free((void *)a1);
  }
}

uint64_t InternalURLAssetSetDeclaredAssetType(uint64_t a1, uint64_t a2, CFTypeRef cf1)
{
  uint64_t v6 = @"com.apple.coremedia.assettype.streaming";
  if (CFEqual(cf1, @"com.apple.coremedia.assettype.streaming"))
  {
    *(unsigned char *)(a2 + 192) = 1;
    CFIndex v7 = ProduceStreamingAssetProperty;
LABEL_4:
    uint64_t v9 = v7;
    CFTypeRef v10 = CFRetain(v6);
    *(void *)(a2 + 120) = v10;
    *(void *)(a2 + 128) = v9;
    *(unsigned char *)(a2 + 113) = 1;
    *(_DWORD *)(a2 + 116) = 0;
    InitializeProperty(a1, @"assetProperty_AssetType", 2, 0, (uint64_t)v10);
    return 0;
  }
  uint64_t v6 = @"com.apple.coremedia.assettype.file";
  int v8 = CFEqual(cf1, @"com.apple.coremedia.assettype.file");
  CFIndex v7 = ProduceFormatReaderAssetProperty;
  if (v8) {
    goto LABEL_4;
  }

  return FigSignalErrorAt();
}

uint64_t ProduceStreamingAssetProperty(void *a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  CFTypeRef cf = 0;
  if (!_os_feature_enabled_impl())
  {
    int v12 = CFEqual(a3, @"MediaSelectionArray");
    int v13 = CFEqual(a3, @"Duration");
    int v59 = CFEqual(a3, @"assetProperty_HLSAlternates");
    int v61 = CFEqual(a3, @"Chapters");
    int v58 = CFEqual(a3, @"LocalizedMSODisplayNames");
    int v60 = CFEqual(a3, @"assetProperty_HLSMetadata");
    int v54 = CFEqual(a3, @"assetProperty_HLSSessionKeys");
    int v57 = CFEqual(a3, @"assetProperty_AvailableMetadataFormats");
    int v56 = CFEqual(a3, @"assetProperty_OriginalNetworkContentURL");
    int v14 = CFEqual(a3, @"assetProperty_ProtectedStatus");
    int v15 = CFEqual(a3, @"assetProperty_MaximumVideoResolution");
    int v16 = CFEqual(a3, @"assetProperty_AvailableVideoDynamicRanges");
    int v17 = CFEqual(a3, @"assetProperty_NominalVideoFrameRate");
    int v18 = CFEqual(a3, @"MinimumTimeOffsetFromLive");
    BOOL v19 = a4;
    int v20 = v18;
    CMTime v55 = v19;
    *BOOL v19 = 0;
    if (!v12 && !v13 && !v61 && !v58 && !v60 && !v57 && !v56 && !v14 && !v15 && !v16 && !v17 && !v18 && !v59 && !v54)
    {
      if (!CFEqual(a3, @"assetProperty_CompatibleWithAirPlayVideo"))
      {
        uint64_t v30 = 0;
        *CMTime v55 = 0;
        goto LABEL_68;
      }
      CFDictionaryRef DictionaryRepresentation = (const __CFDictionary *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      goto LABEL_67;
    }
    int v22 = v13;
    uint64_t v23 = EnsureBytePump(a1, a2);
    if (v23)
    {
LABEL_91:
      uint64_t v30 = v23;
      goto LABEL_68;
    }
    if (v13 || v59 || v61 || v60 || v14 || v20)
    {
      uint64_t v66 = 0;
      if (*(_DWORD *)(a2 + 380) == 2)
      {
        int v65 = 0;
        *(_DWORD *)(a2 + 380) = 3;
        uint64_t v24 = *(void *)(a2 + 384);
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v34 = *(uint64_t (**)(uint64_t, void, void, void, void, uint64_t, CMTime *, CMTime *, void, int *, void, void))(v26 + 32);
        if (!v34)
        {
          uint64_t v30 = 4294954514;
          goto LABEL_68;
        }
        CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime v67 = time;
        uint64_t v30 = v34(v24, 0, 0, 0, 0, 1, &time, &v67, 0, &v65, 0, 0);
        if (v30) {
          goto LABEL_68;
        }
        uint64_t v35 = FigThreadRegisterAbortAction();
        uint64_t v30 = v35;
        if (!v35 || v35 == -17561) {
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a2 + 368), 0xFFFFFFFFFFFFFFFFLL);
        }
        FigThreadUnregisterAbortAction();
        RemoveBytePumpListenersAndDoBarrier(a2);
        uint64_t v36 = *(NSObject **)(a2 + 368);
        if (v36)
        {
          dispatch_release(v36);
          *(void *)(a2 + 368) = 0;
        }
        if (v30) {
          goto LABEL_68;
        }
      }
    }
    int v37 = *(_DWORD *)(a2 + 380);
    if (v37 != 1)
    {
      if (v37 == 5)
      {
        uint64_t v30 = *(unsigned int *)(a2 + 392);
        goto LABEL_68;
      }
      uint64_t v40 = *(void *)(a2 + 384);
      if (!v40)
      {
        uint64_t v30 = 4294954513;
        goto LABEL_68;
      }
      if (v12)
      {
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v40);
        uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v42) {
          uint64_t v43 = v42;
        }
        else {
          uint64_t v43 = 0;
        }
        int v45 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v43 + 48);
        if (v45)
        {
          unsigned int v46 = v45(FigBaseObject, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], &cf);
          if (!v46 && cf)
          {
            CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"FBPAIK_MediaSelectionArray");
            if (!*v55)
            {
              if (Value) {
                CFStringRef Value = CFRetain(Value);
              }
              uint64_t v30 = 0;
              *CMTime v55 = (CFDictionaryRef)Value;
              goto LABEL_68;
            }
            goto LABEL_42;
          }
          goto LABEL_115;
        }
        goto LABEL_114;
      }
      if (v59)
      {
        uint64_t v23 = StreamingAssetCopyHLSAlternates(v40, v55);
        goto LABEL_91;
      }
      if (v15)
      {
        uint64_t v23 = StreamingAssetCopyMaximumVideoResolution(v40, v55);
        goto LABEL_91;
      }
      if (v16)
      {
        uint64_t v23 = StreamingAssetCopyAvailableVideoDynamicRanges(v40, v55);
        goto LABEL_91;
      }
      if (v17)
      {
        uint64_t v23 = StreamingAssetCopyNominalVideoFrameRate(v40, (uint64_t)v55);
        goto LABEL_91;
      }
      if (v56)
      {
        uint64_t v23 = EnsureStreamingNetworkURL(a1, a2);
        goto LABEL_91;
      }
      if (v22)
      {
        uint64_t v48 = kFigBytePumpProperty_Duration;
      }
      else if (v61)
      {
        uint64_t v48 = kFigBytePumpSyncProperty_Chapters;
      }
      else if (v58)
      {
        uint64_t v48 = kFigBytePumpSyncProperty_LocalizedMediaSelectionOptionDisplayNames;
      }
      else if (v60)
      {
        uint64_t v48 = kFigBytePumpSyncProperty_Metadata;
      }
      else if (v57)
      {
        uint64_t v48 = kFigBytePumpSyncProperty_AvailableMetadataFormats;
      }
      else if (v14)
      {
        uint64_t v48 = kFigBytePumpProperty_HasEncryptedContent;
      }
      else
      {
        if (!v20)
        {
          if (v54)
          {
            uint64_t v23 = StreamingAssetCopySessionKeys(v40, v55);
            goto LABEL_91;
          }
LABEL_42:
          uint64_t v30 = 0;
          goto LABEL_68;
        }
        uint64_t v48 = kFigBytePumpProperty_PrebufferReservation;
      }
      uint64_t v49 = *v48;
      if (*v48)
      {
        uint64_t v50 = FigBytePumpGetFigBaseObject(v40);
        uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v51) {
          uint64_t v52 = v51;
        }
        else {
          uint64_t v52 = 0;
        }
        uint64_t v53 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v52 + 48);
        if (v53)
        {
          unsigned int v46 = v53(v50, v49, *MEMORY[0x1E4F1CF80], v55);
          goto LABEL_115;
        }
LABEL_114:
        unsigned int v46 = -12782;
LABEL_115:
        if (v46 >> 1 == 2147477256) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v46;
        }
        goto LABEL_68;
      }
      goto LABEL_42;
    }
    if (v22)
    {
      CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
      p_CMTime time = &time;
    }
    else
    {
      if (v15)
      {
        CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*MEMORY[0x1E4F1DB30]);
        goto LABEL_67;
      }
      if (!v20) {
        goto LABEL_42;
      }
      CMTimeMake(&v62, 5, 1);
      CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_CMTime time = &v62;
    }
    CFDictionaryRef DictionaryRepresentation = CMTimeCopyAsDictionary(p_time, v38);
LABEL_67:
    uint64_t v30 = 0;
    *CMTime v55 = DictionaryRepresentation;
    goto LABEL_68;
  }
  uint64_t v8 = EnsureStreamingAssetPropertyLoaderCreated(a1, a2);
  if (v8) {
    return v8;
  }
  if (*(_DWORD *)(a2 + 380) == 1)
  {
    if (CFEqual(a3, @"Duration"))
    {
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
      CFTypeRef v10 = &time;
LABEL_6:
      CFDictionaryRef v11 = CMTimeCopyAsDictionary(v10, v9);
LABEL_39:
      *a4 = v11;
      goto LABEL_40;
    }
    if (CFEqual(a3, @"assetProperty_MaximumVideoResolution"))
    {
      CFDictionaryRef v11 = CGSizeCreateDictionaryRepresentation(*MEMORY[0x1E4F1DB30]);
      goto LABEL_39;
    }
    if (CFEqual(a3, @"MinimumTimeOffsetFromLive"))
    {
      CMTimeMake(&v63, 5, 1);
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFTypeRef v10 = &v63;
      goto LABEL_6;
    }
LABEL_40:
    if (!*(void *)(a2 + 408))
    {
      int v31 = (void *)(a2 + 408);
      uint64_t v32 = *(void *)(a2 + 504);
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      FigStreamingAssetLoaderCopyProperty(v32, @"SAP_PlaylistCache", AllocatorForMedia, v31);
    }
    goto LABEL_42;
  }
  uint64_t v27 = *(void *)(a2 + 504);
  CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFIndex v29 = FigStreamingAssetLoaderCopyProperty(v27, (uint64_t)a3, v28, a4);
  if (v29 == -12783) {
    goto LABEL_40;
  }
  uint64_t v30 = v29;
  if (!v29) {
    goto LABEL_40;
  }
LABEL_68:
  if (cf) {
    CFRelease(cf);
  }
  return v30;
}

uint64_t ProduceFormatReaderAssetProperty(void *a1, uint64_t a2, CFTypeRef cf1, __CFArray **a4)
{
  if (CFEqual(cf1, @"assetProperty_Tracks"))
  {
    unsigned int v8 = EnsureTracksArrayCreated(a1, a2);
    if (!v8 && *(unsigned char *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(unsigned char *)(a2 + 460) = 1;
    }
    CFAllocatorRef v9 = *(void **)(a2 + 272);
    if (v9) {
      CFAllocatorRef v9 = (void *)CFRetain(v9);
    }
    goto LABEL_15;
  }
  if (CFEqual(cf1, @"assetProperty_FormatReader"))
  {
    IsSelfContainedPropertCGFloat y = EnsureFormatReaderCreated(a1, a2);
    if (!IsSelfContainedProperty)
    {
      CFAllocatorRef v9 = *(void **)(a2 + 240);
      if (!v9)
      {
LABEL_11:
        unsigned int v8 = 0;
LABEL_15:
        *a4 = (__CFArray *)v9;
        goto LABEL_16;
      }
LABEL_10:
      CFAllocatorRef v9 = (void *)CFRetain(v9);
      goto LABEL_11;
    }
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_MatchingContainerLabelType"))
  {
    unsigned int v8 = EnsureFormatReaderCreated(a1, a2);
    if (v8) {
      goto LABEL_16;
    }
    CFAllocatorRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(a2 + 256));
    goto LABEL_15;
  }
  if (CFEqual(cf1, @"assetProperty_MatchingContainerLabel"))
  {
    IsSelfContainedPropertCGFloat y = EnsureFormatReaderCreated(a1, a2);
    if (!IsSelfContainedProperty)
    {
      CFAllocatorRef v9 = *(void **)(a2 + 248);
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"Duration"))
  {
    IsSelfContainedPropertCGFloat y = ProduceDurationProperty(a1, a2, a4);
LABEL_70:
    unsigned int v8 = IsSelfContainedProperty;
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"Lyrics"))
  {
    IsSelfContainedPropertCGFloat y = ProduceLyricsProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"PreferredRate"))
  {
    IsSelfContainedPropertCGFloat y = ProducePreferredRateProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"PreferredVolume"))
  {
    IsSelfContainedPropertCGFloat y = ProducePreferredVolumeProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"PreferredTransform"))
  {
    IsSelfContainedPropertCGFloat y = ProducePreferredTransformProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_TrackReferences"))
  {
    IsSelfContainedPropertCGFloat y = ProduceTrackReferencesProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_AlternateTrackGroups"))
  {
    IsSelfContainedPropertCGFloat y = ProduceAlternateTrackGroupsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_ProvidesPreciseDurationAndTiming"))
  {
    IsSelfContainedPropertCGFloat y = ProducePreciseDurationAndTimingProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_AvailableMetadataFormats"))
  {
    IsSelfContainedPropertCGFloat y = ProduceAvailableMetadataFormatsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_FormatSpecificMetadataFormat"))
  {
    IsSelfContainedPropertCGFloat y = ProduceFormatSpecificMetadataFormatProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_CommonMetadata"))
  {
    IsSelfContainedPropertCGFloat y = ProduceCommonMetadataProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_QuickTimeUserData"))
  {
    int v15 = kFigFormatReaderProperty_QuickTimeUserDataReader;
LABEL_69:
    IsSelfContainedPropertCGFloat y = ProduceMetadataPropertyFromMetadataReader(a1, a2, (uint64_t)*v15, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_ISOUserData"))
  {
    int v15 = kFigFormatReaderProperty_ISOUserDataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, @"assetProperty_QuickTimeMetadata"))
  {
    int v15 = kFigFormatReaderProperty_QuickTimeMetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, @"assetProperty_iTunesMetadata"))
  {
    int v15 = kFigFormatReaderProperty_iTunesMetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, @"assetProperty_ID3Metadata"))
  {
    int v15 = kFigFormatReaderProperty_ID3MetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, @"assetProperty_ID3MetadataBC"))
  {
    int v15 = kFigFormatReaderProperty_ID3MetadataReaderWithBackwardCompatibility;
    goto LABEL_69;
  }
  if (CFEqual(cf1, @"assetProperty_HLSMetadata")
    || CFEqual(cf1, @"assetProperty_HLSAlternates")
    || CFEqual(cf1, @"assetProperty_HLSSessionKeys")
    || CFEqual(cf1, @"assetProperty_AVCHDMetadata"))
  {
    goto LABEL_75;
  }
  if (CFEqual(cf1, @"assetProperty_FormatSpecificMetadata"))
  {
    int v15 = kFigFormatReaderProperty_FormatSpecificMetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, @"assetProperty_ChapterGroupInfo"))
  {
    IsSelfContainedPropertCGFloat y = ProduceChapterGroupInfoProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"CreationDate"))
  {
    IsSelfContainedPropertCGFloat y = ProduceCreationDateProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_InitialSamples"))
  {
    IsSelfContainedPropertCGFloat y = ProduceInitialSamplesProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_CPEProtector"))
  {
    IsSelfContainedPropertCGFloat y = ProduceCPEProtectorProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_ProtectedStatus"))
  {
    IsSelfContainedPropertCGFloat y = ProduceProtectedStatusProperty(a1, a2, (CFTypeRef *)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_SHA1Digest"))
  {
    IsSelfContainedPropertCGFloat y = ProduceSHA1DigestProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"MediaSelectionArray"))
  {
    IsSelfContainedPropertCGFloat y = ProduceMediaSelectionArrayProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"iTunesGaplessInfo"))
  {
    IsSelfContainedPropertCGFloat y = ProduceiTunesGaplessInfoProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"iTunesSoundCheckVolumeNormalization"))
  {
    IsSelfContainedPropertCGFloat y = ProduceiTunesSoundCheckVolumeNormalizationProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_CouldContainFragments"))
  {
    IsSelfContainedPropertCGFloat y = ProduceCouldContainFragmentsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_ContainsFragments"))
  {
    IsSelfContainedPropertCGFloat y = ProduceContainsFragmentsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_MovieExtendsDuration"))
  {
    IsSelfContainedPropertCGFloat y = ProduceMovieExtendsDurationProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_CameraRollValidation"))
  {
    ProduceAssetCameraRollValidationProperty(a1, a2, a4);
LABEL_108:
    unsigned int v8 = 0;
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"assetProperty_MediaPlaybackValidation"))
  {
    ProduceAssetMediaPlaybackValidationProperty(a1, a2, a4);
    goto LABEL_108;
  }
  if (CFEqual(cf1, @"assetProperty_CompatibleWithPhotosTranscodingService"))
  {
    ProduceAssetCompatibleWithPhotosTranscodingServiceProperty(a1, a2, a4);
    goto LABEL_108;
  }
  if (CFEqual(cf1, @"Chapters"))
  {
    IsSelfContainedPropertCGFloat y = ProduceChaptersProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"LocalizedMSODisplayNames"))
  {
    IsSelfContainedPropertCGFloat y = ProduceLocalizedMediaSelectionOptionDisplayNamesProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_MovieProxy"))
  {
    IsSelfContainedPropertCGFloat y = ProduceMovieProxyProperty(a1, a2, (CFTypeRef *)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"AssetIsSelfContained"))
  {
    IsSelfContainedPropertCGFloat y = ProduceAssetIsSelfContainedProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"NaturalTimeScale"))
  {
    IsSelfContainedPropertCGFloat y = ProduceAssetNaturalTimeScaleProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_CompatibleWithAirPlayVideo"))
  {
    ProduceAssetCompatibleWithAirPlayVideoProperty(a1, a2, a4);
    goto LABEL_108;
  }
  if (CFEqual(cf1, @"AssetAnalysisMessages"))
  {
    IsSelfContainedPropertCGFloat y = ProduceAssetAnalysisMessagesProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"IsAssetAnalysisActive"))
  {
    IsSelfContainedPropertCGFloat y = ProduceIsAssetAnalysisActiveProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_MaximumVideoResolution"))
  {
    IsSelfContainedPropertCGFloat y = ProduceMaximumVideoResolutionProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_AvailableVideoDynamicRanges"))
  {
    IsSelfContainedPropertCGFloat y = ProduceAvailableVideoDynamicRangesProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_NominalVideoFrameRate"))
  {
    IsSelfContainedPropertCGFloat y = ProduceNominalVideoFrameRateProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_moovAtomSize"))
  {
    IsSelfContainedPropertCGFloat y = ProducemoovAtomSizeProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_OriginalNetworkContentURL")) {
    goto LABEL_75;
  }
  if (CFEqual(cf1, @"assetProperty_FirstFragmentSequenceNumber"))
  {
    IsSelfContainedPropertCGFloat y = ProduceFirstFragmentSequenceNumberProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"assetProperty_FragmentCount"))
  {
    IsSelfContainedPropertCGFloat y = ProduceFragmentCountProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, @"MinimumTimeOffsetFromLive"))
  {
LABEL_75:
    unsigned int v8 = 0;
    *a4 = 0;
    goto LABEL_16;
  }
  unsigned int v8 = -12172;
LABEL_16:
  if (v8 >> 1 == 2147477256 || v8 == -12787) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v8;
  }
  if (!v12 && *(unsigned char *)(a2 + 456))
  {
    if (!*(void *)(a2 + 448))
    {
      if (sBuildPropertyDependencyDictionaryOnce != -1) {
        dispatch_once_f(&sBuildPropertyDependencyDictionaryOnce, 0, (dispatch_function_t)BuildPropertyDependencyDictionary);
      }
      *(void *)(a2 + 448) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)sAssetPropertyDependencies, cf1);
    if (Value) {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 448), cf1, Value);
    }
  }
  return v12;
}

void URLAssetDoneDownloadingGuts(uint64_t a1, uint64_t a2, const void *a3)
{
  int valuePtr = 0;
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(a1 + 112) && *(void *)(a1 + 160) == a2 && FigAtomicCompareAndSwap32())
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    unsigned int v8 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (!v8) {
      goto LABEL_17;
    }
    int valuePtr = v8(CMBaseObject, *MEMORY[0x1E4F1EC50], 0, &v25);
    if (valuePtr) {
      goto LABEL_18;
    }
    uint64_t v9 = CMByteStreamGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v11 = v10 ? v10 : 0;
    uint64_t v12 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v11 + 48);
    if (!v12)
    {
LABEL_17:
      int valuePtr = -12782;
      goto LABEL_18;
    }
    int valuePtr = v12(v9, *MEMORY[0x1E4F1EC48], 0, &cf);
    if (valuePtr) {
      goto LABEL_18;
    }
    if (CFEqual(cf, v25))
    {
      CFTypeRef v24 = 0;
      GetContentProtectionOptions(a1, (const __CFDictionary **)&v24, 0, 0);
      if (v24)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_group_async_f(*(dispatch_group_t *)(a1 + 296), *(dispatch_queue_t *)(a1 + 304), (void *)a1, (dispatch_function_t)PerformMD5Check);
      }
      else
      {
        uint64_t v20 = CMByteStreamGetCMBaseObject();
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = *(void (**)(uint64_t, void, void))(v22 + 56);
        if (v23) {
          v23(v20, *MEMORY[0x1E4F1FB48], *MEMORY[0x1E4F1CFD0]);
        }
        ReviseDownloadToDestinationResultProperty(a1, 0);
        CFRetain((CFTypeRef)a1);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
      }
    }
    else
    {
      int v13 = -16091;
      int valuePtr = -16091;
      if (a3)
      {
        TypeIOSurfaceID ID = CFDictionaryGetTypeID();
        if (TypeID != CFGetTypeID(a3)) {
          goto LABEL_29;
        }
        CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a3, @"CRABS_StatusCode");
        if (!Value) {
          goto LABEL_29;
        }
        int v16 = Value;
        CFTypeID v17 = CFNumberGetTypeID();
        if (v17 != CFGetTypeID(v16)) {
          goto LABEL_29;
        }
        LODWORD(v24) = 0;
        CFNumberGetValue((CFNumberRef)v16, kCFNumberIntType, &v24);
        int v13 = (int)v24;
        if (v24 == -12542) {
          goto LABEL_18;
        }
        if (v24) {
          int valuePtr = (int)v24;
        }
        else {
LABEL_29:
        }
          int v13 = -16091;
      }
      ReviseDownloadToDestinationResultProperty(a1, v13);
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFTypeRef v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
      CFDictionaryRef v19 = CFDictionaryCreate(v18, (const void **)kFigAssetPayloadKey_Result, &v24, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFRetain((CFTypeRef)a1);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDeferNotificationToDispatchQueue();
      if (v19) {
        CFRelease(v19);
      }
      if (v24) {
        CFRelease(v24);
      }
    }
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
}

CFDictionaryRef GetContentProtectionOptions(uint64_t a1, const __CFDictionary **a2, const __CFDictionary **a3, const __CFDictionary **a4)
{
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 88);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    if (result)
    {
      CFDictionaryRef v8 = result;
      if (a2)
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"assetOption_PurchaseBundle");
        *a2 = result;
      }
      if (a3)
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v8, @"assetOption_AuthorizationInfo");
        *a3 = result;
      }
      if (a4)
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v8, @"assetOption_ProtectedContentSupportStorageURL");
        *a4 = result;
      }
    }
  }
  return result;
}

void ReviseDownloadToDestinationResultProperty(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFIndex v4 = (void *)MEMORY[0x19970C720](a1 + 464);
  CFArrayRef v5 = v4;
  if (v4) {
    ReviseProperty(v4, @"assetProperty_DownloadToDestinationResult", v3);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void PostDeferredPostPurchaseNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CMNotificationCenterPostNotification();

  CFRelease(a4);
}

void PerformMD5Check(uint64_t cf)
{
  int valuePtr = 0;
  CFDictionaryRef theDict = 0;
  CFDictionaryRef v13 = 0;
  uint64_t v11 = 0;
  if (!*(unsigned char *)(cf + 112) && !*(unsigned char *)(cf + 195))
  {
    GetContentProtectionOptions(cf, &v13, 0, 0);
    int valuePtr = SetupBytestreamFactoryParameters((char *)cf, &v11);
    if (!valuePtr)
    {
      if (theDict) {
        CFStringRef Value = CFDictionaryGetValue(theDict, @"factoryOption_DownloadDestinationURL");
      }
      else {
        CFStringRef Value = 0;
      }
      int v3 = EncryptedFileMD5Check(v13, *(void *)(cf + 160), (uint64_t)Value, 0);
      int valuePtr = v3;
      *(unsigned char *)(cf + 195) = 1;
      ReviseDownloadToDestinationResultProperty(cf, v3);
      if (v3)
      {
        CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
        CFDictionaryRef v5 = CFDictionaryCreate(v4, (const void **)kFigAssetPayloadKey_Result, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFRetain((CFTypeRef)cf);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
        if (v5) {
          CFRelease(v5);
        }
        if (values) {
          CFRelease(values);
        }
      }
      else
      {
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(void (**)(uint64_t, void, void))(v8 + 56);
        if (v9) {
          v9(CMBaseObject, *MEMORY[0x1E4F1FB48], *MEMORY[0x1E4F1CFD0]);
        }
        CFRetain((CFTypeRef)cf);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
      }
    }
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef theDict = 0;
    }
  }
  CFRelease((CFTypeRef)cf);
}

uint64_t SetupBytestreamFactoryParameters(char *context, void *a2)
{
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  CFTypeRef v34 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *((void *)context + 2);
  CFAllocatorRef v4 = (dispatch_once_t *)(context + 16);
  if (v5 != -1) {
    dispatch_once_f(v4, context, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
  }
  uint64_t v6 = *((unsigned int *)context + 124);
  if (!v6)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      uint64_t v6 = FigSignalErrorAt();
      goto LABEL_71;
    }
    uint64_t v9 = Mutable;
    uint64_t v10 = *((void *)context + 10);
    if (v10) {
      *(_DWORD *)a2 |= 2u;
    }
    if ((v10 & 0x200) != 0) {
      *(_DWORD *)a2 |= 0x1000u;
    }
    CFDictionaryRef v11 = (const __CFDictionary *)*((void *)context + 11);
    if (!v11)
    {
      CFDataRef v17 = 0;
      goto LABEL_51;
    }
    if (CFDictionaryGetValue(v11, @"assetOption_PrepareForIncrementalFragments")) {
      *(_DWORD *)a2 |= 0x800u;
    }
    uint64_t v12 = (void *)*MEMORY[0x1E4F1CFD0];
    if (v12 == CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), @"assetOption_UseAWDL")) {
      CFDictionarySetValue(v9, @"factoryOption_UseAWDL", v12);
    }
    URLCFStringRef Value = (const void *)FigCFDictionaryGetURLValue();
    if (URLValue) {
      CFDictionarySetValue(v9, @"factoryOption_DownloadDestinationURL", URLValue);
    }
    FigCFDictionaryGetURLValue();
    FigCFDictionaryGetBooleanIfPresent();
    if (CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)context + 11), @"assetOption_NetworkCacheUsePathAsKey", (const void **)&value)&& value == v12)
    {
      *(_DWORD *)a2 |= 8u;
    }
    if (CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)context + 11), @"assetOption_NetworkCacheUseURLWithoutQueryStringAsKey", (const void **)&value)&& value == v12)
    {
      *(_DWORD *)a2 |= 0x20u;
    }
    int v14 = CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), @"assetOption_NetworkCacheBacking");
    if (v14)
    {
      int v15 = v14;
      if (CFEqual(v14, @"assetOption_DiskBacking"))
      {
        int v16 = kFigByteStreamFactoryBackingOption_Disk;
LABEL_30:
        CFDictionarySetValue(v9, @"factoryOption_Backing", *v16);
        goto LABEL_31;
      }
      if (CFEqual(v15, @"assetOption_NonPurgeableMemoryBacking"))
      {
        CFAllocatorRef v18 = CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), @"assetOption_NetworkCacheNonPurgeableMemoryLimit");
        if (v18) {
          CFDictionarySetValue(v9, @"factoryOption_NonPurgeableMemoryLimit", v18);
        }
        int v16 = &kFigByteStreamFactoryBackingOption_NonPurgeableMemory;
        goto LABEL_30;
      }
    }
LABEL_31:
    BooleanCFStringRef Value = (const void *)FigCFDictionaryGetBooleanValue();
    if (BooleanValue) {
      CFDictionarySetValue(v9, @"factoryOption_NoPersistentCache", BooleanValue);
    }
    NumberCFStringRef Value = (const void *)FigCFDictionaryGetNumberValue();
    if (NumberValue) {
      CFDictionarySetValue(v9, @"factoryOption_MaxSizeAllowedForCellularAccess", NumberValue);
    }
    CFDataRef v21 = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), @"assetOption_ParentNetworkActivityToken");
    CFDataRef v17 = FigNWActivityCreateFromToken(v21);
    if (v17) {
      CFDictionarySetValue(v9, @"factoryOption_ParentNetworkActivity", v17);
    }
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    DictionaryCFStringRef Value = (const void *)FigCFDictionaryGetDictionaryValue();
    if (DictionaryValue) {
      CFDictionarySetValue(v9, @"factoryOption_AlternativeConfigurationOptions", DictionaryValue);
    }
    uint64_t v23 = (const void *)FigCFDictionaryGetDictionaryValue();
    if (v23) {
      CFDictionarySetValue(v9, @"factoryOption_ByteRangeInFile", v23);
    }
    CFTypeRef v24 = (void *)FigCFDictionaryGetBooleanValue();
    CMTimeValue value = v24;
    if (v24 && v24 == v12) {
      *(_DWORD *)a2 |= 0x400u;
    }
    CFTypeRef v25 = (void *)FigCFDictionaryGetBooleanValue();
    CMTimeValue value = v25;
    if (v25) {
      CFDictionarySetValue(v9, @"factoryOption_DisableNetworkLargeDownload", v25);
    }
    uint64_t v26 = (void *)FigCFDictionaryGetBooleanValue();
    CMTimeValue value = v26;
    if (v26) {
      CFDictionarySetValue(v9, @"factoryOption_DisableNetworkProbeRequest", v26);
    }
    uint64_t v27 = (const void *)FigCFDictionaryGetBooleanValue();
    if (v27) {
      CFDictionarySetValue(v9, @"factoryOption_RequiresCustomURLLoading", v27);
    }
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
LABEL_51:
    if (*((void *)context + 72)) {
      FigCFDictionarySetValue();
    }
    CFAllocatorRef v28 = (const void *)*((void *)context + 61);
    if (v28) {
      CFDictionarySetValue(v9, @"factoryOption_CustomURLLoader", v28);
    }
    HTTPRequestint Options = CreateHTTPRequestOptions((uint64_t)context, (CFMutableDictionaryRef *)&v34);
    if (HTTPRequestOptions)
    {
      uint64_t v6 = HTTPRequestOptions;
    }
    else
    {
      if (v34) {
        CFDictionarySetValue(v9, @"factoryOption_HTTPRequestOptions", v34);
      }
      uint64_t v30 = *((void *)context + 10);
      if ((v30 & 0x38) != 0) {
        int v31 = 30;
      }
      else {
        int v31 = 2;
      }
      *(_DWORD *)a2 |= FigByteStreamFactoryTranslateReferenceSecurityOptions(v31 & (v30 >> 1));
      uint64_t v32 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(v7, *((void *)context + 11), *((void *)context + 42), (__CFDictionary **)&cf);
      uint64_t v6 = v32;
      if (v32 || !cf)
      {
        if (v32) {
          goto LABEL_69;
        }
      }
      else
      {
        CFDictionarySetValue(v9, @"factoryOption_HTTPHeaders", cf);
      }
      if (CFDictionaryGetCount(v9) >= 1)
      {
        uint64_t v6 = 0;
        a2[1] = v9;
        if (!v17) {
          goto LABEL_71;
        }
LABEL_70:
        CFRelease(v17);
        goto LABEL_71;
      }
      uint64_t v6 = 0;
    }
LABEL_69:
    CFRelease(v9);
    if (!v17) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
LABEL_71:
  if (cf) {
    CFRelease(cf);
  }
  if (v34) {
    CFRelease(v34);
  }
  return v6;
}

uint64_t CreateHTTPRequestOptions(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef theDict = 0;
  uint64_t v4 = FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(void *)(a1 + 88), &theDict);
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    if (*(void *)(a1 + 16) != -1) {
      dispatch_once_f((dispatch_once_t *)(a1 + 16), (void *)a1, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
    }
    uint64_t v5 = *(unsigned int *)(a1 + 496);
    if (!v5)
    {
      FigCFDictionarySetValue();
      uint64_t v6 = *(const void **)(a1 + 528);
      if (v6) {
        CFDictionarySetValue(theDict, @"FHRP_StorageSession", v6);
      }
      CFIndex Count = CFDictionaryGetCount(theDict);
      CFMutableDictionaryRef v8 = theDict;
      if (!Count && theDict)
      {
        CFRelease(theDict);
        CFMutableDictionaryRef v8 = 0;
      }
      uint64_t v5 = 0;
      *a2 = v8;
      return v5;
    }
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return v5;
}

void __AssetMutationMonitoringNotificationCallback_block_invoke(CFTypeRef *a1)
{
  long long v4 = *((_OWORD *)a1 + 2);
  CFTypeRef v3 = a1[6];
  CFDictionaryRef v2 = (const __CFDictionary *)a1[7];
  CFTypeRef v5 = v3;
  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)AssessMonitoredAssetPropertyChange, &v4);
  CFRelease(a1[4]);
  CFRelease(a1[7]);
  CFRelease(a1[5]);
  CFRelease(a1[6]);
}

void AssessMonitoredAssetPropertyChange(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; v7 != i; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (*(unsigned char *)(*(void *)(a3 + 8) + 112)) {
        break;
      }
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)a3, ValueAtIndex))
      {
        uint64_t v12 = a3 + 8;
        uint64_t v10 = *(void *)(a3 + 8);
        CFDictionaryRef v11 = *(void **)(v12 + 8);
        if (FigCFEqual())
        {
          CFDictionaryRef v13 = *(const void **)(v10 + 328);
          if (v13)
          {
            CFRelease(v13);
            *(void *)(v10 + 328) = 0;
          }
          *(unsigned char *)(v10 + 316) = 0;
        }
        if (!ProduceFormatReaderAssetProperty((int)v11, v10, a1)) {
          ReviseProperty(v11, a1, 0);
        }
        return;
      }
    }
  }
}

void ReviseDurationProperty(char *a1)
{
  uint64_t v2 = MEMORY[0x19970C720](a1 + 464);
  CFTypeRef v5 = 0;
  if (v2)
  {
    CFTypeRef v3 = (void *)v2;
    if (!ObtainDurationPropertyValue((uint64_t)a1, &v5))
    {
      long long v4 = v5;
      ReviseProperty(v3, @"Duration", v5);
      if (v4) {
        CFRelease(v4);
      }
    }
    CFRelease(v3);
  }

  CFRelease(a1);
}

uint64_t ObtainDurationPropertyValue(uint64_t a1, void *a2)
{
  uint64_t v24 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 240));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFMutableDictionaryRef v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 48);
  if (v8)
  {
    v8(FigBaseObject, @"SampleCursorTimeAccuracyIsExact", v4, &cf);
    CFTypeRef v9 = cf;
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  if (v9 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v10 = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 240));
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    int v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v12 + 48);
    if (v14) {
      uint64_t v13 = v14(v10, @"EstimatedDuration", v4, &v24);
    }
    else {
      uint64_t v13 = 4294954514;
    }
  }
  if (!v24)
  {
    uint64_t v15 = *(void *)(a1 + 240);
    if (*(unsigned char *)(a1 + 81))
    {
      uint64_t v16 = FigFormatReaderGetFigBaseObject(v15);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      CFDataRef v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v20 + 48);
      if (v21)
      {
        uint64_t v22 = kFigFormatReaderProperty_NominalDuration;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v16 = FigFormatReaderGetFigBaseObject(v15);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      CFDataRef v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v18 + 48);
      if (v21)
      {
        uint64_t v22 = kFigFormatReaderProperty_Duration;
LABEL_27:
        uint64_t v13 = v21(v16, *v22, v4, &v24);
        goto LABEL_29;
      }
    }
    uint64_t v13 = 4294954514;
  }
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  *a2 = v24;
  return v13;
}

void ReviseTracksArrayProperty(char *a1)
{
  if (MEMORY[0x19970C720](a1 + 464)) {
    LockTrackMacroPropertyState();
  }
  free(0);
  CFRelease(a1);
}

uint64_t EnsureTrackWorkQueueCreated(uint64_t a1)
{
  if (*(void *)(a1 + 280)) {
    return 0;
  }
  uint64_t v2 = FigDispatchQueueCreateWithPriority();
  *(void *)(a1 + 280) = v2;
  if (v2) {
    return 0;
  }

  return FigSignalErrorAt();
}

void ReviseCouldContainFragmentsProperty(char *a1)
{
  uint64_t v2 = MEMORY[0x19970C720](a1 + 464);
  CFTypeRef v5 = 0;
  if (v2)
  {
    CFTypeRef v3 = (void *)v2;
    ObtainCouldContainFragmentsPropertyValue((uint64_t)a1, &v5);
    uint64_t v4 = v5;
    ReviseProperty(v3, @"assetProperty_CouldContainFragments", v5);
    if (v4) {
      CFRelease(v4);
    }
    CFRelease(v3);
  }

  CFRelease(a1);
}

CFTypeRef ObtainCouldContainFragmentsPropertyValue(uint64_t a1, void *a2)
{
  CFMutableDictionaryRef v8 = 0;
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 240));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, const void **))(v5 + 48);
  if (!v6 || (v6(FigBaseObject, @"CouldContainFragments", *MEMORY[0x1E4F1CF80], &v8), (CFTypeRef result = v8) == 0)) {
    CFTypeRef result = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
  }
  *a2 = result;
  return result;
}

void ReviseContainsFragmentsProperty(char *a1)
{
  uint64_t v2 = MEMORY[0x19970C720](a1 + 464);
  uint64_t v5 = 0;
  if (v2)
  {
    CFTypeRef v3 = (void *)v2;
    ObtainContainsFragmentsPropertyValue((uint64_t)a1, &v5);
    uint64_t v4 = v5;
    ReviseProperty(v3, @"assetProperty_ContainsFragments", v5);
    if (v4) {
      CFRelease(v4);
    }
    CFRelease(v3);
  }

  CFRelease(a1);
}

CFTypeRef ObtainContainsFragmentsPropertyValue(uint64_t a1, void *a2)
{
  CFMutableDictionaryRef v8 = 0;
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 240));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, const void **))(v5 + 48);
  if (!v6 || (v6(FigBaseObject, @"ContainsFragments", *MEMORY[0x1E4F1CF80], &v8), (CFTypeRef result = v8) == 0)) {
    CFTypeRef result = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
  }
  *a2 = result;
  return result;
}

uint64_t EnsureBytePump(void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v32 = 0;
  uint64_t Options = EnsureContentStreamCreated(a1, a2);
  if (Options) {
    goto LABEL_60;
  }
  if (!*(unsigned char *)(a2 + 192))
  {
    uint64_t v5 = FigSignalErrorAt();
    if (!v5) {
      goto LABEL_41;
    }
    goto LABEL_32;
  }
  uint64_t Options = EnsureStorageSessionCreated(a1, a2);
  if (Options) {
    goto LABEL_60;
  }
  if (*(_DWORD *)(a2 + 380))
  {
    uint64_t v5 = 0;
    goto LABEL_41;
  }
  *(void *)(a2 + 368) = dispatch_semaphore_create(0);
  *(void *)(a2 + 424) = FigReentrantMutexCreate();
  uint64_t Options = CreateBytePumpCreateOptions(a1, a2, 1, (__CFDictionary **)&cf);
  if (Options) {
    goto LABEL_60;
  }
  uint64_t Options = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(void *)(a2 + 88), *(void *)(a2 + 336), (__CFDictionary **)&v32);
  if (Options) {
    goto LABEL_60;
  }
  uint64_t v6 = (void *)(a2 + 384);
  uint64_t Options = CreateSegmentBytePump(a1, a2, v32, (const __CFDictionary *)cf, (CFTypeRef *)(a2 + 384));
  if (Options) {
    goto LABEL_60;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t Options = FigNotificationCenterAddWeakListener();
  if (Options) {
    goto LABEL_60;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t Options = FigNotificationCenterAddWeakListener();
  if (Options) {
    goto LABEL_60;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t Options = FigNotificationCenterAddWeakListener();
  if (Options) {
    goto LABEL_60;
  }
  uint64_t Options = FigStartForwardingMediaServicesProcessDeathNotification();
  if (Options) {
    goto LABEL_60;
  }
  *(unsigned char *)(a2 + 377) = 1;
  if (*(unsigned char *)(a2 + 379))
  {
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*v6);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v9 = v8 ? v8 : 0;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, void))(v9 + 56);
    if (v10) {
      v10(FigBaseObject, 0x1EE53E798, *MEMORY[0x1E4F1CFD0]);
    }
  }
  uint64_t v11 = *v6;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  int v14 = *(uint64_t (**)(uint64_t))(v13 + 64);
  if (!v14)
  {
    uint64_t v5 = 4294954514;
    goto LABEL_32;
  }
  uint64_t Options = v14(v11);
  if (Options)
  {
LABEL_60:
    uint64_t v5 = Options;
LABEL_32:
    *(_DWORD *)(a2 + 392) = v5;
    *(_DWORD *)(a2 + 380) = 5;
    uint64_t v16 = *(void *)(a2 + 384);
    if (v16)
    {
      uint64_t v17 = FigBytePumpGetFigBaseObject(v16);
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v19 = v18 ? v18 : 0;
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, void))(v19 + 56);
      if (v20) {
        v20(v17, 0x1EE53E498, 0);
      }
    }
    CFDataRef v21 = *(void **)(a2 + 40);
    if (v21 && !FigAssetDownloadCoordinatorRelinquishAccessToURL(v21)) {
      *(void *)(a2 + 40) = 0;
    }
    goto LABEL_41;
  }
  uint64_t v15 = FigThreadRegisterAbortAction();
  uint64_t v5 = v15;
  if (!v15 || v15 == -17561) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a2 + 368), 0xFFFFFFFFFFFFFFFFLL);
  }
  FigThreadUnregisterAbortAction();
  if (*(_DWORD *)(a2 + 380) == 5) {
    uint64_t v5 = *(unsigned int *)(a2 + 392);
  }
  if (v5) {
    goto LABEL_32;
  }
LABEL_41:
  if (*(unsigned char *)(a2 + 378))
  {
    RemoveBytePumpListenersAndDoBarrier(a2);
    int v22 = *(_DWORD *)(a2 + 380);
    if (v22 == 1)
    {
      uint64_t v23 = FigBytePumpGetFigBaseObject(*(void *)(a2 + 384));
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v26 = v25 ? v25 : 0;
        uint64_t v27 = *(void (**)(uint64_t))(v26 + 24);
        if (v27) {
          v27(v24);
        }
      }
      CFAllocatorRef v28 = *(const void **)(a2 + 384);
      if (v28)
      {
        CFRelease(v28);
        *(void *)(a2 + 384) = 0;
      }
      int v22 = *(_DWORD *)(a2 + 380);
    }
    if (v22 == 4)
    {
      CFIndex v29 = *(NSObject **)(a2 + 368);
      if (v29)
      {
        dispatch_release(v29);
        *(void *)(a2 + 368) = 0;
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  return v5;
}

uint64_t CreateBytePumpCreateOptions(void *a1, uint64_t a2, int a3, __CFDictionary **a4)
{
  CMTimeValue value = 0;
  CFTypeRef v51 = 0;
  CFTypeRef v48 = 0;
  CFTypeRef cf2 = 0;
  __int16 v47 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v42 = FigSignalErrorAt();
    CFURLRef v31 = 0;
    uint64_t v10 = 0;
    goto LABEL_87;
  }
  uint64_t v10 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v10)
  {
    uint64_t v42 = FigSignalErrorAt();
    CFURLRef v31 = 0;
    goto LABEL_87;
  }
  if (!*(void *)(a2 + 88))
  {
    uint64_t v27 = 0;
    BOOL v26 = 0;
    CFDataRef v21 = 0;
    goto LABEL_43;
  }
  CFTypeRef cf = 0;
  BooleanCFStringRef Value = (const void *)FigCFDictionaryGetBooleanValue();
  if (BooleanValue) {
    CFDictionarySetValue(Mutable, @"FBPCreateOption_InheritURIQueryComponentFromReferencingURI", BooleanValue);
  }
  DictionaryCFStringRef Value = (const void *)FigCFDictionaryGetDictionaryValue();
  if (DictionaryValue) {
    CFDictionarySetValue(Mutable, @"FBPCreateOption_AlternativeConfigurationOptions", DictionaryValue);
  }
  ArrayCFStringRef Value = (const __CFArray *)FigCFDictionaryGetArrayValue();
  if (ArrayValue)
  {
    CFArrayRef v14 = ArrayValue;
    if (CFArrayGetCount(ArrayValue) >= 1)
    {
      SanitizedOutOfBandAlternateTracksArraCGFloat y = CreateSanitizedOutOfBandAlternateTracksArray(v14, (__CFArray **)&value);
      if (SanitizedOutOfBandAlternateTracksArray)
      {
        uint64_t v42 = SanitizedOutOfBandAlternateTracksArray;
        CFDataRef v21 = 0;
        goto LABEL_112;
      }
      CFDictionarySetValue(Mutable, @"FBPCreateOption_OutOfBandAlternateTracks", value);
    }
  }
  CFDictionaryRef v16 = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  if (v16)
  {
    CFDictionaryRef v17 = v16;
    uint64_t v18 = CFDictionaryGetValue(v16, @"assetOption_iTunesStoreContentRentalID");
    if (v18) {
      CFDictionarySetValue(Mutable, @"FBPCreateOption_iTunesRentalID", v18);
    }
    uint64_t v19 = CFDictionaryGetValue(v17, @"assetOption_iTunesStoreContentDSID");
    if (v19) {
      CFDictionarySetValue(Mutable, @"FBPCreateOption_iTunesAccountID", v19);
    }
  }
  if (FigCFDictionaryGetInt64IfPresent()) {
    CFDictionarySetValue(Mutable, @"FBPCreateOption_DisallowCellularAccess", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CFDataRef v20 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_ParentNetworkActivityToken");
  CFDataRef v21 = FigNWActivityCreateFromToken(v20);
  if (v21) {
    CFDictionarySetValue(Mutable, @"FBPCreateOption_ParentNetworkActivity", v21);
  }
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  uint64_t v22 = InternalURLAssetEnsureDownloadTokenEstablished(a2);
  if (v22
    || (uint64_t v22 = FigAssetDownloadCoordinatorCopyDestinationURLForDownloadToken(*(void *)(a2 + 24), &cf2), v22))
  {
LABEL_111:
    uint64_t v42 = v22;
LABEL_112:
    CFURLRef v31 = 0;
    goto LABEL_85;
  }
  uint64_t v23 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_DownloadDestinationURL");
  uint64_t v24 = (uint64_t)v23;
  CFTypeRef v25 = cf2;
  if (!v23 || !cf2) {
    goto LABEL_27;
  }
  if (!CFEqual(v23, cf2))
  {
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_111;
  }
  CFTypeRef v25 = cf2;
LABEL_27:
  if (v25) {
    uint64_t v24 = (uint64_t)v25;
  }
  if (a3 && v24) {
    FigAssetDownloadCoordinatorRequestImmediateAccessToURL(v24, &v47, (void *)(a2 + 40));
  }
  BOOL v26 = (_BYTE)v47 != 0;
  if ((_BYTE)v47) {
    uint64_t v27 = (const void *)v24;
  }
  else {
    uint64_t v27 = 0;
  }
  URLCFStringRef Value = (const void *)FigCFDictionaryGetURLValue();
  FigCFDictionaryGetBooleanIfPresent();
  if (HIBYTE(v47) && URLValue)
  {
    CFDictionarySetValue(v10, @"FSC_DiskCacheRepositoryURL", URLValue);
    CFIndex v29 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_NetworkCacheUsePathAsKey");
    uint64_t v30 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v29 == (const void *)*MEMORY[0x1E4F1CFD0]) {
      CFDictionarySetValue(v10, @"FSC_UseURLPathAsCacheKey", v29);
    }
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_NetworkCacheUseURLWithoutQueryStringAsKey") == v30)CFDictionarySetValue(v10, @"FSC_UseURLWithoutQueryStringAsCacheKey", v30); {
    BOOL v26 = 1;
    }
  }
LABEL_43:
  if (FigCFURLIsLocalResource() && !v27)
  {
    uint64_t v27 = *(const void **)(a2 + 176);
    BOOL v26 = 1;
  }
  if (v27) {
    CFDictionarySetValue(v10, @"FSC_DownloadDestinationURL", v27);
  }
  if (v26) {
    CFDictionarySetValue(v10, @"FSC_Backing", @"FSC_DiskBacking");
  }
  uint64_t v22 = EnsureStreamingNetworkURL(a1, a2);
  if (v22) {
    goto LABEL_111;
  }
  CFURLRef v31 = CFURLCopyAbsoluteURL(*(CFURLRef *)(a2 + 432));
  if (v31)
  {
    if (CFDictionaryGetCount(v10) >= 1 && !FigStreamingCacheCreate(v8, v31, v10, (uint64_t *)&v48)) {
      CFDictionarySetValue(Mutable, @"FBPCreateOption_StreamingCache", v48);
    }
    HTTPRequestuint64_t Options = CreateHTTPRequestOptions(a2, (CFMutableDictionaryRef *)&v51);
    if (!HTTPRequestOptions)
    {
      if (v51) {
        CFDictionarySetValue(Mutable, @"FBPCreateOption_HTTPRequestOptions", v51);
      }
      uint64_t v33 = *(void *)(a2 + 384);
      if (v33)
      {
        CFTypeRef v45 = 0;
        CFTypeRef cf = 0;
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v33);
        uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v35) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
        int v37 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v36 + 48);
        if (v37 && !v37(FigBaseObject, 0x1EE53E878, v8, &cf)) {
          CFDictionarySetValue(Mutable, @"FBPCreateOption_CPECryptors", cf);
        }
        if (cf) {
          CFRelease(cf);
        }
        uint64_t v38 = FigBytePumpGetFigBaseObject(*(void *)(a2 + 384));
        uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v39) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v40 + 48);
        if (v41 && !v41(v38, 0x1EE53E6D8, v8, &v45)) {
          CFDictionarySetValue(Mutable, @"FBPCreateOption_StoreBagSessionConfiguration", v45);
        }
        if (v45) {
          CFRelease(v45);
        }
      }
      HTTPRequestuint64_t Options = InternalURLAssetEnsureContentKeySessionCreated((void *)a2);
      if (!HTTPRequestOptions)
      {
        CFDictionarySetValue(Mutable, @"FBPCreateOption_DefaultContentKeySession", *(const void **)(a2 + 512));
        HTTPRequestuint64_t Options = InternalURLAssetEnsureContentKeyBoss((void *)a2);
        if (!HTTPRequestOptions)
        {
          CFDictionarySetValue(Mutable, @"FBPCreateOption_ContentKeyBoss", *(const void **)(a2 + 520));
          if ((*(unsigned char *)(a2 + 81) & 2) != 0) {
            CFDictionarySetValue(Mutable, @"FBPCreateOption_DoNotLogURLs", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          if (*(void *)(a2 + 16) != -1) {
            dispatch_once_f((dispatch_once_t *)(a2 + 16), (void *)a2, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
          }
          uint64_t v42 = *(unsigned int *)(a2 + 496);
          if (!v42)
          {
            CFDictionarySetValue(Mutable, @"FBPCreateOption_CustomURLLoader", *(const void **)(a2 + 488));
            if (!CFDictionaryGetCount(Mutable))
            {
              CFRelease(Mutable);
              CFMutableDictionaryRef Mutable = 0;
            }
            uint64_t v42 = 0;
            *a4 = Mutable;
            CFMutableDictionaryRef Mutable = 0;
          }
          goto LABEL_85;
        }
      }
    }
  }
  else
  {
    HTTPRequestuint64_t Options = FigSignalErrorAt();
  }
  uint64_t v42 = HTTPRequestOptions;
LABEL_85:
  if (v21) {
    CFRelease(v21);
  }
LABEL_87:
  if (cf2) {
    CFRelease(cf2);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (value) {
    CFRelease(value);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v42)
  {
    uint64_t v43 = *(void **)(a2 + 40);
    if (v43)
    {
      if (!FigAssetDownloadCoordinatorRelinquishAccessToURL(v43)) {
        *(void *)(a2 + 40) = 0;
      }
    }
  }
  return v42;
}

uint64_t CreateSegmentBytePump(void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  char v17 = 0;
  CFTypeRef cf = 0;
  if (!a5) {
    return 0;
  }
  uint64_t v9 = EnsureStreamingNetworkURL(a1, a2);
  if (v9) {
    return v9;
  }
  uint64_t v10 = FigBytePumpCreateForHTTPChunk((const void *)*MEMORY[0x1E4F1CF80], *(const __CFURL **)(a2 + 432), a3, a4, 0, (uint64_t)BytePumpCallback, 0, &cf);
  if (!v10)
  {
    if (cf)
    {
      FigCFDictionaryGetBooleanIfPresent();
      if (v17)
      {
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(cf);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CFArrayRef v14 = *(void (**)(uint64_t, uint64_t, void))(v13 + 56);
        if (v14) {
          v14(FigBaseObject, 0x1EE53EB58, *MEMORY[0x1E4F1CFD0]);
        }
      }
      uint64_t v10 = 0;
      *a5 = cf;
      return v10;
    }
    return 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void PerformCompleteTransferBytePump(uint64_t a1)
{
  (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 8));
  FigStopForwardingMediaServicesProcessDeathNotification();
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  CFTypeRef v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 24);
  if (v5) {
    CFRelease(v5);
  }

  free((void *)a1);
}

uint64_t EnsureContentStreamCreated(void *a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  CFTypeRef cf = 0;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  *(_OWORD *)uint64_t v85 = 0u;
  *(_OWORD *)double v86 = 0u;
  *(_OWORD *)CFIndex v84 = 0u;
  CFTypeRef v83 = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v4 = 4294954511;
    goto LABEL_207;
  }
  if (*(unsigned char *)(a2 + 144)) {
    return *(unsigned int *)(a2 + 148);
  }
  int v5 = *(_DWORD *)(a2 + 64);
  if (v5 == 708989738)
  {
    v84[0] = CFRetain(*(CFTypeRef *)(a2 + 72));
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFDataRef v21 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v14 + 48);
    if (v21) {
      v21(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &v85[1]);
    }
    CFDataRef v20 = 0;
    goto LABEL_26;
  }
  if (v5 != 1431456810)
  {
    uint64_t v4 = 0;
    v84[0] = 0;
    goto LABEL_207;
  }
  v85[1] = CFRetain(*(CFTypeRef *)(a2 + 72));
  CFDictionaryRef v6 = *(const __CFDictionary **)(a2 + 88);
  if (v6)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v6, @"assetOption_OutOfBandMIMEType");
    if (Value)
    {
      CFStringRef v8 = Value;
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFStringGetTypeID())
      {
        v98[0] = 0;
        FigCopySetOfStreamingSupportedMIMETypes((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v98);
        if (v98[0])
        {
          int v10 = CFSetContainsValue(v98[0], v8);
          if (v10) {
            int IsShoutcastAudio = FigMediaValidatorMIMETypeIsShoutcastAudio(v8);
          }
          else {
            int IsShoutcastAudio = 0;
          }
          if (v98[0]) {
            CFRelease(v98[0]);
          }
          int v19 = 0;
          if (!v10 || IsShoutcastAudio) {
            goto LABEL_44;
          }
          goto LABEL_21;
        }
LABEL_43:
        int v19 = 0;
        int IsShoutcastAudio = 0;
        goto LABEL_44;
      }
    }
    CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_OutOfBandFileType");
    if (v15)
    {
      CFStringRef v16 = v15;
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 == CFStringGetTypeID())
      {
        v98[0] = 0;
        FigCopySetOfStreamingSupportedUTIs((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v98);
        if (v98[0])
        {
          int v18 = CFSetContainsValue(v98[0], v16);
          if (v18) {
            int v19 = FigMediaValidatorUTIIsShoutcastAudio(v16);
          }
          else {
            int v19 = 0;
          }
          if (v98[0]) {
            CFRelease(v98[0]);
          }
          int IsShoutcastAudio = 0;
          if (!v18 || v19)
          {
LABEL_44:
            uint64_t v27 = SetupBytestreamFactoryParameters((char *)a2, &v88);
            if (!v27)
            {
              if (theDict && CFDictionaryGetCount(theDict) >= 1)
              {
                CFDictionaryRef v28 = theDict;
                CFDataRef v20 = CFDictionaryGetValue(theDict, @"factoryOption_DownloadDestinationURL");
              }
              else
              {
                CFDataRef v20 = 0;
                CFDictionaryRef v28 = 0;
              }
              StringCFStringRef Value = FigCFDictionaryGetStringValue();
              CFTypeRef v30 = *(CFTypeRef *)(a2 + 72);
              if (!StringValue)
              {
                if (v30) {
                  CFTypeRef v30 = CFRetain(v30);
                }
                CFTypeRef v83 = v30;
                goto LABEL_131;
              }
              uint64_t v27 = FigCFHTTPCreateURLWithQueryParam((const __CFURL *)v30, @"_HLS_primary_id=", StringValue, &v83);
              if (!v27)
              {
                CFTypeRef v30 = v83;
LABEL_131:
                if (*(unsigned char *)(a2 + 216)) {
                  int v56 = &v86[1];
                }
                else {
                  int v56 = 0;
                }
                uint64_t v57 = FigByteStreamFactoryCreateStreamFromURLWithOptions((const __CFURL *)v30, v88, v28, v84, &v84[1], v85, v56, &cf);
                uint64_t v4 = v57;
                if (!v57 || v20) {
                  goto LABEL_145;
                }
                LOBYTE(v98[0]) = 0;
                if (IsShoutcastAudio | v19) {
                  goto LABEL_139;
                }
                if (!FigMediaValidatorIsNonByteStreamURLStreaming(v57, *(const __CFURL **)(a2 + 72), (const __CFURL *)v84[1], (__CFHTTPMessage *)v85[0], v98))
                {
LABEL_141:
                  if (v84[1])
                  {
                    CFRelease(v84[1]);
                    v84[1] = 0;
                  }
                  if (v85[0])
                  {
                    CFRelease(v85[0]);
                    v85[0] = 0;
                  }
LABEL_145:
                  if (v4) {
                    goto LABEL_207;
                  }
                  goto LABEL_26;
                }
                if (LOBYTE(v98[0])) {
LABEL_139:
                }
                  *(_DWORD *)(a2 + 380) = 1;
                uint64_t v4 = 0;
                LOBYTE(v87) = 1;
                goto LABEL_141;
              }
            }
            uint64_t v4 = v27;
            goto LABEL_207;
          }
          goto LABEL_21;
        }
        goto LABEL_43;
      }
    }
  }
  if (!FigMediaValidatorIsNonRefMovieURLStreaming(*(void *)(a2 + 72), 0, 0)) {
    goto LABEL_43;
  }
LABEL_21:
  CFDataRef v20 = 0;
  LOBYTE(v87) = 1;
LABEL_26:
  if ((_BYTE)v87) {
    goto LABEL_184;
  }
  if (*(unsigned char *)(a2 + 216))
  {
    CFTypeRef v22 = v86[1];
    if (v86[1]
      || (CMByteStreamCopyProperty((uint64_t)v84[0], @"CRABS_ReadAheadAssertion", 0, (uint64_t)&v86[1]),
          (CFTypeRef v22 = v86[1]) != 0))
    {
      FigAssertionSetProperty((uint64_t)v22, @"Assertion_HolderName", @"FigAsset");
    }
  }
  CFDictionaryRef v23 = *(const __CFDictionary **)(a2 + 88);
  if (v23
    && CFDictionaryGetValue(v23, @"assetOption_InhibitReferenceMovieResolution") == (const void *)*MEMORY[0x1E4F1CFD0])
  {
    goto LABEL_172;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFTypeRef v97 = 0;
  v98[0] = 0;
  CFURLRef v95 = 0;
  CFURLRef v96 = 0;
  CFTypeRef v93 = 0;
  uint64_t v94 = 0;
  if (!v84[0])
  {
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_151;
  }
  uint64_t v24 = *(void *)(a2 + 80);
  if ((v24 & 0x38) != 0) {
    int v25 = 30;
  }
  else {
    int v25 = 2;
  }
  unsigned int v82 = v25 & (v24 >> 1);
  int v81 = v20;
  if (theDict)
  {
    if (CFDictionaryGetCount(theDict) <= 0) {
      CFDictionaryRef v26 = 0;
    }
    else {
      CFDictionaryRef v26 = theDict;
    }
  }
  else
  {
    CFDictionaryRef v26 = 0;
  }
  CFURLRef v31 = 0;
  uint64_t v32 = *MEMORY[0x1E4F1EC78];
  CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef v34 = (const void **)(a2 + 528);
  uint64_t v35 = 5;
  uint64_t v80 = *MEMORY[0x1E4F1FB98];
  while (1)
  {
    __int16 v92 = 0;
    IsReferenceMovie((uint64_t)v84[0], (BOOL *)&v92);
    if (!(_BYTE)v92)
    {
LABEL_127:
      uint64_t v4 = 0;
      goto LABEL_150;
    }
    uint64_t v36 = CMByteStreamGetCMBaseObject();
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, __CFSet **))(v38 + 48);
    if (!v39 || v39(v36, v32, v33, v98) || !v98[0]) {
      goto LABEL_147;
    }
    uint64_t v40 = v34;
    int v41 = ResolveReferenceMovieWithOptions((uint64_t)v84[0], v98[0], v82, &v96);
    CFTypeRef v42 = v85[1];
    v85[1] = v96;
    if (v96) {
      CFRetain(v96);
    }
    if (v42) {
      CFRelease(v42);
    }
    if (v41)
    {
      CFTypeRef v34 = v40;
    }
    else
    {
      CFTypeRef v34 = v40;
      if (!v96) {
        int v41 = FigSignalErrorAt();
      }
    }
    LODWORD(v86[0]) = v41;
    if (v41)
    {
LABEL_147:
      uint64_t v4 = FigSignalErrorAt();
      goto LABEL_150;
    }
    if (FigMediaValidatorIsNonRefMovieURLStreaming(v85[1], 0, 0)) {
      break;
    }
    if (v26) {
      CFURLRef v31 = CFDictionaryGetValue(v26, @"factoryOption_DownloadDestinationURL");
    }
    if (!*(unsigned char *)(a2 + 288))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        uint64_t v46 = CMByteStreamGetCMBaseObject();
        uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v48 = v47 ? v47 : 0;
        uint64_t v53 = *(unsigned int (**)(uint64_t, __CFString *, void, const void **))(v48 + 48);
        if (v53)
        {
          if (!v53(v46, @"CRABS_StorageSession", 0, v34) && *v34)
          {
            CFMutableDictionaryRef v91 = 0;
            *(_DWORD *)(a2 + 292) = 0;
            *(unsigned char *)(a2 + 288) = 1;
            if (!theDict) {
              CFDictionaryRef theDict = CFDictionaryCreateMutable(v33, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            }
            CreateHTTPRequestOptions(a2, &v91);
            CFMutableDictionaryRef v54 = v91;
            CFDictionarySetValue(theDict, @"factoryOption_HTTPRequestOptions", v91);
            if (v54) {
              CFRelease(v54);
            }
            CFDictionaryRef v26 = theDict;
            StoreByProduct(a1, @"assetProperty_StorageSession", 0, 0, *v34);
          }
        }
      }
    }
    if (!*(unsigned char *)(a2 + 216))
    {
      CFURLRef v43 = v96;
      unsigned int v45 = v88;
LABEL_82:
      CMTimeFlags v44 = 0;
      goto LABEL_84;
    }
    if (v86[1])
    {
      CFRelease(v86[1]);
      v86[1] = 0;
      CFURLRef v43 = v96;
      CMTimeFlags v44 = &v86[1];
      unsigned int v45 = v88;
      if (*(unsigned char *)(a2 + 216)) {
        goto LABEL_84;
      }
      goto LABEL_82;
    }
    CFURLRef v43 = v96;
    unsigned int v45 = v88;
    CMTimeFlags v44 = &v86[1];
LABEL_84:
    uint64_t v4 = FigByteStreamFactoryCreateStreamFromURLWithOptions(v43, v45, v26, &v97, &v95, &v94, v44, &v93);
    if (v86[1]) {
      FigAssertionSetProperty((uint64_t)v86[1], @"Assertion_HolderName", @"FigAsset");
    }
    if (v4)
    {
      if (v31 || !FigMediaValidatorIsNonByteStreamURLStreaming(v4, v96, v95, v94, (unsigned char *)&v92 + 1))
      {
        FigSignalErrorAt();
        goto LABEL_150;
      }
      if (HIBYTE(v92)) {
        *(_DWORD *)(a2 + 380) = 1;
      }
      LOBYTE(v87) = 1;
    }
    else if (!*(void *)(a2 + 576))
    {
      CFMutableDictionaryRef v91 = 0;
      uint64_t v50 = CMByteStreamGetCMBaseObject();
      uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v52 = v51 ? v51 : 0;
      CMTime v55 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFMutableDictionaryRef *))(v52 + 48);
      if (v55)
      {
        if (!v55(v50, v80, v33, &v91)) {
          *(void *)(a2 + 576) = v91;
        }
      }
    }
    if (!(_BYTE)v87 && !v97) {
      goto LABEL_147;
    }
    if (v84[0])
    {
      CFRelease(v84[0]);
      v84[0] = 0;
    }
    if (v84[1])
    {
      CFRelease(v84[1]);
      v84[1] = 0;
    }
    if (v85[0]) {
      CFRelease(v85[0]);
    }
    CFTypeRef v49 = v97;
    CFTypeRef v97 = 0;
    v84[0] = v49;
    v84[1] = v95;
    v85[0] = v94;
    uint64_t v94 = 0;
    CFURLRef v95 = 0;
    LOBYTE(v92) = 0;
    if (v96)
    {
      CFRelease(v96);
      CFURLRef v96 = 0;
    }
    if (v98[0])
    {
      CFRelease(v98[0]);
      v98[0] = 0;
    }
    if (v95)
    {
      CFRelease(v95);
      CFURLRef v95 = 0;
    }
    if (v94)
    {
      CFRelease(v94);
      uint64_t v94 = 0;
    }
    if (!(_BYTE)v87)
    {
      if (--v35) {
        continue;
      }
    }
    goto LABEL_127;
  }
  uint64_t v4 = 0;
  LOBYTE(v87) = 1;
LABEL_150:
  CFDataRef v20 = v81;
LABEL_151:
  if (v97)
  {
    uint64_t v58 = CMByteStreamGetCMBaseObject();
    if (v58)
    {
      uint64_t v59 = v58;
      uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v61 = v60 ? v60 : 0;
      CMTime v62 = *(void (**)(uint64_t))(v61 + 24);
      if (v62) {
        v62(v59);
      }
    }
    CFRelease(v97);
  }
  if (v4)
  {
    CFTypeRef cf = v93;
  }
  else if (v93)
  {
    CFRelease(v93);
  }
  if (v96) {
    CFRelease(v96);
  }
  if (v98[0]) {
    CFRelease(v98[0]);
  }
  if (v95) {
    CFRelease(v95);
  }
  if (v94) {
    CFRelease(v94);
  }
  if (!v4)
  {
LABEL_172:
    int v63 = v87;
    if (!(_BYTE)v87 && v84[0])
    {
      if (FigCFHTTPIsDataURL((const __CFURL *)v85[1]))
      {
        v98[0] = 0;
        CFTypeRef v64 = v84[0];
        uint64_t v65 = FigStreamPlaylistParserMinBytesRequiredToVerifyM3UPlaylist();
        if (!CMByteStreamReadAndCreateBlockBuffer_1((uint64_t)v64, v65, (uint64_t)v98)) {
          LOBYTE(v87) = FigStreamingPlaylistVerifyM3UPlaylist(v98[0], 0);
        }
        if (v98[0]) {
          CFRelease(v98[0]);
        }
      }
      int v63 = v87;
    }
    if (v63) {
      goto LABEL_184;
    }
    if (FigMediaValidatorIsNonRefMovieURLStreaming(v85[1], v84[1], v85[0]))
    {
      LOBYTE(v87) = 1;
      goto LABEL_184;
    }
    if ((_BYTE)v87)
    {
LABEL_184:
      if (v84[0])
      {
        CFRelease(v84[0]);
        v84[0] = 0;
      }
      if (v86[1])
      {
        CFRelease(v86[1]);
        uint64_t v4 = 0;
        v86[1] = 0;
        goto LABEL_207;
      }
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(a2 + 136));
      CFTypeRef v66 = v84[0];
      if (v84[0]) {
        CFTypeRef v66 = CFRetain(v84[0]);
      }
      *(void *)(a2 + 160) = v66;
      CFTypeRef v67 = v86[1];
      if (v86[1])
      {
        CFTypeRef v67 = CFRetain(v86[1]);
        CFTypeRef v66 = *(CFTypeRef *)(a2 + 160);
      }
      *(void *)(a2 + 224) = v67;
      if (v66)
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          v98[0] = 0;
          *(unsigned char *)(a2 + 193) = 1;
          PropertyStoreSetComplainForSyncQueries((uint64_t)a1, 1);
          int v68 = CMByteStreamCopyProperty(*(void *)(a2 + 160), @"CRABS_CacheIsVolatile", 0, (uint64_t)v98);
          long long v69 = v98[0];
          if (!v68) {
            *(unsigned char *)(a2 + 194) = v98[0] == (__CFSet *)*MEMORY[0x1E4F1CFD0];
          }
          if (v69) {
            CFRelease(v69);
          }
        }
      }
      MEMORY[0x19970E930](*(void *)(a2 + 136));
      if (!*(unsigned char *)(a2 + 288))
      {
        if (*(unsigned char *)(a2 + 193))
        {
          unsigned int v77 = (const void **)(a2 + 528);
          if (!CMByteStreamCopyProperty(*(void *)(a2 + 160), @"CRABS_StorageSession", 0, a2 + 528))
          {
            CFBooleanRef v78 = *v77;
            if (*v77)
            {
              *(_DWORD *)(a2 + 292) = 0;
              *(unsigned char *)(a2 + 288) = 1;
              StoreByProduct(a1, @"assetProperty_StorageSession", 0, 0, v78);
            }
          }
        }
      }
      if (!(_BYTE)v87 && *(unsigned char *)(a2 + 193))
      {
        if (v20)
        {
          v98[0] = 0;
          *(void *)(a2 + 304) = dispatch_queue_create("URLAssetPostPurchaseQueue", 0);
          FigThreadMakeDispatchQueueAbortable();
          *(void *)(a2 + 296) = dispatch_group_create();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          if (!CMByteStreamCopyProperty(*(void *)(a2 + 160), *MEMORY[0x1E4F1EC58], 0, (uint64_t)v98))
          {
            double v79 = v98[0];
            if (v98[0] == (__CFSet *)*MEMORY[0x1E4F1CFD0])
            {
              CFRetain((CFTypeRef)a2);
              dispatch_group_async_f(*(dispatch_group_t *)(a2 + 104), *(dispatch_queue_t *)(a2 + 96), (void *)a2, (dispatch_function_t)URLAssetDoneDownloadingDispatchFunc);
              double v79 = v98[0];
            }
            if (v79) {
              CFRelease(v79);
            }
          }
        }
        else
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
      }
    }
    uint64_t v4 = 0;
  }
LABEL_207:
  *(unsigned char *)(a2 + 192) = v87;
  CFTypeRef v70 = v85[1];
  if (v85[1]) {
    CFTypeRef v70 = CFRetain(v85[1]);
  }
  *(void *)(a2 + 176) = v70;
  CFTypeRef v71 = v84[1];
  if (v84[1]) {
    CFTypeRef v71 = CFRetain(v84[1]);
  }
  *(void *)(a2 + 184) = v71;
  *(_DWORD *)(a2 + 172) = v86[0];
  *(unsigned char *)(a2 + 168) = 1;
  *(unsigned char *)(a2 + 144) = 1;
  *(_DWORD *)(a2 + 148) = v4;
  if (v4)
  {
    CFTypeRef v72 = cf;
    if (cf) {
      CFTypeRef v72 = CFRetain(cf);
    }
    *(void *)(a2 + 152) = v72;
  }
  if (theDict)
  {
    CFRelease(theDict);
    CFDictionaryRef theDict = 0;
  }
  if (v84[0]) {
    CFRelease(v84[0]);
  }
  if (v86[1]) {
    CFRelease(v86[1]);
  }
  if (v84[1]) {
    CFRelease(v84[1]);
  }
  if (v85[0]) {
    CFRelease(v85[0]);
  }
  if (v85[1]) {
    CFRelease(v85[1]);
  }
  long long v73 = *(const void **)(a2 + 184);
  if (!v73) {
    long long v73 = *(const void **)(a2 + 176);
  }
  StoreByProduct(a1, @"assetProperty_ResolvedURL", *(_DWORD *)(a2 + 172), 0, v73);
  int v74 = *(_DWORD *)(a2 + 148);
  CFTypeRef v75 = cf;
  if (!v74 && cf)
  {
    CFRelease(cf);
    CFTypeRef v75 = 0;
    CFTypeRef cf = 0;
    int v74 = *(_DWORD *)(a2 + 148);
  }
  StoreByProduct(a1, @"assetProperty_ContentByteStream", v74, v75, *(const void **)(a2 + 160));
  if (cf) {
    CFRelease(cf);
  }
  if (v83) {
    CFRelease(v83);
  }
  return v4;
}

uint64_t BytePumpNotificationHandler(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  MEMORY[0x19970E290](*(void *)(a2 + 424));
  if (*(_DWORD *)(a2 + 380) == 5 || *(unsigned char *)(a2 + 378)) {
    return MEMORY[0x19970E2B0](*(void *)(a2 + 424));
  }
  if (CFEqual(a3, @"FBPAL_AlternateListChanged"))
  {
    int v8 = *(_DWORD *)(a2 + 380);
    if (!v8)
    {
      *(_DWORD *)(a2 + 380) = 2;
      if (!*(void *)(a2 + 408))
      {
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(a2 + 384));
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v15 = v14 ? v14 : 0;
        CFTypeRef v22 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(v15 + 48);
        if (v22) {
          v22(FigBaseObject, 0x1EE53E4B8, *MEMORY[0x1E4F1CF80], a2 + 408);
        }
      }
      goto LABEL_33;
    }
    if (v8 != 3 || *(unsigned char *)(a2 + 376)) {
      return MEMORY[0x19970E2B0](*(void *)(a2 + 424));
    }
    int v23 = 0;
    uint64_t v9 = *(void *)(a2 + 384);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    CFDataRef v20 = *(uint64_t (**)(uint64_t, void, void, void, void, uint64_t, long long *, long long *, void, int *, void, void))(v11 + 32);
    if (v20)
    {
      long long v26 = *MEMORY[0x1E4F1F9F8];
      uint64_t v27 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v24 = v26;
      uint64_t v25 = v27;
      int Code = v20(v9, 0, 0, 0, 0, 1, &v26, &v24, 0, &v23, 0, 0);
    }
    else
    {
      int Code = -12782;
    }
    CFTypeID v17 = 0;
  }
  else
  {
    if (CFEqual(a3, @"FBP_DurationChanged"))
    {
      int v12 = 4;
LABEL_32:
      *(_DWORD *)(a2 + 380) = v12;
      *(unsigned char *)(a2 + 378) = 1;
LABEL_33:
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 368));
      return MEMORY[0x19970E2B0](*(void *)(a2 + 424));
    }
    if (!CFEqual(a3, @"FBP_FatalErrorOccurred")) {
      return MEMORY[0x19970E2B0](*(void *)(a2 + 424));
    }
    if (!a5 || (CFStringRef Value = (__CFError *)CFDictionaryGetValue(a5, @"FBPFEN_Error")) == 0)
    {
      *(_DWORD *)(a2 + 392) = -12645;
      int v19 = *(const void **)(a2 + 400);
      *(void *)(a2 + 400) = 0;
LABEL_28:
      if (v19) {
        CFRelease(v19);
      }
      int v12 = 5;
      goto LABEL_32;
    }
    CFTypeID v17 = Value;
    int Code = CFErrorGetCode(Value);
  }
  if (Code == -12646)
  {
    int v12 = 1;
    goto LABEL_32;
  }
  if (Code)
  {
    *(_DWORD *)(a2 + 392) = Code;
    int v19 = *(const void **)(a2 + 400);
    *(void *)(a2 + 400) = v17;
    if (v17) {
      CFRetain(v17);
    }
    goto LABEL_28;
  }
  return MEMORY[0x19970E2B0](*(void *)(a2 + 424));
}

void BytePumpAbortAction(uint64_t a1)
{
  values = 0;
  ErrorForOSint Status = FigCreateErrorForOSStatus(4294954511, (CFErrorRef *)&values);
  if (values)
  {
    CFDictionaryRef v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigBytePumpFatalErrorNotificationValue_Error, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    ErrorForOSint Status = (uint64_t)values;
    if (values) {
      CFRelease(values);
    }
  }
  else
  {
    CFDictionaryRef v4 = 0;
  }
  BytePumpNotificationHandler(ErrorForOSStatus, a1, @"FBP_FatalErrorOccurred", v3, v4);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t CMByteStreamReadAndCreateBlockBuffer_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, 0, a3, 0);
}

void URLAssetDoneDownloadingDispatchFunc(uint64_t *a1)
{
  URLAssetDoneDownloadingGuts((uint64_t)a1, a1[20], 0);

  CFRelease(a1);
}

uint64_t CreateSanitizedOutOfBandAlternateTracksArray(const __CFArray *a1, __CFArray **a2)
{
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_20;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    uint64_t v18 = 0;
  }
  else
  {
    CFDataRef v20 = a2;
    CFIndex v4 = 0;
    int v5 = (const void *)*MEMORY[0x1E4F1CFD0];
    uint64_t v6 = (const void *)*MEMORY[0x1E4F1CFC8];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v4);
      CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsMediaType");
      CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsTaggedMediaCharacteristics");
      Mutableuint64_t Copy = FigCFDictionaryCreateMutableCopy();
      if (!MutableCopy) {
        break;
      }
      uint64_t v11 = (__CFDictionary *)MutableCopy;
      if (!Value)
      {
        CFStringForOSTypeCFStringRef Value = (const void *)FigGetCFStringForOSTypeValue();
        CFDictionarySetValue(v11, @"MediaSelectionOptionsMediaType", CFStringForOSTypeValue);
      }
      ++v4;
      FigCFDictionarySetInt32();
      uint64_t v13 = v5;
      if (v9)
      {
        CFIndex v14 = CFArrayGetCount(v9);
        v23.location = 0;
        v23.size_t length = v14;
        int v15 = CFArrayContainsValue(v9, v23, @"public.auxiliary-content");
        v24.location = 0;
        v24.size_t length = v14;
        int v16 = CFArrayContainsValue(v9, v24, @"public.subtitles.forced-only");
        if (v15) {
          CFTypeID v17 = v5;
        }
        else {
          CFTypeID v17 = v6;
        }
        CFDictionarySetValue(v11, @"MediaSelectionOptionsIsAuxiliaryContent", v17);
        if (v16) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = v5;
        }
      }
      CFDictionarySetValue(v11, @"MediaSelectionOptionsDisplaysNonForcedSubtitles", v13);
      CFArrayAppendValue(theArray, v11);
      CFRelease(v11);
      if (Count == v4)
      {
        uint64_t v18 = 0;
        a2 = v20;
        goto LABEL_17;
      }
    }
    uint64_t v18 = FigSignalErrorAt();
    a2 = v20;
    if (v18)
    {
      CFRelease(theArray);
LABEL_20:
      CFArrayRef theArray = 0;
    }
  }
LABEL_17:
  *a2 = theArray;
  return v18;
}

uint64_t EnsureStreamingNetworkURL(void *a1, uint64_t a2)
{
  URLCFStringRef String = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a2 + 440)) {
    return *(unsigned int *)(a2 + 444);
  }
  uint64_t v5 = EnsureContentStreamCreated(a1, a2);
  if (v5) {
    goto LABEL_26;
  }
  if (!FigCFURLIsLocalResource())
  {
    CFTypeRef v10 = *(CFTypeRef *)(a2 + 176);
    if (!v10)
    {
      CFURLRef v11 = 0;
      goto LABEL_18;
    }
    CFTypeRef v10 = CFRetain(v10);
    CFURLRef v11 = (CFURLRef)v10;
    if (!v10) {
      goto LABEL_18;
    }
LABEL_15:
    CFTypeRef v10 = CFRetain(v11);
LABEL_18:
    uint64_t v3 = 0;
    *(void *)(a2 + 432) = v10;
    goto LABEL_19;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v5 = FigHLSPersistentStoreCreateAtURL((const void *)*MEMORY[0x1E4F1CF80], *(void *)(a2 + 176), 0, 0, &cf);
  if (v5)
  {
LABEL_26:
    uint64_t v3 = v5;
    CFURLRef v11 = 0;
    goto LABEL_19;
  }
  uint64_t FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(cf);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(v9 + 48);
  if (v12)
  {
    uint64_t v5 = v12(FigBaseObject, @"MasterPlaylistNetworkURL", v6, &URLString);
    if (!v5)
    {
      CFURLRef v11 = CFURLCreateWithString(v6, URLString, 0);
      if (!v11)
      {
        uint64_t v3 = FigSignalErrorAt();
        goto LABEL_19;
      }
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  CFURLRef v11 = 0;
  uint64_t v3 = 4294954514;
LABEL_19:
  *(unsigned char *)(a2 + 440) = 1;
  *(_DWORD *)(a2 + 444) = v3;
  StoreByProduct(a1, @"assetProperty_OriginalNetworkContentURL", v3, 0, *(const void **)(a2 + 432));
  if (v11) {
    CFRelease(v11);
  }
  if (URLString) {
    CFRelease(URLString);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t EnsureTracksArrayCreated(void *a1, uint64_t a2)
{
  capacitCGFloat y = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a2 + 260) = 1;
    uint64_t v4 = 4294954511;
  }
  else
  {
    if (*(unsigned char *)(a2 + 260)) {
      return *(unsigned int *)(a2 + 264);
    }
    uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
    if (v5)
    {
      uint64_t v4 = v5;
      CFMutableArrayRef Mutable = 0;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 240);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t, CFIndex *))(v8 + 8);
      if (v9)
      {
        uint64_t v4 = v9(v6, &capacity);
        CFMutableArrayRef Mutable = 0;
        if (!v4 && capacity)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, MEMORY[0x1E4F1D510]);
          if (Mutable)
          {
            uint64_t v11 = EnsureTrackWorkQueueCreated(a2);
            if (!v11) {
              LockTrackMacroPropertyState();
            }
          }
          else
          {
            uint64_t v11 = FigSignalErrorAt();
          }
          uint64_t v4 = v11;
        }
      }
      else
      {
        CFMutableArrayRef Mutable = 0;
        uint64_t v4 = 4294954514;
      }
    }
    if (!Mutable || !v4)
    {
      *(void *)(a2 + 272) = Mutable;
      *(unsigned char *)(a2 + 260) = 1;
      *(_DWORD *)(a2 + 264) = v4;
      if (!v4)
      {
        StoreByProduct(a1, @"assetProperty_Tracks", 0, 0, Mutable);
        return v4;
      }
      goto LABEL_20;
    }
    CFRelease(Mutable);
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a2 + 260) = 1;
  }
  *(_DWORD *)(a2 + 264) = v4;
LABEL_20:
  CFStringRef Error = AssetCopyLoadError(a2, v4);
  StoreByProduct(a1, @"assetProperty_Tracks", *(_DWORD *)(a2 + 264), Error, *(const void **)(a2 + 272));
  if (Error) {
    CFRelease(Error);
  }
  return v4;
}

uint64_t EnsureFormatReaderCreated(void *a1, uint64_t a2)
{
  CFTypeRef cf[2] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  __int16 v89 = 0;
  unsigned __int8 v88 = 0;
  CFTypeRef v87 = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v4 = 4294954511;
LABEL_171:
    *(unsigned char *)(a2 + 232) = 1;
    *(_DWORD *)(a2 + 236) = v4;
    goto LABEL_162;
  }
  if (*(unsigned char *)(a2 + 232)) {
    return *(unsigned int *)(a2 + 236);
  }
  if (*(void *)(a2 + 88)) {
    FigCFDictionaryGetBooleanIfPresent();
  }
  uint64_t BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  if (FigAssetAllowsSandboxedParsingOptIn(BooleanIfPresent)) {
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (*(_DWORD *)(a2 + 64) == 709251626)
  {
    CFTypeRef v6 = *(CFTypeRef *)(a2 + 72);
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    CFMutableArrayRef Mutable = 0;
    uint64_t v8 = 0;
    *(void *)(a2 + 240) = v6;
    goto LABEL_142;
  }
  uint64_t v9 = EnsureContentStreamCreated(a1, a2);
  if (v9)
  {
    uint64_t v4 = v9;
    goto LABEL_171;
  }
  if (*(unsigned char *)(a2 + 192))
  {
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_161;
  }
  CFTypeRef v10 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(void *)(a2 + 88))
  {
    CFMutableArrayRef Mutable = 0;
    DictionaryCFStringRef Value = 0;
    uint64_t v8 = 0;
    goto LABEL_77;
  }
  unsigned int v82 = a1;
  BooleanCFStringRef Value = (const void *)FigCFDictionaryGetBooleanValue();
  int v12 = (const void *)FigCFDictionaryGetBooleanValue();
  uint64_t v13 = (const void *)FigCFDictionaryGetBooleanValue();
  CFIndex v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_IsMovieProxy");
  int v15 = *v10;
  if (v14 == *v10) {
    int v16 = v14;
  }
  else {
    int v16 = 0;
  }
  CFTypeID v17 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_SupportAliasDataReferences");
  if (v17 == v15) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = (const void *)FigCFDictionaryGetBooleanValue();
  CMTimeValue value = (void *)FigCFDictionaryGetBooleanValue();
  CFDataRef v20 = (const void *)FigCFDictionaryGetBooleanValue();
  CFIndex v84 = (void *)FigCFDictionaryGetBooleanValue();
  uint64_t v83 = FigCFDictionaryGetBooleanValue();
  CFDataRef v21 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_PrepareForIncrementalFragments");
  *(unsigned char *)(a2 + 544) = v21 == v15;
  if (v21 == v15)
  {
    NumberCFStringRef Value = (const __CFNumber *)FigCFDictionaryGetNumberValue();
    CFRange v23 = (void *)(a2 + 552);
    if (!NumberValue
      || (CFNumberGetValue(NumberValue, kCFNumberSInt64Type, (void *)(a2 + 552)), (*v23 & 0x8000000000000000) != 0))
    {
      *CFRange v23 = 0;
    }
  }
  DictionaryCFStringRef Value = (__CFDictionary *)FigCFDictionaryGetDictionaryValue();
  if (BooleanValue || v12 || v13 || v16 || v18 || v19 || value)
  {
    Mutableuint64_t Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    DictionaryCFStringRef Value = MutableCopy;
    if (BooleanValue) {
      CFDictionarySetValue(MutableCopy, @"Instantiation_PreferPreciseDurationAndTiming", BooleanValue);
    }
    if (v12) {
      CFDictionarySetValue(DictionaryValue, @"ReadEntireMoovAtom", v12);
    }
    if (v13) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_PrepareForCopying", v13);
    }
    CFDictionaryRef v28 = value;
    if (v16) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_MovieProxy", v16);
    }
    if (v18) {
      CFDictionarySetValue(DictionaryValue, @"QTMovie_SupportAliasRecords", v18);
    }
    long long v26 = v84;
    if (v19) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_EnableAssetAnalysis", v19);
    }
    a1 = v82;
    uint64_t v25 = (const void *)v83;
    goto LABEL_52;
  }
  uint64_t v25 = (const void *)v83;
  long long v26 = v84;
  if (*(unsigned char *)(a2 + 544) || v20 || v84 || v83)
  {
    DictionaryCFStringRef Value = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    a1 = v82;
    CFDictionaryRef v28 = 0;
LABEL_52:
    if (*(unsigned char *)(a2 + 544)) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_AllowIncrementalFragmentParsing", v15);
    }
    if (v28) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_SkipReadingMP3MetadataDuringFormatReaderCreation", v28);
    }
    if (v20) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_ProhibitProFormatReaders", v20);
    }
    if (v26) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_DoNotUseAudioFileAllowList", v26);
    }
    if (v25) {
      CFDictionarySetValue(DictionaryValue, @"Instantiation_IgnoreDisabledAPACAudioTracks", v25);
    }
    uint64_t v8 = DictionaryValue;
    goto LABEL_63;
  }
  uint64_t v8 = 0;
  a1 = v82;
LABEL_63:
  CFIndex v29 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_OutOfBandMIMEType");
  if (v29 && (v30 = v29, CFTypeID v31 = CFGetTypeID(v29), v31 == CFStringGetTypeID()))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"Selection_OutOfBandMIMEType", v30);
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  uint64_t v32 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_OutOfBandFileType");
  if (v32)
  {
    CFAllocatorRef v33 = v32;
    CFTypeID v34 = CFGetTypeID(v32);
    if (v34 == CFStringGetTypeID())
    {
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFDictionarySetValue(Mutable, @"Selection_OutOfBandFileType", v33);
    }
  }
  uint64_t v35 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), @"assetOption_AllowableTypes");
  if (v35)
  {
    uint64_t v36 = v35;
    CFTypeID v37 = CFGetTypeID(v35);
    if (v37 == CFArrayGetTypeID())
    {
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFDictionarySetValue(Mutable, @"Selection_AllowableTypes", v36);
    }
  }
LABEL_77:
  theCFDataRef Data = 0;
  if (PKDIsContentKeyBossEnabled() && *(void *)(a2 + 520))
  {
    cf[0] = 0;
    uint64_t v4 = FigContentKeySpecifierCreate(3, @"AudibleGroupID", 0, 0, (uint64_t *)cf);
    if (!v4)
    {
      uint64_t v38 = *(void *)(a2 + 520);
      CFTypeRef v39 = cf[0];
      uint64_t v40 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v40) {
        int v41 = v40;
      }
      else {
        int v41 = 0;
      }
      uint64_t v46 = (uint64_t (*)(uint64_t, CFTypeRef, CFDataRef *))v41[13];
      if (v46 && *v41 >= 2uLL) {
        uint64_t v4 = v46(v38, v39, &theData);
      }
      else {
        uint64_t v4 = 4294954514;
      }
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    uint64_t v42 = *(void *)(a2 + 512);
    if (v42)
    {
      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v43) {
        uint64_t v44 = v43;
      }
      else {
        uint64_t v44 = 0;
      }
      unsigned int v45 = *(uint64_t (**)(uint64_t, __CFString *, CFDataRef *))(v44 + 80);
      if (!v45)
      {
        uint64_t v4 = 4294954514;
        if (!Mutable) {
          goto LABEL_159;
        }
        goto LABEL_158;
      }
      uint64_t v4 = v45(v42, @"AudibleGroupID", &theData);
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  if (v4 || !theData)
  {
    if (v4) {
      goto LABEL_157;
    }
  }
  else
  {
    if ((unint64_t)CFDataGetLength(theData) >= 4)
    {
      CFDataGetBytePtr(theData);
      Uuint64_t Int32 = (const void *)FigCFNumberCreateUInt32();
      if (!v8)
      {
        DictionaryCFStringRef Value = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        uint64_t v8 = DictionaryValue;
      }
      CFDictionarySetValue(v8, @"Instantiation_AudibleGroupID", UInt32);
      if (UInt32) {
        CFRelease(UInt32);
      }
    }
    CFRelease(theData);
  }
  int v48 = FigAssetUsesRemoteFormatReader() | v88;
  int v49 = v89;
  uint64_t v50 = *(const void **)(a2 + 160);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v52 = (void *)(a2 + 240);
  uint64_t v53 = (CFTypeRef *)(a2 + 248);
  CFMutableDictionaryRef v54 = (_DWORD *)(a2 + 256);
  if (!v48 || v49)
  {
    startedouble d = FigFormatReaderCreateForStreamReturningResults((uint64_t)v50, Mutable, AllocatorForMedia, (uint64_t)DictionaryValue, (CFTypeRef *)(a2 + 240), v53, v54, &v87);
    goto LABEL_112;
  }
  uint64_t v55 = FigFormatReaderRemoteCreateForStreamReturningResults(v50, (uint64_t)Mutable, (uint64_t)AllocatorForMedia, (uint64_t)DictionaryValue, (void *)(a2 + 240), v53, v54, &v87);
  if (v55)
  {
    uint64_t v4 = v55;
    if (!Mutable) {
      goto LABEL_159;
    }
LABEL_158:
    CFRelease(Mutable);
    goto LABEL_159;
  }
  startedouble d = FigStartForwardingMediaServicesProcessDeathNotification();
LABEL_112:
  uint64_t v4 = started;
  if (started) {
    goto LABEL_157;
  }
  if (*(unsigned char *)(a2 + 193))
  {
    CFDictionaryRef theDict = 0;
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*v52);
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v59 = v58 ? v58 : 0;
    uint64_t v60 = *(unsigned int (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v59 + 48);
    if (v60)
    {
      if (!v60(FigBaseObject, @"ImportantResourceLocation", *MEMORY[0x1E4F1CF80], &theDict) && theDict)
      {
        int valuePtr = 0;
        CFMutableDictionaryRef v91 = 0;
        CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LocationSize");
        if (v61) {
          CFNumberGetValue(v61, kCFNumberSInt64Type, &valuePtr);
        }
        CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LocationOffset");
        if (v62)
        {
          CFNumberGetValue(v62, kCFNumberSInt64Type, &v91);
          if (valuePtr)
          {
            cf[0] = v91;
            cf[1] = valuePtr;
            uint64_t v63 = *(void *)(a2 + 160);
            uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 24);
            uint64_t v65 = v64 ? v64 : 0;
            CFTypeRef v66 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v65 + 8);
            if (v66) {
              v66(v63, 1, 1, cf);
            }
          }
        }
        CFRelease(theDict);
      }
    }
  }
  if (*(unsigned char *)(a2 + 544))
  {
    cf[0] = 0;
    uint64_t v67 = FigFormatReaderGetFigBaseObject(*v52);
    uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v68) {
      uint64_t v69 = v68;
    }
    else {
      uint64_t v69 = 0;
    }
    CFTypeRef v70 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v69 + 48);
    if (v70) {
      v70(v67, @"CouldContainFragments", *MEMORY[0x1E4F1CF80], cf);
    }
    BOOL v71 = cf[0] == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    *(unsigned char *)(a2 + 544) = v71;
    if (v71)
    {
      CFTypeRef v72 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a2 + 96));
      *(void *)(a2 + 560) = v72;
      if (v72)
      {
        dispatch_source_set_timer(v72, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
        dispatch_set_context(*(dispatch_object_t *)(a2 + 560), (void *)a2);
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a2 + 560), (dispatch_function_t)IncrementalFragmentParsingTimerFunction);
        *(void *)(a2 + 568) = voucher_copy();
        dispatch_resume(*(dispatch_object_t *)(a2 + 560));
        uint64_t v73 = *(void *)(a2 + 552);
        if (v73) {
          dispatch_source_set_timer(*(dispatch_source_t *)(a2 + 560), 0, 1000000 * v73, 1000000 * (v73 / 100));
        }
      }
      *(unsigned char *)(a2 + 456) = 1;
    }
  }
LABEL_142:
  if (HIBYTE(v89))
  {
    cf[0] = 0;
    uint64_t v74 = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v75) {
      uint64_t v76 = v75;
    }
    else {
      uint64_t v76 = 0;
    }
    unsigned int v77 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v76 + 48);
    if (v77) {
      v77(v74, @"Identifier", *MEMORY[0x1E4F1CF80], cf);
    }
    if (FigCFEqual())
    {
      uint64_t v4 = 0;
    }
    else
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      CFBooleanRef v78 = *(const void **)(a2 + 240);
      if (v78)
      {
        CFRelease(v78);
        *(void *)(a2 + 240) = 0;
      }
      uint64_t v4 = FigSignalErrorAt();
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
LABEL_157:
    if (!Mutable) {
      goto LABEL_159;
    }
    goto LABEL_158;
  }
  uint64_t v4 = 0;
  if (Mutable) {
    goto LABEL_158;
  }
LABEL_159:
  if (v8) {
    CFRelease(v8);
  }
LABEL_161:
  *(unsigned char *)(a2 + 232) = 1;
  *(_DWORD *)(a2 + 236) = v4;
  if (v4)
  {
LABEL_162:
    CFStringRef Error = AssetCopyLoadError(a2, v4);
    int v80 = *(_DWORD *)(a2 + 236);
    goto LABEL_164;
  }
  int v80 = 0;
  CFStringRef Error = 0;
LABEL_164:
  StoreByProduct(a1, @"assetProperty_FormatReader", v80, Error, *(const void **)(a2 + 240));
  if (v87)
  {
    StoreByProduct(a1, @"AssetAnalysisMessages", 0, 0, v87);
    if (v87) {
      CFRelease(v87);
    }
  }
  if (Error) {
    CFRelease(Error);
  }
  return v4;
}

void IncrementalFragmentParsingTimerFunction(uint64_t a1)
{
  if (a1)
  {
    os_retain(*(void **)(a1 + 568));
    voucher_adopt();
    if (*(unsigned char *)(a1 + 112)
      || !*(unsigned char *)(a1 + 544)
      || (uint64_t v3 = *(void *)(a1 + 240)) != 0
      && ((v7 = 0, (uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v5 = 0) : (v5 = v4),
          (CFTypeRef v6 = *(unsigned int (**)(uint64_t, void, int *))(v5 + 40)) == 0
       || v6(v3, 0, &v7)
       || (v7 & 4) != 0))
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      *(unsigned char *)(a1 + 544) = 0;
    }
    uint64_t v2 = (void *)voucher_adopt();
    os_release(v2);
  }
}

uint64_t EnsureStreamingAssetPropertyLoaderCreated(void *a1, uint64_t a2)
{
  CFTypeRef v8 = 0;
  CFTypeRef cf = 0;
  if (*(void *)(a2 + 504))
  {
    uint64_t v2 = 0;
    goto LABEL_13;
  }
  HTTPRequestuint64_t Options = EnsureStorageSessionCreated(a1, a2);
  if (HTTPRequestOptions) {
    goto LABEL_12;
  }
  HTTPRequestuint64_t Options = CreateHTTPRequestOptions(a2, (CFMutableDictionaryRef *)&cf);
  if (HTTPRequestOptions) {
    goto LABEL_12;
  }
  if (*(void *)(a2 + 16) != -1) {
    dispatch_once_f((dispatch_once_t *)(a2 + 16), (void *)a2, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
  }
  uint64_t v2 = *(unsigned int *)(a2 + 496);
  if (!v2)
  {
    HTTPRequestuint64_t Options = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(void *)(a2 + 88), *(void *)(a2 + 336), (__CFDictionary **)&v8);
    if (!HTTPRequestOptions)
    {
      HTTPRequestuint64_t Options = InternalURLAssetEnsureContentKeyBoss((void *)a2);
      if (!HTTPRequestOptions)
      {
        HTTPRequestuint64_t Options = EnsureStreamingNetworkURL(a1, a2);
        if (!HTTPRequestOptions)
        {
          uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
          HTTPRequestuint64_t Options = FigStreamingAssetPropertyLoaderCreate(AllocatorForMedia, *(const void **)(a2 + 432), *(const void **)(a2 + 528), cf, v8, *(const void **)(a2 + 488), *(const void **)(a2 + 520), *(const void **)(a2 + 408), (void *)(a2 + 504));
        }
      }
    }
LABEL_12:
    uint64_t v2 = HTTPRequestOptions;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v2;
}

uint64_t ProduceTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  long long v7 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v11.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v11.CMTimeEpoch epoch = v3;
  uint64_t TrackDuration = FigGaplessInfoGetTrackDuration(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 64) == 0, &v11);
  if (!TrackDuration)
  {
    memset(&v10, 0, sizeof(v10));
    *(_OWORD *)&start.start.CMTimeValue value = v7;
    start.start.CMTimeEpoch epoch = v3;
    CMTime duration = v11;
    CMTimeRangeMake(&v10, &start.start, &duration);
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTimeRange start = v10;
    *a2 = CMTimeRangeCopyAsDictionary(&start, v5);
  }
  return TrackDuration;
}

uint64_t ProduceMediaPresentationTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  CFTypeRef v36 = 0;
  memset(&v35, 0, sizeof(v35));
  memset(&v34, 0, sizeof(v34));
  memset(&v33, 0, sizeof(v33));
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 32);
  if (!v6) {
    goto LABEL_34;
  }
  uint64_t v7 = v6(v3, &v38);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v8 = v38;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CMTime v11 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, void, void))(v10 + 8);
  if (!v11) {
    goto LABEL_34;
  }
  CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  uint64_t v7 = v11(v8, &start, &v37, 0, 0);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v12 = v37;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = *(uint64_t (**)(CFTypeRef, CMTime *))(v14 + 40);
  if (!v15) {
    goto LABEL_34;
  }
  uint64_t v7 = v15(v12, &v35);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v16 = v38;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, void, void))(v18 + 8);
  if (!v19) {
    goto LABEL_34;
  }
  CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  uint64_t v7 = v19(v16, &start, &v36, 0, 0);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v20 = v36;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFRange v23 = *(uint64_t (**)(CFTypeRef, CMTime *))(v22 + 40);
  if (!v23) {
    goto LABEL_34;
  }
  uint64_t v7 = v23(v20, &v34);
  if (v7)
  {
LABEL_42:
    uint64_t v28 = v7;
    goto LABEL_35;
  }
  CFTypeRef v24 = v36;
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v26 = v25 ? v25 : 0;
  uint64_t v27 = *(uint64_t (**)(CFTypeRef, CMTime *))(v26 + 56);
  if (!v27)
  {
LABEL_34:
    uint64_t v28 = 4294954514;
    goto LABEL_35;
  }
  uint64_t v7 = v27(v24, &v33);
  if (v7) {
    goto LABEL_42;
  }
  if ((v33.flags & 0x1D) == 1)
  {
    CMTime lhs = v34;
    CMTime rhs = v33;
    CMTimeAdd(&start, &lhs, &rhs);
    CMTime v34 = start;
  }
  CMTime start = v35;
  CMTime lhs = v34;
  CMTimeRangeFromTimeToTime(&v30, &start, &lhs);
  uint64_t v28 = 0;
  *a2 = CMTimeRangeCopyAsDictionary(&v30, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
LABEL_35:
  if (v37) {
    CFRelease(v37);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v28;
}

uint64_t ProduceMediaDecodeTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  CFTypeRef v38 = 0;
  CFTypeRef v39 = 0;
  CFTypeRef v37 = 0;
  memset(&v36, 0, sizeof(v36));
  memset(&v35, 0, sizeof(v35));
  memset(&v34, 0, sizeof(v34));
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 32);
  if (!v6) {
    goto LABEL_34;
  }
  uint64_t v7 = v6(v3, &v39);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v8 = v39;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CMTime v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v10 + 24);
  if (!v11) {
    goto LABEL_34;
  }
  uint64_t v7 = v11(v8, &v38);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v12 = v38;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = *(uint64_t (**)(CFTypeRef, CMTime *))(v14 + 48);
  if (!v15) {
    goto LABEL_34;
  }
  uint64_t v7 = v15(v12, &v36);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v16 = v39;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v18 + 32);
  if (!v19) {
    goto LABEL_34;
  }
  uint64_t v7 = v19(v16, &v37);
  if (v7) {
    goto LABEL_42;
  }
  CFTypeRef v20 = v37;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFRange v23 = *(uint64_t (**)(CFTypeRef, CMTime *))(v22 + 48);
  if (!v23) {
    goto LABEL_34;
  }
  uint64_t v7 = v23(v20, &v35);
  if (v7)
  {
LABEL_42:
    uint64_t v28 = v7;
    goto LABEL_35;
  }
  CFTypeRef v24 = v37;
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v26 = v25 ? v25 : 0;
  uint64_t v27 = *(uint64_t (**)(CFTypeRef, CMTime *))(v26 + 56);
  if (!v27)
  {
LABEL_34:
    uint64_t v28 = 4294954514;
    goto LABEL_35;
  }
  uint64_t v7 = v27(v24, &v34);
  if (v7) {
    goto LABEL_42;
  }
  if ((v34.flags & 0x1D) == 1)
  {
    CMTime lhs = v35;
    CMTime rhs = v34;
    CMTimeAdd(&start, &lhs, &rhs);
    CMTime v35 = start;
  }
  CMTime start = v36;
  CMTime lhs = v35;
  CMTimeRangeFromTimeToTime(&v30, &start, &lhs);
  uint64_t v28 = 0;
  *a2 = CMTimeRangeCopyAsDictionary(&v30, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
LABEL_35:
  if (v38) {
    CFRelease(v38);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v39) {
    CFRelease(v39);
  }
  return v28;
}

uint64_t ProduceAssetTrackNonDroppableFrameRateProperty(uint64_t a1, CFNumberRef *a2)
{
  CMTime v51 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CFTypeRef v49 = 0;
  CFTypeRef v50 = 0;
  memset(&v48, 0, sizeof(v48));
  CMTimeMake(&v48, 2, 1);
  float valuePtr = 0.0;
  if (!a2) {
    goto LABEL_52;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || !*(void *)(a1 + 24)) {
    goto LABEL_52;
  }
  cf.CMTimeValue value = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(v4);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v8 + 48);
  if (v9) {
    v9(FigBaseObject, @"Identifier", v5, &cf);
  }
  int v10 = FigCFEqual();
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (!v10)
  {
LABEL_52:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_53;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v13 + 32);
  if (!v14) {
    goto LABEL_46;
  }
  uint64_t v15 = v14(v11, &v50);
  if (v15) {
    goto LABEL_53;
  }
  CFTypeRef v16 = v50;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v18 = v17 ? v17 : 0;
  int v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v18 + 24);
  if (!v19)
  {
LABEL_46:
    uint64_t v40 = 4294954514;
    goto LABEL_47;
  }
  uint64_t v15 = v19(v16, &v49);
  if (!v15)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 1;
    while (1)
    {
      uint64_t v22 = v20;
      uint64_t v23 = v21;
      memset(&cf, 0, sizeof(cf));
      unsigned __int8 v45 = 0;
      uint64_t v44 = 0;
      CFTypeRef v24 = v49;
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v26 = v25 ? v25 : 0;
      uint64_t v27 = *(uint64_t (**)(CFTypeRef, void, void, void, unsigned __int8 *))(v26 + 64);
      if (!v27) {
        goto LABEL_46;
      }
      uint64_t v15 = v27(v24, 0, 0, 0, &v45);
      if (v15) {
        break;
      }
      int v28 = v45;
      if (v45) {
        ++v20;
      }
      CFTypeRef v29 = v49;
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v31 = v30 ? v30 : 0;
      uint64_t v32 = *(uint64_t (**)(CFTypeRef, CMTime *))(v31 + 56);
      if (!v32) {
        goto LABEL_46;
      }
      uint64_t v15 = v32(v29, &cf);
      if (v15) {
        break;
      }
      CMTime lhs = v51;
      CMTime v42 = cf;
      CMTimeAdd(&v51, &lhs, &v42);
      CFTypeRef v33 = v49;
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v35 = v34 ? v34 : 0;
      CMTime v36 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v35 + 168);
      if (!v36) {
        goto LABEL_46;
      }
      uint64_t v15 = v36(v33, 1, &v44);
      if (v15) {
        break;
      }
      if (v44 == 1)
      {
        CMTime cf = v51;
        CMTime lhs = v48;
        int32_t v37 = CMTimeCompare(&cf, &lhs);
        uint64_t v21 = v23 + 1;
        if (v37 < 0) {
          continue;
        }
      }
      if (v28) {
        uint64_t v38 = v22 + 1;
      }
      else {
        uint64_t v38 = v22;
      }
      CMTime cf = v51;
      float v39 = (double)(v23 - v38) / CMTimeGetSeconds(&cf);
      float valuePtr = v39;
      uint64_t v40 = 0;
      *a2 = CFNumberCreate(v5, kCFNumberFloat32Type, &valuePtr);
      goto LABEL_47;
    }
  }
LABEL_53:
  uint64_t v40 = v15;
LABEL_47:
  if (v50) {
    CFRelease(v50);
  }
  if (v49) {
    CFRelease(v49);
  }
  return v40;
}

uint64_t ProduceFormatSpecificMetadataAssetTrackProperty(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    return 0;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v6(FigBaseObject, @"FormatSpecificMetadataReader", *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  uint64_t v8 = FigMetadataCopyAllMetadataItems(v7, (uint64_t)cf, a2);
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t ProduceFormatSpecificMetadataFormatAssetTrackProperty(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  v6(FigBaseObject, @"FormatSpecificMetadataReader", *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  uint64_t v8 = FigMetadataReaderGetFigBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v10 + 48);
  if (v12) {
    uint64_t v11 = v12(v8, @"format", v7, a2);
  }
  else {
    uint64_t v11 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

CFIndex ProduceAvailableMetadataFormatsAssetTrackProperty(uint64_t a1, __CFArray **a2)
{
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v5 + 48);
  if (v6)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v8 = v6(FigBaseObject, @"MetadataReaders", *MEMORY[0x1E4F1CF80], &theArray);
    if (v8)
    {
      CFIndex Count = v8;
    }
    else
    {
      if (!theArray)
      {
        CFMutableArrayRef Mutable = 0;
        CFIndex Count = 0;
        goto LABEL_24;
      }
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            CMTimeValue value = 0;
            uint64_t v13 = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v14) {
              uint64_t v15 = v14;
            }
            else {
              uint64_t v15 = 0;
            }
            CFTypeRef v16 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v15 + 48);
            if (v16 && !v16(v13, @"format", v7, &value))
            {
              CFArrayAppendValue(Mutable, value);
              CFRelease(value);
            }
          }
        }
        CFIndex Count = 0;
        if (CFArrayGetCount(Mutable) || !Mutable) {
          goto LABEL_22;
        }
        CFRelease(Mutable);
        CFIndex Count = 0;
      }
    }
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    CFIndex Count = 4294954514;
  }
LABEL_22:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_24:
  *a2 = Mutable;
  return Count;
}

uint64_t ProduceSegmentDataAssetTrackProperty(uint64_t a1, int a2, __CFData **a3)
{
  if (*(unsigned char *)(a1 + 65))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    *(unsigned char *)(a1 + 66) = 1;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);

  return FigTrackReaderCreateSegmentData(v6, v7, a2, a3);
}

CFDictionaryRef ProduceGaplessSourceTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v7.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v7.start.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v7.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  FigGaplessInfoGetTrackGaplessSourceTimeRange(*(void *)(a1 + 16), *(void *)(a1 + 24), &v7);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTimeRange v6 = v7;
  CFDictionaryRef result = CMTimeRangeCopyAsDictionary(&v6, v4);
  *a2 = result;
  return result;
}

uint64_t ProduceTrackReferencesTrackProperty(uint64_t a1, void *a2)
{
  uint64_t v20 = 0;
  CFDictionaryRef theDict = 0;
  CFNumberRef context = 0;
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CMTimeRange v7 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v6 + 48);
  if (v7)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v9 = v7(FigBaseObject, @"TrackReferenceDictionary", *MEMORY[0x1E4F1CF80], &theDict);
    CFDictionaryRef v10 = theDict;
    if (v9) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = theDict == 0;
    }
    if (v11)
    {
      uint64_t v15 = 0;
      if (!theDict) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    int valuePtr = 0;
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeRef v16 = *(void (**)(uint64_t, int *, void))(v14 + 8);
    if (v16) {
      v16(v12, &valuePtr, 0);
    }
    CFNumberRef context = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)SpecificTrackReferenceApplierFunction, &context);
    CFRelease(context);
    uint64_t v15 = v20;
    CFDictionaryRef v10 = theDict;
    if (theDict) {
LABEL_16:
    }
      CFRelease(v10);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v9 = 4294954514;
  }
LABEL_17:
  *a2 = v15;
  return v9;
}

uint64_t ProduceLoudnessInfoTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  int v30 = 0;
  CMTimeValue value = 0;
  CFDictionaryRef theDict = 0;
  CFNumberRef number = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CMTimeRange v7 = *(uint64_t (**)(uint64_t, void, int *))(v6 + 8);
  if (!v7)
  {
    uint64_t v13 = 4294954514;
    goto LABEL_46;
  }
  uint64_t v8 = v7(v4, 0, &v30);
  if (v8) {
    goto LABEL_54;
  }
  if (v30 != 1936684398)
  {
    uint64_t v13 = 0;
    *a2 = 0;
    goto LABEL_46;
  }
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v12 + 48);
  if (v14) {
    v14(FigBaseObject, @"LoudnessInfo", v9, &theDict);
  }
  if (!theDict || !CFDictionaryGetValue(theDict, @"sound check info"))
  {
    uint64_t v15 = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 16));
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v17 = v16 ? v16 : 0;
    uint64_t v18 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(v17 + 48);
    if (v18) {
      v18(v15, @"SoundCheckInfo", v9, &value);
    }
  }
  uint64_t v19 = FigFormatReaderGetFigBaseObject(*(void *)(a1 + 16));
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v21 + 48);
  if (v22) {
    v22(v19, @"iTunesStoreItemKind", v9, &number);
  }
  if (FigCFDictionaryGetCount() <= 0 && !number)
  {
    uint64_t v13 = 0;
    *a2 = theDict;
    CFDictionaryRef theDict = 0;
    goto LABEL_46;
  }
  Mutableuint64_t Copy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_54:
    uint64_t v13 = v8;
    goto LABEL_46;
  }
  CFTypeRef v24 = (__CFDictionary *)MutableCopy;
  if (FigCFDictionaryGetCount() >= 1) {
    CFDictionarySetValue(v24, @"sound check info", value);
  }
  if (number)
  {
    int valuePtr = 0;
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    uint64_t v25 = kFigMediaKind_MusicValue;
    switch(valuePtr)
    {
      case 1:
        goto LABEL_43;
      case 2:
        uint64_t v25 = kFigMediaKind_AudiobookValue;
        goto LABEL_43;
      case 3:
      case 4:
      case 5:
      case 7:
        break;
      case 6:
        uint64_t v25 = kFigMediaKind_MusicVideoValue;
        goto LABEL_43;
      case 8:
        uint64_t v25 = kFigMediaKind_PodcastValue;
        goto LABEL_43;
      case 9:
        uint64_t v25 = kFigMediaKind_MovieValue;
LABEL_43:
        if (*v25) {
          CFDictionarySetValue(v24, @"media kind", *v25);
        }
        break;
      default:
        switch(kFigMediaKind_MusicValue)
        {
          case 0x18u:
            uint64_t v25 = kFigMediaKind_iTunesUValue;
            goto LABEL_43;
          case 0x1Du:
            uint64_t v25 = kFigMediaKind_TVShowValue;
            goto LABEL_43;
          case 0x1Eu:
            uint64_t v25 = kFigMediaKind_AudioAdValue;
            goto LABEL_43;
          case 0x1Fu:
            uint64_t v25 = &kFigMediaKind_VideoAdValue;
            goto LABEL_43;
          default:
            goto LABEL_45;
        }
    }
  }
LABEL_45:
  uint64_t v13 = 0;
  *a2 = v24;
LABEL_46:
  if (value) {
    CFRelease(value);
  }
  if (number) {
    CFRelease(number);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return v13;
}

uint64_t ProduceProtectedStatusTrackProperty(uint64_t a1, CFTypeRef *a2)
{
  CFArrayRef theArray = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v7 + 48);
  uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (!v8)
  {
    uint64_t v10 = 4294954514;
LABEL_16:
    CFTypeRef v26 = 0;
    uint64_t v19 = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v21 + 48);
    if (v22)
    {
      if (v22(v19, @"IndicatesContentProtection", v4, &v26)) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v26 == *v9;
      }
      int v18 = v23;
    }
    else
    {
      int v18 = 0;
    }
    goto LABEL_27;
  }
  uint64_t v10 = v8(FigBaseObject, @"TrackFormatDescriptionArray", v4, &theArray);
  if (v10) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = theArray == 0;
  }
  if (v11) {
    goto LABEL_16;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    uint64_t v10 = 0;
    goto LABEL_16;
  }
  CFIndex v13 = Count;
  CFIndex v14 = 0;
  BOOL v15 = 1;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v14);
    if (FigCPEIsSupportedFormatDescription((uint64_t)ValueAtIndex))
    {
      uint64_t v10 = 0;
      int v18 = 1;
      goto LABEL_27;
    }
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
    if (FigCodecTypeIsProtected(MediaSubType)) {
      break;
    }
    BOOL v15 = ++v14 < v13;
    if (v13 == v14)
    {
      int v18 = 0;
      goto LABEL_35;
    }
  }
  int v18 = 1;
LABEL_35:
  uint64_t v10 = 0;
  if (!v15) {
    goto LABEL_16;
  }
LABEL_27:
  if (theArray) {
    CFRelease(theArray);
  }
  CFTypeRef v24 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  if (v18) {
    CFTypeRef v24 = v9;
  }
  *a2 = CFRetain(*v24);
  return v10;
}

CFTypeRef ProduceUsesAudibleDRMTrackProperty(uint64_t a1, void *a2)
{
  uint64_t v10 = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v5 + 48);
  if (!v6
    || ((v7 = v6(FigBaseObject, @"UsesAudibleDRM", *MEMORY[0x1E4F1CF80], &v10), CFTypeRef result = v10, !v7)
      ? (BOOL v9 = v10 == 0)
      : (BOOL v9 = 1),
        v9))
  {
    CFTypeRef result = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
  }
  *a2 = result;
  return result;
}

CFTypeRef ProduceAudibleContentIsAuthorizedTrackProperty(uint64_t a1, void *a2)
{
  uint64_t v10 = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v5 + 48);
  if (!v6
    || ((v7 = v6(FigBaseObject, @"AudibleContentIsAuthorized", *MEMORY[0x1E4F1CF80], &v10), CFTypeRef result = v10, !v7)
      ? (BOOL v9 = v10 == 0)
      : (BOOL v9 = 1),
        v9))
  {
    CFTypeRef result = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
  }
  *a2 = result;
  return result;
}

CFDictionaryRef ProduceMinSampleDurationTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v6 + 48);
  if (!v7 || (CFDictionaryRef result = (CFDictionaryRef)v7(FigBaseObject, @"MinSampleDuration", v3, a2), result) || !*a2)
  {
    CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CFDictionaryRef result = CMTimeCopyAsDictionary(&v9, v3);
    *a2 = result;
  }
  return result;
}

CFNumberRef ProduceAlternateGroupIDTrackPropertyByKey(uint64_t a1, uint64_t a2, CFNumberRef *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CMTime v9 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(v8 + 48);
  if (!v9 || (CFNumberRef result = (CFNumberRef)v9(FigBaseObject, a2, v5, a3), result) || !*a3)
  {
    __int16 valuePtr = 0;
    CFNumberRef result = CFNumberCreate(v5, kCFNumberSInt16Type, &valuePtr);
    *a3 = result;
  }
  return result;
}

CFNumberRef ProduceAssetTrackCameraRollValidationProperty(uint64_t a1, CFNumberRef *a2)
{
  int valuePtr = ProduceAssetTrackValidationResult(a1, @"validationCriteria_CameraRoll", 0);
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef ProduceAssetTrack_MediaPlaybackValidationProperty(uint64_t a1, CFNumberRef *a2)
{
  int valuePtr = ProduceAssetTrackValidationResult(a1, @"validationCriteria_MediaPlayback", 0);
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef ProduceAssetTrack_MediaDecodingValidationProperty(uint64_t a1, CFNumberRef *a2)
{
  int valuePtr = ProduceAssetTrackValidationResult(a1, @"validationCriteria_MediaDecoding", 0);
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  *a2 = result;
  return result;
}

uint64_t ProduceAssetTrack_ContainsWideColor(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFArrayRef theArray = 0;
  int v19 = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, int *))(v7 + 8);
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = v8(v5, 0, &v19);
  if (!v9)
  {
    if (v19 != 1986618469)
    {
LABEL_17:
      uint64_t v17 = 0;
      goto LABEL_19;
    }
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFIndex v13 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v12 + 48);
    if (v13)
    {
      uint64_t v9 = v13(FigBaseObject, @"TrackFormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
      if (!v9)
      {
        if (!theArray)
        {
          uint64_t v17 = 0;
          goto LABEL_21;
        }
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          CFIndex v16 = 0;
          while (1)
          {
            CFArrayGetValueAtIndex(theArray, v16);
            if (FigVideoFormatDescriptionContainsWideColor()) {
              break;
            }
            if (v15 == ++v16) {
              goto LABEL_17;
            }
          }
          uint64_t v17 = 0;
          uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFD0];
          goto LABEL_19;
        }
        goto LABEL_17;
      }
      goto LABEL_24;
    }
LABEL_18:
    uint64_t v17 = 4294954514;
    goto LABEL_19;
  }
LABEL_24:
  uint64_t v17 = v9;
LABEL_19:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_21:
  *a2 = CFRetain(v4);
  return v17;
}

uint64_t ProduceAssetTrackLatentBaseDecodeTimeStampOfFirstTrackFragment(uint64_t a1, void *a2)
{
  uint64_t v9 = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(a1 + 24));
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t *))(v5 + 48);
  if (v6)
  {
    uint64_t result = v6(FigBaseObject, @"LatentBaseDecodeTimeStampOfFirstTrackFragment", *MEMORY[0x1E4F1CF80], &v9);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t result = 4294954514;
  }
  *a2 = v8;
  return result;
}

void SpecificTrackReferenceApplierFunction(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  int64_t v6 = CFArrayGetCount(theArray) & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 1)
  {
    CFMutableArrayRef Mutable = 0;
    CFIndex v8 = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      if (CFEqual(*(CFTypeRef *)a3, ValueAtIndex))
      {
        if (!Mutable) {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, v10);
        }
        uint64_t v12 = CFArrayGetValueAtIndex(theArray, v8 + 1);
        CFArrayAppendValue(Mutable, v12);
      }
      v8 += 2;
    }
    while (v8 < v6);
    if (Mutable)
    {
      CFIndex v13 = *(__CFDictionary **)(a3 + 8);
      if (!v13)
      {
        CFIndex v13 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(a3 + 8) = v13;
      }
      CFDictionaryAddValue(v13, a1, Mutable);
      CFRelease(Mutable);
    }
  }
}

uint64_t FigCodecTypeIsProtected(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1902207794)
  {
    if (a1 <= 1685220712)
    {
      if (a1 <= 1667524656)
      {
        if (a1 <= 1667326823)
        {
          if (a1 == 1633771875 || a1 == 1667312947) {
            return result;
          }
          unsigned __int16 v4 = 24931;
        }
        else if (a1 > 1667330146)
        {
          if (a1 == 1667330147) {
            return result;
          }
          unsigned __int16 v4 = 30307;
        }
        else
        {
          if (a1 == 1667326824) {
            return result;
          }
          unsigned __int16 v4 = 25456;
        }
        int v6 = v4 | 0x63610000;
        goto LABEL_81;
      }
      if (a1 <= 1667656802)
      {
        if (a1 != 1667524657 && a1 != 1667574579)
        {
          int v6 = 1667575091;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1668047202)
      {
        if (a1 == 1668047203) {
          return result;
        }
        int v6 = 1668641633;
      }
      else
      {
        if (a1 == 1667656803) {
          return result;
        }
        int v6 = 1667790435;
      }
LABEL_81:
      if (a1 == v6) {
        return result;
      }
      return 0;
    }
    if (a1 <= 1885430578)
    {
      if (a1 <= 1701733237)
      {
        if (a1 != 1685220713 && a1 != 1700886115)
        {
          int v6 = 1701733217;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1882599479)
      {
        if (a1 == 1882599480) {
          return result;
        }
        int v6 = 1885430115;
      }
      else
      {
        if (a1 == 1701733238) {
          return result;
        }
        int v6 = 1869117027;
      }
      goto LABEL_81;
    }
    if (a1 <= 1885547314)
    {
      unsigned int v8 = a1 - 1885430579;
      if (v8 > 0x3D || ((1 << v8) & 0x2020000000000001) == 0) {
        return 0;
      }
      return result;
    }
    if (a1 <= 1886745440)
    {
      if (a1 == 1885547315) {
        return result;
      }
      int v6 = 1885692723;
      goto LABEL_81;
    }
    if (a1 == 1886745441) {
      return result;
    }
    unsigned __int16 v5 = 24931;
LABEL_78:
    int v6 = v5 | 0x71610000;
    goto LABEL_81;
  }
  if (a1 <= 1902667125)
  {
    if (a1 > 1902324530)
    {
      if (a1 <= 1902405732)
      {
        if (a1 == 1902324531 || a1 == 1902403958) {
          return result;
        }
        unsigned __int16 v7 = 26673;
      }
      else
      {
        if (a1 > 1902469938)
        {
          if (a1 == 1902469939) {
            return result;
          }
          int v6 = 1902537827;
          goto LABEL_81;
        }
        if (a1 == 1902405733) {
          return result;
        }
        unsigned __int16 v7 = 28024;
      }
      int v6 = v7 | 0x71640000;
      goto LABEL_81;
    }
    if ((a1 - 1902207795) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0
      || (a1 - 1902212657) <= 0x34 && ((1 << (a1 - 49)) & 0x14000000000001) != 0)
    {
      return result;
    }
    unsigned __int16 v5 = 28771;
    goto LABEL_78;
  }
  if (a1 <= 2053202738)
  {
    if (a1 <= 1902998903)
    {
      if (a1 != 1902667126 && a1 != 1902671459)
      {
        int v6 = 1902928227;
        goto LABEL_81;
      }
      return result;
    }
    if (a1 > 1903587384)
    {
      if (a1 == 1903587385) {
        return result;
      }
      unsigned __int16 v3 = 24931;
      goto LABEL_71;
    }
    if (a1 == 1902998904) {
      return result;
    }
    int v6 = 1903522657;
    goto LABEL_81;
  }
  if (a1 > 2053319474)
  {
    if (a1 > 2053923170)
    {
      if (a1 == 2053923171) {
        return result;
      }
      int v6 = 2054517601;
    }
    else
    {
      if (a1 == 2053319475) {
        return result;
      }
      int v6 = 2053464883;
    }
    goto LABEL_81;
  }
  if ((a1 - 2053202739) > 0x3D || ((1 << (a1 - 51)) & 0x2020000000000001) == 0)
  {
    unsigned __int16 v3 = 30307;
LABEL_71:
    int v6 = v3 | 0x7A610000;
    goto LABEL_81;
  }
  return result;
}

void BuildPropertyDependencyDictionary()
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  sAssetPropertyDependencies = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  values = @"PreferredRate";
  uint64_t v1 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFArrayRef v2 = CFArrayCreate(v0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"PreferredRate", v2);
  CFRelease(v2);
  values = @"PreferredVolume";
  CFArrayRef v3 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"PreferredVolume", v3);
  CFRelease(v3);
  values = @"MovieMatrix";
  CFArrayRef v4 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"PreferredTransform", v4);
  CFRelease(v4);
  values = @"TrackReferenceDictionary";
  CFArrayRef v5 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_TrackReferences", v5);
  CFRelease(v5);
  values = @"AlternateGroupArray";
  CFArrayRef v6 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_AlternateTrackGroups", v6);
  CFRelease(v6);
  values = @"MetadataReaders";
  uint64_t v65 = @"AlternateGroupArray";
  CFArrayRef v7 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_AvailableMetadataFormats", v7);
  CFRelease(v7);
  values = @"QuickTimeMetadataReader";
  uint64_t v65 = @"iTunesMetadataReader";
  CFTypeRef v66 = @"QuickTimeUserDataReader";
  uint64_t v67 = @"ISOUserDataReader";
  CFArrayRef v8 = CFArrayCreate(v0, (const void **)&values, 4, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_CommonMetadata", v8);
  CFRelease(v8);
  values = @"QuickTimeUserDataReader";
  CFArrayRef v9 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_QuickTimeUserData", v9);
  CFRelease(v9);
  values = @"iTunesMetadataReader";
  CFArrayRef v10 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_iTunesMetadata", v10);
  CFRelease(v10);
  values = @"QuickTimeMetadataReader";
  CFArrayRef v11 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_QuickTimeMetadata", v11);
  CFRelease(v11);
  values = @"ISOUserDataReader";
  CFArrayRef v12 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_ISOUserData", v12);
  CFRelease(v12);
  values = @"FormatSpecificMetadataReader";
  CFArrayRef v13 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_FormatSpecificMetadata", v13);
  CFRelease(v13);
  values = @"FormatDescriptionsChanged";
  CFArrayRef v14 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_ProtectedStatus", v14);
  CFRelease(v14);
  values = @"AlternateGroupArray";
  uint64_t v65 = @"TrackReferenceDictionary";
  CFArrayRef v15 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"MediaSelectionArray", v15);
  CFRelease(v15);
  values = @"FormatDescriptionsChanged";
  uint64_t v65 = @"EnabledTracksChanged";
  CFArrayRef v16 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_MediaPlaybackValidation", v16);
  CFRelease(v16);
  values = @"FormatDescriptionsChanged";
  uint64_t v65 = @"EnabledTracksChanged";
  CFArrayRef v17 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_CameraRollValidation", v17);
  CFRelease(v17);
  values = @"ContainsChapters";
  CFArrayRef v18 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_ChapterGroupInfo", v18);
  CFRelease(v18);
  values = @"FragmentCount";
  CFArrayRef v19 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, @"assetProperty_FragmentCount", v19);
  CFRelease(v19);
  sAssetTrackPropertyDependencies = (uint64_t)CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  values = @"TrackFormatDescriptionArray";
  CFArrayRef v20 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"FormatDescriptionArray", v20);
  CFRelease(v20);
  values = @"TrackEnabled";
  CFArrayRef v21 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"IsEnabled", v21);
  CFRelease(v21);
  values = @"TrackIsSelfContained";
  CFArrayRef v22 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"IsSelfContained", v22);
  CFRelease(v22);
  values = @"UneditedNumDataBytes";
  CFArrayRef v23 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"TotalSampleDataLength", v23);
  CFRelease(v23);
  values = @"UneditedTrackDuration";
  uint64_t v65 = @"EditCursorService";
  CFArrayRef v24 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"TimeRange", v24);
  CFRelease(v24);
  values = @"UneditedSampleCount";
  CFArrayRef v25 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"MediaPresentationTimeRange", v25);
  CFRelease(v25);
  values = @"UneditedSampleCount";
  CFArrayRef v26 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"MediaDecodeTimeRange", v26);
  CFRelease(v26);
  values = @"EstimatedDataRate";
  CFArrayRef v27 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"EstimatedDataRate", v27);
  CFRelease(v27);
  values = @"PeakDataRate";
  CFArrayRef v28 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"PeakDataRate", v28);
  CFRelease(v28);
  values = @"UneditedSampleCount";
  CFArrayRef v29 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"UneditedSampleCount", v29);
  CFRelease(v29);
  values = @"HasRollInformation";
  CFArrayRef v30 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"HasRollInformation", v30);
  CFRelease(v30);
  values = @"TrackLanguageCode";
  CFArrayRef v31 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"LanguageCode", v31);
  CFRelease(v31);
  values = @"QuickTimeUserDataReader";
  uint64_t v65 = @"ISOUserDataReader";
  CFTypeRef v66 = @"TrackExcludeFromAutoSelection";
  CFArrayRef v32 = CFArrayCreate(v0, (const void **)&values, 3, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"MediaCharacteristicArray", v32);
  CFRelease(v32);
  values = @"ExtendedLanguageTagString";
  CFArrayRef v33 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"ExtendedLanguageTag", v33);
  CFRelease(v33);
  values = @"CleanApertureDimensions";
  uint64_t v65 = @"TrackDimensions";
  CFArrayRef v34 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"NaturalSize", v34);
  CFRelease(v34);
  values = @"TrackDimensions";
  CFArrayRef v35 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"TrackDimensions", v35);
  CFRelease(v35);
  values = @"CleanApertureDimensions";
  CFArrayRef v36 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"CleanApertureDimensions", v36);
  CFRelease(v36);
  values = @"ProductionApertureDimensions";
  CFArrayRef v37 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"ProductionApertureDimensions", v37);
  CFRelease(v37);
  values = @"EncodedPixelsDimensions";
  CFArrayRef v38 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"EncodedPixelsDimensions", v38);
  CFRelease(v38);
  values = @"TrackMatrix";
  CFArrayRef v39 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"PreferredTransform", v39);
  CFRelease(v39);
  values = @"NominalFrameRate";
  CFArrayRef v40 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"NominalFrameRate", v40);
  CFRelease(v40);
  values = @"QuickTimeMetadataReader";
  CFArrayRef v41 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_QuickTimeMetadata", v41);
  CFRelease(v41);
  values = @"QuickTimeUserDataReader";
  CFArrayRef v42 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_QuickTimeUserData", v42);
  CFRelease(v42);
  values = @"ISOUserDataReader";
  CFArrayRef v43 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_ISOUserData", v43);
  CFRelease(v43);
  values = @"QuickTimeMetadataReader";
  uint64_t v65 = @"QuickTimeUserDataReader";
  CFTypeRef v66 = @"ISOUserDataReader";
  uint64_t v67 = @"FormatSpecificMetadataReader";
  CFArrayRef v44 = CFArrayCreate(v0, (const void **)&values, 4, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"CommonMetadata", v44);
  CFRelease(v44);
  values = @"FormatSpecificMetadataReader";
  CFArrayRef v45 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_FormatSpecificMetadata", v45);
  CFRelease(v45);
  values = @"FormatSpecificMetadataReader";
  CFArrayRef v46 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_FormatSpecificMetadataFormat", v46);
  CFRelease(v46);
  values = @"MetadataReaders";
  CFArrayRef v47 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"AvailableMetadataFormats", v47);
  CFRelease(v47);
  values = @"TrackExcludeFromAutoSelection";
  CFArrayRef v48 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"IsExcludedFromAutoselection", v48);
  CFRelease(v48);
  values = @"Volume";
  CFArrayRef v49 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"Volume", v49);
  CFRelease(v49);
  values = @"TrackLayer";
  CFArrayRef v50 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"Layer", v50);
  CFRelease(v50);
  values = @"TrackReferencesChanged";
  CFArrayRef v51 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_TrackReferences", v51);
  CFRelease(v51);
  values = @"TrackFormatDescriptionArray";
  CFArrayRef v52 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_ProtectedStatus", v52);
  CFRelease(v52);
  values = @"MinSampleDuration";
  CFArrayRef v53 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"MinSampleDuration", v53);
  CFRelease(v53);
  values = @"AlternateGroupID";
  CFArrayRef v54 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"AlternateGroupID", v54);
  CFRelease(v54);
  values = @"DefaultAlternateGroupID";
  CFArrayRef v55 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"DefaultAlternateGroupID", v55);
  CFRelease(v55);
  values = @"ProvisionalAlternateGroupID";
  CFArrayRef v56 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"ProvisionalAlternateGroupID", v56);
  CFRelease(v56);
  values = @"TrackQTLoadSettings";
  CFArrayRef v57 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"LoadSettings", v57);
  CFRelease(v57);
  values = @"SampleGroupDescriptions";
  CFArrayRef v58 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"SampleGroupDescriptions", v58);
  CFRelease(v58);
  values = @"HEVCTemporalLevelInfoCombinations";
  CFArrayRef v59 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"HEVCTemporalLevelInfoCombinations", v59);
  CFRelease(v59);
  values = @"HEVCSyncSampleNALUnitTypes";
  CFArrayRef v60 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"HEVCSyncSampleNALUnitTypes", v60);
  CFRelease(v60);
  values = @"TrackFormatDescriptionArray";
  CFArrayRef v61 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_CameraRollValidation", v61);
  CFRelease(v61);
  values = @"TrackFormatDescriptionArray";
  CFArrayRef v62 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_MediaPlaybackValidation", v62);
  CFRelease(v62);
  values = @"TrackFormatDescriptionArray";
  CFArrayRef v63 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, @"assetTrackProperty_MediaDecodingValidation", v63);
  CFRelease(v63);
}

void ReviseSegmentDataAssetTrackProperties(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x19970C720](a1 + 5);
  if (v2)
  {
    CFArrayRef v3 = (void *)v2;
    CFTypeRef cf = 0;
    if (!FigTrackReaderCreateSegmentData(a1[2], a1[3], 0, (__CFData **)&cf))
    {
      ReviseProperty(v3, @"assetTrackProperty_EditSegmentData", cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
    if (!FigTrackReaderCreateSegmentData(a1[2], a1[3], 1, (__CFData **)&cf))
    {
      ReviseProperty(v3, @"assetTrackProperty_PresentationSegmentData", cf);
      if (cf) {
        CFRelease(cf);
      }
    }
    CFRelease(v3);
  }
  CFRelease(a1);
}

void __AssetTrackMutationMonitoringNotificationCallback_block_invoke(CFTypeRef *a1)
{
  CFTypeRef context = a1[4];
  long long v3 = *(_OWORD *)(a1 + 5);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 72), (CFDictionaryApplierFunction)AssessMonitoredAssetTrackPropertyChange, &context);
  CFRelease(a1[4]);
  CFRelease(a1[5]);
  CFRelease(a1[6]);
}

void AssessMonitoredAssetTrackPropertyChange(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)a3, ValueAtIndex)) {
        break;
      }
      if (v7 == ++v8) {
        return;
      }
    }
    CFArrayRef v10 = *(void **)(a3 + 16);
    if (!ProduceAssetTrackProperty(*(void *)(a3 + 8), a1)) {
      ReviseProperty(v10, a1, 0);
    }
  }
}

uint64_t EnsureChapterGroupInfoCreated(void *a1, uint64_t a2)
{
  uint64_t v15 = 0;
  CFArrayRef v16 = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    CFArrayRef v11 = 0;
    uint64_t v4 = 4294954511;
    goto LABEL_21;
  }
  if (*(unsigned char *)(a2 + 316)) {
    return *(unsigned int *)(a2 + 320);
  }
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (v5) {
    goto LABEL_30;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v5 = FigSignalErrorAt();
LABEL_30:
    uint64_t v4 = v5;
    CFArrayRef v11 = 0;
    goto LABEL_21;
  }
  CFIndex v7 = Mutable;
  if (!FCSupport_GetListOfChapterTitleTrackIDs(*(void *)(a2 + 240), &v15, (int **)&v16, 0))
  {
    if (v15 >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = AddChapterTrackInfoToArray(a2, *((unsigned int *)v16 + v8), @"title", v7);
        if (v9) {
          goto LABEL_27;
        }
      }
      while (++v8 < v15);
    }
    free(v16);
    uint64_t v15 = 0;
    CFArrayRef v16 = 0;
  }
  if (!FCSupport_GetListOfChapterImageTrackIDs(*(void *)(a2 + 240), &v15, (int **)&v16, 0))
  {
    if (v15 >= 1)
    {
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v9 = AddChapterTrackInfoToArray(a2, *((unsigned int *)v16 + v10), @"artwork", v7);
        if (v9) {
          break;
        }
        if (++v10 >= v15) {
          goto LABEL_17;
        }
      }
LABEL_27:
      uint64_t v4 = v9;
      free(v16);
      CFRelease(v7);
      *(unsigned char *)(a2 + 316) = 1;
      *(_DWORD *)(a2 + 320) = v4;
      goto LABEL_22;
    }
LABEL_17:
    free(v16);
    CFArrayRef v16 = 0;
  }
  if (!CFArrayGetCount(v7))
  {
    CFRelease(v7);
    CFIndex v7 = 0;
  }
  uint64_t v4 = 0;
  *(void *)(a2 + 328) = v7;
  CFArrayRef v11 = v16;
LABEL_21:
  free(v11);
  *(unsigned char *)(a2 + 316) = 1;
  *(_DWORD *)(a2 + 320) = v4;
  if (v4)
  {
LABEL_22:
    CFStringRef Error = AssetCopyLoadError(a2, v4);
    int v13 = *(_DWORD *)(a2 + 320);
    goto LABEL_24;
  }
  int v13 = 0;
  CFStringRef Error = 0;
LABEL_24:
  StoreByProduct(a1, @"assetProperty_ChapterGroupInfo", v13, Error, *(const void **)(a2 + 328));
  if (Error) {
    CFRelease(Error);
  }
  return v4;
}

uint64_t AddChapterTrackInfoToArray(uint64_t a1, uint64_t a2, const void *a3, __CFArray *a4)
{
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  CFTypeRef v30 = 0;
  int valuePtr = a2;
  if ((int)a2 <= 0 || !a3 || !a4)
  {
    uint64_t v24 = FigSignalErrorAt();
    CFNumberRef v23 = 0;
    uint64_t v10 = 0;
    goto LABEL_18;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v10 = Mutable;
  if (!Mutable)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_48;
  }
  CFDictionarySetValue(Mutable, @"chapterGroupKey_Type", a3);
  uint64_t v11 = *(void *)(a1 + 240);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFArrayRef v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v13 + 56);
  if (!v14) {
    goto LABEL_17;
  }
  uint64_t v15 = v14(v11, a2, &cf, 0);
  if (v15)
  {
LABEL_48:
    uint64_t v24 = v15;
    CFNumberRef v23 = 0;
    goto LABEL_18;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v18 = v17 ? v17 : 0;
  CFArrayRef v19 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v18 + 48);
  if (!v19)
  {
LABEL_17:
    CFNumberRef v23 = 0;
    uint64_t v24 = 4294954514;
    goto LABEL_18;
  }
  uint64_t v15 = v19(FigBaseObject, @"TrackLanguageCode", v8, &value);
  if (v15) {
    goto LABEL_48;
  }
  CFDictionarySetValue(v10, @"chapterGroupKey_Language", value);
  uint64_t v20 = FigTrackReaderGetFigBaseObject(cf);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFArrayRef v26 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v22 + 48);
  if (v26)
  {
    v26(v20, @"ExtendedLanguageTagString", v8, &v30);
    if (v30) {
      CFDictionarySetValue(v10, @"chapterGroupKey_ExtendedLanguage", v30);
    }
  }
  CFNumberRef v23 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
  if (v23) {
    CFDictionarySetValue(v10, @"chapterGroupKey_TrackID", v23);
  }
  if (CFEqual(a3, @"title"))
  {
    MutableChapterTitleTimesArrayForTracCFIndex k = FCSupport_CreateMutableChapterTitleTimesArrayForTrack(*(void *)(a1 + 240), a2, 0, (const __CFArray **)&v29);
  }
  else if (CFEqual(a3, @"artwork"))
  {
    MutableChapterTitleTimesArrayForTracCFIndex k = FCSupport_CreateMutableChapterImageTimesArrayForTrack(*(void *)(a1 + 240), a2, (const __CFArray **)&v29);
  }
  else
  {
    MutableChapterTitleTimesArrayForTracCFIndex k = FigSignalErrorAt();
  }
  uint64_t v24 = MutableChapterTitleTimesArrayForTrack;
  if (!MutableChapterTitleTimesArrayForTrack)
  {
    if (v29) {
      CFDictionarySetValue(v10, @"chapterGroupKey_PerChapterInfo", v29);
    }
    CFArrayAppendValue(a4, v10);
    uint64_t v24 = 0;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (value) {
    CFRelease(value);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v24;
}

void PerformCompleteChapterJob(CFTypeRef *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeRef v9 = 0;
  uint64_t v11 = 0;
  keys[0] = @"assetPayload_ChapterGroupIndex";
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, a1 + 3);
  keys[1] = @"assetPayload_ChapterIndex";
  CFTypeRef cf = CFNumberCreate(v2, kCFNumberSInt32Type, (char *)a1 + 28);
  keys[2] = @"assetPayload_ChapterCount";
  CFTypeRef v8 = CFNumberCreate(v2, kCFNumberSInt32Type, a1 + 4);
  if (*(_DWORD *)a1)
  {
    uint64_t v11 = @"assetPayload_Result";
    CFTypeRef v3 = CFNumberCreate(v2, kCFNumberSInt32Type, a1);
  }
  else
  {
    uint64_t v11 = @"assetPayload_ChapterData";
    CFTypeRef v3 = a1[5];
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
  }
  CFTypeRef v9 = v3;
  CFDictionaryRef v4 = CFDictionaryCreate(v2, (const void **)keys, (const void **)&values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v4) {
    CFRelease(v4);
  }
  if (values) {
    CFRelease(values);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  CFTypeRef v5 = a1[5];
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(a1[1]);
  CFRelease(a1[2]);
  free(a1);
}

void MultiTrackBatchNotificationCallback(int a1, uint64_t a2, int a3, const void *a4, CFDictionaryRef theDict)
{
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"assetPayload_BatchID");
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  CFTypeRef v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 56), a4);
  if (v8)
  {
    if (*v8 == valuePtr) {
      dispatch_group_leave(*(dispatch_group_t *)(a2 + 40));
    }
  }
}

uint64_t StreamingAssetCopyHLSAlternates(uint64_t a1, void *a2)
{
  CFDictionaryRef theDict = 0;
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v5 + 48);
  if (!v6)
  {
    unsigned int v8 = -12782;
LABEL_13:
    if (v8 >> 1 == 2147477256) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v8;
    }
    goto LABEL_16;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  unsigned int v8 = v6(FigBaseObject, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], &theDict);
  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = theDict == 0;
  }
  if (v9) {
    goto LABEL_13;
  }
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"FBPAIK_FigAlternateArray");
  uint64_t v11 = FigAlternateContinuousFramesOnlyFilterCreate(v7, &cf);
  if (v11) {
    goto LABEL_32;
  }
  CFTypeRef v12 = cf;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(CFTypeRef, const void *, CFTypeRef *))(v14 + 24);
  if (!v17)
  {
    uint64_t v15 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v11 = v17(v12, Value, &v21);
  if (v11)
  {
LABEL_32:
    uint64_t v15 = v11;
  }
  else if (*a2)
  {
    uint64_t v15 = 0;
  }
  else
  {
    CFTypeRef v18 = v21;
    if (v21) {
      CFTypeRef v18 = CFRetain(v21);
    }
    uint64_t v15 = 0;
    *a2 = v18;
  }
LABEL_16:
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v15;
}

uint64_t StreamingAssetCopyMaximumVideoResolution(uint64_t a1, CFDictionaryRef *a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFArrayRef v6 = *(unsigned int (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v5 + 48);
  if (v6 && !v6(FigBaseObject, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], &theDict) && theDict)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"FBPAIK_FigAlternateArray");
    if (!Value) {
      goto LABEL_16;
    }
    CFArrayRef v8 = Value;
    CFIndex Count = CFArrayGetCount(Value);
    if (Count < 1) {
      goto LABEL_16;
    }
    int v10 = 0;
    CGFloat v11 = *MEMORY[0x1E4F1DB30];
    CGFloat v12 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    unint64_t v13 = Count + 1;
    double v14 = 0.0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v13 - 2);
      double Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
      if (Resolution * v17 > v14)
      {
        int v10 = 1;
        double v14 = Resolution * v17;
        CGFloat v11 = Resolution;
        CGFloat v12 = v17;
      }
      --v13;
    }
    while (v13 > 1);
    if (v10)
    {
      v21.CGFloat width = v11;
      v21.CGFloat height = v12;
      uint64_t v18 = 0;
      *a2 = CGSizeCreateDictionaryRepresentation(v21);
    }
    else
    {
LABEL_16:
      uint64_t v18 = 4294954513;
    }
  }
  else
  {
    uint64_t v18 = FigSignalErrorAt();
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return v18;
}

uint64_t StreamingAssetCopyAvailableVideoDynamicRanges(uint64_t a1, CFMutableArrayRef *a2)
{
  CFDictionaryRef theDict = 0;
  if (a2)
  {
    if (a1)
    {
      uint64_t v4 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (!Mutable)
      {
        uint64_t v12 = FigSignalErrorAt();
        goto LABEL_18;
      }
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(a1);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef *))(v8 + 48);
      if (v9)
      {
        uint64_t v10 = v9(FigBaseObject, 0x1EE53E2B8, v4, &theDict);
        if (!v10)
        {
          if (!theDict)
          {
            uint64_t v12 = 0;
            *a2 = Mutable;
            return v12;
          }
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"FBPAIK_FigAlternateArray");
          uint64_t v12 = (uint64_t)Value;
          if (Value)
          {
            CFIndex Count = CFArrayGetCount(Value);
            if (Count >= 1)
            {
              unint64_t v14 = Count + 1;
              do
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v12, v14 - 2);
                VideoQualityIndeCGFloat x = FigAlternateGetVideoQualityIndex((uint64_t)ValueAtIndex);
                FigAlternateStreamVideoQualityIndexToCMVideoDynamicRange(VideoQualityIndex);
                FigCFArrayAppendInt32();
                --v14;
              }
              while (v14 > 1);
            }
            uint64_t v12 = 0;
          }
LABEL_18:
          CFDictionaryRef v17 = theDict;
          *a2 = Mutable;
          if (v17) {
            CFRelease(v17);
          }
          return v12;
        }
        uint64_t v12 = v10;
      }
      else
      {
        uint64_t v12 = 4294954514;
      }
      CFRelease(Mutable);
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    CFMutableArrayRef Mutable = 0;
    goto LABEL_18;
  }

  return FigSignalErrorAt();
}

uint64_t StreamingAssetCopyNominalVideoFrameRate(uint64_t a1, uint64_t a2)
{
  if (a2 && a1)
  {
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(a1);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v6)
    {
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      return v6(FigBaseObject, 0x1EE53EC58, v7, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t StreamingAssetCopySessionKeys(uint64_t a1, CFArrayRef *a2)
{
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t, void, CFArrayRef *))(v5 + 48);
  if (v6)
  {
    unsigned int v7 = v6(FigBaseObject, 0x1EE53EB18, *MEMORY[0x1E4F1CF80], &theArray);
    CFArrayRef v8 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFArrayRef v8 = theArray;
      if (!Count)
      {
        if (theArray)
        {
          CFRelease(theArray);
          CFArrayRef v8 = 0;
        }
      }
    }
  }
  else
  {
    CFArrayRef v8 = 0;
    unsigned int v7 = -12782;
  }
  if (v7 >> 1 == 2147477256) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v7;
  }
  *a2 = v8;
  return v10;
}

uint64_t ProduceDurationProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (!result)
  {
    if (*(unsigned char *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(unsigned char *)(a2 + 457) = 1;
    }
    return ObtainDurationPropertyValue(a2, a3);
  }
  return result;
}

uint64_t ProduceLyricsProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"Lyrics", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

uint64_t ProducePreferredRateProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (!result)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v8 + 48);
    if (v9)
    {
      uint64_t v10 = *MEMORY[0x1E4F1CF80];
      return v9(FigBaseObject, @"PreferredRate", v10, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t ProducePreferredVolumeProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (!result)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v8 + 48);
    if (v9)
    {
      uint64_t v10 = *MEMORY[0x1E4F1CF80];
      return v9(FigBaseObject, @"PreferredVolume", v10, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t ProducePreferredTransformProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (!result)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v8 + 48);
    if (v9)
    {
      uint64_t v10 = *MEMORY[0x1E4F1CF80];
      return v9(FigBaseObject, @"MovieMatrix", v10, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t ProduceTrackReferencesProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v11 = 0;
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (result)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t *))(v8 + 48);
    if (v9)
    {
      uint64_t result = v9(FigBaseObject, @"TrackReferenceDictionary", *MEMORY[0x1E4F1CF80], &v11);
      uint64_t v10 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t result = 4294954514;
    }
  }
  *a3 = v10;
  return result;
}

uint64_t ProduceAlternateTrackGroupsProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v11 = 0;
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (result)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t *))(v8 + 48);
    if (v9)
    {
      uint64_t result = v9(FigBaseObject, @"AlternateGroupArray", *MEMORY[0x1E4F1CF80], &v11);
      uint64_t v10 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t result = 4294954514;
    }
  }
  *a3 = v10;
  return result;
}

uint64_t ProducePreciseDurationAndTimingProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = 0;
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (result)
  {
    CFTypeRef v10 = 0;
  }
  else
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v8 + 48);
    if (v9)
    {
      uint64_t result = v9(FigBaseObject, @"SampleCursorTimeAccuracyIsExact", *MEMORY[0x1E4F1CF80], &v12);
      CFTypeRef v10 = v12;
      if (result) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v12 == 0;
      }
      if (v11)
      {
        CFTypeRef v10 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
        uint64_t result = 0;
      }
    }
    else
    {
      CFTypeRef v10 = 0;
      uint64_t result = 4294954514;
    }
  }
  *a3 = v10;
  return result;
}

uint64_t ProduceAvailableMetadataFormatsProperty(void *a1, uint64_t a2, __CFArray **a3)
{
  CFArrayRef theArray = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (v5
    || ((uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240)),
         (uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v8 = 0)
      : (uint64_t v8 = v7),
        (BOOL v9 = *(void (**)(uint64_t, __CFString *, void, CFArrayRef *))(v8 + 48)) == 0
     || (CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
         v9(FigBaseObject, @"MetadataReaders", *MEMORY[0x1E4F1CF80], &theArray),
         !theArray)))
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_24;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    uint64_t v12 = Count;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
    if (v12 >= 1)
    {
      for (CFIndex i = 0; i != v12; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        CMTimeValue value = 0;
        uint64_t v16 = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        CFArrayRef v19 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v18 + 48);
        if (v19 && !v19(v16, @"format", v10, &value))
        {
          CFArrayAppendValue(Mutable, value);
          CFRelease(value);
        }
      }
    }
    if (CFArrayGetCount(Mutable) || !Mutable) {
      goto LABEL_21;
    }
    CFRelease(Mutable);
  }
  CFMutableArrayRef Mutable = 0;
LABEL_21:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_24:
  *a3 = Mutable;
  return v5;
}

uint64_t ProduceFormatSpecificMetadataFormatProperty(void *a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (v5) {
    return v5;
  }
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  BOOL v9 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *MEMORY[0x1E4F1CF80];
  v9(FigBaseObject, @"FormatSpecificMetadataReader", *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  uint64_t v11 = FigMetadataReaderGetFigBaseObject(cf);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v13 + 48);
  if (v15) {
    uint64_t v14 = v15(v11, @"format", v10, a3);
  }
  else {
    uint64_t v14 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t ProduceCommonMetadataProperty(void *a1, uint64_t a2, __CFArray **a3)
{
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (!result)
  {
    uint64_t v6 = *(void *)(a2 + 240);
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return FigMetadataCopyMovieCommonMetadata(v6, v7, a3);
  }
  return result;
}

uint64_t ProduceMetadataPropertyFromMetadataReader(void *a1, uint64_t a2, uint64_t a3, __CFArray **a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = EnsureFormatReaderCreated(a1, a2);
  if (v7) {
    return v7;
  }
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v10 + 48);
  if (!v11) {
    return 0;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v11(FigBaseObject, a3, *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (sBuildMetadataFiltersOnce != -1) {
      dispatch_once_f(&sBuildMetadataFiltersOnce, 0, (dispatch_function_t)BuildMetadataFilterDictionaries);
    }
    CFArrayAppendValue(Mutable, (const void *)sUserDataiTunesMetadataFilter);
    CFArrayAppendValue(Mutable, (const void *)sISOUserDataiTunesMetadataFilter);
    if (FigCFEqual() && !*(unsigned char *)(a2 + 609)) {
      CFArrayAppendValue(Mutable, (const void *)sQuickTimeAIMEDataFilter);
    }
    uint64_t v14 = FigMetadataCopyMetadataItemsIf(v12, (uint64_t)cf, (unsigned int (*)(CFDictionaryRef, uint64_t))IsNotOnFilterOutKeyList, (uint64_t)Mutable, a4);
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
  }
  uint64_t v15 = v14;
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

uint64_t ProduceChapterGroupInfoProperty(void *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v5 = EnsureChapterGroupInfoCreated(a1, a2);
  if (!v5)
  {
    CFArrayRef v6 = *(const __CFArray **)(a2 + 328);
    if (v6) {
      CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
    }
    else {
      CFArrayRef Copy = 0;
    }
    *a3 = Copy;
  }
  return v5;
}

uint64_t ProduceCreationDateProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v11 = 0;
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (result)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t *))(v8 + 48);
    if (v9)
    {
      uint64_t result = v9(FigBaseObject, @"CreationDate", *MEMORY[0x1E4F1CF80], &v11);
      uint64_t v10 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t result = 4294954514;
    }
  }
  *a3 = v10;
  return result;
}

uint64_t ProduceInitialSamplesProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v64 = 0;
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
  uint64_t v6 = EnsureFormatReaderCreated(a1, a2);
  if (v6) {
    goto LABEL_101;
  }
  uint64_t v7 = *(void *)(a2 + 240);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t *))(v9 + 8);
  if (!v10)
  {
    CFArrayRef v61 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    uint64_t v14 = 4294954514;
    goto LABEL_98;
  }
  uint64_t v6 = v10(v7, &v64);
  if (v6)
  {
LABEL_101:
    uint64_t v14 = v6;
LABEL_96:
    CFArrayRef v61 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_98;
  }
  CMTimeFlags flags = *(_DWORD *)(v5 + 12);
  CMTimeEpoch epoch = *(void *)(v5 + 16);
  if (*(void *)(a2 + 88))
  {
    DictionaryCFArrayRef Value = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    if (DictionaryValue)
    {
      CMTimeMakeFromDictionary(&v71[0].start, DictionaryValue);
      fromRange.start.CMTimeValue value = v71[0].start.value;
      fromRange.start.CMTimeScale timescale = v71[0].start.timescale;
      if ((v71[0].start.flags & 0x1D) == 1)
      {
        CMTimeEpoch epoch = v71[0].start.epoch;
        CMTimeValue value = fromRange.start.value;
        CMTimeScale timescale = fromRange.start.timescale;
        CMTimeFlags flags = v71[0].start.flags;
      }
    }
  }
  if (v64 < 1) {
    goto LABEL_97;
  }
  LODWORD(v14) = 0;
  uint64_t v15 = 0;
  uint64_t v16 = *MEMORY[0x1E4F1CF80];
  do
  {
    CFTypeRef v75 = 0;
    start.CMTimeValue value = value;
    start.CMTimeScale timescale = timescale;
    start.CMTimeFlags flags = flags;
    start.CMTimeEpoch epoch = epoch;
    CFTypeRef v73 = 0;
    CFTypeRef v74 = 0;
    CFTypeRef v72 = 0;
    memset(v71, 0, sizeof(v71));
    CFTypeRef v69 = 0;
    CFTypeRef v70 = 0;
    CFTypeRef cf = 0;
    uint64_t v17 = *(void *)(a2 + 240);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void, void))(v19 + 48);
    if (!v20)
    {
LABEL_70:
      unsigned int v35 = -12782;
      goto LABEL_71;
    }
    unsigned int v21 = v20(v17, v15, &v75, 0, 0);
    if (v21) {
      goto LABEL_93;
    }
    CFTypeRef v22 = v75;
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFArrayRef v25 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v24 + 32);
    if (!v25) {
      goto LABEL_70;
    }
    unsigned int v21 = v25(v22, &v74);
    if (v21)
    {
LABEL_93:
      unsigned int v35 = v21;
      goto LABEL_71;
    }
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v75);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    CFTypeRef v29 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v28 + 48);
    if (v29) {
      v29(FigBaseObject, @"SecondaryEditCursorService", v16, &v73);
    }
    CFTypeRef v30 = v73;
    if (v73)
    {
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v31) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 0;
      }
      CFArrayRef v33 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v32 + 8);
      if (!v33) {
        goto LABEL_70;
      }
      fromRange.CMTime start = start;
      unsigned int v34 = v33(v30, &fromRange, &v72);
      if (v34 == -12521) {
        goto LABEL_63;
      }
      unsigned int v35 = v34;
      if (v34) {
        goto LABEL_71;
      }
      unsigned int v36 = WalkEditCursorToNonEmptyEdit((uint64_t)v72);
      if (v36 == -12520) {
        goto LABEL_63;
      }
      unsigned int v35 = v36;
      if (v36) {
        goto LABEL_71;
      }
      CFTypeRef v37 = v72;
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      CFArrayRef v40 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v39 + 24);
      if (!v40) {
        goto LABEL_70;
      }
      unsigned int v21 = v40(v37, v71);
      if (v21) {
        goto LABEL_93;
      }
      CMTime time = start;
      CMTimeRange fromRange = v71[1];
      CMTimeRange toRange = v71[0];
      CMTimeMapTimeFromRangeToRange(&start, &time, &fromRange, &toRange);
      CMTime time = start;
      CMTimeRange fromRange = v71[0];
      CMTimeClampToRange(&toRange.start, &time, &fromRange);
      CMTime start = toRange.start;
    }
    uint64_t v41 = FigTrackReaderGetFigBaseObject(v75);
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    CFArrayRef v44 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v43 + 48);
    if (v44) {
      v44(v41, @"EditCursorService", v16, &v70);
    }
    CFTypeRef v45 = v70;
    if (v70)
    {
      toRange.CMTime start = start;
      uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v46) {
        uint64_t v47 = v46;
      }
      else {
        uint64_t v47 = 0;
      }
      CFArrayRef v48 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v47 + 8);
      if (!v48) {
        goto LABEL_70;
      }
      *(_OWORD *)&fromRange.start.CMTimeValue value = *(_OWORD *)&toRange.start.value;
      fromRange.start.CMTimeEpoch epoch = toRange.start.epoch;
      unsigned int v49 = v48(v45, &fromRange, &v69);
      if (v49 != -12521)
      {
        unsigned int v35 = v49;
        if (v49) {
          goto LABEL_71;
        }
        unsigned int v50 = WalkEditCursorToNonEmptyEdit((uint64_t)v69);
        if (v50 != -12520)
        {
          unsigned int v35 = v50;
          if (v50) {
            goto LABEL_71;
          }
          CFTypeRef v51 = v69;
          uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v52) {
            uint64_t v53 = v52;
          }
          else {
            uint64_t v53 = 0;
          }
          CFArrayRef v54 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v53 + 24);
          if (!v54) {
            goto LABEL_70;
          }
          unsigned int v21 = v54(v51, v71);
          if (v21) {
            goto LABEL_93;
          }
          CMTime v65 = start;
          CMTimeRange fromRange = v71[1];
          CMTimeRange toRange = v71[0];
          CMTimeMapTimeFromRangeToRange(&time, &v65, &fromRange, &toRange);
          CMTime start = time;
          CMTimeRange fromRange = v71[0];
          CMTimeClampToRange(&toRange.start, &time, &fromRange);
          CMTime start = toRange.start;
        }
      }
    }
LABEL_63:
    CFTypeRef v55 = v74;
    toRange.CMTime start = start;
    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v56) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = 0;
    }
    CFArrayRef v58 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, uint64_t, CFTypeRef *, void, void))(v57 + 16);
    if (!v58) {
      goto LABEL_70;
    }
    *(_OWORD *)&fromRange.start.CMTimeValue value = *(_OWORD *)&toRange.start.value;
    fromRange.start.CMTimeEpoch epoch = toRange.start.epoch;
    unsigned int v59 = v58(v55, &fromRange, 1, &cf, 0, 0);
    if (v59 == -12842) {
      unsigned int v35 = 0;
    }
    else {
      unsigned int v35 = v59;
    }
LABEL_71:
    if (v75) {
      CFRelease(v75);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v74) {
      CFRelease(v74);
    }
    if (v69) {
      CFRelease(v69);
    }
    if (v70) {
      CFRelease(v70);
    }
    if (v72) {
      CFRelease(v72);
    }
    if (v73) {
      CFRelease(v73);
    }
    if (v35) {
      BOOL v60 = v14 == 0;
    }
    else {
      BOOL v60 = 0;
    }
    if (v60) {
      uint64_t v14 = v35;
    }
    else {
      uint64_t v14 = v14;
    }
    ++v15;
  }
  while (v15 < v64);
  if (v14) {
    goto LABEL_96;
  }
LABEL_97:
  uint64_t v14 = 0;
  CFArrayRef v61 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_98:
  CFTypeRef v62 = *v61;
  if (*v61) {
    CFTypeRef v62 = CFRetain(v62);
  }
  *a3 = v62;
  return v14;
}

uint64_t ProduceCPEProtectorProperty(void *a1, uint64_t a2, void *a3)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef v19 = 0;
  CFDictionaryRef v20 = 0;
  CFDictionaryRef v18 = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (v5)
  {
    uint64_t v15 = v5;
    CFDictionaryRef v12 = 0;
    goto LABEL_23;
  }
  GetContentProtectionOptions(a2, &v20, &v19, &v18);
  CFDictionaryRef v6 = v19;
  CFDictionaryRef v7 = v20;
  if (v18) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v20 == 0;
  }
  if (!v8 || v19 != 0)
  {
    memset(keys, 0, 24);
    memset(values, 0, sizeof(values));
    if (v18)
    {
      keys[0] = @"StorageURL";
      values[0] = v18;
      CFIndex v10 = 1;
      if (!v20)
      {
LABEL_12:
        if (v6)
        {
          keys[v10] = @"9692C034-625A-4B20-9D38-D1E9CF40B67F";
          values[v10++] = v6;
        }
        uint64_t v11 = *MEMORY[0x1E4F1CF80];
        CFDictionaryRef v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        goto LABEL_16;
      }
    }
    else
    {
      CFIndex v10 = 0;
      if (!v20) {
        goto LABEL_12;
      }
    }
    keys[v10] = @"AE50A074-4909-4EBC-8ADF-C8DDD5F591AA";
    values[v10++] = v7;
    goto LABEL_12;
  }
  CFDictionaryRef v12 = 0;
  uint64_t v11 = *MEMORY[0x1E4F1CF80];
LABEL_16:
  uint64_t v13 = FigCPEProtectorCreateForFormatReader(v11, *(void *)(a2 + 240), (uint64_t)v12, a2 + 344);
  if (v13) {
    BOOL v14 = v13 == -12165;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    if (*(void *)(a2 + 344)) {
      *(_WORD *)(a2 + 352) = 257;
    }
  }
  else
  {
    uint64_t v15 = v13;
  }
LABEL_23:
  CFTypeRef v16 = *(CFTypeRef *)(a2 + 344);
  if (v16) {
    CFTypeRef v16 = CFRetain(v16);
  }
  *a3 = v16;
  if (v12) {
    CFRelease(v12);
  }
  return v15;
}

uint64_t ProduceProtectedStatusProperty(void *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (*(unsigned char *)(a2 + 352))
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v7 = EnsureFormatReaderCreated(a1, a2);
    if (v7)
    {
      uint64_t v6 = v7;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 240);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t *))(v10 + 8);
      if (v11)
      {
        uint64_t v6 = v11(v8, &v35);
        if (!v6)
        {
          if (!*(unsigned char *)(a2 + 353))
          {
            uint64_t v18 = 0;
            uint64_t v19 = *MEMORY[0x1E4F1CF80];
            while (v18 < v35)
            {
              CFTypeRef cf = 0;
              CFTypeRef v34 = 0;
              uint64_t v20 = *(void *)(a2 + 240);
              uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v21) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = 0;
              }
              uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void, void))(v22 + 48);
              if (v23)
              {
                uint64_t v6 = v23(v20, v18, &v34, 0, 0);
                if (!v6)
                {
                  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v34);
                  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v25) {
                    uint64_t v26 = v25;
                  }
                  else {
                    uint64_t v26 = 0;
                  }
                  uint64_t v27 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v26 + 48);
                  if (v27)
                  {
                    uint64_t v6 = v27(FigBaseObject, @"TrackFormatDescriptionArray", v19, &cf);
                    if (!v6 && cf)
                    {
                      CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
                      if (Count >= 1)
                      {
                        CFIndex v29 = Count;
                        for (CFIndex i = 0; i != v29; ++i)
                        {
                          CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)cf, i);
                          if (FigCPEIsSupportedFormatDescription((uint64_t)ValueAtIndex)) {
                            *(unsigned char *)(a2 + 353) = 1;
                          }
                          FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
                          if (FigCodecTypeIsProtected(MediaSubType)) {
                            *(unsigned char *)(a2 + 353) = 1;
                          }
                        }
                      }
                      uint64_t v6 = 0;
                    }
                  }
                  else
                  {
                    uint64_t v6 = 4294954514;
                  }
                  if (v34) {
                    CFRelease(v34);
                  }
                }
              }
              else
              {
                uint64_t v6 = 4294954514;
              }
              if (cf) {
                CFRelease(cf);
              }
              if (!v6)
              {
                ++v18;
                if (!*(unsigned char *)(a2 + 353)) {
                  continue;
                }
              }
              goto LABEL_12;
            }
          }
          uint64_t v6 = 0;
        }
      }
      else
      {
        uint64_t v6 = 4294954514;
      }
LABEL_12:
      if (!*(unsigned char *)(a2 + 353))
      {
        CFTypeRef v34 = 0;
        uint64_t v14 = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v16 = v15 ? v15 : 0;
        uint64_t v17 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v16 + 48);
        if (v17)
        {
          if (!v17(v14, @"IndicatesContentProtection", *MEMORY[0x1E4F1CF80], &v34) && v34 == *v5) {
            *(unsigned char *)(a2 + 353) = 1;
          }
        }
      }
      *(unsigned char *)(a2 + 352) = 1;
    }
  }
  if (*(unsigned char *)(a2 + 353)) {
    CFDictionaryRef v12 = v5;
  }
  else {
    CFDictionaryRef v12 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  *a3 = CFRetain(*v12);
  return v6;
}

uint64_t ProduceSHA1DigestProperty(void *a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a2 + 112))
  {
    uint64_t v6 = 4294954511;
LABEL_17:
    *(unsigned char *)(a2 + 196) = 1;
    *(_DWORD *)(a2 + 200) = v6;
    goto LABEL_7;
  }
  if (*(unsigned char *)(a2 + 196))
  {
    uint64_t v6 = *(unsigned int *)(a2 + 200);
    goto LABEL_12;
  }
  uint64_t v7 = EnsureContentStreamCreated(a1, a2);
  if (v7)
  {
    uint64_t v6 = v7;
    goto LABEL_17;
  }
  if (*(void *)(a2 + 160))
  {
    uint64_t v6 = FigByteStreamCopySHA1Digest();
    *(void *)(a2 + 208) = 0;
    *(unsigned char *)(a2 + 196) = 1;
    *(_DWORD *)(a2 + 200) = v6;
    if (v6)
    {
LABEL_7:
      CFStringRef Error = AssetCopyLoadError(a2, v6);
      int v9 = *(_DWORD *)(a2 + 200);
      goto LABEL_10;
    }
    int v9 = 0;
    CFStringRef Error = 0;
  }
  else
  {
    int v9 = 0;
    uint64_t v6 = 0;
    CFStringRef Error = 0;
    *(unsigned char *)(a2 + 196) = 1;
    *(_DWORD *)(a2 + 200) = 0;
  }
LABEL_10:
  StoreByProduct(a1, @"assetProperty_SHA1Digest", v9, Error, *(const void **)(a2 + 208));
  if (Error) {
    CFRelease(Error);
  }
LABEL_12:
  CFTypeRef v10 = *(CFTypeRef *)(a2 + 208);
  if (v10) {
    CFTypeRef v10 = CFRetain(v10);
  }
  *a3 = v10;
  return v6;
}

uint64_t ProduceMediaSelectionArrayProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v11 = 0;
  CFTypeRef cf = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (v5)
  {
    uint64_t v9 = v5;
    goto LABEL_10;
  }
  if (!*(void *)(a2 + 88) || (ArrayCFArrayRef Value = (const __CFArray *)FigCFDictionaryGetArrayValue()) == 0)
  {
    CFTypeRef v8 = 0;
    goto LABEL_7;
  }
  SanitizedOutOfBandAlternateTracksArraCGFloat y = CreateSanitizedOutOfBandAlternateTracksArray(ArrayValue, (__CFArray **)&cf);
  CFTypeRef v8 = cf;
  if (!SanitizedOutOfBandAlternateTracksArray) {
LABEL_7:
  }
    SanitizedOutOfBandAlternateTracksArraCGFloat y = FigCreateMediaSelectionArrayFromFormatReaderProperties(*(void *)(a2 + 240), 1, (uint64_t)v8, &v11);
  uint64_t v9 = SanitizedOutOfBandAlternateTracksArray;
  if (v8) {
    CFRelease(v8);
  }
LABEL_10:
  *a3 = v11;
  return v9;
}

uint64_t ProduceiTunesGaplessInfoProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"iTunesGaplessInfo", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

uint64_t ProduceiTunesSoundCheckVolumeNormalizationProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"iTunesSoundCheckVolumeNormalization", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

uint64_t ProduceCouldContainFragmentsProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    if (*(unsigned char *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(unsigned char *)(a2 + 458) = 1;
    }
    ObtainCouldContainFragmentsPropertyValue(a2, a3);
  }
  return v5;
}

uint64_t ProduceContainsFragmentsProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    if (*(unsigned char *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(unsigned char *)(a2 + 459) = 1;
    }
    ObtainContainsFragmentsPropertyValue(a2, a3);
  }
  return v5;
}

uint64_t ProduceMovieExtendsDurationProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"MovieExtendsDuration", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

CFNumberRef ProduceAssetCameraRollValidationProperty(void *a1, uint64_t a2, CFNumberRef *a3)
{
  int valuePtr = ProduceAssetValidationResult(a1, a2, @"validationCriteria_CameraRoll", 0);
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  *a3 = result;
  return result;
}

CFNumberRef ProduceAssetMediaPlaybackValidationProperty(void *a1, uint64_t a2, CFNumberRef *a3)
{
  int valuePtr = ProduceAssetValidationResult(a1, a2, @"validationCriteria_MediaPlayback", 0);
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  *a3 = result;
  return result;
}

CFTypeRef ProduceAssetCompatibleWithPhotosTranscodingServiceProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v11 = 0;
  ProduceAssetIsSelfContainedProperty(a1, a2, &v11);
  uint64_t v6 = v11;
  uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (FigCFEqual() == 1)
  {
    BOOL v8 = ProduceAssetValidationResult(a1, a2, @"validationCriteria_PhotosTranscodingService", 0) != 0;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  BOOL v8 = 1;
  if (v6) {
LABEL_3:
  }
    CFRelease(v6);
LABEL_4:
  if (v8) {
    uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  else {
    uint64_t v9 = v7;
  }
  CFTypeRef result = CFRetain(v9);
  *a3 = result;
  return result;
}

uint64_t ProduceChaptersProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"Chapters", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

uint64_t ProduceLocalizedMediaSelectionOptionDisplayNamesProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"LocalizedMSODisplayNames", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

uint64_t ProduceMovieProxyProperty(void *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (v5) {
    return v5;
  }
  if (!*(void *)(a2 + 160)) {
    goto LABEL_10;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeRef v10 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v9 + 48);
  if (v10) {
    v10(FigBaseObject, @"Identifier", v6, &cf);
  }
  if (FigCFEqual()) {
    uint64_t v11 = MovieProxyDataCreateForByteStream(v6, *(void *)(a2 + 160), a3);
  }
  else {
LABEL_10:
  }
    uint64_t v11 = FigSignalErrorAt();
  uint64_t v12 = v11;
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t ProduceAssetIsSelfContainedProperty(void *a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
    if (v9)
    {
      v9(FigBaseObject, @"IsSelfContained", *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v10 = cf;
    }
    else
    {
      CFTypeRef v10 = 0;
    }
    CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    if (v10 != (CFTypeRef)*MEMORY[0x1E4F1CFC8]) {
      CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    }
    if (v11)
    {
      CFTypeRef v11 = CFRetain(v11);
      CFTypeRef v10 = cf;
    }
    *a3 = v11;
    if (v10) {
      CFRelease(v10);
    }
  }
  return v5;
}

uint64_t ProduceAssetNaturalTimeScaleProperty(void *a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
    if (v9 && (v9(FigBaseObject, @"Timescale", *MEMORY[0x1E4F1CF80], &cf), cf))
    {
      CFTypeRef v10 = CFRetain(cf);
      CFTypeRef v11 = cf;
      *a3 = v10;
      if (v11) {
        CFRelease(v11);
      }
    }
    else
    {
      *a3 = 0;
    }
  }
  return v5;
}

CFTypeRef ProduceAssetCompatibleWithAirPlayVideoProperty(void *a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a2 + 64) != 1431456810)
  {
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFC8];
    goto LABEL_8;
  }
  CFTypeRef v11 = 0;
  ProduceAssetIsSelfContainedProperty(a1, a2, &v11);
  CFAllocatorRef v6 = v11;
  uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFC8];
  int v8 = FigCFEqual();
  if (v6) {
    CFRelease(v6);
  }
  if (!v8 && !ProduceAssetValidationResult(a1, a2, @"validationCriteria_AirPlayVideo", 0))
  {
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_8:
    uint64_t v7 = *v9;
  }
  CFTypeRef result = CFRetain(v7);
  *a3 = result;
  return result;
}

uint64_t ProduceAssetAnalysisMessagesProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"AssetAnalysisMessages", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

uint64_t ProduceIsAssetAnalysisActiveProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v8 + 48);
    if (v9) {
      v9(FigBaseObject, @"IsAssetAnalysisActive", *MEMORY[0x1E4F1CF80], a3);
    }
  }
  return v5;
}

uint64_t ProduceMaximumVideoResolutionProperty(void *a1, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t v33 = 0;
  uint64_t result = EnsureFormatReaderCreated(a1, a2);
  if (!result)
  {
    uint64_t v6 = *(void *)(a2 + 240);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t *))(v8 + 8);
    if (v9)
    {
      uint64_t result = v9(v6, &v33);
      if (result) {
        return result;
      }
      if (v33 >= 1)
      {
        int v10 = 0;
        CFDictionaryRef v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = *MEMORY[0x1E4F1CF80];
        double v14 = 0.0;
        uint64_t v15 = (CGSize *)MEMORY[0x1E4F1DB30];
        do
        {
          CFTypeRef cf = 0;
          uint64_t v16 = *(void *)(a2 + 240);
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void, void))(v18 + 48);
          if (v19 && !v19(v16, v12, &cf, 0, 0))
          {
            CFDictionaryRef dict = 0;
            CGSize v30 = *v15;
            uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v21) {
              uint64_t v22 = v21;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v22 + 48);
            if (v23 && !v23(FigBaseObject, @"CleanApertureDimensions", v13, &dict)
              || ((uint64_t v24 = FigTrackReaderGetFigBaseObject(cf), (v25 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
                ? (uint64_t v26 = 0)
                : (uint64_t v26 = v25),
                  (uint64_t v27 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v26 + 48)) != 0
               && !v27(v24, @"TrackDimensions", v13, &dict)))
            {
              if (CGSizeMakeWithDictionaryRepresentation(dict, &v30))
              {
                double v28 = v30.width * v30.height;
                if (v30.width * v30.height > v14)
                {
                  CFDictionaryRef v29 = dict;
                  if (dict) {
                    CFRetain(dict);
                  }
                  if (v11) {
                    CFRelease(v11);
                  }
                  int v10 = 1;
                  CFDictionaryRef v11 = v29;
                  double v14 = v28;
                }
              }
            }
            if (dict) {
              CFRelease(dict);
            }
          }
          if (cf) {
            CFRelease(cf);
          }
          ++v12;
        }
        while (v12 < v33);
        if (v10)
        {
          uint64_t result = 0;
          *a3 = v11;
          return result;
        }
        if (v11) {
          CFRelease(v11);
        }
      }
      return 4294954513;
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t ProduceAvailableVideoDynamicRangesProperty(void *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  uint64_t v28 = 0;
  if (a3)
  {
    if (!a2)
    {
      uint64_t v24 = FigSignalErrorAt();
      goto LABEL_37;
    }
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      uint64_t v24 = FigSignalErrorAt();
      goto LABEL_38;
    }
    uint64_t v8 = EnsureFormatReaderCreated(a1, a2);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a2 + 240);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t *))(v11 + 8);
      if (!v12)
      {
        uint64_t v24 = 4294954514;
LABEL_36:
        CFRelease(Mutable);
LABEL_37:
        CFMutableArrayRef Mutable = 0;
LABEL_38:
        *a3 = Mutable;
        return v24;
      }
      uint64_t v8 = v12(v9, &v28);
      if (!v8)
      {
        if (v28 >= 1)
        {
          uint64_t v13 = 0;
          while (1)
          {
            CFArrayRef theArray = 0;
            CFTypeRef cf = 0;
            uint64_t v14 = *(void *)(a2 + 240);
            uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v15) {
              uint64_t v16 = v15;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, void))(v16 + 64);
            if (!v17 || v17(v14, v13, 1986618469, &cf, 0) || !cf) {
              goto LABEL_29;
            }
            uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
            uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v20 = v19 ? v19 : 0;
            uint64_t v21 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v20 + 48);
            if (!v21 || v21(FigBaseObject, @"TrackFormatDescriptionArray", v6, &theArray)) {
              goto LABEL_29;
            }
            if (theArray) {
              break;
            }
LABEL_31:
            if (cf) {
              CFRelease(cf);
            }
            if (++v13 >= v28) {
              goto LABEL_34;
            }
          }
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            unint64_t v23 = Count + 1;
            do
            {
              if (CFArrayGetValueAtIndex(theArray, v23 - 2))
              {
                CMVideoFormatDescriptionGetVideoDynamicRange();
                FigCFArrayAppendInt32();
              }
              --v23;
            }
            while (v23 > 1);
          }
LABEL_29:
          if (theArray) {
            CFRelease(theArray);
          }
          goto LABEL_31;
        }
LABEL_34:
        uint64_t v24 = 0;
        goto LABEL_38;
      }
    }
    uint64_t v24 = v8;
    goto LABEL_36;
  }

  return FigSignalErrorAt();
}

uint64_t ProduceNominalVideoFrameRateProperty(void *a1, uint64_t a2, CFNumberRef *a3)
{
  uint64_t v35 = 0;
  float v34 = 0.0;
  if (a3)
  {
    if (a2)
    {
      uint64_t result = EnsureFormatReaderCreated(a1, a2);
      if (result) {
        goto LABEL_60;
      }
      uint64_t v6 = *(void *)(a2 + 240);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t *))(v8 + 8);
      if (!v9)
      {
        CFNumberRef v29 = 0;
        uint64_t result = 4294954514;
LABEL_55:
        *a3 = v29;
        return result;
      }
      uint64_t result = v9(v6, &v35);
      if (result)
      {
LABEL_60:
        CFNumberRef v29 = 0;
        goto LABEL_55;
      }
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (v35 >= 1)
      {
        uint64_t v11 = 0;
        CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        float v13 = 0.0;
        while (1)
        {
          CFTypeRef cf = 0;
          CFTypeRef v33 = 0;
          uint64_t v14 = *(void *)(a2 + 240);
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, void))(v16 + 64);
          if (!v17 || v17(v14, v11, 1986618469, &v33, 0) || !v33) {
            goto LABEL_45;
          }
          uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v33);
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v20 = v19 ? v19 : 0;
          uint64_t v21 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v20 + 48);
          if (!v21 || v21(FigBaseObject, @"TrackEnabled", v10, &cf)) {
            goto LABEL_45;
          }
          CFTypeRef v22 = cf;
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          if (v12 != v22) {
            goto LABEL_45;
          }
          float valuePtr = 0.0;
          uint64_t v23 = FigTrackReaderGetFigBaseObject(v33);
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v26 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v25 + 48);
          if (!v26) {
            goto LABEL_43;
          }
          if (v26(v23, @"NominalFrameRate", v10, &cf)) {
            goto LABEL_43;
          }
          CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
          float v27 = valuePtr;
          if (valuePtr == 0.0) {
            goto LABEL_43;
          }
          if (v13 != 0.0) {
            break;
          }
          float v34 = valuePtr;
          float v28 = valuePtr;
LABEL_44:
          float v13 = v28;
LABEL_45:
          if (cf) {
            CFRelease(cf);
          }
          if (v33) {
            CFRelease(v33);
          }
          if (++v11 >= v35) {
            goto LABEL_53;
          }
        }
        if (vabds_f32(v13, valuePtr) > 0.01)
        {
          if (v13 <= valuePtr) {
            float v28 = valuePtr;
          }
          else {
            float v28 = v13;
          }
          if (v13 < valuePtr) {
            float v27 = v13;
          }
          if (fabsf(v28 + (float)(v27 * -2.0)) >= 0.01
            && fabsf(v28 + (float)(v27 * -3.0)) >= 0.01
            && fabsf(v28 + (float)(v27 * -4.0)) >= 0.01)
          {
            float v34 = 0.0;
            float v28 = 0.0;
            uint64_t v11 = v35;
          }
          else
          {
            float v34 = v28;
          }
          goto LABEL_44;
        }
LABEL_43:
        float v28 = v13;
        goto LABEL_44;
      }
LABEL_53:
      CFNumberRef v30 = CFNumberCreate(v10, kCFNumberFloatType, &v34);
      if (v30)
      {
        CFNumberRef v29 = v30;
        uint64_t result = 0;
        goto LABEL_55;
      }
    }
    uint64_t result = FigSignalErrorAt();
    goto LABEL_60;
  }

  return FigSignalErrorAt();
}

uint64_t ProducemoovAtomSizeProperty(void *a1, uint64_t a2, void *a3)
{
  CFDictionaryRef theDict = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v8 + 48);
    if (v9 && (v9(FigBaseObject, @"ImportantResourceLocation", *MEMORY[0x1E4F1CF80], &theDict), theDict))
    {
      CFArrayRef Value = CFDictionaryGetValue(theDict, @"LocationSize");
      if (Value) {
        CFArrayRef Value = CFRetain(Value);
      }
      *a3 = Value;
      CFRelease(theDict);
    }
    else
    {
      *a3 = 0;
    }
  }
  return v5;
}

uint64_t ProduceFirstFragmentSequenceNumberProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v8 + 48);
    if (v9)
    {
      v9(FigBaseObject, @"FirstFragmentSequenceNumber", *MEMORY[0x1E4F1CF80], &v12);
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v10 = 0;
    }
    *a3 = v10;
  }
  return v5;
}

uint64_t ProduceFragmentCountProperty(void *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = 0;
  uint64_t v5 = EnsureFormatReaderCreated(a1, a2);
  if (!v5)
  {
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(a2 + 240));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v8 + 48);
    if (v9)
    {
      v9(FigBaseObject, @"FragmentCount", *MEMORY[0x1E4F1CF80], &v12);
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v10 = 0;
    }
    *a3 = v10;
  }
  return v5;
}

void BuildMetadataFilterDictionaries()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = xmmword_1E57A56A8;
  uint64_t v8 = @"key_ostype";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Suint64_t Int32 = (const void *)FigCFNumberCreateSInt32();
  values = @"udta";
  uint64_t v5 = @"meta";
  uint64_t v6 = SInt32;
  CFAllocatorRef v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFTypeRef v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  sUserDataiTunesMetadataFilter = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  values = @"uiso";
  uint64_t v5 = @"meta";
  uint64_t v6 = SInt32;
  sISOUserDataiTunesMetadataFilter = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 3, v2, v3);
  values = @"mdta";
  uint64_t v5 = @"com.apple.quicktime.aime-data";
  sQuickTimeAIMEDataFilter = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 2, v2, v3);
  if (SInt32) {
    CFRelease(SInt32);
  }
}

uint64_t IsNotOnFilterOutKeyList(const __CFDictionary *a1, const __CFArray *a2)
{
  CFDictionaryGetValue(a1, @"keyspace");
  CFArrayRef Value = CFDictionaryGetValue(a1, @"key");
  if (!a2) {
    return 1;
  }
  uint64_t v5 = Value;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1) {
    return 1;
  }
  CFIndex v7 = Count;
  CFIndex v8 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v8);
    CFDictionaryGetValue(ValueAtIndex, @"keyspace");
    if (FigCFEqual())
    {
      if (v5 && (CFTypeID v10 = CFGetTypeID(v5), v10 == CFNumberGetTypeID()))
      {
        CFDictionaryRef v11 = ValueAtIndex;
        uint64_t v12 = @"key_ostype";
      }
      else
      {
        CFDictionaryRef v11 = ValueAtIndex;
        uint64_t v12 = @"key_string";
      }
      CFDictionaryGetValue(v11, v12);
      if (FigCFEqual()) {
        break;
      }
    }
    if (v7 == ++v8) {
      return 1;
    }
  }
  return 0;
}

uint64_t WalkEditCursorToNonEmptyEdit(uint64_t a1)
{
  memset(v9, 0, sizeof(v9));
  while (1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(uint64_t (**)(uint64_t, _OWORD *))(v3 + 24);
    if (!v4) {
      return 4294954514;
    }
    uint64_t result = v4(a1, v9);
    if (result) {
      return result;
    }
    if (BYTE12(v9[0])) {
      break;
    }
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFIndex v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    if (!v8) {
      return 4294954514;
    }
    uint64_t result = v8(a1, 1);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t FigSampleBufferAudioRendererCreateRemoteWithOptions(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    uint64_t v4 = 4294950916;
    goto LABEL_13;
  }
  valueCallBacks.version = 0;
  valueCallBacks.retain = (CFDictionaryRetainCallBack)&valueCallBacks;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)0x2000000000;
  LODWORD(valueCallBacks.copyDescription) = 0;
  *(void *)__str = MEMORY[0x1E4F143A8];
  uint64_t v18 = 0x40000000;
  uint64_t v19 = __audioRendererRemote_ensureClientEstablished_block_invoke;
  uint64_t v20 = &unk_1E57A56D0;
  p_CFDictionaryValueCallBacks valueCallBacks = &valueCallBacks;
  if (gSBARRemoteClientSetupOnce != -1) {
    dispatch_once(&gSBARRemoteClientSetupOnce, __str);
  }
  uint64_t v4 = *((unsigned int *)valueCallBacks.retain + 6);
  _Block_object_dispose(&valueCallBacks, 8);
  if (!v4)
  {
    CFTypeRef cf = 0;
    memset(&valueCallBacks, 0, sizeof(valueCallBacks));
    FigSampleBufferAudioRendererGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5)
    {
      uint64_t v4 = v5;
    }
    else
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[4] = 1;
      valueCallBacks.version = 0;
      valueCallBacks.retain = (CFDictionaryRetainCallBack)audioRendererRemote_cloneCompletionCallbackEntry;
      valueCallBacks.release = (CFDictionaryReleaseCallBack)audioRendererRemote_freeCompletionCallbackEntry;
      valueCallBacks.copyDescription = 0;
      valueCallBacks.equal = 0;
      CFMutableDictionaryRef v7 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &valueCallBacks);
      DerivedStorage[3] = v7;
      if (v7)
      {
        snprintf(__str, 0x80uLL, "com.apple.coremedia.audiorendererremote.completioncallbacks[%p]", cf);
        dispatch_queue_t v8 = dispatch_queue_create(__str, 0);
        DerivedStorage[2] = v8;
        if (v8)
        {
          uint64_t v9 = FigSimpleMutexCreate();
          DerivedStorage[5] = v9;
          if (v9)
          {
            CFTypeRef v10 = cf;
            uint64_t v11 = FigXPCCreateBasicMessage();
            if (v11 || (uint64_t v11 = FigXPCMessageSetCFDictionary(), v11))
            {
              uint64_t v4 = v11;
            }
            else
            {
              uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!v4)
              {
                uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
                *(void *)(CMBaseObjectGetDerivedStorage() + 8) = uint64;
                FigXPCRemoteClientAssociateObject();
                *a3 = v10;
                goto LABEL_13;
              }
            }
            if (!v10) {
              goto LABEL_13;
            }
            CFTypeRef v14 = v10;
LABEL_21:
            CFRelease(v14);
            goto LABEL_13;
          }
        }
      }
      uint64_t v4 = 4294950914;
    }
    CFTypeRef v14 = cf;
    if (!cf) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t audioRendererRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)(DerivedStorage + 1))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t FigSampleBufferAudioRendererCreateRemoteWithOptionsAndRetry(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = 0;
  if (a3)
  {
    unsigned int v6 = 0;
    do
      uint64_t result = FigSampleBufferAudioRendererCreateRemoteWithOptions(a1, a2, &v10);
    while ((result == -16155 || result == -16384) && v6++ < 4);
    if (!result) {
      *a3 = v10;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void __audioRendererRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"ServerConnectionDied");
  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  FigRemote_ShouldConnectToMediaplaybackd();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

unsigned char *audioRendererRemote_deadConnectionCallback()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  *uint64_t result = 1;
  return result;
}

uint64_t audioRendererRemote_notificationFilter()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual()) {
    *(unsigned char *)(DerivedStorage + 1) = 1;
  }
  return 0;
}

uint64_t audioRendererRemote_handleClientMessage()
{
  Opint Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

void __audioRendererRemote_handleCompletionCallback_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(*(void *)(a1 + 40) + 24);
  if (v2)
  {
    CFArrayRef Value = CFDictionaryGetValue(v2, *(const void **)(a1 + 48));
    if (Value)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
      long long v5 = *(_OWORD *)Value;
      *(void *)(v4 + 40) = Value[2];
      *(_OWORD *)(v4 + 24) = v5;
      unsigned int v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v6) {
        CFRetain(v6);
      }
    }
    CFMutableDictionaryRef v7 = *(const void **)(a1 + 48);
    dispatch_queue_t v8 = *(__CFDictionary **)(*(void *)(a1 + 40) + 24);
    CFDictionaryRemoveValue(v8, v7);
  }
}

void *audioRendererRemote_cloneCompletionCallbackEntry(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 24, 0);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
  v3[2] = v4;
  if (*v3) {
    CFRetain((CFTypeRef)*v3);
  }
  return v3;
}

void audioRendererRemote_freeCompletionCallbackEntry(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr) {
    CFRelease(*ptr);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t audioRendererRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 8);
  FigSimpleMutexDestroy();
  CFDictionaryRef v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 16) = 0;
  }
  long long v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 24) = 0;
  }
  if (v1)
  {
    FigXPCRemoteClientDisassociateObject();
    if (!*(unsigned char *)DerivedStorage && !FigXPCCreateBasicMessage()) {
      FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *audioRendererRemote_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferAudioRendererRemote=%p retainCount=%d allocator=%p", a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, @" objectID=%lld", *(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage) {
    CFMutableDictionaryRef v7 = "yes";
  }
  else {
    CFMutableDictionaryRef v7 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @" serverDied=%s", v7);
  if (*(unsigned char *)(DerivedStorage + 1)) {
    dispatch_queue_t v8 = "yes";
  }
  else {
    dispatch_queue_t v8 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @" dependencyLost=%s", v8);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t audioRendererRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = 0;
  ObjectIOSurfaceID ID = audioRendererRemote_getObjectID(a1, &v8);
  if (!ObjectID) {
    ObjectIOSurfaceID ID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v6 = ObjectID;
  if (a4) {
    *a4 = 0;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t audioRendererRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  if (FigCFEqual())
  {
    uint64_t value = 0;
    uint64_t v12 = 0;
    xpc_object_t xdict = 0;
    ObjectIOSurfaceID ID = audioRendererRemote_getObjectID(a1, &v12);
    if (ObjectID || a3 && (ObjectIOSurfaceID ID = MTAudioProcessingTapXPCRemoteGetObjectID(a3, &value), ObjectID))
    {
      uint64_t v6 = ObjectID;
    }
    else
    {
      uint64_t v6 = FigXPCCreateBasicMessage();
      if (!v6)
      {
        xpc_dictionary_set_uint64(xdict, "audioProcessingTapID", value);
        uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    FigXPCRelease();
    FigXPCRemoteClientKillServerOnTimeout();
  }
  else
  {
    uint64_t v7 = audioRendererRemote_getObjectID(a1, &v9);
    if (!v7) {
      uint64_t v7 = FigXPCSendStdSetPropertyMessage();
    }
    uint64_t v6 = v7;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

BOOL audioRendererRemote_QueueIsAboveHighWaterLevel(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = 0;
  BOOL v2 = audioRendererRemote_getObjectID(a1, &v4)
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || xpc_dictionary_get_BOOL(0, "isAboveHighWaterResponse");
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

const void *audioRendererRemote_EnqueueSampleBuffer(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  ObjectIOSurfaceID ID = audioRendererRemote_getObjectID(a1, &v15);
  if (!ObjectID)
  {
    ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      MEMORY[0x19970E910](DerivedStorage[5]);
      CFTypeRef v4 = (CFTypeRef)DerivedStorage[7];
      uint64_t v14 = DerivedStorage[6];
      if (v4) {
        CFTypeRef v4 = CFRetain(v4);
      }
      CFTypeRef v13 = v4;
      CFTypeRef v5 = (CFTypeRef)DerivedStorage[8];
      if (v5) {
        CFTypeRef v5 = CFRetain(v5);
      }
      CFTypeRef cf = v5;
      uint64_t SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
      if (SerializedAtomDataForSampleBuffer
        || (uint64_t SerializedAtomDataForSampleBuffer = FigXPCMessageSetAndConsumeVMData(),
            SerializedAtomDataForSampleBuffer))
      {
        uint64_t v7 = (const void *)SerializedAtomDataForSampleBuffer;
      }
      else
      {
        uint64_t v7 = (const void *)FigXPCRemoteClientSendSyncMessage();
        if (!v7)
        {
          uint64_t v10 = (const void *)DerivedStorage[7];
          DerivedStorage[6] = (v14 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
          DerivedStorage[7] = v13;
          if (v13) {
            CFRetain(v13);
          }
          if (v10) {
            CFRelease(v10);
          }
          uint64_t v7 = (const void *)DerivedStorage[8];
          DerivedStorage[8] = cf;
          if (cf) {
            CFRetain(cf);
          }
          if (v7)
          {
            CFRelease(v7);
            uint64_t v7 = 0;
          }
          goto LABEL_22;
        }
      }
      DerivedStorage[6] = 0;
      uint64_t v8 = (const void *)DerivedStorage[7];
      if (v8)
      {
        CFRelease(v8);
        DerivedStorage[7] = 0;
      }
      uint64_t v9 = (const void *)DerivedStorage[8];
      if (v9)
      {
        CFRelease(v9);
        DerivedStorage[8] = 0;
      }
LABEL_22:
      MEMORY[0x19970E930](DerivedStorage[5]);
      goto LABEL_23;
    }
  }
  uint64_t v7 = (const void *)ObjectID;
LABEL_23:
  FigXPCRelease();
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t audioRendererRemote_Flush(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v6 = 0;
  ObjectIOSurfaceID ID = audioRendererRemote_getObjectID(a1, &v6);
  if (ObjectID)
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v3 = FigXPCCreateBasicMessage();
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t audioRendererRemote_FlushFromMediaTime(const void *a1, long long *a2, void (*a3)(void, void), uint64_t a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v18 = 0;
  ObjectIOSurfaceID ID = audioRendererRemote_getObjectID((uint64_t)a1, &v18);
  if (ObjectID)
  {
    uint64_t v15 = ObjectID;
  }
  else
  {
    uint64_t v9 = FigXPCCreateBasicMessage();
    if (v9
      || (blocCFIndex k = *a2,
          uint64_t v21 = (void (*)(void *))*((void *)a2 + 2),
          uint64_t v9 = FigXPCMessageSetCMTime(),
          v9))
    {
      uint64_t v15 = v9;
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v11 = DerivedStorage;
      uint64_t v33 = 0;
      float v34 = &v33;
      uint64_t v35 = 0x2000000000;
      uint64_t v36 = 0;
      uint64_t v29 = 0;
      CFNumberRef v30 = &v29;
      uint64_t v31 = 0x2000000000;
      char v32 = 0;
      if (a3)
      {
        uint64_t v12 = *(NSObject **)(DerivedStorage + 16);
        *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
        *((void *)&block + 1) = 0x40000000;
        uint64_t v21 = __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke;
        uint64_t v22 = &unk_1E57A5720;
        uint64_t v23 = &v33;
        uint64_t v24 = a1;
        uint64_t v25 = v11;
        uint64_t v26 = a1;
        float v27 = a3;
        uint64_t v28 = a4;
        dispatch_sync(v12, &block);
        xpc_dictionary_set_uint64(0, "completionID", v34[3]);
        uint64_t v13 = a4;
      }
      else
      {
        a1 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v14 = FigXPCRemoteClientSendSyncMessage();
      uint64_t v15 = v14;
      if (a3 && v14)
      {
        uint64_t v16 = *(NSObject **)(v11 + 16);
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 0x40000000;
        v19[2] = __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2;
        v19[3] = &unk_1E57A5748;
        v19[6] = v11;
        v19[7] = a1;
        v19[8] = a3;
        v19[9] = v13;
        v19[4] = &v33;
        v19[5] = &v29;
        dispatch_sync(v16, v19);
      }
      if (*((unsigned char *)v30 + 24))
      {
        if (a3) {
          a3(v15, a4);
        }
        if (a1) {
          CFRelease(a1);
        }
      }
      FigXPCRemoteClientKillServerOnTimeout();
      _Block_object_dispose(&v29, 8);
      _Block_object_dispose(&v33, 8);
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

void __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 32);
  uint64_t v4 = 1;
  if ((unint64_t)(v3 + 1) > 1) {
    uint64_t v4 = v3 + 1;
  }
  *(void *)(DerivedStorage + 32) = v4;
  *(void *)(*(void *)(a1[4] + 8) + 24) = v3;
  CFTypeRef v5 = *(__CFDictionary **)(a1[6] + 24);
  if (v5)
  {
    uint64_t v6 = *(const void **)(*(void *)(a1[4] + 8) + 24);
    CFDictionarySetValue(v5, v6, a1 + 7);
  }
}

void __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2(void *a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1[6] + 24);
  if (v2)
  {
    if (CFDictionaryGetValueIfPresent(v2, *(const void **)(*(void *)(a1[4] + 8) + 24), 0))
    {
      uint64_t v3 = (const void *)a1[7];
      if (v3) {
        CFRetain(v3);
      }
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    }
    uint64_t v4 = *(__CFDictionary **)(a1[6] + 24);
    CFTypeRef v5 = *(const void **)(*(void *)(a1[4] + 8) + 24);
    CFDictionaryRemoveValue(v4, v5);
  }
}

uint64_t FigVideoQueueUtilityIsProcessASecureCaptureExtension(uint64_t a1)
{
  CFDictionaryRef v2 = (void *)MEMORY[0x199711A30]();
  uint64_t v5 = 0;
  uint64_t v3 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F963E8], "handleForIdentifier:error:", objc_msgSend(NSNumber, "numberWithInt:", a1), &v5), "bundle"), "extensionPointIdentifier"), "isEqualToString:", @"com.apple.securecapture");
  return v3;
}

uint64_t FigVideoQueueCreateLocal(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FPSupport_CheckPlayerPerformanceTrace();
  FigVideoQueueGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3) {
    return v3;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351450)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v6 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 8) = v6;
  if (!v6) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = FigReentrantMutexCreate();
  *(void *)(DerivedStorage + 408) = v7;
  if (!v7) {
    return FigSignalErrorAt();
  }
  CMTimeMake(&v25, 1, 1);
  *(CMTime *)(DerivedStorage + 416) = v25;
  CMTimeMake(&v25, 2, 1);
  *(CMTime *)(DerivedStorage + 440) = v25;
  *(_DWORD *)(DerivedStorage + 464) = 0;
  *(void *)(DerivedStorage + 488) = 0;
  *(void *)(DerivedStorage + 496) = 0;
  *(void *)(DerivedStorage + 504) = 6000000000;
  *(unsigned char *)(DerivedStorage + 401) = 0;
  *(void *)(DerivedStorage + 520) = dispatch_queue_create("com.apple.coremedia.videoqueue.notification", 0);
  *(void *)(DerivedStorage + 528) = dispatch_queue_create("com.apple.coremedia.videoqueue.cryptor", 0);
  uint64_t v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v8) {
    return FigSignalErrorAt();
  }
  uint64_t v9 = (void *)v8;
  dispatch_source_t v10 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 520));
  *(void *)(DerivedStorage + 512) = v10;
  if (!v10) {
    return FigSignalErrorAt();
  }
  uint64_t v11 = v10;
  dispatch_time_t v12 = dispatch_time(0, *(void *)(DerivedStorage + 504));
  dispatch_source_set_timer(v11, v12, *(void *)(DerivedStorage + 504), 0);
  dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 512), v9);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 512), (dispatch_function_t)FigVideoQueueGMStats);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 512), (dispatch_function_t)vq_handleGMStatsTimerCancellation);
  dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 512));
  *(unsigned char *)(DerivedStorage + 239) = 1;
  uint64_t v13 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 240) = v13;
  if (!v13) {
    return FigSignalErrorAt();
  }
  uint64_t v14 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 616) = v14;
  if (!v14) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(DerivedStorage + 629) = 1;
  uint64_t v15 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 304) = v15;
  if (!v15) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 296) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(DerivedStorage + 312) = 0;
  CFMutableArrayRef v18 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 320) = v18;
  if (!v18) {
    return FigSignalErrorAt();
  }
  AdoptedVoucherProcessIDAndUUIDCFStringRef String = FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
  if (AdoptedVoucherProcessIDAndUUIDString <= 0) {
    AdoptedVoucherProcessIDAndUUIDCFStringRef String = getpid();
  }
  *(_DWORD *)(DerivedStorage + 624) = AdoptedVoucherProcessIDAndUUIDString;
  uint64_t v20 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 576) = v20;
  if (!v20) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(DerivedStorage + 584) = 1;
  *(void *)(DerivedStorage + 600) = 0;
  CFUUIDRef v21 = CFUUIDCreate(v16);
  *(void *)(DerivedStorage + 560) = CFUUIDCreateString(v16, v21);
  if (v21) {
    CFRelease(v21);
  }
  if (dword_1E9351450)
  {
    uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v23 = 0;
  *a2 = 0;
  return v23;
}

void FigVideoQueueGMStats()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1E9351450)
    {
      int v5 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(void *)(DerivedStorage + 488) = 0;
    *(void *)(DerivedStorage + 496) = 0;
    CFRelease(v1);
  }
}

void vq_handleGMStatsTimerCancellation(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t vq_Invalidate(const void *a1)
{
  block[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    if (dword_1E9351450)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v4 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 480);
    if (v4)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 368), v4);
      *(void *)(DerivedStorage + 480) = 0;
    }
    int v5 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 472);
    if (v5)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 368), v5);
      *(void *)(DerivedStorage + 472) = 0;
    }
    uint64_t v6 = *(NSObject **)(DerivedStorage + 512);
    if (v6)
    {
      dispatch_source_cancel(v6);
      uint64_t v7 = *(NSObject **)(DerivedStorage + 512);
      if (v7)
      {
        dispatch_release(v7);
        *(void *)(DerivedStorage + 512) = 0;
      }
    }
    uint64_t v8 = *(NSObject **)(DerivedStorage + 520);
    if (v8 && v8 != dispatch_get_current_queue()) {
      dispatch_sync(v8, &__block_literal_global_83);
    }
    uint64_t v9 = (void *)CMBaseObjectGetDerivedStorage();
    DefaultLocalCenter = (const void *)CMNotificationCenterGetDefaultLocalCenter();
    if (v9[45])
    {
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
    }
    uint64_t v11 = v9[66];
    block[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
    block[1] = (CFTypeRef)3221225472;
    block[2] = __vq_removeListeners_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    void block[4] = v9;
    void block[5] = DefaultLocalCenter;
    void block[6] = a1;
    dispatch_sync(v11, block);
    FigStopForwardingMediaServicesProcessDeathNotification();
    vq_removeTimebaseListeners();
    dispatch_time_t v12 = *(NSObject **)(DerivedStorage + 528);
    if (v12 && v12 != dispatch_get_current_queue()) {
      dispatch_sync(v12, &__block_literal_global_15_1);
    }
    uint64_t v13 = *(void *)(DerivedStorage + 360);
    if (v13)
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v13);
      if (FigBaseObject)
      {
        uint64_t v15 = FigBaseObject;
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v17 = v16 ? v16 : 0;
        CFMutableArrayRef v18 = *(void (**)(uint64_t))(v17 + 24);
        if (v18) {
          v18(v15);
        }
      }
    }
    uint64_t v19 = *(opaqueCMBufferQueue **)(DerivedStorage + 368);
    if (v19) {
      CMBufferQueueReset(v19);
    }
    if (*(void *)(DerivedStorage + 48)) {
      CAImageQueueFlush();
    }
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 280);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 280), i);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      CMTime v25 = *(void (**)(const void *))(v24 + 16);
      if (v25) {
        v25(ValueAtIndex);
      }
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 304));
    for (CFIndex j = 0; ; ++j)
    {
      CFArrayRef v27 = *(const __CFArray **)(DerivedStorage + 296);
      if (v27) {
        CFArrayRef v27 = (const __CFArray *)CFArrayGetCount(v27);
      }
      if (j >= (uint64_t)v27) {
        break;
      }
      uint64_t v28 = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 296), j);
      if (CFArrayGetCount(v28[3]) >= 1)
      {
        CFIndex v29 = 0;
        do
        {
          block[0] = 0;
          VideoTargetInfoCopyCAImageQueueAtIndex((uint64_t)v28, v29, (uint64_t)block);
          if (block[0])
          {
            CAImageQueueFlush();
            CFRelease(block[0]);
          }
          ++v29;
        }
        while (v29 < CFArrayGetCount(v28[3]));
      }
    }
    block[0] = 0;
    CFArrayRef v30 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 288);
    CFAllocatorRef v31 = CFGetAllocator(a1);
    if (!FigDataChannelConfigurationCreate(v31, 0, (uint64_t *)block))
    {
      CFIndex v32 = 0;
      if (!v30) {
        goto LABEL_53;
      }
LABEL_52:
      for (CFIndex k = CFArrayGetCount(v30); v32 < k; CFIndex k = 0)
      {
        float v34 = CFArrayGetValueAtIndex(v30, v32);
        CFTypeRef v35 = block[0];
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v38 = *(void (**)(const void *, CFTypeRef))(v37 + 72);
        if (v38) {
          v38(v34, v35);
        }
        ++v32;
        if (v30) {
          goto LABEL_52;
        }
LABEL_53:
        ;
      }
    }
    if (block[0]) {
      CFRelease(block[0]);
    }
    FigCFArrayRemoveAllValues();
    FigCFArrayRemoveAllValues();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 304));
    uint64_t v39 = *(const void **)(DerivedStorage + 256);
    if (v39)
    {
      FigSyncMomentSourceDestroy(v39);
      *(void *)(DerivedStorage + 256) = 0;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
    CFArrayRef v40 = *(const void **)(DerivedStorage + 248);
    if (v40)
    {
      CFRelease(v40);
      *(void *)(DerivedStorage + 248) = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 240));
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 616));
    uint64_t v41 = *(const void **)(DerivedStorage + 608);
    if (v41)
    {
      CFRelease(v41);
      *(void *)(DerivedStorage + 608) = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 616));
    uint64_t v42 = *(const void **)(DerivedStorage + 640);
    if (v42)
    {
      CFRelease(v42);
      *(void *)(DerivedStorage + 640) = 0;
    }
    uint64_t v43 = *(const void **)(DerivedStorage + 648);
    if (v43)
    {
      CFRelease(v43);
      *(void *)(DerivedStorage + 648) = 0;
    }
    CFArrayRef v44 = *(const void **)(DerivedStorage + 560);
    if (v44)
    {
      CFRelease(v44);
      *(void *)(DerivedStorage + 560) = 0;
    }
  }
  return 0;
}

void vq_Finalize(const void *a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  vq_Invalidate(a1);
  cf[0] = 0;
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (!FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)cf))
  {
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(v4 + 40), (uint64_t)"vq_removeVideoLayer");
    *(void *)(v4 + 40) = 0;
    FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf[0], *(void **)(v4 + 24), (uint64_t)"vq_removeVideoLayer");

    *(void *)(v4 + 24) = 0;
    FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf[0], *(void **)(v4 + 16), (uint64_t)"vq_removeVideoLayer");

    *(void *)(v4 + 16) = 0;
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(v4 + 64), (uint64_t)"vq_removeVideoLayer");
    *(void *)(v4 + 64) = 0;
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(v4 + 48), (uint64_t)"vq_removeVideoLayer");
    *(void *)(v4 + 48) = 0;
    uint64_t v5 = FigOSTransactionCreate();
    FPSupport_AppendDeferredTransactionChangeToReleaseOSTransaction((uint64_t)cf[0], v5, (uint64_t)"vq_removeVideoLayer");
    FigDeferredTransactionCommit((uint64_t)cf[0]);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  FigSimpleMutexDestroy();
  DerivedStorage[51] = 0;
  if (DerivedStorage[30])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[30] = 0;
  }
  if (DerivedStorage[77])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[77] = 0;
  }
  uint64_t v6 = DerivedStorage[65];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[65] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[47];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[47] = 0;
  }
  uint64_t v8 = (const void *)DerivedStorage[79];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[79] = 0;
  }
  uint64_t v9 = DerivedStorage[66];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[66] = 0;
  }
  dispatch_source_t v10 = (const void *)DerivedStorage[43];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[43] = 0;
  }
  uint64_t v11 = (const void *)DerivedStorage[44];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[44] = 0;
  }
  dispatch_time_t v12 = (const void *)DerivedStorage[45];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[45] = 0;
  }
  uint64_t v13 = (const void *)DerivedStorage[46];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[46] = 0;
  }
  uint64_t v14 = (const void *)DerivedStorage[49];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[49] = 0;
  }
  uint64_t v15 = (const void *)DerivedStorage[69];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[69] = 0;
  }
  uint64_t v16 = (const void *)DerivedStorage[1];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[1] = 0;
  }
  uint64_t v17 = (const void *)DerivedStorage[7];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[7] = 0;
  }
  CFMutableArrayRef v18 = (const void *)DerivedStorage[33];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[33] = 0;
  }
  uint64_t v19 = (const void *)DerivedStorage[34];
  if (v19)
  {
    CFRelease(v19);
    DerivedStorage[34] = 0;
  }
  uint64_t v20 = (const void *)DerivedStorage[35];
  if (v20)
  {
    CFRelease(v20);
    DerivedStorage[35] = 0;
  }
  CFUUIDRef v21 = (const void *)DerivedStorage[36];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[36] = 0;
  }
  uint64_t v22 = (const void *)DerivedStorage[37];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[37] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[38] = 0;
  uint64_t v23 = (const void *)DerivedStorage[40];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[40] = 0;
  }
  uint64_t v24 = DerivedStorage[72];
  if (v24)
  {
    dispatch_release(v24);
    DerivedStorage[72] = 0;
  }
  CMTime v25 = (const void *)DerivedStorage[74];
  if (v25)
  {
    CFRelease(v25);
    DerivedStorage[74] = 0;
  }
}

__CFString *vq_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(_DWORD *)DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoQueue %p retainCount: %ld%s allocator: %p, ", a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, @"videoRenderPipeline %@\n", *(void *)(DerivedStorage + 360));
  CFStringAppendFormat(Mutable, 0, @"Layer Image Queue %@, CAImageQueue %@\n", *(void *)(DerivedStorage + 56), *(void *)(DerivedStorage + 48));
  CFStringAppendFormat(Mutable, 0, @"VisualContextArray %@, ImageQueueArray %@\n", *(void *)(DerivedStorage + 264), *(void *)(DerivedStorage + 280));
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 288);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 288), i);
    uint64_t v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 296), i);
    CFStringAppendFormat(Mutable, 0, @"VideoTarget %@, ImageQueues %@\n", ValueAtIndex, v11[3]);
  }
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t vq_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CVPixelBufferRef *a4)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x2020000000;
  int v40 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    if (CFEqual(a2, @"VideoQueue_CAContextID"))
    {
      if (*(void *)(DerivedStorage + 64))
      {
        dispatch_source_t v10 = (void *)MEMORY[0x199711A30]();
        int valuePtr = [*(id *)(DerivedStorage + 64) contextId];
        *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        if (dword_1E9351450)
        {
          int v35 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_24;
      }
      goto LABEL_10;
    }
    if (CFEqual(a2, @"VisualContextArray"))
    {
      dispatch_time_t v12 = *(void **)(DerivedStorage + 264);
      if (v12) {
        goto LABEL_22;
      }
    }
    else if (CFEqual(a2, @"VisualContextArrayOptions"))
    {
      dispatch_time_t v12 = *(void **)(DerivedStorage + 272);
      if (v12) {
        goto LABEL_22;
      }
    }
    else
    {
      if (!CFEqual(a2, @"VideoTargetArray"))
      {
        if (CFEqual(a2, @"ShouldWaitForVideoTarget"))
        {
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
          if (!*(unsigned char *)(DerivedStorage + 312)) {
            uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          }
          dispatch_time_t v12 = (void *)*v14;
          if (!*v14) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
        if (CFEqual(a2, @"CurrentDisplayedVideoFrameRate"))
        {
          uint64_t v16 = *(void *)(DerivedStorage + 360);
          if (v16)
          {
            int v13 = FigRenderPipelineCopyProperty(v16, @"CurrentVideoFrameRate", (uint64_t)a3, (uint64_t)a4);
            goto LABEL_11;
          }
        }
        else
        {
          if (!CFEqual(a2, @"PerformanceDictionary"))
          {
            if (CFEqual(a2, @"VideoQueue_ControlTimebase"))
            {
              dispatch_time_t v12 = *(void **)(DerivedStorage + 552);
              if (!v12) {
                goto LABEL_23;
              }
              goto LABEL_22;
            }
            if (CFEqual(a2, @"VideoQueue_SupportsRotation"))
            {
              dispatch_time_t v12 = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
              goto LABEL_23;
            }
            if (CFEqual(a2, @"ExternalProtectionStatus"))
            {
              uint64_t v20 = *(NSObject **)(DerivedStorage + 528);
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 3221225472;
              block[2] = __vq_CopyProperty_block_invoke;
              block[3] = &unk_1E579CFC0;
              void block[4] = &v37;
              void block[5] = DerivedStorage;
              void block[6] = a4;
              void block[7] = a3;
              dispatch_sync(v20, block);
              goto LABEL_24;
            }
            if (CFEqual(a2, @"ForceFullPowerDecode"))
            {
              CFUUIDRef v21 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
              if (!*(unsigned char *)(DerivedStorage + 400)) {
                CFUUIDRef v21 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
              }
              dispatch_time_t v12 = (void *)*v21;
              if (!*v21) {
                goto LABEL_23;
              }
              goto LABEL_22;
            }
            if (CFEqual(a2, @"PreventsCapture"))
            {
              uint64_t v22 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
              if (!*(unsigned char *)(DerivedStorage + 337)) {
                uint64_t v22 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
              }
              dispatch_time_t v12 = (void *)*v22;
              if (!*v22) {
                goto LABEL_23;
              }
              goto LABEL_22;
            }
            if (CFEqual(a2, @"ToneMapToStandardDynamicRange"))
            {
              uint64_t v23 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
              if (!*(unsigned char *)(DerivedStorage + 236)) {
                uint64_t v23 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
              }
              dispatch_time_t v12 = (void *)*v23;
              if (!*v23) {
                goto LABEL_23;
              }
              goto LABEL_22;
            }
            if (CFEqual(a2, @"CurrentlyDisplayedCVPixelBuffer"))
            {
              uint64_t v24 = *(void *)(DerivedStorage + 48);
              if (v24)
              {
                int v13 = FigVideoQueue_CopyCurrentlyDisplayedPixelBufferFromCAImageQueue(v24, a3, a4);
                goto LABEL_11;
              }
              *a4 = 0;
              uint64_t v26 = v38;
              int v27 = -12080;
            }
            else
            {
              if (CFEqual(a2, @"DisallowVideoLayerDisplayCompositing"))
              {
                CMTime v25 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
                if (!*(unsigned char *)(DerivedStorage + 238)) {
                  CMTime v25 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
                }
                dispatch_time_t v12 = (void *)*v25;
                if (!*v25) {
                  goto LABEL_23;
                }
                goto LABEL_22;
              }
              if (CFEqual(a2, @"IsImageQueueBeingServiced"))
              {
                isImageQueueBeingServicedouble d = vq_isImageQueueBeingServiced();
                CFIndex v29 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
                if (!isImageQueueBeingServiced) {
                  CFIndex v29 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
                }
                dispatch_time_t v12 = (void *)*v29;
                if (!*v29) {
                  goto LABEL_23;
                }
                goto LABEL_22;
              }
              if (CFEqual(a2, @"IsImageQueueAsync"))
              {
                if (!*(void *)(DerivedStorage + 48)) {
                  goto LABEL_24;
                }
                char Flags = CAImageQueueGetFlags();
                CFAllocatorRef v31 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
                if ((Flags & 1) == 0) {
                  CFAllocatorRef v31 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
                }
                dispatch_time_t v12 = (void *)*v31;
                if (!*v31) {
                  goto LABEL_23;
                }
                goto LABEL_22;
              }
              if (CFEqual(a2, @"CompensateForDisplayLatency"))
              {
                CFIndex v32 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
                if (*(unsigned char *)(DerivedStorage + 239)) {
                  CFIndex v32 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
                }
                dispatch_time_t v12 = (void *)CFRetain(*v32);
                goto LABEL_23;
              }
              uint64_t v26 = v38;
              int v27 = -12082;
            }
            *((_DWORD *)v26 + 6) = v27;
            goto LABEL_24;
          }
          if (*(void *)(DerivedStorage + 360))
          {
            cf[0] = 0;
            int v17 = vq_copyPerformanceDictionary(a1, (uint64_t)a3, cf);
            *((_DWORD *)v38 + 6) = v17;
            CFTypeRef v18 = cf[0];
            if (!v17)
            {
              if (cf[0]) {
                uint64_t v19 = (__CVBuffer *)CFRetain(cf[0]);
              }
              else {
                uint64_t v19 = 0;
              }
              *a4 = v19;
            }
            if (v18) {
              CFRelease(v18);
            }
            goto LABEL_24;
          }
        }
LABEL_10:
        int v13 = FigSignalErrorAt();
LABEL_11:
        *((_DWORD *)v38 + 6) = v13;
LABEL_24:
        uint64_t v9 = *((unsigned int *)v38 + 6);
        goto LABEL_25;
      }
      dispatch_time_t v12 = *(void **)(DerivedStorage + 288);
      if (v12) {
LABEL_22:
      }
        dispatch_time_t v12 = (void *)CFRetain(v12);
    }
LABEL_23:
    *a4 = (CVPixelBufferRef)v12;
    goto LABEL_24;
  }
  uint64_t v9 = FigSignalErrorAt();
LABEL_25:
  _Block_object_dispose(&v37, 8);
  return v9;
}

void sub_19454E8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t vq_SetProperty(const void *a1, const void *a2, void *a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  uint64_t v8 = DerivedStorage;
  if (CFEqual(a2, @"VideoQueue_DisplayLayer"))
  {
    if (!*((void *)v8 + 3)) {
      vq_setupVideoLayer();
    }
    *((unsigned char *)v8 + 338) = 0;
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    dispatch_source_t v10 = (void *)MEMORY[0x199711A30]();
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    uint64_t v11 = *(void **)(v9 + 24);
    if (v11) {
      [v11 removeFromSuperlayer];
    }
    dispatch_time_t v12 = *(void **)(v9 + 40);
    if (v12)
    {

      *(void *)(v9 + 40) = 0;
    }
    if (a3)
    {
      *(void *)(v9 + 40) = a3;
      id v13 = a3;
      [*(id *)(v9 + 40) setMasksToBounds:1];
      [*(id *)(v9 + 40) addSublayer:*(void *)(v9 + 24)];
    }
    [MEMORY[0x1E4F39CF8] commit];
    if (dword_1E9351450)
    {
      int v82 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vq_setSynchronizedLayers();
    goto LABEL_26;
  }
  if (CFEqual(a2, @"VideoQueue_DisplayBounds"))
  {
    memset(&rect, 0, sizeof(rect));
    if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &rect))
    {
      CGFloat x = rect.origin.x;
      CGFloat y = rect.origin.y;
      CGFloat width = rect.size.width;
      CGFloat height = rect.size.height;
      uint64_t v19 = CMBaseObjectGetDerivedStorage();
      v86.origin.CGFloat x = x;
      v86.origin.CGFloat y = y;
      v86.size.CGFloat width = width;
      v86.size.CGFloat height = height;
      if (!CGRectEqualToRect(v86, *(CGRect *)(v19 + 200)))
      {
        uint64_t v20 = (void *)MEMORY[0x199711A30]();
        *(CGFloat *)(v19 + 200) = x;
        *(CGFloat *)(v19 + 208) = y;
        *(CGFloat *)(v19 + 216) = width;
        *(CGFloat *)(v19 + 224) = height;
        [MEMORY[0x1E4F39CF8] begin];
        if (!pthread_main_np()) {
          [MEMORY[0x1E4F39CF8] activateBackground:1];
        }
        [MEMORY[0x1E4F39CF8] setDisableActions:1];
        CFUUIDRef v21 = *(void **)(v19 + 40);
        uint64_t v22 = *(void **)(v19 + 24);
        if (v21)
        {
          [v21 bounds];
          CGFloat v24 = v23;
          CGFloat v26 = v25;
          CGFloat v28 = v27;
          CGFloat v30 = v29;
        }
        else
        {
          CGFloat v24 = *(double *)(v19 + 200);
          CGFloat v26 = *(double *)(v19 + 208);
          CGFloat v28 = *(double *)(v19 + 216);
          CGFloat v30 = *(double *)(v19 + 224);
        }
        v87.origin.CGFloat x = v24;
        v87.origin.CGFloat y = v26;
        v87.size.CGFloat width = v28;
        v87.size.CGFloat height = v30;
        double MidX = CGRectGetMidX(v87);
        v88.origin.CGFloat x = v24;
        v88.origin.CGFloat y = v26;
        v88.size.CGFloat width = v28;
        v88.size.CGFloat height = v30;
        objc_msgSend(v22, "setPosition:", MidX, CGRectGetMidY(v88));
        objc_msgSend(*(id *)(v19 + 24), "setBounds:", *(double *)(v19 + 200), *(double *)(v19 + 208), *(double *)(v19 + 216), *(double *)(v19 + 224));
        [*(id *)(v19 + 24) setMasksToBounds:1];
        objc_msgSend(*(id *)(v19 + 16), "setBounds:", *(double *)(v19 + 200), *(double *)(v19 + 208), *(double *)(v19 + 216), *(double *)(v19 + 224));
        [MEMORY[0x1E4F39CF8] commit];
      }
      goto LABEL_26;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"VideoQueue_MakeCAContextForRemoteHost"))
  {
    if (!*((void *)v8 + 3)) {
      vq_setupVideoLayer();
    }
    *((unsigned char *)v8 + 338) = 0;
    uint64_t v32 = CMBaseObjectGetDerivedStorage();
    uint64_t v33 = (void *)MEMORY[0x199711A30]();
    if (!*(void *)(v32 + 64))
    {
      if (*(unsigned char *)(v32 + 656)) {
        uint64_t v34 = *MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v34 = *MEMORY[0x1E4F1CFC8];
      }
      uint64_t v35 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", @"FigVideoQueue_CAContext", *MEMORY[0x1E4F39E60], *MEMORY[0x1E4F1CFD0], *MEMORY[0x1E4F39E80], v34, *MEMORY[0x1E4F39E90], 0);
      uint64_t v36 = (const void *)[MEMORY[0x1E4F39D28] contextWithOptions:v35];
      *(void *)(v32 + 64) = v36;
      if (!v36)
      {
        *(double *)&uint64_t v31 = COERCE_DOUBLE(FigSignalErrorAt());
LABEL_40:
        return v31;
      }
      CFRetain(v36);
    }
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    [*(id *)(v32 + 64) setLayer:*(void *)(v32 + 24)];
    [MEMORY[0x1E4F39CF8] commit];
    *(double *)&uint64_t v31 = 0.0;
    goto LABEL_40;
  }
  if (CFEqual(a2, @"ClientPID"))
  {
    uint64_t v31 = *((uint64_t *)v8 + 80);
    *((void *)v8 + 80) = a3;
    if (!a3) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (CFEqual(a2, @"ClientBundleIdentifier"))
  {
    uint64_t v31 = *((uint64_t *)v8 + 81);
    *((void *)v8 + 81) = a3;
    if (!a3)
    {
LABEL_51:
      if (*(double *)&v31 == 0.0) {
        return v31;
      }
      CGFloat v39 = *(double *)&v31;
      goto LABEL_53;
    }
LABEL_50:
    CFRetain(a3);
    goto LABEL_51;
  }
  if (CFEqual(a2, @"VideoQueue_EnablePerFrameStats"))
  {
    if (a3)
    {
      CFGetTypeID(a3);
      CFBooleanGetTypeID();
    }
    goto LABEL_26;
  }
  if (CFEqual(a2, @"PreventsCapture"))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v40 = CFGetTypeID(a3);
    if (v40 != CFBooleanGetTypeID()) {
      goto LABEL_2;
    }
    *((unsigned char *)v8 + 337) = CFBooleanGetValue((CFBooleanRef)a3);
    *((unsigned char *)v8 + 338) = 0;
    vq_updateImageQueueProtection();
    goto LABEL_26;
  }
  if (CFEqual(a2, @"VideoQueue_DecoderUsage"))
  {
    uint64_t v41 = (const void *)*((void *)v8 + 49);
    *((void *)v8 + 49) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v41) {
      CFRelease(v41);
    }
    uint64_t v42 = *((void *)v8 + 45);
    if (v42) {
      FigRenderPipelineSetProperty_0(v42, @"VideoDecoderUsage", *((void *)v8 + 49));
    }
    goto LABEL_26;
  }
  if (CFEqual(a2, @"VideoQueue_ControlTimebase"))
  {
    if (*((unsigned char *)v8 + 544)) {
      goto LABEL_2;
    }
    if (a3)
    {
      TypeIOSurfaceID ID = CMTimebaseGetTypeID();
      if (TypeID != CFGetTypeID(a3)) {
        goto LABEL_2;
      }
      vq_removeTimebaseListeners();
      CFTypeRef v45 = (const void *)*((void *)v8 + 69);
      *((void *)v8 + 69) = a3;
      CFRetain(a3);
    }
    else
    {
      vq_removeTimebaseListeners();
      CFTypeRef v45 = (const void *)*((void *)v8 + 69);
      *((void *)v8 + 69) = 0;
    }
    if (v45) {
      CFRelease(v45);
    }
    if (dword_1E9351450)
    {
      int v82 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFArrayRef v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vq_addTimebaseListeners();
    vq_updateForCurrentTimebaseRate(a1);
    goto LABEL_26;
  }
  if (CFEqual(a2, @"ForceFullPowerDecode"))
  {
    if (a3)
    {
      CFTypeID v43 = CFGetTypeID(a3);
      if (v43 == CFBooleanGetTypeID())
      {
        *(double *)&uint64_t v31 = 0.0;
        *((unsigned char *)v8 + 400) = CFBooleanGetValue((CFBooleanRef)a3);
      }
      else
      {
        *(double *)&uint64_t v31 = COERCE_DOUBLE(FigSignalErrorAt());
      }
    }
    else
    {
      *(double *)&uint64_t v31 = 0.0;
      *((unsigned char *)v8 + 400) = 0;
    }
    uint64_t v49 = *((void *)v8 + 45);
    if (v49)
    {
      unsigned int v50 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      if (!*((unsigned char *)v8 + 400)) {
        unsigned int v50 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      FigRenderPipelineSetProperty_0(v49, @"ForceFullPowerDecode", *v50);
    }
    return v31;
  }
  if (!CFEqual(a2, @"PreventDisplaySleepDuringVideoPlayback"))
  {
    if (CFEqual(a2, @"PreventAutomaticBackgroundingDuringVideoPlayback"))
    {
      if (!a3) {
        goto LABEL_2;
      }
      CFTypeID v51 = CFGetTypeID(a3);
      if (v51 != CFBooleanGetTypeID()) {
        goto LABEL_2;
      }
      int Value = CFBooleanGetValue((CFBooleanRef)a3);
      if (*((unsigned __int8 *)v8 + 584) != Value)
      {
        *((unsigned char *)v8 + 584) = Value;
        vq_updateVideoPlaybackAssertion(a1);
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, @"UpcomingOutputPTSRangeChanged"))
    {
      if (!a3) {
        goto LABEL_2;
      }
      CFTypeID v53 = CFGetTypeID(a3);
      if (v53 != CFDictionaryGetTypeID()) {
        goto LABEL_2;
      }
      if (*((void *)v8 + 46))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterPostNotification();
      }
      MEMORY[0x19970E910](*((void *)v8 + 77));
      uint64_t v56 = (const void *)*((void *)v8 + 76);
      *((void *)v8 + 76) = a3;
      CFRetain(a3);
      if (v56) {
        CFRelease(v56);
      }
      uint64_t v57 = *((void *)v8 + 77);
LABEL_123:
      MEMORY[0x19970E930](v57);
      goto LABEL_26;
    }
    if (CFEqual(a2, @"InhibitCATransactionCommitTime"))
    {
      if (a3)
      {
        CFTypeID v54 = CFGetTypeID(a3);
        if (v54 != CFBooleanGetTypeID()) {
          goto LABEL_2;
        }
        *(double *)&uint64_t v31 = 0.0;
        *((unsigned char *)v8 + 237) = CFBooleanGetValue((CFBooleanRef)a3);
      }
      else
      {
        *(double *)&uint64_t v31 = 0.0;
        *((unsigned char *)v8 + 237) = 0;
      }
      return v31;
    }
    if (CFEqual(a2, @"VisualContextArray"))
    {
      if (*((unsigned char *)v8 + 544)) {
        goto LABEL_2;
      }
      if (!a3)
      {
        uint64_t v31 = *((uint64_t *)v8 + 33);
        *((void *)v8 + 33) = 0;
        goto LABEL_51;
      }
      CFTypeID v55 = CFArrayGetTypeID();
      if (v55 != CFGetTypeID(a3)) {
        goto LABEL_2;
      }
      uint64_t v31 = *((uint64_t *)v8 + 33);
      *((void *)v8 + 33) = a3;
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VisualContextArrayOptions"))
    {
      if (*((unsigned char *)v8 + 544)) {
        goto LABEL_2;
      }
      if (!a3)
      {
        uint64_t v31 = *((uint64_t *)v8 + 34);
        *((void *)v8 + 34) = 0;
        goto LABEL_51;
      }
      CFTypeID v58 = CFArrayGetTypeID();
      if (v58 != CFGetTypeID(a3)) {
        goto LABEL_2;
      }
      uint64_t v31 = *((uint64_t *)v8 + 34);
      *((void *)v8 + 34) = a3;
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VideoTargetArray"))
    {
      if (*((unsigned char *)v8 + 544)) {
        goto LABEL_2;
      }
      if (a3)
      {
        CFTypeID v59 = CFArrayGetTypeID();
        if (v59 != CFGetTypeID(a3)) {
          goto LABEL_2;
        }
      }
      MEMORY[0x19970E910](*((void *)v8 + 38));
      CFArrayRef v60 = (const __CFArray *)*((void *)v8 + 36);
      if (v60)
      {
        CFIndex Count = CFArrayGetCount(v60);
        CFTypeRef v62 = (const void *)*((void *)v8 + 36);
      }
      else
      {
        CFTypeRef v62 = 0;
        CFIndex Count = 0;
      }
      *((void *)v8 + 36) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v62) {
        CFRelease(v62);
      }
      *((unsigned char *)v8 + 338) = 0;
      CFArrayRef v69 = (const __CFArray *)*((void *)v8 + 36);
      if (v69) {
        CFIndex v70 = CFArrayGetCount(v69);
      }
      else {
        CFIndex v70 = 0;
      }
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)v8 + 37));
      uint64_t v71 = 0;
      uint64_t v72 = *MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFArrayRef v73 = (const __CFArray *)*((void *)v8 + 36);
        if (v73) {
          CFArrayRef v73 = (const __CFArray *)CFArrayGetCount(v73);
        }
        if (v71 >= (uint64_t)v73) {
          break;
        }
        rect.origin.CGFloat x = 0.0;
        VideoTargetInfoCreate(v72, &rect);
        CFArrayAppendValue(*((CFMutableArrayRef *)v8 + 37), *(const void **)&rect.origin.x);
        CFRelease(*(CFTypeRef *)&rect.origin.x);
        ++v71;
      }
      MEMORY[0x19970E930](*((void *)v8 + 38));
      if (v70 == Count) {
        goto LABEL_26;
      }
      uint64_t v66 = (uint64_t)a1;
      int v67 = 2;
      int v65 = 0;
      uint64_t v68 = v70;
    }
    else
    {
      if (!CFEqual(a2, @"ShouldWaitForVideoTarget"))
      {
        if (CFEqual(a2, @"AllowAlternateVideoDecoderSelection"))
        {
          *(double *)&uint64_t v31 = 0.0;
          *((unsigned char *)v8 + 628) = (void *)*MEMORY[0x1E4F1CFD0] == a3;
          return v31;
        }
        if (CFEqual(a2, @"ToneMapToStandardDynamicRange"))
        {
          if (!a3) {
            goto LABEL_2;
          }
          CFTypeID v74 = CFGetTypeID(a3);
          if (v74 != CFBooleanGetTypeID()) {
            goto LABEL_2;
          }
          int v75 = CFBooleanGetValue((CFBooleanRef)a3);
          *((unsigned char *)v8 + 236) = v75;
          [*((id *)v8 + 2) setToneMapToStandardDynamicRange:v75 != 0];
          goto LABEL_26;
        }
        if (CFEqual(a2, @"EnableFlushCAToRemoveImage"))
        {
          *(double *)&uint64_t v31 = 0.0;
          *((unsigned char *)v8 + 629) = (void *)*MEMORY[0x1E4F1CFC8] != a3;
          return v31;
        }
        if (CFEqual(a2, @"DisplayList"))
        {
          uint64_t v76 = *((void *)v8 + 66);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __vq_SetProperty_block_invoke;
          block[3] = &__block_descriptor_48_e5_v8__0l;
          void block[4] = v8;
          void block[5] = a3;
          dispatch_sync(v76, block);
          goto LABEL_26;
        }
        if (CFEqual(a2, @"DisallowVideoLayerDisplayCompositing"))
        {
          int v77 = *MEMORY[0x1E4F1CFD0] == (void)a3;
          if (*((unsigned __int8 *)v8 + 238) == v77) {
            goto LABEL_26;
          }
          *((unsigned char *)v8 + 238) = v77;
          if (!*((void *)v8 + 2)) {
            goto LABEL_26;
          }
          rect.origin.CGFloat x = 0.0;
          uint64_t v37 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&rect);
          if (v37) {
            return v37;
          }
          FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(*(const void **)&rect.origin.x, *((const void **)v8 + 2), *((unsigned char *)v8 + 238) == 0, (uint64_t)"vq_SetProperty");
          FigDeferredTransactionCommit(*(uint64_t *)&rect.origin.x);
          CGFloat v39 = rect.origin.x;
          if (!*(void *)&rect.origin.x)
          {
LABEL_26:
            *(double *)&uint64_t v31 = 0.0;
            return v31;
          }
LABEL_53:
          CFRelease(*(CFTypeRef *)&v39);
          goto LABEL_26;
        }
        if (!CFEqual(a2, @"CompensateForDisplayLatency"))
        {
          if (!CFEqual(a2, @"ClientIsSecureCaptureExtension")) {
            return 4294955214;
          }
          *(double *)&uint64_t v31 = 0.0;
          *((unsigned char *)v8 + 656) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          return v31;
        }
        char v78 = *MEMORY[0x1E4F1CFC8] != (void)a3;
        *((unsigned char *)v8 + 239) = v78;
        MEMORY[0x19970E910](*((void *)v8 + 30));
        uint64_t v79 = *((void *)v8 + 31);
        if (v79) {
          FigLayerSynchronizerSetCompensateForDisplayLatency(v79, v78);
        }
        uint64_t v57 = *((void *)v8 + 30);
        goto LABEL_123;
      }
      if (!a3) {
        goto LABEL_2;
      }
      CFTypeID v63 = CFGetTypeID(a3);
      if (v63 != CFBooleanGetTypeID()) {
        goto LABEL_2;
      }
      int v64 = CFBooleanGetValue((CFBooleanRef)a3);
      if (*((unsigned __int8 *)v8 + 312) == v64) {
        goto LABEL_26;
      }
      int v65 = v64;
      uint64_t v66 = (uint64_t)a1;
      int v67 = 1;
      uint64_t v68 = 0;
    }
    vq_handleWaitForVideoTargetConditionChange(v66, v67, v65, v68);
    goto LABEL_26;
  }
  if (!a3) {
    goto LABEL_2;
  }
  CFTypeID v46 = CFGetTypeID(a3);
  if (v46 != CFBooleanGetTypeID()) {
    goto LABEL_2;
  }
  *((unsigned char *)v8 + 401) = 1;
  *((unsigned char *)v8 + 402) = CFBooleanGetValue((CFBooleanRef)a3);
  uint64_t v47 = *((void *)v8 + 45);
  if (!v47) {
    goto LABEL_26;
  }

  return FigRenderPipelineSetProperty_0(v47, @"PreventDisplaySleepDuringVideoPlayback", (uint64_t)a3);
}

uint64_t vq_removeTimebaseListeners()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CMNotificationCenterGetDefaultLocalCenter();
  if (*(void *)(DerivedStorage + 552))
  {
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t VideoTargetInfoCopyCAImageQueueAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = FigCFArrayGetValueAtIndex();
  if (result)
  {
    uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(result);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v7 = v8;
    uint64_t v9 = v8 ? v7 : 0;
    dispatch_source_t v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v9 + 48);
    if (v10)
    {
      uint64_t v11 = *MEMORY[0x1E4F1CF80];
      return v10(FigBaseObject, @"CAImageQueue", v11, a3);
    }
  }
  return result;
}

_DWORD *vq_ImageReleased()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_DecodeError()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_sBufConsumed()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result) {
    return (_DWORD *)FigCFDictionaryGetBooleanIfPresent();
  }
  return result;
}

_DWORD *vq_completedDecodeForPreroll()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_lostDecoderState()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_firstVideoFrameEnqueued()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t __vq_removeListeners_block_invoke(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 376))
  {
    uint64_t v1 = result;
    FigNotificationCenterRemoveWeakListener();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v2 = *(void *)(*(void *)(v1 + 32) + 376);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? (void *)v4 : 0;
    if (*v6 >= 2uLL)
    {
      uint64_t v7 = (uint64_t (*)(uint64_t))v6[8];
      if (v7)
      {
        return v7(v2);
      }
    }
  }
  return result;
}

_DWORD *vq_ExternalProtectionStatusChanged()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

void vq_ReadyToDecryptChanged()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v2 = *(void *)(DerivedStorage + 376);
    if (v2)
    {
      CFTypeRef cf = 0;
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v4 = v3 ? v3 : 0;
      uint64_t v5 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
      if (!v5 || v5(v2, *MEMORY[0x1E4F1FDF8], *MEMORY[0x1E4F1CF80], &cf)) {
        goto LABEL_22;
      }
      CFTypeRef v10 = cf;
      CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      if (cf) {
        CFRelease(cf);
      }
      if (v10 == v11)
      {
LABEL_22:
        if (*(unsigned char *)(v1 + 545))
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v1 + 360));
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v7) {
            uint64_t v8 = v7;
          }
          else {
            uint64_t v8 = 0;
          }
          uint64_t v9 = *(void (**)(uint64_t, __CFString *, void))(v8 + 56);
          if (v9) {
            v9(FigBaseObject, @"Suspended", *MEMORY[0x1E4F1CFC8]);
          }
          *(unsigned char *)(v1 + 545) = 0;
        }
      }
    }
  }
}

void vq_timebaseEffectiveRateChanged(uint64_t a1, const void *a2)
{
}

void vq_updateForCurrentTimebaseRate(const void *a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    float Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 552));
    BOOL v6 = Rate != 0.0 || *(void *)(v3 + 552) == 0;
    if (dword_1E9351450)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Rate == 0.0)
    {
      if (FPSupport_IsPlayerPerformanceTraceEnabled() && *(void *)(v3 + 360))
      {
        cf[0] = 0;
        CFAllocatorRef v8 = CFGetAllocator(a1);
        int v9 = vq_copyPerformanceDictionary((uint64_t)a1, (uint64_t)v8, cf);
        CFTypeRef v10 = cf[0];
        if (!v9) {
          FPSupport_TracePlayerPerformanceDictionary((uint64_t)"VideoQueue", (void *)cf[0]);
        }
        if (v10) {
          CFRelease(v10);
        }
      }
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      if (*(double *)(v11 + 568) > 0.0)
      {
        if (*(void *)(v11 + 560))
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            CFMutableDictionaryRef v13 = Mutable;
            CFAbsoluteTimeGetCurrent();
            FigCFDictionarySetValue();
            FigCFDictionarySetInt32();
            FigCFDictionarySetValue();
            FigPlaybackLogPowerEvent();
            CFRelease(v13);
          }
        }
      }
    }
    uint64_t v14 = *(void *)(v3 + 56);
    if (v14)
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      int v17 = *(void (**)(uint64_t, BOOL))(v16 + 40);
      if (v17) {
        v17(v14, v6);
      }
      uint64_t v18 = *(void *)(v3 + 56);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      CFUUIDRef v21 = *(void (**)(uint64_t, float))(v20 + 48);
      if (v21) {
        v21(v18, Rate);
      }
    }
    else if (*(void *)(v3 + 48))
    {
      CAImageQueueSetFlags();
    }
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(v3 + 280);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 280), i);
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      double v27 = *(void (**)(const void *, BOOL))(v26 + 40);
      if (v27) {
        v27(ValueAtIndex, v6);
      }
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      CGFloat v30 = *(void (**)(const void *, float))(v29 + 48);
      if (v30) {
        v30(ValueAtIndex, Rate);
      }
    }
    MEMORY[0x19970E910](*(void *)(v3 + 304));
    for (CFIndex j = 0; ; ++j)
    {
      CFArrayRef v32 = *(const __CFArray **)(v3 + 296);
      if (v32) {
        CFArrayRef v32 = (const __CFArray *)CFArrayGetCount(v32);
      }
      if (j >= (uint64_t)v32) {
        break;
      }
      uint64_t v33 = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 296), j);
      if (CFArrayGetCount(v33[3]) >= 1)
      {
        CFIndex v34 = 0;
        do
        {
          cf[0] = 0;
          VideoTargetInfoCopyFigImageQueueAtIndex((uint64_t)v33, v34, cf);
          CFTypeRef v35 = cf[0];
          uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v36) {
            uint64_t v37 = v36;
          }
          else {
            uint64_t v37 = 0;
          }
          uint64_t v38 = *(void (**)(CFTypeRef, BOOL))(v37 + 40);
          if (v38) {
            v38(v35, v6);
          }
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = 0;
          }
          uint64_t v41 = *(void (**)(CFTypeRef, float))(v40 + 48);
          if (v41) {
            v41(v35, Rate);
          }
          if (v35) {
            CFRelease(v35);
          }
          ++v34;
        }
        while (v34 < CFArrayGetCount(v33[3]));
      }
    }
    MEMORY[0x19970E930](*(void *)(v3 + 304));
    vq_updateVideoPlaybackAssertion(a1);
  }
}

uint64_t vq_copyPerformanceDictionary(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 360));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
  if (!v9) {
    return 4294954514;
  }
  uint64_t v10 = v9(FigBaseObject, @"PerformanceDictionary", a2, &cf);
  CFTypeRef v11 = cf;
  if (v10)
  {
    MutableCFArrayRef Copy = 0;
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  MutableCFArrayRef Copy = (const void *)FigCFDictionaryCreateMutableCopy();
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v11);
LABEL_8:
  if (!MutableCopy)
  {
    if (v10) {
      return v10;
    }
LABEL_15:
    uint64_t v10 = 0;
    *a3 = MutableCopy;
    return v10;
  }
  uint64_t v13 = FigCFDictionarySetInt64();
  if (!v13) {
    goto LABEL_15;
  }
  uint64_t v10 = v13;
  CFRelease(MutableCopy);
  return v10;
}

const void *VideoTargetInfoCopyFigImageQueueAtIndex(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (const void *)FigCFArrayGetValueAtIndex();
  if (result) {
    uint64_t result = CFRetain(result);
  }
  *a3 = result;
  return result;
}

void vq_updateVideoPlaybackAssertion(const void *a1)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v4 = *((void *)v3 + 72);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __vq_updateVideoPlaybackAssertion_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1;
    dispatch_async(v4, v5);
  }
}

void __vq_updateVideoPlaybackAssertion_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v3 + 584)
    || *(_DWORD *)v3
    || (Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v3 + 552)), uint64_t v3 = *(void *)(a1 + 32), Rate == 0.0))
  {
    uint64_t v4 = *(const void **)(v3 + 592);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(*(void *)(a1 + 32) + 592) = 0;
    }
  }
  else if (!*(void *)(v3 + 592))
  {
    Suint64_t Int32 = FigCFNumberGetSInt32();
    if (!SInt32) {
      Suint64_t Int32 = getpid();
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    int v9 = *(uint64_t **)(a1 + 32);
    if ((unint64_t)(UpTimeNanoseconds - v9[75]) >= 0x3B9ACA01)
    {
      uint64_t v10 = UpTimeNanoseconds;
      FigSFBSKeepForegroundAssertionCreate(*MEMORY[0x1E4F1CF80], v9[81], SInt32, v9 + 74);
      if (!*(void *)(*(void *)(a1 + 32) + 592))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(void *)(*(void *)(a1 + 32) + 600) = v10;
      }
    }
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t FigVideoQueue_CopyCurrentlyDisplayedPixelBufferFromCAImageQueue(uint64_t a1, const __CFAllocator *a2, CVPixelBufferRef *a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  *a3 = 0;
  uint64_t v5 = CAImageQueueCopyDisplayedIOSurface();
  if (!v5) {
    return 0;
  }
  BOOL v6 = (__IOSurface *)v5;
  if (IOSurfaceGetProtectionOptions())
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = CVPixelBufferCreateWithIOSurface(a2, v6, 0, &pixelBufferOut);
    if (v7)
    {
      if (pixelBufferOut) {
        CFRelease(pixelBufferOut);
      }
    }
    else
    {
      *a3 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
    }
  }
  CFRelease(v6);
  return v7;
}

BOOL vq_isImageQueueBeingServiced()
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 64)) {
    return 1;
  }
  CAImageQueueGetLastUpdateHostTime();
  mach_absolute_time();
  return (unint64_t)FigHostTimeToNanoseconds() < 0x2540BE401;
}

void vq_setupVideoLayer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (void *)MEMORY[0x199711A30]();
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  *(void *)(DerivedStorage + 48) = CAImageQueueCreate();
  CAImageQueueSetFlags();
  CAImageQueueSetFlags();
  CAImageQueueSetFlags();
  id v2 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
  *(void *)(DerivedStorage + 16) = v2;
  [v2 setName:@"internal-videolayer"];
  [*(id *)(DerivedStorage + 16) setContents:*(void *)(DerivedStorage + 48)];
  [*(id *)(DerivedStorage + 16) setContentsGravity:*MEMORY[0x1E4F3A3D8]];
  [*(id *)(DerivedStorage + 16) setEdgeAntialiasingMask:0];
  [*(id *)(DerivedStorage + 16) setAllowsDisplayCompositing:*(unsigned char *)(DerivedStorage + 238) == 0];
  id v3 = objc_alloc_init(MEMORY[0x1E4F39BE8]);
  *(void *)(DerivedStorage + 24) = v3;
  [v3 setName:@"internal-maskinglayer"];
  [*(id *)(DerivedStorage + 24) setFillMode:*MEMORY[0x1E4F39FA0]];
  [*(id *)(DerivedStorage + 24) addSublayer:*(void *)(DerivedStorage + 16)];
  objc_msgSend(*(id *)(DerivedStorage + 16), "setAnchorPoint:", 0.0, 0.0);
  objc_msgSend(*(id *)(DerivedStorage + 16), "setPosition:", 0.0, 0.0);
  [MEMORY[0x1E4F39CF8] commit];
  if (dword_1E9351450)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t vq_updateImageQueueProtection()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = result;
  if (*(void *)(result + 376) && !*(unsigned char *)(result + 336))
  {
    *(unsigned char *)(result + 336) = 1;
    *(unsigned char *)(result + 338) = 0;
  }
  if (!*(unsigned char *)(result + 338))
  {
    if (*(void *)(result + 48)) {
      CAImageQueueSetFlags();
    }
    MEMORY[0x19970E910](*(void *)(v1 + 304));
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(v1 + 296);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 296), i);
      if (CFArrayGetCount(ValueAtIndex[3]) >= 1)
      {
        CFIndex v5 = 0;
        do
        {
          CFTypeRef cf = 0;
          VideoTargetInfoCopyCAImageQueueAtIndex((uint64_t)ValueAtIndex, v5, (uint64_t)&cf);
          if (cf)
          {
            CAImageQueueSetFlags();
            CFRelease(cf);
          }
          ++v5;
        }
        while (v5 < CFArrayGetCount(ValueAtIndex[3]));
      }
    }
    return MEMORY[0x19970E930](*(void *)(v1 + 304));
  }
  return result;
}

uint64_t vq_addTimebaseListeners()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 552))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

void VideoTargetInfoCreate(uint64_t a1, void *a2)
{
  if (!a2) {
    goto LABEL_11;
  }
  if (videoTargetInfo_getTypeID_sRegisterVideoTargetInfoTypeOnce != -1) {
    dispatch_once(&videoTargetInfo_getTypeID_sRegisterVideoTargetInfoTypeOnce, &__block_literal_global_55);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v4 = (void *)Instance;
    *(unsigned char *)(Instance + 16) = 0;
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    void v4[3] = Mutable;
    if (Mutable && (CFMutableArrayRef v7 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]), (v4[4] = v7) != 0))
    {
      *a2 = v4;
    }
    else
    {
      FigSignalErrorAt();
      CFRelease(v4);
    }
  }
  else
  {
LABEL_11:
    FigSignalErrorAt();
  }
}

uint64_t vq_handleWaitForVideoTargetConditionChange(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  if (a2 == 1)
  {
    *(unsigned char *)(DerivedStorage + 312) = a3;
    if (dword_1E9351450)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a3 = *(unsigned __int8 *)(v8 + 312);
    }
    dispatch_time_t v12 = (void *)(v8 + 408);
    MEMORY[0x19970E290](*(void *)(v8 + 408));
    if (!a3)
    {
LABEL_9:
      CFArrayRef v13 = *(const __CFArray **)(v8 + 320);
      if (v13 && CFArrayGetCount(v13) >= 1)
      {
        if (dword_1E9351450)
        {
          uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigCFArrayApplyBlock();
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v8 + 320));
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(DerivedStorage + 328);
    if (dword_1E9351450)
    {
      CFTypeRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(void *)(v8 + 328) = a4;
    dispatch_time_t v12 = (void *)(v8 + 408);
    MEMORY[0x19970E290](*(void *)(v8 + 408));
    if (!v10) {
      goto LABEL_9;
    }
  }
  return MEMORY[0x19970E2B0](*v12);
}

uint64_t vq_setSynchronizedLayers()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
  if (*(void *)(DerivedStorage + 248))
  {
    CFArrayRef v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)(DerivedStorage + 24), 1, MEMORY[0x1E4F1D510]);
    uint64_t v2 = FigLayerSynchronizerSetLayerArray(*(void *)(DerivedStorage + 248), v1);
    if (v1) {
      CFRelease(v1);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 240));
  return v2;
}

uint64_t __videoTargetInfo_getTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  videoTargetInfo_getTypeID_sVideoTargetInfoTypeIOSurfaceID ID = result;
  return result;
}

void *videoTargetInfo_init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void videoTargetInfo_finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  id v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
}

CFStringRef videoTargetInfo_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFIndex v3 = CFGetRetainCount((CFTypeRef)a1);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  CFArrayRef Count = *(const __CFArray **)(a1 + 24);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  BOOL v6 = "YES";
  if (!v4) {
    BOOL v6 = " NO";
  }
  return CFStringCreateWithFormat(v2, 0, @"<VideoTargetInfo %p retainCount: %ld> Stereo: %s %d FIQs", a1, v3, v6, Count);
}

uint64_t __vq_handleWaitForVideoTargetConditionChange_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v15 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v14 = v15;
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, void, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(v16 + 16);
  if (v17)
  {
    v5.n128_u64[0] = 0;
    v6.n128_u64[0] = 0;
    v7.n128_u64[0] = 0;
    v8.n128_u64[0] = 0;
    v9.n128_u64[0] = 0;
    v10.n128_u64[0] = 0;
    v11.n128_u64[0] = 0;
    v12.n128_u64[0] = 0;
    return v17(v3, a2, 0, v5, v6, v7, v8, v9, v10, v11, v12);
  }
  return result;
}

uint64_t vq_Start()
{
  return 0;
}

uint64_t vq_EnqueueFrame(void *a1, void *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v342 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMSampleBufferRef sBufOut = 0;
  if (*(_DWORD *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  uint64_t v24 = DerivedStorage;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 408));
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v25 + 312) && !*(void *)(v25 + 328) && !*(void *)(v25 + 360))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v24 + 320), a2);
LABEL_90:
    MEMORY[0x19970E2B0](*(void *)(v24 + 408));
    MutableCFArrayRef Copy = 0;
    goto LABEL_491;
  }
  *(unsigned char *)(v24 + 544) = 1;
  CFTypeRef v26 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F258], 0);
  CMTaggedBufferGroupFormatDescriptionRef formatDescription = (CMTaggedBufferGroupFormatDescriptionRef)*MEMORY[0x1E4F1CFD0];
  if (v26 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v38 = *(opaqueCMBufferQueue **)(v24 + 368);
    if (v38) {
      CMBufferQueueEnqueue(v38, a2);
    }
    goto LABEL_90;
  }
  double v277 = a7;
  *(double *)double v276 = a8;
  *(double *)&v276[8] = a9;
  *(double *)&v276[16] = a10;
  *(double *)&v276[24] = a11;
  int v280 = a3;
  sbuf = (opaqueCMSampleBuffer *)a2;
  SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)a2, 0);
  if (!SampleAttachmentsArray
    || (CFArrayRef v28 = SampleAttachmentsArray, v29 = CFGetTypeID(SampleAttachmentsArray), v29 != CFArrayGetTypeID())
    || CFArrayGetCount(v28) < 1
    || (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, 0)) == 0
    || (CFDictionaryRef v31 = ValueAtIndex, v32 = CFGetTypeID(ValueAtIndex), v32 != CFDictionaryGetTypeID())
    || CFDictionaryGetValue(v31, (const void *)*MEMORY[0x1E4F1F1B8]) != formatDescription)
  {
    ++*(void *)(v24 + 536);
  }
  refcon = a1;
  uint64_t v297 = v24;
  if (*(void *)(v24 + 360))
  {
LABEL_17:
    uint64_t v33 = CMBaseObjectGetDerivedStorage();
    *(void *)CFIndex v325 = 0;
    *(void *)&v325[8] = v325;
    *(void *)&v325[16] = 0x2020000000;
    *(void *)&v325[24] = 0;
    uint64_t Decryptor = FigSampleBufferGetDecryptor();
    sbufPTS.uint64_t value = 0;
    *(void *)&sbufPTS.CMTimeScale timescale = &sbufPTS;
    sbufPTS.CMTimeEpoch epoch = 0x2020000000;
    char v321 = 1;
    CFTypeRef v35 = *(NSObject **)(v33 + 528);
    *(void *)&blocCFIndex k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 3221225472;
    *(void *)&long long v333 = __vq_UpdateCryptorFromSampleBuffer_block_invoke;
    *((void *)&v333 + 1) = &unk_1E57A5770;
    *(void *)&long long v335 = v33;
    *((void *)&v335 + 1) = Decryptor;
    *(void *)&long long v336 = refcon;
    *(void *)&long long v334 = v325;
    *((void *)&v334 + 1) = &sbufPTS;
    dispatch_sync(v35, &block);
    uint64_t v36 = *(const void **)(*(void *)&v325[8] + 24);
    if (v36) {
      CFRelease(v36);
    }
    int v37 = *(unsigned __int8 *)(*(void *)&sbufPTS.timescale + 24);
    _Block_object_dispose(&sbufPTS, 8);
    _Block_object_dispose(v325, 8);
    if (v37)
    {
      if (!*(unsigned char *)(v297 + 545)) {
        goto LABEL_39;
      }
    }
    else if (!*(unsigned char *)(v297 + 545))
    {
      FigRenderPipelineSetProperty_0(*(void *)(v297 + 360), @"Suspended", (uint64_t)formatDescription);
      *(unsigned char *)(v297 + 545) = 1;
    }
    ++*(void *)(v297 + 496);
    CMBufferQueueGetDuration(&time1, *(CMBufferQueueRef *)(v297 + 368));
    CMTimeMake(&time2, 11, 1);
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      MutableCFArrayRef Copy = FigSignalErrorAt();
      if (MutableCopy) {
        goto LABEL_484;
      }
    }
LABEL_39:
    uint64_t v45 = v297;
    CMSampleBufferRef v46 = sbuf;
    if (*(unsigned char *)(v297 + 680))
    {
      int64_t v319 = -1;
      int64_t v318 = -1;
      vq_tagCollectionGetLayerIDsIfPresent(sbuf, &v319, &v318);
      uint64_t v45 = v297;
      if (v319 != *(void *)(v297 + 664) || (CMSampleBufferRef v46 = sbuf, v318 != *(void *)(v297 + 672)))
      {
        v316.uint64_t value = 0;
        *(void *)os_log_type_t type = 0;
        uint64_t v47 = FigTagMakeWithSInt64Value();
        idCGFloat x = v48;
        CFMutableArrayRef v290 = (CFMutableArrayRef)v47;
        uint64_t v49 = FigTagMakeWithSInt64Value();
        CMTagValue v281 = v50;
        uint64_t v283 = v49;
        blocCFIndex k = 0uLL;
        *(void *)&long long v333 = 0;
        CMSampleBufferGetPresentationTimeStamp((CMTime *)&block, sbuf);
        memset(v325, 0, 24);
        CMSampleBufferGetDuration((CMTime *)v325, sbuf);
        formatDescriptionCGFloat a = CMSampleBufferGetFormatDescription(sbuf);
        TaggedBufferGroup = CMSampleBufferGetTaggedBufferGroup(sbuf);
        uint64_t v52 = TaggedBufferGroup;
        if (TaggedBufferGroup && (CMItemCount Count = CMTaggedBufferGroupGetCount(TaggedBufferGroup), Count > 1))
        {
          allocatorCGFloat a = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          theArrayCGFloat a = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          CFMutableArrayRef Mutable = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E4F1D510]);
          if (theArraya && Mutable)
          {
            CFIndex v54 = 0;
            uint64_t v55 = *MEMORY[0x1E4F1F418];
            CMTagValue v56 = *(void *)(MEMORY[0x1E4F1F418] + 8);
            uint64_t v57 = *MEMORY[0x1E4F1F428];
            CMTagValue v58 = *(void *)(MEMORY[0x1E4F1F428] + 8);
            while (1)
            {
              TagCollectionAtIndeCGFloat x = CMTaggedBufferGroupGetTagCollectionAtIndex(v52, v54);
              if (!TagCollectionAtIndex) {
                break;
              }
              CVPixelBufferAtIndeCGFloat x = (const void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
              if (!CVPixelBufferAtIndex) {
                break;
              }
              *(void *)&v344.categorCGFloat y = v55;
              v344.uint64_t value = v56;
              int v61 = CMTagCollectionContainsTag(TagCollectionAtIndex, v344);
              *(void *)&v345.categorCGFloat y = v57;
              v345.uint64_t value = v58;
              if (v61 | CMTagCollectionContainsTag(TagCollectionAtIndex, v345))
              {
                MutableCFArrayRef Copy = CMTagCollectionCreateMutableCopy(TagCollectionAtIndex, allocatora, (CMMutableTagCollectionRef *)type);
                if (MutableCopy) {
                  goto LABEL_64;
                }
                CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_VideoLayerID);
                if (v61) {
                  *(void *)&v62.categorCGFloat y = v290;
                }
                else {
                  *(void *)&v62.categorCGFloat y = v283;
                }
                if (v61) {
                  v62.uint64_t value = idx;
                }
                else {
                  v62.uint64_t value = v281;
                }
                CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, v62);
                CFArrayAppendValue(theArraya, *(const void **)type);
                if (*(void *)type)
                {
                  CFRelease(*(CFTypeRef *)type);
                  *(void *)os_log_type_t type = 0;
                }
              }
              else
              {
                CFArrayAppendValue(theArraya, TagCollectionAtIndex);
              }
              CFArrayAppendValue(Mutable, CVPixelBufferAtIndex);
              if (Count == ++v54)
              {
                MutableCFArrayRef Copy = MEMORY[0x19970EBC0](allocatora, theArraya, Mutable, &v316);
                if (MutableCopy) {
                  goto LABEL_64;
                }
                *(_OWORD *)&sbufPTS.uint64_t value = block;
                sbufPTS.CMTimeEpoch epoch = v333;
                CMTime sbufDuration = *(CMTime *)v325;
                uint64_t v63 = CMSampleBufferCreateForTaggedBufferGroup(allocatora, (CMTaggedBufferGroupRef)v316.value, &sbufPTS, &sbufDuration, formatDescriptiona, &sBufOut);
                goto LABEL_63;
              }
            }
          }
          uint64_t v63 = FigSignalErrorAt();
LABEL_63:
          MutableCFArrayRef Copy = v63;
LABEL_64:
          if (theArraya) {
            CFRelease(theArraya);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
        else
        {
          MutableCFArrayRef Copy = FigSignalErrorAt();
        }
        if (v316.value) {
          CFRelease((CFTypeRef)v316.value);
        }
        if (*(void *)type) {
          CFRelease(*(CFTypeRef *)type);
        }
        if (MutableCopy) {
          goto LABEL_484;
        }
        CMSampleBufferRef v46 = sBufOut;
        uint64_t v45 = v297;
      }
    }
    MutableCFArrayRef Copy = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v45 + 368), v46);
    if (MutableCopy) {
      goto LABEL_484;
    }
    ++*(void *)(v297 + 488);
    if (CMSampleBufferGetImageBuffer(sbuf) || vq_containsStereoVideoTaggedBufferGroup(sbuf, 0, 0))
    {
      uint64_t v64 = v297;
      if (!*(_DWORD *)(v297 + 464)) {
        *(_DWORD *)(v297 + 464) = 1;
      }
    }
    else
    {
      uint64_t v64 = v297;
      if (*(_DWORD *)(v297 + 464) == 1) {
        *(_DWORD *)(v297 + 464) = 0;
      }
    }
    MEMORY[0x19970E910](*(void *)(v64 + 616));
    if (*(void *)(v297 + 608))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      MutableCFArrayRef Copy = CMNotificationCenterPostNotification();
      int v65 = *(const void **)(v297 + 608);
      if (v65)
      {
        CFRelease(v65);
        uint64_t v66 = v297;
        *(void *)(v297 + 608) = 0;
        goto LABEL_84;
      }
    }
    else
    {
      MutableCFArrayRef Copy = 0;
    }
    uint64_t v66 = v297;
LABEL_84:
    MEMORY[0x19970E930](*(void *)(v66 + 616));
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 64))
    {
      CMTaggedBufferGroupRef v67 = CMSampleBufferGetTaggedBufferGroup(sbuf);
      if (v67)
      {
        uint64_t v68 = (__CVBuffer *)MEMORY[0x19970EBE0](v67, *MEMORY[0x1E4F1F418], *(void *)(MEMORY[0x1E4F1F418] + 8), 0);
        CMVideoDimensions Dimensions = (CMVideoDimensions)v68;
        if (v68)
        {
          Displaydouble Size = CVImageBufferGetDisplaySize(v68);
          CGFloat width = DisplaySize.width;
          CGFloat height = DisplaySize.height;
          Encodeddouble Size = CVImageBufferGetEncodedSize((CVImageBufferRef)*(void *)&Dimensions);
          Dimensions.CGFloat width = (int)EncodedSize.width;
          LODWORD(v74) = (int)EncodedSize.height;
        }
        else
        {
          LODWORD(v74) = 0;
          CGFloat height = 0.0;
          CGFloat width = 0.0;
        }
      }
      else
      {
        int v75 = CMSampleBufferGetFormatDescription(sbuf);
        CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v75);
        PresentationCMVideoDimensions Dimensions = CMVideoFormatDescriptionGetPresentationDimensions(v75, 1u, 1u);
        CGFloat width = PresentationDimensions.width;
        CGFloat height = PresentationDimensions.height;
        unint64_t v74 = HIDWORD(*(unint64_t *)&Dimensions);
      }
      CMSampleBufferGetOutputPresentationTimeStamp(&time, sbuf);
      uint64_t Seconds = CMTimeGetSeconds(&time);
      sbufPTS.uint64_t value = 0;
      uint64_t v86 = CMBaseObjectGetDerivedStorage();
      uint64_t v87 = v86;
      double v88 = (double)Dimensions.width;
      double v89 = (double)(int)v74;
      if (*(_DWORD *)(v86 + 232) != v280) {
        goto LABEL_506;
      }
      v351.origin.CGFloat x = a4;
      v351.origin.CGFloat y = a5;
      v351.size.CGFloat width = a6;
      v351.size.CGFloat height = v277;
      if (!CGRectEqualToRect(v351, *(CGRect *)(v86 + 136))) {
        goto LABEL_506;
      }
      if (!CGRectEqualToRect(*(CGRect *)v276, *(CGRect *)(v87 + 168))) {
        goto LABEL_506;
      }
      v352.origin.CGFloat x = 0.0;
      v352.origin.CGFloat y = 0.0;
      v352.size.CGFloat width = (double)Dimensions.width;
      v352.size.CGFloat height = (double)(int)v74;
      if (!CGRectEqualToRect(v352, *(CGRect *)(v87 + 72))
        || (v353.origin.CGFloat x = 0.0,
            v353.origin.CGFloat y = 0.0,
            v353.size.CGFloat width = width,
            v353.size.CGFloat height = height,
            !CGRectEqualToRect(v353, *(CGRect *)(v87 + 104)))
        || *(unsigned char *)(v87 + 32))
      {
LABEL_506:
        if (!FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], &sbufPTS.value))
        {
          char v90 = *(unsigned char *)(v87 + 32);
          if (*(_DWORD *)(v87 + 232) != v280) {
            goto LABEL_118;
          }
          v354.origin.CGFloat x = a4;
          v354.origin.CGFloat y = a5;
          v354.size.CGFloat width = a6;
          v354.size.CGFloat height = v277;
          if (!CGRectEqualToRect(v354, *(CGRect *)(v87 + 136))) {
            goto LABEL_118;
          }
          if (CGRectEqualToRect(*(CGRect *)v276, *(CGRect *)(v87 + 168))
            && (v355.origin.CGFloat x = 0.0,
                v355.origin.CGFloat y = 0.0,
                v355.size.CGFloat width = v88,
                v355.size.CGFloat height = (double)(int)v74,
                CGRectEqualToRect(v355, *(CGRect *)(v87 + 72))))
          {
            v356.origin.CGFloat x = 0.0;
            v356.origin.CGFloat y = 0.0;
            v356.size.CGFloat width = width;
            v356.size.CGFloat height = height;
            char v91 = !CGRectEqualToRect(v356, *(CGRect *)(v87 + 104));
          }
          else
          {
LABEL_118:
            char v91 = 1;
          }
          if (!FPSupport_AppendDeferredTransactionChangeForUpdatingLayerTransform((const void *)sbufPTS.value, *(void **)(v87 + 24), *(void **)(v87 + 16), v280, v90, v91, *(unsigned char *)(v87 + 237), (uint64_t)"vq_updateLayerTransform", a4, a5, a6, v277, *(double *)v276, *(double *)&v276[8], *(double *)&v276[16], *(double *)&v276[24], 0, 0, *(uint64_t *)&v88,
                                *(uint64_t *)&v89,
                                0,
                                0,
                                *(uint64_t *)&width,
                                *(uint64_t *)&height,
                                Seconds))
          {
            FigDeferredTransactionCommit(sbufPTS.value);
            if (*(unsigned char *)(v87 + 32) && dword_1E9351450)
            {
              LODWORD(sbufDuration.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              LOBYTE(v316.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v93 = sbufDuration.value;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v316.value)) {
                unsigned int v94 = v93;
              }
              else {
                unsigned int v94 = v93 & 0xFFFFFFFE;
              }
              if (v94)
              {
                uint64_t v95 = *(void *)(v87 + 24);
                *(_DWORD *)CFIndex v325 = 136315650;
                *(void *)&v325[4] = "vq_updateLayerTransform";
                *(_WORD *)&v325[12] = 2048;
                *(void *)&v325[14] = refcon;
                *(_WORD *)&v325[22] = 2048;
                *(void *)&v325[24] = v95;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(CGFloat *)(v87 + 136) = a4;
            *(CGFloat *)(v87 + 144) = a5;
            *(CGFloat *)(v87 + 152) = a6;
            *(double *)(v87 + 160) = v277;
            *(void *)(v87 + 168) = *(void *)v276;
            *(void *)(v87 + 176) = *(void *)&v276[8];
            *(void *)(v87 + 184) = *(void *)&v276[16];
            *(void *)(v87 + 192) = *(void *)&v276[24];
            *(_DWORD *)(v87 + 232) = v280;
            *(void *)(v87 + 72) = 0;
            *(void *)(v87 + 80) = 0;
            *(double *)(v87 + 88) = v88;
            *(double *)(v87 + 96) = v89;
            *(void *)(v87 + 104) = 0;
            *(void *)(v87 + 112) = 0;
            *(CGFloat *)(v87 + 120) = width;
            *(CGFloat *)(v87 + 128) = height;
            *(unsigned char *)(v87 + 32) = 0;
          }
        }
      }
      if (sbufPTS.value) {
        CFRelease((CFTypeRef)sbufPTS.value);
      }
    }
    vq_updateImageQueueProtection();
    MEMORY[0x19970E2B0](*(void *)(v297 + 408));
    if (MutableCopy) {
      goto LABEL_485;
    }
    goto LABEL_491;
  }
  uint64_t v259 = *(void *)(v24 + 640);
  CFAllocatorRef allocator = (CFAllocatorRef)CMBaseObjectGetDerivedStorage();
  values = 0;
  memset(&sbufDuration, 0, sizeof(sbufDuration));
  CMTimeMake(&sbufDuration, 3, 30);
  memset(&v316, 0, sizeof(v316));
  CMTimeMake(&v316, 5, 30);
  CFDictionaryRef theDict = 0;
  CFTypeRef cf = 0;
  uint64_t value = 0;
  CMMutableTagCollectionRef newMutableCollectionCopyOut = 0;
  CFTypeRef v312 = 0;
  CFTypeRef v309 = 0;
  CFTypeRef v310 = 0;
  unsigned int v308 = 0;
  int64_t v306 = -1;
  int64_t v307 = -1;
  MEMORY[0x19970E910](*((void *)allocator + 38));
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    CFArrayRef v77 = (const __CFArray *)*((void *)allocator + 33);
    if (!v77 || CFArrayGetCount(v77) <= 0)
    {
      CFArrayRef v78 = (const __CFArray *)*((void *)allocator + 36);
      if (!v78 || CFArrayGetCount(v78) <= 0)
      {
        MutableCFArrayRef Copy = FigSignalErrorAt();
        uint64_t v79 = 0;
        CFDictionaryRef v269 = 0;
        uint64_t v39 = 0;
LABEL_144:
        v272 = 0;
        double v274 = 0;
        idxCGFloat a = 0;
        uint64_t v291 = 0;
        CFArrayRef v299 = 0;
        goto LABEL_390;
      }
    }
  }
  CFAllocatorRef theArray = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v39 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!CMSampleBufferGetTaggedBufferGroup(sbuf))
  {
    CMFormatDescriptionRef v80 = CMSampleBufferGetFormatDescription(sbuf);
    int v81 = v80;
    values = v80;
    int64_t v82 = -1;
    if (!v80)
    {
      int v282 = 0;
      CFArrayRef v96 = 0;
      int64_t v268 = -1;
      int64_t v271 = -1;
      goto LABEL_193;
    }
    sbufPTS.uint64_t value = 0;
    *(void *)os_log_type_t type = 0;
    int64_t v319 = -1;
    int64_t v318 = -1;
    FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(v80, &sbufPTS);
    if (CMTagCollectionCreateMutableCopy((CMTagCollectionRef)sbufPTS.value, theArray, (CMMutableTagCollectionRef *)type))
    {
      int64_t v268 = -1;
      int64_t v271 = -1;
LABEL_162:
      if (sbufPTS.value) {
        CFRelease((CFTypeRef)sbufPTS.value);
      }
      if (*(void *)type) {
        CFRelease(*(CFTypeRef *)type);
      }
      if (dword_1E9351450)
      {
        LODWORD(sbufPTS.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v100 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v101 = sbufPTS.value;
        if (os_log_type_enabled(v100, type[0])) {
          unsigned int v102 = v101;
        }
        else {
          unsigned int v102 = v101 & 0xFFFFFFFE;
        }
        if (v102)
        {
          double v103 = "YES";
          *(void *)&v325[4] = "vq_createVideoRenderPipeline";
          *(_DWORD *)CFIndex v325 = 136316162;
          *(_WORD *)&v325[12] = 2048;
          if (!v308) {
            double v103 = "NO";
          }
          *(void *)&v325[14] = refcon;
          *(_WORD *)&v325[22] = 2048;
          *(void *)&v325[24] = sbuf;
          *(_WORD *)&v325[32] = 2082;
          *(void *)&v325[34] = v103;
          *(_WORD *)&v325[42] = 2112;
          *(void *)&v325[44] = v39;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v282 = 0;
        BOOL v104 = v308 == 4 || v308 == 1;
        if (!v104 || !dword_1E9351450) {
          goto LABEL_189;
        }
        LODWORD(sbufPTS.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v106 = sbufPTS.value;
        if (os_log_type_enabled(v105, type[0])) {
          unsigned int v107 = v106;
        }
        else {
          unsigned int v107 = v106 & 0xFFFFFFFE;
        }
        if (v107)
        {
          *(void *)&v325[4] = "vq_createVideoRenderPipeline";
          double v108 = "TestIPB";
          *(_DWORD *)CFIndex v325 = 136316674;
          *(_WORD *)&v325[12] = 2048;
          if (v308 == 1) {
            double v108 = "MV-HEVC";
          }
          *(void *)&v325[14] = refcon;
          *(_WORD *)&v325[22] = 2048;
          *(void *)&v325[24] = sbuf;
          *(_WORD *)&v325[32] = 2082;
          *(void *)&v325[34] = v108;
          *(_WORD *)&v325[42] = 2048;
          *(void *)&v325[44] = v268;
          *(_WORD *)&v325[52] = 2048;
          *(void *)&v325[54] = v82;
          *(_WORD *)&v325[62] = 2048;
          *(void *)&long long v326 = v271;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v282 = 0;
      goto LABEL_189;
    }
    CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, *MEMORY[0x1E4F1F3E0]);
    int MVHEVCVideoLayerIDs = FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs();
    if (MVHEVCVideoLayerIDs)
    {
      if (CMTagCollectionContainsTag(*(CMTagCollectionRef *)type, *MEMORY[0x1E4F1F420]))
      {
        CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_StereoView);
        CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, *MEMORY[0x1E4F1F410]);
      }
      int64_t v271 = -1;
      if (v319 == -1 || v318 == -1)
      {
LABEL_148:
        if (CMTagCollectionContainsTag(*(CMTagCollectionRef *)type, *MEMORY[0x1E4F1F410]))
        {
          if (MVHEVCVideoLayerIDs)
          {
            if (VTIsStereoMVHEVCDecodeSupported())
            {
              unsigned int v98 = 1;
LABEL_161:
              CFArrayAppendValue(v39, *(const void **)type);
              unsigned int v308 = v98;
              int64_t v268 = v319;
              int64_t v82 = v318;
              int64_t v306 = v318;
              int64_t v307 = v319;
              goto LABEL_162;
            }
          }
          else
          {
            FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(v81);
            blocCFIndex k = *MEMORY[0x1E4F1F3E8];
            *(void *)CFIndex v325 = 0;
            CMTagCollectionGetTagsWithCategory(*(CMTagCollectionRef *)type, kCMTagCategory_PackingType, (CMTag *)&block, 1, (CMItemCount *)v325);
            if (*(void *)v325 == 1
              && (CMTagEqualToTag((CMTag)block, *MEMORY[0x1E4F1F3F8])
               || CMTagEqualToTag((CMTag)block, *MEMORY[0x1E4F1F3F0])))
            {
              int64_t v319 = -1;
              int64_t v271 = -1;
              int64_t v318 = -1;
              unsigned int v98 = 2;
              goto LABEL_161;
            }
            if (MediaSubType == 1768972832)
            {
              int64_t v271 = 0;
              int64_t v319 = 0;
              int64_t v318 = 1;
              unsigned int v98 = 4;
              goto LABEL_161;
            }
          }
          CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_StereoView);
          CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, *MEMORY[0x1E4F1F420]);
          unsigned int v98 = 0;
          int64_t v319 = -1;
          int64_t v271 = -1;
          int64_t v318 = -1;
          goto LABEL_161;
        }
        unsigned int v98 = 0;
        goto LABEL_161;
      }
      CMFormatDescriptionGetExtension(v81, (CFStringRef)*MEMORY[0x1E4F1EDD8]);
      if (FigCFEqual())
      {
        int64_t v84 = v319;
      }
      else
      {
        int v97 = FigCFEqual();
        int64_t v84 = v318;
        if (!v97) {
          int64_t v84 = 0;
        }
      }
    }
    else
    {
      int64_t v84 = -1;
    }
    int64_t v271 = v84;
    goto LABEL_148;
  }
  if (vq_containsStereoVideoTaggedBufferGroup(sbuf, v39, (int *)&v308))
  {
    if (dword_1E9351450)
    {
      LODWORD(sbufPTS.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v41 = sbufPTS.value;
      if (os_log_type_enabled(v40, type[0])) {
        unsigned int v42 = v41;
      }
      else {
        unsigned int v42 = v41 & 0xFFFFFFFE;
      }
      if (v42)
      {
        CFTypeID v43 = "monoscopic";
        *(void *)&v325[4] = "vq_createVideoRenderPipeline";
        *(_DWORD *)CFIndex v325 = 136316162;
        *(_WORD *)&v325[12] = 2048;
        if (v308 == 3) {
          CFTypeID v43 = "separate stereo";
        }
        *(void *)&v325[14] = refcon;
        *(_WORD *)&v325[22] = 2048;
        *(void *)&v325[24] = sbuf;
        *(_WORD *)&v325[32] = 2082;
        *(void *)&v325[34] = v43;
        *(_WORD *)&v325[42] = 2112;
        *(void *)&v325[44] = v39;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v308 == 3)
    {
      int64_t v306 = 1;
      int64_t v307 = 0;
      if (!vq_tagCollectionGetLayerIDsIfPresent(sbuf, &v307, &v306))
      {
LABEL_143:
        MutableCFArrayRef Copy = FigSignalErrorAt();
        uint64_t v79 = 0;
        CFDictionaryRef v269 = 0;
        goto LABEL_144;
      }
      int64_t v268 = v307;
      values = CMSampleBufferGetFormatDescription(sbuf);
      int v282 = 1;
      *((unsigned char *)allocator + 680) = 1;
      *((void *)allocator + 83) = v268;
      int64_t v82 = v306;
      *((void *)allocator + 84) = v306;
      int64_t v271 = v268;
      goto LABEL_189;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  int v282 = 0;
  int64_t v82 = -1;
  int64_t v268 = -1;
  int64_t v271 = -1;
LABEL_189:
  if (values)
  {
    CFArrayRef v96 = CFArrayCreate(theArray, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (!v96) {
      goto LABEL_143;
    }
  }
  else
  {
    CFArrayRef v96 = 0;
  }
LABEL_193:
  CFArrayRef v299 = v96;
  int64_t v262 = v82;
  if (v308)
  {
    CFArrayRef v109 = (const __CFArray *)*((void *)allocator + 36);
    if (v109)
    {
      if (CFArrayGetCount(v109) >= 1)
      {
        CFMutableArrayRef v275 = (CFMutableArrayRef)CMBaseObjectGetDerivedStorage();
        CFArrayRef v110 = (const __CFArray *)*((void *)v275 + 36);
        if (v110)
        {
          CFIndex v270 = CFArrayGetCount(v110);
          if (v270 >= 1)
          {
            int v266 = 0;
            CFIndex v111 = 0;
            do
            {
              idxdouble b = v111;
              CGFloat v112 = CFArrayGetValueAtIndex(*((CFArrayRef *)v275 + 36), v111);
              CFMutableDictionaryRef v273 = (CFMutableDictionaryRef)CFArrayGetValueAtIndex(*((CFArrayRef *)v275 + 37), idxb);
              *(void *)&blocCFIndex k = 0;
              uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v113) {
                uint64_t v114 = v113;
              }
              else {
                uint64_t v114 = 0;
              }
              double v115 = *(void (**)(const void *, const __CFAllocator *, unsigned long long *))(v114 + 48);
              if (v115) {
                v115(v112, theArray, &block);
              }
              if ((void)block)
              {
                CFIndex v292 = CFArrayGetCount((CFArrayRef)block);
                if (v292 >= 1)
                {
                  CFIndex v116 = 0;
                  BOOL v117 = 1;
                  do
                  {
                    BOOL v284 = v117;
                    CGFloat v118 = CFArrayGetValueAtIndex((CFArrayRef)block, v116);
                    CFIndex CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)v118);
                    if (CountOfDataChannels >= 1)
                    {
                      CFIndex v120 = 0;
                      while (1)
                      {
                        DataChannelByIndeCGFloat x = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v118, v120);
                        if (!v39) {
                          break;
                        }
                        double v122 = DataChannelByIndex;
                        CFIndex v123 = CFArrayGetCount(v39);
                        if (v123 < 1) {
                          break;
                        }
                        CFIndex v124 = 0;
                        char v125 = 1;
                        do
                        {
                          while (1)
                          {
                            CGFloat v126 = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(v39, v124);
                            if (!CMTagCollectionContainsTagsOfCollection(v126, v122)) {
                              break;
                            }
                            if ((v125 & 1) == 0) {
                              goto LABEL_222;
                            }
                            char v125 = 0;
                            BOOL v104 = v123 - 1 == v124++;
                            if (v104) {
                              goto LABEL_220;
                            }
                          }
                          ++v124;
                        }
                        while (v123 != v124);
                        if (v125) {
                          break;
                        }
LABEL_220:
                        if (++v120 == CountOfDataChannels)
                        {
                          *((unsigned char *)v273 + 16) = 1;
                          int v127 = v266;
                          if (v284) {
                            int v127 = 1;
                          }
                          int v266 = v127;
                          goto LABEL_227;
                        }
                      }
                    }
LABEL_222:
                    BOOL v117 = ++v116 < v292;
                  }
                  while (v116 != v292);
                }
              }
              *((unsigned char *)v273 + 16) = 0;
LABEL_227:
              CFIndex v111 = idxb + 1;
            }
            while (idxb + 1 != v270);
            if ((_BYTE)v266 && v308 <= 4 && ((1 << v308) & 0x1A) != 0)
            {
              if (dword_1E9351450)
              {
                LODWORD(sbufPTS.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v128 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v129 = sbufPTS.value;
                if (os_log_type_enabled(v128, type[0])) {
                  unsigned int v130 = v129;
                }
                else {
                  unsigned int v130 = v129 & 0xFFFFFFFE;
                }
                if (v130)
                {
                  double v131 = "Separate Stereo Video";
                  if (v308 == 4) {
                    double v131 = "Stereo TestIPB";
                  }
                  *(void *)&v325[4] = "vq_createVideoRenderPipeline";
                  *(_DWORD *)CFIndex v325 = 136315650;
                  if (v308 == 1) {
                    CGFloat v132 = "Stereo MV-HEVC";
                  }
                  else {
                    CGFloat v132 = v131;
                  }
                  *(_WORD *)&v325[12] = 2048;
                  *(void *)&v325[14] = refcon;
                  *(_WORD *)&v325[22] = 2082;
                  *(void *)&v325[24] = v132;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              int v282 = 1;
            }
          }
        }
      }
    }
  }
  blocCFIndex k = *(_OWORD *)"ARGB";
  *(_DWORD *)CFIndex v325 = 0;
  LODWORD(sbufPTS.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
  FigGetAlignmentForIOSurfaceOutput();
  MutableCFArrayRef Copy = FPSupport_CreateDestinationPixelBufferAttributes(0, 0, (char *)&block, 0, 2, 1, *(int *)v325, sbufPTS.value, 0, &theDict);
  if (MutableCopy) {
    goto LABEL_501;
  }
  if (!theDict || (v133 = CFDictionaryCreateMutableCopy(theArray, 0, theDict), (CFDictionaryRef v134 = v133) == 0))
  {
    MutableCFArrayRef Copy = FigSignalErrorAt();
    if (!MutableCopy) {
      goto LABEL_252;
    }
LABEL_501:
    uint64_t v79 = 0;
    CFDictionaryRef v269 = 0;
    v272 = 0;
    double v274 = 0;
    idxCGFloat a = 0;
    uint64_t v291 = 0;
    goto LABEL_390;
  }
  CFDictionarySetValue(v133, (const void *)*MEMORY[0x1E4F24D18], formatDescription);
  if (theDict) {
    CFRelease(theDict);
  }
  CFDictionaryRef theDict = v134;
LABEL_252:
  *(void *)os_log_type_t type = v316.value;
  CMTimeFlags flags = v316.flags;
  CMTimeScale timescale = v316.timescale;
  CMTimeEpoch epoch = v316.epoch;
  long long v340 = 0u;
  long long v341 = 0u;
  long long v338 = 0u;
  long long v339 = 0u;
  long long v336 = 0u;
  long long v337 = 0u;
  long long v334 = 0u;
  long long v335 = 0u;
  blocCFIndex k = 0u;
  long long v333 = 0u;
  long long v330 = 0u;
  long long v331 = 0u;
  long long v328 = 0u;
  long long v329 = 0u;
  long long v326 = 0u;
  long long v327 = 0u;
  memset(v325, 0, sizeof(v325));
  if ((sbufDuration.flags & 0x1D) != 1)
  {
    if ((v316.flags & 0x1D) != 1)
    {
      CFDictionaryRef v269 = CFDictionaryCreate(theArray, (const void **)&block, (const void **)v325, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      goto LABEL_264;
    }
    LODWORD(v137) = 0;
    goto LABEL_257;
  }
  *(void *)&blocCFIndex k = @"PreparedQueueLowWaterLevel";
  CMTime sbufPTS = sbufDuration;
  *(void *)CFIndex v325 = CMTimeCopyAsDictionary(&sbufPTS, theArray);
  CFIndex v137 = 1;
  if ((flags & 0x1D) == 1)
  {
LABEL_257:
    *(void *)((unint64_t)&block | (8 * v137)) = @"PreparedQueueHighWaterLevel";
    sbufPTS.uint64_t value = *(void *)type;
    sbufPTS.CMTimeScale timescale = timescale;
    sbufPTS.CMTimeFlags flags = flags;
    sbufPTS.CMTimeEpoch epoch = epoch;
    *(void *)((unint64_t)v325 | (8 * v137)) = CMTimeCopyAsDictionary(&sbufPTS, theArray);
    CFIndex v137 = (v137 + 1);
  }
  CFDictionaryRef v269 = CFDictionaryCreate(theArray, (const void **)&block, (const void **)v325, v137, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  double v138 = (CFTypeRef *)v325;
  do
  {
    if (*v138) {
      CFRelease(*v138);
    }
    ++v138;
    --v137;
  }
  while (v137);
LABEL_264:
  v272 = CFDictionaryCreateMutable(theArray, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*((unsigned char *)allocator + 628)) {
    CFDictionarySetValue(v272, (const void *)*MEMORY[0x1E4F455B0], formatDescription);
  }
  idxCGFloat a = CFArrayCreateMutable(theArray, 0, MEMORY[0x1E4F1D510]);
  uint64_t v291 = CFArrayCreateMutable(theArray, 0, MEMORY[0x1E4F1D510]);
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    MutableCFArrayRef Copy = FigImageQueueCreateForCoreAnimation(0, *((const void **)allocator + 6), &value);
    if (MutableCopy) {
      goto LABEL_502;
    }
    uint64_t v139 = *((void *)allocator + 69);
    if (v139)
    {
      uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(value);
      uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v141) {
        uint64_t v142 = v141;
      }
      else {
        uint64_t v142 = 0;
      }
      CFStringRef v143 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v142 + 56);
      if (!v143)
      {
        uint64_t v79 = 0;
        double v274 = 0;
LABEL_389:
        MutableCFArrayRef Copy = 4294954514;
        goto LABEL_390;
      }
      MutableCFArrayRef Copy = v143(FigBaseObject, @"FigImageQueueProperty_Timebase", v139);
      if (MutableCopy)
      {
LABEL_502:
        uint64_t v79 = 0;
        double v274 = 0;
        goto LABEL_390;
      }
    }
    CFArrayAppendValue(idxa, value);
    if (v282)
    {
      CFMutableDictionaryRef v144 = CFDictionaryCreateMutable(theArray, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetInt32();
      CFArrayAppendValue(v291, v144);
      if (v144) {
        CFRelease(v144);
      }
    }
    else
    {
      CFArrayAppendValue(v291, (const void *)*MEMORY[0x1E4F1D260]);
    }
  }
  if (*((void *)allocator + 33))
  {
    double v274 = CFArrayCreateMutable(theArray, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v145 = (const __CFArray *)*((void *)allocator + 33);
    if (v145) {
      CFIndex v146 = CFArrayGetCount(v145);
    }
    else {
      CFIndex v146 = 0;
    }
    CFArrayRef v147 = (const __CFArray *)*((void *)allocator + 34);
    if (v147) {
      CFIndex v148 = CFArrayGetCount(v147);
    }
    else {
      CFIndex v148 = 0;
    }
    if (v146 >= 1)
    {
      CFIndex v149 = 0;
      __int16 v150 = (const void *)*MEMORY[0x1E4F1D260];
      CFAttributedStringRef v151 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        __n128 v152 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 33), v149);
        MutableCFArrayRef Copy = FigImageQueueCreateForCoreVideo(0, &cf);
        if (MutableCopy) {
          goto LABEL_498;
        }
        CFTypeRef v153 = cf;
        uint64_t v154 = *((void *)allocator + 69);
        uint64_t v155 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v156 = v155 ? v155 : 0;
        CFRange v157 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v156 + 8);
        if (!v157) {
          goto LABEL_388;
        }
        MutableCFArrayRef Copy = v157(v153, v152, v154);
        if (MutableCopy) {
          goto LABEL_498;
        }
        CFArrayAppendValue(v274, cf);
        CFArrayAppendValue(idxa, cf);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        CFRange v158 = v150;
        if (v149 < v148) {
          CFRange v158 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 34), v149);
        }
        if (v282)
        {
          if (v150 == v158) {
            uint64_t v159 = (uint64_t)CFDictionaryCreateMutable(theArray, 0, MEMORY[0x1E4F1D530], v151);
          }
          else {
            uint64_t v159 = FigCFDictionaryCreateMutableCopy();
          }
          CGRect v160 = (const void *)v159;
          FigCFDictionarySetInt32();
          CFArrayAppendValue(v291, v160);
          if (v160) {
            CFRelease(v160);
          }
        }
        else
        {
          CFArrayAppendValue(v291, v158);
        }
      }
      while (v146 != ++v149);
    }
  }
  else
  {
    double v274 = 0;
  }
  if (!*((void *)allocator + 36))
  {
LABEL_349:
    MutableCFArrayRef Copy = FigVideoRenderPipelineCreateWithFigImageQueueArray(theArray, v272, theDict, 0, 1, idxa, v291, v269, &v309);
    if (MutableCopy) {
      goto LABEL_498;
    }
    if (v259)
    {
      uint64_t v184 = FigRenderPipelineGetFigBaseObject(v309);
      uint64_t v185 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v185) {
        uint64_t v186 = v185;
      }
      else {
        uint64_t v186 = 0;
      }
      long long v187 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v186 + 56);
      if (!v187)
      {
LABEL_388:
        uint64_t v79 = 0;
        goto LABEL_389;
      }
      MutableCFArrayRef Copy = v187(v184, @"ClientPID", v259);
      if (MutableCopy) {
        goto LABEL_498;
      }
    }
    uint64_t v188 = FigRenderPipelineGetFigBaseObject(v309);
    uint64_t v189 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v189) {
      uint64_t v190 = v189;
    }
    else {
      uint64_t v190 = 0;
    }
    long long v191 = *(void (**)(uint64_t, __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(v190 + 56);
    if (v191) {
      v191(v188, @"VideoEnqueueResetsSystemSleepTimer", formatDescription);
    }
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef v193 = (const __CFArray *)*((void *)allocator + 36);
      if (v193) {
        CFArrayRef v193 = (const __CFArray *)CFArrayGetCount(v193);
      }
      if (i >= (uint64_t)v193)
      {
        CFIndex v236 = (const void *)*((void *)allocator + 7);
        uint64_t v237 = value;
        *((void *)allocator + 7) = value;
        if (v237) {
          CFRetain(v237);
        }
        if (v236) {
          CFRelease(v236);
        }
        v238 = (const void *)*((void *)allocator + 35);
        *((void *)allocator + 35) = v274;
        if (v274) {
          CFRetain(v274);
        }
        if (v238) {
          CFRelease(v238);
        }
        uint64_t v79 = 0;
        MutableCFArrayRef Copy = 0;
        *(void *)(v297 + 360) = v309;
        CFTypeRef v309 = 0;
        goto LABEL_390;
      }
      long long v194 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 36), i);
      uint64_t v195 = (CFArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 37), i);
      MutableCFArrayRef Copy = FigDataChannelConfigurationCreate(theArray, 0, (uint64_t *)&v310);
      if (MutableCopy) {
        goto LABEL_498;
      }
      if (CFArrayGetCount(v195[3]) >= 1) {
        break;
      }
LABEL_380:
      CFTypeRef v200 = v310;
      uint64_t v201 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v201) {
        uint64_t v202 = v201;
      }
      else {
        uint64_t v202 = 0;
      }
      double v203 = *(uint64_t (**)(const void *, CFTypeRef))(v202 + 72);
      if (!v203) {
        goto LABEL_388;
      }
      MutableCFArrayRef Copy = v203(v194, v200);
      if (MutableCopy) {
        goto LABEL_498;
      }
      if (v310)
      {
        CFRelease(v310);
        CFTypeRef v310 = 0;
      }
    }
    CFIndex v196 = 0;
    while (1)
    {
      VideoTargetInfoCopyFigImageQueueAtIndex((uint64_t)v195, v196, &v312);
      CGAffineTransform v197 = (const void *)FigCFArrayGetValueAtIndex();
      uint64_t v79 = v197 ? (const OpaqueCMTagCollection *)CFRetain(v197) : 0;
      MutableCFArrayRef Copy = CMTagCollectionCreateMutableCopy(v79, theArray, &newMutableCollectionCopyOut);
      if (MutableCopy) {
        goto LABEL_390;
      }
      CFRange v198 = newMutableCollectionCopyOut;
      CMTag v346 = CMTagMakeWithSInt64Value(kCMTagCategory_ChannelID, ++v196);
      CMTagCollectionAddTag(v198, v346);
      CFTypeRef v199 = v312;
      MutableCFArrayRef Copy = FigDataChannelConfigurationAddFigImageQueue((uint64_t)v310, v312, (uint64_t)newMutableCollectionCopyOut, 0, v299);
      if (MutableCopy) {
        goto LABEL_390;
      }
      if (newMutableCollectionCopyOut)
      {
        CFRelease(newMutableCollectionCopyOut);
        CMMutableTagCollectionRef newMutableCollectionCopyOut = 0;
      }
      if (v199)
      {
        CFRelease(v199);
        CFTypeRef v312 = 0;
      }
      if (v79) {
        CFRelease(v79);
      }
      if (v196 >= CFArrayGetCount(v195[3])) {
        goto LABEL_380;
      }
    }
  }
  uint64_t v161 = *MEMORY[0x1E4F1F408];
  CMTagValue v162 = *(void *)(MEMORY[0x1E4F1F408] + 8);
  uint64_t v164 = *MEMORY[0x1E4F1F3E8];
  CMTagValue v163 = *(void *)(MEMORY[0x1E4F1F3E8] + 8);
  CGRect v165 = (uint64_t *)MEMORY[0x1E4F1F3D8];
  *(void *)CFIndex v325 = 0;
  CMTag v285 = (CMTag)*MEMORY[0x1E4F1F3D8];
  blocCFIndex k = *MEMORY[0x1E4F1F3D8];
  CMTagValue v265 = v162;
  uint64_t v267 = v161;
  CMTagValue v263 = v163;
  uint64_t v264 = v164;
  if (!v39 || (CFIndex v166 = CFArrayGetCount(v39), v166 < 1))
  {
LABEL_335:
    CFArrayRef v178 = (const __CFArray *)*((void *)allocator + 36);
    if (v178)
    {
      CFIndex v179 = CFArrayGetCount(v178);
      if (v179 >= 1)
      {
        CFIndex v180 = 0;
        CMTagValue v256 = *(void *)(MEMORY[0x1E4F1F418] + 8);
        uint64_t v258 = *MEMORY[0x1E4F1F418];
        CMTagValue v254 = *(void *)(MEMORY[0x1E4F1F428] + 8);
        uint64_t v255 = *MEMORY[0x1E4F1F428];
        uint64_t v286 = *MEMORY[0x1E4F1F420];
        tag2CGFloat a = *(void *)(MEMORY[0x1E4F1F420] + 8);
        CMTagValue v252 = *(void *)(MEMORY[0x1E4F1F410] + 8);
        uint64_t v253 = *MEMORY[0x1E4F1F410];
        while (1)
        {
          CFArrayRef v181 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 36), v180);
          double v182 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 37), v180);
          CFArrayRemoveAllValues(v182[3]);
          CFArrayRemoveAllValues(v182[4]);
          if (v282)
          {
            if (*((unsigned char *)v182 + 16))
            {
              MutableCFArrayRef Copy = vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v181, v258, v256, v268, idxa, v291, (uint64_t)v182, v161, v162, v164, v163);
              if (MutableCopy) {
                goto LABEL_498;
              }
              uint64_t FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo = vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v181, v255, v254, v262, idxa, v291, (uint64_t)v182, v161, v162, v164, v163);
            }
            else
            {
              uint64_t FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo = vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v181, v286, tag2a, v271, idxa, v291, (uint64_t)v182, v267, v265, v264, v263);
            }
          }
          else
          {
            uint64_t FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo = v308 == 2 && *((unsigned char *)v182 + 16)
                                                                             ? vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v181, v253, v252, -1, idxa, v291, (uint64_t)v182, v161, v162, v164, v163): vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v181, v286, tag2a, -1, idxa,
                                                                                 v291,
                                                                                 (uint64_t)v182,
                                                                                 v267,
                                                                                 v265,
                                                                                 v264,
                                                                                 v263);
          }
          MutableCFArrayRef Copy = FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo;
          if (FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo) {
            goto LABEL_498;
          }
          if (v179 == ++v180) {
            goto LABEL_349;
          }
        }
      }
    }
    goto LABEL_349;
  }
  CFIndex v167 = 0;
  int v168 = 0;
  int v169 = 0;
  uint64_t v170 = *v165;
  CMTagValue v171 = v165[1];
  CMTagValue tag2 = v171;
  uint64_t v257 = *v165;
  CMTagValue v162 = v171;
  uint64_t v172 = *v165;
  while (1)
  {
    CFIndex v173 = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(v39, v167);
    *(void *)CFIndex v325 = 0;
    blocCFIndex k = (unsigned __int128)v285;
    CMTagCollectionGetTagsWithCategory(v173, kCMTagCategory_ProjectionType, (CMTag *)&block, 1, (CMItemCount *)v325);
    if (*(void *)v325 == 1)
    {
      *(void *)&v347.categorCGFloat y = v170;
      v347.uint64_t value = v171;
      if (!CMTagEqualToTag((CMTag)block, v347))
      {
        *(void *)&v174.categorCGFloat y = block;
        if (v169)
        {
          v174.uint64_t value = *((void *)&block + 1);
          *(void *)&v348.categorCGFloat y = v172;
          v348.uint64_t value = v162;
          if (!CMTagEqualToTag(v174, v348)) {
            goto LABEL_497;
          }
          int v169 = 1;
        }
        else
        {
          int v169 = 1;
          CMTagValue v162 = *((void *)&block + 1);
          uint64_t v172 = block;
        }
      }
    }
    *(void *)CFIndex v325 = 0;
    blocCFIndex k = (unsigned __int128)v285;
    CMTagCollectionGetTagsWithCategory(v173, kCMTagCategory_PackingType, (CMTag *)&block, 1, (CMItemCount *)v325);
    if (*(void *)v325 == 1)
    {
      *(void *)&v349.categorCGFloat y = v170;
      v349.uint64_t value = v171;
      if (!CMTagEqualToTag((CMTag)block, v349)) {
        break;
      }
    }
LABEL_323:
    if (v166 == ++v167)
    {
      BOOL v176 = v169 == 0;
      if (v169) {
        uint64_t v161 = v172;
      }
      else {
        uint64_t v161 = v267;
      }
      if (v176) {
        CMTagValue v162 = v265;
      }
      BOOL v177 = v168 == 0;
      if (v168) {
        uint64_t v164 = v257;
      }
      else {
        uint64_t v164 = v264;
      }
      if (v177) {
        CMTagValue v163 = v263;
      }
      else {
        CMTagValue v163 = tag2;
      }
      goto LABEL_335;
    }
  }
  *(void *)&v175.categorCGFloat y = block;
  if (!v168)
  {
    int v168 = 1;
    CMTagValue tag2 = *((void *)&block + 1);
    uint64_t v257 = block;
    goto LABEL_323;
  }
  v175.uint64_t value = *((void *)&block + 1);
  *(void *)&v350.categorCGFloat y = v257;
  v350.uint64_t value = tag2;
  if (CMTagEqualToTag(v175, v350))
  {
    int v168 = 1;
    goto LABEL_323;
  }
LABEL_497:
  MutableCFArrayRef Copy = FigSignalErrorAt();
  CMTagValue v163 = v263;
  uint64_t v164 = v264;
  CMTagValue v162 = v265;
  uint64_t v161 = v267;
  if (!MutableCopy) {
    goto LABEL_335;
  }
LABEL_498:
  uint64_t v79 = 0;
LABEL_390:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v274) {
    CFRelease(v274);
  }
  if (v312) {
    CFRelease(v312);
  }
  if (v79) {
    CFRelease(v79);
  }
  if (newMutableCollectionCopyOut) {
    CFRelease(newMutableCollectionCopyOut);
  }
  if (v310) {
    CFRelease(v310);
  }
  MEMORY[0x19970E930](*((void *)allocator + 38));
  if (idxa) {
    CFRelease(idxa);
  }
  if (v291) {
    CFRelease(v291);
  }
  if (v309) {
    CFRelease(v309);
  }
  if (v269) {
    CFRelease(v269);
  }
  if (v272) {
    CFRelease(v272);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v299) {
    CFRelease(v299);
  }
  if (MutableCopy) {
    goto LABEL_484;
  }
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  MutableCFArrayRef Copy = FigStartForwardingMediaServicesProcessDeathNotification();
  if (MutableCopy) {
    goto LABEL_484;
  }
  vq_updateForCurrentTimebaseRate(refcon);
  uint64_t v204 = FigRenderPipelineGetFigBaseObject(*(void *)(v297 + 360));
  uint64_t v205 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v205) {
    uint64_t v206 = v205;
  }
  else {
    uint64_t v206 = 0;
  }
  double v207 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t))(v206 + 48);
  if (!v207) {
    goto LABEL_483;
  }
  MutableCFArrayRef Copy = v207(v204, @"SourceSampleBufferQueue", *MEMORY[0x1E4F1CF80], v297 + 368);
  if (MutableCopy) {
    goto LABEL_484;
  }
  uint64_t v208 = FigRenderPipelineGetFigBaseObject(*(void *)(v297 + 360));
  uint64_t v209 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v209) {
    uint64_t v210 = v209;
  }
  else {
    uint64_t v210 = 0;
  }
  uint64_t v211 = v297;
  double v212 = *(void (**)(uint64_t, __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(v210 + 56);
  if (v212)
  {
    v212(v208, @"ObeyEmptyMediaMarkers", formatDescription);
    uint64_t v211 = v297;
  }
  uint64_t v213 = FigRenderPipelineGetFigBaseObject(*(void *)(v211 + 360));
  uint64_t v214 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v214) {
    uint64_t v215 = v214;
  }
  else {
    uint64_t v215 = 0;
  }
  uint64_t v216 = v297;
  CMTaggedBufferGroupFormatDescriptionRef v217 = (CMTaggedBufferGroupFormatDescriptionRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v218 = *(void (**)(uint64_t, __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(v215 + 56);
  if (v218)
  {
    v218(v213, @"RenderEmptyMedia", v217);
    uint64_t v216 = v297;
  }
  uint64_t v219 = *(void *)(v216 + 392);
  if (v219)
  {
    uint64_t v220 = FigRenderPipelineGetFigBaseObject(*(void *)(v216 + 360));
    uint64_t v221 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v222 = v221 ? v221 : 0;
    uint64_t v216 = v297;
    CFIndex v223 = *(void (**)(uint64_t, __CFString *, uint64_t))(v222 + 56);
    if (v223)
    {
      v223(v220, @"VideoDecoderUsage", v219);
      uint64_t v216 = v297;
    }
  }
  if (*(unsigned char *)(v216 + 400)) {
    CMTaggedBufferGroupFormatDescriptionRef v224 = formatDescription;
  }
  else {
    CMTaggedBufferGroupFormatDescriptionRef v224 = v217;
  }
  uint64_t v225 = FigRenderPipelineGetFigBaseObject(*(void *)(v216 + 360));
  uint64_t v226 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v226) {
    uint64_t v227 = v226;
  }
  else {
    uint64_t v227 = 0;
  }
  CFAttributedStringRef v228 = refcon;
  uint64_t v229 = v297;
  v230 = *(void (**)(uint64_t, __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(v227 + 56);
  if (v230)
  {
    v230(v225, @"ForceFullPowerDecode", v224);
    CFAttributedStringRef v228 = refcon;
    uint64_t v229 = v297;
  }
  if (*(unsigned char *)(v229 + 401))
  {
    if (*(unsigned char *)(v229 + 402)) {
      CMTaggedBufferGroupFormatDescriptionRef v217 = formatDescription;
    }
    uint64_t v231 = FigRenderPipelineGetFigBaseObject(*(void *)(v229 + 360));
    uint64_t v232 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v232) {
      uint64_t v233 = v232;
    }
    else {
      uint64_t v233 = 0;
    }
    CFAttributedStringRef v228 = refcon;
    uint64_t v229 = v297;
    long long v234 = *(void (**)(uint64_t, __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(v233 + 56);
    if (v234)
    {
      v234(v231, @"PreventDisplaySleepDuringVideoPlayback", v217);
      CFAttributedStringRef v228 = refcon;
      uint64_t v229 = v297;
    }
  }
  int v235 = *(opaqueCMBufferQueue **)(v229 + 368);
  blocCFIndex k = *(_OWORD *)(v229 + 416);
  *(void *)&long long v333 = *(void *)(v229 + 432);
  MutableCFArrayRef Copy = CMBufferQueueInstallTrigger(v235, (CMBufferQueueTriggerCallback)vq_sourceSampleBufferQueue_reachedLowWater, v228, 2, (CMTime *)&block, (CMBufferQueueTriggerToken *)(v229 + 480));
  if (MutableCopy) {
    goto LABEL_484;
  }
  MutableCFArrayRef Copy = CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(v297 + 368), (CMBufferQueueTriggerCallback)vq_sourceSampleBufferQueue_becameEmpty, refcon, 10, 1, (CMBufferQueueTriggerToken *)(v297 + 472));
  if (MutableCopy) {
    goto LABEL_484;
  }
  if (!*(void *)(v297 + 552))
  {
LABEL_481:
    uint64_t v244 = *(void *)(v297 + 560);
    uint64_t v245 = FigRenderPipelineGetFigBaseObject(*(void *)(v297 + 360));
    uint64_t v246 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v246) {
      uint64_t v247 = v246;
    }
    else {
      uint64_t v247 = 0;
    }
    double v251 = *(void (**)(uint64_t, __CFString *, uint64_t))(v247 + 56);
    if (v251) {
      v251(v245, @"PlaybackSessionID", v244);
    }
    goto LABEL_17;
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    MEMORY[0x19970E910](*(void *)(v297 + 240));
    MutableCFArrayRef Copy = FigLayerSynchronizerCreate((void *)(v297 + 248));
    if (MutableCopy)
    {
      MEMORY[0x19970E930](*(void *)(v297 + 240));
      goto LABEL_484;
    }
    FigLayerSynchronizerSetCompensateForDisplayLatency(*(void *)(v297 + 248), *(unsigned char *)(v297 + 239));
    MEMORY[0x19970E930](*(void *)(v297 + 240));
    MutableCFArrayRef Copy = vq_setSynchronizedLayers();
    if (MutableCopy) {
      goto LABEL_484;
    }
    CFRetain(*(CFTypeRef *)(v297 + 8));
    MutableCFArrayRef Copy = FigSyncMomentSourceCreateWithDispatchQueueAndDestructor((uint64_t)vq_synchronizeLayerToMoment, *(void *)(v297 + 8), (void (*)(uint64_t))vq_ReleaseWeakReferenceToSelf, *(const void **)(v297 + 552), *(NSObject **)(v297 + 520), (uint64_t *)(v297 + 256));
    if (MutableCopy) {
      goto LABEL_484;
    }
  }
  uint64_t v239 = *(void *)(v297 + 552);
  uint64_t v240 = FigRenderPipelineGetFigBaseObject(*(void *)(v297 + 360));
  uint64_t v241 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v242 = v241 ? v241 : 0;
  v243 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v242 + 56);
  if (!v243)
  {
LABEL_483:
    MutableCFArrayRef Copy = 4294954514;
    goto LABEL_484;
  }
  MutableCFArrayRef Copy = v243(v240, @"Timebase", v239);
  if (!MutableCopy) {
    goto LABEL_481;
  }
LABEL_484:
  MEMORY[0x19970E2B0](*(void *)(v297 + 408));
LABEL_485:
  LODWORD(sbufPTS.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
  LOBYTE(sbufDuration.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
  v248 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v249 = sbufPTS.value;
  if (os_log_type_enabled(v248, sbufDuration.value)) {
    unsigned int v250 = v249;
  }
  else {
    unsigned int v250 = v249 & 0xFFFFFFFE;
  }
  if (v250)
  {
    *(_DWORD *)CFIndex v325 = 136315906;
    *(void *)&v325[4] = "vq_EnqueueFrame";
    *(_WORD *)&v325[12] = 2048;
    *(void *)&v325[14] = refcon;
    *(_WORD *)&v325[22] = 2048;
    *(void *)&v325[24] = sbuf;
    *(_WORD *)&v325[32] = 1024;
    *(_DWORD *)&v325[34] = MutableCopy;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_491:
  if (sBufOut) {
    CFRelease(sBufOut);
  }
  return MutableCopy;
}

void sub_194554CE4(_Unwind_Exception *a1)
{
}

uint64_t vq_EnqueueH264Frame(uint64_t a1, int a2, int a3, const __CFData *a4, OpaqueCMBlockBuffer *a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  return vq_EnqueueH264FrameWithTimingInfoBaggage(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t vq_EnqueueH264FrameWithTimingInfoBaggage(uint64_t a1, int a2, int a3, const __CFData *a4, OpaqueCMBlockBuffer *a5, uint64_t a6, uint64_t a7, const void *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMAttachmentBearerRef target = 0;
  size_t sampleSizeArray = 0;
  if (*(_DWORD *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(DerivedStorage + 544) = 1;
  CFIndex v34 = (CMVideoFormatDescriptionRef *)(DerivedStorage + 344);
  CFTypeRef v35 = *(const opaqueCMFormatDescription **)(DerivedStorage + 344);
  if (!v35)
  {
LABEL_19:
    if (!a4) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  if (CMVideoFormatDescriptionGetDimensions(v35).width != a2
    || CMVideoFormatDescriptionGetDimensions(*v34).height != a3)
  {
    goto LABEL_39;
  }
  if (!a4)
  {
LABEL_9:
    uint64_t v36 = FigSignalErrorAt();
LABEL_32:
    uint64_t v43 = v36;
    goto LABEL_34;
  }
  if (*v34)
  {
    CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(*v34, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (Extension)
    {
      TypeIOSurfaceID ID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(Extension))
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(Extension, @"avcC");
        if (Value)
        {
          CFTypeID v46 = CFArrayGetTypeID();
          if (v46 == CFGetTypeID(Value)) {
            CFArrayGetValueAtIndex(Value, 0);
          }
        }
      }
    }
  }
  if (!FigCFEqual())
  {
LABEL_39:
    if (*v34)
    {
      CFRelease(*v34);
      *CFIndex v34 = 0;
    }
    goto LABEL_19;
  }
LABEL_20:
  if (*v34)
  {
    CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_22;
  }
  CFDataGetLength(a4);
  CFDataGetBytePtr(a4);
  CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v43 = FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom();
  if (!v43)
  {
LABEL_22:
    *(_OWORD *)&sampleTimingArray.duration.uint64_t value = *MEMORY[0x1E4F1F9F8];
    sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
    CMClockMakeHostTimeFromSystemUnits(&sampleTimingArray.presentationTimeStamp, a6);
    size_t sampleSizeArray = CMBlockBufferGetDataLength(a5);
    uint64_t v36 = CMSampleBufferCreate(v39, a5, 1u, 0, 0, *v34, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, (CMSampleBufferRef *)&target);
    if (!v36)
    {
      if (a8) {
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F220], a8, 1u);
      }
      CMAttachmentBearerRef v40 = target;
      uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v41) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = 0;
      }
      CFArrayRef v44 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef, uint64_t, double, double, double, double, double, double, double, double))(v42 + 16);
      if (!v44)
      {
        uint64_t v43 = 4294954514;
        goto LABEL_34;
      }
      uint64_t v36 = v44(a1, v40, a7, a9, a10, a11, a12, a13, a14, a15, a16);
    }
    goto LABEL_32;
  }
LABEL_34:
  if (target) {
    CFRelease(target);
  }
  return v43;
}

uint64_t vq_Flush(uint64_t a1, char a2)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMAttachmentBearerRef target = 0;
  values = 0;
  if (*(_DWORD *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 408));
  CFArrayRef v7 = *(const __CFArray **)(v6 + 320);
  if (v7 && CFArrayGetCount(v7) >= 1) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v6 + 320));
  }
  if (*(void *)(v6 + 368))
  {
    ++*(_DWORD *)(v6 + 384);
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(v6 + 384));
    CFDictionaryRef v9 = CFDictionaryCreate(v8, MEMORY[0x1E4F1F328], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v10 = CMSampleBufferCreate(v8, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if (v10)
    {
      uint64_t v18 = v10;
      goto LABEL_40;
    }
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2C0], values, 1u);
    if ((a2 & 2) != 0)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(Mutable, @"videoQueueFlushSBuf", (const void *)*MEMORY[0x1E4F1CFD0]);
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2A8], Mutable, 1u);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v6 + 368), target);
    if (a2)
    {
      if (*(void *)(v6 + 24) && !*(unsigned char *)(v6 + 32))
      {
        if (dword_1E9351450)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        cf[0] = 0;
        uint64_t v13 = CMBaseObjectGetDerivedStorage();
        if (!FigDeferredTransactionCreate((uint64_t)v8, (uint64_t *)cf))
        {
          FPSupport_AppendDeferredTransactionChangeForHidingLayer(cf[0], *(void **)(v13 + 24), (uint64_t)"vq_hideMaskingLayer");
          FigDeferredTransactionCommit((uint64_t)cf[0]);
          *(unsigned char *)(v13 + 32) = 1;
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }
      if (*(void *)(v6 + 48) && *(unsigned char *)(v6 + 629)) {
        CAImageQueueFlush();
      }
      MEMORY[0x19970E910](*(void *)(v6 + 304));
      for (CFIndex i = 0; ; ++i)
      {
        CFArrayRef Count = *(const __CFArray **)(v6 + 296);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (i >= (uint64_t)Count) {
          break;
        }
        CFDictionaryRef ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 296), i);
        if (CFArrayGetCount(ValueAtIndex[3]) >= 1)
        {
          CFIndex v17 = 0;
          do
          {
            cf[0] = 0;
            VideoTargetInfoCopyCAImageQueueAtIndex((uint64_t)ValueAtIndex, v17, (uint64_t)cf);
            if (cf[0])
            {
              CAImageQueueFlush();
              CFRelease(cf[0]);
            }
            ++v17;
          }
          while (v17 < CFArrayGetCount(ValueAtIndex[3]));
        }
      }
      MEMORY[0x19970E930](*(void *)(v6 + 304));
    }
  }
  else
  {
    if ((a2 & 2) != 0) {
      vq_safelyPostNotification(a1, @"FlushComplete", 0);
    }
    CFDictionaryRef v9 = 0;
  }
  uint64_t v18 = 0;
LABEL_40:
  MEMORY[0x19970E2B0](*(void *)(v6 + 408));
  if (values) {
    CFRelease(values);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (target) {
    CFRelease(target);
  }
  return v18;
}

BOOL vq_IsAboveHighWaterLevel()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(opaqueCMBufferQueue **)(DerivedStorage + 368);
  if (v1)
  {
    int v2 = *(_DWORD *)(DerivedStorage + 464);
    if (v2 == 1)
    {
      if (CMBufferQueueGetBufferCount(v1) > 0) {
        return 1;
      }
    }
    else if (!v2)
    {
      CMBufferQueueGetDuration(&time1, v1);
      CMTimeValue value = time1.value;
      CMTimeScale timescale = time1.timescale;
      if (time1.flags)
      {
        time1.CMTimeValue value = value;
        time1.CMTimeScale timescale = timescale;
        CMTime v5 = *(CMTime *)(DerivedStorage + 440);
        if (CMTimeCompare(&time1, &v5) > 0) {
          return 1;
        }
      }
    }
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  return *(unsigned char *)(v3 + 312) && !*(void *)(v3 + 328) && !*(void *)(v3 + 360);
}

uint64_t vq_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, uint64_t a4, uint64_t a5, const void *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMAttachmentBearerRef target = 0;
  size_t sampleSizeArray = 0;
  if (*(_DWORD *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  if (!a3) {
    goto LABEL_17;
  }
  uint64_t v30 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 544) = 1;
  CFDictionaryRef v31 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a2)
  {
    uint64_t FormatDescriptionFromSerializedAtomDataBlockBuffer = FigRemote_CreateFormatDescriptionFromSerializedAtomDataBlockBuffer();
    if (!FormatDescriptionFromSerializedAtomDataBlockBuffer)
    {
      uint64_t v33 = *(const void **)(v30 + 352);
      if (v33) {
        CFRelease(v33);
      }
      *(void *)(v30 + 352) = 0;
      goto LABEL_17;
    }
  }
  else
  {
    if (!*(void *)(DerivedStorage + 352))
    {
LABEL_17:
      uint64_t FormatDescriptionFromSerializedAtomDataBlockBuffer = FigSignalErrorAt();
      goto LABEL_21;
    }
    *(_OWORD *)&sampleTimingArray.duration.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
    CMClockMakeHostTimeFromSystemUnits(&sampleTimingArray.presentationTimeStamp, a4);
    size_t sampleSizeArray = CMBlockBufferGetDataLength(a3);
    uint64_t FormatDescriptionFromSerializedAtomDataBlockBuffer = CMSampleBufferCreate(*v31, a3, 1u, 0, 0, *(CMFormatDescriptionRef *)(v30 + 352), 1, 1, &sampleTimingArray, 1, &sampleSizeArray, (CMSampleBufferRef *)&target);
    if (!FormatDescriptionFromSerializedAtomDataBlockBuffer)
    {
      if (a6) {
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F220], a6, 1u);
      }
      CMAttachmentBearerRef v34 = target;
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      int v37 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef, uint64_t, double, double, double, double, double, double, double, double))(v36 + 16);
      if (!v37)
      {
        uint64_t v38 = 4294954514;
        goto LABEL_23;
      }
      uint64_t FormatDescriptionFromSerializedAtomDataBlockBuffer = v37(a1, v34, a5, a7, a8, a9, a10, a11, a12, a13, a14);
    }
  }
LABEL_21:
  uint64_t v38 = FormatDescriptionFromSerializedAtomDataBlockBuffer;
LABEL_23:
  if (target) {
    CFRelease(target);
  }
  return v38;
}

uint64_t vq_RequestDecodeForPreroll(uint64_t a1, void *a2)
{
  values = a2;
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 360);
  if (v4)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFAllocatorRef v8 = *(uint64_t (**)(uint64_t, void *))(v6 + 56);
    if (v8)
    {
      return v8(v4, a2);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    if (a2)
    {
      CFDictionaryRef v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigVideoQueueNotificationParameter_RequestID, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      vq_safelyPostNotification(a1, @"CompletedDecodeForPreroll", v7);
      if (v7) {
        CFRelease(v7);
      }
    }
    else
    {
      vq_safelyPostNotification(a1, @"CompletedDecodeForPreroll", 0);
    }
    return 0;
  }
}

void vq_sourceSampleBufferQueue_reachedLowWater(uint64_t a1)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage && !DerivedStorage[116])
  {
    vq_safelyPostNotification(a1, @"VideoQueueNowBelowLowWaterLevel", 0);
  }
}

void vq_sourceSampleBufferQueue_becameEmpty(uint64_t a1)
{
}

void vq_synchronizeLayerToMoment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)DerivedStorage)
    {
      uint64_t v6 = DerivedStorage;
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
      uint64_t v7 = *(void *)(v6 + 248);
      if (v7) {
        FigLayerSynchronizerSynchronizeToMoment(v7, a2, 0);
      }
      MEMORY[0x19970E930](*(void *)(v6 + 240));
    }
    CFRelease(v4);
  }
}

BOOL vq_tagCollectionGetLayerIDsIfPresent(opaqueCMSampleBuffer *a1, int64_t *a2, int64_t *a3)
{
  TaggedBufferGroup = CMSampleBufferGetTaggedBufferGroup(a1);
  if (TaggedBufferGroup && (uint64_t v6 = TaggedBufferGroup, Count = CMTaggedBufferGroupGetCount(TaggedBufferGroup), Count >= 1))
  {
    CMItemCount v8 = Count;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    CFIndex v9 = 0;
    int64_t v22 = 0;
    uint64_t v23 = 0;
    int v10 = 0;
    int v11 = 0;
    SInt64CFArrayRef Value = 0;
    uint64_t v12 = *MEMORY[0x1E4F1F418];
    CMTagValue v13 = *(void *)(MEMORY[0x1E4F1F418] + 8);
    CMTag v24 = (CMTag)*MEMORY[0x1E4F1F3D8];
    uint64_t v15 = *MEMORY[0x1E4F1F428];
    CMTagValue v14 = *(void *)(MEMORY[0x1E4F1F428] + 8);
    do
    {
      TagCollectionAtIndeCGFloat x = CMTaggedBufferGroupGetTagCollectionAtIndex(v6, v9);
      CMTag tagBuffer = v24;
      numberOfTagsCopiedouble d = 0;
      *(void *)&v27.categorCGFloat y = v12;
      v27.CMTimeValue value = v13;
      if (CMTagCollectionContainsTag(TagCollectionAtIndex, v27))
      {
        int v11 = 1;
        if (!CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_VideoLayerID, &tagBuffer, 1, &numberOfTagsCopied)&& numberOfTagsCopied == 1)
        {
          SInt64CFArrayRef Value = CMTagGetSInt64Value(tagBuffer);
          int v11 = 1;
          HIDWORD(v23) = 1;
        }
      }
      *(void *)&v28.categorCGFloat y = v15;
      v28.CMTimeValue value = v14;
      if (CMTagCollectionContainsTag(TagCollectionAtIndex, v28))
      {
        int v10 = 1;
        if (!CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_VideoLayerID, &tagBuffer, 1, &numberOfTagsCopied)&& numberOfTagsCopied == 1)
        {
          int64_t v22 = CMTagGetSInt64Value(tagBuffer);
          int v10 = 1;
          LODWORD(v23) = 1;
        }
      }
      ++v9;
    }
    while (v8 != v9);
    if (HIDWORD(v23) && v23)
    {
      *uint64_t v19 = SInt64Value;
      *uint64_t v20 = v22;
    }
  }
  else
  {
    int v11 = 0;
    int v10 = 0;
  }
  if (v11) {
    BOOL v17 = v10 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  return !v17;
}

OpaqueCMTaggedBufferGroup *vq_containsStereoVideoTaggedBufferGroup(opaqueCMSampleBuffer *a1, __CFArray *a2, int *a3)
{
  uint64_t result = CMSampleBufferGetTaggedBufferGroup(a1);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  CMItemCount Count = CMTaggedBufferGroupGetCount(result);
  if (Count < 1)
  {
    uint64_t result = 0;
    int v10 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_28;
  }
  CMItemCount v8 = Count;
  CFUUIDRef v21 = a3;
  CFIndex v9 = 0;
  uint64_t v24 = 0;
  int v10 = 0;
  uint64_t v11 = *MEMORY[0x1E4F1F3E0];
  CMTagValue v12 = *(void *)(MEMORY[0x1E4F1F3E0] + 8);
  uint64_t v13 = *MEMORY[0x1E4F1F418];
  CMTagValue v14 = *(void *)(MEMORY[0x1E4F1F418] + 8);
  CMTagValue v22 = *(void *)(MEMORY[0x1E4F1F428] + 8);
  uint64_t v23 = *MEMORY[0x1E4F1F428];
  do
  {
    TagCollectionAtIndeCGFloat x = CMTaggedBufferGroupGetTagCollectionAtIndex(v6, v9);
    *(void *)&v25.categorCGFloat y = v11;
    v25.CMTimeValue value = v12;
    if (CMTagCollectionContainsTag(TagCollectionAtIndex, v25))
    {
      if (a2) {
        CFArrayAppendValue(a2, TagCollectionAtIndex);
      }
      *(void *)&v26.categorCGFloat y = v13;
      v26.CMTimeValue value = v14;
      if (CMTagCollectionContainsTag(TagCollectionAtIndex, v26))
      {
        ++v10;
        LODWORD(v24) = 1;
      }
      else
      {
        v27.CMTimeValue value = v22;
        *(void *)&v27.categorCGFloat y = v23;
        int v16 = CMTagCollectionContainsTag(TagCollectionAtIndex, v27);
        if (v16) {
          ++v10;
        }
        int v17 = HIDWORD(v24);
        if (v16) {
          int v17 = 1;
        }
        HIDWORD(v24) = v17;
      }
    }
    ++v9;
  }
  while (v8 != v9);
  if (v24) {
    BOOL v18 = HIDWORD(v24) == 0;
  }
  else {
    BOOL v18 = 1;
  }
  int v19 = v18;
  uint64_t result = (OpaqueCMTaggedBufferGroup *)(v19 ^ 1u);
  if (v18 || !a2)
  {
    a3 = v21;
    if (!v21) {
      return result;
    }
    goto LABEL_28;
  }
  if (!FigTagCollectionCreateMutable())
  {
    *(void *)&v28.categorCGFloat y = v11;
    v28.CMTimeValue value = v12;
    CMTagCollectionAddTag(0, v28);
    CMTagCollectionAddTag(0, *MEMORY[0x1E4F1F410]);
    FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
    CFArrayAppendValue(a2, 0);
  }
  a3 = v21;
  uint64_t result = (OpaqueCMTaggedBufferGroup *)1;
  if (v21)
  {
LABEL_28:
    if ((result & (v10 == 2)) != 0) {
      int v20 = 3;
    }
    else {
      int v20 = 0;
    }
    *a3 = v20;
  }
  return result;
}

uint64_t vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo(uint64_t a1, uint64_t a2, uint64_t a3, CMTagValue a4, int64_t a5, __CFArray *a6, __CFArray *a7, uint64_t a8, uint64_t a9, CMTagValue a10, uint64_t a11, CMTagValue a12)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  if (!a2 || !a6 || !a7 || !a8)
  {
    uint64_t v24 = FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t v20 = DerivedStorage;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, void, void **))(v22 + 8);
  if (!v23) {
    goto LABEL_18;
  }
  uint64_t v24 = v23(a2, 0, &value);
  if (v24) {
    goto LABEL_32;
  }
  uint64_t v25 = *(void *)(v20 + 552);
  if (v25)
  {
    uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(value);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    CFTypeID v29 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v28 + 56);
    if (v29)
    {
      uint64_t v24 = v29(FigBaseObject, @"FigImageQueueProperty_Timebase", v25);
      if (!v24) {
        goto LABEL_16;
      }
LABEL_32:
      uint64_t v32 = v24;
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v32 = 4294954514;
    goto LABEL_19;
  }
LABEL_16:
  CFArrayAppendValue(a6, value);
  if (a5 < 0)
  {
    CFArrayAppendValue(a7, (const void *)*MEMORY[0x1E4F1D260]);
    CFMutableDictionaryRef Mutable = 0;
    CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  else
  {
    CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    CFArrayAppendValue(a7, Mutable);
  }
  uint64_t v32 = CMTagCollectionCreateMutable(v30, 0, (CMMutableTagCollectionRef *)&cf);
  if (!v32)
  {
    CMTagCollectionAddTag((CMMutableTagCollectionRef)cf, *MEMORY[0x1E4F1F3E0]);
    *(void *)&v38.categorCGFloat y = a3;
    v38.CMTimeValue value = a4;
    CMTagCollectionAddTag((CMMutableTagCollectionRef)cf, v38);
    if ((a5 & 0x8000000000000000) == 0)
    {
      CMAttachmentBearerRef v34 = (OpaqueCMTagCollection *)cf;
      CMTag v39 = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, a5);
      CMTagCollectionAddTag(v34, v39);
    }
    *(void *)&v40.categorCGFloat y = a9;
    v40.CMTimeValue value = a10;
    CMTagCollectionAddTag((CMMutableTagCollectionRef)cf, v40);
    *(void *)&v41.categorCGFloat y = a11;
    v41.CMTimeValue value = a12;
    CMTagCollectionAddTag((CMMutableTagCollectionRef)cf, v41);
    FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
    CFTypeRef v35 = cf;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a8 + 24), value);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a8 + 32), v35);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_19:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v32;
}

void vq_safelyPostNotification(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v7)
    {
      uint64_t v8 = v7;
      if (a2) {
        CFRetain(a2);
      }
      if (a3) {
        CFRetain(a3);
      }
      CFIndex v9 = *((void *)v6 + 65);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __vq_safelyPostNotification_block_invoke;
      v10[3] = &__block_descriptor_64_e5_v8__0l;
      v10[4] = v6;
      void v10[5] = a2;
      v10[6] = v8;
      v10[7] = a3;
      dispatch_async(v9, v10);
    }
  }
}

void __vq_safelyPostNotification_block_invoke(uint64_t a1)
{
  if (!**(_DWORD **)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  int v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t FigVTTDocumentWriterGetClassID()
{
  return sFigVTTDocumentWriterClassID;
}

uint64_t figVTTDocumentWriter_RegisterFigVTTDocumentWriterBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVTTDocumentWriterGetTypeID()
{
  MEMORY[0x19970EE10](&FigVTTDocumentWriterGetClassID_sRegisterFigVTTDocumentWriterBaseTypeOnce, figVTTDocumentWriter_RegisterFigVTTDocumentWriterBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTDocumentWriterSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigVTTDocumentWriterCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigVTTDocumentWriterInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1);
}

uint64_t FigVTTDocumentWriterCreateAndAddNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigVTTDocumentWriterFlush(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

CFStringRef figVTTDocumentWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVTTDocumentWriter %p]", a1);
}

double FigGlobalNetworkBandwidthTrackerGetAggregateBandwidth()
{
  return 0.0;
}

uint64_t FigVideoQueueGetClassID()
{
  return sFigVideoQueueClassID;
}

uint64_t RegisterFigVideoQueueType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVideoQueueGetTypeID()
{
  MEMORY[0x19970EE10](&FigVideoQueueGetClassID_sRegisterFigVideoQueueTypeOnce, RegisterFigVideoQueueType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigVideoQueueCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVideoQueue %p]", a1);
}

void FigStreamingRestrictionsGetLatestRestrictions(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  if (sr_SetupOnce_sFigStreamingRestrictionsSetupOnce != -1) {
    dispatch_once(&sr_SetupOnce_sFigStreamingRestrictionsSetupOnce, &__block_literal_global_84);
  }
  MEMORY[0x19970E910](sCurrentStreamingRestrictionsMutex);
  if (a1) {
    *a1 = sCurrentStreamingRestrictions;
  }
  if (a2) {
    *a2 = HIDWORD(sCurrentStreamingRestrictions);
  }
  if (a3) {
    *a3 = dword_1E934FCC0;
  }

  JUMPOUT(0x19970E930);
}

void sr_checkTokenLevelAndHandleIfNecessary()
{
  CFTypeRef context = 0;
  uint64_t state64 = 0;
  if (sStreamingRestrictionsNotifyListenerToken != -1)
  {
    notify_get_state(sStreamingRestrictionsNotifyListenerToken, &state64);
    uint64_t v0 = state64;
    uint64_t v1 = state64 / 0xA;
    state64 /= 0xAuLL;
    if (sCurrentRestrictorLevel != v0 / 0xA)
    {
      sCurrentRestrictorLevel = v1;
      if (sStreamingRestrictionsPolicy)
      {
        CFDictionaryApplyFunction((CFDictionaryRef)sStreamingRestrictionsPolicy, (CFDictionaryApplierFunction)sr_findPolicyForLevel, &context);
        if (!context) {
          return;
        }
        CFDictionaryGetValue((CFDictionaryRef)sStreamingRestrictionsPolicy, context);
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        MEMORY[0x19970E910](sCurrentStreamingRestrictionsMutex);
        if (sCurrentStreamingRestrictions) {
          BOOL v2 = 0;
        }
        else {
          BOOL v2 = dword_1E934FCC0 == 0;
        }
        if (v2)
        {
          MEMORY[0x19970E930](sCurrentStreamingRestrictionsMutex);
        }
        else
        {
          sCurrentStreamingRestrictions = 0;
          dword_1E934FCC0 = 0;
          MEMORY[0x19970E930](sCurrentStreamingRestrictionsMutex);
          CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          LocalCenter = CFNotificationCenterGetLocalCenter();
          CFNotificationCenterPostNotification(LocalCenter, @"StreamingRestrictions_RestrictionsChanged", 0, Mutable, 1u);
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
      }
    }
    if (context) {
      CFRelease(context);
    }
  }
}

void sr_findPolicyForLevel(const __CFString *a1, uint64_t a2, CFStringRef *a3)
{
  IntCFArrayRef Value = CFStringGetIntValue(a1);
  if (*a3) {
    SInt32 v6 = CFStringGetIntValue(*a3);
  }
  else {
    SInt32 v6 = -1;
  }
  if (sCurrentRestrictorLevel >= (unint64_t)IntValue && v6 < IntValue)
  {
    CFStringRef v8 = *a3;
    *a3 = a1;
    if (a1) {
      CFRetain(a1);
    }
    if (v8)
    {
      CFRelease(v8);
    }
  }
}

uint64_t CreateServedAIGState(void *a1)
{
  BOOL v2 = malloc_type_calloc(1uLL, 0x38uLL, 0x10200409C399896uLL);
  if (!v2 || (v3 = FigDispatchQueueCreateWithPriority(), uint64_t result = 0, (v2[5] = v3) == 0)) {
    uint64_t result = FigSignalErrorAt();
  }
  *a1 = v2;
  return result;
}

uint64_t aigXPCServer_setAudioSessionBehaviour(uint64_t a1, _OWORD *a2)
{
  CFTypeRef cf = 0;
  if (in_audio_mx_server_process())
  {
    uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = CMSessionCreate();
    if (!UsingPrimaryAVAudioSessionSiblingForAuditToken)
    {
      uint64_t v5 = (uint64_t *)(a1 + 16);
      uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateWithCMSession(*MEMORY[0x1E4F1CF80], cf, (void *)(a1 + 16));
      if (!UsingPrimaryAVAudioSessionSiblingForAuditToken)
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v7)
          {
            CFStringRef v8 = *(void (**)(uint64_t, void, __CFString *))(v7 + 56);
            if (v8) {
              v8(v6, *MEMORY[0x1E4F75FA8], @"FigAssetImageGeneratorServer");
            }
          }
          uint64_t v9 = *v5;
          if (v9)
          {
            uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v10)
            {
              uint64_t v11 = *(void (**)(uint64_t, void, void))(v10 + 56);
              if (v11) {
                v11(v9, *MEMORY[0x1E4F75EC8], *MEMORY[0x1E4F75878]);
              }
            }
          }
        }
LABEL_13:
        if (!*(_DWORD *)(a1 + 24))
        {
LABEL_23:
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          FigStartForwardingMediaServicesProcessDeathNotification();
          uint64_t v19 = 0;
          goto LABEL_24;
        }
        Suint64_t Int32 = (const void *)FigCFNumberCreateSInt32();
        uint64_t FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(*(void *)(a1 + 8));
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        BOOL v18 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v17 + 56);
        if (v18)
        {
          uint64_t v19 = v18(FigBaseObject, @"ClientPID", SInt32);
          if (!SInt32)
          {
LABEL_22:
            if (v19) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v19 = 4294954514;
          if (!SInt32) {
            goto LABEL_22;
          }
        }
        CFRelease(SInt32);
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v12 = *MEMORY[0x1E4F1CF80];
    long long v13 = a2[1];
    v21[0] = *a2;
    v21[1] = v13;
    uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(v12, v21, @"FigAssetImageGenerator", (void *)(a1 + 16));
    if (!UsingPrimaryAVAudioSessionSiblingForAuditToken) {
      goto LABEL_13;
    }
  }
  uint64_t v19 = UsingPrimaryAVAudioSessionSiblingForAuditToken;
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

void DisposeServedAIGState(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeRef v2 = a1[1];
    if (v2)
    {
      uint64_t FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v2);
      if (FigBaseObject)
      {
        uint64_t v4 = FigBaseObject;
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v6 = v5 ? v5 : 0;
        uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
        if (v7) {
          v7(v4);
        }
      }
    }
    if (a1[2])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigStopForwardingMediaServicesProcessDeathNotification();
      CFTypeRef v8 = a1[2];
      if (v8)
      {
        CFRelease(v8);
        a1[2] = 0;
      }
    }
    CFTypeRef v9 = a1[1];
    if (v9)
    {
      CFRelease(v9);
      a1[1] = 0;
    }
    uint64_t v10 = a1[5];
    if (v10)
    {
      dispatch_release(v10);
      a1[5] = 0;
      CFTypeRef v11 = a1[1];
      if (v11) {
        CFRelease(v11);
      }
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    uint64_t v12 = (void *)a1[6];
    if (v12) {
      os_release(v12);
    }
    free(a1);
  }
}

uint64_t serverXPCAIG_NotificationFilter(int a1, int a2, CFTypeRef cf1, const __CFDictionary *a4, uint64_t a5, void *a6)
{
  uint64_t result = CFEqual(cf1, @"AIGDidGenerateCGImage");
  if (result)
  {
    CFArrayRef Value = (CGImage *)CFDictionaryGetValue(a4, @"CGImage");
    if (!Value || serverXPCAIG_AddCGImageToMessage(Value, a6))
    {
      return 1;
    }
    else
    {
      if (FigCFDictionaryGetCMTimeIfPresent()) {
        FigXPCMessageSetCMTime();
      }
      if (FigCFDictionaryGetInt64IfPresent()) {
        xpc_dictionary_set_int64(a6, "RequestID", 0);
      }
      return 2;
    }
  }
  return result;
}

uint64_t FigAssetImageGeneratorServerStart()
{
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleAssetImageGeneratorMessage(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = 0;
  int v30 = 0;
  uint64_t v28 = 0;
  CFTypeRef cf = 0;
  Opint Code = FigXPCMessageGetOpCode();
  *((_DWORD *)v32 + 6) = OpCode;
  if (OpCode) {
    goto LABEL_35;
  }
  if (v30 == 1668441441)
  {
    CFTypeRef v40 = 0;
    CMTag v41 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    memset(&v37, 0, sizeof(v37));
    uint64_t v36 = 0;
    xpc_connection_get_audit_token();
    audit_token_t token = v37;
    int ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
    xpc_dictionary_get_uint64(a2, "Asset");
    int v7 = FigXPCMessageCopyCFDictionary();
    if (v7 || (int v7 = FigXPCAssetServerCopyAssetForID()) != 0)
    {
      int v22 = v7;
      uint64_t v11 = 0;
    }
    else
    {
      int v8 = CreateServedAIGState(&v39);
      if (v8)
      {
        int v22 = v8;
        SecTaskRef v14 = 0;
        uint64_t v11 = v39;
LABEL_26:
        DisposeServedAIGState((CFTypeRef *)v11);
        if (v36) {
          CFRelease(v36);
        }
        if (v41) {
          CFRelease(v41);
        }
        if (v40) {
          CFRelease(v40);
        }
        if (v14) {
          CFRelease(v14);
        }
        *((_DWORD *)v32 + 6) = v22;
        goto LABEL_35;
      }
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      int v10 = FigSurrogateAssetImageGeneratorCreateFromAsset(*MEMORY[0x1E4F1CF80], v41, v36, &v40);
      uint64_t v11 = v39;
      if (!v10)
      {
        int v10 = FigSandboxAssertionCreateForPID();
        if (!v10)
        {
          uint64_t v12 = FigOSTransactionCreate();
          *(void *)(v11 + 4_Block_object_dispose(&STACK[0x290], 8) = v12;
          if (v12)
          {
            CFTypeRef v13 = v40;
            *(void *)(v11 + _Block_object_dispose(&STACK[0x290], 8) = v40;
            if (v13) {
              CFRetain(v13);
            }
            *(_DWORD *)(v11 + 24) = ClientPIDFromAuditToken;
            audit_token_t token = v37;
            int v10 = aigXPCServer_setAudioSessionBehaviour(v11, &token);
            if (!v10)
            {
              audit_token_t token = v37;
              SecTaskRef v14 = SecTaskCreateWithAuditToken(v9, &token);
              if (v14 && VTIsSecTaskEntitledForVP9Decode())
              {
                uint64_t FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v40);
                uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v17 = v16 ? v16 : 0;
                uint64_t v21 = *(void (**)(uint64_t, __CFString *, void))(v17 + 56);
                if (v21) {
                  v21(FigBaseObject, @"AllowAlternateDecoderSelection", *MEMORY[0x1E4F1CFD0]);
                }
              }
              int v22 = FigXPCServerAssociateObjectWithConnection();
              if (!v22)
              {
                uint64_t v23 = v38;
                *(void *)(v11 + 32) = v38;
                xpc_dictionary_set_uint64(a3, (const char *)*MEMORY[0x1E4F20280], v23);
                uint64_t v11 = 0;
              }
              goto LABEL_26;
            }
          }
          else
          {
            int v10 = FigSignalErrorAt();
          }
        }
      }
      int v22 = v10;
    }
    SecTaskRef v14 = 0;
    goto LABEL_26;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  int v18 = FigXPCServerLookupAndRetainAssociatedObject();
  *((_DWORD *)v32 + 6) = v18;
  if (!v18)
  {
    if (cf
      && (CFTypeID v19 = CFGetTypeID(cf), v19 == FigAssetImageGeneratorGetTypeID())
      && (uint64_t v20 = *(NSObject **)(v28 + 40)) != 0)
    {
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 0x40000000;
      v26[2] = __HandleAssetImageGeneratorMessage_block_invoke;
      v26[3] = &unk_1E57A5A10;
      int v27 = v30;
      v26[4] = &v31;
      v26[5] = cf;
      v26[6] = a2;
      v26[7] = a3;
      dispatch_sync(v20, v26);
    }
    else
    {
      *((_DWORD *)v32 + 6) = FigSignalErrorAt();
    }
  }
LABEL_35:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v24 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v31, 8);
  return v24;
}

uint64_t HandleAssetImageGeneratorNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t result = FigXPCServerLookupAndRetainAssociatedObject();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  return result;
}

void aigXPCServer_interruptionNotificationCallback(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(a2);
    if (FigBaseObject)
    {
      uint64_t v3 = FigBaseObject;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6)
      {
        v6(v3);
      }
    }
  }
}

uint64_t serverXPCAIG_AddCGImageToMessage(CGImage *a1, void *a2)
{
  vm_address_t v12 = 0;
  int v11 = 0;
  uint64_t v9 = 0;
  vm_address_t v10 = 0;
  uint64_t v3 = FigRemote_CreateSerializedDataForCGImage(a1, &v12, &v11, (vm_size_t)&v9, &v10, (_DWORD *)&v9 + 1);
  if (v3) {
    goto LABEL_13;
  }
  if (v9) {
    FigMachPortReleaseSendRight_();
  }
  PropertCGFloat y = (__IOSurface *)CGImageGetProperty();
  if (Property)
  {
    xpc_object_t XPCObject = IOSurfaceCreateXPCObject(Property);
    if (!XPCObject)
    {
      uint64_t v3 = FigSignalErrorAt();
      goto LABEL_13;
    }
    uint64_t v6 = XPCObject;
    xpc_dictionary_set_value(a2, "IOSurface", XPCObject);
    xpc_release(v6);
  }
  if (v12)
  {
    if (v11)
    {
      uint64_t v3 = FigXPCMessageSetAndConsumeVMData();
      if (v3) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v7 = 0;
  if (v10 && HIDWORD(v9))
  {
    uint64_t v3 = FigXPCMessageSetAndConsumeVMData();
LABEL_13:
    uint64_t v7 = v3;
  }
  FigXPCRelease();
  return v7;
}

void __HandleAssetImageGeneratorMessage_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 != 1919250737)
  {
    if (v2 != 1668311405)
    {
      int v12 = -16158;
      goto LABEL_27;
    }
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(a1 + 56);
    CFTypeRef cf = 0;
    CFTypeRef v18 = 0;
    long long v21 = *MEMORY[0x1E4F1F9F8];
    uint64_t v22 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    long long v19 = v21;
    uint64_t v20 = v22;
    FigXPCMessageGetCMTime();
    int v5 = FigXPCMessageCopyCFDictionary();
    if (!v5)
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      CFTypeRef v13 = *(uint64_t (**)(uint64_t, long long *, CFTypeRef, uint64_t, CFTypeRef *, long long *))(v7 + 8);
      if (!v13)
      {
        int v12 = -12782;
LABEL_17:
        if (cf) {
          CFRelease(cf);
        }
        if (v18) {
          CFRelease(v18);
        }
        goto LABEL_27;
      }
      uint64_t v14 = *MEMORY[0x1E4F1CF80];
      long long v23 = v19;
      uint64_t v24 = v20;
      int v5 = v13(v3, &v23, v18, v14, &cf, &v21);
      if (!v5)
      {
        if (cf)
        {
          int v12 = serverXPCAIG_AddCGImageToMessage((CGImage *)cf, v4);
          if (!v12)
          {
            long long v23 = v21;
            uint64_t v24 = v22;
            FigXPCMessageSetCMTime();
          }
          goto LABEL_17;
        }
        int v5 = FigSignalErrorAt();
      }
    }
    int v12 = v5;
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  long long v21 = *MEMORY[0x1E4F1FA48];
  uint64_t v22 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  FigXPCMessageGetCMTime();
  int v9 = FigXPCMessageCopyCFDictionary();
  if (!v9)
  {
    long long v19 = v21;
    uint64_t v20 = v22;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, long long *, void, uint64_t))(v11 + 16);
    if (!v15)
    {
      int v12 = -12782;
      goto LABEL_27;
    }
    uint64_t v16 = *MEMORY[0x1E4F1CF80];
    long long v23 = v19;
    uint64_t v24 = v20;
    int v9 = v15(v8, &v23, 0, v16);
  }
  int v12 = v9;
LABEL_27:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v12;
}

uint64_t FigVideoQueueRemoteCallbackServer_NotificationIsPending()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v14 = 1;
  uint64_t v0 = weakReferenceTable_CopyPointerFromKey();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t v13 = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v3 = DerivedStorage;
      if (*(_DWORD *)(DerivedStorage + 20))
      {
        CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        int v5 = (unsigned int *)MEMORY[0x1E4F14960];
        do
        {
          uint64_t v12 = 0;
          unsigned int v11 = 0;
          int v14 = 0;
          if (!FigVideoQueueRemoteClient_GetNextPendingNotification(*(_DWORD *)(v3 + 20), &v14, &v13, cStr, &v12, &v11))
          {
            uint64_t v6 = v12;
            uint64_t v7 = v11;
            uint64_t v8 = (unsigned char *)CMBaseObjectGetDerivedStorage();
            CFTypeRef cf = 0;
            if (!*v8)
            {
              CFStringRef v9 = CFStringCreateWithCString(v4, cStr, 0);
              if (v9 && (!v6 || !v7 || !MEMORY[0x19970E350](v6, v7, v4, &cf)))
              {
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
              }
              if (cf) {
                CFRelease(cf);
              }
              if (v9) {
                CFRelease(v9);
              }
            }
            MEMORY[0x199712230](*v5, v12, v11);
          }
        }
        while (v14);
      }
    }
    CFRelease(v1);
  }
  return 0;
}

uint64_t weakReferenceTable_CopyPointerFromKey()
{
  MEMORY[0x19970EE10](&gWeakReferenceTable_RemoteVideoQueueClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteVideoQueueClient)
  {
    return FigCFWeakReferenceTableCopyValue();
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t FigVideoQueueCreateRemote(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19970EE10](&videoQueueRemote_oneTimeInitialization_sInitRemoteVideoQueueOnlyOnce, videoQueueRemote_oneTimeInitializationWork);
  if (!gVideoQueueRemoteClient) {
    goto LABEL_24;
  }
  FigVideoQueueGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3)
  {
    uint64_t v6 = v3;
    goto LABEL_21;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x290], 8) = 0;
  *(void *)(DerivedStorage + 200) = 0;
  MEMORY[0x19970EE10](&gWeakReferenceTable_RemoteVideoQueueClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteVideoQueueClient) {
    KeCGFloat y = FigCFWeakReferenceTableAddValueAndGetKey();
  }
  else {
    KeCGFloat y = FigSignalErrorAt();
  }
  uint64_t v6 = Key;
  if (Key) {
    goto LABEL_21;
  }
  uint64_t v7 = FigRPCCreateServerConnectionForObject();
  if (v7 || (uint64_t v7 = FigRPCGetServerConnectionInfo(), v7))
  {
LABEL_28:
    uint64_t v6 = v7;
    goto LABEL_21;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  *(unsigned char *)(DerivedStorage + 96) = 1;
  uint64_t v8 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 152) = v8;
  if (!v8)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_28;
  }
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.vqr.timebasesync.%p", 0);
  dispatch_queue_t v9 = dispatch_queue_create((const char *)__str, 0);
  *(void *)(DerivedStorage + 192) = v9;
  if (!v9
    || (dispatch_queue_t v10 = dispatch_queue_create("com.apple.coremedia.vqr.visualContextSyncQueue", 0),
        (*(void *)(DerivedStorage + 104) = v10) == 0)
    || (dispatch_queue_t v11 = dispatch_queue_create("com.apple.coremedia.vqr.videoTargetSyncQueue", 0),
        (*(void *)(DerivedStorage + 120) = v11) == 0))
  {
LABEL_24:
    uint64_t v6 = 4294955215;
    goto LABEL_21;
  }
  uint64_t v12 = (void *)MEMORY[0x199711A30]();
  *(void *)(DerivedStorage + 20_Block_object_dispose(&STACK[0x290], 8) = [[FigDisplayMirroringChangeObserver alloc] initWithCallback:videoQueueRemote_handleDisplayMirroringChanged context:0];
  MainBundle = CFBundleGetMainBundle();
  CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
  if (Identifier)
  {
    CFStringRef v15 = Identifier;
    uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(0);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v18 = v17 ? v17 : 0;
    long long v19 = *(void (**)(uint64_t, __CFString *, CFStringRef))(v18 + 56);
    if (v19) {
      v19(CMBaseObject, @"ClientBundleIdentifier", v15);
    }
  }
  if (dword_1E9351470)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v6 = 0;
  *a2 = 0;
LABEL_21:
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  return v6;
}

uint64_t __FigVideoQueueCreateRemote_block_invoke(uint64_t a1, mach_port_t a2, int a3, _DWORD *a4, void *a5, void *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v16 = 0;
  memset(buffer, 0, sizeof(buffer));
  pid_t v12 = getpid();
  proc_name(v12, buffer, 0x20u);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 200);
  int v14 = dyld_program_sdk_at_least();
  LODWORD(result) = FigVideoQueueRemoteClient_Create(a2, a3, v13, v14, (char *)buffer, a4, a5, a6, &v16);
  if (result) {
    return result;
  }
  else {
    return v16;
  }
}

uint64_t videoQueueRemote_HandleDeadServerConnection()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 16) = 1;
  *(_DWORD *)(DerivedStorage + 20) = 0;

  return CMNotificationCenterPostNotification();
}

uint64_t videoQueueRemote_handleDisplayMirroringChanged(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(a2);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v7 + 56);
    if (v8)
    {
      return v8(CMBaseObject, @"DisplayList", v2);
    }
  }
  return result;
}

uint64_t weakReferenceTable_OneTimeInitialization()
{
  return FigCFWeakReferenceTableCreate();
}

uint64_t videoQueueRemote_oneTimeInitializationWork()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  if (FigRemote_ShouldConnectToMediaplaybackd()) {
    uint64_t v0 = "com.apple.coremedia.mediaplaybackd.videoqueue";
  }
  else {
    uint64_t v0 = "com.apple.coremedia.videoqueue";
  }

  return MEMORY[0x1F40DDF00](v0, 40, figvideoqueuecallback_server, &gVideoQueueRemoteClient);
}

uint64_t videoQueueRemote_Invalidate(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 0;
  }
  CFAllocatorRef v4 = DerivedStorage;
  if (dword_1E9351470)
  {
    int v24 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *CFAllocatorRef v4 = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  FigVideoQueueRemoteClient_Destroy(*((_DWORD *)v4 + 5));
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  uint64_t v3 = FigRPCDisposeServerConnection();
  if (v3) {
    FigSignalErrorAt();
  }
  uint64_t v7 = (void *)*((void *)v4 + 21);
  if (v7)
  {
    FigSyncMomentSourceSetTimebase(v7, 0);
    FigSyncMomentSourceDestroy(*((CFTypeRef *)v4 + 21));
    *((void *)v4 + 21) = 0;
  }
  uint64_t v8 = *((void *)v4 + 19);
  if (v8)
  {
    MEMORY[0x19970E910](v8, v6);
    dispatch_queue_t v9 = (const void *)*((void *)v4 + 20);
    if (v9)
    {
      CFRelease(v9);
      *((void *)v4 + 20) = 0;
    }
    MEMORY[0x19970E930](*((void *)v4 + 19));
  }
  dispatch_queue_t v10 = (const void *)*((void *)v4 + 23);
  if (v10)
  {
    FigSyncMomentSourceDestroy(v10);
    *((void *)v4 + 23) = 0;
  }
  dispatch_queue_t v11 = *((void *)v4 + 24);
  if (v11)
  {
    dispatch_release(v11);
    *((void *)v4 + 24) = 0;
  }
  pid_t v12 = (void *)*((void *)v4 + 26);
  if (v12)
  {
    [v12 removeObserversOnCADisplays];

    *((void *)v4 + 26) = 0;
  }
  uint64_t v13 = (void *)MEMORY[0x199711A30](v12, v6);
  videoQueueRemote_removeHostLayer(a1, 0);
  if (*((void *)v4 + 4))
  {
    [MEMORY[0x1E4F39CF8] begin];
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    int v14 = (const void *)*((void *)v4 + 4);
    if (v14)
    {
      CFRelease(v14);
      *((void *)v4 + 4) = 0;
    }
    objc_msgSend(MEMORY[0x1E4F39CF8], "commit", v19, v20);
  }
  CFStringRef v15 = *((void *)v4 + 13);
  if (v15)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __videoQueueRemote_Invalidate_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = v4;
    dispatch_sync(v15, block);
  }
  unsigned int v16 = *((void *)v4 + 15);
  if (v16)
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    _OWORD v21[2] = __videoQueueRemote_Invalidate_block_invoke_2;
    v21[3] = &__block_descriptor_40_e5_v8__0l;
    v21[4] = v4;
    dispatch_sync(v16, v21);
  }
  uint64_t v17 = (const void *)*((void *)v4 + 10);
  if (v17)
  {
    CFRelease(v17);
    *((void *)v4 + 10) = 0;
  }
  return v3;
}

void videoQueueRemote_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  videoQueueRemote_Invalidate(a1);
  if (DerivedStorage[19])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[19] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[18];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[18] = 0;
  }
  CFAllocatorRef v4 = DerivedStorage[13];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[13] = 0;
  }
  uint64_t v5 = DerivedStorage[15];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[15] = 0;
  }
  if (DerivedStorage[25])
  {
    MEMORY[0x19970EE10](&gWeakReferenceTable_RemoteVideoQueueClientThreadOnce, weakReferenceTable_OneTimeInitialization);
    if (gWeakReferenceTable_RemoteVideoQueueClient)
    {
      FigCFWeakReferenceTableRemoveValue();
      DerivedStorage[25] = 0;
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  if (dword_1E9351470)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

__CFString *videoQueueRemote_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoQueueRemote %p retainCount: %ld%s allocator: %p>", a1, v5, v6, v7);
  return Mutable;
}

uint64_t videoQueueRemote_CopyProperty(uint64_t a1, const __CFString *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  unsigned int v22 = 0;
  if (!DerivedStorage[16])
  {
    uint64_t v8 = DerivedStorage;
    if (!*DerivedStorage && a2 && a4)
    {
      if (CFEqual(a2, @"VideoQueue_ControlTimebase"))
      {
        dispatch_queue_t v9 = (const void *)*((void *)v8 + 18);
LABEL_7:
        PixelBufferFromSerializedAtomCFDataRef Data = 0;
        *a4 = CFRetain(v9);
LABEL_16:
        if (!FigRemote_ShouldConnectToMediaplaybackd()) {
          FigRPCKillServerOnTimeout();
        }
        return PixelBufferFromSerializedAtomData;
      }
      if (CFEqual(a2, @"VisualContextArray"))
      {
        pid_t v12 = *((void *)v8 + 13);
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        _OWORD v21[2] = __videoQueueRemote_CopyProperty_block_invoke;
        v21[3] = &__block_descriptor_48_e5_v8__0l;
        v21[4] = a4;
        void v21[5] = v8;
        uint64_t v13 = v21;
      }
      else
      {
        if (!CFEqual(a2, @"VideoTargetArray"))
        {
          if (CFEqual(a2, @"CurrentlyDisplayedCVPixelBuffer"))
          {
            uint64_t v19 = 0;
            *(void *)uint64_t buffer = 0;
            unsigned int v18 = 0;
            CFTypeRef cf = 0;
            unsigned int v14 = FigVideoQueueRemoteClient_CopyCurrentlyDisplayedCVPixelBuffer(*((_DWORD *)v8 + 5), (_DWORD *)&v19 + 1, buffer, &v19, &v18);
            if (v14) {
              PixelBufferFromSerializedAtomCFDataRef Data = v14;
            }
            else {
              PixelBufferFromSerializedAtomCFDataRef Data = v18;
            }
            if (!PixelBufferFromSerializedAtomData)
            {
              if (v19)
              {
                PixelBufferFromSerializedAtomCFDataRef Data = FigRemote_CreatePixelBufferFromSerializedAtomData();
                if (!PixelBufferFromSerializedAtomData)
                {
                  LODWORD(v19) = 0;
                  *a4 = cf;
                  CFTypeRef cf = 0;
                }
              }
            }
            if (HIDWORD(v19)) {
              FigMachPortReleaseSendRight_();
            }
            if (v19) {
              MEMORY[0x199712230](*MEMORY[0x1E4F14960], *(void *)buffer);
            }
            goto LABEL_16;
          }
          if (!CFEqual(a2, @"CompensateForDisplayLatency"))
          {
            CStringPtr = CFStringGetCStringPtr(a2, 0);
            if (!CStringPtr)
            {
              CStringPtr = buffer;
              CFStringGetCString(a2, buffer, 512, 0);
            }
            CFTypeRef cf = 0;
            PixelBufferFromSerializedAtomCFDataRef Data = FigVideoQueueRemoteClient_GetProperty(*((_DWORD *)v8 + 5), CStringPtr, &cf, &v22);
            if (!PixelBufferFromSerializedAtomData)
            {
              PixelBufferFromSerializedAtomCFDataRef Data = MEMORY[0x19970E350](cf, v22, a3, a4);
              MEMORY[0x199712230](*MEMORY[0x1E4F14960], cf, v22);
            }
            goto LABEL_16;
          }
          CFStringRef v15 = (const void **)MEMORY[0x1E4F1CFC8];
          if (v8[96]) {
            CFStringRef v15 = (const void **)MEMORY[0x1E4F1CFD0];
          }
          dispatch_queue_t v9 = *v15;
          goto LABEL_7;
        }
        pid_t v12 = *((void *)v8 + 15);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __videoQueueRemote_CopyProperty_block_invoke_2;
        block[3] = &__block_descriptor_48_e5_v8__0l;
        void block[4] = a4;
        void block[5] = v8;
        uint64_t v13 = block;
      }
      dispatch_sync(v12, v13);
      PixelBufferFromSerializedAtomCFDataRef Data = 0;
      goto LABEL_16;
    }
  }

  return FigSignalErrorAt();
}

uint64_t videoQueueRemote_SetProperty(const void *a1, __CFString *a2, void *a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v55 = 0;
  theCFDataRef Data = 0;
  CFTypeRef v54 = 0;
  if (DerivedStorage[16] || (CFAllocatorRef v7 = DerivedStorage, *DerivedStorage) || !a2)
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(@"VideoQueue_DisplayLayer", a2))
  {
    dispatch_queue_t v9 = (void *)MEMORY[0x199711A30]();
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    if (*(void **)(v10 + 32) != a3)
    {
      dispatch_queue_t v11 = (uint64_t *)v10;
      uint64_t v12 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
      if (v12)
      {
        updatedouble d = v12;
LABEL_67:
        CFTypeRef v38 = cf;
LABEL_68:
        if (v38) {
          CFRelease(v38);
        }
        goto LABEL_70;
      }
      uint64_t v13 = (void *)v11[4];
      if (v13)
      {
        FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf, v13, (uint64_t)"videoQueueRemote_setClientVideoLayer");
        FPSupport_AppendDeferredTransactionChangeToRelease(cf, v11[4], (uint64_t)"videoQueueRemote_setClientVideoLayer");
        v11[4] = 0;
      }
      if (a3)
      {
        uint64_t v14 = (uint64_t)CFRetain(a3);
        v11[4] = (uint64_t)a3;
        CFStringRef v15 = (void *)v11[26];
        if (v15) {
          uint64_t v14 = FPSupport_AppendDeferredTransactionChangeToTargetMirroringObserverAtDisplayOfCALayer(cf, v15, a3, (uint64_t)"videoQueueRemote_setClientVideoLayer");
        }
      }
      else
      {
        v11[4] = 0;
        MEMORY[0x19970E910](v11[19]);
        uint64_t v19 = (const void *)v11[20];
        if (v19)
        {
          CFRelease(v19);
          v11[20] = 0;
        }
        uint64_t v14 = MEMORY[0x19970E930](v11[19]);
      }
      CFTypeRef v20 = cf;
      long long v21 = (void *)MEMORY[0x199711A30](v14);
      CFNumberRef number = 0;
      int valuePtr = 0;
      uint64_t v22 = CMBaseObjectGetDerivedStorage();
      if (*(void *)(v22 + 32))
      {
        uint64_t v23 = v22;
        uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(a1);
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v33 = *(uint64_t (**)(uint64_t, __CFString *, void))(v26 + 56);
        if (!v33) {
          goto LABEL_62;
        }
        uint64_t v34 = v33(CMBaseObject, @"VideoQueue_MakeCAContextForRemoteHost", *MEMORY[0x1E4F1CFD0]);
        if (v34)
        {
          updatedouble d = v34;
          goto LABEL_63;
        }
        uint64_t v35 = FigVideoQueueGetCMBaseObject(a1);
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v37 = v36 ? v36 : 0;
        uint64_t v39 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v37 + 48);
        if (!v39)
        {
LABEL_62:
          updatedouble d = 4294954514;
          goto LABEL_63;
        }
        updatedouble d = v39(v35, @"VideoQueue_CAContextID", 0, &number);
        CFNumberRef v40 = number;
        if (updated || !number) {
          goto LABEL_64;
        }
        if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
        {
          updatedouble d = 4294955216;
          goto LABEL_63;
        }
        CMTag v41 = *(void **)(v23 + 40);
        if (!v41)
        {
          [MEMORY[0x1E4F39CF8] begin];
          [MEMORY[0x1E4F39CF8] setDisableActions:1];
          uint64_t v42 = (void *)[MEMORY[0x1E4F39BF0] layer];
          *(void *)(v23 + 40) = v42;
          [v42 setInheritsSecurity:1];
          [MEMORY[0x1E4F39CF8] commit];
          uint64_t v43 = *(const void **)(v23 + 40);
          if (!v43)
          {
            updatedouble d = 4294955215;
            goto LABEL_63;
          }
          CFRetain(v43);
          CMTag v41 = *(void **)(v23 + 40);
        }
        FPSupport_AppendDeferredTransactionChangeToConfigureFigVideoQueueHostLayerAndPostNotification(v20, v41, *(void **)(v23 + 32), valuePtr, a1, @"VideoQueue_CAContextIDDidChange", (uint64_t)"videoQueueRemote_updateHostLayer");
        FPSupport_AppendDeferredTransactionChangeToResizeClientVideoLayerWithinHostLayer(v20, *(void **)(v23 + 40), *(void **)(v23 + 32), (uint64_t)"videoQueueRemote_updateHostLayer", *(double *)(v23 + 48), *(double *)(v23 + 56), *(double *)(v23 + 64), *(double *)(v23 + 72));
        if (dword_1E9351470)
        {
          unsigned int v59 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v45 = v59;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v46 = v45;
          }
          else {
            unsigned int v46 = v45 & 0xFFFFFFFE;
          }
          if (v46)
          {
            uint64_t v47 = *(void *)(v23 + 32);
            uint64_t v48 = [*(id *)(v23 + 40) description];
            int v62 = 136316162;
            uint64_t v63 = "videoQueueRemote_updateHostLayer";
            __int16 v64 = 2048;
            int v65 = a1;
            __int16 v66 = 2112;
            uint64_t v67 = v47;
            __int16 v68 = 2112;
            uint64_t v69 = v48;
            __int16 v70 = 1024;
            LODWORD(v71) = valuePtr;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        videoQueueRemote_removeHostLayer((uint64_t)a1, v20);
      }
      updatedouble d = 0;
LABEL_63:
      CFNumberRef v40 = number;
LABEL_64:
      if (v40) {
        CFRelease(v40);
      }
      FigDeferredTransactionCommit((uint64_t)cf);
      goto LABEL_67;
    }
LABEL_43:
    updatedouble d = 0;
LABEL_70:
    goto LABEL_71;
  }
  if (CFEqual(@"DisplayLayerVisibility", a2))
  {
    dispatch_queue_t v9 = (void *)MEMORY[0x199711A30]();
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t buffer = 0;
    if (*(void *)(v16 + 32))
    {
      uint64_t v17 = v16;
      unsigned int v18 = *(void **)(v16 + 208);
      if ((void *)*MEMORY[0x1E4F1CFD0] == a3)
      {
        if (v18)
        {
          updatedouble d = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)buffer);
          CFTypeRef v38 = *(CFTypeRef *)buffer;
          if (!updated)
          {
            FPSupport_AppendDeferredTransactionChangeToTargetMirroringObserverAtDisplayOfCALayer(*(const void **)buffer, *(void **)(v17 + 208), *(void **)(v17 + 32), (uint64_t)"videoQueueRemote_setClientVideoLayerVisibility");
            FigDeferredTransactionCommit(*(uint64_t *)buffer);
            CFTypeRef v38 = *(CFTypeRef *)buffer;
          }
          goto LABEL_68;
        }
      }
      else if (v18)
      {
        [v18 setBaseDisplayList:MEMORY[0x1E4F1CBF0]];
      }
    }
    goto LABEL_43;
  }
  if (CFEqual(a2, @"VideoQueue_DisplayBounds"))
  {
    CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, (CGRect *)(v7 + 48));
    [MEMORY[0x1E4F39CF8] begin];
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    vq_updateHostLayerAffineTransform();
    [MEMORY[0x1E4F39CF8] commit];
LABEL_31:
    CStringPtr = CFStringGetCStringPtr(a2, 0);
    if (!CStringPtr)
    {
      CStringPtr = buffer;
      CFStringGetCString(a2, buffer, 512, 0);
    }
    uint64_t v29 = MEMORY[0x19970E2C0](a3, *MEMORY[0x1E4F1CF80], &theData);
    if (!v29)
    {
      mach_port_t v30 = *((_DWORD *)v7 + 5);
      BytePtr = CFDataGetBytePtr(theData);
      unsigned int Length = CFDataGetLength(theData);
      uint64_t v29 = FigVideoQueueRemoteClient_SetProperty(v30, CStringPtr, (uint64_t)BytePtr, Length);
    }
    goto LABEL_47;
  }
  if (!CFEqual(a2, @"VideoQueue_ControlTimebase"))
  {
    if (CFEqual(a2, @"VisualContextArray"))
    {
      updatedouble d = videoQueueRemote_updateVisualContextArrayAndCopyIDArray(a1, a3, (CFMutableArrayRef *)&v55);
      if (updated) {
        goto LABEL_71;
      }
      a2 = @"VisualContextIDArray";
      a3 = (void *)v55;
    }
    else if (CFEqual(a2, @"VideoTargetArray"))
    {
      updatedouble d = videoQueueRemote_updateVideoTargetArrayAndCopyIDArray(a1, a3, (CFMutableArrayRef *)&v54);
      if (updated) {
        goto LABEL_71;
      }
      a2 = @"VideoTargetIDArray";
      a3 = (void *)v54;
    }
    else if (CFEqual(a2, @"CompensateForDisplayLatency"))
    {
      char v52 = *MEMORY[0x1E4F1CFC8] != (void)a3;
      v7[96] = v52;
      MEMORY[0x19970E910](*((void *)v7 + 19));
      uint64_t v53 = *((void *)v7 + 20);
      if (v53) {
        FigLayerSynchronizerSetCompensateForDisplayLatency(v53, v52);
      }
      MEMORY[0x19970E930](*((void *)v7 + 19));
    }
    goto LABEL_31;
  }
  if (!v7[136])
  {
    if (a3)
    {
      TypeIOSurfaceID ID = CMTimebaseGetTypeID();
      if (TypeID != CFGetTypeID(a3)) {
        goto LABEL_46;
      }
      CMTagValue v50 = (const void *)*((void *)v7 + 18);
      *((void *)v7 + 1_Block_object_dispose(&STACK[0x290], 8) = a3;
      CFRetain(a3);
    }
    else
    {
      CMTagValue v50 = (const void *)*((void *)v7 + 18);
      *((void *)v7 + 1_Block_object_dispose(&STACK[0x290], 8) = 0;
    }
    if (v50) {
      CFRelease(v50);
    }
    videoQueueRemote_rebuildTimebaseSync((uint64_t)a1, a3);
    if (dword_1E9351470)
    {
      LODWORD(number) = 0;
      LOBYTE(cf) = 0;
      CFTypeID v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    updatedouble d = 0;
    goto LABEL_71;
  }
LABEL_46:
  uint64_t v29 = FigSignalErrorAt();
LABEL_47:
  updatedouble d = v29;
LABEL_71:
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  if (theData) {
    CFRelease(theData);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  return updated;
}

void videoQueueRemote_removeHostLayer(uint64_t a1, CFTypeRef a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = *(void **)(DerivedStorage + 40);
  if (v4)
  {
    uint64_t v5 = DerivedStorage;
    if (!a2)
    {
      int v6 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
      a2 = cf;
      if (v6) {
        goto LABEL_9;
      }
      CFAllocatorRef v4 = *(void **)(v5 + 40);
    }
    FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(a2, v4, (uint64_t)"videoQueueRemote_removeHostLayer");
    CFAllocatorRef v7 = *(const void **)(v5 + 40);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v5 + 40) = 0;
    }
    if (cf)
    {
      FigDeferredTransactionCommit((uint64_t)cf);
      a2 = cf;
LABEL_9:
      if (a2) {
        CFRelease(a2);
      }
    }
  }
}

uint64_t vq_updateHostLayerAffineTransform()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(double *)(result + 64) > 0.0)
  {
    uint64_t v1 = result;
    if (*(double *)(result + 72) > 0.0)
    {
      [*(id *)(result + 32) bounds];
      double v3 = v2;
      double v5 = v4;
      memset(&v11, 0, sizeof(v11));
      double v6 = *(double *)(v1 + 64);
      double v7 = *(double *)(v1 + 72);
      CGAffineTransformMakeScale(&v11, v2 / v6, v4 / v7);
      CGAffineTransform v9 = v11;
      CGAffineTransformTranslate(&v10, &v9, (v3 - v6) * 0.5, (v5 - v7) * 0.5);
      *(_OWORD *)&v11.double c = *(_OWORD *)&v10.c;
      *(_OWORD *)&v11.tCGFloat x = *(_OWORD *)&v10.tx;
      uint64_t v8 = *(void **)(v1 + 40);
      *(_OWORD *)&v11.CGFloat a = *(_OWORD *)&v10.a;
      return [v8 setAffineTransform:&v10];
    }
  }
  return result;
}

void videoQueueRemote_rebuildTimebaseSync(uint64_t a1, const void *a2)
{
  uint64_t v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v4 = *(NSObject **)(DerivedStorage + 192);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __videoQueueRemote_rebuildTimebaseSync_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  void block[4] = DerivedStorage;
  void block[5] = a2;
  dispatch_sync(v4, block);
  if (!a2)
  {
    CGAffineTransform v9 = 0;
    uint64_t v7 = 0;
LABEL_7:
    CGAffineTransform v10 = *(NSObject **)(DerivedStorage + 192);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = __videoQueueRemote_rebuildTimebaseSync_block_invoke_2;
    _OWORD v11[3] = &__block_descriptor_56_e5_v8__0l;
    v11[4] = DerivedStorage;
    void v11[5] = v9;
    v11[6] = v7;
    dispatch_sync(v10, v11);
    CGAffineTransform v9 = v13;
    goto LABEL_8;
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  double v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x10000409B4BCFF8uLL);
  uint64_t v7 = (uint64_t)v6;
  if (v6)
  {
    *(void *)double v6 = *(void *)(v5 + 200);
    v6[8] = 1;
  }
  else if (FigSignalErrorAt())
  {
    return;
  }
  int v8 = FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)videoQueueRemote_syncServerTimebaseToMoment, v7, (void (*)(uint64_t))videoQueueRemote_destroyTimebaseSyncState, a2, *(NSObject **)(DerivedStorage + 192), (uint64_t *)&v13);
  CGAffineTransform v9 = v13;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_8:
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t videoQueueRemote_updateVisualContextArrayAndCopyIDArray(const void *a1, const void *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_16;
  }
  uint64_t v7 = DerivedStorage;
  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 != CFArrayGetTypeID()) {
    goto LABEL_16;
  }
  uint64_t Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    CFIndex v10 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v10);
      if (!ValueAtIndex) {
        goto LABEL_16;
      }
      CFTypeID v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != FigVisualContextGetTypeID()) {
        goto LABEL_16;
      }
    }
    while (Count != ++v10);
  }
  CFAllocatorRef v13 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v13, Count, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_16:
    return FigSignalErrorAt();
  }
  CFMutableArrayRef v15 = Mutable;
  if (Count < 1)
  {
LABEL_14:
    uint64_t v19 = *(NSObject **)(v7 + 104);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __videoQueueRemote_updateVisualContextArrayAndCopyIDArray_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    void block[4] = v7;
    void block[5] = a2;
    dispatch_sync(v19, block);
    uint64_t v20 = 0;
    *a3 = v15;
  }
  else
  {
    CFIndex v16 = 0;
    while (1)
    {
      uint64_t v17 = CFArrayGetValueAtIndex((CFArrayRef)a2, v16);
      uint64_t v23 = 0;
      ObjectIOSurfaceID ID = FigVisualContextXPCRemoteGetObjectID(v17, &v23);
      if (ObjectID) {
        break;
      }
      ObjectIOSurfaceID ID = FigCFArrayAppendInt64();
      if (ObjectID) {
        break;
      }
      if (Count == ++v16) {
        goto LABEL_14;
      }
    }
    uint64_t v20 = ObjectID;
    CFRelease(v15);
  }
  return v20;
}

uint64_t videoQueueRemote_updateVideoTargetArrayAndCopyIDArray(const void *a1, const void *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v7 = DerivedStorage;
  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 != CFArrayGetTypeID()) {
    goto LABEL_15;
  }
  uint64_t Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    CFIndex v10 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v10);
      if (!ValueAtIndex) {
        goto LABEL_15;
      }
      CFTypeID v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != FigVideoTargetGetTypeID()) {
        goto LABEL_15;
      }
    }
    while (Count != ++v10);
  }
  CFAllocatorRef v13 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v13, Count, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_15:
    return FigSignalErrorAt();
  }
  CFMutableArrayRef v15 = Mutable;
  if (Count < 1)
  {
LABEL_14:
    uint64_t v19 = *(NSObject **)(v7 + 120);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __videoQueueRemote_updateVideoTargetArrayAndCopyIDArray_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    void block[4] = v7;
    void block[5] = a2;
    dispatch_sync(v19, block);
    uint64_t v20 = 0;
    *a3 = v15;
  }
  else
  {
    CFIndex v16 = 0;
    while (1)
    {
      uint64_t v17 = CFArrayGetValueAtIndex((CFArrayRef)a2, v16);
      uint64_t v23 = 0;
      ObjectIOSurfaceID ID = FigVideoTargetXPCRemoteGetObjectID((uint64_t)v17, &v23);
      if (ObjectID) {
        break;
      }
      ObjectIOSurfaceID ID = FigCFArrayAppendInt64();
      if (ObjectID) {
        break;
      }
      if (Count == ++v16) {
        goto LABEL_14;
      }
    }
    uint64_t v20 = ObjectID;
    CFRelease(v15);
  }
  return v20;
}

void __videoQueueRemote_rebuildTimebaseSync_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  double v3 = *(const void **)(v2 + 176);
  *(void *)(v2 + 176) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

void videoQueueRemote_syncServerTimebaseToMoment(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v12 = 0;
  double v4 = (const void *)weakReferenceTable_CopyPointerFromKey();
  if (v4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 16) && !*(unsigned char *)DerivedStorage)
    {
      if (*(unsigned char *)(a1 + 8))
      {
        *(_DWORD *)(a2 + 4) |= 4u;
        *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = 0;
      }
      if (*(_DWORD *)a2 == 120)
      {
        int v7 = *(_DWORD *)(a2 + 4);
        uint64_t v8 = *(void *)(a2 + 8);
        uint64_t v9 = *(void *)(a2 + 64);
        mach_port_t v10 = *(_DWORD *)(DerivedStorage + 20);
        unsigned int v11 = *(void *)(v6 + 176) != 0;
        LODWORD(v13[0]) = 120;
        DWORD1(v13[0]) = v7;
        *((void *)&v13[0] + 1) = v8;
        v13[1] = *(_OWORD *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 32);
        long long v15 = *(_OWORD *)(a2 + 40);
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = v9;
        long long v18 = *(_OWORD *)(a2 + 72);
        uint64_t v19 = *(void *)(a2 + 88);
        uint64_t v21 = *(void *)(a2 + 112);
        long long v20 = *(_OWORD *)(a2 + 96);
        FigVideoQueueRemoteClient_SyncTimebaseToMoment(v10, v11, v13, &v12);
      }
    }
  }
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  if (v4) {
    CFRelease(v4);
  }
}

void __videoQueueRemote_rebuildTimebaseSync_block_invoke_2(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  double v4 = *(const void **)(v3 + 184);
  *(void *)(v3 + 184) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[6];
  if (v5)
  {
    if (!*(void *)(a1[4] + 176))
    {
      int v14 = 0;
      long long v13 = 0u;
      long long v12 = 0u;
      long long v11 = 0u;
      long long v10 = 0u;
      long long v9 = 0u;
      long long v8 = 0u;
      long long v7 = 0u;
      int v6 = 120;
      videoQueueRemote_syncServerTimebaseToMoment(v5, (uint64_t)&v6);
    }
  }
}

void __videoQueueRemote_updateVisualContextArrayAndCopyIDArray_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  uint64_t v3 = *(const void **)(v2 + 112);
  *(void *)(v2 + 112) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

void __videoQueueRemote_updateVideoTargetArrayAndCopyIDArray_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  uint64_t v3 = *(const void **)(v2 + 128);
  *(void *)(v2 + 12_Block_object_dispose(&STACK[0x290], 8) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t videoQueueRemote_Start(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || *(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = FigVideoQueueRemoteClient_Start(*(_DWORD *)(DerivedStorage + 20), a2);
    if (!FigRemote_ShouldConnectToMediaplaybackd()) {
      FigRPCKillServerOnTimeout();
    }
    return v5;
  }
}

uint64_t videoQueueRemote_EnqueueFrame(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, int a11)
{
  unsigned int v28 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v21 = DerivedStorage, *(unsigned char *)DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (*(unsigned char *)(DerivedStorage + 136)) {
    goto LABEL_7;
  }
  *(unsigned char *)(DerivedStorage + 136) = 1;
  if (!*(void *)(DerivedStorage + 144) || !*(void *)(DerivedStorage + 32) || !*(void *)(DerivedStorage + 40)) {
    goto LABEL_7;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
  uint64_t v25 = FigLayerSynchronizerCreate((void *)(v21 + 160));
  if (!v25)
  {
    FigLayerSynchronizerSetCompensateForDisplayLatency(*(void *)(v21 + 160), *(unsigned char *)(v21 + 96));
    MEMORY[0x19970E930](*(void *)(v21 + 152));
    uint64_t v27 = videoQueueRemote_SetSynchronizedLayers();
    if (v27
      || (uint64_t v27 = FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)videoQueueRemote_SynchronizeLayerToMoment, *(void *)(v21 + 200), *(const void **)(v21 + 144), MEMORY[0x1E4F14428], (uint64_t *)(v21 + 168)), v27))
    {
      uint64_t v24 = v27;
      goto LABEL_17;
    }
LABEL_7:
    SerializedAtomDataForSampleBufferWithuint64_t Options = FigRemote_CreateSerializedAtomDataForSampleBufferWithOptions();
    if (SerializedAtomDataForSampleBufferWithOptions)
    {
      uint64_t v24 = SerializedAtomDataForSampleBufferWithOptions;
      *(void *)(v21 + 8_Block_object_dispose(&STACK[0x290], 8) = 0;
    }
    else
    {
      *(void *)(v21 + 8_Block_object_dispose(&STACK[0x290], 8) = (*MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
      unsigned int v26 = FigVideoQueueRemoteClient_EnqueueVideoSampleBuffer(*(_DWORD *)(v21 + 20), 0, 0, 0, a11, (int *)&v28, a1, a2, a3, a4, a5, a6, a7, a8);
      if (v26) {
        uint64_t v24 = v26;
      }
      else {
        uint64_t v24 = v28;
      }
    }
    goto LABEL_17;
  }
  uint64_t v24 = v25;
  MEMORY[0x19970E930](*(void *)(v21 + 152));
LABEL_17:
  FigMachPortReleaseSendRight_();
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  return v24;
}

uint64_t videoQueueRemote_EnqueueH264Frame(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, const UInt8 *BytePtr, OpaqueCMBlockBuffer *a13, uint64_t a14, int a15)
{
  unsigned int v39 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  if (DerivedStorage[16] || (mach_port_t v30 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (BytePtr)
  {
    int Length = CFDataGetLength((CFDataRef)BytePtr);
    BytePtr = CFDataGetBytePtr((CFDataRef)BytePtr);
    if (a13) {
      goto LABEL_8;
    }
LABEL_13:
    vm_size_t v34 = 0;
    goto LABEL_16;
  }
  int Length = 0;
  if (!a13) {
    goto LABEL_13;
  }
LABEL_8:
  Dataint Length = CMBlockBufferGetDataLength(a13);
  if (DataLength)
  {
    vm_size_t v34 = DataLength;
    if (CMBlockBufferIsRangeContiguous(a13, 0, DataLength))
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(a13, 0, 0, 0, &dataPointerOut);
      if (!DataPointer)
      {
        LODWORD(a13) = 0;
        goto LABEL_16;
      }
      goto LABEL_26;
    }
    uint64_t DataPointer = vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)&dataPointerOut, v34, 1560281089);
    if (DataPointer)
    {
LABEL_26:
      uint64_t v37 = DataPointer;
      goto LABEL_22;
    }
    CMBlockBufferCopyDataBytes(a13, 0, v34, dataPointerOut);
    LODWORD(a13) = 1;
LABEL_16:
    unsigned int v36 = FigVideoQueueRemoteClient_EnqueueH264Frame(*((_DWORD *)v30 + 5), a10, a11, (uint64_t)BytePtr, Length, (uint64_t)dataPointerOut, v34, a14, a1, a2, a3, a4, a5, a6, a7, a8, a15, (int *)&v39);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v39;
    }
    if (a13 && v34) {
      MEMORY[0x199712230](*MEMORY[0x1E4F14960], dataPointerOut, v34);
    }
    goto LABEL_22;
  }
  uint64_t v37 = 4294955216;
LABEL_22:
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  return v37;
}

uint64_t videoQueueRemote_EnqueueH264FrameWithTimingInfoBaggage(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, const __CFData *a12, OpaqueCMBlockBuffer *a13, uint64_t a14, int a15, uint64_t a16)
{
  unsigned int v47 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  theCFDataRef Data = 0;
  dataPointerOut = 0;
  if (DerivedStorage[16] || (uint64_t v32 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (a12)
  {
    int Length = CFDataGetLength(a12);
    BytePtr = CFDataGetBytePtr(a12);
    if (a13) {
      goto LABEL_8;
    }
LABEL_14:
    vm_size_t v36 = 0;
    if (a16) {
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  BytePtr = 0;
  int Length = 0;
  if (!a13) {
    goto LABEL_14;
  }
LABEL_8:
  Dataint Length = CMBlockBufferGetDataLength(a13);
  if (DataLength)
  {
    vm_size_t v36 = DataLength;
    if (CMBlockBufferIsRangeContiguous(a13, 0, DataLength))
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(a13, 0, 0, 0, &dataPointerOut);
      if (!DataPointer)
      {
        LOBYTE(a13) = 0;
        if (!a16) {
          goto LABEL_19;
        }
LABEL_15:
        uint64_t v38 = MEMORY[0x19970E2C0](a16, *MEMORY[0x1E4F1CF80], &theData);
        if (v38)
        {
          uint64_t v42 = v38;
LABEL_23:
          char v43 = a13 ^ 1;
          if (!v36) {
            char v43 = 1;
          }
          if ((v43 & 1) == 0) {
            MEMORY[0x199712230](*MEMORY[0x1E4F14960], dataPointerOut, v36);
          }
          goto LABEL_27;
        }
        unsigned int v39 = CFDataGetBytePtr(theData);
        int v40 = CFDataGetLength(theData);
LABEL_20:
        unsigned int v41 = FigVideoQueueRemoteClient_EnqueueH264FrameWithTimingInfoBaggage(*((_DWORD *)v32 + 5), a10, a11, (uint64_t)BytePtr, Length, (uint64_t)dataPointerOut, v36, a14, a1, a2, a3, a4, a5, a6, a7, a8, a15, (uint64_t)v39, v40,
                (int *)&v47);
        if (v41) {
          uint64_t v42 = v41;
        }
        else {
          uint64_t v42 = v47;
        }
        goto LABEL_23;
      }
      goto LABEL_34;
    }
    uint64_t DataPointer = vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)&dataPointerOut, v36, 1560281089);
    if (DataPointer)
    {
LABEL_34:
      uint64_t v42 = DataPointer;
      goto LABEL_27;
    }
    CMBlockBufferCopyDataBytes(a13, 0, v36, dataPointerOut);
    LOBYTE(a13) = 1;
    if (a16) {
      goto LABEL_15;
    }
LABEL_19:
    unsigned int v39 = 0;
    int v40 = 0;
    goto LABEL_20;
  }
  uint64_t v42 = 4294955216;
LABEL_27:
  if (theData) {
    CFRelease(theData);
  }
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  return v42;
}

uint64_t videoQueueRemote_Flush(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || *(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = FigVideoQueueRemoteClient_Flush(*(_DWORD *)(DerivedStorage + 20), a2);
    if (!FigRemote_ShouldConnectToMediaplaybackd()) {
      FigRPCKillServerOnTimeout();
    }
    return v5;
  }
}

uint64_t videoQueueRemote_IsAboveHighWaterLevel()
{
  int v4 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || *(unsigned char *)DerivedStorage)
  {
    LOBYTE(result) = FigSignalErrorAt();
  }
  else
  {
    int IsAboveHighWaterLevel = FigVideoQueueRemoteClient_IsAboveHighWaterLevel(*(_DWORD *)(DerivedStorage + 20), &v4);
    if (!FigRemote_ShouldConnectToMediaplaybackd()) {
      FigRPCKillServerOnTimeout();
    }
    if (IsAboveHighWaterLevel) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = v4 == 0;
    }
    LOBYTE(result) = !v3;
  }
  return result;
}

uint64_t videoQueueRemote_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, OpaqueCMBlockBuffer *a10, OpaqueCMBlockBuffer *a11, uint64_t a12, int a13, const UInt8 *BytePtr)
{
  unsigned int v43 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  vm_address_t address = 0;
  dataPointerOut = 0;
  theCFDataRef Data = 0;
  if (DerivedStorage[16] || (unsigned int v28 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (!a10)
  {
    int v31 = 0;
    if (a11)
    {
LABEL_11:
      Dataint Length = CMBlockBufferGetDataLength(a11);
      if (DataLength)
      {
        vm_size_t v34 = DataLength;
        if (CMBlockBufferIsRangeContiguous(a11, 0, DataLength))
        {
          uint64_t DataPointer = CMBlockBufferGetDataPointer(a11, 0, 0, 0, (char **)&address);
          if (!DataPointer)
          {
            LOBYTE(a11) = 0;
            if (!BytePtr) {
              goto LABEL_24;
            }
LABEL_18:
            uint64_t v35 = MEMORY[0x19970E2C0](BytePtr, *MEMORY[0x1E4F1CF80], &theData);
            if (v35)
            {
              uint64_t v37 = v35;
LABEL_28:
              char v39 = a11 ^ 1;
              if (!v34) {
                char v39 = 1;
              }
              if ((v39 & 1) == 0) {
                MEMORY[0x199712230](*MEMORY[0x1E4F14960], address, v34);
              }
              goto LABEL_32;
            }
            BytePtr = CFDataGetBytePtr(theData);
            int Length = CFDataGetLength(theData);
LABEL_25:
            unsigned int v38 = FigVideoQueueRemoteClient_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(*((_DWORD *)v28 + 5), (uint64_t)dataPointerOut, v31, address, v34, a12, a13, (uint64_t)BytePtr, a1, a2, a3, a4, a5, a6, a7, a8, Length, (int *)&v43);
            if (v38) {
              uint64_t v37 = v38;
            }
            else {
              uint64_t v37 = v43;
            }
            goto LABEL_28;
          }
          goto LABEL_21;
        }
        uint64_t DataPointer = vm_allocate(*MEMORY[0x1E4F14960], &address, v34, 1560281089);
        if (!DataPointer)
        {
          CMBlockBufferCopyDataBytes(a11, 0, v34, (void *)address);
          LOBYTE(a11) = 1;
          if (BytePtr) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
        goto LABEL_21;
      }
LABEL_37:
      uint64_t v37 = 4294955216;
      goto LABEL_32;
    }
LABEL_17:
    vm_size_t v34 = 0;
    if (BytePtr) {
      goto LABEL_18;
    }
LABEL_24:
    int Length = 0;
    goto LABEL_25;
  }
  size_t v30 = CMBlockBufferGetDataLength(a10);
  if (!v30) {
    goto LABEL_37;
  }
  int v31 = v30;
  if (!CMBlockBufferIsRangeContiguous(a10, 0, v30))
  {
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_21;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a10, 0, 0, 0, &dataPointerOut);
  if (!DataPointer)
  {
    if (a11) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_21:
  uint64_t v37 = DataPointer;
LABEL_32:
  if (theData) {
    CFRelease(theData);
  }
  if (!FigRemote_ShouldConnectToMediaplaybackd()) {
    FigRPCKillServerOnTimeout();
  }
  return v37;
}

uint64_t videoQueueRemote_RequestDecodeForPreroll(uint64_t a1, uint64_t a2)
{
  unsigned int v13 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  theCFDataRef Data = 0;
  if (DerivedStorage[16] || (int v4 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = MEMORY[0x19970E2C0](a2, *MEMORY[0x1E4F1CF80], &theData);
    if (v6)
    {
      uint64_t v11 = v6;
    }
    else
    {
      mach_port_t v7 = *((_DWORD *)v4 + 5);
      BytePtr = CFDataGetBytePtr(theData);
      int Length = CFDataGetLength(theData);
      unsigned int v10 = FigVideoQueueRemoteClient_RequestDecodeForPreroll(v7, (uint64_t)BytePtr, Length, (int *)&v13);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v13;
      }
    }
    if (theData) {
      CFRelease(theData);
    }
    return v11;
  }
}

uint64_t videoQueueRemote_SetSynchronizedLayers()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
  if (*(void *)(DerivedStorage + 160))
  {
    CFArrayRef v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)(DerivedStorage + 40), 1, MEMORY[0x1E4F1D510]);
    uint64_t v2 = FigLayerSynchronizerSetLayerArray(*(void *)(DerivedStorage + 160), v1);
    if (v1) {
      CFRelease(v1);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 152));
  return v2;
}

void videoQueueRemote_SynchronizeLayerToMoment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = weakReferenceTable_CopyPointerFromKey();
  if (v3)
  {
    int v4 = (const void *)v3;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)DerivedStorage)
    {
      uint64_t v6 = DerivedStorage;
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
      mach_port_t v7 = *(const void **)(v6 + 160);
      if (v7)
      {
        CFTypeRef v8 = CFRetain(v7);
        MEMORY[0x19970E930](*(void *)(v6 + 152));
        if (v8)
        {
          FigLayerSynchronizerSynchronizeToMoment((uint64_t)v8, a2, 0);
          CFRelease(v8);
        }
      }
      else
      {
        MEMORY[0x19970E930](*(void *)(v6 + 152));
      }
    }
    CFRelease(v4);
  }
}

uint64_t ASSET_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY()
{
  return FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
}

uint64_t FigAssetRemoteCreateWithURL(const __CFAllocator *a1, const void *a2, uint64_t a3, const __CFDictionary *a4, uint64_t *a5)
{
  uint64_t v13 = 0;
  if (a2 && a5)
  {
    if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
    }
    uint64_t v10 = remoteXPCAssetClient_EnsureClientEstablished_err;
    if (!remoteXPCAssetClient_EnsureClientEstablished_err)
    {
      uint64_t v10 = remoteXPCAsset_CreateInternal(a1, a2, 0, 0, 0, -1, 0, a3, a4, &v13);
      if (!v10)
      {
        uint64_t v11 = v13;
        remoteXPCAsset_SetCachedAssetPropertyValue(v13, @"assetProperty_CreationURL", (uint64_t)a2);
        *a5 = v11;
      }
    }
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCAsset_CreateInternal(const __CFAllocator *a1, const void *a2, uint64_t a3, const __CFData *a4, OpaqueCMBlockBuffer *a5, int a6, uint64_t a7, uint64_t a8, const __CFDictionary *a9, void *a10)
{
  totalLengthOut[128] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t value = a8;
  xpc_object_t v60 = 0;
  xpc_object_t xdict = 0;
  CMBlockBufferRef blockBufferOut = 0;
  char v58 = 0;
  CFTypeRef v56 = 0;
  CFTypeRef v57 = 0;
  CFTypeRef v54 = 0;
  CFTypeRef v55 = 0;
  uint64_t DataPointer = remoteXPCAsset_CreateAssetObject(a1, &cf);
  if (DataPointer) {
    goto LABEL_120;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeID v16 = CFGetTypeID(a2);
    if (v16 == CFURLGetTypeID())
    {
      uint64_t DataPointer = FigXPCCreateBasicMessage();
      if (DataPointer) {
        goto LABEL_120;
      }
      uint64_t DataPointer = FigXPCMessageSetCFURL();
      if (DataPointer) {
        goto LABEL_120;
      }
LABEL_26:
      CFDictionaryRef v17 = a9;
      if (a9)
      {
        URLCFArrayRef Value = FigCFDictionaryGetURLValue();
        uint64_t v19 = FigCFDictionaryGetURLValue();
        FigCFDictionaryGetDictionaryValue();
        uint64_t v20 = FigCFDictionaryGetURLValue();
        FigCFDictionaryGetBooleanIfPresent();
        DataCFArrayRef Value = (const void *)FigCFDictionaryGetDataValue();
        if (DataValue) {
          CFTypeRef v22 = CFRetain(DataValue);
        }
        else {
          CFTypeRef v22 = 0;
        }
        FigCFDictionaryGetBooleanIfPresent();
        CFStringRef v27 = (const __CFString *)CFDictionaryGetValue(a9, @"assetOption_LoggingIdentifier");
        if (v27)
        {
          CFStringRef v28 = v27;
          CFTypeID v29 = CFGetTypeID(v27);
          if (v29 == CFStringGetTypeID()) {
            CFStringGetCString(v28, (char *)(DerivedStorage + 56), 10, 0x600u);
          }
        }
        size_t v30 = CFDictionaryGetValue(a9, @"assetOption_CustomURLLoader");
        if (!v30)
        {
          uint64_t v24 = 0;
          unsigned int v26 = 0;
          if (v22) {
            goto LABEL_48;
          }
LABEL_45:
          CFTypeRef v22 = (CFTypeRef)MEMORY[0x1997107D0]();
          if (!v22) {
            goto LABEL_48;
          }
          if (v26) {
            goto LABEL_47;
          }
          goto LABEL_31;
        }
        int v31 = v30;
        totalLengthOut[0] = 0;
        MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          uint64_t v24 = 0;
          goto LABEL_100;
        }
        unsigned int v26 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, @"assetOption_CustomURLLoader");
        uint64_t v24 = MEMORY[0x19970CE50](v31, totalLengthOut);
        if (!v24 && totalLengthOut[0]) {
          xpc_dictionary_set_uint64(xdict, "CustomURLLoader", totalLengthOut[0]);
        }
        if (!v22) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v23 = MEMORY[0x1997107D0]();
        uint64_t v20 = 0;
        if (v23)
        {
          CFTypeRef v22 = (CFTypeRef)v23;
          uint64_t v24 = 0;
          uint64_t v19 = 0;
          URLCFArrayRef Value = 0;
LABEL_31:
          uint64_t v25 = FigCFDictionaryCreateMutableCopy();
          if (!v25)
          {
LABEL_101:
            CFRelease(v22);
            goto LABEL_102;
          }
          unsigned int v26 = (__CFDictionary *)v25;
LABEL_47:
          CFDictionarySetValue(v26, @"assetOption_ApplicationTransportSecurityContext", v22);
          goto LABEL_48;
        }
        uint64_t v19 = 0;
        URLCFArrayRef Value = 0;
        unsigned int v26 = 0;
        CFTypeRef v22 = 0;
      }
LABEL_48:
      if (v26) {
        CFDictionaryRef v17 = v26;
      }
      uint64_t v33 = FigXPCMessageSetCFDictionary();
      if (v33)
      {
LABEL_115:
        uint64_t v24 = v33;
        if (v26) {
LABEL_99:
        }
          CFRelease(v26);
LABEL_100:
        if (!v22) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
      xpc_dictionary_set_uint64(xdict, "AssetCreationFlags", value);
      if (!a2)
      {
LABEL_69:
        if (v19) {
          remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(0, v19, 0, (uint64_t)xdict, 0x194954CECLL, &v56);
        }
        if (URLValue)
        {
          remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(1, URLValue, 0, (uint64_t)xdict, 0x194954D19, &v55);
        }
        else if (!v58)
        {
          totalLengthOut[0] = 0;
          uint64_t v34 = FigDiskCacheRepositoryCopyDefaultTmpDirURL((CFTypeRef *)totalLengthOut);
          if (!v34)
          {
            FigSandboxRegisterDirectoryURLWithProcess();
            uint64_t v34 = totalLengthOut[0];
            if (totalLengthOut[0]) {
              CFRelease((CFTypeRef)totalLengthOut[0]);
            }
          }
        }
        if (v20) {
          remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(1, v20, 0, (uint64_t)xdict, 0x194954D3FLL, &v54);
        }
        if (FigAssetAllowsSandboxedParsingOptIn(v34)) {
          FigCFDictionaryGetBooleanIfPresent();
        }
        uint64_t v33 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v33)
        {
          uint64_t uint64 = xpc_dictionary_get_uint64(v60, (const char *)*MEMORY[0x1E4F20280]);
          CFTypeRef v44 = cf;
          uint64_t v33 = remoteXPCAsset_CompleteAssetObjectSetup((uint64_t)cf, uint64);
          if (!v33)
          {
            CFNumberRef v45 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &value);
            remoteXPCAsset_SetCachedAssetPropertyValue((uint64_t)v44, @"assetProperty_CreationOptionsDictionary", (uint64_t)v17);
            CFTypeRef v46 = cf;
            remoteXPCAsset_SetCachedAssetPropertyValue((uint64_t)cf, @"assetProperty_CreationFlags", (uint64_t)v45);
            if (v45) {
              CFRelease(v45);
            }
            uint64_t v24 = 0;
            if (!a2)
            {
LABEL_98:
              remoteXPCAsset_storeSandboxRegistration(v46, v57);
              remoteXPCAsset_storeSandboxRegistration(v46, v56);
              remoteXPCAsset_storeSandboxRegistration(v46, v55);
              remoteXPCAsset_storeSandboxRegistration(v46, v54);
              *a10 = v46;
              CFTypeRef cf = 0;
              if (!v26) {
                goto LABEL_100;
              }
              goto LABEL_99;
            }
            totalLengthOut[0] = 0;
            dataPointerOut[0] = 0;
            *(void *)theCFDataRef Data = 0;
            if (!v17 || !CFDictionaryContainsKey(v17, @"assetOption_AdditionalHTTPCookies"))
            {
              ObjectIOSurfaceID ID = FigRemote_SerializeCookiesForURL((const __CFURL *)a2, (uint64_t)theData);
              if (ObjectID)
              {
LABEL_117:
                uint64_t v24 = ObjectID;
LABEL_95:
                FigXPCRelease();
                if (*(void *)theData) {
                  CFRelease(*(CFTypeRef *)theData);
                }
                CFTypeRef v46 = cf;
                goto LABEL_98;
              }
              if (*(void *)theData)
              {
                ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID((uint64_t)v46, dataPointerOut);
                if (!ObjectID)
                {
                  uint64_t v24 = FigXPCCreateBasicMessage();
                  uint64_t v48 = (void *)totalLengthOut[0];
                  if (!v24)
                  {
                    FigXPCMessageSetCFURL();
                    uint64_t v49 = (void *)totalLengthOut[0];
                    BytePtr = CFDataGetBytePtr(*(CFDataRef *)theData);
                    size_t Length = CFDataGetLength(*(CFDataRef *)theData);
                    xpc_dictionary_set_data(v49, "CookieData", BytePtr, Length);
                    uint64_t v24 = FigXPCRemoteClientSendSyncMessage();
                    uint64_t v48 = (void *)totalLengthOut[0];
                  }
                  if (v48)
                  {
                    totalLengthOut[0] = 0;
                    xpc_release(v48);
                  }
                  goto LABEL_95;
                }
                goto LABEL_117;
              }
            }
            uint64_t v24 = 0;
            goto LABEL_95;
          }
        }
        goto LABEL_115;
      }
      bzero(totalLengthOut, 0x400uLL);
      if (!FigCFURLIsLocalResource()
        || !CFURLGetFileSystemRepresentation((CFURLRef)a2, 1u, (UInt8 *)totalLengthOut, 1024)
        || (CFStringRef v35 = CFURLCopyPathExtension((CFURLRef)a2)) == 0)
      {
        int v42 = 0;
LABEL_68:
        remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(0, (uint64_t)a2, v42 == 0, (uint64_t)xdict, 0x194954CCCLL, &v57);
        goto LABEL_69;
      }
      CFStringRef v36 = v35;
      if (CFStringCompare(v35, @"movpkg", 1uLL) == kCFCompareEqualTo)
      {
        if (!access((const char *)totalLengthOut, 2))
        {
          int v42 = 1;
LABEL_67:
          CFRelease(v36);
          goto LABEL_68;
        }
        unsigned int v65 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v38 = v65;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
          unsigned int v39 = v38;
        }
        else {
          unsigned int v39 = v38 & 0xFFFFFFFE;
        }
        if (v39)
        {
          int v40 = __error();
          unsigned int v41 = strerror(*v40);
          *(_DWORD *)theCFDataRef Data = 136315651;
          *(void *)&theData[4] = "remoteXPCAsset_shouldGrantWriteAccessToURL";
          __int16 v67 = 2113;
          __int16 v68 = a2;
          __int16 v69 = 2080;
          __int16 v70 = v41;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v42 = 0;
      goto LABEL_67;
    }
    goto LABEL_119;
  }
  if (a3)
  {
    totalLengthOut[0] = 0;
    uint64_t DataPointer = FigFormatReaderXPCRemoteGetObjectID(a3, totalLengthOut);
    if (DataPointer) {
      goto LABEL_120;
    }
    uint64_t DataPointer = FigXPCCreateBasicMessage();
    if (DataPointer) {
      goto LABEL_120;
    }
    xpc_dictionary_set_uint64(xdict, "FormatReader", totalLengthOut[0]);
    goto LABEL_26;
  }
  if (a4)
  {
    if (CFDataGetLength(a4))
    {
      uint64_t DataPointer = FigXPCCreateBasicMessage();
      if (DataPointer) {
        goto LABEL_120;
      }
      uint64_t DataPointer = FigXPCMessageSetCFData();
      if (DataPointer) {
        goto LABEL_120;
      }
      goto LABEL_26;
    }
    goto LABEL_119;
  }
  if (a5)
  {
    totalLengthOut[0] = 0;
    dataPointerOut[0] = 0;
    if (!CMBlockBufferGetDataLength(a5))
    {
LABEL_119:
      uint64_t DataPointer = FigSignalErrorAt();
      goto LABEL_120;
    }
    uint64_t DataPointer = FigXPCCreateBasicMessage();
    if (!DataPointer)
    {
      if (CMBlockBufferIsRangeContiguous(a5, 0, 0))
      {
        CMBlockBufferRef blockBufferOut = a5;
        CFRetain(a5);
LABEL_24:
        uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, totalLengthOut, dataPointerOut);
        if (DataPointer) {
          goto LABEL_120;
        }
        xpc_dictionary_set_data(xdict, "BlockBufferData", dataPointerOut[0], totalLengthOut[0]);
        xpc_dictionary_set_int64(xdict, "FormatIdentifierType", a6);
        uint64_t DataPointer = FigXPCMessageSetCFObject();
        if (DataPointer) {
          goto LABEL_120;
        }
        goto LABEL_26;
      }
      uint64_t DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a5, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
      if (!DataPointer) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    uint64_t DataPointer = FigSignalErrorAt();
    if (!DataPointer) {
      goto LABEL_26;
    }
  }
LABEL_120:
  uint64_t v24 = DataPointer;
LABEL_102:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v57) {
    CFRelease(v57);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  return v24;
}

void remoteXPCAsset_SetCachedAssetPropertyValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __remoteXPCAsset_SetCachedAssetPropertyValue_block_invoke;
  block[3] = &__block_descriptor_tmp_25_4;
  void block[4] = DerivedStorage;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v6, block);
}

uint64_t FigAssetRemoteCreateWithURLAndRetry(const __CFAllocator *a1, const void *a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v12 = 0;
  if (a5)
  {
    int v10 = 5;
    while (1)
    {
      uint64_t result = FigAssetRemoteCreateWithURL(a1, a2, a3, a4, &v12);
      if ((int)result > -12179)
      {
        if (!result)
        {
          *a5 = v12;
          return result;
        }
        if (result != -12178) {
          return result;
        }
      }
      else if (result != -16155 && result != -16153)
      {
        return result;
      }
      if (!--v10) {
        return result;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetRemoteCreateWithFormatReader(const __CFAllocator *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v13 = 0;
  if (!a2 || !a5)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_8;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
  }
  uint64_t v10 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (remoteXPCAssetClient_EnsureClientEstablished_err) {
    goto LABEL_8;
  }
  uint64_t v10 = remoteXPCAsset_CreateInternal(a1, 0, a2, 0, 0, -1, 0, a3, a4, &v13);
  uint64_t v11 = v13;
  if (!v10)
  {
    remoteXPCAsset_SetCachedAssetPropertyValue((uint64_t)v13, @"assetProperty_FormatReader", a2);
    *a5 = v11;
LABEL_8:
    FigXPCRemoteClientKillServerOnTimeout();
    return v10;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  if (v11) {
    CFRelease(v11);
  }
  return v10;
}

uint64_t FigAssetRemoteCreateWithMovieProxyData(const __CFAllocator *a1, const __CFData *a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  if (!a2 || !a5)
  {
    uint64_t Internal = FigSignalErrorAt();
    goto LABEL_7;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
  }
  uint64_t v10 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (!remoteXPCAssetClient_EnsureClientEstablished_err)
  {
    uint64_t Internal = remoteXPCAsset_CreateInternal(a1, 0, 0, a2, 0, -1, 0, a3, a4, a5);
LABEL_7:
    uint64_t v10 = Internal;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t FigAssetRemoteCreateWithBlockBuffer(const __CFAllocator *a1, CMBlockBufferRef theBuffer, int a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, void *a7)
{
  if (!theBuffer || a3 == -1 || !a4 || !a7 || !CMBlockBufferGetDataLength(theBuffer))
  {
    uint64_t Internal = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
  }
  uint64_t v14 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (!remoteXPCAssetClient_EnsureClientEstablished_err)
  {
    uint64_t Internal = remoteXPCAsset_CreateInternal(a1, 0, 0, 0, theBuffer, a3, a4, a5, a6, a7);
LABEL_10:
    uint64_t v14 = Internal;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

uint64_t FigAssetRemoteCreateForServerObject(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v8 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
  }
  uint64_t result = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (!remoteXPCAssetClient_EnsureClientEstablished_err)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void, int *, uint64_t *, uint64_t *))(a2 + 16))(a2, 0, 0, &v8, &v7, &v6);
    if (!result) {
      return FigAssetXPCRemoteCreateWithObjectID(v7, a3);
    }
  }
  return result;
}

uint64_t FigAssetXPCRemoteCreateWithObjectID(uint64_t a1, uint64_t *a2)
{
  if (a1 && a2)
  {
    if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
    }
    uint64_t result = remoteXPCAssetClient_EnsureClientEstablished_err;
    if (!remoteXPCAssetClient_EnsureClientEstablished_err)
    {
      uint64_t result = remoteXPCAsset_CreateAssetObject((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2);
      if (!result)
      {
        uint64_t v5 = *a2;
        return remoteXPCAsset_CompleteAssetObjectSetup(v5, a1);
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigAssetRemoteCopyAssetWithDownloadToken(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  xpc_object_t v12 = 0;
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  if (!a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
  }
  uint64_t v6 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (remoteXPCAssetClient_EnsureClientEstablished_err) {
    goto LABEL_12;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (v7
    || (xpc_dictionary_set_uint64(xdict, "DownloadToken", a2),
        uint64_t v7 = remoteXPCAsset_CreateAssetObject(a1, &v11),
        v7)
    || (uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v7))
  {
    uint64_t v6 = v7;
LABEL_12:
    long long v9 = v11;
    goto LABEL_13;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E4F20280]);
  long long v9 = v11;
  uint64_t v6 = remoteXPCAsset_CompleteAssetObjectSetup((uint64_t)v11, uint64);
  if (!v6)
  {
    *a3 = v9;
    goto LABEL_10;
  }
LABEL_13:
  if (v9) {
    CFRelease(v9);
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCAsset_CreateAssetObject(const __CFAllocator *a1, void *a2)
{
  FigAssetGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (!v4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigRemotePropertyCacheSetup(a1, (dispatch_queue_t *)(DerivedStorage + 8), "remoteFigAsset_cache");
    *(unsigned char *)(DerivedStorage + 56) = 0;
  }
  *a2 = 0;
  return v4;
}

uint64_t remoteXPCAsset_CompleteAssetObjectSetup(uint64_t a1, uint64_t a2)
{
  *(void *) CMBaseObjectGetDerivedStorage() = a2;
  uint64_t result = FigXPCRemoteClientAssociateObject();
  if (!result)
  {
    return FigStartMonitoringMediaServicesProcessDeath();
  }
  return result;
}

uint64_t FigAssetXPCRemoteRetainCopiedAsset(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_85);
    }
    uint64_t v4 = remoteXPCAssetClient_EnsureClientEstablished_err;
    if (remoteXPCAssetClient_EnsureClientEstablished_err) {
      return v4;
    }
    uint64_t v4 = FigXPCRemoteClientRetainCopiedObject();
    CFTypeRef v5 = cf;
    if (!v4)
    {
      uint64_t v6 = FigAssetXPCRemoteCreateWithObjectID(a1, (uint64_t *)&cf);
      if (!v6)
      {
        uint64_t v4 = 0;
        *a2 = cf;
        return v4;
      }
      uint64_t v4 = v6;
      CFTypeRef v5 = cf;
    }
    if (v5) {
      CFRelease(v5);
    }
    return v4;
  }

  return FigSignalErrorAt();
}

uint64_t FigAssetXPCRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return remoteXPCAsset_GetObjectID(a1, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t remoteXPCAsset_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 40) || *(unsigned char *)(DerivedStorage + 66))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t remoteXPCAssetClient_DeadConnectionCallback(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == FigAssetGetTypeID())
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    uint64_t v4 = (unsigned char *)(result + 40);
  }
  else
  {
    CFTypeID v5 = CFGetTypeID(a1);
    uint64_t result = FigAssetTrackGetTypeID();
    if (v5 != result) {
      return result;
    }
    uint64_t result = CMBaseObjectGetDerivedStorage();
    uint64_t v4 = (unsigned char *)(result + 48);
  }
  *uint64_t v4 = 1;
  return result;
}

uint64_t remoteXPCAssetClient_NotificationFilter(const void *a1, const void *a2, void *a3, CFDictionaryRef theDict, __CFDictionary **a5)
{
  uint64_t v5 = 0;
  if (!a2 || !theDict) {
    return v5;
  }
  if (CFDictionaryGetValue(theDict, @"CFErrorAsDictionary"))
  {
    uint64_t v11 = FigCFErrorCreateFromPropertyList();
    if (!v11)
    {
      FigSignalErrorAt();
      return 0;
    }
    xpc_object_t v12 = (const void *)v11;
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
    if (!MutableCopy)
    {
      FigSignalErrorAt();
      uint64_t v5 = 0;
      goto LABEL_19;
    }
    uint64_t v14 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, @"CFErrorAsDictionary");
    CFDictionarySetValue(v14, @"assetPayload_CFError", v12);
    uint64_t v5 = 4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v14 = 0;
    xpc_object_t v12 = 0;
  }
  if (CFEqual(a2, @"assetNotice_PropertyLoaded") || CFEqual(a2, @"assetNotice_PropertyRevised"))
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, @"assetPayload_Property");
    if (!Value) {
      goto LABEL_18;
    }
    CFTypeID v16 = Value;
    CFTypeRef cf = 0;
    if (a1)
    {
      CFTypeID v17 = CFGetTypeID(a1);
      if (v17 != FigAssetGetTypeID()) {
        goto LABEL_16;
      }
    }
    xpc_object_t v18 = xpc_dictionary_get_value(a3, "LoadedValue");
    if (v18)
    {
      AssetPropertyValueFromXPCDictionarCGFloat y = remoteXPCAsset_DeserializeAndCreateAssetPropertyValueFromXPCDictionary((uint64_t)a1, v18, v16, (uint64_t *)&cf);
      if (!a1) {
        goto LABEL_16;
      }
    }
    else
    {
      AssetPropertyValueFromXPCDictionarCGFloat y = 0;
      if (!a1)
      {
LABEL_16:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_18;
      }
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v21 = *(NSObject **)(DerivedStorage + 8);
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 0x40000000;
    v26[2] = __remoteXPCAssetClient_HandleCachedPropertyLoaded_block_invoke;
    v26[3] = &__block_descriptor_tmp_10_7;
    v26[4] = DerivedStorage;
    v26[5] = v16;
    int v27 = AssetPropertyValueFromXPCDictionary;
    v26[6] = v18;
    v26[7] = cf;
    dispatch_sync(v21, v26);
    goto LABEL_16;
  }
  if (CFEqual(a2, @"assetNotice_PropertyFailedToLoad"))
  {
    if (CFDictionaryGetValue(theDict, @"assetPayload_Property"))
    {
      LODWORD(cf) = 0;
      FigCFDictionaryGetInt32IfPresent();
      if (a1)
      {
        CFGetTypeID(a1);
        FigAssetGetTypeID();
      }
    }
  }
  else if (CFEqual(a2, @"assetTrackNotice_PropertyLoaded") {
         || CFEqual(a2, @"assetTrackNotice_PropertyRevised"))
  }
  {
    uint64_t v23 = CFDictionaryGetValue(theDict, @"assetPayload_Property");
    if (v23) {
      remoteXPCAssetTrackClient_HandleCachedPropertyLoaded(a1, v23, a3);
    }
  }
  else if (CFEqual(a2, @"assetTrackNotice_PropertyFailedToLoad"))
  {
    uint64_t v24 = CFDictionaryGetValue(theDict, @"assetPayload_Property");
    if (v24)
    {
      uint64_t v25 = (uint64_t)v24;
      LODWORD(v26[0]) = 0;
      FigCFDictionaryGetInt32IfPresent();
      remoteXPCAssetTrackClient_HandleCachedPropertyFailedToLoad(a1, v25, 0, (uint64_t)v12);
    }
  }
  else if (a1 && CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21770]))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
LABEL_18:
  *a5 = v14;
  if (v12) {
LABEL_19:
  }
    CFRelease(v12);
  return v5;
}

void remoteXPCAssetClient_ObjectPurgedCallback(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == FigAssetGetTypeID())
  {
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 66) = 1;
  }
  else
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 != FigAssetTrackGetTypeID()) {
      return;
    }
    *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 49) = 1;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt64();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void remoteXPCAssetTrackClient_HandleCachedPropertyLoaded(const void *a1, const void *a2, void *a3)
{
  if (a1)
  {
    CFTypeID v5 = CFGetTypeID(a1);
    if (v5 == FigAssetTrackGetTypeID())
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v13 = 0;
      xpc_object_t value = xpc_dictionary_get_value(a3, "LoadedValue");
      xpc_object_t v8 = value;
      if (value)
      {
        LODWORD(CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = remoteXPCAssetTrack_DeserializeAndCreateAssetTrackPropertyValueFromXPCDictionary((int)value, a2, &v13);
        CFTypeRef v9 = v13;
      }
      else
      {
        CFTypeRef v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(DerivedStorage + 16);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      void v11[2] = __remoteXPCAssetTrackClient_HandleCachedPropertyLoaded_block_invoke;
      _OWORD v11[3] = &__block_descriptor_tmp_20_1;
      v11[4] = DerivedStorage;
      void v11[5] = a2;
      int v12 = (int)value;
      v11[6] = v8;
      void v11[7] = v9;
      dispatch_sync(v10, v11);
      if (v13) {
        CFRelease(v13);
      }
    }
  }
}

void remoteXPCAssetTrackClient_HandleCachedPropertyFailedToLoad(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    TypeIOSurfaceID ID = FigAssetTrackGetTypeID();
    if (a3)
    {
      if (v7 == TypeID)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v10 = *(NSObject **)(DerivedStorage + 16);
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        void v11[2] = __remoteXPCAssetTrackClient_HandleCachedPropertyFailedToLoad_block_invoke;
        _OWORD v11[3] = &__block_descriptor_tmp_21_2;
        v11[4] = DerivedStorage;
        void v11[5] = a2;
        int v12 = a3;
        v11[6] = a4;
        dispatch_sync(v10, v11);
      }
    }
  }
}

uint64_t remoteXPCAsset_DeserializeAndCreateAssetPropertyValueFromXPCDictionary(uint64_t a1, void *a2, CFTypeRef cf1, uint64_t *a4)
{
  if (CFEqual(cf1, @"assetProperty_FormatReader"))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    uint64_t uint64 = xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    if (uint64)
    {
      uint64_t v10 = FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64, &cf);
      if (!v10)
      {
LABEL_4:
        uint64_t v11 = 0;
        *a4 = (uint64_t)cf;
        return v11;
      }
      uint64_t v11 = v10;
    }
    else
    {
      uint64_t v14 = xpc_dictionary_get_uint64(a2, "MediaParserFormatReaderObjectID");
      if (!v14) {
        goto LABEL_4;
      }
      int v15 = a1 ? *(unsigned __int8 *)(DerivedStorage + 41) : 1;
      uint64_t v11 = FigFormatReaderXPCRemoteRetainCopiedFormatReader(v14, v15, &cf);
      if (!v11) {
        goto LABEL_4;
      }
    }
    int v12 = cf;
LABEL_17:
    if (v12) {
      CFRelease(v12);
    }
    return v11;
  }
  if (CFEqual(cf1, @"assetProperty_CPEProtector"))
  {
    CFTypeRef cf = 0;
    int v12 = (const void *)xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    if (!v12) {
      goto LABEL_23;
    }
    uint64_t v13 = FigCPEProtectorXPCRemoteRetainCopiedCPEProtector((uint64_t)v12, &cf);
LABEL_22:
    uint64_t v11 = v13;
    int v12 = cf;
    if (v11) {
      goto LABEL_17;
    }
LABEL_23:
    uint64_t v11 = 0;
    *a4 = (uint64_t)v12;
    return v11;
  }
  if (CFEqual(cf1, @"assetProperty_CustomURLLoader"))
  {
    CFTypeRef cf = 0;
    int v12 = (const void *)xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    if (!v12) {
      goto LABEL_23;
    }
    uint64_t v13 = FigCustomURLLoaderRemoteCreateWithObjectID();
    goto LABEL_22;
  }
  if (CFEqual(cf1, @"assetProperty_ContentKeyBoss"))
  {
    CFTypeRef cf = 0;
    int v12 = (const void *)xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    if (!v12) {
      goto LABEL_23;
    }
    uint64_t v13 = FigContentKeyBossCreateRemoteWithObjectID(*MEMORY[0x1E4F1CF80], (uint64_t)v12, &cf);
    goto LABEL_22;
  }
  if (CFEqual(cf1, @"assetProperty_DefaultContentKeySession"))
  {
    return remoteXPCAsset_DeserializeAndCreateDefaultContentKeySessionFromXPCDictionary(a2, a4);
  }
  else if (CFEqual(cf1, @"assetProperty_HLSSessionKeys"))
  {
    return remoteXPCAsset_DeserializeAndCreateHLSSessionKeysFromXPCDictionary(a2, (__CFArray **)a4);
  }
  else if (CFEqual(cf1, @"assetProperty_Tracks"))
  {
    return remoteXPCAsset_DeserializeAndCreateTracksArrayFromXPCDictionary(a2, (__CFArray **)a4);
  }
  else if (CFEqual(cf1, @"assetProperty_HLSAlternates"))
  {
    return remoteXPCAsset_DeserializeAndCreateHLSAlternatesFromXPCDictionary(a2, (__CFArray **)a4);
  }
  else if (CFEqual(cf1, @"assetProperty_CommonMetadata") {
         || CFEqual(cf1, @"assetProperty_QuickTimeMetadata")
  }
         || CFEqual(cf1, @"assetProperty_QuickTimeUserData")
         || CFEqual(cf1, @"assetProperty_ISOUserData")
         || CFEqual(cf1, @"assetProperty_ID3Metadata")
         || CFEqual(cf1, @"assetProperty_iTunesMetadata")
         || CFEqual(cf1, @"assetProperty_HLSMetadata")
         || CFEqual(cf1, @"assetProperty_ID3MetadataBC"))
  {
    return remoteXPCAsset_ConvertMetadataBinaryPListDataToArray();
  }
  else
  {
    return FigXPCMessageCopyCFObject();
  }
}

uint64_t remoteXPCAsset_DeserializeAndCreateDefaultContentKeySessionFromXPCDictionary(void *a1, uint64_t *a2)
{
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E4F20280]);
  if (uint64
    && (uint64_t v4 = FigContentKeySessionRemoteCreateSessionForID(*MEMORY[0x1E4F1CF80], uint64, &cf),
        uint64_t uint64 = (uint64_t)cf,
        v4))
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v4 = 0;
    *a2 = uint64;
  }
  return v4;
}

uint64_t remoteXPCAsset_DeserializeAndCreateHLSSessionKeysFromXPCDictionary(void *a1, __CFArray **a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, (const char *)*MEMORY[0x1E4F202A8]);
  if (value)
  {
    return FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifiers(value, a2);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remoteXPCAsset_DeserializeAndCreateTracksArrayFromXPCDictionary(void *a1, __CFArray **a2)
{
  xpc_object_t v4 = xpc_dictionary_get_value(a1, "TrackIDsAndTypes");
  xpc_object_t v5 = xpc_dictionary_get_value(a1, "TrackObjectIDs");
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_20;
  }
  CFTypeID v7 = v5;
  int count = xpc_array_get_count(v4);
  size_t v9 = xpc_array_get_count(v7);
  if (v9 != count)
  {
LABEL_26:
    return FigSignalErrorAt();
  }
  if (!count)
  {
LABEL_20:
    int v12 = 0;
    goto LABEL_21;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    goto LABEL_26;
  }
  int v12 = Mutable;
  if (count < 1)
  {
LABEL_21:
    uint64_t v18 = 0;
    goto LABEL_22;
  }
  uint64_t v25 = a2;
  unsigned int v26 = v7;
  size_t v13 = 0;
  uint64_t v14 = count;
  while (1)
  {
    uint64_t uint64 = xpc_array_get_uint64(v7, v13);
    uint64_t v16 = xpc_array_get_uint64(v4, v13);
    if (uint64) {
      break;
    }
    uint64_t v23 = FigSignalErrorAt();
    if (v23)
    {
      uint64_t v18 = v23;
      a2 = v25;
      goto LABEL_25;
    }
    CFArrayAppendValue(v12, 0);
LABEL_16:
    if (v14 == ++v13)
    {
      uint64_t v18 = 0;
      a2 = v25;
      goto LABEL_22;
    }
  }
  uint64_t v17 = v16;
  uint64_t v18 = FigXPCRemoteClientRetainCopiedObject();
  CFTypeRef v19 = 0;
  if (v18) {
    goto LABEL_23;
  }
  CFTypeRef cf = 0;
  FigAssetTrackGetClassID();
  uint64_t v18 = CMDerivedObjectCreate();
  CFTypeRef v19 = cf;
  if (v18) {
    goto LABEL_23;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRemotePropertyCacheSetup(v10, (dispatch_queue_t *)(DerivedStorage + 16), "remoteFigAssetTrack_cache");
  CFTypeRef value = cf;
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v21 + _Block_object_dispose(&STACK[0x290], 8) = HIDWORD(v17);
  *(_DWORD *)(v21 + 12) = v17;
  CFTypeID v7 = v26;
  *(void *)uint64_t v21 = uint64;
  uint64_t v22 = FigXPCRemoteClientAssociateObject();
  if (!v22)
  {
    CFArrayAppendValue(v12, value);
    if (value) {
      CFRelease(value);
    }
    goto LABEL_16;
  }
  uint64_t v18 = v22;
  CFTypeRef v19 = value;
LABEL_23:
  a2 = v25;
  if (v19) {
    CFRelease(v19);
  }
LABEL_25:
  CFRelease(v12);
  int v12 = 0;
LABEL_22:
  *a2 = v12;
  return v18;
}

uint64_t remoteXPCAsset_DeserializeAndCreateHLSAlternatesFromXPCDictionary(void *a1, __CFArray **a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, (const char *)*MEMORY[0x1E4F202A8]);
  if (value)
  {
    return FigAlternateCreateArrayOfAlternatesFromXPCObject(value, a2);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remoteXPCAsset_ConvertMetadataBinaryPListDataToArray()
{
  uint64_t v0 = FigXPCMessageCopyCFData();
  if (v0) {
    return v0;
  }
  else {
    return 0;
  }
}

uint64_t remoteXPCAssetTrack_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 48) || *(unsigned char *)(DerivedStorage + 49))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

CFMutableDictionaryRef FigRemotePropertyCacheSetup(const __CFAllocator *a1, dispatch_queue_t *a2, char *label)
{
  *a2 = dispatch_queue_create(label, 0);
  xpc_object_t v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  BOOL v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  a2[1] = (dispatch_queue_t)CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  a2[2] = (dispatch_queue_t)CFDictionaryCreateMutable(a1, 0, v5, v6);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(a1, 0, v5, v6);
  a2[3] = (dispatch_queue_t)result;
  return result;
}

uint64_t remoteXPCAssetTrack_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 48) && !*(unsigned char *)(DerivedStorage + 49) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  FigRemotePropertyCacheTeardown(DerivedStorage + 16);
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCAssetTrack_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 48)) {
    BOOL v6 = " SERVER DIED";
  }
  else {
    BOOL v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigAssetTrackRemote(XPC) %p retainCount: %ld ObjectID %016llx TrackID %d MediaType '%c%c%c%c'%s>", a1, v5, *(void *)DerivedStorage, *(unsigned int *)(DerivedStorage + 8), HIBYTE(*(_DWORD *)(DerivedStorage + 12)), BYTE2(*(_DWORD *)(DerivedStorage + 12)), BYTE1(*(_DWORD *)(DerivedStorage + 12)), *(_DWORD *)(DerivedStorage + 12), v6);
  return Mutable;
}

uint64_t remoteXPCAssetTrack_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v18 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  uint64_t v17 = 0;
  if (a2 && a4)
  {
    *a4 = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x2000000000;
    char v23 = 0;
    xpc_object_t v8 = *(NSObject **)(DerivedStorage + 16);
    blocCFIndex k = MEMORY[0x1E4F143A8];
    uint64_t v25 = 0x40000000;
    unsigned int v26 = __remoteXPCAssetTrack_CopyCachedAssetTrackPropertyValue_block_invoke;
    int v27 = &unk_1E57A5AB0;
    CFTypeRef v30 = a2;
    p_CFTypeRef cf = &cf;
    CFStringRef v28 = &v20;
    uint64_t v29 = DerivedStorage;
    dispatch_sync(v8, &block);
    int v9 = *((unsigned __int8 *)v21 + 24);
    _Block_object_dispose(&v20, 8);
    if (v9)
    {
LABEL_13:
      uint64_t v14 = 0;
      *a4 = cf;
      CFTypeRef cf = 0;
      goto LABEL_14;
    }
    ObjectIOSurfaceID ID = remoteXPCAssetTrack_GetObjectID(a1, &v17);
    if (!ObjectID)
    {
      ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
        if (!ObjectID)
        {
          if (pthread_main_np()) {
            xpc_dictionary_set_BOOL(xdict, "RequestBlockageWarning", 1);
          }
          ObjectIOSurfaceID ID = ASSETTRACK_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY();
          if (!ObjectID)
          {
            ObjectIOSurfaceID ID = remoteXPCAssetTrack_DeserializeAndCreateAssetTrackPropertyValueFromXPCDictionary(v18[0], a2, &cf);
            if (!ObjectID)
            {
              ObjectIOSurfaceID ID = FigXPCMessageCopyCFString();
              if (!ObjectID)
              {
                CFTypeRef v11 = cf;
                uint64_t v12 = CMBaseObjectGetDerivedStorage();
                size_t v13 = *(NSObject **)(v12 + 16);
                blocCFIndex k = MEMORY[0x1E4F143A8];
                uint64_t v25 = 0x40000000;
                unsigned int v26 = __remoteXPCAssetTrack_SetCachedAssetTrackPropertyValue_block_invoke;
                int v27 = &__block_descriptor_tmp_18_1;
                CFStringRef v28 = (uint64_t *)v12;
                uint64_t v29 = (uint64_t)a2;
                CFTypeRef v30 = v11;
                dispatch_sync(v13, &block);
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v14 = ObjectID;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

void FigRemotePropertyCacheTeardown(uint64_t a1)
{
  CFTypeID v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
  xpc_object_t v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 24) = 0;
  }
  if (*(void *)a1)
  {
    dispatch_release(*(dispatch_object_t *)a1);
    *(void *)a1 = 0;
  }
}

uint64_t ASSETTRACK_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY()
{
  return FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
}

uint64_t remoteXPCAssetTrack_DeserializeAndCreateAssetTrackPropertyValueFromXPCDictionary(int a1, CFTypeRef cf1, void *a3)
{
  if (CFEqual(cf1, @"FormatDescriptionArray"))
  {
    uint64_t result = FigXPCMessageCopyFormatDescriptionArray();
    if (!result) {
      *a3 = 0;
    }
  }
  else if (CFEqual(cf1, @"CommonMetadata") {
         || CFEqual(cf1, @"assetTrackProperty_QuickTimeMetadata")
  }
         || CFEqual(cf1, @"assetTrackProperty_QuickTimeUserData")
         || CFEqual(cf1, @"assetTrackProperty_ISOUserData"))
  {
    return remoteXPCAsset_ConvertMetadataBinaryPListDataToArray();
  }
  else
  {
    return FigXPCMessageCopyCFObject();
  }
  return result;
}

uint64_t remoteXPCAssetTrack_GetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  xpc_object_t xdict = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  if (!a2 || !a3)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_15:
    uint64_t v9 = ObjectID;
    goto LABEL_13;
  }
  ObjectIOSurfaceID ID = remoteXPCAssetTrack_GetObjectID(a1, &v11);
  if (ObjectID) {
    goto LABEL_15;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_15;
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_15;
  }
  uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v9)
  {
    *a3 = xpc_dictionary_get_uint64(xdict, "LoadStatus");
    if (a4) {
      *a4 = xpc_dictionary_get_int64(xdict, "LoadingError");
    }
    if (a5) {
      FigXPCMessageCopyCFError();
    }
    uint64_t v9 = 0;
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCAssetTrack_LoadValuesAsyncForProperties(uint64_t a1, CFArrayRef theArray, BOOL *a3, _DWORD *a4)
{
  xpc_object_t v11 = 0;
  xpc_object_t xdict = 0;
  uint64_t v10 = 0;
  if (!theArray || !CFArrayGetCount(theArray))
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_13:
    uint64_t v8 = ObjectID;
    goto LABEL_11;
  }
  ObjectIOSurfaceID ID = remoteXPCAssetTrack_GetObjectID(a1, &v10);
  if (ObjectID) {
    goto LABEL_13;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFArray();
  if (ObjectID) {
    goto LABEL_13;
  }
  xpc_dictionary_set_BOOL(xdict, "isBatch", a4 != 0);
  ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_13;
  }
  if (a3) {
    *a3 = xpc_dictionary_get_BOOL(v11, "AlreadyLoaded");
  }
  uint64_t v8 = 0;
  if (a4) {
    *a4 = xpc_dictionary_get_uint64(v11, "BatchID");
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCAssetTrack_LoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  if (!a2)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_10:
    uint64_t v5 = ObjectID;
    goto LABEL_8;
  }
  ObjectIOSurfaceID ID = remoteXPCAssetTrack_GetObjectID(a1, &v7);
  if (ObjectID) {
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (a3 && !v5) {
    *a3 = xpc_dictionary_get_BOOL(xdict, "AlreadyLoaded");
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCAssetTrack_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a2) {
      *a2 = *(_DWORD *)(DerivedStorage + 8);
    }
    if (a3) {
      *a3 = *(_DWORD *)(DerivedStorage + 12);
    }
    return 0;
  }
}

uint64_t remoteXPCAssetTrack_ValidateAsync(uint64_t a1, CFTypeRef cf1, uint64_t a3, int64_t *a4, _DWORD *a5)
{
  xpc_object_t xdict = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  if (!cf1 || !a4) {
    goto LABEL_18;
  }
  if (CFEqual(cf1, @"validationCriteria_Custom"))
  {
    if (!a3)
    {
LABEL_18:
      ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_19:
      uint64_t v11 = ObjectID;
      goto LABEL_17;
    }
  }
  else if (!CFEqual(cf1, @"validationCriteria_CameraRoll") {
         && !CFEqual(cf1, @"validationCriteria_MediaPlayback")
  }
         && !CFEqual(cf1, @"validationCriteria_MediaDecoding"))
  {
    goto LABEL_18;
  }
  ObjectIOSurfaceID ID = remoteXPCAssetTrack_GetObjectID(a1, &v13);
  if (ObjectID) {
    goto LABEL_19;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_19;
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_19;
  }
  if (a3)
  {
    ObjectIOSurfaceID ID = FigXPCMessageSetCFDictionary();
    if (ObjectID) {
      goto LABEL_19;
    }
  }
  uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v11)
  {
    *a4 = xpc_dictionary_get_int64(xdict, "ValidationStatus");
    uint64_t v11 = 0;
    if (a5) {
      *a5 = xpc_dictionary_get_int64(xdict, "ValidationResult");
    }
  }
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

void remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (!a1)
  {
    if (FigSandboxRegisterURLWithProcessAndCopyRegistration()) {
      return;
    }
    goto LABEL_5;
  }
  if (!FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration()) {
LABEL_5:
  }
    *a6 = 0;
}

void remoteXPCAsset_storeSandboxRegistration(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = *(__CFSet **)(DerivedStorage + 48);
  if (Mutable {
    || (CFAllocatorRef v6 = CFGetAllocator(a1),
  }
        CFMutableArrayRef Mutable = CFSetCreateMutable(v6, 0, MEMORY[0x1E4F1D548]),
        (*(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x290], 8) = Mutable) != 0))
  {
    if (a2)
    {
      CFSetAddValue(Mutable, a2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t remoteXPCAsset_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigStopMonitoringMediaServicesProcessDeath();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 40) && !*(unsigned char *)(DerivedStorage + 66) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  CFArrayRef v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x290], 8) = 0;
  }
  FigRemotePropertyCacheTeardown(DerivedStorage + 8);
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCAsset_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 40)) {
    CFAllocatorRef v6 = " SERVER DIED";
  }
  else {
    CFAllocatorRef v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigAssetRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCAsset_CopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFTypeRef *a4)
{
  block[9] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (cf1 && a4)
  {
    *a4 = 0;
    if (!CFEqual(cf1, @"assetProperty_ContentByteStream")
      && !CFEqual(cf1, @"assetProperty_ByteStreamProvider")
      || (ObjectIOSurfaceID ID = FigSignalErrorAt(), !ObjectID))
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x2000000000;
      char v17 = 0;
      uint64_t v9 = *(NSObject **)(DerivedStorage + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __remoteXPCAsset_CopyCachedAssetPropertyValue_block_invoke;
      block[3] = &unk_1E57A5B78;
      void block[6] = cf1;
      void block[7] = &cf;
      void block[4] = &v14;
      void block[5] = DerivedStorage;
      dispatch_sync(v9, block);
      int v10 = *((unsigned __int8 *)v15 + 24);
      _Block_object_dispose(&v14, 8);
      if (v10)
      {
LABEL_16:
        uint64_t v11 = 0;
        *a4 = cf;
        CFTypeRef cf = 0;
        goto LABEL_17;
      }
      uint64_t v14 = 0;
      ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v14);
      if (!ObjectID)
      {
        ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
        if (!ObjectID)
        {
          ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
          if (!ObjectID)
          {
            if (pthread_main_np()) {
              xpc_dictionary_set_BOOL(0, "RequestBlockageWarning", 1);
            }
            ObjectIOSurfaceID ID = ASSET_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY();
            if (!ObjectID)
            {
              ObjectIOSurfaceID ID = remoteXPCAsset_DeserializeAndCreateAssetPropertyValueFromXPCDictionary(a1, 0, cf1, (uint64_t *)&cf);
              if (!ObjectID)
              {
                ObjectIOSurfaceID ID = FigXPCMessageCopyCFString();
                if (!ObjectID)
                {
                  remoteXPCAsset_SetCachedAssetPropertyValue(a1, (uint64_t)cf1, (uint64_t)cf);
                  goto LABEL_16;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v11 = ObjectID;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteXPCAsset_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t v6 = 0;
    ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v6);
    if (!ObjectID) {
      ObjectIOSurfaceID ID = FigXPCSendStdSetPropertyMessage();
    }
  }
  else
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v4 = ObjectID;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCAsset_GetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  xpc_object_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  if (!a2 || !a3)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v11 = DerivedStorage;
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v21);
  if (ObjectID) {
    goto LABEL_15;
  }
  uint64_t v13 = *(NSObject **)(v11 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __remoteXPCAsset_GetStatusOfValueForProperty_block_invoke;
  block[3] = &unk_1E57A5BA0;
  void block[6] = a2;
  void block[7] = a3;
  void block[8] = a4;
  block[9] = a5;
  void block[4] = &v17;
  void block[5] = v11;
  dispatch_sync(v13, block);
  if (*((unsigned char *)v18 + 24)) {
    goto LABEL_5;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID || (ObjectIOSurfaceID ID = FigXPCMessageSetCFString(), ObjectID))
  {
LABEL_15:
    uint64_t v14 = ObjectID;
    goto LABEL_13;
  }
  uint64_t v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v14) {
    goto LABEL_13;
  }
  *a3 = xpc_dictionary_get_uint64(v22, "LoadStatus");
  if (a4) {
    *a4 = xpc_dictionary_get_int64(v22, "LoadingError");
  }
  if (a5)
  {
    FigXPCMessageCopyCFError();
    uint64_t v14 = 0;
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v14 = 0;
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  _Block_object_dispose(&v17, 8);
  return v14;
}

uint64_t remoteXPCAsset_LoadValuesAsyncForProperties(uint64_t a1, CFArrayRef theArray, BOOL *a3, _DWORD *a4)
{
  xpc_object_t v11 = 0;
  xpc_object_t xdict = 0;
  uint64_t v10 = 0;
  if (!theArray || !CFArrayGetCount(theArray))
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_13:
    uint64_t v8 = ObjectID;
    goto LABEL_11;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v10);
  if (ObjectID) {
    goto LABEL_13;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFArray();
  if (ObjectID) {
    goto LABEL_13;
  }
  xpc_dictionary_set_BOOL(xdict, "isBatch", a4 != 0);
  ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_13;
  }
  if (a3) {
    *a3 = xpc_dictionary_get_BOOL(v11, "AlreadyLoaded");
  }
  uint64_t v8 = 0;
  if (a4) {
    *a4 = xpc_dictionary_get_uint64(v11, "BatchID");
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCAsset_LoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  if (!a2)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_10:
    uint64_t v5 = ObjectID;
    goto LABEL_8;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v7);
  if (ObjectID) {
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (a3 && !v5) {
    *a3 = xpc_dictionary_get_BOOL(xdict, "AlreadyLoaded");
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCAsset_ValidateAsync(uint64_t a1, uint64_t a2, uint64_t a3, int64_t *a4, _DWORD *a5)
{
  xpc_object_t xdict = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  if (!a2 || !a4)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_13:
    uint64_t v9 = ObjectID;
    goto LABEL_11;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v11);
  if (ObjectID) {
    goto LABEL_13;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_13;
  }
  if (a3)
  {
    ObjectIOSurfaceID ID = FigXPCMessageSetCFDictionary();
    if (ObjectID) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v9)
  {
    *a4 = xpc_dictionary_get_int64(xdict, "ValidationStatus");
    uint64_t v9 = 0;
    if (a5) {
      *a5 = xpc_dictionary_get_int64(xdict, "ValidationResult");
    }
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCAsset_CopyTrackByID(uint64_t a1, int a2, void *a3)
{
  CFArrayRef theArray = 0;
  if (!a2) {
    goto LABEL_22;
  }
  if (!a3)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_24;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v7 = v6 ? v6 : 0;
  uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, void, CFArrayRef *))(v7 + 48);
  if (!v8) {
    goto LABEL_22;
  }
  if (v8(CMBaseObject, @"assetProperty_Tracks", *MEMORY[0x1E4F1CF80], &theArray) || theArray == 0) {
    goto LABEL_22;
  }
  int v21 = 0;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    goto LABEL_22;
  }
  CFIndex v11 = Count;
  CFIndex v12 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v12);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v15 = v14 ? v14 : 0;
    uint64_t v16 = *(unsigned int (**)(const void *, int *, void))(v15 + 32);
    if (v16)
    {
      if (!v16(ValueAtIndex, &v21, 0) && v21 == a2) {
        break;
      }
    }
    if (v11 == ++v12) {
      goto LABEL_22;
    }
  }
  CFTypeRef v19 = CFRetain(ValueAtIndex);
  if (!v19)
  {
LABEL_22:
    uint64_t v18 = FigSignalErrorAt();
    CFTypeRef v19 = 0;
    if (!a3) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v18 = 0;
  if (a3) {
LABEL_23:
  }
    *a3 = v19;
LABEL_24:
  if (theArray) {
    CFRelease(theArray);
  }
  return v18;
}

uint64_t remoteXPCAsset_CopyTracksWithMediaType(uint64_t a1, int a2, __CFArray **a3)
{
  CFArrayRef theArray = 0;
  if (a3)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v7 + 48);
    if (!v8) {
      goto LABEL_29;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v10 = v8(CMBaseObject, @"assetProperty_Tracks", *MEMORY[0x1E4F1CF80], &theArray);
    CFArrayRef v11 = theArray;
    if (v10) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = theArray == 0;
    }
    if (v12)
    {
      CFMutableArrayRef Mutable = 0;
      uint64_t v14 = 4294955122;
LABEL_31:
      *a3 = Mutable;
      if (v11) {
        CFRelease(v11);
      }
      return v14;
    }
    int v25 = 0;
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      uint64_t v16 = Count;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        if (v16 < 1)
        {
          unsigned int v22 = 0;
        }
        else
        {
          for (CFIndex i = 0; i != v16; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v19) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = 0;
            }
            int v21 = *(uint64_t (**)(const void *, void, int *))(v20 + 32);
            if (v21)
            {
              unsigned int v22 = v21(ValueAtIndex, 0, &v25);
              if (v22) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v25 == a2;
              }
              if (v23)
              {
                CFArrayAppendValue(Mutable, ValueAtIndex);
                unsigned int v22 = 0;
              }
            }
            else
            {
              unsigned int v22 = -12782;
            }
          }
        }
        if (!CFArrayGetCount(Mutable))
        {
          CFRelease(Mutable);
          CFMutableArrayRef Mutable = 0;
        }
        if (Mutable) {
          uint64_t v14 = v22;
        }
        else {
          uint64_t v14 = 4294955122;
        }
      }
      else
      {
        uint64_t v14 = FigSignalErrorAt();
      }
    }
    else
    {
LABEL_29:
      CFMutableArrayRef Mutable = 0;
      uint64_t v14 = 4294955122;
    }
    CFArrayRef v11 = theArray;
    goto LABEL_31;
  }

  return FigSignalErrorAt();
}

uint64_t remoteXPCAsset_CopyChapterData(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5)
{
  v11[1] = 0;
  xpc_object_t xdict = 0;
  v11[0] = 0;
  if (!a4 || !a5)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_9:
    uint64_t v9 = ObjectID;
    goto LABEL_7;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, v11);
  if (ObjectID) {
    goto LABEL_9;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  xpc_dictionary_set_int64(xdict, "ChapterGroupIndex", a2);
  xpc_dictionary_set_int64(xdict, "ChapterIndex", a3);
  xpc_dictionary_set_int64(xdict, "ChapterCount", a4);
  uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v9) {
    uint64_t v9 = FigXPCMessageCopyCFArray();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCAsset_FetchChapterDataAsync(uint64_t a1, int64_t a2, int64_t a3, int64_t a4)
{
  uint64_t v10 = 0;
  xpc_object_t xdict = 0;
  if (!a4)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_7;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v10);
  if (ObjectID)
  {
LABEL_7:
    uint64_t v8 = ObjectID;
    goto LABEL_5;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (!v8)
  {
    xpc_dictionary_set_int64(xdict, "ChapterGroupIndex", a2);
    xpc_dictionary_set_int64(xdict, "ChapterIndex", a3);
    xpc_dictionary_set_int64(xdict, "ChapterCount", a4);
    uint64_t v8 = FigXPCRemoteClientSendAsyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCAsset_LoadValuesAsyncForTrackProperties(uint64_t a1, const __CFArray *a2, CFArrayRef theArray, BOOL *a4, _DWORD *a5)
{
  xpc_object_t v22 = 0;
  xpc_object_t xdict = 0;
  uint64_t v21 = 0;
  if (theArray)
  {
    if (!CFArrayGetCount(theArray) || a2 && !CFArrayGetCount(a2))
    {
      ObjectIOSurfaceID ID = FigSignalErrorAt();
      goto LABEL_26;
    }
    ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, &v21);
    if (ObjectID) {
      goto LABEL_26;
    }
    ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
    if (ObjectID) {
      goto LABEL_26;
    }
    ObjectIOSurfaceID ID = FigXPCMessageSetCFArray();
    if (ObjectID) {
      goto LABEL_26;
    }
    xpc_dictionary_set_BOOL(xdict, "isBatch", a5 != 0);
    if (!a2)
    {
LABEL_17:
      ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID)
      {
        if (a5) {
          *a5 = xpc_dictionary_get_uint64(v22, "BatchID");
        }
        uint64_t v18 = 0;
        if (a4) {
          *a4 = xpc_dictionary_get_BOOL(v22, "AlreadyLoaded");
        }
        goto LABEL_22;
      }
LABEL_26:
      uint64_t v18 = ObjectID;
      goto LABEL_22;
    }
    xpc_object_t v10 = xpc_array_create(0, 0);
    if (v10)
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        CFIndex v13 = 0;
        do
        {
          uint64_t value = 0;
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v13);
          if (!ValueAtIndex) {
            goto LABEL_23;
          }
          uint64_t v15 = (uint64_t)ValueAtIndex;
          CFTypeID v16 = CFGetTypeID(ValueAtIndex);
          if (v16 != FigAssetTrackGetTypeID()) {
            goto LABEL_23;
          }
          uint64_t v17 = remoteXPCAssetTrack_GetObjectID(v15, &value);
          if (v17) {
            goto LABEL_24;
          }
          xpc_array_set_uint64(v10, 0xFFFFFFFFFFFFFFFFLL, value);
        }
        while (v12 != ++v13);
      }
      xpc_dictionary_set_value(xdict, "Tracks", v10);
      xpc_release(v10);
      goto LABEL_17;
    }
  }
LABEL_23:
  uint64_t v17 = FigSignalErrorAt();
LABEL_24:
  uint64_t v18 = v17;
LABEL_22:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v18;
}

uint64_t remoteXPCAsset_DefineMacroProperty(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  v8[0] = 0;
  v8[1] = 0;
  if (!a2 || !theArray || !CFArrayGetCount(theArray))
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, v8);
  if (ObjectID)
  {
LABEL_12:
    uint64_t v6 = ObjectID;
    goto LABEL_9;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5 || (uint64_t v5 = FigXPCMessageSetCFString(), v5) || (uint64_t v5 = FigXPCMessageSetCFArray(), v5)) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCAsset_DefineTrackMacroProperty(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  v8[0] = 0;
  v8[1] = 0;
  if (!a2 || !theArray || !CFArrayGetCount(theArray))
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, v8);
  if (ObjectID)
  {
LABEL_12:
    uint64_t v6 = ObjectID;
    goto LABEL_9;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5 || (uint64_t v5 = FigXPCMessageSetCFString(), v5) || (uint64_t v5 = FigXPCMessageSetCFArray(), v5)) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCAsset_DefineCrossTrackMacroProperty(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  v8[0] = 0;
  v8[1] = 0;
  if (!a2 || !theArray || !CFArrayGetCount(theArray))
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectIOSurfaceID ID = remoteXPCAsset_GetObjectID(a1, v8);
  if (ObjectID)
  {
LABEL_12:
    uint64_t v6 = ObjectID;
    goto LABEL_9;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5 || (uint64_t v5 = FigXPCMessageSetCFString(), v5) || (uint64_t v5 = FigXPCMessageSetCFArray(), v5)) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigDataQueueGetClassID()
{
  return sFigDataQueueClassID;
}

uint64_t RegisterFigDataQueueType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigDataQueueGetTypeID()
{
  MEMORY[0x19970EE10](&FigDataQueueGetClassID_sRegisterFigDataQueueTypeOnce, RegisterFigDataQueueType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigDataQueueCreate(const __CFAllocator *a1, uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a5) {
    goto LABEL_13;
  }
  MEMORY[0x19970EE10](&FigDataQueueGetClassID_sRegisterFigDataQueueTypeOnce, RegisterFigDataQueueType);
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
LABEL_14:
    uint64_t v19 = v9;
    goto LABEL_15;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v11;
  if (!v11) {
    goto LABEL_13;
  }
  if ((a4->flags & 0x1D) == 1 && (a3->flags & 0x1D) == 1)
  {
    CMTime time1 = *a4;
    CMTime v21 = *a3;
    if (CMTimeCompare(&time1, &v21) >= 1) {
      goto LABEL_13;
    }
  }
  long long v12 = *(_OWORD *)&a4->value;
  *(void *)(DerivedStorage + 56) = a4->epoch;
  *(_OWORD *)(DerivedStorage + 40) = v12;
  long long v13 = *(_OWORD *)&a3->value;
  *(void *)(DerivedStorage + 80) = a3->epoch;
  *(_OWORD *)(DerivedStorage + 64) = v13;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x290], 8) = Mutable;
  if (!Mutable
    || (TargetingWorkloopWithPrioritCGFloat y = FigDispatchQueueCreateTargetingWorkloopWithPriority(),
        (*(void *)(DerivedStorage + 144) = TargetingWorkloopWithPriority) == 0)
    || (dispatch_source_t v16 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, TargetingWorkloopWithPriority),
        (*(void *)(DerivedStorage + 136) = v16) == 0))
  {
LABEL_13:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_14;
  }
  uint64_t v17 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (v17)
  {
    dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 136), v17);
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    dispatch_source_set_timer(*(dispatch_source_t *)(v18 + 136), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 136), (dispatch_function_t)dq_PruneTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 136), (dispatch_function_t)FigCFRelease_7);
    dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 136));
    uint64_t v19 = 0;
    *a5 = cf;
    return v19;
  }
  uint64_t v19 = 4294951505;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

void dq_PruneTimerFired()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    CFArrayRef v1 = (const void *)v0;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*DerivedStorage);
    dq_Prune(v1);
    MEMORY[0x19970E2B0](*DerivedStorage);
    CFRelease(v1);
  }
}

void FigCFRelease_7(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFStringRef FigDataQueueCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigDataQueue %p]", a1);
}

uint64_t dq_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
  CFTypeID v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  CFAllocatorRef v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[16];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[16] = 0;
  }
  uint64_t v5 = DerivedStorage[14];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[14] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[13];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[13] = 0;
  }
  uint64_t v7 = DerivedStorage[17];
  if (v7)
  {
    dispatch_source_cancel(v7);
    uint64_t v8 = DerivedStorage[17];
    if (v8)
    {
      dispatch_release(v8);
      DerivedStorage[17] = 0;
    }
  }
  uint64_t v9 = DerivedStorage[18];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[18] = 0;
  }

  return FigSimpleMutexDestroy();
}

__CFString *dq_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  MEMORY[0x19970E290](*DerivedStorage);
  memset(&v8, 0, sizeof(v8));
  uint64_t v4 = (OpaqueCMTimebase *)DerivedStorage[2];
  if (v4) {
    CMTimebaseGetTime(&v8, v4);
  }
  else {
    CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  CMTime time = v8;
  Float64 Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, @"<FigDataQueue %p>: currentMediaTime:%.3f, generationCount:%llu", a1, *(void *)&Seconds, DerivedStorage[3]);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return Mutable;
}

uint64_t dq_CopyProperty(const void *a1, uint64_t a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v9 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        CFArrayRef v13 = (const __CFArray *)v9[1];
        if (v13) {
          CFIndex Count = (int)CFArrayGetCount(v13);
        }
        else {
          CFIndex Count = 0;
        }
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          BOOL v23 = Mutable;
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              int v25 = CFDictionaryCreateMutable(v21, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFDictionaryRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex((CFArrayRef)v9[1], i);
              CFDictionarySetValue(v25, @"SampleBuffer", ValueAtIndex[2]);
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt64();
              CFArrayAppendValue(v23, v25);
              if (v25) {
                CFRelease(v25);
              }
            }
          }
          if (v9[4])
          {
            int v27 = CFDictionaryCreateMutable(v21, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFDictionarySetValue(v27, @"SampleBuffer", *(const void **)(v9[4] + 16));
            FigCFDictionarySetInt32();
            FigCFDictionarySetInt64();
            v32.size_t length = CFArrayGetCount(v23);
            v32.location = 0;
            CFIndex v28 = CFArrayBSearchValues(v23, v32, v27, (CFComparatorFunction)FigDataQueueDumpQueue_comparatorEntryPTS, 0);
            if (v28 > CFArrayGetCount(v23)) {
              CFIndex v28 = CFArrayGetCount(v23);
            }
            CFArrayInsertValueAtIndex(v23, v28, v27);
          }
          uint64_t v20 = 0;
          *a4 = v23;
        }
        else
        {
          uint64_t v20 = FigSignalErrorAt();
        }
      }
      else
      {
        uint64_t v20 = 0;
        if (FigCFEqual()) {
          *a4 = dq_CopyDebugDescription((uint64_t)a1);
        }
      }
      goto LABEL_32;
    }
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    uint64_t v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    CFTypeRef cf = v11;
    if (v11)
    {
      CFTypeRef v12 = v11;
LABEL_17:
      uint64_t v20 = 0;
      *a4 = v12;
LABEL_32:
      MEMORY[0x19970E2B0](*v9);
      return v20;
    }
    CFDictionaryRef v15 = CFDictionaryCreate(a3, (const void **)&kFigSampleBufferConsumerForDataQueueOption_ConsumeAsynchronously, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v15)
    {
      uint64_t v20 = FigSignalErrorAt();
      CFTypeRef v12 = 0;
      if (v20) {
        goto LABEL_32;
      }
      goto LABEL_17;
    }
    CFDictionaryRef v16 = v15;
    uint64_t v17 = FigSampleBufferConsumerForDataQueueCreate(a1, (uint64_t)a3, (uint64_t)v15, &cf);
    if (!v17)
    {
      uint64_t v18 = *(const void **)(v10 + 128);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(v10 + 12_Block_object_dispose(&STACK[0x290], 8) = 0;
      }
      uint64_t v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(v10 + 12_Block_object_dispose(&STACK[0x290], 8) = v19;
      if (v19)
      {
        uint64_t v20 = 0;
        CFTypeRef v12 = cf;
        CFTypeRef cf = 0;
        goto LABEL_14;
      }
      uint64_t v17 = FigSignalErrorAt();
    }
    uint64_t v20 = v17;
    CFTypeRef v12 = 0;
LABEL_14:
    CFRelease(v16);
    if (cf) {
      CFRelease(cf);
    }
    if (v20) {
      goto LABEL_32;
    }
    goto LABEL_17;
  }

  return FigSignalErrorAt();
}

uint64_t dq_SetProperty(const void *a1, uint64_t a2, void *a3)
{
  if (!a2) {
    goto LABEL_8;
  }
  if (!FigCFEqual()) {
    return 4294954509;
  }
  if (!a3 || (TypeIOSurfaceID ID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*DerivedStorage);
    if (DerivedStorage[2])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v7 = (const void *)DerivedStorage[2];
    }
    else
    {
      uint64_t v7 = 0;
    }
    DerivedStorage[2] = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (a3
      && (CMNotificationCenterGetDefaultLocalCenter(),
          FigNotificationCenterAddWeakListener(),
          CMTimebaseGetRate((CMTimebaseRef)a3) != 0.0))
    {
      dq_Prune(a1);
    }
    else
    {
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      dispatch_source_set_timer(*(dispatch_source_t *)(v9 + 136), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    MEMORY[0x19970E2B0](*DerivedStorage);
    return 0;
  }
  else
  {
LABEL_8:
    return FigSignalErrorAt();
  }
}

uint64_t FigDataQueueDumpQueue_comparatorEntryPTS(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFArrayRef Value = (opaqueCMSampleBuffer *)CFDictionaryGetValue(a1, @"SampleBuffer");
  uint64_t v4 = (opaqueCMSampleBuffer *)CFDictionaryGetValue(a2, @"SampleBuffer");
  memset(&v9, 0, sizeof(v9));
  if (Value) {
    CMSampleBufferGetOutputPresentationTimeStamp(&v9, Value);
  }
  else {
    CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  memset(&v8, 0, sizeof(v8));
  if (v4) {
    CMSampleBufferGetOutputPresentationTimeStamp(&v8, v4);
  }
  else {
    CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  CMTime time1 = v9;
  CMTime v6 = v8;
  return CMTimeCompare(&time1, &v6);
}

void dq_TimebaseRateChangedCallback(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 16)) == 0.0)
  {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    dispatch_source_set_timer(*(dispatch_source_t *)(v4 + 136), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  else
  {
    dq_Prune(a2);
  }

  JUMPOUT(0x19970E2B0);
}

void dq_Prune(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ArrayRemovingStaleFrames = dq_CreateArrayRemovingStaleFrames(a1, 1);
  uint64_t v4 = ArrayRemovingStaleFrames;
  uint64_t v5 = *(const void **)(DerivedStorage + 8);
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x290], 8) = ArrayRemovingStaleFrames;
  if (ArrayRemovingStaleFrames) {
    CFRetain(ArrayRemovingStaleFrames);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  dq_EvaluateAndFireLWMTriggerCallback(a1);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CMTime v9 = *(CMTime *)(v6 + 40);
  uint64_t v7 = (uint64_t)(CMTimeGetSeconds(&v9) * 500000000.0);
  dispatch_time_t v8 = dispatch_time(0, v7);
  dispatch_source_set_timer(*(dispatch_source_t *)(v6 + 136), v8, v7, 0);
}

__CFArray *dq_CreateArrayRemovingStaleFrames(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v5 = *(const __CFArray **)(DerivedStorage + 8);
  if (v5) {
    CFIndex Count = CFArrayGetCount(v5);
  }
  else {
    CFIndex Count = 0;
  }
  CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  memset(&v18, 0, sizeof(v18));
  if (a2) {
    CMTimeMake(&v18, 50, 1000);
  }
  else {
    CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CMTime v9 = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    if (v9)
    {
      float Rate = CMTimebaseGetRate(v9);
      CMTimebaseGetTime(&v19, *(CMTimebaseRef *)(DerivedStorage + 16));
    }
    else
    {
      float Rate = 0.0;
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0; Count != i; ++i)
      {
        CFDictionaryRef ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), i);
        memset(&v17, 0, sizeof(v17));
        CMSampleBufferGetOutputPresentationTimeStamp(&v17, ValueAtIndex[2]);
        if (*((_DWORD *)ValueAtIndex + 8) == 2 || *(CMSampleBufferRef *)(DerivedStorage + 24) != ValueAtIndex[3]) {
          continue;
        }
        if (Rate <= 0.0)
        {
          if (Rate < 0.0)
          {
            memset(&v16, 0, sizeof(v16));
            CMTime lhs = v19;
            CMTime v14 = v18;
            CMTimeAdd(&v16, &lhs, &v14);
            CMTime lhs = v17;
            CMTime v14 = v16;
            if ((CMTimeCompare(&lhs, &v14) & 0x80000000) == 0) {
              continue;
            }
          }
        }
        else
        {
          memset(&v16, 0, sizeof(v16));
          CMTime lhs = v19;
          CMTime v14 = v18;
          CMTimeSubtract(&v16, &lhs, &v14);
          CMTime lhs = v17;
          CMTime v14 = v16;
          if (CMTimeCompare(&lhs, &v14) < 1) {
            continue;
          }
        }
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  return Mutable;
}

void dq_EvaluateAndFireLWMTriggerCallback(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 96))
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    int v5 = *(_DWORD *)(v4 + 88);
    dq_UpdateWaterLevelState(a1);
    if (*(_DWORD *)(v4 + 88) == 2 && (!*(unsigned char *)(v4 + 120) || v5 != 2))
    {
      *(unsigned char *)(v3 + 120) = 1;
      CFTypeRef v7 = *(CFTypeRef *)(v3 + 104);
      uint64_t v6 = *(NSObject **)(v3 + 112);
      dispatch_time_t v8 = *(void (**)(uint64_t))(v3 + 96);
      if (v6)
      {
        if (v7)
        {
          uint64_t v11 = *(void (**)(uint64_t))(v3 + 96);
          CFTypeRef v9 = CFRetain(*(CFTypeRef *)(v3 + 104));
          dispatch_time_t v8 = v11;
          CFTypeRef v7 = v9;
          uint64_t v6 = *(NSObject **)(v3 + 112);
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __dq_EvaluateAndFireLWMTriggerCallback_block_invoke;
        block[3] = &__block_descriptor_tmp_104;
        void block[4] = v8;
        void block[5] = v7;
        dispatch_async(v6, block);
      }
      else
      {
        uint64_t v10 = *(void *)(v3 + 104);
        v8(v10);
      }
    }
  }
}

void dq_UpdateWaterLevelState(const void *a1)
{
  CMTime v21 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ArrayRemovingStaleFrames = dq_CreateArrayRemovingStaleFrames(a1, 0);
  CFArrayRef v4 = ArrayRemovingStaleFrames;
  if (ArrayRemovingStaleFrames)
  {
    CFIndex Count = CFArrayGetCount(ArrayRemovingStaleFrames);
    if (Count)
    {
      CFIndex v6 = Count;
      CFDictionaryRef ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(v4, 0);
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetOutputPresentationTimeStamp(&v20, ValueAtIndex[2]);
      CMSampleBufferGetOutputDuration(&v21, ValueAtIndex[2]);
      dispatch_time_t v8 = (CMSampleBufferRef *)CFArrayGetValueAtIndex(v4, v6 - 1);
      memset(&v19, 0, sizeof(v19));
      CMSampleBufferGetOutputPresentationTimeStamp(&lhs, v8[2]);
      CMSampleBufferGetOutputDuration(&rhs, v8[2]);
      CMTimeAdd(&v19, &lhs, &rhs);
      CMTime time2 = v19;
      CMTime v14 = v20;
      CMTimeSubtract(&time1, &time2, &v14);
      CMTime v21 = time1;
    }
  }
  int v9 = *(_DWORD *)(DerivedStorage + 52) & 0x1D;
  int v10 = *(_DWORD *)(DerivedStorage + 76);
  int v11 = *(_DWORD *)(DerivedStorage + 88);
  if (v9 == 1)
  {
    CMTime time1 = v21;
    CMTime time2 = *(CMTime *)(DerivedStorage + 40);
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      *(_DWORD *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x290], 8) = 2;
      if (!v4) {
        return;
      }
      goto LABEL_16;
    }
  }
  if ((v10 & 0x1D) != 1
    || ((time1 = v21, time2 = *(CMTime *)(DerivedStorage + 64), int32_t v12 = CMTimeCompare(&time1, &time2), v12 < 0)
      ? (int v13 = 1)
      : (int v13 = 3),
        v12 < 0 && v9 != 1))
  {
    int v13 = 0;
  }
  *(_DWORD *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x290], 8) = v13;
  if (v11 == 2) {
    *(unsigned char *)(DerivedStorage + 120) = 0;
  }
  if (v4) {
LABEL_16:
  }
    CFRelease(v4);
}

CMBlockBufferRef dq_EnqueueSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return (CMBlockBufferRef)4294951506;
  }
  int v5 = (void *)DerivedStorage;
  CMBlockBufferRef result = CMSampleBufferGetDataBuffer(a2);
  if (result)
  {
    MEMORY[0x19970E290](*v5);
    uint64_t v7 = v5[3];
    if (FigDataQueueBufferInfo_GetTypeID_sRegisterFigDataQueueBufferInfoTypeOnce != -1) {
      dispatch_once(&FigDataQueueBufferInfo_GetTypeID_sRegisterFigDataQueueBufferInfoTypeOnce, &__block_literal_global_86);
    }
    uint64_t Instance = (void *)_CFRuntimeCreateInstance();
    Instance[2] = CFRetain(a2);
    Instance[3] = v7;
    CFArrayRef v9 = (const __CFArray *)v5[1];
    if (v9)
    {
      CFIndex Count = CFArrayGetCount(v9);
      CFArrayRef v9 = (const __CFArray *)v5[1];
    }
    else
    {
      CFIndex Count = 0;
    }
    v17.location = 0;
    v17.size_t length = Count;
    CFIndex v11 = CFArrayBSearchValues(v9, v17, Instance, (CFComparatorFunction)FigDataQueueBufferInfo_compareOutputPTS, 0);
    CFIndex v12 = v11;
    if (v11 >= Count) {
      CFIndex v13 = Count;
    }
    else {
      CFIndex v13 = v11;
    }
    CFArrayInsertValueAtIndex((CFMutableArrayRef)v5[1], v13, Instance);
    if (Count > v12)
    {
      CFArrayGetValueAtIndex((CFArrayRef)v5[1], v13 + 1);
      if (FigCFEqual()) {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)v5[1], v13 + 1);
      }
    }
    dq_Prune(a1);
    uint64_t v14 = 0;
    memset(&timeOut, 0, sizeof(timeOut));
    CMTimebaseGetTimeAndRate((CMTimebaseRef)v5[2], &timeOut, (Float64 *)&v14);
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      CMTime time = timeOut;
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
    CFRelease(Instance);
    MEMORY[0x19970E2B0](*v5);
    return 0;
  }
  return result;
}

uint64_t dq_GetWaterLevelState(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  dq_UpdateWaterLevelState(a1);
  uint64_t v3 = *((unsigned int *)DerivedStorage + 22);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v3;
}

uint64_t dq_InstallLowWaterTrigger(const void *a1, uint64_t a2, const void *a3, NSObject *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFArrayRef v9 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    if (v9[12] || (*((_DWORD *)v9 + 13) & 0x1D) != 1)
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    else
    {
      v9[12] = a2;
      if (a3) {
        CFTypeRef v10 = CFRetain(a3);
      }
      else {
        CFTypeRef v10 = 0;
      }
      v9[13] = v10;
      if (a4) {
        dispatch_retain(a4);
      }
      v9[14] = a4;
      dq_EvaluateAndFireLWMTriggerCallback(a1);
      uint64_t v11 = 0;
    }
    MEMORY[0x19970E2B0](*v9);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dq_RemoveLowWaterTrigger()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (DerivedStorage[12])
  {
    DerivedStorage[12] = 0;
    CFArrayRef v1 = (const void *)DerivedStorage[13];
    if (v1)
    {
      CFRelease(v1);
      DerivedStorage[13] = 0;
    }
    CFTypeID v2 = DerivedStorage[14];
    if (v2)
    {
      dispatch_release(v2);
      uint64_t v3 = 0;
      DerivedStorage[14] = 0;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v3;
}

uint64_t dq_Flush(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  ++DerivedStorage[3];
  dq_Prune(a1);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  uint64_t v4 = DerivedStorage[4];
  if (v4 && (int v5 = *(opaqueCMSampleBuffer **)(v4 + 16)) != 0)
  {
    memset(&v12, 0, sizeof(v12));
    CMSampleBufferGetOutputPresentationTimeStamp(&v12, v5);
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time = v12;
    Float64 Seconds = CMTimeGetSeconds(&time);
    dispatch_time_t v8 = (void *)CFStringCreateWithFormat(v6, 0, @"lastSampledBuffer->pts: %1.3f", *(void *)&Seconds);
  }
  else
  {
    dispatch_time_t v8 = (void *)CFRetain(@"lastSampledBuffer: NULL");
  }
  CFArrayRef v9 = v8;
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (v3) {
    CFRelease(v3);
  }
  if (v9) {
    CFRelease(v9);
  }
  return 0;
}

uint64_t dq_CopySampleBufferForTime(const void *a1, CMTime *a2, uint64_t a3, CMSampleBufferRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v38 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v37 = v38;
  __int16 v36 = 0;
  uint64_t v8 = 4294951506;
  if (!a4 || (a2->flags & 1) == 0) {
    return v8;
  }
  CFArrayRef v9 = (void *)DerivedStorage;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  MEMORY[0x19970E290](*v9);
  if (v9[2])
  {
    HostTimeClocCFIndex k = CMClockGetHostTimeClock();
    uint64_t v11 = (const void *)v9[2];
    *(_OWORD *)&time.start.uint64_t value = *(_OWORD *)&a2->value;
    time.start.CMTimeEpoch epoch = a2->epoch;
    CMSyncConvertTime(&v38, &time.start, HostTimeClock, v11);
    CMTime v12 = (OpaqueCMTimebase *)v9[2];
    if (v12)
    {
      float Rate = CMTimebaseGetRate(v12);
      goto LABEL_8;
    }
  }
  else
  {
    CMTime v38 = *a2;
  }
  float Rate = 0.0;
LABEL_8:
  uint64_t v14 = 0;
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = (const __CFArray *)v9[1];
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex((CFArrayRef)v9[1], i);
    memset(&time, 0, 24);
    CMSampleBufferGetOutputPresentationTimeStamp(&time.start, ValueAtIndex[2]);
    if ((CMSampleBufferRef)v9[3] == ValueAtIndex[3])
    {
      if (Rate >= 0.0)
      {
        CMTime time1 = v38;
        CMTime time2 = time.start;
        if (CMTimeCompare(&time1, &time2) >= 0) {
          uint64_t v14 = ValueAtIndex;
        }
      }
      else
      {
        CMTime time1 = v38;
        CMTime time2 = time.start;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          uint64_t v14 = ValueAtIndex;
          break;
        }
      }
    }
  }
  if (HIBYTE(v36))
  {
    if (v14)
    {
      CMSampleBufferRef v18 = v14[2];
      if (!v18)
      {
LABEL_23:
        uint64_t v8 = 0;
        *a4 = v18;
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v23 = v9[4];
      if (!v23) {
        goto LABEL_50;
      }
      CMSampleBufferRef v18 = *(CMSampleBufferRef *)(v23 + 16);
      if (!v18) {
        goto LABEL_23;
      }
    }
    CMSampleBufferRef v18 = (CMSampleBufferRef)CFRetain(v18);
    goto LABEL_23;
  }
  CMTime v19 = (const void *)v9[4];
  if (v14)
  {
    v9[4] = v14;
    CFRetain(v14);
    if (v19) {
      CFRelease(v19);
    }
    CMSampleBufferGetOutputPresentationTimeStamp(&v37, v14[2]);
    for (CFIndex j = 0; ; ++j)
    {
      CFArrayRef v21 = (const __CFArray *)v9[1];
      if (v21) {
        CFArrayRef v21 = (const __CFArray *)CFArrayGetCount(v21);
      }
      if (j >= (uint64_t)v21)
      {
        if (v9[4]) {
          goto LABEL_42;
        }
LABEL_50:
        uint64_t v8 = 4294951503;
        goto LABEL_51;
      }
      xpc_object_t v22 = (CMSampleBufferRef *)CFArrayGetValueAtIndex((CFArrayRef)v9[1], j);
      memset(&time, 0, 24);
      CMSampleBufferGetOutputPresentationTimeStamp(&time.start, v22[2]);
      if (Rate <= 0.0)
      {
        if (Rate < 0.0)
        {
          CMTime time1 = v37;
          CMTime time2 = time.start;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
LABEL_36:
            *((_DWORD *)v22 + _Block_object_dispose(&STACK[0x290], 8) = 2;
            continue;
          }
        }
      }
      else
      {
        CMTime time1 = v37;
        CMTime time2 = time.start;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
          goto LABEL_36;
        }
      }
    }
  }
  uint64_t v14 = (CMSampleBufferRef *)v9[4];
  if (!v19) {
    goto LABEL_50;
  }
LABEL_42:
  *((_DWORD *)v14 + _Block_object_dispose(&STACK[0x290], 8) = 1;
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    *(_OWORD *)&time.start.uint64_t value = *(_OWORD *)&a2->value;
    time.start.CMTimeEpoch epoch = a2->epoch;
    CMTimeGetSeconds(&time.start);
    time.CMTime start = v37;
    CMTimeGetSeconds(&time.start);
    kdebug_trace();
  }
  CMSampleBufferRef v24 = v14[2];
  if (v24) {
    CMSampleBufferRef v24 = (CMSampleBufferRef)CFRetain(v24);
  }
  *a4 = v24;
  memset(&v33, 0, sizeof(v33));
  CMSampleBufferGetOutputPresentationTimeStamp(&v33, v14[2]);
  memset(&v32, 0, sizeof(v32));
  CMSampleBufferGetOutputDuration(&v32, v14[2]);
  memset(&v31, 0, sizeof(v31));
  time.CMTime start = v33;
  *(_OWORD *)&time1.uint64_t value = kDefaultNonAlignedSBuf;
  time1.CMTimeEpoch epoch = 0;
  CMTimeSubtract(&start, &time.start, &time1);
  *(_OWORD *)&time.start.uint64_t value = kDefaultNonAlignedSBuf;
  time.start.CMTimeEpoch epoch = 0;
  CMTimeMultiply(&rhs, &time.start, 2);
  time.CMTime start = v32;
  CMTimeAdd(&duration, &time.start, &rhs);
  CMTimeRangeMake(&v31, &start, &duration);
  CMTimeRange time = v31;
  CMTime time1 = v38;
  if (!CMTimeRangeContainsTime(&time, &time1))
  {
    int v25 = (const void *)FigCFCopyCompactDescription();
    CFRelease(v25);
  }
  dq_EvaluateAndFireLWMTriggerCallback(a1);
  uint64_t v8 = 0;
LABEL_51:
  MEMORY[0x19970E2B0](*v9);
  return v8;
}

uint64_t FigDataQueueBufferInfo_compareOutputPTS(uint64_t a1, uint64_t a2)
{
  CFTypeID v2 = *(opaqueCMSampleBuffer **)(a1 + 16);
  uint64_t v3 = *(opaqueCMSampleBuffer **)(a2 + 16);
  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetOutputPresentationTimeStamp(&v8, v2);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputPresentationTimeStamp(&v7, v3);
  CMTime time1 = v8;
  CMTime v5 = v7;
  return CMTimeCompare(&time1, &v5);
}

void *FigDataQueueBufferInfo_Init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void FigDataQueueBufferInfo_Finalize(uint64_t a1)
{
  CFTypeID v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t FigDataQueueBufferInfo_Equal(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigCFEqual();
  if (result) {
    return *(void *)(a1 + 24) == *(void *)(a2 + 24);
  }
  return result;
}

CFHashCode FigDataQueueBufferInfo_Hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef FigDataQueueBufferInfo_CopyDebugDesc(uint64_t a1)
{
  if (!a1) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[BufferInfo %p]", 0);
  }
  CFTypeID v2 = *(opaqueCMSampleBuffer **)(a1 + 16);
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, v2);
  uint64_t v3 = *(int *)(a1 + 32);
  if (v3 > 2) {
    uint64_t v4 = "Unknown";
  }
  else {
    uint64_t v4 = off_1E57A5C48[v3];
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = v9;
  Float64 Seconds = CMTimeGetSeconds(&time);
  return CFStringCreateWithFormat(v6, 0, @"[%p] sbuf:%p pts:%.5f gen=%llu state=%s ", a1, v2, *(void *)&Seconds, *(void *)(a1 + 24), v4);
}

uint64_t FigVirtualDisplaySourceScreenCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (FigVirtualFramebufferServerLivesInMediaProcess())
  {
    return FigVirtualFramebufferServerSourceScreenCreateIOS(a1, a2, a3);
  }
  else
  {
    return FigVirtualFramebufferClientSourceScreenCreateIOS(a1, a2, a3);
  }
}

uint64_t FigVirtualDisplaySourceScreenGetCurrent()
{
  return 0;
}

uint64_t FigHLSPersistentStoreGetClassID()
{
  return sFigPersistentStoreClassID;
}

uint64_t RegisterFigHLSPersistentStoreBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigHLSPersistentStoreGetTypeID()
{
  MEMORY[0x19970EE10](&FigHLSPersistentStoreGetClassID_sRegisterFigPersistentStoreBaseTypeOnce, RegisterFigHLSPersistentStoreBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigHLSPersistentStoreCreateAtURL(const void *a1, uint64_t a2, const __CFDictionary *a3, int a4, void *a5)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a5 || FigCFURLIsLocalResource() != 1) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970EE10](&FigHLSPersistentStoreGetClassID_sRegisterFigPersistentStoreBaseTypeOnce, RegisterFigHLSPersistentStoreBaseType);
  uint64_t v10 = CMDerivedObjectCreate();
  if (v10) {
    return v10;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFArrayRef Value = CFDictionaryGetValue(a3, @"HLSStoreClientAuditToken");
    if (Value)
    {
      CFDataRef v13 = (const __CFData *)CFRetain(Value);
      *(void *)(DerivedStorage + 144) = v13;
      if (v13)
      {
        *(_OWORD *)uint64_t buffer = 0u;
        long long v74 = 0u;
        if (CFDataGetLength(v13) != 32
          || (CFDataRef v14 = *(const __CFData **)(DerivedStorage + 144),
              v79.size_t length = CFDataGetLength(v14),
              v79.location = 0,
              CFDataGetBytes(v14, v79, buffer),
              long long v15 = v74,
              *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)buffer,
              *(_OWORD *)(DerivedStorage + 176) = v15,
              FigServer_GetClientPIDFromAuditToken())
          && FigServer_IsWritableFileOpeningOrCreationPermittedForAuditToken() != 1)
        {
          uint64_t BootFromFile = FigSignalErrorAt();
          if (BootFromFile) {
            return BootFromFile;
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
      *(void *)(DerivedStorage + 144) = 0;
    }
    CMTime v16 = CFDictionaryGetValue(a3, @"HLSStoreClientBundleIdentifier");
    if (v16) {
      CMTime v16 = CFRetain(v16);
    }
    *(void *)(DerivedStorage + 152) = v16;
  }
LABEL_16:
  *(void *)(DerivedStorage + 224) = FigSimpleMutexCreate();
  if (a1) {
    CFTypeRef v17 = CFRetain(a1);
  }
  else {
    CFTypeRef v17 = 0;
  }
  *(void *)(DerivedStorage + 104) = v17;
  *(void *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x290], 8) = 0;
  *(void *)(DerivedStorage + 120) = FigReadWriteLockCreate();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CMTime v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CMTime v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x290], 8) = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(void *)(DerivedStorage + 56) = CFDictionaryCreateMutable(v21, 0, v19, v20);
  CFAllocatorRef v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(void *)(DerivedStorage + 20_Block_object_dispose(&STACK[0x290], 8) = CFDictionaryCreateMutable(v22, 0, v19, v20);
  CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(void *)(DerivedStorage + 216) = CFDictionaryCreateMutable(v23, 0, v19, v20);
  *(unsigned char *)(DerivedStorage + 136) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  *(unsigned char *)(DerivedStorage + 136) = 0;
  if (!*(void *)(DerivedStorage + 56)) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(DerivedStorage + 112) = a4 == 1;
  CMSampleBufferRef v24 = (const __CFURL **)(DerivedStorage + 8);
  uint64_t v10 = FigFileConvertURLToAbsoluteAndMarkAsDirectory();
  if (v10) {
    return v10;
  }
  CFAllocatorRef v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
  unsigned int v26 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v27 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  *(void *)(DerivedStorage + 96) = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v28, 0, v26, v27);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 96), @"Default", Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFURLRef v30 = *v24;
  if (!FigCFURLDoesDirectoryExist()) {
    goto LABEL_36;
  }
  CFAllocatorRef v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v32 = CFURLCreateCopyAppendingPathComponent(v31, v30, @"root.xml", 0);
  if (!v32)
  {
    FigSignalErrorAt();
    goto LABEL_36;
  }
  CFURLRef v33 = v32;
  CFAllocatorRef v34 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v35 = CFURLCreateCopyAppendingPathComponent(v34, v30, @"boot.xml", 0);
  if (!v35)
  {
    FigSignalErrorAt();
    CFRelease(v33);
    goto LABEL_36;
  }
  CFURLRef v36 = v35;
  BOOL v37 = FigFileDoesFileExist() && FigFileDoesFileExist() != 0;
  CFRelease(v33);
  CFRelease(v36);
  if (!v37)
  {
LABEL_36:
    if (*(unsigned char *)(DerivedStorage + 112))
    {
      CFURLRef v39 = *v24;
      CFTypeRef v76 = 0;
      CFURLRef url = 0;
      CFTypeRef v75 = 0;
      CFAllocatorRef v40 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFStringRef v41 = CFStringCreateWithCString(v40, "MoviePackage", 0x8000100u);
      if (!v41)
      {
        uint64_t BootFromFile = FigSignalErrorAt();
        CFURLRef v49 = 0;
        CFURLRef v46 = 0;
        goto LABEL_75;
      }
      CFStringRef v42 = v41;
      TempDirectorCGFloat y = FigFileCreateTempDirectory();
      if (!TempDirectory)
      {
        int v44 = FigDirectoryEnableDirStatsTracking();
        if (v44 != -17916 && v44)
        {
          TempDirectorCGFloat y = FigSignalErrorAt();
        }
        else
        {
          FigGetAllocatorForMedia();
          TempDirectorCGFloat y = FigCreateBlockBufferWithCFString();
          if (!TempDirectory)
          {
            CFAllocatorRef v45 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFURLRef v46 = CFURLCreateCopyAppendingPathComponent(v45, url, @"root.xml", 0);
            if (!v46
              || FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)v76, 0x1EE552798, v46))
            {
              BlockBufferWithCFCFStringRef String = FigSignalErrorAt();
            }
            else
            {
              FigGetAllocatorForMedia();
              BlockBufferWithCFCFStringRef String = FigCreateBlockBufferWithCFString();
              if (!BlockBufferWithCFString)
              {
                CFAllocatorRef v48 = (const __CFAllocator *)FigGetAllocatorForMedia();
                CFURLRef v49 = CFURLCreateCopyAppendingPathComponent(v48, url, @"boot.xml", 0);
                if (!v49
                  || FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)v75, 0x1EE552798, v49))
                {
                  uint64_t BootFromFile = FigSignalErrorAt();
                }
                else
                {
                  uint64_t BootFromFile = FigFileRename();
                  if (*__error() == 18)
                  {
                    *(void *)uint64_t buffer = 0;
                    CFArrayRef v78 = 0;
                    if (!FigCFURLDoesDirectoryExist()) {
                      makeDirectoryAtURL();
                    }
                    if (FigCFURLDoesDirectoryExist())
                    {
                      uint64_t v51 = FigFileForkOpenMainByCFURL();
                      if (v51 || (uint64_t v51 = FigFileLock(), v51))
                      {
                        uint64_t BootFromFile = v51;
                        CFURLRef v53 = 0;
                        goto LABEL_56;
                      }
                      CFAllocatorRef v52 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      CFURLRef v53 = CFURLCreateCopyAppendingPathComponent(v52, v39, @"root.xml", 0);
                      if (v53)
                      {
                        if (FigFileDoesFileExist())
                        {
                          uint64_t BootFromFile = 0;
LABEL_56:
                          CFURLRef v54 = 0;
LABEL_67:
                          FigFileUnlock();
                          FigFileForkClose();
                          if (v53) {
                            CFRelease(v53);
                          }
                          if (v54) {
                            CFRelease(v54);
                          }
                          if (v78) {
                            CFRelease(v78);
                          }
                          goto LABEL_73;
                        }
                        CFAllocatorRef v55 = (const __CFAllocator *)FigGetAllocatorForMedia();
                        CFURLRef v54 = CFURLCreateCopyAppendingPathComponent(v55, v39, @"boot.xml", 0);
                        if (v54)
                        {
                          if (FigFileDoesFileExist())
                          {
                            uint64_t v56 = FigFileDeleteFile();
                            if (v56) {
                              goto LABEL_123;
                            }
                          }
                          FigGetAllocatorForMedia();
                          uint64_t v56 = FigCreateBlockBufferWithCFString();
                          if (v56) {
                            goto LABEL_123;
                          }
                          if (!FigXMLNodeWriteXMLFileFromBlockBufferAtURL(0, 0x1EE552798, v54))
                          {
                            FigGetAllocatorForMedia();
                            uint64_t v56 = FigCreateBlockBufferWithCFString();
                            if (v56)
                            {
LABEL_123:
                              uint64_t BootFromFile = v56;
                              goto LABEL_67;
                            }
                            if (!FigXMLNodeWriteXMLFileFromBlockBufferAtURL(v78, 0x1EE552798, v53))
                            {
                              uint64_t BootFromFile = 0;
                              goto LABEL_67;
                            }
                          }
                        }
                      }
                      else
                      {
                        CFURLRef v54 = 0;
                      }
                    }
                    else
                    {
                      CFURLRef v53 = 0;
                      CFURLRef v54 = 0;
                    }
                    uint64_t v56 = FigSignalErrorAt();
                    goto LABEL_123;
                  }
                }
LABEL_73:
                CFRelease(v42);
                if (url) {
                  CFRelease(url);
                }
LABEL_75:
                if (v75) {
                  CFRelease(v75);
                }
                if (v76) {
                  CFRelease(v76);
                }
                if (v49) {
                  CFRelease(v49);
                }
                if (v46) {
                  CFRelease(v46);
                }
                if (BootFromFile) {
                  return BootFromFile;
                }
                goto LABEL_84;
              }
            }
            uint64_t BootFromFile = BlockBufferWithCFString;
            CFURLRef v49 = 0;
            goto LABEL_73;
          }
        }
      }
      uint64_t BootFromFile = TempDirectory;
      CFURLRef v49 = 0;
      CFURLRef v46 = 0;
      goto LABEL_73;
    }
    return FigSignalErrorAt();
  }
  if (!*(unsigned char *)(DerivedStorage + 112))
  {
    char v38 = 1;
    goto LABEL_85;
  }
LABEL_84:
  char v38 = 2;
LABEL_85:
  uint64_t v10 = lockRoot(DerivedStorage, v38);
  if (v10) {
    return v10;
  }
  uint64_t v57 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v58 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v59 = CFURLCreateCopyAppendingPathComponent(v58, *(CFURLRef *)(v57 + 8), @"root.xml", 0);
  if (!v59)
  {
    uint64_t BootFromFile = FigSignalErrorAt();
LABEL_104:
    if (!BootFromFile)
    {
      uint64_t BootFromFile = loadBootFromFile();
      if (!BootFromFile) {
        *a5 = 0;
      }
    }
    return BootFromFile;
  }
  CFURLRef v60 = v59;
  uint64_t v61 = FigGetAllocatorForMedia();
  int v62 = (uint64_t *)(v57 + 40);
  uint64_t v63 = FigXMLNodeCreateFromURL(v61, (uint64_t)v60, (CFTypeRef *)(v57 + 40));
  if (v63) {
    goto LABEL_98;
  }
  uint64_t v64 = *v62;
  FigXMLNodeGetTag(*v62);
  int v65 = FigCFEqual();
  if (!v64 || !v65)
  {
    FigSignalErrorAt();
    goto LABEL_97;
  }
  Childouble d = FigXMLNodeGetChild(v64, @"MoviePackageType");
  FigXMLNodeGetContentAsCFString((uint64_t)Child);
  if (FigCFEqual() != 1)
  {
LABEL_97:
    uint64_t v63 = FigSignalErrorAt();
LABEL_98:
    uint64_t BootFromFile = v63;
    goto LABEL_103;
  }
  uint64_t v67 = *v62;
  FigXMLNodeGetTag(v67);
  int v68 = FigCFEqual();
  if (!v67 || !v68)
  {
    uint64_t BootFromFile = FigSignalErrorAt();
    if (!BootFromFile) {
      goto LABEL_100;
    }
LABEL_103:
    CFRelease(v60);
    goto LABEL_104;
  }
  __int16 v69 = FigXMLNodeGetChild(v67, @"BootImage");
  ContentAsCFCFStringRef String = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v69);
  if (!ContentAsCFString)
  {
LABEL_100:
    CFTypeRef v71 = 0;
    goto LABEL_101;
  }
  CFTypeRef v71 = CFRetain(ContentAsCFString);
LABEL_101:
  uint64_t BootFromFile = FigFileValidateFileNameIsWithinParentDirectory();
  if (!BootFromFile)
  {
    *(void *)(v57 + 80) = v71;
    goto LABEL_103;
  }
  CFRelease(v60);
  if (v71) {
    CFRelease(v71);
  }
  return BootFromFile;
}

uint64_t lockRoot(uint64_t a1, char a2)
{
  if (!*(void *)(a1 + 128))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 8), @"root.xml", 0);
    if (FigFileDoesFileExist() == 1)
    {
      uint64_t v6 = FigFileForkOpenMainByCFURL();
      if (!v6)
      {
        CMTime v7 = CFURLGetString(v5);
        if (v7) {
          CMTime v7 = CFRetain(v7);
        }
        uint64_t v8 = 0;
        *(void *)(a1 + 24_Block_object_dispose(&STACK[0x290], 8) = v7;
        if (v5) {
          goto LABEL_7;
        }
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    uint64_t v8 = v6;
    if (v5) {
LABEL_7:
    }
      CFRelease(v5);
LABEL_8:
    if (v8) {
      return v8;
    }
  }
  MEMORY[0x19970E910](*(void *)(a1 + 224));
  uint64_t v9 = *(void *)(a1 + 232);
  if (v9)
  {
    blocCFIndex k = MEMORY[0x1E4F143A8];
    uint64_t v17 = 0x40000000;
    CMSampleBufferRef v18 = __fl_logLockStart_block_invoke;
    CMTime v19 = &__block_descriptor_tmp_271;
    uint64_t v20 = v9;
    flockLogger_logBlock(&block);
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    *(void *)(a1 + 232) = flockLogRecord_create(UpTimeNanoseconds, a1, *(void *)(a1 + 128), *(const void **)(a1 + 248));
  }
  MEMORY[0x19970E930](*(void *)(a1 + 224));
  uint64_t v8 = FigFileLock();
  MEMORY[0x19970E910](*(void *)(a1 + 224));
  uint64_t v11 = *(void *)(a1 + 232);
  if (v11)
  {
    if (v8)
    {
      LODWORD(v12) = 0;
      if (*(unsigned char *)(a1 + 240))
      {
        char v13 = 0;
      }
      else
      {
        *(void *)(a1 + 232) = 0;
        char v13 = 1;
      }
    }
    else
    {
      uint64_t v14 = FigGetUpTimeNanoseconds();
      char v13 = 0;
      unint64_t v12 = (v14 - *(void *)(v11 + 32)) / 0x3E8uLL;
      *(unsigned char *)(a1 + 240) = 1;
    }
    blocCFIndex k = MEMORY[0x1E4F143A8];
    uint64_t v17 = 0x40000000;
    CMSampleBufferRef v18 = __fl_logLockAcquisition_block_invoke;
    CMTime v19 = &__block_descriptor_tmp_272;
    uint64_t v20 = v11;
    int v21 = v8;
    int v22 = v12;
    char v23 = v13;
    flockLogger_logBlock(&block);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 224));
  if (v8 == -12206) {
    uint64_t v8 = FigSignalErrorAt();
  }
  if (!v8)
  {
    *(unsigned char *)(a1 + 112) = (a2 & 2) != 0;
    *(unsigned char *)(a1 + 113) = 1;
  }
  return v8;
}

uint64_t loadBootFromFile()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 80))
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v3 = (CFTypeRef *)(DerivedStorage + 48);
    CFTypeID v2 = *(const void **)(DerivedStorage + 48);
    if (v2)
    {
      CFRelease(v2);
      *uint64_t v3 = 0;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v1 + 8), *(CFStringRef *)(v1 + 80), 0);
    if (v5)
    {
      uint64_t v6 = (uint64_t)v5;
      uint64_t v7 = FigGetAllocatorForMedia();
      CFTypeRef v85 = (CFTypeRef)v6;
      uint64_t v8 = FigXMLNodeCreateFromURL(v7, v6, v3);
      if (v8) {
        goto LABEL_94;
      }
      CFTypeRef v9 = *v3;
      CFTypeRef cf = 0;
      if (xmlCopyHLSMoviePackageType((uint64_t)v9, &cf)) {
        int v10 = 0;
      }
      else {
        int v10 = FigCFEqual();
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v10 != 1)
      {
        uint64_t v8 = FigSignalErrorAt();
        goto LABEL_94;
      }
      uint64_t v86 = (uint64_t *)v3;
      StreamList = xmlGetStreamList((uint64_t)*v3);
      if (!StreamList) {
        goto LABEL_22;
      }
      uint64_t v12 = (uint64_t)StreamList;
      if ((uint64_t)FigXMLNodeGetCountOfChildren((uint64_t)StreamList) < 1) {
        goto LABEL_22;
      }
      CFIndex v13 = 0;
      while (1)
      {
        ChildAtIndeCGFloat x = FigXMLNodeGetChildAtIndex(v12, v13);
        CFStringRef Attribute = (const void *)FigXMLNodeGetAttribute();
        CFStringRef v16 = (const __CFString *)FigXMLNodeGetAttribute();
        CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFURLRef v18 = CFURLCreateCopyAppendingPathComponent(v17, *(CFURLRef *)(v1 + 8), v16, 1u);
        if (!v18) {
          break;
        }
        CFURLRef v19 = v18;
        uint64_t v20 = (const void *)FigXMLNodeGetAttribute();
        int v21 = (const void *)FigXMLNodeGetAttribute();
        if (!ChildAtIndex)
        {
          FigSignalErrorAt();
LABEL_19:
          int v23 = 0;
          goto LABEL_20;
        }
        Childouble d = FigXMLNodeGetChild((uint64_t)ChildAtIndex, @"Complete");
        if (!Child) {
          goto LABEL_19;
        }
        FigXMLNodeGetContentAsCFString((uint64_t)Child);
        int v23 = FigCFEqual();
LABEL_20:
        CMSampleBufferRef v24 = (const void *)addStreamToStreamList(v1, Attribute, v19, v20, v21, v23, 0);
        CFRelease(v19);
        if (v24) {
          goto LABEL_86;
        }
        if (++v13 >= (uint64_t)FigXMLNodeGetCountOfChildren(v12)) {
          goto LABEL_22;
        }
      }
      uint64_t v8 = FigSignalErrorAt();
      if (v8)
      {
LABEL_94:
        CMSampleBufferRef v24 = (const void *)v8;
        goto LABEL_86;
      }
LABEL_22:
      uint64_t value = 0;
      CFTypeRef cf = 0;
      CFAllocatorRef v25 = v86;
      uint64_t v26 = *v86;
      FigXMLNodeGetTag(*v86);
      int v27 = FigCFEqual();
      if (v26 && v27)
      {
        CFAllocatorRef v28 = FigXMLNodeGetChild(v26, @"DataItems");
        if (!v28) {
          goto LABEL_52;
        }
        uint64_t v29 = (uint64_t)v28;
        uint64_t v30 = FigXMLNodeCopyAttributeAsCFString((uint64_t)v28, @"Directory", &cf);
        if (!v30)
        {
          if (!*(void *)(v1 + 32))
          {
            CFAllocatorRef v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
            *(void *)(v1 + 32) = CFURLCreateCopyAppendingPathComponent(v31, *(CFURLRef *)(v1 + 8), (CFStringRef)cf, 1u);
          }
          if ((uint64_t)FigXMLNodeGetCountOfChildren(v29) >= 1)
          {
            CFIndex v32 = 0;
            do
            {
              CFURLRef v33 = FigXMLNodeGetChildAtIndex(v29, v32);
              CFURLRef v34 = *(const __CFURL **)(v1 + 32);
              CFAllocatorRef v35 = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v35, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              BOOL v37 = FigXMLNodeGetChild((uint64_t)v33, @"ID");
              ContentAsCFCFStringRef String = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v37);
              CFDictionarySetValue(Mutable, @"DataItemDescriptorID", ContentAsCFString);
              CFURLRef v39 = FigXMLNodeGetChild((uint64_t)v33, @"Category");
              CFAllocatorRef v40 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v39);
              CFDictionarySetValue(Mutable, @"DataItemDescriptorCategory", v40);
              CFStringRef v41 = FigXMLNodeGetChild((uint64_t)v33, @"Name");
              CFStringRef v42 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v41);
              CFDictionarySetValue(Mutable, @"DataItemDescriptorName", v42);
              unsigned int v43 = FigXMLNodeGetChild((uint64_t)v33, @"DataPath");
              uint64_t v44 = FigXMLNodeGetContentAsCFString((uint64_t)v43);
              if (v44)
              {
                CFStringRef v45 = (const __CFString *)v44;
                CFAllocatorRef v46 = (const __CFAllocator *)FigGetAllocatorForMedia();
                CFURLRef v47 = CFURLCreateWithString(v46, v45, v34);
                CFDictionarySetValue(Mutable, @"DataItemURL", v47);
                CFDictionarySetValue(Mutable, @"DataItemFileName", v45);
              }
              else
              {
                CFURLRef v47 = 0;
              }
              CFAllocatorRef v48 = FigXMLNodeGetChild((uint64_t)v33, @"DescriptorPath");
              uint64_t v49 = FigXMLNodeGetContentAsCFString((uint64_t)v48);
              if (v49)
              {
                CFStringRef v50 = (const __CFString *)v49;
                CFAllocatorRef v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
                CFURLRef v52 = CFURLCreateWithString(v51, v50, v34);
                CFDictionarySetValue(Mutable, @"DataItemDescriptorURL", v52);
                CFDictionarySetValue(Mutable, @"DataItemDescriptorFileName", v50);
              }
              else
              {
                CFURLRef v52 = 0;
              }
              CFURLRef v53 = FigXMLNodeGetChild((uint64_t)v33, @"Role");
              CFURLRef v54 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v53);
              if (v54) {
                CFDictionarySetValue(Mutable, @"DataItemDescriptorRole", v54);
              }
              CFAllocatorRef v55 = FigXMLNodeGetChild((uint64_t)v33, @"kDataItemNetworkURL");
              uint64_t v56 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v55);
              if (v56) {
                CFDictionarySetValue(Mutable, @"DataItemDescriptorNetworkURL", v56);
              }
              if (v47) {
                CFRelease(v47);
              }
              if (v52) {
                CFRelease(v52);
              }
              uint64_t v57 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorID");
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 88), v57, Mutable);
              CFAllocatorRef v58 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorCategory");
              if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v1 + 96), v58, (const void **)&value))
              {
                CFDictionarySetValue((CFMutableDictionaryRef)value, v57, Mutable);
              }
              else
              {
                CFAllocatorRef v59 = (const __CFAllocator *)FigGetAllocatorForMedia();
                uint64_t value = CFDictionaryCreateMutable(v59, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 96), v58, value);
                CFDictionarySetValue((CFMutableDictionaryRef)value, v57, Mutable);
                if (value) {
                  CFRelease(value);
                }
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
              ++v32;
            }
            while (v32 < (uint64_t)FigXMLNodeGetCountOfChildren(v29));
            CMSampleBufferRef v24 = 0;
            CFAllocatorRef v25 = v86;
LABEL_53:
            if (cf) {
              CFRelease(cf);
            }
            if (v24) {
              goto LABEL_86;
            }
            CFTypeRef cf = 0;
            uint64_t v60 = *v25;
            FigXMLNodeGetTag(*v25);
            int v61 = FigCFEqual();
            if (v60 && v61)
            {
              int v62 = FigXMLNodeGetChild(v60, @"InterstitialAssets");
              if (!v62)
              {
LABEL_83:
                CMSampleBufferRef v24 = 0;
                goto LABEL_84;
              }
              uint64_t v63 = (uint64_t)v62;
              uint64_t v64 = FigXMLNodeCopyAttributeAsCFString((uint64_t)v62, @"Directory", &cf);
              if (!v64)
              {
                if (!*(void *)(v1 + 200))
                {
                  CFAllocatorRef v65 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  *(void *)(v1 + 200) = CFURLCreateCopyAppendingPathComponent(v65, *(CFURLRef *)(v1 + 8), (CFStringRef)cf, 1u);
                }
                if ((uint64_t)FigXMLNodeGetCountOfChildren(v63) >= 1)
                {
                  CFIndex v66 = 0;
                  while (1)
                  {
                    uint64_t v67 = FigXMLNodeGetChildAtIndex(v63, v66);
                    CFStringRef Tag = (const __CFString *)FigXMLNodeGetTag((uint64_t)v67);
                    if (CFEqual(Tag, @"InterstitialAsset")) {
                      break;
                    }
                    if (CFStringCompare(Tag, @"InterstitialAssetList", 0)) {
                      goto LABEL_77;
                    }
                    if (!v67) {
                      goto LABEL_81;
                    }
                    CFAllocatorRef v69 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    CFMutableDictionaryRef v70 = CFDictionaryCreateMutable(v69, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (!v70) {
                      goto LABEL_81;
                    }
                    CFTypeRef v71 = v70;
                    uint64_t v72 = FigXMLNodeGetChild((uint64_t)v67, @"NetworkURL");
                    uint64_t v73 = FigXMLNodeGetChild((uint64_t)v67, @"PathToLocalCopy");
                    if (v72 && (uint64_t v74 = (uint64_t)v73) != 0)
                    {
                      CFTypeRef v75 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v72);
                      CFDictionarySetValue(v71, @"InterstitialAssetListNetworkURL", v75);
                      CFStringRef v76 = (const __CFString *)FigXMLNodeGetContentAsCFString(v74);
                      CFAllocatorRef v77 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      CMSampleBufferRef v24 = CFURLCreateWithString(v77, v76, *(CFURLRef *)(v1 + 200));
                      CFDictionarySetValue(v71, @"InterstitialAssetListFileName", v24);
                      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 216), v76, v71);
                      if (v24)
                      {
                        CFRelease(v24);
                        CMSampleBufferRef v24 = 0;
                      }
                    }
                    else
                    {
                      CMSampleBufferRef v24 = (const void *)FigSignalErrorAt();
                    }
                    CFRelease(v71);
                    if (v24) {
                      goto LABEL_84;
                    }
LABEL_77:
                    if (++v66 >= (uint64_t)FigXMLNodeGetCountOfChildren(v63)) {
                      goto LABEL_83;
                    }
                  }
                  if (v67)
                  {
                    CFArrayRef v78 = FigXMLNodeGetChild((uint64_t)v67, @"NetworkURL");
                    CFRange v79 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v78);
                    CMFormatDescriptionRef v80 = FigXMLNodeGetChild((uint64_t)v67, @"PathToLocalCopy");
                    CFStringRef v81 = (const __CFString *)FigXMLNodeGetContentAsCFString((uint64_t)v80);
                    CFAllocatorRef v82 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    CFURLRef v83 = CFURLCreateWithString(v82, v81, *(CFURLRef *)(v1 + 200));
                    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 208), v79, v83);
                    if (v83) {
                      CFRelease(v83);
                    }
                    goto LABEL_77;
                  }
LABEL_81:
                  CMSampleBufferRef v24 = (const void *)FigSignalErrorAt();
                  if (v24) {
                    goto LABEL_84;
                  }
                  goto LABEL_77;
                }
                goto LABEL_83;
              }
            }
            else
            {
              uint64_t v64 = FigSignalErrorAt();
            }
            CMSampleBufferRef v24 = (const void *)v64;
LABEL_84:
            if (cf) {
              CFRelease(cf);
            }
LABEL_86:
            CFRelease(v85);
            return (uint64_t)v24;
          }
LABEL_52:
          CMSampleBufferRef v24 = 0;
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v30 = FigSignalErrorAt();
      }
      CMSampleBufferRef v24 = (const void *)v30;
      goto LABEL_53;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigHLSPersistentStoreRemovePersistentStore(uint64_t a1, const __CFDictionary *a2)
{
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_25;
  }
  CFAllocatorRef AllocatorForMedia = (const void *)FigGetAllocatorForMedia();
  uint64_t v5 = FigHLSPersistentStoreCreateAtURL(AllocatorForMedia, a1, a2, 1, &cf);
  if (v5)
  {
LABEL_25:
    uint64_t v21 = v5;
    goto LABEL_27;
  }
  CFTypeRef v6 = cf;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(uint64_t (**)(CFTypeRef, CFArrayRef *))(v8 + 24);
  if (v9)
  {
    uint64_t v5 = v9(v6, &theArray);
    if (!v5)
    {
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          CFIndex v12 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v12);
            CFTypeRef v14 = cf;
            uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v16 = v15 ? v15 : 0;
            CFAllocatorRef v17 = *(uint64_t (**)(CFTypeRef, const void *))(v16 + 88);
            if (!v17) {
              goto LABEL_26;
            }
            uint64_t v5 = v17(v14, ValueAtIndex);
            if (v5) {
              goto LABEL_25;
            }
          }
          while (v11 != ++v12);
        }
      }
      CFTypeRef v18 = cf;
      if (!cf) {
        return 4294954516;
      }
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      int v22 = *(uint64_t (**)(CFTypeRef))(v20 + 24);
      if (!v22) {
        goto LABEL_26;
      }
      uint64_t v5 = v22(v18);
      if (!v5) {
        uint64_t v5 = FigFileDeleteRecursive();
      }
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v21 = 4294954514;
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

CFStringRef FigHLSPersistentStoreCopyFormattingDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigHLSPersistentStore %p]", a1);
}

uint64_t HLSPersistentStore_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    return persistentStore_Invalidate(DerivedStorage);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    persistentStore_Invalidate(DerivedStorage);
    FigReadWriteLockDestroy();
    *(void *)(v1 + 120) = 0;
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(v1 + 224) = 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

CFStringRef persistentStore_CopyDebugDescription()
{
  CFURLRef v0 = *(const __CFURL **)(CMBaseObjectGetDerivedStorage() + 8);
  if (v0) {
    CFStringRef PathComponent = CFURLCopyLastPathComponent(v0);
  }
  else {
    CFStringRef PathComponent = 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFStringRef v3 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigHLSPersistentStore]{%@}", PathComponent);
  if (PathComponent) {
    CFRelease(PathComponent);
  }
  return v3;
}

uint64_t persistentStore_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFStringRef **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = FigReadWriteLockLockForRead();
    if (v9) {
      goto LABEL_42;
    }
    if (!a2 || !a4 || *(unsigned char *)v8)
    {
      uint64_t v9 = FigSignalErrorAt();
      goto LABEL_42;
    }
    if (CFEqual(a2, @"MasterPlaylistNetworkURL"))
    {
      uint64_t v10 = *(void *)(v8 + 48);
      int v23 = 0;
      CMSampleBufferRef v24 = 0;
      xmlGetMasterPlaylistNode(v10, &v24);
      if (!v24 || (Childouble d = FigXMLNodeGetChild((uint64_t)v24, @"NetworkURL")) == 0)
      {
        CFIndex v12 = 0;
        goto LABEL_12;
      }
      uint64_t v9 = FigXMLNodeCopyContentAsCFString((uint64_t)Child, &v23);
      if (!v9)
      {
        CFIndex v12 = v23;
LABEL_12:
        uint64_t v13 = 0;
LABEL_13:
        *a4 = v12;
LABEL_23:
        FigReadWriteLockUnlockForRead();
        return v13;
      }
LABEL_42:
      uint64_t v13 = v9;
      goto LABEL_23;
    }
    if (CFEqual(a2, @"HLSPersistentStoreURL"))
    {
      ContentAsCFCFStringRef String = *(CFStringRef **)(v8 + 8);
      if (!ContentAsCFString) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    if (CFEqual(a2, @"MoviePackageBootVersion"))
    {
      uint64_t v15 = *(void *)(v8 + 48);
      FigXMLNodeGetTag(v15);
      int v16 = FigCFEqual();
      if (v15 && v16)
      {
        CFAllocatorRef v17 = FigXMLNodeGetChild(v15, @"Version");
        ContentAsCFCFStringRef String = (CFStringRef *)FigXMLNodeGetContentAsCFString((uint64_t)v17);
        if (!ContentAsCFString)
        {
LABEL_22:
          uint64_t v13 = 0;
          *a4 = ContentAsCFString;
          goto LABEL_23;
        }
LABEL_21:
        ContentAsCFCFStringRef String = (CFStringRef *)CFRetain(ContentAsCFString);
        goto LABEL_22;
      }
    }
    else
    {
      if (!CFEqual(a2, @"MoviePackageRootVersion"))
      {
        if (CFEqual(a2, @"MoviePackageBootType"))
        {
          CMSampleBufferRef v24 = 0;
          uint64_t v22 = xmlCopyHLSMoviePackageType(*(void *)(v8 + 48), &v24);
        }
        else
        {
          if (!CFEqual(a2, @"MoviePackageRootType"))
          {
            if (!CFEqual(a2, @"DataDirectory"))
            {
              uint64_t v13 = 4294954512;
              goto LABEL_23;
            }
            ContentAsCFCFStringRef String = (CFStringRef *)CFURLCreateCopyAppendingPathComponent(a3, *(CFURLRef *)(v8 + 8), @"Data", 1u);
            goto LABEL_22;
          }
          CMSampleBufferRef v24 = 0;
          uint64_t v22 = xmlCopyRootType(*(void *)(v8 + 40), &v24);
        }
        uint64_t v13 = v22;
        if (v22) {
          goto LABEL_23;
        }
        CFIndex v12 = v24;
        goto LABEL_13;
      }
      uint64_t v19 = *(void *)(v8 + 40);
      FigXMLNodeGetTag(v19);
      int v20 = FigCFEqual();
      if (v19 && v20)
      {
        uint64_t v21 = FigXMLNodeGetChild(v19, @"Version");
        ContentAsCFCFStringRef String = (CFStringRef *)FigXMLNodeGetContentAsCFString((uint64_t)v21);
        goto LABEL_22;
      }
    }
    uint64_t v13 = FigSignalErrorAt();
    if (v13) {
      goto LABEL_23;
    }
    ContentAsCFCFStringRef String = 0;
    goto LABEL_22;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForWrite();
    if (v7) {
      return v7;
    }
    if (a2 && !*(unsigned char *)v6 && *(unsigned char *)(v6 + 112) == 1)
    {
      if (!CFEqual(a2, @"MasterPlaylistNetworkURL"))
      {
        uint64_t v12 = 4294954512;
        goto LABEL_27;
      }
      if (a3)
      {
        CFTypeID v8 = CFGetTypeID(a3);
        if (v8 == CFStringGetTypeID())
        {
          uint64_t v9 = *(void *)(v6 + 48);
          CFTypeRef v18 = 0;
          xmlGetMasterPlaylistNode(v9, &v18);
          if (v18)
          {
            Childouble d = FigXMLNodeGetChild((uint64_t)v18, @"NetworkURL");
            if (Child)
            {
              uint64_t v11 = FigXMLNodeContentSetCFString((uint64_t)Child, a3);
              goto LABEL_12;
            }
            uint64_t v12 = xmlAddTargetNode((uint64_t)v18, a3);
          }
          else
          {
            CFTypeRef cf = 0;
            FigXMLNodeGetTag(v9);
            int v14 = FigCFEqual();
            if (!v9 || !v14)
            {
              uint64_t v11 = FigSignalErrorAt();
LABEL_12:
              uint64_t v12 = v11;
              if (v11) {
                goto LABEL_27;
              }
              goto LABEL_25;
            }
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            uint64_t v12 = FigXMLNodeCreateChildNode(AllocatorForMedia, v9, @"MasterPlaylist", &cf);
            CFTypeRef v16 = cf;
            if (!v12)
            {
              uint64_t v12 = xmlAddTargetNode((uint64_t)cf, a3);
              CFTypeRef v16 = cf;
            }
            if (v16)
            {
              CFRelease(v16);
              if (v12) {
                goto LABEL_27;
              }
              goto LABEL_25;
            }
          }
          if (!v12)
          {
LABEL_25:
            uint64_t v13 = writeBoot();
            goto LABEL_26;
          }
LABEL_27:
          FigReadWriteLockUnlockForWrite();
          return v12;
        }
      }
    }
    uint64_t v13 = FigSignalErrorAt();
LABEL_26:
    uint64_t v12 = v13;
    goto LABEL_27;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_Invalidate(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = FigReadWriteLockLockForWrite();
    if (result) {
      return result;
    }
    if (!*(unsigned char *)a1)
    {
      *(unsigned char *)a1 = 1;
      if (*(void *)(a1 + 128))
      {
        unlockRoot(a1);
        FigFileForkClose();
        *(void *)(a1 + 12_Block_object_dispose(&STACK[0x290], 8) = 0;
        CFStringRef v3 = *(const void **)(a1 + 248);
        if (v3)
        {
          CFRelease(v3);
          *(void *)(a1 + 24_Block_object_dispose(&STACK[0x290], 8) = 0;
        }
      }
      uint64_t v4 = *(const void **)(a1 + 8);
      if (v4) {
        CFRelease(v4);
      }
      uint64_t v5 = *(const void **)(a1 + 24);
      if (v5) {
        CFRelease(v5);
      }
      uint64_t v6 = *(const void **)(a1 + 32);
      if (v6) {
        CFRelease(v6);
      }
      uint64_t v7 = *(const void **)(a1 + 48);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x290], 8) = 0;
      }
      CFTypeID v8 = *(const void **)(a1 + 40);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a1 + 40) = 0;
      }
      uint64_t v9 = *(const void **)(a1 + 72);
      if (v9) {
        CFRelease(v9);
      }
      uint64_t v10 = *(const void **)(a1 + 64);
      if (v10) {
        CFRelease(v10);
      }
      uint64_t v11 = *(const void **)(a1 + 80);
      if (v11) {
        CFRelease(v11);
      }
      uint64_t v12 = *(const void **)(a1 + 16);
      if (v12) {
        CFRelease(v12);
      }
      uint64_t v13 = *(const void **)(a1 + 56);
      if (v13) {
        CFRelease(v13);
      }
      int v14 = *(const void **)(a1 + 104);
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v15 = *(const void **)(a1 + 144);
      if (v15) {
        CFRelease(v15);
      }
      CFTypeRef v16 = *(const void **)(a1 + 152);
      if (v16) {
        CFRelease(v16);
      }
      CFAllocatorRef v17 = *(const void **)(a1 + 96);
      if (v17) {
        CFRelease(v17);
      }
      CFTypeRef v18 = *(const void **)(a1 + 88);
      if (v18) {
        CFRelease(v18);
      }
      uint64_t v19 = *(const void **)(a1 + 192);
      if (v19) {
        CFRelease(v19);
      }
      int v20 = *(const void **)(a1 + 200);
      if (v20) {
        CFRelease(v20);
      }
      uint64_t v21 = *(const void **)(a1 + 208);
      if (v21) {
        CFRelease(v21);
      }
      uint64_t v22 = *(const void **)(a1 + 216);
      if (v22) {
        CFRelease(v22);
      }
      int v23 = *(const void **)(a1 + 248);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(a1 + 24_Block_object_dispose(&STACK[0x290], 8) = 0;
      }
    }
    FigReadWriteLockUnlockForWrite();
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t unlockRoot(uint64_t a1)
{
  if (!*(void *)(a1 + 128)) {
    goto LABEL_8;
  }
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v3 = FigFileUnlock();
  uint64_t v4 = FigGetUpTimeNanoseconds();
  MEMORY[0x19970E910](*(void *)(a1 + 224));
  uint64_t v5 = *(void **)(a1 + 232);
  if (v5)
  {
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = flockLogRecord_create(v4, a1, *(void *)(a1 + 128), *(const void **)(a1 + 248));
    *(void *)(a1 + 232) = v5;
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t v6 = 0;
  }
  *(unsigned char *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fl_logUnlock_block_invoke;
  block[3] = &__block_descriptor_tmp_105;
  void block[4] = v6;
  void block[5] = v5;
  int v9 = (v4 - UpTimeNanoseconds) / 0x3E8uLL;
  flockLogger_logBlock(block);
LABEL_7:
  MEMORY[0x19970E930](*(void *)(a1 + 224));
  if (!v3)
  {
LABEL_8:
    uint64_t v3 = 0;
    *(_WORD *)(a1 + 112) = 0;
  }
  return v3;
}

void *flockLogRecord_create(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (getFlockLogger_sFlockLoggerInitOnce != -1) {
    dispatch_once(&getFlockLogger_sFlockLoggerInitOnce, &__block_literal_global_87);
  }
  if (!getFlockLogger_sFlockLogger) {
    return 0;
  }
  CFTypeID v8 = malloc_type_calloc(1uLL, 0x60uLL, 0x10E00409CA4706DuLL);
  v8[3] = a3;
  v8[4] = a1;
  void v8[2] = a2;
  if (a4) {
    CFTypeRef v9 = CFRetain(a4);
  }
  else {
    CFTypeRef v9 = 0;
  }
  v8[7] = v9;
  v8[5] = FigGetUpTimeNanoseconds() + 5000000000;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = __flockLogRecord_create_block_invoke;
  _OWORD v11[3] = &__block_descriptor_tmp_83_0;
  v11[4] = &getFlockLogger_sFlockLogger;
  void v11[5] = v8;
  dispatch_async((dispatch_queue_t)getFlockLogger_sFlockLogger, v11);
  return v8;
}

void flockLogger_logBlock(dispatch_block_t block)
{
  if (getFlockLogger_sFlockLoggerInitOnce != -1) {
    dispatch_once(&getFlockLogger_sFlockLoggerInitOnce, &__block_literal_global_87);
  }
  CFTypeID v2 = getFlockLogger_sFlockLogger;
  if (getFlockLogger_sFlockLogger)
  {
    dispatch_async(v2, block);
  }
}

uint64_t __fl_logUnlock_block_invoke(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v1 = *(void *)(result + 40);
  if (v2) {
    *(_DWORD *)(v1 + 84) = (v2 - *(void *)(v1 + 32)) / 0x3E8uLL;
  }
  *(_DWORD *)(v1 + 8_Block_object_dispose(&STACK[0x290], 8) = *(_DWORD *)(result + 48);
  *(_DWORD *)(v1 + 64) = 1;
  return result;
}

void __flockLogRecord_create_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 16);
  **(void **)(a1 + 40) = 0;
  *(void *)(*(void *)(a1 + 40) + _Block_object_dispose(&STACK[0x290], 8) = *(void *)(*(void *)(a1 + 32) + 24);
  **(void **)(*(void *)(a1 + 32) + 24) = *(void *)(a1 + 40);
  *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(a1 + 40);
  if (!v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 8);
    dispatch_time_t v3 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  }
}

void __getFlockLogger_block_invoke()
{
  fig_note_initialize_category_with_default_work_cf();
  getFlockLogger_sFlockLogger = (uint64_t)dispatch_queue_create("com.apple.coremedia.logging.flock", 0);
  qword_1E934FD38 = (uint64_t)dispatch_source_create(MEMORY[0x1E4F14490], 0, 2uLL, (dispatch_queue_t)getFlockLogger_sFlockLogger);
  qword_1E934FD40 = 0;
  qword_1E934FD48 = (uint64_t)&qword_1E934FD40;
  qword_1E934FD50 = 0;
  qword_1E934FD58 = (uint64_t)&qword_1E934FD50;
  qword_1E934FD60 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_source_set_timer((dispatch_source_t)qword_1E934FD38, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  dispatch_set_context((dispatch_object_t)qword_1E934FD38, &getFlockLogger_sFlockLogger);
  dispatch_source_set_event_handler_f((dispatch_source_t)qword_1E934FD38, (dispatch_function_t)flockLoggerTimerCallback);
  CFURLRef v0 = qword_1E934FD38;

  dispatch_resume(v0);
}

void flockLoggerTimerCallback()
{
  if (getFlockLogger_sFlockLoggerInitOnce != -1) {
    dispatch_once(&getFlockLogger_sFlockLoggerInitOnce, &__block_literal_global_87);
  }
  int64_t v0 = 60000000000;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v2 = UpTimeNanoseconds;
  uint64_t v3 = qword_1E934FD40;
  if (qword_1E934FD40)
  {
    uint64_t v4 = *(void *)(qword_1E934FD40 + 40);
    if (v4 > UpTimeNanoseconds)
    {
LABEL_8:
      if ((unint64_t)(v4 - UpTimeNanoseconds) <= 0x3B9ACA00) {
        int64_t v0 = 1000000000;
      }
      else {
        int64_t v0 = v4 - UpTimeNanoseconds;
      }
    }
    else
    {
      while (*(_DWORD *)(v3 + 64))
      {
        uint64_t v5 = *(void *)v3;
        uint64_t v6 = *(void **)(v3 + 8);
        if (!*(void *)v3)
        {
          qword_1E934FD48 = *(void *)(v3 + 8);
          *uint64_t v6 = 0;
          *(void *)uint64_t v3 = 0;
          CFTypeRef v9 = (uint64_t *)qword_1E934FD58;
          *(void *)(v3 + _Block_object_dispose(&STACK[0x290], 8) = qword_1E934FD58;
          *CFTypeRef v9 = v3;
          qword_1E934FD58 = v3;
          goto LABEL_24;
        }
        *(void *)(v5 + _Block_object_dispose(&STACK[0x290], 8) = v6;
        **(void **)(v3 + _Block_object_dispose(&STACK[0x290], 8) = v5;
        *(void *)uint64_t v3 = 0;
        uint64_t v7 = (uint64_t *)qword_1E934FD58;
        *(void *)(v3 + _Block_object_dispose(&STACK[0x290], 8) = qword_1E934FD58;
        *uint64_t v7 = v3;
        qword_1E934FD58 = v3;
        uint64_t v4 = *(void *)(v5 + 40);
        uint64_t v3 = v5;
        if (v4 > UpTimeNanoseconds) {
          goto LABEL_8;
        }
      }
      if (dword_1E93514B0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v10 = (const void **)qword_1E934FD50;
      if (qword_1E934FD50)
      {
        do
        {
          flockLogger_Log(v10);
          uint64_t v10 = (const void **)*v10;
        }
        while (v10);
      }
      if (dword_1E93514B0)
      {
        uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1E93514B0)
        {
          uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      uint64_t v13 = (const void **)qword_1E934FD40;
      if (qword_1E934FD40)
      {
        do
        {
          flockLogger_Log(v13);
          uint64_t v13 = (const void **)*v13;
        }
        while (v13);
      }
      if (dword_1E93514B0)
      {
        int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigUserStackshotWithMessage();
      CFDictionaryRemoveAllValues((CFMutableDictionaryRef)qword_1E934FD60);
      int64_t v0 = 3000000000;
    }
  }
LABEL_24:
  uint64_t v15 = (void *)qword_1E934FD50;
  if (qword_1E934FD50)
  {
    uint64_t v16 = v2 - 65000000000;
    do
    {
      if (v15[5] > v16) {
        break;
      }
      CFAllocatorRef v17 = (void *)*v15;
      if (*((_DWORD *)v15 + 16))
      {
        CFTypeRef v18 = (void *)v15[1];
        if (v17)
        {
          v17[1] = v18;
          CFTypeRef v18 = (void *)v15[1];
        }
        else
        {
          qword_1E934FD58 = v15[1];
        }
        *CFTypeRef v18 = v17;
        uint64_t v19 = (const void *)v15[6];
        if (v19)
        {
          CFRelease(v19);
          v15[6] = 0;
        }
        int v20 = (const void *)v15[7];
        if (v20) {
          CFRelease(v20);
        }
        free(v15);
      }
      uint64_t v15 = v17;
    }
    while (v17);
    BOOL v21 = qword_1E934FD50 == 0;
  }
  else
  {
    BOOL v21 = 1;
  }
  uint64_t v22 = qword_1E934FD38;
  if (qword_1E934FD40 || !v21) {
    dispatch_time_t v23 = dispatch_time(0, v0);
  }
  else {
    dispatch_time_t v23 = -1;
  }
  dispatch_source_set_timer(v22, v23, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
}

const void **flockLogger_Log(const void **result)
{
  uint64_t v1 = result;
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  if (result[6]) {
    goto LABEL_7;
  }
  value[0] = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1E934FD60, result[7], (const void **)value))
  {
    uint64_t result = (const void **)value[0];
    if (value[0]) {
      uint64_t result = (const void **)CFRetain(value[0]);
    }
    v1[6] = result;
    if (!result) {
      goto LABEL_6;
    }
  }
  else
  {
    ++dword_1E934FD68;
    Suint64_t Int32 = (const void *)FigCFNumberCreateSInt32();
    v1[6] = SInt32;
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1E934FD60, v1[7], SInt32);
    uint64_t result = (const void **)v1[6];
    if (!result) {
LABEL_6:
    }
      v1[6] = @"<unknown>";
  }
LABEL_7:
  if (dword_1E93514B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return (const void **)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t xmlCopyHLSMoviePackageType(uint64_t a1, void *a2)
{
  if (a2 && (FigXMLNodeGetTag(a1), int v4 = FigCFEqual(), a1) && v4)
  {
    Childouble d = FigXMLNodeGetChild(a1, @"HLSMoviePackageType");
    ContentAsCFCFStringRef String = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
    if (ContentAsCFString) {
      ContentAsCFCFStringRef String = CFRetain(ContentAsCFString);
    }
    *a2 = ContentAsCFString;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t xmlCopyRootType(uint64_t a1, void *a2)
{
  FigXMLNodeGetTag(a1);
  int v4 = FigCFEqual();
  if (a1 && v4)
  {
    Childouble d = FigXMLNodeGetChild(a1, @"MoviePackageType");
    ContentAsCFCFStringRef String = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
    if (ContentAsCFString) {
      ContentAsCFCFStringRef String = CFRetain(ContentAsCFString);
    }
    *a2 = ContentAsCFString;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef *xmlGetMasterPlaylistNode(uint64_t a1, CFStringRef **a2)
{
  FigXMLNodeGetTag(a1);
  int v4 = FigCFEqual();
  uint64_t result = 0;
  if (a1 && v4) {
    uint64_t result = FigXMLNodeGetChild(a1, @"MasterPlaylist");
  }
  if (a2) {
    *a2 = result;
  }
  return result;
}

uint64_t writeBoot()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 8), *(CFStringRef *)(DerivedStorage + 80), 0);
  if (v2)
  {
    CFURLRef v3 = v2;
    uint64_t v4 = FigXMLNodeWriteToFilePath(*(void *)(DerivedStorage + 48), v2);
    CFRelease(v3);
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t xmlAddTargetNode(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v5 = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, @"NetworkURL", &cf);
  if (!v5) {
    uint64_t v5 = FigXMLNodeContentSetCFString((uint64_t)cf, a2);
  }
  uint64_t v6 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t persistentStore_GetAccessLevel(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    uint64_t v4 = (unsigned char *)DerivedStorage;
    *a2 = -1;
    uint64_t v5 = FigReadWriteLockLockForWrite();
    if (v5) {
      return v5;
    }
    if (*v4)
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else if (v4[112])
    {
      uint64_t v6 = 0;
      *a2 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      if (v4[113]) {
        *a2 = 0;
      }
    }
    FigReadWriteLockUnlockForWrite();
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_SetAccessLevel(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = (unsigned char *)DerivedStorage;
    uint64_t v8 = FigReadWriteLockLockForWrite();
    if (v8) {
      return v8;
    }
    if (!*v7)
    {
      switch(a2)
      {
        case -1:
          updatedouble d = unlockRoot((uint64_t)v7);
          goto LABEL_13;
        case 0:
          if (v7[112] == v7[113]) {
            goto LABEL_8;
          }
          goto LABEL_11;
        case 1:
          if (!v7[112])
          {
LABEL_8:
            updatedouble d = updateRootLockOptions(a1, ((a2 == 0) | (2 * (a2 == 1))) | (4 * (a3 != 0)));
LABEL_13:
            uint64_t v10 = updated;
            goto LABEL_14;
          }
LABEL_11:
          uint64_t v10 = 0;
LABEL_14:
          FigReadWriteLockUnlockForWrite();
          return v10;
      }
    }
    updatedouble d = FigSignalErrorAt();
    goto LABEL_13;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyStreamIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = FigReadWriteLockLockForRead();
    if (!v5)
    {
      if (!*(unsigned char *)v4 && *(unsigned char *)(v4 + 113) == 1 && a2)
      {
        *a2 = 0;
        CFDictionaryRef v6 = *(const __CFDictionary **)(v4 + 56);
        if (!v6 || CFDictionaryGetCount(v6) < 1)
        {
          uint64_t v8 = 0;
          goto LABEL_11;
        }
        uint64_t v7 = FigCFDictionaryCopyArrayOfKeys();
        if (v7)
        {
          uint64_t v8 = 0;
          *a2 = v7;
LABEL_11:
          FigReadWriteLockUnlockForRead();
          return v8;
        }
      }
      uint64_t v5 = FigSignalErrorAt();
    }
    uint64_t v8 = v5;
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_GetAndRetainStreamInfoForStreamID(uint64_t a1, const void *a2, const __CFDictionary *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v21 = 0;
  if (DerivedStorage)
  {
    uint64_t v9 = DerivedStorage;
    uint64_t v10 = FigReadWriteLockLockForWrite();
    if (v10) {
      return v10;
    }
    if (*(unsigned char *)v9) {
      goto LABEL_25;
    }
    CFDictionaryRef v11 = *(const __CFDictionary **)(v9 + 56);
    if (!v11)
    {
      uint64_t v18 = 0;
      goto LABEL_15;
    }
    if (a4 && a2 && (CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, a2)) != 0)
    {
      CFArrayRef Value = CFDictionaryGetValue(v12, @"StreamInformationRef");
      CFTypeRef v21 = Value;
      if (Value)
      {
        CFRetain(Value);
LABEL_14:
        uint64_t v18 = 0;
        *a4 = v21;
        goto LABEL_15;
      }
      Streamuint64_t Options = persistentStore_CreateStreamOptions(v9, (__CFDictionary **)&cf, a3);
      if (!StreamOptions)
      {
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        Streamuint64_t Options = FigHLSPersistentStreamInfoCreate(AllocatorForMedia, a2, a1, *(const void **)(v9 + 8), (const __CFDictionary *)cf, &v21);
        if (!StreamOptions)
        {
          CFTypeRef v16 = v21;
          CFAllocatorRef v17 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 56), a2);
          if (v17)
          {
            CFDictionarySetValue(v17, @"StreamInformationRef", v16);
            goto LABEL_14;
          }
          uint64_t v18 = FigSignalErrorAt();
          if (!v18) {
            goto LABEL_14;
          }
LABEL_15:
          FigReadWriteLockUnlockForWrite();
          if (cf) {
            CFRelease(cf);
          }
          return v18;
        }
      }
    }
    else
    {
LABEL_25:
      Streamuint64_t Options = FigSignalErrorAt();
    }
    uint64_t v18 = StreamOptions;
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_SetMasterPlaylist(uint64_t a1, const void *a2, const void *a3, const void *a4, OpaqueCMBlockBuffer *a5)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFDictionaryRef theDict = 0;
  int v11 = FigCFEqual();
  int v12 = FigCFEqual();
  if (DerivedStorage && a5 && a3)
  {
    int v13 = v12;
    uint64_t v14 = FigReadWriteLockLockForWrite();
    if (v14) {
      return v14;
    }
    if (!*DerivedStorage && DerivedStorage[112] == 1 && a2 && v11 | v13)
    {
      copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork((uint64_t)DerivedStorage, @"Playlist", @"DataItemDescriptorRole", (CFTypeRef *)&theDict);
      CFDictionaryRef v15 = theDict;
      if (theDict
        && ((CFArrayRef Value = CFDictionaryGetValue(theDict, @"Master"), v11)
         && Value
         && (uint64_t v17 = removeDataItem(a1, Value), v17)
         || (uint64_t v18 = CFDictionaryGetValue(v15, @"AvailableOfflineMaster")) != 0
         && (uint64_t v17 = removeDataItem(a1, v18), v17)))
      {
        uint64_t v23 = v17;
        FigReadWriteLockUnlockForWrite();
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v19 = a5;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v22 = Mutable;
        if (a4) {
          CFDictionarySetValue(Mutable, @"DataItemDescriptorPropertyListDescriptor", a4);
        }
        if (v11) {
          CFDictionarySetValue(v22, @"DataItemDescriptorRole", @"Master");
        }
        if (v13) {
          CFDictionarySetValue(v22, @"DataItemDescriptorRole", @"AvailableOfflineMaster");
        }
        CFDictionarySetValue(v22, @"DataItemDescriptorCategory", @"Playlist");
        CFDictionarySetValue(v22, @"DataItemDescriptorName", a3);
        CFDictionarySetValue(v22, @"DataItemDescriptorPlaylistType", a2);
        uint64_t v23 = setDataItemWork(a1, v19, v22);
        FigReadWriteLockUnlockForWrite();
        if (!v15) {
          goto LABEL_23;
        }
      }
      CFRelease(v15);
LABEL_23:
      if (v22) {
        CFRelease(v22);
      }
      return v23;
    }
    uint64_t v23 = FigSignalErrorAt();
    FigReadWriteLockUnlockForWrite();
    return v23;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyMasterPlaylist(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, CMBlockBufferRef *a6)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v27 = 0;
  CFDictionaryRef theDict = 0;
  int v12 = FigCFEqual();
  int v13 = FigCFEqual();
  if (!DerivedStorage)
  {
    uint64_t v24 = FigSignalErrorAt();
    goto LABEL_31;
  }
  int v14 = v13;
  uint64_t v15 = FigReadWriteLockLockForRead();
  if (v15) {
    goto LABEL_37;
  }
  if (*DerivedStorage || !a2 || !(v12 | v14))
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_37;
  }
  copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork((uint64_t)DerivedStorage, @"Playlist", @"DataItemDescriptorRole", (CFTypeRef *)&theDict);
  CFDictionaryRef v16 = theDict;
  if (!theDict)
  {
    uint64_t v24 = FigSignalErrorAt();
    FigReadWriteLockUnlockForRead();
    goto LABEL_31;
  }
  if (v12)
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, @"Master");
    if (!v14) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFArrayRef Value = 0;
  if (v14) {
LABEL_9:
  }
    CFArrayRef Value = CFDictionaryGetValue(v16, @"AvailableOfflineMaster");
LABEL_10:
  uint64_t v15 = copyDataItemWork((uint64_t)DerivedStorage, Value, &v27, a6);
  if (!v15)
  {
    uint64_t v18 = CFDictionaryGetValue(v27, @"DataItemDescriptorPropertyListDescriptor");
    uint64_t v19 = CFDictionaryGetValue(v27, @"DataItemDescriptorName");
    int v20 = CFDictionaryGetValue(v27, @"DataItemFileName");
    if (a5)
    {
      if (v18) {
        CFTypeRef v21 = CFRetain(v18);
      }
      else {
        CFTypeRef v21 = 0;
      }
      *a5 = v21;
    }
    if (a3)
    {
      if (v19) {
        CFTypeRef v22 = CFRetain(v19);
      }
      else {
        CFTypeRef v22 = 0;
      }
      *a3 = v22;
    }
    if (a4)
    {
      if (v20) {
        CFTypeRef v23 = CFRetain(v20);
      }
      else {
        CFTypeRef v23 = 0;
      }
      uint64_t v24 = 0;
      *a4 = v23;
    }
    else
    {
      uint64_t v24 = 0;
    }
    goto LABEL_29;
  }
LABEL_37:
  uint64_t v24 = v15;
LABEL_29:
  CFDictionaryRef v25 = theDict;
  FigReadWriteLockUnlockForRead();
  if (v25) {
    CFRelease(v25);
  }
LABEL_31:
  if (v27) {
    CFRelease(v27);
  }
  return v24;
}

uint64_t persistentStore_SetStreamComplete(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForWrite();
    if (v7) {
      return v7;
    }
    if (!*(unsigned char *)v6 && *(unsigned char *)(v6 + 112) == 1)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2);
      if (Value)
      {
        CFDictionaryRef v9 = Value;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, v9);
        if (MutableCopy)
        {
          int v12 = MutableCopy;
          int v13 = (const void **)MEMORY[0x1E4F1CFD0];
          if (a3 != 1) {
            int v13 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          CFDictionarySetValue(MutableCopy, @"StreamInformationComplete", *v13);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 56), a2, v12);
          StreamNode = xmlFindStreamNode(*(void *)(v6 + 48));
          if (!StreamNode)
          {
            uint64_t v19 = FigSignalErrorAt();
            if (v19) {
              goto LABEL_23;
            }
            goto LABEL_22;
          }
          uint64_t v15 = (uint64_t)StreamNode;
          Childouble d = FigXMLNodeGetChild((uint64_t)StreamNode, @"Complete");
          if (Child)
          {
            CFTypeRef v17 = CFRetain(Child);
            CFTypeRef cf = v17;
            if (v17)
            {
LABEL_15:
              if (a3 == 1) {
                int v20 = @"YES";
              }
              else {
                int v20 = @"NO";
              }
              uint64_t v19 = FigXMLNodeContentSetCFString((uint64_t)v17, v20);
              CFTypeRef v17 = cf;
LABEL_19:
              if (v17) {
                CFRelease(v17);
              }
              if (v19) {
                goto LABEL_23;
              }
LABEL_22:
              uint64_t v19 = writeBoot();
LABEL_23:
              FigReadWriteLockUnlockForWrite();
              CFRelease(v12);
              return v19;
            }
          }
          else
          {
            CFTypeRef cf = 0;
          }
          uint64_t v18 = FigGetAllocatorForMedia();
          uint64_t v19 = FigXMLNodeCreateChildNode(v18, v15, @"Complete", &cf);
          CFTypeRef v17 = cf;
          if (v19) {
            goto LABEL_19;
          }
          goto LABEL_15;
        }
      }
    }
    uint64_t v22 = FigSignalErrorAt();
    FigReadWriteLockUnlockForWrite();
    return v22;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_IsStreamComplete(uint64_t a1, const void *a2, unsigned char *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForRead();
    if (!v7)
    {
      if (!*(unsigned char *)v6 && CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2))
      {
        FigCFDictionaryGetBooleanIfPresent();
        uint64_t v8 = 0;
        *a3 = 0;
LABEL_7:
        FigReadWriteLockUnlockForRead();
        return v8;
      }
      uint64_t v7 = FigSignalErrorAt();
    }
    uint64_t v8 = v7;
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyNetworkURLForStreamID(uint64_t a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForRead();
    if (!v7)
    {
      if (!*(unsigned char *)v6)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2);
        if (Value)
        {
          CFDictionaryRef v9 = CFDictionaryGetValue(Value, @"StreamInformationNetworkURL");
          if (v9) {
            CFDictionaryRef v9 = CFRetain(v9);
          }
          uint64_t v10 = 0;
          *a3 = v9;
          goto LABEL_9;
        }
      }
      uint64_t v7 = FigSignalErrorAt();
    }
    uint64_t v10 = v7;
LABEL_9:
    FigReadWriteLockUnlockForRead();
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyUniqueTagForStreamID(uint64_t a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForRead();
    if (!v7)
    {
      if (!*(unsigned char *)v6)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2);
        if (Value)
        {
          CFDictionaryRef v9 = CFDictionaryGetValue(Value, @"StreamInformationUniqueTag");
          if (v9) {
            CFDictionaryRef v9 = CFRetain(v9);
          }
          uint64_t v10 = 0;
          *a3 = v9;
          goto LABEL_9;
        }
      }
      uint64_t v7 = FigSignalErrorAt();
    }
    uint64_t v10 = v7;
LABEL_9:
    FigReadWriteLockUnlockForRead();
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_RemoveStreamInfoForStreamID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = FigReadWriteLockLockForWrite();
    if (v5) {
      return v5;
    }
    if (!*(unsigned char *)v4 && *(unsigned char *)(v4 + 112) == 1)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 56), a2);
      if (Value)
      {
        CFDictionaryRef v7 = Value;
        uint64_t v8 = CFDictionaryGetValue(Value, @"StreamInformationRef");
        if (v8)
        {
          uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v8);
          if (FigBaseObject)
          {
            uint64_t v10 = FigBaseObject;
            uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v11) {
              uint64_t v12 = v11;
            }
            else {
              uint64_t v12 = 0;
            }
            int v13 = *(void (**)(uint64_t))(v12 + 24);
            if (v13) {
              v13(v10);
            }
          }
        }
        uint64_t v14 = xmlRemoveStream(*(void *)(v4 + 48));
        if (v14) {
          goto LABEL_26;
        }
        uint64_t v14 = writeBoot();
        if (v14) {
          goto LABEL_26;
        }
        if (CFDictionaryGetValue(v7, @"StreamInformationURL"))
        {
          uint64_t v15 = FigFileDeleteRecursive();
          if (!v15) {
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v4 + 56), a2);
          }
          goto LABEL_18;
        }
      }
    }
    uint64_t v14 = FigSignalErrorAt();
LABEL_26:
    uint64_t v15 = v14;
LABEL_18:
    FigReadWriteLockUnlockForWrite();
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_AddStreamInfo(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v27 = 0;
  CFTypeRef v28 = 0;
  if (!DerivedStorage)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_55;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = FigReadWriteLockLockForWrite();
  if (v8)
  {
LABEL_55:
    uint64_t v25 = v8;
    goto LABEL_41;
  }
  if (*(unsigned char *)v7) {
    goto LABEL_58;
  }
  CFDictionaryRef v9 = *(const __CFDictionary **)(v7 + 56);
  if (!v9)
  {
    uint64_t v25 = 0;
LABEL_59:
    FigReadWriteLockUnlockForWrite();
    goto LABEL_41;
  }
  if (*(unsigned char *)(v7 + 112) != 1 || CFDictionaryContainsKey(v9, a3))
  {
LABEL_58:
    uint64_t v25 = FigSignalErrorAt();
    goto LABEL_59;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v11 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v7 + 8), a3, 1u);
  if (FigCFURLDoesDirectoryExist())
  {
    uint64_t DirectoryAtURL = FigSignalErrorAt();
  }
  else
  {
    uint64_t DirectoryAtURL = makeDirectoryAtURL();
    if (!DirectoryAtURL)
    {
      if (a2)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(a2, @"StreamInfoNetworkURL");
        a2 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"StreamInfoUniqueTag");
      }
      else
      {
        CFDictionaryRef Value = 0;
      }
      uint64_t v14 = *(void *)(v7 + 48);
      CFTypeRef v29 = 0;
      CFTypeRef v30 = 0;
      StreamList = xmlGetStreamList(v14);
      if (StreamList)
      {
        CFTypeRef cf = CFRetain(StreamList);
        if (cf) {
          goto LABEL_19;
        }
      }
      else
      {
        CFTypeRef cf = 0;
      }
      FigXMLNodeGetTag(v14);
      int v16 = FigCFEqual();
      if (!v14 || !v16)
      {
        uint64_t v18 = FigSignalErrorAt();
        goto LABEL_28;
      }
      uint64_t v17 = FigGetAllocatorForMedia();
      uint64_t v18 = FigXMLNodeCreateChildNode(v17, v14, @"Streams", &cf);
      if (v18) {
        goto LABEL_28;
      }
LABEL_19:
      uint64_t v19 = FigGetAllocatorForMedia();
      uint64_t v18 = FigXMLNodeCreateChildNode(v19, (uint64_t)cf, @"Stream", &v30);
      if (!v18)
      {
        uint64_t v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, @"ID", (uint64_t)a3);
        if (!v18)
        {
          uint64_t v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, @"Path", (uint64_t)a3);
          if (!v18)
          {
            if (!Value
              || (uint64_t v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, @"NetworkURL", (uint64_t)Value),
                  !v18))
            {
              if (!a2
                || (uint64_t v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, @"UniqueTag", (uint64_t)a2),
                    !v18))
              {
                uint64_t v20 = FigGetAllocatorForMedia();
                uint64_t v18 = FigXMLNodeCreateChildNode(v20, (uint64_t)v30, @"Complete", &v29);
                if (!v18) {
                  uint64_t v18 = FigXMLNodeContentSetCFString((uint64_t)v29, @"NO");
                }
              }
            }
          }
        }
      }
LABEL_28:
      uint64_t v21 = v18;
      if (cf) {
        CFRelease(cf);
      }
      if (v30) {
        CFRelease(v30);
      }
      if (v29) {
        CFRelease(v29);
      }
      if (!v21)
      {
        Streamuint64_t Options = writeBoot();
        if (StreamOptions
          || (Streamuint64_t Options = persistentStore_CreateStreamOptions(v7, (__CFDictionary **)&v27, 0),
              StreamOptions)
          || (uint64_t v23 = FigGetAllocatorForMedia(),
              Streamuint64_t Options = FigHLSPersistentStreamInfoCreate(v23, a3, a1, *(const void **)(v7 + 8), (const __CFDictionary *)v27, &v28), StreamOptions))
        {
          uint64_t v21 = StreamOptions;
        }
        else
        {
          uint64_t v24 = addStreamToStreamList(v7, a3, v11, Value, a2, 0, v28);
          uint64_t v25 = 0;
          if (!v24) {
            goto LABEL_39;
          }
          uint64_t v21 = v24;
          if (v28)
          {
            CFRelease(v28);
            CFTypeRef v28 = 0;
          }
        }
        if (xmlRemoveStream(*(void *)(v7 + 48))) {
          FigSignalErrorAt();
        }
        if (writeBoot()) {
          FigSignalErrorAt();
        }
      }
      if (FigFileDeleteRecursive()) {
        FigSignalErrorAt();
      }
      uint64_t v25 = v21;
      goto LABEL_39;
    }
  }
  uint64_t v25 = DirectoryAtURL;
LABEL_39:
  FigReadWriteLockUnlockForWrite();
  if (v11) {
    CFRelease(v11);
  }
LABEL_41:
  if (v28) {
    CFRelease(v28);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v25;
}

uint64_t persistentStore_SetDataItem(uint64_t a1, OpaqueCMBlockBuffer *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3 && a2 && a4)
  {
    CFDictionaryRef v9 = (unsigned char *)DerivedStorage;
    uint64_t v10 = FigReadWriteLockLockForWrite();
    if (v10) {
      return v10;
    }
    if (*v9 || v9[112] != 1) {
      uint64_t v11 = FigSignalErrorAt();
    }
    else {
      uint64_t v11 = setDataItemWork(a1, a2, a3);
    }
    uint64_t v12 = v11;
    FigReadWriteLockUnlockForWrite();
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_CopyDataItem(uint64_t a1, const void *a2, __CFDictionary **a3, CMBlockBufferRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v8 = (unsigned char *)DerivedStorage;
    uint64_t v9 = FigReadWriteLockLockForRead();
    if (!v9)
    {
      if (*v8) {
        uint64_t v9 = FigSignalErrorAt();
      }
      else {
        uint64_t v9 = copyDataItemWork((uint64_t)v8, a2, a3, a4);
      }
    }
    uint64_t v10 = v9;
    FigReadWriteLockUnlockForRead();
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_CopyDataCategories(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    uint64_t v4 = (unsigned char *)DerivedStorage;
    uint64_t v5 = FigReadWriteLockLockForRead();
    if (!v5)
    {
      if (!*v4)
      {
        uint64_t v6 = 0;
        *a2 = FigCFDictionaryCopyArrayOfKeys();
LABEL_6:
        FigReadWriteLockUnlockForRead();
        return v6;
      }
      uint64_t v5 = FigSignalErrorAt();
    }
    uint64_t v6 = v5;
    goto LABEL_6;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyDataIDDictionaryFilteredByCategoryIndexedByAccessKey(uint64_t a1, __CFString *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a4)
  {
    uint64_t v8 = (unsigned char *)DerivedStorage;
    uint64_t v9 = FigReadWriteLockLockForRead();
    if (!v9)
    {
      if (!*v8)
      {
        copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork((uint64_t)v8, a2, a3, a4);
        uint64_t v10 = 0;
LABEL_6:
        FigReadWriteLockUnlockForRead();
        return v10;
      }
      uint64_t v9 = FigSignalErrorAt();
    }
    uint64_t v10 = v9;
    goto LABEL_6;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_RemoveDataItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    uint64_t v5 = (unsigned char *)DerivedStorage;
    uint64_t v6 = FigReadWriteLockLockForWrite();
    if (v6) {
      return v6;
    }
    if (*v5 || v5[112] != 1) {
      uint64_t v7 = FigSignalErrorAt();
    }
    else {
      uint64_t v7 = removeDataItem(a1, a2);
    }
    uint64_t v8 = v7;
    FigReadWriteLockUnlockForWrite();
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_AddInterstitialAsset(uint64_t a1, const void *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v8 = FigReadWriteLockLockForWrite();
    if (v8) {
      return v8;
    }
    uint64_t v9 = primeInterstitialAssetFolder();
    if (!v9)
    {
      CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        uint64_t v11 = (__CFDictionary *)CFRetain(Value);
        if (v11)
        {
          uint64_t v12 = v11;
          CFStringRef v13 = 0;
          uint64_t v14 = 0;
          goto LABEL_13;
        }
      }
      Base32EncodedSHA1HashFromCFCFStringRef String = FigCreateBase32EncodedSHA1HashFromCFString();
      if (Base32EncodedSHA1HashFromCFString)
      {
        uint64_t v14 = (const void *)Base32EncodedSHA1HashFromCFString;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFStringRef v13 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%@.%@", v14, @"movpkg");
        if (v13
          && !*(unsigned char *)v7
          && *(unsigned char *)(v7 + 112) == 1
          && (CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia(),
              (uint64_t v18 = CFURLCreateCopyAppendingPathComponent(v17, *(CFURLRef *)(v7 + 200), v13, 0)) != 0))
        {
          uint64_t v12 = v18;
          uint64_t v19 = addInterstitialAssetWork(a1, a2, v13, v18, 0);
          if (!v19)
          {
LABEL_13:
            *a3 = v12;
            FigReadWriteLockUnlockForWrite();
            uint64_t v20 = 0;
            uint64_t v12 = 0;
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            if (!v14)
            {
LABEL_15:
              if (v13) {
                CFRelease(v13);
              }
              if (v22) {
                CFRelease(v22);
              }
              return v21;
            }
LABEL_14:
            CFRelease(v14);
            uint64_t v21 = v20;
            uint64_t v22 = v12;
            goto LABEL_15;
          }
          uint64_t v20 = v19;
        }
        else
        {
          uint64_t v20 = FigSignalErrorAt();
          uint64_t v12 = 0;
        }
        FigReadWriteLockUnlockForWrite();
        goto LABEL_14;
      }
      uint64_t v9 = FigSignalErrorAt();
    }
    uint64_t v21 = v9;
    FigReadWriteLockUnlockForWrite();
    return v21;
  }

  return FigSignalErrorAt();
}

uint64_t persistentStore_AddInterstitialAssetList(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3, CFStringRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3)
  {
    uint64_t v9 = DerivedStorage;
    uint64_t v10 = FigReadWriteLockLockForWrite();
    if (v10) {
      return v10;
    }
    if (!*(unsigned char *)v9 && *(unsigned char *)(v9 + 112) == 1)
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFUUIDRef v12 = CFUUIDCreate(AllocatorForMedia);
      CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFStringRef v14 = CFUUIDCreateString(v13, v12);
      if (!*(void *)(v9 + 200))
      {
        CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
        *(void *)(v9 + 200) = CFURLCreateCopyAppendingPathComponent(v15, *(CFURLRef *)(v9 + 8), @"InterstitialAssets", 1u);
      }
      if (!FigCFURLDoesDirectoryExist())
      {
        uint64_t DirectoryAtURL = makeDirectoryAtURL();
        if (DirectoryAtURL)
        {
          uint64_t v25 = DirectoryAtURL;
          CFURLRef v20 = 0;
          CFStringRef v18 = 0;
LABEL_23:
          FigReadWriteLockUnlockForWrite();
          if (v12) {
            CFRelease(v12);
          }
          if (v14) {
            CFRelease(v14);
          }
          if (v20) {
            CFRelease(v20);
          }
          if (v18) {
            CFRelease(v18);
          }
          return v25;
        }
      }
      CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFStringRef v18 = CFStringCreateWithFormat(v17, 0, @"%@.json", v14);
      CFAllocatorRef v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v20 = CFURLCreateCopyAppendingPathComponent(v19, *(CFURLRef *)(v9 + 200), v18, 0);
      FigGetAllocatorForMedia();
      uint64_t v21 = CMByteStreamCreateForFileURL();
      if (!v21)
      {
        CMBlockBufferGetDataLength(a2);
        uint64_t v21 = CMByteStreamWriteBlockBuffer();
        if (!v21)
        {
          uint64_t v22 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v22) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          if (*v23 < 2uLL || (uint64_t v24 = (uint64_t (*)(void, uint64_t))v23[5]) == 0)
          {
            uint64_t v25 = 4294954514;
            goto LABEL_20;
          }
          uint64_t v21 = v24(0, 1);
        }
      }
      uint64_t v25 = v21;
LABEL_20:
      if (!v25)
      {
        uint64_t v25 = addInterstitialAssetWork(a1, a3, v18, v20, 1);
        if (!v25)
        {
          *a4 = v14;
          CFStringRef v14 = 0;
        }
      }
      goto LABEL_23;
    }
    uint64_t v27 = FigSignalErrorAt();
    FigReadWriteLockUnlockForWrite();
    return v27;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_CopyInterstitialAssets(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = FigReadWriteLockLockForRead();
    if (v5) {
      return v5;
    }
    if (*(unsigned char *)v4)
    {
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
      CFTypeRef v6 = *(CFTypeRef *)(v4 + 208);
      if (v6) {
        CFTypeRef v6 = CFRetain(v6);
      }
      uint64_t v7 = 0;
      *a2 = v6;
    }
    FigReadWriteLockUnlockForRead();
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_CopyInterstitialAssetLists(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = FigReadWriteLockLockForRead();
    if (v5) {
      return v5;
    }
    if (*(unsigned char *)v4)
    {
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
      CFTypeRef v6 = *(CFTypeRef *)(v4 + 216);
      if (v6) {
        CFTypeRef v6 = CFRetain(v6);
      }
      uint64_t v7 = 0;
      *a2 = v6;
    }
    FigReadWriteLockUnlockForRead();
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t updateRootLockOptions(uint64_t a1, char a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = lockRoot(DerivedStorage, a2);
  if (!result)
  {
    return loadBootFromFile();
  }
  return result;
}

uint64_t persistentStore_CreateStreamOptions(uint64_t a1, __CFDictionary **a2, const __CFDictionary *a3)
{
  if (a2
    && ((CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(), !a3)
      ? (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]))
      : (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, a3)),
        (uint64_t v8 = Mutable) != 0))
  {
    uint64_t v9 = *(const void **)(a1 + 144);
    if (v9) {
      CFDictionarySetValue(Mutable, @"StreamInfoClientAuditToken", v9);
    }
    uint64_t v10 = *(const void **)(a1 + 152);
    if (v10) {
      CFDictionarySetValue(v8, @"StreamInfoClientBundleIdentifier", v10);
    }
    if (*(unsigned char *)(a1 + 136)) {
      CFDictionarySetValue(v8, @"StreamInfoDoNotBlockOnLock", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    uint64_t v11 = persistentStore_ensureMemoryPool(a1);
    if (v11)
    {
      uint64_t v12 = v11;
      CFRelease(v8);
    }
    else
    {
      CFDictionarySetValue(v8, @"StreamInfoMemoryPool", *(const void **)(a1 + 192));
      if (!CFDictionaryGetCount(v8))
      {
        CFRelease(v8);
        uint64_t v8 = 0;
      }
      uint64_t v12 = 0;
      *a2 = v8;
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t persistentStore_ensureMemoryPool(uint64_t a1)
{
  if (*(void *)(a1 + 192)) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v4 = Mutable;
    CFAllocatorRef v5 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v6 = CFStringCreateWithFormat(v5, 0, @"[FigHLSPersistentStore %p]", a1);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E4F21788], v6);
      CMMemoryPoolRef v8 = CMMemoryPoolCreate(v4);
      *(void *)(a1 + 192) = v8;
      if (v8) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = FigSignalErrorAt();
      }
      CFRelease(v4);
      uint64_t v10 = (__CFDictionary *)v7;
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
      uint64_t v10 = v4;
    }
    CFRelease(v10);
    return v9;
  }

  return FigSignalErrorAt();
}

void copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork(uint64_t a1, __CFString *a2, uint64_t a3, CFTypeRef *a4)
{
  CFMutableDictionaryRef v11 = 0;
  uint64_t v12 = 0;
  if (a2) {
    CFStringRef v7 = a2;
  }
  else {
    CFStringRef v7 = @"Default";
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 96), v7);
  if (Value)
  {
    CFMutableDictionaryRef v11 = Mutable;
    uint64_t v12 = a3;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)retrieveDataIDsForKey, &v11);
  }
  if (Mutable)
  {
    *a4 = CFRetain(Mutable);
    CFRelease(Mutable);
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t removeDataItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 88), a2);
  if (Value)
  {
    CFDictionaryRef v5 = Value;
    CFRetain(Value);
    CFStringRef v6 = CFDictionaryGetValue(v5, @"DataItemDescriptorCategory");
    CFStringRef v7 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 96), v6);
    CFDictionaryRemoveValue(v7, a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), a2);
    uint64_t v8 = *(void *)(DerivedStorage + 48);
    FigXMLNodeGetTag(v8);
    int v9 = FigCFEqual();
    if (v8 && v9 && (uint64_t v10 = FigXMLNodeGetChild(v8, @"DataItems")) != 0)
    {
      uint64_t v11 = (uint64_t)v10;
      if ((uint64_t)FigXMLNodeGetCountOfChildren((uint64_t)v10) >= 1)
      {
        CFIndex v12 = 0;
        do
        {
          ChildAtIndeCGFloat x = FigXMLNodeGetChildAtIndex(v11, v12);
          FigXMLNodeGetTag((uint64_t)ChildAtIndex);
          if (FigCFEqual())
          {
            Childouble d = FigXMLNodeGetChild((uint64_t)ChildAtIndex, @"ID");
            if (Child)
            {
              if (FigXMLNodeGetContentAsCFString((uint64_t)Child) && FigCFEqual()) {
                break;
              }
            }
          }
          ++v12;
        }
        while (v12 < (uint64_t)FigXMLNodeGetCountOfChildren(v11));
        uint64_t v21 = ChildAtIndex;
        if (ChildAtIndex) {
          FigXMLNodeRemoveAndClearChild(v11, &v21);
        }
      }
    }
    else
    {
      uint64_t v19 = FigSignalErrorAt();
      if (v19) {
        goto LABEL_23;
      }
    }
    uint64_t v15 = writeBoot();
    if (!v15)
    {
      int v16 = CFDictionaryGetValue(v5, @"DataItemURL");
      CFAllocatorRef v17 = CFDictionaryGetValue(v5, @"DataItemDescriptorURL");
      CFStringRef v18 = v17;
      if (v16)
      {
        uint64_t v19 = FigFileDeleteRecursive();
        if (v19 || !v18) {
          goto LABEL_23;
        }
      }
      else if (!v17)
      {
        uint64_t v19 = 0;
        goto LABEL_23;
      }
      uint64_t v15 = FigFileDeleteRecursive();
    }
    uint64_t v19 = v15;
LABEL_23:
    CFRelease(v5);
    return v19;
  }

  return FigSignalErrorAt();
}

uint64_t setDataItemWork(uint64_t a1, OpaqueCMBlockBuffer *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t value = 0;
  CFTypeRef cf = 0;
  CFStringRef v7 = CFDictionaryGetValue(a3, @"DataItemDescriptorCategory");
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = CFDictionaryGetValue(a3, @"DataItemDescriptorName");
    if (v9)
    {
      uint64_t v10 = v9;
      if (!*(void *)(DerivedStorage + 32))
      {
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        *(void *)(DerivedStorage + 32) = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 8), @"Data", 1u);
      }
      if (!FigCFURLDoesDirectoryExist())
      {
        uint64_t DirectoryAtURL = makeDirectoryAtURL();
        if (DirectoryAtURL) {
          return DirectoryAtURL;
        }
      }
      CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (CFDictionaryGetValueIfPresent(a3, @"DataItemDescriptorID", (const void **)&value))
      {
        uint64_t v15 = removeDataItem(a1, value);
        if (v15)
        {
          CFIndex v35 = v15;
          if (!Mutable) {
            return v35;
          }
          goto LABEL_106;
        }
        CFUUIDRef v75 = 0;
        CFTypeRef v76 = 0;
        int v16 = value;
      }
      else
      {
        CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFUUIDRef v18 = CFUUIDCreate(v17);
        CFAllocatorRef v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFUUIDRef v75 = v18;
        int v16 = CFUUIDCreateString(v19, v18);
        CFTypeRef v76 = v16;
      }
      CFDictionarySetValue(Mutable, @"DataItemDescriptorID", v16);
      CFDictionarySetValue(Mutable, @"DataItemDescriptorCategory", v8);
      CFDictionarySetValue(Mutable, @"DataItemDescriptorName", v10);
      CFURLRef v20 = CFDictionaryGetValue(a3, @"DataItemDescriptorPropertyListDescriptor");
      uint64_t v21 = CFDictionaryGetValue(a3, @"DataItemDescriptorRole");
      if (v21) {
        CFDictionarySetValue(Mutable, @"DataItemDescriptorRole", v21);
      }
      uint64_t v22 = CFDictionaryGetValue(a3, @"DataItemDescriptorNetworkURL");
      if (v22) {
        CFDictionarySetValue(Mutable, @"DataItemDescriptorNetworkURL", v22);
      }
      uint64_t v23 = v76;
      if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 96), v8, &cf))
      {
        CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFTypeRef cf = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 96), v8, cf);
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!v20) {
        goto LABEL_34;
      }
      CFURLRef v25 = *(const __CFURL **)(DerivedStorage + 32);
      CFErrorRef error = 0;
      uint64_t v26 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorName");
      uint64_t v27 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorCategory");
      CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFStringRef v29 = CFStringCreateWithFormat(v28, 0, @"%@-%@-%@.%@", v27, v26, v76, @"descriptor");
      CFAllocatorRef v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v31 = CFURLCreateCopyAppendingPathComponent(v30, v25, v29, 0);
      CFDictionarySetValue(Mutable, @"DataItemDescriptorURL", v31);
      CFDictionarySetValue(Mutable, @"DataItemDescriptorFileName", v29);
      CFAllocatorRef v32 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v33 = CFWriteStreamCreateWithFile(v32, v31);
      CFURLRef v34 = v33;
      if (v33 && CFWriteStreamOpen(v33) == 1)
      {
        CFPropertyListWrite(v20, v34, kCFPropertyListXMLFormat_v1_0, 0, &error);
        CFIndex v35 = reportIfError(error);
        if (error)
        {
          CFRelease(error);
          CFErrorRef error = 0;
        }
        if (!v35) {
          CFWriteStreamClose(v34);
        }
        if (v29) {
          goto LABEL_26;
        }
      }
      else
      {
        CFIndex v35 = FigSignalErrorAt();
        if (v29) {
LABEL_26:
        }
          CFRelease(v29);
      }
      if (v31) {
        CFRelease(v31);
      }
      if (error) {
        CFRelease(error);
      }
      if (v34) {
        CFRelease(v34);
      }
      uint64_t v23 = v76;
      if (v35) {
        goto LABEL_101;
      }
LABEL_34:
      CFURLRef v36 = *(const __CFURL **)(DerivedStorage + 32);
      CFErrorRef error = 0;
      BOOL v37 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorName");
      char v38 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorCategory");
      int v39 = FigCFEqual();
      CFAllocatorRef v40 = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (v39) {
        CFStringRef v41 = CFStringCreateWithFormat(v40, 0, @"%@-%@-%@", v38, v23, v37, v74);
      }
      else {
        CFStringRef v41 = CFStringCreateWithFormat(v40, 0, @"%@-%@-%@.%@", v38, v23, v37, @"data");
      }
      CFStringRef v42 = v41;
      CFAllocatorRef v43 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v44 = CFURLCreateCopyAppendingPathComponent(v43, v36, v42, 0);
      CFDictionarySetValue(Mutable, @"DataItemURL", v44);
      CFDictionarySetValue(Mutable, @"DataItemFileName", v42);
      FigGetAllocatorForMedia();
      uint64_t v45 = CMByteStreamCreateForFileURL();
      if (!v45)
      {
        CMBlockBufferGetDataLength(a2);
        uint64_t v45 = CMByteStreamWriteBlockBuffer();
        if (!v45)
        {
          CFErrorRef v46 = error;
          CFURLRef v47 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v47) {
            CFAllocatorRef v48 = v47;
          }
          else {
            CFAllocatorRef v48 = 0;
          }
          if (*v48 < 2uLL || (uint64_t v49 = (uint64_t (*)(CFErrorRef, uint64_t))v48[5]) == 0)
          {
            CFIndex v35 = 4294954514;
LABEL_47:
            if (error) {
              CFRelease(error);
            }
            if (v42) {
              CFRelease(v42);
            }
            if (v44) {
              CFRelease(v44);
            }
            if (!v35)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)cf, v23, Mutable);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), v23, Mutable);
              uint64_t v50 = *(void *)(DerivedStorage + 48);
              CFTypeRef v86 = 0;
              CFErrorRef error = 0;
              CFTypeRef v85 = 0;
              CFTypeRef v83 = 0;
              CFTypeRef v84 = 0;
              CFTypeRef v81 = 0;
              CFTypeRef v82 = 0;
              CFTypeRef v79 = 0;
              CFTypeRef v80 = 0;
              FigXMLNodeGetTag(v50);
              int v51 = FigCFEqual();
              CFURLRef v52 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorRole");
              CFURLRef v53 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorCategory");
              CFURLRef v54 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorID");
              CFAllocatorRef v55 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorName");
              uint64_t v56 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorNetworkURL");
              uint64_t v57 = CFDictionaryGetValue(Mutable, @"DataItemDescriptorFileName");
              CFAllocatorRef v58 = CFDictionaryGetValue(Mutable, @"DataItemFileName");
              if (!v50 || !v51)
              {
                uint64_t ChildNode = FigSignalErrorAt();
                goto LABEL_115;
              }
              CFAllocatorRef v59 = v58;
              Childouble d = FigXMLNodeGetChild(v50, @"DataItems");
              if (Child)
              {
                CFErrorRef error = (CFErrorRef)CFRetain(Child);
                if (error)
                {
LABEL_62:
                  uint64_t v63 = FigGetAllocatorForMedia();
                  uint64_t ChildNode = FigXMLNodeCreateChildNode(v63, (uint64_t)error, @"DataItem", &v86);
                  if (!ChildNode)
                  {
                    uint64_t v64 = FigGetAllocatorForMedia();
                    uint64_t ChildNode = FigXMLNodeCreateChildNode(v64, (uint64_t)v86, @"ID", &v85);
                    if (!ChildNode)
                    {
                      uint64_t ChildNode = FigXMLNodeContentSetCFString((uint64_t)v85, v54);
                      if (!ChildNode)
                      {
                        uint64_t v65 = FigGetAllocatorForMedia();
                        uint64_t ChildNode = FigXMLNodeCreateChildNode(v65, (uint64_t)v86, @"Category", &v84);
                        if (!ChildNode)
                        {
                          uint64_t ChildNode = FigXMLNodeContentSetCFString((uint64_t)v84, v53);
                          if (!ChildNode)
                          {
                            uint64_t v66 = FigGetAllocatorForMedia();
                            uint64_t ChildNode = FigXMLNodeCreateChildNode(v66, (uint64_t)v86, @"Name", &v83);
                            if (!ChildNode)
                            {
                              uint64_t ChildNode = FigXMLNodeContentSetCFString((uint64_t)v83, v55);
                              if (!ChildNode)
                              {
                                if (!v56
                                  || (uint64_t v67 = FigGetAllocatorForMedia(),
                                      uint64_t v68 = FigXMLNodeCreateChildNode(v67, (uint64_t)v86, @"kDataItemNetworkURL", &v82), !v68)&& (uint64_t v68 = FigXMLNodeContentSetCFString((uint64_t)v82, v56), !v68))
                                {
                                  uint64_t v23 = v76;
                                  if (!v57
                                    || (uint64_t v69 = FigGetAllocatorForMedia(),
                                        uint64_t v70 = FigXMLNodeCreateChildNode(v69, (uint64_t)v86, @"DescriptorPath", &v81), !v70)&& (uint64_t v70 = FigXMLNodeContentSetCFString((uint64_t)v81, v57), !v70))
                                  {
                                    uint64_t v71 = FigGetAllocatorForMedia();
                                    uint64_t v70 = FigXMLNodeCreateChildNode(v71, (uint64_t)v86, @"DataPath", &v80);
                                    if (!v70)
                                    {
                                      CFIndex v35 = FigXMLNodeContentSetCFString((uint64_t)v80, v59);
                                      if (v35 || !v52) {
                                        goto LABEL_81;
                                      }
                                      uint64_t v72 = FigGetAllocatorForMedia();
                                      uint64_t v70 = FigXMLNodeCreateChildNode(v72, (uint64_t)v86, @"Role", &v79);
                                      if (!v70) {
                                        uint64_t v70 = FigXMLNodeContentSetCFString((uint64_t)v79, v52);
                                      }
                                    }
                                  }
                                  CFIndex v35 = v70;
LABEL_81:
                                  if (v86) {
                                    CFRelease(v86);
                                  }
                                  if (error) {
                                    CFRelease(error);
                                  }
                                  if (v85) {
                                    CFRelease(v85);
                                  }
                                  if (v82) {
                                    CFRelease(v82);
                                  }
                                  if (v80) {
                                    CFRelease(v80);
                                  }
                                  if (v79) {
                                    CFRelease(v79);
                                  }
                                  if (v83) {
                                    CFRelease(v83);
                                  }
                                  if (v84) {
                                    CFRelease(v84);
                                  }
                                  if (v81) {
                                    CFRelease(v81);
                                  }
                                  if (!v35) {
                                    CFIndex v35 = writeBoot();
                                  }
                                  goto LABEL_101;
                                }
                                CFIndex v35 = v68;
LABEL_116:
                                uint64_t v23 = v76;
                                goto LABEL_81;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_115:
                  CFIndex v35 = ChildNode;
                  goto LABEL_116;
                }
              }
              else
              {
                CFErrorRef error = 0;
              }
              uint64_t v61 = FigGetAllocatorForMedia();
              uint64_t ChildNode = FigXMLNodeCreateChildNode(v61, v50, @"DataItems", (CFTypeRef *)&error);
              if (ChildNode) {
                goto LABEL_115;
              }
              uint64_t ChildNode = FigXMLNodeAttributeSetCFString((uint64_t)error, @"Directory", @"Data");
              if (ChildNode) {
                goto LABEL_115;
              }
              goto LABEL_62;
            }
LABEL_101:
            if (v75) {
              CFRelease(v75);
            }
            if (v23) {
              CFRelease(v23);
            }
            if (!Mutable) {
              return v35;
            }
LABEL_106:
            CFRelease(Mutable);
            return v35;
          }
          uint64_t v45 = v49(v46, 1);
        }
      }
      CFIndex v35 = v45;
      goto LABEL_47;
    }
  }

  return FigSignalErrorAt();
}

void retrieveDataIDsForKey(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, *(const void **)(a3 + 8));
  if (Value)
  {
    CFStringRef v6 = Value;
    CFStringRef v7 = *(__CFDictionary **)a3;
    CFDictionarySetValue(v7, v6, a1);
  }
}

uint64_t makeDirectoryAtURL()
{
  uint64_t result = FigCFURLCreateDirectory();
  if (!result)
  {
    LODWORD(result) = FigDirectoryEnableDirStatsTracking();
    if (result == -17916) {
      return 0;
    }
    else {
      return result;
    }
  }
  return result;
}

CFIndex reportIfError(__CFError *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Code = CFErrorGetCode(a1);
  CFStringRef v3 = CFErrorCopyFailureReason(a1);
  if (v3) {
    CFRelease(v3);
  }
  return Code;
}

uint64_t copyDataItemWork(uint64_t a1, const void *a2, __CFDictionary **a3, CMBlockBufferRef *a4)
{
  CFTypeRef cf = 0;
  CFErrorRef error = 0;
  uint64_t v44 = 0;
  uint64_t valuePtr = 0;
  dataPointerOut = 0;
  CFNumberRef number = 0;
  size_t totalLengthOut = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t lengthAtOffsetOut = 0;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), a2);
  if (!Value)
  {
    uint64_t v21 = FigSignalErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    CFURLRef v17 = 0;
    goto LABEL_53;
  }
  CFDictionaryRef v8 = Value;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v11 = CFDictionaryGetValue(v8, @"DataItemDescriptorRole");
  if (v11) {
    CFDictionarySetValue(Mutable, @"DataItemDescriptorRole", v11);
  }
  CFIndex v12 = CFDictionaryGetValue(v8, @"DataItemDescriptorCacheHeader");
  if (v12) {
    CFDictionarySetValue(Mutable, @"DataItemDescriptorCacheHeader", v12);
  }
  CFAllocatorRef v13 = CFDictionaryGetValue(v8, @"DataItemDescriptorUniqueTag");
  if (v13) {
    CFDictionarySetValue(Mutable, @"DataItemDescriptorUniqueTag", v13);
  }
  CFStringRef v14 = CFDictionaryGetValue(v8, @"DataItemDescriptorCategory");
  if (v14) {
    CFDictionarySetValue(Mutable, @"DataItemDescriptorCategory", v14);
  }
  uint64_t v15 = CFDictionaryGetValue(v8, @"DataItemDescriptorCacheHeader");
  if (v15) {
    CFDictionarySetValue(Mutable, @"DataItemDescriptorCacheHeader", v15);
  }
  int v16 = CFDictionaryGetValue(v8, @"DataItemDescriptorName");
  if (v16) {
    CFDictionarySetValue(Mutable, @"DataItemDescriptorName", v16);
  }
  if (!a3)
  {
    CFURLRef v17 = 0;
LABEL_27:
    CFPropertyListRef v23 = 0;
    if (!a4) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
  CFURLRef v17 = (const __CFURL *)CFDictionaryGetValue(v8, @"DataItemDescriptorURL");
  if (!v17) {
    goto LABEL_27;
  }
  CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFAllocatorRef v19 = CFReadStreamCreateWithFile(v18, v17);
  CFURLRef v17 = v19;
  if (!v19)
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_53;
  }
  if (CFReadStreamOpen(v19)) {
    goto LABEL_21;
  }
  CFURLRef v20 = CFReadStreamCopyError(v17);
  uint64_t v21 = reportIfError(v20);
  if (v20) {
    CFRelease(v20);
  }
  if (!v21)
  {
LABEL_21:
    CFAllocatorRef v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFPropertyListRef v23 = CFPropertyListCreateWithStream(v22, v17, 0, 0, 0, &error);
    CFReadStreamClose(v17);
    uint64_t v21 = reportIfError(error);
    if (error)
    {
      CFRelease(error);
      CFErrorRef error = 0;
    }
    if (v21)
    {
LABEL_51:
      if (!v23) {
        goto LABEL_53;
      }
      goto LABEL_52;
    }
    CFDictionarySetValue(Mutable, @"DataItemDescriptorPropertyListDescriptor", v23);
    if (!a4)
    {
LABEL_25:
      CFAllocatorRef v24 = CFDictionaryGetValue(v8, @"DataItemFileName");
      CFDictionarySetValue(Mutable, @"DataItemFileName", v24);
      goto LABEL_46;
    }
LABEL_28:
    if (!CFDictionaryGetValue(v8, @"DataItemURL"))
    {
LABEL_45:
      BOOL v37 = CFDictionaryGetValue(v8, @"DataItemFileName");
      CFDictionarySetValue(Mutable, @"DataItemFileName", v37);
      *a4 = theBuffer;
LABEL_46:
      CMBlockBufferRef theBuffer = 0;
      uint64_t v21 = 0;
      if (a3) {
        *a3 = Mutable;
      }
      CFMutableDictionaryRef Mutable = 0;
      if (!v23) {
        goto LABEL_53;
      }
LABEL_52:
      CFRelease(v23);
      goto LABEL_53;
    }
    FigGetAllocatorForMedia();
    uint64_t BlockBuffer = CMByteStreamCreateForFileURL();
    if (!BlockBuffer)
    {
      uint64_t v26 = FigGetAllocatorForMedia();
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      CFAllocatorRef v30 = *(uint64_t (**)(uint64_t, void, uint64_t, CFNumberRef *))(v29 + 48);
      if (!v30)
      {
LABEL_50:
        uint64_t v21 = 4294954514;
        goto LABEL_51;
      }
      uint64_t BlockBuffer = v30(CMBaseObject, *MEMORY[0x1E4F1EC50], v26, &number);
      if (!BlockBuffer)
      {
        CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
        uint64_t BlockBuffer = persistentStore_ensureMemoryPool(a1);
        if (!BlockBuffer)
        {
          uint64_t BlockBuffer = FigMemoryPoolCreateBlockBuffer();
          if (!BlockBuffer)
          {
            uint64_t BlockBuffer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
            if (!BlockBuffer)
            {
              if (lengthAtOffsetOut != totalLengthOut)
              {
LABEL_68:
                uint64_t BlockBuffer = FigSignalErrorAt();
                goto LABEL_69;
              }
              uint64_t v32 = valuePtr;
              CFTypeRef v31 = cf;
              CFURLRef v33 = dataPointerOut;
              uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v34) {
                uint64_t v35 = v34;
              }
              else {
                uint64_t v35 = 0;
              }
              CFURLRef v36 = *(uint64_t (**)(CFTypeRef, uint64_t, void, char *, uint64_t *))(v35 + 8);
              if (v36)
              {
                uint64_t BlockBuffer = v36(v31, v32, 0, v33, &v44);
                if (BlockBuffer) {
                  goto LABEL_69;
                }
                if (v44 == valuePtr) {
                  goto LABEL_45;
                }
                goto LABEL_68;
              }
              goto LABEL_50;
            }
          }
        }
      }
    }
LABEL_69:
    uint64_t v21 = BlockBuffer;
    if (!v23) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
LABEL_53:
  if (error) {
    CFRelease(error);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (number) {
    CFRelease(number);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v21;
}

const void *xmlFindStreamNode(uint64_t a1)
{
  StreamList = xmlGetStreamList(a1);
  if (!StreamList) {
    return 0;
  }
  uint64_t v2 = (uint64_t)StreamList;
  if ((uint64_t)FigXMLNodeGetCountOfChildren((uint64_t)StreamList) < 1) {
    return 0;
  }
  CFIndex v3 = 0;
  do
  {
    ChildAtIndeCGFloat x = FigXMLNodeGetChildAtIndex(v2, v3);
    FigXMLNodeGetAttribute();
    if (FigCFEqual()) {
      break;
    }
    ++v3;
  }
  while (v3 < (uint64_t)FigXMLNodeGetCountOfChildren(v2));
  return ChildAtIndex;
}

CFStringRef *xmlGetStreamList(uint64_t a1)
{
  FigXMLNodeGetTag(a1);
  int v2 = FigCFEqual();
  if (!a1 || !v2) {
    return 0;
  }

  return FigXMLNodeGetChild(a1, @"Streams");
}

uint64_t xmlRemoveStream(uint64_t a1)
{
  StreamList = xmlGetStreamList(a1);
  if (StreamList && (uint64_t v3 = (uint64_t)StreamList, (StreamNode = xmlFindStreamNode(a1)) != 0))
  {
    FigXMLNodeRemoveAndClearChild(v3, &StreamNode);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t addStreamToStreamList(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, const void *a7)
{
  CFIndex v12 = a2;
  uint64_t v13 = a1;
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  if (Value && (CFDictionaryRef v15 = (const __CFDictionary *)CFRetain(Value)) != 0)
  {
    CFDictionaryRef v16 = v15;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, v16);
    char v19 = 0;
  }
  else
  {
    CFAllocatorRef v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef v16 = 0;
    char v19 = 1;
  }
  if (!MutableCopy)
  {
    uint64_t v32 = FigSignalErrorAt();
    if (v19) {
      return v32;
    }
    goto LABEL_25;
  }
  if (FigCFDictionaryGetValue())
  {
    uint64_t v34 = v13;
    uint64_t v35 = 0;
    uint64_t v21 = v12;
    CFAllocatorRef v22 = a4;
    CFPropertyListRef v23 = a5;
    CFAllocatorRef v24 = a7;
    int v25 = a6;
    char v26 = v19;
    uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject();
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CFAllocatorRef v30 = *(unsigned int (**)(uint64_t, __CFString *, void, uint64_t *))(v29 + 48);
    if (v30 && v30(FigBaseObject, &stru_1EE53F4B8, 0, &v35) == -12785) {
      CFDictionaryRemoveValue(MutableCopy, @"StreamInformationRef");
    }
    char v19 = v26;
    a6 = v25;
    a7 = v24;
    a5 = v23;
    a4 = v22;
    CFIndex v12 = v21;
    uint64_t v13 = v34;
  }
  if (a3) {
    CFDictionarySetValue(MutableCopy, @"StreamInformationURL", a3);
  }
  CFTypeRef v31 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a6 != 1) {
    CFTypeRef v31 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(MutableCopy, @"StreamInformationComplete", *v31);
  if (a4) {
    CFDictionarySetValue(MutableCopy, @"StreamInformationNetworkURL", a4);
  }
  if (a5) {
    CFDictionarySetValue(MutableCopy, @"StreamInformationUniqueTag", a5);
  }
  if (a7) {
    CFDictionarySetValue(MutableCopy, @"StreamInformationRef", a7);
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 56), v12, MutableCopy);
  CFRelease(MutableCopy);
  uint64_t v32 = 0;
  if ((v19 & 1) == 0) {
LABEL_25:
  }
    CFRelease(v16);
  return v32;
}

uint64_t primeInterstitialAssetFolder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 200))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(void *)(DerivedStorage + 200) = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 8), @"InterstitialAssets", 1u);
  }
  if (FigCFURLDoesDirectoryExist()) {
    return 0;
  }

  return makeDirectoryAtURL();
}

uint64_t addInterstitialAssetWork(uint64_t a1, const void *a2, const void *a3, __CFDictionary *a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    uint64_t v10 = DerivedStorage;
    uint64_t v11 = primeInterstitialAssetFolder();
    if (v11) {
      return v11;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFStringRef v14 = Mutable;
      if (a5)
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v10 + 216), a2))
        {
          CFDictionarySetValue(v14, @"InterstitialAssetListFileName", a3);
          CFDictionarySetValue(v14, @"InterstitialAssetListNetworkURL", a2);
          uint64_t v15 = *(void *)(v10 + 48);
          CFTypeRef v40 = 0;
          CFTypeRef cf = 0;
          CFTypeRef v38 = 0;
          CFTypeRef v39 = 0;
          FigXMLNodeGetTag(v15);
          int v16 = FigCFEqual();
          if (v15 && v16)
          {
            CFDictionaryRef Value = CFDictionaryGetValue(v14, @"InterstitialAssetListNetworkURL");
            CFAllocatorRef v18 = CFDictionaryGetValue(v14, @"InterstitialAssetListFileName");
            Childouble d = FigXMLNodeGetChild(v15, @"InterstitialAssets");
            if (Child)
            {
              CFTypeRef cf = CFRetain(Child);
              if (cf) {
                goto LABEL_21;
              }
            }
            else
            {
              CFTypeRef cf = 0;
            }
            uint64_t v23 = FigGetAllocatorForMedia();
            uint64_t v24 = FigXMLNodeCreateChildNode(v23, v15, @"InterstitialAssets", &cf);
            if (!v24)
            {
              uint64_t v24 = FigXMLNodeAttributeSetCFString((uint64_t)cf, @"Directory", @"InterstitialAssets");
              if (!v24)
              {
LABEL_21:
                uint64_t v25 = FigGetAllocatorForMedia();
                uint64_t v24 = FigXMLNodeCreateChildNode(v25, (uint64_t)cf, @"InterstitialAssetList", &v40);
                if (!v24)
                {
                  uint64_t v26 = FigGetAllocatorForMedia();
                  uint64_t v24 = FigXMLNodeCreateChildNode(v26, (uint64_t)v40, @"NetworkURL", &v39);
                  if (!v24)
                  {
                    uint64_t v27 = FigGetAllocatorForMedia();
                    uint64_t v24 = FigXMLNodeCreateChildNode(v27, (uint64_t)v40, @"PathToLocalCopy", &v38);
                    if (!v24)
                    {
                      uint64_t v24 = FigXMLNodeContentSetCFString((uint64_t)v39, Value);
                      if (!v24) {
                        uint64_t v24 = FigXMLNodeContentSetCFString((uint64_t)v38, v18);
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v24 = FigSignalErrorAt();
          }
          uint64_t v28 = v24;
          if (cf) {
            CFRelease(cf);
          }
          if (v40) {
            CFRelease(v40);
          }
          if (v39) {
            CFRelease(v39);
          }
          if (v38) {
            CFRelease(v38);
          }
          if (v28) {
            goto LABEL_55;
          }
          uint64_t v29 = *(__CFDictionary **)(v10 + 216);
          CFAllocatorRef v30 = a2;
          CFTypeRef v31 = v14;
          goto LABEL_54;
        }
LABEL_62:
        uint64_t v28 = 0;
        goto LABEL_55;
      }
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v10 + 208), a2)) {
        goto LABEL_62;
      }
      uint64_t v20 = *(void *)(v10 + 48);
      CFTypeRef v40 = 0;
      CFTypeRef cf = 0;
      CFTypeRef v38 = 0;
      CFTypeRef v39 = 0;
      FigXMLNodeGetTag(v20);
      int v21 = FigCFEqual();
      if (v20 && v21)
      {
        CFAllocatorRef v22 = FigXMLNodeGetChild(v20, @"InterstitialAssets");
        if (v22)
        {
          CFTypeRef cf = CFRetain(v22);
          if (cf) {
            goto LABEL_39;
          }
        }
        else
        {
          CFTypeRef cf = 0;
        }
        uint64_t v32 = FigGetAllocatorForMedia();
        uint64_t v33 = FigXMLNodeCreateChildNode(v32, v20, @"InterstitialAssets", &cf);
        if (!v33)
        {
          uint64_t v33 = FigXMLNodeAttributeSetCFString((uint64_t)cf, @"Directory", @"InterstitialAssets");
          if (!v33)
          {
LABEL_39:
            uint64_t v34 = FigGetAllocatorForMedia();
            uint64_t v33 = FigXMLNodeCreateChildNode(v34, (uint64_t)cf, @"InterstitialAsset", &v40);
            if (!v33)
            {
              uint64_t v35 = FigGetAllocatorForMedia();
              uint64_t v33 = FigXMLNodeCreateChildNode(v35, (uint64_t)v40, @"NetworkURL", &v38);
              if (!v33)
              {
                uint64_t v36 = FigGetAllocatorForMedia();
                uint64_t v33 = FigXMLNodeCreateChildNode(v36, (uint64_t)v40, @"PathToLocalCopy", &v39);
                if (!v33)
                {
                  uint64_t v33 = FigXMLNodeContentSetCFString((uint64_t)v38, a2);
                  if (!v33) {
                    uint64_t v33 = FigXMLNodeContentSetCFString((uint64_t)v39, a3);
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v33 = FigSignalErrorAt();
      }
      uint64_t v28 = v33;
      if (cf) {
        CFRelease(cf);
      }
      if (v40) {
        CFRelease(v40);
      }
      if (v39) {
        CFRelease(v39);
      }
      if (v38) {
        CFRelease(v38);
      }
      if (v28) {
        goto LABEL_55;
      }
      uint64_t v29 = *(__CFDictionary **)(v10 + 208);
      CFAllocatorRef v30 = a2;
      CFTypeRef v31 = a4;
LABEL_54:
      CFDictionarySetValue(v29, v30, v31);
      uint64_t v28 = writeBoot();
LABEL_55:
      CFRelease(v14);
      return v28;
    }
  }

  return FigSignalErrorAt();
}

uint64_t __fl_logLockStart_block_invoke(uint64_t result)
{
  return result;
}

uint64_t __fl_logLockAcquisition_block_invoke(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1)
  {
    if (v1 == -12206)
    {
      int v2 = *(_DWORD **)(result + 32);
      ++v2[18];
    }
    else
    {
      int v2 = *(_DWORD **)(result + 32);
      ++v2[19];
    }
  }
  else
  {
    int v2 = *(_DWORD **)(result + 32);
    ++v2[17];
  }
  if (!v2[20]) {
    v2[20] = *(_DWORD *)(result + 44);
  }
  v2[16] = *(unsigned __int8 *)(result + 48);
  return result;
}

void figNSURLSessionAssertionFinalize(void *a1)
{
  [(id)sFigNSURLSessionRegistry releaseSession:a1];
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void sub_19456AA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void _FigHTTPRequestSessionNoteNativeConnectionForNSURLSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(NSObject **)(DerivedStorage + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___FigHTTPRequestSessionNoteNativeConnectionForNSURLSession_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a2;
  v5[5] = DerivedStorage;
  dispatch_sync(v4, v5);
}

uint64_t _FigHTTPRequestSessionCreateForNSURLSession()
{
  CFTypeRef cf = 0;
  CFTypeRef v4 = 0;
  if (figNSURLSessionRegistryEnsureGlobalInit_sFigNSURLSessionInit != -1) {
    dispatch_once(&figNSURLSessionRegistryEnsureGlobalInit_sFigNSURLSessionInit, &__block_literal_global_88);
  }
  if (sFigNSURLSessionRegistry)
  {
    int64_t v0 = (void *)MEMORY[0x199711A30]();
    if (FigHTTPRequestSessionNSGetClassID_sRegisterFigHTTPRequestSessionNSTypeOnce != -1) {
      dispatch_once(&FigHTTPRequestSessionNSGetClassID_sRegisterFigHTTPRequestSessionNSTypeOnce, &__block_literal_global_108_0);
    }
    CMDerivedObjectCreate();
    uint64_t v2 = FigSignalErrorAt();
    if (cf) {
      CFRelease(cf);
    }
    return v2;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

FigNSURLSessionRegistry *__figNSURLSessionRegistryEnsureGlobalInit_block_invoke()
{
  uint64_t result = objc_alloc_init(FigNSURLSessionRegistry);
  sFigNSURLSessionRegistrCGFloat y = (uint64_t)result;
  return result;
}

void figHTTPRequestSessionNSFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  int v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 56);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = *(NSObject **)(DerivedStorage + 32);

  dispatch_release(v4);
}

uint64_t figHTTPRequestSessionNSCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"FHRSP_MultiPathServiceType")) {
    return 4294954512;
  }
  CFTypeRef v7 = *(CFTypeRef *)(DerivedStorage + 24);
  if (v7) {
    CFTypeRef v7 = CFRetain(v7);
  }
  *a4 = v7;
  if (*(void *)(DerivedStorage + 24)) {
    return 0;
  }
  else {
    return 4294954513;
  }
}

uint64_t figHTTPRequestSessionNSSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v6 = *(NSObject **)(DerivedStorage + 32);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  long long v9[2] = __figHTTPRequestSessionNSSetProperty_block_invoke;
  void v9[3] = &unk_1E579CFC0;
  _OWORD v9[6] = DerivedStorage;
  v9[7] = a3;
  v9[4] = &v10;
  void v9[5] = a2;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_19456B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __figHTTPRequestSessionNSSetProperty_block_invoke(uint64_t a1)
{
  if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FHRSP_EnablePingReporting"))
  {
    *(unsigned char *)(*(void *)(a1 + 48) + 4_Block_object_dispose(&STACK[0x290], 8) = FigCFEqual();
  }
  else if (CFEqual(*(CFTypeRef *)(a1 + 40), @"FHRSP_CMCDHeaderVendor"))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v2 = *(const void **)(a1 + 56);
    CFTypeRef v4 = *(const void **)(v3 + 56);
    *(void *)(v3 + 56) = v2;
    if (v2) {
      CFRetain(v2);
    }
    if (v4)
    {
      CFRelease(v4);
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12784;
  }
}

uint64_t figHTTPRequestSessionNSCreateHTTPRequest(uint64_t a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFDictionary *a6, const void *a7, int a8, _OWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 48)) {
    int v24 = a8 | 0x2000;
  }
  else {
    int v24 = a8;
  }
  uint64_t v25 = *(const void **)(DerivedStorage + 56);
  if (!v25)
  {
    MutableCFArrayRef Copy = 0;
LABEL_19:
    LODWORD(v33) = v24;
    uint64_t v31 = _FigHTTPRequestCreateWithNSURLSession((uint64_t)a2, a3, a4, a5, (uint64_t)a6, a1, [*(id *)(v23 + 8) session], *(void *)v23, objc_msgSend(*(id *)(v23 + 8), "dataDelegate"), objc_msgSend(*(id *)(v23 + 8), "dispatchQueue"), a7, v33, a10, a11, a12, a13, a14, a15);
    goto LABEL_20;
  }
  long long v26 = a9[5];
  v35[4] = a9[4];
  v35[5] = v26;
  v35[6] = a9[6];
  long long v27 = a9[1];
  v35[0] = *a9;
  v35[1] = v27;
  long long v28 = a9[3];
  CFTypeRef v35[2] = a9[2];
  v35[3] = v28;
  uint64_t v36 = 0;
  uint64_t v29 = FigCMCDHeaderVendorCopyHeaders(v25, (uint64_t)v35, &v36);
  if (v29)
  {
    uint64_t v31 = v29;
    MutableCFArrayRef Copy = 0;
    goto LABEL_16;
  }
  if (!FigCFDictionaryGetCount())
  {
    if (a6) {
      MutableCFArrayRef Copy = (__CFDictionary *)CFRetain(a6);
    }
    else {
      MutableCFArrayRef Copy = 0;
    }
    goto LABEL_15;
  }
  if (!FigCFDictionaryGetCount())
  {
    MutableCFArrayRef Copy = v36;
    a6 = v36;
    goto LABEL_19;
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(a2, 0, a6);
  if (MutableCopy)
  {
    FigCFDictionarySetAllValuesFromDictionary();
LABEL_15:
    uint64_t v31 = 0;
    goto LABEL_16;
  }
  uint64_t v31 = FigSignalErrorAt();
LABEL_16:
  if (v36) {
    CFRelease(v36);
  }
  a6 = MutableCopy;
  if (!v31) {
    goto LABEL_19;
  }
LABEL_20:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v31;
}

uint64_t figHTTPRequestSessionNSSendPingWithPongHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = 0;
  char v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  uint64_t v12 = *(NSObject **)(DerivedStorage + 32);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __figHTTPRequestSessionNSSendPingWithPongHandler_block_invoke;
  v17[3] = &unk_1E5794640;
  v17[4] = &v18;
  v17[5] = DerivedStorage;
  dispatch_sync(v12, v17);
  int v13 = (void *)v19[3];
  if (v13)
  {
    if ([(id)v19[3] isValid])
    {
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke;
      v22[3] = &unk_1E57A5E58;
      v22[4] = a5;
      v22[5] = a7;
      v22[6] = a4;
      v22[7] = a6;
      [v13 sendPingWithReceiveHandler:v22];
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 4294954511;
    }
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
  }
  uint64_t v15 = (const void *)v19[3];
  if (v15) {
    CFRelease(v15);
  }
  _Block_object_dispose(&v18, 8);
  return v14;
}

void sub_19456BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__figHTTPRequestSessionNSSendPingWithPongHandler_block_invoke(void *result)
{
  uint64_t v1 = result[5];
  if (*(unsigned char *)(v1 + 48))
  {
    uint64_t v2 = result;
    uint64_t result = *(void **)(v1 + 40);
    if (result) {
      uint64_t result = CFRetain(result);
    }
    *(void *)(*(void *)(v2[4] + 8) + 24) = result;
  }
  return result;
}

void __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke_2;
  block[3] = &unk_1E57A5E30;
  void block[4] = a2;
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  double v7 = a3;
  dispatch_async(v3, block);
}

uint64_t __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke_2(void *a1, __n128 a2)
{
  uint64_t v3 = (void *)a1[4];
  if (v3) {
    uint64_t v4 = [v3 code];
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = a1[5];
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))a1[6];
  uint64_t v7 = a1[7];
  a2.n128_u64[0] = a1[8];

  return v6(v5, v7, v4, a2);
}

uint64_t __FigHTTPRequestSessionNSGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigHTTPRequestSessionNSBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigHTTPRequestSessionNS %p]", a1);
}

uint64_t FigVideoQueueServerStart()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (FigServer_IsMediaparserd())
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (FigServer_IsMediaplaybackd()) {
      uint64_t v1 = "com.apple.coremedia.mediaplaybackd.videoqueue";
    }
    else {
      uint64_t v1 = "com.apple.coremedia.videoqueue";
    }
    if (FigServer_IsMediaparserd())
    {
      return MEMORY[0x1F40DDF58](v1, 588, figvideoqueue_server, FigVideoQueueRemoteServer_Destroy, &gFigVideoQueueServerState);
    }
    else
    {
      FigServer_IsMediaplaybackd();
      if (FigServer_IsMediaparserd()) {
        BOOL v2 = 0;
      }
      else {
        BOOL v2 = FigServer_IsMediaplaybackd() != 0;
      }
      return MEMORY[0x1F40DDF60](v1, 588, v2, &FigVideoQueueServerStart_subsystems, 1, FigVideoQueueRemoteServer_Destroy, 0, &gFigVideoQueueServerState);
    }
  }
}

uint64_t FigVideoQueueRemoteServer_Destroy()
{
  uint64_t v0 = FigRPCLookupClientConnection();
  if (v0) {
    return v0;
  }
  uint64_t v1 = FigRPCGetConnectionInfo();
  if (!v1) {
    FigRPCDisposeClientConnection();
  }
  return v1;
}

uint64_t FigVideoQueueRemoteServer_Create(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, _DWORD *a6, void *a7, uint64_t *a8, _DWORD *a9, _OWORD *a10)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  CFTypeRef v68 = 0;
  long long v15 = a10[1];
  *(_OWORD *)handler.val = *a10;
  *(_OWORD *)&handler.val[4] = v15;
  uint64_t ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v18 = FigVideoQueueCreateLocal(*MEMORY[0x1E4F1CF80], &v68);
  if (v18)
  {
    int v43 = v18;
    CFStringRef v19 = 0;
    goto LABEL_71;
  }
  uint64_t v64 = a7;
  int v66 = a4;
  if (a5) {
    CFStringRef v19 = CFStringCreateWithCString(v17, a5, 0x8000100u);
  }
  else {
    CFStringRef v19 = 0;
  }
  FigProcessInfoCreateWithDetails();
  CFTypeRef v20 = v68;
  long long v21 = a10[1];
  *(_OWORD *)uint64_t v74 = *a10;
  long long v75 = v21;
  uint64_t v70 = 0;
  CFTypeRef cf = 0;
  Suint64_t Int32 = (CFTypeRef)FigCFNumberCreateSInt32();
  FigVideoQueueGetClassID();
  int v22 = CMDerivedObjectCreate();
  if (v22)
  {
    int v43 = v22;
    uint64_t v31 = 0;
    goto LABEL_37;
  }
  uint64_t v65 = a8;
  if (dword_1E93514D0)
  {
    CFStringRef v23 = v19;
    LODWORD(v72) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v25 = v72;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      *(_DWORD *)CFTypeRef v76 = 136315650;
      *(void *)&v76[4] = "videoQueueServer_makeWrapperForVideoQueueInternal";
      *(_WORD *)&v76[12] = 2048;
      *(void *)&v76[14] = cf;
      *(_WORD *)&v76[22] = 2048;
      CFAllocatorRef v77 = (void *)v20;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFStringRef v19 = v23;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = v20;
  CFRetain(v20);
  *(_DWORD *)(DerivedStorage + 72) = ClientPIDFromAuditToken;
  *(void *)(DerivedStorage + 80) = 0;
  uint64_t v28 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 56) = v28;
  if (v28
    && (uint64_t v29 = FigOSTransactionCreate(), (*(void *)(DerivedStorage + 24) = v29) != 0)
    && (uint64_t v30 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 48) = v30) != 0))
  {
    uint64_t v31 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (v31)
    {
      if (videoQueueServer_getCommonTimerSourceQueue_commonFVQServerTimerOnce != -1) {
        dispatch_once(&videoQueueServer_getCommonTimerSourceQueue_commonFVQServerTimerOnce, &__block_literal_global_89);
      }
      uint64_t v32 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)videoQueueServer_getCommonTimerSourceQueue_commonFVQServerTimerQueue);
      if (v32)
      {
        uint64_t v33 = v32;
        dispatch_set_context(v32, v31);
        *(void *)handler.val = MEMORY[0x1E4F143A8];
        *(void *)&handler.val[2] = 0x40000000;
        *(void *)&handler.val[4] = __videoQueueServer_makeWrapperForVideoQueueInternal_block_invoke;
        *(void *)&handler.val[6] = &__block_descriptor_tmp_106;
        CFTypeRef v80 = v33;
        dispatch_source_set_cancel_handler(v33, &handler);
        *(void *)CFTypeRef v76 = MEMORY[0x1E4F143A8];
        *(void *)&v76[8] = 0x40000000;
        *(void *)&v76[16] = __videoQueueServer_makeWrapperForVideoQueueInternal_block_invoke_2;
        CFAllocatorRef v77 = &__block_descriptor_tmp_10_8;
        CFArrayRef v78 = v33;
        dispatch_source_set_event_handler(v33, v76);
        *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x290], 8) = v33;
        dispatch_activate(v33);
        *(void *)(DerivedStorage + 64) = 0;
        int v34 = FigRPCCreateClientConnectionWithNotifications();
        if (v34)
        {
LABEL_81:
          int v43 = v34;
          goto LABEL_82;
        }
        uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(*(void *)DerivedStorage);
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        CFTypeRef v38 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v37 + 56);
        if (v38) {
          v38(CMBaseObject, @"ClientPID", SInt32);
        }
        uint64_t v39 = CMBaseObjectGetDerivedStorage();
        CFTypeRef v40 = videoQueueServer_copySubVideoQueue();
        if (!v40)
        {
          int v43 = FigSignalErrorAt();
          if (v43) {
            goto LABEL_82;
          }
LABEL_34:
          CMNotificationCenterGetDefaultLocalCenter();
          int v34 = FigNotificationCenterAddWeakListener();
          if (!v34)
          {
            int v43 = FigRPCGetConnectionInfo();
            a8 = v65;
            uint64_t v31 = 0;
            if (!v43)
            {
              *uint64_t v64 = 0;
              uint64_t v70 = 0;
            }
            goto LABEL_37;
          }
          goto LABEL_81;
        }
        CFStringRef v41 = v40;
        if (in_audio_mx_server_process())
        {
          long long v72 = *(_OWORD *)v74;
          long long v73 = v75;
          int UsingPrimaryCMSessionForAuditToken = FigAudioSessionCreateUsingPrimaryCMSessionForAuditToken((uint64_t)v17, (uint64_t)&v72, (void *)(v39 + 16));
          if (UsingPrimaryCMSessionForAuditToken) {
            goto LABEL_89;
          }
        }
        else
        {
          long long v72 = *(_OWORD *)v74;
          long long v73 = v75;
          int UsingPrimaryCMSessionForAuditToken = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken((uint64_t)v17, &v72, @"FigVideoQueue", (void *)(v39 + 16));
          if (UsingPrimaryCMSessionForAuditToken) {
            goto LABEL_89;
          }
        }
        if (*(void *)(v39 + 16))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          int v43 = 0;
          goto LABEL_33;
        }
        int UsingPrimaryCMSessionForAuditToken = FigSignalErrorAt();
LABEL_89:
        int v43 = UsingPrimaryCMSessionForAuditToken;
LABEL_33:
        CFRelease(v41);
        if (v43)
        {
LABEL_82:
          uint64_t v31 = 0;
          goto LABEL_83;
        }
        goto LABEL_34;
      }
    }
    int v43 = FigSignalErrorAt();
  }
  else
  {
    int v43 = FigSignalErrorAt();
    uint64_t v31 = 0;
  }
LABEL_83:
  a8 = v65;
LABEL_37:
  if (cf) {
    CFRelease(cf);
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  if (v31) {
    CFRelease(v31);
  }
  FigMachPortReleaseSendRight_();
  if (v70) {
    FigRPCDisposeClientConnection();
  }
  if (!v43)
  {
    long long v44 = a10[1];
    *(_OWORD *)handler.val = *a10;
    *(_OWORD *)&handler.val[4] = v44;
    SecTaskRef v45 = SecTaskCreateWithAuditToken(v17, &handler);
    CFErrorRef v46 = (void *)MEMORY[0x1E4F1CFD0];
    if (v45)
    {
      SecTaskRef v47 = v45;
      if (VTIsSecTaskEntitledForVP9Decode())
      {
        uint64_t v48 = FigVideoQueueGetCMBaseObject(v68);
        uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v50 = v49 ? v49 : 0;
        int v51 = *(void (**)(uint64_t, __CFString *, void))(v50 + 56);
        if (v51) {
          v51(v48, @"AllowAlternateVideoDecoderSelection", *v46);
        }
      }
      CFRelease(v47);
    }
    if (!v66)
    {
      uint64_t v55 = FigVideoQueueGetCMBaseObject(v68);
      uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v57 = v56 ? v56 : 0;
      uint64_t v63 = *(void (**)(uint64_t, __CFString *, void))(v57 + 56);
      if (v63) {
        v63(v55, @"EnableFlushCAToRemoveImage", *MEMORY[0x1E4F1CFC8]);
      }
    }
    if (FigVideoQueueUtilityIsProcessASecureCaptureExtension(ClientPIDFromAuditToken))
    {
      uint64_t v52 = FigVideoQueueGetCMBaseObject(v68);
      uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v54 = v53 ? v53 : 0;
      CFAllocatorRef v58 = *(void (**)(uint64_t, uint64_t, void))(v54 + 56);
      if (v58) {
        v58(v52, 0x1EE5783D8, *v46);
      }
    }
    *a8 = FigRemote_GetServerTimeoutToken();
    if (dword_1E93514D0)
    {
      LODWORD(v72) = 0;
      v74[0] = OS_LOG_TYPE_DEFAULT;
      CFAllocatorRef v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v60 = v72;
      if (os_log_type_enabled(v59, v74[0])) {
        unsigned int v61 = v60;
      }
      else {
        unsigned int v61 = v60 & 0xFFFFFFFE;
      }
      if (v61)
      {
        *(_DWORD *)CFTypeRef v76 = 136315394;
        *(void *)&v76[4] = "FigVideoQueueRemoteServer_Create";
        *(_WORD *)&v76[12] = 1024;
        *(_DWORD *)&v76[14] = ClientPIDFromAuditToken;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v43 = 0;
  }
LABEL_71:
  if (v68) {
    CFRelease(v68);
  }
  if (v19) {
    CFRelease(v19);
  }
  FigMachPortReleaseSendRight_();
  *a9 = v43;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_GetNextPendingNotification(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, vm_address_t *a5, unsigned int *a6)
{
  uint64_t v16 = 0;
  CFTypeRef v17 = 0;
  uint64_t v9 = videoQueueServerCopyClientFromCommandPort(a1, &v16);
  if (!v17) {
    return v9;
  }
  CFStringRef theString = 0;
  CFTypeRef cf = 0;
  theCFDataRef Data = 0;
  uint64_t PendingNotification = FigRPCFetchNextPendingNotification();
  if (PendingNotification)
  {
    uint64_t v12 = PendingNotification;
  }
  else
  {
    MEMORY[0x19970E2C0](cf, *MEMORY[0x1E4F1CF80], &theData);
    CFStringGetCString(theString, a4, 512, 0);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (theString)
    {
      CFRelease(theString);
      CFStringRef theString = 0;
    }
    if (theData && CFDataGetLength(theData))
    {
      unsigned int Length = CFDataGetLength(theData);
      *a6 = Length;
      uint64_t v12 = vm_allocate(*MEMORY[0x1E4F14960], a5, Length, 1560281089);
      if (!v12)
      {
        int v13 = (void *)*a5;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v13, BytePtr, *a6);
      }
    }
    else
    {
      uint64_t v12 = 0;
      *a5 = 0;
      *a6 = 0;
    }
  }
  if (theData) {
    CFRelease(theData);
  }
  CFRelease(v17);
  return v12;
}

uint64_t videoQueueServerCopyClientFromCommandPort(uint64_t a1, void *a2)
{
  uint64_t result = FigRPCLookupClientConnection();
  if (!result)
  {
    uint64_t result = FigRPCGetConnectionInfo();
    if (a2)
    {
      if (!result) {
        *a2 = 0;
      }
    }
  }
  return result;
}

uint64_t FigVideoQueueRemoteServer_GetProperty(uint64_t a1, const char *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v14 = 0;
  uint64_t v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v3) {
    goto LABEL_18;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = videoQueueServer_copySubVideoQueue();
  if (!v4)
  {
    uint64_t v3 = FigSignalErrorAt();
LABEL_18:
    uint64_t VMBufferFromPropertyList = v3;
    goto LABEL_12;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(const void *, CFStringRef, uint64_t, CFTypeRef *))(v9 + 48);
  if (v10)
  {
    uint64_t VMBufferFromPropertyList = v10(v5, v7, v6, &cf);
    if (!VMBufferFromPropertyList) {
      uint64_t VMBufferFromPropertyList = FigRemote_CreateVMBufferFromPropertyList();
    }
  }
  else
  {
    uint64_t VMBufferFromPropertyList = 4294954514;
  }
  CFRelease(v5);
  if (v7) {
    CFRelease(v7);
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return VMBufferFromPropertyList;
}

CFTypeRef videoQueueServer_copySubVideoQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(void *)DerivedStorage) {
    CFTypeRef v1 = CFRetain(*(CFTypeRef *)DerivedStorage);
  }
  else {
    CFTypeRef v1 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
  return v1;
}

uint64_t FigVideoQueueRemoteServer_SetProperty(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v34 = 0;
  uint64_t v7 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (!v7)
  {
    CMBaseObjectGetDerivedStorage();
    CFTypeRef v8 = videoQueueServer_copySubVideoQueue();
    if (v8)
    {
      uint64_t v9 = v8;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0);
      uint64_t v12 = MEMORY[0x19970E350](a3, a4, v10, &cf);
      if (v12)
      {
LABEL_53:
        uint64_t v20 = v12;
        goto LABEL_55;
      }
      if (!FigCFEqual())
      {
LABEL_24:
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            uint64_t v20 = 0;
LABEL_55:
            CFRelease(v9);
            goto LABEL_56;
          }
          goto LABEL_48;
        }
        CFArrayRef v21 = (const __CFArray *)cf;
        if (cf
          && (CFTypeID v22 = CFGetTypeID(cf), v22 == CFArrayGetTypeID())
          && (uint64_t Count = CFArrayGetCount(v21), (Mutable = CFArrayCreateMutable(v10, Count, MEMORY[0x1E4F1D510])) != 0))
        {
          CFMutableArrayRef v25 = Mutable;
          if (Count < 1)
          {
LABEL_41:
            if (cf) {
              CFRelease(cf);
            }
            CFTypeRef cf = v25;
            if (v11) {
              CFRelease(v11);
            }
            if (@"VideoTargetArray") {
              uint64_t v11 = CFRetain(@"VideoTargetArray");
            }
            else {
              uint64_t v11 = 0;
            }
LABEL_48:
            CFTypeRef v28 = cf;
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v29) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = 0;
            }
            uint64_t v31 = *(uint64_t (**)(const void *, const void *, CFTypeRef))(v30 + 56);
            if (!v31)
            {
              uint64_t v20 = 4294954514;
              goto LABEL_55;
            }
            uint64_t v12 = v31(v9, v11, v28);
            goto LABEL_53;
          }
          uint64_t v26 = 0;
          while (1)
          {
            uint64_t v36 = 0;
            if (!FigCFArrayGetInt64AtIndex()) {
              break;
            }
            uint64_t value = 0;
            uint64_t v27 = FigXPCVideoTargetServerCopyVideoTargetForID();
            if (v27) {
              goto LABEL_39;
            }
            CFArrayAppendValue(v25, value);
            if (value) {
              CFRelease(value);
            }
            if (Count == ++v26) {
              goto LABEL_41;
            }
          }
          uint64_t v27 = FigSignalErrorAt();
LABEL_39:
          uint64_t v20 = v27;
          CFRelease(v25);
          if (v20) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v20 = FigSignalErrorAt();
          if (v20) {
            goto LABEL_55;
          }
        }
        CFMutableArrayRef v25 = 0;
        goto LABEL_41;
      }
      CFArrayRef v13 = (const __CFArray *)cf;
      if (cf
        && (CFTypeID v14 = CFGetTypeID(cf), v14 == CFArrayGetTypeID())
        && (uint64_t v15 = CFArrayGetCount(v13), (v16 = CFArrayCreateMutable(v10, v15, MEMORY[0x1E4F1D510])) != 0))
      {
        CFMutableArrayRef v17 = v16;
        if (v15 < 1)
        {
LABEL_17:
          if (cf) {
            CFRelease(cf);
          }
          CFTypeRef cf = v17;
          if (v11) {
            CFRelease(v11);
          }
          if (@"VisualContextArray") {
            uint64_t v11 = CFRetain(@"VisualContextArray");
          }
          else {
            uint64_t v11 = 0;
          }
          goto LABEL_24;
        }
        uint64_t v18 = 0;
        while (1)
        {
          uint64_t v36 = 0;
          if (!FigCFArrayGetInt64AtIndex()) {
            break;
          }
          uint64_t value = 0;
          uint64_t v19 = FigVisualContextServerRetainVisualContextForID();
          if (v19) {
            goto LABEL_15;
          }
          CFArrayAppendValue(v17, value);
          CFRelease(value);
          if (v15 == ++v18) {
            goto LABEL_17;
          }
        }
        uint64_t v19 = FigSignalErrorAt();
LABEL_15:
        uint64_t v20 = v19;
        CFRelease(v17);
        if (v20) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v20 = FigSignalErrorAt();
        if (v20) {
          goto LABEL_55;
        }
      }
      CFMutableArrayRef v17 = 0;
      goto LABEL_17;
    }
    uint64_t v7 = FigSignalErrorAt();
  }
  uint64_t v20 = v7;
  uint64_t v11 = 0;
LABEL_56:
  if (v34) {
    CFRelease(v34);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a3 && !v20) {
    MEMORY[0x199712230](*MEMORY[0x1E4F14960], a3, a4);
  }
  return v20;
}

uint64_t FigVideoQueueRemoteServer_Start(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v3) {
    return v3;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = videoQueueServer_copySubVideoQueue();
  if (!v4) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(const void *, uint64_t))(v7 + 8);
  if (v8) {
    uint64_t v9 = v8(v5, a2);
  }
  else {
    uint64_t v9 = 4294954514;
  }
  CFRelease(v5);
  return v9;
}

uint64_t FigVideoQueueRemoteServer_EnqueueVideoSampleBuffer(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  int v27 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v27)
  {
    int v33 = v27;
    CFTypeRef v28 = 0;
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    CFTypeRef v28 = videoQueueServer_copySubVideoQueue();
    if (v28)
    {
      SampleBufferFromSerializedAtomCFDataRef Data = FigRemote_CreateSampleBufferFromSerializedAtomData();
      if (SampleBufferFromSerializedAtomData)
      {
LABEL_9:
        int v33 = SampleBufferFromSerializedAtomData;
        a4 = 0;
        goto LABEL_11;
      }
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = *(uint64_t (**)(CFTypeRef, void, uint64_t, double, double, double, double, double, double, double, double))(v31 + 16);
      if (v32)
      {
        SampleBufferFromSerializedAtomCFDataRef Data = v32(v28, 0, a5, a7, a8, a9, a10, a11, a12, a13, a14);
        goto LABEL_9;
      }
      a4 = 0;
      int v33 = -12782;
    }
    else
    {
      int v33 = FigSignalErrorAt();
    }
  }
LABEL_11:
  if (a2) {
    FigMachPortReleaseSendRight_();
  }
  if (a4) {
    MEMORY[0x199712230](*MEMORY[0x1E4F14960], a3, a4);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (a6) {
    *a6 = v33;
  }
  return 0;
}

uint64_t FigVideoQueueRemoteServer_EnqueueH264Frame(uint64_t a1, unsigned int a2, uint64_t a3, const UInt8 *a4, unsigned int a5, void *a6, unsigned int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, int *a18)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  int v33 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v33)
  {
    int v43 = v33;
    CFDataRef v35 = 0;
    CFTypeRef v34 = 0;
    goto LABEL_16;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v34 = videoQueueServer_copySubVideoQueue();
  if (!v34)
  {
    int v43 = FigSignalErrorAt();
    CFDataRef v35 = 0;
    goto LABEL_16;
  }
  unsigned int v46 = a2;
  CFDataRef v35 = 0;
  if (a4)
  {
    if (a5)
    {
      uint64_t v36 = a5;
      CFDataRef v35 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, a5);
      if (!v35)
      {
        int v43 = -108;
LABEL_18:
        long long v44 = (unsigned int *)MEMORY[0x1E4F14960];
        MEMORY[0x199712230](*MEMORY[0x1E4F14960], a4, v36);
        if (!a7) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
  }
  CMBlockBufferRef v37 = 0;
  if (a6 && a7)
  {
    CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    sVMAllocatedDataBlockSource.FreeBlocCFIndex k = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate;
    OSStatus v39 = CMBlockBufferCreateWithMemoryBlock(v38, a6, a7, v38, &sVMAllocatedDataBlockSource, 0, a7, 0, &blockBufferOut);
    if (v39)
    {
      int v43 = v39;
      goto LABEL_16;
    }
    CMBlockBufferRef v37 = blockBufferOut;
  }
  uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  CFStringRef v42 = *(uint64_t (**)(CFTypeRef, void, uint64_t, CFDataRef, CMBlockBufferRef, uint64_t, void, double, double, double, double, double, double, double, double))(v41 + 24);
  if (v42)
  {
    int v43 = v42(v34, v46, a3, v35, v37, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16);
    a7 = 0;
  }
  else
  {
    a7 = 0;
    int v43 = -12782;
  }
LABEL_16:
  if (a5)
  {
    uint64_t v36 = a5;
    goto LABEL_18;
  }
  long long v44 = (unsigned int *)MEMORY[0x1E4F14960];
  if (a7) {
LABEL_19:
  }
    MEMORY[0x199712230](*v44, a6, a7);
LABEL_20:
  if (v34) {
    CFRelease(v34);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a18) {
    *a18 = v43;
  }
  return 0;
}

uint64_t FigVideoQueueRemoteServer_EnqueueH264FrameWithTimingInfoBaggage(uint64_t a1, unsigned int a2, unsigned int a3, const UInt8 *a4, unsigned int a5, void *a6, unsigned int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, uint64_t a18, unsigned int a19, int *a20)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v53 = 0;
  CFTypeRef cf = 0;
  int v34 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v34)
  {
    int v45 = v34;
    CFDataRef v36 = 0;
    CFTypeRef v35 = 0;
  }
  else
  {
    unsigned int v49 = a3;
    CMBaseObjectGetDerivedStorage();
    CFTypeRef v35 = videoQueueServer_copySubVideoQueue();
    if (v35)
    {
      uint64_t v48 = a8;
      CFDataRef v36 = 0;
      if (a4)
      {
        if (a5)
        {
          uint64_t v37 = a5;
          CFDataRef v36 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, a5);
          if (!v36)
          {
            int v45 = -108;
LABEL_22:
            unsigned int v46 = (unsigned int *)MEMORY[0x1E4F14960];
            MEMORY[0x199712230](*MEMORY[0x1E4F14960], a4, v37);
            if (!a7) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }
        }
      }
      if (a6
        && a7
        && (CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
            sVMAllocatedDataBlockSource.FreeBlocCFIndex k = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate,
            (OSStatus v39 = CMBlockBufferCreateWithMemoryBlock(v38, a6, a7, v38, &sVMAllocatedDataBlockSource, 0, a7, 0, &blockBufferOut)) != 0))
      {
        int v45 = v39;
      }
      else
      {
        CFTypeRef v40 = 0;
        if (a18 && a19)
        {
          int v41 = MEMORY[0x19970E350](a18, a19, *MEMORY[0x1E4F1CF80], &cf);
          if (v41)
          {
LABEL_18:
            int v45 = v41;
            a7 = 0;
            goto LABEL_20;
          }
          CFTypeRef v40 = cf;
        }
        CMBlockBufferRef v42 = blockBufferOut;
        uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v43) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        if (*(void *)(v44 + 24))
        {
          int v41 = (*(uint64_t (**)(CFTypeRef, void, void, CFDataRef, CMBlockBufferRef, uint64_t, void, CFTypeRef, double, double, double, double, double, double, double, double))(v44 + 32))(v35, a2, v49, v36, v42, v48, a17, v40, a9, a10, a11, a12, a13, a14, a15, a16);
          goto LABEL_18;
        }
        a7 = 0;
        int v45 = -12782;
      }
    }
    else
    {
      int v45 = FigSignalErrorAt();
      CFDataRef v36 = 0;
    }
  }
LABEL_20:
  if (a5)
  {
    uint64_t v37 = a5;
    goto LABEL_22;
  }
  unsigned int v46 = (unsigned int *)MEMORY[0x1E4F14960];
  if (a7) {
LABEL_23:
  }
    MEMORY[0x199712230](*v46, a6, a7);
LABEL_24:
  if (a19) {
    MEMORY[0x199712230](*v46, a18, a19);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (a20) {
    *a20 = v45;
  }
  return 0;
}

uint64_t FigVideoQueueRemoteServer_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(uint64_t a1, void *a2, int a3, void *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, int *a18)
{
  LODWORD(v21) = a5;
  LODWORD(v23) = a3;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v52 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef v50 = 0;
  int v33 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v33) {
    goto LABEL_35;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v34 = videoQueueServer_copySubVideoQueue();
  if (!v34)
  {
    int v33 = FigSignalErrorAt();
LABEL_35:
    int v47 = v33;
    CFTypeRef v35 = 0;
    if (!v23)
    {
LABEL_39:
      if (!v21) {
        goto LABEL_19;
      }
      uint64_t v21 = v21;
      goto LABEL_42;
    }
    uint64_t v23 = v23;
LABEL_38:
    MEMORY[0x199712230](*MEMORY[0x1E4F14960], a2, v23);
    goto LABEL_39;
  }
  CFTypeRef v35 = v34;
  if (a2)
  {
    if (v23)
    {
      CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v23 = v23;
      sVMAllocatedDataBlockSource.FreeBlocCFIndex k = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate;
      OSStatus v37 = CMBlockBufferCreateWithMemoryBlock(v36, a2, v23, v36, &sVMAllocatedDataBlockSource, 0, v23, 0, &blockBufferOut);
      if (v37)
      {
        int v47 = v37;
        goto LABEL_38;
      }
    }
  }
  if (a4)
  {
    if (v21)
    {
      CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v21 = v21;
      sVMAllocatedDataBlockSource.FreeBlocCFIndex k = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate;
      OSStatus v39 = CMBlockBufferCreateWithMemoryBlock(v38, a4, v21, v38, &sVMAllocatedDataBlockSource, 0, v21, 0, &v50);
      if (v39)
      {
        int v47 = v39;
LABEL_42:
        MEMORY[0x199712230](*MEMORY[0x1E4F14960], a4, v21);
        goto LABEL_19;
      }
    }
  }
  CFTypeRef v40 = 0;
  if (!a8 || !a17)
  {
LABEL_13:
    CMBlockBufferRef v43 = v50;
    CMBlockBufferRef v42 = blockBufferOut;
    uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v44) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 0;
    }
    unsigned int v46 = *(uint64_t (**)(const void *, CMBlockBufferRef, CMBlockBufferRef, uint64_t, uint64_t, CFTypeRef, double, double, double, double, double, double, double, double))(v45 + 56);
    if (v46) {
      int v47 = v46(v35, v42, v43, a6, a7, v40, a9, a10, a11, a12, a13, a14, a15, a16);
    }
    else {
      int v47 = -12782;
    }
LABEL_19:
    if (!a17) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  int v41 = MEMORY[0x19970E350](a8, a17, *MEMORY[0x1E4F1CF80], &cf);
  if (!v41)
  {
    CFTypeRef v40 = cf;
    goto LABEL_13;
  }
  int v47 = v41;
LABEL_20:
  MEMORY[0x199712230](*MEMORY[0x1E4F14960], a8, a17);
LABEL_21:
  if (v35) {
    CFRelease(v35);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (a18) {
    *a18 = v47;
  }
  return 0;
}

uint64_t FigVideoQueueRemoteServer_SyncTimebaseToMoment(uint64_t a1, int a2, int *a3, int *a4)
{
  uint64_t v43 = 0;
  long long v42 = 0u;
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  long long v39 = 0u;
  CMTimebaseRef sourceTimebase = 0;
  CMTimebaseRef timebaseOut = 0;
  int v7 = *a3;
  int v6 = a3[1];
  uint64_t v8 = *((void *)a3 + 1);
  long long v9 = *((_OWORD *)a3 + 1);
  uint64_t v51 = *((void *)a3 + 4);
  CFTypeRef v52 = 0;
  long long v50 = v9;
  long long v10 = *(_OWORD *)(a3 + 10);
  uint64_t v49 = *((void *)a3 + 7);
  long long v48 = v10;
  uint64_t v11 = *((void *)a3 + 8);
  long long v12 = *(_OWORD *)(a3 + 18);
  uint64_t v47 = *((void *)a3 + 11);
  long long v46 = v12;
  long long v13 = *((_OWORD *)a3 + 6);
  uint64_t v45 = *((void *)a3 + 14);
  long long v44 = v13;
  int v14 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (!v14)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      CFMutableArrayRef v16 = (void *)DerivedStorage;
      CFTypeRef v17 = videoQueueServer_copySubVideoQueue();
      if (!v17)
      {
        int v24 = -12785;
        goto LABEL_33;
      }
      uint64_t v18 = v17;
      MEMORY[0x19970E910](v16[6]);
      LODWORD(v39) = v7;
      if (v7 == 120)
      {
        DWORD1(v39) = v6;
        *((void *)&v39 + 1) = v8;
        long long v40 = v50;
        *(void *)&v41[0] = v51;
        *(_OWORD *)((char *)v41 + _Block_object_dispose(&STACK[0x290], 8) = v48;
        *((void *)&v41[1] + 1) = v49;
        *(void *)&v41[2] = v11;
        *(_OWORD *)((char *)&v41[2] + _Block_object_dispose(&STACK[0x290], 8) = v46;
        *((void *)&v41[3] + 1) = v47;
        uint64_t v43 = v45;
        long long v42 = v44;
        if (a2)
        {
          uint64_t v19 = v16[4];
          if (v19) {
            goto LABEL_30;
          }
          CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          HostTimeClocCFIndex k = CMClockGetHostTimeClock();
          OSStatus v22 = CMTimebaseCreateWithSourceClock(v20, HostTimeClock, &sourceTimebase);
          if (v22 || (OSStatus v22 = CMTimebaseCreateWithSourceTimebase(v20, sourceTimebase, &timebaseOut)) != 0)
          {
            int v24 = v22;
            goto LABEL_32;
          }
          if (timebaseOut) {
            CFTypeRef v23 = CFRetain(timebaseOut);
          }
          else {
            CFTypeRef v23 = 0;
          }
          CFTypeRef v16[4] = v23;
          uint64_t v31 = sourceTimebase;
          if (sourceTimebase)
          {
            uint64_t v31 = (void *)CFRetain(sourceTimebase);
            CFTypeRef v23 = (CFTypeRef)v16[4];
          }
          v16[5] = v31;
          uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(v18);
          uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v33) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = 0;
          }
          CFTypeRef v35 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v34 + 56);
          if (v35) {
            v35(CMBaseObject, @"VideoQueue_ControlTimebase", v23);
          }
          uint64_t v19 = v16[4];
          if (v19) {
LABEL_30:
          }
            FigTimebaseSynchronizeToMoment2(v19, v16[5], &v39);
        }
        else
        {
          uint64_t v25 = FigVideoQueueGetCMBaseObject(v18);
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v26) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = 0;
          }
          CFTypeRef v28 = *(void (**)(uint64_t, __CFString *, void))(v27 + 56);
          if (v28) {
            v28(v25, @"VideoQueue_ControlTimebase", 0);
          }
          uint64_t v29 = (const void *)v16[4];
          if (v29)
          {
            CFRelease(v29);
            CFTypeRef v16[4] = 0;
          }
          uint64_t v30 = (const void *)v16[5];
          if (v30)
          {
            CFRelease(v30);
            int v24 = 0;
            v16[5] = 0;
LABEL_32:
            CFRelease(v18);
            MEMORY[0x19970E930](v16[6]);
            goto LABEL_33;
          }
        }
      }
      int v24 = 0;
      goto LABEL_32;
    }
    int v14 = FigSignalErrorAt();
  }
  int v24 = v14;
LABEL_33:
  if (v52) {
    CFRelease(v52);
  }
  if (timebaseOut) {
    CFRelease(timebaseOut);
  }
  if (sourceTimebase) {
    CFRelease(sourceTimebase);
  }
  if (a4) {
    *a4 = v24;
  }
  return 0;
}

uint64_t FigVideoQueueRemoteServer_Flush(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v3) {
    return v3;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = videoQueueServer_copySubVideoQueue();
  if (!v4) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(const void *, uint64_t))(v7 + 40);
  if (v8) {
    uint64_t v9 = v8(v5, a2);
  }
  else {
    uint64_t v9 = 4294954514;
  }
  CFRelease(v5);
  return v9;
}

uint64_t FigVideoQueueRemoteServer_IsAboveHighWaterLevel(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v3) {
    return v3;
  }
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = videoQueueServer_copySubVideoQueue();
  if (!v4) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(const void *))(v7 + 48);
  if (v8) {
    int v9 = v8(v5);
  }
  else {
    int v9 = 0;
  }
  *a2 = v9;
  CFRelease(v5);
  return 0;
}

uint64_t FigVideoQueueRemoteServer_RequestDecodeForPreroll(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  int v7 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (!v7)
  {
    CMBaseObjectGetDerivedStorage();
    CFTypeRef v8 = videoQueueServer_copySubVideoQueue();
    if (v8)
    {
      int v9 = v8;
      int v10 = MEMORY[0x19970E350](a2, a3, *MEMORY[0x1E4F1CF80], &v17);
      if (!v10)
      {
        CFTypeRef v11 = v17;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        int v14 = *(uint64_t (**)(const void *, CFTypeRef))(v13 + 64);
        if (!v14)
        {
          int v15 = -12782;
          goto LABEL_11;
        }
        int v10 = v14(v9, v11);
      }
      int v15 = v10;
LABEL_11:
      CFRelease(v9);
      goto LABEL_12;
    }
    int v7 = FigSignalErrorAt();
  }
  int v15 = v7;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (a3) {
    MEMORY[0x199712230](*MEMORY[0x1E4F14960], a2, a3);
  }
  if (a4) {
    *a4 = v15;
  }
  return 0;
}

uint64_t FigVideoQueueRemoteServer_CopyCurrentlyDisplayedCVPixelBuffer(uint64_t a1, _DWORD *a2, void *a3, _DWORD *a4, int *a5)
{
  CFTypeRef cf = 0;
  int v24 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  CFTypeRef v21 = 0;
  int v9 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v9) {
    goto LABEL_25;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v11 = videoQueueServer_copySubVideoQueue();
  if (!v11)
  {
    int v9 = FigSignalErrorAt();
LABEL_25:
    int SerializedAtomDataForPixelBuffer = v9;
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(v11);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFMutableArrayRef v16 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v15 + 48);
  if (v16)
  {
    int v17 = v16(CMBaseObject, @"CurrentlyDisplayedCVPixelBuffer", *MEMORY[0x1E4F1CF80], &v21);
    if (v17)
    {
      int SerializedAtomDataForPixelBuffer = v17;
    }
    else
    {
      int SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
      if (SerializedAtomDataForPixelBuffer)
      {
        *(void *)(DerivedStorage + 64) = 0;
      }
      else
      {
        int v20 = v22;
        *(void *)(DerivedStorage + 64) = (v22 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
        *a2 = v24;
        int v24 = 0;
        *a3 = v23;
        *a4 = v20;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
  }
  else
  {
    int SerializedAtomDataForPixelBuffer = -12782;
  }
  CFRelease(v12);
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v24) {
    FigMachPortReleaseSendRight_();
  }
  if (v22) {
    MEMORY[0x199712230](*MEMORY[0x1E4F14960], v23);
  }
  if (a5) {
    *a5 = SerializedAtomDataForPixelBuffer;
  }
  return 0;
}

void __videoQueueServer_makeWrapperForVideoQueueInternal_block_invoke(uint64_t a1)
{
  CFTypeRef v1 = *(NSObject **)(a1 + 32);
  CFTypeRef context = dispatch_get_context(v1);
  dispatch_set_context(v1, 0);
  if (context)
  {
    CFRelease(context);
  }
}

void __videoQueueServer_makeWrapperForVideoQueueInternal_block_invoke_2(uint64_t a1)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (dispatch_get_context(*(dispatch_object_t *)(a1 + 32)))
  {
    uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v1)
    {
      BOOL v2 = (const void *)v1;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v4 = videoQueueServer_copySubVideoQueue();
      if (v4)
      {
        uint64_t v5 = v4;
        cf[0] = 0;
        uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(v4);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        int v9 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
        if (v9)
        {
          int v10 = v9(CMBaseObject, @"IsImageQueueBeingServiced", *MEMORY[0x1E4F1CF80], cf);
          CFTypeRef v11 = cf[0];
          if (!v10 && (CFTypeRef)*MEMORY[0x1E4F1CFC8] == cf[0])
          {
            if (dword_1E93514D0)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            videoQueueServer_invalidateSubVideoQueue((uint64_t)v2, (uint64_t)v5);
            dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 88), 0xFFFFFFFFFFFFFFFFLL, 0, 0x1DCD6500uLL);
            MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
            if (*(void *)DerivedStorage)
            {
              CFRelease(*(CFTypeRef *)DerivedStorage);
              *(void *)uint64_t DerivedStorage = 0;
            }
            MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
            CFTypeRef v11 = cf[0];
          }
          if (v11) {
            CFRelease(v11);
          }
        }
        CFRelease(v5);
      }
      else if (DerivedStorage)
      {
        dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 88), 0xFFFFFFFFFFFFFFFFLL, 0, 0x1DCD6500uLL);
      }
      CFRelease(v2);
    }
  }
}

void videoQueueServer_invalidateSubVideoQueue(uint64_t a1, uint64_t a2)
{
  values[16] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = -12084;
  if (dword_1E93514D0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFDictionaryRef v5 = CFDictionaryCreate(v4, (const void **)kFigVideoQueueNotificationParameter_OSStatus, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t CMBaseObject = FigVideoQueueGetCMBaseObject(a2);
  if (CMBaseObject)
  {
    uint64_t v7 = CMBaseObject;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v9 = v8 ? v8 : 0;
    int v10 = *(void (**)(uint64_t))(v9 + 24);
    if (v10) {
      v10(v7);
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (values[0]) {
    CFRelease(values[0]);
  }
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t videoQueueServerReflectNotification()
{
  return CMNotificationCenterPostNotification();
}

uint64_t videoQueueServer_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E93514D0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  BOOL v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x290], 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 88);
  if (v3)
  {
    dispatch_source_cancel(v3);
    CFAllocatorRef v4 = *(NSObject **)(DerivedStorage + 88);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x290], 8) = 0;
    }
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  FigSimpleMutexDestroy();
  CFDictionaryRef v5 = *(void **)(DerivedStorage + 24);
  if (v5)
  {
    os_release(v5);
    *(void *)(DerivedStorage + 24) = 0;
  }
  if (*(void *)(DerivedStorage + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v6 = *(const void **)(DerivedStorage + 16);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 16) = 0;
    }
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 32);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 40);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 40) = 0;
  }
  FigServer_RememberProcessInfoForAFewSeconds();
  uint64_t v9 = *(const void **)(DerivedStorage + 80);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 80) = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *videoQueueServer_CopyDebugDesc(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFTypeRef v3 = videoQueueServer_copySubVideoQueue();
  CFStringAppendFormat(Mutable, 0, @"videoQueueClientObj %p [%@]", a1, v3);
  if (v3) {
    CFRelease(v3);
  }
  return Mutable;
}

void videoQueueServer_mediaServicesProcessDeathNotification()
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v0 = videoQueueServer_copySubVideoQueue();
  if (v0)
  {
    uint64_t v1 = v0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v1);
  }
}

void videoQueueServer_appStateChangeListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFTypeRef v7 = videoQueueServer_copySubVideoQueue();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual()) {
    goto LABEL_21;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F75C90]);
  if (Value)
  {
    valuePtr[0] = 0;
    if (CFNumberGetValue(Value, kCFNumberSInt32Type, valuePtr)) {
      int v10 = valuePtr[0];
    }
    else {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = 0;
  }
  if (dword_1E93514D0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v10 == 4)
  {
    if (dword_1E93514D0)
    {
      uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFMutableArrayRef v16 = *(NSObject **)(DerivedStorage + 88);
    dispatch_time_t v14 = dispatch_time(0, 1000000000);
    uint64_t v13 = v16;
    uint64_t v15 = 1000000000;
    goto LABEL_20;
  }
  if (v10 != 2)
  {
    uint64_t v13 = *(NSObject **)(DerivedStorage + 88);
    dispatch_time_t v14 = -1;
    uint64_t v15 = 0;
LABEL_20:
    dispatch_source_set_timer(v13, v14, v15, 0x1DCD6500uLL);
    goto LABEL_21;
  }
  if (v7) {
    videoQueueServer_invalidateSubVideoQueue(a2, (uint64_t)v7);
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 88), 0xFFFFFFFFFFFFFFFFLL, 0, 0x1DCD6500uLL);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
LABEL_21:
  if (v7) {
    CFRelease(v7);
  }
}

dispatch_queue_t __videoQueueServer_getCommonTimerSourceQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.videoqueue.timer", 0);
  videoQueueServer_getCommonTimerSourceQueue_commonFVQServerTimerQueue = (uint64_t)result;
  return result;
}

void videoQueueServer_blockDeallocate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    JUMPOUT(0x199712230);
  }
}

uint64_t FigFastStartRemakerCreateWithURLs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    if (FigCFURLIsLocalResource()
      && a3
      && FigCFURLIsLocalResource()
      && !FigFileDoesFileExist()
      && a5)
    {
      FigRemakerGetClassID();
      uint64_t v7 = CMDerivedObjectCreate();
      if (v7) {
        return v7;
      }
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!CMByteStreamCreateForFileURL() && !CMByteStreamCreateForFileURL())
      {
        *(void *)uint64_t DerivedStorage = 0;
        *(_DWORD *)(DerivedStorage + 40) = 512;
        uint64_t v9 = 0;
        *(void *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.faststartremaker", 0);
        *a5 = 0;
        return v9;
      }
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t fastStartRemaker_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 8))
    {
      *(unsigned char *)(DerivedStorage + _Block_object_dispose(&STACK[0x290], 8) = 1;
      BOOL v2 = *(NSObject **)(DerivedStorage + 16);
      if (v2)
      {
        *(unsigned char *)(v1 + 9) = 1;
        dispatch_sync_f(v2, 0, (dispatch_function_t)doNothingDispatchFunction);
        dispatch_release(*(dispatch_object_t *)(v1 + 16));
        *(void *)(v1 + 16) = 0;
      }
      CFTypeRef v3 = *(const void **)(v1 + 32);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(v1 + 32) = 0;
      }
      CFAllocatorRef v4 = *(const void **)(v1 + 24);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v1 + 24) = 0;
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *fastStartRemaker_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  if (!DerivedStorage) {
    return 0;
  }
  CFTypeRef v3 = (void *)DerivedStorage;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FastStartRemaker %p>", a1);
  CFStringAppendFormat(Mutable, 0, @" { ftypAtomOffset: %llu ftypAtomLength: %llu moovAtomOffset: %llu moovAtomLength: %llu firstMdatAtomOffset: %llu wholeMdatAtomLength: %llu", v3[8], v3[11], v3[9], v3[12], v3[10], v3[13]);
  uint64_t v6 = (void *)MEMORY[0x1E4F1EC78];
  if (v3[3])
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v9 = v8 ? v8 : 0;
    int v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(CMBaseObject, *v6, v4, &cf);
    }
  }
  if (v3[4]
    && ((uint64_t v11 = CMByteStreamGetCMBaseObject(), (v12 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v13 = 0)
      : (uint64_t v13 = v12),
        (dispatch_time_t v14 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48)) != 0))
  {
    v14(v11, *v6, v4, &v17);
    CFTypeRef v15 = v17;
  }
  else
  {
    CFTypeRef v15 = 0;
  }
  CFStringAppendFormat(Mutable, 0, @" sourceByteStream: %@ sourceURL: %@ outputByteStream: %@ outputURL: %@ }", v3[3], cf, v3[4], v15);
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return Mutable;
}

uint64_t fastStartRemaker_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v7 = DerivedStorage, *(unsigned char *)(DerivedStorage + 8)))
  {
    return FigSignalErrorAt();
  }
  else if (CFEqual(a2, @"Remaker_Progress"))
  {
    float valuePtr = 0.0;
    if (*(unsigned char *)(v7 + 10))
    {
      uint64_t v8 = *(void *)(v7 + 104);
      float v9 = 0.0;
      if (v8)
      {
        float v10 = (float)*(uint64_t *)(v7 + 48) / (float)v8;
        if (v10 >= 0.0)
        {
          float v9 = (float)*(uint64_t *)(v7 + 48) / (float)v8;
          if (v10 > 1.0) {
            float v9 = 1.0;
          }
        }
      }
      float valuePtr = v9;
      goto LABEL_10;
    }
    uint64_t result = FigSignalErrorAt();
    if (!result)
    {
LABEL_10:
      CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
      uint64_t result = 0;
      *a4 = v11;
    }
  }
  else
  {
    return 4294954512;
  }
  return result;
}

uint64_t fastStartRemaker_StartOutput(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 10))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 10) = 1;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)writeFirstStartMovieDispatchFunction);
    return 0;
  }
}

void writeFirstStartMovieDispatchFunction()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v1 = DerivedStorage, *(unsigned char *)(DerivedStorage + 8)))
  {
    int v16 = FigSignalErrorAt();
    if (!v16) {
      goto LABEL_246;
    }
    goto LABEL_237;
  }
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  startedouble d = FigAtomStreamInitWithByteStream();
  if (started) {
    goto LABEL_260;
  }
  startedouble d = fastStartRemaker_parseChildAtoms((uint64_t)cf, 3, (uint64_t)&fastStartRemaker_parseMovieFile_atomDispatch, v1);
  if (started) {
    goto LABEL_260;
  }
  if (!*(void *)(v1 + 96) || !*(void *)(v1 + 104))
  {
    startedouble d = FigSignalErrorAt();
    if (started) {
      goto LABEL_260;
    }
  }
  cf[0] = 0;
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v158 = v1;
  if (v3)
  {
    blockBufferOut[0] = 0;
    if (v3 < 0)
    {
      startedouble d = FigSignalErrorAt();
      CFTypeRef v8 = 0;
      if (started)
      {
LABEL_260:
        int v16 = started;
        goto LABEL_237;
      }
    }
    else
    {
      uint64_t v4 = *(void *)(v1 + 24);
      uint64_t v5 = *(void *)(v1 + 64);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      dispatch_time_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, CMBlockBufferRef *))(v7 + 32);
      if (!v14)
      {
        int v16 = -12782;
        goto LABEL_237;
      }
      int v15 = v14(v4, v3, v5, cf, blockBufferOut);
      if (v15)
      {
        int v16 = v15;
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        goto LABEL_237;
      }
      CFTypeRef v8 = cf[0];
      if (cf[0])
      {
        CMBlockBufferGetDataLength((CMBlockBufferRef)cf[0]);
        int appended = CMByteStreamAppendBlockBuffer();
        if (appended)
        {
          int v16 = appended;
LABEL_198:
          CFRelease(v8);
          goto LABEL_199;
        }
      }
    }
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  uint64_t v163 = 0;
  CMBlockBufferRef destinationBuffer = 0;
  unsigned int sourceBytes = 0;
  uint64_t v9 = *(void *)(v1 + 96);
  if (v9 < 0)
  {
    int v16 = FigSignalErrorAt();
LABEL_269:
    CMBlockBufferRef v33 = 0;
    uint64_t v34 = 0;
    goto LABEL_180;
  }
  CFTypeRef v150 = v8;
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = *(void *)(v1 + 72);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *))(v13 + 32);
  if (!v17)
  {
    CMBlockBufferRef v33 = 0;
    uint64_t v34 = 0;
    int v16 = -12782;
LABEL_41:
    CFTypeRef v8 = v150;
    goto LABEL_180;
  }
  int v18 = v17(v10, v9, v11, &destinationBuffer, &v163);
  if (v18)
  {
LABEL_274:
    int v16 = v18;
    CMBlockBufferRef v33 = 0;
    uint64_t v34 = 0;
    goto LABEL_41;
  }
  CFAllocatorRef v19 = CFGetAllocator(*(CFTypeRef *)v1);
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v19, 0, 0);
  if (!Mutable)
  {
    int v18 = FigSignalErrorAt();
    if (!v18) {
      goto LABEL_27;
    }
    goto LABEL_274;
  }
  int v21 = FigAtomStreamInitWithBBuf();
  if (v21
    || (int v21 = fastStartRemaker_parseChildAtoms((uint64_t)cf, 2, (uint64_t)parseMoovAtomAndCreateTrackAtomInfoArray_atomDispatch, (uint64_t)Mutable)) != 0)
  {
    int v16 = v21;
    CFTypeRef v8 = v150;
    CFRelease(Mutable);
    goto LABEL_269;
  }
LABEL_27:
  CFIndex Count = CFArrayGetCount(Mutable);
  uint64_t v23 = destinationBuffer;
  if (Count)
  {
    int v24 = (char *)Count;
    unsigned int v25 = *(_DWORD *)(v1 + 40);
    CFIndex v26 = CFArrayGetCount(Mutable);
    uint64_t v155 = v24;
    if (v26 < 1)
    {
      unint64_t v29 = 0;
    }
    else
    {
      CFIndex v27 = v26;
      int v28 = 0;
      unint64_t v29 = 0;
      for (CFIndex i = 0; i != v27; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        if (*((_DWORD *)ValueAtIndex + 22))
        {
          if (v29 >= ValueAtIndex[12]) {
            unint64_t v32 = ValueAtIndex[12];
          }
          else {
            unint64_t v32 = v29;
          }
          if (v28) {
            unint64_t v29 = v32;
          }
          else {
            unint64_t v29 = ValueAtIndex[12];
          }
          int v28 = 1;
        }
      }
    }
    CMBlockBufferRef theBuffer = v23;
    int v16 = 0;
    if (v25 <= 1) {
      int v37 = 1;
    }
    else {
      int v37 = v25;
    }
    uint64_t v38 = v37;
    uint64_t v153 = v37 - 1;
    CFIndex v39 = 1;
    do
    {
      Dataunsigned int Length = CMBlockBufferGetDataLength(theBuffer);
      CFIndex v41 = CFArrayGetCount(Mutable);
      if (v41 >= 1)
      {
        CFIndex v42 = v41;
        for (CFIndex j = 0; j != v42; ++j)
        {
          long long v44 = CFArrayGetValueAtIndex(Mutable, j);
          int v45 = v44[22];
          if (*((unsigned char *)v44 + 64))
          {
            int v46 = 8;
          }
          else if (v45)
          {
            if ((unint64_t)(*((void *)v44 + 13) + v16) >> 32) {
              int v46 = 8;
            }
            else {
              int v46 = 4;
            }
          }
          else
          {
            int v46 = 4;
          }
          Dataunsigned int Length = DataLength - *((void *)v44 + 10) + v46 * v45 + 16;
        }
      }
      uint64_t v1 = v158;
      uint64_t v47 = *(void *)(v158 + 88) + DataLength + 8 * (*(unsigned char *)(v158 + 11) != 0) + v29 - *(void *)(v158 + 80);
      int v48 = v47 % v38;
      if (v48) {
        int v49 = v38 - v48;
      }
      else {
        int v49 = 0;
      }
      uint64_t v50 = v49;
      if ((unint64_t)(v49 - 1) <= 6) {
        uint64_t v50 = (v153 - v49 + 8) / v38 * v38 + v49;
      }
      size_t v51 = v50 + *(void *)(v158 + 88) + DataLength + 8 * (*(unsigned char *)(v158 + 11) != 0) - *(void *)(v158 + 80);
      if (v51 == v16) {
        goto LABEL_72;
      }
      if (v51 != (int)v51) {
        break;
      }
      int v16 = v50 + v47 - v29;
      BOOL v140 = CFArrayGetCount(Mutable) + 2 <= v39++;
    }
    while (!v140);
    int v16 = FigSignalErrorAt();
    if (v16) {
      goto LABEL_249;
    }
    uint64_t v50 = 0;
LABEL_72:
    uint64_t v149 = v50;
    CFTypeRef v52 = v155;
    if ((uint64_t)v155 > 0)
    {
      int v151 = v16;
      uint64_t v53 = v16;
      while (1)
      {
        uint64_t v54 = CFArrayGetValueAtIndex(Mutable, (CFIndex)(v52 - 1));
        if ((v54[10] & 0x8000000000000000) != 0) {
          goto LABEL_247;
        }
        uint64_t v55 = v54;
        __n128 v152 = v52 - 1;
        uint64_t v156 = (uint64_t)v52;
        CFAllocatorRef v56 = CFGetAllocator(*(CFTypeRef *)v158);
        uint64_t v57 = destinationBuffer;
        size_t v58 = v55[9];
        size_t v59 = v55[10];
        size_t v60 = CMBlockBufferGetDataLength(destinationBuffer);
        cf[0] = 0;
        CMBlockBufferRef v173 = 0;
        blockBufferOut[0] = 0;
        if ((v58 & 0x8000000000000000) != 0) {
          break;
        }
        size_t v61 = v60;
        int v62 = CMBlockBufferCreateWithBufferReference(v56, v57, 0, v58, 0, (CMBlockBufferRef *)cf);
        if (!v62)
        {
          int v62 = CMBlockBufferCreateWithBufferReference(v56, v57, v58, v59, 0, blockBufferOut);
          if (!v62)
          {
            size_t v63 = v59 + v58;
            if ((uint64_t)(v59 + v58) < 0) {
              break;
            }
            if (v61 == v63)
            {
              CMBlockBufferRef v154 = 0;
LABEL_83:
              uint64_t v64 = (OpaqueCMBlockBuffer *)cf[0];
              CMBlockBufferRef v65 = blockBufferOut[0];
              goto LABEL_84;
            }
            int v62 = CMBlockBufferCreateWithBufferReference(v56, v57, v63, v61 - v63, 0, &v173);
            if (!v62)
            {
              CMBlockBufferRef v154 = v173;
              goto LABEL_83;
            }
          }
        }
LABEL_142:
        int v16 = v62;
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (blockBufferOut[0]) {
          CFRelease(blockBufferOut[0]);
        }
        if (v173) {
          CFRelease(v173);
        }
        CMBlockBufferRef v154 = 0;
        CMBlockBufferRef v65 = 0;
        uint64_t v64 = 0;
        CMBlockBufferRef v33 = 0;
        uint64_t v34 = 0;
        uint64_t v100 = 0;
        uint64_t v99 = 0;
        theBufferdouble b = 0;
        CFTypeRef v83 = 0;
        if (v16) {
          goto LABEL_167;
        }
LABEL_84:
        theBufferCGFloat a = v65;
        CFAllocatorRef v66 = CFGetAllocator(*(CFTypeRef *)v158);
        unsigned int v67 = *((_DWORD *)v55 + 22);
        int v68 = *((unsigned __int8 *)v55 + 64);
        uint64_t v69 = v55[13];
        CMBlockBufferRef v173 = 0;
        blockBufferOut[0] = 0;
        dataPointerOut = 0;
        cf[0] = 0;
        cf[1] = 0;
        LODWORD(v166) = 0;
        unint64_t v70 = (unint64_t)(v69 + v53) >> 32;
        BOOL v71 = v70 == 0;
        BOOL v72 = v70 != 0;
        if (v71) {
          int v73 = 4;
        }
        else {
          int v73 = 8;
        }
        if (!v67)
        {
          int v73 = 4;
          BOOL v72 = 0;
        }
        if (v68)
        {
          int v73 = 8;
          int v74 = 1;
        }
        else
        {
          int v74 = v72;
        }
        if ((int)(v73 * v67) <= -17)
        {
          int DataPointer = FigSignalErrorAt();
          goto LABEL_151;
        }
        uint64_t v75 = (int)(v73 * v67) + 16;
        int DataPointer = CMBlockBufferCreateWithMemoryBlock(v66, 0, v75, v66, 0, 0, v75, 1u, blockBufferOut);
        if (DataPointer) {
          goto LABEL_151;
        }
        if (v67)
        {
          int DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0x10uLL, 0, 0, (char **)&v173);
          if (DataPointer) {
            goto LABEL_151;
          }
          int DataPointer = CMBlockBufferGetDataPointer(theBuffera, 0x10uLL, 0, 0, &dataPointerOut);
          if (DataPointer) {
            goto LABEL_151;
          }
          CFArrayRef v78 = dataPointerOut;
          CMBlockBufferRef v77 = v173;
          unsigned int v79 = v67;
          unsigned int v80 = v67;
          if (v68)
          {
            if (v74)
            {
              do
              {
                *(void *)CMBlockBufferRef v77 = bswap64(bswap64(*(void *)v78) + v53);
                CFArrayRef v78 = dataPointerOut + 8;
                CMBlockBufferRef v77 = (CMBlockBufferRef)((char *)v173 + 8);
                dataPointerOut += 8;
                CMBlockBufferRef v173 = (CMBlockBufferRef)((char *)v173 + 8);
                --v79;
              }
              while (v79);
            }
            else
            {
              do
              {
                *(_DWORD *)CMBlockBufferRef v77 = bswap32(v151 + bswap64(*(void *)v78));
                CFArrayRef v78 = dataPointerOut + 8;
                CMBlockBufferRef v77 = (CMBlockBufferRef)((char *)v173 + 4);
                dataPointerOut += 8;
                CMBlockBufferRef v173 = (CMBlockBufferRef)((char *)v173 + 4);
                --v80;
              }
              while (v80);
            }
          }
          else if (v74)
          {
            do
            {
              *(void *)CMBlockBufferRef v77 = bswap64(bswap32(*(_DWORD *)v78) + v53);
              CFArrayRef v78 = dataPointerOut + 4;
              CMBlockBufferRef v77 = (CMBlockBufferRef)((char *)v173 + 8);
              dataPointerOut += 4;
              CMBlockBufferRef v173 = (CMBlockBufferRef)((char *)v173 + 8);
              --v79;
            }
            while (v79);
          }
          else
          {
            do
            {
              *(_DWORD *)CMBlockBufferRef v77 = bswap32(bswap32(*(_DWORD *)v78) + v151);
              CFArrayRef v78 = dataPointerOut + 4;
              CMBlockBufferRef v77 = (CMBlockBufferRef)((char *)v173 + 4);
              dataPointerOut += 4;
              CMBlockBufferRef v173 = (CMBlockBufferRef)((char *)v173 + 4);
              --v80;
            }
            while (v80);
          }
        }
        unsigned int v81 = bswap32(v75);
        if (v74) {
          int v82 = 875982691;
        }
        else {
          int v82 = 1868788851;
        }
        cf[0] = (CFTypeRef)__PAIR64__(v82, v81);
        LODWORD(cf[1]) = 0;
        HIDWORD(cf[1]) = bswap32(v67);
        int DataPointer = CMBlockBufferReplaceDataBytes(cf, blockBufferOut[0], 0, 0x10uLL);
        if (!DataPointer)
        {
          CFTypeRef v83 = blockBufferOut[0];
          uint64_t v23 = v64;
          CFTypeRef v84 = v154;
          CFTypeRef v85 = theBuffera;
          goto LABEL_112;
        }
LABEL_151:
        int v16 = DataPointer;
        uint64_t v23 = v64;
        CFTypeRef v85 = theBuffera;
        CFTypeRef v84 = v154;
        if (blockBufferOut[0]) {
          CFRelease(blockBufferOut[0]);
        }
        CFTypeRef v83 = 0;
        if (v16)
        {
          CMBlockBufferRef v33 = 0;
          unsigned int v101 = v23;
          uint64_t v34 = 0;
          goto LABEL_251;
        }
LABEL_112:
        OSStatus v86 = CMBlockBufferAppendBufferReference(v23, v83, 0, 0, 0);
        int v16 = v86;
        if (v84 && !v86) {
          int v16 = CMBlockBufferAppendBufferReference(v23, v84, 0, 0, 0);
        }
        if (v16)
        {
          CMBlockBufferRef v33 = 0;
          unsigned int v101 = v23;
          uint64_t v34 = 0;
LABEL_251:
          uint64_t v99 = v85;
          uint64_t v100 = v101;
LABEL_254:
          theBufferdouble b = v84;
          goto LABEL_167;
        }
        size_t v87 = CMBlockBufferGetDataLength(v83);
        uint64_t v88 = v87 - CMBlockBufferGetDataLength(v85);
        if (v88 < 0)
        {
          int v91 = FigSignalErrorAt();
LABEL_253:
          int v16 = v91;
          CMBlockBufferRef v33 = 0;
          uint64_t v100 = v23;
          uint64_t v34 = 0;
          uint64_t v99 = theBuffera;
          goto LABEL_254;
        }
        size_t v89 = v55[3];
        if ((v89 & 0x8000000000000000) != 0) {
          goto LABEL_140;
        }
        unint64_t v90 = v55[7] + v88;
        if (HIDWORD(v90)) {
          goto LABEL_140;
        }
        LODWORD(cf[0]) = bswap32(v90);
        int v91 = CMBlockBufferReplaceDataBytes(cf, v23, v89, 4uLL);
        if (v91) {
          goto LABEL_253;
        }
        size_t v92 = v55[2];
        if ((v92 & 0x8000000000000000) != 0) {
          goto LABEL_140;
        }
        unint64_t v93 = v55[6] + v88;
        if (HIDWORD(v93)) {
          goto LABEL_140;
        }
        LODWORD(cf[0]) = bswap32(v93);
        int v91 = CMBlockBufferReplaceDataBytes(cf, v23, v92, 4uLL);
        if (v91) {
          goto LABEL_253;
        }
        size_t v94 = v55[1];
        if ((v94 & 0x8000000000000000) != 0) {
          goto LABEL_140;
        }
        unint64_t v95 = v55[5] + v88;
        if (HIDWORD(v95)) {
          goto LABEL_140;
        }
        LODWORD(cf[0]) = bswap32(v95);
        int v91 = CMBlockBufferReplaceDataBytes(cf, v23, v94, 4uLL);
        if (v91) {
          goto LABEL_253;
        }
        size_t v96 = *v55;
        if ((*v55 & 0x8000000000000000) != 0 || (unint64_t v97 = v55[4] + v88, HIDWORD(v97)))
        {
LABEL_140:
          int v98 = FigSignalErrorAt();
        }
        else
        {
          LODWORD(cf[0]) = bswap32(v97);
          int v98 = CMBlockBufferReplaceDataBytes(cf, v23, v96, 4uLL);
        }
        int v16 = v98;
        uint64_t v99 = theBuffera;
        if (v16)
        {
          CMBlockBufferRef v33 = 0;
          uint64_t v100 = v23;
          uint64_t v34 = 0;
          goto LABEL_254;
        }
        if (theBuffera) {
          CFRelease(theBuffera);
        }
        if (v83) {
          CFRelease(v83);
        }
        if (v84) {
          CFRelease(v84);
        }
        CFTypeRef v52 = v152;
        if (destinationBuffer) {
          CFRelease(destinationBuffer);
        }
        CMBlockBufferRef destinationBuffer = v23;
        if (v156 <= 1) {
          goto LABEL_156;
        }
      }
      int v62 = FigSignalErrorAt();
      goto LABEL_142;
    }
    uint64_t v23 = destinationBuffer;
LABEL_156:
    uint64_t v36 = v149;
  }
  else
  {
    uint64_t v36 = 0;
  }
  size_t v102 = CMBlockBufferGetDataLength(v23);
  if (v102 != (int)v102)
  {
LABEL_247:
    int v103 = FigSignalErrorAt();
    goto LABEL_248;
  }
  unsigned int sourceBytes = bswap32(v102);
  int v103 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL);
  if (v103)
  {
LABEL_248:
    int v16 = v103;
LABEL_249:
    CMBlockBufferRef v33 = 0;
    uint64_t v34 = 0;
    uint64_t v100 = 0;
    uint64_t v99 = 0;
    theBufferdouble b = 0;
    CFTypeRef v83 = 0;
    goto LABEL_167;
  }
  if (v36)
  {
    cf[0] = 0;
    blockBufferOut[0] = 0;
    if (v36 < 8)
    {
      int v148 = FigSignalErrorAt();
      CMBlockBufferRef v33 = 0;
      if (v148)
      {
        int v16 = v148;
        uint64_t v34 = 0;
        uint64_t v100 = 0;
        uint64_t v99 = 0;
        theBufferdouble b = 0;
        CFTypeRef v83 = 0;
        goto LABEL_167;
      }
    }
    else
    {
      CFAllocatorRef v104 = CFGetAllocator(*(CFTypeRef *)v1);
      OSStatus v105 = CMBlockBufferCreateWithMemoryBlock(v104, 0, v36, v104, 0, 0, v36, 1u, (CMBlockBufferRef *)cf);
      CMBlockBufferRef v33 = (CMBlockBufferRef)cf[0];
      if (v105) {
        goto LABEL_164;
      }
      OSStatus v106 = CMBlockBufferFillDataBytes(0, (CMBlockBufferRef)cf[0], 0, 0);
      if (v106)
      {
        int v16 = v106;
        CMBlockBufferRef v33 = (CMBlockBufferRef)cf[0];
LABEL_276:
        if (v33) {
          CFRelease(v33);
        }
        goto LABEL_249;
      }
      blockBufferOut[0] = (CMBlockBufferRef)(bswap32(v36) | 0x6565726600000000);
      OSStatus v105 = CMBlockBufferReplaceDataBytes(blockBufferOut, (CMBlockBufferRef)cf[0], 0, 8uLL);
      CMBlockBufferRef v33 = (CMBlockBufferRef)cf[0];
      if (v105)
      {
LABEL_164:
        int v16 = v105;
        goto LABEL_276;
      }
    }
  }
  else
  {
    CMBlockBufferRef v33 = 0;
  }
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  theBufferdouble b = 0;
  CFTypeRef v83 = 0;
  int v16 = 0;
  uint64_t v34 = v33;
  CMBlockBufferRef v33 = destinationBuffer;
  CMBlockBufferRef destinationBuffer = 0;
LABEL_167:
  if (Mutable)
  {
    CFRange v157 = v99;
    unsigned int v107 = v100;
    CFIndex v108 = CFArrayGetCount(Mutable);
    if (v108 >= 1)
    {
      CFIndex v109 = v108;
      for (CFIndex k = 0; k != v109; ++k)
      {
        CFIndex v111 = (void *)CFArrayGetValueAtIndex(Mutable, k);
        CFAllocatorRef v112 = CFGetAllocator(Mutable);
        CFAllocatorDeallocate(v112, v111);
      }
    }
    CFRelease(Mutable);
    uint64_t v100 = v107;
    uint64_t v99 = v157;
  }
  if (v99) {
    CFRelease(v99);
  }
  CFTypeRef v8 = v150;
  if (v83) {
    CFRelease(v83);
  }
  if (theBufferb) {
    CFRelease(theBufferb);
  }
  if (v100) {
    CFRelease(v100);
  }
LABEL_180:
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
  if (v16) {
    goto LABEL_193;
  }
  CMBlockBufferGetDataLength(v33);
  int v113 = CMByteStreamAppendBlockBuffer();
  if (v113)
  {
    int v16 = v113;
    goto LABEL_193;
  }
  if (!v34 || (CMBlockBufferGetDataLength(v34), (int v114 = CMByteStreamAppendBlockBuffer()) == 0))
  {
    if (*(unsigned char *)(v1 + 11))
    {
      cf[0] = 0;
      blockBufferOut[0] = 0;
      CFAllocatorRef v115 = CFGetAllocator(*(CFTypeRef *)v1);
      OSStatus v116 = CMBlockBufferCreateWithMemoryBlock(v115, 0, 8uLL, v115, 0, 0, 8uLL, 1u, (CMBlockBufferRef *)cf);
      if (!v116)
      {
        blockBufferOut[0] = (CMBlockBufferRef)0x6564697708000000;
        OSStatus v116 = CMBlockBufferReplaceDataBytes(blockBufferOut, (CMBlockBufferRef)cf[0], 0, 8uLL);
        if (!v116)
        {
          CFTypeRef v117 = cf[0];
          CMBlockBufferGetDataLength((CMBlockBufferRef)cf[0]);
          int v16 = CMByteStreamAppendBlockBuffer();
          if (!v117) {
            goto LABEL_193;
          }
          CFTypeRef v118 = v117;
          goto LABEL_191;
        }
      }
      int v16 = v116;
      CFTypeRef v118 = cf[0];
      if (cf[0]) {
LABEL_191:
      }
        CFRelease(v118);
    }
    else
    {
      int v16 = 0;
    }
LABEL_193:
    if (!v34) {
      goto LABEL_195;
    }
    goto LABEL_194;
  }
  int v16 = v114;
LABEL_194:
  CFRelease(v34);
LABEL_195:
  if (v33) {
    CFRelease(v33);
  }
  if (v8) {
    goto LABEL_198;
  }
LABEL_199:
  if (!v16)
  {
    uint64_t v119 = *(void *)(v1 + 80);
    blockBufferOut[0] = 0;
    CFIndex v120 = malloc_type_malloc(0x100000uLL, 0x6AD18DBDuLL);
    if (!v120)
    {
      int v16 = FigSignalErrorAt();
      free(0);
      if (v16) {
        goto LABEL_237;
      }
LABEL_246:
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      return;
    }
    CFAllocatorRef v121 = CFGetAllocator(*(CFTypeRef *)v1);
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v123) {
      uint64_t v124 = v123;
    }
    else {
      uint64_t v124 = 0;
    }
    char v125 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CMBlockBufferRef *))(v124 + 48);
    if (v125)
    {
      int v126 = v125(CMBaseObject, *MEMORY[0x1E4F1EC50], v121, blockBufferOut);
      if (v126)
      {
LABEL_263:
        int v16 = v126;
LABEL_221:
        int v128 = 0;
        goto LABEL_234;
      }
      CFNumberGetValue(blockBufferOut[0], kCFNumberSInt64Type, (void *)(v1 + 56));
      uint64_t v127 = v1;
      int v128 = *(unsigned __int8 *)(v1 + 9);
      if (v128)
      {
LABEL_207:
        int v16 = 0;
LABEL_234:
        if (blockBufferOut[0]) {
          CFRelease(blockBufferOut[0]);
        }
        free(v120);
        if (v16) {
          goto LABEL_237;
        }
        if (v128) {
          return;
        }
        goto LABEL_246;
      }
      unsigned int v129 = *(char **)(v127 + 48);
      uint64_t v130 = 0x100000;
      uint64_t v131 = v127;
      while (1)
      {
        uint64_t v132 = *(void *)(v131 + 104);
        if (v132 <= (uint64_t)v129) {
          break;
        }
        cf[0] = 0;
        CMBlockBufferRef v173 = 0;
        if (v132 < (unint64_t)&v129[v130]) {
          uint64_t v130 = v132 - (void)v129;
        }
        uint64_t v133 = *(void *)(v131 + 24);
        uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v134) {
          uint64_t v135 = v134;
        }
        else {
          uint64_t v135 = 0;
        }
        CFIndex v136 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, CFTypeRef *))(v135 + 8);
        if (!v136)
        {
          int v16 = -12782;
          goto LABEL_221;
        }
        int v126 = v136(v133, v130, v119, v120, cf);
        if (v126) {
          goto LABEL_263;
        }
        int v126 = CMByteStreamAppend();
        if (v126) {
          goto LABEL_263;
        }
        v119 += (uint64_t)v173;
        unsigned int v129 = (char *)v173 + *(void *)(v131 + 48);
        *(void *)(v131 + 4_Block_object_dispose(&STACK[0x290], 8) = v129;
        if (*(unsigned char *)(v131 + 9))
        {
          int v16 = 0;
          int v128 = 1;
          goto LABEL_234;
        }
      }
      CFIndex v137 = (void *)v131;
      uint64_t v138 = *(void *)(v131 + 72);
      uint64_t v139 = v137[10];
      BOOL v140 = v139 < v138 && v138 < v139 + v132;
      if (!v140)
      {
        int v128 = 0;
        goto LABEL_207;
      }
      LODWORD(v173) = 1701147238;
      cf[0] = 0;
      uint64_t v141 = v137[7];
      uint64_t v142 = v137[4];
      uint64_t v143 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v143) {
        uint64_t v144 = v143;
      }
      else {
        uint64_t v144 = 0;
      }
      CFArrayRef v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, CFTypeRef *))(v144 + 16);
      if (v145)
      {
        int v16 = v145(v142, 4, v138 - v139 + v141 + 4, &v173, cf);
        if (!v16)
        {
          int v128 = *(unsigned __int8 *)(v158 + 9);
          goto LABEL_234;
        }
        goto LABEL_221;
      }
    }
    int v128 = 0;
    int v16 = -12782;
    goto LABEL_234;
  }
LABEL_237:
  LODWORD(blockBufferOut[0]) = v16;
  CFAllocatorRef v146 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  cf[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, blockBufferOut);
  if (cf[0]) {
    CFDictionaryRef v147 = CFDictionaryCreate(v146, (const void **)&kFigRemakerNotificationParameter_OSStatus, cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else {
    CFDictionaryRef v147 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v147) {
    CFRelease(v147);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

uint64_t fastStartRemaker_getFileTypeAtom()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

uint64_t fastStartRemaker_getMovieAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t fastStartRemaker_getMovieDataAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!result)
  {
    if (*(unsigned char *)(a2 + 112))
    {
      uint64_t result = 0;
      *(void *)(a2 + 104) = -*(void *)(a2 + 80);
    }
    else
    {
      *(void *)(a2 + 80) = 0;
      *(unsigned char *)(a2 + 112) = 1;
      uint64_t result = FigAtomStreamGetCurrentAtomHeaderSize();
      if (!result) {
        return 4294955167;
      }
    }
  }
  return result;
}

uint64_t fastStartRemaker_parseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = 0;
  uint64_t v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (result) {
      return result;
    }
    if (a2 >= 1)
    {
      int v11 = 0;
      uint64_t v12 = v9;
      uint64_t v13 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v13 += 2;
        v12 += 2;
        if (a2 == v11) {
          goto LABEL_12;
        }
      }
      int v14 = 1 << v11;
      if ((*((unsigned char *)v12 - 4) & 1) != 0 && (v14 & v8) != 0) {
        return FigSignalErrorAt();
      }
      v8 |= v14;
      uint64_t result = (*v12)(a1, a4);
      if (result == 1937010544)
      {
        uint64_t result = 0;
        goto LABEL_17;
      }
      if (result) {
        return result;
      }
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if (result)
    {
      if (result == -12890) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
LABEL_17:
      if (a2 >= 1)
      {
        int v15 = 0;
        int v16 = (char *)(a3 + 4);
        do
        {
          char v17 = *v16;
          v16 += 16;
          if ((v17 & 2) != 0 && ((v8 >> v15) & 1) == 0) {
            uint64_t result = FigSignalErrorAt();
          }
          ++v15;
        }
        while (a2 != v15);
      }
      return result;
    }
  }
}

uint64_t fastStartRemaker_getTrackAtom(int a1, void *cf)
{
  CFAllocatorRef v3 = CFGetAllocator(cf);
  uint64_t v4 = CFAllocatorAllocate(v3, 112, 0);
  if (!v4) {
    return 4294955196;
  }
  uint64_t v5 = v4;
  memset(v10, 0, sizeof(v10));
  v4[5] = 0u;
  void v4[6] = 0u;
  void v4[3] = 0u;
  v4[4] = 0u;
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  void v4[2] = 0u;
  uint64_t CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (CurrentAtomGlobalOffset
    || (uint64_t CurrentAtomGlobalOffset = FigAtomStreamInitWithParent(), CurrentAtomGlobalOffset))
  {
    startedouble d = CurrentAtomGlobalOffset;
    goto LABEL_8;
  }
  startedouble d = fastStartRemaker_parseChildAtoms((uint64_t)v10, 1, (uint64_t)&fastStartRemaker_getTrackAtom_atomDispatch, (uint64_t)v5);
  if (started)
  {
LABEL_8:
    CFAllocatorRef v9 = CFGetAllocator(cf);
    CFAllocatorDeallocate(v9, v5);
    return started;
  }
  CFArrayAppendValue((CFMutableArrayRef)cf, v5);
  return started;
}

uint64_t fastStartRemaker_getMovieExtendsAtom()
{
  return 4294955167;
}

uint64_t fastStartRemaker_getMediaAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!result)
  {
    memset(v4, 0, sizeof(v4));
    uint64_t result = FigAtomStreamInitWithParent();
    if (!result) {
      return fastStartRemaker_parseChildAtoms((uint64_t)v4, 1, (uint64_t)&fastStartRemaker_getMediaAtom_atomDispatch, a2);
    }
  }
  return result;
}

uint64_t fastStartRemaker_getMediaInfoAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!result)
  {
    memset(v4, 0, sizeof(v4));
    uint64_t result = FigAtomStreamInitWithParent();
    if (!result) {
      return fastStartRemaker_parseChildAtoms((uint64_t)v4, 1, (uint64_t)&fastStartRemaker_getMediaInfoAtom_atomDispatch, a2);
    }
  }
  return result;
}

uint64_t fastStartRemaker_getSampleTableAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!result)
  {
    memset(v4, 0, sizeof(v4));
    uint64_t result = FigAtomStreamInitWithParent();
    if (!result) {
      return fastStartRemaker_parseChildAtoms((uint64_t)v4, 2, (uint64_t)&fastStartRemaker_getSampleTableAtom_atomDispatch, a2);
    }
  }
  return result;
}

uint64_t fastStartRemaker_getChunkOffsetAtom()
{
  return fastStartRemaker_getChunkOffsetAtomInfo();
}

uint64_t fastStartRemaker_getChunkOffset64Atom()
{
  return fastStartRemaker_getChunkOffsetAtomInfo();
}

uint64_t fastStartRemaker_getChunkOffsetAtomInfo()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

uint64_t RegisterFigReportingAgentBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigReportingAgentGetTypeID()
{
  MEMORY[0x19970EE10](&FigReportingAgentGetClassID_sRegisterFigReportingAgentOnce, RegisterFigReportingAgentBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigReportingAgentCreateFromAsset(uint64_t a1, int a2, const __CFDictionary *a3, void *a4)
{
  v47[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v47[0] = 0;
  CFTypeRef v45 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (!v11) {
    goto LABEL_14;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v13 = v11(CMBaseObject, @"assetProperty_CreationOptionsDictionary", *MEMORY[0x1E4F1CF80], &cf);
  if (v13)
  {
LABEL_68:
    uint64_t v22 = v13;
    CFMutableDictionaryRef v19 = 0;
    goto LABEL_69;
  }
  if (!cf)
  {
    uint64_t v22 = 0;
    int v20 = 0;
    int v21 = 0;
    goto LABEL_20;
  }
  uint64_t v14 = FigAssetGetCMBaseObject(a1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v16 = v15 ? v15 : 0;
  char v17 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v16 + 48);
  if (!v17)
  {
LABEL_14:
    CFMutableDictionaryRef v19 = 0;
    goto LABEL_15;
  }
  uint64_t v13 = v17(v14, @"assetProperty_InstanceUUID", v12, v47);
  if (v13) {
    goto LABEL_68;
  }
  if (FigIsItOKToLogURLs()) {
    BOOL v18 = FPSupport_GetAssetDoNotLogURLs(a1) == 0;
  }
  else {
    BOOL v18 = 0;
  }
  DataCFNumberRef Value = (const __CFData *)FigCFDictionaryGetDataValue();
  DictionaryCFNumberRef Value = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  if (a3) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v12, 0, a3);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFMutableDictionaryRef v19 = MutableCopy;
  uint64_t v27 = FigAssetGetCMBaseObject(a1);
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v29 + 48);
  if (v30)
  {
    char v43 = v18;
    uint64_t v31 = v30(v27, @"assetProperty_CreationURL", v12, &v45);
    if (!v31)
    {
      int v32 = FigCFURLIsLocalResource();
      FigCFDictionarySetInt();
      CFStringRef v33 = (const __CFString *)FigCFHTTPCopyClientProcessName(DataValue);
      int v20 = 0;
      if (a2 == 2 && v32)
      {
        CFStringRef v34 = v33;
        if (v33)
        {
          CFTypeRef v35 = CFStringCreateMutableCopy(v12, 0, v33);
          int v20 = v35;
          if (!v35)
          {
            int v21 = 0;
            uint64_t v22 = 4294955295;
LABEL_65:
            CFRelease(v34);
            goto LABEL_16;
          }
          CFStringAppend(v35, @"_offline");
          CFRetain(v20);
          CFRelease(v34);
          CFStringRef v34 = v20;
        }
      }
      else
      {
        CFStringRef v34 = v33;
      }
      int v21 = (const void *)FigCFHTTPCopyClientBundleIdentifier(DataValue);
      CFStringRef v44 = v34;
      if (DictionaryValue)
      {
        CFNumberRef Value = CFDictionaryGetValue(DictionaryValue, @"ServiceIdentifier");
        if (!Value || (v37 = Value, CFTypeID v38 = CFGetTypeID(Value), v38 != CFStringGetTypeID())) {
          int v37 = 0;
        }
        fra_setCFStringRefValueFromKeyInDict(v19, @"StorefrontID", DictionaryValue);
        fra_setCFStringRefValueFromKeyInDict(v19, @"MediaIdentifier", DictionaryValue);
        fra_setCFStringRefValueFromKeyInDict(v19, @"ContentProvider", DictionaryValue);
        if (v19)
        {
          if (@"ServiceInformationKey")
          {
            CFIndex v39 = CFDictionaryGetValue(DictionaryValue, @"ServiceInformationKey");
            if (v39)
            {
              CFTypeID v40 = CFGetTypeID(v39);
              if (v40 == CFDictionaryGetTypeID()) {
                FigCFDictionarySetValueFromKeyInDict();
              }
            }
          }
        }
        CFIndex v41 = CFDictionaryGetValue(DictionaryValue, @"HierarchyToken");
        CFStringRef v34 = v44;
      }
      else
      {
        CFIndex v41 = 0;
        int v37 = 0;
      }
      uint64_t v22 = FigReportingAgentCreate(v47[0], v34, v37, v41, v21, a2, v19, v43, a4);
      if (!v22)
      {
        if (dword_1E93514F0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFStringRef v34 = v44;
        }
        if (a2 == 1 || a2 == 3 || a2 == 2) {
          FigCAStatsReportingSubmitData();
        }
      }
      if (!v34) {
        goto LABEL_16;
      }
      goto LABEL_65;
    }
    uint64_t v22 = v31;
LABEL_69:
    int v20 = 0;
    int v21 = 0;
    goto LABEL_16;
  }
LABEL_15:
  int v20 = 0;
  int v21 = 0;
  uint64_t v22 = 4294954514;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
LABEL_20:
  if (v47[0]) {
    CFRelease(v47[0]);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v22;
}

const void *fra_setCFStringRefValueFromKeyInDict(const void *result, void *key, CFDictionaryRef theDict)
{
  if (result)
  {
    if (key)
    {
      uint64_t result = CFDictionaryGetValue(theDict, key);
      if (result)
      {
        CFTypeID v3 = CFGetTypeID(result);
        uint64_t result = (const void *)CFStringGetTypeID();
        if ((const void *)v3 == result)
        {
          return (const void *)FigCFDictionarySetValueFromKeyInDict();
        }
      }
    }
  }
  return result;
}

uint64_t FigReportingAgentCreate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, const __CFDictionary *a7, char a8, void *a9)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a9) {
    return 4294955296;
  }
  MEMORY[0x19970EE10](&FigReportingAgentCreate_sCreateStaticKeyArrayForTCPIStatsOnce, fra_createStaticKeyArrayForTCPIStats);
  uint64_t GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
  if (!GlobalNetworkBufferingQueue) {
    return 0;
  }
  uint64_t v14 = GlobalNetworkBufferingQueue;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigReportingAgentGetClassID_sRegisterFigReportingAgentOnce, RegisterFigReportingAgentBaseType);
  uint64_t v16 = CMDerivedObjectCreate();
  if (v16) {
    return v16;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955295;
  }
  uint64_t v18 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 124) = CFPreferencesGetAppIntegerValue(@"force_reporting", @"com.apple.coremedia", 0) != 0;
  CFTypeRef v19 = a2 ? CFRetain(a2) : 0;
  *(void *)(v18 + 16) = v19;
  CFTypeRef v20 = a3 ? CFRetain(a3) : 0;
  *(void *)(v18 + 40) = v20;
  fra_setAdditionalReportingConfigParams(v18, a7);
  CFTypeRef v21 = a1 ? CFRetain(a1) : 0;
  *(void *)(v18 + 24) = v21;
  CFTypeRef v22 = a4 ? CFRetain(a4) : 0;
  *(void *)(v18 + 4_Block_object_dispose(&STACK[0x290], 8) = v22;
  CFTypeRef v23 = a5 ? CFRetain(a5) : 0;
  *(void *)(v18 + 56) = v23;
  *(void *)(v18 + 104) = v14;
  dispatch_retain(v14);
  *(void *)(v18 + 96) = FigSimpleMutexCreate();
  *(_DWORD *)(v18 + 120) = a6;
  *(_DWORD *)(v18 + 136) = 0;
  FigCFDictionaryGetIntIfPresent();
  *(unsigned char *)(v18 + 140) = 0;
  *(unsigned char *)(v18 + 160) = a8;
  uint64_t v16 = FigReportingSessionStatsCreate((void *)v18);
  if (v16) {
    return v16;
  }
  if (!*(void *)v18) {
    return 4294955295;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v25 = Mutable;
  if (a5 && Mutable) {
    CFDictionarySetValue(Mutable, @"FRM_BundleName", a5);
  }
  switch(a6)
  {
    case 1:
      uint64_t v26 = FigReportingModeratorCreateForHLS((uint64_t)v15, *(const void **)v18, v25, (void *)(v18 + 112));
      goto LABEL_30;
    case 2:
      goto LABEL_29;
    case 3:
      uint64_t v26 = FigReportingModeratorCreateForStreamingAssetDownloader((uint64_t)v15, *(const void **)v18, (void *)(v18 + 112));
      goto LABEL_30;
    case 4:
      *(unsigned char *)(v18 + 142) = 1;
LABEL_29:
      uint64_t v26 = FigReportingModeratorCreateForCRABS((uint64_t)v15, *(const void **)v18, (uint64_t)v25, (void *)(v18 + 112));
LABEL_30:
      uint64_t v27 = v26;
      if (v26) {
        goto LABEL_40;
      }
      if (!*(void *)(v18 + 112))
      {
        uint64_t v35 = FigSignalErrorAt();
LABEL_48:
        uint64_t v27 = v35;
        goto LABEL_40;
      }
      *(unsigned char *)(v18 + 125) = 1;
      *(_DWORD *)(v18 + 32) = arc4random();
      *(double *)(v18 + 144) = (double)arc4random() / 4294967300.0;
      if (*(_DWORD *)(v18 + 120) != 1)
      {
LABEL_38:
        uint64_t v27 = 0;
        *a9 = 0;
        goto LABEL_40;
      }
      uint64_t v28 = CMBaseObjectGetDerivedStorage();
      if (!v28)
      {
LABEL_39:
        uint64_t v27 = 4294955296;
        goto LABEL_40;
      }
      uint64_t v29 = v28;
      if (!*(unsigned char *)(v28 + 132))
      {
        *(void *)(v28 + 80) = FigGetUpTimeNanoseconds();
        dispatch_source_t v30 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v29 + 104));
        *(void *)(v29 + 72) = v30;
        if (v30)
        {
          uint64_t v31 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
          if (v31)
          {
            dispatch_set_context(*(dispatch_object_t *)(v29 + 72), v31);
            int v32 = *(NSObject **)(v29 + 72);
            dispatch_time_t v33 = dispatch_walltime(0, 300000000000);
            dispatch_source_set_timer(v32, v33, 0x45D964B800uLL, 0xEE6B280uLL);
            dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v29 + 72), (dispatch_function_t)fra_handlePeriodicTimerCallback);
            dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v29 + 72), (dispatch_function_t)fra_handlePeriodicTimerCancelCallback);
            dispatch_resume(*(dispatch_object_t *)(v29 + 72));
            goto LABEL_38;
          }
        }
        uint64_t v35 = FigSignalErrorAt();
        if (!v35) {
          goto LABEL_38;
        }
        goto LABEL_48;
      }
      uint64_t v27 = 4294955290;
LABEL_40:
      if (v25) {
        CFRelease(v25);
      }
      break;
    default:
      goto LABEL_39;
  }
  return v27;
}

CFArrayRef fra_createStaticKeyArrayForTCPIStats()
{
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigReportingTCPInfoKeyForTimeWeightedStats, 8, 0);
  kFigReportingEventKeyArray_TCPInfoKeyForTimeWeightedStats = (uint64_t)result;
  return result;
}

void fra_setAdditionalReportingConfigParams(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1) {
    return;
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 64);
  if (a2 && !v4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v4 = a2;
LABEL_8:
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v5, 0, v4);
    goto LABEL_9;
  }
  if (!a2 && v4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_8;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if ((unint64_t)a2 | (unint64_t)v4)
  {
    CFMutableDictionaryRef v10 = CFDictionaryCreateMutableCopy(v9, 0, v4);
    if (!v10) {
      return;
    }
    CFMutableDictionaryRef v7 = v10;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fra_mergeDictApplier, v10);
    goto LABEL_10;
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_9:
  CFMutableDictionaryRef v7 = MutableCopy;
  if (!MutableCopy) {
    return;
  }
LABEL_10:
  if (*(unsigned char *)(a1 + 124))
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  FigCFDictionarySetInt();
  unsigned int v8 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = v7;
  CFRetain(v7);
  if (v8) {
    CFRelease(v8);
  }

  CFRelease(v7);
}

void fra_handlePeriodicTimerCallback(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v1)
    {
      BOOL v2 = (const void *)v1;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v4 = DerivedStorage;
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
        fra_issueAndCopyReportingEvent(v4, 110, 0, 0, 0, 0);
        MEMORY[0x19970E930](*(void *)(v4 + 96));
      }
      CFRelease(v2);
    }
  }
}

void fra_handlePeriodicTimerCancelCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigReportingAgentStatsUpdateSampleValueWithBool(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    uint64_t v4 = 100;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!a1) {
    return 4294955296;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFMutableDictionaryRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, v4);
}

uint64_t FigReportingAgentSetStatsForAllKeys(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  CFIndex v5 = 0;
  while (1)
  {
    CFIndex v6 = v4 ? CFArrayGetCount(v4) : 0;
    if (v5 >= v6) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
    uint64_t Value = FigCFDictionaryGetValue();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, void))(v10 + 48);
    if (!v11)
    {
      uint64_t v13 = 4294954514;
      if (!v4) {
        return v13;
      }
      goto LABEL_16;
    }
    uint64_t v12 = v11(a1, a2, ValueAtIndex, Value, 0);
    ++v5;
    if (v12)
    {
      uint64_t v13 = v12;
      if (!v4) {
        return v13;
      }
      goto LABEL_16;
    }
  }
  uint64_t v13 = 0;
  if (v4) {
LABEL_16:
  }
    CFRelease(v4);
  return v13;
}

CFStringRef FigReportingAgentCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigReportingAgent %p]", a1);
}

uint64_t reportingAgentInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
  reportingAgentInvalidateGuts(a1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 96));
  return 0;
}

uint64_t reportingAgentFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  reportingAgentInvalidateGuts(a1);
  CFTypeID v3 = *(NSObject **)(DerivedStorage + 104);
  if (v3) {
    dispatch_release(v3);
  }

  return FigSimpleMutexDestroy();
}

__CFString *reportingAgentCopyDebugDescription()
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigReportingAgent : ");
  return Mutable;
}

uint64_t reportingAgentSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955296;
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
  if (*(unsigned char *)(v6 + 132))
  {
    uint64_t v8 = 4294955290;
    goto LABEL_16;
  }
  if (!CFEqual(a2, @"IssueEndEvents"))
  {
    if (CFEqual(a2, @"Timebase"))
    {
      if (!a3) {
        goto LABEL_18;
      }
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 != CMTimebaseGetTypeID()) {
        goto LABEL_18;
      }
      uint64_t v10 = *(void *)(v6 + 112);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void (**)(uint64_t, const void *, const void *))(v12 + 56);
      if (v13) {
        v13(v10, a2, a3);
      }
    }
    uint64_t v8 = 0;
    goto LABEL_16;
  }
  if (!a3 || (CFTypeID v7 = CFGetTypeID(a3), v7 != CFBooleanGetTypeID()))
  {
LABEL_18:
    uint64_t v8 = 4294955296;
    goto LABEL_16;
  }
  uint64_t v8 = 0;
  *(unsigned char *)(v6 + 125) = *MEMORY[0x1E4F1CFD0] == (void)a3;
LABEL_16:
  MEMORY[0x19970E930](*(void *)(v6 + 96));
  return v8;
}

void reportingAgentInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 132)) {
    return;
  }
  uint64_t v3 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 125) && *(_DWORD *)(DerivedStorage + 120) != 3) {
    fra_ensureRTCReportingConnection(a1, 0);
  }
  CFArrayRef v4 = *(NSObject **)(v3 + 72);
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(*(dispatch_object_t *)(v3 + 72));
  }
  if (*(unsigned char *)(v3 + 125))
  {
    int v5 = *(_DWORD *)(v3 + 120);
    if ((v5 - 1) < 2 || v5 == 4)
    {
      fra_issueAndCopyReportingEvent(v3, 112, 0, 0, 1, 0);
      fra_issueAndCopyReportingEvent(v3, 110, 0, 0, 1, 0);
      uint64_t v7 = v3;
      uint64_t v8 = 101;
      int v9 = 0;
LABEL_16:
      fra_issueAndCopyReportingEvent(v7, v8, 0, v9, 1, 0);
      goto LABEL_17;
    }
    if (v5 == 3)
    {
      uint64_t v7 = v3;
      uint64_t v8 = 701;
      int v9 = 1;
      goto LABEL_16;
    }
  }
LABEL_17:
  if (*(void *)v3) {
    CFRelease(*(CFTypeRef *)v3);
  }
  uint64_t v10 = *(const void **)(v3 + 8);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(v3 + 16);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(v3 + 24);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(const void **)(v3 + 40);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(const void **)(v3 + 48);
  if (v14) {
    CFRelease(v14);
  }
  CFAllocatorRef v15 = *(const void **)(v3 + 56);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(const void **)(v3 + 64);
  if (v16) {
    CFRelease(v16);
  }
  char v17 = *(const void **)(v3 + 112);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(v3 + 152);
  if (v18) {
    CFRelease(v18);
  }
  *(unsigned char *)(v3 + 132) = 1;
}

uint64_t fra_ensureRTCReportingConnection(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 142)
      && (*(_DWORD *)(result + 136) & 0xFFFFFFFD) == 0
      && !*(unsigned char *)(result + 132)
      && !*(void *)(result + 8))
    {
      fra_setAdditionalReportingConfigParams(result, a2);
      if (*(unsigned char *)(v4 + 124))
      {
        int v5 = @"com.apple.coremedia.apple_internal";
        uint64_t v6 = @"CM_AppleInternal";
      }
      else
      {
        uint64_t v6 = *(__CFString **)(v4 + 16);
        int v5 = *(__CFString **)(v4 + 40);
      }
      uint64_t result = FigRTCReportingCreate(*(_DWORD *)(v4 + 32), *(void *)(v4 + 24), *(_DWORD *)(v4 + 120), (uint64_t)v6, (uint64_t)v5, *(const void **)(v4 + 48), *(void *)(v4 + 56), *(const __CFDictionary **)(v4 + 64), *(unsigned char *)(v4 + 140), *(unsigned char *)(v4 + 160), (uint64_t *)(v4 + 8));
      if (!result) {
        *(_DWORD *)(v4 + 136) = 1;
      }
    }
  }
  return result;
}

uint64_t fra_issueAndCopyReportingEvent(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4, int a5, CFDictionaryRef *a6)
{
  CFTypeRef v70 = 0;
  CFTypeRef cf = 0;
  int v69 = 0;
  CFTypeRef v68 = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a1)
  {
    uint64_t v52 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_96;
  }
  uint64_t v14 = UpTimeNanoseconds;
  if (!a4 && !*(void *)(a1 + 8) && !*(unsigned char *)(a1 + 142))
  {
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_120;
  }
  if (*(unsigned char *)(a1 + 132))
  {
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_117;
  }
  if (a6) {
    *a6 = 0;
  }
  CFAllocatorRef v15 = *v13;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v52 = 4294955295;
    goto LABEL_96;
  }
  uint64_t v17 = *(void *)(a1 + 112);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CFTypeRef v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(v19 + 8);
  if (!v20)
  {
LABEL_95:
    uint64_t v52 = 4294954514;
    goto LABEL_96;
  }
  uint64_t v21 = v20(v17, a2, &cf, &v70);
  if (v21) {
    goto LABEL_94;
  }
  if (a2 == 101)
  {
    uint64_t v22 = *(void *)a1;
    CFTypeRef v23 = cf;
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    dispatch_source_t v30 = *(uint64_t (**)(uint64_t, CFTypeRef, CFMutableDictionaryRef))(v25 + 16);
    if (!v30) {
      goto LABEL_95;
    }
    uint64_t v21 = v30(v22, v23, Mutable);
    if (!v21)
    {
      CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v31)
      {
        CFMutableDictionaryRef v32 = v31;
        uint64_t v33 = *(void *)a1;
        uint64_t v34 = kFigReportingEventKeyArray_TCPInfoKeyForTimeWeightedStats;
        uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v35) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
        CFTypeRef v45 = *(unsigned int (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(v36 + 16);
        if (v45 && !v45(v33, v34, v32))
        {
          fra_updatePercentValue();
          fra_updatePercentValue();
          fra_updatePercentValue();
          fra_updatePercentValue();
        }
        CFRelease(v32);
      }
      goto LABEL_40;
    }
LABEL_94:
    uint64_t v52 = v21;
    goto LABEL_96;
  }
  if ((int)a2 <= 2000)
  {
    if (a2 == 110)
    {
      uint64_t v37 = *(void *)a1;
      CFTypeRef v67 = cf;
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v64 = *(uint64_t (**)(uint64_t, CFTypeRef, CFMutableDictionaryRef))(v39 + 8);
      if (!v64) {
        goto LABEL_95;
      }
      uint64_t v21 = v64(v37, v67, Mutable);
      if (v21) {
        goto LABEL_94;
      }
      if (a5) {
        FigCFDictionarySetInt();
      }
      FigCFDictionarySetInt64();
      *(void *)(a1 + 80) = v14;
      goto LABEL_40;
    }
    if (a2 == 112)
    {
      uint64_t v26 = *(void *)a1;
      CFTypeRef v27 = cf;
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      size_t v63 = *(uint64_t (**)(uint64_t, CFTypeRef, CFMutableDictionaryRef))(v29 + 24);
      if (!v63) {
        goto LABEL_95;
      }
      uint64_t v21 = v63(v26, v27, Mutable);
      if (v21) {
        goto LABEL_94;
      }
      goto LABEL_40;
    }
  }
  else if ((a2 - 2001) < 2 || a2 == 3001)
  {
    goto LABEL_40;
  }
  uint64_t v40 = *(void *)a1;
  CFTypeRef v42 = v70;
  CFTypeRef v41 = cf;
  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v43) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = 0;
  }
  CMBlockBufferRef v65 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, CFMutableDictionaryRef))(v44 + 32);
  if (!v65) {
    goto LABEL_95;
  }
  uint64_t v21 = v65(v40, v41, v42, Mutable);
  if (v21) {
    goto LABEL_94;
  }
LABEL_40:
  uint64_t v46 = *(void *)(a1 + 112);
  uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v47) {
    uint64_t v48 = v47;
  }
  else {
    uint64_t v48 = 0;
  }
  int v49 = *(void (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(v48 + 24);
  if (v49) {
    v49(v46, a2, Mutable);
  }
  if (a3) {
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)fra_mergeDictApplier, Mutable);
  }
  if (a2 == 110)
  {
    fra_issueDeferredRTCReportingEvents(a1);
    uint64_t v50 = fra_issueRTCReportingEventRealTime(a1, 110, Mutable);
LABEL_57:
    uint64_t v52 = v50;
    goto LABEL_58;
  }
  if ((a2 & 0xFFFFFFFE) == 0x320)
  {
    int v51 = a2 == 800;
    if (!*(unsigned char *)(a1 + 132))
    {
      if (*(unsigned char *)(a1 + 142)) {
        goto LABEL_59;
      }
      if (*(unsigned __int8 *)(a1 + 141) != v51)
      {
        *(unsigned char *)(a1 + 141) = v51;
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        uint64_t v50 = FigNetworkInterfaceReporterReportStreamingActivity(Mutable);
        goto LABEL_57;
      }
LABEL_120:
      uint64_t v52 = 4294955296;
      goto LABEL_96;
    }
LABEL_117:
    uint64_t v52 = 4294955290;
    goto LABEL_96;
  }
  if (a2 == 112)
  {
    if (!CFDictionaryGetCount(Mutable)) {
      goto LABEL_59;
    }
LABEL_56:
    uint64_t v50 = fra_issueRTCReportingEvent(a1, a2, Mutable, a4);
    goto LABEL_57;
  }
  if ((a2 - 2001) < 2) {
    goto LABEL_59;
  }
  if (a2 == 113 && !a4)
  {
    CFArrayRef v61 = *(const __CFArray **)(a1 + 152);
    if (v61 && CFArrayGetCount(v61) >= 10) {
      fra_issueDeferredRTCReportingEvents(a1);
    }
    if (!*(unsigned char *)(a1 + 142))
    {
      if (*(void *)(a1 + 152)
        || (CFMutableArrayRef v62 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]), (*(void *)(a1 + 152) = v62) != 0))
      {
        FigCFDictionarySetInt();
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 152), Mutable);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    goto LABEL_59;
  }
  if (a2 != 101)
  {
    if (a2 == 3001) {
      goto LABEL_59;
    }
    if (a2 == 901)
    {
      fra_issuePowerlogEvent((uint64_t *)a1);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  fra_issueDeferredRTCReportingEvents(a1);
  uint64_t v52 = fra_issueRTCReportingEventRealTime(a1, 101, Mutable);
  CFDictionaryGetValue(Mutable, @"PlayTimeWC");
  FigCFNumberGetFloat64();
  FigCAStatsReportingSubmitData();
LABEL_58:
  if (v52) {
    goto LABEL_96;
  }
LABEL_59:
  uint64_t v53 = *(void *)(a1 + 112);
  uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v54) {
    uint64_t v55 = v54;
  }
  else {
    uint64_t v55 = 0;
  }
  CFAllocatorRef v56 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 16);
  if (!v56) {
    goto LABEL_95;
  }
  uint64_t v21 = v56(v53, a2);
  if (v21) {
    goto LABEL_94;
  }
  uint64_t v57 = *(void *)(a1 + 112);
  uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v58) {
    uint64_t v59 = v58;
  }
  else {
    uint64_t v59 = 0;
  }
  size_t v60 = *(void (**)(uint64_t, uint64_t, int *, CFTypeRef *))(v59 + 32);
  if (v60)
  {
    v60(v57, a2, &v69, &v68);
    if (v69) {
      fra_issueAndCopyReportingEvent(a1);
    }
  }
  uint64_t v52 = 0;
LABEL_96:
  if (cf) {
    CFRelease(cf);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (!v52 && a6 && Mutable)
  {
    *a6 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Mutable);
    goto LABEL_106;
  }
  if (Mutable) {
LABEL_106:
  }
    CFRelease(Mutable);
  if (v68) {
    CFRelease(v68);
  }
  return v52;
}

void fra_mergeDictApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (key && value)
  {
    if (theDict) {
      CFDictionarySetValue(theDict, key, value);
    }
  }
}

void fra_issueDeferredRTCReportingEvents(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (!*(unsigned char *)(a1 + 142)) {
    FigCFArrayApplyFunction();
  }
  if (v1)
  {
    CFRelease(v1);
  }
}

uint64_t fra_issueRTCReportingEventRealTime(uint64_t result, uint64_t a2, const void *a3)
{
  if (result)
  {
    if (*(unsigned char *)(result + 142) || !*(void *)(result + 8))
    {
      return 0;
    }
    else if (*(unsigned char *)(result + 132))
    {
      return 4294955290;
    }
    else
    {
      return FigRTCReportingSendMsgRealTime(*(void *)(result + 8), a2, 0, a3);
    }
  }
  return result;
}

void fra_issuePowerlogEvent(uint64_t *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v3 = Mutable;
  uint64_t v14 = 0;
  if (a1 && Mutable)
  {
    uint64_t v4 = a1[14];
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *, void))(v6 + 8);
    if (v7)
    {
      if (!v7(v4, 900, &v14, 0))
      {
        uint64_t v8 = v14;
        if (v14)
        {
          uint64_t v9 = *a1;
          uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v10) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = 0;
          }
          uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, __CFDictionary *))(v11 + 16);
          if (v12)
          {
            if (!v12(v9, v8, v3))
            {
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValueFromKeyInDict();
              CFDictionaryRemoveValue(v3, @"IBR");
              CFDictionaryRemoveValue(v3, @"PlayerTWIBR");
              CFDictionaryRemoveValue(v3, @"PlayerTWIABR");
              CFDictionaryRemoveValue(v3, @"PowerLogID");
              FigCFDictionarySetValue();
              int v13 = *((_DWORD *)a1 + 30);
              if (v13 == 1 || v13 == 4 || v13 == 2) {
                FigPlaybackLogPowerEvent();
              }
            }
          }
        }
      }
    }
    goto LABEL_18;
  }
  if (Mutable) {
LABEL_18:
  }
    CFRelease(v3);
}

uint64_t fra_issueRTCReportingEvent(uint64_t result, uint64_t a2, __CFDictionary *a3, int a4)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (*(unsigned char *)(result + 142)) {
    return 0;
  }
  int v6 = a2;
  uint64_t v7 = *(void *)(result + 8);
  if (!a4 && !v7) {
    return 4294955296;
  }
  if (*(unsigned char *)(v4 + 132)) {
    return 4294955290;
  }
  ++*(_DWORD *)(v4 + 128);
  if (v7)
  {
    return FigRTCReportingSendMsgWithErrors(v7, a2, 0, (uint64_t)a3);
  }
  if (!a4) {
    return 0;
  }
  if (*(unsigned char *)(v4 + 124))
  {
    uint64_t v8 = @"com.apple.coremedia.apple_internal";
    uint64_t v9 = @"CM_AppleInternal";
  }
  else
  {
    uint64_t v9 = *(__CFString **)(v4 + 16);
    uint64_t v8 = *(__CFString **)(v4 + 40);
  }
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(v4 + 128));
  if (!v10) {
    return 4294955295;
  }
  CFNumberRef v11 = v10;
  CFDictionarySetValue(a3, @"EventNumber", v10);
  uint64_t v12 = FigRTCReportingSendOneMessageWithDictionary(*(_DWORD *)(v4 + 32), *(void *)(v4 + 24), *(_DWORD *)(v4 + 120), (uint64_t)v9, (uint64_t)v8, *(const void **)(v4 + 48), *(void *)(v4 + 56), *(const __CFDictionary **)(v4 + 64), v6, SHIWORD(v6), 0, 0, *(unsigned char *)(v4 + 160), (uint64_t)a3);
  CFRelease(v11);
  return v12;
}

uint64_t fra_updatePercentValue()
{
  return FigCFDictionaryGetInt64IfPresent();
}

uint64_t fra_issueDeferredRTCReportingEventApplierFunc(__CFDictionary *a1, uint64_t a2)
{
  uint64_t result = FigCFDictionaryGetIntIfPresent();
  if (result)
  {
    CFDictionaryRemoveValue(a1, @"deferredEventID");
    return fra_issueRTCReportingEvent(a2, 0, a1, 0);
  }
  return result;
}

uint64_t reportingAgentIssueAndCopyRTCReportingEvent(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFDictionaryRef *a5)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v9 = result;
    if (*(unsigned char *)(result + 132))
    {
      return 4294955290;
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(result + 96));
      if ((a4 || *(void *)(v9 + 8) || *(unsigned char *)(v9 + 142)) && !*(unsigned char *)(v9 + 132)) {
        fra_issueAndCopyReportingEvent(v9, a3, 0, a4, 0, a5);
      }
      MEMORY[0x19970E930](*(void *)(v9 + 96));
      return 0;
    }
  }
  return result;
}

uint64_t reportingAgentIssueAndCopyRTCReportingEventWithPayload(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, int a5, CFDictionaryRef *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v11 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    if (!*(unsigned char *)(v11 + 132)) {
      fra_issueAndCopyReportingEvent(v11, a3, a4, a5, 0, a6);
    }
    MEMORY[0x19970E930](*(void *)(v11 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsCopy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955296;
  if (a3 && DerivedStorage && v5 && (uint64_t *)v5 != DerivedStorage)
  {
    MEMORY[0x19970E910](*(void *)(v5 + 96));
    if (*(void *)v5) {
      CFTypeRef v7 = CFRetain(*(CFTypeRef *)v5);
    }
    else {
      CFTypeRef v7 = 0;
    }
    MEMORY[0x19970E930](*(void *)(v5 + 96));
    MEMORY[0x19970E910](DerivedStorage[12]);
    uint64_t v8 = *DerivedStorage;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, CFTypeRef, uint64_t))(v10 + 184);
    if (v11) {
      v11(v8, v7, a3);
    }
    MEMORY[0x19970E930](DerivedStorage[12]);
    if (v7) {
      CFRelease(v7);
    }
    return 0;
  }
  return result;
}

uint64_t reportingAgentStatsAddToCountValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v8 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    if (!*(unsigned char *)(v8 + 132))
    {
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
      if (v12) {
        v12(v9, a2, a3, a4);
      }
    }
    MEMORY[0x19970E930](*(void *)(v8 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsUpdateSampleValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v8 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    if (!*(unsigned char *)(v8 + 132))
    {
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 72);
      if (v12) {
        v12(v9, a2, a3, a4);
      }
    }
    MEMORY[0x19970E930](*(void *)(v8 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsSetCFTypeValueWithOptions(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v10 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    if (!*(unsigned char *)(v10 + 132))
    {
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(v13 + 80);
      if (v14)
      {
        int v15 = v14(v11, a2, a3, a4);
        if (a5)
        {
          if (!v15) {
            reportingAgentFreezeKey(*(void *)v10, a2, a3);
          }
        }
      }
    }
    MEMORY[0x19970E930](*(void *)(v10 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsSetIntValueWithOptions(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v10 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    if (!*(unsigned char *)(v10 + 132))
    {
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(v13 + 88);
      if (v14)
      {
        int v15 = v14(v11, a2, a3, a4);
        if (a5)
        {
          if (!v15) {
            reportingAgentFreezeKey(*(void *)v10, a2, a3);
          }
        }
      }
    }
    MEMORY[0x19970E930](*(void *)(v10 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsResetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = 4294955296;
    if (a2)
    {
      if (a3)
      {
        MEMORY[0x19970E910](*(void *)(v6 + 96));
        if (!*(unsigned char *)(v6 + 132))
        {
          uint64_t v7 = *(void *)v6;
          uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v8) {
            uint64_t v9 = v8;
          }
          else {
            uint64_t v9 = 0;
          }
          uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
          if (v10) {
            v10(v7, a2, a3);
          }
        }
        MEMORY[0x19970E930](*(void *)(v6 + 96));
        return 0;
      }
    }
  }
  return result;
}

uint64_t reportingAgentStatsResetAll(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(result + 132))
    {
      return 4294955290;
    }
    else if (a2)
    {
      MEMORY[0x19970E910](*(void *)(result + 96));
      if (!*(unsigned char *)(v4 + 132))
      {
        uint64_t v5 = *(void *)v4;
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v6) {
          uint64_t v7 = v6;
        }
        else {
          uint64_t v7 = 0;
        }
        if (*(void *)(v7 + 160)) {
          (*(void (**)(uint64_t, uint64_t))(v7 + 168))(v5, a2);
        }
      }
      MEMORY[0x19970E930](*(void *)(v4 + 96));
      return 0;
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

uint64_t reportingAgentPeriodicStatsResetValue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    if (!*(unsigned char *)(v4 + 132))
    {
      uint64_t v5 = *(void *)v4;
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 128);
      if (v8) {
        v8(v5, a2);
      }
    }
    MEMORY[0x19970E930](*(void *)(v4 + 96));
  }
  return 0;
}

uint64_t reportingAgentUpdateUserInfo(uint64_t a1, const void *a2, const void *a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v8 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 142))
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
      if (!*(unsigned char *)(v8 + 132))
      {
        if (a2)
        {
          uint64_t v9 = *(const void **)(v8 + 16);
          *(void *)(v8 + 16) = a2;
          CFRetain(a2);
          if (v9) {
            CFRelease(v9);
          }
        }
        if (a3 && !*(void *)(v8 + 40)) {
          *(void *)(v8 + 40) = CFRetain(a3);
        }
        fra_setAdditionalReportingConfigParams(v8, a4);
        uint64_t v10 = *(void *)(v8 + 8);
        if (v10)
        {
          if (*(unsigned char *)(v8 + 124))
          {
            uint64_t v11 = @"com.apple.coremedia.apple_internal";
            uint64_t v12 = @"CM_AppleInternal";
          }
          else
          {
            uint64_t v12 = *(__CFString **)(v8 + 16);
            uint64_t v11 = *(__CFString **)(v8 + 40);
          }
          FigRTCReportingSetUserInfo(v10, *(void *)(v8 + 24), (uint64_t)v12, *(void *)(v8 + 56), (uint64_t)v11, *(const __CFDictionary **)(v8 + 64), *(unsigned __int8 *)(v8 + 160), *(_DWORD *)(v8 + 120));
        }
      }
      MEMORY[0x19970E930](*(void *)(v8 + 96));
    }
  }
  return 0;
}

uint64_t reportingAgentSetIntValueAndIssuePeriodicEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v8 = result;
    if (*(unsigned char *)(result + 132)) {
      return 4294955290;
    }
    if (!*(void *)(result + 8) && !*(unsigned char *)(result + 142)) {
      return 4294955296;
    }
    MEMORY[0x19970E910](*(void *)(result + 96));
    if (*(unsigned char *)(v8 + 132)) {
      goto LABEL_21;
    }
    uint64_t v18 = 0;
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v11 = v10 ? v10 : 0;
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v11 + 144);
    if (!v12) {
      goto LABEL_21;
    }
    int v13 = v12(v9, a2, a3, &v18);
    if (!v13)
    {
      if (v18 == a4) {
        goto LABEL_16;
      }
      int v13 = fra_issueAndCopyReportingEvent(v8, 110, 0, 0, 0, 0);
    }
    if (v13 != -17513 && v13 && v13 != -12005)
    {
LABEL_21:
      MEMORY[0x19970E930](*(void *)(v8 + 96));
      return 0;
    }
LABEL_16:
    uint64_t v14 = *(void *)v8;
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 88);
    if (v17) {
      v17(v14, a2, a3, a4);
    }
    goto LABEL_21;
  }
  return result;
}

uint64_t reportingAgentActivate(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955296;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
  if (!*(unsigned char *)(v5 + 132)) {
    fra_ensureRTCReportingConnection(a1, a2);
  }
  MEMORY[0x19970E930](*(void *)(v5 + 96));
  return 0;
}

uint64_t reportingAgentDeactivate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 142))
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
      if (!*(unsigned char *)(v1 + 132))
      {
        BOOL v2 = *(const void **)(v1 + 8);
        if (v2)
        {
          CFRelease(v2);
          *(void *)(v1 + _Block_object_dispose(&STACK[0x290], 8) = 0;
        }
        *(_DWORD *)(v1 + 136) = 2;
      }
      MEMORY[0x19970E930](*(void *)(v1 + 96));
    }
  }
  return 0;
}

uint64_t reportingAgentStatsAppendCFTypeValueToArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v10 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    if (!*(unsigned char *)(v10 + 132))
    {
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 192);
      if (v14) {
        v14(v11, a2, a3, a4, a5);
      }
    }
    MEMORY[0x19970E930](*(void *)(v10 + 96));
  }
  return 0;
}

void reportingAgentFreezeKey(uint64_t a1, uint64_t a2, const void *a3)
{
  CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    CFSetAddValue(Mutable, a3);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, __CFSet *))(v9 + 200);
    if (v10) {
      v10(a1, a2, v7);
    }
    CFRelease(v7);
  }
}

uint64_t FigPlayerSurrogateCreateWithOptions(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t value = 0;
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
  {
    FigPlayerGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (v6) {
      goto LABEL_25;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 0;
    if (a2)
    {
      CFTypeRef v9 = CFRetain(a2);
      *(unsigned char *)(v8 + 120) = 0;
      *(void *)(v8 + _Block_object_dispose(&STACK[0x290], 8) = v9;
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a2, @"LoggingIdentifier", (const void **)&value)) {
        CFStringGetCString((CFStringRef)value, (char *)(v8 + 120), 10, 0x600u);
      }
      FigCFDictionaryGetBooleanIfPresent();
    }
    else
    {
      *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x290], 8) = 0;
      *(unsigned char *)(DerivedStorage + 120) = 0;
    }
    if (dword_1E9351510)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef v12 = cf;
    uint64_t v13 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 120) : "";
    snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlayer.notifications[%p.%s]", v12, v13);
    uint64_t v14 = FigDispatchQueueCreateWithPriority();
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 16) = v14;
    uint64_t v6 = FigCFWeakReferenceTableCreate();
    if (v6)
    {
LABEL_25:
      uint64_t v20 = v6;
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *(void *)(v8 + 4_Block_object_dispose(&STACK[0x290], 8) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      CFTypeRef v15 = cf;
      if (cf) {
        uint64_t v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      }
      else {
        uint64_t v16 = "";
      }
      snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlayer[%p.%s]", v15, v16);
      *(void *)(v8 + 56) = FigDispatchQueueCreateWithPriority();
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"ActionAtEnd", @"Advance");
      *(void *)(v8 + 72) = Mutable;
      CFTypeRef v18 = cf;
      if (cf) {
        uint64_t v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      }
      else {
        uint64_t v19 = "";
      }
      snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlayer.inboundNotifications[%p.%s]", v18, v19);
      uint64_t v20 = 0;
      *(void *)(v8 + 64) = FigDispatchQueueCreateWithPriority();
      *(unsigned char *)(v8 + 89) = 1;
      *a3 = cf;
    }
    return v20;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlayerSurrogateCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  return FigPlayerSurrogateCreateWithOptions(a1, 0, a2);
}

uint64_t surrogatePlayer_Invalidate(void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return 4294954511;
  }
  uint64_t v3 = DerivedStorage;
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *((void *)v3 + 2);
  if (v5) {
    dispatch_sync_f(v5, 0, (dispatch_function_t)a_noop);
  }
  dispatch_sync_f(*((dispatch_queue_t *)v3 + 7), a1, (dispatch_function_t)surrogatePlayer_invalidateInternal);
  return 0;
}

void surrogatePlayer_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351510)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  surrogatePlayer_Invalidate(a1);
  uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_sync_f(v4, 0, (dispatch_function_t)a_noop);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 16));
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x290], 8) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 72);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 72) = 0;
  }
  CFTypeRef v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 8);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x290], 8) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 112);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 112) = 0;
  }
  CFTypeRef v12 = *(NSObject **)(DerivedStorage + 56);
  if (v12)
  {
    dispatch_release(v12);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v13 = *(NSObject **)(DerivedStorage + 64);
  if (v13)
  {
    dispatch_release(v13);
    *(void *)(DerivedStorage + 64) = 0;
  }
}

uint64_t surrogatePlayer_CopyProperty(uint64_t a1, __CFString *a2, const __CFAllocator *a3, void *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v36 = 0;
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v8 = 4294954511;
    goto LABEL_9;
  }
  if (!a4)
  {
    uint64_t v8 = 4294954516;
    goto LABEL_7;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    uint64_t v8 = FigDispatchQueueHolderCreateWithDispatchQueue();
    if (!v8) {
      *a4 = 0;
    }
    goto LABEL_7;
  }
  if (FigCFEqual())
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v37 = 0;
    CFTypeRef v38 = 0;
    CFArrayRef Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
    uint64_t v12 = *(void *)(DerivedStorage + 24);
    if (v12)
    {
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v12);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v15 + 48);
      if (!v19) {
        goto LABEL_37;
      }
      uint64_t v20 = v19(FigBaseObject, @"PerformanceHistoryArray", a3, &v38);
      if (v20) {
        goto LABEL_66;
      }
    }
    uint64_t v21 = *(void *)(DerivedStorage + 32);
    if (!v21)
    {
LABEL_36:
      FigCFArrayAppendArray();
      FigCFArrayAppendArray();
      uint64_t v8 = 0;
      *a4 = CFArrayCreateCopy(a3, Mutable);
LABEL_38:
      if (v38) {
        CFRelease(v38);
      }
      if (v37) {
        CFRelease(v37);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_7;
    }
    uint64_t v22 = FigPlayerGetFigBaseObject(v21);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v24 + 48);
    if (v25)
    {
      uint64_t v20 = v25(v22, @"PerformanceHistoryArray", a3, &v37);
      if (!v20) {
        goto LABEL_36;
      }
LABEL_66:
      uint64_t v8 = v20;
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v8 = 4294954514;
    goto LABEL_38;
  }
  int v16 = FigCFEqual();
  if (v16) {
    a2 = @"VideoLayerArray";
  }
  uint64_t v8 = surrogatePlayer_copyPropertyFromCache(a1, (uint64_t)a2, &cf, &v36);
  CFTypeRef v17 = v36;
  if (v36 || v8 != -12784)
  {
    if (v8 != -12784 && v8 != 0) {
      goto LABEL_7;
    }
  }
  else
  {
    if (FigCFEqual())
    {
      uint64_t v8 = 0;
      CFTypeRef cf = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    }
    else
    {
      uint64_t v8 = 4294954512;
    }
    CFTypeRef v17 = v36;
  }
  if (!v17) {
    goto LABEL_52;
  }
  uint64_t v26 = FigPlayerGetFigBaseObject(v17);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v28 + 48);
  if (v29)
  {
    uint64_t v8 = v29(v26, a2, *MEMORY[0x1E4F1CF80], &cf);
    if (!v8)
    {
LABEL_52:
      if (!v16)
      {
LABEL_63:
        *a4 = cf;
        CFTypeRef cf = 0;
        goto LABEL_9;
      }
      if (cf)
      {
        CFTypeID v30 = CFGetTypeID(cf);
        TypeIOSurfaceID ID = CFArrayGetTypeID();
        CFTypeRef v32 = cf;
        if (v30 == TypeID)
        {
          CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
          CFTypeRef v32 = cf;
          if (Count > 0)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
            CFTypeRef v32 = cf;
            CFTypeRef cf = ValueAtIndex;
            if (ValueAtIndex) {
              CFRetain(ValueAtIndex);
            }
            goto LABEL_61;
          }
        }
      }
      else
      {
        CFTypeRef v32 = 0;
      }
      CFTypeRef cf = 0;
LABEL_61:
      if (v32) {
        CFRelease(v32);
      }
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v8 = 4294954514;
  }
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
LABEL_9:
  if (v36) {
    CFRelease(v36);
  }
  return v8;
}